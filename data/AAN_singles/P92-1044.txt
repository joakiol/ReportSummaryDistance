A CCG APPROACH TO FREE WORD ORDER LANGUAGESBery l  Hoffman "Dept.
o f  Computer  and In format ion Sc iencesUnivers i ty  o f  Pennsy lvan iaPhi ladelphia,  PA 19104(ho f fman@ l inc.c is .upenn.edu)INTRODUCTIONIn this paper, I present work in progress on an ex-tension of Combinatory Categorial Grammars, CCGs,(Steedman 1985) to handle languages with freer wordorder than English, specifically Turkish.
The ap-proach I develop takes advantage of CCGs' abilityto combine the syntactic as well as the semantic rep-resentations of adjacent elements in a sentence in anincremental manner.
The linguistic claim behind myapproach is that free word order in Turkish is a di-rect result of its grammar and lexical categories; thisapproach is not compatible with a linguistic theoryinvolving movement operations and traces.A rich system of case markings identifies thepredicate-argument structure of a Turkish sentence,while the word order serves a pragmatic function.
Thepragmatic functions of certain positions in the sen-tence roughly consist of a sentence-initial position forthe topic, an immediately pre-verbal position for thefocus, and post-verbal positions for backgrounded in-formation (Erguvanli 1984).
The most common wordorder in simple transitive sentences i SOV (Subject-Object-Verb).
However, all of the permutations of thesentence seen below are grammatical in the properdiscourse situations.
(1) a. Ay~e gazeteyi okuyor.Ay~e newspaper-acc read-present.Ay~e is reading the newspaper.b.
Gazeteyi Ay~e okuyor.c.
Ay~e okuyor gazeteyi.d.
Gazeteyi okuyor Ay~e.e.
Okuyor gazeteyi Ay~e.f.
Okuyor Ay~e gazeteyi.Elements with overt case marking generally canscramble freely, even out of embedded clauses.
Thissuggest aCCG approach where case-marked elementsare functions which can combine with one another andwith verbs in any order.
*I thank Young-Suk Lee, Michael Niv, Jong Park, MarkSteedman, and Michael White for their valuable advice.This work was partially supported by ARt DAAL03-89-C-0031, DARPA N00014-90-J-1863, NSF IRI 90-16592,Ben Franklin 91S.3078C-1.Karttunen (1986) has proposed a CategorialGrammar formalism to handle free word order inFinnish, in which noun phrases are functors that ap-ply to the verbal basic elements.
Our approach treatscase-marked noun phrases as functors as well; how-ever, we allow verbs to maintain their status as func-tors in order to handle object-incorporation a d thecombining of nested verbs.
In addition, CCGs, unlikeKarttunen's grammar, allow the operations of com-position and type raising which have been useful inhandling a variety of linguistic phenomena includinglong distance dependencies and nonconstituent coor-dination (Steedman 1985) and will play an essentialrole in this analysis.AN OVERVIEW OF CCGsIn CCGs, grammatical categories are of two types:curried functors and basic categories to which thefunctors can apply.
A category such as X/Y  repre-sents a function looking for an argument of categoryY on its right and resulting in the category X.
A basiccategory such as X serves as a shorthand for a set ofsyntactic and semantic features.A short set of combinatory ules serve to combinethese categories while preserving a transparent rela-tion between syntax and semantics.
The applicationrules allow functors to combine with their arguments.Forward Application (>):X/Y  Y~XBackward Application (<):Y X \Y  ~ XIn addition, egGs include composition rules to com-bine together two functors yntactically and semanti-cally.
If these two functors have the semantic inter-pretation F and G, the result of their composition hasthe interpretation Az F (G ,  ).Forward Composition (> B):x/v v/z x/zBackward Composition (< B):v\z x\v x\zForward Crossing Composition (> \]3.r):.
',IV v\z  .\\zBackward Crossing Composition (< B:r):v/z x/z300FREE WORD ORDER IN CCGsRepresenting Verbs:In this analysis, we represent both verbs and case-marked noun phrases as functors.
In Karttunen's anal-ysis (1986), although a verb is a basic element ratherthan a functor, its arguments are specified as subcate-gorization features of its basic element category.
Wechoose to directly represent a verb's subcategorizationin its functor category.
An advantage of this approachis that at the end of a parse, we do not need an extraprocess to check if all the arguments of a verb havebeen found; this falls out of  the combination rules.Also, certain verbs need to act as active functors inorder to combine with objects without case marking.Following a suggestion of Mark Steedman, I de-fine the verb to be an uncurried function which spec-ifies a set of arguments that it can combine with inany order.
For instance, a transitive verb looking for anominative case noun phrase and an accusative casenoun phrase has the category S I{Nn , Na}.
Theslash I in this function is undetermined in direction;direction is a feature which can be specified for eachof the arguments, notated as an arrow above the ar-gument, e.g.
S\]{~,}.
Since Turkish is not strictlyverb final, most verbs will not specify the directionfeatures of their arguments.The use of uncurried notation allows great free-dom in word order among the arguments of a verb.However, we will want to use the curried notation forsome functors to enforce a certain ordering among thefunctors' arguments.
For example, object nouns orclauses without case-marking cannot scramble at alland must remain in the immediately pre-verbal posi-tion.
Thus, verbs which can take a so called incorpo-rated object will also have a curried functor categorysuch as SI{Nn, Nd}l{~ } forcing the verb to first ap-ply to a noun without case-marking to its immediateleft before combining with the rest of its arguments.Representing Nouns:The interaction between case-marking and the abilityto scramble in Turkish supports the theory that case-marked nouns act as functors.
Following Steedman(1985), order-preserving type-raising rules are used toconvert nouns in the grammar into functors over theverbs.
The following rules are obligatorily activatedin the lexicon when case-marking morphemes attachto the noun stems.Type Raising Rules:>N + case (vl{...}) I {vl{N' aa e .
.
.
.
}}<N + case ~ (vl{...}) I {v l{Ncase .... }}The first rule indicates that a noun in the presenceof a case morpheme becomes a functor looking for averb on its right; this verb is also a functor lookingfor the original noun with the appropriate case on itsleft.
After the noun functor combines with the appro-priam verb, the result is a functor which is lookingfor the remaining arguments of the verb.
v is actu-ally a variable for a verb phrase at any level, e.g.
theverb of the matrix clause or the verb of an embeddedclause.
The notation ... is also a variable which canunify with one or more elements of a set.The second type-raising rule indicates that a case-marked noun is looking for a verb on its left.
OurCCG formalism can model a strictly verb-final lan-guage by restricting the noun phrases of that languageto the first type-raising rule.
Since most, but not all,case-marked nouns in Turkish can occur behind theverb, certain pragmatic and semantic properties of aTurkish noun determine whether it can type-raise us-ing either rule or is restricted to only the first rule.The Extended Rules:We can extend the combinatory rules for uncurriedfunctions as follows.
The sets indicated by braces inthese rules are order-free, i.e.
Y in the following rulescan be any element in the set.
xForward Application' (>):Xl{  .... } YBackward Application' (<):Y .... } =x l{ .
.
.
}Using these new rules, a verb can apply to its argu-ments in any order, or as in most cases, the case-marked noun phrases which are type-raised functorscan apply to the appropriate verbs.Certain coordination constructions (such as SOand SOV, SOV and SO) force us to allow two type-raised noun phrases which are looking for the sameverb to combine together.
Since both noun phrasesare functors, the application rules above do not ap-ply.
The following composition rules are proposed toallow the combining of two functors.Forward Composition' (> /3):----Jlx l{r  .
.
.
.
,} Yl{ , .. .
.
-,}Backward Composition' (< /3):t,--YI{.
.
.1} x l{ r  .
.
.
.
2} X l{ .
.
.
,  .
.
.
.The following example demonstrates these rules inanalyzing sentence (1)b in the scrambled word orderObject-S ubject- Verb: 21We assume that a category Xl{ } where { } is theempty set rewrites by some clean-up rule to just X.2The bindings of the first composition axe e~ - v~,{...2}-- {Na .... ,}.301Gazeteyi Ay~ev l l{ .
.
.1} l{va l{ f fa  .. .
.
a }} v=l{.. .~}l{v21{ffn ....~ }}>B>(v,l{...~})l{vll{Nn, Na .... 1 }}>SLONG DISTANCE SCRAMBLINGIn complex Turkish sentences with clausal arguments,elements of the embedded clauses can be scrambledto positions in the main clause, i.e.
long distancescrambling.
Long distance scrambling appears to beno different han local scrambling as a syntactic andpragmatic operation.
Generally, long distance scram-bling is used to move an element into the sentence-initial topic position or to background it by moving itbehind the matrix verb.
(2) a.Fauna \[Ay~e'mn gittigini\] biliyor.Fauna \[Ay~e-gen go-ger-3sg-acc\] know-prog.FaUna knows that Ay~e went away.b.
Ay~e'nm FaUna \[gittigini\] biliyor.Ay~e-gen Fatma \[go-ger-acc\] know-prog.c.
Fauna \[gittigini\] biliyor Ay~e'mn.Fauna \[go-ger-acc\] know-prog Ay~e-gen.The composition rules allow noun phrases tocombine regardless of whether or not they are thearguments of the same verb.
The same rules allowtwo verbs to combine together.
In the following, thesemantic interpretation of a category is expressed fol-lowing the syntactic ategory.go-nominal-acc knows.S~, : (go 'y) l{Ng:y} S : (know'p  =)I{Nn:z,  SN,:p}<Bokuyor.S\[{Nn,Na}S : (kno'w'(go'y)x)l{Ng : y,Nn : "~}AS the two verbs combine, their arguments collapseinto one argument set in the syntactic representation.However, the verbs' respective arguments are still dis-tinct within the semantic representation f the sen-tence.
The predicate-argument structure of the sub-ordinate clause is embedded into the semantic repre-sentation of the matrix clause.Long distance scrambling in Turkish is quite free;however, there are many pragmatic and processingconstraints.
A syntactic restriction may be neededto explain why elements in certain adjunct clauses(though not all) are very hard to long distance scram-ble.
To account for these clauses, we can assign thehead of the restricted adjunct clause a curried functorcategory such as XIXl{argurn.ents...} rather thanXI{X ,arguments...}.
The curried category forcesthe adjunct head to combine with all of its argumentsin the adjunct clause before combining with the con-st i tuent it modifies.
This blocks long distance scram-bling out of that adjunct clause.302As mentioned before, another use for curriedfunctions is with object nouns or clauses without casemarking which are forced to remain in the immedi-ately pre-verbal position.
A matrix verb can have acategory such as SI{Nn}I{S2} to allow it to com-bine with a subordinate clause without case-marking($2) to its immediate left.
However, to restrict atype-raised Nn from interposing in between the ma-trix verb and the subordinate clause, we must restricttype raised noun phrases and verbs from composingtogether.
A language specific restriction, allowingcomposition only if (X ~ vl...) or (Y = vl...), is pro-posed, similar to the one placed on the Dutch gram-mar by Steedman (1985), to handle this case.CONCLUSIONSWhat I have described above is work in progress indeveloping a CCG account of free word order lan-guages.
We introduced an uncurried functor notationwhich allowed a greater freedom in word order.
Cur-ried functors were used to handle certain restrictionsin word order.
A uniform analysis was given forthe general inguistic facts involving both local andlong distance scrambling.
1have implemented a smallgrammar in Prolog to test out the ideas presented inthis paper.Further research is necessary in the handling oflong distance scrambling.
The restriction placed onthe composition rules in the last section should bebased on syntactic and semantic features.
Also, wemay want to represent subordinate clauses with case-marking as type-raised functions over the matrix verbin order to distinguish them from clauses withoutcase-marking.As a related area of research, prosody and prag-matic information must be incorporated into any ac-count of free word order languages.
Steedman (1990)has developed a categorial system which allows in-tonation to contribute information to the parsing pro-cess of CCGs.
Further esearch is necessary to decidehow best to use intonation and pragmatic informationwithin a CCG model to interpret Turkish.References\[1\] Erguvanli, Eser Emine.
1984.
The Function ofWord Order in Turkish Grammar.
University ofCalifornia Press.\[2\] Karttunen, Lauri.
1986.
'Radical Lexicalism'.
Pa-per presented at the Conference on AlternativeConceptions of Phrase Structure, July 1986, NewYork.\[3\] Steedman, Mark.
1985.
'Dependency and Coor-dination in the Grammar of Dutch and English',Language, 61,523-568.\[4\] Steedman, Mark.
1990.
'Structure and Intona-tion', MS-CIS-90-45, Computer and InformationScience, University of Pennsylvania.
