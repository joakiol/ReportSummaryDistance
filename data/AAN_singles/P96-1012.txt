Another  Facet  of  L IG  Pars ingPierre BoullierINRIA-RocquencourtBP 10578153 Le Chesnay Cedex, FrancePierre.
Boullier@inria.
frAbstractIn this paper 1 we present a new pars-ing algorithm for linear indexed grammars(LIGs) in the same spirit as the one de-scribed in (Vijay-Shanker and Weir, 1993)for tree adjoining grammars.
For a LIG Land an input string x of length n, we builda non ambiguous context-free grammarwhose sentences are all (and exclusively)valid derivation sequences in L which leadto x.
We show that this grammar canbe built in (9(n 6) time and that individ-ual parses can be extracted in linear timewith the size of the extracted parse tree.Though this O(n 6) upper bound does notimprove over previous results, the averagecase behaves much better.
Moreover, prac-tical parsing times can be decreased bysome statically performed computations.1 IntroductionThe class of mildly context-sensitive languages canbe described by several equivalent grammar types.Among these types we can notably cite tree adjoin-ing grammars (TAGs) and linear indexed grammars(LIGs).
In (Vijay-Shanker and Weir, 1994) TAGsare transformed into equivalent LIGs.
Thoughcontext-sensitive linguistic phenomena seem to bemore naturally expressed in TAG formalism, froma computational point of view, many authors thinkthat LIGs play a central role and therefore the un-derstanding of LIGs and LIG parsing is of impor-tance.
For example, quoted from (Schabes andShieber, 1994) "The LIG version of TAG can be usedfor recognition and parsing.
Because the LIG for-malism is based on augmented rewriting, the pars-ing algorithms can be much simpler to understand1See (Boullier, 1996) for an extended version.87and easier to modify, and no loss of generality is in-curred".
In (Vijay-Shanker and Weir, 1993) LIGsare used to express the derivations of a sentence inTAGs.
In (Vijay-Shanker, Weir and Rainbow, 1995)the approach used for parsing a new formalism, theD-Tree Grammars (DTG), is to translate a DTGinto a Linear Prioritized Multiset Grammar whichis similar to a LIG but uses multisets in place ofstacks.LIGs can be seen as usual context-free grammars(CFGs) upon which constraints are imposed.
Theseconstraints are expressed by stacks of symbols as-sociated with non-terminals.
We study parsing ofLIGs, our goal being to define a structure that ver-ifies the LIG constraints and codes all (and exclu-sively) parse trees deriving sentences.Since derivations in LIGs are constrained CFderivations, we can think of a scheme where theCF derivations for a given input are expressed bya shared forest from which individual parse treeswhich do not satisfied the LIG constraints areerased.
Unhappily this view is too simplistic, sincethe erasing of individual trees whose parts can beshared with other valid trees can only be performedafter some unfolding (unsharing) that can produceda forest whose size is exponential or even unbounded.In (Vijay-Shanker and Weir, 1993), the context-freeness of adjunction in TAGs is captured by givinga CFG to represent the set of all possible derivationsequences.
In this paper we study a new parsingscheme for LIGs based upon similar principles andwhich, on the other side, emphasizes as (Lang, 1991)and (Lang, 1994), the use of grammars (shared for-est) to represent parse trees and is an extension ofour previous work (Boullier, 1995).This previous paper describes a recognition algo-rithm for LIGs, but not a parser.
For a LIG and aninput string, all valid parse trees are actually codedinto the CF shared parse forest used by this recog-nizer, but, on some parse trees of this forest, thechecking of the LIG constraints can possibly failed.At first sight, there are two conceivable ways to ex-tend this recognizer into a parser:1. only "good" trees are kept;2. the LIG constraints are Ire-\]checked while theextraction of valid trees is performed.As explained above, the first solution can producean unbounded number of trees.
The second solutionis also uncomfortable since it necessitates the reeval-uation on each tree of the LIG conditions and, doingso, we move away from the usual idea that individ-ual parse trees can be extracted by a simple walkthrough a structure.In this paper, we advocate a third way which willuse (see section 4), the same basic material as theone used in (Boullier, 1995).
For a given LIG L andan input string x, we exhibit a non ambiguous CFGwhose sentences are all possible valid derivation se-quences in L which lead to x.
We show that thisCFG can be constructed in (.9(n 6) time and that in-dividual parses can be extracted in time linear withthe size of the extracted tree.2 Der ivat ion  Grammar  and  CFParse  ForestIn a CFG G = (VN, VT, P, S), the derives relationis the set {(aBa',aj3a') I B --~ j3 e P A V = GVN U VT A a, a ~ E V*}.
A derivation is a sequenceof strings in V* s.t.
the relation derives holds be-tween any two consecutive strings.
In a rightmostderivation, at each step, the rightmost non-terminalsay B is replaced by the right-hand side (RHS) ofa B-production.
Equivalently if a0 ~ .. .
~ an is G Ga rightmost derivation where the relation symbol isoverlined by the production used at each step, wesay that rl .
.
.
rn is a rightmost ao/a~-derivation.For a CFG G, the set of its rightmost S/x-derivations, where x E E(G), can itself be definedby a grammar.Definit ion 1 Let G = (VN,VT,P,S) be a CFG,its rightmost derivation grammar is the CFG D =(VN, P, pD, S) where pD _~ {A0 --~ A1.
.
.
Aqr I r ---Ao --+ woA lw l .
.
,  wq_lAqwq E P Awi  E V~ A Aj ELFrom the natural bijection between P and pD,we can easily prove thatL:(D) = {r~.
.
.
r l  Irl .
.
.
rn is a rightmost S/x-derivation i  G~This shows that the rightmost derivation languageof a CFG is also CF.
We will show in section 4 thata similar result holds for LIGs.Following (Lang, 1994), CF parsing is the inter-section of a CFG and a finite-state automaton (FSA)which models the input string x 2.
The result of thisintersection is a CFG G x -- (V~, V~, px,  ISIS) calleda shared parse forest which is a specialization of theinitial CFG G = (V~, VT, P, S) to x.
Each produc-J E px,  is the production ri E P up to some tion r inon-terminal renaming.
The non-terminal symbolsin V~ are triples denoted \[A\]~ where A E VN, andp and q are states.
When such a non-terminal isproductive, \[A\] q :~ w, we have q E 5(p, w).G ~If we build the rightmost derivation grammar as-sociated with a shared parse forest, and we removeall its useless ymbols, we get a reduced CFG say D ~ .The CF recognition problem for (G, x) is equivalentto the existence of an \[S\]~-production in D x. More-over, each rightmost S/x-derivation in G is (the re-verse of) a sentence in E(D*).
However, this resultis not very interesting since individual parse treescan be as easily extracted directly from the parseforest.
This is due to the fact that in the CF case, atree that is derived (a parse tree) contains all theinformation about its derivation (the sequence ofrewritings used) and therefore there is no need todistinguish between these two notions.
Though thisis not always the case with non CF formalisms, wewill see in the next sections that a similar approach,when applied to LIGs, leads to a shared parse for-est which is a LIG while it is possible to define aderivation grammar which is CF.3 Linear Indexed GrammarsAn indexed grammar is a CFG in which stack ofsymbols are associated with non-terminals.
LIGs area restricted form of indexed grammars in which thedependence between stacks is such that at most onestack in the RHS of a production is related with thestack in its LHS.
Other non-terminals are associatedwith independant stacks of bounded size.Following (Vijay-Shanker and Weir, 1994)Definit ion 2 L = (VN,VT,VI ,PL,S)  denotes aLIG where VN, VT, VI and PL are respectively fi-nite sets of non-terminals, terminals, stack symbolsand productions, and S is the start symbol.In the sequel we will only consider a restricted2if x = a l .
.
.
as, the states can be the integers 0.. .
n,0 is the initial state, n the unique final state, and thetransition function 5 is s.t.
i E 5(i-- 1, a~) and i E 5(i, ~).88form of LIGs with productions of the formPL = {A0 --+ w} U {A(..a) --+ P lB( .
.a ' ) r2}where A,B ?
VN, W ?
V~A0 < \[w\[ < 2, aa' ?
V ;A0 < \[aa'\[ < 1 and r , r2  ?
v u( }u(c01 c ?An element like A(..a) is a primary constituentwhile C0  is a secondary constituent.
The stackschema (..a) of a primary constituent matches allthe stacks whose prefix (bottom) part is left unspec-ified and whose suffix (top) part is a; the stack of asecondary constituent is always empty.Such a form has been chosen both for complexityreasons and to decrease the number of cases we haveto deal with.
However, it is easy to see that this formof LIG constitutes a normal form.We use r 0 to denote a production in PL, wherethe parentheses remind us that we are in a LIG!The CF-backbone of a LIG is the underlying CFGin which each production is a LIG production wherethe stack part of each constituent has been deleted,leaving only the non-terminal part.
We will onlyconsider LIGs such there is a bijection between itsproduction set and the production set of its CF-backbone 3.We call object the pair denoted A(a) where Ais a non-terminal and (a) a stack of symbols.
LetVo = {A(a) \[ A ?
VN Aa  ?
V;} be the set ofobjects.
We define on (Vo LJ VT)* the binary relationderives denoted =~ (the relation symbol is sometimesLoverlined by a production):r A(a"a)rLI i A()=~w r lA( ) r2  ' ' FlWF2LIn the first above element we say that the objectB(a"a ~) is the distinguished child of A(a"a), and ifF1F2 = C0,  C0  is the secondary object.
A deriva-tion F~,.
.
.
,  Fi, F i+x, .
.
.
,  Ft is a sequence of stringswhere the relation derives holds between any twoconsecutive stringsThe language defined by a LIG L is the set:?
(L) = {x \[ S 0 :=~ x A x ?
V~ }LAs in the CF case we can talk of rightmost deriva-tions when the rightmost object is derived at eachstep.
Of course, many other derivation strategiesmay be thought of.
For our parsing algorithm, weneed such a particular derives relation.
Assume thatat one step an object derives both a distinguished3rp and rp0 with the same index p designate associ-ated productions.child and a secondary object.
Our particular deriva-tion strategy is such that this distinguished child willalways be derived after the secondary object (and itsdescendants), whether this secondary object lays toits left or to its right.
This derives relation is denoted=~ and is called linear 4.l , LA spine is the sequence of objects Al(al)?
.. Ai(ai) Ai+l (~i+1)... Ap(ap) if, there is a deriva-tion in which each object Ai+l (ai+l) is the distin-guished child of Ai(ai) (and therefore the distin-guished descendant of Aj(aj), 1 <_ j <_ i).4 L inear  Der ivat ion  GrammarFor a given LIG L, consider a linear SO~x-derivationso .
.
.
.
.
.
=t,L t,L l ,LThe sequence of productions r l0 .
.
.
r iO .
.
.
rnO(considered in reverse order) is a string in P~.
Thepurpose of this section is to define the set of suchstrings as the language defined by some CFG.Associated with a LIG L = (VN, VT, VI, PL, S),we first define a bunch of binary relations which areborrowed from (Boullier , 1995)-4,- = {(A,B) \[A(..) ~ r ,B( .
. )
r~ e PL}1"r-~ = {(A,B) I A(.. ) -~ r lB( .
.~)r2  e PL}17>- = {(A,B) I 4 rxB(..)r2 e PL}I-~  = {(A1,Ap) \ [A10 =~ r lA , ( ) r~ and A,0q- Lis a distinguished escendant of A1 O}The l-level relations imply indicate, for each pro-duction, which operation can be apply to the stackassociated with the LHS non-terminal to get thestack associated with its distinguished child; ~ in-1dicates equality, -~ the pushing of 3", and ~- the pop-1 1ping of 3'-If we look at the evolution of a stack alonga spine A1 (ax) .
.
.
Ai (ai)Ai+x (ai+x).
.
.
Ap (ap), be-tween any two objects one of the following holds:OL i ~ O~i+1, Ol i3 , ~ OLi+I, or ai = a i+ l~.The -O- relation select pairs of non-terminals+(A1, Ap) s.t.
a l  = ap = e along non trivial spines.4linear reminds us that we are in a LIG and reliesupon a linear (total) order over object occurrences ina derivation.
See (Boullier, 1996) for a more formaldefinition.897 7 7If the relations >- and ~ are defined as >-=>-+ + 17 "/7 U ~-~- and ~---- UTev~ "<>', we can see that the+1 1+following identity holdsProperty 1--?,- = -?.-U~U-K>--~,-Uw.,--~-+ 1 1 + +In (Boullier, 1995) we can found an algorithm swhich computes the -~,  >- and ~ relations as the+ +composition of -,?,-, -~ and ~- in O(IVNI 3) time.1 1 1Def in i t ion 3 For a LIG L = (VN, VT, Vz, PL, S),we call linear derivation grammar (LDG) theCFG DL (or D when L is understood) D =(VND, V D, pD, S D) where?
V D={\ [A \ ] IA ?VN}U{\ [ApB\ ] IA ,B ?VNAp ?
7~}, and ~ is the set of relations {~,-?,-,'Y1 1?
VTD = pL?
S ?
= \[S\]?
Below, \[F1F2\]symbol \[X\] when FIF2 =string e when F1F2 ?
V~.beingdenotes either the non-terminalX 0 or the emptypo  is defined as{\[A\] -+ r 0 I rO = AO -~ w ?
PL} (1)U{\[A\] -+ r0\[A +-~ B\] Ir 0 = B 0 -+ w ?
PL} (2)UI\[A +~- C\] ~ \[rlr~\]r0 Ir 0 = A(..) ~ r , c ( .
. )
r :  ?
PL} (3)u{\[A +-~ C\] --+ \[A ~ C\]} (4)u{\[A c\] \[B c\]\[rlr: lr0 Ir0 = AC) rls(..)r2 ?
PL} (5)(6) U{\[A +-~ C\] -> \[B ~ C\]\[A ~ B\]}U{\[A ~ C\] ~ \[B ~- c \ ] \ [ r l r2 \ ] r0  I +r 0 = A(..) ~ r lB( .
.~)r2 ?
PL} (7)5Though in the referred paper, these relations are de-fined on constituents, the algorithm also applies to non-terminals.6In fact we will only use valid non-terminals \[ApB\]for which the relation p holds between A and B.U{\[A ~ C\] ~ \ [ r l r~\ ] r0  I-I-r0  = A(..7) ~ r l c ( .
. )
r~ ?
PL} (8)U{\[A ~-+ C\] --~ \[F1F2\]r0\[A ~ S \ ] lr0  = B(..-y) r l c ( .
. )
r ,  ?
(9)The productions in pD define all the ways lin-ear derivations can be composed from linear sub-derivations.
This compositions rely on one side uponproperty 1 (recall that the productions in PL, mustbe produced in reverse order) and, on the other side,upon the order in which secondary spines (the r lF2-spines) are processed to get the linear derivation or-der.In (Boullier, 1996), we prove that LDGs are notambiguous (in fact they are SLR(1)) and define?
(D) = {nO.
- .
r -O ISOr~) .
.
.
r_~)xl , L  f.,LAx 6 ?
(L)}If, by some classical algorithm, we remove from Dall its useless symbols, we get a reduced CFG sayD' = (VN D' , VT D' , pD', SO' ).
In this grammar, all itsterminal symbols, which are productions in L, areuseful.
By the way, the construction of D' solve theemptiness problem for LIGs: L specify the emptyset iff the set VT D' is empty 7.5 L IG  pars ingGiven a LIG L : (VN, VT, Vz, PL, S) we want to findall the syntactic structures associated with an inputstring x 6 V~.
In section 2 we used a CFG (theshared parse forest) for representing all parses in aCFG.
In this section we will see how to build a CFGwhich represents all parses in a LIG.In (Boullier, 1995) we give a recognizer for LIGswith the following scheme: in a first phase a generalCF parsing algorithm, working on the CF-backbonebuilds a shared parse forest for a given input string x.In a second phase, the LIG conditions are checked onthis forest.
This checking can result in some subtree(production) deletions, namely the ones for whichthere is no valid symbol stack evaluation.
If the re-sulting grammar is not empty, then x is a sentence.However, in the general case, this resulting gram-mar is not a shared parse forest for the initial LIGin the sense that the computation of stack of sym-bols along spines are not guaranteed to be consis-tent.
Such invalid spines are not deleted during thecheck of the LIG conditions because they could be7In (Vijay-Shanker and Weir, 1993) the emptinessproblem for LIGs is solved by constructing an FSA.90composed of sub-spines which are themselves partsof other valid spines.
One way to solve this problemis to unfold the shared parse forest and to extractindividual parse trees.
A parse tree is then kept iffthe LIG conditions are valid on that tree.
But sucha method is not practical since the number of parsetrees can be unbounded when the CF-backbone iscyclic.
Even for non cyclic grammars, the numberof parse trees can be exponential in the size of theinput.
Moreover, it is problematic that a worst casepolynomial size structure could be reached by somesharing compatible both with the syntactic and the%emantic" features.However, we know that derivations in TAGs arecontext-free (see (Vijay-Shanker, 1987)) and (Vijay-Shanker and Weir, 1993) exhibits a CFG which rep-resents all possible derivation sequences in a TAG.We will show that the analogous holds for LIGs andleads to an O(n 6) time parsing algorithm.Def in i t ion 4 Let L = (VN, VT, VI, PL, S) be a LIG,G = (VN,VT,PG, S) its CF-backbone, x a stringin E(G), and G ~ = (V~,V~,P~,S ~) its sharedparse \]orest for x.
We define the LIGed forestfor x as being the LIG L ~ = (V~r, V~, VI, P~, S ~)s.t.
G z is its CF-backbone and its productions arethe productions o\] P~ in which the correspondingstack-schemas o\] L have been added.
For exam-ple rg 0 = \[AI~(..~) -4 \[BI{(..~')\[C\]~0 e P~ iffJ k r q = \[A\] k -4 \[B\]i\[C\]j e P~Arp  = A -4 BC eG A rpO = A(..~) -4 B(..~')C 0 e n.Between a LIG L and its LIGed forest L ~ for x,we have:x~?
(L)  ?==~ xCf~(L ~)If we follow(Lang, 1994), the previous definitionwhich produces a LIGed forest from any L and xis a (LIG) parserS: given a LIG L and a string x,we have constructed a new LIG L ~ for the intersec-tion Z;(L) C) {x}, which is the shared forest for allparses of the sentences in the intersection.
However,we wish to go one step further since the parsing (oreven recognition) problem for LIGs cannot be triv-ially extracted from the LIGed forests.Our vision for the parsing of a string x with a LIGL can be summarized in few lines.
Let G be the CF-backbone of L, we first build G ~ the CFG sharedparse forest by any classical general CF parsing al-gorithm and then L x its LIGed forest.
Afterwards,we build the reduced LDG DL~ associated with L ~as shown in section 4.Sof course, instead of x, we can consider any FSA.91The recognition problem for (L, x) (i.e.
is x anelement of ?
(L)) is equivalent to the non-emptinessof the production set of OLd.Moreover, each linear SO~x-derivation in L is (thereverse of) a string in ff.(DL*)9.
So the extraction ofindividual parses in a LIG is merely reduced to thederivation of strings in a CFG.An important issue is about the complexity, intime and space, of DL~.
Let n be the length ofthe input string x.
Since G is in binary form weknow that the shared parse forest G x can be buildin O(n 3) time and the number of its productionsis also in O(n3).
Moreover, the cardinality of V~is O(n 2) and, for any given non-terminal, say \[A\] q,there are at most O(n) \[A\]g-productions.
Of course,these complexities extend to the LIGed forest L z.We now look at the LDG complexity when theinput LIG is a LIGed forest.
In fact, we mainly haveto check two forms of productions (see definition 3).The first form is production (6) (\[A +-~ C\] -+ \[B +C\]\[A ~-0 B\]), where three different non-terminals inVN are implied (i.e.
A, B and C), so the number ofproductions of that form is cubic in the number ofnon-terminals and therefore is O(n6).In the second form (productions (5), (7) and (9)),exemplified by \[A ~ C\] -4 \[B ~ c\]\[rlr2\]r(), there ?are four non-terminals in VN (i.e.
A, B, C, and Xif FIF2 = X0)  and a production r 0 (the numberof relation symbols ~ is a constant), therefore, the ?number of such productions eems to be of fourthdegree in the number of non-terminals and linear inthe number of productions.
However, these variablesare not independant.
For a given A, the number oftriples (B,X,  r0 )  is the number of A-productionshence O(n).
So, at the end, the number of produc-tions of that form is O(nh).We can easily check that the other form of pro-ductions have a lesser degree.Therefore, the number of productions is domi-nated by the first form and the size (and in factthe construction time) of this grammar is 59(n6).This (once again) shows that the recognition andparsing problem for a LIG can be solved in 59(n 6)time.For a LDG D = (V D, V D, pD SD), we note thatfor any given non-terminal A E VN D and string a E?
:(A) with \[a\[ >_ 2, a single production A -4 X1X2or A -4 X1X2X3 in pD is needed to "cut" a into twoor three non-empty pieces al, 0"2, and 0-3, such that?In fact, the terminal symbols in DL~ axe produc-tions in L ~ (say Rq()), which trivially can be mapped toproductions in L (here rp()).Xi ~ a{, except when the production form num-Dbet (4) is used.
In such a case, this cutting needstwo productions (namely (4) and (7)).
This showsthat the cutting out of any string of length l, intoelementary pieces of length 1, is performed in usingO(l) productions.
Therefore, the extraction of a lin-ear so~x-derivation i  L is performed in time linearwith the length of that derivation.
If we assume thatthe CF-backbone G is non cyclic, the extraction ofa parse is linear in n. Moreover, during an extrac-tion, since DL= is not ambiguous, at some place, thechoice of another A-production will result in a dif-ferent linear derivation.Of course, practical generations ofLDGs must im-prove over a blind application of definition 3.
Oneway is to consider a top-down strategy: the X-productions in a LDG are generated iffX is the startsymbol or occurs in the RHS of an already generatedproduction.
The examples in section 6 are producedthis way.If the number of ambiguities in the initial LIG isbounded, the size of DL=, for a given input string xof length n, is linear in n.The size and the time needed to compute DL.
areclosely related to the actual sizes of the -<~-, >- and+ +relations.
As pointed out in (Boullier, 1995), theirO(n 4) maximum sizes seem to be seldom reached inpractice.
This means that the average parsing timeis much better than this (..9(n 6) worst case.Moreover, our parsing schema llow to avoid someuseless computations.
Assume that the symbol\[A ~ B\] is useless in the LDG DL associated withthe initial LIG L, we know that any non-terminals.t.
\[\[A\]{ +-~ \[B\]~\] is also useless in DL=.
Therefore,the static computation of a reduced LDG for theinitial LIG L (and the corresponding -?-, >- and .~+ +relations) can be used to direct the parsing processand decrease the parsing time (see section 6).6 Two Examples6.1 First ExampleIn this section, we illustrate our algorithm with aLIG L -- ({S, T\], {a, b, c}, {7~, 75, O'c}, PL, S) wherePL contains the following productions:~ 0 : s( .
. )
-+ s ( .
.eo)~r30 : s( .
. )
--+ S(..%)crhO : T(..7~) --+ aT(..)rT0 = T(..%) -+ cT(..)r20  = S(..) --+ S(..Tb)br40  = S(..) --+ T(..)r60  = T( .
.%)  -+ bT(..)rs0 = T0 --+ cIt is easy to see that its CF-backbone G, whose92production set Pc is:S-+ Sa S -~ Sb S-+ S c S -~ TT -}aT  T -+ bT T -~ cT T -+ cdefines the language ?
(G) = {wcw' I w,w' 6{a, b, c\]*}.
We remark that the stacks of symbols inL constrain the string w' to be equal to w and there-fore the language ?
(L) is {wcw I w 6 {a, b, c\]*}.We note that in L the key part is played by themiddle c, introduced by production rs0, and thatthis grammar is non ambiguous, while in G the sym-bol c, introduced by the last production T ~ c, isonly a separator between w and w' and that thisgrammar is ambiguous (any occurrence of c may bethis separator).The computation of the relations gives:+ = {(S ,T )}19% "{b 9"?= ~ = ~ = {(s , s )}1 1 19% "Tb ~c>- = >- = >- = ~(T ,T \ ] \ ]1 1 1+ = {(S,T)}+= {(S,T)}9'a 9'5 '7c >.- = >- = >- = {(T,T) , (S,T)}+ + +The production set pD of the LDG D associatedwith L is:\[S\] --+ rs0\[S -~+ T\] (2)IS T T\] -+ ~0 (3)\[S +-~T\] --+ \ [S~T\ ]  (4)IS ~ T\] --+ \[S ~ T\]rl 0 (7)\[S ~ T\] --+ \[S ,~ T\]r20 (7)\[S ~ T\] =-+ IS ~- T\]ra 0 (7)+\[S ~ T\] -=+ rh()\[S +-~ T\] (9)IS ~:+ T\] + ~( ) \ [S  ~ T\] (9)\[S ~ T\] --+ rT0\[S -~+ T\] (9)The numbers (i) refer to definition 3.
We caneasily checked that this grammar is reduced.Let x = ccc be an input string.
Since x is anelement of ?
(G), its shared parse forest G x is notempty.
Its production set P~ is:r l  = \[s\]~ -+ \[s\]~cr~ = \[S\]o ~ -+ \[S\]~cr4 ~ = \[s\]~ --+ IT\] 1r~ = \[T\]I 3 --+ c\[T\] 3r 9 = \[T\]~ =+ c\[T\] 2~1 = \[T\]~ -+ cr~ = \[S\]~ -+ \[T\]o ~r44 = \[S\]~ --~ \[T\]o 2r~ = \[T\]3o =-+ c\[T\]31rs = \[T\] 3 --+ crs 1?
= \[T\]~ --+ cWe can observe that this shared parse forest denotesin fact three different parse trees.
Each one corre-sponding to a different cutting out of x = wcw' (i.e.w = ~ and w' = ce, or w : c and w' = c, or w = ecand w' = g).The corresponding LIGed forest whose start sym-bol is S * = \[S\]~ and production set P~ is:r~0 = \[S\]o%.)
-~ \[s\]~(..%)?~0 = IS\]0%.)
- ,  IT\]o%.
)~0 = \[S\]o%.)
~ \[S\]o~(..%)c~40 = \[s\]~(..) -~ IT\]o%.
)~0 = ISIS(..) ~ \[T\]~(..)r60 T 3 = \ [ \ ]0( .
.%)  -~ ~\[T\]~(..)r~0 : \[T\]3(..%) ~ c\[T\]23(..)rsS0 = \[T\]~ 0 --+ cr~0 = \[T\]o%.%) -~ c\[T\]~(..)r~?0 : \[T\]~ 0 -+ e~0 = \[T\]~0 -~ cFor this LIGed forest the relations are:11")'c1+>- __=_+((\[S\]o a, \[T\]oa), (\[S\]o 2, \[T\]o2), (\[S\]o 1, \[T\]ol) }{(IsiS, \[s\]o~), (\[S\]o ~, IsiS)}{ (\[T\]o 3, \[T\]~), (\[T\] 3 , \[T\]23), (\[T\]o 2 , \[T\]2) }{(\[s\]~0, \[T\]~)}-?.- (3 ~1U{ (\[S\]o 3, \[T\]13), (\[S\]o 2, \[T\]~) }The start symbol of the LDG associated with theLIGed forest L * is \[\[S\]o3\].
If we assume that an A-production is generated iff it is an \[\[S\]o3\]-productionor A occurs in an already generated production, weget:\[\[S\]o ~\] ~ ~?
()\[\[s\]~ + \[T\]~\] (2)\[\[S\]~ +~ \[T\]~\] -+ \[\[S\]o ~ ~ \[Th'\] (4)\[\[S\] a ~-.
\[TIll -+ \[\[S\]o 2 ~2 \[T\]~\]r~ () (7)+\[\[S\]o ~ ~:+ \[T\]~\] -~ ~()\[\[S\]o ~ ~+ \[T\]o ~1 (9)\[\[S\]~ ~ \[T\]~\] ~ ~0 (3)This CFG is reduced.
Since its production set isnon empty, we have ccc E ~(L).
Its language is{r~ ?0 r9 0 r4 ()r~ 0 } which shows that the only linearderivation in L is S() ~)  S(%)c r~) T(Tc)C r=~)t ,L  t , L  l , LeT()c ~)  ccc .g,L93In computing the relations for the initial LIG L,we remark that though T ~2 T, T ~ T, and T ~ T,+ + +the non-terminals IT ~ T\], \[T ~ T\], and IT ~: T\] are+ +not used in pp .
This means that for any LIGed for-est L ~, the elements of the form (\[Tip q, \[T\]~:) do not")'aneed to be computed in the ~+, ~+ , and ~:+ relationssince they will never produce a useful non-terminal.In this example, the subset ~: of ~: is useless.1 -bThe next example shows the handling of a cyclicgrammar.6.2 Second ExampleThe following LIG L, where A is the start symbol:rl() = A(..) ~ A(..%) r2() = A(..) ~ B(..)r30 = B(.
.%) -~ B(..) r40 = B0  ~ ais cyclic (we have A =~ A and B =~ B in its CF-backbone), and the stack schemas in production rl 0indicate that an unbounded number of push % ac-tions can take place, while production r3 0 indicatesan unbounded number of pops.
Its CF-backbone isunbounded ambiguous though its language containsthe single string a.The computation of the relations gives:-~- = {(A,B)}1-< = {(A,A)}1>- = {(B,B)}1+ = {(A,B)}+= {(d, B)}7a~- = {(A, B), (B, B)}+The start symbol of the LDG associated with L is\[A\] and its productions et pO is:\[A\] -+ r40\[A +-~ B\] (2)\[A +~B\ ]  -+ r20 (3)\[A +~-B\] ~ \ [A~B\ ]  (4)\[A ~ B\] -~ \[A ~ B\]rl 0 (7)+\[A ~2 B\] -~ r3 0\[A +~- B\] (9)+We can easily checked that this grammar is re-duced.We want to parse the input string x -- a (i.e.
findall the linear SO/a-derivations ).Its LIGed forest, whose start== \ [A f t ( .
.
)== \[B\]o 0For this LIGed17a ..<11.<,-+"t,*+symbol is \[A\]~ is:-,  \[Aft(..%)\[B\]~(..)--+ \[B\]~(..)aforest L x, the relations are:{(JAIL= {(\[Aft, \[Aft)}== {( \ [A f t ,-= {( \ [A f t ,  \ [B\]ol )}= {(\[A\]~, \[B\]~), (IBIS, \[B\]~)}The start symbol of the LDG associated with L xis \[\[A\]~\].
If we assume that an A-production is gen-erated iff it is an \[\[A\]~\]-production or A occurs in analready generated production, its production set is:\[\[AI~\] -+ r~()\[\[A\]~ +-~ \[S\] 11 (2)\[\[A\]~ - + \[B\]~\] -+ r220 (3)\[\[A\]~ +-~ \[B\]01\] ~ \[\[A\]o 1 ~ \[B\]o 1\] (4)\[\[A\]~ ~.\[B\]01\] -+ \[\[A\]~ ~: \[B\]~\]r I 0 (7) +\[\[A\]~ ~+ \[B\]~\] --4 r3()\[\[A\]l o ~ \[S\]10\] (9)This CFG is reduced.
Since its production setis non empty, we have a 6 ?(L).
Its language is{r4(){r\]())kr~O{r~O} k \ ]0 < k) which shows thatthe only valid linear derivations w.r.t.
L must con-tain an identical number k of productions whichpush 7a (i.e.
the production r l0)  and productionswhich pop 7a (i.e.
the production r3()).As in the previous example, we can see that theelement \[S\]~ \[B\]~ is useless.+7 Conc lus ionWe have shown that the parses of a LIG can be rep-resented by a non ambiguous CFG.
This represen-tation captures the fact that the values of a stack ofsymbols is well parenthesized.
When a symbol 3' ispushed on a stack at a given index at some place, thisvery symbol must be popped some place else, and weknow that such (recursive) pairing is the essence ofcontext-freeness.In this approach, the number of productions andthe construction time of this CFG is at worst O(n6),94though much better esults occur in practical situa-tions.
Moreover, static computations on the initialLIG may decrease this practical complexity in avoid-ing useless computations.
Each sentence in this CFGis a derivation of the given input string by the LIG,and is extracted in linear time.ReferencesPierre Boullier.
1995.
Yet another (_O(n 6) recog-nition algorithm for mildly context-sensitive lan-guages.
In Proceedings of the fourth internationalworkshop on parsing technologies (IWPT'95),Prague and Karlovy Vary, Czech Republic, pages34-47.
See also Research Report No 2730at http: I/www.
inria, fr/R2~T/R~-2730.html,INRIA-Rocquencourt, France, Nov. 1995, 22pages.Pierre Boullier.
1996.
Another Facet of LIG Parsing(extended version).
In Research Report No P858at http://www, inria, fr/RRKT/KK-2858.html,INRIA-Rocquencourt, France, Apr.
1996, 22pages.Bernard Lang.
1991.
Towards a uniform formalframework for parsing.
In Current Issues in Pars-ing Technology, edited by M. Tomita, Kluwer Aca-demic Publishers, pages 153-171.Bernard Lang.
1994.
Recognition can be harderthan parsing.
In Computational Intelligence, Vol.10, No.
4, pages 486-494.Yves Schabes, Stuart M. Shieber.
1994.
An Alter-native Conception of Tree-Adjoining Derivation.In ACL Computational Linguistics, Vol.
20, No.1, pages 91-124.K.
Vijay-Shanker.
1987.
A study of tree adjoininggrammars.
PhD thesis, University of Pennsylva-nia.K.
Vijay-Shanker, David J. Weir.
1993.
The Used ofShared Forests in Tree Adjoining Grammar Pars-ing.
In Proceedings of the 6th Conference of theEuropean Chapter of the Association for Com-putational Linguistics (EACL'93), Utrecht, TheNetherlands, pages 384-393.K.
Vijay-Shanker, David J. Weir.
1994.
Parsingsome constrained grammar formalisms.
In A CLComputational Linguistics, Vol.
19, No.
4, pages591-636.K.
Vijay-Shanker, David J. Weir, Owen Rambow.1995.
Parsing D-Tree Grammars.
In Proceed-ings of the fourth international workshop on pars-ing technologies (IWPT'95), Prague and KarlovyVary, Czech Republic, pages 252-259.
