Similarity of Semantic RelationsPeter D. Turney?National Research Council CanadaThere are at least two kinds of similarity.
Relational similarity is correspondence between re-lations, in contrast with attributional similarity, which is correspondence between attributes.When two words have a high degree of attributional similarity, we call them synonyms.
Whentwo pairs of words have a high degree of relational similarity, we say that their relations areanalogous.
For example, the word pair mason:stone is analogous to the pair carpenter:wood.This article introduces Latent Relational Analysis (LRA), a method for measuring relationalsimilarity.
LRA has potential applications in many areas, including information extraction,word sense disambiguation, and information retrieval.
Recently the Vector Space Model (VSM)of information retrieval has been adapted to measuring relational similarity, achieving a scoreof 47% on a collection of 374 college-level multiple-choice word analogy questions.
In theVSM approach, the relation between a pair of words is characterized by a vector of frequenciesof predefined patterns in a large corpus.
LRA extends the VSM approach in three ways: (1)The patterns are derived automatically from the corpus, (2) the Singular Value Decomposition(SVD) is used to smooth the frequency data, and (3) automatically generated synonyms areused to explore variations of the word pairs.
LRA achieves 56% on the 374 analogy questions,statistically equivalent to the average human score of 57%.
On the related problem of classifyingsemantic relations, LRA achieves similar gains over the VSM.1.
IntroductionThere are at least two kinds of similarity.
Attributional similarity is correspondence be-tween attributes and relational similarity is correspondence between relations (Medin,Goldstone, and Gentner 1990).
When two words have a high degree of attributionalsimilarity, we call them synonyms.
When two word pairs have a high degree of relationalsimilarity, we say they are analogous.Verbal analogies are often written in the form A:B::C:D, meaning A is to B as C is toD; for example, traffic:street::water:riverbed.
Traffic flows over a street; water flows overa riverbed.
A street carries traffic; a riverbed carries water.
There is a high degree ofrelational similarity between the word pair traffic:street and the word pair water:riverbed.In fact, this analogy is the basis of several mathematical theories of traffic flow (Daganzo1994).In Section 2, we look more closely at the connections between attributional andrelational similarity.
In analogies such as mason:stone::carpenter:wood, it seems that?
Institute for Information Technology, National Research Council Canada, M-50 Montreal Road, Ottawa,Ontario, Canada K1A 0R6.
E-mail: peter.turney@nrc-cnrc.gc.ca.Submission received: 30 March 2005; revised submission received: 10 November 2005; accepted forpublication: 27 February 2006.?
2006 Association for Computational LinguisticsComputational Linguistics Volume 32, Number 3relational similarity can be reduced to attributional similarity, since mason and carpen-ter are attributionally similar, as are stone and wood.
In general, this reduction fails.Consider the analogy traffic:street::water:riverbed.
Traffic and water are not attributionallysimilar.
Street and riverbed are only moderately attributionally similar.Many algorithms have been proposed for measuring the attributional similar-ity between two words (Lesk 1969; Resnik 1995; Landauer and Dumais 1997; Jiangand Conrath 1997; Lin 1998b; Turney 2001; Budanitsky and Hirst 2001; Banerjee andPedersen 2003).
Measures of attributional similarity have been studied extensively, dueto their applications in problems such as recognizing synonyms (Landauer and Dumais1997), information retrieval (Deerwester et al 1990), determining semantic orientation(Turney 2002), grading student essays (Rehder et al 1998), measuring textual cohesion(Morris and Hirst 1991), and word sense disambiguation (Lesk 1986).On the other hand, since measures of relational similarity are not as well developedas measures of attributional similarity, the potential applications of relational similarityare not as well known.
Many problems that involve semantic relations would benefitfrom an algorithm for measuring relational similarity.
We discuss related problems innatural language processing, information retrieval, and information extraction in moredetail in Section 3.This article builds on the Vector Space Model (VSM) of information retrieval.
Givena query, a search engine produces a ranked list of documents.
The documents areranked in order of decreasing attributional similarity between the query and eachdocument.
Almost all modern search engines measure attributional similarity usingthe VSM (Baeza-Yates and Ribeiro-Neto 1999).
Turney and Littman (2005) adapt theVSM approach to measuring relational similarity.
They used a vector of frequencies ofpatterns in a corpus to represent the relation between a pair of words.
Section 4 presentsthe VSM approach to measuring similarity.In Section 5, we present an algorithm for measuring relational similarity, whichwe call Latent Relational Analysis (LRA).
The algorithm learns from a large corpusof unlabeled, unstructured text, without supervision.
LRA extends the VSM approachof Turney and Littman (2005) in three ways: (1) The connecting patterns are derivedautomatically from the corpus, instead of using a fixed set of patterns.
(2) Singular ValueDecomposition (SVD) is used to smooth the frequency data.
(3) Given a word pair suchas traffic:street, LRA considers transformations of the word pair, generated by replacingone of the words by synonyms, such as traffic:road or traffic:highway.Section 6 presents our experimental evaluation of LRA with a collection of 374multiple-choice word analogy questions from the SAT college entrance exam.1 An ex-ample of a typical SAT question appears in Table 1.
In the educational testing literature,the first pair (mason:stone) is called the stem of the analogy.
The correct choice is called thesolution and the incorrect choices are distractors.
We evaluate LRA by testing its abilityto select the solution and avoid the distractors.
The average performance of college-bound senior high school students on verbal SAT questions corresponds to an accuracyof about 57%.
LRA achieves an accuracy of about 56%.
On these same questions, theVSM attained 47%.1 The College Board eliminated analogies from the SAT in 2005, apparently because it was believed thatanalogy questions discriminate against minorities, although it has been argued by liberals (Goldenberg2005) that dropping analogy questions has increased discrimination against minorities and byconservatives (Kurtz 2002) that it has decreased academic standards.
Analogy questions remain animportant component in many other tests, such as the GRE.380Turney Similarity of Semantic RelationsTable 1An example of a typical SAT question, from the collection of 374 questions.Stem: mason:stoneChoices: (a) teacher:chalk(b) carpenter:wood(c) soldier:gun(d) photograph:camera(e) book:wordSolution: (b) carpenter:woodOne application for relational similarity is classifying semantic relations in noun-modifier pairs (Turney and Littman 2005).
In Section 7, we evaluate the performanceof LRA with a set of 600 noun-modifier pairs from Nastase and Szpakowicz (2003).The problem is to classify a noun-modifier pair, such as ?laser printer,?
according tothe semantic relation between the head noun (printer) and the modifier (laser).
The600 pairs have been manually labeled with 30 classes of semantic relations.
For example,?laser printer?
is classified as instrument; the printer uses the laser as an instrument forprinting.We approach the task of classifying semantic relations in noun-modifier pairs as asupervised learning problem.
The 600 pairs are divided into training and testing setsand a testing pair is classified according to the label of its single nearest neighbor in thetraining set.
LRA is used to measure distance (i.e., similarity, nearness).
LRA achievesan accuracy of 39.8% on the 30-class problem and 58.0% on the 5-class problem.
On thesame 600 noun-modifier pairs, the VSM had accuracies of 27.8% (30-class) and 45.7%(5-class) (Turney and Littman 2005).We discuss the experimental results, limitations of LRA, and future work in Sec-tion 8 and we conclude in Section 9.2.
Attributional and Relational SimilarityIn this section, we explore connections between attributional and relational similarity.2.1 Types of SimilarityMedin, Goldstone, and Gentner (1990) distinguish attributes and relations as follows:Attributes are predicates taking one argument (e.g., X is red, X is large), whereasrelations are predicates taking two or more arguments (e.g., X collides with Y, X islarger than Y).
Attributes are used to state properties of objects; relations expressrelations between objects or propositions.Gentner (1983) notes that what counts as an attribute or a relation can depend on thecontext.
For example, large can be viewed as an attribute of X, LARGE(X), or a relationbetween X and some standard Y, LARGER THAN(X, Y).The amount of attributional similarity between two words, A and B, dependson the degree of correspondence between the properties of A and B.
A measure ofattributional similarity is a function that maps two words, A and B, to a real number,381Computational Linguistics Volume 32, Number 3sima(A, B) ?
.
The more correspondence there is between the properties of A and B,the greater their attributional similarity.
For example, dog and wolf have a relativelyhigh degree of attributional similarity.The amount of relational similarity between two pairs of words, A:B and C:D,depends on the degree of correspondence between the relations between A and Band the relations between C and D. A measure of relational similarity is a functionthat maps two pairs, A:B and C:D, to a real number, simr(A :B, C :D) ?
.
The morecorrespondence there is between the relations of A:B and C:D, the greater their relationalsimilarity.
For example, dog:bark and cat:meow have a relatively high degree of relationalsimilarity.Cognitive scientists distinguish words that are semantically associated (bee?honey)from words that are semantically similar (deer?pony), although they recognize that somewords are both associated and similar (doctor?nurse) (Chiarello et al 1990).
Both of theseare types of attributional similarity, since they are based on correspondence betweenattributes (e.g., bees and honey are both found in hives; deer and ponies are bothmammals).Budanitsky and Hirst (2001) describe semantic relatedness as follows:Recent research on the topic in computational linguistics has emphasized theperspective of semantic relatedness of two lexemes in a lexical resource, or its inverse,semantic distance.
It?s important to note that semantic relatedness is a more generalconcept than similarity; similar entities are usually assumed to be related by virtue oftheir likeness (bank?trust company), but dissimilar entities may also be semanticallyrelated by lexical relationships such as meronymy (car?wheel) and antonymy (hot?cold),or just by any kind of functional relationship or frequent association (pencil?paper,penguin?Antarctica).As these examples show, semantic relatedness is the same as attributional similarity(e.g., hot and cold are both kinds of temperature, pencil and paper are both used forwriting).
Here we prefer to use the term attributional similarity because it emphasizes thecontrast with relational similarity.
The term semantic relatedness may lead to confusionwhen the term relational similarity is also under discussion.Resnik (1995) describes semantic similarity as follows:Semantic similarity represents a special case of semantic relatedness: for example, carsand gasoline would seem to be more closely related than, say, cars and bicycles, but thelatter pair are certainly more similar.
Rada et al (1989) suggest that the assessment ofsimilarity in semantic networks can in fact be thought of as involving just taxonomic(IS-A) links, to the exclusion of other link types; that view will also be taken here,although admittedly it excludes some potentially useful information.Thus semantic similarity is a specific type of attributional similarity.
The term semanticsimilarity is misleading, because it refers to a type of attributional similarity, yet rela-tional similarity is not any less semantic than attributional similarity.To avoid confusion, we will use the terms attributional similarity and relationalsimilarity, following Medin, Goldstone, and Gentner (1990).
Instead of semantic sim-ilarity (Resnik 1995) or semantically similar (Chiarello et al 1990), we prefer the termtaxonomical similarity, which we take to be a specific type of attributional similarity.
Weinterpret synonymy as a high degree of attributional similarity.
Analogy is a high degreeof relational similarity.382Turney Similarity of Semantic Relations2.2 Measuring Attributional SimilarityAlgorithms for measuring attributional similarity can be lexicon-based (Lesk 1986;Budanitsky and Hirst 2001; Banerjee and Pedersen 2003), corpus-based (Lesk 1969;Landauer and Dumais 1997; Lin 1998a; Turney 2001), or a hybrid of the two (Resnik1995; Jiang and Conrath 1997; Turney et al 2003).
Intuitively, we might expectthat lexicon-based algorithms would be better at capturing synonymy than corpus-based algorithms, since lexicons, such as WordNet, explicitly provide synonymy in-formation that is only implicit in a corpus.
However, experiments do not support thisintuition.Several algorithms have been evaluated using 80 multiple-choice synonym ques-tions taken from the Test of English as a Foreign Language (TOEFL).
An example ofone of the 80 TOEFL questions appears in Table 2.
Table 3 shows the best performanceon the TOEFL questions for each type of attributional similarity algorithm.
The resultssupport the claim that lexicon-based algorithms have no advantage over corpus-basedalgorithms for recognizing synonymy.2.3 Using Attributional Similarity to Solve AnalogiesWe may distinguish near analogies (mason:stone::carpenter:wood) from far anal-ogies (traffic:street::water:riverbed) (Gentner 1983; Medin, Goldstone, and Gentner 1990).In an analogy A:B::C:D, where there is a high degree of relational similarity betweenA:B and C:D, if there is also a high degree of attributional similarity between Aand C, and between B and D, then A:B::C:D is a near analogy; otherwise, it is a faranalogy.It seems possible that SAT analogy questions might consist largely of near analogies,in which case they can be solved using attributional similarity measures.
We could scoreeach candidate analogy by the average of the attributional similarity, sima, between Aand C and between B and D:score(A :B ::C :D) = 12 (sima(A, C) + sima(B, D)) (1)This kind of approach was used in two of the thirteen modules in Turney et al (2003)(see Section 3.1).Table 2An example of a typical TOEFL question, from the collection of 80 questions.Stem: LeviedChoices: (a) imposed(b) believed(c) requested(d) correlatedSolution: (a) imposed383Computational Linguistics Volume 32, Number 3Table 3Performance of attributional similarity measures on the 80 TOEFL questions.
(The averagenon-English US college applicant?s performance is included in the bottom row, for comparison.
)Reference Description Percent correctJarmasz and Szpakowicz (2003) Best lexicon-based algorithm 78.75Terra and Clarke (2003) Best corpus-based algorithm 81.25Turney et al (2003) Best hybrid algorithm 97.50Landauer and Dumais (1997) Average human score 64.50To evaluate this approach, we applied several measures of attributional similarity toour collection of 374 SAT questions.
The performance of the algorithms was measuredby precision, recall, and F, defined as follows:precision =number of correct guessestotal number of guesses made(2)recall =number of correct guessesmaximum possible number correct(3)F =2 ?
precision ?
recallprecision + recall(4)Note that recall is the same as percent correct (for multiple-choice questions, with onlyzero or one guesses allowed per question, but not in general).Table 4 shows the experimental results for our set of 374 analogy questions.
Forexample, using the algorithm of Hirst and St-Onge (1998), 120 questions were answeredcorrectly, 224 incorrectly, and 30 questions were skipped.
When the algorithm assignedthe same similarity to all of the choices for a given question, that question was skipped.The precision was 120/(120 + 224) and the recall was 120/(120 + 224 + 30).The first five algorithms in Table 4 are implemented in Pedersen?s WordNet-Similarity package.2 The sixth algorithm (Turney 2001) used the Waterloo MultiTextSystem (WMTS), as described in Terra and Clarke (2003).The difference between the lowest performance (Jiang and Conrath 1997) and ran-dom guessing is statistically significant with 95% confidence, according to the FisherExact Test (Agresti 1990).
However, the difference between the highest performance(Turney 2001) and the VSM approach (Turney and Littman 2005) is also statisticallysignificant with 95% confidence.
We conclude that there are enough near analogiesin the 374 SAT questions for attributional similarity to perform better than randomguessing, but not enough near analogies for attributional similarity to perform as wellas relational similarity.2 See http://www.d.umn.edu/?tpederse/similarity.html.384Turney Similarity of Semantic Relations3.
Related WorkThis section is a brief survey of the many problems that involve semantic relations andcould potentially make use of an algorithm for measuring relational similarity.3.1 Recognizing Word AnalogiesThe problem of recognizing word analogies is, given a stem word pair and a finite list ofchoice word pairs, selecting the choice that is most analogous to the stem.
This problemwas first attempted by a system called Argus (Reitman 1965), using a small hand-builtsemantic network.
Argus could only solve the limited set of analogy questions that itsprogrammer had anticipated.
Argus was based on a spreading activation model anddid not explicitly attempt to measure relational similarity.Turney et al (2003) combined 13 independent modules to answer SAT questions.The final output of the system was based on a weighted combination of the outputs ofeach individual module.
The best of the 13 modules was the VSM, which is describedin detail in Turney and Littman (2005).
The VSM was evaluated on a set of 374 SATquestions, achieving a score of 47%.In contrast with the corpus-based approach of Turney and Littman (2005), Veale(2004) applied a lexicon-based approach to the same 374 SAT questions, attaining a scoreof 43%.
Veale evaluated the quality of a candidate analogy A:B::C:D by looking for pathsin WordNet, joining A to B and C to D. The quality measure was based on the similaritybetween the A:B paths and the C:D paths.Turney (2005) introduced Latent Relational Analysis (LRA), an enhanced versionof the VSM approach, which reached 56% on the 374 SAT questions.
Here we gobeyond Turney (2005) by describing LRA in more detail, performing more extensiveexperiments, and analyzing the algorithm and related work in more depth.3.2 Structure Mapping TheoryFrench (2002) cites Structure Mapping Theory (SMT) (Gentner 1983) and its imple-mentation in the Structure Mapping Engine (SME) (Falkenhainer, Forbus, and Gentner1989) as the most influential work on modeling of analogy making.
The goal of com-putational modeling of analogy making is to understand how people form complex,Table 4Performance of attributional similarity measures on the 374 SAT questions.
Precision, recall, andF are reported as percentages.
(The bottom two rows are not attributional similarity measures.They are included for comparison.
)Algorithm Type Precision Recall FHirst and St-Onge (1998) Lexicon-based 34.9 32.1 33.4Jiang and Conrath (1997) Hybrid 29.8 27.3 28.5Leacock and Chodorow (1998) Lexicon-based 32.8 31.3 32.0Lin (1998b) Hybrid 31.2 27.3 29.1Resnik (1995) Hybrid 35.7 33.2 34.4Turney (2001) Corpus-based 35.0 35.0 35.0Turney and Littman (2005) Relational (VSM) 47.7 47.1 47.4Random Random 20.0 20.0 20.0385Computational Linguistics Volume 32, Number 3structured analogies.
SME takes representations of a source domain and a target domainand produces an analogical mapping between the source and target.
The domainsare given structured propositional representations, using predicate logic.
These de-scriptions include attributes, relations, and higher-order relations (expressing relationsbetween relations).
The analogical mapping connects source domain relations to targetdomain relations.For example, there is an analogy between the solar system and Rutherford?s modelof the atom (Falkenhainer, Forbus, and Gentner 1989).
The solar system is the sourcedomain and Rutherford?s model of the atom is the target domain.
The basic objects inthe source model are the planets and the sun.
The basic objects in the target model arethe electrons and the nucleus.
The planets and the sun have various attributes, suchas mass(sun) and mass(planet), and various relations, such as revolve(planet, sun) andattracts(sun, planet).
Likewise, the nucleus and the electrons have attributes, such ascharge(electron) and charge(nucleus), and relations, such as revolve(electron, nucleus)and attracts(nucleus, electron).
SME maps revolve(planet, sun) to revolve(electron, nu-cleus) and attracts(sun, planet) to attracts(nucleus, electron).Each individual connection (e.g., from revolve(planet, sun) to revolve(electron, nu-cleus)) in an analogical mapping implies that the connected relations are similar; thus,SMT requires a measure of relational similarity in order to form maps.
Early versionsof SME only mapped identical relations, but later versions of SME allowed similar,nonidentical relations to match (Falkenhainer 1990).
However, the focus of research inanalogy making has been on the mapping process as a whole, rather than measuringthe similarity between any two particular relations; hence, the similarity measures usedin SME at the level of individual connections are somewhat rudimentary.We believe that a more sophisticated measure of relational similarity, such as LRA,may enhance the performance of SME.
Likewise, the focus of our work here is on thesimilarity between particular relations, and we ignore systematic mapping between setsof relations, so LRA may also be enhanced by integration with SME.3.3 MetaphorMetaphorical language is very common in our daily life, so common that we are usuallyunaware of it (Lakoff and Johnson 1980).
Gentner et al (2001) argue that novel metaphorsare understood using analogy, but conventional metaphors are simply recalled frommemory.
A conventional metaphor is a metaphor that has become entrenched in ourlanguage (Lakoff and Johnson 1980).
Dolan (1995) describes an algorithm that canrecognize conventional metaphors, but is not suited to novel metaphors.
This suggeststhat it may be fruitful to combine Dolan?s (1995) algorithm for handling conventionalmetaphorical language with LRA and SME for handling novel metaphors.Lakoff and Johnson (1980) give many examples of sentences in support of theirclaim that metaphorical language is ubiquitous.
The metaphors in their sample sen-tences can be expressed using SAT-style verbal analogies of the form A:B::C:D. The firstcolumn in Table 5 is a list of sentences from Lakoff and Johnson (1980) and the secondcolumn shows how the metaphor that is implicit in each sentence may be made explicitas a verbal analogy.3.4 Classifying Semantic RelationsThe task of classifying semantic relations is to identify the relation between a pairof words.
Often the pairs are restricted to noun-modifier pairs, but there are many386Turney Similarity of Semantic RelationsTable 5Metaphorical sentences from Lakoff and Johnson (1980), rendered as SAT-style verbal analogies.Metaphorical sentence SAT-style verbal analogyHe shot down all of my arguments.
aircraft:shoot down::argument:refuteI demolished his argument.
building:demolish::argument:refuteYou need to budget your time.
money:budget::time:scheduleI?ve invested a lot of time in her.
money:invest::time:allocateMy mind just isn?t operating today.
machine:operate::mind:thinkLife has cheated me.
charlatan:cheat::life:disappointInflation is eating up our profits.
animal:eat::inflation:reduceinteresting relations, such as antonymy, that do not occur in noun-modifier pairs.
How-ever, noun-modifier pairs are interesting due to their high frequency in English.
Forinstance, WordNet 2.0 contains more than 26,000 noun-modifier pairs, although manycommon noun-modifiers are not in WordNet, especially technical terms.Rosario and Hearst (2001) and Rosario, Hearst, and Fillmore (2002) classify noun-modifier relations in the medical domain, using Medical Subject Headings (MeSH) andUnified Medical Language System (UMLS) as lexical resources for representing eachnoun-modifier pair with a feature vector.
They trained a neural network to distinguish13 classes of semantic relations.
Nastase and Szpakowicz (2003) explore a similar ap-proach to classifying general noun-modifier pairs (i.e., not restricted to a particulardomain, such as medicine), using WordNet and Roget?s Thesaurus as lexical resources.Vanderwende (1994) used hand-built rules, together with a lexical knowledge base, toclassify noun-modifier pairs.None of these approaches explicitly involved measuring relational similarity, butany classification of semantic relations necessarily employs some implicit notion of re-lational similarity since members of the same class must be relationally similar to someextent.
Barker and Szpakowicz (1998) tried a corpus-based approach that explicitly useda measure of relational similarity, but their measure was based on literal matching,which limited its ability to generalize.
Moldovan et al (2004) also used a measure ofrelational similarity based on mapping each noun and modifier into semantic classesin WordNet.
The noun-modifier pairs were taken from a corpus, and the surroundingcontext in the corpus was used in a word sense disambiguation algorithm to improvethe mapping of the noun and modifier into WordNet.
Turney and Littman (2005) usedthe VSM (as a component in a single nearest neighbor learning algorithm) to measurerelational similarity.
We take the same approach here, substituting LRA for the VSM, inSection 7.Lauer (1995) used a corpus-based approach (using the BNC) to paraphrase noun?modifier pairs by inserting the prepositions of, for, in, at, on, from, with, and about.
Forexample, reptile haven was paraphrased as haven for reptiles.
Lapata and Keller (2004)achieved improved results on this task by using the database of AltaVista?s searchengine as a corpus.3.5 Word Sense DisambiguationWe believe that the intended sense of a polysemous word is determined by its semanticrelations with the other words in the surrounding text.
If we can identify the semantic387Computational Linguistics Volume 32, Number 3relations between the given word and its context, then we can disambiguate the givenword.
Yarowsky?s (1993) observation that collocations are almost always monosemousis evidence for this view.
Federici, Montemagni, and Pirrelli (1997) present an analogy-based approach to word sense disambiguation.For example, consider the word plant.
Out of context, plant could refer to an in-dustrial plant or a living organism.
Suppose plant appears in some text near food.
Atypical approach to disambiguating plant would compare the attributional similarityof food and industrial plant to the attributional similarity of food and living organism(Lesk 1986; Banerjee and Pedersen 2003).
In this case, the decision may not be clear,since industrial plants often produce food and living organisms often serve as food.
Itwould be very helpful to know the relation between food and plant in this example.
Inthe phrase ?food for the plant,?
the relation between food and plant strongly suggeststhat the plant is a living organism, since industrial plants do not need food.
In thetext ?food at the plant,?
the relation strongly suggests that the plant is an industrialplant, since living organisms are not usually considered as locations.
Thus, an algorithmfor classifying semantic relations (as in Section 7) should be helpful for word sensedisambiguation.3.6 Information ExtractionThe problem of relation extraction is, given an input document and a specific relation R,to extract all pairs of entities (if any) that have the relation R in the document.
The prob-lem was introduced as part of the Message Understanding Conferences (MUC) in 1998.Zelenko, Aone, and Richardella (2003) present a kernel method for extracting therelations person?affiliation and organization?location.
For example, in the sentence JohnSmith is the chief scientist of the Hardcom Corporation, there is a person?affiliation relationbetween John Smith and Hardcom Corporation (Zelenko, Aone, and Richardella 2003).This is similar to the problem of classifying semantic relations (Section 3.4), exceptthat information extraction focuses on the relation between a specific pair of entitiesin a specific document, rather than a general pair of words in general text.
There-fore an algorithm for classifying semantic relations should be useful for informationextraction.In the VSM approach to classifying semantic relations (Turney and Littman 2005),we would have a training set of labeled examples of the relation person?affiliation,for instance.
Each example would be represented by a vector of pattern frequencies.Given a specific document discussing John Smith and Hardcom Corporation, we couldconstruct a vector representing the relation between these two entities and then mea-sure the relational similarity between this unlabeled vector and each of our labeledtraining vectors.
It would seem that there is a problem here because the trainingvectors would be relatively dense, since they would presumably be derived froma large corpus, but the new unlabeled vector for John Smith and Hardcom Corpora-tion would be very sparse, since these entities might be mentioned only once in thegiven document.
However, this is not a new problem for the VSM; it is the standardsituation when the VSM is used for information retrieval.
A query to a search en-gine is represented by a very sparse vector, whereas a document is represented bya relatively dense vector.
There are well-known techniques in information retrievalfor coping with this disparity, such as weighting schemes for query vectors thatare different from the weighting schemes for document vectors (Salton and Buckley1988).388Turney Similarity of Semantic Relations3.7 Question AnsweringIn their article on classifying semantic relations, Moldovan et al (2004) suggest that animportant application of their work is question answering (QA).
As defined in the TextRetrieval Conference (TREC) QA track, the task is to answer simple questions, such as?Where have nuclear incidents occurred?
?, by retrieving a relevant document from alarge corpus and then extracting a short string from the document, such as The ThreeMile Island nuclear incident caused a DOE policy crisis.
Moldovan et al (2004) propose tomap a given question to a semantic relation and then search for that relation in a corpusof semantically tagged text.
They argue that the desired semantic relation can easily beinferred from the surface form of the question.
A question of the form ?Where.
.
.
??
islikely to be looking for entities with a location relation and a question of the form ?Whatdid ...
make??
is likely to be looking for entities with a product relation.
In Section 7, weshow how LRA can recognize relations such as location and product (see Table 19).3.8 Automatic Thesaurus GenerationHearst (1992) presents an algorithm for learning hyponym (type of ) relations from acorpus and Berland and Charniak (1999) describe how to learn meronym (part of )relations from a corpus.
These algorithms could be used to automatically generate athesaurus or dictionary, but we would like to handle more relations than hyponymyand meronymy.
WordNet distinguishes more than a dozen semantic relations betweenwords (Fellbaum 1998) and Nastase and Szpakowicz (2003) list 30 semantic relations fornoun-modifier pairs.
Hearst and Berland and Charniak (1999) use manually generatedrules to mine text for semantic relations.
Turney and Littman (2005) also use a manuallygenerated set of 64 patterns.LRA does not use a predefined set of patterns; it learns patterns from a large corpus.Instead of manually generating new rules or patterns for each new semantic relation,it is possible to automatically learn a measure of relational similarity that can handlearbitrary semantic relations.
A nearest neighbor algorithm can then use this relationalsimilarity measure to learn to classify according to any set of classes of relations, giventhe appropriate labeled training data.Girju, Badulescu, and Moldovan (2003) present an algorithm for learning meronymrelations from a corpus.
Like Hearst (1992) and Berland and Charniak (1999), theyuse manually generated rules to mine text for their desired relation.
However, theysupplement their manual rules with automatically learned constraints, to increase theprecision of the rules.3.9 Information RetrievalVeale (2003) has developed an algorithm for recognizing certain types of word analo-gies, based on information in WordNet.
He proposes to use the algorithm for analog-ical information retrieval.
For example, the query Muslim church should returnmosque and the query Hindu bible should return the Vedas.
The algorithm was de-signed with a focus on analogies of the form adjective:noun::adjective:noun, such asChristian:church::Muslim:mosque.A measure of relational similarity is applicable to this task.
Given a pair of words,A and B, the task is to return another pair of words, X and Y, such that there ishigh relational similarity between the pair A:X and the pair Y:B.
For example, given389Computational Linguistics Volume 32, Number 3A = Muslim and B = church, return X = mosque and Y = Christian.
(The pair Muslim:mosquehas a high relational similarity to the pair Christian:church.
)Marx et al (2002) developed an unsupervised algorithm for discovering analogiesby clustering words from two different corpora.
Each cluster of words in one corpusis coupled one-to-one with a cluster in the other corpus.
For example, one experimentused a corpus of Buddhist documents and a corpus of Christian documents.
A cluster ofwords such as {Hindu, Mahayana, Zen, ...} from the Buddhist corpus was coupled witha cluster of words such as {Catholic, Protestant, ...} from the Christian corpus.
Thus thealgorithm appears to have discovered an analogical mapping between Buddhist schoolsand traditions and Christian schools and traditions.
This is interesting work, but it is notdirectly applicable to SAT analogies, because it discovers analogies between clusters ofwords rather than individual words.3.10 Identifying Semantic RolesA semantic frame for an event such as judgement contains semantic roles such as judge,evaluee, and reason, whereas an event such as statement contains roles such as speaker,addressee, and message (Gildea and Jurafsky 2002).
The task of identifying semantic rolesis to label the parts of a sentence according to their semantic roles.
We believe that itmay be helpful to view semantic frames and their semantic roles as sets of semanticrelations; thus, a measure of relational similarity should help us to identify semanticroles.
Moldovan et al (2004) argue that semantic roles are merely a special case ofsemantic relations (Section 3.4), since semantic roles always involve verbs or predicates,but semantic relations can involve words of any part of speech.4.
The Vector Space ModelThis section examines past work on measuring attributional and relational similarityusing the VSM.4.1 Measuring Attributional Similarity with the Vector Space ModelThe VSM was first developed for information retrieval (Salton and McGill 1983; Saltonand Buckley 1988; Salton 1989) and it is at the core of most modern search engines(Baeza-Yates and Ribeiro-Neto 1999).
In the VSM approach to information retrieval,queries and documents are represented by vectors.
Elements in these vectors are basedon the frequencies of words in the corresponding queries and documents.
The frequen-cies are usually transformed by various formulas and weights, tailored to improve theeffectiveness of the search engine (Salton 1989).
The attributional similarity between aquery and a document is measured by the cosine of the angle between their correspond-ing vectors.
For a given query, the search engine sorts the matching documents in orderof decreasing cosine.The VSM approach has also been used to measure the attributional similarity ofwords (Lesk 1969; Ruge 1992; Pantel and Lin 2002).
Pantel and Lin (2002) clusteredwords according to their attributional similarity, as measured by a VSM.
Their algo-rithm is able to discover the different senses of polysemous words, using unsupervisedlearning.Latent Semantic Analysis enhances the VSM approach to information retrieval byusing the Singular Value Decomposition (SVD) to smooth the vectors, which helps390Turney Similarity of Semantic Relationsto handle noise and sparseness in the data (Deerwester et al 1990; Dumais 1993;Landauer and Dumais 1997).
SVD improves both document-query attributional sim-ilarity measures (Deerwester et al 1990; Dumais 1993) and word?word attributionalsimilarity measures (Landauer and Dumais 1997).
LRA also uses SVD to smooth vec-tors, as we discuss in Section 5.4.2 Measuring Relational Similarity with the Vector Space ModelLet R1 be the semantic relation (or set of relations) between a pair of words, A and B,and let R2 be the semantic relation (or set of relations) between another pair, C and D.We wish to measure the relational similarity between R1 and R2.
The relations R1 and R2are not given to us; our task is to infer these hidden (latent) relations and then comparethem.In the VSM approach to relational similarity (Turney and Littman 2005), we createvectors, r1 and r2, that represent features of R1 and R2, and then measure the similarityof R1 and R2 by the cosine of the angle ?
between r1 and r2:r1 = ?r1,1, .
.
.
, r1,n?
(5)r2 = ?r2,1, .
.
.
r2,n?
(6)cosine(?)
=n?i=1r1,i ?
r2,i?n?i=1(r1,i)2 ?n?i=1(r2,i)2=r1 ?
r2?r1 ?
r1 ?
?r2 ?
r2=r1 ?
r2?r1?
?
?r2?
(7)We create a vector, r, to characterize the relationship between two words, X and Y,by counting the frequencies of various short phrases containing X and Y. Turney andLittman (2005) use a list of 64 joining terms, such as of, for, and to, to form 128 phrasesthat contain X and Y, such as X of Y, Y of X, X for Y, Y for X, X to Y, and Y to X. Thesephrases are then used as queries for a search engine and the number of hits (matchingdocuments) is recorded for each query.
This process yields a vector of 128 numbers.If the number of hits for a query is x, then the corresponding element in the vector ris log(x + 1).
Several authors report that the logarithmic transformation of frequenciesimproves cosine-based similarity measures (Salton and Buckley 1988; Ruge 1992; Lin1998b).Turney and Littman (2005) evaluated the VSM approach by its performance on 374SAT analogy questions, achieving a score of 47%.
Since there are five choices for eachquestion, the expected score for random guessing is 20%.
To answer a multiple-choiceanalogy question, vectors are created for the stem pair and each choice pair, and thencosines are calculated for the angles between the stem pair and each choice pair.
Thebest guess is the choice pair with the highest cosine.
We use the same set of analogyquestions to evaluate LRA in Section 6.391Computational Linguistics Volume 32, Number 3The VSM was also evaluated by its performance as a distance (nearness) measurein a supervised nearest neighbor classifier for noun-modifier semantic relations (Turneyand Littman 2005).
The evaluation used 600 hand-labeled noun-modifier pairs fromNastase and Szpakowicz (2003).
A testing pair is classified by searching for its singlenearest neighbor in the labeled training data.
The best guess is the label for the trainingpair with the highest cosine.
LRA is evaluated with the same set of noun-modifier pairsin Section 7.Turney and Littman (2005) used the AltaVista search engine to obtain the frequencyinformation required to build vectors for the VSM.
Thus their corpus was the set of allWeb pages indexed by AltaVista.
At the time, the English subset of this corpus consistedof about 5 ?
1011 words.
Around April 2004, AltaVista made substantial changes totheir search engine, removing their advanced search operators.
Their search engine nolonger supports the asterisk operator, which was used by Turney and Littman (2005)for stemming and wild-card searching.
AltaVista also changed their policy towardautomated searching, which is now forbidden.3Turney and Littman (2005) used AltaVista?s hit count, which is the number ofdocuments (Web pages) matching a given query, but LRA uses the number of passages(strings) matching a query.
In our experiments with LRA (Sections 6 and 7), we use a lo-cal copy of the Waterloo MultiText System (WMTS) (Clarke, Cormack, and Palmer 1998;Terra and Clarke 2003), running on a 16 CPU Beowulf Cluster, with a corpus of about5 ?
1010 English words.
The WMTS is a distributed (multiprocessor) search engine,designed primarily for passage retrieval (although document retrieval is possible, as aspecial case of passage retrieval).
The text and index require approximately one terabyteof disk space.
Although AltaVista only gives a rough estimate of the number of match-ing documents, the WMTS gives exact counts of the number of matching passages.Turney et al (2003) combine 13 independent modules to answer SAT questions.
Theperformance of LRA significantly surpasses this combined system, but there is no realcontest between these approaches, because we can simply add LRA to the combination,as a fourteenth module.
Since the VSM module had the best performance of the 13modules (Turney et al 2003), the following experiments focus on comparing VSM andLRA.5.
Latent Relational AnalysisLRA takes as input a set of word pairs and produces as output a measure of therelational similarity between any two of the input pairs.
LRA relies on three resources, asearch engine with a very large corpus of text, a broad-coverage thesaurus of synonyms,and an efficient implementation of SVD.We first present a short description of the core algorithm.
Later, in the followingsubsections, we will give a detailed description of the algorithm, as it is applied in theexperiments in Sections 6 and 7. Given a set of word pairs as input, look in a thesaurus for synonyms foreach word in each word pair.
For each input pair, make alternate pairs byreplacing the original words with their synonyms.
The alternate pairs are3 See http://www.altavista.com/robots.txt for AltaVista?s current policy toward ?robots?
(software forautomatically gathering Web pages or issuing batches of queries).
The protocol of the ?robots.txt?
file isexplained in http://www.robotstxt.org/wc/robots.html.392Turney Similarity of Semantic Relationsintended to form near analogies with the corresponding original pairs (seeSection 2.3). Filter out alternate pairs that do not form near analogies by droppingalternate pairs that co-occur rarely in the corpus.
In the preceding step, if asynonym replaced an ambiguous original word, but the synonym capturesthe wrong sense of the original word, it is likely that there is no significantrelation between the words in the alternate pair, so they will rarelyco-occur. For each original and alternate pair, search in the corpus for short phrasesthat begin with one member of the pair and end with the other.
Thesephrases characterize the relation between the words in each pair. For each phrase from the previous step, create several patterns, byreplacing words in the phrase with wild cards. Build a pair?pattern frequency matrix, in which each cell represents thenumber of times that the corresponding pair (row) appears in the corpuswith the corresponding pattern (column).
The number will usually bezero, resulting in a sparse matrix. Apply the SVD to the matrix.
This reduces noise in the matrix and helpswith sparse data. Suppose that we wish to calculate the relational similarity between anytwo of the original pairs.
Start by looking for the two row vectors in thepair?pattern frequency matrix that correspond to the two original pairs.Calculate the cosine of the angle between these two row vectors.
Thenmerge the cosine of the two original pairs with the cosines of theircorresponding alternate pairs, as follows.
If an analogy formed withalternate pairs has a higher cosine than the original pairs, we assume thatwe have found a better way to express the analogy, but we have notsignificantly changed its meaning.
If the cosine is lower, we assume thatwe may have changed the meaning by inappropriately replacing wordswith synonyms.
Filter out inappropriate alternates by dropping allanalogies formed of alternates, such that the cosines are less than thecosine for the original pairs.
The relational similarity between the twooriginal pairs is then calculated as the average of all of the remainingcosines.The motivation for the alternate pairs is to handle cases where the original pairs co-occur rarely in the corpus.
The hope is that we can find near analogies for the originalpairs, such that the near analogies co-occur more frequently in the corpus.
The dangeris that the alternates may have different relations from the originals.
The filtering stepsabove aim to reduce this risk.5.1 Input and OutputIn our experiments, the input set contains from 600 to 2,244 word pairs.
The outputsimilarity measure is based on cosines, so the degree of similarity can range from ?1(dissimilar; ?
= 180?)
to +1 (similar; ?
= 0?).
Before applying SVD, the vectors are393Computational Linguistics Volume 32, Number 3completely non-negative, which implies that the cosine can only range from 0 to+1, butSVD introduces negative values, so it is possible for the cosine to be negative, althoughwe have never observed this in our experiments.5.2 Search Engine and CorpusIn the following experiments, we use a local copy of the WMTS (Clarke, Cormack, andPalmer 1998; Terra and Clarke 2003).4 The corpus consists of about 5 ?
1010 Englishwords, gathered by a Web crawler, mainly from US academic Web sites.
The Web pagescover a very wide range of topics, styles, genres, quality, and writing skill.
The WMTS iswell suited to LRA, because the WMTS scales well to large corpora (one terabyte, in ourcase), it gives exact frequency counts (unlike most Web search engines), it is designed forpassage retrieval (rather than document retrieval), and it has a powerful query syntax.5.3 ThesaurusAs a source of synonyms, we use Lin?s (1998a) automatically generated thesaurus.
Thisthesaurus is available through an on-line interactive demonstration or it can be down-loaded.5 We used the on-line demonstration, since the downloadable version seems tocontain fewer words.
For each word in the input set of word pairs, we automaticallyquery the on-line demonstration and fetch the resulting list of synonyms.
As a cour-tesy to other users of Lin?s on-line system, we insert a 20-second delay between eachtwo queries.Lin?s thesaurus was generated by parsing a corpus of about 5 ?
107 English words,consisting of text from the Wall Street Journal, San Jose Mercury, and AP Newswire (Lin1998a).
The parser was used to extract pairs of words and their grammatical relations.Words were then clustered into synonym sets, based on the similarity of their grammat-ical relations.
Two words were judged to be highly similar when they tended to havethe same kinds of grammatical relations with the same sets of words.
Given a word andits part of speech, Lin?s thesaurus provides a list of words, sorted in order of decreasingattributional similarity.
This sorting is convenient for LRA, since it makes it possibleto focus on words with higher attributional similarity and ignore the rest.
WordNet, incontrast, given a word and its part of speech, provides a list of words grouped by thepossible senses of the given word, with groups sorted by the frequencies of the senses.WordNet?s sorting does not directly correspond to sorting by degree of attributionalsimilarity, although various algorithms have been proposed for deriving attributionalsimilarity from WordNet (Resnik 1995; Jiang and Conrath 1997; Budanitsky and Hirst2001; Banerjee and Pedersen 2003).5.4 Singular Value DecompositionWe use Rohde?s SVDLIBC implementation of the SVD, which is based on SVDPACKC(Berry 1992).6 In LRA, SVD is used to reduce noise and compensate for sparseness.4 See http://multitext.uwaterloo.ca/.5 The online demonstration is at http://www.cs.ualberta.ca/?lindek/demos/depsim.htm and thedownloadable version is at http://armena.cs.ualberta.ca/lindek/downloads/sims.lsp.gz.6 SVDLIBC is available at http://tedlab.mit.edu/?dr/SVDLIBC/ and SVDPACKC is available athttp://www.netlib.org/svdpack/.394Turney Similarity of Semantic Relations5.5 The AlgorithmWe will go through each step of LRA, using an example to illustrate the steps.
Assumethat the input to LRA is the 374 multiple-choice SAT word analogy questions of Turneyand Littman (2005).
Since there are six word pairs per question (the stem and fivechoices), the input consists of 2,244 word pairs.
Let?s suppose that we wish to calculatethe relational similarity between the pair quart:volume and the pair mile:distance, takenfrom the SAT question in Table 6.
The LRA algorithm consists of the following 12 steps:1.
Find alternates: For each word pair A:B in the input set, look in Lin?s(1998a) thesaurus for the top num sim words (in the following experiments,num sim is 10) that are most similar to A.
For each A?
that is similar to A,make a new word pair A?:B.
Likewise, look for the top num sim words thatare most similar to B, and for each B?, make a new word pair A:B?.
A:B iscalled the original pair and each A?
:B or A:B?
is an alternate pair.
The intentis that alternates should have almost the same semantic relations as theoriginal.
For each input pair, there will now be 2 ?
num sim alternate pairs.When looking for similar words in Lin?s (1998a) thesaurus, avoid wordsthat seem unusual (e.g., hyphenated words, words with three characters orless, words with non-alphabetical characters, multiword phrases, andcapitalized words).
The first column in Table 7 shows the alternate pairsthat are generated for the original pair quart:volume.2.
Filter alternates: For each original pair A:B, filter the 2 ?
num simalternates as follows.
For each alternate pair, send a query to the WMTS, tofind the frequency of phrases that begin with one member of the pair andend with the other.
The phrases cannot have more than max phrase words(we use max phrase = 5).
Sort the alternate pairs by the frequency of theirphrases.
Select the top num filter most frequent alternates and discard theremainder (we use num filter = 3, so 17 alternates are dropped).
This steptends to eliminate alternates that have no clear semantic relation.
The thirdcolumn in Table 7 shows the frequency with which each pair co-occurs in awindow of max phrase words.
The last column in Table 7 shows the pairsthat are selected.3.
Find phrases: For each pair (originals and alternates), make a list ofphrases in the corpus that contain the pair.
Query the WMTS for allphrases that begin with one member of the pair and end with the other(in either order).
We ignore suffixes when searching for phrases that matchTable 6This SAT question, from Claman (2000), is used to illustrate the steps in the LRA algorithm.Stem: quart:volumeChoices: (a) day:night(b) mile:distance(c) decade:century(d) friction:heat(e) part:wholeSolution: (b) mile:distance395Computational Linguistics Volume 32, Number 3Table 7Alternate forms of the original pair quart:volume.
The first column shows the original pair andthe alternate pairs.
The second column shows Lin?s similarity score for the alternate wordcompared to the original word.
For example, the similarity between quart and pint is 0.210.
Thethird column shows the frequency of the pair in the WMTS corpus.
The fourth column shows thepairs that pass the filtering step (i.e., step 2).Word pair Similarity Frequency Filtering stepquart:volume NA 632 Accept (original pair)pint:volume 0.210 372gallon:volume 0.159 1500 Accept (top alternate)liter:volume 0.122 3323 Accept (top alternate)squirt:volume 0.084 54pail:volume 0.084 28vial:volume 0.084 373pumping:volume 0.073 1386 Accept (top alternate)ounce:volume 0.071 430spoonful:volume 0.070 42tablespoon:volume 0.069 96quart:turnover 0.229 0quart:output 0.225 34quart:export 0.206 7quart:value 0.203 266quart:import 0.186 16quart:revenue 0.185 0quart:sale 0.169 119quart:investment 0.161 11quart:earnings 0.156 0quart:profit 0.156 24a given pair.
The phrases cannot have more than max phrase words andthere must be at least one word between the two members of the wordpair.
These phrases give us information about the semantic relationsbetween the words in each pair.
A phrase with no words between the twomembers of the word pair would give us very little information about thesemantic relations (other than that the words occur together with a certainfrequency in a certain order).
Table 8 gives some examples of phrases inthe corpus that match the pair quart:volume.4.
Find patterns: For each phrase found in the previous step, build patternsfrom the intervening words.
A pattern is constructed by replacing any orall or none of the intervening words with wild cards (one wild card canTable 8Some examples of phrases that contain quart:volume.
Suffixes are ignored when searching formatching phrases in the WMTS corpus.
At least one word must occur between quart andvolume.
At most max phrase words can appear in a phrase.quarts liquid volume volume in quartsquarts of volume volume capacity quartsquarts in volume volume being about two quartsquart total volume volume of milk in quartsquart of spray volume volume include measures like quart396Turney Similarity of Semantic Relationsreplace only one word).
If a phrase is n words long, there are n ?
2intervening words between the members of the given word pair (e.g.,between quart and volume).
Thus a phrase with n words generates 2(n?2)patterns.
(We use max phrase = 5, so a phrase generates at most eightpatterns.)
For each pattern, count the number of pairs (originals andalternates) with phrases that match the pattern (a wild card must matchexactly one word).
Keep the top num patterns most frequent patterns anddiscard the rest (we use num patterns = 4, 000).
Typically there will bemillions of patterns, so it is not feasible to keep them all.5.
Map pairs to rows: In preparation for building the matrix X, create amapping of word pairs to row numbers.
For each pair A:B, create a row forA:B and another row for B:A.
This will make the matrix more symmetrical,reflecting our knowledge that the relational similarity between A:B andC:D should be the same as the relational similarity between B:A and D:C.This duplication of rows is examined in Section 6.6.6.
Map patterns to columns: Create a mapping of the top num patternspatterns to column numbers.
For each pattern P, create a column for?word1 P word2?
and another column for ?word2 P word1.?
Thus there willbe 2 ?
num patterns columns in X.
This duplication of columns isexamined in Section 6.6.7.
Generate a sparse matrix: Generate a matrix X in sparse matrix format,suitable for input to SVDLIBC.
The value for the cell in row i and column jis the frequency of the jth pattern (see step 6) in phrases that contain theith word pair (see step 5).
Table 9 gives some examples of patternfrequencies for quart:volume.8.
Calculate entropy: Apply log and entropy transformations to the sparsematrix (Landauer and Dumais 1997).
These transformations have beenfound to be very helpful for information retrieval (Harman 1986; Dumais1990).
Let xi,j be the cell in row i and column j of the matrix X from step 7.Let m be the number of rows in X and let n be the number of columns.
Wewish to weight the cell xi,j by the entropy of the jth column.
To calculatethe entropy of the column, we need to convert the column into a vector ofprobabilities.
Let pi,j be the probability of xi,j, calculated by normalizing thecolumn vector so that the sum of the elements is one, pi,j = xi,j/?mk=1 xk,j.The entropy of the jth column is then Hj = ?
?mk=1 pk,j log(pk,j).
Entropy isat its maximum when pi,j is a uniform distribution, pi,j = 1/m, in whichcase Hj = log(m).
Entropy is at its minimum when pi,j is 1 for some valueof i and 0 for all other values of i, in which case Hj = 0.
We want to giveTable 9Frequencies of various patterns for quart:volume.
The asterisk ?*?
represents the wildcard.Suffixes are ignored, so quart matches quarts.
For example, quarts in volume is oneof the four phrases that match quart P volume when P is in.P = ?in?
P = ?
* of?
P = ?of *?
P = ?
* *?freq(?quart P volume?)
4 1 5 19freq(?volume P quart?)
10 0 2 16397Computational Linguistics Volume 32, Number 3more weight to columns (patterns) with frequencies that vary substantiallyfrom one row (word pair) to the next, and less weight to columns thatare uniform.
Therefore we weight the cell xi,j by wj = 1 ?
Hj/ log(m),which varies from 0 when pi,j is uniform to 1 when entropy is minimal.We also apply the log transformation to frequencies, log(xi,j + 1).
(Entropy is calculated with the original frequency values, before thelog transformation is applied.)
For all i and all j, replace the originalvalue xi,j in X by the new value wj log(xi,j + 1).
This is an instance of theTerm Frequency-Inverse Document Frequency (TF-IDF) family oftransformations, which is familiar in information retrieval (Salton andBuckley 1988; Baeza-Yates and Ribeiro-Neto 1999): log(xi,j + 1) is the TFterm and wj is the IDF term.9.
Apply SVD: After the log and entropy transformations have been appliedto the matrix X, run SVDLIBC.
SVD decomposes a matrix X into a productof three matrices U?VT, where U and V are in column orthonormal form(i.e., the columns are orthogonal and have unit length: UTU = VTV = I)and ?
is a diagonal matrix of singular values (hence SVD) (Golub and VanLoan 1996).
If X is of rank r, then ?
is also of rank r. Let ?k, where k < r,be the diagonal matrix formed from the top k singular values, and let Ukand Vk be the matrices produced by selecting the corresponding columnsfrom U and V. The matrix Uk?kVTk is the matrix of rank k that bestapproximates the original matrix X, in the sense that it minimizes theapproximation errors.
That is, X?
= Uk?kVTk minimizes??X?
?
X?
?F over allmatrices X?
of rank k, where ?.
.
.
?F denotes the Frobenius norm (Golub andVan Loan 1996).
We may think of this matrix Uk?kVTk as a ?smoothed?
or?compressed?
version of the original matrix.
In the subsequent steps, wewill be calculating cosines for row vectors.
For this purpose, we cansimplify calculations by dropping V. The cosine of two vectors istheir dot product, after they have been normalized to unit length.
Thematrix XXT contains the dot products of all of the row vectors.
Wecan find the dot product of the ith and jth row vectors by looking atthe cell in row i, column j of the matrix XXT.
Since VTV = I, we haveXXT = U?VT(U?VT )T = U?VTV?TUT = U?(U?
)T, which means thatwe can calculate cosines with the smaller matrix U?, instead of usingX = U?VT (Deerwester et al 1990).10.
Projection: Calculate Uk?k (we use k = 300).
This matrix has the samenumber of rows as X, but only k columns (instead of 2 ?
num patternscolumns; in our experiments, that is 300 columns instead of 8,000).
We cancompare two word pairs by calculating the cosine of the correspondingrow vectors in Uk?k.
The row vector for each word pair has been projectedfrom the original 8,000 dimensional space into a new 300 dimensionalspace.
The value k = 300 is recommended by Landauer and Dumais (1997)for measuring the attributional similarity between words.
We investigateother values in Section 6.4.11.
Evaluate alternates: Let A:B and C:D be any two word pairs in the inputset.
From step 2, we have (num filter + 1) versions of A:B, the original andnum filter alternates.
Likewise, we have (num filter + 1) versions of C:D.398Turney Similarity of Semantic RelationsTherefore we have (num filter + 1)2 ways to compare a version of A:B witha version of C:D. Look for the row vectors in Uk?k that correspond to theversions of A:B and the versions of C:D and calculate the (num filter + 1)2cosines (in our experiments, there are 16 cosines).
For example, supposeA:B is quart:volume and C:D is mile:distance.
Table 10 gives the cosines forthe sixteen combinations.12.
Calculate relational similarity: The relational similarity between A:B andC:D is the average of the cosines, among the (num filter + 1)2 cosines fromstep 11, that are greater than or equal to the cosine of the original pairs,A:B and C:D. The requirement that the cosine must be greater than orequal to the original cosine is a way of filtering out poor analogies, whichmay be introduced in step 1 and may have slipped through the filtering instep 2.
Averaging the cosines, as opposed to taking their maximum, isintended to provide some resistance to noise.
For quart:volume andmile:distance, the third column in Table 10 shows which alternates areused to calculate the average.
For these two pairs, the average of theselected cosines is 0.677.
In Table 7, we see that pumping:volume hasslipped through the filtering in step 2, although it is not a good alternatefor quart:volume.
However, Table 10 shows that all four analogies thatinvolve pumping:volume are dropped here, in step 12.Steps 11 and 12 can be repeated for each two input pairs that are to be compared.
Thiscompletes the description of LRA.Table 11 gives the cosines for the sample SAT question.
The choice pair with thehighest average cosine (the choice with the largest value in column 1), choice (b), isthe solution for this question; LRA answers the question correctly.
For comparison,column 2 gives the cosines for the original pairs and column 3 gives the highest cosine.Table 10The 16 combinations and their cosines.
A:B::C:D expresses the analogy A is to B as C is to D. Thethird column indicates those combinations for which the cosine is greater than or equalto the cosine of the original analogy, quart:volume::mile:distance.Word pairs Cosine Cosine ?
original pairsquart:volume::mile:distance 0.525 Yes (original pairs)quart:volume::feet:distance 0.464quart:volume::mile:length 0.634 Yesquart:volume::length:distance 0.499liter:volume::mile:distance 0.736 Yesliter:volume::feet:distance 0.687 Yesliter:volume::mile:length 0.745 Yesliter:volume::length:distance 0.576 Yesgallon:volume::mile:distance 0.763 Yesgallon:volume::feet:distance 0.710 Yesgallon:volume::mile:length 0.781 Yes (highest cosine)gallon:volume::length:distance 0.615 Yespumping:volume::mile:distance 0.412pumping:volume::feet:distance 0.439pumping:volume::mile:length 0.446pumping:volume::length:distance 0.491399Computational Linguistics Volume 32, Number 3For this particular SAT question, there is one choice that has the highest cosine for allthree columns, choice (b), although this is not true in general.
Note that the gap betweenthe first choice (b) and the second choice (d) is largest for the average cosines (column1).
This suggests that the average of the cosines (column 1) is better at discriminating thecorrect choice than either the original cosine (column 2) or the highest cosine (column 3).6.
Experiments with Word Analogy QuestionsThis section presents various experiments with 374 multiple-choice SAT word analogyquestions.6.1 Baseline LRA SystemTable 12 shows the performance of the baseline LRA system on the 374 SAT questions,using the parameter settings and configuration described in Section 5.
LRA correctlyanswered 210 of the 374 questions; 160 questions were answered incorrectly and 4questions were skipped, because the stem pair and its alternates were represented byzero vectors.
The performance of LRA is significantly better than the lexicon-basedapproach of Veale (2004) (see Section 3.1) and the best performance using attributionalsimilarity (see Section 2.3), with 95% confidence, according to the Fisher Exact Test(Agresti 1990).As another point of reference, consider the simple strategy of always guessing thechoice with the highest co-occurrence frequency.
The idea here is that the words inthe solution pair may occur together frequently, because there is presumably a clearand meaningful relation between the solution words, whereas the distractors may onlyoccur together rarely because they have no meaningful relation.
This strategy is signif-cantly worse than random guessing.
The opposite strategy, always guessing the choicepair with the lowest co-occurrence frequency, is also worse than random guessing (butnot significantly).
It appears that the designers of the SAT questions deliberately chosedistractors that would thwart these two strategies.Table 11Cosines for the sample SAT question given in Table 6.
Column 1 gives the averages of the cosinesthat are greater than or equal to the original cosines (e.g., the average of the cosines that aremarked Yes in Table 10 is 0.677; see choice (b) in column 1).
Column 2 gives the cosine for theoriginal pairs (e.g., the cosine for the first pair in Table 10 is 0.525; see choice (b) in column 2).Column 3 gives the maximum cosine for the 16 possible analogies (e.g., the maximum cosine inTable 10 is 0.781; see choice (b) in column 3).Stem: quart:volume Average Original Highestcosines cosines cosines1 2 3Choices: (a) day:night 0.374 0.327 0.443(b) mile:distance 0.677 0.525 0.781(c) decade:century 0.389 0.327 0.470(d) friction:heat 0.428 0.336 0.552(e) part:whole 0.370 0.330 0.408Solution: (b) mile:distance 0.677 0.525 0.781Gap: (b)?
(d) 0.249 0.189 0.229400Turney Similarity of Semantic RelationsTable 12Performance of LRA on the 374 SAT questions.
Precision, recall, and F are reported aspercentages.
(The bottom five rows are included for comparison.
)Algorithm Precision Recall FLRA 56.8 56.1 56.5Veale (2004) 42.8 42.8 42.8Best attributional similarity 35.0 35.0 35.0Random guessing 20.0 20.0 20.0Lowest co-occurrence frequency 16.8 16.8 16.8Highest co-occurrence frequency 11.8 11.8 11.8With 374 questions and six word pairs per question (one stem and five choices),there are 2,244 pairs in the input set.
In step 2, introducing alternate pairs multipliesthe number of pairs by four, resulting in 8,976 pairs.
In step 5, for each pair A:B, we addB:A, yielding 17,952 pairs.
However, some pairs are dropped because they correspondto zero vectors (they do not appear together in a window of five words in the WMTScorpus).
Also, a few words do not appear in Lin?s thesaurus, and some word pairsappear twice in the SAT questions (e.g., lion:cat).
The sparse matrix (step 7) has 17,232rows (word pairs) and 8,000 columns (patterns), with a density of 5.8% (percentage ofnonzero values).Table 13 gives the time required for each step of LRA, a total of almost 9 days.
All ofthe steps used a single CPU on a desktop computer, except step 3, finding the phrasesfor each word pair, which used a 16 CPU Beowulf cluster.
Most of the other steps areparallelizable; with a bit of programming effort, they could also be executed on theBeowulf cluster.
All CPUs (both desktop and cluster) were 2.4 GHz Intel Xeons.
Thedesktop computer had 2 GB of RAM and the cluster had a total of 16 GB of RAM.6.2 LRA versus VSMTable 14 compares LRA to the VSM with the 374 analogy questions.
VSM-AV refersto the VSM using AltaVista?s database as a corpus.
The VSM-AV results are takenTable 13LRA elapsed run time.Step Description Time H:M:S Hardware1 Find alternates 24:56:00 1 CPU2 Filter alternates 0:00:02 1 CPU3 Find phrases 109:52:00 16 CPUs4 Find patterns 33:41:00 1 CPU5 Map pairs to rows 0:00:02 1 CPU6 Map patterns to columns 0:00:02 1 CPU7 Generate a sparse matrix 38:07:00 1 CPU8 Calculate entropy 0:11:00 1 CPU9 Apply SVD 0:43:28 1 CPU10 Projection 0:08:00 1 CPU11 Evaluate alternates 2:11:00 1 CPU12 Calculate relational similarity 0:00:02 1 CPUTotal 209:49:36401Computational Linguistics Volume 32, Number 3from Turney and Littman (2005).
As mentioned in Section 4.2, we estimate this corpuscontained about 5 ?
1011 English words at the time the VSM-AV experiments took place.VSM-WMTS refers to the VSM using the WMTS, which contains about 5 ?
1010 Englishwords.
We generated the VSM-WMTS results by adapting the VSM to the WMTS.The algorithm is slightly different from Turney and Littman?s (2005), because we usedpassage frequencies instead of document frequencies.All three pairwise differences in recall in Table 14 are statistically significant with95% confidence, using the Fisher Exact Test (Agresti 1990).
The pairwise differences inprecision between LRA and the two VSM variations are also significant, but the differ-ence in precision between the two VSM variations (42.4% vs. 47.7%) is not significant.Although VSM-AV has a corpus 10 times larger than LRA?s, LRA still performs betterthan VSM-AV.Comparing VSM-AV to VSM-WMTS, the smaller corpus has reduced the score ofthe VSM, but much of the drop is due to the larger number of questions that wereskipped (34 for VSM-WMTS versus 5 for VSM-AV).
With the smaller corpus, many moreof the input word pairs simply do not appear together in short phrases in the corpus.LRA is able to answer as many questions as VSM-AV, although it uses the same corpusas VSM-WMTS, because Lin?s thesaurus allows LRA to substitute synonyms for wordsthat are not in the corpus.VSM-AV required 17 days to process the 374 analogy questions (Turney and Littman2005), compared to 9 days for LRA.
As a courtesy to AltaVista, Turney and Littman(2005) inserted a 5-second delay between each two queries.
Since the WMTS is runninglocally, there is no need for delays.
VSM-WMTS processed the questions in only one day.6.3 Human PerformanceThe average performance of college-bound senior high school students on verbal SATquestions corresponds to a recall (percent correct) of about 57% (Turney and Littman2005).
The SAT I test consists of 78 verbal questions and 60 math questions (there isalso an SAT II test, covering specific subjects, such as chemistry).
Analogy questions areonly a subset of the 78 verbal SAT questions.
If we assume that the difficulty of our 374analogy questions is comparable to the difficulty of the 78 verbal SAT I questions, thenwe can estimate that the average college-bound senior would correctly answer about57% of the 374 analogy questions.Of our 374 SAT questions, 190 are from a collection of ten official SAT tests (Claman2000).
On this subset of the questions, LRA has a recall of 61.1%, compared to a recallof 51.1% on the other 184 questions.
The 184 questions that are not from Claman (2000)seem to be more difficult.
This indicates that we may be underestimating how wellLRA performs, relative to college-bound senior high school students.
Claman (2000)suggests that the analogy questions may be somewhat harder than other verbal SATTable 14LRA versus VSM with 374 SAT analogy questions.Algorithm Correct Incorrect Skipped Precision Recall FVSM-AV 176 193 5 47.7 47.1 47.4VSM-WMTS 144 196 34 42.4 38.5 40.3LRA 210 160 4 56.8 56.1 56.5402Turney Similarity of Semantic Relationsquestions, so we may be slightly overestimating the mean human score on the analogyquestions.Table 15 gives the 95% confidence intervals for LRA, VSM-AV, and VSM-WMTS,calculated by the Binomial Exact Test (Agresti 1990).
There is no significant differencebetween LRA and human performance, but VSM-AV and VSM-WMTS are significantlybelow human-level performance.6.4 Varying the Parameters in LRAThere are several parameters in the LRA algorithm (see Section 5.5).
The parametervalues were determined by trying a small number of possible values on a small set ofquestions that were set aside.
Since LRA is intended to be an unsupervised learningalgorithm, we did not attempt to tune the parameter values to maximize the precisionand recall on the 374 SAT questions.
We hypothesized that LRA is relatively insensitiveto the values of the parameters.Table 16 shows the variation in the performance of LRA as the parameter valuesare adjusted.
We take the baseline parameter settings (given in Section 5.5) and varyeach parameter, one at a time, while holding the remaining parameters fixed at theirbaseline values.
None of the precision and recall values are significantly different fromthe baseline, according to the Fisher Exact Test (Agresti 1990), at the 95% confidencelevel.
This supports the hypothesis that the algorithm is not sensitive to the parametervalues.Although a full run of LRA on the 374 SAT questions takes 9 days, for some ofthe parameters it is possible to reuse cached data from previous runs.
We limited theexperiments with num sim and max phrase because caching was not as helpful for theseparameters, so experimenting with them required several weeks.6.5 Ablation ExperimentsAs mentioned in the introduction, LRA extends the VSM approach of Turney andLittman (2005) by (1) exploring variations on the analogies by replacing words withsynonyms (step 1), (2) automatically generating connecting patterns (step 4), and (3)smoothing the data with SVD (step 9).
In this subsection, we ablate each of these threecomponents to assess their contribution to the performance of LRA.
Table 17 shows theresults.Table 15Comparison with human SAT performance.
The last column in the table indicates whether (YES)or not (NO) the average human performance (57%) falls within the 95% confidence interval ofthe corresponding algorithm?s performance.
The confidence intervals are calculated using theBinomial Exact Test (Agresti 1990).System Recall 95% confidence Human-level(% correct) interval for recall (57%)VSM-AV 47.1 42.2?52.5 NOVSM-WMTS 38.5 33.5?43.6 NOLRA 56.1 51.0?61.2 YES403Computational Linguistics Volume 32, Number 3Table 16Variation in performance with different parameter values.
The Baseline column marks thebaseline parameter values.
The Step column gives the step number in Section 5.5 where eachparameter is discussed.Parameter Baseline Value Step Precision Recall Fnum sim 5 1 54.2 53.5 53.8num sim ?
10 1 56.8 56.1 56.5num sim 15 1 54.1 53.5 53.8max phrase 4 2 55.8 55.1 55.5max phrase ?
5 2 56.8 56.1 56.5max phrase 6 2 56.2 55.6 55.9num filter 1 2 54.3 53.7 54.0num filter 2 2 55.7 55.1 55.4num filter ?
3 2 56.8 56.1 56.5num filter 4 2 55.7 55.1 55.4num filter 5 2 54.3 53.7 54.0num patterns 1000 4 55.9 55.3 55.6num patterns 2000 4 57.6 57.0 57.3num patterns 3000 4 58.4 57.8 58.1num patterns ?
4000 4 56.8 56.1 56.5num patterns 5000 4 57.0 56.4 56.7num patterns 6000 4 57.0 56.4 56.7num patterns 7000 4 58.1 57.5 57.8k 100 10 55.7 55.1 55.4k ?
300 10 56.8 56.1 56.5k 500 10 57.6 57.0 57.3k 700 10 56.5 55.9 56.2k 900 10 56.2 55.6 55.9Without SVD (compare column 1 to 2 in Table 17), performance drops, but thedrop is not statistically significant with 95% confidence, according to the Fisher ExactTest (Agresti 1990).
However, we hypothesize that the drop in performance would besignificant with a larger set of word pairs.
More word pairs would increase the samplesize, which would decrease the 95% confidence interval, which would likely show thatSVD is making a significant contribution.
Furthermore, more word pairs would increasethe matrix size, which would give SVD more leverage.
For example, Landauer andDumais (1997) apply SVD to a matrix of 30,473 columns by 60,768 rows, but our matrixTable 17Results of ablation experiments.LRA LRABaseline LRA LRA No SVD,system No SVD No synonyms no synonyms VSM-WMTS1 2 3 4 5Correct 210 198 185 178 144Incorrect 160 172 167 173 196Skipped 4 4 22 23 34Precision 56.8 53.5 52.6 50.7 42.4Recall 56.1 52.9 49.5 47.6 38.5F 56.5 53.2 51.0 49.1 40.3404Turney Similarity of Semantic Relationshere is 8,000 columns by 17,232 rows.
We are currently gathering more SAT questionsto test this hypothesis.Without synonyms (compare column 1 to 3 in Table 17), recall drops significantly(from 56.1% to 49.5%), but the drop in precision is not significant.
When the synonymcomponent is dropped, the number of skipped questions rises from 4 to 22, whichdemonstrates the value of the synonym component of LRA for compensating for sparsedata.When both SVD and synonyms are dropped (compare column 1 to 4 in Table 17),the decrease in recall is significant, but the decrease in precision is not significant.Again, we believe that a larger sample size would show that the drop in precision issignificant.If we eliminate both synonyms and SVD from LRA, all that distinguishes LRA fromVSM-WMTS is the patterns (step 4).
The VSM approach uses a fixed list of 64 patternsto generate 128 dimensional vectors (Turney and Littman 2005), whereas LRA uses adynamically generated set of 4,000 patterns, resulting in 8,000 dimensional vectors.
Wecan see the value of the automatically generated patterns by comparing LRA withoutsynonyms and SVD (column 4) to VSM-WMTS (column 5).
The difference in bothprecision and recall is statistically significant with 95% confidence, according to theFisher Exact Test (Agresti 1990).The ablation experiments support the value of the patterns (step 4) and synonyms(step 1) in LRA, but the contribution of SVD (step 9) has not been proven, althoughwe believe more data will support its effectiveness.
Nonetheless, the three componentstogether result in a 16% increase in F (compare column 1 to 5).6.6 Matrix SymmetryWe know a priori that, if A:B::C:D, then B:A::D:C. For example, mason is to stone ascarpenter is to wood implies stone is to mason as wood is to carpenter.
Therefore, a goodmeasure of relational similarity, simr, should obey the following equation:simr(A :B, C :D) = simr(B :A, D :C) (8)In steps 5 and 6 of the LRA algorithm (Section 5.5), we ensure that the matrix X issymmetrical, so that equation (8) is necessarily true for LRA.
The matrix is designed sothat the row vector for A:B is different from the row vector for B:A only by a permutationof the elements.
The same permutation distinguishes the row vectors for C:D and D:C.Therefore the cosine of the angle between A:B and C:D must be identical to the cosineof the angle between B:A and D:C (see equation (7)).To discover the consequences of this design decision, we altered steps 5 and 6 sothat symmetry is no longer preserved.
In step 5, for each word pair A:B that appears inthe input set, we only have one row.
There is no row for B:A unless B:A also appears inthe input set.
Thus the number of rows in the matrix dropped from 17,232 to 8,616.In step 6, we no longer have two columns for each pattern P, one for ?word1 P word2?and another for ?word2 P word1.?
However, to be fair, we kept the total number ofcolumns at 8,000.
In step 4, we selected the top 8,000 patterns (instead of the top 4,000),distinguishing the pattern ?word1 P word2?
from the pattern ?word2 P word1?
(instead ofconsidering them equivalent).
Thus a pattern P with a high frequency is likely to appearin two columns, in both possible orders, but a lower frequency pattern might appear inonly one column, in only one possible order.405Computational Linguistics Volume 32, Number 3These changes resulted in a slight decrease in performance.
Recall dropped from56.1% to 55.3% and precision dropped from 56.8% to 55.9%.
The decrease is not sta-tistically significant.
However, the modified algorithm no longer obeys equation (8).Although dropping symmetry appears to cause no significant harm to the performanceof the algorithm on the SAT questions, we prefer to retain symmetry, to ensure thatequation (8) is satisfied.Note that, if A:B::C:D, it does not follow that B:A::C:D. For example, it is false that?stone is to mason as carpenter is to wood.?
In general (except when the semanticrelations between A and B are symmetrical), we have the following inequality:simr(A :B, C :D) = simr(B :A, C :D) (9)Therefore we do not want A:B and B:A to be represented by identical row vectors,although it would ensure that equation (8) is satisfied.6.7 All Alternates versus Better AlternatesIn step 12 of LRA, the relational similarity between A:B and C:D is the average of thecosines, among the (num filter + 1)2 cosines from step 11, that are greater than or equalto the cosine of the original pairs, A:B and C:D. That is, the average includes only thosealternates that are ?better?
than the originals.
Taking all alternates instead of the betteralternates, recall drops from 56.1% to 40.4% and precision drops from 56.8% to 40.8%.Both decreases are statistically significant with 95% confidence, according to the FisherExact Test (Agresti 1990).6.8 Interpreting VectorsSuppose a word pair A:B corresponds to a vector r in the matrix X.
It would be con-venient if inspection of r gave us a simple explanation or description of the relationbetween A and B.
For example, suppose the word pair ostrich:bird maps to the rowvector r. It would be pleasing to look in r and find that the largest element correspondsto the pattern ?is the largest?
(i.e., ?ostrich is the largest bird?).
Unfortunately, inspectionof r reveals no such convenient patterns.We hypothesize that the semantic content of a vector is distributed over the wholevector; it is not concentrated in a few elements.
To test this hypothesis, we modifiedstep 10 of LRA.
Instead of projecting the 8,000 dimensional vectors into the 300 dimen-sional space Uk?k, we use the matrix Uk?kVTk .
This matrix yields the same cosines asUk?k, but preserves the original 8,000 dimensions, making it easier to interpret the rowvectors.
For each row vector in Uk?kVTk , we select the N largest values and set al othervalues to zero.
The idea here is that we will only pay attention to the N most importantpatterns in r; the remaining patterns will be ignored.
This reduces the length of therow vectors, but the cosine is the dot product of normalized vectors (all vectors arenormalized to unit length; see equation (7)), so the change to the vector lengths has noimpact; only the angle of the vectors is important.
If most of the semantic content is inthe N largest elements of r, then setting the remaining elements to zero should haverelatively little impact.Table 18 shows the performance as N varies from 1 to 3,000.
The precision and recallare significantly below the baseline LRA until N ?
300 (95% confidence, Fisher Exact406Turney Similarity of Semantic RelationsTest).
In other words, for a typical SAT analogy question, we need to examine the top300 patterns to explain why LRA selected one choice instead of another.We are currently working on an extension of LRA that will explain with a singlepattern why one choice is better than another.
We have had some promising results, butthis work is not yet mature.
However, we can confidently claim that interpreting thevectors is not trivial.6.9 Manual Patterns versus Automatic PatternsTurney and Littman (2005) used 64 manually generated patterns, whereas LRA uses4,000 automatically generated patterns.
We know from Section 6.5 that the automaticallygenerated patterns are significantly better than the manually generated patterns.
It maybe interesting to see how many of the manually generated patterns appear within theautomatically generated patterns.
If we require an exact match, 50 of the 64 manualpatterns can be found in the automatic patterns.
If we are lenient about wildcards, andcount the pattern not the as matching * not the (for example), then 60 of the 64 manualpatterns appear within the automatic patterns.
This suggests that the improvement inperformance with the automatic patterns is due to the increased quantity of patterns,rather than a qualitative difference in the patterns.Turney and Littman (2005) point out that some of their 64 patterns have been usedby other researchers.
For example, Hearst (1992) used the pattern such as to discover hy-ponyms and Berland and Charniak (1999) used the pattern of the to discover meronyms.Both of these patterns are included in the 4,000 patterns automatically generated byLRA.The novelty in Turney and Littman (2005) is that their patterns are not used tomine text for instances of word pairs that fit the patterns (Hearst 1992; Berland andCharniak 1999); instead, they are used to gather frequency data for building vectorsthat represent the relation between a given pair of words.
The results in Section 6.8show that a vector contains more information than any single pattern or small set ofpatterns; a vector is a distributed representation.
LRA is distinct from Hearst (1992) andBerland and Charniak (1999) in its focus on distributed representations, which it shareswith Turney and Littman (2005), but LRA goes beyond Turney and Littman (2005) byfinding patterns automatically.Riloff and Jones (1999) and Yangarber (2003) also find patterns automatically, buttheir goal is to mine text for instances of word pairs; the same goal as Hearst (1992) andTable 18Performance as a function of N.N Correct Incorrect Skipped Precision Recall F1 114 179 81 38.9 30.5 34.23 146 206 22 41.5 39.0 40.210 167 201 6 45.4 44.7 45.030 174 196 4 47.0 46.5 46.8100 178 192 4 48.1 47.6 47.8300 192 178 4 51.9 51.3 51.61000 198 172 4 53.5 52.9 53.23000 207 163 4 55.9 55.3 55.6407Computational Linguistics Volume 32, Number 3Berland and Charniak (1999).
Because LRA uses patterns to build distributed vectorrepresentations, it can exploit patterns that would be much too noisy and unreliable forthe kind of text mining instance extraction that is the objective of Hearst (1992), Berlandand Charniak (1999), Riloff and Jones (1999), and Yangarber (2003).
Therefore LRA cansimply select the highest frequency patterns (step 4 in Section 5.5); it does not need themore sophisticated selection algorithms of Riloff and Jones (1999) and Yangarber (2003).7.
Experiments with Noun-Modifier RelationsThis section describes experiments with 600 noun-modifier pairs, hand-labeled with30 classes of semantic relations (Nastase and Szpakowicz 2003).
In the following ex-periments, LRA is used with the baseline parameter values, exactly as described inSection 5.5.
No adjustments were made to tune LRA to the noun-modifier pairs.
LRA isused as a distance (nearness) measure in a single nearest neighbor supervised learningalgorithm.7.1 Classes of RelationsThe following experiments use the 600 labeled noun-modifier pairs of Nastase andSzpakowicz (2003).
This data set includes information about the part of speech andWordNet synset (synonym set; i.e., word sense tag) of each word, but our algorithmdoes not use this information.Table 19 lists the 30 classes of semantic relations.
The table is based on Appendix Aof Nastase and Szpakowicz (2003), with some simplifications.
The original table listedseveral semantic relations for which there were no instances in the data set.
These wererelations that are typically expressed with longer phrases (three or more words), ratherthan noun-modifier word pairs.
For clarity, we decided not to include these relations inTable 19.In this table, H represents the head noun and M represents the modifier.
For exam-ple, in flu virus, the head noun (H) is virus and the modifier (M) is flu (*).
In English,the modifier (typically a noun or adjective) usually precedes the head noun.
In thedescription of purpose, V represents an arbitrary verb.
In concert hall, the hall is forpresenting concerts (V is present) or holding concerts (V is hold) (?
).Nastase and Szpakowicz (2003) organized the relations into groups.
The five capi-talized terms in the Relation column of Table 19 are the names of five groups of semanticrelations.
(The original table had a sixth group, but there are no examples of this groupin the data set.)
We make use of this grouping in the following experiments.7.2 Baseline LRA with Single Nearest NeighborThe following experiments use single nearest neighbor classification with leave-one-outcross-validation.
For leave-one-out cross-validation, the testing set consists of a singlenoun-modifier pair and the training set consists of the 599 remaining noun-modifiers.The data set is split 600 times, so that each noun-modifier gets a turn as the testing wordpair.
The predicted class of the testing pair is the class of the single nearest neighborin the training set.
As the measure of nearness, we use LRA to calculate the relationalsimilarity between the testing pair and the training pairs.
The single nearest neighboralgorithm is a supervised learning algorithm (i.e., it requires a training set of labeled408Turney Similarity of Semantic RelationsTable 19Classes of semantic relations, from Nastase and Szpakowicz (2003).Relation Abbr.
Example phrase DescriptionCAUSALITYcause cs flu virus (*) H makes M occur or exist, H isnecessary and sufficienteffect eff exam anxiety M makes H occur or exist, M isnecessary and sufficientpurpose prp concert hall (?)
H is for V-ing M, M does notnecessarily occur or existdetraction detr headache pill H opposes M, H is not sufficientto prevent MTEMPORALITYfrequency freq daily exercise H occurs every time M occurstime at tat morning exercise H occurs when M occurstime through tthr six-hour meeting H existed while M existed, M isan interval of timeSPATIALdirection dir outgoing mail H is directed towards M, M isnot the final pointlocation loc home town H is the location of Mlocation at lat desert storm H is located at Mlocation from lfr foreign capital H originates at MPARTICIPANTagent ag student protest M performs H, M is animate ornatural phenomenonbeneficiary ben student discount M benefits from Hinstrument inst laser printer H uses Mobject obj metal separator M is acted upon by Hobject property obj prop sunken ship H underwent Mpart part printer tray H is part of Mpossessor posr national debt M has Hproperty prop blue book H is Mproduct prod plum tree H produces Msource src olive oil M is the source of Hstative st sleeping dog H is in a state of Mwhole whl daisy chain M is part of HQUALITYcontainer cntr film music M contains Hcontent cont apple cake M is contained in Hequative eq player coach H is also Mmaterial mat brick house H is made of Mmeasure meas expensive book M is a measure of Htopic top weather report H is concerned with Mtype type oak tree M is a type of H409Computational Linguistics Volume 32, Number 3data), but we are using LRA to measure the distance between a pair and its potentialneighbors, and LRA is itself determined in an unsupervised fashion (i.e., LRA does notneed labeled data).Each SAT question has five choices, so answering 374 SAT questions required cal-culating 374 ?
5 ?
16 = 29, 920 cosines.
The factor of 16 comes from the alternate pairs,step 11 in LRA.
With the noun-modifier pairs, using leave-one-out cross-validation,each test pair has 599 choices, so an exhaustive application of LRA would requirecalculating 600 ?
599 ?
16 = 5, 750, 400 cosines.
To reduce the amount of computationrequired, we first find the 30 nearest neighbors for each pair, ignoring the alternate pairs(600 ?
599 = 359, 400 cosines), and then apply the full LRA, including the alternates, tojust those 30 neighbors (600 ?
30 ?
16 = 288, 000 cosines), which requires calculatingonly 359, 400 + 288, 000 = 647, 400 cosines.There are 600 word pairs in the input set for LRA.
In step 2, introducing alternatepairs multiplies the number of pairs by four, resulting in 2,400 pairs.
In step 5, for eachpair A:B, we add B:A, yielding 4,800 pairs.
However, some pairs are dropped becausethey correspond to zero vectors and a few words do not appear in Lin?s thesaurus.
Thesparse matrix (step 7) has 4,748 rows and 8,000 columns, with a density of 8.4%.Following Turney and Littman (2005), we evaluate the performance by accuracyand also by the macroaveraged F measure (Lewis 1991).
Macroaveraging calculatesthe precision, recall, and F for each class separately, and then calculates the averageacross all classes.
Microaveraging combines the true positive, false positive, and falsenegative counts for all of the classes, and then calculates precision, recall, and F from thecombined counts.
Macroaveraging gives equal weight to all classes, but microaveraginggives more weight to larger classes.
We use macroaveraging (giving equal weight to allclasses), because we have no reason to believe that the class sizes in the data set reflectthe actual distribution of the classes in a real corpus.Classification with 30 distinct classes is a hard problem.
To make the task easier, wecan collapse the 30 classes to 5 classes, using the grouping that is given in Table 19.
Forexample, agent and beneficiary both collapse to participant.
On the 30 class problem, LRAwith the single nearest neighbor algorithm achieves an accuracy of 39.8% (239/600)and a macroaveraged F of 36.6%.
Always guessing the majority class would result inan accuracy of 8.2% (49/600).
On the 5 class problem, the accuracy is 58.0% (348/600)and the macroaveraged F is 54.6%.
Always guessing the majority class would give anaccuracy of 43.3% (260/600).
For both the 30 class and 5 class problems, LRA?s accuracyis significantly higher than guessing the majority class, with 95% confidence, accordingto the Fisher Exact Test (Agresti 1990).7.3 LRA versus VSMTable 20 shows the performance of LRA and VSM on the 30 class problem.
VSM-AVis VSM with the AltaVista corpus and VSM-WMTS is VSM with the WMTS corpus.The results for VSM-AV are taken from Turney and Littman (2005).
All three pairwisedifferences in the three F measures are statistically significant at the 95% level, accordingto the Paired t-Test (Feelders and Verkooijen 1995).
The accuracy of LRA is signifi-cantly higher than the accuracies of VSM-AV and VSM-WMTS, according to the FisherExact Test (Agresti 1990), but the difference between the two VSM accuracies is notsignificant.Table 21 compares the performance of LRA and VSM on the 5 class problem.The accuracy and F measure of LRA are significantly higher than the accuracies and410Turney Similarity of Semantic RelationsTable 20Comparison of LRA and VSM on the 30 class problem.VSM-AV VSM-WMTS LRACorrect 167 148 239Incorrect 433 452 361Total 600 600 600Accuracy 27.8 24.7 39.8Precision 27.9 24.0 41.0Recall 26.8 20.9 35.9F 26.5 20.3 36.6Table 21Comparison of LRA and VSM on the 5 class problem.VSM-AV VSM-WMTS LRACorrect 274 264 348Incorrect 326 336 252Total 600 600 600Accuracy 45.7 44.0 58.0Precision 43.4 40.2 55.9Recall 43.1 41.4 53.6F 43.2 40.6 54.6F measures of VSM-AV and VSM-WMTS, but the differences between the two VSMaccuracies and F measures are not significant.8.
DiscussionThe experimental results in Sections 6 and 7 demonstrate that LRA performs signifi-cantly better than the VSM, but it is also clear that there is room for improvement.
Theaccuracy might not yet be adequate for practical applications, although past work hasshown that it is possible to adjust the trade-off of precision versus recall (Turney andLittman 2005).
For some of the applications, such as information extraction, LRA mightbe suitable if it is adjusted for high precision, at the expense of low recall.Another limitation is speed; it took almost 9 days for LRA to answer 374 analogyquestions.
However, with progress in computer hardware, speed will gradually becomeless of a concern.
Also, the software has not been optimized for speed; there are severalplaces where the efficiency could be increased and many operations are parallelizable.It may also be possible to precompute much of the information for LRA, although thiswould require substantial changes to the algorithm.The difference in performance between VSM-AV and VSM-WMTS shows that VSMis sensitive to the size of the corpus.
Although LRA is able to surpass VSM-AV when theWMTS corpus is only about one tenth the size of the AV corpus, it seems likely that LRAwould perform better with a larger corpus.
The WMTS corpus requires one terabyte ofhard disk space, but progress in hardware will likely make 10 or even 100 terabytesaffordable in the relatively near future.For noun-modifier classification, more labeled data should yield performance im-provements.
With 600 noun-modifier pairs and 30 classes, the average class has only411Computational Linguistics Volume 32, Number 320 examples.
We expect that the accuracy would improve substantially with 5 or10 times more examples.
Unfortunately, it is time consuming and expensive to acquirehand-labeled data.Another issue with noun-modifier classification is the choice of classificationscheme for the semantic relations.
The 30 classes of Nastase and Szpakowicz (2003)might not be the best scheme.
Other researchers have proposed different schemes(Vanderwende 1994; Barker and Szpakowicz 1998; Rosario and Hearst 2001; Rosario,Hearst, and Fillmore 2002).
It seems likely that some schemes are easier for machinelearning than others.
For some applications, 30 classes may not be necessary; the 5 classscheme may be sufficient.LRA, like VSM, is a corpus-based approach to measuring relational similarity.
Pastwork suggests that a hybrid approach, combining multiple modules, some corpus-based, some lexicon-based, will surpass any purebred approach (Turney et al 2003).In future work, it would be natural to combine the corpus-based approach of LRA withthe lexicon-based approach of Veale (2004), perhaps using the combination method ofTurney et al (2003).SVD is only one of many methods for handling sparse, noisy data.
We have alsoexperimented with Non-negative Matrix Factorization (NMF) (Lee and Seung 1999),Probabilistic Latent Semantic Analysis (PLSA) (Hofmann 1999), Kernel Principal Com-ponents Analysis (KPCA) (Scholkopf, Smola, and Muller 1997), and Iterative Scaling(IS) (Ando 2000).
We had some interesting results with small matrices (around 2,000rows by 1,000 columns), but none of these methods seemed substantially better thanSVD and none of them scaled up to the matrix sizes we are using here (e.g., 17,232 rowsand 8,000 columns; see Section 6.1).In step 4 of LRA, we simply select the top num patterns most frequent patternsand discard the remaining patterns.
Perhaps a more sophisticated selection algorithmwould improve the performance of LRA.
We have tried a variety of ways of selectingpatterns, but it seems that the method of selection has little impact on performance.
Wehypothesize that the distributed vector representation is not sensitive to the selectionmethod, but it is possible that future work will find a method that yields significantimprovement in performance.9.
ConclusionThis article has introduced a new method for calculating relational similarity, LatentRelational Analysis.
The experiments demonstrate that LRA performs better than theVSM approach, when evaluated with SAT word analogy questions and with the taskof classifying noun-modifier expressions.
The VSM approach represents the relation be-tween a pair of words with a vector, in which the elements are based on the frequenciesof 64 hand-built patterns in a large corpus.
LRA extends this approach in three ways:(1) The patterns are generated dynamically from the corpus, (2) SVD is used to smooththe data, and (3) a thesaurus is used to explore variations of the word pairs.
With theWMTS corpus (about 5 ?
1010 English words), LRA achieves an F of 56.5%, whereas theF of VSM is 40.3%.We have presented several examples of the many potential applications for mea-sures of relational similarity.
Just as attributional similarity measures have provento have many practical uses, we expect that relational similarity measures will soonbecome widely used.
Gentner et al (2001) argue that relational similarity is essentialto understanding novel metaphors (as opposed to conventional metaphors).
Many412Turney Similarity of Semantic Relationsresearchers have argued that metaphor is the heart of human thinking (Lakoff andJohnson 1980; Hofstadter and the Fluid Analogies Research Group 1995; Gentneret al 2001; French 2002).
We believe that relational similarity plays a fundamental rolein the mind and therefore relational similarity measures could be crucial for artificialintelligence.In future work, we plan to investigate some potential applications for LRA.
Itis possible that the error rate of LRA is still too high for practical applications, butthe fact that LRA matches average human performance on SAT analogy questions isencouraging.AcknowledgmentsThanks to Michael Littman for sharing the374 SAT analogy questions and for inspiringme to tackle them.
Thanks to Vivi Nastaseand Stan Szpakowicz for sharing their 600classified noun-modifier phrases.
Thanks toEgidio Terra, Charlie Clarke, and the Schoolof Computer Science of the University ofWaterloo, for giving us a copy of theWaterloo MultiText System and theirTerabyte Corpus.
Thanks to Dekang Lin formaking his Dependency-Based WordSimilarity lexicon available online.
Thanks toDoug Rohde for SVDLIBC and MichaelBerry for SVDPACK.
Thanks to Ted Pedersenfor making his WordNet::Similarity packageavailable.
Thanks to Joel Martin forcomments on the article.
Thanks to theanonymous reviewers of ComputationalLinguistics for their very helpful commentsand suggestions.ReferencesAgresti, Alan.
1990.
Categorical Data Analysis.Wiley, Hoboken, NJ.Ando, Rie Kubota.
2000.
Latent semanticspace: Iterative scaling improves precisionof inter-document similarity measurement.In Proceedings of the 23rd Annual ACM SIGIRConference on Research and Developmentin Information Retrieval (SIGIR-2000),pages 216?223, Athens, Greece.Baeza-Yates, Ricardo A. and Berthier A.Ribeiro-Neto.
1999.
Modern InformationRetrieval.
ACM Press, New York, NY.Banerjee, Satanjeev and Ted Pedersen.
2003.Extended gloss overlaps as a measure ofsemantic relatedness.
In Proceedings of theEighteenth International Joint Conference onArtificial Intelligence (IJCAI-03),pages 805?810, Acapulco, Mexico.Barker, Ken and Stan Szpakowicz.
1998.Semi-automatic recognition of nounmodifier relationships.
In Christian Boitetand Pete Whitelock, editors, Proceedings ofthe Thirty-Sixth Annual Meeting of theAssociation for Computational Linguistics andSeventeenth International Conference onComputational Linguistics(COLING-ACL?98), pages 96?102, SanFrancisco, CA.
Morgan KaufmannPublishers.Berland, Matthew and Eugene Charniak.1999.
Finding parts in very large corpora.In Proceedings of the 37th Annual Meeting ofthe Association for Computational Linguistics(ACL ?99), pages 57?64, New Brunswick,NJ.Berry, Michael W. 1992.
Large scale singularvalue computations.
International Journal ofSupercomputer Applications, 6(1):13?49.Budanitsky, Alexander and Graeme Hirst.2001.
Semantic distance in wordnet: Anexperimental, application-orientedevaluation of five measures.
In Proceedingsof the Workshop on WordNet and OtherLexical Resources, Second Meeting of theNorth American Chapter of the Association forComputational Linguistics (NAACL-2001),pages 29?34, Pittsburgh, PA.Chiarello, Christine, Curt Burgess, LorieRichards, and Alma Pollock.
1990.Semantic and associative priming in thecerebral hemispheres: Some words do,some words don?t ... sometimes, someplaces.
Brain and Language, 38:75?104.Claman, Cathy.
2000.
10 Real SATs.
CollegeEntrance Examination Board.Clarke, Charles L. A., Gordon V. Cormack,and Christopher R. Palmer.
1998.
Anoverview of multitext.
ACM SIGIR Forum,32(2):14?15.Daganzo, Carlos F. 1994.
The celltransmission model: A dynamicrepresentation of highway trafficconsistent with the hydrodynamic theory.Transportation Research Part B:Methodological, 28(4):269?287.Deerwester, Scott C., Susan T. Dumais,Thomas K. Landauer, George W. Furnas,and Richard A. Harshman.
1990.
Indexing413Computational Linguistics Volume 32, Number 3by latent semantic analysis.
Journal of theAmerican Society for Information Science(JASIS), 41(6):391?407.Dolan, William B.
1995.
Metaphor as anemergent property of machine-readabledictionaries.
In Proceedings of the AAAI1995 Spring Symposium Series: Representationand Acquisition of Lexical Knowledge:Polysemy, Ambiguity and Generativity,pages 27?32, Menlo Park, CA.Dumais, Susan T. 1990.
Enhancingperformance in latent semantic indexing(LSI) retrieval.
Technical Report TM-ARH-017527, Bellcore, Morristown, NJ.Dumais, Susan T. 1993.
Latent semanticindexing (LSI) and TREC-2.
In D. K.Harman, editor, Proceedings of theSecond Text REtrieval Conference (TREC-2),pages 105?115.
National Instituteof Standards and Technology,Gaithersburg, MD.Falkenhainer, Brian.
1990.
Analogicalinterpretation in context.
In Proceedings ofthe Twelfth Annual Conference of the CognitiveScience Society, pages 69?76.
LawrenceErlbaum Associates, Mahwah, NJ.Falkenhainer, Brian, Kenneth D. Forbus,and Dedre Gentner.
1989.
Thestructure-mapping engine: Algorithm andexamples.
Artificial Intelligence, 41(1):1?63.Federici, Stefano, Simonetta Montemagni,and Vito Pirrelli.
1997.
Inferring semanticsimilarity from distributional evidence: Ananalogy-based approach to word sensedisambiguation.
In Proceedings of theACL/EACL Workshop on AutomaticInformation Extraction and Building of LexicalSemantic Resources for NLP Applications,pages 90?97, Madrid, Spain.Feelders, Ad and William Verkooijen.
1995.Which method learns the most fromdata?
Methodological issues in theanalysis of comparative studies.
In FifthInternational Workshop on ArtificialIntelligence and Statistics, pages 219?225,Ft.
Lauderdale, FL.Fellbaum, Christiane, editor.
1998.
WordNet:An Electronic Lexical Database.
MIT Press,Cambridge, MA.French, Robert M. 2002.
The computationalmodeling of analogy-making.
Trends inCognitive Sciences, 6(5):200?205.Gentner, Dedre.
1983.
Structure-mapping: Atheoretical framework for analogy.Cognitive Science, 7(2):155?170.Gentner, Dedre, Brian Bowdle, Phillip Wolff,and Consuelo Boronat.
2001.
Metaphor islike analogy.
In Dedre Gentner, Keith J.Holyoak, and Boicho N. Kokinov, editors,The Analogical Mind: Perspectives fromCognitive Science.
MIT Press, Cambridge,MA, pages 199?253.Gildea, Daniel and Daniel Jurafsky.
2002.Automatic labeling of semantic roles.Computational Linguistics, 28(3):245?288.Girju, Roxana, Adriana Badulescu, andDan I. Moldovan.
2003.
Learning semanticconstraints for the automatic discovery ofpart-whole relations.
In Proceedings of theHuman Language Technology Conference ofthe North American Chapter of the Associationfor Computational Linguistics (HLT-NAACL2003), pages 80?87, Edmonton, Canada.Goldenberg, David.
2005.
The emperor?snew clothes: Undressing the new andunimproved SAT.
Gelf Magazine, March.http://www.gelf-magazine.com/mt/archives/the emperors new clothes.html.Golub, Gene H. and Charles F. Van Loan.1996.
Matrix Computations.
3rd ed.Johns Hopkins University Press,Baltimore, MD.Harman, Donna.
1986.
An experimentalstudy of factors important in documentranking.
In Proceedings of the Ninth AnnualInternational ACM SIGIR Conference onResearch and Development in InformationRetrieval (SIGIR?86), pages 186?193, Pisa,Italy.Hearst, Marti A.
1992.
Automatic acquisitionof hyponyms from large text corpora.
InProceedings of the Fourteenth InternationalConference on Computational Linguistics,pages 539?545, Nantes, France.Hirst, Graeme and David St-Onge.
1998.Lexical chains as representations of contextfor the detection and correction ofmalapropisms.
In Christiane Fellbaum,editor, WordNet: An Electronic LexicalDatabase, pages 305?332.
MIT Press,Cambridge, MA.Hofmann, Thomas.
1999.
Probabilistic latentsemantic indexing.
In Proceedings of the22nd Annual ACM Conference on Researchand Development in Information Retrieval(SIGIR ?99), pages 50?57, Berkeley, CA,August.Hofstadter, Douglas and the Fluid AnalogiesResearch Group.
1995.
Fluid Concepts andCreative Analogies: Computer Models of theFundamental Mechanisms of Thought.
BasicBooks, New York.Jarmasz, Mario and Stan Szpakowicz.2003.
Roget?s thesaurus and semanticsimilarity.
In Proceedings of the InternationalConference on Recent Advances in NaturalLanguage Processing (RANLP-03),pages 212?219, Borovets, Bulgaria.414Turney Similarity of Semantic RelationsJiang, Jay J. and David W. Conrath.
1997.Semantic similarity based on corpusstatistics and lexical taxonomy.
InProceedings of the International Conference onResearch in Computational Linguistics(ROCLING X), pages 19?33, Tapei, Taiwan.Kurtz, Stanley.
2002.
Testing debate.National Review Magazine, August.http://www.nationalreview.com/kurtz/kurtz082102.asp.Lakoff, George and Mark Johnson.
1980.Metaphors We Live By.
University ofChicago Press, Chicago, IL.Landauer, Thomas K. and Susan T. Dumais.1997.
A solution to Plato?s problem: Thelatent semantic analysis theory of theacquisition, induction, and representationof knowledge.
Psychological Review,104(2):211?240.Lapata, Mirella and Frank Keller.
2004.
Theweb as a baseline: Evaluating theperformance of unsupervised web-basedmodels for a range of NLP tasks.
InProceedings of the Human LanguageTechnology Conference of the North AmericanChapter of the Association for ComputationalLinguistics (HLT-NAACL 2004),pages 121?128, Boston, MA.Lauer, Mark.
1995.
Designing StatisticalLanguage Learners: Experiments onCompound Nouns.
Ph.D. thesis, MacquarieUniversity, Sydney.Leacock, Claudia and Martin Chodorow.1998.
Combining local context andWordNet similarity for word senseidentification.
In Christiane Fellbaum,editor, WordNet: An Electronic LexicalDatabase, pages 265?283.
MIT Press,Cambridge, MA.Lee, Daniel D. and H. Sebastian Seung.
1999.Learning the parts of objects bynonnegative matrix factorization.
Nature,401:788?791.Lesk, Michael E. 1969.
Word-wordassociations in document retrievalsystems.
American Documentation,20(1):27?38.Lesk, Michael E. 1986.
Automatic sensedisambiguation using machine readabledictionaries: How to tell a pine cone froman ice cream cone.
In Proceedings of ACMSIGDOC ?86, pages 24?26, New York, NY.Lewis, David D. 1991.
Evaluating textcategorization.
In Proceedings of theSpeech and Natural Language Workshop,pages 312?318, Asilomar, CA.
MorganKaufmann, San Francisco, CA.Lin, Dekang.
1998a.
Automatic retrieval andclustering of similar words.
In Proceedingsof the 36th Annual Meeting of the Associationfor Computational Linguistics and the 17thInternational Conference on ComputationalLinguistics (COLING-ACL ?98),pages 768?774, Montreal, Canada.Lin, Dekang.
1998b.
An information-theoreticdefinition of similarity.
In Proceedings of the15th International Conference on MachineLearning (ICML ?98), pages 296?304.Morgan Kaufmann, San Francisco, CA.Marx, Zvika, Ido Dagan, Joachim Buhmann,and Eli Shamir.
2002.
Coupled clustering:A method for detecting structuralcorrespondence.
Journal of MachineLearning Research, 3:747?780.Medin, Douglas L., Robert L. Goldstone, andDedre Gentner.
1990.
Similarity involvingattributes and relations: Judgments ofsimilarity and difference are not inverses.Psychological Science, 1(1):64?69.Moldovan, Dan, Adriana Badulescu, MartaTatu, Daniel Antohe, and Roxana Girju.2004.
Models for the semanticclassification of noun phrases.
InProceedings of the Computational LexicalSemantics Workshop at HLT-NAACL 2004,pages 60?67, Boston, MA.Morris, Jane and Graeme Hirst.
1991.
Lexicalcohesion computed by thesaural relationsas an indicator of the structure of text.Computational Linguistics, 17(1):21?48.Nastase, Vivi and Stan Szpakowicz.
2003.Exploring noun?modifier semanticrelations.
In Fifth International Workshop onComputational Semantics (IWCS-5),pages 285?301, Tilburg, the Netherlands.Pantel, Patrick and Dekang Lin.
2002.Discovering word senses from text.
InProceedings of ACM SIGKDD Conference onKnowledge Discovery and Data Mining,pages 613?619, New York, NY.Rada, Roy, Hafedh Mili, Ellen Bicknell, andMaria Blettner.
1989.
Development andapplication of a metric on semantic nets.IEEE Transactions on Systems, Man, andCybernetics, 19(1):17?30.Rehder, Bob, M. E. Schreiner, Michael B. W.Wolfe, Darrell Laham, Thomas K.Landauer, and Walter Kintsch.
1998.
Usinglatent semantic analysis to assessknowledge: Some technical considerations.Discourse Processes, 25:337?354.Reitman, Walter R. 1965.
Cognition andThought: An Information ProcessingApproach.
John Wiley and Sons,New York, NY.Resnik, Philip.
1995.
Using informationcontent to evaluate semantic similarityin a taxonomy.
In Proceedings of the 14th415Computational Linguistics Volume 32, Number 3International Joint Conference on ArtificialIntelligence (IJCAI-95), pages 448?453, SanMateo, CA.
Morgan Kaufmann, SanFrancisco, CA.Riloff, Ellen and Rosie Jones.
1999.
Learningdictionaries for information extraction bymulti-level bootstrapping.
In Proceedings ofthe Sixteenth National Conference on ArtificialIntelligence (AAAI-99), pages 474?479,Menlo Park, CA.Rosario, Barbara and Marti Hearst.
2001.Classifying the semantic relations innoun-compounds via a domain-specificlexical hierarchy.
In Proceedings of the 2001Conference on Empirical Methods in NaturalLanguage Processing (EMNLP-01),pages 82?90, Pittsburgh, PA.Rosario, Barbara, Marti Hearst, and CharlesFillmore.
2002.
The descent of hierarchy,and selection in relational semantics.In Proceedings of the 40th Annual Meetingof the Association for ComputationalLinguistics (ACL ?02), pages 417?424,Philadelphia, PA.Ruge, Gerda.
1992.
Experiments onlinguistically-based term associations.Information Processing and Management,28(3):317?332.Salton, Gerard.
1989.
Automatic TextProcessing: The Transformation, Analysis, andRetrieval of Information by Computer.Addison-Wesley, Reading, MA.Salton, Gerard and Chris Buckley.
1988.Term-weighting approaches in automatictext retrieval.
Information Processing andManagement, 24(5):513?523.Salton, Gerard and Michael J. McGill.
1983.Introduction to Modern Information Retrieval.McGraw-Hill, New York, NY.Scholkopf, Bernhard, Alexander J. Smola,and Klaus-Robert Muller.
1997.
Kernelprincipal component analysis.
InProceedings of the International Conference onArtificial Neural Networks (ICANN-1997),pages 583?588, Berlin.Terra, Egidio and Charles L. A. Clarke.
2003.Frequency estimates for statistical wordsimilarity measures.
In Proceedings of theHuman Language Technology and NorthAmerican Chapter of Association ofComputational Linguistics Conference 2003(HLT/NAACL 2003), pages 244?251,Edmonton, Canada.Turney, Peter D. 2001.
Mining the Web forsynonyms: PMI-IR versus LSA on TOEFL.In Proceedings of the Twelfth EuropeanConference on Machine Learning,pages 491?502, Springer, Berlin.Turney, Peter D. 2002.
Thumbs up or thumbsdown?
Semantic orientation applied tounsupervised classification of reviews.In Proceedings of the 40th Annual Meetingof the Association for ComputationalLinguistics (ACL?02), pages 417?424,Philadelphia, PA.Turney, Peter D. 2005.
Measuring semanticsimilarity by latent relational analysis.
InProceedings of the Nineteenth InternationalJoint Conference on Artificial Intelligence(IJCAI-05), pages 1136?1141, Edinburgh,Scotland.Turney, Peter D. and Michael L. Littman.2005.
Corpus-based learning of analogiesand semantic relations.
Machine Learning,60(1?3):251?278.Turney, Peter D., Michael L. Littman,Jeffrey Bigham, and Victor Shnayder.2003.
Combining independent modulesto solve multiple-choice synonym andanalogy problems.
In Proceedings ofthe International Conference on RecentAdvances in Natural Language Processing(RANLP-03), pages 482?489, Borovets,Bulgaria.Vanderwende, Lucy.
1994.
Algorithm forautomatic interpretation of nounsequences.
In Proceedings of the FifteenthInternational Conference on ComputationalLinguistics, pages 782?788, Kyoto,Japan.Veale, Tony.
2003.
The analogical thesaurus.In Proceedings of the 15th InnovativeApplications of Artificial IntelligenceConference (IAAI 2003), pages 137?142,Acapulco, Mexico.Veale, Tony.
2004.
WordNet sits the SAT:A knowledge-based approach tolexical analogy.
In Proceedings of the 16thEuropean Conference on Artificial Intelligence(ECAI 2004), pages 606?612, Valencia,Spain.Yangarber, Roman.
2003.
Counter-training indiscovery of semantic patterns.
InProceedings of the 41st Annual Meeting of theAssociation for Computational Linguistics(ACL-2003), pages 343?350, Sapporo,Japan.Yarowsky, David.
1993.
One sense percollocation.
In Proceedings of the ARPAHuman Language Technology Workshop,pages 266?271, Princeton, NJ.Zelenko, Dmitry, Chinatsu Aone,and Anthony Richardella.
2003.
Kernelmethods for relation extraction.Journal of Machine Learning Research,3:1083?1106.416
