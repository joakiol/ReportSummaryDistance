Semantic Acquisition In TELI: A Transportable,User-Customized Natural Language ProcessorBruce W. Bal lardDouglas E. StumbergerAT&T Bel l  Laborator ies600 Mounta in  AvenueMurray  Hi l l ,  N J  07974AbstractWe discuss ways of allowing the users of a naturallanguage processor to define, examine, and modify thedefinitions of any domain-specific words or phrasesknown to the system.
An implementation of this workforms a critical portion of the knowledge acquisitioncomponent of our Transportable English-LanguageInterface (TELl),  which answers English questionsabout tabular (first normal-form) data files and runson a Symbolics Lisp Machine.
However, ourtechniques enable the design of customization modulesthat are largely independent of the syntactic andretrieval components of the specific system theysupply information to.
In addition to its obviouspractical value, this area of research is importantbecause it requires careful attention to the formalismsused by a natural language system and to theinteractions among the modules based on thoseformalisms.1.
IntroductionIn constructing the Transportable English-Language Interface system (TELI).
we have sought torespond to problems of both an applied and ascientific nature.
Concerning the applied side ofcomputational linguistics, we seek to redress the factthat many natural language prototypes, despite theirsophistication and even their robustness, have falleninto disuse because of failures (1) to make known tousers exactly what inputs are allowed (e.g.
what wordsand phrases are defined) and (2) to providecapabilities that meet the precise needs of a given useror group of users (e.g.
appropriate vocabulary, syntax.and semantics).
Since experience has shown thatneither users nor svstem designers can predict inadvance all the words, phrases, and associatedmeanings that will arise in accessing a given database(cf.
Tennant.
1979).
we have sought to make TELl"transportable" in an extreme sense, wherecustomizations may be performed (1) by end users, asopposed to the system designers, and (2) at any timeduring the processing of English sentences, ratherthan requiring a complete customization beforeEnglish processing may occur.In addition to the potential practical benefits ofa user-customized interface, we feel that well-conceived transportability projects can make usefulscientific contributions to computational linguisticssince single-domain systems and, to a lesser extent,systems adapted over weeks or months by theirdesigners, afford opportunities to circumvent, ratherthan squarely address, important issues concerning (a)the precise nature of the formalisms the system isdesigned around, and (b) the interactions amongsystem modules.
Although customization efforts offerno guarantee against ad-hoc design or sloppyimplementation, problems of the type mentionedabove are less likely to go unnoticed when dealingwith a system whose domain-specific information issupplied at run-time, especially when that informationis being provided by the actual users of the system.By way of overview, we note that the TEL Isystem derives from previous work on the LDCproject, as documented in Ballard (1982), Ballard(1984), Ballard, Lusth and Tinkham (1984).
andBallard and Tinkham (1984).
The initial prototype ofTELI .
which runs on a Symbolics Lisp Machine, isdesigned to answer English questions aboutinformation stored in one or more tables, (i.e.
first-normal-form relational database).
A sample view ofthe display screen during a session with TELl .
whichmay give the flavor of how the system operates, isshown in Figure L Information on some aspects ofknowledge acquisition not discussed in this paper.particularly with regard to syntactic case frames, canbe found in Ballard (1986).2.
Types of Modifiers Available in TELIThe syntactic and semantic models adopted forTEL1 are intended to provide a unified treatment of abroad and extendible class of word and phrase types.By providing for an "extendible" class of constructs,we make the knowledge acquisition module of TEL lindependent of the natural language portion of thesystem, whose earlier version has been described inBallard and Tinkham (1984) and Ballard.
Lusth.
and20Tinkham (1984), In the remainder of this paper, thereader should bear in mind that the acquisitionmodules of TEL1, including the menus they generate,are driven by extensible data structures that conveythe linguistic coverage of the underlying naturallanguage processor (NLP) for which information isbeing acquired.
For example, incorporating adjectivephrases into the system involved adding 12 lines ofLisp-like data specifications.
This brevity is largelydue to the use of case frames that embody dynamicallyalterable selectional restrictions (Ballard, 1986).As an initial feeling for the coverage of theNLP for which information is currently acquired,TEL1 provides semantics for the word categoriesAdjectivee.g.
an expensive restaurantNoun Modifiere.g.
a graduate studentNoune.g.
a puband the phrase typesAdjective Phrasee.g.
employees responsible for  the planning projectsNoun-Modifier Phrasee.g.
the speech researchersPrepositional Phrasee.g.
the trails on the Franconia-Region mapVerb Phrasee.g.
employees that report to BrachmanFunctional Noun Phrasee.g.
the size of department 11387,the colleagues of LitmanIn addition to these user-defined modifier types, thesystem currently provides for negation, comparativeand superlative forms of adjectives, possessives, andordinals.
Among the grammatical features supportedare passives for verbs, reduced relatives forprepositional and adjective phrases, fronting of verbphrase complements, and other minor features.
Oneimportant area for expansion involves quantifiers.both logical (e.g.
"all") and numerical (e.g.
"at least 3").3.
Principles Behind Semantic AcquisitionAs noted above, our goal is to devise techniquesthat enable end users of a natural language processorto furnish all domain-specific information to by thesystem.
This information includes (1) the vocabularyneeded for the data at hand; (2) various types ofselectional restrictions that define acceptable phraseattachments; and most critically (3) the definitions ofwords and phrases.
With this in mind, the primarycriteria which the semantic acquisition component ofTELI  has been designed around are as follows.To allow users to define, examine or modify domain-specific il(ormation at any time.
This derives from ourbeliefs that the needs of a user or group of userscannot all be predicted in advance, and will probablychange once the system has begun operation.To enable users to impart new concepts to the system.We provide more than just synonym and paraphrasecapabilities and, in fact.
definitions may be arbitrarilycomplex, by being defined either (a) in terms of otherdefinitions, which may be defined upon otherdefinitions, or (b) as the conjuction of an arbitrarynumber of constraints.English Input:.h ich  t ra i l s  that a ren ' t  long lead to a mountain on ?ranconia r idgeIn terna l  Representat ion:(TRAIL (VERBINFO (TRAIL LEAD NIL NIL TO MOUNTAIN)(SUBJ ?
)(ARG (MOUNTAIN (QURNT = NIL)(NOT (RDJ LONG)))Algebra Querg:(SELECT t ra i l s ( t ra i l  length-Km)(and (< length-km 67Answer:(PREPINFO (MOUNTAIN ON TRAIL)(SUBJ ?
)(ARG (TRAIL (= FRANCONIA-RIDGE)))))))(= t ra i l  (SELECT(TJOIN t ra i l s ( t ra i l )  = mtn- t ra i l s ( t ra i l ) ) ( t ra i l )(= name (SELECT(TJOIN mountains(name) = mtn- t ra i l s (name) ) (name)(= t ra i l  ' f ranconia-r idge)))) ) ) )(TRAILS)TRAIL - LENGTH-KMOLD-BRIDLE-PATH 4.1LIBERTY-SPRING 4.7What 's  Your  P leasure?,qrl:S~,ver a QuE:st~JotlEdit  the Last InputPr int  Parse Tree.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Run Pieces of  the NLP.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Exit.. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Begin a &~ston-dzatior~UocabulaG5ynta:,.,Sernavftic:sGeneral InfoClear 5, : reolEdit  Global Flags5ave/Pet.rieve SessionFigure 1: Sample Display Screen; Top-Level Menu of TEL121To provide definition capabilities independent ofmodifier type.
In our system, adjectives, nouns,prepositional phrases, verb phrases, and so forth areall defined in precisely the same way.
This is achievedin part by treating all modifiers as n-place predicates.To allow definitions to be given at various conceptuallevels.
Users are able to specify meanings (a) inEnglish; (b) in terms of the meanings of previouslydefined words or phrases; (c) by reference to"conceptual" relationships, which have been abstractedto a level above that of the physical data files; or (d)in terms of database columns.
We strive to minimizethe need for low-level database references, since thishelps (1) to avoid tedious and redundant references,and (2) to assure that most of our techniques will beapplicable beyond the current conventional databasesetting.To provide alternate modalities of specification.
Forexample, the menu scheme described in Section 7.2offers the user more assistance in making definitions.but is less powerful, than the alternative English andEnglish-like methods described in Section 7.3.
Weprefer to let users decide when each modality isappropriate, rather than force a compromise amongsimplicity, reliability, and power.To enable the system to  proride help or guidance to thecustomizer.
When defining a modifier, users may viewall current modifiers of.
or functions associated with,the object type(s) in question.
Many otheropportunities exist for co-operation on the part of thesystem.
To avoid unnecessary limitations, however,users are generally able to override any hints made bythe system.4.
Semantic Processing in TELIThe semantic model developed for TELI, inwhich definitions are acquired from users, assumesthat (1) modifier meanings will be purely extensional,and can thus be treated as n-place predicates, and (2)semantic analysis will be almost entirelycompositional.
Concerning the latter assumption, wenote that (a) some important disambiguations,including problems of word sense, will have beenmade during parsing by reference to selectionalrestrictions (Ballard and Tinkham, 1984), and (b)minimal re-ordering does occur in converting parsetrees into internal representations.4.1 Types of SemanticsAll user-defined semantics, however acquired,are stored in a global Lisp structure indexed by theword or phrase being defined.
Single-word modifiersare indexed by the word being defined, its part ofspeech, and the entity it modifies; phrasal modifiersare indexed by the phrase type and the associated caseframe.
For example, the internal references(new adj room)(prep-ph (restaurant in county))respectively index the definitions of "new", when usedas an adjective modifier of rooms, and "in", as itrelates restaurants to counties.
As suggested by thisindexing scheme, word meanings arise only in thecontext of their occurrence, never in isolation.
Thus,"new room" and "restaurant in county" receivedefinitions, not "new" or "in".
This decision lendsgenerality to the definitional scheme, and anyadditional effort thereby needed to make multipledefinitions is minimized by the provisions forborrowed meanings, as described in Section 7.4.Although our representation strategies allow fordefinitions that involve relatively elaborate traversalsof the physical data files.
TELI does not presentlyprovide for arithmetic computations.
Thus, the input"Which restaurants are within 3 blocks of ChinaGardens?"
requires a 2-place "distance" function and,unless the underlying data files provide distancesbetween restaurants (there are N-squared suchdistances to account for).
the necessary semanticscannot be supplied.4.2 Internal RepresentationsAs an example of the "internal representation"(IR) of an input, which results from a recursivetraversal of a completed parse tree, and whichillustrates preparations for compositional analysis, the(artificially complex) input"Which Mexican restaurants in the largest city otherthan New Providence that are not expensive areopen for lunch'?
"will have \[roughly\] the internal representation(restaurant (not (adj expensive))(nounmod-ph (food restaurant)(nounmod (food (= Mexican)))(head ?
))(prep-ph (restaurant in city)(subj ?
)(arg (city (super large)(!= New-Providence))))(adj-ph (restaurant open for meal)(subj ?
)(arg (meal (= lunch)))))This top-level interpretation of the input instructs thesystem to find all restaurants that satisfy (a) thenegation of the 1-place predicate associated with"expensive", and (b) the three 2-place predicatesassociated with the noun-noun, prepositional, andadjective phrases.
Note that modifiers associated with22phrasal modifiers are referenced by their case frame,e.g.
"restaurant in city".
Within the scope of thesereferences, case labels (e.g.
"subj" and "arg") indicatewhich slots have been instantiated and which slot hasbeen relativized, the latter denoted by "?".
The list ofslot names associated with each phrase type is storedglobally.
In most instances, the argument of a caseslot can be an arbitrary IR structure, in keeping withthe recursive nature of the English inputs beingrecognized.Since IR structures are built around the wordand phrase types of the English being dealt with, andsince the meanings of words and phrases are storedglobally, IR structures should not be regarded as a"knowledge representation" in the sense of KL-ONE,logical form.
and so forth.
Systems similar in goals toTEL I  but which revolve around logical form includeTEAM (Grosz, 1983; Grosz, Appelt .
Martin, andPereira 1985), IRUS (Bates and Bobrow, 1983; Bates,Moser, and Stallard 1984), and TQA (Plath, 1976;Damerau, 1985).
One system similar to TEL I  inbuilding intermediate structures that containreferences to language-specific concepts isDATALOG (Hafner and Godden.
1985).5.
The Initial Phase of CustomizationWhen a user asks TEL1 to begin learning abouta new domain, the system spends from five to thirtyminutes, depending on the complexity of theapplication, obtaining basic information about eachtable in the the database (see Figure 2).
Users arefirst asked to give the key column of the table.
Thisinformation is used primari ly to guide the system ininferring the semantics of certain noun-noun and "of"-based patterns.
Next, users are asked which columnscontain entity values as opposed to property values.Typical propert ies are "size", "color", and "length",which differ from entities in that (a) their values donot appear as an argument to arbitrary verbs andprepositions (e.g.
other than "have", "with", etc.)
and(b) they will not themselves have propert ies associatedwith them.
Finally, users are asked to specify the typeof value each column contains.
This informationallows subsequent references to concepts (e.g.
"color")rather than physical column names.
It also aids thesystem in forming subsequent suggestions to the user(e.g.
defaults that can be overridden).Having obtained the informationabove, the system constructs definitionssimple questions to be answered, such asindicatedthat allow"What is Sally's social security number?
""What is the age of John"Along with information freely volunteered by theuser, these definitions can be subsequently examinedor changed at the user's request.STUDENT-INFO- STUDENT -BILLDOUGFREDJOHNSALLYSUETERESASSN CLASS ADVIS123-45-67891 I BBLLRRD111-22-3333 3 LITMAN321-54-9876 3 MARCUS555-33-1234 2 JONES314-15-9265 4 BRACH~RN987-65-4321 3 BRCHENKO333-22-4444 G BORGIDRWhich is the  "key"  co lumn o f  STUDENT- INFO?5TLIDENT (BILL, \[IOIJI5 .
.
.
.  )
--~......... ~" 1~_,-4J-b,.
',_.,9 ..... ) SSN (111-~-~:,_,D, .
:.o .~ -~e-CLASS (1, 2, .
.
,~DUI5 (BACHENKO, B,~LL,~RD ...)Columns of STUDEHT-IHFO Entity PrTopertySTUDENT (BILL .
.
.
.  )
1~SSH (111-22-3333 .
.
.
.  )
\[\] \[\]CLASS (1 .
.
.
.  )
\ [ \ ]  \ [ \ ]ADUIS (BBCHENKO .
.
.
.  )
\[\] \[\]Return \ [ \ ]I Ent i ty  Type fo r  STUDEHT (BILL.
DOUG .
.
.
.  )
I ~tuder, t II Ent i ty  Type fo r  BDUIS (BRCHE,KO, BBLLBRD .
.
.
.
)1 ins t ructor l  IF igure  2: Init ial  Acqu is i t ionsBased upon the ans~crs to the questionsdescribed above, a small number of follow-upquestions, mostly unrelated to the subject of thispaper, will be asked.
For example, the system willpropose its best guess as to the morphological variantsof nouns, verbs, and other words for the user toconfirm or correct.6.
Intermediate CustomizationsHaving learned about each physical relation.TELI  asks for information which, though not neededimmediately,  is either (a) more simply obtained at theoutset, in a context relevant to its semantics, than at alater, arbitrary point, or (b) acquirable collectivelv.thus preventing several subequent acquisitions.Unlike the initial acquisitions described in Section 5,intermediate customizations could be excised from thesystem without any loss in processing ability.
We nowsummarize three forms of intermediatecustomizations, the last of which may be requested bythe user at any time.
Allowing users to ask for theother forms as well would be a simple matter.First, the system will ask which columns containvalues that either correspond to or are themselvesEnglish modifiers.
In Figure 2-a, the values 'T'through "G" in the "class" column might correspond(respectively) to "freshman" through "graduatestudent", in which case acquisitions might continue as23suggested in Figure 3.
From this information, thesystem constructs a definition for each user-definedmodifier; for example the internal definition of"sophomore" will be((sophomore noun student) ((class p-noun) = 2))A second intermediate acquisition, carried outsubject to user confirmation, involves the acceptabil ityof hypothesized syntax and semantics for (a) phrasesbased on "of", (b) phrases built around "have", "with".and "in", and (c) noun-noun phrases.
In deciding whatcase frames to propose.
TEL I  considers theinformation it has already acquired about simplefunctional ("of") relationships.A third form of intermediate acquisitioninvolves the system's invitation for the user to givelexical and syntactic information for one or moreuser-defined categories, namely titles, adjectives.common nouns, noun modif iers,  prepositions, andverbs.
For example,  the user might specify sixadjectives and the entities they modify, followed byfour or five verbs and their associated case frames.and so forth.7.
On-Line CustomizationIn general,  definitions are supplied to TEL lwhenever (a) an undefined modif ier is encounteredduring the processing of an English input, or (b) theuser asks to supply or modify a definition.
In eachcase, the same methods are available for makingdefinitions, and are independent of the modif ier typebeing defined.
When creating or modifying ameaning, users are presented with information asshown in Figure 4-a; upon asking to "add a constraint",they are given the menu shown in Figure 4-b.Multiple "constraints" appearr ing in a semanticspecification are presently presumed to be conjoined.INh, ich, columns contain (er, coded) Engli:mh ~,3r,ds?SIUDEMT (BILL, DOUG, .
.
. )
= \[\]SSM (iii-22-3333, 12:3-4J-6789, .
.
. )
\ [ \ ]CLASS ( i ,  2 .
.
.
.  )
\ [ \ ]RDVIS (BACHEMK0, BALLARD, .
.
. )
\ [ \ ]Abort  \ [ \ ]  Return \[\]l Uords  assoc ia ted  w i th  the  CLASS va lue  1 :  fre~hmar,I Uords assoc ia ted  w i th  the  CLASS va lue  G: 9raduatelModi f ' ie rs  in CLASS Ad, iect lve Mounmod HounFRESHMRH (i) \[\] \[\] \[\]SOPHOMORE (2) \ [ \ ]  \ [ \ ]  \ [ \ ]JUMIOR (3) \ [ \ ]  \[\] \[\]SEMIOR (4) 0 \[\] \[\]GRADUATE (g) \ [ \ ]  \ [ \ ]  \ [ \ ]Return \ [ \ ]Figure 3: \[l)termediate AcquisitionsSemantic Spec i f i ca t ionAd jec t ive :  FILE is LARGE\[ Sample Usa.qe: Sa.qe is LARGE \]the LENGTH of Sage ::-- 380. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
(~dd a constraint)==================================\[ retur'n \]Def ine  t i l e  semant ics  o fVerb  Phrase :  TRAIL LEADS TO MOUNTAIIqby  .
.
.Henu SelectionEn91istn(lik:e) Re:fercnce:Database Refet'encesgorr0vAng from an E?istin9 l'leardrbg=======================================\[ ret.urn \]Figure 4: Top-Level Semantics MenusAs suggested in Figure 4-a and below,definitions are made in terms of sample values, whichthe system treats as formal parameters.
In this way weavoid the problem of defining a phrase two or more ofwhose case slots may be fi l led by the same type ofentity (cf.
"a student is a classmate of a student if ...").To assure that any domain value may appear as aconstant, the user is able to alter the system's choiceof sample names at any time.7.1 Specification at the Database LevelAs noted in Section 3, semantic specifications atthe database level are primit ive but useful.
As shownin Figure 5, a database level specif ication comprises(a) a relation, possibly arr ived at via a user-definedjoin, and (b) references to columns that correspond tothe parameters of the phrase whose semantics is beingdefined.
In many cases, the system can utilize itscolumn type information, acquired as described inSection 5, to predict both the relation to be used (orpair of relations for joining) and the appropriatecolumns to join over, in which case the menu(s) thatare presented will contain boldface selections for theuser to confirm or alter.7.2 Specification by MenuIn our previous experience with LDC, we foundthat a large variety of meanings could be defined by apredicate in which the result of some function iscompared using some relational operator to a specifiedbenchmark value.
In TEL l .
we provide anenhancement to this scheme where definitions (a) mayinvolve more than one argument.
(b) may containmore than one function reference, and (c) areacquired in menu form.
The current internalrepresentat ion of a menu specif ication is a triple ofthe form suggested by24Which  re la t ion  gives tile meanin( j  o fHE IGHT o f  MOUNTAINHOUNT,qlNS: N,ql,iE, ELEL,,',qTION, P IAP-"~-~C,qI,1PSITES: SITE, C,qP,qCITY, TYPE.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.\[Join TI.~'O Relations\]= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\[ ret, urn \]To f ind  the HEIGHT of  a MOUHTRIM:+ Which ,:olumr~ 9ires MOUMTFIIH: NAME ELEVATION MAPWhich column 9i'v'e:5 HEIGHT: NAME ELEVATION MAPMOUHTAIMS: \ [ tF I I ' IE  (NASHIHGTOM, ADAMS, .
.
.
)ELEUFITIOM (1917, 1768, .
.
.
)MAP ( 6, 6 .
.
.
.
)E>:it \ [ \ ]Figure 5: Database Specification<spec> --> <term> <relop> <term><term> --> <atom> \] <func> ( <atom> )<atom> --> <constant> I <parameter><relop> --> = I<\ [< = I>1>- - I -=An example of how menu semantics operates is givenin Figure 6.
When a semantics menu first appears, its"Function" field contains a list of all functions knownto apply to at least one of the entities that thedefinition relates to.
This reduces the number ofkeystrokes required from the user and.
moreimportantly, helps guard against an inadvertentprol i feration of concept names.7.3 English and English-Like SpecificationsIn addition, to the database and menu schemesjust described, users may supply definitions in terms ofEnglish already known to the system.
Someadvantages to this are that (1) definitions may bearbitrari ly complex, l imited only by the coverage ofthe underlying syntactic component, and (2) users willimplicitly be learning to supply semantics at the sametime they learn to use the NLP itself.
Somedisadvantages are (1) a user might want to definesomething that cannot be paraphrased within thebounds of the grammatical coverage of the system,and (2) unless optimizations are carried out,references to user-defined concepts may entailinefficient processing.An alternative to English specification, whichfunctions similarly from the user's standpoint, is toprovide for "English-like" specifications in which anexpression supplied by the user is translated by somepattern-matching algorithm different from.
andprobably less sophisticated than.
the process involvedin actual English parsing.
The primary advantage ofEnglish-like specification, over English specification,is that translations into internal form can be moreefficient, since definitions or parts of definitions willbe handled on a case by case basis.
One probabledisadvantage is that the scheme will be less general, interms of definable concetps, and perhaps "spotty" interms of what it makes available.In TELI ,  both English and English-likespecification are done in terms of sample domainvalues, which are treated as formal parameters.
Anexample appears in Figure 7.
In the currentimplementation, English-like specifications include (a)any definition definable by menu, and (b) definitionsthat involve (possibly negated) adjective or nounreferences.
As of this writing, only Englishspecifications that involve no nested parameterreferences can be processed.7.4 Specification by BorrowingIn addition to whatever mechanisms an NLsystem specifically provides for semantic acquisitions,it is reasonable to allow users to define one meaningdirectly in terms of another (in addition to indirectdependence, as in the case of English specification).In TELI ,  users may ask to "borrow" from an existingmeaning at any time.
As shown in Figure 8, thesystem responds by finding all current items defined interms of all or some of the parameters (i.e.
entities) ofthe item for which the borrowing is being done.
Thisassures that the entire borrowed meaning can bemodif ied to apply to the item being defined.
Afterbeing copied, a borrowed meaning may be edited justas though it had been entered from scratch.Adject ive:  FILE is LFIRGE\[ Sample Usage: Sage is  LFIRGE \]Function: CREATION-DATE LEN6TH OWNER (none)other: MILRr9ument: Sageother: MILRelat ion:  != < <= > >=Funct ion:  CREATION-DATE LENGTH OWNER (none)other: MILFlrgu~ent: 300 Sageo ther :  HILRetain th is  de f in i t ion :  Yes NoE.-:.
i t \ [ \ ]Figure 6: Menu Specificationtk, e height of  adams is 9rearer thar, 4B001Adjective: MOUNTAIN i s  TALL\[ SaBple Usage: Rdans i s  IRLL \]I ype  an Eng l i sh ( l i ke )  ReferenceFigure 7: English-like Specification25Is t i l e  mean ing  o fSTUDENT is ADVANCEDre la ted  to  one o f  the  fo l low in .q?STUDENT is a FRESHH,qNSTUDENT is a 6R,qDU,qTESTUDENT is a C,R,@UATE STUDENTSTUDENT is a JUNIORSTUDENT i:s a SENIORSTUDENT is a SOPHOPIORESTUDENT is an UNDERC, Rf~DU,qTE.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.CLflSS of STUDENT\[ return\]Figure 8: Borrowing a Meaning8.
Relation to Similarly Motivated SystemsAt the most abstract level, our approach totransportability is unusual in that we have begun bybuilding a moderately sophisticated NLP'which, fromthe outset, fundamentally includes replete customizationfacilities.
This contrasts with other efforts which havefirst built, perhaps over a period of several years, ahighly sophisticated system, then sought to incorporatesome customization features.
Our work is alsodistinctive, though perhaps less so.
in seeking to allowfor customization by end users, as opposed to (say) adatabase administrator (cf.
Thompson and Thompson,1975, 1983, 1985; Johnson, 1985).Some of the systems which, like TEL1, seek toprovide for user customization within the context ofdatabase query are ASK (Thompson and Thompson1983, 1985).
formerly REL (Thompson and Thompson,1975).
from Caltech; INTELLECT, formerly Robot(Harris, 1977), marketed by Artificial IntelligenceCorporation; IRUS (Bates and Bobrow, 1983; Bates.Moser, and Stallard 1984), from BBN Laboratories;TQA (Damerau, 1985).
formerly REQUEST (Plath,1976), from IBM Yorktown Heights; TEAM (Grosz.1983; Grosz et al 1985).
from SRI International; andUSL (Lehmann, 1978), from IBM Heidleberg.
Otherhigh-quality domain-independent systems includeDATALOG (Hafner and Godden.
1985).
from GeneralMotors Research Labs; HAM-ANS (Wahlster.
1984),from the University of Hamburg; and PHLIQA(Bronnenberg et al 1978-1979).
from Philips Research.We now provide a comparison of TELI'scustomization strategies with those of the TEAM,IRUS, TQA, and ASK systems (other comparisonswould also have been instructive, time and spacepermitting).
Although we have recently spoken withat least one designer of each of these systems (see theAcknowledgements), it is possible that, in addition tointended simplifications, we may have overlooked ormisunderstood certain significant, perhapsundocumented, features, in which case we apologizeto the reader.
Also, we note that our remarks areprincipally concerned with the goals and theapproaches of various projects, and should not beviewed as commenting on the accomplishments oroverall quality of TELl or any other system.8.1 A Comparison with TEAMBoth TEAM and TELI represent English-language interfaces that have been applied to severalmoderately complex relational database domains.Each system provides for a variety of customizationsby non-natural language experts, though neithersystem has claimed success with actual users in eithercustomization or English processing mode.
In terms ofmethod, each system obtains (among other things)information about each column of each relation(table) of the database.
We proceed to point out someof the more significant differences between theprojects, as suggested by Grosz et al(1985) andindicated by Martin (1986).To begin with, TEAM incorporates a morepowerful natural language processor than does TELl,with provisions for quantifiers, simple pronouns,elaborate comparative forms, limited forms ofconjunction, and numerous maller features.
Its "sorthierarchy" provides a taxonomy more general thanthat of TELI.
It also incorporates disambiguationheuristics which seek to obviate the need for users toprovide definitions for some phrase types (e.g.prepositional phrases based on "on", "from", "with",and "in"), and its preparations to deal with time andplace references are without counterpart in TELI.On the other hand, the customization featuresof TELl appear to offer greater sophistication, andsometimes more power, than the respectivecustomization features of TEAM.
In terms ofsophistication, TELI always offers multiple ways ofacquiring information, provides the ability to examineand borrow existing definitions, and is able to invokethe appropriate knowledge acquisition module whenmissing lexical, syntactic, or semantic information isrequired.Copncerning definitional power, TELlgenerally provides for more complex definitions ofwords and phrases than does TEAM, as described inSections 5-7.
For example, whereas the SRI systemtypically requires a verb to map into some explicit orvirtual relation (e.g.
a join of explicit relations), TELlalso allows an arbitrary number of properties ofobjects to be used in definitions (e.g.
an old employeeis one hired before I980.
or an employee admires amanager that works more hours than she does).In TEAM, "acquisition is centered around therelations and fields in the database".
In contrast,TELI provides several customization modes, asdescribed in Section 3, and discourages low-leveldatabase specifications.26In contrast to the principles we espoused forTELI  in Section 3, TEAM couples its methods ofacquisition with the type of modifier being defined.For example, when seeing a "feature field", whichcontains exactly two distinct values, the system asksfor "positive adjectives" and "negative adjectives"associated with these values (e.g.
"volcanic" is apositive adjective associated with the database value"Y").
In TEL1, these relationships arise as a specialcase of the acquisitions hown in Figures 3.6,  and 7b.An interesting similarity between TEAM andTEL I  is that each provides for English(like)definitions.
For example.
TEAM might be told that "avolcano erupts", from which it infers that a mountainerupts just in case it is a volcano.8.2 A Comparison with IRUSAnother recently developed facilitiy to allowuser customizations of a database front-end isrepresented by the IRACQ component of the IRUSsystem (Ayuso and Weischedel, 1986).
In addition toits practical value, IRACQ is intended as a vehiclethat permits experimental work with sophisticatedknowledge representation formalisms.IRACQ is similar to TEL I  in shielding the userfrom the layout of the underlying data files.
Anothersimilarity is that each system accepts case framespecifications in English-like form.
but IRACQ allowsproper nouns as well as common nouns to be used.Thus.
a user might suggest he case frame of the verb"write" by saying "Jones wrote some articles".
SinceIRUS provides for quite general taxonomicrelationships among defined concepts (e.g.
nouns),IRACQ proceeds to ascertain which of the possiblyseveral classes that "Jones" belongs to is the mostgeneral one that can act as the subject of "write".One important difference between TELI  andIRACQ is that IRUS distinguishes conceptualinformation, which resides within its KR framework,from the linguistic information that characterizes theEnglish to be used.
Thus, while IRACQ supportsdefinitions in terms of an arbitrary number ofpredicates, as does TELl ,  it assumes that any conceptsneeded to define a new language item have alreadybeen specified.
These representations, acquired by aseparate module called KREME,  involve the KL-ONEnotions of "concept" and "relation", which are similarto, but more sophisticated than, the 1- and 2-placepredicates that come into existence during a sessionwith TELI .At present, IRACQ allows users to define caseframe information for verb phrases, prepositionalphrases, and noun phrases involving "of".
Itstreatment of prepositional phrases is very much likethat of TEL I  in that the head noun being modified isconsidered part of the the noun-preposition-nountriple for which a definition is beine acquired (cf.Section 4,1).
Definitions for individual words (e.g.nouns and adjectives) are not supported but are beingconsidered for future versions of the system, as arefacilities that enable the system to inform the user ofexisting predicates that might be useful in defining anew language item.
This facility will be similar inspirit to TELI 's  provisions for "borrowing" definitions.as described in Section 7.4.8.3 A Comparison with TQAUnlike most efforts at transportability, TQAhas been designed as a working prototype, capable ofbeing customizated for complex database applicationsby actual users.
The primary responsibility of thecustomization module is to acquire information thatrelates language concepts, e.g.
subject of a given verb,to the columns of the database at hand.Like TELI ,  TQA avoids having to copy alldatabase values into the lexicon by constructing"shape" information to recognize numbers and similarpatterns.
For example, the system might deduce thatall database values referring to a department are ofthe form "letter followed by two digits", which allowsfor valuable disambiguations during parsing.
Thus, ina database where employees manage projects andsupervisors manage departments, the question "Whomanages K34?"
can be understood to be asking aboutsupervisors without having to find "K34" in either thelexicon or the database.A related problem, which TQA addresses moresquarely than most systems (including TELI) ,  concernsthe appearance and possible equivalence of databasevalues.
For example.
"vac lnd" might indicate "vacantland", "grn" and "green" might be usedinterchangeable, and so forth.
Many practicalapplications require that these sorts of issues beaddressed in order for a user to obtain reliableinformation.Another useful feature concerns the acquisitionof information that enables non-trivial outputformatting.
In simple cases, a database administratormight want nine-digit values appearing in columnsassociated with social security numbers to be printedwith dashes at the appropriate points (e.g.
123456789becomes 123-45-6789), In more complicated situations,values might actually need to be decoded, so that 0910becomes "vacant land".
This provision for decoding issimilar to to the form of intermediate acquisitionshown in Figure 3, though here it is being used foropposite effect.278.4 A Comparison with ASKThe current ASK prototypes, which run on Sun,Vax, and HP desktop systems, are derived fromearlier work on the REL system, which itself derivesfrom work on the DEACON project, which stemsfrom the early 1960's.
Unlike most recent efforts,which have sought to incorporate customizationfeatures into an existing more-or-less ingle-domainsystem, the work with REL, the "Rapidly ExtensibleLanguage", fundamentally included definitionalcapabilities as early as 1969.To begin with, ASK provides quite generalcustomization facilities, allowing English definitions atleast as sophisiticated as those outlined in Section 7.3.An example is "ships 'carry' coal to Oslo if there is ashipment whose carrier is ships, type is coal anddestination is Oslo".
Arithmetic facilities are alsoprovided, e.g.
"area equals length times beam".The most distinguishing features of ASK,however, derive from the designers' desire toincorporate natural language technology into anintergrated information management system, ratherthan provide simple sentence-by-sentence databaseretrieval.
One feature allows ASK to be connected toseveral external database systems, drawing informationfrom each of them in the context of answering a user'squestion.
A second feature allows a user to providebulk data input.
This begins with the interactivespecification of a record type, followed by informationused to populate the newly created relation.AcknowledgementsThe current TELI  system derives from work onthe LDC project, which was carried out at DukeUniversity by John Lusth and Nancy Tinkham.
Inconverting the NL portions of LDC to operate in ourpresent context, we have engaged in frequentdiscussions with several persons, including JoanBachenko, Alan Biermann, Marcia Derr, GeorgeHeidorn, Mark Jones.
and Mitch Marcus.
We alsowish to thank Paul Martin of SRI, Damaris Ayuso andRalph Weischedel of BBN, Fred Damerau of IBMYorktown Heights, and Fred Thompson of Caltech,for their willingness to answer a number of questionsthat helped us to formulate the comparisons given inSection 8.
Finally, we wish to thank Marcia Derr formany useful comments on a draft of our paper.ReferencesAyuso, D. and Weischedel, R. PersonalCommunication, April 1986.Ballard, B.
"A 'Domain Class' ApprOach toTransportable Natural Language Processing",Cognition and Brain Theory 5, 3 (1982), 269-287.Ballard, B.
"The Syntax and Semantics of User-Defined Modifiers in a Transportable NaturalLanguage Processor", Proc.
Coling-84, StanfordUniversity, July 1984, 52-56.Ballard, B.
"User Specification of Syntactic CaseFrames in TELI,  A Transportable, User-CustomizedNatural Language Processor", Proc.
Coling-86, Bonn,West Germany, August, 1986.Ballard, B., Lusth, J., and Tinkham, N. "LDC-I: ATransportable Natural Language Processor for OfficeEnvironments", ACM Transactions on OfficeInformation Systems 2, 1 (1984), 1-23.Ballard, B. and Tinkham, N. "A Phrase-StructuredGrammatical Framework for Transportable NaturalLanguage Processing", Computational Linguistics 10, 2(1984), 81-96.Bates, M. and Bobrow, R. "A Transportable NaturalLanguage Interface for Information Retrieval", Proc.6th Int.
ACM SIGIR Conference, Washington, D.C.,June 1983.Bates, M., Moser, M. and Stallard, D. "The IRUSTransportable Natural Language Interface", Proc.First Int.
Workshop on Expert Database Systems,Kiawah Island, October 1984, 258-274.Bronnenberg, W., Landsbergen, S., Scha, R.,Schoenmakers, W. and van Utteren, E. "PHLIQA-1,a Question-Answering System for Data-BaseConsultation in Natural English", Philips tech.
Rev.
38(1978-79), 229-239 and 269-284.Damerau,- F. "Problems and Some Solutions inCustomization of Natural Language Database FrontEnds", ACM Transactions on Office InformationSystems 3, 2 (1985), 165-184.Grosz, B.
"TEAM: A Transportable NaturalLanguage Interface System", Conf.
on Appl ied NaturalLanguage Processing, Santa Monica, 1983, 39-45.Grosz, B., Appelt, D., Martin, P. and Pereira, F."TEAM: An Experiment In The Design OfTransportable Natural-Langauge Interfaces", ArtificialIntelligence, in press.Hafner, C. and Godden, C. "Portability of Syntax andSemantics in Datalog".
ACM Transactions on OfficeInformation Systems 3.2 (1985), 141-164.28Harris, L. "User-Oriented Database Query with theROBOT Natural Language System", Int.
Journal ofMan-Machine Studies 9 (1977), 697-713.Johnson, T. Natural Language Computing: TheCommercial Applications.
Ovum Ltd, London.
1985.Lehmann.
H. "Interpretation of natural language inan information system", IBM J. Res.
Dev.
22, 5 (1978),pp.
560-571.Martin, P. Personal communication, March 1986.Tennant, H. "Experience With the Evaluation ofNatural Language Question Answerers", Int.
J. Conf.on Artificial Intelligence, 1979, pp.
275-281.Thompson, F. and Thompson, B.
"Practical NaturalLanguage Processing: The REL System as Prototype",In Advances in Computers, Vol.
3, M. Rubinoff and M.Yovits, Eds., Academic Press, 1975.Thompson, B. and Thompson, F. "Introducing ASK:A Simple Knowledgeable System", Conf.
on AppliedNatural Language Processing, Santa Monica, 1983.
17-24.Thompson, B. and Thompson.
F. "ASK IsTransportable in Half a Dozen Ways", ACM Trans.
onOffice Information Systems 3, 2 (1985), 185-203.Wahlster, W. "User Models in Dialog Systems",Invited talk at Coling-84, Stanford University, July1984.29
