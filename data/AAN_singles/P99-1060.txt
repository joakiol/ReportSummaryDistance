An Earley-style Predictive Chart ParsingMethod for Lambek GrammarsMark HeppleDepartment of Computer Science, University of Sheffield, Regent Court,211 Portobello Street, Sheffield S1 4DP, UK \[heppleOdcs .shef  .ac.uk\]Abst rac tWe present a new chart parsing method forLambek grammars, inspired by a method for D-Tree grammar parsing.
The formulae of a Lam-bek sequent are firstly converted into rules ofan indexed grammar formalism, which are usedin an Earley-style predictive chart algorithm.The method is non-polynomial, but performswell for practical purposes - -  much better thanprevious chart methods for Lambek grammars.1 In t roduct ionWe present a new chart parsing method forLambek grammars.
The starting point forthis work is the observation, in (Hepple, 1998),of certain similarities between categorial gram-mars and the D-Tree grammar (DTG) formal-ism of Rambow et al (1995a).
On this basis,we have explored adapting the DTG parsing ap-proach of Rambow et al (1995b) for use withthe Lambek calculus.
The resulting method isone in which the formulae of a Lambek sequentthat is to be proven are first converted to pro-duce rules of a formalism which combines ideasfrom the multiset-valued linear indexed gram-mar formalism of Rainbow (1994), with theLambek calculus pan labelling scheme of Mor-rill (1995), and with the first-order compilationmethod for categorial parsing of Hepple (1996).The resulting 'grammar' is then parsed using anEarley-style predictive chart algorithm which isadapted from Rambow et al (1995b).2 The  Lambek Ca lcu lusWe are concerned with the implicational (or'product-free') fragment of the associative Lam-bek calculus (Lambek, 1958).
A natural deduc-tion formulation is provided by the followingrules of elimination and introduction, which cor-respond to steps of functional application andabstraction, respectively (as the term labellingreveals).
The rules are sensitive to the order ofassumptions.
In the \[/I\] (resp.
\[\I\]) rule, \[B\] in-dicates a discharged or withdrawn assumption,which is required to be the rightmost (resp.
left-most) of the proof.A/B  :a B :b /EB:b  B \A  aA :  (ab) A :  (ab)?
....\[B: v\] \[B: v\].
:.A:a  A :a/I \IA/B  : Av.a B \A  : Av.a\E(which) (mary) (ate)rel/(s/np) np (np\s)/np \[np\] /Enp\s \ESrelThe above proof illustrates 'hypotheticalreasoning', i.e.
the presence of additional as-sumptions ('hypotheticals') in proofs that aresubsequently discharged.
It is because of thisphenomenon that standard chart methods areinadequate for the Lambek calculus - -  hypo-theticals don't belong at any position on thesingle ordering over lexical categories by whichstandard charts are organised.
1 The previ-ous chart methods for the Lambek calculusdeal with this problem in different ways.
Themethod of K6nig (1990, 1994) places hypothet-icals on separate 'minicharts' which can attachinto other (mini)charts where combinations are1In effect, hypotheticals belong on additional subor-derings, which can connect into the main ordering ofthe chart at various positions, generating a branching,multi-dimensional ordering scheme.465possible.
The method requires rather com-plicated book-keeping.
The method of Hepple(1992) avoids this complicated book-keeping,and also rules out some useless ubderivationsallowed by Khnig's method, but does so atthe cost of computing a representation of allthe possible category sequences that might betested in an exhaustive sequent proof search.Neither of these methods exhibits performancethat would be satisfactory for practical use.
23 Some Pre l iminar ies3.1 First-order Compilation forCategorial ParsingHepple (1996) introduces a method of first-order compilation for implicational linear logic,to provide a basis for efficient heorem provingof various categorial formalisms.
Implicationallinear logic is similar to the Lambek calculus,except having only a single non-directional im-plication --o.
The idea of first-order compil-ation is to eliminate the need for hypotheticalreasoning by simplifying higher-order formulae(whose presence requires hypothetical reason-ing) to first-order formulae.
This involves ex-cising the subformulae that correspond to hy-potheticals, leaving a first-order esidue.
Theexcised subformulae are added as additional as-sumptions.
For example, a higher-order formula(Z -o Y) --o X simplifies to Z+ (Y -o X), allow-ing proof (a) to be replaced by (b):(a) \[Z\] Z-oW W-oY  (Z -oy) -oXWYZ--oYXY--oX (b) Z Z--o W W--o YWYXThe method faces two key problems: avoidinginvalid deduction and getting an appropriate se-2Morrill (1996) provides asomewhat different tabularmethod for Lambek parsing within the proof net deduc-tion framework, in an approach where proof net check-ing is made by unifying labels marked on literals.
Theapproach tabulates MGU's for the labels of contiguoussubsegments of a proof net.mantics for the combination.
To avoid invaliddeduction, an indexing scheme is used to en-sure that a hypothetical must be used to de-rive the argument of the residue functor fromwhich was excised (e.g.
Z must be used toderive the argument Y of Y--o X, a conditionsatisfied in proof (b).
To get the same se-mantics with compilation as without, the se-mantic effects of the introduction rule are com-piled into the terms of the formulae produced,e.g.
(Z -o Y) --o X : w gives Z : z plus Y --o X :Au.w(Az.u).
Terms are combined, not usingstandard application/fl-reduction, but ratheran operation Ax.g + h =~ g\[h//x\] where avariant of substitution is used that allows 'ac-cidental' variable capture.
Thus when Y--o Xcombines with its argument, whose derivationincludes Z, the latter's variable becomes bound,e.g.
lu .w( lz .u)  + x(yz) =~ w( Iz .x(yz))3.2 Multiset-valued Linear IndexedGrammarRambow (1994) introduces the multiset-valuedlinear indexed grammar formalism ({}-LIG).
In-dices are stored in an unordered multiset rep-resentation (c.f.
the stack of conventional lin-ear indexed grammar).
The contents of themultiset at any mother node in a tree is dis-tributed amongst its daughter nodes in a lin-ear fashion, i.e each index is passed to pre-cisely one daughter.
Rules take the formA0\[m0\]-+ Al\[ml\]...An\[m,~\].
The multiset ofindices m0 are required to be present in, andare removed from, the multiset context of themother node in a tree.
For each daughter Ai,the indices mi are added into whatever otherindices are inherited to that daughter.
Thus,a rule A\[\] --+ B\[1\] C\[\] (where \[\] indicates anempty multiset) can license the use of a ruleDIll ~ a within the derivation of its daugh-ter BIll, and so the indexing system allows theencoding of dominance relations.4 A New Char t  Pars ing  Method forLambek Grammars4.1 Lambek to SLMG ConversionThe first task of the parsing approach is to con-vert the antecedent formulae of the sequent obe proved into a collection of rules of a form-alism I call Span Labelled Multiset Grammar(SLMG).
For digestibility, I will present he con-version process in three stages.
(I will assume466Method:(A:(i-j)) p = A:( i - j )  where A atomic(A/B:(h-i))P = (A:(h-j))P / (B:(i- j)) ~(B\A:(h-i)) p = (B:(j-h)) ~ \ (A:(j-i)) pwhere j is a newvariable/constantaspis  +/ -Example:(X/(Y/Z):(O-1)) + = X : (O-h) / (Y : (1 -k ) /Z : (h -k ) )(w:(1-2))+ = w:(1-2)( (W\Y) /Z : (2 -3 ) )  + = (W: ( i -2 ) \Y : ( i - j ) ) /Z : (3 - j )Figure 1: Phase 1 of conversion (span labelling)that in any sequent F ~ A to be proved, thesuccedent A is atomic.
Any sequent not in thisform is easily converted to one, of equivalenttheoremhood, which is.
)Firstly, directional types are labelled withspan information using the labelling schemeof Morrill (1995) (which is justified in rela-tion to relational algebraic models for the Lam-bek calculus (van Benthem, 1991)).
An ante-cedent Xi in X1 .
.
.Xn  =~ X0 has basic span(h- i )  where h -- (i - 1).
The labelled for-mula is computed from (Xi : (h- i ) )  + using thepolar translation functions shown in Figure 1(where /~ denotes the complementary polarityto p).3 As an example, Figure 1 also showsthe results of converting the antededents ofX/ (Y /Z) ,  W, (W\Y) /Z  =~ X (where k is a con-stant and i , j  variables).
4The second stage of the conversion is adap-ted from the first-order compilation method ofHepple (1996), discussed earlier, modified tohandle directional formulae and using a mod-ified indexation scheme to record dependencies3The constants produced in the translation corres-pond to 'new' string positions, which make up the addi-tional suborderings on which hypotheticals are located.The variables produced in the translation become instan-tiated to some string constant during an analysis, fixingthe position at which an additional subordering becomes'attached to' another (sub)ordering.4The idea of implementing categorial grammar as anon-directional logic, but associating atomic types withstring position pairs (i.e.
spans) to handle word order,is used in Pareschi (1988), although in that approach allstring positions instantiate to values on a single ordering(i.e.
integers 0 - n for a string of length n), which is notsufficient for Lambek calculus deductions.between residue formulae and excised hypothet-icals (one where both the residue and hypothet-ical record the dependency).
For this proced-ure, the 'atomic type plus span label' units thatresult from the previous stage are treated asatomic units.
The procedure T is defined by thecases shown in Figure 2 (although the method isperhaps best understood from the example alsoshown there).
Its input is a pair (T, t), T a spanlabelled formula, t its associated term.
5This procedure simplifies higher-order formu-lae to first-order ones in the manner already dis-cussed, and records dependencies between hy-pothetical and residue formulae using the in-dexing scheme.
Assuming the antecedents ofour example X/ (Y /Z) ,W,  (W\Y) /Z  ~ X ,  tohave terms 81,82,83 respectively, compilationyields results as in the example in Figure 2.
Thehigher-order X/ (Y /Z)  yields two output formu-lae: the main residue X/Y  and the hypotheticalZ, with the dependency between the two indic-ated by the common index 1 in the argumentindex set of the former and the principal indexset of the latter.
The empty sets elsewhere in-dicate the absence of such dependencies.The final stage of the conversion processconverts the results of the second phrase intoSLMG productions.
The method will be ex-plained by example.
For a functor suchas B \ ( ( (A \X) /D) /C) ,  we can easily pro-ject the sequence of arguments it requires:5Note that the "+" of (A + F) in (TO) simply pairstogether the single compiled formula A with the set F ofcompiled formulae, where A is the main residue of theinput formula and F its derived hypotheticals.467Method:(Tla)Q-lb)(~-2a)(v2b)(v3a)T ( (T , t ) )=AUF where T ( (O ,T , t ) )=A+FT((m,X/Y,t)) = T((m,X/(Y:O),t)) where Y has no index setas for (Tla) modulo directionality of connectiveT((m, Xa/(Y:ml), t)) = (m, X2/(Y:ml), Av.s) + Fwhere Y atomic, T((m, X1, (tv))) = (re, X2, s) + F, v a fresh variableas for (T2a) modulo directionality of connectivev((m,X/((Y/Z):rni),t)) = A + (B U F U A)where w, v fresh variables, i a fresh multiset index, m2 = i U rnlv((m, X/(Y:m2), Aw.t(Av.w))) = A + F, T((i, Z, v)) = B + A(~'3b)-(T3d) as for (T3a) modulo directionality of,connectivesExample:T((X:(O-h)/(Y:(1-k)/Z:(h-k)), si)) =T((W:(1--2),s2)) =~(((W:( i -2)\Y:( i - j ) ) /Z:(3- j ) ,  s3)) =(0, X:(O,h)/(Y:(1-k):{1}), Au.sl(Az.u))({1},Z:(h-k)),z) }(q}, W:(1-2) ,  s2)(~, ( (W:( i-2):O) \ Y:( i - j )  ) / ( Z:( 3-j):O), AvAw.
( sa v w) )Figure 2: Phase 2 of conversion (first-order compilation)A,B ,B \ ( ( (A \X) /D) /C) ,C ,D  =~ X.
If thefunctor was the lexical category of a word w, itmight be viewed as fulfilling a role akin to a PSrule such as X --+ A B w C D. For the presentapproach, with explicit span labelling, there isno need to include a rhs element to mark theposition of the functor (or word) itself, so thecorresponding production would be more akinto X -+ A B C D. For an atomic formula, thecorresponding production will have an emptyrhs, e.g.
A --4 0 .6The left and right hand side units of SLMGproductions all take the form Aim\] ( i - j ) ,  whereA is an atomic type, m is a set of indices (ifm is empty, the unit may be written A\[\](i-j)),6Note that 0 is used rather than e to avoid the sug-gestion of the empty string, which it is not - -  matters todo with the 'string' are handled solely within the spanlabelling.
This point is reinforced by observing that the'string language' generated by a collection SLMG pro-ductions will consist only of (nonempty) sequences of0's.
The real import of a SLMG derivation is not its ter-minal Yield, but rather the instantiation of span labelsthat it induces (for string matters), and its structure (forsemantic matters).and ( i - j )  a span label.
For a formula (m, T, t)resulting after first-order compilation, the rhselements of the corresponding production cor-respond to the arguments (if any) of T, whereasits lhs combines the result type (plus span) ofT with the multiset m. For our running ex-ample X/(Y/Z) ,  W, (W\Y) /Z  =~ X, the formu-lae resulting from the second phase (by first-order compilation) give rise to productions asshown in Figure 3.
The associated semanticterm for each rule is intended to be applied tothe semantics if its daughters in their left-to-right order (which may require some reorderingof the outermost lambdas c.f.
the terms of thefirst-order formulae, e.g.
as for the last rule).A sequent X1 .
.
.Xn  =~ Xo is proven if wecan build a SLMG tree with root X0\ [ \ ] (0-n)  inwhich the SLMG rules derived from the ante-cedents are each used precisely once, and whichinduces a consistent binding over span variables.For our running example, the required deriva-tion, shown below, yields the correct interpret-ation Sl(AZ.S3 z s2).
Note that 'linear resourceuse', i.e.
that each rule must be used precisely468Example:(0, X:(O-h)/(Y:(1-k):{1}), Au.sl(Az.u))({1}, Z:(h-k)) ,  z)(O, W:(1-2), s2)X\[\](0-h) --+ Y\[1\](1-k)Z\[1\ ] (h-k)  0 : zW\ [ \ ] (1 -2 )  0 : s2(0, ( (W:(i-2):O)\Y:(i- j) )/( Z:(3-j):O), AvAw.
(s3 v w))Y\[\]( i - j )  --+ W\[\]( i -2) Z\[ \ ] (3- j )  ::  u.sl( z.u)w v.(s3 vFigure 3: Phase 3 of conversion (converting to SLMG productions)once, is enforced by the span labelling schemeand does not need to be separately stipulated.Thus, the span (0-n) is marked on the root ofthe derivation.
To bridge this span, the mainresidues of the antecedent formulae must allparticipate (since each 'consumes' a basic sub-span of the main span) and they in turn requireparticipation of their hypotheticals via the in-dexing scheme.x \ [ \ ] (o -3 )IY\[ll(1-k)w\[\](1-2) Z\[ll(3-k)I I0 04.2 The Earley-style Parsing MethodThe chart parsing method to be presentedis derived from the Earley-style DTG pars-ing method of Rambow et al (1995), andin some sense both simplifies and complicatestheir method.
In effect, we abstract from theirmethod a simpler one for Eaxley-style parsing of{}-LIG (which is a simpler formalism than theLinear Prioritized Multiset Grammar (LPMG)into which they compile DTG), and then ex-tend this method to handle the span labellingof SLMG.
A key differences ofthe new approachas compared to standard chart methods is thatthe usual external notion of span is dispensedwith, and the combination ofedges is instead re-girnented in terms of the explicit span labellingof categories in rules.
The unification of spanlabels requires edges to carry explicit bindinginformation for span variables.
We use R to de-note the set of rules derived from the sequent,and E the set of edges in the chart.
The generalform of edges is: ((ml, m2), 9, r, (A ~ F * A))where (~4 ~ F,A) E R, 0 is a substitutionover span variables, r is a restrictor set identi-fying span variables whose values are requirednon-locally (explained below), and ml, m2 aremultisets.
In a {}-LIG or SLMG tree, there isno restriction on how the multiset indices associ-ated with any non-terminal node can be distrib-uted amongst its daughters.
Rather than cash-ing out the possible distributions as alternativeedges in the predictor step, we can instead, ineffect, 'thread' the multiset hrough the daugh-ters, i.e.
passing the entire multiset down tothe first daughter, and passing any that are notused there on to the next daughter, and so on.For an edge ((ml, m2), 19, r, (A ~ F * A)), mlcorresponds to the multiset context at the timethe ancestor edge with dotted rule (,4 -+ .FA)was introduced, and m2 is the current multisetfor passing onto the daughters in A.
We call mlthe initial multiset and m2 the current multiset.The chart method employs the rules shown inFigure 4.
We shall consider each in turn.Initialisation:The rule recorded on the edge in this chart ruleis not a real one (i.e.
~ R), but serves to drivethe parsing process via the prediction of edgesfor rules that can derive X0\[\](1-n).
A success-ful proof of the sequent is shown if the com-pleted chart contains an inactive edge for thespecial goal category, i.e.
there is some edge((0,0),0,0, (GOAL\[\](,- .)
--+ h.)) E EPrediction:The current multiset of the predicting edge ispassed onto the new edge as its initial multiset.The latter's current multiset (m6) may differfrom its initial one due either to the removal ofan index to license the new rule's use (i.e.
if469Initialisation:if the initial sequent is X 1 .
.
.
X n :=~ Z 0then ((O,O),$,O,(GOAL\[\](*-*) -4.Xo\[ \](1-n)))  ?
EPrediction:ff ((ml,m2),Ol,r l ,(A\[m3\](e-f)  -+ r .
B\[m4\](g-h), A ) ?
Eand (B\[rnh\](i-j) --+ A) ?
Rthen ((m2, m6),O2,r2, (B\[m5\](g-(hO)) -~ .
(A0))) ?
Ewhere O=81+MGU((g -h) , ( i - j ) )  ; m5 Cm2Um4 ; m6 = (m2t2m4) -m5r2 = nlv(m2 \[_J m4) ; 82 = 0/(r2 U dauglnlv(A))Completer:if ((ml,rr~2),Ol,rl,(A\[m3\](f-g) --+ F .
B\[m4\](i-h),A)) E Eand ((m2, ms), 02, r2, (B\[m6\](i-j) -4 A*)) E Ethen ((ml, ms), 03, rl, (A\[m3\](f - gO)) -~ F, B\[m4\](i-j) * (A0))) E Ewhere O=01+02+MGU(h , j )  ; mhCrn2 ; m6C_m2Um4 ;03 = O/(rl U dauglnlv(A))Figure 4: Chart rulesm5 is non-empty), or to the addition of indicesfrom the predicting edge's next rhs unit (i.e.
ifma is non-empty).
(Note the 'sloppy' use of set,rather than explicitly multiset, notation.
Thepresent approach is such that the same indexshould never appear in both of two unioned sets,so there is in practice little difference.
)The line 0 = 01 + MGU((g-h),  ( i - j ) )  checksthat the corresponding span labels unify, andthat the resulting MGU can consistently aug-ment the binding context of the predicting edge.This augmented binding is used to instantiatespan variables in the new edge where possible.It is a characteristic of this parsing method,with top-down left-to-right traversal and associ-ated propagation of span information, that theleft span index of the next daughter sought byany active edge is guarenteed to be instantiated,i.e.
g above is a constant.Commonly the variables appearing in SLMGrules have only local significance and so theirsubstitutions do not need to be carried aroundwith edges.
For example, an active edge mightrequire two daughters B\[\](g-h) C\[\](h-i).
Asubstitution for h that comes from combin-ing with an inactive edge for B\[\](g-h) canbe immediately applied to the next daughterC\[\](h-i), and so does not need to be carriedexplicitly in the binding of the resulting edge.However, a situation where two occurrences ofa variable appear in different rules may ariseas a result of first-order compilation, which willsometimes (but not always) separate a variableoccurrence in the hypothetical from another inthe residue.
For the rule set of our running ex-ample, we find an occurrence of h in both thefirst and second rule (corresponding to the mainresidue and hypothetical of the initial higher-order functor).
The link between the two rules isalso indicated by the indexing system.
It turnsout that for each index there is at most one vari-able that may appear in the two rules linkedby the index.
The identity of the 'non-localvariables' that associate with each index canbe straightforwardly computed off the SLMGgrammar (or during the conversion process).The function nfvreturns the set of non-localvariables that associate with a multiset of in-dices.
The line r2 = nlv(m2 12 m4) computesthe set of variables whose values may need to470be passed non-locally, i.e.
from the predictingedge down to the predicted edge, or from aninactive edge that results from combination ofthis predicted edge up to the active edge thatconsumes it.
This 'restrictor set' is used in redu-cing the substitution 8 to cover only those vari-ables whose values need to be stored with theedge.
The only case where a substitution eedsto be retained for variable that is not in the re-strictor set arises regarding the next daughterit seeks.
For example, an active edge mightrequire two daughters B\[\](g-h) C\[1\](k-i),where the second's index links it to a hypo-thetical with span (k-h).
Here, a substitutionfor h from a combination for the first daughtercannot be immediately applied and so shouldbe retained until a combination is made for thesecond aughter.
The function call dauglnlv(A)returns the set of non-local variables associatedwith the multiset indices of the next daugh-ter in A (or the empty set if A is empty).There may be at most one variable in this setthat appears in the substitution 8.
The line82 = 8/(r2 U dauglnlv(A)) reduces the substi-tution to cover only the variables whose valuesneed to be stored.
Failing to restrict he substi-tution in this way undermines the compactionof derivations by the chart, i.e.
so that we findedges in the chart corresponding to the samesubderivation, but which are not recognised assuch during parsing due to them recording in-compatible substitutions.Completer:Recall from the prediction step that the pre-dicted edge's current multiset may differ fromits initial multiset due to the addition of indicesfrom the predicting edge's next rhs unit (i.e.
m4in the prediction rule).
Any such added indicesmust~be 'used up' within the subderivation ofthat rhs element which is realised by the com-binations of the predicted edge.
This require-ment is checked by the condition m5 C_ m2.The treatment of substitutions here is verymuch as for the prediction rule, except hat bothinput edges contribute their own substitution.Note that for the inactive edge (as for all inact-ive edges), both components of the span ( i - j )will be instantiated, so we need only unify theright index of the two spans - -  the left indicescan simply be checked for atomic identity.
Thisobservation is important to efficient implement-ation of the algorithm, for which most effort is inpractice expended on the completer step.
Act-ive edges should be indexed (i.e.
hashed) withrespect o the (atomic) type and left span indexof the next rhs element sought.
For inactiveedges, the type and left span index of the lhselement should be used.
For the completer stepwhen an active edge is added, we need only ac-cess inactive edges that are hashed on the sametype/left span index to consider for combina-tion, all others can be ignored, and vice versafor the addition of an inactive edge.It is notable that the algorithm has no scan-ning rule, which is due to the fact that the po-sitions of 'lexical items' or antecedent categor-ies are encoded in the span labels of rules, andneed no further attention.
In the (Rambow ethi., 1995) algorithm, the scanning componentalso deals with epsilon productions.
Here, ruleswith an empty rhs are dealt with by prediction,by allowing an edge added for a rule with anempty rhs to be treated as an inactive edge (i.e.we equate "() -" and ".
()").If the completed chart indicates a successfulanalysis, it is straightforward to compute theproof terms of the corresponding atural deduc-tion proofs, given a record of which edges wereproduced by combination of which other edges,or by prediction from which rule.
Thus, theterm for a predicted edge is simply that of therule in R, whereas a term for an edge producedby a completer step is arrived at by combining aterm of the active edge with one for the inactiveedge (using the special substitution operationthat allows 'accidental binding' of variables, asdiscussed earlier).
Of course, a single edge maycompact multiple alternative subproofs, and soreturn multiple terms.
Note that the approachhas no problem in handling multiple lexical as-signments, they simply result in multiple rulesgenerated off the same basic span of the chart.5 Efficiency and ComplexityThe method is shown to be non-polynomial byconsidering a simple class of examples of theform X1, .
.
.Xa - I ,a  =~ a, where each Xi isa/(a/(a\a)).
Each such Xi gives a hypotheticalwhose dependency is encoded by a multiset in-dex.
Examination of the chart reveals pans forwhich there are multiple dges, differing in their'initial' multiset (and other ways), there being471xolal(xll(ala)),xll(x21(ala)),x21(ala),ala, ala, ala, ala, ala, a xoFigure 5: Example for comparison of methodsone for edge for each subset of the indices deriv-ing from the antecedents X I , .
.
.
Xn-2, i.e.
giv-ing 2 ('~-2) distinct edges.
This non-polynomialnumber of edge results in non-polynomial timefor the completer step, and in turn for the al-gorithm as a whole.
Hence, this approach doesnot resolve the open question of the polynomialtime parsability of the Lambek calculus.
In-formally, however, these observations are sug-gestive of a possible locus of difficulty in achiev-ing such a result.
Thus, the hope for polyno-mial time parsability of the Lambek calculuscomes from it being an ordered 'list-like' sys-tem, rather than an unordered 'bag-like' sys-tem, but in the example just discussed, we ob-serve 'bag-like' behaviour in a compact encoding(the multiset) of the dependencies of hypothet-ical reasoning.We should note that the DTG parsingmethod of (Rambow et al, 1995), from whichthe current approach is derived, is polynomialtime.
This follows from the fact that their com-pilation applies to a preset DTG, giving rise toa fixed maximal set of distinct indices in theLPMG that the compilation generates.
Thisfixed set of indices gives rise to a very large,but polynomial, worst-case upper limit on thenumber of edges in a chart, which in turn yieldsa polynomial time result.
A key difference forthe present approach is that our task is to parsearbitrary initial sequents, and hence we do nothave the fixed initial grammar that is the basisof the Rambow et al complexity result.For practical comparison to the previousLambek chart methods, consider the highly am-biguous artificial example shown in Figure 5,(which has six readings).
KSnig (1994) reportsthat a Prolog implementation of her method,running on a major workstation produces 300edges in 50 seconds.
A Prolog implementationof the current method, on a current major workstation, produces 75 edges in less than a tenthof a second.
Of course, the increase in comput-ing power over the years makes the times notstrictly comparable, but still a substantial speedup is indicated.
The difference in the numberof edges uggests that the KSnig method is sub-optimal in its compaction of alternative deriva-tions.Referencesvan Benthem, J.
1991.
Language in Ac-tion: Categories, Lamdas and Dynamic Lo-gic.
Studies in Logic and the Foundations ofMathematics, vol 130, North-Holland, Ams-terdam.Hepple, M. 1992. '
Chart Parsing LambekGrammars: Modal Extensions and Incre-mentality', Proc.
of COLING-92.Mark Hepple.
1996.
'A Compilation-ChartMethod for Linear Categorial Deduction.'Proc.
COLING-96, Copenhagen.Hepple, M. 1998.
'On Some SimilaritiesBetween D-Tree Grammars and Type-LogicalGrammars.'
Proc.
Fourth Workshop on Tree-Adjoining Grammars and Related Frame-works.KSnig, E. 1990, 'The complexity of parsingwith extended categorial grammars', Proc.
o\]COLING-90.Esther K5nig.
1994.
'A Hypothetical Reas-oning Algorithm for Linguistic Analysis.
'Journal of Logic and Computation, Vol.
4,No 1.Lambek, J.
1958.
'The mathematics ofsentencestructure.'
American Mathematical Monthly65.
154-170.Morrill, G. 1995.
'Higher-order Linear LogicProgramming of Categorial Dedution', Proc.o/EA CL-7, Dublin.Morrill, G. 1996.
'Memoisation for CategorialProof Nets: Parallelism in Categorial Pro-cessing.'
Research Report LSI-96-24-R, Uni-versitat Polit~cnica de Catalunya.Pareschi, R. 1988.
'A Definite Clause Versionof Categorial Grammar.'
Proc.
26th A CL.Rambow, O.
1994.
'Multiset-valued linear indexgrammars.'
Proc.
A CL '94.Rambow, O., Vijay-Shanker, K. & Weir, D.1995a.
'D-Tree Grammars.'
Proc.
ACL-95.Rambow, O., Vijay-Shanker, K. & Weir, D.1995b.
'Parsing D-Tree Grammars.'
Proc.Int.
Workshop on Parsing Technologies.472
