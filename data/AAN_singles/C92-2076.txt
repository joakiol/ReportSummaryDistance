DIS JUNCTIVE  FEATURE STRUCTURES AS HYPERGRAPHSJEAN V~RONISGroupe Reprdsentation etTraitement des Connaissances,Centre National de la Recherche Scientifique,31, Chemin Joseph Aiguier, 13402 Marseille Cedex 09, FranceandDepartment of Computer Science, Vassar CollegePoughkeepsie, New York 12601, U.S.A.e-mail : veron is@vassar  .eduAbst ract  -- In this paper, we present a new math-ematical framework in which disjunctive featurestructures are defined as directed acyclic hypergraphs.Disjunction is defined in the feature structure domain,and not at the syntactic level in feature descriptions.
Thisenables us to study properties and specify operations interms of properties of, or operations on, hypergraphsrather titan in syntactic terms.
We illustrate theexpressive power of this framework by defining a classof disjunctive feature structures with interestingproperties (factored normal form or FNF), such asclosure under factoring, unfactoring, unification, andgeneralization.
Unification, in particular, has theintuitive appeal of preserving as much as possible theparticular factoring of the disjunctive feature structuresto be unified.
We also show that unification in the FNFclass can be extremely efficient in practical applications.1.
INTRODUCTIONIt has become common to make a distinction between alanguage for file description of feature structures andfeature structures themselves, which are seeu as directedacyclic graphs (dags) or automata (see, for instance,Kasper and Rounds, 1986).
To avoid confusion, fileterms of the representation language are often referred toas feature descriptions.
Disjunction is a representationtool in the representation language, intended to describesets of feature structures.
In this framework, there areno disjunctive feature structures, but only disjunctivefeature descriptions.This framework has enabled researchers toexplorethe compulational complexity of unification.
However, ithas some drawbacks.
First, properties have to be stated(and proofs carried out) at the syntactic level.
Thisimplies using a complicated calculus based on formulaequivalence rules, rather than using graph-theoreticalproperties.
In addition, unification is not well-definedwith respects to disjunction.
There is reference in theliterature to the "unification of disjunctive featuredescriptions", but, formally, we should instead speak ofthe unification of the sets of feature structures thedescriptions represent.For example, unifying the sets of feature structuresrepresented by the disjunctive feature descriptions inFig.
1 yields a set of four (non-disjunctive) featurestructures, which can be described by several equallylegitimate formulae: A factored, B factored, disjunctivenormal form (DNF), etc.
Depending on the algorithmthat is used, the description of file result will be one orthe other of these formulae.
Some algorithms requireexpansion to DNF and will therefore produce a DNFrepresentation as a result, but other algorithms mayproduce different representations.There is an important body of research concernedwith the development of algorithms that avoid theexpensive expansion to DNF (e.g., Kasper, 1987).Thcse algorithms typically produce descriptions of theunification, in which some of the disjunctions in theoriginal descriptions are retained.
However, thesedescriptions are produced as a computational side-effect(potentially different depending on the algorithm) ratherthan as a result of the application of a formal definition.Fig.
1.
Different descriptions for tile same set of featurestructuresIn this paper, we first consider disjunctive featurestructures as objects in themselves, defined in terms ofdirected acyclic hypergraphs.
This enables us to build amathematical framework based on graph theory in orderto study the properties of disjunctive feature structuresand specify operations ( uch as unification) in algebraicrather that syntactic terms.
It also enables thespecification of algorithms in terms of graphmanipulations, and suggests a data structure forimplementation.We then illustrate the expressive power of thisframework by defining a class of disjunctive featurestructures with interesting properties (factored normalform or FNF), such as closure under factoring,unfactoring, unification, and generalization.
Theseoperations (and the relation of subsumption) are definedin terms of operations on (or relations among)hypergraphs.
Unification, in particular, has the intuitiveappeal to preserve as much as possible the particularfactoring of the disjunctive feature structures to beratified.
We also show that unification in the FNF classcan be extremely efficient in practical applications.For lack of space, proofs will be omitted or bulysuggested.Aca~s DE COLING-92, NANa~S, 23-28 Aotrr 1992 4 9 g FROC.
OF COLING-92, NANTES, AUG. 23-28, 19922.
BASIC FRAMEWORK2.1  D is junct ive  featme s t ruc tures  as  hypeqgraplts(Disjunctive) feature structures will be defined asdirected acyclic hypergraphs.
In a hypergraph (seeBergc, 1970), ,arcs (hyperarcs) connect sets of nodesinstead of pairs of nodes, as in usual graphs.
We willconsider hyperarcs as directed from their first node to allother nodes.
More precisely, each hyperarc will be anordered pair consisting of an input node nio, and a (non-empty) set of output nodes n# .
.
.
.
.
nit.
We will saythat (hid, {nit  .
.
.
.
.
n i t} )  is a k-arc  from hid toni t .
.
.
.
.
nit, that hid is an immediate  predecessor  ofi'ti I .
.
.
.
.
n i t ,  and that nit  .
.
.
.
.
nik are immediatesuccessors of hid..A path t ill a hypergraph is a sequence of nodesni .
.
.
.
ni such that for j = 1 ... p - 1 ni is an ?
l '  '.
p ' ' '.
j2mmedtate predecessor of nij+l.
If there ex2sLs a pathfrom a node ni to a node nj, we will write ni ~ nj.
Ahypergraph is acyclic if there is no node such that n i :::>hi.
A hypergraph as a root no if tbr each node ni ?
: no,no ~ hi.
The leaves of a hypergraph are those nodeswith no successor.
A path terminating with a leaf is anutximal path.
Nodes with more than one immediatepredecessor a e called merging nodes.Definition 2.1 Let L be a set of labels and A be a setof atomic values.
A (disjunctive)feature structure on (L,A) is a quadruple F = (D, no, ,~, C0, respecting theconsistency conditions 2.1 below, where D is a finitedirected acyclic hypergraph with a root no, 2 is a partialfunction from the l-arcs of  D into L, and o' is a partialfunction front the leaves of D into A.Feature structures which have isomorphic hyper-graphs, whose corresponding leaves have the samevalue, and whose corresponding feature-arcs have thesame labels, are isomorphic.
We will consider suchfeature structures to be equal up to isomorphisnt.Definition 2.2 Labeled l-arcs are called feature-arcs.Non-labeled hyperarcs are called OR-arcs.Note that OR-arcs are usually k-arcs with k >1, but(non-labeled) l-arcs can be OR-arcs as a sttecial case?We will use a graphic representation for disjunctivefeature structures in which OR-arcs are represented as kliues connected together2 (see Fig.
2).Definit ion 2~3 The extended label of a given path isthe concatenation of all labels along that path.
We willuse the notation 11:12: ...
In to represent extended labels.A maximal extended label from a node is an extendedlabel for a maximal path from that node.lWe use this t*rm in the sense usual in graph theory.
It should notbe confused with the term path use.d in ninny feaUure structurestudies, which is a string of labels, and for which we willintlodtw.e the team extended label lat~ in the paper,21n some work involving AND/OR graphs, this convention is usedfor AND-arcs.
This should not c~atc further confusion.B:cjFig.
2.
Graphic representationCondit ions 2.1 Disjunctive feature structures mustverify the folh)wing consistency conditions:(C1) No output node of all ORdure is a leaf;(C2) Output uodes of OR-arcs are not mergitig nodes;(C3) All fealure-arcs from the sante my.It have differeutlabels;(C4) No maximal extended label front a given node is aprefix of a non-maximal extended label obtained byfollowing a different hyperarc from rite same node.C 1 and C2 constrain OR-arcs to represent onlydisjunctions?
C3 and C4 are extensions of thedeterminism tbat is usually imposed on dags (nooutgoing arcs with the ,same label from any given node).Definit ion 2.4 A dag feature structure is a featurestructure with 220 OR-arc.Definition 2.5 A project ion of a feature structure x isa hypergraph obtained by removing all but one outputnode of all OR-arcs of x.Therelore, a projection has only l-arcs.Definit ion 2.6 A dag leature structure y is a dug..projection of a feature structure x if there exist someprojectinu y' o fx  and a function h mapping nudes of y'into nodes dry  such that:(1) the root dry '  is mapped to file root of y;(2) if (hid, {ni t})  is a feature-arc of y',  then(h(nio), {h(ni l )}) is a feature-arc of y with thesame label;(3) if (hid, {nil}) is a 1-oR-arc of y', then h(nlo) :h(nil);(4) the value associated with a node ni in y '  is the sameas the value associated with h(ni) in y, or both haveno value;(5) each feature arc in y is the image of  at least onefeature arc in y'.In other terms, a dag-projection is obtained from aprojection by merging the input and output nodes ofeach l -oR-arc,  and merging paths with commonprefixes to ensure detemainism.Definit ion 2.7 A sub-feature structure rooted at anode ni is a quadruple composed of  a sub-hypergmphrooted at that node, the root ni, together with theACRES DE COLING-92, NANTES.
23-28 Ao~r 1992 4 9 9 Pride, OF COLING-92.
N^N'rEs, AUG. 23-28, 1992restrictions of the label and value functions to this sub-hypergraph.
The AND-part of a node is the sub-featurestructure rooted at that node, starting with only thefeature-arcs from that node.
The OR-parts of a node arethe different sub-feature structures rooted at that node,starting with each of the OR-arcs.
The disjuncts of anOR-arc are the sub-feature structures rooted at each ofthe output nodes of that oR-arc.
If a node has only oneOR-arc, we will call its disjuncts the disjuncts of thenode.L\[F mEo:\[\]\]3JJ\[-\[" C.: m, _-~:Eo;D':m\]\] \]' \]L Eo:E : n3 S jFig.
3, De~cTiplion of the feallJ~c sallcl~e in Fig.
2.2,2 Representation languageDefinit ion 2.8 The representation language for(disjunctive) feature structures described above isdefined by the following grammar:F -4 \[T .
.
.
.
.
T\]T -41 : IVT ~ IF .
.
.
.
.
F)I -4 i l tV -4F la lewhere F is the axiom, e is the empty string, I belongs tothe set of labels L, a belongs to the set of atomic valuesA, and i belongs to a set I of identifiers (we use thesymbols 1"71, I'~"1, etc.
), disjoint from L. A formula ?
ofthat language is called a (disjunctive)feature description.The mapping between feature structures and featuredescriptions is straightforward (Fig.
3).
Translatingbetween feature descriptions and feature structures andchecking that a description is valid (that is, correspondsto a valid feature structure) is computationally trivial,and does not rely on the (potentially expensive)application of equivalence rules as in Kasper andRounds (1986).3.
A TYPOLOGY OF NORMAL FORMSIn this section, we will first define the disjunctivenormal form (DNF) in terms of hypergraphs.
We willthen define a family of increasingly restricted normalforms, the most restricted of which is the DNF.
One ofthem, the factored normal form (FNF) enables a cleardefinition of the "format" of a feature structure.
It alsoimposes a strict hierarchical view of the data, and isexactly the class of feature structures that are reachablefrom the DNF through sequences of factoringoperations.
We believe that the FNF class is of greatlinguistic interest, since it is clear that disjunction isoften used to reflect hierarchical organization, factoring,etc., and thus is more than just a space-saving device.
Inthe sections that follow, factoring operations in the FNFclass will be defined formally, along with appropriateextentions to the notions of  subsumption andunification.3.1 Disjunctive Normal FormDefinition 3.1 A (disjunctive) feature structure is saidto be in disjunctive normal form (DNF) if:(1) the root has only one OR-part, and no AND-part;(2) each disjunct is a dag feature structure;(3) all the disjuncts are disjoint and different (non-isomorphic).Note that the disjunctive normal form is defined forfeature structures themselves, not for their descriptions.Definit ion 3.2 The disjunctive normal form of agiven feature structure x, noted DNF(x), is a DNFfeature structure, in which the set of disjuncts Di is equalto the set of dag-projections ofx.Definit ion 3,3 Two feature structures x and y areDNF-equivalent if DNF(x) = DNF0').
We will notex ~a,f Y.3.2 Typology of normal  formsWe can define several interesting restrictions on featurestructures, which in turn define a typology ofincreasingly restricted normal forms.Condit ion 3.1 Dag-projections obtained by differentselections of output nodes of OR-arcs arc different.Condit ion 3.2 Each node has at most one OR-part.Condit ion 3.3 The AND-part of each node is a dag.Definition 3.4 When combined, the three conditionsabove define several normal forms:(1) 3.1: non-redundant normal form (NRNF);(2) 3.1 and 3.2: hierarchical normal form (HNF);(3) 3.1 and 3.3: AND-normal form (ANF);(4) 3.1, 3,2 and 3.3: layered normal form (LNF).Def in i t ion 3.5 In an ANF feature structure x, theAND-part of a node ni is a maximal AND-part of x if niis the output node of no feature arc.Definition 3.6 The layers of a LNF feature structureare defined recursively as follows:(1) Layer 0 is the AND-part of the root;Ac'rEs DE COLING-92, NANTES, 23-28 AOt3T 1992 5 0 0 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992(2) Layer n+l is set of (maximal) AND-parts of all theoutput nodes of OR-arcs originating in layer n.Let us now turn back to formats.Definition 3.7 The format of a dag feature structureis the set of maximal extended labels starting at its root.The format of a layer is the union of formats of all thenmximal AND-parts in that layer.Definition 3.8 A LNF feature structure is said to bein factored normal form (FNF) if the followingproperties hold:(1) the formats of all layers are disjoint;(2) paths originating in two distinct maximal AND-partsof a layer n can merge only in a node belonging toan AND-part in a layer n' such that n" < n.Fig, 3.
A typology of normal forms.Fig.
3 shows the typology of normal forms.
Notethat the DNF is obviously in FNF.In the rest of the paper, we will study only theproperties of FNF, in which formats are homogeneous.Definition 3.9 The format of a FNF feature structure,noted f(x), is the sequence <.30 ..... sn> of the formatsof each of its layers, in increasing order starting with theroot.Definition 3.10 We will call sets of extended labelsdag-formats, and sequences <so, ..., s,,> of dag-formats with all si disjoint,d-formats.Proposition 3.2 If two FNF feature structures havethe same DNF and the same forumt, they are equal.4.
RESTRUCTURING OPERATORS4.1 Factor and unfactorLet us give fwst a few auxiliary definitions.Definition 4.1 Let x be a dag feature structure, and sa dag-format.
The spanning ofx according to s, notedspans(X), is the greatest ub-dag of x such that of all thepaths in spans(x) have their extended labels in ,3.Note that f(spans(X)) ~ s.Def in i t ion  4.2 A dag feature structure F is acormnonfactor of a feature structure x if the AND-part ofall the disjuncts at the top level of x contain F. A dagformat s is said to span a common factor ofx if thespanning of the AND-part of all the disjuncts at the toplevel ofx according to s is a common factor.Let us now define the factoring and unfactoringoperations.
Informally, the factor operator extracts afactor common to all the top-level disjanets, and raises itto the root level.Definition 4.3 Let x be a FNF feature structure suchthat f(x) = <so, Sl, s2 ..... Sn> and s a dag-format.
Ifs spans a common factor F, the factoring of x accordingto s, noted cs(X), is the FNF feature structure DNF-equivalent to x with format <soUs', Sl-S', s2, ..., s,>where s' = f (F) .Definition 4.4 Let x be a FNF feature structure withan AND-part A, such that f(x) = <so, Sl, s2 ..... Sn>,and s be a dag-format.
If F = spans(X), the unfactoringof x according to s, noted ~s(x), is the FNF featurestructure that is DNF-equivalent to x with the format<so-s', Slt3S ', s2 ..... sn>, where s" : f (F ) .Example.
See Fig.
4Proposition 4.1 ~s(~s(x)) =~s(~s(x)) =xProposition 4.2(1) ~(?.,<x))=~'.e(?.,(x)) -- ?.~s<X)(2) d~s(~s'(X)) = ~s'(~bs(X)) -- ~-su,~'(X)format: format:<{A:B,A:C}, {A:D,A:E,F:G,F:H}, <{A:B,A:C,A:D,A:E}, {F:G,F:H}>AI\ I \d e hi d e h2 k NI/ h2Fig.
4.
Factoring and uafactoringAcq'ES DE COLING-92, NhbrrEs, 23-28 AO~r 1992 5 0 l I'ROC.
OV COLING-92, NAN-rEs, AUG. 23-28, 19924.2 Group and ungroupThe factor operator equires that there is a commonfactor.
In many cases there is no common factor;however, it is possible to define a group operator thatfirst splits feature structures into groups of disjuncts thathave common factors with respect to a given format, andthen factors them.Definition 4.5 Let x be a FNF feature structure suchthat f (x )  = <?,Sl, s2 .
.
.
.
.
s,>.
At  ..... An be theAND-parts of the top-level disjuncts of x. and s be adag-format.
The grouping ofx according to s, noted7s(X), is the FNF feature structure DNF-equivalent toxwith format <0, s', Sl-S', s2, ..., s,> where s' =U f(spans(ml)).Definition 4.6 Let x be a FNF feature structure suchthat f (x )  = <?,Sl,S2 .
.
.
.
.
s,>.
At  ..... An be theAND-parts of the top-level disjuncts of x, s be a dag-format, and s" =~f(spans(Ai)).
We will note ~s(x)the ungrouping of x according to s :(1) if s'=sl then ~s(x) is the FNF feature structureDNF-equ iva lent  to x with fo rmat<O, sit,is2, s3 ..... Sn> ;(2) if s'~:Sl then ~is(X) is the FNF feature structureDNF-equivalent to x with format <?, Sl-S', s'US2,  $3,  .
.
.
,  Sn>.Example.
See Fig.
5.Proposition 4.3 Ys( ~ s(x)) = ~ s(ys(x)) = xProposition 4.4 The class of FNF feature structuresis closed under factoring, nnfactoring, grouping andungrouping.4.3 Format operatorDefinition 4.7 Let S be a fs-format <s0,Sl,...,Sn>.The formatting of a DNF feature structure x according toS, noted Vs(x), is the result of the following sequence ofoperations:Vs(x ) = CsO(~t$1Uso(~s2tJSlkJSO(....(~tSnt J.. t.)so(X))))It is clear that vs(x) is in FNF, and is DNF-equivalent to x.Proposition 4.5 Any FNF feature structure x can bereached from its DNF though a sequence of groupingand factoring operations.
More precisely, if x '=DNF(x) then x = Vf(x)(X').Definition 4.8 Let S be a fs-format <sO.Sl,...,sn>.The unformauing of a FNF feature structure x accordingto S, noted Vs(x), is the result of the followingsequence of operations:V s(x) = ~ s ,u  ...Uso(...( f" s2usl~s0( ~s,us0(~0(x))))Proposition 4.6 Any FNF feature structure x can betransformed into its DNF though a sequence ofunfactoring and ungrouping operations.
Moreprecisely, vf(x)(x) = DNF(x).Proposition 4.7 Vs( iJ s(X)) = i~ s(Vs(X)) = x5.
SUBSUMPTION, UNIFICATION ANDGENERALIZATIONAs mentioned in the introduction, the format of tfie resultof unification is not defined in the classical approach.Our goal will be to define unification on FNF disjunctivefeature structures in such a way that the format of theresult is unique and predictable.
Intuitively.
whenfeature descriptions have compatible formats (as in Fig.6), it seems that unification should preserve it.
On theother hand, when two feature descriptions havecompletely incompatible formats (as in Fig.
1), theresulting format should be in DNF.
When formats areonly partially compatible, a limited amount ofunfactoring should be performed, and the compatiblepart should be preserved in the result.
Theseconsiderations lead us to define compatibility of formats,and to extend the notions of subsumption, unification,and generalization to feature structure formats.
We thendefine unification and generalization on disjunctivefeature structures in such a way that important propertiesformat: format:<~, (A,B,C,DzE,F), {G, \ [ I}> _ _ y ~  <?~, {A}, {B,C,D:E,F}, {G,H}>"~A) ~a IC~~I~H12 ~ !
el a2 bl c2 f\] al FVf lFig.
5.
Grouping and ungroupingAcrEs DE COLING-92.
NAr, rlXS.
23-28 AO~" 1992 5 0 2 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992hold.
In particular, reduction to DNF, factoring, andgrouping are homomorphisms with respect to unification(that is, DNF(x LI y) = DNF(x) Ll DNF(y), ys(xU y)= ~(x) LI ~0'), etc,).B:  b l  D :  d l  .C: c l iB :  b i l lB :  b2  I L t5 :  o ld  \[C:  c I I  B:  b211A: Ba2b3 -A: a2D: d2 .,I I  B:  13311/.u_L: o~J |I I  B :  b4  I Il Lh :  eq J~L1111 B:  b l  C :  c l  E :  01  B :  b2  C :  c2  E :  e: d2C:  c3E: eC:  C4E: eFig.
6.
Compatible formatsIn what follows, we will call the classicalsubsumption, unification, generalization f (lag featurestructures dag-subsumption, dag-unification and dag.generalization ( oted -<-~s, Liaag, \[-la~g, repectively).
Theclassical subsumption, unification, generalization ofDNF feature sU'uctures will be called dnf-subsumption,dnf-unification and dnf-generalization ( oted ~.f,  Lla.f,Ha./, repectively).5.1 Subsumption, unification, generalizationof formatsDef in i t ion  5 .1Let  S1 be a fs-format <Sl0,Sll ..... $ln> and $2 be a fs-format <s20, 521,-.-, s2p >.We will say that S1 subsumes $2 if each p in Slibelongs to some s2j with i <j, for all i in { 1, n}.
Wewill note S1 <-/,.t $2Definition 5.2 Let SI and $2 be two fs-formats.
Theunification of Sl and $2, noted S1 LI/,.~ $2.
is thegreatest lower bound of S1 and $2 according to theformat subsumption relation.
The generalization of S1and $2, noted S1 lql,,.
$2, is the least upper bound of$1 and $2 according to the format subsumption relation.It is easy to prove that hese bounds exist.
They canbe built recursively.
For example, let SI = <rl0,s \ ]  1 ..... sin> and $2 = <s20, s21,..., s2n> (for thesake of simplicity, we will consider the shorter of SIand $2 to be padded on file right with an appropriatenumber of ?% in order to ensure the same length).
S =S1 UL,.
t $2 = <so, Sl,..., s.> can be constructedrecursively:(1) sn=SlnUS2n .
(2) sF  (slit-) s2i) - jL~+I sj for all i, 0-<i <n.Def in i t ion  5.3 Let SI be a fs-format <Slo,Sll,... , sin> and $2 a fs-format <s20, s21 ..... s2p>.We will say that $2 is a sub-format of St i f s lo  isincluded in s20 for all i in { 1, n}, We will say that SIand $2 are compatible if both S1 and $2 are sub-formatsof the same format.5.2 Subsumption, unification, generalizationof disjunctive feature structuresDef in i t ion  5.4 We will say that a FNF featurestructure x subsumes a FNF feature structure y, andnote x <- y, if(1) x <-a.fY(2) If x) -<:,,, Ify)Def in i t ion  5,5 Let x and y be two FNF featurestructures.
The unification of x mid y, noted x LI y, isthe greatest lower bound of x and y according to thesubsumption relation.
The generalization of S1 and $2,noted x INy, is the least upper bound of x and yaccording to the format subsumption relation.The following proposition states thatx LI y is dnf-equivalent to the dnf-unification of the DNFs of x and y,and the format ofx IJ y is the unification of the formatsof x and y:P ropos i t ion  5.1(1) DNF(x L\] y) = DNF(x) Lid,,/-DNF(y)(2) f (x  U y) = f (x )  Lip., y(x)As a result, the unification of x and y can be computedby completely unformatting both x and y, unifyingthem, and formatting the result according to theunification of their formats:P ropos i t ion  5.2x U y = v f(x)U\[,.tf(y)(Vf(x)(x) LIdn f V f(y)(y))(Dual proposition holds for generalization.
)Proposition 5.3 The class of FNF feature structuresis closed under factoring, unfactoring, unification, andgeneralization.This follows directly from the definitions.P ropos i t ion  5.4(1) 7s(XMy) = Z~(x) LI~(y)(2) ~(x  Lly) = ~(x) Ll~(y)(3) eAx LI y) = es(x) u O,,(Y)(4) ~s(X l l y )  : es(x) LlOs(y)(Dual propositions hold for generalization.
)5.3 AlgorithmProposition 5.2 does not imply that completeunfactoring and re-factoring is the most efficientcomputation of unification and generalization.
Becauseof the properties given in proposition 5.4, unificationcan be carried out layer by layer, and only partialunfactoring is needed (algorithm 5.1).
In the extremecase, when the formats of x and y are compatible, nounfactoring isneeded, and the procedure match-formatsdoes nothing.ACyF~ DE COLING-92, Nnl,rn~s, 23-28 AOt7 1992 5 0 3 Pe.oc, OI; COLING-92, NAN'I~.S.
AUG. 23-28, 1992Algorithm 5.1 Unification of FNF feature structuresfunction unify(x, y: feature-structure): feature-structurematch-formats(x, y)//Unify AND-partsz.AND ~ dag-unify(x.AND, y.AND)if z.AND =failure then return failure//Unify OR-partsz.OR 4-- unify-disjuncts(x.OR, y.OR)If z.OR =failure then return failure else return zfunction unify-disjuncts(x, y: feamre-structare):feature-structure//assume x.AND and y.AND are emptymatch-formats(x, y)k~0for each x,DISJifor each y.DISJjt 4-- dag-unify(x.DISJi.AND , y.DISJj.AND)If t ~: failure thenu ~-- unify-disjuncts(x.DISJi.OR, y.DISIj.OR)if u ~: failure thenk~.-k+lz.DISJk.AND 4-- tI / \[ I z'DISJk'OR 4-- uif k = 0 then return failure elsereturu zWe will consider the complexity of this algorithm interms of the number of dag-unifications, which is theonly costly operation (O(n log(n)), where n is the totalnumber of symbols in the two dag feature structures--see AIt-Kaci, 1984).
We will first consider the casewhere the formats are compatible.
One dag-unification isperformed in the unify function, but the bulk of the dag-unifications are performed in the unify-disjunctsfunction.
There are two nested loops, and the function isapplied recursively through all the layers.
Therefore, inthe worst case, the algorithm requires O(d 2) rag-unifications, whre d is the total number of disjancts.When the formats are not compatible, someunfactoring and ungrouping has to be performed by thematch-formats function in order to force the formats tomatch.
The number of operations can be limited if thetwo formats are partially compatible, due to theproperties of FNF.
Complete unformatting will benecessary only in cases where the two formats arecompletely incompatible.For example, if f (x)  = <{A}, {B,C}, {D,E}, {F},{G}, {H}>, and f (y)  = <{I}, {B,J}, {D,F}, {E,K},{G}, {L}>, the resulting format is <{A,I}, {B,C,J},{D}, {E,F,K}, {G}, {H,L}>.
The two first layers canbe computed without unfactoring.
Unfactoring isrequired for disjuncts at the next level, yielding theformats <{D}, {E,F}, {G}, {H}> and <\[D},{E,F,K}, {G}, {L}>, respectively.
When this isaccomplished the formats match, and the algorithm canresume with no more unfactoring.It is clear that, in the worst case, when thealgorithm requires the complete unformatting of the twofeature structures, the total number of dag-anificationsgrows exponentially with the number of disjanets.However, in most pratical cases, the algorithm is likelyto perform better.
We saw, in particular, that when thetwo feature structures have completely compatibleformats, the complexity is only quadratic.
There isobviously a range of possible behaviors between thesetwo extremes.It seems to us that in practical applications,disjunction is not random, but, instead, reflects somesystematic linguistic properties.
A high degree ofcompatibility among formats is therefore xpected.
Itshould also be noted that the algorithm can easily bemodified so that only one feature structure isnnfactoredand re-formatted into a format hat is compatible with theformat of the other.
This is especially useful in thecommon situation in which a small feature structure,containing a small number of disjuncts (e.g.
aconstituent at a given stage of parsing) is matchedagainst a very large feature structure (e.g.
a grammar).In this case, the time required for unformatting andreformatting the "small" feature structure is negligible,and the overall number of dag-unifications growslinearly with the number of disjuncts in the "large"feature structure.6.
CONCLUSIONIn this paper, we present a new mathematicalframework in which disjunctive feature structures aredefined as directed acyclic hypergrapbs.
Disjunction isdefined in the feature structure domain, and not at thesyntactic level in feature descriptions.
This enables us tostudy properties and specify operations (such asunification) and relations (such as subsumption) in termsof algebraic operations on (or relations among)hypergmphs rather than in syntactic terms.
We illustratethe expressive power of this framework by defining aclass of disjunctive feature structures with interestingproperties (factored normal form, or FNF), such asclosure under factoring, unfactoring, unification, andgeneralization.
Unification, in particular, has theintuitive appeal of preserving as much as possible theparticular factoring of the disjunctive feature structuresto be unified.
We also show that unification in the FNFclass can be exlremely efficient in practical applications.Acknowledgments -- The present research has beenpartially funded by the GRECO-PRC CurmnunicationHomme-Machine of the French Ministery of Researchand Technology and U.S.-French NSF/CNRS grant INT-9016554 for collaborative research.
The author wouldlike to thank Nancy Ide for her valuable comments andhelp in the preparation of this paper.REFERENCESA)\[T-KACI, H. (1984) A New Model of Computation Basedon a Calculus of Type Subsumption.
Pit.
D. Thesis,Univ.
of Pennsylvania.BERGE, C. (1970).
Graphes et tlypergraphes.
Paris:Dunod.
\[translation: Graphs and Hypergraphs,Amsterdam : North-Holland, 1973\]KASPER, R. T. (1987).
A unification method fordisjunctive feature descriptions.
Proc.
25th AnnualMeeting of the Association for ComputationalLinguistics.
Stanford, California, 235-242.KASPER, R., ROUNDS, W. C. (1986).
A logical semanticsfor feature structures.
Proc.
24th Annual Meeting ofthe Association for Computational Linguistics.
NewYork, 257-266.ACrEs DE COLING-92, NANTES, 23-28 At'Jr 1992 5 0 4 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992
