Text Al ignment in a Tool for Translating Revised DocumentsHadar  ShemtovStanford UniversityXerox PARC3333 Coyote Hill RoadPalo Alto, CA 94304 USAshemtov@parc.xerox.com1 In t roduct ionMaking use of previously translated texts is a veryappealing idea that can be of considerable prac-tical and economical benefit as a translation aid.There are different ways to exploit the potential of"re-translation" with different degrees of generality,complication and ambition.
Example-based machinetranslation is probably the most ambitious end of thespectrum but there can be other points along it.
Inthis paper I describe asimple tool which deals with aparticular special case of the "re-translation" prob-lem.
It occurs when a new version of a previouslytranslated ocument needs to be translated.
Thetool identifies the changes between the two versionsof the source language (SL) text and retrieves appro-priate sentences from the target language (TL) text.With that, it creates a bilingual draft which consistsof sections in the TL text from the existing transla-tion and update materials from the SL text, therebyreducing the effort required from the translator.
Thistool could substantially increase the productivity oftranslators which deal with technical documents offrequently modified products (software-based prod-ucts are the best example of that).
If this is true, itsuggests that simple solutions can be very effectivein addressing "real-life" translation problems.The paper is structured as follows.
The first sec-tion discusses ome relevant properties of typicaltexts which are likely to be (re-)translated with thistool.
The second section is about he alignment pro-cess - I will present a new length-based alignment al-gorithm, designed for dealing with texts that includeadditions and deletions.
In the following section Iwill propose a quick procedure to find the differencesbetween two versions of the same document.
Then,I will show how the bilingual draft is constructed.The last section will discuss possible continuationsof this research which will extend the applicabilityof the tool to more general translation situations.2 The  Prob lem o f  Nat iona l i za t ionSituations where a document eeds re-translation areusually associated with commercial products thatundergo modifications and revisions and require ac-companying literature in different languages.
Theprocess of accommodating such texts to differentcountries and languages does not stop at merelytranslating the exact content of the original docu-ment.
Rather, it involves adaptation of the text todifferent norms and shared knowledge of a differ-ent audience.
Sometimes, the products themselvesare modified and sometimes the new market imposechanges that need to be made in the technical doc-umentation of the products.
This probably arisesmost frequently in the user manuals of software prod-ucts.
Different countries use different keyboards, dif-ferent languages often require adaptation ofthe soft-ware itself and also, users in different countries havedifferent expectations and norms which the docu-mentation (if not the product itself) needs to reflect.These factors, together with the actual translation,constitute the process usually referred to as "nation-alization".Nationalization often gives rise to a situationwhere some of the text has no corresponding trans-lation.
Since documentation f commercial prod-ucts are the type of texts that usually require re-translation, this situation has to be recognized andhandled by the translation tool.
For that purpose,I developed a new alignment algorithm that will bepresented in the next section.3 A l ignmentLength-based alignment algorithms \[Gale andChurch, 1991b; Brown el al., 1991\] are computa-tionally efficient which makes them attractive foraligning large quantities of text.
The main prob-lem with them is that they expect that, by andlarge, every sentence in one language has a corre-sponding sentence in the other (there can be inser-tions and deletions but they must be minor).
In thecharacter-based algorithm, for example, this is im-plicit in the assumption that the number of charac-ters of the SL text at each point (counting from thebeginning of the text) is a predictor for the num-ber of characters in the TL.
This assumption mayhold for some texts but it cannot be relied on.
Asa consequence of nationalization, one text may besubstantially onger than the other and this makesthe length correspondence assumption i correct (ifthe additions and omission were not reflected in thelength of the two texts, the situation would have beeneven worse).
Simply, the cumulative l ngth of thetext is no longer a good predictor for the length ofits translation.
This problem affects the considera-tion of the text as a whole.
However, locally, thelength-correspondence assumption can still be main-rained.
Gale and Church hint that their method449works well for aligning sentences within paragraphsand that they use different means to find the corre-spondence (or lack thereof) of paragraphs.
A moredetailed description of such an approach is given byBrown et al that use structural information to drivethe correspondence of larger quantities of text.
How-ever, such clues are not always available.
In order toaddress this problem more generally I developed analgorithm that is more robust in detecting insertionsand deletions which I use for aligning paragraphs.3.1 A l ign ing ParagraphsThe paragraph alignment algorithm relies on the ob-servation that long segments of text translate intolong segments and short ones into short ones.
Unlikethe approach taken in Gale and Church, it does notassume that for each text segment in the SL versionthere is a corresponding segment in the TL.
Instead,the algorithm calculates for each pair of text seg-ments (paragraphs in this case) a score based on theirlengths.
For each potential pair of segments, everalediting assumptions (one-to-one, one-to-many, etc.
)are considered and the one with the best score is cho-sen.
Dynamic programming is then used to collectthe set of pairs which yields the maximum likelihoodalignment.
The score needs to favor pairing segmentsof roughly the same length but since there is morevariability as the length of the segments increases,the score needs to be more tolerant with longer seg-ments.
This effect is achieved by the following for-mula which provides the basis for scoring:\ [ i ,  -s(i, j )  = X/l' + ljIt approaches zero as the lengths get closer but itdoes so faster as the absolute length of the segmentsgets longer.
So, for example sxo,2o = 1.8257, buts110,220 = .5504 (the square root of the sum is usedinstead of simply the sum so that sx0,~0 would bedifferent from s100,200).
This simple heuristic seemsto work well for the purpose of distinguishing corre-lated text segments.
However, since paragraphs canbe quite long and the degree of variability betweenthem grows proportionally, this score is not alwayssufficient o put things in order.
To augment i , moreinformation is considered.
The actual score for de-ciding that two paragraphs are matched also takesinto consideration a sequence of paragraphs imme-diately preceding and following them (see figure 1for an illustration).
This is based on the observa-tion that the potential for aligning a pair of segmentsalso depends on the potential of them being in a con-text of alignable pairs of segments.
According to thisscheme, a pair with a relatively low score can still betaken as a correspondence if there are segments oftext preceding and following it which are likely toform correspondences.This scheme lends itself to calculating a score forthe assumption that a given paragraph is an in-1 2 3 4 5 6 7 8 9 i0 11 12 13 14 15 16 17 18123456789I0Ii121314" " : ' " : ' " : ' " : ' " .
: : : : :  ~ : : : :  .
.
.
.
- " : " ' : .
.
.
: .
.
.
: .
. '
: : : :...L..i...L..L..L..i~...L..i...i...i... :...i...i...?
.
.
: .
.
.
y .
.y - -y - .y .
.
:  ~ .
.
.y - .
f .
.
-y - - .
.
.
.~ .
.
.
: .
.
.
: .
- -  iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii.
.
.
.
?
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
?
.
.
.. .
.
.
.
.
.
.
.
.
.
?
.
.
.o .
.
.o .
.
.
?
?
.
.o  .
.
.
.
.
.
.
?
.
.
.
?
.
.
.
?
.
.
.
?
.
.
.
?
.
.
?
?
.
.
.
.
?
.
.
.
.
.
.
~ .
.
.
.
.
.
.
.
.
?
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
?
?
.
.
.
.
.
.
.
.
.
.Figure 1: Paragraph Alignmentsertion (or deletion).
So, if segment i is an inser-tion, the context for considering it will consist of thefollowing pairs .
.
.
i - 2 / j  - 2, i - 1/ j  - 1, i + l / j ,i + 2 / j  + 1...
This way, a score is being assigned tothe assumption that a certain segment in one text hasno corresponding segment in the other text.
Like-wise, i f j  and j+  1 are insertions to the other text thescore considers .
.
.
i - 2/ j  - 2, i - 1 / j  - 1, i / j  + 2,.i + 1 / j  + 3.. .
as the appropriate context for calcu-lation the score.It is easy to see how this works for insertions ofshort sequences but it remains to be explained howarbitrarily long sequences are handled.
In principle,it would be best if for each n (the length of a sequenceof insertions), the following context would consist ofi + n / j ,  i + n + 1 / j  ?
1 etc.
but obviously, this is notpractical.
This is related to another potential prob-lem which has to do with the contexts calculatednear insertions or deletions.
Figure 1 depicts thissituation (the gray squares identify the context foraligning the pairs denoted by the black squares; themarked path stands for the correct alignment).The alignment score of a segment previous to aninsertion is based on appropriate preceding contextbut irrelevant following context (the reverse holds fora segment following an insertion) 1 .
To minimize theeffect of this situation, a threshold is introduced'sothat when the score of one side of the context is good,the effect of very bad score in the other side of thecontext is kept below a certain value.
Note also that1This is an importaat factor for selecting the amountof context.
It could be assumed that the wider the win-dow of segments around each pair is, the more accuratethe determination of its alignment will be.
However, thisis not the case exactly because of the fact that occasion-ally the algorithm has to consider some ~noise'.
Empiri-cal experimentation revealed that a window of 6 segments(3 to each side) provides the best compromise betweenbeneficial information and noise.450although some noise is being introduced into the cal-culation of these scores, other editing assumptionsare likely to be considered even worse.
Occasionallythis has an effect on the exact placement of the in-sertion but in most cases, the dynamic programmingapproach, by seeking a global maximum, picks upthe correct alignment.Now, let me return to the issue of long sequences ofinsertions.
The situation is that in one location thereis a sequence of high-quality alignment, hen there isa disruption with scores calculated for arbitrary pairsof text segments, and then another sequence of highquality alignment begins.
What happens in mostcases is that between these two points, the scoresfor insertions or deletions are better than the scoresassigned to random pairs of segments.
Here too, theeffect of global maximization forces the algorithm topass through the points where the insertion begins,resume synchronization where it ends and considerthe points in between as a long sequence of unpairedsegments of texts.
In other words, once the edgesare set correctly, the remainder of the chain is almostalways also correct, even though it is not based onappropriate contexts.This potential problem is the weakest aspect ofthe algorithm but essentially, it does not have animpact on the quality of the alignment.
Note alsothat even if the exact locus of insertion (or deletion)is not known, the fact that the algorithm detects thepresence of text with no corresponding translationis the crucial matter.
This way, the synchronizationof the text segments can be maintained and align-ment errors, even when they happen, can only havea very local effect.
To demonstrate his, let us con-sider a concrete xample.
An English and a Frenchversions of a software manual contain 628 and 640paragraphs, respectively.
In all, there are 30 para-graphs embedded in them which do not have a trans-lation (some in fact do, but due to reordering of thetext, these were considered as deletion from one lo-cation and then insertion in another location).
Thealgorithm matched 618 pairs of paragraphs, only 11of which were actually wrong.
Note that between thetwo texts there were 13 different insertions and dele-tions of sequences varying from 1 to 6 paragraphs inlength.
The algorithm has proven to be extremely re-liable in detecting segments of text that do not havea translation and this makes it very useful in dealingwith what I have called "real-life" texts.To summarize, this algorithm relies on the generalassumption that the length of a segment of text iscorrelated with the length of its translation.
It usesa sliding window for determining for each segmentthe likelihood of it being in a sequence of alignedtext.
This technique considers the correspondenceas a local phenomenon, thereby allowing segments oftext to appear in one text without a correspondingsegments in its translation.12345678910II12I 2 3 4 5 6 7 8 9 i0 ii 12 13""! '"
'" ' !"
:  : : i~ "'"'"!'"':"'!
'"Figure 2: Minimizing alignment errors3.2 Aligning SentencesSentences within paragraphs are aligned with thecharacter-based probabilistic algorithm \[Gale andChurch, 1991b\].
I used their algorithm since, com-pared to the algorithm described in the previous ec-tion, it is based on more firm theoretical groundsand within paragraphs, the assumptions it is basedon are usually met.However, there can be cases where it will be ad-vantageous to use the new algorithm even at thesentence level.
In texts where paragraphs are verylong and contain sequences of inserted sentences, thecharacter-based alignment will not perform well, be-cause of the same considerations discussed above.Even a small amount of additions or omissions fromone of the texts completely throws off alignment al-gorithms that do not entertain this possibility.
Inthis respect, the new algorithm is more general thanprevious length-based approaches to alignment.3.3 M in imiz ing  a l ignment  e r rorsAn inherent property of the dynamic programmingtechnique is that the effect of errors is kept at thelocal level; a single wrong pairing of two segmentsdoes not force all the following pairs to be also in-correct.
This behavior is achieved by forcing anothererror, close to the first one, which compensates forthe mistake and restore synchronization.
As a re-sult, errors in the alignment usually occur in pairs ofopposite directionality (if the first error is to inserta sentence to one of the texts, the second is to in-sert a sentence into the other text).
This situation isdepicted in figure 2.This, of course, can be a perfectly legitimate align-ment but it is more likely to be a result of an error.These cases are easy to detect with a simple algo-rithm, which at the expense of losing some informa-tion can yield much better overall accuracy.Each pair in the alignment is assigned one of 3values: a if it is many-to-one (or one-to-zero) align-ment, /~ if it is one-to-one alignment and 7 if it is451one-to-many (or zero-to-one) alignment.
Intuitively,these values correspond to which text grows fasteras a result of each pair of aligned segments.
Havingdone that, the algorithm is simply a finite-state au-tomaton that detects equences of the form a/~k 7 (or7flk~) where k ranges from 0 to n (a predefined win-dow size).
The effect is that when an error occurs inone position and there is another "error" (with op-posite contribution to the relative length of the text)within a certain number of segments, it is interpretedas a case of compensation; if it occurs farther awaythe situation is interpreted as involving two indepen-dent editing operations.
The window is set to 4, sincethe dynamic programming approach is very fast inrecovering from local errors.When such a sequence is found, all the segmentsincluded in it are marked as insertions o the result-ing alignment contains two contiguous equences ofinserted material, one to each one of the texts.
Thisprevents wrong pairings to occur between the twoidentified alignment errors.
For example, in figure 2,the pairing of segments 5/8 and 6/9 is undone, as itis likely to be incorrect.Another possibility for minimizing the effect ofalignment error has to do with the fact that occa-sionally, the exact location of an insertion of textcannot be determined completely accurately.
I foundthat by disregarding a very small region around eachinstance of an insertion or deletion, the number ofalignment mistakes can be reduced even farther.
Atthe moment I found that to be unnecessary but itmay be advantageous for other applications, uch asobtaining even higher-quality pairs for the purposeof extraction of word correspondences.4 Ident i fy ing  the  Rev is ionsOn a par with identifying which portions of the SLtext were omitted and which portion of the TL wereadded in the process of translation, the tool needsto identify the differences between the two releasesof the SL text.
It needs to know which parts of thetext remain the same and which parts are revisions.To do that, what is needed is an algorithm that canmatch segments of equivalent texts which knows howto handle insertions and deletions.
The algorithmthat was developed for aligning paragraphs i a nat-ural choice.
It handles insertions and deletions uc-cessfully and it has certain other properties whichmake it extremely useful.
Since it is based on lengthcorrespondence (rather than exact string compari-son) it can align t.he two texts even when there areirrelevant structural differences between them.
Theidea is that since the two text are written at differ-ent times and presumably by different writers, therecan be formatting differences which can complicatethe task of identifying the changes.
For this reason,a simple utility like 'diff' cannot be used.
I foundthat by treating this problem as a special case ofalignment, a much cleaner and simpler solution isobtained.5 Const ruct ing  the  B i l ingua l  Dra f tOnce the correspondences between the old and thenew versions and between the old version and itstranslation are obtained, the tool can construct hebilingual draft.
In general, this is a very simple pro-cedure.
New text that appears only in the new ver-sion of the document is copied to the draft as is (inthe SL).
For text that has not been changed, thecorresponding TL text is fetched from the transla-tion and copied into the proper places in the draft.The final result is a bilingual version of the reviseddocument that can be transformed into a full trans-lation with minimal effort.
Some complications mayoccur in this stage as a result of a conspiracy betweencertain specific factors.
For example, if two SL sen-tences are translated by a single TL sentence and oneof them is modified in the new release, probably itis not safe to use any of the translated materials inthe draft.
In such cases, in addition to the revisedtext, the tool copies into the draft both the relevanttext from the old version and the relevant ranslationand marks them appropriately.
The translator thencan decide whether there is a point in using any ofthe existing TL text in the final translation of thedocument.6 Conc lus ions  and  Future  D i rec t ionsI hope to have shown in this paper that simple so-lutions can be quite useful when applied to specificand well-defined problems.
In the process of devel-oping this tool, a solution to a more general problemhas been explored, namely, a more general text align-ment algorithm.
The algorithm described in section3 has proven to be robust and efficient in aligningdifferent ypes of bilingual texts.The accuracy of the alignment process is the mostimportant factor in the performance of this tool.
Oneway to enhance the accuracy of the alignment, whichI intend to pursue in the future, is to apply some formof the algorithm described in \[Kay and PdSscheisen,1988\] as a final stage of the processing.
This willobtain the high accuracy of the computationally in-tensive algorithm while maintaining the benefits ofthe efficient length-based approach.In addition to improving the current ool, I intendto explore other ideas that can apply in more generaltranslation situations.
For example, suppose that anew document needs to be translated and there ex-ist a collection of bilingual documents in the samedomain.
It would be interesting to see how manysentences of the new document can be found, withtheir translation, in this collection.
Probably, exactmatches will not be so common, but one can thinkabout ways to benefit from inexact matches as well.For instance, let us assume that two sentences have452a a long sequence of words in common and one ofthem has already been translated.
It is not uncon-ceivable that obtaining the translation of the com-mon sequence of words will facilitate the translationof the new sentence.
To exploit his possibility, word-level correspondences \[Gale and Church, 1991a\] andphrase level correspondences will be required.If this approach will be successful, it will enablemore complicated and ambitious solutions to increas-ingly more general instances of the "re-translation"problem.AcknowledgementsI would like to thank Martin Kay and Jan Pedersenfor helpful comments and fruitful discussions relatingto this paper.References\[Brown et al, 1991\] Peter F. Brown, Jennifer C. Lai,and Robert L. Mercer.
Alinging sentences in par-allel corpora.
In Proceedings of the 29th Meetingof the ACL, pages 169-176.
Association for Com-putational Linguistics, 1991.\[Gale and Church, 1991a\] WilliamA.
Gale and Ken-neth W. Church.
Identifying word correspon-dences in parallel texts.
In Proceedings ofthe 4thDARPA Speech and Natural Language Workshop,pages 152-157, Pacific Grove, CA., 1991.
MorganKaufmann.\[Gale and Church, 1991b\] William A. Gale andKenneth W. Church.
A program for alinging sen-tences in bilingual corpora.
In Proceedings ofthe29th Meeting of the ACL, pages 177-184.
Associ-ation for Computational Linguistics, 1991.\[Kay and PJSscheisen, 1988\] Martin Kay and MartinRfscheisen.
Text-translation alignment.
XeroxPalo-Alto Reseraeh Center, 1988.453
