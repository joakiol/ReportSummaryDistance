ISSUES IN NATURAL LANGUAGE ACCESS TO DATABASESFROM A LOGIC PROGRAMMING PERSPECTIVEDavid H D WarrenArtificial Intelligence CenterSRI International, Menlo Park, CA 94025, USAI INTRODUCTIONI shall discuss issues in natural language(NL) access to databases in the light of anexperimental NL questlon-answering system, Chat,which I wrote with Fernando Perelra at EdinburghUniversity, and which is described more fullyelsewhere \[8\] \[6\] \[5\].
Our approach wasstrongly influenced by the work of AlalnColmerauer \[2\] and Veronica Dahl \[3\] atMarseille University.Chat processes a NL question in three mainstages:translation planning executionEnglish .... > logic .... > Prolog .... > answercorresponding roughly to: "What does the questionmean?
", "How shall I answer it?
", "What is theanswer?".
The meaning of a NL question, and thedatabase of information about the applicationdomain, are both represented as statements in anextension of a subset of flrst-order logic, whichwe call "definite closed world" (DCW) logic.
Thislogic is a subset of flrst-order logic, in that itadmits only "definite" statements; uncertaininformation ("Either this or that") is notallowed.
DCW logic extends flrst-order logic, inthat it provides constructions to support the"closed world" assumption, that everything notknown to be true is false.Why does Chat use this curious logic as ameaning representation language?
The main reasonis that it can be implemented very efficiently.In fact, DCW logic forms the basis of a generalpurpose programming language, Prolog \[9\] \[I\],due to Colmerauer, which has had a wide variety ofapplications.
Prolog can be viewed either as anextension of pure Lisp, or as an extension of arelational database query language.
Moreover, theefficiency of the DEC-10 Prolog implementation iscomparable both with compiled Lisp \[9\] and withcurrent relational database systems \[6\] (fordatabases within virtual memory).Chat's second main stage, "planning", isresponsible for transforming the logical form ofthe NL query into efficient Prolog \ [6 \ ] .
Thisstep is analogous to "query optlmlsatlon" in arelational database system.
The resulting Prologform is directly executed to yield the answer tothe original question.
On that's domain of worldgeography, most questions within the Englishsubset are answered in well under one second,including queries which involve taking Joinsbetween relations having of the order of athousand tuples.A disadvantage of much current work on NLaccess to databases is that the work is restrictedto providing access to databases, whereas userswould appreciate NL interfaces to computer systemsin general.
Moreover, the attempt to provide a NL"front-end" to databases is surely putting thecart before the horse.
What one should really dois to investigate what "back-end" is needed tosupport NL interfaces to computers, without beingconstrained by the limitations of current databasemanagement systems.I would argue that the "logic programming"approach taken in Chat is the right way to avoidthese drawbacks of current work in NL access todatabases.
Most work which attempts to dealprecisely with the meaning of NL sentences usessome system of logic as an intermediate meaningrepresentation language.
Logic programm/ng isconcerned with turning such systems of logic intopractical computational formalisms.
The outcomeof this "top-down" approach, as reallsed in thelanguage Prolog, has a great deal in common withthe relational approach to databases, which can beseen as the result of a "bottom-up" effort to makedatabase languages more like natural language.However Prolog is much more general thanrelational database formalisms, in that it permitsdata to be defined by general rules having thepower of a fully general programming language.The logic programming approach therefore allowsone to interface NL to general programs as well asto databases.Current Prolog systems, because they weredesigned with programming not databases in mind,are not capable of accommodating really largedatabases.
However there seems to be no technicalobstacle to building a Prolog system that is fullycomparable with current relational databasemanagement systems, while retaining Prolog'sgenerality and efficiency as a programminglanguage.
Indeed, I expect such a system to bedeveloped in the near future, especially now that63Prolog has been chosen as the kernel language forJapan's "Fifth Generation" computer project \[4\].II SPECIFIC ISSUESA.
Aggregate Functions and Quantity QuestionsTo cater for aggregate and quantitydeterminers, such as plural "the", "two", "howmany", etc., DCW logic extends flrst-order logicby allowlng predications of the form:setof(X,P,S)to be read as "the set of Xs such that P isprovable is S" \[7\].
An efficient implementationof *aetof" is provided in DEC-10 Prolog and usedin Chat.
Sets are actually represented as orderedllsts without dupllcate elements.
Something alongthe lines of "setof" seems very necessary, as afirst step at least.The question of how to treat explicitlystored aggregate information, such as "number ofemployees" in a department, is a speclal case ofthe general issue of storing and accessing non-primitive information, to be discussed below insection D.B.
Time and TenseThe problem of providing a common frameworkfor time instants and time intervals is not onethat I have looked into very far, but it wouldseem to be primarily a database rather than alinguistic issue, and to highlight the limitationsof traditional databases, where all facts have tobe stored explicitly.
Queries concerning timeinstants and intervals will generally need to beanswered by calculatlon rather than by simpleretrieval.
A common framework for bothcalculation and retrieval is precisely what thelogic programming approach provides.
For example,the predication:sailed(kennedy,July82,D)occurring in a query might invoke a Prologprocedure "sailed" to calculate the distance Dtravelled, rather than cause a simple data look-up.C.
Quantifying into QuestionsQuantifying into questions is an issue whichwas an important concern in Chat, and one forwhich I feel we produced a reasonably adequatesolution.
The question "Who manages everydepartment?"
would be translated into thefollowing logical form:answer(M) <- \+ exlsts(D, department(D) &\+manages(M,D))where "\+" is to be read as "it is not knownthat", i.e.
the logical form reads "M is ananswer if there is no known department that M doesnot manage".
The question "Who manages eachdepartment?
", on the other hand, would translateinto:answer(D-M) <- department(D) & manages(M,D)generating answers which would be pairs of theform:accounts - andrews ;sales - smith ; etc.The two different loglcal forms result from thedifferent treatments accorded to "each" and"every" by Chat's determiner scoplng algorithm\[8\] \[S\].D.
Querying Semantically Complex FieldsMy general feeling here is that one shouldnot struggle too hard to bend one's NL interfaceto fit an existing database.
Rather the databaseshould be designed to meet the needs of NL access.If the database does not easily support the kindof NL queries the user wants to ask, it isprobably not a well-deslgned database.
In generalit seems best to design a database so that onlyprimitive facts are stored explicitly, othersbeing derived by general rules, and also to avoidstoring redundant information.However this general philosophy may not bepracticable in all cases.
Suppose, indeed, that"childofalumnus" is stored as primitiveinformation.
Now the logical form for "Is JohnJones a child of an alumnus?"
would be:answer(yes) <-childof(X,JohnJones) & alumnus(X)What we seem to need to do is to recognlse that inthis particular case a simplification is possibleusing the following definition:chlldofalumnus(X) <->exlsts(Y, childof(Y,X) & alumnus(Y))giving the derived query:answer(yes) <= childofalumnus(JohnJones)However the loglcal form:answer(X) <=childof(X,JohnJones) & alumnus(X)corresponding to "Of which ~!umnus is John Jones achild?"
would not be susceptible tosimplification, and the answer to the query wouldhave to be "Don't know".64E.
Multi-File QueriesAt the root of the difficulties raised hereis the question of what to do when the conceptsused in the NL query do not directly correspond towhat is stored in the database.
With the logicprogramming approach taken in Chat, there is aslmple solution.
The database is augmented withgeneral rules which define the NL concepts interms of the explicitly stored data.
For example,the rule:lengthofCS,L) <=classof(S,C) & classlengthof(C,L).says that the length of a ship is the length ofthat ship's class.
These rules get invoked whilea query is being executed, and may be consideredto extend the database with "virtual files".Often a better approach would be to apply theserules to preprocess the query in advance of actualexecution.
In any event, there seems to be noneed to treat Joins as implicit, as systems suchas Ladder have done.
Joins, which are equivalentto conjunctions in a logical form, should alwaysbe expressed explicitly, either in the originalquery, or in other domaln-dependent rules whichhelp to support the NL interface.III A FURTHER ISSUE - SEMANTICS OF PLURAL "THE"A difficulty we experienced in developingChat, which I would propose as one of the mostpressing problems in NL access to databases, is todefine an adequate theoretical and computationalsemantics for plural noun phrases, especiallythose with the definite article "the".
It is apressing problem because clearly even the mostminimal subset of NL suitable for querying adatabase must include plural "the".
The problemhas two aspects:(I) to define a precise semantics that isstrictly correct in all cases;(2) to implement this semantics in anefficient way, giving results comparableto what could be achieved if a formaldatabase query language were used inplace of NL.As a first approximation, Chat treats pluraldefinite noun phrases as introducing sets,formallsed using the "setof" construct mentionedearlier.
Thus the translation of "the Europeancountries" would be S where:setof(C,european(C) & country(C),S).
~:"The main drawback of this approach is that itleaves open the question of how predicates appliedto sets relate to those same predicates applied toindividuals.
Thus the question "Do the Europeancountries border the Atlantic?"
gets as part ofits translation:borders(S,atlantlc)where S is the set of European countries.
Shouldthis predication be considered true if allEuropean countries border the Atlantic, or if Justsome of them do?
Or does it mean something else,as in "Are the European countries allies?
"?At the moment, Chat makes the defaultassumption that, in the absence of otherinformation, a predicate is "distributive", i.e.a predication over a set is true if and only if itis true of each element.
So the question above istreated as meaning "Does every European countryborder the Atlantic?".
And "Do the Europeancountries trade with the Caribbean countries?
"would be interpreted as "Does each Europeancountry trade with each Caribbean country?
".Chat only makes this default assumption inthe course of query execution, which may well bevery inefficient.
If the "setof" can effectivelybe dispensed with, producing a simpler logicalform, one would like to do this at an earlierstage and take advantage of optlmisatlonsapplicable to the simpler logical form.A further complication is illustrated by aquestion such as "Who are the children of theemployees?".
A reasonable answer to this questionwould be a table of employees with their children,which is what Chat in fact produces.
If one wereto use the more slmple-mlnded approximationsdiscussed so far, the answer would be simply a setof children, which would be empty (1) if the"childof" predicate were treated as distributive.In general, therefore, Chat treats nesteddefinite noun phrases as introducing '*indexedsets", although the treatment is arguably somewhatad hoc.
A phrase llke "the children of theemployees" translates into S where:setof(E-CC,employee(E) &setof(C,childof(E,C),CC),S).If the indexed set occurs, not in the context of aquestion, but as an argument to another predicate,there is the further complication of defining thesemantics of predicates over indexed sets.Consider, for example, "Are the major cities ofthe Scandinavian countries linked by rail?".
Incases involving aggregate operators such as"total" and "average", an indexed set is clearlyneeded, and Chat handles these cases correctly.Consider, for example, "What is the average of thesalaries of the part-time employees?".
One cannotslmply average over a set of salaries, sinceseveral employees may have the same salary; anindexed set ensures that each employee's salary iscounted separately.To summarise the overall problem, then, canone find a coherent semantics for plural "the"that is intuitively correct, and that iscompatible with efficient database access?65REFERENCES?
I. Clocksln W F and Mellish C S. Pro~ramm/ng i_.nnProlo~.
Springer-Verlag, 1981.2.
Colmerauer A. Un sous-ensemble interessant dufrancais.
RAIRO 13, 4 (1979), pp.
309-336.\[Presented as -~-An interesting naturallanguage subset" at the Workshop on Logic andDatabases, Toulouse, 1977\].3.
Dahl V. Translating Spanish into logicthrough loglc.
AJCL 7, 3 (Sep 1981), pp.
149-164.4.
Fuchi K. Aiming for knowledge informationvrocessing systems.
Intl.
Conf.
ou FifthGeneration Computer Systems, Tokyo, Oct 1981,pp.
101-114.5.
Perelra F C N. Logic for natural languageanalysis.
PhD thesis, University ofEdinburgh, 1982.6.
Warren D H D. Efficient processing ofinteractive relational database queriesexpressed in logic.
Seventh Conf.
on VeryLarge Data Bases, Cannes, France, Sep 1981,pp.
272-281.7.
Warren D H D. Higher-order extensions toProlog - are they needed?
Tenth MachineIntelligence Workshop, Cleveland, Ohio, Nov1981.8.
Warren D H D and Pereira F C N. An efficienteasily adaptable system for interpretingnatural language queries.
Research Paper 156,Dept.
of Artificial Intelligence, Universityof Edinburgh, Feb 1981.
\[Submitted to AJCL\].9.
Warren D H D, Pereira L M and Perelra F C N.Prolog - the language and its implementationcompared with Lisp.
ACM Symposium on AI andProgramming Languages, Rochester, New York,Aug 1977, pp.
109-115.66
