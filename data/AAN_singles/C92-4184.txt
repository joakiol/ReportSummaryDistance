JAUNT:  A Constra int  Solverfor Disjunctive Feature StructuresHiroshi MaruyamaIBM Research,  Tokyo Research Laboratorymaruyama@ t r l .vnet .
ibm.conlAbst rac tTo represent a conlblnatorial nulnber nf ambiguous interpretatioas of a natural a'nguage sentence f-ficiently, a "packed" or "factorized" represeutath)n isnecessary.
We propose a representatitm hat comprisesa set of explicit value disjunctltms and constraints hn-posed on them.
New constraints are successively addedfor disambiguation, dnrhtg which local consistenciesare maintained by an underlying mechanism.
We havedeveloped a constraint solver called JAUNT that embodies this idea.
The latest techniques, including constraint propagation and forwa,vl checking, are employedms constraint satisfaction mechauisms.
JAUNT also al-lows an external recta-inference program tn intervenein the constraint satisfaction process in order to controlthe application of the constraints.1.
I n t roduct ionCertain natural language constructs, such as PP:attachnmnt in English, are known to have a combinato-rial number of syntactic parses (Church & Patil 1988).For example, sentence (1) has 14 (= Catalan(4)) dif=ferent parses because of the three consecutiw~ PPs:Put the block on t}m floor on the table in theroom.
(1)Representing the set of parses in a compact way andextracting a correct parse by using such knowledge asA block cannot be on a thmr and on a tableat the same timeare keys to a practical natural anguage system.The parsing method of Constraint DependencyGrammar (Maruyama 1990) axldressed exactly theseissues.
The essential ideas were?
to represent the set of parses by a constraint net-work, which is emnposed of a set of explicit, vahmdisjunctions and constraints imposed on them,?
to apply constraint propagation i  order to kee I)the constraint network locally consistent, and?
to dynamically add new constraints for disam-biguation.In this paper, we describe a programming toolnamed JAUNT that embodies the above ideas.JAUNT is a constraint solver for disjmmtive featurestructure% whose constraint satisfaction mechanismsare constraint propagation and forwar~l checking.
Inthe next secthm, we show \]tow various ambiguities arerepresented in our explicit vahm disjunction + con-straints cheme.
The constraint satisfaction algorithnlsS :~ {\[id=O,cat=v,head=put,gr=root,mod=nilJ,\[id=i,cat=np,hoad=block,gr=obj,mod~O\],\[id=2,cat=pp,prep=on,head=floor,gr={~loc,postmod~},mod={~O,l~} \ ] ,\[id=S,cat=pp,prep=on,head=table,gr={~ioc,postmod~},mod={~O,l,2~} \],\[id=4,cat=pp,prep=in,head=room,gr={~loc,postmodZ},mod={~O,l,2,3~} J};Figure 1: JAUNT representation f sentence (l)adapted in JAUNT are explained in Section 3.
Section4 describes the rise /)f JAUNT's recta-inference apa-bility.
Section 5 concludes the paper.2.
Exp l i c i t  d i s junct ion  + const ra in tsLet us emmlder sentence (1).
In order to simplifythe following dlscussimt, we iL~stlnle that the sentenceis prepmcessed ms in Figure 1.
This preprocessing canbe done \[W a simple context-free grammar that doesnot determhm PP-attachments.
In the figur% \ [ .
.
.
\ ]is a featnre structure, { .
.
.}
is a llst, and {~{...Y,}is a disjunction.
"Phus~ the variable S represents the(packed) structure of sentence (1) as a list of five eom-\[}mmnts 1 each of whldl corresl)onds to a V: an NP, ora PP.
The grammatical relation (gr=) and the modi-flee (meal=) of the three PPs are disjunctions, meaningthat one of the wdues shouhl be selected, but that thecorrect candidate has not yet beat determined.
For ex-ample, the first PP "on the floor" has {~0,1~,} .
'~s itsand= vahm, which means it can modify either phrase 0(the verb "put") or phrase 1 (the NP "the block").Not all the value combhtations of the disjunctionsare allowed.
In the above example, if a PP modifiesthe main verb, the grammatical relation should be loc.In JAUNT, constraints are introduced by addc state-meats.
The program fragment (2) applies constraintsbetween the moditlee and the grammatical relation ofa pp.fo r  W in S beginaddc W.cat==pp & S.(W?mod).cat in {pp,np} =>W?gr==postmod ;addc W.cat==pp ~ S. (W?mod) .cat==v =>W?gr==loc;end; (2)\[\]ere~ dots and question marks are operators for me:cessing components of bsts or feltture structurest.
'\].
'he?The difference between a (lot and a question mark is that aAc~.s DE COLING-92, NAIVI~S, 23-28 Ao(rr 1992 1 1 6 2 PRec.
OF COLING-92, NANIES, AUG. 23-28, 1992symbols t~ (logical and) an,I => (iml,ly) h~ve their or-dinary logical meanings.
In geuernl, ;tny first-orderlogical formula without qnantifieation is allowed as actmstraint.
'Fhe variable W is bonnd to ea~zh V~ NP~and PP while the addc statelnen|,s lmtweee beg in  andend are executed.
Tim lirst addc statement reaxls ~sft)ll(,ws:If tile category of W is PP aud the category ofthe modifiee of W is either PP or NP, then thegrammatictd relation of W should be postmod.The applied constraints are represented implicitly byan internal data structure called a consltvdnt oeln,o'rk(described t;tter).in axlrlititlu~ tam p,'ojeclivity constrzdut, that modifi~cation liuks do unt crossover, can be progranmmd ~sh)llows:for Y,X in S beginaddc (Y.id < L id  ~ X?mod < Y.Jd) =>l?mod <= Y?mod;end; (3)We have now obtained a packed representation thatconsists of explicit disjunctions, as in Figure 1, andconstraints attached behind them.
Each value conl--bination of the disjunctions that globally sat, isfies timconstraints exactly corresponds to one of the 14 parsesof sentence (1).Every context-free parsing ,~lgorit.hnl timt ha.s apolynomial time bound prodnees a pu~cketl representation of the parsing results (for example, ?
chart illchart parsing (Kaplan 1973), a pa,'si.g mat,'ix in theCKY nmthod (Yonnger 1967), and a .sha,~d-packed-forest in qbmita's algoritlun (Tomita 1987)).
Theserepresentations take advantage of tile regularities ofsyntactic ambiguities in context-free parslog.
For ex-ample, sillce it is known that 1~ consecutive P\]'s ilaveCutalan(n) different p~zrses, it is possible to encodeall PP-attachment ambiguities by renlemberiug only nand the position of tile PPs (Church ~ Patil 1982).However, once we try to extract ~ single illterpretation item these representations, we face a prubhml,because such regularities may be vnid when new cun.-straints ~re introduced for disnmbiguati,nl.
Considerthe application of constraint (4):A verll cannot have two h)eatives.
(4)Tiffs constraint viohttes the regularity of the PI'att;miunent ambiguity and tl,ereh)r,~, the Cb'G be-ledpacked representations lentioned ailove cannot hall--tile this new int~rmation properly without modifyiugthe grammar significantly.
Ill JAUNT~ this constraintis ~pplied by a simple addc statement (5).for X,?
in S beginadde not(X?mod==Y?mod ~ S. (X?mod) .cat==~ &X?gr==i?c & Y?gr==l?c) ; (5)end ;lebrrnaliy~ it ha.s beea proven that Constraint De-peudency Grammars: whose rules Ca~ b(!
written a~sq.estion mrtrk allows ~ disjunction as its value, w\]mre~ a (lotdoes not.
The cllrretlt inl|l lell lentatiOll generates more e|flclentcode for dots than for question m~rks.S := {\[id=O, cat=v ,head=put, gr=root ,and=nil\],lid = i, cat=rip, head=block, gr=obj ,mod=O\] ,lid=2, cat =pp, prep=on, head=f leer,gr={%loc,postmod~,},mod={%0, I%) \] ,\[id=3, cat=pp, prop=on ,head=t able,gr={%inc,postmod~},mod={%0,2~} \] ,lid=4, cat=pp, prep=in, huad=room,gr={~Ioc, postmod%}, mod={%0, I, 2,3~} \]};Figure 2: JAUNT rel,resent~tion f sentence (1)restricted f(irms of JAUNT program: have ~ weakgenerativr power strictly greater than that of CI"G(Maruy~ma 1991), This implies that certain types ofpa~rsing results can be represenu..d by constraint net-works but not by CFG based represmttatioos.Sen and Simmons (1988) proposed syntactic 9~phsand discussed the axlvantagos of having explicit, d isjunctions in a packed data structure.
Their represeutation is similar to ours in tile seuse th;tt they havecon~trahlts attached to the explicit disjnnctive datastructure.
However, they d .
uot diseusa how to ~rp.ply disam\[liguation k owledge in order tn reduce theambiguity effectiwqy, lu JAUNT, the underlying con-straint saris\[action algorithm removes im:onsistmdl val-IteS ~cnd keeps tim constrai/it uetwork locally consistent.Consider, lot example~ the application of the new constraint (6):An object {:annot In!
on two distinct objectsa,t the same tin,e.
(6)This constraint is written a~s follows:for X,Y in S beginaddc X.prap~=on ~ Y.prep==on &X?mod in {pp,np} => X?mod != Y?mod;17)end;After this coustraint \[ta.s beet, evahl~ted~ tile andattribute of the t 'P  "on the t~ble" becomes {~0,2Z},n~ strewn it, Figure 2, because the vMue 1 is locallyinconsisteut ;mcnrtling to the coostraints applied su far,and central, pneti( il,ate ill any of the remaining seveure;tdings.There },ave been several ~Lttenlpts to incorporate disjunctions in uniiicatinu-ba.sed grammars re.g.
Karltuoen 1984).
Constr.
'tints ;ere introduced by ~t unifi-cation between two disjuuctiw.'
feature structures.
Annificatio, succeeds only if there are combinations (ffwducs of the disjunctions that s~tisfy tile equality constraints implied by the u,lificatio..
It, order to clarifythe exl,ressiw~ power of fe~ture structures with gen-eral disjunctions, Kasper ~ Rounds (1986) defined alogic-be-led notation called FM1, A fornlula in FMI,can be rewritteu as an addc statement in JAUNT, andhence, constraints expre~ed hy a unification can alsobe expr~ssed in JAUNT.
In ~|dition, in unification-based grammars, the nnly basic predicate is equality,aud other useful predicates, such em inequalities andset inclusion/membership, arediflicuh to represent.
In~If the secottd PP "on tile table" modifies the NP "the block,"the first PP "on tim riot,r" ha.s no legal modifiee~.ACRES DE COLING-92, Nam'l~s, 23-28 AOUX' 1992 1 1 6 3 I'koc.
OV COLING-92, NANTES, AU(L 23-28, 1992JAUNT,  inequalities and set operations are built-in,and user-defined predicates are also allowed.3.
Const ra in t - sa t i s fac t ion  a lgor i thmSince every disjunction in a JAUNT program has afinite number of choices, its satisfiability problem canbe formulated as a constraint satisfaction problem overa finite donlain (sometimes called a consi.~tenl-htbelingproblem (Men\[snarl 1974)).
Much effort has been devoted to developing efficient algorithms for this problea.Two such algorithms are employed in JAUNT.
Ore,is the constrainl propagation algorithm (Mackworth1977), which is activated when a new constraint isadded by addc statements.
The constraint propaga-tion algorithm runs in polynomial time, and eliminateslocally inconsistent vMues from the choice points andpropagates the results to the neighboring constraints.The constraint propagation algorithm usually reducesthe size of the search space significantly.The other algorithm used in JAUNT is the forward-checking Mgorithm (Haralick &E l l io t t  1980), whichis triggered by the execution of a special f ind  s tat~meat.
It is essentially a back-tracking algorithm, butit prunes unpromising branches whenever temporalchoices are made, thus significantly reducing the sizeof the remaining search space.This section describes in detail the constraint propa-gation Mgorithm used in JAUNT.
Re'0ders are referredto Hentenryck (1989) for the forward-checking algo-rlthm.3.1 Internal representat ion  of  constraintsBob)re describing the Mgorithm in detail, let us ex-plain the internal representation of the constraints, hia compiled \[nodule of a JAUNT program, a disjunc-tion is represented by a data structure called a ChoicePoint (CP).
A CP maintains a list of ptJssible values(called a domain) at the time of program execution.When a new constraint is added by a addc statement,the constraint is represented internally ms a conslrrintms\[lisa For example~ assume that W is bound to\[gr={~loc ,posttaod~}, mod--{Y,0, lY,}\].W?gr and W?mod are represented internMly a.~ CPswhose domain size is two.
Then, when the constraints(2) are evaluated, a new two-dlmensional constraintmatrix is created between the two CPs, as shown inFigure 3.Each dimension of the constraint matrix correspondsto a CP.
The elements indicate whether the particn-lar combination of the CP vMues is legal (1) or illegal(0).
For example, W?gr=loc and W?mod=O satisfies theconstraint and hence the corresponding element in thematrix is 1.If another adds statement is then executed declar-ing that ttm value combination of W?gr=pontraod andW?mod=l is illegal, the corresponding element in thematrix is changed to 0, yielding the matrix shown inFigure 4.W?g( W?rnodFigure 3: Constraint matrixW?~lr W?rnod\[ {~IoC pOSFigure 4: Updated constraint matrixSuppose that the executioll of art adde statementreferring to 7t different CPs XhX2,... ,Xn revealsthat the value combhtation < xl,x~,...:x,~ > is il-legal.
JAUNT first locates an n dimensional constraint matrix connected to X1,X2,...,X=, and setits element corresponding to the value combination< xi, x2, ..., x,~ > to 0.
If there is no such constraintmatrix, JAUNT creates a new one whose elements areall 1 except for the element of < xl,x~,...~x,, > thatis set to 0.8.2 Constraint propagationThe ba.sie idea of constraint propagation is to remow~' locally inconsistent values from the, choice pointsand to reduce their domain size before a back trackingsearch is performed.\[n the example ~d)ove, let us consider the rowaf W?gr=postraod in the constrah\[t matrix.
Wheni~?gr=postmod~ the elements of the matrix are zero,whatew~r value W?mod Lakes.
This means that there areno glnbal solutions with W?gr=postmod, and thereforethis value can be safely removed fronl tim domain ofthe CP W?gr.
Similarly, Id?rnod=l ca.n be removed fromthe domain of the CP W?raod.In general, when a particular row or column (orplane or hyperplaue, if the dimension is greater th~ntwo) contains all zero elements, the correspondingvMne zl of CP X can  never participate in ~ solutimt(see Figure 5).
Therefore, a'i can be eliminated frmnthe domaitt of X.
Whenever a constraint matrix isupdated~ JAUNT searches for a. hyperplane whose ele~ale/Its are all zero aud relnoves the corresponding v~thlefrom its domain.
This may updrrte other constraintmatrices conllected to l he C.P~ and may cause rabiesin other CPs to be elhninated.
Thus, updates are prop-agated ow~r the network of constraints until the entirenetwork reaches a stable state.For every hyperplane in a constraint matrix, JAUNTACTUS DE COLING-92.
NAbrrES, 23-28 AO(Yr 1992 1 l 6 4 PROC.
OF COLING-92, NANIES, AUG. 23-28, 1992X\Y  ...xi 0 (I 0 ... 0Figure 5: Locally innonsistent value a:isuppo.\[~3\[\]Numtmr of I'sill the plal~\[ ~ 3/~ ~suppo~\[Xl\[lFigurt+ 6: Supportkeeps the current number of t's on that plane, calledthe support (see Figure 6).
When a certain elementof a constraint matrix apl)ears to be inconsistent a,s aresult of the evaluation of addc statement, he curresponding support in each dimensiun is decremented.When a value in a CP is removed by constraint propstation, the carrespondlng hyperplaue of every constraint matrix connected to the (11' is removed, attdthe result is reflected i~( all tt~e support values in thematrix.
This algorithm is a uatnral extension of Mohrand Henderson's arc-c(msistency algorithm (Mohr &Henderson 1986) for allowing n:ary constraints.The cmnputathmal complexity of our constralutpropagation algorithm is hounded by O(eIMD, whereIMI is the siz,~ of the constraint matrices and e is thenumber of the cunstraint matrices, becattse at lemstoue element in st)me matrix is changed to 0 from I forevery iteration of constraint propagatiom If the constr~ints are Iocal~ that is, if the arity of each ennstraintis bounded by a small integer, this time bound is apolynomial of the number of disjunctions.Our algorlthnr tries to maintain h,cal consistencyix( the sense that it runs(tiers only one eonstr+dnt matrix at.
+t time.
This is a generalization of the notioncalled am consistency (Mackworth 1977) or pair-wisecousisteucy, and is equlva\]ent tn the flrst two stepsof Ka.sper's (1987) successive aptnvximatimL Algorithms for achieving more global consistency by look:ins at mnltlple constraint matrices are possibh+, but asCarter (1990) argues in his paper on the experimen.tal Propane parser, once pair-wise consistencies havebeen achieved, peffurnling a backtrack search is usu-ally more efficient than using higher-level consistencyalgorithms.
In JAUNT, a forward:checking algorithm,which is far better than the traditional backtrackingalgorithms (Haraliek & Elliot 1980), is provided forgenerating global solutions, if necessary, although th\[~intended use of JAUNT is to combine constraint propagation with the recta-inference d scribed in the uexlsection~ rather than t() perfornl a search.There hay,' t~en attl!nlpts to formulate natural an-guage pro,:essing as a cunstraiut satisfaction prob-lenl with broader don~ains (fl~r example, the Herbrauddomain).
CIL (Mukai 1988) and cu=Pmh)g (Tsuda,ltasida & Sirai 1(.189) are examples of such atteuipts.There is a trade-off between the expressive power andthe COmlmtatiunal complexity, aml we argue that linitedonlaius have sutticient expressive power while retain:ing the couqmtational eflicieucy implied by the algu+rithms described above.4.
Meta : in fe renceA cunsiM,(~nt- \ ]at)e l l iLg pr( )b l ( !n l  uLay or nlay not  havea solution.
I f  it ha_s role, it is most probable that thereare multiple solutions.
In fax:l, it+ the glven constraintsare lint 'tight' enough tu narrow down the uumber ufsoh l t i t l l i S  to  (Hit?
o r  a few!
the  prohhml Ill~l,y have  an  eXponential number of solntions.
This situatlon is com-mon hL natural anguage processing.
Strict grammarscanse analysis failures for grammatical sentelt{;(~s~ i)nthe other hand, lnose graulmars pruduce a combinatorially explosive number oF parse trees fin' certain typesof sentence.
'lb avoid this situation, cnnstrahits shouhlbe dynamically added aud remuw~d according to thesize of the stdul.iut( space+ hi uther words, a constraintsolver shunhl tm provided with a means of watchingits own infl~rence process and changing its strategy ac=cord(us to tim observati<m.To set>purl the metaAnference apability~ JAUNTprovides the following built in functions:1. i ncous is tentp( )  ... Non-NULl, wilen JAUNTdetects i ncD l ts l s tenc ies  bf~tweell co l t s t ra in ts2.
saveS(ate()  ... Save the current status of con-straint sat(slant(usg.
loadState()  ... lLestore the saved status of con-.straint satisfactiuu.lu JAUN'I'~ tire state of the constraint:satisfactionprocess is deJined ms the set of all choice points and allcosstraint nlatrices.
Oth,~r statuses bUlC\]I mS global audlocal variables, the prograln couuter+ ;utd the coutrolstack are l in t  saved I sn applications (If cmlstraints nanbe uadone without distilrbing the c<uttrul l .w.Meta inh~renc,~ is nonletlntes perh~rmed in an exterhal nlodule.
JAUNT has interqm)cess crassus(ca-tion primitiw~s hmm~d on UNIX so<:kets.
With thesemet;uinference apalfilities, an independent inferenceprocess timing ext.ernal knuwh~dge can tilt)ill(or and iIi-terveneln a JAUNT progra.nt.
If it detects an incon-sistency, it instructs the JAUNT i>rogram to go b.
'u:ktu the previous inferenc\[~ state and try another set ofconstraints; if it finds thai the solution spa~:e is notsmall enough+ it may giw~ new constraints from its ownknowledge source.
By separating the rneta-inferencemodule from tile object-level JAUNT program, modu-larity \[)f knowledge is ;whieved.As an application <>f the meta:inference apability,let us describe the interactive Japanesp parser of theJapanese t<FEnglish m;u:hine translation system JETS(Maruyama, Watanabe, & Oginn 1990).
The systmnstructure is shown in Figure 7.
Tim morphologicalA(:rl~s BE COL1NG+92, NANTES, 23-28 ^ O(JT 1992 1 1 6 S Pron.
oi: COLING-92, Nm,n'zs, AUG. 23-28, 1992Fignre 7: Analysis p~rt of JETS\[~ord_id=O,string="ANATh",modifieeffi{~1,2,3,4~},lex={~, \[part_of_speech=pronoun, sf={hum}\],\[part _of _speech=noun, sf={loc}\]%),Figure 8: Input feature structureanalyzer analyzes an input sentence using a type-3grarl'lln&r and creates a feature structure that COll-talus disjunctions for lexieal and attachment ambigu-ities (Figure 8).
The syntactic analysis program writ-ten in JAUNT applies grammatical constraints basedon Constraint Dependency Grammar to these choicepoints and sends the result to a user-interlace run-ning on a separate machine.
The amblguons choicepoints (those with domain size> 1) are highlighted onthe screen, and the end user can select an appropri-ate value for some of them.
This information is sentback to the JAUNT program through the inter-processcommunication channel and applied in the form of newconstraints.
This iteration is written in JAUNT as fed-lows;Uif := opon(Client~ame,"socket") ;while true beginsend(U/f ,S) ;X := read(Ui f ) ;if X==goAhead then break;saveStato() ;addc S. (X.id)?mod==X.mod;if /nconsistentp() then beginsend(Uif,"inconsistency detected") ;l oadStateO ;end;end;Thus, h* JETS, the end nser acts as an external know\[edge source to guide the inference process of the pro-gram.SHALT2, an experimental English-to-Japanese ma-chine translation system currently being developed atIBM's Tokyo Research Laboratory, has a similar sys-tem structure (Nagao 1990).
Instead of user interac-tion, an external example ba.~e built from an exist-ing corpus is used for resolving attachment amblgui-ties in SHAUF2.
Thus, clear modularization ofgeneralsyntactic/semantic knowledge from domain-dependentexample-based knowledge is achieved.5.
Conc lus ionWe have described a constraint solver for efficientlyprocessing ambi~nlties in natural anguage sentences.Disambignation is dntm by dynamically adding newconstraints while the constraint satisfaction algorithmmainteoius local consistency.
The system is actuallybnldemented and used in two macl6ue translatiun sys-tems.References1.
Carter, I}., 1990.
"Efficient Disjunctive Unification forBottom-Up Parsing," COLING '90.2.
Church, K. and Patti, R., 1982 "Coping with SyntacticAmbiguity, or llow to Put the Block m the Box on theTable."
Arne*-tcan d. of Compulattonal Linguistics 8.3. llaralick, M. and Elliott, G. 1,., 1980, "lnerea~sing TreeSearch Efficiency for Constraint Sittisfaction Prob-lems," Arhficial Intelligence 1~.4.
llentenryck~ P. V., 1989, Constraint Satisfaction InLogic Programming, MIT Press.5.
Karttunen, L., 1984, "FcaUtres and Values~" COL1NG'8q.6.
Ka.sper, R. T., 1987, "A Unification Method forDis.Inactive Feature I}escriptions," 25lh ACL AnnualMeeting.7.
Kasper, IL T., and Rounds, W. C., 1986, "A LogicalSemantics for Feature Structures," 2Jth ACL AnnualMeeting.8.
Mackworth~ A. K., 1977, "Consistency m Networks ofll.elation," Artificial lntelhgence 8.9.
Maruyama, 11., 1990, "StmlcUtral )isambiguationwith Constraint Propagation," 28th ACL AnnualMeelin 9.10.
Maruyama, H., 1991, "Constraint I)ependency Grammar and Its Weak Generative Capacity," Advances inSoftware Science and Technology 3.11.
Maruyama, H., Watanabe, 11., and Ogino, S., 1990,"An Interactive Japanese Parser for Machine 'lYansla-tion," COLING '90.12.
Montanari, U., 1974, "Networks of Constraints: Fun-damental Properties and Applications to Picture Processing," Information Science 7.13.
Mohr, R. and llenderson, T., 1986, "Arc and PathConsistency Revisited," Artificial Intelligence 28.14.
Mukai, K. 1988, "Partially Specified Term in LogicProgramming for IAnguistic Analysis," InternationalConference on Fifth Generation Computer Systems,Tokyo.15.
Nagao, K, 1990~ "Constraints and Preferences: In-tegrating Grammatical nd Semantic Kimwledge forStructural )isambiguation," Pacific Rim Interna-tional Conference on Al, Nagoya.16.
Se,, J. and Simmons, R. 1988, "Syntactic Graphs: aRepresentation for the Union of All Ambiguous ParseTrees," Computational Linguistics 1517.
Tsuda, 11., llasida, K., and Sirai, I1., 1989, "JPSGParser on Constraint Logic Programming," 4th ACLEuropean Chapter.18.
Younger, D. H., 1967, "Recognition and Parsing ofContext-Free Languages in time nO, '' Information andControl 10.ACRES DE COLING-92, NANTEs, 23-28 Ao~r 1992 I 1 6 6 PRec.
OF COLING-92.
NANTES, AUG. 23-28, 1992
