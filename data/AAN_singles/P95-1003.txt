The Replace OperatorLauri KarttunenRank Xerox Research Centre6, chemin de MaupertuisF-38240 Meylan, Francelauri ,  kar t tunen@xerox ,  frAbst rac tThis paper introduces to the calculus ofregular expressions a replace operator anddefines a set of replacement expressionsthat concisely encode alternate variationsof the operation.
Replace expressions de-note regular elations, defined in terms ofother regular expression operators.
Thebasic case is unconditional obligatory re-placement.
We develop several versions ofconditional replacement that allow the op-eration to be constrained by contextO.
IntroductionLinguistic descriptions in phonology, morphology,and syntax typically make use of an operation thatreplaces ome symbol or sequence of symbols byanother sequence or symbol.
We consider here thereplacement operation in the context of finite-stategrammars.Our purpose in this paper is twofold.
One is todefine replacement in a very general way, explicitlyallowing replacement to be constrained by inputand output contexts, as in two-level rules(Koskenniemi 1983), but without the restriction ofonly single-symbol replacements.
The second ob-jective is to define replacement within a generalcalculus of regular expressions so that replace-ments can be conveniently combined with otherkinds of operations, uch as composition and un-ion, to form complex expressions.Our replacement operators are close relatives of therewrite-operator defined in Kaplan and Kay 1994,but they are not identical to it.
We discuss theirrelationship n a section at the end of the paper.0.
1.
Simple regular expressionsThe replacement operators are defined by means ofregular expressions.
Some of the operators we useto define them are specific to Xerox implementa-tions of the finite-state calculus, but equivalentformulations could easily be found in other nota-tions.The table below describes the types of expressionsand special symbols that are used to define thereplacement operators.\[1\](A) option (union of A with theempty string)~A complement (negation)\A term complement (any symbolother than A)$A contains (all strings containing atleast one A)A* Kleene starA+ Kleene plusA/B ignore (A interspersed withstrings from B)A B concatenationA \[ B unionA & B intersectionA - B relative complement (minus)A .
x .
B crossproduct (Cartesian product)A .
o.
B compositionSquare brackets, \[ l, are used for grouping expres-sions.
Thus \[AI is equivalent to A while (A) is not.The order in the above table corresponds to theprecedence of the operations.
The prefix operators(- ,  \ ,  and $) bind more tightly than the postfixoperators (*, +, and/ ) ,  which in turn rank aboveconcatenation.
Union, intersection, and relativecomplement are considered weaker than concate-nation but stronger than crossproduct and compo-sition.
Operators haring the same precedence areinterpreted left-to-right.
Our new replacementoperator goes in a class between the Boolean op-erators and composition.
Taking advantage of allthese conventions, the fully bracketed expression\[2\]\ [ \ [ \ [~\[a l l*  \[\[b\]/x\]\] I el .x.
d ;16can be rewritten more concisely as~a*  b /x  I c .x.
d\[31Expressions that contain the crossproduct (.
x . )
orthe composition (.
o . )
operator describe regularrelations rather than regular languages.
A regularrelation is a mapping from one regular language toanother one.
Regular languages correspond tosimple finite-state automata; regular elations aremodeled by finite-state transducers.
In the relationa .
x.
B, we call the first member, A, the upperlanguage and the second member, B, the lower lan-guage.To make the notation less cumbersome, we sys-tematically ignore the distinction between the lan-guage A and the identity relation that maps everystring of A to itself.
Correspondingly, a simple au-tomaton may be thought of as representing a lan-guage or as a transducer for its identity relation.For the sake of convenience, we also equate a lan-guage consisting of a single string with the stringitself.
Thus the expression abc may denote, de-pending on the context, (i) the string abc, (ii) thelanguage consisting of the string abc, and (iii) theidentity relation on that language.We recognize two kinds of symbols: simple sym-bols (a, b, c, etc.)
and fst pairs (a : b, y : z, etc.).
Anfst pair a : b can be thought of as the crossproductof a and b, the minimal relation consisting of a (theupper symbol) and b (the lower symbol).
Becausewe regard the identity relation on A as equivalentto A, we write a : a as just a.
There are two specialsymbols\[4\]0 epsilon (the empty string).?
any symbol in the known alphabet and itsextensions.The escape character, %, allows letters that have aspecial meaning in the calculus to be used as ordi-nary symbols.
Thus %& denotes a literal ampersandas opposed to &, the intersection operator; %0 is theordinary zero symbol.The following simple expressions appear fre-quently in our formulas:\[5\]\[ \] the empty string language.~ $ \[ \] the null set.?
* the universal ("sigma-star") language: allpossible strings of any length including theempty string.1.
Unconditional replacementTo the regular-expression language describedabove, we add the new replacement operator.
Theunconditional replacement ofUPPER by LOWER iswritten\[6\]UPPER -> LOWERHere UPPER and LOWER are any regular expres-sions that describe simple regular languages.
Wedefine this replacement expression as\[71\[ NO UPPER \ [UPPER .x.
LOWER\ ]  \] *NO UPPER ;where NO UPPER abbreviates ~$ \[UPPER - \[\] \].The def i~ ion  describes a regular elation whosemembers contain any number (including zero) ofiterations of \[UPPER .
x.  LOWER\], possibly alter-nating with strings not containing UPPER that aremapped to themselves.1.1.
ExamplesWe illustrate the meaning of the replacement op-erator with a few simple examples.
The regularexpression\[8\]a b I c ->  x ;(same as \[\[a b\] \[ c\] ->  x)describes a relation consisting of an infinite set ofpairs such as\[9\]a b a c ax a x awhere all occurrences of ab and c are mapped to xinterspersed with unchanging pairings.
It also in-dudes all possible pairs like\[101x a x ax a x athat do not contain either ab or c anywhere.Figure 1 shows the state diagram of a transducerthat encodes this relation.
The transducer consistsof states and arcs that indicate a transition from17state to state over a given pair of symbols.
For con-venience we represent identity pairs by a singlesymbol; for example, we write a : a as a.
The sym-bol ?
represents here the identity pairs of symbolsthat are not explicitly present in the network.
Inthis case, ?
stands for any identity pair other thana : a, b : b, c : c, and x : x. Transitions that differonly with respect o the label are collapsed into asingle multiply labelled arc.
The state labeled 0 isthe start state.
Final states are distinguished by adouble circle.?
C : ~  aC:X - -Figure 1: a b I c -> xEvery pair of strings in the relation corresponds toa path from the initial 0 state of the transducer to afinal state.
The abaca  to xaxa  path is 0 -1 -0 -2 -0-2, where the 2-0 transition is over a c : x arc.In case a given input string matches the replace-ment relation in two ways, two outputs are pro-duced.
For example,\[111a b \] b c ->  x ;c ?Figure 2: a b \[ b c ->  xmaps abc to both ax and xc:a b c , a b ca x x c\[121The corresponding transducer paths in Figure 2 are0 -1 -3 -0  and 0 -2 -0 -0 ,  where the last 0-0 transi-tion is over a c arc.If this ambiguity is not desirable, we may writetwo replacement expressions and compose them toindicate which replacement should be preferred if achoice has to be made.
For example, if the ab matchshould have precedence, we write\[13\]a b - > xo0ob c ->  x ;a:xX XFigure3: a b -> x .o .
b c -> xThis composite relation produces the same outputas the previous one except for strings like abcwhere it unambiguously makes only the first re-placement, giving xc as the output.
The abe to xcpath in Figure 3 is 0 -2 -0 -0 .1.2.
Special casesLet us illustrate the meaning of the replacementoperator by considering what our definition im-plies in a few spedal cases.If UPPER is the empty set, as in\[\] ->  a \[ b\[141the expression compiles to a transducer that freelyinserts as and bs in the input string.If UPPER describes the null set, as in,~$\[ \]  -> a \[ b ;\[15118the LOWER part is irrelevant because there is noreplacement.
This expression is a description of thesigma-star language.If LOWER describes the empty set, replacement be-comes deletion.
For example,\[16\]a I b -> \[\]removes all as and bs from the input.If LOWER describes the null set, as ina \[ b -> ~$\[\] ;\[17\]all strings containing UPPER, here a or b, are ex-cluded from the upper side language.
Everythingelse is mapped to iiself.
An equivalent expression is~$ \[a \[ b\].1.3.
Inverse replacementThe inverse replacement operator.UPPER <- LOWER\[18\]is defined as the inverse of the relation LOWER ->UPPER.1.4.
Optional replacementAn optional version of unconditional replacementis derived simply by augmenting LOWER with UP-PER in the replacement relation.\[19\]UPPER (->) LOWERis defined asUPPER -> \ [LOWER \[ UPPER\ ]\[20\]The optional replacement relation maps UPPER toboth LOWER and UPPER.
The optional version of <-is defined in the same way.2.
Conditional replacementWe now extend the notion of simple replacementby allowing the operation to be constrained by aleft and a right context.
A conditional replacementexpression has four components: UPPER, LOWER,LEFT, and RIGHT.
They must all be regular expres-sions that describe a simple language.
We write thereplacement part UPPER -> LOWER, as before, andthe context part as LEFT _ RIGHT, where theunderscore indicates where the replacement takesplace.In addition, we need a separator between the re-placement and the context part.
We use four alter-nate separators, \[I, / / ,  \ \ and \ / ,  which gives riseto four types of conditional replacement expres-sions:\[21l(1) Upward-oriented:UPPER -> LOWER J\[ LEFT  R IGHT ;(2) Right-oriented:UPPER-> LOWER // LEFT  R IGHT ;(3) Left-oriented:UPPER -> LOWER \\ LEFT  R IGHT ;(4) Downward-oriented:UPPER -> LOWER \/ LEFT  R IGHT ;All four kinds of replacement expressions describea relation that maps UPPER to LOWER betweenLEFT and RIGHT leaving everything else un-changed.
The difference is in the intelpretation of'%etween LEFT  and RIGHT."2.1.
Overview: divide and conquerWe define UPPER-> LOWER l\[ LEFT  R IGHTand the other versions of conditional replacementin terms of expressions that are already in our regu-lar expression language, including the uncondi-tional version just defined.
Our general intention isto make the conditional replacement behave ex-actly like unconditional replacement except hat theoperation does not take place unless the specifiedcontext is present.This may seem a simple matter but it is not, asKaplan and Kay 1994 show.
There are severalsources of complexity.
One is that the part that isbeing replaced may at the same time serve as thecontext of another adjacent replacement.
Anothercomplication is the fact just mentioned: there areseveral ways to constrain a replacement by a con-text.We solve both problems using a technique that wasoriginally invented for the implementation ofphonological rewrite rules (Kaplan and Kay 1981,1994) and later adapted for two-level rules (Kaplan,Karttunen, Koskenniemi 1987; Karttunen and19Beesley 1992).
The strategy is first to decompose thecomplex relation into a set of relatively simplecomponents, define the components independentlyof one another, and then define the whole opera-tion as a composition of these auxiliary relations.We need six intermediate relations, to be definedshortly:\[22\](1) InsertBrackets(2) ConstrainBrackets(3) LeftContext(4) RightContext(5) Replace(6) RemoveBracketsRelations (1), (5), and (6) involve the unconditionalreplacement operator defined in the previous sec-tion.Two auxiliary symbols, < and >, are introduced in(1) and (6).
The left bracket, <, indicates the end of aleft context.
The right bracket, >, marks the begin-ning of a complete right context.
The distribution ofthe auxiliary brackets is controlled by (2), (3), and(4).
The relations (1) and (6) that introduce thebrackets internal to the composition at the sametime remove them from the result.2.2.
Basic definitionThe full spedfication of the six component relationsis given below.
Here UPPER, LOWER, LEFT, andRIGHT are placeholders for regular expressions ofany complexity.In each case we give a regular expression that pre-cisely defines the component followed by an Eng-lish sentence describing the same language or rela-tion.
In our regular expression language, we haveto prefix the auxiliary context markers with theescape symbol % to distinguish them from otheruses of < and >.\[23\](1) InsertBrackets\[\] <-  %< 1%> ;The relation that eliminates from the upper side lan-guage all context markers that appear on the lowerside.\[24\](2) ConstrainBrackets~$ \[%< %>\] ;The language consisting of strings that do not contain<> anywhere.\[2s\](3) LeftContext-\[-\[.
.
.LEFT\] \[<...\]\] &~\[ \[...LEFT\] ~\[<...\]\] ;The language in which any instance of < is immedi-ately preceded by LEFT, and every LEFT  is ii~iedi-ately followed by <, ignoring irrelevant brackets.Here \ [ .
.
.
LEFT \ ]  is an abbreviation for \[ \[?
*LEFT/\[%<I%>\]\] - \[2" %<\] \], that is, anystringending in LEFT, ignoring all brackets except for afinal <.
Similarly, \ [%<.. .
\] stands for \[%</%>?
* \], any string beginning with <, ignoring theother bracket.\[26\](4) RightContext~\[ \[...>\] -\[RIGHT...\] &~\[~\[...>\] \[RIGHT...\] ;The language in which any instance of > is immedi-ately followed by RIGHT, and any RIGHT is immedi-ately preceded by >, ignoring irrelevant brackets.Here \[ .
.
.>\] abbreviates \[?
* %>/%<\], andRIGHT.
.
.
stands for \[RIGHT/ \[%< 1%>\] - \[%>?
* \] \], that is, any string beginning with RIGHT,ignoring all brackets except for an initial >.\[27\](5) Replace%< UPPER/\[%<I %>\] %>->%< LOWER/ \[%< I %>\] %> ;The unconditional replacement of <UPPER> by<LOWER>, ignoring irrelevant brackets.The redundant brackets on the lower side are im-portant for the other versions of the operation.\[28\](6) RemoveBrackets%< t %>-> \ [ \ ]  ;20The relation that maps the strings of the upper lan-guage to the same strings without any context mark-ers.The upper side brackets are eliminated by the in-verse replacement defined in (1).2.3.
Four ways of using contextsThe complete definition of the first version of con-ditional replacement is the composition of these sixrelations:\[29\]UPPER -> LOWER \[l LEFT  R IGHT ;Inser tBracketsoO.Const ra inBracketsoO.Lef tContext?O.RightContext.OoRep laceoO.RemoveBrackets  ;The composition with the left and right contextconstraints prior to the replacement means that anyinstance of UPPER that is subject o replacement issurrounded by the proper context on the upperside.
Within this region, replacement operates justas it does in the unconditional case.Three other versions of conditional replacementcan be defined by applying one, or the other, orboth context constraints on the lower side of therelation.
It is done by varying the order of the threemiddle relations in the composition.
In the right-oriented version (//),  the left context is checked onthe lower side of replacement:\[30\]UPPER -> LOWER // LEFT  R IGHT ;?
o .RightContext?OoRep laceoOoLef tContext?
.oThe left-oriented version applies the constraints inthe opposite order:UPPER -> LOWER \\ LEFT  R IGHT\[31\].
?
?Lef tContext.O .Replace.o.RightContext?
?
?The first three versions roughly correspond to thethree alternative interpretations of phonologicalrewrite rules discussed in Kaplan and Kay 1994.The upward-oriented version corresponds to si-multaneous rule application; the right- and left-oriented versions can model rightward or leftwarditerating processes, such as vowel harmony andassimilation.The fourth logical possibility is that the replace-ment operation isconstrained by the lower context.\[32\]UPPER -> LOWER \/ LEFT  R IGHT ;?
o oRep lace.O .Lef tContextoOoRightContext.
?
?When the component relations are composed to-gether in this manner, UPPER gets mapped toLOWER just in case it ends up between LEFT andRIGHT in the output string.2.4.
ExamplesLet us illustrate the consequences of these defini-tions with a few examples.
We consider four ver-sions of the same replacement expression, startingwith the upward-oriented version\[331a b -> x II a b a ;applied to the string abababa.
The resulting rela-tion isab ab  a b aa b x x aThe second and the third occurrence of ab are re-placed by x here because they are between ab and21x on the upper side language of the relation?
Atransducer for the relation is shown in Figure 4.?
x b?l x '<!
/Figure4: a b -> x I I  a b _ aThe path through the network that maps abababato abxxa is 0 -1 -2 -5 -7 -5 -6 -3 .The right-oriented version,a b -> x / /  a b a;?
9bXO--G CrFigure5: a b -> x / /  a b _ agivesusadifferentresult:a b a b a b aab  x abab ?b?
(a:xFigure6: a b -> x \ \  a b _ aWith abababa composed on the upper side, ityields\[38\]a b a b a b aa b a b x a\[35\] by the path 0 -1 -2 -3 -4 -5 -6 -3 .\[36\]following the path 0 -1 -  2-  5-  6 -1 -  2 -  3.
The lastoccurrence ofab must remain unchanged because itdoes not have the required left context on the lowerside.The left-oriented version of the rule shows theopposite behavior because it constrains the leftcontext on the upper side of the replacement re-lation and the right context on the lower side.\[37\]a b -> x \ \  a b a ;The first two occurrences of ab remain unchangedbecause neither one has the proper ight context onthe lower side to be replaced by x.Finally, the downward-oriented fourth version:\[39\]a b -> x \ /  a b a ;a:xFigure7: a b -> x \ /  a b _ aThis time, surprisingly, we get two outputs fromthe same input:\[40\]ab a b a b  a , ab  ab  abaa b x a b a a b a b x aPath 0-1-2-5-6-1-2-3 yields abxaba,  path 0-1-2-3-4-5-6-1 gives us ababxaIt is easy to see that if the constraint for the re-placement pertains to the lower side, then in thiscase it can be satisfied in two ways.223.
Comparisons3.1.
Phonological rewrite rulesOur definition of replacement is in its technicalaspects very closely related to the way phonologi-cal rewrite-rules are defined in Kaplan and Kay1994 but there are important differences.
The initialmotivation in their original 1981 presentation wasto model a left-to-right deterministic process of ruleapplication.
In the course of exploring the issues,Kaplan and Kay developed a more abstract notionof rewrite rules, which we exploit here, but their1994 paper etains the procedural point of view.Our paper has a very different starting point.
Thebasic case for us is unconditional obligatory re-placement, defined in a purely relational waywithout any consideration of how it might be ap-plied.
By starting with obligatory replacement, wecan easily define an optional version of the opera-tor.
For Kaplan and Kay, the primary notion is op-tional rewriting.
It is quite cumbersome for them toprovide an obligatory version.
The results are notequivalent.Although people may agree, in the case of simplephonological rewrite rules, what the outcome of adeterministic rewrite operation should be, it is notclear that this is the case for replacement expres-sions that involve arbitrary regular languages.
Forthat reason, we prefer to define the replacementoperator in relational terms without relying on anuncertain intuition about a particular procedure.3.2.
Two-level rulesOur definition of replacement also has a close con-nection to two-level rules.
A two-level rule alwaysspecifies whether a context element belongs to theinput (= lexical) or the output (= surface) context ofthe rule.
The two-level model also shares our purerelational view of replacement as it is not con-cerned about the application procedure.
But thetwo-level formalism is only defined for symbol-to-symbol replacements.4.
ConclusionThe goal of this paper has been to introduce to thecalculus of regular expressions a replace operator,->, with a set of associated replacement expressionsthat concisely encode alternate variations of theoperation.We defined unconditional and conditional re-placement, taking the unconditional obligatoryreplacement asthe basic case.
We provide a simpledeclarative definition for it, easily expressed interms of the other regular expression operators,and extend it to the conditional case providing fourways to constrain replacement bya context.These definitions have already been implemented.The figures in this paper correspond exactly to theoutput of the regular expression compiler in theXerox finite-state calculus.AcknowledgmentsThis work is based on many years of productivecollaboration with Ronald M. Kaplan and MartinKay.
I am particularly indebted to Kaplan forwriting a very helpful critique, even though hestrongly prefers the approach of Kaplan and Kay1994.
Special thanks are also due to Kenneth R.Beesley for technical help on the definitions of thereplace operators and for expert editorial advice.
Iam grateful to Pasi Tapanainen, Jean-PierreChanod and Annie Zaenen for helping to correctmany terminological nd rhetorical weaknesses ofthe initial draft.ReferencesKaplan, Ronald M., and Kay, Martin (1981).Phonological Rules and Finite- State Transducers.Paper presented at the Annual Meeting of theLinguistic Society of America.
New York.Kaplan, Ronald M. and Kay, Martin (1994).
RegularModels of Phonological Rule Systems.
Computa-tional Linguistics.
20:3 331-378.
1994.Karttunen, Lauri, Koskenniemi, Kimmo, andKaplan, Ronald M. (1987) A Compiler for Two-level Phonological Rules.
In Report No.
CSLI-87-108.
Center for the Study of Language and In-formation.
Stanford University.Karttunen, Lauri and Beesley, Kenneth R. (1992).Two-level Rule Compiler.
Technical Report.
ISTL-92-2.
Xerox Palo Alto Research Center.Koskenniemi, Kimmo (1983).
Two-level Morphology:A General Computational Model for Word-Form Re-cognition and Production.
Department ofGeneralLinguistics.
University of Helsinki.23
