Proceedings of the 12th Conference of the European Chapter of the ACL, pages 309?317,Athens, Greece, 30 March ?
3 April 2009. c?2009 Association for Computational LinguisticsSemitic Morphological Analysis and GenerationUsing Finite State Transducers with Feature StructuresMichael GasserIndiana University, School of InformaticsBloomington, Indiana, USAgasser@indiana.eduAbstractThis paper presents an application of finitestate transducers weighted with featurestructure descriptions, following Amtrup(2003), to the morphology of the Semiticlanguage Tigrinya.
It is shown thatfeature-structure weights provide an effi-cient way of handling the templatic mor-phology that characterizes Semitic verbstems as well as the long-distance de-pendencies characterizing the complexTigrinya verb morphotactics.
A relativelycomplete computational implementationof Tigrinya verb morphology is described.1 Introduction1.1 Finite state morphologyMorphological analysis is the segmentation ofwords into their component morphemes and theassignment of grammatical morphemes to gram-matical categories and lexical morphemes to lex-emes.
For example, the English noun partiescould be analyzed as party+PLURAL.
Morpho-logical generation is the reverse process.
Bothprocesses relate a surface level to a lexical level.The relationship between these levels has con-cerned many phonologists and morphologists overthe years, and traditional descriptions, since thepioneering work of Chomsky and Halle (1968),have characterized it in terms of a series of orderedcontent-sensitive rewrite rules, which apply in thegeneration, but not the analysis, direction.Within computational morphology, a very sig-nificant advance came with the demonstration thatphonological rules could be implemented as fi-nite state transducers (Johnson, 1972; Kaplanand Kay, 1994) (FSTs) and that the rule orderingcould be dispensed with using FSTs that relate thesurface and lexical levels directly (Koskenniemi,1983).
Because of the invertibility of FSTs, ?two-level?
phonology and morphology permitted thecreation of systems of FSTs that implemented bothanalysis (surface input, lexical output) and gener-ation (lexical input, surface output).In addition to inversion, FSTs are closed un-der composition.
A second important advance incomputational morphology was the recognition byKarttunen et al (1992) that a cascade of composedFSTs could implement the two-level model.
Thismade possible quite complex finite state systems,including ordered alternation rules representingcontext-sensitive variation in the phonological ororthographic shape of morphemes, the morpho-tactics characterizing the possible sequences ofmorphemes (in canonical form) for a given wordclass, and one or more sublexicons.
For example,to handle written English nouns, we could create acascade of FSTs covering the rules that insert an ein words like bushes and parties and relate lexicaly to surface i in words like buggies and parties andan FST that represents the possible sequences ofmorphemes in English nouns, including all of thenoun stems in the English lexicon.
The key fea-ture of such systems is that, even though the FSTsmaking up the cascade must be composed in a par-ticular order, the result of composition is a singleFST relating surface and lexical levels directly, asin two-level morphology.1.2 FSTs for non-concatenative morphologyThese ideas have revolutionized computationalmorphology, making languages with complexword structure, such as Finnish and Turkish, farmore amenable to analysis by traditional compu-tational techniques.
However, finite state mor-phology is inherently biased to view morphemesas sequences of characters or phones and wordsas concatenations of morphemes.
This presentsproblems in the case of non-concatenative mor-phology: discontinuous morphemes (circumfix-309ation); infixation, which breaks up a morphemeby inserting another within it; reduplication, bywhich part or all of some morpheme is copied;and the template morphology (also called stem-pattern morphology, intercalation, and interdigi-tation) that characterizes Semitic languages, andwhich is the focus of much of this paper.
The stemof a Semitic verb consists of a root, essentiallya sequence of consonants, and a pattern, a sortof template which inserts other segments betweenthe root consonants and possibly copies certain ofthem (see Tigrinya examples in the next section).Researchers within the finite state frameworkhave proposed a number of ways to deal withSemitic template morphology.
One approach is tomake use of separate tapes for root and pattern atthe lexical level (Kiraz, 2000).
A transition in sucha system relates a single surface character to mul-tiple lexical characters, one for each of the distinctsublexica.Another approach is to have the transducers atthe lexical level relate an upper abstract charac-terization of a stem to a lower string that directlyrepresents the merging of a particular root and pat-tern.
This lower string can then be compiled intoan FST that yields a surface expression (Beesleyand Karttunen, 2003).
Given the extra compile-and-replace operation, this resulting system mapsdirectly between abstract lexical expressions andsurface strings.
In addition to Arabic, this ap-proach has been applied to a portion of the verbmorphology system of the Ethio-Semitic languageAmharic (Amsalu and Demeke, 2006), which ischaracterized by all of the same sorts of complex-ity as Tigrinya.A third approach makes use of a finite set ofregisters that the FST can write to and read from(Cohen-Sygal and Wintner, 2006).
Because it canremember relevant previous states, a ?finite-stateregistered transducer?
for template morphologycan keep the root and pattern separate as it pro-cesses a stem.This paper proposes an approach which is clos-est to this last framework, one that starts withfamiliar extension to FSTs, weights on the tran-sitions.
The next section gives an overview ofTigrinya verb morphology.
The following sec-tion discusses weighted FSTs, in particular, withweights consisting of feature structure descrip-tions.
Then I describe a system that applies thisapproach to Tigrinya verb morphology.2 Tigrinya Verb MorphologyTigrinya is an Ethio-Semitic language spoken by5-6 million people in northern Ethiopia and centralEritrea.
There has been almost no computationalwork on the language, and there are effectively nocorpora or digitized dictionaries containing roots.For a language with the morphological complexityof Tigrinya, a crucial early step in computationallinguistic work must be the development of mor-phological analyzers and generators.2.1 The stemA Tigrinya verb (Leslau, 1941 is a standard ref-erence for Tigrinya grammar) consists of a stemand one or more prefixes and suffixes.
Most ofthe complexity resides in the stem, which can bedescribed in terms of three dimensions: root (theonly strictly lexical component of the verb), tense-aspect-mood (TAM), and derivational category.Table 1 illustrates the possible combinations ofTAM and derivational category for a single root.1A Tigrinya verb root consists of a sequence ofthree, four, or five consonants.
In addition, asin other Ethio-Semitic languages, certain roots in-clude inherent vowels and/or gemination (length-ening) of particular consonants.
Thus among thethree-consonant roots, there are three subclasses:CCC, CaCC, CC C. As we have seen, the stem ofa Semitic verb can be viewed as the result of the in-sertion of pattern vowels between root consonantsand the copying of root consonants in particularpositions.
For Tigrinya, each combination of rootclass, TAM, and derivational category is charac-terized by a particular pattern.With respect to TAM, there are four possibili-ties, as shown in Table 1, conventionally referredto in English as PERFECTIVE, IMPERFECTIVE,JUSSIVE-IMPERATIVE, and GERUNDIVE.
Word-forms within these four TAM categories combinewith auxiliaries to yield the full range of possbil-ities in the complex Tigrinya tense-aspect-moodsystem.
Since auxiliaries are written as separatewords or separated from the main verbs by anapostrophe, they will not be discussed further.Within each of the TAM categories, a Tigrinyaverb root can appear in up to eight different deriva-1I use 1 for the high central vowel of Tigrinya, E for themid central vowel, q for the velar ejective, a dot under a char-acter to represent other ejectives, a right quote to represent aglottal stop, a left quote to represent the voiced pharyngealfricative, and to represent gemination.
Other symbols areconventional International Phonetic Alphabet.310simple pas/refl caus freqv recip1 caus-rec1 recip2 caus-rec2perf fElEt?tEfEl(E)t?aflEt?fElalEt?tEfalEt?af alEt?tEfElalEt?af ElalEt?imprf fEl( 1)t?f1l Et?af(1)l( )1t?fElalt?f alEt?af alt?f ElalEt?af Elalt?jus/impv flEt?tEfElEt?afl1t?fElalt?tEfalEt?af alt?tEfElalEt?af Elalt?ger fElit?tEfElit?aflit?fElalit?tEfalit?af alit?tEfElalit?af Elalit?Table 1: Stems based on the Tigrinya root ?flt?.tional categories, which can can be characterizedin terms of four binary features, each with partic-ular morphological consequences.
These featureswill be referred to in this paper as ?ps?
(?passive?),?tr?
(?transitive?
), ?it?
(?iterative?
), and ?rc?
(?re-ciprocal?).
The eight possible combinations ofthese features (see Table 1 for examples) are SIM-PLE [-ps,-tr,-it,-rc], PASSIVE/REFLEXIVE [+ps,-tr,-it,-rc], TRANSITIVE/CAUSATIVE: [-ps,+tr,-it,-rc], FREQUENTATIVE [-ps,-tr,+it,-rc], RECIPRO-CAL 1 [+ps,-tr,-it,+rc], CAUSATIVE RECIPROCAL1 [-ps,+tr,-it,+rc], RECIPROCAL 2 [+ps,-tr,+it,-rc], CAUSATIVE RECIPROCAL 2 [-ps,+tr,+it,-rc].Notice that the [+ps,+it] and [+tr,+it] combina-tions are roughly equivalent semantically to the[+ps,+rc] and [+tr,+rc] combinations, though thisis not true for all verb roots.2.2 AffixesThe affixes closest to the stem represent subjectagreement; there are ten combinations of person,number, and gender in the Tigrinya pronominaland verb-agreement system.
For imperfective andjussive verbs, as in the corresponding TAM cate-gories in other Semitic languages, subject agree-ment takes the form of prefixes and sometimesalso suffixes, for example, y1flEt?
?that he know?,y1flEt?u ?that they (mas.)
know?.
In the perfec-tive, imperative, and gerundive, subject agreementis expressed by suffixes alone, for example, fElEt?ki?you (sg., fem.)
knew?, fElEt?u ?they (mas.)
knew!
?.Following the subject agreement suffix (if thereis one), a transitive Tigrinya verb may also includean object suffix (or object agreement marker),again in one of the same set of ten possible combi-nations of person, number, and gender.
There aretwo sets of object suffixes, a plain set representingdirect objects and a prepositional set representingvarious sorts of dative, benefactive, locative, andinstrumental complements, for example, y1fElt?En i?he knows me?, y1fElt?El Ey ?he knows for me?.Preceding the subject prefix of an imperfectiveor jussive verb or the stem of a perfective, imper-ative, or gerundive verb, there may be the prefixindicating negative polarity, ay-.
Non-finite neg-ative verbs also require the suffix -n: y1fElt?En i ?heknows me?
; ay 1fElt?En 1n ?he doesn?t know me?.Preceding the negative prefix (if there is one),an imperfective or perfective verb may also in-clude the prefix marking relativization, (z)1-, forexample, zifElt?En i ?
(he) who knows me?.
The rel-ativizer can in turn be preceded by one of a setof seven prepositions, for example, kabzifElt?En i?from him who knows me?.
Finally, in the per-fective, imperfective, and gerundive, there is thepossibility of one or the other of several conjunc-tive prefixes at the beginning of the verb (with-out the relativizer), for example, kifElt?En i ?sothat he knows me?
and one of several conjunc-tive suffixes at the end of the verb, for example,y1fElt?En 1n ?and he knows me?.Given up to 32 possible stem templates (com-binations of four tense-aspect-mood and eightderivational categories) and the various possi-ble combinations of agreement, polarity, rela-tivization, preposition, and conjunction affixes, aTigrinya verb root can appear in well over 100,000different wordforms.2.3 ComplexityTigrinya shares with other Semitic languages com-plex variations in the stem patterns when theroot contains glottal or pharyngeal consonants orsemivowels.
These and a range of other regu-lar language-specific morphophonemic processescan be captured in alternation rules.
As in otherSemitic languages, reduplication also plays a rolein some of the stem patterns (as seen in Table 1).Furthermore, the second consonant of the mostimportant conjugation class, as well as the con-sonant of most of the object suffixes, geminatesin certain environments and not others (Buckley,2000), a process that depends on syllable weight.The morphotactics of the Tigrinya verb is re-plete with dependencies which span the verb stem:(1) the negative circumfix ay-n, (2) absence of the311negative suffix -n following a subordinating prefix,(3) constraints on combinations of subject agree-ment prefixes and suffixes in the imperfective andjussive, (4) constraints on combinations of subjectagreement affixes and object suffixes.There is also considerable ambiguity in the sys-tem.
For example, the second person and third per-son feminine plural imperfective and jussive sub-ject suffix is identical to one allomorph of the thirdperson feminine singular object suffix (y1fElt?a) ?heknows her; they (fem.)
know?).
Tigrinya is writtenin the Ge?ez (Ethiopic) syllabary, which fails tomark gemination and to distinguish between syl-lable final consonants and consonants followed bythe vowel 1.
This introduces further ambiguity.In sum, the complexity of Tigrinya verbspresents a challenge to any computational mor-phology framework.
In the next section I consideran augmentation to finite state morphology offer-ing clear advantages for this language.3 FSTs with Feature StructuresA weighted FST (Mohri et al, 2000) is a fi-nite state transducer whose transitions are aug-mented with weights.
The weights must be ele-ments of a semiring, an algebraic structure withan ?addition?
operation, a ?multiplication?
opera-tion, identity elements for each operation, and theconstraint that multiplication distributes over ad-dition.
Weights on a path of transitions througha transducer are ?multiplied?, and the weights as-sociated with alternate paths through a transducerare ?added?.
Weighted FSTs are closed under thesame operations as unweighted FSTs; in particu-lar, they can be composed.
Weighted FSTs are fa-miliar in speech processing, where the semiring el-ements usually represent probabilities, with ?mul-tiplication?
and ?addition?
in their usual senses.Amtrup (2003) recognized the advantages thatwould accrue to morphological analyzers and gen-erators if they could accommodate structured rep-resentations.
One familiar approach to repre-senting linguistic structure is feature structures(FSs) (Carpenter, 1992; Copestake, 2002).
Afeature structure consists of a set of attribute-value pairs, for which values are either atomicproperties, such as FALSE or FEMININE, or fea-ture structures.
For example, we might repre-sent the morphological structure of the Tigrinyanoun gEzay ?my house?
as [lex=gEza, num=sing,poss=[pers=1, num=sg]].
The basic operation overFSs is unification.
Loosely speaking, two FSsunify if their attribute-values pairs are compati-ble; the resulting unification combines the featuresof the FSs.
For example, the two FSs [lex=gEza,num=sg] and [poss=[pers=1, num=sg]] unify toyield the FS [lex=gEza, num=sg, poss=[pers=1,num=sg]].
The distinguished FS TOP unifies withany other FS.Amtrup shows that sets of FSs constitute asemiring, with pairwise unification as the multi-plication operator, set union as the addition opera-tor, TOP as the identity element for multiplication,and the empty set as the identity element for ad-dition.
Thus FSTs can be weighted with FSs.
Inan FST with FS weights, traversing a path throughthe network for a given input string yields an FSset, in addition to the usual output string.
The FSset is the result of repeated unification of the FSsets on the arcs in the path, starting with an initialinput FS set.
A path through the network fails notonly if the current input character fails to matchthe input character on the arc, but also if the cur-rent accumulated FS set fails to unify with the FSset on an arc.Using examples from Persian, Amtrup demon-strates two advantages of FSTs weighted withFS sets.
First, long-distance dependencies withinwords present notorious problems for finite statetechniques.
For generation, the usual approachis to overgenerate and then filter out the illegalstrings below, but this may result in a much largernetwork because of the duplication of state de-scriptions.
Using FSs, enforcing long-distanceconstraints is straightforward.
Weights on the rel-evant transitions early in the word specify val-ues for features that must agree with similar fea-ture specifications on transitions later in the word(see the Tigrinya examples in the next section).Second, many NLP applications, such a machinetranslation, work with the sort of structured rep-resentations that are elegantly handled by FS de-scriptions.
Thus it is often desirable to have theoutput of a morphological analyzer exhibit thisrichness, in contrast to the string representationsthat are the output of an unweighted finite stateanalyzer.4 Weighted FSTs for Tigrinya Verbs4.1 Long-distance dependenciesAs we have seen, Tigrinya verbs exhibit vari-ous sorts of long-distance dependencies.
The cir-312cumfix that marks the negative of non-subordinateverbs, ay...n, is one example.
Figure 1 showshow this constraint can be handled naturally us-ing an FST weighted with FS sets.
In place ofthe separate negative and affirmative subnetworksthat would have to span the entire FST in the abs-cence of weighted arcs, we have simply the nega-tive and affirmative branches at the beginning andend of the weighted FST.
In the analysis direction,this FST will accept forms such as ay 1fElt?un ?theydon?t know?
and y1fElt?u ?they know?
and rejectforms such as ay 1fElt?u.
In the generation direc-tion, the FST will correctly generate a form suchas ay 1fElt?un given a initial FS that includes thefeature [pol=neg].4.2 Stems: root and derivational patternNow consider the source of most of the complex-ity of the Tigrinya verb, the stem.
The stem maybe thought of as conveying three types of infor-mation: lexical (the root of the verb), derivational,and TAM.
However, unlike the former two types,the TAM category of the verb is redundantly codedfor by the combination of subject agreement af-fixes.
Thus, analysis of a stem should return atleast the root and the derivational category, andgeneration should start with a root and a deriva-tional category and return a stem.
We can repre-sent each root as a sequence of consonants, sep-arated in some cases by the vowel a or the gem-ination character ( ).
Given a particular deriva-tional pattern and a TAM category, extracting theroot from the stem is a straightforward matter withan FST.
For example, for the imperfective pas-sive, the CC C root pattern appears in the templateC1C EC, and the root is what is left if the two vow-els in the stem are skipped over.However, we want to extract both the deriva-tional pattern and the root, and the problem forfinite state methods, as discussed in Section 1.2,is that both are spread throughout the stem.
Theanalyzer needs to alternate between recording ele-ments of the root and clues about the derivationalpattern as it traverses the stem, and the generatorneeds to alternate between outputting charactersthat represent root elements and characters thatdepend on the derivational pattern as it producesthe stem.
The process is complicated further be-cause some stem characters, such as the gemina-tion character, may be either lexical (that is, a rootelement) or derivational, and others may provideinformation about both components.
For exam-ple, a stem with four consonants and a separatingthe second and third consonants represents the fre-quentative of a three-consonant root if the thirdand fourth consonants are identical (e.g., fElalEt?
?knew repeatedly?, root: flt?)
and a four-consonantroot (CCaCC root pattern) in the simple deriva-tional category if they are not (e.g., kElakEl ?pre-vented?, root klakl).As discussed in Section 1.2, one of the familiarapproaches to this problem, that of Beesley andKarttunen (2003), precompiles all of the combina-tions of roots and derivational patterns into stems.The problem with this approach for Tigrinya isthat we do not have anything like a complete listof roots; that is, we expect many stems to be noveland will need to be able to analyze them on the fly.The other two approaches discussed in 1.2, that ofKiraz (2000) and that of Cohen-Sygal & Wintner(2006), are closer to what is proposed here.
Eachhas an explicit mechanism for keeping the root andpattern distinct: separate tapes in the case of Kiraz(2000) and separate memory registers in the caseof Cohen-Sygal & Wintner (2006).The present approach also divides the work ofprocessing the root and the derivational patternsbetween two components of the system.
However,instead of the additional overhead required for im-plementing a multi-tape system or registers, thissystem makes use of the FSTs weighted with FSsthat are already motivated for other aspects of mor-phology, as argued above.
In this approach, thelexical aspects of morphology are handled by theordinary input-output character correspondences,and the grammatical aspects of morphology, inparticular the derivational patterns, are handled bythe FS weights on the FST arcs and the unifica-tion that takes place as accumulated weights arematched against the weights on FST arcs.As explained in Section 2, we can representthe eight possible derivational categories for aTigrinya verb stem in terms of four binary features(ps, tr, rc, it).
Each of these features is reflectedmore or less directly in the stem form (though dif-ferently for different root classes and for differ-ent TAM categories).
However, they are some-times distributed across the stem: different partsof a stem may be constrained by the presence ofa particular feature.
For example, the feature +ps(abbreviating [ps=True]) causes the gemination ofthe stem-initial consonant under various circum-31302SBJ11[pol=neg]:[pol=aff]3 4STEM SBJ2ay:5OBJ:6n::[pol=neg][pol=aff]Figure 1: Handling Tigrinya (non-subordinate, imperfective) negation using feature structure weights.Arcs with uppercase labels represents subnetworks that are not spelled out in the figure.stances and also controls the final vowel in thestem in the imperfective, and the feature +tr ismarked by the vowel a before the first root con-sonant and, in the imperfective, by the nature ofthe vowel that follows the first root consonant (Ewhere we would otherwise expect 1, 1 where wewould otherwise expect E.) That is, as with theverb affixes, there are long-distance dependencieswithin the verb stem.Figure 2 illustrates this division of labor for theportion of the stem FST that covers the CC C rootpattern for the imperfective.
This FST (includingthe subnetwork not shown that is responsible forthe reduplicated portion of the +it patterns) han-dles all eight possible derivational categories.
Forthe root ?fs.
m ?finish?, the stems are [-ps,-tr,-rc,-it]: f1s?1m, [+ps,-tr,-rc,-it]: f1s?Em, [-ps,+tr,-rc,-it]:afEs?1m, [-ps,-tr,-rc,+it]: fEs?as?1m, [+ps,-tr,+rc,-it]: f as?Em, [-ps,+tr,+rc,-it]: af as?1m, [+ps,-tr,-rc,+it]: f Es?as?Em, [-ps,+tr,-rc,+it]: af Es?as?1m.What is notable is the relatively small number ofstates that are required; among the consonant andvowel positions in the stems, all but the first areshared among the various derivational categories.Of course the full stem FST, applying to allcombinations of the eight root classes, the eightderivational categories, and the four TAM cate-gories, is much larger, but the FS weights stillpermit a good deal of sharing, including sharingacross the root classes and across the TAM cate-gories.4.3 ArchitectureThe full verb morphology processing system (seeFigure 3) consists of analysis and generation FSTsfor both orthographic and phonemically repre-sented words, four FSTs in all.
Eleven FSTs arecomposed to yield the phonemic analysis FST (de-noted by the dashed border in Figure 3), and twoadditional FSTs are composed onto this FST toyield the orthographic FST (denoted by the largesolid rectangle).
The generation FSTs are createdby inverting the analysis FSTs.
Only the ortho-graphic FSTs are discussed in the remainder ofthis paper.At the most abstract (lexical) end is the heart ofthe system, the morphotactic FST, and the heart ofthis FST is the stem FST described above.
Thestem FST is composed from six FSTs, includingthree that handle the morphotactics of the stem,one that handles root constraints, and two that han-dle phonological processes that apply only to thestem.
A prefix FST and a suffix FST are then con-catenated onto the composed stem FST to createthe full verb morphotactic FST.
Within the wholeFST, it is only the morphotactic FSTs (the yellowrectangles in Figure 3) that have FS weights.2In the analysis direction, the morphotactic FSTtakes as input words in an abstract canonical formand an initial weight of TOP; that is, at this pointin analysis, no grammatical information has beenextracted.
The output of the morphotactic FSTis either the empty list if the form is unanalyz-able, or one or more analyses, each consistingof a root string and a fully specified grammat-ical description in the form of an FS.
For ex-ample, given the form ?ayt1f1l et?un, the morpho-tactic FST would output the root flt.
and the FS[tam=imprf, der=[+ps,-tr,-rc,-it], sbj=[+2p,+plr,-fem], +neg, obj=nil, -rel] (see Figure 3).
Thatis, this word represents the imperfective, nega-tive, non-relativized passive of the verb root ?flt.(?know?)
with second person plural masculine sub-ject and no object: ?you (plr., mas.)
are notknown?.
The system has no actual lexicon, so itoutputs all roots that are compatible with the in-put, even if such roots do not exist in the language.In the generation direction, the opposite happens.In this case, the input root can be any legal se-quence of characters that matches one of the eight2The reduplication that characterizes [+it] stems and the?anti-reduplication?
that prevents sequences of identical rootconsonants in some positions are handled with separate tran-sitions for each consonant pair.314C1C2_V2 C3Ca:C1__:?:V1?:?:a:C?:?:[+ps][-ps]C[-ps,+it][-ps,-it]<CaC:C>[+it][-tr]C2aC1_:?
:_[+ps][+rc,-it][-rc,+it][+tr,-ps]0a[-it]CFigure 2: FST for imperfective verb stems of root type CC C. <CaC:C> indicates a subnetwork, notshown, which handles the reduplicated portion of +it stems, for example, fes?as?1m.root patterns (there are some constraints on whatcan constitute a root), though not necessarily anactual root in the language.The highest FST below the morphotactic FSThandles one case of allomorphy: the two allo-morphs of the relativization prefix.
Below this arenine FSTs handling phonology; for example, oneof these converts the sequence a1 to E. At the bot-tom end of the cascade are two orthographic FSTswhich are required when the input to analysis orthe output of generation is in standard Tigrinya or-thography.
One of these is responsible for the in-sertion of the vowel 1 and for consonant gemina-tion (neither of which is indicated in the orthogra-phy); the other inserts a glottal stop before a word-initial vowel.The full orthographic FST consists of 22,313states and 118,927 arcs.
The system handlesverbs in all of the root classes discussed byLeslau (1941), including those with laryngealsand semivowels in different root positions and thethree common irregular verbs, and all grammati-cal combinations of subject, object, negation, rel-ativization, preposition, and conjunction affixes.For the orthographic version of the analyzer, aword is entered in Ge?ez script (UTF-8 encoding).The program romanizes the input using the SERAtranscription conventions (Firdyiwek and Yaqob,1997), which represent Ge?ez characters with theASCII character set, before handing it to the ortho-graphic analysis FST.
For each possible analysis,the output consists of a (romanized) root and a FSset.
Where a set contains more than one FS, theinterpretation is that any of the FS elements con-stitutes a possible analysis.
Input to the generatorconsists of a romanized root and a single feature???????fl?
; [tam=+imprf, der=[+ps,-tr,-it,-rc],sbj=[+2p,+plr,-fem], +neg]]AllomorphyPhonologyOrthography...MorphotacticsSuffixesPrefixes...'ayt?f?l_?
?un...Stem(Root+Pattern).o..o..o..o..o..o..o..o..o..o..o.Figure 3: Architecture of the system.
Rectanglesrepresent FSTs, ?.o.?composition.structure.
The output of the orthographic gener-ation FST is an orthographic representation, us-ing SERA conventions, of each possible form thatis compatible with the input root and FS.
Theseforms are then converted to Ge?ez orthography.The analyzer and generator are pub-licly accessible on the Internet atwww.cs.indiana.edu/cgi-pub/gasser/L3/morpho/Ti/v.3154.4 EvaluationSystematic evaluation of the system is diffi-cult since no Tigrinya corpora are currentlyavailable.
One resource that is useful, how-ever, is the Tigrinya word list compiled byBiniam Gebremichael, available on the Internet atwww.cs.ru.nl/ biniam/geez/crawl.php.
Biniam ex-tracted 227,984 distinct wordforms from Tigrinyatexts by crawling the Internet.
As a first step to-ward evaluating the morphological analyzer, theorthographic analyzer was run on 400 word-forms selected randomly from the list compiled byBiniam, and the results were evaluated by a humanreader.Of the 400 wordforms, 329 were unambigu-ously verbs.
The program correctly analyzed 308of these.
The 21 errors included irregular verbsand orthographic/phonological variants that hadnot been built into the FST; these will be straight-forward to add.
Fifty other words were not verbs.The program again responded appropriately, givenits knowledge, either rejecting the word or analyz-ing it as a verb based on a non-existent root.
Thir-teen other words appeared to be verb forms con-taining a simple typographical error, and I was un-able to identify the remaining eight words.
For thelatter two categories, the program again respondedby rejecting the word or treating it as a verb basedon a non-existent root.To test the morphological generator, the pro-gram was run on roots belonging to all 21 of themajor classes discussed by Leslau (1941), includ-ing those with glottal or pharyngeal consonants orsemivowels in different positions within the roots.For each of these classes, the program was askedto generate all possible derivational patterns (in thethird person singular masculine form).
In addition,for a smaller set of four root classes in the sim-ple derivational pattern, the program was tested onall relevant combinations of the subject and objectaffixes3 and, for the imperfective and perfective,on 13 combinations of the relativization, negation,prepositional, and conjunctive affixes.
For eachof the 272 tests, the generation FST succeeded inoutputting the correct form (and in some cases aphonemic and/or orthographic alternative).In conclusion, the orthographic morphologicalanalyzer and generator provide good coverage of3With respect to their morphophonological behavior, thesubject affixes and object suffixes each group into four cate-gories.Tigrinya verbs.
One weakness of the present sys-tem results from its lack of a root dictionary.
Theanalyzer produces as many as 15 different analysesof words, when in many cases only one contains aroot that exists in the language.
The number couldbe reduced somewhat by a more extensive filteron possible root segment sequences; however, rootinternal phonotactics is an area that has not beenextensively studied for Tigrinya.
In any case, oncea Tigrinya root dictionary becomes available, itwill be straightforward to compose a lexical FSTonto the existing FSTs that will reject all but ac-ceptable roots.
Even a relatively small root dictio-nary should also permit inferences about possibleroot segment sequences in the language, enablingthe construction of a stricter filter for roots that arenot yet contained in the dictionary.5 ConclusionProgress in all applications for a language such asTigrinya is held back when verb morphology isnot dealt with adequately.
Tigrinya morphologyis complex in two senses.
First, like other Semiticlanguages, it relies on template morphology, pre-senting unusual challenges to any computationalframework.
This paper presents a new answerto these challenges, one which has the potentialto integrate morphological processing into otherknowledge-based applications through the inclu-sion of the powerful and flexible feature structureframework.
This approach should extend to otherSemitic languages, such as Arabic, Hebrew, andAmharic.
Second, Tigrinya verbs are simply veryelaborate.
In addition to the stems resulting fromthe intercalation of eight root classes, eight deriva-tional patterns and four TAM categories, there areup to four prefix slots and four suffix slots; varioussorts of prefix-suffix dependencies; and a rangeof interacting phonological processes, includingthose sensitive to syllable structure, as well assegmental context.
Just putting together all ofthese constraints in a way that works is signifi-cant.
Since the motivation for this project is pri-marily practical rather than theoretical, the mainachievement of the paper is the demonstration that,with some effort, a system can be built that actu-ally handles Tigrinya verbs in great detail.
Futurework will focus on fine-tuning the verb FST, de-veloping an FST for nouns, and applying this sameapproach to other Semitic languages.316ReferencesSaba Amsalu and Girma A. Demeke.
2006.
Non-concatenative finite-state morphotactics of Amharicsimple verbs.
ELRC Working Papers, 2(3).Jan Amtrup.
2003.
Morphology in machine translationsystems: Efficient integration of finite state trans-ducers and feature structure descriptions.
MachineTranslation, 18:213?235.Kenneth R. Beesley and Lauri Karttunen.
2003.
Fi-nite State Morphology.
CSLI Publications, Stan-ford, CA, USA.Eugene Buckley.
2000.
Alignment and weight in theTigrinya verb stem.
In Vicki Carstens and FrederickParkinson, editors, Advances in African Linguistics,pages 165?176.
Africa World Press, Lawrenceville,NJ, USA.Bob Carpenter.
1992.
The Logic of Typed Fea-ture Structures.
Cambridge University Press, Cam-bridge.Noam Chomsky and Morris Halle.
1968.
The SoundPattern of English.
Harper and Row, New York.Yael Cohen-Sygal and Shuly Wintner.
2006.
Finite-state registered automata for non-concatenative mor-phology.
Computational Linguistics, 32:49?82.Ann Copestake.
2002.
Implementing Typed FeatureStructure Grammars.
CSLI Publications, Stanford,CA, USA.Yitna Firdyiwek and Daniel Yaqob.
1997.
The sys-tem for Ethiopic representation in ascii.
URL: cite-seer.ist.psu.edu/56365.html.C.
Douglas Johnson.
1972.
Formal Aspects of Phono-logical Description.
Mouton, The Hague.Ronald M. Kaplan and Martin Kay.
1994.
Regu-lar models of phonological rule systems.
Compu-tational Linguistics, 20:331?378.Lauri Karttunen, Ronald M. Kaplan, and Annie Zae-nen.
1992.
Two-level morphology with compo-sition.
In Proceedings of the International Con-ference on Computational Linguistics, volume 14,pages 141?148.George A. Kiraz.
2000.
Multitiered nonlinear mor-phology using multitape finite automata: a casestudy on Syriac and Arabic.
Computational Linguis-tics, 26(1):77?105.Kimmo Koskenniemi.
1983.
Two-level morphology: ageneral computational model for word-form recog-nition and production.
Technical Report PublicationNo.
11, Department of General Linguistics, Univer-sity of Helsinki.Wolf Leslau.
1941.
Documents Tigrigna: Grammaireet Textes.
Libraire C. Klincksieck, Paris.Mehryar Mohri, Fernando Pereira, and Michael Riley.2000.
Weighted finite-state transducers in speechrecognition.
In Proceedings of ISCA ITRW on Auto-matic Speech Recognition: Challenges for the Mil-lenium, pages 97?106, Paris.317
