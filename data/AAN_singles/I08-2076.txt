A Bottom up Approach to Persian StemmingAmir Azim ShariflooNLP Research Lab,Department of Electrical &Computer Engineering,Shahid Beheshti University,Tehran, Irana.sharifloo@mail.sbu.ac.irMehrnoush ShamsfardNLP Research Lab,Department of Electrical &Computer Engineering,Shahid Beheshti University,Tehran, Iranm-shams@sbu.ac.irAbstractStemmers have many applications in natu-ral language processing and some fieldssuch as information retrieval.
Many algo-rithms have been proposed for stemming.In this paper, we propose a new algorithmfor Persian language.
Our algorithm is abottom up algorithm that is capable to re-organize without changing the implementa-tion.
Our experiments show that the pro-posed algorithm has a suitable result instemming and flexibility.1 IntroductionIn linguistics, stem is a form that unifies the ele-ments in a set of morphologically similar words(Frakes and Yates, 1992), therefore stemming isthe operation which determines the stem of a givenword.
In other words, the goal of a stemming algo-rithm is to reduce variant word forms to a commonmorphological root, caled ?stem?
(Bacchin et al,2002).There are three common approaches that are usedin stemming: affix stripping, lookup table and sta-tistical methods (Bento et al, 2005).
Affix strip-ping dependends on the morphological structure ofthe language.
The stem is obtained by removingsome morphemes from the one or both sides of theword.
Porter algorithm (Porter, 1980) is an exam-ple of this kind of algorithms.
This stemmer ismade up of five steps, during which certain rulesare applied to the words and the most common suf-fixes are removed.In lookup table approach, each word and its re-lated stem are stored in some kind of structuredform.
Consequently, for each stored word, we findits stem.
However, the approach needs more space.Also, for each new word, table must be updatedmanually.In statistical methods, through a process of in-ference and based on a corpus, rules are formulatedregarding word formation.
Some of the method-ologies adopted are: frequency counts, n-gram(Mayfield and McNamee, 2003), link analysis(Bacchin et al, 2002), and Hidden Markov Models(Melucci and Orio, 2003).
This approach does notrequire any linguistic knowledge whatsoever, be-ing totally independent of the morphological struc-ture of the target language.In this paper, we propose a new algorithm forstemming in Persian.
Our algorithm is rule basedand in contrast with affix stripping approach, it is astem based approach.
That means, at first we findpossible stems in the word, after that we checkwhich stems are matched with rules.Our algorithm is bottom up while affix strippingmethods are top down.
In other words, we try togenerate the word using candidate stems of theword which we call cores of the word.
If the wordis generated, the stem is correct.
On the other hand,affix stripping approaches try to removing affixesuntil reaching to any stem in the word.Some stemming methods have been presentedfor Persian (Taghva et al, 2005) which use affixstripping approach.
Our proposed method tries toreach better precision rather than previous methods.Also, this method tokenizes the word to mor-phemes which could employ in other morphologi-cal methods.The paper is organized as follows: section 2 pre-sents a brief review of Persian from morphologicalperspective; in section 3, we describe the proposed583algorithm in details; section 4 is about our experi-ments.2 Persian from a Morphological Perspec-tivePersian is an Indo-European language, spoken andwritten primarily in Iran, Afghanistan, and a part ofTajikistan.
It is written from right to left in theArabic-like alphabet.In Persian, verbs involve tense, number andperson.
For example1, the verb ???
??????
(mi-x?n-am: I read) is a present tense verb consisting ofthree morphemes.
???
(am) is a suffix denoting firstsingle person ??????
(x?n) is the present tense rootof the verb and ????
(mi) is a prefix that expressescontinuity.If a verb has any object pronoun, it can be at-tached to the end of the verb such as ?
????????
?(mi-x?n-am-a?
: I read it) in which ???
(a?
: it) is anobject pronoun.
Also, negative form of verbs isproduced with adding ???
(ne) to the first of them.For example, ?
????????
?
(ne-mi-x?n-am - I don?tread) is the negative form of the verb ?
???????
?
(mix?nam - I read).
We have gathered 43 rules forverbs, some of them are shown in Table .1.Table 1.
Some rules for verbs in PersianRule example?????
?????+??
?????
+??
(present person identifier +present root + mi)??
?????
(mi-x?n-am)(I read)?????
????+???
+?
+??
????
(past person identifier + bud+eh + past root)????
????
(raft-e bud-am)(I had gone)??
?????+?
(present root + b)????(be-gozar)(Pass)??+?
+?
??
???
(shod + h + past root)??????
??
(xand-e ?od)(it was read)Nouns are more challengeable than others inPersian.
We have gathered many rules for nounsthat in following, we describe one of them.
Theplural forms of nouns are formed by adding thesuffixes ( ?
?, ?
?, ?
?, ??
,??).
????(h?)
is used for all1 Through the paper, we show Persian examples by theirwriten form in Persian alphabet between ??
followed by(their pronunciation: translation).words.
????
(?n) is used for humans, animals andevery thing that is alive.
Also, ??
?, ??
,???
(?t ,un ,in) is used for some words borrowed from Arabicand some Persian words.
We have another kind ofplural form in Persian that is called Mokassarwhich is a derivational plural form (irregulars inPersian).
Some examples of plural form are shownin Table 2.Also, there are some orthographic rules whichshow the effects of joining affixes to the word.
Forexample, consider that we have two parts of a word:A and B for joining as BA (Consider, Persian iswritten right to left).
If the last letter of A and thefirst leter of B are ???(?
), one leter ???
(y) isadded between them.
Assume A is ??????(d?n?
-wise) and B is ????
(?n), the joining result is ?????????
(d?n?-y?n: wise people).Table 2.
Some kinds of plural form in PersianJoining Result noun??+????(h?
+ ke?var)(h?
+ country)??????(ke?var-h?)(countries)??+????(h?
+ deraxt)(h?
+ tree)??????
(deraxt-?n)(trees)(Mokassar form)???(kotob)(books)???(kotob)(books)??+?
+???
(?n + y + ?gh?
)(?n + y + mister)??????
(?gh?-y?n)(men)3 The Proposed AlgorithmOur algorithm is rule based and bottom up.
At first,it tries to find substrings of the word that are stemsor morphemes which are derived from any stem,we call them cores.
After that, it joins each ofcores with other elements of word for generatingthat word according to available rules.
Finally,each core with at least one correct generation is acorrect core and its stem is correct stem of theword.
The algorithm includes three phases: 1.
Sub-string tagging 2.
Rule matching 3.
Anti rule match-ing (Figure 1).584In substring tagging phase, we extract morpho-logical information for all possible substrings ofthe word.
At the end of this phase, we know whichsubstrings of the word are morphemes and whichones are not.
Also, we know clusters that eachmorpheme is their member.
We use clusters forrule matching phase.
Accordingly, we know coresin the word before beginning the second phase.
Wedescribe substring tagging details in section 3.1.Figure1.
Three phases of the proposed algorithm.In rule matching phase, for each core that has beenknown in previous phase, we extract related rules.For example, ??????
(x?n) is one core of the word?
???????
?
(mi-x?n-am: I read) and ???
??????
(bonemoz?re: present root) is one of clusters that ??????
(x?n) is its member.
Also,???
(am) is a member ofcluster ??????
??????
(?enase moz?re: present per-son identifier)and ????
(mi) is a member of cluster????(mi).
We have a rule in rules repository as:(  ?????
?????+??
?????
+??
)(present person identifier + present root + mi)where it is matched with the word ?
???????
?
(mi-x?n-am: I read).
Therefore, we find a matched rulefor ??????(x?n).
At the end of second phase, eachcore that has extracted any possible rule for theword, remains in cores list and other cores are re-moved from it.In anti-rule matching phase, we extract anti rulesfrom anti rules repository for each core in the list.Each core which has any matched anti rule withthe word morphemes, is removed from the coreslist.
At the end of the third phase, each stem of anycore in the cores list is the correct stem for theword.3.1 Substring TaggingEvery word with length N has N*(N+1)/2 sub-strings.
Therefore, we need N*(N+1)/2 stringmatching for finding them in morphemes reposi-tory.
We employ a Trie tree for storing morphemesand present an algorithm for retrieving morpho-logical information from it that reduces the numberof string matching.
This algorithm needs N(N+1)/2character matching (instead of string matching) atmost.
A simplified part of tree is shown in Figure 2.Figure 2.
A simplified part of Trie tree that is usedfor storing morphological information.The algorithm is described in the following:We initiate N pointers (N is the word length)that they point to the tree root.
Also, we use acounter C that is an index on the word.
At first, C?svalue is one that means its related letter is first let-ter of the word.
At the end of each step, C is in-creased by one.
Therefore, in each step, C points toone letter of the word that we call this letter L.xuxx?x?nm ???
?miclusters1.present personidentifier.2.
past personidentifier.
?/ mtree rootclusters1.verb suffix mi2.nounclusters1.present root2.nouncluster1.nouncluster---cluster---?/ x?/ i ?/ u?/ ?
?/ nSubstring TaggingRule MatchingAnti Rule MatchingStemsCores ListCores ListInput Word585At first step, first pointer P1 finds one edge be-tween root edges that its letter is equal with L. P1goes down on tree by that edge.
Here, P1 extractmorphological information from its new position (anode of the tree) and fills morphological informa-tion for substring (1, 2).At the second step, L is the second letter of theword, second pointer P2 finds one edge betweenroot edges that its letter is equal with L. P2 goesdown on tree by that edge, extract morphologicalinformation from its new position (a node of thetree) and fills morphological information for sub-string (2, 3).
Also, P1 goes down on tree by anedge contained L, from its position that it is one ofroot children and fills morphological informationfor substring (1, 3).At third step, L is third letter ofthe word.
Third pointer P3 starts from root andgoes down on tree by an edge that its letter is equalwith L and fills morphological information for sub-string (3, 4).
P1, P2 repeat this work from theirpositions and fill morphological information forsubstring (1, 4) and (2, 4) respectively.Next steps are done like these steps.
Finally, wehave obtained morphological information for allsubstrings of the word.
Also, if one pointer couldnot find any edge with value L, it is blocked untilthe end of algorithm.
Figure 3 shows pseudo codeof this algorithm.Figure 3.
The used algorithm for obtaining mor-phological information from Trie tree.3.2 Rule MatchingWe use many rules to generate correct words bymorphemes in Persian.
We store these rules inrules repository.
Some gathered rules are shown inTable 3.Table 3.
Some gathered rules that we use.Rule?????
????
+??
????
?????
????
(past person identifier + past root?
sim-ple past)??
?????
+?
????
(present root + b?
imperative)?
?+???
????
???(h?
+ noun?
plural noun)??+???
??????
????
??????
???
(?n + alive noun?
alive plural noun)Each rule is a sequence of clusters.
A clusterrepresents a set of morphemes that affects role ofthem in the word.
In other words, each morphemecould be applied as one or more roles for generat-ing words.
So, each role can be a cluster member-ship.
For example, in English, ?book?
is a verb anda noun.
But, As a noun, it has a plural form (books)and as a verb, it has a past form (booked).Similarly, in Persian, the word?????
(mord: die)is a verb root and ???????
(mord-and: They died) isa verb, too.
Also, ?????
(mard: man) is a noun and???????
(mard-h?
: men) is one of its plural forms.
Inconsequence, we put ????
?in both of cluster ?????
(esm: noun) and ???
?????
(bone m?zi: past root).We create a new cluster when a rule needs it andthat cluster is not in clusters repository.As we discussed about it, in Persian, we haveseveral suffixes for plural form that every one isused for a set of nouns.
The suffix ????
(h?)
is usedfor every noun and the suffix ????
(?n) is specialfor everything that is alive.
Other suffixes are ap-Word: string;P: array of pointer with word.length size;for C = 1 to word.length do{for i = 1 to C do{If (P[i] <> Blocked){edge = find_edge( P[i] , L );// find_edge finds a edge from its position// in tree that its letter is equal with L.if ( edge <> null ){GoDown(P[i],edge);substring(i, C).mInfo = P[i]-> mInfo;// mInfo is morphological Information}else P[i] = Blocked;}}}586plied for some words borrowed from Arabic andsome Persian words.
A noun such as ?????
(pesar:boy)has several plural forms (e.g.
???????/pesar-h?,???????/pesar-?n).
Therefore, we employ clustersfor organizing this situation.
For example, we putthe morpheme ?????
(pesar: boy) in cluster ?????
(esm: noun) and ????????
(j?nd?r: alive).
Also, wehave two rules in rules repository:?????+????(h?
+ noun)and????????+????
(?n + alive)The morpheme ?????
(pesar: boy) is a member ofboth clusters ?????
(esm: noun) and????????
(j?nd?r:alive).
Accordingly, these words ???????
(pesar-h?
:boys) and???????
(pesar-?n: boys) are correct formand their stem is ?????
(pesar: boy).
But about themorpheme ??????
(ket?b: book), it is a noun and amember of cluster ?????
(esm: noun) but it is not amember of cluster ????????
(j?nd?r: alive).
So,????????
(ket?b-h?
: books) is a correct form and itsstem is ??????
(ket?b: book).
In contrast, ????????
(ket?b-?n) is a wrong form and??????
(ket?b: book)is not its stem.
Also, we organize suffixes in simi-lar cluster such as cluster ??????
??????
(?enasemoz?re: present person identifier), ????
???
????
(harfe nafye fel).
Table 4 shows some clusters.Table 4.
Some clusters that we use.Cluster Cluster?????
?????
(present person identifier)??
?????
(present root)?????
???
??
(plural suffix h?)??
????
(past root)?????
???
??
(plural suffix ?n)???
(noun)At the end of this phase, each core must have arule that it can generate the word.
Otherwise, it isremoved from cores list.3.3 Anti Rule MatchingThis phase is similar previous phase with a smalldifference.
Like previous phase, we have a rulesrepository, but these rules are not applied in Per-sian.
In fact, these rules are exceptions of previousphase rules.
For example, we have a rule in rulesrepository:( ?
?+ ?????????
)(?n + alive noun)On the other hand, there is an exception for thisrule.
Every noun with the final leter ???
(he) cannot use this rule.
For example, ???????
(parand-e:bird) is a kind of animals with the final leter ???
(he) and theword ????????
?
(parand-e-?n) is a wrongword in Persian.
We call these exceptional rules?Anti rules?.The details of this phase: Each core from coreslist retrieves the anti rules that they involve it.
Af-ter that, each retrieved anti rule is checked with themorphemes in the word for possibility of wordgeneration.
Until now, all things were similar pre-vious phase, but the difference is here.
If there isany anti rule related to a rule of any core, that ruleis removed from candidate rule list of that core.
Atthe end of this phase, each core must have at leastone rule that it can generate the word.
Otherwise, itis removed from cores list.
Finally, remained coresin cores list have correct stems of the word.We have gathered a set of anti rules in a reposi-tory that each anti rule is related to a rule in rulerepository.
Some of these anti rules are shown inTable 5.Table 5.
Some gathered anti rules that we use.Anti Rule( ??+?????
??
????
??????
)(an + alive noun ended with h)( ??+?
?
???
?????
??
??
??
?
)(at + noun ended with ?,u,h, y)4 Experiments and ResultsThe most primitive method for assessing the per-formance of a stemmer is to examine its behaviorwhen applied to samples of words - especiallywords which have already been arranged into 'con-flation groups'.
This way, specific errors (e.g., fail-587ing to merge "maintained" with "maintenance", orwrongly merging "experiment" with "experience")can be identified, and the rules adjusted accord-ingly.We evaluated the proposed algorithm with alimited corpus of Hamshahri newspaper.
Westarted with 252 rules and 20 anti rules.
The algo-rithm retrieved 90.1 % of word stems correctly.The failed words are related to absence of somerules in rule repository or stems in Trie tree.
Someof words in the corpus are shown in Table 6.Table 6.
Some of words in Hamshahri newspa-per corpusStem Word?????(m?jar?)(event)??????
(m?jar?-ye)(event of)???(rasm)(custom)?????(rasm-h?)(customs)?????(padide)(phenomenon)?????
???
(padid-e-h?-ye)(phenomenons of)????
(bud)(to be)?????
(bud-and)(They were)????(s?at)(watch)??????????(s?at-h?-ye-??n)(watch)?????
(ke?idan)(to draw)?????(be-ke?a-and)???(?xar)(end)?????(?xar-in)(last)????(raftan)(going)?????
?????
(na-raft-e budand)(They had not gone)???(s?l)(year)?????
(em-s?l)(this year)??????(mot?le'e)(study)???????(mot?le-at)(studies)?????(mantaghe)(area)?????
(man?tegh)(areas)One of words could not be handle with our algo-rithm is ???????(j?-be-j?
- exchange).
We discov-ered related rule for that and added it to rules re-pository.
Therefore, if we evaluate the algorithm,the result will be better.
Rules repository evolvesand the algorithm result will be better without anychange of program and code compilation.5 ConclusionIn this paper, we proposed a bottom up method tostem Persian words.
The main purpose of thismethod is high precision stemming based on mor-phological rules.
The experiments show that it hassuitable results in stemming and presents possibil-ity of evolution easily.ReferencesBento, Cardoso and Dias.
2005.
Progress in ArtificialIntellegence, 12th Portuguese Conference on Artifi-cial Intelligence, pages 693?701.Chris Paice.
1996.
Method for Evaluation of StemmingAlgorithms Based on Error Counting.
JASIS , pages632-649.Frakes and Yates.
1992.
Information Retrieval: DataStructures and Algorithms.
Prentice Hall, NJ.Mayfield and McNamee.
2003.
Single N-gram Stem-ming.
In Proceedings of the 26th annual internationalACM SIGIR conference on Research and develop-ment in information.
retrieval, pages 415-416.Melucci and Orio.
2003.
A Novel Method for StemmerGeneration Based on Hidden Markov Models.
InProceedings of Conference on Information andKnowledge Management (CIKM03), pages 131-138.Michela Bacchin, Nicola Ferro, and Massimo Melucci.2002.
Experiments to evaluate a statistical stemmingalgorithm.
Working Notes for CLEF 2002, pages161-168.Michela Bacchin, Nicola Ferro, and Massimo Melucci.2002.
The Effectiveness of a Graph-Based Algorithmfor Stemming.
Springer-Verlag Berlin Heidelberg.pages 117?128.Porter.
An Algorithm for Suffix Stripping.
1980.
Pro-gram.
pages 130-137.Taghva, Beckley and Sadeh.
2005.
A stemming algo-rithm for the Farsi language.
IEEE ITCC 2005,pages 158 - 162.588
