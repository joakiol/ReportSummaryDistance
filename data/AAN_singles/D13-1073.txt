Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages 780?790,Seattle, Washington, USA, 18-21 October 2013. c?2013 Association for Computational LinguisticsMining Scientific Terms and their Definitions:A Study of the ACL AnthologyYiping Jin1 Min-Yen Kan1,2 Jun-Ping Ng1 Xiangnan He1 ?1Department of Computer Science2Interactive and Digital Media InstituteNational University of Singapore13 Computing Drive, Singapore 117417{yiping, kanmy, junping, xiangnan}@comp.nus.edu.sgAbstractThis paper presents DefMiner, a supervisedsequence labeling system that identifies scien-tific terms and their accompanying definitions.DefMiner achieves 85% F1 on a Wikipediabenchmark corpus, significantly improvingthe previous state-of-the-art by 8%.We exploit DefMiner to process the ACL An-thology Reference Corpus (ARC) ?
a large,real-world digital library of scientific arti-cles in computational linguistics.
The re-sulting automatically-acquired glossary rep-resents the terminology defined over severalthousand individual research articles.We highlight several interesting observations:more definitions are introduced for conferenceand workshop papers over the years and thatmultiword terms account for slightly less thanhalf of all terms.
Obtaining a list of populardefined terms in a corpus of computational lin-guistics papers, we find that concepts can of-ten be categorized into one of three categories:resources, methodologies and evaluation met-rics.1 IntroductionTechnical terminology forms a key backbone inscientific communication.
By coining formalizedterminology, scholars convey technical informationprecisely and compactly, augmenting the dissemi-nation of scientific material.
Collectively, scholarly?This research is supported by the Singapore National Re-search Foundation under its International Research Centre @Singapore Funding Initiative and administered by the IDM Pro-gramme Office.compilation efforts result in reference sources suchas printed dictionaries, ontologies and thesauri.While online versions are now common in manyfields, these are still largely compiled manually, re-lying on costly human editorial effort.
This leadsto resources that are often outdated or stale with re-spect to the current state-of-the-art.
Another indirectresult of this leads to a second problem: lexical re-sources tend to be general, and may contain multi-ple definitions for a single term.
For example, theterm ?CRF?
connotes ?Conditional Random Fields?in most modern computational linguistics literature;however, there are many definitions for this acronymin Wikipedia.
Because only one correct sense ap-plies, readers may need to expend effort to identifythe appropriate meaning of a term in context.We address both issues in this work by automat-ically extracting terms and definitions directly fromprimary sources: scientific publications.
Since mostnew technical terms are introduced in scientific pub-lications, our extraction process addresses the bottle-neck of staleness.
Second, since science is organizedinto disciplines and sub-disciplines, we can exploitthis inherent structure to gather contextual informa-tion about a term and its definition.Aside from performance improvements, the keycontributions of our work are in 1) recasting theproblem as a sequence labeling task and exploringsuitable learning architectures, 2) our proposal andvalidation of the the use of shallow parsing and de-pendency features to target definition extraction, and3) analyzing the ACL Anthology Reference Cor-pus from statistical, chronological and lexical view-points.7802 Related WorkThe task of definition mining has attracted a fairamount of research interest.
The output of such sys-tems can be used to produce glossaries or answerdefinition questions.
The primary model for thistask in past work has been one of binary classifi-cation: does a sentence contain a definition or not?Existing methods can be cast into three main cat-egories, namely rule-based (Muresan and Klavans,2002; Westerhout and Monachesi, 2007), supervisedmachine learning (Fahmi and Bouma, 2006; Wester-hout, 2009), and semi-supervised approaches (Nav-igli and Velardi, 2010; Reiplinger et al 2012).Rule-based approaches are intuitive and efficient,and were adopted in early research.
Here, systemperformance is largely governed by the quality ofthe rules.
Muresan and Klavans (2002) developed arule-based system to extract definitions from onlinemedical articles.
The system first selects candidatesusing hand-crafted cue-phrases (e.g.
is defined as,is called; analogous to ?IS-A?
phrases), further fil-tering the candidates with grammar analysis.
West-erhout and Monachesi (2007) augmented the set ofrules with part-of-speech (POS) tag patterns, achiev-ing an F2 of 0.43.While such manually-crafted expert rules havehigh precision, they typically suffer from low re-call.
Definitions can be expressed in a variety ofways, making it difficult to develop an exhaustiveset of rules to locate all definition sentences.
To ad-dress low recall, later research adopted data-drivenmachine learning approaches.
Fahmi and Bouma(2006) made used of supervised machine learning toextract definitions from a corpus of Dutch Wikipediapages in the medical domain.
They showed thata baseline approach which simply classifies everyfirst sentence as a definition works surprisingly well,achieving an accuracy of 75.9% (undoubtedly due tothe regular structure and style for Wikipedia).
Theirfinal system, based on the important feature of sen-tence position, was augmented with surface-levelfeatures (bag-of-words, bigrams, etc.)
and syntac-tic features (type of determiner, position of the sub-ject in the sentence).
Their study with three differentlearners ?
na?
?ve Bayes, maximum entropy (MaxEnt)and the support vector machine (SVM) ?
showedthat MaxEnt gave the best results (92.2% accurate).Westerhout (2009) worked on a hybrid approach,augmenting a machine learner to a set of hand-written rules.
A random forest classifier is used toexploit linguistic and structural features.
Informedby Fahmi and Bouma (2006)?s study, she includedarticle and noun types in her feature set.
Lexico-structural cues like the layout of the text are alsoexploited.
She evaluated the performance of dif-ferent cue phrases including the presence of ?IS-A?
phrases, other verbs, punctuations and pronouns.The highest F2 score of 0.63 is reported for the ?IS-A?
pattern.Since 2009 the focus of the research shifted tomethods not limited to feature engineering.
Borget al(2009) implemented a fully automated systemto extract and rank definitions based on genetic al-gorithms and genetic programming.
They definedtwo sub-problems including 1) acquiring the rela-tive importance of linguistic forms, and 2) learn-ing of new linguistic forms.
Starting with a smallset of ten simple hand-coded features, such as hav-ing sequence ?FW IS?
(FW is a tag for foreignword) or containing keyword identified by the sys-tem, the system is able to learn simple rules such as?NN is a NN?.
However, their system is optimizedfor similar ?IS-A?
patterns, as was used in (West-erhout, 2009).
Their system, achieving an averagef-measure of 0.25, also performs poorer than ma-chine learning systems which exploit more specificfeatures.To cope with the generality of patterns, Navigliand Velardi (2010) proposed the three-step use ofdirected acyclic graphs, called Word-Class Lattices(WCLs), to classify a Wikipedia dataset of defini-tions.
They first replace the uncommon words in thesentences with a wildcard (*), generating a set of?star patterns?.
Star patterns are then clustered ac-cording to their similarity.
For each cluster, a WCLis generated by aligning the sentences in the clusterto form a generalized sentence.
Although they re-ported a higher precision and recall compared withprevious work, the result for WCL (F1 of 75.23%)is not significantly better than the baseline systemwhich exploits only star patterns (F1 of 75.05%)without generating the directed graphs.Reiplinger et al(2012) took a semi-supervisedapproach.
They employed bootstrapping to ex-tract glossary sentences from scientific articles in781the ACL Anthology Reference Corpus (ACL ARC)(Bird et al 2008).
Their results show that bootstrap-ping is useful for definition extraction.
Starting froma few initial term-definition pairs and hand-writtenpatterns as seeds, their system iteratively acquiresnew term-definition pairs and new patterns.We note that these previous systems rely heav-ily on lexico-syntactic patterns.
They neither suf-ficiently exploit the intrinsic characteristics of theterm and definition, nor invest effort to localize themwithin the sentence1.
Given the significant structurein definitions, we take a more fine-grained approach,isolating the term and its definition from sentences.According to Pearson (1996), a definition can be for-mally expressed as:X = Y + distinguishing characteristics,where ?X?
is the definiendum (defined term; here-after, term), and ?Y + distinguishing characteristics?can be understood as the definiens (the term?s defini-tion; hereafter, definition).
The connector ?=?
can bereplaced by a verb such as ?define?, ?call?, a punc-tuation mark or other phrase.
Our task is thus to findpairs of terms and their associated definitions in in-put scholarly articles.
The sentence-level task of de-ciding whether a sentence s is a definition sentenceor not, is thus a simplification of our task.3 MethodologyOur DefMiner system is based on the sequence la-beling paradigm ?
it directly assigns an annotationai from A ?
{(T)erm,(D)efinition,(O)ther} for eachinput word wi.
We post-process our labeler?s resultsto achieve parity with the simplified definition sen-tence task: When we detect both a term?s and defini-tion?s presence in a sentence, we deem the sentencea definition sentence.
To be clear, this is a require-ment; when we detect only either a term or a def-inition, we filter these out as false positives and donot include them as system output ?
by definition inDefMiner, terms must appear within the same sen-tence as their definitions.To train our classifier, we need a corpus of defi-nition sentences where all terms and definitions are1While Navigli and Velardi (2010) tagged terms and defini-tions explicitly in their corpus, their evaluation restricts itself tothe task of definition sentence identification.annotated.
While Navigli and Velardi (2010) com-piled the WCL definition corpus from the EnglishWikipedia pages, we note that Wikipedia has stylis-tic conventions that make detection of definitionsmuch easier than in the general case (i.e., ?The firstparagraph defines the topic with a neutral point ofview?2).
This makes it unsuitable for training a gen-eral extraction system from scholarly text.As such, we choose to construct our own datasetfrom articles collected from the ACL ARC, follow-ing (Reiplinger et al 2012).
We compiled a corpus?
the W00 corpus, named for its prefix in the ACLAnthology ?
derived from a total of 234 workshoppapers published in 2000.
Due to limited resourcesand time, only one individual (the first author) per-formed the corpus annotation.
We built three dis-joint prototype classifiers to further filter the sen-tences.
The prototype classifiers are based on sur-face patterns, keyphrases and linguistic phenomena(# of NP, # of VP, etc.).
We took all the 2,512 sen-tences marked as definition sentences by at least oneof our individual prototypes and proceeded to an-notate all of them.
In total, 865 of the total 2,512sentences were real definition sentences.The annotation instance is a single token (includ-ing single word or punctuation mark).
Each tokenwi was marked with ai from A ?
{T,D,O} depend-ing on whether it is part of a term, a definition orneither (other).
Therefore, a sentence that is not adefinition sentence would have all its tokens markedas O.
The corpus and its annotations are availablefor comparative study3.We use Conditional Random Fields (CRFs) (Laf-ferty et al 2001) to extract the term and defini-tion from input.
We incorporate evidence (features)drawn from several levels of granularity: from theword-, sentence- and document-levels, not limitingourselves to the window of previous n words.
CRFsallow us to encode such features which may not beconditionally independent.
We use the open sourceimplementation, CRF++ (Kudo, 2005) in our work4.One straightforward approach is to train indepen-dent classifiers for terms and definitions, which we2http://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style/Lead_section3http://wing.comp.nus.edu.sg/downloads/term_definition_mining/4http://code.google.com/p/crfpp/782test in Section 4.1.
While simple, this is suboptimalas it ignores the correlation between the presenceof the two components.
Term identification (in theguise of key-word/-phrase extraction) is well studiedand common features such as tf.idf and English or-thography achieve satisfactory results (Nguyen andKan, 2007).
In contrast, definitions exhibit moreflexible structure and hence are more difficult to dis-tinguish from normal English text.As such, we further investigate a serial archi-tecture where we perform the classifications in se-quence.
I.e., first utilizing the results from term clas-sification, and then incorporating them into defini-tion classification.
This two-stage architecture is ex-plored later in Section 4.2Our expanded feature set is an amalgamation ofrelated works and utilizes a mix of simple lexical,orthography, dictionary lookup and corpus features(here, idf ).
Note that each feature class may derivemore than one feature (e.g., for the POS tag feature,we extract features from not only the current wordbut the surrounding contextual words as well).
Wenow enumerate the feature classes (FCs) that weexploit, marking whether they apply to the (W)ord,(S)entence or (D)ocument levels:FC1) Lexical (W): The word, POS tag, stemmed word,and if the word contains a signal suffix5.FC2) Orthography (W): Whether the word is 1) capital-ized or 2) mixed case; whether the word contains 3) hy-phens or 4) digits.FC3) Keyphrase List (W): Whether the word is in thekeyphrase list of the origin document.
We use the opensource KEA keyphrase extraction system (Witten et al1999) to extract 20 keyphrases for each document.FC4) Corpus (W): Discretized Inverse Document Fre-quency (idf ), calculated as log(Nc ), where N is the totalnumber of documents and c is the number of occurrencesof the word in all the documents.
IDF values are dis-cretize into eight uniform partitions.FC5) Position (D,S): The 1) Section ID, 2) name and 3)the sentence?s relative position in the document.FC6) Has acronym (S): Whether the sentence contains anacronym.
We use Stanford dependency parser (Cer et al2010) to parse the sentences.
We deem the sentence tocontain an acronym if the dependency type ?abbrev?
ispresent in the output of the parser.FC7) Surface pattern (S): Whether the sentence contain5The suffixes we extract are ?-ion?,?-ity?,?-tor?,?-ics?,?-ment?,?-ive?
and ?-ic?.<term > defined (as|by) <definition>define(s)?
<term> as <definition>definition of <term> <definition><term> a measure of <definition><term> is DT <definition> (that|which|where)<term> comprise(s)?
<definition><term> consist(s)?
of <definition><term> denote(s)?
<definition><term> designate(s)?
<definition><definition> (is|are|also) called <term><definition> (is|are|also) known as <term>Table 1: Hand-crafted surface patterns used in DefMiner.one of the hand-crafted pattern, as listed in Table 1.
Thelist is compiled from previous works and augmentedbased on our observations on the corpus.Long Distance Features.
During develop-ment, we noticed that the syntactic variation ofthe definition might benefit from features thatidentify long-distance dependencies.
As such, wefurther studied the impact of including additionalfeatures developed from the shallow (chunk) anddependency parses of the input.
Compared tothe above features, these features are much morecomputationally-intensive.FC8) Shallow tag (W): Shallow parsing tag for each word(e.g., np, vp).
We used OpenNLP toolkit to shallow parsethe sentences.
(Baldridge, 2005)FC9) Shallow pattern (S): If the shallow parsing sequencecontains one of the seven parse patterns listed in Table 2.We also give some example sentences which can be de-tected by the patterns.FC10) Governor (W): The word that the current word de-pends on in a binary dependency relation.
(e.g., for thephrase computational linguistics, the governor of theword computational is linguistics).FC11) Dependency path distance (W): Distance from thecurrent word to the root of the sentence in the dependencytree.FC12) Typed dependency path (W): The dependencypath from the current word to the root of the sentence(recording the dependency types instead of the words inthe path).783Pattern ExampleNP : NP JavaRAP : An open-source implementa-tion of the RAPNP is * NP IR is the activity of obtaining informa-tion resourcesNP is * NPthat/of/whichNLP is a subject which is well studiedNP or NP Conditional Random field or CRF tack-les ...known as NP The corpus of English Wikipedia pages,known as EnWikiNP ( * NP) Hidden Markov Model (HMM) is usedto solve ...NP defined by/as* NPThe accuracy is defined by the produc-tion of ...Table 2: Hand-crafted shallow parsing patterns used inDefMiner.4 EvaluationWe now assess the overall effectiveness ofDefMiner, at both the word and sentence level.
Ad-ditionally, we want to ascertain the performancechanges as we add features to an informed lexicalbaseline.
We not only benchmark DefMiner?s per-formance over our own W00 collection, but alsocompare DefMiner against previous published workon the definition sentence identification task on theWCL (English Wikipedia) corpus.4.1 Single-Pass Extraction from W00We run ten-fold cross validation on our annotatedW00 corpus.
We first evaluate our results at wordlevel, calculating the precision, recall, and F1 scoresfor each incrementally enhanced feature set.
Wepresent results on the corpus in the top portion ofTable 3 (Rows 1?9).We calculate both micro and macro- (category)averaged F1 scores for term and definition extrac-tion.
Fmicro assigns equal weight to every token,while Fmacro gives equal weight to every category.As definition tokens greatly outnumber term tokensin our corpus (roughly 6:1), we feel that the macro-average is a better indicator of the balance betweenterm and definition identification.Our baseline system makes use of basic wordand POS tag sequences as features (FC1), whichare common to baselines in other sequence labelingworks.
We can see that most features result in per-formance improvements to the baseline, especiallyfor recall.
Interestingly, although the shallow pars-ing and dependency features we use are rather sim-ple, they effectively improve the performance of thesystem.
In System 7, we only use the seven shallowparsing patterns shown in Table 2, but the Fmacromeasure improves 3%.
Our best single-stage sys-tem (System 9 in Table 3) boosts recall for term anddefinition classification by 7% and 5%, respectively,without sacrificing precision.
The Fmacro measureis improved from 0.44 to 0.48.Unexpectedly, the inclusion of the position fea-tures cause performance to drop.
One possible rea-son is that the authors of scientific papers havemore flexibility to choose the positions to presentdefinitions.
This makes the position feature muchless indicative (compared to running on a corpus ofWikipedia articles).
Due to this observation, we ex-clude the position features when carrying out fol-lowing experiments.4.2 Serial Term and Definition ClassificationWe now investigate the two-stage, serial archi-tecture where the system first performs termclassification before definition classification (i.e.,termdefinition).
We provision the second-stagedefinition classifier with three additional featuresfrom the first-stage term classification output:whether the current word (1) is a term, and (2) ap-pears before or (3) after a term.Row 10 shows this resulting system, which wecoin as DefMiner.
Interestingly, there is a 10% in-crease in the precision of definition classification.With the two-stage classifier, Fmacro score furtherincreases from 0.48 to 0.51.
The results verify ourintuition that term classification does help in defini-tion classification.
Pipelining in the opposite direc-tion (definitionterm; Row 11) does not show anyimprovement.
We posit that since the advantage isonly in a single direction, joint inference may be lesslikely to yield benefits.To determine the upper bound performance thatcould result from proper term identification, we pro-vided correct, oracular term labels from our groundtruth annotations in our corpus to the second-stagedefinition classifier.
This scenario effectively upper-bounds the performance that perfect term knowledgehas on definition classification.
The results of thissystem in Row 12 indicates a strong positive influ-ence on definition extraction, improving definitionextraction from 49% to 80%, a leap of 31%.
This784System / Feature Class (cf Section 3) Term Definition OverallP R F1 P R F1 Fmicro Fmacro1: Baseline (FC1) 0.49 0.34 0.40 0.41 0.49 0.45 0.45 0.442: (1) + Orthography (FC2) 0.46 0.35 0.40 0.42 0.51 0.46 0.46 0.443: (2) + Dictionary (FC3) 0.48 0.36 0.41 0.41 0.49 0.44 0.44 0.434: (3) + Corpus (FC4) 0.50 0.35 0.41 0.40 0.52 0.45 0.45 0.445: (4) + Position (FC5) 0.47 0.37 0.42 0.36 0.48 0.41 0.41 0.416: (4) + Shallow parsing tag (FC8) 0.51 0.38 0.43 0.41 0.50 0.45 0.45 0.447: (6) + Shallow parse pattern (FC9) 0.50 0.40 0.45 0.42 0.52 0.47 0.47 0.478: (7) + Surface pattern (FC7) 0.49 0.39 0.44 0.43 0.53 0.48 0.48 0.479: (8) + Dependency + acronym(FC6,10,11,12)0.50 0.41 0.45 0.45 0.54 0.49 0.49 0.4810 [DefMiner]: (9) + 2-stage 0.50 0.41 0.45 0.55 0.58 0.56 0.55 0.5111: (9) + Reverse 2-stage 0.50 0.40 0.44 0.45 0.54 0.49 0.49 0.4812: (9) + Term Oracle N/A N/A N/A 0.79 0.82 0.80 N/A N/ATable 3: 10-fold cross validation word-level performance over different system configurations on our W00 corpus.motivates future work as how to improve the perfor-mance of the term classifier so as to reap the benefitspossible with our two-stage classifier.4.3 Comparative results over the WCL DatasetFor most of the related research reviewed, we couldneither obtain their source code nor the corpora usedin their work, making comparative evaluation diffi-cult.
To the best of our knowledge, Reiplinger etal.
(2012) is the only attempt to extract definitionsfrom the ACL ARC corpus, which is a superset ofour W00 corpus.
It would be desirable to have a di-rect comparison with their work, but their evaluationmethod is mainly based on human judges and theirreported coverage of 90% is only for a sample, shortlist of domain terms they defined in advance.To directly compare with the previous, more com-plex state-of-the-art system from (Navigli and Ve-lardi, 2010), we evaluate DefMiner on the defini-tion sentence detection task.
For the sentence-levelevaluation, we calculate the P/R/F1 score based onwhether the sentence is a definition sentence.
Weapplied DefMiner on their whole WCL annotatedcorpus, reporting results in Table 4.
We random-ized the definition and none-definition sentences intheir corpus and applied 10-folds cross validation.In each each iteration we used 90% of the sentencesfor training and 10% for testing.Compared to their results reported in (Navigli andSystem Token Level SentenceTerm Definition LevelP / R / F1 P / R / F1 P / R / F1DefMiner .82/.78/.80 .82/.79/.81 .92/.79/.85N&V ?10 ?
/ ?
/ ?
?
/ ?
/ ?
.99/.61/.77Table 4: Comparative performance over the WCL.Velardi, 2010), DefMiner improves overall F1 by8%.
While certainly less precise (precision of 92%versus 99%), recall is improved over their consid-erably more complex WCL-3 algorithm by almost20%.
Even using just the simple heuristic of onlyclassifying sentences that have identified terms aswell as definitions as definition sentences, DefMinerserves to competitively identify definition sentences.4.4 Manual Inspection of DefMiner OutputTo gauge the noise from our system outside of ourcross-validation experiments, we conducted a man-ual inspection of results over other workshop papersfrom other years (2001 and 2002), as a sanity check.DefMiner identifies 703 and 1,217 sentences in W01and W02 as definition sentences separately.Overall, 77.8% of the extracted sentences are realdefinition sentences, while the remaining are falsepositives.7854.4.1 Analysis of Common ErrorsThe P/R/F1 score by itself only gives a hintof the system?s overall performance.
We are alsointerested to study the common errors made by oursystem, which could help us engineer better featuresfor improving DefMiner.
As our two-stage classifierstill lags behind the system with oracular termlabels by 24% in F1 for definition detection (Sec-tion 4.2), we believe there is still much room forimprovement.
We show three example misclassifiedsentences that represent the major types of errorswe observed, where DefMiner?s output annotationsfollow tokens marked as part of terms or definitions.1) A PSS/TERM thus contains abstract linguistic valuesfor closed features ( tense/DEF ,/DEF mood/DEF ,/DEFvoice/DEF ,/DEF number/DEF ,/DEF gender/DEF,/DEF etc/DEF ./DEF ) .This first instance shows that DefMiner tends tomark the first several tokens as ?TERM?
while thereal term appears somewhere else in the sentence.The actual term being defined is ?closed features?instead of ?PSS?.
Many terms in the training setappear at the beginning of the sentence and arepreceded by a determinant.
?PSS?
is also likelyto receive a high IDF and orthographic shape(capitalized) score and therefore are misclassifiedas terms.
It may be useful to thus model the (usual)distance between the term and its definition in afeature in future work.2) Similarly , ?I?/TERM refers to an/DEF interior/DEFcharacter/DEF and/DEF ?L?/DEF indicates/DEFthe/DEF last/DEF character/DEF of/DEF a/DEFword/DEF .DefMiner is occasionally confused when encoun-tering recursive definition or multiple definitions ina single sentence.
Sentence 2 contains two paralleldefinitions.
The classifier fails to classify ?L?as a separate term, incorporating it as part of thedefinition.
One possible improvement is to break theoriginal sentence into clauses that are independentfrom each other, perhaps by using even simplesurface cues such as coordinating conjunctionsmarked by commas or ?and?.3) Again one could argue that the ability to conveysuch uncertainty and reliability information to a non-specialist/TERM is a/DEF key/DEF advantage/DEFof/DEF textual/DEF summaries/DEF over/DEFgraphs/DEF .Another difficult problem faced by the classifieris the lack of contextual information.
In sentence3), if we just look at part of the sentence ?a non-specialist is a key advantage of textual summariesover graphs?, without trying to understand the mean-ing of the sentence, we may well conclude that it isa definition sentence because of the cue phrase ?isa?.
But clearly, the whole sentence is not a defini-tion sentence.
More sophisticated features based onthe sentence parse tree have to be exploited to detectsuch false positive examples.5 Insights from the Definitions Extractedfrom the ACL ARCIn this second half of the paper, we apply DefMinerto gain insights on the distributional and lexicalproperties of terms and definitions that appear inthe large corpus of computational linguistics publi-cations represented by the ACL ARC (Bird et al2008).
The ARC consists of 10,921 scholarly publi-cations from ACL venues, of which our earlier W00corpus is a subset (n.b., as such, there is a smallamount of overlap).
We trained a model using thewhole of the W00 corpus and used the obtained clas-sifier to identify a list of terms and definitions foreach publication in the ACL ARC.Inspecting such output gives us an understandingof the properties of definition components, eventu-ally helping the community to define better featuresto capture them, as well as intrinsically deepeningour knowledge of the natural language of definitionsand the structure of scientific discourse.5.1 DemographicsFrom a term?s perspective we can introspect prop-erties of the enclosing paper, the host sentence, theterm itself and its definition.At the document level, we can analyze documentmetadata: its venue (journal, conference or work-shop published) and year of publication.786At the sentence level, we analyze the position ofthe sentences that are definition sentences.Focusing on terms, we want to find out in moredetail the technical terminology that is defined.
Arethey different from general keyphrases?
What typeof entities are defined?
What words do these termsconsist of?
What structures are common?We are interested in analogous questions whenfocusing on the accompanying definitions.
Howmany words or clauses do definition sentencesconsist of?
Do we lose a lot of recall by restrictingdefinitions to a single sentence?
Are embeddeddefinitions (definitions embedded with other defini-tions) common?We highlight some specific findings from our ba-sic analyses here:Where do definitions occur?
As terms are usu-ally defined on first use, we expect the distributionof definition sentences to skew towards the begin-ning portions of a scientific document as input.
Wecount the occurrences of definition sentences in eachof ten equally-sized (by number of sentences) non-overlapping partitions.
The results are shown in Fig-ure 1, aligning with our intuition: The first threequantiles contribute almost 40% of all detected def-inition sentences, while the last three quantiles con-tain only 17.8%.5898?
6258?
6574?
6202?
5512?
5020?
4341?
3593?
2931?
2233?0?2000?4000?6000?8000?1?
2?
3?
4?
5?
6?
7?
8?
9?
10?Frequency?Quan?le?
(1?=?first?10%;?10?=?last?10%)?Figure 1: Occurrences of definitions within different seg-ments of an article.How long are the detected terms and defini-tions?
Figure 2 shows the detected aggregate dis-tributions.
Over 54% of the detected terms are sin-gle tokens, where majority of the remaining 45% ofterms being multi-word terms of six words or less.Among the single token terms, a further analysisreveals that 17.4% are detected as single-charactervariables, 34.9% are acronyms (consisting of morethan one capitalized letters), while the remaining47.7% are normal words.
Definitions, in contrast,are longer and more varied, with a peak length ofnine words.
Slightly over half of the definitions havea length of 5?16 words; 75% have lengths between3 and 23 words.54.15?27.84?8.9?
4.29?
2.4?
1.32?
0.65?
0.33?
0.23?
0.15?0?10?20?30?40?50?60?1?
2?
3?
4?
5?
6?
7?
8?
9?
10?Percentage?Number?of?Words?
(t) Term length distribution.0?1?2?3?4?5?6?1?
6?
11?
16?
21?
26?
31?
36?
41?
46?
51?
56?Percentage?Number?of?Words?
(b) Definition length distribution.Figure 2: Length distributions of (top) terms, (bottom)definitions.In Table 5, we present the 10 most frequent POStag bigrams for terms and definitions.
We can seethat among terms, a sequence of consecutive twonouns is most common, making up four out of thetop five bigrams.
We notice that determiners andprepositions are absent from the term list but arecommon in definitions.5.2 Inspection of Definition over TimeThe ACL ARC covers journal articles, conferenceand workshop proceedings over a few decades.
Aswith other fields in recent years, the amount ofcomputational linguistics literature has steadily in-creased over the number of years.We study if definitions appear as frequently in dif-ferent types of scientific articles (e.g.
journals, con-ference papers or workshop papers).
We also wantto investigate if there is a significant shift in the dis-tribution of definitions across years.
In Figure 3,we present the density of definitions (defined as the787Term DefinitionNNP NNP DT NNNN NN NNP NNPNNP NN NN INNN NNP IN DTJJ NN NN NNNN JJ JJ NNNNP : NN :: NNP DT JJNN NNS NNS INNN ?
NN NNSTable 5: Most frequent POS bigrams for terms and defi-nitions.percentage of sentences that are identified as defini-tion sentences), for these three different categoriesof publications6.In Figure 3, the three data series overlap eachother, so we cannot conclude definitions appearmore often in one type of papers than another.
How-ever, as a side effect, we see that while the definitiondensity for journal papers remain relatively constant,for conference and workshop papers the number ofdefinitions extracted per sentence has increased no-ticeably over time.
The average number of defini-tions presented in conference papers, for instance,increased more than 100% in the 40 years repre-sented in the ACL ARC.The increasing number of definitions alone doesnot show that new knowledge is introduced at afaster rate, as definitions may be repeated.
To con-trol for this effect, we also need to know which def-initions are new or defined in previous year(s).
Westudied this effect in more detail for the relativelysmaller set of journal papers (Figure 4).
For jour-nal papers, the number of definitions of previouslyintroduced terms in each year against the number ofnew definitions.
We say a definition is new when thedetected term was not identified in any article (notlimited to journals) in previous years.We see that the number of new terms being de-fined also increases with the years.
But the increaseis much slower than that for the total definitions.
Thearea between the two lines denotes the definitions6The ACL ARC is organized by the venue of the publication,which is associated to a category.
For the assigned category foreach venue please refer to Appendix A.where the same term has been multiply defined fromthe same or previous years as the current year underinvestigation.5.3 TrendsWe can use terms and definitions to also intro-spect how the computational linguistics literaturehas changed over time.
Table 6 shows a subset ofthe most frequently defined terms in the ACL ARC,where we exclude single-character terms (?vari-ables?
).WordNet (292) Part Of Speech (45)Precision (172) Probablistic CFG (43)Recall (167) FrameNet (38)Noun phrase (97) Conditional Random Field (29)Word sense disambiguation (60) Inverse document frequency (28)Support Vector Machine (60) PropBank (27)Hidden Markov Model (54) Context Free Grammar (25)Latent Semantic Analysis (57) Accuracy (20)Table 6: Subset of most frequently defined terms.
Rawcounts in parentheses.
Variations of the same term (e.g.plurals, acronyms) are collapsed into one instance.To be expected, these popular terms are mostlyspecific to computational linguistics.
From ourobservation, we can fit these terms into one ofthree categories, including 1) resources (WordNet,FrameNet, PropBank), 2) methodologies (SVM,HMM, LSA), and 3) evaluation metrics (Precision,Recall, Accuracy).
We feel that the final categoryof evaluation metrics is more general and would beshared among other scientific disciplines.An interesting analysis that follows from this cat-egorization is that we can study major trends andchanges in the research directions of the commu-nity.
This can help to draw the attention of re-searchers to emerging trends.
We illustrate this ap-proach in Figure 5 that focuses on three sequencelabeling methodologies that have been used to ad-dress similar problems ?
namely, hidden Markovmodel (HMM), maximum entropy Markov model(MEMM), and conditional random fields (CRF) ?during the period from 1989 to 2006 (where we havesufficient data points).
From the early 90s, we seethat HMM was a clear favorite.
However since 2000,MEMM gained in popularity and use.
Lafferty etal.
(2001) introduced CRFs in 2001 and the newmethodology was widely adopted soon after that.7880.000?0.005?0.010?0.015?0.020?0.025?0.030?0.035?1967?
1973?
1979?
1982?
1987?
1993?
1999?
2005?Defini?n?Density?Year?Conference?Papers?
Journals?
Workshops?Figure 3: Occurrences of definitions across publication cat-egories.0?50?100?150?200?250?300?350?1980?
1982?
1985?
1988?
1992?
1996?
2001?
2004?#?Collected?Defini?ons?Year?New?Terms?
Previously?Defined?Terms?Figure 4: Relative proportions of new and recurring defini-tions in journal papers.Figure 5: The occurrence of definitions for various se-quence labeling methodologies over the years.6 Conclusions and Future WorkWe study the task of identifying definition sentences,as a two-part entity containing a term and its ac-companying definition.
Unlike previous work, wepropose the harder task of delimiting the componentterm and definitions, which admits sequence label-ing methodologies as a compatible solution.Leveraging the current best practice of using con-ditional random fields, we contribute two additionalideas that lead to DefMiner, a state-of-the-art schol-arly definition mining system.
First, we show thatshallow parsing and dependency parse features thatmay provide additional non-local information, areuseful in improving task performance.
Second,viewing the problem as two correlated subproblemsof term and definition extraction, we measure thetightness and dependency of the correlation.
Wefind that a two-stage sequential learning architecture(term first, definition second) leads to best perfor-mance.
DefMiner outperforms the state of the art,and we feel is fit for macroscopic analysis of scien-tific corpora, despite significant noise.We thus deployed DefMiner on the ACL An-thology Reference Corpus.
We demonstrate howDefMiner can yield insights into both the struc-ture and semantics of terms and definitions, in bothstatic and diachronic modes.
We think future workcould pursue more in-depth analysis of the distribu-tional and demographic properties of automaticallyextracted lexica.
We can use the lexicon obtainedfrom different years to carry out trend prediction,which we have illustrated here.
Downstream sys-tems may predict which term will become popular,or could alert an author if their definition of a termsignificantly differs from the original source.We hope to tackle the annotation bottleneck in fu-ture work on definition extraction, common in manydata-driven learning fields.
We plan to explore iter-ative, semi-supervised methods to best manage hu-man effort to maximize the effectiveness of futureannotation.In addition, with respect to modeling, althoughwe showed that doing definition classification beforeterm classification does not improve over our single-stage classifier, we hope to study whether suitablejoint inference models can benefit from the interac-tion between the two classification processes.789ReferencesJason Baldridge.
2005.
The opennlp project.Steven Bird, Robert Dale, Bonnie J. Dorr, Bryan Gib-son, Mark T. Joseph, Min-Yen Kan, Dongwon Lee,Brett Powley, Dragomir R. Radev, and Yee Fan Tan.2008.
The ACL anthology reference corpus: A ref-erence dataset for bibliographic research in computa-tional linguistics.
In Proceedings of the 6th Interna-tional Conference on Language Resources and Evalu-ation Conference (LREC08), pages 1755?1759, Mar-rakech, Morocco.Claudia Borg, Mike Rosner, and Gordon Pace.
2009.Evolutionary algorithms for definition extraction.
InProceedings of the 1st Workshop on Definition Extrac-tion, WDE ?09, pages 26?32, Stroudsburg, PA, USA.Association for Computational Linguistics.Daniel Cer, Marie-Catherine de Marneffe, Daniel Juraf-sky, and Christopher D. Manning.
2010.
Parsing tostanford dependencies: Trade-offs between speed andaccuracy.
In 7th International Conference on Lan-guage Resources and Evaluation (LREC 2010), Val-letta, Malta.Ismail Fahmi and Gosse Bouma.
2006.
Learning to iden-tify definitions using syntactic features.
In Proceed-ings of the EACL workshop on Learning Structured In-formation in Natural Language Applications, Trento,Italy.Taku Kudo.
2005.
Crf++: Yet another crf toolkit.
Soft-ware available at http://crfpp.
sourceforge.
net.John D. Lafferty, Andrew McCallum, and Fernando C. N.Pereira.
2001.
Conditional random fields: Probabilis-tic models for segmenting and labeling sequence data.In Proceedings of the Eighteenth International Con-ference on Machine Learning, ICML ?01, pages 282?289, San Francisco, CA, USA.Smaranda Muresan and Judith Klavans.
2002.
A methodfor automatically building and evaluating dictionaryresources.
In Proceedings of the Language Resourcesand Evaluation Conference (LREC), Las Palmas, Ca-nary Islands, Spain.Roberto Navigli and Paola Velardi.
2010.
Learningword-class lattices for definition and hypernym extrac-tion.
In Proceedings of the 48th Annual Meeting ofthe Association for Computational Linguistics, pages1318?1327, Uppsala, Sweden.Thuy Dung Nguyen and Min-Yen Kan. 2007.
Keyphraseextraction in scientific publications.
In Proceedings ofInternational Conference on Asian Digital Libraries,pages 317?326, Hanoi, Vietnam.Jennifer Pearson.
1996.
The expression of definitions inspecialised texts: a corpus-based analysis.
In Proceed-ings of Euralex 96.Melanie Reiplinger, Ulrich Schafer, and Magdalena Wol-ska.
2012.
Extracting glossary sentences fromscholarly articles: a comparative evaluation of patternbootstrapping and deep analysis.
In Proceedings ofthe ACL-2012 Special Workshop on Rediscovering 50Years of Discoveries, ACL ?12, pages 55?65, Strouds-burg, PA, USA.
Association for Computational Lin-guistics.Eline Westerhout and Paola Monachesi.
2007.
Extrac-tion of dutch definitory contexts for elearning pur-poses.
In Proceedings of Computational Linguistics(CLIN 2007).Eline Westerhout.
2009.
Definition extraction usinglinguistic and structural features.
In Proceedings ofthe 1st Workshop on Definition Extraction, WDE ?09,pages 61?67, Stroudsburg, PA, USA.
Association forComputational Linguistics.Ian H Witten, Gordon W Paynter, Eibe Frank, CarlGutwin, and Craig G Nevill-Manning.
1999.
Kea :Practical automatic keyphrase extraction.
Computer,pp:254?255.790
