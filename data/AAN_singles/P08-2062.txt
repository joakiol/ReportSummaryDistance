Proceedings of ACL-08: HLT, Short Papers (Companion Volume), pages 245?248,Columbus, Ohio, USA, June 2008. c?2008 Association for Computational LinguisticsEfficient Processing of Underspecified Discourse RepresentationsMichaela Regneri?
?regneri@coli.uni-sb.de?
Saarland UniversityMarkus Egg?egg@let.rug.nl?
University of GroningenAlexander Koller?a.koller@ed.ac.uk?
University of EdinburghAbstractUnderspecification-based algorithms for pro-cessing partially disambiguated discoursestructure must cope with extremely high num-bers of readings.
Based on previous work ondominance graphs and weighted tree gram-mars, we provide the first possibility for com-puting an underspecified discourse descriptionand a best discourse representation efficientlyenough to process even the longest discoursesin the RST Discourse Treebank.1 IntroductionDiscourse processing has emerged as a highly rele-vant source of information for applications such asinformation extraction and automatic summarisation(Taboada and Mann (2006) outline this and furtherapplications).
But discourse structures cannot al-ways be described completely, either due to genuineambiguity (Stede, 2004) or to the limitations of adiscourse parser.
In either case, only partial infor-mation on discourse structure is available.
To han-dle such information, underspecification formalismscan be used.
Underspecification was originally in-troduced in computational semantics to model struc-tural ambiguity without disjunctively enumeratingthe readings, and later applied to discourse parsing(Gardent and Webber, 1998; Schilder, 2002).However, while the existing algorithms for un-derspecification processing work well for seman-tic structures, they were not designed for discoursestructures, which can be much larger.
Indeed, ithas never been shown that underspecified discoursereprentations (UDRs) can be processed efficiently,since the general-purpose implementations are tooslow for that task.In this paper, we present a new way to imple-ment and process discourse underspecification interms of regular tree grammars (RTGs).
RTGs areused as an underspecification formalism in seman-tics (Koller et al, 2008).
We show how to computeRTGs for discourse from dominance-based under-specified representations more efficiently (by a typ-ical factor of 100) than before.
Furthermore, weshow how weighted RTGs can be used to representconstraints and preferences on the discourse struc-ture.
Taking all these results together, we show forthe first time how the globally optimal discourse rep-resentation based on some preference model can becomputed efficiently from an UDR.2 Underspecified Discourse RepresentationFollowing annotation schemes like the one of Stede(2004), we model discourse structures by binarytrees.
Fig.
(1b-f) represent the potential structures of(1).
We write each elementary discourse unit (EDU)in square brackets.
(1) [C1 I try to read a novel] [C2 if I feel bored][C3 because the TV programs disappoint me][C4 but I can?t concentrate on anything.
]Underspecification formalisms such as domi-nance graphs (Althaus et al, 2003) can model par-tial information about such trees; see Fig.
(1a) forthe underspecified discourse representation (UDR)of (1).
These graphs consist of labelled roots andunlabelled holes; the solid edges indicate that anode must be the parent of another, and the dashededges indicate (transitive) dominance requirements.A configuration of a dominance graph is an arrange-ment of the (labelled) graph nodes into a tree thatsatisfies all (immediate and transitive) dominancerequirements.
Subgraphs that are connected by solidedges are called fragments and must be tree-shaped.Using UDRs, discourse parsing can be modu-larised into three separate steps.
First, a discourseparser segments the text and generates an UDR fromit.
The node labels in the UDR aren?t necessarilyfully specified (Egg and Redeker, 2007; Schilder,245Cause(2)ContrastC1C2C3C4C1C2C3C4C2C3C4C1C4C1C2C3Condition(1)Condition(1)Condition(1)Condition(1)Cause(2)Cause(2)Cause(2)ContrastC1C2C3C4Condition(1)Cause(2)ContrastContrastContrastCondition(1)123 5476Cause(2)ContrastC1C2C3C4(a) (b) (c) (d) (e) (f)Figure 1: An underspecified discourse structure and its five configurations2002); here we pretend that they are to simplify thepresentation, as nothing in this paper hinges on it.Then weights are added to the UDR that incorporatepreferences for discourse structures based on lin-guistic cues.
Finally, the weighted UDR can eitherbe processed directly by other applications, or, if atree structure is required, we can compute the bestconfiguration.
In this paper, we show how an UDRdominance graph can be converted into a regular treegrammar efficiently.
This simplifies the specifica-tion of weights in Step 2; we also show how to ef-ficiently compute a best tree from a weighted RTG(Step 3).
We do not discuss Step 1 in this paper.The dominance graphs used in discourse under-specification are constrained chains.
A constrainedchain of length n consists of n upper fragments withtwo holes each and n+ 1 lower fragments with noholes.
There must also be a numbering 1, .
.
.
,2n+1of the fragments such that for every 1?
i?
n, frag-ment 2i is an upper fragment, fragments 2i?
1 and2i+1 are lower fragments, and there are dominanceedges from the left hole of 2i to the root of 2i?1 andfrom the right hole of 2i to the root of 2i+ 1 (andpossibly further dominance edges).
These numbersare shown in circles in Fig.
(1a).
In discourse dom-inance graphs, upper fragments correspond to dis-course relations, and lower fragments correspond toEDUs; the EDUs are ordered according to their ap-pearance in the text, and the upper fragments con-nect the two text spans to which they are adjacent.3 Underspecified Processing for DiscoursesRecently, Koller et al (2008) showed how to pro-cess dominance graphs with regular tree grammars(Comon et al, 2007, RTGs).
RTGs are a grammarformalism that describes sets of trees using produc-tion rules which rewrite non-terminal symbols (NTs)into terms consisting of tree constructors and possi-bly further NTs.
A tree (without NTs) is acceptedby the grammar if it can be derived by a sequenceof rule applications from a given start symbol.
Anexample RTG is shown in Fig.
2; its start symbolis {1;7}, and it describes exactly the five trees in{1;7} ?
Cond({1},{3;7}) [1] {5;7} ?
Contr({5},{7}) [1]{3;7} ?
Contr({3;5},{7}) [1] {3;5} ?
Cause({3},{5}) [1]{1;7} ?
Contr({1;5},{7}) [1] {1;3} ?
Cond({1},{3}) [5]{1;7} ?
Cause({1;3},{5;7}) [1] {1;5} ?
Cond({1},{3;5}) [3]{1;5} ?
Cause({1;3},{5}) [1] {3;7} ?
Cause({3},{5;7}) [1]{1} ?
C1 [1] {3} ?
C2 [1] {5} ?
C3 [1] {7} ?
C4 [1]Figure 2: A wRTG modelling Fig.
1Fig.
(1b-f).
For example, Fig.
(1e) is derived by ex-panding the start symbol with the first rule in Fig.
2.This determines that the tree root is labelled withCondition; we then derive the left subtree from theNT {1} and the right subtree from the NT {3;7}.The NTs in the grammar correspond to subgraphsin the dominance graph: The NT {1;7} repre-sents the subgraph {1,2,3,4,5,6,7} (i.e.
the wholegraph); the NT {1} represents the subgraph contain-ing only the fragment 1; and so forth.
The trees thatcan be derived from each nonterminal correspondexactly to the configurations of the subgraph.Koller and Thater (2005b) presented an algorithmfor generating, from a very general class of dom-inance graphs, an RTG that describes exactly thesame trees.
For each subgraph S that is to be theLHS of a rule, the algorithm determines the freefragments of S, i.e.
the fragments that may serveas the root of one of its configurations, by a certaingraph algorithm.
For every free fragment in S withn holes and a root label f , the algorithm generates anew rule of the form S?
f (S1, .
.
.
,Sn), where eachSi corresponds to the remaining subgraph under thei-th hole.
The procedure calls itself recursively onthe subgraphs until it reaches singleton subgraphs.While this algorithm works well with underspec-ified semantic representations in semantics, it is tooslow for the larger discourse graphs, as we will see inSection 5.
However, we will now optimise it for thespecial case of constrained chains.
First, we observethat all subgraphs ever visited by the algorithm areconnected subchains.
A subchain is uniquely identi-fiable by the positions of the first and last fragmentin the left-to-right order of the chain; we can thusread the nonterminal {i; j} simply as a pair of inte-gers that identifies the subchain from the i-th to the246Algorithm 1: GenerateRules({i; j},G,C)if G contains rules for {i; j} then return1if i=j then G.add({ {i; j}?
Label(i) } ) else2/* Loop over upper fragments */for k = i+1 to j-1 step 2 do3if ??
edge=(s,t) ?
C s.t.
(i ?
s < k ?
t ?
j) ?
(i ?
t4?
k < s ?
j) thenlSub?
{i;k-1}, rSub?
{k+1; j}5G.add({i; j}?
Label(i)(lSub, rSub))6GenerateRules(lSub, G, C)7GenerateRules(rSub, G, C)8j-th fragment (rather than an abbreviation for a setof fragments).
i and j will generally represent lowerfragments.
In the grammar in Fig.
2, {i} is an abbre-viation of {i; i}.We can now rephrase the Koller & Thater algo-rithm in our terms (Algorithm 1).
The most impor-tant change is that we can now test whether an up-per fragment k in a subgraph {i; j} is free simply bychecking whether there is no dominance edge fromsome upper fragment l to some upper fragment rsuch that i?
l < k ?
r ?
j, and no dominance edgefrom r to l such that i?
l ?
k < r ?
j.
For instance,if there was a dominance edge from the right hole of2 to the root of 6 in Fig.
(1a), then 4 and 6 wouldnot be free, but 2 would be; and indeed, all config-urations of this graph would have to have 2 as theirroots.
Hence we can replace the graph algorithm forfreeness by a simple comparison of integers.
Thegeneral structure of the algorithm remains the sameas in (Koller and Thater, 2005b): It takes a domi-nance graphC as its input, and recursively calls itselfon pairs {i; j} representing subgraphs while addingrules and NTs to an RTG G.4 Soft Discourse ConstraintsRTGs can be extended to weighted regular treegrammars (Knight and Graehl, 2005, wRTGs) byadding numeric weights to the rules.
WRTG deriva-tions assign weights to each tree: The weight of atree is the product of the weights of all rules thatwere used in its derivation.Egg and Regneri (2008) motivate the use ofwRTGs in discourse processing.
They assign ruleweights based on corpus-extracted constraints whichexpress the interdependencies between discourse re-lations and their surrounding tree structure.
Onesuch constraint states that the right subtree of a Con-1.0015.65244.953833.6660000.000 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230new total utool totalFigure 3: Runtime Comparisondition node should be of minimal size, which ranksthe readings of Fig.
1 (a): (b), (d) > (c) > (e), (f).In order to state this constraint in a wRTG, weannotate the grammar in Fig.
2 with the weightsshown in brackets.
The Condition rules get higherweights if the second NT on the RHS represents asmaller subgraph.
The grammar assigns the maxi-mum weight of 5 to (b) and (d) (fragment 2 has aleaf as right child), the medium weight 3 to (c) (theright subgraph of fragment 2 contains two EDUs),and the minimum weight 1 to (e) and (f).
i.e.
it ranksthe readings as intended.Based on our implementation of nonterminals asinteger pairs, we can efficiently compute a con-figuration with maximal weight using a version ofKnight and Graehl?s (2005) algorithm for comput-ing the best derivation of a wRTG that is specialisedto the grammars we use.5 EvaluationWe compare our runtimes with those of Utool(Koller and Thater, 2005a), the fasted known solverfor general dominance graphs; it implements theKoller & Thater algorithm.
Utool runs very fast forunderspecified representations in semantics, but therepresentations for discourse parsing are consider-ably larger: The largest underspecified semantic rep-resentation found in the Rondane treebank analysedwith the English Resource Grammar (Copestake andFlickinger, 2000, ERG) has 4.5?
1012 structuralscope readings, but for 59% of the discourses in theRST Discourse Treebank (Carlson et al, 2002, RST-DT), there are more ways of configuring all EDUsinto a binary tree than that.We evaluate the efficiency of our algorithm on 364texts from the RST-DT, by converting each discourse247into a chain with one lower fragment for each EDUand one upper fragment labelled with each anno-tated discourse relation.
We use our algorithm andUtool to generate the RTG from the chain, assignall soft constraints of Egg and Regneri (2008) to thegrammar, and finally compute the best configurationaccording to this model.
The evaluation results areshown in Fig.
3.
The horizontal axis shows the chainlength (= number of EDUs minus 1), rounded downto multiples of ten; the (logarithmic) vertical axisshows the average runtime in milliseconds for dis-courses of that length.
Both algorithms spend a bitover half the runtime on computing the RTGs.As the diagram shows, our algorithm is up to 100times faster than Utool for the same discourses.
Itis capable of computing the best configuration forevery tested discourse ?
in less than one second for86% of the texts.
Utool exceeded the OS memorylimit on 77 discourses, and generally couldn?t pro-cess any text with more than 100 EDUs.
The longesttext in the RST-DT has 304 EDUs, so the UDR hasabout 2.8?10178 different configurations.
Our algo-rithm computes the best configuration for this UDRin about three minutes.6 ConclusionWe presented the first solver for underspecified dis-course representations that is efficient enough tocompute the globally best configurations of everydiscourse in the RST discourse treebank, by exploit-ing the fact that UDRs are very large but obey verystrong structural restrictions.
Our solver convertsa dominance graph into an RTG, adds weights tothe RTG to represent discourse constraints, and thencomputes the globally optimal configuration.It takes about three minutes to compute a bestconfiguration with a given probability model for thelongest discourse in the treebank, out of 10178 pos-sible configurations.
For comparison, an algorithmthat enumerates a billion configurations per secondto find the best one could have inspected only about1026 within the estimated age of the universe.
So ouralgorithm is useful and necessary to process real-world underspecified discourse representations.We have thus demonstrated that discourse pro-cessing based on underspecification is computation-ally feasible.
Nothing in our algorithm hinges onusing RST in particular; it is compatible with anyapproach that uses binary trees.
In future research,it would be interesting to complete our system intoa full-blown discourse parser by adding a modulethat computes an UDR for a given text, and evaluatewhether its ability to delay decisions about discoursestructure would improve accuracy.ReferencesE.
Althaus, D. Duchier, A. Koller, K. Mehlhorn,J.
Niehren, and S. Thiel.
2003.
An efficient graphalgorithm for dominance constraints.
Journal of Algo-rithms, 48:194?219.L.
Carlson, D. Marcu, and M. E. Okurowski.
2002.
RSTDiscourse Treebank.
LDC.H.
Comon, M. Dauchet, R. Gilleron, C. Lo?ding,F.
Jacquemard, D. Lugiez, S. Tison, and M. Tom-masi.
2007.
Tree Automata Techniques and Ap-plications.
Available on: http://www.grappa.univ-lille3.fr/tata.
Release 12-10-2007.A.
Copestake and D. Flickinger.
2000.
An open-source grammar development environment and broad-coverage English grammar using HPSG.
In Confer-ence on Language Resources and Evaluation.M.
Egg and G. Redeker.
2007.
Underspecified discourserepresentation.
In A. Benz and P. Ku?hnlein, editors,Constraints in Discourse, Amsterdam.
Benjamins.M.
Egg and M. Regneri.
2008.
Underspecified Mod-elling of Complex Discourse Constraints.
Submitted.C.
Gardent and B. Webber.
1998.
Describing DiscourseSemantics.
In Proceedings of the 4th TAG+Workshop,University of Pennsylvania, Philadelphia.K.
Knight and J. Graehl.
2005.
An overview of proba-bilistic tree transducers for natural language process-ing.
In Computational linguistics and intelligent textprocessing, pages 1?24.
Springer.A.
Koller and S. Thater.
2005a.
Efficient solving andexploration of scope ambiguities.
Proceedings of theACL-05 Demo Session.A.
Koller and S. Thater.
2005b.
The evolution of dom-inance constraint solvers.
In Proceedings of the ACL-05 Workshop on Software, Ann Arbor.A.
Koller, M. Regneri, and S. Thater.
2008.
Regular treegrammars as a formalism for scope underspecification.In Proceedings of ACL-08: HLT.F.
Schilder.
2002.
Robust discourse parsing via discoursemarkers, topicality and position.
Natural LanguageEngineering, 8:235?255.M.
Stede.
2004.
The Potsdam Commentary Corpus.
InB.
Webber and D. Byron, editors, ACL-04 Workshopon Discourse Annotation.M.
Taboada andW.Mann.
2006.
Applications of Rhetor-ical Structure Theory.
Discourse Studies, 8:567?588.248
