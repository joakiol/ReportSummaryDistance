At Your Service: Embedded MT As a ServiceFlorence M. ReederThe MITRE Corporation1820 Dolley Madison Blvd.McLean, VA 22102Freeder@mitre.orgAbstractA growing trend in Machine Translation(MT) is to view MT as an embedded part ofan overall process instead of an end resultitself.
For the last four years, we havefielded (primarily) Commercial-Off-The-Shelf (COTS) MT systems in an operationalprocess.
MT has been used to facilitatecross-language information retrieval (IR),topic detection and other, wide-scopedscenarios.
These uses caused a fundamentalshift in our views about MT - everythingfrom user interface to system evaluation tothe basic system structures.
This paperpresents our lessons learned in developingan MT service for a wide range of userneeds.Introduction .-,The foreign language material to be handled bythe government is increasingly diverse andproblematic.
Foreign language processing needsare increasing because of the changingconditions of the world.
Traditionally, userscould focus on just a few foreign languages anda limited number of sources of foreign languagematerials.
As we begin the 21 ~' century, users ofonline materials are faced with having toprocess, utilise and exploit documents that maybe in one of many languages or a combination oflanguages.
It is not feasible to expect a givenuser to know all of the languages related to theirtopic of research.
It is equally unrealistic toexpect o have on-demand translators availablein every language whenever they are needed.Because of the expanding need, tools are beingdeveloped to automate the use of foreignlanguage materials.Unlike previous views of tools, the currentvision for machine translation (MT) is as a smallpart of a larger, mostly automated process.
Formany users, this does not mean yet another toolwith yet another interface, but a nearly invisiblecompanion that incorporates translation andnecessary support technologies.
One suchsystem, the Army Research Lab (ARL)FALCON system, combines scanning, opticalcharacter ecognition (OCR), translation andfiltering into a single process.
Another view ofthis is the DARPA Translingual InformationDetection, Extraction and Summarisation effort(TIDES).
TIDES represents the pinnacle o finformation access and is a real challenge forMT.
MT supports the translingual spects of theeffort and can be viewed as an embedded toolwhich facilitates other technologies.
Finally, theintegration of MT into the process forintelligence analysis serves as the basis for theCyberTrans project.
For this paper, we willdiscuss the CyberTrans project, the lessonslearned and the supporting technologiesnecessary for the successful integration of MTinto other systems.1 Proposed Architecture1.1 Original PrototypeThe incarnation of CyberTrans grew as ademonstration that MT technology could beuseful in the intelligence analysis process.
As aresult of an MT survey (Benoit et al 1991), MTtechnology was believed to be ready forincorporation into an operational environment.Initially, CyberTrans was designed as a wrapperaround Commercial-Off-The-Shelf (COTS) andGovernment-Off-The-Shelf (GOTS) MTsystems in Unix environments.
A client-serverarchitecture, implemented in a combination ofLisp and C, allowed for uniform user interfaces17to translation engines (Systran, Globalink andGister).
The server software interacted with thetranslation engines and the client softwareinteracted with the users.
The server interactedwith client programs through Remote ProcedureCall (RPC) passing of translation parameters(such as language, dictionary and output format)and file transfer of translation data.
The clientsprovided were: e-mail, web, FrameMaker andcommand line.
By providing translation throughthese media, users could translate documents ina familiar interface without having to worryis much more forgiving of low quality input datawhile automated processing suffers from poorinput data.
This forced the designers toimplement a series of pre- and post-processingtools to be provided in the translation server.Initially, they were included in the functionalarchitecture as depicted in Figure 1.
Thisaddition of language tools caused anecessary e-design of the architecture from a client-servermodel to an enterprise service model which ischaractefised by an open architecture view ofloosely coupled modules performing services forCHent~ ~ S  RPC Communicationg !.
.
.
.
.
.
w V Identify ~~NorInaliseyHandleNot-~~VReassembleN~Language / Spelling / Translated FormatCode Set A ~  Format Words A ~TFigure 1: Original Architectural Flowabout differences between translation products.The languages provided in the first prototypewere those available to the government fromSystran (French, German, Spanish, Itali.an,Portuguese, Russian to English); thosepurchased from Globalink (French, German,Spanish, Russian to/from English); and thoseavailable from the GOTS System Gister(language list is unavailable for publication).
Atthe time of delivery in 1995/1996, thisrepresented a relatively new method fordelivenng MT technology to general users.Shortly after the fielding of the initial prototype,the need for additional anguage services toaccompany translation became apparent.
Aswill be discussed in Section 2, the data sent tothe translation engines pointed out thedifferences between translation i  an interactiveenvironment and translation in an embedded,automated environment.
Interactive translationmultiple applications.
The newer design will bediscussed in the next section.
At this time, othersystem architectures were beginning to beintroduced into the community such as thoseprovided by ALIS Technologies; Systran and inFALCON.
Because this is a specific lessonslearned about the CyberTrans experience, it isbeyond the scope of this paper to compare thisarchitecture with other architectures.1.2 Updated DesignBecause of the addition of new tools andtechnologies into the CyberTrans model, itbecame necessary to re-engineer the serverdesign.
As part of the transition of a prototypesystem into a production-quality s stem, thereengineering also addressed issues such assystem administration support, robust operationfor 24/7 service and metrics.
As can sometimesbe the case, the prototype started being used in18S Translationg ~lr~nstl at\]?n ~ Broker N,,,,...~._~"?
J TM ~ kNNDem?nFigure 2: Current Architectural Flow\ I Translation I/~  I I t  ti Language I rroc.
inr Icontinuous operation, causing a demand forimprovement concurrent with ongoingoperation.
The reengineering was shaped by thefact that the system had expanded for newcapabilities (in pre- and post-processing); thefact that the system had to remain operational lof the time; the fact that the system was beingused in ways that were unanticipated byCOTS/GOTS MT developers; the fact that thesystem was to be multi-platform (to includePCs) for an expanding list of languages and thefact that the system was beginning to be seen asproviding a service similar to other systemservices (such as e-mail).
These factors causedthe system to be reengineered in an enterpriseservices model as an object-oriented design.In this architecture, demon processes brokertranslations - a request for translation is passedto the system by a client program; the translationis planned out as a series of translation-relatedservices; each service is requested from theresponsible system object and the resultingtranslation is then passed back to the clientprograms.
Implemented in a combination ofC++, Java and Lisp, the new version represents aservice-oriented architecture.
Figure 2 showsan updated architecture pictur e. Translationservices include Systran (French, German,Italian, Spanish, Portuguese, Russian, Serbo-Croatian, Ukrainian, Chinese, Japanese, Koreaninto English); Globalink (French, German,Spanish, Russian to/from English) and Gister(language set list unavailable) with plans toincorporate engines for languages such asArabic.
Language processing services includelanguage/code set identification; code setconversion; data normalisation, includingdiacritic reinsertion and generalised spellchecking; format preservation for Hyper-TextMark-up Language (HTML) documents; not-translated word preservation and others.
Theclients remain e-mail, Web and FrameMaker.Platforms include both Unix and PC platformsfor clients and with the capability to incorporatePC-based tools as part of the service.
Havingdescribed the architectures, we turn to lessonslearned as a result of having an operational MTcapability, running 24?7 for over 6000translations per month.2 Implementing Embedded MTThe biggest surprise we encountered in fieldingCyberTrans is related to the expectations of theusers.
The average user initially approaches MT.with an almost Star Trek-like view - that it ispossible for the system to understand andtranslate perfectly any given documentregardless of content, form, format or evenlanguage.
While this is an unrealisticexpectation of this or any system, an overridinggoal which emerges is that embedded MTshould be as automated as possible.
Thisrepresents a fundamental shift from thetraditional view of MT as an interactive, user-driven process to as a passive, data-drivenprocess.
We will now describe four areas wherespecific technologies need development for thesmooth incorporation of MT into a "real-world"setting: language and code set identification;data normalisation; format preservation andlexicon development.
Finally we will describesoftware engineering issues and challengeswhich facilitate the straight-forward embeddingof MT into existing processes.2.1 Language / Code Set IdentificationKnowing the language and encoding~ or codeset, of a document is a necessary first step inutilizing on-line text.
For automated MT, theidentification of the language(s) or code set of atext is necessary for systems to operateefffectively.
A Spanish-English translation19system will not successfully process an Italiandocument and will be even less successful inprocessing a Chinese one.
The first requiren:tent,then, which enables automated, embeddedprocessing is the detection of the languagle(s)and code set(s) of a given document.In preparing the tools which permit he accuratedetection of languages and code sets in anoperational setting, we found characteristics ofthe data which carry throughout all of theprocessing we discuss.
The first, and foremost,is that the data is not clean, well-formed text.Frequently documents will have a mix oflanguages (both human and machine), code sets(including formatting information) andinformation pieces (such as e-mail headers,ASCII-art, etc.).
For example, chat is veryidiomatic and has many pre-defined acronyms.Finally, about 10% of translation materials arevery short - between one and ten words.
All ofthese factors contribute to the difficulty ofpreparing a service for language and code setidentification as well as other natural anguageprocessing (NLP) tools.
The implementedalgorithm for language/code s t identification isa trainable n-graph algorithm and has beendiscussed in more detail elsewhere (Reeder &Geisler, 1998).
Currently our language and codeset identification works for on the order of 30languages (mostly European) and about 1130code sets (including many ASCIItransliterations) yet these numbers are stillinsufficient for the data routinely processed byCyberTrans.
The step after languageidentification is data normalisation and will bediscussed as the next result of lessons learnedfrom CyberTrans.2.2 Data Normal isat ionMachine translation works best with clean, well-formed input text.
Operationally, this is anideal, but not reality.
In reality, data that isbeing translated can suffer from many types oferrors including misspellings and grammarmistakes, missing diacritics and transliterati:onproblems, scanning errors and transmissionobstacles.
With her evaluation of MT systems,Flanagan (1994) describes reasons for errors intranslation.
MT systems were examined in lightof the outputs of translation and the types oferrors that can be generated by the translationengine.
These include spelling errors, words nottranslated, incorrect accenting, incorrectcapitalisation as well as grammatical andsemantic errors.
This study does not look at thekinds of inputs that can cause failure in atranslation process.
A second paper (Flanagan,1996) examines the quality of inputs to thetranslation process, arguing for pre-editing toolssuch as spelling checkers.
Yet, this continues tobe an interactive view of the translation process.Another study (Reeder & Loehr, 1998) show atleast 40% of translation failures (not translatedtokens) are attributable to the types of errors, ornon-normalised data, presented here.
In anembedded process, the system mustautomatically detect and correct errors.Language SourceSegmentationCharacter omissionsMixed languagesInput SourceMisspellingsGrammar mistakesMissing DiacriticsTransliterationsCapitalisationProduction SourceScanning / OCRElectronic representationConversion errorsAcquisition SourceNetwork transmissionTable 1 - Categorisation of Error TypesInstead of being random, the errors are regular,especially in generated or automated documents.For instance, a writer of French without a Frenchkeyboard will systematically omit diacritics.
Inthis case, the errors in the document are far fromrandom.
Along these lines, we have groupedsimilar error sources together.
Operational datacan have one or more of these error types:misspellings and grammar mistakes; missingdiacritics; mixed language documents; impropercapitalisation; transliteration / transcription /code set mismatch; scanning (OCR) errors; webpage or e-mail specific standards; conversionerrors; network transmission errors;segmentation problems; character omissions.These error types can be categorised by theorigination of the problem as in Table 1.
Much20current CyberTrans work consists of developingand transitioning tools which can accuratelydetect and remediate errors, convertingdocuments into a standard (normalised) form.The order in which the normalisation techniquesare applied is a subject of ongoing research.2.3 Format  Preservat ionDocuments arrive in many formats that havemeaning in their structure.
For instance, webpages contain HTML indicators plus language.A challenge for MT is that the HTML shouldnot be translated whereas the text must be.
Thefde name rouge,gif should not be translated tored.gif if the web page is to be reassembled.Consider also, the task of translating a bulletedlist.
It is desirable to maintain a bulleted listwith appropriate syntax.
Table headings andlabels also should be translated withoutdestroying the format of the table.
This, too, is amatter of ongoing research.2.4 Lexicon UpdateThe highest portion of the cost of providing amachine translation capability reflects theamount of lexicography that must be done - asmuch as 70% of the cost of a machinetranslation engine.
In addition, the governmentrequires specialised lexical repositories whichreflect unique domains such as military, legal,scientific and medical.
We must fred ways toupdate lexicons intelligently, using such sourcesas dictionaries, working aids, specialised wordlists and other information reservoirs to providea broad coverage of words.
One currentapproach is to record the list of words which donot translate and automate the handling of these.An issue in this is determining how to providesufficient context for lexicographers.Additionally, different translation enginesencode lexical entries in widely differing ways,meaning that sharing lexicon entries amongsttranslation capabilities is problematic.
We areworking on a lexicon service bureau (LSB)designed to facilitate the sharing of lexicalmaterials.
One part of this is the automaticextraction of lexical entries from on-line,machine readable dictionaries.
Another part isthe analysis of not-translated words.
A finalportion is research into a specialised category oflexical items - named entities.
As with otherprocesses in this section, we are addressing thisas part of ongoing research - each advanceraises the bar for the level of input text that canbe handled.2.5 Software Engineering ChallengesA final lessons learned from the CyberTransexperience relates to the software engineeringchallenges of putting together diversetechnologies from many vendors for multiplepurposes.
The first of these is the problem ofAPI's from COTS systems and GOTS systems.Behind our initial command line, fde-basedinteraction lies the fact that translation enginesdo not routinely provide APIs, presenting anintegration challenge.
Platform-specific toolsalso contribute to the integration problem.
Thesecond software engineering challengestemming from this is the amount of timenecessary to bring up a translation engine.
Agood translation engine has a lexicon in the tensof thousands of entries which takes time to loadup.
Currently, the loading of a translationengine takes as much time as all of the rest ofthe pre- and post-processing combined.
A thirdchallenge is deciding on and enacting a languagerepresentation.
Although Unicode makes goodstrides towards the uniform sharing of data,many of the tools needed to convert real datainto Unicode need to be improved.Additionally, current implementations of Javaand C++ do not have all of the necessary piecesfor seamlessly handling of a wide range oflanguages.
Finally, the challenge is in themanagement and ordering of the translationprocess.
To effectively manage a translation,requires a translation manager which can be asingle point of failure.ConclusionWe have identified the lessons learned from aspecific embedding of MT into an overallprocess.
We have identified issues and concernsresulting from this experience.
We continue torefine and examine the issues of supporting MT,of making it palatable and viable in multipleapplications and frameworks.
This system isjust one example of embedding MT.
Futurework must compare this effort to other work inthe field.21ReferencesBenoit, J., Jordan, P., Dorr, B.
(1991) MachineTranslation Technology Survey andEvaluation Report.
MITRE TechlficalReport.Flanagan, M. (1994) Error Classification for MTEvaluation.
In Technology Partnerships forCrossing the Language Barrier:Proceedings of the First Conference of theAssociation for Machine Translation in theAmericas, Columbia, MD.Flanagan, M. (1996) Two Years OnJine:Experiences, Challenges and Trends.
InExpanding MT Horizons: Proceedings ofthe Second Conference of the Associationfor Machine Translation in the Americas,(pp.
192-197).
Washington, DC: AMTA.Reeder, F. & Geisler, J.
(1998) Multi-Byte Issues inEncoding / Language Identification.
InProceedings of the Embedded MTWorkshop, AMTA-98.
Langhome, PA.Reeder, F. & Loehr, D. (1998) Finding the RiightWords: An Analysis of Not-TranslatedWords in Machine Translation.
InProceedings of the 3rdconference of theAssociation for Machine Translation in theAmericas, AMTA-98.
Langhome, PA.22
