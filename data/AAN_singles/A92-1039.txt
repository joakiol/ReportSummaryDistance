Tools for Grammar EngineeringGregor ErbachUnivers i ty  of  the SaarlandComputat ional  LinguisticsW-6600 Saarbri ickenFederal  Republ ic  o f  Germanyerbach@col i .un i -sb .deWe describe a tool for the development and verification ofbroad-coverage grammars that are to be used for bothanalysis and generation.
Such a tool is used to ensure thatthe coverage of the grammar is sufficient (in logical termsthe completeness of the grammar) and to control over-generation (the correctness of the grammar).IntroductionFor practically applied natural language processing systems,grammars with extensive coverage are required.
The writingof broad-coverage rammars is so complex a task that itcannot be done on paper alone, but must be supported bypowerful tools for testing the grammar with respect oconsistency, coverage, overgeneration a d accuracy.Grammar writing is similar to programming in thatgrammars and programs must be tested and debugged untiltheir input/output behaviour meets the given specificationsand they run efficiently.
Unlike programming, which can beapproached by techniques like top-down refinement, modul-arization and so on, grammar writing is an incrementalprocess, which consists of a cycle of?
writing or modifying of the grammar,?
testing of the grammar,?
debugging the grammar.Grammar engineering tools must support his work cycle.All existing grammar engineering tools include an editorfor modification of the grammar, possibly enhanced bysyntax checking, a locate function'for quick access to rulesand lexical en~es.
More advanced Systems provide structure-oriented editing or a graphical editor for feature structures.Most grammar engineering tools are built around a (chart)parser, which is used to test the grammar by parsingsentences.
The parse results can be visualized and inspectedin detail.
Generally, the chart, phrase structure trees andfeature structures can be displayed graphically.This work was supported by IBM Germany's LILOGproject.
I would like to thank Roman Georg Arens, JochenD0rre, Tibor Kiss, Ingo Raasch, Hans Uszkoreit and JanWilms for useful discussion.These modes of presentation are often linked such that it ispossible to select an edge of the chart or a node of the tree,and view the corresponding (sub)tree or feature structure ordefinition in the source file.Few systems give diagnostic output hat shows where aunification failure has occurred.While a tool built around a parser is useful for checkingthe coverage and input/output behavior of the grammar, itdoes not help to control overgeneration, and is not veryuseful in locating errors in the grammar which are due tounification failure.We propose a grammar engineering tool consisting of aparser for checking coverage, a generator for controllingovergeneration, debugging and documentation tools.Too ls  fo r  checking coverage and ef f i c iencyFor checking the coverage of the grammar, we use abottom-up chart parser for the grammar formalism STUF(DOrre 1991).
The parser is designed to support andencourage xperimentation with different grammars andprocessing strategies (Erbach 1991).In addition to charts, trees, and feature structures, theparser provides extensive statistics about the parsingprocess:?
the time needed for finding the first analysis and forfinding all analyses,?
the number of possible parsing tasks,?
the number of parsing tasks on the agenda,?
the number of successful parsing tasks (chart items),?
the number of chart items that are used in a result ree.The last three statistic data are available for each grammarrule.
In this way it is possible to define parsing strategiesthat are sensitive to the rule which is involved in the parsingtask.
A good parsing strategy will delay rules that are oftenunsuccessful.The tool includes a test suite, that it a set of sentencescovering various syntactic phenomena, nd also a set of ill-formed strings.
Semantic representations are associated withthe well-formed sentences.Testing of the grammar involves parsing the strings in thetest suite and checking whether the parse results contain the243correct semantic representation(s), and whether the ill-formedstrings are correctly rejected.The converse form of testing, giving semantic represen-tations to a semantic generator and checking whether itproduces the correct strings is necessary for evaluating thesemantic overage of the grammar.Tools for controlling overgenerationOur tool includes a generator whose task it is to generate arepresentative set of sentences in order to check whether thegrammar overgenerates.Before turning to the question what constitutes arepresentative sample of a language, we describe thealgorithm used for generation \[Erbach and Arens 1991\].The algorithm builds up successively onger constituentsfrom shorter ones.
The initial constituents of length 1 arethe words from the lexicon.
More constituents of length 1are added by applying unary rules to the constituents oflength 1.
Constituents of length n are built by applying abinary rule to constituents of length x and length y, suchthat x+y=n, or by applying a unary rule to a constituent oflength n.Since in general, languages are infinite, it isnot possibleto generate all sentences.
The language generated can belimited by?
setting a maximal sentence l nth,?
limiting the initial lexicon, so that only one member of aclass of lexical entries is present,?
excluding certain rules of the grammar, so that certainconstructions that one is presently not interested in areavoided, e.g.
relative clauses,?
limiting recursion,?
filtering the constituents generated according to thegrammar writer's interests, for example only sentences andnoun phrases.bAll of these devices which limit the grammar must beused with caution, in order to avoid losing interestingexamples in the language sample generated.When looking through the generated language sample, theuser may select any sentence, and view its feature structureand derivation tree, using the tools provided with the parser.Debugging toolsSometimes, it is desirable to know how certain linguisticdescriptions fit together.
For example, when debugging agrammar, one might want to see what happens if a particularrule is applied to two particular lexical items, or whether Ornot two feature structures unify.
With a parser-based tool,one must make up a sentence in which such a configurationoccurs, and then inspect he parse result.We provide this functionality more directly.
The user mayselect any linguistic object (lexical entry, type definition orchart item) and unify it with any other linguistic object.
Ifgrammar ules are seen as local trees, the user may alsounify any linguistic unit with any of the nodes in the localtree defined by the grammar rule.While unification failures are not kept track of duringparsing for efficiency reasons, this structure builder willshow exactly which features have caused a unification tofail, and thus assist in the diagnosis of errors in thegrammar.Documentation toolsGood documentation of a grammar is a prerequisite formodifying or extending it or re-using it fo r  anotherapplication, and should be supported and by appropriatetools.
We believe that documentation tools are bestintegrated with a grammar engineering tool.
There arevarious reasons for doing so.First of all, the tool can be constructed such that itreminds the user of including documentation in the sourcefiles and keeps track of when definitions in the grammarwere changed, and by whom.Second, integration of grammar engineering anddocumentation tools makes it easy to include output of theparser (charts, trees and feature strctures) into the documenta-tion that is being written.Third, we assume that the technical documentation is ahypertext.
In addition to the standard hypertext links fromone piece of text to another, we can include links from thetext to the functionality of the grammar engineering tool.By selecting a word, or the name of a grammar rule or a typedefinition in the text of the documentation, a link will bebuilt that allows the user to either view its definition in thesource file or display its feature structure.
By selecting anexample sentence in the documentation text, it is possible toactivate the parser to view its chart, tree or feature structure.ImplementationThe tool described here has been partially implemented inQuintus Prolog and X-Windows under AIX on an IBMPS/2.
It is integrated into the text understanding systemLEU/2 developed in IBM Germany's LILOG project.The parser was implemented by the author, the grammarformalism and the user interface by Jochen D(irre and IngoRaasch and the generator by the author and Roman G. Arens.ReferencesGregor Erbach and Roman Georg Arens.
Evaluation vonGrammatiken ftir die Analyse nattirlicher Sprache durchGenerierung einer repr~entativen Satzmenge.
In Procee-dings of GWAI -91,. pages 126-129, Bonn, September1991, Springer.Jochen DOrre.
The Language of STUF.
In: O. Herzog andC.-R. Rollinger (eds.
): Text Understanding in LILOG,pages 33-38, Springer, Berlin, 1991.Gregor Erbach.
A Flexible Parser for a LinguisticDevelopment Environment.
In: O. Herzog and C.-R.Rollinger (eds.
): Text Understanding in LILOG, pages 74-87, Springer, Berlin, 1991.244
