Novelle, a collaborative open source writing tool softwareFederico GobboDICOM21100, Insubria UniversityVarese, Italyfederico.gobbo@uninsubria.itMichele ChinosiDICOM21100, Insubria UniversityVarese, Italymichele.chinosi@gmail.comMassimiliano PepeDICOM21100, Insubria UniversityVarese, Italymassimiliano.p@gmail.comAbstractIn this paper we discuss the notions of hy-pertext, blog, wiki and cognitive mappingin order to find a solution to the main prob-lems of processing text data stored in theseforms.
We propose the structure and archi-tecture of Novelle as a new environmentto compose texts.
Its flexible model al-lows the collaboration for contents and adetailed description of ownership.
Dataare stored in a XML repository, so as touse the capabilities of this language.
Todevelop quickly and efficiently we chooseAJAX technology over the Ruby on Railsframework.1 IntroductionComputational linguists are facing the explosionof new forms of writing as a mass phenomenon.Telling personal and collaborative stories throughtweb technologies is known under the etiquettes of?blog?
and ?wiki?.
It therefore brings new chal-lenges to the field of natural language processing.We are trying to address them by rendering explic-itly the structure of these new forms of text in away suitable for linguistic computation.
In orderto do so, we are building an open source writingtool software, called Novelle.1.1 Hypertext as a New Writing SpaceBolter (1991) was the first scholar who stressedthe impact of the digital revolution to the mediumof writing.
Terms as ?chapter?, ?page?
or ?foot-note?
simply become meaningless in the new texts,or they highly change their meaning.
WhenGutenberg invented the printing press and AldoManuzio invented the book as we know it, newforms of writings arose.
For example, when booksshouldn?t be copied by hand any longer, authorstook the advantage and start writing original booksand evaluation ?
i.e.
literary criticism ?
unlike inthe previous times (Eisenstein, 1983).
Nowadaysthe use of computers for writing has drammati-cally changed, expecially after their interconnec-tion via the internet, since at least the foundationof the web (Berners-Lee, 1999).
For example, a?web page?
is more similar to an infinite canvasthan a written page (McCloud, 2001).
Moreover,what seems to be lost is the relations, like the tex-ture underpinning the text itself.
From a positivepoint of view these new forms of writing may real-ize the postmodernist and decostructionist dreamsof an ?opera aperta?
(open work), as Eco woulddefine it (1962).
From a more pessimistic one, anauthor may feel to have lost power in this open-ness.
Henceforth the collaborative traits of blogsand wikis (McNeill, 2005) emphasize annotation,comment, and strong editing.
They give morepower to readers, eventually filling the gap - theso-called active readers become authors as well.This situation could make new problems rise up:Who owns the text?
Which role is suitable for au-thors?
We have to analyse them before presentingthe architecture of Novelle.1.2 Known problemsIt is certainly true that wikis and blogs are newforms of text.
It is also true that we have alreadymet these problems in the first form of purely dig-ital texts ?
hypertexts.
Now we are facing thesame question during processing texts in blogs andwikis.
We consider hypertexts as parents of blogsand wikis.
Our aim is to use the analysis of hyper-texts for interesting insights, useful for blogs andwikis too.40Following the example of Landow (1994), wewill call the autonomous units of a hypertext lex-ias (from ?lexicon?
), a word coined by RolandBarthes (1970).
Consequently, a hypertext is a setof lexias.
In hypertexts transitions from one lexiato another are not necessarily sequential, but nav-igational.
The main problems of hypertexts, ac-knowledged since the beginning, have been tracedas follows (Nelson, 1992):?
The framing problem, i.e.
creating arbitraryclosed contexts of very large document col-lections.
When extracting sub-collections,some links may be cut off.?
Comparing complex alternatives, i.e.
to getparallel or alternate versions of the same doc-ument in a simple and effective way, one ofthe main goal of Xanadu, the ultimate ?globalhypertext?
dreamt by Nelson.?
Typology of links, i.e.
when links become toomany, we need a typology for links, avoidingconfusion to the reader/author.?
Version control, as the system should keeptrack of the history of every document, sav-ing differences and pointing out correspon-dencies.We take from wikis the concept of documenthistory and its consequences.
We consider it as agood approximation of the ?version control?
con-cept as shown above.In wikis every document keeps track of its ownhistory: creating a document means to start a his-tory, editing a document to move ahead, restoringto move back onto the history timeline, destroyinga document to stop the history itself.
Moreover,a sandbox is a temporary view of a document it-self - i.e.
a sandbox can not cause a change in thehistory (Cunningham and Leuf, 2001).
Figure 1shows the model.creationa very oldversionthe documenthistory timelinean oldversionthe currentversionthe lastversiona restorean editdestructionsandboxFigure 1: The document history modelHistory snapshots of the timeline may be con-sidered as permanent views, i.e.
views with atimestamp.
Consequently, except in the case ofsandboxes, every change in the document cannotbe erased.
This model will have a strong impacton the role of links and on the underpinning struc-ture of Novelle itself.2 The Structure of NovelleOur aim is to create an open source hypertext mod-eling software, called Novelle.
?Novelle?
is an Ital-ian old-fashioned word meaning ?novels?, and inGerman it means ?novel?
too.
It resembles the En-glish word ?novel?
and the French word ?nuovelle?.We believe that this name is clearly understable toevery people educated in a European-based cul-ture, and this is why we have chosen it.The emphasis on narrativity takes into accountthe use of blogs as public diaries on the web, thatis still the main current interpretation of this lit-erary genre, or metagenre (McNeill, 2005).
Fur-thermore we noticed that blogs and wikis are cur-rently subjected to osmosis, because they have incommon the underlying core technology.
So blogsare a literary metagenre which started as authoredpersonal diaries or journals.
Now they try to col-lect themselves in so-called ?blogspheres?.
On theother side, wikis started as collective works whereeach entry is not owned by a single author - e.g.Wikipedia (2005).
Now personal wiki tools arearising for brainstorming and mind mapping.
SeeSection 4 for further aspects.2.1 The Problem of OwnershipThe main difference between blogs and wikis isin the ownership of documents.
Most blogs fol-low the annotation model, where a single lexia iscentral and the others are comments, sometimesin threads.
Every lexia is authored and changesare minimal.
People prefer commenting instead ofediting.
The paradigm is ?write once, read many?.On the contrary, in wikis no lexia is authoredand there is no hierarchy between lexias.
In facta document is still a set of lexias, but every docu-ment is only the set of historical versions of thedocument itself.
Generally, people avoid com-menting, preferring to edit each document.
Theparadigm is ?write many, read many?
(Cunning-ham and Leuf, 2001).We believe that ownership has an important roleand we do not want to force our users to take a41non-attributive copyright licence to their work.
Weconsider the Creative Commons model as the mostsuitable one to let each author choose the rightsto reserve (Lessig, 2004).
Narrative writings oressays are creative works and they generally treatownership as authorship, even for the most enthu-siastic fellows of free culture (Stallman, 2001).2.2 The Representation of ContextIn the structure of Novelle we are trying to retainauthorship and the core concept of document his-tory of wikis through a typology of links, takingwhat we consider the best of the two worlds ofblogs and wikis.In Novelle each user owns his own lexias, andthe relations between them, i.e.
links.
Further-more authors are free to read and to link otherusers?
lexias.
In other words, each user does per-mit everyone to link its own lexias for free, at thecondition that the others do the same.
Every usermay recall the link list on each element (e.g.
a sin-gle word) of his lexias at every time, but he can notdestroy them.
Lexias may be commented by everyuser, but the author may retain for himself the rightto edit.
This decision has to be taken when a lexiais created.If a user lets others edit some lexias, he has theright to retain or refuse the attribution when otherusers have edited it.
In the first instance, the editedversion simply moves ahead the document history.In the second one, the last user, who has edited thelexia, may claim the attribution for himself.
Thelexia will be marked as a derivative work from theoriginal one, and a new document history time-line will start (see Figure 2).
Authors may choosethis right with the No-Deriv option of the CreativeCommons licences (Lessig, 2004).creationthe documenthistory timelinean oldversionthe currentversioncreation of aderivative worka new documenthistory timelineFigure 2: How to create derivative worksIf nobody claims the document for himself, itwill fall in the public domain.
The set of lexias inthe public domain will form a special document,owned by a special user, called Public Domain.
Ifthe author refuses the permission to create deriva-tive works, i.e.
to edit his own lexias, users stillhave the right to comment the author?s work.
Soas to come to terms with this idea, we need a con-cept invented by Nelson (1992), i.e.
transclusion.the documenthistory timelinethe currentversionan other documenthistory timelinea freezed quotationtransclusionFigure 3: How transclusion worksRather than copy-and-paste contents from alexia, a user may recall a quotation of the au-thor?s lexia and write a comment in the surround-ings.
In doing so, the link list of the author?slexia will be updated with a special citation linkmarker, called quotation link (see later for details).Usually, the quotation will be ?frozen?, as in themoment where it was transcluded (see Figure 3).Consequently the transclusion resembles a copied-and-pasted text chunk, but the link to the originaldocument will always be consistent, i.e.
neither itexpires nor it returns an error.
Otherwise the userwho has transcluded the quotation may choose tokeep updated the links to the original document.This choice has to be made when the transclusionis done.the documenthistory timelinean oldversionan other documenthistory timelinean up-to-datequotationtransclusionthe currentversionFigure 4: An up-to-date transclusionIf so, the transcluded quotation will update au-tomatically, following the history timeline of theoriginal document.
For example, if the original42document changes topic from stars to pentagons,the quotation transcluded will change topic too(see Figure 4).2.3 Contents and the Typology of LinksFollowing our model of ownership, there are atleast two categories of links: shallow links anddeep links.
By shallow links we mean visual linksoccurring in a single canvas, usually owned by thesame author.
These will represent iconically therelationship space of lexias, as explained by Mc-Cloud, talking about web comics (2001).
They areparticularly useful when comparing parallel ver-sions of the same text, e.g.
digital variants (seeConclusions).We consider a web page, or better a web can-vas, as a view of lexias, i.e.
a group of lexias andtheir relations visually shown with shallow links.A set of lexias is a document.
Every author has theright to decide the relation type of a set of lexias,i.e.
to form a document.
A document can also beconsidered as a collection of history timelines, i.e.the set of related lexias and their versions.
The setof documents is the docuverse, a word coined byNelson (1992).
We use the word docuverse, un-likely the original sense, with the meaning of a setof documents owned by a single author.Every document can be viewed within a webcanvas, but users may click on a deep link andso change view.
With deep links we mean linkswhich let the user change view, i.e.
rearrange el-ements in the web canvas for revealing shallowlinks between lexias, belonging to the same docu-ment or not.
Therefore a web canvas may show re-lations between views owned by different authors.We consider quotation links, i.e.
links created bytransclusion, as a special kind of deep links.
Au-thors may create specific views adding labels tolinks.
The set of labels will form a typology oflinks, customized by every user and even shared,on demand of users?
desires.With our typology of links, we aim to solve theframing problem as defined in Section 1.2.
Wewant to model views as dynamic objects - the cre-ation of context will be still arbitrary, but changesare very easily.
We would also provide a userfacility for choosing the right licence for everylexia, following the model of Creative Commonslicences (Lessig, 2004).3 The Architecture of NovelleWe have considered many hypotheses in order tochoose a first layer architecture to save a reposi-tory.
We used a multi-tier model based on XML.Our idea is based on merging together some of themost common design techniques used in blogs andwikis.
Recently previous implementation tech-niques have been studied from their new aspects tofind innovative web technologies.
A basic schemeof Novelle architecture is presented in Figure 5.The first layer is the most important.
It is based onAJAXRuby on RailsRDBMSXMLDBMS / FilesystemGUIFigure 5: Novelle: multi-tier architecturean infrastructure for storing effectively data repos-itory in order to obtain the best performances.
Wehave studied two alternatives for the repository.On one side we have different techniques to mapXML trees onto a database management system.On the other side we may map XML trees directlyon a filesystem ?
see below for details.The second layer is represented by XML.
Mes-sages, data and metadata are exchanged betweenlayers using the capability of this language.
Thisallows to treat data and metadata on different levelof abstraction.The Ruby on Rails (2006) framework permitsus to quickly develop web applications withoutrewriting common functions and classes.We used the Asyncronous Javascript And XML(or AJAX) paradigm to create the graphical userinterface.
AJAX function lets the communicationworks asyncronously between a client and a serverthrough a set of messages based on HTTP protocoland XML (Garrett, 2005).3.1 XML repositoryWe chose to use XML trees to store together data,metadata, messages and their meanings because ithas some benefits.
The most important is storing43XML data.
The other benefits of a native XML so-lution are: the storing without mapping your XMLto some other data structure like objects, classes ortables; the neatness of the structure; the underly-ing technology from the abstract layer to the phys-ical ones is based on a unique standard, widely ac-cepted by the community.
Data may be enteredand retrieved as XML.
Another advantage is flexi-bility, gained through the semi-structured nature ofXML and the schema independent model used bymost of native XML databases.
This is especiallyvaluable when you have very complex XML struc-tures that would be difficult or impossible to mapto a more structured database.
At this time thereare not XML databases so stable to be used intoproject of this kind.Xindice (developed by Apache Group) provedbetter than others.
Apache Xindice is a databasedesigned from the ground up to store XML dataor what is more commonly referred to as a nativeXML database.
It stores short XML documentsin collections with runtime generation of indexes.Unfortunately Xindice seems not to have been de-veloped any more since April 2004.Another native XML database, more usable andsupported, is eXist.
eXist is growing quickly and itimplements some functionalities of Xindice.
Thestandards support is not completed and some func-tions are currently being rewritten directly embed-ded into the software.
After doing many tests on it,it reveals worse performances with respect to otherplatforms, even if it is more complete in compari-son to the others.Anyway our interest keeps focusing on themwaiting for the first stable release effectively us-able in Novelle.
We have considered the possi-bility to map XML trees to relational or object-oriented database management systems that sup-port XML.
We can map directly an XML tree intoa memory tree structure, made up with classes andobjects, with object-oriented databases, as we cansee in Ozone project (2006).
The last stable ver-sion of Ozone was released in 2004.
The mainproblem with Ozone - and with others OODBMS- is the overhead requested to the memory forstoring a complex tree.
On the other side, manyRDBMS with XML support map directly an XMLtree to an entity-relationship schema.
In some in-stances XML trees are stored as Binary Large Ob-ject, or BLOB, into one big table.
In other situ-ations XML trees are parsed, splitted and finallystored in tables where attributes have the samenames than XML nodes.Ronald Bourret (2006) mantains and updates avery comprehensive list of native XML databaseson his web site.While we are waiting for a native XMLdatabase stable and useful for our project, we havedecided to get inspiration from the common ideaused in many blogs and wikis.
Most of these archi-tectures are used to store messages in a structurethat is similar to a directory tree saved on filesys-tem.
Often this idea is only developed to present tousers messages organized in collection ordered bytime (e.g.
blogs), but all the platforms are basedon RDBMS.
We have found in our research onlyone other project in which messages are stored di-rectly on filesystem: the Gblog project (Gblog,2005).
Nobody usually adopt this solution becausethe security of the web site is less strong.
In or-der to represent messages archives the most com-mon structure is the triple ../year/month/day/... Inour assumption, a message is a history.
There-fore a structure of this kind works very well withour idea.
We are going to build a filesystem time-based structure in which we can directly map ourmessages i.e.
our histories.
This structure is also atree.
We can write also an XML document thatmantains an architecture scheme with some in-dexes to speed up queries.
Moreover, we storewith a message another XML document represent-ing all the past history (i.e.
the paths) of the mes-sage.So as to sum up, every time a user stores amessage, he has to save the first XML documentwith the message, then saves or updates a secondXML document representing its past history andfinally saves or updates a third XML message withfilesystem directory tree.
The overhead on band-with and net speed of this solution does not letusers notice significant differences, even though itis necessary to grant writing permissions to every-one on the entire repository.
Having a native XMLdatabase will give the advantage of saving XMLdocuments in a rapid, neat and indicized way, inorder to be able to execute efficient queries on therepository.3.2 eXtensible Markup LanguageWe chose XML as language and meta-languagebecause we needed to be able to save messageswith their meanings.
Every lexia is saved with44some tags and attributes which describe its mean-ing.
The possibility of storing separately data fromtheir representations lets a system access morequickly to a data and extract the requested infor-mation.
XML is a W3C standard and this makesour project ready to be changed and extended, aswell as to be connected with other applications andservices (XML, 2005).
XML will be used to rep-resent data, metadata, link typing, messages andpaths map, and to exchange messages betweeendifferent layers.3.3 Ruby on RailsRuby on Rails, or RoR, is a framework rich in ex-tensions and libraries with licences suitable for ourusage, in particular XML Builder and gdiff/gpatch.The first library offers a set of classes which allowsto generate XML code in a simple way (Builder,2006).
Gdiff/gpatch library is an implementationof the gdiff protocol, that creates a patch from twofiles and then a new file from one of the previ-ous files and the patch (Gdiff, 2005).
Using thislibrary we are going to be able to store the his-tory and the last version in an easy way and sav-ing space.
Creating a document is therefore a se-quence of patches.
Storing works in the same way,that is executing a gdiff protocol and storing thenew patch.
Moving across the document historymeans retrieving a number of patch commands un-til you reach the desired version of the document.Ruby on Rails does not support native XMLdatabases at this time, therefore in our architec-ture there will be provisionally a relational DBMSdedicated to RoR, which had no problem with afilesystem repository.3.4 Asyncronous Javascript And XMLAJAX is not a technology in itself but a term thatrefers to the use of a group of technologies to-gether, in particular Javascript and XML.
In otherwords AJAX is a web development technique forcreating interactive web applications using a com-bination of XHTML and CSS, Document Ob-ject Model (or DOM), the XMLHTTPRequest ob-ject (Wikipedia, 2005).AJAX paradigm has been recently defined,when someone has rediscovered a simple func-tion originally developed by Microsoft as ActiveXcontrol.
This function, named XMLHTTPRequestlets clients ask servers for some particular datausing asyncronous handshake.
In this way userscan continue using web application (typically fill-ing web forms) while the client and the serverexchange data and messages.
Other developershave published a concurrent version of this func-tion for other browsers than Internet Explorer,like Mozilla/Gecko, Opera and Safari.
The webpages builded with this technology give the im-pression to have dynamic content.
Important ex-amples builded with AJAX paradigm are Gmail byGoogle, Writely, Kiko, Webnote, Meebo.
UsingAJAX to develop web applications and web ser-vices needs some attention.
First of all Javascriptmust not be disabled in browsers.
It is also neces-sary to pay attention to estimate correctly the timespent in exchanging messages between client andserver so to exploit the good capabilities gainedwith AJAX, fully supported by and integrated inRuby on Rails.3.5 Access pointsWe are going to add to every view of Novelle asearch engine that returns a list of meanings anda set of link between them.
These links are rep-resented in our project with images.
Every imageis itself a map that the user can surf and/or opento increase details level.
When the user has foundthe message, he can access to it simply clickingon it.
An user can comment or modify every lexia,if these actions are granted by the original author,as explained above.
Users can create new linksbetween lexias and they can describe what kindof link they intend to create through appropriatelink type.
These modifications are stored using thedocument history model of Novelle through fol-lowing patch.4 Related WorksThe main source of Novelle are wikis and blogs.While wikis have spread from a detailed de-sign (Cunningham and Leuf, 2001), unfortunatelyblogs have not been designed under a model.So we have tested and compared the most usedtools available for blogging: Bloggers, WordPress,MovableType and LiveJournal.Generally speaking, we find that the personalpublic diary metaphor behind blogs (McNeill,2005) may bring to an unsatisfactory representa-tion of the context.
The only way to retrieve infor-mation is through a search engine or a calendar,i.e.
the date of the ?post?
?
a lexia in the jargon ofbloggers.Moreover, we use some new web applications45to take and share notes or to browser everyone?sbookmarks, e.g.
del.icio.us.
Mostly, these webapplications oriented to writing give a strong em-phasis on collaboration and sharing.
This led usto rethink ownership and to use the Creative Com-mons model to design the contents of Novelle.Finally, we noticed that personal wikis areused for storing cognitive maps of individualsand brainstorming.
This use was already thoughtby the founders of wikis (Cunningham and Leuf,2001), but it has not been widely explored in prac-tics, as far as the authors know.
However, this di-rection of work is not actually new - concept andmind mapping, the two main paradigms for cogni-tive maps, have been used for several years.Concept mapping has been used at least in ed-ucation for over thirty years, in particular at theCornell University, where Piaget?s ideas gave theroots to the assimilation theory by David Ausubel.Very briefly, concept maps show the relationshipsbetween concepts labelling both nodes and arcs.Every arc always has a definite direction, i.e.
arcsare arrows (Novak, 1998).In contrast, mind maps spread from a centre,with branches radiating out.
Furthermore, mindmaps, as thought and copyrighted by Tony Buzan,can label only nodes, not arcs.
The resultingshape of mind maps is sometimes similar to neu-rons?
(Buzan, 2000).We have tested both concept and mind mappingsoftware tools, available for free or in a trial pe-riod.
In particular, CmapTools software is cur-rently used at the Cornell University and it is freeas a client.
It may run on CmapServers, and it isa very good way to share the knowledge stored incognitive maps.
Unfortunately, it does not collectdata in a format suitable for the web, and it doesnot permit to view concepts across cognitive mapsowned by different users (Tergan, 2005).
More,concept maps require a learning curve very highwhen started to be used, at least in our experience.On the contrary, mind maps are by far more intu-itive.There are a lot of mind mapping tools, whichare clones of MindJet MindManager, the officialsoftware for Buzan?s mind mapping.
The mindmapping tool we were looking for should have hadan open source licence, used a format for data stor-age suitable for the web, and been cross-platform.In fact, Freemind, as the closest approximation ofour needs (Mueller, 2000), succeeded in runningon the three major operating systems available,without sensible differences.Figure 6: Our free mind map for NovelleEven if we like the idea behind mind maps, weneed to have a multiauthored environment, wherearcs may be labeled.
In other terms, the centreof the map should change according to the user?sdesire.
That is why we thought about web canvasas document views.
If we consider documents asfree mind maps, the nodes will be lexias and thearcs will be links.Apart from wikis, blogs, and cognitive map-ping, we were also inspired by the experiences ofearly hypertext writing tools, in particular Inter-media and Storyspace.
In fact, they were usedexpecially in academic writing with some suc-cess.
Intermedia is no more developed and no-body of us had the opportunity to try it (Landow,1994).
Storyspace is currently distributed by East-gate (2005), and we have used it for a time.
How-ever, in our opinion Storyspace is a product of itstime and in fact it isn?t a web application.
Al-though it is possible to label links, it lacks a lotof features we need.
Moreover, no hypertext writ-ing tool available is released under an open sourcelicence.
We hope that Novelle will bridge this gap- we will choose the exact licence when our firstpublic release is ready.We are persuaded that there is no contradictionin collaborative mind mapping and academic writ-ing.
Maybe it is not by chance that Eastgate hasalso released a ?personal content management as-sistant?
(Eastgate, 2006).
Our purpose is to bringback again collaborative writing and free brain-storming, as it should be.465 Conclusions and Further WorksWe are currently developing a prototype of Nov-elle.
We argue that the model under Novelle wouldbe an explicit representation of the context and aclear model for the contents.
One of the main ap-plication of our software is natural language pro-cessing.
We are going to test it expecially on digi-tal variants of literary texts.AcknoweledgementsWe want to acknowledge Dr. Marco Benini,Dr.
Alberto Trombetta for their deep insights andGabriella Canciani for having reviewed the finaldraft of this paper.ReferencesRoland Barthes.
1970.
S/Z.
Editions du Seuil, Paris.Tim Berners-Lee.
1999.
Weaving the Web.
Harper,San Francisco.Jay David Bolter.
1991.
Writing Space: the Computer,Hypertext, and the History of Writing.
Erlbaum As-sociates, Hillsdale, N.J.Ronald Bourret.
2006.
XML Database Products.
Url:http://www.rpbourret.com/xml/.
Retrieved the 3rdof January.Builder library.for example 2006.
Project: Builder.Provide a simple way to create XML markup anddata structures.
Url: http://builder.rubyforege.org/.Retrieved the 4th of January.Tony Buzan and Barry Buzan.
2000.
The Mind MapBook.
BBC Worldwide Limited, London.Ward Cunningham and Bo Leuf.
2001.
The Wiki Way- Quick Collaboration on the Web.
Addison-Wesley,Boston.Eastgate 2005.
Storyspace.
Url:http://www.eastgate.com/storyspace.
Retrievedthe 31st of December.Eastgate 2006.
Tinderbox.
Url:http://www.eastgate.com/tinderbox.
Retrievedthe 2nd of January.Umberto Eco.
1962.
Opera aperta.
Bompiani, Milan,Italy.Elizabeth L. Eisenstein.
1983.
The Printing Revolu-tion in Early Modern Europe.
Cambridge Univer-sity Press, Cambridge, UK.Jesse James Garrett.
2005.
Ajax: A NewApproach to Web Applications.
Url:http://www.adaptivepath.com/publications/essays//archives/000385.php.
Retrieved the 22nd ofDecember.Gblog 2.0.
2005.
Gblog 2.0.
Blog, reloaded.
Url:http://gblog.com/.
Retrieved the 27th of December.Gdiff/Gpatch library.
2005.
Gdiff/Gpatch.
Animplementation of the W3C gdiff protocol.
Url:http://ruby.brian-schroeder.de/gdiff/.
Retrieved the28th of December.George P. Landow 1994.
Hypertext 2.0.
The Conver-gence of Contemporary Critical Theory and Tech-nology.
The Johns Hopkins University Press, Balti-more, Maryland.Lawrence Lessig 2004.
Free Culture: How Big MediaUses Technology and the Law to Lock Down Cultureand Control Creativity.
Penguin Books.Scott McCloud.
2001.
Understanding Comics.
Para-dox Press, NY.Laurie McNeill.
2005.
Genre Under Construction:The Diary on the Internet.
Language@Internet, 1.Joerg Mueller.
2000.
FreeMind.
Url:http://freemind.sourceforge.net.
Retrieved the31st of December 2005.Theodor Holm Nelson.
1992.
Literary Machines 90.0.Muzzio, Padua, Italy.Joseph Donald Novak.
1998.
Learning, Creating,and Using Knowledge: Concept Maps As Facilita-tive Tools in Schools and Corporations.
LawrenceErlbaum Associates.Ozone Database Project.
2006.
Ozone DatabaseProject open initative.
Url: http://ozone-db.org/.
Re-trieved the 03rd of January.Ruby on Rails.
2006.
Ruby on Rails.Web developement that doesn?t hurt.
Url:http://www.rubyonrails.org/.
Retrieved the 03rd ofJanuary.Richard M. Stallman.
2001.
Free Software, Free Soci-ety: Selected Essays of Richard M. Stallman.
GNUPress, Cambridge, Massachusetts.Sigmar-Olaf Tergan and Tanja Kellers.
2005.
Knowl-edge And Information Visualization: Searching forSynergies.
Springer, Berlin.Dave Thomas and David Heinemeier Hansson.
2005.Agile Web Development with Rails - A pragmaticguide.
Pragmatic Bookshelf.Wikipedia.
2005.
Wikipedia.
FromWikipedia, the free encyclopedia.
Url:http://en.wikipedia.org/wiki/Wikipedia.
Retrievedthe 31st of December.XML, eXtensible Markup Language.
2005.Extensible Markup Language (XML).
Url:http://www.w3.org/XML/.
Retrieved the 27thof December.47
