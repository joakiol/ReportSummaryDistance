Proceedings of the 12th European Workshop on Natural Language Generation, pages 90?93,Athens, Greece, 30 ?
31 March 2009. c?2009 Association for Computational LinguisticsSimpleNLG: A realisation engine for practical applicationsAlbert Gatt and Ehud ReiterDepartment of Computing ScienceUniversity of AberdeenAberdeen AB24 3UE, UK{a.gatt,e.reiter}@abdn.ac.ukAbstractThis paper describes SimpleNLG, a re-alisation engine for English which aimsto provide simple and robust interfaces togenerate syntactic structures and linearisethem.
The library is also flexible in al-lowing the use of mixed (canned and non-canned) representations.1 IntroductionOver the past several years, a significant consensushas emerged over the definition of the realisationtask, through the development of realisers such asREALPRO (Lavoie and Rambow, 1997), ALETH-GEN (Coch, 1996), KPML (Bateman, 1997),FUF/SURGE (Elhadad and Robin, 1996), HALO-GEN (Langkilde, 2000), YAG (McRoy et al, 2000),and OPENCCG (White, 2006).Realisation involves two logically distinguish-able tasks.
Tactical generation involves makingappropriate linguistic choices given the semanticinput.
However, once tactical decisions have beentaken, building a syntactic representation, apply-ing the right morphological operations, and lin-earising the sentence as a string are comparativelymechanical tasks.
With the possible exceptionof template-based realisers, such as YAG, exist-ing wide-coverage realisers usually carry out bothtasks.
By contrast, a realisation engine focuses onthe second of the two tasks, making no commit-ments as to how semantic inputs are mapped tosyntactic outputs.
This leaves the (tactical) prob-lem of defining mappings from semantic inputsto morphosyntactic structures entirely up to thedeveloper, something which may be attractive inthose applications where full control of the out-put of generation is required.
Such control is notalways easily available in wide-coverage tacticalgenerators, for a number of reasons:1.
Many such realisers define an input formal-ism, which effectively circumscribes the (se-mantic) space of possibilities that the realiserhandles.
The developer needs to ensure thatthe input to realisation is mapped to the req-uisite formalism.2.
Since the tactical problem involves searchthrough a space of linguistic choices, thebroader the coverage, the more efficiencymay be compromised.
Where real-time de-ployment is a goal, this may be an obstacle.3.
Many application domains have sub-language requirements.
For example, thelanguage used in summaries of weather data(Reiter et al, 2005) or patient information(Portet et al, to appear) differs from standardusage, and does not always allow variationto the same extent.
Since realisers don?ttypically address such requirements, theiruse in a particular application may requirethe alteration of the realiser?s rule-base or,in the case of statistical realisers, re-trainingon large volumes of appropruately annotateddata.This paper describes SimpleNLG, a realisa-tion engine which grew out of recent experiencesin building large-scale data-to-text NLG systems,whose goal is to summarise large volumes of nu-meric and symbolic data (Reiter, 2007).
Sub-language requirements and efficiency are impor-tant considerations in such systems.
Althoughmeeting these requirements was the initial motiva-tion behind SimpleNLG, it has since been devel-oped into an engine with significant coverage ofEnglish syntax and morphology, while at the sametime providing a simple API that offers users di-rect programmatic control over the realisation pro-cess.90Feature Values Applicable classeslexical ADJPOSITION Attrib1/2/3, PostNominal, Predicative ADJADVPOSITION Sentential, PostVerbal, Verbal ADVAGRTYPE Count, Mass, Group, Inv-Pl, Inv-Sg NCOMPLTYPE AdjP, AdvP, B-Inf, WhFin, WhInf, .
.
.
VVTYPE Aux, Main, Modal Vphrasal FUNCTION Subject, Obj, I-Obj, Prep-Obj, Modifier allSFORM B-Inf, Gerund, Imper, Inf, Subj SINTERROGTYPE Yes/No, How, What, .
.
.
SNUMBERAGR Plural, Singular NPTENSE Pres, Past, Fut VPTAXIS (boolean) true (=perfective), false VPPOSSESSIVE (boolean) true (=possessive), false NPPASSIVE (boolean) true, false VPTable 1: Features and values available in SimpleNLG2 Overview of SimpleNLGSimpleNLG is a Java library that provides inter-faces offering direct control over the realisationprocess, that is, over the way phrases are built andcombined, inflectional morphological operations,and linearisation.
It defines a set of lexical andphrasal types, corresponding to the major gram-matical categories, as well as ways of combiningthese and setting various feature values.
In con-structing a syntactic structure and linearising it astext with SimpleNLG, the following steps are un-dertaken:1.
Initialisation of the basic constituents re-quired, with the appropriate lexical items;2.
Using the operations provided in the API toset features of the constituents, such as thosein bottom panel of Table 1;3.
Combining constituents into larger struc-tures, again using the operations provided inthe API which apply to the constituents inquestion;4.
Passing the resulting structure to the lin-eariser, which traverses the constituent struc-ture, applying the correct inflections and lin-ear ordering depending on the features, be-fore returning the realised string.Constituents in SimpleNLG can be a mixtureof canned and non-canned representations.
Thisis useful in applications where certain inputs canbe mapped to an output string in a deterministicfashion, while others require a more flexible map-ping to outputs depending, for example, on seman-tic features and context.
SimpleNLG tries to meetthese needs by providing significant syntactic cov-erage with the added option of combining cannedand non-canned strings.Another aim of the engine is robustness: struc-tures which are incomplete or not well-formed willnot result in a crash, but typically will yield infe-licitous, though comprehensible, output.
This is afeature that SimpleNLG shares with YAG (McRoyet al, 2000).
A third design criterion was toachieve a clear separation between morphologicaland syntactic operations.
The lexical componentof the library, which includes a wide-coveragemorphological generator, is distinct from the syn-tactic component.
This makes it useful for applica-tions which do not require complex syntactic op-erations, but which need output strings to be cor-rectly inflected.2.1 Lexical operationsThe lexical component provides interfaces that de-fine a Lexicon, a MorphologicalRule, anda LexicalItem, with subtypes for different lex-ical classes (Noun, Preposition etc).
Mor-phological rules, a re-implementation of those inMORPHG (Minnen et al, 2001), cover the fullrange of English inflection, including regular andirregular forms1.
In addition to the range of mor-phological operations that apply to them, variousfeatures can be specified for lexical items.
For ex-ample, as shown in the top panel of Table 1, ad-jectives and adverbs can be specified for their typ-ical syntactic positions.
Thus, an adjective suchas red would have the values Attrib2, indicatingthat it usually occurs in attribute position 2 (fol-lowing Attrib1 adjectives such as large), and Pred-icative.
Similarly, nouns are classified to indicate1Thanks are due to John Carroll at the University of Sus-sex for permission to re-use these rules.91their agreement features (count, mass, etc), whileverbs can be specified for the range of syntacticcomplement types they allow (e.g.
bare infinitivesand WH-complements).A typical development scenario involves thecreation of a Lexicon, the repository of the rel-evant items and their properties.
Though thiscan be done programmatically, the current distri-bution of SimpleNLG provides an interface to adatabase constructed from the NIH Specialist Lexi-con2, a large (> 300,000 entries) repository of lex-ical items in the medical and general English do-mains, which incorporates information about lexi-cal features such as those in Table 1.2.2 Syntactic operationsThe syntactic component of SimpleNLG de-fines interfaces for HeadedPhrase andCoordinatePhrase.
Apart from variousphrasal subtypes (referred to as PhraseSpecs)following the usage in Reiter and Dale (2000)),several grammatical features are defined, includ-ing Tense, Number, Person and Mood (seeTable 1).
In addition, a StringPhraseSpecrepresents a piece of canned text of arbitrarylength.A complete syntactic structure is achieved byinitialising constituents with the relevant fea-tures, and combining them using the operationsspecified by the interface.
Any syntactic struc-ture can consist of a mixture of Phrase orCoordinatePhrase types and canned strings.The input lexical items to phrase constructors canthemselves be either strings or lexical items as de-fined in the lexical component.
Once syntacticstructures have been constructed, they are passedto a lineariser, which also handles basic punctua-tion and other orthographic conventions (such ascapitalisation).The syntactic component covers the full rangeof English verbal forms, including participals,compound tenses, and progressive aspect.
Sub-types of CoordinatePhrase allow for fullyrecursive coordination.
As shown in the bottompanel of Figure 1, subjunctive forms and differentkinds of interrogatives are also handled using thesame basic feature-setting mechanism.The example below illustrates one way of con-structing the phrase the boys left the house, ini-2http://lexsrv3.nlm.nih.gov/SPECIALIST/index.htmltialising a sentence with the main verb leaveand setting a Tense feature.
Note that theSPhraseSpec interface allows the setting of themain verb, although this is internally representedas the head of a VPPhraseSpec dominated bythe clause.
An alternative would be to constructthe verb phrase directly, and set it as a constituentof the sentence.
Similarly, the direct object, whichis specified directly as a constituent of the sen-tence, is internally represented as the object of theverb phrase.
In this example, the direct objectis an NPPhraseSpec consisting of two words,passed as arguments and internally rendered aslexical items of type Determiner and Noun re-spectively.
By contrast, the subject is defined as acanned string.
(1) Phrase s1 =new SPhraseSpec(?leave?
);s1.setTense(PAST);s1.setObject(new NPPhraseSpec(?the?, ?house?
));Phrase s2 =new StringPhraseSpec(?the boys?
);s1.setSubject(s2);Setting the INTERROGATIVETYPE feature ofsentence (1) turns it into a question.
Two exam-ples, are shown below.
While (2) exemplifies asimple yes/no question, in (3), a WH-constituentis specified as establishing a dependency with thedirect object (the house).
(2) s1.setInterrogative(YES NO);(Did the boys leave home?
)(3) s1.setInterrogative(WHERE, OBJECT);(Where did the boys leave?
)In summary, building syntactic structures inSimpleNLG is largely a question of feature setting,with no restrictions on whether representations arepartially or exclusively made up of canned strings.2.2.1 Interaction of lexicon and syntaxThe phrasal features in the bottom panel of Table 1determine the form of the output, since they areautomatically interpreted by the realiser as instruc-tions to call the correct morphological operationson lexical items.
Hence, the syntactic and morpho-logical components are closely integrated (thoughdistinct).
Currently, however, lexical features suchas ADJPOSITION are not fully integrated with thesyntactic component.
For example, although ad-jectives in the lexicon are specified for their po-sition relative to other modifiers, and nouns are92specified for whether they take singular or pluralagreement, this informaiton is not currently usedautomatically by the realiser.
Full integration oflexical features and syntactic realisation is cur-rently the focus of ongoing development.2.3 EfficiencyAs an indication of efficiency, we measured thetime taken to realise 26 summaries with an aver-age text length of 160.8 tokens (14.4 sentences),and sentences ranging in complexity from simpledeclaratives to complex embedded clauses3.
Theestimates, shown below, average over 100 itera-tions per text (i.e.
a total of 2600 runs of the re-aliser) on a Dell Optiplex GX620 machine runningWindows XP with a 3.16 GHz Pentium proces-sor.
Separate times are given for the initialisationof constituents based on semantic representations,along the lines shown in (1), (SYN), and linearisa-tion (LIN).
These figures suggest that a medium-length, multiparagraph text can be rendered in un-der a second in most cases.MEAN (ms) SD MIN MAXSYN 280.7 229.7 13.8 788.34LIN 749.38 712.6 23.26 2700.383 Conclusions and future workThis paper has described SimpleNLG, a realisa-tion engine which differs from most tactical gen-erators in that it provides a transparent API to carryout low-level tasks such as inflection and syntac-tic combination, while making no commitmentsabout input specifications or input-output map-pings.The simplicity of use of SimpleNLG is reflectedin its community of users.
The currently avail-able public distribution4, has been used by severalgroups for three main purposes: (a) as a front-endto NLG systems in projects where realisation is notthe primary research focus; (b) as a simple natu-ral language component in user interfaces for otherkinds of systems, by researchers who do not workin NLG proper; (c) as a teaching tool in advancedundergraduate and postgraduate courses on Natu-ral Language Processing.SimpleNLG remains under continuous develop-ment.
Current work is focusing on the inclusion ofoutput formatting and punctuation modules, which3The system that generates these summaries is fully de-scribed by Portet et al (to appear).4SimpleNLG is available, with exhaus-tive documentation, at the following URL:http://www.csd.abdn.ac.uk/?ereiter/simplenlg/.are currently handled using simple defaults.
More-over, an enhanced interface to the lexicon is beingdeveloped to handle derivational morphology anda fuller integration of complementation frames oflexical items with the syntactic component.ReferencesJ.
A. Bateman.
1997.
Enabling technology for multi-lingual natural language generation: the KPML de-velopment environment.
Natural Language Engi-neering, 3(1):15?55.J.
Coch.
1996.
Overview of AlethGen.
In Proceedingsof the 8th International Natural Language Genera-tion Workshop.M.
Elhadad and J. Robin.
1996.
An overview ofSURGE: A reusable comprehensive syntactic realiza-tion component.
In Proceedings of the 8th Interna-tional Natural Language Generation Workshop.I.
Langkilde.
2000.
Forest-based statistical languagegeneration.
In Proceedings of the 1st Meeting ofthe North American Chapter of the Association forComputational Linguistics.B.
Lavoie and O. Rambow.
1997.
A fast and portablerealizer for text generation systems.
In Proceedingsof the 5th Conference on Applied Natural LanguageProcessing.S.W.
McRoy, S. Channarukul, and S. Ali.
2000.
YAG:A template-based generator for real-time systems.In Proceedings of the 1st International Conferenceon Natural Language Generation.G.
Minnen, J. J. Carroll, and D. Pearce.
2001.
Ap-plied morphological processing of English.
NaturalLanguage Engineering, 7(3):207?223.F.
Portet, E. Reiter, A. Gatt, J.
Hunter, S. Sripada,Y.
Freer, and C. Sykes.
to appear.
Automatic gener-ation of textual summaries from neonatal intensivecare data.
Artificial Intelligence.E.
Reiter and R. Dale.
2000.
Building Natural Lan-guage Generation Systems.
Cambridge UniversityPress, Cambridge, UK.E.
Reiter, S. Sripada, J.
Hunter, J. Yu, and I. Davy.2005.
Choosing words in computer-generatedweather forecasts.
Artificial Intelligence, 167:137?169.E.
Reiter.
2007.
An architecture for Data-to-Text sys-tems.
In Proceedings of the 11th European Work-shop on Natural Language Generation.M.
White.
2006.
Chart realization from disjunctiveinputs.
In Proceedings of the 4th International Con-ference on Natural Language Generation.93
