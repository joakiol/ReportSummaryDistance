NATURAL-LANGUAGE ACCESS TO DATABASES--THEORETICAL/TECHNICAL ISSUESRober t  C. MooreArtificial Intelligence CenterSRI International, Menlo Park, CA 94025I INTRODUCTIONAlthough there have been many experimentalsystems for natural-language access to databases,with some now going into actual use, many problemsin this area remain to be solved.
The purpose ofthis panel is to put some of those problems beforethe conference.
The panel's motivation stemspartly from the fact that, too often in the past,discussion of natural-language access to databaseshas focused, at the expense of the underlyingissues, on what particular systems can or cannotdo.
To avoid this, the discussions of the presentpanel will be organized around issues rather thansystems.Below are descriptions of five problem areasthat seem to me not to be adequately handled byany existing system I know of.
The panelists havebeen asked to discuss in their position papers asmany of these problems as space allows, and havebeen invited to propose and discuss one issue oftheir own choosing.II QUANTITY QUESTIONSDatabase query languages typically providesome means for counting and totaling that must beinvoked for answering "how much" or "how many"questions.
The mapping between a natural-languagequestion and the corresponding database query,however, can differ dramatically according to theway the database is organized.
For instance, ifDEPARTMENT is a field in the EMPLOYEE file, thedatabase query for "How many employees are in thesales department?"
will presumably count thenumber of records in the EMPLOYEE file that havethe appropriate value for the DEPARTMENT field.On the other hand, if the required information isstored in a NUMBER-OF-EMPLOYEES field in aDEPARTMENT file, the database query will merelyreturn the value of this field from the salesdepartment record.
Yet a third case will arise ifdepartments are broken down into, say, offices,and the number of exployees in each office isrecorded.
Then the database query will have tototal the values of the NUMBER-OF-EMPLOYEES fieldin all the records for offices in the salesdepartment.
In each case, the English question isthe same, but the required database query isradically different.
Is there some unifiedframework that will encompass all these cases?
Isthis a special case of a more general phenomenon?III TIME AND TENSEThis is a notorious black hole for boththeoretical and computational linguistics, but,since many databases are fundamentally historicalin character, it cannot really be circumvented.There are many problems in this general area, butthe one I would suggest is how to handle, within acommon framework, both concepts defined withrespect to points in time and concepts definedwith respect to intervals.
The location of anobject is defined relative to a point; it makessense to ask "Where was the Kennedy at 1800 hourson July I, 19807" The distance an object hastraveled, however, is defined solely over aninterval; it does not make sense to ask "How fard id  the Kennedy sall at 1800 hours onJuly I, 19807" Or, to turn things around, "Howfar did the Kennedy sell during July 1982?"
hasonly a single answer (for the entire interval)--but "Where was the Kennedy during July 1982?"
mayhave many different answers (in the extreme case,one for each point in the interval).
Must thesequeries be treated as two completely distincttypes, or is there a unifying framework for them?If they are treated separately, how can a systemrecognize which treatment is appropriate?The fact that any interval contains aninfinite number of points creates a specialproblem for the representation of temporalinformation in databases.
Typically, informationabout a tlme-varying attribute such as location isstored as samples or snapshots.
We might know theposition of a ship once every hour, but obviouslywe c-~-~k have a record in an extensional databasefor every point in time.
How then are we tohandle questions about specific points in time notstored in the database, or questions that quantifyover periods of time?
(E.g., "Has the Kennedyever been to Naples?")
Interpolation naturallysuggests itself, but is it really appropriate inall cases?44IV QUANTIFYING INTO QUESTIONS Vl MULTIFILE QUERIESNormally, most of the inputs to a system fornat~ral-language access to databases will bequestions.
Their semantic interpretation,however, is not yet completely understood.
Inparticular, quantlflers in questions can causespecial problems.
In speech act theory, it isgenerally assumed that a question can be analyzedas a having a propositional content, which is adescription, and an illocutionary force, which isa request to enumerate the entities that satisfythe description.
Questions such as "Who manageseach department?"
resist this simple analysis,however.
If "each" is to be analyzed as auniversal quantifier (as in "Does each departmenthave a manager?
"), then its scope, in some sense,must be wider than that of the indicator of thesentence's illocutlonary force.
That is, what thequestion actually means is "For each department,who manages the department?"
If we to try toforce the quantifier to be part of the descriptionof the entities to be enumerated, we seem to beasking for a single manager who manages everydepartment--i.e., "Who is the manager such that hemanages each department?"
The main issues are:What would be a suitable representation for themeaning of this sort of question, and what wouldbe the formal semantics of that representation?V QUERYING SEMANTICALLY COMPLEX FIELDSNatural-language query systems usually assumethat the concepts represented by database fieldswill always be expressed in English by singlewords or fixed phrases.
Frequently, though, adatabase field will have a complex interpretationthat can be interrogated in many different ways.For example, suppose a college admissions officewants to record which applicants are children ofalumni.
This might be indicated in the databaserecord for each applicant by a CHILD-OF-ALUMNUSfield with the possible values T or F. If thisfield were queried by asking "Is John Jones achild of an alumnus?"
then "child of of analumnus" could be treated as if it were a fixedphrase expressing a primitive predicate.
Thedifficulty is that the user of the system mightJust as well ask "Is one of John Jones's parentsan alumnus?"
or "Did either parent of John Jonesattend the college?"
Can anything be done tohandle cases llke this, short of treating anentire question as a fixed form?All the foregoing examples involve questionsthat can be answered by querying a single file.In a multifile database, of course, questions willoften arise that require information from morethan one file, which raises the issue of how tocombine the information from the various filesinvolved.
In database terms, this often comesdown to forming the "Join" of two files, whichrequires deciding what fields to compute the Joinover.
In the LADDER system developed at SRI, aswell as in a number of other systems, it wasassumed that for any two files there is at most asingle pair of fields that is the "natural" pairof fields to Join.
For instance , in a SHIP filethere may be a CLASS field containing the name ofthe class to which a ship belongs.
Since allships in the same class are of the same design,attributes such as length, draft, speed, etc., maybe  stored in a CLASS file, rather than being givenseparately for each ship.
If the system knowsthat the natural Join between the two files isfrom the CLASS field of the SHIP file to theCLASSNAME field of the CLASS file, it Can retrievethe length of a particular ship by computing thisjoin.The scheme breaks down, however, when thereis more than one natural Join between two files,as would be the case if there were a PORT file andfields for home port, departure port, anddestination port in the SHIP file.
This issometimes called the "multlpath problem."
Isthere is a solution to this problem in the generalcase?
If not, what is the range of special casesthat one can reasonably expect to handle?45
