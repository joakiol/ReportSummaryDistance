Web tools for introductory computational inguisticsDafydd G ibbonFakultilt fllr Ling.
8z Lit.Pf.
100131, D-33501 Bielefeldgibbon~spe ct rum.
uni-bielef eld.
deJulie Carson-BerndsenDepartment of Computer  Sc ienceBelfield, Dublin 4, IrelandJulie.
Berndsen@ucd.
ieAbst ractWe introduce a notion of trainingmethodology space (TM space) forspecifying training methodologies intile different disciplines and teachingtraditions associated with computa-tional linguistics and the human lan-guage technologies, and pin our ap-proach to the concept of operationalmodel; we also discuss different gen-eral levels of interactivity.
A num-ber of operational models are intro-duced, with web interfaces for lexicaldatabases, DFSA matrices, finite-state phonotactics development, andDATR lexica.1 Why tools for CL training?In computational linguistics, a number ofteaching topics and traditions meet; for ex-ample:?
tbrmal mathematical training,?
linguistic argumentation using sources ofindependent evidence,?
theory development and testing with em-pirical models,?
corpus processing with tagging and sta-tistical classification.Correspondingly, teachers' expectationsand teaching styles vary widely, and, likewise,students' expectations and accustomed stylesof learning are very varied.
Teaching methodsand philosophies fluctuate, too, between morebehaviouristic styles which are more charac-teristic of practical subjects, and the morerationalistic styles of traditional mathemat-ics training; none, needless to say, covers thespecial needs of all subjects.Without specifying the dimensions in de-tail, let us call this complex field trainingmethod space (TM space).
The term train-ing is chosen because it is neutral betweenteaching and learning, and implies the inten-sive acquisition of both theoretical nd prac-tical abilities.
Let us assume, based on thevariations outlined above, that we will needto navigate this space in sophisticated ways,but as easily as possible.
What could be atthe centre of TM space?
As the centre of TMspace, let us postulate a model-based trainingmethod, with the following properties:1.
The models in TM space are both formal,and with operational, empirical interpre-tations.2.
The empirical interpretations of modelsin TM space are in general operationalmodels implemented in software.3.
The models in TM space may be under-stod by different users from several differ-ent perspectives: from the point of viewof the mathematician, the programmer,the software user etc., like 'real life pro-grammes'.4.
Typical ingware and software models aregrammars, lexica, annotated corpora, op-erationalised procedures, parsers, com-pilers; more traditional models aregraphs, slides, blackboards, three-dimensional block or ball constructions,calculators.Why should operational models, in thesense outlined here, be at the centre of TM-ispace?
There are several facets to the answer:First, the use of operational models permitspractice without succumbing to the naiveti@sof stimulus-response models.
Second, this no-tion of model is integrative, that is, they areon the one hand mathematical, in that theyare structures which are involved in the in-terpretation of theories, and at the same timethey are empirical, in representing chunks ofthe world, and operational, in that they maptemporal sequences of states on to real timesequences.
But, third, working with opera-tional models is more fun.
Ask our kids.This paper describes and motivates a rangeof such models: fbr arithmetic, for manipu-lating databases, for experimenting with fi-nite state devices, for writing phonological(or, analogously, orthographic) descriptions,for developing sophisticated inheritance l x-ica.2 What  k ind  of  interactivity?The second kind of question to be asked is:Why the Web?
Interactive training tools arenot limited to the Web; they have been dis-tributed on floppy disk for over two decades,and on CD-ROM for over a decade.
In pho-netics, interactive operational models have along history: audio I/O, visualisations as os-cillogrammes, pectrogrammes, pitch tracesand so on, have been leading models formulti-media in teacher training and speechtherapy education since the 1970s.
So whythe Web?
The answers are relatively straight-fbrward:?
The Web makes software easy to dis-tribute.?
The Web is both a distributed user plat-form and a distributed archive.?
New forms of cooperative distance learn-ing become possible.?
Each software version is instantly avail-able.?
The browser client software used foraccessing the Web is (all but) univer-sal (modulo minor implementation dif-ferences) in many ways: platform inde-pendent, exists in every office and manyhou les ,  ...The tools describe here embody three dif-ferent approaches to the dependence of stu-dents on teachers with regard to the provisionof materials:1.
Server-side applications, realised withstandard CGI scripts: practically un-limited functionality, with arbitrary pro-gramming facilities in the background,but with inaccessible source code.2.
Compiled client-side applications, re-alised with Java: practically unlimitedfunctionality, particularly with respect tographical user interfaces, typically withinaccessible source code.3.
Interpreted client-side applications, re-alised with JavaScript: limited func-tionality with respect to graphicaluser interfaces, functionality limited totext manipulation and manipulation ofHTML attributes (including CGI pre-processing), typically with immediatelyaccessible code.From the formal point of view, these pro-gramming environments are equally suitable.From the (professional) programming point ofview, the object oriented programming styleof Java is often the preferred, homogeneousenvironment, though it is hard to relate it toother styles.
CGI provides an interface forarbitrary programming languages, and script-ing languages are highly relevant o linguis-tic tasks, particularly modern varieties uchas perl ,  with respect o corpus tagging andlexicon processing, or Tcl to the visualisa-tion of formal models or speech transforma-tions.
JavaScript is a pure client-side ap-plication, and has a number of practical ad-vantages which outweigh many of its limi-tations: JavaScript is interpreted, not com-piled, and the code is immediately availablefor inspection by the user; despite its sire-plicity, it permits arbitrarily complex textualand numerical manipulation and basic win-dow management; like other scripting lan-guages, Javascript is not designed for modu-lar programme development or library deploy-ment, but is best restricted to small applica-tions of the kind used in introductory work.There is another issue of interactivity at avery general evel: in software development,perhaps less in the professional environmentthan in the training of non-professionals tounderstand what is 'going on under the bon-net', or to produce small custom applications:the open software, shared code philosophy.
Inthe world 'outside' salaries are obviously de-pendent on measurable product output, andintellectual property right (IPR) regulationsfor shareware, licences and purchase are thereto enable people to make a legitimate livingfrom software development, given the prevail-ing structures of our society.As far as teaching is concerned, the de-bate mainly affects programmes with mediumfunctionality such as basic speech editors ormorphological analysers, often commercial,with products which can be produced in prin-ciple on a 'hidden' budget by a small groupof advanced computer science or engineeringstudents (hence the problem).
Obviously, itis easy for those with in stable educationalinstitutions to insist that software is commonproperty; indeed it may be said to be theirduty to provide such software, particularly inthe small and medium functionality range.Finally, it is essential to consider design is-sues for interactive teaching systems, an areawhich has a long history in teaching method-ology, going back to the programmed learningand language lab concepts of the 1960s, andis very controversial (and beyond the scope ofthe present paper).
We suggest hat the dis-cussion can be generalised via the notion ofTM space introduced above to conventionalsoftware engineering considerations: require-ments pec~ifieation (e.g.
specification of loca-tion in TM space by topic, course and studenttype), system design (e.g.
control structures,navigation, windowing, partition of material,use of graphics, audio etc.
), implementation(e.g.
server-side vs. client side), verifica-tion (e.g.
'subjective', by users; 'objective',in course context).Only a small amount of literature is avail-able on teaching tools; however, cf.
(HH1999){br speech applications, and the followingfor applications in phonetics and phonology(CB1998a), (CBG1999), English linguistics(CBG1997), and multimedia communication(G1997).
The following sections will discussa number of practical model-based applica-tions: a basic database nvironment; an in-terpreter for deterministic finite automata;a development environment for phonotacticand orthographic processing; a testbed andscratchpad for introducing the DATR lexi-cal representation language.
The  languagesused are JavaScript (JS) for client-side appli-cations, and Prolog (P) or C (C) for server-side CGI  applications.3 Database  query  in ter facegeneratorDatabase methodology is an essential part ofcomputational linguistic training; tradition-ally, UNIX  ASCI I  databases have been at thecore of many  NLP  lexical databases, thoughlarge scale applications require a professionalDBMS.
The  example shown in Figure 1 showsa distinctive feature matrix ( Jakobson andHalle consonant matrix) as a database rela-tion, with a query designed to access phono-logical 'natural classes'; any lexical databaserelation can be implemented, of course.
Inthis JavaScript application with on-the-flyquery interface generation the following func-tionality is provided:i.
Input and query of single database rela-tions.2.
F rame structure, with a control frameand a display/interaction frame whichis allocated to on-the-fly or pre-storeddatabase information.3.
The  control frame permits selection of:(a) a file containing a pre-compileddatabase in JavaScript notation,(b) on-the-fly generation of a query in-terface from the first record of thedatabase, which contains the namesof the fields/attributes/flolumns,(c) on-the-fly generation of tabular rep-resentation of the database,(d) input of databases in tabular form.4.
Query  interface with selection of arbi-trary conjunctions of query attributesand values, and output attributes.Figure 1: Database interface generator (JavaScript).5.
Compi la t ion  of database into aJavaScript data structure: a one-dimensional  array, with a presentationparameter  for construction of theon-the-fly query interface.Typical applications include basic dictio-naries, simple multillingual dictionaries, rep-resentation of feature structures as a databaserelation with selection of natural classes bymeans of an appropriate conjunction of queryattributes and values.Tasks range from user-oriented activitiessuch as the construction of 'flat' databases,or of feature matrices, to the analysis of thecode, and the addition of further input modal-ities.
Advanced tasks include the analysis ofthe code, addition of character coding conven-tions, addition of further database features.4 DFSA interpreterThere are many contexts in computationallinguistics, natural language processing andspoken language technology in which devicesbased on finite state automata re used; forexample, tokenisation, morphological analy-sis and lemmatisation, shallow parsing, syl-lable parsing, prosodic modelling, plain andhidden markov models.
A standard compo-nent of courses in these disciplines is con-cerned with formal languages and automatatheory.
The basic form of finite state automa-ton is the deterministic finite state automa-ton (DFSA), whose vocabulary is epsilon-freeand which has no more than one transitionwith a given label from any state.
Thereare several equivalent representation convert-tions for DFSAs, such as a full transitionmatrix (Vocabulary ?
StateSet) with targetstates as entries; or sparse matrix represen-tation as a relation, i.e.
a set of triples con-stituting a subset of the Cartesian productStateSet ?
Stateset x Vocabulary; or transi-tion network representation.The interface currently uses the full matrixrepresentation, and permits the entry of arbi-trary automata into a fixed size matrix.
Theexample shown illustrates the language a'b,but symbols consisting of an arbitrary numberof characters, e.g.
natural language examples,may be used.
A state-sequence trace, and  de-tailed online help explanations, as well as tasksuggestions of varying degrees of difficulty areFil~ l~clil Vlsw GO Wlrxlow Help IDFSAi~p~t : I j~ .
.
I-~ I~?~l  -~ '~Q~.
~abs~ ~ Q, set ot fia~l ~tateaQ: finite s?~ o| ~t~t~D: ums i~ l+ancc+tion D Rom Q ~d g to Q, D: Q,VDFSA ~cm ~ eu~ ~emRRm matrix:+:\[~-"~,+:1 ~'~ I~D:tIX~RA log mrs:\[qO.
qO= .
H zs~.+ qo r .~ i .
,  xmaqp~,~, al~,.,r.
?
.lqO.
qO151rllf+tJ~ qO ~618e, 15mF'l~ i~pa~ =~11~qo ~ qOqo b q)F T1 i7 -1F - \ ]  F--117-1F -1F - - IE~a- lg -17- - \ ]  + +,17117-1F-117- -1F -1  t \[\] "~ , IF -17-1F -17- -1F - \ ]  ,~, ,'~'~ m,,~-~h,,,?,~,,*~0~, ,., -~,~, v,~,, ~,.~.
....... ' .
.
.
.
, ,,,, .............i!
\ [~  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
I Dalydd Oi~bom Stm Feb 7 23:36:$0 ~ ' r  1999Figure 2: Deterministic finite state automaton (DFSA) workpad (JavaScript).provided.5 Phono log ica l  NDFSAdeve lopment  env i ronmentPhonology and prosody were the first areasin which finite state technologies were shownto be linguistically adequate and computa-tionally efficient, in the 1970s; a close secondwas morphological lternations in the 1980s(CB1998a).
The goal of this application isto demonstrate the use of finite state tech-niques in computational linguistics, partic-ularly in the area of phonotactic and allo-phonic description for computational phonol-ogy.
However, the tool does not contain anylevel specific information and can thereforebe used also to demonstrate finite state de-scriptions of orthographic information.
Inthis CGI application, implemented in Prolog(see (CBG1999)), the following functionalityis provided:1.
Display/Alter/Add to the current (non-deterministic) FSA descriptions.2.
Generate the combinations described inthe FSA.3.
Compare two FSA descriptions.4.
Parse a string using an FSA description.Typical applications of this tool include de-scriptions of phonological well-formedness ofsyllable models for various languages.
Tasksrange from testing and evaluating to parsingphonological (or orthographic) FSA descrip-tions.
More advanced tasks include extensionof the current oolbox functionality to caterfor feature-based descriptions.6 Zdat r  tes tbed  and  scratchpadDATR is a well-known theoretically well-founded and practically oriented lexicon rep-resentation language.
It also has a high ra-tio of implementations to applications, and,until relatively recently, a low degree of stan-dardisation between implementations.
In or-der to create a platform independent demon-stration and practice environment, a CGIinterface was created.
The engine was in-tended to be a Sicstus Prolog application; Sic-stus turned out to be non-CGI-compatible atthe time (1995), so a UNIX shell version ofDATR (mud, minimal UNIX DATR) was im-plemented using a combination of UNIX textstream processing tools, mainly awk.
ThisFile Edit View GO Window ?
"\]  .
: (  ,,? "
Help., .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
~ .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.~-- .~,.
: ,__~,~:,~ .................. ~.
.................. - .
.
.
.
.
.
.
.
.
~ .
.
.
.
.
.
.
.
.
.
~ .~.Back ?or~?.
:~ Reload : Home ~;ea~ch Guide ?
Pdnt .
Secuflty ~l~ZI3A'FR HyprLex Scraud|padTHEORYQUERYDafydd Gibbon, B B i rdc ie ld ,  22  March  19~7( d r .
:  Ihgg"~rEt  ?o-ga ldmt ._gmaple  D~ ~ts~=i~ ( .
.
.
.
.
.
.
.
f 11 h~.
~ g l : i ~ l  t=~taamt  o t  ~ lg~(a l  rza .d t t  - P in i ta  St, a ta  ~ut~ar~=~ ~a= hzeq = ~*c(31 rs l  .d r= F~ in tezpzet~ ~ir.l~ type  cc~ec4~ fo= h=~ - =b*c(11 tm.dtz  - I L~( '~a i  ccmp~al t i~ l  t :~t .~t  og  i~tq l iE l~~=~i  gz :oMo~fe(bu .
*  h o u ?
.wo=d :Figure 3: Zdatr scratchpad (CGI, UNIX shell, C).was later replaced by Zdatr Vl.n, and willshortly be replaced by Zdatr V2.0 (imple-mented by Grigoriy Strokin, Moscow StateUniversity).
The Zdatr software is widelyused in the teaching of lexicography, lexicol-ogy, and lexicon theory (Ginpress).Two interikces are driven by Zdatr: Thetestbed which permits interactions with pre-viously defined and integrated DATR theo-ries (CBG1999), and the scratchpad (shownin Figure 3), with which queries can be writ-ten and tested.
The scratchpad permits theentry of short theories and queries, and thetestbed has the following functionality:1. viewing of DATR theories;2. selection of manual, declared (#show and#hide) and pre-listed queries;3. selection of output properties (trace,atom spacing).4. a function for automatically integratingnew theories sent by email (not docu-mented for external use).Sample DATR theories which are avail-able include a detailed model of composition-ality in English compound nouns (Gibbon),an application for developing alternative fea-ture or autosegmental phonological represen-tations (Carson-Berndsen), and a number ofalgorithm illustrations (bubble sort, shift reg-ister machine) for more theoretical purposes.7 Out lookTools like those introduced here are not ubiq-uitous, and there are many areas of computa-tional linguistics, in particular formal train-ing in computing and training in linguisticargumentation, which require intensive face-to-face teaching.
Our tools are restricted to'island' applications where we consider themto be most effective.
For many students (andteachers), such tools provide an additionallevel of motivation because of their easy ac-cessibility, portability, and the absence of in-stallation problems, and can be used with dif-ferent levels of student accomplishment, fromthe relatively casual user in a foreign languageor speech therapy context, to the more ad-vanced linguistic programmer in courses ondatabase or automata theory or software de-velopment.For reasonably small scale applications,we favour client-side tools where possible.JavaScript is suitable in many cases, providedthat minor browser incompatibilities are hamdled.
The database application, for exam-ple, still provided very fast access when eval-uated with a 2000 record, 10 attributes perrecord database.
JavaScript has a numberof disadvantages (no mouse-graphics interac-tion, no library concept), but being an inter-preted language is very suitable for introduc-ing an 'open source code' policy in teaching.In contrast o CGI applications, where queryand result transfer time can be considerable,client-side JavaScript (or Java) applicationshave a bandwidth dependent once-off down-load time for databases and scripts (or com-piled applets), but query and result transfertime are negligeable.The applications presented here are fullyintegrated (with references to related appli-cations at other commercial and educationalinstitutions, e.g.
parsers, morphology pro-grammes, speech synthesis demonstrations)into the teaching programme.
Obvious areaswhere further development is possible and de-sirable are:?
Automatic tool interface generationbased more explicitly on general princi-ples of training methodology, e.g.
with amore explicit account of TM space andwith more systematic control, help, errordetection, query and result panel design.?
Automatic test generation for tool (andstudent) validation.?
Further tools for formal language, pars-ing and automata theoretic applications.?
Extension of database tool to includemore database functionality.We plan to extend our repertoire of appli-cations in these directions, and will inte-grate more applications from other institu-tions when they become available.Essen (eds.)
Language Teaching and LanguageTechnology, Swets & Zeitlinger, Lisse.Carson-Berndsen, J.
1998b.
Time Map Phonol-ogy: Finite State Methods and Event Logicsin Speech Recognition.
Kluwer Acadmic Press,Dordrecht.Carson-Berndsen J.
& D. Gibbon 1997.
In-teractive English, 2nd Bielefeld Multime-dia Day Demo, "coral.
lili .uni-bielefeld.
de/MuMeT2", Universitit Bielefeld, November 1997.Carson-Berndsen J.
& D. Gibbon 1999.
Interac-tive Phonetics, Virtually!
In: V. Hazan & M.Holland, eds., Method and Tool Innovations/orSpeech Science Education.
Proceedings off theMATISSE Workshop, University College, Lon-don, 16-17 April 1999, pp.
17-20.Gibbon, D. 1997.
Phonetics andMultimedia Communication, LectureNotes, "coral.
lili.
uni-bielefeld, de/Classes/Winter97", Universit~it Bielefeld.Gibbon, D. in press.
Computational lexicogra-phy.
In: van Eynde, F. & D. Gibbon: LexiconDevelopment/or Speech and Language Process-ing.
Kluwer Academic Press, Dordrecht.Hazan, V. & M. Holland, eds.
1999.
Method andTool Innovations/or Speech Science Education.Proceedings o/ the MATISSE Workshop, Uni-versity College, London, 16-17 April 1999.ReferencesCarson-Berndsen, J.
1998a.
ComputationalAutosegmental Phonology in PronunciationTeaching.
In: Jager S; J. Nerbonne & A. van
