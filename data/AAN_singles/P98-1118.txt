A Framework for Customizable Generation of HypertextPresentationsBeno i t  Lavo ie  and Owen RambowCoGenTex, Inc.840 Hanshaw Road, Ithaca, NY 14850, USAbenoit, owen~cogentex, comAbst rac tIn this paper, we present a framework, PRE-SENTOR, for the development and customiza-tion of hypertext presentation generators.
PRE-SENTOR offers intuitive and powerful declarativelanguages pecifying the presentation at differ-ent levels: macro-planning, micro-planning , re-alization, and formatting.
PRESENTOR is im-plemented and is portable cross-platform andcross-domain.
It has been used with success inseveral application domains including weatherforecasting, object modeling, system descrip-tion and requirements summarization.1 In t roduct ionPresenting information through text and hyper-text has become a major area of research anddevelopment.
Complex systems must often dealwith a rapidly growing amount of information.In this context, there is a need for presenta-tion techniques facilitating a rapid developmentand customization of the presentations accord-ing to particular standards or preferences.
Typ-ically, the overall task of generating a presen-tation is decomposed into several subtasks in-cluding: macro-planning or text planning (de-termining output content and structure), micro-planning or sentence planning (determining ab-stract target language resources to express con-tent, such as lexical items and syntactic con-structions and aggregating the representations),realization (producing the text string) and for-matting (determining the formatting marks toinsert in the text string).
Developing an appli-cation to present the information for a givendomain is often a time-consuming operationrequiring the implementation from scratch ofdomain communication knowledge (Kittredgeet al, 1991) required for the different genera-tion subtasks.
In this technical note and demowe present a new presentation framework, PRE-SENTOR, whose main purpose is to facilitate thedevelopment of presentation applications.
PRE-SENTOR has been used with success in differ-ent domains including object model description(Lavoie et al, 1997), weather forecasting (Kit-tredge and Lavoie, 1998) and system require-ments summarization (Ehrhart et al, 1998;Barzilay et al, 1998).
PRESENTOR has thefollowing characteristics, which we believe areunique in this combination:?
PRESENTOR modules are implemented inJava and C++.
It is therefore asily portablecross-platform.?
PRESENTOR modules use declarative knowl-edge interpreted at run-time which can be cus-tomized by non-programmers without changingthe modules.?
PRESENTOR uses rich presentation plans (orexemplars) (Rambow et al, 1998) which can beused to specify the presentation at different lev-els of abstraction (rhetorical, conceptual, syn-tactic, and surface form) and which can be usedfor deep or shallow generation.In Section 2, we describe the overall architec-ture of PRESENTOR.
In Section 3 to Section 6,we present he different specifications used todefine domain communication knowledge andlinguistic knowledge.
Finally, in Section 7, wedescribe the outlook for PRESENTOR.2 PRESENTOR Arch i tec tureThe architecture of PRESENTOR illustrated inFigure 1 consists of a core generator with sev-eral associated knowledge bases.
The core gen-erator has a pipeline architecture which is sim-ilar to many existing systems (Reiter, 1994):an incoming request is received by the genera-tor interface triggering sequentially the macro-planning, micro-planning, realization and fi-718PresentationCore GeneratorDomain Data, ManagerMacro-Planner ~ -iY\[Micro-Planner ~ .
~ 1I_ Realizer(Realpro)i " iConfigurable KnowledgeRequestFigure 1: Architecture of PRESENTORnally the formatting of a presentation which isthen returned by the system.
This pipeline ar-chitecture minimizes the interdependencies b -tween the different modules facilitating the up-grade of each module with minimal impact onthe overall system.
It has been proposed that apipeline architecture is not an adequate modelfor NLG (Rubinoff, 1992).
However, we are notaware of any example from practical applica-tions that could not be implemented with thisarchitecture.
One of the innovations of PRE-SENTOR is in the use of a common presenta-tion structure which facilitates the integrationof the processing by the different modules.
Themacro-planner c eates a structure and the othercomponents add to it.All modules use declarative knowledge basesdistinguished from the generator engine.
Thisfacilitates the reuse of the framework for newapplication domains with minimal impact onthe modules composing the generator.
As a re-sult, PRESENTOR can allow non-programmersto develop their own generator applications.Specifically, PRESENTOR uses the followingtypes of knowledge bases:?
Environment variables: an open list of vari-ables with corresponding values used to specifythe configuration.?
Exemplars: a library of schema-like struc-tures (McKeown, 1985; Rambow and Korelsky,1992) specifying the presentation to be gener-ated at different levels of abstraction (rhetori-cal, conceptual, syntactic, surface form).?
Rhetorical dictionary: a knowledge base in-dicating how to realize rhetorical relations lin-guistically.?
Conceptual dictionary: a knowledge baseused to map language-independent conceptualstructures to language-specific syntactic struc-tures.?
Linguistic grammar:, transformation rulesspecifying the transformation f syntactic struc-tures into surface word forms and punctuationmarks.?
Lexicon: a knowledge base containing thesyntactic and morphological ttributes of lex-emes.?
Format style: formatting specifications as-sociated with different elements of the presen-tation (not yet implemented).As an example, let us consider a simple caseillustrated in Figure 2 taken from a design sum-marization domain.
Hyperlinks integrated inthe presentation allow the user to obtain ad-ditional generated presentations.Data BasePco jec t  P ro jAF -2System DBSysSi~e Ra~ste inHost  GaussSoft  FDBHgrS i~e SyngapourHost  Jakar taSoft  FDBCI tDescription efFDBMgrFDBMgr is  a software componentwhich is deployed on host Gauss.FDBM~r ~ns as is a server and adaemon and is written in C(ANSI)and JAVA.. .
.
.
.
.
Figure 2i Presentation SampleThe next sections present he different ypesof knowledge used by PRESENTOR to define andconstruct the presentation of Figure 2.3 Exemplar  L ib raryAn exemplar (Rambow et al, 1998; White andCaldwell, 1998) is a type of schema (McKeown,1985; Rambow and Korelsky, 1992) whose pur-pose is to determine, for a given presentationrequest, the general specification of the presen-tation regarding its macro-structure, its con-tent and its format.
One main distinction be-tween the exemplars of PRESENTOR and ordi-nary schemas is that they integrate conceptual,syntactic and surface form specifications of thecontent, and can be used for both deep and shal-low generation, and combining both generalityand simplicity.
An exemplar can contain dif-719ferent type of specifications, each of which isoptional except for the name of the exemplar:?
Name: Specification of the name of the ex-emplar.?
Parameters: Specification of the argumentspassed in parameters when the exemplar iscalled.?
Conditions of evaluation: Specification ofthe conditions under which the exemplar canbe evaluated.?
Data: Specification of domain data instan-tiated at run-time.?
Constituency: Specification of the presenta-tion constituency by references to other exem-plars.?
Rhetorical dependencies: Specification ofthe rhetorical relations between constituents.
\]?
Features specification: Open list of features(names and values) associated with an elementof presentation.
These features can be used inother knowledge bases such as grammar, lexi-con, etc.?
Formatting specification: Specification ofHTML tags associated with the presentationstructure constructed from the exemplar.?
Conceptual content specification: Specifica-tion of content at the conceptual level.?
Syntactic content specification: Specifica-tion of content at the lexico-syntactic level.?
Surface form content specification: Specifi-cation of the content (any level of granularity)at the surface level.?
Documentation: Documentation of the ex-emplar for maintenance purposes.Once defined, exemplars can be clustered intoreusable libraries.Figure 3 illustrates an exemplar, soft-description, to generate the textual descrip-tion of Figure 2, Here, the description for agiven object $SOFT, referring to a piece of soft-ware, is decomposed into seven constituents ointroduce a title, two paragraph breaks, andsome specifications for the software type, itshost(s), its usage(s) and its implementation lan- \]guage(s).
In this specification, all the con-stituents are evaluated.
The result of thisevaluation creates even presentation segmentsadded as constituents (daughters) to the cur-rent growth point in the presentation structurebeing generated.
Referential identifiers (ref 1,ref2, ..., ref4) assigned to some constituentsare also being used to specify a rhetorical rela-tion of elaboration and to specify syntactic on-junction.Exemplar:\[Name: soft-descriptionParam: \[ $SOFT \]Const: \[ AND\[ title ( $SOFT )paragraph-break ( )object-type ( SSOFT ) : reflsoft-host ( $SOFT ) : ref2paragraph-break ( )soft-usage ( $SOFT ) : ref3soft-language ( $SOFT ) : ref4\]Rhet: \[ ( refl R-ELABORATION ref2 )( ref3 CONJUNCTION ref4 ) \]Desc: \[ Describe the software \]Figure 3: Exemplar for Software DescriptionFigure 4 illustrates an exemplar specifyingthe conceptual specification of an object type.The notational convention used in this paper isto represent variables with labels preceded bya $ sign, the concepts are upper case Englishlabels preceded by a # sign, and conceptual re-lations are lower case English labels precededby a # sign.
In Figure 4 the conceptual contentspecification is used to built a conceptual treestructure indicating the state concept #HAS-TYPE has as an object $OBJECT which isof type $TYPE.
This variable is initialized bya call to the function ik rs .getData(  $OBJECT#type ) defined for the application domain.Exemplar:\[Name: object-typeParam: \[ $OBJECT \]Var: \[ STYPE = ikrs.getData( $OBJECT #type ) \]Concept: \[#HAS-TYPE (#object $OBJECT#type $TYPE)\]Desc: \[ Describe the object type \]Figure 4: Exemplar for Object Type4 Conceptua l  D ic t ionaryPRESENTOR uses  a conceptual dictionary forthe mapping of conceptual domain-specific rep-720resentations to linguistic domain-indepenentrepresentations.
This mapping (transition) hasthe advantage that the modules processingconceptual representations can be unabashedlydomain-specific, which is necessary in applica-tions, since a broad-coverage implementation fa domain-independent theory of conceptual rep-resentations and their mapping to linguistic rep-resentations i  still far from being realistic.Linguistic representations found in the con-ceptual dictionary are deep-syntactic structures(DSyntSs) which are conform to those thatREALPRO (Lavoie and Rambow, 1997), PRE-SENTOR'S sentence realizer, takes as input.
Themain characteristics of a deep-syntactic struc-ture, inspired in this form by I. Mel'~uk'sMeaning-Text Theory (Mel'~uk, 1988), are thefollowing:?
The DSyntS is an unordered ependencytree with labeled nodes and labeled arcs.?
The DSyntS is lexicalized, meaning thatthe nodes are labeled with lexemes (uninflectedwords) from the target language.?
The DSyntS is a syntactic representation,meaning that the arcs of the tree are labeledwith syntactic relations uch as "subject" (rep-resented in DSyntSs as I), rather than concep-tual or semantic relations uch as "agent".?
The DSyntS is a deep syntactic represen-tation, meaning that only meaning-bearing lex-emes are represented, and not function words.Conceptual representations (ConcSs) used byPRESENTOR are inspired by the characteristicsof the DSyntSs in the sense that both typesof representations are unordered tree structureswith labelled arcs specifying the roles (concep-tual or syntactic) of each node.
However, ina ConcS, concepts are used instead of lexemes,and conceptual relations are used instead of re-lations.
The similairies of the representions forthe ConcSs and DSyntSs facilitate their map-ping and the sharing of the functions that pro-cess them.Figure 5 illustrates a simple case of lexicaliza-tion for the state concept #HAS-TYPE  intro-duced in the exemplar defined in Figure 4.
If thegoal is a sentence, BE1 is used with $OBJECTas its first (I) syntactic actant and $TYPE asits second (II).
If the goal is a noun phrase,a complex noun phrase is used (e.g., softwarecomponent FDBMgr).
The lexicalization can becontrolled by the user by modifying the appro-priate lexical entries.Lexicalization-rule:\[Concept: #HAS-TYPECases: \[ Case:\[#HAS-TYPE (#object  $OBJ#type $TYPE)\]<-->\[ BE1 ( I $OBJI I  $T~E ) \]{ \[goal:S\]\[\]Case :\[#HAS-TYPE (#object $0BJ#type #TYPE)\]<-->\[ #TYPE ( APPEND $0BJECT ) \]\]\[goal : NP\]\[\]Figure 5: Conceptual Dictionary Entry5 Rhetor i ca l  D ic t ionaryPRESENTOR uses a rhetorical dictionary to in-dicate how to express the rhetorical relationsconnecting clauses using syntax and/or lexicalmeans (cue words).
Figure 6 shows a rule usedto combine clauses linked by an elaboration re-lationship.
This rule combines clauses FDBMgris a software component and FDBMgr is de-ployed on host Gauss into FDBMgr is a softwarecomponent which is deployed on host Gauss.Rhetorical-rule:\[Relation: R-ELABORATIONCases: \[Case:\[ R-ELABORATION( nucleus $V ( I $X II $Y )satellite $Z ( I $l ) \]<-->\[ $V ( I SX I I  SY ( ATTR SZ ) ) \]\]Figure 6: Rhetorical Dictionary Entry6 Lex icon  and  L ingu is t i c  GrammarThe lexicon defines different linguistic charac-teristics of lexemes uch as their categories, gov-ernment patterns, morphology, etc., and whichare used for the realization process.
The lin-guistic grammars of PRESENTOR are used totransform a deep-syntactic representation i to721a llnearized list of all the lexemes and punctu-ation marks composing a sentence.
The formatof the declarative lexicon and of the grammarrules is that of the REALPRO realizer, which wediscussed in (Lavoie and Rambow, 1997).
Weomit further discussion here.7 StatusPRESENTOR is currently implemented in Javaand C++,  and has been used with success inprojects in different domains.
We intend to adda declarative specification of formatting style inthe near future.A serious limitation of the current implemen-tation is the hct  that the configurability ofPRESENTOR at the micro-planning level is re-stricted to the lexicalization and the linguisticrealization of rhetorical relations.
Pronominal-ization rules remain hard-coded heuristics in themicro-planner but can be guided by featuresintroduced in the presentation representations.This is problematic since pronominalization isoften domain specific and may require changingthe heuristics when porting a system to a newdomain.CoGenTex has developed a complementaryalternative to PRESENTOR, EXEMPLARS (Whiteand Caldwell, 1998) which gives a better pro-grammatic ontrol to the processing of the rep-resentations that PRESENTOR does.
While EX-EMPLARS focuses on  programmatic extensibil-ity, PRESENTOR fOCUS on declarative represen-tation specification.
Both approaches are com-plementary and work is currently being done inorder to integrate their features.AcknowledgmentsThe work reported in this paper was partiallyfunded by AFRL under contract F30602-92-C-0015 and SBIR F30602-92-C-0124, and by US-AFMC under contract F30602-96-C-0076.
Weare thankful to R. Barzilay, T. Caldwell, J. De-Cristofaro, R. Kittredge, T. Korelsky, D. Mc-Cullough, and M. White for their comments andcriticism made during the development of PRE-SENTOR.ReferencesBarzilay, R., Rainbow, O., McCullough, D, Korel-sky, T., and Lavoie, B.
(1998).
DesignExpert:A Knowledge-Based Tool for Developing System-Wide Properties, In Proceedings of the 9th Inter-national Workshop on Natural Language Genera-tion, Ontario, Canada.Ehrhart, L., Rainbow, O., Webber F., McEnerney,J., and Korelsky, T. (1998) DesignExpert: Devel-oping System-Wide Properties with Knowledge-Based Tools.
Lee Scott Ehrhart, Submitted.Kittredge, R. and Lavoie, B.
(1998).
MeteoCo-gent: A Knowledge-Based Tool For GeneratingWeather Forecast Texts, In Proceedings ofAmer-ican Meteorological Society AI Conference (AMS-98), Phoenix, AZ.Kittredge, R., Korelsky, T. and Rambow, R. (1991).On the Need for Domain Communication K owl-edge, in Computational Intelligence, Vol 7, No4.Lavoie, B., Rainbow, O., and Reiter, E. (1997).
Cus-tomizable Descriptions of Object-Oriented Mod-els, In Proceedings of the Conference on AppliedNatural Language Processing (ANLP'97), Wash-ington, DC.Lavoie, B. and Rainbow, O.
(1997).
RealPro - AFast, Portable Sentence Realizer, In Proceedingsof the Conference on Applied Natural LanguageProcessing (ANLP'97), Washington, DC.Mann, W. and Thompson, S. (1987).
RhetoricalStructure Theory: A Theory of Text Organization,ISI technical report RS-87-190.McKeown, K. (1985).
Text Generation, CambridgeUniversity Press.Mel'~uk, I.
A.
(1988).
Dependency Syntax: Theoryand Practice.
State University of New York Press,New York.Rambow, O., Caldwell, D. E., Lavoie, B., McCul-lough, D., and White, M. (1998).
Text Planning:Communicative Intentions and the Conventional-ity of Linguistic Communication.
I  preparation.Rainbow, O. and Korelsky, T. (1992).
Applied TextGeneration, In Third Conference on Applied Nat-ural Language Processing, pages 40-47, Trento,Italy.Reiter, E. (1994).
Has a Consensus NL GenerationArchitecture Appeared, and is it Psycholinguisti-tally Plausible?
In Proceedings of the 7th Inter-national Workshop on Natural Language Genera-tion, pages 163-170, Maine.Rubinoff, R. (1992).
Integrating Text Planning andLinguistic Choice by Annotating Linguistic Struc-tures, In Aspects of Automated Natural LanguageGeneration, pages 45-56, Trento, Italy.White, M. and Caldwell, D. E. (1998).
EXEM-PLARS: A Practical Exensible Framework forReal-Time Text Generation, In Proceedings of the9th International Workshop on Natural LanguageGeneration, Ontario, Canada.722
