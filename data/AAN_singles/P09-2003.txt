Proceedings of the ACL-IJCNLP 2009 Conference Short Papers, pages 9?12,Suntec, Singapore, 4 August 2009.c?2009 ACL and AFNLPAn Earley Parsing Algorithm for Range Concatenation GrammarsLaura KallmeyerSFB 441Universit?at T?ubingen72074 T?ubingen, Germanylk@sfs.uni-tuebingen.deWolfgang MaierSFB 441Universit?at T?ubingen72074 T?ubingen, Germanywo.maier@uni-tuebingen.deYannick ParmentierCNRS - LORIANancy Universit?e54506 Vand?uvre, Franceparmenti@loria.frAbstractWe present a CYK and an Earley-stylealgorithm for parsing Range Concatena-tion Grammar (RCG), using the deduc-tive parsing framework.
The characteris-tic property of the Earley parser is that weuse a technique of range boundary con-straint propagation to compute the yieldsof non-terminals as late as possible.
Ex-periments show that, compared to previ-ous approaches, the constraint propagationhelps to considerably decrease the numberof items in the chart.1 IntroductionRCGs (Boullier, 2000) have recently received agrowing interest in natural language processing(S?gaard, 2008; Sagot, 2005; Kallmeyer et al,2008; Maier and S?gaard, 2008).
RCGs gener-ate exactly the class of languages parsable in de-terministic polynomial time (Bertsch and Neder-hof, 2001).
They are in particular more pow-erful than linear context-free rewriting systems(LCFRS) (Vijay-Shanker et al, 1987).
LCFRS isunable to describe certain natural language phe-nomena that RCGs actually can deal with.
Oneexample are long-distance scrambling phenom-ena (Becker et al, 1991; Becker et al, 1992).Other examples are non-semilinear constructionssuch as case stacking in Old Georgian (Michaelisand Kracht, 1996) and Chinese number names(Radzinski, 1991).
Boullier (1999) shows thatRCGs can describe the permutations occurringwith scrambling and the construction of Chinesenumber names.Parsing algorithms for RCG have been intro-duced by Boullier (2000), who presents a di-rectional top-down parsing algorithm using pseu-docode, and Barth?elemy et al (2001), who add anoracle to Boullier?s algorithm.
The more restrictedclass of LCFRS has received more attention con-cerning parsing (Villemonte de la Clergerie, 2002;Burden and Ljungl?of, 2005).
This article proposesnew CYK and Earley parsers for RCG, formulat-ing them in the framework of parsing as deduction(Shieber et al, 1995).
The second section intro-duces necessary definitions.
Section 3 presents aCYK-style algorithm and Section 4 extends thiswith an Earley-style prediction.2 PreliminariesThe rules (clauses) of RCGs1rewrite predicatesranging over parts of the input by other predicates.E.g., a clause S(aXb)?
S(X) signifies that S istrue for a part of the input if this part starts with ana, ends with a b, and if, furthermore, S is also truefor the part between a and b.Definition 1.
A RCG G = ?N,T, V, P, S?
con-sists of a) a finite set of predicates N with an arityfunction dim: N ?
N \ {0} where S ?
N isthe start predicate with dim(S) = 1, b) disjoint fi-nite sets of terminals T and variables V , c) a finiteset P of clauses ?0?
?1.
.
.
?m, where m ?
0and each of the ?i, 0 ?
i ?
m, is a predicate ofthe form Ai(?1, .
.
.
, ?dim(Ai)) with Ai?
N and?j?
(T ?
V )?for 1 ?
j ?
dim(Ai).Central to RCGs is the notion of ranges onstrings.Definition 2.
For every w = w1.
.
.
wnwithwi?
T (1 ?
i ?
n), we define a) Pos(w) ={0, .
.
.
, n}.
b) ?l, r?
?
Pos(w) ?
Pos(w) withl ?
r is a range in w. Its yield ?l, r?
(w) is thesubstring wl+1.
.
.
wr.
c) For two ranges ?1=?l1, r1?, ?2= ?l2, r2?
: if r1= l2, then ?1?
?2=?l1, r2?
; otherwise ?1?
?2is undefined.
d) A vec-tor ?
= (?x1, y1?, .
.
.
, ?xk, yk?)
is a range vectorof dimension k in w if ?xi, yi?
is a range in w for1 ?
i ?
k.
?
(i).l (resp.
?
(i).r) denotes then the1In this paper, by RCG, we always mean positive RCG,see Boullier (2000) for details.9first (resp.
second) component of the ith elementof ?, that is xi(resp.
yi).In order to instantiate a clause of the grammar,we need to find ranges for all variables in theclause and for all occurrences of terminals.
Forconvenience, we assume the variables in a clauseand the occurrences of terminals to be equippedwith distinct subscript indices, starting with 1 andordered from left to right (where for variables,only the first occurrence is relevant for this order).We introduce a function ?
: P ?
N that gives themaximal index in a clause, and we define ?
(c, x)for a given clause c and x a variable or an occur-rence of a terminal as the index of x in c.Definition 3.
An instantiation of a c ?
P with?
(c) = j w.r.t.
to some string w is given by arange vector ?
of dimension j.
Applying ?
toa predicate A(~?)
in c maps all occurrences ofx ?
(T ?
V ) with ?
(c, x) = i in ~?
to ?(i).
Ifthe result is defined (i.e., the images of adjacentvariables can be concatenated), it is called an in-stantiated predicate and the result of applying ?
toall predicates in c, if defined, is called an instanti-ated clause.We also introduce range constraint vectors, vec-tors of pairs of range boundary variables togetherwith a set of constraints on these variables.Definition 4.
Let Vr= {r1, r2, .
.
. }
be a setof range boundary variables.
A range constraintvector of dimension k is a pair ?~?, C?
where a)~?
?
(V2r)k; we define Vr(~?)
as the set of rangeboundary variables occurring in ~?.
b) C is a setof constraints crthat have one of the followingforms: r1= r2, k = r1, r1+ k = r2,k ?
r1, r1?
k, r1?
r2or r1+ k ?
r2for r1, r2?
Vr(~?)
and k ?
N.We say that a range vector ?
satisfies a rangeconstraint vector ?
?, C?
iff ?
and ?
are of the samedimension k and there is a function f : Vr?
Nthat maps ?
(i).l to ?
(i).l and ?
(i).r to ?
(i).r forall 1 ?
i ?
k such that all constraints in C are sat-isfied.
Furthermore, we say that a range constraintvector ?
?, C?
is satisfiable iff there exists a rangevector ?
that satisfies it.Definition 5.
For every clause c, we define itsrange constraint vector ?
?, C?
w.r.t.
aw with |w| =n as follows: a) ?
has dimension ?
(c) and allrange boundary variables in ?
are pairwise differ-ent.
b) For all ?r1, r2?
?
?
: 0 ?
r1, r1?
r2,r2?
n ?
C. For all occurrences x of terminalsin cwith i = ?
(c, x): ?
(i).l+1 = ?
(i).r ?
C. Forall x, y that are variables or occurrences of termi-nals in c such that xy is a substring of one of thearguments in c: ?(?
(c, x)).r = ?(?
(c, y)).l ?
C.These are all constraints in C.The range constraint vector of a clause c cap-tures all information about boundaries forming arange, ranges containing only a single terminal,and adjacent variables/terminal occurrences in c.An RCG derivation consists of rewriting in-stantiated predicates applying instantiated clauses,i.e.
in every derivation step ?1?w?2, we re-place the lefthand side of an instantiated clausewith its righthand side (w.r.t.
a word w).
The lan-guage of an RCG G is the set of strings that canbe reduced to the empty word: L(G) = {w |S(?0, |w|?)+?G,w?
}.The expressive power of RCG lies beyond mildcontext-sensitivity.
As an example, consider theRCG from Fig.
3 that generates a language that isnot semilinear.For simplicity, we assume in the following with-out loss of generality that empty arguments (?
)occur only in clauses whose righthand sides areempty.23 Directional Bottom-Up Chart ParsingIn our directional CYK algorithm, we move a dotthrough the righthand side of a clause.
We there-fore have passive items [A, ?]
where A is a pred-icate and ?
a range vector of dimension dim(A)and active items.
In the latter, while traversingthe righthand side of the clause, we keep a recordof the left and right boundaries already foundfor variables and terminal occurrences.
This isachieved by subsequently enriching the range con-straint vector of the clause.
Active items have theform [A(~x)?
?
?
?, ?
?, C?]
with A(~x)?
??
aclause, ??
6= ?, ?
(A(~x ?
??))
= j and ?
?, C?a range constraint vector of dimension j.
We re-quire that ?
?, C?
be satisfiable.32Any RCG can be easily transformed into an RCG satis-fying this condition: Introduce a new unary predicate Epswith a clause Eps(?)
?
?.
Then, for every clause c withrighthand side not ?, replace every argument ?
that occurs inc with a new variable X (each time a distinct one) and addthe predicate Eps(X) to the righthand side of c.3Items that are distinguished from each other only by a bi-jection of the range variables are considered equivalent.
I.e.,if the application of a rule yields a new item such that anequivalent one has already been generated, this new one isnot added to the set of partial results.10Scan:[A, ?]A(~x)?
?
?
P with instantiation ?such that ?
(A(~x)) = A(?)Initialize:[A(~x)?
?
?, ??,C?]A(~x)?
?
?
P withrange constraint vector??,C?,?
6= ?Complete:[B,?B],[A(~x)?
?
?B(x1...y1, ..., xk...yk)?, ??,C?][A(~x)?
?B(x1...y1, ..., xk...yk) ?
?, ??,C??
]where C?= C ?
{?B(j).l = ?(?
(xj)).l, ?B(j).r =?(?
(yj)).r | 1 ?
j ?
k}.Convert:[A(~x)?
?
?, ??,C?
][A, ?]A(~x)?
?
?
P withan instantiation ?
thatsatisfies ??,C?,?
(A(~x)) = A(?
)Goal: [S, (?0, n?
)]Figure 1: CYK deduction rulesThe deduction rules are shown in Fig.
1.
Thefirst rule scans the yields of terminating clauses.Initialize introduces clauses with the dot on theleft of the righthand side.
Complete moves the dotover a predicate provided a corresponding passiveitem has been found.
Convert turns an active itemwith the dot at the end into a passive item.4 The Earley AlgorithmWe now add top-down prediction to our algorithm.Active items are as above.
Passive items havean additional flag p or c depending on whetherthe item is predicted or completed, i.e., they ei-ther have the form [A, ?
?, C?, p] where ?
?, C?
is arange constraint vector of dimension dim(A), orthe form [A, ?, c] where ?
is a range vector of di-mension dim(A).Initialize:[S, ?
(?r1, r2?
), {0 = r1, n = r2}?, p]Predict-rule:[A, ?
?,C?, p][A(x1.
.
.
y1, .
.
.
, xk.
.
.
yk)?
?
?, ??
?, C??
]where ??
?, C??
is obtained from the range constraint vectorof the clause A(x1.
.
.
y1, .
.
.
, xk.
.
.
yk) ?
?
by taking allconstraints from C, mapping all ?
(i).l to ??(?
(xi)).l andall ?
(i).r to ??(?
(yi)).r, and then adding the resulting con-straints to the range constraint vector of the clause.Predict-pred:[A(...)?
?
?B(x1...y1, ..., xk...yk)?, ??,C?
][B, ??
?, C?
?, p]where ??
(i).l = ?(?
(xi)).l, ??
(i).r = ?(?
(yi)).r for all1 ?
i ?
k and C?= {c | c ?
C, c contains only rangevariables from ??
}.Scan:[A, ?
?,C?, p][A, ?, c]A(~x)?
?
?
P with aninstantiation ?
satisfying ?
?,C?such that ?
(A(~x)) = A(?
)Figure 2: Earley deduction rulesThe deduction rules are listed in Fig.
2.
Theaxiom is the prediction of an S ranging over theentire input (initialize).
We have two predict op-erations: Predict-rule predicts active items withthe dot on the left of the righthand side, for agiven predicted passive item.
Predict-pred pre-dicts a passive item for the predicate following thedot in an active item.
Scan is applied whenever apredicted predicate can be derived by an ?-clause.The rules complete and convert are the ones fromthe CYK algorithm except that we add flags c tothe passive items occurring in these rules.
Thegoal is again [S, (?0, n?
), c].To understand how this algorithm works, con-sider the example in Fig.
3.
The crucial property ofthis algorithm, in contrast to previous approaches,is the dynamic updating of a set of constraints onrange boundaries.
We can leave range boundariesunspecified and compute their values in a more in-cremental fashion instead of guessing all ranges ofa clause at once at prediction.4For evaluation, we have implemented a direc-tional top-down algorithm where range bound-aries are guessed at prediction (this is essentiallythe algorithm described in Boullier (2000)), andthe new Earley-style algorithm.
The algorithmswere tested on different words of the languageL = {a2n|n ?
0}.
Table 1 shows the numberof generated items.Word Earley TDa215 21a430 55a855 164a959 199Word Earley TDa16100 539a30155 1666a32185 1894a64350 6969Table 1: Items generated by both algorithmsClearly, range boundary constraint propagationincreases the amount of information transportedin single items and thereby decreases considerablythe number of generated items.5 Conclusion and future workWe have presented a new CYK and Earley pars-ing algorithms for the full class of RCG.
The cru-cial difference between previously proposed top-down RCG parsers and the new Earley-style algo-rithm is that while the former compute all clauseinstantiations during predict operations, the latter4Of course, the use of constraints makes comparisons be-tween items more complex and more expensive which meansthat for an efficient implementation, an integer-based repre-sentation of the constraints and adequate techniques for con-straint solving are required.11Grammar for {a2n|n > 0}: S(XY )?
S(X)eq(X,Y ), S(a1)?
?, eq(a1X, a2Y )?
eq(X,Y ), eq(a1, a2)?
?Parsing trace for w = aa:Item Rule1 [S, ?
(?r1, r2?
), {0 = r1, r1?
r2, 2 = r2}?, p] initialize2 [S(XY )?
?S(X)eq(X,Y ), {X.l ?
X.r,X.r = Y.l, Y.l ?
Y.r, 0 = X.l, 2 = Y.r}] predict-rule from 13 [S, ?
(?r1, r2?
), {0 = r1, r1?
r2}?, p] predict-pred from 24 [S, (?0, 1?
), c] scan from 35 [S(XY )?
?S(X)eq(X,Y ), {X.l ?
X.r,X.r = Y.l, Y.l ?
Y.r, 0 = X.l, }] predict-rule from 36 [S(XY )?
S(X) ?
eq(X,Y ), {.
.
.
, 0 = X.l, 2 = Y.r, 1 = X.r}] complete 2 with 47 [S(XY )?
S(X) ?
eq(X,Y ), {X.l ?
X.r,X.r = Y.l, Y.l ?
Y.r, 0 = X.l, 1 = X.r}] complete 5 with 48 [eq, ?
(?r1, r2?, ?r3, r4?
), {r1?
r2, r2= r3, r3?
r4, 0 = r1, 2 = r4, 1 = r2}?]
predict-pred from 69 [eq(a1X, a2Y )?
?eq(X,Y ), {a1.l + 1 = a1.r, a1.r = X.l,X.l ?
X.r,a2.l + 1 = a2.r, a2.r = Y.l, Y.l ?
Y.r,X.r = a2.l, 0 = a1.l, 1 = X.r, 2 = Y.r}] predict-rule from 8. .
.10 [eq, (?0, 1?, ?1, 2?
), c] scan 811 [S(XY )?
S(X)eq(X,Y )?, {.
.
.
, 0 = X.l, 2 = Y.r, 1 = X.r, 1 = Y.l}] complete 6 with 1012 [S, (?0, 2?
), c] convert 11Figure 3: Trace of a sample Earley parseavoids this using a technique of dynamic updatingof a set of constraints on range boundaries.
Exper-iments show that this significantly decreases thenumber of generated items, which confirms thatrange boundary constraint propagation is a viablemethod for a lazy computation of ranges.The Earley parser could be improved by allow-ing to process the predicates of the righthand sidesof clauses in any order, not necessarily from leftto right.
This way, one could process predicateswhose range boundaries are better known first.
Weplan to include this strategy in future work.ReferencesFranc?ois Barth?elemy, Pierre Boullier, Philippe De-schamp, and?Eric de la Clergerie.
2001.
Guidedparsing of Range Concatenation Languages.
In Pro-ceedings of ACL, pages 42?49.Tilman Becker, Aravind K. Joshi, and Owen Rambow.1991.
Long-distance scrambling and tree adjoininggrammars.
In Proceedings of EACL.Tilman Becker, Owen Rambow, and Michael Niv.1992.
The Derivationel Generative Power of FormalSystems or Scrambling is Beyond LCFRS.
Tech-nical Report IRCS-92-38, Institute for Research inCognitive Science, University of Pennsylvania.E.
Bertsch and M.-J.
Nederhof.
2001.
On the complex-ity of some extensions of RCG parsing.
In Proceed-ings of IWPT 2001, pages 66?77, Beijing, China.Pierre Boullier.
1999.
Chinese numbers, mix, scram-bling, and range concatenation grammars.
In Pro-ceedings of EACL, pages 53?60, Bergen, Norway.Pierre Boullier.
2000.
Range concatenation grammars.In Proceedings of IWPT 2000, pages 53?64, Trento.H?akan Burden and Peter Ljungl?of.
2005.
Parsing lin-ear context-free rewriting systems.
In Proceedingsof IWPT 2005, pages 11?17, Vancouver.Laura Kallmeyer, Timm Lichte, Wolfgang Maier, Yan-nick Parmentier, and Johannes Dellert.
2008.
De-veloping an MCTAG for German with an RCG-based parser.
In Proceedings of LREC-2008, Mar-rakech, Morocco.Wolfgang Maier and Anders S?gaard.
2008.
Tree-banks and mild context-sensitivity.
In Proceedingsof the 13th Conference on Formal Grammar 2008,Hamburg, Germany.Jens Michaelis and Marcus Kracht.
1996.
Semilinear-ity as a Syntactic Invariant.
In Logical Aspects ofComputational Linguistics, Nancy.Daniel Radzinski.
1991.
Chinese number-names, treeadjoining languages, and mild context-sensitivity.Computational Linguistics, 17:277?299.Beno?
?t Sagot.
2005.
Linguistic facts as predicates overranges of the sentence.
In Proceedings of LACL 05,number 3492 in Lecture Notes in Computer Science,pages 271?286, Bordeaux, France.
Springer.Stuart M. Shieber, Yves Schabes, and Fernando C. N.Pereira.
1995.
Principles and implementation ofdeductive parsing.
Journal of Logic Programming,24(1& 2):3?36.Anders S?gaard.
2008.
Range concatenation gram-mars for translation.
In Proceedings of COLING,Manchester, England.K.
Vijay-Shanker, David Weir, and Aravind Joshi.1987.
Characterising structural descriptions used byvarious formalisms.
In Proceedings of ACL.Eric Villemonte de la Clergerie.
2002.
Parsing mildlycontext-sensitive languages with thread automata.In Proceedings of COLING, Taipei, Taiwan.12
