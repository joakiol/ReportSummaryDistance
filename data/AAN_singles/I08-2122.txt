TOWARDS DATA AND GOAL ORIENTED ANALYSIS:TOOL INTER-OPERABILITY AND COMBINATORIALCOMPARISONYoshinobu Kano1      Ngan Nguyen1      Rune S?tre1       Kazuhiro Yoshida1Keiichiro Fukamachi1      Yusuke Miyao1       Yoshimasa Tsuruoka3Sophia Ananiadou2,3        Jun?ichi Tsujii1,2,31Department of Computer Science, University of TokyoHongo 7-3-1, Bunkyo-ku, Tokyo 113-0033 Tokyo2School of Computer Science, University of ManchesterPO Box 88, Sackville St, MANCHESTER M60 1QD, UK3NaCTeM (National Centre for Text Mining), Manchester Interdisciplinary Biocentre,University of Manchester, 131 Princess St, MANCHESTER M1 7DN, UK{kano,nltngan,satre,kyoshida,keif,yusuke,tsujii}@is.s.u-tokyo.ac.jp{yoshimasa.tsuruoka,sophia.ananiadou}@manchester.ac.ukAbstractRecently, NLP researches have advancedusing F-scores, precisions, and recalls withgold standard data as evaluation measures.However, such evaluations cannot capturethe different behaviors of varying NLPtools or the different behaviors of a NLPtool that depends on the data and domain inwhich it works.
Because an increasingnumber of tools are available nowadays, ithas become increasingly important to graspthese behavioral differences, in order toselect a suitable set of tools, which forms acomplex workflow for a specific purpose.In order to observe such differences, weneed to integrate available combinations oftools into a workflow and to compare thecombinatorial results.
Although genericframeworks like UIMA (UnstructuredInformation Management Architecture)provide interoperability to solve thisproblem, the solution they provide is onlypartial.
In order for truly interoperabletoolkits to become a reality, we also needsharable and comparable type systems withan automatic combinatorial comparisongenerator, which would allow systematiccomparisons of available tools.
In thispaper, we describe such an environment,which we developed based on UIMA, andwe show its feasibility through an exampleof a protein-protein interaction (PPI)extraction system.1 IntroductionRecently, an increasing number of TM/NLP toolssuch as part-of-speech (POS) taggers (Tsuruoka etal., 2005), named entity recognizers (NERs)(Settles, 2005) syntactic parsers (Hara et al, 2005)and relation or event extractors (ERs) have beendeveloped.
Nevertheless, it is still very difficult tointegrate independently developed tools into anaggregated application that achieves a specifictask.
The difficulties are caused not only bydifferences in programming platforms anddifferent input/output data formats, but also by thelack of higher level interoperability amongmodules developed by different groups.859UIMA, Unstructured Information ManagementArchitecture (Lally and Ferrucci, 2004), which wasoriginally developed by IBM and has recentlybecome an open project in OASIS and Apache,provides a promising framework for toolintegration.
Although it has a set of usefulfunctionalities, UIMA only provides a genericframework, thus it requires a user community todevelop their own platforms with a set of actualsoftware modules.
A few attempts have alreadybeen made to establish platforms, e.g.
the CMUUIMA component repository 1 , GATE(Cunningham et al, 2002) with its UIMAinteroperability layer, etc.However, simply wrapping existing modules tobe UIMA compliant does not offer a completesolution.
Most of TM/NLP tasks are composite innature, and can only be solved by combiningseveral modules.
Users need to test a large numberof combinations of tools in order to pick the mostsuitable combination for their specific task.Although types and type systems are the onlyway to represent meanings in the UIMAframework, UIMA does not provide any specifictypes, except for a few purely primitive types.
Inthis paper, we propose a way to design sharabletype systems.
A sharable type system designed inthis way can provide the interoperability betweenindependently developed tools with fewer losses ininformation, thus allowing for the combinations oftools and comparisons on these combinations.We show how our automatic comparisongenerator works based on a type system designed inthat way.
Taking the extraction of protein-protein1 http://uima.lti.cs.cmu.edu/interaction (PPI) as a typical example of acomposite task, we illustrate how our platformhelps users to observe the differences betweentools and to construct a system for their own needs.2 Motivation and Background2.1 Goal and Data Oriented Evaluation,Module Selection and Inter-operabilityThere are standard evaluation metrics for NLPmodules such as precision, recall and F-value.
Forbasic tasks like sentence splitting, POS tagging,and named-entity recognition, these metrics can beestimated using existing gold-standard test sets.Conversely, accuracy measurements based onthe standard test sets are sometimes deceptive,since its accuracy may change significantly inpractice, depending on the types of text and theactual tasks at hand.
Because these accuracymetrics do not take into account the importance ofthe different types of errors to any particularapplication, the practical utility of two systemswith seemingly similar levels of accuracy may infact differ significantly.
To users and developersalike, a detailed examination of how systemsperform (on the text they would like to process) isoften more important than standard metrics andtest sets.
Naturally, far greater weight is placed inmeasuring the end-to-end performance of acomposite system than in measuring theperformance of the individual components.In reality, because the selection of modulesusually affects the performance of the entiresystem, it is crucial to carefully select modules thatare appropriate for a given task.
This is the mainreason for having a collection of interoperableTOOL-SPECIFIC TYPESPennPOSPenn verb1 ?
?POStcas.uima.Annotation-begin: int  -end: intSyntacticAnnotation SemanticAnnotationSentence Phrase Token NamedEntity Relation-ent: FSArray<NamedEntity>POSToken-pos: POSRichTokenuima.jcas.cas.TOPUnknownPOS-base: String-posType: StringToolATokenVerb Noun ?..ToolBPOSTokenProteinToolCProteinProteinProteinInteractionToolDPPIFigure 1.
Part of our type system860modules.
We need to show how the ultimateperformance will be affected by the selection ofdifferent modules and show the best combinationof modules in terms of the performance of thewhole aggregated system for the task at hand.Since the number of possible combinations ofcomponent modules is typically large, the systemhas to be able to enumerate and execute themsemi-automatically.
This requires a higher level ofinteroperability of individual modules than justwrapping them for UIMA.2.2 UIMA2.2.1 CAS and Type SystemThe UIMA framework uses the ?stand-offannotation?
style (Ferrucci et al, 2006).
The rawtext in a document is kept unchanged during theanalysis process, and when the processing of thetext is performed, the result is added as new stand-off annotations with references to their positions inthe raw text.
A Common Analysis Structure (CAS)maintains a set of these annotations, which in itselfare objects.
The annotation objects in a CASbelong to types that are defined separately in ahierarchical type system.
The features of anannotation2  object have values that are typed aswell.2.2.2 Component and CapabilityEach UIMA Component has the capabilityproperty which describes what types of objects thecomponent may take as the input and what types ofobjects it produces as the output.
For example, anamed entity recognizer detects named entities intools.
Types should be defined in a distinct and2 In the UIMA framework, Annotation is a base type whichhas begin and end offset values.
In this paper we call anyobjects (any subtype of TOP) as annotations.the text and outputs annotation objects of the typeNamedEntity.It is possible to deploy any UIMA component asa SOAP web service, so that we can combine aremote component on a web service with the localcomponent freely inside a UIMA-based system.3 Integration Platform and Comparators3.1 Sharable and Comparable Type SystemAlthough UIMA provides a set of usefulfunctionalities for an integration platform ofTM/NLP tools, users still have to develop theactual platform by using these functionalitieseffectively.
There are several decisions for thedesigner to make an integration platform.Determining how to use types in UIMA is acrucial decision.
Our decision is to keep differenttype systems by individual groups as they are, ifnecessary; we require that individual type systemshave to be related through a sharable type system,which our platform defines.
Such a shared typesystem can bridge modules with different typesystems, though the bridging module may losesome information during the translation process.Whether such a sharable type system can bedefined or not is dependent on the nature of eachproblem.
For example, a sharable type system forPOS tags in English can be defined rather easily,since most of POS-related modules (such as POStaggers, shallow parsers, etc.)
more or less followthe well established types defined by the PennTreebank (Marcus et al, 1993) tag set.Figure 1 shows a part of our sharable typesystem.
We deliberately define a highly organizedtype hierarchy as described above.Secondly we should consider that the typesystem may be used to compare a similar sort ofComparable ToolsSentenceDetectorDeepParserNamedEntityRecognizerPOSTaggerPPIExtractorAImedCollectionReaderComparatorEvaluatorTokenizerFigure 2.
PPI system workflow(conceptual)Figure 3.Basic example patternComparable ToolsOpenNLPSentenceDetectorEnju ABNERSteppTaggerUIMATokenizerFigure 4.Complex tool exampleComparable ToolsGENIATaggerOpenNLPSentenceDetectorEnju NERPOSTaggerTokenizerFigure 5.Branch flow patternComparable ToolsOpenNLPS.D.UIMATokenizerEnju ABNERSteppTaggerGENIAS.D.861hierarchical manner.
For example, both tokenizersand POS taggers output an object of type Token,but their roles are different when we assume acascaded pipeline.
We defined Token as asupertvpe, POSToken as subtypes of Token.
Eachtool should have an individual type to make clearwhich tool generated which instance, because eachtool may have a slightly different definition.
Thisis important because the capabilities arerepresented by these types, and the capabilities arethe only attributes which are machine readable.3.2 General Combinatorial Comparisonstem is defined in the previouslytually shows the workflow of ourwhpattern expansion mechanism whichgecases, a single tool can play two ormGeneratorEven if the type sydescribed way, there are still some issues toconsider when comparing tools.
We illustrate theseissues using the PPI workflow that we utilized inour experiments.Figure 2 concepole PPI system.
If we can prepare two or morecomponents for some type of the components inthe workflow (e.g.
two sentence detectors and threePOS taggers), then we can make combinations ofthese tools to form a multiplied number ofworkflow patterns (2x3 = 6 patterns).
See Table 1for the details of UIMA components used in ourexperiments.We made anerates possible workflow patterns automaticallyfrom a user-defined comparable workflow.
Acomparable workflow is a special workflow thatexplicitly specifies which set of componentsshould be compared.
Then, users just need to groupcomparable components (e.g.
ABNER3 and MedT-NER as a comparable NER group) without makingany modifications to the original UIMAcomponents.
This aggregation of comparablecomponents is controlled by our custom workflowcontroller.In someore roles (e.g.
the GENIA Tagger performstokenization, POS tagging, and NER; see Figure4).
It may be possible to decompose the originaltool into single roles, but in most cases it isdifficult and unnatural to decompose such aponent requires two or more inputty4 Experiments and Resultsusing our PPIe have severalcoigure 6 show a part of thecoTable 2.3 In the example figures, ABNER requires Sentence tomake the explanation clearer, though ABNER does notrequire it in actual usage.complex tool.
We designed our comparator todetect possible input combinations automaticallyby the types of previously generated annotations,and the input capability of each posteriorcomponent.
As described in the previous section,the component should have appropriatecapabilities with proper types in order to permitthis detection.When a compes (e.g.
our PPI extractor requires outputs of adeep parser and a protein NER system), therecould be different components used in the priorflow (e.g.
OpenNLP and GENIA sentencedetectors in Figure 5).
Our comparator alsocalculates such cases automatically.OO UO GOO U G AUU 8 89 8We have performed experimentsextraction system as an example (Kano et al,2008).
It is similar to our BioCreative PPI system(S?tre et al, 2006) but differs in that we havedeconstructed the original system into sevendifferent components (Figure 2).As summarized in Table 1, wmparable components and the AImed corpus asthe gold standard data.
In this case, possiblecombination workflow patterns are POSToken for36, PPI for 589, etc.Table 2, 3, 4 and Fmparison result screenshots between thesepatterns on 20 articles from the AImed corpus.
Inthe tables, abbreviations like ?OOG?
stands for aworkflow of O(Sentence) -> O(Token) -Sentencecomparisons (%).Table 3.
Part of Tokencomparisons,precision/recall (%).OOO UOS GOOUUO 87/74 81/68 85/68GUG 74/65 73/65 78/65GGO 92/95 81/84 97/95OGO 100/100 89/88 100/94G 0 0 - 85U9/75 /75 8/70GU 89/75 89/75 88/70GG 92/95 91/95 97/95OG86 - 0 7A 6 6 60 -O - 10 10/100 99/99 00/9481 0 7Table 4.
Part of POSToken comparisons,precision/recall (%)862G(POSToken), where O stands for OpenNLP, Gstands for Genia, U stands for UIMA, etc.When neither of the compared results includethe comparison on Sentencessh%0e gold standard data (AImed in this case), thecomparison results show a similarity of the toolsfor this specific task and data, rather than anevaluation.
Even if we lack an annotated corpus, itis possible to run the tools and compare the resultsin order to understand the characteristics of thetools depending on the corpus and the toolcombinations.Although thows low scores of similarities, Tokens arealmost the same; it means that input sentenceboundaries do not affect tokenizations so much.POSToken similarities drop approximately 0-10100100Fi  6  NER (Protein) comp rison diences in5 Conclusion and Future Workponents,design, which the UIMAfra0gure .
a stribution ofprecisions (x-axis, %) and recalls (y-axis, %).from the similarities in Token; the differToken are mainly apostrophes and punctuations;POSTokens are different because each POStagger uses a slightly different set of tags: normalPenn tagset for Stepp tagger, BioPenn tagset(includes new tags for hyphenation) for GENIAtagger, and an original apostrophe tag forOpenNLP tagger.NLP tasks typically consist of many comand it is necessary to show which set of tools aremost suitable for each specific task and data.Although UIMA provides a general frameworkwith much functionality for interoperability, westill need to build an environment that enables thecombinations and comparisons of tools for aspecific task.The type systemmework does not provide, is one of the mostcritical issues on interoperability.
We have thusproposed a way to design a sharable andcomparable type system.
Such a type system allowsfor the automatic combinations of any UIMAcompliant components and for the comparisons ofthese combinations, when the components haveproper capabilities within the type system.
We areSentence Token POSToken RichToken Protein Phrase PPIGENIA Tagger: Trained on the WSJ, GENIA and PennBioIE corpora (POS).
Uses Maximum Entropy (Bergeret al, 1996) classification, trained on JNLPBA (Kim et al, 2004) (NER).
Trained on GENIA corpus (SentenceSplitter).Enju: HPSG parser with predicate argument structures as well as phrase structures.
Although trained with PennTreebank, it can compute accurate analyses of biomedical texts owing to its method for domain adaptation (Haraet al, 2005).STePP Tagger: Based on probabilistic models, tuned to biomedical text trained by WSJ, GENIA (Kim et al,2003)  and PennBioIE corpora.MedT-NER: Statistical recognizer trained on the JNLPBA data.ABNER: From the University of Wisconsin (Settles, 2005), wrapped by the Center for ComputationalPharmacology at the University of Colorado.Akane++: A new version of the AKANE system (Yakushiji, 2006), trained with SVMlight-TK (Joachims, 1999;Bunescu and Mooney, 2006; Moschitti, 2006) and the AImed Corpus.UIMA Examples: Provided in the Apache UIMA example.
Sentence Splitter and Tokenizer.OpenNLP Tools: Part of the OpenNLP project (http://opennlp.sourceforge.net/), from Apache UIMA examples.AImed Corpus: 225 Medline abstracts with proteins and PPIs annotated (Bunescu and Mooney, 2006).Legend:         Input type(s) required for that tool          Input type(s) required optionally          Output type(s)Table 1.
List of UIMA Components used in our experiment.863preparing to make a portion of the components andservices described in this paper publicly available(http://www-tsujii.is.s.u-tokyo.ac.jp/uima/).The final system shows which combination ofcoor this work includescocknowledgmentse wish to thank Dr. Lawrence Hunter?s textReferencesVincent J. Della Pietra, and StephenITMooney.on."
Editedtcheva, and V.ls andm Lally, Daniel Gruhl, and EdwardRC24122.
(2006).ilistic disambiguation model of ant,e."
MIT Press, (1999): 169-lsser: a tool comparator, using protein-proteini.
"Introduction to the Bio-Entitydicsi180-le Application with the Unstructured Informationl 43,ng a Large Annotated Corpus ofractical.
(2006).okocally tagging genes, proteins, and other entityrsity,ust Part-of-tionUniversity of Tokyo, (2006).mponents has the best score, and also generatescomparative results.
This helps users to grasp thecharacteristics and differences among tools, whichcannot be easily observed by the widely used F-score evaluations only.Future directions fmbining the output of several modules of thesame kind (such as NERs) to obtain better results,collecting other tools developed by other groupsusing the sharable type system, making machinelearning tools UIMA compliant, and making gridcomputing available with UIMA workflows toincrease the entire performance without modifyingthe original UIMA components.AWmining group at the Center for ComputationalPharmacology for discussing with us and makingtheir tools available for this research.
This workwas partially supported by NaCTeM (the UKNational Centre for Text Mining), Grant-in-Aid forSpecially Promoted Research (MEXT, Japan) andGenome Network Project (MEXT, Japan).NaCTeM is jointly funded byJISC/BBSRC/EPSRC.Berger, Adam L.,A.
Della Pietra.
"A maximum entropy approach tonatural language processing."
Comput.
Linguist.
(MPress) 22, no.
1 (1996): 39-71.Bunescu, Razvan, and Raymond"Subsequence Kernels for Relation Extractiby Weiss Y., Scholkopf B. and Platt J., 171-178.Cambridge, MA: MIT Press, (2006).Cunningham, H., D. Maynard, K. BonTablan.
"GATE: A framework and graphicaldevelopment environment for robust NLP tooapplications."
Proceedings of the 40th AnniversaryMeeting of the Association for ComputationalLinguistics.
(2002).Ferrucci, David, AdaEpstein.
"Towards an Interoperability Standard for Textand Multi-Modal Analytics."
IBM Research Report,Hara, Tadayoshi, Yusuke Miyao, and Jun'ichi Tsujii.
"Adapting a probabHPSG parser to a new domain."
Edited by Dale RoberWong Kam-Fai, Su Jian and Yee Oi.
Natural LanguagProcessing IJCNLP 2005.
Jeju Island, Korea: Springer-Verlag, (2005).
199-210.Joachims, Thorsten.
"Making large-scale support vectormachine learning practical184.Kano, Yoshinobu, et al "Filling the gaps between tooand uinteraction as an example."
Proceedings of The PacificSymposium on Biocomputing (PSB).
Hawaii, USA, Toappear, (2008).Kim, Jin-Dong, Tomoko Ohta, Yoshimasa Tsuruoka,and Yuka TateisRecognition Task at JNLPBA."
Proceedings of theInternational Workshop on Natural LanguageProcessing.
Geneva, Switzerland, (2004).
70-75.Kim, Jin-Dong, Tomoko Ohta, Yuka Teteisi, anJun'ichi Tsujii.
"GENIA corpus - a semanticallyannotated corpus for bio-textmining."
Bioinformat(Oxford University Press) 19, no.
suppl.
1 (2003):i182.Lally, Adam, and David Ferrucci.
"Building anExampManagement Architecture."
IBM Systems Journano.
3 (2004): 455-475.Marcus, Mitchell P., Beatrice Santorini, and Mary AnnMarcinkiewicz.
"BuildiEnglish: The Penn Treebank."
ComputationalLinguistics 19, no.
2 (1993): 313-330.Moschitti, Alessandro.
"Making Tree Kernels Pfor Natural Language Learning."
EACLS?tre, Rune, Kazuhiro Yoshida, Akane Yakushiji,Yusuke Miyao, Yuichiroh Matsubayashi, and TomOhta.
"AKANE System: Protein-Protein InteractionPairs in BioCreAtIvE2 Challenge."
Proceedings of theSecond BioCreative Challenge Evaluation Workshop.
(2007).Settles, B.
"ABNER: an open source tool forautomatinames in text."
Bioinformatics (Oxford UnivePress) 21, no.
14 (2005): 3191-3192.Tsuruoka, Yoshimasa, Yuka Tateishi, Jin-Dong Kimand Tomoko Ohta.
"Developing a RobSpeech Tagger for Biomedical Text."
Advances inInformatics - 10th Panhellenic Conference onInformatics.
Volos, Greece, (2005).
382-392.Yakushiji, Akane.
"Relation Information ExtracUsing Deep Syntactic Analysis."
PhD Thesis,864
