Us ing  Higher-Order Logic Programming for SemanticInterpretation of Coordinate ConstructsSeth KulickUniversity of PennsylvaniaComputer and Information Science200 South 33rd StreetPhiladelphia, PA 19104-6389 USAskulick@linc, cis.
upenn, eduAbstractMany theories of semantic interpretationuse A-term manipulation to composition-ally compute the meaning of a sentence.These theories are usually implemented ina language such as Prolog that can simulateA-term operations with first-order unifica-tion.
However, for some interesting cases,such as a Combinatory Categorial Gram-mar account of coordination constructs,this can only be done by obscuring the un-derlying linguistic theory with the "tricks"needed for implementation.
This papershows how the use of abstract syntax per-mitted by higher-order logic programmingallows an elegant implementation f the se-mantics of Combinatory Categorial Gram-mar, including its handling of coordinationconstructs.1 In t roduct ionMany theories of semantic interpretation use A-termmanipulation tocompositionally compute the mean-ing of a sentence.
These theories are usually imple-mented in a language such as Prolog that can sim-ulate A-term operations with first-order unification.However, there are cases in which this can only bedone by obscuring the underlying linguistic theorywith the "tricks" needed for implementation.
Forexample, Combinatory Categorial Grammar (CCG)(Steedman, 1990) is a theory of syntax and seman-tic interpretation that has the attractive character-istic of handling many coordination constructs thatother theories cannot.
While many aspects of CCGsemantics can be reasonably simulated in first-orderunification, the simulation breaks down on some ofthe most interesting cases that CCG can theoreti-cally handle.
The problem in general, and for CCGin particular, is that the implementation languagedoes not have sufficient expressive power to allow amore direct encoding.
The solution given in this pa-per is to show how advances in logic programmingallow the implementation f semantic theories in avery direct and natural way, using CCG as a casestudy.We begin by briefly illustrating why first-orderunification is inadequate for some coordination con-structs, and then review two proposed solutions.The sentence in (la) usually has the logical form(LF) in (lb).
(la) John and B i l l  run.
(15) (and (run John) (run Bill))CCG is one of several theories in which (lb) getsderived by raising John to be the LF AP.
(P john),where P is a predicate that takes a NP as an argu-ment to return a sentence.
Likewise, Bill gets theLF AP.
(P bi l l ) ,  and coordination results in the fol-lowing LF for John and Bill:(2) AP.
(and (P john) (P bill))When (2) is applied to the predicate, (15) will re-sult after 13-reduction.
However, under first-orderunification, this needs to simulated by having thevariable z in Az.run(z) unify both with Bill andJohn, and this is not possible.
See (Jowsey, 1990)and (Moore, 1989) for a thorough discussion.
(Moore, 1989) suggests that the way to overcomethis problem is to use explicit A-terms and encode/~-reduction to perform the needed reduction.
Forexample, the logical form in (3) would be produced,where X\rtm(X) is the representation f Az.run (z).
(3) and (apply (I\run(X), j ohn).apply (l\run(l), bill) )This would then be reduced by the clauses for applyto result in (lb).
For this small example, writingsuch an apply predicate is not difficult.
However,as the semantic terms become more complex, it isno trivial matter to write ~-reduction that will cor-rectly handle variable capture.
Also, if at some pointit was desired to determine if the semantic forms oftwo different sentences were the same, a predicatewould be needed to compare two lambda forms fora-equivalence, which again is not a simple task.
Es-sentially, the logic variable X is meant o be inter-preted as a bound variable, which requires an addi-tional ayer of programming.213(Park, 1992) proposes asolution within first-orderunification that can handle not only sentence (la),but also more complex examples with determiners.The method used is to introduce spurious bindingsthat subsequently get removed.
For example, thesemantics of (4a) would be (4b), which would thenget simplified to (4c).
(4a) A farmer and every senator talk(4b) exists(X1 , fanaer( I1)a( exists (x2, (x2=xl) ataZk (X2)) ) )&f ora l lC l3 ,  senat or (X3)=> (exists (X2, (12=13) &talk (X2)) ) )(4c) exists (Xl,fanaerCXl)ktalk(Xl))&forall (13, senator (13) =>talk (13))While this pushes first-order unification beyondwhat it had been previously shown capable of, thereare two disadvantages to this technique: (1) For ev-ery possible category that can be conjoined, a sepa-rate lexical entry for and is required, and (2) As theconjoinable categories become more complex, theand entries become correspondingly more complexand greatly obscure the theoretical background ofthe grammar formalism.The fundamental problem in both cases is that theconcept of free and bound occurrences of variablesis not supported by Prolog, but instead needs tobe implemented by additional programming.
Whiletheoretically possible, it becomes quite problematicto actually implement.
The solution given in thispaper is to use a higher-order logic programminglanguage, AProlog, that already implements theseconcepts, called "abstract syntax" in (Miller, 1991)and "higher-order abstract syntax" in (Pfenning andElliot, 1988).
This allows a natural and elegant im-plementation of the grammatical theory, with onlyone lexical entry for and.
This paper is meant o beviewed as furthering the exploration of the utility ofhigher-order logic programming for computationallinguistics - see, for example, (Miller & Nadathur,1986), (Pareschi, 1989), and (Pereira, 1990).2 CCGCCG is a grammatical formalism in which there isa one-to-one correspondence b tween the rules ofcomposition 1 at the level of syntax and logical form.Each word is (perhaps ambiguously) assigned a cat-egory and LF, and when the syntactical operationsassign a new category to a constituent, he corre-sponding semantic operations produce a new LF forthat constituent as well.
The CCG rules shown inFigure 1 are implemented in the system described1In the genera\] sense, not specifically the CCG rulefor function composition.Function Application (>):I /Y :F  Y:y =>g:FyFunction Application (<):Y:y I \Y :F=>I :FyFunction Composition (>X/Y:F Y/Z:G=>X/Z:Function Composition (<Y\Z:G X\Y :F=>X\Z:Type Raising (> T):np:x  => .
/ (s \np)  : ~F.FxType Raising (< T):np:x =>e\(s/np):AF.VxB):)tx.F(Gx)B):~x.F(Gx)Figure 1: CCG rulesharry found.
.
.
.
.
.
.
.
~ .
.
.
.
.
.
.
.
.
.
>TS:s/(S:s\NP:harry')(S:found ~ npl np2\NP:npl)/NP:np2>BS:found' harry' np2/NP:np2Figure 2: CCG derivation of harry found simulatedby first-order unificationin this paper.
2 3 Each of the three operations haveboth a forward and backward variant.As an illustration of how the semantic rules canbe simulated in first-order unification, consider thederivation of the constituent harry found, whereharry has the category np with LF har ry '  and foundis a transitive verb of category (s\np)/np with LF(5) Aobject.Asubject.
(found' subject object)In the CCG formalism, the derivation is as fol-lows: harry gets raised with the > T rule, andthen forward composed by the > B rule with found,and the result is a category of type s/rip with LFAz.
(found' harry'  z).
In section 3 it will be seenhow the use of abstract syntax allows this to be ex-pressed irectly.
In first-order unification, it is sim-ulated as shown in Figure 2.
4The final CCG rule to be considered is the coor-dination rule that specifies that only like categoriescan coordinate:2The type-raising rules shown are actually a simplifi-cation of what has been implemented.
In order to handledeterminers, a system similar to NP-complement cate-gories as discussed in (Dowty, 1988) is used.
Althougha worthwhile further demonstration f the use of ab-stract syntax, it has been left out of this paper for spacereasons.3The \ for a backward-looking category should notbe confused with the \ for A-abstraction.
*example adapted from (Steedman, 1990, p. 220).214(6) X ?on3 X => xThis is actually a schema for a family of rules, col-lectively called "generalized coordination", since thesemantic rule is different for each case.
5 For exam-ple, if X is a unary function, then the semantic rule is(Ta), and if the functions have two arguments, thenthe rule is (7b).
s(7a) @FGH = Az.F(Gz)(Hz)(7b) @~FGH = Az.Ay.F(Gzy)(Hzy)For example, when processing (la), rule (Ta) wouldbe used with:?
F = Az.Ay.
(~md' z y)?
G = AP.
(P john'), H = AP.
(P b i l l ' )with the resultc~FGH = Az.
(and' (z john') (z b i l l ' ) )which is c=-equivalent to (2).3 ~PROLOG and Abstract SyntaxAProlog is a logic programming language based onhigher-order hereditary Harrop formulae (Miller etal., 1991).
It differs from Prolog in that first-orderterms and unification are replaced with simply-typedA-terms and higher-order unification 7, respectively.It also permits universal quantification and implica-tion in the goals of clauses.
The crucial aspect forthis paper is that together these features permits theusage of abstract syntax to express the logical formsterms computed by CCG.
The built-in A-term ma-nipulation is used as a "meta-language" in which the"object-language" of CCG logical forms is expressed,and variables in the object-language are mapped tovariables in the meta-language.The AProlog code fragment shown in Figure 3 de-clares how the CCG logical forms are represented.Each CCG LF is represented as an untyped A-term,namely type t=.
abe represents object-level abstrac-tion Az.M by the meta-level expression (abe I ) ,sit is not established if this schema should actuallyproduce an unbounded family of rules.
See (Weir, 1988)and (Weir and Joshi, 1988) for a discussion of the im-plications for automata-theoretic power of generalizedcoordination and composition, and (Gazda~, 1988) forlinguistic axguments that languages like Dutch may re-quire this power, and (Steedman, 1990) for some furtherdiscussion of the issue.
In this paper we use the general-ized rule to illustrate the elegance of the representation,but it is an easy change to implement a bounded coor-dination rule.eThe ,I~ notation is used because of the combina-tory logic background of CCG.
See (Steedman, 1990)for details.7defined as the unification of simply typed A-terms,modulo ~,/conversion.k ind  tat type .type  abe (tat ->  tat) ->  tat.type  app tat ->  tat ->  tat.type  fo ra l l  (tat ->  tat) ->  tat.type  ex is ts  (tat ->  tat) ->  tat.type  >> tat ->  tm -> tat.type  , t  tat ->  ta  ->  tat.Figure 3: Declarations for AProlog representation fCCG logical formswhere N is a meta-level function of type ta  ---* tat.A meta-level A-abstraction Ay.P is written y\p.SThus, if waZked' has type tat --* tat, theny\(walked' y) is a AProlog (meta, level) functionwith type ta  -* tat, and (abe y\(walked'  y)) is theobject-level representation, with type tat.
The LFfor found shown in (5) would be represented asCabs obj\(abs sub\(found' sub obj))), app en-codes application, and so in the derivation of harryfound, the type-raised harry has the AProlog value(abe p\(app p harry')).
9The second part of Figure 3 shows declares howquantifiers are represented, which are required sincethe sentences to be processed may have determiners.fo ra l l  and ex is ts  are encoded similarly to abstrac-tion, in that they take a functional argument andso object-level binding of variables by quantifiers ishandled by meta-hvel A-abstraction.
>> and t t  aresimple constructors for implication and conjunction,to be used with fo ra l l  and ex is ts  respectively, inthe typical manner (Pereira and Shieber, 1987).
Forexample, the sentence very man found a bone has asa possible LF (8a), with the AProlog representation (8b)10:SThis is the same syntax for ~-abstraction as in(3).
(Moore, 1989) in fact borrows the notation for A-abstraction from AProlog.
The difference, of course, isthat here the abstraction is a meta-level, built-in con-struct, while in (3) the interpretation is dependent on anextra layer of programming.
Bound variables in APrologcan be either upper or lower case, since they axe not logicvaxlables, and will be written in lower case in this paper.9It is possible to represent the logical forms at theobject-level without using abs and app, so that harrycould be simply p\(p harry').
The original implemen-tation of this system was in fact done in this manner.Space prohibits a full explanation, but essentially thefact that AProlog is a typed language leads to a gooddeal of formal clutter if this method is used.1?The LF for the determiner has the form of a Mon-tagovian generalized quantifier, giving rise to one fullyscoped logical form for the sentence.
It should bestressed that this particular kind of LF is assumed herepurely for the sake of illustration, to make the point thatcomposition at the level of derivation and LF are one-to-one.
Section 4 contains an example for which such a215type apply tm -> tm -> tm -> o.type compose tm -> tm -> tm -> o.type raise tm -> tm -> o.apply (abs R) S (R S).compose (abs F) (abs G) (abs x\(F  (G x ) ) ) .raise Tn (abe P\(app P Tm)).Figure 4: ~Prolog implementation f CCG logicalform operations(8a) 3=.
((bone' =) A y) ( ound' =)))(8b) (ex i s ts  x \((bone' x) it&( fo ra l l  x l \(CLan' x l )  >> (found'  x l  x ) ) ) ) )Figure 4 illustrates how directly the CCG opera-tions can be encoded 11. o is the type of a meta-levelproposition, and so the intended usage of apply isto take three arguments of type tm, where the firstshould be an object-level )~-abstraction, and set thethird equal to the application of the first to the sec-ond.
Thus, for the query?- apply (abe sub\(walked' sub)) harry '  N.It unifies with the ta  -~ ta  functionsub\(walked ~ sub), S with har ry '  and M with (ItS), the recta-level application of R to S, which by thebuilt-in fi-reduction is (walked' harry '  ).
In otherwords, object-level function application is handledsimply by the meta-level function application.Function composition is similar.
Consideragain the derivation of harry found by type-raising and forward composition, harry wouldget type-raised by the ra i se  clause to produce(abe p\(app p haxry~)), and then composed withfound, with the result shown in the following query:?- compose (abe p\(app p har ry ' ) )(abe obj \(abe sub\(found' sub obj ) ) )M.M = (abe x \(app(abs sub\(found ~ sub x))harry '  ) ) .derivation fails to yield all available quantifier scopings.We do not address here the further question of how theremaining scoped readings axe derived.
Alternatives thatappear compatible with the present approach are quanti-tier movement (Hobbs & Shieber, 1987), type-ralsing atLF (Paxtee & Rooth, 1983), or the use of disambiguatedquantifers in the derivation itself (Park, 1995).11There are other clauses, not shown here, that deter-mine the direction of the CCG rule.
For either direction,however, the semantics axe the same and both directiona.Irules call these clauses for the semantic omputation.kind cattype fstype bstype nptype stype conjtype nountype.cat -> cat -> cat.cat -> cat -> cat.cat .cat.cat .cat .type atomic-~ype cat -> o.atomic-type rip.atomic-type s.atomic-type conj.atomic-type noun.Figure 5: Implementation f the CCG category sys-temAt this point a further/~-reduction s eeded.
Notehowever this is not at all the same problem ofwriting a /~-reducer in Prolog.
Instead it is asimple matter of using the meta-level ~-reductionto eliminate ~-redexes to produce the final result(abe x\(found I harry x)).
We won't show thecomplete declaration of the/~-reducer, but the keyclause is simply:red (app (abe N) N) (N N).Thus, using the abstract syntax capabilities of~Prolog, we can have a direct implementation f theunderlying linguistic formalism, in stark contrast tothe first-order simulation shown in Figure 2.4 Imp lementat ion  o f  Coord inat ionA primary goal of abstract-syntax is to support re-cursion through abstractions with bound variables.This leads to the interpretation f a bound variableas a "scoped constant" - it acts like a constant thatis not visible from the top of the term, but whichbecomes visible during the descent hrough the ab-straction.
See (Miller, 1991) for a discussion of howthis may be used for evaluation of functional pro-grams by "pushing" the evaluation through abstrac-tions to reduce redexes that are not at the top-level.This technique is also used in the fl-reducer brieflymentioned at the end of the previous ection, anda similar technique will be used here to implementcoordination by recursively descending through thetwo arguments o be coordinated.Before describing the implementation f coordi-nation, it is first necessary to mention how CCGcategories are represented in the ~Prolog code.
Asshown in Figure 5, cat is declared to be a primi-tive type, and np, s, conj, noun are the categoriesused in this implementation, fs  and bs are declared216type coordcat  -> tm -> tm -> tm -> o.coord  ( f s  ?
B) (abs It) (abs S) (abs  T) "-p i  x \  (coord B (~ x) (S x) (T x ) ) .cooed (be i B) (abe R) (abe S) (abe T) "-p i  x \  (coord B (R x) (S x) (T x ) ) .coord B R S (and'  E S) : -  a tomic - type  B.Figure 6: Implementation f coordinationto be constructors for forward and backward slash.For example, the CCG category for a transitive verb(s \np) /np would be represented as ( f s  np (bs nps ) ) .
Also, the predicate a tomic - type  is declared tobe true for the four atomic categories.
This will beused in the implementation f coordination as a testfor termination of the recursion.The implementation f coordination crucially usesthe capability of AProlog for universal quantificationin the goal of a clause, p i  is the meta-level operatorfor V, and Vz.M is written as p i  x\l|.
The oper-ational semantics for AProlog state that p i  x\G isprovable if and only if \[c/z\]G is provable, where c isa new variable of the same type as z that does nototherwise occur in the current signature.
In otherwords, c is a scoped constant and the current signa-ture gets expanded with c for the proof of \[c/z\]G.Since e is meant to be treated as a generic place-holder for any arbitrary z of the proper type, c mustnot appear in any terms instantiated for logic vari-ables during the proof of \[c/z\]G. The significance ofthis restriction will be illustrated shortly.The code for coordination is shown in Figure6.
The four arguments to cooed are a categoryand three terms that are the object-level LF rep-resentations of constituents of that category.
Thelast argument will result from the coordination ofthe second and third arguments.
Consider againthe earlier problematic example ( la) of coordina-tion.
Recall that after john is type-raised, its LFwill be (abs p\(app p john')) and similarly for bill.They will both have the category ( f s  (bs np s)s) .
Thus, to obtain the LF for John and Bill, thefollowing query would be made:?-  coord ( f s  (bs np s) s)(abs p \ (app  p john ' ) )Cabs pkCapp p bill'))M.This will match with the first clause for coord, with?
t instantiated to (be np s)?
Btos?
It to (p\(app p john'))?
S to (p\(app p b i l l ' ) )?
and T a logic variable waiting instantiation.Then, after the meta-level/~-reduction usi g the newscoped constant c, the following goal is called:?-  coord s (app ?
john ' )  (app c b i l l ' )  II.where II = (T c).
Since s is an atomic type, thethird coord clause matches with?
B instantiated to s?
R to (app c john ' )?
S to (app c b i l l ' )?
II to (and'  (app c john ' )  (app c b i l l ' ) )Since I = (T c),  higher-order unification is used byAProlog to instantiate T by extracting c from II withthe resultT = x\(and' (app x john') (app x b i l l ' ) )and so H from the original query is(abe x\(and' (app ?
john') (app ?
b i l l ' ) ) )Note that since c is a scoped constant arising fromthe proof of an universal quantification, the instan-tiationT = x\(and' (app ?
john') (app ?
b i l l ' ) )is prohibited, along with the other extractions thatdo not remove c from the body of the abstraction.This use of universal quantification to extract outc from a term containing c in this case gives the sameresult as a direct implementation f the rule for coo-ordination of unary functions (7a) would.
However,this same process of recursive descent via scopedconstants will work for any member of the conj rulefamily.
For example, the following query?-  coord(~s np (be np s ) )Cabs ob j \ (abs  sub\ ( l i ke '  sub ob j ) ) )(abs ob j \ (abs  sub \ (hate '  sub ob j ) ) )M.14 = (abe x \(abe x l \(and'  ( l i ke '  x l  x)(hate' x l  x)))) .corresponds to rule (7b).
Note also that the useof the same bound variable names obj and subcauses no difficulty since the use of scoped-constants,meta-level H-reduction, and higher-order unificationis used to access and manipulate the inner terms.Also, whereas (Park, 1992) requires careful consider-ation of handling of determiners with coordination,here such sentences are handled just like any others.For example, the sentence Mary gave every dog abone and some policeman a flower results in the LF12.12This is a case in which the paxticulax LF assumedhere fails to yield another available scoping.
See foot-note 10.217(and'(ex is ts  x\C(bone' x) Itlt( fore11 x l \ ( (dog '  x l )>> (gave' aaxy' x x l ) ) ) ) )(ex is ts  x \ ( ( f lover  J x) 11(ex istu x l \ ( (po i iceman'  xl)IU~ (gave' =axy' x x l ) ) ) ) ) )Thus, "generalized coordination", instead of being afamily of separate rules, can be expressed as a sin-gle rule on recursive descent hrough logical forms.
(Steedman, 1990) also discusses "generalized com-position", and it may well be that a similar imple-mentation is possible for that family of rules as well.5 Conc lus ionWe have shown how higher-order logic programmingcan be used to elegantly implement the semantic the-ory of CCG, including the previously difficult caseof its handling of coordination constructs.
The tech-niques used here should allow similar advantages fora variety of such theories.An argument can be made that the approachtaken here relies on a formalism that entails im-plementation issues that are more difficult than forthe other solutions and inherently not as efficient.However, the implementation issues, although morecomplex, are also well-understood and it can be ex-pected that future work will bring further improve-ments.
For example, it is a straightforward matterto transform the ,XProlog code into a logic called L~(Miller, 1990) which requires only a restricted formof unification that is decidable in linear time andspace.
Also, the declarative nature of ~Prolog pro-grams opens up the possibility for applications ofprogram transformations such as partial evaluation.6 AcknowledgmentsThis work is supported by ARC) grant DAAL03-89-0031, DARPA grant N00014-90-J-1863, and AROgrant DAAH04-94-G-0426.
I would like to thankAravind Joshi, Dale Miller, Jong Park, and MarkSteedman for valuable discussions and comments onearlier drafts.Re ferencesDavid Dowty.
1988.
Type raising, functional com-position, and non-constituent conjunction.
InRichard T. Oehrle, Emmon Bach, and DeirdreWheeler, editors, Categorial Grammars and Natu-ral Language Structures.
Reidel, Dordrecht, pages153-198.Gerald Gazdar.
1988.
Applicability of indexedgrammars to natural anguages.
In U. Reyle andC.
Rohrer, editors, Natural language parsing andlinguistic theories.
Reidel, Dordrecht, pages 69-94.Jerry R. Hobbs and Stuart M. Shieber.
1987.
An al-gorithm for generating quantifier scopings.
Com-putational Linguistics, 13:47-63.Einar Jowsey.
1990.
Constraining Montague Gram-mar for Computational Applications.
PhD thesis,University of Edinburgh.Dale Miller.
1990.
A logic programming languagewith lambda abstraction, function variables andsimple unification.
In P. Schroeder-Heister, ed-itor, Eztensions of Logic Programming, LectureNotes in Artifical Intelligence, Springer-Verlag,1990.Dale Miller.
1991.
Abstract syntax and logic pro-gramming.
In Proceedings of the Second Rus-sian Conference on Logic Programming, Septem-ber 1991.Dale Miller and Gopalan Nadathur.
1986.
Someuses of higher-order logic in computational linguis-tics.
In 24th Annual Meeting of the Associationfor Computational Linguistics, pages 247-255.Dale Miller, Gopalan Nadathur, Frank Pfenning,Andre Scedrov.
1991.
Uniform proofs as a foun-dation for logic programming.
In Annals of Pureand Applied Logic, 51:125-157.Robert C. Moore.
1989.
Unification-based seman-tic interpretation.
In 27th Annual Meeting of theAssociation for Computational Linguistics, pages33-41.Remo Pareschi.
1989.
Type-Driven Natural Lan-guage Aanalysis.
PhD thesis, University of Edin-burgh.Jong C. Park.
1992.
A unification-based semanticinterpretation for coordinate constructs.
In 80thAnnual Meeting of the Association for Computa-tional Linguistics, pages 209-215.Jong C. Park.
1995.
Quantifier scope and con-stituency.
In 33rd Annual Meeting of the Associa-tion for Computational Linguistics (this volume).Barbara Partee and Mats Rooth.
1983.
General-ized conjunction and type ambiguity.
In RainerBanerle, Christoph Schwarze, and Arnim von Ste-chow, editors, Meaning, Use, and Interpretationof Language.
W. de Gruyter, Berlin, pages 361-383.Fernando C.N.
Pereira.
1990.
Semantic interpre-tation as higher-order deduction.
In Jan vanEijck, editor, Logics in AI: European WorkshopJELIA '90, Lecture Notes in Artificial Intelligencenumber 478, pages 78-96.
Springer-Verlag, Berlin,Germany.Fernando C.N.
Pereira and Stuart M. Shieber.
1987.Prolog and Natural-Language Analysis.
Number10 in CSLI Lecture Notes.
Center for the Study ofLanguage and Information, Stanford, California,2181985.
Distributed by the University of ChicagoPress.Frank Pfenning and Conal Elliot.
1988.
Higher-order abstract syntax.
In Proceedings of the A CM-SIGPLAN Conference on Programming LanguageDesign and Implementation, 1988.Mark J. Steedman.
1990.
Gapping as constituentcoordination.
In Linguistics and Philosophy 13,pages 207-263David Weir.
1988.
Characterizing Mildly Contezt-sensitive Grammar Formalism.
CIS-88-74, PhDthesis, University of Pennsylvania.David Weir and Aravind Joshi.
1988.
Combina-tory categorial grammars: generative power andrelation to linear CF rewriting systems.
In ~6thAnnual Meeting of the Association for Computa-tional Linguistics, pages 278-285.219
