GoDiS  - An  Accommodat ing  Dia logue SystemSta f fan  Larsson ,  Peter  L jung l6 f ,  Rob in  Cooper ,  E l i sabet  Engdah l ,  S t ina  Er i cssonDepar tment  of linguistics, GSteborg UniversityBox 200-295, Humanisten,  SE-405 30 G5teborg,  Sweden{s l ,  peb,  cooper ,  engdah l ,  s t inae}01 ing ,  gu.
seAbst rac tThis paper accompanies a demo of the GoDiS sys-tem.
Work on~hi~ system was reported at IJCAI-99 (Bohlin et-al.~ 1999).
GoDiS is a prototypedialogue system for information-seeking dialogue,capable of accommodating questions and tasks toenable the user to present information in any de-sired order, without explicitly naming the dialoguetask.
GoDiS is implemented using the TRINDIKITsoftware package, which enables implementation fthese behaviours in a compact and natural way.1 In t roduct ionThis paper accompanies a demo of the GoDiS 1system reported at IJCAI-99 (Bohlin et al,1999).
GoDiS is a prototype dialogue system forinformation-seeking dialogue, capable of accommo-dating questions and tasks to enable the user topresent information in any desired order, withoutexplicitly naming the dialogue task.
GoDiS is im-plemented using the TRINDIKIT 2 software packagedeveloped in the TRINDI project.
The TRINDIKITis a toolkit for building and experimenting with dia-logue move engines and information states (IS), Weuse the term information state to mean, roughly,the information stored internally by an agent, inthis case a dialogue system.
A dialogue move engine(DME) updates the information state on the basisof observed ialogue moves and selects appropriatemoves to be performed.2 System Descr ip t ionThe overall structure of the GoDiS system isillustrated below:1Work on GoDiS has been supported by the TRINDI(Task Oriented Instructional Dialogue), EC Project LE4-8314, SDS (Swedish Dialogue Systems), NUTEK/HSFR Lan-guage Technology Project F1472/1997, and INDI (Infor-mation Exchange in Dialogue), Riksbankens Jubileumsfond1997-0134, projects.2 .x~.n~.
ling, gU.
se/research/proJ ects/trlndi/Like any dialogue system built using theTRINDIKIT, GoDiS consists of a number of mod-ules, an information state, and a number of resourceshooked up to the information state.In addition to the control module, which wirestogether the other modules, there are six modules in?
GoDiS: input, which receives input3from the user;interpret, which interprets utterances as dialoguemoves with some content; generate, which gener-ates natural language from dialogue moves; out-put, which produces output to the user; update,which updates the information state based on in-terpreted moves; and select, which selects the nextmove(s) to perform 4.
The last two are DME rood-ules, which means that they together make up the3GoDiS originally accepted written input only, but it iscurrently being hooked up to a speech recogniser toacceptspoken input.4This is done by updating the part of the information statecontaining the moves to be performed.7DME in GoDiS.
DME modules consist of a set of up-date rules and (optionally) an update algorithm gov-erning the order in which rules are applied.
Updaterules are rules for updating the information state.They consist of a rule name, a precondition list, andan effect list.
The preconditions are conditions onthe information state, and the effects are operationson the information state.
If the preconditions of arule are true for the information state, then the ef-fects of that rule can be applied to the informationstate.There are three resources in GoDiS: a lexicon, adatabase and a domain resource containing (amongother things) domain-specific dialogue plans.
Cur-rently, there are GoDiS resources for a travel agencydomain andS-the autoroute domain.
Also, for eachof these domains there are lexicons in both Englishand Swedish.The question about what should be included inthe information state is central to any theory of dia-logue management.
The notion of information statewe are putting forward here is basically a simplifiedversion of the dialogue game board which has beenproposed by Ginzburg.
We are attempting to use assimple a version as possible in order to have a moreor less practical system to experiment with.The main division in the information state is be-tween information which is private to the agent andthat which is (assumed to be) shared between thedialogue participants.
What we mean by shared in-formation here is that which has been established(i.e.
grounded) during the conversation, akin towhat Lewis in (Lewis, 1979) called the "conversa-tional scoreboard".
We represent information statesof a dialogue participant as a record of the typeshown in figure 1.The private part of the information state includesa set of beliefs and a dialogue plan, i.e.
is a listof dialogue actions that the agent wishes to carryout.
The plan can be changed during the courseof the conversation.
For example, if a travel agentdiscovers that his customer wishes to get informationabout a flight he will adopt a plan to ask her whereshe wants to go, when she wants to go, what priceclass she wants and so on.
The agenda, on the otherhand, contains the short term goals or obligationsthat the agent has, i.e.
what the agent is going to donext.
For example, if the other dialogue participantraises a question, then the agent will normally putan action on the agenda to respond to the question.This action may or may not be in the agent's plan.The private part of the IS also includes "tem-porary" shared information that saves the previ-ously shared information until the latest utterance isgrounded, i.e.
confirmed as having been understood8by the other dialogue participant 5.
In this way itis easy to retract the "optimistic" assumption thatthe information was understood if it should turn outthat the other dialogue participant does not under-stand or accept it.
If the agent pursues a cautiousrather than an optimistic strategy then informationwill at first only be placed in the "temporary" slotuntil it has been acknowledged by the other dialogueparticipant whereupon it can be moved to the appro-priate shared field.The (supposedly) shared part of the IS consistsof three subparts.
One is a set of propositionswhich the agent assumes for the sake of the conversa-tion and which are established uring the dialogue.The second is a stack of questions under discussion(QUD).
These are questions that have been raisedand are currently under discussion in the dialogue.The third contains information about the latest ut-terance (speaker, moves and integration status).3 Accommodat ion in GoDiSDialogue participants can address questions thathave not been explicitly raised in the dialogue.
How-ever, it is important hat a question be available tothe agent who is to interpret it because the utter-ance may be elliptical.
Here is an example from atravel agency dialogue6:$J: what month do you want to goSP: well around 3rd 4th april / some timethereSP: as cheap as possibleThe strategy we adopt for interpreting ellipticalutterances i to think of them as short answers (inthe sense of Ginzburg (Ginzburg, 1998)) to questionson QUD.
A suitable question here is What kind ofprice does P want for the ticket?.
This questionis not under discussion at the point when P says"as cheap as possible".
But it can be figured outsince J knows that this is a relevant question.
Infact it will be a question which J has as an actionin his plan to raise.
On our analysis it is this factwhich enables A to interpret he ellipsis.
He findsthe matching question on his plan, accommodatesby placing it on QUD and then continues with theintegration of the information expressed by as cheapas possible as normal.
Note that if such a question is?
not available then the ellipsis cannot be interpretedas in the dialogue below.A.
What  time are you coming to pick up Maria?B.
Around 6 p.m. As cheap as possible.5In discussing rounding we will assume that  there is justone other dialogue participant.6This dialogue has been collected by the University ofLund as part of the SDS project.
We quote a translationof the transcription done in GSteborg as part of the sameproject.IS :PRIVATE :SHARED :PLAN : STACKSET(AcT1ON)AGENDA : STACK(ACTION)PaL : SET(PRoP)I BEL : SET(PRoP)QUD : STACK(QUESTION)TMP : \[ SPEAKER :LU : \[ MOVES :BEL : SET(PRoP)QUD : STACKSET(QUESTION)SPEAKER : PARTICIPANTLU : MOVES :PARTICIPANTASsoCSET(MOvE,BOoL)ASsOCSET(MOvE,BooL) \] \]Figure 1: The type of information state we are assumingThis dialogue is incoherent if what is being dis-cussed is when the child Maria is going to be pickedup from her friend's house (at least under standarddialogue plans-that we might have for such a con-versation).Question accommodation has been implementedin GoDiS using a single information state updaterule accommodateQuest ion,  seen below.
Wheninterpreting the latest utterance by the other par-ticipant, the system makes the assumption that itwas a reply move with content A.
This assump-tion requires accommodating some question Q suchthat A is a relevant answer to Q.
The check operator"answer-to(A, Q)" is true if A is a relevant answer toQ given the current information state, according toa (domain-dependent) definition of question-answerrelevance.RULE: accommodateQuest ionCLASS: accommodateval( SHARED.LU.SPEAKER, us r  )in( SHARED.LU.MOVES, answer(A) )not ( lexicon :: yn_answer(A) )PRE: aSSOC( SHARED.LU.MOVES, answer(A), false )in( PRIVATE.PLAN, raise(Q) )domain :: relevant_answer(Q, A)del( PRIVATE.PLAN, raise(Q) )EFF: push( SHARED.QUD, Q )After an initial exchange for establishing contactthe first thing that P says to the travel agent in ourdialogue is "flights to paris".
This is again an el-lipsis which on our analysis has to be interpreted asthe answer to a question (two questions, actually)in order to be understandable and relevant.
As noquestions have been raised yet in the dialogue (apartfrom whether the participants have each other's at-tention) the travel agent cannot find the appropriatequestion on his plan.
Furthermore, as this is the firstindication of what the customer wants, the travelagent cannot have a plan with detailed questions.We assume that the travel agent has various plantypes in his domain knowledge determining whatkind of conversations heis able to have.
Each planis associated with a task.
E.g.
he is able to booktrips by various modes of travel, he is able to han-dle complaints, book hotels, rental cars etc.
Whathe needs to do is take the customer's utterance andtry to match it against questions in his plan typesin his domain knowledge.
When he finds a suitablematch he will accommodate the corresponding task,thereby providing a plan to ask relevant questionfor flights, e.g.
when to travel?, what date?
etc.Once he has accommodated this task and retrievedthe plan he can proceed as in the previous example.That is, he can accommodate the; QUD with the rel-evant question and proceed with the interpretationof ellipsis in the normal fashion.This example is interesting for a couple of reasons.It provides us with an example of "recursive" accom-modation.
The QUD needs to be accommodated,but in order to do this the dialogue task needs to beaccommodated and the plan retrieved.
The otherinteresting aspect of this is that accommodating thedialogue task in this way actually serves to drive thedialogue forward.
That is, the mechanism by whichthe agent interprets this ellipsis, gives him a plan fora substantial part of the rest of the dialogue.
This isa way of capturing the intuition that saying flights toParis to a travel agent immediately makes a numberof questions become relevant.Task accommodation a d retrieval of the relevantplan has been implemented in GoDiS by two infor-mation state update rules.4 Sample dialoguesWe will give some examples of CoDiS dialogues inthe English travel agency domain.
One of the fea-tures of the TRINDIKIT is that it provides methodsfor inspecting the information state at any stage ofa dialogue, and also to see which rules are applied.Unfortunately, because of space limitations, we arenot able to include examples of this in this paper;however, it is an integral part of our demo.The first dialogue shows the typical behaviour ofdialogue systems for information-seeking: each ques-tion is answered in turn, and the user always givesexactly the information requested.$S> Welcome to the travel agency!$U> hello9$S> What can I do for you?$U> I want price information on a tripplease$S> How do you want to travel?$U> by plane$S> What city do you want to go to?SU> gothenburg$S> What city do you want to go from?SU> london$S> Do you want a return ticket?$U> yes$S> What month do you want to  leave?$U> april$S> What class did you have in mind?$U> as cheap as possible$S> It~wil-i cost 50 crownsSU> thanks-, bye!$S> Thank you for your visit!In contrast, the second dialogue (below) showshow GoDiS is able to accommodate the task and in-tegrate information i  the order that the user givesit.$S> Welcome to the travel agency!$U> flights to paris$S> What city do you want to go from?$U> gothenburg, in april, as cheap aspossible$S> Do you want a return ticket7$U> no$S> It will cost 50 crownsSU> thanks~ bye!$S> Thank you for your visit!5 Limitat ionsGoDiS is a small-scale prototype and as such it suf-fers from the familiar drawbacks of many experi-mental systems: its lexicons and databases are verysmall, and the domain knowledge is limited.
The di-alogue plans cover only a small (but important) partof the kind of dialogues that can take place in thetravel agency and autoroute domains.
We hope tobe able to extend both the number of domains andthe scale of each domain in the future.Also, the focus in the development of GoDiS hasbeen on the dialogue management, i.e.
the dialoguemove engine and the information state.
Less efforthas been put into the interpretation a d generationmodules, which currently use (a slightly extendedversion of) keyword spotting and partially cannedtext, respectively.
We hope to replace these by plug-ging in existing interpretation a d generation tech-nology to GoDiS.For the tasks that GoDiS currently is able to han-dle, full-blown semantics i not needed.
We use avery limited semantics where propositions are essen-tially feature-value pairs.
As a consequence, GoDiS10is e.g.
not able to handle dialogue with more thanone referent; for this, the information state wouldhave to be amended with a set of referents, andpropositions would have to include referent informa-tion.
This is an area where we hope to improveGoDiS in the near future.Speech recognition and synthesis i currently be-ing added to GoDiS, but at the time of writing onlywritten input and output is available.6 Contr ibut ionsCurrently, the main contribution of GoDiS is per-haps to show how an extended notion of accommo-dation can serve to make dialogue systems easier tointeract with, by letting the user decide how andin what order to present information to the system.Also, the fact that accommodation can be imple-mented simply by adding three update rules indi-cates that information state update rules provide anatural and compact way of implementing dialoguestrategies.
An important issue for future researchis the relation of question and task accommodationto plan recognition approaches to dialogue (Sidner,1985).GoDiS also features a simple grounding strategywhich is nevertheless ufficient in many cases.
Thegrounding mechanism is implemented by three up-date rules.
It is possible to switch resources in mid-dialogue, e.g.
to change language.
Also, GoDiSis easily reconfigurable to new information-seekingdomains.
To adapt GoDiS to a new domain, oneneeds to supply a database, a lexicon and domainknowledge, including a set of dialogue plans.
TheGoDiS modules or information state don't need tobe changed in any way.In general, as an example of a dialogue system ira-plemented using the TRINDIKIT package, GoDiSshows how the information state approach is use-ful for clarifying and comparing theories of dialogue,and for exploring new solutions.ReferencesP.
Bohlin, R. Cooper, E. Engdahl, and S. Lars-son.
1999.
Information states and dialogue moveengines.
In J. Alexandersson, editor, IJCAI-99Workshop on Knowledge and Reasoning in Prac-tical Dialogue Systems.?
J. Ginzburg.
1998.
Clarifying utterances.
In J. Hul-stijn and A. Niholt, editors, Proc.
of the TwenteWorkshop on the Formal Semantics and Pragmat-ics of Dialogues, pages 11-30, Enschede.
Univer-siteit Twente, Faculteit Informatica.D.
K. Lewis.
1979.
Scorekeeping in a languagegame.
Journal of Philosophical Logic, 8:339-359.C.
L. Sidner.
1985.
Plan parsing for intended re-sponse recognition in discourse.
ComputationalIntelligence, 1 (1) :1-10, February.
