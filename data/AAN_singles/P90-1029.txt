Multiple Underlying Systems:Translating User Requests into Programs to Produce AnswersRobert J. Bobrow, Philip Resnik, Ralph M. WeischedelBBN Systems and Technologies Corporation10 Moulton StreetCambridge, MA 02138ABSTRACTA user may typically need to combine thestrengths of more than one system in order to performa task.
In this paper, we describe a component of theJanus natural language interface that translates inten-sional logic expressions representing the meaning ofa request into executable code for each applicationprogram, chooses which combination of applicationsystems to use, and designs the transfer of dataamong them in order to provide an answer.
The com-plete Janus natural language system has been portedto two large command and control decision supportaids.1.
IntroductionThe norm in the next generation of user en-vironments will be distributed, networked applications.Many problems will be solvable only by use of a corn-bination of applications.
If natural language technol-ogy is to be applicable in such environments, we mustcontinue to enable the user to talk to computers abouthis/her problem, not about which application(s) to use.Most current natural language (NL) systems,whether accepting spoken or typed input, aredesigned to interface to a single homogeneous under-lying system; they have a component geared toproducing code for that single class of application sys-tems, such as a single relational database\[12\].Providing an English interface to the user's data base,a separate English interface to the same user's plan-ning system, and a third interface to a simulationpackage, for instance, will neither be attractive norcost-effective.
By contrast, a seamless, multi-modal,natural language interface will make use of aheterogeneous environment feasible and, ff done well,transparent; his can be accomplished by enabling theuser to state information needs without specifying howto decompose those needs into a program calling thevarious underlying systems required to meet thoseneeds.
We believe users who see that NL technologydoes insulate them from the underlying impleman-tation idiosyncrasies of one application will expect thatour models of language and understanding will extendto simultaneous access of several applications.Consider an example.
In DARPA's Fleet Com-mand Center Battle Management Program(FCCBMP), several applications (call them underlyingsystems) are involved, including a relational data base(IDB), two expert systems (CASES and FRESH), anda decision support system (OSGP).
The hardwareplatforms include workstations, conventional time-sharing machines, and parallel mainframes.
Supposethe user asks Which of those submarines has thegreatest probability of locating A within 10 hours?Answering that question involves subproblems fromseveral underlying applications: the display facility, todetermine what "those submarines" refers to; FRESH,to calculate how long each submarine would take toget to A's vicinity; CASES, for an intensive, paral-lelizable numerical calculation estimating theprobabilities; and the display facility again, to presentthe response.While acoustic and linguistic processing candetermine what the user wants, the problem of trans-lating that into an effective program to do what theuser wants is a challenging, but solvable problem.
Inorder to deal with multiple underlying systems, notonly must our NL interface be able to represent themeaning of the user's request, but it must also becapable of organizing the various applicationprograms at its disposal, choosing which combinationof resources to use, and supervising the transfer ofdata among them.
We call this the multiple underlyingsystems (MUS) problem.
This paper provides anoverview of our approach and results on the MUSproblem.
The implementation is part of the back endof the Janus natural language interface and is docu-mented in \[7\].2.
Scope of the ProblemOur view of access to multiple underlying sys-tems is given in Figure 2.
As implied in the graphicalrepresentation, the user's request, whatever itsmodality, is translated into an internal representationof the meaning of what the user needs.
We initiallyexplored a first-order logic for this purpose; however,in Janus \[13\] we have adopted an intensional logic\[3, 14\] to investigate whether intensional ogic offers227more appropriate representations for applicationsmore complex than databases, e.g., simulations andother calculations in hypothetical situations.
From thestatement of what the user needs, we next derive astatement of how to fulfill that need, an execution p/ancomposed of abstract commands.
The execution plantakes the form of a limited class of data flow graphsfor a virtual machine that includes the capabilities ofall of the application systems.
At the level of thatvirtual machine, specific commands to specific under-lying systems are dispatched, results from those ap-plication systems are composed, and decisions aremade regarding the appropriate presentation of infor-mation to the user.
Thus, the multiple underlying sys-tems (MUS) problem is a mapping,MUS: Semantic representation -- > Programthat is, a mapping from what the user wants to aprogram to fulfill those needs, using theheterogeneous application programs' functionality.Though the statement of the problem asphrased above may at first suggest an extremely dif-ficult and long-range program of research in automaticprogramming (e.g., see \[8\]), there are several waysone can narrow the scope of the problem to makeutility achievable.
Restricting the input language, asothers have done \[4, 6\], is certainly one way to narrowthe problem to one that is tractable.In contrast, we allow a richer input language (anintensional logic), but assume that the output is arestricted class of programs: acyclic data flow graphs.The implication of this restriction is that the programsgeneratabla by the MUS component may include only:?
Functions available in the underlying applicationssystems?
Routines preprogrammed by the application sys-tem staff, and?
Operators on those elements, such as functionalcomposition, if-then-else, operators from the rela-tional algebra, and mapping over lists (for in-stance, for universal quantification and cardinalityof sets).If all the quantifiers are assumed to be restricted tofinite sets with a generator function, then the quan-tifiers can be converted to simple loops over the ele-ments of sets, such as the MAPCAR of Lisp, ratherthan having to undertake synthesis of arbitraryprogram loops.
We assume that all primitives of thelogic have at least one transformation which willrewrite it, potentially in conjunction with other primi-tives, from the level of the statement of the user'sneeds to the level of the executable plan.
Thesetransformations will have been elicited from the ap-plication system experts, e.g., expert system builders,database administrators, and systems programmingstaff of other application systems.
(Some work hasbeen done on automating this process.)3.
ApproachThe problem of multiple systems may bedecomposed into the following issues, as others havedone \[4, 9\]:?
Representation.
It is necessary to represent un-derlying system capabilities in a uniform way, andto represent the user request in a form independ-ent of any particular underlying system.
Theinput/output constraints for each function of eachunderlying system must be specified, thus definingthe services available.?
Formulation.
One must choose a combination ofunderlying system services that satisfies the userrequest.
Where more than one alternative exists,it is preferable to select a solution with low execu-tion costs and low passing of information betweensystems?
Execution.
Actual calls to the underlying systemsmust be accomplished, information must bepassed among the systems as required, and anappropriate response must be generated.3,1.
Representation3.1.1.
Representing the semantics of utterancesSince the meaning of an utterance in Janus isrepresented as an expression in WML (World ModelLanguage \[3\]), an intensional logic., the input to theMUS component is in WML.
For a sentence such asDisplay the destroyers within 500 miles of Vinson, theWML is as follows:(bring-about((intension(exists ?a display(object-of ?a(iota ?b (power destroyer)(exists ?c(lambda (?d) interval(& (starts-interval ?d VINSON)(less-than(iota ?e length-measure(interval-length ?d ?e))(iota ?f length-measure(& (measure-unit ?f miles)(measure-quantity ?f 500))))))(ends-interval ?c ?b))))))TIME WORLD))2283.1.2.
Representing Application CapabilitiesTo represent the functional capabilities of un-derlying systems, we define services and servers.
Aserver is a functional module typically correspondingto an underlying system or a major part of an under-lying system.
Each server offers a number ofservices: objects describing a particular piece offunctionality provided by a server.
Specifying a ser-vice in MUS provides the mapping from fragments oflogical form to fragments of underlying system code.Each service has associated with it the server it is partof, the input variables, the output variables, the con-juncta computed, and an estimate of the relative costin applying it.SAMPLE SERVICES:Land-avoidance-distance:owner: Expert System 1inputs: (x y)locals: (z w)pattern:((in-class x vessel)(in-class y vessel)(in-class z interval)(In-class w length-measure)(starts-interval z x)(ends-interval z y)(interval-length z w))outputs: (w)method: ((route-distanca (location-of x)(location-of y))))cost: 5Great-circle-distance:owner: Expert System 1inputs: (x y)locals: (z w)pattern:((in-class x vessel)(in-class y vessel)(in-class z Interval)(in-class w length-measure)(starts-interval z x)(ends-interval z y)(interval-length z w))outputs: (w)method: ((gc-distance (location.of x)(location-of y))))cost: 1In the example above, there are two competingservices for computing distance between two ships:Great-circle-distance, which simply computes a greatcircle route between two points, and Land-avoidance-distance, which computes the distance of an actualpath avoiding land and sticking to shipping lanes.
Thesecond is far more accurate when near land; both forcalculating delays and in estimating fuel costs;however, the computation time is greater.3.1.3.
Clause ListsTypically, the applicability of a service is contin-gent on several facts, and therefore, several proposi-tions must all be true for the service to apply.
Tofacilitate matching the requirements of a given serviceagainst the needs expressed in an utterance, we con-vert expressions in WML to an extended disjunctivenormal form (DNF), i.e., a disjunction of conjunctions.We chose DNF because:?
In the simplest case, an expression in disjunctivenormal form is simply a conjunction of clauses, aparticularly easy logical form to cope with,?
Even when there are disjuncts, each can be in-dividually handled as a conjunction of clauses,and the results then combined together via union,and?
In a disjunctive normal form, the informationnecessary for a distinct subquery is effectively iso-lated in one disjunct.For details of the algorithm for converting an inten-sional expression to DNF, see \[7\]; a model-theoreticsemantics has been defined for the DNF.
For thesentence, Display the destroyers within 500 miles ofVinson, whose WML representation was representedearlier, the clause list is as follows:((in-class ?a display)(object-of ?a ?b)(in-class ?b destroyer)(in-class ?c interval)(in-class ?d interval)(equal ?c ?d)(starts-interval ?d VINSON)(in-class ?s length-measure)(interval-length ?d ?s)(in-class ?f length-measure)(measure-unlt ?f miles)(measure-quantity ?f 500)(less-than ?e ?f)(ends-lnterval ?c ?b))The normal form in this case is the same as thestandard disjunctive normal form: a simple conjunc-tion of clauses.
However, there ere oases where ex-tensions to disjunctive normal form are used: in par-ticular, certain expressions containing embedded sub-expressions (such as universal quantifications, car-dinality, and some other set-related operators) are leftin place.
In such cases, the embedded subexpres-sions are themselves normalized; the result is acontext object that compactly represents a necessarylogical constraint but has been normalized as far aspossible.
#S(CONTEXT :OPERATOR FORALL229:OPERATOR-VAR var :CLASS-EXP expression:CONSTRAINT expression) states that var is univer-sally quantified over the CLASS-EXP expression asvar appears in the CONSTRAINT express/on.
As anexample, consider the query Are all the displayed car-tiers c i  ?
Its WML expression is given below, followedby its normalized representation.Note that contexts are defined recursively; thus,arbitrary embeddings of operators are allowed.
Thecomponent that analyzes the DNF to find underlyingapplication services to carry out the user request callsitself recursively to correctly process DNF expressionsinvovling embedded expr~_ ;ons.
{QUERY((INTENSION(PRESENT(INTENSION(FORALL ?JX699(u(POWER(SET-TO-PRED(IOTA ?JX702(LAMBDA (?JX701)(POWER AIRCRAFT-CARRIER)(EXISTS ?JX700 DISPLAY(OBJECT.OF ?JX700 ?JX701)))T))))(OSGP- ENTITY-OVERALL-READINESS-OF?JX699 C1)))))TiME WORLD))(#s(CONTEXT:OPERATOR FORALL:OPERATOR-VAR ?JX6g9:CLASS-EXP((IN.CLASS ?JX699 AIRCRAFT.CARRIER)(IN.CLASS ?JX700 DISPLAY)(OBJECT.OF ?JX700 ?JX699)):CONSTRAINTS((OSGP- ENTITY-OVERALL- READINESS-OF?JX699 C1 ))))3.2.
FormulationFor a request consisting only of a conjunction ofliterals, finding a set of appropriate services may beviewed as a kind of set-covering problem.
A beamsearch is used to find a low cost cover.
Queriescontaining embedded subqueries (e.g., the quantifiercontext in the example above) require recursive callsto this search procedure.Inherent in the collectio/: of services covering aDNF expression is the data flow that combines theservices into a program to fulfill the DNF request.
Thenext step in the formulatior, process is data flowanalysis to extract the data ~low graph correspondingto an abstract program fulfillin~ the request.In Figure 1, the data flow graph for Display thedestroyers within 500 miles of Vinson is pictured.Note that the data base (IDB) is called to identify theset of all destroyers, their locations, and the locationof Vinson.
An expert system is being called to cal-culate the distance between pairs of locations 1 usingland avoidance routes.
A Lisp utility for comparingmeasures is called, followed by the display commandin an expert system.3.3.
ExecutionIn executing the data flow graph, evaluation at anode corresponds to executing the code in the serverspecified.
Function composition corresponds to pass-ing data between systems, Where more than onedata flow path enters a node, the natural join over theinput lists is computed.
Aggregating operations (e.g.,computing the cardinality of a set) correspond to amapping over lists.4.
Challenging CasesHere we present several well-known challeng-ing classes of problems in translating from logicalform to programs.4.1.
Deriving procedures from descriptions.The challenge is to find a compromise betweenarbitrary program synthesis and a useful class ofprogram derivation problems.
Suppose the user asksfor the square root of a value, when the system doesnot know the meaning of square root, as in Find thesquare root of the sum of the squares of the residuals.Various knowledge acquisition techniques, such asKNACQ \[15\], would allow a user to provide syntacticand semantic information for the unknown phrase tobe defined.
Square root could be defined as a func-tion that computes the number that when multipliedtimes itseff is the same as the input.
However, that isa descriptive definition of square root without any in-dication of how to compute it.
One still must syn-thesize a program that computes square root; in fact,in early literature on automatic programming andrigorous approaches to developing programs, derivinga program to compute square root was often used asan example problem.Rather than expecting the system to performsuch complex examples of automatic programming,we assume the system need not derive programs forterms that it does not already know.
For the example'The distance function takes any physical objects as its argumentsand looks up their location.230above, the system should be  expected to respond Idon't know how to compute square root.By making that assumption, we know that allconcepts and relations in the domain model, that is,all primitives appearing in WML as input to the MUScomponent, have a translation specified by the ap-plications programmer to a composition of underlyingservices.
As stated in Section 2, we further restrictthe goals of the MUS component to synthesizeprograms of a simple structure: acyclic data flowgraphs of services where one of the services is apply-ing a function to every element in a finite list.
There-fore, the arbitrary program synthesis problem includ-ing arbitrary loops and/or recursions is avoided, limit-ing the scope of inputs handleable but allowing solu-tion of a large class of problems.To our knowledge, no NL interface allows ar-bitrary program synthesis.
Most assume equivalenceat the abstract program level to synthesis of composi-tions of the select, project, and join operations of rela-tional algebra.
Our component goes beyond previouswork in that the programs it generates include morethan just the relational algebra.4.2.
Side-effects.It is well-known that generating a program withside-effects is substantially harder than generating aprogram that is side-effect free.
If there are no sideeffects, transformations of program expressions canbe freely applied, preserving the value(s) computed.Nevertheless, side-effects are critical to many inter-face tasks, for example, changing a display, updatinga data base, and setting a value of a variable.Our component produces acyclic data flowgraphs.
The only node that can have side-effects isthe final node in the graph.
This keeps the MUSprocessing simple, while still allowing for side-effectsat the final stage, such as producing output, updatingdata in the underlying systems, or running an applica-tion program having side-effects.
All three of thosecases have been handled in demonstrations of Janus.Though this issue has not been discussed inother NL publications to our knowledge, we believethis restriction to be typical in NL systems.4.3.
Col lapse of information.It has long been noted \[5\] that a complex rela-tion may be represented in a boolean field in a database, such as the boolean field of the Navy Blue filewhich for a given vessel was T/F depending onwhether there was a doctor onboard the vessel.There was no information about doctors in the database, except for that field.
In a medical data base, asimilar phenomenon was noticed \[11\]; patient recordscontained a T/F field depending on whether thepatient's mother had had melanoma, though therewas no other information on the patient's mother orher case of melanoma.The challenge for such fields is mapping fromthe many ways that may occur linguistically to theappropriate field without having to write arbitrarilymany patterns mapping from logical form to the database.
Just a few examples of the way the melanomafield might be referenced follow:Did Smith's mother ever have melanoma ?How many patients had a mother suffering frommelanoma ?Was me/anoma diagnosed for any of the patients'mothers?Our approach to this problem has been to adoptdisjunctive normal form (clause form) as the basis formatching services against requirements in the userrequest.
No matter what the form of user request,transforming it to disjunctive normal form means thatthe information necessary for a disjunct is effectivelyisolated in one disjunct.
The service represented bythe field corresponding to "patient's mother hadmelanoma" covers two conjoined forms: (MOTHER xy) (HAD-MELANOMA y).
All of the examples above,given appropriate definitions of suffer and diagnose,will have the two relations as conjuncts in the disjunc-tive normal form for the input, and therefore, will mapto the required data base service.4.4.
Hidden joins.In data bases, a relation in English may requirea join to be inferred, given the model in the underlyingsystem.
Suppose that a university data base as-sociates an office with every faculty member and aphone number with every office.
Additionally, somefaculty members may be associated with a lab facility;labs have telphones as well.
Then to answer thequery, What is Dr. Ramehaw's phone number?, therelation between faculty members and phone num-bers must be determined.
There are two possibilities:the office phone number or the lab phone number.Most approaches treat this as an inferenceproblem.
It can be visualized as finding a relationbetween two nominal notions faculty member andphone number \[1,2\].
One such path uses the relationOFFICE(PERSON, ROOM) followed by the relationPHONE(ROOM,PHONE-NUMBER).
A generalheuristic is to use the shortest path.
Computing hid-den joins complicates the search space in searchingfor a solution among the underlying services, as canbe seen in the architectures proposed, e.g., \[1,4, 9\].In contrast to the typical approach where one231infers the hidden join as needed, we believe suchjoins are normally anticipatable, and provide supportin our lexical definition tools (KNACQ) for specifyingthem.
In KNACQ \[15\], a knowledge engineer, database administrator, or other person familiar with thedomain and with frame representation specifies foreach frame (concept in KL-ONE terminology) andeach slot (role in KL-ONE terminology) one or morewords denoting that concept or role.
In addition, theKNACQ user identifies role chains (sequences of rolerelations), such as RI(A, B) and R2(B, C), havingspecial linguistic representation.
In the exampleabove, KNACQ would prompt the user to select fromsix possibilities for nominal compounds, possessives,and prepositional connectives relating PERSON toPHONE-NUMBER.
In this way, the search space issubstantially simplified, since hidden joins have beenelicited ahead of time as part of the knowledge ac-quisition and installation process.4.5.
Data coercion.At times, the type required by the underlyingfunctions is not directly stated in the input (English)expression but must be derived.
One procedure mayproduce the measure of an angle in degrees, whereasanother may require the measure of an angle inradians.
Differing application systems may assume aperson is referred to by differing attributes, e.g., bysocial security number in one, but by employee num-ber in another.
In How far is Vinson from Pear/Harbor?, one must not only infer that the positions ofVinson and Pearl Harbor must be looked up, but alsomake sure that the coordinates are of the type re-quired by the particular distance function chosen.In our approach, we assume that there are ser-vices available for translati~,g between each mismatchin data type.
For the examples above, we assumethat there is a translation from degrees to radians andvice versa; that there is a translation from personidentified by social security number to person withemployee number, and vice versa; that there is atranslation function from ships and ports to their loca-tion in latitude and longitude.
Such translations mayalready exist in the applications or may be added as anew application.
If there are n different ways to iden-tify the same entity (the measure of an angle, a per-son, the position of a vessel or port, etc.
), there neednot be (n*'2)/2 translation functions of course; acanonical representation may be chosen if as few as2n translation functions are available to provide inter-translatability to the canonical form.In constructing the data flow graph, we assumethat the canonical representation is used throughout.Then translation functions are inserted on arcs of thedata flow graph wherever the output/input assump-tions are not met by the canonical form.
Of the fivechallenging problems, this is the only one we have notyet implemented.5.
Related WorkMost previous work applying natural languageinterfaces provided access to a single system: e.g., arelational data base.
Two earlier efforts (at Honeywell\[4, 9\] and at USC/Information Sciences Institute \[6\])dealt with multiple systems.
We will focus on com-parison with their work.A limitation common to those two approaches isthe minimal expressiveness of the input language:user requests must be expressed as a conjunction ofsimple relations (literals), equivalent to theselect/project/join operations of a relational algebra.This restriction is relaxed in Janus, allowing requeststo contain negation of elementary predicates, existen-tial and universal quantification, cardinality and otheraggregates, a limited form of disjunction (sufficient forthe most common cases), and of course simple con-junction.
Wh-questions (who, what, etc.
), commands,and yes/no queries are handled, and some classes ofhelpful responses are produced.All three efforts employ a search procedure.
Inthe Honeywell effort, graph matching is at the heart ofthe search; in the USC/ISI effort, the NIKL classifier\[10\] is at the heart of the search; in our effort, a beamsearch with a cost function is used.Only our effort has been tested on applicationswith a potentially large search space (800 services);the other efforts have thus far been tested on applica-tions with relatively few services.6.
Experience in Applying the SystemThe MUS component has been applied in thedomain of the Reet Command Center Battle Manage-ment Program (FCCBMP), using an internal version ofthe Integrated Database (IDB) -- a relational database-- as one underlying resource, and a set of LISP func-tions providing mathematical modeling of a Navyproblem as another.
The system includes more than800 services.An earlier version of the system described herewas also applied to provide natural language accessto data in Intellicorp's KEE knowledge-base system,to objects representing hypothetical world-states in anobject-oriented simulation system, and to LISP func-tions capable of manipulating this data~We have begun integrating the MUS com-ponent with BBN's Spoken Language System HARC.2327.
ConclusionsThe work offers highly desirable utility along thefollowing two dimensions:?
It frees the user from having to identify for eachterm (word) pieces of program that would carry outtheir meaning.?
It improves the modularity of the interface, insulat-ing the presentation of information, such as tablei/o, from details of the underlying application(s).We have found the general approach depictedin Figure 2 quite flexible.
The approach wasdeveloped in work on natural language processing;however, it seems to be valuable for other types of I/Omodalities.
Some preliminary work has suggested itsutility for table input and output in managing data baseupdate, data base retrieval, and a directly manipulableimage of tabular data.
Our prototype modulegenerates code from forms in the intensional ogic;then the components originally developed for thenatural language processor provide the translationmechanism to and from intensional ogic and under-lying systems that actually store the data.AcknowledgmentsThis research was supported by the AdvancedResearch Projects Agency of the Department ofDefense and was monitored by ONR under ContractsN00014-85-C-0079 and N00014-85-C-0016.
Theviews and conclusions contained in this document arethose of the authors and should not be interpreted asnecessarily representing the official policies, either ex-pressed or implied, of the Defense AdvancedResearch Projects Agency or the U.S. Government.The current address for Philip Resnik is Com-puter & Information Sciences Department, Universityof Pennsylvania, Philadelphia, PA 19104.We gratefully acknowledge the comments andassistance of Lance Ramshaw in drafts of this paper.REFERENCES1.
Carberry, M.S.
Using Inferred Knowledge to Un-derstand Pragmatically Ill-Formed Queries.
InR.
Reilly, Ed., Communication Failure in Dialogue,North-Holland, 1987.2.
Chang, C.L.
Finding missing joins for incompletein Relational Data Bases.
Research Report RJ2145,IBM Research Laboratory, 1978.
San Jose, CA.3.
Hinrichs, E.W., Ayuso, D.M., and Scha, R. TheSyntax and Semantics of the JANUS Semantic Inter-pretation Language.
In Research and Development inNatural Language Understanding as Part of theStrategic Computing Program, Annual TechnicalReport December 1985- December 1986,BBN Laboratories, Report No.
6522, 1987, pp.
27-31.4.
Kaemmerer, W. and Larson, J.
A graph-orientedknowledge representation and unification techniquefor automatically selecting and invoking software func-tions.
Proceedings AAAI-86 Fifth National Con-ference on Artificial Intelligence, American Associationfor Artificial Intelligence, 1986, pp.
825-830.5.
Moore, R.C.
Natural Language Access toDatabases - Theoretical/Technical Issues.
Proceed-ings of the 20th Annual Meeting of the Association forComputational Linguistics, Association for Computa-tional Linguistics, June, 1982, pp.
44-45.6.
Pavlin, J. and Bates, R. SIMS: single interface tomultiple systems.
Tech.
Rept.
ISI/RR-88-200, Univer-sity of Southern California Information Sciences In-stitute, February, 1988.7.
Resnik, P. Access to Multiple Underlying Systemsin Janus.
BBN Report 7142, Bolt Beranek and New-man Inc., September, 1989.8.
Rich, C. and Waters, R.C.
Automatic Program-ming: Myths and Prospects.9.
Ryan, K. R. and Larson, J.
A..
The use of E-RData Models in Capability Schemas.
In Spaccapietra,S., Ed., Entity-Relationship Approach, ElsevierScience Publishers, 1987.10.
Schmolze, J.G., Lipkis, T.A.
Classification in theKL-ONE Knowledge Representation System.Proceedings of the Eighth International Joint Con-ference on Artificial Intelligence, 1983.11.
Stallard, D.G.
A Terminological SimplificationTransformation for Natural Language Question-Answering Systems.
Proceedings of the 24th AnnualMeeting of the Association for Computational Linguis-tics, New York, June, 1986, pp.
241-246.12.
Stallard, David.
Answering Questions Posed inan Intensional Logic: A Multilevel Semantics Ap-proach.
In Research and Development in NaturalLanguage Understanding as Part of the StrategicComputing Program, R. Weischedel, D.Ayuso,A.
Haas, E. Hinrichs, R. Scha, V. Shaked, D.
Stallard,Eds., BBN Laboratories, Cambridge, Mass., 1987, ch.4, pp.
35-47.
Report No.
6522.13.
Weischedel, R., Ayuso, D., Haas, A., Hinrichs, E.,Scha.
R., Shaked, V., Stallard, D. Research andDevelopment in Natural Language Understanding asPart of the Strategic Computing Program.
BBN233Laboratories, Cambridge, Mass., 1987.
Report No.6522.14.
Weischedel, R.M.
A Hybrid Approach toRepresentation in the Janus Natural LanguageProcessor.
Proceedings of the 27th Annual Meetingof the Association for Computational Linguistics,1989, pp.
193-202.15.
Weischedel, R.M., Bobrow, R., Ayuso, D.M., andRamshaw, L. Portability in the Janus Natural Lan-guage Interface.
Speech and Natural Language, SanMateo, CA, 1989, pp.
112-117.SENTENCE:"DIsplay the destroyers within 500 miles of Vlnaon.
"DATA FLOW GRAPH:EXPERT EXPERTlOB I SYSTEM I L ISP I SYSTEMFigure 1 : Data Row Graph for "Display the destroyers within 500 miles of Vinson'"Figure 2:MULTd-MODAL INPUTTEXT MENU GRAPHIC8 SPEECHI I O EV .
I .
,SES I I S ' s ' susMULTIPLE UNDERLYING SYSTEMSBBN's Approach to Simultaneous Access to Multiple Systems234
