Coling 2010: Poster Volume, pages 490?497,Beijing, August 2010A framework for representing lexical resourcesFabrice IssacLDIUniversite?
Paris 13AbstractOur goal is to propose a description modelfor the lexicon.
We describe a softwareframework for representing the lexiconand its variations called Proteus.
Variousexamples show the different possibilitiesoffered by this tool.
We conclude witha demonstration of the use of lexical re-sources in complex, real examples.1 IntroductionNatural language processing relies as well onmethods, algorithms, or formal models as on lin-guistic resources.
Processing textual data involvesa classic sequence of steps : it begins with the nor-malisation of data and ends with their lexical, syn-tactic and semantic analysis.
Lexical resources arethe first to be used and must be of excellent qual-ity.Traditionally, a lexical resource is representedas a list of inflected forms that are projected on atext.
However, this type of resource can not takeinto account linguistic phenomena, as each unitof information is independent.
This results in anumber of problems regarding the improvementor review of the resource.
On the other hand somelanguages such as Arabic, because of the potentiallarge lexicon, lends itself less easily to this kind ofmanipulation.Our goal is to propose a model for the descrip-tion of the lexicon.
After presenting the existingtheory and software tools, we introduce a softwareframework called Proteus, capable of represent-ing the lexicon and its variations.
The differentpossibilities offered by this tool will be illustratedthrough various examples.
We conclude with ademonstration of the use of lexical resources indifferent languages.2 ContextWhatever the writing system of a language (logo-graphic, syllabic or alphabetic), it seems that theword is a central concept.
Nonetheless, the verydefinition of a word is subject to variation depend-ing on the language studied.
For some Asian lan-guages such as Mandarin or Vietnamese, the no-tion of word delimiter does not exist ; for others,such as French or English, the space is a good in-dicator.
Likewise, for some languages, preposi-tions are included in words, while for others theyform a separate unit.Languages can be classified according to theirmorphological mechanisms and their complexity ;for instance, the morphological systems of Frenchor English are relatively simple compared to thatof Arabic or Greek.There are two main branches of morphology,inflectional or grammatical morphology and lexi-cal morphology.
The first one deals with context-related variations, as the rules of agreement ingender and number or the conjugation of verbs.The second one concerns word formation, gener-ally involving the association of a lexeme to pre-fixes or suffixes.3 TaggingText tagging consists in adding one or more infor-mation units to a group of characters : the token.This association is firstly performed in a context-free way, that is to say considering only the to-ken, and secondly by increasing the context size :the tagging process is subsequently repeated in or-490Figure 1: tagging schemader to merge multiple tokens.
Token merging ap-plies to polylexical units, syntactic or para-textualstructures.We distinguish two main types of resourcesthat can be projected on raw texts in order toenrich them.
The first of these resources is aset of inflected forms associated with a num-ber of information units (in the example below,the lemma and the morphosyntactic annotation ofeach form) :abyssal abyssal A--msabysses abysse N-mpThe projection of this type of resources in tex-tual corpora is quite simple.
After identifying atoken, the program only needs to check if the to-ken is included in the resource and add the infor-mation units associated with it.The second type of resources contains a set ofrules and a set of canonical forms (usually thelemma but not necessarily).
These sets are usedjointly, to produce all the inflected forms or toanalyse the tokens.
Analysis consists in determin-ing, for a given inflected form, which rule wasused, on which canonical form, in order to gener-ate it.
Then the information to be associated withthe inflected form is related to the rule found.Diagram 1 presents the place of different re-sources in the tagging process.4 Tools and resourcesSeveral concepts are related to the use of lexicalresources ; here we provide some examples oftools, theoretical as well as computational.?
resources in the form of a frozen list: Mor-phalou (Romary et al, 2004), Morfetik (Bu-vet et al, 2007), Lexique3 (New, 2006) ;?
lexical representation formalisms:DATR (Evans and Gazdar, 1996) ;?
inflections?
parsers: Flemm (Namer, 2000) ;?
complete software platforms: Nooj (Sil-berztein, 2005), Unitex (Paumier, 2002) ;?
lexicon acquisition: lefff (Sagot et al, 2006).4.1 Frozen resourcesIf this kind of resource is directly used in thetagging process, it raises many maintenance is-sues.
Moreover, in the case of languages with richmorphology, the number of elements becomes toolarge.
These lists are most often the result of in-flection engines that use canonical forms and in-flection rules to generate the inflected forms.4.2 Hierarchical lexical representationformalismsThe goal of this type of formalisms is to representthe most general information at the top-level ofa hierarchy.
There is an inheritance mechanism totransmit, specify, and if necessary, delete informa-tion along the structure.
It is possible to group un-der one tag a set of morphological phenomena andtheir exceptions.
Multiple inheritance allows anode to inherit from several different hierarchies.4.3 Inflections?
parsersThey propose a morphological analysis for a giveninflected form : they try to apply the derivationrules backwards and test whether the result ob-tained corresponds to an attested canonical form.The use of canonical forms is optional ; it providesan analysis for lexical neologisms but can causeincorrect results (Hundred is not the past partici-ple of hundre).4914.4 Software platformsUnitex / Intex / NooJ are complete environmentsfor performing linguistic analysis on documents.They are able to project dictionaries on texts andto query them.
They offer a set of tools for man-aging dictionaries, both lexical and inflectional.NooJ is the successor of Intex ; among the newfeatures, is the redesign of the architecture ofthe dictionaries.
It proposes handling simple andcompound words in a single way.
The method is amix of manipulation of characters and use of mor-phological grammars.The inflexion mechanism is based on classiccharacter handling operators as well as on wordmanipulation operators.
Here is the list of someoperators:<B> delete last character<D> duplicate last character<L> go left<R> go right<N> go to the end of next word form<P> go to the end of previous word form<S> delete next character5 Representation and structuring ofinflections: the Proteus modelWe introduce a framework capable to representand structure inflections efficiently, not only interms of resource creation, but in terms of linguis-tic consistency too.
At the inflection level we pro-pose a simple multilingual mechanism for simpleand compound forms.
It is used both to generatesimple forms and to analyse them.
Regarding thelexicon, the model allows for clusters.We distinguish three levels:?
the inflection level: determine how to pro-duce a derived form from a base form ; theatomic processing unit here is the character(i.e.
local transformation).?
the conjugation level: determine how to or-ganise family rules effectively in order toavoid redundancy ; the atomic processingunit here is the transformation rule.?
the word level: once the derived form isproduced, determine which operation is re-quired to validate the form against non-morphological rules ; the processing unithere is the token (i.e.
global transformation).The model was developed to meet the followingobjectives:1.
A verbatim description of a language doesnot allow for the analysis of unknown wordseven if their inflection is regular.
We musttherefore develop a mechanism that we canuse for both analysis and generation.
Thenwe will be able to analyse not only knownwords but also neologisms.2.
In a lexical database, where, for French, thenumber of elements reaches one million, thepresence of an error is always possible, eveninevitable.
We must therefore consider an ef-fective maintenance procedure : a dictionaryof lemmas linked to a dictionary of inflec-tions and not a read-only resource containingall inflected forms.3.
The concept of word is so complex thatwe cannot limit a resource to simple words.The model must integrate the management ofboth simple and compound words.
The onlylimit we set is syntax: the management of id-ioms, even if it is fundamental, requires theimplementation of other tools.4.
The concept of inflection varies dependingon the language.
We must build a system ca-pable of dealing with all types of affixation(prefixation, suffixation or infixation).
Thetreatment of Arabic is from this point of viewa good indicator since it uses all three typesof affixation.5.
An inflection rule, applied to a canonicalform, is never completely autonomous ; it ispart of a group.
For instance, we group to-gether all the inflections of a verb type, forall tenses.6.
The transformation is not limited to morpho-logical changes.
For instance, phonologicalphenomena can occur too.
More generallythere are treatments that cannot be modelledon simple rules.4927.
The proposed model is based on a set of sim-ple tools, it is able to easily integrate third-party applications and allows use of dictio-naries built in another environment.5.1 Inflection descriptionLet f be the inflexion function and f?1 its inversefunction, thenf(canonicalform, code) = inflectedformf?1(inflectedform, code) = canonicalformBy simplifying the model to the extreme, weuse of a rule that generates an inflected form fromits lemma.
The form is represented as a list of car-acters : (i) it shifts characters from the list to astack or vice versa (ii) and deletes or inserts char-acters in the list.
By default, the operations applyto characters placed at the end of the list of char-acters or, depending on the operator, at the top ofthe stack.
Most operators allow for the applica-tion of the inverse function for the analysis of aninflection.
Due to the operator based construction,the function has the following property:let c1, c2 be valid code and x a character string,thenf(f(x, c1), c2) = f(x, c1 ?
c2)We now present the different operators.
Theymust be sufficiently numerous, to offer the nec-essary expressive power to represent any kind ofinflection, but small enough, not to make the taskof creating the rule too difficult.P (Push) : move a character from the list to thestackD (Dump) : moves the character of the stack tothe listE (Erase) : deletes a character from the list/x/ : adds the character x at the end of the listTo simplify code writing, it is possible toindicate the number of repetitions of an operator.Here is an example of code that generates aninflected form from its lemma.Step Mot Pile Code restant1 ce?der 3PE/e`/3D/ais/2 ce?
der E/e`/3D/ais/3 c der /e`/3D/ais/4 ce` der 3D/ais/5 ce`der /ais/6 ce`deraisSteps:1?2 : stack of three characters2?3 : deleting of a character3?4 : adding the character e`4?5 : dumping three characters from the stack5?6 : addition of three characters aisThis code can inflect french verbs like ce?der (asre?ve?ler, espe?rer, .
.
.
).
However, this kind of codedoes not allow reversing the operation, i.e.
find thelemma from the inflection : the E (erase) operator,unlike other operators, is not reversible.
Thereforewe add another operator to erase this function orremove the characters to delete.\x\ : erase given character from the list (thisrule cannot be applied if the character is notpresent)The code of the previous example becomes3P\e?\/e`/3D/ais/.Since consonant duplication is a common phe-nomenon, we introduce a specific operator :C (Clone) : duplicates the last character of thelist.The code C/ing/ generates the present par-ticiple of words such as run, sit or stopThe management of prefixes requires the addi-tion of operators:] (fill stack) : transfers all the characters fromthe list to the stack[ (empty stack) : transfers all the characters fromthe stack to the list493Operator ] can prepare an addition at the begin-ning of a word since all characters are put in thestack.
We are now able to describe the inflexionof the form: move ?
unmovable.
The transfor-mation ?remove the character ?e?
at the end of aword, add ?un?
at the beginning and ?able?
end of aword?
is coded \e\]/un/[/able/.
The samecode can analyse verb constructions that end withthe character e.Processing compound words requires the addi-tion, or rather the transformation, of an operator.The difficulty here is to distinguish the differentcomponents of an expression with respect to oneor more separators (traditionally in French space,hyphen or apostrophe).P|x| (Push): moves the character of the list to thestack to meet the character xChanging the stacking operator allows us to ac-cess directly an element of an expression or acompound word.
Please note that access to dif-ferent elements of an expression is achieved bystacking and unstacking successively.
The code2P|-|/s/[ allows to form the plural of expres-sions such as brother-in-law : only the third wordfrom the end is pluralized (brothers-in-law).
Topreserve the analysis function of the model, itwould be necessary to add, symmetrically, a con-ditional popping operator (e.g.
D|x|).
However,compound words analysis is far more complex,and such an operator could not bring the solution.5.2 Management of inflexionWe have defined an XML DTD to manage the in-flections expressed in code.<flex id="n-y-p" type="final"><name>Np</name><info>Noun plural witha terminal y</info><code>\y\/ies/</code><\flex>The above definition associates n-y-p identifierwith the code \y\/ies/.
A typical inflexion ischaracterised by:?
an identifier (attribute id) is used by the de-scription language ;?
a status (optional attribute type) ;?
a name (optional element <name>) whichcorresponds to the tag associated to the in-flected form ;?
information (optional element <info>)about the inflection ;?
a Proteus inflection code (element <code>).However it is often necessary to combine sev-eral transformations : masculine/feminine andsingular/plural for nouns and adjectives, personsand tenses for verbs.
Take for example the con-jugation of a French verb in the first group in thepresent tense.
The prototypical inflection may begiven as follows:<flex id="v1ip" type="term"><name>Vp</name><info>verbesindicatif pre?sent</info><flex id="p1ns"><name>1s</name><code>/e/</code></flex><flex id="p2ns"><name>2s</name><code>/es/</code></flex><flex id="p3ns"><name>3s</name><code>/e/</code></flex><flex id="p1np"><name>1p</name><code>/ons/</code></flex><flex id="p2np"><name>2p</name><code>/ez/</code></flex><flex id="p3np"><name>3p</name><code>/ent/</code></flex></flex>In this structure we regroup all the inflectionsof a given tense.
Each inflection is : associatedto its own identifier, prefixed with the main iden-tifier, separated with a point, and associated to aname which is also a concatenation.
Note that itis the identifier that must be unique and not thename.
This mechanism allows for the expressionof variants in a paradigm (see below).
The pre-vious definition states that, for the first group ofthe present tense, French verbs require suffixes atthe end of the canonical form.
Note that this is494a generic definition that can take into account ex-ceptions, and can be apllied to any tense or mood.identifier name codev1ip.p1ns Vip1s /e/v1ip.p2ns Vip2s /es/v1ip.p3ns Vip3s /e/v1ip.p1np Vip1p /ons/v1ip.p2np Vip2p /ez/v1ip.p3np Vip3p /ent/It is also possible to group inflections with anew element (<op> with the attribute type).<flex id="vig1-1" type="nonterm"><name></name><info>first groupindicative</info><op type="add"><item value="v1ip"/><item value="v1ii"/><item value="v1ips"/><item value="v1ifs"/></op></flex>To the previous definitions we need to modifythe code in order to add a prefix operation: removethe ?er?
at the end of the lemma.
So we added thepossibility of code concatenation to a previouslydefined group.
In the example bellow the posattribute determines if the code to be added is aprefix (p) or a suffix (s).
The value attribute in-dicates the identifier of the structure upon whichthe operation is applied.<flex id="v1" type="final"><name></name><info>"er" verb</info><op type="conc" value="vig1-1"><item pos="p">\re\</item></op></flex>In some cases, modification has to be per-formed on a particular inflection.
This is donevia the application of a mask which operates on agroup of inflections and changes, possibly selec-tively, codes of inflexion.
A mask is a set of rulesapplied on code.
A regular expression on the iden-tifier (ervalue attribute) performs the selection.We use Proteus code to modify Proteus code.
Thismise en abyme seems inconsistent, since Proteushas been designed to apply on a language element.But it seemed inappropriate to introduce a newsyntax.The definition below allows to add the letter eto a form in order to maintain its pronunciation[?
].<mask id="m-ge"><info>add e after a g</info><item ervalue="v1ip\.p1np">]5D/e/[</item><item ervalue="v1ii\.p([123]ns|3np)">]5D/e/[</item><item ervalue="v1if\.p([12]n[ps]|3np)">]5D/e/[</item></mask>The previous definition transforms code as\er\/ons/ in \er\/eons/, \re\/ais/ in\re\/eais/, .
.
.
The mask is used in combina-tion with the attribute mask in a inflection defini-tion, as in the conc attribute.<flex id="v1" type="final"><name></name><info>verbes en "er"</info><op type="mask" value="vig1-1"><item value="m-ge"/></op></flex>You can build a complex inflection by using abase and applying masks successively.
The inflec-tion of the French verb neiger (to snow) can be ex-pressed using two masks.
First a mask to take intoaccount the pronunciation of the [?]
and a secondone, the weather verb mask, which is only used inthe third singular person.5.3 ApplicationsThe examples bellow show the different capabili-ties of the model.5.3.1 Neologisms in FrenchThe formation of French inflections should notcreate significant problems.
For the most com-mon languages, simple forms are less than 1 mil-lion.
Therefore, most systems use this set of in-flected forms and supply modules to guess un-known words, only when they arise.
This experi-ment is used to validate the model and to analyseunknown forms.The example below shows how we analyse anunknown form.anticonservationnistes =(/s/)=>anticonservationniste =(]/anti/[)=>conservationniste =(/niste/)=>conservation =(\e\/ation/)=>conserveThe algorithm tries to apply a code and reiter-ates the process on the result until we obtain an495attested form.
The set of rules provides a poten-tial analysis of the unknown word.
Note that therules used allow to determine the part of speech.In the example, the analysed word can be a pluralnoun or an adjective.5.3.2 Arabic verbsArabic is a Semitic language ; it uses a semiticroot to derive all the words used.
For examplefrom the root I.
J?
(which refers to the writing) itis possible to produce verb (write), noun (desk) oradjective (written).With these lemmas it is possible to agglutinateprefixes and suffixes.
The rules are very regularin morphology but also very productive.
We buildall inflexion from the semitic root.
So we have theschema: root ?
radical ?
inflected form.
Wethen define inflexion for prefix/suffix (identifierpass1term), a mask for the radical (identifierpass1radical) and a definition which com-bine both.<mask id="pass1radical"><info>add radical past</info><item ervalue=".
">]/2P\/?\/D\/?\/D/[+</item></mask><flex id="pass1" type="nonterm"><name>Vis</name><info>passe</info><op type="mask" value="pass1term"><item value="pass1radical"/></op></flex>The problem encounter with arab text is thepossible non use of all vowels.
In fact they arerarely used, generally in pedagogical or religioustext.
This mean that the context is fundamentalto interpret a text, a vowel is added only to re-move an ambiguity.
However we decide to de-scribe language fully vowelled and to manage thisspecificity in an earlier stage.The objective is to provide a resource used dur-ing an lexical analysis.
This can be done in twoways1:1We used here a transliteration version of arab writing tobe more clear.5.3.3 Old FrenchWe are developping (author reference) an OldFrench resource, as exhaustive as possible.
Onedifficulty is to consider the various alterna-tives, dialectal or chronological.
This proto-morphological problem complicates the develop-ment of the dictionary nomenclature.
We solvedthis problem by introducing an arbitrary ?lan-guage Phantom?
and by adding one level to thecomposition of the nomenclature, in the form ofa label named hyperlemma.
All derivations arefrom this entity using Proteus rules.
All variantsare generated from this item by application of suc-cessive masks.The example below shows the successive masksapplied on the inflection rules to account for thevariations of the imperfect tense.
Each mask isnamed modifxxx and corresponds to the modifica-tion of the Proteus rule for each century xxx.<flex id="vg1i-5" type="final"><name>Vii</name><info>first groupimparfait</info><op type="mask" value="v1ii"><item value="modifXI"/><item value="modifXII"/><item value="modifXIII"/><item value="modifXIIIa"/><item value="vrber"/></op></flex>6 ImplementationThis framework is not only a theoretical tool ; it isdesigned to be implemented in a tagging softwareas an autonomous module.
Based on abstract de-scriptions (Proteus code and XML language), itallows the resource creator to focus on linguisticaspects.
It is simple enough to be easily expressedin any computational language.The platform described here is developed inPython, which allows a very compact coding andcan be used for both generation and analysis.7 ConclusionOur work is part of a set of tools and resourcesdedicated to the analysis of natural language.
Wehave presented a model for the representation ofinflections coupled with a language to structurethe transformation rules.
Compound words are496handled in the same way as simple words.
Theproposed model also allows simple word identi-fication in both analysis and resource generationfunctionality.
We have presented three examplesof the use of the model, each introducing a speci-ficity: French, Old French and Arabic.
In the nearfuture we expect to begin work on the Korean,Polish and Greek.The best way to improve the framework is tocreate real, i.e.
exhaustive linguistic resources.The development of the framework can be con-sidered from several ways.The Proteus code and the XML language de-scription need stability.
In our opinion, additionof operations to take into account some languagespecificities would complicate the model withoutadding any significant improvement.
These modi-fications will take place during the third stage, theword level, where post-treatments are applied.
Forinstance, the tonic accent in Greek can move alongthe last three syllables of a word and affects theuse of the diaeresis mark in diphthongs.As far as the analysis functionnality is con-cerned, we are considering to develop specificheuristics for each language in order to guide thechoice of rules.ReferencesBuvet, Pierre-Andre?, Emmanuel Cartier, Fabrice Issac,and Salah Mejri.
2007.
Dictionnaires e?lectroniqueset e?tiquetage syntactico-se?mantique.
In Hathout,Nabil and Philippe Muller, editors, Actes des14e journe?es sur le Traitement Automatique desLangues Naturelles, pages 239?248, Toulouse.
IRITPress.Evans, Roger and Gerald Gazdar.
1996.
Datr: A lan-guage for lexical knowledge representation.
Com-putational Linguistics, 22(2):167?216.Namer, F. 2000.
Flemm : Un analyseur flexionneldu franc?ais a` base de re`gles.
Revue Traitement Au-tomatique des Langues, 41(2).New, Boris.
2006.
Lexique 3 : Une nouvelle base dedonne?es lexicales.
In Mertens, P., C. Fairon, A. Dis-ter, and P. Watrin, editors, Verbum ex machina.Actes de la 13e confe?rence sur le Traitement au-tomatique des langues naturelles, Cahiers du Cen-tal 2,2, Louvain-la-Neuve.
Presses universitaires deLouvain.Paumier, Se?bastien, 2002.
Manuel d?utilisation dulogiciel Unitex.
Universite?
de Marne-la-Valle?e.Romary, Laurent, Susanne Salmon-Alt, and Gil Fran-copoulo.
2004.
Standards going concrete : fromlmf to morphalou.
In Zock, Michael, editor, COL-ING 2004 Enhancing and using electronic dictio-naries, pages 22?28, Geneva, Switzerland, August29th.
COLING.Sagot, Beno?
?t, Lionel Cle?ment, E?ric Villemonte de laClergerie, and Pierre Boullier.
2006.
The lefff 2syntactic lexicon for french: architecture, acquisi-tion, use.
In LREC?06, Ge?nes.Silberztein, Max.
2005.
NooJ?s dictionaries.
In Ve-tulani, Zygmunt, editor, LTC?05, pages 291?295,Poznan?, Poland, April.497
