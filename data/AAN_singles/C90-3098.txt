USING THE SAME SYSTEM FOR ANALYZING AND SYNTHESIZ ING SENTENCESPh i l l ipe  R ince l  * and  Pau l  Sabat ie r  **?
Bull S.A., CE1)IAG, 68 Route de Versailles, 78430 Louveciennes, France.?
* CNRS, Groupe Intelligence Artificielle, Facult6 des Sciences de Luminy, 13288 Marseille, Cedex 9, France.ABSTRACTWe specify the advantages ofguided composition of sentencesand illustrate them with examples from Leader, a naturallanguage interface we have developped.
Guided compositionis achieved by using the same grammar for analysis and forsynthesis.
We detail the problems we have encountered andwe provide solutions for partial synthesis.
We give theprinciples of the analysis-synthesis algorithm.KEYWORDSNatural Language Interface, Guided Composition, Analysis,Syn~esis, lh'olog.1.
INTRODUCTIONThe quality of a natural language interface must be estimatednot only in terms of linguistic overage but also in terms ofprocedures dealing with unexpected expressions (incorrectformulations or correct ones, not provided by the interface).Knowi_ng that error recovery is a complex task in the"restricted" framework of prograrruning languages (limitedsyntax and rlgourously defined semantics), one can appreciatethe difficulty of endowing natural language interfaces withsuch capabilities.
One can resort to flexible parsing foranalysing "deviant" expressions typed by users \[Carbonell andHayes 1983\], but this method can mislead them about theinterface's real capabilities \[Mathieu and Sabatier 1986;S abatier 1987\].Our approach is quite different.
We havedevelopped a generator of natural language (French andEnglish) interfaces to relational databases, Leader \[Benoit etal.
1988\].
An interesting characteristic s that our system canlead the user towards provided fommlations in a user-friendlyway.
The user can compose step by step questions by meansof information dynamically synthesized by Leader.
The samesystem with the same grammar is used both in analysis andsynthesis.
We specify in this paper the advantages of guidedcomposition.
We detail the problems we have encountered andwe provide solutions for partial synthesis.
We give theprinciples of the analysis-synthesis algorithm.2, ADVANTAGES OF GUIDED COMPOSITIONWe may distinguish two kinds of conununication with naturallanguage interfaces :- a "free" mode : the user types sentences withoutknowing the limits of the interface but he hopes itwill understand him.
Trivial reality : user's freedomwill always be the freedom the system will granthim.- a guided mode : the system guides the user whilehe composes entences (guided composition).Unlike the "free" mode, with guided composition usersquickly perceive the limits of the interface.
The designerdoesn't have to program all the expressions or structureshaving the same meaning.
Unique forms and structures aresufficient.
He may forget the others.
A user-friendly interfacewith a guided composition mode must lead users towards nonambiguous formulations, as in Leader.
So, it is not necessaryto produce paraphrases for want of clarification from the user.We give now an example of a session with Leader.In this application, the system interfaces a database thatcontains information regarding Nobel Prizes.
(The originalsession is in French).The user types :Give the ...By a mere cursor return, the user asks to be guided.
AndLeader synthesizes expected expressions following the wordthe :ageaverage ofcoutLtrymannatiotualitypersonwomaP1Using a mouse, the user selects and clicks the word person.His sentence becomes :Give the person ...By a cursor return, he asks for assistance.
And Leadersynthesizes :thatwhoThe user selects who.
And so on.Give the person who ...did rugtrefusedrecehJed440 1Next step : the user selects received and decides to continuewithout may assistance until the conjonction and :Give the person who received the Nobel prize ofPhysics in 1921 and ...At tiffs point, Leader synthesizes :his~her agehis/her nationalityinAad the user completes his question :Give the person who received the Nobel prize ofPhysics in 1921 and his~her nationality ?3.
PROBLEMS BOUND TO PARTIAL SYNTHESISAfter the last word of an fimompleted sentence composed bythe user, Leader's grammar runs in synlhesis and produces alist of possible following words or expressions.
The mainproblem of this kind of synthesis (we call it partial aynthesis)is that a word (or an expression) that has been synthesized bythe system (and selected by the user to compose his sentence)must not lead to a fim~re dead end.
For exmnple, after a nounphrase tile system may synthesize the relative pronoun who ifand only if, in the application domain, there is a verb that cantake this noun phrase as subject.
If there is no such a verb, therelative pronoun who must not be synthesized.One can avoid dead ends by developping asemantical grm~unar with symbols reflecting the semantics ofthe application domain like in Tennant's menu-based system\[Tennant 1984\].
This is not the case with Leader.
Leader is agenerator of nalural lmlguage interfaces.
Leader's grammar isportable to different domains.
Symbols reflect linguisticalproperties.
Associated to particular symtx~ls, generalconditions access to the sem~mtic model of the applicationdomain.
Because of the partial synthesis problem, calls tothese conditions must be placed in tim granmaar beforeconcerned symbols.
Their evaluation is done before therewriting of symbols.The following simplified rules (in a DCG style)ilh~slrate the principle involved in the synthesis (or not) of arelative pronoun.
The general condition possible_case takesthe concept associated to the noun ~md verifies if it can be acase (agent, object, etc.)
of a verb.
Only the different values ofpossiblecase are dependant of the application domain.np --> det,noun(Concept),relative(Concept).relative(Concept) -- >{ possible_case(Concept,Case, Verb) },relative_pronoun(Case),incomplete sentence(Ccas'e,Verb).relative(Concept) --> \[1.Another problem of partial synthesis is the problem ofvariable symbols.
By variable symbols, we mean words orexpressions that are not defined in the lexicon of the systembecause they are too numerous or infinite, llke integers, dates,or proprer norms for exmnple.
If these expressions txzlong tothose following a given word, one can't synttmsize them.
Inthis case, Leader produces a message expliciting the typeassociated to the expected expressions.
For example, after theincomplete question :Give the persons who received the Nobelprize of Physics before...Leader will synthesize :<enter a year, example .
"1945><enter a person, example : Einstein>Concerning variable symlmls, Leader displays messages whenrunning in synflmsis, but collects and parses expressions whenrunning in analysis.The right placement of calls to conditions in thegranunar (not to lead to a dead end), and the management ofvariable symbols were the two major problems weencountered and solved with partial synthesis.4.
PRINCIPLES OF ANALYSIS-SYNTHI,~SISThe potential reversibility of certain programs written inProlog is well known.
So, in order to facilitate theimplementation f a granm~ar rmming tx~th in m~alysis and insynthesis, we have decided to program Leader in thislanguage.
The core of the system is a Metamo~hosisGrmnmar \[Colmerauer 1975\] using immediate Prok;g strategy: top-down, left-to-right, depth- first, non-detemfinistic.In order to synthesize all the possible expressionsfollowing a given word, the granm'tar must contain no cuts(and no negation by failure).
For example, the two followinggrmnmar rules :pp(object) --> !, np.pp(Case) -- > prep(C~s'e), npmust be replaced by the following ones :pp(object) --> np.pp(Case)--> \[ difiCase,objeet) },prep(Case),t~D.diflX, Y) is the coroutine built-in predicate thai controls at alltimes the validity of the inequalion between X and Y.
It fails assoon as X and Y become qual, and tile prognun backtracks.We give now file principles of our analysis-synthesisalgorithm.
To each word typed by the user (or selected by himin the synthesized list), one associates an integercorresponding to its position in the sentence.
For example, forthe question :2.
441Give the persons wtuo received the Nobel prize ofPhysics ?we will have the following association :Give (1) the (2) persons (3) who (4) received (5) the(6) Nobel (7) prize (8) of(9) Physics (10) ?
(11)The algorithm needs an integer, called rightmost, whose valueis the integer associated to the righmmst word accepted by thegranunar in the user's sentence.
At the beginning of theanalysis-synthesis, the value of rigthmost is 0. rigthmostincreases according to the words accepted, but rightmost neverdecreases : backtracking in the application of grammar uleshas no effect on rightmost.
The algorithm needs anotherinteger, called current, whose value is the integer associated tothe current word to be analysed in the sentence.
At thebeginning of the analysis-synthesis, the value of current is 0.current increases according to the words accepted, but alsocan decrease when backtracking occurs in the application ofgrammar rules.
For a given complete or incomplete user'ssentence, rules of grammar are applied until terminal symbols.When a terminal symbol must be applied, the following(meration is done.
If the terminal symbol expected by thegrammar ule matches with ~e current word of the sentence,we have the following sit,ration :If current > righttru'zgt, then, we do :ri@gmos: = currem"Clt/'ren\[ ~:: clgrretg "+" ielse, we do:current := current + 1I f the terminal symbol 1" expected by the grmmnar rule doesn'tmatch with the current word of the gr~mm'Lar, the situation is :If current < righztm-)st then we do nothing,else, we record T as ~m expected word instead of tirecmTent word in the sentence.At the end, if the analysis succeexts, the users's sentence isaccepted.
If it fails, we display the user's sentence until theword W whose associated integer has the value of rightmost,and we display all the terminal symbols T recorded as possiblewords fol!owing W. Then, the user selects an expected wordand comp!etes or not his sentence.
And the sentence isanalysed from tim beginning.As we mention it above, calls to conditions mayoccur in a grammar ule.
Their evaluation can produce severalsolutions, it is in fact the nature of the words encountered thatlimik~ the nunlber of solutions.
The partial synthesis imposesto place may condition in a grammar rule before the concernedsymbol in order to evaluate the condition before the rewritingof the symbol.
This method is not efficient when the rewritingof the concerned symbol leads to a part of the sentence yetaccepted.
The evaluation of the condition could be done after.So, for each call to a condition that may occur in agiammar rule, we place it before and after the concernedsymbol.
The condition will be evaluated before if :current = rightmz~stand after if :current < rightmostCohnerauer first, within tire natural language interface to adatabase on planets, Orbis \[Colmerauer and Kittredge 1982\],used the same grammar for analyzing sentences andsynthesizing expected words after an erroneous ont.
Ouralgoritlun differs from Orbis'one on the following points.
Weintroduce and manage variable symbols.
We don't re-analyzethe incomplete (or erronexms) sentence for synthesizingexpected words : we do it in one pass.
Efficiency in time isbetter by evaluating conditions before or after the concernedsymbols according to the values of current and righlmost.5.
CONCLUSIONPartial synthesis is an interesting challenge when one decidesto use the same system for analysing and synthesizingsentences.
If Prolog seems u) be a fairly technical solution,fundamental problems must be solved like writing sizable nonambiguous grannnar with natural phenomena like trroforms(pronouns, ellipsis, etc.
), or mastering the control of partialsynthesis for avoiding arty future dead end.
\[mader illustrates apath we have decid~i to follow and investigate.6, ACKNOWLEDGMENTS\[xzader has been developped at Bull CEDIAG (ArtificialIntelligence Development Center), 78430 L*mveciennes,France.
We thank Pascale Benoit and Domh-&lue Vienne fortheir contributions.7.
REFERENCESBenoit P., Rincel Ph., Sabatier P., Vienne D., A User-FriendlyNatural Language Intoface to Oracle, EuropeanOracle Users'Group Conference, Paris, 1988.Carbonell J., ttayes P., Recovery Strategies For ParsingExtragrarrgnatical Language, American Journal ofComputational Linguistics, 9, 3-4, 1983.Colmerauer A., Metamorphosis Grarmnarx, in NaturalLanguage Conummication With Computers, Bole L.Ed., Springer Verlag, 1978; First appeared as LesGrammaires de Mdtamorphose, GIA Report,Luminy, Universit6.
Aix-M~seille 2, 1975.Cohnerauer A., Kittredge R., ORBIS, 9th IntematkmaiConference on Computational Linguistics,COLING, 1982.Mathieu Y., Sabatier P., lnterfacile : Linguistic Coverage andQuery Reformulation, 11 th International Conferenceon Computational Linguistics, COLING, 1986Sabatier P., Contribution au ddveloppement d'interfaces enlangage natmel, Th~se d'Etat, Universitd Paris 7,1987.H., Menu-Based Natural Language Understanding,National Computer Conference, 1984.Tennant442 3
