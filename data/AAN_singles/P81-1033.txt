A Construction-Specific Approach toFocused Interaction in Flexible ParsingPhi l ip  J .
HayesCarnegie-Mellon UniversityPittsburgh, PA 15213Abstract ~A flexible parser can deal with input that deviates from its grammar,in addition to input that conforms to it.
Ideally, such a parser willcorrect the deviant input: sometimes, it will be unable to correct it atall; at other times, correction will be possible, but only to within arange of ambiguous possJbilities.
This paper is concerned withsuch ambiguous situations, and with making it as easy as possiblefor the ambiguity to be resolved through consultation with the userof the parser - we presume interactive use.
We show the importanceof asking the user for clarification in as focused a way as possible.Focused interaction of this kind is facilitated by a construction.specific approach to flexible parsing, with specialized parsingtechniques for each type of construction, and specialized ambiguityrepresentations for each type of ambiguity that a particularconstruction can give rise to.
A construction-specific approach alsoaids in task-specific language development by allowing a languagedefinibon that is natural in terms of the task domain to be interpreteddirectly without compilation into a uniform grammar formalism, thusgreatly speeding the testing of changes to the language definition.1.
IntroductionThere has been considerable interest recently in the topic of flexibleparsing, i.e.
the parsing of input that deviates to a greater or lesser extentfrom the grammar expected by the parsing system.
This iriterest springsfrom very practical concerns with the increamng use of natural languagein computer interfaces.
When people attempt to use such interfaces,they cannot be expected always to conform strictly to the interfece'sgrammar, no matter how loose and accomodating that grammar may be.Whenever people spontaneously use a language, whether natural orartificial, it is inevitable that they will make errors of performance.Accordingly, we \[3\] and other researchers including Weischedel andBlack \[6\], and Kwasny and Sondheimer \[5\], have constructed flexibleparsers which accept ungrammatical input, correcting the errorswhenever possible, generating several alternative interpretations if morethan one correction is plausible, and in cases where the input cannot bemassaged into lull grammaticality, producing as complete a partial parseas possible.If a flexible parser being used as part of an interactive system cannotcorrect ungrammatical input with total, certainty, then the system usermust be involved in the resolution of the difficulty or the confirmation ofthe parser's Correction.
The approach taken by Weischedel and Black\[6\] in such situations is to inform the user about the nature of thedifficulty, in the expectation that he will be able to use this information toproduce a more acceptable input next time, but this can involve the userin substantial retyping.
A related technique, adopted by the COOPsystem \[4\], is to paraphrase back tO the user the one or more parses thatthe system has produced from the user!s input, and to allow the user toconfirm the parse or select one of the ambiguous alternatives, Thisapproach still means a certain amount of work for the user.
He mustcheck the paraphrase to see if the system has interpreted what he saidcorrectly and without omission, and in the case of ambiguity, he mustcompare the several paraphrases to see which most ClOsely corresponds1This i'e~earch ~ =k~oneoreO by the Air Force Office Of Scientific ReseMch url~"Contract F49620-79.C-0143, The views anO conclusions contained in this documentthOSe Of the author and sttould not be interpreted a.s representing \[he olficial policies,eJther exl~'e~e?l or =mDlieO.
ol the Air Force Ollice of Scicmlifi?
Researcll or the US Governmentto what he meant, a non-trivial task if the input is lengthy and thedifferences small.Experience with our own flexible parser suggests that the wayrequests for clarification in such situations are phrased makes a bigdifference to the ease and accuracy with which the user can correct hiserrors, and that the user is most helped by a request which focuses astightly as possible on the exact source and nature of the difficulty.Accordingly, we have adopted the following simple principle for the newflexible parser we are presently constructing: when the parser  cannotun ique ly  reso lve a prob lem in i ts input ,  it shou ld  as/( the user  fora cor rec t ion  in as d i rec t  and  focused  a manner  as l~ossible.Furthermore, this request for clarification should not prejudice theprocessing of the rest of the input, either before or after the problemoccurs, in other words, if the system cannot parse one segment of theinput, it should be able to bypass it, parse the remainder, and then askthe user to restate that and only that segment of the input.
Or again, if asmall part of the input' is missing or garbled and there are a limitednumber of possibilities for what ought to be there, the parser should beable to indicate the list of possibilities together with the context fromwhich the information is missing rather than making the user compareseveral complete paraphrases of the input that differ only slightly.In what follows, we examine some of the implications of these ideas.We restrict our attention to cases in which a flexible parser can correctan input error or ungrammaticaUty, but only to within a constrained set ofalternatives.
We consider how to produce a focused ambiguityresolution request for the user to distinguish between such a set ofcorrections.
We conclude that:?
the problem must be tackled on a construction.specificbasis,?
and special representations must be devised for all thestructural ambiguities that each construction type can giverise to.We illustrate these arguments with examples involving caseconstructions.
There are additional independent reasons for adopting aconstruction,specific approach to flexible parsing, including increasedefficiency and accuracy in correcting ungrammaticality, increasedefficiency in parsing grammatical input, and ease of task.specificlanguage definition.
The first two of these are discussed in \[2\], and thispaper gives details of the third.2.
Construction-Specif ic AmbiguityRepresentationsIn this section we report on experience with our earlier flexible parser,RexP \[3\], and show why it is ill.suited to the generation of focusedrequests to its user for the resolution of input ambiguities.
We proposesolutions to the problems with FlexP.
We have already incorporatedthese improvements into an initial version of a new flexible parser \[2\].The following input is typical for an electronic mail system interface \[1\]with which FlexP was extensively used:the messages from Frecl Smith that atrivecl after don 5The fact that this is not a complete sentence in FlexP's grammar causesno problem.
The only real difficulty comes from *'Jon", which shouldpresumably be either "Jun" or "Jan".
FlexP's spelling corrector cancome to the same conclusion, so the output contains two complete149parses which are passed onto the next stage of the mail system interface.The first of these parses looks like:\ [Descr ip t ' ionOf  : MessageSender: \ [Oescr ip t ionOf :  PersonF i rstName: FredSurname: smith\]AfterOate: \[DesoriptionO?
: DateMonth: januaryOayOfMonth : 5\]\]This schematized property list style of representation should beinterpreted in the obvious way, FlexP operates by bottom.up patternmatching of a semanttc grammar of rewrite rules which allOwS it tO parsedirectly into this form of representation, which is the form required by thenext phase of the interface.if the next stage has access to other contextual information whichallows it conclude that one or other of these parses was what wasintended, then it can procede to fulfill the user's request.
Otherwise ithas little choice but to ask a Question involving paraphrases of each ofthe amDiguous interpretations, such as:Do you mean:t. the messages from Fred Smith that arrived after January 52. the messages from Fred Smith that arrived after June 5Because it is not focused on the source of the error, this Question givesthe user very little held in seeing where the problem with his inputactually lies?
Furthermore.
the systems representation of the ambiguityas several complete parses gives Jt very little help in understanding aresponse of "June" from the user, a very natural.and likely one in thecircumstances.
In essence, the parser has thrown away the informationon the specific source of the ambiguity that it once had.
and would againneed to deal adequately with that response from the user.
The recoveryof this lost information would require a complicated (if done in a generalmanner) comparison between the two complete parses,One straightforward solut=on tO the problem is to augment the outputlanguage with a special ambiguity representation.
The output from ourexample might look like:i'Desc r ip~.
ion0f  : MessageSender: \ [Oescr ig t ionOf :  PersonFirstName: fredSurname: smith\]Af terOate :  \ [Oescr ip t ionOf :  DateMonth: \ [Oescr ip t ionOf :  Ambigu.
i tySetChoices:  ( january  june)\]OayOfMonth: 5\]\]This representation is exactly like the one above except that the Monthslot is tilled by an AmbiguitySet record.
This record allows the ambiguitybetween january and june to be confined to the month slot where itbelongs rather than expanding to an ambiguity of the entire input as inthe first approach we discussed.
By expressing the ambiguity set ssadisjunction, it would be straightforward to generate from thisrepresentation a much m_"re focused request for clarification such as:,.30 you mean the messages from Fred Smith that arrived afterJ anuary  or June 5?A reply of "June" would also De much easier to deal with.However.
this approach only works if the aml~iguity corresponds tO anentire slot filler.
Suppose.
for example, that inste,~d of mistyping themontl~, the user omitted or ,~o completely garbled the preposition "from"that the parser effectmvely saw:the messages Fred Smith that arrived after Jan 5In the grammar used by FlexP for this particular application, theconnexion between Fred Smith and the message could have beenexpressed (to within synonyms) only by "from", "to".
or "copied to",FlexP can deal with this input, and correct it tO within this three wayambiguity.
To represent the ambiguity, it generates three completeparses isomorphic to the first output example above, except that Senderis replaced by Recipient and CC in the second and third parsesrespectively.
Again, this form of representation does not allow theSystem tO ask a focused question about the source of the ambiguity orinterpret naturally elliptical replies to a request to distinguish between thethree alternatives.
The previous solution is not applicable because theambiguity lies in the structure of the parser output rather than at one ofits terminal nodes.
Using a case notation, it is not permissible to gut an"AmbiguitySet" in place of one of the deep case markers.
2 To localizesuch ambiguities and avoid duplicate representation of unambiguousparts of the input, it is necessary to employ a representation like the oneuseO by our new flexible parser:.\ [Oescr ip t  tonOf:  MessageAml3 i guousS1 ots :(\ [Poss Jb leS lo ts :  (Sender Rec ip ient  CC)S lo tF i l l e r :  \ [Descr ip t ionOf :  PersonFirstName: f redSurname: smith\]\])Af terOate :  \ [De&cr ip t  ionOf : DateMonth: januaryOayOfMonth: 5\]\]This example parser output is similar to the two given previously, butinstead of having a Sender slot, it has an AmbiguousSIots slot.
The fillerof this slot is a list of records, each of which specifies a SlotFiller and alist of PossibleSIots.
The SIolFiller is a structure that would normally be?
the filler of a slot in the top-level description (of a message in this case),but the parser has been unable to determine exactly which higher.levelslot it shou#d fit into: the possibilities are given in PossibleSIots.
With thisrepresentation, it is now straightforward to construct a directed questionsuch as:Do you mean the messages from, to, or copied to Fred Smith thatarrived after January 5?Such Questions can be generated by outputting AmbiguousSIot recordsas the disjunction (in boldface) of the normal case markers for each ofthe Poss=bleSlots followed by the normal translation of the SlotFiller.
Themain point here, however, does not concern the question generationmechanism, nor the exact deta, ls of the formalism for representingambiguity, it is.
rather, that a radical revision of the initial formalism wasnecassar~ in order tO represent structural ambiguities withoutduplicat=on of non-ambiguous material.The adoption of such representations for ambiguity has profoundimplications for the parsing strategies employed by any parser whichtries to produce them.
For each type of construction that such a parsercan encounter, and here we mean construction types at the level of caseconstruction, conjoined list, linear fixed-order pattern, the parser muSt"know" about ell the structural ambiguities that the construction cangive rise to, and must be prepared to detect and encode appropriatelysuch ambiguities when they arise.
We have chosen tO achieve this bydes=gnmg a number of different parsing strategies, one for each type ofconstruction that will be encountered, and making the parser Switch2Nor rs this DroDlem merely an arlifact of case r~otatlon, tt would arise in exaclty the sanleway for a stanttarcl syntactic parSe Of a serltence such as tile well known "1 Sew tile G=*&rl(3Canyon flying to New York?"
The ddhcully dr=see beCauSe the ami0mgu=ty ?s structural,structural arnblt'JllJtleS c~n occur no ma~er ~nat form of structure rs crtosen.150between these strategies dynamically.
Each such construction-specificparsing strategy encodes detailed information about the types ofstructural ambiguity possible with that construction and incorporates thespecific information ecessary to detect and represent hese ambiguities.3.
Other Reasons for a Construction-SpecificApproachThere are additional independent reasons for adopting a construction-s~oecific approach to flexible parsing.
Our initially motivating reason wasthat dynamically selected constructidn.specific parsing strategies canmake corrections to erroneous input more accurately and efficiently thana uniform parsing procedure, it also turned out that such an approachprovided significant advantages in the parsing of correct input as well.These points are covered in detail in \[2\].A further advantage is related to language definition.
Since, our initialflexible parser, FlexP, applied its uniform parsing strategy to a uniformgrammar of pattern.matching rewrite rules, it was not possible to coverconstructions like the one used in the examples above in a singlegrammar ule.
A gostnominal case frame such as the one that covers themessage descriptions used as examples above must be .spread overseveral rewrite rules.
The patterns actually used in RexP look like:<?determiner "MessageAdj 14essageHead *MessageCase><%from Person><Y,s t nee Date>The first top.level pattern says that a message description is an optional(?)
determiner, followed by an arbitrary number (') of message adjectivesfollowed by a message head word (one meaning "message"), followedby an arbitrary number of message cases.
Because each case has morethan ont~ component, each must be recognized by a separate pattern likethe second and third above.
Here % means anything in the same wordclass, "that arrived after", for instance, is equivalent o "since" for thispurpose.The point here is not the details of the pattern notation, but the factthat this is a very unnatural way of representing a postnominal caseconstruction, Not only does it cause problems for a flexible parser, asexplained in \[2\], but it is also quite inconvenient o create in the firstplace.
Essentially, one has to know the specific trick of creatingintermediate, and from the language point of view, superfluouscategories like MeesageCase in the example above.
Since, we designedFlexP as a tool for use in natural language interfaces, we considered itunreasonable to expect the designer of such a system to have thespecialized knowledge to create such obscure rules.
Accordingly, wedesigned a language definition formalism that enabled a grammar to bespecified in terms much more natural to the system being interfaced to.The above construction for the description of a message, for instance,could be defined as a single unified construction without specifying anyartificial intermediate constituents, as follows:\[StructureType:  ObjectObjectName: MessageSchema: \[Sender: \ [F i l l e rType:  &Person\]Rec ip ient :  \ [F i l l e rType:  &PersonNumber: OneOrMore\]Date: \ [F J l l e rType:  &Oats\]A f te r :  \ [F J l l e rType:  &DateUseRest r i c t  ion: OescrJpt ionOnly\ ]\]Syntax: \[SynType: NounPhraseHead: (message note <?piece ?of mai l>)Case : (<%from tSender><~to ~Recipient><%dated toots><%since ~After>.- )\]\]In addition to the syntax of a message description, this piece of formalismalso describes the internal structure of a message, and is intended foruse with a larger interface system \[1\] of which FlexP is a part.
The largersystem provides an interface to a functional subsystem or tool, and istool-independent in the sense that it is driven by a declarative data basein which the objects and operations of the tool currently being interfacedto are defined in the formalism shown.
The example is, in fact, anabbreviated version of the definition of a message from the declarativetool description for an electronic mail system tool with which, theinterface was actually used.In the example, the Syntax slot defines the input syntax for a message;it is used to generate rules for RexP, which ere in turn used to parseinput descriptions of messages from a user.
FlexP's grammar to parseinput for the mail system tool is the onion of all the rules compiled in thisway from the Syntax fields of ell the objects and operations in the tooldescription.
The SyntaX field of the example says that the syntax for amessage is that of a noun phrase, i.e.
any of the given head nouns (anglebrackets indicate Oatterns of words), followed by any of the givenpostnominal Cases, preceded by any adjectives - none are given here,which can in turn be preceded by a determiner.
The up.arrows in theCase patterns refer beck to slots of a message, as specified in theScheme slOt of the example - the information in the Schema sl0t is aJsoused by other parts of the interface.
The actual grammar rules neededby FlexP are generated by first filling in a pre-stored skeleton pattern forNounPhrase, resulting in:<?determiner ,NesssgeAdJ MesssgeHead ,NessegeCass~;and then generating patterns for each of the Cases, substituting theappropriate FillerTypes for the slot names that appear in the patternsused to define the Cases, thus generating the subpatterns:<~\[from Person><%to Person><Zdated Data><Zslnce Date>The slot names are not discarded but used in the results of the subrulesto ensure that the objects which match the substituted FillerTypes and upin the correct slot of the result produced by the top-level message rule.This compilation procedure must be performed in its entirety before anyinput parsing can be undertaken.While this approach to language definition was successful in freeingthe language designer from having to know details of the parseressentially irrelevant tO him, it also made the process of languagedevelopment very much slower.
Every time the designer wished to makethe smallest change to the grammar, it was necessary to go through thetime-consuming compilation procedure.
Since the development of atask.specific language typically involves many small changes, this hasproved a significant impediment o the usefulness of FlexP.151The construction-specific approach offers a way round this problem.Since the parsing strategies and amOiguity representations are specificto particular constructions, it is possible to represent each different ypeof construction differently - there is no need to translate the languageinto a uniformly represented grammar.
In addition, the constructions interms of which it iS natural to define a language are exactly those forwhich there will be specific parsing strategies, and grammarrepresentations.
It therefore becomes possible to dispense with thecoml~ilation step reauired for FlexP, and instead interpret the languagedefinition directly.
This drastically cuts the time needed to make changesto the grammar, and so makes the parsing system much more useful.
Forexample, the Syntax slot of the previous example formalism mightbecome:Syntax: \[SynType: NounPhraseHead: (message note (?p iece  ?of mai l>)Cases : (\ [Nerker :  %from S lo t :  Sender\]\[Harker: 5;to S lo t :  Rec ip ient , \ ]\ [Ranker:  %elated Slot.
:  Date\ ]\[Harket*: ~since Slot.
:  A f te r \ ])\]This grammar representation, equally convenient from a user's point ofview, should be directly interpretable by a .parser specific to theNounPhrase case type of construction.
All the information needed bysuch a parser, including a list of all the case markers, and the type ofoblect that fills each case slot is directly enough accessible from thisrepresentation that an intermediate compilation phase should not berequired, with all the ensuing benefits mentioned above for languagedevelopment.2.
Carbonell, J. G. and Hayes, P. J.
Dynamic strategy Selection inFlexible Parsing.
Carnegie.Mellon University Computer ScienceDepartment, 1981.3.
Hayes.
P. J. and Mouradian, G. V. Flexible Parsing.
Proc.
of 18thAnnual Meeting of the Assoc.
for Comput.
Ling., Philadelphia,June, 1980, pp.
97-103.4.
Kaplan, S. J.
Cooperative Responses from a Porfab/e NaturalLanguage Data Base Quory System.
Ph.D.
Th., Dept.
of Computer andInformation Science, University of Pennsylvania, Philadelphia, 1979.5.
Kwasny, S. C. and Sondheimerl N. K, Ungrammaticalily and Extra.Grammaticality in Natural Language Understanding Systems.
Proc.
of17th Annual Meeting of the Assoc.
for Comput.
Ling, La Jolla., Ca.,August, 1979, pp.
19-23.6.
Weischedel, R. M. and Black, J.
Responding to PotentiallyUnpareeable Sentences.
Tech.
Regt.
79/3, Dept.
of Computer andInformation Sciences, University of Delaware, 1979.4.
ConclusionThere will be many occasions, even for a flexible parser, whencomplete, unambiguous parsing of the input tO an interactive system isimpossible.
In such circumstances, the parser should interact with thesystem user to resolve the problem.
Moreover, to make things as easy aspossible for the user, the system should phrase its request forclarafication in terms that fOCUS as tightly as possible on the real sourceand nature of the difficulty.
In the case of ambiguity resolution, thismeans that the parser must produce a representation of the ambiguitythat does not duplicate unambiguous material, This implies specificambiguity rel~resentations for each b/De of construction recognized bythe parser, and corresponding specific parSthg strategies to generatesuch representations.
There are other advantages to a construction-specific approach including more accurate and efficient correction ofungrammaticality, more efficient parsing of grammatical input, and easiertask.specific language development.
This final benefit arises because aconstruction.specific approach allows a language definition that isnatural in terms of the task domain to be interpreted directly withoutcompilation into a uniform grammar formalism, thus greatly speeding thetesting of changes to the language definition.AcknowledgementJaime Carbonell provided valuable comments on earlier drafts of thispaper.References1.
Ball.
J. E. and Hayes, P.J.
Representation of Task.IndependentKnowledge in a Gracefully Interacting User Interface.
Proc.
1st AnnualMeeting of the American Association for Artificiat Intelligence, AmericanAssoc.
for Artificial Intelligence, Stanford University, August, 1980, pp.116-120.\].52
