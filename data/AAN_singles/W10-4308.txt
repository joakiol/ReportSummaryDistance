Proceedings of SIGDIAL 2010: the 11th Annual Meeting of the Special Interest Group on Discourse and Dialogue, pages 51?54,The University of Tokyo, September 24-25, 2010. c?2010 Association for Computational LinguisticsMiddleware for Incremental Processing in Conversational AgentsDavid Schlangen?, Timo Baumann?, Hendrik Buschmeier?, Okko Bu?
?Stefan Kopp?, Gabriel Skantze?, Ramin Yaghoubzadeh?
?University of Potsdam ?Bielefeld University ?KTH, StockholmGermany Germany Swedendavid.schlangen@uni-potsdam.deAbstractWe describe work done at three sites ondesigning conversational agents capable ofincremental processing.
We focus on the?middleware?
layer in these systems, whichtakes care of passing around and maintain-ing incremental information between themodules of such agents.
All implementa-tions are based on the abstract model ofincremental dialogue processing proposedby Schlangen and Skantze (2009), and thepaper shows what different instantiationsof the model can look like given specificrequirements and application areas.1 IntroductionSchlangen and Skantze (2009) recently proposedan abstract model of incremental dialogue process-ing.
While this model introduces useful concepts(briefly reviewed in the next section), it does nottalk about how to actually implement such sys-tems.
We report here work done at three differentsites on setting up conversational agents capableof incremental processing, inspired by the abstractmodel.
More specifically, we discuss what maybe called the ?middleware?
layer in such systems,which takes care of passing around and maintainingincremental information between the modules ofsuch agents.
The three approaches illustrate a rangeof choices available in the implementation of sucha middle layer.
We will make our software avail-able as development kits in the hope of fosteringfurther research on incremental systems.1In the next section, we briefly review the abstractmodel.
We then describe the implementations cre-ated at Uni Bielefeld (BF), KTH Stockholm (KTH)and Uni Potsdam (UP).
We close with a brief dis-cussion of similarities and differences, and an out-look on further work.1Links to the three packages described here can be foundat http://purl.org/net/Middlewares-SIGdial2010.2 The IU-Model of Incremental ProcessingSchlangen and Skantze (2009) model incrementalsystems as consisting of a network of processingmodules.
Each module has a left buffer, a proces-sor, and a right buffer, where the normal mode ofprocessing is to take input from the left buffer, pro-cess it, and provide output in the right buffer, fromwhere it goes to the next module?s left buffer.
(Top-down, expectation-based processing would workin the opposite direction.)
Modules exchange incre-mental units (IUs), which are the smallest ?chunks?of information that can trigger connected modulesinto action.
IUs typically are part of larger units;e.g., individual words as parts of an utterance, orframe elements as part of the representation of anutterance meaning.
This relation of being part ofthe same larger unit is recorded through same levellinks; the information that was used in creating agiven IU is linked to it via grounded in links.
Mod-ules have to be able to react to three basic situa-tions: that IUs are added to a buffer, which triggersprocessing; that IUs that were erroneously hypothe-sised by an earlier module are revoked, which maytrigger a revision of a module?s own output; andthat modules signal that they commit to an IU, thatis, won?t revoke it anymore (or, respectively, expectit to not be revoked anymore).Implementations of this model then have to re-alise the actual details of this information flow, andmust make available the basic module operations.3 Sociable Agents ArchitectureBF?s implementation is based on the ?D-Bus?
mes-sage bus system (Pennington et al, 2007), whichis used for remote procedure calls and the bi-directional synchronisation of IUs, either locallybetween processes or over the network.
The bus sys-tem provides proxies, which make the interface ofa local object accessible remotely without copyingdata, thus ensuring that any access is guaranteed toyield up-to-date information.
D-Bus bindings existfor most major programming languages, allowing51for interoperability across various systems.IUs exist as objects implementing a D-Bus in-terface, and are made available to other modulesby publishing them on the bus.
Modules are ob-jects comprising a main thread and right and leftbuffers for holding own IUs and foreign IU proxies,respectively.
Modules can co-exist in one processas threads or occupy one process each?even dis-tributed across a network.A dedicated Relay D-Bus object on the networkis responsible for module administration and up-date notifications.
At connection time, modulesregister with the relay, providing a list of IU cat-egories and/or module names they are interestedin.
Category interests create loose functional linkswhile module interests produce more static ones.Whenever a module chooses to publish informa-tion, it places a new IU in its right buffer, whileremoval of an IU from the right buffer correspondsto retraction.
The relay is notified of such changesand in turn invokes a notification callback in allinterested modules synchronising their left buffersby immediately and transparently creating or re-moving proxies of those IUs.IUs consist of the fields described in the abstractmodel, and an additional category field which therelay can use to identify the set of interested mod-ules to notify.
They furthermore feature an optionalcustom lifetime, on the expiration of which theyare automatically retracted.Incremental changes to IUs are simply realisedby changing their attributes: regardless of their lo-cation in either a right or left buffer, the same setterfunctions apply (e.g., set payload).
These generaterelay-transported update messages which commu-nicate the ID of the changed IU.
Received updatemessages concerning self-owned and remotely-owned objects are discerned automatically to allowfor special treatment of own IUs.
The completeprocess is illustrated in Figure 1.Current state and discussion.
Our support forbi-directional IU editing is an extension to the con-cepts of the general model.
It allows higher-levelmodules with a better knowledge of context to re-vise uncertain information offered by lower levels.Information can flow both ways, bottom-up andtop-down, thus allowing for diagnostic and causalnetworks linked through category interests.Coming from the field of embodied conversa-tional agents, and being especially interested inmodelling human-like communication, for exam-A BCIUIU proxyWrite accessRelayData accessUpdate notificationRBuf LBufInterest setsFigure 1: Data access on the IU proxies is transparently dele-gated over the D-Bus; module A has published an IU.
B and Care registered in the corresponding interest set, thus receivinga proxy of this IU in their left buffer.
When B changes the IU,A and C receive update notifications.ple for on-line production of listener backchannelfeedback, we constantly have to take incremen-tally changing uncertain input into account.
Usingthe presented framework consistently as a networkcommunication layer, we are currently modellingan entire cognitive architecture for virtual agents,based on the principle of incremental processing.The decision for D-Bus as the transportationlayer has enabled us to quickly develop ver-sions for Python, C++ and Java, and producedstraightforward-to-use libraries for the creation ofIU-exchanging modules: the simplest fully-fledgedmodule might only consist of a periodically in-voked main loop callback function and any subsetof the four handlers for IU events (added, removed,updated, committed).4 Inpro ToolkitThe InproTK developed at UP offers flexibility onhow tightly or loosely modules are coupled in asystem.
It provides mechanisms for sending IU up-dates between processes via a messaging protocol(we have used OAA [Cheyer and Martin, 2001], butother communication layers could also be used) aswell as for using shared memory within one (Java)process.
InproTK follows an event-based model,where modules create events, for which other mod-ules can register as Listeners.
Module networks areconfigured via a system configuration file whichspecifies which modules listen to which.Modules push information to their right, hencethe interface for inter-module communication iscalled PushBuffer.
(At the moment, InproTK onlyimplements left-to-right IU flow.)
The PushBufferinterface defines a hypothesis-change methodwhich a module will call for all its listening mod-ules.
A hypothesis change is (redundantly) charac-terised by passing both the complete current bufferstate (a list of IUs) as well as the delta between52the previous and the current state, leaving listen-ing modules a choice of how to implement theirinternal update.Modules can be fully event-driven, only trig-gered into action by being notified of a hypothesischange, or they can run persistently, in order to cre-ate endogenous events like time-outs.
Event-drivenmodules can run concurrently in separate threads orcan be called sequentially by a push buffer (whichmay seem to run counter the spirit of incrementalprocessing, but can be advantageous for very quickcomputations for which the overhead of creatingthreads should be avoided).IUs are typed objects, where the base class IUspecifies the links (same-level, grounded-in) thatallow to create the IU network and handles theassignment of unique IDs.
The payload and addi-tional properties of an IU are specified for the IU?stype.
A design principle here is to make all relevantinformation available, while avoiding replication.For instance, an IU holding a bit of semantic rep-resentation can query which interval of input datait is based on, where this information is retrievedfrom the appropriate IUs by automatically follow-ing the grounded-in links.
IU networks ground outin BaseData, which contains user-side input suchas speech from the microphone, derived ASR fea-ture vectors, camera feeds from a webcam, derivedgaze information, etc., in several streams that canbe accessed based on their timing information.Besides IU communication as described in theabstract model, the toolkit also provides a separatecommunication track along which signals, whichare any kind of information that is not seen as incre-mental hypotheses about a larger whole but as infor-mation about a single current event, can be passedbetween modules.
This communication track alsofollows the observer/listener model, where proces-sors define interfaces that listeners can implement.Finally, InproTK also comes with an extensiveset of monitoring and profiling modules which canbe linked into the module network at any point andallow to stream data to disk or to visualise it onlinethrough a viewing tool (ANON 2009), as well asdifferent ways to simulate input (e.g., typed or readfrom a file) for bulk testing.Current state and discussion.
InproTK is cur-rently used in our development of an incrementalmultimodal conversational system.
It is usable in itscurrent state, but still evolves.
We have built and in-tegrated modules for various tasks (post-processingof ASR output, symbolic and statistical natural lan-guage understanding [ANON 2009a,b,c]).
The con-figuration system and the availability of monitoringand visualisation tools enables us to quickly testdifferent setups and compare different implementa-tions of the same tasks.5 JindigoJindigo is a Java-based framework for implement-ing and experimenting with incremental dialoguesystems currently being developed at KTH.
InJindigo, all modules run as separate threads withina single Java process (although the modules them-selves may of course communicate with externalprocesses).
Similarly to InproTK, IUs are mod-elled as typed objects.
The modules in the systemare also typed objects, but buffers are not.
Instead,a buffer can be regarded as a set of IUs that areconnected by (typed) same-level links.
Since allmodules have access to the same memory space,they can follow the same-level links to examine(and possibly alter) the buffer.
Update messagesbetween modules are relayed based on a systemspecification that defines which types of updatemessages from a specific module go where.
Sincethe modules run asynchronously, update messagesdo not directly invoke methods in other modules,but are put on the input queues of the receivingmodules.
The update messages are then processedby each module in their own thread.Jindigo implements a model for updating buffersthat is slightly different than the two previous ap-proaches.
In this approach, IUs are connected bypredecessor links, which gives each IU (words,widest spanning phrases from the parser, commu-nicative acts, etc), a position in a (chronologically)ordered stream.
Positional information is reified bysuper-imposing a network of position nodes overthe IU network, with the IUs being associated withedges in that network.
These positional nodes thengive us names for certain update stages, and sorevisions can be efficiently encoded by referenceto these nodes.
An example can make this clearer.Figure 2 shows five update steps in the right bufferof an incremental ASR module.
By reference to po-sitional nodes, we can communicate easily (a) whatthe newest committed IU is (indicated in the figureas a shaded node) and (b) what the newest non-revoked or active IU is (i.e., the ?right edge?
(RE);indicated in the figure as a node with a dashed line).So, the change between the state at time t1 and t2is signalled by RE taking on a different value.
This53Figure 2: The right buffer of an ASR module, and updatemessages at different time-steps.value (w3) has not been seen before, and so theconsuming module can infer that the network hasbeen extended; it can find out which IUs have beenadded by going back from the new RE to the lastpreviously seen position (in this case, w2).
At t3, aretraction of a hypothesis is signalled by a return toa previous state, w2.
All consuming modules haveto do now is to return to an internal state linkedto this previous input state.
Commitment is repre-sented similarly through a pointer to the rightmostcommitted node; in the figure, that is for examplew5 at t5.Since information about whether an IU has beenrevoked or committed is not stored in the IU it-self, all IUs can (if desirable) be defined as im-mutable objects.
This way, the pitfalls of havingasynchronous processes altering and accessing thestate of the IUs may be avoided (while, however,more new IUs have to be created, as compared toaltering old ones).
Note also that this model sup-ports parallel hypotheses as well, in which case thepositional network would turn into a lattice.The framework supports different types of up-date messages and buffers.
For example, a parsermay incrementally send NPs to a reference reso-lution (RR) module that has access to a domainmodel, in order to prune the chart.
Thus, informa-tion may go both left-to-right and right-to-left.
Inthe buffer between these modules, the order be-tween the NPs that are to be annotated is not im-portant and there is no point in revoking such IUs(since they do not affect the RR module?s state).Current state and discussion.
Jindigo uses con-cepts from (Skantze, 2007), but has been rebuiltfrom ground up to support incrementality.
A rangeof modules for ASR, semantic interpretation, TTS,monitoring, etc., have been implemented withinthe framework, allowing us to do experimentswith complete systems interacting with users.
Weare currently using the framework to implement amodel of incremental speech production.6 DiscussionThe three implementations of the abstract IU modelpresented above show that concrete requirementsand application areas result in different design de-cisions and focal points.While BF?s approach is loosely coupled and han-dles exchange of IUs via shared objects and a me-diating module, KTH?s implementation is ratherclosely coupled and publishes IUs through a singlebuffer that lies in shared memory.
UP?s approachis somewhat in between: it abstracts away from thetransportation layer and enables message passing-based communication as well as shared memorytransparently through one interface.The differences in the underlying module com-munication infrastructure affect the way incremen-tal IU updates are handled in the systems.
In BF?sframework modules holding an IU in one of theirbuffers just get notified when one of the IU?s fieldschanged.
Conversely, KTH?s IUs are immutableand new information always results in new IUsbeing published and a change to the graph repre-sentation of the buffer?but this allows an efficientcoupling of module states and cheap revoke op-erations.
Again, UP?s implementation lies in themiddle.
Here both the whole new state and the deltabetween the old and new buffer is communicated,which leads to flexibility in how consumers can beimplemented, but also potentially to some commu-nication overhead.In future work, we will explore if further gener-alisations can be extracted from the different im-plementations presented here.
For now, we hopethat the reference architectures presented here canalready be an inspiration for further work on incre-mental conversational systems.ReferencesAdam Cheyer and David Martin.
2001.
The openagent architecture.
Journal of Autonomous Agentsand Multi-Agent Systems, 4(1):143?148, March.H.
Pennington, A. Carlsson, and A. Larsson.
2007.D-Bus Specification Version 0.12. http://dbus.free-desktop.org/doc/dbus-specification.html.David Schlangen and Gabriel Skantze.
2009.
A Gen-eral, Abstract Model of Incremental Dialogue Pro-cessing.
In Proceedings of EACL 2009, Athens,Greece.Gabriel Skantze.
2007.
Error Handling in Spoken Dia-logue Systems.
Ph.D. thesis, KTH, Stockholm, Swe-den, November.54
