EFLUF  - an Imp lementat ion  o fa FLex ib le  Un i f i ca t ion  Formal i smLena StrSmb~ickDepartment of Computer and Information ScienceLinkSping UniversityS-58185 LinkSping, Swedenlestr~ida, liu.
seAbstractIn this paper we describe EFLUF - an im-plementation of FLUF.
The idea with thisenvironment is to achieve a base for ex-perimenting with unification grammars.
Inthis environment we want to allow the userto affect as many features as possible ofthe formalism, thus being able to test andcompare various constructions proposed forunification-based formalisms.The paper exemplifies the main features ofEFLUF and shows how these can be usedfor defining a grammar.
The most inter-esting features of EFLUF are the variouspossibilities to affect the behavior of thesystem.
The user can define new construc-tions and how they unify, define new syn-tax for his constructions and use externalunification modules.The paper also gives a discussion on howa system like EFLUF would work for alarger application and suggests ome addi-tional features and restrictions that wouldbe needed for this.1 BackgroundDuring the last decade there has been a lot ofwork invested in creating unification-based for-malisms and environments suitable for representingthe knowledge needed in a natural language appli-cation.
During the first years the work was concen-trated on getting more expressive :formalisms.
Thisresulted in formalisms as, for example, (Johnson andRosner, 1989), (Emele and Zajac, 1990), (DSrre andDorna, 1993) and (Carpenter, 1992).
Lately therehas also been work concentrating on providing envi-ronments for large scale grammar development, suchas (Alshawi et al, 1991) and (Krieger and Sch~ifer,1994).Even more recent is the work on GATE (Cunning-ham et al, 1996) which allows the user to combinedifferent modules in a simple way.
GATE differsfrom the systems mentioned above since it is an en-vironment hat enables to combine various kinds ofmodules into a system.
This means that a particu-lar submodule in a system built with GATE can beunification-based or of any other kind but GATE initself does not make any prerequisites on the type ofthe module.In this paper we will describe FLUF (FLex-ible Unification Formalism) (StrSmb~ick, 1994),(StrSmb~ick, 1996) and its implementation EFLUF.FLUF differs from other unification-based for-malisms in that its aim is to provide a general en-vironment for experimenting with unification-basedformalisms.
This means that the basic FLUF for-malism does only cover very basic concepts used forunification, such as terms, inheritance and a pos-sibility to define new constructions.
The user canthen tailor FLUF to his current needs by makingdefinitions or importing external modules.The work on FLUF covers both a theoretical de-scription and an implementation, see (StrSmbgck,1996) for a thorough description on the theory ofFLUF.
The implementation started out as a test-bench for experimenting with the theoretical ideas.Later on the implementation was extended with fea-tures necessary for handling larger examples.
Theseextensions basicly covers the possibility of import-ing external procedures and a powerful way of defin-ing syntax macros.
However, also with these ad-ditional features EFLUF is a unification-based for-malism and there has been no work on how to useit together with other types of frameworks.The main part of this paper will describe the fea-tures of EFLUF by discussing a small example gram-mar.
At the same time we will try to relate the var-ious features of EFLUF to similar features in otherunification-based formalisms.
After that we will givesome discussion on the experience from working withEFLUF which gives some directions for how a futuresystem could be built.702 EFLUF  - an  overv iewIn this section we will give a short descriptionof how EFLUF works by giving an example thatdemonstrates how the different features of EFLUFcan be used.
For this example we have chosento use a grammar similar to an extended DCG.In (StrSmb~ck, 1996) there are examples of howEFLUF also can be used for defining other gram-mars.C lasses  and  Inher i tance  An EFLUFgrammar is similar to an object-oriented program-ming language where the user can define classesfor the various objects he wants to handle.
Eachclass contains a set of objects which are defined byconst ructor  declarations.
A class inherits its ob-jects from the ancestors in the hierarchy.
Multipleinheritance is allowed in a slightly restricted form.To make it easier for the user to organize his defi-nitions EFLUF code can be separated into differentmodules that can be combined in various ways.
Touse DCG grammars we use a basic module contain-ing the four classes word,constraint, category andrules that represents the various DCG-ohjects weneed.#include "dcg.macro"#unifierfi le "dcgparse.pl"class ob ject .class word;isa object;constructor instances.class constraint;isa object.class lexconst;isa constraint;constructor lex:word.class category;isa object;class list;isa object;constructorconstructornil;add_elem:object,list.class rules;isa list;constructor c:category;constructor w:eord;unifier parse indef.The class word is used for representing the wordstring.
The definition constructor instances sim-ply states that the class will contain the set of ob-jects defined as words in the grammar.The classes category and constraint representgrammatical categories and general constraints.
Inour DCG-modu le  there is one subclass lexconstused to represent lexical constraints.
This class con-tains objects consisting of terms with the functorlex and one argument.The last class rules is used for representing gram-matical and lexical rules.
To build these rules thereis a need for the constructors w(_) to mark a wordand c(_) to mark a category.
We also need liststo represent the right hand side of a grammar rule.Lists are here built from the two constructors niland add_elem(_,_) and are defined from a separateclass from which ru les  inherit.Syntax  macros  In basic EFLUF syntax thegiven definition allows defining grammar ules andlexical entries in a rather complicated syntax.const ra in t  c(s ( .
.
. )
)=add_e lem(np( .
.
. )
,add_e lem(vp( .
.
. )
,n i l ) ) ;constraint w(john)=c(n(...));To provide a more convenient syntax the user isallowed to define syntax macros.
Syntax macros aredefined in Emacs Lisp and are used as a preprocessorof EFLUF files.
In the DCG-example above they aredefined in a separate file and loaded by the includestatement in the beginning of the example.
The syn-tax macros allows the two example rules above to bewritten with the simplified syntax below.granurule s ( .
.
. )
-> r ip ( .
.
. )
vp( .
.
. )
;l exru le  john n( .
.
. )
;In the examples yntax macros are also going tobe used to allow a more convienient way for definingword strings.
With syntax macros the user is allowedto write such definitions as:defword johnThis is a shorthand for defining a EFLUF ob-ject.
The full EFLUF definition without using syn-tax macros would be:object  john;i s  word.In the examples used in this articles we are alsogoing to use syntax macros to allow for a more con-vienient syntax for lists and feature structures.Externa l  p rocesses  One last thing to noteabout the class rules defined above is the unifier-statement.
This allows the user to specify an exter-nal process and in this case loads the Prolog chart-parser from (Gazdar and Mellish, 1989).
The decla-ration indef  at the end of this file means that the71parser can give more than one answer for a query.The actual code for the parser to be loaded by thisdefinition is specified by the statement un i f ie r f i l eat the top of the example.\[n the current implementation an external pro-cess could be any Prolog program that takes twoEFLUF objects as input and produces a new objectas output.
There are several ways in which externalprocesses can be used.
The parser above uses thegrammar ules defined within EFLUF for parsing.Parsing could also have been done with the generalunification operation provided by EFLUF but thechart parser provides more efficient parsing.Another common use for external processes is asan alternative for writing unification rules withinEFLUF.
For some objects EFLUF's unification rulesprovides very inefficient unification or unificationthat seldom will terminate.
In this case it is bet-ter to use an external process that provides moreefficient unification for these kinds of objects.
Anexample of this will be given when we introduce fea-ture structures into our example later in this paper.I nher i tance  versus  Subsumpt ion  Wealso want to add some linguistic knowledge intothe example.
To demonstrate generality we showtwo different representations of number and personagreement in english.
In the first representation theinheritance hierarchy is used.
With this representa-tion agreement information can be correctly unifiedby using inheritance between classes.#include "dcg.fluf"class agreement;isa constraint.class sg;isa agreement.class pl;isa agreement.class sgthird;isa sg.class sgnonthird;isa sg.A second way for the user to represent this infor-mation in EFLUF is to define a subsumption orderof objects.
The example shows the same relations asthe inheritance hierarchy but now represented as asubsumption order of atomic objects.#include "dcg.fluf"class agreement;isa constraint;const ructor  sg;constructor pl ;constructor sgth i rd ;const ructor  sgnonth i rd ;constraint sg > sgthird;constraint sg > sgnonthird;This way of defining a subsumption order by in-equalities is in EFLUF called defining constraintrelations.
The defined constraint relations can beused with the EFLUF unifier, which uses a modifi-cation of lazy narrowing by inductive simplification,(Hanus, 1992), to unify the corresponding expres-sions according to the derived subsumption order.Const ra in t  re la t ions  Constraint relationscan in EFLUF be used also together with expres-sions containing variables.
This gives the possibilityto define more general relations, and in particularfunctions can be defined in a way similar to, for ex-ample, (Johnson and Rosner, 1989) and (Emele andZajac, 1990).
Below we give an example of how ap-pending of lists can be defined.
Note that in thisexample we use = instead of >.
This means thatEFLUF will interpret he function call and its resultas identical in the subsumption order.#include "dcg.fluf"function append;result list;arguments list,list;constraint append(nil,L)=L;constraint append({EIL1},L2)={Elappend(LI,L2)}.When computing the unifications the unifier usesa mixture between lazy narrowing and inductive sim-plification.
This means that the unifier uses thegiven constraint relations to simplify an expressionas far as it can without binding any variables.
Whenthis is not possible anymore it tries to bind variablesbut only if necessary for finding a solution.
Whendoing this it must keep track of alternative bindings.The user can affect this behavior by specifying foreach constraint relation that it should be used onlyfor narrowing or simplification.
In the first case weobtain a more efficient behavior but all alternativesare not considered and the function cannot be runbackwards.
We might also sometimes lose alterna-tive answers to a query.
In the second case simplifi-cation is not used and we get a lazy behavior of thealgorithm that always investigates alternative solu-tions.To concretize this discussion we will give two ex-ample queries.
To start with, the queryappend ((a, b}, ~c, d}) =Itgives the expected answer R={a,b, c, d} using lazynarrowing combined with simplification.
The same72answer would in this case be received by using onlysimplification since it can be found without bindingany variables within the arguments of append.
Usingonly lazy narrowing would however produce the an-swer {al append({b}, {c,d}) } since this is the mostlazy answer to this query.If we instead consider the queryappend (X, Y) ={a, b, c, d}both lazy narrowing and lazy narrowing togetherwith inductive simplification will produce the ex-pected five bindings of X and Y as results.
Usingsimplification alone would however not find any an-swers since this is not possible without binding anyof the variables X or Y.Add ing  l ingu is t i c  knowledge  We willnow continue by exemplifying how rules for nounsand nounphrases can be entered into the grammar.Doing this there is a need to both specify the actualwords, the categories and constraints to be used andalso the particular grammar rules and lexical entries.#include "agreement.fluf"defword johndefword applesdefword horsesclass nhead;isa constraint;constructor nhead:lexconst,agreement.class npcategories;isa category;constructor np:constraint;constructor n:constraint.class nprules;isa rules;gramrule np(HEAD) -> n(HEAD);lexrule johnn(nhead(lex(john),sgthird));lexrule applesn(nhead(lex(apples),pl));lexrule horsesn(nhead(lex(horses),pl));Here it can be noted that we make use of the ba-sic classes for DCG when adding linguistic knowl-edge.
To make it easier to separate the grammar intosmaller modules we define the knowledge needed fornounphrases in new subclasses to the original classesdefined for DCG.Disjunctive information Next step is toextend this small grammar with information onphrases and verbs, Doing this we would like to addverbs that are either pl or nonsgthird in our spec-ification of agreement.
To avoid duplicate entriesthere is a need for disjunction.
One way to definethis in EFLUF is by defining disjunction as a func-tion with constraint relation.function or;result constraint;arguments constraint constraint;constraint or(X,Y)>X;constraint or(X,Y)>Y.An alternative more specialized way to representthis would be to add one more constructor togetherwith constraint relations into the given definition ofagreement.constructor plornonthird;constraint plornonthird > pl;constraint plornonthird > sgnonthird.Combin ing  d i f fe rent  datatypes  Todemonstrate hat it is possible to mix different struc-tures in EFLUF we are going to use feature struc-tures for representing the arguments of a verb.
Todo this we add a module containing the definitionsneeded for representing feature structures.
Notethat we use an external procedure to obtain efficientunification of feature structures.
We also need somesyntax macros to obtain a suitable syntax for writingfeature structures.#include "fs.macro"class attribute;isa object;constructor instances.class fs;isa constraint;unifier fsunify def ;constructor empty;constructor add_pair:attribute,constraint,fs.I nher i tance  o f  l ingu is t i c  knowledgeWith the given definitions verbs and phrases canbe defined.
As mentioned above feature structuresand terms are mixed for representing the constraintsneeded for phrases.
Another thing that can be notedis that we now make use of the inheritance hier-archy for structuring linguistic knowledge.
This isdone when defining various types of verbs.
For theclass verb there is a so called dimension declara-tion.
This declaration is used to specify whetherclasses are considered to be mutual disjunctive ornot.
This is very similar to multidimensional inher-itance as used in (Erbach, 1994).73#include "nounphrases.fluf"#include "fs.fluf"defat t r ibutes  agr,  subj ,  obj.defword eatdefword runsclass phead;isa constraint;constructor phead:lexconst,:~s.class verb;isa fs;dimensions sgthrdverb nonsgthrdverb /intransitive transitive.class sgthrdverb;isa verb;requires \[agr: sgthird\].class nonsgthrdverb;isa verb;requires \[agr: plornonthird\].class intransitive;isa verb;requires \[subj: _:nhead\].class transitive;isa verb;requires \[subj: _:nhead, obj:c lass  phrasecategor ies ;i sa  category ;constructor s:constraint;constructor vp:constraint;constructor v:constraint._ : nhead\] .class phraserules;isa rules;gramrules(phead(LEX,V=\[subj: SUBJ, agr: AGR\])-> np(SUBJ=nhead(NLEX,AGR))vp(phead(LEX,V));gramrulevp(phead(LEX,V : in t rans i t ive) )-> v(phead(LEX,V));gramrulevp(phead(LEX,V=\[obj: OB J \ ] : t rans i t ive) )-> v(phead(LEX,V)) np(OBJ);lexrule runsv(phead(lex(runs),_:intransitive:sgthrdverb));lexrule eatv(phead(lex(eat),_:transitive:nonsgthrdverb)).Requirements on what information an object ofa class must contain can be added by specifying arequirement definition.
Requirement definitions areinherited from the parent classes in the hierarchy.
Inthis way the user can create an inheritance hierarchywhich is similar but not identical to how inheritanceis used in other formalisms uch as TFS (Emele andZajac, 1990) or ALE (Carpenter, 1992).
In generalit can be said that the typing provided by require-ments in EFLUF is a bit weaker than the typing pro-vided in the two other formalisms.
For the momentnonmonotonic nheritance is not allowed in EFLUF.There are however theoretical results on how to in-clude this (StrSmbiick, 1995).Weighted unification Finally we want toexemplify one more possibility for the user to affectthe behavior of the unification procedure.
Supposewe want to use sets in our grammar, but we knowthat set unification will be very inefficient.
Thenwe might want the unifier to postpone unificationinvolving sets as far as possible.
This can be doneby specifying a high weight for sets which causesthe unifier to postpone unifications involving sets ifpossible.class set;isa constraint;weight 20;?
, .
.3 Sample parsesTo complete the sample grammar given in the previ-ous section we will give some examples of the resultsgiven when parsing some sentences with the givendefinitions.
These examples also show how parsingqueries are made to the EFLUF unifier.\] ?-  u f ({ jo lm, runs}: ru les ,c (_ ) ,R ) .R = c (s (phead( lex( runs) ,\ [ sub j :nhead( lex( john) ,sg th i rd ) ,agr :sgth i rd \ ] ) ) )  ?
;no\[ ?- uf({horses,eat,apples}:rules,c(_),R).R = c (s (phead( lex(eat ) ,\ [ sub j :nhead( lex(horses) ,p l ) ,agr :p l ,ob j :nhead( lex(app les ) ,p l ) \ ] ) ) ) ?
;no\[ ?- uf ({ john ,eat ,app les} : ru les ,c (_ ) ,R ) .no\[\]mmmmmmmmmmmmmm\[\]Immmmm\[\]mmnm74As can be seen by these examples a unificationquery to EFLUF is made by calling the Prolog pro-cedure uf.
This procedure takes three arguments;the first two are the expressions to be unified whilethe third is the result of the unification.
To parsea sentence the procedure is called with a sentenceas first argument.
To force the system to parse thisas a sentence instead of unifying it as a list the sen-tence is typed as belonging to the class rule.
Thesecond argument is used to say that we want some-thing that matches c(_) as result.
The reason forthis is to prevent he unifier from being too lazy andjust return the given sentence as result.As can be seen by the given examples the first twosentences give the expected structures as result ofthe parsing while the third does not give any resultdue to the difference in agreement within john andeat .4 Experience from EFLUFThe current implementation of EFLUF has onlybeen used for toy examples.
Even so, working withthis system gives ideas on how a better environmentshould be built and we will conclude this paper bydiscussing some of these ideas.
First we will discusssome general problems and give suggestions for howthese can be solved.
We will then look more speci-ficly into the problems of modularization and effi-ciency.
In particular we will suggest how this kindof system can be used as a help when building a newapplication.EFLUF has been designed to be flexible in thesense that the user should be able to decide asmuch as possible of the formalism.
This also meansthat the basic constructions provided by EFLUF arerather simple and that it is the definitions made bythe user that actually set out the constructions pro-vided in a particular application.
This has beena main goal when designing EFLUF but there isat least two major drawbacks with this idea whenthinking about building an environment for largerapplications.
The first drawback is that a generalformalism often becomes computationally ess effi-cient than a more specialized one and the secondis that it requires more knowledge of the user thanusing a more specialized one.We believe that it is possible to avoid this bydesigning a future version of EFLUF as a large li-brary of various standard efinitions.
Here we couldachieve better efficiency by providing efficient exter-nal unifiers and other processes for the modules ofthis library.
Since the user could start with thesepredefined modules the system would also be muchmore easy to use.
This idea of providing a library ofexternal procedures has previously been investigatedin (Erbach et al, 1993).This kind of library of definitions could be builtusing the possibility to structure definitions into sep-arate files.
However, the only thing in the EFLUFformalism that actually supports this division intomodules is the inheritance hierarchy.Even if EFLUF definitions are structured intoa library there is still need to support the userin managing this hierarchy.
One interesting pointhere is how the typing works.
In EFLUF we haveadopted an idea similar to (Carpenter, 1992) whichin EFLUF means that the system should be able tojudge the type of an expression by only knowing itsfunctor and number of arguments.
When consider-ing building large applications it might be better touse the type hierarchy for distinguishing various def-initions.
This means that it should be possible to usethe same name for different constructors in differentmodules and that the system uses the typing as ahelp to distinguish which of these the user means,similar to module constructions used in many pro-gramming languages.As said above one major drawback with a generalformalism is that it gets less efficient.
In EFLUF wehave tried to improve this by providing ways for theuser to affect the behavior of the unification algo-rithm.
This can be done in three ways.
First theuser can specify if equations hould be used only forinduction or for narrowing.
Secondly he can get theunifier to avoid some classes by specifying weights.At last he can also provide his own more special-ized and efficient algorithms.
Other formalisms al-low similar ways of affecting the unification algo-rithms, for instance RGR (Erbach et al, 1993) andTDL (Krieger and Sch~fer, 1994).An interesting use of a system like EFLUF is asa tool for supporting the development of a linguis-tic application with both grammar and specializedunification algorithms.
This can be done in the fol-lowing way.
First, the EFLUF system can be used tocompare how well different constructions are suitedto describe some subparts of the linguistic input.When the user has decided that some constructionis relevant o his application, the performance of theEFLUF system can be improved by defining special-ized unifiers and syntax macros for this construc-tion if they were not already provided by EFLUF.The EFLUF system can then be used for definingand testing grammars and lexicons.
Further syntaxmacros can then be defined to provide a syntax thatis the same as the syntax required for the final gram-mar.
In parallel with the development of grammarand lexicon the work on developing a more efficientimplementation can be started.
While developingan implementation much of the code for the syntaxmacros and specialized unifiers can be reused.5 Comparison with other systemsFinally we want to pinpoint the most important fea-tures within EFLUF and give some comments onhow these relates to other formalisms.75The major idea when defining EFLUF was to letthe user himself define all the constructions he needs.The work on EFLUF shows that it is possible to pro-vide a formalism where the user is allowed to definealmost everything.
This is a difference to most otherunification-based formalisms which sees the possibil-ity to define the constructions as an extension to theformalism and not as a basic concept.The design of EFLUF can be seen as having thepossibility of defining own constructions as a kerneland then the typing system is built on top of these.This is also the case for CUF and TFS while, forinstance ALE, is designed with typing as the mostbasic concept and the possibility to define construc-tions as an add-on.
It seems that formalisms de-signed with the possibility to define own construc-tions as a basic concept instead of as an add-onachieve a higher level of flexibility since the newdatatypes defined are better integrated into the for-malism.As for the typing system in EFLUF, variantsof typing have been investigated and employed.EFLUF can handle both open- and closed-world rea-soning, maximal and nonmaximal typing and pro-vides two different kinds of typing through construc-tor and requirement definitions.
Most other systemsdo not provide this rich variety of typing strategies.One important way of achieving a better overallperformance of EFLUF is to allow the user to af-fect the behaviour of the unification algorithm.
InEFLUF only two such possibilities have been im-plemented.
Other formalisms, especially CUF andTDL, offer other possibilities that can be incorpo-rated in future versions of EFLUF.The idea of allowing a general constraint solverto call more efficient specialized unifiers is the mostpromising way of achieving high efficiency withina general constraint solver.
Other formalisms alsohave this feature, for instance, being able to use ex-ternal constraint solvers in ALEP.
However, EFLUFcombine the external constraint solver with a generalpossibility for the user to define new datastructureswithin the system.An interesting question is how EFLUF relates tothe GATE system.
In GATE it is possible to com-bine modules working on a text into a system bydefining in which order they should process the text.EFLUF is orthogonal to this since it provides a wayfor putting together submodules into a larger mod-ule defining for instance the behaviour of a parser.An interesting line for future work would be to in-vestigate if this could be done in a similar and assimple way as it is done in GATE and if it would bepossible to integrate the two systems.6 Conc lus ionThis paper exemplifies how EFLUF can be used fordefining a small grammar.
This formalism containsconstructions for allowing the user to decide whatconstructions are needed for his application.
Theimplementation also allows the possibility to importexternal procedures, to divide the definitions intomodules and to define a suitable syntax for his con-structions.Experience from working with this system showsthat it would be possible to use these ideas as a ba-sis for a system for developing various grammars.
Inthis case we would need to build a library of defini-tions as a base for the user to start working with.This kind of system would be an interesting tool forexperimenting with unification grammars.The experience also shows that even thoughEFLUF provides basic constructions for modular-izations there is a need for better support for theuser.
This would, for instance, be to supply supportfor avoiding name clashes.7 AcknowledgementsThis work has been founded by the Swedish Re-search Council for Engineering Sciences.
I wouldalso like to thank Lars Ahrenberg and GSranForslunds for helpful suggestions on this paper.ReferencesH.
Alshawi, D. J. Arnold, R. Backofen, D. M. Carter,J.
Lindop, K. Netter, S. G. Pulman, J. Tsulii,and H. Uzskoreit.
1991.
Rule formalism and vir-tual machine design study.
Eurotra ET6.1.
Fi-nal report, SRI International, Cambridge Com-puter Science Research Centre, 23 Mille's Yard,Mill Lane, Cambridge CB2 1RQ.Bob Carpenter.
1992.
The Logic of Typed FeatureStructures with Applications to Unification Gram-mars, Logic Programs, and Constraint Resolution.Number 32 in Cambridge Tracts in TheoreticalComputer Science.
Cambridge University Press.Hamish Cunningham, Yorick Wilks, and Robert J.Gaizauskas.
1996.
GATE-  a general architec-ture for text engineering.
In Proceedings of the16th International Conference on ComputationalLinguistics, volume 2, pages 1057-1060, August.Copenhagen, Denmark.Jochen DSrre and Michael Dorna.
1993.
CUF - aformalism for linguistic knowledge representation.In Jochen DSrre, editor, Computational Aspectsof Constraint-Based Linguistic Description L Au-gust.
Deliverable R3.1b.Martin C. Emele and R~mi Zajac.
1990.
Typed uni-fication grammars.
In Proceedings of 13th Inter-national Conference on Computational Linguis-tics, volume 3, pages 293-298.
Helsinki, Finland.Gregor Erbach, Mark van der Kraan, Suresh Man-andhar, M. Andrew Moshier, Herbert Ruessink,76Craig Thiersh, and Henry Thompson.
1993.
Thereusability of grammatical resources.
DeliverableD.A.
: Selection of Datatypes LRE-061-61.Gregor Erbach.
1994.
Multi-dimensional in-heritance.
CLAUS-Report 40, Universit~it desSaarlandes, FR 8.7 Computerlinguistik, D-66041Saarbriicken, Germany.Gerald Gazdar and Chris Mellish.
1989.
NaturalLanguage Processing in Prolog.
Adisson WesleyPublishing Company.Michael Hanus.
1992.
Lazy unification with induc-tive simplification.
Technical report, Max-Planck-Institut fur Informatik, Saarbiicken.Rod Johnson and Michael Rosner.
1989.
A richenvironment for experimentation with unificationgrammars.
In Proceedings of~th Conference of theEuropean Chapter of the Association for Compu-tational Linguistics, pages 182-189.
Manchester,England.Hans-Ulrich Krieger and Ulrich Sch~ifer.
1994.
TDL- a type description language for HPSG.
Part 2:User guide.
Technical report, DFKI Saarbriicken.Lena Str6mb~ick.
1994.
Achieving flexibility in uni-fication formalisms.
In Proceedings of 15th Int.Conf.
on Computational Linguistics (Coling'94),volume II, pages 842-846, August.
Kyoto, Japan.Lena StrSmb~ick.
1995.
User-defined nonmonotonic-ity in unification-based formalisms.
In Proceed-ings of the 1995 Conference of the Associationfor Computational Linguistics, June.
Cambridge,Massachusetts.Lena StrSmb~ick.
1996.
User-Defined Constructionsin Unification-Based Formalisms.
Ph.D. thesis,LinkSping University, Department of Computerand Information Science, LinkSping University, S-581 83 LinkSping, Sweden.77
