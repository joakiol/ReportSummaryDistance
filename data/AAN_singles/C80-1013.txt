HIERARCHICAL MEANING REPRESENTATION ANDANALYSIS OF NATURAL LANGUAGE DOCUMENTSToyo-aki NISHIDA and Shuji DOSHITADepartment of Information ScienceFaculty of Engineering, Kyoto UniversityYoshida-honmachi, Sakyo-ku, Kyoto, 606, JapanAbstractThis paper attempts to systematize naturallanguage analysis process by (I) use of apartitioned semantic network formalism as themeaning representation and (2) stepwisetranslation based on Montague Grammar.
Themeaning representation is obtained in two steps.The first step translates natural language intological expression.
The second step interpretslogical expression to generate networkstructure.
We have implemented set of programswhich performs the stepwise translation.Experiments are in progress for machinetranslation and question answering.i.
IntroductionConventional AI systems dealing with naturallanguages paid much efforts on the problem, howto translate natural language input into theinternal knowledge structure such as microPLANNER statements\[14\], semantic networks\[6\],frames\[l\], etc.
Most of these systems directlytranslate input sentences into task orientedinternal structure.
The architecture of thesesystems will be much simplified if systematicmeaning representation and analysis method basedon a formal theory is incorpolated.This paper proposes a stepwise translationsystem based on Montague Grammar (MG forshort)\[3\].
Partitioned semantic network\[6\] isemployed as a meaning representatin.
Inputsentence is firstly translated into logicalexpression and then semantic network isgenerated by interpreting it.
Semantic networkis the output of the natural language analyzer.This will be further compiled into task orientedrepresentations to be used by a task orientedproblem solver.
This paper concentrates on thenatural language analyzer.
The following is asummary of our approach:NATURAL LANGUAGE ANALYZER& LE .&.
PSN - - - .
task orientedrepresentationswhere NL: natural language,LE: logical expression,PSN: partitioned semantic network,T: translation mapping,I: interpretation mapping.We have developed natural language analyzersfor English and Japanese respectively.
Thispaper describes the one for English.
Theexperiments are in progress with these systems.The applicability of the proposed approach isdiscussed briefly.2.
Overview of the approachThis section gives the readers an overviewof the system by illustrating an example.Before illustration we shall present theformalisms of LE and PSN.LE -- lo$ical expressionThe notion of LE is based on Cresswell's%-categorial language\[2\].
The following is thesyntax of LE:- the set of syntactic categories (Syn): twobasic categories are used, i.e., 0 ofsentence and 1 of name.
Given categoriesT,O~, ... ,O,, then <T,Ol, ... ,On> is thecategory of a mapping that makes anexpression of category T out of expressionsof category ol, ... ,~,  respectively.- the set of symbols (F): F = #~y~FO, where Fois a finite set of symbols, and if Ol#o 2then FO,~F~=~.- the set of variables (X): X= ~5~Xo,  whereXo is a set of variables such that if ~i#o~then X~znXa~=~ , and that intersection of Fand X is empty.- the set of expressions (E): E = ~ ~E~,  whereE~ fills the following properties:(i) Xo GEo,(ii) FocE~,(iii) if ~ gE<T,Oi, ... ,~a> and~I, ... ,~gEot ,  ... ,E~a,then the expression ~(~I, ... ,~n) ?ET,(iv) if B gXo and ~cET,then the expression 18\[~\] e E<Y,O>,where I is a distinguished symbol in E.PSN -- partitioned semantic networkPSN denotes the semantics of LE.
The notionof network partitioning is based on Hendrix'sK-net \[6\].
The constituents of PSN are:- a space which denotes a possible world- a typed nodes- an arc with a case label85SENTENCENGDET NOUN /Every manVP / \VT NG / / \DET NOUNI I loves a woman((EVERY MAN) (LAMBDA X ((A WOMAN) (LAMBDA Y (LOVE X Y)))))~E~MAN)  (LAMBDA~~(LAMBDA Y (LOVE X Y))))EVERY MAN LOVE (A WOMAN)I I A A WOMAN I IEvery man loves a woman(a) the syntax tree.
(b) the semantic tree.Fig.
3.
Syntax analysis and generation of LE for the sentence,"Every man loves a woman.
"Sometimes linear notations are used instead ofPSN structure.
The linear notation can befurther interpreted by meta language \[8\],however this is beyond the scope of this paper.Fig.
1 illustrates PSN structures together withlinear notations.AND(P,Q) OR(P,Q) NOT(P) V?X.P(?X)(a) (b) (c) (d)ANY j I3?X.P(?X) V?X.B?y.p(?x,?Y) 3?y.V?X.P(?X,?Y)(e) (f) (g)Fig.
i.
Basic PSN structures,(with linear notations).Some special structures are used to denoteintensional entities.
See fig, 2 below.I .,l p~_i .
.
, ,  ?X ~" D.., ~ P SETOF I ?x 1 1INDEF\[?X; P(?X)\]of.
gx\[p(x)\]DEF\[?X; P(?X)\] SETOF\[?X; P(?X)\]of.
Ix\[p(x)\] el.
{xlp(x)}Fig.
2.
Intensional structures in PSN.Overview of the meanin$ analysis processNow we illustrate an example.
Consider thefollowing simple sentence:(EX-I) Every man loves a woman.
(STEP i) Morpholo$ical analysisInput sentence is analyzed by consultingdictionary in which LE expression andgrammatical category are assigned to each word.For the given sentence (EX-i), we obtain:Every: cat=DET, sem=EVERYman: cat=NOUN, sem=MANloves: cat=VT, sem=LOVE, (form=+S)a: cat=DET, sem=Awoman: cat=NOUN, sem=WOMAN(STEP 2) Syntax analysis and seneration of LEMorphologically analyzed sentence is furtheranalyzed by a set of grammar rules.
Eachgrammar rule consists of syntactic generationpart and semantic composition part.
For thesake of illustration, let the grammar rules be:SENTENCE -->NG+VP,sem=list\[sem\[NG\];sem\[VP\]\]NG -->DET+NOUN,sem=list\[sem\[DET\];sem\[NOUN\]\]VP -->VT+NG,sem=Iist\[LAMBDA;?X;list\[sem\[NG\];list\[LAMBDA;?Y;list\[sem\[VT\];?X;?Y\]\]\]\]The syntax analysis and semantic composition aredone in parallel.
If one of them detectsanomaly, the application of the rule is aborted.Fig.
3 illustrates the result of the syntaxanalysis and semantic composition for ourexample.
The syntax tree shows the phrasestructure of the sentence.
The semantic treeshows the history of semantic composition.
Theroot node of the semantic tree is the LE (inLISP notation) obtained from the sentence.
(STEP 3) Interpretatign of LEExtracted LE is evaluatedgeneration procedure as follows:by a network(i) interpretin$ (EVERY MAN)A fragment of a universal quantification isgenerated.86(2) intepretin$ (A WOMAN)An intensional node is generated.MA,Jante~c?n~se~INDEFA WOMA " ~' - N(3) interpretatin$ LOVEA relational node for the two placepredicate LOVE is generated.I "7- ~ a /  \.o .\[ WOMAN\]INDEF~,- ?Y~' , :!\](4) to replace the OBJECT slot of LOVEby its extensi0nSince the verb "love" is an extensionalverb, the OBJECT slot is extensioned, i.e., isreplaced by an existentially quantifiedvariable.
In our system new individual node isgenerated in the sense of Skolem constant.
Wetreat scope ambiguity at this time; if thisSkolemization is to be done in a local world,scope ambiguity is announced.
In this casethree ambiguities are detected as for where theSkolemized node is placed, i.e.,(i) the innermost space ~3:V?X.\[MAN(?X) -~.~?Y\[LOVE(?X,?Y)\]\],(ii) the middle space ~2:V?X.3?Y\[MAN(?X) -~ ?Y\[LOVE(?X,?Y)\],(iii) the outermost space ml:H?Y.V?X\[MAN(?X) --~ LOVE(?X,?Y)\].Since the reading (i) and ( i i )  are logicallyequivalent, there are essentially twoambiguities.
If the reading (i) is selected,the final network structure is:' IMP IES ANY ~ m~-k_~.~.~.~J  LOVE WOMAN\ [ - " - i , ?X  ,, - - - - - - - -  'Comments on scope ambiguityOne of the interesting feature of MG is thetreatment of scope ambiguity of quantification.In MG, scope ambiguities are captured asambiguities of semantic composition.
However,considering the following two points:- how to filter out redundancies; sometimesthis redundancy is reduced in theinterpretation process,- the resulting parsinginaccurate readings,sometimes involvesit is plausible to treat scope ambiguities inthe interpretation process as shown in the aboveexample.3.
Implementation of translation mapping (T)This section treats the translationmapping T. Firstly, we show how we associate LEwith each phrase of English.
Then we describethe rule based parser.The association of LE with En$1ish phrases(l) Simple sentenceSimple sentence is composed of a subject anda verb phrase.
Subject is a noun phrase.
TheLE for a noun phrase is in category <0,<0,i>>.The LE for a verb phrase is in category <0,i>.The LE for a sentence is a functionalcomposition of an NG and a VP.
See thefollowing illustration:np(vp) e E0n ~ v p  e E<O,i>(2) Verb phraseBasic part of a verb phrase is composed ofeither an intransitive verb or a transitive verbplus an object.
For example, The LE for aphrase "have a book" is obtained as follows:Ix 1\[ (a(book)) (ly l\[possess(x,y) \]) \] e E<0,1>possess ~ E<O,i,i> a(book) e E<0,<0,1>>(3) Noun phraseA noun phrase maps a one-place predicateinto a sentence, that is, in category <0,<0,i>>.The constituents of a noun phrase are:- determiner (DET) in E<<O,<0,1>>,<0,1>>- number (NBR) in E<<0,1>,<0,1>>- adjective (ADJ) in E<<0,i>,<O,i>>- head noun (NOUN) in E<0,1>- plural morpheme (+S) in E<<0,1>,<O,I>>- post modifier (Q) in E<<0,1>,<0,1>>(example) "the two efficient algorithms"the(two(*pl(efficient(algorithm)))) E E<O,<0,1>>the~two (*el (~ef  ficient (algorithm)))~o *m~i fe f :  \[cie~nt(~l ith "efficient(algorithm) *plI Ithe two efficient algorithm +s(DET)(NBR) (ADJ) (NOUN) (+S)8 7(4) Postmodifier(i) Relative clauseA relative clause is composed of the symbol'which' and a sentence.
'Which' makes apostmodifier of a noun out of the sentence.
Aspecial symbol #ante (in E<O,<0,1>>) is suppliedfor the eliminated antecedent in the relativeclause.
See the following example:g E<<0,1>,<0,1>>which (#ante (Ix, \[ (a (input)) (ly I \[accept (x, y) \] ) \] ) )which #ante (/Ix I \[ (~nput ) )  (ly I \[accept (x, y) \] ) \] )/(a (input)) (lye \[accept (x,y) \] ) \] #an\[e xXlC / ' ' ' - -accept a (input)which qb accept(s)  a put(ii) Adjective prepositional phraseThe LE for a preposition is in category<<0,0>,i>, that is, makes an adverb out of aname.
The LE for an adjective prepositionalphrase is constructed using a special symbol*ape E<<<<0,1>,<O,i>>,i>,<<0,0>,i>>.
Roughlyspeaking *ap converts an preposition into "anadjective preposition" which makes an adjectivephrase out of a name.
See the following example:.
.
.
.
.
?
E<<0, i>, <0,i>> Ip< n 1~\[~yl\[(theisystem))~'~- ~ (tx, \[ ((*ap (of)) (x)) (p (y)) \]) \] \]*ap (of) the (system)of the system(5) Noun clauseA noun clause is constructed from a keyword  (e.g., "that", "whether", etc) and acomplement sentence.
The LE for the keywordmaps a sentence into a noun phrase, that is, incategory <<0,<0,1>>,0>.
See the followingexample:whether(it(Ix_\[(the(input)) _<^ <^ _>>x ,y ) \ ] ) \ ] ) )  e~ U, U , l/ t (XX l \ [ ( the( Inp~\ [accept (x ,Y ) \ ] ) \ ] )whether it accept the input(WHETHER) (SENTENCE)(6) MoodWe treatuniformly.different mood of a sentenceDeclarative is default.Interrogative is denoted with a symbol #QUES.#QUES may be paraphrased as:Ip\[I(Ix1\[(you(ly1\[P(IZl\[aSk(x,Y,Z)\])\]))\])\]~"I ask you .., " e E<0,<0,<0,1>>>Indirect questions and direct questions aretreated uniformly.
For YES-NO questions, asymbol (whether) is used which maps asentence into a noun clause.
For example,"Does he run?"
~#QUES(whether(he(run))) EE0For WH-questions, see the following example:"Who runs?"
~#QUES(who(#ante(run))) E E0where, the symbol (who) maps a sentence intoa noun clause.- Imperative is denoted with a symbol #IMP.#IMP may be paraphrased as:%p\[I(lXl\[(you(lYl\[P(lZl\[order(x,y,z)\])\]))\])\]~"I order~you .~. "
g E<0,<0,<0,1>>>For example,T"Take it.
"~#IMp(inf(Ix\[it(ly\[take(x,y)\])\]))6 E0(7) Other featuresSome other features are shown by example.
(i) possesivee E<0,<O,i>>l~n 15 (the(ship)) (%x1\[ ((*poss(x)) (name)) (z) \])\]l~n 1~l~n 1~(the(ship)) name"~'~" (lx%'~f(*poss (x)) (y)) (z) \])) \] \] \[~ ~ .
E E<<0,<0,1>>,<0,1>> I the(ship) *possthe ship 's name(NG) ('S) (NOUN)where *posse E<<<0,<0,1>>,<0,1>>,i>.
(ii) PassiveE<0,1>%Yl \[ (the (automaton))(Ixl~*psub~ ~accept ) ) (Y ) ) \ ] ) \ ]*en(accept) %So\[ (the(automaton))(Ix I\[ (*psubj (x)) (s) \]) \]/ ~  *psubJ the(automaton) /be/ acc~epted Jy thS  ~u~tomatonwhere *ene E<<0,1>,<0,1,1>>,*psubj E E<<0,O>,i>.A rule based parserThis section describes a computer programwhich analyzes input sentence and translates itinto LE.
The set of rules defined in thissection so far are given to the parser in thefollowing format:<advice>, <score>A ~<sem>where ~ is a sequence of nonterminalsor nonterminals with holes.88The <advice> section treats syntaxaugmentation of a rule by means of messagepassing and testing mechanism.
A program isembedded which tests whether the messagesreceived from descendants are consistent andwhich may also send messages to its parent.These messages convey syntactic informationabout number, person, ease, verb form, ~tc.
Theformat of a message is:... .> . )
( <attributei>=<value I ..For example, see the following illustration:PSN=3NBR=SGLCLAUSE"--2 ~P/ ~VERB-FORN=+SHe has a book.The <sem> section is a semantic compositionprogram which will construct LE for the nodefrom decendant nodes.
In  implementing programs,the use of semantic markers is effective.
Asemantic marker conveys some auxiliaryinformation approximately describing semanticconstraints.
The LE and semantic markers for anode are packed into a data structure, called aword frame D and manipulated by <sem> sectionprograms.The <score> section determines the priorityof the rule.
A rule with the highest prioritywill be tried first.The grammar system has a feature that allowsa user to write elimination rules directly.
Forexample, the following is a rule for a relativeclause:NP -~NP+(CLAUSE-NP)This means that a relative clause is a clausewlth Just one NP eliminated.
The semanticcoupling of the antecedent and the eliminatednoun phrase is described in the <sem> section ofthe rule.Now we shall go into the detail of theparser, called EASY (for the English AnalysisSYstem).
The organization of EASY is summarizedin the following diagram:input sentenceI MORPHOLOGiCAL dictionar~ANALYZERIRULE ~ interna l  ~PRE-  ~externa l~IINTERPRETER I Irule I ;COMPILER~ ~grammar J\structure/ \rule /LEBefore starting parsing, given set of rulesare pre-compiled.
Nonterminal nodes areconnected together and a data structure likeATNG is generated.
For example, if we compilethe example grammar given in section 2, thefollowing structure (called an expectation path)is generated for the nonterminal DET:DET ~ NG ~ SENTENCE(NOUN) (VP)This reads that a DET will grow up to be an NGif a NOUN follows it, and the NG will, in turn,grow up to be a SENTENCE if a VP follows it.The rule interpreter analyzes input sentencewith this compiled rules and a dictionary.
EASYis a top-down parser and reads input sentencesfrom the left to the right.
EASY starts parsingby expecting the node SENTENCE.
The main loopof the rule interpreter is:- test if the current word has an expectationpath to the expected node,- if the path is found, select the path withthe highest priority and save other paths,- if no path is found, try the following tworules: (i) try a left recursive rule sincethis type of rule is not compiled in thepre-compile phase, and (~) test if theexpected node is eliminated via antecedentelimination rule,- if both of them fail, memorize the failureand backtrack.4.
Implementation of interpretation mapping ~I)The interpretation mapping I generates apartitioned network structure as a denotation ofthe meaning of a sentence.We don't use the truth-conditionalformalism.
If complete knowledge about theworld is givens a computer program can simulatethe model to compute the truth value as in \[4\]or \ [7 \ ] .
However in the actual situation ofnatural language understanding process, completeknowlegde cannot be given, but only partialknowledge is available.
Accordingly, it isplausible that new knowledge is acquired from agiven sentence in the context of old knowledgestructure.
For this purpose, Montague's truthconditional approach is indirect and more directa programming language.In what follows we try a direct approach.The style of generating networks resemblesScott-Strachey's semantic function \[13\] whichgenerates a denotation from a statement ofprogramming language.In order to generate network structure, weuse a system which consists of a supervisorfunction GEN plus dictionary, The arguments ofthe supervisor are:(LE, space#, environment, message).LE is a logical expression.
The space#specifies the space in which LE is interpreted.The environment specifies the denotation of eachvariable by a llst of variable-denotation pairs.The message is used for communication betweennetwork generating word specialists.A dictionary entity for each lexicon of LEcontains a case pattern or an embedded word89specialist program.Interpretation of the LE for each categoryIn what follows we use linear notation ofPSN beacuse of the space limitation, and werefer to the LE for each category simply bythe category name.
(i) Interpretation of a sentenceThe meaning of a simpie sentence is governedby the meaning of the verb.
A dictionary entityfor a verb includes a case pattern for the verb.According to the verb type, the case patternlooks like:intransitive verb: ((SUBJ, EXT, ... )),extensional transitive verb:((ACTOR, EXT, ... ) (OBJ, EXT, ... )),intensional transitive verb:((ACTOR, EXT, ... ) (OBJ, INT .
.
.
.
)),where, the first element of a case slot is acase label which is used only for distinguishingthe slot, and the second element of a case slotindicates extensionality of the slot.
If theslot indicates extensionality, the filler willbe replaced by its extension.
This manipulationwill be treated later in this section.
(2) Interpretation of a noun phraseMost significant noun phrase may be in theform, DET+NOUN.
The formula is interpreted asfollows:(a/an)+noun: %?P\[?P(INDEF\[?X; noun*(?X)\])\],the+noun: I?P\[?P(DEF\[?X; noun*(?X)\])\],every+noun: %?P\[ANY\[?X; noun*(?X)-~?P(?X)\]\],no+noun: %?P\[ANY\[?X;noun*(?X)~~?P(?X)\]\],where p* means the denotation of p.Personal pronouns is interpreted as follows:I: the SPEAKER attribute,you: the HEARER attribute,he: paraphrased as the male,she: paraphrased as the female.Proper name is interpreted as follows:proper-name: DEF\[?X; NAME('proper-name,?X)\].
(3) Interpretation of an adjectiveAn adjective maps a noun into another noun.Here we treat those that plays this role.Interpretation of plural is:*pl(noun):I?X\[SUBSET(?X,SETOF\[?Y; noun*(?Y)\])\]i.e., *pl(noun) denotes a predicate which istrue iff the argument is a subset of{X{ noun*(x)}.Adjectives are interpreted by wordspecialists embedded in the dictionary.
A wordspecialist for an adjective examines theargument (a noun) and maps it into another noun.Thus the word specialist can handle de dictoreadings of adjectives.
For example,small(lion) ~%?X\[LION(?X)&LESS-THAN(DEF\[?Y; SIZE(?X,?Y)\],average-size-of-lion)\].
(4) Interpretation of a postmodificationA relative clause (in restrictive use) mapsthe head noun into a modified noun, as follows:(which(sentence))(noun).A distinguished symbol 'which' announces theoccurence of a relative clause and sends thedenotation of the antecedent as a message.
Theargument of 'which' is a sentence including theeliminated noun phrase '#ante' which willreceive the message and substitute thedenotation.
See the following example:the((which(l(%x\[#ante(ly\[attack(x,y)\])\])))(problem))"the problem which I attack"Interpreting the formula is:DEF\[?X;GEN ~(which(l(lx\[#ante(ly\[attack(x,y)\])\]))(problem))(z); space#; z:?X; NILE \]= DEF\[?X;GEN ~and(problem(z),l(%x\[#ante(%y\[attack(x,y)\])\]));space#; z:?X; #ante:?X~ \]= DEF\[?X; AND(PROBLEM(?X),ATTACK("I",?X))\].An adjective prepositional phrase alsomodifies a noun.
An attributive noun or ade-verbal noun is treated as a noun which is aone-place predicate in LE, but which takes twoor more arguments in PSN level.
Adjectiveprepositional phrases supply these arguments tothe head noun.
For example, interpreting the LE:the(ly\[(the(car))(lx\[(((*ap(of))(x))(color))(y)\])\]),"the color of the car",results in:DEF\[?Y;GEN ~(((*ap(of))(x))(color))(y);space#; x:DEF\[?X; CAR(?X)\], y:?Y; NIL~ \]= DEF\[?Y;GEN~color(y); space#;y:?Y; *ap:of:DEF\[?X; CAR(?X)\]~ \]= DEF\[?Y; COLOR(DEF\[?X; CAR(?X)\]; ?Y)\].Thus in the interpretation process, the messagecommunications between specialists play asignificant role.
(5) Interpretation of a noun clauseA space is used to denote the interpretationof a noun clause.
A noun clause is interpretedas follows:90Ifun(sentence)~DEF\ [?X;  fun*(?X,ml)\],where T(~l,sentence*),where 'fun' stands for a symbol such as 'that','whether' ... etc.
that maps a sentence into anoun clause.
Fun* is an appropriate PSNpredicate.
T(~,p) is a meta  predicate thatmeans the object formula p is true in thepossible world (or space) denoted by ~.
Forexample, interpreting the LE:why(not((the(program))(lx\[work(x)\]))),"why the program does not work"results in:DEF\[?X; REASON(?X,m2)\],where T(~2,NOT(WORK(the-program*))).In this case, fun=why and fun*=REASON.
Theresuting denotation roughly reads "the reason ofthe situation m2 and in ~2 the object referredto by the expression the(program) does notwork.
"(6) Interpretation of other features- Possessive form is treated as a compounddeterminer.
See the following example:fRO I$ (the(programmer))-v,~- (%x\[((*poss(x))(idea))(z)\])\],"the programmer's idea".The resulting denotation is:DEF\[?X; AND(IDEA(?X),POSSESS(DEF\[?Y; PROGRAMMER(?Y)\]; ?X)\]- Interpretation of a passive including thedeep subject.
For example,(the(sentence))(ly\[(the(automaton))(lx\[(*psubj(x))((*en(accept))(y))\])\]),"the sentence is accepted by the automaton",is interpreted as follows:ACCEPT(DEF\[?X; AUTOMATON(?X)\],DEF\[?Y; SENTENCE(?Y)\]),where, *psubJ sends as a message thedenotation of the deep subject, and *enreceives the message to supply the OBJECTslot of the internal verb ACCEPT.Extensionin~ intenslonal structuresAn intensional PSN structure for a nounphrase is extensioned if the PSN structure isput into a case slot which indicatesextensionality.An INDEF type PSN structure is replaced byan 1-unit (which denotes an individualconstant).
For example,I (Ix \[ (a(book)) (~y \[possess (x,y) \]) \]),"I have a book.
"The intermediate PSN structure is:POSSESS("I",INDEF\[?X; BOOK(?X)\]).Since the OBJECT slot of the predicate POSSESSindicates extensionality, this becomesAND (POSSESS ("I", C), BOOK(C) ),where C is a Skolem constant.For DEF type structure, since the denotationrefers some uniquely determined object, areferent search program is activated.
Theprogram searches local contextual memory bymatching each candidate against the givenintensional PSN structure.
The pattern matchingoperation in PSN corresponds to deduction onmeta language, that is, the deflntion of matchis:PSN.
matches PSN^if~ meta(PSNl) ~mplies meta(PSN2)In order to find the referent, various kinds ofknowledge will be needed \ [5 \ ] .
However, thistopic is beyond the scope of this paper.The intensional PSN structure is replaced bya PSN structure found.
For example, considerthe following two sentences:This paper describes a system .
.
.
.
(i)The system analyzes programs .
.
.
.
(2)After the interpretation of the sentence (i),the local memory contains:DESCRIBE(A,B)&PAPER(A)&SYSTEM(B).For the sentence (2), the intermediate structureis:ANALYZE(DEF\[?X; SYSTEM(?X)\],programs*).After the referent search procedure, thestructure becomes:ANALYZE(B,programs*).Since the denotation DEF\[?X; SYSTEM(?X)\] matchesthe node B (for, SYSTEM(B) holds), it isreplaced by the node B.5.
DiscussionAll the mechanisms presented so far has beenimplemented as LISP programs and are working onthe personal LISP system in our laboratory.
Nowexperiments and improvements are in progress.As stated in the first section, advantagesof our method can be shown if it is applied towide applications.
Experiments are in progressas for machine translation and questionanswering.--91Machine translation \[12\]As the first step to the machinetranslation, we are implementing a program whichgenerates Japanese from the LE obtained byanalyzing English.
The generator programevaluates LE just the same way as  theinterpretation program does.
This approachinvestigates the linguistic phenomena inanalyzing and generating natural language.~uestign answerin$ \[9\]~ \[i0\]Another application is to answer questionsabout the integrated network structure.
Inorder to make conversation with a user, theinput sentence should be further evaluated.
Forexample, for user's question actualquestion/answering process must be invoked.Thus a pattern directed procedure is used.
Thisapproach investigates meaning representation anddeduction.Extension to other languages \[ii\]The meaning representation is, in principle,independent of which language is used.
To showthis, we must analyze more than one languages.Although in this paper, the object language isEnglish, we have implemented a Japanese parserand are in the course of implementation ofJapanese to English machine translation program.Further workThe important problems to be solved are:- the problem of discourse, especially, how totreat focus attention or ellipsis in ourformalism,- the semantics of PSN; the semantics of PSNmay be defined either by associating eachnetwork structure with a logic-oriented metalanguage or by defining inference rules onPSN explicitly; the semantics must explicateimplications and synonyms among PSNstructures; furthermore the semantics mustbe extended to treat the concepts such asaction or event,- accommodation of transformational aspects;it seems that the transformational theoryfurther decomposes the translation mappingT; the introduction of transformationalaspect will increase the feasibility of thesystem.6.
ConclusionWe have shown a logico-linguistic approachto the analysis of natural language by computer.AI techniques are combined with Montague-typegrammar.
The main features of the approach areshown for the fundamental subset of English.The promising applications may be semantic basedmachine translation and deductive questionanswering on natural language.AcknowledsementsWe would like to thank the other members ofProf.
Doshita's laboratory, and in particular,Mr.
Masaki KIYONO both for his participationsof numerous discussions and for his assistance.References\[i\] D. G. Bobrow and T. Winograd,An overview of KRL, A knowledgerepresentation language, CSL-76-4,Xerox, Palo Alto Reseasrch Center, 1976.\[2\] M. J. Cresswell, Logics and languages,Methuen & Co. LTd, 1973.
(translated intoJapanese by Ishimoto and Ikeya,Kinokuniya, 1978).\[3\] D. R. Dowty, A guide to Montague's PTQ,Indiana University Linguistic Club, 1978.\[4\] J. Friedman, D. B., Moran and D. S. Warren,Evaluating English sentences with alogical model, Information Abstracts ofCOLING 78, University of Bergen, Norway.\[5\] B. J. Grosz, The representation and use offocus in a system for understandingdialogs, in Proc.
IJCAI-77, 1977, 67-76.\[6\] R. Fikes and G. Hendrix, A network-basedknowledge representation and its naturaldeduction system, in Proc.
IJCAI-77, 1977,235-246.\[7\] J. R. Hobbs, Making computational sense ofMontague's intensional logic, AI 9(1978),287-306.\[8\] R. C. Moore, Reasoning about knowledge andaction, in Proc.
IJCAI-77, 1977, 223-227.\[9\] T. Nishida and S. Doshita, The frameworkof knowledge representation and itsretrieval in LGS -- the literature guidesystem, in Proc.
IJCAI-79, 1977, 662-664.\[i0\] T. Nishida and S. Doshita,A knowledge-based literature guide system-- A new approach to document retrieval,IFIP 80 (to appear).\[ii\] T. Nishida, Y. Sakakibara and S. Doshita,Analysis of predicates of Japanese and thegeneration of English, NationalConventional Record of IPS Japan, 1980,(in Japanese).\[12\] T. Nishida, M. Kiyono, T. Yamanaka andS.
Doshita, English-Japanese translationbased on semantic analysis, NationalConventional Record of IPS Japan,(in Japanese).\[13\] J. E. Stoy, Denotational semantics: TheScott-Strachey approach to programminglanguage theory, The MIT press, 1977.\[14\] T. Winograd,Understanding natural language,Academic Press 1972.
(translated intoJapanese by Fuchi, Tamura and Shirai,Sangyo-tosho, 1976).92
