Proceedings of the Human Language Technology Conference of the NAACL, Companion Volume, pages 273?275,New York City, June 2006. c?2006 Association for Computational LinguisticsKnowtator: A Prot?g?
plug-in for annotated corpus constructionPhilip V. OgrenDivision of Biomedical InformaticsMayo ClinicRochester, MN, USAOgren.Philip@mayo.eduAbstractA general-purpose text annotation toolcalled Knowtator is introduced.
Knowtatorfacilitates the manual creation of annotatedcorpora that can be used for evaluating ortraining a variety of natural language proc-essing systems.
Building on the strengthsof the widely used Prot?g?
knowledge rep-resentation system, Knowtator has beendeveloped as a Prot?g?
plug-in that lever-ages Prot?g?
?s knowledge representationcapabilities to specify annotation schemas.Knowtator?s unique advantage over otherannotation tools is the ease with whichcomplex annotation schemas (e.g.
schemaswhich have constrained relationships be-tween annotation types) can be defined andincorporated into use.
Knowtator is avail-able under the Mozilla Public License 1.1at http://bionlp.sourceforge.net/Knowtator.1 IntroductionKnowtator is a general-purpose text annotation toolfor creating annotated corpora suitable for evaluat-ing Natural Language Processing (NLP) systems.Such corpora consist of texts (e.g.
documents, ab-stracts, or sentences) and annotations that associatestructured information (e.g.
POS tags, named enti-ties, shallow parses) with extents of the texts.
Anannotation schema is a specification of the kinds ofannotations that can be created.
Knowtator pro-vides a very flexible mechanism for defining anno-tation schemas.
This allows it to be employed fora large variety of corpus annotation tasks.Prot?g?
is a widely used knowledge representa-tion system that facilitates construction and visu-alization of knowledge-bases (Noy, 2003)1.
AProt?g?
knowledge-base typically consists of class,instance, slot, and facet frames.
Class definitionsrepresent the concepts of a domain and are organ-ized in a subsumption hierarchy.
Instances corre-spond to individuals of a class.
Slots defineproperties of a class or instance and relationshipsbetween classes or instances.
Facets constrain thevalues that slots can have.Prot?g?
has garnered widespread usage by pro-viding an architecture that facilitates the creationof third-party plug-ins such as visualization toolsand inference engines.
Knowtator has been im-plemented as a Prot?g?
plug-in and runs in the Pro-t?g?
environment.
In Knowtator, an annotationschema is defined with Prot?g?
class, instance,slot, and facet definitions using the Prot?g?
knowl-edge-base editing functionality.
The defined anno-tation schema can then be applied to a textannotation task without having to write any taskspecific software or edit specialized configurationfiles.
Annotation schemas in Knowtator can modelboth syntactic (e.g.
shallow parses) and semanticphenomena (e.g.
protein-protein interactions).2 Related workThere exists a plethora of manual text annotationtools for creating annotated corpora.
While it hasbeen common for individual research groups tobuild customized annotation tools for their specific1 http://protege.stanford.edu273Figure 1  Simple co-reference annotations in Knowtatorannotation tasks, several text annotation tools haveemerged in the last few years that can be employedto accomplish a wide variety of annotation tasks.Some of the better general-purpose annotationtools include Callisto2, WordFreak3 (Morton andLaCivita, 2003), GATE4, and MMAX25.
Each ofthese tools is distributed with a limited number ofannotation tasks that can be used ?out of the box.
?Many of the tasks that are provided can be custom-ized to a limited extent to suit the requirements of auser?s annotation task via configuration files.
InCallisto, for example, a simple annotation schemacan be defined with an XML DTD that allows thecreation of an annotation schema that is essentiallya tag set augmented with simple (e.g.
string) attrib-utes for each tag.
In addition to configuration files,WordFreak provides a plug-in architecture for cre-ating task specific code modules that can be inte-grated into the user interface.A complex annotation schema might include hi-erarchical relationships between annotation typesand constrained relationships between the types.Creating such an annotation schema can be a for-midable challenge for the available tools either2 http://callisto.mitre.org3 http://wordfreak.sourceforge.net4 http://gate.ac.uk/.
GATE is a software architecture for NLP that has, as one ofits many components, text annotation functionality.5http://mmax.eml-research.de/.because configuration options are too limiting orbecause implementing a new plug-in is too expen-sive or time consuming.3 Implementation3.1 Annotation schemaKnowtator approaches the definition of an annota-tion schema as a knowledge engineering task byleveraging Prot?g?
?s strengths as a knowledge-base editor.
Prot?g?
has user interface componentsfor defining class, instance, slot, and facet frames.A Knowtator annotation schema is created by de-fining frames using these user interface compo-nents as a knowledge engineer would whencreating a conceptual model of some domain.
ForKnowtator the frame definitions model the phe-nomena that the annotation task seeks to capture.As a simple example, the co-reference annota-tion task that comes with Callisto can be modeledin Prot?g?
with two class definitions called mark-able and chain.
The chain class has two slots ref-erences and primary_reference which areconstrained by facets to have values of type mark-able.
This simple annotation schema can now beused to annotate co-reference phenomena occur-274ring in text using Knowtator.
Annotations inKnowtator created using this simple annotationschema are shown in Figure 1.A key strength of Knowtator is its ability to re-late annotations to each other via the slot defini-tions of the corresponding annotated classes.
Inthe co-reference example, the slot references of theclass chain relates the markable annotations for thetext extents ?the cat?
and ?It?
to the chain annota-tion.
The constraints on the slots ensure that therelationships between annotations are consistent.Prot?g?
is capable of representing much moresophisticated and complex conceptual modelswhich can be used, in turn, by Knowtator for textannotation.
Also, because Prot?g?
is often used tocreate conceptual models of domains relating tobiomedical disciplines, Knowtator is especiallywell suited for capturing named entities and rela-tions between named entities for those domains.3.2 FeaturesIn addition to its flexible annotation schema defini-tion capabilities, Knowtator has many other fea-tures that are useful for executing text annotationprojects.
A consensus set creation mode allowsone to create a gold standard using annotationsfrom multiple annotators.
First, annotations frommultiple annotators are aggregated into a singleKnowtator annotation project.
Annotations thatrepresent agreement between the annotators areconsolidated such that the focus of further humanreview is on disagreements between annotators.Inter-annotator agreement (IAA) metrics pro-vide descriptive reports of consistency betweentwo or more annotators.
Several different matchcriteria (i.e.
what counts as agreement betweenmultiple annotations) have been implemented.Each gives a different perspective on how wellannotators agree with each other and can be usefulfor uncovering systematic differences.
IAA canalso be calculated for selected annotation typesgiving very fine grained analysis data.Knowtator provides a pluggable infrastructurefor handling different kinds of text source types.By implementing a simple interface, one can anno-tate any kind of text (e.g.
from xml or a relationaldatabase) with a modest amount of coding.Knowtator provides stand-off annotation suchthat the original text that is being annotated is notmodified.
Annotation data can be exported to asimple XML format.Annotation filters can be used to view a subsetof available annotations.
This may be important if,for example, viewing only named entity annota-tions is desired in an annotation project that alsocontains many part-of-speech annotations.
Filtersare also used to focus IAA analysis and the exportof annotations to XML.Knowtator can be run as a stand-alone system(e.g.
on a laptop) without a network connection.For increased scalability, Knowtator can be usedwith a relational database backend (via JDBC).Knowtator and Prot?g?
are provided under theMozilla Public License 1.1 and are freely availablewith source code at http://bionlp.sourceforge.net/Knowtator and http://protege.stanford.edu, respec-tively.
Both applications are implemented in theJava programming language and have been suc-cessfully deployed and used in the Windows, Ma-cOS, and Linux environments.4 ConclusionKnowtator has been developed to leverage theknowledge representation and editing capabilitiesof the Prot?g?
system.
By modeling syntacticand/or semantic phenomena using Prot?g?
frames,a wide variety of annotation schemas can be de-fined and used for annotating text.
New annotationtasks can be created without writing new softwareor creating specialized configuration files.
Know-tator also provides additional features that make ituseful for real-world multi-person annotation tasks.ReferencesThomas Morton and Jeremy LaCivita.
2003.
Word-Freak: An Open Tool for Linguistic Annotation, Pro-ceedings of NLT-NAACL, pp.
17-18.Noy, N. F., M. Crubezy, et al  2003.
Protege-2000: anopen-source ontology-development and knowledge-acquisition environment.
AMIA Annual SymposiumProceedings: 953.275
