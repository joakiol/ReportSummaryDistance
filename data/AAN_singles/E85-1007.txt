SAUMER: SENTENCE ANALYSIS USING METARULESFred PopowichNatural Language GroupLaboratory for Computer and Communications ResearchDepartment of Computing ScienceSimon Fraser UniversityBurnaby.
B.C.. CANADA V5A 1S6ABSTRACTThe SAUMER system uses specifications of naturallanguage grammars, which consist of rules and metarules.to provide a semantic interpretation of an input sentence.The SAUMER ' Specification Language (SSL) is aprogramming language which combin~ some of thefeatures of generalised phrase structure grammars (Gazdar.1981 ).
like the correspondence between syntactic andsemantic rules, with definite clause grammars (DCC-s)(Pereira and Warren.
1980) to create an executablegrammar specification.
SSL rules are similar to DCG rulesexcept that they contain a semantic component and mayalso be left recursive.
Metarules are used to generate newrules trom existing rules before any parsing is attempted.A.n implementation is tested which can provide semanticinterpretations for sentences containing tepicalisation,relative clauses, passivisation, and questions.1.
INTRODUCTIONThe SAUMER system allows the user to specify agrammar for a natural language using rules and metarulesrhts grammar can then be u?,ed ~ obtain a semanticinterpretation of an input sentence.
The SAUMERSpecification language (SSL).
which L~ a variation ofdefinite clause gr~s  (DCGs) (Pereira and Warren.1980).
captures some ,ff the festures of generaI?.ted phrasestructure grammar5 (GPSGs) (Gazdax, 1981) (GaTrl~r andPullum.
1982).
like rule schemata, rule transformations.structured categories, slash categories, and thecorrespondence between syntactic and semantic rules.
Thesemantics currently used in the system are based onSchubert and Pelletiers description in (Schubert andPelletier.
1982).
- which adapts the intetmional logicintervretation associated with GPSGs.
into a moreconventional logical notation2.
THE SEMANTIC LOGICAL NOTATIONThe logical notation associated with the gr~mm~rdiffers from.
the usual notation of intensional ogic_since itcaptures some intmtive aspects of natural language, lThus.
individuals and objects are treated as entities.instead of collections of prope'rties, and actions are n-aryrelations between these entities.
Many of the problemsthat the intensional notation would solve are handled byallowing ambiguity to be represented in the logicalnotation.
Consequently.
as is common in other approaches.(e.g..
Gawron.
1982).
much of the processing is deferred tothe pragmatic stage.
The structure of the lexicon, and theappearance of post processing markers (sharp anglebrackets) are designed to reflect this ambiguity.
Thelexicon is organised into two levels.
For the semanticinterpretation, the first level gives each word a tentativeinterpretation.
During the pragmatic analysis, morecomplete processing information wil l  result in the finalinterpretation being obtained from the second level of thelexicon.
For e~mple ,  the sentence John misses John couldbe given an initial interpretation of:(2.1) \[ Johnl misa2 John3 \]with Johnl, miss2 and John3 obtained from the first levelof the two level lexicon.
The  pragmatic stage wil ldetermine if Johal  and John3 both refer to the sameentry, say JOHN SMITH1.
of the second level of thelexicon, or if they correspond to different entries, sayJOHN_JONES1 and JOHN_EVANS1.
During thepragmatic stage, the entry of MISS which is referred toby miss2 will be determined (if possible).
For example,does John miss John because he has been away for a longtime, or is it because he is a poor shot with a rifle?Any interpretation contained in sharp angle brackets.<.
.
.>.
may require post processing.
This is apparent ininterpretations containing determiners and co-ordinators.The proverb:(2.2) every man loves some womancould be given the interpretation:(2.3) \ [<every l  man2> love3 <some4 womanS>\]without explicitly stating whmh of the two readings isintended.
During pragmatic analysis, the scope of everyand some would presumably be determined.111 should also be noted that.
due Io the separabili'~y of the semanticcomponent from ",he grammar ule, ?
different semantic notation couldeasily be introduced at long as ~u~ app~priate ~.mantic proce~in8rou~dne$ were replaced.
The use of SAUMER with "an "Al-adap'md"version of Mon~ue 's  Intensional Logic" is being examined by Fawc?It(1984),48The syntax of this logical notation can be b-~mmav~sedas follows.
Sentences and compound predicate formulasare contained within square brackets.
So.
(2.4) states that3oim wants to kiss Mary:(2.4) \[ Johnl want2 \[John1 kiss3 Mary4\]\]These formulas can also be expressed equivalently in amore functional form according to the equivalence(2.5) \[ t n P t I .
.
.
tad \]--- ( ?
.
.
( (P  t l )  t 2) .
.
.
t n )- -  ( P t t .
t .
)Consequently.
(2.4) could also be represented as:(2.6) ( (want2  ((kiss3 Mary4) John l )}  John l )However.
this notation is usually used for incompletephrases, wi th  the square brackets used to obtain acortvent/ona/ final reading Modified predicate formulasare contained in braces.
Thus.
a little dog likes Fido couldbe expressed as:(2.7) \ [<a l  {little2 dog3}> likes4 FidoS\]The lambda calculus operations of lambda abstraction andelimination are also allowed.
When a variable isabstracted from an expression as in:(2.8) kx \[ ?
want2 \[ ?
love3 Mary4 \] \]application of this new expression to an argument,  saydohnl:(2.9) ( kx \[ ?
want2 \[ ?
love3 l~u~J'4 \] \] John l  )will result in an int~,v,?tation of John wants to love Mary:(2.10) \[ Johnl  want2 \[ Johnl  love3 Mary4 \] \]Further details on this notation are available in (Schubertand Pelletier.
1982).3.
THE SAUMER SPECIF ICAT ION LANGUAGEThe SAUMER Specification Language (SSL) is aprogramming language that al lows the user to define agrammar of a natural  language "in ~ of rules, andmetarules.
Metarules operate on rules to produce newrules.
The language is basically a GPSG realised in aDCG setting.
Unlike GPSGs.
the grammars defined bythis system are not required to be context-free sinceprocedure calls are allowed within the rules, and sincelogic variables are allowed in the grammar symbols.The basic objects of the language are atoms, variables.terms, and lists.
Any word start ing with a lower caseletter, or enclosed in single quotes is an atom.
Variablesstart  with a capital letter or an underscore.
A term is anatom.
optionally followed by a series of objects(arguments),  which are enclosed in parentheses andseparated by commas.
Last ly.
a l ist is a series of one ormore objects, separated by commas, that are enclosed insquare brackets3.1 Ru lesThe rules are presented in a variation of the DCGnotation, augmented with a semantic rule corresponding toeach syntactic rule.
Each rule is of the form"A - ->  B : ~," where A is a term which denotes anonterminal  symbol.
B is either an atom list representinga terminal symbol  or a conjunction of terms (separated bycommas) corresponding to nonterminal  symbols, and y is asemantic rule which may reference the interpretation ofthe components of ~ in determining the semantics of A.The rule arrow.
- -> .
separates the two sides of the rule.with the colon.
:.
separating the syntactic component fromthe semantic component.
If the rule is preceded by theword add, it can be subjected to the transformat ionsdescribed in section 3.2.
The nonterminal  symbols canpossess arguments, which may be used to capture thef lavour of the struaurad categor/~s of GPSGs.
~ may alsopossess arbitrary procedural restrictions contained in braces.T consists of expressions in the semantic notation.The dif ferent terms of this semantic expression are joinedby the semantic connector, the ampersand "&'.
Theampersand di f fer ,  f rom the syntactic connector, thecomma, sinc~ the former associates to the right whi le thelatter associates to the left.
The /og/col and symbol.which tradit ional ly may also be denoted by theampersand, must  be entered as "&&'.
Due to constraintsimposed by the current implementation, "( exFr )" mustbe entered as "<\[  expr \]'.
"< expr >" as "< <\[ expr \]'.and "k x expr" as "x lmda expr."
An expression maycontain references to the interpretations of the elements of18 by stating the appropriate nonterminal  fol lowed by theleft quote, ".
To prevent ambiguity in "these referencesthat  may arise when two identical symbols appear in B. anonterminal  may be appended with a minus sign fol lowedby a unique integer.Unl ike standard Prolog implementations of DCGs.
leftrecursion is allowed in rules, thus permitt ing more naturaldescriptions of certain phenomena (like co-ordination).Since the left recursive rules are interpreted, rather thanconverted into rules that are not left recursive, thenumber  of rules in the database will not be affected.However.
the efficiency of the sentence analysis may beaffected due to the extra processing required.
Rules ofthe form "A - ->  A.
A" are not accepted.An example of a production that derives John from aproper noun.
npr.
is shown in (3.1):(3.1) npr  - ->  \[ ' John'\] : "John'#The semantic interpretation of this npr  will be John#.with "#" replaced by a unique integer during evaluation.
(3.2) i l lustrates a verb phrase rule that  could be used insentences like John wants to wa/k:(3.2) vp(Num) - ->v(Num.Root) with Root in \[want.like\].
vp( in f )x## lmda \[ x## & v" & \ [x## & vp'\]) \]49First nottce that a restriction on the verb appears with inthe w/th statement.
In the GPSG formalism, this type ofrestriction would be obtained by naming the rules andassociating a list of valid rule names wi th  each lexicalentry.
Although the w/~h restriction may contain anyvalid in-ocedure, typical ly the in operation (for determininglist membership) is used.
The double pound.
##.
isreplaced by the same unique integer in the entireexpression when the expression is evaluated.
If "#" wereused instead, each instance of x# would be different.
Forthe above example, if v' is want2 and vp' is runJ.
thenthe semantic expression could evaluate to:(3.3) x4 lmda \[x4 & want2 & \[x4 & run3\]\]Furthermore.
if np" is Johrtl.
then:(3.4) \[np" & vp'\]could result in:(3.5) \[Johnl & want2 & \[Johnl & run3\]\]3.2 The MetarulesTradit ional transformational  grammars providetransformations that  operate on parse trees, or similarstructures, and often require the transformations to beused in sentence recognition rather than in generation(Radford.
1981).
However.
the approach suggested by(GaT~2r.
1981) uses the transformations generatively andapplies them to the grammar.
Thus.
the grammar canremain contex:-free by compiling this t ransformat ionalknowledge into the grammar.
Transformations and ruleschemata form the maazu/~s of SSI- 2Rule schemata al low the user to specify entire classesof rules by permitt ing variables which range over aselection of categories to appear in the rule.
To controlthe values of the variables, the fora// control structure canbe used in the schema declaration.
The schemafora// X ~n List, Body wil l  execute Body for each elementof L i~.
with X instantiated to the current element.
Theuse of this statement is illustrated in the followingmetarule that  generates the terminal productions for propernouns.
"(3.6) forall Terminal in \[ 'Bob'.
'Carol ' .
'red'.
'Al ice'\] ,(npr - ->  \[Terminal\] : Termina l#)  .Transformations match with grammar rules in thedatabase, using a rule pattern that  may be augmentedwi th  arb i t rary procedures, and produce new rules fromthe old rules.
A transformat ion is of the form:(3.7) a - ->  /i : y - - -> a' - ->  B" : 7"The metarule arrow.
- -  > ,  separates the pattern,a - ->  ~ : T. from the template, a" - ->  /i" : T'-2Oflen.
metarule~ are considered 1o consisl of t ransformations only,while schemata are pul inlo a category of their own.
However.
sinoethey can both be considered i~ part  of ?
metagramma~, they are calledme~trule~ in thl ,  distna~inn.The ~n~a~ pattern, Q - ->  /i.
contains nonterminals.which correspond to symbols that must  appear in thematched rule, and free variables, which represent don't~r~reg ions  of zero or more nonterminals.
The patternnontermmals  may also possess arguments.
For each rulesymbol,  a matching pattern symbol describes propertiesthat  must exist, but not all the properties that  may exist.Thus.
if vp appeared in the pattern, it would match anyof vp.
vp(Num), or vp(Nura2"ype) with Type in /transl.However.
pp(to) would not match pp or pp(frora), but itwould match plMto,_).
The matching conditions aresummarised in Figures 3-1 and 3-2.
In Figure 3-1.
A andB are nonterminals.
X is a free variable, and a and /i areconjunctions of one or more symbols, y and 8 of Figure3-2 are also conjunctions of one or more symbols.
"=" isdefined as unif ication (Clocksin and Mellish, 1981).
Partsof the rule contained in braces are ignored by the patternmatcher.
The syntactic pattern may also contain arbi t raryrestrictions.
3 enclosed in braces, that are evaluated duringthe pattern match.
The semant/c pattern, y, is veryprimitive, h may contain a free variable, which wil lbind to the entire semantics field of the matched rule, orit may contain the structure <\[?
~\].
which wil l  bind tothe entire structure containing the symbol  x.
If <\[?
y\]then appears in y' ,  the result will be the semanticcomponent of the matched rule with x replaced by y.PatternRule(B.
/3) B(A. a)(X. a)AXA matches B A matches B andand a matches ~ a is a free variable(X. a )  matches /i a matches Bor a matches (B.
~)No A matches Byes  YesF igure 3-1: Pattern Matching for ConjunctionsPatternRuleb(/i\[ .... /I n) b(,/i I .... /in ) with 8a(a I .
.
.
.
a m )a(a  I .
.
.
.
a=)witha=b.
m~<n.ati=/i i, 1~<i~<mNoa - -b .
m~n.a i=/ i  i, l~ i~ma=b.
m~n.a i=/ i  i. l~<i~<m.
"matches 8F igure  3-2: Pattern Matching for Nonterminals3Apparently no1 present in the Hewle1"t Packard system (Gawron,1982) or the ProGram system (Evans and Ga~l~r, 1984)50The behaviour of patterns can be seen in the followingexamples.
Consider the sentence rule:(3.8) s(decl) --> np(nom.Numb).vp(_ Jqumb)  with agreement(Numb): \[ rip" & vp" \]The patterns shown in (3.9a) wil l  match (3.8).
whilethose of (3.9b) will not match it.
(3.9) (a) s(A) - ->  {not element(A,\[foo\])L X. vp : Seres - -> np(nom), X. vp(pass).
Y : Sere(b) s(inter) - ->  np.
vp : Seams - ->  vp : SereFor the verb phrase rule shown in (3.10):(3.10) vp(active.\[MIN\]) - ->v(\[MIN\],Root,Type,_) with (intrans in Type): v"the patterns of (3.11a) will result in a successful match.will those of (3.11b) wil l  not:With external modification, any nonterminal, orvariable instantiated to a nonterminal, may be fol lowedby the sequence @rood.
This wil l  result in rood beinginserted into the argument list following the specifiedarguments.
Thus, mf N@junk appeared in a rule when Nwas instantiated to np(more), it would be expanded asrip(more,junk }.
Similarly, if the pattern symbol vpmatched v,v{NumS) in a rule, then the appearance ofvp@foo in the template would result in vp(foo~Vumb)appearing in the new rule.
This extra argument.introduced by the modifier, can be useful when dealingwith the missing components of slash or derived categories(Gazdar, 1981).Internal modification allows the modifier to be putdirectly into the argument list.
If an argument isfollowed by @rood.
it will be replaced by rood.
In thecase where @rood appears as an argument by itself, rood isadded as a new argument.
For example, ifv(Numb@pastpart) were contained in a template, it wouldIT-match v(Numb) in the pattern, and would result in theappearance of v(pastpart) in the new rule.
(3.11) (a) vp-> v : <\[?v\]vp - ->  v( .
.
.
.
Type._)with (X, intrans in Type.
Y).Z:Sem(b) vp - ->  v( .
.
.
_ .Type._)with (X. trans in Type):Semvp -> v(_~oot  .... )with (Root in \[fool.
X):SemFor every rule that matches the pattern, the templateof the transformation is executed, resulting the creation ofa new rule.
Any nonterminal.
N, that matches a symbol8 i on the left side of the transformation, will appear inthe new rule if there is a symbol ~i" in 8" thatirura-transformation (IT) matches with ~i" If there areseveral symbols in 8" that IT-match ~i" the leftmostsymbol wil l  be selected.
No symbol on one side of thetransformation may IT-match with more than one symbolon the other side.
Two symbols will IT-match only ifthey have the same number of arguments, and thosearguments are identical.
Any w/th expressions andmodifiers associated with symbols are ignored during IT-matching.
8" may also contain extra symbols that do notcorrespond to anything in 8.
In this case.
they areinserted directly into the new rule.
Once again, if thetransformation is preceded by the command add.
then theresulting ru l~ can be subjected to subsequenttransformations.3.3 ModifiersBoth rules and metarules may contains modifiers thatalter the ~tructure of the nonterminal symbols.
There aretwo types of modification, which have been dubbedexternal and /nzerrud modification.4.
IMPLEMENTATIONThe SAUMER system is currently implemented inhighly portable C-Prolog (Pereira.
1984).
and runs on aMotorola 68000 based SUN Workstation supporting UNIX  4.Calls to Prolog are allowed by the system, thus providinguseful tools for debugging grsmmars, and tracingderivations.
However.
due to the highly declarativenature of SSL, it is not restricted to a Prolog....... implementation.
Implementations in other languages woulddiffer externally only in the syntax of the procedure callsthat may appear in each rule.
Use of the system isdescribed in detail in (Popowich, 1985).The current implementation converts the grammar asspecified by the rules and metarules into Prolog clauses.This conversion can be examined in terms of how rulesare processecl, and how the schemata and transformationsare processed.4.1 Rule ProcessingThe syntactic component of the rule processor is basedon Clocksin and Mellish's definite clause grammarprocessor (Clocksin and Mellish.
1981) which has beenimplemented in C-Prolog.
For a DCG rule.
eachnonterminal is converted into a Prolog predicate, with twoadditional arguments, that can be processed by a top-downparser.
These ~tn  arguments correspond to the list to beparsed, and the remainder of the list after the predicatehas parsed the desired category.
With the addition ofsemantics to each rule, another argument is required torepresent the semantic interpretation of the currentsymbol.
Thus.
whenever a left quoted category name.
x'.4UNIX is ?
Inulemark of Bell Laboralories51appears in the semantics of the rule.
it'is'repla~gl by  avariable bound to the semantic argument of thecorresponding symbol, x. in the rule.
The semanticexpression is then evaluated by the eva/ routine with theresult bound to the semantic argument of the nonterminalon the left hand side of the production.
For ~ffiample.
thesentence /ule:(4.1) add s(decl) ->np(nom.Numb).vp(_2qumb) with agreement(Numb): \[ np" & vp" \]will result in a Prolog expression of the form:(4.2) s(SemS.decl._l.
3) :-nlKSemNP.nom2qumb.
1 .2 ) .vp(SemVP, 2qumb.
2.
3).agreement(Numb).eval(\[SemNP & SemVP\],SemS).Consequently.
to process the sentence John runs.
onewould try to satisfy:(4.3) :- s(Sem, Type.
\['John'.runs\].
[\]).The first argument returns the interpretation, the secondargument returns the type of sentence, the third is theinitial input list.
and the final argument corresponds tothe list rPmaining after finding a sentence.
Any rule R,that is preceded by add wil l  have the axiom r'ul~(R)inserted into the database.
These axioms are used by thetransformations during pattern matching.The eva/ routine processes the suffix symbols, # and## along wlth the lambda .expressions, and may performsome- reorganisation of the given expression-- beforereturning a new semantic form.
For each expression ofthe form name#, a unique integer N is ca-eared andnan~-N is returned.
With "##'.
the procedure is thesame except that the first occurrence of "##" wil l  generatea unique integer that wil l  be saved for all subsequentoccurrences.
To evaluate an expression of the form:(4.4) ( expr i Lmda e~F j  & X )every subexpression of exprj is recursively searched for anoccurrence of expr i. which is then replaced by X.Left recursion is removed with the aid of a gappredicate identical to the one defined to process gappinggr -ammarS  (Dahl and Abramson.
1984) and unre~Lricte~gapping grammars (Popowich.
forthcoming).
For any ruleof the form:(4.5) A - -> A.
B. awhere A does not equal B. the result of the translation is:(4.6) A f_ I .N  n) :- gap(G._l .
2).
B (2 .No) .
A(G,\[\]).<Xl (No,N 1 ) .
.
.
.
.
tXn(Na_l.Nn),According to (4.6).
a phrase is processed by skipping overa region to find a B - -  the first non-terminal that doesnot equal A.
The skipped region is then examined toensure that it corresponds to an A before the rest of thephrase is processed.4.2 Schema ProcessingTo process the metarule control structures used byschemata, a fml  predicate is inserted to force Prolog to tryall possible alternatives.
The  simple recursive definitionof /ore// X /~ /./rt:(4.7) forall(X in \[\], Body).forall(X in \[YIRest\]~xty) :-(X=Y.
call l(Body), fail) :forall(X.
Rest.
Body).uses fa// to undo the binding of Y, the first element ofthe list.
to X before calling fore// with the remainder ofthe list.
The predicate ?.<d/l is used to evaluate Bodysince it wil l  prevent the fa// predicate from causingbacktracking into Body.4.3 Transformation ProcessingExecution of transformations requires the mostcomplex processing of all of the metagrammaticaloperations.
This processing can be divided into the threestages of transformation c rY .
pattern matching, and rulecrem,/on.
5During the rrar~fornuU/~n trot/on phase, the predicaterrarts(M,X,Y) is created for the metarule.
M.  Thispredicate will transform a list of elements.
X: intoanother ILSL Y, according to the syntax specification of themetarule.
Elements that IT-match will be represented bythe same free variable in both lists.
This binding will beone to one.
since an element cannot match with more thanone element on the other side.
Symbols that appear ononly one side will not have their free variable appearingon the opposite side.
Expressions in braces are ignoredduring this stage.
If a transformation like:(4.8) a - ->  b, c. X - ->  a@foo - ->  b. X. c(foo)appears, then a predicate of the form:(4.9) t r~s(M.  L1 ._2 ._3 .X \ ] .
L1 .
_2 .X ._4 \ ] )will be created.
Notice that the appearance of a modifierdoes not cause a@/oo to be distinguished from a. since allmodifiers are removed before the pattern-template match isattempted.
However.
c and c(foo) are considered to bedifferent symbols.
M is a unique integer associated withthe transformation.The pattern match phase determines if a rule matchesthe pattern, and produces a list for each successful matchwhich wil l  be transformed by the trans predicate.
Eachelement of the list is either one of the matched symbolsfrom the rule.
or a list of symbols corresponding to thedon't care region of the pattern.
Any predicates that5(Popowich, forthcoming) examines a method of transformalion~ ing  that uses the transformations during ~3~e par~e, instead of Usingthem m L~me~te new ~.fle~.52appear in braces in the pattern are evaluated during thepattern match.
Consider the operation of an active-passiveverb phrase transformation:(4.10) vp(active~Numb) - ->v(Numb.R.Type.SType)with (X.trans in Type.Y).np.
Z<\[?
np'\]v~pass.Numb) - ->v(Numb.be.T.S)-I with auz in T.v(Numb@pastpart.R.Type.SType)with (X.trans in Type.Y).z.
pp(by._): x## Imda \[pp(by)" & <\[7 x##\] \ ]on the following verb phrase:(4.11) vp(active.Numb) - ->v(Numb~R.Type._) with trans in Type.n~\[x.A.x\] .
.
.
.
): <\[  v" & np" \] .The list produced by the pattern match would resemble:'.12) \[ vp(active.Numb).v(Numb.R.Type._) with \[\[\].trans in Type~\]\].nr(\[x.A.~\] .... ).\[\] \]Notice that there was nothing in the rule to bind with X.Y or Z. Consequently.
these variables were assigned thenull list.
\[\].
The pattern match of the semantics of therule will result in an expression which lambda abswactsnp" out the of semantics:(4.13) <\[ np" lmda <\[ v" & np" \] \]Finally.
the ru/~ crea?/on phase applies thetransformation to the list produced by the pattern match.and then uses the new list and the template to obtain anew rule.
This phase includes conversion of the new listback into rule form.
the application of modifiers, and theaddition of any extra symbols that appear on the righthand side only.
To continue with our *Tample.
the transpredicate a.~ociated with (4.10) would be:(4.14) trans(N. \[_1._2._3.Z\].
\ [ _ .3 .4 .
_21 .
.5 \ ] )Notice that the two vp's on opposite sides of the metaruledo not match.
So the transformed list would resemble:(4.15) \[ _3.4,v(Numb.R.Type._) with \[\[\].trans in Type,\[\]\].\[3._51The rule generated by the rule creation phase would be:(4.16) vp(pass~lumb) - ->v(Numb.be.T~)- I  with aux in T.v(pastpart.R,Type._) with tnns  in Type.pp(by._): x## lmda \[ pp(by)" & <\[  v" & x## \] \]?
Notice that the expression "<\[  v" & x## \]'.
which is?
contained in the semantics of (4.16) was obtained by theapplication of (4.13) to x##.5.
APPLICATIONSTo examine the usefulness of this type of grammarspecification, as well  as the adequacy of theimplementation, a grammar was developed that uses thedomain of the Automated Academic Advisor (AAA)(Cercone et.al.. 1984).
The AAA is an interactiveinformation system under development at Simon FraserUniversity.
It is intended to act as an aid in "curriculumplanning and management', that accepts natural languagequeries and generates the appropriate responses.
Routinesfor performing some morphological analysis, and forretrieving lexical information were also provided.The SSL grammar allows questions to be posed.permits some possessive forms, and allows auxiliaries toappear in the sentences.
From the base of twenty sixrules, eighty additional rules were produced by threemetarules in about eighty-five seconds.
Ten more ruleswere needed to link the lexicon and the grammar.
Aselection of the rules and metarules appears in Figure 5-1.The complete grammar and lexicon is provided in(Popowich.
1985).In the interpretations of some ~mple  sentences, whichcan be found in Figure 5-2, some liberties are taken withthe semantic notation.
Variables of the form wN.
whereN is any integer, represent entities that are to beinstantiated from some database.
Thus.
any interpretationcontaining wN wil l  be a question.
Possessives.
like John'stab/e are represented as:(5.1) <table & \[John poss table\]>Although multiple possessives which associate from left toright are allowed, group possessives as seen in:(5.2) the man who passed the course's bookand in phrases like:(5.3) John's driver's lice.acecan not be interpreted correctly by the grammar.Inverted sentences are preceded by the word Query  in theoutput.
Also.
proper nouns are assumed to unambiguouslyrefer to some object, and thus are no longer followed bya unique integer.
Analysis times for obtaining aninterpretation are give 9 in CPU seconds.
The total timeincludes the time spent looking for all other possibleparses.Results obtained with SAUMER compare favourably tothose obtained from the ProGram system (Evans andGazdar.
1984).
ProGram operates on grammars definedaccording to the current GPSG formalism (Ga2dar andPullum.
1982).
but was not developed with efficiency as amajor consideration.
The grammar used with ProGram.which is given in (Popowich.
1985).
is similar to the AAA53/ -  Case ,s described by a mask.
\[N.A,G\], with f ree var iab les  for Ham., Ace.
and Gen. * /add vp(octive.Numb) ~> v(Numb.
Root.
T, _) with (Root in \ [pass .g ive , teach ,o f fe r \ ] ,  indabj in T. trees in T),np(\[x.D.x\]  .
.
.
.  )
.
np( \ [x .
* .x \ ]  .
.
.
.
)-1 : <\[ v' a np' a np-t '  \]Je WH--<lueetions in inverted sentences * /  evcl (y~,  Var),  NP - np(Case.Numb,Feat)?
( NPONP ~> \ [ \ ] .
|agreement(Case)| : Var ), (e ( inv)  ~> np(\[x,A,x\] ,Nomb,Feat)  with Clword in Feat, e( inv)Onp(\[x,A,x\] ,Numb,Feat): <\[ (Vat lads s ' )  ?
np' \] ) ./* passive t renefarnmtion e/add vp(octive.Numb) - ->  v(Numb.R.Type.Subtype) with (X. trees in Type0 Y).
npo Z : <\[?
np ?\]mE> vp(poss,Humb) ~> v(Numb,be,T,S)--I with aux in T,v(Numi:gpaetpart, R. Type, Subtype) with (X, trees in Type, Y),Z. opt iana l (pp(by ._ ) )  : x~ Imda \[ opt ional"  k <\[ ?
x~ \] \] ./ *  sentence invers ion */add vp(T. \ [MiN\])  ~> v(\[MJN\],R,Type,S) with (X, aux in Type, Y ) ,  Z : $emm> s ( inv)  - ->  v(\[UIN\] ,R,Type,S) with (X.aux in Type,Y), np( \ [N l ,x ,x \ ] , \ [M lN\ ] , _ ) ,  Z : \ [np'  a Semi./ ,  metarule fo r  the propagation of "holes"  in the "s losh"  categor ies  e/fa ra i l  Hole in \[pp(Prep,Feat),np(Case,Nomb,Foot)\].
( fo ra l l  Cat1 in \ [ s (Type) ,vp .pp(Prep ,Feat ) ,opt iona l \ ]?
( fo ra l l  Cat2 in \ [vp,pp(Prep,Feat) ,np(Caae,Numb,Foat) ,opt ional \ ], ( Cat1 m> X. Cot2, Y : Sem m> Cet l IHo ie  m> X, Cat2OHalo, Y : Sen ) ) ) .Figure 5-1: Excerpt from GrammarSentenceQuery:Ana lyo ,e : .did Fred take omptlel .\[Fred takes cmpt le l \ ]2.25 eec.
Tota l :  4.
28334 sea.Sentence: who wonts to teach Fred's p ro fessor ' s  course.Semantics: \[ <wl ?
\[wl onlmgte\]>wont4\[ <wl ?
\[wl animate\]>teach13<course14 k \[ <professar IS ?
\[Fred pace profosear lS \ ]> poes course14\]>\]\]Analys is :  6.58337 eec.
Tota l :  18.9834 ee?.Sentence'Query"Analys is :whose course does the student whom John l iken want to be taking.\[ <<the38 student39> ?
\[John l ike4S <the38 student39>\]>wont46\[ <<the38 student39> ?
\[John l ike4S <the38 student39>\]>takeS6<course29 ?
\[<w3e ?
\[w3e animate\]> pose caurwe29\]>\]\]21.9999 eec.
Tota l :  39.4 sac.Sentence:Query:Analys is :to whom daee the professor  want which paper to be given.\[ <the14 professor lS>want17\[ x39 givo3S <w7 k \[w7 aninmte\]> <w21 k \[w21 paper22\]> \]\]14.3167 sec.
Tota l :  29.5167 sec.Figure 5-2: Summary of Test Results54grammar used by SAUMER.
except that it has a muchsmaller lexicon, and allows neither relative clauses norpossessive forms.
Running on the same machine asSAUMER.
ProGram required about 35 seconds to parse thesentence does John take cmpelOl, with a total processingtime of abo,.u 140 second.~ SAUMER required just over 2seconds to parse this phrase, and had a total processingtime of about 4 seconds.As it stands, the semantic notation used by SAUMERdoes "not contain much of the relevant information that"would be required by a real system.
Tense.
number andadverbial information, including concepts like location andtime.
would be required in the AAA.
If the SSLdescription were to be extended, with the resulting systembehaving as a natural language interface of the AAA.
amore database directed semantic notation would proveinvaluable.6.
PRESENT IXMITATIONSAlthough this application of metarules allows succinctdescriptions of a grammar, several problems have beenobserved.Since each metarule is applied to the rule base onlyonce.
the order of the metarules is very important.
Inour sample grammar, the passive verb phrases weregenerated before the sentence inversion transformation wasprocessed, and then the slash category propagationtransformations were executed.
For the curreatimplementation, if a rule generated by transformation T1is to be subjected to transformation T2.
then T1 mustappear before T2.
Moreover.
no rule that is the result of.
.
.
.
T2-can be operated on by TI.
It would be preferable toremove this restriction and impose one.
that is less severe.such as the finite closure restriction which is described in(Thompson.
1982) and used by ProGram.
With thisimprovement, the only restriction would be that atransformation could only be applied once in thederivation of a rule.The system can not currently process rules expressedin the Immediate Dominance/ Linear Precedence (ID/LP)format.
(Gazdar and Pullum.
1982).
With this format, aproduction rule is expressed with an unordered right handside with the ordering determined by a separatedeclaration of //near precedence.
For example, a passiveverb phrase rule could appear something like"(6.1) vp(pass.\[MIN\]) --  >v(\[MIN\], be .
.
.
.
).v(_.  Root.
Type.
_ )  with(Root in \[pass.carry.give\].indobj in Type.trans in Type).pp(to).optional(pp(by)): x## Imda\[optional" & <\[v" & pp(to)" & x##\]\ ]with the components having a linear precedence of:(6.2) v(_.be) < v < ppThe result would be that the pp(by) could appear beforeor after the pp(to), since there is no restriction on 'theirrelative positions.
I f  this format were implemented, onlyone passive metarule would have to be explicitly stated.The direct processing of ID/LP gremm~rs is discussed in(Shieber.
1982).
(Evans and Gazdar.
1984).
and (Popowich.forthcoming).7.
CONCLUSIONSSSL appears to adequately capture the f lavour ofGPSG descriptions while allowing more procedural control.Investigation into a relationship between SSL and GPSGgrammars could result in a method for translating GPSGgrammars into SSL for execution by SAUMER.
Furtherresearch could also provide a relationship between SSL andother grammar formalisms, such as /ex/c~-funct/on,dgranmu~$ (Kaplan and Bresnan.
1982).
The prologimplementation of SAUMER.
allowing left recursion inrules, should facilitate a more detailed study of thespecification language, and of some problems associatedwith metarule specifications.
Due to the easy separabilityof the semantic rules, one could attempt to introduce amore database oriented semantic notation and develop aninterface to a real database.
One could then examinesystem behaviour with a larger rule base and moreinvolved transi'ormations in an applications environmentlike that of the AAA.
However.
as is apparent from theapplication presented here and from preliminaryexperimentation (Popowich.
1984) (Popowich.
1985),further investigation of the efficient operation of thisProlog implementation with large grammars wil l  berequired.ACKNOWLEDGEMENTSl would like to thank Nick Cercone for reading anearlier version of this paper and providing some usefulsuggestions.
The comments of the referees were alsohelpful.
Facilities for this research were provided by theLaboratory for Computer and Communications Research.This work Was supported by the Natural Sciences andEngineering Research Council of Canada under OperatingGrant no.
A4309.
Installation Grant no.
SMI-74 andPostgraduate Scholarship #800.REFERENCESCercone.
N.. Hadley.
R.. Martin F.. McFetridge P. andStrzaikowski.
T. Dea i~ in~ and automat ing thequa l i ty  mmesmment of  a knowledge-ba.m~ system: thein i t ia l  automated academic advisor  experience, pages193-205.
IEEE Principles of Knowledge-Based SystemsProceedings.
Denver.
Colorado.
1984.Clocksin.
W.F.
and Mellish.
C.S.
Progrnmmlng in Prolog.Berlin-Heidelberg-NewYork:Springer-Verlag.
1981.55Dahl.
V. and Abramson.
H. On Gapping Gr~mm~.Proceedings of the Second International Joint Conferenceon Logic.
University of Uppsala.
Sweden.
1984.Evans.
R. and Gazdar.
G. The ProGram Manual.Cognitive Science Programme.
University of Sussex,1984.Fawcett.
B. personal commnnication.
Dept.
ofComputing Science.
University of Toronto.
1984.Gawron.
J.M.
et.aL Procemiag English w i th  aGenersliT~d Phrase Structure Grammar.
pages 74-81.Proceedings of the 2Oth Annual Meeting of theAssociation for Computational Linguistics, June.
1982.Gazdar.
G. Phrase Structure Grammar.
In Po Jacobsonand G.K. Pullum (Ed.).
The Nature of Syn~cx.icRepresentation, D.Reidel.
Dortrecht, 1981.Gazdar.
G. and Pullum.
G.K. Generalized PhraseStructure Gr~mm,~r:.
A Theoretical Synopsis.Technical Report.
Indiana University Linguistics Club.Bloomington Indiana.
August 1982.Kaplan.
R. and Bresnan.
J. Lexical-Functional Grarnmar:A Formal System for Grammatical Representation.
InJ.
Bresnan (Ed.).
Mental Representation ofGrammatical  Relation& Mrr Press.
1982.Pereira.
F.C.N.(ed).
C-Prolog User's Manual.
TechnicalReport.
SRI International.
Menlo Park.
California.
1984.Pereira.
F.C.N.
and Warren, D.H.D.
Definite ClauseGrammars for Language Analysis.
Art i f ic ia lIntell igence.
1980.
13, 231-278.Popowich.
F. S A ~  Sentence ,t~nlysi~ Using\]~ETaJ~lL\].es (\]Pl-el iminal-y Report).
TechnicalReport TR-84-10 and LCCR TR-84-2.
Department ofComputing Science.
Simon Fraser University.
August1984.Popowich.
F. The SAUMER User's Manual.
TechnicalReport TR-85-3 and LCCR TR-85-4.
Department ofComputing Science.
Simon Fraser University, 1985.Popowich.
F. Effective Implementation and Applicationof Ulxrestricted Gapping GrammArS.
Master's thesis.Department of Computing Science.
Simon FraserUniversity.
forthcoming.Radford.
A. Tr,~-~t'ormational Syntax.
CambridgeUniversity Press.
1981.Schubert.
L.K.
and Pelletier.
F J .
From English to Logic:Context-Free Computation of "Conventional" LogicalTranslation.
American Journal of Computational1=i~nfi,~tics.
January-March 1982.
8(1).
26-44.Shieber.
S.M.
Direct Parsing of ID/LP Grammar .draft.
1982.Thompson.
H. I-Ia~dlin~ Metarules in a Parser forGPSG.
Technical Report D.A.I.
No.
175.
Departmentof Artificial Intelligence.
University of Edinburgh.1982.56
