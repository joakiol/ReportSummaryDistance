Emergent Parsing and Generation with GeneralizedHASIDA KSitiElectrotechnical Laboratory1-1-4 Umezono, Tukuba, Ibaraki 305, J~,panE-mail: hasida@etl.go.jpChartAbstractA new, flexible inference method for Horn logic pro-gram is proposed.
It is also a drastic gencndization ofchart I)aming, partial instaatiation of clauses in a pro-gram ronghly corresponding to arcs in a chart.
Chart-like i)al~ing and semantic-head-driven g eration emergefrom this method.
With a parsimonious instantiationscheme for ambiguity packing, the parsing eoml)lexityreduces to that of standard chart-based algorithms.1 IntroductionLanguage use involves very complex interactions anmngvery divm.
'se types of information, not only syntacticone but also semantic, pragmatic, and so forth.
It ishence inappropriate to assmne any specific algorithmfor syntactic parsing or generation, which prescril)esparticular processing directions (such as left-to-right,top-down anti bottom-uI) ) and is I)iascd fl)r specifictypes of domain knowledge (such ,'~s a eontext-fl'eegrammar).
To accmmt for the whole language use,we will lmve to put many such algorithms together,ending up with an intractably complicated model.A better strategy is to i)ostulate no specific algo-rithms for parsing or generation or any particular t~k,but instead a single uniform computational methodfrom which emerge various types of computation in-eluding parsing and generation dei)ending ui)on vari-ous computational contexts.For example, Earley deductiml (Pereir:t & Warren,1983) is a general procedure for dealing with Hornclauses which gives rise to Earlcy-like parsing whengiven a context-free grammar and a word string asthe inlmt.
Shieber (1988) has generalized this methodso as to adapt to sentence generation as well.
Thosenmthods fail to give rise to cllicieut conq)utation for awide variety of contexts, however, because they pre-scribe processing directions such ,~ left-to-right f(Jrparsing and bottom-up for generation.
They also hu:ka general way of efficient anfl)iguity l)acking unlimitedto  context-free grammars.
Hasida (1994a) i)rol)oses amore general inference method for clausal form logicl)rograms wtfich accounts for efficient parsing and gen-eration ~m emergent l)hmmmena.
This mctho(l pre-scribes no fixed processing directions, and the way itpacks ambiguity is not specific to context-free gnun-mare.
However, it is rather complicated an(l has greatercomputational complexity than standard algorithmsdo.In this i)ai)er we propose another inference methodfor tlorn logic programs based on Iiasida (1994a), andshow that efficient parsing and generation mnerge fromit.
Like that of Ilasida (1994a), this metlmd is to-tally eonstraint-1):med in the sense that it prcsupl)oSCSno taxed directions of information llow, but it is moreellicicnt owing to a p:trsimonious nmthod of instanti-ation.
In Section 2 we deline this inference method,which is a generalization of chart parsing, and maybe also thought of :m a connection method or a sort ofl)rogram transformation.
Section 3 illustrates how etfi-cient parsing and gencratiml emerge from this methodwitlmut any procedural stipulation specific to the t:mkand the domain knowledge (syntactic onstraints).
Sec-tion ,1 introduces a parsimmfious instantiation mthodfor ambiguity packing.
We will show that owing to thisnmthod the ciliciency reaches that of the standard al-gorithms with regard to context-free l)arsing.
Section 5<:on('huh~'s the paper by touching upon further researchdirections.2 Partial InstantiationA constraint is represented in terms of a Horn clauseprograln such am below.
(a) -p(A,B) -A=a(C).
(b) p(X,Y)-X=a(Y).
(c) p(U,W)-p(u,v)-p(v,w).Nanms l)cginnlng with eapltal letters rcpreseat vari-ables, ;md the other names l)rc(li(:ates .
'unl funetors.The atomic formulae following the maims ign are neg-ative (bo(\[y) laterals, an(l the others are positive (head)laterals.
A cl.
'mse without a positive literal is calleda top clause, whose negation represents agoM (top-level hYl)othesis), which corrcspomls to a query in Pro-log.
For instance, top clause (a) in the above l)rogramis regarded as goal ~_IA, B, C{p(A, B) A A = a(C)}.
Ingeneral, there may be several top clauses.
The pur-pose of computation is to tell whether any goal is sat-isfiable, and if so obtain an answer substitution for theterms (variat)les) in a satisfiabh~' goal.
We consider theminimal Herbrand models as usual.
So the set of an-swer sul)stitutions tbr A in the above i)rogram is {a(B),a(a(B)), a(a(a(B))),-..}.A graphical representation f this program is shownin Figure 1.
Here each clause is the set of the litendsenclosed in a dim closed curve.
A link connecting ar-gmllnents in a clause is the term (varial)le) filling in468Figure 1: A graphical representation f a program.those arguments.
(It is a hyperlink when there arcmore than two arguments.)
A transclausal link repre-sents the unifiability between two corresponding argu-ments of two unifial}lc It)orals.
(Neglect the arrows fora while.
)A hypothes is  is a conjunction of atomic formulasand I)indings.
The premise of a clause (i.e., the con-junction of the atomic formuhts and bindings whichappear ~ negative literals) is a hypothesis.
An ex-pans ion  for a hypothesis is a way of conll)ining (ill-stances of) clauses by resolutions so ~m to transl:tte thehyl}othcsis to another hypothesis involving bindingsonly.
We will refi,~r to an expausion by the sequenceof clauses iu the order of lcftnlost aplfiication of res-elution using their instances.
1 In the above l}rogram,for exami}le, expansion (e, b, Ii) translaLes the tol)-levelhylmthesis (A,B) A A=a(C) to a hypothesis A=a(C)A C=a(B).
An expansion of a clause is an exl)ansiou ofits premise.
We will simply say 'an exi}ansion' to meanall expansion of the top-level hyl}othesis.
A l)rogranlrepresents a set of expansions, and the COml}ut~tion ~mdiscussed later is to transform it so a.s to ligure out co lrect hypotheses while discarding the wrong expansions(those entailing wrong hypotheses).We say that there is a dependency  between twote rms whet l  those  te rn ls  a re  unified in some exl);t l lSiOll ,and the sequence of terms (including them) ntcdiatingthis unification is called the de l )endency  l )ath of i, hisdependency.
In Figure 1, for instance, the dependcacy1)etween A and X is mediated by dependency path A.X,A.U.X, A.U.U.X, and so on.
There is a dependency I}e-tween C and B, among others, be, cause of the unilia-bility of the two -o=a(o)s, though ~his unifiability isnot explicitly shown in Figure 1.
We say a dependencybetween two terms is cons is tent  when they at'(: notbound 1)3' inconsistent bindings.
All tile dependenciesin Figure 1 are consistent.A so lu t ion  of the program is an expansion ill whichevery dependency is consistent.
St) the {:Oml)utationwe propose in this paper is to transform the given pro-gram in such a way that every del}endeney be consis-tent.
~lb figure out dependencies, we use a symt)olicoI)eration called subsumpt ion ,  and de le te  the partsof the l}rogram which contrilmtes to wrong exl}ansi{mst l lere we meution the order anlong the literals in a clausejust  for exp lanatory  convenience.
This  order is ltot .sigaificanl,in the computat ion  discussed later.only.
For example, suppose there is an inconsistentdependency between terms <~ and ft. We create aninstance fl' of fl 1)y substunption operations to be dis-cussed shortly, so that every expansion containing aninstance of \[31 contains an instance of a del}cndeneypath between ?x and ft. We can then delete tit," clausecontaining flJ and probably sonte more parts of theprogranl without affecting the declarative semanticsof the program.
Below wc will dciine a computationali}roccdure in such a way that the, set of the possil)leexpansions eventually represent the set of all the solu-ti(ms.Subsmuption operation is to create subsumpt ionre la t ionsh ip .
We regard each part (clause, atomicfornmla, term, etc.)
of a program as the seg of itsinstances, and say that a part ~ of the program sub-sumes  another Itart 't I to mean that we exp l i c i t l y  knowthat ( D ~/.
We consider that a link is subsumed by 5if and only if one of the terms it links is sul}smncd by5.
We say term 5 is an or ig in  of ,q when ~/is sul)sumedby 5.
In this )taper we consider that every origin is abound term (the term filling in the Iirst argmnent ofa I)inding).
Let us say that two clauses (or two liter-als) are equ iva lent  when tltey are of the same formand for each pair of correslmnding terms the, two termshave the same sel; of origins.,qubsuntption relation restricts the possibility of ex-pansions so that if term ~l is subsumed by auotherto, rl)l (~ , )he l l  eve l 'y  expans ion  containing an instance.of 7\] 1)ll)St also contain an instance of 5.
SttbsUlnl)tionrelation is usefld to encode structure sharing amongCXIt&IlSiOIIS.
\[ll Sl)bSlll)ll}\[;ioll-});tse{\[ ~tppro: tehes~ a ter) l tn)ay subsume several non-unilial)le terms and thus thefirst term is shared among the latters.
IIowever, thai;is intpossibh; in unification-I)ased approaches, whered i f l ' e rcnt  expans ions  (:ltl)llOf5 share the same instance ofit ~erll) Ol" \[t C\[al lse.A par t ia l l y  ins tant ia ted  c lause is a el,'utse someol7 whose terms is subsumed by another terln in possi-bly another clause.
For instance,O) a (A~,Z) -b (~,~) -c (~,Z) .is a I}arti;tl instant)at)on of Lhe followin~ clause:(2) a(X,Z)-b(X,Y)-c(Y,Z).represents a term sul)sumed I,y t{!l.1\]t) A, 2 IIercafterwc say just 'clause' l.o refer to 1)oth uninstantiatedclauses al)(l partially instantiatcd clauses.A program consisting of such clauses is a gener-alizatiou of a chart (Kay, 1980).
A chart is a graphwhose node, s denote positions between words ill a sell-tenee and whose ares are regarded as context-free ruleseach instant)areal partially with respect o at most twosuch positions.
For instance, an active are front nodei to node j labelled with \[A -* * H ?
C\] is an instanceof rule A -~ l~' C with I}oth sides of B instantiate{l bypositions i and j.
This arc approxintatcly correspondsto (1)22This notat ion is i)ro\]iIelllati(: I)e{:itll,~(!
it i8 illlch!~ll' whether~,w{} OC?
;III'I'I~IICtL~ of A ill il, CIallS(!
(IellOt(} the .q;ill|{!
t{!l'lll.
Ill thispaper  they alway,'; do.311owevcr, an arc in a chart  does not  1}reclsely {:orl'e,ql}olld toa par t lany  in.stantlated au:~c derived fi'om a program enc,}dlng469A subsumption operation is to extend subsump-lion relation by possibly creating a partially instanti-ated clause.
A subsumptiml operation is character-ized by the origin, the source, anti the target .
Theorigin (let it be 5) is a bound term.
Tit(.'
source (a)and the target (r) are arguments, a should alreadybe subsumed by the origin, but r shmfld not be so.They should be connected through a transclausal link~.
Let the literal containing a be p. Also let the literalcontaining r be 7r, and the clause containing thmn be(IL There are two cases for subsumption, and in bothcases a comes to be linked through ~ with an argumentwhich is an instance of r subsmned by 5.In the first case of subsumption operation, whichwe cdl unfolding,  a partial iustantiation ,I)' of iI~ iscreated.
They are cquiwdent except hat the instancer '  of r in (I)' is subsumed by & After the unfolding, ais linked through ~ to tile iustance of r in (D' insteadof the originM r, and accordingly p is linked to theinstance of 7r in 4)'.
Let r"  be ~- after the unfolding.Then r I U r"  = % "# N "1"" = ~, and r I = "r ~ a hohl.This imp l ies r 'Caandr 'V Io  =~.
Sot"  atndo arenot unifial)le.For instance, the two suhsumption operations indi-cated by tim two arrows in Figure 1 are unfohlings.
Ineither case, the origin and the source are both A. Thetarget in the left is X and that in the right is U. Weobtain the program in Figure 2 by these operations,/Figure 2: After subsumi)tions to X and U by A.where partial instantiation (bl) and (el) of (b) atnd(c) have been created, respectively.In Figure 1, the subsumption opm'atiml throughthe (invisible) link connecting C and Y is not exe-cutable now, because the unification represented bythis link presupposes the unification of A and X throughthe dependency paths A.X, A.U.X, A.U.U.X, and so on.That is, it is only when C subsumes an instance (let itbe Y') of Y that subsumption from C to Y' is Imssible.
(This subsmnption is an unfohling without any e.opy,a context-fl'ee grammar in a standard w~ty.
See Section 4 forfurther discussion.
?$because then C automaticMly subsumes Yq) Same forthe.
subsumption ill the opposite direction.Tile second ease of subsmnption operation is calledfolding.
It takes place when there is already a literati7d equivalent o qr except that its argument r '  co lresponding to r is subsumed by 5.
In this case, nonew instance of clause is created, but instead link h isswitched so that it links a with ~" anti accordingly p islinked with ~'.
Let r"  he T after the unfohling.
Thenr n ~J = 0 both I)efore and after the fi)lding, and o n ris subtracted from r and added to r ~ 1)y tile folding.Fohling is triggered when there exists literal ~' as de-seribed abow~', and unfolding is executed otherwise.
Ifthe.re existed several such ~ds, folding takes place, cre-ating as nla l ly  i l t s tauees  of ~ and eot l l teet i t lg to those,'KIS.The two subsumption operations indicated in Fig-are 2 are fohlings.
Actually, in the.
left, the p(.,.)
in(bl) att(l tlutt in (b) are equivMent except hat the tirstargument of the former is subsunmd by A.
So tile linkwith the arrow arm the paralle.l aceoml)anyiug link areswitched up to p(o,.)
in (bl).
Similarly for tile rightsubsuml)tion.
Shown ill Figure.
3 is the result./.....,.- ......................
.
(bU/" Pt, t,~) ",,",,~ / /x" P g',',).
\,,(A-~/ ~ ~A~ f/ fA2 / ' - - - ' \  "1Figure 3: After Rfldiugs.Note that the original program encodes a im)lflemof partial parsing of a string beginning with "at" underthe context-free granunar consisting of the followingr l l les.1~ ~ aP ~ P PThe re.suit in Figure 3 encodes the iutinitely many pos-stifle parses of this incomplete se,lteuee.
Note also thathere the subsuml)tiou from C to tit(', instance, of Y in(1)1) would bc possible if C were bound.
'\]~he nextsection contains relevant examl)lcs.When a link is subsumed by two terms bound bytwo hmonsistent bindings (such am ?=a and o=b), thenthat link is deleted,  surrounding clauses possibly be-ing deleted if some of their attomie formubm are linkedwith no atomic fornmla any more.For the sake of simplicity, we mainly consider input-bound programs in this paper.
We say it programis inlmt-bound when every dependency path betweenbound terlns eOlluects a tertu ill a top clause and oltein a non-top clause.
'l~he program in Figure 1 and tileones for parsing ;and geue.ration in the billowing sec-tion are all inlmt-lmund programs.
For input-bound470programs, we have only to eonsider subsumt)tions byterms in top clauses: inl)ut-driven conqmtation.
Also,in inlmt-driven computation for inpnt-bound l)rogr~unswe do not have to worry about duplications of originsby subsmnl)timm.Both subsmnl)tion and deletion preserve the declar-ative semamtics of tlm program (the set of the solu-tions), tlmugh we skip at detailed proof due to the sl/acelimitation.
8o when they arc ,rot ;q)plicablc rely more,every expansion is a solutiml atnd vice versa.
For input-l)ound programs, the inlmt-driven COmlmtattion alw;tysterminates within time polynomiM as to the size of theprogram.
This is 1)ecanse there are at nmst n ',~ liar -tially instantiated clauses deriv(:d front a clausc withm terms, where n is the size of the inlmt (the trundlerof bound terms in the top clause(s)), and accordinglythere are polynomially many tr;umclausal links.
Ob-viously, partially instantiated clauses atnd new tran-sel,'msal links are each created in constant ime..
It isalso clear that each fohling ternfinates in polynomialtime.3 Parsing and Generationtlere we show that chart-like l)arsing and s(muultic-\]le,%d-driven generat ion  emerge  fronl the  ;t})ove (:()lll\[)ll-rational method.
We discuss examph!s of parsing ~tndgenenttion l)oth on the basis of the Mlowing gratnm~tr.
(3) s(Sem,X,Z)-np(SbjSem,X,Y)-vp(Sem,SbjSem,Y,Z).
(4) vp(Sem,SbjSem,X,Z)-v(Sem,SbjSem,ObjSem,X,Y-np(ObjSem,Y,Z).
(5) n p(Sem,X,Y) -Sem--tom -X=" Tom" (Y).
(6) ,p(Sem,X,Y) -Sere=mary -X=" Ma ry" (Y).
(7) v(Sem,Agt.Pat,X,Y)-Sem=love(Agt,Pat) -X=" loves" (Y).Since we h&ve ah'e&(ly nle.ntioned aunl)iguity lta(:king ' inthe previous section, below we do not explMtly dealwith ambiguity but instead discuss jusl; (tit(: senten(:estrneture in both parsing and gener;ttion.Let us first consider parsing of sentence 'rl?oln lov(:sMary'.
The i)roblmn is encoded I)y the wogram inFigure 4.
Tit(: inl)ut-driv(:n COmlmtation l)ro(:eeds asshown by the arrows, which represent subsuml)tio,t op-(:rations taking l)la(:(: in tlm ordering itMic~tted I)y tit(:labclling numbers.
A thick del)endency l)atth is llro-cessed by successive subsmnptions with the sam(; ori-gin.
Tile only subsuml)tion operations exeeul:abh~ intire initial situation is the one mmfl)ered 1 and ,'tfterthat the one nmnbered 2, along the thick I)ath l)etweenA0 and X in (5).
As the result of these unfoldings, weobtain the following clauses.
(8) s(Sem,~o,Z)-.p(SbjSem,~0.Y)-vp(Sem,SbjSem,Y,Z).
(9) np(Sem,~0,~ll) -Sem=tom -Aoo=" To.," (~).Of course other partially instanti~Lted (:l~tuses nmy b(:created lmre from definition clauses nf s other than (3)and those of np other tlum (5), but we omit them hereiul(l (ZOtl(!
(,~lltril.te Oll just one solution,Now the copy of link with the arrow numbered 3connected to (9) (:tin mediate subsumption operations.So the subsuml)tion oper~tion indicated tlu~t arrow istriggered, though that does not duplicate (9) becauseA1 ah'eady subsumes the target.
The result is alreadyrefieete.d in (9).
The subsequent subsumption Oln:r-ations mmtbered ,1, 5, aud 6 will yield the.
followingclaAtses.
(I(I) s(Sem,Ao0,Z)-np(SbjSem,A0,A,)-vp(Sem.SbjSem.Al ,Z).
(11) vp(Sem,SbjSem,~,Z)-v(Sem,SbjSem,ObjSem,A1 ,Y)-np(ObjSem,Y,Z).
(12) v(Sem,Agt,Pat,A1,A2)-Sem=love(Agt,Pat)-AI  ='' loves" (A22).Now the subsmnl)tion operations by A2 ~L,'e commenced,due.
to the creM;ion of (12).
Accordingly, tit(."
followingdauses are m'eated, and the parsing is finislw.d.
(13) s(Sem,A0,Aa) -np(SbjSem,A0,A, )-vp(Sem,SbjSem,A1 ,Aa).
(14) vp(Sem,SbjSem,A1,Aa)-v(Sem,SbjSem,ObjSem,Al,A2)--n p(ObjSem,A2,Aa).
(15) np(Sem,~,Aa) -Sere=mary -A-~2=" Mary"(AT).From tit(; earlier discussion in the cam'.
of context-free parsing tit(', tt(ttllber of ttl\[~uses created tl,ere isO(nm), where n is the number of the input wordsand M the lnaxilnttltt ltlllltb{w of the occurrences ofnou-termimd symbols in a eontext-fi'ee rule.
This isl~trger than tit(."
space complexity of the st~tndal'd l)ars -tug Mgorithms, but latter we will show how to improvei;he ellicien(:y so as to be equiwdent o tlt(; standltrdalgorithnts.No l)~wti(mbtr order ~tntollg the subsmnptioa oper-ations is ltrescril)ed in the M)ove COml)utation , ~tnd soit is not inherently limited to toll-down or bottom-up.
Note also that tlt(' left-to-right l)rocessiug or(leramong the input words is derived fi'om the dellnitioustrong link, rather than stilmlated a~s in Earley dedue-\[i()ll, ltlllOllg others .
We can m:(:onnt \[or islatn(|-dl'iV(.qlparsing ;Ls well, by Mlowing links between bindings totrigger sul)smnl)tions more earlier.Let  (ts ll(.
'xt take.
it look at sel ltel lee genel'atiol i .Consider the program shown in 1,'igure 5.
IIere.
theinlmt is semantic structure love(tom,mary).
Again thecomltutationM pro(:ess is indicated by the numl)ere.datrrows.
(i) (;M~es l)ht(:( ',atfter 5, but the.
order ~tm()ng6, 7, and 6t is ~u'l)itratry ~m long as 6 should be before7.
So the only 1)ossible sultsmnption <)Iteration in theb(:ginning is the ones I)y Love, wlfieh go through thethick curv(: connecting Love ;rod the X in (4).
Thiscreates tlt(: following cl~ume, ~unong othm's.
(16) v(Love,Tom,Ma ry,X,Y)- Love= love(To m, M a ry) -X ="loves" (Y).471Fig~ure 4: P~u'singLove......................................... ........=tom .............n~ Mary "i~e~,~mary .
...
''\., -rl,J / L ' \ \=tOl l l  .."/ ./i%.?..
...... vp../ ji "'..,.....Z .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
- .
.....'"""'.,...,...."....
.%....
?......
,..............=mary ..... " /\ ..................................... YFi#;ui'e S: Cener~d;ion472Now subsumption operations Call go through the coI)iCsof the other two thick curves.
So we arc creating the.following clauses, among others.
(17) ~(VO~,X,Z)-,p(Y--o-om~,X,V)-vp(~Y~m,V.Z).
(18) vp(L-o~,\]-om,X,Z)-v(Love,Tom,Mary,X,Y)-np(~,?
,Z) .
(19) np(To-m,X,Y) -Tom=tom -X=" Tom" (Y).
(20) .p(M---~,X,Y) -Mary:mary -X=" Mary"(Y).Not(: tlmt this generation process iunounts to a gemeralization of semantic-head-driven g eration (Shieber,van Noord, & Moore, 1989).
The order among theretriewds of semantic heads is the or(h;r of sul)sumI)-tion operations by dilfi;rent erms iu tile input seman-tic structure, just as with the iiroccssing order iunt)ngwords ill the case of parsing.
4 Also its ill the case ofi),'trsing, the computational comillexity of such a gen-eration is polynonfial with respect to the siz(: of theinImt semantic stru(.ture, provided that the I)rogr~tnlis inlmt-bound and tile c(unputation is input-driven.Although the above cxami)lc deals with only a singlesentence structure, ill general cases ambiguity packingmtturally takes lllace just as with parsing of ambiguoussentences.Under the restriction that the program be input-bound, tile grammar caunot employ feature stru(:turcsl)rewdcnt ill the current linguistic theories, and alsonmst be semantically monotonic (Shiebe, r et al, 1989) ~The proposed nlcthod can be generalized so as to re-move this restriction, though the details do not lit illthe allowed space.
This gcneraliz;ttion makes it pos-sible to deal with fc,'tturc structures and scnumtieallynon-nmnotonic grammars.
Of course tile cOnll/utlttionis not any nmre generally guantntced to terminate.
(be-cause Horn programs can encode '.t~uring machines),but our method still has a t)etter tcxmination prol)crtythan more simI)listic ones such im Pro\[og interl)retcr orEarley deduction.
For instanre, endless cxpansiou ofleft rceursion or SUBCNF list, which wouhl hal)penill simple top-(Iowa conrIlutations, is avoidrxl owing tofolding.4 Incremental  CopyThe parsing process (liseussed above is conllmtatiou-ally more eomplcx than chart parsing, ilere wc im-l)rove our method by introducing a more clfi<:ient st:heinefor ambiguity I)a(:king and thus reduce the plu'singcomplexity to that of chart l)~trsing, which is O(n:)for space aud O(n 3) for time.Tile present inelfi(:icncy is due to excessive umlti-plieation of clauses: much more I)artially instantiate.d(:l~uses arc created than arcs ill a chart.
So let ussnpposc that a subsumption Ol)eratiml does not dul)li-(:ate a whole clause I)ut only s()me part of it, so tlu~ta clause is coiffed incrcnlentally, as shown in Figure 6.We ,'Lssumc that a subsumption to an argument of aaSo the semantic-head-driven g \[~nttiou parallels bett~n' withleft-to-rlg, ht parsing than with syntactic-heard-driven l)arslng;.5The sem~uttlc monotonicity is practically same as the iuput-boun(lness with regard to sem~mtlc structures.literal copies the term filling in tlutt argulnent, the lit-I;ra\[, ll, l ld sonic  othP, r literals which l l le l l t io l l  that  tel'I l l,unless there have ah'eady been the terms and literalsto be thus created.
Subscrii)t i of ~t liter;d indic~testhat it is created by the i-th subsumption operation.Wc must ensure that this partial copying be se-mantically equiwdent o the copying of whole chumes.That  is a trivial business when there ~tre just one or twolitcrals in the original clause.
The case where there arcmore than throe litcrals reduces to tim e,~se where thereare exactly three literals, l>y grouping several iteralse<)nne<:ted directly (through terms) and treltt thenl i~-'~if they were one literal.
So below let us consider thecruse where there are three' litcrals ill a clause.A non-trivild chet:k must be (loll(!
ill Stlch ~L (tas{.
~ asill the lower right of I"igurc 6.
Here you must copy-r(.,.
)~ a,.l-q(.,.
)~ t)ut .ot -q(.,.
), I,~ause-~(...)~is compat ib le  w i th -q( - , . )
l  but not with -q(.
, . )
.
Wcslty that a set of liter.
'ds ;trc coml)atible when there isan instance of the obtuse, which involves all instance,of each of those literals.
Also, two literals arc said tobc heterogeneous  when thc, y haw' different originalsin the original uninstanti~tted clltuse.
(The originalof an origimd literal is itself.)
Ill general, when a sub-sumption Ol)erldfion copies two heterogeneous, directlyconnected litcrals anti creates two directly connectedliterals, the nct:r.ssary and sullicient c(mdition fl)r thispartiM copy to 1)e semantie:dly equivalent to the full-clause Col)y is obviously that the fin'nmr two literals beconlpatibh:.When two of the original litcrals ,'tre not (:onnccte(ldirectly with each other, two heterogeneous literalswhic.h have ~directly conne('.tcd originals are compat-ible iff they arc also directly emmected; wr.
need noteonsi(ler two literals whose originals are not directly( :onnccted,  I)ccaus(~ one su l )su l lq ) t ion  o l ler l t t ion (lt)(~snot copy such literals at a time..
When MI of thethree original literals arc.
connectt:d irectly with eachother, two hetcro,e;e.neous literals are compatible if\['they are ctmnected not only (lirectly but ~dso throughanother literal heterogeneous to both.
Ill flu:t, -r(., .
)~and -q(*, ' ) l  are (:mme(:ted both through tcrnl ~ andthrough P(?,o)2, but -r(?,?
)2 an( l -q(?
, . )
are not con-m~(:ted through any inst,;ume of the original p(.,?
).In the case, of context-free parsing, O(n '~) litr.nd.~are crt~ate(1, where ,.
is tile mnnl)er of words ill the, in-put string, 1)rovided that the origins o1' sul)suml)tionsare the posit.ions I)ctween tilt: inllut words only, (lue tothe input-driven COml)utation.
Since then; ~u'c jusl; i~constant imes more links than literals, the space (:om-1)Iexity of context-free llarsing hence l)econles O(n '2) illour method.
The time conq/h.
'xity is O(n3), I)eclulsethere are O(n) different ways of making each literal.Now the correspon(len(:c with vhart pltrsing is more ex-act.
All art: ill the c.h;u't :orresl)onds to an instantiatedlit, oral.
For instance, arc \[A ---* * H ?
C\] fi'om nolle i tonode j corrc~sl)onds to iustanti~tte.d l i tera l  -b(A//, ,~j),an(l \[A -+ ?
B C *\] fi'om n<)(le~ i to node j correspondsto a(~,i,Aj.
), l,'t)r .
't contc.xt-free rule with more thantwo symbols ill tile right-hand side, we can group sev-eral literals to oar, ~uu in(!lltiolll2d above  &l)d rP.dtlce itto It rule with j , s t  two symbols ill the right-hand si(h~.473subsumptionZ'<--_q(,~.._~,~)subsumption_q(~'~ ' )0(~,\])2 -- P0',~)2~ s ubsumption_q(,,, ) ~./~<...~_~ - _q (~) )Figure 6: Sul)sumptions with I,mremcntM Copy5 Conc lud ing RemarksWe have proposed a flexible iufi~'renee method for Ih)rnlogic programs.
The computation l>;mcd on it is itsort (>f program transformation, and chart l>arsing an<lsemantic-head-driven g eration are epil)henomena emer-gent thereof.
The proposed method has uothing Sl)C-cific to parsing, generation, context-free gramm~tr, orthe like.
This indicates that there is no need for anysi)ecial algorithms of parsing or generation, or perhapsany other aSl)CCt of natural language l)rocessing.The i(lelt reported al)ove ha.s already been partiallyimplemented and applied to spoken language under-standing (Nagao, tbusi(ht, & Miyat;t, 1993), and anitCCOllllt Of how the roh:s of speaker ltll(l hcatrer IIHlyswitch in the midst of it sentence (tlasida, Nagao, &Miy,'tta, 1993).
Although this line of work It;us into>porated a notion of dyn,'unics (Ilmsi(la, 1994b) ,'us thedeclarative semantics to control coutext-sensitive com-putation, we ;u:e planning to rel)laee dynamics withprobability.
For inlmt-bound programs together withinput-driven (:omputation, it is quite straightforwardto deline probabilistie, semantics auq ~t natm'M exten-sion of stochastic ontext-free grammars, aunong oth-ers, because all the body literals are prol)abilistieallyindependent in that case.
We wmfld like to report soonon ,'t generM treatment of probabilisticMly dependmltliterMs whih., preserving the cflieim~t struetm'c sharing,which will gmtrantee tlieient computation and learn-ing.ReferencetImsida, K., Nagao, K., & Miyatat, T.
(19!
)3).Joint Utterance: Intrmsentential Sl)eakcr/IIearcrSwitch as an Emergent I)henonmnon.
In Ba-jcsy, R.
(Ed.
), PTveeedinfls of the lgth InteT~za-tional Joint Conference on Artificial h~telligenceChamb4ry.llausida, K. (1994a).
Common Ihmristies for P~trsiug,Generation, ~md Whateww ....
In Strzalkowski,T.
(\[,~d.
), l~eversible Grammar in Natural Lan-guage lb'oeessing.
Kluwer Ae~ulemie Publisher,Dordrecht.tlasida, K. (19941)).
l)ynamies of Symbol Systems.New Generation ComFitling , 12(3).
to ~tppear inMay 1994.Kay, M. (1980).
Algorithm Schenmt;t and Datt;~ Struc-tures in Syntactic Processing.
Tceh.
rep., XE-I/.OX Palo Alto II.escarch Center, PMo All:(), Cal-ifornia.N~tgao, K., Ibusida, K., & Miyata, T. (1993).
Under-standing Spoken Natm'M Lauguage with Omni-Directional hfformation Flow.
In Proceedings ofthe 13th International Joint Conference on Ar-tiJicial Intelligence.Pereirat, I,'.
C. N., & Warren, D. H. \]).
(198:/).
Parsingas Deduction.
In Proceedings of the 21st AwnualMeeting of ACL, I)1 ).
137 14,1.Shieber, S. M. (1988).
A Uniform Architecture.
forParsing and Generation.
In Proceedings of the12th International Conferenee.
on ComputationalLinguistics, pp.
614-619.Shieber, S. M., v;m Noord, G., & Moore, R. C. (1989).A Semantic.-th:ad-Driven Generation Algorithmfor Unilication-B~sed Forn,Misms.
In Proceed-ings of the 27th Annual Meeting of the Assoeia-tion for Computational Linguistics, 1)i ).
7 17.474
