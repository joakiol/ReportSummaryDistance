Dependency Parsing of TurkishGu?ls?en Eryig?it?Istanbul Technical UniversityJoakim Nivre??
?Va?xjo?
University, Uppsala UniversityKemal Oflazer?Sabanc?
UniversityThe suitability of different parsing methods for different languages is an important topic insyntactic parsing.
Especially lesser-studied languages, typologically different from the languagesfor which methods have originally been developed, pose interesting challenges in this respect.
Thisarticle presents an investigation of data-driven dependency parsing of Turkish, an agglutinative,free constituent order language that can be seen as the representative of a wider class of languagesof similar type.
Our investigations show that morphological structure plays an essential role infinding syntactic relations in such a language.
In particular, we show that employing sublexicalunits called inflectional groups, rather than word forms, as the basic parsing units improvesparsing accuracy.
We test our claim on two different parsing methods, one based on a probabilis-tic model with beam search and the other based on discriminative classifiers and a deterministicparsing strategy, and show that the usefulness of sublexical units holds regardless of the parsingmethod.
We examine the impact of morphological and lexical information in detail and show that,properly used, this kind of information can improve parsing accuracy substantially.
Applyingthe techniques presented in this article, we achieve the highest reported accuracy for parsing theTurkish Treebank.1.
IntroductionRobust syntactic parsing of natural language is an area in which we have seen tremen-dous development during the last 10 to 15 years, mainly on the basis of data-drivenmethods but sometimes in combination with grammar-based approaches.
Despite this,most of the approaches in this field have only been tested on a relatively small setof languages, mostly English but to some extent also languages like Chinese, Czech,Japanese, and German.?
Department of Computer Engineering, Istanbul Technical University, 34469 Istanbul, Turkey.E-mail: gulsen.cebiroglu@itu.edu.tr.??
School of Mathematics and Systems Engineering, Va?xjo?
University, 35260 Va?xjo?, Sweden.E-mail: joakim.nivre@msi.vxu.se.?
Department of Linguistics and Philology, Uppsala University, Box 635, 75126 Uppsala, Sweden.?
Faculty of Engineering and Natural Sciences, Sabanc?
University, 34956 Istanbul, Turkey.E-mail: oflazer@sabanciuniv.edu.Submission received: 5 October 2006; revised submission received: 3 April 2007; accepted for publication:16 May 2007.?
2008 Association for Computational LinguisticsComputational Linguistics Volume 34, Number 3An important issue in this context is to what extent our models and algorithmsare tailored to properties of specific languages or language groups.
This issue is es-pecially pertinent for data-driven approaches, where one of the claimed advantagesis portability to new languages.
The results so far mainly come from studies where aparser originally developed for English, such as the Collins parser (Collins 1997, 1999),is applied to a new language, which often leads to a significant decrease in the measuredaccuracy (Collins et al 1999; Bikel and Chiang 2000; Dubey and Keller 2003; Levy andManning 2003; Corazza et al 2004).
However, it is often quite difficult to tease apart theinfluence of different features of the parsing methodology in the observed degradationof performance.A related issue concerns the suitability of different kinds of syntactic representationfor different types of languages.
Whereas most of the work on English has been basedon constituency-based representations, partly influenced by the availability of dataresources such as the Penn Treebank (Marcus, Santorini, and Marcinkiewicz 1993), ithas been argued that free constituent order languages can be analyzed more adequatelyusing dependency-based representations, which is also the kind of annotation found,for example, in the Prague Dependency Treebank of Czech (Hajic?
et al 2001).
Recently,dependency-based parsing has been applied to 13 different languages in the sharedtask of the 2006 Conference on Computational Natural Language Learning (CoNLL)(Buchholz and Marsi 2006).In this article, we focus on dependency-based parsing of Turkish, a language thatis characterized by rich agglutinative morphology, free constituent order, and predom-inantly head-final syntactic constructions.
Thus, Turkish can be viewed as the repre-sentative of a class of languages that are very different from English and most otherlanguages that have been studied in the parsing literature.
Using data from the recentlyreleased Turkish Treebank (Oflazer et al 2003), we investigate the impact of differentdesign choices in developing data-driven parsers.
There are essentially three sets ofissues that are addressed in these experiments. The first set includes issues relating to the treatment of morphology insyntactic parsing, which becomes crucial when dealing with languageswhere the most important clues to syntactic functions are often found inthe morphology rather than in word order patterns.
Thus, for Turkish, ithas previously been shown that parsing accuracy can be improved bytaking morphologically defined units rather than word forms as the basicunits of syntactic structure (Eryig?it and Oflazer 2006).
In this article, wecorroborate this claim showing that it holds in both approaches weexplore.
We also study the impact of different morphological featurerepresentations on parsing accuracy. The second set of issues concerns lexicalization, a topic that has been veryprominent in the parsing literature lately.
Whereas the best performingparsers for English all make use of lexical information, the real benefits oflexicalization for English as well as other languages remains controversial(Dubey and Keller, 2003; Klein and Manning 2003; Arun and Keller 2005). The third set concerns the basic parsing methodology, including bothparsing algorithms and learning algorithms.
We first introduce a statisticalparser using a conditional probabilistic model which is very sensitive tothe selected representational features and thus clearly exposes the ones358Eryig?it, Nivre, and Oflazer Dependency Parsing of Turkishwith crucial importance for parsing Turkish.
We then implement ourmodels on a deterministic classifier-based parser using discriminativelearning, which is one of the best performing dependency parsersevaluated on a wide range of different languages.Additionally we address the following issues: We investigate learning curves and provide an error analysis for the bestperforming parser. For most of our experiments we use as input the gold-standard tags fromthe treebank.
However, in our last experiments we evaluate the impact ofautomatic statistical morphological disambiguation on the performance ofour best performing parser.The rest of the article is structured as follows.
Section 2 gives a very brief introduc-tion to Turkish morphology and syntax and discusses the representation of morpholog-ical information and syntactic dependency relations in the Turkish Treebank.
Section 3is devoted to methodological issues, in particular the data sets and evaluation metricsused in experiments.
The following two sections present two different dependencyparsers trained and evaluated on the Turkish Treebank: a probabilistic parser (Section 4)and a classifier-based parser (Section 5).
Section 6 investigates the impact of lexicaliza-tion and morphological information on the two parsers, and Section 7 examines theirlearning curves.
Section 8 presents an error analysis for the best performing parser,and Section 9 analyzes the degradation in parsing performance when using automaticmorphological disambiguation.
Section 10 discusses related work, and Section 11 sum-marizes the main conclusions from our study.2.
Turkish: Morphology and Dependency RelationsTurkish displays rather different characteristics compared to the more well-studiedlanguages in the parsing literature.
Most of these characteristics are also found inmany agglutinative languages such as Basque, Estonian, Finnish, Hungarian, Japanese,and Korean.1 Turkish is a flexible constituent order language.
Even though in writtentexts the constituent order predominantly conforms to the SOV order, constituents mayfreely change their position depending on the requirements of the discourse context(Erguvanl?
1979; Hoffman 1994).
However, from a dependency structure point of view,Turkish is predominantly (but not exclusively) head final.Turkish has a very rich agglutinative morphological structure.
Nouns can give riseto about 100 inflected forms and verbs to many more.
Furthermore, Turkish words maybe formed through very productive derivations, increasing substantially the number ofpossible word forms that can be generated from a root word.
It is not uncommon to findup to four or five derivations in a single word.
Previous work on Turkish (Hakkani-Tu?r, Oflazer, and Tu?r 2002; Oflazer 2003; Oflazer et al 2003; Eryig?it and Oflazer 2006)has represented the morphological structure of Turkish words by splitting them intoinflectional groups (IGs).
The root and derivational elements of a word are represented1 We, however, do not necessarily suggest that the morphological sublexical representation that we use forTurkish later in this article is applicable to these languages.359Computational Linguistics Volume 34, Number 3by different IGs, separated from each other by derivational boundaries (DB).
Each IG isthen annotated with its own part of speech and any inflectional features as illustratedin the following example:2araban?zdayd?
(?it was in your car?
)araban?zda DB yd?araba+Noun+A3sg+P2pl+Loc?
??
?IG1DB +Verb+Zero+Past+A3sg?
??
?IG2?in your car?
?it was?In this example, the root of the word araban?zdayd?
is araba (?car?)
and its part of speech isnoun.
From this, a verb is derived in a separate IG.
So, the word is composed of two IGswhere the first one, araban?zda (?in your car?
), is a noun in locative case and in secondplural possessive form, and the second one is a verbal derivation from this noun in pasttense and third person singular form.2.1 Dependency Relations in TurkishBecause most syntactic information is mediated by morphology, it is not sufficientfor the parser to only find dependency relations between orthographic words;3 thecorrect IGs involved in the relations should also be identified.
We can motivate thiswith the following very simple example: In the phrase spor araban?zdayd?
(?it was inyour sports car?
), the adjective spor (?sports?)
should be connected to the first IG ofthe second word.
It is the word araba (?car?)
which is modified by the adjective, notthe derived verb form araban?zdayd?
(?it was in your car?).
So a parser should not justsay that the first word is a dependent of the second but also state that the syntacticrelation is between the last IG of the first word and the first IG of the second word, asshown:sporModaraban?zda DB yd?In Figure 1 we see a complete dependency tree for a Turkish sentence laid on top of thewords segmented along IG boundaries.
The rounded rectangles show the words andIGs within words are marked with dashed rounded rectangles.
The first thing to notein this figure is that the dependency links always emanate from the last IG of a word,because that IG determines the role of that word as a dependent.
The dependency linksland on one of the IGs of a (head) word (almost always to the right).
The non-final IGs(e.g., the first IG of the word okuldaki in Figure 1) may only have incoming dependency2 +A3sg = 3sg number agreement, +P2pl = 2pl possessive agreement, +Loc = Locative Case.3 For the same reason, Bozsahin (2002) uses morphemes as sublexical constituents in a CCG framework.Because the lexicon was organized in terms of morphemes each with its own CCG functor, the grammarhad to account for both the morphotactics and the syntax at the same time.360Eryig?it, Nivre, and Oflazer Dependency Parsing of TurkishFigure 1Dependency links in an example Turkish sentence.
?+?s indicate morpheme boundaries.
The rounded rectangles show words, and IGs within wordsthat have more than one IG are indicated by the dashed rounded rectangles.
The inflectionalfeatures of each IG as produced by the morphological analyzer are listed below the IG.links and are assumed to be morphologically linked to the next IG to the right (but wedo not explicitly show these links).4The noun phrase formed by the three words o?g?rencilerin en ak?ll?s?
in this examplehighlights the importance of the IG-based representation of syntactic relations.
Herein the word ak?ll?s?, we have three IGs: The first contains the singular noun ak?l (?intelli-gence?
), the second IG indicates the derivation into an adjective ak?ll?
(?intelligence-with??
?intelligent?).
The preceding word en (?most?
), an intensifier adverb, is linked to this IGas a modifier (thus forming ?most intelligent?).
The third IG indicates another derivationinto a noun (?a singular entity that is most intelligent?).
This last IG is the head of adependency link emanating from the word o?g?rencilerin with genitive case-marking (?ofthe students?
or ?students?
?)
which acts as the possessor of the last noun IG of the thirdword ak?ll?s?.
Finally, this word is the subject of the verb IG of the last word, through itslast IG.2.2 The Turkish TreebankWe have used the Turkish Treebank (Oflazer et al 2003), created by the Middle EastTechnical University and Sabanc?
University, in the experiments we report in this ar-ticle.
The Turkish Treebank is based on a small subset of the Metu Turkish Corpus(www.ii.metu.edu.tr/?corpus/corpus.html), a balanced collection of post-1990 Turk-ish text from 10 genres.
The version that has been used in this article is the version usedin the CoNLL-X shared task publicly available from www.ii.metu.edu.tr/?corpus/treebank.html.This treebank comprises 5,635 sentences in which words are represented with IG-based gold-standard morphological representation and dependency links between IGs.4 It is worth pointing out that arrows in this representation point from dependents to heads, becauserepresentations with arrows in the opposite direction also exist in the literature.361Computational Linguistics Volume 34, Number 3The average number of IGs per word is 1.26 in running text, but the figure is higher foropen class words and 1 for high frequency function words which do not inflect.
Of allthe dependencies in the treebank, 95% are head-final5 and 97.5% are projective.6Even though the number of sentences in the Turkish Treebank is in the same rangeas for many other available treebanks for languages such as Danish (Kromann 2003),Swedish (Nivre, Nilsson, and Hall 2006), and Bulgarian (Simov, Popova, and Osenova2002), the number of words is considerably smaller (54K as opposed to 70?100K for theother treebanks).
This corresponds to a relatively short average sentence length in thetreebank of about 8.6 words, which is mainly due to the richness of the morphologicalstructure, because often one word in Turkish may correspond to a whole sentence inanother language.3.
Dependency Parsing of TurkishIn the following sections, we investigate different approaches to dependency parsingof Turkish and show that using parsing units smaller than words improves the parsingaccuracy.
We start by describing our evaluation metrics and the data sets used, andcontinue by presenting our baseline parsers: two naive parsers, which link a dependentto an IG in the next word, and one rule-based parser.
We then present our data-drivenparsers in the subsequent sections: a statistical parser using a conditional probabilisticmodel (from now on referred to as the probabilistic parser) in Section 4 and a deter-ministic classifier-based parser using discriminative learning (from now on referred toas the classifier-based parser) in Section 5.3.1 Data Sets and Evaluation MetricsOur experiments are carried out on the entire treebank and all our results are reportedfor this data set.
We use ten-fold cross-validation for the evaluation of the parsers, exceptfor the baseline parsers which do not need to be trained.
We divide the treebank datainto ten equal parts and in each iteration use nine parts as training data and test theparser on the remaining part.We report the results as mean scores of the ten-fold cross-validation, with standarderror.
The main evaluation metrics that we use are the unlabeled attachment score(ASU) and labeled attachment score (ASL), namely, the proportion of IGs that areattached to the correct head (with the correct label for ASL).
A correct attachment isone in which the dependent IG (the last IG in the dependent word) is not only attachedto the correct head word but also to the correct IG within the head word.
Where relevant, wealso report the (unlabeled) word-to-word score (WWU), which only measures whethera dependent word is connected to (some IG in) the correct head word.
It should beclear from the discussion in Section 2.1 and from Figure 1 that the IG-to-IG evaluationis the right one to use for Turkish even though it is more stringent than word-to-word evaluation.
Dependency links emanating from punctuation are excluded in all5 Half of the head-initial dependencies are actually not real head-initial structures; these are caused bysome enclitics (addressed in detail in the following sections) which can easily be recovered with somepredefined rules.6 A dependency between a dependent i and a head j is projective if and only if all the words or IGs thatoccur between i and j in the linear order of the sentence are dominated by j.
A dependency analysis withonly projective dependencies corresponds to a constituent analysis with only continuous constituents.362Eryig?it, Nivre, and Oflazer Dependency Parsing of Turkishevaluation scores.
Non-final IGs of a word are assumed to link to the next IG within theword, but these links, referred to as InnerWord links, are not considered as dependencyrelations and are excluded in evaluation scoring.3.2 Baseline ParsersWe implemented three baseline parsers to assess the performance of our probabilisticand classifier-based parsers.
The first baseline parser attaches each word (from the lastIG) to the first IG of the next word while the second parser attaches each word to thefinal IG of the next word.
Obviously these two baseline parsers behave the same whenthe head word has only one IG.
The final punctuation of each sentence is assumed tobe the root of the sentence and it is not connected to any head.
The first two lines of Ta-ble 1 give the unlabeled attachment scores of these parsers.
We observe that attachingthe link to the first IG instead of the last one gives better results.The third baseline parser is a rule-based parser that uses a modified version of thedeterministic parsing algorithm by Nivre (2006).
This parsing algorithm, which will beexplained in detail in Section 5, is a linear-time algorithm that derives a dependencygraph in one left-to-right pass over the input, using a stack to store partially processedtokens and a list to store remaining input tokens in a way similar to a shift-reduceparser.
In the rule-based baseline parser, the next parsing action is determined accordingto 31 predefined hand-written rules (Eryig?it 2006; Eryig?it, Adal?, and Oflazer 2006).The rules determine whether or not to connect the units (words or IGs) on top of thestack and at the head of the input list (regardless of dependency labels).
It can beseen that the rule-based parser provides an improvement of about 15 percentage pointscompared to the relatively naive simpler baseline parsers which cannot recover head-initial dependencies.4.
Probabilistic Dependency ParserA well-studied approach to dependency parsing is a statistical approach where theparser takes a morphologically tagged and disambiguated sentence as input, andoutputs the most probable dependency tree by using probabilities induced from thetraining data.
Such an approach comprises three components:1.
A parsing algorithm for building the dependency analyses (Eisner 1996;Sekine, Uchimoto, and Isahara 2000)2.
A conditional probability model to score the analyses (Collins 1996)Table 1Unlabeled attachment scores and unlabeled word-to-word scores for the baseline parsers.Parsing Model ASU WWUAttach-to-next (first IG) 56.0 63.3Attach-to-next (last IG) 54.1 63.3Rule-based 70.5 79.3363Computational Linguistics Volume 34, Number 33.
Maximum likelihood estimation to make inferences about the underlyingprobability models (Collins 1996; Chung and Rim 2004)4.1 MethodologyThe aim of our probabilistic model is to assign a probability to each candidate depen-dency link by using the frequencies of similar dependencies computed from a trainingset.
The aim of the parsing algorithm is then to explore the search space in order to findthe most probable dependency tree.
This can be formulated with Equation (1) where Sis a sequence of n units (words or IGs) and T ranges over possible dependency treesconsisting of dependency links dep(ui,uH(i) ), with uH(i) denoting the head unit to whichthe dependent unit ui is linked and the probability of a given tree is the product of thedependency links that it comprises.T?
= argmaxTP(T|S) = argmaxTn?1?i=1P(dep (ui,uH(i) ) |S) (1)The observation that 95% of the dependencies in the Turkish treebank are head-final dependencies motivated us to employ the backward beam search dependencyparsing algorithm by Sekine, Uchimoto, and Isahara (2000) (originally designed forJapanese, another head-final language), adapted to our morphological representationwith IGs.
This algorithm parses a sentence starting from the end moving towards thebeginning, trying at each step to link the dependents to a unit to the right.
It uses abeam which keeps track of the most probable dependency structures for the partiallyprocessed sentence.
However, in order to handle head-initial dependencies, it employsthree predefined lexicalized rules7 (also used in our rule-based baseline parser).
Forevery new word, the parser starts by checking if any of the rules apply.
If so, it constructsa right-to-left link whereH(i) < i and directly assigns 1.0 as the dependency probability(P(dep (ui,uH(i) ) |S) = 1.0).
If none of the rules apply, it instead uses probabilities forhead-final dependencies.For the probability model, we adopt the approach by Chung and Rim (2004), whichitself is a modified version of the statistical model used in Collins (1996).8 In this modelin Equation (2), the probability of a dependency link P(dep (ui,uH(i) ) |S) linking ui to ahead uH(i) is approximated with the product of two probabilities:P(dep (ui,uH(i) ) |S) ?
P(link(ui,uH(i) ) |?i ?H(i) ) (2)P(ui links to some head dist(i,H(i)) away |?i)7 The rules check for enclitics such as de, ki, mi, written on the right side of and separately from the wordthey attach to, for the verb deg?il, which gives a negative meaning to the word coming before it and fornominals which do not have any verbs on their right side.8 The statistical model in Collins (1996) is actually used in a phrase-structure-based parsing approach, butit uses the same idea of computing probabilities between dependents and head units.
We also tried toemploy the statistical model of Collins, where the distance measure ?i,H(i) is included in the linkprobability formula (P(dep (ui,uH(i) ) |S) ?
P(link(ui,uH(i) ) |?i,H(i) )) , but we obtained worse resultswith this.364Eryig?it, Nivre, and Oflazer Dependency Parsing of TurkishIn this equation, P(link(ui,uH(i) ) |?i ?H(i) ) is the probability of seeing the same dependencywithin a similar context where ?i represents the context around thedependent ui and ?H(i) represents the context around the head uH(i), and P(ui links to some head dist(i,H(i)) away |?i) is the probability of seeingthe dependent linking to some head a distance dist(i,H(i)) away, in thecontext ?i.In all of the following models, dist(i,H(i)) is taken as the number of actual wordboundaries between the dependent and the head unit regardless of whether full wordsor IGs were used as units of parsing.9To alleviate the data sparseness, we use the interpolation of other estimates whilecalculating the probabilities in Equation (2).10 We use a strategy similar to Collins (1996)and we interpolate with estimates based on less context:P(x|y) ?
?
?
P1(x|y) + (1 ?
?)
?
P2(x) (3)where ?
= ?/(?+ 1) and ?
is the count of the x occurrencesDuring the actual runs, the smoothed probability P(link(ui,uH(i) ) |?i ?H(i) ) is estimatedby interpolating two unsmoothed empirical estimates extracted from the treebank:P1(link(ui,uH(i) ) |?i ?H(i) ) and P2(link(ui,uH(i) )).
A similar approach was employed forP(ui links to some head dist(i,H(i)) away |?i) and it is estimated by interpolatingP1(ui links to some head dist(i,H(i)) away |?i) and P2(ui links to some head dist(i,H(i))away).
If even after interpolation, the probability is 0, then a very small value isused.
Further, distances larger than a certain threshold value were assigned the sameprobability, as explained later.4.2 The Choice of Parsing UnitsIn the probabilistic dependency parsing experiments, we experimented with three dif-ferent ways of choosing and representing the units for parsing:111.
Word-based model #1: In this model, the units of parsing are the actual wordsand each word is represented by a combination of the representations of all the IGsthat make it up.
Note that although all IGs are used in representing a word, not all theinformation provided by an IG has to be used, as we will see shortly.
This representation,however, raises the following question: If we use the words as the parsing units and9 We also tried other distance functions, for example, the number of IGs between dependent and headunits, but this choice fared better than the alternatives.10 We tried many other different interpolation and backoff models where we tried to remove the neighborsone by one or the inflectional features.
But we obtained the best results with a two-level interpolation byremoving the contextual information all at once.11 Clarifying examples of these representations will be provided in the immediately following section.365Computational Linguistics Volume 34, Number 3find the dependencies between these, how can we translate these to the dependenciesbetween the IGs, since our goal is to find dependencies between IGs?
The selectionof the IG of the dependent word is an easy decision, as it is the last IG in the word.The selection of the head IG is obviously more difficult.
Because such a word-basedmodel will not provide much information about the underlying IGs structure, we willhave to make some assumptions about the head IG.
The observation that 85.6% of thedependency links in the treebank land on the first (and possibly the only) IG of thehead word and the fact that our first baseline model (attaching to the first IG) givesbetter performance than our second baseline model (attaching to the last IG), suggestthat after identifying the correct word, choosing the first IG as the head IG may be areasonable heuristic.
Another approach to determining the correct IG in the head wordcould be to develop a post-processor which selects this IG using additional rules.
Sucha post-processor could be worth developing if the WWU accuracy obtained with thismodel proves to be higher than all of the other models, that is, if this is the best wayof finding the correct dependencies between words without considering which IGs areconnected.
However, as we will see in Section 4.4, this model does not give the bestWWU.2.
Word-based model #2: This model is just like the previous model but we rep-resent a word using its final IGs rather than the concatenation of all their IGs when itis used as a dependent.
The representation is the same as in Word-based model #1 whenthe word is a head.
This results in a dynamic selection of the representation duringparsing as the representation of a word will be determined according to its role at thatmoment.
The representation of the neighboring units in context will again be selectedwith respect to the word in question: any context unit on the left will be representedwith its dependent representation (just the last IG) and any neighbor on the right willbe represented with its representation as a head.
The selection of the IG in the headword is the same as in the first model.3.
IG-based model: In this model, we use IGs as units in parsing.
We split the IG-based representation of each word and reindex these IGs in order to use them as singleunits in parsing.
Figure 2 shows this transfer to the IG-based model.
We still, however,need to know which IGs are word-final as they will be the dependent IGs (shown inthe figure by asterisks).
The contextual elements that are used in this model are theIGs to the left (starting with the last IG of the preceding word) and to the right of thedependent and the head IG.Figure 2Mapping from word-based to IG-based representation of a sentence.366Eryig?it, Nivre, and Oflazer Dependency Parsing of Turkish4.3 Reduced Dynamic Representations for IGsIn all three models, it is certainly possible to use all the information supplied by thefull morphological analysis in representing the IGs.12 This includes the root wordsthemselves, major and minor parts of speech,13 number and person agreement markers,possessive agreement markers, case markers, tense, aspect, mood markers, and othermiscellaneous inflectional and semantic markers especially for derivations.
Not all ofthese features may be relevant to the parsing task, and further, different features maybe relevant depending on whether the IG is being used as a dependent or a head.
Also,in order to alleviate the data sparseness problem that may result from the relativelymodest size of the treebank, an ?unlexicalized?
representation that does not contain theroot word needs to be considered so that statistics from IGs that are otherwise the sameexcept for the root word (if any) can be conflated.14 After some preliminary experimen-tation, we decided that a reduced representation for IGs that is dynamically selecteddepending on head or dependent status would give us the best performance.
We explainthe representation of the IGs and the parameters that we used in the three models. When used as a dependent (or part of a dependent word in models 1and 2) during parsing;?
Nominal IGs (nouns, pronouns, and other derived forms thatinflect with the same paradigm as nouns, including infinitives, pastand future participles) are represented only with the case marker,because that essentially determines the syntactic function of that IGas a dependent, and only nominals have cases.?
Any other IG is just represented with its minor part of speech. When used as a head (or part of a head word in models 1 and 2);?
Nominal IGs and adjective IGs with participle minor part ofspeech15 are represented with the minor part of speech and thepossessive agreement marker.?
Any other IG is just represented with its minor part of speech.Figures 3?5 show, for the first three words in Figure 1, the unlexicalized reducedrepresentations that are used in the three models when units are used as dependentsand heads during parsing.12 See Figure 1 for a sample of such information.13 A minor part-of-speech category is available for some major part-of-speech categories: pronouns arefurther divided into personal pronouns, demonstrative pronouns, interrogative pronouns, and so on.
Theminor part-of-speech category always implies the major part of speech.
For derived IGs, the minor part ofspeech mostly indicates a finer syntactic or semantic characterization of the derived word.
When nominor part of speech is available the major part of speech is used.14 Remember that only the first IG in a word has the root word.15 These are modifiers derived from verbs.
They have adjective as their major part of speech andpast/future participle as their minor part of speech.
They are the only types of IGs that have possessiveagreement markers other than nominals.367Computational Linguistics Volume 34, Number 3Figure 3Reduced IG representation for Word-based model #1.Figure 4Reduced IG representation for Word-based model #2.4.4 Experimental ResultsIn this section, we first evaluate the performance of the models described in Section 4.2.We then investigate the impact of different choices of morphological features on the bestperforming IG-based model.
In addition to the parsing model, the parser is given thefollowing parameters: the number of left and right neighbors of the dependent (Dl, Dr) to definethe dependent context ?i,16 the number of left and right neighbors of the head (Hl, Hr) to define thehead context ?H(i), the size of the beam (beamsize), and16 In terms of parsing units, the number of words for word-based models and the number of IGs forIG-based models.368Eryig?it, Nivre, and Oflazer Dependency Parsing of TurkishFigure 5Reduced IG representation for IG-based model. the distance threshold value beyond which P(ui links to some headdist(i,H(i)) away |?i) is assigned the same probability.Table 2 gives the ASU scores for the word-based and IG-based models for thebest combinations of contexts used for each case.
We also provide WWU scores forcomparison, but again stress that the main evaluation criterion is the ASU score.
Forall three models, the beamsize value is selected as 3 and distance threshold is selectedas 6.17 It can be seen that the performance of the word-based models is lower thanour rule-based baseline parser (Table 1) with ASU = 70.5, even though it is better thanthe first two rather naive baselines.
On the other hand, the IG-based model outper-forms all of the baseline parsers and word-based models.
It should also be noted thatthe IG-based model improves not only the ASU accuracy but also the word-to-wordaccuracy compared, to the word-based models.
Thus, the IG-based model not onlyhelps to recover the relations between correct IGs but also to find the correct headword.In Table 3, we also present results from experiments employing different represen-tations for the IGs.
A more detailed investigation about the use of limited lexicalizationand inflectional features will be presented later in Section 6.
Here, we will see whatwould have happened if we had used alternative reduced IG representations comparedto the representation described earlier, which is used in the best performing IG-basedmodel.Table 3 gives the results for each change to the representational model.
One cansee that none of these representational changes improves the performance of the bestperforming model.
Only employing major part-of-speech tags (#1) actually comes close,and the difference is not statistically significant.
Lexicalization of the model results ina drastic decrease in performance: Using the surface form (#6) gives somewhat better17 As stated earlier in Section 4.1, our distance function is calculated according to the word boundariesbetween the dependent and the head units.
In the treebank, 95% of the dependency links link to a wordthat is less than six words away.
Thus all the distances larger than or equal to six are conflated into thesame small probability.369Computational Linguistics Volume 34, Number 3Table 2Unlabeled attachment scores and unlabeled word-to-word scores for the probabilistic parser.Parsing Model (parameters) ASU WWUWord-based model #1 (Dl=1, Dr=1, Hl=1, Hr=1) 68.1?0.4 77.1?0.7Word-based model #2 (Dl=1, Dr=1, Hl=1, Hr=1) 68.3?0.3 77.6?0.5IG-based model (Dl=1, Dr=1, Hl=0, Hr=1) 72.1?0.3 79.0?0.7results than using root information (#5).
Also, dynamic selection of tags seems to helpperformance (#3) but using all available inflectional information performs significantlyworse possibly due to data sparseness.5.
Classifier-Based Dependency ParserOur second data-driven parser is based on a parsing strategy that has achieved a highparsing accuracy across a variety of different languages (Nivre et al 2006, 2007).
Thisstrategy consists of the combination of the following three techniques:1.
Deterministic parsing algorithms for building dependency graphs (Kudoand Matsumoto 2002; Nivre 2003; Yamada and Matsumoto 2003)Table 3Unlabeled attachment scores for different choices for morphological features.Model ASUIG-based model# (Dl=1, Dr=1, Hl=0, Hr=1) 72.1?0.31 Using major part of speech 71.2?0.2instead of minor part of speech2 Using only minor part of speech and 68.3?0.2no other inflectional features3 Using minor part of speech for all 71.0?0.3types of IGs together with case andpossessive markers for nominalsand possessive marker for adjectives(but no dynamic selection)4 Using all inflectional features in 46.5?0.4addition to minor part of speech5 Adding root information to the best 53.7?0.2performing IG-based model6 Adding surface form information to the best 54.4?0.2performing IG-based model370Eryig?it, Nivre, and Oflazer Dependency Parsing of Turkish2.
History-based models for predicting the next parser action (Black et al1992; Magerman 1995; Ratnaparkhi 1997; Collins 1999)3.
Discriminative classifiers to map histories to parser actions (Kudo andMatsumoto 2002; Yamada and Matsumoto 2003; Nivre, Hall, and Nilsson2004)A system of this kind employs no grammar but relies completely on inductive learningfrom treebank data for the analysis of new sentences, and on deterministic parsingfor disambiguation.
This combination of methods guarantees that the parser is robust,never failing to produce an analysis for an input sentence, and efficient, typicallyderiving this analysis in time that is linear in the length of the sentence.In the following sections, we will first present the parsing methodology and thenresults that show that the IG-based model again outperforms the word-based model.
Wewill then explore how we can further improve the accuracy by exploiting the advantagesof this parser.
All experiments are performed using the freely available implementationMaltParser.185.1 MethodologyFor the experiments in this article, we use a variant of the parsing algorithm proposedby Nivre (2003, 2006), a linear-time algorithm that derives a labeled dependency graphin one left-to-right pass over the input, using a stack to store partially processed tokensand a list to store remaining input tokens.
However, in contrast to the original arc-eagerparsing strategy, we use an arc-standard bottom-up algorithm, as described in Nivre(2004).
Like many algorithms used for dependency parsing, this algorithm is restrictedto projective dependency graphs.The parser uses two elementary data structures, a stack ?
of partially analyzedtokens and an input list ?
of remaining input tokens.
The parser is initialized with anempty stack and with all the tokens of a sentence in the input list; it terminates as soonas the input list is empty.
In the following, we use subscripted indices, starting from 0,to refer to particular tokens in ?
and ?.
Thus, ?0 is the token on top of the stack ?
(thetop token) and ?0 is the first token in the input list ?
(the next token); ?0 and ?0 arecollectively referred to as the target tokens, because they are the tokens considered ascandidates for a dependency relation by the parsing algorithm.There are three different parsing actions, or transitions, that can be performed inany non-terminal configuration of the parser: Shift: Push the next token onto the stack. Left-Arcr: Add a dependency arc from the next token to the top token,labeled r, then pop the stack. Right-Arcr: Add a dependency arc from the top token to the next token,labeled r, then replace the next token by the top token at the head of theinput list.18 http://w3.msi.vxu.se/users/nivre/research/MaltParser.html.371Computational Linguistics Volume 34, Number 3In order to perform deterministic parsing in linear time, we need to be able to predictthe correct parsing action (including the choice of a dependency type r for Left-Arcrand Right-Arcr) at any point during the parsing of a sentence.
This is what we use ahistory-based classifier for.The features of the history-based model can be defined in terms of different linguis-tic features of tokens, in particular the target tokens.
In addition to the target tokens,features can be based on neighboring tokens, both on the stack and in the remaininginput, as well as dependents or heads of these tokens in the partially built dependencygraph.
The linguistic attributes available for a given token are the following: Lexical form (root) (LEX) Part-of-speech category (POS) Inflectional features (INF) Dependency type to the head if available (DEP)To predict parser actions from histories, represented as feature vectors, we use sup-port vector machines (SVMs), which combine the maximum margin strategy introducedby Vapnik (1995) with the use of kernel functions to map the original feature spaceto a higher-dimensional space.
This type of classifier has been used successfully indeterministic parsing by Kudo and Matsumoto (2002), Yamada and Matsumoto (2003),and Sagae and Lavie (2005), among others.
To be more specific, we use the LIBSVMlibrary for SVM learning (Chang and Lin 2001), with a polynomial kernel of degree 2,with binarization of symbolic features, and with the one-versus-one strategy for multi-class classification.19This approach has some advantages over the probabilistic parser, in that it can process both left-to-right and right-to-left dependencies due to itsparsing algorithm, it assigns dependency labels simultaneously with dependencies and canuse these as features in the history-based model, and it does not necessarily require expert knowledge about the choice oflinguistically relevant features to use in the representations because SVMtraining involves implicit feature selection.However, we still exclude sentences with non-projective dependencies during train-ing.20 Because the classifier-based parser not only builds dependency structures but alsoassigns dependency labels, we give ASL scores as well as ASU scores.19 Experiments have also been performed using memory-based learning (Daelemans and Bosch 2005).
Theywere found to give lower parsing accuracy.20 Because the frequency of non-projective dependencies in the Turkish Treebank is not high enough tolearn such dependencies and mostly due to the unconnected punctuations with which we are dealing byadding an extra dependency label, we did not observe any improvement when applying thepseudo-projective processing of Nivre and Nilsson (2005), which is reported to improve accuracy forother languages.372Eryig?it, Nivre, and Oflazer Dependency Parsing of Turkish5.2 Experimental ResultsIn this section, our first aim is to confirm the claim that using IGs as the units in parsingimproves performance.
For this purpose, we start by using models similar to thosedescribed in the previous section.
We use an unlexicalized feature model where theparser uses only the minor POS and the DEP of tokens and compare the results with theprobabilistic parser.
We then show in the second part how we can improve accuracy byexploiting the morphological structure of Turkish and taking advantage of the specialfeatures of this parser.5.2.1 Comparison with the Probabilistic Parser.
In order to compare with the results of theprevious section, we adopt the same strategy that we used earlier in order to presentinflectional groups.
We employ two representation models: Word-based model, where each word is represented by the concatenationof its IGs, IG-based model, where the units are inflectional groups.We take the minor POS category plus the case and possessive agreement markers fornominals and participle adjectives to make up the POS feature of each IG.21 However,we do not employ dynamic selection of these features and just use the same strategyfor both dependents and the heads.
The reason is that, in this parser, we do not makethe assumption that the head is always on the right side of the dependent, but alsotry to find head-initial dependencies, and the parser does not know at a given stageif a unit is a candidate head or dependent.
In the IG-based model, InnerWord relations(Figure 5), which are actually determined by the morphological analyzer, are processeddeterministically without consulting the SVM classifiers.22The feature model (Feature Model #1) to be used in these experiments is shownin Figure 6.
This feature model uses five POS features, defined by the POS of the twotopmost stack tokens (?0, ?1), the first two tokens of the remaining input (?0, ?1), andthe token which comes just after the topmost stack token in the actual sentence (?0 + 1).The dependency type features involve the top token on the stack (?0), its leftmost andrightmost dependent (l(?0), r(?0)), and the leftmost dependent of the next input token(l(?0)).The results for this feature model and the two representation models can be seenin Table 4.
We again see that the IG-based model outperforms the word-based model.When we compare the unlabeled (ASU) scores with the results of the probabilistic parser(from Table 2), we see that we do not obtain any improvements neither for the IG-basedmodel nor for the word-based model.
This is probably the combined effect of not using21 Thus, we are actually combining some inflectional features with the part-of-speech category and usethem together in the POS feature.22 Because only the first IG of a word carries the stem information (and the remaining IGs has null ?
?values for this field), a lexicalized model can easily determine the InnerWord links without need for adeterministic model.
For the unlexicalized models, it is necessary to process InnerWord relationsdeterministically in order to get the full benefit of IG-based parsing, because the classifiers cannotcorrectly predict these relations without lexical information (Eryig?it, Nivre, and Oflazer 2006).
However,for the lexicalized models, adding deterministic InnerWord processing has no impact at all on parsingaccuracy, but it reduces training and parsing time by reducing the number of training instances for theSVM classifiers.373Computational Linguistics Volume 34, Number 3Figure 6Feature models for the classifier-based parser.Table 4Unlabeled and labeled attachment scores for the unlexicalized classifier-based parser.Parsing Model ASU ASLWord-based model 67.1?0.3 57.8?0.3IG-based model 70.6?0.2 60.9?0.3the lexical information for head-initial dependencies that we use in our rules in theprobabilistic parser, and of not using dynamic selection.235.2.2 Exploiting the Advantages of the Classifier-Based Parser.
To exploit the advantagesof the classifier-based parser, we now describe a setting which does not rely on anylinguistic knowledge on the selection of inflectional features and lets the classifier of theparser select the useful combinations of the features.
As SVMs can perform such taskssuccessfully, we now explore different representations of the morphological data in theIG-based model to see if the performance can be improved.As shown in earlier examples, the inflectional information available for a giventoken normally consists of a complex combination of atomic features such as +A3sg,+Pnon, and +Loc.
Eryig?it, Nivre, and Oflazer (2006) showed that adding inflectionalfeatures as atomic values to the feature models was better than taking certain subsetswith linguistic intuition and trying to improve on them.
Thus we now present resultswith the feature model where the POS component only comprises the minor part ofspeech and the INF comprises all the other inflectional features provided by the tree-bank without any reduction.
We investigate the impact of this approach first with anunlexicalized model (Feature Model #2 in Figure 6) and then with a lexicalized model(Feature Model #3 in Figure 6) where we investigate two different kinds of lexicalization:one using just the root information and one using the complete surface form as lexicalfeatures.Table 5 gives the results for both unlexicalized and lexicalized models with INFfeatures included in the feature model.
We can see the benefit of using inflectionalfeatures separately and split into atomic components, by comparing the first line ofthe table with the best results for the IG-based model in Table 4.
We can also note23 Actually, the equivalent of this IG-based model is the probabilistic model #3 in Table 3 (with no dynamicselection), which does not do significantly better than this classifier-based model.374Eryig?it, Nivre, and Oflazer Dependency Parsing of TurkishTable 5Unlabeled and labeled attachment scores for enhancements of the IG-based model.Feature Model ASU ASLFeature Model #2 (no lexicalization) 72.4?0.2 63.1?0.3Feature Model #3 (lex.
with surface forms) 75.7?0.2 66.6?0.3Feature Model #3 (lex.
with roots) 76.0?0.2 67.0?0.3the improvement that lexicalized models bring:24 In contrast to the probabilistic parser,lexicalization using root information rather than surface form gives better performance,even though the difference is not statistically significant.
The improvement in ASUscore is 3.9 percentage points for the lexicalized model (with root) over the IG-basedmodel of the probabilistic parser with ASU=72.1?0.3.
A similar case can be observed forWWU accuracies: Including INF and lexicalization with roots gives WWU=82.7?0.5 onthe entire treebank, which provides an improvement of 3.3 percentage points over theIG-based model of the probabilistic parser (withWWU=79.0?0.7).6.
The Impact of Inflectional Features and LexicalizationIn the previous sections, we presented our parsers using optimized parameters andfeature representations.
We have observed that using complete inflectional features andlexicalized models improves the accuracy of the classifier-based parser significantly,whereas for the probabilistic parser adding these features has a negative impact onaccuracy.
In this section, we investigate the influence of different inflectional featuresand lexical information on both parsers using the best performing IG-based models,in order to get a more fine-grained picture.
The results of the experiments with theclassifier-based parser are not strictly comparable to those of other experiments, becausethe training data have here been divided into smaller sets (based on the major part ofspeech category of the next token) as a way of reducing SVM training times without asignificant decrease in accuracy.
For the probabilistic parser, we have not used dynamicselection while investigating the impact of inflectional features.6.1 Inflectional FeaturesIn order to see the influence of inflectional features, we tested six different sets, whereeach set includes the previous one and adds some more inflectional features.
Thefollowing list describes each set in relation to the previous one:Set 1 No inflectional features except for minor part of speechSet 2 Set 1 + case and possessive markers for nominals, possessive markers for partici-ple adjectivesSet 3 Set 2 + person/number agreement features for nominals and verbsSet 4 Set 3 + all inflectional features for nominals24 The unlabeled exact match score (that is, the percentage of sentences for which all dependencies arecorrectly determined) for this best performing model is 37.5% upon IG-based evaluation and 46.5% uponword-based evaluation.375Computational Linguistics Volume 34, Number 3Set 5 Set 4 + all inflectional features for verbsSet 6 Set 5 + all inflectional featuresFigure 7 shows the results for both the probabilistic and the classifier-based parser.The results shown in Figures 7b confirm the importance of case and possessive features,which was presupposed in the manual selection of features in Section 4.
Besides these,the number/person agreement features available for nominals and verbs are also impor-tant inflectional features even though they do not provide any statistically significantincrease in accuracy (except for ASU in Figure 7b [Set 3]).
Another point that meritsattention is the fact that the labeled accuracy is affected more by the usage of inflectionalfeatures compared to unlabeled accuracy.
The difference between Set 1 and Set 2 (inFigure 7b) is nearly 4 percentage points for ASU and 10 percentage points for ASL.
Itthus appears that inflectional features are especially important in order to determine thetype of the relationship between the dependent and head units.
This is logical becausein Turkish it is usually not the word order that determines the roles of the constituentsin a sentence, but the inflectional features (especially the case markers).
We again seefrom these figures that the classifier-based parser does not suffer from sparse data evenif we use the full set of inflectional features (Set 6) provided by the treebank, whereas theprobabilistic parser starts having this problem even with Set 3 (Figure 7a).
The problemgets worse when we add the complete set of inflectional features.6.2 LexicalizationIn order to get a more fine-grained view of the role of lexicalization, we have investi-gated the effect of lexicalizing IGs from different major part-of-speech categories.
Weexpand this analysis into POS categories where relevant.
The results are shown in Ta-ble 6, where the first column gives the part-of-speech tag of the lexicalized units, andthe second and third columns give the total frequency and the frequency of distinct rootsfor that part-of-speech tag.
We again see that the probabilistic parser suffers from sparsedata especially for part-of-speech tags that appear with a high number of distinct roots.We cannot observe any increase with the lexicalization of any category.
The situation isdifferent for the classifier-based parser.
None of the individual lexicalizations causes adecrease.
We see that the lexicalization of nouns causes a significant increase in accuracy.Figure 7Accuracy for feature sets 1?6:a) Unlabeled accuracy for probabilistic parserb) Unlabeled and labeled accuracy for classifier-based parser376Eryig?it, Nivre, and Oflazer Dependency Parsing of TurkishTable 6Unlabeled and labeled attachment scores for limited lexicalization (n = count, d = number ofdistinct roots).Probabilistic Classifier-basedn d ASU ASU ASLNone - - 72.1?0.3 72.8?0.2 63.2?0.3Adjectives 6446 735 68.7?0.2 72.9?0.2 63.2?0.3Adverbs 3033 221 69.8?0.3 73.1?0.2 63.4?0.3Conjunctions 2200 44 67.8?0.4 74.1?0.2 64.2?0.3Determiners 1998 13 71.8?0.3 72.8?0.2 63.3?0.3Duplications 11 9 72.0?0.3 72.8?0.2 63.2?0.3Interjections 100 34 72.0?0.3 72.8?0.2 63.2?0.3Nouns 21860 3935 53.7?0.3 73.9?0.2 64.6?0.3Numbers 850 226 71.4?0.3 72.9?0.2 63.3?0.3Post-positions 1250 46 70.9?0.3 72.9?0.2 63.2?0.3Pronouns 2145 28 72.0?0.2 72.8?0.2 63.2?0.3Punctuations 10420 16 72.1?0.3 73.4?0.2 63.7?0.3Questions 228 6 71.9?0.2 72.8?0.2 63.2?0.3Verbs 14641 1256 59.9?0.4 72.9?0.2 63.8?0.3Lexicalization of verbs also gives a noticeable increase in the labeled accuracy eventhough this is not statistically significant.
A further investigation on the minor parts ofspeech of nouns25 shows that only common nouns have this positive effect, whereas thelexicalization of proper nouns does not improve accuracy.
We see that the lexicalizationof conjunctions also improves the accuracy significantly.
This improvement can be at-tributed to the enclitics (such as de, ki,mi, written on the right side of and separately fromthe word they attach to), which give rise to head-initial dependencies.
These enclitics,which are annotated as conjunctions in the treebank, can be differentiated from otherconjunctions by lexicalization which makes it very easy to connect them to their headon the left.Because we did not observe any improvement in the probabilistic parser, we con-tinued further experimentation only with the classifier-based parser.
We tried partiallylexicalized models by lexicalizing various combinations of certain POS categories (seeFigure 8).
The results show that, whereas lexicalization certainly improves parsingaccuracy for Turkish, only the lexicalization of conjunctions and nouns together hasan impact on accuracy.
Similarly to the experiments on inflectional features, we againsee that the classifier-based parser has no sparse data problem even if we use a totallylexicalized model.Although the effect of lexicalization has been discussed in several studies recently(Dubey and Keller 2003; Klein and Manning 2003; Arun and Keller 2005), it is ofteninvestigated as an all-or-nothing affair, except for a few studies that analyze the distri-butions of lexical items, for example, Bikel (2004) and Gildea (2001).
The results for25 IGs with a noun part-of-speech tag other than common nouns are marked with an additional minor partof speech that indicates whether the nominal is a proper noun or a derived form?one of futureparticiple, past participle, infinitive, or a form involving a zero-morpheme derivation.
These latter fourdo not contain any root information.377Computational Linguistics Volume 34, Number 3Figure 8Unlabeled and labeled attachment scores for incrementally extended lexicalization for theclassifier-based parser.Turkish clearly show that the effect of lexicalization is not uniform across syntacticcategories, and that a more fine-grained analysis is necessary to determine in whatrespects lexicalization may have a positive or negative influence.
For some models(especially those suffering from sparse data), it may even be a better choice to use somekind of limited lexicalization instead of full lexicalization, although the experimentsin this article do not show any example of that.
The results from the previous sectionsuggests that the same is true for morphological information, but this time showing thatlimited addition of inflectional features (instead of using them fully) helps to improvethe accuracy of the probabilistic parser.7.
The Impact of Training Set SizeIn order to see the influence of the training set size on the performance of our parsers,we designed the experiments shown in Figure 9, where the x-axis shows the numberof cross validation subsets that we used for training in each step.
Figure 9 gives theASU scores for the probabilistic parser (unlexicalized except for head-initial rules) andthe classifier-based parser (unlexicalized and lexicalized).
We observe that the relativeimprovement with growing training set size is largest for the classifier-based lexicalizedmodel with a relative difference of 5.2?0.2 between using nine training subsets and onetraining subset, whereas this number is 4.6?0.3 for the unlexicalized classifier-basedmodel and 2.5?0.2 for the unlexicalized probabilistic model.
We can state that despite itslower accuracy, the probabilistic model is less affected by the size of the training data.We can see from this chart that the relative ranking of the models remain the same,except for sizes 1?3, where the probabilistic parser does better (or no worse than) theunlexicalized classifier-based models.
Another conclusion may be that classifier-basedmodels are better at extracting information with the increasing size of the data in hand,whereas the probabilistic model cannot be improved very much with the increasing sizeof the data.
We can observe this situation especially in the lexicalized model which isimproved significantly between size = 6 subsets and size = 9 subsets, whereas there isno significant improvement on the unlexicalized models within this interval.378Eryig?it, Nivre, and Oflazer Dependency Parsing of Turkish686970717273747576771 2 3 4 5 6 7 8 9# cross validation sets used in trainingprobabilistic unlex.classifier-based unlex.classifier-based lex.Figure 9Unlabeled attachment score for different training set sizes.8.
Error AnalysisIn this section, we present a detailed error analysis on the results of our best per-forming parser.
We first evaluate our results on different dependency types.
We theninvestigate the error distribution in terms of distance between the head assigned bythe parser and the actual head.
Finally, we look at the error distribution in relationto sentence length.
In the analysis, the results are aggregated over all ten folds of thecross-validation.8.1 Accuracy per Dependency TypeTable 7 gives theASU, labeled precision, labeled recall and labeled F-score for individualdependency types.
The table is sorted according to the ASU results, and the averagedistance between head and dependent is given for each type.We see that the parser cannot find labeled dependencies for the types that havefewer than 100 occurrences in the treebank, with the single exception of RELATIVIZER,the enclitic ki (conjunction), written separately from the word it attaches to.
Because thisdependency type always occurs with the same particle, there is no sparse data problem.If we exclude the low-frequency types, we can divide the results into three maingroups.
The first group consists of determiners, particles, and nominals that have anASU score over 79% and link to nearby heads.
The second group mainly containssubjects, objects, and different kinds of adjuncts, with a score in the range 55?79% anda distance of 1.8?4.6 IGs to their head.
This is the group where inflectional features aremost important for finding the correct dependency.
The third group contains distantdependencies with a much lower accuracy.
These are generally relations like sentencemodifier, vocative, and apposition, which are hard to find for the parser because theycannot be differentiated from other nominals used as subjects, objects, or normal mod-ifiers.
Another construction that is hard to parse correctly is coordination, which mayrequire a special treatment.379Computational Linguistics Volume 34, Number 3Table 7Attachment score (ASU), labeled precision (P), labeled recall (R) and labeled F-score for eachdependency type in the treebank (n = count, dist = dependency length).Label n dist ASU P R FSENTENCE 7,252 1.5 90.5 87.4 89.2 88.3DETERMINER 1,952 1.3 90.0 84.6 85.3 85.0QUESTION.PARTICLE 288 1.3 86.1 80.0 76.4 78.2INTENSIFIER 903 1.2 85.9 80.7 80.3 80.5RELATIVIZER 85 1.2 84.7 56.6 50.6 53.4CLASSIFIER 2,048 1.2 83.7 74.6 71.7 73.1POSSESSOR 1,516 1.9 79.4 81.6 73.6 77.4NEGATIVE.PARTICLE 160 1.4 79.4 76.4 68.8 72.4OBJECT 7,956 1.8 75.9 63.3 62.5 62.9MODIFIER 11,685 2.6 71.9 66.5 64.8 65.7DATIVE.ADJUNCT 1,360 2.4 70.8 46.4 50.2 48.2FOCUS.PARTICLE 23 1.1 69.6 0.0 0.0 0.0SUBJECT 4,479 4.6 68.6 50.9 56.2 53.4ABLATIVE.ADJUNCT 523 2.5 68.1 44.0 54.5 48.7INSTRUMENTAL.ADJUNCT 271 3.0 62.7 29.8 21.8 25.2ETOL 10 4.2 60.0 0.0 0.0 0.0LOCATIVE.ADJUNCT 1,142 4.2 56.9 43.3 48.4 45.7COORDINATION 814 3.4 54.1 53.1 49.8 51.4S.MODIFIER 594 9.6 50.8 42.2 45.8 43.9EQU.ADJUNCT 16 3.7 50.0 0.0 0.0 0.0APPOSITION 187 6.4 49.2 49.2 16.6 24.8VOCATIVE 241 3.4 42.3 27.2 18.3 21.8COLLOCATION 51 3.3 41.2 0.0 0.0 0.0ROOT 16 - 0.0 0.0 0.0 0.0Total 43,572 2.5 76.0 67.0 67.0 67.08.2 Error DistanceWhen we evaluate our parser based on the dependency direction, we obtain an ASUof 72.2 for head-initial dependencies and 76.2 for head-final ones.
Figure 10a andFigure 10b give the error distance distributions for head-initial and head-final depen-dencies based on the unlabeled performance of the parser.
The x-axis in the figures givesthe difference between indexes of the assigned head IG and the real head IG.As stated previously, the head-initial dependencies constitute 5% of the entire de-pendencies in the treebank.
Figure 10a shows that for head-initial dependencies theparser has a tendency to connect the dependents to a head closer than the real heador in the wrong direction.
When we investigate these dependencies, we see that 70%of them are connected to a head adjacent to the dependent and the parser finds 90% ofthese dependencies correctly.
Thus, we can say that the parser has no problem in findingadjacent head-initial dependencies.
Moreover, 87% of the errors where the error distanceis equal to 1 (Figure 10a)26 are due to the dependents being connected to the wrong IG26 Meaning that the actual head and assigned head are adjacent.380Eryig?it, Nivre, and Oflazer Dependency Parsing of TurkishFigure 10Error distance distributions a) for head-initial dependencies b) for head-final dependencies.of the correct head word.
When we investigate the ability of the parser in finding thedependency direction, we see that our parser has a high precision value (91%) and arelatively lower recall value (80%).The parser is 100% successful in finding the direction of head-final dependencies.Furthermore, the errors that it makes while determining the correct head have a roughlynormal distance distribution, as can be seen from Figure 10b.27 We can see from the samefigure that 57% of the errors fall within the interval of ?2 IGs away from the actualhead.8.3 Sentence LengthFigure 11 shows the distribution of errors over sentences of different lengths.
Thex-axis shows the sentence length (measured in number of dependencies), the y-axisshows the error count, and the z-axis shows the number of sentences.
As expected,the distribution is dominated by short sentences with few errors (especially sentencesof up to seven dependencies with one error).
The mean number of errors appears tobe a linear function of sentence length, which would imply that the error probability27 Error distances with less than 40 occurrences are excluded from the figure.381Computational Linguistics Volume 34, Number 3Figure 11Error distribution versus sentence length.per word does not increase with sentence length.
This is interesting in that it seems toindicate that the classifier-based parser does not suffer from error propagation despiteits greedy, deterministic parsing strategy.9.
The Impact of Morphological DisambiguationIn all of the experiments reported herein, we have used the gold-standard tags providedby the treebank.
Another point that deserves investigation is therefore the impact ofusing tags automatically assigned by a morphological disambiguator, in other wordsthe accuracy of the parser on raw text.
The role of morphological disambiguators forhighly inflectional languages is far more complex than assigning a single main POScategory (e.g., Noun, Verb, Adj) to a word, and also involves assigning the correct mor-phological information which is crucial for higher level applications.
The complexity ofmorphological disambiguation in an agglutinative language like Turkish is due to thelarge number of morphological feature tag combinations that can be assigned to words.The number of potential morphological tag combinations in Turkish for all practicalpurposes is very large due to productively derived forms.28The two subsequent examples, for the words kalemi and asmadan, expose the twophenomena that a Turkish morphological disambiguator should deal with.
The outputsof the morphological analyzer are listed below the words.
The first example shows thatall three possible analyses of the word kalemi have ?Noun?
as the POS category but theydiffer in that they have different stems and inflectional features.
In the second example28 For the treebank data, the number of distinct combinations of morphological features is 718 for theword-based model of the classifier-based parser and 108 for the IG-based model.382Eryig?it, Nivre, and Oflazer Dependency Parsing of Turkishwe see that the possible analyses also have different IG segmentations; the first twoanalyses of the word asmadan consists of two IGs whereas the last one has one IG.kalemikale +Noun+A3sg+P1sg+Acc (?my castle?
in accusative form)kalem +Noun+A3sg+P3sg+Nom (?his pencil?
)kalem +Noun+A3sg+Pnon+Acc (?the pencil?
in accusative form)asmadanas +Verb+Pos DB +Adverb+WithoutHavingDoneSo (?without having hanged (it)?
)as +Verb+Pos DB +Noun+Inf2+A3sg+Pnon+Abl (?from hanging (it)?
)asma +Noun+A3sg+Pnon+Abl (?from the vine?
)The task of the morphological disambiguator is to choose one of the possible mor-phological analyses and thus to find the correct inflectional features including partsof speech, and the IG structure.
We first used the two-level morphological analyzer ofOflazer (1994) to analyze all the words in the treebank.29 This morphological analyzersimultaneously produces the IG segmentation and the relevant features encoded in allanalyses of a word form.
We then used the morphological disambiguator of Yu?ret andTu?re (2006), which has a reported accuracy of 96% for Turkish.When tested on our treebank data, the accuracy of the morphological disambiguatoris 88.4%, including punctuation (which is unambiguous) and using a lookup table forthe words that are not recognized by the morphological analyzer.30 The lower accuracyof the morphological disambiguator on the treebank can be due to different selectionsin the annotation process of the morphological disambiguator training data (Yu?ret andTu?re 2006), which is totally different from the treebank data.In order to investigate the impact of morphological disambiguation errors, we usedour best IG-based model and a lexicalized word-based model with our classifier-basedparser.31 We again evaluated our parsing models with ASU, ASL, and WWU scores.There is no problem when evaluating withWWU scores because this metric only takesinto account whether the head word assigned to a dependent is correct or not, whichmeans that any errors of the morphological disambiguator can be ignored.
Similarly, incalculating ASU and ASL scores for the word-based model, dependencies are assumedto be connected to the first IG of the head word without taking into consideration anyerrors in tags caused by the morphological disambiguator.
But when evaluating withthe ASU and ASL scores for the IG-based model, one problem that may appear is thatthe disambiguator may have assigned a totally different IG structure to the head word,compared to the gold standard (cf.
the three analyses of the word asmadan).
In this case,we accept a dependency link to be correct if the dependent is connected to the correcthead word and the head IG has the same POS category as the gold-standard.
This isreasonable because we know that some of the errors in inflectional features do not affectthe type of dependency very much.
For example, if we put the adjective ku?c?u?k (?small?
)29 We noted that 39% of the words were ambiguous and 17% had more than two distinct morphologicalanalyses.30 The words not recognized by the morphological analyzer are generally proper nouns, numbers, andsome combined words that are created in the development stage of the treebank and constitute 6.2% ofthe whole treebank.
If these words are excluded, the accuracy of the tagger is 84.6%.31 For this model, we added LEX features for ?0, ?0, ?1 to the feature model of our word-based model inTable 4.383Computational Linguistics Volume 34, Number 3Table 8Impact of morphological disambiguation on unlabeled and labeled attachment scores andword-to-word scores.ASU ASL WWUWord-based Gold standard 71.2?0.3 62.3?0.3 82.1?0.9Tagged 69.5?0.3 59.3?0.3 80.2?0.9IG-based Gold standard 76.0?0.2 67.0?0.3 82.7?0.5Tagged 73.3?0.3 63.2?0.3 80.6?0.7in front of the example given previously (ku?c?u?k kalemi), then the choice of morphologicalanalysis of the noun has no impact on the fact that the adjective should be connectedto the noun with dependency type ?MODIFIER?.
Moreover, most of the errors in POScategories will actually prevent the parser from finding the correct head word, whichcan be observed from the drop inWWU accuracy.Table 8 shows that the IG-based model and the word-based model are equallyaffected by the tagging errors and have a drop in accuracy within similar ranges.
(Itcan also be seen that, even with automatically tagged data, the IG-based model givesbetter accuracy than the word-based model.)
We can say that the use of an automaticmorphological analyzer and disambiguator causes a drop in the range of 3 percentagepoints for unlabeled accuracy and 4 percentage points for labeled accuracy (for bothword-based and IG-based models).10.
Related WorkThe first results on the Turkish Treebank come from Eryig?it and Oflazer (2006) where theauthors used only a subset of the treebank sentences containing exclusively head-finaland projective dependencies.
The parser used in that paper is a preliminary version ofthe probabilistic parser used in this article.
The first results on the entire treebank appearin Nivre et al (2007), where the authors use memory-based learning to predict parseractions, and in Eryig?it, Adal?, and Oflazer (2006), which introduces the rule-based parserused in this article.The Turkish Treebank has recently been parsed by 17 research groups in the CoNLL-X shared task on multilingual dependency parsing (Buchholz and Marsi 2006), where itwas seen as the most difficult language by the organizers and most of the groups.32 Thefollowing quote is taken from Buchholz and Marsi (page 161): ?The most difficult dataset is clearly the Turkish one.
It is rather small, and in contrast to Arabic and Slovene,which are equally small or smaller, it covers 8 genres, which results in a high percentageof new FORM and LEMMA values in the test set.
?The results for Turkish are given in Table 9.
Our classifier-based parser obtainedthe best results for Turkish (with ASU=75.8 and ASL=65.7) and also for Japanese, whichis the only agglutinative and head-final language in the shared task other than Turkish(Nivre et al 2006).
The groups were asked to find the correct IG-to-IG dependency links.When we look at the results, we observe that most of the best performing parsers use32 The Turkish data used in the shared task is actually a modified version of the treebank used in this article;some conversions are made on punctuation structures in order to keep consistency between all languages.384Eryig?it, Nivre, and Oflazer Dependency Parsing of TurkishTable 9CoNLL-X shared task results on Turkish (taken from Table 5 in Buchholz and Marsi [2006]).Teams ASU ASLNivre et al (2006) 75.8 65.7Johansson and Nugues (2006) 73.6 63.4McDonald, Lerman, and Pereira (2006) 74.7 63.2Corston-Oliver and Aue (2006) 73.1 61.7Cheng, Asahara, and Matsumoto (2006) 74.5 61.2Chang, Do, and Roth (2006) 73.2 60.5Yu?ret (2006) 71.5 60.3Riedel, C?ak?c?, and Meza-Ruiz (2006) 74.1 58.6Carreras, Surdeanu, and Marquez (2006) 70.1 58.1Wu, Lee, and Yang (2006) 69.3 55.1Shimizu (2006) 68.8 54.2Bick (2006) 65.5 53.9Canisius et al (2006) 64.2 51.1Schiehlen and Spranger (2006) 61.6 49.8Dreyer, Smith, and Smith (2006) 60.5 46.1Liu et al (2006) 56.9 41.7Attardi (2006) 65.3 37.8one of the parsing algorithms of Eisner (1996), Nivre (2003), or Yamada and Matsumoto(2003) together with a learning method based on the maximum margin strategy.
Wecan also see that a common property of the parsers which fall below the average(ASL=55.4) is that they do not make use of inflectional features, which is crucial forTurkish.33Another recent study that has promising results is C?ak?c?
and Baldridge (2006),where the authors use the MSTParser (McDonald, Lerman, and Pereira 2006), also usedin the CoNLL-X shared task (line 3 in Table 9).
Following the work of Eryig?it and Oflazer(2006) and Nivre et al (2006), they use the stem information and the case informationfor nominals and they also report an increase in performance by using these features.Similar to one of the models (?INF as a single feature?)
in Eryig?it, Nivre, and Oflazer(2006), where the feature names of the suffixes provided by the morphological analyzerare concatenated and used as a feature to the classifier, they use the surface forms ofthe suffixes as a whole.
We can say that the models in this article cover this approach inthat each suffix is used as a single feature name (which is shown to perform better thanusing them concatenated to each other in Eryig?it, Nivre, and Oflazer [2006]).
Because inTurkish, the same suffixes take different forms under vowel harmony34 and the surfaceforms of some different suffixes are structurally ambiguous,35 using them with theirfeature names is actually more meaningful.
C?ak?c?
and Baldridge (2006) report a word-to-word accuracy of 84.9%, which seems competitive, but unfortunately from this we33 Actually, there are two parsers (Bick 2006 and Attardi 2006 in Table 9) in this group which try to use partsof the inflectional features under special circumstances.34 For example, in the words ev+de (?at home?)
and okul+da (?at school?
), the suffixes -de and -da are the samelocative case suffixes (+Loc) but they take different forms due to vowel harmony.35 For example, in the word ev+in, the surface morpheme -inmay indicate both a second singular possessivesuffix (+P2sg) which will give the word the meaning of ?your house?
and a genitive case (+Gen) whichwill give the word the meaning of ?of the house?, as the underlying lexicalmorphemes are different.385Computational Linguistics Volume 34, Number 3are not able to gauge the IG-to-IG accuracy which we have argued is the right metricto use for Turkish, and their results are not comparable to any of the results in theliterature, because they have not based their experiments on any of the official releasesof the treebank.
In addition, they use an evaluation metric different from the ones inthe literature in that they only excluded some of the punctuations from the evaluationscore.11.
ConclusionsIn this article, we have investigated a number of issues in data-driven dependency pars-ing of Turkish.
One of the main results is that IG-based models consistently outperformword-based models.
This result holds regardless of whether we evaluate accuracy onthe word level or on the IG level; it holds regardless of whether we use the probabilisticparser or the classifier-based parser; and it holds even if we take into account theproblem caused by errors in automatic morphological analysis and disambiguation.Another important conclusion is that the use of morphological information canincrease parsing accuracy substantially.
Again, this result has been obtained both for theprobabilistic and the classifier-based parser, although the probabilistic parser requirescareful manual selection of relevant features to counter the effect of data sparseness.A similar result has been obtained with respect to lexicalization, although in this casean improvement has only been demonstrated for the classifier-based parser, which isprobably due to its greater resilience to data sparseness.By combining the deterministic classifier-based parsing approach with an adequateuse of IG-based representations, morphological information, and lexicalization, we havebeen able to achieve the highest reported accuracy for parsing the Turkish Treebank.AcknowledgmentsWe are grateful for the financial supportfrom TUBITAK (The Scientific and TechnicalResearch Council of Turkey) and IstanbulTechnical University.
We want to thank JohanHall and Jens Nilsson in the languagetechnology group at Va?xjo?
University fortheir contributions to the classifier-basedparser framework (MaltParser) within whichwe developed the classifier-based parser forTurkish.
We also want to thank Deniz Yu?retfor providing us with his morphologicaldisambiguator, and Es?ref Adal?
for hisvaluable comments.
Finally, we want tothank our three anonymous reviewers forinsightful comments and suggestionsthat helped us improve the final version ofthe article.ReferencesArun, Abhishek and Frank Keller.
2005.Lexicalization in crosslinguisticprobabilistic parsing: The case of French.In Proceedings of ACL?05, pages 302?313,Ann Arbor, MI.Attardi, Giuseppe.
2006.
Experiments with amultilanguage non-projective dependencyparser.
In Proceedings of CONLL-X,pages 166?170, New York, NY.Bick, Eckhard.
2006.
Lingpars, a linguisticallyinspired, language-independent machinelearner for dependency treebanks.
InProceedings of CONLL-X, pages 171?175,New York, NY.Bikel, Daniel M. 2004.
A distributionalanalysis of a lexicalized statistical parsingmodel.
In Proceedings of the Conference onEmpirical Methods in Natural LanguageProcessing, pages 182?189, Barcelona.Bikel, Daniel M. and David Chiang.
2000.Two statistical parsing models applied tothe Chinese treebank.
In Proceedings of the2nd Chinese Language Processing Workshop,pages 1?6, Hong Kong.Black, Ezra, Frederick Jelinek, John D.Lafferty, David M. Magerman, Robert L.Mercer, and Salim Roukos.
1992.
Towardshistory-based grammars: Using richermodels for probabilistic parsing.
InProceedings of the 5th DARPA Speech andNatural Language Workshop, pages 31?37,New York, NY.386Eryig?it, Nivre, and Oflazer Dependency Parsing of TurkishBozs?ahin, Cem.
2002.
The combinatorymorphemic lexicon.
ComputationalLinguistics, 28(2):145?186.Buchholz, Sabine and Erwin Marsi.2006.
CONLL-X shared task onmultilingual dependency parsing.
InProceedings of CONLL-X, pages 149?164,New York, NY.C?ak?c?, Ruket and Jason Baldridge.
2006.Projective and non-projective Turkishparsing.
In Proceedings of the 5thInternational Treebanks and LinguisticTheories Conference, pages 43?54, Prague.Canisius, Sander, Toine Bogers, Antalvan den Bosch, Jeroen Geertzen, and ErikTjong Kim Sang.
2006.
Dependencyparsing by inference over high-recalldependency predictions.
In Proceedings ofCONLL-X, pages 176?180, New York, NY.Carreras, Xavier, Mihai Surdeanu, and LluisMarquez.
2006.
Projective dependencyparsing with perceptron.
In Proceedings ofCONLL-X, pages 181?185, New York, NY.Chang, Chih-Chung and Chih-Jen Lin, 2001.LIBSVM: A Library for Support VectorMachines.
Software available atwww.csie.ntu.edu.tw/?cjlin/libsvm.Chang, Ming-Wei, Quang Do, and Dan Roth.2006.
A pipeline model for bottom-updependency parsing.
In Proceedings ofCONLL-X, pages 186?190, New York, NY.Cheng, Yuchang, Masayuki Asahara, andYuji Matsumoto.
2006.
Multi-lingualdependency parsing at NAIST.
InProceedings of CONLL-X, pages 191?195,New York, NY.Chung, Hoojung and Hae-Chang Rim.
2004.Unlexicalized dependency parser forvariable word order languages based onlocal contextual pattern.
In Proceedings ofthe 5th International Conference on IntelligentText Processing and ComputationalLinguistics, pages 109?120, Seoul.Collins, Michael.
1996.
A new statisticalparser based on bigram lexicaldependencies.
In Proceedings of ACL?96,pages 184?191, Santa Cruz, CA.Collins, Michael.
1997.
Three generative,lexicalised models for statistical parsing.In Proceedings of ACL?97, pages 16?23,Madrid.Collins, Michael.
1999.
Head-Driven StatisticalModels for Natural Language Parsing.
Ph.D.thesis, University of Pennsylvania,Philadelphia.Collins, Michael, Jan Hajic, Lance Ramshaw,and Christoph Tillmann.
1999.
A statisticalparser for Czech.
In Proceedings of ACL?99,pages 505?518, College Park, MD.Corazza, Anna, Alberto Lavelli, GiorgioSatta, and Roberto Zanoli.
2004.
Analyzingan Italian treebank with state-of-the-artstatistical parsers.
In Proceedings of the 3rdWorkshop on Treebanks and LinguisticTheories, pages 39?50, Tu?bingen.Corston-Oliver, Simon and Anthony Aue.2006.
Dependency parsing with referenceto Slovene, Spanish and Swedish.
InProceedings of CONLL-X, pages 196?200,New York, NY.Daelemans, Walter and Antal VandenBosch.
2005.Memory-Based LanguageProcessing.
Cambridge University Press,Cambridge.Dreyer, Markus, David A. Smith, andNoah A. Smith.
2006.
Vine parsing andminimum risk reranking for speed andprecision.
In Proceedings of CONLL-X,pages 201?205, New York, NY.Dubey, Amit and Frank Keller.
2003.Probabilistic parsing for German usingsister-head dependencies.
In Proceedingsof ACL?03, pages 96?103, Sapporo.Eisner, Jason.
1996.
Three new probabilisticmodels for dependency parsing: Anexploration.
In Proceedings of the 16thInternational Conference on ComputationalLinguistics, pages 340?345, Copenhagen.Erguvanl?, Eser Emine.
1979.
The Functionof Word Order in Turkish Grammar.Ph.D.
thesis, UCLA.Eryig?it, Gu?ls?en.
2006.
Tu?rkc?enin Bag?l?l?kAyr?s?t?rmas?
(Dependency Parsing of Turkish).Ph.D.
thesis, Istanbul Technical University.Eryig?it, Gu?ls?en, Es?ref Adal?, and KemalOflazer.
2006.
Tu?rkc?e cu?mlelerin kuraltabanl?
bag?l?l?k analizi [Rule-baseddependency parsing of Turkish sentences].In Proceedings of the 15th Turkish Symposiumon Artificial Intelligence and NeuralNetworks, pages 17?24, Mug?la.Eryig?it, Gu?ls?en, Joakim Nivre, and KemalOflazer.
2006.
The incremental use ofmorphological information andlexicalization in data-driven dependencyparsing.
In Computer Processing of OrientalLanguages, Beyond the Orient: The ResearchChallenges Ahead, pages 498?507,Singapore.Eryig?it, Gu?ls?en and Kemal Oflazer.
2006.Statistical dependency parsing of Turkish.In Proceedings of EACL?06, pages 89?96,Trento.Gildea, Daniel.
2001.
Corpus variation andparser performance.
In Proceedings of theConference on Empirical Methods in NaturalLanguage Processing, pages 167?202,Pittsburgh, PA.387Computational Linguistics Volume 34, Number 3Hajic?, Jan, Eva Hajic?ova?, Petr Pajas, JarmilaPanevova?, Petr Sgall, and Barbora Hladka?.2001.
Prague dependency treebank 1.0(final production label).
CDROM CAT:LDC2001T10., ISBN 1-58563-212-0.Hakkani-Tu?r, Dilek, Kemal Oflazer, andGo?khan Tu?r.
2002.
Statisticalmorphological disambiguation foragglutinative languages.
Journal ofComputers and Humanities, 36(4):381?410.Hoffman, Beryl.
1994.
Generating contextappropriate word orders in Turkish.
InProceedings of the Seventh InternationalWorkshop on Natural Language Generation,pages 117?126, Kennebunkport, ME.Johansson, Richard and Pierre Nugues.
2006.Investigating multilingual dependencyparsing.
In Proceedings of CONLL-X,pages 206?210, New York, NY.Klein, Dan and Christopher D. Manning.2003.
Accurate unlexicalized parsing.
InProceedings of ACL?03, pages 423?430,Sapporo.Kromann, Matthias T. 2003.
The Danishdependency treebank and the underlyinglinguistic theory.
In Proceedings of the 2ndWorkshop on Treebanks and LinguisticTheories, pages 217?220, Va?xjo?.Kudo, Taku and Yuji Matsumoto.
2002.Japanese dependency analysis usingcascaded chunking.
In Proceedings of theConference on Computational NaturalLanguage Learning, pages 63?69, Taipei.Levy, Roger and Christopher Manning.
2003.Is it harder to parse Chinese, or theChinese treebank?
In Proceedings of ACL?03,pages 439?446, Sapporo.Liu, Ting, Jinshan Ma, Huijia Zhu, andSheng Li.
2006.
Dependency parsing basedon dynamic local optimization.
InProceedings of CONLL-X, pages 211?215,New York, NY.Magerman, David M. 1995.
Statisticaldecision-tree models for parsing.
InProceedings of ACL?95, pages 276?283,Cambridge, MA.Marcus, Mitchell P., Beatrice Santorini, andMary Ann Marcinkiewicz.
1993.
Building alarge annotated corpus of English: ThePenn treebank.
Computational Linguistics,19(2):313?330.McDonald, Ryan, Kevin Lerman, andFernando Pereira.
2006.
Multilingualdependency analysis with a two-stagediscriminative parser.
In Proceedings ofCONLL-X, pages 216?220, New York, NY.Nivre, Joakim.
2003.
An efficient algorithmfor projective dependency parsing.
InProceedings of the 8th International Workshopon Parsing Technologies, pages 149?160,Nancy.Nivre, Joakim.
2004.
Incrementality indeterministic dependency parsing.
InProceedings of the Workshop on IncrementalParsing: Bringing Engineering and CognitionTogether, pages 50?57, Barcelona.Nivre, Joakim.
2006.
Inductive DependencyParsing.
Springer, Dordrecht.Nivre, Joakim, Johan Hall, and Jens Nilsson.2004.
Memory-based dependency parsing.In Proceedings of the Conference onComputational Natural Language Learning,pages 49?56, Boston, MA.Nivre, Joakim, Johan Hall, Jens Nilsson,Atanas Chanev, Gu?ls?en Eryig?it, SandraKu?bler, Stetoslav Marinov, and ErwinMarsi.
2007.
Maltparser: Alanguage-independent system fordata-driven dependency parsing.
NaturalLanguage Engineering Journal, 13(2):95?135.Nivre, Joakim, Johan Hall, Jens Nilsson,Gu?ls?en Eryig?it, and Stetoslav Marinov.2006.
Labeled pseudo-projectivedependency parsing with support vectormachines.
In Proceedings of CONLL-X,pages 221?225, New York, NY.Nivre, Joakim and Jens Nilsson.
2005.Pseudo-projective dependency parsing.
InProceedings of ACL?05, pages 99?106, AnnArbor, MI.Nivre, Joakim, Jens Nilsson, and Johan Hall.2006.
Talbanken05: A Swedish treebankwith phrase structure and dependencyannotation.
In Proceedings of LREC,pages 1392?1395, Genoa.Oflazer, Kemal.
1994.
Two-level descriptionof Turkish morphology.
Literary andLinguistic Computing, 9(2):137?148.Oflazer, Kemal.
2003.
Dependency parsingwith an extended finite-state approach.Computational Linguistics, 29(4):515?544.Oflazer, Kemal, Bilge Say, Dilek Z.Hakkani-Tu?r, and Go?khan Tu?r.
2003.Building a Turkish treebank.
In A. Abeille?,editor, Treebanks: Building and Using ParsedCorpora.
Kluwer, London, pages 261?277.Ratnaparkhi, Adwait.
1997.
A linearobserved time statistical parser based onmaximum entropy models.
In Proceedingsof the Conference on Empirical Methods inNatural Language Processing, pages 1?10,Providence, RI.Riedel, Sebastian, Ruket C?ak?c?, andIvan Meza-Ruiz.
2006.
Multi-lingualdependency parsing with incrementalinteger linear programming.
InProceedings of CONLL-X, pages 226?230,New York, NY.388Eryig?it, Nivre, and Oflazer Dependency Parsing of TurkishSagae, Kenji and Alon Lavie.
2005.
Aclassifier-based parser with linear run-timecomplexity.
In Proceedings of the 9thInternational Workshop on ParsingTechnologies, pages 125?132, Vancouver.Schiehlen, Michael and Kristina Spranger.2006.
Language independent probabilisticcontext-free parsing bolstered by machinelearning.
In Proceedings of CONLL-X,pages 231?235, New York, NY.Sekine, Satoshi, Kiyotaka Uchimoto, andHitoshi Isahara.
2000.
Backward beamsearch algorithm for dependency analysisof Japanese.
In Proceedings of the 17thInternational Conference on ComputationalLinguistics, pages 754?760, Saarbru?cken.Shimizu, Nobuyuki.
2006.
Maximumspanning tree algorithm for non-projectivelabeled dependency parsing.
InProceedings of CONLL-X, pages 236?240,New York, NY.Simov, Kiril, Gergana Popova, and PetyaOsenova.
2002.
HPSG-based syntactictreebank of Bulgarian (BulTreeBank).
InAndrew Wilson, Paul Rayson, and TonyMcEnery, editors, A Rainbow of Corpora:Corpus Linguistics and the Languages ofthe World.
Lincom-Europa, Munich,pages 135?142.Vapnik, Vladimir N. 1995.
The Nature ofStatistical Learning Theory.
Springer, NewYork, NY.Wu, Yu-Chieh, Yue-Shi Lee, and Jie-ChiYang.
2006.
The exploration ofdeterministic and efficient dependencyparsing.
In Proceedings of CONLL-X,pages 241?245, New York, NY.Yamada, Hiroyasu and Yuji Matsumoto.2003.
Statistical dependency analysis withsupport vector machines.
In Proceedings ofthe 8th International Workshop on ParsingTechnologies, pages 195?206, Nancy.Yu?ret, Deniz.
2006.
Dependency parsing as aclassification problem.
In Proceedings ofCONLL-X, pages 246?250, New York, NY.Yu?ret, Deniz and Ferhan Tu?re.
2006.Learning morphological disambiguationrules for Turkish.
In Proceedings ofHLT/NAACL?06, pages 328?334,New York, NY.389This article has been cited by:
