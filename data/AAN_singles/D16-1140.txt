Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 1328?1338,Austin, Texas, November 1-5, 2016. c?2016 Association for Computational LinguisticsControlling Output Length in Neural Encoder-DecodersYuta Kikuchi1?kikuchi@lr.pi.titech.ac.jpGraham Neubig2?gneubig@cs.cmu.eduRyohei Sasano1sasano@pi.titech.ac.jpHiroya Takamura1takamura@pi.titech.ac.jpManabu Okumura1oku@pi.titecjh.ac.jp1Tokyo Institute of Technology, Japan2Carnegie Mellon University, USAAbstractNeural encoder-decoder models have showngreat success in many sequence generationtasks.
However, previous work has not in-vestigated situations in which we would liketo control the length of encoder-decoder out-puts.
This capability is crucial for applica-tions such as text summarization, in whichwe have to generate concise summaries witha desired length.
In this paper, we pro-pose methods for controlling the output se-quence length for neural encoder-decodermodels: two decoding-based methods and twolearning-based methods.1 Results show thatour learning-based methods have the capabil-ity to control length without degrading sum-mary quality in a summarization task.1 IntroductionSince its first use for machine translation (Kalch-brenner and Blunsom, 2013; Cho et al, 2014;Sutskever et al, 2014), the encoder-decoder ap-proach has demonstrated great success in manyother sequence generation tasks including imagecaption generation (Vinyals et al, 2015b; Xu etal., 2015), parsing (Vinyals et al, 2015a), dialogueresponse generation (Li et al, 2016a; Serban etal., 2016) and sentence summarization (Rush et al,2015; Chopra et al, 2016).
In particular, in this pa-per we focus on sentence summarization, which as?Now at Preferred Networks.?
This work was done when the author was at the Nara In-stitute of Science and Technology.1Available at https://github.com/kiyukuta/lencon.its name suggests, consists of generating shorter ver-sions of sentences for applications such as documentsummarization (Nenkova and McKeown, 2011) orheadline generation (Dorr et al, 2003).
Recently,Rush et al (2015) automatically constructed largetraining data for sentence summarization, and thishas led to the rapid development of neural sentencesummarization (NSS) or neural headline generation(NHG) models.
There are already many studies thataddress this task (Nallapati et al, 2016; Ayana et al,2016; Ranzato et al, 2015; Lopyrev, 2015; Gulcehreet al, 2016; Gu et al, 2016; Chopra et al, 2016).One of the essential properties that text summa-rization systems should have is the ability to gen-erate a summary with the desired length.
Desiredlengths of summaries strongly depends on the sceneof use, such as the granularity of information theuser wants to understand, or the monitor size of thedevice the user has.
The length also depends on theamount of information contained in the given sourcedocument.
Hence, in the traditional setting of textsummarization, both the source document and thedesired length of the summary will be given as inputto a summarization system.
However, methods forcontrolling the output sequence length of encoder-decoder models have not been investigated yet, de-spite their importance in these settings.In this paper, we propose and investigate fourmethods for controlling the output sequence lengthfor neural encoder-decoder models.
The former twomethods are decoding-based; they receive the de-sired length during the decoding process, and thetraining process is the same as standard encoder-decoder models.
The latter two methods are1328learning-based; we modify the network architectureto receive the desired length as input.In experiments, we show that the learning-basedmethods outperform the decoding-based methodsfor long (such as 50 or 75 byte) summaries.
Wealso find that despite this additional length-controlcapability, the proposed methods remain competi-tive to existing methods on standard settings of theDUC2004 shared task-1.2 Background2.1 Related WorkText summarization is one of the oldest fields ofstudy in natural language processing, and manysummarization methods have focused specificallyon sentence compression or headline generation.Traditional approaches to this task focus on worddeletion using rule-based (Dorr et al, 2003; Zajicet al, 2004) or statistical (Woodsend et al, 2010;Galanis and Androutsopoulos, 2010; Filippova andStrube, 2008; Filippova and Altun, 2013; Filip-pova et al, 2015) methods.
There are also severalstudies of abstractive sentence summarization us-ing syntactic transduction (Cohn and Lapata, 2008;Napoles et al, 2011) or taking a phrase-based sta-tistical machine translation approach (Banko et al,2000; Wubben et al, 2012; Cohn and Lapata, 2013).Recent work has adopted techniques such asencoder-decoder (Kalchbrenner and Blunsom, 2013;Sutskever et al, 2014; Cho et al, 2014) and atten-tional (Bahdanau et al, 2015; Luong et al, 2015)neural network models from the field of machinetranslation, and tailored them to the sentence sum-marization task.
Rush et al (2015) were the firstto pose sentence summarization as a new target taskfor neural sequence-to-sequence learning.
Severalstudies have used this task as one of the bench-marks of their neural sequence transduction meth-ods (Ranzato et al, 2015; Lopyrev, 2015; Ayanaet al, 2016).
Some studies address the other im-portant phenomena frequently occurred in human-written summaries, such as copying from the sourcedocument (Gu et al, 2016; Gulcehre et al, 2016).Nallapati et al (2016) investigate a way to solvemany important problems capturing keywords, orinputting multiple sentences.Neural encoder-decoders can also be viewed asstatistical language models conditioned on the tar-get sentence context.
Rosenfeld et al (2001) haveproposed whole-sentence language models that canconsider features such as sentence length.
However,as described in the introduction, to our knowledge,explicitly controlling length of output sequences inneural language models or encoder-decoders has notbeen investigated.Finally, there are some studies to modify the out-put sequence according some meta information suchas the dialogue act (Wen et al, 2015), user person-ality (Li et al, 2016b), or politeness (Sennrich et al,2016).
However, these studies have not focused onlength, the topic of this paper.2.2 Importance of Controlling Output LengthAs we already mentioned in Section 1, the moststandard setting in text summarization is to inputboth the source document and the desired length ofthe summary to a summarization system.
Summa-rization systems thus must be able to generate sum-maries of various lengths.
Obviously, this propertyis also essential for summarization methods basedon neural encoder-decoder models.Since an encoder-decoder model is a completelydata-driven approach, the output sequence lengthdepends on the training data that the model is trainedon.
For example, we use sentence-summary pairsextracted from the Annotated English Gigaword cor-pus as training data (Rush et al, 2015), and theaverage length of human-written summary is 51.38bytes.
Figure 1 shows the statistics of the corpus.When we train a standard encoder-decoder modeland perform the standard beam search decoding onthe corpus, the average length of its output sequenceis 38.02 byte.However, there are other situations where wewant summaries with other lengths.
For exam-ple, DUC2004 is a shared task where the maximumlength of summaries is set to 75 bytes, and summa-rization systems would benefit from generating sen-tences up to this length limit.While recent NSS models themselves cannot con-trol their output length, Rush et al (2015) and othersfollowing use an ad-hoc method, in which the sys-tem is inhibited from generating the end-of-sentence(EOS) tag by assigning a score of??
to the tag and132905000100001500020000250003000035000400000  100  200  300  400  500  600  700(a) first sentence (181.87)0200004000060000800001000001200001400000  50  100  150  200  250  300(b) article headline (51.38)0 2000040000 6000080000 100000120000 140000160000 1800000  0.5  1  1.5  2  2.5  3  3.5(c) ratio (0.30)Figure 1: Histograms of first sentence length, headline length, and their ratio in Annotated Gigaword English Giga-word corpus.
Bracketed values in each subcaption are averages. h t c t c t h tAttendermtstyts?t<s> yt 1 h t c t c t h tAttendermtstyts?t<s> yt 1lengthbcat atFigure 2: The encoder-decoder architecture we used as abase model in this paper.generating a fixed number of words2, and finally theoutput summaries are truncated to 75 bytes.
Ideally,the models should be able to change the output se-quence depending on the given output length, and tooutput the EOS tag at the appropriate time point in anatural manner.3 Network Architecture: Encoder-Decoderwith AttentionIn this section, we describe the model architec-ture used for our experiments: an encoder-decoderconsisting of bi-directional RNNs and an attentionmechanism.
Figure 2 shows the architecture of themodel.Suppose that the source sentence is represented asa sequence of words x = (x1, x2, x3, ..., xN ).
For2According to the published code(https://github.com/facebook/NAMAS), the default num-ber of words is set to 15, which is too long for the DUC2004setting.
The average number of words of human summaries inthe evaluation set is 10.43.a given source sentence, the summarizer generatesa shortened version of the input (i.e.
N > M ),as summary sentence y = (y1, y2, y3, ..., yM ).
Themodel estimates conditional probability p(y|x) us-ing parameters trained on large training data consist-ing of sentence-summary pairs.
Typically, this con-ditional probability is factorized as the product ofconditional probabilities of the next word in the se-quence:p(y|x) =M?t=1p(yt|y<t,x),where y<t = (y1, y2, y3, ..., yt?1).
In the following,we describe how to compute p(yt|y<t,x).3.1 EncoderWe use the bi-directional RNN (BiRNN) as en-coder which has been shown effective in neural ma-chine translation (Bahdanau et al, 2015) and speechrecognition (Schuster and Paliwal, 1997; Graves etal., 2013).A BiRNN processes the source sentence forboth forward and backward directions with twoseparate RNNs.
During the encoding process,the BiRNN computes both forward hidden states(?
?h 1,?
?h 2, ...,?
?hN ) and backward hidden states(?
?h 1,?
?h 2, ...,?
?hN ) as follows:?
?h t = g(?
?h t?1, xt),?
?h t = g(?
?h t+1, xt).While g can be any kind of recurrent unit, we uselong short-term memory (LSTM) (Hochreiter andSchmidhuber, 1997) networks that have memorycells for both directions (?
?c t and?
?c t).1330After encoding, we set the initial hidden states s0and memory-cell m0 of the decoder as follows:s0 =?
?h 1,m0 = ?
?c 1.3.2 Decoder and AttenderOur decoder is based on an RNN with LSTM g:st = g(st?1, xt).We also use the attention mechanism developedby Luong et al (2015), which uses st to computecontextual information dt of time step t. We firstsummarize the forward and backward encoder statesby taking their sum h?i = ?
?h i +?
?h i, and then calcu-late the context vector dt as the weighted sum ofthese summarized vectors:dt =?iatih?i,where at is the weight at the t-th step for h?i com-puted by a softmax operation:ati =exp(st ?
h?i)?h??
exp(st ?
h??
).After context vector dt is calculated, the modelupdates the distribution over the next word as fol-lows:s?t = tanh(Whs[st;dt] + bhs),p(yt|y<t,x) = softmax(Wsos?t + bso).Note that s?t is also provided as input to the LSTMwith yt for the next step, which is called the inputfeeding architecture (Luong et al, 2015).3.3 Training and DecodingThe training objective of our models is to maximizelog likelihood of the sentence-summary pairs in agiven training set D:Lt(?)
=?
(x,y)?Dlog p(y|x; ?
),p(y|x; ?)
=?tp(yt|y<t,x).Once models are trained, we use beam search to findthe output that maximizes the conditional probabil-ity.4 Controlling Length in Encoder-decodersIn this section, we propose our four methods thatcan control the length of the output in the encoder-decoder framework.
In the first two methods, thedecoding process is used to control the output lengthwithout changing the model itself.
In the other twomethods, the model itself has been changed and istrained to obtain the capability of controlling thelength.
Following the evaluation dataset used in ourexperiments, we use bytes as the unit of length, al-though our models can use either words or bytes asnecessary.4.1 fixLen: Beam Search without EOS TagsThe first method we examine is a decoding approachsimilar to the one taken in many recent NSS meth-ods that is slightly less ad-hoc.
In this method, weinhibit the decoder from generating the EOS tag byassigning it a score of ??.
Since the model can-not stop the decoding process by itself, we simplystop the decoding process when the length of outputsequence reaches the desired length.
More specifi-cally, during beam search, when the length of the se-quence generated so far exceeds the desired length,the last word is replaced with the EOS tag and alsothe score of the last word is replaced with the scoreof the EOS tag (EOS replacement).4.2 fixRng: Discarding Out-of-rangeSequencesOur second decoding method is based on discardingout-of-range sequences, and is not inhibited fromgenerating the EOS tag, allowing it to decide whento stop generation.
Instead, we define the legitimaterange of the sequence by setting minimum and max-imum lengths.
Specifically, in addition to the normalbeam search procedure, we set two rules:?
If the model generates the EOS tag when theoutput sequence is shorter than the minimumlength, we discard the sequence from the beam.?
If the generated sequence exceeds the maxi-mum length, we also discard the sequence fromthe beam.
We then replace its last word withthe EOS tag and add this sequence to the beam1331(EOS replacement in Section 4.1).3In other words, we keep only the sequences thatcontain the EOS tag and are in the defined lengthrange.
This method is a compromise that allowsthe model some flexibility to plan the generated se-quences, but only within a certain acceptable lengthrange.It should be noted that this method needs a largerbeam size if the desired length is very different fromthe average summary length in the training data, asit will need to preserve hypotheses that have the de-sired length.4.3 LenEmb: Length Embedding asAdditional Input for the LSTMOur third method is a learning-based method specif-ically trained to control the length of the output se-quence.
Inspired by previous work that has demon-strated that additional inputs to decoder models caneffectively control the characteristics of the output(Wen et al, 2015; Li et al, 2016b), this model pro-vides information about the length in the form of anadditional input to the net.
Specifically, the modeluses an embedding e2(lt) ?
RD for each potentialdesired length, which is parameterized by a lengthembedding matrix Wle ?
RD?L where L is thenumber of length types.
In the decoding process, weinput the embedding of the remaining length lt asadditional input to the LSTM (Figure 3).
lt is initial-ized after the encoding process and updated duringthe decoding process as follows:l1 = length,lt+1 ={0 (lt ?
byte(yt) ?
0)lt ?
byte(yt) (otherwise),where byte(yt) is the length of output word yt andlength is the desired length.
We learn the valuesof the length embedding matrix Wle during train-ing.
This method provides additional informationabout the amount of length remaining in the outputsequence, allowing the decoder to ?plan?
its outputbased on the remaining number of words it can gen-erate.3This is a workaround to prevent the situation in which allsequences are discarded from a beam.jt otitftstmtmt 1st 1e1(xt) e2(lt)ltxtFigure 3: LenEmb: remaining length is used as addi-tional input for the LSTM of the decoder. h t c t c t h tAttendermtstyts?t<s> yt 1 h t c t c t h tAttendermtstyts?t<s> yt 1lengthbcat atFigure 4: LenInit: initial state of the decoder?s memorycell m0 manages output length.4.4 LenInit: Length-based Memory CellInitializationWhile LenEmb inputs the remaining length lt to thedecoder at each step of the decoding process, theLenInit method inputs the desired length once atthe initial state of the decoder.
Figure 4 shows the ar-chitecture of LenInit.
Specifically, the model usesthe memory cell mt to control the output length byinitializing the states of decoder (hidden state s0 andmemory cell m0) as follows:s0 =?
?h 1,m0 = bc ?
length, (1)where bc ?
RH is a trainable parameter and lengthis the desired length.While the model of LenEmb is guided towardsthe appropriate output length by inputting the re-maining length at each step, this LenInit attemptsto provide the model with the ability to manage theoutput length on its own using its inner state.
Specif-ically, the memory cell of LSTM networks is suit-able for this endeavour, as it is possible for LSTMs13321 23 45 67 89 1050  100  150  200  250  300  350  400  450  500  550(a) first sentence (206.91)05010015020025030035  40  45  50  55  60  65  70  75  80(b) summary (70.00)0204060801001201400  0.2  0.4  0.6  0.8  1  1.2(c) ratio (0.35)Figure 5: Histograms of first sentence length, summary length, and their ratio in DUC2004.to learn functions that, for example, subtract a fixedamount from a particular memory cell every timethey output a word.
Although other ways for man-aging the length are also possible,4 we found thisapproach to be both simple and effective.5 Experiment5.1 DatasetWe trained our models on a part of the AnnotatedEnglish Gigaword corpus (Napoles et al, 2012),which Rush et al (2015) constructed for sentencesummarization.
We perform preprocessing using thestandard script for the dataset5.
The dataset con-sists of approximately 3.6 million pairs of the firstsentence from each source document and its head-line.
Figure 1 shows the length histograms of thesummaries in the training set.
The vocabulary sizeis 116,875 for the source documents and 67,564for the target summaries including the beginning-of-sentence, end-of-sentence, and unknown word tags.For LenEmb and LenInit, we input the length ofeach headline during training.
Note that we do nottrain multiple summarization models for each head-line length, but a single model that is capable of con-trolling the length of its output.We evaluate the methods on the evaluation setof DUC2004 task-1 (generating very short single-document summaries).
In this task, summarizationsystems are required to create a very short sum-mary for each given document.
Summaries overthe length limit (75 bytes) will be truncated andthere is no bonus for creating a shorter summary.The evaluation set consists of 500 source documentsand 4 human-written (reference) summaries for each4For example, we can also add another memory cell formanaging the length.5https://github.com/facebook/NAMASsource document.
Figure 5 shows the length his-tograms of the summaries in the evaluation set.
Notethat the human-written summaries are not always aslong as 75 bytes.
We used three variants of ROUGE(Lin, 2004) as evaluation metrics: ROUGE-1 (uni-gram), ROUGE-2 (bigram), and ROUGE-L (longestcommon subsequence).
The two-sided permutationtest (Chinchor, 1992) was used for statistical signif-icance testing (p ?
0.05).5.2 ImplementationWe use Adam (Kingma and Ba, 2015) (?=0.001,?1=0.9, ?2=0.999, eps=10?8) to optimize param-eters with a mini-batch of size 80.
Before every10,000 updates, we first sampled 800,000 trainingexamples and made groups of 80 examples withthe same source sentence length, and shuffled the10,000 groups.We set the dimension of word embeddings to 100and that of the hidden state to 200.
For LSTMs,we initialize the bias of the forget gate to 1.0 anduse 0.0 for the other gate biases (Jo?zefowicz et al,2015).
We use Chainer (Tokui et al, 2015) to im-plement our models.
For LenEmb, we set L to 300,which is larger than the longest summary lengths inour dataset (see Figure 1-(b) and Figure 5-(b)).For all methods except fixRng, we found a beamsize of 10 to be sufficient, but for fixRng we useda beam size of 30 because it more aggressively dis-cards candidate sequences from its beams during de-coding.6 Result6.1 ROUGE EvaluationTable 1 shows the ROUGE scores of each methodwith various length limits (30, 50 and 75 byte).
Re-gardless of the length limit set for the summariza-133330 byte 50 byte 75 bytemodel R-1 R-2 R-L R-1 R-2 R-L R-1 R-2 R-LfixLen 14.34 3.10?
13.23 20.00?
5.98 18.26?
25.87?
7.93 23.07?fixRng 13.83?
3.08?
12.88 20.08?
5.74 18.19?
26.01 7.69?
22.77?LenEmb(0,L) 14.23 3.21 13.02 20.78 5.97 18.57 26.73 8.39 23.88LenInit(0,L) 14.31 3.27 13.19 20.87 6.16 19.00 25.87 8.27 23.24LenEmb(0,?)
13.75 3.30 12.68 20.62 6.22 18.64 26.42 8.26 23.59LenInit(0,?)
13.92 3.49 12.90 20.87 6.19 19.09 25.29?
8.00 22.71?Table 1: ROUGE scores with various length limits.
The scores with ?
are significantly worse than the best score inthe column (bolded).source five-time world champion michelle kwan withdrew from the #### us figure skating championshipson wednesday , but will petition us skating officials for the chance to compete at the #### turinolympics .reference injury leaves kwan ?s olympic hopes in limbofixLen (30) kwan withdraws from us gp(50) kwan withdraws from us skating championships(75) kwan pulls out of us figure skating championships for turin olympicsfixRng (30) kwan withdraws from us gp(50) kwan withdraws from figure skating championships(75) kwan pulls out of us figure skating championships for turin olympics bidLenEmb (30) kwan withdraws from us skating(50) kwan withdraws from us figure skating championships(75) world champion kwan withdraws from #### olympic figure skating championshipsLenInit (30) kwan quits us figure skating(50) kwan withdraws from #### us figure skating worlds(75) kwan withdraws from #### us figure skating championships for #### olympicsTable 2: Examples of the output of each method with various specified lengths.tion methods, we use the same reference summaries.Note that, fixLen and fixRng generate the sum-maries with a hard constraint due to their decod-ing process, which allows them to follow the hardconstraint on length.
Hence, when we calculate thescores of LenEmb and LenInit, we impose a hardconstraint on length to make the comparison fair(i.e.
LenEmb(0,L) and LenInit(0,L) in the table).Specifically, we use the same beam search as thatfor fixRng with minimum length of 0.For the purpose of showing the length controlcapability of LenEmb and LenInit, we show atthe bottom two lines the results of the standardbeam search without the hard constraints on thelength6.
We will use the results of LenEmb(0,?
)and LenInit(0,?)
in the discussions in Sections 6.2and 6.3.The results show that the learning-based meth-6fixRng is equivalence to the standard beam search whenwe set the range as (0,?
).ods (LenEmb and LenInit) tend to outperformdecoding-based methods (fixLen and fixRng) forthe longer summaries of 50 and 75 bytes.
How-ever, in the 30-byte setting, there is no significantdifference between these two types of methods.
Wehypothesize that this is because average compres-sion rate in the training data is 30% (Figure 1-(c))while the 30-byte setting forces the model to gen-erate summaries with 15.38% in average compres-sion rate, and thus the learning-based models did nothave enough training data to learn compression atsuch a steep rate.6.2 Examples of Generated SummariesTables 2 and 3 show examples from the validationset of the Annotated Gigaword Corpus.
The ta-bles show that all models, including both learning-based methods and decoding-based methods, can of-ten generate well-formed sentences.We can see various paraphrases of ?#### us figure1334source at least two people have tested positive for the bird flu virus in eastern turkey , health ministerrecep akdag told a news conference wednesday .reference two test positive for bird flu virus in turkeyfixLen (30) two infected with bird flu(50) two infected with bird flu in eastern turkey(75) two people tested positive for bird flu in eastern turkey says ministerfixRng (30) two infected with bird flu(50) two more infected with bird flu in eastern turkey(75) two people tested positive for bird flu in eastern turkey says ministerLenEmb (30) two bird flu cases in turkey(50) two confirmed positive for bird flu in eastern turkey(75) at least two bird flu patients test positive for bird flu in eastern turkeyLenInit (30) two cases of bird flu in turkey(50) two people tested positive for bird flu in turkey(75) two people tested positive for bird flu in eastern turkey health conferenceTable 3: More examples of the output of each method.championships?7 and ?withdrew?.
Some examplesare generated as a single noun phrase (LenEmb(30)and LenInit(30)) which may be suitable for theshort length setting.6.3 Length Control Capability ofLearning-based ModelsFigure 6 shows histograms of output length from thestandard encoder-decoder, LenEmb, and LenInit.While the output lengths from the standard modeldisperse widely, the lengths from our learning-basedmodels are concentrated to the desired length.
Thesehistograms clearly show the length controlling capa-bility of our learning-based models.Table 4-(a) shows the final state of the beam whenLenInit generates the sentence with a length of 30bytes for the example with standard beam search inTable 3.
We can see all the sentences in the beamare generated with length close to the desired length.This shows that our method has obtained the abilityto control the output length as expected.
For com-parison, Table 4-(b) shows the final state of the beamif we perform standard beam search in the stan-dard encoder-decoder model (used in fixLen andfixRng).
Although each sentence is well-formed,the lengths of them are much more varied.6.4 Comparison with Existing MethodsFinally, we compare our methods to existing meth-ods on standard settings of the DUC2004 shared7Note that ?#?
is a normalized number and ?us?
is ?US?
(United States).task-1.
Although the objective of this paper is not toobtain state-of-the-art scores on this evaluation set, itis of interest whether our length-controllable modelsare competitive on this task.
Table 5 shows that thescores of our methods, which are copied from Table1, in addition to the scores of some existing methods.ABS (Rush et al, 2015) is the most standard modelof neural sentence summarization and is the mostsimilar method to our baseline setting (fixLen).This table shows that the score of fixLen is com-parable to those of the existing methods.
The tablealso shows the LenEmb and the LenInit have thecapability of controlling the length without decreas-ing the ROUGE score.7 ConclusionIn this paper, we presented the first examination ofthe problem of controlling length in neural encoder-decoder models, from the point of view of sum-marization.
We examined methods for controllinglength of output sequences: two decoding-basedmethods (fixLen and fixRng) and two learning-based methods (LenEmb and LenInit).
The re-sults showed that learning-based methods generallyoutperform the decoding-based methods, and thelearning-based methods obtained the capability ofcontrolling the output length without losing ROUGEscore compared to existing summarization methods.AcknowledgmentsThis work was supported by JSPS KAKENHI GrantNumber JP26280080.
We are grateful to have the1335logp(y|x) byte candidate summary-4.27 31 two cases of bird flu in turkey-4.41 28 two bird flu cases in turkey-4.65 30 two people tested for bird flu-5.25 30 two people tested in e. turkey-5.27 31 two bird flu cases in e. turkey-5.51 29 two bird flu cases in eastern-5.55 32 two people tested in east turkey-5.72 30 two bird flu cases in turkey :-6.04 30 two people fail bird flu virus(a) the beam of LenInitlogp(y|x) byte candidate summary-5.05 57 two people tested positive for bird flu in eastern turkey-5.13 50 two tested positive for bird flu in eastern turkey-5.30 39 two people tested positive for bird flu-5.49 51 two people infected with bird flu in eastern turkey-5.52 32 two tested positive for bird flu-5.55 44 two infected with bird flu in eastern turkey-6.00 49 two more infected with bird flu in eastern turkey-6.04 54 two more confirmed cases of bird flu in eastern turkey-6.50 49 two people tested positive for bird flu in turkey(b) the beam of the standard encoder-decoderTable 4: Final state of the beam when the learning-based model is instructed to output a 30 byte summary for thesource document in Table 3.                  O H Q J W K                      I U H T X H Q F \ ( Q F ' H F (a) encoder-decoder                  O H Q J W K                      I U H T X H Q F \ ( Q F ' H F / H Q ( P E     / H Q ( P E     / H Q ( P E    (b) LenEmb                  O H Q J W K                      I U H T X H Q F \ ( Q F ' H F / H Q , Q L W     / H Q , Q L W     / H Q , Q L W    (c) LenInitFigure 6: Histograms of output lengths generated by (a) the standard encoder-decoder , (b) LenEmb, and (c)LenInit.
For LenEmb and LenInit, the bracketed numbers in each region are the desired lengths weset.model R-1 R-2 R-LfixLen 25.88 7.93 23.07fixRng 26.02 7.69 22.78LenEmb 26.73 8.40 23.88LenInit 25.87 8.28 23.25ABS(Rush et al, 2015) 26.55 7.06 22.05ABS+(Rush et al, 2015) 28.18 8.49 23.81RAS-Elman(Chopra et al, 2016) 28.97 8.26 24.06RAS-LSTM(Chopra et al, 2016) 27.41 7.69 23.06Table 5: Comparison with existing studies forDUC2004.
Note that top four rows arereproduced from Table 1.opportunity to use the Kurisu server of Dwango Co.,Ltd.
for our experiments.ReferencesAyana, S. Shen, Z. Liu, and M. Sun.
2016.
Neural Head-line Generation with Minimum Risk Training.
CoRR,abs/1604.01904.Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-gio.
2015.
Neural machine translation by jointlylearning to align and translate.
In Proceedings ofICLR15.Michele Banko, Vibhu O. Mittal, and Michael J. Wit-brock.
2000.
Headline generation based on statisticaltranslation.
In Proceedings of ACL00, pages 318?325.Nancy Chinchor.
1992.
The statistical significance ofthe muc-4 results.
In Proceedings MUC4 ?92, pages30?50.Kyunghyun Cho, Bart vanMerrienboer, Caglar Gulcehre,Dzmitry Bahdanau, Fethi Bougares, Holger Schwenk,and Yoshua Bengio.
2014.
Learning phrase represen-tations using rnn encoder?decoder for statistical ma-chine translation.
In Proceedings of the EMNLP14,pages 1724?1734.Sumit Chopra, Michael Auli, and Alexander M. Rush.2016.
Abstractive sentence summarization with at-tentive recurrent neural networks.
In Proceedings ofNAACL-HLT16, pages 93?98.Trevor Cohn and Mirella Lapata.
2008.
Sentence com-pression beyond word deletion.
In Proceedings ofCOLING08, pages 137?144.Trevor Cohn and Mirella Lapata.
2013.
An abstrac-1336tive approach to sentence compression.
ACM TIST13,4(3):41:1?41:35, July.Bonnie Dorr, David Zajic, and Richard Schwartz.
2003.Hedge trimmer: A parse-and-trim approach to head-line generation.
In Proceedings of the HLT-NAACL 03Text Summarization Workshop, pages 1?8.Katja Filippova and Yasemin Altun.
2013.
Overcomingthe lack of parallel data in sentence compression.
InProceedings of EMNLP13, pages 1481?1491.Katja Filippova and Michael Strube.
2008.
Dependencytree based sentence compression.
In Proceedings ofINLG08, pages 25?32.Katja Filippova, Enrique Alfonseca, Carlos A. Col-menares, Lukasz Kaiser, and Oriol Vinyals.
2015.Sentence compression by deletion with lstms.
In Pro-ceedings of EMNLP15, pages 360?368.Dimitrios Galanis and Ion Androutsopoulos.
2010.An extractive supervised two-stage method for sen-tence compression.
In Proceedings of NAACL-HLT10,pages 885?893.A.
Graves, N. Jaitly, and A. r. Mohamed.
2013.
Hy-brid speech recognition with deep bidirectional lstm.In Proceedings of IEEE Workshop on ASRU13, pages273?278.Jiatao Gu, Zhengdong Lu, Hang Li, and Victor O.K.
Li.2016.
Incorporating copying mechanism in sequence-to-sequence learning.
In Proceedings of ACL16, pages1631?1640.Caglar Gulcehre, Sungjin Ahn, Ramesh Nallapati,Bowen Zhou, and Yoshua Bengio.
2016.
Pointingthe unknown words.
In Proceedings of ACL16, pages140?149.Sepp Hochreiter and Ju?rgen Schmidhuber.
1997.
Longshort-term memory.
Neural Computation, 9(8):1735?1780.Rafal Jo?zefowicz, Wojciech Zaremba, and Ilya Sutskever.2015.
An empirical exploration of recurrent net-work architectures.
In Proceedings of ICML15, pages2342?2350.Nal Kalchbrenner and Phil Blunsom.
2013.
Recur-rent continuous translation models.
In Proceedingsof EMNLP13, pages 1700?1709, Seattle, Washington,USA, October.
Association for Computational Lin-guistics.Diederik P. Kingma and Jimmy Ba.
2015.
Adam: Amethod for stochastic optimization.
In Proceedings ofICLR15.Jiwei Li, Michel Galley, Chris Brockett, Jianfeng Gao,and Bill Dolan.
2016a.
A diversity-promoting objec-tive function for neural conversation models.
In Pro-ceedings of NAACL-HLT16, pages 110?119.Jiwei Li, Michel Galley, Chris Brockett, Georgios Sp-ithourakis, Jianfeng Gao, and Bill Dolan.
2016b.
Apersona-based neural conversation model.
In Proceed-ings of ACL16, pages 994?1003.Chin-Yew Lin.
2004.
Rouge: A package for automaticevaluation of summaries.
In Proceedings of the ACL04Workshop, pages 74?81.Konstantin Lopyrev.
2015.
Generating news head-lines with recurrent neural networks.
CoRR,abs/1512.01712.Thang Luong, Hieu Pham, and Christopher D. Manning.2015.
Effective approaches to attention-based neuralmachine translation.
In Proceedings of EMNLP15,pages 1412?1421.Ramesh Nallapati, Bing Xiang, and Bowen Zhou.
2016.Sequence-to-sequence rnns for text summarization.CoRR, abs/1602.06023.Courtney Napoles, Chris Callison-Burch, Juri Ganitke-vitch, and Benjamin Van Durme.
2011.
Paraphras-tic sentence compression with a character-based met-ric: Tightening without deletion.
In Proceedings ofthe Workshop on Monolingual Text-To-Text Genera-tion, pages 84?90.Courtney Napoles, Matthew Gormley, and BenjaminVan Durme.
2012.
Annotated gigaword.
In Proceed-ings of the Joint Workshop on Automatic KnowledgeBase Construction and Web-scale Knowledge Extrac-tion, pages 95?100.Ani Nenkova and Kathleen McKeown.
2011.
Automaticsummarization.
In Foundations and Trends R?
in Infor-mation Retrieval, volume 2-3, pages 103?233.Marc?Aurelio Ranzato, Sumit Chopra, Michael Auli,and Wojciech Zaremba.
2015.
Sequence leveltraining with recurrent neural networks.
CoRR,abs/1511.06732.Ronald Rosenfeld, Stanley F. Chen, and Xiaojin Zhu.2001.
Whole-sentence exponential language models:a vehicle for linguistic-statistical integration.
Com-puter Speech & Language, 15(1):55?73.Alexander M. Rush, Sumit Chopra, and Jason Weston.2015.
A neural attention model for abstractive sen-tence summarization.
In Proceedings of EMNLP15,pages 379?389.M.
Schuster and K.K.
Paliwal.
1997.
Bidirectional re-current neural networks.
IEEE Transactions on SignalProcessing, 45(11):2673?2681.Rico Sennrich, Barry Haddow, and Alexandra Birch.2016.
Controlling politeness in neural machine trans-lation via side constraints.
In Proceedings of NAACL-HLT16, pages 35?40.Iulian Vlad Serban, Alessandro Sordoni, Yoshua Bengio,Aaron C. Courville, and Joelle Pineau.
2016.
Build-ing end-to-end dialogue systems using generative hi-erarchical neural network models.
In Proceedings ofAAAI16, pages 3776?3784.1337Ilya Sutskever, Oriol Vinyals, and Quoc V Le.
2014.
Se-quence to sequence learning with neural networks.
InProceedings of NIPS14, pages 3104?3112.Seiya Tokui, Kenta Oono, Shohei Hido, and Justin Clay-ton.
2015.
Chainer: a next-generation open sourceframework for deep learning.
In Proceedings ofNIPS15 Workshop on LearningSys.Oriol Vinyals, Lukasz Kaiser, Terry Koo, Slav Petrov,Ilya Sutskever, and Geoffrey E. Hinton.
2015a.
Gram-mar as a foreign language.
In Proceedings of NIPS15,pages 2773?2781.Oriol Vinyals, Alexander Toshev, Samy Bengio, and Du-mitru Erhan.
2015b.
Show and tell: A neural imagecaption generator.
In Proceedings of the IEEE Con-ference on Computer Vision and Pattern Recognition,pages 3156?3164.Tsung-Hsien Wen, Milica Gasic, Nikola Mrks?ic?, Pei-Hao Su, David Vandyke, and Steve Young.
2015.Semantically conditioned lstm-based natural languagegeneration for spoken dialogue systems.
In Proceed-ings of EMNLP15, pages 1711?1721, Lisbon, Portu-gal, September.
Association for Computational Lin-guistics.Kristian Woodsend, Yansong Feng, and Mirella Lapata.2010.
Title generation with quasi-synchronous gram-mar.
In Proceedings of the EMNLP10, pages 513?523.Sander Wubben, Antal van den Bosch, and Emiel Krah-mer.
2012.
Sentence simplification by monolingualmachine translation.
In Proceedings of ACL12, pages1015?1024.Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun Cho,Aaron Courville, Ruslan Salakhudinov, Rich Zemel,and Yoshua Bengio.
2015.
Show, attend and tell:Neural image caption generation with visual attention.In David Blei and Francis Bach, editors, Proceedingsof ICML15, pages 2048?2057.
JMLR Workshop andConference Proceedings.David Zajic, Bonnie J Dorr, and R. Schwartz.
2004.Bbn/umd at duc-2004: Topiary.
In Proceedings ofNAACL-HLT04 Document Understanding Workshop,pages 112 ?
119.1338
