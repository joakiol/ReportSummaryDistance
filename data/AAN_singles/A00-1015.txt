J avox: A Toolkit for Building Speech-Enabled ApplicationsMichae l  S. Fu lkerson  and A lan  W.  B ie rmannDepartment  of Computer  ScienceDuke UniversityDurham,  North Carol ina 27708, USA{msf, awb}@cs, duke.
eduAbst rac tJAVOX provides a mechanism for the developmentof spoken-language systems from existing desktopapplications.
We present an architecture that al-lows existing Java 1 programs to be speech-enabledwith no source-code modification, through the useof reflection and automatic modification to the ap-plication's compiled code.
The grammars used inJAvox are based on the Java Speech Grammar For-mat (JSGF); JAVOX grammars have an additionalsemantic omponent based on our JAVOX Script-ing Language (JSL).
JAVOX has been successfullydemonstrated onreal-world applications.1 Overv iewJAVOX is an implemented set of tools that allowssoftware developers to speech-enable existing appli-cations.
The process requires no changes to theprogram's source code: Speech capacity is plugged-in to the existing code by modifying the compiledprogram as it loads.
JAVOX is intended to providesimilar functionality o that usually associated withmenus and mouse actions in graphical user interfaces(GUIs).
It is completely programmable - develop-ers can provide a speech interface to whatever func-tionality they desire.
J ivox  has been successfullydemonstrated with several GUI-based applications.Previous ystems to assist in the development ofspoken-langnage systems (SLSs) have focused onbuilding stand-alone, customized applications, uchas (Sutton et al, 1996) and (Pargellis et al, 1999).The goal of the JAVOX toolkit is to speech-enabletraditional desktop applications - this is similar tothe goals of the MELISSA project (Schmidt et al,1998).
It is intended to both speed the develop-ment of SLSs and to localize the speech-specific codewithin the application.
JAVOX allows developers toadd speech interfaces to applications at the end ofthe development process; SLSs no longer need to bebuilt from the ground up.We will briefly present an overview of how JAVOXworks, including its major modules.
First, we1Java and Java Speech are registered trademarks of SunMicrosystems, Inc.will examine TRANSLATOR, the implemented JAVOXnatural anguage processing (NLP) component; itsrole is to translate from natural language utterancesto the JhVOX Scripting Language (JSL).
Next, wewill discuss JSL in conjunction with a discussion ofEXECUTER, the interface between JAVOX and theapplication.
We will explain the JhvOX infrastruc-ture and its current implementation in Java.
Inconclusion, we will discuss the current state of theproject and where it is going.2 Bas ic  Operat ionJ ivox can be used as the sole location of NLP foran application; the application is written as a non-speech-enabled program and JhvOX adds the speechcapability.
The current implementation is writtenin Java and works with Java programs.
The linkagebetween the application program and JhvOX is cre-ated by modifying - at load time - all constructors inthe application to register new objects with JAVOX.For this reason, the application's source code doesnot need any modification to enable JAVOX.
A thor-ough discussion of this technique ispresented in Sec-tion 4.
The schematic n Figure 1 shows a high-leveloverview of the JAVOX architecture.Issuing a voice command begins with a user ut-terance, which the speech recognizer processes andpasses to the NLP component, TRANSLATOR.
Weare using the IBM implementation f Sun's JavaSpeech application program interface (API) (SunMicrosystems, Inc., 1998) in conjunction with IBM'sVIAVOICE.
The job of TRANSLATOR - or a differ-ent module conforming to its API - is to translatethe utterance into a form that represents he corre-sponding program actions.
The current implemen-tation of TRANSLATOR uses a context-free grammar,with each rule carrying an optional JSL fragment.A typical bottom-up arser processes utterances anda complete JSL program results.
The resulting JSLis forwarded to EXECUTER, where the JSL code isexecuted.
For example, in a hypothetical bankingapplication, the utterance add $100 to the accountmight be translated into the JSL command:myBalance = myBa lance  + i00;105File Edit ToolsTypicalDesktopApplicationl~ r~ yOperatingSystem"~" : ~l (virtual machine), Translator =, ~.Executer I I 1 ~ ~( J Speech I Il J Recognizer J:JavoxB"!i .Figure 1: Schematic of the JAVOX architecture.The job of EXECUTER - or a different module thatconforms to EXECUTER'S API - is to execute andmonitor upcalls into the running application.
Theupcalls are the actual functions that would be madeby the appropriate mouse clicks or menu selectionshad the user not used speech.
For this reason, we arecurrently concentrating our efforts on event-drivenprograms, the class of most GUI applications.
Theirstructure is usually amenable to this approach.
Ourimplementation f EXECUTER performs the upcallsby interpreting and executing JSL, though the tech-nology could be used with systems other than JSL.In the banking example, EXECUTER would identifythe myBalemce variable and increment i by $100.The main JAVOX components, TRANSLATOR andEXECUTER, are written to flexible APIs.
Develop-ers may choose to use their own custom componentsinstead of these two.
Those who want a differentNLP scheme can implement a different version ofTRANSLATOR and - as long as it outputs JSL -still use EXECUTER.
Conversely, those who want adifferent scripting system can replace JSL and stilluse TRANSLATOR and even EXECUTER's low-levelinfrastructure.3 Javox  GrammarsThe JAVOX infrastructure is not tied to any par-ticular NLP method; in fact, the JAVOX grammarsystem is the second NLP implementation we haveused.
It is presented here because it is straightfor-ward, easy to implement, and surprisingly powerful.JAVOX grammars axe based on Sun's Java SpeechGrammar Format (JSGF) (Sun Microsystems, Inc.,1998).
JSGF is a rule-based, speech-recognitiongrammar, designed to specify acceptable input toa recognizer.
In JAVOX grammars, each JSGF  rulemay be augmented with a fragment of JAVOX Script-ing Language code - we refer to JAVOX grammars asscriptable grammars.
The result of parsing an utter-ance with a JAVOX grammar is a complete piece ofJSL code, which is then interpreted to perform theaction specified by the user.The process of speech-enabling an application inJAVOX consists of writing a grammar that con-tains the language to be used and the correspond-ing actions to be performed.
Building on top of3SGF means - in many cases - only one file isneeded to contain all application-specific informa-tion.
JSL-specific code is automatically strippedfrom the grammar at runtime, leaving an ordinaryJSGF grammar.
This JSGF grammar is sent to aJava-Speech-compliant recognizer as its input gram-mar.
In the current Java implementation, each Javasource file (Foo.
java) can have an associated JAVOXgrammar file (Foo.
gram) that contains all the infor-mation needed to speak to the application.
Encap-sulating all natural anguage information in one filealso means that porting the application to differentlanguages i  far easier than in most SLSs.3.1 Ser ip tab le  GrammarsSince JSGF grammars are primarily speech-recognition grammars, they lack the ability to en-code semantic information.
They only possess a lim-ited tag mechanism.
Tags allow the recognizer tooutput a canonical representation f the utteranceinstead of the recognition verbatim.
For example,106publ ic  <ACTION> = move \[the\] <PART> <DIR>;publ ic  <PART> = eyes;publ ic  <PART> = ( cap I hat );publ ic  <DIR> = up;publ ic  <DIR> = down;Grammar 1: A JSGF fragment from the Mr.
Potato Head domain.the tag rm may be the output from both delete thefile and remove it.Tags are not implemented in JAVOX grammars;instead, we augment he rules of JSGF with frag-ments of a scripting language, which contains muchricher semantic information than is possible withtags.
TRANSLATOR receives the raw utterance fromthe recognizer and translates it into the appropriatesemantic representation.
JAvox grammars do notmandate the syntax of the additional semantic por-tion.
Though JSL is presented here, TRANSLATORhas been used to form Prolog predicates and VisualBasic fragments.JSGF rules can be explicitly made public or areimplicitly private.
Public rules can be imported byother grammars and can serve as the result of arecognition; a private rule can be used in a recog-nition, but cannot be the sole result.
The five rulesin Grammar 1 are from a JSGF-only grammar frag-ment from the Mr.
Potato Head 2 domain (discussedlater).
Grammar 1 allows eight sentences, uch asmove the eyes up, move the eyes down, move thecap up, move the cap down, and move cap up.
Rulenames are valid Java identifiers enclosed within an-gle brackets; the left-hand side (LHS) is everythingto the left of the equality sign and the right-hand side(RHS) is everything to the right.
JAVOX grammarsinclude the standard constructs available in JSGF,these include:Impor ts  Any grammar file can be imported intoother grammar files, though only public rulesare exported.
This allows for the creationof grammar libraries.
When using JSL, Javaclasses can also be imported.Comments Grammars can be documented usingJava comments: single-line comments ( / / )  anddelimited ones (/* until */).Parenthesis Precedence can be modified withparentheses.A l te rnat ives  A vertical bar ( I ) can be used to sep-arate alternative elements, as in the <PART> ruleof Grammar 1.Opt iona ls  Optional elements are enclosed withinbrackets (\[ and \] ), such as the in Grammar l's<ACTION> rule.2Mr.
Potato Head is a registered trademark ofHasbro, Inc.K leene  Star  Operator  A postfix Kleene star (*)operator can be used to indicate that the pre-ceding element may occur zero or more times.P lus  Operator  A similar operator to indicate thatan element may appear one or more times.A grammar's rules may be organized however thedeveloper wishes.
Some may choose to have onerule per utterance, while others may divide rules tothe parts-of-speech level or group them by semanticvalue.
In practice, we tend to write rules grouped bysemantic value for nouns and verbs and at the parts-of-speech level for function words.
Grammar 2showsthe Mr.
Potato Head grammar augmented with JSLfragments.The semantic omponent of each rule is separatedfrom the RHS by a colon and delimited with a braceand colon ({: until :}).
Using Grammar 2, theparse and translation for Move the cap up is shownin Figure 2.Each rule may have either one semantic fragmentor any number of named fields.
A single fragmentis sufficient when there is a one-to-one correlationbetween a lexical item and its representation in theprogram.
Occasionally, a single lexical item may re-quire several components to adequately express itsmeaning within a program.
In Grammar 2, thereis a one-to-one correlation between the direction ofmovement and the s l ideUp and s l ideDown func-tions in the <DIR> rules.
These functions can alsowritten as a single s l ide  function, with the directionof the movement given by two parametric variables(cos and sin).
In this situation, the direction rule(<DIR.
}/F>) needs to be expressed with two values,each known as a named field.
The word up may berepresented by the named fields cos and sin,  withthe values 0 and 1 respectively.Another issue in JSL - which does not arise in thesyntax-only JSGF - is the need to uniquely identifymultiple sub-rules of the same type, when they oc-cur in the same rule.
For example, in a geometrygrammar, two <POINT>s may be needed in a rule todeclare a <LINE>, as in:public <LINE> = make a line from<POINT> to <POINT> : ...Uniquely numbering the sub-rules eliminates theambiguity as to which <POINT> is which.
Numbering107publ icpublicpublicpublicpublicpublicpublicpublic<ACTION> = move [the] <PART> <DIR> : {: <PART>.<DIR>();  :};<PART> = eyes : {: Canvas.eyes0bj :};<PART> = ( cap I hat ): {: Canvas.cap0bj :};<DIR> = up : {: s l ideUp :};<DIR> = down : {: s l ideDown :};<ACTION_NF> = slide [the] <PART> <DIR> : {: <PART>.s l ide(<DIR:cos>,<DIR:s in>);  :};<DIR_NF> = up : cos {: 0 :}sin {: 1 :};<DIR_NF> = down : cos {: 0 :}sin {: -I :};Grammar  2: A JAVOX grammar fragment for the Mr.
Potato Head domain.|T?
?aava,=.
e~re -Ob:lUp ( e =ZAdet~Figure 2: The JAVOX translation process - NL  to JSL  - for Move the cap up.can be used in both the RttS and the semantic por-tion of a rule; numbering is not allowed in the LHSof a rule.
Syntactically, sub-rules are numbered witha series of single quotes3:public <LINE> = make a line from<POINT'> to <POINT''> : ...3.2 Javox Scr ipt ing Language ( JSL)The JAVOX Scripting Language (JSL) is a stand-alone programming language, developed for use withthe JAVOX infrastructure.
JSL can be used to ma-nipulate a running Java program and can be thoughtof as an application-independent macro language.The EXECUTER module interprets JSL and per-forms the specified actions.
The specifics of JSLare not important o understanding JAVOX; for thisreason, only a brief summary is presented here.JSL can read of modify the contents of an ob-ject's fields (data members) and can execute m th-ods (member functions) on objects.
Unlike Java,JSL is loosely-typed: Type checking is not done un-til a given method is executed.
JSL has its ownvariables, which can hold objects from the host ap-plication; a JSL variable can store an object ofany type and no casting is required.
JSL supportsJava's primitive types, Java's reference types (ob-jects), and Lisp-like lists.
Though JSL does support3This representation is motivated by the grammars of(Hipp, 1992).Java's primitive types, they are converted into theirreference-type equivalent.
For example, an integeris stored as a java.
lang.
Integer and is convertedback to an integer when needed.JSL has the standard control flow mechanismsfound in most conventional programming languages,including if-else, for and while loops.
With theexception of the evaluation of their boolean expres-sions, these constructs follow the syntax and behav-ior of their Java counterparts.
Java requires thatif-else conditions and loop termination criteria bea boolean value.
JSL conditionals are more flexi-ble; in addition to booleans, it evaluates non-emptystrings as true, empty strings as false, non-zero val-ues as true, zero as false, non-null objects as true,and nu l l  as false.In addition to Java's control f ow mechanisms,JSL also supports fo reach  loops, similar to thosefound in Perl.
These loops iterate over both JSLlists and members of java.util.List, executingthe associated code block on each item.
JSL listsare often constructed by recursive rules in order tohandle conjunctions, as seen in Section 5.4 InfrastructureThe JAVOX infrastructure has been designed to com-pletely separate NLP  code from the application'scode.
The application still can be run withoutJAVOX, as a typical, non-speech-enabled program- it is only speech-enabled when run with JAVOX.108From the application's perspective, JAVOX operatesat the systems-level and sits between the applica-tion and the operating system (virtual machine), asshown in Figure 1.
TRANSLATOR interfaces with thespeech recognizer and performs all necessary NLP.EXECUTER interfaces directly with the applicationand performs upcalls into the running program.Java has two key features that make it an idealtest platform for our experimental implementation:reflection and a redefineable loading scheme.
Re-flection provides a running program the ability toinspect itself, sometimes called introspection.
Ob-jects can determine their parent classes; everyclass is itself an object in Java (an instance ofj ava.lang.Class).
Methods, fields, constructors,and all class attributes can be obtained from a Classobject.
So, given an object, reflection can determineits class; given a class, reflection can find its meth-ods and fields.
JAVOX uses reflection to (1) mapfrom the JSL-textual representation of an objectto the actual instance in the running program; (2)find the appropriate j ava.lang.reflect.Methodsfor an object/method-name combination; and (3)actually invoke the method, once all of its argumentsare known.Reflection is very helpful in examining the appli-cation program's tructure; however, prior to usingreflection, EXECUTER needs access to the objects inthe running program.
To obtain pointers to the ob-jects, JAVOX uses JOIE,  a load-time transformationtool (Cohen et al, 1998).
JO IE  allows us to modifyeach application class as it is loaded into the virtualmachine.
The JAVOX transform adds code to everyconstructor in the application that registers the newobject with Executer.
Conceptually, the followingline is added to every constructor:Executer.
register (this).This modification is done as the class is loaded,the compiled copy - on disk - is not changed.
Thisallows the program to still be run without JhVOX,as a non-speech application.
EXECUTER can  - onceit has the registered objects - use reflection to ob-tain everything else it needs to perform the actionsspecified by the JSL.5 ExampleOur longest running test application has been aMr.
Potato Head program; that allows users to ma-nipulates a graphical representation of the classicchildren's toy.
Its operations include those typicallyfound in drawing programs, to include moving, recol-oring and hiding various pieces of Mr.
Potato Head.Grammar 3 shows a portion of application's gram-mar needed to process the utterance Move the eyesand glasses up.
The result of parsing this utteranceis shown in Figure 3.Once TRANSLATOR has processed an utterance, itforwards the resulting JSL fragment to EXECUTER.Figure 4 provides a reduced class diagram for theMr.
Potato Head application; the arrows correspondto the first iteration in the following trace.
Thefollowing steps are performed as the JSL fragmentfrom Figure 3 is interpreted:1.
A new variable - local to EXECUTER - named$ i te r  is created.
Any previously-declared vari-able with the same name is destroyed.2.
The fo reach  loop starts by initializing theloop variable to the first item in the list:Canvas.eyes0bj.
This object's name consistsof two parts; the steps to locate the actual in-stance in the application are:(a) The first part of the name, Canvas, ismapped to the only instance of the Canvasclass in the context of this application.JAVOX has a reference to the instance be-cause it registered with EXECUTER when itwas created, thanks to a JO IE  transforma-tion.
(b) The second part of the name, eyes0bj,  isfound through reflection.
Every instance ofCanvas has a field named eyes0bj of typeBodyPaxt.
This field is the eyes0bj forwhich we are looking.3.
Once eyes0bj is located, the appropriatemethod must be found.
We determine -through reflection - that there are two meth-ods in the BodyPart class with the name move,as seen in Figure 4.4.
We next examine the two arguments and de-termine them to be both integers.
Had the ar-guments been objects, fields, or other methodcalls, this entire procedure would be done re-cursively on each.5.
We examine each possible method and deter-mine that we need the one with two integerarguments, not the one taking a single Pointargument.6.
Now that we have the object, the method, andthe arguments, the upcall is made and themethod is executed in the application.
The re-sult is that Mr.
Potato Head's eyes move up onthe screen.7.
This process is repeated for glass0bj and theloop terminates.After this process, both the eyes and glasses havemoved up 20 units and Executer waits for additionalinput.
The application continues to accept mouseand keyboard commands, just as it would withoutspeech.109public <modPOS> = move <PARTS> <DIR> : {:dim Slier;foreach $iter (<PARTS>)$iter.move(<DIR:X>,<DIR:Y>);:};public <PARTS> = [<ART>] <PART> : {: [<PART>] :};public <PARTS> = <PARTS> [<CONJ>] [<ART>] <PART> : {:public <DIR> = up : X {: 0 :} : Y {: -20 :};public <DIR> = left : X {: -20 :} : Y {: 0 :};public <ART> = (the [ a I an);public <CONJ> = ( and I plus );public <PART> = eyes : {: Canvas.eyesObj :};public <PART> = glasses : {: Canvas.glassObj :};[<PARTS> , <PART>] : } ;Grammar 3: A detailed JAVOX grammar for the Mr.
Potato Head domain.?
?
r - -  +- -~ +<pJu~> -~> "_ c=,',vam.eye=ob::lI <=," :<co~>--~ ~ : ?+" + +  II <"="  I<=""I<""I I:<?+-'+ l ?
=,.o.
+,._ ,Figure 3: The translation process for the utterance Move the eyes and g/asses up.6 Discuss ion and Future WorkIn practice, building a JAvox-based, speech in-terface - for limited-functionality applications - isstraightforward and reasonably quick.
To date, wehave used three diverse applications as our test plat-forms.
Speech-enabling the last of these, an imagemanipulation program, took little more than oneperson-day.
Though these applications have beensmall; we are beginning to explore JAvOX's scala-bility to larger applications.
We are also develop-ing a library of JAVOX grammars for use with thestandard Java classes.
This resource will shortendevelopment times even more; especially comparedto building a SLS from the ground up.One of the existing challenges is to work withapplications consisting entirely of dynamic objects,those that cannot be identified at load time.
Sometypical dynamic-object applications are drawingprograms or presentation software; in both cases,the user creates the interesting objects during run-time.
We have implemented a system in JSL whichallows objects to be filtered based on an attribute,such as color in the utterance: Move the blue square.In situations where there is a one-to-one correla-tion between a lexical item in the grammar and anobject in the program, it is often the case that thelexical item is very similar to the element's identi-fier.
It is quite often the same word or a direct syn-onym.
Since JAVOX is primarily performing upcallsbased on existing functions within the program, italso can be predicted what type of objects will co-occur in utterances.
In the Mr.
Potato Head applio110f-/,pp f~A-d o-, .........................................................~ Canv&i :,TFr 4tma/i I / i ?snvas { } / i J ?Snv" { } BOC~ylL-?
{ }/ t L _ _  l=o~(~i==:~,Figure 4: A simplified class diagram for the Mr.
Potato Head application.cation, we can assume that objects representing aPoint or integers will occur when the user speaksof moving a BodyPart.
We are developing a systemto exploit hese characteristics to automatically gen-erate JAVOX grammars from an application's com-piled code.
The automatically-generated grammarsare intended to serve as a starting point for develop-ers - though they may certainly require some handcrafting.
Our current, grammar-generation oolas-sumes the program is written with Java's standardnaming conventions.
It is imaginable that additionaldata sources - such as a sample corpus - will al-low us to more accurately generate grammars for anapplication.
Though in its infancy, we believe thisapproach olds vast potential for SLS development.7 Conc lus ionJAVOX provides a fast and flexible method to add aspeech-interface to existing Java applications.
Theapplication program requires no source-code modifi-cation: The JAVOX infrastructure provides all NLPcapabilities.
We have implemented a grammar andscripting system that is straightforward enough thatinexperienced developers and those unfamiliar withNLP can learn it quickly.
We have demonstrated thetechnology on several programs and are commencingwork on more ambitious applications.
The currentimplementation f JAVOX is available for downloadat:ReferencesGeoff A. Cohen, Jeffrey S. Chase, and David L.Kaminsky.
1998.
Automatic program transforma-tion with JOIE.
In USENIX Annual TechnicalConference (N098), New Orleans, LA.D.
Richard Hipp.
1992.
A New Technique for Pars-ing Ill-formed Spoken Natural-language Dialog.Ph.D.
thesis, Duke University.Andrew Pargellis, JeffKuo, and Chin-Hui Lee.
1999.Automatic dialogue generator creates user de-fined applications.
In 6th European Conference onSpeech Communication and Technology, volume 3,pages 1175--1178, Budapest, Hungary.Paul Schmidt, Sibylle Rieder, Axel Theofilidis, Mar-ius Groenendijk, Peter Phelan, Henrik Schulz,Thierry Declerck, and Andrew Brenenkamp.1998.
Natural language access to software applica-tions.
In Proceedings of COLING-ACL-98, pages1193-1197, Montreal, Quebec.Sun Microsystems, Inc. 1998.
Java speech API spec-ification 1.0.Stephen Sutton, David G. Novick, Ronald A. Cole,Pieter Vermeulen, Jacques de Villiers, JohanSchalkwyk, and Mark Fanty.
1996.
Building10,000 spoken-dialogue systems.
In Proceedings ofthe International Conference on Spoken LanguageProcessing (ICSLP), pages 709--712, Philadel-phia, PA.http ://www.
cs.
duke.
edu/~msf/j avox8 AcknowledgmentsThis work has been partially supported by the De-fense Advanced Research Projects Agency undercontract F30602-99-C-0060.111
