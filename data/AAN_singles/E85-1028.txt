.~N F~GLISH GF~NERATOR FOR A CASE-LABELLED DEP~qD~QCY REPRESENIW?10NJohn Irving TaitAcorn Computers Ltd.Fulboum~ RoadCherry HintonCambridge CB1 4JNU.K .AbstractThe paper describes a progrmn which has beenconstructed to produce English strings from acase-labellea depenaency representation.
Theprogram uses an especially single and uniformcontrol structure with a well defined separationof the different knowledge sources used duringge~,eration.
Furthermore, the majority of t/lesyst~n's knowledge is expressed in a declarativeform, so in priciple the generator ' s knowledgebases could be used for purposes other thangex,eration.
The ge~erator uses a two-pass controlstructure, the first translating from thes~nantically orientated case-labelled dependencystructures into surface syntactic trees and thesecond translating from these trees into Englishstr i~/s.The generator is very flexible: it can be run insuch a way as to produce all the possiblesyntactically legitimate variations on a giveJ,utterance, and has built in facilities to do somesynon~s substitution.
It has been used in anu, ber of application domains: notably as a part ofa free text retrieval system and as part of anatural language front end to a relational databasesystem.i.
IntroductionThis pa\[~er describes a progrmn which has beenconstructed to translate from Boguraev ' scase-labelled depe~idency representations (Boguraev,1979: see also 8oguraev and Sparck Jones, 1982) toEnglish strings.
Although the principles on whichthe program has been constructed are primarily anew mix of established idea~, the generatorincorporates a number of novel features.
Inparticular, it caLlbines an especially simple a,~uniform control structure with a well definedseparatlon of t/le differe~,t ka,owledge sources useddu~ing generation.
It operates in two passes, thef~rst translating from the semantically orientatedcase-labelled dependency structures into surfacesyntactic trees a~,d the secona translating franthese trees into English strings.The translation fran de\[~_ndency structures tosurface syntactic trees is the more c~mplex of thetwo passes unaertaken by the generator a~ will bedescribed here.
The other, translation frominstantiated surface trees to text strings isrelatively straightforward and will not be dealtwith in this paper.
It is fundamentally a treeflattening process, and is described in detail inTait and Sparck Jones (1983).2.
The Generator's Knowledge StructuresThe generator's Knowledge is separated into foursections, as follows.i) a set of bare templates of phrasal andclausal structures which restrict thesurface trees other parts of the system mayproduce by defining the branching factor ata giv~_n node type.
For example, the patternsrecord that English has intransitive,transitive and ditransitive, but nottritraneitive, verb phrases.
The baretemplate for noun phrases is illustrated inFigure i.2 ) a lexicon and an associated morphologicalprocess~.3) a set of productzon rules which fill outpartially instantiated syntactic treesproduced from the phrasal ~,~ clausalpatterns.
These rules contain most of thesyst~n's knowleuge about the relatzonshipbetween the constructs of Boguraev' srepresentation la,~uage and English for~.4) another set of production rules which c~vertfilled out surface trees to English strings./-Q~antifierI -DeterminerI -Or(/inalNoun Phrase = I -Ntm~erI -Adjective-list1 ?~%~l -mod i f  ier- list\-\[~ost-mcdifersFigure iTemplate for Noun PhraseThese four knowledge sources represent ti~egenerator's entzre knowledge of both English andBoguraev ' s representation language.
Although theyare obviously interrelatea, each is distinct andseparate.
This well defzned separation greatly194increases t/~e extensability and maintainability ofthe syst~.A~ noted in the previous section the application ofthe rules of section 4 will not be discussed inthis paper.
The r~nainder of the paper discussesthe use ~.%~de of t/~ first three knowledge sources.3.
Tra,,slation frr, n Dependency Structures toSurface Syntactic TreesThe pranary work of conversion frQm the dependencyrepresentations to the surface syntactic trees is~Luertaken by a set of production rules, each rulebeing associated with ane of the case labels used~, 8oguraev's representation scheme.
These rulesare applied by a suite of programs which exploitinformation about the structure of Bcguraev ' sdependency structures.
For example they know wherein a nominal aependency structure to find the wordsense name of the head noun ('oscillatorl' inFigure 2) and where to find its case list (towhich the production rules should be applied).
(n (oscillatorl THING( @@ det ( thel ONE) )(## nmod((((trace (clause v agent))(clause(v (be2 BE( @@ agent(n (frequencyl SIGN)) )(@@ state(st (n (n~,eless NIL))(val ( high3 KISD ) ) ) )))) ))) ))1Figure 2Boguraev Representation used for"the high frequency oscillator"It must be emphasize~ that Bcguraev's use of theteon case is much wider than is cxma,on ini inguistics.
Not only is it used to coverprepositior~al attac~L~nt to nouns as ~ell asverbs; it is also used to cover sane other formsof attac~nent to, and modification of, nouns, forexample by determiners ( like "a" ) and even forplural or singular number.
In the pi~:ase "the highfrequ~,cy oscillator", whose representation isillustrated by Figure 2, the link between' oscillatorl ' ( standing for "oscillator" ), and thedeterminer ( ' (thel ONE) ', representing "the") isthe so-called case-label de__~t.
Similarly theprenominal modifier "high frequent-y" (representedby ti~e c~nplex structure to the lower right of theflgure) is linked to 'oscillatorl' by nmod.Each ca~e-associated production rule takes fourinputs, as follows:11 the depea\]dent iten attacheu to tI~ case link,for example ' (thel ONE)' i,i the case o~ detgiven below;2) an environment which is used to passinformation from the processing of higherlevels of the representation down to lowerlevels: for example tense fran thesentential level into an embedde~ relativeclause; the enviroament is also used to allowvarious kinds of control over the generationprocess: for example to determine how manyparaphrases of a sentence are produced;3 ) a partially instantiated phrase or clausetemplate, which will ultimately form part ofthe surface syntactic tree output by thefirst pass of the generator;4 ) the dictionary entry for the daminant itam oftI~ current case list: in Figure 2 this isthe entry for ' oscillatorl ', presented inFigure 3.
(oscillatorl( oscillatorl-#1(root oscillator )(syntax-patterns Noun-phrase-pattern ) ) )Figure 3Dictionary entry for 'oscillatorl'The rules vary greatly in cx~nplexity: the structureillustrated in Figure 2 requires the use of boththe simplest and most complex form of rule.The det production rule may be described inpseudo-English as:If the partially inst~,itiated template is fora noun ptu:ase then look up the lexical items(potentially synon~nl~) as~.~ciated with theword sense name 'thel', and insert each inthe determiner slot in a new copy o~ r/lesyntactic node.
(Of course for English there is only one lexicalitem associated with 'thel': "the".)
At the otherextreme is the production rule for the nmod case.The nmcd case in Bcguraev's dependency structuresis used to associate the pre-ncminal modifiers ina ccni~und nominal with tI~e ~ead notu~.
Thepre-~cminal modifiers are represented as a list ofsimple nQninal representations.
(Noun-Phrase (NIL the NIL NIL NIL((Noun-Phrase NIL NIL NIL NIL(high) NIL frequ~icy NIL))oscillator NIL) )Figure 4Surface Structure Tree for"the high frequency oscillator"In English the nmod production rule might be195expres~eu a~:If the partially instantiated template is fora noun phrase, apply the processor which,given an existing ,~3minal representation,instantiates a corresponding phrasal~Iplate, to each nominal repr~ztat i~z inthe dependent item list: form the resultsinto a set of lists, one for eachcombination of possible results forexpressing each nominal: insert each resultlist ~zto a copy of the partiallyinstantiated t~nplate Originally passed tothe rule.The surface structure tree prc~L_~fed after theserules have been applied to the representation ofFigure 2 is given in Figure 4.
Note that the treecontains syntactic category names, and thatunfilled slots in the tree are filled with NIL.Thus if the phrase to be generated was "all thehigh frequency oscillators", the flrst NIL in thesurface syntactic tree (representing the unfilledquantifier slot of the dominant noun phrase node)would be replaced by "all".
The order of the wordsin the surface syntactic tree represents the orderin which they will be produced in the outputsentence.These two production rules, for the det andcase labels, are fairly typical o-f-those usedel~ewhere in the system.
There is, however, an{,nportant feature tt~y fail to illustrate.
Inc<xztrast with more ccnve~tional cases, ~ anddet do not require the identification of a lexical~tem associated with the case-label itself.
This isof course necessary when expressing prepositionalplzases.4.
Distinctive Feauures of this Translation ProcessThe two most noteworthy features of the generationphase which produces surface structure trees aretl~e control structure employed and distribution ofthe sys t~ language knowledge between itsdl ~ferent components.NO mention Of the system's c~trol  structure wasmade in the previous section.
The structure usedzs sufficiently powerful and elegant tlmt it couldbe ignored entirely when building up the systems~zowledge of Bcguraev's representation languagean~ of English.
However, the efficiency of thegenerator described here is largely a result of thecontrol structure used.
It is rare for this systemto take more than a few fracti~,s of a sec~ togenerate a sentex,ce: a sharp contrast withapproaches based on unification, like Appelt's(1983) TELk~RAM.First the current representational structure isclassified as clausal, sL~ple nominal, Or complex(typically relativised) nominal.
Second, a suitablestructure dismantling function is applied to thestructure which identifies the head lexical tokenfrom the structure and separates out its case-list.Third the dictionary entry for the head lexicalitem is obtained, and.
after checkinu thesyntactic ~arKers in the dictionary ~,try anuphrasal or clause templates suitable for theenviron~,t are ic~ztified.
Fourth, appropriateproduction rules are applied to each ele, ent of thestructure's case list in order to instantiate thetemplates.
Frequently this whole process is appliedrecursively to some dependent representation level.So, for example, the representation for "highfrequency" is prccessed by a second call of thenoun phrase processor from within the call dealingwith the dominant noninal, 'oscillatorl'.
When thecase list has been completely processed, thedi~rsntling function applies any necessarymorphological processing to the head lexical item( for example to reflect subject/verb andperson /nu~ agre~Rent).This simple fra~nework covers all the processingdone by the generator.The split ~etween the syntactic ~lowledgerepresented in the p|u:asal and clausal templatesa~ in the production rules is also unusual.
Thetemplates define the shape of t/~e surfacesyntactic trees which the system can produce.
Itplaces no restrictions on the form of the fillersfor any slot in a g ran~ node.
The productionrules ~,force categorial and order~,~restrictions.
So, for example, the templatesreflect the fact that English possesseshztransitive, transitive and ditransitive verbs,whilst the production rules ensure that thesubject of a clause is of a suitable syntacticcategory, and that the subject precedes the verbin simple declarative sentences.The surface structure trees prcduce~ contain allthe words in the sentence to be produced in theorder and form in which they are to be output.
Thusit is a straightforward matter to generate Englishstrings fran them.5.
C~iclusionThe generator presented here is in essence adevelopment of the Micro-Mumble generatordescriheu in Mee|~ (1981).
But in the process ofextending Meehan's framework for a wide coveragesystem, his original design has been radicallytransformed.
Most notably, the system describedhere has its syntactic knowledge largely separatedfran its knowledge of the input representationlanguage.
It has, however, retained the eleg~Itcontrol structure of Meehan's original.
Thisdistinguishes it from the early generators in thesame style, like Goldman's (1975) BABEL.At the san~ thne the generator described here isvery flexible: it can be run in such a way as toproduce all the possible syntactically legitimatevariations on a given utterance, and has built infacilities to do same synonym substitution.
Theenvircnn%~-nt mechanism is very ( perhaps too)powerful, and could be used to dynastically selectpossible ways of expressing a given structure inalmost any way required.The system's knowledge of ,~tural language and of196t~  representation language is expressed in afundmn~itally r%/le-like way, most notably withoutthe use o?
an assignment ~necl~Lnism.
In principlesuch rules could be used backwards, that is theycould be used to parse incoming English.
H~ver  nowork has been done to develop a parser which usest/~ generators rules, so this possibility remainspure speculation at present.The generator described here, it must bee,pbasized, covers Only part of the task ofgeneration.
Unlike, for example, McKecwn's (1980)system, it deals not with what to say, but onlywith how to say it.
Boguraev ' s representationidentifies sentence bot~K~aries and the majority ofcontent word~ to be used in the utterance beingproduceu (see Figure i), making the task of thegenerator relatively straightforward.
However, thetechniques used could deal with a representationwhich was much less closely related to the surfacetext provided this representation retained afairly straightforward relationship betweenpropositional units of the meaning representation~u~ the clausal structure of the language.
Forexample, a representat ion language whichrepresented ally states and times, but not theevents which linked different states and timeswould probably require a more puwerful frameworkthan ti~t provided by the generator describedhere.
Hc~ver, another case-labelled dependencylanguage, like Schank's ( 1975 ) ConceptualDependency (CD)  Representation, could be handledby providing the ge~lerator with a new set ofsyntactico-semant?c production rules, a new lexicon ~and t/~ replaca~ent of the functions fordismantling Boguraev's dependency representationwith functions for dismantling CD structures.The f r~ork  of ti~ g~lerator has been completelyimplemented and tested with a lexicon of a fewhundred words and a grammar covering much of theE,~lish noun plu:ase and a number of the morestraightforward sentence types.
It has bee__n usedin a number of applications, most notably documentretrieval (Sparck Jones and Tait, 1984a and 1984b)and relational database access (Bcguraev andSparck Jales, 1983).The program described here is efficient (rarelytaking more than a few fractions of second togenerate a seJ,tence) in c~,trast with approachesbased On complex pattern matching (like Appelt(1983), and Jacohs (1983)).
On the other |round, theesse~itial simplicity and uniformity of the approachadopted here has meant that the generator is no,sore difficult to maintain and extend than i~relinguistically motivated approaches, for exampleAppelt's.
Thus it has demonstrated its usefulnessas a practical tool for computational linguisticresearch.~CKNOWLE\[~S~2~TSThis work was supported by the British LibraryResearch and Development Department and wasundertaken in the University of C;,nbridge CcmguterLaboratory.
I would like to thank Bran Boguraev,Ted Briscce and Karen Sparck Jones for the helpfulcomments they made on the first draft of thispaper.
I would also like to th~ my ~onymousreferees for the very helpful comments they ~aade onthe an earlier draft of the paper.REFER~SAppelt, D.E.
(1983) TELS3RAM: A Grammar Formalismfor Language Planning.
Proceedings of theEighth International Joint Conference onArtificial Intelligence.
Karlsruhe.Boguraev, B. K. (1979) Autcmatic Resolution ofLinguistic Ambiguities.
Technical Report No.
Ii,University of Cambridge Computer Laboratory.Boguraev, B.K.
and K. Sparck Jones (1982) A naturallanguage ~,~lyser for database access.
InInformation Technology: Research andDevelopment; vol.
i.Bo~uraev, B.K.
and K. Sparck Jones (1983) A naturallanguage front end to data bases withevaluative feedback.
In New Applications ofDa~aha~as (Ed.
Garadin and Gelenbe), AcademicPress, London.Goldman, N. (1975) Conceptual Generation.
InConceptual Information Processing, R. C.Schank, North Holland, Amsterda~n.Jacobs, P. S. (1983) Generation in a NaturalLanguage In~erface.
Proceedings of the EighthInternational Joint Conference on ArtificialIntelligence.
Karlsru|~.McKecwn, K .R.
( 1980 ), Generati~ RelevantExplanations: Natural Language Responses toQuestions about Database Structure.
Proceedingsof the First Annual National C~,\[erence onArtificial Intelligence, Stanford, Ca.Meehan, J.
( 198i ) Micro-TALE-SPIN.
In InsideComputer Understanding, R.C.
Schank and C.K.Riesbeck, Lawrence Erlbaum A~sociates,Hillsdale, New Jersey.Schank, R. C. ( 1975 ) Conceptual Infom~at 1onProcessing, North Holland, Amsterdam.Sparck Jones K. and J. I. Tait (1984a), AutomaticSearch Term Variant Generation.
Journal ofDocumentation, Vol 40, No.
i.Sparck Jones, K. and J. I. Tait ( 1984b),Linguistically Motivated Descriptive TermSelection.
Proceedings of COLING ~4, Associationfor Computational Linguistics, Stanford.Tait, J.I.
and K. Sparck Jones (1983), Aut~naticSearch Term Variau,t Generation for DocumentRetrieval; British Library R&D Report 5793,Cambridge.197
