vANTONfN R~HA-SVATAVA MACHOV.~COMPUTER TESTING OF A GENERATIVE GRAMMAR1.1.
The emergence of materially elaborated variants of generativedescription of languages has brought about a pragmatical question asto whether a particular generative grammar is working in such a wayas it is assumed to be.
This problem proved to be unsolvable by a lin-guist not aided by computer.
Therefore, programmes tarted to bewritten, so as to enable the computers either a) to make a grammarwork or b) to allow to find out - through a recognition procedure,e.g.
changing the directions of arrows in all the rewriting rules - whetheran initial S can really be reached when starting from assumed outputstrings.1.2.
In th e Computing Centre of Charles University, Prague, theformer of the above methods of computer testing of generative gram-mars was selected - similarly as at the University of Michigan (J. F~a~D-MAN, 1971) and at other research centres.
Tests are being worked outfor a certain variant of functional generative description of the Czechlanguage (the author of its frame is P. SGAr~).
For the time being,the object of the testing is the generative component (GC) of thisdescription enumerating semantic representations (SR's) of sentences.1.3.
Before demonstrating the way in which the testing is car-ried out we shall give a brief outline of the basic properties of the GCof the functional generative description.
For a more detailed charac-terization of this type of description see P. SgAtt, et al (1969).The GC is a context-free phrase structure grammar, i.e.
a grammarof the type 2 in Chomsky's classification of grammars.
Together withthe theory of immediate constituents he dependency syntax finds itsapplication in it.
In the GC there are several types of context-free rules:modifying, substitutional nd selectional ones.
They are shown illustra-tively in Fig.
1, where U, V, W are auxiliary non-terminal symbols,u is a terminal symbol, r is some functor - terminal symbol indicating144 ANTONIN ~iI-IA- SVATAVA MACHOV/twhich of the two non-terminal symbols on the right-hand side of therule is the dependent one and which is the governing one as well asthe type of dependency.
For the sake of simplicity each of the terminaland non-terminal symbols is represented by a single letter.modifying rules U ~ (V r W)rewriting ~ substitutional rules U ~ Vrules ~ seleaional rules U ~ uFig.
1.In the written form of the grammar, non-terminal symbols of thegrammar are ordered (n q- 2)-tuples X, X0, X1, ..., X~ where X is theso-called name-symbol, i.e.
a name shared by a certain class of non-terminal symbols, and X0, ..., X,, are indices specifying individual non-terminal symbols of that class.
Terminal symbols are characterized bya similar structure.
From a linguistic point of view the name-symbolsin terminal symbols correspond to the so-called lexemes, grammatemesand functors.
For the time being the lexemes represent semoglyphs,their total number in the variant tested being 275.
Thus this exper-iment ranks among those experiments operating with a "lexicon" ofa small extent which is typical so far of most computer experimentswith generative grammars.
One name-symbol corresponds to the leftbracket and one to the right one.A substitution of some units for others is often possible in Czechin certain contexts only.
The GC meets this fact generally by introducingnew, more refined categories pecified by indices.
The number of in-dices actually used differs with the individual name-symbols, the brack-ets and some other name-symbols having no indices at all.
The max-imum number of indices attached to one non-terminal name-symbolis 15; the maximum number of indices attached to one terminal name-symbol is 30; the maximum number of values of each individual indexis 94 and the average number of values per one index is 8.The right-hand side of the rules in the GC is subject o certain restric-tions, namely the right-hand side of the rules does not contain morethan two non-terminal symbols.
Hence we work with a binary con-text-free grammar.
The GC contains recursive rules.
The order of therules applied is determined by the form of the rule itself and by a selec-tion of non-terminal symbols.
The rules are not distinguished as oblig-COMPUTER TESTING OF A GENERATIVE GRAMMAR 145atory and optional ones.
However, the answer to the question whetherit is necessary, or only possible, to use some rule in generating someSK of a sentence is given by the form of the rules itself.
To make therepresentation brief and to increase the legibility, rule-schemes arelargely made use of.2.1.
The form of grammar was maintained in a shape close tothe original one, with which the linguists are used to work; it makesa good orientation i  the grammar possible.
Some modifications, how-ever, were introduced.The values of the indices were coded with natural numbers andsome designations were employed, such as so-called references, whichmake it possible to register only once the lists of index-values and evenwhole non-terminal symbols that occur more than once, and to referto these values in other cases; they also make it possible to describethe fact that the value of some index is determined by a value of someother index, etc.
These lists, symbols and values are usually referredto by means of references in the frame of a single rule-scheme so thatthese references do not cause any serious slowing down of the workof the programme and at the same time they save the storage space.The leftmost-derivation method is used, as well as a random choiceof alternatives.
It was, however, necessary to avoid, e.g., a repeatedchoice of some recursive rules, which would lead either to an excessiveprolongation of the string generated, possibly without any transitionto terminal symbols, or to a situation where the number of some typesof Slk's ifi the generated sample would be far removed from theiractual frequency in the language.
Therefore, the alternatives on theright-hand sides are not picked out simply at random but with a cer-tain prescribed probability.
As a consequence of the use of rule-schemesit is not possible to prescribe probabilities for the schemes of the right-hand sides as wholes only, and it is necessary to prescribe also proba-bilities for various values of indices used in these schemes.
The prescrib-ed probabilities make it possible to control the derivation of the SPCsso as to make the generated sample contain, first of all, some stringsof a particular type chosen a priori, which we intend to examine moreclosely.
Thus it will be possible to change the set of the generated stringsby means of a change of the probabilities prescribed.
In other words:by a modification of probabilities of some subset of rules it will alwaysbe possible to meet the demand: "Let the given phenomenon occurin SR.'s with much higher (or lower) frequency!
".
However, an answerl0146 ANTONiN RfI'IA- SVATAVA MACHOVfitto the question: "What  will be the effect of  a modification of  theprobability in the rule number n~ upon the generation of  SK's? "
canonly be given after evaluating the further experiment of  random gen-eration in which the probability modification intended will be ma-terialized.The programme makes use of  a special subroutine to obtain pseu-dorandom numbers.An example of a modifying rule:VERBUM 0 = 18-..>.VERBUM, NPRD8 = 0,1$9 = 13400 =- 9(20),I03 = L8LS7----1 8=0,1  $9=13-~40 (NP 0 = 9(20),10 2 ---- 1 3 = L8 RD LS)are non-terminal name-symbolsis a functor - terminal name-symbolmeans that this rule can be used when the value ofindex 8 with given non-terminal name-symbol is 0 or 1means that the rule can be used for non-terminal name-symbol VERBUM when index 9 either has the value13 or is not useda prescribed probability for choice of this alternative(other alternatives are not quoted here for this example)means that in 20 ~o of cases the value 9 is to be chosen,in the rest of the cases the value 10the value of index 3 with a non-terminal name-symbolNP will equal the value of index 8 of the rewrittennon-terminal symbolreference; it means that at this place the whole left-hand side should be repeated(i.e.
VERBUM with all its indices).Some quantitative characteristics of the tested variant:(The given average values are mere estimates based on partial calcula-tions, exact values will be reached on the computer in the course of trans-ducing the grammar into a form suitable for the work of the programme).The number ofnon-terminal name-symbols 62the number of indiceswith one non-terminal name-symbol 15 max, 5 averageCOMPUTER TESTING OF A GENERATIVE GRAMMAR 147the number of possible valuesof one indexwith one non-terminal name-symbolthe number ofterminal name-symbolsthe number of  (, properterminal name-symbols(corresponding to lexemes)the number of indiceswith one terminal name-symbolthe number of possible valuesof one indexwith a terminal name-symbolthe number of schemesof left-hand sidesfor one name-symbolthe total number of schemesof left-hand sidesthe number of schemesof right-hand sidesfor one left-hand sidethe total number of schemesof right-hand sidesthe number of all name-symbolsof one right-hand side94 max (with the so-called de-terminations)34 max (in other cases)8 average30427530 max (with verbal lexemes)7 max (with noun lexemes)3 average94 max (with the so-called de-terminations)18 max (in other cases)7 average79 max6 average46020 max2 average10106 max3 average3.
In giving information on research work, including linguistics,a great deal depends on the way chosen for the presentation of theresults (A. MalITINrT, 1970).
In the field of  computer treatment of148 ANTONflq ~.fI--IA- SVATAVA MACHOV,~grammar we have not found it very easy to choose the most adequateway for transferring the acquired knowledge and we assume tohave reached this goal only partially.3.1.
The most essential work involved in the transduction of thegrammar into a shape which is cohvenient for the work of the computerwas left to the aRAMMAR TRaNSDtrCER programme which also performsthe input check of the representation.The programmes are being prepared for a computer of the typeIBM 360 or 370 and will be written in PL/1 programming language.3.2.
The whole grammar will be written on a magnetic disk asone file by means of the GRAMMAR TRANSDUCER programme.
This filewill contain records of variable length.
One record will always containinformation about all left-hand sides with the same name-symbol andabout the corresponding right-hand sides.The structure of a record on a magnetic d~sk:LS i ... information about a left-hand side (about indices, their values and their prob-abilities)RSii ... information about right-hand sideshaving the form I P l W11 W21 ...
I W~ I'where W i describes the word of the right-hand side, i.e.
the code of its name-symbol, indices and their values, and the probabilitiesP stands for the probability of the selection of the given scheme ofthe right-hand sideFig.
2.The main programme DEmVATION OF SR'S and the generated stringwill be stored in the internal storage of the computer.
The programmereads a corresponding record of the file on the disk storage, using thecode of the non-terminal name-symbol as a key.
The read record isprocessed irectly in the buffer with the use of based variables.
First,an appropriate l ft-hand side of the rule is found, then a correspondingright-hand side of the rule, and the substitution is carried out.It follows from the shape of the rules that approximately 1/4 outof the total number of symbols in the generated string are the so-call-COMPUTER TESTING OF A GENERATIVE GRAMMAR 149ed semoglyphs.
An analysis of the process of generation has shownthat, if the generated string contains N semoglyphs, it was necessaryto use, in the course of its generation, about 5 N to 8 N-times a substi-tution rule, N-times a selectional rule and (N-1)-times a modifyingrule.
E.g.
when simulating ageneration of a string of 13 symbols - con-taining 3 semoglyphs - 23 substitutions were carried out, which cor-responds well to the estimation according to the method escribed above.We can thus estimate the number of readings from the external storageof the computer in the course of the generation of one string.The maximum length of a string will be determined by the dimen-sion of the storage space declared for this string.
The probabilities pre-scribed for the choice of the right-hand sides of the rules ensure that apremature finishing of the process of generation caused by exceedinga given length may occur only in exceptional cases.On the output of the programme there will be two output filescontaining generated SR's.
One will be on the magnetic tape andwill serve as an input for the programme for the next (transductive)component of the generative description, the other will be a print fileserving for checking up the results.Possible changes and corrections of the rules of the grammar willbe carried out by means of a programme called CRAMMAR MOmr~R,which will carry out the changes in the file stored on the magnetic diskaccording to the data on punched cards.In the present moment, we have finished the rewriting of the gram-mar into the shape which will be punched on the cards.
Some basicproblems have already been solved, e.g.
the shape of the data has beendecided upon and the algorithm of the generation of SR.'s has beenformulated.
The programming itself will be done during the autumnof this year.A system of programmes for testing the whole generative grammaris illustrated by means of a flow-chart diagram in Fig.
3.The diagram of the data preparation for a programme correspondingto the GC is shown in Fig.
4.
The other data files will be prepared inan analogous way.4.
The main contribution of the computer testing of a generativegrammar is usually seen in the fact that the linguist acquires knowledgeon the interaction of the rules of grammar (J. FRIEDMAN, 1971).
More-over, the preparation of the data for the computer calls for more accu-150 ANTONfN idHA- SVATAVA MACHOVADerivation of SIL'sY?Transduction to thePhenogrammatical Level~rOTransduction to theMorphemic Level?
"VTransduction to theGraphemic Level1 ... Rules of grammar2,3,4 ... Rules of transduction__Representation ofSentences on thePhenogrammatical LevelRepresentation fSentences on theMorphemic Level--3- Sentences inGraphemicFormFig.
3Rules of Grammar IGRAMMAR TRANSDUCERJ Corrections and/orI ModificationsGRAMMAR MODIFIER \]Rules of GrammarAdapted for ComputerFig.
4COMPUTER TESTING OF A GENERATIVE GRAMMAR 151rate formulations and solutions of some questions, which would other-wise be neglected as less important.We also find some value in the fact that the results of computertesting of any particular generative grammar can help even a linguistwho is not precisely familiar with the theory in question: he canpromptly verify his own views, or those of somebody else, on linguisticproperties of the sequences generated, and gain useful information forhis own further work.REFERENCESj.
FRIEDMAN with T. H. BI~r.DT, R.. W.DORAN, \]3.
W. POLLACK, T. S. MAR-TN~, A Computer Model of Transform-ational Grammar, New York, 1971.A.
MARTINET, Analyse et Prdsentation:Deux Temps du Travail du Linguiste,in Linguistique Contemporaine.
Horn-mage ~ E. Buyssens, Bruxelhs, 1970,pp.
133-139.P.
SGALL, L. NEBESK~ r, A. GORAL~IKOV~I,E.
HAJI~OV.~, A Functional Approachto Syntax in Generative Description ofLanguage, New York, 1969.
