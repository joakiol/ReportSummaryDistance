Understanding of Stories for AnimationHideo SHIMAZU *Artificial Intelligence Laboratory,3531 Boelter Hall, University of Califomia,Los Angeles, CA 90024, USAABSTRACTThis paper presents the story understanding mechanism for creatingcomputer animation scenarios.
The story understanding mechanismreads a natural anguage story and creates its scenario for realisticgraphic animations.
This paper presents three types of hiddenactions and relations of actions that must be discovered for realisticanimations of stories but which are not explicitly described in thestories.
They are: 1) causality check among actions; 2) interpolationof a continuous action beyond a sentence; 3) interpolation ofhiddenactions between eighboring sentences.
This paper also describesthe inference mechanism which recognizes the need for interpolationof these hidden actions.
Multiple TMS is introduced in the mechan-ism.
The knowledge base is action-oriented, hence it is independentof individual stories' domains.1.
IntroductionRecently computer animations have been widely used in manyfields like conventional CAD, commercial films and movies.
Forthese kinds of applications, high-level languages are now provided\[Reynolds 82\]\[Zeltzer 82\].
However, because these languages areprogramming languages and am hard to use for untrained personnel,it is desirable to develop an easy-to-use computer animation systemto encourage more wide-spread use of computer animation.The authors have been developing Story Driven Animation(SDA) \[Takashima etal.
87\] which automatically generates the ani-mation for a given story written in Japanese taken from a children'sstory book.SDA consists o f  three modules: 1) story understanding; 2)stage directing; 3) action generating.
The first module reads a storywritten in Japanese and makes an action-based scenario.
The secondmodule receives the scenario and modifies it for stage setting.
Thelast module generates animations on a graphics display according to* The author is a member of NEC Corporation, and is now staying at theArtificial Intelligence Laboratory, UCLA during this academic year.620Yosuke TAKASHIMAMasahiro TOMONOC&C Information Technology Research LaboratoriesNEC Corporation4-1-1 Miyazaki Miyamae-ku KawasakiKanagawa 213 Japanthe precisely specified scenario given by the stage directing module.SDA differs from previous natural anguage processing sys-tems, such as summarizing \[Young & Hayes 85\]\[Lytinen & Gersh-man 86\], depth understanding of stories \[Dyer 83\]?
question-answering \[Wilensky 82\]\[Harris 84\] and story gunerating\[Schank &Riesbeck 81\], in that it interpolates hidden actions among sentencesthat must be discovered for realistic omputer animations but are notexplicitly described in the story itself.Since SDA can accept curtailed expressions in input stories,story writers do not have to describe all the acts explicitly to get thedesired graphic animation.
Consider the following sentences in "TheHare and The Tortoise" in Aesop's fables:(1), The hare ran.(2).
The hare looked back.(3).
The hare said, "the tortoise can never catch up with me".(4).
The hare lay down on the grass.
("The Hare and The Tor~ise", Aesop's fable)It is never thought that the hare would lie down while running withhis face looking tn the reverse direction.
If he were to do so, hewould do a dive and his neck would be brokenl Any person can con-jure up an accurate image of the hate's actions.
Naturally lackingfacts between sentences arc interpolated using the human reader'scommon-sense.
We imagine that the hare stopped between (1) and(2), and looked forward between (3) and (4).
However, if an anima-tion producing program does not have this common-sense, it pro-duces trange graphic animations when these sentences are not moreexplicitly described.
The above scenario is merely one example ofSDA's ability to interpolate curtailed expressions of action.
In orderfor a story understanding program to laccurately accept input sen-tenees, it is imperative that such a common sense be built into theprogram.SDA story understanding mechanism was constructed based onaction-oriented knowledge.
Knowledge related to actors' actions isindependent of the content of individual stories, and is common toeveryone since actors' movements are constrained by physical limi-tations of a human body.
Although this story understandingapproach is superficial, it allows for an extensive domain.This kind of research which strictly infers occurrences ofactions among natural language sentences has not been done yet.
Inthis paper wo present various types of hidden actions among sen-tences and the inference mechanism toidentify and interpolate them.The whole SDA system is roughly described in \[Takashima et al87\].2.
Types of Hidden Actions to be InterpolatedThere a~e three types of hidden actions and relations of actionsto be interpolated among sentences.
The above example shows atype of hidden actions to be interpolated.
It can be stated as follows:, Continuity of different actions between sentences: When anaction in a sentence is not consecutive toany action in the pre-vious ~ntence, bridging action(s) has/have to been found andadded into the original text.
The action "stop" between "run" at(1) and "look hack" at (2) and the action "look forward"between "look back" at (2) and "lie down" at (4) are examples.SDA interpolates discriminately; if in the same context it mustinterpolate, if not in the same context, then it must not try tointerpolate (e.g.
"The frog lay down.
The next morning, thefrog went out.
").The following example includes the other two types of interpolationsin it.
The example is also from "The Hare and The Tortoise".(5).
The tortoise ran.(6).
The tortoise ran as kicking up a cloud of dust.(7).
The tort(rise sweat while running.(8).
The tort(~ise topped at the top of the mountain.The proper interpretation f these sequences may be the followings:The tortoLve starts running at (5).
The tortoise runs whilekicking up a cloud of dust at (6).
Here, the action of"kick-up-a-cloud-of-dust" must be caused by the action of"run".
The tortoise sweats while running and kicking up acloud oJ dust at (7), even though "klck-up-a-cloud-of-dust"is not specOfed in (7).
Here, the action of "sweat" must becaused by the action "run", for the tortoise is not breakinginto a coM sweat.
The tortoise stops running at (8).
At thistime the tortoise also stops "kick-up-a-cloud-of-dust"-ingand "sweat"-ing because these two actions were caused by"run".The other two types of hidden actions are:?
Causality among actions: When an action appears in a sen-tence, it must be verified whether it is independent of any otheraction or caused by other actions.
If an action is caused byanother action, it also ceases when its dependent action stops,(e.g.
the relationship between "kick-up-a-cloud-of-dust" to"ran" and "sweat" to "run").
This verification is done betweenneighboring sentences whose agent is the same.Continuity of an action beyond a sentence: An action isassumed to continue until it is explicitly ordered to stop if thisaction is a continuous type.
Inference of the continuity of theaction "kick-up-a-eloud-of-dnst" from (6) to (7) is an example.3.
SDA Story Understanding MechanismIn order to accurately understand an input story, SDA performsfour distinct operations:\[1\] Extracting meanings of a sentence: Each sentence is parsed, itsmeanings extracted, and the meanings put into an independentblock called world.
Because our target story has a simple form,the sequence of its sentences becomes a chronological sequence.Each sentence in a story includes everal assertions.
An assertionextracted from a sentence may not be true in context with time ofits succeeding sentence.
Therefore, an individual worm isassigned to each sentence in order to store assertions whichrepresent the situation inherent in a sentence.
When a new worldis created, it is linked to the sequence of worlds which is linkedwith each individual actors; the hare, the tortoise tc.
Each wormis compared with its previous world, and its assertions areadded/deleted/modified in the following processes, \[3\] and \[4\].\[2\] Causality check among actions: When an action assertion isputinto a world, its causal relationship to other actions is checked.
Ifit is dependent on another action, the causality link is connectedbetween the action and its independent action.\[3\] Interpolation of hidden actions between neighboring sen-tences: Each action of the present sentence is also checked for itscontinuity to actions in the previous world.
If some action is hid-den between the previous world and this sentence, it is identifiedand added into the present world.\[4\] Interpolation of a continuous action beyond a sentence: Whenthere exist actions ~vhich are not mentioned inthe present sentencebut should continue from the previous entence to the present sen-tence, they are added into the present world.621Implementation?.1 Implementing wormEach world consists of two stages: present-state and post-state.Present-state, the upper part of a world, holds assertions whichrepresent the state of the moment when the sentence is uttered.Post-state, the lower part of a world, holds assertions whichrepresent the state just after the time when the sentence is uttered.For example, the world of (5) has the assertion "the tortoise runs" inits present-state, the assertion "the-act-of the tortoise is run" in itspost-state (see Figure 1).the tortoise runs.the-act-of the tortoiseis run.present-statepost-stateFigure 1 World of (5)This means that the tortoise is running during the sentence (5) andafterwards continues to run.
Each post-state of each world isindependently monitored by Truth Maintenance System (TMS)\[Doyle 79\].
This structure is similar to Viewpoints in ART \[Clayton85\].
TMS works well in accomplishing the continuity chock of anaction beyond a sentence.4.2 Causality Check Among Actions"The dictionary contains action causalities of verbs.
When averb or a verb phrase is processed, the SDA parser consults the dic-tionary.
The following is a part of the dictionary for the verb phrase,"kick-up-a-eloud-of-dust":kick-up-a-clond-o f dnstif the-act-of *actor is tunthen ;;; *actor is a variable, the agent of this actionpresent-state:*actor kick-up-a.eloud-of-dust.post-state:true(the-act-of *actor is kick-up-a-clond-of-dusOsupported-by(in(the assertion-id of "true(the-act-of*actor is run)")outO)elsepresent-state:*actor kick.up-a-eloud-of-dust.post-state:true(the-act-of ~actor is kick-up-a-cloud-of-dus0 a -premiseIf the tortoise kicks up a cloud of dust when it is running, the actionof "kick-up-a-cloud-of.dnst" i  assumed to be caused by the "run"~ction.
Therefore, the corresponding assertion of tbe action "kick-,i~-a-cloud-of-dnst" is supported by tim "run" assertion.
If the tor-,oise is not running at the time.
the assertion of "kick-up-a-cloud-of-dust" is justified as a premise, whic h means that the tortoise is kick-ing up a cloud of dust while standing at a point, This causalitybetween different actions is used as a dependency directed link forTMS.4.3 Interpolation of Hidden Actions Between SentencesInterpolation of bidden actions is accomplished by using goaldirected search.
When a sentence is processed and its assertions arcextracted, the system picks up each assertion, and then makes aninspection to determine whether the action of each assertion is con-tinuous from the state of the previous world or not.
The continuity isinspected by checking whether the pre-condition of the action issatisfied in the post-state of the previous world or not.
Each verb isspecified its pre-conditton and post-condition in the dictionary.Pre-condition is the constraint to be satisfied just before the act of averb.
Post-conditlon is the state to be achieved just after the act of averb.
For example, the dictionary indicates that in order to "stop",the agent must be going on foot (pre-condition), and after the agent"stop"s, it must be standing (post-condition).If an action in the present sentence is continuous from thepost-state of the previous world, it is simply put into the presentworld.
If it is not continuous, the system searches for a sequence ofactions which bridge it (goal point) and the post-state of the previousworld (starting points) by referring the pre-condition/post-conditionof verbs in the dictionary.
This search process is similar to the exe-cution of STRIPS \[Nilsson 80\].
If a bridging sequence of actions isfound, the abridged actions in the sequence arc added into the origi-nal assertion.
Then, the modified assertion is put into the world.The sentence (2) "the hare looked back" is modified to "thehare stopped and looked hack" in order to satisfy the pre-conditionof the verb phrase "looked back".
The related pieces of the diction-ary are shown below.look-backpre-eondition:(the-state-of the agent is not in the reverse directionORnothing is mentioned regarding the direction)ANDthe-state-of the agent is standing.post-condition:the-state-of the agent is in the reverse direction.stoppre-condition:tbe-act-of the agent is go-on-foot.post-condition:the-state-of the agent is standing.6224.4 Interpolation of a Continuous Action Beyond a SentenceInterpolation of a continuous action beyond a sentence isaccomplist~ d based on the assumption that actors' actions areassumed to continue until they are explicitly ordered to stop.
Thisassumption is the same as the persistence problem in \[Shoham 88\].After a sentence ts analyzed and its meanings are stored intoboth the present-state and the post-state of the present worM, all theassertions in the post-state of the previous world are copied into thepost-state of the present world.
Then, the post-state of the presentworld is choked its consistency by TMS.
This ebeck prevents theover-copying of continuous actions from the previous worM.
TMSworks acemding to the following monitoring rules:Duplication Elimination Rule: If there exist two or more sameassertions in the present world, the copied one from the previ-ous world is diminated.?
Exclusive Action Elimination Rule: If there exist exclusiveassertions, the one copied from the previous world is elim-inated.
The exclusion relations of actions and states are alsodefined in the dictionary.
The exclusion relations are like thefollowings:exclusive(act-of ran, state-of standing)exclusive(act-of run , act-of walk ).TMS compares each of the assertions in a world with each(6).
The tortoise ran as kicking up a elond of dust,Vtl~ tortoise'runs.
\[Itbe tortoise kick-up-a-cloud-of- I1.0 .s -  .
.
.
.
.
If \ ]  the-act-of the tortoise is run.
\[i the act of the tortoise's kick-up/ /L.R-cloud-" .I -of-dnst.
$'/ (7).
The tortoise sweat while running.the tortoise sweats.
Icopy ~tl~ wrtoise kick-up-a-cloud-of- I '~the to ise ts\ I ~te-aet-of the tortoise is sweat.
I createdI the-act-of the tortoise is klck-up- I~,// Lg-cloud-of-du 7 .
.
.
.
.
.
I/\[ (8).
The tortoise stopped at the top of the mountain.copy I the tortoise stops at the top of the It ~ ~0untatrL :-----I| t~-state-of the tortoise is stand- I\ l ing .
l \ ,  r/~-e- ................... /- -~/ .
o~.. ~ =, .,- .
.
.
.
2~o.
~.
L4 ~t, ,,.
IFigure 2 Worm of (6), (7) and (g)other.
If two assertions cannot coexist, the one copied from theprevious world is deleted.Figure 2 shows the worlds corresponding to sentence (6), (7) and (8).Here, the world of(6) is already troth-maintained.
After the sentence(7) is analyzed and its meanings are stored into the world of (7), thetwo assertions Inthe post-state of (6) are copied into the post-state of(7).
TMS then deletes the duplicated assertion, "the-act-of the tor-toise is run".
The assertion "the-act-of the tortoise is kick-up-a-cloud-of-dust" remains in the post-state of (7).Generally an assertion i  a post-state corresponds to an asser-tion which presents the causal action in a present-state of the sameworld.
For example, "the-act-of the tortoise is ran" is correspondingto "the tortoise runs".
When an assertion is added into the post-stateof the present world by copied from the previous world and has nocorrespondence in the present-state of the present world, itscorresponding assertion is created and put into the present-state ofthe present world by the system.
Therefore, in this situation thecorresponding assertion, "The tortoise kick-up-a-cloud-of-dusts" iscreated and added into the present-state of (7).
The present-state ofworld of (7) shows that the tortoise is running while sweating andkicking up a cloud of dust (present-state), and afterwards continuesto mn while sweating and kicking up a cloud of dust (post-state).After the meanings of the sentence (8) are stored into the wormof (8), three assertions are copied from the world of (7) to the worldof (8).
Next, because "act-of run" and "state-of standing" areexclusive, the assertion "the-act-of the tortoise is run" is deleted byTMS according to the exclusive action elimination rule.
Then, twoother assertions in the post-state of (8) which were supported by thedeleted assertions are subsequently eliminated according to thedependency-directed backtracking mechanism of TMS.
Now, theworld of (8) has only one assertion, "the-state-of the tortoise is stand-ing", in the post-state of (8), which means the tortoise is standingand stopped kicking up a cloud of dust and sweating.After all the story is processed and represented aschronologi-eal sequences ofworlds, assertions in thi~ present-state of each wormare gathered and transformed into a scenario for the stage directingmodule.5.
System ConfigurationFigure 3 indicates a high level view of the whole story under-standing system, Each sentence is processed individually and itsassertions are extracted by SENTENCE-PARSER.
The sentencegrammar in SENTENCE-PARSER is described using Definite623Clause Grammar in Prolog \[Pereira & Warren 80\].
The assertionsare then put into the MORE-MEANING-EXTRACTOR which isbased on forward-reasoning.
Here as many assertions as possible areextracted from the inputs.
For example, "If the weather is fine and itis night, then the background for the drama stage is colored in blackwith lots of stars", etc.
The extracted assertions are put into aseparate worm for each sentence.
Each world is monitored by TMS.Path #1 between eighboring worlds indicates the interpolation of acontinuous action beyond a sentence.
Path #2 indicates goaldirected search to discover the path of transition between differentactions.
The whole story understanding system is implemented usingProlog on vax111780.6.
Conc lus ionThis paper presents the story understanding mechanism forcreating computer animation scenarios.
The story understandingmechanism reads a natural language story and creates its scenario forrealistic graphic animations.
This paper presents three types of hid-den actions and relations of actions that must be discovered for real-istic animations of stories but which are not explicitly described inthe stories, This paper also describes the inference mechanismwhich recognizes the need for interpolation of these hidden actionsand relations.
The transition in a story is reflected by chronologicalsequences of multiple worlds, each of which is monitored by TMS.A world holds extracted assertions representing the situation inherentin a sentence.
Each world is compared with its neighboring worms,and assertions in the worm are added/deleted/modified in the follow-ing three processes:?
Causality check among actions.?
Interpolation ofa continuous action beyond asentence.?
Interpolation ofhidden actions between eighboring sentences.The knowledge base is aedon-oriented, hence it is independent ofindividual stories' domains.
Currently, the story understandingmechanism works well for several fables.Acknowledgements: The authors would like to express their appreci-ation for continuous encouragement from Kunihiko Niwa andTakashi Arasekt.
This research could not have been started withoutthe encouragement of Kazumoto linuma.
Stephen Berkov providedmany useful comments.Chronological sequencesentence-Isentence- i +1SENTENCE IPARSER(DCG)sentence-i+2I MORE-MEAN ING-ICXTRkK TOR(Porward-Reasoning)WORLD- i ,~ WORLD- i+l  .~ WORiD- i+2Figure 3 Whole Story Understanding System624~ eferences\[Clayton 851 B.D.
Clayton, "ART Programming Tutorial, A FirstLook at Viewpoints", Inference, 1985.\[Doyle 79\] L Doyle, "A Glimpse of Troth Maintenance", ArtificialIntelligence: An MIT Perspective, The MIT Press.\[Dyer 83\] M. G. Dyer, "In-Depth Understanding", The MIT press;1983.\[\]\[lards 84\] L.R.
Harris, "Experience with INTELLECT: ArtificialIntelligence Technology Transfer", THE AI Magazine summer 1984.\[Lytinen & Gershman 86\] S. Lytinen & A. Gershraan, "ATRANS:Automatic Processing of Money Transfer Messages", ProceedingsAAAI-86, 1986.\[Nilsson 80\] N. Nilsson, Principles of Artificial Intelligence", Tioga.\[Percira & Warren 80\] F. Pereira & D. Warren, "Definite ClauseGrammar for Language Analysis -- A Survey of the Formalism and aComparison with Augmented Transition Networks", Artificial Intel-ligence, 13, 1980.\[Reynolds 82\] C. Reynolds, "Computer Animation with Scripts andActors", ACM Computer Graphics, vo1.16, no.13, July, 1982.\[Schank & Riesbeck 81\] R. Schank & C.K.
Riesbeck, "Inside Com-puter Undelstanding", Hillsdale, New Jersey: Lawrence EflbaumAssociates.\[Shoham 88\] Y. Shoham, "Reasoning About Change", The MITPress.\[Takashima etal.
87\] Y. Takashima, H. Shimazu and M. Tomono,"Story Driven Animation", Proc.
ACM SIGCFtl and Graphics Inter-face '87 Joint Conference, 1987.\[Wilensky 82\] R. Wilensky, "Talking to UNIX in English: An Over-view of an Onqine Consultant", Report No.
UCB/CSD 82/104internal ~poct of UCB, 1982.\[Young & Hayes 85\] S.R.
Young & P.J.
Hayes, "AutomaticClassification and Summarization fBanking Telexes", the 2nd conf,on Artificial Intelligence Applications, Dec. 1985.\[Zcltzer 82\] D. Zcltzer, "Motor Control Techniques for Figure Ani-mation", IEEE Computer Graphics and Applications, Vol.
2, No, 9,November, 1982.625
