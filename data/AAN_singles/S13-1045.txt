Second Joint Conference on Lexical and Computational Semantics (*SEM), Volume 1: Proceedings of the Main Conferenceand the Shared Task, pages 328?338, Atlanta, Georgia, June 13-14, 2013. c?2013 Association for Computational LinguisticsSemantic Parsing Freebase: Towards Open-domain Semantic ParsingQingqing CaiTemple UniversityComputer and Information Sciencesqingqing.cai@temple.eduAlexander YatesTemple UniversityComputer and Information Sciencesyates@temple.eduAbstractExisting semantic parsing research hassteadily improved accuracy on a few domainsand their corresponding databases.
This paperintroduces FreeParser, a system that trains onone domain and one set of predicate and con-stant symbols, and then can parse sentencesfor any new domain, including sentences thatrefer to symbols never seen during training.FreeParser uses a domain-independent archi-tecture to automatically identify sentencesrelevant to each new database symbol, whichit uses to supplement its manually-annotatedtraining data from the training domain.
Incross-domain experiments involving 23domains, FreeParser can parse sentences forwhich it has seen comparable unannotatedsentences with an F1 of 0.71.1 IntroductionSemantic parsing is the task of converting a sentenceinto a representation of its meaning, usually in a log-ical form grounded in the symbols of some fixedontology or relational database (Zelle and Mooney,1996; Zettlemoyer and Collins, 2005; Kate andMooney, 2006).
A growing body of research onsemantic parsing has yielded consistent improve-ments in parsing accuracy.
Yet existing semanticparsers have always been limited by the need forsignificant amounts of manually-annotated trainingdata for each domain of discourse, or for each newdatabase.
As a result, current semantic parsers havebeen constrained to small domains, like answeringgeography questions.In an effort to break out of these narrowly-constrained domains, we investigate semanticparsers for Freebase, an online database of user-contributed facts divided into 86 domains, includ-ing everything from architecture to zoos.
Freebase ismuch larger than standard benchmark databases forsemantic parsing; for example, it contains 300 timesas many relations, and 75,000 times as many in-stances, as the GeoQuery database.
On average, thebenchmark GeoQuery dataset has 125 training sen-tences per relation.
An equivalent dataset for Free-base would require labeling close to 40,000 trainingsentences, an expensive undertaking.The size and diversity of data in Freebase forcesus to consider a new task of open-domain seman-tic parsing.
We introduce FreeParser, which trainson labeled examples from a select group of initialdomains.
It also uses the information in Freebaseto automatically find unlabeled training sentencesfrom Wikipedia for every Freebase relation.
Usinga self-supervised architecture, FreeParser automat-ically labels these sentences, and then trains a se-mantic parser for all of Freebase.
The current re-striction to Wikipedia has a downside: 44% of thetest questions in our dataset contained a word thatnever appeared in our set of automatically-collectedsentences, suggesting that significant further gainscould be had by scaling to a larger corpus.
However,FreeParser is able to find correct parses for 70% ofthe questions from new domains where it could findrelevant sentences in Wikipedia, at a precision of72%.The next section provides background on se-mantic parsing for Freebase, and discusses relatedwork.
Section 3 describes the main modules of theFreeParser system.
Section 4 analyzes the perfor-mance of FreeParser on an open-domain semanticparsing task.
Section 5 concludes.328domain num.
queries % of totalfilm 49 12business 46 11tv 34 8location 32 8award 32 8people 30 7medicine 25 6organization 24 6finance 21 5book 21 5et al89 22total 403 100Table 1: Breakdown of our Freebase data set into do-mains.
Several questions used symbols from multipleFreebase domains, in which cases human judges selectedthe best domain they could for that question?s category.2 Background and Previous Work2.1 Freebase DatasetFreebase is a free, online, user-contributed, rela-tional database (www.freebase.com) covering manydifferent domains of knowledge.
The full schemaand contents are available for download.Freebase has a number of advantages for build-ing an open-domain semantic parser.
Most obvi-ously, it provides a much tougher test for seman-tic parsing than traditional benchmark databases likeGeoQuery.
It also provides a testbed for semanticparsing across domains.
As a reference point, theGeoQuery database contains a single domain (ge-ography), 8 relations, and 698 total instances.
The?Freebase Commons?
subset of Freebase, which isour focus, consists of 86 domains, an average of 25relations per domain (total of 2134 relations), and615,000 known instances per domain (53 million in-stances total).
By dividing Freebase into differentsub-databases according to domain, we can readilytest the portability of our parser across domains, andits ability to handle relations and symbols that neveroccur in manually-labeled training data.Our dataset contains 403 questions and a meaningrepresentation for each question, written in a variantof lambda calculus1.
We believe the dataset in it-self is an important contribution to the field, as it1The data is available from the second author?s webpage.Examples1.
What are the neighborhoods in NewYork City?
?x .
neighborhoods(new york, x)2.
How many countries use the rupee?count(x) .
countries used(rupee, x)3.
How many Peabody Award winners arethere?count(x) .
?y .
award honor(y) ?award winner(y, x) ?award(y, peabody award)Figure 1: Example questions with their logical forms.provides a testbed for semantic parsing across mul-tiple domains.
Several examples are listed in Fig.
1,and Table 1 provides a breakdown of the domains inour data.
The questions were provided by two na-tive English speakers, one high school student andone computer science undergraduate student.
Eachcontributor was introduced to the Freebase website,and asked to come up with English questions thatthey would like to have answered.
No restrictionswere placed on the type of questions they shouldproduce, except that they should produce questionsfor multiple domains.
23 domains are represented inthe data set.
Inspection of the dataset indicates thatmost questions have relatively simple and regularsyntax, compared with the more complex construc-tions observed in datasets like GeoQuery.
Collectingmore complex questions for open-domain tests is anongoing project, but the existing dataset is alreadya significant challenge for current semantic parsinglearning algorithms.2.2 Challenges for a Freebase Semantic ParserTo provide a benchmark for comparison, we appliedthe PCCG-based semantic parser called UBL, de-veloped by Kwiatkowski et al(2010).
Source codefor UBL is freely available.
Its authors found that itachieves results competitive with the state-of-the-arton a variety of standard semantic parsing data sets,including Geo250 English (0.85 F1).
Using a fixedCCG grammar and a procedure based on unificationin second-order logic, UBL learns a lexicon ?
fromthe training data which includes entries like:329Example Lexical EntriesNew York City ` NP : new yorkneighborhoods in `S\NP/NP : ?x?y.neighborhoods(x, y)Example CCG Grammar RulesX/Y : f Y : g ?
X : f(g)Y : g X\Y : f ?
X : f(g)Using ?, UBL selects a logical form z for a sen-tence S by selecting the z with the most likely parsederivations y: h(S) = arg maxz?y p(y, z|x; ?,?
).The probabilistic model is a log-linear model withfeatures for lexical entries used in the parse, aswell as indicator features for relation-argument pairsin the logical form, to capture selectional prefer-ences.
Inference (parsing) and parameter estimationare driven by standard dynamic programming algo-rithms (Clark and Curran, 2007; Wilks et al 1990),using a context-free, combinatory categorial gram-mar that includes rules for forward application andcomposition.In a standard experimental setup on our dataset,UBL provides an F1 of 0.35.
We took a random splitof 70% of the data for training, 30% for test.
AnF1 of 0.35 is significantly worse than UBL?s perfor-mance on GeoQuery data (F1 of 0.85) but within thebounds of reason, given that our data has over 200relation symbols that need to be learned using lessthan 300 training sentences, compared with the 8 re-lations and 250 sentences that make up the Geo250English dataset.However, UBL is not designed for open-domainsemantic parsing, and after training on the trainingset above, it is not be able to handle questions forany of the remaining 63 domains in Freebase.
Inopen-domain tests, it achieves an F1 of 0.0, and formost sentences, it cannot produce a parse.
As oneexample, we created a test set from the businessand finance domains, and separated the remain-ing domains for training.
Every test example has apredicate symbol that has never been observed be-fore in training.
The F1 of 0.0 on this dataset is not afault of UBL, but rather it shows the difficulty of thetask.
Porting a system across domains often resultsin substantial loss of accuracy for many natural lan-guage processing tasks (Huang et al 2011), but usu-ally the drop in accuracy is no more than 10-20%.Open-domain semantic parsing is an even starkerchallenge; it involves not just new natural languagewords in the new domains, but also new databasesymbols, which existing technology cannot handle.2.3 Previous WorkKrishnamurthy and Mitchell (2012) also create a se-mantic parser for Freebase, covering 77 of Free-base?s over 2000 relations.
Like our work, theirtechnique uses distant supervision to drive trainingover a collection of sentences gathered from theWeb, and they do not require any manually-labeledtraining data.
However, their technique does requiremanual specification of rules that construct CCGlexical entries from dependency parses.
In compar-ison, we fully automate the process of constructingCCG lexical entries for the semantic parser by mak-ing it a learning task.
We test our results on a datasetof over 400 questions covering over 200 Freebase re-lations, a more extensive test than the 50 questionsused by Krishnamurthy and Mitchell.Yahya et al(2012) report on a system fortranslating natural language queries to SPARQLqueries over the Yago2 (Hoffart et al 2013)database.
Yago2 consists of information extractedfrom Wikipedia, WordNet, and other resources us-ing manually-defined extraction patterns.
The man-ual extraction patterns pre-define a link between nat-ural language terms and Yago2 relations.
Our tech-niques automate the process of identifying matchesbetween textual phrases and database relation sym-bols, in order to scale up to databases with morerelations, like Freebase.
A more minor differencebetween Yahya et als work and ours is that theirsystem handles SPARQL queries, which do not han-dle aggregation queries like argmax and count.We rely on an existing semantic parsing technologyto learn the language that will translate into suchaggregation queries.
On the other hand, their testquestions involve more conjunctions and complexsemantics than ours.
Developing a dataset with morecomplicated semantics in the queries is part of ourongoing efforts.Goldwasser et als self-supervised, grounded se-mantic parser (2011) relies on co-training betweentwo different semantic parsing models, one being asimple machine-translation model and the other amore complex structured-prediction model.
Theyachieve an impressive F1 of 0.66 on the bench-mark GeoQuery 250 (English) dataset, comparedwith state-of-the-art supervised models that achieve330accuracies around 0.85.
Unlike semantic parsersfor Freebase, Goldwasser et als work assumes thata dataset of unlabeled geography questions alreadyexists, for use in unsupervised training.
FreeParseranswers orthogonal questions: how can we auto-matically acquire a dataset containing the right key-words and phrases, given only the database itself,and how can we ensure that the acquired sentencesare relevant to the relations in the database, with-out manual supervision?
Also, unlike Goldwasseret als experiments, FreeParser is tested in a signif-icantly more challenging setting, with far more do-mains, relations, and entities to be learned.Many supervised learning frameworks have beenapplied, including inductive logic programming(Zelle and Mooney, 1996; Thompson and Mooney,1999; Thompson and Mooney, 2003), support vec-tor machine-based kernel approaches (Kate et al2005; Kate and Mooney, 2006; Kate and Mooney,2007), machine translation-style synchronous gram-mars (Wong and Mooney, 2007), and context-free grammar-based approaches like probabilisticCombinatory Categorial Grammar (Zettlemoyer andCollins, 2005; Zettlemoyer and Collins, 2007;Zettlemoyer and Collins, 2009; Kwiatkowski et al2010; Kwiatkowski et al 2011; Lu et al 2008) anddiscriminative reranking (Ge and Mooney, 2006; Geand Mooney, 2009).
These approaches have yieldedsteady improvements on standard test sets like Geo-Query, but are difficult to apply to Freebase becauseof their built-in assumption that relation symbolswill be observed during training.There has been a recent push towards develop-ing techniques which reduce the annotation cost orthe data complexity of the models.
Models havebeen developed which can handle some ambiguityin terms of which logical form is the correct labelfor each training sentence (Chen et al 2010; Lianget al 2009).
Another set of approaches has investi-gated the case where no logical forms are provided,but instead some form of feedback or response fromthe world is used as evidence for what the correctlogical form must have been (Clarke et al 2010;Liang et al 2011; Artzi and Zettlemoyer, 2011).While such techniques are important, they can onlyreduce the annotation cost per domain, and annota-tion efforts would still be required for each new do-main that contains new database symbols.
The goalof the Freebase semantic parser, in contrast, is toprogram actor roleParty Down Ryan Hansen Kyle Bradwaystructure ownerCN Tower Canada Lands Co.particle sub-particle numberProton Up Quark 2TV domaincast member tableArchitecture domainownership tablePhysics domainparticle compositionFigure 2: Example Freebase relations (tables) and in-stances for three domains.port to all domains automatically, without any newmanually-labeled data per domain.3 FreeParserWe introduce FreeParser, an automated system forconverting natural language sentences into represen-tations of their meaning, where the relation and con-stant symbols for the meaning representations aretaken from Freebase.
FreeParser?s modules are de-scribed below.Sentence Retrieval Engine: This module con-structs keyword queries for sentences that are likelyto express the same relationships as the ones ob-served in Freebase.
It uses an index over a largecorpus, currently a snapshot of English Wikipedia,to identify sentences that match the query.
Each sen-tence, along with the Freebase relation r and queryq that generated it, is then fed to the Auto-Labeler.Auto-Labeler: The Auto-Labeler uses knowledgeof the relation and query for a sentence to automati-cally generate a simple logical form for the sentence.The automatically-labeled sentences are then sent tothe Assessor.Assessor: Using a set of domain-independent fea-tures, the Assessor filters out sentences that are un-suitable for training the semantic parser.
These in-clude sentences that are too long or complex, andsentences where the label from the Auto-Labeler ap-pears to be incorrect.
The sentences that pass thisfilter are added to the training data for FreeParser?ssemantic parser.Open-domain Regularizer: FreeParser relies on anexisting semantic parser, but with a novel regularizerthat helps it learn more appropriate lexical entries fordomain-independent function words.3.1 Sentence Retrieval EngineThe Sentence Retrieval Engine is FreeParser?s open-domain technique for retrieving sentences from a331Input: Freebase relation r, unlabeled corpus COutput: Sent, a set of sentences relevant to r1.
Initialize Sent?
?2.
E ?M random instances from r,each projected onto two random attributes3.
E?
?
N pairs (e1, e2) ?
E with smallestrelation-count(e1, e2)4.
For each (e1, e2) ?
E?:S2?
{sentences in C containing e1 and e2}S1?
{sents containing e2, in docs with e1}Sent?
Sent ?
S1 ?
S25.
Return SentFigure 3: The Sentence Retrieval Engine algorithmcorpus that are relevant to a particular relation in thedatabase.Definition relevance: We say that a sentence s isrelevant to a relation r in Freebase if there existdatabase symbols a1, .
.
.
, ak such that r(a1, .
.
.
, ak)appears in Freebase, and r(a1, .
.
.
, ak) forms part ofthe meaning of s, if the meaning were written in alogical form.For example, for the cast member relation in theFreebase sample shown in Figure 2, the sentenceHansen also played Kyle Bradway on theStarz show Party Down.would be relevant, since the sentence expresses aknown instance of cast member.Of course, the corpus given as input to the Sen-tence Retrieval Engine contains only sentences, notthe logical forms required to determine relevance ac-cording to our definition.
FreeParser?s strategy isto generate keyword queries that list several namedentities that belong to a particular relation.
For in-stance, one query that the Sentence Retrieval Enginemight generate for the cast member relation is?Ryan Hansen Kyle Bradway,?
and another mightbe ?Kyle Bradway Party Down.
?Figure 3 shows the algorithm for the SentenceRetrieval Engine.
In our experiments, we createM = 1000 candidate entity pairs, and we selectN = 50 for queries.
We use the open-source ApacheLucene software for constructing an index over theWikipedia corpus and retrieving relevant sentences.We have found that selecting good queries is infact quite tricky, and our experiments in Section 4.4indicate how badly things can go wrong if it is notdone carefully.
Two important lessons stand out:First, for reasonable recall, we limit queries to justone or two names.
Queries with two names (we callthese 2-entity queries) are very often highly relevant,but there are not enough sentences in Wikipedia thatmatch such queries for all relations.
We thereforealso include queries (which we refer to as 1-entityqueries) that first identify Wikipedia articles for onename from a relation, such as articles that mention?Ryan Hansen?, and then within this resulting docu-ment set, we select sentences that match a secondname, such as ?Party Down?.
The resulting sen-tences therefore always contain one name from therelation, and appear near (within the same documentas) a second name.
These sentences are noisier thansentences selected with two names, but there are farmore matches of such sentences within Wikipedia.The second lesson for sentence retrieval is that weneed to select queries that are not ambiguous.
Forinstance, ?James Cameron Avatar?
retrieves manysentences for the relation directed by.
Un-fortunately, this same query also produces manysentences for the relations written by and wonaward for.
The two entities are not enough to un-ambiguously identify the relationship between them.To combat this problem, FreeParser scores candidatequeries according to relation-count, the number ofrelations in Freebase that hold between the namesin the query, and keeps the top-N least ambiguousqueries, breaking ties randomly.3.2 Auto-LabelerThe Auto-Labeler automatically generates a log-ical form label for every sentence in our dataset.
It provides a form of ?distant supervision?
(Bunescu and Mooney, 2007).
As an example, ifthe sentence above were generated from the castmember relation using the query ?Hansen Brad-way?, and ?Hansen?
and ?Bradway?
are namesfor the database symbols Ryan Hansen andKyle Bradway, then the Auto-Labeler produces?pcast member(p,Ryan Hansen,Kyle Bradway) as a la-bel for the sentence.
The existentially quantified pvariable is necessary to supply enough arguments forthe cast member relation.For the general case, let s be a sentence generatedfrom a relation r of arity n via queries involving theentities e = (e1, .
.
.
, em), and let a = (a1, .
.
.
, am)be the sequence of attribute indices of r such that332Input: auto-labeled sentences S for relation rOutput: S?
?
S, a high-quality training dataset1.
For each (s, l) ?
S:C[s, l]?
complexity-score(s, l)2.
Sort S in descending order according to C3.
T ?
top 100 examples from S4.
CW ?
critical-words(T )5. result?
?6.
For each cw ?
CW :Scw ?
top two (s, l) ?
(S ?
result)such that s contains cwresult?
result ?
Scw7.
Return resultFigure 4: The Assessor algorithmei is a value for r?s attribute ai.
The Auto-Labelerproduces the following logical form for s:?v1, .
.
.
vn s.t.
r(v1, .
.
.
, vn)?va1 = e1 ?
.
.
.
?
vam = em3.3 AssessorAutomatically retrieving training sentences from anunlabeled corpus is a noisy process.
In order toimprove its precision, FreeParser automatically as-sesses whether each sentence from the Sentence Re-trieval Engine is relevant and useful for training.
Itsgoal is to select, for each relation r, a set of sen-tences that are all structurally simple; that include avariety of ways of expressing r in English; and thatdo not include any sentences about other relationsr?.
The full Assessor algorithm is given in Figure 4.The Assessor uses two sources of evidence.
Thefirst is the complexity of the sentence.
After ex-perimenting with numerous features for measur-ing complexity, we have found that a few typesof word counts are the most helpful.
Specifically,the most helpful features include: the number ofwords between two named entities (for two-entityqueries), the number of words before the namedentity that was part of the query (for one-entityqueries), and the total number of non-named-entity,non-stopword words in the sentence.
Our imple-mentation uses a list of 200 common stopwords.
Wetrained a maximum-entropy classifier over the com-plexity features to predict the probability that a sen-tence is simple enough for training.
We manuallylabeled a small sample of 50 sentences, which wereretrieved for relations not found in any of our testsentences.
Sentences that truly expressed the rela-tions in the logical form and no other relation werelabeled as positive, and all others were labeled neg-ative.
The Assessor uses the probability from thisclassifier to rank all sentences for a relation, and se-lects the top 100 sentences for further processing.Complexity statistics alone are not sufficient forselecting good training sentences.
For instance,?
?Being Spiderman is a dream come true,?
says An-drew Garfield?
is a short sentence mentioning twoentities that participate in the acted in relation.However, none of the words in the sentence are par-ticularly indicative of acted in, and if FreeParserwere to use this as a training sentence, it would mostlikely learn a wrong lexical entry.The Assessor additionally weeds out sentenceswhich do not include words strongly associated witha database relation.
Previous work has used statisti-cal machine translation models like IBM Model 1(Brown et al 1993) as a method for initially de-termining which words should be associated withwhich database symbols.
After experimenting withthis and other models, as implemented in GIZA++(Och and Ney, 2003), we have found that a simplerprocedure is more effective for finding the wordswhich are most indicative of a database relation.Taking the set T of top 100 sentences for r from thecomplexity ranker, we preprocess the sentences bydiscarding stopwords and applying stemming.
Wethen count all the remaining word types v ?
Vappearing in T , and rank them by frequency.
Weselect the top K as word stems that are highly in-dicative of relation r; we call these word stems thecritical words for r. For example, for the relationdate founded, this technique produces the crit-ical words ?found,?
?establish,?
and ?settl,?
amongothers.
Sentences which do not contain some vari-ant of one of these critical words are unlikely to begood training examples.
To obtain a set of diversebut relevant sentences, the Assessor selects at mosttwo sentences for each of the K critical words, tak-ing care not to select any sentence twice.
In practicewe found that using more than 2 sentences per criti-cal word has no effect on parsing accuracy, but slowsthe parser training procedure significantly.
We tunedK on development data, and set it to K = 7.333Example lexical entries for ?is?
learned by UBLS|NP : ?x .
religion(x)S|NP |NP : ?x?y .
person(x)?appearance type(x, newscaster)S|NP |NP : ?x?y .
brand(x, y)?company brand relationship(x)Table 2: Overly-specific lexical entries for the functionword ?is,?
as learned by a state-of-the-art PCCG se-mantic parser on our Freebase data set.
All entriesshown have significant positive weight in the learned lex-icon.3.4 Initializing the Lexicon for Learning aSemantic ParserExisting semantic parsing technology requires someinitial knowledge in order to learn a full parser.
Typ-ically, this knowledge includes lexical entries fornamed entities and the database symbols to whichthey correspond, a small number of additional en-tries for important function words, and a procedurefor initializing the weights for learned lexical en-tries.
For instance, UBL uses GIZA++ (Och andNey, 2003) to initialize the weight of learned lexi-cal entries.FreeParser includes initial lexical entries for allnamed entities in our dataset, as well as 29 hand-crafted lexical entries for the words ?who,?
?what,??when,?
and ?where.?
These helped to combatthe problem of learning a semantic parser fromsmall numbers of questions and large numbers ofautomatically-retrieved sentences that were almostall declarative statements rather than questions.
Fol-lowing Kwiatkowski et al these hand-crafted lexi-cal entries are assigned a fixed positive initial weightof 10.
We found the following procedure more effec-tive than GIZA++ for initializing the lexicon weightsfor learned lexical entries in practice: for each crit-ical word and relation pair (v, r) in the sentencesfrom the Assessor, we found a maximum likelihoodestimate of P (v|r), the probability of observing thecritical word v, given that a sentence expresses therelation r. We then created initial learned lexical en-tries that pair v and r, with a weight equal to P (v|r).3.5 New Learning Component for SemanticParsing: An Open-Domain RegularizerTraining FreeParser?s semantic parsing componenton the automatically-labeled sentences, as the sys-tem has been described thus far, results in disap-pointing performance.
This is in large part becausethe UBL semantic parser learns highly domain-specific meanings for function words.
Table 2 showsexample lexical entries learned for the word ?is?.These types of learned meanings are the rule, notthe exception, in the existing semantic parser.
Forsingle-domain tests, they pose no particular diffi-culties, even though intuitively they are bad repre-sentations of the meaning of a function word.
Foropen-domain semantic parsing, however, it becomesnearly impossible to parse sentences correctly ona new domain, if the only meanings for functionwords include relations from training domains.To overcome this problem, we devised a novelregularization technique to encourage the parser tolearn domain-independent meanings for functionwords.
Unlike most of FreeParser, this techniqueis specific to the log-linear CCG semantic pars-ing technique used by Kwiatkowski et alHow-ever, similar mechanisms could potentially be de-vised for other semantic parsing frameworks.
TheKwiatkowski et almodel includes a feature func-tion fw,l for every lexical entry mapping a wordw toa logical form l. Our novel regularizer R(?)
over theparameters ?, which we call an open-domain regu-larizer, penalizes parameters for lexical entries map-ping function words to any domain-specific lambdacalculus expression.
Formally, let F be a set of func-tion words, and P a set of domain-specific predi-cates from Freebase:R(?)
=?w,l{?2w,l if w ?
F ?
?p ?
P.p ?
l0 otherwise.In our implementation, we added all relations inFreebase that are not part of its common domain toP , and collected a set of 282 common English func-tion words for F .4 ExperimentsWe now test FreeParser?s ability to provide semanticparses in domains where it has seen no manually-labeled training data.
We also empirically analyzethe design decisions for FreeParser.4.1 Experimental SetupAll of our experiments are conducted on the Free-base dataset described in Section 2.1.
To create334Q: What is ?Big Daddy?
rated?Movie ratings are stored as special codes in Free-base, and are rarely observed ?as is?
in text.Q: Who is the CEO of Apple?Wikipedia regularly uses the full form ?Chief Ex-ecutive Officer?
; no retrieved sentence had ?CEO?together with the executive?s name and companyname.Q: When did Jack Albertson die?Many sentences contain ?person died on date?, butno retrieved sentence contained the morphologicalvariant ?
(did) die.
?Table 3: Example infeasible questions, and whyFreeParser had difficulty finding sentences in Wikipediathat contain the relevant keywords from the question.manually-labeled training and test sets for domainadaptation, we divide the dataset into three groupsof nearly-equal size by placing similar domains to-gether in the same group.
No domain has ques-tions in more than one group.
We then perform 3-fold cross-validation across these three groups.
Werun FreeParser?s Sentence Retrieval Engine, Auto-Labeler, and Assessor for all relations that appearin our dataset, and we include the automatically-labeled data in the training data.4.2 Testing the Sentence Retrieval Engine179 of the 403 questions (44%) in our dataset in-cluded critical words which could not be found us-ing the Sentence Retrieval Engine?s queries overWikipedia.
Table 3 lists example infeasible ques-tions.
One obvious improvement is to open the re-trieval engine to sentences from the Web, for greaterrecall; this is an important task for future work.
Fornow, this is FreeParser?s biggest source of errors.However, note that without this component, the se-mantic parser parses none of the test data correctly.4.3 Open-domain semantic parsing testsWe now turn to an experiment that assesses the fullFreeParser system on open-domain semantic pars-ing.
For the current experiments, we concentrateon the 224 questions (56% of the full dataset) forwhich all of the words (except named entities) couldbe found in at least one of the auto-labeled sentencesreturned by the Sentence Retrieval Engine.
We callthese 224 questions the feasible questions.
For theremaining infeasible questions, FreeParser almostnever produces a correct logical form.Figure 5 shows FreeParser?s performance on fea-sible questions in all test domains, as well as for eachof the seven most-common test domains.
FreeParserperforms quite well, achieving an overall F1 of0.71, which represents a huge improvement over theF1 of 0.0 for the supervised UBL semantic parserin a domain adaptation setting.
An unsupervisedparser, which uses only the initial lexical entriesfrom FreeParser and the auto-labeled training data,achieves an F1 of 0.43.
Precision and recall differ-ences between FreeParser and these two baselinesare statistically significant (p < 0.01) using Fisher?sexact test.
Including both feasible and infeasiblequestions, FreeParser?s F1 is 0.37 because of the lowrecall on infeasible questions, but as more unlabeledtext becomes available to FreeParser, it should havefewer and fewer infeasible questions.4.4 Testing Critical Design ComponentsWe tested FreeParser with different choices for keyparts of the design, to measure their impact.
Ta-ble 4 presents precision, recall, and F1 scores forfour variations of FreeParser, where each variationis missing a critical component of the design.
In thefirst variation, the Sentence Retrieval Engine onlyissues two-entity queries; it is missing the ability toissue the less-precise single-entity queries.
In thesecond variation, the Assessor uses only the criticalwords to select sentences for training; it is missingthe ability to rank sentences based on their complex-ity.
In the third variation, the Assessor selects thetop 2K, or 14, sentences based on the complexityranking; it ignores the critical words test.
Finally,the last variation shows FreeParser?s performancewhen UBL?s training procedure has not been mod-ified with the open-domain regularizer.Deleting any one of these critical design ele-ments substantially degrades FreeParser?s perfor-mance, but the 1-entity queries appear to be the mostcritical design choice, followed by the critical wordstest and open-domain regularizer.
Removing the 1-entity queries surprisingly hurts both precision andrecall.
The 2-entity queries do tend to retrieve bet-ter sentences on average than 1-entity queries, butbecause they retrieve so few, the Assessor has moredifficulty selecting good critical words.Error analysis showed that incorrect or missing335.72 .68.29.82.93.57.89.27.70 .68.27.82 .81.53.67.27.71 .68.28.82.87.55.76.27.00.20.40.60.801.00all (224) film (31) tv (22) location (22) medicine(16) business (15) people (12) award (11)Open-Domain Semantic Parsing on Feasible Questionsprecision recall f1Figure 5: FreeParser achieves an overall F1 of 0.71, in a test where every correct logical form has some elementnever seen in manually-labeled training data.
Results across different domains vary, but FreeParser performs wellin a variety of domains.
Numbers next to domain labels indicate the number of feasible test questions.
Results for?all?
domains are the micro-average across our three cross-validation folds.Model P R F1?1-entity queries .29 .29 .29?complexity ranking .59 .53 .56?critical words test .47 .41 .44?open-domain regul.
.50 .45 .47FreeParser .72 .70 .71Table 4: FreeParser compared with variations that aremissing critical design components.
All precision andrecall differences between the full system and its varia-tions are statistically significant (p < 0.01) using a two-tailed Fisher?s exact test.lexical entries for critical words were responsible formost (68%) of the 67 incorrect or missing parses forfeasible test questions.
Many of the incorrect en-tries mapped critical words like ?directed?
to relatedbut incorrect predicates, like written by.
Miss-ing lexical entries were often because the Assessorincorrectly weeded out good auto-labeled examples.The remaining 32% of the errors were mostly due tocomplex syntax in the questions, or vague questionsthat require significant reasoning to come up with avalid interpretation.5 Conclusion and Future WorkMost work on semantic parsing focuses on improv-ing parser accuracy on a small number of relations ina single domain.
FreeParser is an exploration of thepossibility of automated semantic parsing for arbi-trary domains.
Among the lessons from our experi-ence in designing FreeParser, these stand out: First,finding training sentences that cover all of the dif-ferent ways a person may refer to a database ele-ment is difficult, and requires carefully constructedretrieval mechanisms for sufficient recall.
Second,simple measures of sentence complexity and cooc-currence statistics are effective techniques for iden-tifying good training sentences.
And third, standardsemantic parsing algorithms require modification foropen-domain semantic parsing, to enforce that func-tion words are not mapped to domain-specific logi-cal forms.
We report results that help in understand-ing FreeParser?s current strengths and weaknesses,and that also serve as a baseline for future open-domain semantic parsers.Significant work remains: ideally, a system wouldbe able to incorporate relational data from multi-ple schemas, and could leverage much larger cor-pora for learning alignments.
Also, FreeParser cur-rently maps English words only to individual Free-base symbols; more sophisticated algorithms andrepresentations are necessary for learning how tomap to conjunctions, disjunctions, and more com-plex combinations of Freebase symbols.AcknowledgementsThis material is based upon work supported by theNational Science Foundation under Grant No.
IIS-1218692.
We wish to thank Sophia Kohlhaas andRagine Williams for providing data for the project.336ReferencesYoav Artzi and Luke Zettlemoyer.
2011.
BootstrappingSemantic Parsers from Conversations.
In Proceedingsof the Conference on Empirical Methods in NaturalLanguage Processing (EMNLP).P.
F. Brown, S. D. Pietra, V. J. D. Pietra, and R. L. Mercer.1993.
The mathematics of statistical machine transla-tion: Parameter estimation.
Computational Linguis-tics, 19(2):263?311.Razvan Bunescu and Raymond Mooney.
2007.
Learningto extract relations from the web using minimal super-vision.
In Proceedings of the 45th Annual Meeting ofthe Association for Computational Linguistics (ACL-07).David L. Chen, Joohyun Kim, and Raymond J. Mooney.2010.
Training a Multilingual Sportscaster: UsingPerceptual Context to Learn Language.
Journal of Ar-tificial Intelligence Research, 37:397?435.Stephen Clark and James R. Curran.
2007.
Wide-coverage efficient statistical parsing with ccg and log-linear models.
Computational Linguistics, 33(4):493?552.J.
Clarke, D. Goldwasser, M. Chang, and D. Roth.2010.
Driving semantic parsing from the world?s re-sponse.
In Computational Natural Language Learn-ing (CoNLL).Ruifang Ge and Raymond J. Mooney.
2006.
Discrimina-tive Reranking for Semantic Parsing.
In Proceedingsof the 21st International Conference on ComputationalLinguistics and 44th Annual Meeting of the Associ-ation for Computational Linguistics (COLING/ACL-06).Ruifang Ge and Raymond J. Mooney.
2009.
Learning aCompositional Semantic Parser using an Existing Syn-tactic Parser.
In Joint Conference of the 47th AnnualMeeting of the Association for Computational Linguis-tics and the 4th International Joint Conference on Nat-ural Language Processing of the Asian Federation ofNatural Language Processing (ACL-IJCNLP 2009).D.
Goldwasser, R. Reichart, J. Clarke, and D. Roth.2011.
Confidence driven unsupervised semantic pars-ing.
In Association for Computational Linguistics(ACL).Johannes Hoffart, Fabian M. Suchanek, Klaus Berberich,and Gerhard Weikum.
2013.
YAGO2: A Spa-tially and Temporally Enhanced Knowledge Base fromWikipedia.
Artificial Intelligence, 194:28?61, Jan-uary.Fei Huang, Alexander Yates, Arun Ahuja, and DougDowney.
2011.
Language Models as Representationsfor Weakly Supervised NLP Tasks.
In Conference onComputational Natural Language Learning (CoNLL).Rohit J. Kate and Raymond J. Mooney.
2006.
UsingString-Kernels for Learning Semantic Parsers.
In Pro-ceedings of the 21st International Conference on Com-putational Linguistics and the 44th annual meeting ofthe ACL.Rohit J. Kate and Raymond J. Mooney.
2007.
Semi-Supervised Learning for Semantic Parsing using Sup-port Vector Machines.
In Proceedings of the HumanLanguage Technology Conference of the North Ameri-can Chapter of the Association for Computational Lin-guistics, Short Papers (NAACL/HLT-2007).Rohit J. Kate, Yuk Wah Wong, and Raymond J. Mooney.2005.
Learning to Transform Natural to Formal Lan-guages.
In Proceedings of the Twentieth NationalConference on Artificial Intelligence (AAAI-05).Jayant Krishnamurthy and Tom Mitchell.
2012.
WeaklySupervised Training of Semantic Parsers.
In Proceed-ings of the Conference on Empirical Methods in Natu-ral Language Processing (EMNLP).Tom Kwiatkowski, Luke Zettlemoyer, Sharon Goldwa-ter, and Mark Steedman.
2010.
Inducing Probabilis-tic CCG Grammars from Logical Form with Higher-order Unification.
In Proceedings of the Conferenceon Empirical Methods in Natural Language Process-ing (EMNLP).Tom Kwiatkowski, Luke Zettlemoyer, Sharon Goldwater,and Mark Steedman.
2011.
Lexical Generalizationin CCG Grammar Induction for Semantic Parsing.
InProceedings of the Conference on Empirical Methodsin Natural Language Processing (EMNLP).P.
Liang, M. I. Jordan, and D. Klein.
2009.
Learningsemantic correspondences with less supervision.
InAssociation for Computational Linguistics and Inter-national Joint Conference on Natural Language Pro-cessing (ACL-IJCNLP).P.
Liang, M. I. Jordan, and D. Klein.
2011.
Learningdependency-based compositional semantics.
In Asso-ciation for Computational Linguistics (ACL).Wei Lu, Hwee Tou Ng, Wee Sun Lee, and Luke S. Zettle-moyer.
2008.
A Generative Model for Parsing NaturalLanguage to Meaning Representations.
In Proceed-ings of The Conference on Empirical Methods in Nat-ural Language Processing (EMNLP).Franz Josef Och and Hermann Ney.
2003.
A system-atic comparison of various statistical alignment mod-els.
Computational Linguistics, 29(1):19?51.C.A.
Thompson and R.J. Mooney.
1999.
Automatic con-struction of semantic lexicons for learning natural lan-guage interfaces.
In Proc.
16th National Conferenceon Artificial Intelligence (AAAI-99), pages 487?493.Cynthia A. Thompson and Raymond J. Mooney.
2003.Acquiring Word-Meaning Mappings for Natural Lan-guage Interfaces.
Journal of Artificial Intelligence Re-search (JAIR), 18:1?44.337Y.
Wilks, D. Fass, C. Guo, J. MacDonald, T. Plate, andB.
Slator.
1990.
Providing Machine Tractable Dictio-nary Tools.
MIT Press.Yuk Wah Wong and Raymond J. Mooney.
2007.
Learn-ing Synchronous Grammars for Semantic Parsing withLambda Calculus.
In Proceedings of the 45th AnnualMeeting of the Association for Computational Linguis-tics (ACL-2007).Mohamed Yahya, Klaus Berberich, Shady Elbassuoni,Maya Ramanath, Volker Tresp, and Gerhard Weikum.2012.
Natural Language Questions for the Web ofData.
In Proceedings of the Conference on EmpiricalMethods in Natural Language Processing (EMNLP).John M. Zelle and Raymond J. Mooney.
1996.
Learn-ing to Parse Database Queries using Inductive LogicProgramming.
In AAAI/IAAI, pages 1050?1055.Luke S. Zettlemoyer and Michael Collins.
2005.
Learn-ing to Map Sentences to Logical Form: StructuredClassification with Probabilistic Categorial Grammars.In Proceedings of the Twenty First Conference on Un-certainty in Artificial Intelligence (UAI).Luke S. Zettlemoyer and Michael Collins.
2007.
On-line Learning of Relaxed CCG Grammars for Parsingto Logical Form.
In Proceedings of the Joint Confer-ence on Empirical Methods in Natural Language Pro-cessing and Computational Natural Language Learn-ing (EMNLP-CoNLL).Luke S. Zettlemoyer and Michael Collins.
2009.
Learn-ing Context-dependent Mappings from Sentences toLogical Form.
In Proceedings of the Joint Conferenceof the Association for Computational Linguistics andInternational Joint Conference on Natural LanguageProcessing (ACL-IJCNLP).338
