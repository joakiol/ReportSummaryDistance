Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 238?247,Singapore, 6-7 August 2009.c?2009 ACL and AFNLPEntity Extraction via Ensemble SemanticsMarco PennacchiottiYahoo!
LabsSunnyvale, CA, 94089pennac@yahoo-inc.comPatrick PantelYahoo!
LabsSunnyvale, CA, 94089ppantel@yahoo-inc.comAbstractCombining information extraction sys-tems yields significantly higher quality re-sources than each system in isolation.
Inthis paper, we generalize such a mixing ofsources and features in a framework calledEnsemble Semantics.
We show very largegains in entity extraction by combiningstate-of-the-art distributional and pattern-based systems with a large set of fea-tures from a webcrawl, query logs, andWikipedia.
Experimental results on a web-scale extraction of actors, athletes and mu-sicians show significantly higher mean av-erage precision scores (29% gain) com-pared with the current state of the art.1 IntroductionMounting evidence shows that combining infor-mation sources and information extraction algo-rithms leads to improvements in several taskssuch as fact extraction (Pas?ca et al, 2006), open-domain IE (Talukdar et al, 2008), and entailmentrule acquisition (Mirkin et al, 2006).
In this paper,we show large gains in entity extraction by com-bining state-of-the-art distributional and pattern-based systems with a large set of features froma 600 million document webcrawl, one year ofquery logs, and a snapshot of Wikipedia.
Further,we generalize such a mixing of sources and fea-tures in a framework called Ensemble Semantics.Distributional and pattern-based extraction al-gorithms capture aspects of paradigmatic and syn-tagmatic dimensions of semantics, respectively,and are believed to be quite complementary.
Pas?caet al (2006) showed that filtering facts, extractedby a pattern-based system, according to their ar-guments?
distributional similarity with seed factsyielded large precision gains.
Mirkin et al (2006)showed similar gains on the task of acquiring lex-ical entailment rules by exploring a supervisedcombination of distributional and pattern-based al-gorithms using an ML-based SVM classifier.This paper builds on the above work, by study-ing the impact of various sources of features exter-nal to distributional and pattern-based algorithms,on the task of entity extraction.
Mirkin et al?s re-sults are corroborated on this task and large andsignificant gains over this baseline are obtainedby incorporating 402 features from a webcrawl,query logs and Wikipedia.
We extracted candidateentities for the classes Actors, Athletes and Mu-sicians from a webcrawl using a variant of Pas?caet al?s (2006) pattern-based engine and Pantel etal.
?s (2009) distributional extraction system.
Agradient boosted decision tree is used to learn a re-gression function over the feature space for rank-ing the candidate entities.
Experimental resultsshow 29% gains (19% nominal) in mean averageprecision over Mirkin et al?s method and 34%gains (22% nominal) in mean average precisionover an unsupervised baseline similar to Pas?ca etal.
?s method.
Below we summarize the contribu-tions of this paper:?
We explore the hypothesis that although dis-tributional and pattern-based algorithms arecomplementary, they do not exhaust the se-mantic space; other sources of evidence canbe leveraged to better combine them;?
We model the mixing of knowledge sourcesand features in a novel and general informa-tion extraction framework called EnsembleSemantics; and?
Experiments over an entity extraction taskshow that our model achieves large and sig-nificant gains over state-of-the-art extractors.A detailed analysis of feature correlationsand interactions shows that query log and we-bcrawl features yield the highest gains, buteasily accessible Wikipedia features also im-prove over current state-of-the-art systems.238Figure 1: The Ensemble Semantics framework for information extraction.The remainder of this paper is organized as fol-lows.
In the next section, we present our EnsembleSemantics framework and outline how various in-formation extraction systems can be cast into theframework.
Section 3 then presents our entity ex-traction system as an instance of Ensemble Se-mantics, comparing and contrasting it with previ-ous information extraction systems.
Our experi-mental methodology and analysis is described inSection 4 and shows empirical evidence that ourextractor significantly outperforms prior art.
Fi-nally, Section 5 concludes with a discussion andfuture work.2 Ensemble SemanticsEnsemble Semantics (ES) is a general frameworkfor modeling information extraction algorithmsthat combine multiple sources of information andmultiple extractors.
The ES framework allows to:?
Represent multiple sources of knowledge andmultiple extractors of that knowledge;?
Represent multiple sources of features;?
Integrate both rule-based and ML-basedknowledge ranking algorithms; and?
Model previous information extraction sys-tems (i.e., backwards compatibility).2.1 ES FrameworkES can be instantiated to extract various types ofknowledge such as entities, facts, and lexical en-tailment rules.
It can also be used to better under-stand the commonalities and differences betweenexisting information extraction systems.After presenting the framework in the next sec-tion, Section 2.2 shows how previous informationextraction algorithms can be cast into ES.
In Sec-tion 3 we describe our novel entity extraction al-gorithm based on ES.The ES framework is illustrated in Figure 1.
Itdecomposes the process of information extractioninto the following components:Sources (S): textual repositories of information,either structured (e.g., a database such as DBpe-dia), semi-structured (e.g., Wikipedia Infoboxes orHTML tables) or unstructured (e.g., news articlesor a webcrawl).Knowledge Extractors (KE): algorithms re-sponsible for extracting candidate instances suchas entities or facts.
Examples include fact extrac-tion systems such as (Cafarella et al, 2005) andentity extraction systems such as (Pas?ca, 2007).Feature Generators (FG): methods that extractevidence (features) of knowledge in order to de-cide which candidate instances extracted fromKEs are correct.
Examples include capitalizationfeatures for named entity extractors, and the dis-tributional similarity matrix used in (Pas?ca et al,2006) for filtering facts.Aggregator (A).
A module collecting and as-sembling the instances coming from the differentextractors.
This module keeps the footprint ofeach instance, i.e.
the number and the type of theKEs that extracted the instance.
This informationcan be used by the Ranker module to build a rank-ing strategy, as described below.Ranker (R): a module for ranking the knowl-edge instances returned from KEs using the fea-tures generated by FGs.
Ranking algorithms maybe rule-based (e.g., the one using a threshold ondistributional similarity in (Pas?ca et al, 2006)) orML-based (e.g., the SVM model in (Mirkin et al,2006) for combining pattern-based and distribu-tional features).239The Ranker is composed of two sub-modules:the Modeler and the Decoder.
The Modeler is re-sponsible for creating the model which ranks thecandidate instances.
The Decoder collects the can-didate instances from the Aggregator, and appliesthe model to produce the final ranking.In rule-based systems, the Modeler correspondsto a set of manually crafted or automatically in-duced rules operating on the features (e.g.
a com-bination of thresholds).
In ML-based systems, it isan actual machine learning algorithm, that takes asinput a set of labeled training instances, and buildsthe model according to their features.
Training in-stances can be obtained as a subset of those col-lected by the Aggregator, or from some exter-nal resource.
In many cases, training instancesare manually labeled by human experts, througha long and costly editorial process.Information sources (S) serve as inputs to thesystem.
Some sources will serve as sources forknowledge extractors to generate candidate in-stances, some will serve as sources for feature gen-erators to generate features or evidence of knowl-edge, and some will serve as both.2.2 Related WorkTo date, most information extraction systems relyon a model composed of a single source S, a singleextractor KE and a single feature generator FG.For example, many classic relation extraction sys-tems (Hearst, 1992; Riloff and Jones, 1999; Pan-tel and Pennacchiotti, 2006; Pas?ca et al, 2006)are based on a single pattern-based extractor KE,which is seeded with a set of patterns or instancesfor a given relation (e.g.
the pattern ?X starred inY?
for the act-in relation).
The extractor then itera-tively extracts new instances until a stop conditionis met.
The resulting extractor scores are proposedby FG as a feature.
The Ranker simply consistsof a sorting function on the feature from FG.Systems such as the above that do not consistof multiple sources, knowledge extractors or fea-ture generators are not considered Ensemble Se-mantics models, even though they can be cast intothe framework.
Recently, some researchers haveexplored more complex systems, having multiplesources, extractors and feature generators.
Belowwe show examples and describe how they map asEnsemble Semantics systems.
We use this charac-terization to clearly outline how our proposed en-tity extraction system, proposed in Section 3, dif-fers from previous work.Talukdar et al (2008) present a weakly-supervised system for extracting large sets ofclass-instance pairs using two knowledge extrac-tors: a pattern-based extractor supported by distri-butional evidence, which harvests candidate pairsfrom a Web corpus; and a table extractor that har-vests candidates from Web tables.
The Rankeruses graph random walks to combine the informa-tion of the two extractors and output the final list.The authors show large improvements in coveragewith little precision loss.Mirkin et al (2006) introduce a machine learn-ing system for extracting lists of lexical entail-ments (e.g.
?government??
?organization?).
Theyrely on two knowledge extractors, operating on asame large textual source: a pattern-based extrac-tor, leveraging the Hearst (1992) is-a patterns; anda distributional extractor applied to a set of entail-ment seeds.
Candidate instances are passed to anSVM Ranker, which uses features stemming fromthe two extractors, to decide which instances areoutput in the final list.
The authors report a +9%increase in F-measure over a rule-based systemthat takes the union of the instances extracted bythe two modules.Other examples include the system fortaxonomic-relation extraction by Cimiano etal.
(2005), using a pool of feature genera-tors based on pattern-based, distributionaland WordNet techniques; and Pas?ca and VanDurme?s (2008) system that uses a Web corpusand query logs to extract semantic classes andtheir attributes.Similarly to these methods, our proposed entityextractor (Section 3) utilizes multiple sources andextractors.
A key difference of our method lies inthe Feature Generator module.
We propose sev-eral generators resulting in 402 features extractedfrom Web pages, query logs and Wikipedia arti-cles.
The use of these features results in dramaticperformance improvements, reported in Section 4.3 ES for Entity ExtractionEntity extraction is a fundamental task in NLPresponsible for extracting instances of semanticclasses (e.g., ?Brad Pitt?
and ?Tom Hanks?
are in-stances of the class Actors).
It forms a build-ing block for various NLP tasks such as on-tology learning (Cimiano and Staab, 2004) andco-reference resolution (Mc Carthy and Lehn-240Family Type FeaturesWeb (w) Frequency (wF ) term frequency; document frequency; term frequency as noun phrasePattern (wP ) confidence score returned by KEpat; pmi with the 100 most reliable patternsused by KEpatDistributional (wD) distributional similarity with the centroid in KEdis; distributional similaritieswith each seed in STermness (wT ) ratio between term frequency as noun phrase and term frequency; pmi betweeninternal tokens of the instance; capitalization ratioQuery log (q) Frequency (qF ) number of queries matching the instance; number of queries containing the in-stanceCo-occurrence (qC) query log pmi with any seed in SPattern (qP ) pmi with a set of trigger words T (i.e., the 10 words in the query logs withhighest pmi with S)Distributional (qD) distributional similarity with S (vector coordinates consist of the instance?s pmiwith the words in T )Termness (qT ) ratio between the two frequency features FWeb table (t) Frequency (tF ) table frequencyCo-occurrence (tC) table pmi with S; table pmi with any seed in SWikipedia (k) Frequency (kF ) term frequencyCo-occurrence (kC) pmi with any seed in SDistributional (kD) distributional similarity with STable 1: Feature space describing each candidate instance (S indicates the set of seeds for a given class).ert, 2005).
Search engines such as Yahoo, Live,and Google collect large sets of entities (Pas?ca,2007; Chaudhuri et al, 2009) to better interpretqueries (Tan and Peng, 2006), to improve querysuggestions (Cao et al, 2008) and to understandquery intents (Hu et al, 2009).
Entity extractiondiffers from the similar task of named entity ex-traction, in that classes are more fine-grained andpossibly overlapping.Below, we propose a new method for entity ex-traction built on the ES framework (Section 3.1).Then, we comment on related work in entity ex-traction (Section 3.2).3.1 ES Entity Extraction ModelIn this section, we propose a novel entity ex-traction model following the Ensemble Semanticsframework presented in Section 2.
The sources ofour systems can come from any textual corpus.
Inour experiments (described in Section 4.1), we ex-tracted entities from a large crawl of the Web, andgenerated features from this crawl as well as querylogs and Wikipedia.3.1.1 Knowledge extractorsOur system relies on two knowledge extractors:one pattern-based and the other distributional.Pattern-based extractor (KEpat).
We reimple-mented Pas?ca et al?s (2006) state-of-the-art web-scale fact extractor, which, given seed instances ofa binary relation, finds instances of that relation.We extract entities of a class, such as Actors, byinstantiating typical relations involving that classsuch as act-in(Actor, Movie).
We instantiate suchrelations instead of the classical is-a patterns sincethese have been shown to bring in too many falsepositives, see (Pantel and Pennacchiotti, 2006) fora discussion of such generic patterns.
The extrac-tor?s confidence score for each instance is used bythe Ranker to score the entities being extracted.Section 4.1 lists the system parameters we used inour experiments.Distributional extractor (KEdis).
We use Pan-tel et al?s (2009) distributional entity extractor.For each noun in our source corpus, we build acontext vector consisting of the noun chunks pre-ceding and following the target noun, scored us-ing pointwise mutual information (pmi).
Givena small set of seed entities S of a class, the ex-tractor computes the centroid of the seeds?
contextvectors as a geometric mean, and then returns allnouns whose similarity with the centroid exceeds athreshold ?
(using the cosine measure between thecontext vectors).
Full algorithmic details are pre-sented in (Pantel et al, 2009).
Section 4.1 lists thethreshold and text preprocessing algorithms usedin our experiments.The Aggregator simply takes a union of the en-tities discovered by the two extractors.3.1.2 Feature generatorsOur model includes four feature generators,which compute a total of 402 features (full setdescribed in Table 1).
Each generator extractsfrom a specific source a feature family, as follows:?
Web (w): a body of 600 million documents241crawled from the Web at Yahoo!
in 2008;?
Query logs (q): one year of web searchqueries issued to the Yahoo!
search engine;?
Web tables: all HTML inner tables extractedfrom the above Web source; and?
Wikipedia: an official Wikipedia dump fromFebruary 2008, consisting of about 2 millionarticles.Feature families are further subclassified intofive types: frequency (F) (frequency-based fea-tures); co-occurrence (C) (features capturing firstorder co-occurrences between an instance andclass seeds); distributional (D) (features based onthe distributional similarity between an instanceand class seeds); pattern (P) (features indicat-ing class-specific lexical pattern matches); andtermness (T) (features used to distinguish well-formed terms such as ?Brad Pitt?
from ill-formedones such as ?with Brad Pitt?).
The seeds S usedin many of the feature families are the same seedsused by the KEpatextractor, described in Sec-tion 3.1.1.The different seed families are designed to cap-ture different semantic aspects: paradigmatic (D),syntagmatic (C and P), popularity (F), and termcohesiveness (T).3.1.3 ML-based RankerOur Modeler adopts a supervised ML regressionmodel.
Specifically, we use a Gradient BoostedDecision Tree regression model - GBDT (Fried-man, 2001), which consists of an ensemble of de-cision trees, fitted in a forward step-wise mannerto current residuals.
Friedman (2001) shows thatby drastically easing the problem of overfitting ontraining data (which is common in boosting al-gorithms), GDBT competes with state-of-the-artmachine learning algorithms such as SVM (Fried-man, 2006) with much smaller resulting modelsand faster decoding time.
The model is trainedon a manually annotated random sample of enti-ties taken from the Aggregator, using the featuresgenerated by the four generators presented in Sec-tion 3.1.2.
The Decoder then ranks each entity ac-cording to the trained model.3.2 Related WorkEntity extraction systems follow two main ap-proaches: pattern-based and distributional.
Thepattern-based approach leverages lexico-syntacticpatterns to extract instances of a given class.
Mostcommonly used are is-a pattern families such asthose first proposed by Hearst (1992) (e.g., ?Y suchas X?
for matching ?actors such as Brad Pitt?
).Minimal supervision is used in the form of smallsets of manually provided seed patterns or seed in-stances.
This approach is very common in boththe NLP and Semantic Web communities (Cimi-ano and Staab, 2004; Cafarella et al, 2005; Panteland Pennacchiotti, 2006; Pas?ca et al, 2006).The distributional approach uses contextual ev-idence to model the instances of a given class,following the distributional hypothesis (Harris,1964).
Weakly supervised, these methods take asmall set of seed instances (or the class label) andextract new instances from noun phrases that aremost similar to the seeds (i.e., that share similarcontexts).
Following Lin (1998), example sys-tems include Fleischman and Hovy (2002), Cimi-ano and Volker (2005), Tanev and Magnini (2006),and Pantel et al (2009).4 Experimental EvaluationThis section reports our experiments, showing theeffectiveness of our entity extraction system andthe importance of our different feature families.4.1 Experimental SetupEvaluated classes.
We evaluate our system overthree classes: Actors (movie, tv and stage ac-tors); Athletes (professional and amateur); Musi-cians (singers, musicians, composers, bands, andorchestras)System setup.
We instantiated our knowledgeextractors, KEpatand KEdisfrom Section 3.1.1,over our Web crawl of 600 million documents (seeSection 3.1.2).
The documents were preprocessedusing Brill?s POS-tagger (Brill, 1995) and the Ab-ney?s chunker (Abney, 1991).
ForKEdis, contextvectors are extracted for noun phrases recognizedas NP-chunks with removed modifiers.
The vec-tor space includes the 250M most frequent nounchunks in the corpus.
KEdisreturns as instancesall noun phrases having a similarity with the seeds?centroid above ?
= 0.0051.
The sets of seeds Sfor KEdisinclude 10, 24 and 10 manually choseninstances for respectively the Actors, Athletes andMusicians classes2.
The sets of seedsP forKEpat1Experimentally set on an independent development set.2The higher number of seeds for Athletes is chosen tocover different sports.242Dataset Actors Athletes MusiciansKEpat58,005 40,816 125,657KEdis72,659 24,380 24,593KEpat?KEdis113,245 61,709 142,694KEpat?KEdis17,419 3,487 7,556R 500 500 500P=80 P=258 P=134N=420 N=242 N=366Table 2: Number of extracted instances and thesample sizes (P and N indicate positive and neg-ative annotations).include 11, 8 and 9 pairs respectively for the Ac-tors (relation acts-in), Athletes (relation plays-for)and Musicians (relation part-of-band) classes.
Ta-ble 6 lists all seeds for both KEdisand KEpat.The GBDT ranker uses an ensemble of 300 trees.3Goldset Preparation.
The number of instancesextracted by KEpatand KEdisfor each classis reported in Table 2.
For each class, we ex-tract a random sample R of 500 instances fromKEpat?KEdis.
A pool of 10 paid expert editorsannotated the instances of each class inR as posi-tive or negative.
Inter-annotator overlap was 0.88.Uncertain instances were manually adjudicated bya separate paid expert editor, yielding a gold stan-dard dataset for each class.Evaluation Metrics.
Entity extraction perfor-mance is evaluated using the average precision(AP) statistic, a standard information retrievalmeasure for evaluating ranking algorithms, de-fined as:AP (L) =?|L|i=1P (i) ?
corr(i)?|L|i=1corr(i)(1)where L is a ranked list produced by an extractor,P (i) is the precision of L at rank i, and corr(i) is 1if the instance at rank i is correct, and 0 otherwise.AP is computed overR for each class.We also evaluate the coverage, i.e.
the percent-age of instances extracted by a system wrt thoseextracted by all systems.In order to accurately compute statistical signif-icance, our experiments are performed using 10-fold cross validation.Baselines and comparisons.
We compare ourproposed ES entity extractor, using different fea-ture configurations, with state-of-the-art systems(referred to as baselines B* below):3GBDT model parameters were experimentally set on anindependent development set as follows: trees=300, shrink-age=0.01, max nodes per tree=12, sample rate=0.5.System Actors Athletes MusiciansAP Cov AP Cov AP CovB1 0.729 51.2% 0.616 66.1% 0.570 88.1%B2 0.618 64.1% 0.687 39.5% 0.681 17.2%B3 0.676 100% 0.664 100% 0.576 100%B4 0.715 100% 0.697 100% 0.579 100%ES-all 0.860?
100% 0.915?
100% 0.788?
100%Table 3: Average precision (AP) and coverage(Cov) results for our proposed system ES-all andthe baselines.
?
indicates AP statistical signifi-cance at the 0.95 level wrt all baselines.ES-all.
Our ES system, usingKEpatandKEdis,the full set of feature families described inSection 3.1.2, and the GBDT ranker.B1.
KEpatalone, a state-of-the-art pattern-based extractor reimplementing (Pas?ca et al,2006), where the Ranker assigns scores to in-stances using the confidence score returnedby KEpat.B2.
KEdisalone, a state-of-the-art distributionalsystem implementing (Pantel et al, 2009),where the Ranker assigns scores to instancesusing the similarity score returned by KEdisalone.B3.
A rule-based ES system, combining B1 andB2.
This system uses bothKEpatandKEdisas extractors, and a Ranker that assignsscores to instances according to the sum oftheir normalized confidence scores.B4.
A state-of-the-art machine learning systembased on (Mirkin et al, 2006).
This ESsystem uses KEpatand KEdisas extractors.The Ranker is a GBDT regression model,using the full sets of features derived fromthe two extractors, i.e., wP and wD (seeTable 1).
GBDT parameters are set as for ourproposed ES-all system.4.2 Experimental ResultsTable 3 summarizes the average-precision (AP)and coverage results for our ES-all system and thebaselines.
Figure 2 reports the precision at eachrank for the Athletes class (the other two classesfollow similar trends).
Table 6 lists the top-10 en-tities discovered for each class on one test fold.ES-all outperforms all baselines in AP (all resultsare statistically significant at the 0.95 level), offer-ing at the same time full coverage4.4Recall that coverage is reported relative to all instancesretrieved by extractors KEpatand KEdis.243Figure 2: Precision at rank for the different sys-tems on the Athletes class.Our simple rule-based combination baseline,B3, leads to a large increase in coverage wrt the in-dividual extractors alone (B1 and B2) without sig-nificant impact on precision.
The supervised ML-based combination baseline (B4) consistently im-proves AP across classes wrt the rule-based com-bination (B3), but without statistical significance.These results corroborate those found in (Mirkin etal., 2006), where this ML-based combination wasreported to be significantly better than a rule-basedone on the task of lexical entailment acquisition.The large set of features adopted in ES-all ac-counts for a dramatic improvement in AP, indicat-ing that existing state-of-the-art systems for entityextraction (reflected by our baselines strategies)are not making use of enough semantic cues.
Theadoption of evidence other than distributional andpattern-based, such as features coming from webdocuments, HTML tables and query logs, is heredemonstrated to be highly valuable.The above empirical claim can be grounded andcorroborated by a deeper semantic analysis.
Froma semantic perspective, the above results translatein the observation that distributional and pattern-based evidence do not completely capture all se-mantic aspects of entities.
Other evidence, such aspopularity, term cohesiveness and co-occurrencescapture other aspects.
For instance, in one of ourActors folds, the B3 system ranks the incorrect in-stance ?Tom Sellek?
(a misspelling of ?Tom Sel-leck?)
in 9thposition (out of 142), while ES-alllowers it to the 33rdposition, by relying on table-based features (intuitively, tables contain muchfewer misspelling than running text).
Other thanmisspellings, ES-all fixes errors that are either typ-ical of distributional approaches, such as the in-clusion of instances of other classes (e.g.
themovie ?Someone Like You?
often appears in con-texts similar to those of actors); errors typicalof pattern-based approaches, such as incorrect in-System AP MAPActors Athletes MusiciansB3 0.676 0.664 0.576 0.639B4 0.715 0.697 0.579 0.664B4+w 0.813?0.908?0.724?0.815?B4+q 0.815?0.905?0.743?0.821?B4+t 0.784?0.825?0.727?0.779?B4+k 0.776?0.825?0.624 0.741?B4+w+q 0.835?0.915?0.758?0.836?B4+w+t 0.840?0.906?0.774?0.840?B4+w+k 0.814?0.903?0.725?0.814?B4+q+t 0.847?0.910?0.774?0.844?B4+q+k 0.832?0.906?0.748?0.829?B4+t+k 0.817?0.861?0.743?0.807?B4+w+q+t 0.846?0.917?0.782?0.849?B4+w+q+k 0.841?0.916?0.756?0.838?B4+w+t+k 0.835?0.906?0.783?0.841?Es-all 0.860?0.915?0.788?0.854?Table 4: Overall AP results of the different featureconfigurations, compared to two baselines.
?
in-dicates statistical significance at the 0.95 level wrtB3.
?
indicates statistical significance at 0.95 levelwrt both B3 and B4.stances highly-associated with an ambiguous pat-tern (e.g., the pattern ?X of the rock band Y?
forfinding Musicians matched an incorrect instance?song submission?
); or errors typical of both, suchas the inclusion of common nouns (e.g.
?countrymusic hall?)
or too generic last names (e.g.
?John-son?).
ES-all successfully recovers all these errorby using termness, co-occurrence and frequencyfeatures.We also compare ES-all with a state-of-the-artrandom walk system (RW) presented by Talukdaret al (2008) (see Section 2.2 for a description).As we could not reimplement the system, we re-port the following indirect comparison.
RW wasevaluated on five entity classes, one of which, NFLplayers, overlaps with our Athletes class.
On thisclass, they report 0.95 precision on the top-100ranked entities.
Unfortunately, they do not reportcoverage or recall statistics, making the interpre-tation of this analysis difficult.
In an attempt tocompare RW with ES-all, we evaluated the preci-sion of our top-100 Athletes, obtaining 0.99.
Us-ing a random sample of our extracted Athletes, weapproximate the precision of the top-22,000 Ath-letes to be 0.97?
0.01 (at the 0.95 level).4.3 Feature AnalysisFeature family analysis: Table 4 reports the av-erage precision (AP) for our system using differentfeature family combinations (see Table 1).
Col-umn 1 reports the family combinations; columns2442-4 report AP for each class; and column 5 reportsthe mean-average-precision (MAP) across classes.In all configurations, except the k family alone,and along all classes, our system significantly out-performs (at the 0.95 level) the baselines.Rows 3-6 report the performance of each fea-ture family alone.
w and t are consistently betterthan q and k, across all classes.
k is shown to bethe least useful family.
This is mostly due to datasparseness, e.g., in our experiments almost 40%of the test instances in the Actors sample do nothave any occurrence in Wikipedia.
However, with-out access to richer resources such as a webcrawlor query logs, the features from k do indeed pro-vide large gains over current baselines (on average+10.2% and +7.7% over B3 and B4).Rows 7-12 report results for combinations oftwo feature families.
All combinations (exceptthose with k) appear valuable, substantially in-creasing the single-family results in rows 3-6, in-dicating that combining different feature families(as suggested by the ES paradigm) is helpful.
Sec-ond, it indicates that q, w and t convey comple-mentary information, thus boosting the regressionmodel when combined together.
It is interesting tonotice that q+t tends to be the best combination,surprising given that t alone did not show high per-formance (row 5).
One would expect the combina-tion q+w to outperform q+t, but the good perfor-mance of q+t is mainly due to the fact that thesetwo families are more complementary than q+w.To verify this intuition, we compute the Spearmancorrelation coefficient r among the rankings pro-duced by the different combinations.
As expected,q and w have a higher correlation (r = 0.82) thanq and t (r = 0.67) and w and t (r = 0.66), suggest-ing that q and w tend to subsume each other (i.e.no added information for the regression model).Rows 13-15 report results for combinations ofthree feature families.
As expected, the bestcombination is q+w+t with an average precisionnearly identical to the full ES-all system.
If onehas access to Web or query log sources, then thevalue of the Wikipedia features tends to be sub-sumed by our web and query log features.Feature by feature analysis: The feature fam-ilies analyzed in the previous section consist of402 features.
For each trained GBDT model,one can inspect the resulting most important fea-tures (Friedman, 2001).
Consistently, the twomost important features for ES-all are, as ex-System AP MAPActors Athletes MusiciansB4 0.715 0.697 0.579 0.664B4+w 0.813 0.908 0.724 0.815B4+wF 0.798 0.865 0.679 0.781B4+wT 0.806 0.891 0.717 0.805B4+t 0.784 0.825 0.727 0.779B4+tF 0.760 0.802 0.701 0.781B4+tC 0.771 0.815 0.718 0.805B4+q 0.815 0.905 0.743 0.821B4+qF 0.786 0.890 0.693 0.790B4+qC 0.715 0.738 0.581 0.678B4+qD 0.735 0.709 0.644 0.696B4+qP 0.779 0.796 0.648 0.741B4+qT 0.780 0.868 0.725 0.791B4+qF+qW+qT 0.816 0.906 0.743 0.822ES-all 0.860 0.915 0.788 0.854Table 5: Ablation study of the web (w), query-log (q) and table (t) features (bold letters indicatewhole feature families).pected, the confidence scores of KEpatandKEdis.
This suggests that syntagmatic andparadigmatic information are most important indefining the semantics of entities.
Also very im-portant, in third position, is a feature from qT ,namely the ratio between the number of queriesmatching the instance and the number of queriescontaining it as a substring.
This feature is a strongindicator of termness.Webcrawl term frequencies and document fre-quencies (from the wF set) are also important.Very frequent and infrequent instances were foundto be often incorrect (e.g., respectively ?song?
and?Brad Pitttt?).
Table PMI (a feature in the qC fam-ily) also ranked high in importance: instances thatco-occurr very frequently in the same column/rowwith seeds S are often found to be correct (e.g.,a column containing the seeds ?Brad Pitt?
and?Tom Hanks?
will likely contains other actors).Other termness (T ), frequency-based (F ) and co-occurrence (C) features also play some role in themodel.Variable importance is only an intrinsic indi-cator of feature relevance.
In order to better as-sess the actual impact of the single features onAP, we ran our system on each feature type: re-sults for the web (w), query log (q) and table (t)families are reported in Table 5.
For reason ofspace constraints, we here only focus on somehigh level observations.
The set of web termnessfeatures (wT ) and frequency features (wF ) arealone able to provide a large improvement over B4(row 1), while their combination (row 2) does notimprove much over the features taken individually.245Seed instances forKEdisActors Athletes MusiciansJodie Foster Bob Gibson Jared Allen Randy Moss Rise Against the MachineHumphrey Bogart Don Drysdale Andres Romero Peyton Manning Pink FloydAnthony Hopkins Albert Pujols Kenny Perry Jerry Rice Spice GirlsKatharine Hepburn Yogi Berra Martin Kaymer Robert Karlsson Pussycat DollsChristopher Walken Dejan Bodiroga Alexander Ovechkin Gheorghe Hagi The BeatlesGene Hackman Allen Iverson Shea Weber Marco Van Basten Iron MaidenDiane Keaton Yao Ming Patrick Roy Zinedine Zidane John LennonEdward Norton Tim Duncan Alexei Kovalev Roberto Baggio Frank SinatraRobert Duvall Led ZeppelinHilary Swank Freddie MercurySeed instances forKEpatActors Athletes MusiciansDennis Hopper - The Good Life Dallas cowboys - Julius Crosslin Kevin Brown - CorndaddyTom Hanks - The Terminal New york Giants - Plaxico Burress Barry Gibb - The Bee GeesJulia Roberts - Mona Lisa Smile Philadelphia Eagles - Danny Amendola Patty Smyth - ScandalKevin Bacon - Footloose Washington Redskins - Rock Cartwright Dave Matthews - Dave Mathews BandKeanu Reeves - The Lake House New England Patriots - Laurence Maroney Gwen Stefani - No DoubtMarlon Brando - Don Jaun Demarco Buffalo Bills - Xavier Omon George Michael - WhamMorgan Freeman - The Shawshank Redemption Miami Dolphins - Ernest Wilford Mark Knopfler - Dire StraitsNicole Kidman - Eyes Wide Shut New York Jets - Chansi Stuckey Brian Jones - The Rolling StonesAl Pacino - The Godfather Pete Shelley - BuzzcocksJohnny Depp - ChocolatHalle Berry - Monster?s Ball10-best ranked instances in one test foldActors Athletes MusiciansGordon Tootoosis Ron Randell Rumeal Robinson Todd Warriner Colin Newman Wu-tang ClanRosalind Chao Alimi Ballard Jeff Mcinnis Hong-chih Kuo Ghost Circus Tristan PrettymanJohn Hawkes Fernando Lamas Ahmad Nivins Leon Clarke Ray Dorset Top CatsJeffrey Dean Morgan Bruno Cremer Carlos Marchena Josh Dollard Plastic Tree *RoseanneGeorge Macready Muhammad Bakri Chad Kreuter Robbie Alomar *Doomwatch John MoenTable 6: Listing of all seeds used for KEdisand KEpat, as well as the top-10 entities discovered byES-all on one of our test folds.This suggests that wT and wF capture very simi-lar information: they are indeed highly correlated(r = 0.80).
Rows 5-7 refer to web table features:the features tC outperform and subsume the fre-quency features tF (r = 0.92).
For query logfeatures (rows 8-14), only qF , qP and qT signif-icantly increase performance.
Distributional andco-occurrence features (qD and qC) have very loweffect, as they are mostly subsumed by the others.The combination of qF , qP and qT (row 14) per-forms as well as the whole q (row 8).Experiment conclusions: From our experi-ments, we can draw the following conclusions:1.
Wikipedia features taken alone outperformthe baselines, however, web and query logfeatures, if available, subsume Wikipedia fea-tures;2. q, t and w are all important, and should beused in combination, as they drive mostly in-dependent information;3. the syntagmatic and paradigmatic informa-tion conveyed by the two extractors are mostrelevant, and can be significantly boosted byadding frequency- and termness-based fea-tures from other sources.5 Conclusions and Future WorkIn this paper, we presented a general informa-tion extraction framework, called Ensemble Se-mantics, for combining multiple sources of knowl-edge, and we instantiated the framework to builda novel ML-based entity extraction system.
Thesystem significantly outperforms state-of-the-artones by up to 22% in mean average precision.We provided an in-depth analysis of the impact ofour proposed 402 features, their feature families(Web documents, HTML tables, query logs, andWikipedia), and feature types.There is ample directions for future work.
Onentity extraction, exploring more knowledge ex-tractors from different sources (such as the HTMLtables and query log sources used for our features)is promising.
Other feature types may potentiallycapture other aspects of the semantics of entities,such as WordNet and search engine click logs.
Forthe ranking system, semi- or weakly-supervisedalgorithms may provide competing performanceto our model with reduced manual labor.
Finally,there are many opportunities for applying the gen-eral Ensemble Semantics framework to other in-formation extraction tasks such as fact extractionand event extraction.246ReferencesSteven Abney.
1991.
Learning taxonomic rela-tions from heterogeneous sources of evidence.
InPrinciple-Based Parsing.
Kluwer Academic Pub-lishers.Eric Brill.
1995.
Transformation-based error-drivenlearning and natural language processing: A casestudy in part of speech tagging.
Computational Lin-guistics, 21(4).Michael J. Cafarella, Doug Downey, Stephen Soder-land, and Oren Etzioni.
2005.
KnowItNow: Fast,scalable information extraction from the web.
InProceedings of EMNLP-2005.Huanhuan Cao, Daxin Jiang, Jian Pei, Qi He, ZhenLiao, Enhong Chen, and Hang Li.
2008.
Context-aware query suggestion by mining click-through andsession data.
In Proceedings of KDD-08, pages875?883.Surajit Chaudhuri, Venkatesh Ganti, and Dong Xin.2009.
Exploiting web search to generate synonymsfor entities.
In Proceedings of WWW-09, pages 151?160.Philipp Cimiano and Steffen Staab.
2004.
Learning bygoogling.
SIGKDD Explorations, 6(2):24?34.Philipp Cimiano and Johanna Volker.
2005.
To-wards large-scale, open-domain and ontology-basednamed entity classification.
In Proceedings ofRANLP-2005, pages 166?172.Philipp Cimiano, Aleksander Pivk, Lars Schmidt-Thieme, and Steffen Staab.
2005.
Learning taxo-nomic relations from heterogeneous sources of ev-idence.
In Ontology Learning from Text: Meth-ods, Evaluation and Applications, pages 59?73.
IOSPress.Michael Fleischman and Eduard Hovy.
2002.
Classi-fication of named entities.
In Proceedings of COL-ING 2002.Jerome H. Friedman.
2001.
Greedy function approx-imation: A gradient boosting machine.
Annals ofStatistics, 29(5):1189?1232.Jerome H. Friedman.
2006.
Recent advances in pre-dictive (machine) learning.
Journal of Classifica-tion, 23(2):175?197.Zellig Harris.
1964.
Distributional structure.
In Jer-rold J. Katz and Jerry A. Fodor, editors, The Philos-ophy of Linguistics, New York.
Oxford UniversityPress.Marti A. Hearst.
1992.
Automatic acquisition of hy-ponyms from large text corpora.
In Proceedings ofCOLING-92, pages 539?545.Jian Hu, Gang Wang, Fred Lochovsky, Jian tao Sun,and Zheng Chen.
2009.
Understanding user?s queryintent with Wikipedia.
In Proceedings of WWW-09,pages 471?480.Dekang Lin.
1998.
Automatic retrieval and clusteringof similar words.
In Proceedings of COLING-ACL-98.Joseph F. Mc Carthy and Wendy G Lehnert.
2005.
Us-ing decision trees for coreference resolution.
In Pro-ceedings of IJCAI-1995, pages 1050?1055.Shachar Mirkin, Ido Dagan, and Maayan Geffet.
2006.Integrating pattern-based and distributional similar-ity methods for lexical entailment acquisition.
InProceedings of ACL/COLING-06, pages 579?586.Marius Pas?ca and Benjamin Van Durme.
2008.Weakly-supervised acquisition of open-domainclasses and class attributes from web documents andquery logs.
In Proceedings of ACL-08, pages 19?27.Marius Pas?ca, Dekang Lin, Jeffrey Bigham, AndreiLifchits, and Alpa Jain.
2006.
Organizing andsearching the world wide web of facts - step one:The one-million fact extraction challenge.
In Pro-ceedings of AAAI-06, pages 1400?1405.Marius Pas?ca.
2007.
Weakly-supervised discovery ofnamed entities using web search queries.
In Pro-ceedings of CIKM-07, pages 683?690, New York,NY, USA.Patrick Pantel and Marco Pennacchiotti.
2006.Espresso: A Bootstrapping Algorithm for Automat-ically Harvesting Semantic Relations.
In Proceed-ings of ACL-2006, Sydney, Australia.Patrick Pantel, Eric Crestan, Arkady Borkovsky, Ana-Maria Popescu, and Vishnu Vyas.
2009.
Web-scaledistributional similarity and entity set expansion.
InProceedings of EMNLP-09, Singapore.Ellen Riloff and Rosie Jones.
1999.
Learning dic-tionaries for information extraction by multi-levelbootstrapping.
In Proceedings of AAAI-99, pages474?479.Partha Pratim Talukdar, Joseph Reisinger, MariusPas?ca, Deepak Ravichandran, Rahul Bhagat, andFernando Pereira.
2008.
Weakly-supervised acqui-sition of labeled class instances using graph randomwalks.
In Proceedings of EMNLP-08, pages 582?590.Bin Tan and Fuchun Peng.
2006.
Unsupervisedquery segmentation using generative language mod-els and wikipedia.
In Proceedings of WWW-06,pages 1400?1405.Hristo Tanev and Bernardo Magnini.
2006.
Weaklysupervised approaches for ontology population.
InProceedings of EACL-2006.247
