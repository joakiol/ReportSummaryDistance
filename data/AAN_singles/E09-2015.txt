Proceedings of the EACL 2009 Demonstrations Session, pages 57?60,Athens, Greece, 3 April 2009. c?2009 Association for Computational LinguisticsGrammar Development in GFAarne Ranta and Krasimir Angelov and Bjo?rn Bringert?Department of Computer Science and EngineeringChalmers University of Technology and University of Gothenburg{aarne,krasimir,bringert}@chalmers.seAbstractGF is a grammar formalism that has apowerful type system and module system,permitting a high level of abstraction anddivision of labour in grammar writing.
GFis suited both for expert linguists, whoappreciate its capacity of generalizationsand conciseness, and for beginners, whobenefit from its static type checker and,in particular, the GF Resource GrammarLibrary, which currently covers 12 lan-guages.
GF has a notion of multilingualgrammars, enabling code sharing, linguis-tic generalizations, rapid development oftranslation systems, and painless portingof applications to new languages.1 IntroductionGrammar implementation for natural languages isa challenge for both linguistics and engineering.The linguistic challenge is to master the complex-ities of languages so that all details are taken intoaccount and work seamlessly together; if possible,the description should be concise and elegant, andcapture the linguist?s generalizations on the levelof code.
The engineering challenge is to makethe grammar scalable, reusable, and maintainable.Too many grammars implemented in the history ofcomputational linguistics have become obsolete,not only because of their poor maintainability, butalso because of the decay of entire software andhardware platforms.The first measure to be taken against the ?bitrot?
of grammars is to write them in well-definedformats that can be implemented independentlyof platform.
This requirement is more or less anaxiom in programming language development: a?Now at Google Inc.language must have syntax and semantics specifi-cations that are independent of its first implemen-tation; otherwise the first implementation risks toremain the only one.Secondly, since grammar engineering is to alarge extent software engineering, grammar for-malisms should learn from programming languagetechniques that have been found useful in this re-spect.
Two such techniques are static type sys-tems and module systems.
Since grammar for-malism implementations are mostly descendantsof Lisp and Prolog, they usually lack a static typesystem that finds errors at compile time.
In a com-plex task like grammar writing, compile-time er-ror detection is preferable to run-time debuggingwhenever possible.
As for modularity, traditionalgrammar formalisms again inherit from Lisp andProlog low-level mechanisms like macros and fileincludes, which in modern languages like Java andML have been replaced by advanced module sys-tems akin in rigour to type systems.Thirdly, as another lesson from software en-gineering, grammar writing should permit an in-creasing use of libraries, so that programmers canbuild on ealier code.
Types and modules are essen-tial for the management of libraries.
When a newlanguage is developed, an effort is needed in creat-ing libraries for the language, so that programmerscan scale up to real-size tasks.Fourthly, a grammar formalism should have astable and efficient implementation that workson different platforms (hardware and operatingsystems).
Since grammars are often parts of largerlanguage-processing systems (such as translationtools or dialogue systems), their interoperabilitywith other components is an important issue.
Theimplementation should provide compilers to stan-dard formats, such as databases and speech recog-nition language models.
In addition to interoper-ability, such compilers also help keeping the gram-mars alive even if the original grammar formalism57ceases to exist.Fifthly, grammar formalisms should have richdocumentation; in particular, they should haveaccessible tutorials that do not demand the read-ers to be experts in a linguistic theory or in com-puter programming.
Also the libraries should bedocumented, preferably by automatically gener-ated documentation in the style of JavaDoc, whichis guaranteed to stay up to date.Last but not least, a grammar formalism, as wellits documentation, implementation, and standardlibraries, should be freely available open-sourcesoftware that anyone can use, inspect, modify, andimprove.
In the domain of general-purpose pro-gramming, this is yet another growing trend; pro-prietary languages are being made open-source orat least free of charge.2 The GF programming languageThe development of GF started in 1998 at Xe-rox Research Centre Europe in Grenoble, within aproject entitled ?Multilingual Document Author-ing?
(Dymetman & al.
2000).
Its purpose wasto make it productive to build controlled-languagetranslators and multilingual authoring systems,previously produced by hard-coded grammarrules rather than declarative grammar formalisms(Power & Scott 1998).
Later, mainly at ChalmersUniversity in Gothenburg, GF developed into afunctional programming language inspired by MLand Haskell, with a strict type system and oper-ational semantics specified in (Ranta 2004).
Amodule system was soon added (Ranta 2007), in-spired by the parametrized modules of ML andthe class inheritance hierarchies of Java, althoughwith multiple inheritance in the style of C++.Technically, GF falls within the class of so-called Curry-style categorial grammars, inspiredby the distinction between tectogrammatical andphenogrammatical structure in (Curry 1963).Thus a GF grammar has an abstract syntax defin-ing a system of types and trees (i.e.
a free algebra),and a concrete syntax, which is a homomorphicmapping from trees to strings and, more generally,to records of strings and features.
To take a simpleexample, the NP-VP predication rule, writtenS ::= NP VPin a context-free notation, becomes in GF a pair ofan abstract and a concrete syntax rule,fun Pred : NP -> VP -> Slin Pred np vp = np ++ vpThe keyword fun stands for function declara-tion (declaring the function Pred of type NP ->VP -> S), whereas lin stands for linearization(saying that trees of form Pred np vp are con-verted to strings where the linearization of np isfollowed by the linearization of vp).
The arrow-> is the normal function type arrow of program-ming languages, and ++ is concatenation.Patterns more complex than string concatena-tion can be used in linearizations of the same pred-ication trees as the rule above.
Thus agreementcan be expressed by using features passed from thenoun phrase to the verb phrase.
The noun phraseis here defined as not just a string, but as a recordwith two fields?a string s and an agreement fea-ture a. Verb-subject inversion can be expressed bymaking VP into a discontinuous constituent, i.e.a record with separate verb and complement fieldsv and c. Combining these two phenomena, wewritevp.v !
np.a ++ np.s ++ vp.c(For the details of the notation, we refer to doc-umentation on the GF web page.)
Generalizingstrings into richer data structures makes it smoothto deal accurately with complexities such as Ger-man constituent order and Romance clitics, whilemaintaining the simple tree structure defined bythe abstract syntax of Pred.Separating abstract and concrete syntax makesit possible to write multilingual grammars,where one abstract syntax is equipped with severalconcrete syntaxes.
Thus different string configura-tions can be mapped into the same abstract syntaxtrees.
For instance, the distinction between SVOand VSO languages can be ignored on the abstractlevel, and so can all other {S,V,O} patterns as well.Also the differences in feature systems can be ab-stracted away from.
For instance, agreement fea-tures in English are much simpler than in Arabic;yet the same abstract syntax can be used.Since concrete syntax is reversible between lin-earization and parsing (Ljunglo?f 2004), multilin-gual grammars can be used for translation, wherethe abstract syntax works as interlingua.
Experi-ence from translation projects (e.g.
Burke and Jo-hannisson 2005, Caprotti 2006) has shown that theinterlingua-based translation provided by GF givesgood quality in domain-specific tasks.
However,GF also supports the use of a transfer component ifthe compositional method implied by multilingualgrammars does not suffice (Bringert and Ranta582008).
The language-theoretical strenght of GF isbetween mildly and fully context-sensitive, withpolynomial parsing complexity (Ljunglo?f 2004).In addition to multilingual grammars, GF isusable for more traditional, large-scale unilin-gual grammar development.
The ?middle-scale?resource grammars can be extended to wide-coverage grammars, by adding a few rules anda large lexicon.
GF provides powerful tools forbuilding morphological lexica and exporting themto other formats, including Xerox finite state tools(Beesley and Karttunen 2003) and SQL databases(Forsberg and Ranta 2004).
Some large lexicahave been ported to the GF format from freelyavailable sources for Bulgarian, English, Finnish,Hindi, and Swedish, comprising up to 70,000 lem-mas and over two million word forms.3 The GF Resource Grammar LibraryThe GF Resource Grammar Library is a com-prehensive multilingual grammar currently imple-mented for 12 languages: Bulgarian, Catalan,Danish, English, Finnish, French, German, Italian,Norwegian, Russian, Spanish, and Swedish.
Workis in progress on Arabic, Hindi/Urdu, Latin, Pol-ish, Romanian, and Thai.
The library is an open-source project, which constantly attracts new con-tributions.The library can be seen as an experiment on howfar the notion of multilingual grammars extendsand how GF scales up to wide-coverage gram-mars.
Its primary purpose, however, is to providea programming resource similar to the standard li-braries of various programming languages.
Whenall linguistic details are taken into account, gram-mar writing is an expert programming task, andthe library aims to make this expertise available tonon-expert application programmers.The coverage of the library is comparable to theCore Language Engine (Rayner & al.
2000).
It hasbeen developed and tested in applications rangingfrom a translation system for software specifica-tions (Burke and Johannisson 2005) to in-car dia-logue systems (Perera and Ranta 2007).The use of a grammar as a library is made pos-sible by the type and module system of GF (Ranta2007).
What is more, the API (Application Pro-grammer?s Interface) of the library is to a large ex-tent language-independent.
For instance, an NP-VP predication rule is available for all languages,even though the underlying details of predicationvary greatly from one language to another.A typical domain grammar, such as the one inPerera and Ranta (2007), has 100?200 syntacticcombinations and a lexicon of a few hundred lem-mas.
Building the syntax with the help of the li-brary is a matter of a few working days.
Once itis built for one language, porting it to other lan-guages mainly requires writing the lexicon.
Bythe use of the inflection libraries, this is a matter ofhours.
Thus porting a domain grammar to a newlanguage requires very effort and also very littlelinguistic knowledge: it is expertise of the appli-cation domain and its terminology that is needed.4 The GF grammar compilerThe GF grammar compiler is usable in two ways:in batch mode, and as an interactive shell.
Theshell is a useful tool for developers as it providestesting facilities such as parsing, linerization, ran-dom generation, and grammar statistics.
Bothmodes use PGF, Portable Grammar Format,which is the ?machine language?
of GF permit-ting fast run-time linearization and parsing (An-gelov & al.
2008).
PGF interpreters have beenwritten in C++, Java, and Haskell, permitting aneasy embedding of grammars in systems writtenin these languages.
PGF can moreover be trans-lated to other formats, including language mod-els for speech recognition (e.g.
Nuance and HTK;see Bringert 2007a), VoiceXML (Bringert 2007b),and JavaScript (Meza Moreno and Bringert 2008).The grammar compiler is heavily optimizing, sothat the use of a large library grammar in smallrun-time applications produces no penalty.For the working grammarian, static type check-ing is maybe the most unique feature of the GFgrammar compiler.
Type checking does not onlydetect errors in grammars.
It also enables aggres-sive optimizations (type-driven partial evaluation),and overloading resolution, which makes it pos-sible to use the same name for different functionswhose types are different.5 Related workAs a grammar development system, GF is compa-rable to Regulus (Rayner 2006), LKB (Copestake2002), and XLE (Kaplan and Maxwell 2007).
Theunique features of GF are its type and module sys-tem, support for multilingual grammars, the largenumber of back-end formats, and the availabilityof libraries for 12 languages.
Regulus has resource59grammars for 7 languages, but they are smaller inscope.
In LKB, the LinGO grammar matrix hasbeen developed for several languages (Bender andFlickinger 2005), and in XLE, the Pargram gram-mar set (Butt & al.
2002).
LKB and XLE toolshave been targeted to linguists working with large-scale grammars, rather than for general program-mers working with applications.References[Angelov et al2008] K. Angelov, B. Bringert, andA.
Ranta.
2008.
PGF: A Portable Run-Time Formatfor Type-Theoretical Grammars.
Chalmers Univer-sity.
Submitted for publication.
[Beesley and Karttunen2003] K. Beesley and L. Kart-tunen.
2003.
Finite State Morphology.
CSLI Publi-cations.
[Bender and Flickinger2005] Emily M. Bender andDan Flickinger.
2005.
Rapid prototyping of scal-able grammars: Towards modularity in extensionsto a language-independent core.
In Proceedings ofthe 2nd International Joint Conference on NaturalLanguage Processing IJCNLP-05 (Posters/Demos),Jeju Island, Korea.
[Bringert and Ranta2008] B. Bringert and A. Ranta.2008.
A Pattern for Almost Compositional Func-tions.
The Journal of Functional Programming,18(5?6):567?598.
[Bringert2007a] B. Bringert.
2007a.
Speech Recogni-tion Grammar Compilation in Grammatical Frame-work.
In SPEECHGRAM 2007: ACL Workshop onGrammar-Based Approaches to Spoken LanguageProcessing, June 29, 2007, Prague.
[Bringert2007b] Bjo?rn Bringert.
2007b.
Rapid Devel-opment of Dialogue Systems by Grammar Compi-lation.
In Simon Keizer, Harry Bunt, and Tim Paek,editors, Proceedings of the 8th SIGdial Workshop onDiscourse and Dialogue, Antwerp, Belgium, pages223?226.
Association for Computational Linguis-tics, September.
[Bringert2008] B. Bringert.
2008.
Semantics of the GFResource Grammar Library.
Report, Chalmers Uni-versity.
[Burke and Johannisson2005] D. A. Burke and K. Jo-hannisson.
2005.
Translating Formal SoftwareSpecifications to Natural Language / A Grammar-Based Approach.
In P. Blache and E. Stabler andJ.
Busquets and R. Moot, editor, Logical Aspectsof Computational Linguistics (LACL 2005), volume3492 of LNCS/LNAI, pages 51?66.
Springer.
[Butt et al2002] M. Butt, H. Dyvik, T. Holloway King,H.
Masuichi, and C. Rohrer.
2002.
The ParallelGrammar Project.
In COLING 2002, Workshop onGrammar Engineering and Evaluation, pages 1?7.URL[Caprotti2006] O. Caprotti.
2006.
WebALT!
DeliverMathematics Everywhere.
In Proceedings of SITE2006.
Orlando March 20-24.
[Copestake2002] A. Copestake.
2002.
ImplementingTyped Feature Structure Grammars.
CSLI Publica-tions.
[Curry1963] H. B. Curry.
1963.
Some logical aspectsof grammatical structure.
In Roman Jakobson, edi-tor, Structure of Language and its Mathematical As-pects: Proceedings of the Twelfth Symposium in Ap-plied Mathematics, pages 56?68.
American Mathe-matical Society.
[Dymetman et al2000] M. Dymetman, V. Lux, andA.
Ranta.
2000.
XML and multilingual docu-ment authoring: Convergent trends.
In COLING,Saarbru?cken, Germany, pages 243?249.
[Forsberg and Ranta2004] M. Forsberg and A. Ranta.2004.
Functional Morphology.
In ICFP 2004,Showbird, Utah, pages 213?223.
[Ljunglo?f2004] P. Ljunglo?f.
2004.
The Expressivityand Complexity of Grammatical Framework.
Ph.D.thesis, Dept.
of Computing Science, Chalmers Uni-versity of Technology and Gothenburg University.
[Meza Moreno and Bringert2008] M. S. Meza Morenoand B. Bringert.
2008.
Interactive MultilingualWeb Applications with Grammarical Framework.
InB.
Nordstro?m and A. Ranta, editors, Advances inNatural Language Processing (GoTAL 2008), vol-ume 5221 of LNCS/LNAI, pages 336?347.
[Perera and Ranta2007] N. Perera and A. Ranta.
2007.Dialogue System Localization with the GF ResourceGrammar Library.
In SPEECHGRAM 2007: ACLWorkshop on Grammar-Based Approaches to Spo-ken Language Processing, June 29, 2007, Prague.
[Power and Scott1998] R. Power and D. Scott.
1998.Multilingual authoring using feedback texts.
InCOLING-ACL.
[Ranta2004] A. Ranta.
2004.
Grammatical Frame-work: A Type-Theoretical Grammar Formal-ism.
The Journal of Functional Programming,14(2):145?189.
[Ranta2007] A. Ranta.
2007.
Modular Grammar Engi-neering in GF.
Research on Language and Compu-tation, 5:133?158.
[Rayner et al2000] M. Rayner, D. Carter, P. Bouillon,V.
Digalakis, and M. Wire?n.
2000.
The SpokenLanguage Translator.
Cambridge University Press,Cambridge.
[Rayner et al2006] M. Rayner, B.
A. Hockey, andP.
Bouillon.
2006.
Putting Linguistics into SpeechRecognition: The Regulus Grammar Compiler.CSLI Publications.60
