Japanese IE System and Customization ToolChikashi NobataDepar tment  of Informat ion ScienceUniversity of TokyoScience Bui lding 7.
Hongou 7-3-1Bunkyo-ku,  Tokyo 113 Japannova @is.
s. u-tokyo, ac.jpSatoshi Sekine, Roman YangarberComputer  Science Depar tmentNew York University715 Broadway,  7th floorNew York, NY 10003, USA{ sekine\[ roman} @cs.
nyu.
edu1 In t roduct ionThis paper reports on the development of theeJapanese Information Extraction system and theJapanese Information Extraction customizationtool.
These systems are based on the correspond-ing English systems, the Proteus Information Ex-traction system (Grishman 97) and the ProteusExtraction Tool (Yangarber and Grishman 97),developed at NYU.
In this paper, we will, inparticular, describe the differences between theJapanese systems and English systems.2 The Japanese IE SystemFigure 1 shows the overall structure of theJapanese IE system.
The system consists of acascade of modules with their attendant knowl-edge bases, with the input text document passedthrough the pipeline of modules.
Becausedocumenti~5~hl ~-  5h~-l-y-s~ .. .
.
t .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.I morphological nalysis (JUMAN) \]\[ name recognition \[\[ partial syntactic analysis \]\[ event pattern matching \]\[ co-reference analysis \[\[ inference I/\[ template generation \[extracted templatesFigure 1: Japanese Proteus IE system architec-tureJapanese sentences have no spaces between thetokens, we first have to run a morphological n-alyzer in order to segment each sentence into to-kens.
Although an alternative is to use the inputsequence of characters as it is, this may cause aserious problem when we apply patterns becauseof ambiguities.
The first module, morphologicalanalysis is responsible for breaking the sentenceinto tokens.
We used JUMAN (Matsumoto et al97) for this purpose.
It also provides the part-of-speech information for each token, which will beused in the next module.The second module is responsible for extractingnamed entities, like organization, person, locationnames, time expressions, and numeric expressions.This is different from the English system, whichuses the pattern matching mechanism for namedentity detection.
In the Japanese system, this isdone by an independent program which uses a de-cision tree technique to assign tags of named en-tity information to the input text (Sekine 98).The next two modules employ regular expres-sion pattern matching, applying patterns of suc-cessively increasing complexity to the document.These are essentially the same as those of theEnglish system.
The patterns - the regular ex-pressions with their associated actions, -- are en-coded in a special pattern specification language,and are compiled and stored in a separate patternbase.
Pattern matching is a form of determinis-tic, bottom-up artial parsing.
The numbers ofpatterns between the two systems are slightly dif-ferent mainly due to the difference in the methodsof detecting named entities.Language Event Otherpattern patternEnglish 51 187Japanese i 39 64Total238103Table 1: Number of patterns91The following explains the pattern matchingcomponent using some simplified examples ofJapanese patterns.
There are two phases in thepattern matching component.
The first phase usespatterns to identify small syntactic units, such asnoun and verb phrases.
Thus, e.g., in order toanalyze the example sentence in Appendix A, thisphase will employ a pattern such as:np(person) np(position)which matches an ordered pair of noun phrases(up) whose lexical heads belong to the semanticclass "person" and "position", respectively.
Thepattern's action will subsume the matched textinto a new, larger constituent, with the side ef-fect that the entity corresponding to the "person"noun phrase will acquire a slot named "position",linked to the position entity.The second phase called event patterns appliesdomain-specific and scenario-specific patterns, toresolve higher-level syntactic onstructions (appo-sition, prepositional phrase attachment), conjunc-tion, and clause constructions.
The actions trig-gered by the patterns specify operations on thelogical form representation f the sentence, whichevolves as the pattern matching progresses.
Thelogical form contains the descriptions of the enti-ties, relationships, and events discovered so far bythe analysis.
For example, there is a patternnp(person) GA np(position) NIvp (SHOUKAKU- SURU)(here, the Japanese characters are written intypewr i te r  type-face) This is an event pat-tern and it constructs everal relationships re-garding the person, position and the predicateSHOUKAKU-SURU (to promote).The subsequent phases operate on the logicalform built in the pattern matching phases.
Refer-ence resolution links anaphoric pronouns to theirantecedents, and resolves other co-referring ex-pressions.
We create some Japanese-specific rulesfor abbreviations and any other equivalent expres-sions.The Japanese system uses the correspondingEnglish components for unification of partial eventstructures and template generation.3 Customizat ion  ToolThere is not much to mention about the port-ing of the English Customization tool (PET) toJapanese.
There were programming level difficul-ties because its window system is developed us-ing GARNET, a graphical system for LISP, whichdoes not support he Japanese language.4 Eva luat ionTable 2 shows the result of the information extrac-tion experiment for English and Japanese.
TheEnglish results are based on the formal MUC-6 ex-periment.
The Japanese xperiment is conductedusing Nikkei newspaper articles on the same do-main, "executive succession events".
We spentabout two months of one person's part-time laborto develop the patterns.
Actually, the developercreated the patterns at the same time as he devel-oped the Japanese system.
It achieves a slightlybetter score.
This may due to the fact that hespent more time than that spent for the Englishrule creation (one month), or due to the tendencywe found that there is a typical document stylefor this kind of articles.
The latter is not clear aswe have not investigated the English articles.5 Future WorkStructural generalizationIn the English system, there is a facility to general-ize a pattern based on structural variation.
For ex-ample, an active mood pattern can be generalizedto a passive pattern or a relative clause pattern.A similar mechanism ight be useful in Japanese.Japanese is known as a free word-order language.In principle, a pattern can be generalized basedon this property of Japanese, but there are someexceptions and some heuristics hould be consid-ered.Reference resolution for zero pronounIn Japanese, subject or object nouns can some-times be omitted.
It is a difficult problem to re-cover the noun, but we found several cases wheresuch technologies are needed to achieve better per-formance.6 AcknowledgmentsThe English Proteus Information Extraction sys-tem, on which this work is based, was developedby Professor Ralph Grishman.
We would like togratefully acknowledge his assistance in the devel-opment of the Japanese system.ReferencesRalph Grishman:Information extraction: Techniques and chal-lenges.
In Maria Teresa Pazienza, editor, In-formation Extraction.
Springer-Verlag, LectureNotes in Artificial Intelligence, Rome, 1997.Yuuji Matsumoto, Sadao Kurohashi, Osamu Ya-maji, Yuu Taeki and Makoto Nagao: Japanese92Language Corpus # of articlesEnglish training 100test 51Japanese training!
87test 90Recall61476457Table 2: EvaluationPrecision F-measure74 67.0170 56.4071 67.3270 62.61morphological nalyzing System: JUMAN Ky-oto University and Nara Institute of Scienceand Technology 1997Satoshi Sekine: NYU:Description of TheJapanese NE System Used for MET-2 In Proc.MUC-7 Verginia, USA, 1998.Roman Yangarber and Ralph Grishman: Cus-tomization of Information Extraction SystemsIn Proc.
Int'l Workshop on Lexically DrivenInformation Extraction, pages 1-11, Frascati,Italy, 1997.93Appendix A:= = = = = = = = = = =Position Company Person Status On the Job Reason.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.~ ~ ~  ~ ~  OUT YES Reassignment~ ~ ~  ~ ~  IN NO Reassignment~ ~ ~  ~ X ~  OUT YES Reassignment~ ~ , ~  4 ~  IN NO ReassignmentAppendix B:(defpattern jpn-decision4"np-sem(C-company) '~' j-at-date?
j-at-board-of-directors?np-sem(C-person) np-sem(C-position) '~'np-sem(C-position) '~['jnoun-appoint '~' '~ '  3noun-jinji '~' jverb-decision:verb-tense=future,person-at=5.attributes,company-prev-at=l.attributes,person-prev-at=6.attributes,company-at=l.attributes,position-at=8.attributes")(defclausefun when-j-appoint (phrase-type)(let ((person-at (binding 'person-at))(person-entity (essential-entity-bound 'person-at 'C-person))(company-prev-entity (entity-bound 'company-prev-at))(position-prev-entity (entity-bound 'position-'~rev-at))(company-entity (entity-bound 'company-at))(position-entity (entity-bound 'position-at))(reason-symbol 'REASSIGNMENT)(verb-span (binding 'verb-span))(tense-verb-word (first-word-bound 'verb-span)(tense-verb-symbol)(new-event))(when (null position-entity)(error "~%when-j-appoint:cannot output appoint event.-%"))(not-an-antecedent position-entity)(setq tense-verb-symbol (intern tense-verb-word))(format *trace-output* "~%-S ~S" verb-span tense-verb-symbol)(setq new-event(assert-event:predicate 'appoint94:person person-entity:position position-entity:company company-entity:reason reason-symbol:verb verb-head:verb-tense verb-tense))(when position-prey-entity(assert-event:predicate 'leave-job:person person-entity:position position-prev-entity:company company-entity:reason reason-symbol:verb verb-head:verb-tense verb-tense)))95
