Proceedings of the Workshop on Annotating and Reasoning about Time and Events, pages 9?16,Sydney, July 2006. c?2006 Association for Computational LinguisticsLocal Semantics in the Interpretation of Temporal ExpressionsRobert Dale?
and Pawe?
Mazur?Centre for Language TechnologyMacquarie University, NSW 2109, Sydney, Australia?Robert.Dale@mq.edu.au,?mpawel@ics.mq.edu.auAbstractWork on the interpretation of temporal ex-pressions in text has generally been pur-sued in one of two paradigms: the for-mal semantics approach, where an attemptis made to provide a well-grounded theo-retical basis for the interpretation of theseexpressions, and the more pragmatically-focused approach represented by the de-velopment of the TIMEX2 standard, withits origins in work in information extrac-tion.
The former emphasises formal ele-gance and consistency; the latter empha-sises broad coverage for practical applica-tions.
In this paper, we report on the de-velopment of a framework that attemptsto integrate insights from both perspec-tives, with the aim of achieving broad cov-erage of the domain in a well-groundedmanner from a formal perspective.
Wefocus in particular on the developmentof a compact notation for representingthe semantics of underspecified tempo-ral expressions that can be used to pro-vide component-level evaluation of sys-tems that interpret such expressions.1 IntroductionObtaining a precise semantic representation for ut-terances related to time is interesting both from atheoretical point of view, as there are many com-plex phenomena to be addressed, and for purelypractical applications such as information extrac-tion, question answering, or the ordering of eventson a timeline.In the literature, work on the interpretation oftemporal expressions comes from two directions.On the one hand, work in formal semantics (see,for example, (Pratt and Francez, 2001)) aims toprovide a formally well-grounded approach to therepresentation of the semantics of these expres-sions, but such approaches are difficult to scaleup to the broad coverage required for practical ap-plications; on the other hand, work that has itsroots in information extraction, while it empha-sizes broad coverage, often results in the use ofad hoc representations.
The most developed workin this direction is focused around the TimeMLmarkup language1 (described, for example, in(Pustejovsky et al, 2003) and in the collectionedited by Mani et al (2005)).Some work attempts to bring these two tradi-tions together: notable in this respect is Schilder?s(2004) work on temporal expressions in Germannewswire text, and Hobbs and Pan?s (2004) workon the axiomatisation in terms of OWL-Time.
Sa-quete et al (2002) present an approach that viewstime expressions as anaphoric references.We take the view that an important step to-wards a truly broad coverage yet semanticallywell-founded approach is to recognize that thereis a principled distinction to be made between theinterpretation of the semantics of a temporal ex-pression devoid of its context of use, and the fullerinterpretation of that expression when the contextis taken into account.
The first of these, which werefer to here as the local semantics of a tempo-ral expression, should be derivable in a composi-tional manner from the components of the expres-sion; determining the value of the second, whichwe refer to as the global semantics of the expres-sion, may require arbitrary inference and reason-1Note that with TimeML one can annotate not only tem-poral expressions, but also events and relations betweenevents and temporal expressions.9ing.
Such a distinction is implicit in other ac-counts: Schilder?s (2004) use of lambda expres-sions allows representation of partially specifiedtemporal entities, and the temporary variables thatNegri and Marseglia (2005) construct during theinterpretation of a given temporal expression cap-ture something of the same notion.Our proposal here is to reify this level of inter-mediate representation based on a formalization interms of recursive attribute?value matrices.
Thishas two distinct advantages: it provides a conve-nient representation of underspecification, and itleads naturally to a compositional approach to theconstruction of the semantics of temporal expres-sions via unification.
We also provide a compactencoding of this representation that is essentiallyan extension of the existing TIMEX2 representa-tion for temporal expressions.
This brings the ad-vantages that (a) existing tools and machinery forevaluation can be used to determine how well agiven implementation derives these local semanticvalues; and (b) performance in the determinationof local semantics and global semantics can betested independently.
To ensure breadth of cover-age, we have developed our representation on thebasis of the 256 examples of temporal expressionsprovided in the TIMEX2 guidelines (Ferro et al,2005).
To make it possible to compare systems ontheir performance in producing these intermediaterepresentations, we make available this set of ex-amples annotated in-line with the representationsdescribed here.The rest of this paper is structured as follows.
InSection 2, we describe the architecture of DANTE,a system which embodies our approach to the de-tection and normalisation of temporal expressions;in particular, we focus on the architecture em-ployed in this approach, and on the particular lev-els of representation that it makes use of.
In Sec-tion 3, we argue for an intermediate representa-tional level that captures the semantics of temporalexpressions independent of the context of their in-terpretation, and introduce the idea of using recur-sive attribute?value matrices to represent the se-mantics of temporal expressions.
In Section 4, weprovide an encoding of these attribute?value ma-trices in a compact string-based representation thatis effectively an extension of the ISO-based date?time format representations used in the TIMEX2standard, thus enabling easy evaluation of systemperformance using existing tools.
In Section 5we discuss how the approach handles construc-tions that contain one TIMEX embedded withinanother.
Finally, in Section 6 we draw some con-clusions and point to future work.2 The DANTE System2.1 Processing StepsIn our work, our goal is very close to that for whichthe TIMEX2 standard was developed: we want toannotate each temporal expression in a documentwith an indication of its interpretation, in the formof an extended ISO-format date and time string,normalised to some time zone.
So, for example,suppose we have the following italicised temporalexpression in an email message that was sent fromSydney on Monday 10th April 2006:(1) I expect that we will be able to present thisat the meeting on Friday at 11am.In the context of our application, this temporal ex-pression should be marked up as follows:(2) <TIMEX2 VAL="2006-04-14T01:00GMT">Friday at 11am</TIMEX2>We have to do three things to achieve the desiredresult:?
First, we have to detect the extent of the tem-poral expression in the text.
We refer tothis process as temporal expression recog-nition.?
Then, we have to use information from thedocument context to turn the recognized ex-pression into a fully specified date and time.We refer to this as temporal expression in-terpretation.?
Finally, we have to normalise this fully spec-ified date and time to a predefined time zone,which in the case of the present example isGreenwich Mean Time.
We refer to this astemporal expression normalisation.22Note that this third step is not required by the TIMEXguidelines, but is an additional requirement in the context ofour particular application.
This also means that our use of theterm ?normalisation?
here is not consistent with the standardusage in the TIMEX context; however, we would argue thatour distinction between interpretation and normalisation de-scribes more accurately the nature of the processes involvedhere.10We observe that, at the time that the extent of atemporal expression within a text is determined, itis also possible to derive some semantic represen-tation of that expression irrespective of the widercontext within which it needs to be interpreted:for example, by virtue of having recognized anoccurrence of the string Friday in a text, we al-ready know that this is a reference to a specific dayof the week.
Most existing systems for the inter-pretation of temporal expressions probably makeuse of such a level of representation.
Schilder?s(2004) approach captures the semantics here interms of a lambda expression like ?xFriday(x);Negri and Marseglia (2005) capture informationat this stage of processing via a collection of tem-porary attributes.In our system, each of the three steps above cor-responds to a distinct processing component in theDANTE system architecture.
These componentscommunicate in terms of a number of distinct rep-resentations, which we now describe.2.2 The TextThis level of representation corresponds simply tothe strings that constitute temporal expressions intext.
These are understood to be linguistic con-structions whose referents are entities in the tem-poral domain: either points in time, or periods oftime.
In the above example, the text representationis simply the string Friday at 11am.2.3 Local SemanticsWe use this term to refer to a level of representa-tion that corresponds to the semantic content thatis derivable directly from the text representation;in the case of temporal expressions that are argu-ments to prepositions, this includes the interpreta-tion of the preposition.
Such representations areoften incomplete, in that they do not denote a par-ticular point or period on the time line; however,usually they do partially specify points or peri-ods, and constrain the further interpretation of thestring.2.4 In-Document SemanticsWe use this term to refer to the fully explicit in-terpretation of the text string, to the extent thatthis can be determined from the document itself,in conjunction with any metadata associated withthe document.
This level of representation corre-sponds to the information encoded in the attributesof the TIMEX2 tag as defined in the TIMEXguidelines.2.5 Global SemanticsThe TIMEX guidelines do not have anything tosay beyond the representation described in the pre-vious section.
In our application, however, weare also required to normalise all temporal expres-sions to a specific time zone.
This requires thatsome further temporal arithmetic be applied to thesemantics of the found expressions.
To calculatethis, we simply have to determine the differencebetween the time zone of the document containingthe temporal reference and the target time zone,here Greenwich Mean Time.
The document maynot always be explicitly marked with informationabout the time zone of its creation; in such cases,this has to be inferred from information about thelocation of the author or sender of the message.3 Representing Temporal ExpressionsIn this section, we describe a conceptualisation ofthe semantics of temporal expressions in terms ofrecursive attribute?value matrices.3.1 Temporal EntitiesAs is conventional in this area of research, we viewthe temporal world as consisting of two basic typesof entities, these being points in time and dura-tions; each of these has an internal hierarchicalstructure.
We can represent these in the followingmanner:3????????????????pointTIMEANDDATE???????????TIME?
?HOUR 15MINS 00SECS 00??DATE???
?DAY[DAYNAME D4DAYNUM 13]MONTH 5YEAR 2006??????????????
?ZONE Z???????????????
?The example above corresponds to the semanticsof the temporal expression 3pm Thursday 13thMay 2006 GMT; in the ISO date and time formatused in the TIMEX2 standard, this would be writ-ten as follows:(3) 2006-05-13T15:00:00Z3For reasons of limitations of space, we will ignore dura-tions in the present discussion; their representation is similarin spirit to the examples provided here.11Each atomic feature in the attribute?value struc-ture thus corresponds to a specific position in theISO format date?time string.3.2 UnderspecificationOf course, very few temporal expressions in textare fully specified.
The attribute?value matrix rep-resentation makes it easy to represent the con-tent of underspecified temporal expressions.
Forexample, the content of the temporal expressionThursday in a sentence like We will meet onThursday can be expressed as follows:?
?pointTIMEANDDATE[DATE[DAY[DAYNAME D4]]]?
?On the other hand, a reference to 13th May in asentence like We will meet on 13th May has thisrepresentation:???
?pointTIMEANDDATE[DATE[DAY[DAYNUM 13]MONTH 05]]???
?In the cases just described, the semantic repre-sentation corresponds to the entire temporal nounphrase in each case.
The same form of represen-tation is easy to use in a compositional seman-tic framework: each constituent in a larger tem-poral expression provides a structure that can beunified with the structures corresponding to theother constituents of the expression to provide asemantics for the expression as a whole.
The val-ues of the atomic elements in such an expressioncome from the lexicon; multiword sequences thatare best considered atomic (such as, for example,idioms) can also be assigned semantic representa-tions in the same way.
The value of a compositestructure is produced by unifying the values of itsconstituents.
Unifying the two structures above,for example, gives us the following representationfor Thursday 13th May:4??????pointTIMEANDDATE???DATE??
?DAY[DAYNAME D4DAYNUM 13]MONTH 05???????????
?So, these structures provide a convenient repre-sentation for what we have referred to above as the4For simplicity here we assume that the syntactic structureof such an expression is captured by the context-free grammarrule ?NP?
NP NP?.
Other treatments are possible.local semantics of a temporal expression, and cor-respond to the output of the recognition stage ofour processing architecture.3.3 InterpretationWe can now define the task of interpretation interms of the content of these structures.
We as-sume a granularity ordering over what we mightthink of as the defining attributes in a temporalrepresentation:(4) year > month > daynum > hour >minute > secondThese are, of course, precisely the elements thatare represented explicitly in an ISO date?time ex-pression.Interpretation of a partially specified temporalexpression then requires ensuring that there is avalue for every defining attribute that is of greatergranularity than the smallest granularity present inthe partially specified representation.
We refer tothis as the granularity rule in interpretation.In the case of the example in the previous sec-tion, the granularity rule tells us that in order tocompute the full semantic value of the expressionwe have to determine a value for YEAR, but notfor HOUR, MINS or SECS.
This interpretationprocess may require a variety of forms of reason-ing and inference, as discussed below, and is quali-tatively different from the computation of the localsemantics.In the context of our application, a third stage,the normalisation process, then requires taking thefurther step of adding a ZONE attribute with a spe-cific value, and translating the rest of the construc-tion into this time zone if it represents a time inanother time zone.4 A Compact EncodingThe structures described in the previous sectionare relatively unwieldy in comparison to the sim-ple string structures used as values in the TIMEXstandard.
To enable easy evaluation of a sys-tem?s ability to construct these intermediate se-mantic representations, we would like to use a rep-resentation that is immediately usable by existingevaluation tools.
To achieve this goal, we definea number of extensions to the standard TIMEX2string representation for values of the VAL at-tribute; these extensions allow us to capture therange of distinctions we need.
To save space, we12also use these representations here to show thecoverage of the annotation scheme that results.In our implementation, we represent the localsemantic content via an additional set of attributeson TIMEX elements that mirrors exactly the set ofattributes used by the TIMEX2 standard: thus wehave T-VAL, T-ANCHOR VAL and so on.
Thismeans that markup applied to a text distinguishesintermediate and final semantic values, making itpossible to evaluate on just intermediate values,just final values, or both.
In what follows, we willalso use these intermediate attributes to make clearwhich level of representation is under discussion.4.1 Partially Specified Dates and TimesAs noted above, many references to dates or timesare not fully specified in a text, with the result thatsome parts will have to be computed from the con-text during the interpretation stage.
Typical exam-ples are as follows:(5) a.
We?ll see you in November.b.
I expect to see you at half past eight.In the recursive attribute?value notation intro-duced above, the missing information in each casecorresponds to those features that are absent in thestructure as determined by the granularity rule in-troduced in Section 3.3.In our string-based notation, we use lowercasexs to indicate those elements for which a valueneeds to be found, but which are not available atthe time the local semantics are computed; andwe capture the granularity requirement by omit-ting from the string representation those elementsthat do not require a value.5 Table 1 provides arange of examples that demonstrate various formsof underspecification.A lowercase x thus corresponds to a variable.By analogy with this extension, we also use a low-ercase t instead of the normal ISO date?time sep-arator of T to indicate that the time may need fur-ther specification: consider the third and fourth ex-amples in Table 1, where it is not clear whether thetime specified is a.m. or p.m.For partially-specified dates and times, thestring-based encoding thus both captures the local5Note that this does not mean the same thing as the useof an uppercase X in the TIMEX2 guidelines: an uppercaseX means effectively that no value can be determined.
Ofcourse, if no value can be found for a variable element duringthe interpretation process, then the corresponding lowercasex will be replaced by an uppercase X .String Representation9 pm xxxx-xx-xxT2111:59 pm xxxx-xx-xxT23:59eleven in the morning xxxx-xx-xxT11:00ten minutes to 3 xxxx-xx-xxt02:5015 minutes after the hour xxxx-xx-xxtxx:15the nineteenth xxxx-xx-19January 3 xxxx-01-03November xxxx-11summer xxxx-SU?63 xx63the ?60s xx6Table 1: Underspecified Dates and Timessemantic content of the temporal expression, andprovides a specification of what information theinterpretation process has to add.
If the temporalfocus is encoded in the same form of representa-tion, then producing the final interpretation is of-ten a simple process of merging the two structures,with the values already specified in the interme-diate representation taking precedence over thosein the representation of the temporal focus.
Ex-pressions involving references to named monthsrequire a decision as to whether to look for thenext or previous instance of the month, typicallydetermined by the tense of the major clause con-taining the reference.4.2 Representing WeekdaysIn recognition that the year-based calendar andthe week-based calendar are not aligned, our in-termediate representation embodies a special caseborrowed from the TIMEX2 notation for days ofthe week that require context for their specifica-tion.
Consider example (6a), uttered on Friday14th April 2006; the intermediate semantic repre-sentation is provided in example (6b), and the finalinterpretation is provided in example (6c).
(6) a.
We left on Tuesday.b.
T-VAL="D2"c. VAL="2006-04-11"This is not as convenient as the ISO-like encod-ing, and requires special case handling in the inter-preter; however, a more comprehensive single rep-resentation would require abandoning the ISO-likeencoding and the benefits it brings, so we chooseto use the two formats in concert.13String Representationtoday +0000-00-00tomorrow +0000-00-01yesterday ?0000-00-01five days ago ?0000-00-05last month ?0000-01last summer ?0001-SUtwo weeks ago ?0000-W02this weekend +0000-W00-WEthis year +0000three years ago ?0003the next century +01Table 2: Relative dates in ISO-like format.The same notation supports references to partsof specific days, as presented in example (7).
(7) a.
We left on Tuesday morning.b.
T-VAL="D2TMO"c. VAL="2006-04-11TMO"4.3 Relative Dates and TimesA relative date or time reference is one that re-quires a calendar arithmetic operation to be carriedout with respect to some temporal focus in the text.Typical examples are as follows:(8) a.
We?ll see him tomorrow.b.
We saw him last year.c.
We?ll see him next Thursday.d.
We saw him last November.We distinguish three subtypes here: relative datesand times whose local semantics can be expressedin an ISO-like format; relative references to daysand months by name; and less specific referencesto past, present and future times.For the first of these, we extend the ISO formatwith a preceding ?+?
or ???
to indicate the direc-tion from the current temporal focus.
Some exam-ples of dates are provided in Table 2, and some ex-amples of date?time combinations are provided inTable 3.
Note the both the date and time elementsin a relative reference can be independently eitherabsolute or relative: compare the representationsfor in six hours time and at 6am today.This representation leads to a very intuitivecoordinate-based arithmetic for computing the fi-nal semantic interpretation of a given expression:the interpreter merely adds the temporal focus andString Representationsixty seconds later +0000-00-00T+00:00:60five minutes ago +0000-00-00T?00:05in six hours time +0000-00-00T+06:00at 6 a.m. today +0000-00-00T06:00last night ?0000-00-01TNITable 3: Relative times in ISO-like format.String Representationlast Monday <D1next Wednesday >D3last March <M03next March >M03Table 4: Relative References to Days and Monthsthe intermediate value element-by-element fromthe smallest unit upwards, using carry arithmeticwhere appropriate.Relative references to named days and monthsrequire a different treatment, in line with the no-tation introduced in Section 4.2.
Table 4 showsthe intermediate values used for a number of suchexpressions.A further variation on this notation also allowsus to specify a local semantics for expressions likethe first Tuesday in temporal expressions like thefirst Tuesday in July, or like the last year in the lastyear of the millenium; see Table 5.
To producefinal interpretations of these, the interpreter has toconstruct the set of elements that correspond to thehead noun (for example, a list of the ISO dates thatcorrespond to the Tuesdays in a given month), andthen select the nth element from that set.5 Handling Embedded ConstructionsThe TIMEX specification allows for the embed-ding of one TIMEX within another.
Consider anexample like the following:String Representationthe first Tuesday 1D2the second day 2Dthe last Tuesday $D2the last day $DTable 5: Ordinally-specified Elements14Figure 1: The syntactic structure of an embeddedTIMEX(9) <TIMEX2>the first Tuesdayin<TIMEX2>July</TIMEX2></TIMEX2>The bulk of the embedded TIMEXs provided asexamples in the TIMEX guidelines are, like thisone, of the form [NP PP], where the head NPcontains a TIMEX, and the PP contains anotherTIMEX that is modified by the head NP.
Syntac-tically, these structures are of the form shown inFigure 1.For our purposes, it is convenient to first thinkof these structures as consisting of three, ratherthan two, TIMEXs, corresponding to the threesubscripted NP nodes in this tree.
The outermostTIMEX, corresponding to NP0, is the one whosevalue we are ultimately interested in; this is com-puted by combining the semantics of the two con-stituent TIMEXs, corresponding to NP1 and NP2,and the preposition indicates how this combinationshould be carried out.Structurally, the recognizer may first determinethat there are two separate TIMEXs here:(10) <TIMEX2>the firstTuesday</TIMEX2> in<TIMEX2>July</TIMEX2>Each of these TIMEXs can be given the appro-priate local semantics by the recognizer; the rec-ognizer then reorganizes this structure to mirrorthe embedding required by the TIMEX guidelines,to produce the structure shown in example (10)above; effectively, NP1 disappears as a distinctconstituent, and its intermediate semantics are in-herited by NP0.We then leave it to the interpreter to combine theintermediate semantics of NP0 with the intermedi-ate semantics of NP2 to produce a final semanticsfor NP0: schematically, we have(11) NP0(VAL) = NP0(T-VAL) ?
NP2(T-VAL)where ???
is the combinatory operation that corre-sponds to the preposition used.
The operation re-quired is specified by the recognizer as the value ofthe temporary attribute T-REL, which representsthe semantics of the preposition.The following three examples demonstrate a va-riety of possibilities, showing both the intermedi-ate (T-VAL) and final (VAL) semantic interpreta-tions in each case:(12) <TIMEX2 VAL="1999" T-VAL="$Y"T-REL="OF">the last year of<TIMEX2 VAL="1" T-VAL="+0">thismillennium</TIMEX2></TIMEX2>(13) <TIMEX2 VAL="1998-01-31"T-VAL="$D" T-REL="OF">the lastday of <TIMEX2 VAL="1998-01"T-VAL="xxxx-01">January</TIMEX2></TIMEX2>(14) <TIMEX2 VAL="1998-01-31"T-VAL="$D" T-REL="OF">the lastday of <TIMEX2 VAL="1998-01"T-VAL="1998-01">January1998</TIMEX2></TIMEX2>Note that, when the embedded TIMEX is fullyspecified, as in the last example here, it would bepossible for the recognizer to calculate the finalvalue of the whole expression; however, for con-sistency we leave this task to the interpreter.The semantics of the indicated T-REL dependon the types of its arguments.
In the cases above,for example, the operation is one of selecting anordinally-specified element of a list; but where theentity is a period rather than a point, as in the firstsix months of 2005, the operation is one of delim-iting the period in question.Of course, other forms of embedding are pos-sible.
In appositions, the syntactic structure canbe thought of as [NP NP]; as in the case of em-bedded PPs, the TIMEX representation effectivelypromotes the semantics of the first NP to be the se-mantics of the whole.
Again, we show both VALand T-VAL values here, and the relevant T-REL.
(15) <TIMEX2 VAL="1998-12-29"T-VAL="xxxx-xx-xx"15T-REL="EQUAL">my birthday,<TIMEX2 VAL="1998-12-29"T-VAL="xxxx-12-29">Decembertwenty-ninth</TIMEX2></TIMEX2>(16) <TIMEX2 VAL="196" T-VAL="196"T-REL="EQUAL">the 1960s, <TIMEX2VAL="196" T-VAL="PXD">the days offree love</TIMEX2></TIMEX2>Here, the fact that the T-REL is EQUAL causesthe interpreter to combine the values of the twoTIMEXs, with points taking precedence over du-rations.6 ConclusionsIn this paper, we have argued that, in the context ofinterpreting temporal expressions, there is value inidentifying a level of semantic representation thatcorresponds to the meaning of these expressionsoutside of any particular document context.
Thisidea is not in itself new, and many existing sys-tems appear to make use of such representations.However, we have proposed that this level of rep-resentation be made explicit; and by providing anencoding of this level of representation that is anextension of the existing TIMEX2 annotations interms of element attributes and their values, wemake it possible to assess the performance of sys-tems with respect to intermediate values, final val-ues, or both, using standard evaluation tools.We have developed the representation describedhere on the basis of the set of 265 examples pro-vided in the TIMEX2 guidelines (Ferro et al,2005), and this set of annotated examples is avail-able to the community.6 The approach describedhere is implemented in DANTE, a text process-ing system which produces normalised values forall TIMEXs found in a document.
The recogni-tion component of the system, which constructsthe intermediate representations described here, isimplemented via just over 200 rules written in theJAPE language:7 time expressions are thus recog-nised using finite state patterns, but we then ap-ply a syntactic check, using the Connexor parser,to ensure that we have identified the full extent ofeach temporal expression, appropriately extendingthe extent when this is not the case.6See www.clt.mq.edu.au/timex.7JAPE is provided as part of the GATE tools (Cunning-ham et al, 2002).We are currently testing this representation andits means of derivation against the data from the2004 TERN competition.
Our results are broadlycomparable to those achieved by other systems(for example, Chronos or TempEx), though theycan not be compared directly since the reportedevaluations at the TERN competition use datawhich are not public and therefore not availableto us.7 AcknowledgementsWe acknowledge the support of the Defence Sci-ence and Technology Organisation in carrying outthe work described here.ReferencesH.
Cunningham, D. Maynard, K. Bontcheva, andV.
Tablan.
2002.
GATE: A framework and graphicaldevelopment environment for robust NLP tools andapplications.
In Proceedings of the 40th Anniver-sary Meeting of the ACL.L.
Ferro, L. Gerber, I. Mani, B. Sundheim, and G. Wil-son.
2005.
TIDES 2005 Standard for the Anno-tation of Temporal Expressions.
Technical report,MITRE, September.J.
R. Hobbs and F. Pan.
2004.
An ontology of time forthe semantic web.
ACM Transactions on Asian Lan-guage Information Processing, 3(1):66?85, March.I.
Mani, J. Pustejovsky, and R. Gaizauskas, editors.2005.
The Language of Time.
Oxford Univ.
Press.M.
Negri and L. Marseglia.
2005.
Recognition andnormalization of time expressions: ITC-IRST atTERN 2004.
Technical Report WP3.7, InformationSociety Technologies, February.I.
Pratt and N. Francez.
2001.
Temporal prepositionsand temporal generalized quantifiers.
Linguisticsand Philosophy, 24:187?222.J.
Pustejovsky, J. Castan?o, R. Ingria, R. GaizauskasR.
Saur, A. Setzer, and G. Katz.
2003.
TimeML:Robust Specification of Event and Temporal Expres-sions in Text.
In IWCS-5, Fifth International Work-shop on Computational Semantics.E.
Saquete, P.
Mart?
?nez-Barco, and R. Mun?oz.
2002.Recognising and Tagging Temporal Expressions inSpanish.
In Proc.
of LREC?02: Workshop on Anno-tation Standards for Temporal Information in Natu-ral Language, Las Palmas, Spain.F.
Schilder.
2004.
Extracting meaning from tempo-ral nouns and temporal prepositions.
ACM Trans-actions on Asian Language Information Processing,3(1):33?50, March.16
