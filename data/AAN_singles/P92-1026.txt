HANDLING L INEAR PRECEDENCE CONSTRAINTS BY  UNIF ICAT IONJudith Engelkamp, Gregor Erbach and Hans UszkoreitUniversitfit des Saarlandes, Computational Linguistics, andDeutsches Forschungszentrum fiir Kiinstliche lntelligenzD-6600 Saarbriicken 11, Germanyengelkamp@coli.uni-sb.deABSTRACTLinear precedence (LP) rules are widely used forstating word order principles.
They have been adoptedas constraints by HPSG but no encoding in theformalism has been provided.
Since they only ordersiblings, they are not quite adequate, at least not forGerman.
We propose a notion of LP constraints thatapplies to linguistically motivated branching domainssuch as head domains.
We show a type-based encodingin an HPSG-style formalism that supports processing.The encoding can be achieved by a compilation step.INTRODUCTIONMost contemporary grammar models employed incomputational linguistics separate statements aboutdominance from those that determine linear precedence.The approaches for encoding linear precedence (LP)statements differ along several dimensions.Depending on the underlying rammatical theory,different criteria re employed in formulating orderingstatements.
Ordering constraints may be expressed byreferring to the category, grammatical function,discourse r61e, and many other syntactic, semantic,morphological orphonological features.Depending on the grammar formalism, differentlanguages are used for stating the constraints onpermissible linearizations.
LP rules, first proposed byGazdar and Pullum (1982) for GPSG, are used, indifferent guises, by several contemporary grammarformalisms.
In Functional Unification Grammar (Kay1985) and implemented versions of Lexical FunctionalGrammar, pattern languages with the power of regularexpressions have been utilized.Depending on the grammar model, LP statementsapply within different ordering domains.
In mostframeworks, uch as GPSG and HPSG, the orderingdomains are local trees.
Initial trees constitute theordering domain in ID/LP TAGS (Joshi 1987).
Incurrent LFG (Kaplan & Zaenen 1988), functionalprecedence rules apply to functional domains.
ReapeResearch for this paper was mainly carried out inthe project LILOG supported by IBM Germany.
Someof the research was performed in the project DISCOwhich is funded by the German Federal Ministry forResearch and Technology under Grant-No.
: ITW 9002.We wish to thank our colleagues in SaarbriJcken, threeanonymous referees and especially Mark Hepple fortheir valuable comments and suggestions.
(1989) constructs word order domains by means of aspecial union operation on embedded tree domains.It remains an open question which choices alongthese dimensions will turn out to be most adequate forthe description of word order in natural language.In this paper we do not attempt o resolve thelinguistic issue of the most adequate universaltreatment of word order.
However we will present amethod for integrating word order constraints in a typedfeature unification formalism without adding newformal devices.Although some proposals for the interactionbetween feature unification and LP constraints havebeen published (e.g.
Seiffert 1991), no encoding hasyet been shown that integrates LP constraints in thelinguistic type system of a typed feature unificationformalism.
Linguistic processing with a head-drivenphrase structure grammar (HPSG) containing LPconstraints has not yet been described in the literature.Since no implemented NL system has beendemonstrated so far that handles partially free wordorder of German and many other languages in asatisfactory way, we have made an attempt to utilizethe formal apparatus of HPSG for a new approach toprocessing with LP constraints.
However, our methodis not bound to the formalism of HPSG.In this paper we will demonstrate how LPconstraints can be incorporated into the linguistic typesystem of HPSG through the use of parametrizedtypes.
Neither additional operations nor any specialprovisions for linear precedence in the processingalgorithm are required.
LP constraints are appliedthrough regular unification whenever the headcombines with a complement oradjunct.Although we use certain LP-relevant features inour examples, our aproach does not hinge on theselection of specific linguistic criteria for constraininglinear order.Since there is no conclusive evidence to thecontrary, we assume the simplest constraint languagefor formulating LP statements, i.e., binary LPconstraints.
For computational purposes suchconstraints are compiled into the type definitions forgrammatical categories.With respect o the ordering domain, our LPconstraints differ from the LP constraints commonlyassumed in HPSG (Pollard & Sag 1987) in that they201apply to nonsibling constituents in head domains.While LP constraints control the order of nodes that arenot siblings, information is accumulated in trees insuch a way that it is always possible to detect aviolation of an LP constraint locally by checkingsibling nodes.This modification is necessary for the propertreatment of German word order.
It is also needed by allgrammar models that are on the one hand confined tobinary branching structures such as nearly all versionsof categorial grammar but that would, on the otherhand, benefit from a notion of LP constraints.Our approach as been tested with small sets ofLP constraints.
The grammar was written and run inSTUF, the typed unification formalism used in theproject LILOG.L INGUIST IC  MOTIVAT IONThis section presents the linguistic motivation forour approach.
LP statements in GPSG (Gazdar et al1985) constrain the possibility of linearizingimmediate dominance (ID) rules.
By taking the right-hand sides of ID rules as their domain, they allow onlythe ordering of sibling constituents.
Consequently,grammars must be designed in such a way that allconstituents which are to be ordered by LP constraintsmust be dominated by one node in the tree, so that"flat" phrase structures result, as illustrated in figure 1.VmaXso l l te  V maxshouldNP\[nom\] ADV NP\[dat\ ]  NP\[acc\] V 0der Kurier nachher einem Spion den Brief zusteckenthe courier later a spy the letter s l ipThe courier was later supposed to slip a spy the letter.Figure 1Uszkoreit (1986) argues that such flat structuresare not well suited for the description of languagessuch as German and Dutch.
The main reason 1 is so-called complex fronting, i.e., the fronting of a non-finite verb together with some of its complements andadjuncts as it is shown in (1).
Since it is a wellestablished fact that only one constituent can befronted, the flat structure can account for the Germanexamples in (1), but not for the ones in (2),(1) sollte der Kurier nachher einem Spion den Briefzusteckenzustecken sollte der Kurier nachher einemSpion den Briefden Brief sollte der Kurier nachher einemSpion zustecken1Further reasons are discussed in Uszkoreit(1991b).einem Spion sollte der Kurier nachher denBrief zusteckennaehher sollte der Kurier einem Spion denBrief zusteckentier Kurier sollte nachher einem Spion denBrief zustecken(2) den Brief znsteeken sollte der Kuriernachher einem Spioneinem Spion den Brief zusteeken sollteder Kurier nachhernaehher einem Spion den Briefznsteeken sollte der KurierIn the hierarchical tree structure in figure 2, theboxed constituents can be fronted, accounting for theexamples in (1) and (2).V~aXIder Kurier \ [ \ ]!nachherFigure 2I Iden Brief zusteckenBut with this tree structure, LP constraints can nolonger be enforced over siblings.
The new domain forlinear order is a head domain, defined as follows:A head domain consists of the lexical headof a phrase, and its complements and adjuncts.LP constraints must be respected within a headdomain.An LP-constraint is an ordered pair <A,B>of category descriptions, uch that whenever anode cx subsumed by A and a node 13 subsumedby B occur within the domain of an LP-rule (inthe case of GPSG a local tree, in our case ahead domain), cz precedes 13.An LP constraint <A,B> is conventionally writtenas A < B.
It follows from the definition that B cannever precede A in an LP domain.
In the next section,we will show how this property is exploited in ourencoding of LP constraints.ENCODING OF  LP  CONSTRAINTSFrom a formal point of view, we want to encodeLP constraints in such a way that202?
violation of an LP constraint results in unificationfailure, and?
LP constraints, which operate on head domains,can be enforced in local trees by checking siblingnodes.The last condition can be ensured if every node ina projection carries information about which con-stituents are contained in its head domain.An LP constraint A < B implies that it can neverbe the case that B precedes A.
We make use of thisfact by the following additions to the grammar:?
Every category A carries the information that Bmust not occur to its left.?
Every category B carries the information A mustnot occur to its right.This duplication of encoding is necessary becauseonly the complements/adjuncts check whether the pro-jection with which they are combined contains ome-thing that is incompatible with the LP constraints.
Aprojection contains only information about whichconstituents are contained in its head domain, but norestrictions on its left and right context 2.In the following example, we assume the LP-rulesA<B and B<C.
The lexical head of the tree is X 0, andthe projections are X, and X max.
The complementsare A, B and C. Each projection contains informationabout the constituents contained in it, and eachcomplement contains information about what mustnot occur to its left and right.
A complement is onlycombined with a projection if the projection does notcontain any category that the complement prohibits onits right or left, depending on which side theprojection is added.xmax{A, B, C}A X\[left: ~B\] {B, C}B - -\[left: ~C \] XLright: --,AJFigure 3{clc x \[right:-- B\] \[ }Having now roughly sketched our approach, wewill turn to the questions of how a violation of LPconstraints results in unification failure, how the2Alternatively, the projections of the head could aswell accumulate the ordering restrictions while thearguments and adjuncts only carry information abouttheir own LP-relevant features.
The choice betweenthe alternatives has no linguistic implications ince itonly affects the grammar compiled for processing andnot the one written by the linguist.information associated with the projections is builtup, and what to do if LP constraints operate on featurestructures rather than on atomic ategories.V IOLAT ION OF  LP -CONSTRAINTSAS UNIF ICAT ION FA ILUREAs a conceptual starting point, we take a numberof LP constraints.
For the expository purposes of thispaper, we oversimplifiy and assume just the followingfour LP constraints:nora < Oat (nominative case precedesdative case)nora < ace (nominative case precedesaccusative case)Oat < ace (dative case precedes accusativecase)3to < nonpro (pronominal NPs precedenon-pronominal NPs)Figure 4Note that nora, Oat, ace, pro and nonpro are notsyntactic ategories, but rather values of syntacticfeatures.
A constituent, for example the pronoun ihn(him) may be both pronominal and in the accusativecase.
For each of the above values, we introduce anextra boolean feature, as illustrated in figure 5.NOM bool 1 DAT boolACC bootPRO bootNON-PRO booFigure 5Arguments encode in their feature structures whatmust not occur to their left and right sides.
The dativeNP einem Spion (a spy), for example, must not haveany accusative constituent o its left, and nonominative or pronominal constituent to its right, asencoded in the following feature structure.
The featurestructures that constrain the left and right contexts ofarguments only use '-' as a value for the LP-relevantfeatures.FLE \[ACC-\] \]NOM -Figure 6: Feature $mJcture for einem SpionLexical heads, and projections of the head contain afeature LP-STORE, which carries information aboutthe LP-relevant information occuring within theirhead domain (figure 7).\]1 |DAT - LP-STORE |ACC - |PRO - t.NON-PRO -Figure 7: empty LP-STORE203In our example, where the verbal exical head isnot affected by any LP constraints, the LP-STOREcontains the information that no LP-relevant featuresare present.For a projection like einen Brief zusteckt (aletter\[acc\] slips), we get the following LP-STORE.\ [NOM-  ?1 |DAT -LP-STORE/ACC +\[PRO -L.NON-PROFigure 8: LP-STORE of einen BriefzustecktThe NP einem Spion (figure 6) can be combinedwith the projection einen Brief zusteckt (figure 8) toform the projection einem Spion einen Brief zusteckt(a spy\[dat\] a letter\[acc\] slips) because the RIGHTfeature of einera Spion and the LP-STORE of einenBrief zusteckt do not contain incompatibleinformation, i.e., they can be unified.
This is howviolations of LP constraints are checked byunification.
The projection einem Spion einen Briefzusteckt has the following LP-STORE.FNOM- 1 |DAT +LP-STORE |ACC ?/PRO -LNON-PRO +Figure 9: LP-STORE of einem Spion einen Brief zustecktThe constituent ihn zusteckt (figure 10) could notbe combined with the non-pronominal NP einemSpion (figure 6).\ [NOM-  \]\]/DAT - | |LP-STORE/ACC + II|PRO + \] lI_NON-PRO =llFigure 10: LP-STORE of ihn zustecktIn this case, the value of the RIGHT feature of theargument einem Spion is not unifiable with the LP-STORE of the head projection ihn zusteckt becausethe feature PRO has two different atoms (+ and -) asits value.
This is an example of a violation of an LPconstraint leading to unification failure.In the next section, we show how LP-STOREsare manipulated.MANIPULAT ION OF  THE LP -STORESince information about constituents i  added tothe LP-STORE, it would be tempting to add thisinformation by unification, and to leave the initial LP-STORE unspecified for all features.
This is notpossible because violation of LP constraints i alsochecked by unification.
In the process of thisunification, values for features are added that may leadto unwanted unification failure when informationabout a constituent is added higher up in the tree.Instead, the relation between the LP-STORE of aprojection and the LP-STORE of its mother node isencoded in the argument that is added to the projection.In this way, the argument "changes" the LP-STOREby "adding information about itselff.
Arguments there-fore have the additional features LP-IN and LP-OUT.When an argument is combined with a projection, theprojection's LP-STORE is unified with the argument'sLP-IN, and the argument's LP-OUT is the mothernode's LP-STORE.
The relation between LP-IN andLP-OUT is specified in the feature structure of theargument, as illustrated in figure 11 for the accusativepronoun ihn, which is responsible for changing figure7 into figure 10.
No matter what the value for thefeatures ACC and PRO may be in the projection thatthe argument combines with, it is '+' for both featuresin the mother node.
All other features are leftunchanged 3.\[NOM ~\] \]/DARN / /t'P- N/ACCt\] / /IPRO \[ \] / /LNON-PRO ~\]J /\ [NOM \[i\] \]1|DAT~\] 11LP-OUT/ACC + I I/PRO + I ILNON-PRO /Figure 11Note that only a %' is added as value for LP-relevant features in LP-OUT, never a '-'.
In this way,only positive information is accumulated, whilenegative information is "removed".
Positiveinformation isnever "removed".Even though an argument or adjunct constituentmay have an LP-STORE, resulting from LPconstraints that are relevant within the constituent, itis ignored when the constituent becomes argument oradjunct o some head.
Our encoding ensures that LPconstraints apply to all head domains in a givensentence, but not across head domains.It still remains to be explained how complexphrases that become arguments receive their LP-IN,LP-OUT, RIGHT and LEFT features.
These arespecified in the lexical entry of the head of the phrase,but they are ignored until the maximal projection ofthe head becomes argument or adjunct o some otherhead.
They must, however, be passed on unchangedfrom the lexical head to its maximal projection.
When3Coreference variables are indicated by boxednumbers.
\[ \] is the feature structure that contains noinformation (TOP) and can be unified with any otherfeature structure.204the maximal projection becomes an argument/adjunct,they are used to check LP constrains and "change" theLP-STORE of the head's projection.Our method also allows for the description of head-initial and head-final constructions.
In German, forexample, we find prepositions (e.g.
far), postpositions(e.g.
halber) and some words that can be both pre- andpostpostions (e.g.
wegen).The LP-rules would state that a postpositionfollows everything else, and that a preposition precedeseverything else.\[PRE +\] < \ [ \ ]\[ \] < \[POST +\]Figure 12The information about whether something is apreposition or a postposition is encoded in the lexicalentry of the preposition or postposition.
In thefollowing figure, the LP-STORE of the lexical headcontains also positive values.Figure 13: part of the lexical entry of a postposition\[LP-STORE \[pP~REST+\]\]Figure 14: part of the lexical entry of a prepositionA word that can be both a preposition and apostposition is given a disjunction of the two lexicalentries:POST -LP-STO   \[POST ?Ill/LPRE - .ILlFigure 15All complements and adjuncts encode the fact thatthere must be no preposition to their right, and nopostposition to their left.LEFT \[POSTFigure 16The manipulation of the LP-STORE by thefeatures LP-IN and LP-OUT works as usual.The above example illustrates that our method ofencoding LP constraints works not only for verbaldomains, but for any projection of a lexical head.
Theorder of quantifiers and adjectives in a noun phrase canbe described by LP constraints.INTEGRATION INTO HPSGIn this section, our encoding of LP constraints iincorporated into HPSG (Pollard & Sag 1987).
Wedeviate from the standard HPSG grammar in thefollowing respects:?
The features mentioned above for the encoding ofLP-constraints are added.?
Only binary branching rammar rules are used.?
Two new principles for handling LP-constraints areadded to the grammar.Further we shall assume a set-valued SUBCATfeature as introduced by Pollard (1990) for thedescription of German.
Using sets instead of lists asthe values of SUBCAT ensures that the order of thecomplements is only constrained by LP-statements.In the following figure, the attributes needed forthe handling of LP-constraints are assigned their placein the HPSG feature system.I- ,..,:,-,i,,,ti IllcP-otrr\[ I/l/SVNSEM, LOC / L FTC \] //// .R IGHT\ [ \ ]  allLLP-STORE \[ \] J \ ]Figure 17The paths SYNSEMILOCIHEADI{LP-IN,LP-OUT,RIGHT,LEFT} contain information that isrelevant when the constituents becomes anargument/adjunct.
They are HEAD features o thatthey can be specified in the lexical head of theconstituent and are percolated via the Head FeaturePrinciple to the maximal projection.
The pathSYNSEMILOCILP-STORE contains informationabout LP-relevant features contained in the projectiondominated by the node described by the featurestructure.
LP-STORE can obviously not be a headfeature because it is "changed" when an argument oradjunct is added to the projection.In figures 18 and 19, the principles that enforceLP-constraints are given 4.
Depending on whether thehead is to the right or to the left of the comple-ment/adjunct, two versions of the principle are dis-tinguished.
This distinction is necessary because linearorder is crucial.
Note that neither the HEAD featuresof the head are used in checking LP constraints, northe LP-STORE of the complement oradjunct.PHON append(N, l;... \[LP-STORE ~\]\]T \[PHON ~l FLEFTFil llHl"" LP ' sT~LPE?7  \ [~ JHead Complement/AdjunctFigure 18: Left-Head LP-Prineiple4The dots (...) abbreviate he path SYNSEMILOCAL205PHON append(~\],~)\]... \[LP-STORE ~\]  J( PHON \[~\] \ [ R ~  HEAD |LP-IN ri\] III I?
.. \[LP-Otrr ~ l l  \[PHON ~-\] \]u>-s+oREt\] JJ \[... \[L~-STORENJComplement/Adjunct HeadFigure 19: Right-Head LP-PrineipleIn the following examples, we make use of theparametrized type notation used in the grammarformalism STUF (D6rre 1991).
A parametrized typehas one or more parameters instantiated with featurestructures.
The name of the type (with its parameters)is given to the left of the := sign, the feature structureto the right.In the following we define the parametrized typesnom(X,Y), dat(X,Y), pro(X,Y), and non-pro(X,Y),where X is the incoming LP-STORE and Y is theoutgoinl LP-STORE.
"NOM \[ \] \] "NOM + "\]DAT\[\] / DAT\[\] / ) nom ACC\ [ \ ]  /, ACC\[\] / := PROlT1 / PROr~ /NON-PRO~I\] ~ON+RO711CASE nom rs~s~l,..ocri.~.~r rDA T 1\]\]\]t L t L~-'r \[ACC-IIIIFigure 20/I-NoM\[\] \] rNo~rri - I  //DAT \[\] / IDAT+ J dai\[/ACC~I l,l~+cm |\[PROlTI I \[PROITI X LNON-PRO ~ t.NON-PROI" rCASEd~SYNSEMILOC \[HEAD \[LEFT IACC-L \[RIGHT I NOM -Figure 21@w/I-NoMrrl -II-NoMIrl -IX//OATI'7"I / /DAT \[\] / /proll ACC \[\] l , l~m II:=l IPRO \[ \] I IPRO + I |LNON+RO ml LNO~*"O IZll /\[SYNSEmILOC \[HEAO \[LEEr I NON-PRO -\]\]\]Figure 22/\[NOMI'7"I \] I-NOMI'rl \ ] \/|DAT~ J |DAT ~ // non-prol/ACC \[\] ,/ACC~ / / :=| \[PRO I'a"l |PRO\[\] //tLNON-PRO\[ \] LNON-PRO+J \]\[SYNSEMII?
)C \[HEAD\[RIGHT I PRO -\]\]\]Figure 23The above type definitions can be used in thedefinition of lexical entries.
Since the word ihm,whose lexical entry 5 is given in figure 24, is bothdative case and pronominal, it must contain bothtypes.
While the restrictions on the left and rightcontext invoked by dat/2 and pro/2 can be unified 6,matters are not that simple for the LP-IN and LP-OUTfeatures.
Since their purpose is to "change" rather thanto "add" information, simple unification is notpossible.
Instead, LP-IN of ihm becomes the in-coming LP-STORE of dat/2, the outgoing LP-STORE of daft2 becomes the incoming LP-STORE ofpro/2, and the outgoing LP-STORE of pro/2 becomesLP-OUT of ihm, such that the effect of both changesis accumulated.ihm :=LP-IN ri\]\[SYNSEMILOC \[HEAD \[LP_OUT ~ ^~fi\],~b p^ ,o~,~Figure 24: lexical entry for ihmAfter expansion of the types, the following featurestructure r sults.
Exactly the same feature structure hadbeen resulted if dat/2 and pro/2 would have beenexchanged in the above lexical entryI " !
I ' - '1  I ' 1 1 " 1(go(W, 2\[~) A dat(121, 3\[~) ),because the effect of both isto instantiate a '+' in LP-OUT.- - - I-~o~iri I - - -IDAT II /LP-IN/ACC \[~ \[/PRO \[ \] /L~oN-PRol3I i1 |DAT + /SYNSEMILOC HEAD I..P-OUTiACC~\] \]\[PRO + /LNON-PRoITllI \]~lTr \[ACC - -\] /~"  LNON-PRO Riol-rr INOM -\]- - -CASE datFigure 25: expanded lexical entry for ihm5Only the information which is relevant for theprocessing of LP constraints i included in this lexicalentry.6dat/2 means the type dat with two parameters.206The next figure shows the lexical entry for a non-pronominal NP, with a disjunction of three cases.Peter :=\[SYNSEMILOC \[HEAD \[LP'IN \[~ \]\]1LLP-OUTNJJ ^(nom(~,~\]) v dat~,~\])  v acc(\[~,\[~))^ non-pro(\[2~,\[3-bFigure 26COMPILAT ION OF  THE ENCODINGAs the encoding of LP constraints presented aboveis intended for processing rather than grammar writing,a compilation step will initialize the lexical entriesautomatically according to a given grammar includinga separated list of LP-constraints.
Consequently theviolation of LP-constraints results in unificationfailure.
For reasons of space we only present the basicidea.The compilation step is based on the assumptionthat the features of the LP-constraints aremorphologically motivated, i.e.
appear in the lexicon.If this is not the case (for example for focus, thematicroles) we introduce the feature with a disjunction of itspossible values.
This drawback we hope to overcomeby employing functional dependencies in tead of LP-INand LP-OUT features.For each side of an LP-constraint we introduceboolean features.
For example for \[A: v\] < \[B: w\] weintroduce the features a_v and b_w.
This works also forLP-constraints involving more than one feature such as\[,>.o + 1 r,>.o %3CASE accJ < LCASEFor encoding the possible combinations of valuesfor the participating features, we introduce binaryauxiliary features uch as pro_plus_case_acc, becausewe need to encode that there is at least a singleconstituent which is both pronominal nd accusative.Each lexical entry has to be modified as follows:1.
A lexical entry that can serve as the head of aphrase receives the additional feature LP-STORE.2.
An entry that can serve as the head of a phraseand bears LP-relevant information, i.e.
a projection ofit is subsumed by one side of some LP-constraint, hasto be extended by the features LP-IN, LP-OUT, LEFT,RIGHT.3.
The remaining entries percolate the LPinformation unchanged by passing through theinformation via LP-IN and LP-OUT.The values of the features LEFT and RIGHTfollow from the LP-constraints and the LP-relevantinformation of the considered lexical entry.The values of LP-STORE, LP-IN and LP-OUTdepend on whether the considered lexical entry bears theinformation that is represented by the boolean feature(attribute A with value v for boolean feature a_v).entry bears the entry doesn't bearinformation the informationLP-STORE +LP-IN TOP new variable xLP-OUT + coreference to xCONCLUSIONWe have presented a formal method for thetreatment ofLP constraints, which requires no additionto standard feature unification formalisms.
It shouldbe emphasized that our encoding only affects thecompiled grammar used for the processing.
Thelinguist does not lose any of the descriptive means northe conceptual c arity that an ID/LP formalism offers.Yet he gains an adequate computational interpretationof LP constraints.Because of the declarative specification of LP con-straints, this encoding is neutral with respect o pro-cessing direction (parsing-generation).
It does notdepend on specific strategies (top-down vs. bottom-up)although, as usual, some combinations are moreefficient han others.
This is an advantage over theformalization of unification ID/LP grammars inSeiffert (1991) and the approach by Erbach (1991).Seiffert's approach, in which LP constraints operateover siblings, requires an addition to the parsing algo-rithm, by which LP constraints are checked duringprocessing to detect violations as early as possible,and again after processing, in case LP-relevant infor-mation has been added later by unification.
Erbach'sapproach can handle LP constraints in head domainsby building up a list of constituents over which theLP constraints are enforced, but also requires anaddition to the parsing algorithm for checking LPconstraints during as well as after processing.Our encoding of LP constraints does not requireany particular format of the grammar, such as left- orright-branching structures.
Therefore it can beincorporated into a variety of linguistic analyses.There is no need to work out the formal semantics ofLP constraints because feature unification formalismsalready have a well-defined formal semantics.Reape (1989) proposes a different strategy fortreating partially free word order.
His approach alsopermits the application of LP constraints across localtrees.
This is achieved by separating word ordervariation from the problem of building a semanticallymotivated phrase structure.
Permutation acrossconstituents can be described by merging the fringes(terminal yields) of the constituents using theoperation of sequence union.
All orderings imposed onthe two merged fringes by LP constraints are preservedin the merged fringe.Reape treats clause union and scrambling aspermutation that does not affect constituent s ructure.Although we are intrigued by the elegance anddescriptive power of Reape's approach, we keep ourbets with our more conservative proposal.
The mainproblem we see with Reape's trategy is the additional207burden for the LP component of the grammar.
Forevery single constituent that is scrambled out of someclause into a higher clause, the two clauses need to besequence-unioned.
A new type of LP constraints thatrefer to the position of the constituents in the phrase ordependency structure is employed for ensuring that thetwo clauses are not completely interleaved.
Hopefullyfuture research will enable us to arrive at betterjudgements on the adequacy of the different approaches.Pollard (1990) proposes an HPSG solution toGerman word order that lets the main verb firstcombine with some of its arguments and adjuncts in alocal tree.
The resulting constituent can be fronted.The remaining arguments and adjuncts are raised to thesubcategorization list7 of the auxiliary verb above themain verb.
Yet, even if a flat structure is assumed forboth the fronted part of the clause and the partremaining in situ as in (Pollard 1990), LP constraintshave to order major constituents across the two parts.For a discussion, see Uszkoreit (1991b).Uszkoreit (1991b) applies LP principles to headdomains but employs a finite-state automaton for theencoding of LP constraints.
We are currently stillinvestigating the differences between this approach andthe one presented here.Just as most other formal appraoches tolinear pre-cedence, we treat LP-rules as absolute constraintswhose violation makes a string unacceptable.
Sketchyas the data may be, they suggest hat violation ofcertain LP-eonstraints merely makes a sentence lessacceptable.
Degrees of acceptability are not easilycaptured in feature structures as they are viewed today.In terms of our theory, we must ensure that theunification of the complement's or adjunct's left orright context restriction with the head's LP-STOREdoes not fail in case of a value clash, but rather esultsin a feature structure with lower acceptability han thestructure in which there is no feature clash.
But untilwe have developed a well-founded theory of degrees ofacceptability, and explored appropriate formal meanssuch as weighted feature structures, as proposed in(Uszkoreit 1991a), we will either have to ignore order-ing principles or treat hem as absolute constraints.REFERENCES\[DOrre 1991\]Jochen DOrre.
The Language of STUF.
In: Herzog, O.and Rollinger, C.-R.
(eds.
): Text Understanding inLILOG.
Springer, Berlin.\[Erbach 1991\]Gregor Erbach.
A flexible parser for a linguisticexperimentation e vironment.
In: Herzog, O. andRollinger, C.-R.
(eds.
): Text Understanding in LILOG.Springer, Berlin.7Actually, in Pollard's proposal the subcat featureis set-valued.\[Gazdar & PuUum 1982\]Gerald Gazdar, G. K. Pullum.
Generalized PhraseStructure Grammar.
A Theoretical Synopsis.
IndianaLinguistics Club, Bloomington, Indiana.\[Gazdar et al 1985\]Gerald Gazdar, Ewan Klein, G. K. Pullum, Ivan Sag.Generalized Phrase Structure Grammar.
BasilBlackwell, Oxford, UK\[Joshi 1987\]A. K. Joshi.
Word-Over Variation in Natural LanguageGeneration.
In: Proceedings ofAAAI-87, 550-555\[Kaplan & Zaenen 1988\]R. M. Kaplan, A. Zaenen.
Functional Uncertainty andFunctional Precedence in Continental West Germanic.In: H. Trost (ed.
), Proceedings of 4.
0sterreichischeArtificial-InteUigence-Tagung.
Springer, Berlin.\[Kay 1985\]Martin Kay.
Parsing in Functional UnificationGrammar.
In: D. Dowty, L. Karttunen and A.
Zwicky(eds.
), Natural Language Parsing.
CambridgeUniversity Press, Cambidge, UK.\[Pollard 1990\]Carl Pollard.
On Head Non-Movement.
In: Proceedingsof the Symposium on Discontinuous Constituency,Tilburg, ITK.\[Pollard & Sag 1987\]Carl Pollard, Ivan Sag.
Information-based syntax andsemantics.
Vol.
1: Fundamentals.
CSLI Lecture NotesNo.
13, Stanford, CA.\[Reape 1989\]Mike Reape.
A Logical Treatment of Semi-Free WordOrder and Bounded Discontinuous Constituency.
In:Proceedings of the 4th Meeting of the EuropeanChapter of the ACL, Manchester, UK.\[Seiffert 1991\]Roland Seiffert.
Unification-ID/LP Grammars:Formalization and Parsing.
In: Herzog, O. andRollinger, C.-R.
(eds.
): Text Understanding in LILOG.Springer, Berlin.\[Uszkoreit 1986\]Hans Uszkoreit.
Linear Precedence in DiscontinuousConstituents: Complex Fronting in German.
CSLIReport CSLI-86-47.
Stanford, CA.\[Uszkoreit 1991a\]Hans Uszkoreit.
Strategies for Adding ControlInformation to Declarative Grammars.
Proceedings ofACL '91, Berkeley.\[Uszkoreit 1991b\]Hans Uszkoreit.
Linear Prededence in Head Domains.Workshop on HPSG and German, SaarbriJcken, FRG(Proceedings tobe published)208
