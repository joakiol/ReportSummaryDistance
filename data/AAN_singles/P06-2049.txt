Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 377?384,Sydney, July 2006. c?2006 Association for Computational LinguisticsTransformation-based Interpretation of Implicit Parallel Structures:Reconstructing the meaning of vice versa and similar linguistic operatorsHelmut HoracekFachrichtung InformatikUniversit?at des Saarlandes66041 Saarbr?ucken, Germanyhoracek@ags.uni-sb.deMagdalena WolskaFachrichtung Allgemeine LinguistikUniversit?at des Saarlandes66041 Saarbr?ucken, Germanymagda@coli.uni-sb.deAbstractSuccessful participation in dialogue aswell as understanding written text re-quires, among others, interpretation ofspecifications implicitly conveyed throughparallel structures.
While those whose re-construction requires insertion of a miss-ing element, such as gapping and ellip-sis, have been addressed to a certain extentby computational approaches, there is vir-tually no work addressing parallel struc-tures headed by vice versa-like operators,whose reconstruction requires transforma-tion.
In this paper, we address the mean-ing reconstruction of such constructs byan informed reasoning process.
The ap-plied techniques include building deep se-mantic representations, application of cat-egories of patterns underlying a formalreconstruction, and using pragmatically-motivated and empirically justified prefer-ences.
We present an evaluation of our al-gorithm conducted on a uniform collectionof texts containing the phrases in question.1 IntroductionSpecifications implicitly conveyed through paral-lel structures are an effective means of humancommunication.
Handling these utterances ade-quately is, however, problematic for a machinesince a formal reconstruction of the representationmay be associated with ambiguities, typically re-quiring some degree of context understanding anddomain knowledge in their interpretation.
Whileparallel structures whose reconstruction mainly re-quires insertion, such as gapping and ellipsis, havebeen addressed to a certain extent by computa-tional approaches, there is virtually no work ad-dressing parallel structures whose reconstructionrequires transformation.
Several linguistic opera-tors create specifications of this kind, including:the other way (a)round, vice-versa, and analo-gously.
Consider, for example, the following state-ment made by a student in an experiment with asimulated tutoring system for proving theorems inelementary set theory (Benzmu?ller et al, 2003):?If all A are contained in K(B) and this also holdsthe other way round, these must be identical sets?
(K stands for set complement).
The interpreta-tion of the the other way round operator is am-biguous here in that it may operate on immediatedependents (?all K(B) are contained in A?)
or onthe embedded dependents (?all B are contained inK(A)?)
of the verb ?contain?.
The fact that theContainment relation is asymmetric and the con-text of the task ?
proving that ?If A ?
K(B), thenB ?
K(A)?
holds ?
suggest that the second inter-pretation is meant.
Assuming this more plausiblereading enables a more goal-oriented dialog: thetutorial system can focus on a response to the falseconclusion made by the student about the identityof the sets in question, rather than starting a boringclarification subdialog.The above example and several similar othersmotivated us to look more systematically at lexi-cal devices that create specifications of this kind.We address the interpretation of such structures bya well-informed reasoning process.
Applied tech-niques include building deep semantic represen-tations, application of patterns underlying formalreconstruction, and using pragmatically-motivatedand empirically justified preferences.The outline of the paper is as follows: We de-scribe phenomena in question.
Then we illustrateour natural language analysis techniques.
We cate-377gorize underlying interpretation patterns, describethe reconstruction algorithm, and evaluate it.2 Data Collected From CorporaIn order to learn about cross-linguistic regularitiesin reconstructing the underlying form of propo-sitions specified by vice versa or similar opera-tors, we first looked at several English and Ger-man corpora.
These included, among others, theNegra, the Frankfurter Rundschau, the Europarlcorpora and a corpus of tutorial dialogs on math-ematics (Wolska et al, 2004).
We also performedseveral internet searches.
We looked at the Ger-man phrases andersrum and umgekehrt, and theirEnglish equivalents vice versa and the other way(a)round.
We only considered instances where theparallel structure with a pair of items swapped isnot stated explicitly.
We excluded cases of theuse of umgekehrt as a discourse marker, cases inwhich the transformation needed is of purely lex-ical nature, such as turning ?augment?
into ?re-duce?, and instances of andersrum as expressing apurely physical change, such as altering the orien-tation of an object (cf.
the Bielefeld corpus1).The classification of vice versa utterances pre-sented in Figure 1, reflects the role of the itemsthat must be swapped to build the parallel propo-sition conveyed implicitly.
The examples demon-strate that the task of reconstructing the proposi-tion left implicit in the text may be tricky.The first category concerns swapping two caserole fillers or Arguments of a predicate head.
Thismay be applied to Agent and Patient dependents,as in (1), or to two directional roles as in (2).
Inthe last example in this category, complicationsarise due to the fact that one of the argumentsis missing on the surface and needs to be con-textually inserted prior to building the assertionswith exchanged directional arguments.
Moreover,the swap can also work across clauses as in (3).Complex interrelations may occur when the fillersthemselves are composed structures, is in (4),which also makes swapping other pairs of itemsstructurally possible.
In this example, the need forexchanging the persons including their mentionedbody parts rather than the mere body parts or justthe persons requires world knowledge.The second category comprises swapping ap-plied to modifiers of two arguments rather than thearguments themselves.
An example is (5); the ut-1http://www.sfb360.uni-bielefeld.de/terance is ambiguous since, from a purely struc-tural point of view, it could also be categorized asan Argument swap, however, given world knowl-edge, this interpretation is rather infelicitous.
Sim-ilarly to (3), a contextually-motivated enhance-ment prior to applying a swapping operation is re-quired in (6); here: a metonymic extension, i.e.expanding the ?strings?
to ?the strings?
tones?.The third category comprises occurrences of a?mixed?
form of the first two with a modifier sub-stituted for an argument which, in turn, takes therole of the modifier in the reconstructed form.
Thefirst example, (7), has already been discussed inthe Introduction.
The next one, (8), illustrates re-peated occurrences of the items to be swapped.Moreover, swapping the items A and B must bepropagated to the included formula.
The next ex-ample, (9), is handled by applying the exchangeon the basis of the surface structure: swapping theproperties of a triangle for the reconstructed asser-tion.
If a deeper structure of the sentence?s mean-ing is built, this would amount to an implicationexpressing the fact that a triangle with two sidesof equal length is a triangle that has two equalangles.
For such a structure, the reconstructionwould fall into the next category, exchange of theorder of two propositions: here, reversing the im-plication.
In (10), the lexeme ?Saxophonist?
needsto be expanded into ?Saxophone?
and ?Spieler?(?player?
), prior to performing the exchange.The fourth category involves a swap of entirePropositions; in the domain of mathematics, thismay pertain to formulas.
In (11), swapping appliesto the sides of the equation descriptively referredto by the distributivity law.
In (12), this applies tothe arguments of the set inclusion relation, whenthe arguments are interpreted as propositions.
Thelast example, (13), requires a structural recastingin order to apply the appropriate swapping oper-ation.
When the utterance is rebuilt around theRESULT relation, expressed as an optional caserole on the surface, swapping the two propositions?
?branching out of languages?
and ?geographicalseparation?
?
yields the desired result.3 The Interpretation ProcedureIn this section, we illustrate our technical contri-bution.
It consists of three parts, each dealt with ina separate subsection: (1) the linguistic/semanticanalysis, (2) definitions of rules that support build-ing parallel structures, and (3) the algorithm.378Argumentswap ( 1) Technological developments influence the regulatory framework and vice versa.
( 2) It discusses all modes of transport from the European Union to these third countries and viceversa.
( 3) Ok ?
so the affix on the verb is the trigger and the NP is the target.
.
.
.
No; the other way round( 4) Da traf Vo?ller mit seinem Unterarm auf die Hu?fte des fu?r Glasgow Rangers spielenden Ukrain-ers, oder umgekehrtThen Vo?ller with his lower arm hit the hip of the Ukrainian playing for Glasgow Rangers, orthe other way roundModifierswap( 5) Nowadays, a surgeon in Rome can operate on an ill patient ?
usually an elderly patient ?
inFinland or Belgium and vice versa.
( 6) Der Ton der Klarinette ist wirklich ganz komplementa?r zu den Seiteninstrumenten undumgekehrtThe clarinet?s tone is really very complimentary to strings and vice-versaMixedswap( 7) Wenn alle A in K(B) enthalten sind und dies auch umgekehrt gilt, mu?
es sich um zwei iden-tische Mengen handelnIf all A are contained in K(B) and this also holds vice-versa, these must be identical sets( 8) Dann ist das Komplement von Menge A in Bezug auf B die Differenz A/B = K(A) undumgekehrtThen the complement of set A in relation to B is the difference A/B = K(A) and vice-versa( 9) Ein Dreieck mit zwei gleichlangen Seiten hat zwei gleichgro?e Winkel und umgekehrtA triangle with two sites of equal length has two angles of equal size, and vice-versa( 10) .
.
.
Klarinette fu?r Saxophonist und umgekehrt .
.
.. .
.
a clarinet for a saxophonist and vice-versa .
.
.Propositionswap ( 11) Man mu?
hier das Gesetz der Distributivita?t von Durchschnitt u?ber Vereinigung umgekehrtanwendenIt is necessary here to apply the law of distributivity of intersection over union in reversedirection( 12) Es gilt: P (C ?
(A ?B)) ?
P (C) ?
P (A ?B).
.
.
.
.
Nein, andersrum.It holds: P (C ?
(A ?B)) ?
P (C) ?
P (A ?B).
.
.
.
.
No, the other way round.
( 13) Wir wissen, da?
sich Sprachen in Folge von geographischer Separierung auseinanderentwick-eln, und nicht umgekehrtWe know that languages branch out as a result of geographical separation, not the other wayroundFigure 1: Examples of utterances with vice versa or similar operators379contain.PRED : Containment ?
?,?,?TERM:K(B).ACT : Container TERM:A.PAT : ContaineeFigure 2: Interpreted representation of the utter-ance ?all A are contained in K(B)?3.1 Linguistic AnalysisThe linguistic analysis consists of semantic pars-ing followed by contextually motivated embed-ding and enhancements.
We assume a deep se-mantic dependency-based analysis of the sourcetext.
The input to our reconstruction algorithm isa relational structure representing a dependency-based deep semantics of the utterance, e.g.
in thesense of Prague School sentence meaning, as em-ployed in the Functional Generative Description(FGD) at the tectogrammatical level (Sgall et al,1986).
In FGD, the central frame unit of a clauseis the head verb which specifies the tectogram-matical relations (TRs) of its dependents (partici-pants/modifications).
Every valency frame spec-ifies, moreover, which modifications are obliga-tory and which optional.
For example, the utter-ance (7) (see Figure 1.)
obtains the interpretationpresented in Figure 2.2 which, in the context ofan informal verbalization of a step in a naive settheory proof, translates into the following formalstatement: ?
?x.x ?
A?
x ?
K(B)?.The meaning representations are embeddedwithin discourse context and discourse relationsbetween adjacent utterances are inferred wherepossible, based on the linguistic indicators (dis-course markers).
The nodes (heads) and de-pendency relations of the interpreted dependencystructures as well as discourse-level relations serveas input to instantiate the reconstruction pat-terns.
Contextual enhancements (e.g.
lexical ormetonymic extensions) driven by the reconstruc-tion requirements may be carried out.Based on analysis of corpora, we have iden-tified combinations of dependency relations thatcommonly participate in the swapping operationcalled for by the vice versa phrases.
Examples ofpairs of such relations at sentence level are shownin Figure 3.3 Similarly, in the discourse context,arguments in, for example, CAUSE, RESULT ,CONDITION , SEQUENCE or LIST rela-2We present a simplified schematic representation ofthe tectogrammatical representations.
Where necessary, forspace reasons, irrelevant parts are omitted.3PRED is the immediate predicate head of the corre-sponding relation.Exchangeable(ACTOR, PATIENT)Exchangeable(DIRECTION-WHERE-FROM,DIRECTION-WHERE-TO)Exchangeable(TIME-TILL-WHEN,TIME-FROM-WHEN)Exchangeable(CAUSE, PRED)Exchangeable(CONDITION, PRED)Figure 3: Examples of exchangeable relationstions are likely candidates for a swapping opera-tion.
During processing, we use the associationtable as a preference criterion for selecting candi-date relations to instantiate patterns.
If one of theelements of a candidate pair is an optional argu-ment that is not realized in the given sentence, welook at the preceding context to find the first in-stance of the missing element.
Additionally, utter-ance (10) would call for more complex proceduresto identify the required metonymic expansion.3.2 Interpretation PatternsIn order to accomplish the formal reconstructiontask, we define rules that encapsulate specifica-tions for building the implicit parallel text on thebasis of the corresponding co-text.
The rules con-sist of a pattern and an action part.
Patterns arematched against the output of a parser on a textportion in question, by identifying relevant caseroles, and giving access to their fillers.
Moreover,the patterns test constraints on compatibility ofcandidates for swapping operations.
The actionsapply recasting operations on the items identifiedby the patterns to build the implicit parallel text.Within patterns, we perform category member-ship tests on the representation.
Assuming x re-ferring to a semantic representation, Pred(x) isa logical function that checks if x has a Pred-feature, i.e., it is an atomic proposition.
Simi-larly, Conj(x) and Subord(x) perform more spe-cific tests for complex propositions: coordina-tion or subordination, respectively.
Moreover,Pred1(x, x1) accesses the first proposition andbinds it to x1, while Pred2(x, x2) does the samefor the second one.
Within a proposition, argu-ments and modifiers are accessed by Case(x, y),where y specifies the filler of Case in x, and in-dices express constraints on identity or distinc-tiveness of the relations.
Case+ is a generaliza-tion of Case for iterative embeddings, where in-dividual cases in the chain are not required to be3801a.
Argument swap within the same clausePred(x) ?
Case1(x, y) ?Case2(x, z)?Type?
compatible(y, z) ?Exchangeable(Case1, Case2)?Swap(x, y, z, xp)1b.
Argument swap across two clausesConj(x) ?
Case1(x, y) ?Case(y, u) ?Case2(x, z) ?
Case(z, v)?
Swap(x, u, v, xp)2.
Modifier swapPred(x) ?
Case1(x, y) ?
Case+11(y, u) ?Case2(x, z) ?Case+21(z, v)??
(Case1 = Case2) ?
Type?compatible(u, v)?
Swap(x, u, v, xp)3.
Mixed swapPred(x) ?
Case1(x, y) ?
Case11(y, u) ?Case2(x, z)??
(Case1 = Case2) ?
Type?compatible(u, z)?
Swap(x, u, z, xp)4.
Proposition swapSubord(x) ?
Case1(x, y) ?
Case2(x, z) ??
(Case1 = Case2)?
Swap(x, y, z, xp)Figure 4: Reconstruction patternsidentical.
In addition to access predicates, thereare test predicates that express constraints on theidentified items.
The most basic one is Type-compatible(x, y), which tests whether the typesof x and y are compatible according to an underly-ing domain ontology.
A more specific test is per-formed by Exchangeable(Case1, Case2) to ac-cess the associations specified in the previous sec-tion.
The action part of the patterns is realized bySwap(x, y, z, xp) which replaces all occurrencesof x in z by y and vice-versa, binding the result toxp.
Different uses of this operation result in dif-ferent instantiations of y and z with respect to theoverarching structure x.There are patterns for each category introducedin Section 2 (see Figure 4).
All patterns are testedon a structure x and, if successful, the result isbound to xp.
For Argument swap there are twopatterns.
If the scope of the swap is a singleclause (1a), two arguments (case roles) identifiedas exchangeable are picked.
Their fillers must becompatible in types.
If the swapping overarchestwo clauses (1b), the connecting relation must bea conjunction and subject to swapping are argu-ments in the same relations.
For Modifier swap(2), type compatible modifiers of distinct argu-ments are picked.
For Mixed swap (3), a depen-1.
Lexical expansionPred(x) ?
Case1(x, y) ?
Lex?Expand(y, u, Case, v)?Case2(x, z) ?
?
(Case1 =Case2) ?
Type?
compatible(v, z) ?Swap(x, y, Case(u, v), xp) ?
Swap(xp, z, v, xp)2.
Recast optional case as head of an obligatoryPred(x) ?Case1(x, u) ?Case2(x, v) ?Type(u, tu) ?
Type(v, tv)?Recastable(tv, Case2, tu, Case3) ?Case3(x,w) ?
Type?
compatible(v, w)??
(Case1 = Case2) ?
?
(Case1 =Case3) ?
?
(Case2 = Case3)?Swap(x, u, v, xp) ?Add(xp, Case3(v, u)) ?Remove(xp, Case2)3.
Recast an optional case as a discourse relationPred(x) ?
Case(x, y) ?Member(Case, Subords)?Build(Case(xp, Case2(xp, y) ?Case1(xp, Remove(x, y))Figure 5: Recasting rulesdent is picked, as in (1a) and a type-compatiblemodifier of another argument, as in (2).
Proposi-tion swap (4) inverts the order of the two clauses.In addition to the the pattern matching tests,the Argument and the Proposition swap operationsundergo a feasibility test if knowledge is avail-able about symmetry or asymmetry of the relation(the Pred feature) whose cases are subject to theswapping operation: if such a relation is known asasymmetric, the result is considered implausibledue to semantic reasons, if it is symmetric, due topragmatic reasons since the converse propositionconveys no new information; in both cases such aswapping operation is not carried out.To extend the functionality of the patterns, wedefined a set of recasting rules (Figure 5) invokedto reorganize the semantic representation prior totesting applicability of a suitable reconstructionrule.
In contrast to inserting incomplete informa-tion contextually and expanding metonymic rela-tions the recasting operations are intended purelyto accommodate semantic representations for thispurpose.
We have defined three recasting rules(numbered accordingly in Figure 5):1.
Lexical recastingThe semantics of some lexemes conflates themeaning of two related items.
If one of themis potentially subject to swapping, it is not ac-cessible for the operation without possibly af-381Build-Parallel-Structure (x)1.
Determine scopes for applying swap operationsStructures?
?if Pred(x) then Scopes?
{x} elseif Subord(x) ?
Conj(x) ?
Case2(x, z)then Scopes?
{z, x}endif endif2.
Match patterns and build swapped structuresforall Scope1 in Scopes doStructures?
Structures?< X ?
swap(Scope1) >< X ?
swap(Y ?
recast(Scope1)) >end forallreturn Sort(Apply ?
priorities(Structures))Figure 6: Reconstruction algorithmfecting the other so closely related to it.
Therepresentation of such lexemes is expanded,provided there is a sister case with a filler thatis type compatible.2.
Case recastingThe dependency among items may not be re-flected by the dependencies in the linguisticstructure.
Specifically, a dependent item mayappear as a sister case in overarching caseframe.
The purpose of this operation is tobuild a uniform representation, by removingthe dependent case role filler and inserting itas a modifier of the item it is dependent on.3.
Proposition recastingApart from expressing a discourse relationby a connective, a proposition filling a sub-ordinate relation may also be expressed as acase role (argument).
Again, uniformity isobtained through lifting the argument (casefiller) and expressing the discourse relation asa multiple clause construct.Additional predicates are used to implement re-casting operations.
For example, the predicateLex?Expand(y, u, Case, v) re-expresses the se-mantics of y by u, accompanied by a Case rolefilled by v. Type(x, y) associates the type ywith x.
The type information is used to accessRecastable(t1, C1, t2, C2) table to verify whethercase C1 with a t1-type filler can also be expressedas case C2 with type t2.
Build(x) creates a newstructure x.
Remove(x, y) is realized as a func-tion, deleting occurrences of y in x, and Add(x, y)expands x by an argument y.3.3 The Structure Building AlgorithmIn this section, we describe how we build implic-itly conveyed parallel structures based on the def-initions of swapping operations with optional in-corporation of recasting operations if needed.
Theprocedure consists of two main parts (see Fig-ure 6).
In the first part, the scope for applying theswapping rules defined in Figure 4 is determined,and in the second part, the results obtained by ex-ecuting the rules are collected.
Due to practicalreasons, we introduce simplifications concerningthe scope of vice-versa in the current formulationof the procedure.
While the effect of this operatormay range over entire paragraphs in some involvedtexts, we only consider single sentences with atmost two coordinated clauses or one subordinatedclause.
We feel that this restriction is not severefor uses in application-oriented systems.The procedure Build-Parallel-Structure takesthe last input sentence x, examines its clausestructure, and binds potential scopes to vari-able Scopes.
For composed sentences, the en-tire sentence (x) as well as the second clause(Case2(x, z)) is a potential scope for building par-allel structures.In the second part of the procedure, each swap-ping pattern is tested for the two potential scopes,and results are accumulated in Structures.
Thecall < X ?
swap(Scope1) >, with X beingeither Case, Argument, Mixed, or Prop ex-presses building a set of all possible instantiationsof the pattern specified when applied to Scope1.Some of these operations are additionally invokedwith alternative parameters which are accommo-dated by a recasting operation fitting to the pat-tern used, that call being < X ?
swap(Y ?recast(Scope1)) >, where Y is Case, Lex, orProp.
Finally, if multiple readings are generated,they are ranked according to the following priori-tized criteria:1.
The nearest scope is preferred;2.
Operations swapping ?duals?, such as left-right, aregiven priority;3.
Candidate phrases are matched against the corpus;items with higher bigram frequencies are preferred.Linguistic analysis, structure reconstructionpatterns, recasting rules, and the algorithms oper-ating on top of these structures are formulated ina domain-independent way, also taking care thatthe tasks involved are clearly separated.
Hence, itis up to a concrete application to elaborate lexical382semantic definitions required (e.g.
for a saxophon-ist to capture example (10) in Figure 1) to definethe tables Exchangeable and Recastable, and toenhance preference criteria.4 EvaluationWe conducted an evaluation of the parallel struc-ture building algorithm on a sample of sentencesfrom Europarl (Koehn, 2002), a parallel corpus ofprofessionally translated proceedings of the Euro-pean Parliament aligned at the document and sen-tence level.
At this point, we were able to conductonly manual evaluation.
This is mainly due to thefact that we did not have access to a wide-coveragesemantic dependency parser for English and Ger-man.4 In this section, we present our corpus sam-ple and the evaluation results.Evaluation sample To build the evaluation sam-ple, we used sentence- and word-tokenized En-glish German part of Europarl.
Using regular ex-pressions, we extracted sentences with the follow-ing patterns: (i) for English, phrases the other waya*round or vice versa (ii) for German: (ii-1) theword umgekehrt preceded by a sequence of und(?and?
), oder (?or?
), sondern (?but?
), aber (?but?
)or comma, optional one or two tokens and op-tional nicht (?not?
), (ii-2) the word umgekehrt pre-ceded by a sequence gilt (?holds?)
and one or twooptional tokens, (ii-3): the word anders(he)*rum.We obtained 137 sentences.Next, given the present limitation of our algo-rithm (see Section 3.3), we manually excludedthose whose interpretation involved the precedingsentence or paragraph,5 as well as those in whichthe interpretation was explicitly spelled out.
Therewere 27 such instances.
Our final evaluation sam-ple consisted of 110 sentences: 82 sentences inEnglish?German pairs and 28 German-only.64In the future, we are planning an automated evaluation inwhich as input to the implemented algorithm we would passmanually built dependency structures.5For example, sentences such as: ?Mr President , concern-ing Amendment No 25 , I think the text needs to be lookedat because in the original it is the other way round to how itappears in the English text .
?6The reason for this split is that the English equivalentsof the German sentences containing the word umgekehrt maycontain phrases other than the other way round or vice versa.Depending on context, phrases such as conversely, in or thereverse, the opposite, on the contrary may be used.
Here, wetargeted only the other way round and vice versa phrases.
Ifthe German translation contained the word umgekehrt, andthe English source one of the alternatives to our target, in theevaluation we included only the German sentence.Category No.
of instancesArg 64Modifier 5Arg/Mod 3Mixed 6Arg/Mixed 2Prop 1Arg/Prop 1Lex 18Other 10Total 110Table 1: Distribution of patternsDistribution of categories We manually cate-gorized the structures in our sample and markedthe elements of the dependency structures that par-ticipate in the transformation.
Table 1. presentsthe distribution of structure categories.
We ex-plicitly included counts for alternative interpreta-tions.
For example Arg/Mod means that eitherthe Argument or Modifier transformation can beapplied with the same effect, as in the sentence?External policy has become internal policy, andvice versa?
: either the words ?external?
and ?in-ternal?
may be swapped (Modifier), or the wholeNPs ?external policy?
and ?internal policy?
(Ar-gument).
Lex means that none of the patterns wasapplicable and a lexical paraphrase (such as use ofan antonym) needed to be performed in order to re-construct the underlying semantics (i.e.
no paral-lel structure was involved).
Other means that therewas a parallel structure involved, however, none ofour patterns covered the intended transformation.Evaluation results The evaluation results arepresented in Tables 2. and 3.
Table 2. shows anoverview of the results.
The interpretation of theresult categories is as follows:Correct: the algorithm returned the intended reading asa unique interpretation (this includes correct identi-fication of ?lexical paraphrases?
(the Lex categoryin Table 1.);Ambig.
: multiple results were returned with the intendedreading among them;Wrong: the algorithm returned a wrong result (if multi-ple results, then the intended one was not included);Failed: the algorithm failed to recognize a parallel struc-ture where one existed because no known patternmatched.Table 3. shows within-category results.
Here, Cor-rect result for Other means that the algorithm cor-rectly identified 8 cases to which no current pat-tern applied.
The two Wrong results for Other383Result No.
of instancesCorrect 75Ambig.
21Wrong 4Failed 10Total 110Table 2: Evaluation resultsCategory Correct Ambig.
Wrong Failed TotalArg 46 17 0 1 64Mod 3 2 0 0 5Arg/Mod 3 ?
0 0 3Mixed 4 2 0 0 6Arg/Mixed 2 ?
0 0 2Prop 1 0 0 0 1Arg/Prop 0 ?
0 1 1Lex 16 0 2 0 18Other 8 0 2 0 10Table 3: Within-category resultsmean that a pattern was identified, however, thispattern was not the intended one.
In two cases(false-negatives), the algorithm failed to identifya pattern even though it fell into one of the knowncategories (Argument and Prop).Discussion The most frequently occurring pat-tern in our sample is Argument.
This is often aplausible reading.
However, in 3 of the 4 false-positives (Wrong results), the resolved incorrectstructure was Arg.
If we were to take Arg as base-line, aside from missing the other categories (al-together 12 instances), we would obtain the finalresult of 63 Correct (as opposed to 96; after col-lapsing the Correct and Ambig.
categories) and15 (as opposed to 4) Wrong results.Let us take a closer look at the false-negativecases and the missed patterns.
Two missed knowncategories involved multiple arguments of themain head: a modal modifier (modal verb) and anadditive particles (?also?)
in one case, and in theother, rephrasing after transformation.
To improveperformance on cases such as the former, we couldincorporate an exclusion list of dependents that thetransformation should disregard.Among the patterns currently unknown to thealgorithm, we found four types (one instance ofeach in the sample) that we can anticipate as fre-quently recurring: aim and recipient constructsinvolving a head and its Aim- and Beneficiary-dependent respectively, a temporal-sequence inwhich the order of the sequence elements is re-versed, and a comparative structure with swappedrelata.
The remaining 6 structures require a moreinvolved procedure: either the target dependent isdeeply embedded or paraphrasing and/or morpho-logical transformation of the lexemes is required.5 Conclusions and Future ResearchIn this paper, we presented techniques of for-mal reconstruction of parallel structures implicitlyspecified by vice versa or similar operators.
Weaddressed the problem by a domain-independentanalysis method that uses deep semantics and con-textually enhanced representations, exploits re-casting rules to accommodate linguistic variationsinto uniform expressions, and makes use of pat-terns to match parallel structure categories.Although we dedicated a lot of effort to buildinga principled method, the success is limited withrespect to the generality of the problem: in somecases, the scope of reconstruction overarches en-tire paragraphs and deciding about the form re-quires considerable inferencing (cf.
collection athttp://www.chiasmus.com/).
For our purposes, weare interested in expanding our method to otherkinds of implicit structures in the tutorial context,for example, interpretations of references to analo-gies, in the case of which structure accommoda-tion and swapping related items should also beprominent parts.ReferencesC.
Benzmu?ller, A. Fiedler, M. Gabsdil, H. Horacek, I.
Kruijff-Korbayova?, M. Pinkal, J. Siekmann, D. Tsovaltzi, B.Q.Vo, and M. Wolska.
2003.
A Wizard-of-Oz experimentfor tutorial dialogues in mathematics.
In SupplementaryProceedings of the 11th Conference on Artificial Intelli-gence in Education (AIED-03); Vol.
VIII.
Workshop onAdvanced Technologies for Mathematics Education, pages471?481, Sydney, Australia.P.
Koehn.
2002.
Europarl: A multilingual corpus for evalua-tion of machine translation, Draft, Unpublished.P.
Sgall, E.
Hajic?ova?, and J. Panevova?.
1986.
The meaning ofthe sentence in its semantic and pragmatic aspects.
ReidelPublishing Company, Dordrecht, The Netherlands.M.
Wolska, B.Q.
Vo, D. Tsovaltzi, I. Kruijff-Korbayova?,E.
Karagjosova, H. Horacek, M. Gabsdil, A. Fiedler, andC.
Benzmu?ller.
2004.
An annotated corpus of tutorialdialogs on mathematical theorem proving.
In Proceed-ings of the 4th International Conference on LanguageResources and Evaluation (LREC-04), pages 1007?1010,Lisbon, Potugal.384
