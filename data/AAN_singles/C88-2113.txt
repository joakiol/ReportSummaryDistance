Parallel Intersection and Serial Composit ion of Finite State TransducersMike REAPE 13 and Henry THOMPSON t23Centre for Cognitive Science lUniversity of Edinburgh2 Buccleuch PlaceEdinbm'gh EH8 9LWScotlandDepartment of Artificial Intelligence 2 andCentre for Speech Tectmology Research 3University of Edinburgh80 South BridgeEdinburgh EH1 1HNScotlandAbstractWe describe a linguistically expressive and easy to implementparallel semantics for quasi-deterministic f nite state transducers(FSTS) used as acceptors.
Algorithms are given for detemain-ing acceptance of pairs of phoneme strings given a parallelsuite of such transducers and for constructing the equivalentsingle transducer by parallel intersection.
An algorithm forconstructing the serial composition of a sequence of such trans-ducers is also given.
This algorithm can produce generally non-detemlinislic FSTS and an algorithm is presented for eliminat-ing the unacceptable nondeterminism.
Finally, the work is dis-cussed in the context of other work on finite state transducers.1.
Introduct ionFinite state transducers (FSTS) have been shown to be usefulfor modelling morphophonemic processes in an efficient way in(Karttunen 1983), (Kay 1983), (Kaplan and Kay 1985), (Kart-tunen, Koskenniemi and Kaplan 1987) and (Koskenniemi 1983)(but cf.
(Barton 1986b), (Barton 1986a)).
This paper presents alinguistically expressive parallel semantics for quasi-deterministic FSTS used as receptors and algorithms for takingthe parallel intersection and serial composition of such FSTS.The intersection and composition algorithms generate compositeFSTS from sets of FSTS with the same semantics as the paral-lel semantics of the set.
?2 presents the parallel semantics; ?3discusses the parallel intersection algorithm.
?4 discusses theserial composition algorithm.
?5 discusses the elimination ofunacceptable general nondete~rninism which can arise fi'om thecomposition algorithm.
?6 discusses the implementation of theinterpreter which is based on the semantics presented here andthe three algorithms.
?7 discusses this research in the contextof other work in this area and draws some conclusions.2.
A Paraflel Semantics for Finite State TransducersIn the discussion that follows, we assume that the reader isfamiliar with the work of Karttunen and Koskenniemi on FSTSand with finite state automata (FSA) generally.
The notationused is slightly different than that usually used to describe FSAbut is more convenient for our purposes.
Also, rather than dis-cuss the algorithms directly, we give their semantics.
In con-trast to Karttuuen and Koskenniemi's work, no higher level ruleformalism is used.
FSTS are stated directly.An FST, M, is a pair <NC~,Z> where N ~ is a set of start stateurines and Z is a set of states.
A state Z i ~ Z is a triple<N,T,A> where N is the name of the state, T is an orderedsequence of transitions Ti, l<i<n, n = ITI and A is the truthvalue T if the state is au accepting state and the troth value F ifit is a nonaceepting state.
(The notion of final state is notrelevant here.
Only the accepting/nonaccepting distinction isimportant.)
A transition T i ~ T is a pair <~i,Ni> where q5 i is atransition pair <~x,~0~>.
An element of a transition pair iseither a phoneme, a phoneme class name, the symbol = or theempty string e. A phoneme is a character and is a member ofthe alphabet set.
A phoneme class is a set of phonemes.
Wewill refer to phoneme classes and their names interchangeably.N i is the new state, cI) i = <O~,~0P~> subsumes ~t = <~xt,t)of> ifo~i subsumes Ox, and ~0 i subsumes ~I~0,.
qbi subsutnes (Pt if ~i = ~tor (~i = = or (~i is a phoneme class and ~t ~ q~i'The transition type or type a:(~) of a transition pair fi5 =<@,~P> is (x.x)' if both ~;~ and 0 o are phoneme classes and isx(@).,~(~o) otherwise where x(~) is the phoneme type of q~.
(xis not a variable in this and the following definitions.
)I !
if ~ ="~(~) = if ~ = =otherwiseThe set of types, TYP, and tile set of final types, TYP0~, arcdefined below.TYP = {=.= x.= =.x x.E E.xx.x =.e e.= (x.e)' (e.x)' (x.x)'}TYP~ = {(x.x)' x.x .
.
.
.
.
x x.= x.e c.x e.e}Some examples should clarify the definitions.
<s,s> is of typex.x.
<s,z> is of type x.x.
<sih,sih> is of type (x.x)' if sib is aphoneme class name.
<=,=> is of type =.=.
<=,e.> is of type535The type intersection of a set of transition pairs {~i I l<i<n} isnO'ff?,~) where n x is a partial function from pairs of u'ansitioni= Itypes to transition types as defined below.
"q n '  "t 2 if x~ n,'  x 2 e TYP"~a n "~ = undefined otherwisen,~' is defined as follows.
(1) oc- n x' =:13 = (a.\[3)'(2) ~.= n .
/ (&.~) '  = (a.~)'(3) =.f~ %'  (cc\[~)' = (a.D'(4) tx.D n,~' (a.\[3)' = a.~(5) a.\[~ %' c~.l~ = a.~(6) =.= nx'  a.L3 = ot.13(7) c~.= n.~' a.l~ = a.I 3(8) =.1~ %' c~.~ = a.l~(9) a.~ c~' ~i.~, = 5.~/c~" a.\[~An unprimed type "c indicates that the transition type is sup-ported.
A primed type q:' indicates that the transition type isunsupported.
That is, there have been no e.x, x.e or x.x types intim set of intersected types that produced the primed type.
(1) isthe origin of unsupported types.
(2) and (3) state that neitherct.= nor =.ct can support a transition.
(4) states that an unprimedtype supports the corresponding primed type.
(5) states that theintm'section of two identical .types is the same type.
(6) Statesthat the intersection of =.= and any type is that type.
(7) and (8)state that the intersection of either =.o~ or co.= and a supportedtype is a supported type.
(9) states that n ,  c' is commutative andthat the commutative closure of (1)-(8) also holds.A set of transition pairs {cI)i} which subsmne (1"5 t is licensedw.r.t.
(I) t if LICENSED({Oi},Ot) holds.LICENSED({Oi},O t) ifn,t'ffOi) e TYP and(nx'c(Oi) e {x.x x.e e.x} orn,~x(Oi) e {(x.x)', =.=, =.x  x.=} andOt = <?
'?> )This definition implements the "daisywheel".
That is, although aset of transition pairs {Oi} is excluded in the general case if thetype intersection of {O i} ~ {(x.x)', =.=, =.x x.=} we make anexception if qb t is a pair of identical phonemes.
So, for exam-ple, if the type intersection of {O i} is =.x and ~t = <s,s> then{~i} is licensed.
In practical terms, this means that the userdoes not need to encode a large set of "default" transition pairsof the foma <0,?> for each state.
This effect is usuallyachieved, in other FST fomaalisms in the rule compiler.
How-ever, such a compilation depends on the existence of an alpha-bet declaration.
As we do not use a rule compiler, we havefound it more convenient o build the effect into the parallelsemantics.A machine, M in state N accepts a phoneme pair ?
t withaccepting transition pair ?
and new state N' ifACCEPTS (M,N,~t,~,N') holds.ACCEPTS(M,N,Ot,O,N' ) ifM = <Net,Z> andZ i = <N,T,A> e Z and3T k = <Ok,Nk> e~ P(T) )Ok subsumes Ot and= <,I,j,Nj> P(r)1Sj<k and ~j subsumes ?
r(ACCEPTS replaces the more usual state transition function ft.)P(T) is a total function that takes the transition sequence T asargument and returns a transition sequence T' containing thesame set of elements as T with the following ordering of theelements of T'.
All =.= transitions follow all non-=.= transi-tions.
All =.~ or f~.= transitions precede all =.= transitions andfollow all other transitions.
Relative ordering of transitions inT' is as in T otherwise.The definition above implies that transition precedence is bycitation order with two exceptions.
All transition pairs whichhave non-= first and second elements take precedence over anypairs of the form <o~,=> and <=,a> and all non-<=,=> transitionpairs take precedence over a transition pair of the form <=,=>.A set of machines {Mi} in states {Ni} accept a phoneme pairt~ t with accepting transitions pairs {Oi} and new states {Ni' } if.
( t S-ACCEPTS({Mi},{NiL I)t,{N i }) holds.S-ACCEPTS ({ Mi}, { Ni},Ot, { Ni'}) ifVi 30 iACCEPTS ({Mi}, {Ni},Ot, {Oi},{Ni'}) andLICENSED({qDi},Ot}).A string is a sequence of phoneme pair elements.
A string pair<It,v> is a pair of strings g and v. <oql3> is a prefix of thestring pair <g,v> and the string pair <~t',v'> is the correspond-ing suffix of <It,v> if CONCAT(<oq~>,<It',v'>,<g,v>) holds.CONCAT(<0~,~>,<g',v'>,<I.t,v>) if= ~g '  andv = 13v' and~ (a  = e A f~ = e).In particular, this means that prefixes can be of the schematictypes x.x, x.e and e.x but not e.e.A set of machines {/Vii} in states {Ni} accept a string pair<It,v> with new states {Ni' } if STR ~ACCEPTS({ Mi}, { Ni} ,<ll,v>, {Ni'})holds.STR-ACCEPTS({M i} ,{Nil ,<e,e>, { Nil).STR-ACCEPTS ({Mi}, { Ni},<II,v>, {Ni'}) if~<OC,\[~> <\[x',V'> 3Ni"CONCAT(<~,I3>,<~',V'>,<g,V>) andS-ACCEPTS({ Mi}, {Ni},<a,13>, { Ni '}) andSTR-ACCEPTS({ M i}, { Ni"},<l.t',v'> , { Ni' }).The following definition is the top-level relation of our seman-tics.
A set of machines {Mi} accepts a string pair <it,v> ifACCEPTS({Mi},<It,v> ) holds.536ACCEPTS({ Mi},<l.t,v> ) ifVM i = <NC~,E> e {Mi}~Ni a E N a~Z i = <Ni,T,T> ~ ESTR-ACCEPTS ( { Mi}, {N~" },<bt,V>, { Ni} ),The reader may have noticed that there is no explicit declara-tion of the set of phonemes which define the alphabet of theFSTS.
This is the reason that no mention was made of thealphabet in the definition of an FST above as is usually donefor finite state machines.
This complicates the algorithms to bediscussed below a groat deal.
In particular, phoneme classescannot in geaeral be replaced by their definitions, the = notationcannot be compiled away nor can transition sequences bereplaced by transition sequences in which d0 ~ and ~P are bothphonemes fi)r every transition pair ?
= <d?k,~)P>.
However,explicitly declaring the alphabet is unnecessm'y and a certainflexibility ill the semantics of the FSTS is gained by not doingSO.3.
The Parallel Intersection AlgorithmAs (Karttnnen and Wittenburg 1983) points out, it is possible tomerge a set of pm'allel FSTS into one large FST.
In the worstcase, the number of states of tile intersected FST is the productof the numl~er of states of the intersected FSTS.
In theory, thisnumber can be very large.
Ill practice, it is usually muchsmaller becaase the intersection of most state pairs is undefined.Parallel intersection is associative and commutative.
Thus, tiletbllowing detinition of the intersection of a sequence of FSTSis adequatenN<\[VI1 ' ' '  Mn> = ("h Mi'i=1The intersection M 1 c~ M2, of two FSTSM t := <N~,Y-.,I> and M 2 = <N~,Y_,2>is their cross product<N{* x N~',E 1 x Z2>The cross product of two state name sets {N i' \[ l_<i_<n} andp tt,.~ {Nj" \] l<i_<_m} is tile set {<N i ,Nj~ .
\] l_<i_<n and l<_j_<m},The intersection Y'<I,a> = E1 ~ 22 of two statesE 1 := <NpT1,AI> and E 2 = <Na,Ta,A2>is)2<1,2 >= <<NI,N2> , T 1 ?
"1"2, A 1 A A2>,I,e., the nanm of the intersection is the pair of the names of thetwo intersected states.
The intersection is an accepting state ifboth of the intersected states are accepting states and is anonaccepting state otherwise.The cross product of two transition seqnences T 1 and T 2 is asequence T t x 'I'~ = <T',_<> where T' is tile set defined belowand -<- is a total  order ing.T' = {T k \[ T i e T 1 and Tj e T 2 andT k = T i n Tj is defined}.< can be any total ordering which satisfies the following partialordering on T':VT m ~ T' 9V m=T in~I  iandr  iE  r l andT je  T eVT  e T' -9T n=T oc3 TpandT O c T 1 andTp ~ T 2( I l l  < n go-),-7 (o < i and p _< j) and-1 (o -< i and p < j))In particular, the ordering of tile following sequence satisfiesthe partial order:<T<III > ' ' "  T<l,n > .
.
.
T<m,l > T<m,n>>where T<i,j > names tile intersection of the transitions T i ~ T land Tj e T 2, m = IWl\[ and n = IT2\],The intersection T i c5 Tj of two transitions T i = <t~i,Ni> and Tj= <(bj,5> is <tl) i (5 q)'.l' <Ni'Nj>>'If (1) i = .<(zi,\[~i> and (l)j = <~,\[3j> then ?
i (-i ~j is defined as fol-lows<a i n cry, ~i n \[3i> if ~(d)i) c~' x(Oj) a 7'YP4~ i n cI~) = undefined otherwiseThe intersection of two phoneme pair elements x and y isdefined as followsx ny=x ifx =yx ify = =y ifx = =x if y is a phoneme class and x c: yy ifx is a phoneme class and y ~ xx ?~ y if both x and y are phoneme classesundefined otherwiseThe composite FST is nondeterministic with respect to ~; andthe set of start states and is deterministic otherwise.
Allphoneme class and = notation is preserved in the intersectedtransitions.
This is actually quite useful for debugging pur-poses.
In general, it will often be the case that elements of allintersected transition sequence are subsumed by preceding ele-ments in the same sequence.
It is a simple matter to removesuch transitions (although this is not necessary as they areunreachable).
Furthermore, it is often the case that transitionswith phoneme classes are partially subsumed by preceding ele-ments in the same transition sequence.
It is straightforward tosplit the phoneme class transitions into disjoint phoneme classtransitions which are not subsumed by preceding transitions inthe same sequence.
Our implementation uses both of theseoptimisations.Notice that the intersection algorithm does not "compile in" theeffect of the daisywheel.
This is because the semantics of a setof parallel FSTS includes the daisywheel and so the compositeFST need not have its effect "compiled in".
Furthermore, theintersection algorithm must not build in the daisywheel becausethe composite FST would have the wrong parallel semantics537and could not be correctly used as input to tbe intersectionalgorithm.
(I.e., we cannot eliminate = or phoneme classesfrom any transition pairs.
)The cross product of two transition sequences T 1 and T 2 is asequence T 1 x T 2 = <T',<> where T' is defined below and < isa total ordering.4.
Tile Serial Composition AlgorithmJust as parallel FSTS can be intersected, a cascade of FSTSmay be composed into one FST.
Such a cascade is most usefulfor representing ordered sequences of rules.
For example, atheory which orders assimilation processes before morpho-phonemic processes could be modelled by a cascade of twoparallel sequences of transducers where the first parallelsequence models the assimilation processes and the secondmodels the morphophonemic processes.
As is the case withparallel intersection, the number of states of a composed FST isthe product of the number of states of the composed FSTS inthe worst case.
Again, the number of states in the composedFST is usually much smaller in practice.Serial composition is different in several ways from the parallelintersection problem.
Fit'st, each FST in the composition musthave the parallel semantics of ?2 "compiled in" before it iscomposed.
This means that type intersection as defined forparallel intersection is irrelevant for composition.
On the otherhand, we must include the effect of the daisywheel before com-position on any transition pair <Op;~,OpP> where both gpX and ?0are phoneme classes.
As a result, we can replace all such tran-sitions with one or more transitions <?x,, CO,> ?where ?~' and~ '  are both phonemes.
This simplifies the composition algo-rithm considerably.
However, we must still check that the typeof each transition pair in each FST to be composed is an ele-ment of TYP e .
(In particular, users may encode illegal transi-tions.)
Also, although serial composition is associative, unlikeparallel intersection, it is not commutative.
So, a cascade ofFSTS must be composed in the same order as they appear inthe cascade.The composition of a sequence of FSTS *<M 1 .
.
.
Mn> isdefined byf M ifn=l *<211/t ' "  M>:  *<M l .
.
.
M.t>* M ifn>l kT '= {TklT i ~ T I and T je  T 2and T k = T i * Tj is defined}.< must satisfy the same partial ordering as that given for paral-lel intersection (modulo the substitution of * for n).
Again, weuse the ordering given in ?3.If Z i = <Ni ' ,T I ,A i> and Ej = <Nj ' ,T2,A j> and T i E T 1 and TjT 2 then the composition T i * Tj of two transitions T i = <Oi,Ni>and Tj = <~j,Nj> is defined byr , *~=<<=,=>,<NvNj >><<~,I3>,~/vF><<a,~>.<v~ ~v/>><<~,~>,~,':v~>><<a,~>,~v, Svj>>undefinedif ~/= <=,=> and Oj = <=,=>if Oi = <=,=> and ~ = <~,13>and <<a;0t>,Nk> fl T 1 ~ k<iif ?
i = <a,13> and Oj = <=,=>and <<13,13>,Nk> ?
T 2 ~ k<jif Ot = <a,e>if Oj = <e,\[~>if O i = <a.13> and O/= <13,$>otherwise(The fourth and fifth clauses are due to Martin Kay (Kay1983).
)Note that if ?
i = <a,e> and Oj = <e,13> then both<<(z,e>,<Ni,N'j>> and <<a,~>,<N'i,Nj>> are defined.
Their?
order relative to each other is irrelevant since the semantics inondetemainistic with respect o e transitions.
Also, note thatthe second and third clauses dealing with <=,=> transitions arefurther constrained to eliminate any "instantiation" of <=,=>which has lower precedence than a transition with the "instan-tiati0n" in the transition sequence which contains <=,=>.
E.g., if<<=,=>,Nj> e T 1 and <<=,=>,Nil * <<b,c>,Nk> =<<b,c>,<Nj,Nk>> and there is a transition <<b,b>,Ni> e T 1 andi<j then <<b,b>,Ni> takes precedence over <<=,=>,Nj> and sothe composition is undefined.The composition M 1 * M 2 of two FSTSM 1 =<N~,Y.I> and/Vl 2 =<N~,E2>is their cross product<v~ x te~,X 1 x X2>The composition Z<l,2 > = Z 1 * Z 2 of two statesFinally, note that nondetemainistic ransition sequences may bedefined.
That is, two or more transitions with the same transi-tion pair may be specified which have different new states.
E.g.,the composition of the transitions <<a,b>,sl> and <<b,c>,tl> is<<a,c>,<sl,tl>> but the composition of the transitions<<a,d>,s2> and <<d,c>,t2> is <<a,c>,<s2,t2>>.
Both composi-tions have the transition pair <a,c> but the new state is the<sl,t l> for the first transition and <s2,t2> for the second transi-tion.
This form of nondeterminism is genuine and must beeliminated if the quasi-deterministic semanties that we haveoutlined is to be maintained.X 1 = <NI,T1,AI> and Z z = <N2,T2,A2> 5.
The  Determin isa t ion  A lgor i thmisZ<l,2 > = <<Ni,N2>, T 1 x T2, A 1 A A2>I.e., the name of the composition is the pair of the names of thetwo composed states.
The composition is an accepting state ifboth of the composed states are accepting states and is a nonae-cepting state otherwise.As (Barton 1986b) points out, FSTS used as aeceptors arefinite-state machines (FSM) with an alphabet of pairs of charac-ters.
As such, an equivalent deterministic FST can be con-strutted.for any nondeterministic FST used as an acceptor sincea deterministic FSM can always be constructed that acceptsexactly the same language as a nondeterministic FSM(Hoperoft and Ullman 1979).
Because the serial compositionalgorithm may produce nondeterministic FSTS, a determinisa-tion algorithm is required to produce equivalent deterministicFSTS.538The algorithm collapses all transitions in a transition :~equencewith common transition pairs but different new states into onetransition with a complex new state name.
This new state nameis the name of a state which is the parallel intersection of allthe new states" of the transitions with the common transitionpairs.
The only fundamental difference between this type ofparallel inteisection and the definition presented in ?
3 is that astate in the intersected FST is an accepting state if any of theintersected states is an accepting state.Although it may not be obvious, the determinisation algorithmis guaranteed to terminate.
The following argument showswhy.
The new states of simple states are always simple statesso complex states are the intersection of only simple states.The number of simple states is finite.
The number of transi-tions within a simple state is finite.
It follows that the numberof transitions in a transition sequence with common transitionpairs is bounded, the number of possible complex states isbounded and the size of a complex state is bounded.
Therefore,there is an upper bound on the size of the equivalent deter-ministic machine and so the determinisation algorithm isguaranteed to terminate.6.
ImplementationThe second author designed the parallel semantics and imple-mented an interpreter for it in Interlisp-D on a Xerox 1186.
Thefirst author designed and implemented the parallel intersection,serial composition and determinisation algorithms in LucidCommon Lisp on a Masscomp MC5700.
The programs exhibitreasonable performance (about en minutes using compiled Lispfor composite FSTS with approximately 160 states).7.
Conclusions and Related WorkAlthough it has been reported in the literature that the algo-rithms described here have been implemented, we are unawareof the publication of any such algorithms to date.
The algo-rithms themselves are of interest because they formalise thesemantics of finite state transducers.
Also, these algorithms aresimilar to graph unification algorithms.
Specifically, the paral-lel intersection and determinisation algorithms can be viewed ascyclic graph unification and graph disjunction elimination algo-rithms respectively.As Barton points out, a determinisation algorithm like the onepresented here will not work on transducers used for generationand recognition (as opposed to simple acceptance).
He claimsthat many FSTS are not determinisable at all.
The current workprovides a formal basis on which to investigate the class ofdetemlinisable transducers used for generation and recognition.9.
ReferencesBarton, G. E. (1986) Constraint Propagation in KimmoSystems.
In Proceedings of the 24th Annual Meeting ofthe Association for Computational Linguistics, ColumbiaUniversity, New York, N.Y., June, 1986, pp45-52.Barton, G. E. (1986) Computational Complexity in Two-LevelMorphology.
In Proceedings of the 24th AnnualMeeting of the Association for ComputationalLinguistics, Columbia University, New York, N.Y.,June, 1986, pp53-59.Hopcmft, J. and Ulhnan, J. D. (1979) Introduction to AutomataTheory, Languages and Computation.
Reading, Mass.
:Addison-Wesley.Kaplan, R. and Kay, M. (1985) Phonological rules and finite.-state transducers.Karttunen, L. (1983) KIMMO: A general morphologicalprocessor.
Texas Linguistic Forum, 22, 165-186.Karttunen, L. and Wittenburg, K. (1983) A two-.levelmorphological analysis of English.
Texas LinguisticForum, 22, 217-228.Karttunen, L., Koskenniemi, K. and Kaplan, R. (1987) ACompiler for Two-level Phonological Rules.
TechnicalReport, Center for the Study of Language andInformation, Stanford University, 1987.Kay, M. (1982) When meta-rules are not recta-rules, inSparck-Jones, K. and Wilks, Y.
(cds.)
Automatic Nat,ra!Language Parsing, pp74-97.
Chichester: EllisHorwood.
Also in M Badow, D Flickinger and I A Sa!,(eds.)
Developments in Generalized Phrase StructureGrammar: Stanford Working Papers in GrammaticalTheory, Volume 2, pp69-91.
Bloomington: \[ndiatmUniversity Linguistics Club.Koskenniemi, K. (1983) Two-level morphology: A generalcomputational model for word-form recognition andproduction.
Publication 11, Department of GeneralLinguistics, University of Helsinki, Helsinki, 1983.8.
AcknowledgmentsThis research was supported by the Alvey Speech Input WordProcessor and Workstation Large Scale Demonstrator project,ESRC Grants D/29611, D/29628 and 1)/29604.
The first authorhas been supported uring the writing of this paper by the EECEsprit Project 393 ACORD: the Construction and Interrogationof Knowledge Bases using Natural Language Text and Graph-ics.539
