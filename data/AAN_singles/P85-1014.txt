New Approaches  to Pars ing  Con junct ions  Us ing  Pro logSand,way FongRobert C. BerwickArtificial hitelligence LaboratoryM.I.T.545 Technology SquareC,'umbridge MA 02t39, U.S.A.AbstractConjunctions are particularly difficult to parse in tra-ditional, phra.se-based gramniars.
This paper shows howa different representation, not b.xsed on tree structures,markedly improves the parsing problem for conjunctions.It modifies the union of phra.se marker model proposed byGoodalI \[19811, where conjllnction is considered as tile lin-earization of a three-dimensional union of a non-tree I),'medphrase marker epresentation.
A PItOLOG grantm~tr for con-junctions using this new approach is given.
It is far simplerand more transparent than a recent phr~e-b~qed extra-position parser conjunctions by Dahl and McCord \[1984\].Unlike the Dahl and McCor, I or ATN SYSCONJ appr~ach,no special trail machinery i.~ needed for conjunction, be-yond that required for analyzing simple sentences.
Whileoi contparable ?tficiency, the new ~tpproach unifies under asingle analysis a host of related constructions: respectivelysentences, right node raising, or gapping.
Another ,'ulvan-rage is that it is also completely reversible (without cuts),and therefore can be used to generate sentences.John and Mary went to tile picturesYlimplc constituent coordhmtionTile fox and tile hound lived in tile fox hole andkennel respectivelyCotJstit,wnt coordination "vith r.he 'resp~ctively'readingJohn and I like to program in Prolog and HopeSimple constitmvR co~rdinatiou but c,~, have a col-lective or n.sp,~'tively readingJohn likes but I hate bananas~)tl-c,mstitf~ent coordin,~tionBill designs cars and Jack aeroplanesGapping with 'resp,~ctively' readingThe fox.
the honnd and the horse all went to marketMultiple c,mjunets*John sang loudly and a carolViolatiofl of coordination of likes*Wire (lid Peter see and tile car?V/o/atio/i of roisrdJ)l=lte str?/?
'trlz'e constr.~int*1 will catch Peter and John might the carGapping, hut componcztt ~cnlenccs c.ntain unlikeauxiliary verbs?Tire president left before noon and at 2.
GorbachevIntroductionThe problem addressed in this paper ~s to construct,~ gr;unmatical device for lumdling cooL dination in naturallanguage that is well founded in lingui.~tic theory and yetcomputationally attractive.
'the linguistic theory, shouldbe powerful enough to describe ,~ll of the l)henomenon incoordi:tation, hut also constrained enough to reject all u.
'l-gr;unmatical examples without undue complications.
It isdifficult to ;tcldeve such ;t line h;dancc - cspcci,dly since theterm grammatical itself is hil,hly subjccl.ive.
Some exam-ples of the kinds of phenolr-enon th:tt must l)e h;mdh.d aresh.,'.wl hi fig.
t'\['he theory shouhl Mso be .~menable to computerhnpien:ellt~tion.
For example, tilt represeuli~tion of thephrase, marker should be ,'onducive to Imth ?le~u!
processdescription antl efficient implementation of the associatedoperations as defined iu the linguistic theory.Fig 1: Example  SentencesThe goal of the computer implementation is to pro-d,ce a device that can both generate surface sentences given;t phrase inarker epresentation a d derive a phrase markerreprescnt;Ltion given a surface sentences.
Thc huplementa-lion should bc ~ efficient as possible whilst preserving theessential properties of the linguistic theory.
We will presentan ir, ph:n,cut,'ttion which is transparent to the grammaxand pcrliaps clemler & more nmdular than other systemssuch ,~ the int,:rpreter for the Modilh:r Structure Cram-,,,ar.~ (MSG.,) of l)alll & McCord \[1983 I.
"\]'lie NISG systenl wi l l  be compared with ~ shnpliGedirnl)lenlenl.
;~tion of tile proposed device.
A table showin Ktile execution thne of both systems for some sample sen-118tences will be presented.
Furthermore, the ,'ulvantages anddisadvantages of our device will be discussed in relation tothe MSG implementation.Finally we can show how the simplifled device canl)e extended to deal with the issues of extending the sys-tem to handle nmltiple conjuncts ~d strengthening theconstraints of the system.This representation of a phrase marker is equiva-lent to a proper subset of the more common syaxtactic treerepresentation.
This means that some trees may not berepresentable by an RPM and all RPMs  may be re-cast astrees.
(For exmnple, trees wit.h shared nodes representingoverlapping constituents are not allowed.)
An example ofa valid RPM is given in fig.
3 :-The RPM RepresentationThe phrase marker representation used by the theorydescribed in the next section is essentially that of the Re-duced Phrase Marker (RPM) of L,'mnik & Kupin \[1977\].
Areduced phrase maxker c,'m be thought of im a set consist- "ing of monostrings ,'rod a termiual striltg satisfying certainpredicates.
More formally, we haws (fig.
2) :-Sentence: Alice saw 13illRPM representation:{S. Alice.saw.Bill.
NP.saw.Bill.
Alice.V.Bill.Alice.VP.Alice.saw.NP}Fig 3: Aa example of RPM representationLet E and N denote the set of terminals andnon-terminals respectively.Let ~o,~, x E: (TI.
U N) ' .Let z, y, z E Z ' .Let A be a single non-terminal.Let P be an arbitrary set.Then ~o is a monostrmg w.r.t.
~ & N if ~o EZ'.N.E'.Suppose~o = zAz and that ~o,$6:P where Pis a some set of strings.
We can also define thefollowing predicates :-y isa*~o in  P i fxyzEPdominates  ~b in P if ~b = zXy.
X # 0 andx#A.W precedes v) in P if 3y s.t.
y isa* ~o in P.~b=zvX and X#z .Then :-P is an RPM if 3A,z s.t.
A,z ~.
P andV{~O,~0} C_ P thendominates ~o in P or ~o dominates ~b in Por ~b precedes ~ in P or ~,, precedes ~b in P.Fig 2: Delinitioa of azl RPM119This RPM representation forms the basis of i, helinguistic theory described in the next section.
The setrepresentation ha.s some dcsir;d~M advantages over a treerepresentation i  terms of b.th simplicity of descriptionand implementation f the operations.Goodal l 's  Theory  of Coord inat ionGoodall's idea in his draft thesis \[Goodall?
?\] wa.s toext,md the definition of I.a.snik ~md t(upin's RPM to covercoordiuation.
The main idea behind this theory is to ap-ply tilt.
notion that coordination remdts from *he union ofphr,~e markers to the reduced I)hrmse marker.
Since R PMsaxe sets, this h,'m the desirable property that the union ofRI'Ms wouhl just be the falltiliar set union operation.
Fora computer intplemeutation, the set union operation can berealized inexpensively.
In contr,-Lst, the corresponding op-eration for trees would necessitate a much less simple andefficient union operation than set union.However, the original definition of the R.PM didnot ~nvisage the union operation necessary for coordina-tion.
"\['he RPM w~ used to represent 2-dimensional struc-ture only.
But under set union the RPM becomes a rep-resentation of 3-dimensional structure.
The admissibilitypredicates dominates  zmd precedes delined on a set ofmonustrings with a single non-terminal string were inade-quate to describe 3-dimensional structure.B;~ically, Goodall's original idea w~ to extend thedominates ~m(l precedes predicates to handle RPMs un-der the set union operation.
This resulted in the relationse-dominates ,'rod e-precedes ,xs shown in fig.
4 :-Assuming the definitions of fig.
2 and in additionlet ~, f2, 0 E (~ O N)" and q, r, s, t, u E \]~', then~o e-dominates  xb in P if ~ dominates  ~b I inP.
X=w = ~'.
e~/fl = Xb and = -- g in P.~o e-precedes Xb in P if y lea* ~o in P. v lea*in  P. qgr -~ s,~t in P. y ~ qgr and u ~ ~twhere the relation - (terminal equiralence) isdefined as :-z- - - -p in  P i fxzwEPandxyo~EPFigure 4: Extended definitionsThis extended efinition, in particular - the notionof equivalence forms the baals of the computational devicedescribed in the next section, llowever since the size of" theRPM may be large, a direct implementation of the abovedefinition of equivMence is not computationMly fe,'tsible.
Inthe actual system, an optimized but equivalent alternativedefinition is used.Although these definitions suffice for most examplesof coordination, it is not sufficiently constrained enough toreject stone ungr,'mzmatical examples.
For exaanple, fig.
5gives the RPM representation f "*John sang loudly anda carol" in terms of the union of the RPMs for the twoconstituent sentences :-John sang loudlyJohn sang a carol{ {John.sang.loudly, S,John.V.Ioudly, John.VP,John.sang.AP,NP.sang.loudly}{John.sang.a.carol, S,John.V.a.carol, John.VP,John.sang.NP,NP.sang.a.caroi }(When thcse two I\[PM.q are merged some of the elementso\[ the set do not satisfy La.snik & gupin '~ ongimd deA-uitiou - thc.~e \[rdrs arc :-){John.sang.loudly.
John sanff.a.carol}{John.V.loudly.
John.V.a.carol}{NP.sang.loudly.
NP.sang.a.carol}(N,m.
o\[ the show: I~xirs .~lt/.st'y the e-dominates prw/i-rate - but Lhcy all .~tisfy e-precedes and hence the sen-tcm:e Js ac~eptc~l as .~, RI'M.
)Fig.5: An example ot" union o\[ RPMsThe above example indicates that the extended RPMdefinition of Goodall Mlows some ungrammatical sentencesto slip through.
Although the device preseuted in the nextsection doesn't make direct use of the extended definitions,the notion of equivMence is central to the implementation.The basic system described in the next section does havethis deficiency but a less simplistic version described lateris more constrained - at the cost of some computationalefficiency.Linearization and EquivalenceAlthough a theory of coordination ham been describedin the previous ections - in order for the theory to be putinto practice, there remain two important questions to beanswered :-?
I-low to produce surface strings from a set of sentencesto be conjoined??
tlow to produce a set of simple sentences (i.e.
sen-tences without co,junct.ions) from ~ conjoined surfacestring?This section will show that the processes ot" //n-e~zat ion  and finding equivalences provide an answer toboth questions.
For simplicity in the following discussion,we assume that the number of simple sentences to be con-joined is two only.The processes of linearization ~md 6riding equiva-lences for generation can be defined as :-Given a set of sentences and a set of candidateswhich represent the set of conjoinable pairs forthose sentences, llnearizatinn will output one ormore surface strings according to a fixed proce-dure.Given a set of sentences, findinff equivalenceswill prodnce a set o( conjoinable pairs accordingto the definition of equivalence o# the linguistictheory.\[;'or genera.Lion the second process (linding equiva-lences) iu caJled first to generate a set of (:andidates whichis then used in the first, process (linearization) to generatethe s.rface strings.
For parsing, the definitions still hold -but the processes are applied in reverse order.To illustrate the procedure for linearization, con-sider the following example of a set of simple sentences(fig.
0) :.120{ John liked ice-cream.
Mary liked chocolate}~t of .~imple senteuces{{John.
Mary}.
{ice-cream.
chocolate}}set ,ff ctmjoinable pairsFig 6: Example of a set of simple sentencesConsider tile plan view of the 3-dimensional repre-aentation of the union of the two simple sentences shown infig.
7 :-"~.
~ice-cream John l i kedMary .- ~-- chocolateFig 7: Example o\[ 3-dimensional structureThe procedure of l inearization would t~tke the foi-l .wing path shown by the arrows in fig.
8 :-John .
~~.
-c reamM~--"  " chocolateFig 8: Rxample of linearizationF~dlowin K the path shown we obtain the surfacesiring "John and Mary liked ice-cream and chocolate".The set of conjoinable pairs is produced by the pro-cess of \[inding equivalences.
The definition of i:quivalenceas given in the description of the extended RPM requiresthe general.ion of the combined R.PM of the constituent sen-lances.
However it can be shown \[I,'ong?
?\] by consideringthe constraints impc,sed by the delinitions of equivalenceand linc:trization, that tile same set of equivalent erminalstring.~ can be produced just by using the terminal strings ofthe RI*M alone.
There ;tre consider;Lble savings of compu-tat ioaal resources in not having to compare every elementof the set with every other element o generate all possibleequivalent strings - which would take O(n ~) time - wheren is the cardinality of the set.
The corresponding term forthe modified definition (given in the next sectiou) is O(1).The Imp lementat ion  in  P ro logThis section describes a runnable specification writtenin Prolog.
The specification described also forms the basisfor comparison with the MSG interpreter of Dahl aud Me-Cord.
The syntax of the clauses to be presented is similarto the Dec-10 Prolog \[Bowen et a1.19821 version.
The maindifferences are :-?
The symbols %"  and ~," have been replaced by themore meaningful reserved words "if" and "and"  re-spectively.?
The symbol "."
is used ,as the list constructor and"ni l"  is ,,sed to represent he empty list.?
, in an example, a Prolog clause may have the fornt :-a(X V ... Z) ir b(U v ... W) a~d c(R S ... T)where a,b & c are predicate names and R,S,...,Z mayrepresent variables, constants or terms.
(Variablesare ,listinguished by capitalization of the first charac-ter in the variable name.)
The intended logical read-ing of tile clause is :-"a" holds if "b" and "c" both holdfor consistent bindings of the argumentsX, Y,...,Z, U, V,..., W, R,S,.. .
,T?
Cmnments (shown in italics) may be interspersed be-tween tile argamaents in a clause.Parse  and  GenerateIn tile previous section tile processes of linearizationand linding equivalences are described ;m tile two compo-nents necessary for parsing and generating conjoined sen-testes.
We will show how Lhese processes can be combinedto produce a parser and a generator.
The device used forcomparison with Dahl & McCord scheme is a simplifiedversion of the device presented in this section.First, difference lists are used to represent stringsin the following sections.
For example, the pair (fig.
9) :-121{ john.liked.ice-cream.Continuation.
Continuation}Fig g: Example of a difference listis a difference list representation of the sentence "Johnliked ice-cream".We can :tow introduce two predicates l inear ize  andequivaleutpalrs which correspond to the processes uf lia-earization uJl(l liuding equivalences respectively (fig.
10) :-linearize( pairs S1 El and 52 E2 candidates Setyivcs Sentence)L inear i ze  hohls when a pair of difference lists({S1.
EL} & {S2.
E2)) and a set ,,f candidates(Set) arc consistent with the string (Sentence)as dellned by the procedure given in the previ-ous section.equivahmtpairs( X Y fi'om S1 $2)Equ iva lentpa i rs  hohls when a ~uhstring X ofS1 is equivalent to a substring Y of $2 accordhtgto the delinition of equivalence in the linguistictheory.The definitions fi~r parsing ,'utd generating are al-most logically equivalent.
Ilowever the sub-goals for p~s-ing are in reverse order to the sub-goals for generating -since the Prolog interpreter would attempt to solve thesub-goals in a left to right manner.
Furthc'rmore, the sub-set relation rather than set equality is used in the definitionfor parsing.
We can interpret he two definitions ~ follows(fig.
t2):-Generate  holds when Sentence is the con-joined sentence resulting/'ram the linearizationof the pair of dilFerence lists (Sl.
nil) and (52.nil) using as candidate pairs for conjoining, theset o?
non-redundant pairs of equivalent termi-nal strings (Set).Parse holds when Sentence is the conjoinedset, tence resulting from the linearization of thepair of dilference lists (S1.
El) anti ($2.
E2)provided that the set of candidate pairs for con-joining (Subset) is a subset of the set of pairsof equivalent terminal strings (Set).Fig 12: Logical readhtg for generate  & parseFig 10: Predicates l lneari~.e & equ iva lentpa i rsAdditionally, let the mete-logical predicate ~etofas in "setof(l~lement Goal Set)" hohl when Set is composedof chin,eats c~f the form Element anti that Set contains allin,: auccs of Element I, hat satisfy the goal Goal .
The pred-icates generate  can now be defined in terms of these twoprocesses as folluws (lig.
t t) :-generate(Sentence from St 52)if sctol(X.Y.nil in equivalentpairs(X Yfrom SI $2) is Set)andlinearize( pair~: St nil anti S2 nilcandidtttes Set 9ires Sentence)parse~ Sentence 9iota9 S1 El)i f  Ijnearize(pairs SI E1 avd $2 E2candidate.~ SuhSet 9ives Sentence)nndsctot(X.?
nil in cquivalentpairs(X Yfrom S1 $2) ia Set)Fig 1 !
: Prolog dclinition for generate  ~.
parseThe subset relation is needed for the above defini-tion of parsing hecause it can be shown \[Fong??
l that theprocess of linearization is more constrained (in terms of thep,.rn~issible conjoinable pairs) than the process of tindingeqnivalences.L inear i zeWe can also fashion a logic specification for the processof line~tt'izatiou in the same manner.
In this section wewill describe the cases corresponding to each Prolog clausenecessary in the specification of \[inearization.
However, ,'orsitnplicity the actual Prolog code is not shown here.
(SeeAppendix A tbr the delinition of predicate I inear ize.
)Ill the following discussion we assume that tile tem-plate for predicate I inear ize has the form "linearize( pairsSl El and 52 E2 rand,tides Set gives Sentence)" shownpreviously in tig.
I0.
There are three independent cases tocon:rider durivg !incariz~tion f-t.
The Base Case.If the two ,lilrcrence tist~ ({S1.
E l} & {S2.
E2}) areboth empty then the conjoined string (Sentence) isalso entpty.
This siml,ly sta.tes that if two emptystrings arc conjoint:d then the resttit is also an emptystring.1222.
Ident ica l  Lead ing  Subst r lngs .The second case occurs wheTt the two (non-eml)ty)difference lists have identical eading non-empty sub-strings.
Then the coni-ined string is identical to theconcatenation of that leading substring with the lin-eari~.ation of the rest of th,: two difference lists.
Forexample, consider the linearization of the two flag-ments "likes Mary" and "likes Jill" as shown in fig.
13.
.
{likes Mary.
likes Jill}which can be.
lineariz~:d a~ :-{likes X}where X is the linearizationof strings {Mary.
Jill}l'Tg.
13: Example of identical leading substrings3.
Con johf ing.The last case occurs when the two pairs of (qon-empty) difference lists have no common leading sub-string, llere, the conjoined string will be the co,t-catenation f the co.junctinn of one of the pairs fromthe candidate set, with the conjoined sqring resultingfr~nl the line;trization of the two strings with their re-spective candidate substrings deleted.
For example,consider the linearization -f the two sentences "Johnlikes Mary" aitd "Bill likes Jill" a~ shown in fig.
14 :-{John likes Mary.
Bill likes Jill}Given th,t the .~elertt:,l ,',ltdi,l,tc lmir is {John.
Bill},the c,,sj,,,',,:,l :;,rtdt ,,'e ~;:,ul.l Iw :-what linearizations the system would produce for an ex-ample sentence.
Consider the sentence "John and Bill likedMary" (fig.
15) :-{John and Bill liked Mary}would produce the string:.
{John and Bill liked Mary.John and Bill liked Mary}with candidate set {}{ John  l iked Mary ,  Bi l l  l iked Mary}with candidate set {( John,  Bil l)}{John Mary.
Bill liked Mary}with candidate set {(John.
Bill liked)}{John.
Bill liked Mary}with candidate set {(John.
Bill liked Mary)}Fig.
15: Example of linearizationsAll of the strings ,'ire then passed to the predicatef indequiva lences  which shouhl pick out the second pairof strings as the only grammatically correct linearization.Finding Equiwdences(.
;oodall's delinition of eqnivalence w,'~s that two termi-nal strings were said to be equivalent if they h;ul the sameleft and right contexts.
Furthermore we had previously a.s-sertcd th;~t the equivaleut pairs couhl be l}roduced without~earching the whole RI'M.
For example consider the equiv-ah.nt lernnimd strings in the two sentences "Alice saw Bill"an,J "Mary saw Bill" (fig.
16) :-{John and Bill X.
}where Xis tl~e linearization of ~;trin~,s {likes Mary, likes .Jill}Fig.
1,1: \[';xaml~ic of , : ,mj,iui,g ..mh.st, rin,,,,.,;There are S,.hC i,ul~h~,.c.t;dic.= d,:t;tils Lhat are dlf-r,~re.t for parsi .g tc~ ge,er:ttinK.
(~ec al~l~,ndi.
'c A.)
llowcverthe fierce cases :u'e the sanonc for hoth.We cast illusl, r;ll.e the :tl~?~v,; dc:llntili,m by she=wing{Alice saw Bill.
Mary saw Bill}would prt.hwr the, equiwdrnt pairs :-{Alice saw Bill.
Mary saw Bill}{Alice, Mary}{Alice saw.
Mary saw}l"ig.
16: l'Jxatuple of equivalent pairsWc also make tile rollowing restriction.~ on Goodall 'sdefinition :-123?
If there exists two terminal strings X & Y such thatX-'=xxfl & Y--xYf'/, then X &.
1"~ should be the strongestpossible left ~ right contexts respectively - providedx & y axe both nonempty.
In the above example,x - -n i l  and f l="saw Bill", so the first a.ud the thirdpairs produced are redundant.In general, a pair of terminal strings are redundantif they have the form (uv, uw)  or (uv, zv) ,  in whichcase - they may be replaced by the pairs (v, w) ~ad(u, z) respectively.?
Ia Goodall 's definition any two terminal strings them-selves are also a pair of equivalent erminal strings( whe ,  X & f2 ,are both ,ul l ) .
We exclude this caseit produces imple string concatenation of sentences.The above restrictions imply that in fig.
16 the onlyremai , ing equivalent pair ({Alice.
Mary})is the correct onefor tl, is example.However, before fiuding eq, ivalent pairs for twosimple zenlences, the ittocess ,,f f iml i ,  g ,quiv.,lel, ces ,nlustcheck that the two se,tt,;nces ate actually gra l , t l l l a t i ca l .
We;msuune thnt a recot;nizer/i,arser (e.g.
a predicate parse(SEl) alremly exists for determining the grammatical ity of~itnple ~entenccs.
Since the proct'ss only requires a yes/noanswer to gramnmtic;dity, any parsing or recognition sys-l.e;,t f,,r simple sentences can be used.We can now specify a l,redicate lindcandi(lates(X YSI $2) that hohls when {X. Y} is an equiw,hmt pair frontthe two grantmatical simple .
:e,te,ces {SI.
$2} .~ f, llows(li!,?.
17):-findcandidates(X and Y in SI and $2)ir parse(Sl nil)ilnld parse(S2 nil)and eqlniv(X Y SL $2)wh,.rc eqt,iv is ,h'fit~,'d as :.~q.iv(X Y X1 YI)if append3(Chi X Omega Xl)and  ternfinals(X)and  append3(C.hi Y Omega YI)and  terminals(Y):vh,'r,' :q,t,',,,IS(L!
L2 I..'~ L 1) h,,hls wh,.n L.I i:" ,',l,ml;o th,.
c',,tJ,'nl,'t~;tli,,tl ,,f I.I.L2 .~: 1.3. h'rminzd.~(X)holds when X i.
'~ n li..t ,,1' t,'rtztinnl .~yml,,,Is oulyFig.
l 7: Logic delit, itiolz .
f  Fi.
:lcntldirh, LesThen the predicate f indcqu iva lencos  i  simply de-fined ;t~ (fig.
18) :-findequivalences(X and Y in S1 and $2)if findcandidates(X and Y in S1 and $2)and not  redundant(X Y)wl.,re redundant implements the two restrictions described.Fig.18: Logic definit ion of F indeq, iva lencesComparison with MSGsThe following table (fig.
19) gives tile execution timesin milliseconds for the parsing of some sample sentencesmostly taken from Dahl 0~ McCor(l \[1983\].
Both systemswere executed using Dec-20 Prolog.
The times shown forthe MSG interpreter is hazed on the time taken to parse ,'rodbuihl the syntactic tree only - the time for the subsequenttransformations w,-~s not , ,chided.Sample / MSG RPMences J system deviceEach m;ul ate an apish ?
;~.lld ;t pear \[ 662 292.Iolm at,, ~lt appl,, and a pear \[ 613 233 fZ~k ;t,I ;Ll,ll ;1 WOIIU~.,, ~ilW o;i{'h tr t t i l l  IEiit'h ll,;lll ;tllll ,'ach wl|l,llt|t at ( '  l,"m ppleJ,~hll saw and the woman hearda a, lhat laughed.\]ohn drov,.
Ihe car through andct)m ~h.lt'ly demolishe, l a window"rh,, woa,t ; t l ,  wit , )  gav("  a l),~ok to.John and dr,we ;L car through .
'Lwindow laugh~l.h,hn .~aw the ,ltltll |.hiLt Mary .~awand Bill gay,.
a bo,,k t,, hutght~d.l.hnt .~aw the man lhat lu.
;trd thewotnaH rhar lattglu'd and ~aw BillTh,.
,,tan lh;d Mary saw and h(.ard~;LVI' ,'~.ll ;).llllll" t , I  , ,;\[ l 'h ~viHlla\[~.h,htl mtw a /uul Mary .~aw the redpear319 506320 503788 83'i275 1032I- -1007 3375.139 3 I t636 323i sot ,9~,726 770i!Fig.
ld: T imings  For some sample  sentencesFrom tile timings we can conclude that the pro-po..:ed device is comparable to the MSC, system in terms-f  comt,ttati, Jn:d elllciency, llowever, there are some otheradvantages s,,ch as :-?
Transparency of the grammar - There is no need forphrmsal rules such .-m "S ~ S and S" The  device alsoallows , ,m-phr~a l  conjunction.
* Since no special grammar or particular phr~e markerrepresentation is required, any par.,;er can be used -the dcvicc' only requires an acctpt/reject answer.124?
The specification is uot biased with respect to liars -ing or generation.
The iniplement:it ion is reversibleallowing it to generate aay sentence it can parse andvice versa.?
Modularity of the device.
The granimatical lty of sen-testes with conjunctiou is determined by the defini-tion of equivalence.
For instance, if needed we canfilter the equivalent terlninals using semantics.A Note on SYSCONJIt is worthwhile to compare the phr;me marker approacht{i the Aq.
'N-ba.sed SYSCON.I inechanisln.
Like SYSCONJ~ OUranalysis is extragrammatical: we do not tanlper with theh,sic gramnlar, but add a new cnniponent *.hat handlesconjunction.
Unlike SYSCONJ, our approach is based on aprecise definition of "equiwdent lhrztse~" that attenlpts taunify urider one analysis nlany dill'erent ypes of coordina-tion phen,mena.
:~YSi~,ONJ relied ou a rather conipticated,interrupt-driven method that restarted sentence ~malysis inSOlltC previously recorded m;tchine coiilil~qiration, but withthe input sequence following the conjunction.
This cap-turcs part of the "multillle planes" analy:ds of the phrasemarker ,'tpproach, but without a precise notion of equiva-lent phr,'l~es.
Perhaps ~ a result, SYSCONJ handled onlyordinary conjunction, ali(l \[tot respectively or gapping read-ing~.
In our appr - : ,h ,  a simple change to the lincarizationprocess allows ll~ t~l handle gapping.Extens ions  to the  Bas ic  Dev iceThe device described in the previ,lus section is a .~ilu-pl i f ied version for rough el l i i l l l ; i r ist in wii.h the MS~ inter-In'ctct ".
llowever, the systClll C;ill e.tsily he gciicralizcd toh~uidle nlultiple conjunctz.
The only ,uhlit i .nal phase re-quired ia to gelicrate telnpl:tte~ for nluttlph: rc:ulings.
Also,gallpillg can lie handled just lly adding clauses tll the deft-nifioll of l inearize - which allows :l dilferent path from thatof fi~.
8 to be taken.The ~i in l l l i l ied device l lVrui i ts ~llllil.
,.,(ainllh~s of un-gr ; l i i l l i i ; l l i?
: t l  ~.l.il!l,nfl.s I.,, h,r ll;U'<'ed as if t in' i--or (l ig.
5),The in i ldu la r i ty  ~f the systel l l  a l l .ws  its {() ciln..itr;tin thedcli i i i i .
icl i i  of eClUiv:th,qlcl~ st i l l  I'lirl.hl.r.
The c?tcndcl \ [  de l ln i -ticlns in (141~lthdl's d ra f t  l, hcory wci-e licit i i ichi l led iii his the-si~; (;,i,.la11144i l i rP~l i l l l ; l l l ly hl,vi'.liSe it  w:us l i i l l  COli.'-itrailleden~liigh.
I lnwever  in lii.~ I.hl~sis he lll'llll~lses i l l i o lher  : lef ini-t ion elf !4rani l i ial .
ic;dity ilshil~ II.l~Ms.
Th is  de l l i i i t i l ln  cltn l ielisctl t.o c~li istrain i~Cliiiv.-tlclice .,;till I'ilrl, l ier ill Clllr systel l i  ata lOSS fif Siillle crllil:ieni:y ;llld gelilrl';ilil.y.
For (~Xltlll|ile, then~quircd ;tdditional predicate will need to ni;tke explicit useof the colnbined RPM.
Therefilre, a parser will need to pro-duce a I1.PM representation as its phr,~ze marker.
The mod-ifications necessary to produce th,, representation is shownhi appemlix B.AcknowledgementsThis work describes research clone at the Artificial Intel-ligence Laboratory of the Massachusetts Institute of Tech-nology.
Sitpport for the Laboratory's artificial intelligencerese,'u'ch as been provided in part by the Advanced Re-search Projects Agency of the Depitrtnlent of Defense un-der Office of Naval Re'~earch contract N000t-I-80-C-0505.The first author is also filndnd by a scholarship from theKennedy Memorial Trust.ReferencesBow~.n ~.t al: D.L.
Bowo,l {ed.
), L. Byrd, F.C.N.
Pert,ira, L.M.P,,r(.ira, D.H.I).
Warre:l. Docsystem-lO Prolog User's Man-ira1.
Hniversity of Edinburgh.
t982.Dahl f4 McCord: V. Dahl and M.C.
McCord.
Trcatiiig Coordi-nation in Iaigie Gramtnars.
Anit.ric~ui Journal of Compu-taii~lnal Linguistics.
Vol.
9.
No.
2 (t983)..Piing.')?
: .%mdiway l"ong.
To appear in S,'t,L thesis - ".~pccifyingC,,Jrdinatioli i l l  L~lgic" - 1985Goodall??..
Grant Todd (;.,.lall.
Draft - Chapter 3 (sections 2.1.to 2.7)- C,,irdination.Goodall.~.~ : ( ;ralit To,hi (:oolhdl, P:lrnlh.l Strltctnr?,s iil ,~yiltax.Ph.
D thesis.
Uniw.rsity (if CMifiJruia.
San Di{.go (tO8, U.Lasnik \[.
: Kupin: I1.
La.~uik iuid .I.
\[~upin.
A r~'strictive th?,ory+Jt ir.'
iosfi,r'.
i latiotl;d gr; Imii lar.
Th('or~.tical I.inl4ui:itics ,I(19771.Append ix  A: L inear izat ionThl" fii l l Pr.h~g Sll~.ilh.
;i i i lni flw thl, l lr l .dicail , l inea i ' i ze  i~givl.n lll.l(iw./ Linenrize f .
r  g~'ncr.tion // tcrmin,din~) r.n,lition /liu('arizt'(pairs SI ,'-;I and $2 $2candidates \[,i.~t ?liililty l l i l )  i f  l i l lnvar(l , is/)/ apldicrtthle mhcn ,yr. have tl t 'O l t l l l l i i t l  .~i/lb21/rilltJ /lilil'.
'triZ~'(lulir.~ S I 1'\]1 an,l $2 I,',9.
?lllidid/i/e.1 List yivtnf!
,~l.nl,l.llCl~)i f  V;lf { ~l' l l l ,  lq l?~)i l l ld  not  ~ll l l i i ' (~l ll.l l~ | )i l iU| I lOl ~i l l l l l !
{~ a.,I ~)125and similar(St to S2 common Similar)and not same(Simil~ an nil)and remove{Siutih~x from St leaving NewS\[)and r,,nove(Siulilar f om $2 lenving NewS2)and line.
'u'ize{pairs NewS1 El ,rod NewS2 E2candidates List ~li,,ing RestOfSentenee)and appeud(Similmr RestOl~,.ntenee Seutenee)/ conjoin two substringa /lim:arize(pairs HI El  and $2 E;2candidates List giving Sentence)if var(Sentence)attd uteutber(Candl.Cand2.nil of List)and not same(St as El)and not same(S2 as E2)and remove(Coati t from S 1 leaving NewSI}and removtr(Caltd2 from $2 l,mving NewS2)and coltjoin(li.~t Candl.Cmtd2.nil uning '~md'giving Conjoint,l)and (lclete(Cand t.Coatd2.nil from List leavin~ NewList)and linearize(pairn Ni,wSI 1~1 and NewS2 I~2candidates Newl,i~t yiving Restot'Sentence)and append(Conjoined RestofS(,stteuce S ntence)/ Linearize for par#ing // Terminating cane /}inearize(pair.q nil nil and nil nilcandidates List.
giving nil)if var(List)anti :am,.
(l.ist a.s all),/ Case far common .suhstrinf/,/lill?.
;,:'it.tr(pairs ('.,,n,mon.N,.wS l nil arid ('(ltllt,lotI.NewS2 nilrandidate.~ List giving Sentence)if n,,.
wu'(S,.nt?.,w,.
}:llld .;},ttt'(~t)Vliltit*Vn.R?'.
'-l()f~'~t'tth l!,',' ?,:+ ~?
'Iltt'IICC);,,,1 li,..arizt,il,air.~ N,~w.ql nil and NewS2 nilcaadidttlcs I.isl y,viny Rest()lSentt'tlce)/ C',tne for ,',,,d,,in /lilwarizvIl,.ir.n .q \[ nil ?t?t,'l ~2 ui|raltdidqle.s \['~,h'tttt'ltt.f.
{.t'st ,fivinq `Ht'ittcqtt:e}if ,,, ..,va,'(~,',tt(',tce)and :tl)l),',,d: {(h,,,.ioi,te,} I, lh.stt)f:q,.,tt,.,,c,.
~/i,,in~ S,.ttLt.,,c?.
)and ,',,,lj,,i,,(li.~l l'lh',,,,',,l ,t.~i,t!l ';o,,l" :l,,,irtrJ ( h,ttj,hne, l)and ~illii,.
( l';h.i,ii.,il.
,i.s ( :mid l.(:at,,12.uil)and uot  ~ai,ir(f~a,id t ,i.s nil)and n,)t ~a,n,'(f:m,d2 ,t.s nil)and lim.,triz,.
(patr.~ N,.wS!
nil and N,,w,H2 nil,.uttditlates I{.?
'.~1 giving R.*'~I()I'St'IIt?'II,'?
')and ;qq-',td{('andl N,'wHI ,HI)and ;,pl-',vlH'a,,12 N,,wH2 ,H2)/ , l pp , : t t t l  * i.s ,1 .spi'rirtl ft, rttt i,f .,q,p,:,td ~'t(m/t thatthe Jir.~l liM ma,~l b+" rton.,:tttply:q)p,.n,I ' (\[h':vl.=til to "\[';til yimnt/ Ih.
;uI.T;fil):tpp,.t=,l ( I.'ir~t.Hec,,,d.
():l..r:: to Till 9tvi,,/ Fir.~t.Re.~Qif :H~l,.tt,l ' {`Hvc~md.
()l h('rs l,, "l';il giving Ih'.~t)eil,fibu'(;tii/o nil cornn,~,l nil}~tt,,il;~t'llh';td 1.
I';dl t lo I\[,.
;Ld2.T, il:2 common nil)if.
,tot :;.m,'(Ih.adl aa Ih';ul21-itttil;u'( \[l,.;ul.
'r;dl t to lh.
;.I.T;til2 ,.ornmou \[h.mI.Re, t)if .-hml;zr('\[';dll lo "\[';d12 c , , ,a ,n  Ilcst}/ conjoin ia rewer.sible /conjoin(lint \[;'irat.Second.ail using Conj,mct giving Conjoined)if nonwtr(First)and nonvar(Second)and apl~end(1;'irst Conj,mct.Sceond Conjoined)conjoin(lint First.S~.wond.uil u.~in9 Conjunct giving Conjoiued)if n,mvar(Conjoined)attd append(First Conjunct.Second Conjoined)remove(nil/rein List leavin~ List}remove(Ih,ad.
'rail from lI,,~x(l.Re~t leaving List)if remove(Tail from Rest leaving List)delete{Ilead from nil lenving nil)delete(Head from II,ratl.T, til leaving Tail)delete(fiend frum First .Rest leaving First.Tail)if not sa,,,,.
{lI,!ad an First)and delete{ h,,ul from Rest leaving Tail}Appendix B: Building the RPMA RPM rv\[)res,.utali.n ,'ml b(.
Imilt by adding three extraimramt,t,,rs to em'h ;;ra.ttmm" |'11h, {f)~(){ht.r with a call t:o a con-cat.enat.i,m routine.
F,~r examl)k', c,msider th(.
verb phra.se "likedMary" fr,,n {he .~imph.
semem',.
"'John liked Mary".
The lltonoa-trin~ c-rr,,.~l),mdi,tg t.,~ the mmn-t('rmin;d VP is (',)r,structe, l bytaking the h.ft m.I right eout, exls .
f  "liked Mary ;rod placing thenon-h.rn,inid syl=d),,I VP inl.,Iwt~.n them.
In geueral, we have~.melhing of the form :-phr;L~e( from Pointt to Point2unin9 Start to End !/iv/n9 MS.RPM)if isphrase(Pointt , Point2 RPM}and bu|hlmonostring{Start Pointl pit=# 'VP"Point2 End MS)wirer,.
,lilferonce pairs {Start.
Pointt}.
{Point2.
End} aa{l{Start.
End} repr{.s4.nt the left ,',mt(.xt.
the right context lind the..ent,.twe string rcsp,~'tively.
Th," c(mc;~retmtion routim: build-monostring is just :-buildmonostring(Start Point\[ l,ht# NonTermiaalPoint2 End MS)if append(Pointl Left Start)and append(Point2 Right End)and append(Lelt NonTerminaI.Right MS)126
