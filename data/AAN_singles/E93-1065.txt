INSYST: An Automatic Inserter System for Hierarchical LexicaMarc Light Sabine Reinhard Marie Boyle-HinrichsUniversit~t Tubingen, Seminar ftir SprachwissenschaftKleine Wilhelmstr.
113, D-7400 Ttibingen{light, reinhard, meb } @arbuclde.sns.neuphilologie.uni-tuebingen.de1.
In t roduct ionWhen using hierarchical formalisms for lexical infor-mation, the need arises to insert (i.e.
classify) lexicalitems into these hierarchies.
This includes at least thefollowing two situations: (1) testing generalizationswhen designing a lexical hierarchy; (2) transferringlarge numbers of lexical items from raw data files to afinished lexical hierarchy when using it to build a largelexicon.
Lip until now, no automated system for theseinsertion tasks existed.
INSYST (INserter SYSTem),we describe here, can efficiently insert lexical itemsunder the appropriate nodes in hierarchies.
It currentlyhandles hierarchies specified in the DATR formalism(Evans and Gazdar 1989, 1990).
The system uses aclassification algorithm that maximizes the number ofinherited features for each entry.2.
The  INSYST-Arch i tec tureThe following information is required by the INSYST-Classifier module: i) the features that can be inheritedfrom each node of the hierarchy, and ii) the features ofthe item to be inserted.
Since the answer to i) is notexplicitly stated in the DATR specification of a node,three modules preprocess the input DATR theory: theINSYST-Compiler and the INSYST-InheritanceClosure modules.
The INSYST-Interface to thedatabase answers question (ii).
The modules areimplemented in C. Figure 1 presents a pictoral view ofthe interactions between INSYST modules.2.1 The INSYST-Compiler and Inheritance ClosuremodulesThe INSYST-Compiler eads the input DATR theoryfrom a file, creates nodes and inserts the path-valuepairs into them as they are encountered.The Inheritance Closure module loops through thenode list provided by the Compiler, calling a recursivefunction that "expands" path-value pairs, for each path-value pair in each node.
This "expansion" is necessarybecause of the complex DATR inheritancemechanisms: default inheritance (anode inherits all thevalues for paths that start with a certain prefix from aparent node), global inheritance, mbedded paths, lists,etc.
In a first pass (Inheritance Closure I), all inheri-tances are resolved and listed, except for the global(quoted) paths.
These are resolved on a second pass(Inheritance Closure II), when a node is being inserted,because the values for the global paths are taken fromthat node currently being inserted.2.2 The INSYST-ClassifierThe INSYST-Classifier algorithm (s. Light, forthc.
)strives to maximize the number of path-value pairs anew entry node inherits while minimizing the numberof parents.
It uses the following heuristic: choose theparent from which the node being inserted can inheritthe most path-value pairs while counting clashesbetween a potential parent node path-value pair and anew entry path-value pair.
The algorithm is computa-tionally tractable and always produces a reasonablesolution.
However, a solution involving fewer parentsmay exist.3.
Conc lus ionBy building an inserter system for DATR with itsparticulary complex inheritance f atures (default inhe-ritance, embedded paths, etc.
), we have shown theplausibility of our design.
We feel that INSYST orsystems like it will become a standard tool forresearchers u ing or designing lexical hierarchies.References\[Evans and Gazdar, 1989, 1990\] Evans, Roger and GeraldGazdar (eds.).
"The DATR Papers", Cognitive ScienceResearch Papers, U Sussex, 1989 and 1990.\[Light, forthc.\] Light, Marc.
"A Classifier Algorithm forDefault Hierarchies", SfS-Report, U T0bingen, forthc.INSYSTeN ?
?
oH  ?
?
e= ?
?
?
?
?
?
?
?
?
?
?
?
?
mom ?
?
eu  ?
?
?
?
?
?
?
oe ?
?
?
ael ?
?
?
n ?
?
?
n ?
?
?
?
?, ?
?
?
?
?
?
eo ?- ?
?
?
?
?
?
?le ?
?
?
?
?
?
?
ne  ?
?
N ?
?
?
e~I ?
?
I .e| c lass i f ie r  Sys tem ~ \] interface to  \].
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
-* ," I the  database  IDATR \[ ~ { : :Compi le r  , .-, ~ : .
,=~au~= % i -\[ I n h e r i t a n c e L  i i( c reated  by  \ [~ '~spec i f i ca t ions J  : v |  C losure  I I  \ [ "  .
.
- ~yacc  & lex ) |  ~ / i \[ J ,; ~ ~eatures  o r  ~%!
: ?
: ~ ' .C lass l  f l e r  ?
:?
C losure  I C la~|Figure 1: Internal Structure of INSYST471
