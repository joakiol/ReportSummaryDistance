Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 247?254,Sydney, July 2006. c?2006 Association for Computational LinguisticsCoreference handling in XMGClaire GardentCNRS/LORIA615, rue du jardin botanique, B.P.
10154602 Villers le`s Nancy CEDEXFranceClaire.Gardent@loria.frYannick ParmentierINRIA Lorraine615, rue du jardin botanique, B.P.
10154602 Villers le`s Nancy CEDEXFranceYannick.Parmentier@loria.frAbstractWe claim that existing specification lan-guages for tree based grammars fail toadequately support identifier managment.We then show that XMG (eXtensible Meta-Grammar) provides a sophisticated treat-ment of identifiers which is effective insupporting a linguist-friendly grammar de-sign.1 Specifying tree-based grammarsWhilst the development of standard unification-based grammars is well supported by the design offormalisms such as PATR-II, Ale or TDL (Kriegerand Schafer, 1994), the situation is less well es-tablished for Tree-Based Grammars such as TreeAdjoining Grammars (Joshi and Schabes, 1997),Tree Description Grammars (Kallmeyer, 1996) orInteraction Grammars (Perrier, 2003).Roughly, two main types of specification for-malism for Tree-Based Grammars can be distin-guished: formalisms based on tree fragments andnon monotonic inheritance and formalisms basedon tree descriptions and monotonic inheritance.The tree fragment approach is advocated in(Evans et al, 1995) which proposes to encode lex-icalised TAGs using the DATR representation lan-guage1.
In this approach, tree fragments are com-bined within a non monotonic inheritance hierar-chy.
Furthermore, new fragments can be derivedfrom existing ones by means of lexical rules.
Thisfirst approach suffers from the procedural char-acter of non-monotonic inheritance.
In specify-ing the grammar, the grammar writer must keep1A tree based approach is also used in(Becker, 2000) butthis time in combination with metarules.
In that particularapproach, procedural aspects also come into play as the orderin which metarules apply affect the results.in mind the order in which non-monotonic state-ments have been made so as to be able to pre-dict how explicit statements interact with defaultsand non-monotonic inheritance in determining thefinal output.
When developing a large coveragegrammar, this rapidly become extremely cumber-some.
Moreover, as (Candito, 1996) remarks, non-monotonicity may result in an information losswhich makes it impossible to express the relationexisting for instance between an active object andthe corresponding passive subject.The approach based on tree descriptions (of-ten called, the metagrammar approach) obviatesthe procedural character of the non-monotonicapproach by taking tree descriptions rather thantrees to be the basic units (Candito, 1996; Xia etal., 1999; Vijay-Shanker and Schabes, 1992).
Inessence, tree fragments are described using treedescriptions and tree descriptions are combinedthrough conjunction or inheritance.
The idea isthat the minimal models satisfying the resultingdescriptions are TAG elementary trees.
In somecases, lexical rules are also used to derive newtrees from existing ones.One main drawback with this second type ofapproach concerns the management of node iden-tifiers.
Either nodes are represented by name-less variables and node identification is forced bywell-formedness constraints e.g., wff-constraintson trees and wff-constraints given by the inputtree description (cf.
e.g., (Duchier and Gardent,1999)) or nodes are named and nodes with iden-tical names are forced to denote the same entity.The first option is unrealistic when developing alarge core grammar as it is easy to omit a neces-sary constraint and thereby permit overgeneration(the description will be satisfied by more trees thanintended).
The second option greatly degrades247modularity as the grammar writer must remem-ber which names were used where and with whichinterpretation.
As we shall see below, it also hasthe undesirable effect that the same tree fragmentcannot be used twice in a given tree description.Nevertheless, this is the option that is adopted inmost grammar formalisms and grammar compil-ers (Candito, 1996; Xia et al, 1999; Gaiffe et al,2002).In this paper, we present an approach whichremedies these shortcomings by combining mono-tonic inheritance of tree descriptions with an ex-plicit management of identifier scope and identi-fiers equality2 .
The proposed approach thus es-chews both the inconvenients induced by a nonmonotonic framework (by using tree descriptionsrather than trees) and those resulting from a globaltreatment of identifiers (by providing greater ex-pressivity wrt identifiers).Specifically, we show that the proposed ap-proach supports several ways of identifying (nodeor feature) values, we motivate this multiplicityand we identify the linguistic and/or technical cri-teria for choosing among the various possibilities.The paper starts in section 2 by introducing thesyntax of the XMG formalism.
In section 3, weshow that XMG provides four different ways ofidentifying two (node or variable) identifiers.
Insection 4, we motivate each of these four differ-ent ways and indicate when each of them can andshould be used.2 The XMG formalismWe start by briefly introducing XMG (eXtendedMetaGrammar).
First, we show that it supports thedescription and the combination of blocks consist-ing of tree fragments and/or semantic representa-tions.
Then, we show that it supports a sophisti-cated treatment of identifiers.2.1 Defining blocksAt the syntactic level, the basic units are tree de-scriptions which are specified using the followingtree logic:2Recently, (Villemonte de la Clergerie, 2005) has pro-posed a highly compact representation formalism for tree-based grammars which also features explicit identifier man-agement.
His approach differs from ours in that it includesneither a colouring mechanism (cf.
section 3.4) nor interfaces(cf.
section 3.3).Description ::= x ?
y | x ?+ y | x ??
y |x ?
y | x ?+ y | x ??
y |x[f :E] | x = y |Description ?
Description(1)where x, y represent node variables, ?
immediatedominance (x is directly above y), ?+ strict dom-inance (x is above y), and ??
large dominance3(x is above or equal to y).
Similarly ?
denotesimmediate precedence, ?+ strict precedence, and??
large precedence.
Finally x[f :E] constrainsfeature f with associated expression E on nodex, and x = y indicates node identification.The XMG formalism also supports the associa-tion of semantic representations with elementarytrees.
The semantic representation language is aflat semantic representation language (Bos, 1995)with the following syntax:Description ::= `:p(E1, ..., En) |?`:p(E1, ..., En) | Ei ?
EjDescription ?
Description(2)where ` is a label, p is a predicate and E1, .., Enare parameters.
Further, ?
denotes negation andEi ?
Ej expresses a scope constraint between Eiand Ej (Ej is in the scope of Ei).2.2 Combining blocksAs in other existing tree-based formalisms, inXMG, blocks can be combined using inheritance.However, XMG additionally supports block con-junction and block disjunction.Specifically, a Class associates a name with acontent:Class ::= Name ?
{Content } (3)A Content is either a Description (i.e., a treedescription, a semantic formula or both), a classname, a conjunction or a disjunction of classname:Content ::= Description | Name |Name ?
Name | Name ?
Name (4)Further, XMG allows multiple inheritance: a givenclass can import or inherit one or more classes(written Ci here):3By large, we mean the transitive reflexive closure ofdominance.248Class ::= Name 6 C1 ?
.
.
.
?
Cn ?
{Content } (5)The semantic of the import instruction is to in-clude the description of the imported class withinthe current one.
This makes it possible to refine aclass e.g., by adding information to a node or byadding new nodes4 .2.3 Managing identifiersWe now introduce the treatment of identifiers sup-ported by XMG.
We show in particular, that it in-tegrates:?
a convenient way of managing identifierscope based on import/export declarationsinspired from standard Object Oriented Pro-gramming techniques (section 2.3.1);?
an alternative means of identifying featurevalues based on the use of unification?
polarity- (here called colour-) based nodeidentification as first proposed in (Muskensand Krahmer, 1998) and later used in(Duchier and Thater, 1999; Perrier, 2000).The next sections will detail the linguistic andtechnical motivations behind this variety of identi-fier handling techniques.2.3.1 Import/Export declarationIn XMG, the default scope of an identifier is theclass in which it is declared.
However, exportspecifications can be used to extend the scope ofa given identifier outside its declaration class.
Theexport of identifier ?X ouside class A is written :5A?X ?
{ .
.
.
?X .
.
.
}Export declarations interact with inheritance,conjunction and disjunction specifications as fol-lows (where A,B,C are classes):Inheritance: if the class A is imported either di-rectly or indirectly by a class B, then ?X isvisible in B.
In case of multiple inheritance4Note that disjunctive inheritance is not supported whichwould allow a block to be defined as importing one or moreclasses from a given set of imported classes5Similarly, import declaration can be used to restrict theset of accessible identifiers to a subset of it.e.g., if B 6 C1 ?
.
.
.
?
Cn , then all identi-fiers exported by C1 ?
.
.
.
?
Cn are visiblefrom B provided they have distinct names.In other words, if two (or more) classes inC1 ?
.
.
.
?
Cn export the same identifier ?X,then ?X is not directly visible from B.
It canbe accessed though using the dot operator.First A is identified with a local identifier(e.g., ?T = A), then ?T.
?X can be used torefer to the identifier ?X exported by A.Conjunction: if classes A and B are conjoined in-side a class C, then all the identifiers exportedby A or B are visible within C using the dotoperator.Disjunction: if classes A and B are disjoined in-side a class C, then all the identifiers exportedby A or B are visible within C using the dotoperator.
However in this case, both A andB have to be associated with the same localidentifier.In sum, export/import declarations permit ex-tending/restricting the scope of an identifier withina branch of the inheritance hierarchy whilst thedot operator allows explicit access to an inheritedidentifier in case the inheriting class either dis-plays multiple inheritance or is combined by con-junction or disjunction with other classes.
Morespecifically, inheritance allows implicit corefer-ence (the use of an imported name ensures coref-erence with the object referred to when declaringthis name) and the dot operator explicit corefer-ence (through an explicit equality statement e.g.,?A.
?X = ?B.
?Y).2.3.2 Class interfaceIn XMG, a class can be associated with a classinterface i.e., with a feature structure.
Further-more, when two classes are related either by in-heritance or by combination (conjunction or dis-junction), their interfaces are unified.
Hence classinterfaces can be used to ensure the unification ofidentifiers across classes.Here is an illustrating example:A ?
{ .
.
.
?X .
.
.
}?
= [n1 = ?X]B ?
{ .
.
.
?Y .
.
.
}?
= [n1 = ?Y]In A (resp.
B), the local identifier ?X (resp.
?Y) isassociated with an interface feature named n1.
If249these two classes are combined either by conjunc-tion or by inheritance, their interfaces are unifiedand as a result, the local identifiers ?X and ?Y areunified.
In the case of a disjunction, the interfaceof the current class (C here) is non deterministi-cally unified with that of A or B.In practice, interface-based identification of val-ues is particularly useful when two distinct fea-tures need to be assigned the same value.
In (Gar-dent, 2006) for instance, it is used to identify thesemantic index associated with e.g., the subjectnode of a verbal tree and the corresponding seman-tic index in the semantic representation associatedwith that tree.2.3.3 Colouring nodesFinally, XMG provides a very economical wayof identifying node variables based on the use ofcolours (also called polarities in the literature).The idea is that node variables are associated witha specific colour and that this colouring will eitherprevent or trigger node identifications based on thefollowing identification rules:?B ?R ?W ?
?B ?
?
?B ?
?R ?
?
?
?
?W ?B ?
?W ??
?
?
?
?and on the requirement that valid trees onlyhave red or black nodes.
In effect, node colour-ing enforces the following constraints : (i) a whitenode must be identified with a black node, (ii) ared node cannot be identified with any other nodeand (iii) a black node may be identified with oneor more white nodes.Contrary to other means of value identification,colours are restricted to node identifiers.
Hencethey are best used to induce node identification inthose contexts where neither inheritance nor ex-plicit identification are appropriate (see section 4).3 XMG at workRecall (section 1) that one main problem when de-veloping a factorised specification of tree basedgrammars is to ensure a consistent treatment ofidentifiers and in particular, of identifier unifica-tion.
That is, when combining two units of infor-mation, the grammar writer must ensure that herspecification correctly states which objects are thesame and which are distinct.In what follows, we show that XMG supportsfour different ways of identifying objects.
We il-lustrate this by demonstrating that the followingtree can be obtained in four different ways:sn vFigure 1: A tree that can be derived in four waysIn section 4, we will show that these four waysof identifying nodes and/or features values supportboth explicitness and economy thereby reducingthe risks of specification errors.3.1 Using explicit identificationThe most basic way to identify two identifiers is toexplicitly state their identity.
Thus the above treecan be produced by combining the following twoclasses6 :A?X,?Y ?
{ ?X [cat : s] ?
?Y [cat : n] }B1 ?
{ ?U [cat : s] ?
?Z [cat : v]?
A ?
?U = A.?X ?
A.?Y ?
?Z }To improve readability, we use from now on agraphical representation.
For instance, the classesabove are represented as follows (exported identi-fiers are underlined and boxed letters indicate classnames): A s ?XB1 s ?Un ?Y v ?Z?
A ?
?U = A.?X?
A.?Y ?
?ZThus, the class A describes the left branch of thetree in Figure 1 and the class B1 its right branch.The root of A and B are named ?X and ?U re-spectively.
Since ?X is exported, ?X is visible inB1.
The explicit identification ?U=A.
?X then en-forces that the two roots are identified thus con-straining the solution to be the tree given in Fig-ure 1.3.2 Using inheritanceUsing inheritance instead of conjunction, the samenodes identification can be obtained in a more eco-nomical way.
We reuse the same class A as before,but we now define a class B 2 as a sub-class of A: A s ?XB2 6 A s ?Xn ?Y v ?Z?
?Y ?
?Z6Here and in what follows, we abbreviate the conjunctionof a class identification ?T = A and a dot notation T.?X toA.?X.
That is,?T = A ?
T.?X?abbrev A.?X250Since the identifiers ?X and ?Y are exported by A,they are visible in B2.
Thus, in the latter we onlyhave to indicate the precedence relation between?Y and ?Z.In sum, the main difference between explicitidentification and identification through simple ex-ports, is that whilst inheritance of exported identi-fiers gives direct access to these identifiers, classcombination requires the use of a prefix and dotstatement.
Note nevertheless that with the latter,identifiers conflicts are a lot less likely to appear.3.3 Using interfacesA third possibility is to use interfaces to force nodeidentifications as illustrated in figure 2. A s ?XB3 s ?Un ?Y n ?W ?
v ?V?
A[root = ?X, [root = ?U,nNode = ?Y] nNode = ?W]Figure 2: Structure sharing using interfacesClass A is the same as before except that theidentifiers ?X and ?Y are no longer exported.
In-stead they are associated with the interface fea-tures root and nNode respectively.
Similarly,class B3 associates the identifiers (?U and ?V) withthe interface features root and nNode.
As the treefragment of class B3 is conjoined with A, the inter-face features of A and B3 are unified so that ?X isidentified with ?U and ?Y with ?V.3.4 Using node coloursFinally, colours can be used as illustrated in theFigure below: A s ?B4 s ?n ?
n ?
?
v ??
ANow, class B4 contains three nodes: two whiteones whose categories are s and n and which mustbe identified with compatible black nodes in A;and a black node that may but need not be identi-fied with a white one.
To satisfy these constraints,the black s node in A must be identified with thewhite s node in B and similarly for the n nodes.The result is again the tree given in Figure 1.Note that in this case, none of the identifiersneed to be exported.
Importantly, the use ofcolours supports a very economical way of forcingnodes identification.
Indeed, nodes that are identi-fied through colouration need neither be exportednor even be named.4 Which choice when?As shown in the previous section, XMG allowsfour ways of identifying values (i.e., nodes or fea-ture values): through simple exports, through ex-plicit identification, through colour constraints andthrough the interface.
We now identify when eachof these four possibilities is best used.4.1 ExportsAs shown in section 2.3, an identifier ?X can beexplicitly exported by a class Cwith the effect that,within all classes that inherit from C, all occur-rences of ?X denote the same object.In essence, exports supports variable namingthat is global to a branch of the inheritance hier-archy.
It is possible to name an identifier withina given class C and to reuse it within any otherclass that inherits from C. Thus the empirical dif-ficulty associated with the use of exported iden-tifiers is that associated with global names.
Thatis, the grammar writer must remember the namesused and their intended interpretation.
When de-veloping a large size grammar, this rapidly makesgrammar writing, maintenance and debugging anextremely difficult task.
Hence global identifiersshould be use sparingly.But although non trivial (this was in fact oneof the main motivations for developing XMG), thisempirical limitation is not the only one.
There aretwo additional formal restrictions which prevent ageneral use of exported identifiers.First, as remarked upon in (Crabbe and Duchier,2004), global names do not support multiple useof the same class within a class.
For instance, con-sider the case illustrated in Figure 3.s s sv pp ?
v pp ppp n p n p nFigure 3: Case of double prepositional phrase.In this case, the aim is to produce the elemen-tary tree for a verb taking two prepositional argu-ments such as parler a` quelqu?un de quelque chose(to tell someone about something).
Ideally, this isdone by combining the verbal fragment on the left251with two occurrences of the PP class in the mid-dle to yield the tree on the right.
However if, as islikely in a large size metagrammar, any of the pp,the p or the n node bears an exported identifier,then the two occurrences of this node will be iden-tified so that the resulting tree will be that given in(4).sv ppp nFigure 4: Double prepositional phrase with ex-ported identifiers.We will see below how colours permit a naturalaccount of such cases.Second, exported modifiers do not support iden-tifier unification in cases of conjunction, disjunc-tion and multiple inheritance.
That is, in each ofthe three cases below, the various occurrences of?X are not identified.C1 ?X ?
C2 ?XC1 ?X ?
C2 ?XC3 ?X 6 C1 ?X ?
C2 ?XIn such cases, the multiple occurrences of ?Xneed to be explicitly identified (see below).In practice then, the safest use of simple exports(ie without explicit identifier equalities) consists inusing them?
in combination with inheritance only and?
within a linguistically motivated subpart ofthe inheritance hierarchy4.2 ColoursAs discussed in section 2.3, node identificationscan be based on colours.
In particular, if a node iswhite, it must be identified with a black node.The main advantage of this particular identifica-tion mechanism is that it is extremely economical.Not only is there no longer any need to remembernames, there is in fact no need to chose a name.When developing a metagrammar containing sev-eral hundreds of nodes, this is a welcome feature.This ?no-name?
aspect of the colour mecha-nism is in particular very useful when a given classneeds to be combined with many other classes.For instance, in SEMFRAG (Gardent, 2006), thesemantic index of a semantic functor (i.e., a verb,an adjective, a preposition or a predicative noun)needs to be projected from the anchor to the rootnode as illustrated in Figure 5.
This can be done,as shown in the figure by conjoining CSem with CVor CA and letting the colour unify the appropriatenodes.s ?
s ?
?i2np ?
vp ?
np ?
np ?
ap ?
np ?
?i2i1v ?
cop ?
adj ?
?i1v | adjCVCACSemFigure 5: Case of semantic projections.Colouring also solves the problem raised by themultiple reuse of the same class in the definitionof a given class.
The colouring will be as shownin Figure 6.
Since the pp, p and n nodes are black,their two occurrences cannot be identified.
Thetwo white s nodes however will both be unifiedwith the black one thus yielding the expected tree.s ?
s ?
s ?v ?
pp ?
?
v ?
pp ?
pp ?p ?
n ?
p ?
n ?
p ?
n ?Figure 6: Case of double prepositional phrase withcoloured descriptions.As for exports however, colours cannot alwaysbe used to force identifications.First, colours can only be used in combinationwith conjunction or inheritance of non exportedidentifiers.
Indeed, inheritance does not allow theidentification of two different objects.
Hence if aclass C containing a white node named ?X inheritsfrom another class C?
exporting a black node alsonamed ?X, compilation will fail as a given identi-fier can only have one colour7 .
In contrast, whensolving a description containing the conjunction ofa black and a white node (where these two nodeshave either no names or distinct names), the wellformedness constraint on coloured tree will ensurethat these two nodes are in fact the same (since atree containing a white node is ill formed).Second, colour based identification is non de-terministic.
For instance, in Figure 5, if the lowest7However, different occurrences of the same unnamednode can have distinct colours.252node b of CSem was not labelled cat = v | adj,CA?
CSem would yield not one but two trees: onewhere b is identified with the cop node and theother where it is identified with the adj one.
Inother words, colour based unification is only pos-sible in cases where node decorations (or explicitnode identifications) are sufficiently rich to con-strain the possible unifications.To sum up, colours are useful in situationswhere:?
a given class needs to be combined withmany other classes ?
in this case it is unlikelythat the names used in all classes to be com-bined are consistent (ie that they are the samefor information that must be unified and thatthey are different for information that mustnot) and?
the nodes to be identified are unambigu-ous (the white and the black nodes containenough information so that it is clear whichwhite node must be identified with whichblack one)4.3 InterfacesInterfaces provide another mechanism for globalnaming.
They are particularly useful in caseswhere two fundamentally different objects containnon-node identifiers that must be unified.Recall (cf.
section 4.2) that exported identifiersare best used within restricted, linguistically welldefined hierarchies.
In a case where the objectscontaining the two identifiers to be identified aredifferent, these will belong to distinct part of theinheritance hierarchy hence identifier export is nota good option.Node colouring is another possibility but as thename indicates, it only works for nodes, not forfeature values.In such a situation then, interfaces come inhandy.
This is the case for instance, when com-bining a semantic representation with a tree.
Thesemantic formula and the tree are distinct objectsbut in the approach to semantic construction de-scribed in (Gardent and Kallmeyer, 2003), theyshare some semantic indices.
For instance, thesubject node in the tree is labelled with an indexfeature whose value must be (in an active formtree) that of the first argument occurring in thesemantic representation.
The encoding of the re-quired coreference can be sketched as follows:Subj ?
{ .
.
.
?X .
.
.}?
= [subjectIdx = ?X]Sem ?
{ .
.
.
?Y .
.
.}?
= [arg1 = ?Y]Tree ?Subj?
= [subjectIdx = ?Z]?Sem?
= [arg1 = ?Z]The first two lines show the naming of the iden-tifiers ?X and ?Y through the interface, the thirdillustrates how unification can be used to identifythe values named by the interface: since the samevariable ?Z is the value of the two features arg1and subjectIdx, the corresponding values in theSubj and Sem classes are identified.4.4 Explicit identification of exportedidentifiersThe explicit identification of exported identifiers isthe last resort solution.
It is not subject to any ofthe restrictions listed above and can be combinedwith conjunction, disjunction and inheritance.
Itis however uneconomical and complexifies gram-mar writing (since every node identification mustbe explicitly declared).
Hence it should be used aslittle as possible.In practice, explicit identification of exportedidentifiers is useful :?
to further constrain colour based identifica-tion (when the feature information present inthe nodes does not suffice to force identifica-tion of the appropriate nodes)?
to model general principles that apply to sev-eral subtrees in a given hierarchyThe second point is illustrated by Subject/Verbagreement.
Suppose that in the metagrammar,we want to have a separate class to enforce thisagreement.
This class consists of a subject node?SubjAgr bearing agreement feature ?X and ofa verb node ?VerbAgr bearing the same agree-ment feature.
It must then be combined with allverbal elementary trees described by the meta-grammar whereby in each such combination thenodes ?SubjAgr, ?VerbAgr must be identi-fied with the subject and the verb node respec-tively.
This is a typical case of multiple inheri-tance because both the subject and the verb nodesare specified by inheritance and ?SubjAgr,?VerbAgr must be further inherited.
Sincenodes must be identified and multiple inheritanceoccur, simple identifier exports cannot be used (cf.section 2.3.1).
If colours cannot be sufficiently253Pros Cons PracticeExport Economy Name management Use in linguistically motivatedNot with multiple inheritance sub-hierarchyNot with conjunctionNot with disjunctionNot with multiple reuseColours Economy ++ Non deterministicMultiple reuse OK Not with inheritance Use when a given classand identically named identifiers combines with many classesInterface Global Name management Use for Syntax/Semantic interfaceExplicit identification Usable in all cases Uneconomical Last Resort solutionFigure 7: Summary of the pros and cons of sharing mechanisms.constrained by features, then the only solution leftis explicit node identification.Figure 7 summarises the pros and the cons ofeach approach.5 ConclusionIn this paper, we have introduced a specificationformalism for Tree-Based Grammars and shownthat its expressivity helps solving specificationproblems which might be encountered when de-velopping a large scale tree-based grammar.This formalism has been implemented withinthe XMG system and successfully used to encodeboth a core TAG for French (Crabbe, 2005; Gar-dent, 2006) and a core Interaction Grammar (Per-rier, 2003).
We are currently exploring waysin which the XMG formalism could be extendedto automatically enforce linguistically-based well-formedness principles such as for instance, a kindof Head Feature Principle for TAG.ReferencesT.
Becker.
2000.
Patterns in metarules.
In A. Abeille andO.
Rambow, editors, Tree Adjoining Grammars: formal,computational and linguistic aspects.
CSLI publications,Stanford.J.
Bos.
1995.
Predicate Logic Unplugged.
In Proceedings ofthe 10th Amsterdam Colloquium, Amsterdam.M.H.
Candito.
1996.
A principle-based hierarchical rep-resentation of LTAGs.
In Proceedings of COLING?96,Kopenhagen.B.
Crabbe and D. Duchier.
2004.
Metagrammar Redux.
InProceedings of CSLP 2004, Copenhagen.B.
Crabbe.
2005.
Repre?sentation informatique de gram-maires fortement lexicalise?es : Application a` la gram-maire d?arbres adjoints.
Ph.D. thesis, Universite?
Nancy2.D.
Duchier and C. Gardent.
1999.
A constraint based treat-ment of descriptions.
In Proceedings of the 3rd IWCS,Tilburg.Denys Duchier and Stefan Thater.
1999.
Parsing with treedescriptions: a constraint-based approach.
In NLULP,pages 17?32, Las Cruces, New Mexico.R.
Evans, G. Gazdar, and D. Weir.
1995.
Encoding lexi-calized tree adjoining grammars with a nonmonotonic in-heritance hierarchy.
In Proceedings of the 33rd AnnualMeeting of the ACL, 77-84.B.
Gaiffe, B. Crabbe, and A. Roussanaly.
2002.
A new meta-grammar compiler.
In Proceedings of TAG+6, Venice.C.
Gardent and L. Kallmeyer.
2003.
Semantic constructionin FTAG.
In Proceedings of EACL?03, Budapest.C.
Gardent.
2006.
Inte?gration d?une dimension se?mantiquedans les grammaires d?arbres adjoints.
In Actes de La13e`me e?dition de la confe?rence sur le TALN (TALN 2006).A.
Joshi and Y. Schabes.
1997.
Tree-adjoining grammars.In G. Rozenberg and A. Salomaa, editors, Handbook ofFormal Languages, volume 3, pages 69 ?
124.
Springer,Berlin, New York.L.
Kallmeyer.
1996.
Tree description grammars.
In Resultsof the 3rd KONVENS Conference, pages 330 ?
341.
Mou-ton de Gruyter ed., Hawthorne, NY, USA.H.-U.
Krieger and U. Schafer.
1994.
TDL ?
a type descrip-tion language for constraint-based grammars.
In Proceed-ings of COLING-94, pp.
893?899.R.
Muskens and E. Krahmer.
1998.
Description theory, ltagsand underspecified semantics.
In TAG?4.G.
Perrier.
2000.
Interaction grammars.
In Proceedings of18th International Conference on Computational Linguis-tics (CoLing 2000), Sarrebrcken.G.
Perrier.
2003.
Les grammaires d?interaction.
HDR eninformatique, Universite?
Nancy 2.K.
Vijay-Shanker and Y. Schabes.
1992.
Structure sharingin lexicalized tree adjoining grammars.
In Proceedings ofCOLING?92, Nantes, pp.
205 - 212.E.
Villemonte de la Clergerie.
2005.
DyALog: a tabularlogic programming based environment for NLP.
In Pro-ceedings of CSLP?05, Barcelona.F.
Xia, M. Palmer, and K. Vijay-Shanker.
1999.
To-ward semi-automating grammar development.
In Proc.
ofNLPRS-99, Beijing, China.254
