ISTV?N B_.~,TORIWORKING WITH THE INTERACTIVE VERSION OF THET.G.T.-SYSTEM OF JOYCE FRIEDMANThe present paper does not claim to be a description of the TGT-System, since it was already presented by Professor Friedman herselfat the International Conference on Computational Linguistics in Stock-holm in 1969.
In addition the system has been described also in thebook Jo'i'cE FRIEDMAN, A Computational Model of Transformational Gram-mar, Elsevier, 1971.
Our intention is to present the new interactive ver-sion of the TGT-System, which has been developed at the Basic Re-search of I13M Germany, and to show how it can be used in linguisticresearch.In order to appreciate the present interactive version, it will be,however, necessary to recall some essential aspects of the TGT-System,yet we do not want to discuss the Friedman System as such in asystematic fashion.Accordingly, in the first part of the paper I shall talk about thebatch version, and about our experiences with the system and then Iprocede to the interactive version.1.
TIlE TGT-SYSTEM IN GENERALThe TGT-System of Friedman grew out of the necessity to Verifyor control a formal grammar.
It becomes increasingly di~cult o con-trol any formal system beyond a certain size: if one wishes to followthe interaction of two or three abstract rules with all their implications,The new interactive version of the System has actually been installed at the C.N.U.C.E.in order to enable the participants of the Conference to see the systems as it works.
Itake this opportunity to thank the organizers of the conference, the C.N.U.C.E., andparticularly Professor Faedo, Torrigiani, and Zampolli, once again, for their generoussupport of the demonstration.
I also thank my collegues Mrs. Schirmer, Miss Zoeppritzand Mr, Henning, who assisted me to prepare the demonstration.
I am especially indebtedDr.
Picchi, who adopted the interactive version to the local cMs-System.104 ISTV.~N ~.~TOathe may still use his head; for a dozen rules, he will need paper andpencil; and for hundreds of rules, he must have a computer.As primary objective Friedman wanted to give a computationalaid to the transformationally oriented linguists.
Her system as it standsnow can, however, be considered also as an attempt to formalize thetransformational grammar in the strict mathematical sense as well.The basic intention of Friedman was not to argue for a specific typeof generative grammar but rather to Offer a framework as general aspossible and let the linguist impose restrictions on his particular gram-mar.
However, it cmmot be overlooked that the starting point of Fried-man is clearly CHOMSKY'S Aspects-model.Accordingly, it is easy to learn how to work with the TGT-Systemif yOU are familiar with transformational theory.
On the other hand,you can use to system "to learn" transformational grammar, as atutorial aid.
Since we do not want to discuss either the transformation-al grammar directly, nor the purely technical details of Friedman'sSystem, please, let me presume familiarity with the basic notions ofgenerative grammar and refer for the purely notational conventionsonce again to Friedman's book.2.
THE FORM OF THE GRAMMARThe form of the Grammar is strictly prescribed, but as alreadymentioned, it is very close to current ransformationalist notation.For the TGT-System a grammar consists of a phrase structure, a lexicon,and a transformational part.
In the first phase of the processing the gram-mar is built up according to the users specifications and in the second,subsequent phase one sentence (or more) are constructed accordingto the grammar.
Each of these major components is subdivided furtherinto smaller units.
The structuring of the Grammar is indicated bykeywords, which must be used in certain positions and are anticipatedby the System.Let me shortly comment on some points of this scheme of grammar.3.
THE TREATMENT OF THE CONTEXTUAL FEATURESFriedman introduced a new type of feature, called contextual,which comprises Chomsky's trict subcategorization a d selectionalrestrictions; i.e., it is all the same for further processing, whether aTHE INTERACTIVE VERSION OF THE T.G.T.-SYSTEM 105contextual rule involves features, like (a) or just category symbols,like (b)in (Fig.
1.
).Contextual Rule(a) HUMSBJ----- ( S / (  # (ART) N \] + HUMAN \ ] ?
/o_  %) ) .0~) DmOBJ = ( V~ ( % NP )>.Lexical EntriesKey \[ + N .
.
.
.
-- HUMAN f,Student I + N .
.
.
.
+ HUMAN \],Imagine I + V .
.
.
.
+ HUMSBJ .
.
.
I ,Lexical Insertion1.
Category N V .
.
.#INI\[ + N + HUMAN INP lip #1V, .
,  , .
,ImagineI + V +HUMS13Jl2.
Category V N .
.
.
.S# NP VPI IN vHul,atz ~ I + V + HUMSBJ.
Ik~ Student \] "~%~1F I+  tIUMAN\[Fig.
1.
Side EffectsBut apart from this simplification, the treatment of these contextualfeatures i  significantly different from that of CHOMSKV'S in,the Aspects-model.
The main innovation is the concept of the "side effects ",which makes the selectional rules independent of the order of insertinglexical items into the derivational tree.If the contextual feature refers to a node (or nodes) to which alexical entry has already been attached, (as in (1) on Fig.
1) the programchecks the compatibility of the item with its environment, just asin the Aspects-model.
If on the other hand (as in (2), Fig.
1) the nodereferred to in the contextual rule is still empty, the new item is intro-duced and the consequences of the contextual features, i.e.
the featureon which the insertion depends, are projected into the invironment.f106 ISTV~N B?TO~4.
THE REPRESENTATION OF TREESNote that the output trees are leaned on the side to simplify print,ing.
In addition the nodes are numbered for ease of reference.
Thesenumbers can be used, among others to localize the feature, which be-long to a specific node, also with higher, non-terminal nodes.
Notealso that features coming from the lexicon are associated originallywith the lexical entries.
After lexical insertion they are adjoined tothe immediately dominating category node and not to the actual wordany more.5.
THE FORM OF TRANSFORMATIONSIn comparison with the Phrase Structure Rules the notationalconventions for transformations are less uniform.
The notational un-steadiness i  largely due to the lack of a strict, mathematically foundedand universally accepted transformational theory.There are two notational styles in use; the more popular of themis the MIT-Style.
(Fig.
2).Verbal Description of Passive:1.
EXCHANGE SUBJECT AND OBJECT2.
INSERT THE WORD BY AS LEFT SISTER.
OF THE AGENT3.
MAR.K THE MAIN VERB AS PAST PARTICIPLEM.
L T. - Notation :SD # NP X PASS V NP X)1 2 3 4 5 6 7 ~ =---------->\ [ S T \ ] B Y + 2 7  SC 1 6 3 4 + PARMITRE - Notation:SD % 1 # 2NP % PASS 3V 4NP %,SC (PREP < BY > ) ACHLE 2,I + PART I MERGEF 3,4 ALESE 2,2 ARISE 3.AbbreviationsALESE .
.
.
add left sisterARISE .
.
.
add right sisterMERGEF.
.
.
merge featureACHLE .
.
.
add by Chomsky ad-junction to the leftFig.
2.
Writing TransformationsTHE INTERACTIVE VERSION OF THE T.G.T.-SYSTEM 107This convention for transformation is generally advocated in stan-dard introductory works.
Accordingly, transformations are written inthe form of pseudo-rewriting rules, where apparently, the structuraldescription (SD) part should be replaced by the structural change(SC) part.
Wi th  other words: you define the input arid you definethe output.
The convention is self explanatory, but perhaps omewhatvague.
The MIT notation is regarded even by its own adherentsrather as a convenient short-hand for indicating structural cllangesand not as a proper, full scale formalism.The other style is the MITRE-notation, which is less known andresembles computer commands.
This convention defines the !nputinto a transformation and lists the elementary operations, to be carriedout on the input tree.
The elementary operations hotild be definedin advance.
On the whole this way of representing transformations ismore abstract but it can be formalized more readily.
Friedman usesthis style of notation: there is no problem to reformulate a trans-formation from the pseudo-rewriting style into the operationalrepresentation.6.
'~ THE TRAFHC RULES "The purpose of the control program (cv) is to determine m whichorder, and at which point in a derivational tree, a transformation shouldbe applied.By means of a fORTRAN-like control language (by the so called" traffic rules "), the linguist can execute the transformations cyclically,i.e.
applying the same set of transformations to every clause, he candetermine in which order the clauses of a sentence should be processed,he may change the order of execution depending on certain condition,e.g.
on the success of preceding transformations etc.
This control partof Friedman's System provides an enormous generative power, thepossibilities of which have hardly been discussed in the linguistics.
Youcan easily define several successive transformational cycles by the cvof Friedman, you can solve the ordering problem of transformationsby defining unique jumps in order to leave out the execution of a transfor-mation, which in a "simple ", cyclically ordered grammar would beimpossible.~vt108 XSTV~N ~XXOaI7.
USING THE SENTENCE GENERATORThe actual testing of the Grammar is done by the Sentence Gen-erator.
As already said the Grammar is laid on in the first phase ofthe processing and subsequendy the system should be instructed togenerate sentences according to the given grammar.
Trivially in asmuch as the system generates correct sentences, the grammar is veri-fied to the extent the generated sentences are false, the grammar iswrong and has to be corrected.The sentence generator as such can operate in one of three nodes(Fig.
3):1.
Random Sentences:SA random sentence will be generated2.
Predefined Structures:S #NP ART THEN BOYVP AUX MOD QTNS PRSV PASSV READNP PRON WHAT#The structure will be operated on according to your grammar3.
Directed Random Generation:S RESNDOMQA random sentence will be generated with the restriction that it will not dominatea Q-nodeFig.
3.
Types of Input into the Sentence Generator1.
It can generate sentencescompletely at random, where a ran-dom number generator mechanism controls the selection of grammat-ical rules and lexical insertion.
All you have to do is to enter the sen-tence symbols S.THE INTERACTIVE VERSION OF THE T.G.T.-SYSTEM 1092.
You can predefme a sentence ntirely at the level of deepstructure and let the system check the tree and carry out the transfor-mations leading up to .the surface structure.3.
You can use partially defined input, e.g.
defining just the struc-ture, but leaving open the lexical insertions, or just specifying apartic-ular structural configuration you are interested in, while letting thesystem fill up the rest at random.For practical testing the second and the third way of using thesentence generator is clearly preferable.
The random generator mayproduce spectacular sentences, but practically never the ones which havebearing on the problem you are interested in.
The sentences delivered.by the random generator may be and are revealing, and nobody exper-imenting with the system would withstand the temptation to seewhat his grammar would produce "left entirely alone ", but it isnot suitable for systematic work.
You may correct a mistake detectedby the random generator, but you better test the correction by a pre-determined skeleton, otherwise you may get a totally different sentence,from which you cannot see whether the error has really been correctedor not.According to our experience, ntirely predetermined structures in-cluding lexical entries are the best to test a grammar.
In this case youcan anticipate a normal sentence as the final output of the generator,and can immediately decide whether the generation is correct or not.There are two input formats: a free, bracketed (FTRIN) format,and a fixed tree format (TVJN).
It is perhaps a matter of personal taste,yet for us the rTRIN, that is the bracketed input, seemed to be moreconvenient.
(Fig.
4)FTRIN Format:S < # NP ( PRON <JEMAND)) VP (NP(AtkT(D) N(BUCH)>V ( LES >> MOD < V (HAB> TNS( PtLS >) # ).TRIN Format:#NPVPMOD#PRON JEMANDNP ART DN BUCHV LESV HABTNS PR.SFig.
4.110 ISTVAN B/kTORIUsually, the interaction of the phrase structure rules is fairly straight-forward, while that of the transformational ru es is much more intricate.Therefore you can easily predefme a skeleton by using your own phrasestructure rules "manually " and then let the system apply the transfor-mations to the prefabricated input.
If you use partially predeterminedtrees, you may be distracted by mistakes, which occur at places whichare of no interest o you.
Note that you cannot correct all errors, atleast not at once, and therefore you had better concentrate on a fewpoints, otherwise you loose sight of you own grammar.8.
THE OUTPUT OF THE BATCH VERSIONThe original batch output of the ToT-System has been designedto provide all possible information about the processing, which thelinguist may possibly need.
First the input grammar is listed, followedby the content of the major internal tables, according to which thesubsequent generation procedes.
Then, the process of sentence genera-tion is reported in such a manner, that the linguist can follow the sig-nificant steps of the processing (Fig.
5 (1)).9.
TIIE INTERACTIVE VERSION OF TH.E TGT-SYSTEMThe present interactive version has been developed according tothe experiences gained by working with the original batch version.We have noticed in general that we are interested in the linguistic aspectsof the derivation, such as changes in the tree, or in the final output,but not the actual computation.The demand for a more condensed output will be even more im-perative in a terminal environment where the time and the outputshould be restricted to a minimum.
Therefore we defined a new ad-ditional output file, containing just the essential information in whicha linguist is interested (Fig.
5).The original batch protocol enables you to follow the actual flowof computation, e.g.
in the case of a transformation you get the modulescalled to perform the successive steps of the processing.
The interplayof the different subroutines i , however, always the same: ANTES Tcalls PASSIV, PASSIV calls ELEMOP etc.
Since Friedman's Systemworks practically free of error, there is no need to check the subroutineTHE INTERACTIVE VERSION OF THE T.G.T.-SYSTEM 111The Transformations a formulated in the Grammar:TRANS 1 PASSIV " PASSIVBILDUNG " l  OB.SD#INP  2NP 3V 4V l  +PASS 1%.SC (PREP I + DAT\ [  (VON))  AFIDE 1,\[ + PART \[ MERGEF 3,2 ALESE 1.The Derivational Tree to be Manipulated on:1S 2#3 NP 4 ART 5 D6 N 7 STUDENT38 VP 9 NP 10 PR.ON12 V 13 LES14 MOD 15 V 16 WEILD17 TNS 18 PR.S19 Q20 #11 WASThe Report on the Successful Completion:1.
The ordinal batch protocolANTEST CALLED FOR.
2" PASSIV "(AC ) ,SD = 7.
RESTRICTION = O.TOP= I :SANTEST RETURNS ** 1 **CHANGE.
CALL ELEMOP FOR.
AFIDE 21 3CHANGE.
CALL ELEMOP FOR.
ALESE 9 32.
The new interactive protocolPASSIV AFIDE 21 3 ADDED SUBTREE: 21 IS HEADED BY PREPPASSIV MER.GEF 12 + PARTPASSIV ALESE 9 3Fig.
5.
The Protocol of the Transformationscalls every time.
This information, therefore, can be dispensed withfor the most purposes.We have designed a slightly different, more comprehensive format,which contains only the linguistically relevant information.
The newoutput format of the interactive version makes a clear reference to theinput grammar, such as the name of the transformation, the nameof the elementary operations, the nodes affected by them.
In one pointthe interactive version provides information, which has not been explic-itly reported in the original batch version.
You can follow now alsothe feature operations in the same form as you follow the tree opera-tions: the interactive protocol delivers the features names and the actualfeature value.
For a linguist esting feature operations this is an inno-112 ISTVAN BATORIvation over the original batch version, which suffices to give a hintat this point, that the feature operation has been successfully comple-ted without further details.It should be noted, that batch-output and terminal output are notmutually exclusive, the terminal output is a summary extracted fromthe original and placed on a separate file output.
The original outputis, however, still available.
The file on which is written is normallyset dummy, but it can be reactivated and listed, in the very same formas in the original version.
110.
THE COMMANDS OF THE INTERACTIVE VERSIONThe interactive version on the whole uses a fairly straightforwardlanguage.
The answer to most of the questions i either yes or no (orjust the first letter of these words).
Every answer is prompted; andshould be answered by saying yes or no.
In such cases where an otheranswer is expected the book of Friedman should be consulted.
Notethat in case you want to enter the input skeleton ot from the terminalyou must have the file allocated prior to calling the TgT-System.~.
THE CONTROL OF THE INPUTSummarizing: if you want to run the ToT-System you have todefine and enter a grammar, give a command for the sentence gener-ator, and you have to deliver a skeleton to be expanded (Fig.
6).
Orig-inally all these three kinds of input were entered in sequence into thesystem on the same file as data.It should be noted that the grammar is a part of the input data,which is entered and processed in each run.
This homogenous inputis then interpreted by the system as grammar or as input into the sen-tence generator according to the internal ogics of the program.
Inorder to achieve greater flexibility while testing a grammar, we sepa-rated the three logically different input into three logically differentfiles.
The input grammar, usually a text of several hundreds of lines,1 The flies 8 and 9, containing system messages have been, however, dropped; theywere of no interest o ordinary users.rTHE INTERACTIVE VERSION OF THE T.G.T.-SYSTEMBat& Input3.
Input skeletons'-~2.
Generator Commands.-"-~ A1.
GramInteraaive InputI.
Gralllllhqr2.
Generator C mmandsor3.
Input SkeletonsFig.
6.
The Reorganization f Input113)is normally already stored on an external device and entered accord-ingly.
The generator command (the $MatN-card) may be attachedto the grammar, if not, it is prompted and you may enter it from theterminal.Similarly, you may predefine input skeletons to be tested and enterthem just as you enter the grammar as a separate file.
You have, how-ever, the choice to enter skeletons directly from the terminal.
In caseof interest you may enter as many skeleton as you like.
The randomgenerator then provides for variation.Technically, the separation of the three logically different kinds ofinput has been accomplished by introducing a file variable, which isset first to accept he grammar from a permanent data set and thenchanged over to the terminal or an other permanent input data set ac-cording to user specifications at session time.114 ISTVAN B~TORI12.
TIlE TREATMENT OF THE ERROR I~iESSAGESThe same file variable technique is used to control the error mes-sages.
The error file is set either to the terminal or to the batch file al-ternatively.
There would be no problem to assign the error messagespermanently, et an eventual change of the file requirements in ter-minal environment would mean a revision of several hundreds of er-ror messages, while a file variable can be controlled by a single instruc-tion.There is a further problem to be faced and that is the referencepoint of the error message.
In the original batch version the error mes-sage precedes the actual erroneous line in the grammar or inserted inthe protocol at the appropriate point.In the first case the interastive version does not display the originalinput grammar, and therefore a message that e.g.
brackets are opened,but not closed or "special character expected ", but not found, andthe like are not very informative, since the user would be left aloneto find the critical place in the grammar.
Therefore the error messagesduring the processing of the input grammar are preceded by the actualline in which the error has occurred.
The line numbering will helpthe linguist to localize the erroneous ection in the input grammar.If on the other hand the error occurs during sentence generation,the message will be inserted in the terminal protocol at the appro-priate place.13.
THE CONTROL OF OUTPUTAnother crucial point is the control of the terminal output.
Youcan have the following choices as regards extent of output:1) You are not interested in any further details, you ,do notwant to see the full input tree.
In this case you still get: 1., the linearrepresentation f the input, 2., the list of transformations which havebeen applied and 3., the output of the transformations, also in thelinear form.
This is the minimal amount of output (Fig.
7):2) You wish to see the input tree into the transformational com-ponent, you answer to the question PRINTOUT INPUT TREE?by saying "yes ".
In this case you get alo the full output tree of theTHE INTERACTIVE VERSION OF THE T.G.T.-SYSTEM 115ERROR MESSAGES WANTED?YINPUT TREE FROM TERMINAL?I1PRINTOUT INPUT TREE?nINPUT TO TRANSFORMATIONS:# Q NEG WEP.
EIN PREIS ERMOEH WERD HAB KOENN WERD PRS #~rTRANSFORMATIONS WHICH APPLY:AUXELIM ALESE 20 19AUXELIM ALESE 22 19AUXELIM ALESE 24 19AUXELIM ALESE 26 19AUXELIM ALESE 28 19KEIN AFIDE K 13KEIN ERASE 0 6PASSIV ALESE 12 8PASSIV AFIDE 32 8logoff in 15 rainPASSIV ALESE 8 17KNGRUM ERASE 0 28VR.ISE ARISE 26 11VRISE ARISE 24 11VRISE ARISE 22 11VRISE ARISE 20 11VR.ISE ARISE 17 11TOPIC ERASE 0 3TOPIC ALESE 8 12VERBUM3 ARISE 26 8GR.MARK ERASE 0 2GtLMARK ERASE 0 30INFPAP,.
ALADE T 17INFPAR SUBSE WORDEN 21INFPAR SUBSE SEIN 23INFPAR.
ALADE EN 24MORPHY SUBSE WIRD 27INDART SUBSE EIN 14PROMOR SUBSE WEM 10PUNKT &LADE 41 1PUNKT ALADE 43 1OUTPUT GENERATED BY TRANSFORMATIONS:~r,RADDED SUBTREE: 32ADDED SUBTR.EE: 41ADDED SUBTR.EE: 43VON WEM WIRD KEIN PR..EIS ERHOEHT WORDEN SEIN KOENNENQMARK PUNKTFig.
7.116 ISTVAN BATORIwhole generation automatically.
You get alo the list of the transforma-tions which apply displayed; to be more precise you get the list oftree operations (Fig.
8):ENTER.
RANDOM GENERATOR COMMANDS!$main trin gen tran.INPUT TREE FROM TERMINAL?yesENTEP.
RANDOM GENERATOR INPUT IN THE FORM OF TI~INI+ + + + +sPRINTOUT INPUT TREE?yesPRINTOUT FEATURES?noINPUT TO TRANSFORMATIONS:1S  2#3NP4VP5 MOD9 PI~ON 15 JEMAND7NP 10N8 V 16 SEH11 TNS 17 PRS12 Q13 NEG# JEMAND HANS SEH PR.S Q NEG #TR_&NSFORMATIONS WHICH APPLY:NICHT ALESE 18 9NICHT ERASE 0 13KONGP.UE5 ERASE 0 11VERBUM ALESE 8 3VERBUM EP.ASE 0 12GRLOE ERASE 0 2GRLOE SUBSE FtLGZ 6OUTPUT GENERATED BY TRANSFORMATIONS:1 S 8 V 16 SEH3 NP 9 PRON 15 JEMAND4VP  7NP 10N18 NEG 19 NICHT20 FI~GZSEH JEMAND HANS NICHT FRGZ1ENTER GENERATOR INPUT AS TtLIN+ + + + +/*TRIN .NO MORE INPUTS.READY14 HANSADDED SUBTREE: 1814 HANSOR QUIT BY >/~>!Fig.
8.THE INTERACTIVE VERSION OF THE T.G.T.-SYSTEM 1173) You may want to see also the features associated with thenodes in the tree - then you respond to the next question of the systemPRINTOUT FEATURES correspondingly - and you get the featuresdisplayed both of the input and the output tree.
In addition you getalso the list of  transformations applying, now including also the fea-ture operations (Fig.
9) :call new(tgt 250)~rWELCOME TO THE INTERACTIVE VERSION OFFRIEDMAN\[S TGT-SYSTEM !ERROR MESSAGES WANTED?yesINPUT TREE FROM TERMINAL?noPRINTOUT INPUT TREE?yesPRINTOUT FEATURES?yesINPUT TO TRANSFORMATIONS:NODENODENODENODENODENODE1S  2#3 NP 4 ART 5 D6 N 7 STUDENT38 VP 9 NP 10 PRON12 V 13 LES14 MOD 15 V 16 WERD17 TNS 18 PRS19 Q20 #4 ART\[ +ART +DEF \[6N11 WAS"kPASSIV A.FIDE 21 3PASSIV MERGEF 12 + PARTPASSIV ALESE 9 3NOMIN MERGEF 9 + NOMNOMIN MERGEF :10 + NOMDATIV MERGEF 3 + DATTRANSFORMATIONS WHICH APPLY:ADDED SUBTR.EE: 21+ N + MASC -SG + HUMAN + ANIM -PRPNM \[10 PRON+ PRON + SG -HUMAN + ANIM + (S/(%_%Q%>> \[12 v+ V + EN + STRK + <S/>~NP<(ART)* \[ + HUMAN l>%_b/o>> \[15 VI + v + PASS I17 TNS\[ +TNS +PRS \[#D STUDENTEN WAS LES WERD PRS Q#118 ISTVAN BATORIKONGR.UE5 MOVEF 10 15KONGI~UE5 MOVEF 17 15KONGtkUE5 ERASE 0 17VERBUM ALESE 15 9VERBUM ERASE 0 19ERGFIk ARISE 9 2INFPAI~ ERASEF 12 SGPRSINFPAR.
AFIDE GE 12INFPAk ALADE N 12MORPHY SUBSE WIleD 16?
DEFAR.T SUBSE DEN 5DEFAtLT SUBSE DEN 5GtLLOE ERASE 0 2GRLOE SUBSE FRGZ 20OUTPUT GENERATED BY TRANSFORMATIONS:-k1 S 9 NP  10 PRON 11 WAS15 V 25 VCIR.D3 NP 21 PREP 22 VON4 AtLT 26 DENNODENODENODENODENODENODENODENODE1READY+ SG+ PRS6 N 7 STUDENT38 VP 12 V 23 GE13 LES24 EN28 FRGZ'9NP-4- NOM \[10 PRON+ PRON + SG -HUMAN + ANIM + NOM + <S1(%-% Q%)) I15 V+V +SG +PIKS +PASS \[3NP+ DAT I21 PREP+ DAT \[4 APT+ AR.T + DEF \[6N+ N + MASC -SG + HUMAN + ANIM -PRPNM \[12 V+ V + EN + STR.K + PAP.T + <S/<#NP<(AIKT)* I + HUMAN l>%-%>> IWAS WIRD VON DEN STUDENTEN GELESEN FP.GZFig.
9.THE INTERACTIVE VERSION OF THE T.G.T.-SYSTEM 1194) You may be interested in even more details, for instance insome intermediate rees and you have inserted TrACE-cards in the con-trol program of the grammar just as they are inserted in the originalbatch version.
Now if you answer to the question PRINTOUT IN-PUT TREE by saying ALL,  you will receive very intermediate reeas well, in addition to the input and output tree with features and fea-ture operations.
Otherwise the TRACt.
function returns just the terminalstring of the derivation.
Fig.
10 shows the general logics of the outputcontrol:Printout input ree?Printout features?Output produced:Terminal stringsTreesFeaturesTree operationsFeature operationsIntermediate Trees by axse~NO++YesNo+++Fig.
10.
The Control of Interactive OutputYesYes+++++All++++++14.
CtOSlNC~F.MARKSA grammar developed irecdy with the aid of the TGT-Systemis practically never complete, it generates only a subset of the languagein question.
You may add, change, remove parts of the grammarand thus you can easily produce minor variants of the same grammarone of which may be preferable over the other.
In fact this is the nor-mal way to work with the system.At the C.N.U.C.E.-installation the/'e was a number of test-gram-mars (German, Italian, English and Spanish), offered to the participantsto try how such testing looks like.
The participants of the Conferencewere invited to look at the Grammar Tester as it works.
In the CentroNazionale Universitario di Calcolo Elettronico the TransformationalGrammar Tester was running on a I~M System/360 Model 67 underCP-CMS-67.REFERENCESN.
CHOMSK~', Aspects of the Theory ofSyntax, Cambridge (Mass.
), 1965.J.
FaI~I~lq, T. H. B~DT Lexical Insertionin Transformational Grammar, Palo Alto(Calif.), 1968.J.
Fr.I~D~, P,.
W. Do~,  A FormalSyntax for Transformational Grammar,Palo Alto (Calif.), 1968.J.
Fm.~aA~, P. MYst~NsgY, ComputerExperiments in Transformational Gram-mar: The UCLA English Grammar,Ann Arbor (Mich.), 1970.J.
FRIr~MAN, Application of a ComputerSystem for Transformational Grammar,Preprint No.
14, in International Con-~rence on Computational Linguistics,Stockholm, 1969.J.
Fr.mDV_~, Directed Random Generationsof Sentences, in ,~ Communications ofthe ACM~,, XII (1969) 1.j.
FRmDV~N, A Computer System forTransformational Grammar, in ~ Com-munications of the ACM~, XII(1969) 1.J.
Fmr~DMAN, Distribution and Use of theComputer System for TransformationalGrammar, Working paper in Compu-tational Linguistics, M-27, The Uni-versity of Michigan, 1973.J.
FRmDmA~, et al, A Computer Model ofTransformational Grammar (Mathemat-kal Linguistics and Automatic LanguageProcessing Nr.
9), New York, London,Amsterdam, 1971.Y.
CH.
Mom~, Computer Experiments inTransformational Grammar: French I,Ann Arbor (Mich.), (Natural LanguageStudies Nr.
3), 1969.P.
I~OSENBAUM, D. I.OCI~AK, The IBMCore Grammar of English, YorktownHeights (New York), 1966.
