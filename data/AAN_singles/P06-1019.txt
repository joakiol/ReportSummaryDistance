Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL, pages 145?152,Sydney, July 2006. c?2006 Association for Computational LinguisticsPartially Specified Signatures: a Vehicle for Grammar ModularityYael Cohen-SygalDept.
of Computer ScienceUniversity of Haifayaelc@cs.haifa.ac.ilShuly WintnerDept.
of Computer ScienceUniversity of Haifashuly@cs.haifa.ac.ilAbstractThis work provides the essential founda-tions for modular construction of (typed)unification grammars for natural lan-guages.
Much of the information in suchgrammars is encoded in the signature, andhence the key is facilitating a modularizeddevelopment of type signatures.
We intro-duce a definition of signature modules andshow how two modules combine.
Our def-initions are motivated by the actual needsof grammar developers obtained through acareful examination of large scale gram-mars.
We show that our definitions meetthese needs by conforming to a detailed setof desiderata.1 IntroductionDevelopment of large scale grammars for naturallanguages is an active area of research in humanlanguage technology.
Such grammars are devel-oped not only for purposes of theoretical linguis-tic research, but also for natural language applica-tions such as machine translation, speech genera-tion, etc.
Wide-coverage grammars are being de-veloped for various languages (Oepen et al, 2002;Hinrichs et al, 2004; Bender et al, 2005; King etal., 2005) in several theoretical frameworks, e.g.,LFG (Dalrymple, 2001) and HPSG (Pollard andSag, 1994).Grammar development is a complex enterprise:it is not unusual for a single grammar to be devel-oped by a team including several linguists, com-putational linguists and computer scientists.
Thescale of grammars is overwhelming: for exam-ple, the English resource grammar (Copestakeand Flickinger, 2000) includes thousands of types.This raises problems reminiscent of those encoun-tered in large-scale software development.
Yetwhile software engineering provides adequate so-lutions for the programmer, no grammar develop-ment environment supports even the most basicneeds, such as grammar modularization, combi-nation of sub-grammars, separate compilation andautomatic linkage of grammars, information en-capsulation, etc.This work provides the essential foundations formodular construction of signatures in typed unifi-cation grammars.
After a review of some basicnotions and a survey of related work we list a setof desiderata in section 4, which leads to a defi-nition of signature modules in section 5.
In sec-tion 6 we show how two modules are combined,outlining the mathematical properties of the com-bination (proofs are suppressed for lack of space).Extending the resulting module to a stand-alonetype signature is the topic of section 7.
We con-clude with suggestions for future research.2 Type signaturesWe assume familiarity with theories of (typed)unification grammars, as formulated by, e.g., Car-penter (1992) and Penn (2000).
The definitionsin this section set the notation and recall basic no-tions.
For a partial function F , ?F (x)??
means thatF is defined for the value x.Definition 1 Given a partially ordered set ?P,?
?,the set of upper bounds of a subset S ?
P is theset Su = {y ?
P | ?x ?
S x ?
y}.For a given partially ordered set ?P,?
?, if S ?P has a least element then it is unique.Definition 2 A partially ordered set ?P,??
is abounded complete partial order (BCPO) if forevery S ?
P such that Su 6= ?, Su has a leastelement, called a least upper bound (lub).Definition 3 A type signature is a structure?TYPE,?, FEAT, Approp?, where:1.
?TYPE,??
is a finite bounded complete par-tial order (the type hierarchy)1452.
FEAT is a finite set, disjoint from TYPE.3.
Approp : TYPE?FEAT ?
TYPE (the appro-priateness specification) is a partial functionsuch that for every F ?
FEAT:(a) (Feature Introduction) there exists atype Intro(F ) ?
TYPE such thatApprop(Intro(F ), F )?, and for everyt ?
TYPE, if Approp(t, F ) ?, thenIntro(F ) ?
t;(b) (Upward Closure) if Approp(s, F ) ?and s ?
t, then Approp(t, F ) ?
andApprop(s, F ) ?
Approp(t, F ).Notice that every signature has a least type,since the subset S = ?
of TYPE has the non-emptyset of upper bounds, Su = TYPE, which musthave a least element due to bounded completeness.Definition 4 Let ?TYPE,??
be a type hierarchyand let x, y ?
TYPE.
If x ?
y, then x is a su-pertype of y and y is a subtype of x.
If x ?
y,x 6= y and there is no z such that x ?
z ?
y andz 6= x, y then x is an immediate supertype of yand y is an immediate subtype of x.3 Related WorkSeveral authors address the issue of grammar mod-ularization in unification formalisms.
Moshier(1997) views HPSG , and in particular its signa-ture, as a collection of constraints over maps be-tween sets.
This allows the grammar writer tospecify any partial information about the signa-ture, and provides the needed mathematical andcomputational capabilities to integrate the infor-mation with the rest of the signature.
However,this work does not define modules or module in-teraction.
It does not address several basic issuessuch as bounded completeness of the partial or-der and the feature introduction and upward clo-sure conditions of the appropriateness specifica-tion.
Furthermore, Moshier (1997) shows how sig-natures are distributed into components, but notthe conditions they are required to obey in orderto assure the well-definedness of the combination.Keselj (2001) presents a modular HPSG, whereeach module is an ordinary type signature, buteach of the sets FEAT and TYPE is divided intotwo disjoint sets of private and public elements.
Inthis solution, modules do not support specificationof partial information; module combination is notassociative; and the only channel of interaction be-tween modules is the names of types.Kaplan et al (2002) introduce a system de-signed for building a grammar by both extendingand restricting another grammar.
An LFG gram-mar is presented to the system in a priority-orderedsequence of files where the grammar can includeonly one definition of an item of a given type (e.g.,rule) with a particular name.
Items in a higher pri-ority file override lower priority items of the sametype with the same name.
The override conventionmakes it possible to add, delete or modify rules.However, a basis grammar is needed and whenmodifying a rule, the entire rule has to be rewritteneven if the modifications are minor.
The only in-teraction among files in this approach is overridingof information.King et al (2005) augment LFG with amakeshift signature to allow modular developmentof untyped unification grammars.
In addition, theysuggest that any development team should agree inadvance on the feature space.
This work empha-sizes the observation that the modularization of thesignature is the key for modular development ofgrammars.
However, the proposed solution is ad-hoc and cannot be taken seriously as a concept ofmodularization.
In particular, the suggestion foran agreement on the feature space undermines theessence of modular design.Several works address the problem of modular-ity in other, related, formalisms.
Candito (1996)introduces a description language for the trees ofLTAG.
Combining two descriptions is done byconjunction.
To constrain undesired combina-tions, Candito (1996) uses a finite set of nameswhere each node of a tree description is associ-ated with a name.
The only channel of interac-tion between two descriptions is the names of thenodes, which can be used only to allow identifi-cation but not to prevent it.
To overcome theseshortcomings, Crabbe?
and Duchier (2004) suggestto replace node naming by colors.
Then, whenunifying two trees, the colors can prevent or forcethe identification of nodes.
Adapting this solutionto type signatures would yield undesired order-dependence (see below).4 DesiderataTo better understand the needs of grammar devel-opers we carefully explored two existing gram-mars: the LINGO grammar matrix (Bender et al,2002), which is a basis grammar for the rapid de-velopment of cross-linguistically consistent gram-146mars; and a grammar of a fragment of Modern He-brew, focusing on inverted constructions (Melnik,2006).
These grammars were chosen since theyare comprehensive enough to reflect the kind ofdata large scale grammar encode, but are not toolarge to encumber this process.
Motivated by thesetwo grammars, we experimented with ways to di-vide the signatures of grammars into modules andwith different methods of module interaction.
Thisprocess resulted in the following desiderata for abeneficial solution for signature modularization:1.
The grammar designer should be providedwith as much flexibility as possible.
Modulesshould not be unnecessarily constrained.2.
Signature modules should provide meansfor specifying partial information about thecomponents of a grammar.3.
A good solution should enable one module torefer to types defined in another.
Moreover,it should enable the designer of module Mito use a type defined in Mj without specify-ing the type explicitly.
Rather, some of theattributes of the type can be (partially) speci-fied, e.g., its immediate subtypes or its appro-priateness conditions.4.
While modules can specify partial informa-tion, it must be possible to deterministicallyextend a module (which can be the result ofthe combination of several modules) into afull type signature.5.
Signature combination must be associativeand commutative: the order in which mod-ules are combined must not affect the result.The solution we propose below satisfies these re-quirements.15 Partially specified signaturesWe define partially specified signatures (PSSs),also referred to as modules below, which are struc-tures containing partial information about a sig-nature: part of the subsumption relation and partof the appropriateness specification.
We assumeenumerable, disjoint sets TYPE of types and FEATof features, over which signatures are defined.We begin, however, by defining partially labeledgraphs, of which PSSs are a special case.1The examples in the paper are inspired by actual gram-mars but are obviously much simplified.Definition 5 A partially labeled graph (PLG)over TYPE and FEAT is a finite, directed labeledgraph S = ?Q, T,, Ap?, where:1.
Q is a finite, nonempty set of nodes, disjointfrom TYPE and FEAT.2.
T : Q ?
TYPE is a partial function, markingsome of the nodes with types.3.
?
Q ?
Q is a relation specifying (immedi-ate) subsumption.4.
Ap ?
Q?
FEAT ?Q is a relation specifyingappropriateness.Definition 6 A partially specified signa-ture (PSS) over TYPE and FEAT is a PLGS = ?Q, T,, Ap?, where:1.
T is one to one.2.
??
is antireflexive; its reflexive-transitiveclosure, denoted ?
??, is antisymmetric.3.
(a) (Relaxed Upward Closure) for allq1, q?1, q2 ?
Q and F ?
FEAT, if(q1, F, q2) ?
Ap and q1? q?1, then thereexists q?2 ?
Q such that q2? q?2 and(q?1, F, q?2) ?
Ap; and(b) (Maximality) for all q1, q2 ?
Q and F ?FEAT, if (q1, F, q2) ?
Ap then for allq?2 ?
Q such that q?2? q2 and q2 6= q?2,(q1, F, q?2) /?
Ap.A PSS is a finite directed graph whose nodesdenote types and whose edges denote the sub-sumption and appropriateness relations.
Nodescan be marked by types through the function T ,but can also be anonymous (unmarked).
Anony-mous nodes facilitate reference, in one module, totypes that are defined in another module.
T is one-to-one since we assume that two marked nodes de-note different types.The ??
relation specifies an immediate sub-sumption order over the nodes, with the intentionthat this order hold later for the types denoted bynodes.
This is why ???
is required to be a partialorder.
The type hierarchy of a type signature is aBCPO, but current approaches (Copestake, 2002)relax this requirement to allow more flexibility ingrammar design.
PSS subsumption is also a par-tial order but not necessarily a bounded complete147one.
After all modules are combined, the resultingsubsumption relation will be extended to a BCPO(see section 7), but any intermediate result can be ageneral partial order.
Relaxing the BCPO require-ment also helps guaranteeing the associativity ofmodule combination.Consider now the appropriateness relation.
Incontrast to type signatures, Ap is not requiredto be a function.
Rather, it is a relation whichmay specify several appropriate nodes for the val-ues of a feature F at a node q.
The intention isthat the eventual value of Approp(T (q), F ) be thelub of the types of all those nodes q?
such thatAp(q, F, q?).
This relaxation allows more ways formodules to interact.
We do restrict the Ap relation,however.
Condition 3a enforces a relaxed versionof upward closure.
Condition 3b disallows redun-dant appropriateness arcs: if two nodes are ap-propriate for the same node and feature, then theyshould not be related by subsumption.
The featureintroduction condition of type signatures is not en-forced by PSSs.
This, again, results in more flex-ibility for the grammar designer; the condition isrestored after all modules combine, see section 7.Example 1 A simple PSS S1 is depicted in Fig-ure 1, where solid arrows represent the ??
(sub-sumption) relation and dashed arrows, labeled byfeatures, the Ap relation.
S1 stipulates two sub-types of cat, n and v, with a common subtype,gerund.
The feature AGR is appropriate for allthree categories, with distinct (but anonymous)values for Approp(n, AGR) and Approp(v, AGR).Approp(gerund, AGR) will eventually be the lubof Approp(n, AGR) and Approp(v, AGR), hencethe multiple outgoing AGR arcs from gerund.Observe that in S1, ??
is not a BCPO, Ap isnot a function and the feature introduction condi-tion does not hold.gerundn vcat agrAGRAGRAGRAGRFigure 1: A partially specified signature, S1We impose an additional restriction on PSSs:a PSS is well-formed if any two different anony-mous nodes are distinguishable, i.e., if each nodeis unique with respect to the information it en-codes.
If two nodes are indistinguishable then oneof them can be removed without affecting the in-formation encoded by the PSS.
The existence ofindistinguishable nodes in a PSS unnecessarily in-creases its size, resulting in inefficient processing.Given a PSS S, it can be compacted into a PSS,compact(S), by unifying all the indistinguishablenodes in S. compact(S) encodes the same infor-mation as S but does not include indistinguish-able nodes.
Two nodes, only one of which isanonymous, can still be otherwise indistinguish-able.
Such nodes will, eventually, be coalesced,but only after all modules are combined (to ensurethe associativity of module combination).
The de-tailed computation of the compacted PSS is sup-pressed for lack of space.Example 2 Let S2 be the PSS of Figure 2.
S2 in-cludes two pairs of indistinguishable nodes: q2, q4and q6, q7.
The compacted PSS of S2 is depicted inFigure 3.
All nodes in compact(S2) are pairwisedistinguishable.q6 q7bq8q2 q3 q4 q5q1aF F FFFigure 2: A partially specified signature with in-distinguishable nodes, S2baF FFFigure 3: The compacted partially specified signa-ture of S2Proposition 1 If S is a PSS then compact(S) is awell formed PSS.1486 Module combinationWe now describe how to combine modules, an op-eration we call merge bellow.
When two mod-ules are combined, nodes that are marked by thesame type are coalesced along with their attributes.Nodes that are marked by different types cannotbe coalesced and must denote different types.
Themain complication is caused when two anonymousnodes are considered: such nodes are coalescedonly if they are indistinguishable.The merge of two modules is performed in sev-eral stages: First, the two graphs are unioned (thisis a simple pointwise union of the coordinatesof the graph, see definition 7).
Then the result-ing graph is compacted, coalescing nodes markedby the same type as well as indistinguishableanonymous nodes.
However, the resulting graphdoes not necessarily maintain the relaxed upwardclosure and maximality conditions, and thereforesome modifications are needed.
This is done byAp-Closure, see definition 8.
Finally, the addi-tion of appropriateness arcs may turn two anony-mous distinguishable nodes into indistinguishableones and therefore another compactness operationis needed (definition 9).Definition 7 Let S1 = ?Q1, T1,1, Ap1?, S2 =?Q2, T2,2, Ap2?
be two PLGssuch that Q1 ?Q2 = ?.
The union of S1 and S2, denoted S1?S2,is the PLG S = ?Q1 ?
Q2, T1 ?
T2,1 ?
2,Ap1 ?
Ap2?.Definition 8 Let S = ?Q, T,, Ap?
be a PLG.The Ap-Closure of S, denoted ApCl(S), is thePLG ?Q, T,, Ap???
where:?
Ap?
= {(q1, F, q2) | q1, q2 ?
Q and thereexists q?1 ?
Q such that q?1? q1 and(q?1, F, q2) ?
Ap}?
Ap??
= {(q1, F, q2) ?
Ap?
| for all q?2 ?
Q,such that q2? q?2 and q2 6= q?2, (q1, F, q?2) /?Ap?
}Ap-Closure adds to a PLG the arcs required forit to maintain the relaxed upward closure and max-imality conditions.
First, arcs are added (Ap?)
tomaintain upward closure (to create the relationsbetween elements separated between the two mod-ules and related by mutual elements).
Then, re-dundant arcs are removed to maintain the maxi-mality condition (the removed arcs may be addedby Ap?
but may also exist in Ap).
Notice thatAp ?
Ap?
since for all (q1, F, q2) ?
Ap, bychoosing q?1 = q1 it follows that q?1 = q1? q1and (q?1, F, q2) = (q1, F, q2) ?
Ap and hence(q?1, F, q2) = (q1, F, q2) ?
Ap?.Two PSSs can be merged only if the result-ing subsumption relation is indeed a partial order,where the only obstacle can be the antisymme-try of the resulting relation.
The combination ofthe appropriateness relations, in contrast, cannotcause the merge operation to fail because any vi-olation of the appropriateness conditions in PSSscan be deterministically resolved.Definition 9 Let S1 = ?Q1, T1,1, Ap1?, S2 =?Q2, T2,2, Ap2?
be two PSSs such that Q1 ?Q2 = ?.
S1, S2 are mergeable if there are noq1, q2 ?
Q1 and q3, q4 ?
Q2 such that the fol-lowing hold:1.
T1(q1)?, T1(q2)?, T2(q3)?
and T2(q4)?2.
T1(q1) = T2(q4) and T1(q2) = T2(q3)3. q1?1 q2 and q3?2 q4If S1 and S2 are mergeable, then their merge,denoted S1?S2, is compact(ApCl(compact(S1?S2))).In the merged module, pairs of nodes markedby the same type and pairs of indistinguishableanonymous nodes are coalesced.
An anonymousnode cannot be coalesced with a typed node, evenif they are otherwise indistinguishable, since thatwill result in an unassociative combination oper-ation.
Anonymous nodes are assigned types onlyafter all modules combine, see section 7.1.If a node has multiple outgoing Ap-arcs labeledwith the same feature, these arcs are not replacedby a single arc, even if the lub of the target nodesexists in the resulting PSS.
Again, this is done toguarantee the associativity of the merge operation.Example 3 Figure 4 depicts a na?
?ve agreementmodule, S5.
Combined with S1 of Figure 1,S1 ?
S5 = S5 ?
S1 = S6, where S6 is depictedin Figure 5.
All dashed arrows are labeled AGR,but these labels are suppressed for readability.Example 4 Let S7 and S8 be the PSSs depictedin Figures 6 and 7, respectively.
Then S7 ?
S8 =S8?S7 = S9, where S9 is depicted in Figure 8.
Bystandard convention, Ap arcs that can be inferredby upward closure are not depicted.149n nagr gerund vagr vagrFigure 4: Na?
?ve agreement module, S5gerundn v vagr nagrcat agrFigure 5: S6 = S1 ?
S5Proposition 2 Given two mergeable PSSs S1, S2,S1 ?
S2 is a well formed PSS.Proposition 3 PSS merge is commutative: for anytwo PSSs, S1, S2, S1?S2 = S2?S1.
In particular,either both are defined or both are undefined.Proposition 4 PSS merge is associative: for allS1, S2, S3, (S1 ?
S2) ?
S3 = S1 ?
(S2 ?
S3).7 Extending PSSs to type signaturesWhen developing large scale grammars, the sig-nature can be distributed among several modules.A PSS encodes only partial information and there-fore is not required to conform with all the con-straints imposed on ordinary signatures.
After allthe modules are combined, however, the PSS mustbe extended into a signature.
This process is donein 4 stages, each dealing with one property: 1.Name resolution: assigning types to anonymousnodes (section 7.1); 2.
Determinizing Ap, convert-ing it from a relation to a function (section 7.2); 3.Extending ??
to a BCPO.
This is done using thealgorithm of Penn (2000); 4.
Extending Ap to afull appropriateness specification by enforcing thefeature introduction condition: Again, we use theperson nvagr boolvagr nagragr numNUMPERSON DEFFigure 6: An agreement module, S7first second third + ?sgpersonplboolnumFigure 7: A partially specified signature, S8first second third + ?person boolnvagrvagr nagr sg plagr numNUMDEFPERSONFigure 8: S9 = S7 ?
S8algorithm of Penn (2000).7.1 Name resolutionBy the definition of a well-formed PSS, eachanonymous node is unique with respect to the in-formation it encodes among the anonymous nodes,but there may exist a marked node encoding thesame information.
The goal of the name resolutionprocedure is to assign a type to every anonymousnode, by coalescing it with a similar marked node,if one exists.
If no such node exists, or if there ismore than one such node, the anonymous node isgiven an arbitrary type.The name resolution algorithm iterates as longas there are nodes to coalesce.
In each iteration,for each anonymous node the set of its similartyped nodes is computed.
Then, using this compu-tation, anonymous nodes are coalesced with theirpaired similar typed node, if such a node uniquelyexists.
After coalescing all such pairs, the result-ing PSS may be non well-formed and therefore thePSS is compacted.
Compactness can trigger morepairs that need to be coalesced, and therefore theabove procedure is repeated.
When no pairs thatneed to be coalesced are left, the remaining anony-mous nodes are assigned arbitrary names and thealgorithm halts.
The detailed algorithm is sup-pressed for lack of space.150Example 5 Let S6 be the PSS depicted in Fig-ure 5.
Executing the name resolution algorithmon this module results in the PSS of Figure 9(AGR-labels are suppressed for readability.)
Thetwo anonymous nodes in S6 are coalesced withthe nodes marked nagr and vagr, as per theirattributes.
Cf.
Figure 1, in particular how twoanonymous nodes in S1 are assigned types fromS5 (Figure 4).gerundn v vagr nagrcat agrFigure 9: Name resolution result for S67.2 Appropriateness consolidationFor each node q, the set of outgoing appropriate-ness arcs with the same label F , {(q, F, q?
)}, isreplaced by the single arc (q, F, ql), where ql ismarked by the lub of the types of all q?.
If no lubexists, a new node is added and is marked by thelub.
The result is that the appropriateness relationis a function, and upward closure is preserved; fea-ture introduction is dealt with separately.The input to the following procedure is a PSSwhose typing function, T , is total; its output is aPSS whose typing function, T , is total and whoseappropriateness relation is a function.
Let S =?Q, T,, Ap?
be a PSS.
For each q ?
Q and F ?FEAT, lettarget(q, F ) = {q?
| (q, F, q?)
?
Ap}sup(q) = {q?
?
Q | q?
 q}sub(q) = {q?
?
Q | q  q?
}out(q) = {(F, q?)
| (q, F, q?)
?
ApAlgorithm 1 Appropriateness consolidation(S = ?Q, T,, Ap?)1.
Find a node q and a feature F for which|target(q, F )| > 1 and for all q?
?
Q suchthat q?
? q, |target(q?, F )| ?
1.
If no suchpair exists, halt.2.
If target(q, F ) has a lub, p, then:(a) for all q?
?
target(q, F ), remove the arc(q, F, q?)
from Ap.
(b) add the arc (q, F, p) to Ap.
(c) for all q?
?
Q such that q ? q?, if(q?, F, p) /?
Ap then add (q?, F, p) toAp.
(d) go to (1).3.
(a) Add a new node, p, to Q with:?
sup(p) = target(q, F )?
sub(p) = (target(q, F ))u?
out(p) = ?q?
?target(q,F ) out(q?
)(b) Mark p with a fresh type from NAMES.
(c) For all q?
?
Q such that q ? q?, add(q?, F, p) to Ap.
(d) For all q?
?
target(q, F ), remove thearc (q, F, q?)
from Ap.
(e) Add (q, F, p) to Ap.
(f) go to (1).The order in which nodes are selected in step 1of the algorithm is from supertypes to subtypes.This is done to preserve upward closure.
In ad-dition, when replacing a set of outgoing appropri-ateness arcs with the same label F , {(q, F, q?
)},by a single arc (q, F, ql), ql is added as an ap-propriate value for F and all the subtypes of q.Again, this is done to preserve upward closure.
Ifa new node is added (stage 3), then its appropriatefeatures and values are inherited from its immedi-ate supertypes.
During the iterations of the algo-rithm, condition 3b (maximality) of the definitionof a PSS may be violated but the resulting graph isguaranteed to be a PSS.Example 6 Consider the PSS depicted in Fig-ure 9.
Executing the appropriateness consolida-tion algorithm on this module results in the moduledepicted in Figure 10.
AGR-labels are suppressed.gerund newn v vagr nagrcat agrFigure 10: Appropriateness consolidation result8 ConclusionsWe advocate the use of PSSs as the correct con-cept of signature modules, supporting interaction151among grammar modules.
Unlike existing ap-proaches, our solution is formally defined, mathe-matically proven and can be easily and efficientlyimplemented.
Module combination is a commuta-tive and associative operation which meets all thedesiderata listed in section 4.There is an obvious trade-off between flexibilityand strong typedeness, and our definitions can befinely tuned to fit various points along this spec-trum.
In this paper we prefer flexibility, follow-ing Melnik (2005), but future work will investigateother options.There are various other directions for future re-search.
First, grammar rules can be distributedamong modules in addition to the signature.
Thedefinition of modules can then be extended to in-clude also parts of the grammar.
Then, variouscombination operators can be defined for grammarmodules (cf.
Wintner (2002)).
We are actively pur-suing this line of research.Finally, while this work is mainly theoretical,it has important practical implications.
We wouldlike to integrate our solutions in an existing envi-ronment for grammar development.
An environ-ment that supports modular construction of largescale grammars will greatly contribute to gram-mar development and will have a significant im-pact on practical implementations of grammaticalformalisms.9 AcknowledgmentsWe are grateful to Gerald Penn and NissimFrancez for their comments on an earlier versionof this paper.
This research was supported by TheIsrael Science Foundation (grant no.
136/01).ReferencesEmily M. Bender, Dan Flickinger, and Stephan Oepen.2002.
The grammar matrix: An open-source starter-kit for the rapid development of cross-linguisticallyconsistent broad-coverage precision grammars.
InProceedings of ACL Workshop on Grammar Engi-neering.
Taipei, Taiwan, pages 8?14.Emily M. Bender, Dan Flickinger, Fredrik Fouvry, andMelanie Siegel.
2005.
Shared representation inmultilingual grammar engineering.
Research onLanguage and Computation, 3:131?138.Marie-He?le`ne Candito.
1996.
A principle-based hier-archical representation of LTAGs.
In COLING-96,pages 194?199, Copenhagen, Denemark.Bob Carpenter.
1992.
The Logic of Typed FeatureStructures.
Cambridge Tracts in Theoretical Com-puter Science.
Cambridge University Press.Ann Copestake and Dan Flickinger.
2000.
Anopen-source grammar development environmentand broad-coverage English grammar using HPSG.In Proceedings of LREC, Athens, Greece.Ann Copestake.
2002.
Implementing typed featurestructures grammars.
CSLI publications, Stanford.Benoit Crabbe?
and Denys Duchier.
2004.
Metagram-mar redux.
In CSLP, Copenhagen, Denemark.Mary Dalrymple.
2001.
Lexical Functional Gram-mar, volume 34 of Syntax and Semantics.
AcademicPress.Erhard W. Hinrichs, W. Detmar Meurers, and ShulyWintner.
2004.
Linguistic theory and grammar im-plementation.
Research on Language and Compu-tation, 2:155?163.Ronald M. Kaplan, Tracy Holloway King, and John T.Maxwell.
2002.
Adapting existing grammars:the XLE experience.
In COLING-02 workshop onGrammar engineering and evaluation, pages 1?7,Morristown, NJ, USA.Vlado Keselj.
2001.
Modular HPSG.
Technical Re-port CS-2001-05, Department of Computer Science,University of Waterloo, Waterloo, Ontario, Canada.Tracy Holloway King, Martin Forst, Jonas Kuhn, andMiriam Butt.
2005.
The feature space in parallelgrammar writing.
Research on Language and Com-putation, 3:139?163.Nurit Melnik.
2005.
From ?hand-written?
to imple-mented HPSG theories.
In Proceedings of HPSG-2005, Lisbon, Portugal.Nurit Melnik.
2006.
A constructional approach toverb-initial constructions in Modern Hebrew.
Cog-nitive Linguistics, 17(2).
To appear.Andrew M. Moshier.
1997.
Is HPSG featureless or un-principled?
Linguistics and Philosophy, 20(6):669?695.Stephan Oepen, Daniel Flickinger, J. Tsujii, and HansUszkoreit, editors.
2002.
Collaborative LanguageEngineering: A Case Study in Efficient Grammar-Based Processing.
CSLI Publications, Stanford.Gerald B. Penn.
2000.
The algebraic structure ofattributed type signatures.
Ph.D. thesis, Schoolof Computer Science, Carnegie Mellon University,Pittsburgh, PA.Carl Pollard and Ivan A.
Sag.
1994.
Head-DrivenPhrase Structure Grammar.
University of ChicagoPress and CSLI Publications.Shuly Wintner.
2002.
Modular context-free grammars.Grammars, 5(1):41?63.152
