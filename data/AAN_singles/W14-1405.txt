Proceedings of the EACL 2014 Workshop on Type Theory and Natural Language Semantics (TTNLS), pages 37?45,Gothenburg, Sweden, April 26-30 2014. c?2014 Association for Computational LinguisticsNatural Language Reasoning Using proof-assistant technology: RichTyping and beyond?Stergios ChatzikyriakidisDept of Computer Science,Royal Holloway, Univ of LondonEgham, Surrey TW20 0EX, U.K; OpenUniversity of Cyprusstergios.chatzikyriakidis@cs.rhul.ac.ukZhaohui LuoDept of Computer Science,Royal Holloway, Univ of LondonEgham, Surrey TW20 0EX, U.K;zhaohui@cs.rhul.ac.ukAbstractIn this paper, we study natural languageinference based on the formal semanticsin modern type theories (MTTs) and theirimplementations in proof-assistants suchas Coq.
To this end, the type theoryUTT with coercive subtyping is used asthe logical language in which natural lan-guage semantics is translated to, followedby the implementation of these semanticsin the Coq proof-assistant.
Valid infer-ences are treated as theorems to be provenvia Coq?s proof machinery.
We shall em-phasise that the rich typing mechanisms inMTTs (much richer than those in the sim-ple type theory as used in the Montagoviansetting) provide very useful tools in manyrespects in formal semantics.
This is ex-emplified via the formalisation of variouslinguistic examples, including conjoinedNPs, comparatives, adjectives as well asvarious linguistic coercions.
The aim ofthe paper is thus twofold: a) to show thatthe use of proof-assistant technology hasindeed the potential to be developed intoa new way of dealing with inference, andb) to exemplify the advantages of having arich typing system to the study of formalsemantics in general and natural languageinference in particular.1 IntroductionNatural Language Inference (NLI), i.e.
the task ofdetermining whether an NL hypothesis can be in-ferred from an NL premise, has been an active re-search theme in computational semantics in whichvarious approaches have been proposed (see, forexample (MacCartney, 2009) and some of the ref-erences therein).
In this paper, we study NLI based?This work is supported by the research grant F/07-537/AJ of the Leverhulme Trust in the U.K.on formal semantics in MTTs with coercive sub-typing (Luo, 2012b) and its implementation in theproof assistant Coq (Coq, 2007).A Modern Type Theory (MTT) is a dependenttype theory consisting of an internal logic, whichfollows the propositions-as-types principle.
Thislatter feature along with the availability of power-ful type structures make MTTs very useful for for-mal semantics.
The use of MTTs for NL semanticshas been proposed with exciting results as regardsvarious issues of NL semantics, ranging fromquantification and anaphora to adjectival modifi-cation, co-predication, belief and context formal-ization.
(Sundholm, 1989; Ranta, 1994; Boldini,2000; Cooper, 2005; Fox and Lappin, 2005; Re-tore?, 2013; Ginzburg and Cooper, forthcoming;Luo, 2011a; Luo, 2012b; Chatzikyriakidis andLuo, 2012; Chatzikyriakidis and Luo, 2013a).
Re-cently, there has been a systematic study of MTTsemantics using Luo?s UTT with coercive subtyp-ing (type theory with coercive subtyping, hence-forth TTCS) (Luo, 2010; Luo, 2011a; Luo, 2012b;Chatzikyriakidis and Luo, 2012; Chatzikyriakidisand Luo, 2013a; Chatzikyriakidis and Luo, 2013b;Chatzikyriakidis and Luo, 2014).
This is the ver-sion of MTT used in this paper.
More specifically,the paper concentrates on one of the key differ-ences between MTTs and simple typed ones, i.e.rich typing.
Rich typing will be shown to be akey ingredient for both formal semantics in gen-eral and the study of NLI in particular.A proof assistant is a computer system that as-sists the users to develop proofs of mathemati-cal theorems.
A number of proof assistants im-plement MTTs.
For instance, the proof assistantCoq (Coq, 2007) implements pCIC, the predica-tive Calculus of Inductive Constructions1 and sup-1pCIC is a type theory that is rather similar to UTT, es-pecially after its universe Set became predicative since Coq8.0.
A main difference is that UTT does not have co-inductivetypes.
The interested reader is directed to Goguen?s PhD the-37ports some very useful tactics that can be used tohelp the users to automate (parts of) their proofs.Proof assistants have been used in various applica-tions in computer science (e.g., program verifica-tion) and formalised mathematics (e.g., formalisa-tion of the proof of the 4-colour theorem in Coq).The above two developments, the use of MTTsemantics on the one hand and the implementa-tion of MTTs in proof assistants on the other, hasopened a new research avenue: the use of existingproof assistants in dealing with NLI.
In this pa-per, two different goals are to be achieved: a) on amore practical level, to show how proof-assistanttechnology can be used in order to deal with NLIand b) on a theoretical level, the significance ofrich typing for formal semantics and NLI in par-ticular.
These two different aspects of the paperwill be studied on a par, by concentrating on anumber of NLI cases (quite a lot actually) thatare adequately dealt with on a theoretical level viarich typing and the implementation of the accountmaking use of rich type structures in Coq on amore practical level.
We shall also consider how toemploy dependent typing in the coercive subtyp-ing framework to formalise linguistic coercions.2 Rich typing in MTTsA Modern Type Theory (MTT) is a variant ofa class of type theories in the tradition initiatedby the work of Martin-Lo?f (Martin-Lo?f, 1975;Martin-Lo?f, 1984), which have dependent andinductive types, among others.
We choose tocall them Modern Type Theories in order to dis-tinguish them from Church?s simple type theory(Church, 1940) that is commonly employed withinthe Montagovian tradition in formal semantics.Among the variants of MTTs, we are going toemploy the Unified Theory of dependent Types(UTT) (Luo, 1994) with the addition of the co-ercive subtyping mechanism (see, for example,(Luo, 1999; Luo et al., 2012) and below).
UTT isan impredicative type theory in which a type Propof all logical propositions exists.2 This standsas part of the study of linguistic semantics usingMTTs rather than simply typed ones.
In particu-lar, in this paper we discuss a number of key issuesas regards the typing system, which will be shownto allow more fine-grained distinctions and expres-sis (Goguen, 1994) as regards the meta-theory of UTT.2This is similar to simple type theory where a type t oftruth values exists.sivity compared to classical simple typed systemsas these are used in mainstream Montagovian se-mantics.2.1 Type many-sortedness and CNs as typesIn Montague semantics (Montague, 1974), theunderlying logic (Church?s simple type theory(Church, 1940)) can be seen as ?single-sorted?
inthe sense that there is only one type e of all enti-ties.
The other types such as t of truth values andthe function types generated from e and t do notstand for types of entities.
In this respect, there areno fine-grained distinctions between the elementsof type e and as such all individuals are interpretedusing the same type.
For example, John and Maryhave the same type in simple type theories, thetype e of individuals.
An MTT, on the other hand,can be regarded as a ?many-sorted?
logical systemin that it contains many types and as such one canmake fine-grained distinctions between individu-als and further use those different types to interpretsubclasses of individuals.
For example, one canhave John : [[man]] and Mary : [[woman]], where[[man]] and [[woman]] are different types.An important trait of MTT-based semantics isthe interpretation of common nouns (CNs) as types(Ranta, 1994) rather than sets or predicates (i.e.,objects of type e ?
t) as it is the case withinthe Montagovian tradition.
The CNs man, human,table and book are interpreted as types [[man]],[[human]], [[table]] and [[book]], respectively.
Then,individuals are interpreted as being of one of thetypes used to interpret CNs.
The interpretation ofCNs as Types is also a prerequisite in order for thesubtyping mechanism to work.
This is because,assuming CNs to be predicates, subtyping wouldgo wrong given contravariance of function types.32.2 SubtypingCoercive subtyping (Luo, 1999; Luo et al., 2012)provides an adequate framework to be employedfor MTT-based formal semantics (Luo, 2010; Luo,2012b).4 It can be seen as an abbreviation mech-anism: A is a (proper) subtype of B (A < B) if3See (Chatzikyriakidis and Luo, 2013b) for more infor-mation.
See also (Luo, 2012a) for further philosophical argu-mentation on the choosing to represent CNs as types.4It is worth mentioning that subsumptive subtyping, i.e.the traditional notion of subtyping that adopts the subsump-tion rule (if A ?
B, then every object of type A is also oftype B), is inadequate for MTTs in the sense that it woulddestroy some important metatheoretical properties of MTTs(see, for example, ?4 of (Luo et al., 2012) for details).38there is a unique implicit coercion c from type Ato type B and, if so, an object a of type A can beused in any context CB[ ] that expects an object oftype B: CB[a] is legal (well-typed) and equal toCB[c(a)].As an example, assuming that both [[man]] and[[human]] are base types, one may introduce thefollowing as a basic subtyping relation:(1) [[man]] < [[human]]In case that [[man]] is defined as a compos-ite ?-type (see ?2.3 below for details), wheremale : [[human]] ?
Prop:(2) [[man]] = ?h : [[human]].
male(h)we have that (1) is the case because the above ?-type is a subtype of [[human]] via the first projec-tion pi1:(3) (?h : [[human]].
male(h)) <pi1[[human]]We will see in the next section the importance ofthe coercive subtyping mechanism when dealingwith NLI.2.3 Dependent typing and universesOne of the basic features of MTTs is the use ofDependent Types.
A dependent type is a family oftypes depending on some values.
Here we explaintwo basic constructors for dependent types, ?
and?, both highly relevant for the study of linguisticsemantics.The constructor/operator ?
is a generaliza-tion of the Cartesian product of two sets thatallows the second set to depend on values ofthe first.
For instance, if [[human]] is a typeand male : [[human]] ?
Prop, then the ?-type?h : [[human]].
male(h) is intuitively the type ofhumans who are male.More formally, if A is a type and B is an A-indexed family of types, then ?
(A,B), or some-times written as ?x : A.B(x), is a type, consist-ing of pairs (a, b) such that a is of type A and bis of type B(a).
When B(x) is a constant type(i.e., always the same type no matter what x is),the ?-type degenerates into product type A?B ofnon-dependent pairs.
?-types (and product types)are associated projection operations pi1and pi2sothat pi1(a, b) = a and pi2(a, b) = b, for every (a, b)of type ?
(A,B) or A?B.The linguistic relevance of ?-types can be di-rectly appreciated once we understand that in itsdependent case, ?-types can be used to interpretlinguistic phenomena of central importance, likefor example adjectival modification (Ranta, 1994).For example, handsome man is interpreted as a?-type (4), the type of handsome men (or moreprecisely, of those men together with proofs thatthey are handsome):(4) ?m : [[man]].
[[handsome]](m)where [[handsome]](m) is a family of proposi-tions/types that depends on the man m.5The other basic constructor for dependent typesis ?.
?-types can be seen as a generalization of thenormal function space where the second type is afamily of types that might be dependent on the val-ues of the first.
A ?-type degenerates to the func-tion type A ?
B in the non-dependent case.
Inmore detail, when A is a type and P is a predicateover A, ?x : A.P (x) is the dependent functiontype that, in the embedded logic, stands for theuniversally quantified proposition ?x : A.P (x).For example, the following sentence (5) is inter-preted as (6):(5) Every man walks.
(6) ?x : [[man]].
[[walk]](x)Type Universes.
An advanced feature of MTTs,which will be shown to be very relevant in inter-preting NL semantics, is that of universes.
Infor-mally, a universe is a collection of (the names of)types put into a type (Martin-Lo?f, 1984).6 For ex-ample, one may want to collect all the names ofthe types that interpret common nouns into a uni-verse CN : Type.
The idea is that for each type Athat interprets a common noun, there is a name Ain CN.
For example,[[man]] : CN and TCN([[man]]) = [[man]].5Adjectival modification is a notoriously difficult issueand as such not all cases of adjectives can be captured viausing a ?
type analysis.
For a proper treatment of adjecti-val modification within this framework, see (Chatzikyriakidisand Luo, 2013a).6There is quite a long discussion on how these universesshould be like.
In particular, the debate is largely concen-trated on whether a universe should be predicative or im-predicative.
A strongly impredicative universe U of all types(with U : U and ?-types) is shown to be paradoxical (Gi-rard, 1971) and as such logically inconsistent.
The theoryUTT we use here has only one impredicative universe Prop(representing the world of logical formulas) together with in-finitely many predicative universes which as such avoids Gi-rard?s paradox (see (Luo, 1994) for more details).39In practice, we do not distinguish a type in CN andits name by omitting the overlines and the operatorTCN by simply writing, for instance, [[man]] : CN.Thus, the universe includes the collection of thenames that interpret common nouns.
For example,in CN, we shall find the following types:(7) [[man]], [[woman]], [[book]], ...(8) ?m : [[man]].
[[handsome]](m)(9) GR+ GFwhere the ?-type in (8 is the proposed inter-pretation of ?handsome man?
and the disjoint sumtype in (9) is that of ?gun?
(the sum of real gunsand fake guns ?
see above).7 Interesting appli-cations of the use of universes can be proposedlike for example, their use in giving the types forquantifiers and VP adverbs as extending over theuniverse CN (Luo, 2011b) as well as coordinationextending over the universe of all linguistic typesLType (Chatzikyriakidis and Luo, 2012).3 NL Inference in CoqCoq is a dependently typed interactive theoremprover implementing the calculus of InductiveConstructions (pCiC, see (Coq, 2007)).
Coq, andin general proof-assistants, provide assistance inthe development of formal proofs.
The idea is sim-ple: you use Coq in order to see whether state-ments as regards anything that has been either pre-defined or user-defined (definitions, parameters,variables) can be proven or not.
In the case of NLI,the same idea applies: once the semantics of NLwords are defined, then these semantics can be rea-soned about by using Coq?s proof mechanism.
Inthis sense, valid NLIs can be seen as theorems, orbetter valid NLIs must be theorems.A very simple case of semantic entailment, thatof example (10), will therefore be formulated asthe following theorem in Coq (11):(10) John walks ?
some man walks(11) Theorem x: John walks ?
some man walksNow, depending on the semantics of the indi-vidual lexical items one may or may not prove thetheorem that needs to be proven in each case.
In-ferences like the one shown in (11) are easy casesin Coq.
Assuming the semantics of some whichspecify that given any A of type CN and a predi-cate of type A ?
Prop, there exists an x : A such7The use of disjoint sum types was proposed by(Chatzikyriakidis and Luo, 2013a) in order to deal with priva-tive modification.
The interested reader is directed there fordetails.that P (x) : Prop, such cases are straightforwardlyproven.3.1 The FraCas test suiteIn this section we present how implementing MTTNL semantics in Coq can deal with various casesof NLI inference.
For this reason, we use exam-ples from the FraCas test suite.
The FraCas TestSuite (Cooper et al., 1996) arose out of the FraCasConsortium, a huge collaboration with the aim todevelop a range of resources related to computa-tional semantics.
The FraCas test suite is specifi-cally designed to reflect what an adequate theoryof NL inference should be able to capture.
It com-prises NLI examples formulated in the form of apremise (or premises) followed by a question andan answer.
For instance,(12) Either Smith, Jones and Anderson signed thecontract.Did Jones sign the contract?
[Yes]The examples are quite simple in format but aredesigned to cover a very wide spectrum of seman-tic phenomena, e.g.
generalized quantifiers, con-joined plurals, tense and aspect related phenom-ena, adjectives and ellipsis, among others.
In whatfollows, we show how the use of a rich type sys-tem can deal with NLI adequately (at least for thecases looked at) from both a theoretical and an im-plementational point of view.3.2 Rich typing and NLI3.2.1 QuantifiersA great deal of the FraCas examples are cases ofinference that result from the monotone propertiesof quantifiers.
Examples concerning monotonic-ity on the first argument are very easily treated ina system encoding an MTT with coercive subtyp-ing, by employing the subtyping relations betweenCNs.
To put this claim in context, let us look atthe following example (3.55) from the FraCas testsuite:(13) Some Irish delegates finished the survey ontime.Did any delegate finish the report on time[Yes]Treating adjectival modification as involving a?
type where the first projection is always a coer-cion as in (Luo, 2011a), we get Irish delegate tobe a subtype of delegate, i.e.
[[Irishdelegate]] <40[[delegate]].
This is basically all that Coq needs inorder to prove the inference.8Moving on to quantifier cases involving mono-tonicity on the second argument, we notice thatthese are more difficult to get since an adjunct (e.g.a PP) is involved in deriving the inference:(14) Some delegates finished the survey on time.Did any delegate finish the survey?
[Yes]The type proposed for VP adverbs by Luo (Luo,2011b) is based on the idea of a type universe ofCNs.
As already said in the introduction, type uni-verses a universe is a collection of (the names of)types put into a type.
In this respect, one can formthe universe CN which basically stands for thecollection of names interpreting common nouns.The type proposed for VP adverbs makes use ofthis CN universe and assumes quantification overit (Chatzikyriakidis and Luo, 2013a; Chatzikyri-akidis and Luo, 2012):(15) ?A : CN.
(A ?
Prop) ?
(A ?
Prop)However, in order to derive the inferenceneeded in cases of monotonicity on the second ar-gument cases, this typing alone is not enough.
?types can be used in order to slightly modify thetyping.
In order to do this, we first introduce anauxiliary object ADV as follows:(16) ADV : ?A : CN.
?v : A ?
Prop.
?p : A ?Prop.
?x : A.p(x) ?
v(x)This reads as follows: for any common noun Aand any predicate v over A, ADV (A, v) is a pair(p,m) such that for any x : A, p(x) implies v(x).Taking the sentence (14) as an example, for theCN delegate and predicate [[finish]]9, we defineon time to be the first projection of the auxiliaryobject (16) which is of type (15):(17) on time = ?A : CN.
?v : A ?
Prop.pi1(ONTIME(A, v))As a consequence, for instance, any delegatewho finished the survey on time (p(x)) in (16) didfinish the survey (v(x)).8For details on the semantics of the other lexical items likee.g.
VP adverbs in the sentence, see the following discussion.Also, following Luo (Luo, 2011a) we implement ?-types asdependent record types in Coq.
Again, see (Chatzikyriakidisand Luo, 2013b) for details.9Note that [[finish]] : [[human]] ?
Prop <[[delegate]] ?
Prop.3.2.2 Conjoined NPsInference involving conjoined NPs concerns caseslike the one shown below:(18) Smith, Jones and Anderson signed the con-tract.Did Jones sign the contract?
[Yes]In (Chatzikyriakidis and Luo, 2012), a polymor-phic type for binary coordinators that extends overthe constructed universe LType, the universe oflinguistic types was proposed.
This can be ex-tended to n-ary coordinators.
For example, thecoordinator and may take three arguments, as inthe premise of (18).
In such cases, the type of thecoordinator, denoted as and3in semantics, is:(19) and3: ?A : LType.A ?
A ?
A ?
A.Intuitively, we may write this type as?A : LType.A3?
A.
For instance, thesemantics of (18) is (20), where c is ?the contract?
:(20) [[sign]](and3(s, j, a), c)In order to consider such coordinators in rea-soning, we consider the following auxiliary object(similarly to the auxiliary object ADV ) and defineand3as follows:(21) AND3: ?A : LType.
?x, y, z : A.
?a :A.
?p : A ?
Prop.
p(a) ?
p(x) ?
p(y) ?p(z).
(22) and3= ?A : LType.
?x, y, z : A.pi1(AND3(A, x, y, z))Having defined the coordinators such as and insuch a way, we can get the desired inferences.
Forexample, from the semantics (20), we can inferthat ?Jones signed the contract?, the hypothesis in(18).10 Coordinators such as or can be defined ina similar way.3.2.3 ComparativesInference with comparatives can also be treated byusing ?
types.
Two ways of doing this will be pro-posed, one not involving and one involving mea-sures.
We shall consider shorter than as a typi-cal example.
Intuitively, shorter than should be10A note about Coq is in order here: building new uni-verses is not an option in Coq (or, put in another way, Coqdoes not support building of new universes).
Instead, we shalluse an existing universe in Coq in conducting our examplesfor coordination.41of type Human ?
Human ?
Prop as in thefollowing example:(23) Mary is shorter than John.We assume that there be a predicateshort : Human ?
Prop, expressing that ahuman is short.
Intuitively, if Mary is shorterthan John and John is short, then so is Mary.Furthermore, one should be able to take care ofthe transitive properties of comparatives.
Thus,if A is COMP than B and B is COMP thanC , then A is also COMP than C .
All thesecan be captured by considering COMP of thefollowing ?-type and define shorter than to be itsfirst projection:(24) COMP : ?p : Human ?
Human ?Prop.
?h1, h2, h3: Human.p(h1, h2) ?
p(h2, h3) ?
p(h1, h3) ?
?h1, h2: Human.p(h1, h2) ?
short(h2) ?short(h1).
(25) [[shorter than]] = pi1(COMP )With the above, we can easily show that the in-ferences like (26) can be obtained as expected.11(26) John is shorter than George.George is shorter than Stergios.Is John shorter than Stergios?
[Yes]Given the definition in COMP according towhich if two elements stand in a COMP relation(meaning that the first argument is shorter thanthe second one), and there is also a third elementstanding in a COMP relation with the second,then by transitivity defined in COMP , this thirdelement also stands in a COMP relation with thefirst, i.e.
the third element is shorter than the first.3.2.4 Factive/Implicative verbsThis section concerns inference cases with varioustypes of verbs that presuppose the truth of theircomplement like for example factive or implica-tive verbs.
Example (27) is an example of such averb, while (28) is not:(27) Smith knew that Itel had won the contract1991.Did Itel win the contract in 1991?
[Yes]11In giving a full analysis of compratives, one may furtherconsider measures.
Such an account is also possible using ?types, in effect extending the account just proposed for com-paratives.
The idea is basically to extend the above accountusing dependent typing over measures.
Such an account canbe found in (Chatzikyriakidis and Luo, 2013b)(28) Smith believed that Itel had won the contract1991.Did Itel win the contract in 1991?
[Don?tknow]What we need is to encode that verbs like knowpresuppose their argument?s truth while verbs likebelieve do not.
For instance, know belongs to theformer class and its semantics is given as follows:(29) KNOW = ?p : Human ?
Prop ?Prop.
?h : Human?P : Prop.
p(h, P ) ?P(30) [[know]] = pi1(KNOW )In effect, a similar reasoning to the one used indealing with VP adverbs is proposed.
In effect,an auxiliary object is firstly used, followed by thedefinition of know as the first projection of the ?type involved in the auxiliary object.
With this, theinference (27) can be obtained as expected.
In-tensional verbs like believe on the other hand donot imply their arguments and inferences like (28)cannot be shown to be valid inferences.3.2.5 Adjectival inferenceAs a last example of the use of rich typing in orderto deal with NLI, we discuss NLI cases involvingadjectives.
In (Chatzikyriakidis and Luo, 2013a)we have shown that the use of subtyping, ?
typesand universes can give us a correct account of atleast intersective and subsective adjectives.
Notethat the original ?
type analysis proposed by re-searchers like Ranta (Ranta, 1994) is inadequate tocapture the inferential properties of either intersec-tive or subsective adjectives.
The FraCas test suitehas a rather different classification.
One major dis-tinction is between affirmative and non-affirmativeadjectives shown below:(31) Affirmative: Adj(N) ?
(N)(32) Non-affirmative: Adj(N); (N)Concentrating on affirmative adjectives for themoment, we see that a ?
type analysis is enoughin these cases.Cases of affirmative adjectives arehandled well with the existing record mechanismalready used for adjectives.
The following infer-ence as well as similar inferences are correctlycaptured, given that a CN modified by an inter-sective adjective is interpreted as a ?-type whichis a subtype of the CN via means of the first pro-jection.Cases of subsective adjectives are discussedin the section dubbed as extensional comparison42classes in the FraCas test suite.
There, cases ofadjectival inference involving adjectives like smalland large are discussed.
Cases like these can behandled using a typing which quantifies over a uni-verse.
In the case of large and small this universeis the universe CN:12(33) ?A : CN.
(A ?
Prop)With this typing, cases like the one shown be-low are correctly treated:(34) All mice are small animals.Mickey is a large mouse.Is Mickey a large animal?
[No]Lastly, one should be able to take care of infer-ences associated with intersective adjectives likethe one shown below:(35) Adjinterman ?
AdjinterhumanA concrete example would be black man im-plying black human.
Given that coercions ac-cording to Luo?s MTT propagate via the varioustype constructors, we have: ?
([[man]], black) <?
([[human]], black).134 Linguistic Coercions in MTTs withCoercive SubtypingBesides being crucial for MTT-semantics, coer-cive subtyping (Luo, 1999; Luo et al., 2012) alsoprovides us a framework to interpret various lin-guistic coercions (Asher and Luo, 2012).
Besidesexplaining the basic mechanisms, we shall alsoshow (in ?4.3) that dependent types have interest-ing applications in dealing with situations with so-phisticated coercions in MTT-semantics.4.1 Basic coercionsThe basic coercive subtyping mechanism that co-erces f(a) into f(c(a)) by inserting the coercionc into a gap between f and a, suffices to representmany linguistic coercions.
For example, consider(36) Julie enjoyed a book.12Other more restricted universes will be needed for adjec-tives like skilful given that we may want to avoid construc-tions like skilful table.
Universe subtyping can take care ofthese issues.
In effect, one can introduce a subuniverse of CNcontaining the names of the types [[human]] and its subtypesonly.
Let us call this universe CNH, which is a subtype ofCN: CNH< CN.
Now skillful extends over this more re-stricted universe.
See (Chatzikyriakidis and Luo, 2013a) formore detalis.13Cases of non-committal and privative adjectives will notbe dealt with in this paper for reasons of space.
The interestedreader is directed to (Chatzikyriakidis and Luo, 2013a) for atreatment of these types of adjectives within the MTT settingdiscussed in this paper.The MTT-semantics of (36) is (37):(37) ?x : [[book]].
[[enjoy]](j, x)where(38) [[enjoy]] : Human ?
Event ?
Prop.However, the domain type of [[enjoy]](j) isEvent, which is different from Book!
Then, howcan [[enjoy]](j, x) in (37) be well-typed?
The an-swer is that, in the framework of coercive subtyp-ing and, in particular, under the assumption of thefollowing coercion:(39) Book <readingEvent[[enjoy]](j, x) is coerced into (and, formally, equalto) [[enjoy]](j, reading(x)) and hence well-typed.Informally, the sentence (36) is coerced into (40):(40) Julie enjoyed reading a book.Note that, in the above, we have consideredonly one possible coercion (39): from ?enjoy abook?
to ?enjoy reading a book?.
As we notedin the previous section, however, there are in factcontext-dependent ?multiple coercions?
: e.g., (36)could have meant ?Julie enjoyed writing a book?
;there could also be several reading events of thatbook.
Coercive subtyping requires contextualuniqueness of coercions14, we must restrict thescope/context using local coercions (Luo, 2011a).4.2 Local CoercionsIn many situations, it is necessary to limit thescope of a coercion.
(36) furnishes an example:with the formal coercion (39), (37) is the correctinterpretation of (36).
However, there may be sev-eral possible coercions and hence (36) may haveseveral meanings: which one to use can only bedecided contextually.
But note that coherence incoercive subtyping (contextual uniqueness of co-ercions) is necessary for formal semantics to dealwith ambiguity.
In such situations, we use localcoercions to limit the scope of applicability of co-ercions.
For instance, if (36) is used to mean (40)or ?Julie enjoyed writing a book?, we exploit thefollowing two coercions for (36):(41) coercion Book <readingEvent in (37)14This refers to the notion of coherence, the requirementthat any two coercions between the same two types (in thesame context) be the same.
See (Luo, 1999; Luo et al., 2012)for its formal definition.43(42) coercion Book <writingEvent in (37)Note that such interpretations involve different lo-cal coercions and can be used in the same context.There is no ambiguity or confusion as to which co-ercion is to be employed, but we must make clearthe scope of each one of the coercions, over whatterms they are operative.Local coercions have a dual notion ?
coer-cion contexts, which are contexts (in type theory)which may contain coercion entries of the formA <cB as well as entries of the usual form x : A.Coercion contexts occur left to the `-sign.
Onecan move a coercion entry in a coercion contextto the right-hand side of the `-sign to form a lo-cal coercion, while the inversion of this movesthe coercion in a local coercion to the left.
Theseconstructs are governed by the relevant inferencerules, some of which are discussed in, for exam-ple, (Luo, 2011a).4.3 Dependent Types in Coercion SemanticsSometimes, a simple scoping restriction is notenough.
For example, consider(43) Jill just started War and Peace, which Tol-stoy finished after many years of hard work.But that won?t last because she never getsthrough long novels.It is not difficult to see that in (43) the scopes of thereading and writing coercions overlap intertwin-ingly, and so restrictions on the scopes of coer-cions will not be sufficient here to ensure unique-ness to eliminate ambiguity.In many such cases, dependent typing proves tobe useful.
Indeed, this is the first time in the litera-ture, as far as we know, that dependent types havebeen shown to be useful directly in the formal se-mantics of linguistic coercions.For example, for the above sentences (43), in-stead of Event, we may consider the family oftypesEvt : Human ?
Type;intuitively, for any h : Human, the depen-dent type Evt(h) is the type of events con-ducted by h. Now, we can assume thatthe verbs start, finish and last have type?h : Human.
(Evt(h) ?
Prop) and readand write have type ?h : Human.
(Book ?Evt(h)).
Furthermore, we can consider thefollowing parameterised coercions, for anyh : Human,Book <c(h)Evt(h),where the coercion c(h) is the function from Bookto Evt(h) defined as follows: for any b : Book,c(h, b) ={write(h, b) if h wrote b,read(h, b) otherwise.where we have simplified the second case by as-suming that one would read a book if he/she hasnot written it.
(One may think of other actions toconsider more subcases here.)
Having the above,we can now interpret (43) as follows (in a simpli-fied form):(44) start(j, wp)& finish(t, wp)& ?last(j, wp)& ?lb : LBook.finish(j, pi1(lb))where LBook ?
?b : Book.long(b) is the typethat interprets the CN ?long book?
and pi1is thefirst projection operator that takes a long book andreturns the book itself.
In the coercive subtypingframework, (44) is coerced into (and equal to) thefollowing:(45) start(j, c(j, wp))& finish(t, c(t, wp))& ?last(j, c(j, wp))& ?lb : LBook.
finish(j, c(j, pi1(lb)))which is (equal to)(46) start(j, read(j, wp))& finish(t, write(t, wp))& ?last(j, read(j, wp))& ?lb : LBook.
finish(j, c(j, pi1(lb)))Note that, in the last conjunct, the coercion c isstill present ?
c(j, pi1(lb)) cannot be reduced fur-thermore because lb is a variable.5 ConclusionsIn this paper we proposed to deal with NLI bymaking use of proof-assistant technology, in par-ticular the proof-assistant Coq.
It was shown thatthe combination of MTT semantics as well as theuse of a proof-assistant that ?understands?
so to sayMTT semantics can provide us with encouragingresults as regards the computational treatment ofNLI.
More specifically, the paper has concentratedon the importance and expressivity of MTTs as re-gards typing by exemplifying the use of a rich typ-ing system in order to deal with a number of infer-ence cases ranging from adjectival and adverbial44modification to conjoined/disjoined NPs, compar-atives as well as factive/implicative verbs and typecoercions.ReferencesN.
Asher and Z. Luo.
2012.
Formalisation of coercionsin lexical semantics.
Sinn und Bedeutung 17, Paris,223.P.
Boldini.
2000.
Formalizing context in intuitionistictype theory.
Fundamenta Informaticae, 42(2):1?23.S.
Chatzikyriakidis and Z. Luo.
2012.
An ac-count of natural language coordination in type the-ory with coercive subtyping.
In Y. Parmentier andD.
Duchier, editors, Proc.
of Constraint Solving andLanguage Processing (CSLP12).
LNCS 8114, pages31?51, Orleans.S.
Chatzikyriakidis and Z. Luo.
2013a.
Adjectivesin a modern type-theoretical setting.
In G. Morrilland J.M Nederhof, editors, Proceedings of FormalGrammar 2013.
LNCS 8036, pages 159?174.S.
Chatzikyriakidis and Z. Luo.
2013b.
Natural lan-guage inference in coq.
Submitted.S.
Chatzikyriakidis and Z. Luo.
2014.
Hyperin-tensionality in modern type theories.
Submittedmanuscript.A.
Church.
1940.
A formulation of the simple theoryof types.
J.
Symbolic Logic, 5(1).R.
Cooper, D. Crouch, J. van Eijck, C. Fox, J. van Gen-abith, J. Jaspars, H. Kamp, D. Milward, M. Pinkal,M.
Poesio, and S. Pulman.
1996.
Usingthe framework.
Technical Report LRE 62-051r.http://www.cogsci.ed.ac.uk/ fracas/.R.
Cooper.
2005.
Records and record types in semantictheory.
J.
Logic and Compututation, 15(2).The Coq Development Team, 2007.
The Coq ProofAssistant Reference Manual (Version 8.1), INRIA.C.
Fox and S. Lappin.
2005.
Foundations of Inten-sional Semantics.
Blackwell.J.
Ginzburg and R. Cooper.
forthcoming.
Ttr for nat-ural language semantics.
In C. Fox and S. Lappin,editors, Handbook of Contemporary Semantic The-ory.
Blackwell.J.-Y.
Girard.
1971.
Une extension de l?interpretationfonctionelle de go?del a` l?analyse et son applicationa` l?e?limination des coupures dans et la the`orie destypes?.
Proc.
2nd Scandinavian Logic Symposium.North-Holland.H.
Goguen.
1994.
A Typed Operational Semantics forType Theory.
Ph.D. thesis, University of Edinburgh.Z.
Luo, S. Soloviev, and T. Xue.
2012.
Coercivesubtyping: theory and implementation.
Informationand Computation, 223:18?42.Z.
Luo.
1994.
Computation and Reasoning: A TypeTheory for Computer Science.
Oxford Univ Press.Z.
Luo.
1999.
Coercive subtyping.
Journal of Logicand Computation, 9(1):105?130.Z.
Luo.
2010.
Type-theoretical semantics with coer-cive subtyping.
Semantics and Linguistic Theory 20(SALT20), Vancouver, 84(2):28?56.Z.
Luo.
2011a.
Contextual analysis of word meaningsin type-theoretical semantics.
In Logical Aspectsof Computational Linguistics (LACL?2011).
LNAI6736, pages 159?174.Zhaohui Luo.
2011b.
Adjectives and adverbs in type-theoretical semantics.
Notes.Z.
Luo.
2012a.
Common nouns as types.
In D. Bechetand A. Dikovsky, editors, Logical Aspects of Com-putational Linguistics (LACL?2012).
LNCS 7351,pages 173?185.Z.
Luo.
2012b.
Formal semantics in modern type the-ories with coercive subtyping.
Linguistics and Phi-losophy, 35(6):491?513.B.
MacCartney.
2009.
Natural Language Inference.Ph.D.
thesis, Stanford Universisty.P.
Martin-Lo?f.
1975.
An intuitionistic theory of types:predicative part.
In H.Rose and J.C.Shepherdson,editors, Logic Colloquium?73.P.
Martin-Lo?f.
1984.
Intuitionistic Type Theory.
Bib-liopolis.R.
Montague.
1974.
Formal Philosophy.
Yale Univer-sity Press.A.
Ranta.
1994.
Type-Theoretical Grammar.
OxfordUniversity Press.C.
Retore?.
2013.
The Montagovian generative lexicon?Tyn: an integrated type-theoretical framework forcompositional semantics and lexical pragmatics.G.
Sundholm.
1989.
Constructive generalized quanti-fiers.
Synthese, 79(1):1?12.45
