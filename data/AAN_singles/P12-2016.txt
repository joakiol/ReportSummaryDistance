Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 80?84,Jeju, Republic of Korea, 8-14 July 2012. c?2012 Association for Computational LinguisticsDecoding Running Key CiphersSravana Reddy?Department of Computer ScienceThe University of Chicago1100 E. 58th StreetChicago, IL 60637, USAsravana@cs.uchicago.eduKevin KnightInformation Sciences InstituteUniversity of Southern California4676 Admiralty WayMarina del Rey, CA 90292, USAknight@isi.eduAbstractThere has been recent interest in the problemof decoding letter substitution ciphers usingtechniques inspired by natural language pro-cessing.
We consider a different type of classi-cal encoding scheme known as the running keycipher, and propose a search solution usingGibbs sampling with a word language model.We evaluate our method on synthetic cipher-texts of different lengths, and find that it out-performs previous work that employs Viterbidecoding with character-based models.1 IntroductionThe running key cipher is an encoding scheme thatuses a secret keyR that is typically a string of words,usually taken from a book or other text that is agreedupon by the sender and receiver.
When sending aplaintext message P , the sender truncates R to thelength of the plaintext.
The scheme also relies ona substitution function f , which is usually publiclyknown, that maps a plaintext letter p and key letterr to a unique ciphertext letter c. The most commonchoice for f is the tabula recta, where c = (p + r)mod 26 for letters in the English alphabet, with A= 0, B = 1, and so on.To encode a plaintext with a running key, thespaces in the plaintext and the key are removed, andfor every 0 ?
i < |P |, the ciphertext letter at posi-tion i is computed to be Ci ?
f(Pi, Ri).
Figure 1shows an example encoding using the tabula recta.For a given ciphertext and known f , the plaintextuniquely determines the running key and vice versa.
?Research conducted while the author was visiting ISI.Since we know that the plaintext and running keyare both drawn from natural language, our objectivefunction for the solution plaintext under some lan-guage model is:P?
= argmaxPlog Pr(P ) Pr(RP,C) (1)where the running key RP,C is the key that corre-sponds to plaintext P and ciphertext C.Note that if RP,C is a perfectly random sequenceof letters, this scheme is effectively a ?one-time pad?,which is provably unbreakable (Shannon, 1949).The knowledge that both the plaintext and the keyare natural language strings is important in breakinga running key cipher.The letter-frequency distribution of running keyciphertexts is notably flatter than than the plaintextdistribution, unlike substitution ciphers where thefrequency profile remains unchanged, modulo lettersubstitutions.
However, the ciphertext letter distri-bution is not uniform; there are peaks correspondingto letters (like I) that are formed by high-frequencyplaintext/key pairs (like E and E).2 Related Work2.1 Running Key CiphersBauer and Tate (2002) use letter n-grams (withoutsmoothing) up to order 6 to find the most probableplaintext/key character pair at each position in the ci-phertext.
They test their method on 1000-characterciphertexts produced from plaintexts and keys ex-tracted from Project Gutenberg.
Their accuraciesrange from 28.9% to 33.5%, where accuracy is mea-sured as the percentage of correctly decoded char-80Figure 1: Example of a running key cipher.
Note that key is truncated to the length of the plaintext.Plaintext ?
linguistics is fun, Running Key ?
colorless green ideas, tabula recta substitution where Ci ?
(Pi +Ri) mod 26Plaintext: L I N G U I S T I C S I S F U NRunning Key: C O L O R L E S S G R E E N I DCiphertext: N W Y U L T W L A I J M W S C Qacters.
Such figures are too low to produce read-able plaintexts, especially if the decoded regions arenot contiguous.
Griffing (2006) uses Viterbi decod-ing and letter 6-grams to improve on the above re-sult, achieving a median 87% accuracy over several1000-character ciphertexts.
A key shortcoming ofthis work is that it requires searching through about265 states at each position in the ciphertext.2.2 Letter Substitution CiphersPrevious work in decipherment of classical ciphershas mainly focused on letter substitution.
These ci-phers use a substitution table as the secret key.
Theciphertext is generated by substituting each letter ofthe plaintext according to the substitution table.
Thetable may be homophonic; that is, a single plaintextletter could map to more than one possible cipher-text letter.
Just as in running key ciphers, spaces inthe plaintext are usually removed before encoding.Proposed decipherment solutions for letter substi-tution ciphers include techniques that use expecta-tion maximization (Ravi and Knight, 2008), geneticalgorithms (Oranchak, 2008), integer programming(Ravi and Knight, 2009), A* decoding (Corlett andPenn, 2010), and Bayesian learning with Dirichletprocesses (Ravi and Knight, 2011).2.3 Vigene`re CiphersA scheme similar to the running key cipher is the Vi-gene`re cipher, also known as the periodic key cipher.Instead of a single long string spanning the length ofthe plaintext, the key is a short string ?
usually butnot always a single word or phrase ?
repeated to thelength of the plaintext.
Figure 2 shows an exampleVigene`re cipher encoding.
This cipher is less securethan the running key, since the short length of thekey vastly reduces the size of the search space, andthe periodic repetition of the key leaks information.Recent work on decoding periodic key ciphersperform Viterbi search on the key using letter n-gram models (Olsen et al, 2011), with the assump-tion that the length of the key is known.
If unknown,the key length can be inferred using the Kasiski Test(Kasiski, 1863) which takes advantage of repeatedplaintext/key character pairs.3 Solution with Gibbs SamplingIn this paper, we describe a search algorithm thatuses Gibbs Sampling to break a running key cipher.3.1 Choice of Language ModelThe main advantage of a sampling-based approachover Viterbi decoding is that it allows us to seam-lessly use word-based language models.
Lower or-der letter n-grams may fail to decipher most cipher-texts even with perfect search, since an incorrectplaintext and key could have higher likelihood un-der a weak language model than the actual message.3.2 Blocked SamplingOne possible approach is to sample a plaintext letterat each position in the ciphertext.
The limitation ofsuch a sampler for the running key problem is thatis extremely slow to mix, especially for longer ci-phertexts: we found that in practice, it does not usu-ally converge to the optimal solution in a reasonablenumber of iterations even with simulated annealing.We therefore propose a blocked sampling algorithmthat samples words rather than letters in the plain-text, as follows:1.
Initialize randomly P := p1p2 .
.
.
p|C|, fix R asthe key that corresponds to P,C2.
Repeat for some number of iterations(a) Sample spaces (word boundaries) in P ac-cording to Pr(P )(b) Sample spaces in R according to Pr(R)(c) Sample each word in P according toPr(P ) Pr(R), updating R along with P(d) Sample each word in R according toPr(P ) Pr(R), updating P along with R81Figure 2: Example of a Vigene`re cipher cipher, with a 5-letter periodic key, repeated to the length of the plaintext.Plaintext ?
linguistics is fun, Periodic Key ?
green, tabula recta substitution.Plaintext: L I N G U I S T I C S I S F U NRunning Key: G R E E N G R E E N G R E E N GCiphertext: R Z R K H O J X M P Y Z W J H T3.
Remove spaces and return P,RNote that every time a word in P is sampled, itinduces a change in R that may not be a word or asequence of words, and vice versa.
Sampling wordboundaries will also produce hypotheses contain-ing non-words.
For this reason, we use a word tri-gram model linearly interpolated with letter trigrams(including the space character).1 The interpolationmainly serves to smooth the search space, with theadded benefit of accounting for out-of-vocabulary,misspelled, or truncated words in the actual plaintextor key.
Table 1 shows an example of one samplingiteration on the ciphertext shown in Figure 1.Table 1: First sampling iteration on the ciphertextNWYULTWLAIJMWSCQGenerate P,R P : WERGATERYBVIEDOWwith letter trigrams R: RSHOLASUCHOESPOUSample spaces in P P : WERGAT ER YB VIEDOWSample spaces in R R: RS HOLASUCHOES POUSample words in P P : ADJUST AN MY WILLOWR: NT PATAWYOKNEL HOUSample words in R P : NEWNXI ST HE SYLACTR: AS CHOLESTEROL SAX4 Experiments4.1 DataWe randomly select passages from the ProjectGutenberg and Wall Street Journal Corpus extractsthat are included in the NLTK toolkit (Bird et al,2009).
The passages are used as plaintext and keypairs, and combined to generate synthetic ciphertextdata.
Unlike previous works which used constant-length ciphertexts, we study the effect of messagelength on decipherment by varying the ciphertextlength (10, 100, and 1000 characters).Our language model is an interpolation of wordtrigrams and letter trigrams trained on the Brown1Pr(P ) = ?Pr(P |word LM) + (1 ?
?)
Pr(P |letter LM),and similarly for Pr(R).Corpus (Nelson and Kucera, 1979), with Kneser-Ney smoothing.
We fixed the word language modelinterpolation weight to ?
= 0.7.4.2 Baseline and EvaluationFor comparison with the previous work, we re-implement Viterbi decoding over letter 6-grams(Griffing, 2006) trained on the Brown Corpus.
Inaddition to decipherment accuracy, we compare therunning time in seconds of the two algorithms.Both decipherment programs were implemented inPython and run on the same machines.
The GibbsSampler was run for 10000 iterations.As in the Griffing (2006) paper, since the plaintextand running key are interchangeable, we measurethe accuracy of a hypothesized solution against thereference as the max of the accuracy between the hy-pothesized plaintext and the reference plaintext, andthe hypothesized plaintext and the reference key.4.3 ResultsTable 2 shows the average decipherment accuracy ofour algorithm and the baseline on each dataset.
Alsoshown is the number of times that the Gibbs Sam-pling search failed ?
that is, when the algorithm didnot hypothesize a solution that had a probability atleast as high as the reference within 10000 iterations.It is clear that the Gibbs Sampler is orders of mag-nitude faster than Viterbi decoding.
Performanceon the short (length 10) ciphertexts is poor underboth algorithms.
This is expected, since the degreeof message uncertainty, or message equivocation asdefined by Shannon, is high for short ciphertexts:there are several possible plaintexts and keys be-sides the original that are likely under an Englishlanguage model.
Consider the ciphertext WAEEXF-PROV which was generated by the plaintext seg-ment ON A REFEREN and key INENTAL AKI.The algorithm hypothesizes that the plaintext is THESTRAND S and key DTAME OPELD, which bothreceive high language model probability.82Table 2: Decipherment accuracy (proportion of correctly deciphered characters).
Plaintext and key sources for theciphertext test data were extracted by starting at random points in the corpora, and selecting the following n characters.Length of Plaintext and key # Cipher- Average Accuracy Avg.
running time (sec) # Failed Gibbsciphertext source texts Viterbi Gibbs Viterbi Gibbs searches10Project Gutenberg 100 14% 17% 1005 47 5Wall Street Journal 100 10% 26% 986 38 2100Project Gutenberg 100 27% 42% 10212 236 19Wall Street Journal 100 22% 58% 10433 217 121000Project Gutenberg 100 63% 88% 112489 964 32Wall Street Journal 100 60% 93% 117303 1025 25Table 3: Substitution function parameterized by the keyword, CIPHER.
f(p, r) is the entry in the row corresponding to p and thecolumn corresponding to r.A B C D E F G H I J K L M N O P Q R S T U V W X Y ZA C I P H E R A B D F G J K L M N O Q S T U V W X Y ZB I P H E R A B D F G J K L M N O Q S T U V W X Y Z CC P H E R A B D F G J K L M N O Q S T U V W X Y Z C I. .
.However, on the long ciphertexts, our algorithmgets close to perfect decipherment, surpassing theViterbi algorithm by a large margin.2 Accuracies onthe Wall Street Journal ciphertexts are higher than onthe Gutenberg ciphertexts for our algorithm, whichmay be because the latter is more divergent from theBrown Corpus language model.5 Future Work5.1 Unknown substitution functionsSome running key ciphers also use a secret substi-tution function f rather than the tabula recta or an-other known function.
In typical cases, these func-tions are not arbitrary, but are parameterized by a se-cret keyword that mutates the tabula recta table.
Forexample, the function with the keyword CIPHERwould be the substitution table shown in Table 3.Decoding a running key ciphertext under a latentsubstitution function is an open line of research.
Onepossibility is to extend our approach by sampling thekeyword or function in addition to the plaintext.5.2 Exact searchSince some the errors in Gibbs Sampling decipher-ment are due to search failures, a natural exten-sion of this work would be to adapt Viterbi search2The accuracies that we found for Viterbi decoding arelower than those reported by Griffing (2006), which might bebecause they use an in-domain language model.or other exact decoding algorithms like A* to useword-level language models.
A naive implementa-tion of Viterbi word-based decoding results in com-putationally inefficient search spaces for large vo-cabularies, so more sophisticated methods or heuris-tics will be required.5.3 Analysis of Running Key DeciphermentWhile there has been theoretical and empirical anal-ysis of the security of letter substitution ciphersof various lengths under different language models(Shannon, 1949; Ravi and Knight, 2008), there hasbeen no similar exposition of running key ciphers,which we reserve for future work.6 ConclusionWe propose a decipherment algorithm for runningkey ciphers that uses Blocked Gibbs Sampling andword-based language models, which shows signifi-cant speed and accuracy improvements over previ-ous research into this problem.AcknowledgmentsWe would like to thank Sujith Ravi for initial exper-iments using Gibbs sampling, and the anonymousreviewers.
This research was supported in part byNSF grant 0904684.83ReferencesCraig Bauer and Christian Tate.
2002.
A statistical attackon the running key cipher.
Cryptologia, 26(4).Steven Bird, Edward Loper, and Ewan Klein.
2009.
Nat-ural Language Processing with Python.
O?Reilly Me-dia Inc.Eric Corlett and Gerald Penn.
2010.
An exact A* methodof deciphering letter-substitution ciphers.
In Proceed-ings of ACL.Alexander Griffing.
2006.
Solving the running key ci-pher with the Viterbi algorithm.
Cryptologia, 30(4).Friedrich Kasiski.
1863.
Die Geheimschriften und dieDechiffrir-Kunst.
E. S. Mittler und Sohn.Francis Nelson and Henry Kucera.
1979.
The BrownCorpus: A Standard Corpus of Present-Day EditedAmerican English.
Brown University.Peder Olsen, John Hershey, Steven Rennie, and Vaib-hava Goel.
2011.
A speech recognition solution toan ancient cryptography problem.
Technical ReportRC25109 (W1102-005), IBM Research.David Oranchak.
2008.
Evolutionary algorithm for de-cryption of monoalphabetic homophonic substitutionciphers encoded as constraint satisfaction problems.
InProceedings of the Conference on Genetic and Evolu-tionary Computation.Sujith Ravi and Kevin Knight.
2008.
Attacking deci-pherment problems optimally with low-order n-grammodels.
In Proceedings of EMNLP.Sujith Ravi and Kevin Knight.
2009.
Attacking lettersubstitution ciphers with integer programming.
Cryp-tologia, 33(4).Sujith Ravi and Kevin Knight.
2011.
Bayesian inferencefor Zodiac and other homophonic ciphers.
In Proceed-ings of ACL.Claude Shannon.
1949.
Communication theory of se-crecy systems.
Bell System Technical Journal, 28(4).84
