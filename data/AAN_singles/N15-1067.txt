Human Language Technologies: The 2015 Annual Conference of the North American Chapter of the ACL, pages 651?661,Denver, Colorado, May 31 ?
June 5, 2015.c?2015 Association for Computational LinguisticsUnsupervised Dependency Parsing: Let?s Use Supervised ParsersPhong Le and Willem ZuidemaInstitute for Logic, Language, and ComputationUniversity of Amsterdam, the Netherlands{p.le,zuidema}@uva.nlAbstractWe present a self-training approach to unsu-pervised dependency parsing that reuses exist-ing supervised and unsupervised parsing algo-rithms.
Our approach, called ?iterated rerank-ing?
(IR), starts with dependency trees gener-ated by an unsupervised parser, and iterativelyimproves these trees using the richer proba-bility models used in supervised parsing thatare in turn trained on these trees.
Our systemachieves 1.8% accuracy higher than the state-of-the-part parser of Spitkovsky et al (2013)on the WSJ corpus.1 IntroductionUnsupervised dependency parsing and its super-vised counterpart have many characteristics in com-mon: they take as input raw sentences, producedependency structures as output, and often use thesame evaluation metric (DDA, or UAS, the percent-age of tokens for which the system predicts the cor-rect head).
Unsurprisingly, there has been muchmore research on supervised parsing ?
producing awealth of models, datasets and training techniques?
than on unsupervised parsing, which is more dif-ficult, much less accurate and generally uses verysimple probability models.
Surprisingly, however,there have been no reported attempts to reuse super-vised approaches to tackle the unsupervised parsingproblem (an idea briefly mentioned in Spitkovsky etal.
(2010b)).There are, nevertheless, two aspects of supervisedparsers that we would like to exploit in an unsuper-vised setting.
First, we can increase the model ex-pressiveness in order to capture more linguistic reg-ularities.
Many recent supervised parsers use third-order (or higher order) features (Koo and Collins,2010; Martins et al, 2013; Le and Zuidema, 2014)to reach state-of-the-art (SOTA) performance.
Incontrast, existing models for unsupervised parsinglimit themselves to using simple features (e.g., con-ditioning on heads and valency variables) in orderto reduce the computational cost, to identify consis-tent patterns in data (Naseem, 2014, page 23), andto avoid overfitting (Blunsom and Cohn, 2010).
Al-though this makes learning easier and more efficient,the disadvantage is that many useful linguistic regu-larities are missed: an upper bound on the perfor-mance of such simple models ?
estimated by us-ing annotated data ?
is 76.3% on the WSJ corpus(Spitkovsky et al, 2013), compared to over 93% ac-tual performance of the SOTA supervised parsers.Second, we would like to make use of informa-tion available from lexical semantics, as in Bansalet al (2014), Le and Zuidema (2014), and Chen andManning (2014).
Lexical semantics is a source forhandling rare words and syntactic ambiguities.
Forinstance, if a parser can identify that ?he?
is a depen-dent of ?walks?
in the sentence ?He walks?, then,even if ?she?
and ?runs?
do not appear in the train-ing data, the parser may still be able to recognizethat ?she?
should be a dependent of ?runs?
in thesentence ?she runs?.
Similarly, a parser can makeuse of the fact that ?sauce?
and ?John?
have verydifferent meanings to decide that they have differentheads in the two phrases ?ate spaghetti with sauce?and ?ate spaghetti with John?.However, applying existing supervised parsing651techniques to the task of unsupervised parsing is,unfortunately, not trivial.
The reason is that thoseparsers are optimally designed for being trained onmanually annotated data.
If we use existing unsuper-vised training methods (like EM), learning could beeasily misled by a large amount of ambiguity natu-rally embedded in unannotated training data.
More-over, the computational cost could rapidly increaseif the training algorithm is not designed properly.To overcome these difficulties we propose a frame-work, iterated reranking (IR), where existing super-vised parsers are trained without the need of manu-ally annotated data, starting with dependency treesprovided by an existing unsupervised parser as ini-tialiser.
Using this framework, we can employ thework of Le and Zuidema (2014) to build a new sys-tem that outperforms the SOTA unsupervised parserof Spitkovsky et al (2013) on the WSJ corpus.The contribution of this paper is twofold.
First,we show the benefit of using lexical semantics forthe unsupervised parsing task.
Second, our work isa bridge connecting the two research areas unsuper-vised parsing and its supervised counterpart.
Beforegoing to the next section, in order to avoid confusionintroduced by names, it is worth noting that we useun-trained existing supervised parsers which will betrained on automatically annotated treebanks.2 Related Work2.1 Unsupervised Dependency ParsingThe first breakthrough was set by Klein and Man-ning (2004) with their dependency model with va-lence (DMV), the first model to outperform theright-branching baseline on the DDA metric: 43.2%vs 33.6% on sentences up to length 10 in the WSJcorpus.
Nine years later, Spitkovsky et al (2013)achieved much higher DDAs: 72.0% on sentencesup to length 10, and 64.4% on all sentences in sec-tion 23.
During this period, many approaches havebeen proposed to attempt the challenge.Naseem and Barzilay (2011), Tu and Honavar(2012), Spitkovsky et al (2012), Spitkovsky et al(2013), and Marecek and Straka (2013) employ ex-tensions of the DMV but with different learningstrategies.
Naseem and Barzilay (2011) use seman-tic cues, which are event annotations from an out-of-domain annotated corpus, in their model duringtraining.
Relying on the fact that natural languagegrammars must be unambiguous in the sense thata sentence should have very few correct parses, Tuand Honavar (2012) incorporate unambiguity regu-larisation to posterior probabilities.
Spitkovsky et al(2012) bootstrap the learning by slicing up all inputsentences at punctuation.
Spitkovsky et al (2013)propose a complete deterministic learning frame-work for breaking out of local optima using counttransforms and model recombination.
Marecek andStraka (2013) make use of a large raw text corpus(e.g., Wikipedia) to estimate stop probabilities, us-ing the reducibility principle.Differing from those works, Bisk and Hocken-maier (2012) rely on Combinatory Categorial Gram-mars with a small number of hand-crafted generallinguistic principles; whereas Blunsom and Cohn(2010) use Tree Substitution Grammars with a hi-erarchical non-parametric Pitman-Yor process priorbiasing the learning to a small grammar.2.2 RerankingOur work relies on reranking which is a techniquewidely used in (semi-)supervised parsing.
Rerank-ing requires two components: a k-best parser and areranker.
Given a sentence, the parser generates alist of k best candidates, the reranker then rescoresthose candidates and picks the one that has the high-est score.
Reranking was first successfully applied tosupervised constituent parsing (Collins, 2000; Char-niak and Johnson, 2005).
It was then employed inthe supervised dependency parsing approaches ofSangati et al (2009), Hayashi et al (2013), and Leand Zuidema (2014).Closest to our work is the work series on semi-supervised constituent parsing of McClosky and col-leagues, e.g.
McClosky et al (2006), using self-training.
They use a k-best generative parser anda discriminative reranker to parse unannotated sen-tences, then add resulting parses to the trainingtreebank and re-train the reranker.
Different fromtheir work, our work is for unsupervised dependencyparsing, without manually annotated data, and usesiterated reranking instead of single reranking.
Inaddition, both two components, k-best parser andreranker, are re-trained after each iteration.6523 The IR FrameworkExisting training methods for the unsupervised de-pendency task, such as Blunsom and Cohn (2010),Gillenwater et al (2011), and Tu and Honavar(2012), are hypothesis-oriented search with the EMalgorithm or its variants: training is to move froma point which represents a model hypothesis to an-other point.
This approach is feasible for optimisingmodels using simple features since existing dynamicprogramming algorithms can compute expectations,which are sums over all possible parses, or to findthe best parse in the whole parse space with lowcomplexities.
However, the complexity increasesrapidly if rich, complex features are used.
One wayto reduce the computational cost is to use approx-imation methods like sampling as in Blunsom andCohn (2010).3.1 Treebank-oriented Greedy SearchBelieving that the difficulty of using EM is fromthe fact that treebanks are ?hidden?, leading to theneed of computing sum (or max) overall possibletreebanks, we propose a greedy local search schemebased on another training philosophy: treebank-oriented search.
The key idea is to explicitly searchfor concrete treebanks which are used to train pars-ing models.
This scheme thus allows supervisedparsers to be trained in an unsupervised parsing set-ting since there is a (automatically annotated) tree-bank at any time.Given S a set of raw sentences, the search spaceconsists of all possible treebanksD = {d(s)|s ?
S}where d(s) is a dependency tree of sentence s. Thetarget of search is the optimal treebank D?that is asgood as human annotations.
Greedy search with thisphilosophy is as follows: starting at an initial pointD1, we pick up a point D2among its neighboursN(D1) such thatD2= arg maxD?N(D1)fD1(D) (1)where fD1(D) is an objective function measuringthe goodness of D (which may or may not be con-ditioned on D1).
We then continue this search untilsome stop criterion is satisfied.
The crucial factorhere is to define N(Di) and fDi(D).
Below are twospecial cases of this scheme.Semi-supervised parsing using reranking (Mc-Closky et al, 2006).
This reranking is indeed one-step greedy local search.
In this scenario, N(D1) isthe Cartesian product of k-best lists generated by ak-best parser, and fDi(D) is a reranker.Unsupervised parsing with hard-EM(Spitkovsky et al, 2010b) In hard-EM, the tar-get is to maximise the following objective functionwith respect to a parameter set ?L(S|?)
=?s?Smaxd?Dep(s)logP?
(d)(2)where Dep(s) is the set of all possible dependencystructures of s. The two EM steps are thus?
Step 1: Di+1= arg maxDP?i(D)?
Step 2: ?i+1= arg max?P?
(Di+1)In this case, N(Di) is the whole treebank space andfDi(D) = P?i(D) = Parg max?P?
(Di)(D).3.2 Iterated RerankingWe instantiate the greedy search scheme by iteratedreranking which requires two components: a k-bestparser P , and a reranker R. Firstly, D1is usedto train these two components, resulting in P1andR1.
The parser P1then generates a set of lists of kcandidateskD1(whose Cartesian product results inN(D1)) for the set of training sentences S. The bestcandidates, according to reranker R1, are collectedto form D2for the next iteration.
This process ishalted when a pre-defined stop criterion is met.1It is certain that we can, as in the work ofSpitkovsky et al (2010b) and many bootstrappingapproaches, employ only parser P .
Reranking, how-ever, brings us two benefits.
First, it allows us to em-ploy very expressive models like the ?-order gen-erative model proposed by Le and Zuidema (2014).Second, it embodies a similar idea to co-training(Blum and Mitchell, 1998): P and R play roles astwo views of the data.1It is worth noting that, althoughN(Di) has the size O(kn)where n is the number of sentences, reranking only needs toprocess O(k ?
n) parses if these sentences are assumed to beindependent.6533.3 Multi-phase Iterated RerankingTraining in machine learning often uses starting bigwhich is to use up all training data at the same time.However, Elman (1993) suggests that in some cases,learning should start by training simple models onsmall data and then gradually increase the modelcomplexity and add more difficult data.
This iscalled starting small.In unsupervised dependency parsing, startingsmall is intuitive.
For instance, given a set of longsentences, learning the fact that the head of a sen-tence is its main verb is difficult because a long sen-tence always contains many syntactic categories.
Itwould be much easier if we start with only length-one sentences, e.g ?Look!
?, since there is onlyone choice which is usually a verb.
This trainingscheme was successfully applied by Spitkovsky etal.
(2010a) under the name: Baby Step.We adopt starting small to construct the multi-phase iterated reranking (MPIR) framework.
Inphase 0, a parser M with a simple model is trainedon a set of short sentences S(0)as in traditional ap-proaches.
This parser is used to parse a larger setof sentences S(1)?
S(0), resulting in D(1)1.
D(1)1isthen used as the starting point for the iterated rerank-ing in phase 1.
We continue this process until phaseN finishes, with S(i)?
S(i?1)(i = 1..N ).
In gen-eral, we use the resulting reranker in the previousphase to generate the starting point for the iteratedreranking in the current phase.4 Le and Zuidema (2014)?s RerankerLe and Zuidema (2014)?s reranker is an exceptionamong supervised parsers because it employs an ex-tremely expressive model whose features are ?-order2.
To overcome the problem of sparsity, theyintroduced the inside-outside recursive neural net-work (IORNN) architecture that can estimate tree-generating models including those proposed by Eis-ner (1996) and Collins (2003a).4.1 The?-order Generative ModelLe and Zuidema (2014)?s reranker employs the gen-erative model proposed by Eisner (1996).
Intu-itively, this model is top-down: starting with ROOT,2In fact, the order is finite but unbound.Figure 1: Inside-Outside Recursive Neural Network(IORNN).
Black/white rectangles correspond to in-ner/outer representations.we generate its left dependents and its right de-pendents.
We then generate dependents for eachROOT?s dependent.
The generative process recur-sively continues until there is no dependent to gen-erate.
Formally, this model is described by the fol-lowing formulaP (d(H)) =L?l=1P(HLl|C(HLl))P(d(HLl))?R?r=1P(HRr|C(HRr))P(d(HRr))(3)where H is the current head, d(N) is the fragmentof the dependency parse rooted at N , and C(N)is the context to generate N .
HL, HRare respec-tively H?s left dependents and right dependents, plusEOC (End-Of-Children), a special token to informthat there are no more dependents to generate.
Thus,P (d(ROOT )) is the probability of generating theentire dependency structure d.Le and Zuidema?s ?-order generative model isdefined as Eisner?s model in which the contextC?
(D) to generate D contains all of D?s generatedsiblings, its ancestors and their siblings.
Becauseof very large fragments that contexts are allowed tohold, traditional count-based methods are imprac-tical (even if we use smart smoothing techniques).They thus introduced the IORNN architecture to es-timate the model.4.2 Estimation with the IORNNAn IORNN (Figure 1) is a recursive neural networkwhose topology is a tree.
What make this networkdifferent from traditional RNNs (Socher et al, 2010)is that each tree node u caries two vectors: iu- theinner representation, represents the content of the654phrase covered by the node, and ou- the outer repre-sentation, represents the context around that phrase.In addition, information in an IORNN is allowed toflow not only bottom-up as in RNNs, but also top-down.
That makes IORNNs a natural tool for esti-mating top-down tree-generating models.Applying the IORNN architecture to dependencyparsing is straightforward, along the generative storyof the ?-order generative model.
First of all, the?inside?
part of this IORNN is simpler than whatis depicted in Figure 1: the inner representation ofa phrase is assumed to be the inner representationof its head.
This approximation is plausible sincethe meaning of a phrase is often dominated by themeaning of its head.
The inner representation ateach node, in turn, is a function of a vector repre-sentation for the word (in our case, the word vectorsare initially borrowed from Collobert et al (2011)),the POS-tag and capitalisation feature.Without loss of generality and ignoring directionsfor simplicity, they assume that the model is generat-ing dependent u for node h conditioning on contextC?
(u) which contains all of u?s ancestors (includ-ing h) and theirs siblings, and all of previously gen-erated u?s sisters.
Now there are two types of con-texts: full contexts of heads (e.g., h) whose depen-dents are being generated, and contexts to generatenodes (e.g., C?(u)).
Contexts of the first type areclearly represented by outer representations.
Con-texts of the other type are represented by partialouter representations, denoted by?ou.
Because thecontext to generate a node can be constructed recur-sively by combining the full context of its head andits previously generated sisters, they can compute?ouas a function of ohand the inner representations ofits previously generated sisters.
On the top of?ou,they put a softmax layer to estimate the probabilityP (x|C?
(u)).Training this IORNN is to minimise the cross en-tropy over all dependents.
This objective function isindeed the negative log likelihood P (D) of trainingtreebank D.4.3 The RerankerLe and Zuidema?s (generative) reranker is given byd?= arg maxd?kDep(s)P (d)where P (Equation 3) is computed by the ?-ordergenerative model which is estimated by an IORNN;andkDep(s) is a k-best list.5 Complete SystemOur system is based on the multi-phase IR.
In gen-eral, any third-party parser for unsupervised depen-dency parsing can be used in phase 0, and any third-party parser that can generate k-best lists can be usedin the other phases.
In our experiments, for phase 0,we choose the parser using an extension of the DMVmodel with stop-probability estimates computed ona large corpus proposed by Marecek and Straka(2013).
This system has a moderate performance3on the WSJ corpus: 57.1% vs the SOTA 64.4% DDAof Spitkovsky et al (2013).
For the other phases, weuse the MSTParser4(with the second-order featuremode) (McDonald and Pereira, 2006).Our system uses Le and Zuidema (2014)?sreranker (Section 4.3).
It is worth noting that, inthis case, each phase with iterated reranking couldbe seen as an approximation of hard-EM (see Equa-tion 2) where the first step is replaced byDi+1= arg maxD?N(Di)P?i(D) (4)In other words, instead of searching over the tree-bank space, the search is limited in a neighbour setN(Di) generated by k-best parser Pi.5.1 Tuning Parser PParser Pitrained onDidefines neighbour set N(Di)which is the Cartesian product of the k-best lists inkDi.
The position and shape of N(Di) is thus deter-mined by two factors: how well Pican fit Di, and k.Intuitively, the lower the fitness is, the more N(Di)goes far away fromDi; and the larger k is, the larger3Marecek and Straka (2013) did not report any experimentalresult on the WSJ corpus.
We use their source code at http://ufal.mff.cuni.cz/udp with the setting presented inSection 6.1.
Because the parser does not provide the option toparse unseen sentences, we merge the training sentences (up tolength 15) to all the test sentences to evaluate its performance.Note that this result is close to the DDA (55.4%) that the authorsreported on CoNLL 2007 English dataset, which is a portion ofthe WSJ corpus.4http://sourceforge.net/projects/mstparser/655N(Di) is.
Moreover, the diversity of N(Di) is in-versely proportional to the fitness.
When the fitnessdecreases, patterns existing in the training treebankbecome less certain to the parser, patterns that do notexist in the training treebank thus have more chancesto appear in k-best candidates.
This leads to high di-versity of N(Di).
We blindly set k = 10 in all ofour experiments.With the MSTParser, there are two hyper-parameters: itersMST, the number of epochs, andtraining-kMST, the k-best parse set size to cre-ate constraints during training.
training-kMSTis always 1 because constraints from k-best parseswith almost incorrect training parses are useless.Because itersMSTcontrols the fitness of theparser to training treebank Di, it, as pointed outabove, determines the distance from N(Di) to Diand the diversity of the former.
Therefore, if wewant to encourage the local search to explore moredistant areas, we should set itersMSTlow.
In ourexperiments, we test two strategies: (i) MaxEnc,itersMST= 1, maximal encouragement, and (ii)MinEnc, itersMST= 10, minimal encouragement.5.2 Tuning Reranker RTuning the reranker R is to set values for dimIORNN,the dimensions of inner and outer representations,and itersIORNN, the number of epochs to train theIORNN.
Because the?-order model is very expres-sive and feed-forward neural networks are universalapproximators (Cybenko, 1989), the reranker is ca-pable of perfectly remembering all training parses.In order to avoid this, we set dimIORNN= 50, andset itersIORNN= 5 for very early stopping.5.3 Tuning multi-phase IRBecause Marecek and Straka (2013)?s parser doesnot distinguish training data from test data, we pos-tulate S0= S1.
Our system has N phases such thatS0,S1contain all sentences up to length l1= 15,Si(i = 2..N ) contains all sentences up to lengthli= li?1+ 1, and SNcontains all sentences up tolength 25.
Phase 1 halts after 100 iterations whereasall the following phases run with one iteration.
Notethat we force the local search in phase 1 to run in-tensively because we hypothesise that most of theimportant patterns for dependency parsing can befound within short sentences.6 Experiments6.1 SettingWe use the Penn Treebank WSJ corpus: sections02-21 for training, and section 23 for testing.
Wethen apply the standard pre-processing5for unsu-pervised dependency parsing task (Klein and Man-ning, 2004): we strip off all empty sub-trees, punc-tuation, and terminals (tagged # and $) not pro-nounced where they appear; we then convert the re-maining trees to dependencies using Collins?s headrules (Collins, 2003b).
Both word forms and goldPOS tags are used.
The directed dependency accu-racy (DDA) metric is used for evaluation.The vocabulary is taken as a list of words occur-ring more than two times in the training data.
Allother words are labelled ?UNKNOWN?
and everydigit is replaced by ?0?.
We initialise the IORNNwith the 50-dim word embeddings from Collobert etal.
(2011)6, and train it with the learning rate 0.1,6.2 ResultsWe compare our system against recent systems (Ta-ble 1 and Section 2.1).
Our system with the two en-couragement levels, MinEnc and MaxEnc, achievesthe highest reported DDAs on section 23: 1.8% and1.2% higher than Spitkovsky et al (2013) on all sen-tences and up to length 10, respectively.
Our im-provements over the system?s initialiser (Marecekand Straka, 2013) are 9.1% and 4.4%.6.3 AnalysisIn this section, we analyse our system along two as-pects.
First, we examine three factors which deter-mine the performance of the whole system: encour-agement level, lexical semantics, and starting point.We then search for what IR (with the MaxEnc op-tion) contributes to the overall performance by com-paring the quality of the treebank resulted in the endof phase 1 against the quality of the treebank givenby its initialier, i.e.
Marecek and Straka (2013).The effect of encouragement levelFigure 2 shows the differences in DDA betweenusing MaxEnc and MinEnc in each phase: we com-5http://www.cs.famaf.unc.edu.ar/?francolq/en/proyectos/dmvccm6http://ml.nec-labs.com/senna/.
These wordembeddings were unsupervisedly learnt from Wikipedia.656System DDA (@10)Bisk and Hockenmaier (2012) 53.3 (71.5)Blunsom and Cohn (2010) 55.7 (67.7)Tu and Honavar (2012) 57.0 (71.4)Marecek and Straka (2013)357.1 (68.8)Naseem and Barzilay (2011) 59.4 (70.2)Spitkovsky et al (2012) 61.2 (71.4)Spitkovsky et al (2013) 64.4 (72.0)Our system (MinEnc) 66.2 (72.7)Our system (MaxEnc) 65.8 (73.2)Table 1: Performance on section 23 of the WSJ cor-pus (all sentences and up to length 10) for recent sys-tems and our system.
MinEnc and MaxEnc denoteitersMST= 10 and itersMST= 1 respectively.Figure 2: DDAMaxEnc?
DDAMinEncof all phaseson the their training sets (e.g., phase 3 with S(3)con-taining all training sentences up to length 17).pute DDAMaxEnc?DDAMinEncof each phase on itstraining set (e.g., phase 3 with S(3)containing alltraining sentences up to length 17).
MinEnc outper-forms MaxEnc within phases 1, 2, 3, and 4.
How-ever, from phase 5, the latter surpasses the former.
Itsuggests that exploring areas far away from the cur-rent point with long sentences is risky.
The reasonis that long sentences contain more ambiguities thanshort ones; thus rich diversity, high difference fromthe current point, but small size (i.e., small k) couldeasily lead the learning to a wrong path.The performance of the system with the two en-couragement levels on section 23 (Table 1) also sug-gests the same.
MaxEnc strategy helps the systemachieve the highest accuracy on short sentences (upto length 10).
However, it is less helpful than Mi-nEnc when performing on long sentences.Figure 3: DDA of phase 1 (MaxEnc), with and with-out the word embeddings (denoted by w/ sem andwo/ sem, respectively), on training sentences up tolength 15 (i.e.
S(1)).Figure 4: DDA of phase 1 (MaxEnc) before and af-ter training with three different starting points pro-vided by three parsers used in phase 0: MS (Mare-cek and Straka, 2013), GGGPT (Gillenwater et al,2011), and Harmonic (Klein and Manning, 2004).The role of lexical semanticsWe examine the role of the lexical semantics,which is given by the word embeddings.
Fig-ure 3 shows DDAs on training sentences up tolength 15 (i.e.
S(1)) of phase 1 (MaxEnc) withand without the word-embeddings.
With the word-embeddings, phase 1 achieves 71.11%.
When theword-embeddings are not given, i.e.
the IORNNuses randomly generated word vectors, the accuracydrops 4.2%.
It shows that lexical semantics plays adecisive role in the performance of the system.However, it is worth noting that, even without thatknowledge (i.e., with the?-order generative modelalone), the DDA of phase 1 is 2% higher than beforebeing trained (66.89% vs 64.9%).
It suggests thatphase 1 is capable of discovering some useful de-pendency patterns that are invisible to the parser inphase 0.
This, we conjecture, is thanks to high-orderfeatures captured by the IORNN.The importance of the starting pointStarting point is claimed to be important in lo-cal search.
We examine this by using three differ-ent parsers in phase 0: (i) MS (Marecek and Straka,657Figure 5: Precision (top) and recall (bottom) overbinned HEAD distance of iterated reranking (IR)and its initializer (MS) on the training sentences inphase 1 (?
15 words).2013), the parser used in the previous experiments,(ii) GGGPT (Gillenwater et al, 2011)7employingan extension of the DMV model and posterior reg-ularization framework for training, and (iii) Har-monic, the harmonic initializer proposed by Kleinand Manning (2004).Figure 4 shows DDAs of phase 1 (MaxEnc)on training sentences up to length 15 with threestarting-points given by those parsers.
Starting pointis clearly very important to the performance of theiterated reranking: the better the starting point is,the higher performance phase 1 has.
However, aremarkable point here is that the iterated rerankingof phase 1 always finds out more useful patterns forparsing whatever the starting point is in this experi-ment.
It is certainly due to the high order featuresand lexical semantics, which are not exploited inthose parsers.The contribution of Iterated RerankingWe compare the quality of the treebank resulted inthe end of phase 1 against the quality of the treebankgiven by the initialier Marecek and Straka (2013).Figure 5 shows precision (top) and recall (bottom)7code.google.com/p/pr-toolkitover binned HEAD distance.
IR helps to improvethe precision on all distance bins, especially on thebins corresponding to long distances (?
3).
The re-call is also improved, except on the bin correspond-ing to?
7 (but the F1-score on this bin is increased).We attribute this improvement to the?-order modelwhich uses very large fragments as contexts thus beable to capture long dependencies.Figure 6 shows the correct-head accuracies overPOS-tags.
IR helps to improve the accuracies overalmost all POS-tags, particularly nouns (e.g.
NN,NNP, NNS), verbs (e.g.
VBD, VBZ, VBN, VBG)and adjectives (e.g.
JJ, JJR).
However, as being af-fected by the initializer, IR performs poorly on con-junction (CC) and modal auxiliary (MD).
For in-stance, in the treebank given by the initializer, al-most all modal auxilaries are dependents of theirverbs instead of the other way around.7 DiscussionOur system is different from the other systemsshown in Table 1 as it uses an extremely expressivemodel, the?-order generative model, in which con-ditioning contexts are very large fragments.
Onlythe work of Blunsom and Cohn (2010), whose re-sulting grammar rules can contain large tree frag-ments, shares this property.
The difference is thattheir work needs a pre-defined prior, namely hierar-chical non-parametric Pitman-Yor process prior, toavoid large, rare fragments and for smoothing.
TheIORNN of our system, in contrast, does that auto-matically.
It learns by itself how to deal with dis-tant conditioning nodes, which are often less infor-mative than close conditioning nodes on computingP (x|C?(u)).
In addition, smoothing is given free:recursive neural nets are able to map ?similar?
frag-ments onto close points (Socher et al, 2010) thusan unseen fragment tends to be mapped onto a pointclose to points corresponding to ?similar?
seen frag-ments.Another difference is that our system exploits lex-ical semantics via word embeddings, which werelearnt unsupervisedly.
By initialising the IORNNwith these embeddings, the use of this knowledgeturns out easy and transparent.
Spitkovsky et al(2013) also exploit lexical semantics but in a limitedway, using a context-based polysemous unsuper-658Figure 6: Correct-head accuracies over POS-tags (sorted in the descending order by frequency) of iteratedreranking (IR) and its initializer (MS) on the training sentences in phase 1 (?
15 words).vised clustering method to tag words.
Although theirapproach can distinguish polysemes (e.g., ?cool?
in?to cool the selling panic?
and in ?it is cool?
), it is notable to make use of word meaning similarities (e.g.,the meaning of ?dog?
is closer to ?animal?
than to?table?).
Naseem and Barzilay (2011)?s system usessemantic cues from an out-of-domain annotated cor-pus, thus is not fully unsupervised.We have showed that IR with a generativereranker is an approximation of hard-EM (see Equa-tion 4).
Our system is thus related to the works ofSpitkovsky et al (2013) and Tu and Honavar (2012).However, what we have proposed is more thanthat: IR is a general framework that we can havemore than one option for choosing k-best parser andreranker.
For instance, we can make use of a gener-ative k-best parser and a discriminative reranker thatare used for supervised parsing.
Our future work isto explore this.The experimental results reveal that starting pointis very important to the iterated reranking with the?-order generative model.
On the one hand, thatis a disadvantage compared to the other systems,which use uninformed or harmonic initialisers.
Buton the other hand, that is an innovation as our ap-proach is capable of making use of existing systems.The results shown in Figure 4 suggest that if phase 0uses a better parser which uses less expressive modeland/or less external knowledge than our model, suchas the one proposed by Spitkovsky et al (2013), wecan expect even a higher performance.
The othersystems, except Blunsom and Cohn (2010), how-ever, might not benefit from using good existingparsers as initializers because their models are notsignificantly more expressive than others8.8 ConclusionWe have proposed a new framework, iterated rerank-ing (IR), which trains supervised parsers without theneed of manually annotated data by using a unsu-pervised parser as an initialiser.
Our system, em-ploying Marecek and Straka (2013)?s unsupervisedparser as the initialiser, the k-best MSTParser, andLe and Zuidema (2014)?s reranker, achieved 1.8%DDA higher than the SOTA parser of Spitkovsky etal.
(2013) on the WSJ corpus.
Moreover, we alsoshowed that unsupervised parsing benefits from lex-ical semantics through using word-embeddings.Our future work is to exploit other existing super-vised parsers that fit our framework.
Besides, takinginto account the fast development of the word em-bedding research (Mikolov et al, 2013; Penningtonet al, 2014), we will try different word embeddings.AcknowledgmentsWe thank Remko Scha and three anonymous re-viewers for helpful comments.
Le thanks Milos?Stanojevic?
for helpful discussion.8In an experiment, we used the Marecek and Straka (2013)?sparser as an initializer for the Gillenwater et al (2011)?s parser.As we expected, the latter was not able to make use of this.659ReferencesMohit Bansal, Kevin Gimpel, and Karen Livescu.
2014.Tailoring continuous word representations for depen-dency parsing.
In Proceedings of the Annual Meetingof the Association for Computational Linguistics.Yonatan Bisk and Julia Hockenmaier.
2012.
Simple ro-bust grammar induction with combinatory categorialgrammars.
In AAAI.Avrim Blum and Tom M. Mitchell.
1998.
Combininglabeled and unlabeled sata with co-training.
In COLT,pages 92?100.Phil Blunsom and Trevor Cohn.
2010.
Unsupervised in-duction of tree substitution grammars for dependencyparsing.
In Proceedings of the 2010 Conference onEmpirical Methods in Natural Language Processing,pages 1204?1213.
Association for Computational Lin-guistics.Eugene Charniak and Mark Johnson.
2005.
Coarse-to-fine n-best parsing and maxent discriminative rerank-ing.
In ACL.Danqi Chen and Christopher D Manning.
2014.
Afast and accurate dependency parser using neural net-works.
In Empirical Methods in Natural LanguageProcessing (EMNLP).Michael Collins.
2000.
Discriminative reranking for nat-ural language parsing.
In ICML, pages 175?182.Michael Collins.
2003a.
Head-driven statistical modelsfor natural language parsing.
Computational linguis-tics, 29(4):589?637.Michael Collins.
2003b.
Head-driven statistical modelsfor natural language parsing.
Computational Linguis-tics, 29(4):589?637.Ronan Collobert, Jason Weston, L?eon Bottou, MichaelKarlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011.Natural language processing (almost) from scratch.The Journal of Machine Learning Research, 12:2493?2537.George Cybenko.
1989.
Approximation by superposi-tions of a sigmoidal function.
Mathematics of control,signals and systems, 2(4):303?314.Jason M Eisner.
1996.
Three new probabilistic mod-els for dependency parsing: An exploration.
In Pro-ceedings of the 16th conference on Computationallinguistics-Volume 1, pages 340?345.
Association forComputational Linguistics.Jeffrey L Elman.
1993.
Learning and development inneural networks: The importance of starting small.Cognition, 48(1):71?99.Jennifer Gillenwater, Kuzman Ganchev, Jo?ao Grac?a, Fer-nando Pereira, and Ben Taskar.
2011.
Posterior spar-sity in unsupervised dependency parsing.
The Journalof Machine Learning Research, 12:455?490.Katsuhiko Hayashi, Shuhei Kondo, and Yuji Matsumoto.2013.
Efficient stacked dependency parsing by forestreranking.
Transactions of the Association for Com-putational Linguistics, 1(1):139?150.Dan Klein and Christopher D. Manning.
2004.
Corpus-based induction of syntactic structure: Models of de-pendency and constituency.
In ACL, pages 478?485.Terry Koo and Michael Collins.
2010.
Efficient third-order dependency parsers.
In Proceedings of the 48thAnnual Meeting of the Association for ComputationalLinguistics, pages 1?11.
Association for Computa-tional Linguistics.Phong Le and Willem Zuidema.
2014.
The inside-outside recursive neural network model for depen-dency parsing.
In Proceedings of the 2014 Conferenceon Empirical Methods in Natural Language Process-ing.
Association for Computational Linguistics.David Marecek and Milan Straka.
2013.
Stop-probability estimates computed on a large corpus im-prove unsupervised dependency parsing.
In ACL (1),pages 281?290.Andr?e FT Martins, Miguel B Almeida, and Noah ASmith.
2013.
Turning on the turbo: Fast third-ordernon-projective turbo parsers.
In Proc.
of ACL.David McClosky, Eugene Charniak, and Mark Johnson.2006.
Effective self-training for parsing.
In Proceed-ings of the main conference on human language tech-nology conference of the North American Chapter ofthe Association of Computational Linguistics, pages152?159.
Association for Computational Linguistics.Ryan T. McDonald and Fernando C. N. Pereira.
2006.Online learning of approximate dependency parsingalgorithms.
In EACL.Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-rado, and Jeff Dean.
2013.
Distributed representationsof words and phrases and their compositionality.
InAdvances in Neural Information Processing Systems,pages 3111?3119.Tahira Naseem and Regina Barzilay.
2011.
Using se-mantic cues to learn syntax.
In AAAI.Tahira Naseem.
2014.
Linguistically Motivated Mod-els for Lightly-Supervised Dependency Parsing.
Ph.D.thesis, Massachusetts Institute of Technology.Jeffrey Pennington, Richard Socher, and Christopher DManning.
2014.
Glove: Global vectors for word rep-resentation.
Proceedings of the Empiricial Methods inNatural Language Processing (EMNLP 2014), 12.Federico Sangati, Willem Zuidema, and Rens Bod.
2009.A generative re-ranking model for dependency pars-ing.
In Proceedings of the 11th International Confer-ence on Parsing Technologies, pages 238?241.
Asso-ciation for Computational Linguistics.660Richard Socher, Christopher D. Manning, and Andrew Y.Ng.
2010.
Learning continuous phrase representa-tions and syntactic parsing with recursive neural net-works.
In Proceedings of the NIPS-2010 Deep Learn-ing and Unsupervised Feature Learning Workshop.Valentin I. Spitkovsky, Hiyan Alshawi, and Daniel Ju-rafsky.
2010a.
From Baby Steps to Leapfrog: How?Less is More?
in unsupervised dependency parsing.In Proc.
of NAACL-HLT.Valentin I. Spitkovsky, Hiyan Alshawi, Daniel Jurafsky,and Christopher D. Manning.
2010b.
Viterbi trainingimproves unsupervised dependency parsing.
In Pro-ceedings of the Fourteenth Conference on Computa-tional Natural Language Learning (CoNLL-2010).Valentin I. Spitkovsky, Hiyan Alshawi, and Daniel Ju-rafsky.
2012.
Bootstrapping dependency grammar in-ducers from incomplete sentence fragments via austeremodels.
In Proceedings of the 11th International Con-ference on Grammatical Inference.Valentin I. Spitkovsky, Hiyan Alshawi, and Daniel Ju-rafsky.
2013.
Breaking out of local optima withcount transforms and model recombination: A studyin grammar induction.
In EMNLP, pages 1983?1995.Kewei Tu and Vasant Honavar.
2012.
Unambiguity reg-ularization for unsupervised learning of probabilisticgrammars.
In Proceedings of the 2012 Joint Confer-ence on Empirical Methods in Natural Language Pro-cessing and Computational Natural Language Learn-ing, pages 1324?1334.
Association for ComputationalLinguistics.661
