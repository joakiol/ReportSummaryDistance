Tree Ad jo in ing  and  Head Wrapp ing~K.
Vijay-Shanker David J. Weir Aravind K. JoshiDepartment of Computer and Information ScienceUniversity of PennsylvaniaPhiladelphia, PA 19104AbstractIn this paper we discuss the formal relationship betweenthe classes of languages generated by Tree Adjoining Gram-mars and Head Grammars.
In particular, we show that HeadLanguages are included in Tree Adjoining Languages andthat Tree Adjoining Grammars are equivalent o a modifi-cation of Head Grammars called Modified Head Grammars.The inclusion of MHL in HL, and thus the equivalence ofHG's and TAG's, in the most general case remains to beestablished.1.
In t roduct ionThis paper discusses the relationstfip between Tree Adjoin-ing Grammars (TAG's) and :Head Grammars (HG's).
TAG'sand HG's, introduced to capture certain structural prop-erties of natural languages, were developed independently.TAG's deal with a set of elementary trees which are com-posed by means of an operation called ad jo in ing.
HG's arelike Context-free Grammars, except for the fact that besidesconcatenation of strings, s t r ing  wrapp ing  operations arepermitted.
TAG's were first introduced in 1975 by Joshi,Levy and Wakahashi \[3\].
Joshi \[2\] investigated some formaland linguistic properties of TAG's with local constraints.The formulation of local constraints was then modified andformal properties were investigated by Vijay-Shanker andJoshi \[9\].
The linguistic properties were studied in detailby Kroeh and Joshi \[5\].
HG's were first introduced by Pol-lard \[6\] in 1983 and their formal properties were investigatedby Roach \[7\].
It was observed that the two systems eemedto possess imilar generative power and since they also ap-pear to have the same closure properties \[7,9\] as well assimilar parsing algorithn~ \[6,9\] a significant amount of in-direct evidence existed to suggest hat they were formallyequivalent.
In the present paper, we will attempt o providea characterization f the formal relationship between HG'sand TAG's.
In \[10\] we consider various linguistic aspects ofthe relationship: in particular what might be referred to asthe strong equivalence of the two formalisms.Vijay-Shanker and Joshi \[9\] provided a brief descriptionof the intuition behind the inclusion of Tree Adjoining Lan-gages (TAL) in the class of languages generated by a variantof HG's called Modified Head Grammars (MHG's).
In thepresent paper, we give a proof of this result as well as aproof for the inclusion of Modified Head Languages (MHL)in TAL: hence we show that MHG's and TAG's are equiva-lent.
This result is presented in section 3.
In section 2, wediscuss the relationship between MHG's and HG's.J" This work was partially supported by NSF grants MCS-82-19116-CER, MCS-82-07294 and DC1~-84-10413.
We aregrateful bo Tony Kroch and Carl Pollard for valuable discus~sions.1.1.
'.
?ree Adjo in ing  GrammarsDef in i t ion  1.
A TAG is a 54uple G -= (VN,V .
r ,S , I ,A )where Vlv and V T are finite sets of nonterminals and ter-minals respectively, S is a distinguished nonterminal, I isa finite set of initial trees and A is a finite set of auxiliarytrees.Initial trees and auxiliary trees have the following form:/ \  ~ V. w~wz ~Vx "{ x~ V~f igure  1 .
lExcept for one node, which is called the foot node,  allthe nodes in the frontier of an auxiliary tree are labelled byterminal symbols.
The foot node is labelled by the samenonterminal syrnbol as the root.
All initial aud auxilia:3rtrees, referred to as elementa:-y trees, have a height of atleast one.We now define the ad jo in ing  operation.
Let ~ be somenode labelled X in a tree % Let fl be an auxiliary tree withroot and foot labelled by X.
The tree obtained by adjoilfingfl at r/ is given in tigurc 1.2.LL V vu 'v,/f ""/Zf igure  1.;~VThe subtree under ~ is excised from % the auxiliary tree \[~is inserted in its place and the excised subtree is inserted atthe foot of/~.As defined above it is possible to adjoin any auxiliarytree at a node as long as the label of the node was the sameas that of the root and the foot of the auxiliary tree.
How-.ever, in general, adjoining will be constrained ss follows.Associated with each node is a select ive ad jo in ing  (SA)constraint specifying that subset of the auxiliary tree whichcan be adjoined at this node.
Trees can only be included inthe SA constraint associated with a particular node if theirroot and foot are labelled with the same nonterminal thatlabels the node .There are two special cases: (a) the subsetspecified by SA is the entire set of auxiliary trees~ in this202case the entire set need not be explicitly listed; (b) the sub-set specified is empty i.e., no adjoining is possible.
We callthis the nul l  ad jo in ing  (NA) constraint.
A node may beassociated with a a so-called ob l igatory  ad jo in ing  (OA)constraint which can be used to ensure that an adjunctionis obligatorily performed at a node.Example  1.1 We now present an example TAG G, whichillustrates the notation used to specify the constraints as-sociated with a node.
There is one initial tree a and twoauxiliary trees fll and f12:0(:  S o~ : A"f igure 1.3Having introduced SA and OA constraints, we must ex-tend the definition of the adjunction operation.
Suppose weadjoin an auxiliary tree fl at a node y of a tree ~/producingthe tree ~'.
For those nodes in ~' that do not correspondto nodes of fl, the constraints remain the same as those in% The remaining nodes in "7 ~ have the same constraints asthose for the corresponding nodes of ft. For example, con-sider a sample derivations in the grammar G as given belowin figure 1.4.
We use an * to indicate the node at whichadjunetion is performed.I hIf igure  1.4We will now present an alternative (yet equivalent) def-inition of the adjoining operation.
So far, our definitionallowed us to adjoin only with auxiliary trees, and allowedadjunetion only into sentential trees.
This can be generalizedto allow adjunctions of any tree derived from an auxiliarytree into any derived ti'ee.
Consider the derivation givenin figure 1.4.
Given this generalization of adjunetion, wecan also derive the same tree q2 by composing trees in thefollowing sequence.The derived auxiliary tree "-/~ can be obtained by adjoiningf12 in fl~.
~/~ can then be adjoined in a to give q~.
Noticethat trees derived from an auxiliary tree fl, will always havethe property that their root and foot are labelled with thesame nonterminal as those of ft.
Viewing a derivation inthis manner considerably simplifies several proofs of formalproperties of 'rAG's \[9\]./ \O~ S~5~ Sr~f igure  1.5We use the notation P(3) to denote the set of trees derivedfrom the elementary tree 3 using 0 or more adjunctions.The t ree  set T(G) of a TAG C is T(G) = U,~I  P(a).The s t r ing  language L(G) generated by a TAG G is givenby L(G) = { w I " is the frontier of some "y in T(G) }Now we can see that tile language Lt, generated by theexample grammar G, is L1 =: { a'~gbnfcnh \]n > 0 }It is useful to further generalize the notion of a derived treeto include trees derived from subSrees of elementary trees.
Ifis a node in some elementary tree, then P(~) representsthe set of trees derived from the subtree rooted at y. Nodesare represented using an extension of the tree addressingscheme of Gorn \[11.
Each node in an elementary tree isgiven a unique name in the following manner: the pMr (% e}denotes the root of ~,; if (% i} is a node in % then (3, i .
j )represents the jth daughter of this node.1.2.
t lead  GrammarsBefore giving the formal definition of I:lead Grammars,the notion of a beaded s t r ing  will be described.
A headedstring is a string of symbols containing one distinguishedsymbol referred to as the head of tile string.
Formally, thiscan be represented as a pair consisting of a string w and aninteger that indicates the position of the \]lead in the string.In this paper, we use one of two notations to denote thisstring: when we wish to explicitly mention the head we usethe representation wlSw2 where wlaw2 =- w; alternatively,we can simply denote the headed string by ~'.
This allowsus to denote the headed empty string as ~.Def in i t ion  2.
A Itead Grammar, G, is given by a 4-tupk;(VN,VT, S,P) .
Productions in P are of the form: A -~f (a l , .
.
.
, a~)  or A -~ al where A C VN, a~ either belongsto Vlv or is a headed string.f C \[.J~ 1{ LCi, LLi, LRi,  RCi, RLi ,  RR i  }We now define the operations LCi, LLi, and LRi  for i C{1, 2}.
Definitions of the other operations can be found in \[6\]and are not given here, since Roach \[7\] has shown that thereis a normal form for Head Grammars which only uses theseoperations.LC\](Ul~U2,V) = ulafu2v, LC2(~,vlh-~v2) :: uvla2v2,LLI(ulSTlu2,~) = ul5~lvu~., LL2(ul~u2,V-) = ulal~'u2,Lm(u ,~;~,v )  - ~.~u~,  LR2(u~.~,v )  = ~lVa~u2203Both Pollard \[6\] and Roach \[7\] define these operations aspartial functions.
Pollard's definition of headed strings in-cludes the headed empty string (A).
However, mathemat-ically, A does not have the same status as other headedstrings: for example, LCI (A,~)  is undefined.
In general,the term f i (~-T, .
.
.
,~~,.
.
.
,~--~) is undefined when w-T = A.This nonuniformity has led to difficulties in proving certainformal results about Head Grammars \[7\], and has causedproblems in showing the equivalence of MHG's and HG's(see section 2).The language generated by a HG G is defined as follows:L(G) ={wlS~:~}Example  1.2 We now present a sample Head Grammar forthe language L1 = { a"gb'~fcr*h J n > 0 }S ~ LL2(S, , f ) ,  S ---+ LL2(S2,-f),S~ -.~ LC2(-~, Sa), $2 --+ "~h,S 3 ---+ Ln2(S~,bc), Sa -~ nL2(S2,bc)1.3.
Mod i f ied  Head GrammarsWe find it convenient to consider a formalism that closelyresembles HG's: referred to as Modified Head Grammars(MHG's).
Instead of headed strings, MHG's have spl itstr ings.
A split string has a distinguished position betweentwo strings in V~, about which it may be split.
We willdenote a split string as Wl~W2 where wlw2 C V T. Noticethat we can represent the split empty string as ATA , thoughthis will be denoted A whenever the context makes it obvi-ous that we are referring to a split string.
In MHG's, thereare 3 operations on split strings: W, C1, and C2, defined asfollows:W(wl~w2, ul~u2) = wlu,Tu2w2C1(WllW2, ul~u2) = WllW2ulu2C2(WllW2,Ul~U2) = wlw2ul~u2The operations C1 and C2 correspond to the operationsLC1 and LC2 in ttG's.
The operation W has been definedsuch that the split point of its second argument becomesthe split point of the string resulting from application of theoperation (like the HG operations LL2 and Lit2).Since the split point is not a symbol but a positionbetween strings, separate operations corresponding to LL2and LR2 are not needed.
In addition, unlike HG's, whichdistinguish the two wrapping operations LL1 and LL2, Wsuffices as a substitute for both of these operations.
SupposeY ~ WlTW2 and Z ~ u~yu2 and we want X to deriveW~lU~U2W 2.
This can be achieved with the following twoproductions: Z f~ ~ e l (A ,  Z) and X -+ W(Y, Z1~).Example  1.3 We now give a MHG generating L~.,5' --~ W(S,, I t ) ,  S --~ W(S2, f%),S1 "--+ C2(a~,Sa), S2 ~ g~h,s~ -~ w(s~,Nd, ss -, w(s~,NdWe will defer the discussion of both the formal and linguisticrelationship between HG~s and MHG's until section 2.
Itis worth noting at this point that the definition of MHG'sgiven here coincides with the definition of HG's given in204Rounds \[8\].
As we shall see in section 2, these formalismsare very closely related.1.4.
Tree Ad junet ion  and  Wrapp ingBefore showing the formal equivalence of MHG's and TAG's,it is instructive to consider the relationship between thewrapping operation W of MHG's and the adjoining oper-ation of TAG's.
Suppose that we have the production p -X --~ W(Y, Z) in a MHG G, and that we have two deriva-tions from the nonterminals Y and Z deriving the headedstrings wltw2 and VlTV2 respectively.
Given the productionp, we can derive the split string wlvllv2w2 from X.Suppose there is a derived auxiliary tree "7 correspond?ing to the above derivation of wl~w2, from Y where thefoot node appears at the split point, as shown in figure 1.6below.
Also assume that there is a node ~/dominating a sub-tree that corresponds to a derivation of vl~v2 from Z where,as before~ we assume that the foot node appears at the splitpoint.
Consider the tree resulting from the adjunction of *7at the node ~?, also shown in figure 1.6.
The resulting treecan be thought of as corresponding to the derivation of thesplit string wlvl)v2w2 from X.w, t ~va~ootf igure  1.6This example illustrates the basic intuition behind the con-structions involved in the following proofs showing the equi-valence of MHG's and TAG's.2.
Head Grammars  and  Mod i f ied  Head GrammarsIn this section, we shall discuss the relationship betweenMHG's and HG's.
First we present he outline of a con-struction showing that for evelT HG G there is an equivalentMHG G'.
We then briefly discuss the linguistic relationshipbetween MHG's and HG%.Suppose X ~ wl-hw2.
This headed string can be splitin two ways: into the substrings wt and hw2; or wlh and w2.This depends on whether X is used in a left or right wrappingoperation.
Since in MHG's we can only split a string in oneplace, we use two nonterminals, X ~ and X r deriving wth;w2and Wl~hW 2respectively.
Thus, for example, the productionZ ---+ W(X~,Y)  can be used in place of Z ~ LL2(X,Y) .
Afurther complication arises when a headed string is split firstto the right of its head and then the resulting string is splitto the left of the same head.
The problem is resolved byintroducing nonterminals X $h, that derive split strings of theform wl~w2 whenever X derives wl-hw2 in the HG.
We canreintroduce the missing head with the following productions:X ~ -~ W(X Th, ht) and X r ---+ W(X Th, Th)Complete details of  this proof are given in \[4\].We are unable to prove the inclusion of MHL's in HL's.The problems faced when attempting to find such a proofare a result of the operations in HG's not being total func-tions.
For example, CI(A,W) is defined in MItG's, whereasLC I (~,~)  is undefined in the HG's framework.
We have notfound any way of getting around this technical problem in asystematic manner.
All TAG's considered by the authors ofar have an equivalent HG.
We feel that the problem of theempty headed string in the HG formalism does not resultfrom an important difference between the formalisms.In the following discussion, we propose that MHG's canbe given a linguistic interpretation if we retain the notion ofa head terminal in a split string.
The split point shouldbe viewed a~ determining the position of the head.
As faras the authors are aware, Ilead Grammars for natural lan-guages use only one kind of wrapping operation: either onlythe left wrapping operations LLi, or only the right wrap-ping operations LRi.
Thus, any headed string can be spliton only one 'fide of the head.
For example, if wl-hw2 is aheaded string, and only the left wrapping operations wereused, then the headed string can only be split as wlh andw~.. For any HG using only left wrapping operations thereexists an equivalent MHG such that split strings will havetheir split points in~nediately to the right of the actual head.However, obviously not every MHG (:an be given a linguisticinterpretation i this way.3.
Equ iva lence  of Mt tG 's  and  TAG,'sWe will now straw that the class MIlL is equal to the classTAL.
The complete proofs for the results presented here aregiven in \[4\].3.1.. Inc lus ion  of  TAL in M I l LBased on the earlier observation concerning the similaritybetween the wrapping and adjoining operations, we shallnow present a scheme for transforming a given TAG G --(Vt?, VT, S, I, A) to an equivalent MHG G' - (V\]~, VT, S, P).In this section, we have generalized the concatentation op-erations of MHG's to be of the form Cj  for j _> 1.
It isobvious that these operations can always be simulated usingjust C1 and C2.We shall first describe the algorithm convert informally.If r\] is a node of some elementary tree '7, applying convertto ~1 returns a sequence of productions in the MHG formal-ism capturing the structure of the subtree of q rooted at~.
The wrapping operation is used to simulate the effect ofadjunction; the concatenation operations Ci eoncatentatethe strings derivable from the daughters of a node.
Thechoice of i depends on which child is the ancestor of the footnode.
The exact structure'of a tree can be captured by usingnonterminals that are named by the addresses of nodes ofelementary trees rather than the nonterminMs labelling timnodes.The main idea of our scheme is as follows.
Let (fl, i) bethe address of a node in an auxiliary tree fl, and '7 belongsto P((fl, i)) with a frontier WlXtO 2, We have a nonterminalcorresponding to this node (denoted by \[fl, i\]) which derivesthe split string watw~..
In particular, when (fl, i) is the rootof fl (i.e., i =: e), then the nonterminal \[fl, c\] should derivethe split strings WlTW2 whenever there is a tree in P(fl)with frontier WlXW 2.
That  is, the split point appears in aposition corresponding to the foot node.Thus, the wrapping operation W can be used to simu-late the effect of adjoining in the following manner.
If ('7, i)is a node at which fl is adjoinable, we have a productioncorresponding to adjunction of fl at ('7, i).b,i\] - ,  w(\[fl,4, b,  il)where \['7, i1 derives strings derivable from the children of('7, i).
We also have the rule \['7, i\] -~ \['7, i\] for the case whenno adjunction takes place at ('7, i).
Since \['7, i\] is supposed toderive strings derivable by the concatenation f the frontiersof subtrees dominated by the children of ('7, i), we have theproduction,\[% i\]" -* Cj ( \ [%i .
1\] .
.
.
.
, \[%i .
j\] .
.
.
.
.
\['7, i .
k\])where @, i .
1>,.. .
,  ('7, i .
j> , .
.
.
,  ('7, i .
k> correspond to theh children of ('7,i) and where the jth child is the ancestorof the foot node.
The operation Cj  is used so that the splitpoint appears in the same position as the foot node.
Byconvention, we let j be I when (%i) is not the ancestor ofthe foot node.We are now in a position to define the conversion pro-cess.
The algorithm is as fi)llows:for each initial tree a, let S -> \[a,e\] G P.for each elementary tree % call convert((% e))where the procedure convert is as defined below.define convert (('7, i));case 1: (%i) is a leaf nodeif ('7, i) has label a Ci VT U {A} thens tep 1: add \[%i\] --+ a r to Pelse \['7, i\] is the foot nodestep 2: add \[%i\] -+ W(\[fl, el,A)for each fl in SA constraint of ('7, i)s tep 3: add \['7, i\] -+if ('7, i) does not have an OA constraint;case 2: ('7, i) is an internal node and has k childrenstep 4: add \['7, i\] -~ W(\[fl, e\], \['7, i\])for each/3 in SA constraint of ('7, i)if ('7, i} does not have OA constraint thenstep 5: add \[3,i\] - ,  \[%i\]if ('7, i) is ancestor of foot node thenstep 6: add \['7, i\] - ,  Cj(\['7, i .
1\] .
.
.
.
.
\[V,i.
k\])where j~h child dominates foot node;if ('7, i) is not ancestor of foot node thenstep 7: add \ [ '7, i \ [ - ,  C1(\['7, i .
1\],.. .
,\['7, i '  kl)for 1 < j  < k do eonvert((%i.
j ) ) .We prove the inclusion of L(G) in L(G'), by inductionoll the height of the trees derived from all subtrees of ele-mentary trees, where the inductive hypothesis tates:For all elementary trees "7, and addresses i in q, if there is atree "7' in P(('7, i}) of height less than k, and the frontier of"71= WlXW2 or wlw2, then \['7, i \ ] - -~  wl~w2.It will be easy to simw the inclusion of L(G) in L(G') byinduction, considering steps 4, 5, 6 and 7.
The base casescorrespond to steps 1, 2 and 3.205We show the inclusion in the other direction by induc-tion on the length of derivation of split strings in G'.
Theinduction hypothesis is given by:ir \[-~,i\] _~ ~,~Tw.,.
in k steps, then there is a "~' c p((~,i))such that the frontier ofq '  is wlXw2 or wlw2, dependingon whether the foot node of % labelled by X if it exists, isa descendant of <'~,i> or not.3.2.
Inc lus ion  of MHL in TALWhen we convert a TAG into a MHG, each elemen-tary tree generates a set of productions.
The sets generatedby any two distinct elementary trees are disjoint and, fur-thermore, have a constrained form encoding the hierarchicalstructure of the tree.
The task of converting a MHG to aTAG cannot simply involve the inversion of this construc-tion since it is not in general possible to find groupings ofproductions in a MHG that have the required structure.The approach used to convert MHG's to TAG's is basedon satisfying the following requirement: for each derivationin the MHG there must be a derived tree in the TAG forthe same string, in which the foot is positioned at the splitpoint: i.e., X ~ wHw2 in MHG if and only if there is aderived auxiliary tree "~ having no OA constraints, with rootlabelled X and frontier wlXw2,Suppose we had derived trees corresponding to deriva-tions for B and C (as shown in the center of figure 3.1) thatsatisfied the above requirement.We can capture the effect of each MHG production di-rectly by associating exactly one elementary tree with eachproduction.
For example, figure 3.1 illustrates trees associ-ated with the productions A --~ CI(B, C) (on the left) andA -~ W(B,C)  (on the right).
We position the foot nodein the elementary trees to ensure that the split point andfoot node appear at the same position.
When the tree cor-responding to wrapping is used the string derived from B iswrapped around the string derived from C. The foot of theresulting tree will appear immediately under the foot of thederived tree for C.C oaIf igure  3.1The TAG that we produce could be viewed as simulat-ing rewriting of nonterminMs.
Each rewriting correspondsto one use of the adjoining operation.
The NA constraints atthe root and the foot node of each auxiliary tree ensure thateach occurence of a nontermin~l is rewritten only once.
TheOA constraints are used to ensure that every nonterminalintroduced is rewritten.We now present the complete construction.
Withoutloss of generality, we will assume a normal form that usesproductions of the following form:206A-~ f (B,C)  or A -~ ?a or A -~a$where A,B ,C  e VN, a C VT tO {A} and f e {CI,C2, W}.The conversion proceeds as follows:1.
I fA -~ Ta 6PorA- -+ a t EPthen inc ludef l l  orfl2in A respectively.#': A ~ ~,: A # /\ / \A~ m cL k ,~'2.
If A -~ C I (B ,include fla or f14 in A respectively.#~: A # /3,: AZ& oA C 0ai i I IA# A ,~ A#3.
If A -~ W(B,C)  ~ P then include fls.f l~ :  A #J5 oaJC oAiA#The set I of" initial trees consists of the single tree a:~X: t5 0,IEAWe prove that L(G) C_ L(G') by induction on the lengthof the MHG derivation.
We show that if X =% wlTw= thenthere is a derived auxiliary tree having no OA constraints,with root labelled X and frontier wlXw2.We prove that L(G') C L(G) by induction on the heightof the "rAG derivation tree.
We show that if q E P (fl), has noOA constraints, and has frontier wlXw2 then X =% wlrw2.While straightforward, the proof given above does notcapture the linguistic motivation underlying TAG's.
Theauxiliary trees directly reflect the use of the concatenationand the wrapping operations.
It is also interesting to notethat a consequence of the equivalence of MHG's and TAG'sand the construction used in proving the inclusion of MHLin TAL is that we have the following normal form for TAG's.For any TAG there is an equivalent TAG with exactly oneinitial tree and auxiliary trees which are of five possible formsshown above.C) E P or A ---+ C2(B,C) 6 P then4.
Conc lus ionIn this paper we have shown the equivalence of TAL andMHL.
Since we have also established the inclusion of HL inMHL we have shown that HLs are included in TALs.
Theinclusion of MHL in HL, and thus the equivalence of HG'sand TAG's, in the most general case remains to be estab-lished We briefly discuss the relationship between MHG'sand HG's and argue that it is close, both linguistically andformally.
Figure 4.1 provides a summary of these results.I'3 H L. %1"f igure 4.\]1.Referenceu\[1\] Gorn, S. 1962 Processors for infinite Codes of theShannon..Fano type, Proc.
of Syrup.
Math.
Theory ofAutomata.\[2\] doshi, A.K.
1983 How Much Contcxl.--Sensltivity isNecessary for Characterizing Structural Dcscriptkms -Tree Adjoining Grammars, in Natural Language; Pro-cessing --- Theoretical Computational nd PsychologicalPerspectives, eds.
D. Dowry, L. Karttuncn, A. Zwicky,Cambridge University Press, Ncw York.\[3\] Jostfi, A~K.
\],cvy, L. and Takahashi, M. 1975 TrecAdjunct Grammars.
Jour.
Comp.
\[?ys.
Sci.
10(I) : :136-1.63.\[4\] Joshi, A,K., Vijay,-Sllanker, K. and Weir, \])..\].
1986Tree Adjoining Grammars and.
lIead Grammars, Tech.Rep.~ MS-CIS-86-\], \])ept.
of CIS, Univ.
of Pennsylw~.-nia.\[51 Kroch, A. and ,Ioshi, A.K.
1985 The Linguistic R.cl--evance o1!
Tree Adjoining Grammars, Tcch.
ILep., MS-.CIS-85~18, Dept.
of CIS, Univ.
of Pennsylvania.\[6\] Pollard,C.
1984 tIead Grammars.
Ph.\]).
dissertation,Stand\]oral Univ., California.\[71 lLoaeh, g.  1984 \])brmal Properties of ilead Grammars,Manuscript, S1;andfl)rd Uaiversity.
To appear in Math-ematies of Language, ed.
A. Manaster-l~amer, Amster-dam: John Benjamins.\[8\] Rounds, W.C. 1985 LFP: A Logic for \],inguistie \])e-seription:~ and an Analysis of its Complexity, Unpub-lished Manuscript, Univ.
of Mich., Ann Arbor, Sept1985.\[9\] Vijay-Shanker, K. and Joshi, A.K.
11985 Some Compu..rational Properties of Tree Adjoining Grammars.
Proc.of 23rd Meeting of Assoc.
Comp.
Ling., 82 93.\[1.0\] Weir, D.J., Vijay~Shanker, K. and Joshi, A.K.
1986The Relationship BeLween Tree Adjoining Grammarsand Head Grammars, Proc.
of 24th Meeting of Assoc.Comp.
Ling.207
