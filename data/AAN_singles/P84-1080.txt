~%D-WAY FINITE ~ %  AND D~a-I~NDENCY GRAMMAR:A PARSING METHOD ~-OR INFLECTIONAL FREE WORD ORDER LAN(~I%GES IEsa Nelimarkka, Harri J~ppinen and Aarno LehtolaHelsinki University of TechnologyHelsinki, FinlandARSTRACTThis paper presents a parser of aninflectional free word order language, namelyFinnish.
Two-way finite automata are used tospecify a functional dependency grammar and toactually parse Finnish sentences.
Each automatongives a functional description of a dependencystructure within a constituent.
Dynamic localcontrol of the parser is realized by augmenting theautomata with simple operations to make theautomata, associated with the words of an inputsentence, activate one another.I ~ O NThis Daper introduces a computational modelfor the description and analysis of an inflectionalfree word order language, namely Finnish.
We arguethat such a language can be conveniently describedin the framework of a functional dependency grammarwhich uses formally defined syntactic functions tospecify dependency structures and deep caserelations to introduce semantics into s%mtax.
Weshow how such a functional grammar can be compactlyand efficiently modelled with finite two-wayautomata which recognize the dependants of a wordin various syntactic functions on its both sidesand build corresponding dependency structures.The automata along with formal descriptions ofthe functions define the grammar.
The functionalstructure specifications are augmented with simplecontrol instructions so that the automataassociated with the words of an input sentenceactually parse the sentence.
This gives a strategyof local decisions resulting in a strongly datadriven left-to-right and bottom-up parse.A parser based on this model is beingimplemented as a component of a Finnish naturallanguage data base interface where it follows aseparate morphological analyzer.
Hence, throughoutthe paper we assume that all relevant morphologicaland lexical information has already been extractedand is computationally available for the parser.I This research is s,~pported by SITRA (FinnishNational Fund for Research and Development).Although we focus on Finnish we feel that themodel and its specification formalism might beapplicable to other inflectional free word orderlanguages as well.II LINGUISTIC MOIT~ATI ONThere are certain features of Finnish whichsuggest us to prefer dependency grammar to purephrase structure grammars as a linguisticfoundation of our model.Firstly, Finnish is a "free word order"language in the sense that the order of the mainconstituents of a sentence is relatively free.Variations in word order configurations conveythematical and discursional information.
Hence, theparser must be ready to meet sentences with variantword orders.
A computational model shouldacknowledge this characteristic and copeefficiently with it.
This demands a structurewithin which word order variations can beconveniently described.
An important case in pointis to avoid structural discontinuities and holescaused by transformations.We argue that a functional depend s~cy-constituency structure induced by a dependencygrammar meets the requirements.
This structureconsists of part-of-whole relations of constituentsand labelled binary dependency relations betweenthe regent and its dependants within a constituent.The labels are pairs which express syntacticfunctions and their semantic interpretations.For example, the sentence "Nuorena poikaheitti kiekkoa" ("As young, the boy used to throwthe discus") has the structureheittiadver b ia l~ub j~ t ~ .
~  objectNuorena poika kiekkoaor, equivalently, the linearized structure( (Nuorena)advl (poika) ~ubj he~tti (kiekkoalob j I,TIW~ AGF/~ N~ L~;J,389ar~@, w!th \ [ " .
-~ ich ..:,'),~u~ i \[:dent, the ,,x.:,,rd without\[nflected %ocd d~)peaLs as a complex of its syntac-tic, .morphological and semantic properties.
Hence,our sentence structure is a labelled tree whosenodes are complex expressions.The advantage of the functional dependencystructures lies in the fact that many word ordervarying transformations can be described aspermutations of the head and its labellex9dependants in a constituent.
Reducing the depth ofstructures (e.g.
by having a verb and its subject,object, adverbials on the same level) we bypassmany discontinuities that would otherwise appear ina deeper structure as a result of certaintransformations.
As an example we have thepermutations((Poika) subj heitti (kiekkoa)obj (nuorena)advl)(Heittik~ (poika) subj (nuorena) advl (kiekkoa) obj)and((Kiekkoako)obj (poika) subj heitti (nuorena) advl).
("The bov used to threw the discus when he wasyoung", "Did the boy use to throw...?
", "Was itdiscus that the boy used to throw...
?",respectively.
)The second argunent for our choices is thewell acknowledged prominent role of a finite verbin regard to the form and meaning of a sentence.The meaning of a verb includes, for example,knowledge of its deep cases, and the choice of aparticular verb to express this meaning determinesto a great extent what deep cases are present onthe surface level and in what functions.
Moreover,due to the relatively free word order of Finnish,the main means of indicating the function of a wordin a sentence is the use of surface case suffixes,and very often the actual surface case depends notonly on the intended function or role but on theverb as Well.Finally, we wish to describe the sentenceanalysis as a series of local decisions of thefollowing kind.
Suppose we have a sequenceCI,... , Ci_l, Ci, Ci+l, ..., C n of constituents asa result of earlier steps of the analysis of aninput sentence, and asinine further that the focusof the analyzer is at the constituent C i.
In such asituation the parser has to decide whether C i is(a) a dependant of the left neighbour Ci_l,(b) the reagent of the left neiqhbour Ci_l,(CI a d~).~%gant of some f,~rtU~r,~\[n ~ Fie\]h+(a )  ":.- .~ent ~f some.
fortJ\]coming rightneighbour.~b.~erv@ that d~c.lsinng f~% and (d) refereither c~ a const\[tJe~t w~ich alceadv exists on theright side of C i or which will appear there aftersome steps of the analysis.
Further, it should benoticed that We do not want the parser to make anyhypothesis of the syntactic or semantic nature ofthe possible dependency relation in (a) and (c) atthis moment.We claim that a functional combination ofdependency grammar and case grammar can be put intoa computational form, and that the resulting modelefficiently takes advantage of the central role ofa constituent head in the actual parsing pr.ocess byletting the head find its dependants usingfunctional descriptions.
We outline in the nextsections how we have done this with formallydefined functions and 2-way automata.III FORMALLY DEFINED ~CTIC  FIYNCIXONSWe abstract the restrictions imposed on thehead and its dependant in a given subordinaterelation.
Recall that a constituent consists of theheed - a word regarded as a complex of its relevantproperties - and of the dependants - from zero to n(sub) constituents.The traditional parsing categories such as the(deep structure) subject, object, adverbial andadjectival attribute will be modelled as functionsf: ~f  ->C,where C is the set of constituents and ~)L e C"  Cis the domain of the function.
TThe domain of a function f will be definedwith a kind of Boolean expression over predicateswhich test properties of the arguments, i.e.
theregent and the potential dependant.
In the analysisthis relation is used to recognize and interpretean occurance of a <head,dependant>-pair in thegiven relation.
The actual mapping of such pairsinto C builds the structure corresponding to thisfunction.For notational and i~plementational reasons wespecify the functions with a conditional expressionformalism.
A (primitive) conditional expression iseither a truth valued predicate which testsproperties of a potential constituent head (R) andits 4ependant (D) and deletes non-matchina\[mterore~ations of an ambigu(~\]s word, or an actier.which performs one of the basic constructionoperations such as labelling (:=), attaching (:-),or deletion, and returns a truth value.Primitive expressions can be written intoseries (PI P2 .-- Pn) or in parallel (Pl;P2; ...;Pn) to yield complex expressions.
Logically, theformer corresponds roughly to an and-operation andthe latter an or-operation.
A conditional operation-> and recursion yield new complex expressionsfrom old ones.390As an exa~91e, consider the expressions'Object', 'Recobj' and 'IntObj' in Figure i.I LMI I I I  | j i l tI l i lKOt j l l l n tO i J )  - )  I I  I .
ObIKtI IC : ,  I I I I ( L  I ) l18JTlOIts ItKrA Jl i l t  ?
* l rM| J t Jv ,  " tk~in l l l ( I  ?
*lMilliil *~ntlmcJ)- )  I I |  ?
Plrt,, - )  11 ?
h)ii l l  ?
I~'  ") IJ ? "
f~mtd l i l ) l't} " t(mtlkleJ l i  " ( h i~ j  ))l,,,,,,| ( |  ?
~'I;'IPI'N k ( , , l l  ?
POll - )  T'Il i t  ?
( I km )), , l  , PH)-) ,,ll ?
IO*) -) '0 " PL',,1() ?
~:) ( I  ?
( h i sII~t IW~ ( IP 2P )1 ) ' ' ' l,,,,1 ?
lira UI 'R ?
ACt ( lindClmdPot(l~I~ ~P' ) ) ) ' ),,Ill ?
*Irlmsit,,ve '41ol|sl\])( I ?
-P~l~tence +llolisll))" )  'D " ( IMI ~ I  kC Part..)lll.ltllalll t J t | j,,,,ll ?
( JoviqVerkl l~qplVlqlll )) " )  '| I ,  I l v t r l | ) ) :?III ?
?
l im'c l~ ' t ' l ) ( |  * .
i l i l re4t iN l  * )  l i  I .
l n t r i l , , , ,Figure I.The relation 'RecObj ' approximates thesyntactic and mDrphological restrictions imposed ona verb and its nominal object in Finnish.
(Itrepresents partly the partitive-accusativeopposition of an object, and, for an accusativeobject, its nominative-genetive distribution.)
Therelation 'IntObj', on the other hand, tries tointerprete the postulated object using semanticfeatures and a subcategorization of verbs withrespect to deep case structures and theirrealizations.
The semantic restrictions imposed ont~e underlying deep cases are checked at thispoint.
'Object', after a succesful match of thesesyntactic and semantic conditions, labels thepostulated dependant (D) as 'Object' and attachesit to the postulated regent (R).IV FU~'~ONAL DESCRIPTIONS WI~ ,TflD-~AY AUT(3MA,~We introduced the formal functions to defineconditions and structures associated with syntacticdependency relations.
What is also needed is adescription of what dependants a word can have andin what order.In a free Word order language we would f~ce,for ex i le ,  a paradigm fragment of the form(subj) V (obj) (advl)(advl) (subj) V (obj)V (subj) (obj) (advl)(obj) (subj) V (advl)for functional dependency structures of a verb.
(Observe that we do not assume transformations todescribe the variants. )
We combine the descriptionsof such a paradigm int~ a m~dified two-way finiteautomaton.A 2-way finite automaton consists of a set nfstates, one of which is the initial state and someof which are final states, and of a set oftransition arcs between the states.
Each arcrecognizes a word, changes the state of theautomaton and moves the reading head either to theleft or right.We modify this standard notion to recognizeleft and right dependants of a word starting fromits immediate neighbour.
Instead of recognizingwords (or word categories) these automata recognizefunctions, i.e.
instances of abstract relationsbetween a postulated head and its eitherneighbour.
In addition to a mare recognition thetransitions build the structures determined by theobserved function, e.g.
attach the neighbour as adependant, label it in agreement with the functionand its interpretation.STATE.. ~ LE.CT((D ?
+PhriSe) - )  (Subject -)  (C I ,  WS });(Objlct - )  (C I ,  WO )) ;CAdv~bJal - )  (C S, .W |) ;(SenSubj - )  (C : ,  VS?
));+(Snti4vl -)  (C : ,  .W )) ;?
I T  , )  IC t '~  )));lID ?
-Phrast) -)  (C ; -  V?
))|TAT\[."
V?
RISHT|(D ?
*Phrase) - )  {Subject - )  (C s- VS?
));(Object - )  (C ,,.
V~ )) ;(SlmtPmbj - )  |C ,,,- ~r-~-.ntS?
));(SntOA| - )  (C s. VgmtO?
));|Mverbial - )  (C : ,  I1?
))t|SentMvl -)  (C t" VSmttt?
));?T -) ?C *, "%'Final ) |) ;led ?
-Phrise) - )  (C ,,, V?
)(JuildPhra|eOn RIGHT))STATE: WS LEFT(1| ?
"+Phra$1) - )  (Objlct -)  (C I ,  ?VSO ));(AdvlrbJ,| - )  (C I .
WS ));(SlmtMvl - )  (C : ,  VS?
});(T - )  (C t" VS?
)111((S ?
-IP*rlml) - )  (C ,," W?
1)Figure 9.Figure 2. exhibits part of a verb automatonwhich recognizes and builds, for exm~ple, partialstructures likev v V V V / / / / / / \subj , obj , advl , obj subj , advl subj .
.
.
.The states are divided into 'left' and 'right'states ho indicate the side where the dependant isto be found.
Each state indicates the formalfunctions which are available for a verb in thatparticular state.
A succesfull applicati~ of af~Jnct\[or, transfers the v6.~b \[nt~ .~nother :~t~te tc,\[~ok for f,rther d_~?endants.391Heuristic rules and look-ahead can a\]~>used, For example, the rule((RI = ', )(R2 = 'ett~ )(C = +gattr)-> (C := N?Sattr) (Buil~PhraseOn RI(RT))in the state N?
of the noun automaton anticipatesan evident forthcoming sentence attribute of, say,a cognitive noun and sets the noun to the stateN?Sattr to wait for this sentence.V PARSING WITH A SE~CE OF 2-WAY AUTCMATASo far we have shc~n how to associate a 2-wayautomaton to a word via its syntactic category.This gives a local descriotion of the grammar.
Witha few simple control instructions these localautomata are made to activate each other and,after a sequence of local decisions, actually parsean input sentence.An unfinished parse of a sentence consists ofa sequence CI,C2,.
.
.
,C n of constituents, whichmay be complete or incomplete.
Each constituent isassociated with an automaton which is in some stateand reading position.
At any time, exactly one ofthe automata is active and tries to recognize aneighbouring constituent as a dependant.Most often, only a complete constituent (onefeatured as '+phrase') qualifies as a potentialdependant.
To start the completion of an incompleteconstituent the control has to be moved to itsassociated automaton.
This is done with a kind ofpush operation (BuildPhraseOn RIGHT) whichdeactivates the current automaton and activates theneighbour next to the right (see Figure 2).
Thisdecision corresponds to a choice of type (d).
Acomplete constituent in a final state will belabelled as a '+phrase' (along with other relevantlabels such as '+-sentence', '+_nominal', '~main').Operations (FindRegOn L~T) and (FindRegOn RIGHT),which correspond to choices (a) and (c), deactivatethe current constituent (i.e.
the correspondingautomaton) and activate the leftmost or rightmostconstituent, respectively.
Observe that theautomata need not remember when and why they wereactivated.
Such simple "local control" we haveoutlined above yields a strongly data drivenbottom-up and left-to-right parsing strategy whichhas also top-down features as expectations oflacking, aependants.ATN-par sets.
(There are also other majordifferences. )
In our dependency oriented modelnon-terminal categories (S, VP, NP, AP, ... ) arenot needed, and a constituent is not postulateduntil its head is found.
This feature separates ourparser from those which build pure constituentstructures without any reference to dependencyrelations within a constituent.
In fact, each wordcollects actively its dependants to make up aconstituent where the word is the head.A further characteristic of our model is thelate postulation of syntactic functions andsemantic roles.
Constituents are built blindlywithout any predecided purpose so that thecompleted censtituents do not know why they werebuilt.
The function or semantic role of aconstituent is not postulated tmtil a neighbour isactivated to recognize its own dependants.
Thus, aconstituent just waits to be chosen into somefunction so that no registers for functions orroles are needed.VII REF~SHudson, R. : Arguments for a Non-transformationalGrammar.
The University "6f" ~ ~ ~-6 .Hudson, R.: Constituency and Dependency.Linguistics 18, 1980, 179_.198.J~pinen, H., Nelimarkka, E., Lehtola, A. andYlilammi, M.: Knowledge engineering approach tomorphological analysis.
Proc.
of the FirstConference of the European Chapter of ACL, Pisa,1983, 49-51.Lehtola, A.: Compilation and i,~lementation of2-way tree automata for the parsing of Finnish.HeLsinki University of ~chnology (forthcomingM.Sc.
the thesis).Nelimarkka, E., J~ppinen, H. and Leh~ola A.:Dependency oriented parsing of an inflectionallanguage (manuscript).VI DISCUSSIONAS we have shown, cur parser consists of acollection of finite transition networks which.~c~:,~u'~ ~:h  ~J~er.
The ~.=e of ~-wa V instead ofi-why ~ut: ~mat ~ :\] i\[~t h~.gui 5he~ o.ic parse\[ f\['om392
