Some Remarks  on the Decidabi l i ty  of the Generat ion Prob lem inLFG- and PATR-Sty le  Unif icat ion GrammarsJiirgen WedekindInstitute for Natural Language ProcessingUniversity of StuttgartAzenbergstr.
12D-70174 Stuttgart, FRGjuergen@ims.uni-stuttgart.deAbstractIn this paper, we prove the decidability ofthe generation problem for those unifica-tion grammars which are based on context-free phrase structure rule skeletons, likee.g.
LFG and PATR-II.
The result showsa perhaps unexpected asymmetry, since itis valid also for those unification grammarswhose parsing problem is undecidable, .g.grammars which do not satisfy the off-lineparsability constraint.
The general proof isachieved by showing that the space of thederivations which have to be considered inorder to decide the problem for a given in-put is always restricted to derivations whoselength is limited by some fixed upper boundwhich is determined relative to the "size" ofthe input.1 In t roduct ionUnification Grammars with a context-free skeleton,like Lexical Fhnctional Grammar (LFG) and PATR-II (cf.
e.g.
Kaplan and Bresnan 1982, Shieber etal.
1983) assign to a sentence not only a constituentstructure (c-structure), but also an additional in-guistic entity.
In the rather restricted grammars ofthe early stage this entity is identified with a specialgraph structure, commonly called feature structure.Since a string is regarded as well-formed only if a(well-formed) feature structure is assigned to it bythe grammar, two inverse decidability problems arisewhich had to be solved in order to know whether wecan formulate terminating parsing and generation al-gorithms.
If we retain the terminology of the earlystages then an adequate parsing algorithm requiresthat we can decide for a given grammar and a givenstring whether there exists a feature structure as-signed to it by the grammar (parsing problem) andan adequate generation algorithm requires that wecan decide for a given grammar and a given featurestructure whether there exists a sentence to whichthis structure is assigned by the grammar (genera-tion problem).While we already know for a long time that theparsing problem is undecidable (cf.
Kaplan and Bres-nan 1982, Johnson 1988), we want to show in this pa-per that the generation problem is decidable ven forunrestricted (not off-line parsable) unification gram-mars.
For the proof we first introduce in section 2 thetype of grammar we want to consider.
In section 3we then define the generation problem and show itsdecidability in two steps.2 P re l iminar iesThe unification grammars we want to consider con-sist of rules with a context-free skeleton and a set ofannotations associated with the constituents men-tioned in the rules.
Typical examples taken fromLFG and PATR-II are given in figure 1.
For the for-S --~ NP VP S --+ NP VP(t SUB J) ----$ j'=$ (VP AGR) = (NP AGR)NP -+ John NP -4 Uther(1" PRED) = JOHN (NP AGR NUM) = SG(NP AGR PER) ---- 3RDFigure 1Examples of rules in LFG (left) and PATR-IIformat (right).mal definition of those grammars we reconstruct theannotations as formulas of a quantifier-free sublan-guage of a classical first-order language with equalitywhose (nonlogical) symbols are given by a finite set ofunary partial function symbols and a finite set of con-stants.
For the translation of LFG and PATR-II an-notations we regard the attributes (in figure 1: SUB J,PRED, AGR, NUM, PER) 58 unary partial functionsymbols and the atomic values (in figure 1: JOHN,45SG, 3RD) as individual constants.
Furthermore, weassume for a context-free rule of the form A ---> w(w e (VN U VT)*) that the variable x0 is associatedwith A and that for each occurrence wi in w thereis a variable xi which is associated with wi.
For theformal reconstruction of LFG's we assume that eachoccurrence of $ in the annotation of w~ correspondsto an occurrence of xi and that each occurrence of1" corresponds to an occurrence of x0.
For grammarsin PATR-II format we suppose that occurrences ofcategories in the annotations correspond to the asso-ciated variables.Before we give the definition of the grammars wewant to investigate, we introduce the following nota-tion.
In the following we use S\[xl, .., x~\] to indicatethat the variables occurring in the set of formulas Sare included in {xl, .., Xn} and S(Xl, .., xn) if the setof variables occurring in S is exactly {Xl,.., xn}.1.
DEFINITION.
A unification grammar is a tuple(VN , VT , S, F1, V, V, R>, consisting of a finite nonter-minal vocabulary VN, a finite terminal vocabularyVT, a start symbol S E VN and a feature-descriptionlanguage L determined by a finite set of unary par-tial function symbols F~, a finite set of atomic valuesV and a denumerable set of variables 1V= {x~ I a e N*} with x~ #x, ,  for a # a'.All vocabularies are pairwise disjoint.
R is a finiteset of rules of the form r = ((A,w),S~\[xo,..,xl~l\] }(zi E 1;), with (A, w) e VN x (VN U VT)* (a context-free phrase structure rule) and S~\[x0, .., xl~l\] a finiteset of (quantifier-free) literals of L. 2According to our definition the LFG rules in figure 1are now expressed as depicted in (la) and the PATR-II rules as given in (lb).
Note that the structure ofthe terms is now "mirror imaged", since we assumethe attributes to be unary partial function symbols.
(1) (a) (S -+ NP VB, {SUBJ Xo ..~ xl,xo ~ x2})(NP --~ John, {PRED XO ~ JOHN})(b) (S --> NP VP, {AOa z2 ~ AGR xl})SNUM AGR XO ~ SO,1 \(NP --+ Uther, \].PEg AOR Xo ~ 3RD~/For the definition of the sentences derivable by aunification grammar we have to specify first whatderivations are.2.
DEFINITION.
A sequence of pairs ~r0...~rn with7to = (Be, 01 (B 6 VN) is called derivation of lengthn iff for each 7ri = (B \[..A~..\]~, S) (0 < i < n) there isa rule r (A -+ w~ k = ..win, S~) such that= .., ,~ \ ]~.
.
\ ]~ ,S~) .In the definition we assume that the order of thearcs of a tree is encoded by numbering the arcs andthat each node is identified with the sequence of in-tegers numbering the arcs along the path from the1The syntax and semantics of feature-description la -guages is given in the appendix.2A literal is an atomic formula or the negation of anatomic formula.root (O) to that node.
In our bracket notation weadd to a constituent i s root node as the right andits root node label as the left index.
In order to beable to refer to the c-structure derivation and to thesequence of feature descriptions and to have accessto the nodes which are substituted in each step of aderivation, we define for a derivation 7r three othersequences.3.
DEFINITION.
Let ~r be a derivation of lengthn.
We then define two sequences w and ")' foreach i=O,.
.
,n  with lh=(Tc, S) by wi=Tc and7i = S and a sequence w for each i - -  1,..,n withw~-i = B\[..A~..\]O and Tc = B\[..A\[W~.I,..,wk.m\]~..\]0by wi = #.Let S be a set of literals and 0 a unary partial map-ping over the set of terms.
Then the expression S\[0\]denotes the set of expressions obtained from S bysimultaneously replacing each occurrence of a term~- in each formula in S by 0(T).
The feature descrip-tion derived by zr is then defined by means of thefollowing operation.4.
DEFINITION.
If ~r is a derivation of length n thenthe feature description derived by 7r from h to k(0 <_ h < k <_ n) is given bykS;-~k = U 7i\[{(xj,xw, j) I xj occurs in 3'i}\].i----hEXAMPLE 1.
If we start a derivation zr from (So, 0)and apply the S-rule in (la) and the following VP-rule(VP -+ V VP', {xo ~ Xl,XCOMP ~0 ~ X2})we end up with the following sequence.~o = (So, 0)7rl = (s\[NP1, VP2\]o,{SUBJ xo  ~ X l ,XO ~ x2})zr2 ---- (s\[NPI,vp \[V2.1 ,VP'2.21210,{xo ~.
Xl,XCOMP Xo ~ X2})For the steps depicted above the sequence w is givenby wl = 0 and w2 = 2 and the feature descriptionderived by 7r from 0 to 2 (S~_~2) is{SUBJ X0 ~ Xl,X0 ~ X2,X2 ~ x2.1,XCOMP x2 ~ x2.2}.Sentences are then defined as follows.5.
DEFINITION.
A terminal string w (w E V~) isa sentence iff there is a derivation (So, 0) = r0..Trnwith Wn = S\[w\]0 and 3x~1 ..x,~ A S~-"~n(X~tl' "" Z~tm)satisfiable.
3In the following we write S" for S~_+n if the inter-val covers the whole derivation, i.e.
if ~r is of lengthn.Since a specific reduction algorithm and a fewmodel-theoretic facts required in the proofs later oncan be introduced by showing how satisfiability ofsuch existential prenex formulas can be decided, wewill continue with a short excursion on satisfiability.3We use s\[w\]o to denote an S-rooted c-structure withyield w.462.1 Sat isf iabi l i tyIn order to test whether for a given finite set of lit-erals S of a feature-description la guage (2)(2) 3z~..zt A S(x~,.., zl)is satisfiable, we can exploit by skolemization well-known test procedures available for quantifier- andvariable-free sets of such literals.
Let C be a set ofSkolem-constants (\[{xl, ..,xz}\[ = ICl) and 0 be a bi-jective function from {Xl, .., xt} to C, then (2) can betested by testing the set of literals (3) over L(C) 4(3) S\[0\],since (2) and (3) are equi-satisfiable.
In the follow-ing we complete the procedure by introducing a re-duction algorithm that reduces a set of literals (3)according to a measure in a sequence of measuredecreasing rewrite steps to a deductively equivalentset (4) (in reduced form)(4) (S\[e\])p,which is satisfiable iff the terms 7- of all inequalitiesT ~ 7- of (4) do not occur as subterms in equationsof (4).5For the proof we first introduce a few definitionsand some notation.
Let 7- be the set of termsof a variable-free f ature-description la guage L(C).Then an injective function m ?
\[7- ~ ~l*\] is a mea-sure iff it satisfies the following conditions for allT, T' ?
7" and a ?
FI*:(i) if \[7-\[ < \[7-'\[, then re(w) < m(7-'),(ii) if re(r) < m(7-'), then m(aT) <_ m(a'c').For literals and sets of literals S we extend a mea-sure m as usual by m((.~)7- ~ 7-')= m(7-)+ m(7-')and re(S) = Era(C) .CesIn the following we use 7- ~7- '  iff m(7-) > m(7-')and 7-~7-' to denote ambiguously 7- ~ 7-' or 7-~ ~ 7-.Let S be a set of literals then E denotes the set ofall equations in S, 7-s the set of terms occurring inthe formulas of S (7-s = {~-, 7-' \[ ("~)7- ~ 7-' ?
S}) andSUB(Ts) the set of all subterms of the terms in 7~SUB(7~) = {7-\[a7- ?
7~, with a ?
FI*}.For the construction of a reduced form we need aspecific partial choice function p which satisfiesp(S) ?
{7- ~7-' ?
S IT  ?
SVS(Ts\{r~.,.,})}if the specified set is nonempty and undefined other-wise.6.
DEFINITION.
For a given finite set of literals Sand a choice function p we define a sequence of setsSp, (i > O) by induction:Spo =Sf( Spi\{ 7-~-.7-t} )\[r/v' \]U {7-~T t} if p( Sp, ) = 7- ~7-'Sp,+, = \[So, if p(S m) undef.aThe feature-description la guage which in additionto L provides a distinct set of Skolem-constants C'.
Cf.the appendix for more details.~The algorithm is adapted from Statman 1977 andKnuth and Bendix 1970 and first applied to feature-description languages by Beierle and Pletat (1988).Since m(Sm) > m(Sp,+l ) i fp is defined for Sin, theconstruction terminates with a finite set of literals.If we setSp = Spt ; with t = min{i \[ Sp, = Sin+ ~ }the following lemma can easily be proven by induc-tion on the construction of Sp.
67.
LEMMA.
For Sp it holds that:(i) S ~F S o,(ii) if T~T '  C S o then T ?
SUB(Tsp\{r~r,}).Since Sp is obviously not satisfiable if it containsan inequality T ~ 7 and 7 occurs as a subterm in Ep,the whole proof is completed by showing that we canconstruct a canonical model satisfying Sp if Sp doesnot contain such an inequality.For the model construction we need the setT~p = {r e SUB(TE,) \[ -~3T'(T ~T '  e Ep)}and the function h c E \[SUB(7-Ep) ~ 7-~,\] which is de-fined for each 7- e SUB(TE,) byf ,T'(7-~T' Ep) if 7- E, h e (T) = ?
f\[ T'c\[7- otherwise.That h e is well-defined results of course from 7(ii).8.
DEFINITION.
For a set of literals S o the canoni-cal term model is given by the pair Mp = (Hp, .~p),consisting of the universeLtp=\ [7~,  i fE ,  ~ 0\[.
{O} otherwiseand the interpretation function ~p, which is definedfo rc ?VUC,  f ?
/ ' l  and 7 - ?Hpby:\[M(c) if c ?
SUB(TE,)~p(e) = I.undefined otherwise~ h~(fT-) if fT- ?
SUB(TE,)"~P(f)(7-) = \[undefined otherwise.For Mp which is well-defined the following lemmaholds:9.
LEMMA.
I f  7- is a subterm of Ts, then(i) ~p(7-) = he(7-), if 7- ?
SUB(TE~),(ii) 7- ?
SUB(T~),  if T ?
Dom(.~o).PROOF.
(By induction on the length of 7-.)
Thelemma is trivial for constants.
By showing (i) be-fore (ii) we get the induction step for a subterm fT-of Ts, in both cases according to~p(fT) = ~p(f)(-~p(7-)) = ~,(f)(hC(7-)) = ~p(f)(7-).We get .~p(7-) = hC(T) by inductive hypothesis andM(7-) = % since 7- ?
Hp would imply the existence of6In order to verify 7(i) cf.
e.g.
Wedekind 1991and 1994.47T ~ r' ?
E o and fT could not be a subterm of 7~paccording to lemma 7(ii).
Now, if (i) fT ?
SUB(TEp)then ~p(f)(T) is defined and equal to h~(fr) and(ii) if f r  ?
SUB(Ts,) and .~o(fT) is defined thenf r  ?
SUB(TE~).
\[\]On the basis of lemma 9 it is now easy to prove:10.
LEMMA.
VT ~ T ?
So(7" ?
SVB("fEp)) --~PMp S O.PROOF.
(If the condition is satisfied ~M, ?
holds forevery ?
?
So. )
If ?
= ~'~T' ?
S o with m(T') < m(r),then v' ?
T~o by 7(ii) and hence hC(T ') = T'.
We getthen h~(~ -) = T' for m(T') = m(T) by T' = T and form(~-') < m(~-) by the definition of h ~, since r ?f T~.Thus ~p(T) = ~p(T') by 9(i) and hence ~Mo ?.Assume ?=TCT ' .
If T~7 '  were satis-fied by Mp, we would get ~p(T)= ~p(T') andby 9(ii) T,T' ?SUB(TE,).
Since 7(ii) ensureshe(r) = h~(~ -') = v = ~-', we would have ~- ?
r ?
Spwith T ?
SUB(TEo).
\[\]Finally it should be mentioned that Mp is a unique(up to isomorphism) minimal model for Sp, i.e.
if Mis a model for So, homomorphic to Mp, then everyminimal submodel of M that satisfies S o is isomor-phic to Mp.3 The Generat ion P rob lem and itsDecidabi l i tyAlthough it was not necessary for the definition ofthe sentences derivable by a unification grammar, wenow have to make explicit that also a feature descrip-tion is assigned to a sentence.11.
DEFINITION.
A terminal string w (w ?
V~) isderivable with feature description 3Xl..Xl?
(Xl,.., xt)iff the feature description is satisfiable and thereis a derivation (S~, O) = ~r0..Ir,~ with w~ = s\[w\]~ and?=AS ~.Since deductively equivalent consistent feature de-scriptions are assumed to describe the same set offeature structures (models), the assignment of en-tities to terminal strings determined by a unifica-tion grammar is then formally given by a binaryrelation A between terminal strings and sets ofclasses of deductively equivalent feature descriptions\[?Xl ..Xl ~)( X l , .., Xl ) \]'-tF .712.
DEFINITION.
For each terminal string w ?
V~and each class \[Sxl..xl?
(Xl,.., xl)\]:A(w, \[3xl ..xl?
(xl,.., xl)\]) iff w is derivable with3z l .
.
z l?
(z l ,  .., xt).Definition 12 now brings us closer to the problem,since we can for any unification grammar in ratherabstract erms specify what parsers and generatorsare: a parser is a procedure which recursively enu-merates for any given string w the set{\[~Xl..XI~)(Xl,.-, Xl)\] \[ A(W,  \[3X 1..xI?
(xl,.., Xl)\])}7We omit the index of the equivalence classes in thefollowing.and a generator is a procedure which recursively enu-merates for any given class \[3Xl..Xl?
(xl, ..,xl)\]: s{w ?
y~ l A(w, \[3Xl..Z,C(Xl, ..,z,)\])}.Whether adequate algorithms (effective proce-dures) can be formulated epends on the decidabilityof the corresponding parsing and generation problem.In our case (generation), it is the problem whether3w ?
y~(zx(~, \[3Xl..X~?
(xl, .., x~)\]))is decidable for any given class \[3xl..xl?
(xl, ..,xl)\].The decidability of the generation problem alone en-sures the existence of algorithms which terminate inany case with an output, although they might (ofcourse) not be able to produce all possible solutions.Despite decidability, inputs can still be infinitely am-biguous (\[{w ?
V~ \[A(w, \[3xl..xl?
(Xl, ..,xl)\])}\] infi-nite).In order to prove the decidability of the generationproblem (theorem 13), we proceed in two steps.13.
THEOREM.
It is decidable for each featuredescription 3yl..Yk?
(Yl,..,yk) whether there is aterminal string w ?
V~ which is derivable with3Xl..Xl?
(xl,.., Xl) and3yl ..Yk?
(Yl,.., Yk) qF- 3Xl ..Xt?
(Xl, .., Xl).In the first step we show that we can always shortena derivation of a sentence w with (consistent) fea-ture description ?
to a derivation of a sentence w'with feature description ?'
and ?
-t~- ?'
whose lengthis bounded by the "size" of ?.
By showing in thesecond step that two deductively equivalent consis-tent feature descriptions have the same "size" the-orem 13 follows, since only a finite set of deriva-tions (those whose length does not exceed this up-per bound) have to be inspected in order to decide3w ?
V~ (A(w, \[?\])) for an arbitrary consistent input?.3.1 Redundant  Recurs ions  and  PumpingFor the proof that for a derivation of a sentence wwith (consistent) feature description ?
there alwaysexists a short derivation of a sentence w' with fea-ture description ?'
and ?
-tt- ?'
we exploit the factthat a c-structure may contain recursions of the formdepicted in figure 2 whose corresponding subderiva-tions in ~r are eliminable.
Such recursions are calledredundant.14.
DEFINITION.
Let rr be a derivation of a sentenceuvzxy of length m + k + 1 whose c-structure deriva-tion has the form ~O0..t.dm..O.~rn-t-k..Wm-l-k-bl -~ OQn withwm= S\[U, A u, Y\]0 and aJm+ k : s\[U, AIr, Au.~, x\], ,  Y\]0(reorder if necessary).
If 7r' is a derivation ofuzy of length m+l  which is defined for each j(O < j < rn+l) by{r~j if j <_ m7r~ = (s\[ury\]~, S) if j > m and 7rj+k = (s\[uvrxy\]~,S)SWe assume here strong reversibility, since a generatoris for a given input y simply a parser which operates onA-I: it recursively enumerates instead of {x I A(x ,y)}the set {x I A-I(x,Y)} ?48\u v z x yFigure 2A c-structure with recursion A\[V, A~.~, x\]t, (1~1 > 0).and, {;rj i f j<_mwJ = .t if j>m and wj+k = #.~.~then 7rm+l...~m+ k is a redundant recursion iff3x,..x~ h S~(xt, .., x~) ~ 3xl "x'k h S~' (xl, .-, x~)-If we assume that a given derivation of a sentenceis already shortened to a derivation without redun-dant recursions it remains to show that the length ofsuch a derivation could not exceed the upper bounddetermined by the "size" of the derived feature de-scription.The "size" of a consistent feature description is onthe one hand determined by the size of its minimalmodel, and on the other hand determined by a nor-mal form into which every feature description can beconverted.
The conversion is performed in two steps.In the first step, we eliminate as many variables aspossible by substitution.15.
DEFINITION.
If S(Xl,.
.
,Xl) is a set of lit-erals, then xi is eliminable in S(xl , .
.
,x l )  iffthere is a term T not containing xi such that~- 3zl..x~(A S(Xl, .., ~)  ~ z~ = r).16.
NOTATION.
In the following we write S\[x~, .., xz\]iff each xi is not eliminable in S.17.
DEFINITION.
We assign to a set of liter-als S'(x~,..,x~,x~,..,X~k) a set R(S') which con-tains a set S\[x~,..,xt\] iff there is a substitutionO E \[{x~, ..,x~} ~-~ T(x~, ..,x,)\] such that~.
.~,~.
.x~(A  s '  ~ ~ ~ o(~))for all ~ (1 < i < k) and Sfz~, .
.
,~\] = S'\[O\]?By the substitutivity theorem we get:18.
LEMMA.
I f  SfXl, .., xl\] E R(S'(Xl,.., xl,X~l,.., x~k))then 2x~ ..x~k(A S - A S').In the second step, we make the set of literals in-dependent, i.e.
we remove those literals which areimplied by the remaining subset.~T(x~,..,xt) denotes the set of terms over V,{x~, .., x~} and F~.19.
DEFINITION.
A set of literals S(xl,..x~) is in-dependent iff there is no formula ?
E S for whichF- ~xl .
.x l (A(S\{?})
D ?)
holds.Normal forms are then defined as follows.20.
DEFINITION.
A consistent feature description~xl..xl A Six1,.. ,  xt\] is in normal form (in the fol-lowing indicated by a v index) iff S\[xl ,  .., xl\] is in-dependent.Furthermore, we call ~xl ..xl A S~ Ix1, .., xl\] a normalform of ~xl..xtx'~..x~ h S'(x l ,  .., x~) iff S~ Ix1, .., xt\]is an independent subset of S'\[O\] E R(S') and~Z1..Xl(ASv\[Xl,.
.
,Xl\] ~ ASt\ [0\ ] )  ?Lemma 18 and the condition in definition 20 ensurethat a consistent feature description and its normalforms are deductively equivalent.In order to be able to show the existence ofa redundant recursion, we exploit the simple factthat the information which contributes a literalin a normal form with a minimal model (Up, ~p}can be specified by an equation ~-~ 1 -s whereIT\[ + \[rq < \[Up\[ + 2.
A literal r ~ O'a 'T  't (\[a I > 0)whose terms are longer must always be reducibleby a loop 5rtT  tl ,-~ T II to a shorter equation.
Sincethe construction of such an information piece can bedone with a subderivation of some fixed length, theremust be a redundant recursion if the length of wholederivation exeeds a fixed value which is dependenton \[Hp\[ and \[S~\[ and exactly specified in lemma 21.1?21.
LEMMA.
Suppose that w E V~ is derivable with?
= ~xl ..xtx'l..x'k A S~(xl,  .., x'k) over ~r of length n,that ~xl..xl A S~ Ix1,.., xl\] is a normal form of ?
andthat M o = (Up, ~o) is a minimal model of ?.
I f  ~rhas no redundant recursions then each path of wn isshorter or equal to IVN\[ .
(3 \[Hol + 1)- (IS~\[ + 1).PROOF.
Suppose, one path of wn were longerthan IVN\[.
(3 \[Up\[ + 1).
(\[S~\[ + 1), then more than(3 I/~p\] + 1).
(\[S~ I + 1) different nodes on that pathhad to be labelled by the same A E VN.
With-out loss of generality we can assume that lr is aderivation whose c-structure derivation w has theform Wo..wm..wn with wm= s\[u, A, ,  y\]~ for each node# on that path which is labelled by A (reorder ifnecessary).
In order to exclude that complex in-ferences are used to build up 0, we assume fur-thermore that 0 is non-deterministicaUy constructedfrom S ~ by recursive variable substitution, i.e.
werequire for each (X, aT) E 0 either x'~aT E S ~ or~x~ay E S ' ( (y ,T)  E 0).
Finally, let S C S ~ withS~ = S\[O\].
In order to identify the redundant re-cursion we have to consider the following cases.1.
Suppose there are more than \[Sv\[ + 1 A-labellednodes # such that x i, does not occur in S ", then theremust be more than \[Su\[ non-overlapping recursions.For at least one of those recursions ~rm+~...Trm+k itmust hold that(S \[~l S~+l_+rn_l_k) C (s~r.+rn \[.J S~n+k..kl_~n).1?The given factor \[VN\[.
(3\[//p\[ + 1).
(\[S~\[ + 1) de-creases for more restricted grammars, like e.g.
grammarswhich allow only feature descriptions with single-rootedand/or acyclic minimal models.49But thenSn ~r S c_ ( 0-~m u Sm+,+~)and ~rm+~...7rrn+k must be redundant.2.
If case 1 does not apply there must be more than3 I/4p\[ ?
(\]S~ I + 1) distinct A-labelled nodes # on thatpath such that x ,  occurrs in S ~ and for more than31S-I + 1 of these nodes must pairwise hold~.-z~ (h s ~ ~ x, ~ ~.~).But then there must be at least three recursions uchthatand(S n s~+~_~+~+~+z) G ($8~ ~ s~\~+.+~+~_~.
).We can then assign to each recursion 7rm+l...Trrn+k(m=i ,k=l ;  m= i + l ,k=v or m=i+l  +v ,k= z) atype which corresponds to the strongest of the fol-lowing conditions the recursion satisfies.
(a) ~,~+~...~m+~ satisfies(b) It holds only~- ~.
.x~(A  S~+~+~ ~ z,.~ ~ ax, )with lal > 0 and aO(x,)..~ O(x,) is implied by~-Sxl..x'k(ASo'_,m+~ A S~) where S a is the set ofground literals of S.(c) Or it holdst 7rwith \]a' I > 0 and a'O(x,.~) ~ O(x,.~) is implied by~- ~z~..z~(A S~+l~ A S~).
(d) If a recursion which satisfies(\[a I > O) is not of type (b) then there must be aground term T which is not reducible in terms of x~,i.e.
t?
can not satisfy T = a'O(x,) for some non-emptyprefix a' ,  and(e) For a recursion withwhich is not of type (c) we get for x ,  the same prop-erty as for x,.~ in (d).
(f) If the previous cases do not apply, the recursionmight satisfywith lal > 0 and Io'1 > 0.
Since x~, is not eliminablein terms of x , .
,  and vice versa, there must be groundterms T, y' such that~.
.~%(A s ~ 3 ~.
~ ~ A x.
.~ ~ ~' A ~ ~ ~').
(g) If a recursion is not of type (a-f) then~- 3Xl..Xk( A Sm+l_~m+k D ax ~ x ,  A a'y ~ x~.~).But then x ,  and x~.~ must be ground eliminable asin (f).Since a recursion of type (a-c) is not redundant if itcontains terms T or T' such that T is not reducible interms of x ,  and r '  is not reducible in terms of x~.~and ~- or T ~ are used to eliminate x ,  and x ,  ~, theremust be at least one recursion 7r,~+l...Trm+k such thatand 0 still follows either by ground inferences or dueto the properties of (b) and (c).
\[\]If lmax = max{Iw\[ l ( (A ,w) ,Sr l  e R} then the fol-lowing pumping lemma follows immediately as acorollary.22.
COROLLARY.
Suppose that w E V~ is deriv-lr X I able with ?= ~Xl..X~X~l..X~kAS (x , .
.
,Xk)  overof length n, that 3Xl..xl A Sv\[xl, .
.
,xl~ is a nor-mal form of ?
and that Mp=(Hp,~p)  is a mini-I ~ Iwl "- l IV~F(21U;l+l) then mal model of ?.
j j l max w hasthe form uvzxy with vx >0 and for all i>  1:!
{~v~zx~y, \[~x~ ..z~ ~'~ ..~'k/\ ^ S" (~,  .., ~k)\]) e A.PROOF.
If Iwl > lWalx (~IupI+I) then at least one pathofwn is longer than \[VNI" (2 \]Hal + 1) and more than2\[H;\[ + 1 different nodes on that path are labelledby the same A E VN.
Without loss of generalitywe assume again that 7r is a derivation whose c-structure derivation w has the form w0..w,~..w,~ withWm = s\[u, A, ,  Y\]0 for each node p on that path whichis labelled by A, and that 0 is non-deterministicallyconstructed from S ~ by recursive variable substi-tution, i.e.
we require for each (x, a r )E  0 eitherx~ffT e S ~r or 3x~ay ?
SW((y,T) ?
0).
Suppose fur-thermore that S C S ~ with S~ = S\[0\].
In order toisolate the recursion which allows pumping we haveto distinguish the following cases.1.
If 7r contains a recursion 7~m~l...7rm+ k withwm = s\[u,A~,y\]0, 03mWk = s\[u, Mv, A~.~,x\],,Y\]Vand Ivx\[ > 0 and x~ and x,.~ do not occur in S ~,we take 71"mW1...Tl'rn+k.2.
If 7r does not contain such a recursion there mustbe at least three distinct A-labelled nodes ~, ~.A, ~.A.von that path such thatI' wi = S u ,A~,y%,fv  I A X I~ I1 w~+~=stu,At  , ~.X, b,YJ0,~+~+~ = s\[~', Ale, Air, A,.~.,, ~\],.~, ~'1~, V'\]0with Iv'x'l > O, Irsl > 0 and~- ~z~..z 'k(A S '~ ~ z~ ~ z~.~, ~ z~.x.,).2.1 Suppose there is a recursion of type (a-c) (cf.proof of lemma 21) we choose this one.2.2 If 7r does not contain such a recursion each ofthe recursions must be of type (d), (e), (f) or (g).But then there must be one recursion "ffrn+l...'ffrn+k(m=i ,k=Iorm=i+l ,k :v )  withI f f50for some ground terms T, T'.
This recursion ischoosen for the proof.On the basis of the recursion 7rm+i...TrmWk we cannow define derivations r i as follows.
We set 7r i = rand define ~r i+i on the basis of 7r ~ byI(:\[U,A\[virxi\]~.~',Y\]o,S) i f j>m+ikand ~T~+I i = .
~ J -~ = (s \ [u ,A \ [v i -1 , ' :~ i -1 \ ] , .
, .
,~ , - , , y \ ]~ ,S)~r j  if j <_m+ikandzv~ if j <_ m + ik\[#.ai.~ if j > m + ik and i ~j--k ---- ~.~i--l.t.By induction on i it can then be shown for all possiblecases that k 3x~..x~..(A S"  - A S ' ) .
\[\]3.2 Invariance of the  Parameters  underDeductive EquivalenceSince the universes of the minimal models of two de-ductively equivalent consistent feature descriptionsmust have the same cardinality, for the completionof the proof of theorem 13 it remains to be shownthat two deductively equivalent consistent featuredescriptions have the same "information content",i.e.
that the sets of literals of their normal forms havethe same cardinality:23.
LEMMA.
Suppose that 3Xl..Xi A S~rxi,..,xl\]and 3Yl..Yk A S~ \[Yi , .., Yk \] are deductively equivalentconsistent feature descriptions in normal form thenWe proof lemma 23 in two steps.
First, weshow that we can convert s'~rYl,..,Yk\] into a setS~\[xi,..,xl\] with the same cardinality such that3xl..xl (A S~ rxl, .., Xl\] -~- A S~' rxl, .., xl\] ) holds.24.
LEMMA.
Assume that 3xi..xl A S~rxl,..,xl\]and qyi..Yk A S~ \[Yl, .-, Yk \] are deductively equivalentconsistent feature descriptions in normal form.
ThenH l ---- k and there is a set S~ rXl, ..,xl\] withH (i) IS,, rxi , .
.
,  :clll = is,, ryl,.. ,  y,ql and(ii) I- 3x,..xl (A S,, rxl, .., xl\] _= A s~,, \[xi, .., xl\]).PROOF.
Suppose that {xl , .
.
,x l} N {Yl,..,Yk} = (~(rename if necessary), that S~\[yl,..,yk\] is in re-duced form (the reduction of an independent set doesnot change the cardinality) and that M = (~, ~)is an arbitrary model of 3xi..Xl A S .
rx i , .
.
,x l \ ]and ~yl..ykAS'~ryl,..,yk\]p. Let a and a 'be assignments uch that a ~M Su\[Xl,..,xl\] anda' ~M S~\[Yl,..,Yk\];.We show first that there is a bijective function1) ?
\[{Xl,..,Xl} ~ {yl,..,Yk}\] such that for all xithere is aa i  ?
F~ (i = 1, ..,l) and a variable 1)(xi)occurring in S' with a(xi) = ~(aiO(xi))(a').
Firstof all ~ is left-total, since a(xi)= ~(T) with Tvariable-free would imply that xi is eliminablein S. In order to show that ~ is a func-tion, assume a(xi) = ~(ajyj)(a*) = (~(ahYh)(a') forYj,Yh occurring in S' with yj ?
Yh.
Since yjand Yh are not eliminable in S' there mustbe terms Tj, Th such that a'(yj)-=~(Tj)(a),a'(Yh) = ~(Th)(OL), ~(O'jTj)(OI) ~- ~(qhrh)(O 0 andthere is no a ?
Fi* such that ~(aTj)(a) = ~(rh)(a)or ~(aVh)(a) = ~(Tj)(a).
Thus, vj and Vh must beterms in T({xi,.
.
,Xl}\{xi}) and xi would be elim-inable in S. Suppose now that yj is not in therange of 1).
Then there must be a term r with.~(T)(a) ---- a'(yj).
Since yj is not eliminable in S',T must be of the form axi and there must be aterm T' with a(xi) = .~(T')(a').
If T' is a term inT({yi,..,yk}\{Yj}), yj would be eliminable.
Oth-erwise r '  is of the form a'yj and we would geta(xi) = c3(a'yj)(a').
Hence 1) is onto.
Assume fi-nally a(xi) = ~(aiYh)(a') and a(xj) = ~(ajYh)(a')with xi ~ xj.
Then there must be a term r witha'(yh) = ~(T)(a).
Since xi and xj would be elim-inable in S if T is a term in T({xi,  ..,xl}\{xi,xj}),T is of the form axi or axj.
But then eithera(z~) = .~(a~x~)(a)  or a(x~) = ~(m~xA(~) .
Thus,1) is bijective and l = k.On the basis of 1) we then define a sequence of newsets S~ (0 < i _< l) by induction as follows (within theinduction we assume 1)(xi) -= y):s~ = s" ryl, .., yl\] p, \[s~_,\[y/~,\] if a (x , )  = ~'(y)Si = ((S~_l \{y~o'o"y} )\[Y/o.x, \] U {x i ~ oJoxi} if (A),where (A) means a(xi) ~ a'(y), y~aa'y ?
S~_ 1 anda(xi) = .~(a'y)(a').
In the case where the variablesrefer to different nodes on a loop (a(xi) ~ a'(y)) thedefinition is well-formed, since S~\[yi,..,yl\]p is re-duced and normalized and thus there must be ex-actly one equation y~aa'y in S~_ 1 describing theloop with the node to which xi refers.
For S" = S\[,IS~ rxl, .., xl\]l ~- Is~ ryl,.., Yk\]l follows immediatelyby induction on the construction of S ' .Finally we get (ii), since3xi..xi(3xi+l..x~ A S~ \[xi,  .., xl\] -31)(x~+~ )..1)(xl) h s~ rx~, .., :~, 1)(x~+1 ),.., 1)(xl)\])can easily be verified by induction on the construc-tion of S".
\[\]Since two deductively equivalent independent andconsistent sets of (variable-free) literals reduce tothe same set of literals in reduced form, lemma 25follows by skolemization and completes the proof oflemma 23.25.
LEMMA.
If Bxi..xl A Sv \[xi, .., xl\] is a consistentfeature description m normal formandt- 3xi..xl(A S~rxi,..,xl \]---- A S'~'rxi,..,xl\]) thenI&rzx,..,zlql - - -Appendix: Syntax and Semantics ofFeature-Description LanguagesA feature-descriptionlanguage L(C) consists of thelogical connectives -.~ (negation), D (implication),the equality symbol ~, the existential quantifier 3and the parentheses (,).
The nonlogical vocabularyis given by a finite set of constants V (atomic values),51a possibly empty finite set of constants C (Skolem-constants) and a finite set of unary partial \]unctionsymbols F1 (V, C, F1 pairwise disjoint).
The class ofterms and formulas of L(C) are recursively defined asusual.
Feature descriptions of L(C) are expressionsof the form 3xl..xl A Six1, ..,xt\], where S is a finiteset of (quantifier-free) literals.
(We assume that theconnectives v (disjunction), A (conjunction) and(equivalence) are introduced by their usual defini-tions.
)A model for L(C) consists of a nonempty universeb/and an interpretation function ~.
Since not everyterm denotes an element in/d if the function symbolsare interpreted as unary partial functions, we gener-alize the partiality of the denotation by assumingthat ~ itself is a partial function.
It is only requiredthat all Skolem-constants denote.
Suppose IX ~-~ Y\]designates the set of all partial functions from X toY and IX ~-~ Y\] the set of all total functions from Xto Y, then a model is defined as follows: 11DEFINITION.
A model for L(C) is a pair M = (b/, ~),consisting of a nonempty set b/and an interpretationfunction ~ = ~v U -~c U ~F1, such that(ii) ~c  ?
\[C ~-+/d\],(iii) ~F, ?
IF1 ~ \[U ~/d\ ] \ ] ,(iv) Vf ?
F l ( f  ?
Dom(~) ~ ~(f )  ?O).If we extend the denotation function to terms andvariable assignments c~, the definition of the satisfac-tion relation differs only in the clause for the equa-tions from the usual one:O/ ~M T ,~ T' iff ~(T)(C~) and ~(T')(C~) are definedand ~(T)(a) = .~(T')(~).ReferencesBeierle, C., and U. Pletat.
1988.
Feature Graphs andAbstract Data Types: A Unifying Approach.
In Pro-ceedings of the 12th International Conference on Com-putational Linguistics.
Budapest.Kaplan, R., and J. Bresnan.
1982.
Lexical-FunctionalGrammar: A Formal System for Grammatical Repre-sentation.
In J. Bresnan, ed., The Mental Represen-tation of Grammatical Relations.
Cambridge, Mass.
:The MIT Press.Johnson, M. 1988.
Attribute-Value Logic and the Theoryof Grammar.
Chicago: CSLI Lecture Notes Series,Chicago University Press.Knuth, D., and P. Bendix.
1970.
Simple Word Problemsin Universal Algebra.
In J. Leech, ed., ComputationalProblems in Universal Algebra.
Elmsford: PergamonPress.Shieber, S., H. Uszkoreit, F. Pereira, J. Robinson, andM.
Tyson.
1983.
The Formalism and Implementationof PATR-II.
In B. Grosz and M. Stickel, eds., Researchon Interactive Acquisition and Use of Knowledge.
SRIFinal Report 1984.
SRI International, Menlo Park.llIf constant-consistency and constant/complex-consistency are to be guaranteed for the atomic valuesV or acyclicity has to be ensured for the models, specialconditions can be added to the definition.Statman, R. 1977.
Herbrand's Theorem and Gentzen'sNotion of a Direct Proof.
In J. Barwise, ed., Handbookof Mathematical Logic.
Amsterdam: Elsevier North-Holland.Wedekind, J.
1991.
Classical Logics for Attribute-ValueLanguages.
In Proceedings of the 5th Conference ofthe European Chapter of the Association for Compu-tational Linguistics.
Berlin.Wedekind, J.
1994.
Some Remarks on the Logic of Uni-fication Grammars.
In C. J. Rupp, M. Rosner, andR.
Johnson, eds., Constraints, Language and Compu-tation.
London: Academic Press.52
