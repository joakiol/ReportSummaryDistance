Proceedings of the Ninth International Workshop on Parsing Technologies (IWPT), pages 188?189,Vancouver, October 2005. c?2005 Association for Computational LinguisticsThe Quick Check Pre-unification Filter for Typed Grammars: ExtensionsLiviu CiortuzCS Department, University of Ias?i, Romaniaciortuz@infoiasi.roThe so called quick check (henceforth QC) pre-unification filter for feature structure (FS) unifica-tion was introduced by (Kiefer et al, 1999).
QC isconsidered the most important speed-up techniquein the framework of non-compiled FS unification.We present two potential ways in which the designof the quick check can be further extended: con-sistency sort check on coreferenced paths, and pre-unification type-checking.
We analyse the effect ofthese extensions on LinGO, the large-scale HPSGgrammar for English (Flickinger et al, 2000) usingthe compiler system LIGHT (Ciortuz, 2002).1 Coreferenced Based Quick CheckSuppose that the FS ?
is going to be unified with?, and that ?
contains the coreference ?.pi .= ?.pi?.In this setup, if for a certain path ?
it happens thatsort(?.(pi?))
?
sort(?.(pi?))
?
sort(?.
(pi ??))
= ?,then certainly ?
and ?
are not unifiable.
There isno a priori reason why, on certain typed grammars,coreference-based sort inconsistency would not bemore effective in ruling out FS unification than sortinconsistency on mutual paths.
Moreover, the in-tegration of the two forms of QC is not compli-cated.
However, up to our knowledge no systemparsing LinGO-like grammars included the abovenewly presented form of (coreference-based) pre-unification QC test.On the GR-reduced form LinGO (Ciortuz, 2004)we identified 12 pairs of non-cross argument coref-erences inside rule arguments (at LinGO?s sourcelevel).
Interestingly enough, all these coreferencesoccur inside key arguments, belonging to only 8 (outof the total of 61) rules in LinGO.To perform coreference-based QC, we computedthe closure of this set ?
of coreference paths.
Theclosure of ?
will be denoted ??.
If the pair pi1 and pi2is in ?, then together with it will be included in ??
allpairs of QC-paths such that pi1?
and pi2?, where ?is a feature path (a common suffix to the two newlyselected paths).
For the GR-reduced form of LinGO,the closure of ?
defined as above amounted to 38pairs.
It is on these pairs of paths that we performedthe coreference-based QC test.Using all these coreference paths pairs, 70,581unification failures (out of a total of 2,912,623 at-tempted unifications) were detected on the CSLI testsuite.
Only 364 of these failures were not detectablethrough classical QC.
When measuring the ?sensi-tivity?
of coreferenced-based QC to individual rulearguments, we found that out of a total of 91 rulearguments in LinGO only for 4 rule arguments thecoreference-based QC detects inconsistencies, andthe number of these inconsistencies is far lower thanthose detected by the classical QC on the same ar-guments.
None of the pairs of coreference paths ex-hibited a higher failure detection rate than the firstranked 32 QC-paths.
If one would work with 42 QC-paths, then only 4 of the pairs of coreference pathswould score failure detection frequencies that wouldqualify them to be taken into consideration for the(extended form of) QC-test.As a conclusion, it is clear that for LinGO, run-ning the coreference-based QC test is virtually ofno use.
For other grammars (or other applicationsinvolving FS unification), one may come to a dif-ferent conclusion, if the use of non-cross argumentcoreferences balances (or outnumbers) that of cross-188argument coreferences.2 Type Checking Based Quick CheckFailure of run-time type checking ?
the third po-tential source of inconsistency when unifying twotyped FSs ?
is in general not so easily/efficientlydetectable at pre-unification time, because this checkrequires calling a type consistency check routinewhich is much more expensive than the simple sortconsistency operation.While exploring the possibility to filter unifica-tion failures due to type-checking, the measurementswe did using LinGO (the GR-reduced form) on theCSLI test suite resulted in the following facts:1.
Only 137 types out of all 5235 (non-rule and non-lexical) types in LinGO were involved in (either suc-cessful or failed) type-checks.1 Of these types, only29 types were leading to type checking failure.22.
Without using QC, 449,779 unification fail-ures were due to type-checking on abstract instruc-tions, namely on intersects sort; type-checking ontest feature acts in fact as type unfolding.
Whenthe first 32 QC-paths (from the GR-set of paths)were used (as standard), that number of failures wentdown to 92,447.
And when using all 132 QC-paths(which have been detected on the non GR-reducedform of LinGO), it remained close to the precedingfigure: 86,841.3.
For QC on 32 paths, we counted that failed type-checking at intersect sort occurs only on 14 GR-paths.
Of these paths, only 9 produced more than1000 failures, only 4 produced more than 10,000failures and finally, for only one GR-path the num-ber of failed type-checks exceeded 20,000.The numbers given at the above second point sug-gest that when trying to extend the ?classical?
formof QC towards finding all/most of failures, a consid-erably high number of type inconsistencies will re-main in the FSs produced during parsing, even whenwe use all (GR-paths as) QC-paths.
Most of these in-consistencies are due to failed type-checking.
Andas shown, neither the classical QC nor its exten-sion to (non-cross argument) coreference-based QCis able to detect these inconsistencies.1For 32 QC-paths: 122 types, for 132 QC-paths: also 122.2For 32 QC-paths and 132 QC-paths: 24 and 22 respectively.s = GR?
[ i ] ?
GR?
[ i ];if s 6= GR?
[ i ] and s 6= GR?
[ i ] and?.pij or ?.pij is defined fora certain non-empty path pij = piipi,an extension of pii,such that pij is a QC-path,thenif ?(s).pi?
GR?
[i] = ?, wherea ?
(s) is the type corresponding to s,or type-checking ?.pii with ?
(s) failsthen ?
and ?
do not unify.Figure 1: The core of a type-checking specialisedcompiled QC sub-procedure.The first and third points from above say that inparsing the CSLI test suite with LinGO, the failuresdue to type checking tend to agglomerate on cer-tain paths.
But due to the fact that type-checkingis usually time-costly, our conclusion, like in thecase of non-cross argument coreference-based QC,is that extending the classical QC by doing a cer-tain amount of type-checking at pre-unification timeis not likely to improve significantly the unification(and parsing) performances on LinGO.For another type-unification grammar one can ex-tend (or replace) the classical QC test with a type-check QC filter procedure.
Basically, after identify-ing the set of paths (and types) which most probablycause failure during type-checking, that procedureworks as shown in Figure 1.ReferencesL.
Ciortuz.
2002.
LIGHT ?
a constraint language andcompiler system for typed-unification grammars.
KI-2002: Advances in Artificial Intelligence.
M. Jarke, J.Koehler and G. Lakemeyer (eds.
), pp.
3?17.
Springer-Verlag, vol.
2479.L.
Ciortuz.
2004.
On two classes of feature paths inlarge-scale unification grammars.
Recent Advances inParsing Technologies.
H. Bunt, J. carroll and G.
Satta(eds.).
Kluwer Academic Publishers.D.
Flickinger, A. Copestake and I.
Sag.
2000.
HPSGanalysis of English.
Verbmobil: Foundations ofspeech-to-speech translation.
Wolfgang Wahlster(ed.
), pp.
254?263.
Springer-Verlag.B.
Kiefer, H-U.
Krieger, J. Carroll and R. Malouf.
1999.A bag of useful techniques for efficient and robustparsing.
Proceedings of the 37th annual meeting of theAssociation for Computational Linguistics, pp.
473?480.189
