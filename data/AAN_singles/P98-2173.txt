Multilingual authoring using feedback textsRichard  Power  and Don ia  Scot tITRI, University of BrightonLewes Road, Brighton BN2 4AT, UKFirstName.LastName@itri .bton.ac.ukAbst rac tThere are obvious reasons for trying to auto-mate the production of multilingual documen-tation, especially for routine subject-matter inrestricted omains (e.g.
technical instructions).Two approaches have been adopted: MachineTranslation (MT) of a source text, and Multi-lingual Natural Language Generation (M-NLG)from a knowledge base.
For MT, informationextraction is a major difficulty, since the mean-ing must be derived by analysis of the sourcetext; M-NLG avoids this difficulty but seemsat first sight to require an expensive phase ofknowledge ngineering in order to encode themeaning.
We introduce here a new techniquewhich employs M-NLG during the phase ofknowledge diting.
A 'feedback text', generatedfrom a possibly incomplete knowledge base, de-scribes in natural language the knowledge n-coded so far, and the options for extending it.This method allows anyone speaking one of thesupported languages to produce texts in all ofthem, requiring from the author only expertisein the subject-matter, not expertise in knowl-edge engineering.1 In t roduct ionThe production of multilingual documentationhas an obvious practical importance.
Compa-nies seeking global markets for their productsmust provide instructions or other reference ma-terials in a variety of languages.
Large politi-cal organizations like the European Union areunder pressure to provide multilingual versionsof official documents, especially when communi-cating with the public.
This need is met mostlyby human translation: an author produces asource document which is passed to a numberof other people for translation into other lan-guages.Human translation has several well-knowndisadvantages.
It is not only costly but time-consuming, often delaying the release of theproduct in some markets; also the quality is un-even and hard to control (Hartley and Paris,1997).
For all these reasons, the production ofmultilingual documentation is an obvious can-didate for automation, at least for some classesof document.
Nobody expects that automationwill be applied in the foreseeable future for liter-ary texts ranging over wide domains (e.g.
nov-els).
However, there is a mass of non-literarymaterial in restricted domains for which au-tomation is already a realistic aim: instructionsfor using equipment are a good example.The most direct attempt o automize multi-lingual document production is to replace thehuman translator by a machine.
The source isstill a natural anguage document written by ahuman author; a program takes this source asinput, and produces an equivalent text in an-other language as output.
Machine translationhas proved useful as a way of conveying roughlythe information expressed by the source, but theoutput texts are typically poor and over-literal.The basic problem lies in the analysis phase: theprogram cannot extract from the source all theinformation that it needs in order to produce agood output text.
This may happen either be-cause the source is itself poor (e.g.
ambiguousor incomplete), or because the source uses con-structions and concepts that lie outside the pro-gram's range.
Such problems can be alleviatedto some extent by constraining the source doc-ument, e.g.
through use of a 'Controlled Lan-guage' such as AECMA (1995).An alternative approach to translation is thatof generating the multilingual documents froma non-linguistic source.
In the case of automaticMultilingual Natural Language Generation (M-1053NLG), the source will be a knowledge base ex-pressed in a formal language.
By eliminatingthe analysis phase of MT, M-NLG can yieldhigh-quality output texts, free from the 'literal'quality that so often arises from structural imi-tation of an input text.
Unfortunately, this ben-efit is gained at the cost of a huge increase in thedifficulty of obtaining the source.
No longer canthe domain expert author the document directlyby writing a text in natural anguage.
Definingthe source becomes a task akin to building anexpert system, requiring collaboration betweena domain expert (who understands the subject-matter of the document) and a knowledge ngi-neer (who understands the knowledge represen-tation formalism).
Owing to this cost, M-NLGhas been applied mainly in contexts where theknowledge base is already available, having beencreated for another purpose (Iordanskaja et al,1992; Goldberg et al, 1994); for discussion seeReiter and Mellish (1993).Is there any way in which a domain expertmight author a knowledge base without goingthrough this time-consuming and costly collab-oration with a knowledge ngineer?
Assum-ing that some kind of mediation is needed be-tween domain expert and knowledge formalism,the only alternative is to provide easier toolsfor editing knowledge bases.
Some knowledgemanagement projects have experimented withgraphical presentations which allow editing bydirect manipulation, so that there is no need tolearn the syntax of a programming language -see for example Skuce and Lethbridge (1995).This approach has also been adopted in twoM-NLG systems: GIST (Power and Cavallotto,1996), which generates social security forms inEnglish, Italian and German; and DRAFTER(Paris et al, 1995), which generates instructionsfor software applications in English and French.These projects were the first attempts to pro-duce symbolic authoring systems - that is, sys-tems allowing a domain expert with no trainingin knowledge ngineering to author a knowledgebase (or symbolic source) from which texts inmany languages can be generated.Although helpful, graphical tools for manag-ing knowledge bases remain at best a compro-mise solution.
Diagrams may be easier to un-derstand than logical formalisms, but they stilllack the flexibility and familiarity of natural lan-guage text, as empirical studies on editing di-agrammatic representations have shown (Kim,1990; Petre, 1995); for discussion see Power etal.
(1998).
This observation has led us to ex-plore a new possibility, at first sight paradoxical:that of a symbolic authoring system in whichthe current knowledge base is presented througha natural anguage text generated by the system.This kills two birds with one stone: the source isstill a knowledge base, not a text, so no problemof analysis arises; but this source is presented tothe author in natural language, through whatwe will call a feedback text.
As we shall see, thefeedback text has some special features whichallow the author to edit the knowledge base aswell as viewing its contents.
We have called thisediting method 'WYSIWYM', or 'What You SeeIs What You Meant': a natural language text('what you see') presents a knowledge base thatthe author has built by purely semantic deci-sions ('what you meant').A basic WYSIWYM system has three compo-nents:?
A module for building and maintainingknowledge bases.
This includes a 'T-Box'(or 'terminology'), which defines the con-cepts and relations from which assertionsin the knowledge base (or 'A-Box') will beformed.?
Natural language generators for the lan-guages supported by the system.
As wellas producing output texts from completeknowledge bases, these generators will pro-duce feedback texts from knowledge basesin any state of completion.?
A user interface which presents output orfeedback texts to the author.
The feedbacktexts will include mouse-sensitive 'anchors'allowing the author to make semantic deci-sions, e.g.
by selecting options from pop-upmenus.The WYSIWYM system allows a domain expertspeaking any one of the supported languages toproduce good output texts in all of them.
Amore detailed description of the architecture isgiven in Scott et al (1998).2 Example  of  a WYSIWYM systemThe first application of WYSIWYM wasDRAFTER-II, a system which generates in-1054stuctions for using word processors and diarymanagers.
At present three languages aresupported: English, French and Italian.
As anexample, we will follow a session in which theauthor encodes instructions for scheduling anappointment with the OpenWindows CalendarManager.
The desired content is shown by thefollowing output text, which the system willgenerate when the knowledge base is complete:To schedule the appo in tment :Before starting, open the Appoint-ment Editor window by choosing theAppointment option from the Editmenu.Then proceed as follows:1 Choose the start time of the ap-pointment.2 Enter the description of the ap-pointment in the What field.3 Click on the Insert button.In outline, the knowledge base underlying thistext is as follows.
The whole instruction is rep-resented by a procedure instance with two at-tributes: a goal  (scheduling the appointment)and a method.
The method instance also has twoattributes: a p recond i t ion  (expressed by thesentence beginning 'Before starting') and a se-quence of s teps  (presented by the enumeratedlist).
Preconditions and steps are procedures intheir turn, so they may have methods as well asgoals.
Eventually we arrive at sub-proceduresfor which no method is specified: it is assumedthat the reader of the manual will be able toclick on the Insert button without being toldhow.Since in DRAFTER-II every output text isbased on a procedure, a newly initialised knowl-edge base is seeded with a single procedure in-stance for which the goal and method are unde-fined.
In Prolog notation, we can represent sucha knowledge base by the following assertions:p rocedure(proc l ) .goa l (p roc l ,  A).method(procl, B).Here proc l  is an identifier for the procedure in-stance; the assertion procedure (proc l )  meansthat this is an instance of type procedure;and the assertion goa l (proc l ,  A) means thatprocl has a goal attribute for which the valueis currently undefined (hence the variable A).When a new knowledge base is created,DRAFTER-II presents it to the author by gen-erating a feedback text in the currently selectedlanguage.
Assuming that this language is En-glish, the instruction to the generator will begenerate(proc l ,  eng l i sh ,  feedback)and the feedback text displayed to the authorwill beAchieve this  goal by applying thismethod.This text has several special features.?
Undefined attributes are shown throughanchors in bold face or italics.
(The systemactually uses a colour code: red instead ofbold face, and green instead of italics.)?
A red anchor (bold face) indicates that theattribute is obligatory: its value must bespecified.
A green anchor (italics) indicatesthat the attribute is optional.?
All anchors are mouse-sensitive.
By click-ing on an anchor, the author obtains a pop-up menu listing the permissible values ofthe attribute; by selecting one of these op-tions, the author updates the knowledgebase.Although the anchors may be tackled in anyorder, we will assume that the author proceedsfrom left to right.
Clicking on th is  goal yieldsthe pop-up menuchooseclickclosecreatesaveschedulestart(to save space, this figure omits some options),from which the author selects 'schedule'.
Eachoption in the menu is associated with an 'up-dater', a Prolog term (not shown to the author)that specifies how the knowledge base should beupdated if the option is selected.
In this case theupdater is1055insert(procl, goal, schedule)meaning that an instance of type scheduleshould become the value of the goal attributeon procl.
Running the updater yields an ex-tended knowledge base, including a new in-stance schedl with an undefined attributeactee.
(Assertions describing attribute valuesare indented to make the knowledge base easierto read.
)procedure (proc 1).goa l (p roc l ,  sched l ) .schedule  ( sched l ) .ac tee(sched l ,  C).method(proc l ,  B).From the updated knowledge base, the genera-tor produces a new feedback text.Schedule th is  event  by applying thismethod.Note that this text has been completely regen-erated.
It was not produced from the previoustext merely by replacing the anchor this  goalby a longer string.Continuing to specify the goal, the authornow clicks on th is  event.appointmentmeetingThis time the intended selection is 'appoint-ment', but let us assume that by mistake the au-thor drags the mouse too far and selects 'meet-ing'.
The feedback textSchedule the meeting by applying thismethod.immediately shows that an error has been made,but how can it be corrected?
This problem issolved in WYSIWYM by allowing the author toselect any span of the feedback text that repre-sents an attribute with a specified value, and tocut it, so that the attribute becomes undefined,while its previous value is held in a buffer.
Evenlarge spans, representing complex attribute val-ues, can be treated in this way, so that complexchunks of knowledge can be copied across fromone knowledge base to another.
When the au-thor selects the phrase 'the meeting', the systemdisplays a pop-up menu with two options:By selecting 'Cut', the author activates the up-datercut(schedl, actee)which updates the knowledge base by removingthe instance meetl ,  currently the value of theactee attribute on schedl ,  and holding it in abuffer.
With this attribute now undefined, thefeedback text reverts toSchedule th is  event  by applying thismethod.whereupon the author can once again expandth is  event.
This time, however, the pop-upmenu that opens on this anchor will include anextra option: that of pasting back the materialthat has just been cut.
Of course this option isonly provided if the instance currently held inthe buffer is a suitable value for the attributerepresented by the anchor.PasteappointmentmeetingThe 'Paste' option here will be associated withthe updaterpaste(schedl, actee)which would assign the instance currently in thebuffer, in this case meetl ,  as the value of theactee attribute on schedl .
Fortunately the au-thor avoids reinstating this error, and selects'appointment', yielding the following reassuringfeedback text:Schedule the appointment by applyingthis method.Note incidentally that this text presents aknowledge base that is potentially complete,since all obligatory attributes have been spec-ified.
This can be immediately seen from theabsence of any red (bold) anchors.Intending to add a method, the author nowclicks on this method.
In this case, the pop-upmenu shows only one option:\[ method \]1056Running the associated updater yields the fol-lowing knowledge base:p rocedure(proc l ) .goa l (proc l ,  sched l ) .schedule(schedl).actee(schedl, appt l ) .appointment(apptl).method(procl, methodl).method(methodl).precondit?on(methodl, D).steps(methodl, s teps l ) .s teps(s teps l ) .f i r s t ( s teps l ,  proc2).procedure(proc2) .goal (proc2,  F).method(proc2, G).rest(stepsl,  E).meeting(meetl).A considerable expansion has taken place herebecause the system has been configured to auto-matically instantiate obligatory attributes thathave only one permissible type of value.
(Inother words, it never presents red anchors withpop-up menus having only one option.)
Sincethe steps attribute on methodl is obligatory,and must have a value of type steps, the in-stance s teps l  is immediately created.
In itsturn, this instance has the attributes f i r s t  andres t  (it is a list), where f i r s t  is obligatory andmust be filled by a procedure.
A second proce-dure instance proc2 is therefore created, withits own goal and method.
To incorporate allthis new material, the feedback text is recast ina new pattern, the main goal being expressedby an infinitive construction instead of an im-perative:To schedule the appointment:First, achieve this precondition.Then follow these steps.1 Perform this act ion by applyingthis method.2 More steps.Note that at any stage the author can switchto one of the other supported languages, e.g.French.
This will result in a new call to thegeneratorgenerate(proc l ,  f rench,  feedback)and hence in a new feedback text expressing theprocedure proc 1.Insertion du rendez-vous:Avant de commencer, accomplir cettetdche.Ex~cuter les actions suivantes.1 Ex~cuter cette act ion en appli-quant cette mdthode.2 Autres sous-actions.Clicking for example on cette act ion will nowyield the usual options for instanciating a goalattribute, but expressed in French.
The asso-ciated updaters are identical to those for thecorresponding menu in English.choixcliquerfermer, .
?
?
,enregistrementinsertionlancementThe basic mechanism should now be clear,so let us advance to a later stage in which thescheduling procedure has been fully encoded.To schedule the appointment:First, open the Appointment Editorwindow.Then follow these steps.1 Choose the start time of theappointment by applying thismethod.2 Enter the description of the ap-pointment in the What field by ap-plying this method.3 Click on the Insert button by ap-plying this method.4 More steps.To open the Appointment Editor win-dow:First, achieve this precondition.Then follow these steps.1 Choose the Appointment optionfrom the Edit menu by applyingthis method.2 More steps.Two points about this feedback text are worthnoting.
First, to avoid overcrowding the main1057paragraph, the text planner has deferred thesub-procedure for opening the Appointment Ed-itor window, which is presented in a separateparagraph.
To maintain a connection, the ac-tion of opening the Appointment Editor windowis mentioned twice (as it happens, through dif-ferent constructions).
Secondly, no red (bold)anchors are left, so the knowledge base is poten-tially complete.
(Of course it could be extendedfurther, e.g.
by adding more steps.)
This meansthat the author may now generate an outputtext by switching the modality from 'Feedback'to 'Output'.
The resulting instruction to thegenerator will begenerate(procl, english, output)yielding the output text shown at the beginningof the section.
Further output texts can be ob-tained by switching to another language, e.g.French:Insertion du rendez-vous:Avant de commencer, ouvrir la fen~treAppointment Editor en choisissantl'option Appointment dans le menuEdit.Ex4cuter les actions suivantes:1 Choisir l'heure de fin du rendez-vous.2 Ins4rer la description du rendez-vous dans la zone de texte What.3 Cliquer sur le bouton Insert.Note that in output modality the generator ig-nores optional undefined attributes; the methodfor opening the Appointment Editor windowthus reduces to a single action which can bere-united with its goal in the main paragraph.3 S ign i f i cance  o f  WYSIWYM ed i t ingWYSIWYM editing is a new idea that requirespractical testing.
We have not yet carried outformal usability trials, nor investigated the de-sign of feedback texts (e.g.
how best to word theanchors), nor confirmed that adequate responsetimes could be obtained for full-scale applica-tions.
However, if satisfactory large-scale im-plementations prove feasible, the method bringsmany potential benefits.?
A document in natural anguage (possiblyaccompanied by diagrams) is the most flex-ible existing medium for presenting infor-mation.
We cannot be sure that all mean-ings can be expressed clearly in network di-agrams or other specialized presentations;we can be sure they can be expressed in adocument.?
It seems intuitively obvious that authorswill understand feedback texts much betterthan they understand alternative methodsof presenting knowledge bases, such as net-work diagrams.
Our experience has beenthat people can learn to use the DRAFTER-II system in a few minutes.?
Authors require no training in a controlledlanguage or any other presentational con-vention.
This avoids the expense of initialtraining; it also means that presentationalconventions need not be relearned when aknowledge base is re-examined after a delayof months or years.?
Since the knowledge base is presentedthrough a document in natural language,it becomes immediately accessible to any-one peripherally concerned with the project(e.g.
management, public relations, do-main experts from related projects).
Doc-umentation of the knowledge base, often atedious and time-consuming task, becomesautomatic.?
The model can be viewed and edited in anynatural anguage that is supported by thegenerator; further languages can be addedas needed.
When supported by a multilin-gual natural language generation system,as in DRAFTER-II, WYSIWYM editing obvi-ates the need for traditional language lo-calisation of the human-computer interface.New linguistic styles can also be added (e.g.a terminology suitable for novices ratherthan experts).?
As a result, WYSIWYM editing is ideal forfacilitating knowledge sharing and trans-fer within a multilingual project.
Speakersof several different languages could collec-tively edit the same knowledge base, eachuser viewing and modifying the knowledgein his/her own language.?
Since the knowledge base is presented asa document, large knowledge bases can be1058navigated by the methods familiar frombooks and from complex electronic docu-ments (e.g.
contents page, index, hyper-text links), obviating any need for specialtraining in navigation.The crucial advantage of WYSIWYM editing,compared with alternative natural anguage in-terfaces, is that it eliminates all the usual prob-lems associated with parsing and semantic in-terpretation.
Feedback texts with menus havebeen used before in the NL-Menu system (Ten-nant et al, 1983), but only as a means of pre-senting syntactic options.
NL-Menu guides theauthor by listing the extensions of the currentsentence that are covered by its grammar; inthis way it makes parsing more reliable, by en-forcing adherence to a sub-language, but pars-ing and interpretation are still required.So far WYSIWYM editing has been imple-mented in two domains: software instructions(as described here), and patient informationleaflets.
We are currently evaluating the us-ability of these systems, partly to confirm thatauthors do indeed find them easy to use, andpartly to investigate issues in the design of feed-back texts.Re ferencesAECMA.
1995.
AECMA Simplified English: Aguide for the preparation of aircraft main-tenance documentation i  the InternationalAerospace Maintenance Language.
AECMA,Brussels.E.
Goldberg, N. Driedger, and R. Kittredge.1994.
Using natural-language processing toproduce weather forcasts.
IEEE Expert,9(2):45-53.Anthony F. Hartley and C~cile L. Paris.
1997.Multilingual document production: Fromsupport for translating to support for au-thoring.
Machine Translation, Special Issueon New Tools for Human Translators, 12(1-2):109-129.L.
Iordanskaja, M. Kim, R. Kittredge,B.
Lavoie, and A. Polguere.
1992.
Genera-tion of extended bilingual statistical reports.In Proceedings of the l~th International Con-ference on Computational Linguistics, pages1019-1023, Nantes.Y.
Kim.
1990.
Effects of conceptual data mod-elling formalisms on user validation and an-alyst modelling of information requirements.PhD thesis, University of Minnesota.C@cile Paris, Keith Vander Linden, MarkusFischer, Anthony Hartley, Lyn Pemberton,Richard Power, and Donia Scott.
1995.
Asupport ool for writing multilingual instruc-tions.
In Proceedings of the l~th Interna-tional Joint Conference on Artificial Intelli-gence, pages 1398-1404, Montreal, Canada.M.
Petre.
1995.
Why looking isn't alwaysseeing: readership skills and graphical pro-gramming.
Communications of the ACM,38(6):33-42.R.
Power and N. Cavallotto.
1996.
Multilingualgeneration of administrative forms.
In Pro-ceedings of the 8th International Workshopon Natural Language Generation, pages 17-19, Herstmonceux Castle, UK.R.
Power, D. Scott, and R. Evans.
1998.
Whatyou see is what you meant: direct knowl-edge editing with natural anguage feedback.In Proceedings of the 13th Biennial Euro-pean Conference on Artificial Intelligence,Brighton, UK.Ehud Reiter and Chris Mellish.
1993.
Opti-mizing the costs and benefits of natural an-guage generation.
In Proceedings of the Inter-national Joint Conference on Artificial Intel-ligence, Chamberry France, pages 1164-1169.D.
Scott, R. Power, and R. Evans.
1998.
Gener-ation as a solution to its own problem.
In Pro-ceedings of the 9th International Workshopon Natural Language Generation, Niagara-on-the-Lake, Canada.D.
Skuce and T. Lethbridge.
1995.
CODE4:A unified system for managing conceptualknowledge.
International Journal of Human-Computer Studies, 42:413-451.H.
Tennant, K. Ross, R. Saenz, C. Thompson,and J. Miller.
1983.
Menu-based natural an-guage understanding.
In Proceedings of theAssociation of Computational Linguistics.1059
