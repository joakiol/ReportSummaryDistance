Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 475?482,Sydney, July 2006. c?2006 Association for Computational LinguisticsGF Parallel Resource Grammars and RussianJanna KhegaiDepartment of Computer ScienceChalmers University of TechnologySE-41296 Gothenburg, Swedenjanna@cs.chalmers.seAbstractA resource grammar is a standard libraryfor the GF grammar formalism.
It raisesthe abstraction level of writing domain-specific grammars by taking care of thegeneral grammatical rules of a language.GF resource grammars have been built inparallel for eleven languages and share acommon interface, which simplifies multi-lingual applications.
We reflect on our ex-perience with the Russian resource gram-mar trying to answer the questions: howwell Russian fits into the common inter-face and where the line between language-independent and language-specific shouldbe drawn.1 IntroductionGrammatical Framework (GF) (Ranta, 2004) is agrammar formalism designed in particular to serveas an interlingua platform for natural language ap-plications in sublanguage domains.
A domain canbe described using the GF grammar formalism andthen processed by GF.
Such descriptions are calledapplication grammars.A resource grammar (Ranta, to appear) is ageneral-purpose grammar that forms a basis forapplication grammars.
Resource grammars haveso far been implemented for eleven languages inparallel.
The structural division into abstract andconcrete descriptions, advocated in GF, is usedto separate the language-independent common in-terface or Application Programming Interface(API) from corresponding language-specific im-plementations.
Consulting the abstract part is suf-ficient for writing an application grammar withoutdescending to implementation details.
This ap-proach raises the level of application grammar de-velopment and supports multilinguality, thus, pro-viding both linguistic and computational advan-tages.The current coverage is comparable with theCore Language Engine (CLE) project (Rayneret al, 2000).
Other well-known multilingualgeneral-purpose grammar projects that GF canbe related to, are LFG grammars (Butt et al,1999) and HPSG grammars (Pollard and Sag,1994), although their parsing-oriented unification-based formalisms are very different from theGF generation-oriented type-theoretical formal-ism (Ranta, 2004).A Russian resource grammar was added aftersimilar grammars for English, Swedish, Frenchand German (Arabic, Italian, Finnish, Norwegian,Danish and Spanish are also supported in GF).
Alanguage-independent API representing the cover-age of the resource library, therefore, was alreadyavailable.
The task was to localize modules forRussian.A resource grammar has morphological andsyntactic modules.
Morphological modules in-clude a description of word classes, inflectionalparadigms and a lexicon.
Syntactic modules com-prise a description of phrasal structures for ana-lyzing bigger than one-word entities and variouscombination rules.
Note, that semantics, definingthe meanings of words and syntactic structures,is constructed in application grammars.
This isbecause semantics is rather domain-specific, and,thus, it is much easier to construct a language-independent semantic model for a particular do-main than a general-purpose resource semantics.In the following sections we consider typicaldefinitions from different resource modules focus-ing on aspects specific to Russian.
We will also475demonstrate the library usage in a sample applica-tion grammar.2 Word ClassesEvery resource grammar starts with a descrip-tion of word classes.
Their names belong tothe language-independent API, although their im-plementations are language-specific.
Russian fitsquite well into the common API here, since likeall other languages it has nouns, verbs, adjectivesetc.
The type system for word classes of a lan-guage is the most stable part of the resource gram-mar library, since it follows traditional linguis-tic descriptions (Shelyakin, 2000; Wade, 2000;Starostin, 2005).
For example, let us look atthe implementation of the Russian adjective typeAdjDegree:paramDegree = Pos | Comp | Super;Case = Nom|Gen|Dat|Acc|Inst|Prep;Animacy = Animate | Inanimate;Gender = Masc | Fem | Neut;GenNum = ASingular Gender|APlural;AdjForm = AF Case Animacy GenNum;operAdjDegree : Type ={s : Degree => AdjForm => Str};First, we need to specify parameters (param) onwhich inflection forms depend.
A vertical slash(|) separates different parameter values.
While inEnglish the only parameter would be comparisondegree (Degree), in Russian we have many moreparameters:?
Case, for example: bol?xie doma ?bol?xih domov (big houses ?
big houses?).?
Animacy only plays a role in the ac-cusative case (Acc) in masculine (Masc)singular (ASingular) and in plural forms(APlural), namely, accusative animateform is the same as genitive (Gen) form,while accusative inanimate form is the sameas nominative (Nom):  lbl bol?xiedoma ?
lbl bol?xih mu?qin (I lovebig houses ?
I love big men).?
Gender only plays role in singular:bol?xo dom ?
bol?xa maxina (bighouse ?
big car).
The plural never makesa gender distinction, thus, Gender andnumber are combined in the GenNum pa-rameter to reduce redundant inflection tableitems.
The possible values of GenNum areASingular Masc, ASingular Fem,ASingular Neut and APlural.?
Number, for instance: bol?xo dom ?bol?xie doma (a big house ?
big houses).?
Degree can be more complex, since mostRussian adjectives have two comparative(Comp) forms: declinable attributive andindeclinable predicative1: bolee vysoki(more high) ?
vyxe (higher), and morethan one superlative (Super) forms: samyvysoki (the most high) ?
naivysxi (thehighest).Even another parameter can be added, sinceRussian adjectives in the positive (Pos) degreehave long and short forms: spokona reka (thecalm river) ?
reka ?
spokona (the river iscalm).
The short form has no case declension,thus, it can be considered as an additional case(Starostin, 2005).
Note, that although the predica-tive usage of the long form is perfectly grammat-ical, it can have a slightly different meaning com-pared to the short form.
For example: long, pred-icative on ?
bol?no (?he is crazy?)
vs. short,predicative on ?
bolen (?he is ill?
).An oper judgement combines the name ofthe defined operation, its type, and an expres-sion defining it.
The type for degree adjec-tive (AdjDegree) is a table of strings (s: ..=> ..=> Str) that has two main dimensions:Degree and AdjForm, where the last one is acombination of the parameters listed above.
Thereason to have the Degree parameter as a sepa-rate dimension is that a special type of adjectivesAdj that just have positive forms is useful.
It in-cludes both non-degree adjective classes: posses-sive, like mamin (mother?s), lisi (fox?es), andrelative, like russki (Russian).As a part of the language-independent API, thename AdjDegree denotes the adjective degreetype for all languages, although each language hasits own implementation.
Maintaining parallelismamong languages is rather straightforward at thisstage, since the only thing shared is the name of1The English -er/more and -est/most variations are exclu-sive, while in Russian both forms are valid.476a part of speech.
A possible complication is thatparsing with inflectionally rich languages can beless efficient compared to, for instance, English.This is because in GF all forms of a word are keptin the same declension table, which is convenientfor generation, since GF is a generation-orientedgrammar formalism.
Therefore, the more formsthere are, the bigger tables we have to store inmemory, which can become an issue as the gram-mars grow and more languages are added (Dadaand Ranta, 2006).3 Inflection Paradigms and LexiconBesides word class declarations, morphologymodules also contain functions defining commoninflectional patterns (paradigms) and a lexicon.This information is language-specific, so fittinginto the common API is not a consideration here.Paradigms are used to build the lexicon incremen-tally as new words are used in applications.
A lex-icon can also be extracted from other sources.Unlike syntactic descriptions, morphologicaldescriptions for many languages have been al-ready developed in other projects.
Thus, consid-erable efforts can be saved by reusing existingcode.
How easy we can perform the transforma-tion depends on how similar the input and outputformats are.
For example, the Swedish morphol-ogy module is generated automatically from thecode of another project, called Functional Mor-phology (Forsberg and Ranta, 2004).
In this casethe formats are very similar, so extracting is ratherstraightforward.
However, this might not be thecase if we build the lexicon from a very differentrepresentation or even from corpora, where post-modification by hand is simply inevitable.A paradigm function usually takes one or morestring arguments and forms a lexical entry.
Forexample, the function nGolova describes the in-flectional pattern for feminine inanimate nounsending with -a in Russian.
It takes the basic formof a word as a string (Str) and returns a noun (CNstands for Common Noun, see definition in sec-tion 4).
Six cases times two numbers gives twelveforms, plus two inherent parameters Animacyand Gender (defined in section 2):opernGolova: Str -> CN = \golova ->let golov = init golova in {s = table {SF Sg Nom => golov+"a";SF Sg Gen => golov+"y";SF Sg Dat => golov+"e";SF Sg Acc => golov+"u";SF Sg Inst => golov+"o";SF Sg Prepos => golov+"e";SF Pl Nom => golov+"y";SF Pl Gen => golov;SF Pl Dat => golov+"am";SF Pl Acc => golov+"y";SF Pl Inst => golov+"ami";SF Pl Prepos => golov+"ah" };g = Fem;anim = Inanimate };where \golova is a ?-abstraction, which meansthat the function argument of the type Str will bedenoted as golova in the definition.
The con-struction let...in is used to extract the wordstem (golov), in this case, by cutting off the lastletter (init).
Of course, one could supply thestem directly, however, it is easier for the gram-marian to just write the whole word without wor-rying what stem it has and let the function takecare of the stem automatically.
The table structureis simple ?
each line corresponds to one parame-ter value.
The sign => separates parameter valuesfrom corresponding inflection forms.
Plus sign de-notes string concatenation.The type signature (nGolova: Str ->CN) and maybe a comment telling that theparadigm describes feminine inanimate nounsending with -a are the only things the grammar-ian needs to know, in order to use the func-tion nGolova.
Implementation details (the in-flection table) are hidden.
The name nGolovais actually a transliteration of the Russian wordgolova (head) that represents nouns conformingto the pattern.
Therefore, the grammarian can justcompare a new word to the word golova in or-der to decide whether nGolova is appropriate.For example, we can define the word mashina(maxina) corresponding to the English word car.Maxina is a feminine, inanimate noun endingwith -a.
Therefore, a new lexical entry for theword maxina can be defined by:oper mashina = nGolova "maxina" ;Access via type signature becomes especiallyhelpful with more complex parts of speech likeverbs.Lexicon and inflectional paradigms arelanguage-specific, although, an attempt to build477a general-purpose interlingua lexicon in GF hasbeen made.
Multilingual dictionary can workfor words denoting unique objects like the sunetc., but otherwise, having a common lexiconinterface does not sound like a very good idea orat least something one would like to start with.Normally, multilingual dictionaries have bilingualorganization (Kellogg, 2005).At the moment the resource grammar has aninterlingua dictionary for, so called, closed wordclasses like pronouns, prepositions, conjunctionsand numerals.
But even there, a number of dis-crepancies occurs.
For example, the impersonalpronoun one (OnePron) has no direct corre-spondence in Russian.
Instead, to express thesame meaning Russian uses the infinitive: eslioqen?
zahotet?, mo?no v kosmos uletet?
(if one really wants, one can fly into the space).Note, that the modal verb can is transformedinto the adverb mo?no (it is possible).
Theclosest pronoun to one is the personal pronounty (you), which is omitted in the final sen-tence: esli oqen?
zahoqex?, mo?ex?
v kos-mos uletet?.
The Russian implementation ofOnePron uses the later construction, skipping thestring (s), but preserving number (n), person (p)and animacy (anim) parameters, which are nec-essary for agreement:oper OnePron: Pronoun = {s = "";n = Singular;p = P2;anim = Animate };4 SyntaxSyntax modules describe rules for combiningwords into phrases and sentences.
Designing alanguage-independent syntax API is the most dif-ficult part: several revisions have been made as theresource coverage has grown.
Russian is very dif-ferent from other resource languages, therefore, itsometimes fits poorly into the common API.Several factors have influenced the API struc-ture so far: application domains, parsing algo-rithms and supported languages.
In general, theresource syntax is built bottom-up, starting withrules for forming noun phrases and verb phrases,continuing with relative clauses, questions, imper-atives, and coordination.
Some textual and dia-logue features might be added, such as contrast-ing, topicalization, and question-answer relations.On the way from dictionary entries towardscomplete sentences, categories loose declensionforms and, consequently, get more parameters that?memorize?
what forms are kept, which is neces-sary to arrange agreement later on.
Closer to theend of the journey string fields are getting longeras types contain more complex phrases, while pa-rameters are used for agreement and then left be-hind.
Sentence types are the ultimate types thatjust contain one string and no parameters, sinceeverything is decided and agreed on by that point.Let us take a look at Russian nouns as an exam-ple.
A noun lexicon entry type (CN) mentioned insection 3 is defined like the following:paramSubstForm = SF Number Case;operCN: Type = {s: SubstForm => Str;g: Gender;anim: Animacy };As we have seen in section 3, the string table fields contains twelve forms.
On the other hand, touse a noun in a sentence we need only one formand several parameters for agreement.
Thus, theultimate noun type to be used in a sentence as anobject or a subject looks more like Noun Phrase(NP):oper NP : Type = {s: Case => Str;Agreement: {n: Number;p: Person;g: Gender;anim: Animacy} };which besides Gender and Animacy also con-tains Number and Person parameters (definedin section 2), while the table field s only containssix forms: one for each Case value.The transition from CN to NP can be done viavarious intermediate types.
A noun can get modi-fiers like adjectives ?
krasna komnata (the redroom), determiners ?
mnogo xuma (much ado),genitive constructions ?
gero naxego vremeni(a hero of our time), relative phrases ?
qelovek,kotory smets (the man who laughs).
Thus,the string field (s) can eventually contain morethan one word.
A noun can become a part of otherphrases, e.g.
a predicate in a verb phrase ?
znanie?
sila (knowledge is power) or a complement478in a prepositional phrase ?
za reko, v teniderev?ev (across the river and into the trees).The language-independent API has an hierarchyof intermediate types all the way from dictionaryentries to sentences.
All supported languages fol-low this structure, although in some cases this doesnot happen naturally.
For example, the divisionbetween definite and indefinite noun phrases is notrelevant for Russian, since Russian does not haveany articles, while being an important issue aboutnouns in many European languages.
The commonAPI contains functions supporting such division,which are all conflated into one in the Russian im-plementation.
This is a simple case, where Rus-sian easily fits into the common API, although acorresponding phenomenon does not really exist.Sometimes, a problem does not arise until thejoining point, where agreement has to be made.For instance, in Russian, numeral modificationuses different cases to form a noun phrase in nom-inative case: tri tovariwa (three comrades),where the noun is in nominative, but pt?
to-variwe (five comrades), where the noun is ingenitive!
Two solutions are possible.
An extranon-linguistic parameter bearing the semantics ofa numeral can be included in the Numeral type.Alternatively, an extra argument (NumberVal),denoting the actual number value, can be in-troduced into the numeral modification function(IndefNumNP) to tell apart numbers with the lastdigit between 2 and 4 from other natural numbers:oper IndefNumNP: NumberVal ->Numeral -> CN -> NP;Unfortunately, this would require changingthe language-independent API (adding theNumberVal argument) and consequent adjust-ments in all other languages that do not needthis information.
Note, that IndefNumNP,Numeral, CN (Common Noun) and NP (NounPhrase) belong to the language-independentAPI, i.e.
they have different implementations indifferent languages.
We prefer the encapsulationversion, since the other option will make thefunction more error-prone.Nevertheless, one can argue for both solutions,which is rather typical while designing a com-mon interface.
One has to decide what shouldbe kept language-specific and what belongs to thelanguage-independent API.
Often this decision ismore or less a matter of taste.
Since Russian isnot the main language in the GF resource library,the tendency is to keep things language-specific atleast until the common API becomes too restric-tive for a representative number of languages.The example above demonstrates a syntacticconstruction, which exist both in the language-independent API and in Russian although the com-mon version is not as universal as expected.
Thereare also cases, where Russian structures are notpresent in the common interface at all, since thereis no direct analogy in other supported languages.For instance, a short adjective form is used inphrases like mne nu?na pomow?
(I need help)and e interesno iskusstvo (she is interestedin art).
In Russian, the expressions do not haveany verb, so they sound like to me needed helpand to her interesting art, respectively.
Here is thefunction predShortAdj describing such adjec-tive predication2 specific to Russian:oper predShortAdj: NP -> Adj ->NP -> S = \I, Needed, Help -> {s = let {toMe = I.s !
Dat;needed = Needed.s !AF Short Help.g Help.n;help = Help.s !
Nom} intoMe ++ needed ++ help };predShortAdj takes three arguments: a non-degree adjective (Adj) and two noun phrases (NP)that work as a predicate, a subject and an object inthe returned sentence (S).
The third line indicatesthat the arguments will be denoted as Needed, Iand Help, respectively (?-abstraction).
The sen-tence type (S) only contains one string field s. Theconstruction let...in is used to first form theindividual words (toMe, needed and help) toput them later into a sentence.
Each word is pro-duced by taking appropriate forms from inflectiontables of corresponding arguments (Needed.s,Help.s and I.s).
In the noun arguments Iand Help dative and nominative cases, respec-tively, are taken (!-sign denotes the selection op-eration).
The adjective Needed agrees with thenoun Help, so Help?s gender (g) and number(n) are used to build an appropriate adjective form(AF Short Help.g Help.n).
This is ex-actly where we finally use the parameters fromHelp argument of the type NP defined above.We only use the declension tables from the argu-2In this example we disregard adjective past/future tensemarkers bylo/budet.479ments I and Needed ?
other parameters are justthrown away.
Note, that predShortAdj usesthe type Adj for non-degree adjectives instead ofAdjDegree presented in section 2.
We also usethe Short adjective form as an extra Case-value.5 An Example Application GrammarThe purpose of the example is to show similaritiesbetween the same grammar written for differentlanguages using the resource library.
Such similar-ities increase the reuse of previously written codeacross languages: once written for one languagea grammar can be ported to another languagerelatively easy and fast.
The more language-independent API functions (names conventionallystarting with a capital letter) a grammar contains,the more efficient the porting becomes.We will consider a fragment of Health ?
asmall phrase-book grammar written using the re-source grammar library in English, French, Ital-ian, Swedish and Russian.
It can form phrases likeshe has a cold and she needs a painkiller.
The fol-lowing categories (cat) and functions (fun) con-stitute language-independent abstract syntax (do-main semantics):catPatient; Condition;Medicine; Prop;funShePatient: Patient;CatchCold: Condition;PainKiller: Medicine;BeInCondition: Patient ->Condition -> Prop;NeedMedicine: Patient ->Medicine -> Prop;And: Prop -> Prop -> Prop;Abstract syntax determines the class of statementswe are able to build with the grammar.
The cat-egory Prop denotes complete propositions likeshe has a cold.
We also have separate categoriesof smaller units like Patient, Medicine andCondition.
To produce a proposition one can,for instance, use the function BeInCondition,which takes two arguments of the types Patientand Condition and returns the result of the typeProp.
For example, we can form the phrase shehas a cold by combining three functions above:BeInConditionShePatient CatchColdwhere ShePatient and CatchCold areconstants used as arguments to the functionBeInCondition.Concrete syntax translates abstract syntax intonatural language strings.
Thus, concrete syntax islanguage-specific.
However, having the language-independent resource API helps to make even apart of concrete syntax shared among the lan-guages:lincatPatient = NP;Condition = VP;Medicine = CN;Prop = S;linAnd = ConjS;ShePatient = SheNP;BeInCondition = PredVP;The first group (lincat) tells that the semanticcategories Patient, Condition, Medicineand Prop are expressed by the resource linguis-tic categories: noun phrase (NP), verb phrase(VP), common noun (CN) and sentence (S), re-spectively.
The second group (lin) tells that thefunction And is the same as the resource coordina-tion function ConjS, the function ShePatientis expressed by the resource pronoun SheNPand the function BeInCondition is expressedby the resource function PredVP (the classicNP VP->S rule).
Exactly the same rules work forall five languages, which makes the porting triv-ial3.
However, this is not always the case.Writing even a small grammar in an inflection-ally rich language like Russian requires a lot ofwork on morphology.
This is the part where us-ing the resource grammar library may help, sinceresource functions for adding new lexical entriesare relatively easy to use.
For instance, the wordpainkiller is defined similarly in five languages bytaking a corresponding basic word form as an ar-gument to an inflection paradigm function:-- English:PainKiller = regN "painkiller";-- French:PainKiller = regN "calmant";-- Italian:PainKiller = regN "calmante";3Different languages can actually share the same code us-ing GF parameterized modules (Ranta, to appear)480-- Swedish:PainKiller = regGenN"sma?rtstillande" Neut;-- Russian:PainKiller = nEe "obezbolivawee";The Gender parameter (Neut) is provided forSwedish.In the remaining functions we see bigger dif-ferences: the idiomatic expressions I have a coldin French, Swedish and Russian is formed by ad-jective predication, while a transitive verb con-struction is used in English and Italian.
There-fore, different functions (PosA and PosTV) areapplied.
tvHave and tvAvere denote transitiveverb to have in English and Italian, respectively.IndefOneNP is used for forming an indefinitenoun phrase from a noun in English and Italian:-- English:CatchCold = PosTV tvHave(IndefOneNP (regN "cold"));-- Italian:CatchCold = PosTV tvAvere(IndefOneNP (regN "raffreddore"));-- French:CatchCold = PosA (regA "enrhume?")
-- Swedish:CatchCold = PosA(mk2A "fo?rkyld" "fo?rkylt");-- Russian:CatchCold = PosA(adj yj "prostu?en");In the next example the Russian version is ratherdifferent from the other languages.
The phraseI need a painkiller is a transitive verb predica-tion together with complementation rule in En-glish and Swedish.
In French and Italian we needto use the idiomatic expressions avoir besoin andaver bisogno.
Therefore, a classic NP VP rule(PredVP) is used.
In Russian the same meaningis expressed by using adjective predication definedin section 4:--English:NeedMedicine pat med = predV2(dirV2 (regV "need"))pat (IndefOneNP med);-- Swedish:NeedMedicine pat med = predV2(dirV2 (regV "beho?ver"))pat (DetNP nullDet med);-- French:NeedMedicine pat med = PredVPpat (avoirBesoin med);-- Italian:NeedMedicine pat med = PredVPpat (averBisogno med);-- Russian:NeedMedicine pat med =predShortAdj pat(adj yj "nu?en") med;Note, that the medicine argument (med) is usedwith indefinite article in the English version(IndefOneNP), but without articles in Swedish,French and Italian.
As we have mentionedin section 4, Russian does not have any arti-cles, although the corresponding operations ex-ist for the sake of consistency with the language-independent API.Health grammar shows that the more similarlanguages are, the easier porting will be.
How-ever, as with traditional translation the grammar-ian needs to know the target language, since it isnot clear whether a particular construction is cor-rect in both languages, especially, when the lan-guages seem to be very similar in general.6 ConclusionGF resource grammars are general-purpose gram-mars used as a basis for building domain-specificapplication grammars.
Among pluses of usingsuch grammar library are guaranteed grammatical-ity, code reuse (both within and across languages)and higher abstraction level for writing applicationgrammars.
According to the ?division of labor?principle, resource grammars comprise the nec-essary linguistic knowledge allowing applicationgrammarians to concentrate on domain semantics.Following Chomsky?s universal grammar hy-pothesis (Chomsky, 1981), GF multilingual re-source grammars maintain a common API for allsupported languages.
This is implemented using481GF?s mechanism of separating between abstractand concrete syntax.
Abstract syntax declares uni-versal principles, while language-specific parame-ters are set in concrete syntax.
We are not trying toanswer the general question what constitutes uni-versal grammar and what beyond universal gram-mar differentiates languages from one another.
Welook at GF parallel resource grammars as a way tosimplify multilingual applications.The implementation of the Russian resourcegrammar proves that GF grammar formalism al-lows us to use the language-independent API fordescribing sometimes rather peculiar grammaticalvariations in different languages.
However, main-taining parallelism across languages has its lim-its.
From the beginning we were trying to put asmuch as possible into a common interface, sharedamong all the supported languages.
Word classesseem to be rather universal at least for the elevensupported languages.
Syntactic types and somecombination rules are more problematic.
For ex-ample, some Russian rules only make sense asa part of language-specific modules while somerules that were considered universal at first are notdirectly applicable to Russian.Having a universal resource API and grammarsfor other languages has made developing Rus-sian grammar much easier comparing to doing itfrom scratch.
The abstract syntax part was simplyreused.
Some concrete syntax implementationslike adverb description, coordination and subor-dination required only minor changes.
Even formore language-specific rules it helps a lot to havea template implementation that demonstrates whatkind of phenomena should be taken into account.The GF resource grammar development ismostly driven by application domains like soft-ware specifications (Burke and Johannisson,2005), math problems (Caprotti, 2006) or trans-port network dialog systems (Bringert et al,2005).
The structure of the resource grammar li-brary is continually influenced by new domainsand languages.
The possible direction of GF par-allel resource grammars?
development is extend-ing the universal interface by domain-specific andlanguage-specific parts.
Such adaptation seems tobe necessary as the coverage of GF resource gram-mars grows.AcknowledgementsThanks to Professor Arto Mustajoki for fruitfuldiscussions and to Professor Robin Cooper forreading and editing the final version of the paper.Special thanks to Professor Aarne Ranta, my su-pervisor and the creator of GF.ReferencesB.
Bringert, R. Cooper, P. Ljunglo?f, and A. Ranta.2005.
Multimodal Dialogue System Grammars.
InDIALOR?05, Nancy, France.D.A.
Burke and K. Johannisson.
2005.
TranslatingFormal Software Specifications to Natural Language/ A Grammar-Based Approach.
In LACL 2005,LNAI 3402, pages 51?66.
Springer.M.
Butt, T. H. King, M.-E. Ni no, and F. Segond, edi-tors.
1999.
A Grammar Writer?s Cookbook.
Stan-ford: CSLI Publications.O.
Caprotti.
2006.
WebALT!
Deliver Mathematics Ev-erywhere.
In SITE 2006, Orlando, USA.N.
Chomsky.
1981.
Lectures on Government andBinding: The Pisa Lectures.
Dordrecht, Holland:Foris Publications.A.
E. Dada and A. Ranta.
2006.
Implement-ing an arabic resource grammar in grammaticalframework.
At 20th Arabic Linguistics Sym-posium, Kalamazoo, Michigan.
URL: www.mdstud.chalmers.se/?eldada/paper.pdf.M.
Forsberg and A. Ranta.
2004.
Functional morphol-ogy.
In ICFP?04, pages 213?223.
ACM Press.M.
Kellogg.
2005.
Online french, italian and spanishdictionary.
URL: www.wordreference.com.C.
Pollard and I.
Sag.
1994.
Head-Driven PhraseStructure Grammar.
University of Chicago Press.A.
Ranta.
2004.
Grammatical Framework: A Type-theoretical Grammar Formalism.
The Journal ofFunctional Programming, 14(2):145?189.A.
Ranta.
to appear.
Modular Grammar Engineer-ing in GF.
Research in Language and Computa-tion.
URL: www.cs.chalmers.se/?aarne/articles/ar-multieng.pdfM.
Rayner, D. Carter, P. Bouillon, V. Digalakis, andM.
Wire?n.
2000.
The spoken language translator.Cambridge University Press.M.A.
Shelyakin.
2000.
Spravochnik po russkoj gram-matike (in Russian).
Russky Yazyk, Moscow.S.
Starostin.
2005.
Russian morpho-engine on-line.URL: starling.rinet.ru/morph.htm.T.
Wade.
2000.
A Comprehensive Russian Grammar.Blackwell Publishing.482
