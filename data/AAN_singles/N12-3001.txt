Proceedings of the NAACL-HLT 2012: Demonstration Session, pages 1?4,Montre?al, Canada, June 3-8, 2012. c?2012 Association for Computational LinguisticsDeSoCoRe: Detecting Source Code Re-Use across Programming Languages?Enrique Flores, Alberto Barro?n-Ceden?o, Paolo Rosso, and Lidia MorenoELiRF, Departament of Information Systems and ComputationUniversidad Polite?cnica de Valencia, Spain{eflores,lbarron,prosso,lmoreno}@dsic.upv.esAbstractSource code re-use has become an importantproblem in academia.
The amount of codeavailable makes necessary to develop systemssupporting education that could address theproblem of detection of source code re-use.We present the DeSoCoRe tool based on tech-niques of Natural Language Processing (NLP)applied to detect source code re-use.
DeSo-CoRe compares two source codes at the levelof methods or functions even when written indifferent programming languages.
The systemprovides an understandable output to the hu-man reviewer in order to help a teacher to de-cide whether a source code is re-used.1 IntroductionIdentifying whether a work has been re-used has re-ceived increasing interest in recent years.
As fordocuments in natural language, the amount of sourcecode on Internet is increasing; facilitating the re-useof all or part of previously implemented programs.1If no reference to the original work is included, pla-giarism would be committed.
The interest for detect-ing software re-use is great discouraging academiccheating.Many online tools exist for detecting re-use intext, such as Churnalism2.
To the best of our knowl-edge the unique online service to detecting re-use in?Screencast available at: http://vimeo.com/33148670.
Thetool is available at: http://memex2.dsic.upv.es:8080/DeSoCoRe/1Source code re-use is often allowed, thanks to licenses asthose of Creative Commons (http://creativecommons.org/ )2http://churnalism.com/source code is JPlag3.
This tool can process differentprogramming languages, but at monolingual level.This paper presents the DeSoCoRe tool for de-tection source code re-use across programming lan-guages.
We estimate the similarity between twosource codes independently of the programming lan-guage using NLP techniques.
In fact, programminglanguages are similar to natural languages; both canbe represented as strings of symbols (characters,words, phrases, etc.
).DeSoCoRe aims at supporting a reviewer in theprocess of detecting highly similar source code func-tions.
It allows to visualize the matches detected be-tween two source codes d and dq.
The programs arerepresented as a graph.
An edge exists between afunction in dq and a function in d if re-use betweenthem is suspected.
The code chunks are displayedto the user for further review.
With the informationprovided, the reviewer can decide whether a frag-ment is re-used or not.2 Related WorkIn the previous section we mention only one onlinetool but many research works for source code re-usedetection exist.
Two main approaches have been ex-plored: content-based and structure-based.Content-based approaches are based on analysisof strings within the source codes.
The pioneeringwork of (Halstead, 1972) is based on units count-ings.
He counts the total number of operands, totalnumber of different operands and number of opera-tors, among others.3https://www.ipd.uni-karlsruhe.de/jplag/1Figure 1: Architecture of DeSoCoRe tool.
The source code d has N functions, and dq has M functions.
Each functionof d is compared against all the functions of dq .NochangesCommentsIdentifiersVariable positionProcedure combinationProgram statementsControl logicLevel 0Level 1Level 2Level 3Level 4Level 5Level 6Figure 2: Levels of program modifications in a plagiarismspectrum proposed by Faidhi and Robinson.Structure-based approaches, the most used up todate, focus the analysis on the code structure (ex-ecution tree) in order to estimate the level of simi-larity between two source codes.
A seminal modelis the proposed by (Whale, 1990b).
This approachcodifies branches, repeats, and statements in orderto estimate the similarity between two programs.This model has inspired several other tools, such asPlague (Whale, 1990a) and its further developmentsYAP[1,2,3] (Wise, 1992).JPlag (Prechelt et al, 2002) combines both ap-proaches.
In the first stage, it exploits syntax in orderto normalize variables and function names.
In thesecond stage, it looks for common strings betweenprograms.
This work attempts to detect several lev-els of obfuscation4.
It achieves better results thanJPlag for highly obfuscated cases but worst resultswith low degree of obfuscation.JPlag is able to detect source code re-use in dif-ferent programming languages although at monolin-gual level; that is, one programming language ata time.
None of the reviewed approaches is able4Obfuscation in re-use can be considered as reformulation,which inserts noise.to perform cross-language analysis.
To the best ofour knowledge the only approach to analyze cross-language source code re-use is the one of (Arwin andTahaghoghi, 2006).
Instead of processing sourcecode, this approach compares intermediate code pro-duced by a compiler which includes noise in the de-tection process.
The comparison is in fact mono-lingual and compiler dependent.
The resulting tool,Xplag, allows to compute similarity between codesin Java and C.3 ArchitectureAs shown in Figure 1, DeSoCoRe consists of threegeneral modules.
As input user gives a pair of sourcecodes (d, dq).
The source code splitter is responsi-ble for dividing the codes in functions.
To split eachcode into functions we have developed syntactic an-alyzers for Python and for C syntax family language:C, C++, Java, C#, etc.The next module compares the functions of dqagainst the functions of d. To make this comparisonwe have divided the module into three sub-modules:(a) Pre-processing: line breaks, tabs and spaces re-moval as well as case folding; (b) Features extrac-tion: character n-grams extraction, weighting basedon normalized term frequency (tf ); and (c) Compar-ison: a cosine similarity estimation.
As output, weobtain a similarity value in the range [0-1] for all thepairs of functions between the source codes.We carried out several experiments in order tofind the best way to detect re-use in source codes.These experiments were inspired by what proposedin (Faidhi and Robinson, 1987).
They describes themodifications that a programmer makes to hide there-use of source code as Figure 2 shows.
These lev-els are: (i) changes in comments and indentation;2(ii) changes in identifiers; (iii) changes in declara-tions; (iv) changes in program modules; (v) changesin the program statements; (vi) changes in the de-cision logic.
As result of these experiments we ob-tained best configuration of our system to use theentire source code and to apply 3-grams (Flores etal., 2011).Once the similarity value has been calculated forall the possible pairs, the pair selector decides whatpairs are good source re-used candidates.
This mod-ule has to discard the pairs which have obtained asimilarity value lower than a threshold establishedby the user.
As output DeSoCoRe returns the suspi-cious pairs that have been re-used.4 DemonstrationIn order to interact with our developed system, weprovide a Java applet interface.
It is divided in twointerfaces: (i) input screen: which allows the userfor inserting two source codes, select their program-ming language and additionally to select a value forthe similarity threshold;5 (ii) output screen: whichshows the results divided in two sections: (a) agraphical visualization of the codes; and (b) a plaintext representation of the codes.
In the first sectionwe have used the Prefuse Library6 in order to draw agraph representing the similarity between the func-tions of the source codes.
The painted graph consistsof two red nodes which represent each source code.Their functions are represented by purple nodes andconnected to the source code node with edges.
If anyof these functions has been selected by the system asre-used, its nodes will be connected to a node fromthe other source code.Finally, a node is marked in red if it composes apotential case of reuse.
When a function is pointed,the plain text section displays the source code.
Also,if this function has any potential case of re-use, thefunction and the potential re-used function will beshown to perform a manual review of the codes.
Inorder to be introduced to DeSoCoRe an example isprovided and can be accessed clicking on the Ex-ample button.
Figure 3 shows an example of twosupicious source codes: one in C++ and one in Java.5In agreement with (Flores et al, 2011), the default thresh-old for C-like languages (C, C++, Java...) is 0.8.6Software tools for creating rich interactive data visualiza-tions (http://prefuse.org/ )The user is able to start the estimation of similarityclicking on Estimate!
button.After similarity estimation, the result is displayedas in Figure 3(a).
For exploratory purpouses, ex-ample source codes are available through the Ex-ample button.
The user is able to start the estima-tion of similarity clicking on Estimate!
button.
Fig-ure 3(b) shows an example of potential cases of re-use.
The function crackHTTPAuth is selected in theright source code node, and the selected as possi-ble case of re-use is marked on orange.
The plaintext representation of these two parts of source codeshows that they are practically identical.5 Conclusions and Future WorkThe main goal of this research work is to providea helpful tool for source code reviewers in order tohelp them to decide wheter or not a source codehas been re-used.
DeSoCoRe is the first online toolwhich it can detect source code re-use across lan-guages as far of our knowledge.We have developed a methodology for detect-ing source code re-use across languages, and haveshown their functionality by presenting DeSoCoRetool, which works between and within programminglanguages.
This makes our tool a valuable cross-lingual source code detector.
DeSoCoRe allowscomparing source codes written in Python, Java andC syntax family languages: C, C++ or C#.
We planin the next future to extend its functionality to othercommon programming languages.
As future workwe aim at allowing for the comparison at fragmentlevel, where a fragment is considered a part of afunction, a group of functions.AcknowledgmentsThis work was done in the framework of the VLC/ CAMPUSMicrocluster on Multimodal Interaction in Intelligent Systemsand it has been partially funded by the European Commissionas part of the WiQ-Ei IRSES project (grant no.
269180) withinthe FP 7 Marie Curie People Framework, and by MICINN aspart of the Text-Enterprise 2.0 project (TIN2009-13391-C04-03) within the Plan I+D+i.
The research work of the secondauthor is funded by the CONACyT-Mexico 192021 grant.3(a) Input screen: user have to select each language manually.
(b) Output screen: the re-used functions are connected using an edge and their codesare shown in the text areas below.Figure 3: Screenshot of the interface of DeSoCoRe.ReferencesC.
Arwin and S. Tahaghoghi.
2006.
Plagiarism de-tection across programming languages.
Proceedingsof the 29th Australian Computer Science Conference,48:277?286.J.
Faidhi and S. Robinson.
1987.
An empirical approachfor detecting program similarity and plagiarism withina university programming enviroment.
Computers andEducation, 11:11?19.E.
Flores, A. Barro?n-Ceden?o, P. Rosso and L. Moreno.2011.
Towards the Detection of Cross-LanguageSource Code Reuse.
Proceedings 16th InternationalConference on Applications of Natural Language toInformation Systems, NLDB-2011, Springer-Verlag,LNCS(6716), pp.
250?253.M.
Halstead.
1972.
Naturals laws controlling algorithmstructure?.
SIGPLAN Noticies, 7(2).L.
Prechelt, G. Malpohl and M. Philippsen.
2002.
Find-ing plagiarisms among a set of programs with JPlag.Journal of Universal Computer Science, 8(11):1016?1038.G.
Whale.
1990.
Identification of program similarity inlarge populations.
The Computer Journal, 33(2).G.
Whale.
1990.
Software metrics and plagiarism detec-tion.
Journal of Systems and Software, 13:131?138.M.
Wise.
1992.
Detection of similarities in student pro-grams: Yaping may be preferable to Plagueing.
?Pro-ceedings of the 23th SIGCSE Technical Symposium.4
