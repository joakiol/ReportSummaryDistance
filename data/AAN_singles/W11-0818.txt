Proceedings of the Workshop on Multiword Expressions: from Parsing and Generation to the Real World (MWE 2011), pages 122?124,Portland, Oregon, USA, 23 June 2011. c?2011 Association for Computational LinguisticsjMWE: A Java Toolkit for Detecting Multi-Word ExpressionsNidhi Kulkarni & Mark Alan FinlaysonComputer Science and Artificial Intelligence LaboratoryMassachusetts Institute of TechnologyCambridge, MA, 02139, USA{nidhik,markaf}@mit.eduAbstractjMWE is a Java library for implementing andtesting algorithms that detect Multi-Word Ex-pression (MWE) tokens in text.
It provides (1)a detector API, including implementations ofseveral detectors, (2) facilities for construct-ing indices of MWE types that may be usedby the detectors, and (3) a testing frameworkfor measuring the performance of a MWE de-tector.
The software is available for free down-load.jMWE is a Java library for constructing and test-ing Multi-Word Expression (MWE) token detectors.The original goal of the library was to detect tokens(instances) of MWE types in a token stream, given alist of types such as those that can be extracted froman electronic dictionary such as WordNet (Fellbaum,1998).
The purpose of the library is not to discovernew MWE types, but rather find instances of a set ofgiven types in a given text.
The library also supportsMWE detectors that are not list-based.The functionality of the library is basic, but it isa necessary foundation for any system that wishesto use MWEs in later stages of language processing.It is a natural complement to software for discover-ing MWE types, such as mwetoolkit (Ramisch etal., 2010) or the NSP package (Banerjee and Peder-sen, 2003).
jMWE is available online for free down-load (Finlayson and Kulkarni, 2011a).1 Library FacilitiesDetector API The core of the library is the detectorAPI.
The library defines a detector interface whichprovides a single method for detecting MWE tokensin a list of individual tokens; anyone interested intaking advantage of jMWE?s testing infrastructure orwriting their own MWE token detection algorithmneed only implement this interface.
jMWE pro-vides several baseline MWE token detection strate-gies.
Also provided are detector filters, which applya specific constraint to, or resolve conflicts in, theoutput another detector.MWE Index jMWE also provides classes for con-structing, storing, and accessing indices of validMWE types.
An MWE index allows an algorithmto retrieve a list of MWE types given a single wordtoken and part of speech.
The index also lists howfrequently, in a particular concordance, a set of to-kens appears as a particular MWE type rather thanas independent words.
To facilitate constructionof indices, jMWE provides bindings to the MITJava Wordnet Interface (JWI) (Finlayson, 2008b)and JSemcor (Finlayson, 2008a), as well as classeswhich extract all MWE types from those resourcesand write them to disk.Test Harness The linchpin of jMWE?s testing in-frastructure is a test harness that runs an MWE de-tector over a given corpus and measures its precisionand recall.
The library comes with default bindingsfor running detectors over the Semcor corpus or anyother corpus that can be mounted with the JSemcorlibrary.
Nevertheless, jMWE is not restricted to run-ning tests over Semcor, or even restricted to usingJSemcor for interfacing with a corpus: a detector canbe run over any corpus whose MWE instances havebeen marked can be analyzed, merely by implement-ing four interfaces.
Also included in the testing in-122frastructure are a number of error detectors, whichanalyze the detailed output of the test harness toidentify common MWE token detection errors.
Thelibrary includes implementation for twelve standarderror types.2 Detection AlgorithmsPreprocessing To run an MWE detector over a textthe text must, at a minimum, be tokenized.
jMWEdoes not include facilities to do this; tokenizationmust be done via an external library.
Most detec-tion strategies also require tokens to be tagged witha part of speech and lemmatized.
This informationis also not provided directly by jMWE, but there arebindings in the library for using JWI and the Stan-ford POS Tagger (Toutanova et al, 2003) to tag andlemmatize a set of texts, provided those texts can beaccessed via the JSemcor library.2.1 Detector TypesMWE token Detectors can be split into at least threetypes: Basic Detectors, Filters, and Resolvers.
Per-formance of selected combinations of these detec-tors are given in Table 1.Basic Detectors that fall into this category use anMWE index, or other source of information, to de-tect MWE tokens in a stream of tokens.
jMWE in-cludes several implementations of basic detectors,including the following:(1) Exhaustive: Given a MWE type index, finds allpossible MWE tokens regardless of inflection, order,or continuity.
(2) Consecutive: Given a MWE type index, finds allMWE tokens whose constituent tokens occur with-out other tokens interspersed.
(3) Simple Proper Noun: Finds all continuous se-quences of proper noun tokens, and marks them asproper noun MWE tokens.Filters These MWE detectors apply a particular fil-ter to the output of another, wrapped, detector.
OnlyMWE tokens from the wrapped detector that passthe filter are returned.
Examples of implemented fil-ters are:(1) In Order: Only returns MWE tokens whose con-stituent tokens are in the same order as the con-stituents listed in the MWE type?s definition.
(2) No Inflection: Removes inflected MWE tokens.
(3) Observed Inflection: Returns base form MWEs,as well as those whose inflection has been observedin a specified concordance.
(4) Pattern Inflection: Only return MWE tokenswhose inflection matches a pre-defined set of partof speech patterns.
We used the same rules as thosefound in (Arranz et al, 2005) with two additionalrules related to Verb-Particle MWEs.Resolvers Like filters, these wrap another MWEdetector; they resolve conflicts between identifiedMWE tokens.
A conflict occurs when two identifiedMWE tokens share a constituent.
Examples include:(1) Longest-Match-Left-to-Right: For a set of con-flicting MWE tokens, picks the one that starts earli-est.
If all of the conflicting MWE tokens start at thesame point, picks the longest.
(2) Observed Probability: For a set of conflictingMWE tokens, picks the one whose constituents havemost often been observed occurring as an MWE to-ken rather than as isolated words.
(3) Variance Minimizing: For a set of conflictingMWE tokens, picks the MWE token with the fewestinterstitial spaces.Detector F1 (precision/recall)Exhaustive+Proper Nouns0.197F1 (0.110p/0.919r)Consecutive+Proper Nouns0.631F1 (0.472p/0.950r)Consecutive+Proper Nouns+No Inflection+Longest-Match-L-to-R0.593F1 (0.499p/0.731r)Consecutive+Proper Nouns+Pattern Inflection+More Frequent As MWE0.834F1 (0.835p/0.832r)Table 1: F-measures for select detectors, run over Sem-cor 1.6 brown1 and brown2 concordances using MWEsdrawn from WordNet 1.6.
The code for generating thistable is available at (Finlayson and Kulkarni, 2011b)AcknowledgmentsThis work was supported in part by the AFOSR un-der grant number A9550-05-1-0321, and DARPAunder award FA8750-10-1-0076.123ReferencesVictoria Arranz, Jordi Atserias, and Mauro Castillo.2005.
Multiwords and word sense disambiguation.
InAlexander Gelbukh, editor, Proceedings of the SixthInternational Conference on Intelligent Text Process-ing and Computational Linguistics (CICLING 2005),volume 3406 in Lecture Notes in Computer Sci-ence (LNCS), pages 250?262, Mexico City, Mexico.Springer-Verlag.Satanjeev Banerjee and Ted Pedersen.
2003.
The de-sign, implementation, and use of the ngram statisticspackage.
In Alexander Gelbukh, editor, Proceedingsof the Fourth International Conference on IntelligentText Processing and Computational Linguistics (CI-CLING 2003), volume 2588 in Lecture Notes in Com-puter Science (LNCS), pages 370?381, Mexico City,Mexico.
Springer-Verlag.http://ngram.sourceforge.net.Christiane Fellbaum.
1998.
Wordnet: An Electronic Lex-ical Database.
MIT Press, Cambridge, MA.Mark Alan Finlayson and Nidhi Kulkarni.
2011a.jMWE:, version 1.0.0.http://projects.csail.mit.edu/jmwehttp://hdl.handle.net/1721.1/62793.Mark Alan Finlayson and Nidhi Kulkarni.
2011b.
Sourcecode and data for MWE?2011 papers.http://hdl.handle.net/1721.1/62792.Mark Alan Finlayson.
2008a.
JSemcor, version 1.0.0.http://projects.csail.mit.edu/jsemcor.Mark Alan Finlayson.
2008b.
JWI: The MIT Java Word-net Interface, version 2.1.5.http://projects.csail.mit.edu/jwi.Carlos Ramisch, Aline Villavicencio, and ChristianBoitet.
2010.
Multiword expressions in the wild?
themwetoolkit comes in handy.
In Chu-Ren Huang andDaniel Jurafsky, editors, Proceedings of the Twenty-Third International Conference on Computational Lin-guistics (COLING 2010): Demonstrations, volume 23,pages 57?60, Beijing, China.http://mwetoolkit.sourceforge.net.Kristina Toutanova, Daniel Klein, Christopher D. Man-ning, and Yoram Singer.
2003.
Feature-rich part-of-speech tagging with a cyclic dependency network.
InProceedings of the Human Language Technology Con-ference of the North American Chapter of the Asso-ciation for Computational Linguistics (HLT-NAACL),pages 252?259, Edmonton, Canada.124
