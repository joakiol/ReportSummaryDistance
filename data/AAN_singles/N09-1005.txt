Human Language Technologies: The 2009 Annual Conference of the North American Chapter of the ACL, pages 37?45,Boulder, Colorado, June 2009. c?2009 Association for Computational LinguisticsLearning Phoneme Mappings for Transliteration without Parallel DataSujith Ravi and Kevin KnightUniversity of Southern CaliforniaInformation Sciences InstituteMarina del Rey, California 90292{sravi,knight}@isi.eduAbstractWe present a method for performing machinetransliteration without any parallel resources.We frame the transliteration task as a deci-pherment problem and show that it is possi-ble to learn cross-language phoneme mappingtables using only monolingual resources.
Wecompare various methods and evaluate theiraccuracies on a standard name transliterationtask.1 IntroductionTransliteration refers to the transport of names andterms between languages with different writing sys-tems and phoneme inventories.
Recently there hasbeen a large amount of interesting work in thisarea, and the literature has outgrown being citablein its entirety.
Much of this work focuses on back-transliteration, which tries to restore a name orterm that has been transported into a foreign lan-guage.
Here, there is often only one correct targetspelling?for example, given jyon.kairu (thename of a U.S.
Senator transported to Japanese), wemust output ?Jon Kyl?, not ?John Kyre?
or any othervariation.There are many techniques for transliteration andback-transliteration, and they vary along a numberof dimensions:?
phoneme substitution vs. character substitution?
heuristic vs. generative vs. discriminative mod-els?
manual vs. automatic knowledge acquisitionWe explore the third dimension, where we seeseveral techniques in use:?
Manually-constructed transliteration models,e.g., (Hermjakob et al, 2008).?
Models constructed from bilingual dictionariesof terms and names, e.g., (Knight and Graehl,1998; Huang et al, 2004; Haizhou et al, 2004;Zelenko and Aone, 2006; Yoon et al, 2007;Li et al, 2007; Karimi et al, 2007; Sherifand Kondrak, 2007b; Goldwasser and Roth,2008b).?
Extraction of parallel examples from bilin-gual corpora, using bootstrap dictionaries e.g.,(Sherif and Kondrak, 2007a; Goldwasser andRoth, 2008a).?
Extraction of parallel examples from compara-ble corpora, using bootstrap dictionaries, andtemporal and word co-occurrence, e.g., (Sproatet al, 2006; Klementiev and Roth, 2008).?
Extraction of parallel examples from webqueries, using bootstrap dictionaries, e.g., (Na-gata et al, 2001; Oh and Isahara, 2006; Kuo etal., 2006; Wu and Chang, 2007).?
Comparing terms from different languages inphonetic space, e.g., (Tao et al, 2006; Goldbergand Elhadad, 2008).In this paper, we investigate methods to acquiretransliteration mappings from non-parallel sources.We are inspired by previous work in unsupervisedlearning for natural language, e.g.
(Yarowsky, 1995;37WFSA - A WFST - BEnglish wordsequenceEnglish soundsequence( SPENCER ABRAHAM ) ( S P EH N S ER  EY B R AH HH AE M )WFST - C WFST - DJapanese soundsequence( ?
?
?
?
?
?
?
?
?
?
?
?
)Japanese katakanasequence( S U P E N S A AE E B U R A H A M U )Figure 1: Model used for back-transliteration of Japanese katakana names and terms into English.
The model employsa four-stage cascade of weighted finite-state transducers (Knight and Graehl, 1998).Goldwater and Griffiths, 2007), and we are also in-spired by cryptanalysis?we view a corpus of for-eign terms as a code for English, and we attempt tobreak the code.2 BackgroundWe follow (Knight and Graehl, 1998) in tacklingback-transliteration of Japanese katakana expres-sions into English.
Knight and Graehl (1998) devel-oped a four-stage cascade of finite-state transducers,shown in Figure 1.?
WFSA A - produces an English word sequencew with probability P(w) (based on a unigramword model).?
WFST B - generates an English phoneme se-quence e corresponding to w with probabilityP(e|w).?
WFST C - transforms the English phoneme se-quence into a Japanese phoneme sequence j ac-cording to a model P(j|e).?
WFST D - writes out the Japanese phonemesequence into Japanese katakana characters ac-cording to a model P(k|j).Using the cascade in the reverse (noisy-channel)direction, they are able to translate new katakananames and terms into English.
They report 36% er-ror in translating 100 U.S.
Senators?
names, and theyreport exceeding human transliteration performancein the presence of optical scanning noise.The only transducer that requires parallel trainingdata is WFST C. Knight and Graehl (1998) take sev-eral thousand phoneme string pairs, automaticallyalign them with the EM algorithm (Dempster etal., 1977), and construct WFST C from the alignedphoneme pieces.We re-implement their basic method by instanti-ating a densely-connected version of WFST C withall 1-to-1 and 1-to-2 phoneme connections betweenEnglish and Japanese.
Phoneme bigrams that occurfewer than 10 times in a Japanese corpus are omit-ted, and we omit 1-to-3 connections.
This initialWFST C model has 15320 uniformly weighted pa-rameters.
We then train the model on 3343 phonemestring pairs from a bilingual dictionary, using theEM algorithm.
EM immediately reduces the con-nections in the model to those actually observed inthe parallel data, and after 14 iterations, there areonly 188 connections left with P(j|e) ?
0.01.
Fig-ure 2 shows the phonemic substitution table learntfrom parallel training.We use this trained WFST C model and apply itto the U.S.
Senator name transliteration task (whichwe update to the 2008 roster).
We obtain 40% er-ror, roughly matching the performance observed in(Knight and Graehl, 1998).3 Task and DataThe task of this paper is to learn the mappings inFigure 2, but without parallel data, and to test thosemappings in end-to-end transliteration.
We imagineour problem as one faced by monolingual Englishspeaker wandering around Japan, reading a multi-tude of katakana signs, listening to people speakJapanese, and eventually deciphering those signsinto English.
To mis-quote Warren Weaver:?When I look at a corpus of Japanesekatakana, I say to myself, this is reallywritten in English, but it has been codedin some strange symbols.
I will now pro-ceed to decode.
?Our larger motivation is to move towardeasily-built transliteration systems for all languagepairs, regardless of parallel resources.
WhileJapanese/English transliteration has its own partic-ular features, we believe it is a reasonable startingpoint.38e j P(j|e) e j P(j|e) e j P(j|e) e j P(j|e) e j P(j|e) e j P(j|e) e j P(j|e) e j P(j|e)AA o 0.49 AY a i 0.84 EH e 0.94 HH h 0.95 L r 0.62 OY o i 0.89 SH sh y 0.33 V b 0.75a 0.46 i 0.09 a 0.03 w 0.02 r u 0.37 o e 0.04 sh 0.31 b u 0.17o o 0.02 a 0.03 h a 0.02 o 0.04 y u 0.17 w 0.03a a 0.02 i y 0.01 i 0.04 ssh y 0.12 a 0.02a y 0.01 sh i 0.04ssh 0.02e 0.01AE a 0.93 B b 0.82 ER a a 0.8 IH i 0.89 M m 0.68 P p 0.63 T t 0.43 W w 0.73a ssh 0.02 b u 0.15 a 0.08 e 0.05 m u 0.22 p u 0.16 t o 0.25 u 0.17a n 0.02 a r 0.03 i n 0.01 n 0.08 pp u 0.13 tt o 0.17 o 0.04r u 0.02 a 0.01 pp 0.06 ts 0.04 i 0.02o r 0.02 tt 0.03e r 0.02 u 0.02ts u 0.02ch 0.02AH a 0.6 CH tch i 0.27 EY e e 0.58 IY i i 0.58 N n 0.96 PAUSE pause 1.0 TH s u 0.48 Y y 0.7o 0.13 ch 0.24 e 0.15 i 0.3 nn 0.02 s 0.22 i 0.26e 0.11 ch i 0.23 e i 0.12 e 0.07 sh 0.16 e 0.02i 0.07 ch y 0.2 a 0.1 e e 0.03 t o 0.04 a 0.02u 0.06 tch y 0.02 a i 0.03 ch 0.04tch 0.02 t e 0.02ssh y 0.01 t 0.02k 0.01 a 0.02AO o 0.6 D d 0.54 F h 0.58 JH j y 0.35 NG n 0.62 R r 0.61 UH u 0.79 Z z 0.27o o 0.27 d o 0.27 h u 0.35 j 0.24 g u 0.22 a 0.27 u u 0.09 z u 0.25a 0.05 dd o 0.06 hh 0.04 j i 0.21 n g 0.09 o 0.07 u a 0.04 u 0.16o n 0.03 z 0.02 hh u 0.02 jj i 0.14 i 0.04 r u 0.03 dd 0.03 s u 0.07a u 0.03 j 0.02 z 0.04 u 0.01 a a 0.01 u ssh 0.02 j 0.06u 0.01 u 0.01 o 0.01 o 0.02 a 0.06a 0.01 n 0.03i 0.03s 0.02o 0.02AW a u 0.69 DH z 0.87 G g 0.66 K k 0.53 OW o 0.57 S s u 0.43 UW u u 0.67 ZH j y 0.43a w 0.15 z u 0.08 g u 0.19 k u 0.2 o o 0.39 s 0.37 u 0.29 j i 0.29a o 0.06 a z 0.04 gg u 0.1 kk u 0.16 o u 0.02 sh 0.08 y u 0.02 j 0.29a 0.04 g y 0.03 kk 0.05 u 0.05u u 0.02 gg 0.01 k y 0.02 ss 0.02o o 0.02 g a 0.01 k i 0.01 ssh 0.01o 0.02Figure 2: Phonemic substitution table learnt from 3343 parallel English/Japanese phoneme string pairs.
Englishphonemes are in uppercase, Japanese in lowercase.
Mappings with P(j|e) > 0.01 are shown.A A CH I D O CH E N J I N E B A D A W A K O B I AA A K U P U R A Z A CH E S : W A N K A PP UA A N D O : O P U T I K U S U W A N T E N P OA A T I S U T O D E K O R A T I B U : W A S E R I NA A T O S E R I N A P I S U T O N D E T O M O R U T O P I I T A A Y U N I O NA I A N B I R U E P I G U R A M U P I KK A A Y U N I TT O SH I S U T E M UA I D I I D O E R A N D O P I N G U U Y U UA I K E N B E R I I : P I P E R A J I N A M I D O :A J I A K A PP U J Y A I A N TS U P I S A :A J I T O J Y A Z U P I U R A Z E N E R A R U E A K O NA K A SH I A K O O S U : P O I N T O Z E R OA K U A M Y U U Z E U M U : Z O N B I I Z U: : : :: : : :Figure 3: Some Japanese phoneme sequences generated from the monolingual katakana corpus using WFST D.Our monolingual resources are:?
43717 unique Japanese katakana sequencescollected from web newspaper data.
We splitmulti-word katakana phrases on the center-dot(???)
character, and select a final corpus of9350 unique sequences.
We add monolingualJapanese versions of the 2008 U.S. Senate ros-ter.1?
The CMU pronunciation dictionary of English,1We use ?open?
EM testing, in which unlabeled test datais allowed to be part of unsupervised training.
However, noparallel data is allowed.with 112,151 entries.?
The English gigaword corpus.
Knight andGraehl (1998) already use frequently-occurringcapitalized words to build the WFSA A compo-nent of their four-stage cascade.We seek to use our English knowledge (derivedfrom 2 and 3) to decipher the Japanese katakana cor-pus (1) into English.
Figure 3 shows a portion of theJapanese corpus, which we transform into Japanesephoneme sequences using the monolingual resourceof WFST D. We note that the Japanese phoneme in-ventory contains 39 unique (?ciphertext?)
symbols,39compared to the 40 English (?plaintext?)
phonemes.Our goal is to compare and evaluate the WFST Cmodel learnt under two different scenarios?
(a) us-ing parallel data, and (b) using monolingual data.For each experiment, we train only the WFST Cmodel and then apply it to the name translitera-tion task?decoding 100 U.S.
Senator names fromJapanese to English using the automata shown inFigure 1.
For all experiments, we keep the rest ofthe models in the cascade (WFSA A, WFST B, andWFST D) unchanged.
We evaluate on whole-nameerror-rate (maximum of 100/100) as well as normal-ized word edit distance, which gives partial creditfor getting the first or last name correct.4 Acquiring Phoneme Mappings fromNon-Parallel DataOur main data consists of 9350 unique Japanesephoneme sequences, which we can consider as a sin-gle long sequence j.
As suggested by Knight etal (2006), we explain the existence of j as the re-sult of someone initially producing a long Englishphoneme sequence e, according to P(e), then trans-forming it into j, according to P(j|e).
The probabil-ity of our observed data P(j) can be written as:P (j) =?eP (e) ?
P (j|e)We take P(e) to be some fixed model of mono-lingual English phoneme production, representedas a weighted finite-state acceptor (WFSA).
P(j|e)is implemented as the initial, uniformly-weightedWFST C described in Section 2, with 15320 phone-mic connections.We next maximize P(j) by manipulating the sub-stitution table P(j|e), aiming to produce a resultsuch as shown in Figure 2.
We accomplish this bycomposing the English phoneme model P(e) WFSAwith the P(j|e) transducer.
We then use the EM al-gorithm to train just the P(j|e) parameters (insidethe composition that predicts j), and guess the val-ues for the individual phonemic substitutions thatmaximize the likelihood of the observed data P(j).22In our experiments, we use the Carmel finite-state trans-ducer package (Graehl, 1997), a toolkit with an algorithm forEM training of weighted finite-state transducers.We allow EM to run until the P(j) likelihood ra-tio between subsequent training iterations reaches0.9999, and we terminate early if 200 iterations arereached.Finally, we decode our test set of U.S. Senatornames.
Following Knight et al(2006), we stretchout the P(j|e) model probabilities after decipher-ment training and prior to decoding our test set, bycubing their values.Decipherment under the conditions of translit-eration is substantially more difficult than solv-ing letter-substitution ciphers (Knight et al, 2006;Ravi and Knight, 2008; Ravi and Knight, 2009) orphoneme-substitution ciphers (Knight and Yamada,1999).
This is because the target table contains sig-nificant non-determinism, and because each symbolhas multiple possible fertilities, which introducesuncertainty about the length of the target string.4.1 Baseline P(e) ModelClearly, we can design P(e) in a number of ways.
Wemight expect that the more the system knows aboutEnglish, the better it will be able to decipher theJapanese.
Our baseline P(e) is a 2-gram phonememodel trained on phoneme sequences from the CMUdictionary.
The second row (2a) in Figure 4 showsresults when we decipher with this fixed P(e).
Thisapproach performs poorly and gets all the Senatornames wrong.4.2 Consonant ParityWhen training under non-parallel conditions, wefind that we would like to keep our WFST C modelsmall, rather than instantiating a fully-connectedmodel.
In the supervised case, parallel training al-lows the trained model to retain only those con-nections which were observed from the data, andthis helps eliminate many bad connections from themodel.
In the unsupervised case, there is no paralleldata available to help us make the right choices.We therefore use prior knowledge and place aconsonant-parity constraint on the WFST C model.Prior to EM training, we throw out any mappingfrom the P(j|e) substitution model that does nothave the same number of English and Japanese con-sonant phonemes.
This is a pattern that we observeacross a range of transliteration tasks.
Here are ex-40Phonemic Substitution Model Name Transliteration Errorwhole-name error norm.
edit distance1 e ?
j = { 1-to-1, 1-to-2 } 40 25.9+ EM aligned with parallel data2a e ?
j = { 1-to-1, 1-to-2 } 100 100.0+ decipherment training with 2-gram English P(e)2b e ?
j = { 1-to-1, 1-to-2 } 98 89.8+ decipherment training with 2-gram English P(e)+ consonant-parity2c e ?
j = { 1-to-1, 1-to-2 } 94 73.6+ decipherment training with 3-gram English P(e)+ consonant-parity2d e ?
j = { 1-to-1, 1-to-2 } 77 57.2+ decipherment training with a word-based English model+ consonant-parity2e e ?
j = { 1-to-1, 1-to-2 } 73 54.2+ decipherment training with a word-based English model+ consonant-parity+ initialize mappings having consonant matches with higher proba-bility weightsFigure 4: Results on name transliteration obtained when using the phonemic substitution model trained under differentscenarios?
(1) parallel training data, (2a-e) using only monolingual resources.amples of mappings where consonant parity is vio-lated:K => a N => e eEH => s a EY => nModifying the WFST C in this way leads to bet-ter decipherment tables and slightly better resultsfor the U.S.
Senator task.
Normalized edit distancedrops from 100 to just under 90 (row 2b in Figure 4).4.3 Better English ModelsRow 2c in Figure 4 shows decipherment resultswhen we move to a 3-gram English phoneme modelfor P(e).
We notice considerable improvements inaccuracy.
On the U.S.
Senator task, normalized editdistance drops from 89.8 to 73.6, and whole-nameerror decreases from 98 to 94.When we analyze the results from decipheringwith a 3-gram P(e) model, we find that many of theJapanese phoneme test sequences are decoded intoEnglish phoneme sequences (such as ?IH K R IHN?
and ?AE G M AH N?)
that are not valid words.This happens because the models we used for de-cipherment so far have no knowledge of what con-stitutes a globally valid English sequence.
To helpthe phonemic substitution model learn this infor-mation automatically, we build a word-based P(e)from English phoneme sequences in the CMU dic-tionary and use this model for decipherment train-ing.
The word-based model produces complete En-glish phoneme sequences corresponding to 76,152actual English words from the CMU dictionary.The English phoneme sequences are represented aspaths through a WFSA, and all paths are weightedequally.
We represent the word-based model in com-pact form, using determinization and minimizationtechniques applicable to weighted finite-state au-tomata.
This allows us to perform efficient EM train-ing on the cascade of P(e) and P(j|e) models.
Underthis scheme, English phoneme sequences resultingfrom decipherment are always analyzable into actualwords.Row 2d in Figure 4 shows the results we ob-tain when training our WFST C with a word-basedEnglish phoneme model.
Using the word-basedmodel produces the best result so far on the phone-mic substitution task with non-parallel data.
On theU.S.
Senator task, word-based decipherment outper-forms the other methods by a large margin.
It gets23 out of 100 Senator names exactly right, with amuch lower normalized edit distance (57.2).
Wehave managed to achieve this performance usingonly monolingual data.
This also puts us withinreach of the parallel-trained system?s performance(40% whole-name errors, and 25.9 word edit dis-tance error) without using a single English/Japanesepair for training.To summarize, the quality of the English phoneme41e j P(j|e) e j P(j|e) e j P(j|e) e j P(j|e) e j P(j|e) e j P(j|e) e j P(j|e) e j P(j|e)AA a 0.37 AY a i 0.36 EH e 0.37 HH h 0.45 L r 0.3 OY a 0.27 SH sh y 0.22 V b 0.34o 0.25 o o 0.13 a 0.24 s 0.12 n 0.19 i 0.16 m 0.11 k 0.14i 0.15 e 0.12 o 0.12 k 0.09 r u 0.15 y u 0.1 r 0.1 m 0.13u 0.08 i 0.11 i 0.12 b 0.08 r i 0.04 o i 0.1 s 0.06 s 0.07e 0.07 a 0.11 u 0.06 m 0.07 t 0.03 y a 0.09 p 0.06 d 0.07o o 0.03 u u 0.05 o o 0.04 w 0.03 m u 0.02 y o 0.08 s a 0.05 r 0.04y a 0.01 y u 0.02 y u 0.01 p 0.03 m 0.02 e 0.08 h 0.05 t 0.03a a 0.01 u 0.02 a i 0.01 g 0.03 w a 0.01 o 0.06 b 0.05 h 0.02o 0.02 k y 0.02 t a 0.01 o o 0.02 t 0.04 sh 0.01e e 0.02 d 0.02 r a 0.01 e i 0.02 k 0.04 n 0.01AE a 0.52 B b 0.41 ER a a 0.47 IH i 0.36 M m 0.3 P p 0.18 T t 0.2 W w 0.23i 0.19 p 0.12 a 0.17 e 0.25 n 0.08 p u 0.08 t o 0.16 r 0.2e 0.11 k 0.09 u 0.08 a 0.15 k 0.08 n 0.05 t a 0.05 m 0.13o 0.08 m 0.07 o 0.07 u 0.09 r 0.07 k 0.05 n 0.04 s 0.08u 0.03 s 0.04 e 0.04 o 0.09 s 0.06 sh i 0.04 k u 0.03 k 0.07u u 0.02 g 0.04 o o 0.03 o o 0.01 h 0.05 k u 0.04 k 0.03 h 0.06o o 0.02 t 0.03 i i 0.03 t 0.04 s u 0.03 t e 0.02 b 0.06z 0.02 y u 0.02 g 0.04 p a 0.03 s 0.02 t 0.04d 0.02 u u 0.02 b 0.04 t 0.02 r 0.02 p 0.04ch y 0.02 i 0.02 m u 0.03 m a 0.02 g u 0.02 d 0.02AH a 0.31 CH g 0.12 EY e e 0.3 IY i 0.25 N n 0.56 PAUSE pause 1.0 TH k 0.21 Y s 0.25o 0.23 k 0.11 a 0.22 i i 0.21 r u 0.09 p u 0.11 k 0.18i 0.17 b 0.09 i 0.11 a 0.15 s u 0.04 k u 0.1 m 0.07e 0.12 sh 0.07 u 0.09 a a 0.12 m u 0.02 d 0.08 g 0.06u 0.1 s 0.07 o 0.06 u 0.07 kk u 0.02 h u 0.07 p 0.05e e 0.02 r 0.07 e 0.06 o 0.05 k u 0.02 s u 0.05 b 0.05o o 0.01 ch y 0.07 o o 0.05 o o 0.02 h u 0.02 b u 0.04 r 0.04a a 0.01 p 0.06 e i 0.04 i a 0.02 t o 0.01 k o 0.03 d 0.04m 0.06 i i 0.02 e e 0.02 pp u 0.01 g a 0.03 u r 0.03ch 0.06 u u 0.01 e 0.02 b i 0.01 s a 0.02 n y 0.03AO o 0.29 D d 0.16 F h 0.18 JH b 0.13 NG tt o 0.21 R r 0.53 UH a 0.24 Z t o 0.14a 0.26 d o 0.15 h u 0.14 k 0.1 r u 0.17 n 0.07 o 0.14 z u 0.11e 0.14 n 0.05 b 0.09 j y 0.1 n 0.14 u r 0.05 e 0.11 r u 0.11o o 0.12 t o 0.03 sh i 0.07 s 0.08 kk u 0.1 r i 0.03 y u 0.1 s u 0.1i 0.08 sh i 0.03 p 0.07 m 0.08 s u 0.07 r u 0.02 a i 0.09 g u 0.09u 0.05 k u 0.03 m 0.06 t 0.07 m u 0.06 d 0.02 i 0.08 m u 0.07y u 0.03 k 0.03 r 0.04 j 0.07 dd o 0.04 t 0.01 u u 0.07 n 0.06e e 0.01 g u 0.03 s 0.03 h 0.07 tch i 0.03 s 0.01 o o 0.07 d o 0.06b 0.03 h a 0.03 sh 0.06 pp u 0.03 m 0.01 a a 0.03 j i 0.02s 0.02 b u 0.02 d 0.05 jj i 0.03 k 0.01 u 0.02 ch i 0.02AW o o 0.2 DH h 0.13 G g u 0.13 K k 0.17 OW a 0.3 S s u 0.4 UW u 0.39 ZH m 0.17a u 0.19 r 0.12 g 0.11 n 0.1 o 0.25 n 0.11 a 0.15 p 0.16a 0.18 b 0.09 k u 0.08 k u 0.1 o o 0.12 r u 0.05 o 0.13 t 0.15a i 0.11 w 0.08 b u 0.06 kk u 0.05 u 0.09 t o 0.03 u u 0.12 h 0.13a a 0.11 t 0.07 k 0.04 t o 0.03 i 0.07 k u 0.03 i 0.04 d 0.1e 0.05 p 0.07 b 0.04 s u 0.03 y a 0.04 sh i 0.02 y u 0.03 s 0.08o 0.04 g 0.06 t o 0.03 sh i 0.02 e 0.04 r i 0.02 i i 0.03 b 0.07i 0.04 j y 0.05 t 0.03 r 0.02 u u 0.02 m u 0.02 e 0.03 r 0.05i y 0.02 d 0.05 h a 0.03 k o 0.02 a i 0.02 h u 0.02 o o 0.02 j y 0.03e a 0.01 k 0.03 d 0.03 k a 0.02 i i 0.01 ch i 0.02 e e 0.02 k 0.02Figure 5: Phonemic substitution table learnt from non-parallel corpora.
For each English phoneme, only the top tenmappings with P(j|e) > 0.01 are shown.model used in decipherment training has a large ef-fect on the learnt P(j|e) phonemic substitution ta-ble (i.e., probabilities for the various phoneme map-pings within the WFST C model), which in turn af-fects the quality of the back-transliterated Englishoutput produced when decoding Japanese.Figure 5 shows the phonemic substitution tablelearnt using word-based decipherment.
The map-pings are reasonable, given the lack of parallel data.They are not entirely correct?for example, the map-ping ?S?
s u?
is there, but ?S?
s?
is missing.Sample end-to-end transliterations are illustratedin Figure 6.
The figure shows how the transliterationresults from non-parallel training improve steadilyas we use stronger decipherment techniques.
Wenote that in one case (LAUTENBERG), the deci-pherment mapping table leads to a correct answerwhere the mapping table derived from parallel datadoes not.
Because parallel data is limited, it may notcontain all of the necessary mappings.4.4 Size of Japanese Training DataMonolingual corpora are more easily available thanparallel corpora, so we can use increasing amountsof monolingual Japanese training data during de-cipherment training.
The table below shows thatusing more Japanese training data produces bet-ter transliteration results when deciphering with theword-based English model.Japanese training data Error on name transliteration task(# of phoneme sequences) whole-name error normalized wordedit distance4,674 87 69.79,350 77 57.242?
?
???????????????????????????????
??????
????
????????
??????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????
???????????????????????????
????
????
???????
?????????
?????????????????????????????
??????????
?
??????
????
???
????????????????????
???
??
?????
??
??????
??
????
??
?????????
?????????
????????
????????
??????????
??????????????????????????
???????
????????
??????????
??????????????????????????
??????????
?????????
???
???????
???
??????????????????????????????????
?????????
????????
?????????????
????????????????????????????????????????????????????????????????????
??????
????
????????
??????????????????????????????????????????????????????????????????????
????????
???????
?
????????????
?????????
???????
??????????????????
????????
????
????
???????
?????????
??????????????
???????????
??????????
?
??????
????
???
???????????????????
?
???
??
?????
??
??????
??
????
??
?????????
?????????
????????
????????
??????????
????????????????
???
????
???????
????????
??????????
???
????????????
??????????
??????????
?????????
???
???????
???
??????????????
??
????????
???????
??
???????
?
??????
?????
?
??????
?????????????????????????????????????????
??????????????????????????
??????
????
????????
??????????????????????????????????????????????????????????????????????
????????????
????????????????????????????????
?????????????????????????
?
??
????
???????
?????????
????????????????
?????????
??
??????
?
??????
????
???
?????????????????
???
??
?????
??
??????
??
????
??
??????
??
???
?
???
??
?
??????
?
??????????
????????????????????
???
???
??
?
??
?????
??????????
?????????????
?
?
??
??
?????
??
??????
???
???????
???
???????????????
?????????
????
?????
?
?
????????
?????????????
????????????????????????????????????????????????????????????????????
??????
????
????????
??????????????????????????????????????????????????????????????????????
???????
???????
?
???????????
?????????
???????
????????????????
????????
????
?
??
???????
?????????
????????????
???????????
??????????
?
????
?
????
???
?????????????????
?
???
??
?????
??
??????
??
????
??
?????????
?????????
???????
?
????
?
??????????
?????????????????
???
????
??????
????????
??????????
???
???????????
??????????
?????????
?
???
??
???
???????
???
??????????????
??
????????
???????
??
???????
?
??????
?????
?
??????
??????????????????????????????????
?Figure 6: Results for end-to-end name transliteration.
This figure shows the correct answer, the answer obtainedby training mappings on parallel data (Knight and Graehl, 1998), and various answers obtained by deciphering non-parallel data.
Method 1 uses a 2-gram P(e), Method 2 uses a 3-gram P(e), and Method 3 uses a word-based P(e).4.5 P(j|e) InitializationSo far, the P(j|e) connections within the WFST Cmodel were initialized with uniform weights priorto EM training.
It is a known fact that the EM al-gorithm does not necessarily find a global minimumfor the given objective function.
If the search spaceis bumpy and non-convex as is the case in our prob-lem, EM can get stuck in any of the local minimadepending on what weights were used to initializethe search.
Different sets of initialization weightscan lead to different convergence points during EMtraining, or in other words, depending on how theP(j|e) probabilities are initialized, the final P(j|e)substitution table learnt by EM can vary.We can use some prior knowledge to initialize theprobability weights in our WFST C model, so as togive EM a good starting point to work with.
In-stead of using uniform weights, in the P(j|e) modelwe set higher weights for the mappings where En-glish and Japanese sounds share common consonantphonemes.For example, mappings such as:N => n N => a nD => d D => d oare weighted X (a constant) times higher thanother mappings such as:N => b N => rD => B EY => a ain the P(j|e) model.
In our experiments, we setthe value X to 100.Initializing the WFST C in this way results in EMlearning better substitution tables and yields slightlybetter results for the Senator task.
Normalized editdistance drops from 57.2 to 54.2, and the whole-name error is also reduced from 77% to 73% (row2e in Figure 4).4.6 Size of English Training DataWe saw earlier (in Section 4.4) that using moremonolingual Japanese training data yields improve-ments in decipherment results.
Similarly, we hy-pothesize that using more monolingual English datacan drive the decipherment towards better translit-eration results.
On the English side, we build dif-ferent word-based P(e) models, each trained on dif-ferent amounts of data (English phoneme sequencesfrom the CMU dictionary).
The table below showsthat deciphering with a word-based English model43built from more data produces better transliterationresults.English training data Error on name transliteration task(# of phoneme sequences) whole-name error normalized wordedit distance76,152 73 54.297,912 66 49.3This yields the best transliteration results on theSenator task with non-parallel data, getting 34 outof 100 Senator names exactly right.4.7 Re-ranking Results Using the WebIt is possible to improve our results on the U.S. Sen-ator task further using external monolingual re-sources.
Web counts are frequently used to auto-matically re-rank candidate lists for various NLPtasks (Al-Onaizan and Knight, 2002).
We extractthe top 10 English candidates produced by our word-based decipherment method for each Japanese testname.
Using a search engine, we query the entireEnglish name (first and last name) corresponding toeach candidate, and collect search result counts.
Wethen re-rank the candidates using the collected Webcounts and pick the most frequent candidate as ourchoice.For example, France Murkowski gets only 1 hiton Google, whereas Frank Murkowski gets 135,000hits.
Re-ranking the results in this manner lowersthe whole-name error on the Senator task from 66%to 61%, and also lowers the normalized edit dis-tance from 49.3 to 48.8.
However, we do note thatre-ranking using Web counts produces similar im-provements in the case of parallel training as welland lowers the whole-name error from 40% to 24%.So, the re-ranking idea, which is simple and re-quires only monolingual resources, seems like a nicestrategy to apply at the end of transliteration exper-iments (during decoding), and can result in furthergains on the final transliteration performance.5 Comparable versus Non-ParallelCorporaWe also present decipherment results when usingcomparable corpora for training the WFST C model.We use English and Japanese phoneme sequencesderived from a parallel corpus containing 2,683phoneme sequence pairs to construct comparablecorpora (such that for each Japanese phoneme se-quence, the correct back-transliterated phoneme se-quence is present somewhere in the English data)and apply the same decipherment strategy using aword-based English model.
The table below com-pares the transliteration results for the U.S. Sena-tor task, when using comparable versus non-paralleldata for decipherment training.
While training oncomparable corpora does have benefits and reducesthe whole-name error to 59% on the Senator task, itis encouraging to see that our best decipherment re-sults using only non-parallel data comes close (66%error).English/Japanese Corpora Error on name transliteration task(# of phoneme sequences) whole-name error normalized wordedit distanceComparable Corpora 59 41.8(English = 2,608Japanese = 2,455)Non-Parallel Corpora 66 49.3(English = 98,000Japanese = 9,350)6 ConclusionWe have presented a method for attacking machinetransliteration problems without parallel data.
Wedeveloped phonemic substitution tables trained us-ing only monolingual resources and demonstratedtheir performance in an end-to-end name translitera-tion task.
We showed that consistent improvementsin transliteration performance are possible with theuse of strong decipherment techniques, and our bestsystem achieves significant improvements over thebaseline system.
In future work, we would like todevelop more powerful decipherment models andtechniques, and we would like to harness the infor-mation available from a wide variety of monolingualresources, and use it to further narrow the gap be-tween parallel-trained and non-parallel-trained ap-proaches.7 AcknowledgementsThis research was supported by the Defense Ad-vanced Research Projects Agency under SRI Inter-national?s prime Contract Number NBCHD040058.44ReferencesY.
Al-Onaizan and K. Knight.
2002.
Translating namedentities using monolingual and bilingual resources.
InProc.
of ACL.A.
P. Dempster, N. M. Laird, and D. B. Rubin.
1977.Maximum likelihood from incomplete data via the EMalgorithm.
Journal of the Royal Statistical Society Se-ries, 39(4):1?38.Y.
Goldberg and M. Elhadad.
2008.
Identification oftransliterated foreign words in Hebrew script.
In Proc.of CICLing.D.
Goldwasser and D. Roth.
2008a.
Active sample se-lection for named entity transliteration.
In Proc.
ofACL/HLT Short Papers.D.
Goldwasser and D. Roth.
2008b.
Transliteration asconstrained optimization.
In Proc.
of EMNLP.S.
Goldwater and L. Griffiths, T. 2007.
A fully Bayesianapproach to unsupervised part-of-speech tagging.
InProc.
of ACL.J.
Graehl.
1997.
Carmel finite-state toolkit.http://www.isi.edu/licensed-sw/carmel.L.
Haizhou, Z. Min, and S. Jian.
2004.
A joint source-channel model for machine transliteration.
In Proc.
ofACL.U.
Hermjakob, K. Knight, and H. Daume.
2008.
Nametranslation in statistical machine translation?learningwhen to transliterate.
In Proc.
of ACL/HLT.F.
Huang, S. Vogel, and A. Waibel.
2004.
Improvingnamed entity translation combining phonetic and se-mantic similarities.
In Proc.
of HLT/NAACL.S.
Karimi, F. Scholer, and A. Turpin.
2007.
Col-lapsed consonant and vowel models: New ap-proaches for English-Persian transliteration and back-transliteration.
In Proc.
of ACL.A.
Klementiev and D. Roth.
2008.
Named entity translit-eration and discovery in multilingual corpora.
InLearning Machine Translation.
MIT press.K.
Knight and J. Graehl.
1998.
Machine transliteration.Computational Linguistics, 24(4):599?612.K.
Knight and K. Yamada.
1999.
A computational ap-proach to deciphering unknown scripts.
In Proc.
of theACL Workshop on Unsupervised Learning in NaturalLanguage Processing.K.
Knight, A. Nair, N. Rathod, and K. Yamada.
2006.Unsupervised analysis for decipherment problems.
InProc.
of COLING/ACL.J.
Kuo, H. Li, and Y. Yang.
2006.
Learning translitera-tion lexicons from the web.
In Proc.
of ACL/COLING.H.
Li, C. Sim, K., J. Kuo, and M. Dong.
2007.
Semantictransliteration of personal names.
In Proc.
of ACL.M.
Nagata, T. Saito, and K. Suzuki.
2001.
Using the webas a bilingual dictionary.
In Proc.
of the ACL Work-shop on Data-driven Methods in Machine Translation.J.
Oh and H. Isahara.
2006.
Mining the web for translit-eration lexicons: Joint-validation approach.
In Proc.of the IEEE/WIC/ACM International Conference onWeb Intelligence.S.
Ravi and K. Knight.
2008.
Attacking deciphermentproblems optimally with low-order n-gram models.
InProc.
of EMNLP.S.
Ravi and K. Knight.
2009.
Probabilistic methods for aJapanese syllable cipher.
In Proc.
of the InternationalConference on the Computer Processing of OrientalLanguages (ICCPOL).T.
Sherif and G. Kondrak.
2007a.
Bootstrapping astochastic transducer for arabic-english transliterationextraction.
In Proc.
of ACL.T.
Sherif and G. Kondrak.
2007b.
Substring-basedtransliteration.
In Proc.
of ACL.R.
Sproat, T. Tao, and C. Zhai.
2006.
Named entitytransliteration with comparable corpora.
In Proc.
ofACL.T.
Tao, S. Yoon, A. Fister, R. Sproat, and C. Zhai.
2006.Unsupervised named entity transliteration using tem-poral and phonetic correlation.
In Proc.
of EMNLP.J.
Wu and S. Chang, J.
2007.
Learning to find Englishto Chinese transliterations on the web.
In Proc.
ofEMNLP/CoNLL.D.
Yarowsky.
1995.
Unsupervised word sense disam-biguation rivaling supervised methods.
In Proc.
ofACL.S.
Yoon, K. Kim, and R. Sproat.
2007.
Multilingualtransliteration using feature based phonetic method.
InProc.
of ACL.D.
Zelenko and C. Aone.
2006.
Discriminative methodsfor transliteration.
In Proc.
of EMNLP.45
