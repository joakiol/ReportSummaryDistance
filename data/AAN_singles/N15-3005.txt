Proceedings of NAACL-HLT 2015, pages 21?25,Denver, Colorado, May 31 ?
June 5, 2015.c?2015 Association for Computational LinguisticsRExtractor: a Robust Information ExtractorVincent Kr??
?z and Barbora Hladk?aCharles University in PragueFaculty of Mathematics and PhysicsInstitute of Formal and Applied Linguistics{kriz, hladka}@ufal.mff.cuni.czAbstractThe RExtractor system is an information ex-tractor that processes input documents by nat-ural language processing tools and conse-quently queries the parsed sentences to ex-tract a knowledge base of entities and their re-lations.
The extraction queries are designedmanually using a tool that enables naturalgraphical representation of queries over de-pendency trees.
A workflow of the system isdesigned to be language and domain indepen-dent.
We demonstrate RExtractor on Czechand English legal documents.1 IntroductionIn many domains, large collections of semi/un-structured documents form main sources of informa-tion.
Their efficient browsing and querying presentkey aspects in many areas of human activities.We have implemented an information extrac-tion system, RExtractor, that extracts informa-tion from texts enriched with linguistic structures,namely syntactic dependency trees.
This structureis represented as a rooted ordered tree with nodesand edges and the dependency relation betweentwo nodes is captured by an edge between them.Namely, we work with the annotation framework de-signed in the Prague Dependency Treebank project.1RExtractor forms an extraction unit of a com-plex system performing both information extractionand data publication according to the Linked DataPrinciples.
More theoretical and practical details1http://ufal.mff.cuni.cz/pdt3.0on the system are provided in (Kr??
?z et al, 2014).The system focuses on processing Czech legal doc-uments and has been implemented in an applied re-search project addressed by research and businesspartners.2The extraction systems known from literaturewere evaluated against gold standard data, e.g.DKPro Keyphrases (Erbs et al, 2014), Relation-Factory (Roth et al, 2014), KELVIN (McNameeet al, 2013), Propminer (Akbik et al, 2013), OL-LIE (Mausam et al, 2012).
We name this typeof evaluation as academic one.
According to thestatistics provided by International Data Corpora-tion (Gantz and Reinsel, 2010), 90% of all avail-able digital data is unstructured and its amount cur-rently grows twice as fast as structured data.
Nat-urally, there is no capacity to prepare gold stan-dard data of statistically significant amount for eachdomain.
When exploring domains without goldstandard data, a developer can prepare a small setof gold standard data and do academic evaluation.He gets a rough idea about his extractor perfor-mance.
But he builds a system that will be usedby users/customers, not researchers serving as eval-uators.
So it is user/customer feedback what pro-vides evidence of performance.
This particular fea-ture of information extraction systems is discussedin (Chiticariu et al, 2013) together with techniquesthey use academic systems and commercial systems.We decided to do a very first RExtractor testingby experts in accountancy.
It has not done yet so wehave no evidence about its quality from their per-spective.
However, we know what performance the2http://ufal.mff.cuni.cz/intlib21system achieves on the gold standard data that weprepared in the given domain.
We list it separatelyfor entity extraction, where Precision = 57.4%, Re-call = 91.7%, and relation extraction, where P =80.6%, R = 63.2%.
Details are provided in (Kr??
?zet al, 2014).2 RExtractor DescriptionRExtractor is an information extractor that processesinput documents by natural language processingtools and consequently queries the parsed sentencesto extract a knowledge base of entities and their re-lations.
The parsed sentences are represented asdependency trees with nodes bearing morphologi-cal and syntactic attributes.
The knowledge basehas the form of (subject, predicate, object) tripleswhere subject and object are entities and predicaterepresents their relation.
One has to carefully distin-guish subjects, predicates and objects in dependencytrees from subjects, predicates and objects in entity-relation triples.Figure 1: RExtractor workflowRExtractor is designed as a four-component sys-tem displayed in Figure 1.
The NLP component out-puts a syntactic dependency tree for each sentencefrom the input documents using tools available in theTreex framework.3Then the dependency trees arequeried in the Entity Detection and Relation Extrac-tion components using the PML-TQ search tool (Pa-jas and?St?ep?anek, 2009).
The Entity Detection com-ponent detects entities stored in Database of Entities(DBE).
Usually, this database is built manually bya domain expert.
The Relation Extraction compo-nent exploits dependency trees with detected entitiesusing queries stored in Database of queries (DBQ).This database is built manually by a domain expert3http://ufal.mff.cuni.cz/treexFigure 2: Extraction of who creates whatSubject Predicate Objectaccounting unit create fixed itemaccounting unit create reserveTable 1: Data extracted by the query displayed in Figure 2in cooperation with an NLP expert.
Typically, do-main experts describe what kind of information theyare interested in and their requests are transformedinto tree queries by NLP experts.Illustration Let?s assume this situation.
A domainexpert is browsing a law collection and is interestedin the to create something responsibility of any body.In other words, he wants to learn who creates whatas is specified in the collection.
We illustrate theRExtractor approach for extracting such informa-tion using the sentence Accounting units create fixeditems and reserves according to special legal regu-lations.Firstly, the NLP component generates a depen-dency tree of the sentence, see Figure 2.
Secondly,the Entity Detection component detects the entitiesfrom DBE in the tree: accounting unit, fixed item,reserve, special legal regulation (see the highlightedsubtrees in Figure 2).
Then an NLP expert formu-lates a tree query matching the domain expert?s issuewho creates what.
See the query at the top-right cor-ner of Figure 2: (1) he is searching for creates, i.e.for the predicate having lemma create (see the rootnode), (2) he is searching for who, i.e.
the subject22Figure 3: Extraction of who should do whatSubject Predicate Objectoperator submit proposalTable 2: Data extracted by the query displayed in Figure 3(see the left son of the root and its syntactic functionafun=Sb), and what, i.e.
the object (see the rightson of the root and its syntactic function afun=Obj).Even more, he restricts the subjects to those that arepre-specified in DBE (see the left son of the root andits restriction entity=true).
Finally, the RelationExtraction component matches the query with thesentence and outputs the data presented in Table 1.A domain expert could be interested in more gen-eral responsibility, namely he wants to learn whoshould do what where who is an entity in DBE.
Atree query matching this issue is displayed in Fig-ure 3.
The query is designed to extract (subject,predicate, object) relations where the subject is theobject in a sentence.
We extract the data listed inTable 2 using this query for entity-relation extrac-tion from the sentence The proposal for entry intothe register shall be submitted by the operator.Technical details RExtractor is conceptualized asa modular framework.
It is implemented in Perl pro-gramming language and its code and technical de-tails are available on Github:http://github.com/VincTheSecond/rextractorEach RExtractor component is implemented as astandalone server.
The servers regularly check newdocuments waiting for processing.
A document pro-cessing progress is characterized by a document pro-cessing status in the extraction pipeline, e.g.
520 ?Entity detection finished.The system is designed to be domain independent.However, to achieve better performance, one wouldlike to adapt the default components for a given do-main.
Modularity of the system allows adding, mod-ifying or removing functionalities of existing com-ponents and creating new components.
Each com-ponent has a configuration file to enable various set-tings of document processing.A scenario with all settings for the whole extrac-tion pipeline (set up in a configuration file) is calledan extraction strategy.
An extraction strategy sets aparticular configuration for the extraction pipeline,e.g.
paths to language models for NLP tools, pathsto DBE and DBQ.The RExtractor API enables easy integration intomore complex systems, like search engines.3 RExtractor DemonstrationThe RExtractor architecture comprises two corecomponents: (a) a background server processingsubmitted documents, and (b) a Web application toview a dynamic display of submitted document pro-cessing.Web interface enables users to submit documentsto be processed by RExtractor.
In the submissionwindow, users are asked to select one of the extrac-tion strategies.
Users can browse extraction strate-gies and view their detailed description.
After suc-cessful document submission, the document waitsin a queue to be processed according to the speci-fied extraction strategy.
Users can view a display ofsubmitted document processing that is automaticallyupdated, see Figure 4.In Figure 5, the following information is visual-ized: (1) Details section contains metadata aboutdocument processing.
(2) Entities section shows an23Figure 4: RExtractor web interface, part 1Figure 5: RExtractor web interface, part 2input document with the highlighted entities that canbe viewed interactively: by clicking on the entity, anadditional information about the entity is uploadedand presented.
(3) Relations section consists oftables where (subject, predicate, object) triples arelisted.
In addition, the relevant part of the documentwith the highlighted triples is presented as well.Our demonstration enables users to submit textsfrom legal domain and process them according totwo currently available extraction strategies, Czechand English.
Once the document processing isfinished, users can browse extracted entity-relationtriples.4 RExtractor Onlinehttp://odcs.xrg.cz/demo-rextractor5 ConclusionWe presented the RExtractor system with the follow-ing features:?
Our ambition is to provide users with an inter-active and user-friendly information extractionsystem that enables submitting documents andbrowsing extracted data without spending timewith understanding technical details.?
A workflow of RExtractor is language inde-pendent.
Currently, two extraction strategiesare available, for Czech and English.
Creat-ing strategies for other languages requires NLPtools, Database of entities (DBE) and Databaseof queries (DBQ) for a given language.?
A workflow of RExtractor is domain indepen-dent.
Currently, the domain of legislation iscovered.
Creating strategies for other domainsrequires building DBE and DBQ.
It is a jointwork of domain and NLP experts.?
RExtractor extracts information from syntacticdependency trees.
This linguistic structure en-ables to extract information even from complexsentences.
Also, it enables to extract even com-plex relations.?
RExtractor has both user-friendly interface andAPI to address large-scale tasks.
The systemhas already processed a collection of Czech le-gal documents consisting of almost 10,000 doc-uments.?
RExtractor is an open source system but somelanguage models used by NLP tools can be ap-plied under a special license.Our future plans concern the following tasks:?
experimenting with syntactic parsing proce-dures in the NLP component that are of a cru-cial importance for extraction?
evaluating RExtractor against the data that areavailable for various shared tasks and confer-ences on information retrieval, e.g.
TAC4,TRAC54http://www.nist.gov/tac/5http://trec.nist.gov/24?
making tree query design more user-friendlyfor domain experts?
getting feedback from customers?
incorporating automatic procedures for extrac-tion of both entities and relations that arenot pre-specified in Database of Entities andDatabase of Queries, resp.?
creating strategies for other languages andother domainsThrough this system demonstration we hope to re-ceive feedback on the general approach, explore itsapplication to other domains and languages, and at-tract new users and possibly developers.AcknowledgmentsWe gratefully acknowledge support from the Tech-nology Agency of the Czech Republic (grant no.TA02010182), The Bernard Bolzano Foundationand SVV project no.
260 224.
This work has beenusing language resources developed and/or storedand/or distributed by the LINDAT/CLARIN project.We highly appreciate RExtractor-related discussionswith Martin Ne?cask?y and colleagues from Sysnet,Ltd.ReferencesAlan Akbik, Oresti Konomi, and Michail Melnikov.2013.
Propminer: A workflow for interactive infor-mation extraction and exploration using dependencytrees.
In Proceedings of the 51st Annual Meeting of theACL: System Demonstrations, pages 157?162.
ACL.Laura Chiticariu, Yunyao Li, and Frederick R. Reiss.2013.
Rule-based information extraction is dead!
longlive rule-based information extraction systems!
InEMNLP, pages 827?832.
ACL.Nicolai Erbs, Bispo Pedro Santos, Iryna Gurevych, andTorsten Zesch.
2014.
Dkpro keyphrases: Flexible andreusable keyphrase extraction experiments.
In Pro-ceedings of 52nd Annual Meeting of the ACL: SystemDemonstrations, pages 31?36.
ACL.John Gantz and David Reinsel.
2010.
The digital uni-verse decade ?
Are you ready?Vincent Kr??
?z, Barbora Hladk?a, Martin Ne?cask?y, andTom?a?s Knap.
2014.
Data extraction using NLPtechniques and its transformation to linked data.
InHuman-Inspired Computing and Its Applications -13th Mexican International Conference on ArtificialIntelligence, MICAI 2014, Tuxtla Guti?errez, Mexico,November 16-22, 2014.
Proceedings, Part I, pages113?124.Mausam, Michael Schmitz, Robert Bart, Stephen Soder-land, and Oren Etzioni.
2012.
Open language learn-ing for information extraction.
In Proceedings of the2012 Joint Conference on Empirical Methods in Natu-ral Language Processing and Computational NaturalLanguage Learning, EMNLP-CoNLL ?12, pages 523?534, Stroudsburg, PA, USA.
ACL.Paul McNamee, James Mayfield, Tim Finin, Tim Oates,Dawn Lawrie, Tan Xu, and Douglas Oard.
2013.Kelvin: a tool for automated knowledge base construc-tion.
In Proceedings of the 2013 NAACL HLT Demon-stration Session, pages 32?35.
ACL.Petr Pajas and Jan?St?ep?anek.
2009.
System for query-ing syntactically annotated corpora.
In Gary Lee andSabine Schulte im Walde, editors, Proceedings of theACL-IJCNLP 2009 Software Demonstrations, pages33?36, Suntec, Singapore.
Association for Computa-tional Linguistics.Benjamin Roth, Tassilo Barth, Grzegorz Chrupa?a, Mar-tin Gropp, and Dietrich Klakow.
2014.
Relation-factory: A fast, modular and effective system forknowledge base population.
In Proceedings of theDemonstrations at the 14th Conference of the Euro-pean Chapter of the ACL, pages 89?92, Gothenburg,Sweden, April.
ACL.25
