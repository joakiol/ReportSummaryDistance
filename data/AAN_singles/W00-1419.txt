Generat ing a Controlled LanguageLaurence Danlos Guy LapalmeUniversitd Paris 7 Ddpartement  d' informatique t ROTALANA UFR Linguist ique Universitd de MontrdalCase 7003-2, Place Jussieu C.P.
6128, Succ Centre-Vil le75251 Paris;' France- " Montreal ;  QuEbec, CCana~dai::~3C 337danlos?linguist, jussieu, fr lapalme@iro, umontreal, caVeron ika  Lux  *Xerox Research Centre Europe6, chemin de Maupertu is38240 Meylan, FranceVeron ika .
Lux@xrce.
xerox ,  comAbst rac tThis paper argues for looking at Controlled Lan-guages (CL) from a Natural Language Genera-tion (NLG) perspective.
We show that CLs areused in a normative nvironment in which dif-ferent textual modules can be identified, eachhaving its own set of rules constraining the text.These rules can be used as a basis for naturallanguage generation.
These ideas were tested ina proof of concept generator for the domain ofaircraft maintenance manuals.1 What  is a Cont ro l led  Language?Controlled Languages (CLs) result from a grow-ing concern about technical documentationquality and translation, be it human or auto-matic.
A CL consists of a glossary and of writ-ing rules for the linguistic aspect of the doc-umentation.
These rules are given as recom-mendations or prohibitions for both the lexiconand the grammar.
Currently, most CLs arevarieties of "controlled English" which derivefroth the Caterpillar Tractor Company Funda-veloped for CL users, the best known being con-formity checkers/controllers such as AlethCL orSECC (CLA, 1996).A writer expects that the checking tool shouldnot only detect errors but also propose a CLconformable xpression.
A. Nasr (Nasr, 1996),who worked on the problem of CL refornmla-tion, underlines the difficulties of this task.
Re-formulation cannot make any hypotheses aboutthe conformity of the input sentences, andtherefore must deal with a wider variety oflexico-syntactical constructions than those al-lowed in a CL.
Some instances of noncomplianceare relatively easy to detect but much more dif-ficult to correct: for example, sentences that arelonger than the prescribed number of words.So there is little hope that human writers willever produce documentation complying strictlywith a CL even with the help of a conformitychecker.
We argue that it may be more promis-ing to use NLG technology for generating doc-.umentation in.
CL instead of analyzing it af-terwards, as it is the case with a conformitychecker.
Few researchers have looked at CLsmental English tha t vi~..elab0rated.in the S~: ...... from-:a~-~generation p int  of view.. (Nasr, 1996;ties (Scheursand Adriaens, 1992).
However CLs Hartley and Paris, 1996); but we think thatare presently being defined for German, Swedishand French.Technical writers find it difficult to complywith the writing rules of a CL which are oftenhard to justify (CLA.
1996).
For them, a CL isseen as an additional constraint on an alreadycomplex task.
This is why tools have been de-" Work done while at the Adrospatiale Research Centerthere are very compelling reasons for taking ageneration perspective, in addition to the ad-vantages of NLG for CLs that will be presentedin section 3:* As CLs can be viewed as linguistic specifi-cations for human beings, it seems natural"to, .consider them 'a:s specifica'tkms for thelinguistic component of an NLG system.141e CL writing specifications come on top ofother writing norms which deal with docu-ment structuring.
For example, in the aero-nautical industry, CLs such Simplified En-glish (SE) (AEC, 1995) and Fran~ais Ra-tionalisd (FR) (GIFAS, 1996) extend theATA 100 norms (Bur, 1995) which describethe divisionof the document into chapl:ers,sections, subsections, etc.
reflecting a tree-structured functional organization of theairplane: a chapter corresponds to a sys-tem (e.g.
main rotor), a section to a sub-system (e.g.
gear box), a subsection to asub-sub-system (e.g.
set of gears), and soon.
Over this thematic structure is added acommunicative structure to fulfill two maingoals: describe all systems of the airplaneand prescribe all maintenance instructionsfor the airplane.
The norms of the ATAcan be viewed as specifications for the textstructuring component of an NLG system.?
The thematic and communicative structur-ing of the document must also conformto a systematic non-linear page number-ing system and strict formatting rules us-ing SGML tags.
These constraints can beviewed as specifications for the layout com-ponent of an NLG system.So we claim that CLs should not be con-sidered outside the context of the productionof complex structured ocuments, which natu-rally raises the question of the automatic gen-eration of this documentation given some for-real representation.
This claim led V. Lux (Lux,1998) to redefine the notion of a CL.
Her studyhas shown that only a few syntactic constraints(e.g.
coordination constraints) are applicable tothe whole document.
Most constraints are onlyvalid for sub-parts of the document, identifiedas "textual modules".
Each textual module hasa particular communicative goal  and a precisetheme according to the ATA 100 norms.
It canbe divided into smaller modules: for example,the Task module is divided into simpler Sub-Task modules which are themselves composedof simpler Instructions modules.
From a lin-guistic point of view, a textual module uses onlya controlled sublanguage.
V. Lux thus extendedFR to a new CL .called.
:RREM (.Fr.aa~gais Ra-tionalise'.
Etendu Modulaire) comprising manyCLs, each having its own syntactic rules fora specific textual module.
She also performeda corpus study showing that the same textualmodules could be identified for both French andEnglish.
It should thus be possible to remodu-larize SE similarly to what has been done toFR with FREM.
In this paper, we thereforein t roduce  the: not ion of aii Extei ided ModularControlled Language (EMCL) which first de-fines some general rules and then some morespecific ones for each textual module.
We nowlook at the problem of automatical ly generat-ing technical documentation complying both tostructuration orms such as ATA 100 and to therules of an EMCL.2 How to  generate  techn ica ldocumentat ion?We assume that a generation system can be di-vided into a What to say and How to say itcomponents, even though this may be consid-ered as a gross simplification.2.1 What  to say componentThe main difficulty for NLG in a real environ-ment lies in knowledge modeling.
For aircraftmaintenance manuals, existing ontologies couldprobably be reused, but even then the model-ing efforts required are huge.
Nevertheless, weassume that it is possible to design forms whichare sequentially presented to the user to befilled, as in Drafter (Paris et al, 1995), throughwhich the technical writer provides the infor-mation to convey in an appropriate fornlalism.These forms can be derived directly fi'om thetree-like structure of the document given in theATA norms.
The goal is that, once the writerhas finished filling in these forms, the technicaldocunmntation is already properly structured inan abstract language instead of a natural one.In a general text generation setting, using formsto describe What is to be said might seem likea difficult task; but in the context of techni-cal writing, the informational content is almostalready prescribed and forms are thus a sin>ple way of complying with the rules of a CL.Indeed in the now comlnon web enviromnents,forms are frequently used for eliciting informa-tion from users.
This input can then be pro-cessed by the "tIow to say it and layout compo-nents.142The writers who find it very difficult to com-ply with the rules of a CL have no problemcomplying with the ATA 100 norms, therebyproducing documents with the right thematicand communicative structuration.
This can beseen as an illustration of observations made in -However, many writing rules in a CL placeparticular syntactic constraints on the use of,a given lexical item, e.g.
in FR a rule forbidsthe use of emp~cher (prevent) when followed byan infinitive clause.
To handle such numerouslexically dependent syntactic rules, a formal-psycholinguistics.describes a model of the speaker's activity inwhich choices in the What to say componentare conscious, while choices in the How to say itcomponent are automatic.
This model helps un-derstand some of the difficulties that CL usersface.
A CL forces the writer to become con-scious of behavioral mechanisms that are usu-ally automatic; The writer is thus distractedfrom choices made earlier in her/his writingtask.
So s/he often ends up writing it in theway  it has  to be written but does not write ex-actly what  had to be written, thus defeatingthe whole purpose of a CL which was meant toproduce a better expression of the information.This model also explains why a human writerhas less difficulties following the ATA norms:this part of the job corresponds to consciouschoices.
In the NLG scenario, this is replacedby filling in some information in the forms thatare presented.To sum up, the What to say component re-quires a modelization of the domain model andthe design of a series of forms to be filled.
Ahuman writer using the NLG system has to fillforms but on the other hand, s/he does not haveto learn a CL, since compliance with the CLnorms is taken care by the How to say it com-ponent which we now describe.2.2 How to say it componentIn this section, it is assumed that if a CL isin fact an EMCL such as FREM, a specific Howto say it component is designed for each textualmodule, but always retaining the same formal-ism.The lexicon used in the How to s~zyit corn- .
.
.
.ponent should be exactly the one enforced bythe CL.
Similarly, the syntactic constructionsand the discourse structures of this componentshould correspond to the set of allowed con-structions / structures in the CL.
This can sim-plify some lexical, syntactic and even discoursechoices to be made within the generation sys-tern and thus ensure that .the gener~ed textcomplies with the rules of the CL.Levelt (Levelt , 1989, p. 9): ism based on a lexicalized grammax:is needed.We chose Lexicalized Tree Adjoining Grammar(LTAG) for the following reasons:* A text generation formalism inspired fromLTAG, called G-TAG, has been designed,implemented and used in several applica-tions (Danlos and Meunier, 1996; Meunier,1997; Danlos, 1998; Meunier and Danlos,1998; Danlos, 2000).
G-TAG takes as in-put an event graph which can be providedby the user  by filling in some forms whichensure that all the necessary informationfor generation is provided.o G-TAG deals with textual phenomena suchas sentence connectors by extending LTAGto handle discourse comprised of more thanone sentence.
One of the major innovationsof FREM compared to FR (and of EMCLcompared to CL) is to implement rules forconnecting sentences (clauses).
The way toconnect sentences has largely been ignoredin CLs, although this linguistic issue raisesambiguities which can lead to maintenanceerrors.
For example, simple juxtapositionof sentences i allowed in FR but disallowedin FREM because it is highly dangerous.
Atechnician reading Nettoyer X.  Verser Ysur X.
(Clean X. Pour Y on X.)
could in-terpret this to mean either "Clean X withY" or "Clean X with Z, and next pourY on X".
Only one of these operations isright, the other one may lead to a mainte-nance error.
On the other hand, traditionalsyntactical ambiguities uch as a preposi-.... tional attaehment...will-.not, usually lead tomaintenance rrors because the techniciancan usually solve them on the basis of somedomain knowledge.o The lexicalized grammar in G-TAG is com-piled from the recta-grammar designed andimplemented by M.H.
Candito (Candito.1996).
This makes it easy to follow theevolution ofru les  of an (EM)CL.
For ex-ample, if the rule to write an Instruction143changes from "Put a verb in the infini-tive" to "Insert an imperative", then thismust be changed everywhere in the lexi-calized grammar.
Using the metagrammarwe can achieve this quite easily because ofthe hierarchical organization of a LTAG:with only one rule, an imperative can beallowed and an-infinitive ~disallowed ( in amain clause) for every verb, whatever itsargument structure and syntactic onstruc-tion.G-TAG thus seems a good candidate for pro-ducing technical documentation complying withthe constraints of an (EM)CL.
A technical doc-umentation generator prototype in the aeronau-tical domain is described in Section 4.
It is writ-ten in Flaubert, an implementation f G-TAG(Danlos and Meunier, 1996).
The How to sayit component would have to be completed byadding a layout component complying with thenorms of ATA 100.
We should also provide re-vision tools to allow the writer to fine tune thefinal text.So, automatically generating technical docu-mentation seems technically possible providedthe technical writer is willing to fill forms whichin principle should be less demanding thanlearning the rules of an (EM)CL.
This approachalso has other advantages, described in the nextsection.3 Advantages  o f  automat icgenerat ion  o f  techn ica ldocumentat ion3.1 Mult i l ingual i tyOne of tile major assets of NLG is its capacityto simultaneously generate texts in several lan-guages, and to regenerate updates as often asnecessary, using a single input representation,thus ensuring coherence among the generatedtexts.Until now, CLs-have .dealt-withr muttitingual-ity by means of the translation hypothesis.
Itis for this reason that FR was developed byadapting SE, in order to ease the translationfrom French to English.
FR authors try to en-sure that everything that can also be writtenin FR can be translated into SE.
From thispoint of view, the definition of a source CLt,depends on the.
defini.tion:.of, a tin:get CL2.
De-velopers of CL1 are more likely to select struc-tures which can be easily or even literally trans-lated into CL2.
What then happens if CLt andCL2 are structurally different?
This can leadto a situation where CL1 imposes a cumber-some writing style that contravene conventionsshared by native speakers of Li, thereby con-tradicting CLs' aim of enhancing understand-ability.
Rules 0f-aii (EM)CL should be elabo-rated without such multilingual considerations.Their definition should principally pay atten-tion to the characteristics of one language, try-ing to avoid typical ambiguities.
Such criteriaare difficult enough to deal within a single lan-guage without taking translation problems intoaccount.Now if we consider multilingual generation i(EM)CLs, we find that there are major benefitsfrom the multilingualism odeling proposed byNLG.
In particular, defining a common repre-sentation is possible since the structure of thedocumentation is language independent.
Recallfrom section 1 that the thematic structure of thedocumentation in the aeronautical domain mustreflect the functional decomposition of the air-plane and that the same textual modules can beidentified in many languages.
Thus nothing hasto be changed in the What to say component(Section 2.1) going from one language to theother.
Only the How to say it component (Sec-tion 2.2) need be adapted to the target (EM)CLwhich should be monolingually defined.3.2 NLCI as an aid for test ing anddeveloping a CLAn NLG system can provide concrete assistancefor the testing and for tile development of a CL.An NLG system that integrates the CL con-straints can help discover contradictions in theCL definition.
As an illustration, a major dif-ficulty in CL definition concerns the coherencebetween the lexicon and the writing rules, as il-lustrated by (Emorine, 1994) with the followingexample:o Emp~cher l'oxyg~ne de s'accumuler (Pre-vent the oxygen from accumulating) doesnot conform to a FR lexically depen-dent syntactic rule, according to whichempdcher (prevent) should not be followedby an infinitive clause........ ~ .~ Emp~cher I ~uccumulation ' d.'~ozyg~ne ?
(Pre-vent oxygen accumulat ion) does not con-144agent objectU0 O5Titled sub-tasktitle :Sub-TaskDISPOSERlst-instIPrecond-Instlst-order pre-condI IDISPOSER ENLEVERagent object agent objectI I I IUo 04 Uo Ingo2nd-instISimul-Instlst-order 2nd-orderI IEXTRAIRE DEPOSERagent object agent objectI I I IU0 O2 u0 Oa3rd-instIInstIlst-orderIDEPOSERagent object toolI I Iu0 o5 ToFigure 1: Event graph given as input to Flaubert.
In the prototype, this information is entered intextual form.form to FR lexicon, according to which theverb s'accumuler (accumulate) should beused instead of the noun accumulation (ac-cumulation)Emp~cher que l'oxyg~ne ne s'accumule(Prevent that the oxygen accumulates)does not conform to the writing rule thatforbids the use of the subjunctive mode.So we come to a dead end if we want to use the "verb empdcher (prevent).
This problem can bedetected automatically by the NLG system.andan appropriate fix be made in the grammar.NLG can be used for checking a CL, whichis helpful even if the CL is intended for a hu-man writer because it may avoid the discoveryof various cases of incoherence by the writer.
Iftile writers can justify their writing difficultiesby pointing out inconsistencies in the CL defini-tion, they won't be motivated to use what theywill tend to consider'as an~-abmird invention, by ....people who understand nothing about the .job.NLG can also help strengthen CLs' claim tolead to more homogeneous texts, which is equiv-alent to forbidding certain paraphrases.
NLGprecisely deals with paraphrase as, for some in-puts, a NLG system will produce several texts.In this way, NLG helps identify which para-phrases till remain possible in the CL.
In prac-tice, when an NLG system proposes severaltexts for one input, it raises the question forthe CL developer: Should a constraint be addedto the CL definition in order to forbid some ofthese texts ?4 P roo f  o f  concept  generatorThe previous ections have argued for the inter-est of dealing with CL from all NLG perspec-tive which to our knowledge had never been ex-amined ill such details.
To further pursue, V.Lux (Lux, 1998) has developed a proof of con-cept generator using Flaubert (Meunier, 1997;Meunier-and "Danlos., :1998)" ~o"gee ?
?howthese "theoretical concerns could be applied in prac-145Sous-t~che 60-0073.1 DEpose du segment d'arr~t (5)- Apr~s avoir enlev~ le mastic PR, d~poser le segment d'arr~t (4).- Extraire le porte joint (2) et d~poser le joint (3).- D@oser le segment d'arr~t (5) g l'aide de l'outillage (Z).
: ..-~ I~igure~2:~::-Text~gffaera~ed~:by.~-Elu~aber~t.,-from.the~:input of~Figure-1 .
.
.
.
.
.
.
.
.
.tice.
The generator can produce text for aboutten subtasks in FREM.
These tasks comprisefrom two to eleven instructions, illustrating tendifferent instruction types such as: simple in-struction with a goal, simple instruction with acondition, complex instruction with simultane-ous actions, etc.
They involve the use of varioussyntactical constructions uch as infinitive orsentential subordinates, nominalisation, nega-tion, etc.Input to the prototype are event graphs suchas the one given in Figure 1.
The output is awell formed French text such as the one in Fig-ure 2 which was generated from Figure 1.
InLux's prototype, the event graphs were handcoded, but now Flaubert has been rewrittenin CLEF (Meunier, 1999; Meunier and Reyes,1999), which has a better graphical input mech-anism that would have eased the input process.The output text is a sub-task including a ti-tle and instructions of different ypes (only thefirst three instructions are given in the Figures)to be performed by the same person (e.g.
U0).FREM defines which connector to use for eachinstruction type (e.g.
conjunction et for an in-struction with simultaneous actions).The generation of noun groups for the ob-jects (Oi), ingredients ( Ingi)  and tools (Ti) re-lies on a mapping table between these labelsand their denominations; this was a temporarysolution for problems outside the scope of theprototype.
We should have relied on existingnomenclatures for tools'andi'ngredients; and onthe fact that objects are systematically repre-sented in drawings associated with various sub-tasks e.g.
O5, called segment d'arr~t, is labeled(5) on the drawing associated with the exam-ple above.
In a graphical interface nvironment,authors would select these objects linked to acontrolled terminology data base.This proof of,concept ,ge~erator .ser-~ed :, well .....our purpose of testing our theoretical ideas butunfortunately it could not be evaluated in a re-alistic CL text production environment.
Oursponsors were very interested in the results wehave produced but changes in their organisationmade it impossible to carry further investiga-tions.
We intend to further pursue our researchand use the new implementation of Flaubert togenerate controlled language in an other areaof application while keeping the concept of anextended modular CL.5 Conc lus ionThis paper has argued that linguistic norms im-posed by CLs should not be considered in iso-lation.
They are only a part of a set of morecomprehensive norms on the document struc-ture and layout.
This insight led us to define anotion of textual modules, each with its ownlinguistic norms, and to envisage the genera-tion of technical documentation using an ex-tended modular controlled language (EMCL).Norms for document structure such as ATA100,its linguistic characteristics and its layout re-quirements may be seen to respectively definethe text structuring, the linguistic and the lay-out components of an NLG system.We have also shown that a generation point ofview can help refine tile definition of an EMCL.The EMCL can be defined monolingually, mul-tilinguality being obtained through NLG.
Theseideas were tested within a proof of concept extgenerator, in thedomain  of' aircraftmaintenancemanuals.AcknowledgmentWe thank our former colleagues at Aerospa-tiale Research Center and Frdd~ric Meunierwho implemented Flaubert.
We also thank EI--liottqkffacMowitch,-who suggestedmany improve- " "ments to the paper.146ReferencesAECMA Document PSC-85-16598, 1995.
Sim-plified English Standard, a guide for thepreparation of Aircraft Maintenance Doc-umentation in the International AerospaceMaintenance Language.?
Bureau de Normatisation :de l~,A~ronaufiqueet de l'Espace (BNAE), Issy-les-Moulineaux,1995.
Spdcification ATA no 100, traduc-tion frangaise.
Specification for Manufactur-er's Technical Data - ATA Specification 10,October.M.-H. Candito.
1996.
A principle-based hierar-chical representation f LTAGs.
In Proceed-ings of the 16th International Conference onComputational Linguistics, pages 194-199,Copenhagen.CLAW.
1996.
Proceedings of the First Interna-tional Workshop on Controlled Language Ap-plications (CLAW), Leuven.L.
Danlos and F. Meunier.
1996.
G-TAG,un formalisme pour la gEnEration de texte :presentation et applications industrielles.
InActes du colloque Informatique t Langue Na-turelle, Nantes.L.
Danlos.
1998.
G-TAG: un formalisme lex-icalis~ de gdn~ration de textes inspire deTAG.
Traitement Automatique des Langues- T.A.L., 39(2):4-32.L.
Danlos, 2000.
Tag Grammars, chapter G-TAG: A Lexicalized Formalism for Text Gen-eration inspired by Tree Adjoining Grammar.CSLI.M.
Emorine.
1994.
Projet de recherche sur lamod61isation des entr6es verbales du fran~aisrationalis6.
Technical report, Universit6 deClermont II.GIFAS.
1996.
Guide du r6dacteur - partie 2:Fran~ais rationalis6.
Technical report, GI-FAS, Paris.A.
Hartley and C. Paris, 1996.
Le tezteprocddural : langage, action et cognition,chapter Une analyse fonctionnelle de textesproc6duraux : apport de la g6n6ration au-tomatique ~ la d6finition des langues ratio-nalis6es, pages 211-222.
Toulouse.W.
Levelt.
1989.
Speaking -.h'om intentionto articulation.
MIT Press.
Cambridge Mas-sachuset ts.V.
Lux.
1998.
Elaboration d'unffangais ratio-nalisd dtendu pour un manuel de maintenanceadronautique, test en gdndration automatique.Th~se de doctorat en linguistique, UniversitdParis 7.F.
Meunier and L. Danlos.
1998.
FLAUBERT:an user-friendly system for multilingual textgeneration.
In Proceedings of the 9th Interna-tianal.
Workshop.
on Natural Language Gener-ation (INLG'98), pages 284-287, Niagara-on-the-Lake.F.
Meunier and R. Reyes.
1999.
Plate-forme deddveloppement de gdn~rateurs multilingues.In Actes de la confdrence de Gdndration Au-tomatique de Texte CAT'99, pages 145-155,Grenoble, France.F.
Meunier.
1997.
Impldmentation de G-TAG,formalisme pour la gdndration inspirde desgrammaires d'arbres adjoints.
Th~se de doc-torat en informatique, Universitd Paris 7.F.
Meunier.
1999.
Mod~lisation des ressourceslinguistiques d'une application industrielle.In TALN'99, pages 243-252, Carg~se, Corse,12-17 juillet.A.
Nasr.
1996.
Un module de reformulation au-tomatique fondd sur la thdorie Sens-Texte -application aux Langues Controldes.
Ph.D.thesis, Universit~ Paris 7.C.
Paris, K. Vander Linden, M. Fischer,A.
Hartley, L. Pemberton, R. Power, andD.
Scott.
1995.
A support tool for writ-ing multilingaul instructions.
In Proceedingsof the 14th International Joint Conferenceon Artificial Intelligence (IJCAI'95), pages1398-1404, MontrEal.J.
Scheurs and G. Adriaens, 1992.
Comput-ers and writing - state of the art, chapterFrom cogram to alcogram : toward a con-trolled english grammar checker, pages 206-221.
Kluwer Academic Publishers, London.147
