XML-based Phrase Alignment in Parallel TreebanksMartin Volk, Sofia Gustafson-Capkova?, Joakim Lundborg,Torsten Marek, Yvonne Samuelsson, Frida Tidstro?mStockholm UniversityDepartment of Linguistics106 91 Stockholm, Swedenvolk@ling.su.seAbstractThis paper describes the usage of XML forrepresenting cross-language phrase align-ments in parallel treebanks.
We have de-veloped a TreeAligner as a tool for interac-tively inserting and correcting such align-ments as an independent level of treebankannotation.1 IntroductionThe combined research on treebanks and paral-lel corpora has recently led to parallel treebanks.A parallel treebank consists of syntactically anno-tated sentences in two or more languages, takenfrom translated (i.e.
parallel) documents.
In ad-dition, the syntax trees of two corresponding sen-tences are aligned on a sub-sentential level.
Thismeans word level, phrase level and clause level,but we will refer to it as phrase alignment sinceit best represents the idea.
Parallel treebanks canbe used as training or evaluation corpora for wordand phrase alignment, as input for example-basedmachine translation (EBMT), as training corporafor transfer rules, or for translation studies.We are developing an English-German-Swedishparallel treebank.
In this paper we will focus onthe representation of the treebank and the align-ment.
We will briefly explain the steps for buildingthe parallel treebank and describe our new align-ment tool.
This paper is a follow-up and revisionof (Samuelsson and Volk, 2005) based on fresh in-sights from this tool.2 Building the treebanksOur parallel treebank contains the first two chap-ters of Jostein Gaarder?s novel ?Sofie?s World?with about 500 sentences.1 In addition it contains500 sentences from economy texts (a quarterly re-port by a multinational company as well as part ofa bank?s annual report).In creating the parallel treebank, we havefirst annotated the monolingual treebanks withthe ANNOTATE treebank editor.2 It includesThorsten Brants?
statistical Part-of-Speech Taggerand Chunker.
The chunker follows the TIGERannotation guidelines for German (Brants andHansen, 2002), which gives a flat phrase structuretree.
This means, for instance, no unary nodes,no ?unnecessary?
NPs (noun phrases) within PPs(prepositional phrases) and no finite VPs (verbphrases).Using a flat tree structure for manual treebankannotation has two advantages for the human an-notator: fewer annotation decisions, and a betteroverview of the trees.
This comes at the prizeof the trees not being complete from a linguisticpoint of view.
Moreover, flat syntax trees are alsoproblematic for node alignment in a parallel tree-bank.
We prefer to have ?deep trees?
to be able todraw the alignment on as many levels as possible;in fact, the more detailed the sentence structure is,the more expressive our alignment can become.As an example, let us look at the workflow for the German-Swedish parallel treebank.We first annotated the German sentences semi-automatically in the flat manner, and we then auto-matically deepened the flat syntax trees (Samuels-son and Volk, 2004).1A prototype of the parallel treebank was developed byYvonne Samuelsson and contains the first chapter of thenovel in German and Swedish.
Later, a French version wasadded and aligned to the Swedish treebank by (Tidstro?m,2005).
We would like to thank Eckhard Bick, Declan Grovesand Jo?rg Tiedemann for their help.2www.coli.uni-sb.de/sfb378/negra-corpus/annotate.html93We annotated the Swedish sentences by firsttagging them with a Part-of-Speech tagger trainedon SUC (the Stockholm-Umea?
Corpus).
Since wedid not have a Swedish treebank to train a Swedishchunker, we used a trick to apply the Germanchunker for Swedish sentences.
We mapped theSwedish Part-of-Speech tags in the Swedish sen-tences to the corresponding German tags.
Sincethe German chunker works on these tags, it thensuggested constituents for the Swedish sentences,assuming they were German sentences.
Theseexperiments and the resulting time gain were re-ported in (Volk and Samuelsson, 2004).
Uponcompletion of the Swedish treebank with flat syn-tax trees, we applied the same deepening methodas for German, and we then converted the Part-of-Speech labels back to the Swedish labels.Finally, we annotated the English sentences ac-cording to the Penn Treebank guidelines.
Wetrained the PoS tagger and the chunker on the PennTreebank and integrated them into ANNOTATE.The English guidelines lead to complete trees sothat the deepening step is not needed.3 XML Representation of the TreesAfter finishing the monolingual treebanks withANNOTATE, the trees were exported from theaccompanying SQL database and converted intoTIGER-XML.
TIGER-XML is a line-based (i.e.not nested and thus database-friendly) representa-tion for graph structures, which includes syntaxtrees with node labels, edge labels, multiple fea-tures on the word level and even crossing edges.3In a TIGER-XML graph each leaf (= token) andeach node (= linguistic constituent) has a uniqueidentifier which is prefixed with the sentence num-ber.
Leaves are numbered from 1 to 499 and nodesstarting from 500 (under the plausible assumptionthat no sentence will ever have more than 499 to-kens).
As can be seen in the following exam-ple, node 500 in sentence 12 is of the categoryPP (prepositional phrase).
The phrase consistsof word number 4, which is the preposition in,plus node 502 which in turn is marked as an NP(noun phrase), consisting of the words 5 and 6.
Itshould be noted that the id attribute in the tokenlines serves a dual purpose of identifier and ordermarker.
This makes it possible to represent cross-ing branches.<s id="s12">3See www.ims.uni-stuttgart.de/projekte/TIGER<graph root="s12_501"><terminals><t id="s12_1" word="Jetzt" pos="ADV" /><t id="s12_2" word="bog" pos="VVFIN" /><t id="s12_3" word="sie" pos="PPER" /><t id="s12_4" word="in" pos="APPR" /><t id="s12_5" word="den" pos="ART" /><t id="s12_6" word="Kl?verveien" pos="NE"/><t id="s12_7" word="ein" pos="PTKVZ" /><t id="s12_8" word="."
pos="$."
/></terminals><nonterminals><nt id="s12_500" cat="PP"><edge label="HD" idref="s12_4" /><edge label="NK" idref="s12_502" /></nt><nt id="s12_502" cat="NP"><edge label="NK" idref="s12_5" /><edge label="HD" idref="s12_6" /></nt>[...]</nonterminals></graph></s>This means that the token identifiers and con-stituent identifiers are used as pointers to representthe nested tree structure.
This example thus repre-sents the upper tree in figure 1.One might wonder why tree nesting is not di-rectly mapped into XML nesting.
But the require-ment that the representation format must supportcrossing edges rules out this option.
TIGER-XMLis a powerful representation format and is typicallyused with constituent symbols on the nodes andfunctional information on the edge labels.
Thisconstitutes a combination of constituent structureand dependency structure information.4 XML Representation of the AlignmentPhrase alignment can be regarded as an additionallayer of information on top of the syntax struc-ture.
We use the unique node identifiers for thephrase alignment across parallel trees.
We alsouse an XML representation for storing the align-ment.
The alignment file first stores the names ofthe treebank files and assigns identifiers to them.Every single phrase alignment is then stored withthe tag align.
Thus the entry in the followingexample represents the alignment of node 505 insentence 13 of language one (German) to the node506 in sentence 14 of language two (Swedish).<treebanks><tbank file="Sofie_DE.xml" id="De"/><tbank file="Sofie_SV.xml" id="Sv"/></treebanks><align type="exact"><node node_id="s13_505" tbank_id="De"/><node node_id="s14_506" tbank_id="Sv"/></align>94This representation allows phrase alignmentswithin m:n sentence alignments, which we haveused in our project.
The XML also allows m:nphrase alignments, which we however have notused for reasons of simplicity and clarity.
Twonodes are aligned if the words which they spanconvey the same meaning and could serve as trans-lation units.The alignment format allows alignments to bespecified between an arbitrary number of nodes,for example nodes from three languages.
Andit includes an attribute type which we currentlyuse to distinguish between exact and approximatealignments.5 Our Tree Alignment ToolAfter finishing the monolingual trees we want toalign them on the phrase level.
For this purposewe have developed a ?TreeAligner?.
This programis a graphical user interface to insert (or correct)alignments between pairs of syntax trees.4 TheTreeAligner can be seen in the line of tools suchas I*Link (Ahrenberg et al, 2002) or Cairo (Smithand Jahr, 2000) but it is especially tailored to visu-alize and align full syntax trees.The TreeAligner requires three input files.
OneTIGER-XML file with the trees from languageone, another TIGER-XML file with the trees fromlanguage two, plus the alignment file as describedabove.
The alignment file might initially be emptywhen we want to start manual alignment fromscratch, or it might contain automatically com-puted alignments for correction.
The TreeAlignerdisplays tree pairs with the trees in mirror orien-tation (one top-up and one top-down).
See fig-ure 1 for an example.
This has the advantage thatthe alignment lines cross fewer parts of the lowertree.
The trees are displayed with node labels andgreyed-out edge labels.
The PoS labels are omit-ted in the display since they are not relevant for thetask.Each alignment is displayed as a dotted line be-tween one node (or word) from each tree.
Clickingon a node (or a word) in one tree and dragging themouse pointer to a node (or a word) in the othertree inserts an alignment line.
Figure 2 shows anexample of a tree pair with alignment lines.
Cur-rently the TreeAligner supports two types of align-4The TreeAligner has been implemented in Python byJoakim Lundborg and is freely available at www.ling.su.se/DaLi/downloads/treealigner/index.htmFigure 1: Tree pair German-Swedish in theTreeAligner.ment lines (displayed in different colors) whichare used to indicate exact translation correspon-dence vs. approximate translation correspondence.However, our experiments indicate that eventuallymore alignment types will be needed to preciselyrepresent different translation deviations.Often one tree needs to be aligned to two treesin the other language.
We therefore provide theoption to scroll the trees independently.
For in-stance, if we have aligned only a part of tree 20from language one to tree 18 of language two, wemay scroll to tree 19 of language two in order toalign the remaining parts of tree 20.5The TreeAligner is designed as a stand-alonetool (i.e.
it is not prepared for collaborative anno-tation).
It stores every alignment in an XML file(in the format described above) as soon as the usermoves to a new tree pair.
It has been tested onparallel treebanks with several hundred trees each.6 ConclusionWe have shown a straightforward way to tie inXML-based phrase alignment information withsyntax trees represented in TIGER-XML.
Thealignment information is stored independentlyfrom the treebank files.
This independence allowsfor a modularization and separation of the anno-tation but it entails that the synchronization of the5The final result of an m:n tree alignment can be visual-ized with an SVG-based display which we have described in(Samuelsson and Volk, 2005).
SVG (Scalable Vector Graph-ics) describes vector graphics in XML.95Figure 2: Tree pair German-Swedish with alignment in the TreeAligner.treebanks with the alignment needs to be guardedseparately.
If any of the treebanks is modified, themodification of the alignment needs to follow.We have argued for the use of a graphicalTreeAligner to display and interactively modifythe alignment between parallel syntax trees.
TheTreeAligner allows for m:n sentence alignment,word alignment and node alignment.
And it sup-ports the distinction between exact and approxi-mate alignments.As a next step we plan to integrate a com-ponent for automatic phrase alignment into theTreeAligner.
The user can then select a tree pairand will get automatic phrase alignment predic-tions.
We have already experimented with theprojection of automatically computed word align-ments to predict phrase alignment.
Of course, theautomatic phrase alignment has to be manuallychecked if we want to ensure high quality align-ment data.Another avenue of further research is the inclu-sion of yet more levels of annotation.
For exam-ple, we are currently experimenting with the anno-tation of semantic frames on top of the treebanks.We use the SALSA tool developed at Saarbru?ckenUniversity (Erk and Pado, 2004) which also as-sumes TIGER-XML input.
So, TIGER-XML hasbecome the lingua franca of treebank annotationwhich allows for the addition of arbitrary layers.ReferencesLars Ahrenberg, Magnus Merkel, and Mikael Anders-son.
2002.
A system for incremental and interactiveword linking.
In Proc.
of LREC-2002, pages 485?490, Las Palmas.Sabine Brants and Silvia Hansen.
2002.
Developmentsin the TIGER annotation scheme and their realiza-tion in the corpus.
In Proc.
of LREC-2002, pages1643?1649, Las Palmas.Katrin Erk and Sebastian Pado.
2004.
A powerful andversatile XML format for representing role-semanticannotation.
In Proc.
of LREC-2004, Lisbon.Yvonne Samuelsson and Martin Volk.
2004.
Au-tomatic node insertion for treebank deepening.
InProc.
of 3rd Workshop on Treebanks and LinguisticTheories, Tu?bingen, December.Yvonne Samuelsson and Martin Volk.
2005.
Presen-tation and representation of parallel treebanks.
InProc.
of the Treebank-Workshop at Nodalida, Joen-suu, May.Noah A. Smith and Michael E. Jahr.
2000.
Cairo:An alignment visualization tool.
In Proc.
of LREC-2000, Athens.Frida Tidstro?m.
2005.
Extending a parallel treebankwith data in French.
C-uppsats, Department of Lin-guistics, Stockholm University, April.Martin Volk and Yvonne Samuelsson.
2004.
Boot-strapping parallel treebanks.
In Proc.
of Work-shop on Linguistically Interpreted Corpora (LINC)at COLING, Geneva.96
