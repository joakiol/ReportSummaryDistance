Proceedings of COLING 2014, the 25th International Conference on Computational Linguistics: Technical Papers,pages 224?232, Dublin, Ireland, August 23-29 2014.A Three-Step Transition-Based Systemfor Non-Projective Dependency ParsingOph?elie Lacroix and Denis B?echetLINA - University of Nantes2 Rue de la Houssini`ere44322 Nantes Cedex 3{ophelie.lacroix,denis.bechet}@univ-nantes.frAbstractThis paper presents a non-projective dependency parsing system that is transition-based and op-erates in three steps.
The three steps include one classical method for projective dependencyparsing and two inverse methods predicting separately the right and left non-projective depen-dencies.
Splitting the parsing allows to increase the scores on both projective and non-projectivedependencies compared to state-of-the-art non-projective dependency parsing.
Moreover, eachstep is performed in linear time.1 IntroductionDependency parsing is a particularly studied task and could be a significant step in various natural lan-guage processes.
That is why dependency parsers should tend to get speed and precision.
In recent years,various methods for dependency parsing were proposed (K?ubler et al., 2009).
Among these methods,transition-based systems are particularly suitable.The first methods developed for transition-based parsers proposed to produce projective dependencystructures (including no crossing dependencies).
Then, extended methods were developed to handle thenon-projective cases.
The non-projective dependency structures admit non-projective dependencies (adependency is non-projective if at least one word located between the head and the dependent of thedependency does not depend directly or inderectly on the head, see Figure 1 for example).
Handling thenon-projective cases has been the foundation of the first work concerning the dependency representa-tions (Tesni`ere, 1959; Melcuk, 1988).
Moreover, it is important to successfully parse the non-projectivesentences which can be very helpful in processes such as question-answering.The transition-based parsers achieve interesting overall results for both projective and non-projectiveanalyses.
But, in practice, the non-projective methods achieve far lower and variable scores on non-projective dependencies than on projective dependencies.
Finding these dependencies is more difficultbecause the non-projective dependencies are often distant ones.
It is then essential to achieve descentscores on non-projective dependencies as well as on projective ones because some languages contain ahigh rate of non-projective dependencies.Here we propose to predict separately the projective dependencies from the non-projective ones.
Usinga mixed dependency representation including both projective and non-projective dependency annotationsin one representation, we aim at predicting the projective dependencies in a first step.
Taking advantage ofthe good results of projective dependency parsing, we aim at predicting the non-projective dependenciesin a second step.The formal dependency representation on which we base our work results from the formalism of cate-gorial dependency grammars (CDG) (Dekhtyar and Dikovsky, 2008).
It allows to handle the discontinu-ities of the natural languages.
The dependency representation induced is mixed: it associates projectiveand non-projective dependencies to represent complementary syntactic information in one dependencyThis work is licensed under a Creative Commons Attribution 4.0 International Licence.
Page numbers and proceedings footerare added by the organisers.
Licence details: http://creativecommons.org/licenses/by/4.0/224pred obj detprepos-AAgentfsScmmodifmodifHe supported,therewent by his family .w0Figure 1: Dependency structure of the sentence ?He went there, supported by his family.?
Anchors areshown below the sentence.
Non-projective dependencies appear using a dash line.
The other dependen-cies are plain projective dependencies.structure.
In this representation, each non-projective dependency is paired with a projective one calledan anchor.
From any dependency structure a projective tree1can be extracted.Our approach is to predict the projective dependency trees first, using a standard and efficient methodfor projective dependency parsing.
In a second step, we use the information (the projective/anchor la-belled dependencies) given by the projective parsing to predict the non-projective dependencies.
Thissecond step is split into two inverse methods which predict independently the right and left non-projectivedependencies.
The advantage of the splitting is to perform the parsing in linear time and achieve betterscores on non-projective dependencies.Finally, in order to evaluate the efficiency of our method, we apply it on data annotated according tothe formalism of the categorial dependency grammar.
The data consists on a treebank containing bothprojective and non-projective trees associated with sentences of French.2 Related WorkOur approach is similar to a post-processing method for retrieving the non-projective dependencies.
Ina way, our work is then analogous to the work of Hall and Nov?ak (2005) who apply a post-processingmethod after converting constituency trees into dependency ones since the conversion can not automati-cally recover the non-projective relations.Moreover, taking advantage of the efficiency of projective dependency methods to predict the non-projective dependencies is a technique used by Nivre and Nilsson (2005) in their pseudo-projectivemethod.
They projectivize the dependency trees before parsing in order to apply a projective methodfirst and apply an inverse transformation to retrieve the non-projective dependencies.
For our method,we do not need to projectivize the trees since the dependency representation we use includes both pro-jective and non-projective annotations in one representation.
But we can employ the projectivizationmethod to build such data adding the generated projective dependencies to the non-projective structureas if they were artificial anchors.
Consequently, our approach can be applied on treebank containingstandard non-projective trees.The advantage of our method is that the information that is useful for retrieving the non-projective de-pendencies is not predicted during the projective parsing which makes the projective and non-projectivesteps completely independent from each other.
Moreover, the non-projective steps are data-driven andremain linear.3 Representation and FormalismOur work is based on dependency structures combining projective and non-projective annotations inone representation.
In such a representation the projective dependencies bring both local and syntacticinformation while the non-projective dependencies bring only syntactic information (i.e.
the relationshared by the dependents).
Thus, each non-projective dependency is paired with a projective relation(called anchor) determining the position of the dependent in the sentence.
Figure 1 presents a non-projective dependency structure of a sentence which illustrates the use of a projective relation (anchor)1Composed of projective dependencies and anchors of non-projective dependencies, see Section 3.225and a non-projective dependency to represent a discontinuous relation: ?supported?
is a modifier for thepronoun ?he?.The dependency representation is induced by a particular formalism: the class of the categorial depen-dency grammars (CDG).
The categories of the grammars correspond to the dependency labels.
The rulesL1, I1and ?1, presented in Table 1, are the classical left elimination rules of categorial grammars.
Onlythe left rules are shown but there are symmetrical right rules.
These rules allow to define the projectivedependencies and anchors.
Moreover, CDGs are classical categorial grammars in which the notion ofpolarized valencies was added.
Each of the three first rules includes the concatenation of potentials (suchas P , P1, P2) which are lists of polarized valencies.
The polarized valencies are label names associatedwith a polarity (south-west?, north-west?, north-east?
and south-east?).
They represent the endsof the non-projective dependencies.
The south polarities indicate an incoming non-projective depen-dency and the north valencies indicate an outgoing non-projective dependency.
The rule D1allows theelimination of dual pairs of polarized valencies, following the FA principle.First Available (FA) principle: the closest dual polarized valencies with the same name are paired.Thus, the elimination of the dual pairs (?
C) (?
C) and (?
C) (?
C) defines respectively left andright non-projective dependencies labelled by C.L1CP1[C\?
]P2` [?]P1P2I1CP1[C?\?
]P2` [C?\?]P1P2?1[C?\?
]P` [?
]PD1?P1(?C)P (?C)P2` ?P1PP2, if (?
C)(?
C) satisfies the FA principleTable 1: (Left) Rules of the categorial dependency grammars.4 MethodWe conduct a three-step transition-based parsing.
We choose the arc-eager method of Nivre (2008) toperform the first step.
Note that any projective method for dependency parsing would also be appropriateto perform this step.
The second and third steps are methods which go through the sentence (respectivelyfrom left to right and from right to left) in order to find the non-projective dependencies.4.1 Projective Dependency ParsingThe arc-eager method is an efficient transition-based method for projective dependency parsing.
A tran-sition system is composed of a set of configurations (states), a set of transitions (operations on the con-figurations), an initial configuration and a set of terminal configurations.
The transition-based parsingconsists in applying a sequence of transitions to configurations in order to build a dependency structure.For the arc-eager method, a configuration is a triplet ?
?, ?,A?
where:?
?
is a stack of partially treated words;?
?
is a buffer of non-treated words;?
A is a set of dependencies (the partially built dependency structure).The dependencies are described by triplets such as (k, l, i) where k is the position of the head, l isthe label of the dependency and i is the position of the dependent.
The set of transitions includes threetransitions which are evolutions of the standard transitions of the system of Yamada and Matsumoto(2003) plus the Reduce transition which allows to delete the first word of the stack when this one sharesno dependency with the first word of the buffer.
The standard Right-Arc and Left-Arc are renamedrespectively as Local-Right and Local-Left since these transitions only add local dependencies (whitoutdistinction between projective ones and anchors).
The Shift transition pops the first word from the buffer226Transition Application ConditionLocal-Left(l) (?
| wi, wj| ?,A)?
(?,wj| ?,A ?
{(j, l, i)}) i 6= 0 ?
??k?l?
(k, l?, i) ?
ALocal-Right(l) (?
| wi, wj| ?,A)?
(?
| wiwj, ?, A ?
{(i, l, j)}) ??k?l?
(k, l?, j) ?
AReduce (?
| wi, ?, A)?
(?, ?,A) ?k?l(k, l, i) ?
AShift (?,wi| ?,A)?
(?
| wi, ?, A)Table 2: Transitions of the arc-eager method.and pushes it into the stack.
The Reduce transition pops the first word from the stack.
The effects of thetransitions on configurations are detailed in Table 2.For a given sentence W = w1...wn, the initial configuration of the transition-based system is definedas follows: ([w0], [w1, ..., wn], ?)
where w0is the root of the structure.
And any terminal configurationis of the form: ([w0], [], A?)
where A?contains the fully projective dependency/anchor structure for thesentence W2.This step should produce the projective dependency structure of Figure 2 for the sentence ?Il y est all?e,soutenu par sa famille?
(french equivalent of the sentence seen in Figure 1).clit-l-objpredaux-l detprepos-AAgentfsScmmodifIl soutenu,all?y est par sa famille .w0Figure 2: Projective dependency structure of the sentence ?Il y est all?e, soutenu par sa famille?.4.2 Adding Non-Projective DependenciesWith the aim of retrieving non-projective dependencies we propose two inverse methods also inspiredby transition-based systems.
For these methods, the configuration is a quadruplet ?
?, ?, ?, A?
where?, ?
and A are the same stack, buffer and set of arcs as those defined for projective parsing in theprevious subsection and ?
is a list of polarized valencies.
The valencies have the same role here as in theformalism of the categorial dependency grammars (detailed in section 3).
They define the ends of thenon-projective dependencies.
Therefore, our idea is to go through the sentence in order to predict, foreach word, whether a non-projective dependency could end on the word (by adding valency ?l or ?l inthe list ?)
or should start from it (by adding valency ?l or ?l in the list ?).
As soon as dual valenciesare collected in ?, they are removed from it (according to the FA principle) and the corresponding non-projective dependency is added to the set of dependencies.In the second step, the valencies associated with the left dependencies are computed, i.e.
the valenciesof the form ?l and ?l.
The sentence is linearly covered from left to right, as in the previous projectivestep.
Details of the transitions are presented in Table 3.
The Shift transition is the same as during theprevious step and allows to cover the sentence classically from left to right.
The PutValency transitionmakes possible to predict, for the first word of the buffer, exactly one southwest valency?l, which meansthat a left dependency labelled l can end on this word.
In addition, the valency is concatenated at the endTransition Application ConditionPutValency(?l) (?,wi| ?, ?, A)?
(?
| wi, ?, ?
?li, A) ?li/?
?Dist-Left(?l) (?,wj| ?, ?1?li?2, A)?
(?,wj| ?, ??1?
?2, A?
{(j, l, i)}) ?l /?
?2??k?ki/?
??1?
?2Shift (?,wi| ?, ?, A)?
(?
| wi, ?, ?, A)Table 3: Transitions of the left non-projective method.2The words which were not attached during the parsing are automatically attached to the root node w0.227of ?.
The transition Dist-Left is applied when the first word of the buffer receives the dual valency (i.e.a valency of the form ?l).
If at least one valency ?l belongs to ?
then the last one is removed from ?and the non-projective dependency corresponding to the pair of dual valencies ?l?l (left non-projectivelabelled l) is added to A.Therefore, for a given sentence, the initial configuration of this system is ([w0], [w1, ..., wn], (), A?
)where A?is the projective dependency structure predicted by the arc-eager method.
And the terminalconfiguration is a quadruplet of the form ([w0, ..., wn], [], ?
?, A??)
where ?
?could contain southwestvalencies which did not match with their dual and A?
?is a partially non-projective dependency structure.The third step uses the inverse method of the previous step and allows to predict right non-projectivedependencies.
In this method, the sentence is linearly covered from right to left.
The initial configuration([w0, .., wn?1], [wn], (), A??)
contains the partial dependency structure A?
?produced by the last methodand the terminal configuration ([w0], [w1, ..., wn], ??
?, A???)
contains the fully non-projective dependencystructure A???.
The transitions used here are presented in Table 4.
This time, the PutValency transitionadds only southeast valencies (?l) at the beginning of ?
and pops the first word of ?
to push it into ?.The Dist-Right transition adds a right non-projective dependency in the set of arcs by predicting a dualvalency of the form ?l.
Finally, the RShift transition pops the first word of ?
to push it in ?.Transition Application ConditionPutValency(?l) (?
| wi, ?, ?, A)?
(?,wi| ?,?li?,A) ?li/?
?Dist-Right(?l) (?
| wj, ?, ?1?li?2, A)?
(?
| wj, ?, ??1?
?2, A?
{(j, l, i)}) ?l /?
?1??k?ki/?
??1?
?2RShift (?
| wi, ?, ?, A)?
(?,wi| ?, ?, A)Table 4: Transitions of the right non-projective method.The splitting of the non-projective dependencies prediction on two different methods is essential tofind the right non-projective dependencies as well as the left ones.
Practically, finding the head (i.e.
the?l and ?l valencies) of a non-projective dependency is easier once the dependent (i.e.
the ?l and ?lvalencies) has been previously predicted.
Indeed, the prediction system benefits of information aboutthe presence of the head valency in ?
to predict the dual valency.
Moreover, the heads are predictedmore efficiently whether the projective dependency associated with the word was predicted with theright label during the first parsing step.
The next section presents the prediction system and the featuresneeded to proceed good transition predictions.The application of these two steps on the sentence seen in Figure 2 are shown on Table 5.
TheTransition Configuration([w0], [Il,...,.
], (), A)Shift ?
([w0,Il], [y,...,.
], (), A)PutValency(?clit-l-obj) ?
([w0,Il], [y,...,.
], (?clit-l-obj), A)Shift ?
([w0,...,y], [est,...,.
], (?clit-l-obj), A)Shift ?
([w0,...,est], [alle,...,.
], (?clit-l-obj), A)DistLeft(?clit-l-obj) ?
([w0,...,est], [alle,...,.
], (), A1= A ?
{(4,clit-l-obj, 2)})Shift (x6) ?
([w0,...,.
], [], (), A1)([w0,... ,famille], [.
], (), A1)RShift ?
([w0,...,], [famille,.
], (), A1)RShift (x3) ?
([w0,...,,], [soutenu,...,.
], (), A1)PutValency(?modif) ?
([w0,...,,], [soutenu,...,.
], (?modif), A1)RShift (x5) ?
([w0], [il,...,.
], (?modif), A1)DistLeft(?modif) ?
([w0], [il,...,.
], (), A2= A1?
{(1,modif, 6)})Table 5: Transition sequences of the left and right non-projective steps on the sentence in Figure 2.228projective structure built during the first step (Figure 2) is substituted to the set of arcs A in the initialconfiguration of the left non-projective step.
The non-projective dependency structureA2provided at theend of the right (final) non-projective step is presented in Figure 3.clit-l-objpredclit-l-objaux-l detprepos-AAgentfsScmmodifmodifIl soutenu,all?y est par sa famille .w0Figure 3: Non-projective dependency structure of the sentence in Figure 2.4.3 OracleThe transition-based systems are particularly interesting for deterministic data-driven parsing.
Associ-ated with a statistical method, such as a probabilistic graphical model or a linear classifier, and suitablefeatures, the prediction of the transitions is very efficient.
It ensures a deterministic parsing in linear timefor both the projective arc-eager method and our two non-projective post-processing methods.Previous work such as (Yamada and Matsumoto, 2003) shows that support vector machines (SVM)allow to achieve good scores on dependency parsing when associated with a transition-based system.Therefore, we chose to use this classifier to predict the transitions of our two post-processing methods.Moreover, the arc-eager method (i.e.
nivreeager) being already successfully implemented and optimized,we decided to use the MaltParser (Nivre et al., 2007) to perform the projective dependency parsing.For this projective step, the features are composed of classical features such as the word forms, POS-tags and dependency labels of the current words (the first elements of the stack and the buffer), theirneighbors and their attached dependents.
For the two non-projective steps the feature pattern includes inaddition some features on the projective head of the first word of the buffer and the list of the valenciesremaining in ?.
The feature pattern is presented in Table 6.
Nevertheless, the SVM model bears onlynumerical features.
And each feature must be converted into a binary feature determining its absence orpresence.
For the valencies, the features denotes the absence or presence of each possible valency labelin ?.Feature Pattern?Word forms: ?
POS-tags:w{i?1,i+1}t{i?2,i+2}wjtj?
Labels: ?
Valencies:lj(projective dependency label) (v0, ..., vk) (the list of valencies in ?
)(lj1, ..., ljn) (the list of dependency labels)Table 6: Features for the prediction of transition in the two inverse methods.
i is the position of the firstword in ?, j is the position of the head of wi, the list of dependency labels is the list of labels of the rightor left dependents of the head (depending on the right or left method).5 EvaluationIn order to evaluate the efficiency of our approach, we decided to experiment on a dependency treebankfor which the data were annotated following the formalism of the categorial dependency grammars3.
Wecall this treebank the CDG Treebank 1.
Moreover, in order to evaluate the adaptation of our method3The treebank is not yet publicly available.
But the authors have made it available to us.229to standard treebanks we would like to perform the method on data for which the anchors would havebeen artificially created.
Therefore, we build a second treebank from the first one, which we call theCDG Treebank 2, in which the original anchors are replaced by artificial anchors generated by the pro-jectivization step of the pseudo-projective method of Nivre and Nilsson (2005).5.1 Non-Projective Dependency TreebankThe CDG Treebank 1 contains 3030 sentences of French, each paired with a dependency structure.
Thedependency structures are composed of both projective and non-projective dependencies.
Out of the37580 dependencies (excluding the anchor ones), 3.8% are non-projective.
Hence, 41% of the depen-dency structures of the treebank contain at least one non-projective dependency.The data were annotated semi-automatically using the CDG Lab (Alfared et al., 2011), a developmentenvironment dedicated to large scale grammar and treebank development.
Thus, the annotations followedthe formalism proposed by the categorial dependency grammar of French (Dikovsky, 2011).
The labelsof the dependencies are the 117 categories used by the grammar.
Most of the dependency labels (89)are exclusively associated with projective dependencies.
23 labels can be associated both with projectiveand non-projective dependencies.
Among these ones the most frequent are clitics, negatives, objects,reflexives and copredicates.
In most of the cases, clitics, negatives and reflexives are associated with shortdependencies (generally, one or two words separate the head from the dependent) whereas copredicatesor apposition are often associated with distant dependencies (the heads and dependents can be located atthe opposite ends of the sentence).
Four dependency labels are exclusively associated with non-projectivedependencies, they are particular cases of aggregation, copula, comparison and negation.The grammar and the treebank were developed simultaneously.
Consequently, a large part of thesentences were used to develop the grammar and were chosen to cover as much as possible the syntacticphenomenon of French.
The treebank contains sentences from newspaper, 19thand 20thcentury literaryworks and plain language.To build the CDG Treebank 2, we removed the anchors of the dependency structures of the CDGTreebank 1 and added the projective dependencies generated by projectivization4.
Note that, 90.9% ofthe anchors are the same between the two CDG treebanks.5.2 Experimental SettingsWe evaluate our method through a 10-fold cross-validation on the non-projective dependency treebank.First, we train the prediction models (the MaltParser training model and the SVM model) on each trainingset containing 90% sentences of the treebank.
Second, each fold of our testing data sets is tagged withPart-Of-Speech tags using Melt (Denis and Sagot, 2009), a POS-tagger that achieves high score onFrench.
Then the sentences are parsed.In order to estimate the benefit of our method, our results are compared with those obtained by themethods proposed by the MaltParser.
The table shows the results of the methods that give the bestresults among the non-projective ones and the best results among the projective ones (associated with thepseudo-projective method (Nivre and Nilsson, 2005)):?
the covnonproj (non-projective) method inspired by Covington (2001);?
the nivreeager (projective) method associated with the pseudo-projective method.For a fair comparison, the scores are computed on the same data for each experiments, i.e.
on the non-projective structures minus the anchors and the dependencies combined with punctuations.Moreover, in order to demonstrate that our method can be applied successfully on standard treebanks,the experiments are performed on the CDG Treebank 1 an 2.
The comparison scores that are used inthese experiments are:4The labels of the artificial anchors do not contain additional encoded information.
They are identical to the labels of thenon-projective dependencies.230?
the label accuracy (LA), i.e.
the percentage of words for which the correct label is assigned;?
the unlabelled attachment score (UAS), i.e.
the percentage of words for which the correct depen-dency is assigned;?
the labelled attachment score (LAS), i.e.
the percentage of words for which the correct labelleddependency is assigned.5.3 Experimental ResultsThe results of the experiments are presented in Table 7.
First, we notice that the scores relating to pro-jective dependencies of our method, both for CDG Treebank 1 (3) and CDG Treebank 2 (4), are betterthan those obtained by the covnonproj method (1) and equivalent to the pseudo-projective method (2).We assume that finding non-projective dependencies at the same time as the projective ones is more dif-ficult than finding projective dependencies only.
Moreover, the scores on non-projective dependenciesAll dependencies Projective Dep.
Non-projective Dep.LA UAS LAS LA UAS LAS LA UAS LAS(1) covnonproj 82.2 85.5 78.0 82.8 86.2 78.7 68.7 68.7 62.7(2) pseudoproj583.6 85.9 78.7 84.1 87.0 79.7 73.5 56.9 53.5(3) non-projLR (CDGTbk1) 83.7 86.3 79.1 84.1 86.9 79.6 75.5 70.2 66.3(4) non-projLR (CDGTbk2) 83.7 86.2 79.0 84.1 86.9 79.5 75.5 70.5 66.7Table 7: Results of the non-projective dependency parsing comparing the MaltParser methods (1) and(2) with ours (3).are particularly interesting.
Our method achieves far better scores on non-projective dependencies thanthe other two.
The label accuracy (LA) achieves significantly better scores (+6.8) than the covnonprojmethod.
Indeed, the projective step allows to find the anchors which are a kind of projective dependen-cies, so there are easier to predict than the non-projective dependencies.
Thus, the label accuracy of thenon-projective dependencies takes advantage of the good results of the anchors which were not pairedwith a non-projective dependency during the second and third parsing steps.
Concerning the attachmentscores, our method still outperforms the two others.
Globally, our method allows to recover the head ofthe non-projective dependencies more successfully.The non-projective dependencies can be also compared depending on their direction.
The left non-projective dependencies achieve far better scores (75.0% LAS) than the right non-projective dependen-cies (42.7% LAS).
We know that the non-projective step performed from right to left is essential torecover the right non-projective dependencies.
In fact, finding the right non-projective dependencies byperforming the non-projective step from left to right seems almost infeasible because it is essential tofind the dependent first.
Therefore, the problem comes essentially from the bad prediction of the an-chors during the projective step.
Indeed, only 51.4% of the words associated with a right non-projectivedependency receive the correct label (LA), compared with 84.2% for those associated with left non-projective dependencies.
The under-representation of the right non-projective dependencies (25% of thenon-projective dependencies) in the treebank is a first explanation.
But, even the more frequent labels(associated with right non-projective dependencies) achieve low scores.
Moreover, we noticed that eventhe right projective dependencies always achieve lower scores than the left projective dependencies.
Thisproblem may suggest that the use of a left-to-right projective method is not appropriate to predict theright dependencies.Furthermore, we note that our method achieve equivalent scores on CDG Treebank 1 and CDG Tree-bank 2, and even slightly better for non-projective dependencies with the use of artificial anchors.
Thissuggest that our method could be succesfully applied to standard treebanks in which artificial anchorswould have been added.5The pseudo-projective method were applied with the option ?path?
for projectivization and deprojectivization.2316 ConclusionWe propose a three-step method retrieving separately the projective dependencies and anchors, the leftnon-projective dependencies and the right non-projective dependencies through the use of a mixed de-pendency representation.
The projective step and the two non-projective steps are performed in lineartime and allow to outperform state-of-the-art transition-based scores on non-projective dependencies.The method needs a learning corpus that associate to each non-projective dependency a projective an-chor.
Thus the method is well adapted to CDG treebanks.
But we showed that the method can be appliedto standard treebanks by adding artificial anchors with the use of a method of projectivization.One of the advantages of our method is a significant improvement on the label accuracy for the non-projective dependencies.
The efficiency of the two non-projective methods depends on the good results ofthe projective parsing.
Moreover, performing the non-projective parsing from left-to-right and from right-to-left raises interesting questions on how to recover the right and left dependencies for both projectiveand non-projective methods.AcknowledgementWe want to thank Dani`ele Beauquier and Alexander Dikovsky for giving us the CDG Treebank on whichwe experimented our system.
Moreover, we want to thank all our reviewers : the anonymous reviewersof Coling for their accurate reviews, and the members of the team TALN of the University of Nantes(Colin de la Higuera, Florian Boudin and the master students) who reviewed our work with a fresh eye.ReferencesRamadan Alfared, Denis B?echet, and Alexander Dikovsky.
2011.
CDG Lab: a Toolbox for Dependency Gram-mars and Dependency Treebanks Development.
In Proceedings of the International Conference on DependencyLinguistics, DEPLING 2011, pages 272?281, Barcelona, Spain, September.Michael A. Covington.
2001.
A fundamental algorithm for dependency parsing.
In Proceedings of the 39thAnnual ACM Southeast Conference, pages 95?102.Michael Dekhtyar and Alexander Dikovsky.
2008.
Generalized categorial dependency grammars.
In Trakhten-brot/Festschrift, LNCS 4800, pages 230?255.
Springer.Pascal Denis and Beno?
?t Sagot.
2009.
Coupling an Annotated Corpus and a Morphosyntactic Lexicon for State-of-the-Art POS Tagging with Less Human Effort.
In Proceedings of the Pacific Asia Conference on Language,Information and Computation, PACLIC 2009, Hong Kong, China.Alexander Dikovsky.
2011.
Categorial Dependency Grammars: from Theory to Large Scale Grammars.
InProceedings of the International Conference on Dependency Linguistics, DEPLING 2011, September.Keith Hall and V?aclav Nov?ak.
2005.
Corrective modeling for non-projective dependency parsing.
In Proceedingsof the Ninth International Workshop on Parsing Technology, IWPT 2005, pages 42?52.Sandra K?ubler, Ryan McDonald, and Joakim Nivre.
2009.
Dependency Parsing.
Synthesis Lectures on HumanLanguage Technologies, 1(1):1?127.Igor Melcuk.
1988.
Dependency syntax : Theory and Practice.
State University of New York Press.Joakim Nivre and Jens Nilsson.
2005.
Pseudo-projective Dependency Parsing.
In Proceedings of the 43rd AnnualMeeting on Association for Computational Linguistics, ACL ?05, pages 99?106, Ann Arbor, Michigan.Joakim Nivre, Johan Hall, Jens Nilsson, Atanas Chanev, Glsen Eryigit, Sandra Kbler, Svetoslav Marinov, and Er-win Marsi.
2007.
MaltParser: A Language-Independent System for Data-Driven Dependency Parsing.
NaturalLanguage Engineering, 13:95?135, 6.Joakim Nivre.
2008.
Algorithms for Deterministic Incremental Dependency Parsing.
Comput.
Linguist.,34(4):513?553, December.Lucien Tesni`ere.
1959.?El?ements de syntaxe structurale.
Klincksieck.Hiroyasu Yamada and Yuji Matsumoto.
2003.
Statistical Dependency Analysis with Support Vector Machines.
InProceedings of the International Conference on Parsing Technologies, IWPT 2003, pages 195?206.232
