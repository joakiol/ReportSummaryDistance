The Re levance  of Some Compi le r  CQnst ruct ionTechn iques  to  the Descr ip t ion  and Trans la t ionOf LanguagesbySteven I ,  Lasz loWestern  Union Te legraph  Co.The f ramework  is mach ine- t rans la t ion .
Compi le r -bu i ld ingcan fo r 'a  var ie ty  of reasons  be cons idered  as  a spec ia l  case  ofmach ine- t rans la t ion .
It  is  the purpose  of th is  paper  to exp l i ca tesome techn iques  used  in compi le r -bu i ld ing ,  and to re la te  these  tol ingu is t ic  theory  and to the pract i ce  of mach ine- t rans la t ion .
"The genera l ly  observed  mach ine- t rans la t ion  procedure  couldbe schernat i zed  as  in F IGURE 1, or  to put i t  another  way ,le2.3.Pars ing  the  source - text .T rans la t ion  f rom source  to ob jec t - language.Synthes is  of g ramrrmt ica l ly  cor rec t  ob jec t - text .F IGURE 1.
"b reak-down,  t rans la t ion ,  and recompos i t ion .
The t rans la t ionusua l ly  occurs  on the leve l  of some s impl i f ied ,  cannon ica l  fo rm(that is not necessar i l y  the kerne l - fo rm)  of both languages ,  suchthat  the source - text  is decomposed,  and the ob jec t - text  recomposedf rom this  fo rm.
The t rans la t ion  a lgor i thm usua l ly  requ i res  as ta tement  of the s t ruc ture  of both the source  and the ob jec t - language,a.s we l l  as  the s ta temen~f  some pr imi t ive - to -pr imi t ive* Cur rent ly  a t  Dec is ion  S~stems,  Inc.-- I -cor respondence  parad igm for  both syntact i c  and lex ica l  p r imi t ives .Compi le rs  on the other  hand work  on the bases  of only the f i r s t  twos teps  of F IGURE 1. : b reakdown,  .
and t rans la t ion .
Consequent ly ,the processor  requ i res  only s ta tements  of the s t ruc ture  of thesource  - language and of the cor respondence  parad igm.
That  doesnot imp ly  that  the s t ruc ture  of the ob jec t - language is i r re levant tothe process  of t rans la t ion ,  but that  it  is imp l i c i t  in thecor respondence  parad igm,  and in the se lec t ion  of what  is ap r imi t ive  or  te rmina l  in the descr ip t ion  of the Source~- language.Through the use  of examples  i t  wi l l  be shown that  BNF  ands imi la r  language-descr ip t ion  dev ices  (8) a re  - -  by  themse ives  - -both ana ly t i ca l ly  and generat ive ly  inadequate  and depend on o therdev ices ,  imp l i c i t  in the t rans la t ion  a lgor i thm.
It  wi l l  be  shownthat  by some extens ions  of the not ion of P - ru les  and someapp l i ca t ions  of the concept  of T-r___.~e__.s (4), a descr ip t ion  that  is  bpthana ly t i ca l ly  and generat ive ly  adequate  may be const ructed  fo rp rogramming languages .
The programming language P .
O. L .
Z (IZ},(13) was  se lec ted  for  the examples  because  an adequate ,  fu l lyexp l i c i t  descr ip t ion  does  ex is t  for  it; fu r thermore ,  the languageconta ins  most  syntact i ca l ly  p rob lernat i c  features  of o therp rogramming languages  as  we l l  as  p resent ing  a few unique prob lemsin descr ip t ion  that  a re  wor thy  of a t tent ion .?
The fa i lu re  to come to gr ips  with the  ~ prob lem issu f f i c ient  to demonst ra te  the inadequacy  of BNF  and s imi la r  dev ices?
(8).
The s impl i f ied  program-segments  in F IGURE 2, serve  toi l l us t ra teEXAMPLE I.I .
Let A be variable.2.
Let B be = "7".3.
Let C be = "9.5 'i.4.
Let D be = ".
07Z".5.
A=B+C/D.6.
Pr in t  A.EXAMPLE Z.Def ine Funct  (A, B) = (C).QEnd.- - -and  e l sewhere - - -Funct  (Q, R) -- (Z).V = D +K ~Funct  (P,T}.F IGURE Z.-2 -this p rob lem.
B'NF and s imi la r  dev ices  would generate  a parsedes ignat ing  "A, "B" ,  etc.
in qEXAMPLE 1. as  ident i f ier  (asyntact ic  word -c lass )  hut would fai l  to ind icate that the var iousoccur rences  of a given ident i f ier  (e. g .
,  "A"  in s ta tements  1. ,  5 .
,and 6. )
a re  that of the same lex ica l  token or semant ic  object .Re lated to the ident i ty p rob lem is the res t r i c t ion  that eachident i f ier  occur r ing  in a p rogram s ta tement  must  a l so  occur  in oneand only one def init ion.
This res t r i c t ion  may be ca l led  thede f in i t ionprob lem.
BNF,  e tc .
,  do not handle the def in i t ionprob lem.
Other man i fes ta t ions  of the ident i ty and def in i t ionprob lems are  assoc ia ted  with the use of macro -  or compoundfunct ions (see EXAMPLE Z. ,  F IGURE Z.
),  subscr ip t  express ions ,etc.Since there  ex ists  a demonst rab le  necess i ty  for  es tab l i sh ingthe above ment ioned ident i t ies  and res t r i c t ion  (3), compi le rsconta in  - -  impl ic i t  in the t rans la t ion  a lgor i thm - -  an e laboratetab le -bu i ld ing / tab le -search ing / ident i ty - tes t ing  procedure .
Withoutsuch procedures ,  the syntact ic  descr ip t ion  is inadequate,  fu l lana lys i s  and t rans la t ion  imposs ib le .
In o rder  to deal  with theseprob lems expl ic i t ly ,  it was dec ided to incorporate  at rans format iona l  component  a long with the BNF- l i ke  phrase-s t ruc ture  component  in the descr ip t ion  of P .
O. L .
2 .
The abovereasons  for  pos i t ing a t rans format iona l  component  a re  in essencethe programming- language equiva lents  of Chomsky ls  o r ig ina lreasons  to use t rans format ions  in the descr ip t ion  of natura llanguages .Rule 1.
M 9- # ,M,se1 .1 ,  #where  ' !M" is  the init ia l  symbol ,  "#" is the boundary  marker ,and the subscr ip t  wil l  be expla ined la ter .Rule Z. M -~DEFINE, functment ion ,  p rogram,  ENDsel .
Iwhere  the convent ion is used that  te rmina l  symbo ls  a re  a l lcapi ta l  l e t te rs ,  and members  of the in termed ia te  a lphabeta re  in lower  case .Rule 3. p rogram-k .
.
.
,  p laceho lder ,  M,  .
.
.F IGURE 3.In F IGURE 3. ,  in a s imp l i f i ed  fo rm it is shown that  the phrase-s t ruc ture  component  generates  funct ion def in i t ions (17), (18)embedded in others  (see Rule 3.
), and that  the fo rm of the funct ionis generated  in the def in i t ion - -  as  the expans ion of the symbo l-3 -" functment ion"  - -  generat ing  p lace -ho lders  for  ins tances  of use ofthe funct ion.
T rans format ions  rep lace  the p lace -ho lders  with theappropr ia te  fo rm of the funct ion generated  in the def init ion, thusaccount ing  for both the ident i ty and the def in it ion prob lems.
Othert rans format ions  exist  to handle other ins tances  of these prob lemse.
g .
,  labels ,  ident i f ie rs ,  subscr ip t  express ions .
The method is :ident ica l :  the fo rm is generated  in the re levant  definit ion, p lace -ho lders  a re  generated  for  ins tances  of use,  and the p lace -ho ldersa re  rep laced  t rans format iona l ly  with the cor rec t  fo rm generated  inthe def init ion.Other t rans format ions  deal  with addi t ional  notat ional  !res t r i c t ions  of P.  O. L .Z .
One such res t r i c t ion  is that a funct iondef in i t ion may re ference  other  funct ions but a def in i t ion may not beembedded in another .
Def in i t ions (see F IGURE 3. )
a re  in factgenerated  embedded,  and it becomes  necessary  to pos i t  someexbedding t ra .ns format ion  (7), mov ing  the nested  def in i t ions outs idethe "parent"  def init ion.
There  exist  severa l  proofs  in the l i te ra tureestab l i sh ing  the equiva lence between languages  generated  bygrammars  with and without the use of boundary  markers  (5), (10).The exbedding t rans format ion  may be expressed  more  s imply  ifboundarymarkers  a re  used (see F IGURE 4.
).#, .
.
.
,  #, M, #, .
.
.
,  #.> #, M, #, #, .
.
.
,  #orMF IGURE 4oThe boundary -markers  may be deleted la ter  by anothertransformation, or they may rewrite as carriage-returns on somekeyboard, depending on the orthography of the particularimplementation and med ium.
The T-rules may be generated bypositing a set of elementary transformations (i. e. , single nodeoperations ) and a set of formation and ~ombination rules over theset of elementary transformations, prJoducing some set of compoundor complex transformations.
This i~ not significantly differentf rom having locally ordered subsets of a set of elementary-4 -t rans format ions  (11), (1Z)?Syntact ic  descr ip t ions  of p rogramming languages  pub l i shed inthe past  =- e. g .
,  (1), (9), (19) - -  genera l ly  Cook a program-s ta tement  to cor respond to the bas ic  unit of : 'grammar,  denoted bythe.
in it ia l  symbo l  of the phrase-s t ruc ture  grammar .
The grammerd i scussed  here  takes  a funct ion def in it ion (s~e F IGURE 3. )
as  i tsbas ic  unit.
P rogram-s ta tements  a re  e lements  of the in termed ia tea lphabet  and have no other  theoret i ca l  standing or s ign i f icance.The natura l  language cor re la tes  of p rogram-s ta tements  a resentences ,  and funct ion def in i t ions cor respond to some la rger -than-sentence  units of d i scourse  (e. g .
,  paragraphs  or chapters ) .This p rocedure  may lead to some syntact ic  or at least  l inguist icmethod  of d is t ingu ish ing between "mean ingfu l "  and "mean ing less".
programs.
Using a syntax of p rogra ins ,  o r funct lons  a l so  y ie ldsan intu i t ive ly  more  p leas ing set  of re la t ionsh ips  among e lements  ~fthe descr ibed  language.The present  g rammar  makes  no ef for t  to d is t ingu ish  between'"e legant"  and ine legant"  p rogramming,  but does d is t ingu ish  bothf rom "ungrammat ica l "  Code.
Dec la r ing  arguments  or var iab lesnever  ?
re ferenced is inelegant;  re fe renc ing  undec la red  operands  isungrammat ica l .
To re turn  momentar i l y  to the ident i ty anddef in i t ion prob lems:  it is poss ib le  to generate  a def init ion such thatthere  a re  no cor respond ing  p lace -ho lders ;  but each p lace -ho ldermust  be rep laced  by some def in i t ion -generated  fo rm of theappropr ia te  nature .
In descr ib ing  the def in i t ion and use of funct ions ,separate  p lace-h01ders  accomodate  recurs ive  use and the genera lcase  of usage.It is cus tomary  to give descr ip t ions  of p rogramming languagessuch that - -  with the except ion of some smal l  set  of key words  suchas a r i thmet ic  operators ,  de l imi te rs  of def in i t ions,  etc.
- -  thephrase-s t ruc ture  grammar  generates  character -s t r ings  for  the!ex ica l  i tems.
In natura i  languages the vocabu lary  is f ixed.
Thereis a stable,  l im i ted  Set of vocabu lary  e lements  that cor respond toeach syntact ic  word -c lass .
In p rogramming languages that is notthe case :  a smal l  set  of word -c lasses  rewri te each as a set  of oneor  more  key-words ;  o thers  wil l  expand - -  through the use of somephras&-s t ruc ture  ru les  - -  as any string?
of characters .
In thedescr ip t ian  of P.  O. L. Z it was decided to separate  the lexicon=generat ion  ru les  f rom the phrase-s t ruc ture  ru les .
Though they arethe same shape that BNF ru les  of the same purpose  .would be, itwas de~erm~ned that separat ing  the ru les  generat ing  lex ica l  i tems - -even  as morphophonemic  ru les  of natura l  languages represent  aseparate  c lass  of ru les  - -  is more  intui t ively acceptab le :  a c lass  ofo r thograph ic  ru les .
F IGURE 5. ind icates  what some of these  ru les~night look l ike.In the tekt 0g F IGURE 3 .
,  Rule 1., the exp lanat ion  of thesubscr ip t  was de fer red .
Funct ions  and  operators  used inp rogramming languages ?a re  two notat ional  var iants  of the sameconcept  (17).
Depending onthe  notat ion of the sys tem,  any operat ionmay be expressed  e i ther  as an operator  or a funct ion.
Since in- 5 -Rule I. identifier * alpha (, characters t r ing>where  "~ .
.
.
> " enc lose  opt iona l  i tems.Rule ,- 2.
~ *I alpha } characterstring t numera!where "~...~" enclose alternative options such that one andon ly  onetoftHeJ  opt ions  enumerated  must~be se lec ted .iqu~e ~.
alpha *~, character  s t r ing>f I 2 Ru le  4. numera l *  "0 1F IGURE ?
5.
"P .
O. L .
Z there  are  both  funct ions  and  operators ,  depend ing  onnotat iona l  conven ience ,  newly  de f ined  operat ions  may be  def inedas  e i ther .
\]Being de f ined  as  one or  the  o ther ,  however ,  res t r i c tsthe i r  d i s t r ibut ion  or  "embeddab i l i ty"  to  cer ta in  contexts .
Th isphenomenon i s  accounted  fo r  by  the  use  of a dev ice  s imi la r  to  thenotat ion  of complex  s_ymbol theory  (4), (11),  ( lZ ) ,  (15).
TheP .O .L .
Z notat ion  is  such  that  funct ions  ( i .
e .
,  de f ined  macro  s)ma 7 occur  as  funct ions ,  coord inate  t rans format ions  ( l inear  o ro therwise)  o r  as  operands  (denot ing  the i r  va lue  fo r  a par t i cu la r  ?se t  of a rguments )  and  operators  may appear  as  a r i thmet ic ,re la t iona l  o r  log ica l  operators ,  depend ing  on range  and/or  domainas  we l l  as  d i s t r ibut iona l  res t r i c t ions .
In  P .
O. L .
2 every  program -however  s imple  or  complex  - -  must  have  an  "outermost"  funct ion ,one in to  wh ich  a l l  o thers  a re  embedded by  the  P - ru les .
The  f i r s tru le  of the  grammar  (see  F IGURE 5 .
,  Ru le  1. )
expands  the"outermost"  funct ion .
E l sewhere  in  the  phrase-s t ructurecomponent ,  depend ing  on context ,  o ther"Msel.
i s'' are introduced, as well as ~'Mse!.
Zs", "Msel.
3 s'',"M and "M ~s".
sel.
4 s", sel.-6 -Th~ese cor respond to the var ious  embedded occur rences  of funct ionsand Operators .
The rewr i tes  or  expans ions of the severa l  vers ionsof "M" a re  a lmost  ident ica l  except  for  the s t r ing  denot ing the leftb racket  de l imi t ing the def init ion.
A l te rnat ive  so lut ions ex ist  butthe above one appears  most  intu i t ive ly  sat is fy ing .There  are  proofs  and demonst ra t ions  in the l i te ra ture  to theeffect that full, left, or  r ight  parenthes is  notat ion is context - f ree ,but not much on el ided parenthes is  notat ion.
We have  in the pastconst ructed  severa l  context -sens i t i ve  grammars  generat ing  e l idedparenthes is  notat ion,  but they did not seem very  sat i s fac tory .Adding a dev ice  not hereto fore  assoc ia ted  with product ion - ru les ,  aiset  of ru les  was produced  to generate  the el ided parenthesesnotat ion such that the ru les  look and process  very  much l ike context -f ree  ru les  (see F IGURE 6.)
.
.~Rule I.Rule 2.express ion  9- express ion/"express ion n+e,  operator  n ,  express ioexpr  e s s ion n+eexpress ionn-~ "(", express ion ,  ")"ident i f ier  p iaceho lderunaryoperator ,  express ionwhere  for  one cyc le  (I I)n remains  the same in teger  betweens ubru les  I and 2 and e remains  the same in teger  inc rement .F IGURE 6.Though the "counter"  n and the " increment  " eare  not par t  of aknown sys tem of p roduct ion  ru les ,  the i r  nature  and the reason  forthe i r  use can be c lear ly  stated.
The i r  use per ,n i t s  a s imp lerscanner  for  the syntax than context - res t r i c ted  ru les  do.A s imi la r  counter  is used to handle the concatenat ions  of n -tup les .
.
In P .
O. L. Z an i tem of data may be dec la red  as  a pair,t r ip le ,  or n - tup le ,  and operat ions  may be per fo rmed over  n l tup lesof ident ica l  n .
s  (see F IGURE 7.
).-7.-Rule i. n-tuple-expression ")" n-tuple, operator, n-tuplewlrere n = n = n. Any  of the n- tuples may however beconcatenates of two or more  n-tuples of smaller n-s such that:Rule Z. n-tuple ~ (m) - tuple, concatenator, (n-m____)-tupl ewhere n andre  are positive integers and the arithmeticrelationship designated obtains.F IGURE 7.Of course, the (m)-tuple or the (n-m)-tuple may be further brokendown by the same rule into further concatenates.The above are selected examples rather than an exhaustivelist of the transformations in the syntax of P. O. L.Z.
A rigorousstatement of the transformations is available, stated as mappingsOf structural descriptions into structural descriptions, accountingfor the attachment and detachment of nodes.
Presenting theselection of transformations here in a descriptive rather than arigorous fo rm offers an idea of the general approach.Const ruct ing  the phrase  s t ruc ture  component ,  many  a l te rnat iveso lut ions or approaches  came up at  every  juncture ;  in spec i fy ingthe t rans format iona l  component ,  the a l te rnat ives  quick ly  mul t ip l iedbeyond manageab le  propor t ions .
It is cer ta in ly  the case  thatth roughout  its b r ie f  but exci t ing h i s to ry ,  one of the a ims  oft rans format iona l  theory  has been to descr ibe  language in te rms ofthe most?
res t r i c ted  - -  hence s imp les t - -  sys tem poss ib le .
But onemay wel l  regard  the sets  of dev ices  so la r  advanced  as par ts  oftransformational theory, as algorithmic alphabets (in the A .A .Markov /M~rt in  Davis (5), (15) sense).
Specific algorithmicalphabets are more  or less arbitrary selections f rom some universeof elementary and compound algorithms bound by  formation andcom~ination rules.
This paper is not a proposal toward themodification, extension or restriction of transformational theory,mere ly  at, indication that an overlapping set of algorithms may beselected to deal with a similar but not identical problem: thestructural ~ " " descrlptlon of some formal notation systems such asprogramming languages.Beyond doubt, substantial simplification and sophistication maybe ach ieved  over  the mode l  descr ibed  here .
The ef fort  here  hasbeen toward the application of linguistic techniques to artificiallanguages, conforming to the linguist's notion of what it means  to"give an account 0f the data", rather than to the laxer standards ofthemethods  used to describe programming languages.-8-BIBLIOGRAPHY:? "
~I .
Ba~kus, J .W.
"The Syntax and Semantics of the.
ProposedInternational Algebraic Language of the Zurich ACM-GAMMConference",  Information Processing;  Proceedings of theInternational Conference on Information Process ing.
Par i s :z.."4.5.6.7 ?8.?9.10.11?
"13.14.15.16.17.UNESCO, 1960.Cheatham, J r .
,  T .E .
The Introduction of Definitional Facilities..into Higher Level P rogramming Languages.
Draft Report iCA-6605-061 I. ; Wakefield, Mass.
: Computer Associates, Inc. ,1966.The Theory and Construction Of Compi lersDra f t  Report CA-6606-0111.
; Wakefield, Mass.
: Computer~Associates,  Inc.,  1966'.Chomsky, Noam.
.
.
.
.
Aspects of the Theory of Syntax.
Cambrtdge~ " ,Mass .
: 'M IT  P ress ,  1965.
"On Certain Formal  Propert ies  ofGrammars" ,  Information and Control, 2, (1959), pp.
137-167.Davis, Martin.
Computabil ity and Unsolvabil ity.
New York;McGraw-Hil l ,  1958.F i lm, re .
C. J .
"The Posit ion of Embedding Transformat ionsin a Grammar" , .Word ,19 ,  Z  (1963).Corn, Saul?
"Specif ication Languages for Mechanical Languagesand their P rocessors  -- A Baker 's  Dozen", Communications ofthe ACM, 7, 12, (1961).Heising, W.P .
'TI istory and Summary of FORTRAN Standardi-zation Development for the ASA", Communications of the ACM,7, ~0, (1964).Landweber, P.S.
"Three Theorems on Phrase StructureGrammars  of Type I", Information and Control, 6, (1963),pp.
131-136.Lakoff, G .P .
Cycles and Complex Symbols in English Syntax.Unpublished Manuscript, Indiana UniversitY, \]963.Some Constraints On Transformat ions.Unpublished manuscript,  Indiana Univers i fy ,  1964.Laszlo,  S.I.
"Report on a Proposed General  Purpose ProcedureOriented Computer Programming Language"?
Repo.rt of theInstitute of Educational Research,  Bloomington: Indiama?
University, 1965.
"P .O .L .
,  A General  Purpose, ProcedureOriented Computer Programming Language" Repor t of theInst itute Of Educational Research, Bloomington: IndiananUniversity, 1965.Matthews, P.H., "Problems of Selection in TransformationalGrammar",  Journal of L.!nguistics, i, (1965)?Mark,v,  A .A .
,  Theory of Algorithms.
Washington, D.C. :U.S. Pr int ing Office, 1965.McCarthy, John "A Basis for a Mathematical  Theory ofComputation", in Computer Programming and Formal  Systems.P.
Braff0rt & D. Hirschberg (ed.
), Amsterdam:  N. Holland"9 -Pub l i sh ing  Co. 1963.
.18. et a l .
,  L ISP  1.5 P rogrammer 's  Manual ;Cambr idge ,  Mass .
:  MIT  P ress ,  196Z.19.
Naur ,  Peter  (ed.)
"Rev ised  Repor t  on the A lgor i thmic  LanguageALGOL 60", Communicat ions  of the ACM, repr in ted  in?
E .W.
D i jks t ra ,  A P r imer  of ALGOL Programming.
New York :Academic  P ress ,  1964.-10 -
