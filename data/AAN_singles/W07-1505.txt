Proceedings of the Linguistic Annotation Workshop, pages 33?40,Prague, June 2007. c?2007 Association for Computational LinguisticsAn Annotation Type System for a Data-Driven NLP PipelineUdo Hahn Ekaterina Buyko Katrin TomanekJena University Language & Information Engineering (JULIE) LabFu?rstengraben 30, 07743 Jena, Germany{hahn|buyko|tomanek}@coling-uni-jena.deScott Piao John McNaught Yoshimasa Tsuruoka Sophia AnaniadouNaCTeM and School of Computer ScienceUniversity of Manchester{scott.piao|john.mcnaught|yoshimasa.tsuruoka|sophia.ananiadou}@manchester.ac.ukAbstractWe introduce an annotation type system fora data-driven NLP core system.
The specifi-cations cover formal document structure anddocument meta information, as well as thelinguistic levels of morphology, syntax andsemantics.
The type system is embedded inthe framework of the Unstructured Informa-tion Management Architecture (UIMA).1 IntroductionWith the maturation of language technology, soft-ware engineering issues such as re-usability, in-teroperability, or portability are getting more andmore attention.
As dozens of stand-alone compo-nents such as tokenizers, stemmers, lemmatizers,chunkers, parsers, etc.
are made accessible in vari-ous NLP software libraries and repositories the ideasounds intriguing to (re-)use them on an ?as is?
basisand thus save expenditure and manpower when oneconfigures a composite NLP pipeline.As a consequence, two questions arise.
First, howcan we abstract away from the specific code level ofthose single modules which serve, by and large, thesame functionality?
Second, how can we build NLPsystems by composing them, at the abstract levelof functional specification, from these already ex-isting component building blocks disregarding con-crete implementation matters?
Yet another burningissue relates to the increasing availability of multiplemetadata annotations both in corpora and languageprocessors.
If alternative annotation tag sets are cho-sen for the same functional task a ?data conversion?problem is created which should be solved at the ab-stract specification level as well (Ide et al, 2003).Software engineering methodology points out thatthese requirements are best met by properly identi-fying input/output capabilities of constituent compo-nents and by specifying a general data model (e.g.,based on UML (Rumbaugh et al, 1999)) in or-der to get rid of the low-level implementation (i.e.,coding) layer.
A particularly promising proposalalong this line of thought is the Unstructured Infor-mation Management Architecture (UIMA) (Ferrucciand Lally, 2004) originating from IBM research ac-tivities.1 UIMA is but the latest attempt in a seriesof proposals concerned with more generic NLP en-gines such as ATLAS (Laprun et al, 2002) or GATE(Cunningham, 2002).
These frameworks have incommon a data-driven architecture and a data modelbased on annotation graphs as an adaptation of theTIPSTER architecture (Grishman, 1997).
They suf-fer, however, from a lack of standards for data ex-change and abstraction mechanisms at the level ofspecification languages.This can be achieved by the definition of a com-mon annotation scheme.
We propose an UIMAschema which accounts for a significant part of thecomplete NLP cycle ?
from the collection of doc-uments and their internal formal structure, via sen-tence splitting, tokenization, POS tagging, and pars-ing, up until the semantic layer (still excluding dis-course) ?
and which aims at the implementation-independent specification of a core NLP system.1Though designed for any sort of unstructured data (text,audio and video data), we here focus on special requirementsfor the analysis of written documents.332 Related workEfforts towards the design of annotation schematafor language resources and their standardizationhave a long-standing tradition in the NLP commu-nity.
In the very beginning, this work often fo-cused exclusively on subdomains of text analysissuch as document structure meta-information, syn-tactic or semantic analysis.
The Text Encoding Ini-tiative (TEI)2 provided schemata for the exchangeof documents of various genres.
The Dublin CoreMetadata Initiative3 established a de facto standardfor the Semantic Web.4 For (computational) lin-guistics proper, syntactic annotation schemes, suchas the one from the Penn Treebank (Marcus et al,1993), or semantic annotations, such as the one un-derlying ACE (Doddington et al, 2004), are increas-ingly being used in a quasi standard way.In recent years, however, the NLP community istrying to combine and merge different kinds of an-notations for single linguistic layers.
XML formatsplay a central role here.
An XML-based encod-ing standard for linguistic corpora XCES (Ide et al,2000) is based on CES (Corpus Encoding Standard)as part of the EAGLES Guidelines.5 Work on TIGER(Brants and Hansen, 2002) is an example for the li-aison of dependency- and constituent-based syntac-tic annotations.
New standardization efforts such asthe Syntactic Annotation Framework (SYNAF) (De-clerck, 2006) aim to combine different proposals andcreate standards for syntactic annotation.We also encounter a tendency towards multipleannotations for a single corpus.
Major bio-medicalcorpora, such as GENIA (Ohta et al, 2002) orPennBioIE,6 combine several layers of linguisticinformation in terms of morpho-syntactic, syntac-tic and semantic annotations (named entities andevents).
In the meantime, the Annotation Compat-ibility Working Group (Meyers, 2006) began to con-centrate its activities on the mutual compatibility ofannotation schemata for, e.g., POS tagging, tree-banking, role labeling, time annotation, etc.The goal of these initiatives, however, has neverbeen to design an annotation scheme for a complete2http://www.tei-c.org3http://dublincore.org4http://www.w3.org/2001/sw5http://www.ilc.cnr.it/EAGLES96/6http://bioie.ldc.upenn.eduNLP pipeline as needed, e.g., for information ex-traction or text mining tasks (Hahn and Wermter,2006).
This lack is mainly due to missing standardsfor specifying comprehensive NLP software archi-tectures.
The MEANING format (Pianta et al, 2006)is designed to integrate different levels of morpho-syntactic annotations.
The HEART OF GOLD mid-dleware (Scha?fer, 2006) combines multidimensionalmark-up produced by several NLP components.
AnXML-based NLP tool suite for analyzing and anno-tating medical language in an NLP pipeline was alsoproposed by (Grover et al, 2002).
All these propos-als share their explicit linkage to a specific NLP toolsuite or NLP system and thus lack a generic annota-tion framework that can be re-used in other develop-mental environments.Buitelaar et al developed in the context of an in-formation extraction project an XML-based multi-layered annotation scheme that covers morpho-syntactic, shallow parsing and semantic annotation(Buitelaar et al, 2003).
Their scheme borrows con-cepts from object-oriented programming (e.g., ab-stract types, polymorphism).
The object-orientedperspective already allows the development of adomain-independent schema and extensions of coretypes without affecting the base schema.
Thisschema is comprehensive indeed and covers a sig-nificant part of advanced NLP pipelines but it is alsonot connected to a generic framework.It is our intention to come full circle within ageneral annotation framework.
Accordingly, wecover a significant part of the NLP pipeline fromdocument meta information and formal documentstructure, morpho-syntactic and syntactic analysisup to semantic processing.
The scheme we proposeis intended to be compatible with on-going workin standardization efforts from task-specific annota-tions and to adhere to object-oriented principles.3 Data-Driven NLP ArchitectureAs the framework for our specification efforts, weadopted the Unstructured Information ManagementArchitecture (UIMA) (Ferrucci and Lally, 2004).
Itprovides a formal specification layer based on UML,as well as a run-time environment for the interpreta-tion and use of these specifications.
This dualism isgoing to attract more and more researchers as a basis34for proper NLP system engineering.3.1 UIMA-based Tool SuiteUIMA provides a platfrom for the integrationof NLP components (ANALYSIS ENGINES in theUIMA jargon) and the deployment of complexNLP pipelines.
It is more powerful than otherprominent software systems for language engineer-ing (e.g., GATE, ATLAS) as far as its pre- andpost-processing facilities are concerned ?
so-calledCOLLECTION READERS can be developed to handleany kind of input format (e.g., WWW documents,conference proceedings), while CONSUMERS, onother hand, deal with the subsequent manipulationof the NLP core results (e.g., automatic indexing).Therefore, UIMA is a particularly suitable architec-ture for advanced text analysis applications such astext mining or information extraction.We currently provide ANALYSIS ENGINES forsentence splitting, tokenization, POS tagging, shal-low and full parsing, acronym detection, namedentity recognition, and mapping from named enti-ties to database term identifiers (the latter is mo-tivated by our biological application context).
Aswe mainly deal with documents taken from the bio-medical domain, our collection readers process doc-uments from PUBMED,7 the most important liter-ature resource for researchers in the life sciences.PUBMED currently provides more than 16 millionbibliographic references to bio-medical articles.
Theoutcomes of ANALYSIS ENGINES are input for var-ious CONSUMERS such as semantic search enginesor text mining tools.3.2 Common Analysis SystemUIMA is based on a data-driven architecture.
Thismeans that UIMA components do not exchange orshare code, they rather exchange data only.
Thecomponents operate on common data referred toas COMMON ANALYSIS SYSTEM (CAS)(Go?tz andSuhre, 2004).
The CAS contains the subject of anal-ysis (document) and provides meta data in the formof annotations.
Analysis engines receive annotationsthrough a CAS and add new annotations to the CAS.An annotation in the CAS then associates meta datawith a region the subject of the analysis occupies7http://www.pubmed.gov(e.g., the start and end positions in a document).UIMA defines CAS interfaces for indexing, ac-cessing and updating the CAS.
CASes are modelledindependently from particular programming lan-guages.
However, JCAS, an object-oriented inter-face to the CAS, was developed for JAVA.
CASes arecrucial for the development and deployment of com-plex NLP pipelines.
All components to be integratedin UIMA are characterized by abstract input/outputspecifications, so-called capabilities.
These speci-fications are declared in terms of descriptors.
Thecomponents can be integrated by wrappers conform-ing with the descriptors.
For the integration task, wedefine in advance what kind of data each componentmay manipulate.
This is achieved via the UIMAannotation type system.
This type system followsthe object-oriented paradigm.
There are only twokinds of data, viz.
types and features.
Features spec-ify slots within a type, which either have primitivevalues such as integers or strings, or have referencesto instances of types in the CAS.
Types, often calledfeature structures, are arranged in an inheritance hi-erarchy.In the following section, we propose an ANNO-TATION TYPE SYSTEM designed and implementedfor an UIMA Tool Suite that will become the back-bone for our text mining applications.
We distin-guish between the design and implementation lev-els, talking about the ANNOTATION SCHEME andthe TYPE SYSTEM, respectively.4 Annotation Type SystemThe ANNOTATION SCHEME we propose currentlyconsists of five layers: Document Meta, DocumentStructure & Style, Morpho-Syntax, Syntax and Se-mantics.
Accordingly, annotation types fall into fivecorresponding categories.
Document Meta and Doc-ument Structure & Style contain annotations abouteach document?s bibliography, organisation and lay-out.
Morpho-Syntax and Syntax describe the resultsof morpho-syntactic and syntactic analysis of texts.The results of lemmatisation, stemming and decom-position of words can be represented at this layer, aswell.
The annotations from shallow and full parsingare represented at the Syntax layer.
The appropri-ate types permit the representation of dependency-and constituency-based parsing results.
Semantics35uima.tcas.Annotation+begin: uima.cas.Integer+end: uima.cas.IntegerAnnotation+componentId: uima.cas.String+confidence: uima.cas.DoubleDescriptorpubmed.ManualDescriptor+MeSHList: uma.cas.FSArray = MeSHHeading+...AutoDescriptor+...Header+docType: uima.cas.String+source: uima.cas.String+docID: uima.cas.String+language: uima.cas.String+copyright: uima.cas.String+authors: uima.cas.FSArray = AuthorInfo+title: uima.cas.String+pubTypeList: uima.cas.FSArray = PubType+...pubmed.Header+citationStatus: uima.cas.String {...}ManualDescriptor+keywordList: uima.cas.FSArray = Keyword+...PubType+name: uima.cas.StingJournal+ISSN: uima.cas.String+volume: uima.cas.String+journalTitle: uima.cas.String+impactFactor: uima.cas.StringKeyword+name: uima.cas.String+source: uima.cas.StringToken+posTag: uima.cas.FSArray  = POSTag+lemma: Lemma+feats: GrammaticalFeats+stemmedForm: StemmedForm+depRelList: uima.cas.FSArray = DependencyRelation+orthogr: uima.cas.FSArray = StringPOSTag+tagsetId: uima.cas.String+language: uima.cas.String+value: uima.cas.StringLemma+value: StringAcronymAbbreviation+expan: StringStemmedForm+value: StringGrammaticalFeats+language: uima.cas.StringDiscontinuousAnnotation+value: FSArray = AnnotationPennPOSTagNounFeats+......+......+...DependencyRelation+head: Token+projective: uima.cas.Boolean+label: uima.cas.StringRelationDepRelationSet...ChunkPhraseChunkPTBConstituent+formFuncDisc: uima.cas.String+gramRole: uima.cas.String+adv: uima.cas.String+misc: uima.cas.String+map: Constituent+tpc: uima.cas.Boolean+nullElement: uima.cas.String+ref: ConstituentConstituent+parent: Constituent+head: Token+cat: uima.cas.StringGENIAConstituent+syn: uima.cas.String...+......+...NP ...PPEntity+dbEntry: uima.cas.FSArray = DBEntry+ontologyEntry: uima.cas.FSArray = OntologyEntry+specificType: uima.cas.StringBioEntityCytokineOrganism VariationGene...LexiconEntry OntologyEntryDBEntryResourceEntry+source: uima.cas.String+entryId: uima.cas.String+version: uima.cas.StringZoneTitle TextBody Paragraph Figure+caption: CaptionSection+title: Title+depth: uima.cas.IntegerMisc ... PersonOrganizationMUCEntity...2345 61CAS CoreFigure 1: Multi-Layered UIMA Annotation Scheme in UML Representation.
1: Basic Feature Structure andResource Linking.
2: Document Meta Information.
3: Morpho-Syntax.
4: Syntax.
5: Document Structure& Style.
6: Semantics.36currently covers information about named entities,events and relations between named entities.4.1 Basic Feature StructureAll types referring to different linguistic lay-ers derive from the basic type Annotation,the root type in the scheme (cf.
Figure 1-1).
The Annotation type itself derives infor-mation from the default UIMA annotation typeuima.tcas.Annotation and, thus, inherits thebasic annotation features, viz.
begin and end (mark-ing spans of annotations in the subject of analysis).Annotation extends this default feature structurewith additional features.
The componentId markswhich NLP component actually computed this an-notation.
This attribute allows to manage multipleannotations of the same type The unique linkage be-tween an analysis component and an annotation itemis particularly relevant in cases of parallel annota-tions.
The component from which the annotationoriginated also assigns a specific confidence scoreto its confidence feature.
Each type in the scheme isat least supplied with these four slots inherited fromtheir common root type.4.2 Document Meta InformationThe Document Meta layer (cf.
Figure 1-2) describesthe bibliographical and content information of a doc-ument.
The bibliographical information, often re-trieved from the header of the analyzed document,is represented in the type Header.
The sourceand docID attributes yield a unique identifier foreach document.
We then adopted some Dublin Coreelements, e.g., language, title, docType.
We dis-tinguish between domain-independent informationsuch as language, title, document type and domain-dependent information as relevant for text miningin the bio-medical domain.
Accordingly, the typepubmed.Header was especially created for therepresentation of PUBMED document information.A more detailed description of the document?s pub-lication data is available from types which specializePubType such as Journal.
The latter containsstandard journal-specific attributes, e.g., ISSN, vol-ume, journalTitle.The description of the document?s content of-ten comes with a list of keywords, informa-tion assigned to the Descriptor type.
Weclearly distinguish between content descriptors man-ually provided by an author, indexer or cura-tor, and items automatically generated by textanalysis components after document processing.While the first kind of information will be storedin the ManualDescriptor, the second onewill be represented in the AutoDescriptor.The generation of domain-dependent descriptors isalso possible; currently the scheme contains thepubmed.ManualDescriptor which allows toassign attributes such as chemicals and genes.4.3 Document Structure & StyleThe Document Structure & Style layer (cf.
Figure 1-5) contains information about the organization andlayout of the analyzed documents.
This layer en-ables the marking-up of document structures suchas paragraphs, rhetorical zones, figures and tables,as well as typographical information, such as italicsand special fonts.
The focus of modeling this layer ison the annotation of scientific documents, especiallyin the life sciences.
We adopted here the SCIXML8annotation schema, which was especially developedfor marking-up scientific publications.
The Zonetype refers to a distinct division of text and is the par-ent type for various subtypes such as TextBody,Title etc.
While it seems impossible to predict allof the potential formal text segments, we first lookedat types of text zones frequently occurring in sci-entific documents.
The type Section, e.g., repre-sents a straightforward and fairly standard divisionof scientific texts into introduction, methods and re-sults sections.
The divisions not covered by currenttypes can be annotated with Misc.
The annotationof tables and figures with corresponding types en-ables to link text and additional non-textual infor-mation, an issue which is gaining more and moreattention in the text mining field.4.4 Morpho-SyntaxThe Morpho-Syntax layer (cf.
Figure 1-3) representsthe results of morpho-syntactic analysis such as to-kenization, stemming, POS tagging.
The small-est annotation unit is Token which consists of fiveattributes, including its part-of-speech information8http://www.cl.cam.ac.uk/?aac10/escience/sciborg.html37(posTag), stemmedForm, lemma, grammatical fea-tures (feats), and orthographical information (or-thogr).With respect to already available POS tagsets,the scheme allows corresponding extensions ofthe supertype POSTag to, e.g., PennPOSTag(for the Penn Tag Set (Marcus et al, 1993)) orGeniaPOSTag (for the GENIA Tag Set (Ohta etal., 2002)).
The attribute tagsetId serves as a uniqueidentifier of the corresponding tagset.
The value ofthe POS tag (e.g., NN, VVD, CC) can be stored inthe attribute value.
The potential values for the in-stantiation of this attribute are always restricted tothe tags of the associated tagset.
These constraintsenforce formal control on annotation processes.As for morphologically normalized lexical items,the Lemma type stores the canonical form of a lexi-cal token which can be retrieved from a lexicon onceit is computed by a lemmatizer.
The lemma value,e.g., for the verb ?activates?
would be ?activate?.
TheStemmedForm represents a base form of a text to-ken as produced by stemmers (e.g., ?activat-?
for thenoun ?activation?
).Due to their excessive use in life science docu-ments, abbreviations, acronyms and their expandedforms have to be considered in terms of appropriatetypes, as well.
Accordingly, Abbreviation andAcronym are defined, the latter one being a childtype of the first one.
The expanded form of a shortone can easily be accessed from the attribute expan.Grammatical features of tokens are representedin those types which specialize the supertypeGrammaticalFeats.
Its child types, viz.NounFeats, VerbFeats, AdjectiveFeats,PronounFeats (omitted from Figure 1-3) coverthe most important word categories.
Attributesof these types obviously reflect the propertiesof particular grammatical categories.
WhileNounFeats comes with gender, case and num-ber only, PronounFeats must be enhanced withperson.
A more complex feature structure is asso-ciated with VerbFeats which requires attributessuch as tense, person, number, voice and aspect.
Weadapted here specifications from the TEI to allowcompatibility with other annotation schemata.The type LexiconEntry (cf.
Figure 1-1) en-ables a link to the lexicon of choice.
By designingthis type we achieve much needed flexibility in link-ing text snaps (e.g., tokens, simplex forms, multi-word terms) to external resources.
The attributesentryId and source yield, in combination, a uniqueidentifier of the current lexicon entry.
Resource ver-sion control is enabled through an attribute version.Text annotations often mark disrupted text spans,so-called discontinuous annotations.
In coordinatedstructures such as ?T and B cell?, the annotatorshould mark two named entities, viz.
?T cell?
and ?Bcell?, where the first one results from the combina-tion of the disjoint parts ?T?
and ?cell?.
In order torepresent such discontinous annotations, we intro-duced the type DiscontinuousAnnotation(cf.
Figure 1-1) which links through its attributevalue spans of annotations to an annotation unit.4.5 SyntaxThis layer of the scheme provides the types and at-tributes for the representation of syntactic structuresof sentences (cf.
Figure 1-4).
The results from shal-low and full parsing can be stored here.Shallow parsing (chunking) aims at dividingthe flow of text into phrases (chunks) in a non-overlapping and non-recursive manner.
The typeChunk accounts for different chunk tag sets by sub-typing.
Currently, the scheme supports Phrase-Chunks with subtypes such as NP, VP, PP, or ADJP(Marcus et al, 1993).The scheme also reflects the most popular fullparsing approaches in NLP, viz.
constituent-basedand dependency-based approaches.
The resultsfrom constituent-based parsing are represented ina parse tree and can be stored as single nodes inthe Constituent type.
The tree structure canbe reconstructed through links in the attribute par-ent which stores the id of the parent constituent.Besides the attribute parent, Constituent holdsthe attributes cat which stores the complex syntac-tic category of the current constituent (e.g., NP, VP),and head which links to the head word of the con-stituent.
In order to account for multiple annota-tions in the constituent-based approach, we intro-duced corresponding constituent types which spe-cialize Constituent.
This parallels our approachwhich we advocate for alternatives in POS taggingand the management of alternative chunking results.Currently, the scheme supports three differ-ent constituent types, viz.
PTBConstituent,38GENIAConstituent (Miyao and Tsujii, 2005)and PennBIoIEConstituent.
The attributesof the type PTBConstituent cover the com-plete repertoire of annotation items contained inthe Penn Treebank, such as functional tags forform/function dicrepancies (formFuncDisc), gram-matical role (gramRole), adverbials (adv) and mis-cellaneous tags (misc).
The representation of nullelements, topicalized elements and gaps with corre-sponding references to the lexicalized elements in atree is reflected in attributes nullElement, tpc, mapand ref, respectively.
GENIAConstituent andPennBIoIEConstituent inherit from PTB-Constituent all listed attributes and provide, inthe case of GENIAConstituent , an additionalattribute syn to specify the syntactic idiosyncrasy(coordination) of constituents.Dependency parsing results are directly linked tothe token level and are thus referenced in the Tokentype.
The DependencyRelation type inheritsfrom the general Relation type and introducesadditional features which are necessary for describ-ing a syntactic dependency.
The attribute label char-acterizes the type of the analyzed dependency rela-tion.
The attribute head indicates the head of thedependency relation attributed to the analyzed to-ken.
The attribute projective relates to the propertyof the dependency relation whether it is projectiveor not.
As different dependency relation sets can beused for parsing, we propose subtyping similar tothe constituency-based parsing approaches.
In orderto account for alternative dependency relation sets,we aggregate all possible annotations in the Tokentype as a list (depRelList).4.6 SemanticsThe Semantics layer comprises currently the repre-sentation of named entities, particularly for the bio-medical domain.
The entity types are hierarchicallyorganized.
The supertype Entity (cf.
Figure 1-6) links annotated (named) entities to the ontologiesand databases through appropriate attributes, viz.
on-tologyEntry and sdbEntry.
The attribute specific-Type specifies the analyzed entity in a more detailedway (e.g., Organism can be specified throughthe species values ?human?, ?mouse?, ?rat?, etc.
)The subtypes are currently being developed in thebio-medical domain and cover, e.g., genes, pro-teins, organisms, diseases, variations.
This hierar-chy can easily be extended or supplemented withentities from other domains.
For illustration pur-poses, we extended it here by MUC (Grishmanand Sundheim, 1996) entity types such as Person,Organization, etc.This scheme is still under construction and willsoon also incorporate the representation of relation-ships between entities and domain-specific events.The general type Relation will then be extendedwith specific conceptual relations such as location,part-of, etc.
The representation of events will becovered by a type which aggregates pre-defined re-lations between entities and the event mention.
Anevent type such as InhibitionEventwould linkthe text spans in the sentence ?protein A inhibitsprotein B?
in attributes agent (?protein A?
), patient(?protein B?
), mention (?inhibits?
).5 Conclusion and Future workIn this paper, we introduced an UIMA annotationtype system which covers the core functionalityof morphological, syntactic and semantic analysiscomponents of a generic NLP system.
It also in-cludes type specifications which relate to the formaldocument format and document style.
Hence, thedesign of this scheme allows the annotation of theentire cycle of (sentence-level) NLP analysis (dis-course phenomena still have to be covered).The annotation scheme consists mostly of coretypes which are designed in a domain-independentway.
Nevertheless, it can easily be extended withtypes which fit other needs.
The current scheme sup-plies an extension for the bio-medical domain at thedocument meta and structure level, as well as on thesemantic level.
The morpho-syntactic and syntacticlevels provide types needed for the analysis of theEnglish language.
Changes of attributes or attributevalue sets will lead to adaptations to other naturallanguages.We implemented the scheme as an UIMA typesystem.
The formal specifications are implementedusing the UIMA run-time environment.
This directlink of formal and implementational issues is a ma-jor asset using UIMA unmatched by any previousspecification approach.
Furthermore, all annotationresults can be converted to the XMI format within39the UIMA framework.
XMI, the XML Metadata In-terchange format, is an OMG9 standard for the XMLrepresentation of object graphs.The scheme also eases the representation of an-notation results for the same task with alternativeand often competitive components.
The identifica-tion of the component which provided specific an-notations can be retrieved from the attribute com-ponentId.
Furthermore, the annotation with alterna-tive and multiple tag sets is supported as well.
Wehave designed for each tag set a type representingthe corresponding annotation parameters.
The inher-itance trees at almost all annotation layers supportthe parallelism in annotation process (e.g., taggingmay proceed with different POS tagsets).The user of the scheme can restrict the potentialvalues of the types or attributes.
The current schememakes use of the customization capability for POStagsets, for all attributes of constituents and chunks.This yields additional flexibility in the design and,once specified, an increased potential for automaticcontrol for annotations.The scheme also enables a straightforward con-nection to external resources such as ontologies,lexicons, and databases as evidenced by the corre-sponding subtypes of ResourceEntry (cf.
Figure1-1).
These types support the specification of a re-lation between a concrete text span and the uniqueitem addressed in any of these resources.With these considerations in mind, we strive forthe elaboration of a common standard UIMA typesystem for NLP engines.
The advantages of such astandard include an easy exchange and integrationof different NLP analysis engines, the facilitationof sophisticated evaluation studies (where, e.g., al-ternative components for NLP tasks can be pluggedin and out at the spec level), and the reusability ofsingle NLP components developed in various labs.Acknowledgments.
This research was funded by the EC?s 6th Framework Programme(4th call) within the BOOTStrep project under grant FP6-028099.ReferencesS.
Brants and S. Hansen.
2002.
Developments in the TIGERannotation scheme and their realization in the corpus.
InProc.
of the 3rd LREC Conference, pages 1643?1649.P.
Buitelaar, T. Declerck, B. Sacaleanu, ?S.
Vintar, D. Raileanu,and C. Crispi.
2003.
A multi-layered, XML-based approach9http://www.omg.orgto the integration of linguistic and semantic annotations.
InProc.
of EACL 2003 Workshop NLPXML-03.H.
Cunningham.
2002.
GATE, a general architecture for textengineering.
Computers and the Humanities, 36:223?254.T.
Declerck.
2006.
SYNAF: Towards a standard for syntacticannotation.
In Proc.
of the 5th LREC Conference.G.
Doddington, A. Mitchell, M. Przybocki, L. Ramshaw,S.
Strassel, and R. Weischedel.
2004.
The Automatic Con-tent Extraction (ACE) Program.
In Proc.
of the 4th LRECConference, pages 837?840.D.
Ferrucci and A. Lally.
2004.
UIMA: an architectural ap-proach to unstructured information processing in the corpo-rate research environment.
Natural Language Engineering,10(3-4):327?348.T.
Go?tz and O. Suhre.
2004.
Design and implementation of theUIMA Common Analysis System.
IBM Systems Journal,43(3):476?489.R.
Grishman and B. Sundheim.
1996.
Message Understand-ing Conference ?
6: A brief history.
In Proc.
of the 16thCOLING, pages 466?471.R.
Grishman.
1997.
Tipster architecture design document,version 2.3.
Technical report, Defense Advanced ResearchProjects Agency (DARPA), U.S. Departement of Defense.C.
Grover, E. Klein, M. Lapata, and A. Lascarides.
2002.XML-based NLP tools for analysing and annotating medi-cal language.
In Proc.
of the 2nd Workshop NLPXML-2002,pages 1?8.U.
Hahn and J. Wermter.
2006.
Levels of natural language pro-cessing for text mining.
In S. Ananiadou and J. McNaught,editors, Text Mining for Biology and Biomedicine, pages 13?41.
Artech House.N.
Ide, P. Bonhomme, and L. Romary.
2000.
XCES: An XML-based standard for linguistic corpora.
In Proc.
of the 2ndLREC Conference, pages 825?830.N.
Ide, L. Romary, and E. de la Clergerie.
2003.
Internationalstandard for a linguistic annotation framework.
In Proc.
ofthe HLT-NAACL 2003 SEALTS Workshop, pages 25?30.C.
Laprun, J. Fiscus, J. Garofolo, and S. Pajot.
2002.
A prac-tical introduction to ATLAS.
In Proc.
of the 3rd LREC Con-ference, pages 1928?1932.M.
Marcus, B. Santorini, and M.A.
Marcinkiewicz.
1993.Building a large annotated corpus of English: The PENNTREEBANK.
Computational Linguistics, 19(2):313?330.A.
Meyers.
2006.
Annotation compatibility working group re-port.
In Proc.
of the COLING-ACL 2006 Workshop FLAC2006?, pages 38?53.Y.
Miyao and J. Tsujii.
2005.
Probabilistic disambiguationmodels for wide-coverage HPSG parsing.
In Proc.
of theACL 2005, pages 83 ?
90.T.
Ohta, Y. Tateisi, and J.-D. Kim.
2002.
The GENIA corpus:An annotated research abstract corpus in molecular biologydomain.
In Proc.
of the 2nd HLT, pages 82?86.E.
Pianta, L. Bentivogli, C. Girardi, and B. Magnini.
2006.Representing and accessing multilevel linguistic annotationusing the MEANING format.
In Proc.
of the 5th EACL-2006Workshop NLPXML-2006, pages 77?80.J.
Rumbaugh, I. Jacobson, and G. Booch.
1999.
The UnifiedModeling Language Reference Manual.
Addison-Wesley.U.
Scha?fer.
2006.
Middleware for creating and combiningmulti-dimensional NLP markup.
In Proc.
of the 5th EACL-2006 Workshop NLPXML-2006, pages 81?84.40
