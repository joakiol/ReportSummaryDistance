Unification of Disjunctive Feature DescriptionsAndreas Eisele, Jochen D6rreInstitut f'dr Maschinelle SprachverarbeitungUniversit~t StuttgartKeplerstr.
17, 7000 Stuttgart 1, West GermanyNetmaih ims@rusvx2.rus.uni-stuttgart.dbp.deAbstractThe paper describes a new implementation offeature structures containing disjunctive values,which can be characterized by the following mainpoints: Local representation of embedded is-junctions, avoidance of expansion to disjunctivenormal form and of repeated test-unifications forchecking consistence.
The method is based on amodification of Kasper and Rounds' calculus offeature descriptions and its correctness thereforeis easy to see.
It can handle cyclic structures andhas been incorporated successfully into an envi-ronment for grammar development.1 MotivationIn current research in computational linguisticsbut also in extralinguistic fields unification hasturned out to be a central operation in the mod-elling of data types or knowledge in general.Among linguistic formalisms and theories whichare based on the unification paradigm are suchdifferent heories as FUG \[Kay 79,Kay 85\], LFG\[Kaplan/Bresnan 82\], GSPG \[Gazdar et al 85\],CUG \[Uszkoreit 86\].
However, research in unifi-cationis also relevant for fields like logic program-rning, theorem proving, knowledge representation(see \[Smolka/Ait-Kaci 87\] for multiple inheritancehierarchies using unification), programming lan-guage design \[Ait-Kaci/Nasr 86\] and others.The version of unification our work is based onis graph unification, which is an extension of termunification.
In graph unification the number ofarguments i free and arguments are selected byattribute labels rather than by position.
The al-gorithm described here may easily be modified toapply to term unification.The structures we are dealing with are rooteddirected graphs where arcs starting in one nodemust carry distinct labels.
Terminal nodes mayalso be labelled.
These structures are referred toby various names in the literature: feature struc-tures, functional structures, functional descrip-tions, types, categories.
We will call them featurestructures I throughout this paper.In applications, other than toy applications, theefficient processing of indefinite information whichis represented by disjenctive specifications be-comes a relevant factor.
A strategy of multiplying-out disjunction by exploiting (nearly) any combi-nation of disjuncts through backtracking, as it isdone, e.g., in the case of a simple DCG parser,quickly runs into efficiency problems.
On the otherhand the descriptional power of disjunction oftenhelps to state highly ambiguous linguistic knowl-edge clearly and concisely (see Fig.
I for a disjunc-tive description of morphological features for thesix readings of the german oun 'Koffer').Koffer:morph:sem:o o .r sg11agr: L.pers: 3 J/gend: masc /case: {nom dat acc}Jmum: pillagr: \[pers: 3 J |gend: masc /case: {nom gen acc}Jarg: \[\]Figure 1: Using disjunction in the description oflinguistic structuresKasper and Rounds \[86\] motivated the distinc-tion between feature structures and formulae of alogical calculus that are used to describe featurestructures.
Disjunction can be used within sucha formula to describe sets of feature structures.With this separation the underlying mathematicalframework which is used to define the semanticsof the descriptions can be kept simple.1We do not, ms is frequently done, restrict ourselves toacydlc structures.2862 Disjunctive Feature De-scriptionsWe use a slightly modified version of the formulalanguage FRL of Kasper and Rounds \[86\] to de-scribe our feature structures.
Fig.
2 gives the syn-tax of FRL', where A is the set of atoms and L theset of labels.FML' contains:NILTOPa where a E A1 : ~ where 1E L, @ E Flff.
'A 9 where ~,~ E FILL'V ?
where ~,~ E FRL'~p) where p E L ?Figure 2: Syntax of FML'In contrast to Kasper and Rounds \[86\] we donot use the syntactic construct of path equivalenceclasses.
Instead, path equivalences are expressedusing non-local path expressions (called pointersin the sequel).
This choice is motivated by thefact that we use these pointers for an efficient rep-resentation below, and we want to keep FIK.'
assimple as possible.The intuitive semantics of FIK/is as follows (see\[Kasper/Rounds 86\] for formal definitions):1.
NIL is satisfied by any feature structure.2.
TOP is never satisfied.3.
a is satisfied by the feature structure consistingonly of a single node labelled a.4.
I : ~ requires a (sub-)structure under arc I tosatisfy @.5.
@ A ?
is satisfied by a feature structure thatsatisfies ~ and satisfies ~.6.
?
V ?
is satisfied by a feature structure thatsatisfies @ or satisfies 9.7.
(p) requires a path equivalence (two paths lead-ing to the same node) between the path (p)and the actual path relative to the top-levelstructure.2The denotation of a formula @ is usually definedas the set of minimal elements of SAT(~) withrespect to subsumption 3, where SAT(@) is the set2 This construct is context-sensitive in the sense that thedenotation of (p) may only be computed with respect to thewhole structure that the formula describes.3The subsumptlon relation _E is a partial ordering onfeature structures inducing a semi-lattice.
It may be de-fined as: FS1 C FS2 iff the set of formula~ satisfied by FS2includes the set of formulae satisfied by FS1.of feature structures which satisfy &.Example: The formula~=subj:agr:(agr)  A ?ase:(nom V ace)denotes the two graphssubj agr case subj agr casenora  acc3 The ProblemThe unification problem for disjunctive feature de-scriptions can be stated as follows:Given two formulae that describe featurestructures, find the set of feature struc-tures that satisfy both formulae, if it isnonempty, else announce 'fail'.The simplest way to deal with disjunction isto rewrite any description into disjunctive nor-mal form (DNF).
This transformation requirestime and space exponential with the numberof disjuncts in the initial formula in the worstcase.
Although the problem of unifying disjunc-tive descriptions is known to be NP-complete (see\[Kasper 87a\]), methods which avoid this transfor-mation may perform well in most practical cases.The key idea is to keep disjunction local and con-sider combinations of disjuncts only when they re-fer to the very same substructure.
This strategy,however, is complicated by the fact that featurestructures may be graphs with path equivalencesand not only trees.
Fig.
3 shows an example whereunifying a disjunction with a structure containingreentrancy causes parts of the disjunction to belinked to other parts of the structure.
The dis-junction is e:rported via this reentrancy.
Hence,the value of attribute d cannot be representeduniquely.
It may be + or -, depending on whichdisjunct in attribute a is chosen.
To represent thisinformation without extra formal devices we haveto lift the disjunction one level up.
44 In this special case we still could keep the disjunctionin the attribute a by inverting the pointer.
A pointer (a b)underneath label d would allow us to specify the value of ddependent on the disjunction under a.287a"I b: \[o.C: :'I :\] V \[a: \[b: d: \[ 3 (d) \]\]\[ .
Eb 1\] / cFigure 3: Lifting of disjunction due to reentrancy4 From Description to Effi-cient RepresentationIt is interesting to investigate whether FI~' is suit-able as an encoding of feature structures, i.e.
if itcan be used for computational purposes.However, this is clearly not the case for the un-restricted set of formulae of FML', since a givenfeature structure can be represented by infinitelymany different formulae of arbitrary complexityand - -  even worse - -  because it is also not pos-sible to ascertain whether a given formula repre-sents any feature structure at all without extensivecomputation.On the other hand, the formulae of FIK.'
havesome properties that are quite attractive for repre-senting feature structures, such as embedded andgeneral disjunction and the possibility to make useof the law of distributivity for disjunctions.Therefore we have developed an efficiency-oriented normal form F~F, which is suitable as anefficient representation for sets of feature struc-tures.The formulae are built according to a restrictedsyntax (Fig.
4, Part A) and have to satisfy condi-tion Cs~j.
(Part B).
The syntax restricts the use ofconjunction and TOP in order to disallow contra-dictory information in a formula other than TOP.However, even in a formula of the syntax of Part Ainconsistence can be introduced by a pointer to alocation that is 'blocked' by an atomic value on ahigher level.
For example in the formula a: (b c)A b:d the path (b c) is blocked since it wouldrequire the value of attribute b to be complex inconflict to the atomic value d, thus rendering theA) Restricted syntax of ENF:NILTOPa where a q A11 : ~I ^""  ^ In : ~, where ~i E EI\[F\{TOP},li E L, li # lj for i :f= jV ?
where @, ?
E ESF\{TOP}(p) where p E L ' .B) Additional condition Cs~, :ff an instance ~ of a formula @ contains a pointer(p), then the path p must be realized in 6.Figure 4: A normal form to describe feature struc-tures efficientlyformula non-satisfiable.
With the additional con-dition Cs~,  such~inconsistencies are excluded.
Itsexplanation in the next section is somewhat tech-nical and is not prerequisite for the overall under-standing of our method.Condition Cs  .First we have to introduce some terminology.Instance: When every disjunction in a formulais replaced by one of its disjuncts, the result iscalled an instance of that formula.Realized: A recursive definition of what we calla reafized path in an instance ~b is giver in Fig.
5.The intuitive idea behind this notion is to restrictis realized in ~b, if ~b ~ TOP!
E L is realized in It : ~bt A. .
.
A 1, : ~b, (eveni f /~  { I t .
.
.
In})l .
p  is realized in .-.
A I : ~b A -.., if p isrealized inp is realized in (p'), if pip is realized inthe top-level formulaFigure 5: Definition of realized pathspointers in such a way that the path to their des-tination may not be blocked by the introductionof an atomic value on a prefix of this path.
Notethat by virtue of the second line of the definition,the last label of the path does not have to actuallyoccur in the formula, if there are other labels.Example: In a: (b c) only the path e and eachpath of length 1 is realized.
Any longer path maybe blocked by the introduction of an atomic valueat level 1.
Thus, the formula violates CENP.288a:(b d) A b:(c) A c : (d :x  V b:y) ,  on theother hand, is a well-formed gNF formula, since itcontains only pointers with realized destinationsin every disjunct.The easiest way to satisfy the condition is to in-troduce for each pointer the value NIL at its des-tination when building up a formula.
With thisstrategy we actually never have to check this con-dition, since it is maintained by the unificationalgorithm described below.Propert ies  o f  ENFThe most important properties of formulae in ~.NFare :?
For each formula of ~'llL' an equivalent formulain ENF can be found.?
Each instance of a formula in ?-~ (besidesTOP) denotes exactly one feature structure.?
This feature structure can be computed in lin-ear time.The first property can be established by virtue ofthe unification algorithm given in the next section,which can be used to construct an equivalent glD'-formula for an arbitrary formula in FML ~.The next point says: It doesn't matter whichdisjunct in one disjunction you choose - -  you can-not get a contradiction.
Disjunctions in gNF aremutually independent.
This also implies that TOPis the only formula in ENF that is not satisfiable.To see why this property holds, first consider for-mulae without pointers.
Contradictory informa-tion (besides TOP) can only be stated using con-junction.
But since we only allow conjunctions ofdifferent attributes, inconsistent information can-not be stated in formulae without pointers.Pointers could introduce two sorts of incon-sistencies: Since a pointer links two paths, onemight assume that inconsistent information couldbe specified for them.
But since conjunction witha pointer is not allowed, only the destination pathcan carry additional information, thus excludingthis kind of inconsistency.
On the other hand,pointers imply the existence of the paths they referto.
The condition CB~ r ensures that no informa-tion in the formula contradicts the introduction ofthese implied paths.
We can conclude that evenformulae containing pointers are consistent.The condition CBN P additionally requires thatno extension of a formula, gained by unificationwith another formula, may contain such contra-dicting information.
A unification algorithm thuscan introduce an atomic value into a formula with-out having to check if it would block the destina-tion path of some pointer.5 The  Un i f i cat ion  ProcedureFigure 6 shows an algorithm that takes as in-put two terms representing formulae in ~-IlF andcomputes an ElfF-representation f their unifica-tion.
The representation f the formulae is givenby a 1-to-l-mapping between formulae and data-structures, o that we can abstract from the data-structures and write formulae instead.
In thissense, the logical connectives A, V, : are used asterm-constructors that build more complex data-structures from simpler ones.
In addition, we usethe operator ?
to express concatenation of labelsor label sequences and write (p) to express thepointer to the location specified by the label se-quence p. p : ~ is an abbreviation for a formulawhere the subformula 4~ is embedded on path p.The auxiliary function unify-aux performs theessential work of the unification.
It traverses bothformulae in parallel and builds all encounteredsubformulae into the output formula.
The follow-ing cases have to be considered:?
If one of th~ input formulae specifies a sub-formula at a location where the other inputprovides no information or if both inputs con-tain the same subformula t a certain location,this subformula is built into the output with-out modification.?
The next statement handles the case where oneinput contains a pointer whereas the other con-rains a different subformula.
Since we regardthe destination of the pointer as the represen-tative of the equivalence class of paths, the sub-formula has to be moved to that place.
Thiscase requires additional discussion, so we havemoved it to the procedure move..Cormula.?
In ease of two conjunctions the formulae haveto be traversed recursively and all resulting at-tribute - value pairs have to be built into theoutput structure.
For clarity, this part of thealgorithm has been moved to the procedureunify_complex.?
The case where one of the input formulaeis a disjunction is handled in the procedureua?~y.ztisj that is described in Section 5.2.?
If none of the previous cases matches (e.g.
ifthe inputs are different atoms or an atom anda complex formula), a failure of the unificationhas to be announced which is done in the last289unify(X,Y) ~ formularepeat(X,Y) := unify_aux(X,Y,~)unti l  Y = NIL or Y = TOPreturn(X)un i fy_aux(Ao ,a l ,Pa)  ~-, ( fo rmula , fo rmula)i f  A0 ffi AI thenreturn (LI ,IIL)else if ?i -- ~IL thenreturn (a l - i  ,NIL)else if ?~ is the pointer <Pro> thenreturn move_formula(A1_~ ,Pa,Pto)else if both a i are conjunctions thenreturn unify_complex(Ao ,AI ,Pa)else if Ai is the disjunction (B V C)thenreturn unify_disj (Ai-i, B, C. P.)else return (TOP,TOP)uni f  y-complex (ao ,al ,Pa)~-* (:formula,formula)L := A l :v ,  where l :v  occurs  in  one Aiand 1 does not  occur  in  A l - iG := NILfo r  a l l  i that  appear in both ~ dol e t  Vo,Vl be the  va lues  of  1 in  Ao,at(V,GV) := unify_aux(V0,V1,Pa.1)i f  V = TOP or GV.= TOP thenre turn  (TOP,TOP)e lse  L := L A l :VG := uaifyCG,GV)i f  G = TOP then re turn  (TOP,TOP)re turn  CL,G)Figure 6: The unification procedurestatement.The most interesting case is the treatment ofa pointer.
The functional organization of the al-gorithm does not allow for side effects on remoteparts of the  top-level formula (nor would this begood programming style), so we had to find a dif-ferent way to move a suhformula to the destinationof the pointer.
For that reason, we have definedour procedures so that they return two results: alocal result that has to be built into the output for-mula at the current location (i.e.
the path both in-put formulae are embedded on) and a global resultthat is used to express 'side effects' of the uni-fication.
This global result represents a formulathat has to be unified with the top-level result inorder to find a formula covering all informationcontained in the input.This global result is normally set to NIL, but theprocedure move.for, ,ula must of course producesomething different.
For the time being, we can as-sume the preliminary definition of move.formuXain Figure 7, which will be modified in the nextsubsection.
Here, the local result is the pointer(since we want to keep the information about thepath equivalence), whereas the global result is aformula containing the subformula to be movedembedded at its new location.move_formula(F, P/tom, Pro)( formula, formula)re turn  (<Pto>,Pto :F)Figure 7: Movement of a Subformula - -  Prelimi-nary VersionThe function tinily_complex unifies conjunc-tions of label-value-pairs by calling tutify_aux re-cursively and placing the local results of these uni-fications at the appropriate locations.
Labels thatappear only in one argument are built into the out-put without modification.
If any of the recursiveunifications fail, a failure has to be announced.The global results from recursive unifications arecollected by top-level unification 5.
The third ar-gument of unify_aux and unify_complex containsthe sequence of labels to the actual location.
It isnot used in this version but is included in prepara-tion of the more sophisticated treatment of point-ers described below.To perform a top-level unification of two formu-lae, the call to uni fy .aux is repeated in order tounify the local and global results until either theunification fails or the global result is NIL.Before extending the algorithm to handle dis-junction, we will first concentrate on the questionhow the termination of this repeat-loop can beguaranteed.5.1 Avoiding Infinite LoopsThere are cases where the algorithm in Figure 6will not terminate if the movement of subformulaeis defined as in Figure 7.
Consider the unificationof a:(b) A b:(a)  with a :~.
Here, the formulasl.f we Allow the global result o be a //~ o\].fm'm~do.e, thisrecursicm could be replaced by list-concatenation.
However,this would imply modifications in the top-level loop andwould slightly complicate the treatmem ofdisjunction.290will be moved along the pointers infinitely oftenand the repeat-loop in un i fy  will never terminate.An algorithm that terminates for arbitrary inputmust include precautions to avoid the introductionof cyclic pointer chains or it has to recognize suchcycles and handle them in a special way.When working with pointers, the standard tech-nique to avoid cycles is to follow pointer chainsto their end and to install a new pointer only toa location that does not yet contain an outgoingpointer.
For different reasons, dereferencing is notthe method of choice in the context of our treat-ment of disjunction (see \[Eisele 87\] for details).However, there are different ways to avoid cyclicmovements.
A total order '<p'  on all possible lo-cations (i.e.
all paths) can be defined such that, ifwe allow movements only from greater to smallerlocations, cycles can be avoided.
A pointer from agreater to a smaller location in this order will becalled a positive pointer, a pointer from a smallerto a greater location will be called negative.
Butwe have to be careful about chosing the right or-der; not any order will prevent he algorithm froman infinite loop.For instance, it would not be adequate to movea formula along a pointer from a location p toits extension p ?
q, since the pointer itself wouldblock the way to its destination.
(The equivalenceclass contains (p), (p q), (p q q) .
.
.
and it makesno sense to choose the last one as a representative).Since cyclic feature structures can be introducedinadvertently and should not lead to an infiniteloop in the unification, the first condition the order'<p'  has to fulfill is:p<ppq if q#~The order must be defined in a way that positivepointers can not lead to even indirect cycles.This is guaranteed if the conditionp <p q =~ rps <p rqsholds for arbitrary paths p, q, r and s.We get an order with the required properties ifwe compare, in the first place, the length of thepaths and use a lexicographic order <t for pathsof the same length.
A formal statement of thisdefinition is given in Figure 8.Note that positive pointers can turn into neg-ative ones when the structure containing them ismoved, as the following example shows:a :b :c :d : (a  b e) U a :b :c : ( f )pos.
pos.= a :b :c : ( f )  A f :d : (a  b e)pos.
neg.P<p q if IPl < Iqlor if Ipl = \[q\[, P = rils, q = ri2 t,r,s,t EL*,  Ii EL ,  i1 <112Figure 8: An Order on Locations in a FormulaHowever, we can be pragmatic about this point;the purpose of ordering is the avoidance of cyclicmovements.
Towards this end, we only have toavoid using negative pointers, not writing themdown.To avoid movement along a negative pointer,we now make use of the actual location that isprovided by the third argument of unify-aux andunify_complex and as the second argument ofmove.~ormula.move_formula(F, Pl,om, Pro)~.
( formula,  formula)'i f  Pro <v P/yore thenreturn  (<Pto>,Pto :F)e l se  i f  P,o = P/,om thenre turn  (F, MIL)e l se  re turn  (F,Pto:<Plvom>)Figure 9: Movement of a Subformula - -  CorrectVersionThe definition of move.~ormula given in Fig-ure 7 has to be replaced by the version given inFigure 9.
We distinguish three cases:?
If the pointer is positive we proceed as usual.?
If it points to the actual location, it can beignored (i.e.
treated as NIL).
This case occurs,when the same path equivalence is stated morethan once in the input.?
If the pointer is negative, it is inverted by in-stalling at its destination a pointer to the ac-tual position.5.2 I ncorporat ing  D is junct ionThe procedure un i fy -d i s j  in Figure 10 has fourarguments: the formula to unify with the disjunc-tion (which also can be a disjunction), both dis-juncts, and the actual location.
In the first twostatements, the unifications of the formula A withthe disjuncts B and C are performed indepen-dently.
We can distinguish three main cases:* If one of the unifications falls, the result of theother is returned without modification.
* If both unifications have no global effect or ifthe global effects happen to result in the same291uni fy_d is j (A,B,C,Pa), ~-~ ( formula, formula)(L1,G1) := uni fy -aux(A,B,P .
)(L2,G2) := unify-aux(A,C,P=)i f  L1 = TOP or G1 = TOP thenreturn (L2,G2)else if L2 = TOP or  G2 = TOP thenreturn (LI,GI)e lse  if G1 = G2 thenre turn  (LIVL2,GI)else re turn  (WIL,pack(unify(P.:L1,G1)Vunify(P~:L~,G2)))Figure 10: Unification with a Disjunctionformula, a disjunction is returned as local re-sult and the common global result of both dis-juncts is taken as the global result for the dis-junction.?
If both unifications have different global re-sults, we can not return a disjunction as localresult, since remote parts of the resulting for-mula depend on the choice of the disjunct atthe actual location.
This case arrives if one orboth disjuncts have outgoing pointers and ifone of these pointers has been actually used tomove a subformula to its destination.The last point describes exactly the case wherethe scope of a disjunction has to be extended toa higher level due to the interaction between dis-junction and path equivalence, as was shown inFigure 3.
A simple treatment of such effects wouldbe to return a disjunction as global result wherethe disjuncts are the global results unified with thecorresponding local result embedded at the actualposition.
However, it is not always necessary toreturn a top-level disjunction in such a situation.If the global effect of a disjunction concerns onlylocations 'close' to the location of the disjunction,we get two global results that differ only in an em-bedded substructure.
To minimize the 'lifting' ofthe disjunction, we can assume a procedure packthat takes two formulae X and Y and returns aformula equivalent to X V Y where the disjunctionis embedded at the lowest possible level.Although the procedure pack can be defined in astraightforward manner, we refrain from a formalspecification, since the discussion in the next sec-tion will show how the same effect can be achievedin a different way.6 ImplementationWe now have given a complete specification of aunification algorithm for formulae in ENF.
How-ever, there are a couple of modifications that canbe applied to it in order to improve its efficiency.The improvements described in this section are allpart of our actual implementation.Uni f icat ion of  Two Po intersIf both arguments are pointers, the algorithm inFigure 6 treats one of them in the sarne way asan arbitrary formula and tries to move it to thedestination of the other pointer.
Although thistreatment is correct, some of the necessary com-putations can be avoided if this case is treated ina special way.
Both pointer destinations and theactual location should be compared and pointersto the smallest of these three paths should be in-stalled at the other locations.Special  T reatment  of  A tomic  FormulaeIn most applications, we do not care about theequivalence of two paths if they lead to the sameatom.
Under this assumption, when moving anatomic formula along a pointer, the pointer itselfcan be replaced by the atom without loss of infor-mation.
This helps to reduce the amount of globalinformation that has to be handled.Order ing  LabelsThe unification of conjunctions that contain manylabels can be accelerated by keeping the labelssorted according to some order (e.g.
<a).
Thisavoids searching one formula for each label thatoccurs in the other.Organ isat ion  of  the G loba l  Results on aStackIn the algorithm described so far, the global re-sult of a unification is collected, but is - apartfrom disjunction - not used before the traversalof the input formulae is finished.
When formulaecontaining many pointers are unified, the repeatedtraversal of the top-level formula slows down theunification, and may lead to the construction ofmany intermediate results that are discarded later(after having been copied partially).To improve this aspect of the algorithm, we havechosen a better representation of the global result.Instead of one formula, we represent it as a stack of292formulae where the first element holds informationfor the actual location and the last element holdsinformation for the top-level formula.
Each timea formula has to be moved along a pointer, itsdestination is compared with the actual locationand the common prefix of the paths is discarded.From the remaining part of the actual locationwe can determine the first element on the stackwhere this information can be stored.
The rest ofthe destination path indicates how the informationhas to be represented at that location.When returning from the recursion, the first el-ement on the stack can be popped and the infor-mation in it can be used immediately.This does not only improve efficiency, but hasalso an effect on the treatment of disjunction.
In-stead of trying to push down a top-level disjunc-tion to the lowest possible level, we climb up thestacks returned by the recursive unifications andcollect the subformulae until the rests of the stacksare identical.
In this way, 'lifting' disjunctions canbe limited to the necessary amount without usinga function like pack.Pract ica l  Exper iencesIn order to be compatible with existing software,the algorithm has been implemented in PROLOG.It has been extended to the treatment of unifica-tion in an LFG framework where indirectly speci-fied labels (e.g in the equation (1" (lpcase)) -- J.
),set values and various orts of constraints have tohe considered.This version has been incorporated into anexisting grammar development facility for LFGs\[Eisele/D6rre 86,Eisele/Schimpf 87\] and has notonly improved efficiency compared to the formertreatment of disjunction by backtracking, but alsohelps to survey a large number of similar resultswhen the grammar being developed contains (too)much disjunction.
One version of this system runson PCs with reasonable performance.7 Comparison with OtherApproaches7.1 Asymptot ica l  Complex i tyCandidates for a comparison with our algorithmare the naive multiplying-out to DNF, Kasper'srepresentation f general disjunction \[Kasper 87b\],and Karttunen's treatment of value disjunction\[Karttunen 84\], also the improved version in\[Bear 87\].
Since satisfiability of formulae in FNL isknown to be an NP-complete problem, we cannotexpect better than exponential time complexity inthe worst case.
Nevertheless it might be interest-ing to find cases where the asymptotic behaviourof the algorithms differ.
The following statements- although somewhat vague - may give an im-pression of strong and weak points of the differ-ent methods.
For each given statement we havespecific examples, but their presentation or proofswould be beyond the scope of this paper.7.1.1 Space Complex i ty  (Compactness ofthe Represeatat ion)?
When many disjunctions concern differentsubstructures and do not depend on eachother, our representation uses exponentiallyless space than expansion to DNF.?
There are cases where Kasper's representationuses exponentially less space than our repre-sentation.
This happens when disjunctions in-teract strongly, but an exponential mount ofconsistent combinations remain.?
Since Karttunen's method enumerates all con-sistent combinations when several disjunctionsconcern the same substructure, but allowsfor local representation in all other cases, hismethod seems to have a similar space complex-ity than ours.7.1.2 T ime Complex i tyThere are cases where Kasper's method usesexponentially more time than ours.
This hap-pens when disjunctions interact so strongly,that only few consistent combinations remain,hut none of the disjunctions can be resolved.When disjunctions interact strongly, hut an ex-ponential amount of consistent combinationsremains, our method needs exponential time.An algorithm using Kasper's representationcould do better in some of these cases, sinceit could find out in polynomial time that eachof the disjuncts is used in a consistent com-bination.
However, the actual organisation ofKasper's full consistency check introduces ex-ponential time complexity for different reasons.7.2 Average  Complex i ty  and  Con-c lus ionIt is difficult to find clear results when comparingthe average complexity of the different methods,293since anything depends on the choice of the exam-pies.
However, we can make the following generalobservation:All methods have to multiply out disjunctionsthat are not mutually independent in order to findinconsistencies.Kasper's and Karttunen's methods discard theresults of such computations, whereas our algo-rithm keeps anything that is computed until a con-tradiction appears.
Thus, our method tends to usemore space than the others.
On the other hand,since Kasper's and Karttunen's methods 'forget'intermediate results, they are sometimes forced toperform identical computations repeatedly.As conclusion we can say that our algorithmsacrifies space in order to save time.8 Fur ther  WorkThe algorithm or the underlying representationcan still be improved or extended in various re-spects:Genera l  D is junct ionFor the time being, when a formula is unified witha disjunction, the information contained in it hasto be distributed over all disjuncts.
This mayinvolve some unnecessary copying of label-value-pairs in cases where the disjunction does not in-teract with the information in the formula.
(Note,however, that in such cases only the first level ofthe formula has to be copied.)
It seems worthwhileto define a relazed ElF, where a formula (AVB)ACis allowed under certain circumstances (e.g.
when(A V B) and C do not contain common labels)and to investigate whether a unification algorithmbased on this relaxed normal form can help to saveunnecessary computations.Funct ional  Uncer ta in tyThe algorithm for unifying formulae with regularpath expressions given by Johnson \[Johnson 86\]gives as a result of a unification a finite disjunctionof cases.
The algorithm presented here seems tobe a good base for an efficient implementation fJohnson's method.
The details still have to beworked out.AcknowledgmentsThe research reported in this paper was supported by theEUROTRA-D accompanying project (BMFT grant No.101 3207 0), the ESPRIT project ACORD (P393) and theproject LILOG (supported by IBM Deutschland).
Much ofthe inspiration for this work originated from a com-se aboutextensions to unification (including the work of Kasper andRounds) which Hans Uszkoreit held at the University ofStuttgart in spring 1987.
We had fruitful discussions withLauri Karttnnen about an early version of this algorithm.Thanks also go to Jftrgen Wedekind, Henk Zeevat, IngeBethke, and Roland Seiffert for hell~ui discussions and im-portant counterexamples, and to Fionn McKinnon, StefanMomnm, Gert Smolka, and Carin Specht for polild~ing upour m'gumentation.References\[A~t-Kacl/Nur 86\] AYt-Kaci, H. and R. Nasa- (1986).
LO-GIN: A Logic Programming Language with Built-In In-heritance.
The Journal of Logic Programming, 1986 (3).\[Bear 87\] Bear, J.
(1987).
Feature-Value Unification withDisjunctions.
Ms. SRI International, Stanford, CA.\[Bisele 87\] Eisele, A.
(1987).
Eine Implementierung rekur-Idve?
Merkanalstzxtkturma mlt dlsjunktiven Angaben.Diplomarbeit.
Institut f. Informatik, Stuttgart.\[Bisele/I~rre 86\] Eisele, A. and J. DSrre (1986).
A LexlcalFunctional Grammar System in Prolog.
In: Proceed/~sof COLING 1#86, Bonn.\[Eisele/Schimpf 87\] Eisele, A. and S. Sddmpf (1987).
Einebenutzerfreund~che Softwareumgebttn g zur Entwick-lung yon LFGen.
Studlenarbeit.
IfI, Stuttprt .\[Gazdar et al 85\] Gazdar, G., E. Klein, G. Pullum and I.Sag (1985).
Ge~-m//m/Ph~e $~-~z~ G~z~r .
Lon-don: Blackwell,\[Johnson S6\] John~m, M. (19S6), Cm~e~ ~th P~rPcZ/~ Form~ Ms. CSLI, Stanford, California.\[Kaplan/Brem~n 82\] Kaplan, R. und J. Bresnan (1982).Lexical Ftmctional Grin,mr:.
A Formal System forGrammatical Pc, presentatlon.
In: J. Bresnan (ed.
), TheMenM/Re~ewtat/o~ \] Gmmn~//r.~ Re/6//o~.
MIT Press,Cambridge, Mammdm~tts.\[Kartt~men 84\] Karttunen, L. (1984).
Feattwes and Value~In: Proeesdi~, o\] COLIN G 1#8~, Stanford, CA.\[Kasper 87a\] Kasper, R.T. (1987).
Feature Structures: ALogical Theory with Application to Language AnalysiaPh.D.
Thesis.
University of Michigan.\[Kasper 871)\] Kasper, R.T. (1987).
A Unification Methodfor Disjunctive Feature Descriptions.
In: P~-~b~m oJthe P.Sth Anmtal Mee6~ o\] the A CL.
Stanford, CA.\[Kasper/Ronnds 86\] Kasper, R.T. and W. Rounds (1986).A Logic~l Semantics for Feature Structures.
In: P~-ee.edi~ o/the ~.4th Annzmi Meetiwj o/ the ACL.
ColumbiaUnivenfity, New York, NY.\[Kay 79\] Kay, M. (1979).
Functkmal Grammar.
In: C.Chiare\]lo et al (eds.)
Pn~dings o/the 5th Ann~l Mee~of the Be~dq ~g'=~:~c Soci~.\[Kay 85\] Kay, M. (1985).
Parsing in Functional UnificationGrammar.
In: D. Dowty, L. Karttunen, and A.
Zwicky(eds.)
N,~t~ml l~n~ge Pardng, Cambridge, England.\[Smolks/A~t-Kaci 87\] Smolka, G. and H. A~t-Kaci (1987).Inheritance Hierarchies: Semantics and Unification.MCC Tech.
Pep.
No AI-057-87.
To appear in: Journalof Symbolic Logic, Speci~l Issue on Unification, 1988.\[Uszkorelt 86\] Uszkoreit, H. (1986).
Categorial UnificationGrammars.
In: /xtmze.d/~s ofCOLJ~G 1#86, Bonn.294
