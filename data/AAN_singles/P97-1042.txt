Compi l ing  Regular  Formal isms wi th  Rule  Features intoF in i te -State  AutomataGeorge  Anton  K i razBell Laborator iesLucent  Technologies700 Mounta in  Ave.Murray  Hill, N J  07974, USAgk i raz@research ,  be l l - l abs ,  tomAbst ractThis paper presents an algorithm for thecompilation of regular formalisms with rulefeatures into finite-state automata.
Rulefeatures are incorporated into the rightcontext of rules.
This general notioncan also be applied to other algorithmswhich compile regular ewrite rules into au-tomata.1 In t roduct ionThe past few years have witnessed an increased in-terest in applying finite-state methods to languageand speech problems.
This in turn generated inter-est in devising algorithms for compiling rules whichdescribe regular languages/relations i to finite-stateautomata.It has long been proposed that regular formalisms(e.g., rewrite rules, two-level formalisms) accom-modate rule features which provide for finer andmore elegant descriptions (Bear, 1988).
Withoutsuch a mechanism, writing complex grammars (saytwo-level grammars for Syriac or Arabic morphol-ogy) would be difficult, if not impossible.
Algo-rithms which compile regular grammars into au-tomata (Kaplan and Kay, 1994; Mohri and Sproat,1996; Grimley-Evans, Kiraz, and Pulman, 1996) donot make use of this important mechanism.
This pa-per presents amethod for incorporating rule featuresin the resulting automata.The following Syriac example is used here, withthe infamous Semitic root {ktb} 'notion of writ-ing'.
The verbal pa"el measure 1, /katteb/~ 'wroteCAUSATIVE ACTIVE', is derived from the following1Syriac verbs are classified under various measures(i.e., forms), the basic ones being p'al, pa "el and 'a/'el.2Spirantization is ignored here; for a discussion onSyriac spirantization, see (Kiraz, 1995).morphemes: the pattern {cvcvc} 'verbal pattern',the above mentioned root, and the voealism {ae}'ACTIVE'.
The morphemes produce the following un-derlying form: 3a e\[ \[ */kateb/ C V C V CJ I Ik t b/katteb/ is derived then by the gemination, implyingCAUSATIVE, of the middle consonant, \[t\].4The current work assumes knowledge of regularrelations (Kaplan and Kay, 1994).
The followingconvention has been adopted.
Lexical forms (e.g.,morphemes in morphology) appear in braces, { },phonological segments in square brackets, \[\], andelements of tuples in angle brackets, ().Section 2 describes a regular formalism with rulefeatures.
Section 3 introduce a number of mathe-matical operators used in the compilation process.Sections 4 and 5 present our algorithm.
Finally, sec-tion 6 provides an evaluation and some concludingremarks.2 Regu lar  Formal i sm wi th  Ru leFeaturesThis work adopts the following notation for regularformalisms, cf.
(Kaplan and Kay, 1994):r ( =~, <=,<~ }A___p (1)where T, A and p are n-way regular expressions whichdescribe same-length relations) (An n-way regu-lar expression is a regular expression whose terms3This analysis is along the lines of (McCarthy, 1981)- based on autosegmental phonology (Goldsmith, 1976).4This derivation is based on the linguistic model pro-posed by (Kiraz, 1996).~More 'user-friendly' notations which allow mappingexpressions of unequal length (e.g., (Grimley-Evans, Ki-raz, and Pulman, 1996)) are mathematically equivalentto the above notation after ules are converted into same-329R1 k:cl:k:0 ::?, ___R2 b:c3:b:0 =?.
__R3 a:v:0:a => ___R4 e:v:0:e ::~ ___R5 t:c2:t:0 t:0:0:0 ?
:~ ___(\[cat=verb\], \[measure=pa"el\], \[\])R6 t:c~:t:0 ?
?, ___(\[cat=verb\], \[measure=p'al\], \[\])R7 0:v:0:a ?
:~ ___ t:c2:t:0 a:v:0:aFigure 1: Simple Syriac Grammarare n-tuples of alphabetic symbols or the emptystring e. A same-length relation is devoid of e. Forclarity, the elements of the n-tuple are separatedby colons: e.g., a:b:c* q:r:s describes the 3-relation{ (amq, bmr, cms) \[ m > 0 }.
Following current ter-minology, we call the first j elements 'surface '6 andthe remaining elements 'lexical'.)
The arrows corre-spond to context restriction (CR), surface coercion(SC) and composite rules, respectively.
A compoundrule takes the formr { ~,  ~,  ?, } ~l___pl; ~2__p2;... (2)To accommodate for rule features, each rule maybe associated with an (n - j ) - tup le  of feature struc-tures, each of the form\[attributel =vall  , attribute,=val2 , .
.
.\] (3)i.e., an unordered set of attr ibute=val pairs.
Anattribute is an atomic label.
A val can be an atom ora variable drawn from a predefined finite set of possi-ble values, z The ith element in the tuple correspondsto the (j z_ i)th element in rule expressions.
As away of illustration, consider the simplified grammarin Figure 1 with j = 1.The four elements of the tuples are: surface, pat-tern, root, and vocalism.
R1 and R2 sanction thefirst and third consonants, respectively.
R3 and R4sanction vowels.
R5 is the gemination rule; it isonly triggered if the given rule features are satisfied:\[cat=verb\] for the first lexical element (i.e., the pat-tern) and \[measure=pa"el\] for the second element(i.e., the root).
The rule also illustrates that r canbe a sequence of tuples.
The derivation o f /kat teb /is illustrated below:length descriptions at some preprocessing stage.6In natural anguage, usually j = 1.tit is also possible to extend the above formalism inorder to allow val to be a category-feature structure,though that takes us beyond finite-state power.Sublexicon Entry Feature StructurePattern ClVC2VC3 \[cat=verb\]Root ktb \[measure=(p'al,pa"el)t\]Voealism ae \[voice=active,measure=pa"el\]aa \[voice=active,measure=p'al\]tParenthesis denote disjunction over the given values.Figure 2: Simple Syriac Lexicon0 \[ a 100 e 0 vocalismk I 0 I t0  0 b rootcl I v It20 v c3 pattern1 3 5 4 2\[ k \] a let  e b \]surfaceThe numbers between the lexical expressions and thesurface xpression denote the rules in Figure 1 whichsanction the given lexical-surface mappings.Rule features play a role in the semantics of rules:a =~ states that if the contexts and rule featuresare satisfied, the rule is triggered; a ?=: states thatif the contexts, lexical expressions and rule featuresare satisfied, then the rule is applied.
For example,although R5 is devoid of context expressions, therule is composite indicating that if the root measureis pa "el, then gemination must occur and vice versa.Note that in a compound rule, each set of contextsis associated with a feature structure of its own.What is meant by 'rule features are satisfied'?Regular grammars which make use of rule featuresnormally interact with a lexicon.
In our model, thelexicon consists of (n - j) sublexica correspondingto the lexical elements in the formalism.
Each sub-lexical entry is associate with a feature structure.Rule features are satisfied if they match the featurestructures of the lexical entries containing the lexicalexpressions in r, respectively.
Consider the lexiconin Figure 2 and rule R5 with 7" = t:c.,:t:0 t:0:0:0 andthe rule features (\[cat=verb\], \[measure=pa"el\], \[\]).The lexical entries containing r are {clvc_,vc3} and{ktb}, respectively.
For the rule to be triggered,\[cat=verb\] of the rule must match with \[cat=verb\]of the lexical entry {clvc2vc3}, and \[measure=pa"el\]of the rule must match with \[measure=(p'al,pa"el)\]of the lexical entry {ktb}.As a second illustration, R6 derives the simple p'almeasure, /ktab/ .
Note that in R5 and R6,1.
the lexical expressions in both rules (ignoring0s) are equivalent,2.
both rules are composite, and3303.
they have di f ferent  surface expression in r.In traditional rewrite formalism, such rules will becontradicting each other.
However, this is not thecase here since R5 and R6 have different rule fea-tures.
The derivation of this measure is shown below(R7 completes the derivation deleting the first vowelon the surfaceS):l a 101a 10 I~oc~tism01t i01b  rootc v Ic2!
v Ip .
rn17632Ik!0!t !albl  rI ceNote that in order to remain within finite-statepower, both the attributes and the values in featurestructures must be atomic.
The formalism allows avalue to be a variable drawn from a predefined finiteset of possible atomic values.
In the compilationprocess, such variables are taken as the disjunctionof all possible predefined values.Additionally, this version of rule feature match-ing does not cater for rules whose r span over twolexical forms.
It is possible, of course, to avoid thislimitation by having rule features match the featurestructures of both lexical entries in such cases.3 Mathemat ica l  P re l im inar iesWe define here a number of operations which will beused in our compilation process.If an operator 0p takes a number of arguments(at, ?
?., ak), the arguments are shown as a subscript,e.g.
0p(a,,...,~k) - the parentheses are ignored if thereis only one argument.
When the operator is men-tioned without reference to arguments, it appearson its own, e.g.
0p.Operations which are defined on tuples of stringscan be extended to sets of tuples and relations.
Forexample, if S is a tuple of strings and 0p(S) is anoperator defined on S, the operator can be extendedto a relation R in the following mannerop(n) = { Op(3) I s e n }Def in i t ion3 .1  ( Ident i ty )  Let L be a regu-lar language.
Id , (L )  = {X  I X is ann-tuple of the form (x, .
- .
,  x), x E L } is the n-wayidentity of L. 9Remark  3.1 If Id  is applied to a string s, we simplywrite Ida(s) to denote the n-tuple (s .
.
.
.
, s}.SShort vowels in open unstressed syllables are deletedin Syriac.9This is a generalization ofthe operator Id in (Kaplanand Kay, 1994).Def in i t ion  3.2 ( Inser t ion)  Let R be a regular re-lation over the alphabet E and let m be a set ofsymbols not necessarily in E. Iaser tm(R)  insertsthe relation Ida(a) for all a E m, freely throughoutR.
I nser t~ I o Inser tm(R)  = R removes all suchinstances if m is disjoint from E. 1?Remark  3.2 We can define another form of Inser twhere the elements in rn are tuples of symbols as fol-lowS: Let R be a regular relation over the alphabetand let rn be a set of tuples of symbols not nec-essarily in E. Inser tm(R)  inserts a, for all a E m,freely throughout R.Def in i t ion  3.3 (Subst i tu t ion)  Let S and S' besame-length n-tuples o f  strings over the alphabet(E ? '
' '  X E), \[ ---- Ida(a ) for some a E E, andS = St IS , .
I .
.
.Sk ,k  > 1, such that Si does notcontain I - i.e.
Si E ((E x -.. x E) - {I}) ' .Subst i tu te (s ,  i ) (S )  = $1S 'S , .S '  .
.
.
Sk  substitutesevery occurrence of I in S with S'.Def in i t ion  3.4 (P ro jec t ion)  Let S = (st .
.
.
.
, s,,)be a tuple of strings, projec'ci(S),  for somei 6 { 1 .
.
.
.
.
n}, denotes the tuple element si.Project~-l(S) ,  for some i E { 1 .
.
.
.
, n }, denotes the(n - 1)-tuple (Sl .
.
.
.
, s i -1 ,  s i+l  .
.
.
.
, sn) .The symbol ,-r denotes 'feasible tuples', similar to'feasible pairs' in traditional two-level morphology.The number of surface expressions, j is always 1.The operator o represents mathematical composi-tion, not necessarily the composition of transducers.4 Compi la t ion  w i thout  Ru leFeaturesThe current algorithm is motivated by the work of(Grimley-Evans, Kiraz, and Puhnan, 1996).
ttIntuitively, the automata is built by three approx-imations as follows:1.2.Accepting rs irrespective of any context.Adding context restriction (=~) constraintsmaking the automata ccept only the sequenceswhich appear in contexts described by thegrammar..
Forcing surface coercion constraints (?=) mak-ing the automata accept all and only the se-quences described by the grammar.1?This is similar to the operator Intro in (Kaplan andKay, 1994).11The subtractive approach for compiling rules intoFSAs was first suggested by Edmund Grimley-Evans.3314.1 Accept ing  rsLet 7- be the set of all rs in a regular grammar, p bean auxiliary boundary symbol (not in the grammar'salphabets) and p' = Ida(p).
The first approxima-tion is described byCenters : U (4)rETCenters  accepts the symbols, p', followed by zeroor more rs, each (if any) followed by p'.
In otherwords, the machine accepts all centers described bythe grammar (each center surrounded by p') irre-spective of their contexts.It is implementation dependent as to whether Tincludes other correspondences which are not explic-itly given in rules (e.g., a set of additional feasiblecenters).4.2 Context  Rest r i c t ion  RulesFor a given compound rule, the set of relations inwhich r is invalid isRestrict(r) = 7r" rTr* - U 7r')~krPkTr* (5)ki.e., r in any context minus r in all valid contexts.However, since in ?4.1 above, the symbol p appearsfreely, we need to introduce it in the above expres-sion.
The result becomesRestr ic t (v)  = Insert{o }o (6)kThe above expression is only valid if r consists ofonly one tuple.
However, to allow it to be a sequenceof such tuples as in R5 in Figure 1, it must be1.
surrounded by p~ on both sides, and2.
devoid of p~.The first condition is accomplished by simply plac-ing p' to the left and right of r. As for the sec-ond condition, we use an auxiliary symbol, w, as aplace-holder representing r, introduce p freely, thensubstitute r in place of w. Formally, let w be anauxiliary symbol (not in the grammar's alphabet),and let w ~ = Ida(w) be a place-holder representingr.
The above expression becomesRestr ic t ( r )  = Subst i tute(v ,  w') o (7)Insert{~} o,'r* p~w ~ ~o ~ ,-r" - U 7r* A k p~J p~p'~ 7r*kFor all rs, we subtract this expression from theautomaton under construction, yieldingCR = Centers - U Restrict( ') (S)TCR now accepts only the sequences of tupleswhich appear in contexts in the grammar (but in-cluding the partitioning symbols p~); however, itdoes not force surface coercion constraints.4.3 Surface Coerc ion RulesLet r '  represent the center of the rule with the cor-rect lexical expressions and the incorrect surface ex-pressions with respect o ,'r*,r '  = Proj 'ect l(r} ?
Project~-l(r)  (9)The coerce relation for a compound rule can besimply expressed by l~-Coerce(r ' )  = Insert{p}o (10)U ,-r* A k p ' r 'p 'pk  lr*kThe two p~s surrounding r ~ ensure that coercion ap-plies on at least one center of the rule.For all such expressions, we subtract Coerce fromthe automaton under construction, yieldingSC = CR - U Coerce(v) (11)TSC now accepts all and only the sequences of tu-pies described by the grammar (but including thepartitioning symbols p~).It remains only to remove all instances of p fromthe final machine, determinize and minimize it.There are two methods for interpreting transduc-ers.
When interpreted as acceptors with n-tuplesof symbols on each transition, they can be deter-minized using standard algorithms (Hopcroft andUllman, 1979).
When interpreted as a transduc-tion that maps an input to an output, they can-not always be turned into a deterministic form (see(Mohri, 1994; Roche and Schabes, 1995)).5 Compi la t ion  w i th  Ru le  FeaturesThis section shows how feature structures which areassociated with rules and lexical entries can be in-corporated into FSAs.12A special case can be added for epenthetic rules.332Entry Feature Structureabcd ./1ef faghi fsFigure 3: Lexicon Example5.1 In tu i t i ve  Descr ip t ionWe shall describe our handling of rule features with atwo-level example.
Consider the following analysis.l a \ [b l  c ldI ~ te \[ f!
~ \ [g lh \ [  i \]1~ \[ Lexical1 2 3 4 5 6 7 5 8 9105\[a!blcldlOlelf!O!g!h!i!OlS""SaeeThe lexical expression contains the lexical forms{abcd}, {ef} and {ghi}, separated by a boundarysymbol, b, which designates the end of a lexical entry.The numbers between the tapes represent the rules(in some grammar) which allow the given lexical-surface mappings.Assume that the above lexical forms are associ-ated in the lexicon with the feature structures as inFigure 3.
Further, assume that each two-level rulem, 1 < m < 10, above is associated with the fea-ture structure Fro.
Hence, in order for the abovetwo-level analysis to be valid, the following featurestructures must matchAll the structures ... must match ...F1,F2, F3, F4 flF6,F7 f2Fs, Fg, Fl o .1:3Usually, boundary rules, e.g.
rule 5 above, are notassociated with feature structures, though there isnothing stopping the grammar writer from doing so.To match the feature structures associated withrules and those in the lexicon we proceed as follows.Firstly, we suffix each lexical entry in the lexiconwith the boundary symbol, ~, and it's feature struc-ture.
(For simplicity, we consider a feature struc-ture with instantiated values to be an atomic objectof length one which can be a label of a transitionin a FSA.)
13 Hence the above lexical forms become:'abcd kfl', 'efbf~.
', and 'ghi ~f3'.
Secondly, we incor-porate a feature structure of a rule into the rule'sright context, p. For example, if p of rule 1 above isb:b c:c, the context becomesb:b c:c ,'r* 0:F1 (12)(this simplified version of the expression suffices forthe moment).
In other words, in order for a:a to besanctioned, it must be followed by the sequence:13As to how this is done is a matter of implementation.1.
b:b c:c, i.e., the original right context;2. any feasible tuple, ,'r*; and3.
the rule's feature structure which is deleted onthe surface, 0:F1.This will succeed if only if F1 (of rule 1) and f l  (ofthe lexical entry) were identical.
The above analysisis repeated below with the feature structures incor-porated into p.lalblcldlblS~le fl~lS~lg hli!~!f~lL~ic~t12345 675 89105\[alblcldlO!O!e flOlOlg hlilO!OiSuqaceAs indicated earlier, in order to remain withinfinite-state power, all values in a feature structuremust be instantiated.
Since the formalism allowsvalues to be variables drawn from a predefined finiteset of possible values, variables entered by the userare replaced by a disjunction over all the possiblevalues.5.2 Compi l ing  the LexiconOur aim is to construct a FSA which accepts anylexical entry from the ith sublexicon on its j " ithtape.A lexical entry # (e.g., morpheme) which is asso-ciated with a feature structure ?
is simply expressedby /~?,  where k is a (morpheme) boundary symbolwhich is not in the alphabet of the lexicon.
Theexpression of sublexicon i with r entries becomes,L, -- U#%?
~ (13)rWe also compute he feasible feature structures ofsublexicon i to bez, = U (14)rand the overall feasible feature structures on all sub-lexica to be?
= O" x F1 x F~ x .-- (15)The first element deletes all such features on thesurface.
For convenience in later expressions, we in-corporate features with ~ as follows~?
- ,T U ?
(16)The overall lexicon can be expressed by, 14Lexicon = LI ?
L~ ?
.. .
(17)14To make the lexicon describe qual-length relations,a special symbol, say 0, is inserted throughout.333The operator ?
creates one large lexicon out ofall the sublexica.
This lexicon can be substantiallyreduced by intersecting it with Proj ect~'l (~0)..If a two-level grammar is compiled into an au-tomaton, denoted by Gram, and a lexicon is com-piled into an automaton, denoted by Lez, the au-tomaton which enforces lexical constraints on thelanguage is expressed byL = (Pro j , c t l (~)*  ?
Lex) A Gram (18)The first component above is a relation which ac-cepts any surface symbol on its first tape and thelexicon on the remaining tapes.5.3 Compi l ing  RulesA compound regular rule with m context-pairs andm rule features takes the formv {==~,<==,?~} kl___pl;k2--p2;...;Am---p m\[?1, ?2, .
.
.
,  ?-~\] (19)where v, A ~, and pk, 1 < k < m are like before andck is the tuple of feature structures associated withrule k.The following modifications to the proceduregiven in section 4 are required.Forgetting contexts for the moment, our basic ma-chine scans sequences of tuples (from "/-), but re-quires that any sequence representing a lexical entrybe followed by the entry's feature structure (from?
).
This is achieved by modifying eq.
4 as follows:Centers = \[.J (20)vETThe expression accepts the symbols, 9', followedby zero or more occurrences of the following:1. one or more v, each followed by ~a', and2.
a feature tuple in ?
followed by p'.In the second and third phases of the compilationprocess, we need to incorporate members of ?I, freelythroughout he contexts.
For each A k, we computethe new left contextfk = Insert.
(A ~) (21)The right context is more complicated.
It requiresthat the first feature structure to appear to the rightof v is Ck.
This is achieved by the expression,7"~ k = Inser to (p  k) CI ~'*?k~r~ (22)The intersection with a'*?k,'r; ensures that the firstfeature structure to appear to the right of v is Ck:zero or more feasible tuples, followed by Ck, followedby zero or more feasible tuples or feature structures.Now we are ready to modify the Restrict relation.The first component in eq.
5 becomesA = ( ;  U ~O)*vTr~ (23)The expression allows ~ to appear in the left andright contexts of v; however, at the left of v, theexpression (Tr tO ~r?)
puts the restriction that the firsttuple at the left end must be in a', not in ?.The second component in eq.
5 simply becomesB = U "r; ?k rTCkTr; (24)kHence, Restrict becomes (after replacing v withw' in eq.
23 and eq.
24)Restrict(r) = Subst i tu te ( r ,w ' )o  (25)Insert{~} oA-BIn a similar manner, the Coercer relation be-comesCoerce(r') = Insert{~}o (26)k6 Conc lus ion  and  Future  WorkThe above algorithm was implemented in Prolog andwas tested successfully with a number of sample-type grammars.
In every case, the automata pro-duced by the compiler were manually checked forcorrectness, and the machines were executed in gen-eration mode to ensure that they did not over gen-erate.It was mentioned that the algorithm presentedhere is based on the work of (Grimley-Evans, Kiraz,and Pulman, 1996) rather than (Kaplan and Kay,1994).
It must be stated, however, that the intu-itive ideas behind our compilation of rule features,viz.
the incorporation of rule features in contexts,are independent of the algorithm itself and can bealso applied to (Kaplan and Kay, 1994) and (Mohriand Sproat, 1996).One issue which remains to be resolved, how-ever, is to determine which approach for compilingrules into automata is more efficient: the standardmethod of (Kaplan and Kay, 1994) (also (Mohri andSproat, 1996) which follows the same philosophy) or334Algorithm Intersection Determini-(N 2) zation (2 N)KK (n -- i )  "J- 3 ~in_-i ki 8 ~'\]~=1 kiEKP 1 ?
~"\]n n ,i=t ki 1 ..t. ~ i=1 kiwhere n = number of rules in a grammar,and ki = number of contexts for rule i, 1 < i < n.Figure 4: Statistics of Complex Operation'sdealt with at the morphotactic level using a unifica-tion based formalism.AcknowledgmentsI would like to thank Richard Sproat for comment-ing on an earlier draft.
Many of the anonymousreviewers' comments proofed very useful.
Mistakes,as always, remain mine.the subtractive approach of (Grimley-Evans, Kiraz,and Pulman, 1996).The statistics of the usage of computationally ex-pensive operations - viz., intersection (quadraticcomplexity) and determinization (exponential com-plexity) - in both algorithms are summarized in Fig-ure 4 (KK = Kaplan and Kay, EKP = Grimley-Evans, Kiraz and Pulman).
Note that complemen-tation requires determinization, and subtraction re-quires one intersection and one complementationsinceA -  B = An  B (27)Although statistically speaking the number of op-erations used in (Grimley-Evans, Kiraz, and Pul-man, 1996) is less than the ones used in (Kaplanand Kay, 1994), only an empirical study can resolvethe issue as the following example illustrates.
Con-sider the expressionA =al Ua2U...Uanand the De Morgan's law equivalent(28)B = ~n~n.
- .n~.
(29)The former requires only one complement which re-sults in one determinization (since the automatamust be determinized before a complement is com-puted).
The latter not only requires n complements,but also n - 1 intersections.
The worst-case analy-sis clearly indicates that computing A is much lessexpensive than computing B. Empirically, however,this is not the case when n is large and ai is small,which is usually the case in rewrite rules.
The reasonlies in the fact that the determinization algorithmin the former expression applies on a machine whichis by far larger than the small individual machinespresent in the latter expression, isAnother aspect of rule features concerns the mor-photactic unification of lexical entries.
This is bestaSThis important difference was pointed out by one ofthe anonymous reviewers whom I thank.Re ferencesBear, J.
1988.
Morphology with two-level rules andnegative rule features.
In COLING-88: PapersPresented to the 12th International Conference onComputational Linguistics, volume 1, pages 28-31.Goldsmith, J.
1976.
Autosegmental Phonology.Ph.D.
thesis, MIT.
Published as Autosegmentaland Metrical Phonology, Oxford 1990.Grimley-Evans, E., G. Kiraz, and S. Pulman.
1996.Compiling a partition-based two-level formalism.In COLING-96: Papers Presented to the 16thInternational Conference on Computational Lin-guistics.Hopcroft, J. and J. Ullman.
1979.
Introduction toAutomata Theory, Languages, and Computation.Addison-Wesley.Kaplan, R. and M. Kay.
1994.
Regular models ofphonological rule systems.
Computational Lin-guistics, 20(3):331-78.Kiraz, G. 1995.
Introduction to Syriac Spirantiza-tion.
Bar Hebraeus Verlag, The Netherlands.Kiraz, G. \[1996\].
Syriac morphology: From a lin-guistic description to a computational implemen-tation.
In R. Lavenant, editor, VIItum Sympo-sium Syriacum 1996, Forthcoming in OrientaliaChristiana Analecta.
Pontificio Institutum Studio-rum Orientalium.Kiraz, G. \[Forthcoming\].
Computational Ap-proach to Nonlinear Morphology: with empha-sis on Semitic languages.
Cambridge UniversityPress.McCarthy, J .
1981.
A prosodic theory of non-concatenative morphology.
Linguistic Inquiry,12(3):373-418.Mohri, M. 1994.
On some applications of finite-stateautomata theory to natural anguage processing.Technical report, Institut Gaspard Monge.335Mohri, M. and S. Sproat.
1996.
An efficient com-piler for weighted rewrite rules.
In Proceedingsof the 3~th Annual Meeting of the Association forComputational Linguistics, pages 231-8.Roche, E. and Y. Schabes.
1995.
Deterministicpart-of-speech tagging with finite-state transduc-ers.
CL, 21(2):227-53.336
