Proceedings of the Fourth Linguistic Annotation Workshop, ACL 2010, pages 172?176,Uppsala, Sweden, 15-16 July 2010. c?2010 Association for Computational LinguisticsFrom Descriptive Annotation to Grammar SpecificationLars HellanNTNUTrondheim, Norwaylars.hellan@hf.ntnu.noAbstractThe paper presents an architecture for connectingannotated linguistic data with a computational gram-mar system.
Pivotal to the architecture is an annota-tional interlingua ?
called the Construction Labelingsystem (CL) - which is notationally very simple, de-scriptively finegrained, cross-typologically applica-ble, and formally well-defined enough to map to astate-of-the-art computational model of grammar.
Inthe present instantiation of the architecture, the com-putational grammar is an HPSG-based system calledTypeGram.
Underlying the architecture is a researchprogram of enhancing the interconnectivity betweenlinguistic analytic subsystems such as grammar for-malisms and text annotation systems.1 IntroductionThis paper advocates the view that all aspects ofdescriptive, theoretical, typological, and compu-tational linguistics should hang together in over-all precisely defined networks of terminologiesand formalisms, but flexibly so such that eachfield can choose suitable formats, and differenttraditions can maintain their preferred terminol-ogies and formalisms.
Terms and symbols usedfor linguistic annotation are central in this enter-prise, and the paper describes an algorithm bywhich a code suitable for sentence level annota-tion can be aligned with a system of attribute-value matrix (AVM) representations.
An aim forfurther development is a similar alignment forPoS/morpheme annotation symbols.The alignment described has as its theoreticaland computational reference point an HPSG-based system, where, aside from AVMs, typesplay a crucial role.
Most likely, alignment archi-tectures with similar capacities to the one heredescribed can have other formal frameworks in-tegrated.
For such alternatives the present systemmay serve as a roadmap, and hopefully more: thearchitecture is sought to be modular such thatparts of it ?
such as the formal framework, or anannotation tag system -  can be replaced whilekeeping other parts constant.
At the presentpoint, however, this is a demonstration tied tounique choices for each module in the architec-ture.
It serves as a feasibility demonstration ofthe design as such, and equally much to motivatethe specific annotation code presented, which ispivotal to the system as a whole.This paper has two parts.
The first part presentsthe sentence-level annotation code.
It consists ofstrings of labels (connected by hyphens) whereeach label represents a possible property of asentential sign, such as, e.g.,  ?has Argumentstructure X?, ?has Aspect Y?, ?has a Subject withproperties Z?, ?expresses situation type S?, etc.The construction type specification in (1) is afirst illustration of the code:(1) v-tr-suAg_obAffincrem-COMPLETED_MONODEVMNT(Ex.
: English: the boy ate the cake)This reads: the sign is headed by verb; its syntac-tic frame is transitive; it has a Subject (su) whosethematic role is agent, and an Object (ob) whosethematic role is incrementally affected; its aspec-tual type is characterized as a combination ofcompleted and monotonic development.Expressions like that in (1), characterizing asentence from its ?global?
perspective, are re-ferred to as templates.
The code is flexible inhaving no upward bound on the number of labelsused in a template, and expressive in that eachlabel represents a statement about some part oraspect of the sign.
The code as such will be re-ferred to as the Construction Labeling (CL)system; see section 2.The circumstance that each individual label hasthe logic of a statement, is essential to the trans-parency of the code.
This propositional characterof a label also opens for the alignment of CLwith a formal grammar system, which is ad-dressed in the second part of the paper.
Here weshow how templates can be linked to AVMs, likethe template in (1) to an AVM like (2) (in mixedHPSG/LFG style),172(2)[ ][ ]H E A D  verbS U B J IN D X  1 R O LE  agen tG FO B J IN D X  2 R O LE  aff-incremIN D X  ref-indexA S P E C T  com pletedA C T 1 1A C T N T SA C T 2 2S IT -T Y P E  m ono ton ic_developm en t?
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
?and in such a way that each individual label in thetemplate can be seen as inducing its specific partof the AVM, as informally and partially indicatedin (3):(3)v - - - [ ]HEAD verbtr - - - S U B J  IN D X  1G FO B J  IN D X  2A C T 1  1A C T N T SA C T 2  2?
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
??
?suAg - - -  [ ]GF SUBJ INDX ROLE agent?
??
??
??
??
??
?obAffincrem - - -  [ ]GF OBJ INDX ROLE aff-increm?
??
??
??
??
??
?Thus, while the labels have a descriptive trans-parency essential to the descriptive functionalityof the over-all code, this transparency can be?cashed out?
also in the definition of a linkingbetween CL and grammar formalisms like thatillustrated in (2) and (3).
Section 3 describes apossible architecture for achieving this, centeredaround the computational grammar TypeGram.2 Construction LabelingIn its first development, the coding system hasbeen based on two typologically very diverselanguages: Norwegian, and the West African lan-guage Ga. An overview of the system is given in(Hellan and Dakubu 2010).
The end product ofits application to a language is called a construc-tion profile of the language, abbreviated its c-profile.
This is an assembly of between 150 and250 templates encoding the span of variation of-fered by the language in a fixed number of re-spects, in a code immediately comparable to c-profiles of other languages.
A c-profile for bothGa and Norwegian is given in (Hellan and Da-kubu op.
cit.
); see also (Hellan and Dakubu 2009,Dakubu 2008, Hellan 2008).The typical method of establishing c-profiles isthrough paradigm building, where, based on onesentence of the language, one establishes thevarious paradigms relative to which the sentenceinstantiates choices, and supplements these para-digms with paradigms spun out of other sen-tences or constructions, ultimately establishing afull network of construction types for the lan-guage relative to the discriminants selected.(?Construction?
is here used in a theory neutralway.
)The creation of c-profiles is obviously an in-cremental process, both in the building of tem-plates instantiating possibilities defined by therange of discriminants recognized at any point,and in extending this range reflecting new phe-nomena and new languages investigated.
Thus,while the stage referred to above reflects in depthwork on Germanic and Kwa, significant en-hancements are currently made through work onEthio-semitic (especially through the study(Wakjira, to appear) on Kistaninya), Bantu,Indic, and other language groups, mostly not yethaving achieved full c-profiles.Although presentable as networks, in normaldisplays c-profiles are given as lists, with strictprinciples of ordering.
Some c-profiles are alsoentered in the TypeCraft database(http://www.typecraft.org/), where one cansearch according to any labels serving as con-stituents of templates.
At present, the number oflabels employed in the code is about 40 for va-lence types, 90 for specifications relating to thesyntactic form of specific constituents, 40 forthematic roles of specific constituents, 20 foraspect and Aktionsart values, and 60 for situationtypes.
For valence and grammatical functions,language and framework independence in thecode is made possible due to considerable agree-ment across traditions, whereas for participantroles and situation types, there is much less of aconsolidated basis, and in these areas code de-velopment and evaluation is still a primary issue.3 TypeGramTypeGram is in most respects a normal HPSG-based computational grammar built on the LKBplatform (Copestake 2002).
Crucial to the pre-sent discussion, it has some components de-signed for linking it up with the CL code, whichmakes it possible for it to- provide an AVM display of any CL template(like (2) above, for (1));- provide a basis for a rapid development of aparsing grammar for any language for which ac-profile has been created;173- provide an intermediate parsing facility forsentences of any language even when no gram-mar specific to the language has been created, aslong as the language has been assigned a c-profile.We will refer to the ?basic?
part of TypeGramas its Core.
Relative to current grammar formal-isms using AVMs, such as LFG and HPSG (cf.Bresnan 2001, Butt et al 1999, Pollard and Sag1994), the TypeGram Core borrows from LFGan inventory of grammatical functions, and fromHPSG the use of types, and a design by whichall components of a grammar are encoded inAVMs.
Unlike most computational grammars,the Core defines analyses for phenomena notrestricted to one language, but for the union ofall languages for which c-profiles have been de-fined.
(In this respect it resembles the HPSGGrammar Matrix (?the Matrix?
- see  Bender et.al, and http://www.delph-in.net/matrix/ ); wecomment on its relationship to this system be-low.)
The mediation between the Core and the c-profiles is induced by special type files:- one file for each c-profile (of which there arecurrently three, for Ga, Norwegian and Kistan-inya)- one general file, called Labeltypes, for defin-ing CL labels as types in terms of the Core types.This architecture can be summed up as follows(with ?Ga c-types?
meaning ?types correspond-ing to the templates constituting the c-profile forGa?, and items in boldface being items definedinside the TypeGram system):(4)c-profile of Ga       Ga c-typesc-profile ofNorwegian    Norw.c-typ  Labeltypesc-profile ofKistaninya    Kistane c-types CoreThus, what communicates between the Core andthe construction specifications in the CL code isLabeltypes, which in turn feeds into the lan-guage specific template definition files.
The lat-ter files build only on Labeltypes, which in turnbuilds only on the Core.
This allows for modu-larity: the content of the Core can be changed,e.g., to the system of the Matrix (or even anLFG-based system), without affecting the c-profiles or the c-type inventories.We now describe possibilities offered by thearchitecture.3.1 Providing AVM displays of templatesIn exemplifying this function, we use a templatefrom Ga, along with a glossed example to illus-trate the construction type:(5)  v-ditr-obPostp-suAg_obEndpt_ob2Mover-PLACEMENTAm?-wo ts?ne  l?
mli  y?l?3P.AOR-put  vehicle DEF  inside  yamV  N Art N N?They put [vehicle?s inside] [yam]?
= ?Theyput yams in the lorry.
?Here the two objects represent a Mover (theyam) and where the Mover is finally placed (thelorry?s inside).
This Endpoint is characterized asthe inside of something, where the expression ofthis inside is structurally like a possessive NPconstruction.In the type-file ?Ga c-types?, the template in(5) is turned into a grammatical type by the typedefinition (6) (where ?:=?
means ?is a subtypeof?
and ?&?
is the operation of unification):(6)v-ditr-obPostp-suAg_obEndpt_ob2Th-PLACEMENT    :=v & ditr & obPostp & suAg & obEndpt & ob2Th& PLACEMENT.The way in which the individual types v, ditr,obPostp, etc., are here unified to constitute adefinition of the type corresponding to the fulltemplate, corresponds to the way in which, in(3), the constituent labels of the template (1) areportrayed as contributing to its full AVM.The defining types in (6) are in turn defined inlabeltypes, by definitions whose defining termsare in turn defined in the Core.With such type definitions in the background,the template v-ditr-obPostp-suAg_obEndpt_ob2Th-PLACEMENT is a typerecognized in the grammar.
Using the view typedefinition offered in a standard LKB interface,one sees the AVM assigned to this template.3.2 Developing a parsing grammarSuppose that we want to develop a grammarof Ga ?
GaGram -, taking advantage of the typeapparatus already described.
(For Ga, the lexi-con (Dakubu 2009) is partly informed by the c-profile and is a resource in building the lexiconof the grammar.)
What is missing is defining alexicon, inflectional rules, derivational rules and174syntactic combinatorial rules.
The latter is partlydeducible from the constructional templates, andfor templates which reflect verb subcategoriza-tion frames, lexical frame types are fairly di-rectly derivable from the templates.
What needsto be done in addition is specifying the lexicalroot items of Ga, and the inflectional and deriva-tional formatives used in the language.This ?grammar construction kit?
offered byTypeGram clearly resembles the HPSG Gram-mar Matrix (?Matrix?
; cf.
Bender et al 2002).
Itdiffers from the Matrix most essentially throughthe way in which the grammar internal specifica-tions are ?semi-automatically?
updated as the c-profile grows.
This systematic linkage between across-linguistic descriptive classification codeand a computational grammar code is not yetavailable in the Matrix.
Nothing, though, pre-cludes introducing the TypeGram architecturealso there, in this respect.3.3 An intermediate parsing facilityTypeGram has specifications which, in additionto the above, in principle enable it to parse theGa string in (5) ?
viz.,(7) Am?-wo ts?ne l?
mli y?l?as a structure like (8) (AVM not shown):(8)   VPV  NP  NPNP  NN           ArtV3PputAor???Nvehicle???ArtDEF??
Ninside?
?NyamWe may informally refer to (8) as an ?x-ray?
of(7).
As terminal nodes in the parse tree, it hasthe English glosses corresponding to the Garoots, and functional morph glosses for the ac-tual formatives of the Ga string.
This is achievedthrough having as input to the parser not thestring (7) itself, but the standard gloss associatedwith the string ?
(9a) ?
suitably modified to stan-dard LKB parse input format:(9)a.3P.AOR-put  vehicle  DEF  inside  yamV  N Art N Nb.
V3PputAor?Nvehicle?ArtDEF?Ninside?NyamThis is achieved by having the TypeGram lexi-con contain all those English roots which everappear in the glosses of Ga sentences (obviouslyrelative to a limited, but in principle expandablecorpus), and having these roots be associatedwith exactly the frame types which the corre-sponding Ga roots have relative to Ga.
Thus, toproduce (8), this lexicon would have to includean entry like (10) (using LKB style format),?put?
being the counterpart to wo in this context:(10)put := v-ditr-obPostp-suAg_obEndpt_ob2Th-PLACEMENT & [ ORTH <?put?>,ACTANTS.PRED put_rel ].What this facility amounts to is a parser dis-playing the structure of sentences of a languagefor which one has designed a c-profile, but notyet a parsing grammar.
It would be useful as atool for typological comparison.
To work, such asystem would require a highly disciplined set ofconventions for ?standard?
glossing, and an in-terface in addition to LKB where such a glossingwould be ?read in?
as a string-to-parse; the latteris a facility not yet implemented (the only exist-ing candidate interface for this purpose, to ourknowledge, would be TypeCraft (cf.
Beermannand Mihaylov 2009), while the development ofthe former (presumably with reference to exist-ing glossing conventions such as the LeipzigGlossing rules, see References) would be part ofthe over-all initiative described at the outset.4 ConclusionWith the Construction Labeling code and its de-ployment across languages as a basis, we haveshown how this code can be mapped to a gram-mar formalism, both formally and computation-ally.
We are thereby able to, at one and the sametime, develop descriptive sentence level annota-tions across typologically diverse languages witha unitary code, and derive from these annota-tions facilities for automatic display of AVMsfor any coded annotation, for rapid grammar de-velopment for the language concerned, and ?
sofar less robustly - for intermediate ?gloss?-reflecting parsing.We have thereby provided a system where de-scriptive, theoretical, typological, and computa-tional concerns are brought together in an over-all precisely defined network of terminologiesand formalisms, and flexibly so such that eachfield ?
here annotation and grammar develop-ment ?
have their respective suitable formats.175ReferencesDorothee Beermann and Pavel Mihaylov 2009.
Type-Craft ?
Glossing and Databasing for Linguists.Proceedings of the 23rd Scandinavian Conferenceof Linguistics, Uppsala, Sweden, October 2008.Emily M Bender, Dan Flickinger, and Stephan Oepen.2002.
The Grammar Matrix: An open-sourcestarter kit for the rapid development of cross-linguistically consistent broad-coverage precisiongrammars.
In Proceedings of the Workshop onGrammar Engineering and Evaluation, COLING2002, Taipei.Joan Bresnan.
2001.
Lexical Functional Grammar.Oxford: Blackwell.Miriam Butt, Tracy Holloway King, Maria-EugeniaNini and Frederique Segond.
1999.
A Grammar-writer's Cookbook.
Stanford: CSLI Publications.Ann Copestake.
2002.
Implementing Typed FeatureStructure Grammars.
CSLI Publications.Mary Esther Kropp Dakubu,.
2008.
The Constructionlabel project: a tool for typological study.
Pre-sented at West African Languages Congress(WALC), Winneba, July 2008.Mary Esther Kropp Dakubu.
2009.
Ga-English Dic-tionary.
Accra.Lars Hellan.
2008.
Enumerating Verb ConstructionsCross-linguistically.
COLING Workshop on Gram-mar Engineering Across frameworks.
Manchester.http://www.aclweb.org/anthology-new/W/W08/#1700Lars Hellan and Mary Esther Kropp Dakubu.
2009:A methodology for enhancing argument structurespecification.
In: Proceedings from the 4th Lan-guage Technology Conference (LTC 2009),Poznan.Lars Hellan and Mary Esther Kropp Dakubu.
2010.Identifying Verb Constructions Cross-linguistically.
SLAVOB series, Univ.
of Ghana(http://www.typecraft.org/w/images/d/db/1_Introlabels_SLAVOB-final.pdf,http://www.typecraft.org/w/images/a/a0/2_Ga_appendix_SLAVOB-final.pdf,http://www.typecraft.org/w/images/b/bd/3_Norwegian_Appendix_plus_3_SLAVOB-final.pdf )Carl Pollard and Ivan Sag.
1994.
Head-Driven PhraseStructure Grammar.
Chicago University Press.Bedilu Debela Wakjira.
To appear.
Kistaninya VerbMorphology and Verb Constructions.
PhD disserta-tion.
NTNU.Some web sites:Leipzig glossing rules:http://www.eva.mpg.de/lingua/resources/glossing-rules.phpTypeGram:http://www.typecraft.org/tc2wiki/TypeGramTypeCraft:http://www.typecraft.org/Construction Labeling site:http://www.typecraft.org/research/projects/Verbconstructions/176
