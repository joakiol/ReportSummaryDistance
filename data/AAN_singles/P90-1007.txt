TRANSFORMING SYNTACTIC  GRAPHS INTOSEMANTIC  GRAPHS*Hae-Chang R imJungyun SeoRober t  F. S immonsDepar tment  of Computer  Sc iencesandArt i f ic ia l  In te l l igence LaboratoryTay lor  Hal l  2.124, Un ivers i ty  of Texas  at  Aust in ,Aust in ,  Texas  78712ABSTRACTIn this paper, we present a computationalmethod for transforming a syntact i c  graph,which represents all syntactic interpretations of asentence, into a semant ic  g raph  which filters outcertain interpretations, but also incorporates anyremaining ambiguities.
We argue that the result-ing ambiguous graph, supported by an exclusionmatrix, is a useful data structure for question an-swering and other semantic processing.
Our re-search is based on the principle that ambiguity isan inherent aspect of natural anguage communi-cation.INTRODUCTIONIn computing meaning representations fromnatural language, ambiguities arise at each level.Some word sense ambiguities are resolved by syn-tax while others depend on the context of dis-course.
Sometimes, syntactic ambiguities are re-solved during semantic processing, but often re-main even through coherence analysis at the dis-course level.
Finally, after syntactic, semantic,and discourse processing, the resulting meaningstructure may still have multiple interpretations.For example, a news item from Associated Press,November 22, 1989, quoted a rescued hostage,"The foreigners were taken to the EstadoMayor, army headquarters.
I left thathotel about quarter to one, and by the*This work is sponsored by the Army Research Officeunder contract DAAG29-84-K-0060.47time I got here in my room at quarter to4 and turned on CNN, I saw myself onTV getting into the little tank," Bloodsaid.The article was datelined, Albuquerque N.M. Afirst reading suggested that Mr.
Blood had beenflown to Albuquerque, but further thought sug-gested that "here in my room" probably referredto some sleeping section in the army headquarters.But despite the guess, ambiguity remains.In a previous paper \[Seo and Simmons 1989\] weargued that a syntactic graph - -  the union of allparse trees - -  was a superior representation forfurther semantic processing.
It is a concise list ofsyntactically labeled triples, supported by an ex-clusion matrix to show what pairs of triples areincompatible.
It is an easily accessible represen-tation that provides ucceeding semantic and dis-course processes with complete information fromthe syntactic analysis.
Here, we present methodsfor transforming the syntactic graph to a func-tional graph (one using syntactic functions, SUB-JECT, OBJECT, IOBJECT etc.)
and for trans-forming the functional graph to a semantic graphof case relations.BACKGROUNDMost existing semantic processors for naturallanguage systems (NLS) have depended on a strat-egy of selecting a single parse tree from a syntac-tic analysis component (actual or imagined).
Ifsemantic testing failed on that parse, the systemwould sel~,ct another - -  backing up if using a top-down parser, or selecting another interpretationvpp(8)ppn01 (SNP saw John) 12 (VNP saw man) 23 (DET man a) 34 (NPP man on) 45 (VPP saw on) 56 (DET hill the) 6, 7 (PPN on hill) 7S (VPP saw with) S9 (NPP man with) 9,(11) 10 (NPP hill with) 1011 (PPN with telescope) 1112 (DET telescope a) 120 1 ~13 4 5161711S 9 10 11 121 11 11 1Figure 1: Syntactic Graph and Exclusion Matrix for "John saw a man on the hill with a telescope.
"from an all-paths chart.
Awareness has grown inrecent years that this strategy is not the best.
At-tempts by Marcus \[1980\] to use a deterministic(look-ahead) tactic to ensure a single parse with-out back-up, fail to account for common, garden-path sentences.
In general, top-down parsers withbackup have unpleasant implications for complex-ity, while efficient all-paths parsers limited to com-plexity O(N 3) \[Aho and Ullman 1972, Early 1970,Tomita 1985\] can find all parse trees in little moretime than a single one.
If we adopt the economicalparsing strategy of obtaining an all-paths parse,the question remains, how best to use the parsinginformation for subsequent processing.Approaches by Barton and Berwick \[1985\] andRich et  al.
\[1987\] among others have suggestedwhat Rich has called ambigu i ty  procras t ina -t ion  in which a system provides multiple potentialsyntactic interpretations and postpones a choiceuntil a higher level process provides sufficient in-formation to make a decision.
Syntactic repre-sentations in these systems are incomplete andmay not always represent possible parses.
Tomita\[1985\] suggested using a shared-packed-forest a  aneconomical method to represent all and only theparses resulting from an all-paths analysis.
Unfor-tunately, the resulting tree is difficult for a personto read, and must be accessed by complex pro-grams.
It was in this context that we \[Seo andSimmons 1989\] decided that a graph composed ofthe union of parse trees from an all-paths parserwould form a superior representation for subse-quent semantic processing.48SYNTACTIC  GRAPHSIn the previous paper we argued that the syntac-tic graph supported by an exclusion matrix wouldprovide all and "only" the information given by aparse forest.
1 Let us first review an example of asyntactic graph for the following sentence:Exl)  John saw a man on the hill with a tele-scope.There are at least five syntactic interpreta-tions for Exl  from a phrase structure grammar.The syntactic graph is represented as a set ofdominator-modifier triples 2 as shown in the mid-dle of Figure 1 for Exl.
Each triple consists of alabel, a head-word, and a modifier-word.Each triple represents an arc in a syntacticgraph in the left of Figure 1.
An arc is drawnfrom the head-word to the modifier-word.
Thelabel of each triple, SNP, VNP, etc.
is uniquelydetermined according to the grammar ule usedto generate the triple.
For example, a triple withthe label SNP is generated by the grammar ule,SNT --+ NP  + VP ,  VPP is from the rule VP --+VP  ?
PP ,  and PPN from PP  ---+ Prep?
NP,  etc.We can notice that the ambiguities in the graphare signalled by identical third terms (i.e., thesame modifier-words with the same sentence posi-tion) in triples because a word cannot modify twodifferent words in one syntactic interpretation.
In1 We proved the "all" but  have discovered that in certaincases to be shown later, the transformation to a semanticgraph may result in arcs that do not occur in any completeanalysis.2Actually each word in the triples also includes notationfor position, and syntactic lass and features of the word.Figure 2: Syntactic Graph and Exclusion Matrix for "The monkey lives in tropical jungles near rivers andstreams.
"a graph, each node with multiple in-arcs shows anambiguous point.
There is a special arc, calledthe root  are, which points to the head word ofthe sentence.
The arc (0) of the syntactic graph inFigure 1 represents a root arc.
A root arc containsinformation (not shown) about the modalities ofthe sentence such as voice: passive, active, mood:declarative or wh-question, etc.
Notice that a sen-tence may have multiple root arcs because of syn-tactic ambiguities involving the head verb.One interpretation can be obtained from a syn-tactic graph by picking up a set of triples with norepeated third terms.
In this example, since thereare two identical occurrences of on and three ofwith, there are 2 .3  = 6 possible sentence interpre-tations in the graph represented above.
However,there must be only five interpretations for Exl.The reason that we have more interpretations ithat there are triples, called exc lus ive tr ip les,which cannot co-occur in any syntactic interpre-tation.
In this example, the triple (vpp  saw on)and (npp  man wi th)  cannot co-occur since thereis no such interpretation i this sentence.
3 That 'swhy a syntactic graph must maintain an exelu-s lon matr ix .An exclusion matrix, (Ematr ix) ,  is an N ?
Nmatrix where N is the number of triples.
IfEmatr ix ( i , j )  = 1 then the i-th and j-th triple3Once the phrase "on the hill" is attached to saw, "witha telescope" must be attached to either hill or saw, notm0~n.cannot co-occur in any reading.
The exclusion ma-trix for Exl  is shown in the right of Figure 1.
InExl, the 'triples 5 and 9 cannot co-occur in anyinterpretation according to the matrix.
Triviallyexclusive triples which share the same third termare also marked in the matrix.
It is very impor-tant to maintain the Ematr ix  because otherwisea syntactic graph generates more interpretationsthan actually result from the parsing grammar.Syntactic graphs and the exclusion matrix arecomputed from the chart (or forest) formed byan all-paths chart parser.
Grammar ules for theparse are in augmented phrase structure form, butare written to minimize their deviation from apure context-free form, and thus, limit both theconceptual and computational complexity of theanalysis system.
Details of the graph form, thegrammar, and the parser are given in (Seo andSimmons 1989).COMPUTING SEMANTICGRAPHS FROM SYNTACTICGRAPHS49An important test of the utility of syntacticgraphs is to demonstrate that they can be used di-rectly to compute corresponding semantic graphsthat represent the union of acceptable case analy-ses.
Nothing would be gained, however, if we hadto extract one reading at a time from the syntacticgraph, transform it, and so accumulate the unionof case analyses.
But if we can apply a set of rules,ubj(~s)s~S" ~~p(lO)01239t01112141516175051525354 550 1 2 3 9 1012141516175051\]525354:551 1 1 11 1 1 i1 11 11 11 11 1 1 11 1 1 1 1 1 1 11 11  1 1 1 1 1 11 1 1 1 1 11 i 1 1 .1 11 1 1 1 1 1i1 1 1 1 1 11 1 1 i 1 1 I 1 11 1 1 1 1 11 1 1 1 1 1 1 1 11 11 1 1 1 1 1 1 1 1!1 1 1 1Figure 3: Funct ional  Graph and Exclusion Matr ix  for "The monkey  lives in tropical jungles near rivers andstreams.
"direct ly to the syntact ic graph, mapping it into thesemantic graph, then using the graph can result ina signif icant economy of computat ion.We compute a semantic graph in a two-step pro-cess.
F irst ,  we transform the labeled dependencytr iples result ing from the parse into funct ional  no-tat ion,  using labels such as subject, object, etc.and transforming to the canonical  active voice.This results in a funct iona l  g raph  as shown inF igure 3.
Second, the funct ional  graph is trans-formed into the semantic  graph of F igure 5.
Dur-ing the second t ransformat ion,  f i ltering rules areappl ied to reduce the possible syntact ic interpre-tat ions to those that  are semant ical ly  plausible.COMPUTING FUNCTIONAL GRAPHSTo determine SUB, OBJ  and IOBJ  correctly,the process checks the types of verbs in a sentenceand its voice, active or passive.
In this process,a syntact ic tr ip le is t ransformed into a functionaltriple: for example,  ( snp  X Y)  is t ransformedinto ( sub j  X Y)  in an active sentence.However, some t ransformat ion rules map severalsyntact ic tr iples into one functional triple.
Forexample, in a passive sentence, if three triples,(vo ice  X pass ive) ,  (vpp  X by) ,  and (ppn  byY) ,  are in a syntact ic graph and they are not ex-clusive with each other, the process produces onefunct ional  tr iple ( sub j  X Y) .
Since preposit ionsare used as funct ional  relat ion names, two syn-tact ic tr iples for a preposi t ional  phrase are alsoreduced into one funct ional  triple.
For example, 50(vpp  l ives  in)  and (ppn  in  jung les )  are trans-formed into ( in  l ives  jung les ) .
These transfor-mat ions are represented in Prolog rules based ongeneral inference forms such as the following:( s type  X dec larat ive)  & (voice X passive)  &(vpp  X by)  & (ppn  by  Y) => (sub jec t  X Y)(vpp  X P)  ~ (ppn  P Y) &: not (vo lce  X pas-sive) => (P X Y).When the left side of a rule is satisfied by a setof tr iples from the graph, the exclusion matr ix  isconsulted to ensure that  those tr iples can all  co-occur with each other.This step of t ransformat ion is fair ly straight-toward and does not resolve any syntact ic ambigu-ities.
Therefore, the process must  careful ly trans-form the exclusion matr ix  of the syntact ic graphinto the exclusion matr ix  of the funct ional  graphso that  the transformed funct ional  graph has thesame interpretat ions as the syntact ic  graph has 4.Intuit ively, if a funct ional  tr iple, say F ,  is pro-duced from a syntact ic triple, say T, then Fmust be exclusive with any funct ional  tr iples pro-duced from the syntact ic tr iples which are exclu-sive with T. When more than one syntact ic triple,say T\[s are involved in producing one funct ionaltriple, say F1, the process marks the exclusion4At a late stage in our research we noticed that we couldhave written our grammar to result directly in syntactic-functional notation; but one consequence would be increas-ing the complexity of our grammar rules, requiring frequenttests and transformations, thus increasing conceptual ndcomputational complexities.N : the implausible triple which will be removed.The process starts by calling remove-al l -Dependent-arcs(\[N\]) .remove-al l-dependent-arcs(Arcs-to-be-removed)for all Arc in Arcs-to-be-removed dobegini\] Arc is not removed yetthenfind all arcs pointing to the same node as Arc: call them Alt-arcsfind arcs which are exclusive with every arc in Alt-arcs, call them Dependent-arcsremove Arcremove entry of Arc from the exclusion matrixremove-al l -Dependent-arcs(Dependent-arcs)endFigure 4: Algorithm for Finding Dependent Relationsmatr ix so that F1 can be exclusive with all func-tional triples which are produced from the syntac-tic triples which are exclusive with any of T/~s.The syntactic graph in Figure 2 has five possiblesyntactic interpretations and all and only the fivesyntactic-functional interpretations must be con-tained in the transformed functional graph withthe new exclusion matr ix in Figure 3.
Notice that,in the functional graph, there is no single, func-tional triple corresponding to the syntactic triples,(~)-(8), (11) and (13).
Those syntactic triples arenot used in one-to-one transformation of syntac-tic triples, but are involved in many-to-one trans-formations to produce the new functional triples,(50)-(55), in the functional graph.COMPUTING SEMANTIC  GRAPHSOnce a functional graph is produced, it is trans-formed into a semantic graph.
This transforma-tion consists of the following two subtasks: givena functional triple (i.e., an are in Figure 3), theprocess must be able to (1) check if there is a se-mantical ly meaningful relation for the triple (i.e.,co-occurrence constraints test), (2) if the triple issemantically implausible, find and remove all func-tional triples which are dependent on that triple.The co-occurrence constraints test is a matterof deciding whether a given functional triple is se-mantically plausible or not.
5 The process uses atype hierarchy for real world concepts and rulesthat state possible relations among them.
Theserelations are in a case notation such as agt  foragent, ae for affected-entity, etc.
For example, the5 Eventually we will incorporate more sophisticated testsas suggested by Hirst(1987) and others, but our currentemphasis i on the procedures for transforming graphs.51subject(I) arc between lives and monkey numbered(1) in Figure 3 is semantically plausible since an-ima l  can be an agent of l ive if the an ima l  is asubj of the live.
However, the subject arc betweenand and monkey numbered (15) in Figure 3 is se-mantically implausible, because the relation con-jvp connects and and streams, and monkey can notbe a subject of the verb streams.
In our knowledgebase, the legitimate agent of the verb streams is af low- th ing  such as a river.When a given arc is determined to be seman-tically plausible, a proper case relation name isassigned to make an arc in the semantic graph.For example, a case relation agt is found in ourknowledge base between monkey and lives underthe constraint subject.If  a triple is determined to be semantically im-plausible, then the process removes the triple.Let us explain the following definition before dis-cussing an interesting consequence.Def in i t ion  1 A triple, say T1, is dependenton  another triple, say T2, if every interpretationwhich uses 7"1 always uses T2.Then, when a triple is removed, if there are anytriples which are dependent on the removed triple,those triples must also be removed.
Notice thatthe dependent  on  relation between triples istransitive.Before presenting the algorithm to find depen-dent triples of a triple, we need to discuss the fol-lowing property of a functional graph.P roper ty  1 Each semantic interpretation de-rived from a functional graph must contain everynode in each position once and only once.
(2attr(S) ~rlesnear(51)0123910125051525354551 1 1 11 1 1 1 11 11  I1 11 1 1 1 1 11 1 1 1 1i 11\ ]1  1 1 11 !1 1 1Figure 5: Semantic Graph and Exclusion Matrix for "The monkey lives in tropical jungles near rivers andstreams.
"Here the position means the position of a wordin a sentence.
This property ensures that all wordsin a sentence must be used in a semantic interpre-tation once and only once.The next property follows from Property 1.P roper ty  2 Ira triple is determined to be seman-tically implausible, there must be at least one triplewhich shares the same modifier-word.
Otherwise,the sentence is syntactically or semantically ill-formed.Lemma 1 Assume that there are n triples, say7"1 .
.
.
.
, Tn, sharing a node, say N, as a modifier-word (i.e.
third term) in a functional graph.
I fthere is a triple, say T, which is exclusive withT1, .
.
.
,  T/-1, Ti+ l .
.
.
.
.
Tn and is not exclusive withT~, T is dependent on Ti.This lemma is true because T cannot co-occurwith any other triples which have the node N as amodifier-word except T / in  any interpretation.
ByProperty 1, any interpretation which uses T mustuse one triple which has N as a modifier-word.Since there is only one triple, 7~ that can co-occurwith T, any interpretations which use T use T/.\[3Using the above lemma, we can find tripleswhich are dependent on a semantically implausibletriple directly from the functional graph and thecorresponding exclusion matrix.
An algorithm forfinding a set of dependent relations is presented inFigure 4.For example, in the functional graph in Fig-ure 3, since monkey cannot be an agt  of streams,the triple (15.)
is determined to be semantically52implausible.
Since there is only one triple, (1),which shares the same modifier-word, monkey, theprocess finds triples which are exclusive with (1).Those are triples numbered (14), (15), (16), and(17).
Since these triples are dependent on (16),these triples must also be removed when (16) is re-moved.
Similarly, when the process removes (14),it must find and remove all dependent riples of(14).
In this way, the process cascades the removeoperation by recursively determining the depen-dent triples of an implausible triple.Notice that when one triple is removed, itremoves possibly multiple ambiguous syntacticinterpretations--two interpretations are removedby removing the triple (16) in this example, butfor the sentence, It is transmitted by eating shell-fish such as oysters living in infected waters, orby drinking infected water, or by dirt from soiledfingers, 189 out of 378 ambiguous yntactic inter-pretations are removed when the semantic relation( rood water  d r ink ing)  is rejected, e This savesmany operations which must be done in other ap-proaches which check syntactic trees one by one tomake a semantic structure.
The resulting seman-tic graph and its exclusion matrix derived fromthe functional graph in Figure 3 have three seman-tic interpretations and are illustrated in Figure 5.This is a reduction from five syntactic interpre-tations as a result of filtering out the possibility,(agt  s t reams monkey) .There is one arc in Figure 5, labeled near(51),that proved to be of considerable interest to us.6In "infec'~ed r ink ing  water" ,  ( rood  water  d r ink ing)is p laus ib le  but  not  in  "dr ink ing  in fec ted  water" .If we attempt o generate a complete sentence us-ing that arc, we discover that we can only pro-duce, "The monkey lives in tropical jungles nearrivers."
There is no way that that a generationwith that arc can include "and streams" and nosentence with "and streams" can use that arc.The arc, near(51), shows a failure in our abilityto rewrite the exclusion matrix correctly when weremoved the interpretation "the monkey lives ...and streams."
There was a possibility of the sen-tence, "the monkey lives in jungles, (lives) nearrivers, and (he) streams."
The redundant arc wasnot dependent on subj(16) (in Figure 3) and thusremains in the semantic graph.
The immediateconsequence is simply a redundant arc that willnot do harm; the implication is that the exclusionmatrix cannot filter certain arcs that are indirectlydependent on certain forbidden interpretations.D ISCUSSION AND CONCLUSIONThe utility of the resultant semantic graph canbe appreciated by close study of Figure 5.
Thegraph directly answers the following questions,(assuming they have been parsed into case nota-tion):?
Where does the monkey live?1.
in tropical jungles near rivers andstreams,2.
near rivers and streams,3.
in tropical jungles near rivers,4.
in tropical jungles.?
Does the monkey live in jungles?
Yes, byagt(1) and in(53) which are not exclusive witheach other.?
Does the monkey live in rivers?
No, becausein(52) is exclusive with conj(lO), and in(SS)is pointing to jungles not rivers.?
Does the monkey live near jungles?
No, be-cause near(50) and conj(12) are exclusive, sono path from live through near(50) can gothrough eonj(12) to reach jungle, and theother path from live through near(51) goesto rivers which has no exiting path to jungle.Thus, by matching paths from the questionthrough the graph, and ensuring that no arc inthe answering path is forbidden to co-occur withany other, questions can be answered irectly fromthe graph.In conclusion, we have presented a computa-tional method for directly computing semanticgraphs from syntactic graphs.
The most crucialand economical aspect of the computation is the53capability of applying tests and transformationsdirectly to the graph rather than applying therules to one interpretation, then another, and an-other, etc.
When a semantic filtering rule rejectsone implausible relation, then pruning all depen-dent relations of that relation directly from thesyntactic graph has the effect of excluding sub-stantially many syntactic interpretations from fur-ther consideration.
An algorithm for finding suchdependent relations is presented.In thispaper,  we did not consider the multi-ple word senses which may cause more seman-tic ambiguities than we have illustrated.
Incor-porating and minimizing word sense ambiguitiesis part of our continuing research.
We are alsocurrently investigating how to integrate semanticgraphs of previous entences with the current one,to maintain a continuous context whose ambigu-ity is successively reduced by additional incomingsentences.References\[1\] Alfred V. Aho, and Jeffrey D. Ullman, TheTheory of Parsing, Translation and Compil-ing, Vol.
1, Prentice-Hall, Englewood Cliffs,NJ, 1972.\[2\] G. Edward Barton and Robert C. Berwick,"Parsing with Assertion Sets and Informa-tion Monotonicity," Proceedings of IJCAI-85:769-771, 1985.\[3\] Jay Early, "An Efficient Context-free Pars-ing algorithm," Communications ofthe A CM,Vol.
13, No.
2: 94-102, 1970.\[4\] Graeme Hirst, Semantic Interpretation andthe Resolution of Ambiguity, Cambridge Uni-versity Press, Cambridge, 1987.\[5\] Mitchell P. Marcus, A Theory of Syntac-tic Recognition for Natural Language, MITPress, Cambridge, 1980.\[6\] Elain Rich, J im Barnett, Kent Wittenburgand David Wroblewski, "Ambiguity Procras-tination," Proceedings of AAAL87: 571-576,1987.\[7\] Jungyun Seo and Robert F. Simmons, "Syn-tactic Graphs: A Representation for theUnion of All Ambiguous Parse Trees," Com-putational Linguistics, Vol.
15, No.
1: 19-32,1989.\[8\] Masaru Tomita, Efficient Parsing for Natu-ral Language, Kluwer Academic Publishers,Boston, 1985.
