A LEXICAL DATABASE TOOL FORQUANTITATIVE PHONOLOGICAL RESEARCHSteven BirdThe University of EdinburghCentre for Cognitive ScienceEdinburgh EH8 9LW, UKAbstractSIL CameroonB.P.
1299Yaound6, CameroonSteven.
B i rd ied .
ac.
ukINTRODUCTIONA lexical database tool tailored for phonological res-earch is described.
Database fields include transcrip-tions, glosses and hyperlinks to speech files.
Databasequeries are expressed using HTML forms, and thesepermit regular expression search on any combinationof fields.
Regular expressions are passed directly toa Perl CGI program, enabling the full flexibility ofPerl extended regular iexpressions.
The regular expres-sion notation is extended to better support phonologi-cal searches, uch as search for minimal pairs.
Searchresults are presented fin the form of HTML or I~TEXtables, where each call is either a number (represent-ing frequency) or a designated subset of the fields.Tables have up to four dimensions, with an elegantsystem for specifying iwhich fragments of which fieldsshould be used for tile row/column labels?
The tool\[ ?
?offers several advantages over traditional methods of?
?
I ?
analysts: (i) it suppo~s a quantitative method of doingphonological researcfi; (ii) it gives universal accessto the same set of informants; (iii) it enables otherrresearchers to hear the original speech data withouthaving to rely on published transcriptions; (iv) it makesthe full power of regular expression search available,and search results are full multimedia documents; and(v) it enables the earl), refutation of false hypotheses,shortening the analysis-hypothesis-test loop.
A life-size application to an African tone language (Dschang)is used for exemplificgtion throughout the paper.
Thedatabase contains 2200 records, each with approxi-mately 15 fields.
Running on a PC laptop with a stand-alone web server, the 'Dschang HyperLexicon' hasalready been used ex!ensively in phonological field-work and analysis in Cameroon.Initial stages of phonological analysis typically focuson words in isolation, as the phonemic inventory andsyllable canon are established.
Data is stored as alexicon, where each word is entered as a transcriptionaccompanied by at least a gloss (so the word can beelicited again) and the major syntactic ategory.
Inmanaging a lexicon, the working phonologist has avariety of computational needs: storage and retrieval;searching and sorting; tabular eports on distributionsand contrasts; updates to database and to reports asdistinctions are discovered or discarded.
In the pastthe analyst had to do all this computation by handusing index cards kept in shoeboxes.
But now many ofthese particular tasks are automated by software suchas the SIL programs Shoebox (Buseman et al, 1996)and Findphone (Bevan, 1995), 1 or using commercialdatabase packages.Of course, many tasks other than those listed abovehave already benefitted from (partial) automation.
2 Addi-tionally, it has been shown how a computational inher-itance model can be used for structuring lexical infor-mation relevant for phonology (Reinhard & Gibbon,1991).
And there is a body of work on the use of finitestate devices - closely related to regular expressions- for modelling phonological phenomena (Kaplan &Kay, 1994) and for speech processing (cf.
Kornai's1Unlike regular database management systems, these includeinternational nd phonetic haracter sets and user-definedkeystrokes for entering them, and a utility to dump adatabase intoan RTF file in a user-defined lexicon format for use in desktoppublishing.2For example, see (Ellison, 1992; Lowe & Mazaudon, 1994;Coleman, Dirksen, Hussain & Waals, 1996).~3k id  1612\v\w mbh~\as #m.bhU#\ r t  #bhU#\ t LDH\sd mbh~\pg *bd+ ~,\p  n\p l  me-\ c l  9/6ken dog\ f r  chienidentifier (used for hyperlinks)validation statusorthographic formascii transcriptiontranscription of word roottone transcriptionsouthern dialect formProto-Grassfields formpart of speechplural prefixnoun class (singular/plural)english glossfrench gloss (used withinformants)Figure 1: Format of Database Recordswork with HMMs (Kornai, 1995)).
However, compu-tational phonology is yet to provide tools for manipu-lating lexical and speech data using the full expressivepower of the regular expression otation in a way thatsupports pure phonological research.This paper describes a lexical database system tai-lored to the needs of phonological research and exem-plified for Dschang, a language of Cameroon.
Anonline lexicon (originally published as Bird & Tadad-jeu, 1997), contains records with the format in Fig-ure 1.
Only the most important fields are shown.The user interface is provided by a Web browser.
Asuite of Perl programs (Wall & Schwartz, 1991) gener-ates the search form inHTML and processes the query.
Regular expressionsin the query are passed directly to Perl, enabling thefull flexibility of Perl extended regular expressions.
Afurther extension to the notation allows searches forminimal sets, groups of words which are minimally dif-ferent according to some criterion.
Hits are structuredinto a tabular display and returned as an HTML or IrTEXdocument.In the next section, a sequence of example queriesis given to illustrate the format of queries and results,and to demonstrate how a user might interact with thesystem.
A range of more powerful queries are thendemonstrated, along with an explanation of the nota-tions for minimal pairs and projections.
Next, someimplementation details are given, and the componentmodules are described in detail.
The last two sectionsdescribe planned future work and present he conclu-sions.display:root:loanwords:suff ixed:phrases:t ime- l imit :vars:EXAMPLEThis section shows how the system can be used to sup-port phonological nalysis.
The language data comesfrom Dschang, aGrassfields Bantu language of Camer-oon, and is structured into a lexicon consisting of 2200records.
Suppose we wished to learn about phonotac-tic constraints in the syllable rhyme.
The followingsequence of queries were not artificially constructed,but were issued in an actual session with the systemin the field, running the Web server in a stand-alonemode.
The first query is displayed below.
3Search Attributes:count*(\[$V\]) (\[$C\]) #exc ludeinc ludeexc lude2 minutes$B = "\.#-"; # boundar ies$S = "pbtdkgcj ' " ;  # stops$F = "zsvfZS"; # f r i ca t ives$O = $S.$F; # obst ruents$N = "mnN"; # nasa lsSG = "wy"; # g l ides$C = $O.$N.$G.
"h i " ;  # cons$V = " ieaouEOU@"; # vowelsThe main attribute of interest is the root  attribute.
4The .
* expression stands for a sequence of zero ormore segments.
The expressions $V and $C are vari-ables defined in the vats  section of the query form.These are strings, but when surrounded with brackets,as in \[$V\] and \[$C\], they function as wild cardswhich match a single element from the string.
The# character is a boundary symbol marking the end ofthe root.
Observe that the root  attribute containstwo parenthesised subexpressions.
These will be calledparameters and have a special role in structuring thesearch output.
This is best demonstrated by way of anexample.
Consider the table below, which is the resultaThe display is only a crude approximation to the HTML form.Note that the query form comes with the variables already filled inso that it is not necessary for the user to supply them, although theycan be edited.
The transcription symbols used in the system havethe following interpretation: U=u, @=a, E=e, O=3, N=ij, '=?.4|n the following discussion, 'attribute' refers to a line in thequery form while 'field' refers to part of a database r cord.~4of the above query.
In: this table, the row labels are allthe segments which matched the variable $V, while thecolumn labels are just the segments that matched $C.Search Results:Pi 5U 9u 14@OE 51a 30O 15t k ' m N10 24 9 3238 1 960 10 3915 41 7531 12,141 46 61 761 12 36 49There are sufficient gaps in the table to make us wonderif all the segments are actually phonemes.
For example,consider o and u, given that they are phonetically verysimilar (\[co\] and \[u\] respectively).
We can easily setup o as an allophone Of u before k. Only the case ofglottal stop needs to be considered.
So we revise theform, replacing $V with just the vowels in question,and replacing the $C df the coda with apostrophe (forglottal stop).
We add a term for the syllable onset andresubmit he query.
See Figure 2.
This time, severalattributes are omitted from the display for brevity.We can now conclude that o and u are in comple-mentary distribution, except for the five words corre-sponding to pfand v onsets.
But what are these words?We revise the form again, further estricting the searchstring as follows:Search Attributes:display: speech word glossroot:, *(Pflv) \[ou\]'#The display parametelr is set to speech word glossallowing us to see (arid hear) the individual lexicalitems.
The results are shown below.Search Results:pf \ [ \ ]\[\]v \ [ \ ]\[\]\[\]lepfo' mortarmpfu '  blood pactrrivo' space in front of bedaVu' remainderlevu't~ kitchen woodpileThe cells of the output ~table now contain fragments ofthe lexical entries.
The first part is an icon which, whenclicked, plays the speech file.
The second part is a gifof the orthographic form of the word.
The third partis the English gloss.
Note that the above nouns havedifferent prefixes (e.g.
le-, m-, a-).
These are nounclass prefixes and are not part of the root  field.
Ifwe had wanted to take prefixes into consideration thenthe as  attribute, containing atranscription of the wholeword, could have been used instead.Listening to the speech files it was found that thesyllables pro' and pfu' sounded exactly the same, asdid vo' and vu'.
The whole process up to this pointhad taken less than five minutes.
After some quickinformant work to recheck the data and hear the native-speaker intuitions, it was clear that the distinction bet-ween o and u in closed syllables was subphonemic.MORE POWERFUL QUERIESConstraining one field and displaying anotherIn some situations we are not interested in seeing thefield which was constrained, but another one instead.The next query displays the tone field for monosyllabicroots, classed into open and closed syllables.
Althoughthe root  attribute is used in the query, the root  fieldis not actually displayed.
(This query makes use of aprojection function which maps all consonants onto Cand all vowels onto V, as will be explained later.
)Search Attributes:display : toneroot: #C+V(C?
)# ($CV-proj)The C+ expression denotes a sequence of one or moreconsonants, while C ?
denotes an optienal coda conso-nant.
By making C?
into a parameter (using paren-theses) the search results will be presented in a twocolumn table, one column for open syllables (with anull label) and one for closed syllables (labelled c).A minor change to the root  attribute, enlarging thescope of the parameter (\#c+ (vc?
)\#), will producethe more satisfactory column labels V and VC.Searching for near-minimal setsFinding good minimal sets is a heuristic process.
Noattempt has been made to encode heuristics into thesystem.
Rather, the aim has been to permit flexibleinteraction between user and system as a collectionof minimal sets is refined.
To facilitate this process,the regular expression otation is extended slightly.Search Attributes:Search Results:U0display: countroot: *(\[$C\]+) (\[ou\])'#axes: flipw p pf b t ts d c j k g f v s z m n 13 1.6 8 1 1 6 1 6 4 5 3 5 2 4 1 1 51 6 1 1 3Figure 2: Query to Probe the Phonemic Status of the O/U ContrastRecall the way that parameters (parenthesised subex-pressions) allowed output o be structured.
One of theparameters will be said to be in focus, Syntactically,this is expressed using braces instead of parentheses.Semantically, such a parameter becomes the focus of asearch for minimal sets.Typically, this parameter will contain a list of seg-ments, such as { \[ ou \] }, or an optional segment whosepresence is to be contrasted with its absence, such as(h?
}.In order for a minimal set to be found, the parameterin focus must have more than one possible instantia-tion, while the other parameters emain unchanged.
Tosee how this works, consider the following example.Suppose we wish to identify the minimal pairs for o /udiscussed above, but without having to specify glottalstop in the query, as shown in Figure 3.
Note this exam-ple of a 3D table.If this was not enough minimal pairs, we could relaxthe restrictions on the context.
For example, if we donot wish to insist on the following consonant beingidentical across minimal pairs, we can remove the sec-ond set of parentheses thus: .
* ( \[$c\] +) { \[ou\] ~\[$c\] #.This now gives minimal pairs like legOk work and13gu' year.
Observe that the consonant preceding theo /u  vowel is fixed across the minimal pair, since thiswas still parenthesised in the query string.Usually, it is best for minimal pairs to have similarsyntactic distribution.
We can add a restriction that allminimal pairs must be drawn from the same syntacticcategory by making the whole par t  attribute into aparameter as follows.Search Attributes:display:root:Search Results:pfvword gloss.
*(\[$c\]+){\[ou\]}(\[$c\])#lepfo' mortarmpfu' blood pactmvo' space in front of bedavu' remainderlevu'tf kitchen woodpileFigure 3: Minimal Sets for O/USearch Attributes:display: toneroot: *(\[$Cl+){\[~ul}\[$c\]#part: (.
*)Making the part attribute into a parameter adds anextra dimension to the table of results.
We now onlysee an o /u  minimal pair if the other parameters agree.In other words, all minimal pairs that are reportedwill contain the same consonant cluster before the o /uvowel and will be from the same syntactic ategory.Variables across attributesThere are occasions where we need to have the samevariable appearing in different attributes.
For example,suppose we wanted to Check where the southern dialect?
.
.
Iand the principal dialect have identical vowels: 5Search Attributes::disp laY : root s_dialectro~t: .*(3\[$V\]+).
*s_dialect: .*$3.
*This query makes use of another syntactic extensionto regular expressions i An arbitrary one-digit numberwhich appears immediately inside a parameter allowsthe parameter to be referred to elsewhere.
This meansthat whichever sequence of vowels matches \[ $V\] +in the root field must also appear somewhere in thes_dialect field.Negative restrictionsThe simplest kind of qegative restriction is built usingthe set complement operator (the caret).
However thisonly works for single character complements.
A muchmore powerful negation is available with the ?
!
zero-width negative lookahead assertion, available in Perl 5,which I will now discu~ss.The next example uses the tone attribute.
Dschang isa tone language, and the records in the lexicon includea field containing a toni melody.
Tone melodies consistof the characters H (high), L (low), D (downstep) andF (fall)?
A single tone has the form D?
\[HL\] F?, i.e.
anoptional downstep, follbwed by H or L, followed by anoptional fall.
The next 6xample finds all entries tartingwith a sequence of unlike tones.Search Attributes:root: .
*(1\[ST\] ) (?
!$i) \[ST\] .
*vars: $T = D?\[HL\]F?The (1 \[ST\] ) expression matches any tone and setsthe $1 variable to the tone which was matched.
The( ?
!
$1 ) expression requires that whatever follows thefirst tone is different, and the final \[ST\] insists thatthis same following material is a tone (rather than beingempty, for example).
65Roots are virtually all monosyllabic, so there will usually be aunique vowel sequence for the \[ $V\] + in the regular expression tomatch with.6Care must be taken to ensure that the alphabetic encodings ofdistinct ones are sufficiently different from each other, so that oneis not an initial substfing of finother.ProjectionsI earlier introduced the notion of projections.
In fact,the system allows the user to apply an arbitrary manip-ulation to any attribute before the matching is carriedout.
Here is the query again, this time with the $?v-proj variable filled out.Search Attributes:display: toneroot: #C+V(C?)
# ($CV-proj)vars: $CV-proj = {tr/$C/C/; t r /$V/V/ ;}This causes the Perl t r  (transliterate) function to beapplied to the root  attribute before the #c+v (C?)
#regular expression is matched on this field.Projections can also be used to simulate second ordervariables, such as required for place of articulation.Suppose that the language has three places of articu-lation: L (labial), A (alveolar) and V (velar).
We areinterested in finding any unassimilated sequences inthedata (i.e, adjacent consonants with different places ofarticulation).
The following query does just this.
Priorto matching, the segments which have a place of artic-ulation value are projected to that value, again usingtr.
The query expression looks for a sequence of anypair $PSP, where $p is a second order variable rangingover places of articulation.Search Attributes:display: wordroot: .
*(55P) (?
!$5) ($P).
* ($P-proj)vars: $P -pro j=t r /pbmtdnkgN/LLLAAAVVV/ ;$P = \[LAV\] ;Observe that the second $P must b~ different fromthe first, because of the zero-width negative lookaheadassertion (?
!$5) .
This states that immediately tothe right of this position one does not find an instanceof $ 5, where this variable is the place of articulationfound in the first position.
The output of the query is a3 x 3 table showing all words that contain unassimilatedconsonant sequences?SYSTEM OVERVIEWLexicon compilerThe base lexicon is in Shoebox format, in which thefields are not required to be in a fixed order.
To saveon runtime processing, a preprocessing step is appliedto each field?
For example, the contents of the \wfield, comprising characters from the Cameroon char-acter set, are replaced by a pointer a graphics file forthe word (i.e.
a URL referencing a gif).
7 Each recordis processed into a single line, where fields occur in acanonical order and a field separator is inserted, andthe compiled lexicon is stored as a DBM file for rapidloading.The query stringThe search attributes in the query form can containarbitrary Peri V5 regular expressions, along with someextensions introduced n above.
A CGI program con-structs aquery string based on the submitted form data.The query string is padded with wild cards for thosefields which were not restricted in the query form.The dimensionality of the output and the axis labelsare determined by the appearance of 'parameters' in thesearch attributes.
These parenthesised subexpressionsare copied directly into the query string.
So, for exam-ple, the first query above contained the search expres-sion.
* ( \[ Sv\] ) ( \[ $c \] ) # applied to the root  field.
Thisfield occupies fifth position in the compiled version ofa record, and so the search string is as follows.
Thevariable $e matches any sequence of characters notcontaining the field separator.$search = /^$e;$e;$e;$e;.
*(\[$V\]) (\[$C\])#;Se; Se; $e; $e; Se; Se; $e; $eS/The search loopSearch involves a linear pass over the whole lexicon%LEX.
8 The parameters contained in $search  aretied to the variables $1 - $4.
These are stored in fourassociative arrays $dira l  - $dim4 to be used later asaxis labels.foreach Sentry (keys %LEX) {if ($LEX{$entry} =~ /$search/) {Sdiml{$1} ++ ;Sdim2 {$2 } ++ ;$dim3 {$3 } ++;Sdim4 {$4} ++ ;Shits{"$1;$2;$3;$4"} .= ";".Sentry;})7These gifs were generated using L~I'EX along with the utilitiesps tog i f  and g i f too l .8 Inverting on individual fields was avoided because of the run-time overheads and the fact that this prevents variable instantiationacross fields.Finally, a pointer to the entry is stored in the 4Darray Sh i ts  (appended to any existing hits in thatcell.)
Here we see that the structuring of the outputtable using parameters i  virtually transparent, withPerl itself doing the necessary housekeeping.As an example, suppose that the following lexicalentry is being considered at the top of the above loop:Sentry =0107SLEX{ Sentry\] =0107; ;<img src="akup.gif">;#a.kup#;#kup#;LL; ;*k'ub';n;7/6,8;skin, bark;peau,\ 'ecorce;By matching this against he query string given in ourfirst example we endup matching.
* ( \[$V\] ) ( \[$C\] ) #with #kup#.
This results in $1=u and $2=p.
Theentries $d iml{u} and $dira2 {p} are incremented,recording these values for later use in the $V and$C axes respectively.
Finally Sh i t s  ( "u ;p ;  ; ") isupdated with the index 0107.The display loopThis module cycles through the axis labels that werestored in 9d iml  - $dira4 and combines them to accessthe Sh i ts  array.
At each level of nesting, code isgenerated for the HTML or IbTEX table output.
At theinnermost level, the fields selected by the user in thed i sp lay  attribute are used to build the current cell.FUTURE WORKA number of extensions to the system are planned.Since Dschang is a tone language, it would be partic-ularly valuable to have access to the 15itch contours ofeach word.
These will eventually be displayed as smallgifs, attached to the lexical entries.Another extension would be to permit updates to thelexicon through a forms interface.
A special instanceof the search form could be used to validate existingand new entries, alerting the user to any data whichcontradicts current hypotheses.The regular expression otation is sometimes cum-bersome and opaque.
It would be useful to have ahigher level language as well.
One possibility is thenotation of autosegmental phonology, which can becompiled into finite-state automata (Bird & Ellison,1994).
The graphics capabilities for this could be pro-vided on the client side by a Java program.3~A final extension, dependent on developments withHTML itself, would be to provide better support for spe-cial characters and user-definable k ystrokes for access-ing them.cONCLUSIONThis paper has presen!ed a hypertext lexicon tailored tothe practical needs of the phonologist working on largescale data problems.
The user accesses the lexicon viaa forms interface provided by HTML and a browser.
ACGI program processes the query.
The user can refine aquery during the course of several interactions with thesystem, finally switching the output to ~TEEX format fordirect inclusion of the results in a research paper.
Anextension to the regular expression otation was usedfor searching for minimal pairs.
Parenthesised subex-pressions are interpreted as parameters which controlthe structuring of search results.
These extensions,though intuitively simple, make a lot of expressivepower available to the~user.
The current prototype sys-tem has been used hehvily for substantive phonologi-cal fieldwork and analysis on the field, documented in(Bird, 1997).
There are a number of ensuing benefits ofthis approach for phoriological research: (i) it supportsa quantitative method rof doing phonological research;(ii) it gives universal access to the same set of infor-mants; (iii) it enables other esearchers tohear the orig-inal speech data with6ut having to rely on publishedtranscriptions; (iv) it imakes the full power of regu-lar expression search available, and search results arefull multimedia documents; and (v) it enables the early irefutation of false hypotheses, shortening the analysis-hypothesis-test loop.ACKNOWLEDGEMENTSIThis research is funde~l by the the UK Economic andSocial Research Council, under grant R00023 5540A Computational Model of Tone and its Relationshipto Speech?
My activilies in Cameroon were coveredby a research permit with the Ministry of Scientificand Technical Research of the Cameroon government,number 047/MINREST/DOO/D20.
I am grateful tobDafydd Gibbon for helpful comments on an earlier ver-sion of this paper?ReferencesBevan, D. (1995).
FindPhone User's Guide: Phono-logical Analysis for the Field Linguist, Version6.0.
Waxhaw NC: SIL.Bird, S. (1997).
Dschang Syllable Structure.
In H. vander Hulst & N. Ritter (Eds.
), The Syllable: Viewsand Facts.
Oxford University Press.
To appear.Bird, S. & Ellison, T. M. (1994).
One level phonology:autosegmental representations and rules as finiteautomata.
Computational Linguistics, 20, 55-90.Bird, S. & Tadadjeu, M. (1997).
Petit Diction-naire Ydmba-Frangais (Dschang-French Dictio-nary).
Cameroon: ANACLAC.Buseman, A., Buseman, K., & Early, R. (1996)?
TheLinguist's Shoebox: Integrated Data Managementand Analysis for the Field Linguist.
Waxhaw NC:SIL.Coleman, J., Dirksen, A., Hussain, S., & Waals, J.(1996)?
Multilingual phonological nalysis andspeech synthesis.
In Computational Phonologyin Speech Technology: Proceedings of the Sec-ond Meeting of the ACL Special Interest Groupin Computational Phonology, (pp.
67-72).
Asso-ciation for Computational Linguistics.Ellison, T. M. (1992).
Machine Learning of Phonolog-ical Structure.
PhD thesis, University of WesternAustralia?Kaplan, R. M. & Kay, M. (1994).
Regular models ofphonological rule systems.
Computational Lin-guistics, 20, 331-78.Kornai, A.
(1995).
Formal Phonology.
New York:Garland Publishing.Lowe, J.
B.
& Mazaudon, M. (1994).
The Reconstruc-tion Engine: a computer implementation f thecomparative method.
Computational Linguistics,20, 381-417.Reinhard, S. & Gibbon, D. (1991).
Prosodic inheri-tance and morphological generalizations.
In Pro-ceedings of the Fifth Conference of the Euro-pean Chapter of the Association for Computa-tional Linguistics, (pp.
131-6).
Association forComputational Linguistics.Wall, L. & Schwartz, R. L. (1991).
Programming Perl.O'Reilly and Associates.
