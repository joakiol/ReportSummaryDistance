Proceedings of the ACL 2014 Workshop on Semantic Parsing, pages 61?65,Baltimore, Maryland USA, June 26 2014.c?2014 Association for Computational LinguisticsOn maximum spanning DAG algorithms for semantic DAG parsingNatalie SchluterDepartment of Computer ScienceSchool of Technology, Malm?o UniversityMalm?o, Swedennatalie.schluter@mah.seAbstractConsideration of the decoding problemin semantic parsing as finding a maxi-mum spanning DAG of a weighted di-rected graph carries many complexitiesthat haven?t been fully addressed in the lit-erature to date, among which are its ac-tual appropriateness for the decoding taskin semantic parsing, not to mention an ex-plicit proof of its complexity (and its ap-proximability).
In this paper, we con-sider the objective function for the maxi-mum spanning DAG problem, and what itmeans in terms of decoding for semanticparsing.
In doing so, we give anecdotalevidence against its use in this task.
In ad-dition, we consider the only graph-basedmaximum spanning DAG approximationalgorithm presented in the literature (with-out any approximation guarantee) to dateand finally provide an approximation guar-antee for it, showing that it is an O(1n) fac-tor approximation algorithm, where n isthe size of the digraph?s vertex set.1 IntroductionRecent research in semantic parsing has moved at-tention towards recovering labeled digraph repre-sentations of the semantic relations correspondingto the linguistic agendas across a number of theo-ries where simple tree representations are claimednot to be expressive enough to capture senten-tial meaning.
As digraph structures presented inpredominant semantic graph databases are mainlyacyclic, the semantic parsing problem has some-times become associated with a maximum span-ning directed acyclic graph (MSDAG) decodingproblem (McDonald and Pereira, 2006; Sagae andTsujii, 2008; Titov et al., 2009), in analogy andperhaps as a generalisation of the maximum span-ning tree decoding problem for syntactic depen-dency parsing.The appropriateness of finding the MSDAG indecoding for semantic parsing has, however, neverbeen fully motivated, and in fact carries morecomplexities than that of maximum spanning tree(MST) decoding for syntactic parsing.
In this pa-per, we discuss the appropriateness of MSDAGdecoding in semantic parsing, considering the pos-sible objective functions and whether they matchour linguistic goals for the decoding process.
Ourview is that they probably do not, in general.In addition to the problem of not being suffi-ciently synchronised with our linguistic intuitionsfor the semantic parsing decoding problem, theMSDAG problem itself carries with it its owncomplexities, which are still in the process ofbecoming more understood in the algorithms re-search community.
McDonald and Pereira (2006)claim that the MSDAG problem is NP-hard, cit-ing (Heckerman et al., 1995); however, there isno MSDAG problem in this latter work, and noexplicit reduction to any problem presented in(Heckerman et al., 1995) has been published todate.
We point out that Schluter (submitted) ex-plicitly provides a linear reduction to MSDAGfrom the problem of finding a minimum weighteddirected multicut (IDMC), showing MSDAG?sNP-hardness; this reduction also yields a resulton the approximability of MSDAG, namely thatit is APX-hard.
We show in this paper that the ap-proximation algorithm presented without any ap-proximation guarantee in (McDonald and Pereira,2006) is, in fact, a O(1n) factor approximation al-gorithm, where n is the size of the graphs vertexset.
This is not particularly surprising given theproblem?s APX-hardness.Following some preliminaries on weighted di-graphs (Section 2), we make the MSDAG prob-lem precise through a discussion of the objectivefunction in question and briefly question this ob-61jective function with respect to decoding in se-mantic parsing (Section 3).
Finally, we discuss theonly other graph-based (approximation) algorithmin the literature and prove its approximation guar-antee (Section 4), followed by some brief conclu-sions (Section 5).2 PreliminariesA directed graph (or digraph) G is a pair (V,E)where V is the set of nodes and E is the set of(directed) edges.
E ?
V ?
V is a set of orderedpairs of vertices.
For u, v ?
V , if (u, v) ?
E, thenwe say there is an ?edge from u to v?.
If there isany confusion over the digraph we are referring to,then we disambiguate by using the notation G :=(E(G), V (G)).If all edges e ?
E(G) are associated with a realnumber, a weight w : E(G)?
R, then we call thedigraph weighted.
In this paper, all digraphs areweighted and weights are positive.For a subset of edges U of a weighted di-graph, we set w(U) :=?e?Uw(e).
Simi-larly, for a weighted digraph G, we set w(G) :=?e?E(G)w(e).We denote the size of a set S, by |S|.For G = (V,E), let u1, .
.
.
, uk?
V and(ui, ui+1) ?
E, for each i ?
[k ?
1], then wesay that there is path (also directed path, or di-path) of length (k?
1) from u1to ukin G. If also(uk, u1) ?
E, then we say that u1, u2, .
.
.
, uk, u1is a cycle of length k in G.A directed acyclic graph (DAG) is a directedgraph with no cycles.
There is a special kind ofDAG, which has a special node called a root withno incoming edges and in which there is a uniquepath from the root to all nodes; this is called a tree.Finally, a tournament is a digraph in whichall pairs of vertices are connected by exactly oneedge.
If, in addition, the edges are weighted, thenwe call the digraph a weighted tournament.3 Objective functions for finding anMSDAG of a digraphWe first make precise the objective function forthe MSDAG problem, by considering two sepa-rate objective functions, one additive and one mul-tiplicative, over the weights of edges in the optimalsolution:D?
:= argmaxD a spanning DAG of G?e?E(D)w(e), and (1)D?
:= argmaxD a spanning DAG of G?e?E(D)w(e).
(2)Maximising Equation (2) amounts to concur-rently minimising the number of edges of weightless than 1 in the optimal solution and maximis-ing the number of edges of weight at least 1.
Infact, if all edge weights are less than 1, then thisproblem reduces to finding the MST.
However, theobjective in semantic parsing in adopting the MS-DAG problem for decoding is to increase powerfrom finding only MSTs.
Therefore, this versionof the problem is not the subject of this paper.
Ifa graph has even one edge of weight greater than1, then all edges of lesser weights should be dis-carded, and for the remaining subgraph, maximis-ing Equations (1) or (2) is equivalent.Maximising Equation (1) is complex and undercertain restrictions on edge weights may optimisefor simply the number of edges (subject to being aDAG).
For example, if the difference between anytwo edge weights is less than1|E(G)|?
w(e) forthe smallest weighted e in E(G), then the prob-lem reduces to finding the spanning DAG with thegreatest number of edges, as shown by Proposition1.Proposition 1.
Let G be a weighted digraph, withminimum edge weight M .
Suppose the differencein weight between any two edges of G is at most1|E(G)|?M .
Then an MSDAG forGmaximises thenumber of edges of any spanning DAG for G.Proof.
Suppose D1, D2are spanning DAGs for G,such that (without loss of generality) |E(D1)| =|E(D2)| + 1, but that D2is an MSDAG and thatD1is not.
We derive the following contradiction.w(D2) =?e?E(D2)w(e)?
|E(D2)| ?M + |E(D2)| ?
(1|E(G)|?M)< |E(D2)| ?M + M= |E(D1)| ?M?
?e?E(D2)w(e)= w(D1)Admittedly, for arbitrary edge weights, the rela-tion between the sum of edge weights and numberof edges is more intricate, and it is this problemthat we refer to as the MSDAG problem in thispaper.
However, the maximisation of the numberof edges in the MSDAG does play a role when62using Equation (1) as the objective function, andthis may be inappropriate for decoding in seman-tic parsing.3.1 Two linguistic issues of in MSDAGdecoding for semantic parsingWe can identify two important related issuesagainst linguistic motivation for the use of MS-DAG algorithms in decoding for semantic parsing.The first problem is inherited from that of the arc-factored model in syntactic parsing, and the sec-ond problem is due to MSDAGs constrained max-imisation of edges discussed above.In the arc-factored syntactic parsing paradigm,it was shown that the MST algorithm could beused for exact inference (McDonald et al., 2005).However, one problem with this paradigm was thatedges of the inferred solution did not linguisti-cally constrain each other.
So, for example, a verbcan be assigned two separate subject dependents,which is linguistically absurd.
Use of the MS-DAG algorithm in semantic parsing corresponds,in fact, to a generalisation of the arc-factored syn-tactic parsing paradigm to semantic parsing.
Assuch, the problem of a lack of linguistic constraintsamong edges is inherited by the arc-factored se-mantic parsing paradigm.However, MSDAG decoding for semantic pars-ing suffers from a further problem.
In MST de-coding, the only constraint is really that the outputshould have a tree structure; this places a preciserestriction on the number of edges in the output(i.e., n ?
1), unlike for MSDAGs.
From our dis-cussion above, we know that the MSDAG prob-lem is closely related to a constrained maximisa-tion of edges.
In particular, a candidate solution sto the problem that is not optimal in terms of to-tal weight may, however, be linguistically optimal;adding further edges to s would increase weight,but may be linguistically undesirable.Consider the tree at the top of Figure 1, for theexample John loves Mary.
In decoding, this treecould be our linguistic optimal, however accordingto our additive objective function, it is more likelyfor us to obtain either of the bottom DAGs, whichis clearly not what is wanted in semantic parsing.4 Related Research and anApproximation GuaranteeThe only algorithm presented to date for MSDAGis an approximation algorithm proposed by Mc-John loves MaryJohn loves Mary John loves MaryFigure 1: Possible spanning DAGs for John lovesMary.Donald and Pereira (2006), given without any ap-proximation guarantee.
The algorithm first con-structs an MST of the weighted digraph, andthen greedily attempts to add remaining edgesto the MST in order of descending weight, solong as no cycle is introduced.
Only part ofthis algorithm is greedy, so we will refer to it assemi-greedy-MSDAG.
Given the fact that MS-DAG is APX-hard (Schluter, submitted), the fol-lowing approximation guarantee is not surprising.Theorem 2. semi-greedy-MSDAG is anO(1n)factor approximation algorithm for MSDAG.Proof.
We separate the proof into two parts.
InPart 1, we first consider an easy worst casescenario for an upper bound on the error forsemi-greedy-MSDAG, without any considera-tion for whether such a graph actually exists.
Fol-lowing this in Part 2, we construct a family ofgraphs to show that this bound is tight (i.e., thatthe algorithm exhibits worst imaginable behaviourfor this family of graphs).Part 1.
For G a digraph, let D be the output ofsemi-greedy-MSDAG on G, and D?be an MS-DAG for G. The worst case is (bounded by thecase) where the algorithm finds an MST T?forG but then cannot introduce any extra edges to ob-tain a spanning DAG of higher weight, because theaddition of any extra edges would induce a cycle.For G?s nodes, we suppose that |V (G)| > 3.
Foredges, we suppose that all the edges in T?haveequally the largest weight, say wmax, of any edgein E(G), and that all other edges in E(G) haveweight O(wmax).
We can do this, because it givesan advantage to T?.We suppose also that the underlying undirectedgraph of G is complete and that the true MSDAGfor G is D?
:= (V (G), E(G)?
E(T?
)).This clearly must be the worst imaginable case:that T?shares no edges with D?, but that D?con-63tains every other possible edge in the graph, withthe weight of every edge in D?being at most theweight of the maximum weighted edge of thoseof T?
(remember we are trying to favour T?).
Noother imaginable case could introduce more edgesto D?without inducing a cycle.
So, for all G,w(D?)
= O((n?
1)2?
wmax2)= O(n2?wmax),and we had that w(T?)
= w(D) = O(n ?
wmax).So at very worst, semi-greedy-MSDAG findsa spanning DAG D of weight within O(1n) of theoptimal.Part 2.
We now show that this bound is tight.We construct a family of graphs Gn= (Vn, En) asfollows.
Vn:= {v0, v1, v2, .
.
.
, vn}, with n > 3,and we suppose that n is even.
Let c ?
R be someconstant such that c > 3.
We place the followingedges in En:(E1) (vi, vi+1) of weight c for all i ?
{0, .
.
.
, n ?1} into En, creating a path from v0to vnoflength n where every edge has weight c, and(E2) (vi, vj) of weight c?
1 for all j ?
{2, i?
1},i ?
{2, .
.
.
, n}.So, in addition to the path defined by the edges in(E1), Gn?
{v0} contains a weighted tournamenton n?
1 nodes, such that if j < i, then there is anedge from i to j.Let us denote the MST of Gnby T?nand the maximal spanning tree obtainable bysemi-greedy-MSDAG, by Dn.
We will showthat the (unique) MSDAG of Gnis the graph D?nthat we construct below.It is easy to see that the MST T?nof Gnconsistsof the edges in (E1), and that no further edges canbe added to T?nwithout creating a cycle.
So, Dn=T?n.On the other hand, we claim that there is aunique D?nconsisting of:1. the edge (v0, v1),2. the edges (v2i?1, v2i) for all i ?
{1, .
.
.
, n/2} into E(D?n), that is everysecond edge in the path described in (E1),and3.
all the edges from (E2) except for (v2i, v2i?1)for all i ?
{1, .
.
.
, n/2}.We can easily see that D?nis at least maximal.
Theonly edges not in D?nare ones that are parallelto other edges.
So, introducing any other edgefrom (E2) would mean removing an edge from(E1), which would decrease D?n?s overall weight.Moreover, notice that introducing any other edgefrom (E1), say (vk?1, vk) would require remov-ing two edges (from (E2)), either (vk, vk?1) and(vk+1, vk?1) or (vk, vk?1) and (vk, vk+1), to avoidcycles in D?n, but this also decreases overallweight.
We extend these two simple facts in theremainder of the proof, showing that D?, in addi-tion to being maximal, is also a global maximum.We prove the result by induction on n (with neven), that D?nis the MSDAG for Gn.
We taken = 4 as our base case.For G4(see Figure 2), E(G4)?E(D?4) containsonly three edges: the edge (v2, v3) of weight c andthe edges (v4, v3) and (v2, v1) of weight (c ?
1).Following the same principles above, adding theedge (v2, v1) would entail removing an edge ofhigher weight; the same is true of adding the edge(v4, v3).
No further edges in either case couldbe added to make up this difference and achievegreater weight than D?4.
So the only option is toadd the edge (v2, v3).
However, this would entailremoving either the two edges (v3, v2) and (v4, v2)or (v3, v2) and (v3, v4) from D?4, both of which ac-tions results in lower overall weight.Now suppose D?n?2is optimal (for n ?
6,n even).
We show that this implies D?nis op-timal (with n even).
Consider the two sub-graphs Gn?2and H of Gninduced by the sub-sets of V (Gn), V (Gn?2) = {v0, .
.
.
, vn?2} andV (H) := {vn?1, vn} respectively (so H =(V (H), {(vn?1, vn), (vn?1, vn)})).
We are as-suming that the MSDAG of Gn?2is D?n?2.
More-over, the MSDAG of H is a single edge, DH:=(V (H), {(vn?1, vn)}).D?nincludes the MSDAGs (D?n?2and DH) ofthese two digraphs, so for these parts of D?n, wehave reached an upper bound for optimality.
Nowwe consider the optimal way to connect D?n?2andDHto create D?n.Let C denote the set of edges in Gnwhichconnect DHto Gn?2and vice versa.
C ={(vn?2, vn?1)} ?
{(un, ui) | 1 ?
i < n} ?
{(un?1, ui) | 1 ?
i < n ?
1}.
Note that theonly edge from C not included in D?nis eC:=(vn?2, vn?1).
By the discussion above, we knowthat including eCwould mean excluding two otheredges from C of weight at least (c?1), which can-not be optimal.
Therefore D?nmust be optimal.640 1 2 3 4(c-1) (c-1)(c-1)(c-1)ccc c(c-1) (c-1)Figure 2: G4, with D?4in blue and green and T?4in red and green.So we have constructed a family of graphs Gnwhere w(Dn) = w(T?n) = nc andw(D?n) =(n?1?i=0i(c?
1) + (n ?
c))?
(n2?
c)=n(n?
1)2(c?
1)?n2?
c.This completes the proof thatsemi-greedy-MSDAG is anO(ncn(n?1)2(c?1)?n2?c)= O(1n) factor ap-proximation algorithm for MSDAG.Now let us consider the version of the state-ment of the MSDAG problem that, rather thanmaximising the weight of a spanning DAG D?of a weighted digraph G, looks to minimise theweight of the set C?of edges that must be re-moved from G in order for G ?
C?to be an MS-DAG for G. Clearly these problems are identical.We refer to the minimisation version of the state-ment as MSDAGC, and to C?as the complement(in G) of the MSDAG D?
:= G ?
C?.
Also, letsemi-greedy-MSDAGCbe the same algorithmas semi-greedy-MSDAG except that it outputsC?rather than D?.Using the same graphs and proof structure as inthe proof of Theorem 2, the following theorem canbe shown.Theorem 3. semi-greedy-MSDAGCisan O(n) factor approximation algorithm forMSDAGC.5 Conclusions and Open QuestionsThis paper provides some philosophical and math-ematical foundations for the MSDAG problem asdecoding in semantic parsing.
We have put for-ward the view that the objective in semantic pars-ing is not in fact to find the MSDAG, however it re-mains open as to whether this mismatch can be tol-erated, given empirical evidence of MSDAG de-coding?s utility in semantic parsing.
We have alsopointed to an explicit proof of the APX-hardness(that of (Schluter, submitted)) of MSDAG andgiven an approximation guarantee of the only pub-lished approximation algorithm for this problem.In particular, Schluter (submitted) providesan approximation preserving reduction fromMSDAGCto IDMC.
Moreover, the best knownapproximation ratio for IDMC is O(n1123) (Agar-wal et al., 2007), which yields a better (in termsof worst case error) approximation algorithm forMSDAGC.
An interesting open problem wouldcompare these two decoding approximation algo-rithms empirically for semantic parsing decodingand in terms of expected performance (or error)both in general as well as specifically for semanticparsing decoding.ReferencesAmit Agarwal, Noga Alon, and Moses Charikar.
2007.Improved approximation for directed cut problems.In Proceedings of STOC, San Diego, CA.D.
Heckerman, D. Geiger, and D. M. Chickering.1995.
Learning bayesian networks: The combina-tion of knowledge and statistical data.
Technical re-port, Microsoft Research.
MSR-TR-94-09.Ryan McDonald and Fernando Pereira.
2006.
Onlinelearning of approximate dependency parsing algo-rithms.
In Proc.
of EACL, pages 81?88.R.
McDonald, F. Pereira, K. Ribarov, and J. Haji.
2005.Non-projective dependency parsing using spanningtree algorithms.
In Proc.
of HLT-EMNLP, pages523?530, Vancouver, BC, Canada.Kenji Sagae and Jun?ichi Tsujii.
2008.
Shift-reducedependency dag parsing.
In 22nd InternationalConference on Computational Linguistics (Coling2008), Manchester, UK.Natalie Schluter.
submitted.
On the complexity offinding a maximum spanning dag and other dagparsing related restrictions.Ivan Titov, James Henderson, Paola Merlo, andGabrielle Musillo.
2009.
Online graph planariza-tion for synchronous parsing of semantic and syn-actic dependencies.
In Proceedings of IJCAI 2009,pages 1562?1567.65
