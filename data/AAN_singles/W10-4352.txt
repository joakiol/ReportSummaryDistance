Proceedings of SIGDIAL 2010: the 11th Annual Meeting of the Special Interest Group on Discourse and Dialogue, pages 273?276,The University of Tokyo, September 24-25, 2010. c?2010 Association for Computational LinguisticsYouBot: A Simple Framework for Building Virtual Networking AgentsSeiji Takegata, Kumiko Tanaka-IshiiGraduate School of Information Science and Technology, University of Tokyo13F Akihabara Daibiru, 1-18-13 SotoKanda Chiyoda-ku, Tokyo, Japantakegata@cl.ci.i.u-tokyo.ac.jp, kumiko@i.u-tokyo.ac.jpAbstractThis paper proposes a simple frameworkfor building ?virtual networking agents?
;programs that can communicate with usersand collect information through the inter-net.
These virtual agents can also commu-nicate with each other to share informationthat one agent does not have.
The frame-work - ?YouBot?
- provides basic functionssuch as protocol handling, authentication,and data storage.
The behavior of the vir-tual agents is defined by a task proces-sor (?TP?)
which can be written in a light-weight language such as JavaScript.
It isvery easy to add new functions to a virtualagent.
The last part of this paper discussesthe micro-blog system ?twitter?
and otherweb services as information sources that avirtual agent can utilise to make its behav-ior more suited to the user.1 IntroductionRecently, communicating in short sentences, suchas via Instant Messenger or SMS, has becomemore common; the use of ?Twitter?, especially,is spreading very quickly and widely.
These net-working tools are not only for chatting, but also forgathering information on and discussing a worldof topics.
Short sentences are suitable for Nat-ural Language Interface processes like question-answering, recommendation, or reservation sys-tems; thus, Natural Language Interfaces are be-coming increasingly important in this area of com-munications.There are many dialogue systems that processnatural language as a user-input, like ?UC?
(Wilen-sky 1987), ?tour guide?
(Prodanov et.al.
2002), butmost of them are designed for a specific individ-ual purpose, so, have to locate different systemsfor different purposes.
This problem has been oneof the main barriers preventing dialogue systemsfrom being adopted more widely.Our framework -?YouBots?- can accept theuser?s messages as input, and respond in naturallanguage.
The behavior of these agents is definedby task processors (?TPs?)
which can be writtenin a light-weight language, eg.
JavaScript.
Itis very easy to add new TPs to a virtual agent.Web-browsers like Firefox have a similar add-onmechanism and, through open-source collabora-tion, now have thousands of types of extension.We hope that, in the same way, developers willbe encouraged to write new TPs for our YouBotframework.Personal Digital Assistant is an example of thiskind of application.
Its schedule manager, contactmanager and to-do list are easily implemented onthis framework.
Q&A system is another example;it would be realized by cooperating with webser-vice or other external system.The framework also has a unique networkingfeature to help the bots communicate with eachother: It is called ?Inter-bot communication?, afeature which expands the ways in which the vir-tual agent can get preferred information for theuser.2 Outline of the Networking BotMost existing dialogue systems only use their in-ternal data.
So their application is often limitedto a specific purpose, as in domain-specific expertsystems.
Using a network feature enabling botsto communicate with each other, our system canobtain many types of information from other, ex-ternal systems.
Figure 1 shows users communi-cating with their own bots, and bots communicat-ing with each other to collect information for theirusers.
Each connection in the figure is conductedby XMPP protocol1.1http://www.xmpp.org/273Information in each bot can be linked in thesame manner as web pages, and combine to formsemantic structures in the way of the SemanticWeb (Berners-Lee 2001), this can improve thebots behaviour.Figure 1: Network of Users and Bots.If TPs are designed to share informationthrough the network, a user need not know whichsystem contains the information he or she needs.They only need to talk to their own personal bot,then the bot will find the information for them.Each user has their own bot, and can share infor-mation through these bots.
The modes of inter-action with other users and modes of informationgathering depend on how the TPs are written.3 Task ManagingWithin our framework, a ?task manager?
invokes a?task processor?
as shown in Figure 2:-Figure 2: Task-managingThere are existing systems that process taskswith modular components - TPs; among these, wefind two approaches, one is centralized and theother distributed.
In the centralized approach, auser-message is analyzed by a central componentof the system, often called the ?dialogue manager?.Then the dialogue manager decides which TP toinvoke.
The ?Smart Personal Assistant?
(Nguyenet al 2005) uses ?BDI Theory?
(Bratman 1987) todetermine the user?s intention in the dialogue man-ager.
Then, a TP which satisfies the user?s demandcan be selected.
In this approach, interpretationcan be carried out efficiently, but the task managerneeds to be revised every time a new TP is added.This is not an easy operation unless the task man-ager is configured to recognize the functionality ofa new TP automatically.
This may be viewed as aserious weakness of the centralized approach.On the other hand, there is ?RIME?
(Nakano etal.
2008) which adopts a distributed approach -where the user-message is sent to each of the TPs,which interpret it and return a ?score?
indicatinghow well they can handle the message.
Conse-quently, the TP returning the highest score willprocess the user?s message.
This approach suf-fers from the inefficiency of having to interpret theuser?s message many times in each TP.
On the pos-itive side, there is no need to revise or redesigncentral components when a new TP is added.We have decided to adopt the distributed ap-proach because we think expandability is more im-portant than speed.
Our framework uses ?Script-ing Engine?
in which JavaScript codes can run.JavaScript is very easy to write, owing to which,many people write extensions for Firefox in whichJavaScript codes can also run.
How simply a TPcan be written is a very important factor in the at-traction of developers.4 How to Write Task ProcessorsThere are three types of designated TP in theYouBot system: a ?user task processor?, a ?bottask processor?, and a ?twitter task processor?.
The?user-TP?
is for processing messages from the user- explained in the ?Basic Task Processor?
subsec-tion (see below); the ?bot-TP?
is for processing in-quiries from other bots - explained in the ?Inter-botcommunication?
subsection (see below); and the?twitter-TP?
reads the user?s tweets at the Twittersite - explained in the ?Cooperation with ExternalServices?
subsection (also see below).
Each TP issaved to an individual JavaScript file in the ?task?folder with a .js extension.
The YouBot Frame-work reads these files when the program starts andwhen a ?reload?
command is issued.2744.1 Basic Task ProcessorsThe JavaScript code for a basic TP needs at leastone variable and two functions.
The variable?type?
indicates the type of task - which can ei-ther be a user-task, bot-task, or twitter-task.
Themandatory functions are ?estimate?
and ?process?,an approach introduced in the ?Blackboard?
multi-agent system (Corkill 1991).
The ?estimate?
func-tion receives a user-message from the task man-ager and returns its score, which shows how likelyit is that this TP will be the best among the otherTPs to process the message.
For example, whena TP uses pattern-matching for message interpre-tion, the score may be higher if the matched pat-tern is more complicated, or may be zero if nopattern matched the user message.
The ?estimate?function can use not only pattern-matching, butalso various data calculated or stored in differentways; such as the dialogue history or informationfrom external systems.
The YouBot Frameworkgathers and compares the scores returned from theTPs, then selects the processor which returned thehighest score to process the message.
The ?pro-cess?
function of the TP handles the user-messageand makes a response to the user.
During the pro-cessing, this function can access the internal datastore or an external system to get or save variousinformation.4.2 Pattern MatchingOur framework provides a handy way to dopattern-matching, using four types of placeholder:An OR conditional placeholder is defined by?
{abc |def }?
format.I {will go|went }to school.matches both ?I will go to school.?
and ?I wentto school.?
Optional selection can be defined withthis ?(abc|def)?
format.Yes (I do |it is).matches ?Yes I do?, ?Yes it is?
and just ?Yes?Using ?[abc]?
format, the content of the place-holder can be retrieved.
For example, the pattern:I went to [place].matches the sentence ?I went to school.?
or ?Iwent to see a doctor.?
If the pattern matches theuser?s message, an object holding the contents ofthe placeholder will be returned.
You can get thecontents with the ?get?
function, specifying theplaceholder - in this case ?
[place]?To define a placeholder which matches only onespecified pattern, ?<abc>?
format is used.
For ex-ample, the placeholder ?<date>?
can be definedso that it matches a date expression such as ?yes-terday?
or ?on Sunday?.
Then the pattern:I went to [place] <date>.matches ?I went to school on Sunday?, but doesnot match ?I went to school with my brother?.The content of <date> placeholder can also be re-trieved with ?get?
function.
Retrieved data can bekept in the data store and used in interaction withthe user later.4.3 The Data storeMany chatter bots don?t remember what they havesaid before.
?A.L.I.C.E?
(Wallace 2008) has ashort memory - just one single interaction.
Un-usually, YouBot has a long-term data store for itsmemory.
It holds key=value style properties whichcan be defined by the TP.
To save schedule data, asin:-type="schedule"date="2010/05/14"item="Submission dead-line"- we create a new data object, set its properties,and use the ?save?
function.
To retrieve specificdata from the data store, a ?data selector?
object isprovided.
If the following condition is set up inthe data selector:-type="schedule"date="2010/05/09"- then a list of matching data is retrieved fromthe data store.
The Youbot framework also pro-vides a facility for responding to inquiries fromother bots, and this raises security issues.
In thisframework, a default security filter is installed inthe data selector to send information only to priv-ileged bots.
Data objects saved in the data storehave security attributes for which the default is?secret?, and only the owner of the bot can ac-cess this information.
This attribute can be set to?private?
or ?official?
- then, the information willonly be accessible to the bots which have ?private?or ?official?
privilege.
Developers do not have toworry about this data security setting during inter-bot communication.4.4 Inter-bot communicationA user-TP can send an inquiry to another bot -about, for example, the user?s schedule or knowl-edge and expertise.
The TP generates an ?InquirySender?
object , sets the inquiry and the targetbot?s address, then uses the ?send?
function.
This275inquiry is formatted as an inter-bot message sothat the receiving bot can distinguish it from user-messages.
The receiving bot generates an ?InquiryResponder?
object for each of the incoming inter-bot messages; then the Task Manager sends themessages to the bot-TP.
Next, the bot-TPs estimatethe likelihood of processing the message and re-turn scores - with the bot-TP which returns thehighest score being selected to respond.
A re-sponding message is sent back to the inquiring botin the inter-bot message format.
then a functionnamed ?convey?
- within the inquiring TP - is in-voked to make a response to the user.
A functionnamed ?timeout?
is invoked when no response hasbeen returned.Figure 3: Inter-Bot CommunicationTo respond to an inquiry from another bot, abot-TP for that inquiry has to be defined.
Besideswhich, remote bots have to be given privilege tocollect information which has a security attributerestricting access.
If a TP developer fails to spec-ify a security attribute for the data, no access willbe allowed without the right privilege, because thedefault setting is secret.4.5 Cooperation with External SystemsA bot can read the user?s tweets at the twitter siteat specified intervals.
The User?s tweets are sentto twitter-TPs, then estimated and processed ina same manner as user-TPs and bot-TPs.
A botcan get information about a user?s status, interests,and favorites; these data are useful for generatingpreferable responses for the user.The Youbot framework also provides a utilityfunction which takes URI and retrieves HTMLcode.
This function can be used to access searchengines or news sites.
Services such as onlineshopping or recommendation engines representthe type of business model that would be suitedto the application of the Youbot framework.5 Interaction ExampleThe following are examples of interactions whichYouBot might handle:USER: I will meet John at 9 tomorrow.SYSTEM: Is that A.M or P.M?USER: pmSYSTEM: There?s a meeting with Mr. Smith at 8pm.USER: It?s been canceled.SYSTEM: I see.6 ConclusionWe proposed a simple framework for virtualagents.
Its functionality can be easily extendedby adding task processing modules written inJavaScript.
The Youbot framework provides util-ity objects which make task processing even eas-ier.
Networking ability is also provided to expandthe networked information?s reach, while data se-curity is maintained.
Future work will includenormalizing the estimation score.
Another chal-lenge is how best to share contextual informationamong TPs so they can interact to generate betterresponses for the user.ReferencesRobert Wilensky.
Ther Berkley UNIX ConsultantProject.
Informatik-Fachberichte, volume 155,pages 286?296, Springer, 1987.P.
J. Prodanov, A. Drygajlo, G. Ramel, M. Meisser, andR.
Siegwart.
Voice enabled interface for interactivetour-guided robots.
In Proceedings IEEE/RSJ Inter-national Conference on Intelligent Robots and Sys-tems, pages 1332?1337, 2002.T.
Berners-Lee and J. Hendler and O. Lassila.
The Se-mantic Web.
In Scientific American, pages 34?43,May 2001.R.S.
Wallace.
The Anatomy of A.L.I.C.E.
Parsing theTuring Test, pages 181?210, Springer Netherlands,2008.A.
Nguyen.
An agent-based approach to dialogue man-agement in personal assistants.
In Proceedings ofIUI-2005, pages 137?144.
ACM Press, 2005.M.
Bratman.
Intentions, Plans, and Practical Reason.Harvard University Press, 1987.M.
Nakano, K. Funakoshi, Y. Hasegawa, and H. Tsu-jino.
A Framework for Building ConversationalAgents Based on a Multi-Expert Model.
In Proceed-ings of the 9th SIGdial Workshop on Discourse andDialogue, pages 88?91.
ACL, 2008.Daniel D. Corkill.
Blackboard systems.
AI Expert, vol-ume 6, pages 40?47, 2008.276
