Automat ic  Generation of On-Line Documentat ion in the IDASProject*Ehud Reiter, Chris Mellish, and John LevineDepartment of Artificial IntelligenceUniversity of Edinburgh80 South BridgeEdinburgh EH1 1HN BRITAIN(e-mail: e.reiter@ed.ac.uk)Abst rac tThe Intelligent Documentation Advisory Sys-tem generates on-line documentation and helpmessages from a domain knowledge base, usingnatural-language (NL) generation techniques.This paper gives an overview of IDAS, with par-ticular emphasis on: (1) its architecture and thetypes of questions it is capable of answering; (2)its KR and NL generation systems, and lessonswe have learned in designing them; and (3) itshypertext-like user interface, and the benefitssuch an interface brings.1 In t roduct ionThe Intelligent Documentation Advisory System (IDAS)project is attempting to use natural-language (NL) gen-eration and hypertext echnology to produce an on-linedocumentation and help system that supports users ofcomplex machinery.
In this paper we present an overviewof the most recent IDAS prototype developed at the Uni-versity of Edinburgh, including descriptions of:?
IDAS's overall architecture, and particularly itsqueslion space, i.e., the set of queries it is designedto answer;?
IDAS's I(R and NL generation components, withparticular emphasis on lessons we have learned whilebuilding them, and related design decisions;?
IDAS's hypertext-like user interface, and the oper-ations it is intended to support.IDAS is a collaborative ffort between the Universityof Edinburgh, Raeal Instruments Ltd., Racal Research?
The IDAS project is partially funded by UK SERC grantGR/F/36750 and UI( DTI grant IED 4/1/1072, and we aregrateful to SERC and DTI for their support of this work.
Wewould also like to thank the IDAS industrial collaborators - -Inference Europe, Ltd.; Racal Instruments, Ltd.; and RacalResearch, Ltd. - -  for all the help they have given us inperforming this research.
Thanks also to Robert Dale andtile anonymous reviewers for their very helpful commentsLtd., and Inference Europe Ltd. As this paper is written,the project is about half-way through its 3-year lifespan.Several prototypes have been built to date; this paperdescribes the most recent one built at the University ofEdinburgh, which consists of about 5000 lines of Lispcode.
Work on IDAS continues as this paper is beingwritten, with current tasks including the expansion ofthe existing domain knowledge base, and the integrationof the documentation software with the actual hardwarebeing documented.
We have not yet carried out anyformal evaluations of IDAS, although we hope to arrangesuch tests once the current expansion and integrationtasks are completed; the existing system has been shownto many people informally, generally with quite favorablereactions.The initial IDAS system documents an ATE (Auto-matic Test Equipment), a complex device made by RacalInstruments for testing potentially faulty electronic de-vices.
The ATE contains an assortment of electronicinstruments, a switching system that connects these in-struments to a UUT (Unit Under Test), and a computerwhich runs test programs that test the UUT with the in-struments.
Potential IDAS users include operators whouse the ATE to test UUTs; maintenance t chnicians wholook for faults in the ATE itself; and programmers whocreate test programs.
The current IDAS prototype isdesigned to support operators and maintenance techni-cians; support for programmers may be added later.2 Arch i tec tureA simplified version of IDAS's architecture is shown inFigure 1.
Textual output from test programs and otherATE software is intercepted by the Listener, 1which de-tects mentions of ATE components and extracts infor-mation about the user's task (e.g., what test programhe is running).
Mentioned components are added to thediscourse in-focus list, and are also made mousable in1The Listener has not yet been implemented in theprototype.64ATETestPrograms" ex ual--, i tener__ W I itia, pointinoutput .
question space|IIeI Discourse context I ~ NLG Content,,.
.
.
.
.
.
.
.
.
.
.
.
Task context .-~ ": .
.
.
.
Determination"'.," KB infoIDAS KB, includes: I /o" "~\[  NLG TextDomain knowledge '??
""J?
'l PlanningContent-determ.
ules ; oO?
'User-expertise models ~..'?User-task models 'Grammar ,' .
.
.
.
-~Lexicon iNew point inquestion spaceHypertextInterface~ SPL -.j NLG Surface AnnotatedRealization text string.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
!
.DA.s .
s .
.y .
s tem .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.UserFigure 1: Simplified IDAS architecturethe output window; if the user clicks on one, he invokesIDAS and the Listener creates an initial query about thatcomponent, i.e., an initial point in question space (Sec-tion 2.1).
The question space point is given to IDAS'sNL generation system, which generates a response us-ing three modules: content determination, which picksrelevant information out of the knowledge base to com-municate to the user; text planning, which converts thisinformation into an expression in SPL, the ISI SentencePlanning Language \[Kasper, 1989\]; and surface realiza-tion, which produces a surface form, i.e., an annotatedtext string.The annotations consist of text-formatting commands(e.g., Begin-New-Line) and hypertext specifications.The annotated text string is given to the Hypertert In-lcrface system, which presents it to the user in a hy-pertext window; this window also includes buttons forhyperschema follow-up questions (Section 4.1).
If theuser clicks on a mouse-sensitive word or a button, thepoint in question space that corresponds to this queryis passed to the NL generation system, and the processiterates.2.1 Quest ion  SpaceQuestion space is the set of queries that can be givento IDAS's NL generation system; IDAS's hypertext sys-tem can be viewed as a tool that enables a user tomove around question space until he finds a point thatgives him the information he is looking for.
A point inquestion-space is a tuple with five components:?
Basic-question: Currently includes What-is-it,Where-is-it, What-is-its-purpose, What-are-its-specifications, What-are-its-parts, What-is-it-connected-to, How-do-I-perform-the-task.
2?
Component: the target of the question, e.g.,Pr inter -36 or Computer -3 ;  components are usu-ally physical ATE components, but can in somecases be actions or other knowledge-base entities.?
Task: The user's task, e.g., Operations or Replace-Part.?
User-Expertise: The user's expertise level, e.g.,Novice or Skilled.?
Discourse-in.focus: The set of in-focus objects forreferring expression generation \[Grosz and Sidner,1986\].For example, the question space point (What-is-it,DC-Power-Supply-23,  Operations, Skilled, {VXI-Chassis-36, DC-Power-Supply-23}) represents thequery "What is the DC Power Supply" when asked bya user of Skilled expertise who is engaged in an Op-erations task with the discourse context containing theobjects VXI .Chassis-36 and DC-Power-Supply-23.The NL Generation component would in this case pro-duce the response~How-do-l-perform-the-task is interpreted as How-do-I-use-it for Operations tasks, How-do-I-replace-it for Replace-Part tasks, etc.65"The DC power supply is a black Elgar AT-8000 DC power supply.
"Variations in the above tuple would be processed asfollows:?
Component :  If a different component had beenspecified, IDAS would have generated another re-sponse that communicated colour, manufacturer,and model-number information, as specified by thecontent-determination rule for What-is-it questionsasked during Operations tasks (Section 3.2).
Forexample, if the component had been Pr in ter -12 ,the generated text would have been"The printer is a white Epson LQ-1010printer."?
Basic  Quest ion:  A different response pattern (i.e.,content-determination rule) would have been usedfor a different basic question.
For example, if thebasic question had been What-is-its-purpose, the re-sponse would have been"The DC power supply provides DC powerfor the UUT."?
Task: A different response pattern would also havebeen used if a different ask had been specified.
Forexample, for the What-is-it question, if the user'stask had been Replace-Part instead of Operations,colour would have been omitted but a part numberwould have been included, e.g.,"Tile DC power supply is an Elgar AT-8000 DC power supply with part numberOPT-EP2."?
User-Expert ise:  Tile What-is-its-purpose r sponsewould have been phrased differently if the user'sexpertise level had been Novice instead of Skilled:'unit under test' would have been used instead of'UUT', 'power' instead of 'DC power', and 'the blackpower supply' instead of 'the DC power supply', giv-ing:"The black power supply provides powerfor the unit under test."?
Discourse- in- focus:  The discourse-in-focus li t doesnot affect the above responses, but it would affectthe response to Where-is-it.
The response to Where-is-it under the original discourse-in-focus li t wouldhave been:"The DC power supply is below the VXIchassis.
"If the discourse-in-focus li t had included Mains-Cont ro l -Un i t -29  instead of VXI -Chass is -36,  thelocation would have been given relative to themains-control-unit instead of the VXI-chassis, i.e.,the text would have been:"The DC power supply is above the mainscontrol unit.
"Question space is quite large: the current prototypehas 40 components, 7 basic questions, 6 user-tasks, and3 user-expertise models, so there are over 5000 pointsin its question space even if variations in the discoursecontext are ignored, a A more realistically sized systemwould document several hundred components and prob-ably would have additional user-task and user-expertisemodels as well; its question space could therefore asilycontain several hundred thousand points.
Many point.,in question space represent queries that produce thesame text (e.g., responses to Where-is-it do not dependon the user's task); even if only 10% of the points irquestion space produce distinct responses, however, thisstill means that a realistically-sized IDAS system mustbe able to generate tens of thousands of different re-sponses.
The justification for using natural languag~generation in IDAS is that it would be difficult to entel20,000 different canned text responses for 200,000 differ-ent queries, and almost impossible to maintain this doe.umentation database as new ATE configurations wer~announced; using NL generation from a domain knowl.edge base accompanied by explicit task, expertise, an(discourse models makes it feasible to supply appropriaUanswers for this multitude of possible queries.3 KR and  NLGThe fundamental purpose of IDAS's knowledge repre.sentation (KR) and natural-language neration (NLGcomponents i  to represent domain information in a mot,efficient form than thousands of canned text responsesFor example, a component's model number will typicall2appear in at least 30 different query responses (i.e., ques.tion space points); representing it in the knowledge bas,and using NLG to produce text from the knowledge bas,allows the documenter to enter (and update) this information only once, instead of 30 times.Many of the theoretically interesting aspects of IDAS'KR and NLG systems are discussed elsewhere, e.g., \[Reiter and Mellish, 1992; Reiter and Dale, 1992\].
Here, w,present a brief overview of the KR and NLG systemsand then discuss three design decisions that we madduring the course of development: allowing canned texand other 'cheats'; generating short and focused replies3The prototype's knowledge base is not complete; currently only about 2/3 of tile potential queries can banswered.66and stressing authorability instead of deep reasoning incontent-determination.
These decisions were not partof the original IDAS design, but rather were made asa result of experience in developing prototypes and in-teracting with our industrial collaborators; hence, theyare 'lessons' we have learned that may be of interestto other researchers and developers working on similarapplications-oriented projects.3.1 Knowledge  Representat ionThe IDAS knowledge-representation system uses a KL-ONE type taxonomy \[Brachman and Schmolze, 1985\] torepresent domain entities (e.g., companies, ATE com-ponents, user actions) and linguistic knowledge (gram-matical units, lexieal definitions, etc.).
The knowledge-base is supported by a KL-ONE-like automatic lassi-tier; a superclass-to-subclass ttribute inheritance sys-tem, based on Touretzky's minimal inferential distanceprinciple \[Touretzky, 1986\]; and a graphical browse/edittool.
We currently use a small demonstration knowl-edge base that contains about 200 classes that representdomain entities (e.g., the company Raeal ,  the compo-nent Counter - t imer ,  and the user-action Clean),  and50 roles that represent domain attributes (e.g., colourand manufacturer) .
The knowledge-base will, of course,need to be substantially enlarged before it is of much useto real users.The knowledge-base also contains user-expertise anduser-task models.
The user-expertise models overlay theclass taxonomy, and specify what words a user knowsand what primitive actions he can execute; they are insome ways similar to the user-models used in the FNsystem \[Reiter, 1990\].
The task models do not con-tain any structure themselves, but affect which content-determination rule is chosen (Section 3.2), and hence thesystem's decision as to what information the responseshould communicate to the user.
The current proto-type contains 3 user-expertise models and 6 task models.More expertise and task models will probably be addedwith time, but we expect our final system to have atmost tens of such models, not hundreds; our objectiveis provide expertise and task models that are a reason-able fit to most circumstances, not to be able to coverall possible users performing all possible actions.An authoring tool for the knowledge base is currentlybeing developed by one of our industrial collaborators.Such a tool, which we hope will be directly usable bytechnical authors and domain experts, is of course vitalto the ultimate success of the project.3.2 Natural  Language Generat ionNatural-language generation is performed in IDAS inthree stages:Content Determination: The basic-question, compo-nent, and user-task components of the question-space tuple are used to pick a content-determinationrule, which specifies which information from the do-main knowledge base should be communicated tothe user.Text Planning: The KB information is turned into anSPL term, in a process which is sensitive to the user-expertise and discourse components of the question-space tuple.
This process involves, for example,generating referring expressions and choosing open-class lexical items.Surface Realization: The SPL term is converted into asurface form, i.e., a set of words with formatting andhypertext annotations.
Except for its hypertext-related abilities, the IDAS surface-generation sys-tem has a similar functionality to a subset ofthe PENMAN system \[Penman Natural LanguageGroup, 1989\].IDAS's NL generation system is only designed to beable to generate small pieces of text (a few sentences,a paragraph at most).
This is because IDAS's hyper-text system should enable users to dynamically selectthe paragraphs they wish to read, i.e., perform their ownhigh-level text planning \[Levine el al., 1991\], therebyeliminating the need for the generation system to per-form such planning.3.3 Des ign  Decis ions3.3.1 Canned Text  and  o ther  CheatsWe decided fairly early on not to put a great dealof effort into 'properly' handling rarely-occurring spe-cial cases, but instead to support canned text and other'cheats' as a way of handling these cases.
If a particularresponse is difficult for our KB system to represent or ourgeneration system to generate, we simply enter cannedtext for this response, or (preferably) generate as muchof the response as possible with straightforward applica-tions of our knowledge-based techniques, and then addcanned text annotations to convey things it would bedifficult to generate.For example, one instructional action in the knowledgebase is "mount the ITA against the test head with thefour lugs of the ITA resting in the four hooked recepta-cles of the test head".
This is currently represented as aMount  action where the aetee is the ITA,  the locationis the Test -head ,  and the manner  is the canned text.67"with the four lugs of the ITA resting in thefour hooked receptacles of the test head".
Thesystem could be augmented to 'properly' represent thismanner modifier, but we felt development efforts couldmore productively be spent elsewhere, and hence haveleft this modifier as canned text.
Since IDAS's domainKB is only used for generating text and does not haveto support general domain reasoning, the decision onwhcn to use canned text can be made on such engineer-ing grounds.We believe that 'cheating' in this and other manners(e.g., by only supporting a small number of user taskand expertise models) is unavoidable, given our goal ofbuilding a usable NL generation system with non-trivialdomain coverage.
As in so many other fields, there issomething like a 90%-10% law in operation; properlyhandling the 10% of special and unusual cases wouldrequire 90% of the development effort.
With current-day NL generation technology, it is difficult enough todo a good job on the 90% of common cases; spendingten times this effort to handle the remaining 10% of un-usual cases would not be justifiable, since we would geta much better usability payoff by spending a fraction ofthis effort in improving the handling of common cases.3.3.2 Shor t  Targeted  ResponsesWhen the project started, our industrial collaboratorsgave us an initial list of sample responses they wanted usto try to generate.
These responses were fairly general,a.nd subsequent discussions revealed that using morecontext-specific responses was preferable both for ourcollaborators and for us.
Our collaborators preferredsuch responses because they were more likely to giveusers the information they really needed, while we foundthat the context-specific responses were in many wayseasier to generate than the original responses; this waslargely because they tended to have simpler linguisticand rhetorical structures.For example, the original human-generated responsefor the query "What is the ARINC-429 Interface" was"The ARINC-429 interface is a serial Avionicsbus interface for communicating with a UUTfitted with this bus interface.
ARINC 429 isa single source, multi-sink unidirectional datatransmission standard.
It is used to interfacedigital avionics equipment in commercial appli-cations, but is also seen in military equipmentwhere there is a commonality with commercialequipment.
"In our current prototype, if this query was asked by auser with a Skilled expertise level who was engaged in aReplace-Part task, the response would be"It is a Racal 10500-130 ARINC-429 interfacewith part number RIL-523.
"The second response is intended to inform the user ofthe interface's manufacturer, model number, and partnumber, since that presumably is the information some-one performing a Replace-Part task most needs to know.Hypertext follow-ups enable the user to get the locationof the ARINC-429 interface and a list of its subcompo-nents; these also might be important pieces of informa-tion for a Replace-Part task.The second response thus gives the user the informa-tion he most needs to know to perform his task, and useshypertext follow-ups to enable him to obtain other pos-sibly important pieces of information; it does not givehim a general description of the ARINC standard, aswas present in the original human-generated response.This information is not directly relevant o the Replace-Part task, and could be as much of a distraction as ahelp to a maintenance technician; 4 it also would be dif-ficult to represent and generate this text in the currentIDAS architecture, xcept as canned text (e.g., it is diffi-cult to represent the concept of 'military equipment thathas a commonality with civilian equipment' in the IDASknowledge base).Short, specific, and targeted responses were thus feltto be both more useful and in many ways easier to gen-erate.
There is a danger that such responses might beinappropriate, if one of the contextual factors (task, ex-pertise, discourse) is incorrect.
We will investigate thisin more detail when we perform user-evaluation trials;our hope is that users will be able to use IDAS's hy-pertext follow-up capabilities to obtain the informationthey need if an inappropriate response is generated.3.3.3 Content  Determinat ionIDAS uses a much simpler content-determination sys-tem than other generation systems with somewhat sim-ilar goals (e.g., COMET \[McKeown et al, 1990\] andWIP \[Wahlster et al, 1991\]).
Instead of using planning\[Moore and Paris, 1989\] or schemas \[McKeown, 1985\]to determine what to communicate, IDAS's content-determination system is based on rules (created by do-main experts) of the form 'if a user asks question Q abouta component of type C in the context of task T, he shouldbe told facts F'.
5 In other words, it is intended to sup-4The author of the original human-generated responseagrees with this assessment.5The rules are actually represented as KB classes withappropriate basic-question, component ,  and task rolefillers, and attached ata that indicates the facts to be com-municated; content-determination is done by classifying thecurrent question-space point into the rule taxonomy, and in-heriting the attached ata \[Reiter and Mellish, 1992\].68port easy authorability, instead of reasoning from basicprinciples.
We felt'this was the most appropriate wayin which to achieve IDAS's goal of fairly broad, but notnecessarily deep, domain coverage.One drawback of the lack of plan-based content-determination is that IDAS can not in general answerWhy questions about its suggested actions, in the man-ner described by \[Moore and Swartout, 1990\].
Indeed,because IDAS does not have access to an underlying do-main reasoning system (such as the EES system usedby Moore and Swartout), it can only respond to a Whyquestion if a 'purpose' plan for the relevant object or ac-tion has been explicitly added to the knowledge base bya domain expert.4 Hyper text4.1 Hyper text  in IDASIDAS's hypertext interface allows users to issue newqueries by mouse-clicking on pieces of text.
Hypertextlinks are automatically added to referring expressionsand action descriptions; clicking on a referring expres-sion pops up a menu of basic questions that can be askedabout the referred-to component in the current context,while clicking on an action issues a request for IDAS toexplain this action in more detail (i.e., issues a How-do-I-perform question for this action).P~esponses can also contain hyperschema follow-up buttons.
These are specified by the content-determination rules' (Section 3.3.3), i.e., by rules of theform 'if a user asks question Q about a component oftype C in the context of task T, he should be given theopportunity to ask follow-up question F'.
These follow-up questions were originally intended to implement avariant of McKeown's schema system \[MeKeown, 1985\]where the user, instead of the system, decided whichATN arc to traverse; hence the name hyperschema.
Themechanism is quite general, however, and can be used toadd any useful follow-up question to a hypertext node.The current IDAS system also adds a special MENUbutton to all nodes, which allows users to explicitlymodify their question-space oordinates in any way theychoose; this button is primarily a development aid, andmay not appear in the final system.Users can utilize the hypertext interface for many pur-poses, including:?
Elaboration: If a user wants further informationabout an object or action mentioned in the text, hecan obtain it by clicking on the textual descriptionof that cntity.?
High-level text planning: Ilyt~erschemas nd theother follow-up mechanisnas allow users to dynam-ically specify which paragraphs they are interestedin reading; this effectively means they can performtheir own high-level text planning (Section 3.2).
* Browsing: The hypertext interface provides somesupport for general browsing, which may be neces-sary if a user is not entirely sure which question heshould ask.
We may add more support for browsingin the future, such as a hypertext-based structuralbrowser similar to the one proposed for the IMADsystem \[Hayes and Pepper, 1989\].IDAS's hypertext interface is in some ways similar tothe one presented by \[Moore and Swartout, 1990\], al-though it has a broader scope; Moore and Swartout usedhypertext primarily to enable users to ask for clarifica-tions of explanations, while IDAS uses hypertext as ageneral input mechanism which users can use to poseany question the system is capable of answering.The current IDAS prototype does not do anything in-teresting in modeling the discourse structure of hyper-text dialogues; it simply assumes that each hypertextnode corresponds to a separate closed focus-space \[Groszand Sidner, 1986\], and hence that an object introducedin one node cannot be referred to in another node unlessit is re-introduced.
We suspect this may be an overlyconservative approach, and hope to do more research inthe future on the relationship between the focus spacesof different hypertext nodes.4.2 ExampleFigure 2 shows some example IDAS texts produced bythe various follow-up mechanisms.
The initial query wasWhat-are-its-parts, asked about the complete ATE by aSkilled expertise person performing an Operations task;this produces the text shown in Response 1.
The under-lined part names (which are in fact referring expressions)are all mousable, as is ATE in the title question and thebuttons on the bottom line.
Response 2 was producedby clicking on tes t  head in Response 1, and selectingWhat-is-it from a pop-up menu of basic questions; thisresponse was generated using the same user-task, user-expertise, and discourse-in-focus question-space ompo-nents as Response 1.
6 The hyperschema follow-ups for(What-is-it, ?Component, Operations) are (Where-is-it, ?Component, Operations) and (How-do-I-perform-the-task, ?Component, Operations), so WHERE and USE 7follow-up buttons are added to the response, s The MENU~As mentioned above, IDAS currently assumes that dis-course focus-space changes within one hypertext node do nothave any effect on other nodes.Zltow-do-I-use-it is the interpretation of Itow-do-l-perform-the-ta~k under an Operations user-task~Other questions, e.g., What-are-its-parts, C/Ill be askedby clicking on test  head in the title question, alld selecting69Figure 2: Example IDAS Textsbutton was described above; it allows the user to explic-itly specify a new point in question space.
Response 3was obtained by clicking on WrlERE; it answers 'Where isthe test head'.Response 4 comes from clicking on the USE button inResponse 2; 9 it is a response to 'How do I use the testhead'.
In this response the underlined nouns tes t  head,ITA mechanism, and ITA are all linked to pop-up menusof basic questions about these components, while theverbs unlock, mount, and lock are all linked to How-do-I-perform queries for the relevant action.
Clicking onunlock produces Response 5, which presents a step-by-step decomposition of the action of unlocking the ITAmechanism.
Response 6 was obtained by clicking onlever  in Response 5, and selecting What-is-it from thepop-up menu.4.3 Hyper text  vs NL  Unders tand ingFrom IDAS's perspective, hypertext is a technique forenabling users to specify an input (i.e., a question-spacepoint) to the NL generation system.
As such, it is natu-ral to compare it to other input mechanisms, particularlynatural language text input.
The advantages of hyper-text over NL input systems include:?
Implementation: A hypertext interface is easier toimplement than a NL input system; indeed, we havefound that generating hypertext is only marginallyfrom the pop-up menu.9An identical response would have been obtained byclicking on USE in Response 3, since Responses 2 and 3have the same task, expertise, and discourse question-spaceconlponents.more difficult than generating conventional text (iappropriate graphics support software is available)Implementing an NL input system, in contrast, ismajor undertaking.. Deictic References: As \[Moore and Swartout, 1990point out, a hypertext interface makes many (although not all) kinds of references trivial for a userhe simply points to the phrase that describes th,object or action he wants more information aboutThe user does not have to construct a complex referring expression (e.g., "the board I was told to remove in the second sentence"), and the system doe'.not have to try to resolve such complex references.?
Transparency of Capabilities: NL understandinlsystems are in general only capable of answeringsubset of the questions the user is able to pose, an(the user may become confused if he is not aware othe boundaries of this subset \[Tennant et al, 1983\]This problem does not arise with hypertext, whet,the user is only allowed to issue questions that th,system can answer.Perhaps the primary disadvantage of hypertext systems is their lack of flexibility; hypertext systems typically limit the user to pointing to a single entity and asking one of a small number of questions about it, while NIinput systems allow queries to be stated using the fulpower of English or other human languages.
While thiis a severe, perhaps crippling, drawback in many applications, we believe it is less of a problem in IDAS, becaus,IDAS is only capable of responding to a small numbe70of basic questions about entities in any case.
Hypertextclicking can in fact be used in IDAS to pose almost allquestions that IDAS is capable of answering; if the useris allowed to use the MENU button, then any answer-able query can be issued through the hypertext inter-face.
Accordingly, IDAS does not currently include anNL understanding component, and there are no plans foradding one; we believe that hypertext mechanisms willprovide a sufficient query input mechanism for IDAS.5 Conc lus ionThe IDAS project is attempting to use natural-languagegeneration and hypertext technology to build a proto-type of an on-line documentation a d help system forcomplex machinery.
IDAS is based around the ideas of(1) having a well-structured question space; (2) usingKR and NL generation systems that produce short tar-geted responses and allow canned text to be used whennecessary; and (3) presenting users with a hypertext-likeinterface that allows them to pose follow-up and elabo-ration questions.
Our hope is that this combination willallow us to construct a system that demonstrates thatcurrent-day natural-language generation technology canbe used to build a useful on-line documentation facility;this, indeed, is the ultimate goal of the IDAS project.Re ferences\[Brachman and Schmolze, 1985\] Ronald Brachman andJames Schmolze.
An overview of the KL-ONE knowl-edge representation system.
Cognitive Science, 9:171-210, 1985.\[Grosz and Sidner, 1986\] Barbara Grosz and CandaceSidner.
Attention, intention, and the structure of dis-course.
Computational Linguistics, 12:175-206, 1986.\[Hayes and Pepper, 1989\] Phil Hayes and Jeff Pepper.Towards an integrated maintenance advisor.
In Hy-pertezt 1989 Proceedings, pages 119-127, Pittsburgh,1989.\[Kasper, 1989\] Robert Kasper.
A flexible interface forlinking applications to Penman's entence generator.In Proceedings of the 1989 DARPA Speech and Natu-ral Language Workshop, pages 153-158, Philadelphia,1989.\[Levine t al., 1991\] John Levine, Alison Cawsey, ChrisMellish, Lawrence Poynter, Ehud Reiter, Paul Tyson,and John Walker.
IDAS: Combining hypertext andnatural language generation.
In Proceedings of the7'bird European Workshop on Natural Language Gen-eration, pages 55-62, Innsbruck, Austria, 1991.\[McKeown et al, 1990\] Kathleen McKeown, MichaelElhadad, Yumiko Fukumoto, Jong Lim, ChristineLombardi, Jacques Robin, and Frank Smadja.
Nat-ural language generation i COMET.
In Robert Dale,Chris Mellish, and Michael Zock, editors, Current Re-search in Natural Language Generation, pages 103-139.
Academic Press, London, 1990.\[McKeown, 1985\] Kathleen McKeown.
Discourse strate-gies for generating natural-language text.
ArtificialIntelligence, 27:1-42, 1985.\[Moore and Paris, 1989\] Johanna Moore and CecileParis.
Planning text for advisory dialogues.
In Pro-ceedings of the 27th Annual Meeting of the Associationfor Computational Linguistics, pages 203-211, 1989.\[Moore and Swartout, 1990\] Johanna Moore andWilliam Swartout.
Pointing: A way toward explana-tion dialogue.
In Proceedings of the Eighth NationalConference on Artificial Intelligence, pages 457-464,1990.\[Penman Natural Language Group, 1989\] Penman Nat-ural Language Group.
The Penman user guide.
Tech-nical report, Information Sciences Institute, Marinadel Rey, CA 90292, 1989.\[Reiter and Dale, 1992\] Ehud Reiter and Robert Dale.A fast algorithm for the generation of referring ex-pressions, 1992.
Submitted to COLING-1992.\[Reiter and Mellish, 1992\] Ehud Reiter and Chris Mel-lish.
Using classification to generate text, 1992.
Sub-mitted to ACL-1992.\[Reiter, 1990\] Ehud Reiter.
Generating descriptionsthat exploit a user's domain knowledge.
In RobertDale, Chris Mellish, and Michael Zock, editors, Cur-rent Research in Natural Language Generation, pages257-285.
Academic Press, London, 1990.\[Tennant et al, 1983\] Harry Tennant, Kenneth Ross,Richard Saenz, Craig Thompson, and James Miller.Menu-based natural anguage understanding.
In Pro-ceedings of the 21st Annual Meeting of the Associationfor Computational Linguistics, pages 151-158, 1983.\[Touretzky, 1986\] David Touretzky.
The Mathematics ofInheritance Systems.
Morgan Kaufmann, Los Altos,California, 1986.\[Wahlster el al., 1991\] Wolfgang Wahlster, ElisabethAndre, Som Bandyopadhyay, Winfried Graf, andThomas Rist.
WIP: The coordinated generation ofmultimodal presentations from a common represen-tation.
In Oliverio Stock, John Slack, and AndrewOrtony, editors, Computational Theories of Com.munication and their Applications.
Springer-Voting.1991.71
