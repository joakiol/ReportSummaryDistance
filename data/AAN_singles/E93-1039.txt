Generating Contextually Appropriate Intonation*Scot t  P revost  & Mark  S teedmanComputer  and Informat ion ScienceUniversity of Pennsylvania200 South 33rd StreetPh i lade lph ia  PA 19104-6389, USA(Internet: prevost?linc, cis.
upenn, edu steedman@cis, upenn, edu)Abst rac tOne source of unnaturalness in the outputof text-to-speech systems stems from the in-volvement of algorithmically generated de-fault intonation contours, applied underminimal control from syntax and semantics.It is a tribute both to the resilience of hu-man language understanding and to the in-genuity of the inventors of these algorithmsthat the results are as intelligible as theyare.
However, the result is very frequentlyunnatural, and may on occasion mislead thehearer.
This paper extends earlier work onthe relation between syntax and intonationin language understanding in CombinatoryCategorial Grammar (CCG).
A generatorwith a simple and domain-independent dis-course model can be used to direct synthe-sis of intonation contours for responses todata-base queries, to convey distinctions ofcontrast and emphasis determined by thediscourse model.1 The  Prob lemConsider the exchange shown in example (1).
Capi-tals indicate stress, and brackets informally indicatethe intonational phrasing.
The intonation contouris indicated underneath using Pierrehumbert's nota-tion (\[8\], \[1\], see \[13\] for a brief summary).
L+tt**Keywords: Speech-synthesis; Generation.
We thankMark Beutnagel and AT&T Bell Laboratories for allow-ing us access to the TTS speech synthesiser.
The re-search was supported in part by NSF grant nos IRI90-18513, IRI90-16592, and IRI91-17110, DARPA grant no.N00014-90-J-1863, and ARC) grant no.
DAAL03-89-C0031.and H* are different high pitch accents, and LH%and LL% (and its relative L) are rising and lowboundaries respectively.
The other annotations in-dicate that the intonational tunes L+H* LH% andH* LL% convey two distinct kinds of discourse in-formation.
First, both pitch accents mark any wordthat they occur on (or rather, its interpretation) for"focus", which in the context of such simple queriesas example (1) usually implies contrast of some kind.Second, the tunes as a whole mark the constituentthat bears them (or rather, its interpretation) ashaving a particular function in the discourse.
Wehave argued at length elsewhere that, at least in thissame restricted class of dialogues, the function of theL+H* LH% tune is to mark the "theme" - that is,"what the participants have agreed to talk about".The H* LL% tune (and its relative the H* L tune)mark the "theme" - that is, "what the speaker hasto say" about the theme.
This phenomenon is astrong one: the same intonation contour sounds quiteanomalous in the context of a question that does notestablish the correct open proposition as the theme,such as Which device has the fast processor?.
Onefurther point is worth noting: the unit that we arecalling the theme is not in this example a traditionalsyntactic onstituent.
Many problems in the analy-sis and synthesis of spoken language result from thepartial independence of syntactic and intonationalphrase boundaries.The architecture ofour system (shown in Figure 1)is for the most part self-explanatory, but we note thatwe follow a long tradition in separating the processof generation itself into two phases.
The "strategic"phase is one in which the content of the utteranceis planned, including the division into theme andrheme, and the assignment ofcontrastive focus.
The"tactical" phase is one in which content is mapped332(1) Q: I know that the OLD widget had a SLOW processor.But what processor does the NEW widget include?A: (The Nv.W widget includes) (a FASTL+H* LH% H*Ground Focus Ground Ground FocusTheme Rhemeprocessor)LL%GroundProsodically Annotated QuestionIntonational ParserStrategic GeneratorTactical GeneratorProsodically Annotated ResponseTTS Translator I?I Speech Synthesizer \[Spoken ResponseI Oatabas01Figure 1: Architectureonto strings of words.2 CCG-Based ProsodyWe will assume a standard CCG of the kind dis-cussed in \[11\], \[12\], and \[13\].
For example, we shallwrite the category of a transitive verb like preferseither abbreviated, as in (2)a, or in full as in (2)b:(2) a.
(S \NP) /NPb.
(S : include' z y \NP : y)/NF : zIn b, syntactic types are paired with a semantic in-terpretation via the colon operator, and the categoryis that of a function from NPs (with interpretationx) to functions from NPs (with interpretation y) toSs (with interpretation i clude' z y).
Constants ininterpretations bear primes, variables do not, andthere is a convention of left associativity.We also need the following two rules of functionalapplication, where X and Y are variables over cate-gories in either notation:(3) FUNCTIONAL APPLICATION:a. x /Y  Y x (>)b. Y X\Y => X (<)CCG extends this strictly context-free categorialbase in two respects.
First, all arguments, suchas NPs, bear only type-raised categories, such asS/ (S \NP) .
Similarly, all functions into such cate-gories, such as determiners, are functions into theraised categories, such as (S / (S \NP) ) /N .
For ex-ample, subject NPs bear the following category inthe full notation:(4) widgets := S :  s/(S : s \NP : widgets')The derivation of a simple transitive sentence ap-pears as follows in the abbreviated notation: 1(5) Widgets include sprocketsS/(S\NP) (S\NP)/NP (S\NP)\((S\NP)/Ni a)S\~PSSecond, the combinatory rules are extended to in-clude functional composition, as well as application.The following rule will be relevant below:(6) FORWARD COMPOSITION (>B):X/Y  Y /Z  ~B X /gThis rule allows a second syntactic derivation for theabove sentence, as follows: 2(7) Widget a include sprocketsS/(S\NP) (S\NP)/NP S\(S/NP)S/tn ?S1The reader is encouraged to satisfy themselvesusing the full semantic notation that this deriva-tion yields an S with the correct interpretationinclude' sprockets' widgets'.
At first glance, it looks asthough type-raising will expand the lexicon Marmingly.One way round this problem is discussed in \[14\].2The reader is again strongly uged to satisfy them-selves that the S yielded in the derivation bears the cor-rect interpretation.333The reasons for making this move, which concernthe grammar of coordinate constructions, the gen-eral class of rules from which the composition ruleis drawn, and the problem of processing in the faceof such associative rules, are discussed in tile earlierpapers, and need not concern us here.
The pointfor present purposes is that the partition of the sen-tence into the object and a non-standard constituentS : include' z '  w idge ls ' /NP  : z makes this theorystructurally and semantically perfectly suited to thedemands of intonation, as exhibited in example (1).
3We can therefore directly incorporate intonationalconstituency in syntax, as follows (cf.
\[12\], \[13\], and\[15\]).
We assign to all constituents an autonomousprosodic ategory, expressing their potential for com-bination with other prosodic categories.
Then welock these two structural systems together via thefollowing principle, which says that syntactic andprosodic constituency must be isomorphic:(S) PROSODIC CONSTITUENT CONDITION:Combination of two syntactic categoriesvia a syntactic ombinatory rule is only al-lowed if their prosodic categories can alsocombine via a prosodic combinatory rule.One way to do this is to make the boundaries ar-guments and the pitch accents functions over them.The boundaries are as follows: 4(9) L : -  b : 1LL% : -  b : ilLH% := b : lhAs in CCG, categories consist of a structural type,here b for boundary, and an interpretation, associ-ated via a colon.
The pitch accents have the follow-ing functional types: 5(10) L+H* := p : lheme/b : lhH* := p : rheme/b : l ,  P: rheme/b : l lWe further assume, following Bird \[2\], that the pres-ence of a pitch accent causes ome element(s) in thetranslation of the category to be marked as focussed,a matter which we will for simplicity assume occursat the level of the lexicon.
For example, when in-cludes bears a pitch accent, its category will be asfollows:(11) (S : ( * inc lude ' )xYkNP:y ) /NP :xThe categories that result from the combination ofa pitch accent and a boundary may or may not con-stitute entire prosodic phrases, since there may be aprenuclear null tone.
There may also be a null toneseparating the pitch accent(s) from the boundary.aA similar argument in a related categorial frameworkis made by Moortgat \[6\].4These categories slightly depart from Pierrehumbert.5 Here we are ignoring the possibility of multiple pitchaccents in the same prosodic phrase, but cf.
\[13\].
(Both possibilities are illustrated in (1)).
We there-fore assign the following category to the null tone,which can thereby apply to the right to any non-functional category of the form X : Y, and composeto their right with any function into such a category,including another null tone, to yield the same cate-gory:(12) 0 := X :Y /X :YIt is this omnivorous category that allows intona-tional tunes to be spread over arbitrarily large con-stituents, since it allows the pitch accent's desire fora boundary to propagate via composition into thenull tone category (see the earlier papers).In order to allow the derivation to proceed abovethe level of complete prosodic phrases identifyingthemes and rhemes, we need two unary category-changing rules to mark the interpretation a of thecorresponding grammatical category with that dis-course function and change the phonological cate-gory, thus: 6(13) ~ ::~p : X p/p(14) ~, =>P:X  pThese rules change the prosodic ategory either to p,or to an endocentric function over p. (These typescapture the fact that the LL% boundary can onlyoccur at the end of a sentence, thereby correctingan overgeneration i  the version of this theory inSteedman \[13\], noted by Bird \[2\]).
The fact that pis an atom rather than a term of the form X : Y isimportant, since it means that it can combine onlywith another p. This is vital to the preservation ofthe intonation structure/The application of the above two rules to a com-plete intonational phrase should be thought of as pre-cipitating a side-effect whereby a copy of the categoryE is associated with the clause as its theme or rheme.
(We gloss over details of how themes and rhemes areassociated with a particular clause, as well as a num-ber of further complications arising in sentences withmore than one theme).In \[13\] and \[15\], a related set of rules of whichthe present ones form a subset are shown to be well-behaved with a wide range of examples.
Example(15) gives the derivation for an example related to(7) (since the raised object category is not crucial, ithas been replaced by NP to ease comprehension): sNote that it is the identification of the theme and8These rules represent both a departure from the ear-lier papers and a slight simplification of what is actuallyneeded to allow prosodic phrases to combine correctly.7The category has the same effect of preventing fur-ther composition i to the null tone achieved in the earlierpapers by a restriction on forward prosodic omposition.SNote the focus-marking effect of the pitch accents.334(15) Widgets include sprockets( L+H* LHT, ) ( H* LLT~ ).
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.S: s/(S: s\NP: *eidget ~) (S: include ~ x y\NP: y)/NP: x NP: *sprockets 'p: theme/b: lh b: lh P: rhemeS: include ' ?
,eldget ~/NP : ?p: themeS : inc lude  ' ?
*widget  ' /NP : ?
NP: *sprockets  'pip pS: inc lude '  *sprockets '  *w idget 'PTheme: S : include z *w idget /NP  : zRheme: N P : , sprocketsrheme at the stage before the final reduction that de-termines the information structure for the response,for it is at this point that discourse lements likethe open proposition are explicit, and can be used insemantically-driven sy thesis of intonation contourdirectly from the constituents.Of course, such gushingly unambiguous intonationcontours are comparitively rare in normal dialogues.Even in the context given in (7), a more usual re-sponse to the question would put low pitch - that is,the null tone in Pierrehumbert's erms - on every-thing except he focus of the rheme, sprockets, as inthe following:(16) Widgets include SPROCKETSSuch an utterance is of course ambiguous as towhether the theme is widgets or what widgets in-clude.
The earlier papers show that such "un-marked" themes, which include no pitch accent be-cause they are entirely background, can be capturedby a "Null Theme Promotion Rule", as follows: 9(17) ~ :EX:Y/X:Y ::~ p : theme3 ParsingHaving established the relationship between prosody,information structure and CCG syntax, we can nowaddress the computational problem of automaticallydirecting the synthesis of intonation contours forresponses to database queries.
Our computationalmodel (shown in Figure 1) starts with a prosodicallyannotated wh-question given as a string of wordswith associated Pierrehumbert-style pitch accent andboundary markings.
We employ a simple bottom-upshift-reduce parser of the kind presented in \[14\], mak-ing direct use of the CCG-Prosody theory describedabove, to identify the semantics of the question.
The9See the next section concerning the nondeterminisminherent in this rule.inclusion of prosodic categories in the grammar al-lows the parser to identify the information structure(theme and theme) within the question as well.
Thefocus and background information within the themeand theme (if any) is further marked by the focuspredicate * in the semantic representation.
For ex-ample, given the question (18) below, the parser pro-duces the semantic and information structure repre-sentations shown in (19).
1?
(18) I know that widgets contain cogs,but what parts do WODGETS include?L+H* LH% H* LL%(19) prop:theme:rheme:s:  Ax\[part( x )&include( *wodgets, x)\]s: Ax~art( x)&:include( ,wodgets, x)\] /(s: i.et(.wodg~ts, ~) l .p  : ~)s : include(,wodgets, x) /n p :The nondeterminism inherent in unmarked themesis handled by default: the present implementationof Null Theme Promotion delivers the longest un-marked theme that the syntax permits.
114 Strategic GenerationThe strategic phase of generating a response issomewhat simplified in the current implementation,and we have cut a number of corners.
In par-ticular, we currently assume that the question isthe sole determinant of the information structurein the answer.
This is undoubtedly an oversim-plification.
The complete specification of the se-mantic and information structures provided by theparser is used by the generator to determine theintelligible and prosodically natural response.
For1?The alert reader will note that the notation for con-stants, variables, and functional application is slightlychanged in these sections, to correspond to the Prologimplementation.11This is a simplification, but a harmless one for thesimplified query domains that we are dealing with here.335a wh-question, the semantic representation corre-sponds to a lambda expression in one or more vari-ables ranging over individuals in the database, andhas the structure of a Prolog query which we canevaluate to determine the possible instantiations ofthe open proposition.
The instantiated proposi-tion determines the semantic proposition to be con-veyed in the response.
For the example above, thisis part(sprockets)&include( .wodgets,  .sprockets) -"Wodgets include sprockets".Note that the derived semantics includes the neces-sary occurrences of the focus predicate *, determinedas follows.
All terms that are focused in the ques-tion semantics are focused in the response semantics.Intuitively, the instantiated variable in the responsesemantics must also be focused since it represents heinformation which is new in the response.
For morecomplex rhemes such as quantified NPs with modi-fiers, we focus those elements of the semantic repre-sentation that are new in the current context.
(Thatis, ones which did not figure in the interpretationof the original query).
Thus, given a question suchas (1), we choose to focus the modifier "fast" ratherthan the noun "processor" in the rheme.
Similary,in the exchange below, we focus "processor" insteadof "fast" because of its newness in the context.
(20) Q: What fast component does the widgetinclude?A: The widget includes a fast PROCES-SOR.To determine an appropriate intonation contourfor the utterance, we must further determine theappropriate information structure.
Fortunately, forthe simple question-answering task, the informationstructure of the response can be assumed to be com-pletely determined by the original query.
The themeof a question corresponds to "what the question isabout" - in this case, "parts".
The theme of a ques-tion corresponds to "what the speaker wants to knowabout the theme" - here, "What wodgets include".It follows that we expect the theme of the ques-tion to determine the theme of the response.
Forexample (18), the theme of the response should beS : include(.wodgets,  x ) /NP  : x, as in (21) below.Note that we simplify the strategic generation prob-lem by including the syntactic ategory in our repre-sention of the theme (as determined by the syntac-tic category of the theme of the original question)) 2Given the syntactic and semantic representation ofthe theme of the response, the CCG combinationrules can easily be invoked to determine the theme ofthe response.
The rheme is simply the complement12Here we are cutting another corner: the theme, andhence the rheme, are fully specified syntactically, as wellas semantically, as a result of the analysis of the question:in a more general system, we would presumably need tospecify syntactic type from scratch, starting from puresemantics.of the theme with respect o the overall semantics ofthe response, as in (21) below, obtained by instan-tiating the result and one input of the appropriatecombinatory rule (cf.
\[7\]): la(21) prop: s: include(,wodgets, *sprockets)theme: s : include(.wodgets, x)/np : xtheme: np : ,sprockets5 Tact i ca l  Generat ion  and  CCGJust as the shift-reduce parser sketched above canreadily be made to construct he interpretations andinformation structures shown in the examples, specif-ically marking themes, rhemes and their foci, so it isrelatively easy to do the reverse---to generate pro-sidically annotated strings from a focus-marked se-mantic representation f themes and rhemes.For simplicity, we start by describing the syntac-tic and semantic aspects of the generator, ignoringprosody for the moment.
In constructing a tacticalgeneration schema, several design options are avail-able, including bottom-up, top-down and semantichead-driven models (\[3\], \[10\]).
We adopt a hybridapproach, employing a basic top-down strategy thattakes advantage of the CCG notion of "functionalhead" to avoid fruitless search.
While this tech-nique exhibits some inefficiencies characteristic of adepth-first search, it has several significant advan-tages.
First, it does not rely on a specific seman-tic representation, and requires only that the seman-tics be compositional and representable in Prolog.Thus the generating procedure is independent of theparticular grammar.
This modular character of thesystem has been very useful in developing the com-petence grammar proposed in the preceding section,and offers a basis for proving the completeness ofthe implementation with respect o the competencetheory.The tactical generation program is written in Pro-log, and works as follows.
Starting with a syntacticconstituent (initially s) and a semantic formula, weutilize the CCG reduction rules to determine possiblesubconstituents hat can combine to yield the orig-inal constituent, invoking the generator ecursivelyto generate the proposed subconstituents.
The basecase of the recursion occurs when a category we wishto generate unifies with a category in the lexicon.For example, suppose we wish to generate an utter-ance corresponding to the category s:walks'(mary').Since the given category does not unify with any cat-egory in the lexicon, the program proposes possiblesubconstituents by checking the CCG combinationrules in some pre-determined order.
By the back-ward function application rule, we might hypothe-size that the categories x and s:walks'(mary') \z arethe subconstituents of s:walks'(mary'), where x is13Again the example is simplified by the use of a non-raised category for the object.336(22) gen(s:def(x, ((engine(x)~new(x))&shiny(x))~def(y, ((gear(y)&rotating(y))&largest(y))~contains(x,y)))).RESULT: the shiny nee engine contains the largest rotating gear.
(23) genCs:exists(z, (engineerCz)~brilliantCz))kexists(x,(design(x)~revolutionary(x))&def(y, (engine(y)~new(y))~gave(z,y,x))))).RESULT: a b r i l l i an t  engineer  gave the nee engine a revo lu t ionary  des ign .
(24) gen(s:def(x,(widget(x)~*new(x))~probably(contains(x,y)))/np:y @ p:theme).RESULT: the new@lhstar vidget probably containsQlhb.
(25) gen(np:(x's)'def(x,(processor(x)&*fastest(x))ls) @ ph:rheme).RESULT: the fas tes t@hstarprocessor@l lb .
(26) gen(s:def(x,(widget(x)&new(x))& *probably(contains(x,y)))Inp:y @ p:theme).RESULT: the new widget probably@lhstarcontains@lhb.
(27) gen(s:def(x,(*widget(x)~new(x))~contains(x,y))/np:y @ p:theme).RESULT: the new widgetQlhstar contains@lhb.some variable.
If we recursively call the generatoron s:walks'(mary')kx, we find that it unifies withthe category s:walks'(y}knp:y in the lexicon, corre-sponding to the lexical item walks.
This unificationforces the complementary category z to unify withnp:mary', which yields the lexical item mary whenthe generator is recursively invoked.
Concatenat-ing the results of generating the proposed subcon-stituents therefore gives the string "Mary walks.
"The top-down nature of the generation schemehas a number of important consequences.
First,the order in which we generate the postulatedsubconstituents determines whether the generationsucceeds.
Had we chosen to generate x befores:walks'(mary'}kx, we would have entered a poten-tially infinite recursion, since x unifies with everycategory in the lexicon.
For this reason, our gener-ator always chooses to recursively generate the sub-constituent that acts as the functional head beforethe subconstituent that acts as the argument underthe CCG combinatory rules.
By strictly observingthis principle, we ensure that as much semantic infor-mation as possible is deployed, thereby constrainingthe search space by prohibiting spurious unificationswith incorrect items in the lexicon.
For this reason,we refer to our generation scheme as a "functionalhead"-driven, top-down approach.One disadvantage of the top-down generation tech-nique is its susceptibility to the non-terminationproblem.
If a given path through the search spacedoes not lead to unification with an item in thelexicon, some condition which aborts the path inquestion at some search depth must be imposed.Note that whenever the CCG function applicationrules are used to propose possible subconstituents tobe recursively generated, the subconstituent actingas the functional head has one more curried argu-ment than its parent.
Since we know that in En-glish there is a limit to the number of argumentsthat a functional category can take, we can abortfruitless search paths by imposing a limit on thenumber of curried arguments that a CCG categorycan possess.
The current implementation allowscategories with up to three arguments, the mini-mum needed for constructions involving di-transitiveverbs.
Note that this strategy does not prohibitthe generation of categories whose arguments hem-selves are complex categories.
Thus, we allow cat-egories such as ((s\np)/np)\(((s\np)/np)/np) forraised indirect objects, but not categories such as(((s\ np}/np)/np)/np.When the CCG composition rule is used to pro-pose possible subconstituents, the subconstituentsdo not have more curried arguments han their par-ent.
Consequently, imposing a bound of the typedescribed above will not necessarily avoid endless re-cursion in all cases.
Suppose, for example that wewish to generate a category of the form s/x, where sis a fully instantiated expression and x is a variable.If the function application rules fail to produce sub-constituents hat generate the category, we rely onthe CCG composition rule to propose the possiblesubconstituents s/y and y/x.
Since s/x and s/y areidentical categories to within renaming of variables,the recursion will continue indefinitely.
We rectifythis situation by invoking the composition rule only337if the original category has an instantiation for bothits argument and result.
Such a solution imposeslimitations on the types of derivations allowed by thesystem, but retains the simplicity and transparencyof the algorithm.
Merely imposing a limit on thedepth of the recursion provides a more general solu-tion.
Examples of the types of sentences that can begenerated appear in (22) and (23).This procedure can immediately be applied to theprosodically augmented grammar.
To do so, wemerely enforce the Prosodic Constituent Conditionat each step in the generation.
That is, whenevera pair of subconstituents are considered (by revers-ing the CCG combination rules), a pair of prosodicsubconstituents are also considered and recursivelygenerated using the prosodic ombinatory ules.
Ex-amples (24) and (25) illustrate the generation of in-tonation for the theme and theme of the utterance"The NEW widget probably contains the FASTESTprocessor" .14 Examples (26) and (27) manifest theintonational results of moving the thematic focusamong the various propositions in the semantic rep-resentation of the theme "The new widget probablycontains... "6 SynthesisWe showed in the previous ection how constituentsof the type shown in (21) can generate intonation-ally annotated strings.
The resulting string forthe current example is "wodgets@lhstar include@lhbsprockets@\[hstar, llb\]."
The final aspect of gener-ation involves translating such a string into a formusable by a suitable speech synthesiser.
Currently,we use the Bell Laboratories ITS  system (\[5\]) as apost-processor to synthesise the speech wave.
Ex-ample (28) shows the translated output for the sameexample, as it is sent to this synthesiser.
(28) \!> \!
*L+H*I wodgets \ !
f L1  include\ !pL1  \ !bH1 \!
*H*2 sprockets\ !pL1  \ !bL1  .
\ (  * \ [20 \ ]  \ )We stress that we use TTS as an unmodified outputdevice, without any fine tuning other than in thelexicon.
While TTS is particularly easy to use withPierrehumbert's notation, we are confident that oursystem can easily be adapted to other synthesisers.7 Resu l t sThe system just described produces sharp andnatural-sounding distinctions of intonation contourin minimal pairs of queries like the following:14The ~ symbol separates yntactic ategories fromtheir corresponding prosodic ategories and lexical itemsfrom their pitch/boundary markings.
(29) Q: I know that widgets contain cogs, butwhat gadgets include SPROCKETS?L+H* LH% H* LL%prop:  s : Ax\[gadget(x)&inel(x, *sprockets)\]theme:  s : Ax\[gadget(~)&inel(x,*sprockets)\]\](s : inel(x, *sprockets)\rip: x)rheme:  s : ine l (x , *sproekets ) \np :xA: prop:  s : inel(*wodgcts, *sprockets)theme:  s : inc l (x , *sproekets ) \np :xrheme:  np  : *wodgetsWODGETS include SPROCKETS.H* L L+H* LH%(30) Q: I know that widgets contain cogs, butwhat parts do WODGETS include?L+H* LH% H* LL%prop:  s : Ax\[part(x)&inel(*wodgets,x)\]theme:  s : Ax~gart(x)&inel(*wodgets,x)\]/(s : inel(*wodgets,x)/np : x )rheme:  s : incl(*wodgcts, x) /np : xA: prop:  s : inel(*wodgets, *sprockets)theme:  s : inel(*wodgets,x)/np : xrheme: np:  *sprocketsWODGETS include SPROCKETS.L+H* LH% H* LL%(31) Q: I know that programmers u e widgets,but which people DESIGN widgets?L+H* LH% H* LL%prop:  s : Ax~eople(x)&*design(x,widgets)\]theme:  s : Ax~eoplc(x)&*desian(x, widgets)\] I(s : *design(x,widgets)\np : x)rheme:  s : *design(x,widgets)\np : xA: prop:  s : *design(*engineers,widgets)theme:  s : *design(x, widgcts)\np : xrheme:  np: *engineersENGINEERS DESIGN widgets.H* L L+H* LH%(32) Q: If engineers design widgets,which people design WODGETS?L+H* LH% H* LL%prop:  s : Ax~cople(x)&design(x,*wodgets)\]theme:  s : Ax\[people(x)&design(x, *wod#ets)\]/(s : design(x, ,wodgets)\np : ~)rheme:  s : design(x, *wodgets)\np : xA: prop:  s : design(*programmers, *wodgets)theme: s : design(x, *wodgets)\np : xrheme:  np : *programmersPROGRAMMERS design WODGETS.H* L L+H* LH%Examples (29) and (30) illustrate the ability of oursystem to produce appropriately different intonationcontours for identical strings of words depending onthe context, which determines the information struc-ture of the response..If the responses in these ex-amples are interchanged, the result sounds distinctly338unnatural in the given contexts.
From examples (31)and (32), it will be apparent hat our system hasthe ability to make distinctions in focus placementwithin themes and rhemes based on context.
Theissue of focus placement can be crucial in more com-plex themes and rhemes, as shown below:(33) Q: I know the old widget has the slowest processor,but which widget has the FASTEST processor?L+H* LH% H* LL%A: The NEW widget has the FASTEST processor.H* L L+H* LH%(34) Q: The old widget has the slowest processor,but which processor does the NEW widget have?L+H* LH% H* LL%A" The NEW widget has the FASTEST processor.L+H* LH~ H* LL%(35) Q:  The new WODGET has the slowest processor,but which processor does the new WIDGET have?L+H*  LH~ H* LL%A: The new WIDGET has the FASTEST processor.L+H* LH~0 H* LL%As noted earlier, such precisely specified themesare uncommon in normal dialogue.
Consequently,the Null Tone Promotion rule is employed for un-marked themes, allowing the types of responses in(36) and (37) below.
The theme is taken to be thelongest possible prosodically unmarked constituentallowed by the syntax.
(36) Q:  I know that  programmers use widgets,but which people DESIGN widgets?H* LL%A: ENGINEERS design widgets.H* L(37) Q: If engineers design widgets,which people design WODGETS?H* LL%A: PROGRAMMERS design wodgets.H* LAlthough we have only briefly discussed the pos-sibility of multiple pitch accents within a theme orrheme, we have included such a capability in our im-plementation.
The system's ability to handle multi-ple pitch accents is illustrated by the following ex-ample.
(38) Q: I know that students USE WODGETS,but which people DESIGN WIDGETS?H* H* LL%A: ENGINEERS design widgets.H* LWhile many important problems remain, exam-ples like these show that it is possible to producesynthesized speech with contextually appropriate in-tonational contours using a combinatory theory ofprosody and information structure that is completelytransparent to syntax and semantics.
The modelof utterance generation for Combinatory CategorialGrammars presented here implements the prosodictheory in a similarly transparent and straightforwardmanner.8 References\[1\] Beckman, Mary and Janet Pierrehumbert:1986, 'Intonational Structure in Japanese andEnglish', Phonology Yearbook, 3 255-310.\[2\] Bird, Steven: 1991, 'Focus and phrasing in Uni-fication Categorial Grammar', in Steven Bird(ed.
), Declarative Perspectives on Phonology,Working Papers in Cognitive Science 7, Univer-sity of Edinburgh.
139-166.\[3\] Gerdeman, Dale and Erhard Hinrichs: 1990.Functor-driven Natural Language Generationwith Categorial Unification Grammars.
Pro-ceedings of COLING go, Helsinki, 145-150.\[4\] Jackendoff, Ray: 1972, Semantic Interpretationin Generative Grammar, MIT Press, CambridgeMA.\[5\] Liberman, Mark and A.L.
Buchsbaum: 1985,'Structure and Usage of Current Bell Labs Textto Speech Programs', Technical Memorandum,TM 11225-850731-11, AT&T Bell Laboratories.\[6\] Moortgat, Michael: 1989, Categorial Investiga-tions, Foris, Dordreeht.\[7\] Pareschi, Remo and Mark Steedman: 1987,'A Lazy Way to Chart-parse with CategorialGrammars', Proceedings of the ~5th AnnualMeeting of the Association for ComputationalLinguistics, Stanford CA, July 1987, 81-88.\[8\] Pierrehumbert, Janet: 1980, The Phonology andPhonetics of English Intonation, Ph.D disserta-tion, MIT.
(Dist.
by Indiana University Lin-guistics Club, Bloomington, IN.
)\[9\] Pierrehumbert, Janet, and Julia Hirschberg,1990, 'The Meaning of Intonational Contours inthe Interpretation of Discourse', in Philip Co-hen, Jerry Morgan, and Martha Pollack (eds.
),Intentions in Communication, MIT Press Cam-bridge MA, 271-312.\[10\] Shieber, Stuart and Yves Schabes: 1991, 'Gen-eration and Synchronous Tree-Adjoining Gram-mars', Computational Intelligence, 4, 220-228.\[11\] Steedman, Mark: 1990.
'Gapping as Con-stituent Coordination', Linguistics ~J Philoso-phy, 13, 207-263.\[12\] Steedman, Mark: 1990, 'Structure and In-tonation in Spoken Language Understanding',Proceedings of the 25th Annual Conference ofthe Association for Computational Linguistics,Pittsburgh, PA, June 1990, 9-17.\[13\] Steedman, Mark: 1991, Structure and Intona-tion, Language, 68, 260-296.\[14\] Steedman, Mark: 1991, 'Type-raising and Di-rectionality in Categorial Grammar', Proceed-ings of the 29th Annual Meeting of the Asso-ciation for Computational Linguistics, BerkeleyCA, June 1991, 71-78.339\[15\] Steedman, Mark: 1991, 'Surface Structure, In-tonation, and "Focus"', in Ewan Klein and F.Veltman (eds.
), Nalural Language and Speech,Proceedings of the ESPRIT Symposium, Brus-sels, Nov. 1991.
21-38,260-296.340
