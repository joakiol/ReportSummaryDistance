D-Tree  GrammarsOwen RambowCoGenTex,  Inc.840 Hanshaw RoadI thaca,  NY  14850owen@cogent  ex.
comK.
V i jay -ShankerDepar tment  of ComputerIn format ion ScienceUnivers i ty  of DelawareNewark,  DE 19716v i i  ay?ude l ,  eduDav id  Wei rSchool of Cognit ive &Comput ing  SciencesUnivers i ty  of SussexBr ighton,  BN1 9HQ,  UK.david, weir~cogs,  susx.
ac.
ukAbst ractDTG are designed to share some of theadvantages of TAG while overcoming someof its limitations.
DTG involve two com-position operations called subsertion andsister-adjunction.
The most distinctive fea-ture of DTG is that, unlike TAG, there iscomplete uniformity in the way that thetwo DTG operations relate lexical items:subsertion always corresponds to comple-mentation and sister-adjunction to modi-fication.
Furthermore, DTG, unlike TAG,can provide a uniform analysis for wh-movement in English and Kashmiri, des-pite the fact that the wh element in Kash-miri appears in sentence-second position,and not sentence-initial position as in Eng-lish.1 IntroductionWe define a new grammar formalism, called D-TreeGrammars (DTG), which arises from work on Tree-Adjoining Grammars (TAG) (Joshi et al, 1975).
Asalient feature of TAG is the extended omain of lo-cality it provides.
Each elementary structure canbe associated with a lexical item (as in LexicalizedTAG (LTAG) (Joshi ~ Schabes, 1991)).
Propertiesrelated to the lexical item (such as subcategoriza-tion, agreement, certain types of word order varia-tion) can be expressed within the elementary struc-ture (Kroch, 1987; Frank, 1992).
In addition, TAGremain tractable, yet their generative capacity is suf-ficient to account for certain syntactic phenomenathat, it has been argued, lie beyond Context-FreeGrammars (CFG) (Shieber, 1985).
TAG, however, hastwo limitations which provide the motivation for thiswork.
The first problem (discussed in Section 1.1)is that the TAG operations of substitution and ad-junction do not map cleanly onto the relations ofcomplementation a d modification.
A second pro-blem (discussed in Section 1.2) has to do with theinability of TAG to provide analyses for certain syn-tactic phenomena.
In developing DTG we have triedto overcome these problems while remaining faith-ful to what we see as the key advantages of TAG (inparticular, its enlarged domain of locality).
In Sec-tion 1.3 we introduce some of the key features ofDTG and explain how they are intended to addressthe problems that we have identified with TAG.1,1 Derivat ions and DependenciesIn LTAG, the operations of substitution and adjunc-tion relate two lexical items.
It is therefore naturalto interpret these operations as establishing a di-rect linguistic relation between the two lexical items,namely a relation of complementation (predicate-argument relation) or of modification.
In purelyCFG-based approaches, these relations are only im-plicit.
However, they represent important linguisticintuition, they provide a uniform interface to se-mantics, and they are, as Schabes ~ Shieber (1994)argue, important in order to support statistical pa-rameters in stochastic frameworks and appropriateadjunction constraints in TAG.
In many frameworks,complementation a d modification are in fact madeexplicit: LFG (Bresnan & Kaplan, 1982) provides aseparate functional (f-) structure, and dependencygrammars (see e.g.
Mel'~uk (1988)) use these no-tions as the principal basis for syntactic represen-tation.
We will follow the dependency literaturein referring to complementation a d modificationas syntactic dependency.
As observed by Rambowand Joshi (1992), for TAG, the importance of thedependency structure means that not only the deri-ved phrase-structure tree is of interest, but also theoperations by which we obtained it from elementarystructures.
This information is encoded in the deri-vation tree (Vijay-Shanker, 1987).However, as Vijay-Shanker (1992) observes, theTAG composition operations are not used uniformly:while substitution is used only to add a (nominal)complement, adjunction is used both for modifica-tion and (clausal) complementation.
Clausal com-plementation could not be handled uniformly bysubstitution because of the existence of syntacticphenomena such as long-distance wh-movement inEnglish.
Furthermore, there is an inconsistency in151the directionality of the operations used for comple-mentation i  TAG@: nominal complements are sub-stituted into their governing verb's tree, while thegoverning verb's tree is adjoined into its own clausalcomplement.
The fact that adjunction and substitu-tion are used in a linguistically heterogeneous man-ner means that (standard) "lAG derivation trees donot provide a good representation f the dependen-cies between the words of the sentence, i.e., of thepredicate-argument a d modification structure.adoreS ~  adoreMary / OBJ\ seemhotdog c la im S U ~\[MOD I sUBJ Mary / OBJ \ seemspicy he hotdog claimI MOD MOD~MOD I SUBJsmall spicy small heFigure 1: Derivation trees for (1): original definition(left); Schabes & Shieber definition (right)For instance, English sentence (1) gets the deriva-tion structure shown on the left in Figure 11 .
(1) Small spicy hotdogs he claims Mary seems to adoreWhen comparing this derivation structure to thedependency structure in Figure 2, the following pro-blems become apparent.
First, both adjectives de-pend on hotdog, while in the derivation structuresmall is a daughter of spicy.
In addition, seem de-pends on claim (as does its nominal argument, he),and adore depends on seem.
In the derivation struc-ture, seem is a daughter of adore (the direction doesnot express the actual dependency), and claim is alsoa daughter of adore (though neither is an argumentof the other).claimSUB J~"~OMPhe seemI COMPadoreSUB~BJMary hotdogMOD ~.~ODsp icy  smallFigure 2: Dependency tree for (1)Schabes & Shieber (1994) solve the first problem1For clarity, we depart from standard TAG notationalpractice and annotate nodes with lexemes and arcs withgrammatical function:by distinguishing between the adjunction of modi-fiers and of clausal complements.
This gives us thederivation structure shown on the right in Figure 1.While this might provide a satisfactory treatment ofmodification at the derivation level, there are nowthree types of operations (two adjunctions and sub-stitution) for two types of dependencies (argumentsand modifiers), and the directionality problem forembedded clauses remains unsolved.In defining DTG we have attempted to resolvethese problems with the use of a single operation(that we call subsertion) for handling Ml comple-mentation and a second operation (called sister-adjunction) for modification.
Before discussionthese operations further we consider a second pro-blem with TAG that has implications for the designof these new composition operations (in particular,subsertion).1.2 Prob lemat ic  Construct ions for TAGTAG cannot be used to provide suitable analysesfor certain syntactic phenomena, including long-distance scrambling in German (Becket et hi., 1991),Romance Clitics (Bleam, 1994), wh-extraction ut ofcomplex picture-NPs (Kroch, 1987), and Kashmiriwh-extraction (presented here).
The problem in de-scribing these phenomena with TAG arises from thefact (observed by Vijay-Shanker (1992)) that adjoi-ning is an overly restricted way of combining structu-res.
We illustrate the problem by considering Kash-miri wh-extraction, drawing on Bhatt (1994).
Wh-extraction in Kashmiri proceeds as in English, ex-cept that the wh-word ends up in sentence-secondposition, with a topic from the matrix clause insentence-initial position.
This is illustrated in (2a)for a simple clause and in (2b) for a complex clause.
(2) a. rameshan kyaa dyutnay tseRameshzRG whatNOM gave yOUDATWhat did you give Ramesh?b.
rameshan kyaal chu baasaan \[ kiRameshzRG what is believeNperf thatme kor ti\]IZRG doWhat does Ramesh beheve that I did?Since the moved element does not appear insentence-initial position, the TAG analysis of Englishwh-extraction of Kroch (1987; 1989) (in which thematrix clause is adjoined into the embedded clause)cannot be transferred, and in fact no linguisticallyplausible TAG analysis appears to be available.In the past, variants of TAG have been develo-ped to extend the range of possible analyses.
InMulti-Component TAG (MCTAG) (Joshi, 1987), treesare grouped into sets which must be adjoined to-gether (multicomponent adjunction).
However, MC-TAG lack expressive power since, while syntactic re-lations are invariably subject to c-command or do-minance constraints, there is no way to state that152two trees from a set must be in a dominance rela-tion in the derived tree.
MCTAG with DominationLinks (MCTAG-DL) (Becker et al, 1991) are multi-component systems that allow for the expression ofdominance constraints.
However, MCTAG-DL share afurther problem with MCTAG: the derivation struc-tures cannot be given a linguistically meaningful in-terpretation.
Thus, they fail to address the first pro-blem we discussed (in Section 1.1).1.3 The  DTG ApproachVijay-Shanker (1992) points out that use of ad-junction for clausal complementation in TAG corre-sponds, at the level of dependency structure, to sub-stitution at the foot node s of the adjoined tree.
Ho-wever, adjunction (rather than substitution) is usedsince, in general, the structure that is substitutedmay only form part of the clausal complement: heremaining substructure of the clausal complementappears above the root of the adjoined tree.
Un-fortunately, as seen in the examples given in Sec-tion 1.2, there are cases where satisfactory analysescannot be obtained with adjunction.
In particular,using adjunction in this way cannot handle cases inwhich parts of the clausal complement are requiredto be placed within the structure of the adjoinedtree.The DTG operation of subsertion is designed toovercome this limitation.
Subsertion can be viewedas a generalization of adjunction in which com-ponents of the clausal complement (the subsertedstructure) which are not substituted can be inters-persed within the structure that is the site of thesubsertion.
Following earlier work (Becket et al,1991; Vijay-Shanker, 1992), DTG provide a mecha-nism involving the use of domination links (d-edges)that ensure that parts of the subserted structurethat are not substituted ominate those parts thatare.
Furthermore, there is a need to constrain theway in which the non-substituted components canbe interspersed 3.
This is done by either using ap-propriate feature constraints at nodes or by meansof subsertion-insertion constraints (see Section 2).We end this section by briefly commenting on theother DTG operation of sister-adjunction.
In TAG,modification is performed with adjunction of modi-fier trees that have a highly constrained form.
Inparticular, the foot nodes of these trees are alwaysdaughters of the root and either the leftmost orrightmost frontier nodes.
The effect of adjoining a2In these cases the foot node is an argument node ofthe lexical anchor.SThis was also observed by Rambow (1994a), wherean integrity constraint (first defined for an tD/LP versionof TAG (Becket et aJ., 1991)) is defined for a MCTAG-DLversion called V-TAG.
However, this was found to be in-sufficient for treating both long-distance scrambling andlong-distance topicalization in German.
V-TAG retainsadjoining (to handle topicalization) for this reason.tree of this form corresponds (almost) exactly to theaddition of a new (leftmost or rightmost) subtreebelow the node that was the site of the adjunction.For this reason, we have equipped DTG with an ope-ration (sister-adjunction) that does exactly this andnothing more.
From the definition of DTG in Sec-tion 2 it can be seen that the essential aspects ofSchabes & Shieber (1994) treatment for modifica-tion, including multiple modifications of a phrase,can be captured by using this operation 4.After defining DTG in Section 2, we discuss, inSection 3, DTG analyses for the English and Kash-miri data presented in this section.
Section 4 brieflydiscusses DTG recognition algorithms.2 Def in i t ion  o f  D-Tree  GrammarsA d - t ree  is a tree with two types of edges: domi-nation edges (d-edges)  and immediate dominationedges (i-edges).
D-edges and i-edges express domi-nation and immediate domination relations betweennodes.
These relations are never rescinded when d-trees are composed.
Thus, nodes separated by ani-edge will remain in a mother-daughter relationshipthroughout the derivation, whereas nodes separatedby an d-edge can be equated or have a path of anylength inserted between them during a derivation.D-edges and i-edges are not distributed arbitrarilyin d-trees.
For each internal node, either all of itsdaughters are linked by i-edges or it has a singledaughter that is linked to it by a d-edge.
Each nodeis labelled with a terminal symbol, a nonterminalsymbol or the empty string.
A d-tree containing nd-edges can be decomposed into n + 1 componentscontaining only i-edges.D-trees can be composed using two operations:subser t ion  and s i s te r -ad junct ion .
When a d-treea is subserted into another d-tree/3, a component ofa is substituted at a frontier nonterminal node (asubst i tu t ion  node)  of/3 and all components of athat are above the substituted component are in-serted into d-edges above the substituted node orplaced above the root node.
For example, considerthe d-trees a and /3 shown in Figure 3.
Note thatcomponents are shown as triangles.
In the compo-sed d-tree 7 the component a(5) is substituted ata substitution ode in /3.
The components, a(1),a(2), and a(4) of a above a(5) drift up the pathin/3 which runs from the substitution ode.
Thesecomponents are then inser ted  into d-edges in/3 orabove the root of/3.
In general, when a componentc~(i) of some d-tree a is inserted into a d-edge bet-ween nodes ~/1 and r/2 two new d-edges are created,the first of which relates r/t and the root node ofa(i), and the second of which relates the frontier4Santorini and Mahootian (1995) provide additionalevidence against he standard TAG approach to modifi-cation from code switching data, which can be accountedfor by using sister-adjunction.153a = ~  insertion \[t~ insertion \[i i!~ substitutionp i!t!Figure 3: Subsertionnode of a( i )  that dominates the substituted com-ponent to T/2.
It is possible for components abovethe substituted node to drift arbitrarily far up thed-tree and distribute themselves within dominationedges, or above the root, in any way that is compati-ble with the domination relationships present in thesubstituted -tree.
DTG provide a mechanism calledsubser t ion - inser t lon  const ra in ts  to control whatcan appear within d-edges (see below).The second composition operation involving d-trees is called sister-adjunction.
When a d-tree a issister-adjoined at a node y in a d-tree fl the com-posed d-tree 7 results from the addition to /~ ofa as a new leftmost or rightmost sub-d-tree below7/.
Note that sister-adjunction i volves the additionof exactly one new immediate domination edge andthat severM sister-adjunctions can occur at the samenode.
S i s te r -ad jo in ing  const ra in ts  pecify whered-trees can be sister-adjoined and whether they willbe right- or left-sister-adjoined (see below).A DTG is a four tuple G = (VN, VT, S, D) whereVN and VT are the usual nonterminal and termi-nal alphabets, S E V~ is a distinguished nonter-minal and D is a finite set of e lementary  d-trees.A DTG is said to be lex ica l i zed if each d-tree inthe grammar has at least one terminal node.
Theelementary d-trees of a grammar G have two addi-tionM annotations: subsertion-insertion constraintsand sister-adjoining constraints?
These will be de-scribed below, but first we define simultaneouslyDTG derivations and subsertion-adjoining trees (SA-trees), which are partial derivation structures thatcan be interpreted as representing dependency in-formation, the importance of which was stressed inthe introduction 5.Consider a DTG G = (VN, VT,S, D).
In definingSA-trees, we assume some naming convention forthe elementary d-trees in D and some consistent or-dering on the components and nodes of elementaryd-trees in D. For each i, we define the set of d-treesTI(G) whose derivations are captured by SA-trees ofheight i or less.
Let To(G) be the set D of elemen-tary d-trees of G. Mark all of the components ofeachd-tree in To(G) as being subst i tu tab le  6.
Only com-ponents marked as substitutable can be substitutedin a subsertion operation.
The SA-tree for ~ E To(G)consists of a single node labelled by the elementaryd-tree name for a.For i > 0 let ~(G)  be the union of the set ~- I (G)with the set of all d-trees 7 that can be produced asfollows.
Let a E D and let 7 be the result of subser-ting or sister-adjoining the d-trees 71,- ?., 7k into awhere 71, ?
-., 7k are all in Ti-  I (G), with the subser-tions taking place at different substitution odes inas the footnote.
Only substitutable componentsof 71, .
.
- ,  3'k can be substituted in these subsertions.Only the new components of 7 that came from a aremarked as substitutable in 7.
Let V l , .
.
.
,  ~'k be theSA-trees for 71, .
.
- ,7k ,  respectively.
The SA-tree rfor 7 has root labelled by the name for a and k sub-trees r t , .
?., rk.
The edge from the root of r to theroot of the subtree ri is labelled by li (1 < i < k) de-fined as follows.
Suppose that 71 was subserted intoa and the root of r / i s  labelled by the name of somec~  E D. Only components of a ~ will have been mar-ked as substitutable in 7/- Thus, in this subsertionsome component cJ( j)  will have been substituted ata node in a with address n. In this case, the la-bel l~ is the pair (j, n).
Alternatively, 7i will haveS I)ue to space limitations, in the following definiti-ons we are forced to be somewhat imprecise when weidentify a node in a derived d-tree with the node in theelementary d-trees (elementary nodes) from which it wasderived.
This is often done in TAG literature, and hope-fully it will be clear what is intended.eWe will discuss the notion of substitutability furtherin the next section.
It is used to ensure the $A-treeis a tree.
That is, an elementary structure cannot besubserted into more than one structure since this wouldbe counter to our motivations for using subsertion forcomplementation.154been d-sister-adjoined at some node with address nin a, in which case li will be the pair (d, n) whered e { left, right }.The t ree  set T(G) generated by G.is defined asthe set of trees 7 such that: 7' E T/(G) for some i0; 7 ~ is rooted with the nonterminal S; the frontier of7' is a string in V~ ; and 7 results from the removal ofall d-edges from 7'.
A d-edge is removed by mergingthe nodes at either end of the edge as long as they arelabelled by the same symbol.
The s t r ing  languageL(G) associated with G is the set of terminal stringsappearing on the frontier of trees in T(G).We have given a reasonably precise definition ofSA-trees since they play such an important role inthe motivation for this work.
We now describe infor-mally a structure that can be used to encode a DTGderivation.
A derivation graph for 7 E T(G) resultsfrom the addition of insertion edges to a SA-tree rfor 7.
The location in 7 of an inserted elementarycomponent a(i)  can be unambiguously determinedby identifying the source of the node (say the nodewith address n in the elementary d-tree a') withwhich the root of this occurrence of a(i) is mergedwith when d-edges are removed.
The insertion edgewill relate the two (not necessarily distinct) nodescorresponding to appropriate occurrences of a anda'  and will be labelled by the pair (i, n).Each d-edge in elementary d-trees has an associa-ted subsertion-insertion constraint (SIC).
A SIC is afinite set of elementary node addresses (ENAs).
AnI=NA ~} specifies some elementary d-tree a E D, acomponent of a and the address of a node withinthat component of a.
If a ENA y/is in the SIC asso-ciated with a d-edge between 7z and r/2 in an elemen-tary d-tree a then ~/cannot appear properly withinthe path that appears from T/t to T/2 in the derivedtree 7 E T(G).Each node of elementary d-trees has an associa-ted sister-adjunction constraint (SAC).
A SAC is afinite set of pairs, each pair identifying a direction(left or right) and an elementary d-tree.
A SAC gi-ves a complete specification of what can be sister-adjoined at a node.
If a node ~/is associated witha SAC containing a pair (d, a) then the d-tree a canbe d-sister-adjoined at r/.
By definition of sister-adjunction, all substitution odes and all nodes atthe top of d-edges can be assumed to have SACs thatare the empty-set.
This prevents ister-adjunction atthese nodes.In this section we have defined "raw" DTG.
In amore refined version of the formalism we would as-sociate (a single) finite-valued feature structure witheach node 7.
It is a matter of further research to de-termine to what extent SICs and SACs can be statedglobally for a grammar, rather than being attached7Trees used in Section 3 make use of such featurestructures.to d-edges/nodes s. See the next section for a briefdiscussion of linguistic principles from which a gram-mar's SICs could be derived.3 Linguist ic  ExamplesIn this section, we show how an account for the dataintroduced in Section 1 can be given with DTG.3.1 Get t ing  Dependenc ies  R ight :  Eng l i shS Iao!sNP VP  \[fro: +10 !vP\[fin: +\]v s vI Iclaim-,  seemsS'NP So(hotdogs)  tS.~P vP\[~: +l(Mary) lvP\[fin: -IV NPI Ito adore esi!
!vP\[rm: +1vP\[f~: -IFigure 4: D-trees for (1)In Figure 4, we give a DTG that generates ent-ence (1).
Every d-tree is a projection from a lexicalanchor.
The label of the maximal projection is, weassume, determined by the morphology of the an-chor.
For example, if the anchor is a finite verb, itwill project to S, indicating that an overt syntactic("surface") subject is required for agreement withit (and perhaps case-assignment).
Furthermore, afinite verb may optionally also project to S' (as inthe d-tree shown for claims), indicating that a wh-moved or topicalized element is required.
The fi-nite verb seems also projects to S, even though itdoes not itself provide a functional subject.
In thecase of the to adore tree, the situation is the in-verse: the functional subject requires a finite verbSin this context, it might be beneficiM to considerthe expression of a feature-based lexicalist theory suchas HPSG in DTG, similar to the compilation of HPSG toTAG (Kasper et al, 1995).155to agree with, which is signaled by the fact that itscomponent's root and frontier nodes are labelled Sand VP, respectively, but the verb itself is not finiteand therefore only projects to VP\[-fin\].
Therefore,the subject will have to raise out of its clause foragreement and case assignment.
The direct objectof to adore has wh-moved out of the projection ofthe verb (we include a trace for the sake of clarity).S'NP  SN' NP VPAdjP  Ad jP  N he V SI i I IAdj Adj hotdogs claims NP VPsmall spicy Mary seems VPV NPI tto adore eFigure 5: Derived tree for (1)We add SlCs to ensure that the projections arerespected by components of other d-trees that maybe inserted during a derivation.
A SIC is associa-ted with the d-edge between VP and S node in theseems d-tree to ensure that no node labelled S ~ canbe inserted within it - i.e., it can not be filled bywith a wh-moved element.
In contrast, since boththe subject and the object of to adore have beenmoved out of the projection of the verb, the path tothese arguments do not carry any SIC at all 9.We now discuss a possible derivation.
We startout with the most deeply embedded clause, the ad-ores clause.
Before subserting its nominal argu-ments, we sister-adjoin the two adjectival trees tothe tree for hotdogs.
This is handled by a SAC asso-ciated with the N' node that allows all trees rootedin AdjP to be left sister-adjoined.
We then sub-sert this structure and the subject into the to adored-tree.
We subsert he resulting structure into theseems clause by substituting its maximal projectionnode, labelled VP\[fin: -\], at the VP\[fin: -\] frontiernode of seems, and by inserting the subject into thed-edge of the seems tree.
Now, only the S node ofthe seems tree (which is its maximal projection) issubstitutable.
Finally, we subsert his derived struc-9We enforce island effects for wh-movement by usinga \[+extract\] feature on substitution nodes.
This corre-sponds roughly to the analysis in TAG, where islandhoodis (to a large extent) enforced by designating a particularnode as the foot node (Kroch & Joshi, 1986).ture into the claims d-tree by substituting the S nodeof seems at the S complement ode of claims, andby inserting the object of adores (which has not yetbeen used in the derivation) in the d-edge of theclaims d-tree above its S node.
The derived tree isshown in Figure 5.
The SA-tree for this derivationcorresponds to the dependency tree given previouslyin Figure 2.Note that this is the only possible derivation i vol-ving these three d-trees, modulo rder of operations.To see this, consider the following putative alternatederivation.
We first subsert he to adore d-tree intothe seems tree as above, by substituting the anchorcomponent at the substitution ode of seems.
Weinsert the subject component of fo adore above theanchor component of seems.
We then subsert hisderived structure into the claims tree by substitu-ting the root of the subject component of to adoreat the S node of claims and by inserting the S nodeof the seems d-tree as well as the object componentof the to adore d-tree in the S'/S d-edge of the claimsd-tree.
This last operation isshown in Figure 6.
Theresulting phrase structure tree would be the same asin the previously discussed erivation, but the deri-vation structure is linguistically meaningless, inceto adore world have been subserted into both seemsand claims.
However, this derivation is ruled out bythe restriction that only substitutable componentscan be substituted: the subject component of theadore d-tree is not substitutable after subsertion i tothe seems d-tree, and therefore it cannot be substi-tuted into the claims d-tree.S ~NP Si(hotdogs) tS!SSubstitutionNP  ~ + l(Mary)V VP\[fin: -\]seems V NPI Ito adore eInsertions S'SNP VP  \[fm: +1J iVP \[fin: +\]V S' t claimsFigure 6: An ill-formed erivationIn the above discussion, substitutability played a156central role in ruling out the derivation.
We observein passing that the SIC associated to the d-edge inthe seems d-tree also rules out this derivation.
Thederivation requires that the S node of seems be in-serted into the SI/S d-edge of c la ims .
However, wewould have to stretch the edge over two componentswhich are both ruled out by the SIC, since they vio-late the projection from seems to its S node.
Thus,the derivation is excluded by the independently mo-tivated Sits, which enforce the notion of projection.This raises the possibility that, in grammars that ex-press certain linguistic principles, substitutability isnot needed for ruling out derivations of this nature.We intend to examine this issue in future work.3.2 Get t ing  Word  Order  R ight :  Kashmir i\[ twO~:: -~ NP VP!
(ramesha~) ' F top:-'1' / wS: - IAux VP(chu)NP VPe V VP  _Ibaasaanfin:"\[ tw?~:: q\] NP VP(kyaa) ' I" tol): "1COMP VP(ki)NP VP(m~) ~NP VPI Ie VIkorFigure 7: D-trees for (2b)Figure 7 shows the matrix and embedded clausesfor sentence (2b).
We use the node label VP throug-hout and use features uch as top (for topic) to diffe-rentiate different levels of projection.
Observe thatin both trees an argument has been fronted.
Again,we will use the SlCs to enforce the projection from alexical anchor to its maximal projection.
Since thedirect object of kor  has wh-moved out of its clause,the d-edge connecting it to the maximal projectionof its verb has no SIC.
The d-edge connecting themaximal projection of baasaan  to the Aux compo-nent, however, has a SIC that allows only VP\[wh: +,top: -\] nodes to be inserted.v r +1 ~ L  fi,,: +J.
VP ~n5:rameshas ~ f i n :  +JAux VP?huI vpe ~f~Vp \[ fin:' -t,,J tw?~:: \]baaaaanCOMP VPki NP VPme NP VPI Ie VIkorFigure 8: Derived d-tree for (2b)The derivation proceeds as follows.
We first sub-sert the embedded clause tree into the matrix clausetree.
After that, we subsert he nominal argumentsand function words.
The derived structure is shownin Figure 8.
The associated SA-tree is the desired,semantically motivated, dependency structure: theembedded clause depends on the matrix clause.In this section, we have discussed examples wherethe elementary objects have been obtained by pro-jecting from lexical items.
In these cases, we over-come both the problems with TAG considered inSection 1.
The SlCs considered here enforce thesame notion of projection that was used in obtai-ning the elementary structures.
This method of ar-riving at SlCs not only generalizes for the Englishand Kashmiri examples but also appears to apply tothe case of long-distance scrambling and topicaliza-tion in German.1574 Recognit ionIt is straightforward to ".~lapt the polynomial-timeEl<Y-style recognition algorithm for a lexicalizedUVG-DI.
of Rarnbow (1994b) for DTG.
The entriesin this array recording derivations of substrings ofinput contain a set of elementary nodes along with amulti-set of components hat must be in~rted aboveduring bottom-up recognition.
These componentsare added or removed at substitution and insertion.The algorithm simulates traversal of a derived tree;checking for SICS and SACs can be done easily.
Bec-anse of lexicalization, the size of these multi-sets ispolynomially bounded, from which the polynomialtime and space complexity of the algorithm follows.For practical purposes, especially for lexicalizedgrammars,  it is preferable to incorporate some ele-ment of prediction.
We are developing a polynomial-t ime Earley style parsing algorithm.
The parser re-turns a parse forest encoding all parses for an inputstring.
The performance of this parser is sensitive tothe grammar and input.
Indeed it appears that forgrammars that lexicalize CFG and for English gram-mar (where the structures are similar to the I_TAGdeveloped at University of Pennsylvania (XTAG Re-search Group, 1995)) we obtain cubic-time comple-xity.5 ConclusionDTG, like other formalisms in the TAG family, is lexi-calizable, but in addition, its derivations are them-selves linguistically meaningful.
In future work weintend to examine additional linguistic data, refiningaspects of our definition as needed.
We will alsostudy the formal properties of DTG, and completethe design of the Earley style parser.AcknowledgementsWe would like to thank Rakesh Bhatt for help withthe Kashmiri data.
We are also grateful to Ti lmanBecker, Gerald Gazdar, Aravind Joshi, Bob Kasper,Bill Keller, Tony Kroch, Klans Netter and the ACL-95 referees.
R, ambow was supported by the NorthAtlantic Treaty Organization under a Grant awar-ded in 1993, while at TALANA, Universitd Paris 7.Re ferencesT.
Becket, A. Joshi, & O. Rainbow.
1991.
Long distancescrambling and tree adjoining grammars.
In EACL-91, 21-26.R.
Bhatt.
1994.
Word order and case in Kashmiri.Ph.D.
thesis, Univ.
Illinois.T.
Bleam.
1994.
Clitic climbing in spanish: a GB per-spective.
In TAG+ Workshop, Tech.
Rep. TALANA-RT-94-01, Universit~ Paris 7, 16-19.J.
Bzesnan & R. Kapl~n.
1982.
Lexical-functional gram-mar: A formM system for grammatical representa~tion.
It, J. Bresnan, ed., The Mental Representationo\] Grammatical Relations.
MIT Press.R.
Frank.
1992.
Syntactic Locality and Tree AdjoiningGrammar: Grammatical, Acquisition and ProcessingPerspectives.
Ph.D. thesis, Dept.
Comp.
& Inf.
Sc.,Univ.
Pennsylvania.A.
Joshi.
1987.
An introduction to tree adjoining gram-mars.
In A. Manaster-Ramer, ed., Mathematica o\]Language, 87-114.A.
Joshi, L. Levy, & M. Takahashi.
1975.
Tree adjunctgrammars.
J Comput.
Syst.
Sci., 10(1):136-163.A.
Joshi & Y. Schabes.
1991.
Tree-adjoining rammarsand lexicalized grammars.
In M. Nivat & A.
Podelski,eds., Definability and Recognizability o/Sets of Trees.R.
Kasper, E. Kiefer, K. Netter, & K. Vijay-Shanker1995.
Compilation of HPSG to TAG.
In ACL-95.A.
Kroch.
1987.
Subjacency in a tree adjoining gram-mar.
In A. Manaster-Ramer, ed., Mathematics o/Lan-guage, 143-172.A.
Kroch.
1989.
Asymmetries in long distance extrac-tion in a Tree Adjoining Grammar.
In Mark Baltin& Anthony Kroch, editors, Alternative Conceptions ofPhrase Structure, 66-98.A.
Kroch & A. Joshi.
1986.
Analyzing extraposition ia tree adjoining grammar.
In G. Huck & A.
Ojeda,eds., Syntax ~ Semantics: Discontinuous Constitu-ents, 107-149.I.
Mel'~uk.
1988.
Dependency Syntax: Theory and Prac-tice.O.
Rambow.
1994.
Formal and Computational AspectsolNaturol Language Syntax.
Ph.D. thesis, Dept.
Corn-put.
& Inf.
Sc., Univ.
Pennsylvania.O.
Rambow.
1994.
Multiset-Valued Linear Index Gram-mars.
In ACL-94, 263-270.O.
Rainbow & A. Joshi.
1992.
A formal look at de-pendency grammars and phrase-structure grammars,with special consideration of word-order phenomena.In 1stern.
Workshop on The Meaning-Text Theory,Darmstadt.
Arbeitspapiere der GMD 671, 47-66.B.
Santorini & S. Mahootian.
1995.
Codeswitching andthe syntactic status of adnominal adjectives.
Lingua,95.Y.
Schabes & S. Shieber.
1994.
An alternative con-ception of tree-adjoining derivation.
Comput.
Ling.,20(1):91-124.S.
Shieber.
1985.
Evidence against he context-freenessof natural anguage.
Ling.
~ Phil., 8:333-343.K.
Vijay-Shanker.
1987.
A Study o\] Tree AdjoiningGrammars.
Ph.D. thesis, Dept.
Comput.
& Inf.
Sc.,Univ.
Pennsylvania.K.
Vijay-Shanker.
1992.
Using descriptions of trees ina tree adjoining grammar.
Comput.
Ling., 18(4):481-517.The XTAG Research Group.
1995.
A lexicalized tree ad-joining grammar for English.
Tech.
Rep. IRCS Report95-03, Univ.
Pennsylvania.158
