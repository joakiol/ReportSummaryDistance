TYPES IN FUNCTIONAL UNIFICATION GRAMMARSMichael ElhadadDepartment of Computer ScienceColumbia UniversityNew York, NY 10027Internet: Elhadad@cs.columbia.eduABSTRACTFunctional Unification Grammars (FUGs) arepopular for natural anguage applications because theformalism uses very few primitives and is uniform andexpressive.
In our work on text generation, we havefound that it also has annoying limitations: it is notsuited for the expression of simple, yet very common,taxonomic relations and it does not allow thespecification of completeness conditions.
We haveimplemented an extension of traditional functionalunification.
This extension addresses these limitationswhile preserving the desirable properties of FUGs.
Itis based on the notions of typed features and typedconstituents.
We show the advantages of this exten-sion in the context of a grammar used for text genera-tion.1 INTRODUCTIONUnification-based formalisms are increasinglyused in linguistic theories (Shieber, 1986) and com-putational inguistics.
In particular, one type ofunification formalism, functional unification grammar(FUG) is widely used for text generation (Kay, 1979,McKeown, 1985, Appelt, 1985, Paris, 1987,McKeown & Elhadad, 1990) and is beginning to beused for parsing (Kay, 1985, Kasper, 1987).
FUGenjoys uch popularity mainly because it allies expres-siveness with a simple economical formalism.
It usesvery few primitives, has a clean semantics(Pereira&Shieber, 1984, Kasper & Rounds, 1986, E1-hadad, 1990), is monotonic, and grants equal status tofunction and structure in the descriptions.We have implemented a functional unifier (EI-hadad, 1988) covering all the features described in(Kay, 1979) and (McKeown & Paris, 1987).
Havingused this implementation extensively, we have foundall these properties very useful, but we also have metwith limitations.
The functional unification (FU) for-malism is not well suited for the expression of simple,yet very common, taxonomic relations.
The tradi-tional way to implement such relations in FUG is ver-bose, inefficient and unreadable.
It is also impossibleto express completeness constraints on descriptions.In this paper, we present several extensions to theFU formalism that address these limitations.
Theseextensions are based on the formal semanticspresented in (Elhadad, 1990).
They have been im-plemented and tested on several applications.157We first introduce the notion of typed features.
Rallows the definition of a structure over the primitivesymbols used in the grammar.
The unifier can takeadvantage of this structure in a manner similar to (Ait-Kaci, 1984).
We then introduce the notion of typedconstituents and the FSET construct.
It allows the dec-laration of explicit constraints on the set of admissiblepaths in functional descriptions.
Typing the primitiveelements of the formalism and the constituents allowsa more concise expression of grammars and betterchecking of the input descriptions.
It also providesmore readable and better documented grammars.Most work in computational linguistics using aunification-based formalism (e.g., (Sag & Pollard,1987, Uszkoreit, 1986, Karttunen, 1986, Kay, 1979,Kaplan & Bresnan, 1982)) does not make use of ex-plicit typing.
In (Ait-Kaci, 1984), Ait-Kaci introducedV-terms, which are very similar to feature structures,and introduced the use of type inheritance in unifica-tion.
W-terms were intended to be general-purposeprogramming constructs.
We base our extension fortyped features on this work but we also add the notionof typed constituents and the ability to express com-pleteness constraints.
We also integrate the idea oftyping with the particulars of FUGs (notion of con-stituent, NONE, ANY and CSET constructs) and showthe relevance of typing for linguistic applications.2 TRADIT IONAL FUNCTIONALUNIF ICAT ION ALGORITHMThe Functional Unifier takes as input two descrip-tions, called functional descriptions or FDs andproduces a new FD if unification succeeds and failureotherwise.An FD describes a set of objects (most often lin-guistic entities) that satisfy certain properties.
It isrepresented by a set of pairs \ [a :v \ ] ,  called features,where a is an attribute (the name of the property) andv is a value, either an atomic s3anbol or recursively anFD.
An attribute a is allowed to appear at most oncein a given FD F, so that the phrase "the a of F" isalways non ambiguous (Kay, 1979).It is possible to define a natural partial order overthe set of FDs.
An FD Xis more specific than the FDY if X contains at least all the features of Y (that isX _c Y).
Two FDs are compatible if they are not con-tradictory on the value of an attribute.
Let X and Y betwo compatible FDs.
The unification of X and Y is bydefinition the most general FD that is more specificthan both X and Y.
For example, the unification of{year:88, time: {hour:5} } and{time:{mns:22}, month:10} is {year:88,month: i0, time: {hour: 5, mns:22 } }.When properties are simple (all the values are atomic),unification is therefore very similar to the union oftwo sets: XuY is the smallest set containing both Xand Y.
There are two problems that make unificationdifferent from set union: first, in general, the union oftwo FDs is not a consistent FD (it can contain twodifferent values for the same label); second, values offeatures can be complex FDs.
The mechanism ofunification is therefore a little more complex than sug-gested, but the FU mechanism is abstractly best under-stood as a union operation over FDs (cf (Kay,1979) for a full description of the algorithm).Note that contrary to structural unification (SU, asused in Prolog for example), FU is not based on orderand length.
Therefore, { a : 1, b : 2 } and  { b : 2,a : 1 \] are equivalent in FU but not in SU, and { a : 1 }and {b:2 ,  a : l  } are compatible in FU but not inSU (FDs have no fixed arity) (cf.
(Knight, 1989,p.105) for a comparison SU vs. FU).TERMINOLOGY: We introduce here terms thatconstitute a convenient vocabulary to describe our ex-tensions.
In the rest of the paper, we consider theunification of two FDs that we call input and gram-mar.
We define L as a set of labels or attribute namesand C as a set of constants, or simple atomic values.
Astring of labels (that is an element of L*) is called apath, and is noted <11...11,>.
A grammar defines adomain of admissible paths, A c L*.
A defines theskeleton of well-formed FDs.?
An FD can be an atom (element of 6') or aset of features.
One of the most attractivecharacteristics of FU is that non-atomicFDs can be abstractly viewed in twoways: either as a fiat list of equations oras a structure quivalent to a directedgraph with labeled arcs (Karttunen,1984).
The possibility of using a non-structured representation removes the em-phasis that has traditionally been placedon structure and constituency in language.?
The meta-FDs NONE and ANY areprovided to refer to the status of a featurein a description rather than to its value.\[label:NONE\] indicates that labelcannot have a ground value in the FDresulting from the unification.\[label:ANY\] indicates that label~- must have a ground value in the resultingFD.
Note that NONE is best viewed asimposing constraints on the definition ofA: an equation <II...ln>=NONE means that<ll...ln > ~ A.158?
A constituent of a complex FD is a distin-guished subset of features.
The speciallabel CSET (Constituent Set) is used toidentify constituents.
The value of CSETis a list of paths leading to all the con-stitueuts of the FD.
Constituents riggerrecursion in the FU algorithm.
Note thatCSET is part of the formalism, and that itsvalue is not a valid FD.
A related con-struct of the formalism, PATTERN, imple-ments ordering constraints on the stringsdenoted by the FDs.Among the many unification-based formalisms,the constructs NONE, ANY, PATrEKN, CSET and the no-tion of constituent are specific to FUGs.
A formalsemantics of FUGs covering all these special con-structs is presented in (Elhadad, 1990).3 TYPED FEATURESA LIMITATION OF FUGS: NO STRUCTURE OVERTHE SET OF VALUES: In FU, the set of constants C hasno structure.
It is a fiat collection of symbols with norelations between each other.
All constraints amongsymbols must be expressed in the grammar.
In lin-guistics, however, grammars assume a rich structurebetween properties: some groups of features aremutually exclusive; some features are only defined inthe context of other features.NounI QuestionI PersonalPronoun --II Demonstrative\[ QuantifiedProperI CountCommon ---II MassFigure l :  A systemforNPsLet's consider a fragment of grammar describingnoun-phrases (NPs) (cf Figure 1) using the systemicnotation given in (Winograd, 1983).
Systemic net-works, such as this one, encode the choices that needto be made to produce a complex linguistic entity.They indicate how features can be combined orwhether features are inconsistent with other combina-tions.
The configuration illustrated by this fragment istypical, and occurs very often in grammars.
1 Theschema indicates that a noun can be either a pronoun,a proper noun or a common noun.
Note that these1We have implemented a grammar similar to OVinograd, 1983,appendix B) containing 111 systems.
In this grammar, more than40% of the systems are similar to the one described here.
( (cat noun)(alt (( (noun pronoun)(pronoun( (alt (question personal demonstrative quantified) ) ) ) )( (noun proper) )( (noun common)(common ((alt (count mass))))))))Figure 2: A faulty FUG for the NP system((alt (( (noun pronoun)(common NONE)(pronoun( (alt (question personal demonstrative quantified) ) ) ) )((noun proper) (pronoun NONE) (common NONE))( (noun common)(pronoun NONE)(common ((alt (count mass))))))))The input FD describing a personal pronoun is then:((cat noun)(noun pronoun)(pronoun personal) )Figure 3: A correct FUG for the NP systemthree features are mutually exclusive.
Note also thatthe choice between the features {quest ion ,  per -sona l ,  demonstrative, quantified} isrelevant only when the feature pronoun is selected.This system therefore forbids combinations ofthe type{ pronoun, proper } and { common,personal }.The traditional technique for expressing these con-straints in a FUG is to define a label for each nonterminal symbol in the ~stem.
The resulting ram-2 mar is shown in Figure 2.
This grammar is, however,incorrect, as it allows combinations of the type( (noun proper) (pronoun question) ) oreven worse ( (noun proper) (pronounzouzou) ).
Because unification is similar to unionof features ets, a feature (pronoun quest ion)in the input would simply get added to the output.
Inorder to enforce the correct constraints, it is thereforenecessary to use the meta-FD NONE (which preventsthe addition of unwanted features) as shown in Figure3.There are two problems with this corrected FUGimplementation.
First, both the input FD describing apronoun and the grammar are redundant and longerthan needed.
Second, the branches of the alternationsin the grammar are interdependent: you need to knowin the branch for pronouns that common ouns can besub-categorized and what the other classes of nounsare.
This interdependence pr vents any modularity: ifa branch is added to an alternation, all other branches2ALT indicates that the lists that follow are alternative noun types.
159need to be modified.
It is also an inefficientmechanism as the number of pairs processed uringunification is O (n ~) for a taxonomy of depth d with anaverage ofn branches at each level.TYPED FEATURES: The problem thus is that FUGsdo not gracefiilly implement mutual exclusion andhierarchical relations.
The system of nouns is a typi-cal taxonomic relation.
The deeper the taxonomy, themore problems we have expressing it using traditionalFUGs.We propose extracting hierarchical informationfrom the FUG and expressing it as a constraint overthe symbols used.
The solution is to define a sub-sumption relation over the set of constants C. Oneway to define this order is to define types of symbols,as illustrated in Figure 4.
This is similar to V-termsdefined in (Ait-Kaci, 1984).Once types and a subsumption relation are defined,the unification algorithm must be modified.
Theatoms X and Y can be unified ff they are equal OR ifone subsumes the other.
The resuR is the mostspecific of X and Y.
The formal semantics of thisextension isdetailed in (Elhadad, 1990).With this new definition of unification, taking ad-vantage of the structure over constants, the grammarand the input become much smaller and more readableas shown in Figure 4.
There is no need to introduceartificial labels.
The input FD describing a pronoun isa simple ( (cat personal-pronoun) ) insteadof the redundant chain down the hierarchy ( (catnoun) (noun pronoun) (pronoun(define-type noun (pronoun proper common))(define-type pronoun(personal-pronoun question-pronoundemonstrative-pronoun quantified-pronoun))(define-type common (count-noun mass-noun))The ~amm~becomes:((cat noun)(alt (((cat pronoun)(cat ((alt (question-pronoun personal-pronoundemonstrative-pronoun quantified-pronoun)))))((cat proper))((cat common)(cat ((alt (count-noun mass-noun))))))))Andthemput: ((cat personal-pronoun))Figure 4: Using typed ~aturesTypedeelarat~ns:(define-constituent determiner(definite distance demonstrative possessive))InputFDd~cr~ingadeterminer:(determiner ((definite yes)(distance far)(demonstrative no)(possessive no)))F~ure 5: A typed constitue~personal)).
Because values can now share thesame label CAT, mutual exclusion is enforced withoutadding any pair \[ 1 : NONE\] .3 Note that it is now pos-sible to have several pairs \[a :v i \] in an FD F, butthat he phrase "the a of F"  is still non-ambiguous: itrefers to the most specific of the v i.
Finally, the factthat there is a taxonomy is explicitly stated in the typedefinition section whereas it used to be buried in thecode of the FUG.
This taxonomy is used to documentthe grammar and to check the validity of input FDs.4 TYPED CONSTITUENTS: THE FSETCONSTRUCTA natural extension of the notion of typed featuresis to type constituents: typing a feature restricts itspossible values; typing a constituent restricts the pos-sible features it can have.Figure 5 illustrates the idea.
The defineconstituent statement allows only the four givenfeatures to appear under the constituentdeterminer .
This statement declares what the3In this example, the grammar could be a simple flat alternation((cat ((alt (noun pronoun personal-pronoun .., common mass-nouncount-noun))))), but this expression would hide the structure ofthegIan~n~.
16 0grammar knows about determiners.
Defineconstituent is a completeness constraint asdefined in LFGs (Kaplan & Bresnan, 1982); it sayswhat the grammar needs in order to consider a con-stituent complete.
Without this construct, FDs canonly express partial information.Note that expressing such a constraint (a limit onthe arity of a constituent) is impossible in the tradi-tional FU formalism.
It would be the equivalent ofputting a NONE in the attribute field of a pair as inNONE:NONE.In general, the set of features that are allowed un-der a certain constituent depends on the value ofanother feature.
Figure 6 illustrates the problem.
Thefragment of grammar shown defines what inherentroles are defined for different ypes of processes (itfollows the classification provided in (Halliday,1985)).
We also want to enforce the constraint thatthe set of inherent roles is "closed": for an action, theinherent roles are agent, medium and benef and noth-ing else.
This constraint cannot be expressed by thestandard FUG formalism.
A de f ineconst i tuent  makes it possible, but nonethelessnot very efficient: the set of possible features underthe constituent inherent - ro les  depends on thevalue of the feature process - type .
The first partof Figure 6 shows how the correct constraint can beimplemented with de f ine  const i tuent  only:we need to exclude all the roles that are not definedWithoutFSET:(define-constituent inherent-roles(agent medium benef carrier attribute processor phenomenon))( (cat clause)(alt ( ( (process-type action)(inherent-roles ((carrler NONE)(attribute NONE)(processor NONE)(phenomenon NONE) ) ) )( (process-type attributive)(inherent-roles ( (agent NONE)(medium NONE)(benef NONE)(processor NONE)(phenomenon NONE) ) ) )( (process-type mental)(inherent-roles ((agent NONE)(medium NONE)(benef NONE)(carrier NONE)(attribute NONE) ) ) ) ) ) )With FSET:( (cat clause)(alt ( ( (process-type action)(inherent-roles ( (FEET (agent medium benef) ) ) ) )( (process-type attributive)(inherent-roles ( (FEET (carrier attribute) ) ) ) )( (process-type mental)(inherent-roles ( (FEET (processor phenomenon) ) ) ) ) ) ) )Figure 6: The FSET Constructfor the process-type.
Note that the problems are verysimilar to those encountered on the pronoun system:explosion of NONE branches, interdependent branches,long and inefficient grammar.To solve this problem, we introduce the constructFEET (feature set).
FEET specifies the complete set oflegal features at a given level of an FD.
FEET addsconstraints on the definition of the domain of admis-sible paths A.
The syntax is the same as CSET.
Notethat all the features pecified in FEET do not need toappear in an FD: only a subset of those can appear.For example, to define the class of middle verbs (e.g.,"to shine" which accepts only a medium as inherentrole and no agent), the following statement can beunified with the fragment of grammar given in Figure6:( (verb ( (lex "shine") ))(process-type action)(voice-class middle)(inherent-roles ( (FSET (medium)) ) ) )The feature (FEET (medium)) can be unifiedvAth (FSET (agent med ium benef))  and theresult is (FSET (medium)).Typing constituents i necessary to implement thetheoretical claim of LFG that the number of syntacticfunctions is limited.
It also has practical advantages.
161The first advantage is good documentation of thegrammar.
Typing also allows checking the validity ofinputs as defined by the type declarations.The second advantage is that it can be used todefine more efficient data-structures to represent FDs.As suggested by the definition of FDs, two types ofdata-structures can be used to internally representFDs: a fiat list of equations (which is more appropriatefor a language like Prolog) and a structured represen-tation (which is more natural for a language like Lisp).When all constituents are typed, it becomes possibleto use arrays or hash-tables to store FDs in Lisp,which is much more efficient We are currently inves-tigating alternative internal representations for FDs(cf.
(Pereira, 1985, Karttunen, 1985, Boyer, 1988,Hirsh, 1988) for discussions of data-structures andcompilation of FUGs).5 CONCLUSIONFunctional Descriptions are built from two com-ponents: a set C of primitives and a set L of labels.Traditionally, all structuring of FDs is done usingstrings of labels.
We have shown in this paper thatthere is much to be gained by delegating some of thestructuring to a set of primitives.
The set C is nolonger a fiat set of symbols, but is viewed as a richlystructured world.
The idea of typed-unification is notnew (Ait-Kaci, 1984), but we have integrated it for thefirst time in the context of FUGs and have shown itslinguistic relevance.
We have also introduced theFSET construct, not previously used in unification, en-dowing FUGs with the capacity to represent andreason about complete information in certain situa-tions.The structure of C can be used as a meta-description of the grammar: the type declarationsspecify what the grammar knows, and are used tocheck input FDs.
It allows the writing of much moreconcise grammars, which perform more efficiently.
Itis a great resource for documenting the grammar.The extended formalism described in this paper isimplemented in Common Lisp using the Union-Findalgorithm (Elhadad, 1988), as suggested in (Huet,1976, Ait-Kaci, 1984, Escalada-Imaz & Ghallab,1988) and is used in several research projects (Smadja& McKeown, 1990, Elhadad et al 1989, McKeown &Elhadad, 1990, McKeown et al 1991).
The sourcecode for the unifier is available to other researchers.Please contact the author for further details.We are investigating other extensions to the FUformalism, and particularly, ways to modify controlover grammars: we have developed indexing schemesfor more efficient search through the grammar andhave extended the formalism to allow the expressionof complex constraints (set union and intersection).We are now exploring ways to integrate these laterextensions more tightly to the FUG formalism.ACKNOWLEDGMENTSThis work was supported by DARPA under con-tract #N00039-84-C-0165 and NSF grantIRT-84-51438.
I would like to thank KathyMcKeown for her guidance on my work and preciouscomments on earlier drafts of this paper.
Thanks toTony Weida, Frank Smadja and Jacques Robin fortheir help in shaping this paper.
I also want to thankBob Kasper for originally suggesting using types inFUGs.162REFERENCESAit-Kaci, Hassan.
(1984).
A Lattice-theoretic Ap-proach to Computation Based on a Calculus ofPartially Ordered Type Structures.
Doctoraldissertation, University of Pennsylvania.
UMI#8505030.Appelt, Douglass E. (1985).
Planning EnglishSentences.
Studies in Natural LanguageProcessing.
Cambridge, England: CambridgeUniversity Press.Boyer, Michel.
(1988).
Towards Functional LogicGrammars.
In Dahl, V. and Saint-DizierP.
(Ed.
), Natural Language Programming andLogic Programming, II.
Amsterdam: NorthHolland.Elhadad, Michael.
(1988).
The FUF FunctionalUnifier: User's manual.
Technical ReportCUCS-408-88, Columbia University.Elhadad, Michael.
(1990).
A Set-theoretic Semanticsfor Extended FUGs.
Technical ReportCUCS-020-90, Columbia University.Elhadad, Michael, Seligmann, Doree D., Feiner, Steveand McKeown, Kathleen R. (1989).
A Com-mon Intention Description Language for Inter-active Multi-media Systems.
Presented at theWorkshop on Intelligent Interfaces, IJCAI 89.Detroit, MI.Esealada-Imaz, G. and M. Ghallab.
(1988).
A Prac-tically Efficient and Almost Linear UnificationAlgorithm.
Artificial Intelligence, 36, 249-263.Halliday, Michael A.K.
(1985).
An Introduction toFunctional Grammar.
London: Edward Ar-nold.Hirsh, Susan.
(1988).
P-PATR: A Compiler forUnification-based Grammars.
In Dahl, V. andSaint-Dizier, P.
fed.
), Natural Language Un-derstanding and Logic Programming, II.Amsterdam: North Holland.Huet, George.
(1976).
Resolution d'Equations dansdes langages d'ordre 1,2,...,co. Doctoral disser-tation, Universite de Paris VII, France.Kaplan, R.M.
and J. Bresnan.
(1982).
Lexical-functional grammar: A formal system for gram-matical representation.
In The MentalRepresentation of Grammatical Relations.Cambridge, MA: MIT Press.Karttunen, Lauri.
(July 1984).
Features and Values.Coling84.
Stanford, California: COLING,28-33.Karttunen, Lauri.
(1985).
Structure Sharing with Bi-163nary Trees.
Proceedings of the 2Zrd annualmeeting of the ACL.
ACL, 133-137.Karttunen, Lauri.
(1986).
Radical Lexicalism.
Tech-nical Report CSLI-86-66, CSLI - StanfordUniversity.Kasper, Robert.
(1987).
Systemic Grammar andFunctional Unification Grammar.
In Benson &Greaves (Ed.
), Systemic Functional Perspec-tives on discourse: selected papers from the12th International Systemic Workshop.
Nor-wood, N J: Ablex.Kasper, Robert and William Rounds.
(June 1986).
ALogical Semantics for Feature Structures.Proceedings of the 24th meeting of the ACL.Columbia University, New York, NY: ACL,257-266.Kay, M. (1979).
Functional Grammar.
Proceedingsof the 5th meeting of the Berkeley LinguisticsSociety.
Berkeley Linguistics Society.Kay, M. (1985).
Parsing in Unification grammar.
InDowty, Karttunen & Zwicky fed.
), NaturalLanguage Parsing.
Cambridge, England:Cambridge University Press.Knight, Kevin.
(March 1989).
Unification: a Mul-tidisciplinary Survey.
Computing Surveys,21(1), 93-124.McKeown, Kathleen R. (1985).
Text Generation:Using Discourse Strategies and Focus Con-straints to Generate Natural Language Text.Studies in Natural Language Processing.Cambridge, England: Cambridge UniversityPress.McKeown, Kathleen and Michael Ethadad.
(1990).
AContrastive Evaluation of Functional Unifica-tion Grammar for Surface LanguageGenerators: A Case Study in Choice of Connec-tives.
In Cecile L. Paris, William R. Swartoutand William C. Mann (Eds.
), Natural LanguageGeneration in Artificial Intelligence and Com-putational Linguistics.
Kluwer AcademicPublishers.
(to appear, also available as Tech-nical Report CUCS-407-88, Columbia Univer-sity).McKeown, Kathleen R. and Paris, Cecile L. (July1987).
Functional Unification GrammarRevisited.
Proceedings of the ACL conference.ACL, 97-103.McKeown, K., Elhadad, M., Fukumoto, Y., Lira, J.,Lombardi, C., Robin, J. and Smadja, F. (1991).Natural Language Generation i  COMET.
InDale, R., Mellish, C. and Zock, M.
(Ed.
),Proceedings of the second European Workshopon Natural Language Generation.
To appear.Paris, Cecile L. (1987).
The Use of Explicit Usermodels in Text Generation: Tailoring to aUser's level of expertise.
Doctoral dissertation,Columbia University.Pereira, Fernando.
(1985).
A Structure Sharing For-realism for Unification-based Formalisms.Proceedings of the 23rd annual meeting of theACL.
ACL, 137-144.Pereira, Fernando and Stuart Shieber.
(July 1984).The Semantics of Grammar Formalisms Seen asComputer Languages.
Proceedings of the TenthInternational Conference on ComputationalLinguistics.
Stanford University, Stanford, Ca:ACL, 123-129.Sag, I.A.
and Pollard, C. (1987).
Head-driven phrasestructure grammar: an informal synopsis.
Tech-nical Report CSLI-87-79, Center for the Studyof Language and Information.Shieber, Stuart.
(1986).
CSLILecture Notes.
Vol.
4:An introduction to Unification-Based Ap-proaches to Grammar.
Chicago, Ih Universityof Chicago Press.Smadja, Frank A. and McKeown, Kathleen R. (1990).Automatically Extracting and Representing Col-locations for Language Generation.Proceedings of the 28th annual meeting of theACL.
Pittsburgh: ACL.Uszkoreit, Hanz.
(1986).
Categorial UnificationGrammars.Winograd, Terry.
(1983).
Language as a CognitiveProcess.
Reading, Ma.
: Addison-Wesley.164
