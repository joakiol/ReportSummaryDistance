ON THE GENERATIVE POWER OF TWO.LEVEL MORPHOLOGICAL RULESGraeme RitchieDepartment of Artificial IntelligenceUniversity of Edinburgh80 South BridgeEdinburgh EH1 1HNScotlandABSTRACTKoskenniemi's model of two-level morphologyhas been very influential in recent years, butdefinitions of the formalism have generally beenphrased in terms of a compilation (sometimesleft unspecified) into a form of finite-state trans-ducers, or else have consisted of an informaloutline of the intended interpretation of therule-formalism itself.
Analyses of the propertiesof the formalism have generally focussed on thetransducer mechanism.
It is, however, possibleto give a fully formal definition of the originalrule notation directly, in a way which reflectsKoskenniemi's original informal characterisationand which does not depend directly on thenotion of a transducer (although it must retainthe essential nature of parts of the notation asbeing regular expressions).
This re-formulationallows a proof that the ability of this formalismto charaeterise mappings between strings ismore limited than that of arbitrary transducers.BACKGROUNDKoskenniemi(1983a,b;1984) proposed arule-system for describing morphological regu-larities in a language, depending centrally on theidea of matching two sequences of symbols - alexical string (made up of the lexical forms ofmorphemes) and a surface string (the sequenceof characters in the normal, inflected, form ofthe word).
In principle, symbols could beorthographic or phonological; here we shall fol-low common practice within two-level morphol-ogy, and assume orthographic forms are beinganalysed.
Koskenniemi(1983a) originallydescribed the rules in two alternative forms -high-level rules and finite-state transducers, andconjectured that an automatic ompilation pro-cedure could be devised to transform the morereadable, high-level form into the more directlyimplementable transducer form.
His implemen-tation was an interpreter for the transducers,which were directly written by the linguist asrules in their own right.
The various linguisticanalyses presented in Dalrymple et al(1983)also follow this approach, expressing rules astransition tables for transducers.
Kosken-niemi(1985) refined the notation and sketched acompilation method, and Ritchie, Black eta1.
(1987), Karttunen et al(1987) describe com-pilation techniques for two variants of the nota-tion.The aim of this paper is to give an alter-native statement of the meaning of the originalhigh-level rule notation, without recourse tocompilation into finite-state transducers.
Thebenefits of this are twofold:(i) alternative implementation techniques canbe considered or discussed with referenceto a standard interpretation which is nottied to an existing approach to implemen-tation;(ii) the formal properties of the actual rule-formalism can be assessed, rather than theformal properties of another formalism(transducers) which might in principle bemore powerful.In particular, it is possible to show that thetwo-level morphological mechanism is morelimited than the transducer model in its abilityto define relationships between strings.THE FORMALISMTWO-LEVEL NOTATIONThe original notation proposed inKoskenniemi(1983a) included some rather com-plex notational conventions which have not sur-vived into later versions.
The formalisationgiven here will deal only with the core ideas, asembodied in Koskenniemi(1985) (and otherimplementations such as Karttunen et al(1987),-51  -Ritchie, Black, et a1.(1987)).
By way of illus-tration, here is a two-level morphological ruletaken from Ritchie, Pulman et al (1987):e:0 <=> =:C2 < +:0 V:= >or < C:C V:V> <+:0 e:e>or {g:g c:c} <+:0 {e:e i:i} >or 1:0 +:0or c:c <+:0 a:0 t:t>Rules are phrased in terms of symbol-pairs(written with an infix colon), where the first inthe pair is a lexical symbol and the second is asurface symbol.
In the above example, the pairof symbols on the left (lexical "e" and surfacenull) are allowed to occur only in the contextslisted on the right of the rule, where .
.
.
.
indi-cates the position of the pair "e:0".
Each contexthas a left part and a right part, each of thesebeing essentially a regular expression oversymbol-pairs, where angle brackets indicatesequences of pairs and braces indicate alterna-tives (disjunction).
Certain versions of the nota-tion may also allow the "Kleene star" symbol"*" to indicate zero or more repetitions, and theinsertion of optional elements.
In this example,"C", "V", "C2", and "=" represent subsets of therelevant symbol alphabets and "+" is an abstractsymbol occurring in certain lexical forms.The formalism here will not include sym-bolic mnemonics for sets of symbols, nor vari-ables ranging over sets of symbols.
The seman-tics of both these notations (which are com-monly used in two-level morphology) can bestated in terms of equivalent sets of ruleswithout such abbreviatory conventions, so allthat is required is a definition of the interpreta-tion of rules containing only actual charactersymbols, together with the various devices forindicating disjunction, repetition, etc.
(Most ofthe latter could also be ignored here by a simi-lar assumption, but the presentation is perhapseasier to follow if the resemblance to the actualnotation is retained).One of the more peripheral aspects oftwo-level morphology is the role of the rules insegmenting surface input strings into lexicalforms (i.e.
the interface between a rule inter-preter and a lexicon of morphemes).
It is onlythere that the special null symbol "0" takes onspecial significance (see later section).
Hencemost of the definitions, and the subsequent dis-eussion of generative power, are concerned withsequences of symbol-pairs, which is equivalentto considering only pairs of strings of equallength.BASIC  DEFINITIONSGiven any two finite symbolic alphabets,A and A', a symbol-pair from A and A' is apair <a, a'> where a ~ A and a' ~ A'.
Suchsymbol-pairs will normally be written as "a:a'".A symbol-pair sequence from A and A' is sim-ply a sequence (possibly empty) of symbol-pairsfrom A and A', and a symbol-pair languageover A and A' is a set of symbol-pair sequences(i.e.
a subset of (A x A')*).Given two alphabets A and A', and asymbol-pair sequence S from A and A', asequence <P1,..P~> of symbol-pair sequencesfrom A and A' is said to be a partition of S iffS = P1P2....Pn (i.e.
the concatenationof the P3CONTEXTS AND '.RULESGiven two symbol sets A and A', acontext-expression from A and A' is a regularexpression over A x A'.
That is, a context-expression characterises a regular set ofsequences of symbol-pairs.
For example, theexpressionb:b v (a:a b:b)*characterises the set{e, b:b, a:a b:b, a:a b:b a:a b:b ..... }where e denotes the empty sequence.Given two alphabets A and A', a two-level morphological rule over A and A' consistsof a pair <P, C> where P is a symbol-pair f omA and A', and C is a non-empty set of pairs<LC,RC> where LC and RC are context-expressions from A and A'.
The reason forincluding a set of pairs of contexts, is that wemust cater, in the g~meral case, for there being adisjunction of pairs of contexts (as in the illus-trative example above, where the disjuncts areseparated by "or").
fin the case where the set is asingleton, this reduces to the simple (non-disjunctive) case.A context-expression ce is said to matchat the right-end a symbol-pair sequence S iffthere is a partition ",~v 1, P2> of S such that Pz isan element of the set characterised by ce.A context-expression ce is said to matchat the left-end a symbol-pair sequence S iffthere is a partition <P1, P2 > of S such that P1 is- 52  -an element of the set characterised by ce.In a two-level morphological grammar,there are generally three sorts of rule, althoughone of them can be re-expressed as a combina-tion of rules of the two more basic sorts.
Thefirst basic form of rule is the context restrictionrule written with the operator "=>" separatingthe symbol-pair from the specification of thecontexts.
For example,l:i => b:b e:ewould mean "if there is a lexical 1 paired with alexical i, then there must be a lexical and sur-face b on its left, and a lexical e and surface eon its right".On the other hand, a surface coercionrule, written using the operator "<--" indicatesthat wherever the contexts (i.e.
the right side ofthe rule) occur, and the lexical symbol is asgiven in the pair on the left side of the rule,then the surface symbol must be as given on theleft side of the rule.
For example:15 <= b:b e:ewould mean that "whenever there is a lexical band surface b on the left, a lexical e and surfacee on the right, and a lexical 1, then the surfacesymbol must be i".The third type of rule, illustrated earlier,uses the "<=>" operator, and is defined to beequivalent to a pair of rules, one of each of thetwo basic types, but with the same content.Hence, no formal definition will be given of thethird type of rule, on the grounds that a gram-mar written using the "<=>" operator is merelyan abbreviation for a larger set of rules of thetwo basic types.
We will first define the formof restriction imposed by rules normally writtenwith the "=>" operator ("context restriction"rules).A set R of two-level morphological rulescontextually allows a symbol-pair sequence Siff, for every partition <P1, a:a', P2> of S, eitherthere is no rule of the form <a:a', C> in R, orthere is at least one rule <a:a', C> in R suchthat C contains a context pair <LC, RC> suchthat LC matches P1 at the right end and RCmatches P2 at the left end.The definition corresponding to a "surfacecoercion" rule (operator "<=") is as follows.A two-level morphological rule R = <<a,a'>,C> coercively allows a symbol-pair sequence Siff for every possible partition <Px, b:b', P2> ofS and every element <LC, RC> in C such thatLC matches P1 at the right end, and RCmatches/'2 at the left end, if b = a, then b' = a'.An alternative but equivalent variation onthe last definition would be that a two-levelmorphological rule R = <<a,a'>, C> coercivelydisallows a symbol-pair sequence S iff there is apossible partition <P1, b:b', P2 > of S and an ele-ment <LC, RC> in C such that LC matches P1at the right end, RC matches P2 at the left end,b = aand b' # a'.TWO-LEVEL GRAMMARSGiven two alphabets A and A', a two-level morphological grammar based on A andA' consists of a pair <CR, SC> where CR andSC are finite sets of two-level morphologicalrules over A and A'.
The two sets of rules arethe context restriction and surface coercion rulesrespectively.One minor detail which must now be con-sidered is the question of feasible pairs.
Whenset-mnemonics and variables are used withinrules, these are deemed to cover not all possiblesymbol-pairs, but only those which are "feasi-ble".
Even when not using these abbreviatorydevices, it is necessary to have some notion offeasible symbol-pair, since such pairs areallowed to occur freely even if licensed by norule (providing no rule forbids them).
Usually,pairs of the form x:x (where x is in the intersec-tion of the two alphabets) are taken as feasible,but any pairs which appear in a rule are alsodeemed feasible.
If we assume that the notionof a symbol-pair occurring in a regular expres-sion is clear enough, occurrence within a ruleset is straightforward-- a symbol-pair a:a' issaid to occur in a rule <b:b', C> iff either a:a' =b:b' or for at least one element <LC, RC> of C,a:a' occurs in at least one of LC and RC.Given a two-level morphological grammar G =<CR, SC>, the set of feasible pairs in G is theset of symbol-pairs{a:a' Ia:a' occurs in some element of CR u SC}(In an implemented system, the user may beallowed to declare certain pairs as feasible, butat this level of abstraction we do not need toinclude this in our definition of a two-level mor-phological grammar, since such an effect couldbe represented by including rather vacuouscontext-restriction rules of the form- 53  -< a:b, { <o,o> } > ).Given a two-level morphological grammarG = <CR, SC>, a symbol-pair sequence S isgenerated by G iff all the following hold:(i) all the symbol-pairs in S are feasible pairsin G;(ii) each rule in SC coercively allows S;(iii) the set CR of rules contextually allows S.Notice that the two classes of rules aretreated slightly differently - surface coercionrules are conjoined, forming a set of constraintsall of which must be met, and context restrictionrules are disjoined, giving a set of possiblelicensing contexts.
If no rules apply to a particu-lar symbol-pair, it is acceptable if and only if itis feasible.THE LEXICONThe mechanisms described so far haveprovided a way of relating one sequence ofsymbols to another sequence (of the samelength).
There has been little or no asymmetrybetween the roles played by the two sequences,and no explicit indication of how these rulesmight achieve the practical task of segmenting aword into a set of lexical forms which appear ina given dictionary.
1 The first convention that isneeded is quite simple - the string of lexicalsymbols is regarded as being supplied by anyvalid concatenation f lexical forms.
That is, theset of lexical entries implicitly defines aninfinite set of strings of indefinite length, formedby any concatenation of lexical forms.
It is inthe course of integrating the string-matchingwith the segmentation that the special null sym-bol will be needed, so we must first define thenotion of two strings being the same after theremoval of nulls.Suppose we have some symbolic alphabet A.We define the function "delete" from A x A* toA* as follows, where, e denotes the emptystring:delete(a, ~) = edelete(a, aS) ffi delete(a, S)delete(a, bS) = b delete(a,S) for any b ~ a.x The fonnal argtnnents concerning generativepower concern only the mechanisms presented so far,so readers uninterested in the interface to the lexiconmay skip this section.The other minor formal definition weneed is to allow us to move from equal-lengthsequences of symbol-pairs to pairs of equal-length symbol-sequences in the obvious way.Suppose $1 and $2 are two sequences of sym-bols, of equal length, with Sl = al...an and $2= bl...bn.
Then the symbol-pair sequence asso-ciated with $1 and $2 is the sequenceal :bl....an:b,,We can then define a two-level morphologicalgrammar as licensing a pair of strings of equallength, iff their associated symbol-pair sequenceis generated by the grammar.A lexical segmentation system consists ofa tuple (AL, AS, 0, L, (3) where AL is a finiteset (the lexical alphabet ), AS is a finite set(the surface alphabet ), 0 is a symbol which isnot an element of AL u AS, L is a set (the setof lexical forms ) of non-null elements of AL*,and G is a two-level morphographemic grammarbased on AL u {0} and AS u {0}.Given a lexical segmentation system(AL, AS, 0, L, G), a siring S e AS* can besegmented as <ll,...l~> where li ~ L for all i, ifthere are strings S 1 ~ AL*, $2 ~ AS* such thatthe following all hold:delete(0, $1) = lll2....Indelete(0, $2) = SG licenses <$1, $2>Notice that there is no distinguished symbolindicating a morpheme boundary or word boun-dary.
Although the writer of the two-level ruleswill probably find it useful to insert certain spe-cial symbols (e.g.
the "+" used in the exampleabove), these have no special significance, andrules must be written to define how they relateto other symbols.
The boundaries between mor-phemes are implicit in the successful matchbetween the surface form (via the two-levelrules) and the concatenated sequence of lexicalforms.CROSS-L INKED LEXICONSIn Koskenniemi(1983a) (and in the papers inDalrymple t al.
(1983)) the interface to the lexi-con is slightly more complicated, since therepresentation of morphotactic information isbuilt into the interface, in the following way.
Alexical entry (for a single morpheme) containsone or more con~!nuation classes which indicatewhat categories of morpheme might follow itwithin a valid word; for example, a noun stem- 54  -is marked as allowing a noun suffix as a possi-ble continuation.
The morphemes are not held ina single, uniform dictionary, but in a set of sub-lexicons, where each lexicon corresponds tosome single morphotactic lass.
Hence, whenthe lookup process has found a particular mor-pheme (say, a noun stem) by matching entriesin the noun-stem sublexicon, the indication thatnoun-suffix is a possible continuation will causethe lookup process to continue scanning in thenoun suffix sublexicon as it matches the inputword from left to fight.
This can be rephrasedin a more declarative way by stating that aninput string S corresponds to a sequence of lexi-cal forms wt,...w,, if S matches wtw2 ...w, (theconcatenation of the forms) according to themorphographemic rules, and for each i between1 and n-l, wi+t is in a continuation class of wl.A lexical segmentation system would then haveto include a function which mapped each lexicalentry to its set of continuation classes.
Hencethe definitions given above would have to bealtered to the following.A lexical segmentation system consists ofa tuple (AL, AS, 0, {Lt,.. L,}, f, G) where AL isa finite set (the lexical alphabet ), AS is a finiteset (the surface alphabet ), 0 is a symbol whichis not an element of AL u AS, {Li} is a finiteset of finite sets of non-null elements of AL*(the sublexicons), f is a function which associ-ates with each pair <w, j> (where w ~ L/) asubset of {Lt,...Ln} (the continuation class map-ping) and G is a two-level morphographemicgrammar based on At.
u {0} and AS u {0}.Given a lexical segmentation system(AL, AS, 0, L, f, G), a string S in AS* can besegmented as <It,J,,> where lj in Lso ) for eachj, ff there are strings St in AL*, $2 in AS* suchthat the following all hold:delete(0, $1) -- ltl2....lndelete(0, $2) = SG licenses <St, $2>Ls~t ) ~ f(l/, gO)) for each j from 1 to n-1The advantage of introducing cross-linked lexi-cons is that some form of morphotactic informa-tion can be inserted directly into the lexicon,and the processing of this information incor-porated into the scanning of the surface stringvery easily.
One theoretical disadvantage is thatit imposes a finite-state structure on the morpho-tactics, which may well be undesirable.
Ifcross-linked sublexicons are not used, somefurther descriptive device is needed to expressmorphotactic nformation in a usable form, butthis could be completely separate from the two-level morphology system (cf.
Ritchie, Pulman etal.
(1987)).LANGUAGES GENERATEDWith the above definitions, it is now pos-sible to ask what sorts of symbol-pair languagescan be characterised using a two-level morpho-logical grammar.
Here we shall ignore the issueof the interface to the lexicon, and simply con-sider the capacity of two-level morphologicalgrammars to characterise sets of sequences ofsymbol-pairs.Lemma 1 ?
Let R be a set of two-level morpho-logical rules.
Let EI and E2 be symbol-pairsequences uch that R contextually allows El,and R contextually allows E2.
Then R contextu-ally allows the concatenation ERE2.Proof : If there is no symbol-pair a:a' in ErE 2such that there is some rule <<a:a'>, C> in R,then R contextually allows ErE 2 for trivial rea-sons.
Let a:a' be a symbol-pair occurring inErE2 such that there is at least one rule<<a:a',C> in R. Let <Pt, a:a',P2> be a partitionof ERE2.
It follows from the definitions of apartition and concatenation that either Pt is aproper initial subsequence of E1 and/>2 = $2E2for some sequence $2 (i.e.
this occurrence ofa:a' is in El), or Pt = EtS1 for some sequenceS t and P2 is proper final subsequence of E 2 (i.e.this occurrence of a:a' is in E2).
That is, either<Pt, a:a', $2> is a partition of El, or <St, a:a',P2> is a partition of E 2.
Assume the former istrue (a symmetrical rgument can be followedfor the latter).
Since R contextually allows E 1,for the partition <Pt, a:a', $2> of El there is atleast one rule C in R which contains at least onecontext-pair <LC, RC> such that LC matches Ptat the right end and RC matches $2 at the leftend.
If RC matches $2 at the left end, then RCwill also match $2E2 = P2 at the left end.
Hence,for the partition <P1, a:a', P2> of ErE 2 there isat least one rule C in R which contains at leastone context-pair <LC, RC> such that LCmatches Pt at the fight end and RC matches P2at the left end.
A similar argument can begiven for the occurrence of a:a' being in E 2.Since this will be true for any such a:a' in EiE2,R contextually allows ErE 2.Lemma 2 : Let R = <a:a', C> be a two-levelmorphological rule.
Let El, E2, E3 be symbol-~.-F  - 55  -pair sequences uch that E1E2E3 is coercivelyallowed by R. Then E2 is coercively allowed byR.Proof : If E 2 were not coercively allowed by R,it would mean that there is a partition <$1, a:b,$2> of E2 such that for some <LC, RC> in C,LC matches S~ at the right end, RC matches $2at the left end, and b ~ a'.
If this were thecase, there would be a corresponding partition<E~S1, a:b, $2E3> of E~E2E 3, with LC matchingE1S1 at the right end, and RC matching $2E3 atthe left end.
This would (by definition) meanthat R does not coercively allow E~E2E 3, whichis not the case by hypothesis.Corollary : Let C be a set of two-level morpho-logical rules, all of which coercively allow asymbol-pair sequence E. Then all of the rules inC coercively allow any subsequence of E.Lemma 3 : Let G be a two-level morphologicalgrammar <CR, SC>, and let L(G) be the set ofsymbol-pair sequences generated by G. Sup-pose that there are sequences E 1, E2, E B, E 4 suchthat E2 ~ L(G), E3 ~ L(G), and E1E2E3E4L(G).
Then E2E3 ~ L(G).Proof: (i) Since E1E2E3E4 ~ L(G), all thesymbol-pairs in it are feasible with respect to G,hence all the symbol-pairs in E2E3 are feasible.
(ii) Since E2 and E3 are in L(G), it follows thatCR contextually allows E2 and E3 (bydefinition).
By Lemma 1 above, this means thatCR contextually allows E2E 3.
(iii) Since E1E2E3E4 ~ L(G), it follows (bydefinition) that all of the rules in SC coercivelyallow EIE2E3E4.
Hence, by the corollary toLemma 2 above, all of the rules in SC coer-cively allow E2E3.This establishes the three defining conditionsfor E2E3 ~ L(G).REGULAR RELATIONSAs mentioned in the introduction, two-level grammars have historically been written intwo different ways-- as rules as defined here,and as sets of finite-state transducers.
In thelatter case, each transducer deals with somelinguistic phenomenon, and a sequence ofsymbol-pairs is generated by the grammar ifevery transducer in the grammar accepts it.That is, the symbol-pair sequence must be in theintersection of the languages accepted by thetransducers (viewed as acceptors); in proceduralterms, this is often referred to as "having thetransducers executed in parallel".
Hence, whenworking with the transducer formalism thelinguist has to devise independent transducerswhose intersection is the required language.Kaplan(1988) discussed the notion of aregular relation, which is, roughly speaking, asymbol-pair language which can be character-ised by a regular expression of symbol-pairs.Not surprisingly, a set of symbol-pair sequencesis regular if and only if it can be accepted by afinite-state transducer in the obvious way.Kaplan has developed an algebraic way ofmanipulating regular expressions over symbol-pairs together with ordinary regular expressionsover symbols, and one of his results is that theintersection of several regular elations is also aregular elation.
It follows that the symbol-pairlanguages accepted by the two-level transducermodel are exactly the regular elations.Kaplan also formalises the re-expressionof two-level morphological rules as transducers(i.e.
the compilation mentioned in the introduc-tion above) by constructing regular relationsequivalent to languages generated by individualtwo-level morphological rules.
This re-expression is one-way - from a two-level mor-phological rule an equivalent regular relationcan be formed.All this suggests that the "parallel trans-ducer" model is at least as powerful as the stricttwo-level grammar model defined earlier.
Theobvious question is whether there is a differencein power; in fact, there is:Theorem: There are regular relations (i.e.symbol-pair languages characterised by regularexpressions of symbol-pairs) which cannot begenerated by any two-level morphological gram-mar.Proof."
This follows directly from Lemma 3above.
Any language L generated by a two-level morphological grammar must have theproperty that if E2, E3, and E1E2E3E4 are in L,then E2E3 is in L. There are regular relationswhich do not have this property, such as thelanguage b:b v (a:a b:b)* mentioned earlier(which contains b:b and a'a b:b but not b:b a:ab:b, even though that sequence is a subsequenceof other elements of the language).There is another, rather trivial, differencebetween the power of two-level morphologicalrules and regular relations.
According to thedefinitions given here, the empty sequence ofsymbol-pairs i in every language generated bya two-level morphological grammar, since it- 56  -conforms to the definition regardless of the con-tent of the rules.
The definitions could bealtered to exclude the empty sequence fromevery language, but it is hard to see how therule mechanism could be used to allow theempty sequence in some languages but not oth-ors.CONCLUSIONSWe have presented an alternative formalstatement of the meaning of Koskenniemi'snotation for two-level morphological rules.
Thisdefinition appears to be wholly faithful to theoriginal informal explanations of the intent oftwo-level morphological rules, but is indepen-dent of the expression of the rules as transduc-ers.
The generative power of two-level morpho-logical grammars, viewed as ways of charac-terising sets of sequences of symbol-pairs, isless than that of arbitrary transducers, despitethe fact that the transducer formulation is some-times discussed as if it were the essentialdefinition of the two-level model.It now remains to determine further pro-perties of the set of two-level generatablelanguages.
Barton et al(1987) have shown thatthe recognition problem for two-level transduc-ers (including cross-linked lexicons) is NP-complete, and a very similar demonstration canbe constructed for the two-level model definedhere.
Closure properties (or lack thereof) of thetwo-level generatable anguages are yet to beproven.ACKNOWLEDGEMENTSThis work was supported by SERC/Alveygrant GR/D/83507 (IKBS 096).
I would like tothank Alan Black for useful discussions of thismaterial.REFERENCESDalrymple, Mary; Doron, Edit; Goggin,John; Goodman, Beverley; and McCarthy, John(eds) 1983 Texas Linguistic Forum 22, Depart-ment of Linguistics, University of Texas at Aus-tin, Austin, Texas.Barton, G. Edward; Berwick, Robert C.;and Ristad, Eric Sven 1987 ComputationalComplexity and Natural Language.
MIT Press,Cambridge, Mass.Kaplan, Ronald M. 1988 Talk on finite-state transducers given at the Alvey Workshopon Parsing and Pattern Recognition, Oxford,April 1988.Karttunen, Lauri; Koskenniemi, Kimmo;and Kaplan, Ronald M. 1987 A Compiler forTwo-level Phonological Rules.
Unpublishedmanuscript.Koskenniemi, Kimmo 1983a Two-levelMorphology: a general computational model forword-form recognition and production.
Publica-tion No.ll, University of Helsinki, Finland.Koskenniemi, Kimmo 1983b Two-levelmodel for morphological nalysis.
Pp.
683-685in Proceedings of the Eighth International JointConference on Artificial Intelligence, Karlsruhe.Koskenniemi, Kimmo 1984 A GeneralComputational Model for Word-Form Recogni-tion and Production.
Pp.
178-181 in Proceed-ings of COLING-84 (10th International Confer-ence on Computational Linguistics/22nd AnnualMeeting of the ACL), Stanford, CA.Koskenniemi, Kimmo 1985 Compilationof Automata from Morphological Two-LevelRules.
Pp.
143-149 in Papers from the FifthScandinavian Conference of ComputationalLinguistics , Publication No.15, University ofHelsinki, Finland.Reape, Mike; and Thompson, Henry 1988Parallel Intersection and Serial Composition ofFinite State Transducers.
Pp.535-539 inProceedings of COLING-88 (12th InternationalConference on Computational Linguistics).Bonn.Ritchie, Graeme D.; Black, Alan W.; Pal-man, Stephen G.; and Russell Graham J.
1987The Edinburgh/Cambridge Morphological Ana-lyser and Dictionary System: System Descrip-tion.
Version 3.0.
Software Paper 11, Depart-ment of Artificial Intelligence, University ofEdinburgh.Ritchie, Graeme D.; Pulman, Stephen G.;Black, Alan W.; and Russell, Graham J.
1987A Computational Framework for LexicalDescription.
Computational Linguistics 13, (3-4):290-307.- 57  -
