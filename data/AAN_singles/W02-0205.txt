MUP: The UIC Standoff Markup ToolMichael Glass and Barbara Di EugenioCS.
Dept.
M/C 152, University of Illinois at Chicago851.
S. MorganChicago, IL, 60607-7053fmglass|bdieugeng@cs.uic.eduAbstractRecently developed markup tools for di-alogue work are quite sophisticated andrequire considerable knowledge and over-head, but older tools do not support XMLstandoff markup, the current annotationstyle of choice.
For the DIAG-NLPproject we have created a ?lightweight?but modern markup tool that can be con-figured and used by the working NLP re-searcher.IntroductionSpeech and text corpora augmented with linguis-tic annotations have become essential to everydayNLP.
In the realm of discourse-related annotation,which we are interested in, linguistic annotation isstill mostly a manual effort.
Thus, the availability ofcoding tools that facilitate a human coder?s task hasbecome paramount.
In this paper we present MUP,a coding tool for standoff markup which is sophisti-cated enough to allow for a variety of different mark-ings to be applied, but which is also simple enoughto use that it does not require a sizable set up effort.Other coding tools have been developed, andsome of them do in fact target discourse phenomena.Tools specifically developed to code for discoursephenomena include Nb (Flammia and Zue, 1995),DAT (Allen and Core, 1997), MATE (McKelvie etal., 2001), and the Alembic Workbench (Day et al,1997).
MUP differs from all of them because it isstandoff (contrary to Nb and DAT), allows taggingof discontinuous constituents (contrary to Nb), andis simple to set up and use (contrary to MATE).We developed MUP within the DIAG-NLPproject (Di Eugenio et al, 2002), which is graftingan NLG component onto a tutorial program writtenin the VIVIDS (Munro, 1994) and DIAG (Towne,1997) ITS authoring environment.
MUP is targetedto written or transcribed text.
Phenomena such asintonation contours and overlapping speech have noopportunity to occur in our transcripts.
Thus MUPlacks features that spoken-language phenomena re-quire of annotation tools, e.g.
layers of annotation torepair disfluencies, the representation of simultane-ous speakers, and interfaces to speech tools.Requirements and AlternativesOur fundamental requirements for a markup tool arethat it 1) use standoff markup, 2) represent sourcedocuments, annotations, and control files in sim-ple XML, 3) have a simple graphical annotation in-terface, 4) provide control over element names, at-tribute names, and attribute values, enforcing consis-tency in the final markup, and 5) can be configuredand employed by everyday computational linguistswithout much effort or training.In standoff markup (Thompson and McKelvie,1997) the source text is inviolate and the annota-tions are kept physically separate, usually in otherfiles.
Annotatable items in the source text containlabels, while the physically separate annotations re-fer to these labels.
Since annotations are themselveslabeled, complex structures of linked annotated con-stitutents pointing to each other are representable.Thompson and McKelvie list three advantages tostandoff markup: 1) the source document might beread-only or unwieldy, 2) the annotations can devi-ate from the strictly tree-structured hierarchies thatin-line XML demands, 3) annotation files can bePhiladelphia, July 2002, pp.
37-41.
Association for Computational Linguistics.Proceedings of the Third SIGdial Workshop on Discourse and Dialogue,distributed without distributing the source text.
Wenote a few more advantages of the standoff style: 4)discontinuous segments of text can be combined ina single annotation, 5) independent parallel codersproduce independent parallel annotation files, aidingthe determination of inter-coder reliability, 6) dif-ferent annotation files can contain different layersof information, 7) when the source text is regener-ated from primary sources (for example, to incorpo-rate more information) existing annotations are pre-served.Several years before Thompson and McKelvie,the Tipster project evolved a similar standoff archi-tecture for similar reasons (Grishman, 1995).
Twonotable differences between Tipster and our own ar-chitecture are that Tipster annotations refer to abso-lute byte numbers within an unlabeled source docu-ment file, and the Tipster architecture does not useXML or SGML but instead supports its own classlibrary and internal representation.
Other markupprojects, for example the Alembic Workbench, havetaken their cue from Tipster and implemented thesame standoff idea.We specified XML for an annotation language be-cause it is a lingua franca: the vocabulary is quitecommonly known, there is a host of XML process-ing software, people can inspect it, and XML pro-vides a rich ability to add attributes to elements.The ATLAS.ti (Muhr, 2002) and the NUD*ISTannotation packages (QSR Corp., 2002) have bothbeen marketed for many years to researchers inthe ?soft?
sciences for computer-assisted qualitativeanalysis of texts.
Their emphasis is on visually il-lustrating the various codes attached to parts of thedocument so the researcher can observe patterns.Fairly complicated relationships between the anno-tation tags can be created and visualized.
An impres-sive characteristic of these packages is that ordinaryresearchers in non-technical fields can create theirown tags and commence annotating.
However theannotations in these packages point to sections of theplain-text source document by absolute byte num-ber.
Thus the annotations are not readily availablefor inspection or machine processing outside of theprograms?
own interfaces and existing XML-taggeddata cannot readily become a source document forfurther markup.
These packages are not useful forthe analysis usually needed by NLP projects.
It is<xscript id="t12">...<tutor-resp id="t12_turn_3"><w id="t12_t19">to</w><w id="t12_t20">see</w><w id="t12_t21">if</w><w id="t12_t22">the</w><w id="t12_t23">oil</w>...Figure 1: Source Document: ?to see if the oil...?interesting to note that the most recent versions ofATLAS.ti and NUD*IST have been adding the abil-ity to import and export structured documents andannotations, in XML and Rich Text Format respec-tively.At another extreme are markup tools like DAT,an annotator for DAMSL (Allen and Core, 1997), adense multi-layered annotation scheme rich with at-tributes.
DAT is extremely convenient for the coder,but it seems to require expert reprogramming whenDAMSL?s tag set changes.A Taste of MUPRunning MUP requires a source document, a DTD-like document describing a tag set, a style file con-trolling how source text and annotations are dis-played to the user, and optionally an existing annota-tion file.
The coder can then mark up the documentand save the results.Source Document Figure 1 shows an extract froma DIAG-NLP project source document.
Thesesource document elements have special meaning:word elements in line-wrapped text are tagged<word> or <w>, and formatted lines of text aretagged with <line> to be displayed without wrap-ping.
These elements must be labeled with XMLID atributes to be the target of annotations.
OtherXML elements may appear in the source documentas desired.
All source document elements can beoptionally revealed or hidden for the coder, styledaccording to the style file.Tag Descriptions Each tag is an empty XML el-ement, described in the tags description file by an<!ATTLIST> declaration.
We omit <!ELEMENT>declarations as superfluous, so this file is not fullya DTD.
The pop-up dialogue the coder uses forentering and editing attributes is driven by the<!ATTLIST> description.
Figure 2 illustrates thedescription of a tag named indicator.
The id,idrefs, and comment attributes are standard forall MUP markup tags.
This description is inter-preted, in part, as follows: idrefs will contain the IDs of ranges of tar-get elements for this annotation, selected by thecoder by painting the source text with a cursor. The comment attribute, being CDATA, con-tains arbitrary text typed by the coder. The directness, senseref and indi-cator name attributes, being enumeratedlists, will present a drop-down list of valuesto the coder.
Notice the indicator nameis specified by entity substitution for conve-nience.Snapshot of MUP at Work Figure 3 shows asnapshot of MUP at work.
A control window hasa list of available markup tags plus it shows whichsource document elements are displayed or hidden,while the source document text is in a separatewindow.
The style file controls the display of thesource document by selecting which elements andattributes to show/hide, picking colors for highlight-ing, and inserting some bracketing text before andafter.
In the snapshot, we have elected to displaythe data from the <date> tag, the <consult>element with its attributes but not the data, and the<tutor-resp> element and data with a separa-tor after it, while suppressing all other elements.
Wehave shown the text ?the blue box that lets you see ifthe oil is flowing?
being annotated as an indica-tor via a pop-up dialogue.DiscussionWe believe a simplified easy-to-configure and runtool will have wider applicability beyond our ownproject.
Other projects that manually code largequantities of typed text, e.g.
the RST dialoguemarkup project (Marcu et al, 1999), have foundit desirable to create their own markup tools.
TheCIRCSIM-Tutor project, with well over a hundredtranscripts of typed dialogue averaging an hour each,has been coding in SGML (Freedman et al, 1998;Kim, 1999) with general-purpose text editors.The MATE workbench (McKelvie et al, 2001)is a full-featured dialogue markup tool, however wefound it to be complex and difficult to use.
We sawan opportunity to borrow some of the ideas fromMATE and realize them with a simpler annotationtool.
MATE envisions three levels of user: coders,researchers for whom the coding task is performedand who need to view and manipulate the results,and experts who are able to configure the software(Carletta and Isard, 1999).
It is this last group thatcan perform the manipulations necessary for addingnew tags to the tag set and controlling how theyare displayed.
MATE permits programmatic con-trol over the coding interface by means of an XSLstyle sheet customized for a particular application.It is possible to split windows, intercept cursor op-erations, provide linking operations between text indifferent windows, and so on.
This kind of flexibil-ity is useful in annotated speech, for example in sep-arately displaying and linking two speech streamsand having several related windows update simul-taneously in response to coder actions.
In our ex-perience the MATE style sheets were quite difficultto write and debug, and for our application we didnot need the flexibility, so we dispensed with themand created our own, simpler, mechanism to controlthe display of text.
One consequence of the lessenedflexibility in MUP is that it presents a consistent cod-ing interface using familiar single-dialog GUI con-ventions.Brooks (1975) estimates that the difference be-tween a working program and a usable system withancillary utilities, shell scripts, etc.
is three times theoriginal effort, and producing a distributable prod-uct requires another factor of three effort.
The coreMUP program works well enough that we have beenusing it for several months.
Our highest priority nextenhancement is to add a utility for inter-rater com-parison, featuring some control over how parallelannotations are compared (e.g., by selecting whichof the element?s attributes must match), and auto-matically computing  statistics.
MUP runs on So-laris and Linux.
We will make it available to re-searchers as it matures.AcknowledgmentsThis work is supported by grant N00014-00-1-0640 from theONR Cognitive, Neural and Biomolecular S&T Division and<!ENTITY % indlist "( current-temp-gauge | sight-hole | water_temp_gauge ...)" ><!ATTLIST indicatorid ID #requiredidrefs IDREFS #requiredcomment CDATA #impliedindicator_name %indlist; ?unspecified?directness ( explicit | implicit | summary | unspecified ) ?unspecified?senseref ( sense | reference | unspecified ) ?unspecified?
>Figure 2: Description of indicator tagResearch Infrastructure grant EIA-9802090 from NSF.
Thanksalso to Maarika Traat and Heena Raval, who have been mosthelpful in the DIAG-NLP markup effort.ReferencesJames Allen and Mark Core.
1997.
Draft ofDAMSL: Dialog Act Markup in Several Lay-ers.
http://www.cs.rochester.edu/research/cisd/resources/damsl/.Frederick P. Brooks.
1975.
The Mythical Man-Month:Essays on Software Engineering.
Addison-Wesley,Reading, MA.Jean Carletta and Amy Isard.
1999.
The MATE an-notation workbench: User requirements.
In MarilynWalker, editor, Towards Standards and Tools for Dis-course Tagging: Proceedings of the Workshop, Col-lege Park MD, pages 11?17, New Brunswick, NJ.
As-sociation for Computational Linguistics.David Day, John Aberdeen, Lynette Hirschmann, RobynKozierok, Patricia Robinson, and Marc Vilain.
1997.Mixed-initiative development of language processingsystems.
In Fifth Conference on Applied NaturalLanguage Processing ANLP-97, pages 348?355, NewBrunswick, NJ.
Association for Computational Lin-guistics.Barbara Di Eugenio, Michael Glass, and Michael J. Tro-lio.
2002.
The DIAG experiments: Natural languagegeneration for intelligent tutoring systems.
In SecondInternational Natural Language Generation Confer-ence INLG ?02, Harriman, NY.
To appear.Giovanni Flammia and Victor Zue.
1995.
Empiricalevaluation of human performance and agreement inparsing discourse constituents in spoken dialogue.
InProc.
Eurospeech-95, Fourth European Conference onSpeech Communication and Technology, pages 1965?1968.Reva Freedman, Yujian Zhou, Jung Hee Kim, MichaelGlass, and Martha W. Evens.
1998.
SGML-basedmarkup as a step toward improving knowledge acqui-sition for text generation.
In AAAI Spring Symposiumon Applying Machine Learning to Discourse Process-ing, pages 114?117.Ralph Grishman.
1995.
Tipster phase II architecturedesign document (Tinman architecture).
Technicalreport, New York University.
http://cs.nyu.edu/pub/nlp/tipster/152.ps.Jung Hee Kim.
1999.
A manual for SGML markupof tutoring transcripts.
Technical report, CIRCSIM-Tutor Project, Illinois Institute of Technology.
http://www.cs.iit.edu/?circsim/.Daniel Marcu, Estibaliz Amorrortu, and MagdalenaRomera.
1999.
Experiments in constructing a corpusof discourse trees.
In Marilyn Walker, editor, TowardsStandards and Tools for Discourse Tagging: Proceed-ings of the Workshop, College Park MD, pages 48?57,New Brunswick, NJ.
Association for ComputationalLinguistics.Dave McKelvie, Amy Isard, Andreas Mengel,Morten Braun M?ller, Michael Grosse, and Mar-ion Klein.
2001.
The MATE workbench ?an annotation tool for XML coded speech cor-pora.
Speech Communication, 33(1?2):97?112.http://www.cogsci.ed.ac.uk/?dmck/Papers/speechcomm00.ps.Thomas Muhr.
2002.
ATLAS.ti home page.
http://www.atlasti.de/atlasneu.html.Allen Munro.
1994.
Authoring interactive graphicalmodels.
In T. de Jong, D. M. Towne, and H. Spada,editors, The Use of Computer Models for Explication,Analysis and Experiential Learning.
Springer Verlag.QSR Corp. 2002.
NUD*IST home page.
http://www.qsr.com.au/.Henry Thompson and David McKelvie.
1997.
Hy-perlink semantics for standoff markup of read-onlydocuments.
In SGML Europe 97, Barcelona.http://www.infoloom.com/gcaconfs/WEB/TOC/barcelona97toc.HTM.Douglas Towne.
1997.
Approximate reasoning tech-niques for intelligent diagnostic instruction.
Interna-tional Journal of AI in Education, 8:262?283.<   >see if the oil is flowing.
If it--end resp--problem.is, you have solved theto the oil burner view and clickTo see if the oil is flowing, goon the blue box that lets you<consult prob="1" type="RU"><tutor-resp id="t12_turn_3">--end resp--see if the oil is flowing properlythat was clogged.
Check toYou have replaced the oil filter<tutor-resp id="t12_turn_2"><consult prob="2" type= ...>DocumentTagsMarkupStyle./tlogs2001/t12.xml./styles_master../mglass/t12a.xml./tags.dtdQUITSAVERUNFile SelectionsMarkup Tagsindicationindicatoroperationalityrurelatedaggregate_objectconsultdatediag-datalogtutor-respSource Document Tagst12.xmlMUP Standoff MarkupindicatorNice cross-modal referring expthe blue box t...e oil is flowingoil-flow-indicatorexplicitsensecommentsenserefdirectnessindicator_nameindicator_20idOK CANCEL REMOVEEdit Markup Tag<   >03/23/01 F 10:00actionlogFigure 3: MUP in Action: Control Panel, Text Window, and Edit Tag Window
