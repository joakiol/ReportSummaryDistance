Technical CorrespondenceA Note  on the Ut i l i ty  of Comput ing  In ferencesin a Real Data Base Query  Env i ronmentIt is quite clear that as computer systems are madeavailable to a wider class of more naive users than atpresent, the interfaces to these systems will need tohave properties which have been termed "coopera-tive", "user friendly" and the like.
One of the manydesirable features of such an interface is the ability totake into account not only a user's direct input, butalso things which are implied in that input, to drawinferences about knowledge assumed but not ex-pressed.
A good deal of experimental and theoreticalwork has gone into determining how to make inferenc-es , what inferences to make, how to stop making in-ferences, etc.
For recent examples, see Charniak(1978), Minsky (1975), Schank and Abelson (1977).One class of inferences which appear to be rathermore computationally tractable than the others arethose based on properties of language, i.e., presupposi-tions and entailments (Weischedel, 1975).
These in-ferences have been studied in the context of naturallanguage query systems in Kaplan (1978), Kaplan andJoshi (1978), and Kaplan (1979).
Unlike inferencesbased on extra-linguistic context, this class is definite,not problematic, and does not lead to unending chainsof new inferences.
Consider the following examplefrom Kaplan and Joshi (1978):"Which programmers in Administration workon project 6471?
"A literal answer of "None" is not nearly as helpful asan answer like:"There are no programmers in Administration.
"assuming that that is correct with respect to the database.
The papers cited here describe the algorithmsused to compute the set of presuppositions and pre-sumptions of queries, and the method of choosing anappropriate response to a question which fails.Although such a feature might be useful in somequery systems, there is an associated cost, both forcomputing the inferences and for probing the database to derive a cooperative response.
It is of someinterest, therefore, to ask how often such a capabilitywould have been useful in a query system operating ina realistic environment rather than in a demonstrationsituation.
Damerau (1981) summarizes experiencewith the Transformational Question Answering System(TQA) during the first full year of operation, 1978.The full set of 788 queries as listed in that paper werescanned to determine1.
which queries contained presumptionsor presuppositions, and2.
how many of these failed to find ananswer in the data base.Of the total query set, 257, or approximately 1/3,contained presuppositions of the kind discussed byKaplan and Joshi.
Of the 61 queries to which thesystem replied "Nothing in the data base", only 11contained presumptions and presuppositions of theclass being discussed.
To be realistic, however, theseraw totals should be adjusted to take into account hefact that a number of the presuppositions having to dowith the existence of objects will turn out to be trueessentially always, (i.e., the users of the data base arenot likely to be wrong about the existence of a streetor a neighborhood association), although they mightwell be mistaken about the existence of an address orthe name of a property owner.
When cases of theformer kind are eliminated, only 61 queries of thetotal, or less than 10 percent, turn out to have sets ofpresuppositions and presumptions which might reason-ably be in error, and only 6 cases of the "Nothing inthe data base" type turn out this way.
Thus, in only 6cases, or less than 1 percent of  the queries, would a sys-tem which computed presuppositions and presumptionsfor questions whose answer set was empty have been ableto give a better answer than the 1978 TQA system.
1In view of the cost of constructing and integratinga module to handle language related inferences, and inview of the cost of extra data base accesses to derivecooperative answers, it appears that at least in applica-tions like that handled by the TQA system, time andeffort would be more profitably spent on other systemimprovements which would enable the system to han-dle a wider class of English inputs.
Nevertheless, theundoubted theoretical interest and importance ofknowing how to deal computationally with inferences1 Warren Plath (personal communication) has pointed out thatin some cases, presuppositions may have been violated even whenthe answer set is not empty.
For example, the query "In what zoneare parcels 5 and 6 in ward 1, block 1?"
might return an answer R5if, say, parcel 5 was in the data base but parcel 6 was not.
In thiscase, since the answer set is not empty, Kaplan's algorithm wouldnot be invoked, and the user might erroneously conclude that bothparcels are in the R5 zone.
However, the additional computationalload of checking presuppositions i dividually for every question, otjust those which fail, would certainly increase computation timesignificantly.American Journal of Computational Linguistics, Volume 7, Number 1, January-March 1981 43Technical Correspondence On the Util ity of Computing Inferences in Data Base Query Systemsremains high, and there is no doubt that a truly naturalsystem for language understanding requires such acapability.Fred J. DamerauMathematical Sciences DepartmentIBM Thomas J. Watson Research CenterPost Office Box 218Yorktown Heights, New York 10598ReferencesCharniak, Eugene (1978).
With a Spoon in Hand, This Must be theEating Frame.
In Theoretical Issues in Natural LanguageProcessing-2, Proceedings, University of Illinois at Urbana-Champaign, July 1978, pp.
187-198.Damerau, Fred J.
(1981).
Operating Statistics for the Transforma-tional Question Answering System.
Am.
J. of Comp.
Ling., thisissue, pp.
30-42.Kaplan, Jerrold S. (1978).
Indirect Responses to Loaded Questions.In Theoretical Issues in Natural Language Processing-2,Proceedings, University of Illinois at Urbana-Champaign, July1978, pp.
202-209.Kaplan, S. Jerrold and Joshi, Aravind K. (1978).
CooperativeResponses: An Application of Discourse Inference to Data BaseQuery Systems.
In Second Annual Conference of the CanadianSociety for Computational Studies of Intelligence, Proceedings,Toronto, Ontario, July 1978.Kaplan, Jerrold S. (1979).
Cooperative Responses from a PortableNatural Language Database Query System.
Ph.D. Thesis, De-partment of Computer and Information Science, University ofPennsylvania, Philadelphia.Minsky, Marvin (1975).
A Framework for Representing Knowl-edge.
The Psychology of Computer Vision, P.H.
Winston, ed.New York, McGraw-Hill, pp.
211-277.Schank, Roger C. and Abelson, Richard P. (1977).
Scripts, Plans,Goals, and Understanding.
Lawrence Erlbaum Press, Hillsdale,New Jersey.Weischedel, Ralph M. (1975).
Computation of a Unique Subclassof Inferences: Presupposition and Entailment.
Ph.D. Thesis,Department of Computer and Information Science, Universityof Pennsylvania, Philadelphia.Comments  on the Note by Fred J. DamerauWe think the note by Damerau is reasonable,though the discussion is based on a particular systemin a particular setting, and so caution is advisable inextrapolating from his observations.
However,  wewould like to make a few comments.
(A more detailedresponse would, of course, require us to examine the788 queries.)
In general, we think there is some confu-sion in the note regarding the phenomenon of pre-sumption in natural language vs. the applicability ofthe specific algorithm implemented in the CO-OP sys-tem to TQA.
The implication that the presuppositionanalysis is of very limited use in natural language data-base query systems is, we think, not really properlyargued or supported in this note, as elaborated below.1.
It is important o separate the theoretical analy-sis from the particular implementations and techniqueshe is discussing.
The ratio of responses that may ben-efit from presupposition analysis is one thing; the dif-ficulty of implementing a particular technique in theTQA system, and whether this is where efforts arebest applied is an entirely separate question.2.
If the system is designed appropriately from thebeginning, the "addit ional" cost of performing thepresupposition analysis may be minimal or nonexistent.In CO-OP,  no additional cost was invoked until ananswer was null, i.e.
in less than 10 percent of theircases (61 queries).
When CO-OP did provide thisanalysis, it did so in what was in a sense the moststraightforward way possible.
By contrast, a form ofpresupposition checking added to the LADDER sys-tem (Artificial Intelligence Center of SRI Internation-al) was so efficient that it was performed in everycase, (as a by-product of answering the query) wheth-er or not required, without any substantive differencein performance.3.
We think the relevant number in the note is that1/3 of the queries contained checkable presumptionsthat could be computed via language driven inferences,i.e.
from the surface structure of the query.
We findthis at least plausible, though it would be helpful if thenote gave a few examples of queries that were notconsidered to presume anything.
The other figures - -how many resulted in empty responses, and how manyof these intersected the first class - -  is highly depend-ent on the database, user group, etc.
In the presentedcase, the capabil ity of providing indirect responseswould have been of use in at most 1 percent of thequeries.
This suggests that the users had a thoroughunderstanding of the structure and content of the da-tabase: in this case the flexibility provided by thenatural language interface becomes less significant.4.
Damerau implicitly assumes that it is okay forthe system to make misleading responses on occasion.This can be entirely unacceptable to some specific usercommunities, regardless of how infrequently it occurs- -  not all queries are born equal.
Consider "Do anyof the parcels in the unincorporated county owned bylarge businesses pay property taxes?"
The systemmight answer "no",  when, in fact, no such parcelsexist.
Spurious responses of this type can have disas-trous effects - -  lawsuits, investigations, outraged citi-zens, etc.5.
Perhaps it is worth pointing out that the ideas inthe CO-OP system, if not the specific implementation,have been added successfully to several other querysystems.
Presumption checking techniques have beenincorporated into LADDER,  INTELLECT (formerlyROBOT - the Artificial Intelligence Corp.), and REL(Thompson of CALTECH) ,  for example.
In general,44 American Journal of Computational Linguistics, Volume 7, Number 1, January-March 1981Technical Correspondence On the Utility of Computing Inferences in Data Base Query Systemsthese implementations were significantly more effi-cient, but checked a somewhat narrower class of pre-sumptions than CO-OP.6.
Damerau mentions that queries with non-emptyresponses can also make presumptions.
This is cer-tainly true, even in more subtle ways than noted.
(Forexample, "What is the youngest assistant professorssalary?"
presumes that there is more than one assistantprofessor.)
Issues such as these are indeed currentlyunder investigation.Overall, we are pleased to see that Damerau hasraised some very important issues and we hope thatthis exchange will be helpful to the natural languageprocessing community.Aravind K. JoshiDept.
of Computer andInformation ScienceUniversity of PennsylvaniaPhiladelphia, Pennsylvania 19104S.
Jerrold KaplanComputer Science DepartmentStanford UniversityStanford, California 94305Reply to Joshi and KaplanIn general, there is little to disagree with in Joshiand Kaplan's comments,  but perhaps a couple ofpoints could be clarified.As Joshi and Kaplan suspected (point 3), the usersof this system did indeed thoroughly understand thedata base.
This makes quite a difference in thinkingabout the relative importance of facilities in a naturallanguage query system.
In particular, such users tendto check strange answers, so that a reply of "no",  asin their point 4, would probably result in an additionalquestion of "How many parcels ... "With regard to their remarks on implementationsthat incur no additional cost (points 2 and 5), I wouldbe interested in seeing how presupposition analysis canbe done without extra data base retrievals.
It wouldseem that the system would either have to make spe-cial retrievals at marked times, as in CO-OP,  or wouldhave to make the relevant retrievals for every questionso as to have the results available when needed.
How-ever, even if the execution time increase were to bezero, we still have a great many other things which wewould like to add to our system before we add infer-ence checking.Fred J. DamerauBook ReviewsLog ic  For  P rob lem So lv ingRobert Kowalsk iElsevier North Holland, New York, 1979,287 pp., Paperback, $9.95, ISBN 0-444-00365-7.This is a textbook introduction to logic program-ming.
Logic programming is based on the premise thatprogramming a task on a computer should begin with aprecise formulation of what is wanted.
This formula-tion defines the task clearly; it serves as a theory ofthe task which can be studied for its implications andlimitations.
Usually this formulation is computational-ly inefficient if implemented straightforwardly, but itcan be reformulated so that it becomes an efficientprogram when interpreted by a theorem prover.
Inthis form the logic program is closer to the theory thana PASCAL or LISP program would be, making it easi-er to verify its correctness and also easier to under-stand directly.Logic programming has been applied mostly toformal software specifications, data base systems andproblem solving, but it is being applied increasingly tonatural language understanding systems \[1,2,4,5,6\].
Inthese systems axioms specify the relationship betweenthe input text and whatever epresentation it is to beparsed into, and between this and whatever the outputis to be (e.g., an updated database or the answer to aquestion).
Since these axioms specify the relationbetween the text and its representation, they form agrammar for the text language, and, as such, are com-parable to the rules in a linguist's grammar.
Wheninterpreted by a suitable theorem prover, such as aversion of PROLOG,  they can transform a text into itsrepresentation (and often a representation i to a text)with practical efficiency.With logic programming the computational linguistmay be able to develop theories of language that areboth conceptually well-organized and practical to com-pute, but this book includes only the most elementaryintroduction to natural language processing.
It usesparsing as an example to show that problems can besolved in ways that correspond to top-down parsing,bottom-up parsing, or an arbitrary mixture of the two,all depending on how the theorem prover decides toAmerican Journal of Computational Linguistics, Volume 7, Number 1, January-March 1981 45
