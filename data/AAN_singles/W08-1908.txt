Coling 2008: Proceedings of the workshop on Cognitive Aspects of the Lexicon (COGALEX 2008), pages 55?63Manchester, August 2008Extracting Sense Trees from the Romanian Thesaurus bySense Segmentation & Dependency ParsingNeculai CurteanuInstitute for Computer Science,Romanian Academy, Ia?i Branchncurteanu@yahoo.comAlex MoruzInstitute for Computer Science,Romanian Academy, Ia?i BranchFaculty of Computer Science,?Al.
I. Cuza?
University, Ia?immoruz@info.uaic.roDiana Trandab?
?Institute for Computer Science,Romanian Academy, Ia?i BranchFaculty of Computer Science, ?Al.I.
Cuza?
University, Ia?idtrandabat@info.uaic.roAbstractThis paper aims to introduce a new pars-ing strategy for large dictionary (thesauri)parsing, called Dictionary Sense Segmen-tation & Dependency (DSSD), devoted toobtain the sense tree, i.e.
the hierarchy ofthe defined meanings, for a dictionary en-try.
The real novelty of the proposed ap-proach is that, contrary to dictionary?standard?
parsing, DSSD looks for andsucceeds to separate the two essentialprocesses within a dictionary entry pars-ing: sense tree construction and sensedefinition parsing.
The key tools to ac-complish the task of (autonomous) sensetree building consist in defining the dic-tionary sense marker classes, establishinga tree-like hierarchy of these classes, andusing a proper searching procedure ofsense markers within the DSSD parsingalgorithm.
A similar but more generalapproach, using the same techniques anddata structures for (Romanian) free textparsing is SCD (Segmentation-Cohesion-Dependency) (Curteanu; 1988, 2006),which DSSD is inspired from.
A DSSD-based parser is implemented in Java,building currently 91% correct sensetrees from DTLR (Dic?ionarul Tezaur al?
2008.
Licensed under the Creative Commons Attri-bution-Noncommercial-Share Alike 3.0 Unportedlicense (http://creativecommons.org/licenses/by-nc-sa/3.0/).
Some rights reserved.Limbii Rom?ne ?
Romanian LanguageThesaurus) entries, with significant re-sources to improve and enlarge theDTLR lexical semantics analysis.1 IntroductionSince the last decade, researchers have proventhe need for machine readable dictionaries.
Theidea behind parsing a dictionary entry is the crea-tion of a lexical-semantic tree of senses corre-sponding to the meanings that define the diction-ary lexical entry.
The aim of this paper is to in-troduce a new parsing strategy for thesauri shal-low parsing, called Dictionary Sense Segmenta-tion & Dependency (DSSD), devoted to the taskof extracting the sense tree, i.e.
the hierarchy ofthe lexical-semantics defined meanings for a dic-tionary entry.
The concrete task which DSSDalgorithm was used for is to obtain the sense treefrom an entry of the Romanian Language The-saurus (DTLR ?
Dic?ionarul Tezaur al LimbiiRom?ne) within the eDTLR research project(Cristea et al, 2007) devised for DTLR elec-tronic acquisition and processing (Curteanu et al,2007).In order to obtain the sense tree for a headword, the dictionary entry is divided into primaryand secondary senses, respecting a sense hierar-chy introduced by sense markers.
For the DTLRdictionary, the sense markers hierarchy (pre-sented in Section 3) includes 5 levels.
Those are,from the topmost level: capital letter markers(A., B., etc.
), Roman numeral markers (I., II.,etc.
), Arabic numeral markers (1., 2., etc.
), filleddiamond ?
and empty diamond ?.
Besides the55five levels, there exists also a special markercategory, the so-called literal enumeration, con-sisting of lowercase letter markers a), b), c), etc.The literal enumeration can appear at any of the5 levels, as presented in Section 3.Thus, using the sense markers, any dictionaryentry is represented as a tree of senses, the lowerlevels being more specific instances of the higherlevels.For example, for the dictionary entry verb, thesense tree contains 3 senses corresponding tolevel 3, one of them having a sub-sense corre-sponding to level 5.
Each sense/sub-sense canhave its own definition (gloss) or examples.<entry><hw>VERB</hw><senses><marker level=?3?>1.<definition>?</definition><marker level=?5?>?<definition>?</definition></marker></marker><marker level=?3?>2.<definition>?</definition></marker><marker level=?3?>3.<definition>?</definition></marker></senses></entry>The presented method can be applied to anydictionary, provided that a hierarchy of the sensemarkers of the dictionary is established.The paper is organized as follows: Section 2points out the characteristic features of DSSDstrategy, discussing the special relationship be-tween DSSD and SCD parsing strategy for gen-eral text, on one hand, and between DSSD andthe standard dictionary entry parsing (DEP), onthe other hand.
Section 3 presents the main com-ponents of the DSSD strategy: DTLR sensemarker classes, their dependency hyper-treestructure, and the DSSD parsing algorithm.
Thefinal Section 4 discusses the current stage im-plementation (in Java) of the DSSD algorithm,exposing several parsed examples.
Possiblesources of error and ambiguity in the DSSD pars-ing process are discussed, and further develop-ments of DSSD analysis software are outlined.2 DSSD compared to Free Text Parsingand to Dictionary ?Standard?
ParsingThis section outlines the origins of the DSSDidea, pointing out the connections betweenDSSD and free text parsing based on the SCDlinguistic strategy (Curteanu 2006), on one hand,and between DSSD and dictionary standardparsing, e.g.
(Neff, Boguraev; 1989), (Lemnitzer,Kunze; 2005), (Hauser, Storrer; 1993), on theother hand.
The main difference (and positivefeature) of the DSSD strategy compared to thestandard approach to dictionary entry parsing(DEP), e.g.
LexParse system in (Hauser, Storrer;1993), (Kammerer; 2000), (Lemnitzer, Kunze;2005), or JavaCC grammar-based parsing in(Curteanu, Amihaesei; 2004), is that DSSD de-tached completely the process of sense treebuilding from the process of sense definitionparsing, within the DEP general task.
This fact isclearly reflected in Fig.
2, which compares, at themacro-code level, the main four DEP operationsfor standard DEP and DSSD strategies.2.1 SCD Marker Classes, Hierarchy, andParsing AlgorithmsDSSD parsing strategy involves a configurationof components that is similar (but less general) tothe SCD (Segmentation-Cohesion-Dependency)parsing strategy, developed and applied to (Ro-manian) free text analysis (and generation)(Curteanu; 2006).
The process of solving theparsing of DTLR entries have been inspired bythe resemblance between the classes of DTLRsense markers and the SCD marker classes onone side, and between the sense trees of (DTLR)dictionary entries and the discourse trees of fi-nite-clause dependency trees at sentence or para-graph levels on the other side.
While discoursetrees provide a formal similarity to the sensetrees, nucleus?satellite rhetorical relations amongdiscourse segments is quite different to the sub-sumption relation of lexical semantics natureamong the sub-sense definitions (sub-senses) of adictionary entry.The subsumption relation is defined as fol-lows: sense1 subsumes sense2 if (informally)sense1 is less informative (or, more general) thansense2, or if (formally) the sense tree of sense1 isa (proper) subtree of sense2.
DSSD parsing of an56entry sense tree works in an akin Breadth-First,Top-Down manner as SCD does, for thoseclasses of markers that produce only segmenta-tion and binary dependency between discoursesegments or finite clauses, ignoring the morecomplex ?cohesion?
relationship.
Thus one canrightly say that DSSD approach is derived fromthe SCD parsing strategy (Fig.
1).SCD parsing strategy is exposed at large in(Curteanu 2006).
SCD-based discourse parsingpresents a special interest for DSSD because oftheir (formal) algorithmic analogy.
The methodproposed by the SCD strategy includes buildingthe discourse tree by the intensive use of dis-course markers, while discourse segments areobtained by clause parsing.
Employing the re-sults of the SCD clausal parsing and a databasewhich contains information about the discoursemarkers, one can obtain the discourse structureof a text.
The outcome is represented as a dis-course tree whose terminal nodes are clause-likestructures, having specified on the arcs the nameof the involved rhetorical relations.The SCD segmentation / parsing algorithm in(Curteanu 2006) may have the same shape of aBreadth-First (or sequential-linear) processingform as DSSD does, using as input a morpho-logically tagged text, obtaining the finite clausesand sub-clausal phrase (XG-)structures.
Datarepresentation is in standard XML and the im-plementation of the SCD algorithm for free textparsing is made in Java.
(Curteanu 2006) pre-sents recursive Breadth-First (and Depth-First),or parallel Breadth-First shapes of the SCDsegmentation-parsing algorithms.The relationship between SCD and DSSDparsing strategies, the former devoted to the freetext parsing and the latter to be used for DEP,could be summarized as follows: the two strate-gies work formally with the same technology,using very similar analysis tools and data struc-tures, including the same Breadth-First searchstrategy.
The clear distinction between SCD andDSSD consists in the quite different kind of textsto be analyzed (free text vs. dictionary entrytext), and the two different (but complementary)semantics that drive the corresponding parsingstructures: predicational and rhetorical (cohe-sion-proper) semantics for SCD, and lexical se-mantics (cohesion-free) for DSSD.
The table inFig.
1 gives a detailed comparison between thetwo parsing strategies.
The SCD parsing technol-ogy, especially with its presently discoveredDSSD sub-sort, evolves (at least) three features:generality (different text structures), flexibility(different underlying semantics), and adequacy(proper text markers and their corresponding hi-erarchies).ParsingStrategySCD markers &DSSD markersSemantics to be applied on the parsedtextual spansResulted structures of theparsing processM4-class (discourse) markers rhetorical discourse semantics , i.e.
RST dis-course (high-level cohesion) dependenciesdiscourse tree (of RST-based dis-course segments)M3-class (inter-clause) mark-ersinter-clause predicational semantics, i.e.
Predi-cate-Argument (global-level cohesion) dependen-cies among finite clausesclause-level dependency trees basedon syntactic or semantic relationsSCD M2-class (clause) markerssingle finite-clause predicational semantics, i.e.Predicate-Argument (local-level cohesion) de-pendencies among VG-NGs (Verbal Group ?Noun Groups)single finite clause(s)M1-class intra-clausal (phrase) markersnon-finite predicational semantics, i.e.
(local-level cohesion) dependencies inside VG and NGs(Verbal Group ?
Noun Groups)simple and complex VGs; simpleand complex (predication-related)NGsM0-class flexionary markers of  lexical categories  lexical semantics categorieslexical textual words = inflectedwordsSCD -DSSDM(?1)-class of lemmatizationmarkers for DTLR lexicalentriessemantic description at the lexicon level  lexical lemmatized words =  dictionary entriesDSSDsense and subsense defini-tion markers of a DTLRlexical entrysubsumption relations between the subsenses of aDTLR lexical entry (cohesion-free semantics)sense trees and (XCES-TEI 2007codification-based) sense definitonsof DTLR entriesFig.
1.
DSSD vs. SCD marker classes, the corresponding semantics and textual structures572.2 DSSD Approach vs. Standard DEPAnother perspective on DSSD is outlined in thissection: the novelties of DSSD approach fetchedto the standard DEP, e.g.
(Neff, Boguraev;1989), (Lemnitzer, Kunze; 2005), (Kammerer,2000).
DSSD applies the same ?technology?
asSCD strategy does, i.e.
marker classes, specifichierarchies, and adequate searching proceduresembedded and governing the parsing algorithms.Most important, DSSD parse and construct thesense tree of a (DTLR) dictionary entry, inde-pendently of, and possibly lacking the, DTLRsense definition parsing process.In the standard DEP, including the Java-grammar based construction of parsers in theJavaCC environment (Curteanu, Amihaesei,2004; Curteanu et al, 2007), building the sensetree for an entry is inherently embedded into thegeneral process of parsing all the sense andsub-sense definitions enclosed into the dictionaryentry.
In the same typically (standard) DEP wayworks also the parser in (Neff, Boguraev; 1989)or LexParse, (Kammerer; 2000: 10-11) specify-ing that the LexParse recognition strategy is aDepth-First, Top-Down one.The advantage of the proposed DSSD ap-proach is that it ?ignores?, at least in the begin-ning, the ?details?
of sense definitions, concen-trating only on the sense marker discovery andtheir dependency establishing.
The result is thatDSSD parsing concentrates on and obtains, in thefirst place, the sense tree of a DTLR entry.
Ofcourse, parsing of a dictionary entry does notmeans only its sense tree, but the entry sense treerepresents the essential, indispensable structurefor any kind of DEP.Based on different types of DTD standards fordictionary text representation, such as CON-CEDE-TEI (Erjavec et al 2000; Kilgarriff 1999,Tufis 2001) or (XCES-TEI; 2007), the parsingprocess may continue ?in depth?
for identifyingthe (other important) fields of sense andsub-sense definitions.
DSSD strategy has thequality of being able to compute independentlythe entry sense tree, prior to the process of sensedefinition parsing.
Subsequently, the process ofparsing the sense definitions can be performedseparately, one by one, avoiding the currentsituation when the general parsing of an entrymay be stopped simply because of a single (evenif the last one) unparsable sense definition.The procedural pseudo-code in Fig.
2 showsclearly the important difference between stan-dard DEP and DSSD parsing, with the essentialadvantage provided by DSSD: standard DEP isbased on Depth-First search, while DSSD workswith Breadth-First one.
Specifically, the proce-dural running of the four operations that arecompared for the standard DEP and DSSDstrategies, labeled with 1, 2, 3, 4, are organ-ized in quite different cycles: in the table left-side (standard DEP), there is a single, large run-ning cycle, 1 + 2, under 2 being embedded(and strictly depending) the sub-cycle 3 + 4.The DSSD parsing exhibits two distinct (and in-Dictionary Classical Parsing Strategy DSSD Parsing StrategyFor i from 0 to MarkerNumber1  Sense-i Marker Recognition;2  Sense-i Definition Parsing;If(Success)3  Attach (Parsed) Sense-i Definition to Node-i;4  Add Node-i to EntrySenseTree;Else Fail and Stop.EndForOutput: EntrySenseTree with Parsed Sense Definitions(only if all sense definitions are parsed).Notice:  MarkerNumber is the number of the inputmarker sequence.For i from 0 to MarkerNumber1  Sense-i Marker Recognition;Assign (Unparsed) Sense-i Definition to Node-i;4  Add Node-i to EntrySenseTree;Standby on Sense-i Definition Parsing;EndForOutput: EntrySenseTree.Node-k = Root(EntrySenseTree);While not all nodes in EntrySenseTree are visited2  Sense-k Definition Parsing;If(Success)3  Attach Sense-k Definition to Node-k;Else Attach Sense-k Parsing Result to Node-k;Node-k = getNextDepthFirstNode(EntrySenseTree)ContinueEndWhile.Output: EntrySenseTree with Parsed or Unparsed SenseDefinitionsFig.
2.
A macro-code comparison of classical and DSSD parsing strategies58dependently) running cycles: 1 + 4, for con-structing the (DTLR) sense trees, and 2 + 3,devoted to parse the sense definitions and to at-tach the parsed or unparsed sense definitions totheir corresponding nodes in the sense tree(s).We emphasize firstly, that the second proce-dural cycle is optional, and secondly, that thefirst cycle is working on the sense marker se-quence of the entry (either correct or not), theDSSD output being an entry sense tree in anycase (either correct or not).
This is why theDSSD algorithm never returns on FAIL, regard-less whether the obtained sense tree is correct ornot.3 DTLR Marker Classes, their Depend-ency Structure, and the DSSD ParsingAlgorithmAs already pointed out, DSSD can be viewed asa simplified version of SCD, since only the seg-mentation and dependency aspects are involved,the (local) cohesion matters being without objectfor the (one-word) lexical semantics of DSSD.As in the case of SCD, the DSSD parsing strat-egy requires a set of marker classes (in our case,DTLR sense markers), arranged in a hierarchyillustrated in Fig.
3, and described below:The capital letter marker class (A., B., etc.)
isthe topmost level on the sense hierarchy ofDTLR markers (see Fig.
3) for any given dic-tionary entry.
When it appears, this marker des-ignates the (largest-grained meaning) primarysenses of the lexical word defined.
If the toplevel marker has only one element of this kind,then the marker is not explicitly represented.The Roman numeral marker class (I., II., etc.
)is the second-level of sense analysis for a givenDTLR entry.
It is subsumed by a capital lettermarker if some exists for the head word; if acapital letter marker does not exist (it is not ex-plicitly represented), the Roman numeral markerappears on the topmost level of the sense tree.
Ifthe lexical entry has only one sense value for thisanalysis level, the marker is not explicitly repre-sented.The Arabic numeral marker class (1., 2., etc.
)is the third-level of sense analysis for a DTLRentry.
It is subsumed by a Roman numeralmarker if there exists some for the entry; if aRoman numeral marker is not explicitly repre-sented, it is subsumed by the first explicit markeron a higher level.
If the entry has only one sensevalue for this level of sense analysis, the markeris not explicitly represented.
These first threelevels encode the primary senses of a DTLRlexical entry.Fig.
3.
The tree-like dependency structure forthe classes of DTLR markersThe filled diamond marker class is the fourth-level of sense analysis and it is used for enumer-ating secondary (finer-grained) senses of aDTLR entry.
It is generally subsumed by anyexplicit DTLR sense marker on a higher level,i.e.
any of the primary sense markers.The empty diamond marker class is the fifth-level of sense analysis and it is used for enumer-ating expressions for a given, secondary sub-sense.
It is generally subsumed by a filled dia-mond marker or by any primary sense marker.The lowercase letter markers a), b), c), etc.
arenot an actual class of sense markers, but rather aprocedure used to refine, through literal enu-meration, a semantic paradigm of a DTLR entrysense or sub-sense.
A lowercase letter markerdoes not have a specific level on the marker classtree-like hierarchy since it belongs to the sensemarker level (of either primary or secondarysense) that is its parent.
The important rules ofthe literal enumeration procedure in DTLR are:(a)  it associates with the hierarchy level of thesense marker class to which is assigned (inFig.
3), and (b)  it can embed lower (than its par-ent level) senses, provided that each literal enu-meration is closed finally on the sense level towhich it belongs.Fig.
3 is a hyper-tree hierarchy of the DTLRsense marker classes since (at least) the lowesthyper-node contains recursively embedded dia-a), b), c), ?DTLR Entrya), b), c),A., B., C.,  ?a), b), c),I., II., III.,  ?a), b), c),1., 2., 3.,a), b), c),  ??
?59mond-marker nodes.
The dashed arrows point tothe upper or lower levels of DTLR sense markerhierarchy, from the literal enumeration layer-embedded level.
The continuous-dashed arrowsin Fig.
3 point downwards from the higher to thelower priority levels of DTLR marker class hy-per-tree.
Because of its special representationcharacteristics, the literal enumeration is illus-trated on a layer attached to the hierarchy levelto which it belongs, on each of the sense levels.Some examples supporting the marker hierarchyin Fig.
3, including the literal enumeration thatcan appear at any DTLR sense level, are pre-sented below:I. Literal enumeration under a filled diamond(secondary sense):<entry><hw>V???2</hw><pos>s.
f.</pos><senses><marker>I.<marker>1.<definition> (De obicei determinat prin ?devie?)
Arbust din familia vitaceelor, cu r?d?cina puternic?, cutulpina scurt?, ?</definition><marker>?<definition> C o m p u s e: vi??-alb?
=</definition><marker>a)<definition> arbust ag??
?tor din familiaranunculaceelor, cu tulpina sub?ire, cu frunze penate...;</definition></marker><marker>b)<definition>(regional) luminoas?
(Clematis recta).
Cf.
CONV.
LIT.
XXIII, 571, BORZA, D. 49,301; </definition></marker><marker>c)<definition>(?nvechit) ?mp?r?teas?
(Bryonia alba).....</definition></marker></marker></marker></marker></senses></entry>II.
Literal enumeration under an Arabic nu-meral (primary sense):<entry><hw>VERIG???</hw><pos>s.
f.</pos><senses><definition>Diminutiv al lui  v e r i g ?.
Cf.
LB,POLIZU, DDRF, BARCIANU, ALEXI, W., TDRG, CADE, SCRIBAN, D.,DL, DM, DEX.</definition><marker>1.<marker>a)<definition> (Prin Transilv.
?i prin sudulMold.)
Cf.
v e r i g ?
(2 c).
Cf.
ALR II 6 653/95, 192, 605.</definition></marker><marker> b)<definition>Cf.
v e r i g ?
(2 b).
?i am datcercel ?n  narea ta ?i verigu?e ?n urechile tale.
BIBLIA (1688),5431/25.
La ferestre sp?nzurau ni?te perdelu?e de adamasc?,aninate ?n ni?te verigu?e ce se ?n?irau pe o varg?
de fier.GANE, N. II, 160.
</definition></marker></marker><marker>2.<definition> (Popular) Verighet?.
Cf.
SCRIBAN, D.,?IPLEA, P. P., BUD, P. P. Mi-o dat o verigu??
?i-ntr-on an i-am fostdr?gu??.
B?RLEA, C. P. 143.
</definition></marker></senses></entry>III.
Literal enumeration directly under the en-try root:<entry><hw>VENTRIC?A</hw><pos>s.
f.</pos><senses><definition> Numele mai multor specii de planteerbacee (folosite ?n medicin?
): </definition><marker>a)<definition> ventrilic?
(c) (Veronica persica).Cf.
GRECESCU, FL.
442, PAN?U, PL., CADE.
Un gorun negru ?isinguratic?
e n?p?dit la poale de ventricele cu spicurialb?strii....; </definition></marker><marker>b)<definition> ventrilic?
(a) (Veronica officinalis).Cf.
TDRG, BORZA, D. 179, 300; </definition></marker><marker>c)<definition>bobornic (Veronica prostrata).
Cf.BORZA, D. 179, 300.
</definition></marker></senses></entry>The DSSD algorithm for the construction ofthe DTLR sense tree, according to the markerhierarchy described in Fig.
3, is the following:Stack STree TS.push(root)while article has more markerscrt = get_next_marker()while crt > S.top() ?
get to thefirst higher rank marker in thestackS.pop()if(crt = lowercaseLetter)S.top.addPart(crt) ?
add a low-ercase marker as a subset of thehigher level sense value60crt.level=S.top.level+1 ?
thelowercase letter maker is given alevel in accordance to the level ofits parentS.push(crt)elseS.top.add_son(crt) ?
add theson to the higher level marker inthe stackS.push(crt) ?
add the currentmarker to the stackThe DSSD parsing algorithm was imple-mented in Java and running examples of its ap-plication on DTLR entries are presented in Sec-tion 4.
While the DTLR sense marker recogni-tion in DSSD is achieved with a Breadth-Firstsearch, the marker sequence analysis for sensetree construction is based on a Depth-First pars-ing of the sense marker sequence input, as it usesa stack to keep track of previous unfinished (interms of attaching subsenses) sense markers.4 DTLR Parsing with DSSD Algorithm:Examples and Developments4.1 DSSD Parser Applied on DTLR EntriesThe enclosed Fig.
4 shows the result of applyingthe DSSD Java parser described in Section 3 on aDTLR entry.
We notice that the presented inputexample (VENIT2) represents just sequences ofDTLR sense markers.
The entry for which theparsing was conducted is given only as tags, inpart below (the entire entry spans for more thantwo dictionary pages):<entry><hw><VEN?T2, -?
</hw><pos>adj.
</pos><senses><definition>?</definition><marker>1.<definition>?</definition><marker>2.<definition>?</definition><marker>?<marker> a)<definition>?</definition></marker><marker> b)<definition>?</definition></marker><marker> c)<definition>?</definition></marker></marker><marker>?<marker> a)<definition>?</definition></marker><marker> b)<definition>?</definition></marker></marker></marker></senses></entry>Fig.
4.
DSSD parsing for the sense tree build-ing of DTLR entry VENIT2As one can see, the input of the sense treeparser is the DSSD marker sequence of the con-sidered DTLR entry (the <list> tag in Figure 4).The output of the parsing is much less verbosethan the original dictionary entry, since the sensedefinitions and the entire example text is not de-picted, in order to better observe the sense tree ofthe entry.
Also, this representation proves thatthe understanding of the sense definitions is notstrictly necessary for building the sense tree, atask for which the marker hierarchy discussed inSection 3 is sufficient.Fig.
5 presents the sense tree for the dictionaryentry ?VI?RME?
(En: worm).
It can be seen thatthis particular entry is quite large, with the origi-nal dictionary text spanning for more than sixpages of DTLR thesaurus.After its completion, the DSSD parser wastested on more than 500 dictionary entries (ofmedium and large sizes), the only ones already inelectronic format to which we had access to atthe moment (the vast majority of dictionary vol-umes is only available in printed form).
The suc-cess rate was determined to be 91.18%, being61Fig.
5.
Sense tree for the dictionary entry?VI?RME?computed as a perfect match between the outputof the program and the gold standard.Furthermore, it is worth noting that an articlewith only one incorrect parse (i.e.
one node in thesense tree attached incorrectly) was considered tobe erroneously parsed in its entirety, an approachwhich disregards all the other correctly attachednodes in that entry.
This fact shows also signifi-cant improvement resources of the DSSD parsingprocess.4.2 Error and Ambiguity Sources in DTLRParsingIt is worth to mention some sources of error andambiguity found in DSSD parsing for DTLRsense tree computing.
We grouped the errorsources in three main classes:I. Inconsistencies in writing the original DTLRarticleA first source of parsing errors is the non-monotony of the marker values on the same levelof sense marker hierarchy (Fig.
3):Ex.1.
A.
[B. missing] ?
C.
etc.;Ex.2.
2.
[instead of 1.]...
2.
etc.;Ex.3.
a)?
b) ?
c) ?
b) [instead of d)]etc.The tree structure returned by the parser doesnot consider the consistency of each markerlevel.
Thus, in Ex.1, it will place the two markersA.
and C. as brother nodes in the sense tree.
A(partial but feasible) solution for the parser is tocheck the strict monotony of the markerneighbors, an operation which is useful alsowhen sense markers interfere with literal enu-meration.A validity of the marker succession at eachlevel will be checked after the completion of thesense tree parsing.II.
Ambiguity in deciding which is the regentand which is the dependent (sub)senseAn inherently ambiguity was found for the fol-lowing sequences of DTLR sense markers:Ex.4.
1. a) b) c) ?
[?
]The problem occurs since one can not discernbetween attaching the first (and / or second) ??
?as depending on c) or on the upper level marker(1.).
Solving these ambiguities is a problem re-lated on syntactic and / or semantic contexts ofthe involved (multiple) pairs of markers.Namely, if ?c)?
is the last small letter in the lit-eral enumeration, then ???
is attached to the ?1.
?marker (and sense), while if ?c)?
in the literalenumeration, followed by ??
?, has a continuation?d)?
in the literal enumeration, then ???
dependson its small letter ?c)?
regent sense.III.
More refined subsense classificationA third source of errors when creating thesense tree is met within the following markersequence I.
1. ?
a) b) c) a) b).
Even if at a quick62look the problem with the inconsistent literalenumeration is similar to the problems presentedin the first class, at a closer inspection we real-ized that under the full diamond ?
there are threesubsenses (three expressions), two of them hav-ing literal enumeration: (1) vi??-alb?
= a)... b)...c); (2) vi??-neagr?
= ...; (3) vi?a-evreilor =a)...b).
To solution this problem makes necessarya more refined subsense classification within thesense definition and adding possible new mark-ers to the hierarchy.
Working to solve these prob-lems is in good progress, as it concerns types ofsense structure closely related to various sensedefinition parsing, the next step in the develop-ment of the DSSD dictionary parser.We already identified seven definition types,encoded as follows, together with the most im-portant dependency conditions among the defini-tions below, within DTLR senses and subsenses:1.
MorfDef (Morphological Definitions);2.
SpecDef (Specification-based Definitions);3.
SpSpec (Spaced-character Definitions);4.
RegDef (Regular-font Definitions);5.
BoldDef (Bold-font Definitions);6.
ItalDef (Italic-font Definitions);7.
ExemDef (Example-based Definitions),The 4, 5, 6, definition types are possibly fol-lowed by the literal enumeration scheme ofsense codification.Further developments of DSSD analysis soft-ware are meant to be achieved: (a)  The completeparsing of a DTLR entry entails the natural ex-tension of DSSD approach towards sense defini-tion parsing and representation within the XCESTEI P5 (2007) standard set of tags.
(b)  A spe-cialized subset of TEI P5 tags for representing allthe types of definitions met within the primaryand secondary senses of a DTLR entry is neces-sary.
(c)  Resolution of all the references within aDTLR entry is necessary: references to the ex-cerpt sources (sigles), reference to a sense withinthe same entry (internal reference), or to a(sub)sense within another entry (external refer-ence).
(d)  Verification of the sense-tree correct-ness can be achieved by restoring the linearstructure of a DTLR entry from its parsed sense-tree representation, and comparing it with theDTLR original entry.Acknowledgement.
The present research wasfinanced within the eDTLR grant, PNCDI IIProject No.
91_013/18.09.2007.ReferencesCristea, D., R?schip, M., For?scu, C., Haja, G., Flo-rescu, C., Aldea, B., D?nil?, E. (2007): The DigitalForm of the Thesaurus Dictionary of the RomanianLanguage.
In Proceedings of the 4th InternationalIEEE Conference SpeD 2007.Curteanu, Neculai (1988): Augmented X-bar Schemes.COLING'88 Proceedings, Budapest, pp.
130-132.Curteanu, N., E. Amih?esei (2004): Grammar-basedJava Parsers for DEX and DTLR Romanian Dic-tionaries.
ECIT-2004 Conference, Iasi, Romania.Curteanu, N. (2006): Local and Global Parsing withFunctional (F)X-bar Theory and SCD LinguisticStrategy.
(I.+II.
), Computer Science Journal ofMoldova, Academy of Science of Moldova, Vol.14 no.
1 (40):74-102 and no.
2 (41):155-182.Curteanu, N., D.
Trandab?
?, G. Pavel, C. Vere?tiuc, C.Bolea (2007): eDTLR ?
Thesaurus Dictionary ofthe Romanian Language in electronic form.
Re-search Report at the PNCDI II Project No.91_013/18.09.2007, Phase 2007, and (D. Cristea,D.
Tufi?, Eds.)
eDTLR Parsing ?
The CurrentStage, Problems, and Development Solutions, Ro-manian Academy Editorial House (in Romanian ?to appear).DLR Revision Group (1952): Codification Rules forthe Dictionary (Thesaurus) of the Romanian Lan-guage.
Institute of Philology, Bucharest, RomanianAcademy.Erjavec, T, Evans, R., Ide, N., Kilgariff A., (2000):The CONCEDE Model for Lexical Databases.
Re-search Report on TEI-CONCEDE LDB Project,Univ.
of Ljubljana, Slovenia.Hauser, R., Storrer, A.
(1993).
Dictionary Entry Pars-ing Using the LexParse System.
Lexikographica 9(1993), 174-219Kammerer, M. (2000): W?terbuchparsingGrunds?tzliche ?berlegungen und ein Kurzbericht?ber praktische Erfahrungen, http://www.matthias-kammerer.de/content/WBParsing.pdfLemnitzer, L., Kunze, C. (2005): Dictionary EntryParsing, ESSLLI 2005Neff, M., Boguraev, B.
(1989) Dictionaries, Diction-ary Grammars and Dictionary Entry Parsing,Proc.
of the 27th annual meeting on Association forComputational Linguistics Vancouver, British Co-lumbia, Canada Pages: 91 - 101Tufi?, Dan (2001): From Machine Readable Diction-aries to Lexical Databases, RACAI, RomanianAcademy, Bucharest, Romania.XCES TEI Standard, Variant P5 (2007):http://www.tei-c.org/Guidelines/P5/63
