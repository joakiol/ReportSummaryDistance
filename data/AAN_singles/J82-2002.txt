1.
Natura l -Language In ter faceGary G. Hendrix, ChairpersonSRI InternationalMenlo Park, CA 94025PanelistsJaime G. Carbonnell, Carnegie Mellon UniversityJeff Hill, Artificial Intelligence CorporationAravind Joshi, University of PennsylvaniaJerry Kaplan, Stanford UniversityEarl Sacerdoti, Machine Intelligence CorporationDavid L. Waltz, University of IllinoisStan Petrick, IBM Corporation1.1 The Interface ProblemA major problem faced by would-be users of com-puter systems is that computers generally make use ofspecial-purpose languages familiar only to thosetrained in computer science.
For a large number ofapplications requiring interaction between humans andcomputer systems, it would be highly desirable formachines to converse in English or other natural lan-guages familiar to their human users.Over the last decade, in laboratories around theworld, several computer systems have been developedthat support at least elementary levels of natural-language interaction.
Among these are such systemsas those '.escribed in the several references at the endof this paper.1.2 Proven CapabilitiesNatural-language (NL) interfaces built so far haveprimarily addressed the problem of accessing informa-tion stored in conventional data base systems.
Amongthe proven capabilities exhibited by these systems arethose that:?
Provide reasonably good NL access to specific databases?
Access multiple, remote data bases.?
Answer direct questions.
("What is Smith's salary?")?
Coordinate multiple files.
("What is Smith's location?"
translates into"What is the location of the department ofSmith?.")?
Handle simple uses of pronouns.?
Handle many elliptical inputs.
("Where is John?
Sam?")?
Do basic report generation.
("By sex and age, list the salary and title of em-ployees in New York.")?
Extend linguistic coverage at run time.
(Define " JD"  as " Jef ferson Davis Jones" Let"Q1 Smith salary" be like "What is the salaryof employee Smith?
.
.
.
.
Q1 JD AGE?")?
Analyze NULL answers.
( "How many Japanese carriers have inoperativeair search radar?"
Response: "There are no Jap-anese carriers.")?
Restate in English the system's interpretation ofinputs.~.
Correct spelling errors.?
Enhance the data in a data base with special-purposefunctions.
(E.g., calculate distances between cities.
)1.3 Prominent Potential ApplicationsAmong the many promising prospects for NL inter-faces, in increasing order of perceived difficulty, areinterfaces to structured ata bases, simulation models(e.g., VISICALC), operating systems, expert systems,transaction systems (e.g., airline reservations), andtext data bases.1.4 Factors for Suitable ApplicationsFor NL-interface methodology to be suitable for agiven application, the construction of such an NL in-terface must be technologically practicable.
Moreover,it should make a positive contribution to the achieve-ment of pragmatic goals in the area of application.For NL-interface methodology to be technologicallypracticable now in a specific area of application:?
There must be a solid system to interface with.
(Garbage accessed is garbage retrieved.)?
The application domain must be conceptually well-bounded, i.e., there must be a limited number ofobjects in the domain and a limited number of rela-tionships among them.?
The domain's objects and relationships must be well-behaved.
It is relatively straightforward to dealwith concrete objects such as ships and employees,but such intangibles as human goals, beliefs, plans,and wants present very serious problems.?
It is desirable that truth regarding the domain bedeterminable through evaluation.
Current techni-ques falter, for example, if the system must deal56 American Journal of Computational Linguistics, Volume 8, Number 2, April-June 1982Gary G. Hendrix Natural Language Interfacewith the fact that "either P or Q is true," withoutknowing which is true.?
System users must have reasonable xpectations ofwhat the system can do.
This is largely a questionof the level of abstraction at which a user wishes tointeract with the system.
For example, a market-ing data base may easily be built to answer thespecific question "What were our sales in May?
"It is far harder to build a system with the abstractreasoning needed to handle "Why are sales slump-ing?
", which is perfectly natural to ask in exactlythe same domain as the previous question.?
Users must be able to type (at least until speechtechnology in combination with NL-interface tech-nology makes it unnecessary).For NL-interface methodology to be useful in agiven area, the application must require flexibility anddiversity.
If the same report is to be produced everymonth, there is no particular advantage to requestingthat it be printed by giving instructions in English.However, if there are hundreds or thousands of possi-ble independent operations that a system might becalled upon to perform, it may then become a verydifficult task to indicate precisely which operation isdesired.
English is much better suited for a task ofsuch complexity than menu selection systems, and it iseasier to learn and remember than a sophisticatedformal language.Natural language may be of value even if there areonly a few dozen operations to be discriminated, pro-vided the operations are not performed very often.For example, a travel reservation system might haveover 100 kinds of operations - too many for functionkeys alone.
For the person who uses the more obscureoperation only occasionally, natural language could behelpful.The cost of creating an NL interface must be justi-fied either by the system's volume of usage, or becauseutilization of the interface expedites access to data orother computer-based resources when time is a criticalfactor.In summary, NL-interfaces are suitable for use inapplications in which the personal or financial cost oflearning a special purpose formal language may exceedthe value of the information retrieved.
This is mostlikely to occur in situations where the typical user hasonly one (or a few) queries at irregular intervals,needs to use the system only infrequently, is unfamiliaror uncomfortable with formal languages, or has only apartial understanding of the structure or content of theunderlying system.1.5 Advantages of NL InterfacesAmong the major advantages of NL interfaces arethe following:?
Natural language is flexible.?
People need little training to use it in interfacingwith a computer system, and they have very littledifficulty remembering it (especially as comparedwith remembering the syntax or reserved functionterms of formal languages).?
Natural language pronouns, quantification, and con-textual conventions make it easy to perform a num-ber of operations in natural language that are diffi-cult or impossible in other languages.
For manyapplications, the use of natural language is fasterthan using a menu system, composing formal quer-ies, or writing computer programs.?
Natural languages allow follow-up questions to buildon the linguistic context established by previousdialogue.It is important to recognize that natural-languageinterfaces typically solve two problems simultaneouslyin providing users with access to computational re-sources.?
They can deal with a natural anguage articulation ofwhat the user wants.?
They can transform a description of what the userwants into a computer program that specifics howto accomplish it.The aspect of automatic programming provided bythe second function is, for many potential applications,at least as important and useful as the ability to dealwith natural-language syntax.The automatic-programming aspect of manyNL-interface systems is a key benefit of the interfacetechnology, in that it provides a means for reducingthe high labor cost of using humans to program com-puter algorithms to grapple with the inevitable ad hocproblems that arise in conjunction with any applicationsystem.In general, the primary utility of NL interfaces isthat they support the user's view of the domain andthe application system.
In other words, they transformthe user's concepts into those actually used by theapplication system - and do so in a matter of millise-conds.
NL syntax provides helpful support, but it isnot necessarily the crucial feature that makes thesesystems useful.
Other types of interface systems canalso transform the user's conceptualization - NL sys-tems do it by virtue of their essential nature.1.6 Disadvantages of NL InterfacesNatural language is unsuitable for some applica-tions because it provides flexibility at the cost of ver-bosity.
Text editors exemplify a type of system inwhich the commands are limited in number, used veryAmerican Journal of Computational Linguistics, Volume 8, Number 2, April-June 1982 57Gary G. Hendrix Natural Language Interfacefrequently, and, conforming to user preference andconvenience, are kept as short as possible.
However,one can well imagine wanting to use "plain" Englishfor the less common commands or to ask the systemfor assistance, e.g.
"how do I change the margins?
"A system that uses natural anguage does not "wearits constraints on its sleeves", i.e., the system's capa-bility is not reflected in the input language.
Thismeans that users can easily pose questions or givecommands that are beyond the ability of the system tointerpret.
This is in contrast with a menu system, inwhich the system - always in control of the conversa-tion - constrains the user to select from a limited num-ber of choices.
Whether or not explicit constraints areuseful depends largely on the particular application.Perhaps the main disadvantage of NL systems isthat people tend to assume they are "smart."
Forexample, if a system can provide NL access to a database of information, users will tend to believe it candeduce other facts from that information - facts that,although not explicitly encoded, would be obvious toanyone with common sense.
More formal systems arenot expected to perform common sense reasoning,because their functionality, and therefore their inher-ent limitations, is readily apparent o the user.1.7 Problems and New Techniques1.7.1 Three Lines of Research and Three Levels ofSystemsThere are three major lines of research on natural-language interfaces:?
To make interfaces more easily transportable to newapplications.?
To increase the linguistic coverage of systems.?
To increase the conceptual coverage of systems.These three lines are so tightly intertwined that re-search focusing on one almost inevitably involves re-search on all three.The systems already created and the diverse facetsof ongoing research can be divided into three levels ofcomplexity.
To elucidate the various extensions andnew techniques that have been developed in NL inter-faces, let us define and discuss each of these levels inturn.1.7.2 Level 1 SystemsPrimary Characterist icsThe primary characteristic of a Level 1 system isthat the interface per se incorporates only an extreme-ly limited theory of the domain of application.
1 Inparticular, the interface may have access to taxonomicinformation about the sorts of objects in the applica-tion domain, and may have information about thenames of relationships in which those objects mayparticipate - but it will not have knowledge of specificinstances of relationships among objects.
(That is, itmay know that an employee is a person and that":salary" is the name of an attribute relating employ-ees, but it will not explicitly encode the fact thatJohn's salary is $30,000.)
As a rule, it will rely on aconventional, external data base as its sole source ofsuch information.Translation in a Level 1 system is most often madedirectly into a data base query.
Seldom is there anexplicit representation of what the user actually said.Most NL systems created to date are of the Level 1category.
Moreover, systems at this level are the onlyones currently available that are sufficiently fast androbust to be considered for serious applications.
Inparticular, the INTELLECT system (A.I.Corp., 1981),which is typical of a Level 1 configuration, is the onlysystem currently available commercially.Some Level 1 ExtensionsThe paragraphs below describe some relativelysimple and inexpensive extensions currently underdevelopment that should enhance the utility of Level 1systems.Transportability.
There is general agreement hatthe greatest problem now facing Level 1 systems ishow to make effective use of existing techniques onnew sets of data.
Work is under way on methods toease the transport problem, including work on usinginteractive dialogues with data base administrators(Hendrix and Lewis 1981) for automatic acquisitionof the information eeded to create new interfaces.Database Enhancement Tools.
As illustrated by thefollowing examples, it is often desirable to extend theconceptual coverage of an interface to include accessnot only to primary data, but also to functions thatcan compute information derivable from those primarydata.Where is the Fox?
(Can be looked up directly in the data base.
)How far is she from LA?
(The locations of Fox and LA can be looked up.But the distance between them must be comput-ed.
)How soon could she get there?
(The time needed to travel the distance must becomputed, taking into account hat ships cannot1 The word "theory" is used here to mean a description of adomain represented in some formal anguage.
Such descriptions aresometimes called models.
However, the word model is perhapsmore properly used to refer to complete descriptions of a domain,so that an object or relationship exists in the domain if AND ONLYIF it is included in the model.
A theory of a domain may be lessprecise.
For example, it could specify that either P or Q holds inthe domain, without specifying which.58 American Journal of Computational Linguistics, Volume 8, Number 2, April-June 1982Gary G. Hendrix Natural Language Interfacefollow straight courses if they pass over landmasses, ice, or shallows.
)Developers and users of interfaces need special toolsto make it easier to create enhancement functions andintegrate them with the language-processing capability.Database Update.
Many users would find Level 1systems more serviceable if they could be employednot only for querying data bases, but also for updatingthem (Kaplan and Davidson 1981).
Admittedly, thiscan introduce problems.
Suppose the user saysCHANGE BOB DAY'S LOCATION TO BLDG.
7.If the data base is constructed in such a way thatan employee is associated with a department, a depart-ment is associated with a location, and an employee'slocation is assumed to be that of his department, henprocessing the user's request will either result in achange in the location of the department (and all itsemployees) or force a reorganization of the data base.Multilevel Systems.
For a number of applications,users would like to be able to access data bases bymeans of any one of several query systems at variouslevels of relative convenience, precision, and efficien-cy.
For example, we might imagine a natural-language system that:?
Accepts English questions and translates them intopredicate calculus.?
Translates predicate calculus into data base queriesin a formal language that does not require the userto know the structure of the data base.?
Translates uch queries into a formal language thatspecifies particular joins between generic files.?
Translates those queries into specific codes thatprescribe the order in which joins are to be madeon particular physical files.Users could interact with the underlying data by ask-ing questions at any one of these levels.
This featureis available in Waltz 1978 and Hendrix et al 1978.Context Setting.
Users would find it convenient orestrict the context of evaluation.
For example, aftersaying "Consider only US ships," the question "Whatships are in the Med" would retrieve only US ships inthe Med.
This feature is available in Thompson andThompson 1975.Graceful Failure.
With little effort, the responseof most Level 1 systems to failure could be greatlyimproved.
Ideas for graceful failure include Codd's1974 notion of rendezvous, flexible parsing (as inCarbonell and Hayes 1981), and intelligent responsesto null answers (as in Kaplan 1979 and Mays 1980).Work on ungrammatical and unparsable sentences asin Kwasny and Sondheimer 1981 is also relevant here.Concise Responses.
The answers provided by Level1 systems could be made more intelligent in some spe-cial cases.
For example, if asked, "Who has a compa-ny car?"
a smart system might answer "The presidentand the VPs,"  rather than produce a list of the namesof the president and vice-presidents.
(An"outsmarted" system might answer "Employees in theADM Building with ID-NUMBERs less than 1072whose SPOUSE-MIDDLE-NAME is Jane.")Metaquestions.
It has become obvious over the lastfew years that users of natural-language interfaces todata bases desire far more than mere access to thedata therein.
There are a number of types of "meta-questions" they would like to pose as well.
Amongthem are the following:What information is in the db?What are the allowable values for employee jobtitles?How timely are the sales data?How were they acquired?How reliable is the source?Can you handle relative clauses?Can you handle a sentence that has a relativeclause?Why might the ship not be ready (causal relation-ships)?Some steps in this direction have been taken inMcKeown 1980 and Hendrix et al 1978.1.7.3 Level 2 SystemsPrimary Characterist icsLevel 2 systems must include an explicit theory oftheir domain of application (or be able to acquire one"on the fly," as in Haas and Hendrix 1980!).
That is,they incorporate internal representations of some ofthe objects in the domain, as well as explicit know-ledge about particular instances of relationships amongthose objects.
The general paradigm of these systemsis to:?
Use an explicit theory of the application domain tocontrol all processing.?
Translate into an intermediate logical form, ratherthan into a db query.?
Provide access to multiple knowledge sources.?
Use deduction techniques to aid translation and factretrieval.?
Provide discourse models for noun-phrase resolu-tion.?
Allow explicit descriptions of events with complexhistories.?
Follow the course of processes to determine thechang ing  physical context against which noun-phrases must be resolved.?
Provide for dynamic data bases.?
Use constraints to check the validity of data.A key facet of Level 2 systems is that they useknowledge about particular individuals and their spe-cific properties to help resolve definitely determinedAmerican Journal of Computational Linguistics, Volume 8, Number 2, April-June 1982 59Gary G. Hendrix Natural Language Interfacenoun phrases.
Level 2 systems may also have dis-course models that draw upon a source of knowledgeas to which objects have been mentioned recently orare otherwise in focus (see Grosz 1977) because oftheir particular properties and the structure of thediscourse.To contrast Levels 1 and 2, consider an NL inter-face to a railroad's information management system.In a Level 1 system, a question such as "Where arethe boxcars?"
will always mean "Tell me the locationsof ALL the boxcars in the data base."
In a Level 2system, if we have just indicated that we want to makeup a train from the rolling stock in Yard 3, only box-cars in Yard 3 will be retrieved.
In a Level 1 system,if we ask "What are the numbers of the cars?"
we willget numbers for all cars of all types.
In a Level 2system, only the boxcars in Yard 3 would be selected.Systems of the Level 2 type are becoming morecommon in laboratories and are likely to provide thebasis for more sophisticated interface systems in thefuture.
Level 2 ideas are also being developed inde-pendently by researchers concerned with data basesystems per se (such as Wiederhold, Chen andMcLeod).The Intermediate-Language ProblemIt is generally easier to produce a Level 1 systemthat can cope in at least an elementary manner withsome arbitrary phenomenon than it is to produce thecorresponding Level 2 system.
This has led to thebelief in some quarters that ad hoc systems are actual-ly more flexible than linguistically motivated systems.This is probably a distortion of the true situation.Level 1 systems translate directly into calls on soft-ware, whereas Level 2 systems force all inputs into auniform, intermediate logical form.
The result is thatLevel 2 systems deal with a linguistic phenomenonrelatively well, once they deal with it at all, but theyare forced to confront a general case before they copewith any specific instance.
Level 1 systems can quick-ly accommodate simple new extensions, but tend tohave very uneven linguistic coverage.
As more exten-sions are added, an unwieldy "house of cards" is cre-ated which soon collapses under its own weight.Beyond Convent ional  Data BasesLevel 2 systems are well equipped to move beyondthe relatively simple problems of interfacing with con-ventional data bases composed of atomic facts.
Inparticular, Level 2 systems may be easily interfacedwith data bases capable of storing any well - formedformula in f irst-order logic - namely, with a muchricher body of information than is available in conven-tional data bases.We may also envision Level 2 systems that usemultimedia communication, e.g., the combinat ion ofnatural language with graphics and pointing.Limitations of Level 2 SystemsAlthough Level 2 systems contain explicit theoriesof objects and relationships in their application do-mains, they do not contain explicit theories of theknowledge, goals, or plans of external systems, such asexternal data bases and the user.
Consequently, Level2 systems are incapable of reasoning about the inten-tion of user inputs or about how to use external databases.
If external data bases (or other knowledgesources) are used by such systems, the attachment tothem is provided through procedures whose knowledgeof the external systems is implicit in the computercodes themselves and is thus unavailable for meaning-ful examination by the system.Basic Stumbling BlocksEven for Level 2 systems, many fundamental prob-lems remain unanswered.
Much of the deficiency cen-ters upon the current inability of computers to repre-sent and reason about time and space, substances,collective entities, events, actions, processes, nonstan-dard quantifiers, proposit ional attitudes, and modali-ties.
These are thorny problems that philosophers,linguists, mathematicians, and computer scientists havebeen wrestling with for many years.
Their solution isnot likely to come easily.1,,7.4 Level 3 SystemsPrincipal Characterist icsLevel 3 systems contain explicit theories of externalagents, including information about their knowledge,goals, and plans.
Some possible agents are the user,various data bases, human experts, and other softwaresystems.
Level 3 systems always translate into anexplicit representat ion of what a user has said; thatanalysis then becomes the starting point for reasoningabout:D, What the user meant.D.
How to use internal and external resources to ac-quire information eeded to respond to the user.~, How to communicate with the user's implied goals.Eventually, we may see Level 3 interfaces emerging asa kind of information broker.
Such a broker would:t, Model multiple external entities (both human andmechanical).=, Communicate with each in his (or its) own language.=, Use and explicitly understand goal-directed behav-ior.What we have at present is only a start toward build-ing systems of this level of sophistication.
If we canbuild them at all, they will no doubt be many times60 American Journal of Computational Linguistics, Volume 8, Number 2, April-June 1982Gary G. Hendrix Natural Language Interfacemore expensive computationally than the Level 1 and2 systems now available.1.7.5 The NL- Inter face Problem in Perspect iveIf we are ultimately to achieve our long-range ob-jective of producing genuinely fluent natural-languageinterfaces to computer systems, we must recognize andpay special attention to the fundamental problems oflanguage understanding.
It has recently become evi-dent that the use of natural language must be studiedas one facet of a general theory of goal-directed be-havior.
In particular, to use natural language fluently,a system must understand how the communicationprocess itself is affected by language users' goals,plans, and beliefs.So that the field of Computational Linguistics maybenefit our society in both the short and the longterm, it is important o continue work at all three lev-els of systems described above.
Because it has onlyrecently become technically feasible to consider theactual construction of a Level 3 system, special con-sideration should be given to launching a researchprogram at that level.1.8 Recommendat ionsThe Natural -Language Interface Panel of theWorkshop on Applied Computat ional  Linguistics inPerspective made the following recommendations tothe sponsors:?
Identify a specific DoD data base amenable to Level1 technology and, using proven techniques, supportthe construction of an interface to it.?
Support AI core research on knowledge representa-tion, acquisition, and use.?
Support basic work on the use of natural anguage asgoal-directed behavior.American Journal of Computational Linguistics, Volume 8, Number 2, April-June 1982 61
