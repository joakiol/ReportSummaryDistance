ProFIT: Prolog with Features, Inheritance and TemplatesGregor ErbachUniversit~t des Saarl~ndesComputerlinguistikD-66041 Saarbrficken, Germanye-mail: erbach~col i. uni-sb, deURL : http ://coli.
uni-sb, de/~ erbach/AbstractProFIT is an extension of Standard Pro-log with Features, Inheritance and Tem-plates.
ProFIT Mlows the programmeror grammar developer to declare an in-heritance hierarchy, features and tem-plates.
Sorted feature terms can be usedin ProFIT programs together with Pro-log terms to provide a clearer descrip-tion language for linguistic structures.ProFIT compiles all sorted feature termsinto a Prolog term representation, sothat the built-in Prolog term unificationcan be used for the unification of sortedfeature structures, and no special uni-fication algorithm is needed.
ProFITprograms are compiled into Prolog pro-grams, so that no meta-interpreter isneeded for their execution.
ProFIT thusprovides a direct step from grammars de-veloped with sorted feature terms to Pro-log programs usable for practical NLPsystems.1 IntroductionThere are two key ingredients for building an NLPsystem:?
a linguistic description?
a processing model (parser, generator etc.
)In the past decade, there have been divergingtrends in the area of linguistic descriptions and inthe area of processing models.
Most large-scalelinguistic descriptions make use of sorted featureformalisms, 1 but implementations of these for-malisms are in general too slow for building prac-tically usable NLP systems.
Most of the progressin constructing efficient parsers and generatorshas been based on logic grammars that make use1Sorted feature structures are sometimes referredto as typed feature structures, e.g.
in Carpenter's"Logic of Typed Feature Structures."
We follow theusage in Logic Programming and the recent HPSGliterature.of ordinary prblog terms.
We provide a generaltool that brings together these developments bycompiling sorted feature terms into a Prolog termrepresentation, so that techniques from logic pro-gramming and logic grammars can be used to pro-vide efficient processing models for sorted featuregrammars.In this introductory section, we discuss the ad-vantages of sorted feature formalisms, and of thelogic grammar paradigm, and show how the twodevelopments can be combined.
The followingsections describe the ProFIT language which pro-vides sorted feature terms for Prolog, and its im-plementation.1.1 Grammar  Deve lopment  in Sor tedFeature  Formal i smsSorted feature formalisms are often used for thedevelopment of large-coverage rammars, becausethey are very well suited for a structured escrip-tion of complex linguistic data.
Sorted featureterms have several advantages over Prolog termsas a representation langauge.1.
They provide a compact notation.
Featuresthat are not instantiated can be omitted;there is no need for anonymous variables.2.
Features names are mnemonic, argument po-sitions are not.3.
Adding a new feature to a sort requiresone change in a declaration, whereas addingan argument o a Prolog functor requireschanges (mostly insertion of anonymous vari-ables) to every occurence of the functor.4.
Specification of the subsort relationship ismore convenient han constructing Prologterms which mirror these subsumption rela-tionships.Implementations of sorted feature formalismssuch as TDL (Krieger and Sch~ifer, 1994), ALE(Carpenter, 1993), CUF (DSrre and Dorna, 1993),TFS (Emele and Zajac, 1990) and others havebeen used successfully for the development andtesting of large grammars and lexicons, but theymay be too slow for actual use in applications180because they are generally built on top of Pro-log or LISP, and can therefore not be as efficientas the built-in unification of Prolog.
There area few logic programming langauges, uch as LIFE(Ait-Kaci and Lincoln, 1989) or Oz (Smolka et al,1995), that provide sorted feature terms, but nocommercial implementations of these languageswith efficient compilers are yet available.1.2 Eff icient Process ing based on LogicGrammarsMuch work on efficient processing algorithms hasbeen done in the logic grammar framework.
Thisincludes work on?
Compiling grammars into efficient parsersand generators: compilation of DCGs into(top-down) Prolog programs, left-cornerparsers (BUP), LR parsers, head-cornerparsers, and semantic-head driven genera-tors.?
Use of recta-programming for self-monitoringto ensure generation of unambiguous utter-ances (Neumann and van Noord, 1992)?
Work in the area of Explanation-BasedLearning (EBL) to learn frequently used'structures (Samuelsson, 1994)?
Tabulation techniques, from the use of well-formed substring tables to the latest devel-opments in Earley deduction, and memoingtechniques for logic programming (Neumann,1994)?
Work based on Constraint Logic Program-ming (CLP) to provide processing models forprinciple-based grammars (Matiasek, 1994)?
Using coroutining (dif, freeze etc.)
to providemore efficient processing models?
Partial deduction techniques to produce moreefficient grammars?
Using Prolog and its indexing facilities tobuild up a lexicon databaseSince much of this work involves compilation ofgrammars into Prolog programs, such programscan immediately benefit from any improvementsin Prolog compilers (for example the tabulationprovided by XSB Prolog can provide a more effi-cient implementation f charts) which makes thegrammars more usable for NLP systems.1.3 Combin ing  Logic Grammars  andSor ted  Feature  Formal ismsIt has been noted that first-order Prolog termsprovide the equivalent expressive power as sortedfeature terms (Mellish, 1992).
For example,Carpenter's typed feature structures (Carpenter,1992) can easily be represented as Prolog terms, ifthe restriction is given up that the sort hierarchybe a bounded complete partial order.Such compilation of sorted feature terms intoProlog terms has been successfully used in theCore Language Engine (CLE) (Alshawi, 1991) andin the Advanced Linguistic Engineering Platform(ALEP), (Alshawi et al, 1991).
2 ProFIT ex-tends the compilation techniques of these systemsthrough the handling of multi-dimensional inher-itance (Erbach, 1994), and makes them generallyavailable for a wide range of applications by trans-lating programs (or grammars) with sorted featureterms into Prolog programs.ProFIT is not a grammar formalism, but ratherextends any grammar formalism in the logic gram-mar tradition with the expressive power of sortedfeature terms.2 The  ProF IT  LanguageThe set of ProFIT programs is a superset of Pro-log programs.
While a Prolog program consistsonly of definite clauses (Prolog is an untyped lan-guage), a ProFIT program consists of datatypedeclarations and definite clauses.
The clauses of aProFIT program can make use of the datatypes(sorts, features, templates and finite domains)that are introduced in the declarations.
A ProFITprogram consists of:?
Declarations for sorts?
Declarations for features?
Declarations for templates?
Declarations for finite domains?
Definite clauses2.1 Sort Declarat ionsIn addition to unsorted Prolog terms, ProFIT al-lows sorted feature terms, for which the sorts andfeatures must be declared in advance.The most general sort is top, and all other sortsmust be subsorts of top.
Subsort declarationshave the syntax given in (1).
The declarationstates that all Subi are subsorts of Super, andthat all Subi are mutually exclusive.Super >\[Sub,,..., (1)It is also possible to provide subsorts that arenot mutually exclusive, as in (2), where one sub-sort may be chosen from each of the "dimensions"connected by the * operator (Erbach, 1994).Super > \[Subl.l,...,Subl.n\] *: (2)\[Subk.l,..., Subk.m\]Every sort must only be defined once, i.e.
itcan appear only once on the left-hand side of theconnective >.2Similar, but less efficient compilation schemes areused in Hirsh's P-PATR (Hirsh, 1986) and Coving-ton's GULP system (Covington, 1989).181The sort hierarchy must not contain any cycles,i.e.
there must be no sorts A and B, such thatA#B,  andA> B> A.The immediate subsorts of top can be declaredto be extensional.
Two terms which are of anextensional sort are only identical if they.have amost specific sort (which has no subsort), and ifall features are instantiated to ground terms.
If asort is not declared as extensional, it is intensional.Two intensional terms are identical only if theyhave been unified.2.2 Feature  Dec la ra t ionsUnlike unsorted feature formalisms (such as PATR-II), where any feature can be added to any struc-ture, ProF IT  follows the notion of appropriate-ness in Carpenter's logic of typed feature struc-tures (Carpenter, 1992), and introduces featuresfor particular sorts.
For each sort, one must de-clare which features are introduced by it.
Thefeatures introduced by a sort are inherited by allits subsorts, which may also introduce additionalfeatures.
A feature must be introduced only atone most general sort.
This makes it possible toprovide a notation in which the sort name can beomitted since it can be inferred from the use of afeature that is appropriate for that sort.This notion of appropriateness is desirable forstructuring linguistic knowledge, as it prevents thead-hoc introduction of features, and requires acareful design of the sort and feature hierarchy.Appropriateness is also a prerequisite for compila-tion of feature terms into fixed-arity Prolog terms.Each feature has a sortal restriction for itsvalue.
If a feature's value is only restricted to be ofsort top, then the sortal restriction can be omit-ted.
The syntax of feature declarations i given in(3).Sort i n t ro  \[Feature1 : Restrl ,: (3)Feature,  : Restrn\].The following declaration defines a sort bi-nary_tree with subsorts leaf and internaLnode.The sort binary tree introduces the feature labeland its subsort adds the features lefl_daughler andright_daughter.
I f  a sort has subsorts and intro-duces features, these are combined in one declara-tion.binary_t ree  > Ileal, internal_node\]i n t ro  \ [ label \ ] .int ernal_nodei n t ro  \ [ le f t _daughter :b inary_ t ree ,r ight_daught  er: b inary_ t ree \ ] .2.3 Sor ted  Feature  TermsOn the basis of the declarations, sorted featureterms can be used in definite clauses in addition toand in combination with Prolog terms.
A Prologterm can have a feature term as its argument, anda feature can have a Prolog term as its value.
Thisavoids potential interface problems between dif-ferent representations, since terms do not have tobe translated between different languages.
As anexample, semantic representations in first-orderterms can be used as feature values, but do notneed to be encoded as feature terms.Sorted feature terms consist of a specificationof the sort of the term (4), or the specification ofa feature value (5), or a conjunction of terms (6).A complete BNF of all ProFIT terms is given inthe appendix.< Sort (4)Feature !
Value (5)Term ~ Term (6)The following clauses (based on HPSG) statethat a structure is saturated if its subcat valueis the empty list, and that a structure satisfiesthe Head Feature Principle (hfp) if its head fea-tures are identical with the head features of itshead daughter.
3 Note that these clauses providea concise notation because uninstantiated featurescan be omitted, and the sorts of structures do nothave to be specified explicitly because they can beinfered from use of the features.saturated ( synsem !
local !
cat !
subcat !
<elist ).hfp ( synsem !
local !
cat !
head !
Xdtrs !
head_dr r !
synsem !
local !
cat !
head !
X ).Note that conjunction also provides the possi-blity to tag a Prolog term or feature term with avariable (Var ~ Term).2.4 Feature  SearchIn the organisation of linguistic knowledge, featurestructures are often deeply embedded, due to theneed to group together sets of features whose valuecan be structure-shared.
In the course of grammardevelopment, it is often necessary to change the"location" of a feature in order to get the rightstructuring of information.Such a change of the '~feature geometry" makesit necessary to change the path in all referencesto a feature.
This is often done by introducingtemplates whose sole purpose is the abbreviationof a path to a feature.ProFIT provides a mechanism to search forpaths to features automatically provided that thesortal restrictions for the feature values are strongenough to ensure that there is a unique minimalpath.
A path is minimal if it does not contain anyrepeated features or sorts.3These clauses assume appropriate declarations forthe sort el ist ,  and for the features ynsem, local ,cat,  subcat, head, dtrs  and head_dtr.182The sort from which to start the feature searchmust either be specified explicitly (7) or implicitlygiven through the sortal restriction of a featurevalue, in which case the sort can be omitted andthe expression (8) can be used.Sort >>> Feature !
Term (7)>>> Feature !
Term (8)The following clause makes use of feature searchto express the Head Feature Principle (hfp).hfp( s ign>>>head !Xdtrs!head_dtr} >>>head!X ).While this abbreviation for feature paths is newfor formal description languages, similar abbrevi-atory conventions are often used in linguistic pub-lications.
They are easily and unambiguously un-derstood if there is only one unique path to thefeature which is not embedded in another struc-ture of the same sort.2.5 TemplatesThe purpose of templates is to give names tofrequently used structures.
In addition to beingan abbreviatory device, the template mechanismserves three other purposes.?
Abstraction and interfacing by providing afixed name for a value that may change,?
Partial evaluation,?
Functional notation that can make specifica-tions easier to understand.Templates are defined by expressions of theform (9), where Name and Value can be arbitraryProFIT terms, including variables, and templatecalls.
There can be several template definitionswith the same name on the left-hand side (rela-tional templates).
Since templates are expandedat compile time, template definitions must not berecursive.Name := Value, (9)Templates are called by using the templatename prefixed with ?
in a ProFIT term.Abstraction makes it possible to change datastructures by changing their definition only at onepoint.
Abstraction also ensures that databases(e.g.
lexicons) which make use of these abstrac-tions can be re-used in "different kinds of appli-cations where different datastructures representthese abstractions.Abstraction through templates i also useful fordefining interfaces between grammars and pro-cessing modules.
If semantic processing mustaccess the semantic representations of differentgrammars, this can be done if the semantic mod-ule makes use of a template defined for each gram-mar that indicates where in the feature structurethe semantic information is located, as in the fol-lowing example for HPSG.semantics (synsem !
local !cont !
Sem) : = Sem.Partial evaluation is achieved when a structure(say a principle of a grammar) is represented bya template that gets expanded at compile time,and does not have to be called as a goal duringprocessing.We show the use of templates for providingfunctional notation by a simple example, in whichthe expression ?f i rs t (X)  stands for the first ele-ment of list X, and ~rest(X)  stands for the tailof list X, as defined by the following template def-inition.f i rst( \ [F i rst  J Rest\]) := First.rest( \ [F i rst lRest\ ] )  := Rest.The member elation can be defined with thefollowing clauses, which correspond very closelyto the natural-language statement of the memberrelation given as comments.
Note that expansionof the templates yields the usual definition of themember elation in Prolog.Y, The first element of a list~, is a member of the list.member (@first (List), List).~, Element is a member of a listY, if it is a member of the rest of the listmember(Element,List) :-member (Element, @rest (List)).The expressive power of an n-place template isthe same as that of an n+l  place fact.2.6 D is junct ionDisjunction in the general case cannot be encodedin a Prolog term representation.
4 Since a generaltreatment of disjunction would involve too muchcomputational overhead, we provide disjunctiveterms only as syntactic sugar.
Clauses containingdisjunctive terms are compiled to several clauses,one for each consistent combination of disjuncts.Disjunctive terms make it possible to state factsthat belong together in one clause, as the follow-ing formulation of the Semantics Principle (s em_p)of HPSG, which states that the content value of ahead-adjunct s ructure is the content value of theadjunct daughter, and the content value of theother headed structures (head-complement, head-marker, and head-filler structure) is the contentvalue of the head daughter.sem_p ( (<head_adj>>>cont!X ~ >>>adj dtr!>>>cont!X )or( ( <head_compor <head_markeror <head_fi l ler) ~>>>coat !Y ~ >>>head_dtr !>>>coat !Y )).For disjunctions of atoms, there exists a Prologterm representation, which is described below.4see the complexity analysis by Brew (Brew, 1991).1832.7 F in i te  DomainsFor domains involving only a finite set of atoms aspossible values, it is possible to provide a Prologterm representation (due to Colmerauer, and de-scribed by Mellish (Mellish, 1988)) to encode anysubset of the possible values in one term.Consider the agreement features person (withvalues 1, 2 and 3) and number (with values sgand pl) .
For the two features together thereare six possible combinations of values (l&;sg,2&sg, 3&sg, l&pl, 2&pl, 3&pl).
Any subset ofthis set of possible values can be encoded as oneProlog term.
The following example shows thedeclaration needed for this finite domain, andsome clauses that refer to subsets of the possi-ble agreement values by making use of the logi-cal connectives " (negation), & (conjunction), or(disjunction).5agr fin_dom \ [1,2,3\]  * \[sg,pl\].verb(sleeps,3&sg).verb(sleep, -(3&sg)).verb(am, l&sg).verb(is, 3&sg).verb(are, 2 or pl).np( ' I '  , l&sg) .np(you, 2~agr).This kind of encoding is only applicable to do-mains which have no coreferences reaching intothem, in the example only the agreement featuresas a whole can be coreferent with other agreementfeatures, but not the values of person or numberin isolation.
This kind of encoding is useful toavoid the creation of choice points for the lexiconof languages where one inflectional form may cor-respond to different feature values.2.8 Cycl ic  TermsUnlike Prolog, the concrete syntax of ProFIT al-lows to write down cyclic terms by making use ofconjunction:x & ~(x).Cyclic terms constitute no longer a theoreticalor practical problem in logic programming, and al-most all modern Prolog implementations can per-form their unification (although they can't printthem out).
Cyclic terms arise naturally in NLPthrough unification of non-cyclic terms, e.g., theSubcategorization Principle and the Spec Princi-ple of HPSG.ProFIT supports cyclic terms by being able toprint them out as solutions.
In order to do this,SThe syntax for finite domainterms is Terra,Domain.
However, when atoms from afinite domains are combined by the conjunction, dis-junction and negation connectives, the specificationof the domain can be omitted.
In the example, thedomain must only be specified for the value 2, whichcould otherwise be confused with the integer 2.the dreaded occur check must be performed.
Sincethis must be done only when results are printedout as ProFIT terms, it does not affect the run-time performance.3 From ProF IT  terms to Prologterms3.1 Compi la t ion  of  Sor ted  Feature  TermsThe compilation of sorted feature terms into aProlog term representation is based on the follow-ing principles, which are explained in more detailin (Mellish, 1988; Mellish, 1992; Schgter, 1993;Erbach, 1994).?
The Prolog representation f a sort is an in-stance of the Prolog representation f its su-persorts.?
Features are represented by arguments.
If afeature is introduced by a subsort, then theargument is added to the term that furtherinstantiates its supersort.?
Mutually exclusive sorts have different func-tots at the same argument position, so thattheir unification fails.We illustrate these principles for compilingsorted feature terms into Prolog terms with anexample from aPse.
The following declarationstates that the sort s ign has two mutually ex-clusive subsorts lex ica l  and phrasa l  and intro-duces four features.sign > \[lexical,phrasal\]intro \[phon,synsem,qstore,retrieved\].In the corresponding Prolog term representa-tion below, the first argument is a variable whoseonly purpose is being able to test whether twoterms are coreferent or whether they just happento have the same sort and the same values for allfeatures.
In case of extensional sorts (see section2.1), this variable is omitted.
The second argu-ment can be further instantiated for the subsorts,and the remaining four arguments correspond tothe four features.$s ign (Var, LexPhras, Phon, Synsem, qstore, Retriev)The following declaration introduces two sorthierarchy "dimensions" for subsorts of phrasa l ,and one new feature.
The corresponding Prologterm representation i stantiates the representa-tion for the sort s ign further, and leaves argumentpositions that can be instantiated further by thesubsorts of phrasa l ,  and for the newly introducedfeature daughters.phrasal > \[headed,non_headed\] * \[decl,int,rel\]intro \[daughters\].184$sign(yar,$phrasal(Phrasesort,Clausesort,Dtrs),Phon,Synsem,Qstore,Retrieved)3.2 Compilat ion of  Finite DomainsThe compilation of finite domains into Prologterms is performed by the "brute-force" methoddescribed in (Mellish, 1988).
A finite domain withn possible domain elements is represented by aProlog term with n + 1 arguments.
Each domainelement is associated with a pair of adjacent argu-ments.
For example, the agreement domain agrfrom section 2.7 with its six elements (l&sg, 2&sg,3&sg, l~:pl, 2~:pl, 3&pl) is represented by a Pro-log term with seven arguments.Sagr(1,A,B,C,D,E,O)Note that the first and last argument must bedifferent.
In the example, this is achieved by in-stantiation with different atoms, but an inequal-ity constraint (Prolog I\['s d i f )  would serve thesame purpose.
We assume that the domain el-ement l~zsg corresponds to the first and secondarguments, 2&sg to the second and third arguem-nts, and so on, as illustrated below.Sagr( 1 , h , B , C , D , E , 0 )lsg 2sg 3sg lpl 2pl 3plA domain description is translated into a Pro-log term by unifying the argument pairs that areexcluded by the description.
For example, thedomain description 2 or pl  excludes l&sg and3&sg, so that the the first and second argumentare unified (l~sg), as well as the third and fourth(3&sg).$agr(1 ,1 ,X,X,D,E,0)When two such Prolog terms are unified, theunion of their excluded elements is computed byunificatation, or conversely the intersection of theelements which are in the domain description.The unification of two finite domain terms is suc-cessful as long as they have at least one elementin common.
When two terms are unified whichhave no element in common, i.e., they exclude alldomain elements, then unification fails because allarguments become unified with each other, includ-ing the first and last arguments, which are differ-ent.4 ImplementationProFIT has been implemented in Quintus and Sic-stus Prolog, and should run with any Prolog thatconforms to or extends the proposed ISO Prologstandard.All facilities needed for the development of ap-plication programs, for example the module sys-tem and declarations (dynamic, multifile etc.)
aresupported by ProFIT.Compilation of a ProFIT file generates twokinds of files as output.1.
Declaration files that contain information forcompilation, derived from the declarations.2.
A program file (a Prolog program) that con-tains the clauses, with all ProFIT terms com-piled into their Pro\]og term representation.The program file is compiled on the basis ofthe declaration files.
If the input and output ofthe program (the exported predicates of a mod-ule) only make use of Prolog terms, and featureterms are only used for internal purposes, then theprogram file is all that is needed.
This is for ex-ample the case with a grammar that uses featureterms for grammatical description, but whose in-put and output (e.g.
graphemic form and logicalform) are represented as normal Prolog terms.Declarations and clauses can come in any or-der in a ProFIT file, so that the declarations canbe written next to the clauses that make use ofthem.
Declarations, templates and clauses can bedistributed across several files, so that it becomespossible to modify clauses without having to re-compile the declarations, or to make changes toparts of the sort hierarchy without having to re-compile the entire hierarchy.Sort checking can be turned off for debug-ging purposes, and feature search and handlingof cyclic terms can be turned off in order to speedup the compilation process if they are not needed.Error handling is currently being improved togive informative and helpful warnings in case ofundefined sorts, features and templates, or cyclicsort hierarchies or template definitions.For the development of ProFIT programs andgrammars, it is necessary to give input and out-put and debugging information in ProFIT terms,since the Pro\]og term representation is not veryreadable.
ProFIT provides a user interface which* accepts queries containing ProFIT terms, andtranslates them into Prolog queries,?
converts the solutions to the Prolog queryback into ProFIT terms before printing themout,?
prints out debugging information as ProFITterms.When a solution or debugging information isprinted out, uninstantiated features are omit-ted, and shared structures are printed only onceand represented by variables on subsequent oc-curences.A pretty-printer is provided that produces aneatly formatted screen output of ProFIT terms,and is configurable by the user.
ProFIT terms canalso be output in IATEX format, and an interfaceto the graphical feature editor Fegramed is fore-seen.185In order to give a rough idea of the efficiencygains of a compilation into Prolog terms insteadof using a feature term unification algorithm im-plemented on top of Prolog, we have comparedthe runtimes with ALE and the Eisele-DSrre al-gorithm for unsorted feature unification for thefollowing tasks: (i) unification of (unsorted) fea-ture structures, (ii) unification of inconsistent fea-ture structures (unification failure), (iii) unifica-tion of sorts, (iv) lookup of one of I0000 featurestructures (e.g.
lexical items), (v) parsing withan HPSG grammar to provide a mix of the abovetasks.The timings obtained so far indicate thatProFIT is 5 to 10 times faster than a system whichin~plements a unification algorithm on top of Pro-log, a result which is predicted by the studies ofSchSter (SchSter, 1993) and the experience of theCore Language Engine.The ProFIT system and documentation areavailable free of charge by anonymous ftp (server:ftp.coli.uni-sb.de, directory: pub/profit).5 Conc lus ionProFIT allows the use of sorted feature terms inProlog programs and Logic Grammars withoutsacrificing the efficiency of Prolog's term unifi-cation.
It is very likely that the most efficientcommercial Prolog systems, which provide a ba-sis for the implementation f NLP systems, willconform to the proposed ISO standard.
Since theISO standard includes neither inheritance hierar-chies nor feature terms (which are indispensiblefor the development of large grammars, lexiconsand knowledge bases for NLP systems), a toollike ProFIT that compiles orted feature termsinto Prolog terms is useful for the development ofgrammars and lexicons that can be used for ap-plications.
ProFIT is not a grammar formalism,but rather aims to extend current and future for-malisms and processing models in the logic gram-mar tradition with the expressive power of sortedfeature terms.
Since the output of ProFIT com-pilation are Prolog programs, all the techniquesdeveloped for the optimisation of logic programs(partial evaluation, tabulation, indexing, programtransformation techniques etc.)
can be appliedstraightforwardly to improve the performance ofsorted feature grammars.6 AcknowledgementsThis work was supported by?
The Commission of the European Com-munities through the project LRE-61-061"Reusable Gratnmatical Resources", where ithas been (ab-)used in creative ways to proto-type extensions for the ALEP formalism suchas set descriptions, linear precedence con-straints and guarded constraints (Manand-hat, 1994; Manandhar, 1995).
* Deutsche Forschungsgemeinschaft, SpecialResearch Division 314 "Artificial Intelli-gence - Knowledge-Based Systems" throughproject N3 "Bidirectional Linguistic Deduc-tion" (BiLD), where it is used to compiletyped feature grammars into logic grammars,for which bidirectional NLP algorithms aredeveloped, and?
Cray Systems (formerly PE-Luxembourg),with whom we had fruitful interaction con-cerning the future development of the ALEPsystem-.Some code for handling of finite domains wasadapted from a program by Gertjan van Noord.Wojciech Skut and Christian Braun were a greathelp in testing and improving the system.
Thanksto all the early users and ~-testers for discover-ing bugs and inconsistencies, and for providingfeedback and encouragement.
Special thanks forservice with a smiley :-).ReferencesHassan A'it-Kaci and Patrick Lincoln.
1989.
Life,a naturM language for natural language.
T. A.Informations, 30(1-2):37 - 67.H.
Alshawi, D. J. Arnold, R. Backofen, D. M.Carter, J. Lindop, K. Netter, :I. Tsujii, andH.
Uszkoreit.
1991.
Eurotra 6/1: Rule for-mMism and virtual machine design study - -  Fi-nal report.
Technical report, SRI International,Cambridge.Hiyan Alshawi, editor.
1991.
The Core LanguageEngine.
MIT Press.Chris Brew.
1991.
Systemic lassification and itsefficiency.
Computational Linguistics, 17(4):375- 408.Bob Carpenter.
1992.
The logic of typed featurestructures.
Cambridge Tracts in TheoreticalComputer Science.
Cambridge University Press,Cambridge.Bob Carpenter, 1993.
ALE Version ~: User Man-ual.
University of Pittsburgh.Michael Covington.
1989.
GULP 2.0: an exten-sion of Prolog for unification-based grammar.Technical Report AI-1989-01, Advanced Com-putational Methods Center, University of Geor-gia.Jochen DLrre and Michael Dorna.
1993.
CUF -A formalism for linguistic knowledge represen-tation.
In Jochen DLrre, editor, ComputationalAspects of Constraint-Based Linguistic Descrip-tion.
Deliverable RI.P.A.
DYANA-2 - ESPRITBasic Research Project 6852.186Martin Emele and R4mi Zajac.
1990.
Typedunification grammars.
In Proceedings of the13th International Conference on Computa-tional Linguistics, Helsinki.Gregor Erbach.
1994.
Multi-dimensional inheri-tance.
In H. Trost, editor, Proceedings of KON-VENS '9.~, pages 102 - 111, Vienna.
Springer.Susan Beth Hirsh.
1986.
P-PATth A compilerfor unification-based grammars.
Master's the-sis, Stanford University, Stanford, CA.Draft ISO Standard for the Prolog language,ISO/IEC JTC1 SC22 WG17 Nl10 "Prolog:Part 1, General core".Hans-Ulrich Krieger and Ulrich Schlfer.1994.
7-79?--a type description language forconstraint-based grammars.
In Proceedings ofthe 15th International Conference on Computa-tional Linguistics, COLING-94, Kyoto, Japan.Suresh Manandhar.
1994.
An attributive logicof set descriptions and set operations.
In 32ndAnnual Meeting of the Association for Compu-tational Linguistics (A CL), pages 255 - 262, LasCruces, NM.Suresh Manandhar.
1995.
Deterministic on-sistency checking of LP constraints.
In Sev-enth Conference of the European Chapter ofthe Association for Computational Linguistics(EA CL), Dublin.Johannes Matiasek.
1994.
Conditional con-straints in a CLP-based HPSG implementation.In Harald Trost, editor, KONVENS '94, pages230 - 239, Vienna.Christopher S. Mellish.
1988. hnplementing sys-temic classification by unification.
Computa-tional Linguistics, 14(1):40-51.Christopher S.Mellish.
1992.
Term-encodable d -scription spaces.
In D. R. Brough, editor, LogicProgramming: New Frontiers, pages 189 - 207.Intellect, Oxford.Giinter Neumann and Gertjan van Noord.
1992.Self-monitoring with reversible grammars.
InProceedings of the 14th International Confer-ence on Computational Linguistics, Nantes, F.Giinter Neumann.
1994.
A Uniform Computa-tional Model for Natural Language Parsing andGeneration.
Ph.D. thesis, Universitit des Saar-landes, Saabriicken.Christer Samuelsson.
1994.
Fast Natural-Language Parsing Using Explanation-BasedLearning.
Ph.D. thesis, The Royal Institute ofTechnology and Stockholm University, Stock-holm.Andreas P. SchSter.
1993.
Compiling featurestructures into terms: A case study in Prolog.Technical Report RP-55, University of Edin-burgh, Centre for Cognitive Science.Gert Smolka, Martin Henz, and J6rg Wiirtz.1995.
Object-oriented concurrent constraintprogramming in Oz.
In P. van Hentenryck andV.
Saraswat, editors, Principles and Practice ofConstraint Programming, chapter 2, pages 27-48.
The MIT Press.Appendix:  BNF  for ProFIT TermsPFT := <SortFeature!PFTPFT & PFTPROLOGTEKMFINDOM@Template, FFT'' PFT>>>Feature!PFTSort>>>Feature!PFTPFT or PFT\[I.\[2.\[3\[4Is\[6\['z\[8\[9\[10.\[11.FINDOM := FINDOM@FiniteDomainNameI -FINDOMI FINDOM & FINDOM\[ F INDOM or FINDOM\[ AtomTerm of a sort Sort \]Feature-Value pair \]Conjunction of terms \]Any Prolog term \]Finite Domain term, BNF see below \]Template call \]Quoted term, is not translated \]Double-quoted, main functor not translated \]Search for a feature \]short for <Sort ?
>>>Feature!PFT \]Disjunction; expands to multiple terms \]187
