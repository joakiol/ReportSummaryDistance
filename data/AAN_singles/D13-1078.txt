Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages 821?826,Seattle, Washington, USA, 18-21 October 2013. c?2013 Association for Computational LinguisticsA synchronous context free grammar for time normalizationSteven BethardUniversity of Alabama at BirminghamBirmingham, Alabama, USAbethard@cis.uab.eduAbstractWe present an approach to time normalization(e.g.
the day before yesterday?2013-04-12)based on a synchronous context free grammar.Synchronous rules map the source languageto formally defined operators for manipulat-ing times (FINDENCLOSED, STARTATENDOF,etc.).
Time expressions are then parsed usingan extended CYK+ algorithm, and convertedto a normalized form by applying the opera-tors recursively.
For evaluation, a small setof synchronous rules for English time expres-sions were developed.
Our model outperformsHeidelTime, the best time normalization sys-tem in TempEval 2013, on four different timenormalization corpora.1 IntroductionTime normalization is the task of converting a naturallanguage expression of time into a formal representa-tion of a time on a timeline.
For example, the expres-sion the day before yesterday would be normalizedto the formal representation 2013-04-12 (assumingthat today is 2013-04-14) in the ISO-TimeML rep-resentation language (Pustejovsky et al 2010).
Timenormalization is a crucial part of almost any infor-mation extraction task that needs to place entities orevents along a timeline.
And research into methodsfor time normalization has been growing since theACE1 and TempEval (Verhagen et al 2010; UzZa-man et al 2013) challenges began to include timenormalization as a shared task.1http://www.itl.nist.gov/iad/mig/tests/ace/Most prior work on time normalization has takena rule-based, string-to-string translation approach.That is, each word in a time expression is looked upin a normalization lexicon, and then rules map thissequence of lexical entries directly to the normalizedform.
HeidelTime (Stro?tgen and Gertz, 2012), whichhad the highest performance in TempEval 2010 and2013, and TIMEN (Llorens et al 2012), which re-ported slightly higher performance in its own experi-ments, both follow this approach.
A drawback of thisapproach though is that there is no nesting of rules:for example, in HeidelTime the rules for yesterdayand the day before yesterday are completely separate,despite the compositional nature of the latter.A notable exception to the string-to-string ap-proach is the work of (Angeli et al 2012).
They de-fine a target grammar of typed pre-terminals, such asYESTERDAY (a SEQUENCE) or DAY (a DURATION),and compositional operations, such as SHIFTLEFT(a (RANGE, DURATION) ?
RANGE).
They applyan expectation-maximization approach to learn howwords align to elements of the target grammar, andachieve performance close to that of the rule-basedsystems.
However, their grammar does not allowfor non-binary or partially lexicalized rules (e.g.
SE-QUENCE ?
DURATION before SEQUENCE wouldbe impossible), and some of their primitive elementscould naturally be expressed using other primitives(e.g.
YESTERDAY as SHIFTLEFT(TODAY, 1 DAY)).We present a synchronous grammar for time nor-malization that addresses these shortcomings.
Wefirst define a grammar of formal operations over tem-poral elements.
We then develop synchronous rulesthat map time expression words to temporal opera-821Source: English[TIMESPAN]1[UNIT]2[NIL]4theweekof [TIMESPAN]3[FIELD]5[FIELD:MONTH]6March[FIELD:DAY]7[INT:1-31]86Target: Time Operators[TIMESPAN]1FINDENCLOSING [TIMESPAN]3FINDEARLIER PRESENT [FIELD]5[FIELD:MONTH]6MONTHOFYEAR 3[FIELD:DAY]7DAYOFMONTH [INT:1-31]86[UNIT]2WEEKSFigure 1: The synchronous parse from the source language the week of March 6 to the target formal time representationFINDENCLOSING(FINDEARLIER(PRESENT, MONTHOFYEAR?3, DAYOFMONTH?6), WEEKS).
Subscripts onnon-terminals indicate the alignment between the source and target parses.tors, and perform normalization by parsing with anextended CYK+ parsing algorithm.
We evaluate thisapproach to time normalization on the TimeBank,AQUAINT, Timen and TempEval 2013 corpora.2 Synchronous grammarsOur time grammar is based on the synchronous con-text free grammar formalism.
Synchronous gram-mars allow two trees, one in the source languageand one in the target language, to be constructed si-multaneously.
A synchronous context free grammarhas rules of the form X ?
(S,T, A), where X is anon-terminal, S is the sequence of terminals and non-terminals that X expands to in the source language,T is the sequence of terminals and non-terminalsthat X expands to in the target language, and A isthe alignment between the non-terminals of S and T(which must be the same).For time normalization, the source side is the nat-ural language text, and the target side is a formalgrammar of temporal operators.
Figure 1 shows asynchronous parse of the week of March 6 2.
The leftside is the source side (an English expression), theright side is the target side (a temporal operator ex-pression), and the alignment is shown via subscripts.2Figure 1 corresponds to an interpretation along the lines ofthe week of the last March 6.
The full grammar developed in thisarticle would also produce an interpretation corresponding to theweek of the next March 6, since the phrase is ambiguous.3 Target time grammarThe right side of Figure 1 shows an example ofour target formal representation: FINDENCLOSING(FINDEARLIER(PRESENT, MONTHOFYEAR?3,DAYOFMONTH?6), WEEKS).
Each terminal inthe parse is either a numeric value or an opera-tor like FINDENCLOSING, WEEKS or MONTHOF-YEAR.
Each non-terminal combines terminals ornon-terminals to create a [TIMESPAN], [PERIOD],[FIELD], [UNIT] or [INT].
The list of rules allowedby our target grammar (the right-hand side of oursynchronous grammar) is given in Table 1.Each of the target operators defines a procedure forcreating a temporal object from others.
For example,FINDENCLOSING takes a [TIMESPAN] and a [UNIT]and expands the start and end of the time span to filla period of one unit.
This could be used, for exam-ple, to define today as FINDENCLOSING(PRESENT,DAYS), where the PRESENT, which is instantaneous,is expanded out to the enclosing day.
Note that wedefine things like today and yesterday in terms ofprimitive operations, rather than making them primi-tives themselves as in (Angeli et al 2012).The left side of Figure 1 shows the synchronousparse of the source language.
Note that each of thenon-terminals is aligned (shown as a subscript) witha non-terminal in the target parse3, while terminalsare not aligned and may freely appear or disappear3We actually allow a slightly asynchronous grammar, wherea non-terminal may be used 0 or more times on the target side.822[INT] ?
integer[UNIT] ?
unit[FIELD] ?
field [INT][FIELD] ?
[FIELD]*[PERIOD] ?
SIMPLE [INT] [UNIT][PERIOD] ?
FRACTIONAL [INT] [INT] [UNIT][PERIOD] ?
UNSPECIFIED [UNIT][PERIOD] ?
WITHMODIFIER [PERIOD] modifier[TIMESPAN] ?
PAST[TIMESPAN] ?
PRESENT[TIMESPAN] ?
FUTURE[TIMESPAN] ?
FINDEARLIER [TIMESPAN] [FIELD][TIMESPAN] ?
FINDLATER [TIMESPAN] [FIELD][TIMESPAN] ?
FINDENCLOSING [TIMESPAN] [UNIT][TIMESPAN] ?
FINDENCLOSED [TIMESPAN] [FIELD][TIMESPAN] ?
STARTATENDOF [TIMESPAN] [PERIOD][TIMESPAN] ?
ENDATSTARTOF [TIMESPAN] [PERIOD][TIMESPAN] ?
MOVEEARLIER [TIMESPAN] [PERIOD][TIMESPAN] ?
MOVELATER [TIMESPAN] [PERIOD][TIMESPAN] ?
WITHMODIFIER [TIMESPAN] modifierTable 1: Rules allowed by the target time grammar.A ?unit?
is any java.time.temporal.TemporalUnit,e.g.
SECONDS, WEEKS or DECADES.
A ?field?
is anyjava.time.temporal.TemporalField, e.g.
HOUR-OFAMPM, DAYOFMONTH or CENTURY.
A ?modifier?is any of the TIMEX3 ?mod?
values defined in TimeML.from the source to the target.
Each non-terminal thuscorresponds to a synchronous grammar rule that de-scribes how a source expression should be translatedinto the target time grammar.
For example the rootnodes correspond to an application of the followingfull synchronous rule:[TIMESPAN]?source: [UNIT] of [TIMESPAN]target: FINDENCLOSING [TIMESPAN] [UNIT]4 Parsing algorithmParsing with a synchronous context free grammar ismuch the same as parsing with just the source side ofthe grammar.
Only a small amount of bookkeeping isnecessary to allow the generation of the target parseonce the source parse is complete.
We can thereforeapply standard parsing algorithms to this task.However, we have some additional grammar re-quirements.
As shown in Figure 1, we allow rulesthat expand into more than two terminals or non-terminals, the mixing of terminals and non-terminalsin a production, a special [NIL] non-terminal for theignoring of words, and a special [INT] non-terminalthat can match ranges of integers and does not re-quire all possible integers to be manually listed inthe grammar.
This means that we can?t directly useCYK parsing or even CYK+ parsing (Chappelier andRajman, 1998), which allows rules that expand intomore than two terminals or non-terminals, but doesnot meet our other requirements.Algorithm 1 shows our extended version of CYK+parsing.
As with standard CYK+ parsing, two chartsare filled, one for rules that have been completed (C)and one for rules that have been only partially ad-vanced (P ).
All parses covering 1 terminal are com-pleted first, then these are used to complete parsescovering 2 terminals, etc.
until all parses covering allterminals are complete.Our extensions to the standard CYK+ parsing areas follows.
To handle integers, we modify the ini-tialization to generate new rules on the fly for anynumeric terminals that fit the range of an [INT:X-Y]non-terminal in the grammar (starts at line 5).
Toallow mixing of terminals and non-terminals, we ex-tend the initialization step to also produce partialparses (line 17), and extend the parse advancementstep to allow advancing rules with terminals (startingat line 23).
Finally, to handle [NIL] rules, which con-sume tokens but are not included in the final parse,we add a step where rules are allowed to advance,unchanged, past a [NIL] rule (starting at line 35).5 Parsing exampleAs an example, consider parsing the week of March6 with the following source side grammar:[NIL] ?
the[UNIT] ?
week[MONTH] ?
March[DAY] ?
[INT:1-31][FIELD] ?
[MONTH][DAY][TIMESPAN] ?
[FIELD][TIMESPAN] ?
[UNIT] of [TIMESPAN]First the algorithm handles the numeric special case,completing an [INT] parse for the token 6 at index 4:C(1,4) ?= [INT:1-31] ?
6Then it completes parses based on just the terminals:C(1,0) ?= [NIL] ?
theC(1,1) ?= [UNIT] ?
weekC(1,3) ?= [MONTH] ?
MarchNext, the algorithm starts working on parses thatspan 1 token.
It can start two partial parses, using the[UNIT] at C(1,1), and using the [MONTH] at C(1,3):P(1,1) ?= [TIMESPAN] ?
[UNIT] ?
of [TIMESPAN]P(1,3) ?= [FIELD] ?
[MONTH] ?
[DAY]823Algorithm 1 CYK+ parsing, extended for partiallylexicalized rules, [Nil] rules and numbersRequire: G a set of rules, w a sequence of tokens1: function PARSE(G,w)2: C ?
a new |w|+ 1 by |w| matrix3: P ?
a new |w|+ 1 by |w| matrix4: // Generate rules on the fly for numeric tokens5: for i?
0 .
.
.
(|w| ?
1) do6: if ISNUMBER(wi) then7: for all [INT:x-y] ?
non-terminals of G do8: if x ?
TONUMBER(wi) ?
y then9: C(1,i) ?= [INT:x-y]?
wi10: // Start any rules that begin with terminals11: for i?
0 .
.
.
(|w| ?
1) do12: for all X?
??
?
G do13: if ?j | ?
= wi:j ?
?ISTERMINAL(?0) then14: if ?
=  then15: C(|wi:j |,i) ?= X?
wi:j?16: else17: P(|wi:j |,i) ?= (|wi:j |,X?
wi:j?
)18: for n?
1 .
.
.
|w|; i?
0 .
.
.
(|w| ?
n) do19: // Find all parses of size n starting at i20: form?
1 .
.
.
n do21: for all (p,X?
?)
?
P(m,i) do22: // Advance partial parses using terminals23: if wi+m:i+n = ?p:p+n?m then24: if ?p+n?m:|?| =  then25: C(n,i) ?= X?
?26: else27: P(n,i) ?= (p+ n?m,X?
?
)28: // Advance partial parses using completes29: for all ?p ?
?
?
C(n?m,i+m) do30: if |?| = p+ 1 then31: C(n,i) ?= X?
?32: else33: P(n,i) ?= (p+ 1,X?
?
)34: // Advance complete parses past [Nil] parses35: for all X?
?
?
C(m,i) do36: for all Y?
?
?
C(n?m,i+m) do37: if X 6= Nil ?
Y = Nil then38: C(n,i) ?= X?
?39: else if X = Nil ?
Y 6= Nil then40: C(n,i) ?= Y?
?41: // Start any rules that begin with a complete parse42: for all X?
?
?
C(n,i) do43: for all Y?
X?
?
C(n,i) do44: if ?
=  then45: C(n,i) ?= Y?
X?46: else47: P(n,i) ?= (1,Y?
X?
)48: return C(|w|,0)(The ?
is the visual equivalent of the first element inthe partial parse tuples of Algorithm 1, which marksparsing progress.)
And given the [INT:1-31] atC(1,4)the algorithm can make a complete size 1 parse:C(1,4) ?= [DAY] ?
[INT:1-31]The algorithm then moves on to create parses thatspan 2 tokens.
The special handling of [NIL] allowsthe [UNIT] at C(1,1) to absorb the [NIL] at C(1,0):C(2,0) ?= [UNIT] ?
weekThis [UNIT] then allows the start of a partial parse:P(2,0) ?= [TIMESPAN] ?
[UNIT] ?
of [TIMESPAN]The partial parse at P(1,1) can be advanced using ofat position 2, creating another 2 token partial parse:P(2,1) ?= [TIMESPAN] ?
[UNIT] of ?
[TIMESPAN])The partial parse at P(1,3) can be advanced using the[DAY] at C(1,4), completing the 2 token parse:C(2,3) ?= [FIELD] ?
[MONTH][DAY]This [FIELD] allows completion of a 2 token parse:C(2,3) ?= [TIMESPAN] ?
[FIELD]The algorithm then moves on to 3 token parses.
Onlyone is possible: the partial parse at P(2,0) can beadvanced using the of at position 2, yielding:P(3,0) ?= [TIMESPAN] ?
[UNIT] of ?
[TIMESPAN]The algorithm moves on to 4 token parses, findingthat the partial parse at P(2,1) can be advanced usingthe [TIMESPAN] at C(2,3), completing the parse:C(4,1) ?= [TIMESPAN] ?
[UNIT] of [TIMESPAN]Finally, the algorithm moves on to 5 token parses,where (1) the special handling of [NIL] allows thepartial parse at C(4,1) to consume the [NIL] at C(1,0)and (2) the partial parse at P(3,0) can be advancedusing the [TIMESPAN] at C(2,3).
Both of these yield:C(5,0) ?= [TIMESPAN] ?
[UNIT] of [TIMESPAN]The complete parses in C(5,0) are then determinis-tically translated into target side parses using thealignments in the rules of the synchronous grammar.6 EvaluationUsing our synchronous grammar formalism for timenormalization, we manually developed a grammarfor English time expressions.
Following the lead ofTIMEN and HeidelTime, we developed our grammarby inspecting examples from the AQUAINT4 and4http://www.ldc.upenn.edu/Catalog/catalogEntry.jsp?catalogId=LDC2002T31824N TIMEN HeidelTime SCFGAQUAINT 652 69.5 74.7 76.5TimeBank 1426 67.7 80.9 84.9Timen 214 67.8 49.1 56.5TempEval2013 158 74.1 78.5 81.6Table 2: Performance of TIMEN, HeidelTime and oursynchronous context free grammar (SCFG) on each evalu-ation corpus.
(N is the number of time expressions.
)TimeBank (Pustejovsky et al 2003) corpora.
Theresulting grammar has 354 rules, 192 of which areonly lexical, e.g., [UNIT]?
(seconds, SECONDS).Our grammar produces multiple parses when theinput is ambiguous.
For example, the expressionMonday could mean either the previous Monday orthe following Monday, and the expression the daycould refer either to a period of one day, or to a spe-cific day in time, e.g.
2013-04-14.
For such expres-sions, our grammar produces both parses.
To choosebetween the two, we employ a very simple set ofheuristics: (1) prefer [TIMESPAN] to [PERIOD], (2)prefer an earlier [TIMESPAN] to a later one and (3)prefer a [TIMESPAN] with QUARTERS granularityif the anchor time is also in QUARTERS (this is acommon rule in TimeBank annotations).We evaluate on the AQUAINT corpus, the Time-Bank corpus, the Timen corpus (Llorens et al 2012)and the TempEval 2013 test set (UzZaman et al2013)5.
We compare to two6 state-of-the-art systems:TIMEN and HeidelTime.
Table 2 shows the results.Our synchronous grammar approach outperformedHeidelTime on all corpora, both on the training cor-pora (AQUAINT and TimeBank) and on the test cor-pora (Timen and TempEval 2013).
Both our modeland HeidelTime outperformed TIMEN on all corporaexcept for the Timen corpus.To better understand the issues in the Timen cor-pus, we manually inspected the 33 time expressionsthat TIMEN normalized correctly and our approach5We evaluate normalization accuracy over all time expres-sions, not the F1 of both finding and normalizing expressions, sothe numbers here are not directly comparable to those reportedby the TempEval 2013 evaluation.6Though its performance was slightly lower than HeidelTime,we also intended to compare to the (Angeli et al 2012) system.Its authors graciously helped us get the code running, but to dateall models we were able to train performed substantially worsethan their reported results, so we do not compare to them here.normalized incorrectly.
4 errors were places whereour heuristic was wrong (e.g.
we chose the earlier,not the later Sept. 22).
6 errors were coverage prob-lems of our grammar, e.g.
not handling season, everytime or long ago.
2 errors were actually human an-notation errors (several years ago was annotated asPASTREF and daily was annotated as XXXX-XX-XX, while the guidelines say these should be PXYand P1D respectively).
The remaining 21 errors werefrom two new normalization forms not present at allin the training data: 19 instances of THH:MM:SS(times were always YYYY-MM-DDTHH:MM:SSin the training data) and 2 instances of BCYYYY(years were always YYYY in the training data).7 DiscussionOur synchronous grammar approach to time normal-ization, which handles recursive structures better thanexisting string-to-string approaches and handles awider variety of grammars than existing parsing ap-proaches, outperforms the HeidelTime system onfour evaluation corpora and outperforms the TIMENsystem on three of the four corpora.Our time normalization code and models arefreely available.
The source code and Englishgrammar are hosted at https://github.com/bethard/timenorm, and official releases are pub-lished to Maven Central (group=info.bethard,artifact=timenorm).In future work, we plan to replace the heuristicfor selecting between ambiguous parses with a moreprincipled approach.
It would be a simple extensionto support a probabilistic grammar, as in (Angeli etal., 2012).
But given an expression like Monday, itwould still be impossible to decide whether it refers tothe future or the past, since the surrounding context,e.g.
tense of the governing verb, is needed for such ajudgment.
A more promising approach would be totrain a classifier that selects between the ambiguousparses based on features of the surrounding context.AcknowledgementsThe project described was supported in part by GrantNumber R01LM010090 from the National Library OfMedicine.
The content is solely the responsibility of theauthors and does not necessarily represent the officialviews of the National Library of Medicine or the NationalInstitutes of Health.825References[Angeli et al012] Gabor Angeli, Christopher Manning,and Daniel Jurafsky.
2012.
Parsing time: Learning tointerpret time expressions.
In Proceedings of the 2012Conference of the North American Chapter of the As-sociation for Computational Linguistics: Human Lan-guage Technologies, pages 446?455, Montre?al, Canada,June.
Association for Computational Linguistics.
[Chappelier and Rajman1998] Jean-Ce?dric Chappelierand Martin Rajman.
1998.
A generalized CYKalgorithm for parsing stochastic CFG.
In FirstWorkshop on Tabulation in Parsing and Deduction(TAPD98), pages 133?137.
Citeseer.
[Llorens et al012] Hector Llorens, Leon Derczynski,Robert Gaizauskas, and Estela Saquete.
2012.
TIMEN:An open temporal expression normalisation resource.In Proceedings of the Eight International Conferenceon Language Resources and Evaluation (LREC?12),Istanbul, Turkey, May.
European Language ResourcesAssociation (ELRA).
[Pustejovsky et al003] James Pustejovsky, PatrickHanks, Roser Sauri, Andrew See, Robert Gaizauskas,Andrea Setzer, Dragomir Radev, Beth Sundheim,David Day, Lisa Ferro, and Marcia Lazo.
2003.
TheTIMEBANK corpus.
In Corpus Linguistics, pages647?656, Lancaster, UK.
[Pustejovsky et al010] James Pustejovsky, Kiyong Lee,Harry Bunt, and Laurent Romary.
2010.
ISO-TimeML:An international standard for semantic annotation.
InProceedings of the Seventh International Conferenceon Language Resources and Evaluation (LREC?10),Valletta, Malta, may.
European Language ResourcesAssociation (ELRA).
[Stro?tgen and Gertz2012] Jannik Stro?tgen and MichaelGertz.
2012.
Multilingual and cross-domain temporaltagging.
Language Resources and Evaluation.
[UzZaman et al013] Naushad UzZaman, Hector Llorens,Leon Derczynski, James Allen, Marc Verhagen, andJames Pustejovsky.
2013.
Semeval-2013 task 1:Tempeval-3: Evaluating time expressions, events, andtemporal relations.
In Second Joint Conference onLexical and Computational Semantics (*SEM), Volume2: Proceedings of the Seventh International Workshopon Semantic Evaluation (SemEval 2013), pages 1?9,Atlanta, Georgia, USA, June.
Association for Compu-tational Linguistics.
[Verhagen et al010] Marc Verhagen, Roser Sauri, Tom-maso Caselli, and James Pustejovsky.
2010.
SemEval-2010 task 13: TempEval-2.
In Proceedings of the 5thInternational Workshop on Semantic Evaluation, page5762, Uppsala, Sweden, July.
Association for Compu-tational Linguistics.826
