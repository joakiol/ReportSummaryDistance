Communication in large distributed AI Systems for NaturalLanguage ProcessingJan W. Amtrup*Univers i ty  o:f \ [ Im:nburg,  Com p. Sci.
l )ept .Vogt -KS l ln -S t r .
3011)-22527 I \ [amburgamtru l )~.
in  for:mati lc uhi- han lburg .deJSrg Benra*DFKI  GmbH\ ]~rwm-Schrodinger -St ; r .
(Bau  57)\ ]) -67663 Ka isers lautc rnt)enrag~d fk i .un i -k l .deAbstractWe.
are going to describe the designand implementatior, of a connnuniea-lion system l.or large AI projects, ca-pable of supporting various softwarecomponents in a heterogeneous hard-ware and programming-language envi-ronment.
The system is based on a rood-ification of the channel approach intro-duced by Hoare (1978).
It is a three-layered approach with a de facto stan-dard network layer (PVM), core rou-tines, and interfaces to live different pro-gramming languages together with SUl)-port l.or the transparent exchange ofcomplex data types.
A special compo-nent takes over: name service functiorrs.It also records the actual configurationof the modules present in the applicationand the created channels.We describe the integration of this com-munication facility in two versions ofa speech-to-speech translation system,which ditfer with regard to quality andquantity of data.
distributed within tireapplications and with regard to the de-gree of interactivity involved in process-ing.1 I n t roduct ion(hu:rently, there is a trend of lmilding large AI-systems in a distrilulted, agent-oriented manner.
'l'he complex tasks performed e.g.
by systems withnmltimodal user interfaces or by systems tacklingthe processing of spontaneous speech often requiremore than one computer in order to run accept-ably last.
If pure speed is not the primary moti-vation, the incorporation of several modules, each*'l'his rescm'ch was funded by the Federal Min-istry of l~;dncat;ion, Science., ll.esem'ch and Technol-ogy (IIMBF) in the framework of the VI,;HIIMOBILProject raider Granl, s 01 IV 10l A/O and 01 IV 101G.of them possibly being realized in a different pro-gramming language or even a different program-ruing lmradignl, demands complex interfaces be-tween these modules, l,'urthermore, only modular-ization makes it possible to develop applicationsin a truly distributed inanner without the need toeol)y and install versions repeatedly over.~l'he actual realization of tire interfaces houldground on a sound theoretical framework, and it;shoukl be as independent as possible from themodule implementations.
TypicMly, when an in-terface between two subcomponents of a systemis needed, at \[irst very simple means e.g.
fileinterfaces or simple pipes are  considered.
Thisdoes uot only lead to a variety of different proto-cols between components which is natural toa certain degree, due to the different tasks per-formed by the components and the purpose of theinternee data but; also to a number of ditf~rentimplementation strategies :\['or interfaces.In this pal)er , we present ICE, the IntarcCommunication Environment (Amtrup, 1995),an implementation of a channel-oriented, multi-architecture, multi-language communication mod-ule for large, A l-systems, which is particularly use-ful for systems integrating speech and languageprocessing.A channel-oriented model \['or interaction re-lations between software modules seemed to bethe most suitable system for our needs.
Weadopted the CSP-approach (Horn:e, 11978) andits actual realization in the transputer hardware((~rahatn and King, 1990).
This core flmctionalmodel was slightly modified to satisfy the needsemerging from ext)eriences with actual systems.We decided not to implement all communica-tion flmctions from scratch, \[)tit instead we usePVM, the Parallel Virtual Machine (Geist et al,1994), a widespread process-comnmnication s ft-ware, which turned out to be extremely reliable.We will desribe how the communication sys-tem has been integrated within Verbmobil, a largeresearch project tbr automatic speech-to-speechtranslation (Wahlster, 1993).
ICE is used for thew~rious I)rototypes of the interpretation system.35We describe experiences and results of the workon the first demonstrator.
Furthermore, we showthat ICE is flexible enough to be used in archi-tectural experiments and we are going to reportsome of the experiences made with them.2 Appl ication acrchitectureVerbmobil, the primary application for which ICEwas built, aims at developing an automatic inter-preting device tbr a special type of negotiation be-tween business people.
The dialogue situation isas follows: Two business persons, speaking difl'er-eat languages, are involved in a face-to-face dia-logue trying to schedule an appointment.
'l.
'heyboth have at least; some knowledge of English anduse English as a common hmguage.
In case oneof the dialogue partners runs into problems, he orshe activates the interpretation system by pressinga button and switches back to his or her mother-tongue.
The system interprets the respective ut-terances into English.
Therefore, it interprets thedialogue on demand in certain situations.The Verbmobil system consists of a large num-ber of components, each of them designed to copewith specific aspects of the interpretation pro-cess.
Among them are a recorder for speech sig-nMs, a HMM-based word recognizer, modules forprosodic, syntactic and semantic analysis, dia-logue processing, semantic evaluation as well ascomponents for both german and english synthe-sis.
There are several interfaces between the in-dividual parts of the application which are usedto forward results or to realize question-answeringbehavior.The interchanged data between components (acomponent normMly corresponds to a unique soft-ware module) is very heterogeneous with regardto both type and quantity: Speech information asit is sent from the recorder to the speech recog-nizer consists of a stream of short integer valueswhich may amount o several megabytes.
The ob-jects exchanged between semantics constructionand transfer are relatively small, but highly struc-tured: Semantic representations with several em-bedded layers.3 ICE: Design and s t ruct rueAs briefly noted above, we are using a chan-nel abstraction to model communication betweencomponents.
The model is largely oriented atthe approach of CSP (Communicating SequentialProcesses, iIoare (1978)), mainly for two reasons:?
We decided to use a message-passing ap-proach to communication.
The two otherkinds of process communication largely avail-able, namely shared memory and remoteprocedure calls are disadvantegous for ourpurposes: The employment of shared mem-ory may lead to memory or bus contentionwhen several processors are sinmltaneouslyattached to the same physical memory seg-ment.
l?urthermore, multiple concurrentwrite attempts have to be synchronized.
Re-mote procedure cMls did not seem to be theright choice either since their use impliesa rendez-vous-synchronization which slowsdown a system due to network latencies 1.?
Making the objects involved in communica-tion explicit, offers several ways to manipu-late them.
Without too much effort, we wereable to introduce split channels in order to in-corporate visualization tools or introdnce dif-ferent modes of communication depending onthe type of data to be exchanged.The low level basis of ICE is realized by PVM(Geist et al, 1994), which is a message passingsystem for multiple hardware architectures.
Ithas been developed and extended for almost sevenyears now and is very reliable.
It allows a net ofUnix workstations to behave like a single largeparallel computer.
PVM supplies each messagewith a tag which simplified the introduction ofchannels to a large extent (roughly, a message istagged uniquely to identify the channel it is senton.
This enables a receiving component to selectmessages Oll individual channels).3.1 Sys tem s t ruc tureThe architecture of a system using ICE as commu-nication framework is depicted in Pig.
1.
Beforedescribing in detail the structure of a component,we will point out the overall layout of an applica-tion.We assume that an application consists of anumber of components.
We could have adoptedthe notion of agents cooperating to a certain de-gree while carrying out a certain task coopera-tively, but this would have meant to mix up dif-ferent conceptual levels of a system: The com-munication facilities we are describing here estab-lish the means by which pieces of sottware maycommunicate with each other.
They do not pre-scribe the engineering approaches used to imple-ment the individual software components them-selves.
We do not state that agent architectures1 rph e channels of CSP and Occam both use rendez-vous-synchronization.
In this respect we deviatedfi'om the original model.36Figure \]: Principle component layout(e.g.
Col-,en et al (:t9!
)4)) can not be realized withour :mechanis:nl 2, but the range of cases where ICI,',can 1)e applied is broader than this.All communication is clone by the trieatls ofchannels, as set out above.
We (listinguish twotypes of channels:?
Base channels ~re the primary \['acilities ofcommunication.
They are configured in away guaranteeing that each comlxment isable to interm:t with each other componentit wishes to, regardless of programming hm-guages, hardware architectures, or systemsoftware being used.
This is achiewxl 1)yusing the standard communication mode ofPVM, which supports XI)I{ a.
Message pass-ing is done asynchronously.?
Addit ional  channels were added in order tosatis\[~y some needs that frequently arise dur-ing the design ~md implementation of b~rgeA l-systems with heavy use of communication.They can 1)e used to separate data st,'cantsDora control messages or may 1)c configuredit, various ways, e.g.
by switching off {;he X1)t{encoding to speed up message passing.3.2  Spl i t  ( 'hannelsBoth types of channels can be configured in an ~d-ditional way.
Beyond being bidirectionM commu-nication devices between two components, other2In(Iced, distributed 1)lackboards as used in(Johen et al (\]994) can easily be modelled using a(:hanncl-bascd al)proach.aeXternal1)ata Representation, see Corbin (1990), an encodingschema for data objects independent of the currentprogramming environment.modules can be attached to listen to data trans-ported on a channel or to inject messages.
Thesesplit channels are achieved by dividing ~L channelinto two endpoints, one at each side of the chan-nel.Iloth ends are described using a conlignr~tionlile that is read by the ILS (see below) uponstartup.
In l;his fi le, \[br each endpoint a list ofreal chaimels is defined, e~mh of which points to acompolmnt and is equipped with a name, (:onfigu-ration flags and its purpose (whieh can be sendingor receiving).
Any uumber of' real channels maybe marked sendiug or receiving.
The behavior ofl;he components allotted by split chammls does nothave to be changed, since splitting occurs trans-I)arently for them.Consider Fig.
2 as an exa.mi)\[e for what purposesplit channels were used.Compo l~-~ CompoA - B\[u, jFigure 2: Split channel contigurationTwo components, A and B, are connected us-ing a channel which is depicted by a dashed line.The channel endpoints are split up to allow visual-ization of message data sent by either component.The visualization is performed by two additionalcomponents la.belled UI_A and UI_B.
lqn:ther-more, the data sent by component A must un-dergo some moditication while being transportedto cOlnl)onellt l~.
Thus, another component C iscontigurcd capable of transforming the data.
Itis spliced into the (h~ta path between A and B.Note that data sent by component B arrives at Aunaffeeted from modification by component C.a.a ILS: I l f fo r lnat ion  Serv iceChannels can  be established by any component.There is no need for synchronization betweenconlponents during the configuration of the con>munication system.
To support this schema, adedicated component named ILS ( Intarc License,%rver) was introduced, lilt stores informationabout the actuM structure of the applieation sys-tem.
This information includes names and loca-tions of all components participating in the sys-37tern as well as an overview about all channels cur-rently established between components.
The ac-tions performed by the ILS include:?
Attachment and Detachment of components.A component desiring to take part in thecommunication activities of the applicationhas to identify and register itself at the ILS.This is done by sending a message containingthe name of the component to the ILS.
Analo-gously, a component should detach itself fromthe ILS by sending an appropriate messagebefore leaving the application.
In case of aprogram failure resulting in the inability ofa component to detach the 1LS is capable ofhandling the detachment autonomously.?
Configuration of channels.
Each creation anddestruction of a channel is done by interact-ing with the ILS in order to notify the ILSof the request and to get back informationabout the necessary data structures.
Thecreation of a channel is done in two phases:First, any of the endpoint components sends achannel creation request o the ILS.
The ILSupdates its internal configuration map takingcare that split channel definitions are takeninto account; it then answers to the request-ing component he individual tag used forthis channel and the process identity of thetarget component 4.
If the target componenthas not, yet registered within the application,this fact is acknowledged to the source com-ponent.
The only point at which this mattersis the time of the first message sending at-tempt which will be blocked until the targetcomponent registers at the ILS.
In that case,the ILS notifies the source component of theevent and communication c~n take place nor-really.The second phase handles the notification ofthe target component.
As just described, thiscomponent need not be present by the timeof the channel creation request.
In this casethe notification is simply delayed.
The no-tification consists of the necessary data tocreate the intended channel within the com-ponent.
The implementor need not trackthose configuration messages, the communi-cation layer handles this transparently.
Fur-4pVM addresses components  which are identi-cal to processes for it - by a task id that  is assignedby the pwn daemon.
The  ILS maintains a mappingfl'om compolmnt names to those task ids.
This map-ping need not be bijective, since we allow multiplecomponen6s within one process (see below).thermore, concurring channel requests do notinteffer.3.4 Component  s t ruc tureThe interior structure of a component (see Fig.
1)is layered as far as the communication parts of thesoftware are concerned.
The low level communi-cation routines are provided by PVM (see above).Next, a software layer defines the functions of ICE.This is comprised of the basic functionality of ICEitself and a set of interface functions for differentprogramming languages.
We currently support C,C++,  Lisp (Allegro Common Lisp, Lucid Com-mon Lisp and CMSP), Prolog (Quintus Prologand Sicstus Prolog) and Tcl /Tk.These software layers suffice to communicatebasic data types like nmnbers and strings.
Addi-tionally, a separate layer (IDL) is present o allowthe exchange of more compex data types.
Onemay specify routines to encode and decode user-defined data types which can then be transmittedjust as the predefined scalar types.
At the lno-ment, this schema is used for a few dedicated atastructures, e.g.
for speech data or arbitrary prologterms, which may be even cyclic.4 Experiences with the applicationVerbmobil is built up by two sorts of components.The "(:ore" components are used to transform theinput data into the output data (e.g.
recording,speech recognizer etc.).
These Nl,P-<'omponentsare embedded in the so called "testbed" thatserves as an application Damework.
The testbedis designed as an experimental enviromnent thatprovides all the features required to test the corecomponents and to study the operation of thewhole application.
'\]?he testbed consists mainlyof the following parts:?
The graphical user interface (GUI) provides acomlbrtable Dontcnd to the application.
Us-ing the GUI the user can watch the operationof the whole system, control the behavior ofthe components and monitor the datafiow be-tween the components.?
The testbed manager (TBM) is used to startup the whole application and to distribute theprocesses of the application to the hosts ofthe network.
Further, the testbed managercollects data about the operation of the com-ponents and visnalizes this intbrmation usingthe GUI.?
The visualisation manager (VIM) collects allthe data transferred between any of the com-ponents using IC'E channels.33If one wants to study only some parts of thesystem, it is t)ossib\]e to start the al)l)li(;ation con-taining only a subset of the existing components(e.g.
only the speech recording module aim somespeech recognizers).
The testbed provides the fa.-cility to choose in an oflline process the compo-nents that are desired to I)e executed.
This config-uration is done by simply editing a coMigurationfile and selecting the keywords "yes" or "no" foreach cornl)onent.
All the comf)onents not selectedare automatically replaced by "stut)-modules," sothere is no need to change source code and re-compile the components, ew:n if data is sent 1,o anou-existent component.
On the other side it; ispossible to configure the usage of alternative com-ponents (e.g.
two gerlnan speech recognizers).
Inthis case l)oth eoml)onents are started and we areat)It to select fl'om the GUI which of both (:onq)o-I lents we a(:t l lal ly wal lt  to \]lSe.
(ht r rent \ ]y  there are 32 existing eon~l)otmnts hatcontribute to roughly 650 Mill disk space (the ex-ecutables, libraries and data liles required at rlln-time use up 380 MB).
Some of the components ~u:estructured using sul)eomi)onents hat are iml)lemented in different programnfing languages andare executed in own l)rocesses.
The ',{2 main con>ponents are  implemented using the following l)rot ramming languages: C (10 components), l isl)(r (:o.u)ouents), l'r(,log (S ,'onU,onents), ( :++,:on u)onents), t,'ortra,, ?
:o, ,pouents), 'r,:F'rk (J(:o111 l)Onellt).Starting a heavy weight system containing allthe currently existing eoml)onents, we get alout95 UNIX l)roeesses requiring 520 M\]l memory.
Inthis configuration we are using 52 I)ase channelsand 24 additional channels (76 ICI'; channels intotal).
Six of these 24 additional (:hannels are con-figured not to use the XI)R coding, 1)eeause theyare used to transfer high volume data (e.g.
audk)data).Because the communication is built u 1) I)yst r ic t ly  us ing the featm:es of ICE and the under-h~ying PVM, the apl)licatiott cnn run on ~ singlehost ;~s well as distributed to the hosts of a.a localarea network.
The decision which cOlnl)onent willrtm on which host of the network is conligurable.Each coml)onent can I)e assigned to a sl)ecilie host,or wc can leave the assignment of an adequate hostto PVM.5 Exper iences  with anarchitectural  exper imentla addition to the employment wil;hin the Verl)mo-I)il l)rototype, we used l(Jl,', as con,,,mm(:ation &'-vice ('or some eXl)erjt~mnts i l, the \['ra.ntewor\]?
o1" theI ~emantlc Evaluation)?/=o,.
: tBeam Decoder ~l,'igttr('.
3: 'l'he experimental system architectm:e.archit?
'ctm'M branch of the project.
The apl)roac\]lhere is to develop a. speech translation systemobeying design principles that have their orighl inthe goal of constructing a system retlecting someof the assumed properties of human speech pro-eessing, namely working incrementally fi'om leftto right and exploring the ell'ects of il~teraetionbetween dilDrent levels of speech recognition andunderstanding.
These two principles have seriousimplications for the design of individual tempouents and the (:on-,ph;te system.
To give a con-crete exmnple, consider the interface between aspeech recognizer and a synt~mtic parser.
The re<:-ognizer In'educes a eon l lec ted  graph where eachedge denotes a word hypothesis.
Due to the in-ability to remove paths in adwmee that can not bepursued fln:ther at a late\]: stage of operation, theinput to the syntactic parser grows enormously.We noticed that wordgri~phs produced inerenmntMly laity \])e tell tiIlles larger than conw'.ntionallyconstructed gr~q)hs (resulting in over 2000 wordhypol, heses for an utterance of 4.7 seconds).The exlmrinmntM system architecture is shownin Fig.
3.
It, consists off several modules inter-connected by ,t lnain da.tlt path that delivers re-suits according to the "standard" linguistic hie>archy, viz.
from word recognition to syntax, se-uumtics and fitmtly transfer !;.
Besides t, his inainstream data path we set t\] l) several interactionfacilities that ~u'e used to propagate int'ornmtiour>J'ltc (;r;ttlsf(w (:ompontm{, i,';t not, shown in \]"it,+ 3.39backwards, which may consist of binary judge-meats about the applicability of a hypothesis, aranking among different possible analyses or evenpredictions about what might be expected in thefuture.These methods were for example examined atthe crucial interface between a HMM-based speechrecognition device and a syntactic parser (ttauen-stein and Weber, 1994).
A tight interaction be-tween these two components was created whichwas used to model a synchronization point at ev-ery frame in the speech input (i.e.
every 10 ms).At each of these points a set of word hypothesesis sent to the parser.
The parser then tries to in-tegrate the new hypotheses into existing partialanalyses constructed so far.
The feedback loopto the speech recognizer consists of informationabout the syntactic ranking of the parse each wordis integrated into.
If a word can not be used inany way, it is simply rejected.
In the case of in-tegration of a word into a parse a ranking is pro-duced which incorporates values from a statisticaln-gram language model and a stochastic unifica-|;ion grammar which models the probability of asyntactic derivation.To realize a prediction mode in this interaction,a different schema was used: At each frame theparser computes a set of possible continuationsfor each word, i.e.
it restricts the language modelto pairs of words (in case of a bigram model)which are syntacticallly plausible and could be in-tegrated into a currently existing syntactic deriva-tion.
By doing so, the search space of the speechrecognizer is restricted.6 Conc lus ionWe have presented the concepts and implementa-tion of a communication system designed for usein large AI systems which nowadays are typicallybuilt to operate in a distributed manner within lo-cal networks of workstations.
We argued that theadaptation of sound theoretical concepts whichfor example can be found in Hoare (1978) leadto solutions that have considerably more powerthat ad-hoc communication devices implementedas the need to communicate arises.
'rim channelmodel was slightly modified and realized on top ofl?VM, a de facto standard for communication idistributed systems.
The system structure reflectsa set of components that communicate bilaterallywithout the involvement of a central mechanismor data structure that participates in every com-rnunication event.
Instead, once the identity ofthe communication partners is established, corn-munication between them is strictly local.We introduced a central name server in order tostore the components acting in an application andto be able to service requests for the creation ofchannels and such.
Channels come in two flavorswhat on the one hand guarantees succesful com-rnunication between any two partners and on theother hand leaves room for tailoring properties ofmessage channels to certain preferences.
Further-more, split channels allow for the easy configura-tion of a system with respect to interchangeableparts of the system and attached visualization.We showed that the communication systemrealized using this methods is advantegeous inseveral situations and system contexts, rangingfi'om strictly sequential systems over intermediaryforms to highly interactive systems.ReferencesJan W. Amtrup.
1995.
1CI~-Intarc Communica-tion Environment: User's Guide and ReferenceManual.
Version 1.4.
Verbmobil Technical )oc-ument 14, Univ.
of Hamburg, December.P.R.
Cohen, A. Cheyer, M. Wang, and S.C. Baeg.1994.
An open agent architecture.
In Proc.
ofAAA1-g4, pages 1 8, Stanford, CA.John tl.. Corbin.
1990.
The Art of DistributedApplications.
Sun Technical Reference l,ibrary.Springer-Verlag, New York.AI Geist, Adarn Beguelin, Jack Dongarra, We-icheng Jiang, Robert Manchek, and Vaidy Sun-detain.
1994.
PVM3 User's Guide and Reference Manual.
Technical Report ORNL/TM-12187, Oak Ridge National Laboratory, OakRidge, Te., May.lan Graham and Tim King.
1990.
The TransputerHandbook.
Prentice tlall, New York, London etal.Andreas Hauenstein and Ilans Weber.
1994.
AnInvestigation of Tightly Coupled Speech Lan-guage Interfaces Using an Unification Gram-mar.
111 Proceedinqs of the Workshop on lu~tegration of Natural Language and Speech Pro-ccssing at AAA I '94, pages 42- 50, Seattle, WA.Charles A. Richard Hoar< 1978.
CommunicatingSequential Processes.
Communications of theACM, 21(8):666-677, August.Wolfgang Wahlster.
1993.
Translation of face-to-face-diMogs.
In Proc.
MT Summit IV, pages127--135, Kobe, Japan.40
