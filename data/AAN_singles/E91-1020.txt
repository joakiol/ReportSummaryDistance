STRUCTURE-DRIVEN GENERATIONFROM SEPARATE SEMANTIC  REPRESENTAT IONSStephan BusernannDeutsches Forschungszentrum fiir Kf instl iche Intell igenz (DFKI )  GmbHStuh lsatzenhausweg 3, D-6600 Saarbrficken 11uucp: buseman @dfki.uni-sb.deABSTRACTA new approach to structure-driven generationis I)resented that is based on a separate seman-tics as input structure.
For the first time, a GPSG-based formalism is complemented with a system ofpattern-action rules that relate the parts of a se-mantics to appropriate syntactic rules.
This way afront end generator can be adapted to some ap-plication system (such as a machine translationsystem) more easily than would be possible withmany previous generators based on modern gram-mar formalisms.
1INTRODUCTIONIn the licld of unification-based computationallinguistics, current research on tactical natural an-guage (NL) generation concentrates on the folio-wing problem:i?
Given a semantic representation (which is of-ten called logical form (LF)) and a grammarthat includes a lexicon, what are the surfacestrings corresponding to the semantic repre-sentation?A variety of approaches to solving this problem inan efficient way has been put forward on the ba-sis of unification-based grammar formalisms with acontext-free backbone and complex categories (forsome discussion see e.g.
\[Shieber et al 1990\]).
Mostof this work shares a Montagovian view of seman-tics by assuming that LF be integrated into thegrammar rules, thus assigning to each syntactic a-tegory its semantic representation.Within this integrated-semantics approach thegeneration tmsk mainly consists of reconstructing a1This work was partially funded by the German Mini-ster for Research trod Tedmology (BMFT) mt(ler contractITW 9002.
Most of the research underlying rids article wasaccomplished within the EURO'rH.A-D accompanying re-search project K IT-FAST at the Technical University of Ber-lin and fimded by the BMFT trader contract 1013211.I wish to thank Christa llauenschiid, John Nerbo\[me, andIlans Ilszk~weit h,r com,,lcntin g on earlier ve,.
'~ions of thispaper.given LF, thereby ensuring that the result is com-plete (all parts of the input structure are recon-structed) and coherent (no additional structure isbuilt up).
Thus, the surface strings then come outas a side effect.This paper describes a different use of seman-tics for generatio n. llere the semantics i not partof the grammar, but rather expressed within a se-parate semantic representation language (abbrcv.:SRL).
This approach, in which the grammar onlycovers the syntax part, is called the separate se-mantics approach.
It has a long tradition in At NLsystems, but was rarely used for unification-basedsyntax and semantics.
It will be argued that it canstill be useful for interfacing a syntactic generatorto some application system.The main goal of this paper is to describe a ge-nerator using a separate semantics and to suggest astructure-driven strategy that is bascd on a systcmof pattern-action (PA) rules, as they are knownfrom AI production systems (for an overview see\[Davis/King 1977\]).
The purpose of these rulcs isto explicitly relate the semantic (sub)structures topossible syntactic ounterparts.
The rnappizJg pro-cess is driven by the semantic input structure thatis traversed step by step.
At each step PA rules areapplied, which contribute to successively i)roducingan overall syntactic structure from which the ter-minal string can easily be produced.
This new ap-proach allows for a carefully directed and nearlydeterministic choice of grammar ules.KEEP ING SEMANTICS  SEPARATEFROM SYNTAXThe integrated-semantics approach is often illu-strated in a Prolog-like notation using DCG rules.The infix function symbol ' / '  is used in each ca-tegory to separate tile syntactic from the semanticpart.
Rule (1) introduces complements in an llPSG-style manner by "removing" tile complement fromthe VP's subcategorization list (cf.
\[Pollard/Sag1987\]).
The relation between the semantics S andthe semantics of Comp:l. is established in tile lexicalentry for tile verb (2).- 113-(1) vp(Subcat)/S - ->vp(\[CompllSubcat\])/S, Compl.
(2) vp(\[np(_)/0bj,  np(3rd-s ing) /Subj \ ] ) /k iss(Subj ,  0bj) --> \ [k i sses \ ] .Recent work on semantic-head-driven generation\[Shieber et al 1990, Calder et al 1989, Noord 1990,Russell et al 1990\] provides a very promising steptowards efficient, goal-directed reconstruction f LFthat is espescially suited for lexicon-centered gram-mar formalisms such as IIPSG or UCG.
It was ob-served that top-down generation may not termi-nate.
This is illustrated in (1).
If the vp node isused for top-down expansion, there is nothing toprevent he subcategorization list from growing in-finitely.
If the Comp node is used, the constituentto be generated must completely be guessed ue tothe uninstantiated semantics.
Since the grammarwill contain recursive rules (e.g.
for relative clau-ses), the guessing procedure will not terminate it-her.
In view of this problem a bottom-up approachwas suggested that is guided by semantic informa-tion in a top-down fashion.The benefits of integrated semantics are mani-fold.
Elegant analyses of linguistic phenomena arepossible that relate syntactic and semantic pro-perties to each other (cf.
the treatment of e.g.
'raising' and 'equi' constructions in \[Pollard/Sag1987\]).
LF is defined on purely linguistic groundsand as such, it is well-suited to tile contputationailinguist's work.llowever, if a generator based on an integratedsemantics i to be used for conveying the results ofsome application system into NL, expressions oftheapplication system's SRL have to be adalJted to LF.Given that tile grammar should not be rewritten,this amou,,ts to an additional'step of processing.This step may turn out to be costly since the SRLwill typically contain application-dependent infor-mation that must be considered.
Take, for instance,a transfer-based machine translation (MT) system(such as EUROTRA \[Arnold/des Tombe 1986\]).The results of the transfer (say, from German toEnglish) are encoded in a semantic representationthat is given to the system's generation componentto produce the English target sentence.
In a systemcapable of translating between a variety of langua-ges, representations of this kind may themselves besubject o transfer and will therefore contain infor-mation relevant for translation.
2SAn exception is tim MiMe2 system \[Noord et al 1990\].The price to pay for allowing transfer at the level of LF wasto accept an "extremely poor" view of translation by justpreserving the logical meaning emd--as far as possible--theway in which meaning is built compositionMiy (quotationfrom \[Noord et al 1990\]).The effort of introducing an additional step ofprocessing can be saved to a large extent by ad-opting a separate-semantics approach.
The SRL ofsome application system may directly serve as aninterface to the generator.
3 In the case at hand, twoadditional components must be introduced into thegeneration scenario: the definition of SRL and PArules.
Instead of mapping SRL onto LF, SRL is di-rectly related to syntax by virtue of the PA rules.A STRUCTURE-DRIVEN GENERATORThe generator to be described in this sectionis a module of the Berlin MT system \[llauen-schild/Busemann 1988\], which translates sentencestaken from administrative t xts in an EC corpusfrom German into English and vicc versa.
4 Thesyntax formalism Used is a constructive version ofGPSG \[Gazdar et al 1985\] as described in \[Buse-mann/Hauenschild 1988\].
The semantic representa-tion language FAS (Functor-Argument Stuctures)\[Mahr/Umbach 1990\] is employed as an interfacebetween three different processes: it is the target ofGPSG-based analysis, for sentence-semantic trans-fer, and as the source for GPSG-based generation.FAS is defined by context-free rule schemata withcomplex categories consisting of a main category(e.g.
'clause' in Figure la), which is associated witha fixed list of feature specifications.
5 The categoriesare in canonical order with the functor preceding allof its arguments.
In contrast to syntactic structureswhere agreement relations are established by virtueof feature propagation, FAS categories contain al-nmst no redundant information.
For instance, num-ber information isonly located at the 'det' category.The use of semantic relations (encoded by the 'role'feature), role configurations ('conf') and semanticfeatures allows us to discriminate between differentreadings of words that result in different ransla-tional equivalents.
Moreover, part of the thematicstructure of the source language sentence is preser-ved during transfer and encoded by virtue of thefeature 'them' with the numerical values indicatingwhich portion should preferrably be presented first,second, third etc.
The definitions of FAS for theGerman and English fragments mainly differ withregard to their terminal symbols.3This interface does not  correspond to the common sepa-ration between making decisions about what to say and howto say it (cf.
\[McKeown/Swartout 1988\]).
Rather the inter-face in question must be situated somewhere in the 'how tosay it' component because it presupposes many decisions ab-out sentence formulation (e.g.
regarding pronominalization,or voice).4The underlying view of MT is described in \[Hauenschild1988\].Sln the present versions there are up to seven features in aFAS category.
For sake of simplicity many details irrelevantto the present discussion are omitted in the examples.- 114-(a) FAS expression:fas / \illoc clauselin / \fin clauseassertion I porf : +pres_ind J / ~ '~ '~,~.~v__pred termvoice: active role: agentconf: ag_af them : 3them : 2 ~ , ~I det nom/ \verab- num: sing Ischieden Inwedsere: instde\[_sing Jrattermrole: affectedthem : 1 /-...det nomnum: plur In_predsem: plandies Ivorschlag(b) GPSG structure:S\[fin, -plulNP \[+top, acc, +plu\] S \[fin, -plu\] / NP \[+top, acc.
+plu\] / \Det N1 V \[fro, -plu\] S \[psp, -plu\] / NP \[+top, acc.
+plu\]dies N hab NP \[nom.
-plul V \[trans, psplI / \  Ivorschlag Dot N1 verabschiedI Id- NI falIdiese vorschl~tge hat der Rat verabschiedet\]these proposals has the Council adopted\]"These proposals have been adopted by the Council.
"Figure 1: Sample FAS Expression (a) and Corresponding GPSG Structure (b).The GPSG formalism used includes the ID/LPformat, feature co-occurrence restrictions (FCRs)and universal principles of feature instantiation(FIPs).
The ID rules are interpreted by the gene-rator as providing the basic information for a localtree.
The categories of each generated local tree arefilrther instantiated by the FIPs and FCRz.
Finally,the branches are ordered by virtue of the LP state-lnen|.s.St ra teg ies  for  s t ruc ture  bu i ld ing  and  featureins tant ia t ion .
The task of constructing an admis-sible GPSG syntactic structure call be divided upinto the following suhta.sks that can be performedindependently of each other, and each according toits own processing strategy:,, Structure building (by virtue of PA rules,which in turn use ID rules).
Feature instantiaton and ordering of the bran-ches (by virtue of FIPs, FCRs and LP state-merits)The question arises which strategies are best sui-ted to ellicient generation.
For each subtask botha top-down and a bottom-up strategy have beeninvestigated.
As a result it turned out that struc-ture building shouhl occur top-down whereas fea-ture instantiation should be performed in a bottom-up manner.Before .justifying the result let us have a closerlook at the sl.ructure-buiiding algorithm.
Tile over-all syntactic structure (OSS) is successively con-strued in a top-down manner.
At each level there isa set of nonterminal leaf nodes available servingas attachment points for further expansion steps(initially tile empty category is the only attachmentpoint).
An expansion step consists of1.
generating a local tree t by virtue of an ID rule,2.
unifying its mother node with one of theattachment points,3.
removing the attachment point from the cur-rent set,4.
defining tile daughters of t as the new currentset of attachment points.Since lexicai entries terminate a branch of the OSS,the fourth of the above points is dropped duringexpansion of lexical categories: processing continueswith the reduced set of attachment points.Feature instafftiation and the ordering of bran-ches take place in a bottom-up manner after a lo-cal tree has no fuither attachment points associatedwith it (i.e.
all of its daughters have been expan-ded).
Then processing returns to tile next higherlevel o f  tile OSS examining the set of attachmentpoints.
Depending on whether or not it is empty,the next step is either feature instantiation or struc-ture building.
Given this interlinking of the twosubtasks, all OSS is admitted by tile grammar if115 -its top-most local tree has passed feature instantia-tion.The effects of feature instantiation with respectto the German example in Figure lb 6 can be betterunderstood with the help of the S-expansion rulesused; of.
(3)-(5).
t Rule (3) causes topicalization,(4) introduces a perfect auxiliary, and (5) requiresa transitive verb whose object is topicalized.(3).
S , X\[+top\],S\[fin\] / X\[+top\](4) s ,v,s\[psp\](5) s / NP\[+top, ace\] , NP\[nom\], V\[trans\]The solution will now be justified.
First of all, notethat the top-most part of an FAS expression is re-lated to tile top-most part of the GPSG structure,and that the leaves of a FAS expression usually cor-respond to GPSG lexicon entries.
As a consequence,the order the FAS expression is traversed etermi-nes the order in which the structure-building sub-task is performed.
Why should then, in the case ofFAS, the traversal occur top-down?The answer is motivated by the distribution of in-formation in FAS expressions.
In order to apply acertain ID rule deterministically, information fromdistant portions of tim FAS expression may be nee-ded.
For instance, the FAS specification (them : 1),which is part of one of the daughters of c lausein Figure la, is interpreted as requiring topicaliza-tion of a syntactic onstituent under the conditionthat a declarative sentence is being generated.
Thislatter information is, however, only available at the\ [ i l l o?
\ [asner t ion \ ]  \] s part of the FAS expression(of.
Figure la).Two possible methods for collecting this infor-nration present themselves.
First, the pattern in-cluding (them : 1) could be required to cover asnmch of the FAS expression as would be needed toinclude i \] .
loc.
In that case, all the information ee-ded is present, and the traversal of the FAS expres-sion could occur bottom-up as well as top-down.?
Unfortunately the required size of the pattern isnot always known in advance because the FAS syn-tax might allow an arbitrary number of recursivelydefined local trees to intervene.The second method--which was eventuallyadopted--requires the patterns to cover not morethan one local FAS tree.
In order to gather infor-mation that is locally missing, an auxiliary storageis needed.
If, for instance, the illocution is mat-ched, information about whether or not a declara-tive sentence is being generated is stored.
Later on,(them : 1) is encountered.
Now, the ID rule for to-6These are not  shown for the const i tuents  of NPs.ZNote the different use of the symbol  ' / ' :  here it denotesthe category-valued feature 's lash' .e Square brackets are used here to indicate tree stn icture .picalization (3) is triggered iff 'declarative' can beretrieved from the storage.If the necessary information is not available yet,one must accept either a delay of a mapping orbacktracking.
With a top-down traversal of FASexpressions, however, such cases are sufficiently re-stricted to ensure efficiency.
Note that a bottom-uptraversal or a mixed strategy could be more efficientif the distribution of information in the SRL weredifferent.The problems observed with top-down genera-tots using an integrated semantics cannot occurin the separate-semantics approach.
Expansion ofgrammar ules can be controlled by the semanticrepresentation if each rule application is explicitlytriggered.
Situations causing an infinite expansiondue to an uninstantiated semantics (as with top-down expansion using the rule (2)) cannot arise atall since the separate semantics is fully specified.Let us now discuss why feature instantiationshould be a bottom-up process.
The FIPs applyto tim mother and/or a subset of daughters in alocal tree.
In general, tile more these categoriesare instantiated the less likely the l"lPs will haveto choose between alternative instantiations, whichwould be a source for backtracking.
A top-downstrategy would meet a more completely instan-tiated mother, but still underspecified aughters.With a bottom-up strategy, howew:r, only tile mo-ther would be underspecified.
For instance, consi-der the GPSG account of parasitic gaps, which arehandled by the Foot Feature Principle.
The 'slash'feature may occur at more than one daughter andthen require all occurrences of it to unify with themother (el.
\[Gazdar et al 1985, p. 16211\]).
Whilethis is easy to handle for a bottom-up process, atop-down strategy would have to guess at whichdaughters to instantiate a slash value.Pat tern -act ion  rules.
A PA rule is a pro-duction rule with a pattern for local FAS treesas its left-hand side and two sets of actions asits right-hand side.
The information-gathering ac-lions (IGAs) maintain the auxiliary storage.
Thestructure-building actions (SBAs) generate GPSGtrees.
Either one of these sets may be empty.In:order to minimize tim power of PA rules, theinventory of IGAs and SBAs is restricted.
There areonly lthree 1GAs for storing information into andremoving from the auxiliary storage.
The auxiliarystorage is a two-dimensional rray of a fixed size.
Itmay contain atomic values for a set of features pre-determined by the PA rule writer as well as a singleGPSG category.
There are only five SBAs for diffe-rent kinds of mapping, three of which are explainedbelow; cf.
\[Busemann 1990\] for a coml)rehensive dis-cussion.
Any SBA' will remove the stored category116 -FAS pattern: term (them: 1)IGA: \[removestore(sent, decl),set_.gpsg, features(top: +)\]SBA: I IFAS pattern:dot (def:+, num:plur) \ "~IGA: \[set_gpsg_features(plu:+)\]SBA: \[calUd( NP --> Det, N1 )\]Figure 2: Two Pattern-Action Rules for NP-Topicalization.from the storage and unify it with the :mother ofthe local tree it is about to generate.To illustrate this let us return to the topica-lization example.
The responsible PAl rules areshown in Figure 2.
The pattern of the first onenaatches any local FAS tree whose mbther is aterm(them: 1).
The 1GAs work as follows: I fa  spe-cification (sent : (lecl) can be removed from the sto-rage, the GPSG feature specification \[+top\] will beadded to the stored category (by virtue of the IGAset_gpsg_features) .
The SBA set is empty.
Thesecond PA rule matches any local FAS tree whosefirst daughter is a dcfinite determiner with pluralnumber followed by zcro or more daughters.
Notethat both patterns match the same local tree of theFAS expression in Figure la.
There is only one IGA,which adds the number information to the storedGPSG category.
The single SBA, ca l l _ id ,  statesthat a local GPSG tree is generated by virtue of theID rule indicated and added to the OSS.
Since themother of the local tree (NP) now contains the spe-cification \[+top\], it  can only unify with the 'slash'value introduced by the mother of rule (5).
Fron-ting of the NP is achieved in accordance with theFIPs and LP statements.Three kinds of PA rules should be distinguishedaccording to the effects of their SBAS.
Figure 2shows two of tl,em; the first one doesn't createstructure at, all while the second one transducesa (FAS) local tree into a (GPSG) loi:ai tree.
Athird type of rules generates GPSG structure out ofFAS feature specifications.
Figure 1 shows its useto generate the non-local subtree including the per-fect auxiliary fs I'v \[hab'l, s (psp) \ ] \ ]  from thelocal FAS tree dominated by c lauso(per f :+) .Note that this PA rule must be applied be-fore an attempt is started to attach the subtreef s /np(acc)  \[np(nom), v ( t rans) \ ] \ ] .
This lattersubtree is generated by a PA rule whose patternrnatches the same FAS tree as the previous one.We shall return to this problem in the followingsection.Cont ro l l ing  the ntapl>ing procc.'dure..
First ofall note that PA rules can comrnunicate with eachother only indirectly, i.e.
by modifying the contentof the auxiliary storage or by successfully apply-ing an SBA, thereby creating a situation in whichanother ule becomes applicable (or cannot be ap-plied anymore).
PA rules do not contain any controlknowledge.A local FAS tree is completely verbalized iff amaximum number t > 1 of applicable PA rules aresuccessful.
A PA rule is applicable to a local FAStree t iff its pattern unifies with t. An applicablePA rule is successful iff all elements of IGA canbe executed and an SBA-- i f  present--is uccessful.An SBA is successful iff a syntactic subtree can beattached to the OSS as described above.Since the set of PA rules is not commutative, theorder of application is crucial in order to ensure that72 is maximal.
Due to the restricted power of the PArules possible conflicts can be detected and resolveda priori.
A conflict arises if more than one patternmatches a given FAS tree.
All FAS trees matchedby more than one pattern can be identified withhelp of the FAS grammar.
The respective PA rulesare members of the same conflict set.
The elementsof a conflict set can be partially ordered by virtueof precedence rules operating on pairs of PA rules.For instance, the conflict regarding the perfectauxiliary is resolved by making a precedence rulecheck the ID rules that would be invoked by the re-spective SBAs.
If the mother of the second one canbe unified with a daughter of the first one and notvice versa, then the first PA rule must be appliedbefore the second one.
Thus a PA rule with an SBAinvoking ID rule (4) will apply before another onewifll an SBA invoking ID rule (5).Note that, in this example, the number of suc-cessful PA rules would not be maximal if the orderof application was the other way around since theSBA invoking ID rule (4) would not succeed any-more.The control regime described above guaranteestermination, completeness and coherence in the fol-lowing way: The traversal of a FAS expression ter-minates ince there is only a finite number of localtrees to be investigated, and for each of them aI17 -finite number of PA rules is applicable.
The aSSgenerated is complete because all local FAS treesare processed and for each a maximum rmmber ofPA rules is successful.
It is coherent because (1) noPA rule may be applied whose pattern is not mat-ched by the FAS expression and (2) all attachmentpoints nmst be expanded.CONCLUSIONThe adaptation of a GPSG-based generator toan MT system using FAS as its SRL was describedas an instance of the separate-semantics approachto surface generation.
In this instance, the OSS ismost efficiently built top-down whereas feature in-stmltiation is performed bottom-up.The mapping based on PA rules has proved tobe efficient in practice.
There are only a few caseswhere backtracking is required; most often the localFAS tree being verbalized allows together with thecontents of the auxiliary storage and the currentset of attachment points for a deterministic choiceof grammar ules.The generator has been fully implemented andtested with middle-sized fragments of English andGerman.
It is part of the Berlin MT system andruns on both an IBM 4381 under VM/SP in Water-loo Core Prolog and a PC XT /AT  in Arity Prolog.Compared to algorithms based on an integratedsemantics the separate-semantics approach pursuedhere is promising if the generator has to be adaptedto the SRL of some application system.
Adaptationthen consists in modifying the set of PA rules ratherthan in rewriting the grammar.REFERENCES\[Arnold/des Tombe 1986\] Doug Arnold and Louis des"Ibmbe (1986), 'Ba.~ic Theory and Methodology inEurotra', in S. Nirenburg (ed.
), Theoretical and Me-thodological Issues in Machine Translation, Cam-bridge: Cambridge University Press, 114-135.\[Busemann 1990\] Stephan Busemann (1990), Gcne-rierung nat6rlichcr Sprache mit GeneralisiertenPhrascnstruktur-Grammatiken, Doctoral Disserta-tion, Universit~t des Saarlandes, Saarbriicken.
Alsoavailable: TU Berlin, Dept.
of Computer Science,KIT Report 87.\[Busemann/Ilauenschild 1988\]Stephan Busemann and Christa Hauenschild (1988),'A Constructive View of GPSG or Itow to Make itWork', in Proc.
leth COLING-88, Budapest, 77-82.\[Calder et ai.
1989\] Jonathan Calder, Mike Reape, andllenk Zeevat (1989), 'An Algorithm for Generation iUnification Categorial Grammar', in Proc.
4th Conf.of the European Chapter of the ACL, Manchester,233-240.\[Davis/King 1977\] Randall Davis und Jonathan King(1977), 'An Overview of Production Systems', in E.W.
Elcock and D. Michie (eds.
), Machine Intelligence8, Chichester: Ellis Itorwood, 300-332.\[Gazdar ct al.
1985\] Gerald Gazdar, Ewan Klein, Ge-offrey Pullum, and Ivan Sag, (1985), GeneralizedPhrase Structure Grammar, Oxford: Blackwell.\[Hauenschild 1988\] Christa Hauenschild (1988), 'Dis-course Structure--Some Imphcations for MachineTranslation', in D. Maxwell, K. Schubert und A.P.
M. Witkam (eds.
), New Directions in MachineTranslation, Dordrecht: Foris, 145-156.\[tlauenschild/Busemann 1988\] Christa llauen-schild and Stephan Busemann (1988), 'A Construc-tive Version of GPSG for Machine Translation', in E.Steiner, P. Schmidt, and C. Zelinsky-Wibbelt (eds.
),From Syntax to Semantics--Insights From MachineTranslation, London: Frances Pinter, 216-238.\[MMtr/Umbach 1990\] Bernd Mahr and Carla Umbach(1990), 'Functor-Argument Structures for the Mea-ning of Natural Language Sentences and Their For-mal Interpretation', in K.-H. Bl~sius, U. Hedstiick,and C.-R. Rollinger (eds.
), Sorts and Types in Artifi-cial Intelligence, Berlin, New York: Springer (LectureNotes in Artificial Intelligence 418), 286-304.\[McKeown/Swartout 1988\] Kathleen R. McKeown andWilliam R. Swartout, 'Language Generation and Ex-planation', in M. Zock and G. Sabah (eds.
), Advan-ces in Natural Language Generation.
An blterdisci-plinary Perspective.
Vol.
1, London: Frances Pinter,1-52.\[Noord 1990\] Gertjan van Noord (1990), 'An Overviewof Head-Driven Bottom-up Generation', in R. Dale,C.
Mellish, and M. Zock (eds.
), Current Research inNatural Language Generation, Academic, 141-165.\[Noord et al 1990\] Gertjan van Noord, Joke Dorre-paal, Pim van tier Eijk, Maria Florenza, and Louisdes qbmbe (1990), 'The MiMo2 Research System', inProc.
3rd Int.
Conf.
on Theoretical and Methodolo-gical Issues in Machine Translation, Austin, Texas.\[Pollard/Sag 1987\] Carl J. Pollard and Ivan A.
Sag(1987), Information-Based Syntax and Semantics.Volume I, Center for the Study of Language and In-formation, CSLI Lecture Notes 13, Chicago: Univer-sity of Chicago Press.\[Russell et al 1990\] Graham Russell, Susan Warwick,and John Carroll (1990), 'Asymmetry in Parsing andGenerating with Unification Grammars: Case Stu-dies from ELU', in Prac.
Conf.
o/ the ~8th AnnualMeeting of the ACL, Pittsburgh, 205-211.\[Shieber et al 1990\] Stuart M. Shieber, Gertjan vanNoord, Robert C. Moore, and Fernando C. N. Pereira(1990), 'A Semantic-Head-Driven Generation Algo-rithm for Unification-Based Formalisms', in Compu-tational Linguistics, 16(1), 30-42.- 118-
