TRW:DESCRIPTION OF THE DEFT SYSTEM AS USED FOR MUC- 5WILLIAM W. NOAH, Ph.D.ROLLIN V. WEEKSTRW SYSTEMS DEVELOPMENT DIVISIONONE SPACE PARKREDONDO BEACH, CA 9027 8R2/2186BACKGROUN DFor the past three years, TRW has been developing a text analysis tool called DEFT--Data Extraction from Text .
Based on the Fast Data Finder (I'D I .
), l)EF'l' processes larg evolumes of text at very high speeds, identifying patterns which serve as indicator sfor the presence of relevant objects, relationships, or concepts in the data .
Theseindicators are processed by a series of system-supplied utilities or custom-writte nfunctions which refine the data and re-formulate it into frames which can b epresented to a user for review, editing, and submission to a downstream applicationor database .Superficially, DEFT resembles a Natural language Understanding (NLUI) system ;however, there are key differences .
DEFT entertains very limited goals in th eprocessing of natural language input .
Although DEF"1' processes unconstrainedinput, it is looking for textual entities which are tightly constrained and presented t othe system as a list of expressions or in a powerful pattern specification language .
i texploits expectations about how a small set of entities will he expressed to reduce th eamount of computation required to locate those-- and only those-- entities .
Thebroader question of the "meaning" of the text in the document is bypassed in favor o frapid, robust processing that can he readily moved from domain to domain .
As lon gas the input for a particular domain is sufficiently predictable, data extraction with asatisfactory level of recall and precision for many applications can be achieved .
Weare currently installing three DEFT systems for a United States government agency ;initial reviews have been highly favorable .Our involvement in MUC-5 derives from a request by the government to turn DEFT t oa COTS product, with the intent of having a fully-supported version of the system bythe end of the year .
An analysis of the broader commercial and government marke tfor text extraction suggested that the scope of problems that DEI'"I' should he able toaddress needed to be expanded ; however, it was established that replication of the on -going research and development work in the NLU community was an inappropriat erole for our development group .
Rather, we wanted DEFT to he able to integrate wit hsystems already developed or in development for functionality which falls outsidethe narrow boundaries of DEFT's pattern-based capabilities .
At the same time, DEFT' sability to express patterns needed to be extended from it's current, highly effectiv emeans for defining "atomic" patterns to the definition of patterns in relationship t oeach other, permitting simple syntactic information to be added to DEFT's lexica lknowledge.
Thus, DEli' would have the potential to find entities not expressly define d237in a lexicon, improve its ability to correctly determine the relation between entities ,and decrease the overgeneration that tends to be associated with approaches that rel yexclusively on pattern matching .A mechanism was selected for enhancing pattern specification which was felt to b ecompatible with the notion of integrating DEFT with third-party systems .
As will bedescribed in some detail, DEFT is intrinsically an engineering shell which is intende dto facilitate such integration while making its rapid pattern-matching service savailable to the other system components .
Unfortunately, the softwareimplementing this concept was not available at the time of the final MUC- 5evaluation, the results of which therefore serve only to confirm our expectation sthat the recognition of "simple" (i .e.
isolated) patterns is woefully insufficient fo rcomplex data extraction problems .While we regret that the capabilities of the extended version of DEFT could not b edemonstrated for MUC-5, we feel that the outcomes justify our belief that real-worl dmessage understanding problems necessitate an engineering solution that can pit achoice of technologies against the specific problem at hand-- different technologie sbeing optimum for different tasks .
We believe that DEFT's success in handling simpl edata extraction problems can be extended, and that DEFT is well-suited to a role as anintegrator of text analysis capabilities .
It is toward this end that we are focusing ouron-going productization efforts .SYSTEM DESCRIPTIO NIt is convenient to envision DEFT as a pipeline, as shown in Figure 1 .
At the head is astandardized document interface to message handling systems .
At the tail is a processwhich generates frames and distributes these to the appropriate destinations on th ebasis of content .
In between is a series of text analysis "filters" which apply DEFTlexicons (pattern searches) against the text (using the FDF) and call specifi cextraction functions to process the textual fragments located by the lexicons .
Al lprocesses are controlled by means of external configuration files and a "workbench "which contains tools for interacting with DEFT and the data DEFT extracts .
We wil ldescribe each of these major components in turn .The Document Interface: Message Queuing .
It is assumed that DEFT will be embeddedin an existing automated message handling (AMIl) system .
DEFT's interface withthese systems is called Message Queuing (MQ) .
Text is typically disseminated to MQ(e.g.
by a messaging system like TRW's EL,CSS or KOALA that receives governmen tcables, wire service input, etc .)
on the basis of subject matter, source, structure, orother characteristic with salience for how the message's language will he analyzed .MQ can also accommodate documents loaded from other sources, such as native wir eservices, an existing full-text database, CD-ROM, OCR, and so on .
Text is assumed to bein ASCIi or extended ASCII; in the near-future, DEFT will build on work currentlyunderway to allow the FDF to accommodate Unicode for foreign character sets, suc has Japanese .
Structural features, such as document boundaries, sentence boundaries ,paragraphs, tahularization, encoded tags (such as SGMI .
), embedded non-textualmedia, etc .
can he defined for a particular document class using DEFT specificationfiles .MQ utilizes a configuration file to assign a processing thread tailored to the problemdomain to each category of document classified by the dissemination system or bywhatever means (including manual) is used to route documents to DEFT .
Document s238are associated with a processing thread by placing them in a particular 1\IQ "in -basket" (a standard Unix directory) .
Each in-basket is polled periodically, using a se tof criteria (time and number of messages since the last processing thread wa sinitiated) defined in the configuration file .fxlvi ~oo-;v;wsa .
'Meowx ;ti-.
.FormattedportionsKnowledge Base an Messag Management Toolswr,MessagereceiptFigure 1 : DEFT Functional ArchitectureExtracting Data: Text Analysis [liters .
When (\9Q assigns a document to a processingthread, it is subjected to a sequence of procedures which operate on the text to locat epatterns of interest and use these patterns as a guide to extract the data required for aparticular problem domain.
This sequence of processes determines what is extractedand how it is extracted .
The sequence is defined as an ordered list of "extractio nphases" in a configuration file .
This list can be changed at any time to substitute o radd new extraction phases to refine a text processing thread .
New threads can h emodeled on existing ones, facilitating transitions to new problem areas .Each extraction phase is an executable program .
The behavior of a phase i sdependent on the order in which it is called (i .e .
its relationship to the phases tha thave been executed before it) and on parameters which are supplied in th econfiguration file .
In this Way, a generalized extraction phase can be configured fo ra specific analytic objective.
DEFT has a library of extraction phases that perform th emost elementary analytic processes; new phases are be written on a problem-specifi cbasis.
DEFT provides an application programming interface (API) in the form of alibrary of utilities which allows a custom extraction phase to interact with the dat astructure which is common to all extraction phases, and which is used t ocommunicate between phases .
This structure is the DEFT "Tag File.
"The Tag File is a cumulative record of the processing performed by each extractio nphase.
Each phase receives the Tag File from the preceding phase, and passes it t o239the next.
A "tag" represents a textual pattern identified by DEFT in the text or dat acreated by an extraction function .Much of the power of DEFT comes from the ability w apply a mixture of extractio nphases that is optimally suited for a given class of document and extraction problem .For example, one extraction phase might reason about the relative time o foccurrence of events located in the text, basing its analysis on the occurrence o fvarious forms of date/time indicators as well as the presence of such modifiers a s"last week," or "three years ago ."
Another phase might construct corporate name son the basis of the occurrence of a known name or the presence of a designator (e .g .
"Inc ."
or "S .A.")
.
Yet another phase might act upon these names to reason about thei rpotential relationship in a joint venture .Locating Data : DEFT Lexicons.
The patterns that DLI?T uses to locate data of interest inthe text arc contained in DE.FF's lexicons .
Lexicons serve various purposes : toidentify potential frames, to determine the "scope" of a frame in the text (i .e .
theboundaries to be used to find data to fill the frame slots), to find the contents for a slo tin a frame, to determine structural elements (e .g.
sentences, paragraphs, heade rinformation), and to set the attributes of a text object (e .g.
classification level) .Lexicons are of two types : list and pattern .
The list lexicon associates a set ofsynonyms (or spelling variants) with a given object .
It is useful when the complet eset of strings associated with an object can be specified .
The pattern lexicon is use dwhen the textual variations associated with an object cannot be specified .
Forexample, all possible monetary values cannot he conveniently enumerated, but asingle pattern describing monetary values in terms of digits, punctuation, anddenomination strings can he constructed .Associated with lexicon entries are attributes, representing the semantics of th eproblem domain .
An attribute is a characteristic of the object represented in th etext by its synonym list or pattern.
It might he the normalized form of a name o rother data about an object which is useful to map into a frame, such as the countryassociated with a corporate name .
In a list lexicon, these attributes are know nexplicitly when an entry is created ; they are not inferred from the text .
In a patternlexicon, however, the attributes cannot be known in advance because it is not know nwhat exact value will hit against the pattern .
For this reason, attributes must beextracted for a pattern lexicon .
Attribute extraction is handled by a C or C++ progra mreferred to as an "extraction function ."
For example, given the location of acorporate designator, a function might reconstruct the corporate name.The success of a data extraction system that relics on pattern matching and strin gfinding depends on how exhaustively it can search for the variations expected i ninput language .
DEFT has proved successful in its current applications in par tbecause its lexicons can be extremely large, thanks to the capabilities (in terms o fboth functionality and performance) of the FDF .Searching Te.xt for Lexicon Entries: The PM DEFT uses the TRW-developed Fast Dat aFinder to rapidly locate instances of a potentially enormous set of patterns in th einput text.
The power of the FDF originates in two ways : the hardware architectur eand the expressiveness of its Pattern Specification Language (PSI .)
.The current generation FDF-3, nc,a~?
a COTS product manufactured by Paracel, inc .
,uses a massively parallel architecture to stream text past a search pattern at dis kspeeds (currently 3 .5-million characters/second using a standard SCSi disk) .240Searches are compiled into micro code for a proprietary chip set which ca naccommodate up to 3,600 simultaneous character searches or Boolean operations .Lexicons are broken into "pipelines" which fully fill the chip set ; each pipeline i srun against all of the text in the set of documents currently being processed.
MO_batches messages as they come in so as to optimize the use of the 1 .
1) 1 .-- larger messagesets are processed more efficiently than several smaller ones .
The tradeoff betwee nbatching and "real-time" processing can he independently balanced in the W Iconfiguration file for each in-basket and processing thread .Search patterns are specified in PSI,.
Because the l l)f uses a streaming approach ,PSL is not dependent on word boundaries .
Extremely complex patterns can h eexpressed, which can include such features as error tolerance, sliding windows ,multiple wildcard options, nested macros, character masking, ranging, and the usua lBoolean operations.
Features that support "fuzzy matching," like error tolerance, ar eextremely important for handling "noisy" input .Output Generation : Frame Assemhi) and Rowing .
When the filters that comprise aprocessing sequence have executed, the 'fag File is passed to the "Frame Assembly andRegion Routing" (FARR) module .
This program, which constitutes the "tail" of th eDEFT pipeline, assembles the data elements generated during the analysis thread int oframes based on an external definition file .
This file specifies which slots areassociated with which frames, how to transform a data value for display to the use r(e.g.
normalize "England" to "United Kingdom"), how to transform a value for storag ein a downstream database (e.g.
abbreviate "England" as "UK"), how to validate a dat avalue, whether a data type can he multiply-occurring, and so on .One issue that arises during frame assembly is when to associate a data value with a ninstance of the frame class for which it is defined .
In DEFT, this operation i sassociated with "scoping."
Scoping is the process of determining the extent in th etext of a concept associated with a pattern .
For example, if a pattern of word sindicative of a joint venture is found, the scope of the "tie-up" frame might be take nto be the location of the pattern plus or minus two sentences .
The unit of scoping (i nthis case, sentence) need not he a syntactic unit-- it can be any pattern stored in aspecial type of lexicon used exclusively for determining frame scope .
The unit ofscoping and its extent (e .g., "plus or minus n") can he determined independently fo reach frame class .When a pattern that gives rise to a slot value of a type defined for a given frame clas sis found in the text, the slot is automatically mapped by I ARR to any frame whos escope encompasses the location of the pattern .
"thus, if the name of a corporatio nwere to occur within the two sentence range of the tic-up frame in our example, i twould appear in that frame .
Of course, this may not he accurate-- DEFT has atendency to overgenerate slots through bogus associations that arise because of thi sweak scoping mechanism .Another issue that is encountered is overlapping frames .
The "best available "resolution can he specified in the frame definition file .
One alternative is simply t oaccept both frames, since they may be describing separate concepts .
If the frame sare of different classes, FARR supports the attribution of a priority to each class, an donly the frame with the highest priority need be retained .
If the frames are of th esame class, FARR supports a "non-multiply occurring" attribute, which optionall ysuppresses all but one of the frames .
Unfortunately, the action taken is generalize dto all situations-- the specifics of a given case cannot be taken into account .
Thus ,DEFT tends to either overgenerate or lose frames .241When a message's frames have been generated and ambiguities resolved (to th eextent that DEFT can resolve them), the frames (and the message) are routed to adestination directory on the basis of their content .
Routing instructions are define din a rule base using a normalized conjunctive form of field-value pairs .
It should bekept in mind that although DEFT's primary mission is extraction, not dissemination ,the routing capability (since it is based on knowledge representation) provides asensitive mechanism for determining the destination of a message and the structure drepresentation of its contents .Controlling the System: DEI .T' lbois and Specification Management .
in order to makeDEFT portable to different computing environments and problem domains, th edefinition of user-modifiable system characteristics has been exported to a set o fexternal specification files .
These files govern the interface with the surroundin gmessage handling system, the output data model, FDF configuration, and othe r"housekeeping" functions .
Specification files are maintained using any convenien ttext editor .The most important system specifications from the standpoint of the end-user arethe lexicons and the frame routing rules .
To facilitate lexicon development andmaintenance, a lexicon editor is bundled with DEFT that provides a graphic use rinterface (under X/[Motif) for interactively defining lexicons and entering/editin glexicon entries .
Lexicons can also he created/updated from databases or externa lmachine-readable files (e .g .
gazetteers, corporate name lists) using a hatch loa dprotocol .Like the lexicon editor, the routing rule manager provides a GUI for maintainin grouting rules.
It uses a spreadsheet metaphor to minimize the user's exposure to th epotentially complex Boolean logic that the rules can involve.
Menus of valid value sand conditions tests are automatically provided .Another important Dlil?l' tool is frame review .
D1:1'1' was developed under theassumption that a user would always he in the loop ; it was not intended to runautonomously.
'Phis package therefore supports simultaneous display of message sand the frames derived from them, providing highlights that show where slot value swere extracted .
Menus of valid values drawn from the lexicons assist the user i nfilling slots that were omitted by" Dl't Features for selectively deleting superfluou sslots and frames are particularly important, since l)I :F I' (like other pattern-basedapproaches to text analysis) tends to overgenerate data .
A mechanism is alsoprovided to facilitate manually linking frames of different classes into higher-leve llogical aggregations, since Dlil'l' was not originally designed with an automate dlinking capability .
Clearly, these two design assumptions-- human interaction an dmanual frame linking-- had an impact on working with the iM11C-5 data .DEFT as an Engineering ShellPhis description of the DEFT system has emphasized that analysis threads ar ecomposed of independent components \ n 'hich communicate through a common dat astructure using a library of utilities that constitute an API .
It is our contention tha t242DEFT's strengths are:?
A powerful pattern searching capability, which we are extending .?
The ability to integrate COTS, CO'T'S, and custom-written program swithin the DEFT architecture .We believe that there will probably not he a single text analysis or NI .0 system tha tmeets the requirements of all conceivable applications .
There will always be atradeoff between such factors as speed, depth of analysis, breadth of coverage ,portability, robustness, and analysis methodology that will favor one technolog yover another for a particular problem .
The real question is not "What is the bes tsystem?
", but "What is the best system at this moment?
"Our current development work on DEFT is chiefly targeted at its usefulness as a nintegration tool .
DEFT provides a high-speed pattern searching capability which ca nsuccessfully extract data from structured or tightly constrained textual inputs, whil eproviding pre-processing services (e .g.
tagging words with part of speech orsemantic attributes) for third-party software which performs more extensive naturallanguage processing for unconstrained textual inputs .
This approach should h eespecially efficient for applications in which messages are mixed (formatted an dunformatted), text analysis tasks are varied in complexity, and throughput is a majo rconsideration .Inherent Limitations in DEFT's Pattern-Matching Approac hBecause DEFT was not originally intended for problems of the scope of MC-5, it ssimplistic approach posed some major problems.
Among the most fundamental were:Syntactical Patterns.
DEFT has very powerful mechanisms for specifying "atomic "patterns-- a corporate name, a place name, a scat of words that indicate a join tventure, etc .
DEFT was not designed to have the capability of expressin grelationships among the patterns in its lexicons and providing for the assignment o fvalues defined with respect to these patterns to variables .
These are essentia lcapabilities for the implementation of the most rudimentary semantic grammar .
Forexample, DEFT had no way to express: "Look for a corporate name followed by a join tventure formation phrase and take the following corporate name as the partner i nthe joint venture .
"Frame Scoping.
DEFT was designed to interpret the scope of a frame as a function o fproximity to the "hit location" of the pattern that resulted in a frame's instantiation .The boundaries are determined by a pre-defined number of repetitions of a patter ncontained in a scope lexicon .
An upper ceiling determined by a fixed number o fcharacters can also be specified, in case the scoping pattern is not detected a"reasonable" distance from the site of the hit .
All occurrences of slots defined for aframe within these boundaries are automatically included in the frame when it i sassembled by FARR .For highly formatted text (e.g.
messages in Military "Text Format), such a mechanis mis adequate .
For free-text, it is not .
in the MIIC-5 evaluation, DLF'l' failed to repor tvalid objects that it located (notably entities) because they were not within the scop eof a tic-up, as DEFT measured scope .243/Tame Linking .
The original DEFT design assumed that a human operator wouldperform this task.
Automated linking is obviously needed for "unattended" operatio nand is clearly useful even if there is a human-in-the-loop .SolutionsCurrent internal research and development work aimed at resolving each of thes eproblems for the eventual DIET product adheres to the constraint that architectura lextensions must be philosophically compatible with the pattern-based approach ,while avoiding significant overlap with NI.
.0 (which we prefer to view as a nintegratable component in a complex system) .
As noted earlier, key software bein gdeveloped under IR&D was not available for the MtlC-5 final evaluation ; however ,work continues and will be tested on the NIIIC-5 corpus in the near future to validatethe approach .Syntactical Patterns .
This is the specific area that was not developed in time for th eevaluation ; unfortunately, it is also the most critical for dealing with even the simpl easpects of the NIt1C problem.
The approach we selected is intended to be compatibl ewith the integration of more powerful text understanding components in the future ,while extending the range of problems DEFT can solve by itself .
it exploits DEFT' satomic pattern-recognition capabilities while separating the definition of a semanti cgrammar into an independent extraction phase .
This phase could easily be replaced(or supplemented) with an NE,tl system which can optionally take advantage of th eD1 :1'I' lexical pre-processing while performing deep syntactic and semantic analyses .This separation is in part intended to provide an initial test of our belief that th eintegration of Dl]']' with an Nl .tl component creates a symbiotic association wit hbetter performance characteristics than either system by itself .To stay within the (admittedly loosely defined) hounds of pattern matching, ourapproach to exploiting syntax consists of providing DEFT with a simple mechanis mfor expressing "meta-patterns"-- that is, patterns whose components may be th eatomic patterns (and, by reference, their attributes) located by the DEFT lexicons .
Wedecided to use a l~Nl specification to define a semantic grammar based on acombination of' literal strings and DEFT'-identified tokens .The key issue was how to pass the results of DEFT pattern-matching to the parser .
Anintegrated NE,tl component within the 1)1 :1'I' shell could interface directly with th eDEFT Tag File through the All ; the component could also interface with the frame sgenerated by DLI I', providing a preliminary level of analysis on which to build .
Forour prototype, however, we chose to mark terms in the text with SGML-like tags t oindicate their properties .
The grammar directly references these tags, and routine swere provided within the parser for assigning text strings to slots by extracting DEFTlexicon attributes (e .g.
normalized values or semantic characteristics) or collectingwords intervening between two tags (of the same or different class) .
Additiona lprimitives for manipulating the strings prior to slot assignment were also built intothe parser infrastructure to control frame generation and the assignment of slot s(including pointers to other frames) to frames .
This significantly improves on th eprimitive scoping capability provided with the current version of DEFT .The approach selected thus provides a vocabulary for expressing both the expectedcontents of documents and the rules for instantiating and linking templates .
At th e244same time, its intermediate product is human-readable (and, in fact, could he used as ageneral-purpose "tagger") and easily interpreted by other programs .Frame Scoping .
Fundamental changes in the I)I :I'I' frame-scoping mechanism areplanned which will exploit domain knowledge as well as limited syntactic (from th emeta-patterns) and semantic (from lexicon attributes) data .
For MUC-5, the basi cDEFT mechanism was retained, with its inherent limitations .Frame Linking.
A primitive frame linking capability was added to DE R'.
It was basedon frame scoping, however, and therefore suffered from the same limitations.
TheDEFT frame definition file format was extended to accommodate hierarchica lrelationships ; any frame defined as a child of another frame had its generated fram eID automatically included as a slot value in the parent frame if its "hit location" fel lwithin the scope of the parent frame .
Of course, multiple and spurious association sare easily generated in this way .
In the future, frame linking will be improved bycombining syntactic and domain knowledge in a final extraction phase to resolv einter-object relations .RESULTSThe results of the final MUC evaluation were strongly influenced by th eunavailability of the parser, which was an essential component of the DEFT approac hto MUC-5.
The resulting scores indicate the magnitude of the problems inherent in asimple pattern-matching strategy which is not informed with even a crude semanti cgrammar.
It should be noted that a decision Was made to focus only on a subset o ftemplates and slots required for the preliminary run .
These were the documen ttemplate, tie-up-relationship, and entity .
The F-measures for the final evaluatio nwere:P&R2P&RP&2 R1 .152 .640 .74Not surprisingly, these were the lowest scores for any system in the evaluation .
Adetailed analysis of the run is of little utility, however there are some points o finterest seen in the walk-through sample document .Walkthrough Documen tThe identifying data (document number, source, and date) were correctly extracted .Some simple atomic patterns were defined in a l)I :I "I' lexicon for tie-up relations .These were to be factored into a semantic grammar; as noted, the parser was notavailable at the time of the run .
"Therefore, the patterns were run as a simple search .It correctly identified the presence of a joint venture in the sample document ,incorrectly instantiating two tie-up templates (one for each of two out of thre ereferences to the venture) and entering their ll)s in the content slot of thedocument template .
DEFT currently does not determine that multiple references hav ea common object unless the frames overlap .A single entity was mis-identified, "Jiji Press Ltd .," which is actually the documen tsource.
This entity was incorrectly associated with the first tie-up .
The foregoin gexplanation of the DEFT scoping mechanism makes it clear why this false associatio n245took place.
The name of the "BRiDGIS'TONE SPORTS CO ."
was correctly reconstructedfrom the corporate designator ("CO .")
and assigned to the first tie-up .
The name of thejoint venture, "BRIDGESTONE SPORTS TAIWAN CO .," was also constructed and associate dwith the second tie-up instance.
No other features were correctly identified .Among the other corporate names, the algorithm used by DEFT would not hav eidentified "UNION PRECISON CAS'T'ING CO .," but did identify ""I'AGA CO." However, thisentity was considered out of scope of the tie-up templates and was (incorrectly) no tattached to one .
DEFT had no facility for recognizing "BRIDGESTONE SPORTS" nor fortracking the reference to "TI IL NEW COMPANY .
"What WorkedDEFT was effective at recognizing literal strings and 'patterns contained in it slexicons.
DEFT frequently generated correct entity names that were not in th ecorporate name lexicon using a set of heuristics that reasoned backwards from adesignator.
For example, "BRIDGESTONE SPORTS CO ."
was constructed .
DEFT of coursehad little problem with the tagged items for the document template .
These areprecisely the kinds of elemental functions that DEFT is expected to perform well .DEFT recognized the occurrence of sonic of the joint ventures, based on a very limite dset of patterns that were originally defined for use in connection with a semanticgrammar.
This set could have been extended to produce improved recall had w eknown the parser would not he available .
"These few successes indicate that even asimple pattern-based approach can recognize concepts of this type in restricte dcases .What FailedThe lexicons and extraction phases that were rapidly developed for MtJC-5 containe dsome hugs that were not observed during training; some corporate names weremissed, for example, that should have been constructed .
The chief failings wereinadequate lexicons for identifying joint ventures and inadequate scoping .
Thesetwo problems combined to suppress the instantiation of the many valid entities tha tDEFT found, but could not associate with a tie-up relation and therefore did no treport .
In general, the system was configured to reduce the anticipate dovergeneration, with the expectation that tie-ups and entity relations would b eidentified and scoped by the semantic grammar ; in the absence of the parser ,undcrgeneration became severe .System Training and Resources ExpendedThe effort expended on MUC-5 testing and documentation was approximately tw operson-weeks.
System development activities undertaken independently of MUC- 5were exploited for the Mt1C-5 evaluation run .
These included:?
Analysis : 1 person-mont h?
lexicon Development and Data Definitions : 1 .25 person-month s?
Extraction Phases and Functions : 3 person-month sI'he total level of effort for all actin ities impacting M1,1C-5 c\"as therefore roughly 5 .
5person-months .246As we have noted, key system components were ultimately unavailable for the MUC- 5evaluation .
Although we won't know "how we would have done" until th ecomponents are completed and our internal tests against the MUG data are repeated, i tis our expectation that significant improvement will he obtained with a littl eadditional effort-- although performance is neither expected nor required t oapproach that of true NM systems, given our view of DEFT as an integrationenvironment .Most of the effort in creating a new DEFT application usually centers on lexicondevelopment.
For MUC-5, most lexicons were batch loaded from the data supplied viathe Consortium for Lexical Research .
A few lexicons for joint venture identificatio nand scoping were developed manually .
These were quite simple and their actua lcreation required minimal time .Much of the time on MUG-5 was occupied with writing C-code for extraction routines ,particularly for corporate names .
The need to write so much code for a newapplication is a current weakness in DEFT which will he remedied to a degree whe nthe parser becomes available .Of course, a key activity was the analysis of the test corpus and development of asemantic grammar appropriate to the IiJV problem .
The results of this analysis wer emanifested in the tie-up relation lexicon and the BNF grammar for the parser .
Onlythe former was ready in time for the evaluation .
Analysis was a cyclical, iterativ eprocess; refinement continued during system training .DEFT system training consisted of a series of runs against samples of the trainin gcorpus, utilizing the frame review tool to examine the results .
Lexicons weremanually refined as a result of missed objects and false hits .
Early runs resulted i nchanges to the hatch loading sequence for some of the lexicons (e .g.
the corporat edesignators) .
Feedback into the grammar would also have been derived from thi sprocess, had the parser been available and time permitted .
As it was, time wasinsufficient even for lexicon refinement ; for example, a few key errors in th ecorporate designator lexicon resulting from a hug in the program that prepared th efile provided through the Consortium for hatch uploading were noted only after th efinal evaluation run was analyzed .
This was partially responsible for some of th eundergeneration .What We LearnedIt came as no surprise that simple patterns are inadequate to extract the complexideas expressed in the IiJV documents .
We view the results as validating the concep tthat DEFT, operating as a standalone system, is best qualified to perform on problem sinvolving well-defined, constrained sets of text objects to be extracted, even with theaddition of a "meta-pattern" or grammatical capability .
DEFT should excel on suchproblems when throughput is a major consideration .The selection (and on-going implementation) of a mechanism for expressing meta-patterns that is compatible with all of the goals discussed earlier is a major outcom eof our MUC work, even though it was not available in time .
We believe that thi sapproach will significantly empower DEFT and broaden the range of applications fo rwhich it is a suitable tool, while increasing the flexibility with which it can beintegrated with other text analysis tools .
This will prove highly valuable to ou r247current government customers, as well as future DL F1' users in the government o rcommercial sector .DEFT's potential as an integration environment was underscored by the fact that w esuccessfully ran documents through :?
A complex set of extraction phase s?
With extremely large lexicon sthat are beyond the scope of anything that has been tried in existing DEF Tapplications .
The robustness of the architecture and efficiency of the patter nsearches were our major consolation in the MUG-5 evaluation .
We therefore look .foropportunities to combine DEFT's system engineering and search capabilities with th esophisticated analytical power of NI .U-based solutions when real-world problems ar eencountered which are out of scope of DEFI"s simple extraction mechanisms .248
