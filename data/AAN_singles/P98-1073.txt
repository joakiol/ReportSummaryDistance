Vers l'utilisation des m thodes formelles pourle d veloppement de linguicielsBi le l  Gargour i ,  Mohamed Jma ie l ,  Abde lmaj id  Ben  HamadouLaboratoire LARISFSEG-SFAX, B.P.
10883018 SFAX, TUNISIAE-mail: {Abdelmajid.Benhamadou@fsegs.rnu.tn}Abst ractFormal methods have'nt been applied enough inthe development process of lingware althoughtheir advantages have been proved in manyother domains.
In this framework, we haveinvestigated some applications dealing withdifferent processing levels (lexical analyses,morphology, syntax, semantic and pragmatic).These investigations has mainly led to thefollowing observations.
First of all, we have no-ticed a lack of use of methodologies that coverall the life cycle of a software development.
Theformal specification has not been used in thefirst development phases.
In addition, we havenoticed the lack of formal validation andconsequently the insufficient guarantee of thedeveloped software results.
Moreover, therehas been no appeal to rigorous methods ofintegration to solve the dichotomy of dataand processing problem.
However, the use ofthe formal aspect in the Natural LanguageProcessing (NLP) has generally been limited todescribing the natural anguage knowledge (i.e.,grammars) and specifying the treatments usingalgorithmic languages.
Few are those who haveused a high level specification language.This paper focuses on the contributions offormal methods in developing natural anguagesoftware starting from an experimentationcarried out on a real application and whichconsists in specifying and validating the sys-tem CORTEXA (Correction ORthographiquedes TEXtes Arabes) using the VDM formalmethod.First of all, we review the advantages of formalmethods in the general software developmentprocess.
Then, we present he experimentationand the obtained results.
After that, we placethe formal methods advantages in the contextof NLP.
Finally, we give some methodologicalcriteria that allow the choice of an appropriateformal method.438Rdsumd :Les mkthodes formelles n'ont pas ktd surf-isamment utiliskes dans le processus deddveloppement des linguiciels, alors qu'ellesont fait leurs preuves dans d'autres domaines.Le prdsent article essaye de mettre en reliefles avantages des mkthodes formelles dans lecontexte des langues naturelles, partant desrksultats d'une expkrience rkaliske sur une ap-plication rkelle.
Dans un premier temps, nousrappellons les avantages globaux des mkthodesformelles dans le processus de dkveloppementd'un logiciel.
Ensuite, nous pla?ons cesavantages dans le contexte des langues na-turelles.
Enfin, nous donnons les crithresmkthodologiques pour le choix d'une mkthodeformelle approprike.1 In t roduct ionL'automatisation des langues naturelles abdnkficik jusqu'k nos jours de nombreusesanndes de recherches et continue encorefaire l'objet de plusieurs travaux, notammentdans le domaine du gknie linguistique pour ledkveloppement d'applications spkcifiques.L'ktude des approches de dkveloppement desapplications likes au Traitement Automatiquedes Langues Naturelles (TALN), k tous sesniveaux (i.e., lexical, morphologique, syntax-ique, skmantique et pragmatique), (Fuchs, 1993;Sabah, 1989) nous a permis de constater unequasi-absence de l'utilisation de mdthodologiesde dkveloppement qui inthgrent toutes lesphases du cycle de vie d'un logiciel.
En par-ticulier, au niveau des premihres dtapes, nousavons constatk l'absence quasi-totale de la phasede spkcification formelle.D'un autre c5t4, nous avons constatd une dif-ficultk, voire absence de validation formelledes approches utilisdes dans le dkveloppementet par consdquent de garantie sur les perfor-mances des rksultats obtenus.
De m~me, nousavons remarqu6 le non recours ?
des mdthodesrigoureuses d'intkgration pour rksoudre leproblhme de la dichotomie donn6es-traitements.L'utilisation des outils formels s'est limitke,dans la plupart des cas, k la description du lan-gage (i.e., les grammaires) et k la spdcificationdes traitements r~duite, g@nkralement, k l'usaged'un langage algorithmique.
Rares sont ceuxqui ont utilisk un langage de spkcificationformelle de haut niveau (Zajac, 1986; Jensenet al, 1993).Aprhs une prksentation des avantages qu'offrentles mkthodes formelles dans le processus dedkveloppement d'un logiciel, d'une manihregknkrale, cet article essaye de mettre en re-lief les avantages pecifiques au domaine deTALN partant d'une expkrience mende au seinde notre kquipe en utilisant la mkthode VDM(Dawes, 1991; Jones, 1986).
I1 donne, ~ la fin,des crithres permettant le choix d'une mkthodeformelle approprike.2 Rappe l  des pr inc ipaux  avantagesdes mdthodes  fo rmel lesL'int@gration des mkthodes formelles dans leprocessus de dkveloppement de certaines ap-plications critiques comme les systhmes tempsrdel et les systhmes distribu'ks a donnk sespreuves ces dernihres annkes (Barroca and Der-mid, 1992; Dick and Woods, 1997; Ledru,1993).
C'est ce qui a motivk leur utilisationdans le ddveloppement de logiciels traitant desproblhmes complexes au niveau industriel (Huiet al, 1997).Une mkthode formelle est considkrke commeune ddmarche de dkveloppement de logicielsbaske sur des notations mathdmatiques t despreuves de validation formelles (Habrias, 1995).Cette dkmarche utilise un processus de raiTine-ment qui part d'une spkcification abstraite desbesoins pour dkboucher sur une spkcificationraffinke et exkcutable (ou directement codableen un langage de programmation).
Les princi-paux avantages des mkthodes formelles peuvent~tre rksumks dans les points suivants :La prdcision et la non ambiguitd : l'utilisationd'un langage bask sur des notations formelleset prkcises permet d'kviter toute ambiguitk ettoute redondance dans la spkcification.La ddteetion d'erreurs conceptueUes le plus tStpossible : l'application de preuves de validationde la spkcification tout le long du processusde raffinement de cette dernihre, garanti laddtection des erreurs de conception le plus tStpossible dans le processus de dkveloppementde l'application.
En l'absence d'une tellevalidation, les erreurs de conception e seront439d~tect4es qu'aprhs la phase d'impl4mentationce qui engendrera un c6ut suppl~mentaire.La satisfaction de la conception(dventuellement de l'impldmentation ) parrapport aux besoins : elle est garantie gr?ceau processus de raffinement qui part d'unesp4cification des besoins et applique des rhglescoh~rentes de transformation pour aboutir ~ laconception finale.Le contrble de la cohdrence donndes-traitements : qui est directement pris en chargegr?ce aux preuves de validation.La rdutilisation : le raffinement desspecifications formelles et leurs d~compositionssuccessives permettent de mettre en ~videncedes niveaux d'abstraction int~ressants pour lar~solution du probl~me t pour promouvoir lar~utilisation (des sp4cifications).3 P resentat ion  et  r~su l ta ts  del 'exp~r imentat ion3.1 Cho ix  et  d~marche  uti l is4ePour mesurer l' impact de l'utilisation desm~thodes formelles dans le contexte du TALN,nous avons effectu~ la specification complhteet valid~e du systhme CORTEXA (CorrectionORthographique des TEXtes Arabes) (Ben-Hamadou, 1993) d~velopp~ au sein de notre lab-oratoire.Outre la disponibilit~ de la documentation, enmati~re de conception et d'impl~mentation, lechoix du syst~me CORTEXA est aussi motiv~par la diversit~ des approches utilis~es pour larepresentation des connaissances t des traite-ments.
En effet, il se compose :?
d'un module de d~tection des erreurs bas~sur une analyse affixale qui utilise unsysthme ~ 4tats finis (les r~seaux de tran-sitions augment~es : ATN).
L'analyse af-fixale effectue la d~composition d'un moten ses composants premiers : pr~fixe, in-fixe, suffixe et racine en se r~f~rant ?
unensemble de lexiques et de structures dedonn~es,?
d'un module de correction des erreurs or-thographiques qui utilise un systhme ~ basede rhgles et?
d'un autre module de correction des erreurstypographiques qui se base sur un systbmemixte.Le choix de VDM pour la specification de COR-TEXA est motive, d'une part, par le fait quecette m~thode se base sur les pr~dicats qui don-nent un haut pouvoir expressif, et d'autre part,pour sa notation simple et riche.
Aussi, VDMa fait ses preuves dans le d~veloppement deplusieurs systhmes d'information.
Contraire-ment aux environnements de specification desdonn~es linguistiques tels que D-PATR (Kart-tunen, 1986), EAGLES (Erbach et al, 1996),etc, VDM permet de specifier ?
la fois des traite-ments et des donn~es (dans notre contexte desdonn~es linguistiques) et offre une m~thodologiede d~veloppement d'applications se basant surdes raffinements etdes transformations valid~es.Partant de la description informelle des be-soins, nous avons d6velopp~ la spficificationabstraite du systbme CORTEXA (appelfieaussi spgcification implicite) qui englobe, en-tre autres, la spficification formelle de ses fonc-tions, de ses actions et de ses rbgles de correc-tion.
Cette sp~cification a fit6, ensuite, validfieen utilisant des preuves formelles.
Enfin, nousavons g~n~ralis~ la sp~cification de conception(appel~e aussi spficification explicite ou directe)partir de la sp~cification abstraite moyen-nant des rbgles relatives ?
la m6thode VDM.Cette sp4cification de conception est facile-merit transform6e en code pour rfialiser la phased'implfimentation.3.2 R~su l ta ts  obtenusL'utilisation de la m~thode formelle VDM pourla sp6cification complbte et valid~e du systbmeCORTEXA a conduit, entre autres, aux con-stats suivants :InsuJfisance n r~gles : l'utilisation des preuvesformelles nous a permis de mettre en relief, parrapport ~ \[a specification initiale, certaines itu-ations non prises en compte.
En particulier, lespreuves qui permettent de s'assurer que pourchaque type d'erreur dolt exister au moins unerhgle de correction ous ont permis de constaterque l'ensemble des rbgles de correction, initiale-ment propos~, ne permet pas de prendre encharge toute la typologie d'erreurs.Exemple  1: preuve relative ?
l'erreur de sup-440pression Exemple  3:(Vw' ?~ CH, Vw ~ Lex).
(Del(w, w')Aw' ?_ Lex) ~, (3R e Reg).w ~ R(w')ohLex : le lexique de r4f~renceCH : l'ensemble des s~quences de chaines decaracthresReg : l'ensemble des rhgles de correctionR(w) : l'application de la rhgle R sur la chainew.
On repr~sente une rhgle en VDM par unefonctionDel 0 : un pr~dicat qui v~rifie l'erreur desuppression de caract~re.La prdcision et la concision de laspdcification : en comparant la specification in-formelle du systhme CORTEXA, pr~sent~e dansla documentation, avec la specification formelled~velopp~e, nous remarquons que eette dernihreest plus precise et plus concise.
L'exemple2, donn~ ci-aprhs, qui pr~sente la specificationformelle de la fonction de g~n~ration desd~compositions affixales possibles d'un mot w,illustre ce constat.Exemple  2:lsdecomp(w, p,i, s, root : CH)r : Bpre  Truepost  3a, bE CH (w=p.a .
i .b .
sAroot = a * b) A (Sprefixe(w, p) ASsu f  f ix(w, s)/X Sin f ixe(w, i) )ohB : le type bool~enSinfixe 0 ( respectivement Sprefixe 0 etSsu\]fixeO) : un pr~dicat qui v~rifie lapropri~t~ d'un infixe (respectivementd'unpr~fixe t d'un suffixe) pour une chaine.Facilitd du ddveloppement du code : laspecification de conception obtenue st suffisam-ment explicite pour les donn~es et alorith-mique pour les traitements.
Elle est donc facile-ment codable en un langage de programmation.L'exemple 3, illustre l'usage d'une notation al-gorithmique dans la sp6cification des fonctions.Il pr~sente la fonction S-Radical de v~rificationde la propri~t~ d'un radical (form6 par la racineet l'infixe).Sradical : CH x CH > BSradieal(sl,s2) -=De\] if s, -= \[\]then  Falseelse if Sprefixe(sl ,  s2)then  Trueelse Sradieal(tl(sl), s2)ohriO: une fonction VDM qui retournelas~quence en entree priv~e de sa t~te.Unicitd de la notation : les m~thodes formellespermettent d'utiliser la m~me notation pourd~crire aussi bien les donn~es que les traite-ments.
En effet, avec le langage VDM-SL, as-soci~ k VDM, nous avons pu specifier toutes lesfonctions et les donn~es de r~f~rence de COR-TEXA.
Les exemples 4 et 5 illustrent cetteunicit~ pour la representation des donn~es com-posdes et des fonctions.Exemple  4 : l 'enregistrement relatif auxdonn~es d'une d~composition d'un mot en unpr~fixe, un infixe, un suffixe et une racine.Decomp :: p: CHi: CHs: CHr :  CHExemple  5: specification de l'action qui g~nhreles propositions de correction des suffixes parsuppression de caracthreA3s(p : CH, c : CHAR)SCand : set of CHpre  Truepost  3 a,b, pl E CH p = aec .
bApl = a ?
b A Pl e Su f f ~ {Pl } C SCandohCHAR : l'ensemble des caracthresSCand : les suffixes candidats k lacorrectionSurf: l'ensemble des suffixes.Cohdrence donndes-traitements : l'unicit~ dela notation, a permis d'appliquer des preuvesformelles k la lois sur des donn~es et destraitements et par consequent de contr61er lacoherence de ces derniers.
L'exemple 1 illustrece contr61e dans le cas d'un systhme ~ base derhgles.441La validation de chaque composant dusyst~me : pour chaque composant ou moduledu systbme CORTEXA, nous avons appliqu6 lespreuves de validation appropri6es, ce qui nous apermis de valider tousles r6sultats partiels dusystbme.
Le th6orbme de l'exemple 6, donn6ci-aprbs, permet de prouver qu'?
la suite del'application de la rbgle de correction d'une er-reur de substitution, les propositions de correc-tion obtenues appartiennent au lexique.Exemple  6:Vw' E CH, Vw ~ Lex.Sub(w, w ~):.
3R ~ Reg.R(w') C_ Lexo~Sub : un pr@dicat qui v6rifie l'erreur desubstitution de caracthres.4 In t6r6ts  des  m6thodes  fo rmel les  eng6n ie  l ingu is t iqueCette exp6rimentation, bien qu'elle soit assezlimit~e dans le temps (elle a dur~ une annie en-viron) et dans son contexte (elle s'est int6ress6un seul systhme t non k plusieurs), elle nousa permis d'appr@cier ?
juste titre l'int@r6t derecourir aux m6thodes formelles dans le pro-cessus de d6veloppement des applications li6esau TALN.
Elle nous a aussi permis de d6gagercertains avantages globaux d6di6s au domainedu TALN qui viennent consolider ceux quenous avons d4j?
cit6s dans un cadre g6n6ralde d6veloppement des Iogiciels.
Ces avantagessp6cifiques peuvent ~tre r@sum6s et argument6sdans les points qui suivent.D'abord, au niveau de la specification desbesoins, les applications du TALN sontg6n6ralement trhs ambitieuses au d6part.
Oron connait aujourd'hui les limites des modbleslinguistiques et des outils de repr6sentation desconnaissances.
L'utilisation d'outils formelsdans les premibres 6tapes de d6veloppement(i.e., analyse) permet de mettre trbs vite en6vidence les limites du systbme k d6velopper, enparticulier, sur le plan de la couverture linguis-tique et par cons6quent de partir pour l'6tape deconception sur une version valid6e du systbmequi sera impl@ment6 et de pr4voir d'embl6 lespossibilit6s d'extention et de r6utilisation.Par ailleurs, la complexit6 des traitements li6sau langage naturel et la diversit6 des donn6eslinguistiques et des fortes int6ractions qui ex-istent entre donn@es et traitements rendentla t~che de conception trbs difficile et pou-vant engendrer des problbmes d'incoh6rence.L'utilisation des m6thodes formelles au niveaude la conception permet d'abord, de g6rerla dichotomie donn6es-traitements soit parl'int6gration (i.e., en utilisation l'approche ob-jet), soit par le contrSle de coh6rence (i.e.,par des preuves de validation) et ensuite demettre en 6vidence, par des regroupementset des raffinements successifs, des abstractionsint6ressantes r6utilisables telsque des modulesou des sous-systbmes pouvant ~tre disponiblesdans une bibliothbque (Darricau et al, 1997).Ces abstractions correspondent par exempledes modules standards du TALN traitant leniveau phon6tique, morphologique, syntaxique,etc.
Notons ?
ce propos que, la r6utilisationde sp6cifications (i.e., de conception) peut sefaire directement ou moyennant des adapta-tions.
Les m6thodes formelles offrent desenvironnements qui facilitent ces adaptations(6diteurs,..) et qui permettent la validation desnouvelles p6cifications.Enfin, l'utilisation d'une notation uniformedonne la possibilit6 d'int6grer dans la m@meapplication une vari6t@ de connaissances sur lalangue sp6cifi@es avec des formalismes diff6rents(i.e., grammaires d'unification, HPSG, Gram-maires Formelles, etc).
Ce qui permet-tera d'avoir une meilleure coh6rence dans lasp6cification finale k produire.5 Les c r i tb res  de  cho ix  d 'unem6thode  fo rmel le  pour  le TALNL'utilisation de la m~thode VDM pour laspecification complhte et valid~e du systhmeCORTEXA a @t@ ?
titre d'essai.
Toute-lois, le choix d'une m~thode formelle pourle d~veloppement d'une application de TALNreste crucial.
Ce choix dolt tenir compte dessp~cificit~s du domaine des langues naturellessur le plan du langage de specification et surcelui de la m~thodologie appliqu~e.
Dans ce quisuit, nous donnons quelques crithres que nousjugeons pertinents dans le choix d'une m~thodeformelle dans le contexte de TALN :442?
Le pouvoir expressif de lam~thode : possibilit~ d'int~grer dans lam~me specification des connaissances lin-guistiques vari~es d~crites avec des formal-ismes diff4rents.
Le langage de sp4cificationdoit pouvoir unifier la representation desdiff4rentes expressions.
Le pouvoir expres-sif concerne aussi la specification conjointedes donn~es linguistiques et les traitementsqui leurs sont appliques.?
Simplicit~ de la notation et de lam~thodologie d  d~veloppement.?
Couverture maximale du cycle de vie dulogiciel ~ d4velopper.?
Existance d'Ateliers de G~nie Logiciel(AGLs) qui supportent la m~thode.?
Possibilit~ de supporter l'architecture dusysthme envisag~ (i.e., s~quentielle, dis-tribu~e, parallhle, etc).6 Conc lus ionL'utilisation des m~thodes formelles dans lecontexte des langues naturelles permet, nonseulement de consolider les avantages globauxde ces methodes dans le cadre g~n~ral ded~veloppement de logiciels, mais aussi de rap-porter de nouveaux profits sp~cifiques au do-maine.
Cette utilisation concerne aussi bienle processus de d~veloppement des applicationsque leur maintenance.
Cependant, le choixd'une m~thode appropri~e r ste li~ ?
la disponi-bilit~ d'outils logiciels associ4s qui facilitent samise en oeuvre et k la construction d'une bib-liothhque de specifications r~utilisables.Actuellement, nos travaux se concentrent surla finalisation d'une approche que nous avonsd~velopp~e pour g~n~raliser l'utilisation desm~thodes formelles (VDM ou autres) dansle processus de d~veloppement des linguiciels.Cette approche inthgre les principaux formal-ismes existants de description des connaissanceslinguistiques (i.e., Grammaires d'Unification,Grammaires Formelles, HPSG, etc).ReferencesL.
M. Barroca and J.
A. Mc Dermid.
1992.
For-mal methods : use and relevance for the de-velopment of safety-critical systems.
The Com-puter Journal, 35(6).A.
BenHamadou.
1993.
Vdrification et correc-tion automatiques par analyse affixale des textesdcrits en langage naturel : le cas de l'arabe nonvoyelld.
Ph.D. thesis, Facult~ des Sciences deTunis.
Thhse Es-Sciences en Informatique.M.
Darricau, H. Hadj Mabrouk, and J.G.Ganascia.
1997.
Une approche pour lar~utilisation des sp6cifications de logiciels.Gdnie Logiciel, (45):21-27, September.J.
Dawes.
1991.
The VDM-SL reference guide.Pitman Publishing.J.
Dick and E. Woods.
1997.
Lessons learnedfrom rigorous ystem software development.
In-formation and Software Technology, 39:551-560.G.
Erbach, J. Dorre, S. Manandhar, andH.
Uszkoreit.
1996.
A report on the draft ea-gles encoding standard for hpsg.
In Actes deTALN-96, Marseille, France, May.C.
Fuchs.
1993.
Linguistique et TraitementsAutomatiques des Langues.
Hachette.H.
Habrias.
1995.
Les specifications formellespour les systhmes d'informations quoi ?pourquoi ?comments ?
Ingdnierie des syst~mesd'information, 3 (2) :.205-253.J.
Hui, L. Dong, and X. Xiren.
1997.
Usingformal specification language in industrial soft-ware development.
In Procedings of the IEEEInternational Conference on Intelligent Process-ing Systems, pages 1847-1851, Beijing, China,October.K.
Jensen, G.E.
Heidorn, and S. D. Richard-son.
1993.
NLP: The PLNLP Approach.
Kul-wer academic publishers.C.
B. Jones.
1986.
Systematic software devel-opment using VDM.
Printice Hall.L.
Karttunen.
1986.
D-patr : A developmentenvironment for unification-based grammars.
InIn Proceedings of the ~ lth International Confer-ence on Computational Linguistics, pages 74-80, Bonn, Germany.Y.
Ledru.
1993.
Developing reactive systems ina vdm framework.
Science of Computer Pro-gramming, 20:51-71.G.
Sabah.
1989.
L'intelligence artificielle et lelangage.
Hermes.R.
Zajac.
1986.
Scsl : a linguistic specificationlanguage for rot.
In Procedings of COLING'86,pages 25-92, Bonn, Germany, August.443
