The Syntax Student?s Companion:an eLearning Tool designed for(Computational) Linguistics StudentsAure?lien MaxGroupe d?Etude pour la Traduction Automatique(GETA-CLIPS)Grenoble, Franceaurelien.max@imag.frAbstractThis paper advocates the use of free andeasily accessible computer programs inteaching.
The motivating reasons for a par-ticular program supporting the learning ofsyntax are given, and a first version of theprogram is presented and illustrated.
Initialevaluation results led to additional specifi-cations and to the development of a newversion of the program that is introduced.Finally, several perspectives for such a sup-port tool are drawn.1 IntroductionDoing exercises to manipulate the conceptstaught in a course is essential to both teachersand students.
While the former want to ensurethat their students have a good grasp of thematerial that they teach them, the latter oftenwant to illustrate that material with someconcrete practice.
Linguistics or computationallinguistics students who are introduced to theintricacies of grammar are no less concernedthan any others.
A typical exercise consistsin asking students to analyze a sentence bymeans of its description as a syntactic tree.In introductory courses, either a context-freegrammar is given to them before the exercisebegins, or they have to build one of theirown that can be used to analyze the sentencegiven.
Obviously, the more exercises look likechallenging ?games?
and the more they areeasy to use and accessible, the more likelystudents are to invest time and effort in tryingto do them (see e.g.
(van Halteren, 2002;Gibbon and Carson-Berndsen, 1999)).
If theyspend a lot of time drawing, erasing parts oftheir trees, drawing them again or correctingthem, and then waiting for minutes before theirteaching assistant is available again, they maynot find the whole exercise very captivatingvery long.
But this type of exercise is essentialto understand how the most basic of grammarformalism works and therefore to build a solidground for the study of language analysis.Computers play a growing role in educa-tion, as the number of workshops dedicatedto eLearning and related domains shows.While many institutions experience financialcuts, often reflected in the reduction of thetime devoted to supervised work, the use ofcomputer support has also its roots in otherreasons.
It should be clear that computertools are not meant to dispense entirely withteachers, but rather to have them concentrateon the pedagogical content.
Machines aregood at supporting well-defined tasks, and cantherefore allow students to practise conceptsthat have been encoded into a well designedcomputer program.
The issues of what type ofpractice can be done in a satisfactory mannerwith computers today and of the extent towhich it can actually help students or assesstheir performance are open to debate and theobject of research.
Importantly to us, pastprojects have shown that the computer-assistedlearning of syntax can produce a high levelof engagement by students (e.g.
(Larson, 1996)).This paper concentrates more on the stu-dent?s perspective, inspired from the author?sown experience as a former computer sciencestudent taking courses in linguistics.
The firstsection presents the motivating reasons for thecreation of a computer program intended tosupport the practice of syntax exercises.
Theprogram is described and its use is illustratedby concrete examples.
Preliminary elementsof evaluation are inferred from the use of theprogram by university students and teachers,showing that this type of support yieldspromising results in spite of a few issues.
Wethen present our current work by describing thedesign of a new version of the program, wheremodularity and extensibility play a centralrole.
It is hoped that this new version will bemore suited to both students?
and teachers?needs, and that this practical experience willcontribute to the development of the field ofcomputer-assisted learning.
We finally proposeseveral tracks for the evolution of this type oftool.2 Motivating reasons for thecreation of the programSupervised time in university courses tendsmore to diminish than to augment.
It is howeverparticularly crucial in introductory courses thatstudents can get a good grasp of the conceptsby regular supervised practice.
Exercise sheetsare often found useful only if sufficient time inthe classroom can be devoted to go throught allthe different subtleties encoded in the exercises.It can therefore be advantageous to offer stu-dents a means to practise outside of the class-room, while still being able to ask their teachersfor help.
There are a number of criteria thatshould be taken into account when designing acomputer program for supporting this kind ofpractice, including the following:?
The program should be attractive tostudents.
It is well known in computer en-gineering that good programs can end upnot being used if the user was not takeninto consideration from the very beginningof the engineering process.
Students are aparticular kind of users who may not bewilling to use programs that are tediousor overcomplicated to use, and seen as nothelpful as a result.?
Teachers should have the feeling thatthey can control what the programdoes.
Not only should it be simple forteachers to add new data conforming topredefined exercise types, but it should alsobe possible to extend the program.1?
The program should provide usefulfeedback to students.
While it is proba-bly the case that an asynchronous mode ofpractice whereby a student would do exer-cises on a computer and then send the re-sults electronically to a teaching supervi-sor would yield good results in some con-1It is not expected that teachers would write com-puter code themselves, but the program could be ex-tended by means of predefined building bricks or by theaddition of code by a computer engineer with access toa clear application programming interface (API).texts, students will expect the program toassess their answers and possibly providefeedback, and therefore support self-studyto some extent.?
The use of the program should be in-dependent from place and time.
Itis our own experience as teacher at theuniversity level that a significant propor-tion of post-2000 students prefer to workfrom home when they have this possibili-ty.
Booking computer rooms for practicefor specific courses may work for some stu-dents, but certainly not for all of them.This said, supervised sessions with com-puters may still be a fruitful option.
This,of course, further implies that the programshould not be too costly for both the uni-versity and the students, if not free.When we first worked on the developmentof a program that would support the practiceof syntax exercises, back in 1999, there werealready programs in this area.
Trees 2 2,developed at the University of Pennsylvania,allowed students to visually build syntactictrees, but in such a way that they could only bevalid relative to the grammar used.
Moreover,at the time the program could only be run lo-cally on Macintosh computers and required thepurchase of a licence.
Syntactica3, developed atSunny Brooks University, allowed students tobuild grammars and then ask the program tobuild the syntactic tree for them, which theycould subsequently modify.
Again, at the timethe program only existed for NeXT computers.The free Java applet from the University ofBangor, The Syntax Tutor4, permitted a studentto enter a set of context-free rules and to askthe system to parse a sentence with it.Except for the case of the The Syntax Tutor,these programs had to be bought, and couldonly be run on specific computer families.
Ne-vertheless, their existence shows that there wasa very promising trend, supported by encoura-ging evaluation (see e.g.
(Larson, 1996; Phillips,1998)), to offer students computer programs forthe study of syntax.2http://www.ling.upenn.edu/ kroch/Trees.html3http://semlab2.sbs.sunysb.edu/Users/rlarson/Syntactica/syntactica.html4http://www.bangor.ac.uk/ling/java/lt/LingTutor.html.This link has been down for some time.3 Program design considerationsWhen designing the program, we had two typesof considerations in mind, pedagogical andtechnical.
The basic idea was to let studentsbuild syntactic trees in a simple way, and toedit or consult the underlying grammars.
Whatseemed very important was to let the studentsthe possibility to make errors, considering thattrial and error, providing appropriate feedbackis given, can be part of a sound learningprocess.
Therefore, students should be able todraw syntactic trees that are not valid relativeto a given grammar, which was given to themor was build by them, and was accessible andmodifiable or hidden.
The syntactic theoryused would initially be the X?
theory5, and thetypes of exercises would include the drawing ofambiguous sentences based on some data, andthe modification of existing trees to illustratesyntactic transformations.Technical considerations included the factthat the program should be runnable anywhereand on any computer family.
The Java pro-gramming language (Sun Microsystems, 1995)was the obvious choice, as it was already quitemature and could be run over the Internet onany platform that had a Java virtual machine.Furthermore, a Java program can exist in twoflavors, as an application that can be installedand run locally on a personal computer, andas an applet that can be downloaded at exe-cution time over the Internet and run by thevirtual machine of a web browser installed oncomputers of a university department withoutany installation nor maintenance.Furthermore, exercises and resources for theprogram had to be modifiable.
For a local usewith the application version, the user shouldbe able to create new exercises using a simpledescription language.
For a distributed usewith the applet version, the administratorof the website where the applet is hostedshould be able to add resources that would beimmediately accessible to all the remote users.Modifiable resources include grammars, trees,exercise definitions, and language resource filesfor running the program in the language of theuser.
XML (W3C, 2000) was chosen as theformat for most of the resources, and a simple5This choice was based on a particular introductorycourse taught at McGill University, which used (O?Gradyand Dobrovolsky, 1996) as its coursebook.Figure 1: The main window of the programschema was designed to allow the creation ofnew resources.
It was initially believed thatthis provided a simple way of creating newresources and modifying existing ones.4 Presentation of the programOur program is called the Syntax Student?sCompanion.
Figure 1 shows its main interfacerunning in English.6 The top panel containsthe active grammar (Simple CFG for English inthe example), a button to launch the grammareditor, the active mode (Free drawing mode)and a button to switch to the exercise mode.The panel on the left contains buttons for allthe nonterminal and terminal categories of theactive grammar, and a list for the words inthe lexicon.
The main panel is a scrollablezone called the workspace where trees can bedrawn.
Menus contain commands relative tothe customization of the program, user modes,grammars, and trees.Clicking on a syntactic category or on alexicon word allows dropping it onto theworkspace at a chosen location.7 Trees arebuilt by combining subtrees, as illustrated in6The program can be run in 7 languages thanks tolocalized resource files contributed by various people.7The Trees program proposes to drop on theworkspace subtrees corresponding to partial structuresdescribed in the grammar used.
We plan to add thisfeature in the next version of the program, as it allowsstudents to concentrate on more advanced notions.Figure 2: Steps for attaching a subtree to a nodefigure 2.
First, the root node of the tree thatwill become a subtree of another tree shouldbe selected with the mouse (1), and draggedonto the node that will become its mother (2).If that node has not any children yet, thenthe attachment is done.
Otherwise, the userhas to select the position of the new subtreeamong the daughters of its mother (3).
Whenthe position has been chosen, the attachmentis done, and the new layout of the tree isproduced (4), so as to ensure that the trees arealways well-balanced.8 Alternatively, categoriesand words can be directly dropped onto theworkspaces as children of existing nodes.
Treesor subtrees can be copied and pasted onto theworkspace, allowing faster construction.
Todetach a subtree, the root of the subtree shouldsimply be dragged away from its parent tree.Trees and subtrees can also be removed fromthe workspace by using the rubber tool.All these adjunction operations can be doneregardless of the rules defined in the activegrammar.
Therefore, students may make errorsand be aware of them only after they try tovalidate their trees with the active grammar.Indeed, contexts where students could usea tree drawing application with grammarsdesigned in such a way that irrelevant errorswere not possible revealed in some cases thatthe students had become too dependent on thehelping hand of the program and were not ableto perform as well without it (Phillips, 1998).The current version only supports simplecontext-free grammars.
Grammars can eithercome from a remote or a local file, or theycan be created from scratch by the student.The grammar editor (see figure 3) allows the8We are aware that some textbooks use trees with up-right lefthand branches and sloping righthand branches,so we will add this possibility as a new parameter.
Like-wise, we will allow trees to be built bottom up, with allthe words of a sentence aligned horizontally.Figure 3: The dialog box of the editor forcontext-free grammarsconsultation and modification of the currentgrammar.
It shows all the derivation rules cor-responding to a given nonterminal category9,and allows specifying of how they are presentedon the window of the main interface.Once students have built trees, they can askthe program to check their validity accordingto the active grammar.
If the active grammaris modifiable, they can modify it so as to ensurethat the coverage of the grammar includetheir trees.
If the active grammar is hidden(i.e.
not accessible), the validation of theirtrees indicates whether they conform to an9In the presented implementation, lexical categoriesappear as just any other nonterminal categories in thegrammar editor dialog box, but that may be confusingfor students.
We therefore think that the lexicon shouldbe distinguished from the grammar itself, as it is doneon the left panel of the main interface (see figure 1).Figure 4: Checking of the validity of a tree relatively to the current grammarimplicit grammar specification (such as onethat would have been described during lecturesessions).
Tree nodes that violate the rules ofthe grammar are shown in red, and passingthe mouse cursor over them displays a messageindicating the nature of the error, as illustratedin figure 4, subfigure (3).Three modes of exercises have been definedand can be encoded in XML resource files.
Thedrawing of non-ambiguous trees requires thestudent to draw the tree for a given sentenceusing a given grammar, whereby the analysisof the sentence is unambiguous.
An example ofsuch an exercise encoded into XML format isgiven in figure 5 for the Spanish phrase convo-catoria de proyectos de innovacio?n educativa.Figure 6 illustrates the ambiguous tree drawingexercise type.
The student is asked to draw thesyntactic tree for a sentence (Time flies likean arrow in this case) given several data thatpermit to disambiguate the sentence and findthe correct syntactic derivation.
The last typeof exercise asks students to modify trees (seefigure 7) to reflect syntactic transformations.Instead of asking the student to draw thesyntactic tree for the sentence (in the example,Who will come tomorrow?
), she is providedwith a base tree (in the example, the tree forthe sentence Bobby-Joe will come tomorrow),in order to better illustrate the transformationsthat take place.5 Initial evaluationAs we are not ourselves involved in syntaxteaching10, we have not been able to performany formal evaluation of the presented versionof the program.
It is however crucial to beable to assess the effectiveness of such a tool,both in terms of the type of help it gives to10Our initial motivation was to offer such a programto fellow students.<?xml version="1.0"?><exercices type="" author=""><exercice name="convocatoria deproyectos de innovacioneducativa"language="espanol"type="Unambiguous tree drawing"><sentence>convocatoria de proyectosde innovacion educativa</sentence><grammar name="" type="" author=""><rules>fsust -> nucleo mod;ncleo -> sust;mod -> fprep;fprep -> director termino;director -> prep;termino -> fsust;mod -> adj;sust -> convocatoria;prep -> de;sust -> proyectos;sust -> innovacion;adj -> educativa;</rules><categories_display><row>fsust nucleo</row><row>mod fprep sust</row><row>adj prep termino</row><row>director</row></categories_display></grammar></exercice></exercices>Figure 5: Sample exercise definition for unam-biguous tree drawingthe student and the support it provides to theteacher.
The initial evaluation elements wehave been able to gather from emails sent tous via the website of the project constitute theFigure 6: Ambiguous tree drawing exerciseFigure 7: Tree transformation exercisebasis for an updated specification for the newversion of the program that we will introducein the next section.Several teachers have reported that theyhad used the program at some point in theirteaching, but we suspect that in most casesthe program was demonstrated to students(for example, using a data projector in theclassroom), hoping that they would use it forself-study.
The most important limitationuser feedback told us was the difficulty toadd new exercises for teachers.
Only fewpeople contributed exercises in XML format11,suggesting that this way of specifying resourceswas probably not adequate for linguisticsteachers.
Although the program can supportany grammar theory based on context-freegrammars, the default grammars made someusers think that only the X?
theory could beused, and some users had difficulty to seethat the grammars could in fact be editedand totally new sets of categories defined.Unsurprisingly, some teachers said they wereinterested in the support of feature structures.A not-so-expected use of the program wasfor producing graphical trees for inclusioninto documents.
This, corroborated withseveral user testimonies, seems to indicate thatthe program is considered easy to use.
Itssimplicity was in fact often mentionned as oneof the preferred characteristics by studentswho used the program without any priorrecommandation from a teacher.
We also thinkthat the availability of the program and itsonline user manual in several languages mayhave contributed to this.12Some technical issues were also reported.Most users of the program, who are notsupposed to be computer scientists, found itdifficult to set up the Java program and runit as an application.
Moreover, some webbrowsers did not run the applet perfectly.
Theexisting version of the program is based onthe Java technology that existed in 1999, andthe language is now more mature and bettersupported, so it is now simpler to set up a Javavirtual machine on one?s computer and to runJava programs, and support for Java in webbrowsers is much better than it used to be.As regards the evaluation we would liketo be able to conduct, we believe that userquestionnaires and logging of student activitywould be good indicators of its effectiveness.Also, it would be interesting to see if the use11Some people may have written exercises of which weare not aware.12Evaluation results for the Syntactica grammar work-bench revealed that the use of this kind of computer-assisted instruction surprisingly increased the need forinstructor support (Larson, 1996).
We assume that thiswas partly due first to the number of functions of theprogram, as well as the fact that at the time linguis-tics students were for the most part new to the use ofcomputers.of the program can make significant differencesin the evaluation of the performance of studentgroups.6 Current workWe have specified a new version of the programthat will be partly developed by two Mas-ters students during a computer engineeringproject.
We present the main changes from theexisting version in this section, and we concludewith some perspectives in the next section.First of all, the main lesson we can draw fromuser feedback is that no matter how much timeis spent on specification, not all features thatwould be useful to users could be imagined.Therefore, it seems a good idea that such anon-commercial program be extensible by othercontributors who would like to add new featuressuch as new exercise types, or support for othergrammatical theories.
The new version willhave an OpenSource licence, which implies thatwe pay a particular attention to the genericity,modularity and documentation of the sourcecode, and that the program will continue to befree to use, which seems essential to us.A bottleneck to a more widespread use ofthe program is certainly the difficulty to createnew resources, mainly exercises.
A particularmode for the definition of exercises will beintegrated into the program.
This mode willallow a teacher to describe an exercise andits solution in a way as similar as possibleto the exercise mode itself.
We also wantto support the description of possible errorsand their appropriate corrections and com-ments, in order to provide better feedback tostudents.
Once the exercises are defined, itwould be possible to submit them to a reposi-tory on a web server, on a collaborative mode.13A novel use of the applet version will allowusing it inline in web pages, instead of as aseparate application window.
This will not onlyallow the dynamic drawing of tree descriptionsspecified as parameters to the Java applet (andpossibly tree animations), but also the insertionof exercises within online course material.
We13Collaborative projects, such as the Papillon projectfor multilingual lexical resources, show that this ap-proach can work if submitters can also benefit from thesubmissions of other contributors.plan to use this for the tutorial of the program.On the content side, several ideas have beensubmitted and will be implemented dependingon time.
Notably, it seems particularly inte-resting to provide actual linguistic data fromcorpora to students from which grammarscan be inferred, as in (Borin and Dahllof,1999).
A new exercise type will ask students towrite a grammar accounting for a given smallcorpus, which could already be morphologicallyannotated or not.
Lexicons will be separatedfrom grammars, in order to make them reusablewhen possible.
Feature structures will also besupported, both for the edition of grammarsand for the validation of syntactic derivations.A number of new features concern thegraphical display of trees.
Notably, it willbe possible to collapse or expand subtrees(using the triangle notation), and to draw treestop-down with the terminal symbols immedia-tely under the non-terminal that dominatesthem, or bottom-up with the terminal symbolsaligned horizontally.14 It will also be possibleto specify display properties (such as font andcolor) at the level of nodes and subtrees, and toexport trees as bitmap files for easy inclusioninto documents like assignments and coursenotes.7 Perspectives and conclusionsOne could think of many other features thatwould probably make the program even moreuseful for learning.
We only mention a few andwe hope that OpenSource contributions willextend the list.A key aspect of this kind of support toolcertainly lies in the nature of the feedback thatis provided to students.
We have already saidthat the mode for defining exercises will allowthe teacher to specify possible wrong solutionsand to associate them with an appropriatecorrection.
An interesting extension would bea mode where students could send the resultsof their exercise session (possibly containing aseries of coherent exercises) to a supervisor by14In the latter case, it will be possible to specify thatthe trees be developed with an upright lefthand branchand sloping righthand ones, as this layout is used in sometextbook and is therefore more familiar to students usingthem.email from the program.
Then, the annotatedcorrections of exercises could feed a databaseand be reused in subsequent unsupervisedexercises.
We think that there is indeed muchto be gained from past corrections, as shown inthe research on vicarious learning using pastdialogues between learners and their teachers(Cox et al, 1999), which, incidentally, was alsobased on the teaching of syntax.The range of topics covered by the programcould be extended.
The learning of syntaxcould probably be supported by the integrationof parsers, which could be of particular interestto computational linguistics students (see e.g.
(Meurers et al, 2002; van Halteren, 2002)).The integration of generators would also allowstudents to inspect the productions of theirgrammars to attempt to identify why theycould overgenerate.
Furthermore, we would liketo reuse what already exists for the morpholo-gical analysis of words in terms of inflectionsand derivations, as well as for compositionalsemantic analysis.The program we have presented puts a par-ticular emphasis on its central users, who arestudents in (computational) linguistics.
Initialevaluation has shown that this kind of supportwas very welcome by the learners?
community,and we hope that it will be more widely adoptedby the teachers?
community in its new versionthat attempts to reduce known limitations.
Welook forward to new developments in the fieldof research in computer-assisted learning, andin particular on methodologies for the evalua-tion of systems.AcknowledgementsMany thanks go to the people who have directlycontributed to this unfunded project on a vo-lunteer basis, in particular Se?verine Gedzelmanand Be?ne?dicte Grizolle for their work on thenew version of the program, and A`gnes Sandor,Su-Ying Hsiao, Tanja Hieber, Susana SoteloDoc?
?o, Thierry van Steenberghe, Nicola Can-cedda and Christophe Terrasson for their con-tribution.
Many thanks also to Lisa Travis andNathan Friedman from McGill University, andto all the students and teachers who have sentencouraging feedback on their use of the tool.ReferencesLars Borin and Mats Dahllof.
1999.
A Corpus-Based Grammar Tutor for Education in Lan-guage and Speech Technology.
In Proceedingsof the workshop Computer and Internet sup-ported education in language and speech tech-nology, EACL?99, Bergen, Norway.Richard Cox, Jean McKendree, Richard Tobin,John Lee, and Terry Mayes.
1999.
Vicariouslearning from dialogue and discourse.
Journalof Instructional Science, 27:431?458.Dafydd Gibbon and Julie Carson-Berndsen.1999.
Web tools for introductory computa-tional linguistics.
In Proceedings of the work-shop Computer and Internet supported ed-ucation in language and speech technology,EACL?99, Bergen, Norway.Richard K. Larson.
1996.
Grammar as a labo-ratory science.
In Presented at the AmericanAssociation for the Advancement of ScienceMeetings, Special Session ?From Curiousityto Science Through Linguistic Inquiry?
Bal-timore, U.S.A.W.
Detmar Meurers, Gerald Penn, and FrankRichter.
2002.
A Web-based InstructionalPlatform for Contraint-Based Grammar For-malisms and Parsing.
In Proceedings of theACL-02 Workshop on Effective Tools andMethodologies for Teaching Natural LanguageProcessing and Computational Linguistics,Philadelphia, U.S.A, pages 19?26.William O?Grady and Michael Dobrovolsky.1996.
Contemporary Linguistic Analysis.Copp Clarck, Toronto, 3rd edition.Colin Phillips.
1998.
Teaching Syntax withTrees.
GLOT International, 3.7.Sun Microsystems.
1995.
The Java program-ming language.
http://www.javasoft.com.Hans van Halteren.
2002.
Teaching NLP/CLthrough Games: the Case of Parsing.
InProceedings of the ACL-02 Workshop on Ef-fective Tools and Methodologies for TeachingNatural Language Processing and Computa-tional Linguistics, Philadelphia, U.S.A, pages1?9.W3C.
2000.
XML 1.0: The eXtensi-ble Markup Language (2nd edition).October 2000 W3C recommandation,http://www.w3.org/TR/Rec-xml.
