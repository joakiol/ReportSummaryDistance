tIIIIIIIIIII1IIIiIILexical Discovery with an Enriched Semantic NetworkDoug BeefermanSchool of  Computer  ScienceCarnegie  Mel lon Univers i ty5000 Forbes AvenueP i t t sburgh ,  PA 15213dougb@cs, cmu.
eduAbst rac tThe study of lexical semantics has produced a sys-tematic analysis of binary relationships between con-tent words that has greatly benefited lexical searchtools and natural language processing algorithms.We first introduce a database system called FreeNetthat facilitates the description and exploration of fi-nite binary relations.
We then describe the designand implementation f Lexical FreeNet, a semanticnetwork that mixes WordNet-derived semantic re-lations with data-derived and phonetically-derivedrelations.
We discuss how Lexical FreeNet has aidedin lexical discovery, the pursuit of linguistic and fac-tual knowledge by the computer-aided explorationof lexical relations.1 Mot ivat ionThis paper discusses Lexical FreeNet, a databasesystem designed to enhance lexical discovery.
Bythis we mean the pursuit of linguistic and factualknowledge with the computer-aided exploration oflexical relations.
Lexical FreeNet is a semantic net-work that leverages WordNet and other knowledgeand data sources to facilitate the discovery of non-trivial lexical connections between words and con-cepts.A semantic network allied with the proper userinterface can be a useful tool in its own right.
Byorganizing words semantically rather than alphabet-ically, WordNet provides a means by which users cannavigate its vocabulary logically, establishing con-nections between concepts and not simply charactersequences.
Exploring the WordNet hyponym treestarting at the word mammal, for instance, revealsto us that aardvarks are mammals; exploring Word-Net's meronym relation at the word tv, mr*al revealsto us that mammals have hair .
From these twoexplorations we can accurately conclude that aard-varks have hair.Lexical exploration eed not be limited to one stepat a time, however.
Viewing a semantic network asa computational structure awaiting graph-theoreticqueries gives us the freedom to demand services be-yond mete lookup.
"Does the aardvark have hair?
",or "What is the closest connection between aard-varks and hair?"
or "How interchangably can thewords aardvark and anteater  be used?"
are allreasonable questions with answers taring us in the135face.
Of course, the idea of finding shortest pathsin semantic networks (through so-called activation-spreading or intersection search) is not new.
Butthese questions have typically been asked of verylimited graphs, networks for domains far narrowerthan the lexical space of English, say.
We feel thatformalizing how WordNet can be employed for thisbroader sort of lexical discovery is a good start.
Wealso feel that it is necessary first to enrich the net-work with information that, as we shall see, cannotbe easily gleaned from WordNet's current battery ofrelations.
The very large electronic orpora and widevariety of linguistic resources that today's comput-ing technology has enabled will in turn enable this.The remainder of this paper is organized as fol-lows.
We shall first describe in Section 2 the FreeNetdatabase system for the expression and analysis ofrelational data.
In Section 3 we'll describe the de-sign and construction of an instance of this databasecalled Lexical FreeNet.
We'll conclude by providingexamples of applications of Lexical FreeNet to lexi-cal discovery.2 F reeNetFreeNet, an acronym for finite relation expressionnetwork, is a system for describing and exploringfinite binary relations.
Here we mean relation in themathematical sense, i.e.
a set of ordered pairs.
Weconcern ourselves with finite sets of pairs of tokensdrawn from a finite set of tokens, or vocabulary.2.1 Tokens and re lat ionsA token in FreeNet is simply a normalized stringof characters drawn from a finite vocabulary.
Thevocabulary might be a dictionary of English words,a set of movie titles, or a set of names of researchers.The system is assumed to implement normalizationas a function from input strings to strings.A relation in FreeNet is a finite set of ordered pairsof tokens, or links.
Each relation has a name that,like a token, is simply a normalized string of charac-ters drawn from a finite vocabulary (which we shalldo better to call an alphabet, for reasons made clearbelow.
)Use of the FreeNet system can be seen to consistof three distinct processing phases: the relation com-putation stage, in which a set of relations is derivedfrom some knowledge or data source and transducedto an explicit set of labeled ordered pairs; the graphconstruction stage, in which this set of labeled pairsIs transduced to an efficient multigraph representa-tion; and the query stage, in which a user can inter-act with the system to find paths in the multigraphthat match a certain specification.FreeNet consists of software to do the second andthird phases.
Implementation f a specific instanceof FreeNet requires the user to write software to dothe first phase, but support software xists for anoptional filtering substage that constrains the inputpair set in certain ways--eliminating pairs that con-tain stopwords, enforcing limits on the fanout of to-kens, and enforcing strength thresholds, for instance.The second phase, graph building, simply entailsproviding a set of triples {two tokens and a relation)to the system.
The order in which the triples appearin the input does not matter, as it is the program'sresponsibility to reorder the links as necessary andto store the graph efficiently.The third phase, querying, is the chief novel con-tribution, and is described below.2.2 Regular expressionsThe power behind FreeNet lies in the user's ability tocompose primitive relations to build more complexrelations that it may use in its queries.The primary mechanism for building complex re-lations is the regular expression over the alphabetof relation names.
Just as a regular expression overASCII characters pecifies a regular set of stringsrecursively in terms of other sets, so too can a reg-ular expression over relation names pecify a set ofordered pairs recursively in terms of other sets andvarious operators.The following rammar specifies allowable regularexpressions in FreeNet.regexp "<re1> ( re la t ion  name)I (regexp) (parenthesization)regexp regexp (concatenation)regexp J regexp (union)regexpk regexp (conjunction)regexp, ( t ransi t ive closure)regexp' (inverse)regexp- (complement)regexpX (sibling)These regexp-building operators are described be-low.Concatenat ionThe concatenation perator is used to compose tworelations directly.
The expression r l  r2 denotesthe set of pairs (a,b) such that for some token c,(a,c) E rl and (c,b) E r2.
For example, a net-work implementing a genealogy database might of-fer primitive parent and brother  relations.
In thatcase, the relation denoted by the regular expression{parent brother) is what we know of as the unclerelation.136Con junct ionConjunction takes the intersection of two relations:plainly, the intersection of their respective pair sets.The expression r l  ?
r2 denotes the set of pairs(a, b) such that (a, b) E rl and (a, b) E r2.Supposing that in a lexical semantic net we havethe relations required_by and requi res ,  then asymmetric symbiotic_with relation might be im-plemented as their conjunction.UnionThe union operator is used to join two relations.
Theexpression r l  I r2 denotes the set of pairs (a,b)such that (a,b) E rl or (a,b) E r2.
In an ErdSs-number like application, for example, two authorsmay be "related" if they have coauthored a paper orif one has cited the other.Transit ive closureWe commonly reason about the transitive closureof relations.
The transitive closure operator imple-ments homogeneous reachability--is there a path be-tween the tokens using links only of a certain type?Namely, let r ' l  denote the relation r and r ' i  fori > 1 denote the relation (r r ' ( i -1 ) ) .
Then r*denotes the union of all r ' i  as i ranges from 0 toinfinity.
(Note that since we assume finite relations,this set is always finite.)
In the genealogy example,paxenc* would be what we consider the "ancestor"relation.Inverse, Complement ,  and Sibl ingA few more unary operators are minor conveniencesin building relations.
The inverse operator swapsevery pair: r -  denotes the set of pairs (a,b) suchthat (b.a) E r. Taking the union of a relation withits inverse produces a new relation that is guaranteedto be symmetric.The complement operator produces a set contain-ing all pairs but those in a certain relation, r '  de-notes the set of pairs (a, b) such that (b, a) ~r.
(Thevocabulary is assumed to be fixed after the graph isbuilt, and so the universe is well-defined.
)The sibling operator produces pairs that have incommon their relation with a certain other token.rX denotes the set of pairs (a, b) such that a ~ b andthere exists a c such that (a,c) E r and (b,c) E r.Thus (parent-)~, relation is the genealogical siblingrelation formed by applying the inverse operator andthen the sibling operator to the "parent" relation.NoteA simple structural induction can be used to provethat any relation built from these operators is alsoa relation.
Additional operators to support set ad-dition and subtraction of constant pair sets are alsoavailable.2.3 QueriesQueries in FreeNet are path specifications expressedas a sequence of tokens or token variables with inter-leaved relation regexps.
More precisely, every queryis ofthe form (W <regexp>)* W. where W is either aiI/.i-IIIII-yconstant oken or a variable wi, and <regexp> is aregular expression over relations, as defined above.FreeNet returns a shortest path (or all paths) inthe multigraph that match the query, binding thevariables in the query to concrete tokens.
The out-put includes the names of all of the primitive relationlinks traversed.Queries in the Internet version of FreeNet can takeone of four forms, each parameterized byone or twotokens; but these demonstrate what are expectedto be common queries.
Below, the "ANY" regexpis the union of all available (or selected) primitiverelations.
The comma (", ')  represents the univer-sal relation, linking all pairs of tokens; the commarelation can thus be used in FreeNet queries to im-plement conjunction of clauses.?
Shortest path: This query takes two argumentss and t, and outputs the result of the query"s ANY* t ' .
This finds a shortest path, usingany of the selected relations, between the sourceand the target.?
Fanout: This query takes a single argument sand outputs the result of "s ANY wz".
Thissimply shows all words related in some way tothe source.?
Intersection search: This query takes two ar-guments s and t and outputs the result of"s AI~ wl , t t.tlY wt' .
This is useful forfinding what two tokens "have in common" interms of primitive relationships with other to-kens.
The two relations involved in such a pathneed not be identical.?
Coercion: This query takes two argumentsand t, two relations re l  and re2, and outputsthe result o f "s  rot  wt re2 w2 re t  t".
Thisis useful for a wide variety of constraint-solving,such as, in the lexical semantic net case, punand rhyme generation.2.4 Implementat ion  issuesA FreeNet multigraph is stored sparsely for efficientofltine (disk) access as a list of variable-length ad-jacency lists.
Each element in an adjacency list isa single 32-bit word that describes an arc by com-bining its destination token ID and relation ID; thesource token ID for an arc is implicit in its row.An index of offsets into the list is precomputed andstored together with hash tables for the token andrelation namespaces.
At no point in query process-ing is more than a single line of the list (equivalently,a set of links emanating from the same source node)in memory at once.Graph construct ionA number ofoptimizations in the layout of the multi-graph on disk are essential if arbitrary searches overlarge multigraphs are to be efficient.
Of particu-lar concern is disk seek time, because traversing thegraph entails accessing different rows of the adja-cency list representation i  rapid succession.
Onesimple preprocessing step is to sort each row of the'137representation by the word identifier's row location,so that all of the nodes emanating from a fixed sourcecan be accessed wixth a unidirectional sweep.A trickier concern is the ordering of the rowsthemselves.
We desire to order the rows so that re-lated words tend to appear near each other so thatseek time between them is minimized.
We can for-malize this problem by asking for an ordering thatminimizes the average offset difference between arandomly chosen edge in the multigraph.
This prob-lem is at least as computationally hard as the well-studied, NP-complete bandwidth problem in graphtheory (Papadimitriou, 1076), which is to find a lin-ear ordering of the vertices of a given graph such thatthe maximum difference in the ordering between anytwo adjacent vertices is minimal.
We are studyingapproximation algorithms (Blum et al, to appear)that allow this preprocessing step to be carried outefficiently during database construction.Query ingSupporting arbitrary FreeNet queries that allow thefull range of regular expression operators, is a non-trivial data structures problem, because it is pro-hibitively expensive to add new links with the oc-currence of a new regexp.
Instead, the graph isstatic.
Each relation in the "alphabet" of relationsis converted to an ASCII character, and stock reg-exp .processing software is used to convert each reg-exp m a query to a state machine.
A query is con-verted to a single state machine by concatenatingits constituent regexp state machines, interleaving"constraint points" that enforce the identity of mul-tiple bindings of the same variable.
A dynamic set ofstate IDs and backtrace IDs is associated with eachtoken to support breadth-first search.The query templates above are implementedwithout all this machinery, by simply performingbreadth-first-search on the graph, maintaining a sin-gle backtrace ID for each node, and allowing or pro-hibiting certain relations as specified by the user.Coercion is implemented as a hard-coded path con-straint.3 Lexical FreeNetLexical FreeNet is an instance of FreeNet supportinga range of lexical semantic applications.
It achievesthis by mixing statistically-derived and knowledge-derived relations.TokensThe tokens in Lexical FreeNet are the words thatappear in at least one of the program's various datasources.
This includes over 130,000 words fromthe CMU Pronouncing Dictionary vl.6d (CMU,1997), 160,000 words and multiple-word phrasesfrom WordNet 1.6, and 60,000 words from the broad-cast news transcripts used to train the trigger rela-tion.
The intersection between these three sources issignificant, of course, and in total there are slightlyunder 200,000 distinct tokens, including phrases.mIiIIIIIIIIIIIIIiI(a)TdgJ~3 TRG 3548OO~ynonymt~s  2&9156Ge~g~di~ GEN 26127Jco,~u, co.~uxo~ v~ z~ao~mol  ANT I I10~2pJ~ymm RI~ 4J3~36s~, ,~- s~ ,~o.AmtSntm ANA 91072197598 distUgt ogcm11G :s~ \[G~ ISt~CTRG 3-',44100 I i " SYN Irt3 2491J6, C~N 972- J3qO 12mSI~ 1164 33gO 16~ 12612111i ' COM 330 18oa(b)co.lvAs I~r i~a u l ~ I m n u m.mmmmmm.m mm)mmmmmmmmmm\ [ \ ]  .--m<,m ml~m ml.m m.,i j;:i,i,n.m iml~!
1,J:.I l la ,  m.~m.~'~ .m,m mi,,mm .
:,-%, 91072.Figure h Statistics on the relations in LexicalFreeNet.
(a) The number of links in each relation.
(b) Relation crossover counts.
Each cell reports thenumber of word pairs that exist in both relations.One of the 5 pairs counted in the cell at (ANT, C0M),for example, is (DAY, ~IGh'T).Relat ionsLexical FreeNet includes seven semantic relations,two phonetic relations, and one orthographic rela-tion.
These relations connect the token set withabout seven million links, costing 30 MB of diskspace.
A summary of the relations is shown in Fig-ure 1.
Below we use a bidirectional arrow (.,t-->) toindicate a symmetric relation, and a unidirectionalarrow (==:,) to indicate an assymetric relation.
"Synonym of" (~)This relation is computed by taking, for each syn-onym set (or synset) in all WordNet 1.6 word cat-egories, the cross-product of the synonym set withitself, excluding reflexive links (self-loops).
That isto say, we include all pairs of lexemes in each synsetexcept he links from a lexeme to itself.
Thus we mixdifferent lexeme senses into the same soup, conflat-ing, for example, the noun and verb senses of BIKEin bike ~ bicycle and bike ~=~ pedal.
"Triggers" (~)Trigger pairs are ordered word pairs that co-occursignificantly in data; that is, they are pairs that ap-pear near each other in text more frequently than138would be expected if the words were unrelated.Given a large corpus of text data, we built the as-symetric trigger relation by finding the pairs in thecross-product of the vocabulary that have the high-est average mutual information, as in (Rosenfeld,1994; Beeferman et al, 1997).
Mutual informationis one measure of whether an observed co-occurrenceof two vocabulary words is not due to chance.
Wordpairs with high mutual information are likely to besemantically related in some way.We chose 160 million words of Broadcast Newsdata (LDC, 1997) for this computation, and definedco-occurrence as "occurring within 500 words", ap-proximately the average document length.
We se-lected the top 350,000 trigger pairs from the rank-ing to use in the relation, putting the size of therelation on par with the synonym relation.
1 Someof the top trigger pairs discovered by this procedureare shown in Table 2.
In our implementation welimit the number of trigger links emanating from atoken to the top 50, and prune away links that in-clude any member of a handcoded stopword set thatincludes function words.sLosUnitedWhitePresidentNewhealthcampaignHait ianf i lmsfedcot t r tcareAngelesStatesHouseCl intonYorkcareBushhr ist idefi lmra tesevidenceinsuranceFigure 2: The top six trigger pairs (s,t), rankedby mutual information, in the Lexical FreeNet trig-ger relation, and the 500th through 505th-rankedpairs.
The highest-ranked pairs tend to be distance-one bigram phrases, while the remainder co-occur atgreater distances.
"Special izes" (~:~) and "Genera l i zes"  (~:~g)The specialization relation captures the lexical in-heritance system underlying WordNet nouns (Miller,1990) and verbs (Fellbaum, 1990).
It is computedby taking, for each pair of WordNet synsets that ap-pear as parent and child in the WordNet hyponymtrees, the cross-product of the pair.
For example,shoe ~ footrest .The generalization relation is simply the inverseof specialization relation, or SPC-.
For example:tree ~ cypress.I We used the Trigger Toolkit, available athttp : / /v~.
cs .
cmu.
edu/ aberger/softeare, h~l ,  forthis computationIIIiIIIIIIIIIIIIiI"Par t  of" ( :~)  and "Comprises" (~, )PAR The ==?, relation captures meronomy, another in-heritance system which can informally be thoughtof as a "part of" tree over nouns.
It is computedby taking, for each pair of WordNet synsets that arerelated in WordNet by the meronym relation, thecross-product of the pair.
For example, shoe =~gfootwear.
The "comprises" relation is simply itsCOb!
inverse, PAR-, as in t ree ==~ cypress.
"Antonym of" (~=~)The antonym relation uses the antonym relation de-fined in WordNet for nouns, verbs, adjectives, andadverbs.
It is computed by taking, for each pair ofWordNet synsets that are related in WordNet by theantonym relation, the cross-product of the pair.
Forexample, clear ~ opaque.
"Phonetical ly similar to" (qs~) and"Rhymes with" (a,_~.
)To allow users to cross the dimensions of sound andmeaning in their queries, two phonetic relations areadded to the mix in Lexical FreeNet.
These rela-tions, while amusing for shortest path queries, arenot expected to contribute to the text processingapplications discussed later in this paper.
Both re-lations leverage the phonetic and lexical stress tran-scriptions in the CMU Pronouncing Dictionary.The ~ relation is computed by adding everypair of words in the vocabulary that have pronunci-ations which differ in edit distance by at most somenumber of edits.
Edit distance is computed us-ing a dynamic programming algorithm as the mini-mum number of substitutions, insertions, and dele-tions (unweighted, and blind to nearness in substitu-tion) to the first word's phonetic sequence requiredto reach the second word's phonetic sequence.
Inour current implementation we limit the relation topairs with edit distance at most 1, e.g.
cancelcandle.The ~:~ relation is computed by adding each pairof words that have pronunciations such that theirphonetic suffixes including and following the primaryan,( stressed syllables match, e.g.
Reno ~ Casino.
"Anagram of" (~:~:~)AN The final relation, ~:~, is almost, but not quite,completely useless, symmetrically linking lexemesthat use the same distribution of letters, as inANA Geraldine ?=~ realigned.
This is perhaps bestdescribed as a "wormhole" in lexical space.ExtensionsA portion of the wealth of WordNet was discardedin Lexical FreeNet--the verb entailment relation, forinstance.
Adjectives are somewhat slighted by thesystem, as their WordNet description in terms ofbipolar attributes (Gross and Miller, 1990) is largelyignored.Other possible semantic relations include the morespecialized knowledge-engineered links that appear139in typically narrow-coverage s mantic nets, such as"acts on", "uses", "stronger than", and the like.Data-driven approaches to relation induction thatdig deeper than the collocation extraction of the trig-ger computation may prove useful and interesting.One approach (Richardson, 1997; Richardson et al,1993) bootstraps a parser to induce many uncon-ventional semantic relations from dictionary data.
Alink grammar (Sleator and Temperley, 1991) appliedto data can conceivably be used to extract some in-teresting relations that live at the syntax/semanticsinterface.4 Lex ica l  d i scoveryA World Wide Web interface to Lexical FreeNet,depicted in Figure 3, is available and has become apopular online resource since its release in late Jan-uary, 1998.:.
The program allows the user to issueone of the four template queries to the database doscribed in Section 2.3.
One of these query templates("Fanout") requires only a single source token as in-put, and this has become a popular lookup tool, pro-viding some of the functionality of a thesaurus andrhyming dictionary.
The other query functions re-quire source and target tokens to be specified.
Eachtoken can itself contain spaces in the case of phrasalinputs, which are normalized to the underscore char-acter in processing.
The four basic queries allow theuser to specify a subset of the ten primitives rela-tions to permit in the output paths by clicking aseries of checkboxes.
Upon submission, the stateof the checkboxes sets the ANY relation to be theunion of checked relations.An additional "Spell check" query mode allowsthe user to find database tokens that have similar (orexact) spelling to a given input token, where simi-larity is measured by an orthographic edit distance.Upon submission, the system finds and displaysthe path or paths resulting from the query witharrow glyphs representing the various relations.Queries typically finish within an acceptable timewindow of three to ten seconds.
The results screensummarizes the query and allows the user to re-submit it with modifications, improving the ease ofdatabase "navigation" over having to return to thetitle screen.Feedback from the Web site indicates that the sys-tem has been used as an aid in writing poetry andlyrics; devising product names; generating puzzlesfor elementary school language arts classes; writ-ing greeting cards; devising insults and compliments;and, above all, just exploring.
Following are selectedexamples of the system's output in various configu-rations.Shortest path queriesThe shortest path query is the primary vehicle for es-tablishing connections between words and concepts:?
Shortest path queries that allow all lexical re-lations can be used to aid in generating puns2See http: / /~w.
l ink.cs.cmu.edu/ lexfn/IIL=xical FreeNetLee  ~ 'm I~ ~ me e~:e~I '---~- I-'F"----~,--~------,-, -Figure 3: The front page of the Web interface toLexical FreeNetand quips involving the two endpoint concepts.For example, below is the shortest path betweenClinton and Lewinsky using all relations:CLINTON ~ HOUSE ~ CABINKACZYNSKI ~:~ LEWINSKY?
Shortest path queries allowing only the hypon-omy relations can connect any two nouns inthe WordNet hyponymy tree through their leastcommon ancestor.
For example, animals can beconnected taxonomically, asin the shortest pathbetween porto and langur using only the spe-cialization ( :~)  and generalization (~:~) andrelations:POTT0 ~ LEMUR ~ PRIMATE ~ MONKEYOLD_WORLD_MONKEY :~ LANGUR?
Shortest path queries allowing only the meron-omy relations can connect many noun pairs.For example, geographical connections can bemade between place names to find the largestenclosing region, as in the shortest path betweenSaskatoon and Winnipeg using only the com-prise (~::~) and part-of (=~;) relations:SASKAT00N ~ SASKATCHENAN ~ CANADAMANITOBA ~ WINNIPEG?
It is counter-intuitive but true that most com-mon words can be connected using only the syn-onym relation (~*::~).
This demonstrates thehigh degree of polysemy exhibited by familiarwords.
Consider the shortest synonym path be-tween one and zero.
a computer scientist's fa-vorite antonym pair.
Every successive word pairexhibits a different sense:140ZERO ~ CIPHER ~=~ CALCULATE SYNDIRECT ~ LEAD ~ STAR <~ ACE <~ ONE* Using only the trigger (~=~) relation, one canconnect concepts that occur in the domain ofthe data used to train the trigger pairs, in thiscase broadcast news:TRG SMOKING ~ CIGARETTES ~ MACHINESCOMPUTERS?
The trigger relation enriches the WordNet-derived vocabulary of common ouns with topi-cal proper names, as in the shortest paths shownbelow.
Trigger pairs are often expressible interms of a sequence of one or more WordNet-derived relations.
In many cases, however,news-based triggers defy any fixed set of hand-coded lexical relations.TRO TITANIC ~:~ SANK ~:~ SHIP ~ VALDEZCOFFEETRG NADER ~ REGULATIONSENVIRONMENTAL ~ GOREFALWELL ~ CHRISTIANCONSERVATIVE ~ GINGRICH?
But when the WordNet-derived semantic rela-tions are permitted in addition to the triggerrelation, shortest paths become shorter, over-coming the inherent limitations of the data-derived triggers.
In the case below, the pair(relativity, phys ics)  did not occur suffi-ciently often in training data for the pair tomake the grade as a trigger.EINSTEIN ~ RELATIVITY ~ PHYSICSVELOCITY ~ SPEED_OF.LIGHT?
For amusement, the phonetic relations, rhymes-with (~=~) and sounds-like (,~:~), can be usedalone to produce "word ladders" of sequentiallysimilar words, as in the example below.
In com-bination with the semantic relations, the pho-netic relations can aid in creating rhymed po-etry and puns.IFE NINE sPINE sPOONIn tersect ion queriesIntersection queries can be used in Lexical FreeNetto find the set of concepts and words that two inputsboth directly relate to in some way.
We use thenotation (wl =~,  w.~ =~)w3 to mean that "wl isrelated to w3 by relation rt, and w~.
is related to w3by relation r~.?
For concrete nouns, the results are often ex-pected but sometimes subtle:(FROG ~.TURTLE ~:~.)
PONDII!
(0aANGE TRO ==~, APPLE JUICE(BANANA ~,  ONION ~)  PEEL(BOOK ~,  TELEVISION ~)  STORY(TREE 5 ,  TOOTH CRO* Triggers can be a useful tool for discoveringwhat two names in the news have in common,or two names in history:(STARR ~,  MCDOUGAL ~:~:~) WEtITEVATER(CHURCHILL r.o T.O :==:~, STALIN =:::~)HITLER, ROOSEVELT, TRUMAN, POTSDAM?
In some cases, identification questions can beformulated as intersection queries.
For exam-ple, "What's the name of that congresswomanfrom Colorado I'm always hearing about?"
canbe asked as an intersection query with argu-ments (congressvoman, Colorado).
"What'sthe capital of the state of Nebraska?"
can beasked as an intersection query with arguments(Nebraska, state_capital):(COLORADO ~=~, CONGRESSWOHAN :~:~:~)SCHROF..DEE(NEBRASKA coM =*., STAT'~._CAPITAL :Z~:~) LINCOLNRhyme coercion queriesThe phonetic relations in Lexical FreeNet are par-ticularly useful for finding rhyming words with cer-tain target meanings.
The coercion function on theWeb interface is hardcoded such that the relationret  (see Section 2.3) is simply the union of all se-mantic relations, and re2 is the union of all phoneticrelations.
Thus, given two endpoint words (wt, w.,),the system tries to find words (w~, w'), with respec-tively related meanings, that rhyme or sound alike.For example, if you wanted to write a poem aboutpetting a lion, you might do a coercion query withthe words Couch and lion.
Amongst a few oth-ers, you'll get back the suggestions (RUB, CUB), sinceTOUCH ~ RUB and LION ~ CUB; and (PAT, CAT),since TOUCH ~ PAT and LION ~ CAT.
Most rhymecoercion queries to the online system have producedat least one result in this manner.5 Conc lus ionWe have introduced a database system calledFreeNet that facilitates the description and explo-ration finite binary relations, and also an instanceof the system called Lexical FreeNet hat supports arange of lexical semantic applications.
The programhas proven itself to be a useful and entertaining re-source for lexical discovery by lnternet users.
Wehope to employ the system as a common algorithmiccore for three text processing applications as well~segmentation, summarization, and information ex-traction.141AcknowledgmentsThe author thanks Michael Turniansky for earlyfeedback on this work; Adam Berger for developingthe Trigger Toolkit; Carl Burch for help with thephonetic and orthographic edit distance functions;Bob Harper and John Lafferty for useful discussions;and the many users of the World Wide Web inter-face who have provided entertaining feedback on thesystem.ReferencesD.
Beeferman, A. Berger, and J. Lafferty.
1997.
Amodel of lexical attraction and repulsion.
In Pro-ceedings of the ACL, Madrid, Spain.A.
Blum, G. Konjevod, R. Ravi, and S. Vempala.to appear.
Semi-definite relaxations for minimumbandwidth and other vertex-ordering problems.In Proc.
of the 30th A CM Symposium on the The-ory of Computing, pages 95-100.CMU.
1997.
Carnegie Mellon Univer-sity Pronouncing Dictionary v0.6d.http://www.speech.cs.cmu .ed /cgi- bin/cmudict.C.
Fellbaum.
1990.
English verbs as a semantic net.International Journal of Lezzcography, 3 4:278-301.D.
Gross and K. Miller.
1990.
Adjectives inWordNet.
International Journal of Le~cography,3,4:265-277.LDC.
1997.
DARPA Continuous Speech Recogni-tion Corpus-IV: Radio Broadcast News (CSRIVHub-4).
http://morph.ldc.upenn.edu/.G.
Miller.
1990.
Nouns in WordNet: a lexical inher-itance system.
International Journal of Lexicog-raphy, 3,4:245-264.C.
Papadimitriou.
1976.
The NP-completeness ofthe bandwidth minimization problem.
Comput-ing, 16:263-270.S.
Richardson, L. Vanderwende, and W. Dolan.1993.
Combining dictionary-based and example-based methods for natural language analysis.
InProc.
Fifth International Conference on Theoret-ical and Methodological Issues in Machine Trans-lation, pages 69-79.S.
Richardson.
1997.
Determinin9 Similarity andIn\[erring Relations in a Lezical Knowledge Base.Ph.D.
thesis, The City University of New York.R.
Rosenfeld.
1994.
Adaptive Statistical LanguageModeling: a Maximum Entropy Approach.
Ph.D.thesis, Carnegie Mellon University, April.D.
Sleator and D. Temperley.
1991.
Parsing Englishwith a link grammar.
Technical Report CMU-CS-91-196, School of Computer Science, CarnegieMellon University.
