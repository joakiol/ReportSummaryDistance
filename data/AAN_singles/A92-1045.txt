Multi-Purpose Development and OperationEnvironmentsfor Natural Language ApplicationsSergei Nirenburg, Peter Shell, Ariel Cohen, PeterCousseau, Dean Grannes and Chris McNeillyCenter for Machine TranslationCarnegie Mellon UniversityPittsburgh, PA 15213{sergei, pshell, arik, cousseau, grannes,mcneilly}@cs.cmu.edu1 IntroductionInteractive user environments have been a central efficiency-enhancing feature of many modem computer applications,including natural anguage processing.
There are two ma-jor classes of users for whom NLP environments can beconstructed - - developers and end users, such as technicalwriters and translators.
Developers need help in the variousknowledge acquisition tasks, such as dictionary and grammarwriting for NLP applications.
End users look for efficiencyenhancements in document preparation beyond the level ofword processing support.
There are two approaches to thesolution of this problem.
A dedicated workstation can be de-veloped for each of the required functionalities.
Alternatively,workstations can be configured as sets of application routinesattached to a universal user interface.In this report we describe a general-purpose user environ-ment, under development a  the Center for Machine Transla-tion of Carnegie Mellon University, capable of supporting anumber of dedicated workstation configurations.
Among thetypes of end users whom this system will benefit are techni-cal writers, text revisors and translators.
In the frameworkof NLP system development this tool supports dictionary andontology acquisition.A number of separate functionalities included in this systemhave been developed and used either in commercial word pro-cessing software packages or in NLP projects (e.g., the transla-tor's tools described in Macklovitch, 1989, ;and the developerenvironments IRACQ (Ayuso et al, 1987), LUKE (Wrob-iewski and Rich, 1988) or ONTOS (Monarch and Nirenburg,1989), among many others).
Our system allows a merge ofthe two directions in the tool development.
One direct reasonto put the two previously separate kinds of functionality into asingle system was to support he knowledge-based machine-aided translation environment which involves an interactivehuman editor who uses an interface to help the machine un-derstand the source text.A standard Unix- and X-windows-based workstation plat-form has been selected for our system, whose working nameis Tws, for "Translator's Workstation."
We also used theC-based X11 toolkit called MOTIF (Motif, 1991) and its Com-monLisp interface called CLM (Babatz et.
al., 1991).
In prac-tice, TWS consists of a number of application (functionality)modules which are integrated through the central MOTIF-baseduser interface module.
For reasons of uniformity, each of theapplications uses the facilities of the user interface for displayand input.
Each module uses a standard window to interactwith the user, and each window has standard menus which,among other functionalities, allow the user to invoke any othermodule.
Each module also has special menus.The architecture of TWS is presented inFigure 1.. .
.Addit ionad \]Modu les  \]\ "  j. "
/?I TWS BACKBONEUI Toolkit (menus, global lex'l-rlng, tic)I~ Statistlcal~ Interface JIC ?N ?S )Grapherutihty J/" F~rne-Figure 1" TWS architecture.
The system was designed tomake it easy to plug new modules into TWS.We illustrate the basic interface and several application util-ities that have been connected to the TWS.
Specifically, weillustrate the text editor (an end-user functionality), the utilityfor statistical processing of corpora (useful both for end usersand for developers) and the ontology acquisition and mainte-nance tool, based on ONTOS (a developer functionality).Due to the lack of space, we do not describe our interface toreference sources, such as online dictionaries or user-definedglossaries, or our interface-building interface which allowsboth the TWS developer and TWS user define and modify theuser interfaces the system uses.TWS is designed in such a way that various utilities can beimported into the system, so that there is no need to imple-ment every functionality locally.
One example of an existingimported module in TWS is a set of bilingual text alignmentroutines.
The concept of importing utilities is very importantto our work.
The user interface facilities of the kind we de-veloped makes it easy to import applications with a minimumof effort and with a capability of making them "look and feel"similarly to the rest of the applications in the system.
In ourfuture work we intend to mix the development of utilities withimporting and integrating existing applications, whenever thatis desirable and feasible.Figure 2 shows a basic editing window of TWS.
The centralfeature of the TWS editor is its capability to emulate variousexisting word processors.
This feature is important from thestandpoint of acceptance of the workstation environments byTM end users.
Currently the editor emulates WORD PERFECI"and EMACS.Figure 3 illustrates the corpus processing functionality.
Itcan be used by end users to compare the usage of a term invarious places in a set of documents and by the developer togain insights for dictionary and ontology acquisition.255.~  r i i~.~lu i .
of th .
vsr le t  of uI@i for th l i  I~ r I l .~  do im gr ind,  vsr l l t lID#t~!
IO l ld  I ta t@ p i ~ I  M I d l f f l r i l  I t r I  11  ~Ul t l  i c l r~ l t l. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
'J ,n t~ .
.
.
.
.
.
.
.
.
.
.
t .
I I. .
.
.
.
~ .
.
.
.
.
.
.
.
.
.
.
.
.
.
.  '
.
.
.
.
.
.
I l , "  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
I It ra i t  C~t~z) .
I I~r l t l  pour  l ' l  l i c i t l y .in t ,~grk l ) .. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
I .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
I ~Ith  ~y p l r t l~ l l r  tn l ta l la t l~ ,  i l l g l i  a l~ l i~  l v~ ~ l  ~l l~-Br~I ty  ~ y  ?~t  i l l~  ln l t s l l l t l~  psr t t~ l i i r~ ,  i i  co I Ip i~a i .
r i l~ l ib l l i l~  or  l l l b l l l t  i fo r  i c t~ i I  &l l l -~ \ ]  m n l  ~t  ps i  i t r@ g~iI I .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
ISFigure 2: The TWS EDITOR Window.
The source and targettexts can be aligned paragraph by paragraph.
The windowscan be scrolled in parallel.
/ /.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
-,11a i t f f~  Ur i :  ~ hnn.
ds~l t  ~ i~st ,~ ~s .
~ssw Mut ts  ~:1 k l l f f .
I  ~ Hill~li Ptm ~t(~??
i~ ,mdem.
~ inahv i~ l l t r?o~i l t ,~ab l" \ ] ' -  .
.
.
.
.
.
.
.
.
.
I .
.
.
.
.
1Figure 3: A Word-Frequency Window.
The sub-window onthe left shows frequency counts for each word in the chosentext, while the right sub-window shows the context of selectedwords.A detailed discussion of the ONTOS system see inMonarch, 1989, Carlson and Nirenburg, 1991.
To includethe ONTOS functionality into TWS, a new grapher has beenbuilt.
The grapher facilitates browsing through, editing, cre-ating and deleting frames.
An important feature is its abilityto handle graphs rather than trees, so that multiple inheri-tance can be graphically represented.
The ONTOS moduleinside TWS also supports a structured editor for manipulatingontological concepts ymbolically.JFigure 4: A sample ontology.
The user may dynamicallyselect portions of the ontology to display.We believe that the TWS GRAPHER compares favorably withother graphers, notably the AGGREGRAPHS (See Dannenberget.
al., 1991) which is part of the GARNET system and the ISIGRAPHER (see Robins, 1988).
Unlike AGGREGRAPHS, whichcan only display a knowledge base, our grapher lets the useredit it.
As for the ISI GRAPHER, the latter cannot easily supportmore than one type of link between odes, while the I~/sgrapher can support an unlimited number of links, as well asvalidity and consistency tests for them.2 Conc lus ionsOur work on TWS is continuing.
At the time of this writing,several additional functionalities are being developed, includ-ing a machine-tractable lexicon acquisition module and a userinterface system for a machine-aided translation environment,a descendent of the augmentor module of the KBMT-89 MTsystem (Brown, 1991).
On the end-user side, a general textalignment facility is being developed, which will support thework of mono- and multilingual document revisors by pin-pointing the differences among different versions of a docu-ment.ReferencesAyuso, D., V. Shaked and R. Weischedel.
1987.
An Envi-ronment for Acquiring Semantic Information.
Proceedings ofAnnual Meeting of ACL.
Stanford, CA.Babatz, R., A.
Backer, C. Beilkeu, T. Berlage, and M. Spenke.1991.
CLM - -  A Language Binding for Common Lisp andOSF/Motif User Guide and Reference Manual Version 2.0,Technical report, German National Research Center for Com-puter Science.Bass, L., B. Clapper, E. Hardy, R. Kazman and R. Seacord.1990.
Serpent: A User Interface Management System.
Pro-ceedings of the Winter 1990 USENIX Conference.Brown, R. 1991.
Augmentation.
In: K. Goodman and S.Nirenburg (eds.)
KBMT-89: A Case Study in Knowledge-Based Machine Translation.
San Mateo, CA: Morgan Kauf-mann.Carlson, L. and S. Nirenburg.
1991.
World Modeling forNLP.
CMU-CMT Technical Report.Dannenberg, R. B., Marchal, P., Kosbie, D., Mickish, A. andLoyall, A.
B.
1991.
Aggregadgets & Aggrelists ReferenceManual.
Technical Report, Department ofComputer Science,Carnegie Mellon University.Macklovitch, E. 1989.
An Off-the-Shelf Workstation forTranslators.
Proceedings of the 30th American TranslatorsConference, Washington, D.C.Monarch, I.
1989.
ONTOS: Reference Manual, Technical re-port, Center for Machine Translation, Carnegie-Mellon Uni-versity.Myers, B., Giuse, D., Dannenberg, R., Zanden, B., Kosbie,D., Pervin, E., Mickish, A., Marchal, P., 1990.
Garnet: Com-prehensive Support for Graphical, Highly-Interactive UserInterfaces.
IEEE Computer, Vol.
23, number 11.Robins, G. The ISI Grapher Manual.
1988.
Technical Report,ISI, University of Southern California.Wroblewski, D.A.
and E.A.
Rich.
1988.
Luke: An Experi-ment in the Early Integration of Natural Language Processing.Proceedings of Second Conference on Applied Natural Lan-guage Processing.
Austin, TX.256
