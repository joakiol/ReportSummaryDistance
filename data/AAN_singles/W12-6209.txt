Proceedings of the 10th International Workshop on Finite State Methods and Natural Language Processing, pages 50?54,Donostia?San Sebastia?n, July 23?25, 2012. c?2012 Association for Computational LinguisticsKleene, a Free and Open-Source Languagefor Finite-State ProgrammingKenneth R. BeesleySAP Labs, LLCP.O.
Box 540475North Salt Lake, UT 84054USAken.beesley@sap.comAbstractKleene is a high-level programming language,based on the OpenFst library, for constructingand manipulating finite-state acceptors andtransducers.
Users can program using reg-ular expressions, alternation-rule syntax andright-linear phrase-structure grammars; andKleene provides variables, lists, functions andfamiliar program-control syntax.
Kleene hasbeen approved by SAP AG for release as free,open-source code under the Apache License,Version 2.0, and will be available by Au-gust 2012 for downloading from http://www.kleene-lang.org.
The design, im-plementation, development status and futureplans for the language are discussed.1 IntroductionKleene1 is a finite-state programming language inthe tradition of the AT&T Lextools (Roark andSproat, 2007),2 the SFST-PL language (Schmid,2005),3 the Xerox/PARC finite-state toolkit (Beesleyand Karttunen, 2003)4 and FOMA (Hulde?n, 2009b),5all of which provide higher-level programming for-malisms built on top of low-level finite-state li-braries.
Kleene itself is built on the OpenFst library1Kleene is named after American mathematician StephenCole Kleene (1909?1994), who investigated the properties ofregular sets and invented the metalanguage of regular expres-sions.2http://www.research.att.com/?alb/lextools/3http://www.ims.uni-stuttgart.de/projekte/gramotron/SOFTWARE/SFST.html4http://www.fsmbook.com5http://code.google.com/p/foma/(Allauzen et al, 2007),6 developed by Google Labsand NYU?s Courant Institute.The design and implementation of the lan-guage were motivated by three main principles,summarized as Syntax Matters, Licensing Mattersand Open Source Matters.
As for the syntax,Kleene allows programmers to specify weightedor unweighted finite-state machines (FSMs)?including acceptors that encode regular languagesand two-projection transducers that encode regu-lar relations?using regular expressions, alternation-rule syntax and right-linear phrase-structure gram-mars.
The regular-expression operators are bor-rowed, as far as possible, from familiar Perl-likeand academic regular expressions, and the alterna-tion rules are based on the ?rewrite rules?
made pop-ular by Chomsky and Halle (Chomsky and Halle,1968).
Borrowing from general-purpose program-ming languages, Kleene also provides variables, listsand functions, plus nested code blocks and familiarcontrol structures such as if-else statements andwhile loops.As for the licensing, Kleene, like the OpenFst li-brary, is released under the Apache License, Version2.0, and its other dependencies are also released un-der this and similar permissive licenses that allowcommercial usage.
In contrast, many notable finite-state implementations, released under the GPL andsimilar licenses, are restricted to academic and othernon-commercial use.
The Kleene code is also open-source, allowing users to examine, correct, augmentand even adopt the code if the project should ever beabandoned by its original maintainer(s).6http://www.openfst.org50It is hoped that Kleene will provide an attractivedevelopment environment for experts and students.Pre-edited Kleene scripts can be run from the com-mand line, but a graphical user interface is also pro-vided for interactive learning, programming, testingand drawing of FSMs.Like comparable implementations of finite-statemachines, Kleene can be used to implement a vari-ety of useful applications, including spell-checkingand -correction, phonetic modeling, morphologicalanalysis and generation, and various kinds of pat-tern matching.
The paper continues with a brief de-scription the Kleene language, the current state ofdevelopment, and plans for the future.2 ImplementationThe Java-language Kleene parser, implemented withJavaCC and JJTree (Copeland, 2007),7 is Unicode-capable and portable.
Successfully parsed state-ments are reduced to abstract syntax trees (ASTs),which are interpreted by calling C++ functions in theOpenFst library via the Java Native Interface (JNI).3 Kleene Syntax3.1 Regular ExpressionsBasic assignment statements have a regular expres-sion on the right-hand side, as shown in Table 1.
Asin Perl regular expressions, simple alphabetic char-acters are literal, and concatenation is indicated byjuxtaposition, with no overt operator.
Parenthesescan be used to group expressions.
The postfixed *(the ?Kleene star?
), + (the ?Kleene plus?
), and ?
de-note zero-or-more, one-or-more, and optionality, re-spectively.
Square-bracketed expressions have theirown internal syntax to denote character sets, includ-ing character ranges such as [A-Z].
The union op-erator is |.
Basic regular operations missing fromPerl regular expressions include composition (?
or_o_), crossproduct (:), language intersection (&),language negation (?)
and language subtraction (-).Weights are indicated inside angle brackets, e.g.<0.1>.Special characters can be literalized with a pre-ceding backslash or inside double quotes, e.g.
\* or"*" denotes a literal asterisk rather than the Kleene7https://javacc.dev.java.netplus.
To improve the readability of expressions,spaces are not significant, unless they appear insidesquare brackets or are explicitly literalized insidedouble quotes or with a preceding backslash.In a language like Kleene where alphabetic sym-bols are literal, and the expression dog denotes threeliteral symbols, d, o and g, concatenated together,there must be a way to distinguish variable namesfrom simple concatenations.
The Kleene solution isto prefix variable names that are bound to FSM val-ues with a dollar-sign sigil, e.g.
$myvar.
Oncedefined, a variable name can be used inside subse-quent regular expressions, as in the following ex-ample, which models a fragment of Esperanto verbmorphology.$vroot = don | dir | pens | ir ;// "give", "say", "think", "go"$aspect = ad ;// optional repeated aspect$vend = as | is | os | us | u | i ;// pres, past, fut, cond, subj, inf$verbs = $vroot $aspect?
$vend ;// use of pre-defined variablesSimilarly, names of functions that return FSMs aredistinguished with the $?
sigil.
To denote less com-mon operations, rather than inventing and prolifer-ating new and arguably cryptic regular-expressionoperators, Kleene provides a set of predefined func-tions including$?reverse(regexp)$?invert(regexp)$?inputProj(regexp)$?outputProj(regexp)$?contains(regexp)$?ignore(regexp, regexp)$?copy(regexp)Users can also define their own functions, and func-tion calls are regular expressions that can appear asoperands inside larger regular expressions.3.2 Alternation-Rule SyntaxKleene provides a variety of alternation-rule types,comparable to Xerox/PARC Replace Rules (Beesleyand Karttunen, 2003, pp.
130?82), but implementedusing algorithms by Ma?ns Hulde?n (Hulde?n, 2009a).51$var = dog ;$var = d o g ; // equivalent to dog$var = ?
( a+ b* c? )
;$var = \?
\+ \* \?
; // literalized special characters$var = "?+*?
"; // literalized characters inside double quotes$var = "dog" ; // unnecessary literalization, equivalent to dog$myvar = (dog | cat | horse) s?
;$yourvar = [A-Za-z] [A-Za-z0-9]* ;$hisvar = ([A-Za-z]-[aeiouAEIOU])+ ;$hervar = (bird|cow|elephant|pig) & (pig|ant|bird) ;$ourvar = (dog):(chien) ?
(chien):(Hund) ;$theirvar = [a-z]+ ( a <0.91629> | b <0.1> ) ; // weights in bracketsTable 1: Kleene Regular-Expression Assignment Examples.input-expression -> output-expression / left-context _ right-contextTable 2: The Simplest Kleene Alternation-Rule Template.The simplest rules have the template shown in Ta-ble 2, and are interpreted into transducers that mapthe input to the output in the specified context.
Suchrules, which cannot be reviewed in detail here, arecommonly used to model phonetic and orthographi-cal alternations.3.3 Right-Linear Phrase Structure GrammarsWhile regular expressions are formally capable ofdescribing any regular language or regular relation,some linguistic phenomena?especially productivemorphological compounding and derivation?canbe awkward to describe this way.
Kleene thereforeprovides right-linear phrase-structure grammars thatare similar in semantics, if not in syntax, to the Xe-rox/PARC lexc language (Beesley and Karttunen,2003, pp.
203?78).A Kleene phrase-structure grammar is defined asa set of productions, each assigned to a variable witha $> sigil.
Productions may include right-linear ref-erences to themselves or to other productions, whichmight not yet be defined.
The productions are parsedimmediately but are not evaluated until the entiregrammar is built into an FSM via a call to the built-infunction $?start(), which takes one productionvariable as its argument and treats it as the startingproduction of the whole grammar.
The followingexample models a fragment of Esperanto noun mor-photactics, including noun-root compounding.$>Root = (kat | hund | elefant | dom)( $>Root | $>AugDim ) ;$>AugDim = ( eg | et )?
$>Noun ;$>Noun = o $>Plur ;$>Plur = j?
$>Case ;$>Case = n?
;$net = $?start($>Root) ;The syntax on the right-hand side of productions isidentical to the regular-expression syntax, but allow-ing right-linear references to productions of the form$>Name.4 Kleene FSMsEach Kleene finite-state machine consists of a stan-dard OpenFst FSM, under the default TropicalSemiring, wrapped with a Java object8 that storesthe private alphabet9 of each machine.In Kleene, it is not necessary or possible to de-clare the characters being used; characters appearingin regular expressions, alternation rules and right-linear phrase-structure grammars are stored auto-matically as FSM arc labels using their Unicode8Each Java object of the class Fst contains a long integerfield that stores a pointer to the OpenFst machine, which actu-ally resides in OpenFst?s C++ memory space.9The alphabet, sometimes known as the sigma, contains justthe symbols that appear explicitly in the labels of the FSM.52code point value, and this includes Unicode sup-plementary characters.
Programmer-defined multi-character symbols, represented in the syntax withsurrounding single quotes, e.g.
'+Noun' and'+Verb', or, using another common convention,'[Noun]' and '[Verb]', also need no declara-tion and are automatically stored using code pointvalues taken from a Unicode Private Use Area.The dot (.)
denotes any character, and it translatesnon-trivially into reserved arc labels that representOTHER (i.e.
unknown) characters.105 Status5.1 Currently WorkingAs of the date of writing, Kleene is an advanced betaproject offering the following:?
Compilation of regular expressions, right-linear phrase-structure grammars, and severalalternation-rule variations into FSMs.?
Robust handling of Unicode, including sup-plementary characters, plus support for user-defined multi-character symbols.?
Variables and maintenance of symbol tables ina frame-based environment.?
Pre-defined and user-defined functions.?
Handling of lists of FSMs, iteration over lists,and functions that handle and return lists.?
A graphical user interface, including tools todraw FSMs and test them manually.?
File I/O of FSMs in an XML format.?
Interpretation of arithmetic expressions,arithmetic variables and functions, includingboolean functions; and if-then statementsand while loops that use boolean operatorsand functions.10The treatment of FSM-specific alphabets and the handlingof OTHER characters is modeled on the Xerox/PARC implemen-tation (Beesley and Karttunen, 2003, pp.
56?60).5.2 Future WorkThe work remaining to be done includes:?
Completion of the implementation ofalternation-rule variations.?
Writing of runtime code and APIs to applyFSMs to input and return output.?
Conversion of FSMs into stand-alone exe-cutable code, initially in Java and C++.?
Expansion to handle semirings other than thedefault Tropical Semiring of OpenFst.?
Testing in non-trivial applications to determinememory usage and performance.6 History and LicensingKleene was begun informally in late 2006, becamepart of a company project in 2008, and was underdevelopment until early 2011, when the project wascanceled.
On 4 May 2012, SAP AG released Kleeneas free, open-source code under the Apache License,Version 2.0.11The Kleene source code will be repackaged ac-cording to Apache standards and made available fordownload by August of 2012 at http://www.kleene-lang.org.
A user manual, currentlyover 100 pages, and an engineering manual will alsobe released.
Precompiled versions will be providedfor Linux, OS X and, if possible, Windows.AcknowledgmentsSincere thanks are due to the OpenFst team andall who made that library available.
A special per-sonal thanks goes to Ma?ns Hulde?n, who graciouslyreleased his algorithms for interpreting alternationrules and language-restriction expressions, and whowent to great lengths to help me understand and re-implement them.
I also acknowledge my SAP Labscolleagues Paola Nieddu and Phil Sours, who con-tributed to the design and implementation of Kleene,and my supervisor Michael Wiesner, who supportedthe open-source release.
Finally, I thank Lauri Kart-tunen, who introduced me to finite-state linguisticsand has always been a good friend and mentor.11http://www.apache.org/licenses/LICENSE-2.0.html53ReferencesCyril Allauzen, Michael Riley, Johan Schalkwyk, Woj-ciech Skut, and Mehryar Mohri.
2007.
OpenFst: Ageneral and efficient weighted finite-state transducerlibrary.
In Proceedings of the Ninth InternationalConference on Implementation and Application of Au-tomata (CIAA 2007), volume 4783 of Lecture Notes inComputer Science, pages 11?23.
Springer.Kenneth R. Beesley and Lauri Karttunen.
2003.
FiniteState Morphology.
CSLI Publications, Palo Alto, CA.Noam Chomsky and Morris Halle.
1968.
The SoundPattern of English.
Harper and Row, New York.Tom Copeland.
2007.
Generating Parsers with JavaCC.Centennial Books, Alexandria, VA.Ma?ns Hulde?n.
2009a.
Finite-State Machine Construc-tion Methods and Algorithms for Phonology and Mor-phology.
Ph.D. thesis, The University of Arizona,Tucson, AZ.Ma?ns Hulde?n.
2009b.
Foma: a finite-state compiler andlibrary.
In Proceedings of the EACL 2009 Demonstra-tions Session, pages 29?32, Athens, Greece.Brian Roark and Richard Sproat.
2007.
Computa-tional Approaches to Morphology and Syntax.
OxfordSurveys in Syntax & Morphology.
Oxford UniversityPress, Oxford.Helmut Schmid.
2005.
A programming language forfinite state transducers.
In FSMNLP?05, Helskinki.54
