Knowledge Structures in UC, the UNIX* ConsultanttDavid N. ChinDivision of Computer ScienceDepartment of EECSUniversity of California, BerkeleyBerkeley, CA.
94720ABSTRACTThe knowledge structures implemented in UC, the UNLXConsultant are sufficient for UC to reply to a large rangeof user queries in the domain of the UNIX operating sys-tem.
This paper describes how these knowledge struc-tures are used in the natural language tasks of parsing,reference, planning, goal detection, and generation, and~ow they are organized to enable efficient access evenwith the large database of an expert system.
The struc-turing of knowledge to provide direct answers to commonqueries and the high usability and efficiency of knowledgestructures allow UC to hold an interactive conversationwith a user.1.
Introduct ionUC is a natural language program that converses inEnglish with users in the domain of the UNIX operatingsystem.
UC provides information on usage of systemutilities, UNIX terminology, and plans for accomplishingspecific tasks in the UNIX environment, all upon directquery by the user.
In order to accomplish these tasks,UC must perforce have a considerable knowledge base, alarge part of which is particular to the UNIX domain.The specific representations u ed in this knowledge baseare essential to the successful operation of UC.
Not onlyare the knowledge structures used in parsing, inference,planning, goal detection, and generation, but also the for-mat of representation must permit the high efficiency inaccess and processing of the knowledge that is required inan interactive system like UC.
This paper describes thedetails of this representation scheme and how it managesto satisfy these goals of usability and efficiency.
Otheraspects of the UC system are described in Arens (1982},Faletti (1982}, Jacobs (1983}, Rau {1983), and Wilenskyand Arens (1980a and b).
An overview of the UC systemcan be found in Wilensky (1982).?
UNIX is Lradem,trk of Bell Labor~.tone$t This research wu sponsored ia part by the O~?e of NavL l  Re~etrcb under coBtrLctN00014-80-C-0732 ~ad the NLt,oa=d Scieace Foaadztiou =ader grant MCSTg-06543.2.
Speeif leations for the Representat ionThe first step in the design of knowledge structuresinvolves determining what forms of knowledge will beneeded.
In this case, the domain of conversation for aUNIX consultant is specific enough that it reduces therange of knowledge structures necessary for the task.Some insight into the kinds of knowledge structures thatare needed can be gleaned from looking at the variety ofquestions which users actually ask.
Since UC is aimed atthe naive user of UNIX, a majority of the queries UCreceives are of the following forms (taken from actual UCsessions}:User: How can \[ change the write protection on my termi-nal?UC: To turn on write permission on your terminal, type'mesg y'.To turn off write permission on your terminal, type'mesg n'.User: What is a search path?UC: A search path in UNIX is a list of directories inwhich the operating system searches for programsto execute.User: Why can't I remove the directory Trap?UC: The directory Trap must he empty before the direc-tory can be deleted.Questions of the first form, asking how to do something,are usually requests for the names and/or usage of UNIXutilities.
The user generally states the goals or resultsthat are desired, or the actions to be performed and thenasks for a specific plan for achieving these wishes.
So torespond to how questions, UC must encode in its data-base a large number of plans for accomplishing desiredresults or equivalently, the knowledge necessary to gen-erate those plans as needed.The second question type is a request for the definition ofcertain UNL~ or general operating systems terminology.Such definitions can be provided easily by canned textualresponses.
However UC generates all of its output.
Theexpression of knowledge in a format that is also useful forgeneration is a much more difficult problem than simplystoring canned answers.In the third type of query, the user describes a situationwhere his expectations have failed to be substantiatedand asks UC to explain why.
Many such queries involve159plans  where preconditions of those plans have beenviolated or steps omitted from the plans.
The job thatUC has is to determine what the user was attempting todo and then to determine whether or not preconditionsmay have been violated or steps left out by the user inthe execution of the plans.Besides the ability to represent all the different forms ofknowledge that might be encountered, knowledge struc-tures should be appropriate to the tasks for which theywill be used.
This means that it should be easy torepresent knowledge, manipulate the knowledge struc-tures, use them in processing, and do all that efficientlyin both time and space.
In UC, these requirements areparticularly hard to meet since the knowledge structuresare used for so many diverse purposes.3.
The ChoiceMany different representation schemes were consideredfor UC.
In the past, expert systems have used relationsin a database (e.g.
the UCC system of Douglass andHegner, 1982), production rules and/or predicate calculus,for knowledge representation.
Although these formatshave their strong points, it was felt that none providedthe flexibility needed for the variety of tasks in UC.Relations in a database are good for large amounts ofdata, but the database query languages which must beused for access to the knowledge are usually poorrepresentation languages.
Production rules encode pro-cedural knowledge in an easy to use format, but do notprovide much help for representing declarativeknowledge.
Predicate calculus provides built-in inferencemechanisms, but do not provide sufficient mechanism forrepresenting the linguistic forms found in naturallanguage.
Also considered were various representationlanguages, in particular KL-one (Schmolze and Brach-man, 1981).
However at the time, these did not seem toprovide facilities for efficient access in very largeknowledge bases.
The final decision was to use a frame-like representation where some of the contents are basedon Schank's conceptual dependencies, and to store theknowledge structures in PEARL  databases (PEARL  is anAI package developed at Berkeley that provides efficientaccess to Lisp representations through hashing mechan-isms, c.f.
Deering, et.
al., 1981 and 1982).4.
The ImplementationBased on Minsky's theory of frames, the knowledge struc-tures in UC are frames which have a slot-filler format.The idea is to store all relevant information about a par-ticular entity together for efficient access.
For examplethe following representation for users has the slots user-id, home-directory, and group which are filled by a user-id, a directory, and a set of group-id's respectively.
(create expanded person user(user-id user-id)(home-directory directory){group setof group-id))In addition, users inherit the slots of person frames suchas a person's name.To see how the knowledge structures are actually used, itis instructive to follow the processing of queries in somedetail.
UC  first parses the English input into an internalrepresentation.
For instance, the query of example one isparsed into a question frame with the single slot, cd,which is filled by a planforframe.
The question asks what is the plan for(represented as a planfor with an unknown method)achieving the result of changing the write protection(mesg state) of a terminal (terminall which is actually aframe that is not shown).
(question(cd (planfor (result (state-change (actor terminall)(state-name mesg)(from unspecified)(to unspecified)))(method *unknown*))))Once the input is parsed, UC which is a data driven pro-gram looks in its data base to find out what to do withthe representation of the input.
An assertion framewould normally result in additions to the database andan Imperative might result in actions (depending on thegoal analysis}.
In this case, when UC sees a question witha planfor where the method is unknown, it looks in itsdatabase for an out-planfor with a query slot thatmatches the result slot of the planfor in the question.This knowledge is encoded associatively in a memory-association frame where the recall-key is the associativecomponent and the cluster slot contains a set of struc-tures which are associated with the structure in therecall-key slot.
(memory-association(recall-key {question(cd (planfor (result ?cone)(method *unknown*))))){cluster ((out-planfor (query ?cone)(plan ?
*any*)))))The purpose of the memory-association frame is to simu-late the process of reminding and to provide very flexiblecontrol flow for UC's data driven processor.
After thequestion activates the memory-association, a new out-pianfor is created and added to working memory.
Thisout-planfor in turn matches and activates the followingknowledge structure in UC's database:(out-planfor (query (state-change (actor terminal)(state-name mesg}(from ?from-state)(to ?to-state)))(plan (output (cd (planfor67 planfor68)))))160The meaning of this out-planfor is that if a query about astate-change involving the mesg state of a terminal isever encountered, then the proper response is the outputframe in the plan slot.
All output frames in UC arepassed to the generator?
The above output frame containsthe planfors numbered 67 and 68:planfor67:(plan for(result (state-change (actor terminal)(state-name mesg)(from off)(to on)))(method(mtrans (actor *user*)(object (command(name mesg)(ar~ (y))(input *stdin*}(output *stdout*)(dia~ostic *stdout*)})(from *user*)(to *Unix*))))This planfor states that a plan for changing the mesgstate of a terminal from on to off is for the user co sendthe command rnes~I to UNIX with the argument "y".Planfor 68 is similar, only with the opposite result andwith argument "n".
In general, UC contains many ofthese planfors which define the purpose (result slot) of aplan (method slot).
The plan is usually a simple com-mand although there are more complex meta plans forconstructing sequences of simple commands uch as mightbe found in a UNIX pipe or in conditionals.In UC, out -p lanfors  represent "compiled" answers in anexpert consultant where the consultant has encountered aparticular query so often that the consultant already hasa rote answer prepared?
Usually the question that is inthe query slot of the out-planfor is similar to the result ofthe planfor that is in the output frame in the plan slot ofthe out-planfor.
However this is not necessarily the case,since the out-planfor may have anything in its plan slot.For example some queries invoke UC's interface withUNIX (due to Margaret Butler} to obtain specific infor-mation for the user.The use of memory-associations and out-planfors in UCprovides a direct association between common userqueries and their solutions.
This direct link enables UCto process commonplace queries quickly.
When UCencounters a query that cannot be handled by the out-planfors, the planning component of UC (PANDORA, c.f.Faletti, 1982) is activated?
The planner component usesthe information in the UC databases to create individual-ized plans for specific user queries.
The description ofthat proems is beyond the scope of this paper.The representation of definitions requires a differentapproach than the above representations for actions andplans.
Here one can take advantage of the practicality ofterminology in a specialized domain such as UNIX.Specifically, objects in the UNIX domain usually havedefinite functions which serve well in the definition of theobject.
In example two, the type declaration of asearch-path includes a use slot for the search-path whichcontains information about the main function of searchpaths.
The following declaration defines a searc : .
-~n asa kind of functional-object with a path slot that containsa set of directories and a ~zse slot which says that searchpaths are used in searching for programs by UNL~.
(create expand'ed functional-object search-path(path setof directory)(use ($search (actor *Unix*)(object program}{location ?search-path)))?
.
.
)Additional information useful in generating a definitioncan be found the slots of a concept's declaration.
Theseslots describe the parts of a concept and are ordered interms of importance.
Thus in the example, the fact tha~a search-path is composed of a set of directories was usedin the definition given in the examples.Other useful information for building definitions i~encoded in the hierarchical structure of concepts in UC.This is not used in the above example since a search-pathis only an expanded version of the theoretical concept,functional-object.
However with other objects such a.~directory, the fact that directory is an expanded versionof a file {a directory is a file which is ,sed to store otherfiles) is actually used in the definition.The third type of query involves failed preconditions ofplans or missing steps in a plan.
In UC the preconditionsof a plan are listed in a preeonds frame.
For instance,in example 3 above, the relevant preconds frame is:(preconds(plan (mtrans (actor *user*)(object (command(name rmdir)(args (?director/name))(input stdin)(output stdout}(diagnostic s~dout)))(from *user*)(to ,Unix*)))(are ((state (actor(all (var ?file)(desc (file))(pred (inside-of(object?directoryname))))})(state-name physical-state)(value non-existing}).
.
)))This states that one of the preconditions for removing adirectory is that it must be empty.
In analyzing theexample, UC first finds the goal of the user, namely to161delete the directory Trap.
Then from this goal, UC looksfor a plan for that goal among planfors which have thatgoal in their result slots.
This plan is shown above.Once the plan has been found, the preconds for that planare checked which in this case leads to the fact that adirectory must be empty before it can be deleted.
HereUC actually checks with UNIX, looking in the user's areafor the directory Trap and discovers that this precondi-tion is indeed violated.
If UC  had not been able to findthe directory, UC would suggest that the user personallycheck for the preconditions.
Of course if the first precon-dition was found to be satisfied, the next would bechecked and so on.
In a multi-step plan, UC would alsoverify that the steps of the plan had been carried out inthe proper sequence by querying the user or checkingwith UNIX.5.
Storage for Efficient AccessThe knowledge structures in UC are stored in PEARLdatabases which provide efficient access by hash indexing.Frames are indexed by combinations of the frame typeand/or the contents of selected slots.
For instance, theplanfor of example one is indexed using a hashing keybased on the state-change in the planfor's result slot.This planfor is stored by the fact that it is a planfor forthe state-change of a terminal's mesg state.
This degreeof detail in the indexing scheme allows this planfor to beimmediately recovered whenever a reference is made to astate-change in a terminars mesg state.Similarly, a memory-association is indexed by the filler ofthe recall-key slot, an out-planfor is indexed using thecontents of the query slot of the out-planfor, and apreconds is indexed by the plan in the plan slot of thepreconds.
Indeed all knowledge structures in UC haveassociated with them one or more indexing schemeswhich specify how to generate hashing keys for storage ofthe knowledge structure in the UC databases.
Theseindexing methods are specified at the time that theknowledge structures are defined.
Thus although caremust be taken to choose good indexing schemes whendefining the structure of a frame, the indexing scheme isused automatically whenever another instance of theframe is ~dded to the UC databases.
Also, even thoughthe indexing schemes for large structures like planforsinvolve many levels of embedded slots and frames,simpler knowledge structures usually have simpler index-ing schemes.
For example, the representation for users inUC are stored in two ways: by the fact that they areusers and have a specific account name, and by the factthat they are users and have some given real name.The basic idea behind using these complex indexingschemes is to simulate a real associative memory by usingthe hashing mechanisms provided in Pearl databases.This associative memory mechanism fits well with thedata-driven control mechanism of UC and is usel'ul for agreat variety of tasks.
For example, goal analysis ofspeech acts can be done through this associative mechan-ism:(memory-association(recall-key (assertion (cd (goal (planner ?person}(objective ?obj ))))(cluster ((out-pianfor (cd ?obi)))))In the above example {provided by Jim Mayfield), UC?
analyzes the user's statement of wanting to do somethingas a request for UC to explain how to achieve that goal.6.
ConclusionsThe knowledge structures developed for UC have so farshown good efficiency in both access time and space usagewithin the limited domain of processing queries to a UnixConsultant.
The knowledge structures fit well in theframework of data-driven programming used in UC.Ease of use is somewhat subjective, but beginners havebeen able to add to the UC knowledge base after anintroductory graduate course in AI.
Efforts underway toextend UC in such areas as dialogue will further test themerit of this representation scheme.7.
Technical DataUC is a working system which is still under development.In size, UC is currently two and a half megabytes ofwhich half a megabyte is FRANZ lisp.
Since theknowledge base is still growing, it is uncertain how muchof an impact even more knowledge will have on the sys-tem especially when the program becomes too large to fitin main memory.
In terms of efficiency, queries to UCtake between two and seven seconds of CPU time on aV.~X 11/780.
Currently, all the knowledge in UC is handcoded, however efforts are under way to aatomate theprocess.8.
AcknowledgmentsSome of the knowledge structures used in UC arerefinements of formats developed by Joe Faletti andPeter Norvig.
Yigal A.rens is responsible for the underly-ing memory structure used in UC and of course, this pro-ject would not be possible without the guidance andadvice of Robert Wilensky.162O.
ReferencesArens, Y.
1982.
The Context Model: LanguageUnderstanding in Context.
In the Proceedings ofthe Fourth Annual Conference of the Cognitive Sci-ence Society.
Ann Arbor, MI.
August 1982.Deering, M., J. Faletti, and R. Wilensky.
1981.PEARL: An Eflacient Language for Artificial Intel-ligence Programming.
In the Proceedings of theSeventh International Joint Conference on ArtificialIntelligence.
Vancouver, British Columbia.
August,1981.Deering, M., J. Faletti, and R. Wilensky.
1982.The PEARL Users Manual.
Berkeley ElectronicResearch Laboratory Memorandum No.UCB/ERL/M82/19.
March, 1982.Douglass, R., and S. Heguer.
1982.
An Expert Con-sultant for the Unix System: Bridging the GapBetween the User and Command Language Seman-tics.
In the Proceedings of the Fourth NationalConference of Canadian Society for ComputationalStudies of Intelligence.
University of Saskatchewan,Saskatoon, Canada.Faletti, J.
1982.
PANDORA - A Program forDoing Commonsense Planning in Complex Situa-tions.
In the Proceedings of the National Confer-ence on Artificial Intelligence.
Pittsburgh, PA.August, 1082.Rau, L. 1983.
Computational Resolution ofEllipses.
Submitted to IJCAI-83, Karlsruhe, Ger-many.Jacobs, P. 1983.
Generation in a Natural LanguageInterface.
Submitted to IJCAI-83, Karlsruhe, Ger-many.Schmolze, J. and R. Brachman.
1981.
Proceedingsof the 1981 KL-ONE Workshop.
Fairchild Techni-cal Report No.
618, FLAIR Technical Report No.4.
May, 1982.Wilensky, R. 1982.
Talking to UNIX in English: AnOverview of UC.
In the Proceedings of the NationalConference on Artificial Intelligence.
Pittsburgh,PA.
August, 1982.Wilensky, R. 1981(b).
A Knowledge-basedApproach to Natural Language Processing: A Pro-gress Report.
In the Proceedings of the SeventhInternational Joint Conference on Artificial Intelli-gence.
Vancouver, British Columbia.
August, 1981.Wilensky, R., and Arens, Y.
1980(a).
PHRA.N - aKnowledge-Based Natural Language Understandcr.In the Proceedings of the 181h Annual Meetin~ of theAssociation for Computational Linquistics.
Phi-ladelphia, PA.Wilensky, R., and Arens, Y.
1980(b).
PHRAN - aKnowledge Based Approach to Natural LanguageAnalysis.
University of California at Berkeley, Elec-tronic Research Laboratory Memorandum No.UCB/ERL M80/34.163
