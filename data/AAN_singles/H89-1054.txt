Probabilistic Models of Short andLong Distance Word Dependenciesin Running TextJulian KupiecXEROX PALO ALTO I:~ESEARCH CENTER3333 Coyote Hill RoadPalo Alto, CA  94304AbstractThis article describes two complementary models that represent dependencies between words in lo-ca/ and non-local contexts.
The type of local dependencies considered are sequences of part of speechcategories for words.
The non-local context of word dependency onsidered here is that of word recur-rence, which is typical in a text.
Both are models of phenomena that are to a reasonable extent domainindependent, and thus are useful for doing prediction in systems using large vocabularies.Mode l ing  Par t  o f  Speech  SequencesA common method for modeling local word dependencies is by means of second order Markov models (alsoknown as trigram models).
In such a model the context for predicting word wi at position i in a text consistsof the two words wi_l, wi-2 that precede it.
The model is built from conditional probabilities: P(wi I wi_l,wi-2).
The parameters of a part of speech (POS) model are of the form: P(wi \[ Ci) x P(Ci \[ Ci-1, Ci-2).That is, for word wi a POS category Ci is first predicted, based on the POS categories of the two previouswords.
The word wi is then predicted in terms of Ci.
If the vocabulary consists of the set of N words{vl, v2...vg}, then wi, wi-1 and wi-2 range over the elements of this set.
For a model containing M partsof speech,{S1, S2...SM}, the variables Ci, Ci-1 and Ci_~ likewise range over the M elements.POS language models have been used in speech recognition systems (Dumouchel, Gupta, Lennig andMermelstein, 1988; Shikano, 1987) and for phoneme-to-text transcription (Derouault and Merialdo, 1986).In these systems the parameters are obtained from the analysis of an annotated training corpus.
To createthe training corpus a set of POS categories i first defined.
A word in the vocabulary may be associated withseveral POS categories depending on the roles it can play in a sentence.
A suitably large corpus of trainingtext is then manually analyzed and each word of the corpus is annotated with an unambiguous POS categoryaccording to its function in the text.
The Brown Corpus has been analyzed this way, using a set of 87 maincategories (Francis and Kucera, 1982).
To obtain the parameters of a language model, frequency counts aremade and normalized to produce the required sets of parameters.
The problem of training a model, and thereliability of the resulting parameters rests on a laborious manual annotation of a necessarily large amountof training text.
To reduce this burden, a bootstrap method can be used (Derouault and Merialdo, 1986).First a relatively small amount of text is annotated, to create a partial model.
The partial model is thenused to automatically annotate more text, which is then corrected manually, and used to re-train the model.Here, an alternative approach as been taken to the training problem, which is based on work by Jelinek(Jelinek, 1985a).
In this approach, a POS language model is viewed as a Hidden Markov model (HMM).
Thatis, a word sequence reflects an underlying sequence of parts of speech, which is hidden from the observer.The advantage of considering the model in such terms is that the need for an annotated training corpus iseliminated, resulting in greater flexibility.
The model can be trained with alternative sets of POS categories,and can accommodate special POS categories that are defined for specialized omains.
Another advantageis that the method can be applied to other languages.
To train a model requires the following:1.
A suitably large training corpus of text (that is not annotated).2.
A vocabulary of words occurring in the corpus, where each word is associated with a list of all thepossible parts of speech it can assume.3.
Estimates of the frequency of occurrence P(Vl)...P(vg) of the words in the vocabulary.
These are usedto set initial probability values in the model.290P(Vn.lSy)oP(VjlSy)p(v21Sy)P(VIISy)  P(Sx \[ Sy)P(VnlSx)P(VjlSx)P(VZlSx)P(VllSx)Figure 1: A typical state transition in a first order HMMStates in the HMM correspond to POS categories, and are labeled by the category they represent.
Theobservations generated at a state are those words that can function as the POS category associated withthe state.
The probability P(Ci = S, I Ci-1 = Sy) labels the transition from state Sy to state S,, andP(wi = vj I Ci = S,) represents the flh element of the output matrix for state S~.
These are shown inFigure 1.
If word vk cannot occur as POS category S, then the kth element of the output matrix for stateS, is zero.
This provides a strong source of constraint on the estimation process.
Each state is connected toall other states, which permits the modeling of any sequence of parts of speech.The HMM used for the work is based on the implementation of Rabiner, Levinson and Sondhi (Rabineret M., 1983).
A first order HMM was used as a starting point because the resources required to train itare significantly less than for a second order model, and thus facilitate experimentation.
Twenty-one partsof speech were used, corresponding to traditional POS categories uch as determiner, adverb, preposition,noun, noun-plural, verb-progressive, verb-past-participle etc.In the model described here, the elements of the output matrix have been assigned to word equivalenceclasses rather than individual words.
This is due to the observation that in unrestricted omains, thenumber N of different word types that can occur is so large it precludes practical estimation of the requirednumber of parameters P(wi \[ Ci).
Words are partitioned into L equivalence classes W1...WL.
All wordsthat can function as a noun only are in one equivalence class, and all words that can function as eithera noun or adjective are in another class, and so o11.
A total of L = 129 equivalence classes were used inthe model.
Each equivalence class has an index in the output matrix.
Words have an uneven distributionwithin these classes, e.g.
in the dictionary that was used the word "more" is the only member of the classnoun-or-comparative-adjcctive-or-adverb.
Prior to training, initial values of probabilities in all the matricesmust be chosen.
The transition matrix is set so that all the transitions from a state are equiprobable.
Wordoccurrence probabilities P(vj) are used to obtain the initial output matrix probabilities.
They are firstconverted to probabilities of word equivalence classes P(Wk).
The probability of each equivalence class Wkis then divided equally among the POS categories that are in the equivalence class, to give weights F(Wk,Ci).
This reflects tile assumption that all words in an equivalence class can initially function equiprobably asany POS category of the class.
The output matrix elements for each state are constructed using the variousF(Wk, Ci).
For each state, the elements are then normalized to sum to unity.The process of training a HMM is to statistically infer parameters that maximize the likelihood of thetraining text, and the Baum-Welch algorithm (Baum, 1972) was used for this purpose.
Typically, the modelis trained on several iterations over the training data, until the parameter estimates converge.
Then, for anygiven test sentence, the Viterbi algorithm (Viterbi, 1967) can be used to find the most likely state sequencethrough the model, which maximizes the probability of seeing the test sentence.
The state sequence is usedas the annotation for the sentence.A text corpus containing 1,180,000 words was used for training and testing the model.
The corpus is a291I THINK THAT IT IS A FARsub j -p ro  verb  eonj pro  verb  det  adjnoun adj noun noun adverbproadverbdetMORE COMPLICATED ISSUE THAN YOU SEEM TOcomp-ad j  adj noun conj  pro  verb  prepadverb past part verb adverbnounTHINK TO PUT IN ELEMENTARY FUNCTIONSverb  prep  verb  prep  adj noun-p lura ladverb adj verb 3rd personnounadverbFigure 2: An Example of Annotationcollection of electronic mail messages concerning the design of the Common Lisp programming language.
Itcontains 23,190 different words, of which 8,300 only occur once.
A dictionary of approximately 30,000 wordswas also available, each word tagged with its possible parts of speech.
An annotated corpus vocabularywas constructed by intersecting the dictionary with the corpus.
This resulted in 90% coverage of the totalnumber of words in the corpus, and 45% coverage of the total word types that appear in the corpus.
Wordsthat did not have vocabulary entries giving their parts of speech were marked with a special POS categorycalled unlabeled.
A total of 21 POS categories were used initially, resulting in 441 transitions.
The outputmatrix contained 129 elements per state (corresponding to the number of word equivalence classes in theannotated corpus vocabulary).
The model was trained initially on 3000 sentences from the corpus, using10 iterations.
Preliminary results are good, even for a first order model.
An example of annotation of asentence is shown in Figure 2.
The annotation provided by the Viterbi algorithm is shown in bold on theline below the words of the sentence.
The other possible parts of speech present in the dictionary are shownbelow the annotation.
It can be seen that the major dependencies have been inferred correctly; the maindifference from the preferred annotation lies in the substitution of adjectival for adverbial categories.Modeling Word RecurrenceThe previous method is useful for modeling sequences ofparts of speech.
Words were grouped into equivalenceclasses, and it was noted that there was an uneven distribution of words in different classes.
The classes fortopic independent words such as the, of, in, etc.
are relatively small (some are unique) and as a result thesewords are easily predicted given their equivalence class.
The equivalence classes for topic dependent wordssuch as nouns, adjectives and verbs are very much larger.
This section describes a method which addressesone aspect of the problem of predicting topic dependent words.
The method is concerned with modelingword recurrence, which is typical in discourse.
The use of previous discourse history as a means of predictionhas been recognized for some time.
Barnett (Barnett, 1973) describes a system which allocates higher scoresto "content" words if they have already been mentioned.
In the MINDS spoken language dialogue system(Young, Hauptmann, Ward, Smith and Werner; 1989) extensive use is made of previous dialogue history,which is integrated with high level knowledge sources.
These include dialogue knowledge, user goals, plansand focus.Our model makes use of previous history at the lower level of word transition probabilities, where au-tomatic statistical estimation can be performed.
Word recurrence takes place at greater distances than thetwo word context used in the previous model.
To account for this, a long range memory called a word cache292is used.
A word cache may be described as static or dynamic depending on whether its contents are fixed.A frequency ordered list of words occurring in a corpus represents a static word cache.
In this type of wordcache the overall probability of occurrence of a word related to a specific topic tends to be small, as a largecorpus of text may be composed of material on a large number of diverse topics.
The contents of a dynamicword cache may be some function of the previous text history.
In a small section of the corpus concernedwith a topic, words related to the topic tend to be repeated.
A word's probability may then be higherthan its overall probability.
A dynamic word cache can track this recurrence ffect.
Dynamic caches can befurther split into two kinds.
A token cache contains the previous n words (i.e.
word tokens) seen in a text,and acts as a window containing the most recent words encountered.
A type cache contains the previous ndifferent words (i.e.
word types) found, and can be implemented as a linked list of words.
When a word isencountered that is already in the cache, the word is simply moved to the front of the list.
When a new wordtype is seen it is placed at the front of the list.
If the cache is full, the least recently used word is removedfrom the tail of the list.
An interesting comparison between a static and dynamic word cache is given bythe amount of coverage they provide.
A static word cache containing the n overall most frequent words inthe corpus of Common Lisp mail messages was compared with an equally sized dynamic type cache.
Table1 shows the coverage given over the whole corpus by the two kinds of cache, for various n. For cache sizesfrom 90 to 4000 words the dynamic type cache gave slightly better coverage than the optimum frequencyordered cache.
This characteristic was also observed when using subsections of the corpus.
The dynamiccache does not give 100% coverage when its size is equal to the vocabulary, because at the outset it is empty.Words entering the cache for the first time are not covered.
The dynamic type cache has the advantage thatit is adaptable over different domains whereas the optimum contents of a static cache must be determinedby prior analysis.
A dynamic token cache was also compared, and it gave inferior performance to either ofthe other kinds of cache because space ill the cache is occupied by multiple tokens of the same word type.Dynamic type caches have been considered as a means of vocabulary personalization (Jelinek, 1985b).In conjunction with interactive word entry, they have also been viewed as a way of obtaining high coveragein a speech recognition system using a very large vocabulary (Merialdo, 1988).
The dynamic cache can alsobe considered as a means for improving word prediction.
For this purpose, it is necessary to quantify itseffect and allow direct comparison with an alternative.
A first order (bigram) model of word dependency wascompared with a similar model into which a dynamic cache had been incorporated.
A first order model iscomposed of parameters of the form P(wi I wi_l).
Both wi and wi_l range over all words in the vocabulary.If (v,, v~) is such a word pair, the conditional probability P(wi = v, I wi-1 = vv) denotes the correspondingmodel parameter.
A dynamic cache D is a function of previous history, which can be evaluated at i - 1 forany choice vx of wi, and its inclusion is modeled as P(wi \] wi-1, Di-1).
D is binary valued and indicates forany word type v, whether or not it is currently in the cache.
This results in two sets of probabilities: P(v~I vy, D = true), P(vz Ivy, D = false).
These probabilities are obtained from frequency counts as shown inFigure 3.
In the figure, N(a, b) represents the count of the number of times the joint event a and b occurredin the training text.The dynamic cache is likewise used to select probabilities when doing prediction.
The corpus of CommonCache Size199O5121000200040008000120001600023191Percent.
Coverage of CorpusStatic Cache Dynamic Cache30 2150 5075 7883 8090 9195 959898.499.41009797.797.998Table 1: Coverage provided by various sizes of Static and Dynamic Caches293P(x I Y, D = true) = N(Vx follows Vy, and Vx is in cache)N(Vy is seen, and Vx is in cache)P(x I Y, D = false) = N(Vx follows Vy, and Vx is not in cache)N(Vy is seen, and Vx is not in cache)Figure 3: Conditional Probabilities for a Dynamic CacheLisp mail messages was divided in the ratio 80% - 20% for training and testing respectively.
Experimentswere done with cache sizes ranging from 128 to 4096 words.
The criterion of average rank of the correct wordwas used to compare the "dynamic" model based on P(wi I wi-1, D) to the "static" model based on ordinarybigrams P(wi I wi-1).
When a word pair v~, vy occurred in the test text, which had zero probability inthe training text, unigrams were used to rank v~.
The dynamic model used P(v~ I D) whereas the staticmodel used P(v~).
Several runs were made using different sections of the corpus for training and testing.
Forany run, less than 5% of words in the test text were absent from the training text.
Over different runs, theaverage rank of the correct word in the static model ranged from 520 to 670.
In each run, the dynamic modelconsistently produced a lower average rank, ranging from 7% to 17% less than that of the static model.
Theperformance of the model varied by less than 1% for cache sizes between 350 and 750.Another method of combining the bigram and unigram probabilities is by means of an interpolatedestimator (Jelinek and Mercer, 1980).
An interpolated estimator is a weighted linear combination of otherestimates.
Optimum weights are derived by the Baum-Welch algorithm, and their values give an indicationof the overall utility of each component.
Parameters of both the Static and dynamic models were used in aninterpolated estimator.
The corpus was divided in the proportion 60% - 20% - 20% respectively for trainingthe model, obtaining the weights, and test text.
The use of the interpolated estimator contributed a furtherreduction in average rank of a few percent.
A typical set of values that were obtained for weights of eachcomponent are shown below:Pint(vz Ivy) = 0.3P(vx Ivy, D) + 0.25P(vx IVy) + 0.35P(vx I D) + 0.1P(vx)DiscussionPOS categories provide reasonable models of local word order in English.
Further work is necessary tounderstand the sensitivity of the model to factors such as the granularity of POS classifications.
Statesrepresenting sentence boundary and punctuation marks would also be useful.
Our model would benefitfrom further refinement of some POS categories.
The category auxiliary-verb is currently absent, and thewords "might" and "will" are in the equivalence class labeled noun-or-verb.
Accordingly, they are classed asexhibiting the same behaviour as words like "thought", "feel" and "structure".
It may also be advantageousto assign unique equivalence classes to common words, retaining the same POS categories, but allowing themto assume different parameter values in the output matrix.
This enables the modeling of words that functionuniquely.
Moreover, common words tend to be topic independent and their estimation is not impaired bylack of data.
Higher order conditioning is also an obvious area for further work.
Due to the limitationsof local context and the simplicity of the model, it cannot resolve all kinds of ambiguities found in text.Consider, for instance, the disambiguation of the word "that" in the following sentences:"I think that function is more important han form".
"I think that function is more important han this one".Traditional parts of speech have been used deliberately, to enable the model to interface to other tools ofcomputational linguistics.
In particular, a morphological nalyzer is being integrated into the model to aidPOS category predictions for words that are not in the vocabulary.
The output from the model can also beused as input to other types of linguistic processing.294Results indicate that word prediction can be improved by making use of word recurrence, which can beconsidered as a simple focus-of-attention strategy.
For speech recognition it would be a suitable componentin a language model that must cover two or more application areas, where each area has its own set ofcommonly used topic dependent words.
The improvements provided by the model depend on the extent towhich the usage of a word is repeatedly clustered, resulting in a non-uniform distribution throughout a text.Unlike the part of speech model, common "function words" do not contribute to the word recurrence model.The two models can be viewed as addressing complementary topic-independent and topic-dependent aspects,and could be integrated into a combined model.
The word recurrence results would benefit from verificationon other corpora, as a corpus consisting of electronic mail is not the ideal choice for such experiments, andmust be used with caution.
The phenomenon ofword recurrence is subsumed by the more general interactionof topic related words, which may be used to predict each other as well as exhibiting recurrence.
This wouldbe an interesting direction for future effort.AcknowledgementI would like to thank Jan Pedersen of Xerox PARC, for fruitful discussion and his comments.
This workwas sponsored in part by the Defense Advanced Research Projects Agency (DOD), under the InformationScience and Technology Office, contract #N00140-86-C-8996.Re ferencesP.
Dumouchel, V. Gupta, M. Lennig & P. Mermelstein.
Three Probabilistic Language Models for a Large-VocabularySpeech Recognizer.
Proc.
1988 Int.
Conf.
on Acoustics, Speech and Signal Processing.A.M.
Derouault, B. Merialdo.
Natural Language Modeling for Phoneme-to-Text Transcription.
IEEE Trans.
onPattern Analysis and Machine Intelligence Vol.
PAMI-8, No.
6, November 1986.K.
Shikano.
Improvement of Word Recognition Results by Trigram Model.
Proc.
1987 Int.
Conf.
on Acoustics,Speech and Signal Processing.W.
N. Francis, H. Kucera.
Frequency Analysis of English Usage.
Houghton Mifflin, 1982.L.R.
Rabiner, S.E.
Levinson, and M.M.
Sondhi.
An Introduction to the Application of the Theory of ProbabilisticFunctions of a Markov Process to Automatic Speech Recognition.
Bell System Technical Journal, Vol.
62, No.4, April 1983. pp 1035-1074.
(1985a) F. Jelinek.
Self-Organized Language Modeling for Speech Recognition.
Unpublished Technical Report,1985.
IBM T.J. Watson Research Center, Yorktown Heights, N.Y.L.E.
Baum.
An Inequality and Associated Maximization Technique in Statistical Estimation for ProbabilisticFunctions of a Markov Process.
Inequalities, 3, 1972. pp.
1-8.A.
J. Viterbi.
Error Bounds for Convolutional Codes and an Asymptotically Optimal Decoding Algorithm.
IEEETrans.
on Information Theory Vol.
IT-13, April 1967. pp.
260-269.J.
Barnett.
A Vocal Data Management System.
IEEE Trans.
on Audio and Electroacoustics Vol.
AU-21 No.
3,June 1973.S.
Young, A. Hauptmann, W. Ward, E. Smith, P. Werner.
High Level Knowledge Sources in Usable SpeechRecognition Systems.
CACM Vol.
32 No.
2, February 1989.
(1985b) F. 3elinek.
The Development ofall Experimental Discrete Dictation Recognizer.
Proc.
IEEE, Vol.
73, No.11, November 1985.B.
Merialdo.
Multilevel Decoding for Very-Large-Size Dictionary Speech Recognition.
IBM J. Res.
Develop., Vol.32, No.
2, March 1988.F.
Jelinek, R.L.
Mercer.
Interpolated Estimation of Markov Source Parameters from Sparse Data.
Proc.
WorkshopPattern Recognition i  Practice, May 21-23, 1980.
Amsterdam, The Netherlands.
North-Holland.295
