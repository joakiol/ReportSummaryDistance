STRUCTURE SHARING PROBLEM AND ITS SOLUTIONIN GRAPH UNIF ICAT IONKiyosh i  KOGURENTT  Basic  Research  Laborator ies3-1 Mor inosato -Wakarn iya ,  Atsugi -sh i ,  Kanagawa.,  243-01 Japankogure~at  om.
nt is .
jpABSTRACTThe revised graph unification algorithms presentedhere are more efficient because they reduce theamount of copying that was necessary because of theassumption that data-structure sharing in inputs oc-curs only when feature-structure sharing occurs.1 INTRODUCTIONConstraint-based linguistic frameworks use logicalsystems called feature logics (Kasper & Rounds, 1986;Shieber, 1989; Srnolka, 1988), which describe linguis-tic objects by using logical formulas called feature de-scriptions that have as their models feature structuresor typed feature structures.
Shieber (1989) arguedthat if the canonical models of finite formulas of a fea-ture logic were themselves finite, we could use them tocompute over instead of theorem-proving over the for-nmlas themselves.
This would be advantageous if wehad efficient algorithms for manipulating the canoni-cal models.The most important operation on models- featurestructures or typed feature structures is combiningthe information two models contain.
This opera-tion is traditionally called unification, although re-cently it has come to be more suitably called infor-mational union.
This unification operation is signif-icant not only theoretically but also practically be-cause the efficiency of systems based on constraint-based formalisms depends on the (typed) featurestructure unification and/or feature description uni-fication algorithms they use.
1 This dependency isespecially crucial for monostratal formalisms -thatis, formalisms which use only (typed) feature struc-tures such as HPSG (Pollard & Sag, 1987) and JPSG(Gunji, 1987)?The efficiency of (typed) feature structure unifica-tion has been improved by developing algorithms thattake as their inputs two directed graphs representing(typed) feature structures, copy all or part of them,and give a directed graph representing the unificationresult.
These algorithms are thus called graph unifi-cation.
Previous researeh as identified graph copyingas a significant overhead and has attempted to reducethis overhead by lazy copying and structure sharing.Unification algorithms developed so far, however,including those allowing structure sharing seem to1For example, the TASL1NK natural anguage systemuses 80% of the processing time for feature structure uni-fication and other computations required by unification,i.e., feature structure pre-copying (Godden, 1990).2For example, a spoken-style .Japanese sentence analy-sis system based on HPSG (Kogure, 1989) uses 90%-98%of the processing time for feature structure unification.syn |Fig.
1: Matrix notation for a typed feature structure.contradict structure sharing because they assmne thetwo input graphs never share their parts with eachother.
This "structure sharing" assumption preventsthe initial data structures fl'om sharing structures forrepresenting linguistic principles and lexical informa-tion even though many lexical items share commoninformation and such initial data structure sharingcould significantly reduce the amount of data struc-tures required, thus making natural anguage systemsmuch more efficient.
Furthermore, even if the struc-ture sharing assumption holds initially, unification al-gorithms allowing structure sharing can yield situa-tions that violate the assumption.
The ways in whichsuch unification algorithms are used are therefore re-stricted and this restriction reduces their efficiency.This paper proposes a solution to this "structuresharing problem" and provides three algorithms.
Sec-tion 2 briefly explains typed feature structures, Sec-tion 3 defines the structure sharing problem, and Sec-tion 4 presents key ideas used in solving this problemand provides three graph unification algorithms thatincrease the efficiency of feature structure unificationin constraint-based natural language processing.2 TYPED FEATURE STRUCTURESThe concept of typed feature structures attgments theconcept of feature structures.
A typed feature struc-ture consists of a set of feature-value pairs in whicheach value is a typed feature structure.
The set of typesymbols is partially ordered by subsumption ordering_<7 and constitutes a lattice in which the greatest ele-ment T corresponds to 'no information' and the leastelement J_ corresponds to 'over-defined' or 'inconsis-tency.'
For any two type symbols a, b in this lattice,their least npper bound and greatest lower bound arerespectively denoted a VT b and a AT- It).Typed feature strnctures are represented in matrixnotation as shown in Fig.
1, where syn, agr, sg, and3rd are type symbols; agree, hum,  per,  and subj  arefeature symbols; and X is a tag symbol.
A feature-address that is, a finite (possibly empty) string offeature symbols is used to specify a feature value ofan embedded structure.
In Fig.
1, for example, thestructure at the feature-address agree .
uum,  where'.'
is the concatenation operator, is said to have sgas its type symbol.
The root feature-address is de-886l \ \ su  bjagrec li ~.syna/agr~ fl re c++ Nsg 3rdFig.
2: Graph representation f a typed feature struc-l, ure.noted by '(.'
To specify token-identity in matrix no-tation, a tag symbol is used: feature-address valueswith the same tag symbol arc token-identical, andthose featm'e-addresses with the token-identical valueare said to corefer.
/n Fig.
1, the feature-addressesagree and subj ?
agree corefer.A typed feature, structure is also represented by arooted, connected, directed graph within which eachnode corresponds to a typed feature structure and islabeled with a type symbol (and, optionally, a tagsymbol) and each arc corresponds to a feature.-valuepair and is labeled with a ti'~ature symbol.
Fig.
2 illus-trates the graph representation of the typed featurestructure whose matrix notation is shown in Fig.
1.In a graph representation, the values at corefcrentIhature-addresscs that is, token-identical valuesare represented by the same node.
'\['he set of typed featm:e structures is also partiallyordered by a subsumption ordering that is an exten--siou of the subsnmptiol, ordering on the set of typesymbols.
A typed feature structure tl is less than orequal to tu (written as tl <, in) if and only if tt isiuconsistent (that is, if it includes the type symbol \]_)or (i) t~ 's type symbol al is less than or equal to t~'stype symbol a2 (a~ _<7 ap.
); (ii) each h'.atur(~ f of 12exists in ll and has a value 12, f such that its counter=part t t j  is less than or equal to t2,j'; m'/\] (iii) eachcoreference relation holding in 12 also holds in 11.
'.l'his subsumpl, ion ordering serves its the basis for(Mining two lattice operations: generalization (theleast upper bound or join) and unitlcation (the great-est lower bound or meet).Typed feature structures have been formalized inseveral ways, such as by using .I/%types (Mt-Kaci,198~).3 THE STRUCTURE SHARINGPROI1LEM3.1 Graph  Uni f icat ion A lgor i thmsThe destructive unitlcation algorithnl presenled byAitq(aci is the starting point in increasing the ef-liciency of graph unification.
It is a node-mergingprocess that uses the Unio>Find algorithm, whichwits originally devek)t)ed for testing tinite automataequivalence (llopcroft & Karp, 1971), in a mannerw.
'ry similar to that of the unification algorithm forrational terms (llnet, 197(i).
(',iveu two root nodes ofgraphs representing (typed) feature structures, thisalgorithm simultaneously traverses a pair of inputnodes with the same feature-address, putting themnode structuretsymbola7c8generat ionforwardcopy{a type symbol)(a set of arc structures}{an integer)NIL I {a node st,'ucturc)NIL I {~ node structure}I (a copydcp structure)arc structurelabel (~ feature symbol}vahw {a node structure)copydep structuregeneration | {an integer}deps \[ (a set of node and arc p~irs)Fig.
3: I)ata structures for nondestructive unificationan<l LING unification.into a new and larger coreference class, and then re-turns the lnerged graph,Since the destructive unification process modifiesits input graphs, they must first be copied if theircontents are to bc preserved.
Nondeterminism inparsing, for example, requires the preservation ofgraph structures not only for initial graphs repre-senting lcxical entries and phrase structure rules butalso for those representing well-formed intermediatestructures.
Although the overhead for this copyingis significant, it is impossible to represent a resul.-taut unitied graph without creating any new struttures.
Unnecessary copying, though, must be identi-fied and minimized.
Wroblewski (1987) delined twokinds of unnecessary copying- over-copying (copyingstructures not needed to represent resultant graphs)and early-copying (copying structures even thoughunitication fails) -but this account is flawed becausethe resultant graph is assumed to consist only of newlycreated structures even if parts of the inputs that arenot changed during mtitication could be shared withthe resultant graph.
A more eNcient unification al-gorithm would avoid this redundant copying (copyingstructures that can be shared by the input and re-sultant graphs) (Kogure, 1990).
To distinguish struc-ture sharing at the implementation level fl'om that atthe logical lew'l (that is, coreference r lations betweenfeature-addresses), the lbrmer is called data-structuresharing and the latter is called feature-structure shar-ing (Tomabechi, 1992).
'\['he key approaches to reducing the amount ofstructures copied are lazy copying and data-structuresharing.
For lazy copying, Karttnnen (1986) proposeda reversible unification that saves the original con-tents of the.
inputs into prealloeated areas immedi-ately before destructive modification, copies the resul-tant graph if necessary, and then restores the originalcontents by undoing all the changes made during mli-tication.
Wroblewski (1987), on the other hand, pro-posed a uondestructiw~ unitication with incrementalcopying.
Given two graphs, Wroblewski's algorithmsimultaneously traverses each pair of input nodes withthe same feature-address and creates a (:ommon copyof the input nodes.
The nondestructive unification887algorithm for typed feature structures uses the datastructures hown in Fig.
3. a The algorithm connectsan input node and its copy node with a copy linkthat is, it sets the copy node as the input's copyfield value.
The link is meaningflfl during only oneunification process and thus enables nondestructivemodification.
4 Using an idea similar to Karttunen's,Tomabechi (1991) proposed a quasi-destructive unifi-cation that uses node structures with fields for keep-ing update information that survives only during theunification process.
5Unification algorithms allowing data-structuresharing (DSS unification algorithms) are based ontwo approaches: the Boyer and Moore approach,which was originally developed for term unificationin theorem-proving (Boyer & Moore, 1972) and wasadopted by Pereira (1985); and the lazy copyingsuggested by Karttnnen ~nd Kay (1985).
Recentlazy copying unification algorithms are based onWroblewski's or Tomabeehi's schema: Godden (1990)proposed a unification algorithm that uses activedata structures, Kogure (1990) proposed a lazy in-cremental copy graph (LING) unification that usesdependency-directed eol)yiug, and Emeie (1991) pro-posed a lazy-incremental copying (LIC) unificationthat uses chronological dereference.
These algorithmsare b0,sed on Wroblewski's algorithm, and Tomabechi(1992) has proposed a data-structure-sharing versionof his quasi-destructive unification.3.2 The Structure Sharing ProblemThe graph unification algorithms mentioned so far--perhaps all those developed so far--assume that data-structure sharing between two input structures occursonly when feature-structure sharing occurs betweenfeature-addresses they represent.
This "structuresharing" assumption prevents data-structure sharingbetween initial data structures for representing lin-guistic principles and lexical information even thoughmany lexical items share common information.
Forexample, many lexical items in a traditional syntacticcategories uch as noun, intransitive verb, transitiveverb, and so on share most of their syntactic informa-tion and differ in their semantic aspects such as se-mantic sortal restriction.
Such initial data-structuresharing could significantly reduce the amount of datastructures required and could therefore reduce page-swapping and garbage-collection a d make naturallanguage processing systems much more efficient.Furthermore, even if the structure sharing assump-tion holds initially, applying a DSS unification algo-rithm in natural language processing such as parsingand generation can give rise to situations that vio-late the assumption.
Consider, for example, JPSG-aFor the nondestructive unification algorithm, the nodestructure takes as its copy field value either NJ L or a nodestructure only.4In this algorithm each unification process has an in-teger as its process identifier and each node created in aprocess has the identifier as its generation field vMue.
Acopy link is meaningful only if its destination ode has thecurrent process identifier.
Such a node is called ~current.
'~The technique used to control the lifetime of updatedata is the same as that of Wroblewski's algorithm.based parsing.
There are only a few phrase structurerules in this fl'amework and the Complement-HeadConstruction rule of the form 'M --+ C It' is appliedvery frequently.
For instance, consider constructing astructure of the form \[vP~ NP2 \[vP, NP1 VII.
Whenthe rule is applied, the typed feature structure forthe rule is unified with the structure resulting fromembedding the typed feature structure for NPl atthe feature-address for the complement daughter inthe rule (e.g., dtrs.
cdtr), and the unification re-sult is then unified with the structure resulting fromembedding the typed feature structure for V at thefeature-address for the head daughter.
Because notevery substructure of the structure for the rule al-ways changed uring such a unification process, theremay be some substructures shared by the strneturefor the rule and the structure for VP1.
Thus, whenconstructing VP2 there may be unexpected and unde-sired data-structure sharing between the structures.Let me illustrate what happens in such eases by us-ing a simple example.
Suppose that we use the non-destructive unification algorithm or one of its data-structure sharing versions, the LING or I,IC algo-rithm.
The nondestructive and LING unification al-gorithms use the data structures shown in Fig.
3,and the LIC algorithm uses the same data struc-tures except that its ~zode structure has no forwardfield.
Consider unification of the typed feature struc-tures tl and t2 shown in Fig.
4(a).
Suppose that t,and t2 are respectively represented by the directedgraphs in Fig.
4(b) whose root nodes are labeled bytag symbols X0 and X4.
That is, t j 's substructureat feature-address f2 and t2'S substructure at \]'1 arerepresented by the same data structure while feature-structure sharing does not hold between them, andt l 's substructure at \]3 and t2's substructure at; f4 arerepresented by the same data structure while feature-structure sharing does not hold between them.
Eachof the algorithms imultaneously traverses a pair ofinput nodes with the same feature-address both ofthe inputs have Dora the root feature-address to leaffeature-addresses, makes a common copy of themto represent he unification result of that feature-address, and connects the input and ontput nodeswith copy links.
For any feature-address that onlyone of the inputs has, the nondestructive unificationalgorithm copies the subgraph whose root is the nodefor that feature-address and adds the copied subgraphto the output structure, whereas the LING and LICalgorithms make the node shared by the input andoutpnt structures.
In the case shown in Fig.
4(b) theroot nodes of the inputs nodes with the tag symbolsXo and X4 are first treated by creating a commoncopy of them (i.e., the output node with Yo), con-necting the input and output nodes with copy links,and setting bo = ao A:r a4 as the copy's lsymbol wdue.Then the input nodes' arc structures are treated.
Snt>pose that the pair off1 arcs is treated first.
After theinput nodes at feature-address fl are treated in thesame manner as the root nodes, the pair of fie arcsis treated.
In this case, t l 's node at f2 (labeled X2)already has a copy link because the node is also usedas t2's node at \]'1 so that the destination ode of thelink is used as this featnre-address's output node.
Af-888I k *~* \] tt : a0 f2 II2 ,Lfa aat2 : a4 la a~ ,(a) Input typed feature structures.input tl Int)ut t2X0:a0 Xva?
:,/ " : .
.
- : :  :,/" ,\:,x : ,  / ",', /;()utl)ut la ",,, \\/,:\, .
.... Yo:bo i ~'\/ \] , i k, , , , \  s , /  s,,, ,.Yl:bl ~ copy  lin k(b) Snapshot of incremental graph ratification allow-ing data-structure sharing,ta : t)o Xa :aa  'LA:t)aII.
At t2 : t)o aaLA: aawhere,\])0 =: a 0 A, \ ]  "14~b l  --  a lA7  a2Av  a~,ID2 ~ at  A'I a:~,|)3 = a2 A7 aE,.
(c) Wrong graph unili(:ation outl)ut (ta) and the cot--rect unifi(-ation of the inputs (t~ At Zp,,).l"ig.
4: An examph; of incorrect graph unitication.ter the common label arcs are treated, unique labelarcs are treated.
The nondestructive, unitication a lgo-r ithm copies t l 's  Ca and t~'s f4 arcs and adds them gothe output root node, whercas the LING and t IC  a.1-gorithms make the input and output structures haretheir destination odes, t:'inally, the I,ING and MCalgorithms obtain gr~l)h t: n represented in matrix no-tation ill Fig.
4(('i)just over the correct result.The nondestructive unification algorithni obtainsthe same typed feature structure.
The reversible andthe quasi-destructiw', unification algoril, hms are also,mable to obtain the correct result for this examplebecatlS(; these Mgorithms cmmot represent wo up-date nodes by using a single node.
Thus, none of tilectiicient unification algorithms developed re, ce, ntly ob-tains the correct results R)r such a case.
Avoiding suchwrong unification results requires undesirable copy-ing.
We can, for example, avoid getting the wrongresult by interleaving tile application of any non-DSSunilication algorithm between N)plications of  a I)SSunitication algorithm, but such bypassing requires twounilication programs and reduces the efficiency gainof  I)SS unification.
This prechlsion of useful data-structure sharing is referred to here as the 'structur~sharing" problem.It has been shown that all the/ )SS mfiticat.ion lgorithins lncntioned above are subject to tMs problemeven if the structure sharing assumption holds ini-tially.
Non-I)SS unification Mgorithms are also sub-ject to the problem because their inputs are created1)y applying not only the unitication operation butalso operations uch as embedding and extraction, inmost implelnentations of which data-structure shar.hag occurs t)etween their input and output structures.1!3ven on-l)SS unification algorithms must there, foretake such inputs into act(mat, and this requires un-desirable copying.4 A SOLUTION '1'O THE STRUCTURESHARING PROBLEM4 .1  Key IdeasThe example ill Section 3 suggests that the structlu'esharing l)roblem has two sources, which concern notonly the increnmntal Col)ying al)proach but also otheral)proaches.
The tirst source is the way of rec, ordingul)date inibrmation.
In the incremental Col)ying at)-proach, this corresponds to the way of copying struc-tures.
That  is, while calculating t l A t t, 2 the incr(:mental copying process does not (lisl, inguish between thecopies cremated tuq tim sul>strucl;ures of the left inputl t and the copies created as tile substructures of theright input t2.
As a result, a copy node oft1 's node atf~ature-address p can be used as a copy node of t~'snod(', at a feature-address, and vice versa.
In Fig.
4(10,fbr example, tile copy of t2's node al; f2 is wronglyused as the copy of t l 's  node at fl.
This causesunexpected and wrong data-structure sharing in ther(~sultant graph and this in turn catlses unexpect(~dand wrong feature-structure sharing in the resultant(typed) fc~t, ure s'\[,rllcttlro.
Ill other apl)roachcs , suchas the quasi-destructiw~ apl/roach , the source of thestructure sharing prol)lem is that each node structurehas tMds for keeping information on only two typedfeature structures one for the original and one R)rtilt: result wheretm fields for keeping information onthree typed feature structures are needed one for tl>original and one for each of the two results,One way to solve this problem is therel'ore to nlakeeach node keep information on thre, c typed fe, ttturcstructures: in the increnrental COl)ying apl)roach ca(;hnod(: must have two copy  tields, and in the quasi-do, s t ruc t ive  ; t \ [ ) t ) roach each  l l ode  l)lUSt have two setsof llelds for updates.
'Fhe second source of the structure sharing problem is the method of data-stru(:ture sharing betweeninput and output structures.
Unexpected and wrongdata-structure sh~ring may result if a node shared bythe leg and right inputs is used as part of the left in-put, intended to be shared between the left input andoutput, at the same time it is used as part of the rightinput, intended to be shared between the right input889node structuretsymbol (a type symbol}arcs (a set of arc structures)generation {an integer)forward NIL \[(a ,,ode structure)lcopy NIL \[ (a node structure)rcopy NIL\[ {a node structure)Fig.
5: The node structure lbr the revised nondestruc-tive unitication.and output.
In Fig.
4(b), for example, t l 's node atfeature-address f~ is shared as t3's node at the samefeature-address, and the same node as t2's node at f4is shared as ta's node at the same feature-address.This problem can be solved easily by keeping infor-mation on data-structure sharing status; that is, byadding to the node structure a new field for this pur-pose and using it thus: when a unification algorithmmakes a node shared (for example, between the leftinpnt and output), it records this information on thenode; later when tilt algorithm attempts to make thenode shared, it does this only if this data-structuresharing is between the left input and output.4.2 Algor i thmsThis section first describes a non-DSS unification al-gorithm that discards the structure sharing assump-tion and thus permits initial data-structure sharing,and then it describes two DSS unification algorithms.Revised Nondestruct ive Unifi(:ationThis Mgorithm uses, instead of the node structureshown in Fig.
3, the node structure in Fig.
5.
That  is,the algorithm uses two kinds of copy links: Icopy forthe left input and rcopy for the right input.Ti lt revised nondestructive unification procedurefor typed feature structures is shown in Figs.
6 and 7.Given two root nodes of directed graphs, the top-levelprocedure Unify assigns a new unification processidentifier, generation, and invokes Unify_Aux.
Thisprocedure first dereferences both input nodes.
Thisdereference process differs from the original one inthat it follows up fortvard and lcopy links for the leftinput node and forward and rcopy links for the rightinput node.
This revised dereference process elimi-nates the first source of the structure-sharing prob-lena.
Then Unify_A*tx calculates the meet of the typesymbol.
If the meet is ?, which means inconsistency,it finishes by returning _L Otherwise Unify_Auz ob-tains tilt output node and sets the meet as its tsymbolvalue.
The output node is created only when neitherinput nodt is current; otherwise the output node is acurrent input node.
Then Un*fy_Aux treats arcs.
Thisprocedure assmnes the existence of two procedures:Share&Arc_Pair,s and Complement_Arcs.
The formergives two lists of arcs each of which contains areswhose labels exist in both input nodes with the sameare label order; the latter gives one list of arcs whoselabels are unique to the first input node.
For each arcpair obtained by Shared_A re_Pairs, Unify_A ux appliesitself recursively to the value pair.
And for each arcobtained by Complement_Ares, it copies its value.Let us compare the newly introduced cost and thePROCEDURE Unify(nodcl, node2)generation *-- generation + 1 ;return( Un@_A ux( node l , node2))ENDPROCEDUREPROCEDURE I/n(fy_Aux(nodel, node2)node1 +-- Dereference_L(nodel);node2 +-- Dereference_R( node2 );IF node1 = node2 AND Currcnt_p(nodel) THENreturn(node l)ENDIFnewtsymbol ~- nodel.tsymbol A7 node2.tsymbol;IF newtsymbol = ?
THENreturn(?
)ENDIF;newnode ~-- Get_Out_Node(node1, node2, newtaymbol);( sares l , , , 'cs2} ~ ,~'hared_A rc_Pai,'s( node l , node2);caresl ~ Complement_Arcs(nodel, node2);cares2 *- Complement_Arcs(node2, node1);FOR (sarel,sarc2) IN (saresl,sarcs2} DOnewvaluc ~- Unifg_Aux(sarcl, value, sarc2,value);IF ncwvalue-  k THENreturn(?
)ELSEnew~)al~te*-- Add_Arc(newnode, sarcl.label, newvalue);IF newvalue = ?
THENreturn(A_)ENDIFENDIFENDFOR;IF newnode # node l THENFOR care IN carcst DOnewvalue *- Copy_Node_L( carc.vah~e );newnode~- Add_Arc( ncwnodc, care.label, newvaluc)ENDFORELSE IF ncwnode ?
node2 THENFOR carc IN carcs2 DOnewvahte +-- Copy_Nodc_l~(care.value);newnodeAdd_Arc( newnode, care.label, newvalue)ENDFORENDIF;rcturn(ncwnodc)ENDPROCEDUREPROCEDURE Dereference_L( node)IF Node_p(node.forward) THENreturn(1)ereference_L( node.forward) )ELSE IF Curret_Nade_p(node.lcopv ) "/\['HENreturn( Dereferenec_L( node.lcopy) )ELSEreturn(node)ENDIFENDPROCEDUREFig.
6: The revised nondestructive unification proce-dure (1).effect of this revision.
This revised version differs fromthe original in thai, it uses two dereference proceduresthat are tile same as tim original dereference proce-dure except that they use different fields.
Thus, onthe one hand, the overhead introduced to this revi-sion is only the use of one additional field of the nodestructure.
On the other hand, although this revisedversion does not introduce new data-structure shar-ing, it can safely' treat data-structure sharing in ini-890PROCEDURE (;ct_Out_Node( node l , node& tsymbol)IF  Current_p(nodel) AND Current_p(node2) THENnodc2.forward +-- nodel;nodel.tsyrnbol ~- tsymbol;return( nodc \[ )ELSE IF Current_p(nodel) THENnode2.rcopy ~ nodeI ;node l, tsymbol ~- tsymbol;return( node l )ELSE IF Current_p(node2) THENnodel.h:opy ~- nodc2;node2.tsymbol ~-- tsymbol;return(node2)ELSEnewnode ~- Creutc_NodeO;nodel.lcopy ~- newnode;nodel.rcopy ~ newnnde;newnode.tsymbol ~- tsgmbol;return( newnode )ENDIFENDPROCEDUR.EFig.
7: The revised nondestructiw', unification proce-dure (2),tial data structures.
This can significantly reduce theamount of initial data structures required for linguis-tic descriptions, especiMly for lexical descriptions, andthus reduce garbage-collection a d page-sw~q)ping.Rev ised  L ING Un i f i ca t ionL\[N(I uniliet~tion is based on nondestruct ive unifica-tion and uses copy-dependency information to imple-ment data-structure sharing.
For a unique label arc,instead of its vMue being copied, the value itself isused as the output vMuc and copy-dependency rela-tions are recorded to provide R)r later modificationof shared structures.
This algorithm uses a revisedCopy~Node procedure that takes as its input two nodestructures (nodel  and node2) and one arc structure,arc 1 where node.l is the node to be COl)ied.
The struc-ture arel is an arc to node J, and node t is an an-cestor node of node.l - that  is, the node fi'om whicharel departs and the revised procedure is as fol-lows: (i) if node l '  (the dereference result of node.t)is current, then Copy_Node returns node l '  to indi-cate that l, he ancestor node2 must be copied imme-.diately; otherwise, (ii) Copy_Arcs is applied to node l 'and if it returns several arc copies, Copy_Node cre-ates a new copy node and then adds to the newnode the arc copies and arcs of node\[ '  that are notcopied, and returns the ne.w node to indicate the an-eestor node having to be coiffed immediately; other-wise, (iii) Copy_Node registors the copy-dependencybetween the node l '  and the ancestor node node2that is, it adds the pair consisting of the ancestor nodenode2 a.nd the arc arc I into the copy field of node 1 '-and returns Nil ,  to indicate that  the ancestor mustnot be copied immediatelyf i  When a new copy of anode is needed later, this algorithm will copy struc-eIn tile \],IN(-; unlfica.iton Mgorithm, ~t node structure'scopy field is used to keep either copy iuform~ttion or copy-dependency inform~ttion.
When tile', field keeps copy-dependency inform;ttion, its v~hle is a copydep structureconsisting of an integer generation field- and a set ofPROCEDURE Copy_Node_L(node, arc, ancestor)node ~- Derference_L( node);IF  Current_p(node) THENreturn( node);ELSE IF node.reuse: - "  rused THENreturn( Simple_ Copy_Node_L( nodc ))ENDIFnewarcs ~- Copy_A rcs_L( node);IF newarcs 5?
0 THENnewnodc ~- Create_No&O;uewnode.tsymbol ~ node.tsymbol;node.lcopy ~-- newnode;FOIl.
arc IN nodc.arcs DOnewarc *-- Find_Are( arc.labcl, newarcs);IF Arc_p(newarc) THENnewvalne~- A dd_A rc( newnodc, arc.label, n eware, vahte )ELSEnewv(thte~- A dd_Arc( ncwnode, arc.lab(l, are.value)ENDIFENDFOR;return( newnode)ELSE IF Copydep_p(node.leopy) ANDnode.lcopy.generation = generation THENn ode.
Icopy.
deps~- nod~2eopv.deps u {((,neestor, .
r4};node,rettsc ~-- ltlsed;return(NIL)ELSEcopydcp ~ Create_CopydePO;copydcp.gcneration ~ gcneration;,'.opydep.d,,ps ,-- ((rLncesto,', are)};node.leopy ,-.
eopydep;node.
reuse ~- lused;return(NIL)ENDIFENDPROCEDUI1 ,EPROCEDURE Copy_Ares_L(node)newarcs ~- 0;FOR arc IN node.arcs DOnewnode ~- Copg_Nodc( arc.
v(due, are, node);IF Nodc_p(newnode) THENnewarc ~ Create_Are(arc.label, newnode );newarcs +-- newarcs U {newarc}ENDIFENDFOR;ENDPROCEDUR,EFig.
8: The new revised Copy_Node procedure.tures by using the copy-depe,ldency information in itscopy field (in the revised Get_Out_Node procedure forthe 13NG unification).
It subst i tutes arcs with newlycopied nodes for existing arcs.
Thus the antecedentnodes are also copied.The revised L\[NCI unification is based on the re-vised nondestruct ive unification and uses a node struc-ture consisting of the fields in the node structureshown in Fig.
5 and a new field reuse \[br indicatnode and arc pMrs -deps field (see Fig.
3).
The techniqueused to control tile lifetime of copy-dependency informa-tion is tile same as tha.t of copy information.
That is, thedeps field value is meaningN1 only when the generationvadne is equM to the unification process identifier.891ing data-structure sharing status.
When the top-levelunification procedure is invoked, it sets two new sym-bols to the two variables lused and fused.
That a nodestructure has as its reuse field value the lused valuemeans that it is used as part of the left input, and thatit has as its reuse value the rused value means that itis used as part of the right input,.
The revised LINGunification uses two new revised Copy_Node proce-dures, Copy_Node_L (shown in Fig.
8) and the analo-gons preocedure Copy_Node_It These procedures arerespectively used to treat the left and right inputsand they differ from the corresponding original pro-cedure in two places.
First, instead of step (i) above,if ~odel'  (the dereference result of no&l )  is current,Cop?l_Node_l, (or Copy_Node_R) returns 7~ode l ' to in-dicate that tire ancestor, node2, must be copied im-mediately.
But if node1' has as its reuse field valuethe fused (or lused) value, it creates a copy of thewhole subgraph whose root is nodel 'and returns theeopied structure also to indica~,c that the ancestornode must be copied immediately.
Second, in step(iii), they register data-structure sharing status thatis, they set the lused (or fused) value to the reuse fieldof node l" as well as register copy-dependency infor-mation.
This revised LING unification ensures afetyin data-structure sharing.Again let us compare the newly introduced conr-putational costs and the effect of l, his revision.
Thenewly introduced costs are the additional cost of therevised dereference procedures (which is the same asin the previous one) and the cost of checking reusestatus.
The former cost is small, as shown in the dis-cussion of the previous algorithm, ~nd the latter costis also small.
These costs are thus not significant rel-ative to the efficiency gain obtained by this revision.Rev ised Quas i -Dest ruc t ive  Uni f icat ionThe strncture-sharillg version of quasi-destructiveunification keeps update information in the fieldmeaningful only during l, he unification.
After a suc-eessful unification is obtained, this algorithm copiesthe unification result and attempts data-structuresharing.
This algorithm can be revised to ensuresafety in dal, a-structurc sharing hy using a node struc-ture including two sets of fields for update informationand one reuse field and by checking node reuse statuswhile eopying.5 CONCLUSIONThe graph unification algorithms described ira this pa-per increase the efIiciency of feature structure unifica-tion by discarding tile assumption that data-structuresharing between two input structures nccurs onlywhen the t~ature-structure sharing occurs lyetween thefeature-addresses they represent.
All graph unifica-tion algorithms proposed so far make this assumptionand are therefore required to copy all or part of theirinput strucl, ures when there is a possibility of violat-ing it.
'\['his copying reduces their etIiciency.
Thispape.r analyzed this problem and points out key ideasfor solving it.
Revised procedures tbr nondestructiveunification, LING unification, and quasi-destructiveunification have been developed.
These algorithmsmake the use of feature structures in constraint-basednatural anguage processing mnch more elficient.
Thekey ideas in this paper can also be used to make theincremental graph generalization algorithm (Kogure,1993) more efficient,ACKNOWLEDGMENTS1 thank Akira Shimazu, Mikio Nakmto, and other col-leagues in the Dialogue Understanding Group at theNTT Basic Research Laboratories for their encour-agement and thought-prow)king discussions.REFERENCESAir-Karl, H. (1986).
An Algebraic Semantics Approach tothe Effective Resolution of Type Equations.
J. ofThcor.
Comp.
Sci., It5, 293-351.Boyer, R. S., 8z Moore, J. S. (11972).
The Sharing of Struc-ture in Theorem-Proving Programs.
In Meltzer, B.,& Michie, D.
(Eds.
), Machine Intelligencc Vol.
7,chap.
6, pp.
101-116.
Edinburgh University Press.gmele, M. (1991).
Unification with Lazy Non-RedundantCopying.
\]in Prec.
of the P,9th ACL, pp.
325-330.Godden, K. (1990).
Lazy Unification.
In Prec.
of the 28thACL, pp.
180 187.Gunji, T. (1987).
Japanesc Phrase Structurc Grammar.Reidel.IIoperoft, J. E., & Karl), R. M. (1971).
An Algorithm forTesting the Equivalence of Finite Automata.
51"ech.Rep.
51'\]t-71-114, Dept.
of Comp.
Sci., Coruell Uni-versity.lluet, G. (\]976).
l?&olution d'Equations dens des Lan-gages d'Ordrc l, 2, ..., w. Ph.D. thesis, Universitdde Paris VII.Karttunen, I, (1986).
D-PNI?R- A Development Environ-meat for Unification-Based Grammars.
'\['ech.
Rep.CSLI-86-61, CSI,I.Karttuneu, I,., & Kay, M. (1985).
Structure Sharing Rep-resentation with Binary Trees.
In Prec.
of the 23rdACL, pp.
133--136.K~sper, R. T., & Rounds, W. C. (1986).
A Logical Se-mantics for l!
'e~ture Structure.
\[n Prec.
of the 24thA CL.Kogurc, K. (1989).
P~rsing Japanese Spoken Sentencesbased on HPS(L In Prec.
of the Int.
Workshop onParsing Technologies, pp.
132 14l.Kogure, K. (1990).
Strategic Lazy Incremental CopyGraph Unification.
In Prec.
of the 13th COLING,Vol.
2, pp.
223-228.Kogure, K. (1993).
Typed l"eaturc Structure Generaliza-tion by Incremental Graph Copying.
\]n 'Frost, tI.(Ed.
), Feature l'brmalisms and Linguistic Ambigu-ity, pp.
1;t9 158. l'llis Horwood,t?ereira, F. C. N. (1985).
Structure Sharing Representationfor Unitieation-Based Formalisms.
In Prec.
of the23rd ACL, pp.
137 144.Pollard, C., & Sag, \[.
(1987).
An Information-BascdSyntax and Semantics Volume l: Fundamcntals.CSLI Lecture' Notes No.
13.
CSLI.Shieber, S. M. (1989).
Constraint.Based GrammarFormalisms Parsing and Type i~tference for Natu-ral and Computer Languages.
Ph.D. thesis, StanfordUniversity.Smolka, G. (1988).
A l"eature Logic with Subsorts.LILOG 33, IBM Deutschland.Tomabechi, tI.
(1991).
Quasi-Destructive Graph Unifica-tion.
In Prec.
of the 29th ACL, pp.
315.
322.Tomabechi, II.
(1992).
Quasi-\])estructive Graph Unifica-tion with Structure-Sh~ring.
\[n Prec.
of the 14thCOLING, pp.
440-.446.Wroblewski, D. A.
(1987).
Nondestructive (-lraph Unifica-tion.
Irt })roe.
of the 6th AAAI, pp.
582-587.892
