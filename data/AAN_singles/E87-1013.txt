TEXT UNDERSTANDING WITH MULTIPLE KNOWLEDGE SOURCES:AN EXPERIMENT IN DISTRIBUTED PARSINGCinzia Costantini, Danilo Fum, Giovanni Guida,Angelo Montanad, Carlo TassoLaboratorio di Intelligenza ArtificialeDipartimento di Matematica e InformaticaUniversita' di UdineUdine, italyABSTRACTA novel approach to the problem of text understanding ispresented, which exploits a distributed processing concept, whereknowledge from different sources comes into play in the course ofcomprehension.
In the paper the rationale of advocating such anapproach and the.advantages in following it are discussed.
A proto-type parser based on an original distributed problem-solving archi-tecture is presented.
It encompasses a centralized eclarative con-trol module and a collection of decentralized, loosely coupled,heterogeneous problem solvers specialized in the vadous facets ofthe parsing task.
The mechanisms of coordination and communica-tion among the specialists are illustrated, and an example of theparser operation is given.
The parser is implemented in LISP on aSUN workstation.1.
INTRODUCTIONThe processes underlying text understanding involve a variety ofcomplex, multifaceted activities which have not been yet completelyunderstood from the cognitive point of view, and which still lackadequate computational models.
Recent research trends in cogni-tive science and artificial intelligence, however, have put forwardsome ideas conoeming human cognition and automatic problemsolving that offer promising tools for the design of text understand-ing systems.One of the key ideas emerged in the field of cognitive study ofnatural language comprehension is that text understanding consti-tutes in humans an interactive process, where bottom-up, data-driven activities combine with top-down, expectation-driven ones tocooperatively determine the most I~ely interpretation of the input(Lesgoid and Perfetti, 1981).
Roughly speaking, humans begin witha set of expectations about what information is likely to be found inthe text.
These expectations are based both on linguisticknowledge (about words, phrases, sentences, and larger pieces ofdiscourse) and on non-linguistic world knowledge.
As informationfrom the text becomes available, the reader strengthens thosehypotheses that are consistent with the input and weakens thosethat are inconsistent.
The stronger hypotheses, in turn, make evenmore specific predictions about the information represented in thetext, so as the initial expectations are successively corrected andrefined until they eventually ield an adequate approximation of themeaning of the text.In one of the first and mere detailed descriptions of interactiveprocesses in text understanding, Rumelhart (1977) has proposed amodel comprising several knowledge sources, each one operatingindependently and in parallel with the others.
These knowledgesources are processors operating at different levels of linguisticrepresentation.
The outputs of each of these knowledge sourcesare hypotheses or best guesses from the data available at thatlevel.
The hypotheses are transferred to a central device, calledthe message center, where they can be observed by all otherknowledge sources, thus being available as evidence for or againsthypotheses at other levels.
In a more dynamic view of interaction,Levy (1981) suggests that the message center could modify theactivity of each individual processor.
That is, when a particularhypothesis has strong outside support, the analyzers of a particularknowledge source may change their own processing either to seekconfirming evidence for it or to accept that view and therefore stopanalyzing information that would otherwise have been tested.The idea of decomposing a difficult problem into a large number offunctionally distinct subproblems, each one being tackled by a spe-cialized problem solver, has been pursued with great interest in thelast years also in the field of artificial intelligence, where the area ofdistributed problem solving has developed into a much researchedand hot topic.
Several computational paradigms have been pro-posed, such as blackboard systems (for a review, see: Nil, 1986a;1986b), contract net (Davis and Smith, 1983), the scientific com-munity metaphor (Komfeid and Hewitt, 1981), FA/C systems(Lesser and Corkill, 1981) which proved appropriate to severaltasks and application domains.
As far as the field of text under-standing is concerned, we mention here the work of Cullingford(1981) on DSAM, the distributed script applier, in which an arbitrarynumber of distinct, potentially distributed, processors are used toread and summarize newspaper stories.In this paper we present a novel approach to the problem of textunderstanding through a distributed processing paradigm, wheredifferent knowledge sources come into play and cooperate in thecourse of comprehension.
In section two we deal with the rationaleof advocating such an approach and the advantages (and disad-vantages) in following it.
Section three illustrates the general archi-tecture of a prototype distributed parser, and describes themechanisms of coordination and communication among the variousknowledge sources.
In section four we present an example of theparser operation through the tracing of the analysis of a samplesentence.
Finally, section five deals with the current state of theimplementation and highlights the novelty and originality of theapproach.2.
RATIONALE AND TECHNICAL REQUIREMENTSSeveral reasons recommend and support the choice of a distributedapproach to text understanding.
From a cognitive point of view, it isindubitable that humans perform such an activity incrementally.That is, not all what can be derived from a text becomes evidentsince the very beginning.
Some features of the text are understoodalmost automatically and with minimum effort, others require morelabor, whereas still others become clear only after a thoughtful pro-cess.
This increasing depth of processing, which has differentialeffects about what is understood from the same piece of text75should be modeled also in an automatic system.
A distributed archi-tecture comprising a collection of specialized problem solvers (spe-cialists) with different skill and competence, and working withdifferent knowledge sources, seems a promising way to achieveincremsntallty.Such an architecture offers several advantages from a technicalpoint of view, too.
About these we mention:the possibility to adopt different echniques and methodologiesfor each specialist,the fact that specialists can be developed in isolation indepen-dently from each other;the possibility to change one or more specialists without imply-ing a global restructuring of the whole system,the robustness that can be achieved by overlapping the capabili-ties of different specialists.the facility in designing and debugging,The main problem in adopting a distributed approach is that of con-trol, i.e.
making the specialists cooperate.
As Cullingford (1981: 52)puts it, "...
In an ideal system each expert would become availableonly when needed, run only so long as it had something useful todo and communicate its findings to interested parties in an efficientmanner.
If an appropriate level of integration could be achieved,one could hope to improve the capabilities of an (mderstanding sys-tem by adding new knowledge sources, to reuse experts in differentproblem domains and to investigate the relative performance degra-dation due to removing various knowledge sources.
".In our approach we adopt a form of control based on the interactionof each individual specialist with a central manager, which super?vises and directs the overall operation of the system by coordinat-ing the autonomous activities of the specialists (bottom-upapproach), and by exploiting its own general problem solving stra-tegies (top-down approach),The prototype distributed parser which has been developed accord-ing to the ideas outlined above works in the domain of descriptivetext understanding, more precisely computer science literature onoperating systems.
It receives in input a natural language text andproduces in output a semantic representation of its meaning in theBLR/ELR representation language (Fum, Guida, and Tasso, 1984).Three main objectivers have been taken into account in the designof the parser:Incrementality of parsing and generation of the BLR/ELR.
ASthe parser has to cover a large variety of linguistic features andmust rely upon k number of different knowledge sources, itseems appropriate that both analysis of the input text and gen-eration of the BLR/ELR representation are carded out in a step-wise manner through successive additions and refinements.Also the structure itself of the BLR/ELR formalism, made up of acollection of propositions appropriately connected together andsupplemented with additional information (e.g., about time,quantification, etc.
), strongly suggests an incremental approachto parsing.Cognitive validity.
The parser should not only produce a correctBLR/ELR representation of the input text, but it should alsoshow some degree of linguistic competence in the way itoperates intemally.
In other words, it should provide an accept-able approximation of the basic mental processes that occur inhumans.Effectiveness.
The parser should be capable of operating in anefficient and correct way in non-trivial cases.
Moreover, theparser should be easy to design and debug.3.
A DISTRIBUTED ARCHITECTURE3.1 Overall System ArchitectureAs mentioned above, our distributed parser is constituted by a col-lection of individual specialists, each one expert in a facet of theparsing problem (e.g., syntactic analysis, disambiguation, reference,semantics, time, quantification, BLR/ELR construction, etc.).
Eachspecialist is an autonomous problem solver, which has its own com-petence domain, where it can operate with certain and completeknowledge.
However, it is assumed that no specialist has enoughknowledge and competence to cover the whole parsing activity: all(or most) of them are necessary to successfully complete the pars-ing of a complex text.
Moreover, we assume that specialists maybe heterogeneous, i.e., implemented using different technologies(e.g., a deterministic algorithm, a knowledge-based system, etc.
).Also, they may have partially overlapping competence areas, andeven be redundant, i.e.
there may be several specialists for thesame task (e.g., for syntactic analysis).
As we have stated thatspecialists are independent problem solvers, we also assume thatthey have no mutual knowledge: they do not know about eachother, they do not even know about the existence of other special-ists.
This assumption is very important o allow a fully independentdesign of an individual specialist, without bothering about the oth-ers.Each specialist can solve a well defined class of problems, andonce a problem has been assigned to it, it can result in threedifferent outcomes:succeas, i.e.
the problem assigned has been solved and itssolution produced;fail, i.e.
the specialist has been unable to solve the problem andan alarm message is returned;need-help, i.e.
the specialist has been successful in decompos-ing and partially solving the problem at hand, but it needs helpfrom outside to proceed further in the solution process.
In thiscase, the current problem is suspended, and (sub)problems aregenerated for which solutions are needed.The intemal operation of each specialist is not of interest here, aswe have assumed that they may be heterogeneous.
What is crucialis the interface they show towards the outside which is expected tobe very simple.
A specialist may receive a problem to solve, andissue a solution, other problems, or an alarm.
It may also receive asolution to one of the (sub)problems it has previously generated,which will be used to resume the solution process of somesuspended problem.3.2 Communication and Control MechanismsSpecialists are not allowed to directly communicate to each other,but can only communicate to a cooperation manager, which is incharge of organizing and controlling the overall activity of theparser.
It embodies knowledge about:the actual architecture of the system, i.e.
how many and whichspecialists are available;the competence of each individual specialist;how to match problems to specialists in order to exploit in thebest way their specific capabilities;how to schedule the activity of the specialists, i.e.
which special-ists to activate first, taking into account priority and redundancyproblems;how to correctly switch messages among specialists.76The communication between specialists and the cooperationmanager occurs according to a fixed protocol which includes threebasic types of messages, namely: prob/ems, solutions, and alarms.as already outlined above.The working memory of the parser is a partitioned shared memory,where each specialist can read and write in its own partition only,but has full visibility on the entire memory.
Clearly, in order to allowspecialists to work correctly on the shared memory, it is necessarythat a common representation language is adopted, at least forinformation that may conoem more than one specialist.The operation of the cooperation manager is basically message-driven: it is all the time waiting for messages and, as soon asmessages arrive from the specialists, they are stored in a bufferand later examined and treated according to some specific policy(e.g., the pdority of the messages or their origin may be taken intoaccount).
The cooperation manager is in charge of three mainactivities:it assigns problems to specialists according to their competence,current work load, etc.
;- it passes solutions to the relevant specialists (i.e., those whoissued the (sub)problem to which the solution refers);it manages alarms (e.g., by resorting to alternative specialistswith similar or overlapping competence).The cooperation manager, however, in addition to the above men-tioned message handling capability, has also its own strategies thatcan override, when needed, the basic message-driven style, thusaffecting the overall operation of the parser.
These strategies, thatembed knowledge about "how to manage the parsing task", arecrucial to the successful activity of the parser H we really want toallow individual specialists to be designed and constructed indepen-dently from each other.
In fact, as no global strategy is coded in thesystem, if must be explicitly assigned as an additional competenceto the cooperation manager.3.3 The SpecialistsAs illustrated above, our distn'buted parser is well suited to host alarge vadety of specialists.
We will briefly list in the following someof those utilized in the current implementation of the system.The Morphology Specialist (MS) is devoted to perform the mor-phological analysis of each word, i.e.
extracting from the Diction-ary all the relevant information and determining the appropriatemorphological types and variables.The Encyclopedia Specialist (ES) is able to access the Encyclo-pedia for extracting semantic information and world knowledge.The Syntax Specialist (SYS) is able to identify the constituentsof a sentence and to build up a parse tree.
The current versionis implemented through a context-froe grammar augmented withtransformational rules.The Semantics Specialist (SES) is devoted to a semanticanalysis of a sentence performed only through semantic infor-mation, discarding any syntactic processing.The Syntax-Semantics Specialist (SSS) is able to complementsemantic analysis with available syntactic information (and vice-versa) in order, for example, to resolve ambiguities.The 77me Specialist (TS) is able to attach to each proposition ofthe BLR/ELR the appropriate temporal information.The Reference Specialist (RS) is devoted to analyze pronominaland anaphoric references.The Quantification Specialist (QS) is capable of identifying theappropriate quantifier to attach to each concept in the BLR/ELR.The BLRIELR Generator Specialist (BEGS) is devoted tointegrate all the information useful to actually build up theBLR/ELR representation of the meaning of the text.4.
EXPERIMENTAL  RESULTSIn this section we will shortly illustrate some of the most significantcharacteristics of the parsing process by means of the analysis of asimple sentence extracted from a text on operating systems.
Let usconsider the following fragment of text:"... An integer priority is assigned by the scheduler to each processin the ready-queue...."The Cooperation Manager, hereinafter CM, is devoted to organizethe work of the specialists which are able to solve specific parts ofthe overall problem.
In the current version, the CM largely relies onthe BEGS specialist for structudng the parsing process and for gen-erating the BLR/ELR: each sentence in the text is processed oneafter the other, from left to right.
We will discard in this illustrationall the details concerning this specialist, as well as other specialistswhich are not essential for understanding the system operations.Moreover, we will not describe how the management of the sharedmemory and its partitions is actually carded on.As already mentioned, the CM can implement several parsing stra-tegies by forcing different ways of organizing the contribution of thespecific specialists to the solution of the overall task.
It is importantto stress that the proposed architecture allows to change quiteeasily the strategy adopted.
In this example, a semantics-directedparsing wilt be shown.
More specifically, when the sample sentenceshown above is considered, the CM will assign the problem ofsemantically analyzing the sentence to all the specialists potentiallycapable to perform such an analysis (in the current version, SESand SSS).
At the same time, it will assign to QS, RS, and TS thequantification, reference, and temporal analysis task, respectively.Appropriate problem messages will be sent to each of them, suchfor example:To: SESFrom: CMProblem: Semantic AnalysisOn: < ... the current sentence ... >Priority: Auxiliary.Also the message requesting semantic analysis from SSS will havean Auxiliary pdonty since for the same problem more than onespecialist is engaged and can possibly find a correct answer.
When,later on, one of them will possibly recognize its inability to correctlycomplete the task, it will send back to the CM a message contain-ing an alarm, causing in such a way a change in the priority of thesemantic analysis problem, that will become Fatal The other threemessages sent by the CM to RS, QS, and TS will have a Fatalpriority, because no alternative specialists are able to contribute tothe solution of that part of the overall problem.After these initial problem assignments, the CM enters a suspendedstate, which will be resumed whenever messages from any of thespecialists will be received.
RS, QS, and TS can generally carry ontheir activity only alter some semantic information about the sen-tence has been provided.
To this purpose, all these three special-isis will send to the CM a message of the kind77To: CMFrom:Problem: "'Semantic AnalysisOn: < ... the current sentence ... ?Priority: Fatal.The use of a Fatal priority will cause a synchronization of the threespecialists with the completion of semantic analysis, since theiractivity will be suspended as long as they will not receive beck fromthe CM a solution message containing an answer to this problem.In this case, CM has already sent appropriate requests conoemingthe semantic analysis, and therefore all the activities will remainsuspended until completion of the task.As noted above, beth the SES and SSS specialists are called togive their contribution to semantic analysis.
The first that will comeup with a complete solution will allow the CM to answer RS, QS,and TS.In this specific case SES is able to answer only partially.
Semanticinformation on the concepts in the sentence will be requestedthrough a problem message that the CM will forward to ES.
Theinformation that ES is able to extract from the Encyclopedia willinclude the following fragments:(INTEGER(Relation INTEGER (VALUED-THING))(PRIORITY(Entity PRIORITY(Is-a COMPARABLE-THING, VALUED-THING,ASSIGNABLE-THING, ...)(ASSIGN(Relation ASSIGN (ASSIGNER, ASSIGNABLE-THING,ASSIGNEE))(Arg-Rolas(ASSIGNER Subject)(ASSIGNABLE-THING Object)(ASSIGNEE To))(SCI~EDULER(Entity SCHEDULER)(la-a PROCESS ... ))(PROCESS(Entity PROCESS)(Is-a PROGRAM, MODIFIER, ASSIGNER, ASSIGNEE .... )).
.
.Through Is-a Inheritance, SES will correctly infer that INTEGER ispredicated about PRIORITY, but also that both the conceptsSCHEDULER and PROCESS could correctly instantiate both thefirst and the third argument of ASSIGN.
This allows construction ofthe following BLR piece:10 ASSIGN ( ?
,/PRIORITY/, ?
)20 INTEGER (/PRIORITY/)where the slash indicates that neither quantification, nor referenceor temporal information are included yet in the BLR.As syntactic information is not taken into account, SES sends analarm message to the CM, since unable to build up the completesolution.On the other hand, SSS will succeed by integrating syntactic infor-mation provided by SS, and the semantic information shown above.SS needs also morphological information contained in the Diction-ary, that will be requested through an appropriate message to theCM.
The outcome produced by SSS is a mere complete version ofthe BLR, containing:10 ASSIGN (/SCHEDULER/,/PRIORITY/,/PROCESS/)20 INTEGER (/PRIORITY/)30 LOC (/PROCESS/,/READY-QUEUE/),where the ambiguity of considering READY-QUEUE as an argu-ment of ASSIGN Or as an argument of the predicate LOC (relativeto the preposition "in') has been resolved by means of semanticagreement between predicates and arguments.
This solution willallow the CM to send an answer to the three suspended specialistsQS, RS, and TS, that will resume their operation.It is interesting to illustrate how QS, RS, and TS can cooperatetogether.QS starts its processing from the logical subject of the sentence,i.e.
SCHEDULER.
In order to determine whether the definite articleshould be considered as indicating an anaphoric reference or some-thing else, it will send the following problem message to the CM:To: CMFrom: QSProblem: Referent-ofOn: SCHEDULERPriority: Fatalthat will be forwarded to RS.
Two things could happen at this point:the concept was already mentioned in previous parts of the text andRS will send beck the corresponding identifier as a solution, or theconcept was not mentioned before in the text, and RS will answerthat this is the first occurrence of SCHEDULER.
In the formercase, QS will quantify the entity with an existential quantification.
Inthe latter case, the need arises of considering also the tense of theverb, that can be provided by TS.
The present tense of "isassigned' makes QS decide for a universal quantification (Hess,1985), i.e.
"every scheduler assigns a priority'.Assuming the latter interpretation, QS will continue its processingwith READY-QUEUE.
Again RS will check whether a previousreference exists.
Since this is not the case, RS looks for implicitreferences.
The ES can provide an answer to this request, since inthe SCHEDULER frame of the Encyclopedia it is stated that"schedulers are associated with waiting-queues, ready-queues,etc.'.
READY-QUEUE is then considered to be one of the ready-queues associated with SCHEDULER.
Moreover, since scheduler isalready universally quantified, it will result that READY-QUEUE isexistentially quantified with respect to SCHEDULER, i.e.
"for everyscheduler there exists a ready-queue".This kind of process is carded on until eventually BEGS willintegrate all the contributions of the other specialists, producing thefollowing BLR/ELR:10 ASSIGN (SCHEDULER:XO, F0(X1), TYPE0:X1, PERM)20 *PRIORITY (F0(X1))30 INTEGER (F0(Xl))40 $DEFINE (TYPE0, LAMBDA (Z0))50 "PROCESS (Z0)60 LOC (Z0, FI(X0))70 "READY-QUEUE (FI(X0)).An important aspect of the operation of CM is worthy to be stressedagain: all the problem messages that CM receives do not containany explicit suggestion on the specialist(s) that should be invoked.It is specific responsibility of the CM to menage these assignmentsby means of a specific knowledge base devoted to this task.
In thecurrent version of the system this is implemented through a simplerule-based mechanism.785.
CONCLUSIONSIn the paper we have presented a novel approach to text under-standing which is supported by an experimental parser based on adistributed architecture.
The originality of this approach consists inutilizing a shared memory and a centralized control for managing adistributed processing environment.
This allows implementation of avery flexible behavior, resulting from the dynamic interactionbetween a supervisor (the Communication Manager), which ela-borates heuristic strategies involving several knowledge sources,and a set of independent specialists which individually contribute tothe overall problem solving process.
The parser works in thedomain of computer science literature on operating system and hasbeen implemented in a prototype version in Franz-LISP on a SUN 2workstation.ReferencesCuUingford, R.E.
(1981) Integrating Knowledge Sources for Com-puter "Understanding" Tasks.
IEEE Transactions on Systems,Man, and Cybernetics, 11: 52-60.Davis, R. and Smith, R.G.
(1983) Negotiation as a Metaphor forDistributed Problem Solving.
Artificial Intelligence, 20: 63-109.Fum, D., Guida, G., and Tasso, C. (1984) A PropositionalLanguage for Text Representation.
In: B.G.
Bara and G. Guida(Eds), Computational Models of Natural Language Processing,Amstardam,NL: Elsevier.Hess, M. (1985) How Does Natural Language Quantify?
Proc.Second Conference.
of the European Chapter of ACL, Geneva, CH:8-15.Komfeld, W.A.
and Hewitt, C.E.
(1981) The Scientific CommunityMetaphor.
IEEE Transactions on Systems, Man, and Cybernetics,11: 24-33.Lesgold, A.M. and PerfetU, C.A.
(1981) Interactive Processes inReading.
Hillsdala, NJ: Erlbaum.Lesser, V.C.
and Cod<ill, D.D.
(1981) Functionally Accurate,Cooperative Distributed Systems.
IEEE Transactions on Systems,Man, and Cybernetics, 11: 81-96.Levy, B.A.
(1981) Interactive Processes during Reading.
In: A.M.Lesgold and C.A.
Perfatti (Eds), Interactive Processes in Reading.Hillsdale, NJ: Erlbaum.Nil, H.P.
(1986a) Blackboard Systems: The Blackboard Model ofProblem Solving and the Evolution o!
Blackboard Architectures.
AIMagazine, 7: 38-53.Nil, H.P.
(1986b) Blackboard Systems: Blackboard Application Sys-tems, Blackboard Systems from a Knowledge Engineering Perspec-tive.
AI Magazine, 7: 82-106.Rumelhart, D.E.
(1977) Toward an Interactive Model of Reading.In: S. Dormic and P. Rabbitt (Eds.
), Attention and Performance VI,Hillsdala, NJ: Edbaum.
?9
