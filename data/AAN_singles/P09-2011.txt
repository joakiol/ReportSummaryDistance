Proceedings of the ACL-IJCNLP 2009 Conference Short Papers, pages 41?44,Suntec, Singapore, 4 August 2009.c?2009 ACL and AFNLPIncremental Parsing with Monotonic Adjoining OperationYoshihide Kato and Shigeki MatsubaraInformation Technology Center, Nagoya UniversityFuro-cho, Chikusa-ku, Nagoya, 464-8601 Japan{yosihide,matubara}@el.itc.nagoya-u.ac.jpAbstractThis paper describes an incremental parserbased on an adjoining operation.
By usingthe operation, we can avoid the problemof infinite local ambiguity in incrementalparsing.
This paper further proposes a re-stricted version of the adjoining operation,which preserves lexical dependencies ofpartial parse trees.
Our experimental re-sults showed that the restriction enhancesthe accuracy of the incremental parsing.1 IntroductionIncremental parser reads a sentence from left toright, and produces partial parse trees which spanall words in each initial fragment of the sentence.Incremental parsing is useful to realize real-timespoken language processing systems, such as a si-multaneous machine interpretation system, an au-tomatic captioning system, or a spoken dialoguesystem (Allen et al, 2001).Several incremental parsing methods have beenproposed so far (Collins and Roark, 2004; Roark,2001; Roark, 2004).
In these methods, the parserscan produce the candidates of partial parse treeson a word-by-word basis.
However, they sufferfrom the problem of infinite local ambiguity, i.e.,they may produce an infinite number of candidatesof partial parse trees.
This problem is caused bythe fact that partial parse trees can have arbitrar-ily nested left-recursive structures and there is noinformation to predict the depth of nesting.To solve the problem, this paper proposes an in-cremental parsing method based on an adjoiningoperation.
By using the operation, we can avoidthe problem of infinite local ambiguity.
This ap-proach has been adopted by Lombardo and Sturt(1997) and Kato et al (2004).
However, thisraises another problem that their adjoining opera-tions cannot preserve lexical dependencies of par-tial parse trees.
This paper proposes a restrictedversion of the adjoining operation which preserveslexical dependencies.
Our experimental resultsshowed that the restriction enhances the accuracyof the incremental parsing.2 Incremental ParsingThis section gives a description of Collins andRoark?s incremental parser (Collins and Roark,2004) and discusses its problem.Collins and Roark?s parser uses a grammar de-fined by a 6-tuple G = (V, T, S,#, C,B).
V isa set of nonterminal symbols.
T is a set of ter-minal symbols.
S is called a start symbol andS ?
V .
# is a special symbol to mark the endof a constituent.
The rightmost child of every par-ent is labeled with this symbol.
This is necessaryto build a proper probabilistic parsing model.
Cis a set of allowable chains.
An allowable chainis a sequence of nonterminal symbols followed bya terminal symbol.
Each chain corresponds to alabel sequence on a path from a node to its left-most descendant leaf.
B is a set of allowabletriples.
An allowable triple is a tuple ?X,Y, Z?where X,Y, Z ?
V .
The triple specifies whichnonterminal symbol Z is allowed to follow a non-terminal symbol Y under a parent X .For each initial fragment of a sentence, Collinsand Roark?s incremental parser produces partialparse trees which span all words in the fragment.Let us consider the parsing process as shownin Figure 1.
For the first word ?we?, the parserproduces the partial parse tree (a), if the allowablechain ?S ?
NP ?
PRP ?
we?
exists in C. Forother chains which start with S and end with ?we?,the parser produces partial parse trees by using thechains.
For the next word, the parser attaches thechain ?VP?VBP?
describe?
to the partial parsetree (a)1.
The attachment is possible when the al-lowable triple ?S, NP, VP?
exists in B.1More precisely, the chain is attached after attaching end-of-constituent# under the NP node.41WePRPNP S(a)WePRPNP S(b)describeVBPVPWePRPNP S(c)describeVBPVP NPDTaWePRPNP S(d)describeVBPVP NPDTaWePRPNP S(e)describeVBPVP NPDTaNPNPNPFigure 1: A process in incremental parsing2.1 Infinite Local AmbiguityIncremental parsing suffers from the problem ofinfinite local ambiguity.
The ambiguity is causedby left-recursion.
An infinite number of partialparse trees are produced, because we cannot pre-dict the depth of left-recursive nesting.Let us consider the fragment ?We describe a.?For this fragment, there exist several candidates ofpartial parse trees.
Figure 1 shows candidates ofpartial parse trees.
The partial parse tree (c) rep-resents that the noun phrase which starts with ?a?has no adjunct.
The tree (d) represents that thenoun phrase has an adjunct or is a conjunct of acoordinated noun phrase.
The tree (e) representsthat the noun phrase has an adjunct and the nounphrase with an adjunct is a conjunct of a coordi-nated noun phrase.
The partial parse trees (d) and(e) are the instances of partial parse trees whichhave left-recursive structures.
The major problemis that there is no information to determine thedepth of left-recursive nesting at this point.3 Incremental Parsing Method Based onAdjoining OperationIn order to avoid the problem of infinite local am-biguity, the previous works have adopted the fol-lowing approaches: (1) a beam search strategy(Collins and Roark, 2004; Roark, 2001; Roark,2004), (2) limiting the allowable chains to thoseactually observed in the treebank (Collins andRoark, 2004), and (3) transforming the parse treeswith a selective left-corner transformation (John-son and Roark, 2000) before inducing the al-lowable chains and allowable triples (Collins andRoark, 2004).
The first and second approaches canprevent the parser from infinitely producing partialparse trees, but the parser has to produce partialparse trees as shown in Figure 1.
The local ambi-guity still remains.
In the third approach, no leftrecursive structure exists in the transformed gram-mar, but the parse trees defined by the grammar aredifferent from those defined by the original gram-mar.
It is not clear if partial parse trees defined bythe transformed grammar represent syntactic rela-tions correctly.As an approach to solve these problems, weintroduce an adjoining operation to incrementalparsing.
Lombardo and Sturt (1997) and Katoet al (2004) have already adopted this approach.However, their methods have another problem thattheir adjoining operations cannot preserve lexicaldependencies of partial parse trees.
To solve thisproblem, this section proposes a restricted versionof the adjoining operation.3.1 Adjoining OperationAn adjoining operation is used in Tree-AdjoiningGrammar (Joshi, 1985).
The operation inserts atree into another tree.
The inserted tree is called anauxiliary tree.
Each auxiliary tree has a leaf calleda foot which has the same nonterminal symbol asits root.
An adjoining operation is defined as fol-lows:adjoining An adjoining operation splits a parsetree ?
at a nonterminal node ?
and inserts anauxiliary tree ?
having the same nonterminalsymbol as ?, i.e., combines the upper tree of?
with the root of ?
and the lower tree of ?with the foot of ?.We write a?,?(?)
for the partial parse tree obtainedby adjoining ?
to ?
at ?.We use simplest auxiliary trees, which consistof a root and a foot.As we have seen in Figure 1, Collins andRoark?s parser produces partial parse trees such as(c), (d) and (e).
On the other hand, by using theadjoining operation, our parser produces only thepartial parse tree (c).
When a left-recursive struc-ture is required to parse the sentence, our parseradjoins it.
In the example above, the parser adjoinsthe auxiliary tree ?NP ?
NP?
to the partial parsetree (c) when the word ?for?
is read.
This enables42WePRP*NP SdescribeVBP*VP* NPa  method WePRP*NP SdescribeVBP*VP* NPa  methodadjoiningNP* WePRP*NP SdescribeVBP*VP* NPa  methodNP* PPforIN*Figure 2: Adjoining operationWePRP*NP SdescribeVBP*VP* NPJohn  's WePRP*NP SdescribeVBP*VP* NPadjoining NPJohn  'sWe  describe  John  's We  describe  John  's(a) (b)WePRP*NP SdescribeVBP*VP* NPNPJohn  'sWe  describe  John  's  method(c)NN*methodFigure 3: Non-monotonic adjoining operationthe parser to attach the allowable chain ?PP ?
IN?
for?.
The parsing process is shown in Figure 2.3.2 Adjoining Operation and MonotonicityBy using the adjoining operation, we avoid theproblem of infinite local ambiguity.
However, theadjoining operation cannot preserve lexical depen-dencies of partial parse trees.
Lexical dependencyis a kind of relation between words, which repre-sents head-modifier relation.
We can map parsetrees to sets of lexical dependencies by identifyingthe head-child of each constituent in the parse tree(Collins, 1999).Let us consider the parsing process as shownin Figure 3.
The partial parse tree (a) is a can-didate for the initial fragment ?We describe John?s?.
We mark each head-child with a special sym-bol ?.
We obtain three lexical dependencies ?We?
describe?, ?John ?
?s?
and ?
?s ?
describe?from (a).
When the parser reads the next word?method?, it produces the partial parse tree (b) byadjoining the auxiliary tree ?NP ?
NP?.
The par-tial parse tree (b) does not have ?
?s ?
describe?.The dependency ?
?s ?
describe?
is removed whenthe parser adjoins the auxiliary tree ?NP ?
NP?
to(a).
This example demonstrates that the adjoiningoperation cannot preserve lexical dependencies ofpartial parse trees.Now, we define the monotonicity of the adjoin-ing operation.
We say that adjoining an auxiliarytree ?
to a partial parse tree ?
at a node ?
is mono-tonic when dep(?)
?
dep(a?,?(?))
where dep isthe mapping from a parse tree to a set of dependen-cies.
An auxiliary tree ?
is monotonic if adjoining?
to any partial parse tree is monotonic.We want to exclude any non-monotonic auxil-iary tree from the grammar.
For this purpose, werestrict the form of auxiliary trees.
In our frame-work, all auxiliary trees satisfy the following con-straint:?
The foot of each auxiliary tree must be thehead-child of its parent.The auxiliary tree ?NP ?
NP??
satisfies the con-straint, while ?NP ?
NP?
does not.3.3 Our Incremental ParserOur incremental parser is based on a probabilisticparsing model which assigns a probability to eachoperation.
The probability of a partial parse tree isdefined by the product of the probabilities of theoperations used in its construction.
The probabil-ity of attaching an allowable chain c to a partialparse tree ?
is approximated as follows:P (c | ?)
= Proot(R | P,L,H, tH, wH,D)?Ptemplate(c?| R,P,L,H)?Pword(w | c?, th, wh)where R is the root label of c, c?is the sequencewhich is obtained by omitting the last elementfrom c and w is the last element of c. The proba-bility is conditioned on a limited context of ?.
Pis a set of the ancestor labels of R. L is a set of theleft-sibling labels of R. H is the head label in L.wHand tHare the head word and head tag of H ,respectively.
D is a set of distance features.
whand thare the word and POS tag modified by w,respectively.
The adjoining probability is approxi-mated as follows:P (?
| ?)
= Padjoining(?
| P,L,H,D)where ?
is an auxiliary tree or a special symbolnil, the nil means that no auxiliary tree is ad-joined.
The limited contexts used in this modelare similar to the previous methods (Collins andRoark, 2004; Roark, 2001; Roark, 2004).To achieve efficient parsing, we use a beamsearch strategy like the previous methods (Collinsand Roark, 2004; Roark, 2001; Roark, 2004).
Foreach word position i, our parser has a priorityqueue Hi.
Each queue Histores the only N -best43Table 1: Parsing resultsLR(%) LP(%) F(%)Roark (2004) 86.4 86.8 86.6Collins and Roark (2004) 86.5 86.8 86.7No adjoining 86.3 86.8 86.6Non-monotonic adjoining 86.1 87.1 86.6Monotonic adjoining 87.2 87.7 87.4partial parse trees.
In addition, the parser discardsthe partial parse tree ?
whose probability P (?)
isless than the P??
where P?is the highest proba-bility on the queue Hiand ?
is a beam factor.4 Experimental EvaluationTo evaluate the performance of our incrementalparser, we conducted a parsing experiment.
Weimplemented the following three types of incre-mental parsers to assess the influence of the ad-joining operation and its monotonicity: (1) with-out adjoining operation, (2) with non-monotonicadjoining operation, and (3) with monotonic ad-joining operation.
The grammars were extractedfrom the parse trees in sections 02-21 of the WallStreet Journal in Penn Treebank.
We identified thehead-child in each constituent by using the headrule of Collins (Collins, 1999).
The probabilisticmodels were built by using the maximum entropymethod.
We set the beam-width N to 300 and thebeam factor ?
to 10?11.We evaluated the parsing accuracy by using sec-tion 23.
We measured labeled recall and labeledprecision.
Table 1 shows the results2.
Our in-cremental parser is competitive with the previousones.
The incremental parser with the monotonicadjoining operation outperforms the others.
Theresult means that our proposed constraint of auxil-iary trees improves parsing accuracy.5 ConclusionThis paper has proposed an incremental parserbased on an adjoining operation to solve the prob-lem of infinite local ambiguity.
The adjoiningoperation causes another problem that the parsercannot preserve lexical dependencies of partialparse trees.
To tackle this problem, we defined2The best results of Collins and Roark (2004)(LR=88.4%, LP=89.1% and F=88.8%) are achieved whenthe parser utilizes the information about the final punctuationand the look-ahead.
However, the parsing process is noton a word-by-word basis.
The results shown in Table 1 areachieved when the parser does not utilize such informations.the monotonicity of adjoining operation and re-stricted the form of auxiliary trees to satisfy theconstraint of the monotonicity.
Our experimentalresult showed that the restriction improved the ac-curacy of our incremental parser.In future work, we will investigate the incre-mental parser for head-final language such asJapanese.
Head-final language includes many in-direct left-recursive structures.
In this paper, wedealt with direct left-recursive structures only.
Toprocess indirect left-recursive structures, we needto extend our method.ReferencesJames Allen, George Ferguson, and Amanda Stent.2001.
An architecture for more realistic conver-sational systems.
In Proceedings of InternationalConference of Intelligent User Interfaces, pages 1?8.Michael Collins and Brian Roark.
2004.
Incremen-tal parsing with the perceptron algorithm.
In Pro-ceedings of the 42nd Meeting of the Association forComputational Linguistics (ACL?04), Main Volume,pages 111?118, Barcelona, Spain, July.Michael Collins.
1999.
Head-Driven Statistical Mod-els for Natural Language Parsing.
Ph.D. thesis,University of Pennsylvania.Mark Johnson and Brian Roark.
2000.
Compactnon-left-recursive grammars using the selective left-corner transform and factoring.
In Proceedings ofthe 18th International Conference on ComputationalLinguistics, pages 355?361, July.Aravind K. Joshi.
1985.
Tree adjoining grammars:How much context sensitivity is required to providea reasonable structural description?
In David R.Dowty, Lauri Karttunen, and Arnold M. Zwicky, ed-itors, Natural Language Parsing, pages 206?250.Cambridge University Press.Yoshihide Kato, Shigeki Matsubara, and Yasuyoshi In-agaki.
2004.
Stochastically evaluating the valid-ity of partial parse trees in incremental parsing.
InProceedings of the ACLWorkshop Incremental Pars-ing: Bringing Engineering and Cognition Together,pages 9?15, July.Vincenzo Lombardo and Patrick Sturt.
1997.
Incre-mental processing and infinite local ambiguity.
InProceedings of the 19th Annual Conference of theCognitive Science Society, pages 448?453.Brian Roark.
2001.
Probabilistic top-down parsingand language modeling.
Computational Linguistics,27(2):249?276, June.Brian Roark.
2004.
Robust garden path parsing.
Nat-ural language engineering, 10(1):1?24.44
