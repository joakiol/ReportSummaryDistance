Proceedings of the Linguistic Annotation Workshop, pages 17?24,Prague, June 2007. c?2007 Association for Computational LinguisticsMining Syntactically Annotated Corpora with XQueryGosse Bouma and Geert KloostermanInformation ScienceUniversity of GroningenThe Netherlandsg.bouma|g.j.kloosterman@rug.nlAbstractThis paper presents a uniform approach todata extraction from syntactically annotatedcorpora encoded in XML.
XQuery, whichincorporates XPath, has been designed asa query language for XML.
The combina-tion of XPath and XQuery offers flexibilityand expressive power, while corpus specificfunctions can be added to reduce the com-plexity of individual extraction tasks.
We il-lustrate our approach using examples fromdependency treebanks for Dutch.1 IntroductionManually annotated treebanks have played an im-portant role in the development of robust and ac-curate syntactic analysers.
Now that such parsersare available for various languages, there is a grow-ing interest in research that uses automatically an-notated corpora.
While such corpora are not error-free, the fact that they can be constructed rela-tively easily, and the fact that they can be an orderof magnitude larger than manually corrected tree-banks, makes them attractive for several types of re-search.
Syntactically annotated corpora have suc-cesfully been used to acquire lexico-semantic infor-mation (Lin and Pantel, 2001; Snow et al, 2005), forrelation extraction (Bunescu and Mooney, 2005), inIR (Cui et al, 2005), and in QA (Katz and Lin, 2003;Molla?
and Gardiner, 2005).What these tasks have in common is the fact thatthey all operate on large amounts of data extractedfrom syntactically annotated text.
Tools to performthis task are often developed with only a single ap-plication in mind (mostly corpus linguistics) or aredeveloped in an ad-hoc fashion, as part of a specificapplication.We propose a more principled approach, based ontwo observations:?
XML is widely used to encode syntactic anno-tation.
Syntactic annotation is not more com-plex that some other types of information thatis routinely stored in XML.
This suggests thatXML technology can be used to process syn-tactically annotated corpora.?
XQuery is a query language for XML data.
Assuch, it is the obvious choice for mining syn-tactically annotated corpora.The remainder of this paper is organised as fol-lows.
In the next section, we present the Alpino tree-bank format, which we use for syntactic annotation.The Alpino parser has been used to annotate largecorpora, and the results have been used in a numberof research projects.1In section 3, we discuss the existing approachesto data extraction from Alpino corpora.
We note thatall of these have drawbacks, either because they lackexpressive power, or because they require a seriousamount of programming overhead.In section 4, we present our approach, startingfrom a relatively straightforward corpus linguisticstask, that requires little more than XPath, and end-ing with a more advanced relation extraction task,1See www.let.rug.nl/?vannoord/research.html17that requires XQuery.
We demonstrate that much ofthe complexity of advanced tasks can be avoided byproviding users with a corpus specific module, thatmakes available common concepts and functions.2 The Alpino Treebank formatAs part of the development of the Alpino parser(Bouma et al, 2001), a number of manually an-notated dependency treebanks have been created(van der Beek et al, 2002).
Annotation guidelineswere adopted from the Corpus of Spoken Dutch(Oostdijk, 2000), a large corpus annotation projectfor Dutch.
In addition, large corpora (e.g.
the 80Mword Dutch CLEF2 corpus, the 500M word TwenteNews corpus3, and Dutch Wikipedia4) have beenannotated automatically.
Both types of treebankshave been used for corpus linguistics (van der Beek,2005; Villada Moiro?n, 2005; Bouma et al, 2007).The automatically annoted treebanks have been usedfor lexical acquisition (van der Plas and Bouma,2005), and form the core of a Dutch QA system(Bouma et al, 2005).The format of Alpino dependency trees is illus-trated in figure 1.
The (somewhat simplified) XMLfor this tree is in fig.
2.
Nodes in the tree are labeledwith a dependency relation and a category or POS-tag.
Furthermore, the begin and end position of con-stituents is represented in attributes,5 and the rootand word form of terminal nodes is encoded.
Notethat heads do not have their dependents as children,as is the case in most dependency tree formats.
In-stead, the head is a child of the constituent node ifwhich it is the head, and its dependents are siblingsof the head.
Finally, trees may contain index nodes(indicated by indices in bold in the graphical repre-sentation and by the index attribute in the XML) toindicate ?secondary?
edges.
The subject Alan Turingin fig.
2 is a subject of the passive auxiliary word,but also a direct object of the verb aan tref.
Thus,Alpino dependency trees are actually graphs.A large syntactically annotated corpus tends to2www.clef-campaign.org3www.vf.utwente.nl/?druid/TwNC/TwNC-main.html4nl.wikipedia.org5Note that constituents may be discontinuous, and thus, theyield of a constituent may not contain every terminal node be-tween begin and end.
See also section 4.2.?smainhdverbword4su1mwumwpnameAlan5mwpnameTuring6vcppartmodpphdprepop0obj1mwumwpnoun71mwpnounjuni2mwpnoun19543obj11predcadjdood7hdverbtref aan8Figure 1: Op 7 juni 1954 werd Alan Turing doodaangetroffen (On June 7, 1954, Alan Turing wasfound dead)give rise to even larger volumes of XML.
To sup-port efficient storage and retrieval of XML data, aset of tools has been developed for compression ofXML data (using dictzip6) and for efficient visuali-sation and search of data in compressed XML files.The tools are described in more detail at the Alpinowebsite.73 Existing approaches to extractionUsers have taken quite different approaches to cor-pus exploration and data extraction.?
For corpus exploration, Alpino dtsearch isthe most widely used tool.
It allows XPathqueries to be matched against trees in a tree-bank.
The result can be a visual display of treeswith matching nodes highlighted, but alterna-tive outputs are possible as well.
Examples ofhow XPath can be used for extraction are pre-sented in the next section.?
For relation extraction (i.e.
finding symptomsof diseases), the Alpino system itself has been6www.dict.org7www.let.rug.nl/?vannoord/alp/Alpino/TreebankTools.html18<node begin="0" cat="smain" end="9" rel="--"><node begin="4" end="5" pos="verb" rel="hd" root="word" word="werd"/><node begin="5" cat="mwu" end="7" index="1" rel="su"><node begin="5" end="6" pos="name" rel="mwp" neclass="PER" root="Alan" word="Alan"/><node begin="6" end="7" pos="name" rel="mwp" neclass="PER" root="Turing" word="Turing"/></node><node begin="0" cat="ppart" end="9" rel="vc"><node begin="0" cat="pp" end="4" rel="mod"><node begin="0" end="1" pos="prep" rel="hd" root="op" word="Op"/><node begin="1" cat="mwu" end="4" rel="obj1"><node begin="1" end="2" pos="noun" rel="mwp" root="7" word="7"/><node begin="2" end="3" pos="noun" rel="mwp" root="juni" word="juni"/><node begin="3" end="4" pos="noun" rel="mwp" root="1954" word="1954"/></node></node><node begin="5" end="7" index="1" rel="obj1"/><node begin="7" end="8" pos="adj" rel="predc" root="dood" word="dood"/><node begin="8" end="9" pos="verb" rel="hd" root="tref_aan" word="aangetroffen"/></node></node>Figure 2: XML encoding of the Alpino depedency tree in fig.
1used.
It provides functionality for convertingdependency trees in XML into a Prolog list ofdependency triples.
The full functionality ofProlog can then be used to do the actual extrac-tion.?
Alternatively, one can use XSLT to extract datafrom the XML directly.
As XSLT is primarilyintended for transformations, this tends to giverise to complex code.?
Alternatively, a general purpose scripting orprogramming language such as Perl or Python,with suitable XML support, can be used.
As inthe Alpino/Prolog case, this has the advantagethat one has a full programming language avail-able.
A disadvantage is that there is no specificsupport for working with dependency trees ortriples.None of the approaches listed above is optimal.XPath is suitable only for identifying syntactic pat-terns, and does not offer the possibility of extractionof elements (i.e.
it has no capturing mechanism).The other three approaches do allow for both match-ing and extraction, but they all require skills that goconsiderably beyond conceptual knowledge of thetreebank and some basic knowledge of XML.Another disadvantage of the current situation isthat there is little or no sharing of solutions be-tween users.
Yet, different applications tend to en-counter the same problems.
For instance, multiwordexpressions (such as Alan Turing or 7 juni 1954)are encoded as trees, dominated by a cat=?mwu?node.
An extraction task that requires namesto be extracted must thus take into account thefact that names can be both nodes with a labelpos=?name?
as well as cat=?mwu?
nodes (dom-inating a pos=?name?).
The situation is furthercomplicated by the fact that individual parts of aname, such as Alan in Alan Turing, should nor-mally not be matched.
Similar problems arise ifone wants to match e.g.
finite verbs (there is nosingle attribute which expresses tense) or NPs (thecat=?np?
attribute is only present on complexNPs, not on single words).
A very frequent issueis the proper handling of index nodes.
Searchingfor the object of the verb tref aan in fig.
2 requiresthat one finds the node in the tree that is coindexedwith the rel=?obj1?
node with index 1.
This isa challenge in all approaches listed above, exceptfor Alpino/Prolog, which solves the problem by con-verting trees to sets of dependency triples.Some of the problems mentioned above could besolved by introducing more and more fine-grainedattributes (i.e.
a separate attribute for tense, as-signing both a category and a POS-tag to (non-head) terminal-nodes, etc.)
or by introducing unarybranching nodes.
This has the obvious drawbackof introducing redundancy in the encoding, would19mean another departure from the usual conceptionof dependency trees (in the case unary branching isintroduced), and may still not cover all distinctionsthat users need to make.
Also, finding the content ofan index-node cannot be solved in this way.One might consider moving to a radically differ-ent treebank format, such as Tiger XML8 for in-stance, in which trees are basically a listing of nodes,with non-terminal nodes dominating a number ofedge elements that take (the index of) other nodesas value.
Note, however, that most of the problemsmentioned above refer to linguistic concepts, andthus are unlikely to be solved by changing the ar-chitecture of the underlying XML representation.4 XQuery and XPathTwo closely related standards for processing XMLdocuments are XSLT9 and XQuery10 .
Both makeuse of XPath11, the XML language for locating partsof XML documents.
While XSLT is primarily in-tended for transformations of documents, XQueryis primarily intended for extraction of informationfrom XML databases.
XQuery is in many respectssimilar to SQL and is rapidly becoming the standardfor XML database systems.12 A distinctive differ-ence between the XSLT and XQuery is the fact thatXSLT documents are themselves XML documents,whereas this is not the case for XQuery.
This typi-cally makes XQuery more concise and easier to readthan XSLT.13These considerations made us experiment withXQuery as a language for data extraction from syn-tactically annotated corpora.
Similar studies werecarried out by Cassidy (2002) (for an early versionof XQuery) and Mayo et al (2006), who comparethe NITE Query Language and XQuery.
Below, wefirst illustrate a task that requires use of XPath only,and then move on to tasks that require the additionalfunctionality of XQuery.8www.ims.uni-stuttgart.de/projekte/TIGER/9www.w3.org/TR/xslt2010www.w3.org/TR/xquery11www.w3.org/TR/xpath2012e.g.
exist.sourceforge.net, monetdb.cwi.nl,www.oracle.com/database/berkeley-db/xml13See Kay (2005) for a thorough comparison.4.1 Corpus exploration with XPathAs argued in Bouma and Kloosterman (2002),XPath provides a powerful query language for for-mulating linguistically relevant queries, providedthat the XML encoding of the treebank reflects thesyntactic structure of the trees.Inherent reflexive verbs, for instance, are verbalheads with a rel=?se?
dependent.
A verb with aninherently reflexive can therefore be found as fol-lows (remember that in Alpino dependency trees,dependents are actually siblings of the head)://node[@pos="verb"and @rel="hd"and ../node[@rel="se"]]The double slash (?//?)
ensures that we search fornodes anywhere within the XML document.
Thematerial in brackets ([ ]) can be used to specifyadditional constraints that matching nodes have tomeet.
The @-sign is used to refer to attributes of anelement.
The double dots (?..?)
locate the parent el-ement of an XML element.
Children of an elementare located using the single slash (?/?)
operator.
Thetwo can be combined to locate siblings.Comparison operators are available to comparee.g.
attributes that have a numeric value.
The follow-ing XPath query identifies cases where the reflexiveprecedes the subject://node[@pos="verb"and @rel="hd"and ../node[@rel="se"]/@begin <../node[@rel="su"]/@begin]Note that we can also use the ?/?
to locate attributesof an element, and that the begin attribute encodesthe initial string position of a constituent.Reflexives preceding the subject are a marked op-tion in Dutch.
We may contrast matching verbs withverbs matching the following expression://node[@pos="verb"and @rel="hd"and ../node[@rel="se"]/@begin >../node[@rel="su"]/@beginand not(../node[@rel="su"]/@begin="0")]Here we have simply reversed the comparison op-erator.
As we want to exclude from considera-tion cases where the subject precedes the finite verb(e.g.
is in sentence-initial position), we have added anegative constraint with this effect.20REFL-SU SU-REFL verb (gloss)% # % #94.3 33 5.7 2 vorm (to shape)91.7 11 8.3 1 ontvouw (to unfold)74.1 234 25.9 82 doe voor (to happen)73.5 36 26.5 13 teken af (to form)58.8 10 41.2 7 wreek (to take revenge)57.1 44 42.9 33 voltrek (to take place)56.0 42 44.0 33 verzamel (to assemble)54.6 309 45.4 257 bevind (to be located)50.0 18 50.0 18 dring op (to impose)48.3 58 51.7 62 dien aan (to announce)Table 1: Relative frequency of REFL-SU vs SU-REFLword orderUsing the two queries above to search one yearof newspaper text, we can collect the outcome andcompute, for a given verb, the relative frequency ofREFL-SU vs. SU-REFL order for non-subject initialsentences in Dutch.
A sample of verbs that have ahigh percentage of REFL-SU occurrences, is given intable 1.
The result confirms an observation in Hae-sereyn et al (1997), that REFL-SU word order occursespecially with verbs having a somewhat ?bleechedsemantics?
and expressing that something exists orcomes into existence.It should be noted that XPath offers consider-able more possibilities than what is illustrated here.XPath 2.0 in particular is an important step forwardfor linguistic search, as it includes far more func-tionality for string processing (i.e.
tokenization andregular expressions) than its predecessors.
Bird et al(2006) propose an extension of XPath 1.0 for lin-guistic queries.
The intuitive notation they intro-duce might be useful for some users.
However,the examples they concentrate on (all having to dowith linear order) presuppose trees without ?cross-ing branches?.
The introduction of begin and endattributes in the Alpino format makes it possibleto handle such queries for dependency trees (withcrossing branches) as well, and furthermore, doesnot require an extension of XPath.4.2 Data Extraction with XQueryThe kind of explorative corpus search for whichXPath is ideally suited is supported by most othertreebank query languages as well, although not allalternatives offer the same expressive power.
Thereare many applications, however, in which it is neces-sary to extract more than just (root forms of) match-ing nodes.
XQuery offers the functionality that isrequired to perform arbitrary extraction.XQuery programs consist of so-called FLWORexpressions (for, let, where, order by,return, not all parts are required).
The examplebelow illustrates this.
Assume we want to extractfrom a treebank all occurrences of names, along withtheir named entity class.
The following XQueryscript covers the base case.for $name incollection(?ad1994?
)//node[@pos="name"]let $nec := string($node/@neclass)return<term nec="{$nec}">{string($name/@word)}</term>The for-statement locates the nodes to be pro-cessed.
Nodes are located by XPath expressions.The collection-predicate defines the directory to beprocessed.
For every document in the collection,nodes with a POS-attribute name are processed.
Weuse a let-statement to assign the variable $nec isassigned the string value of the neclass-attibute(which indicates the named entity class of the name).The return-statement returns for each matchingnode an XML element containing the string value ofthe word attribute of the name, as well as an attributeindicating the named entity class.The complexity of XQuery scripts can increaseconsiderably, depending on the complexity of theunderlying XML data and the task being performed.One of the most interesting features of XQuery is thepossibility to define functions.
They can be used toenhance the readibility of code.
Furthermore, func-tions can be collected in modules, and thus can bereused across applications.For Alpino treebanks, for instance, we haveimplemented a module that covers concepts andtasks that are needed frequently.
As pointedout above, names in the Alpino treebank are notjust single nodes, but, in case a name consistsof two or more words, can also consist of mul-tiple node[@pos=?name?]
elements, with anode[@cat=?mwu?]
as parent.
This motivatesthe introduction of a name and neclass function,21as shown in fig.
3.
Assuming that the alpinomod-ule has been imported, we can now write a bettername extraction script:for $name incollection(?ad1994?
)//nodewhere alpino:name($name)return<term nec="{alpino:neclass($name)}">{alpino:yield{$name)}</term>As we are matching with non-terminal nodes aswell, we need to take into account that it no longersuffices to return the value of word to obtain theyield of a node.
As this situation arises frequentlyas well, we added a yield function (see fig.
3).It takes a node as argument, collects all descen-dant node/@word attribute values in the variable$words, sorted by the begin value of their nodeelement.
The yield function returns the string con-catenation of the elements in $words, separated byblanks.
Note that this solution also gives the correctresult for discontinuous constituents.We used a wrapper around the XQuery processorSaxon14 to execute XQuery scripts directly on com-pacted corpora.
The result is output such as:<term nec="ORG">PvdA</term><term nec="LOC">Atlantische Oceaan</term>A more advanced relation extraction example isgiven in fig.
4.
It is a script for extraction of eventsinvolving the death of a person from a syntacticallyannotated corpus (Dutch wikipedia in this case).
Itwill return the name of the person who died, and,if these can be found in the same sentence, thedate, location, and cause of death.15 The scriptmakes heavy use of functions from the alpinomodule that were added to facilitate relation extrac-tion.
The selector-of function defines the ?se-mantic head?
of a phrase.
This is either the siblingmarked rel=?hd?, or (for nodes that are them-selves heads) the head of the mother.
For apposi-tions and conjuncts, it it the selector of the head.Note that the last case involves a recursive functioncall.
Similarly, the semantic role is normally iden-tical to the value of the rel-attribute, but we go up14www.saxonica.com15Questions about such facts are relatively frequent in Ques-tion Answering evaluation tasks.one additional level for heads, appositions and con-juncts.
The value of $resolved is given by theresolve-index function shown in fig.
3, i.e.
if anode is just an index (as is the case for the object ofaan tref in fig.
1), the ?antecedent?
node is returned.In all other cases, the node itself is returned.
Dateand place are found using functions for locating thedate and place dependents of the verb.
Finally, rel-evant events are found using the die-verb andkill-verb functions.Some examples of the output of the extractionscript are (i.e.
John Lennon was killed on Decem-ber 8, 1980, and Erasmus died in Basel on July, 12,1536):<died-how place="nil" file="1687-98"person="John Lennon" cause="vermoord"date="op 8 december 1980"/><died-how place="in Bazel" file="20336-37"person="Erasmus" cause="overlijd"date="op 12 juli 1536"/>The functions illustrated in the two examples canbe used for a range of similar data extraction tasks,whether these are intended for corpus linguistics re-search or as part of an information extraction sys-tem.
The definition of corpus specific functions thatcover frequently used syntactic and semantic con-cepts allows the application specific code to be rel-atively compact and straightforward.
In addition,code which builds upon well tested corpus specificfunctions tends to give more accurate results thancode developed from scratch.5 ConclusionsIn this paper, we have presented an approach to min-ing syntactically corpora that uses standard XMLtechnology.
It can be used both for corpus explo-ration as well as for information extraction tasks.
Byproviding a corpus specific module, the complexityof such tasks can be reduced.
By adopting standardXML languages, we can benefit optimally from thefact that these are far more expressive than what isprovided in application specific languages or tools.In addition, there is no shortage of tools or platformssupporting these languages.
Thus, development ofcorpus specific tools can be kept at a minimum.22module namespace alpino="alpino.xq" ;declare function name($constituent as element(node)) as xs:boolean{ if ( $constituent[@pos=?name?]
or$constituent[@cat = ?mwu?]/node[@neclass=?PER?]
)then fn:true()else fn:false()};declare function neclass($constituent as element(node)) as xs:string{ if $constituent[@neclass]then fn:string($constituent/@neclass)else if $constituent/node[@neclass]then fn:string($constituent/node[1]/@neclass)};declare function alpino:yield($constituent as element(node)) as xs:string{ let $words :=for $leaf in $constituent/descendant-or-self::node[@word]order by number($leaf/@begin)return $leaf/@wordreturn string-join($words," ")};declare function alpino:resolve-index($constituent as element(node))as element(node){ if ( $constituent[@index and not(@pos or @cat)] )then $constituent/ancestor::alpino_ds/descendant::node[@index = $constituent/@index and (@pos or @cat)]else $constituent};Figure 3: XQuery module (fragment) for Alpino treebanksfor $node in collection(?wikipedia?
)/alpino_ds//nodelet $verb := alpino:selector-of($node)let $date := if ( exists(alpino:date-dependents($verb)) )then alpino:yield(alpino:date-dependents($verb)[1])else ?nil?let $place := if ( exists(alpino:location-dependents($verb)) )then alpino:yield(alpino:location-dependents($verb)[1])else ?nil?let $cause := if ( $verb/../node[@rel="pc"]/node[@root="aan"] )then alpino:yield($verb/../node[@rel="pc"])else [[omitted]]let $role := alpino:semantic-role($node)let $resolved := alpino:resolve-index($node)where alpino:person-node($resolved)and ( ( $role="su" and alpino:die-verb($verb) )or ( $role="obj1" and alpino:kill-verb($verb) ))return<died-how file="{alpino:file-id($node)}" person="{alpino:root-string($resolved)}"cause="{$cause}" date="{$date}" place = "{$place}" />Figure 4: Extracting circumstances of the death of a person23ReferencesSteven Bird, Yi Chen, Susan B. Davidson, HaejoongLee, and Yifeng Zheng.
Designing and evalu-ating an XPath dialect for linguistic queries.
InProceedings of 22nd International Conference onData Engineering (ICDE), 2006.Gosse Bouma and Geert Kloosterman.
Querying de-pendency treebanks in XML.
In Proceedings ofthe 3rd conference on Language Resources andEvaluation (LREC), Gran Canaria, 2002.Gosse Bouma, Gertjan van Noord, and Robert Mal-ouf.
Alpino: Wide-coverage computational analy-sis of Dutch.
In Computational Linguistics in TheNetherlands 2000.
Rodopi, Amsterdam, 2001.Gosse Bouma, Ismail Fahmi, Jori Mur, Gertjan vanNoord, Lonneke van der Plas, and Jo?rg Tiede-man.
Linguistic knowledge and question answer-ing.
Traitement Automatique des Langues, 2(46):15?39, 2005.Gosse Bouma, Petra Hendriks, and Jack Hoeksema.Focus particles inside prepositional phrases: Acomparison of Dutch, English, and German.
Jour-nal of Comparative Germanic Linguistics, 10(1),2007.Razvan Bunescu and Raymond Mooney.
A short-est path dependency kernel for relation extraction.In Proceedings of HLT/EMNLP, pages 724?731,Vancouver, 2005.Steve Cassidy.
XQuery as an annotation query lan-guage: a use case analysis.
In Language Re-sources and Evaluation Conference (LREC), GranCanaria, 2002.Hang Cui, Renxu Sun, Keya Li, Min-Yen Kan, andTat-Seng Chua.
Question answering passage re-trieval using dependency relations.
In Proceed-ings of SIGIR 05, Salvador, Brazil, 2005.W.
Haesereyn, K. Romijn, G. Geerts, J.
De Rooy,and M.C.
Van den Toorn.
Algemene NederlandseSpraakkunst.
Martinus Nijhoff Uitgevers Gronin-gen / Wolters Plantyn Deurne, 1997.Boris Katz and Jimmy Lin.
Selectively using rela-tions to improve precision in question answering.In Proceedings of the workshop on Natural Lan-guage Processing for Question Answering (EACL2003), pages 43?50, Budapest, 2003.
EACL.Michael Kay.
Comparing XSLT and XQuery.In Proceedings of XTech 2005, Amsterdam,2005.
URL www.idealliance.org/proceedings/xtech05.Dekan Lin and Patrick Pantel.
Discovery of infer-ence rules for question answering.
Natural Lan-guage Engineering, 7:343?360, 2001.Neil Mayo, Jonathan Kilgour, and Jean Carletta.Towards an alternative implementation of NXTquery language via XQuery.
In Proceedings of theEACL Workshop on Multi-dimensional Markup inNLP, Trento, 2006.D.
Molla?
and M. Gardiner.
Answerfinder - ques-tion answering by combining lexical, syntacticand semantic information.
In Australasian Lan-guage Technology Workshop (ALTW) 2004, Syd-ney, 2005.Nelleke Oostdijk.
The Spoken Dutch Corpus:Overview and first evaluation.
In Proceedings ofLREC 2000, pages 887?894, 2000.Rion Snow, Daniel Jurafsky, and Andrew Y. Ng.Learning syntactic patterns for automatic hyper-nym discovery.
In Lawrence K. Saul, Yair Weiss,and Lon Bottou, editors, Advances in Neural In-formation Processing Systems 17, pages 1297?1304.
MIT Press, Cambridge, MA, 2005.L.
van der Beek, G. Bouma, R. Malouf, andG.
van Noord.
The Alpino dependency treebank.In Computational Linguistics in the Netherlands(CLIN) 2001, Twente University, 2002.Leonoor van der Beek.
Topics in Corpus BasedDutch Syntax.
PhD thesis, University of Gronin-gen, Groningen, 2005.Lonneke van der Plas and Gosse Bouma.
Auto-matic acquisition of lexico-semantic knowledgefor question answering.
In Proceedings of On-tolex 2005 ?
Ontologies and Lexical Resources,Jeju Island, South Korea, 2005.Begon?a Villada Moiro?n.
Linguistically enrichedcorpora for establishing variation in support verbconstructions.
In Proceedings of the 6th Inter-national Workshop on Linguistically InterpretedCorpora (LINC-2005), Jeju Island, Republic ofKorea, 2005.24
