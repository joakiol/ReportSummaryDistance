L I S T .
A U T O M A T A  W I T H  SYNTAC' \ ] \ [ "  I C A L  L Y  S T R U C T U R E D  O U ~  P U ~  ~karel 0L~VA and Martin PLATEKFaculty of Mathematics and PhysicsCharles UniversityNalostransk~ n~m~stl 25CS-118 00 Praha I -Ma l&  StranaCzechoslovakiaAbstract:A new type of abstract automatonis introduced, and both formal and linguisticimplications are discussed, most importantlya new possibil ity of proving certain formalproperties of (natural) languages and theirgrammars (such as context-freeness) and ofrefinement of the Chomsky hierarchy.I .
IntroductionIn this article we want to propose a newtype of (abstract) nondeterministic automa-ton; its most dist inguishing feature is thatits input data is a l_!inear doubly, linked listand its output is a s~ntac!ic strncture , oncondition that the computation was success-ful, i .e.
the word represented by the inputlist was in the language defined by the auto-maton, all nondeterministic decisions of theautomaton were correct (the automaton "gues-sed" what to do) and, hence, the computationfinished in an accepting configuration.Apart from other features, this automa-ton gives a uniform formal environment forthe formulation of formal syntax of naturallanguage(s), regardless of the intuitionsstanding behind the linguistic theory inQuestion; here, we have in mind first of allthe dependency or immediate constituent ap-proach to language description.The intuit ion standing behind the de___ep_~D_Tdencl approach is based on erasin~ words fromthe sentence and studying whether the result-ing string is grammatical: by means of this,the relative mutual importance of words(i.e., d_~ependency, as the relation betweenthe syntactical ly "more important" word,governor, and the "less important",den__~%, word) can be stepwise determined andthen expressed e.g.
in a dependency tree ofthe sentence.
Clearly, in more complex cases,it is impossible to subsume all these relat-ions in a sentence purely by means of depen-dency, since there are also other relationsto be found between words (such as coordinat-ion or apposit ion), as well as it is impossi-ble to express all possible relations of de-pendency in the form of a tree, because incertain cases a single dependent word mighthave more than one governor  (e.g., in casesof words depending on coordination of govern-Ors).On the other hand, the intuitions stand-ing behind the imediate constituent approachis that of replacing certain groups of wordsby others, and, again, studying the grammati-oality of the result By  means of this pro-cess, the sentences can be stepwise splittedt 9 smaller and smaller parts from which theyare built of, and the structure thus obtainedcln be then expressed in an IC-tree.,498In fact, we believe that both these intui-~tions are extremely insightful and that it isa regretful misunderstanding that they arestill felt as opposit ions rather than comple-mentations by many l ingu is ts ;  though therehave been several attempts to merge them intoa single theory (T-syntax is surely the mostnotable case), we are still convinced thatthe results do not suffice fully.
The type ofautomaton ("accepter") we propose is in factable to simulate elegantly any of the twoapproaches during the process of computationand to reflect them also in the structure ofits output.
Thus, it makes no distinctionbetween these two linguistic approaches andallows for formulations of theories based onone or the other approach or even on anytheir mixture.2.
Descri t~n of the AutomatonThe list automaton consists of a fi-nite control unl% attached to a (finite) li-near list by a head.
The head is always ablet0 read or write symbols to the item of thelist on which it stands (the current item)and, in addition, it is able to read (but not%o write) the symbol On the item immediatel lyto the left in the llst.
Every item of thelist (and, general ly, any node in the result-ing syntactic structure) consists of a set ofpointers L ,R ,C ,CH ,0 ,H ,ZL and CP and informat-ion parts Cat and Lex (see fig I.
).The pointers serve the following purposes:C...serves for "simple" coordination (such as"Peter and Paul")CH..serves for embedded coordination (such as"Pau l  and Mary and John and Eve playedtennis.
")L...at the beginning, this pointer (togetherwith R) serves for connecting the itemsof the list (see fig 2. for olarif ica-tlon); after the computation is success-fully finished, L points to the item onthe left edge of the interval of items onwhich the current item depends (as in"John and Paul who..
.
",  see fig.
3)R...is a pointer analogical to L; serves forconnecting the items of the list init ial-ly, and after the computat ion,R paintsto the item on the right edge of theinterval on which the cur rent  item de-pends (see fig.
3)O.
~.at the beginning, the value of this poin-ter equals %o L; however, it does notchange during the whole computation and ,hence, keeps the information about the in--put order of the items in the input listN.?
.during and after the computatio n, thevalue of this pointer is the "head" (inthe sense used in X-syntax) of the phrasere.Presented by the daughter nodes of thecurrent node (current item) in the syn-tactic (sub)treeZI,,CP~ose:rve as auxi l iary pointers in proces-sing complicated syntactic constructions(coordinations, non-projective construc-tions)Fig.
2Fig.
3Fur%her  , let P be set of po in ters~C,CH,L,R,O,H,ZL,ZP} ,and, in addit ion, letTHIS be a special pointer the value of which:is always the current item.
Let NIL be aspecial "empty" value of a pointer.
Then, wedefine the following basic operations of theautomaton :DEL(x,y)o.ofor x~P,y~P u \[THIS}; this opera-tlon takes the item which is the value ofy and sets the value of its pointer x toNILCON(x,y,z)oo.for xgP,.
y,zmp u{THIS}; perfor-ming this operation means setting thepointcr,x of the item y to the value zG0(x)o.ofor x~P; the head of the automatonmoves from the current item to the itemwhich is the value of x.
If x=THIS orx=NIL the state of the centre} unlt be-comes undefined (i.e., an error occurs)NEW(x) .... for x6P; a new item is created and?
the value of x is set to this new item.All pointer values of the new item are setto NIL, the information part of the itemis copied from the current itemWRITE(1).. .
i  is a symbol fro~ the alphabet ofthe automaton; the value of Cat of thecurrent Item Is set to iAll oper~tlons a re  performed relatively tothe current item (i.eo, "x" in their descrip-tlon means "x of the current item").
Theirintuitive sense is reshaping the input lls%to a more complex structure by means ofsetting and changing the values of pointers.Further, these basic operations can becombined to complex operations.
For the pur-poses of description of Czech syntax, we de-fined complex operations of the followingtypes (again, the pointers are those of thecurrent item):Z.
GO(R)II.
WRITE(a)III.
CON(R,L,R)CON(L ,R ,L)DEL(R ,THIS)GO(L)iv.
GO(L)CON(R ,L ,R)CON(L ,R ,L)DEL(L ,THIS)Go(~)v. NEW(H)CON(R ,L ,H)CON(~ ,H ,R)CON(L ,H ,L)CON(L,R ,H)DEL(R ,THIS)DEL(H ,THIS )GO(L)and other e ight  complex operat ions servingfor processing coordination, non-projectiveconstructions etc.
The automaton performseach of these operations in one step of thecomputation; the next operation to be perfor-med is chosen according to the current inter-nal state of the control unit and the infor-mation read  by the head (i.e., informationcontained in the current item and its leftneighbour in the llst).
Performing one stepo f  the computation means performing one ofthe complex operations and, possibly, chan-ging the internal state of the control unit,both according to the transition function ofthe automaton.The set of complex operations intro-duced has two important features: first, withthe help of this set, we are convinced, it ispossible to describe sufficiently completesurface syntax of Czech.
Second, the set ofcomplex operations of the automaton we usefo r  the description of Czech syntax guaran-tees that any language accepted by the auto-maton with these operations is context-free.This point probably deserves further discus-sion: the matter is that by changing the set!of basic operations (i.e., by adding some newbas ic  operations and/or by removing the cur-rent  ones) and/or by l imiting the choice andordering of basic operations in an appro-.priate Way and/or by l imiting the number of"visits" of the head on an item of the llst,i t  is possible to characterize the explica-tive power of different subtypes of the auto-maton and, hence, to characterize differenttypes of grammars strongly equivalent withthe automaton in question.
Thus, e.g., cate-gorial grammars can be shown to be stronglyequ iva lent  with automata with operations I-IVand with the number of "visits" limited byJconstant; context-free grammars are strongly499equivalent with automata with complex opera-%ions.
I-III and V and c6nstant number of vi-sits, generalized dependency grammars (thisterm suspiciously resembles the title of(Gazdar,Klein Pullum and Sag,85), but was infact introduced as early as in (G}adkij,73))are strongly equivalent with the automatonwith operations I-IV etc.
For automata usingcomplex operations different from I-V we havenot find any strongly equivalent type ofgrammars in literature.
But probably the mostimportant point concerns weak equivalence:any automaton using the complex operationsdefined is weakly equivalent to some ~ context-free grammar.
(And extending this ' weak gene-rat ive  capacity will be possible only on con-dition of adding some new complex opera-tion(s).)3.
ConslusionsThe type of automaton introduced is, inour opinion, important for several reasons.First, it allows for stepwise refinemen~of the set of its complex operations: first,only an acceotor might be constructed, andonly later its operations can be augmented toa real parser.
Of course, the augmentation ofthe primary acceptor and turning it into theparser might be performed in most differentways, which allows for incarnating variouslinguistic theories over the initial accept-or.
Cenerally, we can start the process ofcreating the automaton by cor~structing thecsmplex operations from basic operations DELand GO only, applying these two basic operat-ions ,to the pointers L,R and THIS solely(i.e., only pointers from the input list).D'ring its computation, such an accept or willsimulate the derivation of the input string(string represented by the'input list).
Inthe second step, i.e.
in building the parser,we augment these primitive complex operationsby adding other basic operations and/or usingother pointers, to get, eventually, the in-tended parser.Second, from the linguistic viewpoint,it enables to construct a recognizing automa-ton - a full syntactic parser (i.e., an auto-maton which gives a syntacticstructure asits output) - which, in addition, allows toprove the context-freeness of the processedlanguages, but on grounds profoundly diffe-rent than those of (Gazdar,Klein,Pullum andSag,85).Third, from the formal viewpoint, itallows to describe the whole Chomsky hierar-chy of languages by a sln__i_nnf~ abstract automa-ton with differently limited set of operat-ions rather than with a whole set of relati-ve ly  unrelated types of machines (Turing ma-chine, linearly bounded automaton, pushdownautomaton,  finite automaton): this is becausethe operations of the proposed automaton arein fact Just refined operations of the llstautomaton proposed in (Chytil, Pl&tek andVogel,86).References :Chytil M.P., Pl&tek M. and Vogel J.:A note on the Chomsky hierarchy,Bulletin of EATCS 28, 1986Gazdar G., Klein E., Pullum G. and Sag I.:Generalized Phrase Structure Grammar,Basil Blackwell, Oxford, 1985GladkiJ A.V.
: FormalmyJe grammatiki i Jazyki,Mir, Moscow, 1973Pl&tek M. and Vogel J.: Deterministic listautomata and erasing graphs, in The PragueBulletin of Mathematical Linguistics ~5,Prague, 1986500
