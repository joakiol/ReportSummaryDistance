Se l f -Mon i to r ing  w i th  Revers ib le  GrammarsGiinter Neumann* and Gertjan van Noord\]*Deutsches Forschungszentrum tRijksuniversiteit Groningenf~r Kfinstliche Intelligenz Postbus 716Stuhlsatzenhausweg 3 NL 9700 AS GroningenD-6600 Saarbr/icken 11 vannoord@let.rug.nlneumann@dfki.uni-sb.deAbstractWe describe a method and its implementationfor self-monitoring during natural anguage gen-eration.
In situations of communication wherethe generation of ambiguous utterances should beavoided our method is able to compute an un-ambiguous utterance for a given semantic input.The proposed method is based on a very strictintegration of parsing and generation.
Duringthe monitored generation step, a previously gen-erated (possibly) ambiguous utterance is parsedand the obtained alternative derivation trees areused as a 'guide' for re-generating the utterance.To achieve such an integrated approach the un-derlying grammar must be reversible.1 Introduct ionIn many situations of communication a speakerneed not to worry about the possible ambiguityof what she is saying because she can assume thatthe \]tearer will be able to disambiguate ile utterance by means of contextual information or wouldotherwise ask for clarification.
But in some sit-uations it is necessary to avoid the risk of gen-erating ambiguous utterances that could lead tomisunderstanding by the hearer, e.g., during theproecss of writing text, where no interaction ispossible, or when utterances refer to actions thathave to bc performed irectly or in some specificdialog situations (e.g.
having an interview with acompany).The need to generate un-ambiguous tterancesis also relevant for the development of naturallanguage generation systems.
For example inthe case of an intelligent help-system that sup-ports the use of an operating system (Wilenskyet al, 1984), asking an inexperienced user to 'f~e-move the folder with the system tools' could \]lavetremendous effects on the system itself.If one assumes a modular division of the natu-ral language generation task between two stagesof the language production process - -  decidingwhat to say (conecplual evel) and deciding howto say it (grammatical level) - -  it is not realis-tic to expect hat the conceptual component willbe able to specify the input for the grammaticalcomponent such that ambiguous utterances canbe avoided.If it were possible to specify the input in sucha way, then this would mean that the conceptualcomponent has to provide all information eededby the grammatical component to make decisionsabout lexieal and syntactic hoices.
Hence, theconceptual component would need detailed in-formation about the language to use.
But thiswould blur the distinction between the grammat-ical and the conceptual level, because this wouldimply that both components share the grammar(see also Appelt (1989), Meteer (1990), Neumann(1991)).
1In order to maintain a modular design addi-tional mechanisms are necessary to perform somemonitoring of the generator's output.
Severalauthors argue for such additional mechanisms(Jameson and Wahlster, 1982; De Smedt andKempen, 1987; Joshi, 1987; Levelt, 1989).
Forexample, Levelt (1989) pointed out tbat "speak-ers monitor what they are saying and how theyare saying it".
In particular he shows that aspeaker is also able to note that what she is say-ing involves a potential ambiguity for the hearerand can handle this problem by means of self-monitoring.In this paper we describe an approach forself-monitoring which allows to generate un-ambiguous utterances in such situations wherepossible misunderstandings by tire user have tobe avoided.
The proposed method is based ona very strict integration of parsing and genera-tion.
During self-monitoring a generated ambigu1As pointed out in Fodor (1983) one of tim chtaxacter-istic properties of a module is that it is computationallyautonomous.
But a relevant coimideration of cornputa-tionally autonomy is that nmdules do not share sourccs(in our case the grarmnar).AcrEs DE COLING-92, NANTES.
23-28 AOL'r 1992 7 0 0 PROC.
OF COLING-92.
NANTES, AUG. 23-28.
1992ous utterance is parsed and the obtained alterna-tive derivation trees are use.d ms a 'guide' for the'monitored' generation step.
We will show thatsuch an integrated approach makes only sensewith reversible grammars.
To our knowledge,there is at present no algorithm that solves theproblem of generating un-ambiguous utterancesby nmans of self-monitoring.2 Overview of the Monitor-ing AlgorithmOur approach is based on a strict integration ofparsing and generation in that parsing is used todetect whether a produced utterance is ambigu-ous or not.
The advantages of using comprehen-sion mechanisms to facilitate mointoriug arc forexample mentioned in Levelt (1989).
\[n his modelparsing and generation are performed in an iso-lated way by means of two different granunars.
'Phe problem with this view is that generation ofun-ambiguous paraphrases can be very inefficient,because the source of the ambignons utterance isnot used to guide the generation process.To overcome this problem the basic idea of ourapproach is to operate with derivation tl~es ob-tained during the generation and parsing step.In short, the algorithm works as follows.
Firstly,it is checked whether a produced utterance S ofan input form LF is ambiguous, by parsing S~ Ifduring parsing e.g.
two readings LF and LF ~ arededuced LF is generated again along the parsetrees obtained for S. Now an utterance S' can begenerated that has the same meaning but differswith respect o the ambiguity source of S.In this way the derivation trees obtained dur-ing parsing of a previously generated utterancesare used as a guide during monitored generation.Grammatical structures obtained during parsingarc used directly to restrict he search space dur-ing generation.
At this point it shouhl be clearthat the only way in order to be able to generate'along parsed structures' is to use reversible grammars.
This ensures that every sentence producedby the generator can be parsed.
Similarly, for ev-ery semantic structure computed by the parser,the generator delivers an utterance.3 A monitoring strategyA naive s t ra tegy .
The tirst and most straight-forward solution to obtain Olfly nn-ambiguous t-terances during generation could hc describedas a 'brute force' solution.
The generator de-rives possible utterances for a given logical form.For each of these utterances it is easy to checkwhether it is ambiguous or not, by counting theresults the parser delivers for that utterance.Ina  Prolog implementation this simple solutioncan be detincd as follows.
Note that we assumefor simplicity ttlat linguistic signs are representedwith terms s ign(LF ,S t r ,Syn ,Der )  where LFrepresents tile semantic information, S t r  repre-sents the string and Syn represents syntactic in-formation.
The fourtil argument position will beused later in this paper to represent derivationtrees.monitor(sign(LF,Str,Syn,Der)):-geuerate(sign(LF,Str,Syn,Der)),unambiguous(Sir).tmambiguous(Str) : -setof(LF,D'S^parse(sign(LF,Str,S,D),\[El\]).The predicates paxse/1 and generate /1  call re-spectively the underlying parser and generator.The seto~ predicate is used to obtain the set ofsolutions of the parse  predicate, where " indi-cates that D and S are existentially quantified.By instantiating the resulting set as a set withexactly one element, we implement the idea thatthe utterance should be un-ambiguous (in thatcase there is only one parse result).
Given Pro-log's search strategy this definition implies thatthe generator generates olutions until an un-ambiguous utterance is generated.The prol)lem with this 'generate and test' ap-proach is that the search of the generator is notdirected by the goal to produce an un-ambiguousresult.
We will now present a more involved mon-itoring strategy which is oriented towards tile goalof producing an un-ambiguous utterance.Ambigu i t ies  are  of ten ' local ' .
A flmdameu-tal assumption is that it is often possible to obtainan un-ambiguous utterance by slightly changingan ambiguous one.
'fhus, after generating an am-biguous utterance, it may bc possible to changethat utterance locally, to obtain an un-ambiguousutterance with the same meaning.
In the ease ofa simple lexieal ambiguity this idea is easily il-lustrated.
Given the two meanings of the word'bank' ('river bank' vs. 'money institution') agenerator may produce, as a first possibility, thefollowing sentence in the eo.se of the first readingof 'bauk'.ACRES DE COLING-92, NANTES, 23-28 hOt'n 1992 7 0 1 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992el/ \jo lmi  aux3/ \infll8 vp4I / \be2 infll2 pptI / \stand3 nearl rip2/ \the2 bank4s l/ \j olml aux3/ \infll8 vp4I / \be2 in~112 pplI / \stand3 near1 rip2/ \the2 bemk7Figure 1: Derivation trees(I) John was standing near the bank while Marytried to make a picture of him.To 'repair' this utterance we simply alter the word'bank' into the word 'river bank' and we obtainan un-ambiguous result.
Similar examples can beconstructed for structural ambiguities.
Considerthe German sentence:(2) Heute ist durch alas Au~nminister iumbekanntgegeben women, daft Minister vanden Broek den jugoslawischenDelegationsleiter aufgefordert hat, dieArmee aus Kroatien zuriickzuziehen.Today it was announced by the ministry offoreign affairs that minister van den Brockhas requested the Yugoslav delegationleaders to withdraw the army from Croatia,which is ambiguous (in German) between 'with-draw \[the army of Croatia\]' and '\[withdraw \[thearmy\] away from Croatia\]'.
In German this ambi-guity can be repaired locally simply by changingthe order of 'aus Kroatien' and 'die Armee', whichforces the second reading.
Thus again we onlyneed to change only a small part of the utterancein order for it to be un-ambiguous.Locat ing  ambigu i ty  w i th  der ivat ion  trees.We hypothesise that a good way to eharacterisethe location of the ambiguity of an utterance is byreferring to the notion of'derlvation tree'.
We areassuming that the underlying rammar formalismcomes with a notion 'derivation tree' which repre-sents how a certain derivation is licenced by therules and lexical entries of the grammar.
Notethat such a derivation tree does not necessarilyreflect how the parser or generator goes aboutfinding such a derivation tree for a given stringor logical form.
For example, the derivation treesof the two readings of 'john is standing near thebank' may look as in figure 1.
The intuition thatthe ambiguity of this sentence is local is reflectedin these derivation trees: the trees are identicalup to the difference between bamk4 and bank7.In our examples each sign s ign(LF ,St r ,Syn ,D)is specified for its corresponding derivation treeD.
In Prolog such a tree is represented with termsof the form t;(Label,Ds,M) where Label is thenode name (the unique name of a rule) and Dsis a list of Daughter trees.
The third argumentposition will be explained below.Given a derivation tree t of a generated sen-tence s, we mark the places where the ambigu-ity occurs as follows.
If s is ambiguous it canbe parsed in several ways, giving rise to a set ofderivation trees T = t l .
.
.
tn .
We now comparet with the set of trees T in a top-down fashion.If for a given node label in t there are severalpossible labels at the corresponding nodes in Tthen we have found an ambiguous spot, and thecorresponding node in t is marked.
Thus, in theprevious example of structural ambiguity we mayfirst generate sentence (2) above.
After checkingwbetfier this sentence is ambiguous we obtain, asa result, the marked derivation tree of that sen-tence.
A marked node in such a tree relates toan ambiguity.
The relevant part of the resultingderivation tree of the example above may be thetree in figure 2.Markh lg  a der ivat ion  tree.
The predicatemark(Tree,Set)  marks the generated tree Treegiven the trees Set found by the parser.
Tile thirdargument M of tile terms t (Labsl,Ds,M) repre-ACRES DE COLING-92, Nxlcr~, 23.28 ^Or~T 1992 7 0 2 PRec.
OF COLING-92, NANTES, AUG. 23-28, 1992vp5/ \~ragen3 vp2 MARKEDnpl vp4/ \ /die2 armeel ppl/ \aus2 Krl\infl4tzieh3Figure 2: Marked derivation treesenting derivation trees indicates whether the cur-rent node is marked (in that case the value is y) ornot (using the value n).
Subtrees of marked nodeshave no instantiated value for this variable.mark(t(L,Ds,n),Set):-root_same(L,Set),!,get_ds(Set,DsSet),mark ds(Ds,DsSet).mark(t(L,Ds,y)~Set).root_same(L, \[\] ).root_same(L, \[t(L .
.
.
.  )
IT\] ) :-root_same (L,T).mark ds ( \ [ \ ] , \ [ \ ] ) .mark ds(\[HlT\],\[Hs\]Ts\]):-mark(H,Hs), mark_ds(T,Ts).get_ds(\[t(_,\[\],_)l_\],\[\]).get ds(Set,\[~IT\]):-get f(Set,Sst2,H),get_ds(Set2,T).get f ( \ [ \ ] , \ [ \ ] , \ [ \ ] ) .get f ( \ [ t ( _ , \ [H3 IB \ ] , _ ) IT \ ] ,\ [ t ( _ ,B , _ ) IT2 J , \ [H3 IT3 J ) : -get_f(T,T2,T3).Chang ing  the  ambiguous parts .
Summaris-inK, the generator first generates a possible ut-terance.
This utterance is then given as inputto the monitor.
The monitor calls the parser tofind which parts of that utterance are ambiguous.These parts are marked in the derivation tree as-sociated with the utterance.
Finally the monitortries to generate an utterance whictl uses alterna-tive derivation trees for the marked, i.e.
ambigu-ous, parts.Generating an utterance given a marked criva-tion tree proceeds as follows.
The generator sim-ply 'repeats' the previous generation in a top-down fashion, as long as it encounters unmarkednodes.
This part of the generation algorithmthus simply copies previous results.
If a markednode is encountered the embedded generation al-gorithm is called for this partial structure.
Theresult should be a different derivation tree thanthe given one.
Now clearly, this may or may nothe possible depending on the grammar.
The nextparagraph discusses what happens if it is not pos-sible.The following definition ~sumes that gram-mar rules are represented simply as rule(Name,No'thor, Ds) where Name is the rule name,Mother is the mother sign and Ds is a list ofdaughter signs.
The predicate mgen is used togenerate an utterance, using a marked derivationtree as an extra guide.mgen(sign(Lf,Str,S,D) ,*(Name,Ds,y)):-genera* e (sign(Lf ,Sir, S,D) ),\+ D = t(Name,Ds,_).mgen(sign(Lf, Str, S ,Dr, t (Name ,Ds ,n) ) : -rule (Name, sign (Lf, Sir, S,D), Kids ),mgends(Kids,Ds).mgen_de ( \[\], _).mgen_ds ( \[SIT\], \[Stree,Ttree\] ) :-mgen (S, Stree),mgen ds (T, Tire ~).II.edefining locality.
Often it will not be pos-sible to generate an alternative xpression by alocal change as wc suggested.
Wc propose thatthe monitor first tries to change things ~-q local mqpossible.
If all possibilities are tried, the notion'locality' is redefined by going up one level.
Thisprocess repeats itself until no more alternative so-lutions are possible.
Thus, given a marked eriva-tion tree the monitored generation first tries tofind alternatives for the marked parts of the tree.\]f no further possibilities exist, all markers in thetrees are inherited by their mother nodes.
Againthe monitored generation tries to find alterna-tives, after which the markers are pushed upwardsyet another level, etc.The following definition of the predicatelaawkA..g(Treo, Set, Guido) will (procedurallyspeaking) first construct the 'guide' Guide given aderivation tree Tree and a set of derivation treesSet; upon backtracldng it will push the markersin the tree one level upward at the time.mark_l_g (Tree, Set, Guide ) : -Ama~s DE COLING-92, NANTES, 23-28 ao~" 1992 703 PROC.
OV COLING-92, NANTES, Auo.
23-28, 1992mark  (T ree ,Set ) ,l_g (Tree, Guide).1 g (Tree ,Tree) .l_g(Tree, Guide) : -one_up(Tree, Tree2),l_g(Tree2 ,Guide).one_up(t (L,Ds ,n), t (L,Ds ,y) ) :-member(t( .
.
.
.
y),Ds), !
.one_up(t (L,Ds ,n) ,t (L,Ds2,n)) :-one_up_ds (Ds, Ds2).one up_ds ( \ [ \ ] ,  \[\] ).one_up_ds ( \[H I T\] , \[H2 IT2\] ) :-one_up(It,It2), one_up_ds (T,T2).The algorithm can be completed as follows.
~monitored_genorat ion (LF, Sign) :-generate ( sign (LF, Str, Syn,D) ),!, ~.
stick to one..monitor (sign(LF,Str,Syn,D) ,Sign).monitor(sign(LF,Str I, Synl,Dl),sign(LF,Str,Syn,D)) :-Find_all_parse (Strl ,TreeSet ),( TreeSet = \[_\]-> Strl = Str, Synl = Syn, DI = D; mark_l_g(D1 ,TreeSet ,Guide),mgen (sign(LF, Str, Syn,D) ,Guide),unambiguous (Sir)).Zind all_parse(Strl ,TreeSet) :-seto~ (D,LF~S'parse(sign(LF, Strl ,S.D),TreeSet).Simple at tac /nnent  example .
In order toclarify the monitoring strategy we will now con-sider how an attachment ambiguity may beavoided.
The following German sentence consti-tutes a simplified example of the sort of attach-ment ambiguity shown in (2).
(3) Die M~inner haben heute die Frau mit demFer nglas gesehen.The men have today the woman with thetelescope seen.Today the men saw the woman with thetelescope.2 In the actual implementation thepredicate ~ind_all _-parse is complicated in order to remember which parseswere already tried.
If a parse has been tried before, thenthe predicate fails because then that reslflt is either al-ready shown to be ambiguous, or otherwise the colTs-sponding solution he.s already been found.Suppose indeed that the generator, as a first pos-sibility, constructs this sentence in order to realizethe (simplified) semantic representation:heute(mit(f  ernglas, sehen(pl(mann), frau) )Let us assume that the corresponding derivationtree is the tree in figure 3.
To find out whethertopic/ \mann verb ~see/ \haben vp_compl/ \frau vp_modmit dem fernglass gesehenFigure 3: Derivation tree of German examplethis sentence is ambiguous the parser is called.The parser will find two results, indicating thatthe sentence is ambiguous.
For the alternativereading tile derivation tree shown in figure 4 isfound.topic/ \mann verb_see/ \haben vp_compl/ \pp-mod gesehen/ \frau mit dem fernglassFigure 4: Derivation tree of alternative readingThe derivation tree of the result of generationis then compared with the trees assigned to thealternative readings (in this ease only one), givenrise to the marked derivation tree shown in fig-ure 5.The monitored generation will then try to findalternative possibilities at these marked nodes,However, no such alternatives exist.
Therefore,the markers are pushed up one level, obtainingthe derivation tree given in figure 6.ACRES DE COLING-92.
NANTES.
23-28 Aou'r 1992 7 0 4 PREC.
OF COLING-92, NANTES, AUO.
23-28, 1992topic/ \n lann  verb~sec/ \haben vp_complfrau MARKED vpanod MARKED/ \tnit dem fernglass gesehenFigure 5: Marked tree of German exampletopic/ \YilaIln verb~seehaben vp_eompl MARKED/ \frau vp_mod/ \mit dem ferngtass gesehenFigure 6: Markers are pushed one level upwardAt this point the monitored generator againtries to find alternatives for tile marked nodes,this time sueeessflflly yielding:(4) Die Mgnner haben mit dem Fernglass diePrau gesehen.At this point we may stop.
However, note thatif we ask for further possibilities we will eventu-ally obtain all possible results.
For example, ifthe markers are pushed to the root node of thederivation tree we will also obtain(5) Mit dcm Ferngtass haben (lie Mgnner (liel'?au gesehen.4 D iscuss ionProper t ies .
Some of the important propertiesof our approach can be dmraeterised as follows.The strategy is sound and complete in the sensethat no ambiguous utterances will be produced,and all un-ambiguous tterances are produced.
Iffor a given semantic structure no nn-ambiguousutterance is possible, the current strategy will notdeliver a solution (it is foreseen that in such casesthe planner decides what should happen).The strategy is completely independent on thegrammars that are bcing used (except for the re-li lac6 on derivation trees).
Even more interest-ingly, the nature of the underlying parsing andgeneralion strategy is not important either.
Thestrategy can thus he used with any parsing- orgeneration strategy.1)uri~g thc monitored generation previouslygenerated structures are re-used, because onlythe ambiguous partial structures have to be re-generated.Finally, for the proposed strategy to i)e mean-ingful, it nmst bc the case that r*;versible gram-mars are being used.
If this were not the case thenit would not makc sense to compare the deriva-tion tree of a generation result with the derivationtrees which the parser produces.Generat ion  of  Paraphrases .
In Neumannand van Noord (to appear) we discuss the imple-mentation of a variant of the monitoring strategy,to solve tile problem of the generation of para-phrases.If parsing an utterance has lead to several read-ings, one way in order to detcrmme the intendedmeaning is to start a claritication dialog, in whichthe multiple interpretations of the parsed utter-ancc are contr~tcd by restating them in differentform.
The dialog partner is then requested toalmost he approllriate paraphr~qc, by e~sking her'Do you nrean X or Y ?
'.The advantage of our approach is, that it willbe ensured that the source of the ambiguity isused dircctly during the production of such para-phrases.
Therefore, the generation of irrelevantparaphrases is avoided.L imi tat ions .
It should be clear that monitor-ing involves nlore than the.
avoidance of alnhigu--ities, l,evelt (1989) discusses also monitorirlg onthe conceptual lewd and inonitoring with respectto social standards, lexical errors, loudness, pre-cision and others.
Obviously, our approach is re-stricted in the sense that no changes to the inlmtLF are made.Meteer (1990) makes a strict distinction be-tween processes that can change decisions thatoperate on intermediate l vels of representatiml(optimisations) and others that operate on pro-duced text (revisions).
Our strategy is an exam-pie of revision.
Optimisations are useful whenchanges have to be done during the initial gen-eration process.
For example, in Neumann andAcrEs DE COLING-92, NANTES, 23-28 AO't3T 1992 7 0 5 F"aoc.
Ol: COLING-92, NANTES, AUO.
23-28, 1992Finkler (1990) an incremental nd parallel gram-matical component is described that is able tohandle under-specified input such that it detectsand requests missing but necessary grammaticalinformation.Imp lementat ion .
In Levelt (1989) and Meteer(1990) the need for revision respectively moni-toring is discussed in detail although they de-scribe no implementations.
As far as we knowour approach is the first implementation of re-vising a produced utterance in order to find anun-ambiguous alternative.
The underlying parserand generator are described in Shieber et al(1990) and van Noord (1991).
We are using lex-icalized unification-based grammars for Germanand Dutch.AcknowledgementsThis research work has been partially supportedby the German Science Foundation in its SpecialCollaborative Research Programme on ArtificialIntelligence and Knowledge Based Systems (SFB314, Project N3 BiLD), and by the DFKI in theproject DISCO, funded by the German Ministryfor Research and Technology under Grant-No.
:ITW 9002.ReferencesDouglas E. Appelt.
Bidirectional grammars andthe design of natural anguage generation sys-tems.
In Y. Wilks, editor, Theoretical Issues inNatural Language Processing, pages 206-212.Hillsdale, N.J.: Erlbaum, 1989.K.
De Smedt and G. Kempen.
Incremental sen-tence production, self-correction and coordina-tion.
In G. Kempen, editor, Natural LanguageGeneration, pages 365-376.
Martinus Nijhoff,Dordrecht, 1987.Jerry A. Fodor.
The Modularity of Mind: An .Es.say on Faculty Psychology.
A Bradford Book,MIT Press, Cambridge, Massachusetts, 1983.Anthony Jameson and Wolfgang Wahlster.
Usermodelling in anaphora generation: Ellipsis anddefinite description.
In ECAI, pages 222-227,Orsay, 1982.Aravind K. Joshi.
Generation - a new frontierof natural anguage processing?
In TheoreticalIssues in Natural Language Processing 3, NewMexico State University, 1987.Willem J. M. Levelt.
Speaking: From Intentionto Articulation.
MIT Press, Cambridge, Mas-sachusetts, 1989.Marie M. Meteer.
The Generation Gap - theproblem of ezpressibility in test planning.
PhDthesis, University of Massachusetts, 1990.Giinter Neumann and Wolfgang Finkler.
A bead-driven approach to incremental and parallelgeneration of syntactic structures.
In Proceed-tugs of the 13th International Conference onComputational Linguistics (COL1NG), pages288-293, Helsinki, 1990.Giinter Neumann and Gertjan van Noord.
Re-versible grammars for self-monitoring and gen-eration of paraphrases.
In Tomek Strzalkowski,editor, Reversible Grammar in Natural Lan-guage Processing.
Kluwer, to appear.Giinter Neumann.
Reversibility and modularityin natural anguage generation.
In Proceedingsof the ACL Workshop on Reversible Grammarin Natural Language Processing, pages 31-39,Berkeley, 1991.Stuart M. Shieber, Gertjan van Noord, Robert C.Moore, and Fernando C.N.
Pereira.
Semantic-head-driven generation.
Computational Lin-guistics, 16(1), 1990.Gertjan van Noord.
Head corner parsing for dis-continuous constituency.
In 29th Annual Meet-ing of the Association for Computational Lin-guistics, Berkeley, 1991.R.
Wilensky, Y. Arens, and D. Chin.
Talking tounix in english: An overview of uc.
Communi-cations of the ACM, pages 574 593, 1984.ACRES DE COLING-92, NANTES, 23-28 AOUT 1992 7 0 6 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992
