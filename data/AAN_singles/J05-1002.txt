Squibs and DiscussionsReal versus Template-Based Natural LanguageGeneration: A False Opposition?Kees van DeemterUniversity of AberdeenEmiel Krahmer.Tilburg UniversityMarie?t Theune-University of TwenteThis article challenges the received wisdom that template-based approaches to the generation oflanguage are necessarily inferior to other approaches as regards their maintainability, linguisticwell-foundedness, and quality of output.
Some recent NLG systems that call themselves??template-based??
will illustrate our claims.1.
IntroductionNatural language generation (NLG) systems are sometimes partitioned into application-dependent systems which lack a proper theoretical foundation, on the one hand, andtheoretically well-founded systems which embody generic linguistic insights, on theother.
Template-based systems are often regarded as automatically falling into the firstcategory.
We argue against this view.
First, we describe the received view of bothtemplate-based and ??standard??
NLG systems (section 2).
Then we describe a class ofrecent template-based systems (section 3) that will serve as a basis for a comparisonbetween template-based and other NLG systems with respect to their potential forperforming NLG tasks (section 4).
We ask what the real difference between template-based and other systems is and argue that the distinction between the two is becomingincreasingly blurred (section 5).
Finally, we discuss the implications of engineeringshortcuts (Mellish 2000) and corpus-based methods (section 6).2.
Templates versus Real NLG: The Received ViewBefore we can argue against the distinction between template-based and ??real??
NLGsystems, we should first sketch how these two classes are commonly understood.
It issurprisingly difficult to give a precise characterization of the difference between them(and we will later argue against the usefulness of such a characterization), but the ideais the following.
Template-based systems are natural-language-generating systemsthat map their nonlinguistic input directly (i.e., without intermediate representations)to the linguistic surface structure (cf.
Reiter and Dale 1997, pages 83?84).
Crucially, thislinguistic structure may contain gaps; well-formed output results when the gaps are* 2005 Association for Computational Linguistics Computing Science Department, King?s College, University of Aberdeen, United Kingdom.E-mail: KvDeemter@csd.abdn.ac.uk.. Communication and Cognition/Computational Linguistics, Faculty of Arts, Tilburg University,Tilburg, The Netherlands.
E-mail: E.J.Krahmer@uvt.nl.- Human Media Interaction Group, Computer Science, University of Twente, The Netherlands.E-mail: M.Theune@ewi.utwente.nl.filled or, more precisely, when all the gaps have been replaced by linguistic structuresthat do not contain gaps.
(Canned text is the borderline case of a template withoutgaps.)
Adapting an example from Reiter and Dale (1997), a simple template-basedsystem might start out from a semantic representation saying that the 306 train leavesAberdeen at 10:00 AM:Departure?train306; locationabdn; time1000?and associate it directly with a template such as?train is leaving ?townnowwhere the gaps represented by [train] and [town] are filled by looking up the relevantinformation in a table.
Note that this template will be used only when the time referredto is close to the intended time of speaking; other templates must be used forgenerating departure announcements relating to the past or future.
??Real??
or, as weshall say, standard NLG systems, by contrast, use a less direct mapping between inputand surface form (Reiter 1995; Reiter and Dale 1997).
Such systems could start fromthe same input semantic representation, subjecting it to a number of consecutivetransformations until a surface structure results.
Various NLG submodules wouldoperate on it (determining, for instance, that 10:00 AM is essentially the intended timeof speaking), jointly transforming the representation into an intermediate representa-tion likeLeavepresent ?traindemonstrative; Aberdeen; now?where lexical items and style of reference have been determined while linguisticmorphology is still absent.
This intermediate representation may in turn be transformedinto a proper sentence, for example: This train is leaving Aberdeen now.
Details vary; inparticular, many systems will contain more intermediate representations.Template-based and standard NLG systems are said to be ?
?Turing equivalent??
(Reiter and Dale 1997); that is, each of them can generate all recursively enumerablelanguages.
However, template-based systems have been claimed to be inferior withrespect to maintainability, output quality and variation, and well-foundedness.
Reiterand Dale (1997) state that template-based systems are more difficult to maintain andupdate (page 61) and that they produce poorer and less varied output (pages 60, 84)than standard NLG systems.
Busemann and Horacek (1998) go even further bysuggesting that template-based systems do not embody generic linguistic insights(page 238).
Consistent with this view, template-based systems are sometimes over-looked.
In fact, the only current textbook on NLG (Reiter and Dale 2000) does notpay any attention to template-based generation, except for a passing mention of theECRAN system (Geldof and van de Velde 1997).
Another example is a recent overviewof NLG systems in the RAGS project (Cahill et al 1999).
The selection criteria employedby the authors were that the systems had to be fully implemented, complete (i.e.,generating text from nontextual input), and accepting non-hand-crafted input; al-though these criteria appear to favor template based systems, none of the 19 systemsinvestigated were template-based.
In what follows, we claim that the two types ofsystems have more in common than is generally thought and that it is counter-productive to treat them as distant cousins instead of close siblings.
In fact, we arguethat there is no crisp distinction between the two.16Computational Linguistics Volume 31, Number 1173.
Template-Based NLG Systems in PracticeIn recent years, a number of new template-based systems have seen the light,including TG/2 (Busemann and Horacek 1998), D2S (van Deemter and Odijk 1997;Theune et al 2001), EXEMPLARS (White and Caldwell 1998), YAG (McRoy, Channarukul,and Ali 2003), and XTRAGEN (Stenzhorn 2002).
Each of these systems represents asubstantial research effort, achieving generative capabilities beyond what is usuallyexpected from template-based systems, yet they call themselves template-based,and they clearly fall within the characterization of template-based systems offeredabove.In this article we draw on our own experiences with a data-to-speech methodcalled D2S.
D2S has been used as the foundation of a number of language-generatingsystems, including GOALGETTER, a system that generates soccer reports in Dutch.1 D2Sconsists of two modules: (1) a language generation module (LGM) and (2) a speechgeneration module (SGM) which turns the generated text into a speech signal.
Herewe focus on the LGM and in particular on its use of syntactically structured templatesto convert a typed data structure into a natural language text (annotated with prosodicinformation).
Data structures in GOALGETTER are simple representations describinglists of facts, such asgoal-eventTEAM AjaxPLAYER KluivertMINUTE 38GOAL-TYPE penaltyBesides goal events, there are several other types of events, such as players receivingyellow or red cards.
Figure 1 shows a simple template, which the LGM might use toexpress the above fact as, for instance, Kluivert scored a penalty in the 38th minute.1 See http://www.cs.utwente.nl/?theune/GG/GG_index.html for some example reports.Figure 1Sample syntactic template from the GOALGETTER system.van Deemter, Krahmer, and Theune Real versus Template-Based NLGFormally, a syntactic template s = bS, E, C, T?, where S is a syntax tree (typically fora sentence) with open slots in it, E is a set of links to additional syntactic structures(typically NPs and PPs) which may be substituted in the gaps of S, C is a condition onthe applicability of s, and T is a set of topics.
We discuss the four components of atemplate in more detail, starting with the syntax tree, S. All S?s interior nodes arelabeled by nonterminal symbols, while the nodes on the frontier are labeled byterminal or nonterminal symbols: the nonterminal nodes (??gaps??)
are open forsubstitution and they are marked by a ,.
The second element of a syntactic template isE: the slot fillers.
Each open slot in the tree S is associated with a call of some Expressfunction (ExpressTime, ExpressObject, etc.
), which generates a set of expressions thatcan be used to fill the slot.
The right-hand side of Figure 2 shows an example Expressfunction, namely, ExpressObject, which generates a set of NP trees and is used togenerate fillers for the player and goal slots in the template of Figure 1.
The first, forexample, leads to the generation of NPs such as Kluivert (proper name), the forwardKluivert, Ajax player Kluivert, Ajax?
Kluivert, the striker, and he, depending on the contextin which the NP is generated.The left-hand side of Figure 2 shows the function ApplyTemplate, which handlesthe choice among all possible combinations of slot fillers.
ApplyTemplate first callsFillSlots to obtain the set of all possible trees (all_trees) that can be generated from thetemplate, using all possible combinations of slot fillers generated by the Expressfunctions associated with the slots.
For each tree in this set, it is checked (1) whether itdoes not violate a version of the Chomskyan binding theory and (2) whether it iscompatible with the context model, which is a record containing all the objectsintroduced so far and the anaphoric relations among them.
From the resulting set ofallowed_trees, one is selected randomly (using the function PickAny) and returned tothe main generation algorithm.
The random-choice option was chosen to maximize thevariety of sentences produced by the system.The mechanisms described so far take care of sentence planning and languagerealization.
Text planning is performed by components C and T. C is a Booleancondition.
A template s is applicable only if its associated condition is true.
Anexample is the condition from Figure 1 saying that the template can be used only ifthe result of the current match has been conveyed to the user (i.e., is known) andthe current goal is the first one which has not been conveyed (i.e., is not known).
Tocater to aspects of text planning that allow a less knowledge-intensive approach,GOALGETTER associates every template with a set of topics T, which the LGM algo-rithm uses to group sentences together into coherent chunks of text.
For example, any18Figure 2Functions ApplyTemplate (left) and ExpressObject (right).Computational Linguistics Volume 31, Number 119template associated with the topic of goal scoring can ??fire??
throughout the openingparagraph of the report.4.
Template-Based NLG: Deep or Shallow?How do template-based systems measure up against the criteria mentioned insection 2?
When dealing with this question, we are interested as much in what couldbe done in principle as in what has been achieved in practice.
After some preliminaryremarks, we focus on the criterion of linguistic well-foundedness.It is far from obvious that template-based systems should always score low onmaintainability.
Several template-based systems such as TG/2, EXEMPLARS, andXTRAGEN have been reused for generation in different languages or in differentdomains (cf.
Kittredge et al 1994).
In the case of D2S, the basic generation algorithmand such functions as ApplyTemplate and ExpressObject have been used for differentapplication domains (music, soccer games, route descriptions, and public transport)and different languages (English, Dutch, and German); D2S has been used for thegeneration of both monologues and dialogue contributions (van Deemter and Odijk1997; Theune et al 2001).
When a template-based system is applied to a new domain orlanguage, many of the templates will have to be written anew (much as new grammarfragments need to be developed for standard NLG systems), but the underlyinggeneration mechanisms generally require little or no modification.As for the output quality and variability of the output, if template-based systemshave the same generative power as standard NLG systems (Reiter and Dale 1997),there cannot be a difference between the types of output that they are able to generatein principle.
The fact that templates can be specified by hand gives template-basedsystems an advantage in cases in which good linguistic rules are not (yet) available orfor constructions which have unpredictable meanings or highly specific conditions ofuse.
Some template-based systems have variability as one of their central designspecifications: Current D2S-based systems rely mainly on random choice to achievevariation, but more context-sensitive variations (e.g., varying the output depending onuser characteristics) can also be achieved through the use of parametrized templates(XTRAGEN) or template specialization hierarchies (EXEMPLARS).The most crucial question, in our view, is whether a template-based NLG systemcan be linguistically well-founded (or ??deep??
in terms of Busemann and Horacek[1998]), in the sense that the choices inherent in its mapping from input to output arebased on sound linguistic principles.
To judge the well-foundedness of template-basedsystems, let us look at the different types of decisions that an NLG system needs tomake, as distinguished by Cahill et al (1999) and Reiter and Dale (2000).4.1 Content DeterminationDuring content determination, it is decided what information is to be conveyed.
Sincecontent determination precedes language generation proper, it is clear that in principle,template-based systems can treat it in the exact same ways as standard NLG systems.In practice, template-based systems tend to take their departure from ?
?flat data??
(e.g.,database records), whereas standard systems often use richer input, in which somedecisions concerning the linguistic structure of the output (e.g., decisions aboutquantificational or rhetorical structure) have already been made.
To the extent that thisis the case, the ?
?generation gap??
to be bridged by template-based systems is actuallywider than the one to be bridged by standard NLG systems.van Deemter, Krahmer, and Theune Real versus Template-Based NLG4.2 Referring ExpressionsAs for the generation of referring expressions, template-based systems vary widely:The simplest of them (e.g., MSWord-based systems for mail merge) can fill their gapswith only a limited number of phrases, but more sophisticated systems (called??hybrid??
systems in Reiter [1995]) have long existed; these effectively use standardNLG to fill their gaps.
Recent systems have moved further in this direction.
D2S, forexample, uses well-established rules for constraining the use of anaphors (see, e.g., theChomskyan ViolateBindingTheory and Wellformed in ApplyTemplate) and a newvariant of Dale and Reiter?s (1995) algorithm for the generation of referring expressionsthat takes contextual salience into account (MakeReferringExp in ExpressObject)(Krahmer and Theune 2002).
A similar range of approaches can be found among NLGsystems that are not template-based; in fact, several systems from the RAGS inventorydo not really address referring expression generation at all (Cahill et al 1999).4.3 AggregationAggregation is an NLG task in which differences between the two types of systemsmay be expected.
After all, every template contains a ??fixed??
part, and surely this partcannot be recombined with other parts?
The reality is slightly more complex.
TheGOALGETTER system, for instance, uses the following approach: In order to generate asubject-aggregated sentence of the form A and B got a red card, a separate template iscalled of the form X got a red card [syntactic structure omitted], subject to conditionsrequiring that the gap X be filled with an appropriate conjoined noun phrase, referringto the set {A, B}.
Other approaches are possible.
For example, the system could firstgenerate A got a red card and B got a red card, then aggregate these two structures (whosesyntactic and semantic structure is known) into the desired conjunctive structure (vanDeemter and Odijk 1997).
Whether a system is able to perform operations of this kinddoes not depend on whether the system is template based, but on whether it possessesthe required syntactic and semantic information.4.4 LexicalizationThe same point is relevant for lexicalization.
Let us suppose (perhaps rather charitably;Cahill et al 1999) that a variety of near-synonymous verbs are present in the lexicon ofthe NLG system (e.g., give, offer, donate, entrust, present to).
How would a standard NLGsystem choose among them?
Typically, the system does not have a clue, because ourunderstanding of the differences among these verbs is too imperfect.
(The input to thesystem might prejudge such decisions by pairing each of these verbs with differentinput relations, but that would be cheating.)
As with the previous tasks, it is not clearthat standard NLG systems are in a better position to perform them than template-based ones: The latter could use templates that vary in the choice of words andstipulate that they are applicable under slightly different conditions (cf.
the use ofspecialization hierarchies in EXEMPLARS).
The condition C for X kicked the ball in the net,for example (as opposed to X scored or X nudged the ball in) might require that the balldid not touch the ground after departing the previous player.4.5 Linguistic RealizationIt is in linguistic realization that the most obvious differences between standard andtemplate-based approaches appear to exist.
Many template-based approaches lack ageneral mechanism for gender, number, and person agreement, for example.
Systemsin the D2S tradition avoid errors by letting functions like ExpressObject use handmaderules, but this approach becomes cumbersome when coverage increases; general-20Computational Linguistics Volume 31, Number 121izations are likely to be missed and portability is reduced, for example, if differenttemplates are used for John walks and John and Mary walk.
One should not, however, letone?s judgment depend on accidental properties of one or two systems: Nothing keepsthe designer of a template-based system from adding morphological rules; witnesssystems like YAG (McRoy, Channarukul, and Ali 2003) and XTRAGEN (Stenzhorn 2002).The YAG system, for example, allows the subject and verb of a template to beunderspecified for number and person, while using attribute grammar rules tocomplete the specification: Returning to the example above, the number attribute ofJohn and Mary is inferred to be plural (unlike, e.g., John and I); a subject-verbagreement rule makes the further inference that the verb must be realized as walk,rather than walks.5.
Templates: An Updated ViewA new generation of systems that call themselves template-based have blurred the linebetween template-based and standard NLG.
This is not only because some systemscombine standard NLG with templates and canned text (Piwek 2003), but also becausemodern template-based systems tend to use syntactically structured templates andallow the gaps in them to be filled recursively (i.e., by filling a gap, a new gap mayresult).
Some ??template-based??
systems, finally, use grammars to aid linguisticrealization.
These developments call into question the very definition of ??templatebased??
(section 2), since the systems that call themselves template-based have come toexpress their nonlinguistic input with varying degrees of directness.??Template-based??
systems vary in terms of linguistic coverage, the amount ofsyntactic knowledge used, and the number of steps involved in filling the templates,among other things.
Here, we highlight one particular dimension, namely, the size of(the fixed part of) the templates.
A comparison with tree-adjoining grammar (TAG)?based-approaches to NLG may be useful (Joshi 1987; see also Becker 2002).
Joshi (1987,page 234) points out that ?
?The initial .
.
.
trees are not constrained in any other mannerthan.
.
.
.
The idea, however, is that [they] will be minimal in some sense.??
Minimality isusually interpreted as saying that a tree should not contain more than the lexical headplus its arguments.
Initial trees may be likened to templates.
Nonminimal templates/elementary trees are essential for the treatment of idioms and special collocations.Generally speaking, however, the larger the templates/elementary trees, the less sys-tematic the treatment, the less insight it gives into the compositional structure of lan-guage, and the larger the number of templates/elementary trees needed.
Again, thehistory of D2S is instructive: The earliest D2S-based NLG system (DYD; van Deemter andOdijk 1997) used long templates, but the majority of the templates in GOALGETTER areminimal in the sense explicated above (Theune et al 2001).6.
Discussion: Shortcuts and Statistics in NLGLet us compare our views with those of Mellish (2000).
Mellish points out that NLGsystems often use shortcuts, whereby one or more modules are trivialized, either bybypassing them (and the representations that they create) or by letting their operationsbe dictated by what the other modules expect (e.g., lexical choice may be trivializedby using a one-to-one mapping between semantic relations/predicates and lexicalitems).
Mellish argues that shortcuts have a legitimate role in practical NLG whenlinguistic rules are missing, provided the existence of the shortcuts is acknowledged:Even though they lead to diminished generality and maintainability, the unavailabilityvan Deemter, Krahmer, and Theune Real versus Template-Based NLGof ??deep??
rules means that there is no alternative (yet).
For instance, there is littleadded value in using abstract representations from which either a passive or an activesentence can be generated if we are unable to state a general rule that governs thechoice, in which case one can be forgiven for explicitly specifying which sentencesshould be active and which ones passive, avoiding a pretense of linguistic sophis-tication.
It is shortcuts of this kind that a template-based system is well placed to make,of course.
But crucially, template-based systems do not have to use shortcuts any morethan standard NLG systems: Where linguistic rules are available, both types of sys-tems can use them, as we have seen.Another response to the absence of linguistic rules is the use of statisticalinformation derived from corpora, as is increasingly more common in realization, butalso for instance in aggregation (e.g., Walker, Rambow, and Rogati 2002).
The point wewant to make here, however, is that ??template-based??
systems may profit from suchcorpus-based approaches just as much as ??standard??
NLG systems.
The approach ofLangkilde and Knight (1998), for example, in which corpus-derived n-grams are usedfor selecting the best ones from among a set of candidates produced by overgenera-tion, can also be applied to template-based systems (witness the mixed template/stochastic system of Galley, Fosler-Lussier, and Potamianos [2001]).We have argued that systems that call themselves template based can, in principle,perform all NLG tasks in a linguistically well-founded way and that more and moreactually implemented systems of this kind deviate dramatically from the stereotypicalsystems that are often associated with the term template.
Conversely, most standardNLG systems perform many NLG tasks in a less than well-founded fashion (e.g.,relying heavily on shortcuts, and nontransparent ones at that).
We doubt that there isstill any important difference between the two classes of systems, since the variationwithin each of them is as great as that between them.22AcknowledgmentsThis is a remote descendant of a paperpresented at the workshop ?
?May I SpeakFreely???
(Becker and Busemann 1999).
Wethank three reviewers for comments.ReferencesBecker, Tilman.
2002.
Practical,template-based natural languagegeneration with TAG.
In Proceedingsof TAG+6, Venice.Becker, Tilman and Stephan Busemann,editors.
1999.
?
?May I Speak Freely???
BetweenTemplates and Free Choice in NaturalLanguage Generation: KI-99 Workshop.DFKI, Saarbru?cken, Germany.Busemann, Stephan and HelmutHoracek.
1998.
A flexible shallowapproach to text generation.
In Proceedingsof the Ninth International Workshop onNatural Language Generation,pages 238?247: Niagara-on-the-Lake,Ontario, Canada.Cahill, Lynn, Christy Doran, Roger Evans,Chris Mellish, Daniel Paiva, Mike Reape,and Donia Scott.
1999.
In search of areference architecture for NLG systems.In Proceedings of the Seventh EuropeanWorkshop on Natural Language Generation,pages 77?85: Toulouse, France.Dale, Robert and Ehud Reiter.
1995.Computational interpretations of theGricean maxims in the generation ofreferring expressions.
Cognitive Science,18:233?263.Galley, Michel, Eric Fosler-Lussier, andAlexandros Potamianos.
2001.
Hybridnatural language generation for spokendialogue systems.
In Proceedings ofthe Seventh European Conference onSpeech Communication and Technology.Aalborg, Denmark.Geldof, Sabine and Walter van de Velde.1997.
An architecture for template based(hyper)text generation.
In Proceedings ofthe Sixth European Workshop on NaturalLanguage Generation, pages 28?37,Duisburg, Germany.Joshi, Aravind.
1987.
The relevance oftree adjoining grammar to generation.In Gerard Kempen, editor.
Natural LanguageComputational Linguistics Volume 31, Number 123Generation, Martinus Nijhoff, Leiden,The Netherlands, pages 233?252.Kittredge, Richard, Eli Goldberg, MyungheeKim, and Alain Polgue`re.
1994.Sublanguage engineering in the FOGsystem.
In Fourth Conference on AppliedNatural Language Processing, pages 215?216,Stuttgart, Germany.Krahmer, Emiel and Marie?t Theune.
2002.Efficient context-sensitive generation ofdescriptions in context.
In Kees vanDeemter and Rodger Kibble, editors,Information Sharing.
CSLI Publications,Stanford, CA, pages 223?264.Langkilde, Irene and Kevin Knight.
1998.Generation that exploits corpus-basedstatistical knowledge.
In Proceedings ofthe ACL, pages 704?710, Montreal,Quebec, Canada.McRoy, Susan W., Songsak Channarukul,and Syed S. Ali.
2003.
An augmentedtemplate-based approach to textrealization.
Natural Language Engineering,9(4):381?420.Mellish, Chris.
2000.
Understanding shortcutsin NLG systems.
In Proceedings of Impacts inNatural Language Generation: NLG betweenTechnology and Applications, pages 43?50,Dagstuhl, Germany.Piwek, Paul.
2003.
A flexiblepragmatics-driven language generator foranimated agents.
In Proceedings of EACL03(Research Notes), pages 151?154,Budapest, Hungary.Reiter, Ehud.
1995.
NLG vs. templates.
InProceedings of the Fifth European Workshop onNatural Language Generation, pages 95?105,Leiden, The Netherlands.Reiter, Ehud and Robert Dale.
1997.
Buildingapplied natural language generationsystems.
Natural Language Engineering,3(1):57?87.Reiter, Ehud and Robert Dale.
2000.Building Natural Language GenerationSystems.
Cambridge UniversityPress, Cambridge.Stenzhorn, Holger.
2002.
A natural languagegeneration system using XML- andJava-technologies.
In Proceedings of theSecond Workshop on NLP and XML,Taipei, Taiwan.Theune, Marie?t, Esther Klabbers, Jan-Roelofde Pijper, Emiel Krahmer, and Jan Odijk.2001.
From data to speech: A generalapproach.
Natural Language Engineering,7(1):47?86.van Deemter, Kees and Jan Odijk.
1997.Context modelling and the generation ofspoken discourse.
Speech Communication,21(1/2):101?121.Walker, Marilyn, Owen Rambow, andMonica Rogati.
2002.
Training a sentenceplanner for spoken dialogue usingboosting.
Computer Speech and Language,16:409?433.White, Michael and Ted Caldwell.
1998.EXEMPLARS: A practical, extensibleframework for dynamic text generation.In Proceedings of the Ninth InternationalWorkshop on Natural Language Generation,pages 266?275, Niagara-on-the-Lake,Ontario, Canada.van Deemter, Krahmer, and Theune Real versus Template-Based NLG
