Proceedings of the EACL 2009 Workshop on Computational Approaches to Semitic Languages, pages 10?18,Athens, Greece, 31 March, 2009. c?2009 Association for Computational LinguisticsThe Karamel System and Semitic Languages: Structured Multi-TieredMorphologyFranc?ois Barthe?lemyCNAM-Cedric, Paris, FranceINRIA-Alpage, Rocquencourt, Francefrancois.barthelemy@cnam.frAbstractKaramel is a system for finite-state mor-phology which is multi-tape and uses atyped Cartesian product to relate tapes ina structured way.
It implements stati-cally compiled feature structures.
Its lan-guage allows the use of regular expres-sions and Generalized Restriction rules todefine multi-tape transducers.
Both simul-taneous and successive application of localconstraints are possible.
This system is in-teresting for describing rich and structuredmorphologies such as the morphology ofSemitic languages.1 IntroductionKaramel is a system for defining and executingmulti-tape finite-state transducers where relation-ships between tapes are expressed using a treestructure.
This structure is obtained through em-bedded units, which are used to analyze a tuple ofstrings recognized by the transducer.
For instance,the units considered in an example may be affix,form and sentence.The system includes a language and an Inte-grated Development Environment.
The languageuses extended regular expressions, computationsand contextual rules.
The environment provides agraphical interface to write and execute finite-statedescriptions.Karamel has many applications.
For NaturalLanguage Processing, it may be used for morpho-logical analysis, transliteration, parsing, etc.
Thispaper is dedicated to the application of Karamel tothe morphological analysis of Semitic languages,for which both multiple tapes and complex struc-tures are useful.Some descriptions of the morphology ofSemitic Languages use several tiers.
For instance,(McCarthy, 1981) uses four tiers, one for prefixes,one for the root, one for the template (consonant-vowel pattern) and the last one for the vocaliza-tion.Such a multi-tiered description may be im-plemented using a cascade of 2-tape machines(Beesley, 1998) or using a multi-tape transducerwhere each tier is described by a tape and the sur-face form by an additional tape.
This is the ap-proach of G. A. Kiraz for the Syriac language (Ki-raz, 2000).
Karamel is designed for the later solu-tion.The multi-tape feature is also interesting for de-scribing related dialects, whenever a great part ofthe analysis may be shared.
A separate tape is ded-icated to the surface form in each dialect.The Semitic Morphology is strongly structuredby the roots.
The basis of an analysis is the identi-fication of the root.
Furthermore, several layers ofaffixes may be distinguished around the core con-taining the roots: paradigmatic prefixes; affixesencoding the person, gender and number; cliticssuch as pronouns.
This structure is convenientlydefined using Karamel?s units.In the following section of the paper, we presentKaramel?s language, its theoretical backgroundand its syntax.
Section 3 describe the other as-pects of the Karamel System: its development en-vironment, its current state and future evolutions.Then comes an example of Semitic morphologywritten in Karamel, the description of Akkadianverbal flexion.
The last section compares Karamelto some other systems.2 The Karamel languageThe language is based on a subclass of ratio-nal n-ary relations called multi-grain relationswhich is closed under intersection and difference(Barthe?lemy, 2007b).
They are defined using ra-tional expressions extended with a typed Cartesianproduct.
This operator implements the notion ofunit used to give a tree-structure to tuples of the10relations.
A unit is an inner-node of the structure.A project is a set of finite-state machine definedover the same universe: the same alphabet, thesame tape set, the same units.
A project beginswith declarations defining this universe.
It contin-ues with an ordered sequence of machine defini-tions.The declaration section contains several clausesincluding classes, tapes and unit definitions.
Aclass of symbols is a finite set of symbols.
Hereare some examples of class definitions:class short_v is a, e, i, u;class long_v is aa, ee, ii, uu;class vow is a, e, i, u, long_v;A symbol may belong to several classes.
In thedefinition of a class, another class name may ap-pear and is just an abbreviation for all its members.The class names are also used in regular expres-sions to denote the disjunction of their members.The symbols written using several letters and/ordigits, when there is a risk of confusion with astring of symbols, must be written enclosed by <and >.
For instance, the long a is written aa in theclass definition (long_v) but in a regular expres-sion, it must be written <aa> because aa denotesa string of two short vowels.
The bracketing with< and > is also used for special characters such asthe space < >, punctuation marks (e.g.
<,>) andthe empty string <>.A tape is declared with its name and the alpha-bet of the symbols which may appear on it.tape dig: <digit>,fr, en: <letter>|< >|<->;The alphabet is defined using a regular expressionmade with symbols, classes and length-preservingoperators such as the disjunction and the differ-ence.A Karamel unit is a typed Cartesian product.The type consists in i) a number of componentsand ii) the tapes contained by each component.
Inthe declaration, there is also a default value foreach component.unit seg is {d: dig = <digit>*;f: fr = <letter>*;e: en = <letter>*}unit num is{c: dig, fr, en={seg}+}The unit seg (for segment) contains three compo-nents, each using a single tape.
The unit num (fornumber) has one component which contains threetapes (dig, fr and en).The default value is a non-empty sequenceof units of type seg.
Cartesian products arewritten in regular expressions as tuples withthe type name followed by the components:{seg: 2(0?),vingt,twenty}.
Compo-nent names may be used instead of their posi-tion {seg:e=twenty,f=vingt,d=2(0?
)}.When a component is omitted, the default valueis implied.
The notation {seg} (cf.
the defaultvalue of the component c in num) is a unit segwith default values in all the components.
Unitsmay be embedded:{num:{seg:2,vingt,twenty}{seg:2,-deux,-two}}This example is a structured representation of thetriplet (22,vingt-deux,twenty-two).In Karamel, there are three ways of defining afinite-state transducer: by a regular expression, bya computation or by a contextual rule.
Regularexpressions use symbols, classes of symbols, ra-tional operations and standard extensions (for in-stance, optionality written ?).
Furthermore, inter-section, difference and negation are also availablealthough these operations are usually not definedon transducers.Regular expressions are defined using theregexp construction:regexp zero is{seg: 0,ze?ro,(zero|naught)};{seg: <digit>*-0};endA regexp contains a non empty sequence of regularexpressions ended with a semicolon.
It denotes thedisjunction of these expressions.The second way of defining a machine is by ap-plying operators to already defined machines.
Allthe operators used in regular expressions may ap-pear in such a computation, but there are someother operators as well.
The first one is the projec-tion which removes one or several tapes from itsoperand.
The second one is the external productwhich combines a n-ary relation with a languageon a given tape.
It is used to apply a transducerto a given input which is not split in units yet.
Allpossible partitioning of the input in units is firstcomputed, and then it is intersected with one tapeof the transducer.
The reverse operation is the ex-ternal projection which extracts a language from a11relation on a given tape by first applying the sim-ple projection and then removing unit boundaries.These two operations are used to transduce a givenpossibly non-deterministic input into an output.let segments=union(star(non_zero),zero);The let is followed by an expression in prefixednotation with the operators written with letters.The literals are the names of previously definedmachine.
In our example, the expression uses themachines zero defined by the previous regexpand non_zero (not given here).The last way for defining a machine consists inthe Generalized Restriction Rules defined in (Yli-Jyra?
and Koskenniemi, 2004).
Roughly speak-ing, these rules are a modernized version of clas-sical Two-Level Rules such as Context Restrictionand Surface Coercion rules (Koskenniemi, 1983).They also are comparable to the rewrite rules ofXerox Finite-State Tools (Beesley and Karttunen,2003), the difference being that rewrite rules areapplied in cascades whereas GR rules may be si-multaneous.Contextual rules are defined using three regularexpressions:gr_rule rzero is{num}constraint{num:seg={seg}*{seg:#0}{seg}*}=> {num:seg={seg:#0,ze?ro}}endThe first expression defines a universe.
All the ex-pressions in the universe which match the patternon the left of the arrow must also match the pat-tern on the right.
The sharp symbol is an auxiliarysymbol used to make sure that the 0 on both sidesis the same occurrence of this symbol.
It identi-fies the center of the contextual rule.
For more de-tails about the semantics of Generalized Restric-tion rules, see (Yli-Jyra?
and Koskenniemi, 2004).Karamel implements non-recursive featurestructures.
Feature values are ordinary symbolsand feature structures are typed.
The types mustbe declared in the declaration section of the de-scription.
Feature Structures may appear any-where in regular expressions.
They are usually puton one or several specific tapes.
They are stati-cally compiled.
Feature Structures are to be usedwith caution, because they allow the expression oflong-distance dependencies which are costly andmay lead to a combinatorial explosion.
The fea-ture structure compilation techniques come from(Barthe?lemy, 2007a).A type is defined as follows:fstruct Name is[gen=gender,num=1|2|3]where gender is a class and 1, 2, 3 are sym-bols.
Each feature is defined with its name andits domain of values, which is a finite set of sym-bols defined by a regular expression.
A fea-ture structure of this type is written as follows:[Name:gen=masc,num=2].
As usual, it ispossible to specify only part of the features andtheir order is not important.
The type name atthe beginning is mandatory.
Feature structures arecompiled using auxiliary symbols which are notknown by the user.
The type name denotes a classof symbols containing all the symbols which maybe used to compile a structure of this type, includ-ing auxiliary symbols.Regular expressions and contextual rules mayuse variables which take their values in finite setof symbols.
An expression with such a variablestands for the disjunction of all the possible val-uation of the variables.
Variables are especiallyuseful to express feature structure unification.The language offers macros called abbrevia-tions.
An abbreviation is a notation for an alreadydeclared unit where part of the components is de-fined in the declaration and another part is definedin the call.
Here is an example.abbrev teen is {d: dig = <digit>;f: fr =<letter>*;e: en = <letter>*}for {seg: 1 @d, @f,@e teen}In an expression, {teen: 6, seize,six}is expanded in {seg: 16,seize,sixteen}before the compilation.3 The Karamel SystemThe core of the system consists in a compiler writ-ten in Python which compiles Karamel descrip-tions into finite-state automata which are inter-preted as transducers by the system.
The com-piler uses the FSM and Lextools toolkits by AT&TResearch.
A Karamel regular expression is firstcompiled in the Lextools format, then the Lextoolscompiler is called to compile it in FSM binary for-mat.
Some Karamel operations over transducers12such as the intersection, the union, the concatena-tion are directly implemented by the correspond-ing FSM operation on automata.
Some other op-erations such as the two projections and the ex-ternal product are performed by a script calling asequence of FSM computations.The development environment uses a Graph-ical User Interface written in HTML, CSS andJavascript.
There are three main subparts: projectmanagement (creation, deletion, import, export,duplication); project development: creation, dele-tion, renaming, reordering, checking, compilationof a machine; machine execution, with optional in-troduction of run-time input, filtering of the result,projection on one or several tapes.A dependency graph is maintained in order toensure that a change in one machine is taken intoaccount in all the machines which depend on it.For instance if there is the following definition:let m3=union(m1,m2);, any change in m1implies a recompilation of m3.
This recompila-tion is not necessarily immediate.
A status is asso-ciated to each machine.
The change in m1 resultsin a change in the statuses of m1 and m3.At the moment, the execution of a machine ispossible only through the GUI, using a browser.The development of a C++ or Python function tointerpret the FSM machine with the Karamel se-mantics is not a difficult task, but it is still to bedone.
Another weakness of the current versionof the system is the type-checking which is notfully implemented.
The type system is simple andthe language is strongly typed, so every type errorshould be found at compile time.
It is not the caseyet.Karamel will be distributed to a few kind beta-testers in a near future.
We plan to add some testfacilities to the environment.
At medium term, amigration from FSM to openFST (Allauzen et al,2007) and a distribution under the LGPL licenseare envisaged.So far, Karamel has been used for morphology.A morphological analyzer for the Akkadian verb ispresented in the next section.
It is a medium sizegrammar.
Another project describes the Frenchmorphology.
It is the translation in Karamel ofa grammar developed for the MMORPH system(Petitpierre and Russel, 1995).
The grammar hasa large coverage.
It has been tested with a toylexicon only.
The other domain of application ex-plored so far is the transliteration domain.
Thereis a multilingual description of numbers that re-lates the notation with digits to a written form inseveral languages (French, English, Finnish).
Atape is devoted to each language, a tape to the dig-its and several tapes for feature structures, someof which are language specific.
Another projecttransliterates Egyptian hieroglyphs into the Latinalphabet, using an intermediate representation ona third tape.4 An example: the Akkadian verbIn this section, we present an application ofKaramel to Semitic morphology, namely a de-scription of Akkadian verbal forms.Akkadian is the language of the ancientMesopotamia.
It was written in cuneiform, fromaround 2500 B.C.
up to the first century B.C.
Itis the main representative of the eastern branch ofSemitic languages.
It is divided in seven main di-alects with many local variations.
Its verbal mor-phology is a typical semitic one, with a great num-ber of triliteral roots, some stems with usual flex-ion (prefixation, reduplication, infixation, vocal-ization).
There are two infixes, t and tn.
Theirpresence is almost orthogonal with the presence ofa stem prefix and the reduplication of the secondradical.The description of the morphology in Karamelis based on a two-level structure.
The first levelseparates verbal forms in three layers:?
a core, which contains the root, its vocaliza-tion, and also the prefixes which depend onthe stem and/or aspect, infixes and gemina-tion.?
personal affixes (prefixes and suffixes), whichencode the person, the number, the genderand the case (when relevant).?
the clitics: enclitic pronoun and proclitic par-ticles.In the following, these units will be called biggrains.The second level is used for the core only, whichis divided in smaller parts using the two followingcriteria: firstly, a unit must be significant in theanalysis; secondly, it is determined by a set of fea-tures in such a way that no smaller part is uniquelydetermined by a subset of these features and nogreater part is determined by the same set of fea-tures.
Such a component is invariable for a given13value of its features, except some surface transfor-mations.Following the proposition of (Malbran-Labat,2001), three kinds of vowels are distinguished.The first kind of vowel depends on the stem andthe aspect.
They are called aspectual vowels.
Thesecond kind, called lexical vowel depends on thestem, the aspect and a lexical category attachedto the root.
The third kind of vowels, the sup-port vowels are not related to morphological fea-tures.
They are necessary to pronounce and/orwrite1 the form.
The first two kinds of vow-els are systematically preserved in weak formswhereas support vowels disappear in weak con-sonant neighborhood.
Support vowel are memberof the small grain containing the preceding conso-nant whereas lexical and aspectual vowels consti-tute small grains.The different subparts of the core and their fea-tures are given in figure 1.
They will be calledsmall grains.The figure 2 gives some extracts of the project.It begins with the declaration section.
There is aclass of all letters, subclasses of consonants, weakconsonants, strong consonants, vowels, long vow-els, short vowels.
There is also a class for eachfeature domain.
Several types of feature structuresare defined: one for each kind of big grain (core,personal affix, pronoun, enclitic particle); a uniquetype for all the kinds of small grains.The description has five tapes.
The first tapecontains the feature structures associated with biggrains, the second tape contains the feature struc-tures covering small grains.
The third tape con-tains a canonical form of each grain.
It corre-spond to the lexical form of traditional Two-Levelgrammars.
The last two tapes contain the surfaceforms respectively in the Babylonian and the As-syrian dialects, which are slightly different, mostlyin their vocalization.Here is an example of structured analysis of theform iptarasu?.pers core perspref suffrad stem rad lex rad1 infix 2 vowel 3i p ta r a s u?The tape scheme does not correspond to a multi-1The cuneiform writing is syllabic.
It is impossible towrite a consonant without a vowel immediately before or af-ter it.tiered analysis.
There are several reasons for this.The first one comes from the Akkadian language.The stems and aspects are not described by pat-terns but divided in smaller analysis units, in par-ticular stem analysis uses the two orthogonal di-mensions called here stem1 and stem2: the firstone notes stem gemination and prefixation and thelater, infixation.
A stem is a pair (stem1,stem2).The vocalization does not require patterns of twovowels separated by the middle radical, but inmost cases a pattern of only one vowel.Another reason comes from the Karamel lan-guage: the information usually encoded in tiersappears in the unit types.
For instance the infor-mation about the root tier appears in small grainsof type radical.
Similarly, the vocalization appearsin the small grains of types aspect vowel and lex-ical vowel.
The rich tree structure is sufficient toexpress clearly the analysis.The morphotactics of the language is describedas the sum of local constraints.
It involves onlythe first three tapes.
The elementary units, namelysmall grains and all the big grains but the core,are described separately.
For instance, the ma-chine aspect_infix (cf.
figure 2) distin-guishes two cases: if the feature aspect hasperfect as value, then there is a small grain oftype ifx_parf containing the infix ta; if thefeature aspect has another value, then there isno grain of type ifx_parf in the core.
The twocases are given using two different regular expres-sions.
For more complex small grains, more casesare to be described, up to 13 for the lexical vowelswhich have different colors and length dependingon 4 features.Two finite-state machines describe the order ofrespectively small and big grains.
The one forsmall grains called core_morphotactics issketched in the figure.The lexicon is given using a macro calledlexent.
A lexent (for lexical entry) tuplelooks like a usual lexicon entry, with only lexi-cal information, although it is a regular expressiondenoting a complete core, with its prefix, infixes,vowels, etc.
The lexicon finite state machinemay be directly intersected with the sg_ordermachine previously defined and all the other con-straints in order to obtain a machine describing allthe possible cores build on the roots given in thelexicon.The computation of the two surface forms for14subpart stem1 stem2 aspect class root exampleaspect prefix X X X muparrisustem prefix X s?uprusuradical X ipruscore infix X iptarasstem1 gemination X uparrasaspect gemination X X X iparrasaspect vowel X X X uparrislexical vowel X X X X iprusFigure 1: Subparts and featuresthe two dialects is performed by a set of con-straints written using regular expressions and con-textual rules.
They relate the lexical form and oneor both surface forms.
The features are used insome of them.Rules are used for phenomena which may occurseveral times in a given form.
For instance, thedeletion of support vowels before another vowelmay appear in several places: before lexical andaspectual vowels, but also when a weak consonantdisappears or changes to a vowel.In many cases however, surface transformationoccur only in one given place of a form and the useof a rule is not necessary.
The tree structure helpsin characterizing this place.
The example givenin the figure is the coloration of the first vowel insome stems (II and III).The grammar presently covers strong forms, 1-weak verbs and part of 2-weak and 3-weak verbs.Verbs with two or three weak consonants2 andquadriliteral roots are not covered at all.
The de-scription uses 27 regexp clauses, 22 let and 6rules.4.1 Comparisons with other systemsThere are many systems for writing finite-statemachines.
In this section we compare Karamelwith some of them which are specialized in mor-phological descriptions.The most popular system is probably the XeroxFinite State Tool (Beesley and Karttunen, 2003).It has been used, among others, for the descrip-tion of Arabic morphology (Beesley, 1998).
Theinterdigitation is handled using a compile-replaceprocess using the replace operator (Karttunen andBeesley, 2000) (Karttunen, 1995).The computational model is a sequential one,where two-tape transducers are merged using the2There is a Akkadian verb with 3 weak consonants as root.composition operation.
The descriptions are ori-ented, with an input and an output, but the trans-duction has not to be deterministic and the ma-chines are invertible.
The strings are not struc-tured, but some structure may be marked usingauxiliary symbols inserted when necessary by theuser.In order to fulfill the constraints that there areonly two tapes, grammars often put heterogeneousdata on a tape.
For instance, the features and thelexical representations are put together on the in-put tape.
Intermediate forms in the cascade oftencontain a mix of lexical and surface representa-tions.There are no feature structures in XFST, but fea-tures written as ordinary symbols.
The scope andthe unifications are written by the user.Karamel is more declarative than XFST.
Infor-mation of different natures are put on differenttapes.
Abstract feature structures are available.Their compilation and the unifications are auto-mated.
On the other hand, XFST is more efficient.The structure information is put only where neces-sary.XFST is distributed under a commercial license.The system MAGEAD is another system offinite-state morphology developed for Arabic di-alects (Habash and Rambow, 2006).
It follows themulti-tape approach proposed by George AntonKiraz for the Syriac language (Kiraz, 2000).
It hasa rule-based language following the principles of(Grimley-Evans et al, 1996) in which a notion ofpartition splits forms in a sequence of units com-parable to Karamel?s units.
But in this approach,there is only one kind of unit which relates all thetapes.
Like Karamel, MAGEAD is a layer aboveLextools and FSM.
The system is not distributedand its description in published papers is not verydetailed.15Declarationsclass vowel is a, e, i, u, aa, ee, ii, uu;class cons is b, d, g, h, ...class num is sing, dual, plur;class aspect is present, preterit, perfect, ......fstruct fspers is [asp=aspect,pers=pers,num=num,gen=gen]fstruct fscore is [stem1=stem1,stem2=stem2,asp=aspect,lex=lex]...tape lex: letter, bab: letter, assy: letter, sg: fssg,bg : fspers|fscore|fsclit;unit sgrain is {sg: sg = [fssg]; lex: lex = <letter>*,bab: bab =<letter>*, assy: assy = <letter>*}unit core is {bg: bg = [fscore];smallg: sg, lex, bab, assy = {sgrain}* }...abbrev sgi is {r1: bg = [fscore]; r2: sg = [fssg];r3: lex = <letter>*}for {core: @r1, {sgrain}* {sgrain: @r2, @r3} {sgrain}* }abbrev lexent is {cfs: bg = [fscore]; fst: lex = <cons>;snd: lex = <cons>; thd: lex = <cons>}for {core: @cfs, {sgrain: [fssg:typ=typ-rad]}*{sgrain: [fssg:typ=rad], @fst} {sgrain: [fssg:typ=typ-rad]}*{sgrain: [fssg:typ=rad], @snd} {sgrain: [fssg:typ=typ-rad]}*{sgrain: [fssg:typ=rad], @thd} }Small grains morphotacticsregexp aspect_infix is{sgi: [fscore:asp=perfect],[fssg:typ=ifx_parf], ta};{core: [fscore:asp=aspect-perfect],{sgrain: [fssg:typ=typ-ifx_parf]}* };end...regexp small_grain_order is{core: smallg={sgrain: [fssg:typ=asp_pref]}?
{sgrain: [fssg:typ=rad]}{sgrain: [fssg:typ=ifx_parf]}?
{sgrain: [fssg:typ=ifx_parf]}?...let core_morphotactics=intersect(aspect_infix,stem_gemination,...,small_grain_order);regexp lexicon is{lexent: [fscore:lex=a_u,stem1=I|II|IV],p,r,s};{lexent: [fscore:lex=a,stem1=I|III],s.,b,t};...let actual_cores=intersect(core_morphotactics,lexicon);Figure 2: extracts from the Akkadian project16Surface transformationsgr_rule delete_support_vowels is{core}constraint{core: smallg= {sgrain}*#{sgrain: lex=<letter>+<vowel>,bab=<letter><cons>}{sgrain}* }=>{core: smallg= {sgrain}* #{sgrain}{sgrain: bab=<>}?
{sgrain: lex=<vowel>} {sgrain}*}endregexp color_u is{core: [fscore:stem1=II|III],{sgrain:lex=<cons>?<vowel>,bab=<cons>?u}{sgrain}*};{core: [fscore:stem1=I|IV],{sgrain:lex=<cons>?<vowel>,bab=<cons>?
(<vowel>-u)}{sgrain}*};endFigure 3: extracts from the Akkadian projectThe main difference is that MAGEAD has onlyone level of structure using only one type of Carte-sian Products.
Another difference is that the twosystems use different kinds of contextual rules.The rules differ both by their syntax and their se-mantics.
Furthermore, contextual rules are themain syntactic construction in MAGEAD whereasKaramel uses also regular expressions.MMORPH is another system of partition-basedmorphology based on the work by Pulman andHepple (Pulman and Hepple, 1993).
There are twoparts in a description: first, the morphotactics isdescribed using a Unification Grammar where theterminals are lexical affixes and the non-terminalsare feature structures; transformation rules relatethe lexical and surface levels.
The features are flat.Feature structures are evaluated dynamically by aunification machine.Karamel statically compiles Feature Structuresand their unification into finite-state transducers.This is efficient and part of the structures areshared.
On the other hand, the grammar of fea-ture structures must be regular and there is a riskof combinatorial explosion.
MMORPH uses twokinds of units: one relates affixes to Feature Struc-tures, the other relates small parts of lexical andsurface forms (typically, substrings of length 0to 2).
Karamel uses a richer and more flexiblestructuration.
Furthermore, the number of tapes isfixed in MMORPH and user defined in Karamel.MMORPH is distributed under the GPL license.
Itis not maintained any more.5 ConclusionIn this paper, we have emphasized the applicationof Karamel to morphological descriptions.
Themultiplicity of tapes is useful at all the levels ofthe analysis.
The abstract representation typicallyuses feature structures.
Several tapes are to beused if different kinds of feature structures havedifferent spans with respect to the surface form.
Atthe intermediate level, several tapes may be usedby a multi-tiered analysis.
It is not the case in ourexample, but Karamel is compatible with an ap-proach where each tier is put on a different tape(Kiraz, 2000).
The surface level may also use sev-eral tapes.
In our example, two tapes are used fortwo different dialects.
It is also possible to use sev-eral tapes for several writings of the surface forms,for instance, a standard written form, a phoneticrepresentation using the International Phonetic Al-phabet (IPA) and a transcription in Latin alphabet.The other main feature of Karamel is to use em-bedded units to relate the different tapes.
This isuseful to define the scope of feature structure andto distinguish several parts in the forms.17ReferencesCyril Allauzen, Michael Riley, Johan Schalkwyk, Wo-jciech Skut, and Mehryar Mohri.
2007.
Openfst:A general and efficient weighted finite-state trans-ducer library.
In Implementation and Applicationof Automata, 12th International Conference, CIAA,volume 4783 of LNC, pages 11?23, Prague, CzechRepublic.Franc?ois Barthe?lemy.
2007a.
Finite-state compilationof feature structures for two-level morphology.
InInternational Workshop on Finite State Methods inNatural Language Processing (FSMNLP), Potsdam,Germany.Franc?ois Barthe?lemy.
2007b.
Multi-grain relations.
InImplementation and Application of Automata, 12thInternational Conference (CIAA), pages 243?252,Prague, Czech Republic.Kenneth R. Beesley and Lauri Karttunen.
2003.
FiniteState Morphology.
CSLI Publications.Kenneth R. Beesley.
1998.
Arabic morphology usingonly finite-state operations.Edmund Grimley-Evans, George Kiraz, and StephenPulman.
1996.
Compiling a partition-based two-level formalism.
In COLING, pages 454?459,Copenhagen, Denmark.Nizar Habash and Owen Rambow.
2006.
Magead: amorphological analyzer and generator for the Ara-bic dialects.
In ACL: Proceedings of the 21st Inter-national Conference on Computational Linguisticsand the 44th annual meeting of the Association forComputational Linguistics, pages 681?688.Lauri Karttunen and Kenneth R. Beesley.
2000.Finite-state non-concatenative morphotactics.
InFifth Workshop of the ACL Special Interest Groupin Computational Phonology, pages 1?12, Luxem-bourg (Luxembourg).Lauri Karttunen.
1995.
The replace operator.
In ACL-95, pages 16?23, Boston, Massachusetts.
Associa-tion for Computational Linguistics.George Anton Kiraz.
2000.
Multitiered nonlinearmorphology using multitape finite automata: a casestudy on Syriac and Arabic.
Comput.
Linguist.,26(1):77?105.Kimmo Koskenniemi.
1983.
Two-level model formorphological analysis.
In IJCAI-83, pages 683?685, Karlsruhe, Germany.Florence Malbran-Labat.
2001.
Manuel de langueakkadienne.
Publications de l?institut Orientalistede Louvain (50), Peeters.John J. McCarthy.
1981.
A prosodic theory of noncon-catenative morphology.
Linguistic Inquiry, 12:373?418.D.
Petitpierre and G. Russel.
1995.
Mmorph: the mul-tex morphology program.
Technical report, ISSCOtechnical report, Geneva, Switzerland.S.
Pulman and M. Hepple.
1993.
A feature-based for-malism for two-level phonology.
Computer Speechand Language, 7.Anssi Mikael Yli-Jyra?
and Kimmo Koskenniemi.2004.
Compiling contextual restrictions on stringsinto finite-state automata.
In Proceedings of theEindhoven FASTAR Days 2004 (September 3?4),Eindhoven, The Netherlands, December.18
