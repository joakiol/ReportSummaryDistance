Packing of Feature Structures forEfficient Unification of Disjunctive Feature StructuresYusuke  MiyaoDepartment of Information Science, University of Tokyo7-3-1 Hongo, Bunkyo-ku, Tokyo 113-0033 JapanE-mail: yusuke~is ,  s .u - tokyo ,  ac.
jpAbst rac tThis paper proposes a method for packing fea-ture structures, which automatically collapsesequivalent parts of lexical/phrasal feature struc-tures of HPSG into a single packed feature struc-ture.
This method avoids redundant repetitionof unification of those parts.
Preliminary exper-iments show that this method can significantlyimprove a unification speed in parsing.1 In t roduct ionEfficient treatment of syntactic/semantic ambi-guity is a key to making efficient parsers forwide-coverage rammars.
In feature-structure-based grammars 1, such as HPSG (Pollard andSag, 1994), ambiguity is expressed not onlyby manually-tailored disjunctive feature struc-tures, but also by enumerating non-disjunctivefeature structures.
In addition, there is ambigu-ity caused by non-determinism when applyinglexical/grammar rules.
As a result, a large num-ber of lexical/phrasal feature structures are re-quired to express ambiguous syntactic/semanticstructures.
Without efficient processing of thesefeature structures, a sufficient parsing speed isunattainable.This paper proposes a method for packingfeature structures, which is an automatic op-timization method for parsers based on featurestructure unification.
This method automati-cally extracts equivalent parts of feature struc-tures and collapses them into a single packedfeature structure.
A packed feature structurecan be processed more efficiently because we canavoid redundant repetition of unification of theequivalent parts of original feature structures.There have been many studies on efficient1In this paper we consider typed feature structuresdescribed in (Carpenter, 1992).unification of disjunctive feature structures(Kasper and Rounds, 1986; Hasida, 1986; DSrreand Eisele, 1990; Nakano, 1991; Blache, 1997;Blache, 1998).
All of them suppose that dis-junctive feature structures hould be given bygrammar writers or lexicographers.
However,it is not practical to specify all ambiguity us-ing only manually-tailored disjunctive featurestructures in grammar development.
Where dis-junctive feature structures cannot be given ex-plicitly those algorithms lose their advantages.Hence, an automatic onversion method, suchas the packing method escribed hereafter, is re-quired for further optimization of those systems.In addition, this packing method converts gen-eral feature structures to a suitable form for asimple and efficient unification algorithm whichis also described in this paper.Griffith (Griffith, 1995; Griffith, 1996) pointsout the same problem and proposes a compila-tion method for feature structures called mod-ularization.
However, modularization is verytime-consuming, and is not suitable for opti-mizing feature structures produced uring pars-ing.
An earlier paper of myself (Miyao et al,1998) also discusses the same problem and pro-poses another packing method.
However, thatmethod can pack only pre-specified parts ofinput feature structures, and this characteris-tic limits the overall efficient gain.
The newmethod in this paper can pack any kind of fea-ture structures as far as possible, and is moregeneral than the previous method.2 Data  Structure and Algor i thmsThis section describes the data structure ofpacked feature structures, and the algorithmsfor packing and unification of packed featurestructures.
Through of this section, I will referto examples from the XHPSG system (Tateisi579PHON <'o'ed~o'~r F F.E~O verb ] ]?
CArl HEAD / L , I  r:- [] =_=o,,]> / I u~ /VAL I LSYNSEM ILOC~LI p ICOMP$ Am/ I L LSPR <>/ ::l tv~.
rcred.edl -I I .
I-:'"' LA~G~ [~J- wordPHON <'cre~eo'>s~se~.NONLOC IINHERISLASH ~T~" ',~ocdPHON <'cr~led>r FHEAO ,,~,I I P FCATIHEAD r.o~ - I -/~T  L: I.SUm <Lco~ [] ~o~J, !
Iv" m; " CATI HEAD nounNONLOCII~HERISLASH<[cONT [ ]  nom_obJ] >FHE~ verb "1CATI HEAD noun SUBJ < : > r [] 1/ / >//L LSPR < > J Jr r .~  .~  ] ]?
CATI HF.
),D ~o~ t., I <[co,, [] _oJ> 1//I ''~ /VAL/coMP ~ noun - I>/ / /-1:1 /I: L LSPR <> J J /IFigure 1 :4  out of 37 lexical entries which theXHPSG system assigns to the word "credited".Parts shaded with the same pattern are equivalent.et al, 1998), an HPSG-based grammar for En-glish.2.1 Packed Feature  St ructureFigure 1 shows 4 out of 37 lexical entries whichthe XHPSG system assigns to the word "cred-ited".
These lexical entries have various equiva-lent parts in their respective feature structures.In Figure 1, equivalent parts are shaded withthe same pattern.Figure 2 shows a packed feature structure forthe lexical entries shown in Figure 1.
Note thatthe equivalent parts of the original feature struc-tures are collapsed into a feature structure seg-ment, which is denoted by Si in Figure 2.
So isa special segment called the root segment, which"word; PHON <'crecl~ad'>I" ['HEAD ,~b/ / [SU=<[CATI"EAD"?"]
1 So : LOCAL CAT VAL CONT A,1 / L LSPR ol LCOmLNONLOCI NHERI SLASH A,S,  : nomobj rcreditedl ]S= : I~] S ,  : LARG1 AT]$ 4 : nouni-CATIH~O no.n'l S e : nomobj  S 1, " < >s,: ,o~_o~j L~ A,o J~, ' ->  S I'I a2 -*  S ~/ I /%- )  S ,D,=Iz~s-*Ss/  D=_IzS,-*S,,I ~ , ' *  S,ol - I  ~5c-* S ,LL~,-* S, J  I z36-~$6kZ~o-* S eI /%-* S 31 I ~- - "  S =/ I /%-* S o/I A~-*S , |  D,_IZ~,-*S,ol D~ =1 A, -*  S .
I  I ~5~'-* S ~/ -I ~Sr* S 5/ I ZS,-" S,/ I zSs--* S 6/ I ~Se-" S , /  LZS,~ S U LZ~9_~ S , jFigure 2: A packed feature structure xpressingthe same information as the set of feature structuresin Figure 1.
Shaded parts correspond to the partswith the same pattern in Figure 1.describes the root nodes of all original featurestructures.
Each segment can have disjunctivenodes, which are denoted by Ai.
For example,53 has two disjunctive nodes, A 5 and A6.
A de-pendency function, denoted by Di, is a mappingfrom a disjunctive node to a segment, and eachDi corresponds to one original feature structure.We can obtain each original feature structure byreplacing each disjunctive node with the outputof the respective dependency function.For applying the unification algorithm de-scribed in Section 2.3, we introduce a con-dition on segments: a segment cannot haveinter- or intra-segment shared nodes.
For ex-ample, the disjunctive node i 1 in Figure 2must be introduced for satisfying this con-dition, even though the value of this nodeis the same in all the original feature struc-tures.
This is because this path is structure-shared with another path (SYNSEHILOCALJCONT jARG1 and SYNSEHJLOCALJCONTJARG2).
Structure-sharing in original feature structures is insteadexpressed by letting the dependency functionreturn the same value for different inputs.
Forexample, result values of applying D1 to A1 andA7 are both S1.The reason why we introduce this conditionis to guarantee that a disjunctive node in the580r _IPHON <'cmd~e~>So: /  FCAT F HEAD verb0 T credited/ L P" L,.o, ,,,J$1 : John$2 : YusukeD,=E At-~S,3 D2=EA,-~S2\]Figure 3: A sample packed feature structure.
If it isunified with the top feature structure in Figure 1, anew disjunctive node must he introduced to SYNSRM ILOCALICATJVALJSUBJ IFIRSTICONT.result of unification will appear only at a pathwhere a disjunctive node appears in either of theinput feature structures at the same path.
Forexample, suppose we unify the top feature struc-ture in Figure 1 with the packed feature struc-ture in Figure 3.
In the result of unification, anew disjunctive node must appear at SYNSEM ILOCALJCATIVALJSUBJJFIRSTJCONT , while no dis-junctive nodes appear in either of the input fea-ture structures at this path.
By introducingsuch a disjunctive node in advance, we can sim-plify the algorithm for unification described inSection 2.3.Below I first describe the algorithm for pack-ing feature structures, and then the algorithmfor unification of packed feature structures.2.2 A lgor i thm for Pack ingThe procedure pack_feature_structures inFigure 4 describes the algorithm for packing twopacked feature structures, denoted by (S',:D')and (,9", D").
,9' and S" denote sets of seg-ments, and 7)' and 7)" denote sets of depen-dency functions.
We start from comparing thetypes of the root nodes of both feature struc-tures.
If either of the nodes is a disjunctive node(Case 1 ), we compare the type of the other fea-ture structure with the type of each disjunct,and recursively pack nodes with the same typeif they exist (Case 1.1).
Otherwise, we justadd the other feature structure to the disjunc-tive node as a new disjunct (Case 1.2).
If thetypes of the nodes are equivalent (Case 2), wecollapse them into one node, and apply packingrecursively to all of their subnodes.
If they arenot equivalent (Case 3), we create a new dis-junctive node at this node, and let each originalprocedure pack.~eatureJtructures((S', Do), (S", D"))begin~o ~ s'.
s~' ~ s"7:) :=  ~)t U "/3 IIre~ura (S, D)endprocedure pach(F s, F H)hesini~ F / (o r  F Is) is d is jzuct ion theni f  BG(G E diojuncts(F').G a .d  F"  ha~e equivalent types) 1;henS := SUd io juncts (F ' )pack(G. F" )Y~" := {DID"  E DH,D = D" U(F '  -- F")}elseS := SUd is juncts (F I )u{F / '}7)" := {DID 'I E ~9", D = D"  u (F '  -- F")}endi:fe lse i:f F/ and F"  ha~e equivalent types thenF' := F"~oreach f in features (F  I)pack(:foUoe(.f, F'), :follou(.f, F"))eloeS:= SU{F ' ,F"}F := 4io3uuctiYe-nodeD' := {DID' E ~) ' ,D  = D' U(F  -- F')}D"  := {DID"  6 D" ,D  = D"  U(F  -- F")}endifcuddisjuucts: return a set of disjuncts of the disjunctive node:features: return a set of features:folios: return a substructure reached by the specified feature?
Cuae  1?
Case  1 ,1?
(:~.ue 1.2?
Case 2?
Cese 3Figure 4: Algorithm for packing two packed featurestructures (S',:D') and (S", $)").feature structure from this node become a newsegment.For simplicity, Figure 4 omits the algorithmfor introducing disjunctive nodes into sharednodes.
We can easily create disjunctive nodesin such places by preprocessing input featurestructures in the following way.
First each inputfeature structure is converted to a packed fea-ture structure in advance by converting sharednodes to disjunctive nodes.
Then the abovealgorithm can be applied to these convertedpacked feature structures.2.3 Algor i thm for Uni f icat ionBelow I describe the algorithm for unification ofpacked feature structures, referring to the exam-ple in Figure 2.
Suppose that we are unifyingthis packed feature structure with the featurestructure in Figure 5.
This example consid-ers unification of a non-packed feature structurewith a packed feature structure, although thisalgorithm is capable of unifying two packed fea-ture structures.The process itself is described by the pro-cedure unify_packed_feature_structures inFigure 6.
It is quite similar to a normal uni-581"wordPHON <'ged#eo'> I I - ;YNSEM LOCAL CAT / ~SUBJ < ECONT \ [ \ ]  -\] |VAL|c(:~PS \ [ \ ]  <>L LSPR < >CONTI ARG1 \ [ \ ].NONLOC I INHER I SLASH listFigure 5: A sample feature structure to be unifiedwith the packed feature structure in Figure 2.procedure unify.p?cked.te=ture.=tructuree((S e, ~)e).
(Se, 7)1,))beginS:=?.
Z>:=@fore,oh D e E ~Ot and D ee E ~HIEXT:besinpush-eeSm.~-sCack(S~0 E S/, S~' E S ' )do unti l  seipnen~-lCack.As-emp~ybest.pop_ee~ment.o~ack(S I ,S/e)i~ S / ie  d i# j~ct lon  chert S* := D~(S ~) .
.
.
( t )i f  S H is dlsj~nction ~hen S" := DH(S//)SEOHIIJ\]IIF?
:if alread~-nni~ied(S/,S H) th~n ' ' .
(2)S :=restore2Jnify.reeul~( st,s/I )~' := S, S" := S .
.
-  (3)elsei f  S := un i fy (~,$ / I )  fa i l s  thenKo~o Ig l telseS:= ~u{S}s~s_unificasien.reeul~(S, S ~, ~e)S e := 5.
S" := S (a)4ed~fendife~d7:' := "D u {D ~ U D '}e~drecur.
(S, ~))e~dprocedure unify(F',F '~)besini~ F ~ or F ee le d~oj~.c~ion ~heu (6)F := disjunctive.nodepush_se~nt_stack(F / ,  F ?/)elseIODB.UIIF?
:F := uni fy Jype(F  ~, F ~ )forea?h \] ~n featureo(F)fo l lou( f ,F ) :=  un i fy ( fe l lou( f ,F / ) ,  fellou(f,FH))endifre~urn Foudalready-unified: t~e when unification is already computedres~ere_uui~y_result: restore the result of unific&tion fromthe tableseS_unify.xesul~: store the result of unification into the tableunifyJype: return the unification of both typesFigure 6: Algorithm for unifying two packed fea-ture structures (S',:D'} and (S",:D"}.fication algorithm.
The only difference is thepart that handles disjunctive nodes.
When wereach a disjunctive node, we put it onto a stack(segment_stack), and postpone further unifi-cation from this node ((5) in Figure 6).
In thisexample, we put A1, A2, A3, and A4 onto thestack.
At the end of the entire unification, we"wordPHON <'cred/ted>T A ,  SuN <So:  LOCAL CAT VAL COMPSSYNSEM | \] L LS PR <>| LCONT A ,LNONLOCIINHER\[ SLASH A4S,  : nom_obj ~credltedlS=: <> Ss: LARGt ATJ\[-CA~HEAD ~s  1 r'credited2 qs~: <Lco.T A, ."
s s: IARa~ Ael$4 : .ou.
LARG2 A*JSs : bY S~o: <>Ss  : nom obj FCAT~HEAO noun-\]s ,  : .om obj s,,: <LCoNT A,o J>1~ .
\ ] .
I As--* S slO,=l ~s--" S e/ L,21" _-I\[/k,-* S,ol\]ks._.
S , \ [  O~ .... 04 .. .
.I/'.,-~ S ,ol I/Xs--* SolL~7 -> S , J  I Ge-" S , /kL~s-* S sJae~t_s t=~ = ( As As A ,  }D =CZ~I'* S , \]Figure 7: Intermediate data structure after unify-ing A 1 with \[~.
Disjunction is expressed by non-determinism when applying the dependency func-tions.
When we unify a feature structure segmentfor A2, we unify $2 if we are applying Dz, or 53 ifD2.apply a dependency function to each memberof the stack, and unify every resulting segmentwith a corresponding part of the other featurestructure ((1) in Figure 6).
In this example,we apply D1 to A1, which returns segment 51.We therefore unify 5z with the feature structuretagged as \[~\] in Figure 5.Disjunction is expressed by non-determinismwhen applying the dependency functions.
Fig-ure 7 shows the intermediate data structure af-ter unifying A1 with \[~\].
We are now focusingon the disjunctive node A2 which is now on thetop of segment_stack.
When we are applyingDz, we unify $2 with the corresponding featurestructure \[~\].
Should we instead apply D2, 53would be unified.A benefit of this unification algorithm is thatwe can skip unification of feature structure seg-ments whose unification is already computed((2) in Figure 6).
For example, we unify seg-ment So with the other feature structure onlyonce.
We can also skip unification of $1 and 5z0for /:)2, because the result is already computed582So:-word PHON <'credited'>/ / / Fsu~<F c^TIHEA?"?
"/~OCAL/CAT/V~./ LCONT A,WNSEM| | | |CO~ /k=| | L LSPR <>/ L cONT Z~,LNON'OCIINHERISLASH Z~,F c'd''al 7 s,  : ,,om_~j s~ : LARG~ /k,JS= : <> S~o: <>FZ~,-, S,3 \ ]~-*  S =/u, =1 4~s ''~ S ~/I Z l , -*  S ,olLZI~-" S,JD==... Ds=... D4=...aegmeat stac):  = ( A, }F~,-- S,7_ I A=- ,  S ~/L/I, -~ S ,~1"word PHON <'cmditeo'>/ / / I-SU~<I-CATIH~O ""So: { LOCAL /CM/V/~L/COMPS LL~TT A,~YNSEM| / L LSPR <>| L c-,ONT Z~LNONLOCIiNHERISLASH /k,S i : nom obj S s : nom_objS~ : <> Ss  : <>F credi'ed!
I rCATIHEAD noun\]S 3 : LABG I /ks_\] S, : < Lco~ A,  ?F credited# \]S,  : |ARG1 L~|LARG2 /k,JFA,--> S ,7\[ ~=--> S , /u,=l/_~-~ S ~\]I ZM-" S e/L/Is-* S ,Jt/k,-~ S ,7I As*  S ~/D,=I \]~,-> S, /I ~ , - "  S , /I/k7 -~ S s/LZI,-* S 5JFigure 8: Intermediate data structure after the uni-fication of A4.
Because the result of applying Dz toAT is already overwritten by the result of unifying51 within\], we unify this resulting feature structurewith ff\]yfor D1.
This operation preserves the validity ofunification because ach segment does not haveinter- or intra-segment shared nodes, because ofthe condition we previously introduced.Note that this method can correctly unify fea-ture structures with reentrancies.
For example,Figure 8 shows the intermediate data structureafter unifying A4, and the process currentlyreached A7 and E\]" The result of the appli-cation of D1 to A7 is the result of unifying Szwith \[~, because Sz is overwritten with the re-sult of this previous unification ((3) and (4) inFigure 6).
Hence, we unify E\] with this result.Above unification algorithm is applied to ev-ery combination of dependency functions.
Theresult of the entire unification is shown in Fig-ure 9.3 Exper imentsI implemented the algorithms for packing andunification in LiLFeS (Makino et al, 1998).LiLFeS is one of the fastest inference nginesfor processing feature structure logic, and effi-cient parsers have already been realized usingthis system.
For performance evaluation I mea-sure the execution time for a part of applicationof grammar ules (i.e.
schemata) of XHPSG.Table 1 shows the execution time for uni-fying the resulting feature structure of apply-Figure 9: The resulting packed feature structureof unifying the packed feature structure of Figure 2with the feature structure of Figure 5.ing schemata to lexical entries of "Mary" asa left daughter, with lexical entries of "cred-ited"/"walked" as right daughters.
Unificationof packed feature structures achieved a speed-up by a factor of 6.4 to 8.4, compared to thenaive approach.
Table 2 shows the number ofunification routine calls.
NODE_UNIFY shows thenumber of nodes for which unification of typesis computed.
As can be seen, it is significantlyreduced.
On the other hand, SEGNENT_UNIFYshows the number of check operations whetherunification is already computed.
It shows thatthe number of node unification operations i sig-nificantly reduced by the packing method, andsegment unification operations account for mostof the time taken by the unification.These results indicate that a unification speedcan be improved furthermore by reducing thenumber of the segment unification.
The datastructure of dependency functions has to beimproved, and dependency functions can bepacked.
I observed that at least a quarter ofthe segment unification operations can be sup-pressed.
This is one of the future works.4 Conc lus ionThe packing method I described in this paperautomatically extracts equivalent parts fromfeature structures and collapses them into a sin-gle packed feature structure.
It reduces redun-dant repetition of unification operations on the583Table 1: Execution time for unification.
Test data shows the word used for the experiment.
# of LEsshows the number of lexical entries assigned to the word.
Naive shows the time for unification with a naivemethod.
PFS shows the time for unification of packed feature structures (PFS).
Improvement shows theratio ( gaive)/( PFS).Test data # of LEs Naive (msec.)
PFS (msec.)
Improvement (factor)credited 37 36.5 5.7 6.4walked 79 77.2 9.2 8.4Table 2: The number of calling each part of the unification routines.
Naive shows the number of nodeunification operations in the naive unification algorithm (corresponds to NODE_UNIFY of my algorithm).NODE_UNIFY and SEGMENT_UNIFY are specified in Figure 6.Test data Naive NODE_UNIFY SEGMENT_UNIFYcredited 30929 256 5095walked 65709 265 10603equivalent parts.
I implemented this method inLiLFeS, and achieved a speed-up of the unifica-tion process by a factor of 6.4 to 8.4.
For realiz-ing efficient NLP systems, I am currently build-ing an efficient parser by integrating the packingmethod with the compilation method for HPSG(Torisawa and Tsujii, 1996).
While the compi-lation method reduces the number of unificationoperations during parsing, it cannot prevent in-efficiency caused by ambiguity.
The packingmethod will overcome this problem, and willhopefully enable us to realize practical and effi-cient NLP systems.ReferencesPhilippe Blache.
1997.
Disambiguating withcontrolled disjunctions.
In Proc.
Interna-tional Workshop on Parsing Technologies.Philippe Blache.
1998.
Parsing ambigu-ous structures using controlled disjunctionsand unary quasi-trees.
In Proc.
COLING-ACL'98, pages 124-130.Bob Carpenter.
1992.
The Logic of Typed Fea-ture Structures.
Cambridge University Press.Jochen DSrre and Andreas Eisele.
1990.
Fea-ture logic with disjunctive unification.
InProc.
13th COLING, volume 2, pages 100-105.John Griffith.
1995.
Optimizing feature struc-ture unification with dependent disjunctions.In Proc.
Workshop on Grammar Formalismfor NLP at ESSLLI-94, pages 37-59.John Griffith.
1996.
Modularizing contextedconstraints.
In Proc.
COLING'96, pages 448-453.KSiti Hasida.
1986.
Conditioned unification fornatural language processing.
In Proc.
11thCOLING, pages 85-87.Robert T. Kasper and William C. Rounds.1986.
A logical semantics for feature struc-tures.
In Proc.
24th ACL, pages 257-266.Takaki Makino, Minoru Yoshida, Kentaro Tori-sawa, and Jun'ichi Tsujii.
1998.
LiLFeS - -towards a practical HPSG parser.
In Proc.COLING-A CL '98, pages 807-811.Yusuke Miyao, Kentaro Torisawa, Yuka Tateisi,and Jun'ichi Tsujii.
1998.
Packing of fea-ture structures for optimizing the HPSG-style grammar translated from TAG.
In Proc.TAG+4 Workshop, pages 104-107.Mikio Nakano.
1991.
Constraint projection: Anefficient treatment of disjunctive feature de-scriptions.
In Proc.
P9th ACL, pages 307-314.C.
Pollard and I.
A.
Sag.
1994.
Head-DrivenPhrase Structure Grammar.
University ofChicago Press.Yuka Tateisi, Kentaro Torisawa, Yusuke Miyao,and Jun'ichi Tsujii.
1998.
Translating theXTAG English grammar to HPSG.
In Proc.TAG+4 Workshop, pages 172-175.Kentaro Torisawa and Jun'ichi Tsujii.
1996.Computing phrasal-signs in HPSG prior toparsing.
In Proc.
16th COLING, pages 949-955.584
