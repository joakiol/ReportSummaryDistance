Hybrid text mining for finding abbreviations and their definitionsYoungja Park,   Roy J. ByrdIBM Thomas J. Watson Research CenterP.O.
Box 704, Yorktown HeightsNew York 10598, USA{pyoungja, roybyrd}@us.ibm.comAbstractWe present a hybrid text miningmethod for finding abbreviations andtheir definitions in free format texts.
Todeal with the problem, this methodemploys pattern-based abbreviationrules in addition to text markers and cuewords.
The pattern-based rules describehow abbreviations are formed fromdefinitions.
Rules can be generatedautomatically and/or manually and canbe augmented when the systemprocesses new documents.
Theproposed method has the advantages ofhigh accuracy, high flexibility, widecoverage, and fast recognition.IntroductionMany organizations have a large number ofon-line documents -- such as manuals, technicalreports, transcriptions of customer service callsor telephone conferences, and electronic mail --which contain information of great potentialvalue.
In order to utilize the knowledge thesedata contain, we need to be able to createcommon glossaries of domain-specific namesand terms.
While we were working on automaticglossary extraction, we noticed that technicaldocuments contain a lot of abbreviated terms,which carry important knowledge about thedomains.
We concluded that the correctrecognition of abbreviations and their definitionsis very important for understanding thedocuments and for extracting information fromthem [1, 6, 9, 11].An abbreviation is usually formed by asimple method: taking zero or more letters fromeach word of its definition.
However, thetendency to make unique, interestingabbreviations is growing.
So, it is easy to findnew kinds of abbreviations which cannot beprocessed by hard-coded heuristics-basedalgorithms [1, 6, 7, 13, 14], since they areformed in ways not anticipated when thealgorithms were devised.We propose a hybrid text mining approach todeal with these problems.
We use three kinds ofknowledge:  pattern-based abbreviation rules,text markers, and linguistic cue words.
Anabbreviation rule consists of an abbreviationpattern, a definition pattern and a formation rule.The formation rule describes how anabbreviation is formed from a definition.
Theremay exist multiple formation rules for a givenpair of abbreviation and definition patterns.Abbreviation rules are described in Section 3.Text  markers are special symbols frequentlyused to imply the abbreviation-definitionrelationship in texts.
They include characterssuch as ?(?
)?, ?[?
]?, and ?=?.
Cue words areparticular words occurring in the local contextsof abbreviations and the definitions, whichstrongly imply the abbreviation relationship.They include words such as ?or?, ?short?,?acronym?
and ?stand?.
Text markers and cuewords are discussed in section 2.4.This system has 5 components --abbreviation recognizer, definition finder, ruleapplier, abbreviation matcher and best matchselector -- as shown in Figure 1.
Theabbreviation recognizer seeks candidateabbreviations in a text and generates theirpatterns (Section 1).
When an abbreviationcandidate is found, the system determines thecontexts within which to look for a definition.When it finds a candidate definition, it generatesa pattern for it also (Section 2).Having generated the abbreviation patternand the definition pattern, the system firstsearches the rulebase for a rule which wouldgenerate the abbreviation from the definition.The rules for the given candidates are applied inthe order of rule priorities (Section 4.1).
If therulebase is empty or if no existing rule matchesthe candidate abbreviation with the candidatedefinition, the system runs the abbreviationmatcher and generates a new abbreviation rule.The abbreviation matcher consists of 5 layeredmatching algorithms (Section 4.2).
If thematcher succeeds, new rules may be added tothe rulebase, allowing it to grow as the systemprocesses new documents.1.
Abbreviation Recognition1.1 Candidate AbbreviationsAn abbreviation is defined as a shortenedform of a written word or phrase used in place ofthe full form [2].
Acronyms are a special case ofabbreviations which are devoted to multi-wordfull forms.
In this work, we consider a string ofalphabetic, numeric and special characters as acandidate abbreviation if it satisfies thefollowing three conditions:(1) Its first character is alphabetic or numeric(2) Its length is between 2 and 10 characters(3) It contains at least one capital letterand if the string meets the following restrictions:(1) It is not a known (dictionary) wordcontaining an initial capital letter andappearing as the first word in a sentence.
(2) It is not a member of a predefined set ofperson and location names.
(3) It is not a member of user-defined list ofstopwords.The first restriction keeps many commonwords from being treated as possibleabbreviations.
Many proper names have thesame characteristics above and may berecognized as abbreviations.
To reducegenerating false candidates and thus improvesystem performace, we use a list of propernames created by the Talent system[3, 10].
Wealso provide users with a way to create a userdefined list of stopwords.Based on these conditions, AI (ArtificialIntelligence), Baracuda (Boldly Advanced andRefined Aircraft Concept Under Developmentfor AGATE), SgRP  (seating reference point),2MASS (Two-Micron All Sky Survey), ACIS(Advanced CCD Imaging Spectrometer), W3C(World Wide Web Consortium), T/C/F(Trim/Chassis/Final) are recognized as candidateabbreviations.1.
2 Abbreviation PatternsOnce a candidate abbreviation is identified anabbreviation pattern is generated from it.
Anabbreviation pattern is a string of ?c?
and ?n?characters.
An alphabetic character is replacedwith a ?c?
and a sequence of numeric characters(including ?.?
and ?,?)
is replaced with an ?n?regardless of its length.
Non-alphanumericcharacters such as hyphen, slash, and ampersandare not reflected in abbreviation patterns.
Someexamples of candidate abbreviations and theirpatterns are in Table 1.Table 1  Abbreviation PatternsAbbreviations Patterns2MASSNEXTR&DSN1987AT/C/FV3.5nccccccccccccncccccn2.
Definition Finding2.1 Search SpaceThis system searches for a possible definitionof a candidate abbreviation in its left and rightcontexts.
The size of the search space is afunction of the length of the abbreviation and theFig.
1.
System OverviewAbbreviationRecognizerDefinitionFinderRuleApplierAbbreviationMatcherBest-MatchSelectorRuleBaseStopwordsNamesRuleBaseUpdatemaximally allowed distance (offset) between adefinition and its abbreviation.We have analyzed about 4,500 abbreviationsand their definitions in computer science texts.The maximum number of skipped words (wordsin a definition that are not reflected in theabbreviation) was 4 in our sample data.
Basedon this analysis, we decided that, for relativelyshort abbreviations (from two to fourcharacters), the length of a definition in wordsshould not be greater than twice the abbreviationlength.
For long abbreviations (five or morecharacters), the definition should not be longerthan the abbreviation length plus 5.
Thus, themaximum length of a definition D of anabbreviation A is calculated as follows.max.
|D| = min {|A| + 5,  |A| * 2}The maximum offset means the longestdistance of a definition from an abbreviation.
Ifa definition is in the left context, the distance isthe number of words from the last word of thedefinition to the abbreviation.
If a definition is inthe right context, the distance is the number ofwords from the abbreviation to the first word ofthe definition.
We set the maximum offset to 10in this experiment.
Therefore, the size of eachsearch space is {max.
|D| + 10} words to the leftand right of the candidate abbreviation as shownin Fig 2.2.2 Definition SearchThe system searches for candidate definitionswithin the search space.
A sequence of words inthe contexts is considered as a candidatedefinition if it satisfies the following conditions.
(1) The first character of the first word of adefinition is matched with the firstcharacter of the abbreviation (including?replacement match (Section 3)?).
(2) All words in a definition are in the samesentence.
(3) The first word and the last word of adefinition are not prepositions, be-verbs,modal verbs, conjunctions or pronouns.
(4) Some symbols such as (, ), [, ], {, }, =, !,?
may not be inside of a definition.2.3 Definition PatternsNext, we preprocess the candidate definitionas follows to generate a pattern for thecandidate.
(1) replace special symbols with spaces.Input/Output  => Input Output(2) separate strings of numerical characters.Windows98 => Windows 98(3)  separate prefixes1)  from the headwordreusable => re usableA definition pattern consists of the characters?w?
(word), ?s?
(stopword), ?p?
(prefix), ?h?
(headword) and ?n?
(number).
Some examplesof definitions and their patterns are in Table 2.Table 2  Definition PatternsDefinitions PatternsProduct DatabaseSupernova 1987ATrim/Chassis/FinalTwo-Micron All Sky SurveyU.S.
Department of AgriculturephwphnwwwwwwwwwwwswIn the above examples, the definition patternfor ?product database?
is ?phw?, which is notmorphologically correct.
This happens because?pro?
is included in our prefix list and  ?duct?
isfound in the dictionary and we don?t do anysemantic-level processing.2.4 Syntactic CuesWe extract some orthographic and syntacticstructure information as well as possibledefinitions from the contexts.
If there exist textmarkers and/or cue words in the contexts of acandidate abbreviation and its candidatedefinition, the pair is highly likely to be validand to be useful for augmenting the abbreviation1)We currently have 60 prefixes such as anti, bi,electro, inter, pre, sub, trans, un.Fig.
2  Search Space for DefinitionsDADmax.
offsetmax.
length ofa definitionsearchsearchrulebase.
The structures we take into accountinclude:(1)  (abbr) or [abbr](2)  (definition) or [definition](3)  abbr = definition(4)  definition = abbr(5)  abbr, or definition(6)  definition, or  abbr(7)  abbr ?
stands/short/acronym ?
definition(8)  definition, abbr  for short3.
Abbreviation Rules3.1 Abbreviation Rule FormatAn abbreviation rule describes how anabbreviation is formed from its definition.
Anabbreviation rule, R, consists of an abbreviationpattern (A_Pattern), a definition pattern(D_Pattern) and a formation rule (F_Rule).R =  <A_Pattern, D_Pattern, F_Rule>A formation rule defines how each characterin an abbreviation is formed from a definition.An element in a formation rule has a pair ofvalues, a word number and a formation method.A word number is the sequential location of aword within the preprocessed definition.
Aformation method represents how a character (orcharacters) in the word takes part in theabbreviation.We have defined five kinds of formationmethods:  ?F?, ?I?, ?L?, ?E?
and ?R?.
?F?
meansthat the first character of a word occurs in theabbreviation.
Similarly, ?I?
refers to an interiorcharacter and ?L?
indicates the last character of aword.
?E?
means ?exact match?
and ?R?
means?replacement match?.
Exact match (?E?)
is usedonly for matching numbers.
If both a candidateabbreviation and a candidate definition contain astring of numeric characters, the two numbersmust be exactly same.
For example, ?V3?
is notan abbreviation of ?Version 3.5?
but may be anabbreviation of ?Version 3?.
Replacement match(?R?)
is for recognizing multi-charactersabbreviated with one character.
In our currentlist of replacement matches, ?x?
in anabbreviation may stand for ?hex?, ?ex?, ?trans?,or ?cross?
; ?f?
may stand for ?ph?
;  ?1?
maystand for ?first?, ?one?, or ?1st?
;  and so on.Some examples of abbreviation rules are listedin Table 3.In one example, the abbreviation rule for theabbreviation ?NEXT?
and its definition ?Near-End CrossTalk?
is <cccc, www, (1, F) (2, F) (3,R) (3, I)>.
The definition is encoded in ?www?because ?Near-End?
is divided in two words?Near?
and ?End.
This rule means that the firstcharacter in the abbreviation ?N?
is formed fromthe first letter of the first word ?
(1, F)?
; thesecond character ?E?
is from the first letter of thesecond word ?
(2, F)?
; the third character ?X?
isformed by a replacement match within the thirdword (?Cross?
is replaced into ?X?
); and ?T?comes from an interior character of the thirdword.Table 3  Abbreviation Rule Expamples2-MASS       Two-Micron  All Sky Survey<ncccc, wwwww , (1,R) (2,F) (3,F) (4,F) (5,F)>CFCs             chlorofluorocarbons<cccc, w, (1,F) (1,I) (1, I) (1, L) >CONTOUR  Comet Nuclear Tour<ccccccc, www, (1,F)(1,I)(2,F)(3,F)(3,I)(3,I)(3,L) >NEXT          Near-End CrossTalk<cccc, www, (1,F) (2, F) (3, R) (3, I)>SN1987A     Supernova 1987A<ccnc,  phnw, (1, F) (2, F) (3, E) (4, F)>TAXI Transparent Asynchrous Transceiver Interface<cccc, wwww, (1,F) (2,F) (3,R) (4,F)>X2B             Hexadecimal to Binary<cnc, phsw, (1,R) (3, R) (4, F)>W3C            World Wide Web Consortium<cnc, wwww, (1,F) (2,F) (3,F) (4,F)>3.2 The Initial RuleBaseWe constructed an initial rulebase from ouranalysis of 4,500 abbreviations in the field ofcomputer science, which were collected fromthe Web.
We ran the  Abbreviation Matcherroutine to generate patterns and formation rulesfor the abbreviations and their definitions andselected frequent rules for the initial rulebase.The initial rulebase currently contains 45abbreviation rules, some of which are shown inTable 4.4.
Matching Abbreviations andDefinitions4.1  Rule ApplicationWhen the system has found a candidateabbreviation with a candidate definition, itgenerates the A_pattern and the D_pattern,Table 4 Initial RuleBasePatternA_Pat  D_Pat Formation Ruleccccccccccccccccccccccccccccccccccccccccccccncncnccwphwswwwphwwwphwwswwswwwwphwwswwwwwwwphwswwwphwwwswwwwnwswwww(1,F)(2,F)(1,F)(3,F)(1,F)(2,F)(1,F)(3,F)(4,F)(1,F)(2,F)(4,F)(1,F)(2,F)(3,F)(1,F)(3,F)(4,F)(1,F)(2,F)(3,F)(1,F)(2,F)(4,F)(1,F)(2,F)(3,F)(1,R)(2,F)(3,R)(1,F)(3,F)(5,F)(6,F)(1,F)(2,F)(4,F)(5,F)(1,F)(2,F)(3,F)(4,F)(1,F)(2,F)(3,E)(1,F)(2,R)(3,F)(1,R)(2,F)(3,F)respectively, and then looks up the pattern pairin the rulebase.
If the pair exists, the systemapplies the associated formation rules in priorityorder.
If any rule can generate the givenabbreviation from the definition, the pair isregarded as valid.Suppose, for example, that the  abbreviation?5GL?
and the definition ?fifth generationlanguage?
are found in a text.
The systempreprocesses them and generates their patterns.In this case, the A_Pattern is ?ncc?
and theD_Pattern is ?www?.
A formation rule <(1, R)(2, F) (3, F)> is associated with this pattern pairin the rulebase.
Thus, the system applies therule to determine the validity of theabbreviation/definition pair.
The first word(?fifth?)
can be replaced into ?5?
[(1, R)]; the firstcharacter of the second word is ?G?
[(2, F)]; andthe first character of the third word is ?L?
[(3,F)].
Hence the pair is valid and ?fifth generationlanguage?
is considered to be a definition of?5GL?.4.2  The Abbreviation MatcherIf  the rulebase does not have rules for thepattern pair or if no rule successfully generatesthe abbreviation from the definition, and if thepair occurs in one of the cue environmentsdescribed in section 2.4, the system activates theAbbreviation Matcher routine.
This routine isalso used for creating the initial rulebase.The Abbreviation Matcher contains fivelayered matching algorithms.
We categorizedabbreviations into five different types, one foreach layer, based on the relationship between theabbreviation length and the length of thecorresponding definition.
Abbreviations of type1 are the most frequent in our 4,500 itemsample.
Type 2 is the next most frequent, and soon.
(1) Layer 1 : |A| = |D|EDS, Electronic Data SystemMPH, miles per hour2MASS, Two Micron All Sky Servey(2) Layer 2 : |A| = |D| - |S|F&M, Facilities and MaterialsASCA, Advanced Satellite for Cosmologyand Astrophysics(2) Layer 3 : |A| < |D|4GT, 4 Gigabyte memory TuningFAME, Full Sky Astrometric Mapping Explorer(3) Layer 4 : |A| > |D|DB, DataBaseCONTOUR, Comet Nuclear Tour(4) Layer 5 : special numeralsW3C, World Wide Web ConsortiumD2T2, Dye Diffusion Thermal Transfer|A| represents the length of an abbreviationpattern.
|D|  is the length of a definition pattern.|S| indicates the number of stopwords in adefinition.This system processes an <A, D> pair byapplying the algorithms in layer order,beginning at layer 1.
If the pair is matched atany layer, matching stops and the successfulformation rule is returned.
If a match is notfound at any layer, the candidate pair isdiscarded.4.3 Best Match SelectionThe system may generate multiple definitioncandidates in many cases, but we assume thatthere exists only one definition in a localcontext.
In order to select the best candidate, weemploy several weighting features.
(1) syntactic cuesA definition has a higher weight than othercandidates if it has syntactic cues.
(2) rule priorityA definition has a higher weight if it wasmatched by a higher priority rule.
(3) distanceThe definition closest to the abbreviation isfavored over other candidate definitions.
(4) capitalizationA definition with initial capital letters ispreferred.
(5) number of wordsA definition is preferred based on thefollowing sequence of length comparisons:|A| = |D|,  |A| < |D| and |A| > |D|.
(6) number of stopwordsA definition having fewer stopwords ispreferred.If multiple candidate definitions are found ina document for an abbreviation, these sixfeatures are tested on the definitions in the ordergiven, until one definition remains.
If  ambiguitystill remains at the end of the test, the firstdefinition is selected.Users can specify whether they want toupdate the rulebase with the results ofprocessing a new document.
If an existing rulesuccessfully matches an abbreviation/definitionpair, then that rule?s frequency is updated in therulebase, thereby increasing the rule?s priority.Users may also specify a  rule threshold; newrules which occur with a frequency exceedingthe threshold will be added to the  rulebase.5.
Experiments and ResultsWe have conducted experiments with threedocuments: a book about automotiveengineering (D1), a technical book from apharmaceutical company (D2), and NASA pressreleases for 1999 (D3).
The data used in theexperiments and experimental results are shownin Table 5.
Performance is evaluated using recalland precision.Table 5   Test Data and Experimetal ResultsD1 D2 D3Size (# of words) 20,379 97,000 83,539No.
of Abbreviations 33 63 8131 60 761 0 2FoundCorrectIncorrectTotal32 60 78Missed 1 3 5For D1, the system found 32 abbreviationsand their definitions but among them 1abbreviation is incorrect.
Thus, it shows 93.9%recall and 96.9% precision.
For D2, it found 60pairs and missed 3 pairs showing 95.2% recalland 100% precision.
For D3, it found 78 pairswith 2 incorrect results and missed 5 pairs.
Therecall rate is 93.8 % and precision is 97.4 %.The reasons for missing someabbreviations are (a) the definitions fell outsideof the search space (b) misinterpretation by thepart-of-speech tagger (c) matches beyondsystem?s current capability.
Some examples ofmissed abbreviations are:(1) DEHP            di-2-ethylhexylphthalate(2) ALT            alanine aminotransferase(3) ASI              Italian Space Agency(4) MIDEX       medium-class Explorer(5) CAMEX-3  Third Convection andMoisture ExperimentFor (1), we would need to add the domain-specific prefixes ?ethyl and ?hexyl?
to the prefixlist.
In general, adaptation of our method to newtechnical domains will probably involve theaddition of domain-specific prefixes to theprefix list.
(2) failed because there was no firstletter match for ?aminotransferase?.
Theabbreviation in (3) is an acronym of the Italiantranslation of the definition.
In (4), there is nocredible source for the ?I?
in the abbreviation.
In(5), the numeric replacement in the abbreviationis permuted.
These and other phenomena suchas compound word processing will be thesubject of further investigation.6.
Related WorkAFP (Acronym Finding Program) is an earlyattempt to automatically find acronyms and theirdefinitions in free text [13].
In this work,however, an acronym candidate is simply anupper-case word from 3 to 10 characters inlength.
AFP looks for candidate expansions intwo sub-windows ?
the pre-window and thepost-window - of the acronym by applying anLCS (longest common subsequence) algorithm.Each subwindow?s length in words is set totwice the number of characters in the acronymand it looks for matching letters occurring atword beginnings or after hyphens.However, AFP does not support 2-letteracronyms that are very common in texts (e.g.,AI, DB, and IP) and it does not allow interior-letter matches that are not uncommon inabbreviations.TLA (Three Letter Acronym) [14] removesall non-alphabetic characters and breaks the textinto chunks based on the occurrences of ?
(?,  ?
)?and ?.?
characters.
It looks for candidateacronyms in each chunk and attempts to findmatching definitions in the preceding andfollowing chunks.
Candidate acronyms andcandidate definitions are compared by matchingup to the first three letters of each word in thechunks.
The potential matches are passedthrough a number of ad-hoc heuristics below,each of which can reject any candidateacronyms.?
Acronyms are shorter than their definitions?
Acronyms contain initial characters of mostof  the words in their definitions?
Acronyms are given in upper case?
Shorter acronyms tend to have longer wordsin their definition?
Longer acronyms tend to have more stopwordsAs part of a larger study of the topology ofrelations across the World-Wide Web,Sundaresan and Yi [12] explore specificrelations involving acronyms and theirdefinitions.
Similar to other work on mining theWeb for relations (e.g., Kleinberg [5] forhyperlinks and Larson [8] for bibliometrics),their work uses duality-based methods to buildnetworks of interrelated syntactic cues,acronym-definition pairs, and formation rules.
Itdevelops iterative techniques for finding newacronym-definition pairs, given a set of syntacticcues, and for finding new syntactic cues, given aset of known pairs.
It can also learn newformation rules.While the overall system frameworks arequite different, our hybrid text mining methodand the duality-based method both use similarunderlying machinery: syntactic cues,abbreviation-definition pairs, and formationrules.
Differences include the hybrid method'suse of a more abstract representation forformation rules, the central use of abbreviationpatterns and definition patterns as the organizingprinciple for the rule base, and the use of cuewords among the syntactic cues.The developers of the Acrophile system atUMass Amherst [7] evaluated four differentacronym extraction algorithms againstmanually-analyzed test documents and againsthand-crafted acronym dictionaries.
Their"canonical-contextual" algorithm, which shareselements with our hybrid method, was the mostsuccessful one.
In particular, Acrophile uses afixed 40-word search space for their"contextual" definition search and has a set ofsyntactic cues similar to ours for defining the"canonical" environments in whichabbreviation-definition pairs may be found.Beyond special handling for numericcharacters in acronyms, however, there is noprovision for replacement matches; for explicitlists of prefixes, known words, and propernames; or for adaptively learning new acronympatterns.
Acrophile's system environment andexperimental results are quite interesting; bydirected search of the World-Wide Web, thesystem was able to exceed the coverage of thelargest publicly available hand-crafted on-lineacronym dictionary.Conclusions and Future WorkWe have introduced a new hybrid approachfor finding abbreviations and their definitions inunstructured texts.
The problem of abbreviationprocessing has attracted relatively little attentionin NLP field.
However, technical documents usea lot of abbreviations to represent domain-specific knowledge.
Thus, the ability to findcorrect abbreviations and their definitions isvery important to being able to utilize theinformation contained in those documents.
It isalso very useful for many NLP applications suchas information retrieval [1] and glossaryextraction [4, 9, 11].The proposed method has the followingadvantages:(1)  It is simple and fast.A small number of formation rules candescribe many abbreviations.
By keepingthese rules in the rulebase, this system canprocess most abbreviations by simplepattern matches.
Furthermore, theabbreviation matcher consists of 5 simplematch routines and each routine is dedicatedto a certain type of abbreviations.
Thus, it isconceptually simple and fast.
(2) It shows high recall and precision rates.
(3) It provides for flexible user customization.For example, users can specify rulethresholds for updating the rulebase.
(4) It is trainable.
The rulebase may beautomatically refined as the systemprocesses new documents.
(5) It is adaptable to new styles and editorialconventions.
It can process new types ofabbreviations by inserting appropriate rulesin the rulebase without modifying thesystem.
Rules are symbolic, so users caneasily add, modify, or delete the rules byhand.
(6) It can be adapted to new technical domains.The dictionary, set of replacement matches,stopword list, and prefix list, can be tailoredfor new domains.In addition to the lacunae mentioned inSection 5, we are aware that there are classes ofabbreviations which our current method does nothandle adequately.
These are typically writtenwith all lower-case characters and are almostnever introduced with text markers or cuewords.
Examples are :?
cu ?
customer?
hw ?
hardware?
mgr ?
manager?
pgm ?
program?
sw ?
softwareMechanisms for processing these abbreviations,which tend to occur in informal text such asemail, chat rooms, or customer service callrecords, are the subject of ongoing research inour project.References[1] Byrd, Roy, Yael Ravin, and John Prager.Lexical Assistance at the Information-Retrieval UserInterface.
Research Report, RC19484, IBM T.J.Watson Research Center, 1994.
[2] G. & C. Merriam Co. Webster?s New CollegiateDictionary.
1981[3] IBM T. J. Watson Research.
The Talent (TextAnalysis and Language Engineering) project.http://www.research.ibm.com/talent/.
2001.
[4] Justeson, John and Slava Katz.
Technicalterminology: some linguistic properties and analgorithm for identification in text.
Natural LanguageEngineering, 1(1):9-17, 1995.
[5] Kleinberg, Jon.
Authoritative sources in ahyperlinked environment, In Proceedings of the 9thACM-SIAM Symposium on Discrete Algorithms, May1997.
[6] Kugimiya, Shuzo, Yoji Fukumochi, Ichiko Sata,Tokyuki Hirai, and Hitoshi Suzuki.
MachineTranslation apparatus having a process function forproper nouns with acronyms.
US Patent 5161105,1992[7] Larkey, Leah, Paul Ogilvie, Andrew Price andBrenden Tamilio.
Acrophile:An Automated AcronymExtractor and Server, In Proceedings of the ACMDigital Libraries conference, pp.
205-214, 2000.
[8] Larson, R. Bibliometrics of the World-WideWeb:  An exploratory analysis of the intellectualstructure of cyberspace, Technical Report, School ofInformation Management and Systems, University ofCalifornia, Berkeley, 1966.http://sherlock.sims.berkeley.edu/docs/asis96/asis96.html.
[9] Maynard, Diana and Sophia Anaiadou.
TermExtraction using a Similarity-based Approach.
InRecent Advances in Computational Terminology,John Benjamins, 1999.
[10] Ravin, Yael, Nina Wacholder and Misook Choi.Disambiguation of proper names in text.
17thAnnual ACM-SIGIR Conference, 1997.
[11] Roark, Brian and Eugene Charniak.
Noun-phrase co-occurrence statistics for semi-automaticsemantic lexicon construction.
In proceedings of the36th Annual Meeting of the Association forComputational Linguistics, pp 1110-1116, 1998.
[12] Sundaresan, Neel and Jeonghee Yi.
Mining theWeb for Relations, In The Ninth International WorldWide Web Conference, 2000.http://www9.org/w9cdrom/363/363.html.
[13] Taghva, Kazem and Jeff Gilbreth.
RecognizingAcronyms and their Definitions, Technical Report95-03, Information Science Research Institute,University of Nevada, Las Vegas, June 1995.
[14] Yeates, Stuart.
Automatic Extraction ofAcronyms from text.
In Proceedings of the ThirdNew Zealand Computer Science Research Students?Conference.
Pp 117-124,  1999.
