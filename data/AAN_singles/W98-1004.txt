Finite State Automata and Arabic WritingMiche l  FantonCERTAL-INALCO 173 rue BrocaF75013 Paris Franceemail : certal2@ext.jussieu.frAbst rac tArabic writing has specific features, which im-ply computational overload for any arabicizedsoftware.
Finite state automata re well knownto give efficient solutions for translation prob-lems which can be formalized as regular lan-guages.
These automata re as more easily builtthat their alphabet have been reduced through acareful inguistic analysis.
This reduction makesit possible to write directly an automaton with-out going through the intermediate stage of con-textual rules, which have to be translated intoan automaton for the sake of efficiency.
Thispaper presents two Moore automata, the firstone, taken as an example, gives a solution to thechoice of right shape for a letter to be printedor displayed (usually known as contextual anal-ysis), the second one studies the more complexproblem of determining the right carrying letterfor hamza.
Every arabicized software has to facethese questions and finite state automata recertainly a good answer to them.INTRODUCTIONArabic writing has specific features, which im-ply computational overload for any arabicizedsoftware.
The first one, well known now formany years, is the fact that Arabic printing triesto imitate handwriting.
Because of this, conso-nants and long vowels can have four or only twoshapes depending of their ability to be bound tothe following letter and of where they appear inthe word.These shapes can be very different : for exampleletter o 2 (h)ICERTAL : Centre d'l~tudes et de Recherche nTraitement Automatique des Langues, INALCO : In-stitut National des Langues et Civilisations Orientales~the Arabic parts of this paper have been typesetisolated final medial initialor present only small variations : for exampleletter ~r* (s)isolated final medial initialLetters which cannot be bound to the nextone have only two shapes, for example letters(d) and .~ (w and fi)isolated final isolated finalDuring the seventies and the beginning of theeighties, hard controversies took place withinthe Arabs concerned with these questions, lin-guists and computer scientists.
Finally in 1983the ASMO (Arab Society for Normalizationwhich unfortunately does not exist any more),influenced by Pr.
Lakhdar-Ghazal from IERA(Rabat Morocco) chose to give a unique code toall shapes of one particular letter.
This is cer-tainly a good choice from a linguistic point ofview, but even so, compromises had to be madeto take into account writing habits that con-flicted with it.
Letter hamza is the most notice-able example of such a compromise for reasonswe shall explain later.1 CONTEXTUAL ANALYS ISWhatever be the choice made for coding, froma typesetting or a computational point of view,there must be different codes for the differentshapes of a letter.
So every arabicized softwarehas to use two systems for coding : the reducedcode we have just introduced and the extendedcode in which the different shapes have differentusing Klaus Lagally's ArabTEX26codes.
Up to UNICODE, no normalization existsfor the second one.
So every arabicized softwarehas to solve the problem of choosing the rightshape of every printed or displayed letter.1.1 Ru les  for le t te r  shapedeterminat ionThis determination, frequently known as con-textual analysis can be summarized into the fol-lowing set of unformal rules:1.
At the beginning of a word:?
If the letter is a binding letter it takesthe INITIAL shape.?
If it is a non binding one it takes theISOLATED shape.2.
In the middle of a word (there is at leastone letter following the current one):(a) If the letter is a binding letter then?
If it follows a binding letter it takesthe MEDIAL shape.?
If it follows a non binding letter ittakes the INITIAL shape.
(b) If the letter is a non binding letter?
If it follows a binding letter it takesthe FINAL shape.?
If it follows a non binding letter ittakes the ISOLATED shape.3.
At the end of a word (for both types ofletters)?
If it follows a binding letter it takes theFINAL shape.?
If it follows a non binding letter ittakes the ISOLATED shape.1.2 Moore  and Mea ly  automataMoore automata re state assigned output ma-chines : the output function assigns outputsymbols to each state.
They differ from Mealyautomata, transition assigned finite state ma-chines, where output symbols are associatedwith transitions between states.
Mealy au-tomata are sometimes called finite transducers.The two machine types have been demonstratedto produce the same input-output mappings 3.3see (Aho and Unman, 1972) and (Hopcroft and Ull-man, 1979) for a full account of these mattersMealy automata are certainly a better choicewhen bidirectional applications are considered.As the question is to identify succession of sym-bols of a certain type we found it clearer to usea Moore automaton.1.3 A Moore  automaton  for contextua lanalys is1.3.1 Source  language of  the  automatonIt follows from the determination rules that weonly need to know what particular letter we aredealing with only at the output stage.
All wehave to know is wether it is a binding or a nonbinding letter 4.
The alphabet of the automatonshould be A = (#} \[J L where L is the set ofarabic letters present in the reduced code and# the word boundaries.
The set of letters willthen be partitioned into three sets ?A--+ A ' -  {{#},N,B}N being the set of non binding letters and B theset of binding letters.
If we denote respectivelyn and b an arbitrary element of each of thesesets, the source language of the automaton canbe reduced to:A1 = {#, n, b}L1 = {#(n Vb) '#}where V denotes disjunction and ?
is the Kleenestar1.3.2 Grammar  and automaton  for L1Language L1 can be generated by the simplegrammar :m -+ #A#A A( lb)or the as simple automaton :initial states = {1}final states: -- {5}transitions4As this question has only been taken as an example,the alphabet has been oversimplified.
A full workingautomaton should cope, as far as arabic is concerned,with two additional problems : hamza on the line towhich no preceding letter can be bound to and l~m alifligature.
It should also give a proper treatment of nonarabic letters and symbols.
But this would not affect hehere described method.27b n # output100 2 02 3 4 0  #334 5 b434  5 n5000 #1.3.3 Target language of the  automatonThe alphabet for the target language L2, givenwhat has been said before and using the samemethod of partioning and then reducing the al-phabet could be at first sight:A2 = {#, I , i ,m, f}where I denotes a letter in isolated shape, i, mand f stand for initial, medial and final shape.But letters from N have only two shapes finaland isolated.
Moreover isolated and final shapesof letters from B can only appear at the end of aword, which is not the case for the correspond-ing shapes of letters from N. So, the followingmodified version of A2 will be prefered :A2 = {#,In, Ib, i ,m,f~,fb}where In stands for isolated shape of a letterfrom N and so on.
With these symbols the tar-get language L2 can be described by the regularexpression :L2 = {#(I~im'fnI~)'(Ib V fb V E)#}where E denotes as usual the empty string.1.3.4 Translation automatonThe translation process of a sequence of LI intoa legal sequence of L2 can be operated throughthe following automaton :initial states = {1}final states = {8}transitions :n b # output1 2 {3,7} #2 2 {a,7} 8 I.3 6 {4,5} @ i4 6 {4,5} @ m5 0 0 8 A6 2 {3,7} S f.7 0 0 S Ib8 o o o #This automaton is clearly nondeterministic.This is due to the fact that a letter from Bcan appear in final or isolated shape when sit-uated at the end of a word, in initial or medialshape when another letter follows it.
Becauseof this nondeterministic feature, every transi-tion should appear as a set.
When this set is asingleton, the "only" state has been put withoutbraces for an easier eading.It can be easily augmented totake account ofoccasional short vowels or shadda 5 (') that couldoccur : the transitions to add would force theautomaton to loop onto the same state, what-ever be it since vowels or shadda can only ap-pear after a consonant and do not influence itsshape.1.3.5 PROLOG test programThis program is a straightforward translation ofthe above described grammar and automaton.The predicate test allows to limit the genera-tion of inputs to a given length.
In the resultswe chose to limit the length of the input to 6included word boundaries.X7, generation of elements of LIXm- -> \[#\],a,\[#\].a --> (\[n\];l'b\]).a --> a,(\[n\];\[b\]).X7, translation automatonY.init ial_stat e ( 1).final_state (8).tr(1,#,l)tr(1 ,n,2)tr(1 ,b,3)tr(1,b,7)t r (2 ,#,8)tr(2,n,2)t r (2 ,b ,3 )t r (2 ,b ,7 )t r (3 ,n ,6 )t r (3 ,b ,5 )t r (3 ,b ,4 )tr(4,b,5)tr(4,b,4)tr(4,n,6)tr(5,#,8)tr(6,#,8)tr(6,n,2)t r (6 ,b ,3 )t r (6 ,b ,7 )t r (7 ,#,8)output (I, #).
output (5,fb).output(2, 'In').
output(6,fn).5sign denoting a double letter28output (3 , i ) .output(4,m).output(7,'Ib').output(8 ,#) .forme(Input,Output):-initial_state(Is),path(Is,Fs,lnput,Output),final_state(Fs).path(S,S,\[\],\[\]).path(SI,S2,\[XIXs\],\[YIYs\]):-tr(SI,X,S),output(S,Y),path(S,S2,Xs,Ys).test(L):-m(M,\[\]),length(M,L1),((LI > L,!,nl,fail);true),printing_form(M,F),nl,write(M),tab(1),write(F),fail.test(_) .1.3.6 P rogram resultsinput output\[#,n,#\]\[#,b,#\]\[#,n,n,#\]\[#,n,b,#\]\[#,b,n,#\]\[#,b,b,#\]\[#,n,n,n,#\]\[#,n,n,b,#\]\[#,In,#\]\[#,Ib,#\]\[#,In,In,#\]\[#,In,Ib,#\]\[#,i,fn,#\]\[#,i,fb,#\]\[#,In,In,In,#\]\[#,In,In,Ib,#\]\[#,n,b,n,#\]\[#,n,b,b,#\]\[#,b,n,n,#\]\[#,b,n,b,#\]\[#,b,b,n,#\]\[#,b,b,b,#\]\[#,In,i,fn,#\]\[#,In,i,fb,#\]\[#,i,fn,In,#\]\[#,i,fn,Ib,#\]\[#,i,m,fn,#\]\[#,i,m,fb,#\]\[#,n,n,n,n,#\]\[#,n,n,n,b,#\]\[#,n,n,b,n,#\]\[#,n,n,b,b,#\]\[#,n,b,n,n,#\]\[#,n,b,n,b,#\]\[#,n,b,b,n,#\]\[#,n,b,b,b,#l\[#,b,n,n,n,#l\[#,b,n,n,b,#\]\[#,b,n,b,n,#\]\[#,b,n,b,b,#\]\[#,In,In,In,In,#\]\[#,In,In,In,Ib,#\][#,In,In,i,fn,#\][#,In,In,i,fb,#\][#,In,i,fn,In,#\]\[#,In,i,fn,Ib,#\]\[#,In,i,m,fn,#\]\[#,In,i,m,fb,#\]\[#,i,fn ,In ,In,#\][#,i,fn,In,Ib,#\]\[#,i,fn,i,fn,#\]\[#,i,fn,i,fb,#\]input\[#,b,b,n,n,#\]\[#,b,b,n,b,#\]\[#,b,b,b,n,#\]\[#,b,b,b,b,#\]output[#,i,m,fn,In,#\]\[#,i,m,fn,Ib,#\]\[#,i,m,m,fn,#\]\[#,i,m,m,fb,#\]2 WRIT ING OF  LETTER HAMZAThe hamza can be written in five different man-$ners (I, !, 3, ~, ') depending mainly upon:?
its position within the word?
the preceding and the following vowelAs the choice made for coding, was to adhereto a linguistic point of view, there should havebeen only one code for all these shapes and car-rying consonants.
But, as it has just been said,to determine the correct writing of hamza, onehas to know the surrounding vowels, and it is ofcommon knowledge that the Arabs do not usu-ally write short vowels.
These essential data be-ing missing, no algorithm can take place to ful-fil this task for a common usage such as displaya text on a screen.
Thus, the ASMO decidedto have distinct codes for the different carriersof hamza, but not of course for their differentshapes which can be determined as seen before.So why is this question of any interest ?
If weconsider NLP applications for Arabic, it couldworth considering this problem at generationstage.
For instance many vowel alternationsoccur in the conjugation of verbs, and when ahamza is present in the verb root, the hamzawriting will vary accordingly.For example the verb I~ qara 'a  - he (has)read-changes to 5 .~."
yaqra ' fna - they  reado (present) - and to ~.z~ qur i 'a  - it (has) beenread.
And at the generation stage vowels areknown even if we decided not to write them.The only alternative would be to put all theforms in a dictionary.
At CERTAL, our philos-ophy is to use all the possible means to reducethe size of dictionaries.
Hence this question ap-peared to us worth studying.2.1 Rules of hamza writ ing1.
When a hamza is at the beginning of a wordit is written29?
over an alif (i) if the next vowel isan "a" (') as in l~l(present)- or an "u"'uktub - write !
-'aqra'u - I read(') as in 0 .~?
under an alif (~ if the next vowel is an0 ~0" i "  (.)
as in l , )~  'iv.l~m - information2.
When a hamza is within a word (i.e.
pre-ceded and followed by some consonant) itis written?
over an alif (i) when- preceded by a sukfin (0) and fol-lowed by an "a" as in JL~" yas'alu- he asks-- preceded by an "a" and followed bya sukfin as in ~. "
ya'kulu - he eats- preceded by an "a" and followed byan "a" as in ?Jk~ sa'ala - he (has)asked -?
over a waw (~) when- preceded by a sukfin and followedby an "u" as in ~. '
"  yab 'usu - heis strong, brave --p receded by an "a" and followedby an "u" or an "fi" as in " ~'"ya'~bu - to return or to suffer -precededa sukfinprefers -by a "u" and followed byas in .~  yu'thiru - he- preceded by an "u" and followed byan "a" as in .~  yu'aththiru - heinfluences -- preceded by an "u" and followedby an "u" or an "fi" as in ~r_~Y.bu '~sun - distresses -- precede by an "fi" and followed byan "u"?
over a ya (G) when- preceded by an "i" whatever be thefollowing vowel as in ~.
bi 'run -well - .~  bi 'drun plural of thesame word- followed by an "i" whatever be thepreceding vowel as in ~3~ qd' idun- leader, director, commandant, .
.
.?
without any carrying letter when- preceded by an "&" and followed byan "a" as ~1~5 bad~'atun - begin-ning -- preceded by an "fi" and followed byan "a" as in O: l i~"  yasa 'dn i  - they(both) become bad -3.
When a hamza is at the end of a word it iswritten?
without any carrier when- the preceding vowel is a sukfin 6 asin *At2".
j uz 'un  - a part -- the preceding vowel is an "g" as in~l~fi..l ajza'un, plural of the sameword- the preceding vowel is an "fi" as in;y :~ yasa'u - it becomes bad -- the preceding vowel is an "i" as in?
o *0~"~- yajf 'u - he arrives -?
over alif when the preceding vowel isan "a" and the following is one of "a ' ,"an" ,  "u" ,  "un" as in i"a~ mubtada 'un?l S~I  a l -mubtada'u mubtada 'an~ o~I .~\].
l  al-mubtada 'a, different forms ofthe word meaning (grammatical) sub-ject?
under alif when the preceding vowel isan "a" and the following is "i" or "in"I~  mubtada' in  15"_'-_~i al -mubtada' i ,indirect case of the same word6there are some exception when the preceding conso-nant is "y" as in ~ shagt'an undetermined direct case- a thing -30?
over waw when the preceding vowel is"u" as in ~.
jaru'a- he (has) risked- ~."
yajru'u - he riskes-?
over ya when the precedin.gvowel is "i"as in ~I:,~ khati'un ~t ld l  al-khati'a~.~,t~d~ al-khati'i - wrong-A full account of the rules governing hamzawriting have just been given.
Usual presenta-tions of hamza writing add to these rules, therules of madda (~) writing.
Madda is a con-traction used for a hamza followed by an ~ ora hamza followed itself by a sukfin.
This hap-pens in some derivations or conjugations, thuswe considerer it as pertaining to the whole setof transformations which occur in those cases.~'q 5kulu +-- ~q~ 'a'kulu -I eat -~-l  dkhad_a +-- ~ .~ 'aakhad_a - he blamed -Besides, except for elementary schools andCoranic Recitation, noboby cares about endingshort vowels.
So, if the last vowel is not longit is treated as it were a sukfin, i.e.
no vowel.This is always true of modern arabic and thisreduces the number of rules involved at the endof a word.2.2 A Moore  automaton  for hamzawr i t ingWith the aforementioned restrictions these rulescan also be implemented as a Moore automaton.2.2.1 Source language of  the  automatonIt follows from the determination rules that wehave to know?
if the consonant to be processed is a hamza(whatever its carrier has to be) or not,?
wether a vowel is present before or after thehamza,?
and if so, what are the surrounding vowels(short or long).Again the presence of a shadda is non pertinentand can be treated as mentioned for the con-textual analysis.
The alphabet for the sourcelanguage L3 can be, using the same method asbefore :A3 = {#, l ,  hz, su, a,u,i,?t, fz,~,}where hz is a hamza with any carrier, 1 anyconsonant other than hamza and su stands forsukfin.
The only other constraints for this lan-guage are :i. a sukfin cannot?
neither follow the first consonant?
nor follow a consonant already pre-ceded by a sukfin2.
a hamza cannot follow another hamza 7The regular expression corresponding to L3would be too complicated to be really clarify-ing so we shall go directly to the definition of agenerating automaton for this language.initial states = {1}final states: = {21}transitionsBecause of the narrowness of this stylecolumns, the transition tables have been dev-ided in two parts.
The last column of the secondtable gives the output corresponding to everystate.hz 1 a u i1 0 0 0 0 02 3 4 00  03 0 0 5 6 74 0 0 89105 0 {17,4} 00  06 0 {17,4} 00  07 O {17,4} O O O8 {18,3} {17,4} 0 0 O9 {18,3} {17,4} 0 0 010 {18,3} {17,4} 0 0 0i i  O 4 0 0 012 0 4 00  013 0 4 00  014 3 4 00 015 3 4 0 0 O16 3 4 00  017 0 0 0 0 07this is true since we are at writing stage, not deriva-tion or inflection stage31hz l a u i1 8 0 0 0 0 019 3 40002 0 0 4 0 0 021 0 0 0 0 0ft f su # 01 0 0 0 0 2 02 0 0 0 0 2 #3 0 0 0 0 2 hz4 0 0 0 0 2 t5110 0 0 0 a6 0 12 0 0 0 u7 0 0 13 0 0 i8 14 0 0 0 0 a9 0 15 0 0 0 u10 0 0 16 0 0 i11 0 0 0 0 21 a12 0 0 0 0 2113 0 0 0 0 21 i-14 0 0 0 0 2115 0 0 0 0 21 fi16 0 0 0 0 21 ~:17 0 0 0 19 0 l18 0 0 0 20 0 hz19 0 0 0 0 21 su20 0 0 0 0 21 su21 0 0 0 0 0 #2.2.2 Target language of the automatonThe only differences with the source languagelie in the distinct carriers for the letter hamza:A4 -- {#,l,  hwc, hoa, hua, how, hog,su, a, u, i, ~, ~, 7, }where hwc stands for hamza without a carrier,hoa for hamza on alif, hua for hamza under alif,how for hamza on waw and hog for hamza onya.2.2.3 Translation automatoninitial states = {1}final states: = {36)transitions+I l+ul.l,+l/1 0 0 010  0 020 0 0145630 0 01789ImH  mmml\ ]mu+ml immml~32l hz su a u i6 16 {14,34} 0 0 0 07 16 0 0 0 0 08 0 0 0 0 0 09 0 0 0 00 '  010 0 0 21 22 26 3011 16 {19,31} 0 0 0 012 0 0 24 25 26 3013 16 {20,31} 0 0 0 014 0 0 27 28 29 3015 16 {21,31} 0 0 0 016 0 0 17 4 5 617 2 {18,31} 0 0 0 018 0 0 0 22 26 3019 0 0 0 23 26 3020 0 0 0 28 29 3021 2 0 0 0 0 022 16 0 0 0 0 023 16 0 0 0 0 024 16 0 0 0 0 02.5 16 0 0 0 0 026 16 0 0 0 0 027 16 0 0 0 0 028 16 0 0 0 0 029 16 0 0 0 0 030 16 0 0 0 0 031 0 0 35 0 0 032 0 0 35 0 0 033 0 0 35 0 0 034 0 0 35 0 0 03.5 0 0 0 0 0 036 0 0 0 0 0 0fi f # output1 0 0 0 1 #2 0 0 0 0 l3 0 0 0 0 04 11 0 0 0 a5 0 13 0 0 u6 0 0 15 0 i7 0 0 0 0 \[hoa, \]8 0 13 0 0 \[hoa, u\]9 0 0 15 0 \[hua, i\]lO 0 0 0 0 011 0 0 0 36 a12 0 0 0 0 013 0 0 0 36 fi14 0 0 0 0 0a u , # outpu{15 0 0 0 36 f1 6 0 0 0 0  l17 0 0 0 0 su180000 0190000 0200000 021000 0 \[hoa, su\]22 0 O O 0 \[hoa, a\]23 0 0 O O \[hwc, a\]24 0 0 0 0 \[how, su\]25 O 0 0 0 \[how, a\]26 0 ?
0 0 \[how, u\]27 000  0 \[hoy, su\]28 O O O O \[hoy, a\]29 O 0 O O \[hoy, u\]30 0 0 0 0 \[hoy, i\]31 0 0 0 0 hwc32 0 0 0 0 hoa33 0 0 0 O how34 O O 0 0 hoy35 0 0 0 36 su360000 #2.2.4 Test program resultsA PROLOG program similar to the one used forcontextual analysis gives the following results:input\[#,hz,a,l,a,fi,l,a,hz,su,#\]\[#,hz,a,l,a,&l,u,hz,su,#\]\[#,hz,a,l,a,&l,i,hz,su,#\]\[#,hz,a,l,a,hz,a,l,a,~,#\]\[#,hz,a,l,a,hz,u,l,a,~,#\]\[#,hz,a,l,a,hz,i,l,a,& #\]\[#,hz,a,l,u,hz,a,l,a,&#\]\[#,hz,a,l,u,hz,u,l,a,fi,#\]\[#,hz,a,l,u,hz,i,l,a,~,#\]\[#,hz,a,l,i,hz,a,l,a,fi,#\]\[#,hz,a,l,i,hz,u,l,a,& #\]\[#,hz,a,l,i,hz,i,l,a,~,#\]\[#,hz,a,l,i,hz,i,l,a,fi,#\]\[#,hz,u,l,a,~,l,a,hz,su,#\]\[#,hz,i,l,a,fi,l,a,hz,su,#\]\[#,l,a,l,a,hz,a,l,a,~,#\]\[#,l,a,l,a,hz,u,l,a,fi,#\]\[#,l,a,l,a,hz,i,l,a,fi,#\]\[#,l,a,l,u,hz,a,l,a,fi,#\]\[#,l,a,l,u,hz,u,l,a,~,#\]\[#,l,a,l,u,hz,i,l,a,&#\]\[#,l,a,l,i,hz,a,l,a,fi,#\]\[#,l,a,l,i,hz,u,l,a,&#\]\[#,l,a,l,i,hz,i,l,a,&#\]\[#,l,a,fi,hz,a,l,a,hz,su,#\]output\[#,hoa,a,l,a,fi,l,a,hoa,su,#\]\[#,hoa,a,l,a,fi,l,u,how,su,#\]\[#,hoa,a,l,a,&l,i,hoy, su,#\]\[#,hoa,a,l,a,hoa,a,l,a,fi,#\]\[#,hoa,a,l,a,how,u,l,a,~,#\]\[#,hoa,a,l,a,hoy, i,l,a fi,#\]\[#,hoa,a,l,u,how,a,l,a,&#\]\[#,hoa,a,l,u,how,u,l,a,~,#\]\[#,hoa,a,l,u,hoy,i,l,a,&#\][#,hoa,a,l,i,hoy, a,l,a,fi,#\]\[#,hoa,a,l,i,hoy, u,l,a,~,#\][#,hoa,a,l,i,hoy, i,l,a,fi,#\]\[#,hoa,a,l,i,hoy,i,l,a,~,#\]\[#,hoa,u,t,a,fi,l,a,hoa,su,#\]\[#,hua,i,l,a,fi,l,a,hoa,su,#\]\[#,l,a,l,a,hoa,a,l,a,~,#\]\[#,l,a,l,a,how,u,l,a,~,#\]\[#,l,a,l,a,hoy, i,l,a,&#\]\[#,l,a,l,u,how,a,l,a,~,#\]\[#,l,a,l,u,how,u,l,a,fi,#\]\[#,l,a,l,u,hoy, i,l,a,~,#\]\[#,l,a,l,i,hoy, a,l a,fi,#\]\[#,l,a,l,i,hoy, u,l a,&#\]\[#,l,a,l,i,hoy, i,l,a,~.
#\]\[#,l,a,Lhss,a,l,a,hoa,su,#\]input\[#,l,a,Lhz,u,l,a,hz,su,#\]\[#,l,a,g,hz,i,l,a,hz,su,#\]\[#,l,u,l,u,fi,hz,a,l,su,#\]\[#,l,u,l,u,fi,hz,u,l,su,#\]\[#,l,u,l,u,fi,hz,i,l,su,#\]\[#,l,u,l,i,i,hz,a,l,su,#\]\[#,l,u,l,i,Lhz,u,l,su,#\]\[#,l,u,l,i,Lhz,i,l,su,#\]\[#,l,u,l,su,hz,a,l,su,#\]\[#,l,u,l,su,hz,i,l,su,#\]\[#,l,u,l,su,hz,u,l,su,#\]\[#,l,u,l,a,hz,su,l,a,~,#\]\[#,l,u,l,u,hz,su,l,a,fi,#\]\[#,l,u,l,i,hz,su,l,a,& #\]output\[#,l,a,~,how,u,l,a,hoa,su,#\]\[#,l,a,~,hoy, i,l,a,hoa,su,#\]\[#,l,u,l,u,fi,hss,a,l,su,#\][#,l,u,l,u,fi,how,u,l,su,#\]\[#,l,u,l,u,fi,hoy, i,l,su,#\]\[#,l,u,l,i,i,hoy,a,l,su,#\]\[#,l,u,l,i,i, hoy, u,l,su,#\]\[#,l,u,l,i,Lhoy, i,l su,#\]\[#,l,u,l,su,hoa,a,l,su,#\]\[#,l,u,l,su,hoy,i,l,su,#\]\[#,l,u,l,su,how,u,l,su,#\][#,l,u,l,a,hoa,su,l,a,~,#\][#,l,u,l,u,how,su,l,a,&#\]\[#,l,u,l,i,hoy, su l,a,& #\]CONCLUSIONAs a matter of conclusion we hope to haveshown that, through a careful choice of a for-real language, linguistic rules can be specifiedas tractable automata.ReferencesA.
V. Aho and J. D. Ullman.
1972.
The Theory of Pars.ing, Translation and Compiling, volume 1: Parsing.Prentice-Hall.Arab League Arab Organization for Standardizationand Metrology (ASMO), 1982.
Data processing 7 bitCoded Arabic Character Set for Information Inter-change.Arab School on Science and Technology 1st Fall SessionRabat Morocco.
1983.
Applied Arabic Linguistics andSignal ~ Information Processing, P.O.
Box 7028 Dam-ascus Syria.Arab School of Science and Technology 7th Summer Ses-sion, Zabadani Valley - Syria.
1985.
Informaties andApplied Arabic Linguistics, P.O.
Box 7028 DamascusSyria.R.
Blach~re and M. Gaudefroy-Demombynes.
1952.Grammaire de l'arabe classique.
G.P.
Maisonneuve &Larose, 3" edition.1985.
Computer Processing of the Arabic Language.April 14-16, 1985 Kuwait.M.
Fanton.
1997.
L'~criture arabe : du manuscrit hl'ordinateur.
La Tribune Internationale des Languesvivantes, (21), mai.J.
E. Hopcroft and J. D. Unman.
1979.
Introductionto Automata Theory, Languages and Computation.Addison-Wesley.K.
Lagally.
1992.
ArabT~c~X a system for typesettingarabic user manual version 3.00.
Technical Report1993/11, Universit~t Stuttgart, Fakult~it Informatik,Breitwiesenstrafle 20-22, 70565 Stuttgart, Germany.Document ~lectronique fourni avec le logiciel.A.
Lakhdar Ghazal.
1983.
L'alphabet arabe et les ma-chines.
In Applied Arabic Linguistics and SignalInformation Processing (Ara, 1983), pages 233-258.W.
Wright.
1859.
A Grammar of the Arabic Language.Cambridge University Press, 3 ~ edition.33
