A Successful Case of Computer  Aided TranslationMiguel FilgueirasLIACC, Universidade do PortoR.
do Campo Alegre 823, 4100 Porto, Portugalmig?ncc, up.
ptAbstractThis paper reports on the techniques usedto successfully translate with the help ofa computer a Mathematics textbook fromPortuguese to English.
Even if thesetechniques are simple and this case hassome peculiarities, it seems that the samemethod will be useful in other cases as well,and, more importantly, that this experi-ence is a good motivation for some researchto be done on the possible refinements ofthe method.1 IntroductionThis paper reports on the techniques used to suc-cessfully translate with the help of a computer aMathematics textbook from Portuguese to English.These techniques, although quite simple, proved tobe surprisingly effective.
In fact, for a 400 pagesbook, the amount of work required from the trans-lator (the author of the book himself) was equivalentto that of typing a few 40 pages.
Even if the booksubject matter  and the pair of languages have somepeculiarities, it seems that the same method will beuseful in other cases as well, and, more importantly,that this experience is a good motivation for someresearch to be done on the possible refinements ofthe method.2 The ProblemThe work I am about to describe originated in thequestion "Which Machine Translation system shouldI use to translate my book from Portuguese into En-glish?".
To which the only fair answer from anyoneacquainted with the current state of the art of Ma-chine Translation ought to be a (maybe qualified)"None!".
The book in question is Semigrupos Fini-tose Algebra Universal, a textbook on finite semi-group theory.The problem was then reformulated as "Whatmay help me in avoiding to type in all the 400 pagesof the book, given that it is a book on Mathematicsand was prepared in IbTEX?".
A book on Mathe-matics meant that the language used was somewhatformal and that all mathematical  formulas could bepreserved uring the translation.
That  the book hasbeen prepared in I_$TEX , a text processor widely usedby mathematicians and computer scientists (Lain-port, 1986), meant that it would be possible to usethe IbTEX commands in the text, for instance, to de-tect the boundaries of formulas (the same would betrue of texts encoded using a mark-up language like,for instance, SGML).
This far less ambitious goal ofbuilding some tools that would help the translationseemed quite attainable, even if at the time the finalresult was not expected to be as good as it turnedout to be.3 The MethodThe basic method employed consists in having a dic-tionary of rewrite rules, each one being a sequence ofwords in Portuguese with its counterpart in English,and in applying these rules to the source text.
Thedictionary is looked up from the beginning so thatthe first rule in it whose left-hand side (lhs) matchesa prefix of the source text is the one selected, irre-spective of existing other rules that could be applied.This means that a dictionary rule whose lhs is a pre-fix of the lhs of another ule must appear after it.
I fno rule can be applied the first word in the sourcetext is left unchanged.
In any case the same methodis used for the rest of the text.A finer analysis of the source text was added tothis basic method in order to cope with I$TEX com-mands, so that?
mathematical formulas, that must be left un-changed, can be detected,?
IbTEX denotations of diacritics are taken as be-longing to the words they occur in,?
some commands (which were called transpar-ent), such as those for section names or foot-notes, have their arguments translated, whileall the others are left unchanged.Another refinement was the possibility of having91rewrite rules with parameters that stand for formu-las, as inde $1 sobre  $2v-*o f  $1 on $2Finally, in order to deal with proper nouns, a cap-ital letter at the beginning of the text is given aspecial treatment.
The dictionary is searched for arule that matches the text as is.
Then, the capitalletter is converted into lower case and the dictio-nary is again searched for an appropriate rule.
Ifboth searches ucceed, the rule that is nearest tothe beginning of the dictionary is selected.4 The  ToolsThree small programs (amounting to a total of 9pages) were written in Prolog to cope with differentaspects of the problem at hand.One of them scans the source text and prints thewords in it, skipping formulas and irrelevant ISTEXcommands.
The list of words thus obtained, afterbeing sorted and after deletion of repeated words(what can be done by using the sor t  utility in a Unixsystem), is very useful in preparing the dictionary.The format adopted for the dictionary, as writtenby the user, is simply that of a text with a rewriterule in each line, the left-hand side followed by a tab-ulation character (that will be shown as ~ in thesequel) and the right-hand side.
Parameters stand-ing for formulas in a rule are written as SN where N isa positive integer.
Each such parameter must occuronce and only once in each side of the rule and notat the beginning of its lhs.
Examples of rules in thisformat arede $1 sobre  $2 ~ of  $1 on $2sejam $1, $2 e $3 ~ le t  $1, $2 and $3 beThe second program transforms the dictionaryas typed by the user into a set of Prolog clausesfor use by the translation tool, our third program.These clauses can be seen as the usual translation ofDefinite-Clause Grammar (DCG) rules into Prologbut for the order of the arguments.
For the sake ofefficiency in searching the dictionary for rules thatcan be applied at each step, we take the "string" ar-guments of the translation of a DCG non-terminalto be the first arguments of the corresponding Pro-log predicate.
As these arguments are lists, and theindexing mechanism of the Prolog compiler we use,YAP (Damas et al, 1988), looks at the first elementof lists, this results in a speed-up by a factor of 2 or3.
Other points are?
the rewrite rules are numbered in order for thetranslation tool to be able to decide on whichrule to apply when dealing with capital letters(as seen at the end of last section),?
each parameter is replaced by a predicate callthat processes a formula,?
when a lhs does not finish with a parameter, apredicate is called that checks the occurrence ofa separator.Examples of rewrite rules in the user language andin Prolog arefun?~o identidade ~-+ identity functionru le ( J102 ,117,110,92 ,99 ,123,99 ,125,92,126,97,111,32,105,100,101,110,116,105,100,97,100,1011L0\] ,L0,1,\[105,100,101,110,116,105,116,121,32,102,117,110,99,116,105,111,1101L1\],L1) :- sep(LO,_).imagem de $1 pelo ~ image of $1 underru le ( \ [105 ,109,97 ,103,101,109,32 ,100,1011L1\] ,L2,2,\[105,109,97,103,101,32,111,1021L3\],L4) --math(L3 , \ [117,110,100,101,114\ ]L4 \ ] ,L1,\[112,101,108,111\]L2\]),sep(L2,_).The third program, the translation tool, imple-ments the method described in the previous ection.It was written as a DCG in Prolog with some frag-ments of Prolog to deal with special situations, likethe fact that the dictionary rules are implementedas above.5 The  Trans la t ionWhat I am about to describe was done by JorgeAlmeida, the author and translator of the book.The strategy adopted for doing the translationwas to build and tune a dictionary by focusing onthe translation of a single, representative chapter ofthe book, then further enhance the dictionary on thebasis of the translation of the other chapters, and fi-nally to use this dictionary to translate the wholebook with our translation tool.
The text obtainedin this way was then revised (by using a text editor)to have the final version in English of the book.The first step was to use our first program to havea list of the words in all the book.
This list wassorted out (and repeated entries deleted) by usingthe UNIX sor t  utility.
A preliminary version of thedictionary was built on the basis of the resulting list.Inspection of the output of the translation tool (us-ing this dictionary on the selected chapter) suggestedthe addition of new rules to the dictionary.
Aftersome iterations of this process an acceptable trans-lation of the selected chapter was obtained.
Some92further refinements to the dictionary were made byapplying this same technique to other chapters.Some rules used in the actual translation werea operaq~o ~+ the operationa ~-+ toEstado de S~o Paulo ~ Estado de S~o Pau lovari~veis d is t in tas  ~+ d is t inc t  variablesThe first two rules are related with a lexical ambigu-ity problem: a in Portuguese is both an article anda preposition.
In the absence of a syntactic analysis,the latter alternative is taken as the default (2nd ruleabove); this means that a as an article will be eithermanually corrected in the translated text, or trans-lated correctly if another translation rule in whichit occurs is applied.
This latter case is exemplifiedby the first rule above.
The third rule is an exampleof an identity rule that, along with the treatmentof capital letters, is useful in coping with propernouns - -  this particular ule blocks the translationof the preposition de by some generic rule.
The lastrule shows how inversions in word order can be dealtwith.Most of the effort in translating the book wasspent in building and tuning the dictionary.
Theamount of text typed during this phase is estimatedin about 20 pages.
About another 20 pages weretyped during the revisions made to the output ofthe translation program (this includes the introduc-tion of some small updates and corrections to theoriginal text).I give now some statistics on the work done onbuilding and tuning the dictionary and translatingthe book.
The execution times below are CPU exe-cution times of Prolog programs using the YAP com-piler (Damas et al, 1988) running under EP/ IX  (aControl Data Corporation version of UNIX) on aCDC 4680 machine (with two MIPS 6000 RISC pro-cessors).Se lec ted  chapterno.
of pages (final) 77no.
of characters 205 KBno.
of words 8571no.
of different words 1168exec.
t ime to extract words 10 secexec.
time to translate chapter 25 secF ina l  d ic t ionaryno.
of rules ca.
6000average total no.
of words/rule 3.4exec.
time to process rules 52 secBook  a f te r  t rans la t ionno.
of characters 1040 KBtotal no.
of typeset pages 436estimated revision effort 80 hours6 Conc lus ionsFor anyone knowing well the fields of Natural Lan-guage Processing and Machine Translation, the caseI have presented may come as a surprise - -  andsurprised was I with the results obtained with sosimple a method.
It can be argued that the pairPortuguese-English makes the translation easy, be-cause, for instance, there is no need for translatingmost of the gender agreements appearing in Por-tuguese; and that a book in Mathematics i writtenin a very restricted kind of language with a rela-tively small number of different constructions.
Thisis obviously true although some remarks should bemade, if one is not trying to have a 100%-correcttranslation:1. gender agreements lend themselves to simpletreatment in most cases; this is to say that mostof the time there will be no need for complexanalyses to arrive at their correct translation,2.
the pair Portuguese-English poses some difficultproblems concerning word order, and this wouldbe seldom the case, for instance, with pairs ofRomance languages,3.
the need for translating scientific texts in Math-ematics, Physics, Chemistry, Medicine andother fields in which formalized and restrictedsubsets of natural languages are used is prob-ably big enough to make translation tools asthose I have developed very interesting,4.
to the best of my knowledge, this is the veryfirst case of a book being successfully translatedmostly by computer.The main conclusion to draw seems to be thatthere are particular translation problems that can besolved or partially solved using simple and efficientmethods in a computer, much effort being saved thisway.
Nevertheless, even if one is to take the resultsdescribed so far as pertaining more to ingenuity thanto research (an analysis with which I fully agree, thetime spent in writing down and improving the pro-grams being quite negligible), there is an interestingset of questions put by them which I think shouldbe brought forward to those working in this kind ofproblems.
These questions are:..3.4.what kind of syntactic analysis (even superfi-cial) is needed to improve these tools, and howto integrate it?the same for semantic analysis,for which language pairs would these tools bein/appropriate, and why?how far can a rewrite rule dictionary as the onedescribed be re-used?93AcknowledgementsThe work described in this paper would not havestarted without he questions I mentioned in the be-ginning and that were formulated by Jorge Almeida.I would like to express my gratitude for his sugges-tions on improvements of the programs, for his pa-tience with some unpleasant bugs I produced, as wellas for his contributions toand comments on previousdrafts of this paper.ReferencesLuis Damas, V. Costa, R. Azevedo, and R. Reis,I988.
YAP Reference Manual.
Centro de In-form~tica, Universidade do Porto.Leslie Lamport.
1986.
LaTeX, A Document Prepa-ration System.
Addison-Wesley.94
