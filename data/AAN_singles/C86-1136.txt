GENERATING ENGLISH PARAPHRASES FROM FORMAL RELATIONAL CALCUq.US EX~RESSIONSA.N.
De Roeck and B.G?T.
LowdenUniversity of EssexWivenhoe ParkColchester -.
United KingdomO.
ABSTRACTTh is  paper  d i scusses  a sys tem for  p roduc ing  Eng l i shdescr ip t ions  (o r  "paraphrases" )  o f  t i le  content  o ffo rmal  re la t iona l  ca lcu lus  (RC) fo rmulae  express inga database  (DB) query .
I t  exp la ins  the  under ly ingdes ign  mot ivat ions  and descr ibes  a conceptua l  modeland  focus  se lec t ion  mechan ism necessary  fo rde l iver ing  coherent  paraphrases .
The genera lparaphras ing s t rategy is discussed, as are thenotions of "desirable" paraphrase and "paraphrasableqnery".
Two examples  are included.
The system wasdeve loped and implemented  in P ro log  at theUniversity of Essex under a grant from ICL.I.
INTRODUCTION.Query ing databases  (DB) is often prob lemat ic  forcasual users, who cannot be expected to master fullythe art  of express ing  themse lves  in a querylanguage.
Much has been said about how natura llanguage (NL) front ends (FE) wou ld  help them, butNLEEs create problems of their own.
In mapping froman ambiguous  NL to an unambiguous  formal  one theymast  make a number  of dec is ions  regard inginterpretation of the input which remain outside theuser ' s  cont ro l ?
Th is  may in t roduce  newmisconceptions which cannot always be detected fromthe format of the retrieved information.
\[13\[One solution to the problem is to present the casualuser with a NL descr ip t ion  of what his query hasbeen taken to mean.
lle can then ver i fy  whether  itsin terpretat ion  corresponds to what he intended toask.
This  paper  descr ibes  such  a descr lp t iongenerator, or "paraphraser" as we will call it.2.
DESIGN PRINCIPLES.The system is intended to work  a longs ide NEL( former ly  QPROC \[14\]), an NLFE which is a currentresearch project at ICL.
NEL uses "Descriptions andQualifiers" (D&Q) as an intermediary representation(IR) in mapping English sentences on Querymaster (QM- an ICL query  language).
However ,  IR such as D&Qwhich are to an extent linguistically motivated canoften represent  quer ies which cannot be eva luatedagainst  the DB.
Since the a im is to inform the userabout how his query has been ult imately understood,a text deriw~.d from snch IRs may be misleading.
Thisinf luenced our choice of QM as the input to theparaphraser~ which  results  in a system which wi l lequally benefit users who have no access to a NLFE.The QM quest ion is t rans lated into the RC beforeparaphrasing which makes the system independent ofQM syntax.
Since a tr iv ia l  mapp ing  exists  betweenall re la t iona l ly  complete  query languages and theRC, this step enhances the system's portability.The paraphrase  must  be grammat ica l ,  and this canbest be ensured by reference to a linguistic theorywh ich  can conta in  a grammar.
Our choice of Lex ica lFunctional Grammar (LFG - \[9,7\]) as an underpinning:is to some extent arbitrary, as most implementablegenerative theories will accomodate our needs.
Yet,the high degree of stratification in the theory wasthought an advantage as it predicts which linguisticinformation must be calculated at every stage in theprocess.
This feature gains impor tance  relat ive tothe distance covered by the mapping process, whichin this case is large?The system design is as fol lows.
Input QM quer iesare syntact i ca l ly  t ransduced into RC express ionswhich are then parsed, Their syntactic structure, informal languages a shorthand for their semantics, isfed to the main body of the paraphraser for which italso acts as control mechanism.
The system consultsa mode l  of the current DB to map the RC parse treesinto LFG compatible pred icate /argument  s t ructures(as they are defined in \[7\]), which can be passed toan LEG syntactic generator.
A QM expression, even ifobta ined  via a NLFE,  cannot  car ry  l ingu is t i cin format ion;  the text produced susta ins  no otherre lat ion to a poss ib le  NL input query than what iscarried by a QM command~3.
WHAT IS A "DESIRABLE '~ PARAPHRASE.Apart from being grammatical, the paraphrase shouldbe unambiguous to be useful for query verification.Yet, NLs are ambiguous.
Though there is no genera lsolution to this clash of interests, the problem canbe contained by concentrating on those ambiguitieswh ich  must be avoided at all cost in th~s context,ie?
involv ing scope of quant i f ie rs  and logicalconnect ives.
Scoping informat ion is hard to conveyin a linear text which must remain easy to read, buteasy to express in a tree.
The requirement for thissystem to produce l inear text was not cons ideredparamount and consequently the paraphrases wilJ useindentation to express logical connective scope.4.
COHERENCY~ FOCUS AND THE MODEL.RC formulae are poor in conceptual information abouttile field a DB draws on (and rightly so).
They referto DB objects but do not qua l i fy  the re lat ionsh ipsbetween them in conceptual terms.
NL texts, however~are rich in conceptual information and if a coherenthelpful paraphrase is to be generated rather than astuntied literal description of the original formalquery, an underlying conceptual structure must bedefined.
The necessary information cannot be derivedfrom tile DB itself, but mu.~t come from a model ofthe domain  the DB cowers.
Such a mode\ ]  must beconst ructed  for each DB the paraphraser  is to beused with: a task for whie_h no clear cut formalguidelines exist and which may be possible only forDBs whose organ\]sat\]on is ia broad intuitive termscompatible with the conceptual build of the domainit covers.
The current prc,potype works  from theSCOPE DB, developed at ICL as a tool for research,which has the required properties.
It holds data oncustomers ,  products,  s tock ,  orders and warehouses.Its overall structure is given below:?~orders -.
~ customerproduct F .
.
.
.
~ order-llne ~__~\ [ -  --,~ stock ~-  .
.
.
.
.
.
.
.
~ warehouseThe model  wr i t ten  over  SCOP~ conta ins  th ree  k inds  ofconceptua l / l ingu is t i c  in fo rmat ion .
Each DB ob jec t  i s581associated with several lexical items by which itcan be described, relative to the current focus.
Itattaches English predicates to relationships betweenthese objects: e.g.
"to place" with customer as itsist, order its 2nd argument marks the link order-customer.
Secondly, it holds lexieal material  todescribe RC syntactic operators relative to theconceptual type of their arguments.
Thirdly, itcontains information for selecting a focus for eachRC expression.
The notion of focus~ which is crucialfor producing conceptually coherent text, is rootedin the assumption that queries "make sense" and mustbe elaborated.Three principles underpin focus selection.
The focusof a RC query is a relation in the current DB.
Anyother relation in the RC expression is linked to it,directly or indirectly, in such a way that thenetwork of links and relations in the query form atree over the DB, with the focus as the root andwhere the nodes in the tree cover all and only theother relations in the expression.
Consequently, ifthe paraphraser relies on the conceptual informationassociated with the nodes and branches of the tree,the result will be a coherent text.
Finallyj each"paraphrasable" query has a focus.
Note that thelast principle is not a matter of wellformedness asqueries such as {(order, produet):true} can belega l ly  expressed  in the RC, re t r iev ing  thecartesian product of all customers and products inthe DB because the link between the two relations isnot specified.
Apart from being hard to describe, itis also diff icult to see what the point of such aquery is.
To count as paraphrasable, a query overorders and products in this DB should also specifyorder-line.5.
PARAPHRASING STRATEGY.In mapping the RC query into a predlcate/argumentstructure underlying a coherent English text theparaphraser is guided by the syntactic structure ofthe query.
It singles out user defined functions andsorting requirements on the retrieved data anddescribes them in separate sentences to be added tothe front or end of the main text.
In describing themain body of the query the system also relies on thefocus of the expression and the network over the DBit entails.
The paraphraser first introduces thefocus and describes all comparisons relevant to thefocus relation as relative clauses to that (nominal)description.
It then walks down the branches of theconceptual tree over the DB making each node in turnthe subsidiary focus and deseriblng parts of theformal expression relevant to it.
This part of thesystem thus works recursively.
Care is taken not tomod i fy  the scope of log ica l  connect ives ,  asreflected in the RC parse tree.
The lexical itemsnecessary for paraphrasing DB objects and the linksbetween them are retrieved from the model.The success with which such a recurslve strategy canbe adopted directly depends upon the selection of anappropriate focus.
The definition of an adequateconceptual model over a DB is crucial to the easewith which queries on it can be paraphrased.6.
TWO EXAMPLES.The fol lowing examples are drawn from the testingresults of the prototype.
The first shows how scopeof logical connectives is rendered by indentation.The second il lustrates how user defined functionsare described (which is problematic as there is no582restriction on the name or arity they can be given).Note how the same boolean operator (<) is rendereddifferently in the two examples~ depending on theconceptual type of its arguments.
The RC identifierswith "."
in the middle are attribute names.EXAMPLEIRC express ion :{(customer.cust-name), order :((~ od ?order-llne) (7 pe?
product)((pe.product-id=od.product-ld) &((od.order-no=order.order-no) &((order.order-no<458879) &((order.cust-no=customer.cust-no) &((customer.cust-name="Vegetables-Assoc") v(customer.cust~name="Maehines-Ltd")))))))}Se lec ted  focus :  PRODUCTParaphrase  :For productswhich are orderedandwhich are contained in orderswhose number is smaller than 458879andwhich are placed by customerswhose name is Vegetable Assocorwhose name is Machines LTD(I) give details of each order involved(2) show the customer names.EXAHPLE 2RC express ion :{stock-value(stock.qty-on-hand,product.unit-prlce):=('stock.
qty-on-hand * product.unit-prlce')stock-value(stock.qty-on-hand,product.unit-prlce):((product.product-ld=stock.product-id) &(product.unit-price < $1.5))}Se lec ted  Focus:  PRODUCTParaphrase :For productswhose unit price is cheaper than $1.5andwhich are stockedcalculate and display stock value,where stock value is defined as stocked quantityavailable * product unit price.7.
SHORTCOMINCS.The prototype is the result of a single year's work,which forced us to take account of priorities.
Firstof all, the LFG syntactic generator has not beenfully implemented.
The surface string is collectedfrom the predicate/argument structure by an ad hocprocedure.
Adding a full LFG generator, which can bedone easily because of the modular system design,will improve the quality of the output text.Also, as a prime target the system aimed at coveringthat subset of the RC corresponding to QM.
Since QMdoes not allow for universal quantification It hasnot been introduced in the present prototype,although provision have been made for its inclusion.8.
CONCLUSION.The test results for the prototype have Justifiedthe extensive effort spent in defining an adequateDB model for the application on hand.
They have alsodemonstrated the importance of defining a suitablemechanism for selecting a focus to guide theparaphrasing process and around which the conceptnalstructure of the text can he centered.
The currentsystem delivers paraphrases of a high quality inspite of :\[t not incorporating a full syntacticgenerator.
This fact supports our claim that, forsynthesising NL text from formal expressions, thepresence of an elaborate NL grammar formal ism issubsidiary to the development of a mechanism thatdefines a coherent underlying conceptual structure.The prototype has demonstrated that it is possibleto deliver paraphrases of query language expressionswhich are helpful to a user who wishes to verify hisquest ion.
It has success fu l ly  countered thereservat ions  that paraphrasers  of this typenecessar i l y  de l iver  text wh ich  is "a mere'syntactically sugared" variant of the originalformal expression" \[i\], and that their output must,for complex queries, "in fact become virtuallyunreadable" \[ibid.\].9.
BIBLIOCI~APh-f.\[I\] B.K.BOGURAEV and K. SPARCK JONES, "A NaturalLanguage Front End to Databases with EvaluativeFeedback", in GARANDIN and GELENBE (eds), NewApplications of Databases, Academic Press,London, 1984.\[2\] W.F.CLOCKSIN and C.S.MELLISH, Programming inProlog, Springer Verlag, Berlin, 1981.\[3\] E.F. CODD, "A Database Sublanguage founded onthe ReJational Calculus", in Proceedings of theACM SIGFIDET Workshop on Data Description,Access and Control, 1971.\[4\] E.F. COOD, "Relational Completeness of DatabaseSublanguages in Database Systems", in CourantCo_mmputer Science Series, Vol 6, Prentice I/all,Englewood Cliffs, 1972.\[5\] C.G.
DATE, An Introduction to Database Systems(2nd edit.
), Addison Wesley Publishing Co,Reading (Mass), 1977,\[6\] R. GRISHMAN, "Response Generation in Question -Answering Systems", in Proceedings of the 17thACL, La Jolla, 1979.\[7\] P.K.
HALVORSEN,  "Semant ics  for Lex ica lFunctional Grammar", in Linguistic Inquiry, Vol14, No 4, 1983.\[8\] INTERNATIONAL COMPUTERS LTD, Using Querymaster(200 Level), VME 2000, Publication R00260/00,1983.\[9\] R. KAPLAN and J. BRESNAN, "Lexicai FunctionalGrammar.
A Formal System for GrammaticalRepresentation", in BRESNAN (ed), The MentalR~resetltation of Grammatical  Relations, MITPress, Cambridge (M-~,  1982.\[I0\] B.G.T.
LOWDEN and A.N.
DE ROECK, "GeneratingEnglish Paraphrases from Relational CalculusExpress ions" ,  to appear  in Behav iour  andInformation Technol0gy.\[11\] K. McKEOWN, "Paraphrasing using Given and NewInformation in a Question Answering System", inProceedings of the 17th ACL, La Jolla, 1983.\[12\] E. MUECKSTE IN ,  "Q-Trans: Query LanguageTranslation into English", in Proceedings ofthe 8th IJKAI, Karlsruhe, 1983.\[13\] J.C. THOMAS and J.D.
GOULD, "A PsychologicalStudy of Query by Example", in Proceedings NCC44, 1975.\[14\] M. WALLACE and V. WEST, "QPROC: A NaturalLanguage Database Enquiry System Inplemented inProlog", in ICL Technical Journal, November1983.583
