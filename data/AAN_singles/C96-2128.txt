Revers ib le  de layed  lex ica l  cho ice  in a b id i rec t iona l  f rameworkGraham Wi lcock*Cent re  for Computat iona l  L inguist icsUn ivers i ty  of Manchester  Ins t i tu teof Sc ience and Techno logyPO Box  88, Manchester  M60 1QDUn i ted  K ingdomgrahamOccl, umist ,  ac.
ukYuj i  MatsumotoGraduate  School  of In%rmat ion  ScienceNara  Ins t i tu te  of Sc ience and %chno logy8916-5 Takayama,  Ikoma,  Nara  630-01, Japanmatsu~is ,  a i s t -nara ,  ac.
jpAbst ractWe describe a bidirectional frameworkfor natural anguage parsing and genera-tion, using a typed feature formalism andan HPSG-based grammar with a parserand generator derived from parallel pro-cessing algorithms.
We present an ap-proach to delayed lexical choice in gener-ation, based on subsumption within thesort hierarchy, using a lexicon of nnder-instantiated signs which at'(; derived fi'omthe normal lexicon by lexical rules.
Wethen show how delayed lexical choice canbe used in parsing, so that some types ofill-formed inputs can be parsed, but well-formed outputs are generated, using thesame shared linguistic information.1 A b id i rec t iona l  f rameworkIn our bidirectional framework for a natural lan-guage engine, the linguistic descriptions in thegrammar and lexicon are shared resources whichare used, in appropriately compiled forms, forboth parsing and generation.
Like the Core Lan-guage Engine (CLE) (Alshawi, 1992), we usea unification-based phrase structure grammar, alogical form representation, a bottom-up chartparser and a semantic head-driven generation al-gorithm.
However, we (lifter from CLE by exploit-ing recent developments in processing algorithmsand in linguistic representation formalisms.
Wewill clarify the similarities and differences at; therelevant points.1.1 Processing algorithmsThe SAX parser is a concurrent SICStus Prologimplementation of the PAX parallel pro'sing algo-rithm (Matsutnoto and Sugimura, 1987; Matsu-moto et al, 1994).
Like the earlier BUP parserto which the CLE parser was closely related, SAXuses partial execution to compile the gramlnar forefficient bottom-up arsing.
However, instead of*Visiting researcher of Information Systems Prod-uct Development Lalmratories, Sharp Corporation.building the chart by asserting edges into the Pro-log database, SAX implements the chart by cre-ating concurrent processes.
For compiled ratherthan interpreted Prolog systems, this is a highlyetficient form of chart, parsing, even on sequen-tim machines.
The terminal and non-terminalsymbols of the grammar are realized as processeswhich communicate via streams to build largerstructures.
A meta-process monitors tile strealnsand controls l;he whole parsing process.The SGX generator is a concurrent SICStusProlog implementation of the BCG parallel bidi-rectional chart generation algorithm (Haruno etal., :1993; Den, 1.994).
SGX uses partial execu-tion to compile the grammar lot' efficient gener-ation.
Like the CLE generator, SGX follows thesemantic head-driven (SHD) generation algoril;hm(Shieber et al, 1990) to ensure fficient ordering ofthe geImration process.
However, SGX also imple-ments tile suggestion of Shieber et.al, thal; back-tracking and recomputation of results should beavoided by using a chart, as in chart parsing.
LikeSAX, SGX implements the chart by concurrentprocesses and coininunication streants monitoredby a meta-process.SAX and SGX accept definite clause grammars,with specific requirements o eliminate nondeter-minism.
Prolog code can be added to DCG rulesas extra conditions, but tile extra conditions mustbe deterministic.
Empty categories are not sup-ported in normal processing, 1 and SGX does notallow non-chain rules with uninstantiated logica.1forms.1.2 Grammar formalismLarge DCG-t)ased grammars typically have manyrules, many categories, and many arguments percategory.
Such grammars could be efficiently pro-tossed by SAX and SGX, but are ditficult to de-l If empty categories are really imcessary, they canbe handled in the concurrent processing system via arecta-process.
This approach is described in (hnaichiand Matsumoto, 1995) tbr ill-tbrmcd inputs.
However,we eliminate traces by lexical rule, and welcome tlteproposals of (Sag, 1.995) for eliminating all empty cat-egories from ItPSG.758veh)p and debug.
CLE addressed this t)roblem t)yadopting GPSG grammatical theory mid ext)ress-ing linguistic descriptions as flmture structures,but the CI,E grmnmm' still had many argumentsper category and many rules.
We adopt Itl)SGgrammatical theory (Pollard and Sag, 1994) andexpress linguistic descriptions in a l;yI)e(1 featureformalism, lint we still ilnt)le, ii~lent he grammar in1)CG forln.Sin(:e HPSG colle('.ts all fe, atures into a strut>tured sign , the many I)CG a.rguments are repla(:edby a single HPSG sign.
As H1)SG generalizesfl'om category-based rules (for S, NP, el;t:.)
toschenms for phrasal signs, the many 1)CG rulesare rel)lat;ed 1)y a few generalized rules.
We sl)ec-ify a sepa.rate logi(:al form (LF) f()r generation,as in (Shieber et al, \]990).
Our I)CG' categoriestherefore have the fin'mat word(S ign) /LF  andphrase (S ign) /LF .
2phrase(synsem!
loc!
(cat!
(head!HF gsubcat!
@l is t l (Sub jSynsem)cont!Cont)) / i f (Cont)# word(synsem!
loc!
(cat!
(head!HF &subcat !
@l i s t l (Sub jSynsem))  &cont!Cont)) / I f (Cont) .Figure 1: The sour(:e form of a grammar uleFigure 1 shows the source form of a simplifiedversion of ItPSG Scheina 2 with zero eoint)h',nmntdaughters.
~ l i s t  1 is a l;emplate which ext)ands toa list; wil;h one meml)ei'.
The # symbol is requiredby SGX to identify the semantic, head of ~ chainrule for SlID generation.1.3 Grammar  compi la t ionThe ProFIT system (Erbaeh, 1995) iv an exten-sion of fq'olog whic, h SUl)ports a typed feature for-malisin with multiple inheiitalwe.
CLE used asort hierarchy only for senlantie seleetional restric-tions.
HPSG uses a sort hierarchy also for syntac-tic resl;rictions, aim exploits multiple inheritmmefor lexicon organization.2In this pape, r we follow (Shieber et al, 1990) and(Pollard add Sag, 1.994) in equating logical form withsemmltic ontent.
A separate logical form is thereforeredundant, as the.
content fe.ature could /)e used to<:ontrol SHD generation.
Itowever, logical form mayneed to include other inforination, suet, as unscot)edquantifiers (HPSG qstore), i)resul)positions (IIPSGcontext), pragmatic and discourse factors (in factShieber et al include mood ot)erators ).
An impor-tant consequence of this is that a semmttic head in thesense of the IIPSG Content Princil)le is not necessar-ily a semantic head in the sense of the StID generationalgorithm.ProFIT compiles the, typed hmture formalisminto Prolog terlns, which can be used with anyappropriate parser or generator.
We therefore useI)roFIT in order to combine I\[PSG g~ra,lrllIl&r withthe SAX l)a,i'ser and the SGX generator, 1)y (;{)tit-piling the grmnmar in two separate stages.In the tirst stage, the typed feature structuresin the I)CG rules are compiled by I ' roF IT  into ef-ficient Prolog terms.
Like CI,E, ProFf l '  t:ompilesfeature, structures into terms, so that relativelyslow unification of fe, ature strucl;ures i ret)laced t)yrelatively fast mfitication of terins.
Also like CLE,l'rol!Tl' uses the technique of (Mellish, 1988) tbrcompiling finite domains such as index agreementinto booh;an vectors for fast unification.In the second stage, tlle resulting I)C(\] contain-ing only Prolog terms is COml)ih',d sel)a.rately bythe SAX l, rmmlator t'or pa,rsing mid 1)y the SGXtrallsl&tor for generation.
(~rgtHin&r ules Call 1)elabelled to be compiled only by SAX or only bySGX, st) thai, parsing could for e, xaml)le use somerules with wider coverage l;han others used in gen-ergttion, while sharing I\[IOSt of the gra, innl&r.Like the earlier BUP parser, the SAX transla-t;or uses t)art;ial execution to t)roduee fficient codefor bol;1;om-ut) (:hart t)arsing.
The SGX transla, toreontl)iles tal)les of chain rules and also uses partialex(~eution to l)rt)dut:e fliehmt code for Sill) (:ha,rtge, ncration.1.4 Lex icon compi la t ionWe, do not compile tile lexicon off:line ill/;() a staticlist of signs.
Instead, the existence of a lexieal signis proved on-line by lexical inlhrence rules.
Wespecify a morph, ological lexicon inl;erfiu:emorph_ lex(Forn , ,  Cat,  \[LF, Sign\])where N) rm is ~.~ specific morl)hological form, andSign is a typed li,~atut'e structure.
A lexieal infer-ence ruh, is shown in simplified form in Figure 2.In ProFIT,  sorts axe writl;en as <sort  and fea-tures as feature  !
value.morph_lex(Vbse, word, \[ i f(Cont),synsem!loc!(cat!(head!
(vform!<bse &aux!<n & inv!<n) &subcat!@listl(loc!(cat!(head!<nounsubcat!<elistcont!
(Subj  gindex!<ref))) )cont!
(Cont ~ <psoa &quants!<el is t  &nuc leus!
( re ln!Re lnRole!Subj) ) ) \ ] )verb(Vbse, Rein, \[np/Role\]).Figure 2: A morphJex rule for a verb base form759We use lexical inference rules to derive flfllHPSG lexical signs from a database of simple Pro-log clauses.
Such rules can partially re-use avail-able non-HPSG lexical information.
The exampleassumes a lexical entry such asverb(walk, walk1, \[np/agent\])specifying a verb with base form walJg and sense,walk1, which subcategorizes for a noun phrasesubject assigned to a thematic role agent.We also use rules like normal HPSG lexicalrules, to derive new signs fl'om other lexical signsfor morphological derivations, complement extrac-tion and so on.
We have no automatic defaults,so these rules must be written carefully.
The sim-plified example in Figure 3 instantiates nomina-tive and 3rd singular in the first subcat item, andcopies the rest of subcat by unification.morph_lex(V3sg, word, \[if(Cont),synsem!loc!(cat!(head!
(vform!<finaux!<n & inv!<n)subcat!(first!loc!(cat!(head!case!<nomsubcat!<elist)cont!(Subjectindex!agr!(3&sg)))rest!Rest))cont!
(Cont & nucleus!reln!Reln))\])morph_lex(Vbse, word, \[if(Cont),synsem!loc!(cat!(head!
(vform!<bseaux!<n & inv!<n)subcat!(first!loc!(cat!
(head!<nounsubcat!<elist)cont!Subject) grest!Rest))cont!Cont)\]),morph_infl(verb_3sg, Vbse, Reln, V3sg).Figure 3: Lexical rule for 3rd singular verb formThe typed feature structures in the lexical rulesare compiled by ProF IT  into Prolog terms.
Theresulting rules arc then compiled by SICStus Pro-log, together with the database of simple lexicalentries.2 Delayed lexical choiceDelayed lexical choice is an established techniquein natural language generation.
When a back-tracking algorithm is combined with a lexicon ofmorphological forms, there is considerable non-determinism during syntactic generation, becausefeatures required for a deterministic choice of mor-phological form are not yet instantiated.
With de-layed lexical choice, a lexicon of stems is used dur-ing syntactic generation, and the choice of mor-phological form is delayed to a postprocess.
In-stead of producing a string of word forms, syntac-tic generation produces a string of lexical items.The morphological postprocess converts the lexi-cal items to final lexical forms, when all requiredsyntactic features have become instantiated.2.1 MonotonicityDescribing the implementation of delayed lexicalchoice in the MiMo2 system, Shieber et al (1990)pointed out that only monotonic rules (which tilt-ther instantiate the feature structure of a lcxi-cal item but do not change it) can be delayed.For example, the choice of singular or plural verbi'orm can be delayed until after the subject hasbeen generated, by perforIning syntactic genera-tion with a lexical item based on the verb stem,which does not specify singular or plural.
By con-trast, a lexical rule for passivization which changesthe order of items on the subcat list is nonmono-tonic.
Both the active and the passive variantsmust be made available as distinct lexical itemsduring syntactic generation, aIn an inheritance-based typed feature formal-ism, monotonicity is tmilt into the subsumptionrelation in the sort hierarchy.
A sort subsumesits subsorts, which may further instantiate its fea-tures, but cannot change them.
We exploit tilemonotonicity of subsumption i the sort hierarchyin our implementation of delayed lexical choice.2.2 Syntactic-semantic lexiconIn place of the MiMo2 lexicon of stems, we specifya syntactic-semantic lezicon interfacesynsemJex(Lex, Cat, \[LF, Sign\])where Lex has no significance for generation.
En-tries in tile syntactic-seInantic lexicon are derivedby a small number of lexical rules from entriesin the morphological lexicon.
Like the morphJexrules, the synsem_lex rules are compiled first, byProFIT and then by SICStus Prolog.To implement delayed lexical choice, we use thesynsem_lex interface during syntactic generation,and then use the morph_lex interface in the mor-phological postprocess.
We must therefore nsurethat the delayed morph_lex rules will be mono-tonic.
We do that by ensuring that tile synsem_texentries subsume the morphJex entries from whichthey are derived.Figure 4 shows a simplified form of a synsem_lexrule for verbs.
The rule derives the synsemJex en-try from tile morphJex base form entry, in whichvform has a vahm of sort <bse.
The subcat  of thesynsem_lex entry is unified with the subcat  of theawe currently make such variants available via al-ternative forms of the lexicon access rule (Section 2.3).This could be improved by using constraints to enablesubcat-changing rules to be delayed (van Noord andBouma, 1994; Meurers and Minnen, 1995).760morph_lex entry, so that the synsem_lex entry sub-categorizes for the appropriate synt;actic omple-inents.
The morptl_lex base form entry is used sothat the agreement Datures of tile subject, will nott)c restricted.
The content  vahte, s are also unified,so that the synseni_lex entry inchldes the appro-I)riate semantic roles.
However, the head Daturesare not unified.
Tile synsemJex vform has a value.of sort <vform, wtfich is tim immediate supersortof the mort)hJex vform sort, <bse.
Instead of flfllunification, the synselnJex hea(l feat,ures ut)sumcthose of the morI)hJex entry.synsem_ lex(Lex ,  word, \[If(Cont g <psoa),synsem!loc!(cat!(head!
(vform!<vformaux!<n & inv!<n)subcat!Subcat)cont!Cont)\])morph_lex(Lex, word, \[if(Cont),synsem!loc!(cat!(head!
(vform!<bseaux!<n & inv!<n)subcat!Subcat)cont!Cont)\]).Figure.
4: A synsem_le.x rule for verbs2.3 Grammar- lex icon  in ter faceIn I)CG-based systems, the interface between thegrammar and the lexicon can often }m speciiied bya DCG rule which accesses the lexicon by meansof an extra condition.
In our fl'amework, such arule might, be:word (S ign) /LF  - ->\[Word\] ,{morph_lex(Word, word, \[LF, Sign\])}.Ilowevcr, since our concurrent t)roeessing algo-rithms require extra conditions to be determinis-tic, such a rule would find only one lexical entry(the first unifiable one), which would depend onthe order of lexical rules and lexical entries.For parsing this is not a problem because, likeCLE, wc use a morphological preprocess whichperforms lexicon access, building a morpheme lat-tice to be passed to the syntactic parsing pro-tess.
Lexicon access is therefore separated fromthe parsing algorithm, and is not required to bedeterministic.For generation with delayed lexical choice, weuse a modified form of the nile:sgx word(S ign) /LF  - ->\[Sign\],{synsem_lex(Word, word, \[LF, Sign\])}.The label 'sgx' shows that the rule is to be com-piled only by SGX, not by SAX.
It differs from theprevious rule not only by accessing the synt,act,ic-semantic lexicon instead of dm morphological lex-icon, but also by speci\[ying that the lexical itemis \[Sign\] instead of \[Word\].
That is, the output ofsyntactic geueration is a string of HPSG signs.2.4 Semant ic  head-dr iven  generat ionWhen syntactic generation begins, the StlD algo-rithm uses chain rules (like the rule ill Figure 1) toidentify tim piw)t, the semantic head of the scn-t,ence.
The synsem lex entry for the pivot is thenaccessed by the.
extra condition in tile DCG ruleabove..Since the synsem_lex entry for verbs (Figure 4)does not specify subject agreement or vform sub-type, but does specify subcategorization a d se-mantic roles, it can be used equally well as the sc.-mantle head to drive syntactic generation of, say,a 3rd-singular finite clause or an infinitival eom-t)lemt;nt.
Since a single entry ('.all be used in thisway, the extra condition can be detcrtninist,ic, asrequired.If the verb is the head of an infinitiwll con>p\]enlent, its vfornl l/econles ilmtant,iat,ed to <bsefl'om subcategorization by the auxiliary to.
If t,hcvert) is the head of tlte main clause, its vform be-eonms instantiated to <f in (finite) by a rule R)rgrammatical mfit,s in our grantmar.
4After syntactic generation, the string of I{PSGsigns is conw~rted to a string of word forms by amorphological t)ostprocess, which unifies the signswith entries in the.
inorphological lexicon.
As thesigns are t\]llly instantiated uring syntactic gen-eration, this postprocess i  also deterministic.a Revers ib le  delayed lexical choiceMost forms of robust parsing are based on coil-straint, relaxation.
Our approactl to delayed lexi-cal choice is based on using less instantiated signsflom the syntactic-semantic lexicon, rather thanthe more instant,iated signs from the morpholog-ical lexicon.
Tiffs can be viewed as equivalent toconstraint, re.laxation.
It therefore seelns reason-able to consider eversing the approach, using de-layed lexical choice for parsing.Constraint, relaxer,ion in parsing typically hasa two-pass approach.
Strict parsing is attemptedwith normal gralmnar ules and the normal pars-ing algorithm.
If strict parsing fails to produce aparse, relaxed parsing is attempted, using a mod-ified algorithm or modified grammar ules.
Witha lexicalist grammar like HPSG it seems more ap-propriate to use modified lexical rules, as in oursyntactic-semantic lexicon.4In addition to the HPSG categories word andphrase, we have a category gram_unit for grammati-cal units which can be uttered independently.
Theseinclude finite sentences, accusative NPs, and others.The rule for gram_unit thus instantiates certain tha-I, ures which arc" required for well-formed generation.761However, in our approach to delayed lexiealehoice we do not start with strict constraints andthen relax them.
On the contrary, we start withrelaxed constraints from less instantiated signsand then further instantiate the signs as other con-straints become available.
Our approach is there-fore incremental description refinement (Mellish,1988) rather than constraint relaxation.3.1 Parsing and generation with delayWhen the syntactic-semantic lexicon is used forgeneration, tile logical form is the retriewfl key,and the name of the lexeme is irrelewmt.
In tileinterface synseIn_lex(Lex, word, \[LF, Sign\]),the variable Lex does not need to be unified withthe name of the morpheme in tile morph_lex entry,and could be given another value, such as "verb".However, if we use the syntactic-semantic lexiconfor parsing, tile value of this variable will be theretrieval key.
If the value is taken directly fromthe words of the input string, it will not necessar-ily unify with the name of the morpheme in themorph_lex entry.In the case of verbs (Figure 4), where the inputword may be an inflected form but the synsem_lexentry uses the morphJex entry for the base form,we nmst first use the morphological preprocess toobtain tile "root" form of the word, which is thesame as the base form.
We then use tile root forminstead of the input form as the retrieval key.
Inthe ease of pronouns, which take different formsaccording to case and reflexivity but have no nat-ural root form, the input form is used directly asthe retrieval key (Section 3.2).Since the synsem_lex entry for verbs in Fig-ure 4 does not restrict subject agreement, an ill-formed input with ineorrect subject-verb agree-ment is parsed in exactly the same way as a well-formed intmt.
The'subject agreement in the verb'ssign remains uninstantiated until the subject andthe verb phrase are combined by Schema 1, whenthe agreement features are instantiated to thoseof the subject.
So "she swim" is accepted, butonly "she swims" is generated ill a finite clause.Tile synsemAex entry in Figure 4 also does not,restrict vform, which remains uninstantiated untilthe verb phrase is combined into a larger phrase.So "she can swimming" is accepted, but only "shecan swim" is generated, since "can" subeatego-rizes for a VP with vform of sort, <bse.3.2 Experimenting with delayOf course, difl'erent specifications in tile rules forthe syntactic-semantic lexicon produce differentetfects.
In tile synsem_lex entry for pronouns inFigure 5, instead of unifying tile head feature casewith the morphJex entry, the head is specifiedonly as sort <noun, leaving the case unspecified.There are distinct morphJex entries for nomina-tive and accusative forms of personal pronouns,but it is irrelevant which one happens to be foundwhen the rule is executed, because the rule doesnot unify the head features which include case.So the synsem_lex entry can be used deterministi-(:ally for syntactic generation, leaving tile case tobe instantiated from subcategorization by a verbor preposition.In parsing, tile effect of this form of the ruleis that the case of an input, pronoun is ignored.Whether this is good or bad depends oil both thelanguage and tile level of relaxation desired.
Thisform of the rule would clearly be unsuitable tbrfree word order languages, but seems useful forEnglish, accepting "for yon and I" but generating'~for  you  and  n le  '~ .synsem_lex(Lex, word, \[if(SynsemCont),synsem!loc!(cat!(head!<nounsubcat!<elist)cont!
(SynsemCont & <pronindex!Indexrestr!<elist))\]):-morph_lex(Lex, word, \[if(MorphCont),synsem!loc!(cat!(head!<nounsubcat!<elist)cont!
(MorphCont ~ <pronindex!Indexrestr!<elist))\]).Figure 5: A synsem_lex rule for pronounsIn Figure 5, the synsem_lex content  value is notunified with the morphJex content  vahm.
Onlythe index values are unified, including tile gender,number and person features essential for pronouns(tile res t r  vahms are e lnpty lists).
The  contantvalues are constrained only to be of sort <pron(pronominal).
Ill the sort hierarchy, <pron hassubsorts <ana (anaphoric) and <ppro (personal-pronominal), and <ana has its own subsorts <ref  1(reflexive) and <recp (reciprocal).
HPSG bindingtheory is based on these sortal distinctions, whichare part of the content value.Again, there are distinct morphJex entries forreflexive and personal-pronominal forms, but, it isirrelevant which one happens to be found when therule is executed, because the rule does not unifythe content  values.
Therefore the synsemJex en-try can be used deterministically for syntactic gemeration before the sort, becomes instantiated to<ana or <ppro by the binding principles.Tile effect of this form of tile rule is to relax thebinding constraints in parsing, accepting "I sawme" but generating "I saw myself".
Of course tiledistinction between "They saw themselves" (co-indexed) and "They saw them" (eontra-indexed)is also lost in parsing with this version.
The bind-762ing constraints can l)e re-instated simply by unify-ing the content  values in the rule, but the aboveversion is not neee.ssarily bad, for example in pars-ing non-native English.
The rule could t)e im-t)roved by having alternative forms which distin-guish ard and non-ard person.4 ConclusionOur fralnework seeks to combille the elegance ofa typed feature fornlalisln and IIPSG syntactictheory with efficient processing.
The ProFIT sys-tem gives an efticient encoding of typed featurestructures.
The SAX and SGX systems use an ef-ficient (:hart implementation, and their concurrentprocessing algorithms give turther motivation foreliminating enlpty categories and reducing non-determinism.Wc have addressed the issue of bidirectional useof shared linguistic descril)tions, rather than ro-bust parsing.
Itowevcr, the idea of using delwedlexical choice in reverse makes it possible, widloutmodifying the parsing and generation algorithms,to parse certain types of ill-formed inputs and togenerate corresponding well-formed outpul, s, us-ing the same shared linguistic descril)tions.AcknowledgementsThe first author would like to thank Mr IlitoshiSuzuki (Sharp Cort)oration ) and Prof aun-ichiTsujii (UMIST) for making this work possible.
Wealso thank Dr Kristiina aokinen (NAIST) and theanonymous reviewers for valuable conlinetll;s.ReferencesHiyan Alshawi, editor.
1992.
The Core LanguageEngine.
The MIT Press.Yasuharu l)en.
1994.
Generalized chart algo-rithm: an efficient )rocedure for cost-based ab-duction.
In 32nd Annual Meeting of the Associ-ation for Computational Linguistics, pages 218225.
Association for Computational Linguistics.Gregor Erbaeh.
1995.
ProFIT: Prolog with Fea-tures, Inheritance, and Templates.
In Seve'nthConference of the European Chapter of the As-sociation fin" Computational Linguistics.
Asso-ciation for Computational Linguistics.Masahiko Haruno, Yasuhm'u Den, Yuji Matsu-mote, and Makoto Nagao.
1993.
Bidirectionalchart gene.ratioil of natural language texts.
InProceedings of the Eleventh National Confer-ertcc on Artificial lntclligence, pages 350 356.AAAI Press/The MIT Press.Osamu hnaichi and Yuji Matsumoto.
1995.
In-tegration of syntactic, semantic and contex-tual information in processing rammaticMlyill-fi)rmed inputs, in I)~vccedings of the Four-teenth International Joint Conference on Arti-ficial lntelligenes, pages 1435 40.Yuji Matsumoto and \]{yoichi Suginmra.
1987.A parsing system based on logic programming.In Proceedings of the Tenth International JointConference on ArliJieial Intelligence, volmne 2,pages 671 4.Yuji Matsumoto, Yasuharu l)en, and TakehitoUtsuro, 199,1.
Koubun kaiseki shisutem'a SAX,shiyou setsumcisho (Parsing system SAX Man-hal) w'.rsio'u 2.1.
Nm'a Institute of Sci('nc(~ andTechnoh)gy.Christoph(:r S. Mellish.
1988. hnph'mcnting sys-temic classification |)y mfitication.
Compv.ta-tional Linguistic, 14(1):40 51.W.
Detmar Meurers an(\[ Guido Minnen.
1995.
A(:omputational treatment of IIPSG lexical rulesas cow~riation i  lexical entries.
In Proceedingsof the I~fth International Workshop on NaturalLanguage Understanding and Logic l'rogram-ruing, Lisbon, Portugal.Carl Pollard and Ivan Sag.
1994.
Head-drivenPhrase Structure Grammar.
University l'ress,Chicago.Ivan Sag.
1995.
English relativ( ?
(:lausc construe-dons.
Unpublished inanuscript.Stuart M. Shiet)er, Gertjan wm Noord, Fer-nando C.N.
P(;reira, and l{obert C. Moore.1990.
Semantic head-driven generation.
Con>putational Linguistics, 16(1):30 42.Gertjan van Noord and Gosse Bouina.
1994.Adjuncts and the 1)recessing of lexical rules.In 15th International Conference on ComFu-rational Linguistics.
Association for Computa-tional IAnguistics.763
