XMG - An expressive formalism for describing tree-based grammarsYannick ParmentierINRIA / LORIAUniversite?
Henri Poincare?615, Rue du Jardin Botanique54 600 Villers-Les-NancyFranceparmenti@loria.frJoseph Le RouxLORIAInstitut NationalPolytechnique de Lorraine615, Rue du Jardin Botanique54 600 Villers-Les-NancyFranceleroux@loria.frBeno?
?t Crabbe?HCRC / ICCSUniversity of Edinburgh2 Buccleuch PlaceEH8 9LW,Edinburgh, Scotlandbcrabbe@inf.ed.ac.ukAbstractIn this paper1 we introduce eXtensibleMetaGrammar, a system that facilitatesthe development of tree based grammars.This system includes both (1) a formal lan-guage adapted to the description of lin-guistic information and (2) a compiler forthis language.
It applies techniques oflogic programming (e.g.
Warren?s Ab-stract Machine), thus providing an effi-cient and theoretically motivated frame-work for the processing of linguistic meta-descriptions.1 IntroductionIt is well known that grammar engineering is acomplex task and that factorizing grammar in-formation is crucial for the rapid development,the maintenance and the debugging of large scalegrammars.
While much work has been deployedinto producing such factorizing environments forstandard unification grammars, less attention hasbeen paid to the issue of developing such environ-ments for ?tree based grammars?
that is, grammarslike Tree Adjoining Grammars (TAG) or Tree De-scription Grammars where the basic unit of infor-mation is a tree rather than a category encoded ina feature structure.For these grammars, two trends have emergedto automatize tree-based grammar production:systems based on lexical rules (see (Becker,2000)) and systems based on combination ofclasses (also called metagrammar systems, see(Candito, 1999), (Gaiffe et al, 2002)).1We are grateful to Claire Gardent for useful commentson this work.
This work is partially supported by an INRIAgrant.In this paper, we present a metagrammar systemfor tree-based grammars which differs from com-parable existing approaches both linguistically andcomputationally.Linguistically, the formalism we introduce isboth expressive and extensible.
In particularly, weshow that it supports the description and factor-ization both of trees and of tree descriptions; thatit allows the synchronized description of severallinguistic dimensions (e.g., syntax and semantics)and that it includes a sophisticated treatment ofthe interaction between inheritance and identifiernaming.Computationally, the production of a grammarfrom a metagrammar is handled using power-ful and well-understood logic programming tech-niques.
A metagrammar is viewed as an extendeddefinite clause grammar and compiled using a vir-tual machine closely resembling the Warren?s Ab-stract Machine.
The generation of the trees satisfy-ing a given tree description is furthermore handledusing a tree description solver.The paper is structured as follows.
We begin(section 2) by introducing the linguistic formal-ism used for describing and factorizing tree basedgrammars.
We then sketch the logic program-ming techniques used by the metagrammar com-piler (section 3).
Section 4 presents some evalu-ation results concerning the use of the system forimplementing different types of tree based gram-mars.
Section 5 concludes with pointers for fur-ther research and improvements.2 Linguistic formalismAs mentioned above, the XMG system produces agrammar from a linguistic meta-description calleda metagrammar.
This description is specified us-ing the XMG metagrammar formalism which sup-103ports three main features:1. the reuse of tree fragments2.
the specialization of fragments via in-heritance3.
the combination of fragments bymeans of conjunctions and disjunctionsThese features reflect the idea that a metagrammarshould allow the description of two main axes: (i)the specification of elementary pieces of informa-tion (fragments), and (ii) the combination of theseto represent alternative syntactic structures.Describing syntax In a tree-based metagram-mar, the basic informational units to be handledare tree fragments.
In the XMG formalism, theseunits are put into classes.
A class associates aname with a content.
At the syntactic level, a con-tent is a tree description2 .
The tree descriptionssupported by the XMG formalism are defined bythe following tree description language:Description ::= x ?
y | x ?+ y | x ??
y |x ?
y | x ?+ y | x ??
y |x[f :E] (1)where x, y represent node variables, ?
immediatedominance (x is directly above y),?+ strict dom-inance (x is above y), ??
large dominance (x isabove or equal to y), ?
is immediate precedence,?+ strict precedence, and ??
large precedence3 .x[f :E] constrains feature f with associated ex-pression E on node x (a feature can for instancerefer to the syntactic category of the node)4.Tree fragments can furthermore be combinedusing conjunction and/or disjunction.
Thesetwo operators allow the metagrammar designer toachieve a high degree of factorization.
Moreoverthe XMG system also supports inheritance be-tween classes, thus offering more flexibility andstructure sharing by allowing one to reuse andspecialize classes.Identifiers?
scope When describing a broad-coverage grammar, dealing with identifiers scopeis a non-trivial issue.In previous approaches to metagrammar com-pilation ((Candito, 1999), (Gaiffe et al, 2002)),2As we shall later see, a content can in fact be multi-dimensional and integrate for instance both semantic and syn-tax/semantics interface information.3We call strict the transitive closure of a relation and largethe reflexive and transitive one.4E is an expression, so it can be a feature structure: that?show top and bottom are encoded in TAG.node identifiers had global scope.
When design-ing broad-coverage metagrammars however, sucha strategy quickly reduces modularity and com-plexifies grammar maintenance.
To start with, thegrammar writer must remember each node nameand its interpretation and in a large coverage gram-mar the number of these node names amounts toseveral hundreds.
Further it is easy to use twicethe same name erroneously or on the contrary, tomistype a name identifier, in both cases introduc-ing errors in the metagrammarIn XMG, identifiers are local to a class and canthus be reused freely.
Global and semi-global (i.e.,global to a subbranch in the inheritance hierar-chy) naming is also supported however through asystem of import / export inspired from ObjectOriented Programming.
When defining a class asbeing a sub-class of another one, the XMG usercan specify which are the viewable identifiers (i.e.which identifiers have been exported in the super-class).Extension to semantics The XMG formalismfurther supports the integration in the grammar ofsemantic information.
More generally, the lan-guage manages dimensions of descriptions so thatthe content of a class can consists of several ele-ments belonging to different dimensions.
Each di-mension is then processed differently according tothe output that is expected (trees, set of predicates,etc).Currently, XMG includes a semantic represen-tation language based on Flat Semantics (see (Gar-dent and Kallmeyer, 2003)):Description ::= `:p(E1, ..., En) |?`:p(E1, ..., En) | Ei  Ej (2)where `:p(E1, ..., En) represents the predicate pwith parameters E1, .., En, and labeled `.
?
is thelogical negation, and Ei  Ej is the scope be-tween Ei and Ej (used to deal with quantifiers).Thus, one can write classes whose content con-sists of tree description and/or of semantic formu-las.
The XMG formalism furthermore supports thesharing of identifiers across dimension hence al-lowing for a straightforward encoding of the syn-tax/semantics interface (see figure 1).3 Compiling a MetaGrammar into aGrammarWe now focus on the compilation process and onthe constraint logic programming techniques we104Figure 1: Tree with syntax/semantics interfacedraw upon.As we have seen, an XMG metagrammar con-sists of classes that are combined.
Provided theseclasses can be referred to by means of names, wecan view a class as a Clause associating a namewith a content or Goal to borrow vocabulary fromLogic Programming.
In XMG, this Goal will beeither a tree Description, a semantic Description,a Name (class call) or a combination of classes(conjunction or disjunction).
Finally, the valua-tion of a specific class can be seen as being trig-gered by a query.Clause ::= Name ?
Goal (3)Goal ::= Description | Name| Goal ?
Goal | Goal ?Goal (4)Query ::= Name (5)In other words, we view our metagrammar lan-guage as a specific kind of Logic Program namely,a Definite Clause Grammar (or DCG).
In thisDCG, the terminal symbols are descriptions.To extend the approach to the representation ofsemantic information as introduced in 2, clause (4)is modified as follows:Goal ::= Dimension+=Description |Name |Goal ?
Goal | Goal ?
GoalNote that, with this modification, the XMG lan-guage no longer correspond to a Definite ClauseGrammar but to an Extended Definite ClauseGrammar (see (Van Roy, 1990)) where the sym-bol += represents the accumulation of informationfor each dimension.Virtual Machine The evaluation of a query isdone by a specific Virtual Machine inspired bythe Warren?s Abstract Machine (see (Ait-Kaci,1991)).
First, it computes the derivations con-tained in the description, i.e.
in the Extended Def-inite Clause Grammar, and secondly it performsunification of non standard data-types (nodes,node features for TAG).
Eventually it producesas an output a description, more precisely one de-scription per dimension (syntax, semantics).In the case of TAG, the virtual machine producesa tree description.
We still need to solve this de-scription in order to obtain trees (i.e.
the items ofthe resulting grammar).Constraint-based tree description solver Thetree description solver we use is inspired by(Duchier and Niehren, 2000).
The idea is to:1. associate to each node x in the description aninteger,2.
then refer to x by means of the tuple(Eqx,Upx,Downx,Leftx,Rightx) where Eqx(respectively Upx, Downx, Leftx, Rightx) de-notes the set of nodes in the description whichare equal, (respectively above, below, left, andright) of x (see picture 2).
Note that these setsare set of integers.EqUpDownLeftRightFigure 2: node regionsThe operations supported by the XMG language(i.e.
dominance, precedence, etc) are then con-verted into constraints on these sets.
For instance,let us consider 2 nodes x and y of the description.Assuming we associate x with the integer i andy with j, we can translate the dominance relationx ?
y the following way5:N i ?
N j ?
[N iEqUp ?
NjUp ?N iDown ?
NjEqDown ?N iLeft ?
NjLeft ?N iRight ?
NjRight]This means that if x dominates y, then in a model,(1) the set of integers representing nodes that areequal or above x is included in the set of inte-gers representing nodes that are strictly above y,5N iEqUp corresponds to the disjoint union of N iEq andN iUp, similarly for N jEqDown with NiEq and N iDown.105(2) the dual holds, i.e.
the set of integers repre-senting nodes that are below x contains the set ofintegers representing nodes that are equal or be-low y, (3) the set of integers representing nodesthat are on the left of x is included in the set ofintegers representing those on the left of y, and (4)symmetrically for the nodes on the right6.Parameterized constraint solver To recap 3from a grammar-designer?s point of view, aqueried class needs not define complete trees butrather a set of tree descriptions.
The solver is thencalled to generate all the matching valid minimaltrees from those descriptions.
This feature pro-vides the users with a way to concentrate on whatis relevant in the grammar, thus taking advantageof underspecification, and to delegate the tiresomework to the solver.Actually, the solver can be parameterized to per-form various checks or constraints on the tree de-scriptions besides tree-shaping them.
These pa-rameters are called principles in the XMG termi-nology.
Some are specific to a target formalism(e.g.
TAG trees must have at most one foot node)while others are independent.
The most interestingone is a resources/needs mechanism for node uni-fication called color principle, see (Crabb?e andDuchier, 2004).At the end of this tree description solving pro-cess we obtain the trees of the grammar.
Note thatthe use of constraint programming techniques tosolve tree descriptions allows us to compute gram-mars faster than the previous approaches (see sec-tion 4).4 EvaluationThe XMG system has been successfully used bylinguists to develop a core TAG for French contain-ing more than 6.000 trees.
This grammar has beenevaluated on the TSNLP test-suite, with a cover-age rate of 75 % (see (Crabb?e, 2005)).
The meta-grammar used to produce that grammar consists of290 classes and is compiled by the XMG systemin about 16 minutes with a Pentium 4, 2.6 GHzand 1 GB of RAM.7XMG has also been used to produce a coresize Interaction Grammar for French (see (Perrier,2003)).6See (Duchier and Niehren, 2000) for details .7Because this metagrammar is highly unspecifi ed, con-straint solving takes about 12 min.
Of course, subsets of thegrammar may be rebuilt separately.Finally, XMG is currently used to develop aTAG that includes a semantic dimension along theline described in (Gardent and Kallmeyer, 2003).5 Conclusion and Future WorkWe have presented a system, XMG8, for produc-ing broad-coverage grammars, system that offersan expressive description language along with anefficient compiler taking advantages from logicand constraint programming techniques.Besides, we aim at extending XMG to a generictool.
That is to say, we now would like to obtaina compiler which would propose a library of lan-guages (each associated with a specific process-ing) that the user would load dynamically accord-ing to his/her target formalism (not only tree-basedformalisms, but others such as HPSG or LFG).ReferencesH.
Ait-Kaci.
1991.
Warren?s abstract machine: A tu-torial reconstruction.
In Proc.
of the Eighth Interna-tional Conference of Logic Programming.T.
Becker.
2000.
Patterns in metarules.
In A. Abeilleand O. Rambow, editors, Tree Adjoining Grammars:formal, computational and linguistic aspects.
CSLIpublications, Stanford.M.H.
Candito.
1999.
Repre?sentation modulaireet parame?trable de grammaires e?lectroniques lex-icalise?es : application au franc?ais et a` l?italien.Ph.D.
thesis, Universit?e Paris 7.B.
Crabb?e and D. Duchier.
2004.
Metagrammar redux.In CSLP 2004, Copenhagen.B.
Crabb?e.
2005.
Repr?esentation informatique degrammaires fortement lexicalise?es : Application a`la grammaire d?arbres adjoints.
Ph.D. thesis, Uni-versit?e Nancy 2.D.
Duchier and J. Niehren.
2000.
Dominanceconstraints with set operators.
In Proceedings ofCL2000.B.
Gaiffe, B. Crabb?e, and A. Roussanaly.
2002.
A newmetagrammar compiler.
In Proceedings of TAG+6.C.
Gardent and L. Kallmeyer.
2003.
Semantic con-struction in ftag.
In Proceedings of EACL?03.Guy Perrier.
2003.
Les grammaires d?interaction.HDR en informatique, Universit?e Nancy 2.P.
Van Roy.
1990.
Extended dcg notation: A tool forapplicative programming in prolog.
Technical re-port, Technical Report UCB/CSD 90/583, ComputerScience Division, UC Berkeley.8XMG is freely available at http://sourcesup.cru.fr/xmg .106
