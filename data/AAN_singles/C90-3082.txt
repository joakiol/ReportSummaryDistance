The Genera l  Arch i tec ture  of Generat ion  in ACORD*Dieter KohlUniversit?t StuttgartKeplerstrafle 17D-7000 Stuttgart 1 (West Germany)Agnes Plainfoss6Laboratoires de MarcoussisRoute de Nozay91460 Marcoussis (France)Claire GardentUniversity of Edinburgh2 Buccleuch PlaceEdinburgh EH8 9LW (Scotland)Abst rac tThis paper describes the general architecture of genera-tion in the ACORD project.
The central module of this ar-chitecture is a planning component, which allows to plansingle sentences as an answer to a KB query.
The plannerworks for three different languages (English, French andGerman) and for sentence generators based on two dif-ferent grammar formalisms (ucG for English and French,Lr'G for German) independent of the particular grammaror grammar formalism.
It uses several knowledge sourcesof the ACORD system to make its decisions.
The outputof the planner is used for the language specific genera-tors as well as for the update of information eeded forpronoun resolution.1 In t roduct ion'I~he ACOI~D prototype offers an interactive update andquery of a knowledge-base (Kn).
In the query situationthe user asks the KB using natural anguage and possi-bly graphical pointing.
The final response composed ofnatural language and also if appropriate, graphical high-lighting, is generated with a language specific generator,in the three ACORD languages (English, French and Ger-man) using the same grammar formalisms and grammarsemployed in parsing: ucc for English and French, andLFG for German.
The generators are fully described in\[9\] for the UCG framework, and in \[3\] and \[5\] for the LFGframework.The objective of this paper is to describe the modulescommon to the three languages, which build the seman-tics of the answer to be generated using the semantics ofthe question posed to the system, the dialogue history,and the KB answer.2 The  Semant ic  Representat ion)dost components in the ACORD system share a seman-tic representation language called \[nL (Indexed Language(see \[8\])).
InL is based upon Ramp's Discourse Repre-sentation Theory (see \[1\] and \[2\]).
The generators workon a derived representation called SynInL, which wasdesigned uring the project.2.1 Reso lu t ion  w i th in  InLThe parsers produce information which allows a centralcomponent, he resolver, to determine the possibilities ofcoreference between anaphoric expressions and their an-tecedents (see \[7\]).
This additional information is incor-porated into an InL expression i  the form of occurrenceinformation or lists, stating for every element which maybe coreferential with some other element properties rele-vant for determining coreference.
We refer to InL expres-sions which incorporate such information as unresolvedInLs and to lnL expressions where this information hasbeen used to determine coreference (and thereafter re-moved) as resolved InLs.
*The work reported here has been carried out as part ofthe ESPRIT project P393 ACORD on "The Construction a d In-terrogation ofKnowledge-Bases u ing Natural Language Textand Graphics".2.2 The  prob lems encountered  us ing InL ibrgenerat ionPlanning and generation operate on a different butderivated semantics formalism called SynInL.
Severalreasons brought us to design and use SynInL as opposedto InL:First, to work efficiently the ucG generators require thattheir input be canonical with respect o the respectivegrammars.
Canonicity means that only those InL formu-las are treated, which could be produced by the parser,but not all formulas, which are logically equivalent 1.
Inthe context of InL, the notion of canonicity cannot be for-malized outside the grammar definition.
We then neededa semantic language where canonicity could always beprovided, even though an expression was produced with-out any grammar dependent information.Second, the generator needs NP planning to control thegeneration of referring expressions ( ee \[6\]).
In order tospecify information about the type of NP to be gener-ated, a representation is required which allows the en-coding of syntactic information in addition to semanticinformation.
Furthermore, the individual bits of seman-tics must be related to the syntactic structure.
More gen-erally speaking, we need a mechanism for modifying orstructuring the semantic representation to be generatedprior to generation.
Standard InL, being a purely seman-tic representation language, is inadequate for encodingthis syntactic information.Third, and most importantly, all of this has to beachieved in a language-, grammar- and formalism-independent way 2.3 Des ign ing  Syn InL3.1 State  of the artThere is a main difficulty in the concept of planning-based generation systems which explains the monolithicnature of many systems described in the relevant lit-erature.
If a planner plans a particular type of syntac-tic structure in the absence of grammatical intbrmation,there is no guarantee that the structure specified will ac-tually be accepted by the grammar as being well-formed.There are basicMly two solutions to this problem.
One isto simply assume that the planner only specifies truc-tures from which it will be always possible to gener-ate.
This works perfectly when there are no interac-tions between structures pecified locally.
An exampleof a grammar formalism with this "locality" propertyis the context free languages.
However, for most mod-ern approaches to grammar (including Government andBinding theory (GB) and all unification-based grammarformalisms), the locality property does not hold.
In thiscase, we have to assume that the grammar is "looseenough" that anything we might plan can in fact be gen-erated despite any interactions.
Such a planning could1To determine whether two syntactically distinct InL ex-pressions are logically equivalent under laws such as commu-tativity and associativity is factorial in complexity.2Language independence must be viewed as language in-dependence r garding French, English and German.388be done deterministically.
Itowever, using ~his al,proachsuch a planner would always run the risk that it wouldfail to geuerMe due to inconsistencies with the grammar.
'\]'he second solution is to interle~rve planning and generation and allow the possibility that failure to generMe,results in different planning choices.
Snch systems alsoexist, although they seem to be comparatively recentin the literature.
We (lid not investigate this possibilitysince it requires a fairly tight integration of planner and(grammar and formalism specific) generator which scemsinconsistent with our requirement th~tt we generate withthree languages and two grammar formalisms.3.2 Descr ip t ion  of  our  aI)I)roachOur solution is to attempt an independent level of syn-tactic representation which abstracts away from the pe-culiarities of the surface syntactic structures of particularlanguages and deals directly with syntactic notions whichare language~indcpendcnt.
Whether one thinks that thisis possible, depends to a large degree on one's particulartheoretical perspective.What might sucl, an "abstract" syntactic representa-tion look like'."
There are several related concepls in di-terse linguistic theories which salisfy the criteria.
Themost directly related concept is lhat of l)-struelure in(~1~.
l)-strncture is a lew~l of syntactic struct.ure whichmirrors semantic funcl.or-argun~e~lt strnctnre directly(via the 0.-eril.erion and lhe l)rojeclion Principle) andwhich is also relaled io surface syntactic structure 1)ythe rule of M,,,,e-a, a lransformation that nloves COll-!
:liluenls fronl oue position Io anolher, l~elaled IlOiiOllsof sirltctnl'o which Captllre the relation belwc(,n Selllal/-l ic funtl.or-argllillellt slrncture (or predicate-arglmlentsirueture) and "abstract" or "deep" syntactic sirnclnreare tile f-s|r l lc l / Ircs of LI.
'C, and the.
grammalical funclionhierarchy-based accounls of subcategorisalion i  ltPSGand t'CG.
All of lhese have the desiraMe pfoperiy thati.
}ley express a level of representation which relate sub-eategorisatJ(qt, s(:ilianties and snrfac(!
slruelllr('..Ply using such represenlations whic'h arc hypothesized lobe 'qinguislically .niversat" t()ass()ciate parlial seman-!ic representations wilh abstract syntaclic constituents,we also solve t}|e ol, ller requirements mentioned above.\[:'irst, most instances of noncanonicity are elimina.ted be-<ause sul)-formulas are associated ireetly with syntacticconstiiuents..Second, quantifier scope readings are elim-inated fi'om consMeration at this level of representation.
'Fhird, since the level of representation is taken to beltniversal, the,'e are language-dependent maps from therepreserttation to surface syntactic structure.3.3 SyIl lnI,  descr ip t ion' \ [ ' l ie  al)|)l'Oac\]l Lakell \]lcre is to encode synla<:tic strnc-| ure in ierm.,; of sc:hematie X theory familiar fl'om moslluodern generative gra.lnlllar fOI'H|&\]iSIlIS.
As mentionedabove, this is most similar to D-structure i ,  cm t\]mory.~:;ynlnL expresses both syntactic and semantic inibrma-I ion.Idealizing considerably, SynlnL formulas consist of fourtypes: heads, complements, modifiers and specifiers.
Thiscorresponds directly to the stamtard constituent types intheory.
(We follow LI.'?
; f-structure and UCG subcate-gorisation structnre in treMing subjects as ordinary com-I,lements raLher l\],an spe(:ifiers of clauses).
These four(alegories are Meal for attaining a level of language-i,del)cndence in liiIgnistie description and are general(:,tough lhat it is reasonable to expect hat such X repre--s(mtations cant be mapped onto lallgl;age-depcn(lent sux'-face syllla(:Iic slrllCl.llres.The idea then is Io encode this )( struct,lre in Synlttl,formulas.
SpeciJiers in Synlnl, are of tile general Ibrm:spec i f ie r  (Semantics, tfead)\] 'hat is, they specify their own semantics and the prop-erties of their head.Heads are of the general form:head(Semantics,  / t rgL ist ,  hdjunc'tList)That is, they specify their own head semantics and a lisIof arguments and adjuncts which are also either specifieror head structures.All of these struclures also allow the encoding of syntac-tic requirements on arguments and adjnncts.
IIowever,there is no indication of either surface syntactic order ofthe complements and adjuncts or of the relative scopeof quantitiers occurring in either complements or mod-ifiers.
Tile language generators are free to realize bothscope and surface syntactic structure in any way whichis consistent with the SynlnL specification.ttow is this augmented representation built ?
The parsersproduce nnresolved lnL.
This InL contains enm~gh syn-tactic infm'mation for a uniqne mapping into an equiv-alent SynlnL expression.
This mapping is done by theInL -~ SynlnL module.C, iven av Inl, expression, it distinguishes between struc-lural and prime predicales.
For prime predicates there isahva.ys a real)ping into a SynlnI, formula with a uniquecategory.
The structural predicates then determine howto merge the Synlnl, formnlas which replace the origil!
:dparlial InL expfession.4 The  Phmning  Component'Fhe role of the planning component is to produce SynInLexpressions from which phrases can be generated by lhelangnage specilic generators and lo decide whether anyobjects on the screen have to be highlighled.\Vithin ACOIlD, the planner gets as input lhe Synlnb ex-pression corresponding to the user question (yes/no rifles -tion, wh-queslion or 'how mnch'/ 'how many'-question)and the KB answer, q'he planner output consists of anoptional canned texl marker and the Synl.
L of the an-swer Io be generated.The planner uses three snb-planners i'or planning verbphrases, NPs and modificalions.4.1 Arch i tec ture  o f  the generatorThe answer process consists of the following steps:e The question is parsed.
The output is the InL rep-resenta.tion of the question with informalion forresol, tion.
* This InL expressiof is transformed into SynlnL bythe Ill l, --~ SynlnL module a.nd also resoh, cd usingthe occurrence inh)rmation by the resolver.
Theresolver provides the generator with informationwhich encodes the user's qnestion as vnderstoodby Ihe system.?
The resolved lnL is passed on to tile KB whichprovides the KB answer., The planner module takes as input the SynlnL ex-pression of the query and the KB answer.
Depend-ing on the.
type of questions asked, the plannermakes decisions uch as: what kind of canned textprefix is needed, what type of NP planning is nec-essary, what ldnd of answer is expected and whattype of processing ca.n be done on lids answer.
Itcalls the NP sub-planner in order to process all theNPs appearing i~ the queslion, as well as the \[~I~answer which is trans\[brmed into an appropriateSyn\[n L cx pression (generally an N 1').
'l'he ou \[pHt389of the planner is a SynlnL representation f theanswer.?
The SynInL answer is the input to the languagespecific generator of the current language.
The se-lected generator produces the final answer.4,2 P lann ing  the S t ructure  of Verb PhrasesWithin the ACOIID lexicon, verbal predicates may onlytake arguments which refer to objects.
This means thatwe do not do any planning for arguments which denoteevents or states, i.e., verbal or sentential complements.Consequently we only distinguish between two types ofpredicates: the copula, which only takes a subject and anoun phrase or PPS as complement, and all other verbs.Other active verb forms take either one, two, or threearguments.
The first argument always corresponds to thesubject (in an active clause), the second to the object ora prepositional complement, and the third to the secondobject or a prepositional complement.Given ~ list of arguments, the verb planner calls the NPplanner on each argument, providing information relativeto the function of the argument position under scrutiny,its posilion in the argument list, and the subject of thesentence in which the argument occurs.
'\]?he list of modifications of the original query (if any) isprocessed last.
For each element of this list a call to themodification sub-planner is made.4.a P lann ing  Noun PhrasesThe planning component is responsible for providingthe best expression for Nes.
It nses the dialogue historyas well as I,:B knowledge to decide whether to adopt apronominalization strategy, or find a non-pronominal de-scription for the NP under analysis.The NP planner must be provided with enough informa-tion to decide whether and which kind of pronominal-ization is allowed, and whether a name coukl be usedinstead of a pronoun where such an option is available.It mnst also decide when to use demonstratives, definiteor indefinite articles, and whether a complex descriptionshonh\[ include relative clauses and adjuncts.
In addition,our planner has to decide which objects should be high-lighted on the screen.
'l~o do so, the NP planner needs a fully specified iscoursereferent and information about the syntactic environ-ment of the NP to be produced.The output of the NP planner is a fully specitied SynInLexpression, a possible extension of the list of objects tohighlight on the screen, a possible xtension of the list oflocal antecedents, and a possible change of the informa-tion corresponding to the answer in the event that theNP planner has produced the NP for the answer.4.4 P lann ing  modi f icat ionsModiftcations appear either in the context of a verb orin  the context of an NP.
They express negation, Pps, rel-ative clauses, adjectives and adverbs.
The modificationplanner is currently handling relatives and PPS.In the case of a relative clause, the identifier of the objectof the verb is set to the NP discourse referent, and theverb planner is called.In case of a Pp with exactly one argument, if this argu-ment is in the focus of a wh-question, the I,:B answer hasto give both the internM name and the new argumentof the preposition.
If the answer is no, the planner fails,since we currently don't have a semantic definition forthe various Pp negations like 'nowhere' or 'never'.
Theoverall result is then the canned text I don't know.
Oth-erwise there is in generM a list of adjunct-argument pairs.For each pair a Y';ynInl, expression for the preposition isgenerated, calling the planner recursively on the argu-ment (pronominalization is ot allowed in the context ofa PP).
If there is more than one pair in the list, a pP co-ordination is initialized and reduced as will be explainedbelow.Coordinated PPS are allowed to appear in a.nswers.
A listof SyninL expressions for l'ps can be reduced, if the samepreposition is used more than once, and the prepositionalarguments are not demonstrative pronouns.
The result-ing ,CjynfnL expression contains the common preposition,and art NP coordination corresponding to the argumentsof the tbrmer SynInf, expressions.
The NP coordinationthen can also be reduced as described in \[4\].5 Conc lus ionGeneration i  ACORD demonstrates how planning can bedone for several languages with a minimum of language-specific information.
The basis of our approach is theconcept of SynInL which encodes language-independentsyntactic information in addition to semantic informa-tion.
A SynlnL expression can be deriwtted from an InLexpression using a deterministic process.Language-specific dependencies are still necessary con-cerning gender and the syntactic function of NPs.
q'heycould be reduced further by adopting a slightly differentarchitecture concerning the interelation of the generatorand the resolver.Re ferences\[1\] Kamp,  H. \[1981\] A Thcorg o.f Truth and SemanticRepcesc~tation, I : Groenendijk, J.A.
ct. al.
reds.
),Formal Semantics in the Studg of :Vctluc~d Language,Vol.
I, Amsterdam \[98t.\[2\] Kamp,  H. and  Reyle, U.
\[1990\] From Discourseto Logic.
Reidel Dordrecht, to appear.\[3\] Kohl ,  D. \[1988\] Gcne,'ierung .fu~ktionalcr Strnk-turcn aus einer .~emct~tischc~ \[ cprd'sentatio~.
I)\[-plomarbeit, Institut fiir \[nformatik.
UniversitiitStuttgart.\[4\] Kohl  D., Plainfossd A,, Reape M., GardentC.
\[1989\] Text Generation from ._qcma~tie t~cprc-sentatiort.
Acord deliverable T2.1 (I\[5\] Momma,  S. and  Dbrre,  J.
\[1987\] Generationfrom f-structures.
In: E. Klein and J. van Benthemreds.)
Categories, Polgrnorphism and Unification,(?entre for Cognitive Science, University of Edin-burgh.\[6\] Reape,  M. and  Zeevat,  H. \[1988\] Generationand Anaphora Resolution.
Manuscript.
Centre forCognitive Science, University of I~dinburgh.
In: hr-stitnt ffir Maschinelle Sprachverarbeitung reds.)
Ez-tensioT~ of the At~aphora P, esohdion.
ACORN (P393)Report 'I'l.7'b, Universit/it Stuttgart, March, 1989.\[7\] Zeevat,  It .
red) \[1988\] Specification of the Cen-tral Pronoun I~esolver, .a.CORD Deliverable T1.7'(a).Stuttgart 1988.\[8\] Zeevat,  H. \[1986\] A ,S'pccification 4 hal,.
InternalACORD Report.
Centre for Cognitive Science, Edin-burgh 1986.\[9\] Zeevat It., K le in,  E. and  CaMer,  a.
\[1987\] AnIntroduction to Unification Categorial Grammar.In: Haddock, N..J., Klein, E. and Morril, G.
reds.
)Edinbm'qh Wor~qn9 Papers in Cognitive 5'ciel~cc,Vol, l: Categorird Grammar, Unificcttion Grammarand Pc~rsin 9.390
