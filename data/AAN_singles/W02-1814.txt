Extracting Pronunciation-translated Names from ChineseTexts using Bootstrapping ApproachJing XiaoSchool of Computing,National University of Singaporexiaojing@comp.nus.edu.sgJimin LiuSchool of Computing,National University of Singaporeliujm@comp.nus.edu.sgTat-Seng ChuaSchool of Computing,National University of Singaporechuats@comp.nus.edu.sgAbstractPronunciation-translated names (P-Names)bring more ambiguities to Chinese wordsegmentation and generic named entityrecognition.
As there are few annotatedresources that can be used to develop a goodP-Name extraction system, this paperpresents a bootstrapping algorithm, calledPN-Finder, to tackle this problem.
Startingfrom a small set of P-Name characters andcontext cue-words, the algorithm iterativelylocates more P-Names from the Internet.The algorithm uses a combination ofP-Name and context word probabilities toidentify new P-Names.
Experiments showthat our PN-Finder is able to locate a largenumber of P-Names (over 100,000) from theInternet with a high recognition accuracy ofover 85%.
Further tests on the MET-2 testset show that our PN-Finder can achieve aperformance of over 90% in F1 value inlocating P-Names.
The results demonstratethat our PN-Finder is effective.1 IntroductionPronunciation-translated names (P-Names) arethose foreign names that are translated to Chinesecharacters according to their pronunciations.
AP-Name sometimes forms part of but not acomplete named entity.
For instance, in the placename ??
(Berkeley University), onlythe term ??
(Berkeley) is a P-Name, while??
(University) is not since it is translatedsemantically.The ability to recognize P-Names helps to reduceambiguities in word segmentation and improve theperformance of Chinese information retrievalsince many unknown words are P-Names,especially for international Chinese news.
UnlikeEnglish, there is no blank between words inChinese, in which a word is a linguistic tokenconsisting of one or more characters.
In addition, thesame characters may appear in multiple context withdifferent meanings (Chua and Liu, 2002).
Thepresence of P-Names brings more ambiguities toChinese word segmentation since every character ina P-Name can be used as a common character.Intuitively, we can extract the P-Names based on thedistinctive sequence of characters that they are  usedas compared to common words.
In addition, we canuse local context around the P-Names to confirmand classify them into person or part of location andorganization names.
One way to perform these taskseffectively is to rely on statistics derived from alarge corpus in which the P-Names are annotated.While some annotated corpuses with general namedentities are available such as the PKUC (Yu, 1999)and MET-2 (Chinchor, 2001), there is no suchannotated corpus for P-Names.
While annotated datais difficult to obtain, un-annotated data is readilyavailable and plentiful, especially on the Internet.
Totake advantage of that, we need to tackle two majorproblems.
The first is how to gather sufficientdistinct P-Names from the Internet, and the second ishow to use the available resources to derive reliablestatistical information to characterize the P-Names.The problem of gathering sufficient reliableinformation from a small initial set of seed resourceshas been tackled in bootstrapping research forinformation extraction (Agichtein and Gravano,2000; Brin, 1998; Collins and Singer, 1999;Mihalcea and Moldovan, 2001; Riloff and Jones,1999).
Bootstrapping approach aims to performunsupervised text processing to extract informationfrom open resources such as the Internet usingminimum manual labor.
Given the lack of annotatedtraining samples for P-Name extraction, this paperintroduces a bootstrapping algorithm, calledPN-Finder.
It starts from a small set of seed samples,and iteratively locates, extracts and classifies thenew and more P-Names.
It works in conjunctionwith a general Chinese named entity recognizer(Chua and Liu, 2002) to extract general namedentities.In the remaining parts of this paper, we describethe details of PN-Finder in Section 2 and itsapplication in locating P-Names from newdocuments in Section 3.
Section 4 presents theexperimental results using the MET-2 test corpus.Section 5 contains our conclusion and outline forfuture work.2 Bootstrapping Algorithm for LocatingP-NamesCurrently, there is no standard corpus thatannotates all P-Names.
Since annotating thousandsof P-Names is more difficult than collectingthousands of P-Names from the Internet, we recurto using the Internet search engine to collect alarge set of P-Names.
Figure 1 illustrates our maincomponents in bootstrapping process.Figure 1: Main components of the bootstrappingThe inputs to the PN-Finder are:a) A seed P-Name character set Cs(0) consisting of5 characters {??, ??, ??, ?
?, ??
}.b) A set of seed context cue words CW(0)consisting of 60 context words, such as{?NULL?, ?
?, ?
?, ??, ??, ??
}.These are typical context words found aroundperson, location and organization names inPKUC1 (the PoS Corpus of Peking University),which contains one month of news from thePeople Daily.c) A set of P-Name candidates P(0), which is null atthe beginning.d) A common word dictionary extracted fromPKUC by removing proper nouns, numbers andnon-Chinese symbols.
It contains about 37,000words.1http://icl.pku.edu.cn/Introduction/corpustagging.htmFrom the initial seeds, we perform the followings:a) We use every two characters in Cs(i-1) as query toretrieve relevant web pages from the Internetusing a commercial search engine.
We thenextract possible P-Names from the returned webpages to update P(i).b) We find a most probable new P-Name character.Update Cs(i-1) to Cs(i) by adding the new character.c) We bootstrap new context words around the newP-Names found to derive CW(i).
We then performthe lexical chaining to generalize these contextwords to generate semantic classes.d) We repeat the process from step (a) until any ofthe following conditions is satisfied: (i) when nonew P-Name is found; (ii) when the desirednumber of iterations is reached; or (iii) when thenumber of P-Names found exceeds a desirednumber.The following subsections discuss the details ofthe bootstrapping process.2.1 Querying and Extracting the P-Namesfrom the WebThe first step of the algorithm is to derive goodqueries from the character set Cs(m-1) to search theInternet to obtain new web pages.
If we use all singlecharacters from Cs(m-1) to perform the search, we arelikely to get too many pages containing irrelevantinformation.
As a compromise, we use every twocharacters cicj in Cs(m-1) (except those combinationsthat have been used in the previous iterations) tosearch the Internet using Google (by using itslanguage tool2).
We consider only up to 300 entriesreturned by Google.
We divide the content of theweb pages into text segments by using thenon-alphanumeric characters as delimiters.
Weextract those text segments that contain the searchcharacters ci, cj or both and store them in R(m).
Forexample, from the web page given in Figure 2, thetext segments extracted include: strings ??
and ??
from the firstentry; and strings ??, ? !"#$%&'(?
and ?)
*+?
from the second entry.Given R(m), we next extract the possible P-Names.Firstly, we segment those entries in R(m) byperforming the longest forward match using thecommon word dictionary.
We then remove all2http://www.google.com/intl/zh-CN/Seed P-Name charactersSeed context cue wordsWebpagesP-Names Generate new P-Name charactersAnd new context cue wordsSearch EngineSearch EngineEvaluateStringMatchnon-Chinese letters and common words containingmore than one character.
From the remainingstring segments in R(m), we locate all sub-stringswith atFigure 2: A web page returned by Googleleast 2-character in length and contain the queryterms ci, cj or cicj.
We extract those sub-strings thatappear at least ?n (we use 3) times as P-Namecandidates by string matching.
We store the newP-Name candidates found in P(m-1) to obtain P(m).For example, if we use ?
,?
obtained from Cs(0)as query to Google, among the returned entries, wewill have:?()()()???()()()?
?(WTO)()()()??
?()( )???!"(#$)?
?Here the bracketed words are common words orEnglish letters and they are removed from stringmatching.
The sub-string ?,?
appears5 times and it is matched as a possible P-Name.2.2 Deriving New P-Name CharactersGiven the set of P-Name candidates in P(m), wenext use both the context words and corpusstatistics to confirm the P-Name and extract newP-Name characters.2.2.1 Classifying P-NamesFrom observation, context information is useful tocomfirm a P-Name and determine its left and rightboundary.
Thus we use one-word context to confirmand classify P-Name candidates into person namesor part of location or organization names.
For eachcontext word wc in CW(m), we first compute itsprobability vector of occurrences, PV(wc), aroundperson, location and organization names in PKUC asfollows:( ) , , , , ,c p p l l o oPV w c c c c c c?
+ ?
+ ?
+=< >  (1)where: ( ) xx cp l onc wn n n+++ + +=+ +(1.1)olpxcxnnnnwc????
?++=)(  (1.2)Here x?
{p, l, o}, and n-p ( or n+p), n-l (or n+l), n-o (orn+o) respectively give the number of times wcappears at the left (or right) boundary of person (p),location (l) and organization (o) names in PKUC.
c-x(or c+x) gives the probability that the P-Name is oftype x, if this cue-word is at the left (or right)boundary of the P-Name.Given a P-Name candidate pk(m) in P(m), we extractthe set of its left and right context words as Wcl andWcr.
We then derive the average probability vectorsof Wcl = <cl-p, cl+p, cl-l, cl+l, cl-o, cl+o> and Wcr = <cr-p,cr+p, cr-l, cr+l, cr-o, cr+o>, and use these to compute theconfidence vector of pk(m) as:( )( ) , ,mk p l oCV p c c c=< >    (2)where cp=cl-p+cr+p, cl=cl-l+cr+l, co=cl-o+cr+o.
Here wesimply average the probabilities of the left and rightcontext words to derive the final probability vector.We assign pk(m) to be part of a named entity of type x,if cx ?
?p for x?
{p, l, o}.
Here we set ?p to be 0.8.
Incase that there are more than one value greater than?p, we select the one with the highest value in thetype vector as the type of that P-Name.2.2.2 Evaluating P-NamesWe next derive an objective measure to evaluatehow likely a candidate in P(m) could be a P-Name.We observe that a string is likely to be a P-Name if:(a) it contains some sub-strings that frequentlyappear in typical P-Names such as ??, ??,??, etc; and (b) it has context words in CW(m-1) setthat indicates that it has high probability of beingpart of a named entity.
Thus for each P-Namecandidate pk(m) (pk(m)=c1c2?cn) in P(m), we compute:)(/)()( )(2)(1)( mkmkmk psMpsps ?+= ?
(3)1 2( ) 2 31 1 1 21 1 1 1 1 1( ) ( ) ( ) ( )n N n N n Nmk j i j i i j i i ii j i j i js p n c n c c n c c c?
?
??
?+ + += = = = = == + +?
?
?
?
?
?
( )2 ( ) m ax( , , )mk p l os p c c c=                                    (3.2)where n is the number of characters in pk(m), and Nequals |P(m)|.
nj(ci), nj(cici+1) and nj(cici+1ci+2) arerespectively number of times the character stringsci, cici+1 and cici+1ci+2 in pk(m) also appear in otherP-Name candidates in P(m).
?
and ?
are predefinedconstants (here we use  ?
=0.5 and ?
=1.5).Equation (3.1) gives higher weight to pk(m) that hasbetter match with longer string sequence of, say,cici+1ci+2 with other known P-Names candidates.Equation (3.2) selects the highest confidence valueof context words around pk(m) as support for pk(m).As s1 and s2 are of different scales, we normalize s1by dividing it by M, the maximum s1 values foundin the current iteration, before fusing the twovalues in Equation (3).2.2.3 Generating New P-Name CharactersSince we would like to obtain more new P-Namesduring bootstrapping, in each iteration, we wouldlike to expand the P-Name character set.
In orderto select the most likely P-Name characters, wederive a quasi-probability, Conf(ci(m)), to estimatehow likely a character ci(m) in the P-Namecandidate set P(m) could be used as a P-Namecharacter.
To do this, we make use of both thePKUC corpus and P(m).
We observe that mostcharacters in P(m) also appear in the PKUC corpus,sometimes as P-Name characters sometimes ascommon characters.
Thus, intuitively we estimateConf(ci(m)) by its occurrences in both PKUC andP(m) as:( )( ) ( )11( )1( )( ) l n ( ( ) )( )cccNmk Nm mki kN kmk n e gks pC o n f c s ps p N===?= ?
?+?Here we assume that there are Nc P-Namecandidates in P(m) that contain ci(m); and Nneg is thenumber of times that ci(m) is used assingle-character word in PKUC.
Equation (4) aimsto identify characters that appear frequently as partof P-Names, but rarely as part of common words.It also favors characters that appear in moreprobable P-Names through the s(pk(m)) measures.Although Equation (4) is effective in identifyingindividual P-Name characters, it is not good atlocating the sequences of P-Name characters thatform the P-Names.
This is because there are manycharacters that have low Conf(ci(m)) values that arepart of a P-Name.
For example, in a P-Name ??, the character ??
has low confidence to be aP-Name character as defined by Equation (4).However, it co-occurs with high confident P-Namecharacters such as ??
and ??.
To overcome thisproblem, we modify the confidence value of eachcharacter by considering its neighbors (context) toderive a smoothed confidence measure in Equation(5).)}(),(max{)()(1)(1)(+?
??
?+=+?icBicBiicConfecConfecConfcSConfii?where ?
is a predefined constant (we use ?
= 1),and)()()(;)()()( 11iiiiiiiicCccCcBcCccCcB ?
?++ == .Conf(ci) is defined in Equation (4); C(ci) and C(cicj)is respectively the co-occurrence of characters ci andcicj in the P-Name set.
Equation (5) tries tosupplement the confidence of ci by its context, thatis, it uses the higher of the bi-gram statistics with itspreceding and succeeding word to enhance itsconfidence.
We rank all the characters in P(m) usingEquation (5) and add the top new character intoCS(m-1) to obtain CS(m).2.3 Deriving New Context WordsIn addition to finding new P-Name characters, thereis also a need to expand the context word set CW(m-1)in order to help identify more P-Names.
Asmentioned before, if at least one of cp, cl, co values ofa P-Name candidate in Equation (2) is greater than athreshold ?p, we regard it as part of a named entity.For these P-Names which could be possible part ofnamed entities, the following steps are performed:a) We retrieve all their context words in R(m).b) We add all new context words  to form CW(m).c) We update probability vectors of the new contextwords using Equation (1).d) We group these context words under the categoryof c-x or c+x (for x?
{p, l, o}) if their probabilitiesunder that category is greater than a threshold ?g(say, 0.5).e) We then perform lexical chaining using HowNetto generalize the context words under each of the6 categories separately.
The general lexicalchaining algorithm is given in detail in Chua andLiu (2002).
(3.1)(4)(5)f) After lexical chaining, some semanticallyrelated words are grouped together.
We updatethe confidence vectors of the semantic groupsby averaging the confidence values of words ineach of the semantic groups.At the end of this process, we obtain a new set ofcontext word CW(m) which contains somegeneralized context word classes.3 Identifying P-Names from New TextsAt the end of the bootstrapping process, we obtainexpanded lists of likely P-Name characters Cs(m),context cue words CW(m) and P-Names P(m).
Givena new document, we want to use these resources toidentify all P-Names.
The process is carried out asfollows:a) We first use our common word dictionary toremove all common words.b) Next we use knowledge of P-Name candidatesand corpus statistics to identify a sequence oflikely P-Name characters.
Any sub-string inwhich the Sconf(ci) (see Equation (5)) of eachconsecutive character in that string  is greaterthan a pre-specified threshold ?c (we use 5) isconsidered as a P-Name.c) A frequently occurring problem during testingis how to handle new characters not found inthe Cs(m) set that we do not know theirconfidence values.
Such problem occurs as asame foreign name may be translated todifferent P-Names with similar Chinese PinYin.For these characters, we adopt the similarhomophone approach to relate unknowncharacters to the known characters in Cs(m) setwith similar Chinese PinYin.4 EvaluationWe devise several tests to evaluate our extractionscheme with bootstrapping.
We use the MET-2test corpus for two of the tests, and PKUC as basiclanguage resource to support the process.
We usePKUC to extract common word dictionary, whichconsists of about 37,000 words.
We also usePKUC to extract and evaluate typical context cuewords around person, location and organizationnames.
Our experiments start from a ?seed?P-Name character set:Cs(0) = {??, ??, ??, ??, ?
?
};and a set of 60 context cue words.4.1 Obtaining P-Names from the InternetWe perform the bootstrapping process as discussedin Section 2 to extract P-Names from the Internet,and stopped after about 650 iterations.
We manuallycount the number of correct P-Names obtained at theend of every 65-iterations.
We also use the first100,000 P-Names found at the end of thebootstrapping process as the ground truth tocompute the accuracy of P-Name identification.Figure 3 presents the results of the P-Nameextraction process.
From the figure, we can see thatas we increased the number of iterations, the numberof P-Names obtained also increased proportionally.This demonstrates that our bootstrapping process isconsistent.
We also observe that the system is able tomaintain a high accuracy of over 85% even when thenumber of P-Names found approaches 100,000.This demonstrates that our method is effective.00.10.20.30.40.50.60.70.80.9165 130 195 260 325 390 455 520 585 650Accurracy020000400006000080000100000Num.ofP-NamesAcccuracy P-NamesFigure 3: Obtaining P-Names with Bootstrapping4.2 Extracting P-Names from MET-2 setWe use MET-2 test corpus to test the effectivenessof our approach to identify P-Names from new textsas discussed in Section 3.
We consider a P-Name ascorrectly extracted only when every of its characterare correctly identified.
The results are presented inTable 1.
The results show that we are able to achievea recall of over 95% and precision of close to 90%.The results are encouraging as we did not use thetraining resource of MET-2 corpus to train thesystem, which is expected to lead to higheraccuracy.Table 1: Results of P-Name extraction from MET2Actual # System Nc Np Nm Ns Rc Pr457 491 437 20 0 34  95.6% 89%Nc = number of P-Names correctly recognized.Np = number of P-Names partially recognized.Nm = number of P-Names missed.Ns = number of P-Names found but not in the annotated list.Recall (Rc) = Nc/(Nc + Np + Nm);Precision (Pr) = Nc /(Nc + Np + Ns).As a by-product of the PN-Finder, we obtained alarge set of context words.
We found that we canuse these context words to correctly classify about25% of the extracted P-Names in MET-2 test setinto person names or part of location ororganization names using the method described inSection 2.2.
The employing of context words toclassify P-Names is mainly to confirm moreP-Names and P-Name characters.4.3 Contributions of PN-Finder to aGeneric NE Recognition ModuleThe most important contribution of PN-Finder isthat it can be used to improve the performance of ageneric Chinese named entity recognizer asdiscussed in Chua and Liu (2002).
Here, weconducted several trials by using the PN-Finder toextract a different number of P-Names.
We use thefirst 100,000 P-Names found by the PN-Finder,together with the pattern rules in the generalnamed entity recognizer, to conduct a baseline test.This test merely performs direct table look-up tolocate all possible P-Names.
Table 2 lists theperformance of the general NE recognition systemby using an increasing number of P-Names foundby the PN-Finder, together with the use of theconfidence statistics, context words obtained fromthe current sets of P-Names and pattern rules.
Theresults indicate that as we increase the number ofP-Names found by the PN-Finder, the performanceof the general NE recognition system is improvedsteadily until it reaches over 92% in average F1value.Table 2: Contributions to general NE recognition# of P-Names used Ave F1100,000 (baseline) 71.340,000 88.960,000 90.580,000 91.7100,000 92.35 Conclusion and Future WorkThe presence of P-Names brings more ambiguitiesto Chinese word segmentation and generalChinese named entity recognition.
However, thereis a dearth of annotated corpus for extracting andclassifying P-Names.
To cope with the problem ofsparse training resources, this paper presents abootstrapping module to identify P-Names andclassify them into parts of named entitites ifpossible.
The PN-Finder could also contribute togeneral Chinese named entity recognition andachieve promising performance on the MET-2 testcorpus.Currently, we use only a single word as the context,more context could be considered in the futureresearch.
We also aim to extend this method toextract organization names from Chinese documentsobtained from the Internet.ReferencesAgichtein E. and Gravano L. (2000).
Snowball:Extracting Relations from Large Plain-TextCollections.
Proceedings of the 5th ACM InternationalConference on Digital Libraries.Brin S. (1998).
Extracting Patterns and Relations fromthe World Wide Web.
WebDB Workshop at 6thInternational Conference on Extending DatabaseTechnology, EDBT?
98.Chinchor A. Nancy (2001).
Overview of MUC7/MET-2.available at:http://www.itl.nist.gov/iaui/894.02/related_projects/muc/proceedings/muc_7_proceedings/overview.htmlChua T.S.
and Liu J.M.
(2002), Learning Pattern Rulesfor Chinese Named Entity Extraction.
To Appear inAAAI?02.Collins M. and Singer Y.
(1999).
Unsupervised Modelsfor Named Entity Classification.
In Proceedings of theJoint SIGDAT Conference on Empirical Methods inNatural Language Processing and Very Large Corpora.Liu J.M.
and Chua T.S.
(2001), Building semanticPerceptron net for topic spotting, In Proceeding ofAssociation for Computational Linguistics 39thAnniversary Meeting, 306-313Mihalcea F. R. and Moldovan I. D. (2001)  A HighlyAccurate Bootstrapping Algorithm for Word SenseDisambiguation.
International Journal on ArtificialIntelligence Tools.
Vol.10, No 1-2(2001).
pp.
5-21Riloff E. and Jones R. (1999)  Learning Dictionaries forInformation Extraction by Multi-Level Bootstrapping.In Proceedings of the Sixteenth National Conference onArtificial Intelligence, pp.
1044-1049.Yu S. (1999), The Specification and Manual of ChineseWord Segmentation and Part of Speech Tagging,available at:http://www.icl.pku.edu.cn/Introduction/corpustagging.htm
