PARSING WITH LOGICAL VARIABLESTimothy W. Finln and Martha Stone PalmerDepartment of Computer and Information ScienceUniversity of PennsylvaniaPhiladelphia, PA 19104ABSTRACTLogic based programming systems have enjoyedan increas ing  popu lar i ty  in app l ied  AI work in thelast few years.
One of the  contributions toComputational Linguistics made by the LogicProgramming Paradigm has been the Definite ClauseGrammar.
In comparing DCG's wlth previous parsingmechanisms such as ATN's, certain clear advantagesare seen.
We feel that the most important of theseadvantages are due to the use of Logical Variableswith Unification as the fundamental operation onthem.
To illustrate the power of the LogicalVariable, we have implemented an experimental ATNsystem which treats ATN registers as LogicalVariables and provides a unification operation overthem.
We would llke to simultaneously encouragethe use of the powerful mechanisms available inDCG's, and demonstrate that some of thesetechniques can be captured without reference to aresolution theorem prover.\ [ .
IntroductionLogic based programming systems have enjoyedan increasing popularity in applied AI work in thelast few years.
One of the contributions toComputational Linguistics made by the LogicProgramming Paradigm has been the Deflnite ClauseGrammar.
An excellent introduction to thisformalism can be found in \[Perelra\] in which theauthors present the formalism and make a detailedcomparison to Augmented Transition Networks as ameans of both specifying a language and parsingsentences in a language.We feel Chat the major strengths offered bythe DCG formalism arise from its use of Logicalvariables with Unification as the fundamentaloperation on them.
These techniques can beabstracted from the theorem proving paradigm andadapted to other parsing systems (see \[Kay\] and\[Bossie\] ).
We have implemented an experimental ATNsystem which treats ATN registers as Logicvariables and provides a unification operation overthem.The DCG formalism provides a powerfulmechanism for parsing based on a context freegrammar.
The grammar ruleS -> NP VPcan be seen as the universally quantified logicalstatement,For all x, y, and z :N'P(x) /\ VP(y) /\ Concatenate(x,y,z) -> S(z).where "x" and "y" represent sequences of wordswhich can be concatenated together to produce asentence, "S." Prolog, a progra~mulng languagebaaed on predicate calculus, allows logicalstatements to be input as Horn clauses in thefoilowlng (reversed) form:s(Z) <- np(X),vp(Y),Concatenate(X,Y,Z).The resolution theorem prover that"interprets" the Prolog clauses would take theoegatlon of S as the goal and try and produce thenull clause.
Thus the preceding clause can beinterpreted procedurally as, "To establish goal S,try and establish subgoals, NP, VP andConcatenate."
DCG's provide syntactic sugar on topof Prolog so that the arrow can be reversed and the"Concatenate" predicate can be dispensed with.
Thewords in the input string are looked atsequentially each time a "\[Word\]" predicate isexecuted which implicitly tests for concatenation(see figure \[).
DCG's allow grammar rules to beexpressed very cleanly, while still allowingATN-type augmentation through the addition ofarbitrary tests on the contents of the variables.Pereira and Warren argue that the DCGformalism is well suited for specifying a formaldescription of a language and also for use with aparser.
In particular, they assert that it is asignificant advance over an ATN approach on bothphilosophical and practical grounds.
Their chiefclaims are that:\[.
DCGs provide a common formalism fortheoretlcal work in Computational Linguisticsand for writing efficient natural languageprocessors.622.
The rule based nature of a DCG result %nsystems of greater clarity and modularity.3.
DCG's provide greater freedom in the range ofstructures that can be built in the course ofanalyzing a constituent.
\[n particular the DCGformalism makes it easy to create structuresthat do not follow the structure implied bythe rules of a conscltuenc and easy Co createa structure for a constituent thac depends onitems not yec encountered in the sentence.Fig.
1.
A DeflniCe Clauee Grammars(P) -> rip(X, P l ,  P),  vp(X, P t ) .The flrsC two points have been discussed inthe past whenever the ATN formalism is comparedwith a rule-based grammar (see \[PracC\] , \[Heldorn\], \[Codd\] , or \[Bates\] ).
The outcome of suchdiscussions vary.
I t  i s  safe Co say chat how onefeels about these points depends quite heavily onpast experience in using the two formalisms.We f ind the th i rd  po int  co be wel l  founded,however.
Ic i s  c lear  chac the DCG d i f fe rs  moeCfrom prev ious ru le -baaed pars ing  systems in iceinc lus ion  of Logical  var iab les .
These resu l t  ing reater  f lex ib i l i ty  in bu i ld ing  s t ruc tures  corepresent  const i tuents  that  do mot follow theInherent  s t ruc ture  determined by the ru lesthemselves.
They also allow one co createstructures which refer Co Items chac have not yecbeen discovered i n  the course of analysing thesentence.We have bu i l t  an exper imenta l  ATN system whichcan c res t  ATN reg is te rs  as Logical  var iab les  and,we fee l ,  capture  these important s t rengths  o f fe redby the DCG formalism in the ocherwlse standard ATNformalism.The second sect ion  g ives  a more deta i leddesctpCton of DCG's and presents  a s imple grammar.In the th i rd  sect ion  we show am ATN grammar whichi s  "equ iva lent"  to the DCC grammar and d i scuss  thesource of Its awkwardness.
The fourth section chertpresence an ATN formalism extended co includeviewing ATN registers as Logical variables whichare subject to the standard unlficacloa operaclon.The final section concludes this note and suggeststhat logical variables might be fruitfullyintroduced into ocher pars ing  a lgor i thms andsystems.rip(X, Pl, P) -> dec(X, P2, PI, P),n(X, P3),relclauee(X, P3, P2).rip(X, P, P) -> name(X).vp(X, P) -> tranev(X,  Y, P l ) ,  np(Y, P l ,  P).vp(X, P) -> tncransv(X,  P).re lc lause(X ,  PI ,  (And PI P2)) -> \ [ chat \ ] ,  vp(X, P2).re lc lauae(X ,  P, P) -> \[\],dec(X, Pl, P2, (ForAll X (-> P!
P2))) -> \[everyl.dec(X, P l ,  P2, (ForSome X (And Pt P2))) -> \ [a \ ] .n(X, (man X)) -> \[,u.\].n(X, (woun X) )  -> \[wom~.\].n(X, (dog X)) -> \[dog\].name(John) -> \[John\]name(mary) -> \[mary\]namI( f ldo)  -> \[fido\]transv(X, Y, (loves X Y)) -> \[loves\].transv(X, Y, (breaches X Y)) -> \[breathesl.Incranev(X,  ( loves  X) -> \ [ loves \ ] .lncransv(X,  ( l i ves  X).-> \ [ l i ves \ ] .incranev(X,  (b reathes  X) -> \ [b reathes \ ] .2.
Definite Clause GrammarsFigure \[ shows a simple DCG grammar adaptedfrom \[Perelra\] .
Figure 2 gives a sentence in thelanguage recognized by thls grammar together wlththe associated surface syntactic structure and thesemantic structure built by the grammar.F i  E ?
2 .
A Sentence,  S t ruc ture  and Representat ionSENTENCE"John loves every woman who breathes"The way in which unification produces theappropriate bindings for this example ls actuallyquite subtle, and requires a detailed analysis ofthe parse, as represented by the refutation graphin Figure 3.
For the the refutation graph theProlog clauses have been put into claueal normalform.
Some liberties have been taken with theordering of the predicates in the interest ofcompactness.In trying to establish the "s(P)" goal, the"np(X,Pt,P)" is first attempted.
The "PI" is anempty variable that is a "place-holder" forpredicate information chat will come from the verb.It will "hold" a place in the sentence structurethat will be provided by =he determiner.
"P" isdestined to contain the sentence structure.
TheSYNTACTIC STRUCTURE(S (NP (NAME john))(VP (TRANSV loves)(NP (DET every)(NOUN woman)(REL (VP (INTRANSV breathes)))))))SEMANTIC REPRESENTATION(ForAll XI (=> (And (woman XI) (breathes XI))(loves john XI)))63Pig.
3.
Refutation Graph- .
.~ /~ \ /  -np(X.Pt,e) \ /  -vp(X,et)"vp(X,Pt ) \ / 'np(X,P i ,P )  np(X.P,P) V - ~ , .
q .
.
~ ~  \ /  - \ [ john\]"vD(to~~.,~.~\/'transv(X,Y,Pt)\/-n ~ _ ~-np(Y,PL,P),/-transv(John.Y.Pl)~rnn.v(X-Y-love.
(X.Y~\/-\[Loves\]~'~l\]) flovesl \[ 1 -det(X,F2,PL,P)\/ nD(Y loves ~ohn Y) P \ /  loveqve -n(X'P3)\/relclause(X'P31P2)\/n~\[~\[__sry_\]\ / -det(X,Pi ,P2t(ForalX X ( >Pl P2))) -decCY.P2.Loves(iohn.Y).P)\// -n(Y,P3)\/-relclause(Y,P3,P2)(P is bound to "Forall Y(=>~ lo~s(john,Y))")\[ \] "\[woman\]\/-n(X,{woma~V'relclause(Y,P3,P2)\[woman\] "\[woman\]\/ -relclause(Y.
(woman Y).P2~ -vp(X,P2)\/ -\[that\]\/\ re l?
PL .0o)).
(PI is bound to "And-(woman Y) P2")//lause(x'PL'(Andintransv(X.~eathes(X~ -Int~'~nq.
(V:P2~~/  (P2 is bound Co "breathes(Y)")64first "np"  clause will be matched, but it willeventually fall since no determiner is present.The second "rip" clause will'succeed, having foreveridentified the contents of  "Pl" with the contentsof "P, " whatever they may be.
Since there  is nodeterminer in the first noun phrase, there is noquantification information.
The quantlflcatlonalstructure must be supplied by the verb phrase, sothe  s t ruc ture  fo r  the sentence  will be the same asthe s t ruc ture  fo r  the  verb  phrase .
The var iab le"X"  w i l l  be bound to " John" .In  t ry ing  co es tab l i sh  "vp( John ,P l ) ,  " thefirst "wp" clause w(ll succeed, since "loves" is atransitive verb.
It is important not  to get thevariables confused.
Within the "vp" clause ouroriginal "Pl" has been renamed "P" and and we havea new "PI" variable that will be Instantlated to"(loves John Y)" by the success of the "=canny"goal.
The "Y" I s  as yet  undetermined, but  we cansee that I t  will be supplied by the next"np(Y , ( loves  John ?)
,P ) "  goa l .
I t  shows greatfo res ight  on " t ransv 's "  par t  to pass  back avar iab le  in such a way that  i t  will cor respond to avar iab le  that  has a l ready  been named.
Th is  pat terni s  repeated  throughout  the  grammar, w i th  power fu l lrepurcuss lons .
I t  i s  even c learer  In  the  successof the "np(Y,(loves John Y),P)" goal, where thepresence of the determiner "every" causes "P" to bebound to(Fora l l  Y ( -> PI ( loves  John Y))This "P" is of course the "P" mentioned above whichhas been waiting for the verb phrase to supply Itwith a quantlflcatlonal structure.As the relative clause for this "up" isprocessed, the "PI" embedded in this structure,(our  second new PII), is eventually bound to "(And(woman Y) (breaches Y))" giving us the fullstructure:(Forall Y (-> (And (woman Y) (breaches Y))(loves John Y)))This is whac is returned as the binding to thefirst "Pl" in the original "vp(X,Pt)" goal.
Sinceour "np(X,P\[,F)" goal identified "P" wlth "Pl, "our "s(P)" goal succeeds with the binding of(Forall Y (=> (And (woman Y) (breathes Y))(loves John Y)))for "P" - the final structure built for thesentence .In following the execution of this grammar i tbecomes clear that very ~trong predictions are madeabout which parrs of the parse will be supplyingparticular ~ypes of information.
Determiners willprovide the quanClElers for the propositional~tructure of the sentence, the flrsc noun phraseand the noun phrase following the verb will be thetwo participants in ~he predicate implied by theverb, etc.
Obviously this is a simple grammar, butthe power of the logical variables can only be madeuse of  th rough the encod ing  o f  these s t rongl ingu is t i c  assumpt ions .
DCG's seem to prov ide ,  a=echanlsm we l l  qua l i f ied  fo r  express ing  suchassumptions and then executing them.
Coming upwith the assumptions in the first place Is, ofcourse ,  someth ing  of a major  task  In i t se l f .3.
Comparing DC and ATN GrammarsFigure 4 shows an ATN grammar which is the"equivalent" of the DCG grammar given in Figure t.The format used to specify the grammar is the onedescribed in \[flninl\] and \[finln2\] .
There areonly two minor ways that this particular formalismdiffers from the standard ATN formalism describedin \[WoodsY0\] or \[Bates\] .
First, the dollar signCharacter (i.a.
$) followed by the name of aregister stands for the contents of that register.Second, the function DEFATN defines a set of arcs,each of which is represented by a llst whose firstelement is the name of the state and whoseremaining elements are the arcs emanating from thestate.I n  add i t ion ,  th i s  example uses a very  s implelex ica l  manager in  which  a word has (1)  a set  o fsyntact i c  ca tegor ies  to  which It belongs (2) anoptional set of features and (3) an optional rootform for the word.
These attributes are associatedwith a word ualng the function LEX, which suppliesappropr ia te  default values fo r  unspecifiedarguments.In the standard ATN model, a PUSH arc invokesa sub-computatlon which takes no arguments and, ifsuccessful, returns a single value.
One canachieve the affect of passing parameters to asub-computatlon by giving a register an initialvalue via a SENDR register setting action.
Thereare two methods by which one can achieve theeffect of returning more than one value from asub-computatlon.
The values to be returned can bepackaged into a llst or the LIFTR register settingaction can be used to directly set values in thehigher level computation.
This grammar makes useof SENDR and LIFTR to pass parameters into and ouCof ATN computations and thus the actions of the DCCexample.Cons ider  what must happen when look ing  fo r  anoun phrase .
The representat ion  fo r  a NP w i l l  be apred icate  i f  the noun phrase  i s  indef in i te  ( i .e .
"aman" becomes (man X)) or  a constant  I f  the nounphrase is a name (l.e.
"John" becomes John).
inthis simple language, a NP is dominated by a eithera sentence (if it is the subject) or by a verbphrase (if It ts the object).
\[n either case, theNP also determines, or must agree with, the overalls t ructure  used to  represent  the dominat ingconstituent.
If the NP is a simple name, then Ltexerts no additional influence on therepresentation of its dominator.
If the NP is noca name, then It is indeflnice and will eventuallyresult in a quantified expression for thedominating sentence or verb phrase, in this casewe need to tell the dominating computation what thepredicate, quantifier, connective, and variablename must be.
In  th i s  ATN grammar, th i s  ts done b?hav ing  the NP network  re turn  a va lue  to  representthe NP predicate and llft values for thequantifier, connective and variable name.65Fig.
4.
An Equivalaut ATN Gra~ar?lOmq~V(defatn(s (push npt  (setr subj *) (to s /sub J ) ) )(s /subJ  (push vp t ( se t r  vp *)(sendr  subJvar $var) (to s /end) ) )(s/end (pop ( l i s t  $quanc $var( l i s t  $connect $aubJ $vp)) $subj)(pop gYp (null gsubj)))(np (wrd a t (liftr quant "ForSome)(llftr connect "And)(co np/det))(wrd every t (liftr quant "ForAll)(liftr connect "->)(to np/det))(cat  name t ( se t r  vat *) (to rip/rip)))(np/det  (cat  n t ( sect  var (gensym))( se t r  n (list * Svar)) (to np/n) ) )(np/n (wrd (who that which) t (to up/n/who))(Jump np/np t))(np/np (pop gn C ( l i f t r  var ) ) )(np/n/who(push vp t (sendr subJvar gvar)(serf n ( l i s t  "And gn *)) ( to np/np)))(vp (cat  v t ( se t rv  *) (co vp/v) ) )(vp/v (push np (getf trans Sv) (sect obJ *)(seCt objvar Svar) (to vp/vp))(pop (list gv $subjvar) (gaff lntrans $v)))(vp/vp (pop (list gquant $objvar(list $connect $obJ(list gv $subJvar $objvar))>$obj)(pop (flat $v gsubjvar $obJvar) (null $obJ)))~; (le?
<word> <category> <features> <rootform>)(lex man n)(lex woman n)(lax loves v (intrans crans))(lax breathes v (incrans trans))(lax lives v (Intrans))(lex john name)(lex mary name)(lex fldo name)66Similarly, when we are lookzn8 for a verbphrase, we must know what token (i.e.
variable nameor constant) represents the subject (if the verbphrase is dominated by a S) or the head noun (ifthe verb phrase acts as a relative clause).
Thisis done by sanding the subJvar register in thesub-computation the appropriate value via the SENDRfunction.
The techniques used to quancificatlonand build an overall sentence structure in chls ATNgrammar are similar co those used in th~ BBN LunarGrammar \[Woods72\] .This heavy use of SENDR and LIFTR cocommunicate between levels in the grammar makes theATN grammar cumbersome and difficult to unaerstand.In the next secton we investigate treating ATNregisters as logic variables and providing aunification operation on them.4.
Replacing ATN Registers with ATN VariablesAlthough the previous &TN grammar does theJob, it is clearly awkward.
We can achieve much ofthe elegance of the DCG example by treating the ATNreg is ters  as l og ica l  var iab les  and inc lud ing  aunification operation on them.
We will call suchregisters ATN Variables.Since our ATN variables must not be tamperedwith between unifications, assignment operationssuch as SETR, LIFTR and SENDR are precluded.
Thusthe only operations on ATN Registers are access andualfy.
I t  is possible to provide operations similarto the standard SENDR and LIFTR by definingunification operations which do the unification inthe another environment, but we have not exploredthese possibilities.The scheduler component of the ATN parser hasbeen modified to be sensitive to the success orfailure of attempted unifications, if aunification operation on an arc fails, the arc isblocked and may not be taken.Figure 5 shows a grammar in the extended ATNformalism.
A symbol preceded by a "$" representsan ATN Variable and "*" will again stand for ~hecurrent constituenE.
Thus in the state S in thegrammar:(S (PUSH NP (UNIFY "($SUBJVAR gYP $S) *)(TO S/SUBJ)))the parser pushes to the state NP co parse a nounphrase.
If one is found, it will pop back wi~h avalue which will then be unified wi~h theexpression (SSUBJVAR $VF $S).
If this unificationis successful, the parser will advance to stateS/SUBJ.
If It fails, the arc is blocked causingthe parser to backtrack into the NP network.Although our grammar succeeds in mimicking thebehavlour of the DCG, there are some open questionsInvolvlng the use of unification \[n parsing naturallanguages.
An examination of ~his ATN grammarshows that we are really using unification as amethod of passing parameters.
The full power ofunlficatton ls noc needed In this example since theFig.
5.
An Equivalent ATN Gra.mar with ATN Var iablesNP.
.
.
.
(defatn(s (push np (uni fy  "($subJvar $vp es) *)(to s/subJ)))(s/subJ (push vp t (uni fy  "$vp *)  (tO s / s ) ) )( s / s  (pop es t ) )(np (wrd a t (unify"$np'(gorSome $var (And epred ehole)))(to np/det ) )(wrd every t (unify'Sup" (ForA l l  ever (=> epred Shole) ) )( to  np/det ) )(cat  name t (unify 'Sap ' $ho le)(unify "eYrir *)(tO np/np)))(np/det (cat n C (unify "$var (gensym))(unify "$pred "(* evar))( to  np /n ) ) )(np/n (wrd (who that  which) t (to np/ulwho))(Jump rip/rip t))(up/up (pop (Slat evar "$hole $np) t ))(np/n/who(push vp t (unify "$subJvar '$var)(unify "$pred "(And Spred *))(to up/up)))(vp (cat v (getf trans *)(unify "$v "(* esubjvar $obJvar))(to vp/v t rans) )(cat v (getf \[ntrans *)(unify "$v '(* $subjvar))(to vp/vp) ) )(vp/vtrans (push np t (unify "($objvar ev $vp) *)(tO vp/vp)))(vp/vp (pop evp t ) )67grammar does not try to find "most-generalunifiers" for complicated sets of terms.
Most ofthe time it is simply using unification to bind avar iab le  to the contents of another variable.
Themost sophisticated use involves binding a variablein a term to another copy of that term which alsohas a variable to be bound as in the "a man loves awoman" example in Figure 6.
But even this bindingis a simple one-way application of standardunification.
St is not clear to the authorswhether this is due to the s imple nature of thegrammars involved or whether it i s  an inherentproperty of the d l rectedneee of natura l  languagepars ing .A situation where full unification eight berequired would arise when one is looking for aconstituent matching some partial description.
Forexample, suppose we were working with a syntacticgrammar and wanted to look for a singular nounphrase.
We might do this with the following PUSHarc:(PUSH NP T (UNIFY * '(NP (DET eDET)(NUMBER SINGULAR)(ADJ $ADJS) ...))If we follow the usual schedule of interpreting ATNgra.
- - - rs  the unification will not occur until theNP network has found a noun phrase and popped backwith a value.
This would requi re  a fully symmetricunification operation since there are variablesbeing bound to values in both arguments.
It is alsohighly i ne f f i c ient  since we may know rlghc awaythat the noun phrase in the input is not singular.What we would iike is to be able to do theunification Just after the push is done, whichwould more closely parallel a Prolog-based DCGparse.
Then an attempt to "unify" the numberregister with anything other than singular willfall immediately.This could be done automatically if weconstrain a network to have only one state whichdoes a pop and place some additional constraints onthe forms that can be used as values to be popped.Although we have not explored this idea at anylength, it appears to lead co some interestingpossibilities.5.
ConclusionsWe have found the use of log ica l  var iab les  andun i f i ca t ion  to be a powerful  technique in parsingnatura l  language.
I t  \[s one of the main sources ofthe strengths of the Definite Clause Grammarformalism.
In at tempt ing to capture th istechnique for  an ATN grammar we have come coseveral interesting conclusions, First, thestrength of the DCG comes as much from the skillfulencoding of linguistic assumptions about theeventual outcome of the parse as from the powerfultools it relies on.
Second, the notion of logicalvariables (with unification) can be adapted toparsing systems ouside of the theorem provingparadigm.
We have successfully adapted thesetechniques to an ATN parser and are beginning toembed them in an existing parallel bottom-up parser\[flnln3\] .
Third, the full power of unlfication maynot be dddessary tO suddessfully u&e ldgidalvariables in natural lanuage parsers.Fig.
6.
Zxatple Pa~Ses with the ATW G~am~"John loves every woman who breathes"(ForAll XI (-> (And (woman Xl) (breathes XI))(loves John Xl)))"John loves a woman"(ForSome Xl (And (woman Xl) (loves John XI)))"a man loves a woman"(ForSome XI(And (man X\[)(ForSome X2 (And (woman X2)(loves Xl X2))))"every man who lives loves"(ForAll Xl (-> (And (man XI) (lives XI))(loves Zi)))"every man who loves mary loves a woman wholoves john"(ForAll Xl('> (And (man XI) (loves XI mary))(ForSome X2 (And (And (woman X2)(loves X2 John))(loves XI X2)))))"every man who loves a woman who loves every dogloves every dog"(ForAll XI(=> (And (man XI)(ForSome X2(And (And (woman X2)(ForAll X3(=> (dog X3)(loves X2 X3))))(loves Xl X2))))(ForAll X4(-> (dog X4) (loves Xl X4)))))6.
References\[.
Bates, M., Theory and Practice or %ugmentedTransition Network Grammars, in Natural LanguageCommunication with Computers, ~ 7 - - " ~ c ~Springer-Verlag, \[978.2.
Bossle, S., "A Tactical Component for TextGeneration: Sentence Generation Using a FunctionalGrammar", report  HS-CIS-\[982-26, Computer andInformatlon Science, University of Pennsylvania,1982.3.
Codd, E. F., Arnold, R.S., Cad\[on, J-M., Chang,C.
L. and Roussopoulos, N., RENDEZVOUS Version 1:An Experimental Engllsh-Language Query FormulationSystem for Casual Users of Relational Data Bases,Report RJ2144, IBM Research Laboratory, San Jose,January 19784.
Coimerauer, A., "Metamor1~hosls Grammars", in L.Bolt (Ed.
), Natural Language Communication withComputers, Sprlnger-Verlas, I978.5.
Finln, T., An Interpreter and Compiler forAugmented Transition Networks, Coordinated ScienceLaboratory technical report T-48, University ofIllinois, 1977.6.
Finln, T., Parsing with ATN Grammars; to appearan Leonard Bolt (ed.)
Data Base question Answerin~Systems, Sprlnger-Verlag, Berlin, \[982.7.
Fin\[n, T. and B. L. Webber, BUP - A Bottom UpParser, report MS-CZS-\[982-27, Computer andInformation Science, University of Pennsylvania,\[982.8. ffeidorn, G., Augmented Phrase Structure Grammar,TINLAP-\[, \[975.9.
Kay, H., "Functional Grammar", Proceedings ofth__ee Fifth Annual Meeting of the Berkeley Lin~uisticSgciety , \[979.\[0.
Pratt, V. "LINGOL, A Progress Report", IJCAI ~,1975.I\[.
?ereira, F. and D. Warren, "Definite, ClauseGrammars for Language Analysis - A Survey of theFormalism and a Comparison with AugmentedTransition Networks"., Artificial Intelligence \[3( \ [980),  231-278.\[2.
Winograd, T.,  Language as  ~ Co~nitive Proce~-,Addison-Wesley Publishing Co.,Inc,\[983, 349-351.13.
Woods, W., Transition Network Grammars ~Natural Language Analysis, CACM 13:10, 1970.14.
Woods, W. A., R. M. Kaplan and B. L. Webbe"The Lunar 3ciences Natural Language Informatio:System: F~nal Report", BBN report 2378, \[972.68
