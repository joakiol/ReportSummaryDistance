CONSTRUCTING LEXICAL TRANSDUCER cLauri KarttunenRank Xerox Research CentreGrenobleO.
INTRODUCTIONA lexical transducer, first discussed inKarttunen, Kaplan and Zaenen 1992, is aspecial ised finite-state automaton thatmaps inflected surface forms to lexicalforms, and vice versa.
The lexical form con-sists of a canonical representation of theword and a sequence of tags that show themorphological characteristics of the form inquestion and its syntactic ategory.
For ex-ample, a lexical transducer for Frenchmight relate the surface form veut to thelexical form vouloir+IndPr+SG+P3.
In orderto map between these two forms, the trans-ducer may contain a path like the oneshown in Fig.
1.Lexical sidev o u 1 o i r +IndP+SG+P3v e u tSurface sideFig.
1 Transducer pathas well as generation (vouloir+lndP+SG+P3-~ veut ).
Analysis and generation differonly with respect o the choice of the inputside (surface or lexical).
The transducer andthe analysis/generation algorithm are thesame in both directions.Other advantages that lexical transduc-ers have over other methods of morpholog-ical processing are compactness and speed.The logical size of a transducer for Frenchis around 50K states and 100K arcs but thenetwork can be physically compacted to afew hundred kilobytes.
The speed of analy-sis varies from a few thousand words persecond to 10K w/s  or more depending onhardware and the degree of compaction.At this time there exist full-size lexicaltransducers for at least five languages:English and French (Xerox DDS), German(Lingsoft), Korean (Hyuk-Chul Kwon, seeKwon and Karttunen 1994), and Turkish(Kemal Oflazer).
It is expected that by thetime of the Coling conference several an-guages will have been added to the list.The circles in Fig.
1 represent states, thearcs (state transitions) are labelled by a pairof symbols: a lexical symbol and a surfacesymbol.
Sometimes they are the same (v:v),sometimes different (o:e), sometimes one orthe other side is empty (= EPSILON).
Theexact alignment of the symbols on the twosides is not crucial: the path would expressthe veut ~ vouloir+IndP+SG+P3 mappingeven if the last t on the lower side wasmoved to match the I of vouloir.Because finite-state transducers are bidi-rectional, the same transducer can be usedfor analysis (veut ~ vouloir +IndP+SG+P3)The standard way of constructing lexicaltransducers, as described in Karttunen,Kaplan and Zaenen 1994, consists of (1) afinite-state source lexicon that defines theset of valid lexical forms of the language(possibly infinite), and (2) a set of finite-state rules that assign the proper surfacerealisation to all lexical forms and morpho-logical categories of the language.
Therules are compiled to transducers andmerged with the source lexicon using inter-section and composition.
The use of inter-section is based on the special interpreta-tion of two-level rules as denoting equal406Stage I Stage 2 Stage 3 Stage 4surface suingLEXICONoFSTI0FST 2. .
.
.
.
?
oIsurface stritq!
surface strittg surface stringFig.
2 Construction ofa lexical transducer with intersection and composition(Karttunen, Kaplan and Zaenen 1992)length relations (see Kaplan and Kay 1994for a detailed iscussion).For practical as well as linguistic reasonsit may be desirable to use more than oneset of rules to describe the mapping.
Fig.
2illustrates the construction of a lexicaltransducer for French by two sets of rulesusing intersection (&) and composition (o)operations.Stage 1 shows two parallel rule systemsarranged in a cascade.
In Stage 2, the ruleson each level have been intersected toa sin-gle transducer.
Stage 3 shows the composi-tion of the rule system to a single trans~-ducer.
Stage 4 shows the final result that isderived by comf~osh G the rule system withthe lexicon.Although the conceptual picture is quitestraightforward, the actual computationsare very resource intensive because of thesize of the intermediate structures at Stages2 and 3.
Individual rule transducers aregenerally quite small but the result of inter-secting and composing sets of rule trans-ducers tends to result in very large struc-tures.This paper describes two recent act~vances in the construction of lexical trans-ducers that circumvent these problems: (1)moving the description of irregular map-pings from the rtde system to the sourcelexicon; (2) performing intersection andcomposition in single operation.
Both ofthese features have been implemented inthe Xerox authoring tools (Karttunen andBeesley 1992, Karttunen 1993) for lexicaltransducers."I.
LEXICON AS A SET OF RELATIONS1.1 Stem AlternationsThe differences between lexical formsand surface forms may be divided to regu-lar and irregular alternations.
Regular vari-ation, such as the at+-aux pattern in the de-clension of French nouns (cheval-chevaux),affects a large class of similar lexical items;irregular variation is limited to a handful ofwords like the i -a alternation in someEnglish verbs (swim~swam).
Both types ofalternations can be described equally wellby means of two-level rules.
The only dif-ference is that irregular alternations gener-ally must be constrained with more care,perhaps using diacritic markers to flag theappropriate words, to prevent hem fromapplying outside their proper domain.
Instandard two-level systems (Antworth1990), it is not possible to distinguish407idiosyncratic mappings from regular alter-nations.From a practical point of view, the treat-ment of irregular alternations by individualtwo-level rules is not optimal if the numberof rules becomes very large.
For example,the description of the irregular verb mor-phology in English requires more than ahundred rules, a large nmnber of whichdeal with the idiosyncratic behaviour ofjust one word, such as the rule in (1).
(1)"From 'be' to 'is' - Part i"b: i  <=> #: e: Irregular:+Pres: +Sg: +P3: ;Here # (word boundary) and I r regu lar(a diacritic assigned to strong verbs in thesource lexicon) guarantee that the rule ap-plies just where it is supposed to apply: toderive the first letter of is in the presenttense 3rd person form of be.
Another ule isneeded to delete the e because two-levelrules are restricted to apply to just a pair ofsymbols.
This is an artefact of the formal-ism but even if the be~is alternation were tobe described by a single rule, the construc-tion of dozens of rules of such limitedapplicability is a tedious, error prone pro-cess.A natural solution to this problem is toallow idiosyncratic variation to be de-scribed without any rules at all, by a simplelexical fiat, and to use rules only for themore general alternations.
This is one ofthe novel features of the Xerox lexiconcompiler (Karttunen 1993).
Technically, itmeans that the lexicon is not necessarily acollection of simple lexical forms as inclassical Kimmo systems but a relation thatmay include pairs such as <be+Pres+Sg+P3,is>.This can be achieved by changing thelexical format so that the lexicon interpretercompiles an entry like (2) to the transducershown in Fig.
3.
(2) be+Pres+Sg+P3+Verb: i s  Neg?
;Here the colon marks the juncture betweenthe lexical form and its surface realisation,neej?
is the continuation class for forms thatmay be have an attached n 't clitic.Lexical sideb e +IndP +Sg +P3 +Verbi sSurface sideFig.
3 Entry (2) in compiled form.The convention used by the Xerox corn-.piler is to interpret paired entries so thatthe lexical form gets paired with the secondform from left to right adding epsilons tothe end of the shorter form to make up thedifference in length.
The location of the ep-silons can also be marked explicitly by ze-ros in the lexical form.
For example, if it isimportant o regard the s of is as the regu-lar present singular 3rd person ending, theentry could be written as in (3).
(3) be+Pres+Sg+P3+Verb: i000s  # ;This has the effect of moving the s in }rig.
3to the right to give a +~3 : s pair.
The map-ping from vouloir+lndP+Sg+P3 to veut inFig.
1 can be achieved in a similar way.1.2 Inflectional and Derivational AffixesMoving all idiosyncratic realisationsfrom the rules to the source lexicon alsogives a natural way to describe the realisa~tion of inflectional and derivational suf-fixes.
Although it is possible to write a setof two-level rules that realise the Englishprogressive suffix as ing, the rules thatmake up this mapping have no other func-tion in the English morphology system.
Amore straight-forward solution is just toinclude the entry (4.)
is the appropriate sub-lexicon.
(4) +Proq: ing ~ ;408The forms on the lower side of a sourcelexicon need not be identical to the surfaceforms of the language; they can still bemodified by the rules.
This allows a goodseparation between idiosyncratic and regu-lar aspects of inflectional and derivationalmorphology.
The application of vowelharmony to the case marking suffixes inFinnish illustrates this point.Finnish case endings are subject tovowel harmonv.
For example, the abessive(%vithout") case in Finnish is realised as ei-ther tta or tftl depending on the stem; thelatter form occurs in words without backvowels.
The general shape of the abessive,t tA,  is not predictable from anything butthe specific realisation of the final vowel(represented by the "archiphoneme" A) isjust an instance of the general vowel har-mony rule in Vinnish.
This gives us thethree-level structm'e in Fig.
4 for forms likesyyttgl "without reason.
"s y y +Sg +Abe Iexical/brmLEXICONs y y t t A intermediate formI RULESs y y t t a surfai:eJ'ormFig.
4 Three level analysis of FinnishAbessive.The mapping from the lexical form tothe intermediate form is given by the lexi-con; the rules are responsible for the map-ping from the lower side of the lexicon tothe surface.
The intermediate representa-tion disappears in the composition with therules so that the resulting transducer mapsthe lexical form directly to the surfaceform, and vice versa, as in Fig.
5.s y y +sg +~be h, xicalJbrms y y t t a su@wefi~rmFig.
5 I;'inal structure after composition.This computational account coincidesnicely with tradit ional descriptions ofFinnish noun inflection (Laaksonen andLieko 1988).2.
INTERSECTING COMPOSITIONThe transfer of irregular alternationsfrom the rules to the lexicon has a signifi-cant effect on reducing the number of rulesthat have to be intersected in order to pro-duce lexical transducers in accordance withthe scheme in Fig.
2.
Nevertheless, in prac-tice the intersection of even a modest nun>ber of rules tends to be quite large.
The in-termediate rule transducers in Fig.
2 (Sta-ges 2 and 3) may actually be larger than thefinal result that emerges from the composi-tion with the lexicon in Stage 4.
This hasbeen observed in some versions of ourFrench and English lexicons.
Fig.
6 illus-trates this curious phenomenon.S ourceLexiconintersectionofRuleTransducerso ComposedLexiconFig.
6.
Composition of a lexicon with ruletransducersAs the relative sizes of the three compo-nents in Fig.
6 indicate, the compositionwith the lexicon results in a network that issmaller than the rule network by itself.
Thisis an interesting discovery because it doesnot follow from the mathematics of theoperation.
One might expect compositionto have the opposite effect.
In the worst409case, it could yield a result whose size isthe product~of  the sizes of the inputmachines.Instead of the expected blowup, thecomposition of a lexicon with a rule systemtends to produce a transducer that is notsignificantly larger than the source lexicon.The reason appears to be that the ruleintersection involves computing the com-bined effect of the rules for many typescomplex situations that never occur in thelexicon.
Thus the composition with theactual exicon can be a simplification fromthe point of the rule system.This observation suggests that it is ad~vantageous not to do rule intersections as aseparate operation, as in Fig.
2.
We canavoid the large intermediate r sults by per-forming the intersection of the rules andthe composition with the lexicon in onecombined operation.
We call this newoperation intersect ing composi t ion.
Ittakes as input a lexicon (either a simpleautomaton or a transducer) and any num-ber of rule transducers.
The result is whatwe would get by composing the lexiconwith the intersection of the rules.The basic idea of intersecting composi-tion is to build an output transducer whereeach state corresponds to a state in thesource lexicon and a configuration of rulestates.
The initial output state correspondsto the initial state of the lexicon and its con-figuration consists of the initial states of therule transducers.
At every step in the con-struction, we try to add transitions to ourcurrent output state by matching transi-tions in the current lexicon state against hetransitions in all the rule states of the cur-rent configuration.
The core of the algo-rithm is given in (5).
(5) Inters?c..ting CompositionFor each transition x:y in the cur-rent lexicon state, find a pair y:zsuch that all rule states in the cur-rent configuration have a transi-tion for the pair.
For each such y:zpair, get its destination configura-tion and the corresponding out-put state.
Then build an x:z tran-sition to that state from the cur-rent  output state.
When all thearcs in the current lexicon statehave been processed, move on tothe next unprocessed outputstate.
Iterate until finished.Special provisions have to be made forx:y arcs in the lexicon state and for y:z arcsin the rules when y is EPSILON.
In the for-mer case, we build an x:EPSILON transitionto the output state associated with the des-tination and the unchanged configuration;in the latter case we build an EPSILON:z arcto the output state associated with the cur-rent lexicon state and the new destinationconfiguration.If there is only one rule transducer, in-tersecting composition is equivalent to or-dinary composition.
If all the networks aresimple finite-state networks rather thantransducers, the operation reduces to n-way intersection i  which one of the net-works (the lexicon in our case) is used todrive the process.
This special case of thealgorithm was discovered independentlyby Pasi Tapanainen (Tapanainen, 1991;Koskenniemi, Tapanainen and Voutilai-nen, 1992) as an efficient way to applyfinite-state constraints for syntactic dis-ambiguation.
The distinguished networkin his application represents alternative in-terpretations of the sentence.
The methodallows the sentence to be disambiguatedwithout computing the large (possibly un-computable) intersection of the rule au-tomata.Fig.
7 shows a logically equivalent but amore efficient way to perform the compu-tations in Fig.
2 using intersecting compo-sition (designated by &o).410StaRe I Stage 2 Stage 3~ourceLexicon Intermediate I&o Result+ &o~ ~ Finalim .
m  _ _  - -Fig.
7.
Construction of a lexical transducer with intersectingcomposition.In Fig.
7, the first set of rules applies tothe source lexicon, tile second set of rulesmodifies the outcome of the first stage toyield the final outcome.
The rules are notintersected separately.
The Xerox lexiconcompiler (Karttunen 1993) is designed tocarry out the computations in this optimalway.REFERENCESAntworth, E. I, (1990).
I'C-KIMMO: a lwo-level processor for morpholo,@:al analysis.Smnmer institute of Linguistics, Dallas,Texas.Kaplan, Ronald M. and Martin Kay (1994).Regular Models of Phonological RuleSystems.
To appear in Corrlputational ldn-guistics.Karttunen, Lauri, Ronald M. Kaplan andAnnie Zaenen (1992).
Two-I,evel Mor-phology with Composition.
In the Pro~ceedings of the fifteenth International Con-ference on Computational Linguistics.
Col-ing-.92.
Nantes, 23-28/8/1992.
Vol.
1 141-48.
ICCL.Karttunen, Lauri and Kenneth R. Beesley(1992).Two-I.evel Rule Compiler TechnicalReport.
ISTLq992-2.
Xerox Palo Alto Re-search Center.
Palo Alto, California.Kartttmen, I auri (1993).F'inile-Stah' l.exiconCompiler Technical Report.
ISTI,-NI,TT-1993-04-02.
Xerox Palo Alto ResearchCenter.
Palo Alto, California.Koskenniemi, Kimmo, Pasi Tapanainenand Atro Voutilainen (1992).
Compilingand Using Finite-State Syntactic Rules.in the Proceedings of the fifteenth Interna-tional Conference on Computalional l,in-guistics.
Colin2-92.
Nantes, 23-28/8/1992.Vol.
1 156-62.
ICCL.
1992.Kwon, l Iyuk-Chul and l,auri Karttunen(1994).
Incremental Construction of aLexical Transducer for Korean.
in theProceedings of the 151h International Con-ference on Compulatiortal i.in~uislics.
Col-ing-94.
Kyoto, Aug. 5--9, 1994.l,aaksonen, Kaino and Anneli I,ieko (1988).Suomen kielen :iffnne- ja muoto-oppi (l'ho-nology and Morphology of Finnish).
OyFinn Lectura Ab.
l,oimaa.Tapanainen, Pasi (1991).
\]darellisina" au-tomaalteina esih'ttyjen kielioppis:iantOjensoveltaminen luonnollisen kielen jffsen-hljff.qs:i (Applying finite-state grammarrules in natural language parsing).Master's Thesis.
Department of Com-puter Science, University of Helsinki.411
