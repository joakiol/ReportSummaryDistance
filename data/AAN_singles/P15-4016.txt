Proceedings of ACL-IJCNLP 2015 System Demonstrations, pages 91?96,Beijing, China, July 26-31, 2015.c?2015 ACL and AFNLPSharing annotations better: RESTful Open AnnotationSampo Pyysalo1Jorge Campos2Juan Miguel Cejuela2Filip Ginter1Kai Hakala1Chen Li3Pontus Stenetorp4Lars Juhl Jensen51University of Turku, Finland,2tagtog, Germany,3Massachusetts Institute of Technology, United States,4University of Tokyo, Japan,5University of Copenhagen, Denmarksampo@pyysalo.net jorge@tagtog.net juanmi@tagtog.netfilip.ginter@utu.fi kai.hakala@utu.fi cli@csail.mit.edup.stenetorp@cs.ucl.ac.uk lars.juhl.jensen@cpr.ku.dkAbstractAnnotations are increasingly created andshared online and connected with web re-sources such as databases of real-worldentities.
Recent collaborative efforts toprovide interoperability between onlineannotation tools and resources have intro-duced the Open Annotation (OA) model,a general framework for representing an-notations based on web standards.
Build-ing on the OA model, we propose to shareannotations over a minimal web inter-face that conforms to the RepresentationalState Transfer architectural style and usesthe JSON for Linking Data representation(JSON-LD).
We introduce tools support-ing this approach and apply it to severalexisting annotation clients and servers,demonstrating direct interoperability be-tween tools and resources that were pre-viously unable to exchange information.The specification and tools are availablefrom http://restoa.github.io/.1 IntroductionAnnotation is an important task in many fieldsranging from historical and literary study to exper-imental sciences including biology.
The value ofannotations is closely associated with the ability toshare them.
The web has become instrumental toinformation sharing, and there has thus been muchinterest in web-based tools and repositories for thecreation, collaborative editing and sharing of an-notations.
Unfortunately, design and implemen-tation differences have resulted in poor interoper-ability, raising barriers to communication and in-troducing costs from the need to convert betweendata models, formats, and protocols to bridge dif-ferent systems.To fully interoperate, annotation tools and re-sources must agree at least on a way to name andrefer to things, an abstract data model, a formatcapturing that model, and a communication proto-col.
Here, we suggest a web application program-ming interface (API) that resolves these questionsby building upon web standards and best practices,namely Linked Data principles (Bizer et al., 2009),the Open Annotation data model (Bradshaw et al.,2013) and its serialization as JSON-LD (Spornyet al., 2014), and a minimal HTTP-based proto-col adhering to the Representational State Trans-fer (REST) architectural style (Fielding and Tay-lor, 2002).
By implementing support for the APIin a variety of independently developed annotationtools and resources, we demonstrate that this ap-proach enables interoperability and novel ways ofcombining previously isolated methods.2 DesignWe aim to define a minimal web API for shar-ing annotations that conforms closely to relevantstandards and best practices.
This should reduceimplementation effort and ensure generality andcompatibility with related efforts (Section 5).
Wenext briefly discuss the components of our design.Linked Data.
We use representations based onthe Resource Description Framework (RDF) stan-dards for modeling data on the web, followingthe best practice of using HTTP uniform resourceidentifiers (URIs), which provide useful informa-tion when dereferenced (Bizer et al., 2009).Open Annotation.
We describe text annotationsaccording to the OA draft W3C standard1, which1http://www.openannotation.org/91body target?related?example.org/annotations/1l .
r / t ti /www.w3.org.
.
ren.wikipedia.org/wiki/W3C.
i i i .
r / i i/Figure 1: OA model example.
The annotation ex-presses that the W3C Wikipedia article is relatedto the W3C homepage.
The three resources are allin different domains, and the ?related?
relation isnot represented explicitly.is an RDF-based graph representation compati-ble with linguistic annotation formalisms such asLAF/GrAF (Ide and Suderman, 2007; Verspoorand Livingston, 2012).
At its most basic level, theOA model differentiates between three key com-ponents: annotation, body, and target, where theannotation expresses that the body is related to thetarget of the annotation (Figure 1).
The body cancarry arbitrarily complex embedded data.JSON-LD was recently accepted as a standardRDF serialization format (Sporny et al., 2014) andis the recommended serialization of OA.
EveryJSON-LD document is both a JSON document anda representation of RDF data.
Figure 2 showsan example of a simple annotation using the OAJSON-LD representation.2{"@id": "/annotations/1","@type": "oa:Annotation","target": "/documents/1#char=0,10","body": "Person"}Figure 2: Example annotation in JSON-LD for-mat.RESTful architecture We define a resource-oriented API that uses HTTP verbs to manipulateresources (Table 1).
The API provides hypermediacontrols in data using JSON-LD and establishedlink relations, in conformance with best practicesfor RESTful APIs (Fielding and Taylor, 2002).The API defines just two types of resources: anannotation and a collection of annotations.
Theformer is defined according to the core OA spec-ification.
While there are no formal standards forthe representation of collections in RESTful APIs,2The OA JSON-LD @context is understood to be ac-tive.
Relative URLs are interpreted with respect to the HTTPrequest base.Verb Resource ActionGET Annotation Read annotationGET Collection Read all annotationsPUT Annotation Update annotationDELETE Annotation Delete annotationPOST Collection Create annotationTable 1: HTTP verbs, resources, and actions.Read-only services support only the two GET re-quests.the basic collection pattern is well established.
Wespecify a simple implementation, drawing on rel-evant draft standards such as Collection+JSON3and Hydra4.3 Reference ImplementationTo support the development, testing and integra-tion of RESTful OA API implementations, wehave created a reference server and client as wellas tools for format conversion and validation.3.1 OA StoreThe OA Store is a reference implementation ofpersistent, server-side annotation storage that al-lows clients to create, read, update and delete an-notations using the API.
The store uses MongoDB,which is well suited to the task as it is a document-oriented, schema-free database that natively sup-ports JSON for communication.
The API is imple-mented using the Python Eve framework, which isspecifically oriented towards RESTful web APIsusing JSON and is thus easily adapted to supportOA JSON-LD.3.2 OA ExplorerThe OA Explorer is a reference client that providesan HTML interface for navigating and visualizingthe contents of any compatible store (Figure 3).The service first prompts the user for a store URLand then provides the user with a dynamically gen-erated view of the contents of the store, which itdiscovers using the API.
OA Explorer is imple-mented in Python using the Flask microframeworkfor web development.3http://amundsen.com/media-types/collection/4http://www.hydra-cg.com/spec/latest/core/92Figure 3: OA Explorer shown visualizing annotations from the CRAFT corpus (Bada et al., 2012) con-verted to OA and served from the OA Store.3.3 Format conversionThe OA Adapter is middleware that we createdfor sharing Open Annotation data.
The softwareimplements both the client and server sides of theAPI and a variety of conversions to and from dif-ferent serializations of the OA model and relatedformats using the OA JSON-LD serialization asthe pivot format.
This allows the OA Adapterto operate transparently between a client and aserver, providing on-the-fly conversions of clientrequests from representations favored by the clientinto ones favored by the server, and vice versa forserver responses.
Standard HTTP content negotia-tion is used to select the best supported representa-tions.
The adapter implements full support for allstandard RDF serializations: JSON-LD, N-Triplesand N-Quads, Notation3, RDF/XML, TriG, TriX,and Turtle.
With the exception of named graphsfor serializations that do not support them, conver-sion between these representations is guaranteedto preserve all information.In addition to the general, reversible formattranslation services provided by the OA Adapter,we provide scripts for offline conversion of vari-ous annotation file formats into the OA JSON-LDformat to allow existing datasets to be importedinto OA stores.
The following are currently sup-ported: Penn Treebank format (including PTB IIPAS) (Marcus et al., 1994), a number of variantsof CoNLL formats, including CoNLL-U,5Know-tator XML (Ogren, 2006), and the standoff formatused by the BRAT annotation tool (Stenetorp et al.,2012).
We also provide supporting tools for im-porting files with OA JSON-LD data to a store andexporting to files over the RESTful OA API.5http://universaldependencies.github.io/docs/3.4 ValidationOA JSON-LD data can be validated on three lev-els: 1) whether the data is syntactically well-formed JSON, 2) whether it conforms to theJSON-LD specification, and 3) whether the ab-stract information content fulfills the OA datamodel.
The first two can be accomplished usingany one of the available libraries that implementthe full JSON-LD syntax and API specifications.6To facilitate also validation of conformity to theOA data model, we define the core model of theOA standard using JSON Schema (Galiegue andZyp, 2013).
The JSON Schema community hasprovided tools in various programming languagesfor validating JSON against a JSON Schema.
Theschema we defined is capable of validating data forcompliance against JSON-LD and OA Core at thesame time.
Complementing this support for datavalidation, we are also developing a standalonetool for testing web services for conformance tothe RESTful OA API specification.4 Adaptation of Existing ToolsIn addition to creating reference implementations,we have adapted two previously introduced web-based annotation tools to support the API.
Wefurther demonstrate the scope and scalability ofthe framework on several publicly available mass-scale datasets from the biomedical domain, show-ing how annotations on millions of documentscan be transparently linked across well-establisheddatabase services and to non-textual resourcessuch as gene and protein databases.6http://json-ld.org93Figure 4: BRAT showing Czech dependency annotations from the Universal Dependencies corpus(http://universaldependencies.github.io/docs/).Figure 5: tagtog showing entity annotations for a full-text document from PubMed Central.4.1 BRATThe brat rapid annotation tool (BRAT) is an open-source web-based annotation tool that supports awide range of text annotation tasks (Stenetorp etal., 2012).
It provides intuitive visualization oftext-bound and relational annotations and allowsfor annotations to be created and edited using adrag-and-drop interface (Figure 4).
The server isa web service implemented in Python, whereasthe client is a browser-based application written inJavaScript.
For annotation storage, the server usesa file-based back-end with a stand-off file format7.The original client and server implement a cus-tom communication protocol, leading to tight cou-pling between the two.
We rewrote the clientand server communication components to use OAJSON-LD and the RESTful API as an alternativeto the native format and protocol, thus enablingboth components to communicate also with otherclients and servers.7http://brat.nlplab.org/standoff.html4.2 tagtogThe tagtog web-based annotation system is de-signed to combine manual and automatic annota-tions to accurately and efficiently mark up full-textarticles (Cejuela et al., 2014).
The system wasoriginally developed with a focus on annotatingbiological entities and concepts such as genes andGene Ontology terms.
The web interface is im-plemented in JavaScript using the Play frameworkwith Scala.
The system is centered on the conceptof user projects, each of which holds a corpus ofannotated documents.To make tagtog interoperable with other REST-ful OA clients and servers, we made two majorimplementation changes.
First, the server can nowserve annotations in OA JSON-LD format, thusallowing them to be viewed by other clients.
Sec-ond, the tagtog interface can visualize and edit OAJSON annotations from other OA stores, withouta backing tagtog project.
Figure 5 shows a sampledocument annotated in tagtog.944.3 Biomedical entity recognition resourcesWe implemented the API for four large-scaledatabases of biomedical entity mentions.
TheCOMPARTMENTS database integrates evidenceon protein subcellular localization (Binder et al.,2014), and TISSUES and DISEASES similarly in-tegrate evidence on tissue expression and disease-associations of human genes, respectively (Santoset al., 2015; Pletscher-Frankild et al., 2015).
Allthree resources include a text mining componentbased on the highly efficient NER engine usedalso for detection of species names and names ofother taxa in the ORGANISMS database (Pafilis etal., 2014).
Together, these databases contain over123M mentions of genes/proteins, cellular compo-nents, tissues and cell lines, disease terms and tax-onomic identifiers.
This dataset is regularly pre-computed for the entire Medline corpus, whichcurrently consists of more than 24M abstracts and3B tokens.To make this large collection of automatic an-notations available as OA JSON-LD, we definedthe annotations of each abstract to be a separate(sub)collection of a document resource, accessibleusing URL patterns of the form http://.../document/{docid}/annotations/.
Theweb services were implemented as part of thePython framework common to all four databases.They query a PostgreSQL back-end for text andannotations, which are formatted as OA JSON-LDusing the standard Python json module.4.4 EVEXThe EVEX database is a collection of events fromthe molecular biology domain obtained by pro-cessing the entire collection of PubMed articlesand PubMed Central Open Access full-text arti-cles (Van Landeghem et al., 2013), together con-stituting a corpus of nearly 6B tokens.
In to-tal, EVEX contains 40M individual events among77M entity mentions.
The events are of 24 dif-ferent types (e.g.
POSITIVE REGULATION, PHOS-PHORYLATION) and the participants are primar-ily genes and proteins.
Where possible, the entitymentions are grounded to their corresponding En-trez Gene database identifiers.The event structures consist of entity mentions,trigger phrases expressing events, and typedrelations identifying the roles that the entities playin the events.
All of this data is accessible througha newly implemented EVEX API compliant withthe OA JSON-LD format.
Every document is de-fined as a separate annotation collection followingthe approach described in Section 4.3.
The EVEXweb service is written in Python using the Djangoweb framework.
Data are stored in a MySQLdatabase and the OA JSON-LD interface uses thestandard Python json module for formatting.5 Related workOur approach builds directly on the OA datamodel (Bradshaw et al., 2013), which harmonizesthe earlier Open Annotation Collaboration (Hasl-hofer et al., 2011) and Annotation Ontology Ini-tiative (Ciccarese et al., 2011) efforts and is cur-rently developed further under the auspices of theW3C Web Annotation WG.8Approaches build-ing on RESTful architectures and JSON-LD arealso being pursued by the Linguistic Data Con-sortium (Wright, 2014) and the Language Appli-cation Grid (Ide et al., 2014), among others.
Anumber of annotation stores following similar pro-tocols have also been released recently, includ-ing Lorestore (Hunter and Gerber, 2012), PubAn-notation (Kim and Wang, 2012), the Annotator.jsstore9, and NYU annotations10.6 Conclusions and future workWe have proposed to share annotations using aminimal RESTful interface for Open Annotationdata in JSON-LD.
We introduced reference im-plementations of a server, client, validation andconversion tools, and demonstrated the integra-tion of several independently developed annota-tion tools and resources using the API.
In futurework, we will continue to develop the API speci-fication further in collaboration with the relevantstandardization efforts and interested parties us-ing a fully open process.
We will focus in par-ticular on modular extensions to the specificationfor supporting search, tagging, and bulk modifica-tions.
We will also continue to develop and ex-tend the tools, with emphasis on reversible con-versions between OA JSON-LD and major re-lated formats.
Except for tagtog, a commercialtool, all of the tools and resources introduced inthis study are available under open licenses fromhttp://restoa.github.io/.8http://www.w3.org/annotation/9http://annotateit.org/10http://annotations.dlib.nyu.edu/home/95AcknowledgmentsThis work was in part funded by the NovoNordisk Foundation Center for Protein Research[NNF14CC0001], by the National Institutes ofHealth [U54 CA189205-01], by JSPS KAKENHI[13F03041], and by Quanta Computer Inc.ReferencesMichael Bada, Miriam Eckert, Donald Evans, KristinGarcia, Krista Shipley, Dmitry Sitnikov, William ABaumgartner, K Bretonnel Cohen, Karin Verspoor,Judith A Blake, et al.
2012.
Concept annotation inthe craft corpus.
BMC bioinformatics, 13(1):161.Janos X Binder, Sune Pletscher-Frankild, KalliopiTsafou, Christian Stolte, Sean I O?Donoghue, Rein-hard Schneider, and Lars Juhl Jensen.
2014.
COM-PARTMENTS: unification and visualization of pro-tein subcellular localization evidence.
Database,2014:bau012.Christian Bizer, Tom Heath, and Tim BernersLee.2009.
Linked Data the story so far.
InternationalJournal on Semantic Web & Information Systems.Shannon Bradshaw, Dan Brickley, Leyla JaelGarca Castro, Timothy Clark, Timothy Cole,Phil Desenne, Anna Gerber, Antoine Isaac, JacobJett, Thomas Habing, et al.
2013.
Open annotationdata model (community draft).Juan Miguel Cejuela, Peter McQuilton, Laura Ponting,Steven J Marygold, Raymund Stefancsik, Gillian HMillburn, Burkhard Rost, et al.
2014. tagtog:interactive and text-mining-assisted annotation ofgene mentions in PLOS full-text articles.
Database,2014:bau033.Paolo Ciccarese, Marco Ocana, Leyla Jael Garcia-Castro, Sudeshna Das, and Tim Clark.
2011.
Anopen annotation ontology for science on web 3.0.
J.Biomedical Semantics, 2(S-2):S4.Roy T Fielding and Richard N Taylor.
2002.
Prin-cipled design of the modern web architecture.ACM Transactions on Internet Technology (TOIT),2(2):115?150.Francis Galiegue and Kris Zyp.
2013.
JSON Schema:Core definitions and terminology.
Internet Engi-neering Task Force (IETF).Bernhard Haslhofer, Rainer Simon, Robert Sander-son, and Herbert Van de Sompel.
2011.
Theopen annotation collaboration (oac) model.
In Proc.MMWeb?11, pages 5?9.Jane Hunter and Anna Gerber.
2012.
Towards anno-topiaenabling the semantic interoperability of web-based annotations.
Future Internet, 4(3):788?806.Nancy Ide and Keith Suderman.
2007.
Graf: A graph-based format for linguistic annotations.
In Proc.LAW?07, pages 1?8.Nancy Ide, James Pustejovsky, Christopher Cieri, EricNyberg, Denise DiPersio, Chunqi Shi, Keith Su-derman, Marc Verhagen, Di Wang, and JonathanWright.
2014.
The language application grid.
Proc.LREC?14.Jin-Dong Kim and Yue Wang.
2012.
Pubannotation: apersistent and sharable corpus and annotation repos-itory.
In Proc.
BioNLP?12, pages 202?205.Mitchell Marcus, Grace Kim, Mary AnnMarcinkiewicz, Robert MacIntyre, Ann Bies,Mark Ferguson, Karen Katz, and Britta Schas-berger.
1994.
The penn treebank: annotatingpredicate argument structure.
In Proc.
HLT, pages114?119.Philip V Ogren.
2006.
Knowtator: a prot?eg?e plug-in for annotated corpus construction.
In Proc.
HLT-NAACL?06 demos, pages 273?275.Evangelos Pafilis, Sune Pletscher-Frankild, LuciaFanini, Sarah Faulwetter, Christina Pavloudi,Aikaterini Vasileiadou, Christos Arvanitidis, andLars Juhl Jensen.
2014.
The SPECIES and OR-GANISMS resources for fast and accurate identi-fication of taxonomic names in text.
PLoS ONE,8:e65390.Sune Pletscher-Frankild, Albert Palleja, KalliopiTsafou, Janos X Binder, and Lars Juhl Jensen.
2015.DISEASES: Text mining and data integration ofdisease-gene associations.
Methods, 74:83?89.Alberto Santos, Kalliopi Tsafou, Christian Stolte,Sune Pletscher-Frankild, Sean I O?Donoghue, andLars Juhl Jensen.
2015.
Comprehensive compari-son of large-scale tissue expression datasets.
PeerJ.Manu Sporny, Dave Longley, Gregg Kellogg, MarkusLanthaler, and Niklas Lindstr?om.
2014.
JSON-LD1.0: A JSON-based serialization for linked data.Pontus Stenetorp, Sampo Pyysalo, Goran Topi?c,Tomoko Ohta, Sophia Ananiadou, and Jun?ichi Tsu-jii.
2012.
Brat: a web-based tool for nlp-assistedtext annotation.
In Proc.
ACL?12 demos, pages 102?107.Sofie Van Landeghem, Jari Bj?orne, Chih-Hsuan Wei,Kai Hakala, Sampo Pyysalo, Sophia Ananiadou,Hung-Yu Kao, Zhiyong Lu, Tapio Salakoski, YvesVan de Peer, et al.
2013.
Large-scale event extrac-tion from literature with multi-level gene normaliza-tion.
PLoS ONE, 8(4):e55814.Karin Verspoor and Kevin Livingston.
2012.
Towardsadaptation of linguistic annotations to scholarly an-notation formalisms on the semantic web.
In Proc.LAW?12, pages 75?84.Jonathan Wright.
2014.
Restful annotation and effi-cient collaboration.
In Proc.
LREC?14.96
