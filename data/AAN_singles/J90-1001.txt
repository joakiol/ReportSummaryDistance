CATEGORIAL SEMANTICS AND SCOPINGFernando C. N. Pere i raAT & T Bell Laboratories600 Mountain Ave.Murray Hill, N J  07974Certain restrictions on possible scopings of quantified noun phrases in natural language are usually expressedin terms of formal constraints on binding at a level of logical form.
Such reliance on the form rather than thecontent of semantic interpretations goes against the spirit of compositionality.
I will show that those scopingrestrictions follow from simple and fundamental facts about functional application and abstraction, and canbe expressed as constraints on the derivation of possible meanings for sentences rather than constraints ofthe alleged forms of those meanings.1 AN OBVIOUS CONSTRAINT.
9Treatments of quantifier scope in Montague grammar(Montague 1973; Dowty et al 1981; Cooper 1983), trans-formational grammar (Reinhart 1983; May 1985; Heim1982; Roberts 1987), and computational linguistics (Hobbsand Shieber 1987; Moran 1988; Alshawi et al 1989) havedepended implicitly or explicitly on a constraint on possiblelogical forms to explain why examples 1 such as1.
*A woman who saw every man disliked himare ungrammatical, nd why in examples such as2.
Every man saw a friend of his3.
Every admirer of a picture of himself is vainthe every.
.
,  noun phrase must have wider scope than the a?
.
.
noun phrase if the pronoun in each example is assumedto be bound by its antecedent.
What exactly counts asbound anaphora varies between different accounts of thephenomena, but the rough intuition is that semantically abound pronoun plays the role of a variable bound by thelogical form (a quantifier) of its antecedent.
Example (1)above is then "explained" by noting that its logical formwould be something like3 w.woman(w) /k (Vm.man(m) ~ saw(w, m))/~ disliked(w, m)but this is "ill-formed" because variable m occurs as anargument of disliked outside the scope of its binder Vm.2As for Examples (2) and (3), the argument is similar: widescope for the logical form of the a .
.
.
noun phrase wouldleave an occurrence of the variable that the logical form ofevery.
.
,  binds outside the scope of this quantifier?
For lackof an official name in the literature for this constraint, I willcall it here the free-variable constraint?In accounts of scoping possibilities based on quantifierraising or storage (Cooper 1983; van Eijck 1985; May1985; Hobbs and Shieber 1987) the free-variable con-straint is enforced either by keeping track of the set of freevariables free (q) in each raisable (storable) term q andwhen x ~ free (q) blocking the raising of q from anycontext Bx.t in which x is bound by some binder B, or bychecking after all applications of raising (unstoring) thatno variable occurs outside the scope of its binder.The argument above is often taken to be so obvious anduncontroversial that it warrants only a remark in passing, ifany (Cooper 1983; Reinhart 1983; Partee and Bach 1984;May 1985; van Riemsdijk and Williams 1986; Williams1986; Roberts 1987), even though it depends on nontrivialassumptions on the role of logical form in linguistic theoryand semantics.First of all, and most immediately, there is the require-ment for a logical-form level of representation, either in thepredicate-logic format exemplified above or in some treeformat as is usual in transformational grammar (Heim1982; Cooper 1983; May 1985; van Riemsdijk and Williams1986; Williams 1986; Roberts 1987).Second, and most relevant o Montague grammar andrelated approaches, the constraint is given in terms ofrestrictions on formal objects (logical forms), which in turnare related to meanings through a denotation relation?However, compositionality as it is commonly understoodrequires meanings of phrases to be functions of the mean-ings rather than the forms of their constituents?
This is aproblem even in accounts based on quantifier storage (Coo-per 1983; van Eijck 1985), which are precisely designed, asvan Eijck puts it, to "avoid all unnecessary reference toproperties o f .
.
.
formulas" (van Eijck 1985, p. 214).
Infact, van Eijck proposes an interesting modification ofCooper storage that avoids Cooper's reliance on forbiddingvacuous abstraction to block out cases in which a nounphrase is unstored while a noun phrase contained in it is stillin store?
However, this restriction does not deal with thecase being addressed here.Computational Linguistics Volume 16, Number 1, March 1990 1Fernando C.  N .
Pereira Categorial Semantics and ScopingIt is also interesting to observe that a wider class ofexamples of forbidden scopings would have to be consid-ered if raising out of relative clauses were allowed, forexample in4.
An author who John has read every book by arrivedIn this example, if we did not assume the restriction againstraising from relative clauses, the every .
.
.
noun phrasecould in principle be assigned widest scope, but this wouldbe blocked by the free-variable constraint as shown by theoccurrence of a free as an argument of book-by inVb.book-by(b, a) =:- (3 a.author(a)A has-read(john, b) A arrived(a))That is, the alleged constraint against raising from rela-tives, for which many counterexamples xist (Vanlehn1978), blocks some derivations in which otherwise thefree-variable constraint would be involved, specifically thoseassociated to syntactic onfigurations of the form\ [NP  i " " " N\[g-  ?
?
\ [NP j .
?
?
X i ?
?
.
\ ] -  ?
- \ ] "  ?
- \ ]where X~ is a pronoun or trace coindexed with NPt and NPjis a quantified noun phrase.
Since some of the most exten-sive Montague grammar fragments in the literature (Dowtyet al 1981; Cooper 1983) do not cover the other majorsource of the problem, PP complements of noun phrases(replace S by PP in the configuration above), the question iseffectively avoided in those treatments.Conversely, it could be argued that the free-variableconstraint is responsible for forcing a quantifier to raiseoutside a relative clause in examples such as5.
The slush fund that every minister needs is kept by hisprivate secretary.Here, the coindexing of every minister and his forces theformer to be scoped outside the main clause, and thusoutside the relative clause in which it occurs.The main goal of this paper is to argue that the free-variable constraint isactually aconsequence of basic seman-tic properties that hold in a semantic domain allowingfunctional application and abstraction, and are thus inde-pendent of a particular logical-form representation.
As acorollary, I will also show that the constraint is betterexpressed as a restriction on the derivations of meanings ofsentences from the meanings of their parts rather than arestriction on logical forms.
The resulting system is relatedto the earlier system of conditional interpretation rulesdeveloped by Pollack and Pereira (1988), but avoids thatsystem's use of formal conditions on the order of assump-tion discharge.2 CURRY'S CALCULUS OF FUNCTIONALITYWork in combinatory logic and the k-calculus is concernedwith the elucidation of the basic notion of functionality:how to construct functions, and how to apply functions totheir arguments.
There is a very large body of results in thisarea, of which I will need only a very small part.One of the simplest and most elegant accounts of func-tionality, originally introduced by Curry and Feys (1968)and further elaborated by other authors (Stenlund 1972;Lambek 1980; Howard 1980) involves the use of a logicalcalculus to describe the types of valid functional objects.
Ina natural-deduction format (Prawitz 1965), the calculuscan be simply given by the following two rules:a a--"/5 /5The first rule states that the result of applying a functionfrom objects of type a to objects of type/5 (a function oftype ,~ ---*/5) to an object of type a is an object of type/5.The second rule states that if from an arbitrary object oftype a it is possible to construct an object of type/5, thenone has a function from objects of type a to objects of type/5.
In this rule and all that follow, the parenthesized formulaat the top indicates the discharge of an assumption intro-duced in the derivation of the formula below it.
Precisedefinitions of assumption and assumption discharge aregiven below.The typing rules can be directly connected to the use ofthe k-calculus to represent functions by restating them asfollows:(x :~)u:a  v :a - - .
/5  u:/5\[app\] .
v(u) :/5 \[abs\] : kx.u : a --"/3A formula u: a will be called a type assignment, assigningthe type a to term u.
Thus, the two rules above state that ifu has type a and v has type a --~/5 then v(u) has type/5, andif by assuming that x has type a, we can show that u(possibly containing x) has type/5, then the function repre-sented by kx.u has type a--~/5.
In the rest of this paper, theterm functionality rules will refer to these rules.Notation As usual in categorial analyses of natural an-guage, types are built from the basic types e for individualsand 1: for propositions.
In function types, the constructorassociates to the right.
Following this type system (no tupletypes) expressions will be written in a "curried" notation.For example, a binary relation r over individuals will havetype o ~ e ----- t and its application to arguments x and ywill be written r(x)(y) .
Since the usual semantic analysishas a transitive verb combining first with its object and thenwith its subject, the meaning of sentence such as "Johnloves Mary" will be represented by loves(m)(j).For a first example of how the functionality rules may beused in semantic interpretation, I will consider the deriva-tion in Figure 1 of a simplified meaning for the topicalized2 Computational Linguistics Volume 16, Number 1, March 1990Fernando C. N. Pereira Categoriai Semantics and ScopingJohn j:..ehates hates: e---,e-,t x: e 1Mary m: e \[app\] hates(~ e--~t\[app!
hates(x)(m): t\[abs\] Lx.hates(x)(m): e--,t 1/\[app\] hates(j)(m): tFigure 1 Using the Functionality Rules.sentence "John, Mary hates".
3 The derivation is repre-sented by a tree in which leaf nodes are labeled by assump-tions and nonleaf nodes are labeled by the results of ruleapplications.
Several aspects of the overall approach ap-pear in this example.
Each type assignment in the deriva-tion is associated to one phrase whose meaning it repre-sents, and is derived by applying the functionality rules totype assignments associated with the constituents of thephrase.
The meanings of words in the sentence nter asassumptions in the derivation, which are left undischarged.In the figure, type assignments are labeled either by thelexical item that led to their introduction as assumptions orby the name of the rule applied to derive the type assign-ment.
Superscripts are used to link the result of an applica-tion of rule \[abs\] to the assumptions discharged by thatapplication.
The derivation follows closely the syntax of thesentence.
Specifically, the assumptions j : e, m : e, andhates : e --~ e ~ i correspond to the words "John," "Mary,"and "hates" in the sentence, and the assumption x :ecorresponds tothe topicalization trace.To make precise what inferences are possible in thecalculus of functionality, we need a precise notion of deriva-tion.
It turns out that seemingly small differences in thishave important consequences a to what type assignmentscan be derived.
The following definition is adapted fromthat of Prawitz (1965).
A derivation is a tree with eachnode n labeled by a type assignment q~(n) (the conclusion ofthe node) and by a set F(n) of type assignments giving theassumptions o f  ~(n).
In addition, a derivation D satisfiesthe following conditions:1.
Each leaf node n has its labeling type assignment assingle assumption, that is F(n) = {q~(n)}.2.
Each nonleaf node n corresponds either to an applica-tion of \[app\], in which case it has two daughters m and m'with (a(m) =- u : a, 4~(m') =- v: a --~ /3, 4~(n) =- v(u)  : 13and F(n) = r (m)  U r (m') ,  or to an application of \[abs\],in which case n has a single daughter m, and q~(m) ~- u :/3,4~(n) =- Xx.u : a ~/3 ,  and r(n)  = F(m) - {x : a}.3.
No node assumption set contains two assumptions x : aand x :/3 for the same variable x.If n is the root node of a derivation D, we say that D is aderivation of ~b(n) from the assumptions r(n)  and writer(n) k ~(n).Condition 2 allows empty abstraction, that is, the appli-cation of rule \[abs\] to some type assignment u : 13 even if x:a is not one of the assumptions ofu :/3.
This is necessary forthe Curry calculus, which describes all typed X-terms,including those with vacuous abstraction, such as the poly-morphic K combinator Xx.Xy.x : a --~ (/3 --~ a).
However, inthe present work, every abstraction eeds to correspond toan actual functional dependency of the interpretation of aphrase on the interpretation of one of its constituents.Condition 2 can be easily modified to block vacuous abstrac-tion by requiring that x : a ~ r (m)  for the application ofthe \[abs\] rule to a derivation ode m.Condition 3 is a technical restriction to ensure that agiven variable is not abstracted more than once.
That thisrestriction does not affect the class of well-typed functionsfollows immediately from the observation that any Mtermcan be a-converted to an equivalent one in which all boundvariables are distinct.The definition of derivation can be generalized to arbi-trary rules with n premises and one conclusion by defining arule of inference as a n + 1-place relation on pairs of typeassignments and assumption sets.
For example, elements ofthe \[app\] relation would have the general form ((u : a,r l ) ,  iv:  a-~-/3, r2), iv (u)  :/3, F 1 U r2)),  while elementsof the \[abs\] rule without vacuous abstraction would havethe form ((u :/3, r ) ,  (kx.u : a--~/3, r - {x:a})) when-ever x : a ~ F. This definition should be kept in mind whenreading the derived rules of inference presented informallyin the rest of the paper.The natural-deduction format we have been using isintuitively quite appealing but does not make it easy todiscriminate among different possible treatments ofassump-tions, and their effects on what types are derivable.
For this,it is better to use a Gentzen-style s quent format in whichthe assumptions for a type assignment are carried explic-itly.
In a fairly general setting, a sequent r k A is a pair of asequence F of assumptions and a type assignment A, withthe intuitive meaning that A follows from the assumptionsI ~.
The rules of application and abstraction take then theformx :a ,  Fku : /3  FFu:a  Akv :a - -~/3r k Xx.u : a --* fl r ,  A ~ v(u) : flIt is easy to see that, except for the use of sequences ratherthan sets, these two rules correspond irectly to the opera-tions of type assignments and assumptions sets describedunder condition 2 above.
Furthermore, condition 1 corre-sponds in this system to making each sequent A I- A, whereA is some type assignment, an axiom.
Finally, the fact thatwe are interested in assumptions sets rather than assump-tion sequences i encoded by the following three structuralrules (Girard et al 1989):r ,  A,  B, A k C\[exchange\] : F, B, A, A l- CComputational Linguistics Volume 16, Number 1, March 1990 3Fernando C. N. Pereira Categorial Semantics and ScopingA,A, FF B\ [ cont ract ion \ ]  .
A, FFBFbB\[weakening\] : A, F b BThe exchange rule allows us to ignore assumption order, sothe collection of assumptions forms a bag rather than a set.Adding contraction permits us to ignore the number ofoccurrences of an assumption, that is, the assumptioncollection is treated as a set.
Without contraction, novariable can have more than one occurrence.
Finally, weak-ening allows irrelevant elements to be added to the assump-tions without changing what follows from them.
Without it,vacuous abstraction is not possible, since weakening pro-vides the only means of introducing a variable in an assump-tion without having it also in the conclusion (as axiomsrequire).Choices of structural rules and other constraints onallowed sequents lead to a categorial hierarchy whosemembers are systems with varying semantic powers ofsemantic ombination (Moortgat 1988; van Bentham 1989).If we ignore the associated X-expressions and consider onlythe types, the types derivable using the full set of rules areexactly the consequences of the three axioms a ---- a,~ (3--* a), and (a--* (3--" 3')) --~ ((a--~ 3) --*(a--~ y)), which are the polymorphic types of the threecombinators I, K, and S that generate all the closed typedX-calculus terms.
Furthermore, if we interpret --~ as impli-cation, these theorems are exactly those of the pure implica-tional fragment of intuitionistic propositional logic (Curryand Feys 1968; Anderson and Belnap Jr. 1975).
In con-trast, without weakening (vacuous abstraction) we have theweaker system of pure relevant implication R ~ (Andersonand Belnap 1975).3 SEMANTIC COMBINATIONS AND THECURRY CALCULUSIn one approach to the definition of allowable semanticcombinations, the possible meanings of a phrase are exactlythose whose type can be derived by the rules of a semanticcalculus from axioms giving the types of the lexical items inthe phrase.
However, this is far too liberal in that thepossible meanings of English phrases do not depend only onthe types involved but also on the syntactic structure of thephrases.
A possible way out is to encode the relevantsyntactic onstraints in a more elaborate and restrictivesystem of types and rules of inference.
The prime exampleof a more constrained system is the Lambek calculus(Lambek 1958) and its more recent elaborations withincategorial grammar and semantics (van Benthem 1986a,1986b; Hendriks 1987; Moortgat 1988).
In particular,Hendriks (1987) proposes a system for quantifier aising,which however is too restrictive in its coverage to accountfor the phenomena of interest here.Instead of trying to construct a type system and typerules such that free application of the rules starting fromappropriate l xical axioms will generate all and only thepossible meanings of a phrase, I will instead take a moreconservative route related to Montague grammar and earlyversions of GPSG (Gazdar 1982), and use syntactic analy-ses to control semantic derivations.First, a set of derived rules will be used in addition to thebasic rules of application and abstraction.
Semantically,the derived rules will add no new inferences, ince they willmerely codify inferences already allowed by the basic rulesof the calculus of functionality.
However, they provide thesemantic ounterparts ofcertain syntactic rules.Second, the use of some semantic rules must be licensedby a particular syntactic rule and the premises in theantecedent of the semantic rule must correspond in arule-given way to the meanings of the constituents com-bined by the syntactic rule.
As a simple example using acontext-free syntax, the syntactic rule S ~ NP VP mightlicense the function application rule \[app\] with e the typeof the meaning of the NP and e ~ t the type of themeaning of the VP.Third, the domain of types will be enriched with a fewnew type constructors, in addition to the function typeconstructor ---~.
From the semantic point of view, these typeconstructors add no new types, but allow a convenientencoding of rule applicability constraints motivated bysyntactic considerations.
This enrichment of the formaluniverse of types for syntactic purposes is familiar fromMontague grammar (Montague 1973), where it is used todistirguish different syntactic realizations of the same se-mantic type, and from categorial grammar (Lambek 1958;Steeclman 1987), where it is used to capture syntactic wordorder constraints.Together, the above refinements allow the syntax oflanguage to restrict what potential semantic ombinationsare actually realized.
Any derivations will be sound withrespect o lapp\] and \[abs\], but many derivations allowedby these rules will be blocked.4 DERIVED RULESFor the derived rules, we enrich the type system with aformal type constructor quant (q), where q is a quantifier,that is, a value of type (e ----, t) ---, t, and two type constants(nullary constructors) pron for pronoun assumptions andtrace, for traces in relative clauses.
It is important toobserve that the types resulting from the application ofthese constructors are not to be taken as being subtypes ofe, and thus the rules involving them should not be seen astype subsumption rules.
Instead, the new formal type con-structors erve to constrain possible derivations in a similarway to the directed function type constructors of Lambekcalc~:lus (Lambek 1958) or the extraction constructor usedby Moortgat o handle long-distance dependencies (Moort-gat 1988).Because of their particular nature, the formal type con-structors are handled in a special way diverging somewhat4 Computational Linguistics Volume 16, Number 1, March 1990Fernando C. N. Pereira Categorial Semantics and Seepingfrom the usual structure of natural-deduction proof sys-tems.
Specifically, each formal type constructor is intro-duced as an assumption by appropriate syntactic licensing.However, the types resulting from the formal constructorsdo not combine with any other types, so the only way ofhaving the associated variables participate in a derivation isto apply immediately licensing rules that replace the for-mal type by an appropriate semantic type (e in all casesconsidered here).
Paired with these rules we have abstrac-tion rules that discharge formal type assumptions by ab-straction.
Nevertheless, we will see that from a derivationinvolving these rules where all the formal type assumptionshave been discharged, it is straightforward to construct aderivation in the functionality calculus starting from thesame lexical assumptions and yielding the same result.4.1 TRACE LICENSING AND ABSTRACTIONThe following two rules deal with traces and the meaning ofrelative clauses:(x : trace)x : t race  r : t\ [ t race - l i c \ ]  : \ [ t race -abs \ ]  :x :e  hx.r : e--~ tRule \[trace-l ic\] is licensed by the occurrence of a trace inthe syntax, and rule \[trace-abs\]  by the construction of arelative clause from a sentence containing a trace.
4Since no rule can derive an expression of type trace,expressions of that type can only appear as assumptions.Furthermore, no rule except \[trace-lie\] accepts premises ofthat type.
Therefore, in a completed erivation any occur-rence of an expression of type trace must be a premise of\[trace-l ie\] and be later discharged by a use of \ [ t race-abs\ ] .That is, use of the trace rules will always lead to derivationsmatching the following schemax : trace \]x :eConsequently, any type assignment derived with the help ofthe trace rules could already have been derived with lapp\]and \[abs\] alone, as was claimed in the previous ection.Figure 2 shows the application of the trace rules to thederivation of an interpretation for the N "car that Johnowns," with the assumption that the relative pronoun "that"has type that: (e - -*  t) --* (e--~ t) --- (e - -*  t), that is, afunction that combines two properties into a property.With the further assumption that "that" corresponds inthis case to property conjunctionthat ~ Xr.Xn.Xx.n(x) /~ r(x),the result of the derivation can be reduced to the morefamiliar formXx.car(x) A own(x)(j)that is, the property of being a car that John owns.4.2 BOUND ANAPHORA LICENSING ANDABSTRACTIONThe analysis of bound anaphora brings up a wide range ofissues in syntax, semantics, and pragmatics, most of whichI will ignore in this paper.
I will assume that possiblecoreferences are determined elsewhere and that the role ofthe bound anaphora rules here is simply to derive theappropriate semantic interpretation for phrases involvingpronouns.
Two approaches are possible here.
Working withthe functionality rules alone, a noun phrase will be associ-ated to an assumption of the form u : e. The interpretationof a pronoun coindexed with that noun phrase will beanother occurrence of the assumption.
When the anteced-ent is a trace or a quantified noun phrase (interpretation ofquantified noun phrases is discussed in the next section),the assumption will eventually be discharged.
The defini-tion of derivation in Section 2 ensures that all occurrencesof u will be bound by the same application of \[abs\].The second approach relies on a pair of derived rules,pronoun licensing and abstraction.
These rules of course donot add new semantic consequences, but facilitate therepresentation of the syntactic licensing of bound ana-r : tXx.r : e - - -~  t lBut this can be mapped irectly into the schematic deriva-tionx :e  Ir : tAx.r : e ---* t 1y: traceIowns own: e-->e-~t y: e \[trace-lie\]John j :e  own(y):~--~t \[applown(y)O): t \[appl Ithat that:(~--~t)--*(e~t)-~(e~t) ~.y.own(y)(j): e--~t \[trace-ebslcar car:~--~t that(~.y.own(y)(j)): (e---~t)~(e~t) \[app\]that(~.y.own~)(j))(car): e--~t \[applFigure 2 Using the Trace Rules.Computational Linguistics Volume 16, Number 1, March 1990 5Fernando C. N. Pereira Categoriai Semantics and Seopingphora.
The two rules are as follows:(x : pron)x :pron  s: .a u : f l\[pron-lic\] : x:  e \[pron-abs\] : (~x .s ) (u )  : otThe pronoun resolution rule \[pron-abs\] applies only whenu : fl is an undischarged assumption ofs : a such that eitherfl is trace or quant (q) for some quantifier q, or theassumption is licensed by some proper noun.These rules deal only with the construction of the mean-ing of phrases containing bound anaphora.
In a moredetailed grammar, the licensing of both rules would befurther estricted by linguistic onstraints on coreference--for instance, those usually associated with c-command(Reinhart 1983), which seem to need access to syntacticinformation (Williams 1986).
In particular, the rules asgiven do not by themselves enforce any constraints on thepossible antecedents of reflexives.The soundness of the rules can be seen by noting that theschematic derivationx : pron ~x :eS:o/ U:~(Xx .s ) (u )  :a  tcorresponds simply to a schematic derivation involvingmultiple uses of the assumption u : flu:~.
.
.u :#six~u\] : ,~where s \[x/u\] denotes the result of substituting u for everyfree occurrence ofx in s.Figure 3 shows a simple derivation involving the pronounrules.
The last derivation ode in the figure is the applica-tion of \[pron-abs\] to the assumption to be dischargedx : pron and the antecedent assumption j : e, with result(kx.bored (x)( j ) ) ( j )  --- bored (j)( j) .
A more interestingcase, involving interactions between pronoun and quantifierassumptions, occurs in the derivation of Figure 5 for sen-tence (2).4.3 QUANTIFIER RAISINGThe rules discussed earlier provide some of the auxiliarymachinery required to illustrate the free-variable con-straint.
However, the main burden of enforcing the con-boredJohnhimself x:.
pron lIb o r e d ~  e \[pron-lie\]j : ~  e--~t \[app\]bored(x)(j): t \[app\]bored(j)(j): tl \[pron-abs\]Figure 3 Using the Pronoun Rules.straint falls on the rules responsible for quantifier aising,and therefore I will cover in somewhat greater detail thederivation of those rules from the basic rules of functional-ity.I will follow here the standard view (Montague 1973;Barwise and Cooper 1981) that the meanings of naturallanguage determiners are generalized quantifiers, withtype (e ---* t) ---, (e ---* t) ~ t. For example, the meaning ofevery would be Xr.ks.Vx.r(x) =~ s(x),  and the meaning ofthe noun phrase every man hs.Vx.man(x)=~ s(x).
Tointerpret the combination of a quantified noun phrase withthe phrase containing it that forms its scope, we apply themeaning of the noun phrase to a property s derived from themeaning of the scope.
The purpose of devices such asquantifying-in Montague grammar, Cooper storage, orquantifier raising in transformational grammar is to deter-mine a scope for each noun phrase in a sentence.
From asemantic point of view, the combination of a noun phrasewith its scope, most directly expressed by Montague'squantifying-in rules, s corresponds to the following sche-matic derivation in the functionality calculusx :e  1s : tXx.s :e~t  1 q: (e~t ) - - * t6.
q(Xx.s) : twhere the assumption x : e is introduced in the derivationat a position corresponding to the occurrence in the sen-tence of the noun phrase with meaning q.
In Montaguegrammar, this correspondence is nforced by using a notionof syntactic ombination that does not respect the syntacticstructure of sentences with quantified noun phrases.
Coo-per storage was in part developed to cure this deficiency.The following derived rules achieve the same effect:6 Computational Linguistics Volume 16, Number 1, March 1990Fernando C. N. Pereira Categorial Semantics and Seoping\ [quant - l i c \ ]  :q: (e~t )~t  x :quant(q)x :e(x : quant(q))formy :a  Is : t\[quant-abs\] : q(Xx.s)  : tRule \[quant-lic\] is licensed by a quantified noun phrase.Rule \[quant-abs\] is not keyed to any particular syntacticconstruction, but instead may be applied whenever itspremises are satisfied.
It is easy to see that any use of\[quant-lic\] and \[quant-abs\] in a derivationq : (e - -~t )~t  x :quant(q)  2x :eU:fl  1q: (e - - - * t )~t  x :quant(q)  lx :es : tq(Xx.s)  : t 1can be justified by translating it into an instance of theschematic derivation (6).
Furthermore, quantifier assump-tions can only arise and be discharged in this way.Figure 4 shows the use of the quantification rules in aderivation for the preferred reading of the sentence "Everyguest brought a dish."
The other reading could be derivedin a similar manner.Now, the free-variable constraint plays a role in situa-tions in which the quantifier itself depends on assumptionsthat must be discharged, and forbids derivations of theevery guestevery: (e-->t)-->(e--~t)--~t guest: e~t\[appl every(guest): (e-*t)--*t g. quant(every(guest)) 2a dish \[quanl-lie\] g: e a: (e-.-~t)---~(e-~t)--4t dish:e--->t~ ~ d:quant(a(dish)) t~ broughtX ~ g h t : ~  d:e\[app\] brough~ e~tI\[quant-abs\] a(dish)(7~d.brought(d)(g)):  1I\[quant-abs\] every(guest)O.g.a(dish)(Xd.brought(d)(g))):Figure 4 Using the Quantifier Rules.s : tq(Xx.s)  : t zthat is, derivations in which an assumption is dischargedafter assumptions it depends on.
But such a derivationmaps to the following in the functionality calculus:x :e  2v:-y (a)Xy.v : a --~ 71u : ~ (b) y : a ls : tXx.s  : e ---- t 2 q : (e ---, t) --, tq(Xx.s)  :tThe problem with this derivation is that assumption y : a isdischarged at (a), but it is not an assumption for thepremise v : 3' of (a).
Even if we allow vacuous abstraction sothat an assumption y : a can be discharged at that point,that discharge will not include the assumption y : a (b) forthe quantifier q, which will thus be left undischarged.
In theGentzen-style rules given in Section 2, step (a) can onlyarise after an application of weakening to introduce y :/3,but on the other hand, assumption (b) can only, be elimi-nated independently b  abstraction, since the alternative ofcombining it by contraction with the other occurrence ofy : a is only available after the assumptions for the left andright premises of the application of q to its scope.
But that istoo late, because the other occurrence of y: /3 has beendischarged by then.
Therefore, there is no choice but toComputational Linguistics Volume 16, Number 1, March 1990 7Fernando C. N. Pereira Categorial Semantics and Scopingdischarge (b) after q is combined with its scope.
Put inanother way, q cannot be raised outside the scope ofabstraction for the variable y occurring free in q, which isexactly what is going on in Example (4) ("An author whoJohn has read every book by arrived.")
A correct schematicderivation is thenx : e 1 (b) yct 2s : tXx.s : e - -~  t I q : (e  -- - ,  t )  - - ,  tq(Xx.s) : tu:#Xy.u : .~  ~ ~The free-variable constraint is reduced to a constraint onderivations imposed by the basic theory of functionality,dispensing with a logical-form representation f the con-straint.
Figure 5 shows a derivation for the only possiblescoping of sentence (2) when every man is selected as theantecedent ofhis.
To allow for the selected coreference, thepronoun assumption must be discharged before the quanti-fier assumption (a) for every man.
Furthermore, the con-straint on dependent assumptions requires that the quanti-fier assumption (c) for a fr iend o f  his be discharged beforethe pronoun assumption (b) on which it depends.
It thenfollows that assumption (c) will be discharged before as-sumption (a), forcing wide scope for every man.every man hisevery: (e~t)~(e~t)---~t rnan:e-~t h pronfriend ofnt'ever man 3 \[app\] every(man): (e--*t)--*t m: qua t Y( )) f r iend-o f :~h:  ea\[quant-lic\] m: e a: (e--4t)---~(e~t)--*t \[app\] fi'iend-of(h): e--*t~ lapp\] a(friend-of(h)): (e-~t)~t f: quant(a(friend-of(h))) \\[appl saw(/) (re)it\[quant-abs\] a(friend-of(h) (Zf.saw(\[)(m)): t1I\[pron-abs\] a(friend-of(m) )(~.f.saw(f)(m)): t zI\[quant-abs\] every(man)(km.a(friand-of(m))(~.saw(l)(m))): t 3Figure 5 Derivation Involving Anaphora ndQuantification.5 DISCUSSIONThe approach to semantic interpretation outlined aboveavoids the need for manipulations of logical forms in deriv-ing the possible meanings of quantified sentences.
It alsoavoids the need for such devices as distinguished variables(Gazdar 1982; Cooper 1983) to deal with trace abstraction.Instead, specialized versions of the basic rule of functionalabstraction are used.
To my knowledge, the only otherapproaches tothese problems that do not depend on formaloperations on logical forms are those based on specializedlogics of type change, usually restrictions of the Curry orLambek systems (van Benthem 1986a; Hendriks 1987;Moortgat 1988).
In those accounts, a phrase P with mean-ing p of type T is considered to have also alternativemeaning p' of type T', with the corresponding combinationpossibi\]ities, if p': T' follows from p: T in the chosen logic.The central problem in this approach is to design a calculusthat will cover all the actual semantic alternatives (forinstance, all the possible quantifier scopings) without intro-ducing spurious interpretations.
For quantifier raising, thesystem of Hendriks eems the most promising so far, but itis at present oo restrictive to support raising from noun-phrase complements.Formal types and derived rules are a rather special-purpose mechanism for constraining semantic derivations.A more general view, based on a notion of the possiblerelationships between syntactic and semantic algebra isdesirable here, maybe following from the notion of projec-tion proposed for lexical-functional grammar (Halvorsenand Kaplan 1988).An important question I have finessed here is that of thecompositionatity of the proposed semantic alculus.
It isclear that the application of semantic rules is governed onlyby the existence of appropriate syntactic licensing and bythe availability of premises of the appropriate types.
Inother words, no rule is sensitive to the fo rm of any of themeanings appearing in its premises.
However, there may besome doubt as to the status of the basic abstraction rule andthose derived from it.
After all, the use of X-abstraction ithe consequent of those rules seems to imply the constraintthat the abstracted object should formally be a variable.However, this is only superficially the case.
I have used theformal operation of X-abstraction to represent functionalabstraction i this paper, but functional abstraction itself isindependent of its formal representation in the X-calculus.All that is required is a calculus of functional objects inwhich those objects atisfy their usual algebraic properties,such as what is provided by X-Prolog (Miller and Nadathur1986).
For instance, in a X-Prolog realization of the pro-posed system, abstractions arising from the \[abs\] rule or itsderived rule surrogates could be calculated through a com-bination of universal quantification i the metalanguage(the language in which the proof system is described) andhigher-order functional equations olved by higher-orderunification (Felty and Miller 1988).
Syntactic manipula-8 Computational Linguistics Volume 16, Number 1, March 1990Fernando C. N. Pereira Categorial Semantics and Scopingtion of object-level variables and binders would be neithernecessary nor possible.The investigation reported in this paper was motivatedby the use of the free-variable constraint in an earl iersystem of semantic- interpretat ion rules (Pollack and Pereira1988; Pereira and Pollack in press).
Those rules operate onobjects formally analogous to sequents, with assumptionsfor quantif ied noun phrases and pronouns as well as forsome other purposes.
It would be worth seeing to whatextent those formal operations on sequent-l ike objects canbe mapped onto the sequent rules for some version of thefunctional ity calculus.Verb-phrase llipsis and gapping constructions provideanother possible area of application for the kind of catego-rial semantics ketched in this paper.
A semantic accountof those constructions requires the extraction of the mean-ing of elided material  from the meaning of a source clause.Intermediate results of appropriate type in derivations ofthe meaning of the source clause may provide the possiblemeanings of the elided material.
In other words, possibleantecedent meanings would be obtained by semantic reanal-ysis of the source clause, where a semantic reanalysis of thesource clause is just an alternative categorial derivation ofthe source clause's meaning.
Init ial  results along these lineswill be reported elsewhere (Dalrymple t al.
1990).ACKNOWLEDGMENTSThe work described here was carried out in part at SRI International andsupported by a contract with the Nippon Telephone and TelegraphCorporation and a gift from the Systems Development Foundation as partof a coordinated research effort with the Center for the Study of Languageand Information, Stanford University, Stanford, CA.
Mary Dalrymple,David Israel, Aravind Joshi, Dale Miller, Martha Pollack, and StuartShieber made useful suggestions and comments.
This paper is a revisedand expanded version of "A Calculus for Semantic Composition andScoping" presented at the 1989 meeting of the Association for Computa-tional Linguistics (Pereira 1989).REFERENCESAnderson, A. R. and Belnap, Jr., N. D. 1975 Entailment: The Logic ofRelevance and Necessity, Volume I. Princeton University Press, Prince-ton, NJ.Alshawi, H.; Carter, D. M.; van Eijck, J.; Moore, R. C.; Moran, D. B.;Pereira, F. C. N.; Pulman, S. G.; and Smith, A. G. 1989 "ResearchProgramme in Natural Language Processing: Final Report."
Technicalreport, Cambridge Research Centre, SRI International, Cambridge,U.K.Barwise, J. and Cooper, R. 1981 "Generalized Quantifiers and NaturalLanguage."
Linguistics and Philosophy, 4:159-219.Curry, H. B. and Feys, R. 1968 Combinatory Logic, Volume L North-Holland, Amsterdam, Netherlands.Cooper, R. 1983 Quantification and Syntactic Theory.
D. Reidel,Dordrecht, Netherlands.Dalrymple, M.; Shieber, S. M.; and Pereira, F. C. N. 1990 "Ellipsis andHigher-Order Unification," Unpublished paper, 1990.Dowty, D. R.; Wall, R. E.; and Peters, S. 1981 "Introduction to MontagueSemantics," Volume 11 of Synthese Language Library.
D. Reidel,Dordrecht, Netherlands.Felty, A. and Miller, D. 1988 Specifying Theorem Provers in a Higher-Order Logic Programming Language.
Technical Report MS-CIS-88-12, Department of Computer and Information Science, University ofPennsylvania, Philadelphia, PA.Gazdar, G. 1982 "Phrase Structure Grammar," In P. Jacobson and G. K.Pullum (eds.
), The Nature of Syntactic Representation, D. Reidel,Dordrecht, Netherlands, 131-186.Girard, J.-Y.
; Lafont, Y.; and Taylor, P. 1989 Proofs and Types, Volume7 of Cambridge Tracts in Theoretical Computer Science.
CambridgeUniversity Press, Cambridge, U.K.Helm, I. R. 1982 The Semantics ofDefinite and Indefinite Noun Phrases.Ph.D.
Thesis, Department of Linguistics, University of Massachusetts,Amherst, MA.Hendriks, H. 1987 "Type Change in Semantics: The Scope of Quantifica-tion and Coordination," In E. Klein and J. van Benthem (eds.
), Catego-ries, Polymorphism and Unification, Centre for Cognitive Science,University of Edinburgh, Edinburgh, U.K., 95-120.Halvorsen, P.-K. and Kaplan, R. M. 1988 "Projections and SemanticDescription in Lexical-Functional Grammar," In Proceedings of theInternational Conference on Fifth Generation Computer Systems,Tokyo, Japan, 1116-1122.Howard, W. A.
1980 The Formulae-As-Types Notion of Construction,"In J. P. Seldin and J. R. Hindley (eds.
), To H. B. Curry: Essays onCombinatory Logic, Lambda Calculus and Formalism, AcademicPress, London, 479-490.Hobbs, J. R. and Shieber, S. M. 1987 "An Algorithm for GeneratingQuantifier Scopings."
Computational Linguistics, 13:47-63.Lambek, J.
1958 "The Mathematics of Sentence Structure."
AmericanMathematical Monthly, 65:154-170.Lambek, J.
1980 "From X-Calculus to Cartesian Closed Categories," InJ.
P. Seldin and J. R. Hindley (eds.
), To H. B. Curry: Essays onCombinatory Logic, Lambda Calculus and Formalism, AcademicPress, London, 375-402.May, R. 1985 Logical Form: Its Structure and Derivation, Volume 12 ofLinguistic Inquiry Monographs.
MIT Press, Cambridge, MA.Miller, D. A. and Nadathur, G. 1986 "Higher-Order Logic Programming,"In E. Shapiro (ed.
), Third International Conference on Logic Program-ming, Springer-Verlag, Berlin.Montague, R. 1973 "The Proper Treatment ofQuantification i OrdinaryEnglish," In R. H. Thomason (ed.
), Formal Philosophy.
Yale Univer-sity Press, New Haven, CT.Moortgat, M. 1988 Categorial Investigations: Logical and LinguisticAspects of the Lambek Calculus.
Ph.D. Thesis, University of Amster-dam, Amsterdam, Netherlands.Moran, D. B.
1988 "Quantifier Scoping in the SRI Core LanguageEngine," Proceedings ofthe 26th Annual Meeting of the Associationfor Computational Linguistics, 33-47.Partee, B. and Bach, E. 1984 "Quantification, Pronouns and VPAnaphora," In J.
A. G. Groenendijk, T. M. V. Janssen, and M. B. J.Stokhof (eds.
), Truth, Interpretation a d Information, Foris, Dordrecht,Netherlands, 99-130.Pereira, F. C. N. 1989 "A Calculus for Semantic Composition andScoping," Proceedings ofthe 27th Annual Meeting of the Associationfor Computational Linguistics, 152-160.Pollack, M. E. and Pereira, F. C. N. 1988 "An Integrated Framework forSemantic and Pragmatic Interpretation," Proceedings of the 26thAnnual Meeting of the Association for Computational Linguistics,75-86.Pereira, F. C. N. and Pollack, M. E. "Incremental Interpretation,"Artificial Intelligence, in press.Prawitz, D. 1965 Natural DeductiorL" A Proof-Theoretical Study.
Almqvistand Wiksell, Uppsala, Sweden.Reinhart, T. 1983 Anaphora nd Semantic Interpretation.
Croom Helm,London.Roberts, C. 1987 Modal Subordination, Anaphora nd Distributivity.Ph.D.
Thesis, Department of Linguistics, University of Massachusetts,Amherst, MA.Stenlund, S. 1972 Combinators, h-Terms and Proof Theory.
D. Reidcl,Dordrecht, Netherlands.Computational Linguistics Volume 16, Number 1, March 1990 9Fernando C. N. Pereira Categorial Semantics and ScopingSteedman, M. 1987 "Combinatory Grammars and Parasitic Gaps.
"Natural Language and Linguistic Theory, 5(3):403-439.Vanlchn, K. A.
1978 Determining the Scope of English Quantifiers.
M.S.thesis, Massachusetts Institute of Technology, Cambridge, MA.van Benthem, J.
1986a "Categorial Grammar and Lambda Calculus," InD.
Skordev (ed.
), Mathematical Logic and its Application, PlenumPress, New York, 39-60.van Benthem, J.
1986b "Essays in Logical Semantics," Volume 29 ofStudies in Linguistics and Philosophy.
D. Reidel, Dordrecht, Nether-lands.van Bcnthem, J.
1989 "Categoriat Grammar and Type Theory."
Journalof Philosophical Logic, In press, 1990.van Eijck, J.
1985 Aspects of Quantification i  Natural Language.
Ph.D.Thesis, University of Groningen, Groningen, Netherlands.van Riemsdijk, H. and Williams, E. 1986 Introduction tothe Theory ofGrammar, Volume 12 of Current Studies in Linguistics.
MIT Press,Cambridge, MA.Williams, E. 1986 "A Reassignment of the Functions of LF."
LinguisticInquiry, 17(2):265-299.NOTES1.
In all the examples that follow, the pronoun and its intended anteced-ent are italicized.
As usual, starred examples are supposed to beungrammatical.2.
In fact, this is a perfectly good open well-formed formula andtherefore the precise formulation of the constraint is more delicatethan seems to be realized in the literature.3.
This particular example and its analysis were chosen just as theshortest plausible example requiring both application and abstrac-tion, not as making substantive linguistic or semantic claims.4.
These rules are quite similar to the extraction i troduction rule ofMcortgat (1988).5.
In :general, quantifying-in has to apply not only to proposition-typescopes but also to property-type scopes (meanings of common ounphrases and verb phrases).
Extending the argument that follows tothose cases offers no difficulties.10 Computational Linguistics Volume 16, Number 1, March 1990
