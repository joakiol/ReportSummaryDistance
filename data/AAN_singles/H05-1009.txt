Proceedings of Human Language Technology Conference and Conference on Empirical Methods in Natural LanguageProcessing (HLT/EMNLP), pages 65?72, Vancouver, October 2005. c?2005 Association for Computational LinguisticsNeurAlign: Combining Word Alignments Using Neural NetworksNecip Fazil Ayan, Bonnie J. Dorr and Christof MonzDepartment of Computer ScienceUniversity of MarylandCollege Park, MD 20742{nfa,bonnie,christof}@umiacs.umd.eduAbstractThis paper presents a novel approach tocombining different word alignments.
Weview word alignment as a pattern classifi-cation problem, where alignment combi-nation is treated as a classifier ensemble,and alignment links are adorned with lin-guistic features.
A neural network modelis used to learn word alignments from theindividual alignment systems.
We showthat our alignment combination approachyields a significant 20-34% relative er-ror reduction over the best-known align-ment combination technique on English-Spanish and English-Chinese data.1 IntroductionParallel texts are a valuable resource in natural lan-guage processing and essential for projecting knowl-edge from one language onto another.
Word-levelalignment is a critical component of a wide range ofNLP applications, such as construction of bilinguallexicons (Melamed, 2000), word sense disambigua-tion (Diab and Resnik, 2002), projection of languageresources (Yarowsky et al, 2001), and statistical ma-chine translation.
Although word-level aligners tendto perform well when there is sufficient training data,the quality decreases as the size of training data de-creases.
Even with large amounts of training data,statistical aligners have been shown to be suscepti-ble to mis-aligning phrasal constructions (Dorr et al,2002) due to many-to-many correspondences, mor-phological language distinctions, paraphrased andfree translations, and a high percentage of functionwords (about 50% of the tokens in most texts).This paper presents a novel approach to align-ment combination, NeurAlign, that treats each align-ment system as a black box and merges their outputs.We view word alignment as a pattern classificationproblem and treat alignment combination as a classi-fier ensemble (Hansen and Salamon, 1990; Wolpert,1992).
The ensemble-based approach was devel-oped to select the best features of different learningalgorithms, including those that may not produce aglobally optimal solution (Minsky, 1991).We use neural networks to implement theclassifier-ensemble approach, as these have previ-ously been shown to be effective for combining clas-sifiers (Hansen and Salamon, 1990).
Neural netswith 2 or more layers and non-linear activation func-tions are capable of learning any function of thefeature space with arbitrarily small error.
Neuralnets have been shown to be effective with (1) high-dimensional input vectors, (2) relatively sparse data,and (3) noisy data with high within-class variability,all of which apply to the word alignment problem.The rest of the paper is organized as follows: InSection 2, we describe previous work on improv-ing word alignments and use of classifier ensemblesin NLP.
Section 3 gives a brief overview of neu-ral networks.
In Section 4, we present a new ap-proach, NeurAlign, that learns how to combine indi-vidual word alignment systems.
Section 5 describesour experimental design and the results on English-Spanish and English-Chinese.
We demonstrate thatNeurAlign yields significant improvements over thebest-known alignment combination technique.65jiHidden layerOutput layerInput layerwijaiFigure 1: Multilayer Perceptron Overview2 Related WorkPrevious algorithms for improving word alignmentshave attempted to incorporate additional knowledgeinto their modeling.
For example, Liu (2005) usesa log-linear combination of linguistic features.
Ad-ditional linguistic knowledge can be in the form ofpart-of-speech tags.
(Toutanova et al, 2002) or de-pendency relations (Cherry and Lin, 2003).
Otherapproaches to improving alignment have combinedalignment models, e.g., using a log-linear combina-tion (Och and Ney, 2003) or mutually independentassociation clues (Tiedemann, 2003).A simpler approach was developed by Ayan etal.
(2004), where word alignment outputs are com-bined using a linear combination of feature weightsassigned to the individual aligners.
Our method ismore general in that it uses a neural network modelthat is capable of learning nonlinear functions.Classifier ensembles are used in several NLP ap-plications.
Some NLP applications for classifier en-sembles are POS tagging (Brill and Wu, 1998; Ab-ney et al, 1999), PP attachment (Abney et al, 1999),word sense disambiguation (Florian and Yarowsky,2002), and parsing (Henderson and Brill, 2000).The work reported in this paper is the first appli-cation of classifier ensembles to the word-alignmentproblem.
We use a different methodology to com-bine classifiers that is based on stacked general-ization (Wolpert, 1992), i.e., learning an additionalmodel on the outputs of individual classifiers.3 Neural NetworksA multi-layer perceptron (MLP) is a feed-forwardneural network that consists of several units (neu-rons) that are connected to each other by weightedlinks.
As illustrated in Figure 1, an MLP consistsof one input layer, one or more hidden layers, andone output layer.
The external input is presented tothe input layer, propagated forward through the hid-den layers and creates the output vector in the outputlayer.
Each unit i in the network computes its outputwith respect to its net input neti =?j wijaj , wherej represents all units in the previous layer that areconnected to the unit i.
The output of unit i is com-puted by passing the net input through a non-linearactivation function f , i.e.
ai = f(neti).The most commonly used non-linear activationfunctions are the log sigmoid function f(x) =11+e?x or hyperbolic tangent sigmoid functionf(x) = 1?e?2x1+e?2x .
The latter has been shown to bemore suitable for binary classification problems.The critical question is the computation ofweights associated with the links connecting theneurons.
In this paper, we use the resilient back-propagation (RPROP) algorithm (Riedmiller andBraun, 1993), which is based on the gradient descentmethod, but converges faster and generalizes better.4 NeurAlign ApproachWe propose a new approach, NeurAlign, that learnshow to combine individual word alignment sys-tems.
We treat each alignment system as a classi-fier and transform the combination problem into aclassifier ensemble problem.
Before describing theNeurAlign approach, we first introduce some termi-nology used in the description below.Let E = e1, .
.
.
, et and F = f1, .
.
.
, fs be twosentences in two different languages.
An alignmentlink (i, j) corresponds to a translational equivalencebetween words ei and fj .
Let Ak be an align-ment between sentences E and F , where each el-ement a ?
Ak is an alignment link (i, j).
LetA = {A1, .
.
.
, Al} be a set of alignments betweenE and F .
We refer to the true alignment as T , whereeach a ?
T is of the form (i, j).
A neighborhoodof an alignment link (i, j)?denoted by N(i, j)?consists of 8 possible alignment links in a 3?3 win-dow with (i, j) in the center of the window.
Eachelement of N(i, j) is called a neighboring link of(i, j).Our goal is to combine the information inA1, .
.
.
, Al such that the resulting alignment iscloser to T .
A straightforward solution is to take theintersection or union of the individual alignments, or66perform a majority voting for each possible align-ment link (i, j).
Here, we use an additional modelto learn how to combine outputs of A1, .
.
.
, Al.We decompose the task of combining word align-ments into two steps: (1) Extract features; and (2)Learn a classifier from the transformed data.
We de-scribe each of these two steps in turn.4.1 Extracting FeaturesGiven sentences E and F , we create a (potential)alignment instance (i, j) for all possible word com-binations.
A crucial component of building a classi-fier is the selection of features to represent the data.The simplest approach is to treat each alignment-system output as a separate feature upon which webuild a classifier.
However, when only a few align-ment systems are combined, this feature space is notsufficient to distinguish between instances.
One ofthe strategies in the classification literature is to sup-ply the input data to the set of features as well.While combining word alignments, we use twotypes of features to describe each instance (i, j):(1) linguistic features and (2) alignment features.Linguistic features include POS tags of both words(ei and fj) and a dependency relation for one ofthe words (ei).
We generate POS tags using theMXPOST tagger (Ratnaparkhi, 1996) for Englishand Chinese, and Connexor for Spanish.
Depen-dency relations are produced using a version of theCollins parser (Collins, 1997) that has been adaptedfor building dependencies.Alignment features consist of features that are ex-tracted from the outputs of individual alignment sys-tems.
For each alignmentAk ?
A, the following aresome of the alignment features that can be used todescribe an instance (i, j):1.
Whether (i, j) is an element of Ak or not2.
Translation probability p(fj |ei) computedover Ak13.
Fertility of (i.e., number of words in F that arealigned to) ei in Ak4.
Fertility of (i.e., number of words in E that arealigned to) fj in Ak5.
For each neighbor (x, y) ?
N(i, j), whether(x, y) ?
Ak or not (8 features in total)6.
For each neighbor (x, y) ?
N(i, j), transla-tion probability p(fy|ex) computed overAk (8features in total)It is also possible to use variants, or combinations,of these features to reduce feature space.Figure 2 shows an example of how we transformthe outputs of 2 alignment systems, A1 and A2, foran alignment link (i, j) into data with some of thefeatures above.
We use -1 and 1 to represent theabsence and existence of a link, respectively.
Theneighboring links are presented in row-by-row order.XXXXXXA1A2ei-1eiei+1fj-1 fj fj+11 (for A1), 0 (for A2)fertility(fj)2 (for A1), 1 (for A2)fertility(ei)2 (for A1), 3 (for A2)total neighbors1, -1, -1, 1, 1, -1, -1, 1neighbors (A1?
A2)1, -1, -1, -1, 1, -1, -1, 1neighbors (A2)-1, -1, -1, 1, -1, -1, -1, 1neighbors (A1)1 (for A1), -1 (for A2)outputs of alignersModifierrel(ei)Noun, Preppos(ei) , pos(fj)Features for the alignment link ( i , j )ei-1eiei+1fj-1 fj fj+1Figure 2: An Example of Transforming Alignmentsinto Classification DataFor each sentence pair E = e1, .
.
.
, et and F =f1, .
.
.
, fs, we generate s ?
t instances to representthe sentence pair in the classification data.Supervised learning requires the correct output,which here is the true alignment T .
If an alignmentlink (i, j) is an element of T , then we set the correctoutput to 1, and to ?1, otherwise.4.2 Learning A ClassifierOnce we transform the alignments into a set of in-stances with several features, the remaining task is tolearn a classifier from this data.
In the case of wordalignment combination, there are important issues toconsider for choosing an appropriate classifier.
First,there is a very limited amount of manually annotateddata.
This may give rise to poor generalizations be-cause it is very likely that unseen data include lotsof cases that are not observed in the training data.Second, the distribution of the data according tothe classes is skewed.
In a preliminary study on anEnglish-Spanish data set, we found out that only 4%of the all word pairs are aligned to each other by hu-mans, among a possible 158K word pairs.
More-over, only 60% of those aligned word pairs were1The translation probabilities can be borrowed from the ex-isting systems, if available.
Otherwise, they can be generatedfrom the outputs of individual alignment systems using likeli-hood estimates.67A1 AlAiFeatureExtraction ClassificationData Neural NetLearningOutputTruthEnrichedCorpusFigure 3: NeurAlign1?Alignment CombinationUsing All Data At Oncealso aligned by the individual alignment systemsthat were tested.Finally, given the distribution of the data, it is dif-ficult to find the right features to distinguish betweeninstances.
Thus, it is prudent to use as many featuresas possible and let the learning algorithm filter outthe redundant features.Below, we describe how neural nets are used atdifferent levels to build a good classifier.4.2.1 NeurAlign1: Learning All At OnceFigure 3 illustrates how we combine align-ments using all the training data at the same time(NeurAlign1).
First, the outputs of individual align-ments systems and the original corpus (enrichedwith additional linguistic features) are passed to thefeature extraction module.
This module transformsthe alignment problem into a classification problemby generating a training instance for every pair ofwords between the sentences in the original corpus.Each instance is represented by a set of features (de-scribed in Section 4.1).
The new training data ispassed to a neural net learner, which outputs whetheran alignment link exists for each training instance.4.2.2 NeurAlign2: Multiple Neural NetworksThe use of multiple neural networks (NeurAlign2)enables the decomposition of a complex probleminto smaller problems.
Local experts are learnedfor each smaller problem and these are then merged.Following Tumer and Ghosh (1996), we apply spa-tial partitioning of training instances using proxim-ity of patterns in the input space to reduce the com-plexity of the tasks assigned to individual classifiers.We conducted a preliminary analysis on 100 ran-domly selected English-Spanish sentence pairs froma mixed corpus (UN + Bible + FBIS) to observe theSPANISHAdj Adv Comp Det Noun Prep VerbE Adj 18 - - 82 40 96 66N Adv - 8 - - 50 67 75G Comp - - 12 - 46 37 96L Det - - - 10 60 100 -I Noun 42 77 100 94 23 98 84S Prep - - - 93 70 22 100H Verb 42 - - 100 66 78 43Table 1: Error Rates according to POS Tags forGIZA++ (E-to-S) (in percentages)ClassificationDataDataPartitioningOutputTruthPartaPartiPartzNNaNNzNNi NNCombinationFigure 4: NeurAlign2?Alignment Combinationwith Partitioningdistribution of errors according to POS tags in bothlanguages.
We examined the cases in which the in-dividual alignment and the manual annotation weredifferent?a total of 3,348 instances, where 1,320 ofthose are misclassified by GIZA++ (E-to-S).2 Weuse a standard measure of error, i.e., the percentageof misclassified instances out of the total number ofinstances.
Table 1 shows error rates (by percentage)according to POS tags for GIZA++ (E-to-S).3Table 1 shows that the error rate is relatively lowin cases where both words have the same POS tag.Except for verbs, the lowest error rate is obtainedwhen both words have the same POS tag (the er-ror rates on the diagonal).
On the other hand, theerror rates are high in several other cases, as muchas 100%, e.g., when the Spanish word is a deter-miner or a preposition.4 This suggests that dividingthe training data according to POS tag, and trainingneural networks on each subset separately might bebetter than training on the entire data at once.Figure 4 illustrates the combination approachwith neural nets after partitioning the data into dis-2For this analysis, we ignored the cases where both systemsproduced an output of -1 (i.e., the words are not aligned).3Only POS pairs that occurred at least 10 times are shown.4The same analysis was done for the other direction and re-sulted in similar distribution of error rates.68joint subsets (NeurAlign2).
Similar to NeurAlign1,the outputs of individual alignment systems, as wellas the original corpus, are passed to the feature ex-traction module.
Then the training data is split intodisjoint subsets using a subset of the available fea-tures for partitioning.
We learn different neural netsfor each partition, and then merge the outputs of theindividual nets.
The advantage of this is that it re-sults in different generalizations for each partitionand that it uses different subsets of the feature spacefor each net.5 Experiments and ResultsThis section describes our experimental design, in-cluding evaluation metrics, data, and settings.5.1 Evaluation MetricsLet A be the set of alignment links for a set of sen-tences.
We take S to be the set of sure alignmentlinks and P be the set of probable alignment links(in the gold standard) for the same set of sentences.Precision (Pr), recall (Rc) and alignment error rate(AER) are defined as follows:Pr =|A ?
P ||A|Rc =|A ?
S||S|AER = 1?|A ?
S|+ |A ?
P ||A|+ |S|A manually aligned corpus is used as our gold stan-dard.
For English-Spanish data, the manual annota-tion is done by a bilingual English-Spanish speaker.Every link in the English-Spanish gold standard isconsidered a sure alignment link (i.e., P = S).For English-Chinese, we used 2002 NIST MTevaluation test set.
Each sentence pair was alignedby two native Chinese speakers, who are fluent inEnglish.
Each alignment link appearing in both an-notations was considered a sure link, and links ap-pearing in only one set were judged as probable.
Theannotators were not aware of the specifics of our ap-proach.5.2 Evaluation Data and SettingsWe evaluated NeurAlign1 and NeurAlign2, using 5-fold cross validation on two data sets:1.
A set of 199 English-Spanish sentence pairs(nearly 5K words on each side) from a mixedcorpus (UN + Bible + FBIS).2.
A set of 491 English-Chinese sentence pairs(nearly 13K words on each side) from 2002NIST MT evaluation test set.We computed precision, recall and error rate on theentire set of sentence pairs for each data set.5To evaluate NeurAlign, we used GIZA++ in bothdirections (E-to-F and F -to-E, where F is eitherChinese (C) or Spanish (S)) as input and a refinedalignment approach (Och and Ney, 2000) that usesa heuristic combination method called grow-diag-final (Koehn et al, 2003) for comparison.
(Wehenceforth refer to the refined-alignment approachas ?RA.?
)For the English-Spanish experiments, GIZA++was trained on 48K sentence pairs from a mixedcorpus (UN + Bible + FBIS), with nearly 1.2M ofwords on each side, using 10 iterations of Model 1,5 iterations of HMM, and 5 iterations of Model 4.For the English-Chinese experiments, we used 107Ksentence pairs from FBIS corpus (nearly 4.1M En-glish and 3.3M Chinese words) to train GIZA++, us-ing 5 iterations of Model 1, 5 iterations of HMM, 3iterations of Model 3, and 3 iterations of Model 4.5.3 Neural Network SettingsIn our experiments, we used a multi-layer percep-tron (MLP) consisting of 1 input layer, 1 hiddenlayer, and 1 output layer.
The hidden layer consistsof 10 units, and the output layer consists of 1 unit.All units in the hidden layer are fully connected tothe units in the input layer, and the output unit isfully connected to all the units in the hidden layer.We used hyperbolic tangent sigmoid function as theactivation function for both layers.One of the potential pitfalls is overfitting as thenumber of iterations increases.
To address this, weused the early stopping with validation set method.In our experiments, we held out (randomly selected)1/4 of the training set as the validation set.Neural nets are sensitive to the initial weights.
Toovercome this, we performed 5 runs of learning foreach training set.
The final output for each trainingis obtained by a majority voting over 5 runs.5The number of alignment links varies over each fold.Therefore, we chose to evaluate all data at once instead of eval-uating on each fold and then averaging.695.4 ResultsThis section describes the experiments on English-Spanish and English-Chinese data for testing theeffects of feature selection, training on the en-tire data (NeurAlign1) or on the partitioned data(NeurAlign2), using two input alignments: GIZA++(E-to-F ) and GIZA++ (F -to-E).
We used the fol-lowing additional features, as well as the outputs ofindividual aligners, for an instance (i, j) (set of fea-tures 2?7 below are generated separately for eachinput alignment Ak):1. posEi, posFj , relEi: POS tags and depen-dency relation for ei and fj .2. neigh(i, j): 8 features indicating whether aneighboring link exists in Ak.3.
f ertEi, f ertFj : 2 features indicating the fer-tility of ei and fj in Ak.4.
NC(i, j): Total number of existing links inN(i, j) in Ak.5.
TP (i, j): Translation probability p(fj |ei) inAk.6.
NghTP(i, j): 8 features indicating the trans-lation probability p(fy|ex) for each (x, y) ?N(i, j) in Ak.7.
AvTP (i, j): Average translation probabilityof the neighbors of (i, j) in Ak.We performed statistical significance tests usingtwo-tailed paired t-tests.
Unless otherwise indi-cated, the differences between NeurAlign and otheralignment systems, as well as the differences amongNeurAlign variations themselves, were statisticallysignificant within the 95% confidence interval.5.4.1 Results for English-SpanishTable 2 summarizes the precision, recall andalignment error rate values for each of our twoalignment system inputs plus the three alternativealignment-combination approaches.
Note that thebest performing aligner among these is the RAmethod, with an AER of 21.2%.
(We include thisin subsequent tables for ease of comparison.
)Feature Selection for Training All Data At Once:NeurAlign1 Table 3 presents the results of train-ing neural nets using the entire data (NeurAlign1)with different subsets of the feature space.
When weused POS tags and the dependency relation as fea-tures, NeurAlign1 performs worse than RA.
UsingAlignments Pr Rc AERE-to-S 87.0 67.0 24.3S-to-E 88.0 67.5 23.6Intersection 98.2 59.6 25.9Union 80.6 74.9 22.3RA 83.8 74.4 21.2Table 2: Results for GIZA++ Alignments and TheirSimple Combinationsthe neighboring links as the feature set gave slightly(not significantly) better results than RA.
Using POStags, dependency relations, and neighboring linksalso resulted in better performance than RA but thedifference was not statistically significant.When we used fertilities along with the POS tagsand dependency relations, the AER was 20.0%?asignificant relative error reduction of 5.7% over RA.Adding the neighboring links to the previous featureset resulted in an AER of 17.6%?a significant rela-tive error reduction of 17% over RA.Interestingly, when we removed POS tags and de-pendency relations from this feature set, there wasno significant change in the AER, which indicatesthat the improvement is mainly due to the neighbor-ing links.
This supports our initial claim about theclustering of alignment links, i.e., when there is analignment link, usually there is another link in itsneighborhood.
Finally, we tested the effects of usingtranslation probabilities as part of the feature set, andfound out that using translation probabilities did nobetter than the case where they were not used.
Webelieve this happens because the translation proba-bility p(fj |ei) has a unique value for each pair of eiand fj ; therefore it is not useful to distinguish be-tween alignment links with the same words.Feature Selection for Training on PartitionedData: NeurAlign2 In order to train on partitioneddata (NeurAlign2), we needed to establish appropri-ate features for partitioning the training data.
Ta-ble 4 presents the evaluation results for NeurAlign1(i.e., no partitioning) and NeurAlign2 with differentfeatures for partitioning (English POS tag, SpanishPOS tag, and POS tags on both sides).
For trainingon each partition, the feature space included POStags (e.g., Spanish POS tag in the case where parti-tioning is based on English POS tag only), depen-dency relations, neighborhood features, and fertili-ties.
We observed that partitioning based on POStags on one side reduced the AER to 17.4% and70Features Pr Rc AERposEi, posFj , relEi 90.6 67.7 22.5neigh(i, j) 91.3 69.5 21.1posEi, posFj , relEi, 91.7 70.2 20.5neigh(i, j)posEi, posFj , relEi, 91.4 71.1 20.0f ertEi, f ertFjposEi, posFj , relEi, 89.5 76.3 17.6neigh(i, j), NC(i, j)f ertEi, f ertFjneigh(i, j), NC(i, j) 89.7 75.7 17.9f ertEi, f ertFjposEi, posFj , relEi, 90.0 75.7 17.9f ertEi, f ertFj ,neigh(i, j), NC(i, j),TP (i, j), AvTP (i, j)RA 83.8 74.4 21.2Table 3: Combination with Neural Networks:NeurAlign1 (All-Data-At-Once)17.1%, respectively.
Using POS tags on both sidesreduced the error rate to 16.9%?a significant rel-ative error reduction of 5.6% over no partitioning.All four methods yielded statistically significant er-ror reductions over RA?we will examine the fourthmethod in more detail below.Alignment Pr Rc AERNeurAlign1 89.7 75.7 17.9NeurAlign2[posEi] 91.1 75.4 17.4NeurAlign2[posFj ] 91.2 76.0 17.1NeurAlign2[posEi, posFj ] 91.6 76.0 16.9RA 83.8 74.4 21.2Table 4: Effects of Feature Selection for PartitioningOnce we determined that partitioning by POS tagson both sides brought about the biggest gain, we ranNeurAlign2 using this partitioning, but with differ-ent feature sets.
Table 5 shows the results of thisexperiment.
Using dependency relations, word fer-tilities and translation probabilities (both for the linkin question and the neighboring links) yielded a sig-nificantly lower AER (18.6%)?a relative error re-duction of 12.3% over RA.
When the feature setconsisted of dependency relations, word fertilities,and neighborhood links, the AER was reduced to16.9%?a 20.3% relative error reduction over RA.We also tested the effects of adding translation prob-abilities to this feature set, but as in the case ofNeurAlign1, this did not improve the alignments.In the best case, NeurAlign2 achieved substan-tial and significant reductions in AER over the in-put alignment systems: a 28.4% relative error re-duction over S-to-E and a 30.5% relative error re-Features Pr Rc AERrelEi, f ertEi, f ertFj , 91.9 73.0 18.6TP (i, j), AvTP (i, j),NghTP (i, j)neigh(i, j) 90.3 74.0 18.7relEi, f ertEi, f ertFj , 91.6 76.0 16.9neigh(i, j), NC(i, j)relEi, f ertEi, f ertFj , 91.4 76.1 16.9neigh(i, j), NC(i, j),TP (i, j), AvTP (i, j)RA 83.8 74.4 21.2Table 5: Combination with Neural Networks:NeurAlign2 (Partitioned According to POS tags)duction over E-to-S.
Compared to RA, NeurAlign2also achieved significantly better results over RA:relative improvements of 9.3% in precision, 2.2% inrecall, and 20.3% in AER.5.4.2 Results for English-ChineseThe results of the input alignments to NeurAlign,i.e., GIZA++ alignments in two different directions,NeurAlign1 (i.e., no partitioning) and variations ofNeurAlign2 with different features for partitioning(English POS tag, Chinese POS tag, and POS tagson both sides) are shown in Table 6.
For compar-sion, we also include the results for RA in the table.For brevity, we include only the features resultingin the best configurations from the English-Spanishexperiments, i.e., POS tags, dependency relations,word fertilities, and neighborhood links (the featuresin the third row of Table 5).
The ground truth usedduring the training phase consisted of all the align-ment links with equal weight.Alignments Pr Rc AERE-to-C 70.4 68.3 30.7C-to-E 66.0 69.8 32.2NeurAlign1 85.0 71.4 22.2NeurAlign2[posEi] 85.7 74.6 20.0NeurAlign2[posFj ] 85.7 73.2 20.8NeurAlign2[posEi, posFj ] 86.3 74.7 19.7RA 61.9 82.6 29.7Table 6: Results on English-Chinese DataWithout any partitioning, NeurAlign achieves analignment error rate of 22.2%?a significant relativeerror reduction of 25.3% over RA.
Partitioning thedata according to POS tags results in significantlybetter results over no partitioning.
When the data ispartitioned according to both POS tags, NeurAlignreduces AER to 19.7%?a significant relative errorreduction of 33.7% over RA.
Compared to the input71alignments, the best version of NeurAlign achievesa relative error reduction of 35.8% and 38.8%, re-spectively.6 ConclusionsWe presented NeurAlign, a novel approach to com-bining the outputs of different word alignment sys-tems.
Our approach treats individual alignment sys-tems as black boxes, and transforms the individualalignments into a set of data with features that areborrowed from their outputs and additional linguis-tic features (such as POS tags and dependency re-lations).
We use neural nets to learn the true align-ments from these transformed data.We show that using POS tags to partition thetransformed data, and learning a different classifierfor each partition is more effective than using the en-tire data at once.
Our results indicate that NeurAlignyields a significant 28-39% relative error reductionover the best of the input alignment systems anda significant 20-34% relative error reduction overthe best known alignment combination technique onEnglish-Spanish and English-Chinese data.We should note that NeurAlign is not a stand-alone word alignment system but a supervised learn-ing approach to improve already existing alignmentsystems.
A drawback of our approach is that it re-quires annotated data.
However, our experimentshave shown that significant improvements can beobtained using a small set of annotated data.
Wewill do additional experiments to observe the effectsof varying the size of the annotated data while learn-ing neural nets.
We are also planning to investigatewhether NeurAlign helps when the individual align-ers are trained using more data.We will extend our combination approach to com-bine word alignment systems based on differentmodels, and investigate the effectiveness of our tech-nique on other language pairs.
We also intend toevaluate the effectiveness of our improved alignmentapproach in the context of machine translation andcross-language projection of resources.Acknowledgments This work has been supported inpart by ONR MURI Contract FCPO.810548265, Coopera-tive Agreement DAAD190320020, and NSF ITR Grant IIS-0326553.ReferencesSteven Abney, Robert E. Schapire, and Yoram Singer.
1999.Boosting applied to tagging and PP attachment.
In Proceed-ings of EMNLP?1999, pages 38?45.Necip F. Ayan, Bonnie J. Dorr, and Nizar Habash.
2004.
Multi-Align: Combining linguistic and statistical techniques toimprove alignments for adaptable MT.
In Proceedings ofAMTA?2004, pages 17?26.Eric Brill and Jun Wu.
1998.
Classifier combination for im-proved lexical disambiguation.
In Proc.
of ACL?1998.Colin Cherry and Dekang Lin.
2003.
A probability model toimprove word alignment.
In Proceedings of ACL?2003.Micheal Collins.
1997.
Three generative lexicalized models forstatistical parsing.
In Proceedings of ACL?1997.Mona Diab and Philip Resnik.
2002.
An unsupervised methodfor word sense tagging using parallel corpora.
In Proceed-ings of ACL?2002.Bonnie J. Dorr, Lisa Pearl, Rebecca Hwa, and Nizar Habash.2002.
DUSTer: A method for unraveling cross-language di-vergences for statistical word?level alignment.
In Proceed-ings of AMTA?2002.Radu Florian and David Yarowsky.
2002.
Modeling consensus:Classifier combination for word sense disambiguation.
InProceedings of EMNLP?2002, pages 25?32.L.
Hansen and P. Salamon.
1990.
Neural network ensembles.IEEE Transactions on Pattern Analysis and Machine Intelli-gence, 12:993?1001.John C. Henderson and Eric Brill.
2000.
Bagging and boostinga treebank parser.
In Proceedings of NAACL?2000.Philip Koehn, Franz J. Och, and Daniel Marcu.
2003.Statistical phrase-based translation.
In Proceedings ofNAACL/HLT?2003.Yang Liu, Qun Liu, and Shouxun Lin.
2005.
Log-linear modelsfor word alignment.
In Proceedings of ACL?2005.I.
Dan Melamed.
2000.
Models of translational equivalenceamong words.
Computational Linguistics, 26(2):221?249.Marvin Minsky.
1999.
Logical Versus Analogical or SymbolicVersus Connectionist or Neat Versus Scruffy.
AI Magazine,12:34?51.Franz J. Och and Hermann Ney.
2000.
Improved statisticalalignment models.
In Proceedings of ACL?2000.Franz J. Och and Hermann Ney.
2003.
A systematic compari-son of various statistical alignment models.
ComputationalLinguistics, 29(1):9?51, March.Adwait Ratnaparkhi.
1996.
A maximum entropy part-of-speech tagger.
In Proceedings of EMNLP?1996.Martin Riedmiller and Heinrich Braun.
1993.
A direct adaptivemethod for faster backpropagation learning: The RPROP al-gorithm.
In Proceedings of the IEEE Intl.
Conf.
on NeuralNetworks, pages 586?591.Jorg Tiedemann.
2003.
Combining clues for word alignment.In Proceedings of EACL?2003, pages 339?346.Kristina Toutanova, H. Tolga Ilhan, and Christopher D. Man-ning.
2002.
Extensions to HMM-based statistical wordalignment models.
In Proceedings of EMNLP?2002.Kagan Tumer and Joydeep Ghosh.
1996.
Error correlation anderror reduction in ensemble classifiers.
Connection Science,Special Issue on Combining Artificial Neural Networks: En-semble Approaches, 8(3?4):385?404, December.David H. Wolpert.
1992.
Stacked generalization.
Neural Net-works, 5(2):241?259.David Yarowsky, Grace Ngai, and Richard Wicentowski.
2001.Inducing multilingual text analysis tools via robust projec-tion across aligned corpora.
In Proceedings of HLT?2001.72
