Proceedings of the EACL 2009 Demonstrations Session, pages 9?12,Athens, Greece, 3 April 2009. c?2009 Association for Computational LinguisticsGrammatical Framework Web ServiceBjo?rn Bringert?
and Krasimir Angelov and Aarne RantaDepartment of Computer Science and EngineeringChalmers University of Technology and University of Gothenburg{bringert,krasimir,aarne}@chalmers.seAbstractWe present a web service for natural languageparsing, prediction, generation, and translationusing grammars in Portable Grammar Format(PGF), the target format of the GrammaticalFramework (GF) grammar compiler.
The webservice implementation is open source, workswith any PGF grammar, and with any webserver that supports FastCGI.
The service ex-poses a simple interface which makes it pos-sible to use it for interactive natural languageweb applications.
We describe the function-ality and interface of the web service, anddemonstrate several applications built on topof it.1 IntroductionCurrent web applications often consist of JavaScriptcode that runs in the user?s web browser, with server-side code that does the heavy lifting.
We present a webservice for natural language processing with PortableGrammar Format (PGF, Angelov et al, 2008) gram-mars, which can be used to build interactive natural lan-guage web applications.
PGF is the back-end formatto which Grammatical Framework (GF, Ranta, 2004)grammars are compiled.
PGF has been designed to al-low efficient implementations.The web service has a simple API based solely onHTTP GET requests.
It returns responses in JavaScriptObject Notation (JSON, Crockford, 2006).
The server-side program is distributed as part of the GF softwaredistribution, under the GNU General Public License(GPL).
The program is generic, in the sense that it canbe used with any PGF grammar without any modifica-tion of the program.2 Grammatical FrameworkGrammatical Framework (GF, Ranta, 2004) is a type-theoretical grammar formalism.
A GF grammar con-sists of an abstract syntax, which defines a set of ab-stract syntax trees, and one or more concrete syntaxes,which define how abstract syntax trees are mapped to(and from) strings.
The process of producing a string?Now at Google Inc.(or, more generally, a feature structure) from an ab-stract syntax tree is called linearization.
The oppo-site, producing an abstract syntax tree (or several, if thegrammar is ambiguous) from a string is called parsing.In a small, semantically oriented application gram-mar, the sentence ?2 is even?
may correspond to theabstract syntax tree Even 2.
In a larger, more syn-tactically oriented grammar, in this case the EnglishGF resource grammar (Ranta, 2007), the same sen-tence can correspond to the abstract syntax tree PhrUttNoPConj (UttS (UseCl (TTAnt TPres ASimul)PPos (PredVP (UsePN (NumPN (NumDigits (IDigD 2)))) (UseComp (CompAP (PositA even A))))))NoVoc.2.1 Portable Grammar Format (PGF)Portable Grammar Format (PGF, Angelov et al, 2008)is a low-level format to which GF grammars are com-piled.
The PGF Web Service loads PGF files from disk,and uses them to serve client requests.
These PGF filesare normally produced by compiling GF grammars, butthey could also be produced by other means, for exam-ple by a compiler from another grammar formalism.Such compilers currently exist for context-free gram-mars in BNF and EBNF formats, though they compilevia GF.2.2 Parsing and Word PredictionFor each concrete syntax in a PGF file, there is a pars-ing grammar, which is a Parallel Multiple Context FreeGrammar (PMCFG, Seki et al, 1991).
The PGF inter-preter uses an efficient parsing algorithm for PMCFG(Angelov, 2009) which is similar to the Earley algo-rithm for CFG.
The algorithm is top-down and incre-mental which makes it possible to use it for word com-pletion.
When the whole sentence is known, the parserjust takes the tokens one by one and computes the chartof all possible parse trees.
If the sentence is not yetcomplete, then the known tokens can be used to com-pute a partial parse chart.
Since the algorithm is top-down it is possible to predict the set of valid next tokensby using just the partial chart.The prediction can be used in applications to guidethe user to stay within the coverage of the grammar.
Ateach point the set of valid next tokens is shown and theuser can select one of them.9Figure 1: Translator interface.
This example usesthe Bronzeage grammar, which consists of simplesyntactic rules along with lexica based on Swadeshlists.
Demo at http://digitalgrammars.com/translate.The word prediction is based entirely on the gram-mar and not on any additional n-gram model.
Thismeans that it works with any PGF grammar and no ex-tra work is needed.
In addition it works well even withlong distance dependencies.
For example if the subjectis in a particular gender and the verb requires genderagreement, then the the correct form is predicted, inde-pendently on how far the verb is from the subject.3 ApplicationsSeveral interactive web applications have been builtwith the PGF Web Service.
They are all JavaScript pro-grams which run in the user?s web browser and sendasynchronous HTTP requests to the PGF Web Service.3.1 TranslatorThe simplest application (see Figure 1) presents theuser with a text field for input, and drop-down boxes forselecting the grammar and language to use.
For everychange in the text field, the application asks the PGFWeb Service for a number of possible completions ofthe input, and displays them below the text field.
Theuser can continue typing, or select one of the sugges-tions.
When the current input can be parsed completely,the input is translated to all available languages.3.2 Fridge PoetryThe second application is similar in functionality to thefirst, but it presents a different user interface.
The in-terface (see Figure 2) mimics the popular refrigeratormagnet poetry sets.
However, in contrast to physicalfridge magnets, this application handles inflection au-tomatically and only allows the construction of gram-matically correct sentences (as defined by the selectedgrammar).
It also shows translations for complete in-puts and allows the user to switch languages.Figure 2: Fridge poetry screenshot.
Demo at http://digitalgrammars.com/fridge.Figure 3: Reasoning screenshot.
Demo at http://digitalgrammars.com/mosg.3.3 ReasoningAnother application is a natural language reasoningsystem which accepts facts and questions from theusers, and tries to answer the questions based on thefacts given.
The application uses the PGF Web Serviceto parse inputs.
It uses two other web services for se-mantic interpretation and reasoning, respectively.
Thesemantic interpretation service uses a continuation-based compositional mapping of abstract syntax termsto first-order logic formulas (Bringert, 2008).
The rea-soning service is a thin layer on top of the Equinox the-orem prover and the Paradox model finder (Claessenand So?rensson, 2003).4 APIBelow, we will show URI paths for each function,for example /pgf/food.pgf/parse.
Argumentsto each function are given in the URL query string,in application/x-www-form-urlencoded(Raggett et al, 1999) format.
Thus, if the service isrunning on example.com, the URI for a request toparse the string ?this fish is fresh?
using the FoodEngconcrete syntax in the food.pgf grammar would10be: http://example.com/pgf/food.pgf/parse?input=this+fish+is+fresh&from=FoodEng.
The functions described below each acceptsome subset of the following arguments:from The name of the concrete syntax to parse withor translate from.
Multiple from arguments canbe given, in which case all the specified languagesare tried.
If omitted, all languages (that can beused for parsing) are used.cat The name of the abstract syntax category to parseor translate in, or generate output in.
If omitted,the start category specified in the PGF file is used.to The name of the concrete syntax to linearize ortranslate to.
Multiple to arguments can be given,in which case all the specified languages are used.If omitted, results for all languages are returned.input The text to parse, complete or translate.
Ifomitted, the empty string is used.tree The abstract syntax tree to linearize.limit The maximum number of results to return.All results are returned in UTF-8 encoded JSON orJSONP format.
A jsonp argument can be given toeach function to invoke a callback function when theresponse is evaluated in a JavaScript interpreter.
Thismakes it possible to circumvent the Same Origin Policyin the web browser and call the PGF Web Service fromapplications loaded from another server.4.1 Grammar List/pgf retrieves a list of the available PGF files.4.2 Grammar Info/pgf/grammar.pgf, where grammar.pgf is thename of a PGF file on the server, retrieves informationabout the given grammar.
This information includesthe name of the abstract syntax, the categories in theabstract syntax, and the list of concrete syntaxes.4.3 Parsing/pgf/grammar.pgf/parse parses an input stringand returns a number of abstract syntax trees.
Optionalarguments: input, from, cat.4.4 Completion/pgf/grammar.pgf/complete returns a list ofpredictions for the next token, given a partial input.Optional arguments: input, from, cat, limit.
Iflimit is omitted, all results are returned.4.5 Linearization/pgf/grammar.pgf/linearize accepts an ab-stract syntax tree, and returns the results of lineariz-ing it to one or more languages.
Mandatory arguments:tree.
Optional arguments: to.4.6 Random Generation/pgf/grammar.pgf/random generates a numberof randomly generated abstract syntax trees for the se-lected grammar.
Optional arguments: cat, limit.
Iflimit is omitted, one tree is returned.4.7 Translation/pgf/grammar.pgf/translate performs textto text translation.
This is done by parsing, followedby linearization.
Optional arguments: input, from,cat, to.5 Application to Controlled LanguagesThe use of controlled languages is becoming more pop-ular with the development of Web and Semantic Webtechnologies.
Related projects include Attempto (At-tempto, 2008), CLOnE (Funk et al, 2007), and Com-mon Logic Controlled English (CLCE) (Sowa, 2004).All these projects provide languages which are subsetsof English and have semantic translations into first or-der logic (CLCE), OWL (CLOnE) or both (Attempto).In the case of Attempto, the translation is into first orderlogic and if it is possible to the weaker OWL language.The general idea is that since the controlled languageis a subset of some other language it should be under-standable to everyone without special training.
The op-posite is not true - not every English sentence is a validsentence in the controlled language and the user mustlearn how to stay within its limitations.
Although thisis a disadvantage, in practice it is much easier to re-member some subset of English phrases rather than tolearn a whole new formal language.
Word suggestionfunctionality such as that in the PGF Web Service canhelp the user stay within the controlled fragment.In contrast to the above mentioned systems, GF isnot a system which provides only one controlled lan-guage, but a framework within which the developer candevelop his own language.
The task is simplified by theexistence of a resource grammar library (Ranta, 2007)which takes care of all low-level details such as wordorder, and gender, number or case agreement.
In fact,the language developer does not have to be skilled inlinguistics, but does have to be a domain expert andcan concentrate on the specific task.Most controlled language frameworks are focusedon some subset of English while other languages re-ceive very little or no attention.
With GF, the con-trolled language does not have to be committed to onlyone natural language but could have a parallel grammarwith realizations into many languages.
In this case theuser could choose whether to use the English versionor, for example, the French version, and still producethe same abstract representation.6 ImplementationThe PGF Web Service is a FastCGI program written inHaskell.
The program is a thin layer on top of the PGF11interpreter, which implements all the PGF functional-ity, such as parsing, completion and linearization.
Theweb service also uses external libraries for FastCGIcommunication, and JSON and UTF-8 encoding anddecoding.The main advantage of using FastCGI instead ofplain CGI is that the PGF file does not have to bereloaded for each request.
Instead, each PGF file isloaded the first time it is requested, and after that, it isonly reloaded if the file on disk is changed.7 PerformanceThe web service layer introduces minimal overhead.The typical response time for a parse request with asmall grammar, when running on a typical current PC,is around 1 millisecond.
For large grammars, responsetimes can be on the order of several seconds, but this isentirely dependent on the PGF interpreter implementa-tion.The server is multi-threaded, with one lightweightthread for each client request.
A single instance of theserver can run threads on all cores of a multi-core pro-cessor.
Since the server maintains no state and requiresno synchronization, it can be easily replicated on mul-tiple machines with load balancing.
Since all requestsare cacheable HTTP GET requests, a caching proxycould be used to improve performance if it is expectedthat there will be repeated requests for the same URI.8 Future WorkThe abstract syntax in GF is based on MartinLo?f?s (1984) type theory and supports dependent types.They can be used go beyond the pure syntax and tocheck the sentences for semantic consistency.
The cur-rent parser completely ignores dependent types.
Thismeans that the word prediction will suggest comple-tions which might not be semantically meaningful.In order to improve performance for high-traffic ap-plications that use large grammars, the web servicecould cache responses.
As long as the grammar is notmodified, identical requests will always produce iden-tical responses.9 ConclusionsWe have presented a web service for grammar-basednatural language processing, which can be used to buildinteractive natural language web applications.
The webservice has a simple API, based on HTTP GET requestswith JSON responses.
The service allows high levels ofperformance and scalability, and has been used to buildseveral applications.ReferencesKrasimir Angelov.
2009.
Incremental Parsing with Par-allel Multiple Context-Free Grammars.
In EuropeanChapter of the Association for Computational Lin-guistics.Krasimir Angelov, Bjo?rn Bringert, and AarneRanta.
2008.
PGF: A Portable Run-Time For-mat for Type-Theoretical Grammars.
Journalof Logic, Language and Information, submit-ted.
URL http://www.cs.chalmers.se/?bringert/publ/pgf/pgf.pdf.Attempto.
2008.
Attempto Project Homepage -http://attempto.ifi.uzh.ch/site/.
URL http://attempto.ifi.uzh.ch/site/.Bjo?rn Bringert.
2008.
Delimited Contin-uations, Applicative Functors and Natu-ral Language Semantics.
URL http://www.cs.chalmers.se/?bringert/publ/continuation-semantics/continuation-semantics.pdf.Koen Claessen and Niklas So?rensson.
2003.
NewTechniques that Improve MACE-style Model Find-ing.
In Workshop on Model Computation(MODEL).
URL http://www.cs.chalmers.se/?koen/pubs/model-paradox.ps.Douglas Crockford.
2006.
The application/json MediaType for JavaScript Object Notation (JSON).
RFC4627 (Informational).
URL http://www.ietf.org/rfc/rfc4627.txt.Adam Funk, Valentin Tablan, Kalina Bontcheva,Hamish Cunningham, Brian Davis, and SiegfriedHandschuh.
2007.
CLOnE: Controlled Language forOntology Editing.
In Proceedings of the Interna-tional Semantic Web Conference (ISWC 2007).
Bu-san, Korea.Per Martin-Lo?f.
1984.
Intuitionistic Type Theory.
Bib-liopolis, Naples.Dave Raggett, Arnaud Le Hors, and Ian Jacobs.1999.
HTML 4.01 Specification.
Technical report,W3C.
URL http://www.w3.org/TR/1999/REC-html401-19991224/.Aarne Ranta.
2004.
Grammatical Framework: AType-Theoretical Grammar Formalism.
Jour-nal of Functional Programming, 14(2):145?189.URL http://dx.doi.org/10.1017/S0956796803004738.Aarne Ranta.
2007.
Modular Grammar Engineeringin GF.
Research on Language and Computation,5(2):133?158.
URL http://dx.doi.org/10.1007/s11168-007-9030-6.Hiroyuki Seki, Takashi Matsumura, Mamoru Fujii,and Tadao Kasami.
1991.
On multiple context-free grammars.
Theoretical Computer Science,88(2):191?229.
URL http://dx.doi.org/10.1016/0304-3975(91)90374-B.John Sowa.
2004.
Common Logic Controlled En-glish.
Draft.
URL http://www.jfsowa.com/clce/specs.htm.12
