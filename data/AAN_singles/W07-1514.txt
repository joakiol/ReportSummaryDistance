Proceedings of the Linguistic Annotation Workshop, pages 85?92,Prague, June 2007. c?2007 Association for Computational LinguisticsA Search Tool for Parallel TreebanksMartin Volk, Joakim Lundborg and Mae?l MettlerStockholm UniversityDepartment of Linguistics106 91 Stockholm, Swedenvolk@ling.su.seAbstractThis paper describes a tool for aligning andsearching parallel treebanks.
Such treebanksare a new type of parallel corpora that comewith syntactic annotation on both languagesplus sub-sentential alignment.
Our tool al-lows the visualization of tree pairs and thecomfortable annotation of word and phrasealignments.
It also allows monolingual andbilingual searches including the specifica-tion of alignment constraints.
We show thatthe TIGER-Search query language can eas-ily be combined with such alignment con-straints to obtain a powerful cross-lingualquery language.1 IntroductionRecent years have seen a number of initiatives inbuilding parallel treebanks.
Our group has partici-pated in these efforts by building a tri-lingual paral-lel treebank called SMULTRON (Stockholm MULti-lingal TReebank).1 Our parallel treebank consistsof syntactically annotated sentences in three lan-guages, taken from translated (i.e.
parallel) docu-ments.
In addition, the syntax trees of correspondingsentence pairs are aligned on a sub-sentential level.This means they are aligned on word level or phraselevel (some phrases can be as large as clauses).
Par-allel treebanks can be used as training or evalua-tion corpora for word and phrase alignment, as input1We gratefully acknowledge financial support for theSMULTRON project by Granholms stiftelse and Rausings stif-telse.for example-based machine translation (EBMT), astraining corpora for transfer rules, or for translationstudies.Similar projects include Croco (Hansen-Schirraet al, 2006) which is aimed at building a German-English parallel treebank for translation stud-ies, LinES an English-Swedish parallel treebank(Ahrenberg, 2007), and the Czech-English paralleldependency treebank built in Prague (Cmejrek et al,2005).SMULTRON is an English-German-Swedish par-allel treebank (Samuelsson and Volk, 2006;Samuelsson and Volk, 2007).
It contains the firsttwo chapters of Jostein Gaarder?s novel ?Sofie?sWorld?
with about 500 sentences.
In addition itcontains 500 sentences from economy texts (a quar-terly report by a multinational company as well aspart of a bank?s annual report).
We have (semi-automatically) annotated the German sentences withPart-of-Speech tags and phrase structure trees (incl.edges labeled with functional information) follow-ing the NEGRA/TIGER guidelines for German tree-banking.For English we have used the Penn Treebankguidelines which are similar in that they also pre-scribe phrase structure trees (with PoS tags, but onlypartially annotated with functional labels).
Howeverthey differ from the German guidelines in many de-tails.
For example the German trees use crossingedges for discontinuous units while the English treesintroduce symbols for empty tokens plus secondaryedges for the representation of such phenomena.For Swedish there were no appropriate guidelinesavailable.
Therefore we have adapted the German85guidelines to Swedish.
The general annotation strat-egy for Swedish was the same as for German: PoStags, phrase structure trees (incl.
functional edge la-bels) and crossing branches for discontinuous units.But, of course, there are linguistic differences be-tween German and Swedish that required specialattention (e.g.
Swedish prepositions that introducesentences).The treebanks for all three languages were anno-tated separately with the help of the treebank editorANNOTATE.
After finishing the monolingual tree-banks, the trees were exported from the accompany-ing SQL database and converted into an XML for-mat as input to our alignment tool, the StockholmTreeAligner.In this paper we will first describe this alignmenttool and then focus on its new search facility.
To ourknowledge this is the first dedicated tool that com-bines visualization, alignment and searching of par-allel treebanks (although there are others who haveexperimented with parallel corpus searches (Ny-gaard and Johannesen, 2004; Petersen, 2006)).2 The Stockholm TreeAlignerWhen our monolingual treebanks were finished, thetrees were exported from the editor system and con-verted into TIGER-XML.
TIGER-XML is a line-based (i.e.
not nested and thus database-friendly)representation for graph structures which supportscrossing edges and secondary edges.2 TIGER-XMLhas been defined as input format for TIGER-Search,a query tool for monolingual treebanks (see section3).
We use this format also as input format for ouralignment tool, the Stockholm TreeAligner (Volk etal., 2006).The TreeAligner program is a graphical user in-terface to specify (or correct) word and phrasealignments between pairs of syntax trees.3 TheTreeAligner is roughly similar to alignment toolssuch as I*Link (Ahrenberg et al, 2002) or Cairo(Smith and Jahr, 2000) but it is especially tailored tovisualize and align full syntax trees (including treeswith crossing edges).2For information about TIGER-XML see www.ims.uni-stuttgart.de/projekte/TIGER3The TreeAligner is freely available at www.ling.su.se/DaLi/downloads/treealigner/index.htmFigure 1: Tree pair German-English in theTreeAligner.The TreeAligner operates on an alignment file inan XML format developed by us.
This file describesthe alignments between two TIGER-XML treebanks(specified in the alignment file) holding the treesfrom language one and language two respectively.For example the alignment between two nodes isrepresented as:<align type="exact"><node id="s13_505" tb_id="DE"/><node id="s14_506" tb_id="EN"/></align>This says that node 505 in sentence 13 of the Ger-man treebank is aligned with node 506 in sentence14 of the English treebank.
The node identifiers re-fer to the ids in the TIGER-XML treebanks.
Thealignment is given the label ?exact?
if the corre-sponding token sequences are equivalent in mean-ing.The alignment file might initially be empty whenwe want to start manual alignment from scratch, orit might contain automatically computed alignmentsfor correction.
The TreeAligner displays tree pairswith the trees in mirror orientation (one top-up andone top-down).
See figure 1 for an example.
Thetrees are displayed with node labels and edge labels.The PoS labels are omitted in the display since theyare not relevant for the alignment task.44During the development of our treebanks we discovered86Each alignment is displayed as a dotted line be-tween two nodes (or words) across two trees.
Click-ing on a node (or a word) in one tree and drag-ging the mouse pointer to a node (or a word) in theother tree inserts an alignment line.
Currently theTreeAligner supports two types of alignment lines(displayed in different colors) which are used to in-dicate exact translation correspondence vs. approxi-mate translation correspondence.
However, our ex-periments indicate that eventually more alignmenttypes will be needed to precisely represent differ-ent translation differences.
The alignment type at-tribute can be used to describe many different lev-els or types of alignment.
These distinctions couldprove useful when exploiting the aligned treebanksfor Machine Translation and other applications.Often one tree needs to be aligned to two (ormore) trees in the other language.
The TreeAlignertherefore provides the option to browse the trees in-dependently.
For instance, if we have aligned only apart of a tree Ti from language one to tree Tk of lan-guage two, we may scroll to tree Tk+1 of languagetwo in order to align the remaining parts of Ti.
Spe-cial [Forward] and [Back] buttons are provided tobrowse through the multiple-aligned trees systemat-ically.The TreeAligner is designed as a stand-alone tool(i.e.
it is not prepared for collaborative annotation).It stores every alignment in an XML file (in the for-mat described above) as soon as the user moves to anew tree pair.The TreeAligner was implemented in Python byJoakim Lundborg.
Python has become popularin Language Technology in recent years.
It is ahigh level programming language that allows dif-ferent programming styles including a good sup-port for object-oriented programming.
It is an in-terpreted language that uses a dynamic type system.It is therefore mostly compared to its siblings Perl,Tcl and Ruby, even though the influence of otherlanguages like Smalltalk and Haskell are probablystronger on a conceptual level.One of Python?s strengths is the ease with whichthat the TreeAligner is also useful for displaying different ver-sions of the same treebank (e.g.
before and after corrections, ormanually vs. automatically parsed).
Therefore we plan to add atree-diff module which will highlight the differences between apair of trees over the same token sequence.a programmer can manipulate primitive data typeslike strings or numbers.
Python?s string objects arean excellent match to the needs of linguistic process-ing.
In addition to the primitive data types, Pythonalso features higher level data types: lists, tuples anddictionaries.
The combination of these built-in datatypes, the vast standard library and the simple andstraightforward syntax make Python the perfect toolfor a wide range of scientific programming.The TreeAligner served us well for creating thealignments, but it soon became evident that weneeded suitable tools to explore and exploit thealigned data.
The most apparent need was a searchmodule for aligned trees.
We decided to design oursearch module after TIGER-Search.3 TIGER-SearchTIGER-Search is a powerful treebank query tool de-veloped at the University of Stuttgart by WolfgangLezius (cf.
(Ko?nig and Lezius, 2002; Lezius, 2002).Its query language allows for feature-value descrip-tions of syntax graphs.
It is similar in expressivenessto tgrep (Rohde, 2005) but it comes with graphicaloutput and highlighting of the syntax trees plus nicefrequency tables for objects identified in the query.TIGER-Search has been implemented in Java and isfreely available for research purposes.
Because of itsclearly defined input format (TIGER-XML) and itspowerful query language, it has become the corpusquery system of choice for many linguists.The TIGER-Search query language is based onfeature-value descriptions of all linguistic objects(tokens and constituents), dominance, precedenceand sibling relations in the tree, graph predicates(e.g.
with respect to token arity and continuity), vari-ables for referencing objects, regular expressionsover values for varying the query precision, andqueries over secondary edges (which constitute asecondary graph level).A complex query might look like in the follow-ing example (with > denoting direct dominance, >*denoting general dominance, the dot denoting im-mediate precedence, and the # symbol introducingvariables).
This query is meant to find instances oftwo ambiguously located PPs that are both attachedto the first noun (as illustrated by the example tree infigure 2).87Figure 2: Noun phrase tree from the Penn Treebank#np:[cat="NP"] >* #n1:[pos="NN"]&#np > #pp1:[cat="PP"] &#n1 .
#pp1 &#pp1 >* #n2:[pos="NN"] &#np > #pp2:[cat="PP"] &#n2 .
#pp2This query says: Search for an NP (call it #np)that dominates a noun #n1 (line 1) and two PPs (lines2 and 5).
#pp1 must follow immediately after thenoun #n1 (line 3), and #pp2 must follow immedi-ately after the noun within the #pp1 (lines 4 and 6).TIGER-Search handles such queries efficientlybased on a intricate indexing scheme.
It finds allmatching instances in a given treebank and allowsto browse (and to export) the resulting trees.
Thematching objects in the resulting trees are high-lighted.TIGER-Search is limited in that it only allowsmanually entered queries (rather than processing abatch of queries from a file).
Furthermore it is lim-ited with regard to negation.
The TIGER-Searchquery language includes a negation operator but thisis of limited usefulness.
The reason is that ?Forthe sake of computational simplicity and tractabil-ity, the universal quantifier is (currently) not partof the TIGER language?
(quoted from the TIGER-Search online help manual).
This means that typicalnegated queries such as ?Find all VPs which do notcontain any NP?
are not possible.And clearly TIGER-Search is a tool for queryingmonolingual treebanks and thus needed to be ex-tended for our purposes, i.e.
querying parallel tree-banks.4 The TreeAligner Search Module(Merz and Volk, 2005) had listed the requirementsfor a parallel treebank search tool.
Based onthese we have now re-implemented TIGER-Searchfor parallel treebanks and integrated it into theTreeAligner.The idea is to allow the power of TIGER-Searchqueries on both treebanks plus additional alignmentconstraints.
For example, a typical query could askfor a verb phrase VP dominating a prepositionalphrase PP in treebank one.
This query can be com-bined with the constraint that the VP in treebank oneis aligned to a sentence S in treebank two which alsodominates a PP.
Such a query would be expressed in3 lines as:#t1:[cat="VP"] > [cat="PP"]#t2:[cat="S"] > [cat="PP"]#t1 * #t2These three lines are entered into three separateinput fields in the user interface (cf.
the three in-put fields in the bottom left in figure 3).
Lines 1and 2 contain the queries over the monolingual tree-banks 1 and 2.
And line 3 contains the alignmentconstraint.
Note that the treebank queries 1 and 2closely follow the TIGER-Search syntax.
In par-ticular they allow the binding of variables (markedwith #) to specific linguistic objects in the query.And these variables are used in the alignment con-straint in line 3.
The reuse of the variables is the cru-88Figure 3: Screenshot of the TreeAligner with the Search Module.cial idea which enabled a clear design of the SearchModule by keeping the alignment constraints sepa-rate from the queries over the two treebanks.So the above query will find the tree pair in figure3 because it matches the alignment between the Eng-lish VP closed the front door behind her and the el-liptical Swedish sentence sta?ngde do?rren bakom sig(which lacks the subject, but is still annotated as S).The Search Module has recently been added to theTreeAligner.
It is intended to be used with any par-allel treebank where the monolingual treebanks canbe converted into TIGER-XML and where the align-ment information can be converted to the SMUL-TRON alignment format.
The separation of theseparts makes it possible to query each treebank sepa-rately as well.
The system is divided into a monolin-gual query facility and an alignment query facilitythat makes use of the former to perform its job.
Thisdesign choice made it necessary to (re)implementthe following in Python:1.
TIGER-Search2.
The alignment query facility3.
The integration into the TreeAlignerThe choice of reimplementing TIGER-Search inPython influenced the feature set.
Even thoughthe implementation of TIGER-Search is well doc-umented (in (Lezius, 2002) among others) and thesource codes are available under an Open Source li-cense, this is still a non-trivial task.
In order to nar-row down the amount of work in a first phase, it wasdecided to restrict the implementation to a subset ofthe TIGER-Search query language.
The implemen-tation of negation within the queries was thereforepostponed (with the exception of negations used inregular expressions within a feature definition).
Asdiscussed in section 3, negations are limited even inTIGER-Search, and we plan to implement a com-prehensive support for negation at a later stage.
Thecode already has hooks for this extension.The language for the alignment constraints iskept simple as well.
The user can specify thattwo linguistic objects must be aligned (with exact89alignment or approximate alignment).
And suchconstraints can be combined with AND statementsinto more complex constraints.
Currently, we can-not foresee exactly how a parallel treebank will bequeried.
We have therefore focused on a clear de-sign of the Search Module rather than overloading itwith features.
This will facilitate the integration ofmore features as they are requested by users.4.1 Implementation DetailsThe implementation of the Search Module startedas a close re-implementation of the TIGER-Searchsystem described in (Lezius, 2002).
During the de-velopment it became apparent that some of Lezius?design choices did not translate well into Python.Moreover, the advancements concerning speed andmemory in computer hardware in recent years havemade it possible for us to deviate from the originaldesign towards a more Python-oriented and simplercode with less considerations for resource limita-tions (see (Mettler, 2007)).This code base can be divided into four typesof functionality classes: helper, index, parser andprocessor.
The helper classes are the smallest piecesof code and perform trivial tasks like sorting or setoperations and are called from the other classes.The query system as such consists of the index, theparsers and processors.
The parsers are used totransform a string such as the TIGER-XML files orthe queries into objects.
These parse objects are thenused to create the index or are passed to a processorobject to get the results of a query.The index consists of four classes.
The Cor-pus class governs the three others which are usedto store the data for the graphs and the attributevalue register that is defined in the TIGER-XMLhead.
Each graph is contained within its own ob-ject.
The attribute value register consists of one ob-ject that governs a range of attribute value lookuptables.
There are three parser classes and one parsermethod.
Each of these parser classes handles a dif-ferent input.
The first parses TIGER-XML, the sec-ond parses the node definitions within a TIGER-Search query (contained within the square brackets),and the third parser class uses them to parse com-plete TIGER-Search queries.
As the syntax for thealignment constraints is simple, this was done withina method of the parallel query processor class.
Thisis likely to change with the increasing feature set forparallel queries.The last part of the system consists of two proces-sor classes.
The first is the class used for monolin-gual queries.
On instantiation the class takes an in-dex object and a query parser object as arguments.When the object?s query method is called with aquery string, the object lets the query parser producea parse object from the string.
The parse object isthen processed to produce an object that contains thematching graph parts using the index.
The processorfor parallel queries works similarly.
On instantiationa monolingual processor for each language is passedas arguments to the object.
When the query methodis called, the parallel processor objects gets the re-sults from the monolingual processors first and thenparses and processes the parallel query using the re-sults from the monolingual processing step.
The re-sult of a query is a list with the two aligned sentenceIDs.4.2 Evaluation of the Search ModuleThe TreeAligner Search module was first tested byrunning a set of representative queries over a partof our English-German parallel treebank (500 treepairs).
This test set included:?
dominance relations (direct dominance, gen-eral dominance, labeled dominance, right andleft corner dominance)?
precedence relations (immediate precedence,general precedence, sibling precedence, prece-dence distance)?
queries over secondary edges?
graph predicates (root, arity, tokenarity)For the monolingual queries we checked whetherthe number of hits in our TreeAligner Search cor-responded to the number of hits in TIGER-Search.This worked nicely.
For bilingual queries we manu-ally checked the correctness of the results.We also tested the system for robustness and scal-ability.
Since we currently do not have a large paral-lel treebank, we took the German NEGRA treebankwith 10,000 trees and used it for both language oneand language two in our TreeAligner.
This meanswe used each tree aligned to a copy of itself as the90basic data.
This treebank contains around 81,000nodes.
We automatically generated an alignment filethat contains each node aligned to its copy in thecorresponding tree.
This means we were using analignment file with 81,000 alignments.Unfortunately the time for loading this data setinto the TreeAligner was prohibitively long (whileloading a monolingual treebank with 10,000 treesinto TIGER-Search takes less than a minute for in-dexing it once, plus few seconds for loading the in-dex before starting the searches).
Obviously, weneed to improve the scalability of the TreeAligner.When we redid the experiment with 1000 treesfrom the NEGRA treebank (with 35,756 align-ments), it worked fine.
Loading takes about oneminute, and queries like the one given in the exam-ple above are processed in less than one minute.
Thesystem is currently not optimized for speed.
It isa proof-of-concept system to demonstrate that the(monolingual) TIGER-Search query language canbe elegantly extended with alignment constraints forparallel treebank searches.Lately we have tested the use of serialized in-dexes.
We have observed that they are much faster,but that the speed-up factor decreases with increas-ing file size.
It seems that eventually we will haveto switch to a custom binary format as was donein TIGER-Search, if we want to provide a smoothwork experience with parallel treebanks of 10,000and more trees.5 ConclusionsWe have built a TreeAligner for displaying andsearching parallel aligned trees.
The tool is writ-ten in Python and freely available.
In particular itallows to align nodes and words across languagesby drawing lines.
We distinguish between exactand approximate alignment types.
The search mod-ule which was recently added supports queries overboth treebanks in combination with alignment con-straints.
The query language follows TIGER-Search(though negation is not included yet).
The alignmentconstraints use the variables bound to linguistic ob-jects in the monolingual queries.In the future we will improve the TreeAligner inthree directions: features, usability and evaluation.The feature part consists of providing full supportfor TIGER-Search queries (in particular the imple-mentation of negation) and improving the parallelquery facilities (with a variety of alignment con-straints).Moreover we are in the process of extending theTreeAligner to handling dependency trees.
TheTreeAligner currently imports only treebanks inTIGER-XML.
This format is well suited for rep-resenting phrase structure trees but less for depen-dency trees.
We will therefore extend the support toappropriate XML import formats.Usability is the broadest group and aims at im-provements like creating an installation routine forall operating systems, improving speed and makingsure that UTF8 support works properly.Finally, more systematic evaluations are needed.We plan to enlarge our standard set of queries tocover all possible combinations.
This query setcould then be used to test the speed and performanceof our system (and for the comparison with othersystems).
We hope that the TreeAligner will gain abroad user community which will help to drive im-provements in alignment and querying.ReferencesLars Ahrenberg, Magnus Merkel, and Mikael Andersson.2002.
A system for incremental and interactive wordlinking.
In Proc.
of LREC-2002, pages 485?490, LasPalmas.Lars Ahrenberg.
2007.
LinES: An English-Swedish par-allel treebank.
In Proc.
of Nodalida, Tartu.Martin Cmejrek, Jan Cur?
?n, and Jir??
Havelka.
2005.Prague Czech-English dependency treebank.
Resourcefor structure-based MT.
In Proceedings of EAMT 10thAnnual Conference, Budapest.Silvia Hansen-Schirra, Stella Neumann, and MihaelaVela.
2006.
Multi-dimensional annotation and align-ment in an English-German translation corpus.
In Pro-ceedings of the EACL Workshop on MultidimensionalMarkup in Natural Language Processing (NLPXML-2006), pages 35?
42, Trento.Esther Ko?nig and Wolfgang Lezius.
2002.
The TIGERlanguage - a description language for syntax graphs.Part 1: User?s guidelines.
Technical report.Wolfgang Lezius.
2002.
Ein Suchwerkzeug fu?r syn-taktisch annotierte Textkorpora.
Ph.D. thesis, IMS,University of Stuttgart, December.
Arbeitspapiere des91Instituts fu?r Maschinelle Sprachverarbeitung (AIMS),volume 8, number 4.Charlotte Merz and Martin Volk.
2005.
Requirementsfor a parallel treebank search tool.
In Proceedings ofGLDV-Conference, Sprache, Sprechen und Computer/ Computer Studies in Language and Speech, Bonn,March.
Peter Lang Verlag.Mae?l Mettler.
2007.
Parallel treebank search - the imple-mentation of the Stockholm TreeAligner search.
C-uppsats, Stockholm University, March.Lars Nygaard and Janne Bondi Johannesen.
2004.SearchTree - a user-friendly treebank search interface.In Proc.
of 3rd Workshop on Treebanks and LinguisticTheories, pages 183?189, Tu?bingen, December.Ulrik Petersen.
2006.
Querying both parallel and tree-bank corpora: Evaluation of a corpus query system.
InProc.
of LREC, Genua.Douglas L. T. Rohde, 2005.
TGrep2 User Manual.
MIT.Available from http://tedlab.mit.edu/ ?dr/Tgrep2/.Yvonne Samuelsson and Martin Volk.
2006.
Phrasealignment in parallel treebanks.
In Jan Hajic andJoakim Nivre, editors, Proc.
of the Fifth Workshopon Treebanks and Linguistic Theories, pages 91?102,Prague, December.Yvonne Samuelsson and Martin Volk.
2007.
Alignmenttools for parallel treebanks.
In Proceedings of GLDVFru?hjahrstagung 2007.Noah A. Smith and Michael E. Jahr.
2000.
Cairo: Analignment visualization tool.
In Proc.
of LREC-2000,Athens.Martin Volk, Sofia Gustafson-Capkova?, Joakim Lund-borg, Torsten Marek, Yvonne Samuelsson, and FridaTidstro?m.
2006.
XML-based phrase alignment in par-allel treebanks.
In Proc.
of EACL Workshop on Multi-dimensional Markup in Natural Language Processing,Trento, April.92
