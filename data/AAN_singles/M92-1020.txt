UNIVERSITY OF MARYLAND/CONQUEST :MUC-4 TEST RESULTS AND ANALYSI SJames MayfieldComputer Science DepartmentUniversity of Maryland Baltimore CountyBaltimore, MD 21228-5398 USAmayfield@cs.umbc.eduSCORESOnly a subset of the MUC-4 slots were generated by the UM/ConQuest ICTOAN system .
Our scores fo rthe slots we attempted to fill are shown in Figure 1 .LIMITING FACTORSThe most significant limiting factor we experienced was development time .
The ICTOAN system was writte nfrom scratch during the first five months of 1992 ; only the template generation software was reused fromour MUG3 system .
The effect of the short development time was compounded by our selection of C asthe programming language for the project .
We chose C for its speed, and to gain leverage from existingConQuest software .
However, because C is such a low-level language, development of a piece of code in Ctakes longer than development of equivalent code in a higher-level language such as LISP.Recall scores for the evaluation system were uniformly poor .
The main factors contributing to the lowrecall scores were :?
The evaluation system did not attempt to fill all template slots .
In particular, we did not attempt toguess any slot values that were not known, even when guessing would lead to a significant partial scor e(e .g.
in the data slot) .
The following slots were not filled :2.
INCIDENT : DATE3.
INCIDENT : LOCATION '11 .
PERP: ORGANIZATION CONFIDENC E14.
PHYS TGT: NUMBER15.
PHYS TGT: FOREIGN NATIO N16.
PHYS TGT: EFFECT OF INCIDENT17.
PHYS TGT: TOTAL NUMBE R18.
HUM TGT : NAME21.
HUM TGT: NUMBER22.
HUM TGT: FOREIGN NATIO N23.
HUM TGT: EFFECT OF INCIDEN T24.
HUM TGT: TOTAL NUMBE R'This slot was filled once inadvertentally due to a bug in the semantic net .148SLOT REC PRE OVG FA L0 .
MESSAGE: ID 10 24 7 64 .
INCIDENT : TYPE 9 22 76 45 .
INCIDENT : STAGE OF EXECUTION 10 24 76 1 06 .
INCIDENT : INSTRUMENT ID 0 0 10 07 .
INSTRUMENT TYPE 0 0 100 08 .
PERP: INCIDENT CATEGORY 12 35 65 69 .
PERP: INDIVIDUAL ID 3 12 7 510 .
PERP: ORGANIZATION ID 9 20 6 512 .
PHYS TGT : ID 2 33 6 713 .
PHYS TGT: TYPE 0 0 50 019 .
HUM TGT: DESCRIPTION 2 50 020 .
HUM TGT: TYPE 1 17 17 0INCIDENT TOTAL 4 19 80PERPETRATOR TOTAL 6 22 68PHYSICAL TARGET TOTAL 0 11 56HUMAN TARGET TOTAL 1 33 8MATCHED/MISSING 2 66 5MATCHED/SPURIOUS 21 21 70MATCHED ONLY 21 66 5ALL TEMPLATES 2 21 70SET FILLS ONLY 4 75 3 0STRING FILLS ONLY 3 50 1 0TEXT FILTERING 32 81 19 14Figure 1 : UM/Conquest Scores for TST 3?No grammar rules were in place for performing semantic analysis of nominalized attack actions, or fo rinterpretation of passive verbs .
Therefore, the only attacks that were interpreted were ones that wer edescribed by active verbs .
A low percentage of the reported attacks were described in this way in th etest corpora.?
No merging of co-referential phrases or sentences was performed .
Thus, two interpretable descriptionsof the same attack always led to the generation of two different templates.
In addition to increasingovergeneration, this had the effect of reducing recall for slots that were filled in templates that wereeventually discarded by the scoring program .?
Although significant hooks are in place in the system for discourse segmentation, the lack of merg-ing of co-referential items made discourse segmentation algorithms irrelevant for the purposes of th eevaluation .ALLOCATION OF RESOURCE SMost of the development time for the ICTOAN system was spent on writing the basic system code andon developing the semantic net of world knowledge .
Relatively little time was spent in grammar-writing.Because we had the Proximity Linguistic System available for our dictionary, little time was spent o ndictionary development .
This turned out to be problematic, because the dictionary contained many obscur eor questionable word senses .
For example, the word `the' was listed as an adverb (as in `the higher thefewer') .
Dictionary cleanup is the task we would most like to redo .14 9SUCCESSESThe two main successes of the ICTOAN system were its speed and its flexibility .SpeedThe system is quite fast .
For example, the system processed the 100 stories in the TST3 corpus in unde rtwenty minutes on a lightly-loaded Sun Sparc II with 24MB of memory .
The evaluation system had a numberof known memory leaks .
Because of these leaks, we chose to break up the input texts into individual filesand run ICTOAN separately on each .
Given time to eliminate these leaks, we believe that the system iscapable of processing 100 texts on the same platform in under twelve minutes .One result made possible by the system's speed is that the ICTOAN system does no skimming.
Thatis, the system does not look for `hot' areas of the text and concentrate its processing power on those areas .Rather, the system processes every sentence of every story to the best of its abilities.FlexibilityThe ICTOAN system architecture is best viewed as a set of parallel streams of data flowing through apipeline of processes .
This stream-based architecture makes it possible to easily integrate top-down an dbottom-up processing .
Bottom-up processes can be written to read ,data from low-level streams and buil ditems to be placed on high-level streams .
Top-down processes can be written to search for desired elementson low-level streams, based on the items that appear in high-level streams.Since individual processes may be placed in any order along the pipeline, it is easy to explore th einteractions between for example top-down and bottom-up processes .
The user needs only to modify aconfiguration file that indicates which processes should be used and in what order .
Furthermore, the overal leffectiveness of a particular process can be evaluated by comparing the performance of the system runnin gwith the component of interest against the performance of the system running without that component .We believe that the flexibility of the system will make it easily adaptable to other uses .
For example, weintend to use all of the system except the template generator as an automatic text-to-hypertext conversio nsystem [1] .References[1] James Mayfield and Charles Nicholas.
Using semantic nets to enrich hypertext links .
Technical Repor tCS-92-02, University of Maryland Baltimore County, Baltimore, MD, 1992 .150
