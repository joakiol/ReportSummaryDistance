Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 295?300,Sydney, July 2006. c?2006 Association for Computational LinguisticsSpeeding Up Full Syntactic Parsing by Leveraging Partial ParsingDecisionsElliot Glaysher and Dan MoldovanLanguage Computer Corporation1701 N. Collins Blvd.
Suite 2000Richardson, TX 75080{eglaysher,moldovan}@languagecomputer.comAbstractParsing is a computationally intensive taskdue to the combinatorial explosion seen inchart parsing algorithms that explore pos-sible parse trees.
In this paper, we proposea method to limit the combinatorial explo-sion by restricting the CYK chart parsingalgorithm based on the output of a chunkparser.
When tested on the three parserspresented in (Collins, 1999), we observedan approximate three?fold speedup withonly an average decrease of 0.17% in bothprecision and recall.1 Introduction1.1 MotivationSyntactic parsing is a computationally intensiveand slow task.
The cost of parsing quickly be-comes prohibitively expensive as the amount oftext to parse grows.
Even worse, syntactic parsingis a prerequisite for many natural language pro-cessing tasks.
These costs make it impossible towork with large collections of documents in anyreasonable amount of time.We started looking into methods and improve-ments that would speed up syntactic parsing.These are divided into simple software engineer-ing solutions, which are only touched on briefly,and an optimization to the CYK parsing algorithm,which is the main topic of this paper.While we made large speed gains through sim-ple software engineering improvements, such asinternal symbolization, optimizing critical areas,optimization of the training data format, et cetera,the largest individual gain in speed was made bymodifying the CYK parsing algorithm to leveragethe decisions of a syntactic chunk parser so that itavoided combinations that conflicted with the out-put of the chunk parser.1.2 Previous WorkChart parsing is a method of building a parse treethat systematically explores combinations basedon a set of grammatical rules, while using a chartto store partial results.
The general CYK algo-rithm is a bottom-up parsing algorithm that willgenerate all possible parse trees that are acceptedby a formal grammar.
Michael Collins, firstin (1996), and then in his PhD thesis (1999), de-scribes a modification to the standard CYK chartparse for natural languages which uses probabili-ties instead of simple context free grammars.The CYK algorithm considers all possible com-binations.
In Figure 1, we present a CYK chartgraph for the sentence ?The red balloon flewaway.?
The algorithm will search the pyramid,from left to right, from the bottom to the top.
Eachbox contains a pair of numbers that we will re-fer to as the span, which represent the sequenceof words currently being considered.
Calculatingeach ?box?
in the chart means trying all combina-tions of the lower parts of the box?s sub-pyramidto form possible sub-parse trees.
For example, onecalculates the results for the span (1, 4) by tryingto combine the results in (1, 1) and (2, 4), (1, 2)and (3, 4), and (1, 3) and (4, 4).In (Collins, 1999), Collins describes three newparsers.
The Model 2 gives the best output, pars-ing section 23 at 88.26% precision and 88.05%recall in 40 minutes.
The Model 1 is by far thefastest of the three, parsing section 23 of Tree-bank (Marcus et al, 1994) at 87.75% precision and87.45% recall in 26 minutes.Syntactic Chunking is the partial parsingprocess of segmenting a sentence into non-295(1,5)(1,4) (2,5)(1,3) (2,4) (3,5)(1,2) (2,3) (3,4) (4,5)(1,1) (2,2) (3,3) (4,4) (5,5)red balloon flew awayTheFigure 1: The CYK parse visualized as a pyramid.CYK will search from the left to right, bottom totop.overlapping ?chunks?
of syntactically connectedwords.
(Tjong Kim Sang and Buchholz, 2000) Un-like a parse tree, a set of syntactic chunks hasno hierarchical information on how sequences ofwords relate to each other.
The only informationgiven is an additional label describing the chunk.We use the YamCha (Kudo and Matsumoto,2003; Kudo and Matsumoto, 2001) chunker forour text chunking.
When trained on all of PennTreebank , except for section 23 and tested on sec-tion 23, the model had a precision of 95.96% anda recall of 96.08%.
YamCha parses section 23 ofTreebank in 36 seconds.Clause Identification is the partial parsing pro-cess of annotating the hierarchical structure ofclauses?groupings of words that contain a sub-ject and a predicate (Tjong Kim Sang and De?jean,2001).
Our clause identifier is an implementa-tion of (Carreras et al, 2002), except that we useC5.0 as the machine learning method instead ofCarreras?
own TreeBoost algorithm (Carreras andMa?rquez, 2001).
When trained and scored on theCoNLL 2001 shared task data1 with the resultsof our chunker, our clause identifier performs at90.73% precision, 73.72% recall on the develop-ment set and 88.85% precision, 70.22% recall onthe test set.In this paper, we describe modifications tothe version of the CYK algorithm described in(Collins, 1999) and experiment with the modi-fications to both our proprietary parser and the(Collins, 1999) parser.1http://www.cnts.ua.ac.be/conll2001/clauses/clauses.tgz2 Methods2.1 Software OptimizationsWhile each of the following optimizations, in-dividually, had a smaller effect on our parser?sspeed than the CYK restrictions, collectively, sim-ple software engineering improvements resulted inthe largest speed increase to our syntactic parser.In the experiments section, we will refer to this asthe ?Optimized?
version.Optimization of the training data and inter-nal symbolization: We discovered that our parserwas bound by the number of probability hash-tablelookups.
We changed the format for our trainingdata/hash keys so that they were as short as possi-ble, eliminating deliminators and using integers torepresent a closed set of POS tags that were seenin the training data, reducing the two to four bytePOS tags such as ?VP?
or ?ADJP?
down to singlebyte integers.
In the most extreme cases, this re-duces the length of non-word characters in a hashfrom 28 characters to 6.
The training data takes upless space, hashes faster, and many string compar-isons are reduced to simple integer comparisons.Optimization of our hash-table implementa-tion: The majority of look ups in the hash-tableat runtime were for non-existent keys.
We puta bloomfilter on each hash bucket so that suchlookups would often be trivially rejected, insteadof having to compare the lookup key with ev-ery key in the bucket.
We also switched to theFowler/Noll/Vo (Noll, 2005) hash function, whichis faster and has less collisions then our previoushash function.Optimization of critical areas: There wereseveral areas in our code that were optimized af-ter profiling our parser.Rules based pre/post-processing: We wereable to get very minor increases in precision, re-call and speed by adding hard coded rules to ourparser that handle things that are handled poorly,specifically parenthetical phrases and quotations.2.2 CYK restrictionsIn this section, we describe modifications that re-strict the chart search based on the output of apartial parser (in this case, a chunker) that marksgroups of constituents.First, we define a span to be a pair c = (s, t),where s is the index of the first word in the spanand t is the index of the last word in the span.
Wethen define a set S, where S is the set of spans296c1, .
.
.
, cn that represent the restrictions placed onthe CYK parse.
We say that c1 and c2 overlap iffs1 < s2 ?
t1 < t2 or s2 < s1 ?
t2 < t1, and wenote it as c1 ?
c2.2When using the output of a chunker, S is the setof spans that describe the non-VP, non-PP chunkswhere ti ?
si > 0.During the CYK parse, after a span?s start andend points are selected, but before iterating acrossall splits of that span and their generative rules,we propose that the span in question be checkedto make sure that it does not overlap with anyspan in set S. We give the pseudocode in Al-gorithm 1, which is a modification of the parse()function given in Appendix B of (Collins, 1999).Algorithm 1 The modified parse() functioninitialize()for span = 2 to n dofor start = 1 to n?
span + 1 doend?
start + span ?
1if ?x ?
S(x 6?
(start, end)) thencomplete(start, end)end ifend forend forX ?
edge in chart[1,n,TOP] with highestprobabilityreturn XFor example, given the chunk parse:[The red balloon]NP [flew]V P [away]ADV P ,S = {(1, 3)} because there is only one chunkwith a length greater than 1.Suppose we are analyzing the span (3, 4) onthe example sentence above.
This span will berejected, as it overlaps with the chunk (1, 3);the leaf nodes ?balloon?
and ?flew?
are not go-ing to be children of the same parsetree parentnode.
Thus, this method does not compute thegenerative rules for all the splits of the spans{(2, 4), (2, 5), (3, 4), (3, 5)}.
This will also reducethe number of calculations done when calculatinghigher spans.
When computing (1, 4) in this ex-ample, time will be saved since the spans (2, 4)and (3, 4) were not considered.
This example isvisualized in Figure 2.A more complex, real?world example fromsection 23 of Treebank is visualized in Fig-2This notation was originally used in (Carreras et al,2002).ure 3, using the sentence ?Under an agreementsigned by the Big Board and the Chicago Mer-cantile Exchange, trading was temporarily haltedin Chicago.?
This sentence has three usablechunks, [an agreement]NP , [the Big Board]NP ,and [the Chicago Mercantile Exchange]NP .
Thisexample shows the effects of the above algorithmon a longer sentence with multiple chunks.
(1,1) (2,2) (3,3) (4,4) (5,5)(1,2) (2,3) (3,4) (4,5)The red balloon flew away(1,3) (2,4)(2,5)(1,5)(1,4)Chunk Span(3,5)Figure 2: The same CYK example as in Fig-ure 1.
Blacked out box spans will not be calcu-lated, while half toned box spans do not have tocalculate as many possibilities because they de-pend on an uncalculated span.3 Experiments & Results3.1 Our parser with chunksOur parser uses a simplified version of the modelpresented in (Collins, 1996).
For this experi-ment,we tested four versions of our internal parser:?
Our original parser.
No optimizations orchunking information.?
Our original parser with chunking informa-tion.?
Our optimized parser without chunking infor-mation.?
Our optimized parser with chunking informa-tion.For parsers that use chunking information, theruntime of the chunk parsing is included in theparser?s runtime, to show that total gains in run-time offset the cost of running the chunker.We trained the chunk parser on all of Treebankexcept for section 23, which will be used as thetest set.
We trained our parser on all of Treebankexcept for section 23.
Scoring of the parse trees297anagreementbyBigtheExchangeinChicagosignedtheBoard(1,1)(2,2)(4,4)(5,5)(6,6)(7,7)(8,8)(9,9)(10,10)(11,11)(12,12)(13,13)(14,14)(15,15)(16,16)(17,17)(18,18)(19,19)(2,3)(4,5)(6,7)(7,8)(10,11)(11,12)(12,13)(14,15)(15,16)(16,17)(17,18)(18,19)(1,2)(3,4)(8,9)(13,14)(9,10)(5,6)(1,3)(2,4)(4,6)(3,5)(5,7)(7,9)(8,10)(9,11)(12,14)(13,15)(10,12)(11,13)(10,13)(14,16)(15,17)(17,19)(16,18)(16,19)(15,18)(14,17)(1,4)(3,6)(1,5)(4,7)(5,8)(2,6)(1,6)(6,9)(7,10)(8,11)(9,12)(11,14)(12,15)(13,16)(14,18)(15,19)(13,17)(12,16)(11,15)(10,14)(9,13)(8,12)(7,11)(6,10)(5,9)(4,8)(3,7)(2,7)(3,8)(4,9)(5,10)(6,11)(7,12)(8,13)(9,14)(10,15)(11,16)(12,17)(13,18)(14,19)(1,7)(2,8)(3,9)(4,10)(5,11)(6,12)(7,13)(8,14)(9,15)(10,16)(11,17)(12,18)(13,19)(12,19)(11,18)(10,17)(9,16)(8,15)(7,14)(5,12)(4,11)(3,10)(2,9)(1,9)(1,8)(2,10)(3,11)(4,12)(5,13)(6,14)(7,15)(8,16)(9,17)(10,18)(11,19)(10,19)(9,18)(8,17)(7,16)(6,15)(5,14)(4,13)(3,12)(2,11)(1,10)(1,11)(2,12)(3,13)(4,14)(5,15)(6,16)(7,17)(9,19)(1,12)(2,13)(3,14)(4,15)(5,16)(6,17)(8,19)(1,13)(2,14)(3,15)(4,16)(5,17)(7,19)(1,14)(2,15)(3,16)(4,17)(6,19)(1,15)(2,16)(3,17)(5,19)(1,16)(2,17)(4,19)(1,17)(2,18)(3,19)(1,18)(2,19)(1,19)(2,5)(6,8)(8,18)(7,18)(3,18) (4,18) (5,18) (6,18)(6,13)andUnderMercantileChicagotradingwastemporarilyhalted(3,3)Figure 3: The CYK chart for the chunk parsed sentence ?
[Under]PP [an agreement]NP[signed]V P [by]PP [the Big Board]NP [and]NP [the Chicago Mercantile Exchange]NP , [trading]NP[was temporarily halted]V P [in]PP [Chicago]NP .?
The color coding scheme is the same as in Figure 2.298Precision Recall TimeOriginal 82.79% 83.19% 25?45?With chunks 84.40% 83.74% 7?37?Optimized 83.86% 83.24% 4?28?With chunks 84.42% 84.06% 1?35?Table 1: Results from our parser on Section 23Precision Recall TimeModel 1 87.75% 87.45% 26?18?With chunks 87.63% 87.27% 8?54?Model 2 88.26% 88.05% 40?00?With chunks 88.04% 87.87% 13?47?Model 3 88.25% 88.04% 42?24?With chunks 88.10% 87.89% 14?58?Table 2: Results from the Collins parsers on Sec-tion 23 with chunking informationwas done using the EVALB package that was usedto score the (Collins, 1999) parser.
The numbersrepresent the labeled bracketing of all sentences;not just those with 40 words or less.The experiment was run on a dual Pentium 4,3.20Ghz machine with two gigabytes of memory.The results are presented in Table 1.The most notable result is the greatly reducedtime to parse when chunking information wasadded.
Both versions of our parser saw an averagethree?fold increase in speed by leveraging chunk-ing decisions.
We also saw small increases in bothprecision and recall.3.2 Collins Parsers with chunksTo show that this method is general and doesnot exploit weaknesses in the lexical model ofour parser, we repeated the previous experimentswith the three models of parsers presented in the(Collins, 1999).
We made sure to use the exactsame chunk post-processing rules in the Collinsparser code to make sure that the same chunk in-formation was being used.
We used Collins?
train-ing data.
We did not retrain the parser in any wayto optimize for chunked input.
We only modifiedthe parsing algorithm.Once again, the chunk parser was trained onall of Treebank except for section 23, the treesare evaluated with EVALB, and these experimentswere run on the same dual Pentium 4 machine.These results are presented in Table 2.Like our parser, each Collins parser saw aPrecision Recall TimeOptimized 83.86% 83.24% 4?28?With chunks 84.42% 84.06% 1?35?With clauses 83.66% 83.06% 5?02?With both 84.20% 83.84% 2?26?Table 3: Results from our parser on Section23 with clause identification information.
Datacopied from the first experiment has been itali-cized for comparison.slightly under three fold increase in speed.
Butunlike our parser, all three models of the Collinsparser saw slight decreases in accuracy, averag-ing at -0.17% for both precision and recall.
Wetheorize that this is because the errors in our lex-ical model are more severe than the errors in thechunks, but the Collins parser models make fewererrors in word grouping at the leaf node level thanthe chunker does.
We theorize that a more accu-rate chunker would result in an increase in the pre-cision and recall of the Collins parsers, while pre-serving the substantial speed gains.3.3 Clause IdentificationEncouraged by the improvement brought by usingchunking as a source of restrictions, we used thedata from our clause identifier.Again, our clause identifier was derived from(Carreras et al, 2002), using boosted C5.0 deci-sion trees instead of their boosted binary decisiontree method, which performs below their numbers:88.85% precision, 70.22% recall on the CoNLL2001 shared task test set.These results are presented in Table 3.Adding clause detection information hurt per-formance in every category.
The increases in run-time are caused by the clause identifier?s runtimecomplexity of over O(n3).
The time to identifyclauses is greater then the speed increases gainedby using the output as restrictions.In terms of the drop in precision and recall,we believe that errors from the clause detectorare grouping words together that are not all con-stituents of the same parent node.
While errors ina chunk parse are relatively localized, errors in thehierarchical structure of clauses can affect the en-tire parse tree, preventing the parser from explor-ing the correct high-level structure of the sentence.2994 Future WorkWhile the modification given in section 2.2 isspecific to CYK parsing, we believe that plac-ing restrictions based on the output of a chunkparser is general enough to be applied to any gen-erative, statistical parser, such as the Charniakparser (2000), or a Lexical Tree Adjoining Gram-mar based parser (Sarkar, 2000).
Restrictions canbe placed where the parser would explore possi-ble trees that would violate the boundaries deter-mined by the chunk parser, pruning paths that willnot yield the correct parse tree.5 ConclusionUsing decisions from partial parsing greatly re-duces the time to perform full syntactic parses, andwe have presented a method to apply the informa-tion from partial parsing to full syntactic parsersthat use a variant of the CYK algorithm.
We haveshown that this method is not specific to the im-plementation of our parser and causes a negligibleeffect on precision and recall, while decreasing thetime to parse by an approximate factor of three.ReferencesXavier Carreras and Llu?
?s Ma?rquez.
2001.
Boostingtrees for anti-spam email filtering.
In Proceedings ofRANLP-01, 4th International Conference on RecentAdvances in Natural Language Processing, TzigovChark, BG.Xavier Carreras, Llu?
?s Ma`rquez, Vasin Punyakanok,and Dan Roth.
2002.
Learning and inference forclause identification.
In ECML ?02: Proceedings ofthe 13th European Conference on Machine Learn-ing, pages 35?47, London, UK.
Springer-Verlag.Eugene Charniak.
2000.
A maximum-entropy-inspired parser.
In Proceedings of the first confer-ence on North American chapter of the Associationfor Computational Linguistics, pages 132?139, SanFrancisco, CA, USA.
Morgan Kaufmann PublishersInc.Michael John Collins.
1996.
A new statistical parserbased on bigram lexical dependencies.
In ArivindJoshi and Martha Palmer, editors, Proceedings ofthe Thirty-Fourth Annual Meeting of the Associationfor Computational Linguistics, pages 184?191, SanFrancisco.
Morgan Kaufmann Publishers.Michael John Collins.
1999.
Head-driven statisticalmodels for natural language parsing.
Ph.D. thesis,University of Pennsylvania.
Supervisor-Mitchell P.Marcus.Taku Kudo and Yuji Matsumoto.
2001.
Chunkingwith support vector machines.
In NAACL ?01: Sec-ond meeting of the North American Chapter of theAssociation for Computational Linguistics on Lan-guage technologies 2001, pages 1?8, Morristown,NJ, USA.
Association for Computational Linguis-tics.Taku Kudo and Yuji Matsumoto.
2003.
Fast meth-ods for kernel-based text analysis.
In ACL ?03: Pro-ceedings of the 41st Annual Meeting on Associationfor Computational Linguistics, pages 24?31, Mor-ristown, NJ, USA.
Association for ComputationalLinguistics.Mitchell P. Marcus, Beatrice Santorini, and Mary AnnMarcinkiewicz.
1994.
Building a large annotatedcorpus of english: The penn treebank.
Computa-tional Linguistics, 19(2):313?330.Landon C. Noll.
2005.
Fnv hash.http://www.isthe.com/chongo/tech/comp/fnv/.Anoop Sarkar.
2000.
Practical experiments in parsingusing tree adjoining grammars.
In Proceedings ofthe Fifth International Workshop on Tree AdjoiningGrammars, Paris, France.Erik F. Tjong Kim Sang and Sabine Buchholz.
2000.Introduction to the conll-2000 shared task: Chunk-ing.
In Claire Cardie, Walter Daelemans, ClaireNedellec, and Erik Tjong Kim Sang, editors, Pro-ceedings of CoNLL-2000 and LLL-2000, pages 127?132.
Lisbon, Portugal.Erik F. Tjong Kim Sang and Herve?
De?jean.
2001.Introduction to the conll-2001 shared task: Clauseidentification.
In Walter Daelemans and Re?mi Za-jac, editors, Proceedings of CoNLL-2001, pages 53?57.
Toulouse, France.300
