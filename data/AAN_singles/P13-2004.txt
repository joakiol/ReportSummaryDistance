Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 18?23,Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational LinguisticsSupervised Model Learning with Feature Groupingbased on a Discrete ConstraintJun Suzuki and Masaaki NagataNTT Communication Science Laboratories, NTT Corporation2-4 Hikaridai, Seika-cho, Soraku-gun, Kyoto, 619-0237 Japan{suzuki.jun, nagata.masaaki}@lab.ntt.co.jpAbstractThis paper proposes a framework of super-vised model learning that realizes featuregrouping to obtain lower complexity mod-els.
The main idea of our method is tointegrate a discrete constraint into modellearning with the help of the dual decom-position technique.
Experiments on twowell-studied NLP tasks, dependency pars-ing and NER, demonstrate that our methodcan provide state-of-the-art performanceeven if the degrees of freedom in trainedmodels are surprisingly small, i.e., 8 oreven 2.
This significant benefit enables usto provide compact model representation,which is especially useful in actual use.1 IntroductionThis paper focuses on the topic of supervisedmodel learning, which is typically represented asthe following form of the optimization problem:w?
= arg minw{O(w;D)},O(w;D) = L(w;D) + ?
(w),(1)where D is supervised training data that consistsof the corresponding input x and output y pairs,that is, (x,y) ?
D. w is an N -dimensional vectorrepresentation of a set of optimization variables,which are also interpreted as feature weights.L(w;D) and ?
(w) represent a loss function anda regularization term, respectively.
Nowadays, we,in most cases, utilize a supervised learning methodexpressed as the above optimization problem toestimate the feature weights of many natural lan-guage processing (NLP) tasks, such as text clas-sification, POS-tagging, named entity recognition,dependency parsing, and semantic role labeling.In the last decade, the L1-regularization tech-nique, which incorporates L1-norm into ?
(w),has become popular and widely-used in manyNLP tasks (Gao et al, 2007; Tsuruoka et al,2009).
The reason is that L1-regularizers encour-age feature weights to be zero as much as pos-sible in model learning, which makes the resul-tant model a sparse solution (many zero-weightsexist).
We can discard all features whose weightis zero from the trained model1 without any loss.Therefore, L1-regularizers have the ability to eas-ily and automatically yield compact models with-out strong concern over feature selection.Compact models generally have significant andclear advantages in practice: instances are fasterloading speed to memory, less memory occupa-tion, and even faster decoding is possible if themodel is small enough to be stored in cache mem-ory.
Given this background, our aim is to establisha model learning framework that can reduce themodel complexity beyond that possible by sim-ply applying L1-regularizers.
To achieve our goal,we focus on the recently developed concept of au-tomatic feature grouping (Tibshirani et al, 2005;Bondell and Reich, 2008).
We introduce a modellearning framework that achieves feature group-ing by incorporating a discrete constraint duringmodel learning.2 Feature Grouping ConceptGoing beyond L1-regularized sparse modeling,the idea of ?automatic feature grouping?
has re-cently been developed.
Examples are fusedlasso (Tibshirani et al, 2005), grouping pur-suit (Shen and Huang, 2010), and OSCAR (Bon-dell and Reich, 2008).
The concept of automaticfeature grouping is to find accurate models thathave fewer degrees of freedom.
This is equiva-lent to enforce every optimization variables to beequal as much as possible.
A simple example isthat w?1 = (0.1, 0.5, 0.1, 0.5, 0.1) is preferred overw?2 = (0.1, 0.3, 0.2, 0.5, 0.3) since w?1 and w?2have two and four unique values, respectively.There are several merits to reducing the degree1This paper refers to model after completion of (super-vised) model learning as ?trained model?18of freedom.
For example, previous studies clari-fied that it can reduce the chance of over-fitting tothe training data (Shen and Huang, 2010).
This isan important property for many NLP tasks sincethey are often modeled with a high-dimensionalfeature space, and thus, the over-fitting problem isreadily triggered.
It has also been reported that itcan improve the stability of selecting non-zero fea-tures beyond that possible with the standard L1-regularizer given the existence of many highly cor-related features (Jo?rnsten and Yu, 2003; Zou andHastie, 2005).
Moreover, it can dramatically re-duce model complexity.
This is because we canmerge all features whose feature weight values areequivalent in the trained model into a single fea-ture cluster without any loss.3 Modeling with Feature GroupingThis section describes our proposal for obtaininga feature grouping solution.3.1 Integration of a Discrete ConstraintLet S be a finite set of discrete values, i.e., a setinteger from ?4 to 4, that is, S={?4,.
.
.
, ?1, 0,1, .
.
.
, 4}.
The detailed discussion how we defineS can be found in our experiments section sinceit deeply depends on training data.
Then, we de-fine the objective that can simultaneously achievea feature grouping and model learning as follows:O(w;D) =L(w;D) + ?(w)s.t.
w ?
SN .
(2)where SN is the cartesian power of a set S .
Theonly difference with Eq.
1 is the additional dis-crete constraint, namely, w ?
SN .
This con-straint means that each variable (feature weight)in trained models must take a value in S, that is,w?n ?
S , where w?n is the n-th factor of w?, andn ?
{1, .
.
.
, N}.
As a result, feature weights intrained models are automatically grouped in termsof the basis of model learning.
This is the basicidea of feature grouping proposed in this paper.However, a concern is how we can efficientlyoptimize Eq.
2 since it involves a NP-hard combi-natorial optimization problem.
The time complex-ity of the direct optimization is exponential againstN .
Next section introduces a feasible algorithm.3.2 Dual Decomposition FormulationHereafter, we strictly assume that L(w;D) and?
(w) are both convex in w. Then, the proper-ties of our method are unaffected by the selectionof L(w;D) and ?(w).
Thus, we ignore their spe-cific definition in this section.
Typical cases canbe found in the experiments section.
Then, we re-formulate Eq.
2 by using the dual decompositiontechnique (Everett, 1963):O(w,u;D) =L(w;D) + ?
(w) + ?(u)s.t.
w = u, and u ?
SN .
(3)Difference from Eq.
2, Eq.
3 has an additional term?
(u), which is similar to the regularizer ?
(w),whose optimization variables w and u are tight-ened with equality constraint w = u.
Here, thispaper only considers the case ?
(u) = ?22 ||u||22 +?1||u||1, and ?2 ?
0 and ?1 ?
02.
This objec-tive can also be viewed as the decomposition ofthe standard loss minimization problem shown inEq.
1 and the additional discrete constraint regu-larizer by the dual decomposition technique.To solve the optimization in Eq.
3, we lever-age the alternating direction method of multiplier(ADMM) (Gabay and Mercier, 1976; Boyd et al,2011).
ADMM provides a very efficient optimiza-tion framework for the problem in the dual decom-position form.
Here, ?
represents dual variablesfor the equivalence constraint w=u.
ADMM in-troduces the augmented Lagrangian term ?2 ||w ?u||22 with ?>0 which ensures strict convexity andincreases robustness3.Finally, the optimization problem in Eq.
3 canbe converted into a series of iterative optimiza-tion problems.
Detailed derivation in the generalcase can be found in (Boyd et al, 2011).
Fig.
1shows the entire model learning framework of ourproposed method.
The remarkable point is thatADMM works by iteratively computing one of thethree optimization variable sets w, u, and ?
whileholding the other variables fixed in the iterationst = 1, 2, .
.
.
until convergence.Step1 (w-update): This part of the optimiza-tion problem shown in Eq.
4 is essentially Eq.
1with a ?biased?
L2-regularizer.
?bias?
means herethat the direction of regularization is toward pointa instead of the origin.
Note that it becomes astandard L2-regularizer if a = 0.
We can selectany learning algorithm that can handle the L2-regularizer for this part of the optimization.Step2 (u-update): This part of the optimizationproblem shown in Eq.
5 can be rewritten in the2Note that this setting includes the use of only L1-, L2-,or without regularizers (L1 only: ?1>0 and ?2=0, L2 only:?1=0 and ?2>0, and without regularizer: ?1=0, ?2=0).3Standard dual decomposition can be viewed as ?=019Input: Training data:D, parameters:?, ?, primal, and dualInitialize: w(1) = 0, u(1) = 0, ?
(1) = 0, and t = 1.Step1 w-update:Solve w(t+1) = argminw{O(w;D,u(t),?
(t))}.For our case,O(w;D,u,?)
=O(w;D) + ?2 ||w ?
a||22, (4)where a = u?
?.Step2 u-update:Solve u(t+1) = argminu{O(u;D,w(t+1),?
(t))}.For our case,O(u;D,w,?)
= ?22 ||u||22 + ?1||u||1 +?2 ||b?
u||22s.t.
u ?
SN ,(5)where b = w +?Step3 ?-update:?
(t+1) =?
(t) + ?
(w(t+1) ?
u(t+1)) (6)Step4 convergence check:||w(t+1) ?
u(t+1)||22/N < primal||u(t+1) ?
u(t)||22/N < dual(7)Break the loop if the above two conditions are reached,or go back to Step1 with t = t+ 1.Output: u(t+1)Figure 1: Entire learning framework of ourmethod derived from ADMM (Boyd et al, 2011).following equivalent simple form:u?= arg minu{12 ||u?
b?||22 + ??1||u||1}s.t.
u ?
SN , (8)where b?
= ?
?2+?b, and ?
?1 = ?1?2+?
.
Thisoptimization is still a combinatorial optimizationproblem.
However unlike Eq.
2, this optimizationcan be efficiently solved.Fig.
2 shows the procedure to obtain the exactsolution of Eq.
5, namely u(t+1).
The remarkablepoint is that the costly combinatorial optimizationproblem is disappeared, and instead, we are onlyrequired to perform two feature-wise calculationswhose total time complexities isO(N log |S|) andfully parallelizable.
The similar technique hasbeen introduced in Zhong and Kwok (2011) fordiscarding a costly combinatorial problem fromthe optimization with OSCAR-regularizers withthe help of proximal gradient methods, i.e., (Beckand Teboulle, 2009).We omit to show the detailed derivation ofFig.
2 because of the space reason.
However, thisis easily understandable.
The key properties arethe following two folds; (i) The objective shownin Eq.
8 is a convex and also symmetric functionwith respect to u?
?, where u??
is the optimal solutionof Eq.
8 without the discrete constraint.
Therefore,the optimal solution u?
is at the point where theInput: b?
= (b?n)Nn=1, ?
?1, and S.1, Find the optimal solution of Eq.
8 without the constraint.The optimization of mixed L2 and L1-norms is knownto have a closed form solution, i.e., (Beck and Teboulle,2009), that is;u?
?n = sgn(b?n)max(0, |b?n| ?
?
?1),where (u?
?n)Nn=1 = u?
?.2, Find the nearest valid point in SN from u??
in terms of theL2-distance;u?n = argminu?S(u?
?n ?
u)2where (u?n)Nn=1 = u?.
This can be performed by a binarysearch, whose time complexity is generally O(log |S|).Output: u?Figure 2: Procedure for solving Step2nearest valid point given SN from u??
in terms ofthe L2-distance.
(ii) The valid points given SN arealways located at the vertexes of axis-aligned or-thotopes (hyperrectangles) in the parameter spaceof feature weights.
Thus, the solution u?, which isthe nearest valid point from u?
?, can be obtained byindividually taking the nearest value in S from u?
?nfor all n.Step3 (?-update): We perform gradient ascenton dual variables to tighten the constraint w = u.Note that ?
is the learning rate; we can simply setit to 1.0 for every iteration (Boyd et al, 2011).Step4 (convergence check): It can be evaluatedboth primal and dual residuals as defined in Eq.
7with suitably small primal and dual.3.3 Online LearningWe can select an online learning algorithm forStep1 since the ADMM framework does not re-quire exact minimization of Eq.
4.
In this case, weperform one-pass update through the data in eachADMM iteration (Duh et al, 2011).
Note that thetotal calculation cost of our method does not in-crease much from original online learning algo-rithm since the calculation cost of Steps 2 through4 is relatively much smaller than that of Step1.4 ExperimentsWe conducted experiments on two well-studiedNLP tasks, namely named entity recognition(NER) and dependency parsing (DEPAR).Basic settings: We simply reused the settingsof most previous studies.
We used CoNLL?03data (Tjong Kim Sang and De Meulder, 2003)for NER, and the Penn Treebank (PTB) III cor-pus (Marcus et al, 1994) converted to depen-dency trees for DEPAR (McDonald et al, 2005).20Our decoding models are the Viterbi algorithmon CRF (Lafferty et al, 2001), and the second-order parsing model proposed by (Carreras, 2007)for NER and DEPAR, respectively.
Featuresare automatically generated according to the pre-defined feature templates widely-used in the pre-vious studies.
We also integrated the cluster fea-tures obtained by the method explained in (Koo etal., 2008) as additional features for evaluating ourmethod in the range of the current best systems.Evaluation measures: The purpose of our ex-periments is to investigate the effectiveness of ourproposed method in terms of both its performanceand the complexity of the trained model.
There-fore, our evaluation measures consist of two axes.Task performance was mainly evaluated in termsof the complete sentence accuracy (COMP) sincethe objective of all model learning methods eval-uated in our experiments is to maximize COMP.We also report the F?=1 score (F-sc) for NER,and the unlabeled attachment score (UAS) for DE-PAR for comparison with previous studies.
Modelcomplexity is evaluated by the number of non-zeroactive features (#nzF) and the degree of freedom(#DoF) (Zhong and Kwok, 2011).
#nzF is thenumber of features whose corresponding featureweight is non-zero in the trained model, and #DoFis the number of unique non-zero feature weights.Baseline methods: Our main baseline is L1-regularized sparse modeling.
To cover both batchand online leaning, we selected L1-regularizedCRF (L1CRF) (Lafferty et al, 2001) optimized byOWL-QN (Andrew and Gao, 2007) for the NERexperiment, and the L1-regularized regularizeddual averaging (L1RDA) method (Xiao, 2010)4for DEPAR.
Additionally, we also evaluated L2-regularized CRF (L2CRF) with L-BFGS (Liu andNocedal, 1989) for NER, and passive-aggressivealgorithm (L2PA) (Crammer et al, 2006)5 for DE-PAR since L2-regularizer often provides better re-sults than L1-regularizer (Gao et al, 2007).For a fair comparison, we applied the proce-dure of Step2 as a simple quantization methodto trained models obtained from L1-regularizedmodel learning, which we refer to as (QT).4RDA provided better results at least in our experimentsthan L1-regularized FOBOS (Duchi and Singer, 2009), andits variant (Tsuruoka et al, 2009), which are more familiar tothe NLP community.5L2PA is also known as a loss augmented variant of one-best MIRA, well-known in DEPAR (McDonald et al, 2005).4.1 Configurations of Our MethodBase learning algorithm: The settings of ourmethod in our experiments imitate L1-regularizedlearning algorithm since the purpose of ourexperiments is to investigate the effectivenessagainst standard L1-regularized learning algo-rithms.
Then, we have the following two possiblesettings; DC-ADMM: we leveraged the baselineL1-regularized learning algorithm to solve Step1,and set ?1 = 0 and ?2 = 0 for Step2.
DCwL1-ADMM: we leveraged the baselineL2-regularizedlearning algorithm, but without L2-regularizer, tosolve Step1, and set ?1 > 0 and ?2 = 0 for Step2.The difference can be found in the objective func-tion O(w,u;D) shown in Eq.
3;(DC-ADMM) : O(w,u;D)=L(w;D)+?1||w||1(DCwL1-ADMM) : O(w,u;D)=L(w;D)+?1||u||1In other words, DC-ADMM utilizes L1-regularizer as a part of base leaning algorithm?
(w)=?1||w||1, while DCwL1-ADMM discardsregularizer of base learning algorithm ?
(w), butinstead introducing ?
(u) = ?1||u||1.
Note thatthese two configurations are essentially identicalsince objectives are identical, even though theformulation and algorithm is different.
We onlyreport results of DC-ADMM because of the spacereason since the results of DCwL1-ADMM werenearly equivalent to those of DC-ADMM.Definition of S: DC-ADMM can utilize any fi-nite set for S. However, we have to carefully se-lect it since it deeply affects the performance.
Ac-tually, this is the most considerable point of ourmethod.
We preliminarily investigated the severalsettings.
Here, we introduce an example of tem-plate which is suitable for large feature set.
Let?, ?, and ?
represent non-negative real-value con-stants, ?
be a positive integer, ?
= {?1, 1}, anda function f?,?,?
(x, y) = y(?
?x + ?).
Then, wedefine a finite set of values S as follows:S?,?,?,?
={f?,?,?
(x, y)|(x, y) ?
S???}
?
{0},where S?
is a set of non-negative integers fromzero to ?
?
1, that is, S?
={m}??1m=0.
For example,if we set ?
= 0.1, ?
= 0.4, ?= 4, and ?
= 3, thenS?,?,?,?
= {?2.0, ?0.8, ?0.5, 0, 0.5, 0.8, 2.0}.The intuition of this template is that the distribu-tion of the feature weights in trained model oftentakes a form a similar to that of the ?power law?in the case of the large feature sets.
Therefore, us-ing an exponential function with a scale and biasseems to be appropriate for fitting them.2181.083.085.087.089.091.01.0E+00 1.0E+03 1.0E+06DC-ADMML1CRF (w/ QT)L1CRFL2CRFComplete Sentence Accuracy quantized# of degrees of freedom (#DoF) [log-scale] 30.035.040.045.050.055.01.0E+00 1.0E+03 1.0E+06DC-ADMML1RAD (w/ QT)L1RDAL2PAComplete Sentence Accuracy quantized# of degrees of freedom (#DoF) [log-scale](a) NER (b) DEPARFigure 3: Performance vs. degree of freedom inthe trained model for the development dataNote that we can control the upper bound of#DoF in trained model by ?, namely if ?
= 4 thenthe upper bound of #DoF is 8 (doubled by posi-tive and negative sides).
We fixed ?
= 1, ?
= 1,?2 = 0, ?
= 4 (or 2 if ?
?
5), ?
= ?/2 in all ex-periments.
Thus the only tunable parameter in ourexperiments is ?
for each ?.4.2 Results and DiscussionsFig.
3 shows the task performance on the develop-ment data against the model complexities in termsof the degrees of freedom in the trained models.Plots are given by changing the ?
value for DC-ADMM andL1-regularized methods with QT.
Theplots of the standard L1-regularized methods aregiven by changing the regularization constants ?1.Moreover, Table 1 shows the final results of ourexperiments on the test data.
The tunable param-eters were fixed at values that provided the bestperformance on the development data.According to the figure and table, the most re-markable point is that DC-ADMM successfullymaintained the task performance even if #DoF (thedegree of freedom) was 8, and the performancedrop-offs were surprisingly limited even if #DoFwas 2, which is the upper bound of feature group-ing.
Moreover, it is worth noting that the DC-ADMM performance is sometimes improved.
Thereason may be that such low degrees of freedomprevent over-fitting to the training data.
Surpris-ingly, the simple quantization method (QT) pro-vided fairly good results.
However, we empha-size that the models produced by the QT approachoffer no guarantee as to the optimal solution.
Incontrast, DC-ADMM can truly provide the opti-mal solution of Eq.
3 since the discrete constraintis also considered during the model learning.In general, a trained model consists of two parts:Test Model complex.NER COMP F-sc #nzF #DoFL2CRF 84.88 89.97 61.6M 38.6ML1CRF 84.85 89.99 614K 321K(w/ QT ?=4) 78.39 85.33 568K 8(w/ QT ?=2) 73.40 81.45 454K 4(w/ QT ?=1) 65.53 75.87 454K 2DC-ADMM (?=4) 84.96 89.92 643K 8(?=2) 84.04 89.35 455K 4(?=1) 83.06 88.62 364K 2Test Model complex.DEPER COMP UAS #nzF #DoFL2PA 49.67 93.51 15.5M 5.59ML1RDA 49.54 93.48 7.76M 3.56M(w/ QT ?=4) 38.58 90.85 6.32M 8(w/ QT ?=2) 34.19 89.42 3.08M 4(w/ QT ?=1) 30.42 88.67 3.08M 2DC-ADMM (?=4) 49.83 93.55 5.81M 8(?=2) 48.97 93.18 4.11M 4(?=1) 46.56 92.86 6.37M 2Table 1: Comparison results of the methods on testdata (K: thousand, M: million)feature weights and an indexed structure of fea-ture strings, which are used as the key for obtain-ing the corresponding feature weight.
This papermainly discussed how to reduce the size of the for-mer part, and described its successful reduction.We note that it is also possible to reduce the lat-ter part especially if the feature string structure isTRIE.
We omit the details here since it is not themain topic of this paper, but by merging featurestrings that have the same feature weights, the sizeof entire trained models in our DEPAR case can bereduced to about 10 times smaller than those ob-tained by standard L1-regularization, i.e., to 12.2MB from 124.5 MB.5 ConclusionThis paper proposed a model learning frameworkthat can simultaneously realize feature groupingby the incorporation of a simple discrete con-straint into model learning optimization.
Thispaper also introduced a feasible algorithm, DC-ADMM, which can vanish the infeasible combi-natorial optimization part from the entire learningalgorithm with the help of the ADMM technique.Experiments showed that DC-ADMM drasticallyreduced model complexity in terms of the degreesof freedom in trained models while maintainingthe performance.
There may exist theoreticallycleverer approaches to feature grouping, but theperformance of DC-ADMM is close to the upperbound.
We believe our method, DC-ADMM, to bevery useful for actual use.22ReferencesGalen Andrew and Jianfeng Gao.
2007.
Scal-able Training of L1-regularized Log-linear Models.In Zoubin Ghahramani, editor, Proceedings of the24th Annual International Conference on MachineLearning (ICML 2007), pages 33?40.
Omnipress.Amir Beck and Marc Teboulle.
2009.
A Fast Iter-ative Shrinkage-thresholding Algorithm for LinearInverse Problems.
SIAM Journal on Imaging Sci-ences, 2(1):183?202.Howard D. Bondell and Brian J. Reich.
2008.
Simulta-neous Regression Shrinkage, Variable Selection andClustering of Predictors with OSCAR.
Biometrics,64(1):115.Stephen Boyd, Neal Parikh, Eric Chu, Borja Peleato,and Jonathan Eckstein.
2011.
Distributed Opti-mization and Statistical Learning via the Alternat-ing Direction Method of Multipliers.
Foundationsand Trends in Machine Learning.Xavier Carreras.
2007.
Experiments with a Higher-Order Projective Dependency Parser.
In Proceed-ings of the CoNLL Shared Task Session of EMNLP-CoNLL 2007, pages 957?961.Koby Crammer, Ofer Dekel, Joseph Keshet, ShaiShalev-Shwartz, and Yoram Singer.
2006.
On-line Passive-Aggressive Algorithms.
Journal of Ma-chine Learning Research, 7:551?585.John Duchi and Yoram Singer.
2009.
Efficient On-line and Batch Learning Using Forward BackwardSplitting.
Journal of Machine Learning Research,10:2899?2934.Kevin Duh, Jun Suzuki, and Masaaki Nagata.
2011.Distributed Learning-to-Rank on Streaming Datausing Alternating Direction Method of Multipliers.In NIPS?11 Big Learning Workshop.Hugh Everett.
1963.
Generalized Lagrange MultiplierMethod for Solving Problems of Optimum Alloca-tion of Resources.
Operations Research, 11(3):399?417.Daniel Gabay and Bertrand Mercier.
1976.
A DualAlgorithm for the Solution of Nonlinear VariationalProblems via Finite Element Approximation.
Com-puters and Mathematics with Applications, 2(1):17?
40.Jianfeng Gao, Galen Andrew, Mark Johnson, andKristina Toutanova.
2007.
A comparative study ofparameter estimation methods for statistical naturallanguage processing.
In Proceedings of the 45th An-nual Meeting of the Association of ComputationalLinguistics, pages 824?831, Prague, Czech Repub-lic, June.
Association for Computational Linguis-tics.Rebecka Jo?rnsten and Bin Yu.
2003.
Simulta-neous Gene Clustering and Subset Selection forSample Classification Via MDL.
Bioinformatics,19(9):1100?1109.Terry Koo, Xavier Carreras, and Michael Collins.2008.
Simple Semi-supervised Dependency Pars-ing.
In Proceedings of ACL-08: HLT, pages 595?603.John Lafferty, Andrew McCallum, and FernandoPereira.
2001.
Conditional Random Fields: Prob-abilistic Models for Segmenting and Labeling Se-quence Data.
In Proceedings of the InternationalConference on Machine Learning (ICML 2001),pages 282?289.Dong C. Liu and Jorge Nocedal.
1989.
On the LimitedMemory BFGS Method for Large Scale Optimiza-tion.
Math.
Programming, Ser.
B, 45(3):503?528.Mitchell P. Marcus, Beatrice Santorini, and Mary AnnMarcinkiewicz.
1994.
Building a Large AnnotatedCorpus of English: The Penn Treebank.
Computa-tional Linguistics, 19(2):313?330.Ryan McDonald, Koby Crammer, and FernandoPereira.
2005.
Online Large-margin Training ofDependency Parsers.
In Proceedings of the 43rd An-nual Meeting on Association for Computational Lin-guistics, pages 91?98.Xiaotong Shen and Hsin-Cheng Huang.
2010.
Group-ing Pursuit Through a Regularization Solution Sur-face.
Journal of the American Statistical Associa-tion, 105(490):727?739.Robert Tibshirani, Michael Saunders, Saharon Ros-set, Ji Zhu, and Keith Knight.
2005.
Sparsity andSmoothness via the Fused Lasso.
Journal of theRoyal Statistical Society Series B, pages 91?108.Erik Tjong Kim Sang and Fien De Meulder.
2003.Introduction to the CoNLL-2003 Shared Task:Language-Independent Named Entity Recognition.In Proceedings of CoNLL-2003, pages 142?147.Yoshimasa Tsuruoka, Jun?ichi Tsujii, and Sophia Ana-niadou.
2009.
Stochastic Gradient Descent Trainingfor L1-regularized Log-linear Models with Cumu-lative Penalty.
In Proceedings of the Joint Confer-ence of the 47th Annual Meeting of the ACL and the4th International Joint Conference on Natural Lan-guage Processing of the AFNLP, pages 477?485.Lin Xiao.
2010.
Dual Averaging Methods for Regular-ized Stochastic Learning and Online Optimization.Journal of Machine Learning Research, 11:2543?2596.Leon Wenliang Zhong and James T. Kwok.
2011.Efficient Sparse Modeling with Automatic FeatureGrouping.
In ICML.Hui Zou and Trevor Hastie.
2005.
Regularization andVariable Selection via the Elastic Net.
Journal of theRoyal Statistical Society, Series B, 67:301?320.23
