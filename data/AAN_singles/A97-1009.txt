Name pronunciation in German text-to-speech synthesisSte fan ie  JannedyL inguist ics  Dept .Oh io  S ta te  Un ivers i tyCo lumbus ,  OH 43210, USAj annedy?ling, ohio-state, eduBernd  MSbiusLanguage Mode l ing  ResearchBel l  Laborator iesMurray  Hil l ,  N J  07974, USAbmo?research ,  be l l - l abs ,  comAbst ractWe describe the name analysis and pro-nunciation component in the German ver-sion of the Bell Labs multilingual text-to-speech system.
We concentrate on streetnames because they encompass interest-ing aspects of geographical and personalnames.
The system was implemented inthe framework of finite-state transducertechnology, using linguistic criteria as wellas frequency distributions derived from adatabase.
In evaluation experiments, wecompared the performances of the general-purpose text analysis and the name-specificsystem on training and test materials.
Thename-specific system significantly outper-forms the generic system.
The error ratescompare favorably with results reported inthe research literature.
Finally, we discussareas for future work.1 I n t roduct ionThe correct pronunciation of names is one of thebiggest challenges for text-to-speech (TTS) conver-sion systems.
At the same time, many current or en-visioned applications, such as reverse directory sys-tems, automated operator services, catalog orderingor navigation systems, to name just a few, cruciallydepend upon an accurate and intelligible pronuncia-tion of names.
Besides these specific applications,any kind of well-formed text input to a general-purpose TTS system is extremely likely to containnames, and the system has to be well equipped toprocess these names.
This requirement was the mainmotivation to develop a name analysis and pronunci-ation component for the German version of the BellLabs multilingual text-to-speech system (GerTTS)(M6bius et al, 1996).Names are conventionally categorized into per-sonal names (first and surnames), geographicalnames (place, city and street names), and brandnames (organization, company and product names).49In this paper, we concentrate on street names be-cause they encompass interesting aspects of geo-graphical as well as of personal names.
Linguistic de-scriptions and criteria as well as statistical considera-tions, in the sense of frequency distributions derivedfrom a large database, were used in the constructionof the name analysis component.
The system wasimplemented in the framework of finite-state trans-ducer (FST) technology (see (Sproat, 1992) for adiscussion focussing on morphology).
For evalua-tion purposes, we compared the performances of thegenerM-purpose t xt analysis and the name-specificsystems on training and test materials.As of now, we have neither attempted to deter-mine the etymological or ethnic origin of names, norhave we addressed the problem of detecting namesin arbitrary text.
However, due to the integration ofthe name component into the general text analysissystem of GerTTS, the latter problem has a reason-able solution.2 Some prob lems in name ana lys i sWhat makes name pronunciation difficult, or spe-cial, in comparison to words that are considered asregular entries in the lexicon of a given language?Various reasons are given in the research literature(Carlson, GranstrSm, and LindstrSm, 1989; Macchiand Spiegel, 1990; Vitale, 1991; van Coile, Leys, andMortier, 1992; Coker, Church, and Liberman, 1990;Belhoula, 1993):?
Names can be of very diverse etymological ori-gin and can surface in another language withoutundergoing the slow linguistic process of assim-ilation to the phonological system of the newlanguage.?
The number of distinct names tends to be verylarge: For English, a typical unabridged colle-giate dictionary lists about 250,000 word types,whereas a list of surnames compiled from anaddress database contains 1.5 million types (72million tokens) (Coker, Church, and Liberman,1990).
It is reasonable to assume similar ratiosfor German, although no precise numbers arecurrently available.?
There is no exhaustive list of names; andin German and some related Germanic lan-guages, street names in particular are usu-ally constructed like compounds (Rheins~ra~e,Kennedyallee) which makes decomposition bothpractical and necessary.?
Name pronunciation is known to be idiosyn-cratic; there are many pronunciations contra-dicting common phonological patterns, aswell as alternative pronunciations for certaingrapheme strings.?
In many languages, general-purpose grapheme-to-phoneme rules are to a significant extentinappropriate for names (Macchi and Spiegel,1990; Vitale, 1991).?
Names are not equally amenable to morpho-logical processes, such as word formation andderivation or to morphological decomposition,as regular words are.
That does not render suchan approach unfeasible, though, as we show inthis paper.?
The large number of different names togetherwith a restricted morphological structure leadsto a coverage problem: It is known that a rel-atively small number of high-frequency wordscan cover a high percentage of word tokens inarbitrary text; the ratio is far less favorablefor names (Carlson, GranstrSm, and LindstrSm,1989; van Coile, Leys, and Mortier, 1992).We will now illustrate some of the idiosyncra-cies and peculiarities of names that the analysis hasto cope with.
Let us first consider morphologicalissues.
Some German street names can be mor-phologically and lexically analyzed, such as Kur-fiivst-en-damm ('electorial prince dam'), Kirche-n-weg ('church path').
Many, however, are not de-composable, such as Henmerich ('?')
or Rimpar-stra~e ( '?Rimpar street'), at least not beyond ob-vious and unproblematic components (Stra~e, Weg,Platz, etc.
).Even more serious problems arise on the phono-logical level.
As indicated above, general-purposepronunciation rules often do not apply to names.For instance, the grapheme <e> in an open stressedsyllable is usually pronouned \[e:\]; however, in manyfirst names (Stefan, Melanie) it is pronounced \[e\].Or consider the word-final grapheme string <ie>in Batterie \[bat~r'i:\] 'battery', Materie \[mat'e:ri~\]'matter',  and the name Rosemarie \[r'o:zomari:\].
Andword-final <us>: Mus \[m'u:s\] 'mush, jam' vs. Eras-mus \[er'asmus\].
A more special and yet typical ex-ample: In regular German words the morpheme-initial substring <chem> as in chemisch is pro-nounced \[?e:m\], whereas in the name of the cityChemnilz it is pronounced \[kcm\].50Generally speaking, nothing ensures correct pro-nunciation better than a direct hit in a pronuncia-tion dictionary.
However, for the reasons detailedabove this approach is not feasible for names.
Inshort, we are not dealing with a memory or storageproblem but with the requirement to be able to ap-proximately correctly analyze unseen orthographicstrings.
We therefore decided to use a weightedfinite-state transducer machinery, which is the tech-nological framework for the text analysis compo-nents of the Bell Labs multilingual TTS system.FST technology enables the dynamic combinationand recombination of lexical and morphological sub-strings, which cannot be achieved by a static pronun-ciation dictionary.
We will now describe the proce-dure of collecting lexically or morphologically mean-ingful graphemic substrings that are used produc-tively in name formation.3 P roduct ive  name components3.1 DatabaseOur training material is based on publically avail-able data extracted from a phone and address di-rectory of Germany.
The database is provided onCD-ROM (D-Info, 1995).
It lists all customers ofDeutsche Telekom by name, street address, city,phone number, and postal code.
The CD-l~OMcontains data retrieval and export software.
Thedatabase is somewhat inconsistent in that informa-tion for some fields is occasionally missing, morethan one person is listed in the name field, busi-ness information is added to the name field, firstnames and street names are abbreviated.
Yet, due toits listing of more than 30 million customer ecordsit provides an exhaustive coverage of name-relatedphenomena in German.3.2 C i ty  namesThe data retrieval software did not provide a wayto export a complete list of cities, towns, and vil-lages; thus we searched for all records listing cityhalls, township and municipality administrationsand the like, and then exported the pertinent citynames.
This method yielded 3,837 city names, ap-proximately 15% of all the cities (including urbandistricts) covered in the database.
It is reasonableto assume, however, that this corpus provided suffi-cient coverage of lexical and morphological subcom-ponents of city names.We extracted graphemic substrings of differentlengths from all city names.
The length of the stringsvaried from 3 to 7 graphemes.
Useful substringswere selected using frequency analysis (automati-cally) and native speaker intuition (manually).
Thefinal list of morphologically meaningful substringsconsisted of 295 entries.
In a recall test, these 295strings accounted for 2,969 of the original ist of citynames, yielding a coverage of 2,969/3,837 = 77.4%.Mfinchen(south)component types 7,127morphemes 922recallresiduals (abs.
)residuals (rel.
)2,3874,74066.5%I Berlin Hamburg(east) (north)7,291 8,027574 3202,538 4,2144,753 3,81365.0% 47.5%KJln Total(west)4,396 26,841124 1,9402,102 11,2412,294 15,60052.2% 58.1%Table 1: Extraction of productive street name components: quantitative data.3.3 First namesThe training corpus for first names and street nameswas assembled based on data from the four largestcities in Germany: Berlin, Hamburg, KJln (Cologne)and Miinchen (Munich).
These four cities also pro-vide an approximately representative geographicaland regional/dialectal coverage.
The size and ge-ography criteria were also applied to the selection ofthe test material which was extracted from the citiesof Frankfurt am Main and Dresden (see Evaluation).We retrieved all available first names from therecords of the four cities and collected those whosefrequency exceeded 100.
To this corpus we added themost popular male and female (10 each) names givento newborn children in the years 1995/96, in boththe former East and West Germany, according to anofficial statistical source on the internet.
The cor-pus also contains interesting spelling variants (Hel-mut/Hellmuth) as well as peculiarities attributableto regional tastes and fashions (Maik, Maia).
Thetotal number of first names in our list is 754.No attempt was made to arrive at some form ofmorphological decomposition despite several obviousrecurring components, such as <-hild>, <-bert>,<-fried>; the number of these components i verysmall, and they are not productive in name-formingprocesses anymore.3.4 St reetsWe retrieved all available street names from therecords of the four cities.
The street names weresplit up into their individual word-like components,i.e., a street name like Konrad-Adenauer-Platz cre-ated three separate ntries: Konrad, Adenauer, andPlatz.
This list was then sorted and made unique.The type inventory of street name componentswas then used to collect lexically and semanticallymeaningful components, which we will henceforthconveniently call 'morphemes'.
In analogy to theprocedure for city names, these morphemes wereused in a recall test on the original street name com-ponent ype list.
This approach was successively ap-plied to the street name inventory of the four cities,starting with Mfinchen, exploiting the result of thisfirst round in the second city, Berlin, applying thecombined result of this second round on the third51city, and so on.Table 1 gives the numbers corresponding to thesteps of the procedure just described.
The numberof morphemes collected from the four cities is 1,940.The selection criterion was frequency: Componenttypes occurring repeatedly within a city databasewere considered as productive or marginally produc-tive.
The 1,940 morphemes recall 11,241 componenttypes out of the total of 26,841 (or 41.9%), leaving15,600 types (or 58.1%) that are unaccounted for('residuals') by the morphemes.Residuals that occur in at least two out of fourcities (2,008) were then added to the list of 1,940morphemes.
The reasoning behind this is that thereare component types that occur exactly once in agiven city but do occur in virtually every city.
Togive a concrete xample: There is usually only oneHauptstrafle ('main street') in any given city but youalmost certainly do find a Hauptstrafle in every city.After some editing and data clean-up, the final listof linguistically motivated street name morphemescontained 3,124 entries.4 Compos i t iona l  mode l  o f  s t reetnamesIn this section we will present a compositional modelof street names that is based on a morphologicalword model and also includes a phonetic syllablemodel.
We will also describe the implementation ofthese models in the form of a finite-state transducer.4.1 Naming  schemes for  s t reets  in GermanEvidently, there is a finite list of lexical itemsthat almost unambiguously mark a name as astreet name; among these items are Strafle, Weg,Platz, Gasse, Allee, Markt and probably a dozenmore.
These street name markers are used toconstruct street names involving persons (Stephan-Lochner-Strafle, Kennedyallee), geographical places(Tiibinger Allee), or objects (Chrysanthemenweg,Containerbahnho\]); street names with local, regionalor dialectal peculiarities (Sb'bendieken, HJglstieg);and finally intransparent s reet names (Kriisistrafle,Damaschkestrafle).
Some names of the latter typemay actually refer to persons' names but the originis not transparent to the native speaker.START ROOT {Eps}ROOT FIRST SyllModelROOT FIRST''Al~ons{firstname}<0.2>ROOT FIRST D'irk{firstname}<0.2>ROOT FIRST D'ominik<{firstname}0.2>?
?
?
?ROOT FIRST b'urg{city}ROOT FIRST br'uck{city}<0.2>ROOT FIRST d'orf{city}ROOT FIRST fl'eet{city}<0.2>ROOT FiRST'd'ach{street}<0.2>ROOT FIRST h'ecke{street}<0.2>ROOT FIRST kl'ar{street}<0.2>ROOT FIRST kl'ee{street}<0.2>ROOT FIRST kl'ein{street}<0.2>ROOT FIRST st'ein{street}<0.2>ROOT FiRST'all~ee{marker}ROOT FIRST g'arten{marker}ROOT FIRST pl'atz{marker}ROOT FIRST w'eg{marker}FIRST R00T'{++}<0.1>FIRST FUGE {Eps}<0.2>FIRST FUGE s<0.2>FIRST FUGE n<0.2>FIRST SUFFIX {Eps}<0.2>FIRST SUFFIX s<0.2>FIRST SUFFIX n<0.2>FUGE FIRST {Eps}<lO.O>FUGE ROOT {++}<0.5>SUFFIX END {name}ENDFigure 1: Parts of a grammar (in arclist format) forstreet name decomposition i German.4.2 Bui ld ing  a generat ive t ransducer  forstreet namesThe component types collected from the city, firstname and street databases were integrated into acombined list of 4,173 productive name components:295 from city names, 754 from first names, 3,124from street names.
Together with the basic streetname markers, these components were used to con-struct a name analysis module.
The module was im-plemented as a finite-state transducer using RichardSproat's lexiools (Sproat, 1995), a toolkit for creat-ing finite-state machines from linguistic descriptions.The module is therefore compatible with the othertext analysis components in the German TTS sys-tem (MSbius, 1997) that were all developed in thesame FSM technology framework.One of the lextools, the program arclist, is par-ticularly well suited for name analysis.
The toolfacilitates writing a finite-state grammar that de-scribes words of arbitrary morphological complexityand length (Sproat, 1995).
In the TTS system it is52also applied to the morphological analysis of com-pounds and unknown words.Figure 1 shows parts of the arclist source file forstreet name decomposition.
The arc which describesthe transition from the initial state "START" to thestate "ROOT" is labeled with ?
(Epsilon, the emptystring).
The transition from "ROOT" to the state"FIRST" is defined by three large families of arcswhich represent the lists of first names, productivecity name components, and productive street namecomponents, respectively, as described in the previ-ous section.The transition from "ROOT" to "FIRST" whichis labeled SyllModel is a place holder for a pho-netic syllable model.
This syllable model reflectsthe phonotactics and the segmental structure of syl-lables in German, or rather their correlates on theorthographic surface.
This allows the module to an-alyze substrings of names that are unaccounted forby the explicitly listed name components ( ee 'resid-uals' in the previous section) in arbitrary locationsin a complex name.
A detailed discussion of the syl-lable model is presented elsewhere (MSbius, 1997).From the state "FIRST" there is a transitionback to "ROOT", either directly or via the state"FUGE' ,  thereby allowing arbitrarily long con-catenations of name components.
Labels on thearcs to "FUGE" represent infixes ('Fugen') thatGerman word forming grammar equires as inser-tions between components within a compoundedword in certain cases, such as Wilhelm+s+platz orLinde+n+hof.
The final state "END" can only bereached from "FIRST" by way of "SUFFIX".
Thistransition is defined by a family of arcs which repre-sents common inflectional and derivational suffixes.On termination the word is tagged with the label'name' which can be used as part-of-speech informa-tion by other components of the TTS system.Most arc labels are weighted by being assigneda cost.
Weights are a convenient way to describeand predict linguistic alternations.
In general, sucha description can be based on an expert's analy-sis of linguistic data and his or her intuition, or onstatistical probabilities derived from annotated cor-pora.
Works by Riley (Riley, 1994) and Yarowsky(Yarowsky, 1994) are examples of inferring modelsof linguistic alternation from large corpora.
How-ever, these methods require a database that is anno-tated for all relevant factors, and levels on these fac-tors.
Despite our large raw corpus, we lack the typeof database resources required by these methods.Thus, all weights in the text analysis components ofGerTTS are currently based on linguistic intuition;they are assigned such that after integration of thename component in the general text analysis ystem,direct hits in the general-purpose lexicon will be lessexpensive than name analyses (see Discussion).
Noweights or costs are assigned to the most frequentlyoccurring street name components, previously intro-GSyllModel/l 0++/0.5Figure 2: The transducer compiled from the sub-grammar that performs the decomposition of the fictitiousstreet name Dachsteinhohenheckenalleenplatz.duced as street name markers, making them morelikely to be used during name decomposition.
Theorthographic strings are annotated with symbols forprimary (') and secondary (") lexical stress.
Thesymbol {++} indicates a morpheme boundary.The finite-state transducer that this grammar iscompiled into is far too complex to be usefully dia-grammed here.
For the sake of exemplification, let usinstead consider the complex fictitious street nameDachsteinhohenheckenalleenplatz.
Figure 2 showsthe transducer corresponding to the sub-grammarthat performs the decomposition of this name.
Thepath through the graph is as follows:The arc between the initial state "START" and"ROOT" is labeled with a word boundary {##}and zero cost (0).
From here we take the arc withthe label d'ach and a cost of 0.2 to state "FIRST".The next name component that can be found in thegrammar is stein; we have to return to "ROOT" byway of an arc that is labeled with a morph bound-ary and a cost of 0.1.
The next known component ishecke, leaving a residual string hohen which has to beanalyzed by means of the syllable model.
Applyingthe syllable model is expensive because we want tocover the name string with as many known compo-nents as possible.
The costs actually vary dependingupon the number of syllables in the residual stringand the number of graphemes in each syllable; thestring hohen would thus have be decomposed into aroot hohe and the 'Fuge' n. For the sake of simplic-ity we assign a flat cost of 10.0 in our toy example.In the transition between hecke and allee a 'Fuge'(n) has to be inserted.
The cost of the followingmorph boundary is higher (0.5) than usual in orderto favor components that do not require infixation.Another Fuge has to be inserted after allee.
The cost53of the last component, platz, is zero because this isone of the customary street name markers.
Finally,the completely analyzed word is tagged as a name,and a word boundary is appended on the way to thefinal state "END".The morphological information provided by thename analysis component is exploited by the phono-logical or pronunciation rules.
This component ofthe linguistic analysis is implemented using a mod-ified version of the Kaplan and Kay rewrite rule al-gorithm (Kaplan and Kay, 1994).5 Evaluat ionWe evaluated the name analysis system by compar-ing the pronunciation performance of two versionsof the TTS system, one with and one without thename-specific module.
We ran both versions on twolists of street names, one selected from the trainingmaterial and the other from unseen data.5.1 General-purpose vs. name-specificanalysisTwo versions of the German TTS system were in-volved in the evaluation experiments, differing inthe structure of the text analysis component.
Thefirst system contained the regular text analysis mod-ules, including a general-purpose module that han-dles words that are not represented in the system'slexicon: typically compounds and names.
This ver-sion will be refered to as the old system.
The secondversion purely consisted of the name grammar trans-ducer discussed in the previous section.
It did nothave any other lexical information at its disposal.This version will be refered to as the new system.number of namesat least one system wrongboth systems wrongtotal error rate(no correct solution)Training Data Test Data631 206250/631 (39.6%) 82/206 (39.8%)72/250 (28.8%) 26/82  (31.7%)72/631 (11.1%) 26/206 (12.6%)Table 2: Performance of the general-purpose and the name-specific text analysis systems on training andtest data sets.new system correct&& old system wrongold system correct&& new system wrongnet improvementH Training Data Test Data \]138/163 (84.7%) 35/50 (70.0%)25/163 (15.3%) 15/50 (30.0%)II 113/163Table 3: Comparison between the general-purpose and the name-specific text analysis systems on trainingand test data sets.5.2 T ra in ing  vs. tes t  mater ia l sThe textual materials used in the evaluation exper-iments consisted of two sets of data.
The first set,henceforth training data, was a subset of the datathat were used in building the name analysis gram-mar.
For this set, the street names for each of thefour cities Berlin, Hamburg, KSln and Miinchen wererandomized.
We then selected every 50th entry fromthe four files, yielding a total of 631 street names;thus, the training set alo reflected the respectivesize of the cities.The second set, henceforth test data, was ex-tracted from the databases of the cities Frankfurt amMain and Dresden.
Using the procedure describedabove, we selected 206 street names.
Besides be-ing among the ten largest German cities, Frankfurtand Dresden also meet the requirement of a bal-anced geographical and dialectal coverage.
Thesedata were not used in building the name analysissystem.5.3 Resu l tsThe old and the new versions of the TTS systemwere run on the training and the test set.
Pronun-ciation performance was evaluated on the symboliclevel by manually checking the correctness of the re-sulting transcriptions.
A transcription was consid-ered correct when no segmental errors or erroneoussyllabic stress assignments were detected.
Multiplemistakes within the same name were considered asone error.
Thus, we made a binary decision betweencorrect and incorrect ranscriptions.Table 2 summarizes the results.
On the trainingdata, in 250 out of a total of 631 names (39.6%) atleast one of the two systems was incorrect.
In 7254out of these 250 cases (28.8%) both systems werewrong.
Thus, for 72 out of 631 names (11.4%) nocorrect transcription was obtained by either system.On the test data, at least one of the two sys-tems was incorrect in 82 out of a total of 206 names(39.8%), an almost identical result as for the trainingdata.
However, in 26 out of these 82 cases (31.7%)both systems were wrong.
In other words, no cor-rect transcription was obtained by either system for26 out of 206 names (12.6%), which is only slightlyhigher than for the training data.Table 3 compares the performances of the twotext analysis systems.
On the training data, thenew system outperforms the old one in 138 of the163 cases (84.7%) where one of the systems was cor-rect and the other one was wrong; we disregard hereall cases where both systems were correct as wellas the 87 names for which no correct transcriptionwas given by either system.
But there were also 25cases (15.3%) where the old system outperformedthe new one.
Thus, the net improvement by thename-specific system over the old one is 69.4%.On the test data set, the old system gives the cor-rect solution in 15 of 50 cases (30.0%), compared to35 names (70.0%) for which the new system gives thecorrect transcription; again, all cases were excludedin which both systems performed equally well orpoorly.
The net improvement by the name-specificsystem over the generic one on the test data is thus40%.A detailed error analysis yielded the followingtypes of remaining problems:?
Syllabic stress: Saarbriicken \[za:~bR'Yk~n\] butZweibriicken \[tsv'aibRYk~n\].?
Vowel quality: S'oest \[zo:st\], not \[zO:st\] or\[zo:ost\].?
Consonant quality: Chemnitz \[kcmnits\], not\[~e:mnits\] in analogy to chemisch \[~e:mIf\].?
Morphology: Erroneous decomposition of sub-strings (hyper-correction ver old system); e.g.,Rim+par+strafle \[ri:mpa~\] instead of Rim-par+strafle \[rimpa~\].?
Pronunciation rules: "Holes" in the general-purpose pronunciation rule set were revealed byorthographic substrings that do not occur in theregular lexicon.
It has been shown for English(van Santen, 1992) that the frequency distribu-tion of triphones in names is quite dissimilar tothe one found in regular words.?
Idiosyncrasies: Peculiar pronunciations thatcannot be described by rules and that even na-tive speakers quite often do not know or donot agree upon; e.g., Oeynhausen \[?~:nhauzon\],Duisdorf \[dy:sd~f\] or \[du:sd~f\] or \[du:isd~f\].6 D iscuss ion  and future  workAfter the evaluation, the name analysis transducerwas integrated into the text analysis component ofthe German TTS system.
The weights were adjustedin such a way that for any token, i.e., word or wordform, in the input text an immediate match in thelexicon is always favored over name analysis whichin turn is prefered to unknown word analysis.
Eventhough the evaluation experiments reported in thispaper were performed on names in isolation ratherthan in sentential contexts, the error rates obtainedin these experiments (Table 2) correspond to the per-formance on names by the integrated text analysiscomponent for arbitrary text.There are two ways of interpreting the results.
Onthe one hand, despite a significant improvement overthe previous general-purpose t xt analysis we haveto expect a pronunciation error rate of 11-13% forunknown names.
In other words, roughly one out ofeight names will be pronounced incorrectly.On the other hand, this performance comparesrather favorably with the results reported for theGerman branch of the European Onomastica project(Onomastica, 1995).
Onomastica was funded by theEuropean Community from 1993 to 1995 and aimedto produce pronunciation dictionaries of propernames and place names in eleven languages.
Thefinal report describes the performance of grapheme-to-phoneme rule sets developed for each language.For German, the accuracy rate for quality band I I I - -names which were transcribed by rule only--was71%; in other words, the error rate in the same senseas used in this paper was 29%.
The grapheme-to-phoneme conversion rules were written by experts,based on tens of thousands of the most frequent55names that were manually transcribed by an expertphonetician.However, the Onomastica results can only serveas a qualitative point of reference and should notbe compared to our results in a strictly quantitativesense, for the following reasons.
First, the percent-age of proper names is likely to be much higher inthe Onomastica database (no numbers are given inthe report), in which ease higher error rates shouldbe expected ue to the inherent difficulty of propername pronunciation.
In our study, proper nameswere only covered in the context of street names.Second, Onomastica did not apply morphologicalanalysis to names, while morphological decomposi-tion, and word and syllable models, are the core ofour approach.
Third, Onomastica developed name-specific grapheme-to-phoneme rul sets, whereas wedid not augment he general-purpose pronunciationrules.How can the remaining problems be solved, andwhat are the topics for future work?
For thetask of grapheme-to-phoneme conversion, several ap-proaches have been proposed as alternatives to ex-plicit rule systems, particularly self-learning meth-ods (van Coile, 1990; Torkkola, 1993; Andersen andDalsgaard, 1994) and neural networks (Sejnowskiand Rosenberg, 1987; An et al, 1988).
None of thesemethods were explored and applied in the presentstudy.
One reason is that it is difficult to constructor select a database if the set of factors that in-fluence name pronunciation is at least partially un-known.
In addition, even for an initially incompletefactor set the corresponding feature space is likely tocause coverage problems; neural nets, for instance,are known to perform rather poorly at predictingunseen feature vectors.
However, with the results ofthe error analysis as a starting point, we feel that adefinition of the factor set is now more feasible.One obvious area for improvement is to adda name-specific set of pronunciation rules to thegeneral-purpose one.
Using this approach, Belhoula(Belhoula, 1993) reports error rates of 4.3% for Ger-man place names and 10% for last names.
These re-sults are obtained in recall tests on a manually tran-scribed training corpus; it remains unclear, however,whether the error rates are reported by letter or byword.The addition of name-specific rules presupposesthat the system knows which orthographic stringsare names and which are regular words.
The prob-lem of name detection in arbitrary text (see (Thie-lea, 1995) for an approach to German name tagging)has not been addressed in our study; instead, it wasby-passed for the time being by integrating the namecomponent into the general text analysis ystem andby adjusting the weights appropriately.Other areas for future work are the systematictreatment of proper names outside the context ofstreet names, and of brand names, trademarks, andcompany names.
One important consideration hereis the recognition of the ethnic origin of a name andthe application of appropriate specific pronunciationrules.
Heuristics, such as name pronunciation byanalogy and rhyming (Coker, Church, and Liber-man, 1990) and methods for, e.g., syllabic stress as-signment (Church, 1986) can serve as role modelsfor this ambitious task.7 AcknowledgmentsWe wish to acknowledge Richard Sproat who devel-oped and provided the lextools toolkit; this work alsobenefited from his advice.
We also wish to thank ananonymous reviewer for constructive suggestions.Referencesz.
An, S. Mniszewski, Y. Lee, G. Papcun, andG.
Doolen.
1988.
Hiertalker: A default hierarchyof high order neural networks that learns to readEnglish aloud.
In Proceedings of the IEEE In-ternational Conference on Neural Networks, vol-ume 2, pages 221-228, San Diego, CA.Ove Andersen and Paul Dalsgaard.
1994.
Aself-learning approach to transcription of Dan-ish proper names.
In Proceedings of the Inter-national Conference on Spoken Language Process-ing, ICSLP-94, volume 3, pages 1627-1630, Yoko-hama, Japan.Karim Belhoula.
1993.
A concept for the synthesisof names.
In ESCA Workshop on Applications ofSpeech Technology, Lautrach, Germany.Rolf Carlson, BjSrn GranstrSm, and Anders Lind-strSm.
1989.
Predicting name pronunciation fora reverse directory service.
In Proceedings of theEuropean Conference on Speech Communicationand Technology, Eurospeech-89, volume 1, pages113-116, Paris, France.Kenneth Church.
1986.
Stress assignment in let-ter to sound rules for speech synthesis.
In Pro-ceedings of the IEEE International Conference onAcoustics and Speech Signal Processing, ICASSP-86, volume 4, pages 2423-2426, Tokyo, Japan.Cecil H. Coker.
1990.
Morphology and rhyming:Two powerful alternatives to letter-to-sound rulesfor speech synthesis.
In Proceedings of the ESCAWorkshop on Speech Synthesis, pages 83-86, Au-trans, France.D-Info.
1995.
D-Info--Adress- und TelefonauskunftDeutschland.
CD-ROM.
TopWare, Mannheim,Germany.Ronald Kaplan and Martin Kay.
1994.
Regularmodels of phonological rule systems.
Computa-tional Linguistics, 20:331-378.Marian Macchi and Murray Spiegel.
1990.
Us-ing a demisyllable inventory to synthesize names.Speech Technology, pages 208-212.Bernd M6bius.
1997.
Text analysis in the Bell LabsGerman TTS system.
Technical report, Bell Lab-oratories.Bernd MSbius, Juergen Schroeter, Jan van Santen,Richard Sproat, and Joseph Olive.
1996.
Recentadvances in multilingual text-to-speech synthesis.In Fortschritte der Akustik--DA GA '96, Bad Hon-nef, Germany.
DPG.Onomastica.
1995.
Multi-language pronunciationdictionary of proper names and place names.Technical report, European Community, Ling.Res.
and Engin.
Prog.
Project No.
LRE-61004,Final Report, 30 May 1995.Michael Riley.
1994.
Tree-based models of speechand language.
In Proceedings of the IEEE-IMSWorkshop on Information Theory and Statistics,Alexandria, VA.T.
Sejnowski and C.R.
Rosenberg.
1987.
Parallelnetworks that learn to pronounce English text.Complex Systems, 1:144-168.Richard Sproat.
1992.
Morphology and computa-tion.
MIT Press, Cambridge, MA.Richard Sproat.
1995.
Lextools: Tools for finite-state linguistic analysis.
Technical report, AT&TBell Laboratories.Christine Thielen.
1995.
An approach to propername tagging in German.
In Proceedings ofthe EACL-95 SIGDAT Workshop: From Text toTags, Dublin, Ireland.Kari Torkkola.
1993.
An efficient way to learn En-glish grapheme-to-phoneme rul s automatically.In Proceedings of the IEEE International Confer-ence on Acoustics and Speech Signal Processing,ICASSP-93, volume 2, pages 199-202.Bert van Coile.
1990.
Inductive learning ofgrapheme-to-phoneme rul s. In Proceedings ofthe International Conference on Spoken LanguageProcessing, ICSLP-90, volume 2, pages 765-768,Kobe, Japan.Bert van Coile, Steven Leys, and Luc Mortier.
1992.On the development of a name pronunciation sys-tem.
In Proceedings of the International Confer-ence on Spoken Language Processing, ICSLP-92,volume 1, pages 487-490, Banff, Alberta.Jan van Santen.
1992.
Personal communication.Tony Vitale.
1991.
An algorithm for high accuracyname pronunciation by parametric speech synthe-sizer.
Computational Linguistics, 17:257-276.David Yarowsky.
1994.
Homograph disambiguationin speech synthesis.
In Proceedings of the SecondESCA Workshop on Speech Synthesis, pages 244-247, New Paltz, NY.56
