Aggregation in the NL-generator ofthe Visual and Natural language Specification ToolHercules DalianisDepartment ofComputer and Systems SciencesThe Royal Institute of Technology andStockholm UniversityElectrum 230S-164 40 KistaSwedenph.
08-668 90 98mob.
ph.
010-668 13 59email: hercules @dsv.su.seAbstractIn this paper we show how to use the so-called aggregation technique to removeredundancies in the fact base of the Visualand Natural language Specification Tool(VINST).
The current aggregation modulesof the natural language generator f VINSTis described and an improvement is prop-osed with one new aggregation rule and abidirectional grammar.I.
IntroductionThis paper describes the aggregation process in thenatural language generator of the Visual and Naturallanguage Specification Tool (VINST), and how theaggregation can be improved.Aggregation is the process which removes redund-ancy in texts.
Redundancy t pically occurs when thematerial selected for communication containsinformation that is duplicated in the text, or else isso closely related that the reader can automaticallyinfer one piece when reading another.
Aggregation isalso called ellipsis by linguists.In the VINST-system Natural Language generat-ion is applied in various places.
In the specificationpart to paraphrase the rules expressed in formallanguage, to paraphrase automata, further on to para-phrase questions asked to the theorem prover, and toparaphrase the executed events and the newly createdfact base.
We will in this paper only treat thegeneration of NL from fact bases.The kind of text produced in this domain isillustrated in the right hand window of VINST infigure 1.When generating a text from a fact base in VINSTthe text becomes very tedious to read since the textis very redundant and does not feel correctconceptually.
To make the text smoother to read anew architecture is suggested where a newaggregation rule from (Dalianis & Hovy 1993) issuggested to be used, namely predicate groupingrule.?
6 File Edit UINST $1mulatorltFigure 1.
The event window, where the usercan execute vents and the interpreter intewrets the specification.The VINST-system is a multi-modal specificationand validation tool, specifically for the functionalityof telecom services.
The specification is carried outwith a Visual Language (VL) and a restricted NaturalLanguage (NL), which are translated to LOXY(Echarti & St~lmarck 1988), a First Order Languageextended with time.The VINST system is a ready usable prototypewhich has been demonstrated and tested on varioussites in the world (Engstedt 1991, Preifelt &Engstedt 1992).
The VINST prototype is imple-mented in AAIS-Prolog and SuperCard on Macin-tosh.
The Prolog is used for the NL-system and theSuperCard for the VL-part and for the userinteraction of the system.2862.
Previous researchSeveral studies on aggregating text based on textstructure appear in the literature.
In fact, the termaggregation was first used in (Mann & Moore1980).
In (Horacek 1992), is described theintegration of aggregation (which he calls grouping)with quantification under guidance of principles ofconversational implicature.
(Dale 1990) calls itdiscourse level optimization, (Kempen 1991) calls itforward and backward conjunction reduction.In (Hovy 1990) two structural aggregation rulesare used to eliminate redundant information.
In anexample in (Scott & de Souza 1990), nine heuristicrules aggregate six sentences which express a set offacts using a single sentence.
In (Dalianis & Hovy1993) are eight different aggregation rules described.3.
The current NL-generatorTo solve the problem of the not "naturalness" ofthe LOXY-formulas and make them more "natural"the following two modules have been constructed:the natural and compact modules and finally thesurface grammar.The LOXY-formula which is to be paraphrased isprocessed step by step to natural anguage by thedifferent modules to a deep structure.
The natural,and compact modules can be activated anddeactivated separately.
Finally the surface generatorgenerates natural language text from the deepstructure.The surface grammar contains its own generationgrammar and uses the same dictionary as the NL-parser.
The surface generation grammar is a DefiniteClause Grammar, DCG, (Pereira & Warren 1980,Clocksin & Mellish 1984), and is not treated in thispaper.4.
Natural moduleThe natural module creates adeep structure fromthe flat LOXY-formula, by looking up its elementsin the dictionary.
From this information it candecide what the deep structure should look like.
Thenatural module is also called sentence planner, i.e.
itplans the length and the internal order of thedifferent sentences.tl is a subscriber and tl is idle andtl has 100 and 100 is a phonenumber and tlhas 101 and 101 is a phonenumber andt2 is a subscriber and t2 is idle andt2 has 200 and 200 is a phonenumber.Figure 2a) Normal mode, only surface generation.The natural module does what (Dalianis & Hovy1993) calls ordering and economy.an idle subscriber tl has a phonenumber 100 andan idle subscriber tl has a phonenumber 101andan idle subscriber t2 has a phonenumber 200.Figure 2b) Natural mode5.
Compact moduleThe natural language expression, after beingprocessed by the natural module has a lot ofredundant noun phrases.
This is solved by thecompact module.
Our aggregation rule says: If twoor more identical (and hence redundant) noun phrasesare repeated consecutive then remove all the nounphrases except he first one This operation willremove the repetitive generation of the noun phraseand the text becomes concise.
(Dalianis & Hovy1993) calls this subject grouping.an idle subscriber tl has a phonenumber 100 andhas a phonenumber 101 andan idle subscriber t2 has a phonenumber 200.Figure 2c) Natural mode + compact modeWhat we see is that the text can be aggregated in adifferent way and also that the subject grouping hasnot been fully applied on the phonenumbers.2876.
Paraphrase fact basesFact bases can be paraphrased into naturallanguage ither after that an event is executed withthe interpreter or as an answer to a question to thetheorem prover.
Here we show an example of thelatter, (see Figure 3).A question expressed in NL (It is difficult toexpress questions in VL) is translated to a LOXYexpression that the theorem prover tries to prove.The generation module takes the proved query andgenerates an NL-answer....... ~._FI le Edit UINEI" Qumry.
.
.
.
.
.
.
.
.
Que~ ~ II Rnstuer: i asttbsatber tl henL, & pho~rlurrlber 101~J a hc~nunlber 200 alld hus phoe, e r~mbef  lo l  arida phorNm~ 100 andan kJe sut~cdb~ t2 hasI ap~2OOar~Figure 3.
The query window, where the usercan ask questions and obtainanswers via the theorem prover.7.
Improvements on architectureThe present natural anguage generator of VINSTis difficult to control because there are only twocontrol features (natural and compact) available.
It isrequired great effort to adapt he NL-generator to newdomains or to extend it without writing newgrammar rules.
Further on it is difficult to expressthe NL-paraphrase in a similar fashion as the userexpresses him/herself, therefore are some improve-ments suggested.One suggestion is is to use as a natural anguagegrammar the Core Language Engine (CLE)(Alshawi 1992).
CLE is a bidirectional, unificationand feature-based grammar written in Prolog.CLE uses Quasi Logical Form (QLF) aslinguistic representation for the parsed NL-string.QLF can be used to direct the generator, but it needsto be augmented.
We have to construct anIntermediate Generation Form (IGF) which willcontain the suitable linguistic primitives.
The IGFwill be acquired both from the user and from thecontext where the NL is to be paraphrased, e.g.simulation- or query window.
The used words ofthe user will be reused for generation together withthe LOXY formula.When the paraphrasing will be carried out from aVL-expression, then we have to use preset linguisticprimitives and words for the NL-generation becausethere will not be any linguistic primitives.8.
Intermediate Generation FormThe Intermediate Generation Form (IGF) willcontain the type of sentences, e.g.
a fact or anassertion (dcl), a rule (rule), a yes-no-question(ynq), a what, which or who-question (whq), a nounphrase (np) and many more.The Quasi Logical Form (QLF) of CLE usesalready dcl, ynq and whq and could be extended toalso treat np.
The rest of the type of sentences arecontext dependent, i.e.
rule etc.
The sentence typesabove are identical with the ones in the QLF, exceptof the sentence type np and some others which areVINST specific.To each type of sentence, above, there is a set offeatures, e.g.
adjective form (adj), subjectivepredicative complement (predcomp), subjectgrouping (sg) and predicate grouping(pg) and manymore.The features can be unordered and the number canbe arbitrary.
Some of the features are the same asthe one QLF uses, except for: predcomp, sg and pg.The IGF contains also two aggregation features;subject and predicate grouping which makes the textnicer to read.Observe that there is no time feature in the IGF,since LOXY has an embedded time.What we also need is a list of words used by theuser.
The words are obtained from the parser.
TheIGF needs to be stored together with the LOXYexpression until they are going to be used by theNL-generator.
The syntax of the IGF is described byshowing the Prolog predicate int_genform/3 andits content.int_gen_form(REFNR,TYPE(FEATURELIST),USED_WORD_LIST).REFNR is a reference number to the LOXY-expression to be paraphrased.
TYPE is type ofsentence and FEATURE_LIST is a list of featurenames describing the sentences.USED_WORD_LIST is a list of previous usedwords.2889.
Paraphrase fact bases aggregatedHere follows two examples on how theparaphrasing would look like with the newarchitecture upon paraphrasing a LOXY-fact base toNL, (Not yet implemented)The only thing which changes between the twoexamples i the content of the IGF.Before generation i put propositions are orderedbased on the characteristics of their subjects, asdescribed in (Dalianis & Hovy 1993).Idletl t2Figure 4.
A fact base described in VLa) fact(2, p(1, subscriber(tl)) &p(1, idle(tl)) & p(1,has(tl,100)) &p(1,has(tl, 101)) &p(1, phonenumber(100)) &p(1, phonenumber(101)) &p(1, subscriber(t2)) & p(l, idle(t2)) &p(1,has(t2,200)) &p(1, phonenumber(200)))).b) int_gen_form(2,dcl(\[predcomp,sg\]),\[subscriber,idle,be, have,phonenumber~tl is a subscriber and is idle andhas the phonenumber 100 and 101t2 is a subscriber and is idle andhas the phonenumber 200c) int_gen_form(2,dcl(\[adj,sg,pg),\[subscriber, idle, be, have,phonenumber\]).tl and t2 are idle subscribers andtl has the phonenumbers 100 and 101 andt2 has the phonenumber 200.In the second NL-example, figure 4c), we see howthe predicate grouping works.I0 .
Conclusions and future workWe have in this paper shortly described the currentNL-generator f the VINST-system.
We have foundit too inflexible and the generated text too tedious toread, therefore is suggested a new NL-architecturewhere the user and the context of the user interactionis used to extract an Intermediate Generation Form(IGF).
The IGF will contain a new aggregation rule,the so called predicate grouping rule which willmake the generated text easier to read, further on isproposed to use a bidirectional grammar for thesurface generation.One future suggestion is also to use the resultsfrom the NL-parsing for the generation.AcknowledgmentsMany thanks to Ed Hovy at Information SciencesInstitute/USC for advising me and for stimulatingdiscussions via email and many thanks also toStefan Preifelt and M~ns Engstedt at Ellemtel Tele-communication Systems Laboratory, for beeinginspiring workmates during the VINST prototypeimplementation a d also for introducing me to thetelecom domain.ReferencesAlshawi, H. ed.
(1992).
The Core LanguageEngine, MIT Press.Clocksin, W.F.
& Mellish, C.S.
(1984).Programming in Prolog, Springer Verlag.Dale, R. (1990).
Generating Recipes: An Overview of Epicure, In Current Research inNatural Language Generation, Dale, R. et al(Eds).
Academic Press Limited, pp.
229-255.Dalianis, H. & Hovy, E. (1993).
Aggregation iNatural Language Generation: In theProceedings of the Fourth European Workshopon Natural Language Generation, Pisa, Italy,28-30 April.Echarti, J-P. & Sthlmarck, G. (1988).
A logicalframework for specifying discrete dynamicsystems, Advanced Systems DevelopmentDept., Ellemtel Telecommunication SystemsLaboratory, Alvsjr, Sweden..Engstedt, M. (1991).
A flexible specificationlanguage using Natural Language andGraphics,Centre for Cognitive Science,Edinburgh.Horacek, H. (1992).
An integrated view oftextplanning: In Aspects of AutomatedNatural Language Generation, Dale, R. etal, (eds)., Springer Verlag Lecture Notes inArtifical Intelligence no 587,pp.
193-227.Hovy, E.H. (1990).
Unresolved Issues in ParagraphPlanning: In Current Research in NaturalLanguage Generation, R. Dale, et al (eds).,Academic Press Limited,pp.
17-45.Kempen, G. (1991).
Conjunction reduction andgapping in clause-level coordination: Aninheritance-based approach: In ComputationalIntelligence, Vol 7, No 4, pp.
357-360.Mann, W.C. & Moore, J.A.
(1980).
Computeras Author - Results and Prospects,Report/ISl/RR-79-82, University of SouthernCalifornia/Information Sciences Institute.289Pereira, F.C.N & Warren, D.H.D.
(1980).
DefiniteClause Grammars for Language Analysis - ASurvey of the Formalism and a Comparisonwith Augmented Transition Networks.
J ofArtificial Intelligence 13, pp.
231-278.Preifelt, S & Engstedt, M. (1992).
Resultat fromVINST projektet, (In Swedish, Results fromthe VINST project), Ellemtel Telecommunication Systems Laboratory, Jklvsj6, Sweden.Scott, D. & de Souza, C.S.
(1990).
Getting theMessage Across in RST-based TextGeneration:In Current Research in NaturalLanguage Generation, R. et al (eels).Academic Press Limited, pp.
47-73.290
