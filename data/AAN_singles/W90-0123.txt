Relational-Grammar-Based Generation in the JETS Japanese-EnglishMachine Translation SystemDavid E. JohnsonIBM Research, T. J. Watson Research LaboratoryP.O.
Box 218Yorktown Heights, NY 10598 USAHideo WatanabeIBM Research, Tokyo Research Laboratory5-19 Sanbaneho, Chiyoda-kuTokyo 102, JapanAbstractThis paper describes the design and func-tioning of the English generation phase inJETS, a limited transfer, Japanese-Englishmachine translation system that is looselybased on the linguistic framework of relationalgrammar.
To facilitate the development ofrelational-grammar-based generators, we havebuilt an NL-and-application-independent gen-erator shell and relational grammar rule-writing language.
The implemented generator,GENIE, maps abstract canonical structures,representing the basic predicate-argumentstructures of sentences, into well-formedEnglish sentences via a two-stage plan-and-ex-ecute design.
This modularity permits theindependent development of a very general,deterministic execution grammar that is drivenby a set of planning rules sensitive to lexical,syntactic and stylistic constraints.
Processingin GENIE is category-driven, i.e., grammaticalrules are distributed over a part-of-speechhierarchy and, using an inheritance mech-anism, are invoked only ff appropriate for thecategory being processed.1- IntroductionThis paper discusses relational-grammar-based gener-ation in the context of JETS, a Japanese-Englishmachine translation (MT) system that is being devel-oped at the IBM Research Tokyo Research Laboratory.To put our work in perspective, we first explain themotivation for basing JETS on relational grammar (RG)and then sketch the processing flow in translation.
Withthis background, we (i) describe and illustrate certainaspects of the rule-writing language, GEAR, in whichthe GENIE English generator has been written; (ii)comment on key aspects of the generator shell, GEN-SHELL, in which GENIE has been developed; and (iii)discuss the design and functioning of the GENIEEnglish generator.With few exceptions such as the work being doneat CMU (cf.
KBMT-89 (1989), Nirenburg (1987), andNirenburg, et.
al.
(1988)), in the SEMSYN project atthe University of Stuttgart (Rosner (1986)), and thejoint work between the ISI Penman project and theUniversity of Saarbrticken (Bateman, et.
al.
(1989)),generation within the area of machine translation hasreceived very little attention.
Typically, MT systemshave no independently functioning, linguistically justi-fied generation grammar.
In the case of transfersystems, much of the target language grammar is typi-cally built into the transfer component, resulting in anon-modular, rigid and linguistically inadequate system.It is the norm in MT systems for the linguistic omplexi-ties inherent in robust generation to be simply ignored,contributing tothe inadequacy of MT systems.In contrast, we have sought o shift more of theprocessing burden from transfer onto generation,allowing our system to incorporate a variety of resultscoming from theoretical linguistics.
GENIE is an appli-cation-and-language-independent generator embodying174a robust, linguistically justified RG grammar of English.Moreover, GENIE incorporates a syntax planner thatapplies a set of planning rules determining which rulesin the execution grammar should be applied.
As longrecognized in work on text generators, the incorpo-ration of a syntax planner introduces the kind of flexi-bility required for robust generation.JETS is a so-called limited transfer system, i.e., asystem in which structural transfer is kept to aminimum.
The key RG notion in our work is that ofcanonical (relational) structure (CS), an abstract level ofsyntactic structure representing the basic predicate-ar-gument structure of clauses in terms of a universal set ofprimitive (grammatical) relations uch as subject, directobject, indirect object, chomeur.
1Given the basic assumption that one is developinga limited transfer system, implying deep analyses ofboth the source and target languages which converge onstructurally similar internal representations for trans-lation equivalents in a wide range of cases, it is criticalto select a linguistic framework which supports therequired analyses, enabling one to conceptualize the lin-guistic processing in a uniform manner.
As discussed inJohnson (1988b), with respect o MT, RG is a logicalchoice of linguistic framework since CSs provide anatural syntactic bridge between languages as diverse instructure as Japanese and English.
This is so  for tworeasons: (1) within one language, the CSs of para-phrases are typically the same or highly similar and (2)translation equivalents often have structurally similar ifnot isomorphic CSs.One of the key advantages of RG comes from itsexplicit representation of grammatical relations likesubject and direct object, which are argued to be uni-versal.
In contrast, structure-based frameworks uch astransformational-generative grammar (TG) at best onlyimplicitly represent grammatical relations such assubject and direct object in terms of linear precedenceand dominance, which are language particular.
If oneconsiders the task of transfer, for instance, it is clearthat representing basic clause structure in terms ofexplicitly marked, order-independent relations ratherthan in terms of language-dependent structural relationsreduces the amount of structure changing to be done inthe transfer component.
This is especially true for lan-guages like Japanese and English, which differ greatly insuperficial structural properties (not to mention the factthat Japanese has very free word order, which arguablymakes it even less suited to structure-based frame-works).2 -  P rocess ing  F low in JETS  and GENIEAs in all transfer systems, linguistic processing in JETScan be divided into three phases: analysis, which con-sists of lexical analysis and parsing, transfer and gener-ation.
The output of analysis is a Japanese CS, whichrepresents the basic predicate-argument structure of theJapanese sentence.
2 Transfer produces an English CS,which is often, but not always, isomorphic to the Japa-nese CS.
The English CS is passed to the GENIE gen-erator, whose task is to generate a grammaticallycorrect and stylistically appropriate English sentencegiven a well-formed CS.To illustrate, consider the following Japanese sen-tence and two of the possible English translations:1. karera wa Tookyoo e itta rashiithey top Tokyo to went seem2.
They seem to have gone to Tokyo.3.
It seems that they went to Tokyo.In translating (1), analysis maps the input string into theJapanese CS shown at the left in Figure 1 on the nextpage.
Transfer then maps the Japanese CS into theEnglish CS shown at the right in Figure 1.I For theoretical background on RG, see the many articles listed in the bibliographic reference Dubinsky and Rosen (1987).Note that the following abbreviations are used in glosses of Japanese xamples: top (topic), nm (nominalize), and pp (post-position).2 For discussion of parsing in JETS, see Maruyama, Watanabe and Ogino (1989).175Japanese CS for (1) English CS for (2) & (3)rashii seemitta go(tense, past)/ l o c i  1/ l o c ikarera Tookyoo they Tokyo(topic.
wa) (pp.
e) (topic.
T) (prep.
to)seemgo(past)lociTokyo(to)Tense-Spellingtheyseemhave theygo(pastpart) ,<Tokyo(to)Figure 1.
Canonical structures for (1), (2) and (3).
Notethat "1" means "subject", "loc" means "locative".Given the English CS, it is up to the GENIE Englishgenerator to generate ither (2) or (3).
Based on theinformation that they in the English CS is marked as thetopic of the sentence, GENIE will map the CS into thesuperficial (unordered) relational structure shown inFigure 2 via the relational rule of Subject-to-SubjectRaising (so-called A-raising).
Subsequent rules ofTense-Spelling and Linearization (including the spellingout of verbal forms and prepositions) will result in thestring They seem to have gone to Tokyo, as shown inFigure 3.seem seemgo(past) go(past) theythey Tokyo(to) Tokyo(to)Figure 2.
A-Raising Applied to the CS of (2) and (3).Note that "6" means "complement".- - -  Lineanzation, etc .
.
.
.
>They seem to have gone to TokyoFigure 3.
Rest of the Derivation of (2)As illustrated above, RG, like TG, is a "multi-stratal" theory, i.e., clauses typically have more thanone level of syntactic analysis, and these levels/strataare mediated by clause-level rules.
In the case of TG,the structures are phrase-structure trees, and transf-ormations map trees into trees; in the case of RG, thestructures are edge-labelled trees (called relational struc-tures (RS)), where the edge labels represent primitiverelations, and the rules map RSs into RSs.The use of multiple strata sets RG apart fromfunctional frameworks uch as FUG (Kay 1979) andLFG (Bresnan 1982), which also use primitive relations(functions), and from all other monostratal frameworkssuch as GPSG (Gazdar, et.
al.
1985), whether func-tional or not.
The manipulation of explicitly markedrelations in unordered relational structures ets RGapart from TG.
In our work on Japanese-English MT,the RG concept of multiple relational strata has provento be of significant practical use - -  facilitating thedesign and development of a limited transfer componentand a robust generation component, enhancing modu-larity, and allowing the linguistic processing to be con-ceptualized in a uniform fashion.1763-  The  RG Rule Wri t ing Language:  GEAROne key aspect of our implementation f an RG gener-ator is the GEAR rule-writing language.
GEAR permitsa grammar developer to write computationally powerfulRG rules in a linguistically natural manner.
GEARrules identify grammatical objects via path specifica-tions, of which there are two types: (1) node-specifier,consisting of a sequence of one or more relation names,and (2) property-specifier, consisting of a node-specifierfollowed by a property name.
For instance, 1:1 indi-cates a node that is the subject of a node that is thesubject of the node currently being processed (thefocus) and 2.tense denotes the value of the propertytense of a node that is the direct object of the focus.GEAR path expressions are superficially similar to theexpressions used in unification-based frameworks uchas FUG and PATR (Shieber, et.
al.
(1983)).
However,GEAR is not unification based, rather it provides anumber of procedural operations, including nodedeletion and node creation.Each rule consists of a sequence of statements, ofwhich there are several types, e.g., IF-THEN-ELSE,CALL, ON and restructuring statements.
IF-THEN-ELSE statements control the rule internal processingflow.
CALL statements are used to invoke rules byname.
An ON statement invokes a specified rule on anode reachable from the focus via a node-specifier.There are several types of restructuring state-ment, e.g., ASSIGN, CREATE, DELETE and COPY.An ASSIGN statement is used to alter the relations of anode identified via a node-specifier; the new relation isalso specified by a node-specifier.
The core ofGENIE's A-raising rule, whose relational changes areillustrated in Figure 2 above, is (using 6 for "comple-ment"):(ASSIGN 1 6) "Assign my subject as my complement"(ASSIGN 6:1 1) "Assign my complement's subject asmy subject"The complete rule is shown in Figure 4.% % Define the rule A-raising for intransitive verbs(DEF-RULE A-Raising OF Intransitive-verb% % If the A-raising rule switch is turned on(IF (A-raise is 'yes)% % then assign my subject as my complementTHEN (ASSIGN 1 6)% % and assign my complement's subject as my subject(ASSIGN 6:1 1)% % and on my complement call the rule% % which makes infinitives(ON 6 (CALL Make-lnf'mitive))))Figure 4.
GENIE's A-Raising ruleCreation, copying and deletion of nodes are alsospecifiable but space limitations preclude discussion.4-  The GENSHELL  generator  shellBuilding on our experience with an earlier prototypedeveloped by Schindler (1988), we have developed anNL-independent generator shell, GENSHELL, to facili-tate the development of RG generators.
For any givengenerator, grammar developers need only specify thedesignated grammatical relations, parts of speech, apart-of-speech ierarchy, dictionaries and grammars.GENSHELL takes this information and constructs aruntime generator.One of the distinctive aspects of GENSHELL,due to Sehindler (1988), is the concept of category-driven processing.
In category-driven processing, partsof speech are represented as categories in a categoryhierarchy (POSH) and nodes in RSs are represented asobjects which are instances of categories and thus caninherit properties via the POSH, Among the inheritableproperties are grammar ules.
For instance, the rulesfor Passive and Subject-to-Object Raising (so-calledB-Raising; discussed later) would be associated with theclass Transitive Verb, A-raising would be associatedwith the class Intransitive Verb, and Subject-VerbAgreement would be associated with the superordinateclass Verb.In our implementation, all rules are defined withrespect to named rule bundles, and rule bundles areassociated either with categories in the POSH, thegeneral/default eases, or with lexical entries, the specialcases.
Rule definitions have the form:I_77(DEF-RULE rulename OF rule-bundle-name(rule-body)).
(As shown in Figure 4 above, a default rule bundleassociated with a POS class is given the same name asthat class.)
When a node N associated with category Cand lexical entry L is being processed, the rule searchroutine, given a rule named R - -  the'latter comes fromso-called agenda rules which are also associated with CD uses inheritance to first search for R among any rulebundles named in L, then searches for R among C'srules, then C's parent's rules and so on up to the top ofthe hierarchy until either some rule named R is found orthe top category is reached and the process fails.
Inshort, in category-driven processing, the grammarinvoked on N is constructed as appropriate at proc-essing time on the basis of lexically activated rules andthe rules accessible to N's category using the POSH andinheritance.One example is the ordering of adjectives andnouns.
The class Noun is associated with ageneral/default lineanzation rule which orders adjec-tives before nouns, generating phrases like tall woman.Nouns like someone, anyone, etc.
are associated with alexically triggered lineafization rule which places theadjective after the head noun.
These two rules are bothnamed Linearize.
Thus, if the focus is someone and it ismodified by tall, the search routine, looking forLinearize, will first find the special rule, correctly gener-ating someone tall.A category-driven system has two advantagesover more conventional rule systems: (i) it provides anatural mechanism for dealing with special cases trig-gered by lexical items, while providing a fail-soft mech-anism in the form of the general rules inherited from thePOSH and (ii) only rules that in principle could be rele-vant to processing a given node in an RS will be testedfor application.
That is, the POSH provides a linguis-tically motivated means for organizing a large grammarinto subgrammars.
35- GENIE: the English generatorGenerating from CSs requires a robust generationgrammar of the target language, as well as a decision-making component that decides which surface form is tobe generated.
The generation grammar employed inGENIE is a (deterministic) relational grammar having asubstantial number of clause-level rules which altergrammatical relations, e.g., Passive, A-raising andB-raising, as well as minor rules such as Tense-Spellingand Linearization (the latter of which does not altergrammatical relations).As illustrated in Figure 1 above, CSs typically donot correspond directly to grammatical sentences.Further, any given CS typically constitutes the basis forthe generation of a number of superficial forms, e.g.,(2) and (3) above.
This control problem has beenaddressed by splitting generation into two phases: asyntax planning phase and an execution phase.
Thefunction of GENIE's planner is quite different from thatof other generators.
Typically, generator plannersdecide "what to say", constructing some sort of internalrepresentation that is then processed by a realizationcomponent.
Typical planners will be concerned withchunking into sentences, topic selection and wordchoice (see, e.g., Appelt(1985), Danlos (1984),Hovy(1985), Kukich (1983), McKeown (1985), McDo-nald (1984)), and Mann (1983)).In the case of JETS, however, since we are in thedomain of transfer-based MT, all of these "high level"considerations are decided by the analysis and transfercomponents.
In GENIE's case, the planner must, onthe basis of a given CS, deal with a myriad of low-levelsyntactic conditions and their interactions (most ofwhich have not been discussed or even recognized inthe generation literature).
Internal to GENIE, thismeans deciding which of the rules in the deterministicexecution grammar should be applied.
For instance,CSs with seem have a disjunctive grammatical condi-tion: they must either be raised, yielding the pattern NPseem to VP (as in (2) above) , or extraposed, yieldingthe pattern It seems that S (as in (3) above).
Failure toapply either A-raising or so-called It-Extraposition3 Earlier work using a lexical hierarchy and inheritance in natural anguage processing includes Wilensky (1981), Jacobs(1985) and Zernik and Dyer (1987).
These works make heavy use of phrasal patterns (so-called pattern-concept pairs) andso the conception of grammar and lexicon and hence the notion of what is inherited in these works differ greatly from ours,which is part of the generative-linguistic tradition.178would result in the ungrammatical pattern *That Sseems (in the case of Figure 1 above: *That they went toTokyo seems).
The decision to apply A-raising in theabove example is stylistic ("make the topic the mainclause subject, if possible"), but the disjunctive require-ment ("apply either A-raising or It-Extraposition") isgrammatical.
Having no control over "what to say",GENIE 's  planner is conceptually part of the realizationphase and not part of the typical "planning phase".GENIE's  planner communicates which rulesshould be applied to the execution grammar via a set ofso-called rule switches, which are simply binary-valuedproperties whose property names are the names of exe-cution rules, e.g., (A-raise .
Yes), (Passive .
No).
Asshown in Figure 4 above, IF statements are often usedto test for a rule-switch value, which value is either setby a planning rule or comes from a lexical entry.
Ruleswitches are a generalization of the earlier concept oftransformational rule features (cf.
Lakoff 1970); thegeneralization is that rule switches can be dynamically setby planning rules, based on lexicul, syntactic, semantic andstylistic considerations (see Johnson 1988a for moreexamples and further discussion).
'*For example, in (1) above, based on the informa-tion that they is the topic (this information comes fromtransfer), a syntax planning rule which is partly respon-sible for making topics surface subjects sets the switch(A-raise .
Yes), turning on A-raising, and the switch( I t -Extra.
No), turning off It-  extraposition, resulting in(2) rather than (3).
GENIE's  architecture is shown inFigure 5.Planning rules insure that a multitude of lexico-syntactic and stylistic conditions are met, e.g., thatclauses with modals do not undergo A-raising, pre-venting the generation of, e.g., *They seem to can swim;that clauses with verbs like force have passivized subor-dinate clauses where required to meet coreferentialdeletion conditions (cf.
She forced him to be examinedby the doctor, *She forced him (for) the doctor toexamine him); and that verbs like teach undergo dativealternation if there is no specified direct object, gener-ating He taught her rather than *He taught to her (cf.sing, which has the opposite condition - He sang to herbut *He sang her).It is also the responsibility of the planner to makesure island constraints are not violated.
For instance, ifa wh-nominal is in a sentential subject, then planningrules turn on execution rules such as A-raising resultingin sentences like Who is likely to win (via A-Raising)rather than *Who is to win likely?
or the stylisticallymarginal ?Who is it likely (that) will win?.
This heuristicplanning rule also insures that in the case of so-calledTough-Movement sentences, GENIE will generate sen-tences like Who is easy to please?, (via Tough-Move-ment) rather than either *Who is to #ease easy?
or?Who is it easy to please?.Engli sh CS (Transfer Output)English CS(dictionary information added)\[ Syntax Planner I~  ~w~t~cheEngl ish CS ( ru le  set)RG Execution Grammar- Precycle- Cycle- Pos t -cyc le- k inear i za t ionEngl ish SentenceFigure 5.
GENIE Components.
Note that the POSHcontains the agenda rules and the default planning andexecution rules organized by POS.4 After completing this work, we discovered that Bates and Ingria (1981) also used a mechanism similar to our "ruleswitches" to control generation within a TG framework.
Their transformational constraints, however, were set by a humanwho wished to test what a given set of constraints would produce.
That is, their system had no syntax planner which wouldevaluate a given base structure via a set of planning rules and set constraints insuring the generation of only grammaticalsentences.179Execution rules are turned on (or off) either bysyntax planning rules or by lexical entries.
To illustratethe use of lexical rule-switches, consider the followingexample from JETS involving verbs of prevention:4. kanojo wa kare ga iku no o habandashe top he pp go nm pp prevent5.
She prevented him from going.On the Japanese side, the postposition ga marks thesubject of the embedded clause kate ga iku, which hasbeen nominalized with the dummy noun no, whichcarries the direct object marker o.
Following the argu-ments given in Postal (1974), we assume that prevent isa so-called B-raising trigger (B-raising is the controver-sial rule which relates entences such as He believes thatshe knows (not raised) and He believes her to know, inwhich her is raised up as direct object of believe).
TheCS for (5) is as shown to the fight in Figure 6 and theCS of the Japanese sentence (4) is shown to the left: 5Japanese CS for (4) English CS for (5)habandakanojo iku(topic.
w i /karepreventTRANSFER / 2 ~she go(topic.
T) 1 /7heFigure 6.
Canonical Structures for (4) and (5)GENIE's rule of B-raising, given in Figure 7, maps theEnglish CS into a superficial RS, as shown in Figure 8.As shown in Figure 6, the English and the JapaneseCSs are isomorphic, i.e., there are no structural changesin transfer.To produce (5) from the English CS in Figure 6,as illustrated in Figure 8, merely requires the dictionaryentry depicted in Figure 9.% % Define the rule B-raising for transitive verbs(DEF-RULE B-Raising OF Transitive-Verb%% If the B-raising rule switch is "yes"(IF (B-raise is 'yes)% % then make my direct object my complementTHEN (ASSIGN 2 6)% % and make my complement's subject% % my direct object(ASSIGN 6:1 2)% % and on my complement call the rule% % that makes infinitives(ON 6 (CALL Make-lnf'mitive))))Figure 7.
GENIE's B-Raising Ruleprevent prevent- .
.
.
.
> Y ls e/o :L go 1(prep.
from)he (ccomp.
ing)= Other Rules = > She prevented him from goingFigure 8.
Example of B-Raising Application:lexical-form.
prevent:category.
transitive-verb:rep-lexical-form.
nil:rep-category.
nil:properties.
(B-Raise.
Yes) (cprep.
from)(cvform, ing):additional-rule-sets.
nilFigure 9.
Lexical entry for "prevent"This lexical entry states that prevent is a transitive verb,hence has access to the rules defined for transitive verbss Postal's English-internal arguments were based on the fact that the direct object of prevent could be existential there,weather it and idiom chunks (cf.
She prevented there from being a riot/it from raining/the cat from being let out of the bag).180in the POSH, e.g., Passive and B-raising (and the rulesof superordinate classes), and that among its propertiesare the rule switch setting (B-Raise .
Yes), which trig-gers Subject-to-Object raising, the feature (ccomp .from), which determines that the complement clause(fragment) will be flagged with from via a general rule,and the feature (cvform .
ing), which Make-Infinitivewill use when called by B-Raising to determine the verbform going in the example.
Prevent has norep(lacement)-lexical-form, which is used, e.g., to map asingle input form such as look-up into a verb look and aparticle up, or more generally to map senses into lexicalstrings.
"Rep-cat", also nil here, can be used to mapone category system into another (not used in GENIE).
"Additional-rule-sets", also nil, is the repository for thenames of any rule bundles associated with a lexicalentry (e.g., easy, hard, etc.
would have the additional-rule-set name tough-movement, which contains theTough Movement rule and the planning rule that turnsTough Movement on).As depicted in Figure 5 above, the executioncomponent consists of three relation-changing phases,called "pre-cycle", "cycle" and "post-cycle", in whichexecution rules are applied bottom-to-top, followed bya top-down linearization phase, which builds an outputstring that is then sent to the morphological component(not shown).
Each phase has its own set of agendarules, whose functions are to either call grammaticalrules or shift control, i.e., agenda rules are a sequence ofCALL statements.
Agenda rules, like grammatical rules,are defined for classes, so that, e.g., the cyclic agendasfor adjectives, nouns and verbs are different.
Forinstance, part of the agenda for the cyclic phase of tran-sitive verbs is: ... (Call B-raising) (Call Dative) (CallPassive) .... but none of these rules are relevant toadjectives, nouns or intransitive verbs.
It should benoted that rules called by a particular agenda might beaccessed via inheritance.
E.g., Reflexivization is calledin the cyclic agenda for transitive verbs, but it is associ-ated with the class Predicate so that it is available toadjectives in cases like He is proud of himself (it isassumed that Reflexivization is executed on the proudclause before A-Raising applies on be).The grammar implemented in GENIE to dateincludes many of the important rules for English clausestructure, including Yes/No questions, Wh-questions,relative clauses, subordinate clauses of various types,verb-particle combinations, raisings of various sorts,passives, and extrapositions.6 -  Concluding RemarksWe have developed an application-and-NL-independentgenerator shell, GENSHELL, including a flexible dic-tionary system and a high-level rule-writing system,GEAR, to facilitate the development of category-drivenRG generators.
GENSHELL /GEAR provides a pow-erful computational framework for the development ofRG-based natural-language-processing components.We have also implemented GENIE, a robust Englishgenerator, within GENSHELL/GEAR.
Besides thenovel use of RG and category-driven processing,GENIE is notable for its two-stage plan-and-executedesign.JETS and GENIE are currently being tested onsentences from Asahi newspaper editorials on economicmatters, a challenging task since editorial sentences canbe very long, with essentially unrestricted vocabulary.Nevertheless, we have found the initial tests of the gen-erator encouraging, supporting our view that besides itsintrinsic theoretical interest, RG has practical value innatural anguage processing.ReferencesAppelt, D. E. 1985.
Planning English Sentences.
ACLSeries: Studies in Natural Language Processing.Cambridge UP, Cambridge.Bateman, J., R. Kasper, J. Schtttz and E. Steiner.
1989.
"Interfacing an English Text Generator with aGerman MT Analysis," submitted to the EuropeanACL, Manchester, 1989.Bates, M. and R. Ingria.
1981.
"Controlled Transfor-mational Sentence Generation," Proceedings of the19th Annual Meeting of the Association for Compu-tational JnLqlistics, Stanford, CA.Bresnan, J.
(ed.)
1982.
The Mental Representation ofGrammatical Relations.
MIT Press, Cambridge,Mass.Danlos, L. 1984.
"Conceptual and Linguistic Decisionsin Generation," Proceedings of COLING-84, Stan-ford, pp.
501-504.Dubinksy, S. and C. Rosen (eds) 1987.
"A Bibli-ography on Relational Grammar Through 1987 withSelected Titles on Lexieal-Functional Grammar,"181distributed by Indiana University Linguistics Club,Bloomington, Indiana.Gazdar, G., E. Klein, G. Pullum and I.
Sag.
1985.
Gen-eralized Phrase Structure Grammar.
Harvard Univer-sity Press, Cambridge, Mass.Hovy, E. 1985.
"Integrating Text Planning and Pro-duction in Generation," Proceedings of IJCAI-85,Los Angeles, CA.Jacobs, P. S. 1985.
A Knowledge-Based Approach toLanguage Production.
PhD dissertation, UCBerkeley, Computer Science Division, UCB/CSD86/254, Berkeley, CA.Johnson, D.E.
1988a.
"On the Linguistic Design ofPost-Analysis in the JETS Japanese-EnglishMachine Translation System", Proceedings of theInternational Conference on Fifth Generation Com-puter Systems 1988, Tokyo.Johnson, D. E. 1988b.
"A Relational GrammarApproach to Machine Translation," Proceedings ofthe Information Processing Society of Japan, NaturalLanguage Processing, Vol.
88.61.Kay, M. 1979.
"Functional Grammar," Proceedings 5thAnnual Meeting of the Berkeley Linguistics Society,Berkeley, CA, pp.
142-158.KBMT-89.
1989.
KBMT-89 Project Report, Centerfor Machine Translation, Carnegie Mellon Univer-sity.Kukich, K. 1983.
Knowledge-Based Report Generation:A Knowledge Engineering Approach to Natural Lan-guage Report Generation.
Phi) dissertation, Infor-mation Science Department, University ofPittsburgh.Lakoff, G. 1970.
Irregularity in Syntax.
Holt, Rinehart,Winston, New York.Mann, W. 1983.
"An Overview of the Penman TextGeneration System," Proceedings of the NationalConference on Artificial Intelligence, pp.
261-265.Maruyama, H., H. Watanabe, and S. Ogino.
1989.
"AnInteractive Japanese Parser for Machine Trans-lation," Proceedings of COLING90, Helsinki, toappear.McDonald, D. 1984.
"Description Direct Control: ItsImplication for Natural Language Generation," inN.
J. Cercone (ed.)
Computational Linguistics, Per-gamon Press, Oxford, pp.
403-424.McKeown, K. 1985.
Text Generation.
Cambridge Uni-versity Press, Cambridge.Nirenburg, S. 1987.
"A Distributed Generation Systemfor Machine Translation," Technical Report, Centerfor Machine Translation, Carnegie Mellon Univer-sity.Nirenburg, S., R. McCardell, E. Nyberg, P. Werner, S.Huffman, E. Kenschaft, and I. Nirenburg.
1988.
"Diogenes-88," Technical Report, Center forMachine Translation, Carnegie Mellon University.Postal, P. M. 1974.
On Raising.
MIT Press, Cambridge.ROsner, D. 1986.
"When Mariko Talks to Siegfried -Experiences from a Japanese/German MachineTranslation Project," Proceedings of COLING-86,Bonn.Schindler, Peter A.
1988.
"General: An Object-Or-iented System Shell for Relational Grammar-BasedNatural Language Processing", master's thesis,Department ofElectrical Engineering and ComputerScience, MIT.Shieber, S. M., H. Uszkoreit, F.C.N.
Pereira, J.J.Robinson and M. Tyson.
1983.
"The Formalismand Implementation f PATR-II," In Research onInteractive Acquisition and Use of Knowledge, AICenter, SRI International, Menlo Park, CA.Wilensky, R. 1981.
"A Knowledge-Based Approach toNatural Language Processing: A Progress Report,"Proceedings Seventh International Joint Conferenceon Artificial Intelligence, Vancouver.Zernik, U. and M. G. Dyer.
1987.
"The Self-Ex-tending Phrasal Lexicon," Computational Linguistics,vol.
13, No.
3-4, pp.
308-325.182
