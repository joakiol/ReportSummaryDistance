Proceedings of the 22nd International Conference on Computational Linguistics (Coling 2008), pages 217?224Manchester, August 2008Efficient Parsing with the Product-Free Lambek CalculusTimothy A. D. FowlerDepartment of Computer ScienceUniversity of Toronto10 King?s College Road, Toronto, ON, M5S 3G4, Canadatfowler@cs.toronto.eduAbstractThis paper provides a parsing algorithmfor the Lambek calculus which is polyno-mial time for a more general fragment ofthe Lambek calculus than any previouslyknown algorithm.
The algorithm runs inworst-case time O(n5) when restricted toa certain fragment of the Lambek calcu-lus which is motivated by empirical anal-ysis.
In addition, a set of parameterizedinputs are given, showing why the algo-rithm has exponential worst-case runningtime for the Lambek calculus in general.1 IntroductionA wide variety of grammar formalisms have beenexplored in the past for parsing natural languagesentences.
The most prominent of these for-malisms has been context free grammars (CFGs)but a collection of formalisms known as categorialgrammar (CG) (Ajdukiewicz, 1935; Dowty et al,1981; Steedman, 2000) has received interest be-cause of some significant advantages over CFGs.First, CG is inherently lexicalized due to the factthat all of the variation between grammars is cap-tured by the lexicon.
This is a result of the richcategories which CG uses in its lexicon to specifythe functor-argument relationships between lexicalitems.
A distinct advantage of this lexicalizationis that the processing of sentences depends upononly those categories contained in the string andnot some global set of rules.
Second, CG hasthe advantage that it centrally adopts the princi-ple of compositionality, as outlined in Montaguec?
2008.
Licensed under the Creative CommonsAttribution-Noncommercial-Share Alike 3.0 Unported li-cense (http://creativecommons.org/licenses/by-nc-sa/3.0/).Some rights reserved.grammar (Montague, 1974), allowing the semanticderivation to exactly parallel the syntactic deriva-tion.
This leads to a semantical form which is eas-ily extractable from the syntactic parse.A large number of CG formalisms have beenintroduced including, among others, the Lambekcalculus (Lambek, 1958) and Combinatory Cat-egorial Grammar (CCG) (Steedman, 2000).
Ofthese, CCG has received the most zealous com-putational attention.
Impressive results have beenachieved culminating in the state-of-the-art parserof Clark and Curran (2004) which has been used asthe parser for the Pascal Rich Textual EntailmentChallenge entry of Bos and Markert (2005).
Theappeal of CCG can be attributed to the existence ofefficient parsing algorithms for it and the fact thatit recognizes a mildly context-sensitive languageclass (Joshi et al, 1989), a language class morepowerful than the context free languages (CFLs)that has been argued to be necessary for naturallanguage syntax.
The Lambek calculus providesan ideal contrast between CCG and CFGs by be-ing a CG formalism like CCG but by recognizingthe CFLs like CFGs (Pentus, 1997).The primary goal of this paper is to providean algorithm for parsing with the Lambek calcu-lus and to sketch its correctness.
Furthermore, atime bound of O(n5) will be shown for this algo-rithm when restricted to product-free categories ofbounded order (see section 2 for a definition).
Therestriction to bounded order is not a significant re-striction, due to the fact that categories in CCG-bank1 (Hockenmaier, 2003), a CCG corpus, have amaximum order of 5 and an average order of 0.78by token.
In addition to the presentation of the al-gorithm, we will provide a parameterized set of in-1Although CCGbank was built for CCG, we believe thattransforming it into a Lambek calculus bank is feasible.217puts (of unbounded order) on which the algorithmhas exponential running time.The variant of the Lambek calculus consideredhere is the product-free Lambek calculus chosenfor three reasons.
First, it is the foundation ofall other non-associative variants of the Lambekcalculus including the original Lambek calculus(Lambek, 1958) and the multi-modal Lambek cal-culus (Moortgat, 1996).
Second, the calculus withproduct is NP-complete (Pentus, 2006), while thesequent derivability in the product-free fragmentis still unknown.
Finally, the only connectives in-cluded are / and \, which are the same connectivesas in CCG, providing a corpus for future work suchas building a probabilistic Lambek calculus parser.2 Problem specificationParsing with the Lambek calculus is treated as alogical derivation problem.
First, the words of asentence are assigned categories which are builtfrom basic categories (e.g.
NP and S ) and theconnectives \ and /.
For example, the category fortransitive verbs is (NP\S )/NP and the categoryfor adverbs is (S/NP)\(S/NP)2.
Intuitively, the\ and / operators specify the arguments of a wordand the direction in which those arguments need tobe found.
Next, the sequent is built by combiningthe sequence of the categories for the words withthe ?
symbol and the sentence category (e.g.
S ).Strictly speaking, this paper only considers theparsing of categories without considering multi-ple lexical entries per word.
However, using tech-niques such as supertagging, the results presentedhere yield an efficient method for the broader prob-lem of parsing sentences.
Therefore, we can takethe size of the input n to be the number of basiccategories in the sequent.A parse tree for the sentence corresponds to aproof of its sequent and is restricted to rules fol-lowing the templates in figure 1.
In figure 1, lower-case Greek letters represent categories and upper-case Greek letters represent sequences of cate-gories.
A proof for the sentence ?Who loves him?
?is given in figure 2.The version of the Lambek calculus presentedabove is known as the product-free Lambek calcu-lus allowing empty premises and will be denotedby L. In addition, we will consider the fragmentLk, obtained by restricting L to categories of orderbounded by k. The order of a category, which can2We use Ajdukiewicz notation, not Steedman notation.?
?
??
?
?
???
?
????\??
?
???
?
??
?
?\??
?
?
???
?
???/???
?
???
?
??
?
?/?Figure 1: The sequent presentation of L.NP ?
NPS ?
SNP ?
NP S ?
SNP NP\S ?
SNP\S ?
NP\SS/(NP\S) NP\S ?
SS/(NP\S) (NP\S)/NP NP ?
SWho loves himFigure 2: A derivation for ?Who loves him?
?.be viewed as the depth of the nesting of argumentimplications, is defined as:o(?)
= 0 for ?
a basic categoryo(?/?)
= o(?\?)
= max(o(?
), o(?)
+ 1)For example, o((NP\S)/NP) = 1 and o((S/NP)\(S/NP )) = 2.3 Related workTwo other papers have provided algorithms similarto the one presented here.Carpenter and Morrill (2005) provided a graphrepresentation and a dynamic programming algo-rithm for parsing in the Lambek calculus withproduct.
However, due to there use of the Lam-bek calculus with product and to their choice ofcorrectness conditions, they did not obtain a poly-nomial time algorithm for any significant fragmentof the calculus.Aarts (1994) provided an algorithm for L2which is not correct for L. Ours is polynomial timefor Lk, for any constant k, and is correct for L, al-beit in exponential running time.A number of authors have provided polynomialtime algorithms for parsing with CCG which givessome insight into how good our bound of O(n5)is.
In particular, Vijay-Shanker and Weir (1994)provided a chart parsing algorithm for CCG with atime bound of O(n6).4 An algorithm for parsing with LThis section presents a chart parsing algorithmsimilar to CYK where entries in the chart are arcsannotated with graphs.
The graphs will be referred218to as abstract term graphs (ATGs) since they aregraph representations of abstractions over seman-tic terms.
ATGs will be presented in this sectionby construction.
See section 5 for their connectionto the proof structures of Roorda (1991).The algorithm consists of two steps.
First, thebase case is computed by building the base ATGB and determining the set of surface variables byusing the proof frames of Roorda (1991).
Second,the chart is filled in iteratively according to the al-gorithms specified in the appendix.
The details forthese two steps can be found in sections 4.1 and4.2, respectively.
Section 4.3 introduces a proce-dure for culling extraneous ATGs which is nec-essary for the polynomial time proof and section4.4 discusses recovery of proofs from the packedchart.
An example of the algorithm is given in fig-ure 3.For parsing with L, the input is a sequent and forparsing with Lk, the input is a sequent with cate-gories whose order is bounded by k. Upon com-pletion, the algorithm outputs ?YES?
if there is anarc from 0 to n?
1 and ?NO?
otherwise.4.1 Computing the base caseComputing the base case consists of building theproof frame and then translating it into a graph,the base ATG B.4.1.1 Building the proof frameProof frames are the part of the theory of proofnets which we need to build the base ATG.
Theproof frame for a sequent is a structure built on topof the categories of the sentence.
To build the proofframe, all categories in the sequent are assigneda polarity and labelled by a fresh variable.
Cate-gories to the left of ?
are assigned negative polarityand the category to the right of ?
is assigned pos-itive polarity.
Then, the four decomposition rulesshown in table 1 are used to build a tree-like struc-ture (see figure 3).
The decomposition rules areread from bottom to top and show how to decom-pose a category based on its main connective andpolarity.
In table 1, d is the label of the categorybeing decomposed, f , g and h are fresh variablesand order of premises is important.The bottom of the proof frame consists of theoriginal sequent?s categories with labels and po-larities.
These are called terminal formulae.
Thetop of the proof frame consists of basic categorieswith labels and polarities.
These are called the ax-iomatic formulae.
In addition, we will distinguish?+: f ??
: df?\??
: d?+: h ??
: g?\?+: d??
: df ?+: f?/??
: d??
: g ?+: h?/?+: dTable 1: The proof frame decomposition rules.the leftmost variable in the label of each axiomaticformula as its surface variable.
See figure 3 for anexample.4.1.2 Building the Base ATGThe base ATG B is built from the proof frame inthe following way.
The vertices of the base ATGare the surface variables plus a new special ver-tex ?
.
The edges of ATGs come in two forms:Labelled and unlabeled, specified as ?s, d, l?
and?s, d?, respectively, where s is the source, d is thedestination and l, where present, is the label.To define the edge set of B, we need the follow-ing:Definition.
For a variable u that labels a positivecategory in a proof frame, the axiomatic reflection,?
(u), is the unique surface variable v such that onthe upward path from u and v in the proof frame,there is no formula of negative polarity.
For exam-ple, in figure 3, ?
(b) = c.The edgeset E of the base ATG is as follows:1.
?m,?(pi)?
?
E for 1 ?
i ?
k wheremp1.
.
.
pkappears as the label of some nega-tive axiomatic formula2.
?
?, ?(t)?
?
E where t is the label of the posi-tive terminal formula3.
For each rule with a positive conclusion,negative premise labelled by g and positivepremise labelled by h, ??
(h), g, g?
?
EA labeled edge in an ATG specifies that itssource must eventually connect to its destinationto complete a path corresponding to its label.
Forexample, G1contains the edge ?c, e, d?
which in-dicates that to complete the path from c to d, wemust connect c to e. In contrast, an unlabeled edgein an ATG specifies that its source is already con-nected to its destination.
For example, in figure 3,G3contains the edge ?a, f?
which indicates thatthere is some path, over previously deleted nodes,which connects a to f .2190 1 2 3 4 5 6 7a c d g e f h iS?
: ab S+: c NP?
: dNP\S+: bS/(NP\S)?
: aNP+: g S?
: efgNP\S?
: efNP+: f(NP\S)/NP?
: eNP?
: h S+: iWho loves him ?
?G6=?iaG5=?iafhG3=?ga cddG4=?ia c efdhG1=?ia cddegG2=B =?ia cddefghB B B B B B BSentenceProofFrameSurfaceVariablesChartFigure 3: The algorithm?s final state on the sequent S/(NP\S) (NP\S)/NP NP ?
S.Note that all nodes in an ATG have unlabeledin-degree of either 0 or 1 and that the vertices ofan ATG are the surface variables found outside itsarc.4.2 Filling in the chartOnce the base ATG and the sequence of surfacevariables is determined, we can begin filling in thechart.
The term entry refers to the collection ofarcs beginning and ending at the same nodes of thechart.
An arc?s length is the difference betweenits beginning and end points, which is always odd.Note that each entry in the example in figure 3 con-tains only one arc.
We will iterate across the en-tries of the chart and at each entry, we will attempta Bracketing and a number of Adjoinings.
If an at-tempt results in a violation, no new ATG is insertedinto the chart.
Otherwise, a new ATG is computedand inserted at an appropriate entry.Bracketing is an operation on a single ATGwhere we attempt to extend its arc by connectingtwo nodes with the same basic category and op-posite polarity.
For example, G3is the result ofbracketing G1.
Adjoining, on the other hand, is anoperation on two adjacent ATGs where we attemptto unify their ATGs into one larger ATG.
For ex-ample, G5is the result of adjoining G3and G2.The chart filling process is described by algo-rithm 1 in the appendix.
The chart in figure 3 isfilled by the graphs G1, .
.
.
, G6, in that order.
Awalk through of the example is given in the re-mainder of this section.
Arcs of length 1 are treatedspecially, since they are derived directly from thebase ATG.
To show this, the base ATG is shown atpseudo-nodes, labeled by Bs.4.2.1 Inserting arcs of length 1This section corresponds to lines 1-2 of algo-rithm 1 in the appendix.
For each arc from i toi+1, we will attempt to bracket the base ATG fromaxiomatic formula i to axiomatic formula i+ 1.To follow our example, the first step is to con-sider inserting an arc from 0 to 1 by bracketing B.Bracketing causes a positive surface variable to beconnected to a negative surface variable and in thiscase, a cycle from a to c and back to a is formedresulting in the violation on line 12 of algorithm 2.Therefore, no arc is inserted.Then, the second step considers inserting an arcfrom 1 to 2.
However, axiomatic formula 1 has cat-egory S and axiomatic formula 2 has category NPwhich results in the violation on line 3 of algorithm2 since they are not the same.Next, we attempt to insert an arc from 2 to 3.In this case, no violations occur meaning that wecan insert the arc.
The intuition is that the ATGfor this arc is obtained by connecting g to d inthe base ATG.
Since c must eventually connectto d (c ?dd), and now g connects to d, the in-degree constraint on ATG nodes requires that thepath connecting c to d pass through g. Further-220- -?ia c efdh?ia c efh?iafhFigure 4: The intuition for bracketing from c to e.more, the only way to connect c to g is through e.So c ?de.
Then, we delete d and g.This procedure continues until we have consid-ered all possible arcs of length 1.4.2.2 Inserting arcs of length 3 and greaterNext, we iterate across graphs in the chart andfor each, consider whether its ATG can be brack-eted with the axiomatic formulae on either side ofit and whether it can be adjoined with any of theother graphs in the chart.
This process closely re-sembles CYK parsing as described on lines 3-10of algorithm 1.
The choice of shortest to longestis important because part of the invariant of ourdynamic program is that all derivable ATGs onshorter arcs have already been added.Following our example, the first graph to be con-sidered is G1.
First, we attempt to bracket it fromaxiomatic formulae 1 to 4.
As before, this intu-itively involves connecting c to e in the ATG forthis arc.
This is allowed because no cycles areformed and no labelled edges are prohibited fromeventually being connected.
Then, as before, wedelete the vertices c and e and as a result connecta to f , resulting in G3.
The bracketing process isillustrated in figure 4.Next, we consider all graphs to which G1couldadjoin and there are none, since such graphs wouldneed to annotate arcs which either end at 1 or beginat 4.
After processing G1, we process G2, whichhas a successful bracketing resulting in G4and nosuccessful adjoinings.Next, we process G3.
Bracketing it is prohib-ited, as it would result in a cycle from a to f andback to a.
However, it is possible to adjoin G3withG2, since they are adjacent.The adjoining of two graphs can be viewed as akind of intersection of the two ATGs, in the sensethat we are combining the information in bothgraphs to yield a single more concise graph.
At-tempting an adjoining involves traversing the twographs being adjoined and the base ATG in both aforward and a backward direction as specified inalgorithms 4 and 5 in the appendix.The intuition behind these traversals is to gen-erate a picture of what the combination of the two@R -?iafh?ia cddeg?ia c efghd?iaFigure 5: The intuition for adjoining two ATGs.graphs must look like as illustrated in figure 5.
Ingeneral, we can only reconstruct those parts of thegraph which are necessary for determining the re-sultant ATG and no more.
The dotted edges in-dicate uncertainty about the edges present at thisstage of the algorithm.
Adjoining G2and G3doesnot fail and the resultant graph is G5.Note that this example does not contain anyinstances of two identical ATGs being insertedmultiple times into the chart which occurs oftenin large examples yielding significant savings ofcomputation.4.3 Culling of extraneous ATGsIt often happens that an entry in the chart containstwo ATGs such that if one of them is extendableto a complete proof then the other necessarily is aswell.
In this case, the former can be discarded.
Wewill outline such a method here that is importantfor the polynomial time proof.Definition.
ATGs G1and G2are equivalent ifsome surjection of edge labels to edge labels ap-plied to the those of G1yields those of G2.Then, if two ATGs in a chart are equivalent, onecan be discarded.4.4 Recovering proofs from a packed chartThe algorithm as described above is a method foranswering the decision problem for sequent deriv-ability in the Lambek calculus.
However, we canannotate the ATGs with the ATGs they are derivedfrom so that a complete set of Roorda-style proofnets, and thus the proofs themselves, can be recov-ered.5 CorrectnessCorrectness of the algorithm is obtained by usingstructural induction to prove the equivalence of theconstructive definition of ATGs outlined in section4 and a definition based on semantic terms givenin this section:221S?
: abS+: c NP?
: dNP\S+: bS/(NP\S)?
: aNP+: g S?
: efgNP\S?
: ef NP+: f(NP\S)/NP?
: e NP?
: hS+: iFigure 6: A proof structure for ?Who loves him??.Definition.
A partial proof structure is a proofframe together with a matching of the axiomaticformulae.
A proof structure is a partial proof struc-ture whose matching is complete.An example is given in figure 6.
Proof struc-tures correspond to proofs under certain conditionsand our conditions will be based on the semanticterm of the proof given to us by the Curry-Howardisomorphism for the Lambek calculus (Roorda,1991).
To do this, we interpret left rules as func-tional application and right rules as functional ab-straction of lambda terms.
Under this interpreta-tion, the semantic term obtained from the proofstructure in figure 6 is a?d.ehd.As in Roorda (1991), proof structures corre-spond to a proof if the semantic term assigned tothe sentence category is a well formed lambda termwhich includes all the terms assigned to the wordsof the sentence.
Then, ATGs are graph represen-tations of abstractions of the undetermined portionof semantic terms of partial proof structures.
Unla-beled edges correspond to functional applicationswhose arguments must still be determined and la-belled edges correspond to functional abstractionswhose body does not yet contain an instance of theabstracted variable.
The violations which occurduring the execution of the algorithm correspondto the various ways in which a lambda term can beill formed.6 Asymptotic Running Time ComplexityIn this section we provide proof sketches for theruntime of the algorithm.
Let f(n) be a boundon the number of arcs occurring in an entry in thechart where n is the number of axiomatic formu-lae.
Then, observe that the number of edges withinan ATG is O(n2) and the number of edges adja-cent to a vertex is O(n), due to basic properties ofATGs.Then, it is not hard to prove that the worst caserunning time of Bracketing is O(n2), which isdominated by the for loops of lines 20-23 of al-gorithm 2.Next, with some effort, we can see that the worstcase running time of Adjoining is dominated by theexecution of the procedures Fore and Back.
But,since there are at most a linear number of labels land for each label l we need to visit each vertex inG1and G2at most a constant number of times, theworst case running time is O(n2).Then, for each ATG, we attempt at most onebracketing and adjoinings with at most 2n+1 otherentries for which there can be (2n+1)f(n) ATGs.Therefore, each entry can be processed in worstcase time O(n3f(n)2).Finally, there are O(n2) entries in the chart,which means that the entire algorithm takes timeO(n5f(n)2) in the worst case.
Sections 6.1 and6.2 discuss the function f(n).6.1 Runtime for LkBy structural induction on the proof frame decom-position rules and the base ATG building algo-rithm, it can be proven that in Lk the length of thelongest path in the base ATG is bounded by k.Next, consider a partition of the surface vari-ables into a pair of sets such that the axiomaticformulae corresponding to the surface variableswithin each set are contiguous.
For the example infigure 3, one such pair of sets is S1= {a, c, d, g}and S2= {e, f, h, i}.
Then, given such a partition,it can be proven that there is at least one maximalpath P in the base ATG such that all vertices inone set that are adjacent to a vertex in the otherset are either in P or adjacent to some vertex inP .
For example, a maximal path for S1and S2isP = e ?
g.An entry in the chart induces two such parti-tions, one at the left edge of the entry and one atthe right edge.
Therefore, we obtain two such max-imal paths and for any ATG G in this entry and anyvertex v not in or adjacent to one of these paths, ei-ther v is not in G or v has the same neighbourhoodin G as it has in the base ATG.
Then, the numberof vertices adjacent to vertices in these paths canbe as many as n. However, if we put these verticesinto sets such that vertices in a set have identical222neighbourhoods, the number of sets is dependantonly on k.In the worst case, the out-neighbourhood of oneof these sets can be any set of these sets.
So, weget a bound for f(n) to be O(k24k).
Therefore,because k is constant in Lk, f(n) is constant andthe running time of the algorithm for Lk is O(n5)in the worst case.6.2 Runtime for LDespite the results of section 6.1, this algorithmhas an exponential running time for L. We demon-strate this with the following set of parameterizedsequents:F (1) = ((A/A)\A)\AF (i) = ((A/(A/Fi?1))\A)\A for i > 1U(n) = FnFn?
A\ATheorem.
There are (2n?1)!n!(n?1)!?
?
(4n) distinctarcs in the entry from n to 3n ?
1 in the chart forU(n).Proof.
By induction and a mapping from the pos-sible matchings to the possible permutations of asequence of length 2n ?
1 such that two subse-quences of length n and n?
1 are in order.7 Conclusions and Future WorkWe have presented a novel algorithm for parsing inthe Lambek calculus, sketched its correctness andshown that it is polynomial time in the bounded-order case.
Furthermore, we presented a set of pa-rameterized sequents proving that the algorithm isexponential time in the general case, which aidsfuture research in finding either a polynomial timealgorithm or an NP-completeness proof for L.In addition, this algorithm provides another steptoward evaluating the Lambek calculus againstboth CFGs (to evaluate the importance of Cate-gorial Grammar) and CCG (to evaluate the impor-tance of the mildly context-sensitive languages).In the future, we plan on determining the run-ning time of this algorithm on an actual corpus,such as a modified version of CCGbank, andthen to empirically evaluate the Lambek calculusfor natural language processing.
In addition, wewould like to investigate extending this algorithmto more complex variants of the Lambek calculussuch as the multi-modal calculus using the proofnets of Moot and Puite (2002).AcknowledgmentsMany thanks to Gerald Penn, for his insightfulcomments and for guiding this research.ReferencesAarts, Erik.
1994.
Proving Theorems of the SecondOrder Lambek Calculus in Polynomial Time.
StudiaLogica, 53:373?387.Ajdukiewicz, Kazimierz.
1935.
Die syntaktische Kon-nexitat.
Studia Philosophica, 1(1-27).Bos, Johan and Katja Markert.
2005.
Recognising tex-tual entailment with logical inference.
Proceedingsof HLT and EMNLP, pages 628?635.Carpenter, Bob and Glyn Morrill.
2005.
Switch Graphsfor Parsing Type Logical Grammars.
Proceedings ofIWPT ?05, Vancouver.Clark, Steven and James R. Curran.
2004.
Parsing theWSJ using CCG and log-linear models.
Proceedingsof ACL ?04, pages 104?111.Dowty, David R., Robert E. Wall, and Stanley Peters.1981.
Introduction to Montague Semantics.
Reidel.Hockenmaier, Julia.
2003.
Data and Models for Sta-tistical Parsing with Combinatory Categorial Gram-mar.
Ph.D. thesis, University of Edinburgh.Joshi, Aravind K., K. Vijay-Shanker, and David J. Weir.1989.
The Convergence of Mildly Context-sensitiveGrammar Formalisms.
University of Pennsylvania.Lambek, Joachim.
1958.
The mathematics of sen-tence structure.
American Mathematical Monthly,65:154?170.Montague, Richard.
1974.
Formal philosophy: se-lected papers of Richard Montague.
Yale UniversityPress New Haven.Moortgat, Michael.
1996.
Multimodal linguistic infer-ence.
Journal of Logic, Language and Information,5(3):349?385.Moot, Richard and Quintijn Puite.
2002.
Proof Nets forthe Multimodal Lambek Calculus.
Studia Logica,71(3):415?442.Pentus, Mati.
1997.
Product-Free Lambek Calculusand Context-Free Grammars.
The Journal of Sym-bolic Logic, 62(2):648?660.Pentus, Mati.
2006.
Lambek calculus is NP-complete.Theoretical Computer Science, 357(1-3):186?201.Roorda, Dirk.
1991.
Resource Logics: Proof-theoretical Investigations.
Ph.D. thesis, Universiteitvan Amsterdam.Steedman, Mark.
2000.
The Syntactic Process.
Brad-ford Books.223Vijay-Shanker, K. and David J. Weir.
1994.
ParsingSome Constrained Grammar Formalisms.
Computa-tional Linguistics, 19(4):591?636.Appendix.
Algorithm PseudocodeThe term source set refers to the out-neighbourhood of ?
.
The term minus variablerefers to surface variables obtained from negativeaxiomatic formulae plus ?
.
Xirefers to the ithaxiomatic formula.Algorithm 1 Chart Iteration1: for i = 0 to n?
1 do2: Bracketing(B, Xi, Xi+1)3: for l = 1, 3, 5, .
.
.
to n?
1 do4: for e = 0 to n?
l ?
1 do5: for each arc from e to e + l with ATG G do6: Bracketing(G, Xe?1to Xe+l+1)7: Adjoin G to ATGs from e?
l ?
1 to e?
18: for al = 1, 3, ..., l ?
2 do9: Adjoin G to ATGs from e?
al ?
1 to e?
110: Adjoin G to ATGs from e+l+1 to e+l+al+1Algorithm 2 Bracketing(G, Xi, Xj)1: Cipi: li= Xiand Cjpj: lj= Xj2: if Ci6= Cjthen3: V iolation : Mismatched Basic Categories4: if pi= pjthen5: V iolation : Mismatched Polarities6: Let m,p ?
{i, j} such that pmis negative and ppispositive7: if G is not from 1 to n?
1 and the source set of G is thesingleton lpand lmhas out-degree 0 in G then8: V iolation : Empty Source Set9: if the edge ?lm, lp?
?
G then10: V iolation : Cycle Exists11: if lpis in the source set of G and there exists an in-edgeof m with label l such that no edge from p to m has labell and no edge from a vertex other than p to a vertex otherthan m has label l then12: V iolation : Path Completion Impossible13: if m has out-degree 0 and and there exists an out-edgeof p with label l such that no edge from p to m has labell and no edge from a vertex other than p to a vertex otherthan m has label l then14: V iolation : Path Completion Impossible15: Copy G to yield H16: for each edge ?lp, lm, l?
?
G do17: Delete all edges from H with label l18: Delete lm, lpand all their incident edges from H19: Let inpbe the in-neighbour of lpin G20: for each q in the out-neighbourhood of lmin G do21: Insert ?inp, q?
into H22: for each edge ?p, d, l?
in G do23: Insert ?q, d, l?
into H24: for each edge ?q,m, l?
in G do25: Insert ?q, inp, l?
into H26: if H contains a cycle then27: V iolation : Future Cycle Required28: return HAlgorithm 3 Adjoining(G1, G2)1: Let VHbe the intersection of the vertices in G1and G22: if VH6= ?
and Fore(?,G1, G2) ?
VH= ?
then3: V iolation : Empty Source Set4: for each l such that l labels an edge in G1and G2do5: Let ?p,m, l?
be the unique edge labelled l in B6: if Fore(p,G1, G2, l)?Back(m,G1, G2) = ?
then7: if Fore(p) ?
VH= ?
then8: V iolation : Path Completion Impossible9: if Back(m) ?
VH= ?
then10: V iolation : Path Completion Impossible11: Let H be the graph with vertex set VHand no edges12: for each minus variable m ?
VHdo13: for each p ?
Fore(m,G1, G2, ?)
do14: Insert ?m,p?
into H15: for each l such that l labels an edge in G1and G2do16: Let ?p,m, l?
be the unique edge labelled l in B17: if Fore(p,G1, G2, l)?Back(m,G1, G2) = ?
then18: for each q ?
Fore(p,G1, G2, l) ?
VHdo19: Insert ?q,Back(m,G1, G2) ?
VH, l?
into H20: return HAlgorithm 4 Fore(v, G1, G2, l)1: if v ?
G1and v ?
G2then2: return {v}3: else4: if v is a minus vertex then5: S = ?i?
{1,2}Out-neighbourhoodGiv6: else if v is a plus vertex then7: Let j be such that v ?
Gj8: S = ?e?Edges labelled bylSource of eF = S9: while S is not empty do10: Remove any element u from S11: Let m be the in-neighbour of u in B12: if u does not appear in one of G1, G2and m doesnot appear in the other then13: Let i be such that m ?
Gi14: Let O be the out-neighbourhood of m in Gi15: S = S ?
O16: F = F ?
O17: F = F ?
{m}18: return FAlgorithm 5 Back(m, G1, G2)1: if m ?
G1and m ?
G2then2: return {m}3: else4: Let i, j ?
{1, 2} be such that m ?
Giand m /?
Gj5: Let m?
be the destination of the edges labelled by min Gj6: M = {m,m?
}7: while m?
/?
G1and m?
/?
G2do8: Let i?, j?
?
{1, 2} be such that m?
?
Gi?
and m?
/?Gj?9: Let p ?
Gj?
be an out-neighbour of m?
in B10: Let m??
be the in-neighbour of p in Gj?11: m?
= m?
?12: M = M ?
{m??
}13: return M224
