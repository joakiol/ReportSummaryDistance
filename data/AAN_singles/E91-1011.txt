Processing Language with Logical Typesand Active ConstraintsPatrick SAINT-DIZIERIRIT Universit6 Paul Sabatier 118, route de Narbonne31062 Toulouse cedex FRANCEe-mail: suiizier@ixit.irit.frABSTRACTIn this document, we present a language whichassociates type construction principles to constraintlogic programming.
We show that it is veryappropriate for language processing, providing moreuniform, expressive and efficient tools andtreatments.
We introduce three kinds of constraints,that we exemplify by motivational examples.Finally, we give the procedural semantics of ourlanguage, combining type construction with SLD-resolution.IntroductionWith the development of highly parameterizedsyntactic theories like Government and Bindingtheory and Head-Driven phrase structure grammarsand with the development of theories where rewritingand unification plays a central role, like Categorialgrammars and Unification Grammars, there is anincreasing need for more appropriate and moreefficient feature systems.Feature systems must be designed to preserve theadequacy, the expressiveness and the explanatorypower of the linguistic system that one wants tomodel.
Real parsing as well as generation systemsoften require the manipulation of large sets offeatures, these systems must therefore offer a greatflexibility in the specification of features in grammarsymbols and a significant modularity so that eachlinguistic aspect (morphological, categorial .... ) canbe dealt with independently.
Features are often subjectto various constraints.
These constraints cannotalways be evaluated at the level they are formulated(e.g.
a feature value is not yet known) bu~t have to beevaluated later and must be true throughout the wholeparsing or generation process.The development of principled-based approaches tolanguage processing also require the definition ofmore abstract formal systems to handle in an adequateway these principles.
Principles indeed often applynot at grammar ule level but they involve a largepart of a parse tree.
They must be expressed by aconstraint system which is global to the wholegrammar and not local to a rule, as for example, inDCGs.These brief considerations have motivated ourapproach: syntactic rules are viewed as typeconstructions on which constraints arc applied.
Theseconstraints are themselves part of the type.
To givean appropriate xpressive power to constraints and anefficient interpretation, they are interpreted withinthe Constraint Logic Programming framework.In the next sections, we introduce our descriptionlanguage based on types and constraints.
We thengive motivational examples which clarify its use.Then we give its procedural interpretation and aconstraint resolution mechanism system.1.
A typed-based  descr ip t ionlanguageThree main types of operations are at the basis ofthe typed-based language we have designed forlanguage processing, namely:- the expression of type construction to describephrase structures,- the expression of relations (either local or long-distance) between types,- the expression of weU-formedness constraints ontypes.The term type refers here to structured datarepresentation.
They must not be confused with typesdefined in linguistics, as in the eategorial system.The starting point of our description language isCIL (Mukai 85), a language designed to modelSituation Semantics which permits the expression ofsome constraints on typed descriptions calledcomplex indeterminates; and Login (AR-Ka~i andNasr 86), a typed-based language with a built-ininheritance schema.
To these languages we have addedspecific feature treatments and constraints usuallynecessary for language processing that we now findin advanced unification grammar systems (Sheiber87, Emele & Zajae 90).
We have also provided aspecific declarative and procedural semantics mergingtype construction and resolution of constraints,viewed as active constraints of the constraint logicprogramming framework (noted hereafter as CLP)(Colmerauer 90), (Jaffar and Lassez 87).We now informally present the syntax of our type-based language.
It is directly derived from the syntax- 57  -of Login.
The syntactic representation f a structuredterm is called a w-term.
It consists of:(1) a root symbol, which is a type constructor anddenotes aclass of entities,(2) attribute labels, which are record field symbols.Each attribute denotes a function in extenso, from theroot to the attribute value.
The attribute value canitself be a reference to a type o~" to an instance of atype.
(3) coreference constraints among paths of labels,indicate that the corresponding attributes denote thesame function.
They are indicated by variables.Here is an example:person( id => name(first => string,last => X: string),born => date(day => integer,month => monthname, year => integer),father => person( id => name(last => X ))).The root symbol is person; id, born and father arethree sub-wterms which have either constants ortypes as values.
X indicates a coreference.
Alldifferent type structures are tagged by differentsymbols.
Notice also that in the latter field onlyrelevant information about person is mentioned.Infinite structures can also be specified by coreferencelinks.
Variables are in capital letters, constants insmall letters.
To this description, we have added thetreatment of negation on constants, and the treatmentof conjunctions and disjunctions, in a way quitesimilar to (Johnson 90).
Taxonomic relationsbetween identifiers are also taken into account in theunification mechanism.
These features will nothowever be developed, since this is not central towhat we want to explain here.This formal ism permits us to def ine typeinheritance and the possibility to define in a cleanway classes and subclasses corresponding tostructured linguistic objects (Saint-Dizier 91).2.
Dea l ing  w i th  const ra in tsThe general form of a type is ?Type :- Constraints.Constraints belong to the following classes:- constraints on attribute values not yet known,- constraints on values of two attributes,- constraints on the existence of an attributepossibly with a given associated value,- constraints on the co-existence of attributes (toexpress dependencies),- constraints expressing precedence r lations onstrings of words.The first two classes of constraints being developedby F. Giinthner (Gtinthner 88) within the frameworkof Prolog III, we will here concentrate on the threelast types of constraints, which are quite different innature from the two first ones.
We view constraintsas part of the type: (Type :- Constraints) is itself atype, subsumed by Type.The linear precedence onstraint:precede(X,Y),where X and Y are of type string.
It imposes that thestring X precedes of the string Y. Precedenceconstraints on constituents are stated in the grammarrules and at the lexical level.
At each stage i of aparse, a partial and coherent order Pl(i) on the wordsand structures already processed can be constructed.On the other hand, the input sentence to parse has astrict order P2 on words.
Then, at each stage of theparsing process, Pl(i) and P2 must be satisfiable.
Asshown in the ID/LP framework, having precedencerelations permits us to have a more general andflexible description of phrase structures.
The CLPinterpretation of precedence permits us to have amore efficient system because backtracking willoccur as soon as a precedence violation is detected.The next constraint imposes the presence of acertain attribute in a type:has(Attribute, Type)where Attribute is either an attribute label or a pairattr ibute-value (a sub-w-term) and Type  is areference to a type.
This constraint imposes that atsome stage there is an attribute in Type which issubsumed by or equal to Attribute.
Informally, (1)when incoherence with Attr ibute is detected or (2)when Type is fully constructed, the non-satisfactionof has(attribute,type) will provoque backtracking.This constraint also permits us to encode theinclusion of a set of values into another.TIae last class of constraint is mainly related to theexpression of long-distance relations betweensentence constituents.
Within the framework oftypes, the notion of long-distance is somewhatobsolete since there is no ordering relation onsubtypes in a type (attributes may be written in anyorder).
Thus, the notion of long-distance dependencywill be here formulated as a sub-type co-occurenceconstraint.
This constraint emerged from Dislog(Saint-Dizier 87, 89), that we now briefly present.A D is log  c lause  is a finite, unordered set ofHorn clauses fi of the form:h.f2 ......... f,, ;.The informal meaning of a Dislog clause is: i f  aclause j~ in a Dislog clause is used to construct agiven proof tree, then all the other ~ of that Dislogclause must be used to construct hat proof tree,with the same substitutions applied to identicalvariables.
Moreover, there are no hypothesis made onthe location of these clauses in the proof tree.
Forexample, the following Dislog clause composed oftwoProlog facts:{ arc(a,b), arc(el) }.means that, in a graph, the use of  arc(a,b) toconstruct a proof is conditional to the use of arc(el).- 58  -If one is looking for paths in a graph, this meansthat all path going through the arc(ah) will have togo through the arc(el), or conversely.A Dislog clause thus permits us to express co-occurence of clauses in a proof tree.
The constraintstating that all identical variables in an instance of aDislog clause must be substituted for the same termspermits the transfer of argument values between on-contiguous elements in a very convenient way.
ADislog clause can be subject o various types ofrestrictions such as: linear precedence constraints onthe f / ,  modalities on applications of somef i and thespecification of bounding domains in which anDislog clause instance must be fully used (Saint-Dizier 89).The co-occurence of two subtypes in a larger typeis expressed by the constraint:pending(A,B)where A is a type specification and B is a list of typespecifications.
Informally, this constraint means thatA originates the pending of the types in B, in otherterms that A can be used as a type constructor if,somewhere else in the main type (corresponding tosentence), all the types in B are also used as typeconstructors with identical substitutions applied toidentical variables.
Notice that this constraint is notequivalent to a conjunction of has(X,T) constraintsbecause the has(X,T) constraint imposes that T isfully defined whereas pending(A,B) does not impose,a priori, any constraints on the location in the maintype of the types in B.
The constraint resolutionmechanism of this constraint is given in section 6.3.
Pars ing  wi th  types  and  const ra in tsWe first present simple, motivational examples.
Amore abstract syntactic description of the X-barsystem follows and shows more clearly theexpressive power of the formalism.
The followingexamples how that our description language canaccomodate principled-based descriptions of languagelike Government and Binding theory as well aslexically and head driven descriptions like in theHPSG framework (which also follow principles, butnot in the same sense).3.1 A s imp le  grammat ica l  sys tem:In the following examples, we only have twomain type constructors:- x0 corresponding tolexical entries,- xp corresponding tophrase structures.Here is the description of the lexical entrycorresponding to the verb to give:xO( cat => v, string => \[give\] ):-pending(xO(cat => v), \[xp( cat => n,role => patient, case => acc ),xp( cat => p, role => recipient,case => dative ) \] ).This entry indicates that give is a verb whichsubcategorizes for an np with role patient and caseaccusative and a pp with role recipient and caseoblique, which are left pending since they do notnecessarily immediately follow the verb in asentence.
These constraints will be dealt with by thetype describing the structure of a vp.
The wholedescription xO construction and the constraints i thetype of the verb to give.Let us now consider the construction of a vp withan np and a pp complements:xp( cat => v, st r ing => S,const l  ;> xO(cat => v, s t r ing => S1 ),const2 --> X : xp(cat => n, str ing => $2),const3 => Y : xp( cat => p, st r ing => $3)) :-has(role, X), has(case, X),has(role, Y), has(case, Y),precede(S 1 ,$2), precede(S2,S3).The const i attributes in the type constructor xppermits the satisfaction of the pending constraintsspecified in the lexical entries.
We view phrasestructure type constructors both as a descriptive and acomputational mean to construct structures.
Theconstraints has(role,X) and has(role, Y) impose thatthe constituents const2 and const3 have a roleassigned at some level in the type constructionprocess.
The same situation holds for case.
This is asimple expression, for example, of the Case Filterand the 0-criterion in GB theory.
Notice that mostpending situations are satisfied locally, which limitscomplexity.
Finally, notice that he denotation of thistype is the set of sentences S which can beconstructed and which meet he constraints.3.2 Express ing  X -bar  syntaxOur description language permits the expression ofmost current versions of X-bar theory that we nowillustrate.
X-bar syntax is a typical example of typeconstruction.
Let us consider the rule:X 1 --> X 0, complement.The element X 0 is a direct reference to the typeconstructor x0, as described in the preceding section.We now show how X 1 is defined by the typeconstructor xl; the nature of the complement isinduced from lexical descriptions given in x0:xl( cat => C, bar => I, string=> S,head =>xO( cat => C, bar => O, string => S l,complement => Z : xp( cat => Compl,bar=> B l , ro le  => R, sa t i s f ied ;> 1) ),complement => xp( syntax => Z,case ;> Case, s t r ing ;> $2 ) ) :-atom(R), atom(Ca),precede(S 1 ,$2),C =/= infl,  C=/= comp,assign(C, Case).Notice how a co-reference link is established bymeans of the variable Z between thesubcategorization frame given in the head and the- 59 -syntactic characteristics of the complement.
Thesubcategorization data is not left pending since it iscontiguous to the head and can be moved only byanother mean, namely, within GB theory, by move-a.
The subcategorization of a complement is satified(i.e.
satisfied => 1), the complement is assigned theappropriate 0-role.
Case is also assigned wheneverappropriate, by the call to assign_case.Similar rules can be defined for X 2 and adjuncts,with the difference that adjuncts are usually notobligatory.
Rules involving non lexical categorieslike INFL and COMP are described in the samemanner.
However ,  at the level of INFL, theassignment of the external 0-role and case to thesubject position is carried out using a long-distanceconstraint, expressed in Dislog.3.3  On GovernmentThe notion of  Government  in GB theoryintroduces an interesting use of the constraint has tocontrol the well-formedness of a construction.
Wenow present a model for Government, so that 0-rolesand cases can be properly assigned.
In what follows,we refer to Government and to the notion of Barriersas defined in (Chomsky 86).Government can be modeled as a well-formednessconstraint on X 2 categories.
Indeed, each X 2 whichcan be a barrier (i.e.
all categories except INFL)prevents a category above it from governing acategory dominated by that X 2.
Thus, for all rules ofthe general form:Z --> W, X2, T.where Z, W and T are any kind of non-terminalsymbol, a control has to be made on the well-formedness of X 2 if X 2 is a barrier.
This controlconsists in three constraints:- every N2 is assigned a case (Case Filter in GB),- every N2 is assigned a thematic role (0-criterion),- all obl igatory subcategorization has to besatisfied (Projection Principle).The two first constraints have been already given in3.1, the latter is carried out by checking that thefollowing sub-y-term is not present in th~ typeconstructor x2 corresponding tothe category X~':xp( obl igatory => 1, sa t i s f ied  => 0 )which can be expressed by the negated constraint:not(has(xp( ob l igatory  => 1,sa t i s f ied  => 0 ),Type).The attr ibute obligatory comes from lexicaldescription where it is specif ied whether ancomplement is obligatory or not.
The attributesatisfied is properly instanciated to 1 when a.~complement is constructed (see 3.2).3.4  On Long-D is tance  Dependenc iesLet us f inally consider an example of theexpression of long-distance dependencies for whichwe use the pending constraint: wh-movement.Refering to X-bar syntax, the general annotatedsurface form is:\[COMP PROi ........ \[N2 tracei \] ..... \] as in:\[COMP THATi John met \[N2 tracei \]yesterday\]Within the framework of our type-based approach,a pending constraint specifies the co-occurence of twotype constructions, which must be both used duringthe type construction process associated to thesentence being parsed.
In our example, the firstsubtype constructor will describe the adjunction of anN2 to a COMP node (here COMP0) while the secondsubtype constructor will express that that N2 isconstructed from a trace.
A shared variable, I,represents he co-indexation link:{ xp( cat => X: compO, s t r ing  => S,?onst l  => xp(cat => n, form => pro,index => I, s t r ing  => S1 ),const2=> xp(cat  => X ,s t r ing=> $2)  ,xp(cat  => n, form => trace,  s t r ing=> $3,lndex => I ) } :- precede(5,S3).Since the adjunction to COMP is always to the leftof the trace, this Dislog clause can be translated intoa single type specification by means of the pendingconstraint:xp(: cat => X: compO, s t r ing  => S,const l  => xp(cat => n, form => pro,index => I, s t r ing  => S1 ),const2 => xp( cat => X , s t r ing  => $2 )) :-pend ing(xp(cat  => compO), xp( cat  => n,form -=> trace, s t r ing  => $3, index => I ) ),precede(S,S3).To summarize, in lexical entries we express thesubcategorization requirements and the precedencerelations; in types expressing syntactic onstructions,we have controls on the contents of types andpending constraints due to long-distance dependenciesbetween sentence constituents.4.
An  abst rac t  mach ine  fo r  typeconst ruct ionParsing a sentence is constructing a well-formedtype describing the sentence structure.
We present inthis section an abstract machine which describes howtypes are constructed.
This machine is based on theprocedural semantics of Prolog but it resembles apush-down tree automaton whose stack is updatedeach time a subtype is modified.There are two kinds of type constructors: thosecorresponding to non-terminal structures (such as xpand xl in our examples) and those corresponding toterminal structures (e.g.
x0).
We now present a stepin the construction of a type.
It can be decomposedinto 3 levels:(1) current state cr i :Co( a 1 => t 1, a 2 => t 2 .
.
.
.
.
a n => tn),- 60 -(2) selection in the current programme P of a typeconstruction specification:Cl( b 1 => t' 1 .
.
.
.
.
b m => t' m )such that tl subsumes it (or unifies with it) modulothe mgu 0 i.
(3) New state Oi+l : tl is replaced by :Cl( bl => t' 1 .
.
.
.
.
b m => t' m ),with, as a result, the following type:Co( a 1 => Cl( bl => t' 1 .
.
.
.
.
b m => t' m ) ,a 2=>t  2, a -> )0.
.... n  tn |The process goes on and processes t 1" The typeconstruction strategy is here similar to Prolog'sstrategy and computation rule : depth-f'trst and fromleft to right.
The main difference at this level withSLD-resolution is that only types corresponding tonon-terminal structures are expanded.
Informally,when a typet i corresponds toa terminal structure,attempt is maae to find a terminal type description t :.
.
.
.
J in the programme whmh ~s subsumed by or umfieswith tj and, if so, a replacement occurs, t'j is said tobe in a final state.
If t'j does not exist, backtrackingOCCURS.The next type description immediately to theright of t'j is then treated in the same manner.
Thetype construction process uccessfully ends when allsubtypes corresponding to terminal symbols are in afinal state and it fails if a terminal type description tpcannot reach a final state.5.
Extens ion  o f  the abst rac t  mach ineto  hand le  const ra in tsThe above abstract machine can be extended in asimple way to deal with constraints.
Constraintresolution mechanisms are similar to usual constraintlogic programming systems like Prolog III.
Thethree above levels become:(1) current state c i represented bythe couple:< c0(a l=>t  1, a 2=>t  2 .
.
.
.
.
a n=>tn) ,  S >where S is the set of current constraints,(2) selection in the current programme P of a typeconstruction specification:Cl(b 1 =>t'  1 .
.
.
.
.
b m=>t '  m) : -R ,  whereR isthe set of  constraints associated to c 1, and t lsubsumes (or unifies with) t' 1"(3)  New state ~i+l  characterized by thefollowing couple:< c0(a l=>c l (b l=>t '  1 .
.
.
.
.
b m=>t '  m) ,a 2 => t 2 .
.
.
.
.
a n => t n) ,S u R u subsume(t 1,Cl( b 1 => t' 1 .
.
.
.
.b m => t' m ) ) >with the condition that the new set of constraintsmust be satisfiable with respect o the constraintresolution axioms defined for each type of constraintand, if not, a backtracking occurs.
At this levelconstraints simplifications may also occur.
Mgu 0 i isreplaced here by the subsumption constraint.6.
A Const ra in t  Log ic  P rogrammingin terpretat ion  o f  the  'pend ing 'const ra in tThe pending constraint is interpreted within theConstraint Logic programming framework(Colmerauer 90, Jaffar and Lassez 87) in a verysimple way.
The constraint solving approach of theCLP corresponds better to programming practice andto programming language design.
Constraintsdirectly state properties on objects of the domainbeing dealt with which have to be always true, incontrast to coding them by means of terms.
The CLPframework offers a global rule-based framework tohandle and to reason about constraints.The domain of objects on which constraints of aCLP interpretation f Dislog operate is a domain oftypes.
Let us first consider a simple translationexample of a Dislog clause into a CLP clause.
ADislog clause like:{a ,b}where a and b are type construction (TC)specifications, i  translated as follows in CLP:a :- pending(a, \[b\]).b :- pending(b, \[a\]).The constraint pending(A,B) states here that theTC A is at the origin of the pending TC B. Thegeneral case is interpreted as follows.
Let us considerthe Dislog clause:{A.B ..... N}.it is translated into a set of CLP clauses as follows:A :- pending(A, \[B ..... N\] ).B :- pending(B, \[A ..... N\] ).N :- pending(N, \[A, B .... \] ).The constraint resolution procedure associated topending consists in a simplification rule for theelimination of pending TCs when the co-occurencecontraint is satisfied.
This simplification rule iswritten as follows for the simple example givenabove in section 2:pendlng(A,B)A pending(B,A) --> O .Notice that we have a symmetric treatment for A andB.
The general simplification rule is the following,where LA, LB and LC are lists of pending TCs:(pend ing(A ,  LA),  pend ing(B ,  LB) - ->pending(A, LC) ) :-mb(A, LB), mb(13, LA),Withdraw(B, LA, LC).LC is the resulting pending list equal to LAminus B.This constraint resolution mechanism can befurther extended quite straightforwardly to handlelinear precedence r strictions and modalities.
Linearprecedence constraints.are d alt with independentlyfrom each other.
The Dislog clause:-61  -{A,B  ..... X .. .
.
.
Y .. .
.
.
N} .... X<Y ....is translated into a CLP clause as follows:Z <> pend ing(X ,  \ [A ,  B .
.
.
.
, .... Y .
.
.
.
, N\ ] )  ^  no t(pend ing(Y , \ [A ,  B .
.
.
.
.
X .
.
.
.
.
.
.
.
, N\] ) ) .The coherence control is the following:pend ing(X ,  LA)^not (pend lng(X ,  LA) )  - ->  fa i lu re .the simplification rule is:not  (pend ing(Y ,  \ [A ,  B .
.
.
.
.
X .
.
.
.
, ..., N\] ))  - ->  Oor, more simply, since all negations are withdrawn ateach stage: not (pending(_,_) --> O.7.
Spec i f i c  features  o f  our  approachOur approach can be contrasted mainly with theusual systems based on unification grammar (UG)formalisms.
The first major difference is that theunification and rewriting mechanisms usuallyassociated with UG are replaced by a moreconstraining operation, type construction, whichalways proceeds by sucessive restrictions (ormonotone increasing specialisation) each time a typeis further expanded.
From that point of view, ourapproach also substancially differs from (Emele &Zajac 90) who propose a powerful and semanticallyclear mechanism for typed unification associated totype inheritance.Next, we have a single operation: typeconstruction; we do not have on the one handgrammar ules and on the other hand, associated toeach rule, a set of equations to deal with featurevalues and constraints.
The constraints we haveassociated with our types are not of the same natureand cannot be compared to the equations of UGs.They are moreover a part of the type.Constraints added to types are interpreted withinthe CLP framework, this permits us to have a moreexpressive and powerful constraint system, which isalso more efficient and simpler to write.
Constraintsatisfaction is not indeed guaranteed atthe level theyare given, but throughout the whole typeconstruction process.Our approach is compatible with the currentprincipled-based approaches to describing languages.This is exemplified in section 4 by the constraints onrole and case assignments.
In a more general way, thedescription language we have presented here isparticularly appropriate for highly abstractdescriptions of language, which corresponds toseveral current rends in computational linguistics.Our description language is, in the same time, well-adapted to deal with lexical-based approaches tolanguage processing (those approaches like lexicongrammars where the lexicon plays a central role) andto describe representations developed within lexicalsemantics.Finally, a constraint like pending eneralises thenotion of long-distance dependency toseveral otherkinds of dependencies.
This generalization is inparticular a consequence of the fact that typestructures do not have any ordering on subtypes andthey cannot, thus, directly express the differencebetween remote and close constituents.The abstract machine we have described gives aclear procedural semantics to the system.
A similarmachine can be defined for natural languagegeneration.
Our description language has now beingfully implemented in Prolog on a SUN workstationfollowing the abstract machine description givenabove.
The first version is an interpreter; a compileris under development.
Experiments with GB theorydescriptions (Saint-Dizier 90) have been successfullycarried out.
It is however important to notice that ourformalism is not specifically designed for GB theoryand that it can express with the same accuracy otherapproaches such as HPSGs and lexicon grammars.AcknowledgementsThis work owes much to discussions with NabilHathout.This work was supported by the FrenchGRECO-PRC Communication Homme-Machine.ReferencesAit-Ka?i, H., Nasr, R., LOGIN: A LogicProgramming Language with Builbin Inheritance,journal of Logic Programming, vol.
3, pp 185-215, 1986.Chomsky, N., Barriers, Linguistic Inquirymonograph nb.
13, MIT Press 1986.Colmerauer, A., An Introduction to Prolog III,CACM 33-7, 1990.Emele, M., Zajac, R., Typed Unification Grammars,in proc.
COLING'90, Helsinki, 1990.G(inthner, F., Features and Values, Research ReportUniv of Ttibingen, SNS 88-40, 1988.Jaffar, J., Lassez, J.L., Constraint LogicProgramming, Proc.
14th ACM Symposium onPrineiples of Programming Languages, 1987.Johnson, M., Expressing Disjunctive and NegativeFeature Constraints with Classical First-OrderLogic, proc.
ACL'90, Pittsburgh, 1990.Mukai, K., CIL: Complex Indeterminate Language,Fifth Generation Computing journal, 1985.Saint-Dizier, P., Contextual DiscontinuousGrammars, 2nd NLULP, Vancouver 1987 and in:Natural Language Understanding and LogicProgramming II, V. DaM and P. Saint-Dizier Edts,North Holland, 1988.Saint-Dizier, P., Constrained Logic Programming forNatural Language Processing, proc.
ACL-89,Manchester, 1989.Saint-Dizier, P., Modelling Move-or and Government.by a typed-based approach, GB-Parsing workshop,Geneva 1990.Saint-Dizier, P., Condamines, A., An IntelligentEnvironment for the Acquisition of Lexical Data,proc.
ACI-I/ALLC conference, Tempe AZ, 1991.Sheiber, S., An Introduction to Unification-BasedApproaches to Grammar, CSLI lecture notes no 4,Chicago University Press, 1986.- 62 -
