Synchronous Models of LanguageOwen RambowCoGenTex,  Inc.840 Hanshaw Road,  Suite 11I thaca,  NY 14850-1589owen@cogentex, comGiorgio SattaDipart imento  di E let t ron ica ed In format icaUniversit~ di Padovavia Gradenigo,  6 /A1-35131 Padova,  I ta lysatta@dei, unipd, itAbstractIn synchronous rewriting, the productionsof two rewriting systems are paired andapplied synchronously in the derivation ofa pair of strings.
We present a new syn-chronous rewriting system and argue thatit can handle certain phenomena that arenot covered by existing synchronous ys-tems.
We also prove some interesting for-mal/computational properties of our sys-tem.1 IntroductionMuch of theoretical linguistics can be formulated ina very natural manner as stating correspondences(translations) between layers of representation; forexample, related interface layers LF and PF in GBand Minimalism (Chomsky, 1993), semantic andsyntactic information in HPSG (Pollard and Sag,1994), or the different structures such as c-structureand f-structure in LFG (Bresnan and Kaplan, 1982).Similarly, many problems in natural language pro-cessing, in particular parsing and generation, can beexpressed as transductions, which are calculationsof such correspondences.
There is therefore a greatneed for formal models of corresponding levels ofrepresentation, and for corresponding algorithms fortransduction.Several different ransduction systems have beenused in the past by the computational nd theoret-ical linguistics communities.
These systems havebeen borrowed from translation theory, a subfieldof formal language theory, or have been originally(and sometimes redundantly) developed.
Finitestate transducers (for an overview, see, e.g., (Ahoand Ullman, 1972)) provide translations betweenregular languages.
These devices have been pop-ular in computational morphology and computa-tional phonology since the early eighties (Kosken-niemi, 1983; Kaplan and Kay, 1994), and more re-cently in parsing as well (see, e.g., (Gross, 1989;Pereira, 1991; Roche, 1993)).
Pushdown transduc-ers and syntax directed translation schemata (SDTS)(Aho and Ullman, 1969) translate between context-free languages and are therefore more powerful thanfinite state transducers.
Pushdown transducers area standard model for parsing, and have also beenused (usually implicitly) in speech understanding.Recently, variants of SDTS have been proposed asmodels for simultaneously bracketing parallel cor-pora (Wu, 1995).
Synchronization of tree adjoin-ing grammars (TAGs) (Shieber and Schabes, 1990;Shieber, 1994) are even more powerful than the pre-vious formalisms, and have been applied in machinetranslation (Abeill6, Schabes, and Joshi, 1990; Egediand Palmer, 1994; Harbusch and Poller, 1994; Pri-gent, 1994), natural language generation (Shieberand Schabes, 1991), and theoretical syntax (Abeilld,1994).
The common underlying idea in all of theseformalisms is to combine two generative devicesthrough a pairing of their productions (or, in thecase of the corresponding automata, of their tran-sitions) in such a way that right-hand side nonter-minal symbols in the paired productions are linked.The processes of derivation proceed synchronouslyin the two devices by applying the paired grammarrules only to linked nonterminals introduced previ-ously in the derivation.
The fact that the above sys-tems all reflect the same translation technique hasnot always been recognized in the computational lin-guistics literature.
Following (Shieber and Schabes,1990) we will refer to the general approach as syn-chronous rewriting.
While synchronous systems arebecoming more and more popular, surprisingly littleis known about the formal characteristics of thesesystems (with the exception of the finite-state de-vices).In this paper, we argue that existing synchronoussystems cannot handle, in a computationally attrac-116tive way, a standard problem in syntax/semanticstranslation, namely quantifier scoping.
We proposea new system that provides a synchronization be-tween two unordered vector grammars with domi-nance links (UVG-DL) (Rainbow, 1994).
The typeof synchronization is closely based on a previouslyproposed model, which we will call "local" synchro-nization.
We argue that this synchronous system candeal with quantifier scoping in the desired way.
Theproposed system has the weak language preservationproperty, that is, the defined synchronization mech-anism does not alter the weak generative capacityof the formalism being synchronized.
Furthermore,the tree-to-forest translation problem for our systemcan be solved in polynomial time; that is, given aderivation tree obtained according to one of the syn-chronized grammars, we can construct he forest ofall the translated erivation trees in the other gram-mar, using a polynomial amount of time.The structure of this paper is as follows.
In Sec-tion 2, we introduce quantifier aising and reviewtwo types of synchronization a d mention some newformal results.
We introduce our new synchronoussystem in Section 3, and present our formal resultsand outline the proof techniques in Section 4.2 Types  o f  Synchron izat ion2.1 Quantifier RaisingWe start by presenting an example which is basedon transfer between a syntactic representation a da "semantic" representation f the scoping of quan-tified NPs.
It is generally assumed that in English(and many other languages), quantified argumentsof a verb can (in appropriate contexts) take scopein any possible order, and that this generalizationextends to cases of embedded clauses (May, 1985).
1For example, sentence (1) can have four possible in-terpretations (of the six possible orderings of thequantifiers, two pairs are logically equivalent), twoof which are shown in (2).
(1) Every man thinks some official said some Nor-wegian arrived(2) a. Vx, x a man, 3y, y an official, 3z, z a Nor-wegian, x thinks y said z arrivedb.
3z, z a Norwegian, 3y, y an official, Vx, x aman, x thinks y said z arrived~We explicitly exclude from our analysis cases ofquantified NPs embedded in NPs, and do not, of course,propose to develop a serious linguistic theory of quanti-fier scoping.We give a simplified syntactic representation for(1) in Figure 1, and a simplified semantic represen-tation for (2b) in Figure 2.Severy man VPthinks Ssome official VPsaid Ssome Norwegian arrivedFigure 1: Syntactic representation for (1)Fexists z, Fz a Norwegianexists y, Fy an officialfor all x, Fx a manthink T FXsay T F'Y arrive TIgFigure 2: Semantic representation for (2b)2.2 Non-Local SynchronizationWe will first discuss a type of synchronization pro-posed by (Shieber and Schabes, 1990), based onTAG.
We will refer to this system as non-local syn-chronous TAG (nISynchTAG).
The synchronizationis non-local in the sense that once links are intro-duced during a derivation by a synchronized pair ofgrammar rules, they need not continue to impinge onthe nodes that introduced them: the links may be re-assigned to a newly introduced nonterminal when anoriginal node is rewritten.
We will refer to this mecl/-anism as link inheritance.
To illustrate, we will giveas an example an analysis of the quantifier-raisingexample introduced above, extending in a naturalmanner an example given by Shieber and Schabes.The elementary structures are shown in Figure 3(we only give one NP - -  the others are similar).
Thenominal arguments in the syntax are associated with117NP F Ft { tevery man for all x, F xl am~Figure 3: Elementary structures in nlSynchTAGpairs of trees in the semantics, and are linked to twonodes, the quantifier and the variable.
The deriva-tion proceeds as illustrated in Figure 4, finally yield-ing the two structures inFigure 1 and Figure 2.
Notethat some of the links originating with the NP nodesare inherited uring the derivation.
By changing theorder in which we add the nominal arguments at theend of the derivation, we can obtain all quantifierscopes in the semantics.The problem with non-local synchronization isthat the weak language preservation property doesnot hold.
(Shieber, 1994) shows that not allnlSynchTAG left-projection languages can be gen-erated by TAGs.
As a new result, in (Rambow andSatta, 1996) we show that the recognition of somefixed left-projection languages of a nlSynchTAG isNP-complete.
Our reduction crucially relies on linkinheritance.
This makes nlSynchTAG unattractivefor applications in theoretical or computational lin-guistics.2.3 Local Synchronous SystemsIn contrast with non-local synchronization, i  localsynchronization there is no inheritance of synchro-nization links.
This is enforced by requiring thatthe links establish a bijection between onterminalsin the two synchronously derived sentential forms,that is, each nonterminal must be involved in exactlyone link.
In this way, once a nonterminal is rewrit-ten through the application of a pair of rules to twoNP ~ arrive T(Figure 4: Non-local derivation in nlSynchTAGlinked nonterminals, no additional link remains tobe transferred tothe newly introduced nonterminals.As a consequence of this, the derivation structures inthe left and right grammars are always isomorphic(up to ordering and labeling of nodes).The canonical example of local synchronizationis SDTS (Aho and Ullman, 1969), in which twocontext-free grammars are synchronized.
We givean example of an SDTS and a derivation in Fig-ure 5.
The links are indicated as boxed numbersto the right of the nonterminal to which they ap-ply.
(Shieber, 1994) defines the tree-rewriting ver-sion of SDTS, which we will call synchronous TAG(SynchTAG), and argues that SynchTAG does nothave the formal problems of nlSynchTAG (though118Grammar:NPS?
likes NP\[NP4~ -+ JohnNP_~ -~ the white N~NL~ j --~ houseDerivation:(SE\], Sg\])==~(NPE\] likes NEE\], NP\[~\] pla~t a NP\[~\]):::=~(NP\[~\] likes the white N~,  la N~ blanche plai~ dNP\[-;\])(John likes the white house, la maison blanchepla~t d Jean)Figure 5: Sample SDTS and derivationS \ [~ NPE\] pla~t ~ NPF1NP\[4\[ -+ JeanNP~ -~ la N~ blancheNIT \] --~ rnaison(Shieber, 1994) studies the translation problem mak-ing the unappealing assumption that each tree in theinput grammar is associated with only one outputgrammar tree).However, SynchTAG cannot derive all possiblescope orderings, because of the locality restriction.This can be shown by adapting the proof techniquein (Becker, Rambow, and Niv, 1992).
In the follow-ing section, we will present a synchronous systemwhich has local synchronization's formal advantages,but handles the scoping data.3 Extended Local Synchron izat ionIn this section, we propose a new synchronous sys-tem, which is based on local synchronization ofunordered vector grammars with dominance links(UVG-DL) (Rambow, 1994).
The presentations willbe informal for reasons of space; we refer to (Ram-bow and Satta, 1996) for details.
In UVG-DL, sev-eral context-free string rewriting rules are groupedinto sets, called vectors.
In a derivation, all or norules from a given instance of a vector must be used.Put differently, all productions from a given vectormust be used the same number of times.
They canbe applied in any order and need not be appliedsimultaneously or one right after the other.
In addi-tion, UVG-DL has dominance links.
An occurrenceof a nonterminal A in the right-hand side of a rule pcan be linked to the left-hand nonterminal ofanotherrule p' in the same vector.
This dominance link willact as a constraint on derivations: if p is used ina derivation, then p' must be used subsequently inthe subderivation that starts with the occurrence ofA introduced by p. A UVG-DL is lexicalized iff atleast one production in every vector contains a ter-minal symbol.
Henceforth, all UVG-DLs mentionedin this paper will implicitly be assumed to be lex-icalized.
The derivation structure of a UVG-DL isjust the derivation structure of the same derivationin the underlying context-free grammar (the CFGobtained by forming the union of all vectors).
Wegive an example of a UVG-DL in Figure 6, in whichthe dotted lines represent the dominance links.
Asample derivation is in Figure 7.
{for all x, F xxaman '.,....
'{exists y, F i Y say T Fy an official '.,.
,.
'z a Norwegian :.. .
.Figure 6: A UVG-DL for deriving semantic repre-sentations such as (2)Our proposal for the synchronization f two UVG-DL uses the notion of locality in synchronization,but with respect o entire vectors, not individualproductions in these vectors.
This approach, as wewill see, gives us both the desired empirical coverageand acceptable computational nd formal results.We suppose that in each vector v of a UVG-DL thereis exactly one privileged element, which we call thesynchronous production of v. All other elements ofv are referred to as asynchronous productions.
InFigures 6 and 7, the synchronous productions aredesignated by a bold-italic left-hand side symbol.Furthermore, in the right-hand side of each asyn-chronous production of v we identify a single non-terminal nonterminal, called the heir.In a synchronous UVG-DL (SynchUVG-DL), vec-tors from one UVG-DL are synchronized with vec-tors from another UVG-DL.
Two vectors are syn-chronized by specifying a bijective synchronizationmapping (as in local synchronization) between thenon-heir ight-hand side occurrences ofnonterminalsin the productions of the two vectors.
A nontermi-nal on which a synchronization li k impinges is re-ferred to as a synchronous nonterminal.
A sampleSynchUVG-DL grammar is shown in Figure 9.Informally speaking, during a SynchUVG-DLderivation, the two synchronous productions in apair of synchronized vectors must be applied atthe same time and must rewrite linked occurrencesof nonterminals previously introduced.
The asyn-chronous productions of the two synchronized gram-119mars are not subject o the synchronization require-ment, and they can be applied at any time and in-dependently of the other grammar (but of coursesubject to the grammar-specific dominance links).Any synchronous links that impinge on a nonter-minal rewritten by an asynchronous production aretransferred to the heir of the asynchronous produc-tion.
A production may introduce a synchronousnonterminal whose counterpart in the other gram-mar has not yet been introduced.
In this case, thelink remains "pending".
Thus, while in SynchUVG-DL there is link inheritance as in non-local synchro-nization, link inheritance is only possible with thoseproductions that themselves are not subject to thesynchronization requirement.The locality of the synchronization becomes clearwhen we consider a new tree structure which weintroduce here, called the vector derivation tree.Consider two synchronized UVG-DLderivations in aSynchUVG-DL.
The vector derivation tree for eithercomponent derivation is obtained as follows.
Eachinstance of a vector used in the derivation is repre-sented as a single node (which we label with thatvector's lexeme).
A node representing a vector vlis immediately dominated by the node representingthe vector v2 which introduced the synchronizationlink that the synchronous production of vl rewrites.Unlike the standard erivation tree for UVG-DL, thevector derivation tree clearly shows how the vectors(rather than the component rules of the vectors)were combined during the derivation.
The vectorderivation tree for the derivation in Figure 7 is shownin Figure 8.Fexists z, Fz aNor~cg i~ .~-~.~exists y, F ............y an official a ~- - l l x ,  -F ....... "'"" .
.
.
.
.
.
.
.
.
.
.
.
.l o t  , " ' " .x a man ~ .think T F ..'Xsay T FIY arrive TIZFigure 7: Derivation of (2b) in a UVG-DLIt should be clear that the vector derivation treesfor two synchronized derivations are isomorphic, re-flecting the fact that our definition of SynchUVG-thinkevery man sayexists arrivean officialexistsa NorwegianFigure 8: Vector derivation tree for derivation of(2b)DL is local with respect o vectors (though not withrespect o productions, since the derivation trees oftwo synchronized UVG-DL derivations need not beisomorphic).
The vector derivation tree can be seenas representing an "outline" for the derivation.
Sucha view is attractive from a linguistic perspective: ifeach vector represents a lexeme and its projection(where the synchronous production is the basis ofthe lexical projection that the vector represents),then the vector derivation tree is in fact the depen-dency tree of the sentence (representing direct re-lations between lexemes uch as grammatical func-tion).
In this respect, the vector derivation tree ofUVG-DL is like the derivation tree of tree adjoininggrammar and of D-tree grammars (DTG) (Rambow,Vijay-Shanker, and Weir, 1995), which is not sur-prising, since all three formalisms hare the sameextended omain of locality.
Furthermore, the vec-tor derivation tree of SynchUVG-DL shares withthe the derivation tree of DTG the property thatit reflects linguistic dependency uniformly; however,while the definition of DTG was motivated pre-cisely from considerations of dependency, the vectorderivation tree is merely a by-product of our defi-nition of SynchUVG-DL, which was motivated fromthe desire to have a computationally tractable modelof synchronization more powerful than SynchTAG.2We briefly discuss a sample derivation.
We startwith the two start symbols, which are linked.
Wethen apply an asynchronous production from the se-mantic grammar.
In Figure 10 (top) we see howthe link is inherited by the heir nonterminal of theapplied production.
This step is repeated with twomore asynchronous productions, yielding Figure 10(bottom).
We now apply productions for the bodiesof the clauses, but stop short before the two syn-chronous productions for the arrive clause, yieldingFigure 11.
We see the asynchronous production ofthe syntactic arrive vector has not only inherited thelink to its heir nonterminal, but has introduced a link2We do not discuss modifiers in this paper for lack ofspace.1 20S F{every man for all x, F* .
: xx a Irmn :.....S-.. i ~" some officiall ~-  exists y, F* yy an official '.
./ ....*Figure 9: SynchUVG-DL grammar for quantifierscope disambiguationFS ~  exists z, F*Fs ~ e X i s t s  z, F z a Norwegian ~ ...........exists y, F "'"'-..y an official ~ .
.
.
":for all x. F* 'i iFigure 10: SynchUVG-DL derivation, steps 1 and 2of its own.
Since the semantic end of the link hasnot been introduced yet, the links remains "pend-ing" until that time.
We then finish the derivationto obtain the two trees in Figure 1 and Figure 2,with no synchronization r dominance links left.4 Formal  resu l t sTheorem 1 SynchUVG-DL has the languagepreservation property.Proof  (outline).
Let Gs be a SynchUVG-DL, G'and G" its left and right UVG-DL components, re-spectively.
We construct a UVG-DL G generatingthe left-projection language of Gs.
G uses all theS FNP VP exists z, F\[ ~ z a Norwegian ~ ..............\[ thinks S exists y, E.. ""..\[ ~ y an off,c,al ~ ...... ".....\[ NP VP for all x, F ""., ".../ ~ said S think T F / "..Figure 11: SynchUVG-DL derivation, step 3nonterminal symbols of G' and G", and some com-pound nonterminals of the form \[A, B\], A and Bnonterminals of G' and G", respectively.
G simu-lates Gs derivations by intermixing symbols of G'and symbols of G", and without generating any ofthe terminal symbols of G".
Most important, eachpair of linked nonterminals generated by Gs is rep-resented by G using a compound symbol.
This en-forces the requirement of simultaneous applicationof synchronous productions to linked nonterminals.Each vector v of G is constructed from a pair ofsynchronous vectors (v', v") of Gs as follows.
First,all instances of nonterminals in v" are replaced by e.Furthermore, for any instance B of a right-hand sidenonterminal of v" linked to a right-hand side non-terminal A of v', B is replaced by E and A by \[A, B\].Then the two synchronous productions in v ~ and v"are composed into a single production in v, by com-posing the two left-hand sides in a compound symboland by concatenating the two right-hand sides.
Fi-nally, to simulate link inheritance in derivations ofGs, each asynchronous production in v' and v" istransferred to v, either without any change, or bycomposing with some nonterminal C both its left-hand side and the heir nonterminal in its right-handside.
Note that there are finitely many choices forthe last step, and each choice gives a different vectorin G, simulating the application of v' and v" to a setof (occurrences of) nonterminals in a particular linkconfiguration i a sentential form of Gs.
?We now introduce a representation for sets ofderivation trees in a UVG-DL G. A parse tree inG is an ordered tree representing a derivation in Gand encoding at each node the production p used tostart the corresponding subderivation and the mul-tiset of productions f used in that subderivation.
A121parse forest in G is a directed acyclic graph whichis ordered and bipartite.
(We use ideas originallydeveloped in (Lang, 1991) for the context-free case.
)Nodes of the graph are of two different ypes, calledand-nodes and or-nodes, respectively, and each di-rected arc connects nodes of different ypes.
A parseforest in G represents a set T of parse trees in G ifthe following holds.
When starting at a root nodeand walking through the graph, if we follow exactlyone of the outgoing arcs at each or-node, and all ofthe outgoing arcs at each and-node, we obtain a treein T modulo the removal of the or-nodes.
Further-more, every tree in T can be obtained in this way.Lemma 2 Let G be a UVG-DL and let q >__ 1 bea natural number.
The parse forest representing theset of all parse trees in G with no more than q vectorscan be constructed in an amount of time bounded bya polynomial function of q.
?Let Gs be a SynchUVG-DL, G' and G" its leftand right UVG-DL components, respectively.
Fora parse tree T in G', we denote as T(T) the setof all parse trees in G" that are synchronous withT according to Gs.
The parse-to-forest translationproblem for Gs takes as input a parse tree r in G'and gives as output a parse forest representation forT(T).
If Gs is lexicalized, such a parse forest has sizebounded by a polynomial function of I T I, despite thefact that the size of T(~) can be exponentially argerthan the size of T. In fact, we have a stronger result.Theorem 3 The parse-to-forest translation prob-lem for a lexiealized SynchUVG-DL can be computedin polynomial time.Proof  (out l ine) .
Let Gs be a SynchUVG-DLwith G' and G" its left and right UVG-DL com-ponents, respectively.
Let T be a parse tree in G ~and 7r be the parse forest representing T(T).
Theconstruction of 7r consists of two stages.In the first stage, we construct he vector deriva-tion tree 7 associated with T. Let q be the numberof nodes of % We also construct a parse forest 7rqrepresenting the set of all parse trees in G" with nomore than q vectors.
This stage takes polynomialtime in the size of % since 3' can be constructedfrom r in linear time and 7rq can be constructed asin Lemma 2.In the second stage, we remove from 7rq all theparse trees not in 7r.
This completes the construc-tion, since the set of parse trees represented by 7r isincluded in the set of parse trees represented by 7rq.Let nr and F be the root node and the set of all nodesof 7, respectively.
For n E F, out(n) denotes the setof all children of n. We call family the set {n~} andany nonempty subset of out(n), n E F. The mainidea is to associate a set of families ~n to each noden of 7rq, such that the following condition is satis-fied.
A family F belongs to ~-n if and only if at leastone subderivation i G" represented at n induces aforest of vector derivation trees whose root nodesare all and only the nodes in F. Each ~'n can eas-ily be computed visiting 7rq in a bottom-up fashion.Crucially, we "block" a node of 7rq if we fail in theconstruction of ~'n.
We claim that each set ~'n hassize bounded by the number of nodes in % This canbe shown using the fact that all derivation trees rep-resented at a node of ~rq employ the same multiset ofproductions of G".
From the above claim, it followsthat 7rq can be processed in time polynomial in thesize of r. Finally, we obtain 7r simply by removingfrom 7rq all nodes that have been blocked.
?5 Conc lus ionWe have presented SynchUVG-DL, a synchronoussystem which has restricted formal power, is com-putationally tractable, and which handles thequantifier-raising data.
In addition, SynchUVG-DLcan be used for modeling the syntax of languageswith syntactic constructions which have been ar-gued to be beyond the formal power of TAG, suchas scrambling in German and many other lan-guages (Rainbow, 1994) or wh-movement in Kash-miri (Rambow, Vijay-Shanker, and Weir, 1995).SynchUVG-DL can be used to synchronize a syn-tactic grammar for these languages either with a se-mantic grammar, or with the syntactic grammar ofanother language for machine translation applica-tions.
However, SynchUVG-DL cannot handle thelist of cases listed in (Shieber, 1994).
These pose aproblem for SynchUVG-DL for the same reason thatthey pose a problem for other local synchronous sys-tems: the (syntactic) dependency structures repre-sented by the two derivations are different.
Thesecases remain an open research issue.AcknowledgmentsParts of the present research were done while Ram-bow was supported by the North Atlantic Treaty Or-ganization under a Grant awarded in 1993, while atTALANA, Universit6 Paris 7, and while Satta wasvisiting the Center for Language and Speech Pro-cessing, Johns Hopkins University, Baltimore, MD.ReferencesAbeill6, Anne.
1994.
Syntax or semantics?
Han-dling nonlocal dependencies with MCTAGs or122Synchronous TAGs.
Computational Intelligence,10(4):471-485.Abeilld, Anne, Yves Schabes, and Aravind Joshi.1990.
Using lexicalized TAGs for machine trans-lation.
In Proceedings of the 13th InternationalConference on Computational Linguistics (COL-ING'90), Helsinki.
COLING-90.Aho, A. V. and J. D. Ullman.
1969.
Syntax di-rected translations and the pushdown assembler.J.
Comput.
Syst.
Sci., 3(1):37-56.Aho, A. V. and J. D. Ullman.
1972.
The Theoryof Parsing, Translation, and Compiling.
PrenticeHall, Englewood Cliffs, NJ.Becket, Tilman, Owen Rambow, and Michael Niv.1992.
The derivational generative power, or,scrambling is beyond LCFRS.
Technical ReportIRCS-92-38, Institute for Research in CognitiveScience, University of Pennsylvania.Bresnan, J. and R. Kaplan.
1982.
Lexical-functionalgrammar: A formal system for grammatical repre-sentation.
In J. Bresnan, editor, The Mental Rep-resentation of Grammatical Relations.
MIT Press.Chomsky, Noam.
1993.
A minimalist program forlinguistic theory.
In Kenneth Hale and Samuel J.Keyser, editors, The View from Building 20.
MITPress, Cambridge, Mass., pages 1-52.Egedi, Dana and Martha Palmer.
1994.
Constrain-ing lexical selection across languages using TAG.In 3 e Colloque International sur les Grammairesd'Arbres Adjoints (TAG+3), Rapport TechniqueTALANA-RT-94-01.
Universit~ Paris 7.Gross, Maurice.
1989.
The use of Finite-State Au-tomata in the lexical representation f natural lan-guage.
In M. Gross and D. Perrin, editors, Elec-tronic Dictionaries and Automata in Computa-tional Linguistics.
Springer.Harbusch, Karin and Peter Poller.
1994.
Structuralrewriting with synchronous rewriting systems.
In3 ~ Colloque International sur les Grammairesd'Arbres Adjoints (TAG+3), Rapport TechniqueTALANA-RT-94-01.
Universit~ Paris 7.Kaplan, Ronald M. and Martin Kay.
1994.
Regularmodels of phonological rule systems.
Computa-tional Linguistics, 20(3):331-378.Koskenniemi, Kimmo.
1983.
Two-level morphol-ogy: A general computational model for word-form recognition and production.
Technical Re-port 11, Department of General Linguistics, Uni-versity of Helsinki.Lang, B.
1991.
Towards a uniform formal frame-work for parsing.
In M. Tomita, editor, CurrentIssues in Parsing technology.
Kluwer AcademicPublishers, chapter 11, pages 153-171.May, Robert.
1985.
Logical Form: Its structure andDerivation.
MIT Press, Cambridge, Mass.Pereira, Fernando.
1991.
Finite-state approxima-tion of phrase structure grammars.
In 29th Meet-ing of the Association for Computational Linguis-tics (ACL'91), Berkeley, California.
ACL.Pollard, Carl and Ivan Sag.
1994.
Head-Driven Phrase Structure Grammar.
University ofChicago Press, Chicago.Prigent, Gilles.
1994.
Synchronous tags and ma-chine translation.
In 3 e Colloque Internationalsur les Grammaires d'Arbres Adjoints (TAG+3),Rapport Technique TALANA-RT-94-01.
Univer-sit~ Paris 7.Rambow, Owen.
1994.
Multiset-valued linear indexgrammars.
In 32nd Meeting of the Association forComputational Linguistics (.4 CL '94).
ACL.Rambow, Owen and Giorgio Satta.
1996.
Syn-chronous models of language.
Manuscript underpreparation.Rambow, Owen, K. Vijay-Shanker, and David Weir.1995.
D-Tree Grammars.
In 33rd Meetingof the Association for Computational Linguistics(.4 CL'95).
ACL.Roche, Emmanuel.
1993.
Analyse syntaxiquetransformationelle dufran~ais par transducteur etlexique-grammaire.
Ph.D. thesis, Universitd Raris7, Paris, France.Shieber, Stuart and Yves Schabes.
1990.
Syn-chronous tree adjoining rammars.
In Proceedingsof the 13th International Conference on Compu-tational Linguistics, Helsinki.Shieber, Stuart and Yves Schabes.
1991.
Gener-ation and synchronous tree adjoining grammars.Computational Intelligence, 4(7):220-228.Shieber, Stuart B.
1994.
Restricting the weakgenerative capacity of Synchronous Tree Ad-joining Grammar.
Computational Intelligence,10(4):371-385.Wu, Dekai.
1995.
An algorithm for simultane-ously bracketing parallel texts by aligning words.In 33rd Meeting of the Association for Computa-tional Linguistics (ACL '95).
ACL.123
