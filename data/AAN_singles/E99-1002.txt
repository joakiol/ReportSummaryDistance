Proceedings of EACL '99Generating referring expressions with a unification grammarRichard PowerInformation Technology Research InstituteUniversity of BrightonLewes RoadBrighton BN2 4AT, UKRichard.Power@itri.bton.ac.ukAbstractA simple formalism isproposed to repre-sent the contexts in which pronouns, def-inite/indefinite d scriptions, and ordinaldescriptions (e.g.
'the second book') canbe used, and the way in which these ex-pressions change the context.
It is shownthat referring expressions can be gener-ated by a unification grammar providedthat some phrase-structure rules are spe-cially tailored to express entities in thecurrent knowledge base.1 IntroductionNominal referring expressions are exceptionallysensitive to linguistic ontext.
If a discourse men-tions a book, potential referring expressions in-clude 'it', 'a book', 'the book', 'another book','the second book', along with an unlimited num-ber of more complex descriptions (e.g.
'the redbook') that mention the book's properties.
Thechoice among these alternatives depends on fea-tures of the preceding text: whether the referenthas been mentioned before; whether it is currentlya focus of attention; whether different referents ofthe same type (e.g.
other books) have been in-troduced as well.
Taking account of such factorsposes a tricky problem for Natural Language Gen-eration (NLG), especially in applications in whichefficiency (i.e.
fast generation of texts) is a prior-ity.This paper proposes a method that allows effi-cient generation of referring expressions, througha unification grammar, at the cost of some ini-tial effort in tailoring the phrase-structure rulesto the current knowledge base.
The method wasinvented to meet the needs of applications us-ing 'WYSIWYM editing' (Power and Scott, 1998),which allow an author to control the content of anautomatically generated text without prior train-ing in knowledge ngineering.
WYSIWYM is based\[ 1  oAL j 1 _f \] procedure j r ~ put-on j -\[, patchMETHOD ~ IREST IFigure 1: Network representation of an instructionon the idea of a 'feedback text', i.e.
a text, gener-ated by the system, that presents the current con-tent of the knowledge base (however incomplete)along with the set of permitted operations for ex-tending or otherwise diting the knowledge; theseoperations are provided through pop-up menuswhich open on spans of the feedback text.
Two re-quirements ofWYSIWYM editing are that feedbacktexts should be generated fast (even a delay of afew seconds i irritating), and that they should ex-press coreference relations clearly through appro-priate referring expressions; reconciling these tworequirements has motivated the work describedhere.The semantic network in figure 1 shows a knowl-edge base that might be produced using the ICON-OCLAST 1 system, which generates patient infor-mation leaflets.
At present his knowledge basedefines only the goal and first step of a procedure;before generating a useful output ext the authorwould have to add further steps.
To facilitate theauthor's task, the program generates the followingfeedback text, including the 'anchor' Further stepswhich provides options for extending the proce-dure.IICONOCLAST is supported by the Engineering andPhysical Sciences Research Council (EPSRC) GrantL77102.Proceedings of EACL '99To put on a patch:1.
Remove the patch from the box.Further steps.The program can also produce an 'output text'in which optional unspecified material is omitted.Whereas the feedback text is viewed only by theauthor during editing, the output text constitutesthe final product which will be incorporated intothe patient information leaflet.
At the stage de-picted by figure 1, with only one step specified,an output text could be generated if desired, butowing to the incomplete content it would readstrangely:Put on a patch by removing it from the box.These simple texts already illustrate several waysin which the choice of referring expression dependsupon context.?
To introduce a referent into the discourse, anindefinite description (e.g.
'a patch') is usu-ally used, although a definite description maybe preferred if the referent will already be fa-miliar to the reader ('the box').?
Subsequent mentions of the referent are madethrough a pronoun or a definite description.In this way~ the text distinguishes referencesto the same token from references to two to-kens of the same type.
If the patch removedfrom the box were different from the patchto be put on, the second line of the feedbacktext should contain another indefinite nom-inal (e.g.
'Remove a second patch from thebox').?
Roughly, a pronoun can be used instead ofa definite description if there is no danger ofambiguity, and if no major structural bound-ary has been passed since the referent waslast mentioned.
We are not concerned herewith the details of this issue (Hofmann, 1989;Walker et al, 1998); in the examples, we havetreated the colon in the feedback text as a ma-jor structural boundary, so preferring a def-inite description in the feedback text and apronoun in the output text.We concentrate here on two contextual features,focus and pr io r  ment ions .
The problem of find-ing suitable identifying properties (Dale and Re-iter, 1995; Horacek, 1997) will not be addressedhere, although as will be shown our approachcould incorporate this work.2 Representing linguistic contextFor any referring expression (e.g.
'a patch') onecan define two relevant contextual states: first, thecontext in which the expression may be used; sec-ondly, the context hat results from its use.
Thesewill be called the 'initial' and 'final' contexts.
Inthe case of 'a patch', they can be informally de-fined as follows.In i t ia l  context :  The patch is not in focus, ithas not been mentioned before, and no otherpatch has been mentioned.F ina l  context :  The patch is in focus, it has beenmentioned, and no other patch has been men-tioned.The aim of this section is to model the initialand final contexts formally, considering not justindefinite descriptions but the full range of nom-inals mentioned earlier (including pronouns, def-inite descriptions and ordinal descriptions).
Forthis purpose we will discuss an example that in-cludes at least one nominal of each kind.To put on a patch:1.
Take a sachet.2.
Remove the patch from a second sachet.3.
Position the patch and press it firmly.The strange second step suggests that the authorhas made a mistake during knowledge diting, in-troducing a second sachet instead of re-using thesachet entity introduced in step 1.
An importantobjective of the WYSIWYM feedback text is to ex-pose such errors clearly.
Because of this editingmistake, the passage mentions three objects: onepatch, and two sachets.
The patch is unique, theonly object in the discourse satisfying the descrip-tion 'patch'.
The sachets, instead, are distractors- -  i.e., distinct objects answering to the same de-scription.As a first approximation, the contextual statecan be formalized by two vectors which will becalled the 'focus vector' and the 'mention vector'.Each vector should contain one element for eachdiscourse referent hat might be expressed by anominal referring expression, so that in the exam-ple the vectors will be three elements long.
Theorder of elements in the vector is irrelevant pro-vided that it is observed consistently: it will beassumed arbitrarily that it is SA, SB, p, where SAand sB denote the two sachets and p denotes thepatch.
Note in particular that the order of SA andsB in the vector is independent from their orderof introduction in the text.The values in the focus vector are boolean: 1 ifthe referent is in focus, 0 if it is not.
We simplify10Proceedings of EACL '993 Incorporating context into thegrammarA requirement on all WYSIWYM systems has beenfast response.
Every time that the author selectsan editing operation on the feedback text, theknowledge base is updated and a new feedbacktext is generated.
Any tangible delay in present-ing the updated feedback text is irritating.In pursuit of efficiency, ICONOCLAST employsa top-down generator coupled with a unificationgrammar.
The grammar adheres trictly to Oc-cain's razor: features or rules are admitted onlyif they contribute to generating the desired texts.ICONOCLAST is implemented in ProFIT (Erbach,1995), so that feature structures are representedby Prolog terms and can be unified efficientlythrough Prolog term unification.How can linguistic context be fitted into such ascheme?
Ideally we would like to incorporate con-text into the phrase-structure rules, so that forexample a rule introducing a pronoun would beapplied only if the referent o be expressed hada value of 1 in the focus vector.
Unfortunatelysuch a rule could not be formulated in generalterms: both its semantic features and its focusand mention vectors would depend on particularproperties of the current knowledge base.
How-ever, nothing prevents us from constructing 'be-spoke' rules, tailored to the current state of theknowledge base, every time that it is updated.
Atfirst sight this might seem a ridiculous waste oftime - -  one would have to envisage beforehandall the ways in which every referent might be ex-pressed - -  but in compensation the search phaseof generation can proceed much faster, since allcalculations relating to linguistic context have al-ready been performed, and there is no danger thatthey might be duplicated.Returning to the example in the previous ec-tion, let us work out the bespoke phrase-structurerules that should be added to the grammar so thatit can refer to SA, SB and p. At this stage we donot know the exact contexts in which these ref-erents will be introduced; these will depend ontext-planning decisions during generation.
Never-theless, some valid generalizations can be made inadvance by examining the content o be expressed:?
p will be mentioned several times, so we mightneed pronouns, definite descriptions, and in-definite descriptions.
However, since p has nodistractors, no rule introducing ordinals willbe necessary.?
SA and SB are mentioned only once each, sodefinite descriptions and pronouns are unnec-essary.
However, since they are distractors,indefinite descriptions with ordinals shouldbe provided.Here is a phrase-structure rule generating indef-inite descriptions for SA (either 'a sachet' or 'asecond sachet').
The rule is presented in sim-plified ProFIT notation, where F!V means thatV is the value of feature F; as usual in Prolog,symbols tarting with a lower-case letter are con-stants, while symbols tarting with an upper-caseletter are variables.
Focus and mention vectorsare represented by lists, while the phrase-structureconstituents are listed under the cset  feature.
Itwill be seen that the rule does not rely entirelyon unification, because it includes a statement ex-pressing Df as a function of Di, but it will shownlater how this blemish can be removed.rule (referent !
sA &properties !
\[type :patch\] &syntax !np &initial!
(focus!
\[0 .
.
.
.
\] &mention!
\[O/Di, N/Di, M\]) &final!
(focus!
\[i, O, O\] &mention!
\[Dr/Dr, N/Dr, M\])cset !
\[properties !
\[type : indef\] &syntax !
det,properties !
\[order: (Dr/Dr),type :patch\]syntax !
nbar\] ) : -Df is Di + I.The syntactic form of this rule is NP --+ DET +NBAR,  where the NBAR can be expanded byNBAR --+ NOUN to yield 'a sachet', and byNBAR --+ ORDINAL  + NBAR to yield 'a sec-ond sachet'.
Which of these rules is applied willdepend on the order  property, which reproducesthe final mention ratio - -  a ratio of 1/1 activatesthe former ule, while any other ratio activates thelatter.The above statement of the rule simplifies byspecifying contextual features only on the parent.In this particular case the omission is harmless:since the sachets have no properties (apart fromtype), the NBAR of the indefinite descriptioncannot include any expression referring to otherobjects (e.g.
'a sachet containing a patch').
Ingeneral, however, subordinated nominals mightmodify the context, so the final context of theparent should depend partly on the final contextof its last constituent.
This requires two things:first, the context must be 'threaded' through theconstituents; secondly, the relationship betweenthe final contexts of the parent and the last con-stituent must be defined.11Proceedings of EACL '99by assuming (a) that focus is all-or-none ratherthan a matter of degree, and (b) that at most onereferent can be in focus at any time.
Actually theICONOCLAST system refines the second limitationby grouping the referents according to whetherthey are competitors for the same pronoun: peo-ple compete for 'he/she' (or 'him/her' etc.
), andphysical objects for 'it'.
With this refinement, herelevant constraint is that at most one referent ineach group can be in focus at any time.
However,in the example, the three referents are all physicalobjects - -  competitors for 'it' - -  so this compli-cation can be ignored.The behaviour of the focus vector is straight-forward.
At the beginning of the text no referenthas been mentioned, so all focus values are zero:8A 8B pFOCUS 0 0 0Whenever an object is mentioned, it comes intofocus and its rivals go out of focus.
As a result,the phrase 'the patch' in the final step switchesthe focus vector to the foUowing:8A 8B pFOCUS 0 0 1With p now in focus, the pronoun 'it' can be em-ployed to refer to p in the final clause.The mention vector is more complex.
Eachvalue is a ratio N/D,  where N is the order of intro-duction of the referent relative to its distractors,and D is the number of members of the distractorgroup introduced so far.
If the referent has notyet been mentioned, N = 0; if no members of thedistractor group have yet been mentioned, D = 0.Initially all mention ratios are set to 0/0; at theend of step 1 in the example the state of the men-tion vector will be as follows (assuming that thefirst-mentioned sachet is SA):SA SB pMENTION 1/1 0/1 1/1Consequently, when SB is introduced uring thesecond step, its initial mention ratio is 0/1, mean-ing that while sB has not yet been mentioned, oneof its distractors has got in first: On the basis ofthis information the generator should produce anindefinite description including the ordinal 'sec-ond' (or perhaps the determiner 'another').
Bythe end of step 2 all three objects have been in-troduced, so the mention vector reaches its finalstate:SA SB pMENTION 1/2 2/2 1/1Note that the two mentions of the patch in step3 have no effect on the mention vector: its pur-pose is to record the order of introduction of areferent in relation to its distractors, not the num-ber of times that a referent has been mentioned.When choosing a referring expression it is rele-vant whether a referent has been mentioned (assignalled by its N value in the mention ratio), butthe precise number of mentions is of no signifi-cance.It has been shown that the focus and mentionvectors allow us to represent the initial and finalcontexts of the referring expressions in the exam-ple.
(Of course we have oversimplified, especiallyin our treatment of focus.)
We now show thatby abstracting from the particular contexts in theexample, it is possible to describe the initial andfinal contexts of these referring expressions in alltexts expressing the same content.
This is doneby using variables to represent the values of anycontextual features that do not interact with thereferring expression under consideration.
For in-stance, the generalized initial and final contexts of'a patch' areInitial context Final contextp 'a patch' SA SB p SA SB pFOCUS FA FB 0 0 0 1MENTION MA Ms  0/0 MA MB 1/1where FA, MA, etc.
are variables.
Among otherthings this rule implies that 'a patch' may be usedwhatever the current focus values for SA and SB,but that after "a patch' these objects must be outof focus.
Here are the corresponding rules for theother referring expressions in the example.p 'the patch'FOCUSMENTIONp 'it'FOCUSMENTIONSA ~a sachet'FOCUSMENTIONSB 'a  secondsachet'FOCUSMENTIONInitial context Final context8A 8B p 8A 8B pFA FB O 0 0 1MA MB 1/1 MA MB 1/1Initial context Final contextSA SB p SA SB p0 0 1 0 0 1MA MB M MA MB MInitial context Final contextSA SB p 8A SB p0 0 F 1 0 00/0 0/0 M 1/1 0/1 MInitial context Final context8A 8B p SA SB pFA 0 F 0 1 01/1 0/1 M 1/2 2/2 MNote that each rule is specific to a referent.
Forinstance, the rule given for 'a sachet' is specificto SA; a slightly different rule would be needed todescribe the contexts in which 'a sachet' can beemployed to refer to SB.12Proceedings of EACL '99The procedure for threading contextual featuresis straightforward.
Suppose the rule has the formu0 -+ ui + u2... + uN, and that the initial and finalcontexts of any unit u are I(u) and F(u).
In allcases, the initial context of the parent should beunified with the initial context of the first daugh-ter, so that I(uo) = I(ui).
The relationship be-tween I(ui) and F(ut) will depend upon the rulethat expands the first daughter, but the final con-text of any daughter should always be unified withthe initial context of the next daughter, so that forexample F(ut) = I(u2).
Moreover, for any rulethat does not generate a referring expression, thefinal context of the last daughter can be unifiedwith that of the parent, so that F(ug) = f(uo).For referring expressions, instead, F(uo) usuallydiffers from F(ug), because the end of a referringexpression is the point where the linguistic ontextmay be changed.Thus to take account of subordinated referringexpressions, a rule must specify the relationshipbetween three contexts: I(uo), F(uiv), and F(uo).A rule capable of expressing SA by 'a sachet con-talning a patch' should represent these contextsas follows:I(uo) sa sB pFOCUS 0 .
.
.
.
.
.MENTION O/Di N/D i  ...F(uN) sA sB pFOCUS .
.
.
.
.
.
FMENTION O/Di N/Di MF(Uo) SA SB pFOCUS 1 0 0MENTION Dr~Dr N/Df Mwhere D/= Di + 1.Finally we return, as promised, to the problemof updating mention ratios by unification, withoutresorting to statements like Df is  Di + 1.
Thiscan be done by replacing numbers with lists of theappropriate l ngth, so that for example the ratio0/2 is represented by the term\[\] / \[_, _\]With this convention, the relationship betweenthe mention ratios of F(UN) and F(uo) can bestated without an accompanying umerical con-straint:8A 8S PF(uN) \[\]/D N/D MF(uo) \[-I D\]/\[_ I D\] N/I_ I D\] M4 Conc lus ionTwo ideas have been suggested:The linguistic context relevant o choosingnominal referring expressions can be formal-ized, in part, by vectors giving focus valuesand mention ratios for all potential referents.These features can be threaded through thetext structure during generation by assigninginitial and final contexts to each textual unit.?
Since generation requires search through aspace of possible structures, there is a dan-ger that expensive computations of linguis-tic context will be repeated many times.This can be avoided by composing 'bespoke'phrase-structure rules, tailored to the entitiescurrently in the knowledge base, before em-barking on the search phase.Note that the first proposal can be employed in-dependently from the second, which is more spec-ulative.
However, we think that the idea of usingspecially tailored phrase-structure rules deservesconsideration.
Its applications are not limited tothe generation of referring expressions.
One aimof the ICONOCLAST project is to generate textsin a variety of house styles, where a 'style' em-braces preferences regarding textual organization,wording, punctuation and layout.
To cover a largerange of styles, many patterns must be made avail-able to the generator, even though only a fractionare relevant for a particular company and a partic-ular knowledge base.
Before commencing a searchthrough this space of patterns, it is worth devotingsome effort to refining the search space by filter-ing out irrelevant rules and perhaps merging rulesthat separately constrain linguistic and presenta-tional features.The efficiency of the approach suggested hereis difficult to evaluate in general terms: it willdepend on the nature of the alternative meth-ods, and also on the size of the generated text.For larger texts, in which entities may be men-tioned many times, the initial investment ofeffortin creating bespoke phrase-structure rules will ob-viously pay more dividends.
However, before try-ing to evaluate this difficult trade-off, we feel thenext step should be to ensure that the approachcan be applied to a wider range of referring ex-pressions (e.g.
demonstratives, plurals), and thatit can be extended to cover a more complex treat-ment of focus such as centering theory (Walker etal., 1998).Although we have not addressed here the prob-lem of selecting appropriate properties for use in13Proceedings of EACL '99referential descriptions (Dale and Reiter, 1995), itis worth noting that since this selection dependson the current state of the knowledge base, it canalso be performed before the search phase of gen-eration, the results of the selection algorithm be-ing saved in the form of additional bespoke rules.ReferencesR.
Dale and E. Reiter.
1995.
Computational in-terpretations of the gricean maxims in the gen-eration of referring expressions.
Cognitive Sci-ence, 19:233-263.G.
Erbach.
1995.
Profit: Prolog with features,inheritance and templates.
In Seventh Confer-ence of the European Chapter of the Associationfor Computational Linguistics, pages 180-187,Dublin.T.
Hofmann.
1989.
Paragraphs and anaphora.Journal of Pragmatics, 13:239--250.H.
Horacek.
1997.
An algorithm for generat-ing referential descriptions with flexible inter-faces.
In 35th Annual Meeting of the Associa-tion for Computational Linguistics, pages 206-213, Madrid.R.
Power and D. Scott.
1998.
Multilingual au-thoring using feedback texts.
In Proceedings ofthe 17th International Conference on Computa-tional Linguistics and 36th Annual Meeting ofthe Association for Computational Linguistics,pages 1053-1059, Montreal, Canada.M.
Walker, A. Joshi, and E. Prince.
1998.
Center-ing theory in discourse.
Clarendon Press, Ox-ford.14
