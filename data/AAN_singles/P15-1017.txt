Proceedings of the 53rd Annual Meeting of the Association for Computational Linguisticsand the 7th International Joint Conference on Natural Language Processing, pages 167?176,Beijing, China, July 26-31, 2015.c?2015 Association for Computational LinguisticsEvent Extraction via Dynamic Multi-Pooling Convolutional NeuralNetworksYubo Chen, Liheng Xu, Kang Liu, Daojian Zeng and Jun ZhaoNational Laboratory of Pattern RecognitionInstitute of Automation, Chinese Academy of Sciences, Beijing, 100190, China{yubo.chen,lhxu,kliu,djzeng,jzhao}@nlpr.ia.ac.cnAbstractTraditional approaches to the task of ACEevent extraction primarily rely on elabo-rately designed features and complicatednatural language processing (NLP) tools.These traditional approaches lack gener-alization, take a large amount of humaneffort and are prone to error propaga-tion and data sparsity problems.
Thispaper proposes a novel event-extractionmethod, which aims to automatically ex-tract lexical-level and sentence-level fea-tures without using complicated NLPtools.
We introduce a word-representationmodel to capture meaningful semantic reg-ularities for words and adopt a frameworkbased on a convolutional neural network(CNN) to capture sentence-level clues.However, CNN can only capture the mostimportant information in a sentence andmay miss valuable facts when consideringmultiple-event sentences.
We propose adynamic multi-pooling convolutional neu-ral network (DMCNN), which uses a dy-namic multi-pooling layer according toevent triggers and arguments, to reservemore crucial information.
The experimen-tal results show that our approach signif-icantly outperforms other state-of-the-artmethods.1 IntroductionEvent extraction is an important and challengingtask in Information Extraction (IE), which aimsto discover event triggers with specific types andtheir arguments.
Current state-of-the-art methods(Li et al, 2014; Li et al, 2013; Hong et al, 2011;Liao and Grishman, 2010; Ji and Grishman, 2008)often use a set of elaborately designed featuresthat are extracted by textual analysis and linguisticknowledge.
In general, we can divide the featuresinto two categories: lexical features and contex-tual features.Lexical features contain part-of-speech tags(POS), entity information, and morphology fea-tures (e.g., token, lemma, etc.
), which aim to cap-ture semantics or the background knowledge ofwords.
For example, consider the following sen-tence with an ambiguous word beats:S1: Obama beats McCain.S2: Tyson beats his opponent .In S1, beats is a trigger of type Elect.
However,in S2, beats is a trigger of type Attack, which ismore common than type Elect.
Because of the am-biguity, a traditional approach may mislabel beatsin S1 as a trigger of Attack.
However, if we havethe priori knowledge that Obama and McCain arepresidential contenders, we have ample evidenceto predict that beats is a trigger of type Elect.
Wecall these knowledge lexical-level clues.
To repre-sent such features, the existing methods (Hong etal., 2011) often rely on human ingenuity, whichis a time-consuming process and lacks general-ization.
Furthermore, traditional lexical featuresin previous methods are a one-hot representation,which may suffer from the data sparsity problemand may not be able to adequately capture the se-mantics of the words (Turian et al, 2010).To identify events and arguments more pre-cisely, previous methods often captured contex-tual features, such as syntactic features, which aimto understand how facts are tied together from alarger field of view.
For example, in S3, there aretwo events that share three arguments as shownin Figure 1.
From the dependency relation ofnsubj between the argument cameraman and trig-ger died, we can induce a Victim role to cam-eraman in the Die event.
We call such infor-mation sentence-level clues.
However, the argu-ment word cameraman and its trigger word firedare in different clauses, and there is no direct de-167In Baghdad ,   a cameraman died when   an American tank fired on   the Palestine  Hotel.prep_indet nsubj nsubjadvcladvmoddet amodprep_ondetnnFigure 1: Event mentions and syntactic parser results of S3.
The upper side shows two event mentionsthat share three arguments: the Die event mention, triggered by ?died?, and the Attack event mention,triggered by ?fired?.
The lower side shows the collapsed dependency results.pendency path between them.
Thus it is difficultto find the Target role between them using tradi-tional dependency features.
In addition, extractingsuch features depends heavily on the performanceof pre-existing NLP systems, which could sufferfrom error propagation.S3: In Baghdad, a cameraman died when anAmerican tank fired on the Palestine Hotel.To correctly attach cameraman to fired as a Tar-get argument, we must exploit internal semanticsover the entire sentence such that the Attack eventresults in Die event.
Recent improvements ofconvolutional neural networks (CNNs) have beenproven to be efficient for capturing syntactic andsemantics between words within a sentence (Col-lobert et al, 2011; Kalchbrenner and Blunsom,2013; Zeng et al, 2014) for NLP tasks.
CNNstypically use a max-pooling layer, which appliesa max operation over the representation of an en-tire sentence to capture the most useful informa-tion.
However, in event extraction, one sentencemay contain two or more events, and these eventsmay share the argument with different roles.
Forexample, there are two events in S3, namely, theDie event and Attack event.
If we use a traditionalmax-pooling layer and only keep the most impor-tant information to represent the sentence, we mayobtain the information that depicts ?a cameramandied?
but miss the information about ?Americantank fired on the Palestine Hotel?, which is impor-tant for predicting the Attack event and valuablefor attaching cameraman to fired as an Target ar-gument.
In our experiments, we found that suchmultiple-event sentences comprise 27.3% of ourdataset, which is a phenomenon we cannot ignore.In this paper, we propose a dynamic multi-pooling convolutional neural network (DMCNN)to address the problems stated above.
To capturelexical-level clues and reduce human effort, weintroduce a word-representation model (Mikolovet al, 2013b), which has been shown to be ableto capture the meaningful semantic regularities ofwords (Bengio et al, 2003; Erhan et al, 2010;Mikolov et al, 2013a).
To capture sentence-levelclues without using complicated NLP tools, andto reserve information more comprehensively, wedevise a dynamic multi-pooling layer for CNN,which returns the maximum value in each part ofthe sentence according to event triggers and argu-ments.
In summary, the contributions of this paperare as follows:?
We present a novel framework for eventextraction, which can automatically inducelexical-level and sentence-level features fromplain texts without complicated NLP prepro-cessing.?
We devise a dynamic multi-pooling convolu-tional neural network (DMCNN), which aimsto capture more valuable information withina sentence for event extraction.?
We conduct experiments on a widely usedACE2005 event extraction dataset, and theexperimental results show that our approachoutperforms other state-of-the-art methods.2 Event Extraction TaskIn this paper, we focus on the event extraction taskdefined in Automatic Content Extraction1(ACE)evaluation, where an event is defined as a specificoccurrence involving participants.
First, we in-troduce some ACE terminology to understand thistask more easily:1http://projects.ldc.upenn.edu/ace/168?
Event mention: a phrase or sentence withinwhich an event is described, including a trig-ger and arguments.?
Event trigger: the main word that mostclearly expresses the occurrence of an event(An ACE event trigger is typically a verb or anoun).?
Event argument: an entity mention, tempo-ral expression or value (e.g.
Job-Title) that isinvolved in an event (viz., participants).?
Argument role: the relationship between anargument to the event in which it participates.Given an English text document, an event ex-traction system should predict event triggers withspecific subtypes and their arguments for each sen-tence.
The upper side of figure 1 depicts the eventtriggers and their arguments for S3 in Section 1.ACE defines 8 event types and 33 subtypes, suchas Attack or Elect.Although event extraction depends on nameidentification and entity mention co-reference, itis another difficult task in ACE evaluation and notthe focus in the event extraction task.
Thus, in thispaper, we directly leverage the entity label pro-vided by the ACE, following most previous works(Hong et al, 2011; Liao and Grishman, 2010; Jiand Grishman, 2008).3 MethodologyIn this paper, event extraction is formulated as atwo-stage, multi-class classification via dynamicmulti-pooling convolutional neural networks withthe automatically learned features.
The first stageis called trigger classification, in which we use aDMCNN to classify each word in a sentence toidentify trigger words.
If one sentence has trig-gers, the second stage is conducted, which appliesa similar DMCNN to assign arguments to trig-gers and align the roles of the arguments.
We callthis argument classification.
Because the secondstage is more complicated, we first describe themethodology of argument classification in Section3.1?3.4 and then illustrate the difference betweenthe DMCNNs that are used for trigger classifica-tion and those used for argument classification inSection 3.5.Figure 2 describes the architecture of argu-ment classification, which primarily involves thefollowing four components: (i) word-embeddinglearning, which reveals the embedding vectors ofwords in an unsupervised manner; (ii) lexical-levelfeature representation, which directly uses embed-ding vectors of words to capture lexical clues; (iii)sentence-level feature extraction, which proposesa DMCNN to learn the compositional semanticfeatures of sentences; and (iv) argument classi-fier output, which calculates a confidence score foreach argument role candidate.3.1 Word Embedding Learning andLexical-Level Feature RepresentationLexical-level features serve as important clues forevent extraction (Hong et al, 2011; Li et al,2013).
Traditional lexical-level features primar-ily include lemma, synonyms and POS tag of thecandidate words.
The quality of such featuresdepends strongly on the results of existing NLPtools and human ingenuity.
Additionally, the tra-ditional features remain unsatisfactory for captur-ing the semantics of words, which are importantin event extraction, as showed in S1 and S2.
AsErhan et al (2010) reported, word embeddingslearned from a significant amount of unlabeleddata are more powerful for capturing the mean-ingful semantic regularities of words.
This paperuses unsupervised pre-trained word embedding asthe source of base features.
We select the wordembeddings of candidate words (candidate trigger,candidate argument) and the context tokens (leftand right tokens of the candidate words).
Then, allof these word embeddings are concatenated intothe lexical-level features vector L to represent thelexical-level features in argument classification.In this work, we use the Skip-gram model topre-train the word embedding.
This model is thestate-of-the-art model in many NLP tasks (Baroniet al, 2014).
The Skip-gram model trains theembeddings of words w1, w2...wmby maximizingthe average log probability,1mm?t=1?
?c?j?c,j 6=0log p(wt+j|wt) (1)where c is the size of the training window.
Basi-cally, p(wt+j|wt) is defined as,p(wt+j|wt) =exp(e?Tt+jet)?mw=1exp(e?Twet)(2)wherem is the vocabulary of the unlabeled text.
e?iis another embedding for ei, see Morin and Bengio(2005) for details.169...adiedwhenanAmericantankon...Sentence Feature InputConvolutional Dynamic Multi-poolingFeature map 1Feature map 2Feature map 311max(c )12max(c )13max(c )Embedding LearningLexical Level Feature RepresentationClassifier OutputCWFPF EF......Sentence Level Feature ExtractionFigure 2: The architecture for the stage of argument classification in the event extraction.
It illustratesthe processing of one instance with the predict trigger fired and the candidate argument cameraman.3.2 Extracting Sentence-Level FeaturesUsing a DMCNNThe CNN, with max-pooling layers, is a goodchoice to capture the semantics of long-distancewords within a sentence (Collobert et al, 2011).However, as noted in the section 1, traditionalCNN is incapable of addressing the event extrac-tion problem.
Because a sentence may containmore than one event, using only the most impor-tant information to represent a sentence, as in thetraditional CNN, will miss valuable clues.
To re-solve this problem, we propose a DMCNN to ex-tract the sentence-level features.
The DMCNNuses a dynamic multi-pooling layer to obtain amaximum value for each part of a sentence, whichis split by event triggers and event arguments.Thus, the DMCNN is expected to capture morevaluable clues compared to traditional CNN meth-ods.3.2.1 InputThis subsection illustrates the input needed for aDMCNN to extract sentence-level features.
Thesemantic interactions between the predicted trig-ger words and argument candidates are crucial forargument classification.
Therefore, we proposethree types of input that the DMCNN uses to cap-ture these important clues:?
Context-word feature (CWF): Similar toKalchbrenner et al (2014) and Collobert etal.
(2011), we take all the words of the wholesentence as the context.
CWF is the vector ofeach word token transformed by looking upword embeddings.?
Position feature (PF): It is necessary to spec-ify which words are the predicted trigger orcandidate argument in the argument classi-fication.
Thus, we proposed the PF, whichis defined as the relative distance of the cur-rent word to the predicted trigger or candidateargument.
For example, in S3, the relativedistances of tank to the candidate argumentcameraman is 5.
To encode the position fea-ture, each distance value is also representedby an embedding vector.
Similar to word em-bedding, Distance Values are randomly ini-tialized and optimized through back propaga-tion.?
Event-type feature (EF): The event type of acurrent trigger is valuable for argument clas-sification (Ahn, 2006; Hong et al, 2011; Liaoand Grishman, 2010; Li et al, 2013), so weencode event type predicted in the triggerclassification stage as an important clue forthe DMCNN, as in the PF.Figure 2 assumes that word embedding has sizedw= 4, position embedding has size dp= 1and event-type embedding has size de= 1.
Letxi?
Rdbe the d-dimensional vector representa-tion corresponding to the i-th word in the sentence,where d = dw+ dp?
2+ de.
A sentence of lengthn is represented as follows:x1:n= x1?
x2?
...?
xn(3)where ?
is the concatenation operator.
Thus,combined word embedding, position embeddingand event-type embedding transform an instanceas a matrix X ?
Rn?d.
Then, X is fed into theconvolution part.1703.2.2 ConvolutionThe convolution layer aims to capture the compo-sitional semantics of a entire sentence and com-press these valuable semantics into feature maps.In general, let xi:i+jrefer to the concatenation ofwords xi, xi+1, ..., xi+j.
A convolution operationinvolves a filter w ?
Rh?d, which is applied to awindow of h words to produce a new feature.
Forexample, a feature ciis generated from a windowof words xi:i+h?1by the following operator,ci= f(w ?
xi:i+h?1+ b) (4)where b ?
R is a bias term and f is a non-linearfunction such as the hyperbolic tangent.
This fil-ter is applied to each possible window of words inthe sentence x1:h, x2:h+1, ..., xn?h+1:nto producea feature map ciwhere the index i ranges from 1to n?
h+ 1.We have described the process of how one fea-ture map is extracted from one filter.
To capturedifferent features, it usually use multiple filters inthe convolution.
Assuming that we use m filtersW = w1, w2, ..., wm, the convolution operationcan be expressed as:cji= f(wj?
xi:i+h?1+ bj) (5)where j ranges from 1 tom.
The convolution resultis a matrix C ?
Rm?
(n?h+1).3.2.3 Dynamic Multi-PoolingTo extract the most important features (max value)within each feature map, traditional CNNs (Col-lobert et al, 2011; Kim, 2014; Zeng et al, 2014)take one feature map as a pool and only get onemax value for each feature map.
However, sin-gle max-pooling is not sufficient for event extrac-tion.
Because in the task of this paper, one sen-tence may contain two or more events, and oneargument candidate may play a different role witha different trigger.
To make an accurate predic-tion, it is necessary to capture the most valuableinformation with regard to the change of the can-didate words.
Thus, we split each feature mapinto three parts according to the candidate argu-ment and predicted trigger in the argument clas-sification stage.
Instead of using one max valuefor an entire feature map to represent the sen-tence, we keep the max value of each split part andcall it dynamic multi-pooling.
Compared to tra-ditional max-pooling, dynamic multi-pooling canreserve more valuable information without miss-ing the max-pooling value.As shown in Figure 2, the feature map output cjis divided into three sections cj1, cj2, cj3by ?cam-eraman?
and ?fired?.
The dynamic multi-poolingcan be expressed as formula 6,where 1 ?
j ?
mand 1 ?
i ?
3.pji= max(cji) (6)Through the dynamic multi-pooling layer, weobtain the pjifor each feature map.
Then, weconcatenate all pjito form a vector P ?
R3m,which can be considered as higher-level features(sentence-level features).3.3 OutputThe automatically learned lexical and sentence-level features mentioned above are concatenatedinto a single vector F = [L,P ].
To compute theconfidence of each argument role, the feature vec-tor F ?
R3m+dl, where m is the number of thefeature map and dlis the dimension of the lexical-level features, is fed into a classifier.O = WsF + bs(7)Ws?
Rn1?
(3m+dl)is the transformation ma-trix and O ?
Rn1is the final output of the net-work, where n1is equal to the number of the ar-gument role including the ?None role?
label forthe candidate argument which don?t play any rolein the event.
For regularization, we also employdropout(Hinton et al, 2012) on the penultimatelayer, which can prevent the co-adaptation of hid-den units by randomly dropping out a proportion pof the hidden units during forward and backprop-agation.3.4 TrainingWe define all of the parameters for the stageof argument classification to be trained as ?
=(E,PF1, PF2, EF,W, b,WS, bs).
Specifically, Eis the word embedding, PF1and PF2are the posi-tion embedding,EF is the embedding of the eventtype, W and b are the parameter of the filter, Wsand bsare all of the parameters of the output layer.Given an input example s, the network with pa-rameter ?
outputs the vector O, where the i-thcomponentOicontains the score for argument rolei.
To obtain the conditional probability p(i|x, ?
),we apply a softmax operation over all argument171role types:p(i|x, ?)
=eoin1?k=1eok(8)Given all of our (suppose T) training examples(xi; yi), we can then define the objective functionas follows:J (?)
=T?i=1log p(y(i)|x(i), ?)
(9)To compute the network parameter ?, we max-imize the log likelihood J (?)
through stochasticgradient descent over shuffled mini-batches withthe Adadelta (Zeiler, 2012) update rule.3.5 Model for Trigger ClassificationIn the above sections, we presented our model andfeatures for argument classification.
The methodproposed above is also suitable for trigger classi-fication, but the task only need to find triggers inthe sentence, which is less complicated than argu-ment classification.
Thus we can used a simplifiedversion of DMCNN.In the trigger classification, we only use the can-didate trigger and its left and right tokens in thelexical-level feature representation.
In the featurerepresentation of the sentence level, we use thesame CWF as does in argument classification, butwe only use the position of the candidate trigger toembed the position feature.
Furthermore, insteadof splitting the sentence into three parts, the sen-tence is split into two parts by a candidate trigger.Except for the above change in the features andmodel, we classify a trigger as the classification ofan argument.
Both stages form the framework ofthe event extraction.4 Experiments4.1 Dataset and Evaluation MetricWe utilized the ACE 2005 corpus as our dataset.For comparison, as the same as Li et al (2013),Hong et al (2011) and Liao and Grishman (2010),we used the same test set with 40 newswire articlesand the same development set with 30 other docu-ments randomly selected from different genres andthe rest 529 documents are used for training.
Sim-ilar to previous work (Li et al, 2013; Hong et al,2011; Liao and Grishman, 2010; Ji and Grishman,2008), we use the following criteria to judge thecorrectness of each predicted event mention:?
A trigger is correct if its event subtype andoffsets match those of a reference trigger.?
An argument is correctly identified if its eventsubtype and offsets match those of any of thereference argument mentions.?
An argument is correctly classified if its eventsubtype, offsets and argument role matchthose of any of the reference argument men-tions.Finally we use Precision (P ), Recall (R) and Fmeasure (F1) as the evaluation metrics.4.2 Our Method vs.
State-of-the-art MethodsWe select the following state-of-the-art methodsfor comparison.1) Li?s baseline is the feature-based system pro-posed by Li et al (2013), which only employshuman-designed lexical features, basic featuresand syntactic features.2) Liao?s cross-event is the method proposed byLiao and Grishman (2010), which uses document-level information to improve the performance ofACE event extraction.3) Hong?s cross-entity is the method proposed byHong et al (2011), which extracts event by usingcross-entity inference.
To the best of our knowl-edge, it is the best-reported feature-based systemin the literature based on gold standards argumentcandidates.4) Li?s structure is the method proposed by Li etal.
(2013), which extracts events based on struc-ture prediction.
It is the best-reported structure-based system.Following Li et al (2013), we tuned themodel parameters on the development throughgrid search.
Moreover, in different stages of eventextraction, we adopted different parameters in theDMCNN.
Specifically, in the trigger classification,we set the window size as 3, the number of thefeature map as 200, the batch size as 170 and thedimension of the PF as 5.
In the argument classi-fication, we set the window size as 3, the numberof the feature map as 300, the batch size as 20 andthe dimension of the PF and EF as 5.
Stochasticgradient descent over shuffled mini-batches withthe Adadelta update rule(Zeiler, 2012) is used fortraining and testing processes.
It mainly containstwo parameters p and ?.
We set p = 0.95 and?
= 1e?6.
For the dropout operation, we set the172MethodsTriggerIdentification(%)Trigger Identification+ Classification(%)ArgumentIdentification(%)ArgumentRole(%)P R F P R F P R F P R FLi?s baseline 76.2 60.5 67.4 74.5 59.1 65.9 74.1 37.4 49.7 65.4 33.1 43.9Liao?s cross-event N/A 68.7 68.9 68.8 50.9 49.7 50.3 45.1 44.1 44.6Hong?s cross-entity N/A 72.9 64.3 68.3 53.4 52.9 53.1 51.6 45.5 48.3Li?s structure 76.9 65.0 70.4 73.7 62.3 67.5 69.8 47.9 56.8 64.7 44.4 52.7DMCNN model 80.4 67.7 73.5 75.6 63.6 69.1 68.8 51.9 59.1 62.2 46.9 53.5Table 1: Overall performance on blind test datarate = 0.5.
We train the word embedding usingthe Skip-gram algorithm2on the NYT corpus3.Table 1 shows the overall performance on theblind test dataset.
From the results, we can seethat the DMCNN model we proposed with theautomatically learned features achieves the bestperformance among all of the compared meth-ods.
DMCNN can improve the best F1(Li etal., 2013) in the state-of-the-arts for trigger clas-sification by 1.6% and argument role classifica-tion by 0.8%.
This demonstrates the effective-ness of the proposed method.
Moreover, a com-parison of Liao?s cross-event with Li?s baseline il-lustrates that Liao?s cross-event achieves a betterperformance.
We can also make the same obser-vation when comparing Hong?s cross-entity withLiao?s cross-event and comparing Li?s structurewith Hong?s cross-entity.
It proves that richerfeature sets lead to better performance when us-ing traditional human-designed features.
How-ever, our method could obtain further better re-sults on the condition of only using automaticallylearned features from original words.
Specifically,compared to Hong?s cross-entity, it gains 0.8% im-provement on trigger classification F1and 5.2%improvement on argument classification F1.
Webelieve the reason is that the features we automati-cally learned can capture more meaningful seman-tic regularities of words.
Remarkably, comparedto Li?s structure, our approach with sentence andlexical features achieves comparable performanceeven though we do not use complicated NLP tools.4.3 Effect of The DMCNN on ExtractingSentence-Level FeaturesIn this subsection, we prove the effectiveness ofthe proposed DMCNN for sentence-level featureextraction.
We specifically select two methods asbaselines for comparison with our DMCNN: Em-beddings+T and CNN.
Embeddings+T uses word2https://code.google.com/p/word2vec/3https://catalog.ldc.upenn.edu/LDC2008T19embeddings as lexical-level features and tradi-tional sentence-level features based on human de-sign (Li et al, 2013).
A CNN is similar to aDMCNN, except that it uses a standard convolu-tional neural network with max-pooling to capturesentence-level features.
By contrast, a DMCNNuses the dynamic multi-pooling layer in the net-work instead of the max-pooling layer in a CNN.Moreover, to prove that a DMCNN could capturemore precise sentence-level features, especiallyfor those sentences with multiple events, we dividethe testing data into two parts according the eventnumber in a sentence (single event and multipleevents) and perform evaluations separately.
Table2 shows the proportion of sentences with multipleevents or a single event and the proportion of argu-ments that attend one event or more events withinone sentence in our dataset.
Table 3 shows the re-sults.Stage 1/1 (%) 1/N (%)Trigger 72.7 27.3Argument 76.8 23.2Table 2: The proportion of multiple events withinone sentence.
1/1 means that one sentence onlyhas one trigger or one argument plays a role in onesentence; otherwise, 1/N is used.Table 3 illustrates that the methods based onconvolutional neural networks (CNN and DM-CNN) outperform Embeddings+T.
It proves thatconvolutional neural networks could be more ef-fective than traditional human-design strategiesfor sentence-level feature extraction.
In table 3, forall sentences, our method achieves improvementsof approximately 2.8% and 4.6% over the CNN.The results prove the effectiveness of the dynamicmulti-pooling layer.
Interestingly, the DMCNNyields a 7.8% improvement for trigger classifica-tion on the sentences with multiple events.
Thisimprovement is larger than in sentences with a sin-gle event.
Similar observations can be made for173the argument classification results.
This demon-strates that the proposed DMCNN can effectivelycapture more valuable clues than the CNN withmax-pooling, especially when one sentence con-tains more than one event.Stage Method1/1 1/N allF1F1F1TriggerEmbedding+T 68.1 25.5 59.8CNN 72.5 43.1 66.3DMCNN 74.3 50.9 69.1ArgumentEmbedding+T 37.4 15.5 32.6CNN 51.6 36.6 48.9DMCNN 54.6 48.7 53.5Table 3: Comparison of the event extraction scoresobtained for the Traditional, CNN and DMCNNmodels4.4 Effect of Word Embedding on ExtractingLexical-Level FeaturesThis subsection studies the effectiveness of ourword embedding for lexical features.
For compar-ison purposes, we select the baseline described byLi et al (2013) as the traditional method, whichuses traditional lexical features, such as n-grams,POS tags and some entity information.
In con-trast, we only use word embedding as our lexicalfeature.
Moreover, to prove that word embeddingcould capture more valuable semantics, especiallyfor those words in the test data that never appearto be the same event type or argument role in thetraining data, we divide the triggers and argumentsin the testing data into two parts (1: appearing intesting data only, or 2: appearing in both testingand training data with the same event type or argu-ment role) and perform evaluations separately.
Fortriggers, 34.9% of the trigger words in the test datanever appear to be the same event type in the train-ing data.
This proportion is 83.1% for arguments.The experimental results are shown in Table 4.Table 4 illustrates that for all situations, ourmethod makes significant improvements com-pared with the traditional lexical features in theclassification of both the trigger and argument.For situation B, the lexical-level features extractedfrom word embedding yield a 18.8% improvementfor trigger classification and an 8.5% improvementfor argument classification.
This occurs becausethe baseline only uses discrete features, so theysuffer from data sparsity and could not adequatelyhandle a situation in which a trigger or argumentdoes not appear in the training data.Stage MethodA B AllF1F1F1TriggerTraditional 68.8 14.3 61.2Ours 70.7 33.1 64.9ArgumentTraditional 58.5 22.2 34.6Ours 59.5 30.7 40.2Table 4: Comparison of the results for the tradi-tional lexical feature and our lexical feature.
A de-notes the triggers or arguments appearing in bothtraining and test datasets, and B indicates all othercases.4.5 Lexical features vs.
Sentence FeaturesTo compare the effectiveness of different levels offeatures, we extract events by using lexical fea-tures and sentence features separately.
The resultsobtained using the DMCNN are shown in table5.
Interestingly, in the trigger-classification stage,the lexical features play an effective role, whereasthe sentence features play a more important role inthe argument-classification stage.
The best resultsare achieved when we combine lexical-level andsentence-level features.
This observation demon-strates that both of the two-level features are im-portant for event extraction.FeatureTrigger ArgumentF1F1Lexical 64.9 40.2Sentence 63.8 50.7Combine 69.1 53.5Table 5: Comparison of the trigger-classificationscore and argument-classification score obtainedby lexical-level features, sentence-level featuresand a combination of both5 Related WorkEvent extraction is one of important topics in NLP.Many approaches have been explored for event ex-traction.
Nearly all of the ACE event extractionuse supervised paradigm.
We further divide super-vised approaches into feature-based methods andstructure-based methods.In feature-based methods, a diverse set of strate-gies has been exploited to convert classificationclues (such as sequences and parse trees) intofeature vectors.
Ahn (2006) uses the lexicalfeatures(e.g., full word, pos tag), syntactic fea-tures (e.g., dependency features) and external-knowledge features(WordNet) to extract the event.Inspired by the hypothesis of ?One Sense Per Dis-174course?
(Yarowsky, 1995), Ji and Grishman (2008)combined global evidence from related documentswith local decisions for the event extraction.
Tocapture more clues from the texts, Gupta and Ji(2009), Liao and Grishman (2010) and Hong et al(2011) proposed the cross-event and cross-entityinference for the ACE event task.
Although theseapproaches achieve high performance, feature-based methods suffer from the problem of select-ing a suitable feature set when converting the clas-sification clues into feature vectors.In structure-based methods, researchers treatevent extraction as the task of predicting the struc-ture of the event in a sentence.
McClosky et al(2011) casted the problem of biomedical event ex-traction as a dependency parsing problem.
Li etal.
(2013) presented a joint framework for ACEevent extraction based on structured perceptronwith beam search.
To use more information fromthe sentence, Li et al (2014) proposed to extractentity mentions, relations and events in ACE taskbased on the unified structure.
These methodsyield relatively high performance.
However, theperformance of these methods depend strongly onthe quality of the designed features and endure theerrors in the existing NLP tools.6 ConclusionThis paper proposes a novel event extractionmethod, which can automatically extract lexical-level and sentence-level features from plain textswithout complicated NLP preprocessing.
A word-representation model is introduced to capture lex-ical semantic clues and a dynamic multi-poolingconvolutional neural network (DMCNN) is de-vised to encode sentence semantic clues.
The ex-perimental results prove the effectiveness of theproposed method.AcknowledgmentsThis work was supported by the National BasicResearch Program of China (No.
2014CB340503)and the National Natural Science Foundation ofChina (No.
61272332 and No.
61202329)ReferencesDavid Ahn.
2006.
The stages of event extraction.
InProceedings of ACL, pages 1?8.Marco Baroni, Georgiana Dinu, and Germ?anKruszewski.
2014.
Dont count, predict!
asystematic comparison of context-counting vs.context-predicting semantic vectors.
In Proceedingsof ACL, pages 238?247.Yoshua Bengio, R?ejean Ducharme, Pascal Vincent, andChristian Jauvin.
2003.
A neural probabilistic lan-guage model.
The Journal of Machine Learning Re-search, 3:1137?1155.Chen Chen and V Incent NG.
2012.
Joint modeling forchinese event extraction with rich linguistic features.In Proceedings of COLING, pages 529?544.Ronan Collobert, Jason Weston, L?eon Bottou, MichaelKarlen, Koray Kavukcuoglu, and Pavel Kuksa.2011.
Natural language processing (almost) fromscratch.
The Journal of Machine Learning Re-search, 12:2493?2537.Dumitru Erhan, Yoshua Bengio, Aaron Courville,Pierre-Antoine Manzagol, Pascal Vincent, and SamyBengio.
2010.
Why does unsupervised pre-traininghelp deep learning?
The Journal of Machine Learn-ing Research, 11:625?660.Prashant Gupta and Heng Ji.
2009.
Predicting un-known time arguments based on cross-event propa-gation.
In Proceedings of ACL-IJCNLP, pages 369?372.Geoffrey E Hinton, Nitish Srivastava, Alex Krizhevsky,Ilya Sutskever, and Ruslan R Salakhutdinov.
2012.Improving neural networks by preventing co-adaptation of feature detectors.
arXiv preprintarXiv:1207.0580.Yu Hong, Jianfeng Zhang, Bin Ma, Jianmin Yao,Guodong Zhou, and Qiaoming Zhu.
2011.
Usingcross-entity inference to improve event extraction.In Proceedings of ACL-HLT, pages 1127?1136.Heng Ji and Ralph Grishman.
2008.
Refining event ex-traction through cross-document inference.
In Pro-ceedings of ACL, pages 254?262.Nal Kalchbrenner and Phil Blunsom.
2013.
Recurrentconvolutional neural networks for discourse compo-sitionality.
arXiv preprint arXiv:1306.3584.Nal Kalchbrenner, Edward Grefenstette, and PhilBlunsom.
2014.
A convolutional neural net-work for modelling sentences.
arXiv preprintarXiv:1404.2188.Yoon Kim.
2014.
Convolutional neural net-works for sentence classification.
arXiv preprintarXiv:1408.5882.Siwei Lai, Liheng Xu, Kang Liu, and Jun Zhao.
2015.Recurrent convolutional neural networks for textclassification.
In Proceedings of AAAI.Qi Li, Heng Ji, and Liang Huang.
2013.
Joint eventextraction via structured prediction with global fea-tures.
In Proceedings of ACL, pages 73?82.175Qi Li, Heng Ji, Yu Hong, and Sujian Li.
2014.Constructing information networks using one sin-gle model.
In Proceedings of EMNLP, pages 1846?1851.Shasha Liao and Ralph Grishman.
2010.
Using doc-ument level cross-event inference to improve eventextraction.
In Proceedings of ACL, pages 789?797.David McClosky, Mihai Surdeanu, and Christopher DManning.
2011.
Event extraction as dependencyparsing.
In Proceedings of ACL-HLT, pages 1626?1635.Tomas Mikolov, Kai Chen, Greg Corrado, and Jef-frey Dean.
2013a.
Efficient estimation of wordrepresentations in vector space.
arXiv preprintarXiv:1301.3781.Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-rado, and Jeff Dean.
2013b.
Distributed representa-tions of words and phrases and their compositional-ity.
In Proceedings of NIPS, pages 3111?3119.Frederic Morin and Yoshua Bengio.
2005.
Hierarchi-cal probabilistic neural network language model.
InProceedings of AISTATS, pages 246?252.Joseph Turian, Lev Ratinov, and Yoshua Bengio.
2010.Word representations: a simple and general methodfor semi-supervised learning.
In Proceedings ofACL, pages 384?394.David Yarowsky.
1995.
Unsupervised word sense dis-ambiguation rivaling supervised methods.
In Pro-ceedings of ACL, pages 189?196.Matthew D Zeiler.
2012.
Adadelta: An adaptive learn-ing rate method.
arXiv preprint arXiv:1212.5701.Daojian Zeng, Kang Liu, Siwei Lai, Guangyou Zhou,and Jun Zhao.
2014.
Relation classification via con-volutional deep neural network.
In Proceedings ofCOLING, pages 2335?2344.176
