Topological Dependency Trees:A Constraint-Based Account of Linear PrecedenceDenys DuchierProgramming Systems LabUniversita?t des Saarlandes, Geb.
45Postfach 15 11 5066041 Saarbru?cken, Germanyduchier@ps.uni-sb.deRalph DebusmannComputational LinguisticsUniversita?t des Saarlandes, Geb.
17Postfach 15 11 5066041 Saarbru?cken, Germanyrade@coli.uni-sb.deAbstractWe describe a new framework for de-pendency grammar, with a modular de-composition of immediate dependencyand linear precedence.
Our approachdistinguishes two orthogonal yet mutu-ally constraining structures: a syntacticdependency tree and a topological de-pendency tree.
The syntax tree is non-projective and even non-ordered, whilethe topological tree is projective andpartially ordered.1 IntroductionLinear precedence in so-called free word orderlanguages remains challenging for modern gram-mar formalisms.
To address this issue, we pro-pose a new framework for dependency gram-mar which supports the modular decompositionof immediate dependency and linear precedence.Duchier (1999) formulated a constraint-based ax-iomatization of dependency parsing which char-acterized well-formed syntax trees but ignored is-sues of word order.
In this article, we develop acomplementary approach dedicated to the treat-ment of linear precedence.Our framework distinguishes two orthogonal,yet mutually constraining structures: a syntacticdependency tree (ID tree) and a topological de-pendency tree (LP tree).
While edges of the IDtree are labeled by syntactic roles, those of theLP tree are labeled by topological fields (Bech,1955).
The shape of the LP tree is a flattening ofthe ID tree?s obtained by allowing nodes to ?climbup?
to land in an appropriate field at a host nodewhere that field is available.
Our theory of ID/LPtrees is formulated in terms of (a) lexicalized con-straints and (b) principles governing e.g.
climbingconditions.In Section 2 we discuss the difficulties pre-sented by discontinuous constructions in freeword order languages, and briefly touch on thelimitations of Reape?s (1994) popular theory of?word order domains?.
In Section 3 we introducethe concept of topological dependency tree.
InSection 4 we outline the formal framework forour theory of ID/LP trees.
Finally, in Section 5we illustrate our approach with an account of theword-order phenomena in the verbal complex ofGerman verb final sentences.2 Discontinuous ConstructionsIn free word order languages, discontinuous con-structions occur frequently.
German, for example,is subject to scrambling and partial extraposition.In typical phrase structure based analyses, suchphenomena lead to e.g.
discontinuous VPs:(1) (dass)(that)einenaMannmanaccMariaMarianomzutoliebenloveversuchttrieswhose natural syntax tree exhibits crossing edges:SNP VVPNP VDET N(dass) einen Mann Maria zu lieben versuchtSince this is classically disallowed, discontinu-ous constituents must often be handled indirectlythrough grammar extensions such as traces.Reape (1994) proposed the theory of word or-der domains which became quite popular in theHPSG community and inspired others such asMu?ller (1999) and Kathol (2000).
Reape distin-guished two orthogonal tree structures: (a) the un-ordered syntax tree, (b) the totally ordered tree ofword order domains.
The latter is obtained fromthe syntax tree by flattening using the operationof domain union to produce arbitrary interleav-ings.
The boolean feature [??]
of each node con-trols whether it must be flattened out or not.
In-finitives in canonical position are assigned [?+]:(dass)SNPMariaVP[?+]NP[??
]DETeinenNMannVzu liebenVversuchtThus, the above licenses the following tree ofword order domains:(dass)SNPDETeinenNMannNPMariaVzu liebenVversuchtExtraposed infinitives are assigned [??]:(dass)SNPMariaVversuchtVP[??
]NPDETeinenNMannVzu liebenAs a consequence, Reape?s theory correctly pre-dicts scrambling (2,3) and full extraposition (4),but cannot handle the partial extraposition in (5):(2) (dass) Maria einen Mann zu lieben versucht(3) (dass) einen Mann Maria zu lieben versucht(4) (dass) Maria versucht, einen Mann zu lieben(5) (dass) Maria einen Mann versucht, zu lieben3 Topological Dependency TreesOur approach is based on dependency grammar.We also propose to distinguish two structures: (a)a tree of syntactic dependencies, (b) a tree of topo-logical dependencies.
The syntax tree (ID tree) isunordered and non-projective (i.e.
it admits cross-ing edges).
For display purposes, we pick an ar-bitrary linear arrangement:(dass) Maria einen Mann zu lieben versuchtdetobject zuvinfsubjectThe topological tree (LP tree) is partially orderedand projective:(dass) Maria einen Mann zu lieben versuchtndn vvdfmfmf vcIts edge labels are called (external) fields and aretotally ordered: df ?
mf ?
vc.
This induces alinear precedence among the daughters of a nodein the LP tree.
This precedence is partial becausedaughters with the same label may be freely per-muted.In order to obtain a linearization of a LP tree,it is also necessary to position each node withrespect to its daughters.
For this reason, eachnode is also assigned an internal field (d, n, or v)shown above on the vertical pseudo-edges.
Theset of internal and external fields is totally or-dered: d ?
df ?
n ?
mf ?
vc ?
vLike Reape, our LP tree is a flattened version ofthe ID tree (Reape, 1994; Uszkoreit, 1987), butthe flattening doesn?t happen by ?unioning up?
;rather, we allow each individual daughter to climbup to find an appropriate landing place.
This ideais reminiscent of GB, but, as we shall see, pro-ceeds rather differently.4 Formal FrameworkThe framework underlying both ID and LP treesis the configuration of labeled trees under valency(and other) constraints.
Consider a finite set Lof edge labels, a finite set V of nodes, and E ?V ?
V ?
L a finite set of directed labeled edges,such that (V,E) forms a tree.
We write w??
?`w?for an edge labeled ` from w to w?.
We define the`-daughters `(w) of w ?
V as follows:`(w) = {w?
?
V | w???`w?
?
E}We write L?
for the set of valency specifications ?`defined by the following abstract syntax:?` ::= ` | `?
| `?
(` ?
L)A valency is a subset of L?.
The tree (V,E) satis-fies the valency assignment valency : V ?
2L?
iffor all w ?
V and all ` ?
L:` ?
valency(w) ?
|`(w)| = 1`?
?
valency(w) ?
|`(w)| ?
1`?
?
valency(w) ?
|`(w)| ?
0otherwise ?
|`(w)| = 04.1 ID TreesAn ID tree (V,EID, lex, cat, valencyID) consistsof a tree (V,EID) with EID ?
V ?
V ?R, wherethe set R of edge labels (Figure 1) represents syn-tactic roles such as subject or vinf (bare infinitiveargument).
lex : V ?
Lexicon assigns a lexi-cal entry to each node.
An illustrative Lexicon isdisplayed in Figure 1 where the 2 features catsand valencyID of concern to ID trees are groupedunder table heading ?Syntax?.
Finally, cat andvalencyID assign a category and an R?
valency toeach node w ?
V and must satisfy:cat(w) ?
lex(w).catsvalencyID(w) = lex(w).valencyID(V,EID) must satisfy the valencyID assignment asdescribed earlier.
For example the lexical entryfor versucht specifies (Figure 1):valencyID(versucht) = {subject, zuvinf}Furthermore, (V,EID) must also satisfy theedge constraints stipulated by the grammar(see Figure 1).
For example, for an edgew????
?det w?
to be licensed, w?
must be assignedcategory det and both w and w?
must be assignedthe same agreement.14.2 LP TreesAn LP tree (V,ELP, lex, valencyLP, fieldext, fieldint)consists of a tree (V,ELP) with ELP ?V ?
V ?
Fext, where the set Fext of edgelabels represents topological fields (Bech, 1955):df the determiner field, mf the ?Mittelfeld?, vc1Issues of agreement will not be further considered in thispaper.the verbal complement field, xf the extrapositionfield.
Features of lexical entries relevant to LPtrees are grouped under table heading ?Topology?in Figure 1. valencyLP assigns a F?ext valencyto each node and is subject to the lexicalizedconstraint:valencyLP(w) = lex(w).valencyLP(V,ELP) must satisfy the valencyLP assignmentas described earlier.
For example, the lexical en-try for zu lieben2 specifies:valencyLP(zu lieben2) = {mf?, xf?
}which permits 0 or more mf edges and at mostone xf edge; we say that it offers fields mf and xf.Unlike the ID tree, the LP tree must be projective.The grammar stipulates a total order on Fext,thus inducing a partial linear precedence on eachnode?s daughters.
This order is partial becauseall daughters in the same field may be freely per-muted: our account of scrambling rests on freepermutations within the mf field.
In order to ob-tain a linearization of the LP tree, it is necessaryto specify the position of a node with respect to itsdaughters.
For this reason each node is assignedan internal field in Fint.
The set Fext ?
Fint is to-tally ordered:d ?
df ?
n ?
mf ?
vc ?
v ?
xfIn what (external) field a node may land andwhat internal field it may be assigned is deter-mined by assignments fieldext : V ?
Fext andfieldint : V ?
Fint which are subject to the lexi-calized constraints:fieldext(w) ?
lex(w).fieldextfieldint(w) ?
lex(w).fieldintFor example, zu lieben1 may only land in field vc(canonical position), and zu lieben2 only in xf (ex-traposed position).
The LP tree must satisfy:w???`w?
?
ELP ?
` = fieldext(w?
)Thus, whether an edge w???`w?
is licensed de-pends both on valencyLP(w) and on fieldext(w?
).In other words: w must offer field ` and w?
mustaccept it.For an edge w???`w?
in the ID tree, we say thatw is the head of w?.
For a similar edge in the LPGrammar SymbolsC = {det , n, vfin, vinf , vpast, zuvinf} (Categories)R = {det, subject, object, vinf, vpast, zuvinf} (Syntactic Roles)Fext = {df, mf, vc, xf} (External Topological Fields)Fint = {d, n, v} (Internal Topological Fields)d ?
df ?
n ?
mf ?
vc ?
v ?
xf (Topological Ordering)Edge Constraintsw????????
?det w?
?
cat(w?)
= det ?
agr(w) = agr(w?)w????????
?subject w?
?
cat(w?)
= n ?
agr(w) = agr(w?)
?
NOMw????????
?object w?
?
cat(w?)
= n ?
agr(w?)
?
ACCw????????
?vinf w?
?
cat(w?)
= vinfw????????
?vpast w?
?
cat(w?)
= vpastw????????
?zuvinf w?
?
cat(w?)
= zuvinfLexiconWord Syntax Topologycats valencyID fieldint fieldext valencyLPeinen {det} {} {d} {df} {}Mann {n} {det} {n} {mf} {df?
}Maria {n} {} {n} {mf} {}lieben {vinf} {object?}
{v} {vc} {}geliebt {vpast} {object?}
{v} {vc} {}ko?nnen1 {vinf} {vinf} {v} {vc} {vc?
}ko?nnen2 {vinf , vpast} {vinf} {v} {xf} {mf?, vc?, xf?
}wird {vfin} {subject, vinf} {v} {vc} {mf?, vc?, xf?
}haben {vinf} {vpast} {v} {xf} {mf?, vc?, xf?
}hat {vinf} {subject, vpast} {v} {vc} {mf?, vc?, xf?
}zu lieben1 {zuvinf} {object?}
{v} {vc} {}zu lieben2 {zuvinf} {object?}
{v} {xf} {mf?, xf?
}versucht {vfin} {subject, zuvinf} {v} {vc} {mf?, vc?, xf?
}Figure 1: Grammar Fragmenttree, we say that w is the host of w?
or that w?lands on w. The shape of the LP tree is a flat-tened version of the ID tree which is obtained byallowing nodes to climb up subject to the follow-ing principles:Principle 1 a node must land on a transitivehead2Principle 2 it may not climb through a barrierWe will not elaborate the notion of barrier whichis beyond the scope of this article, but, for exam-ple, a noun will prevent a determiner from climb-ing through it, and finite verbs are typically gen-eral barriers.2This is Bro?cker?s terminology and means a node in thetransitive closure of the head relation.Principle 3 a node must land on, or climb higherthan, its headSubject to these principles, a node w?
may climbup to any host w which offers a field licensed byfieldext(w?).Definition.
An ID/ LP analysis is a tuple (V,EID, ELP, lex, cat, valencyID, valencyLP, fieldext,fieldint) such that (V,EID, lex, cat, valencyID) isan ID tree and (V,ELP, lex, valencyLP, fieldext,fieldint) is an LP tree and all principles are sat-isfied.Our approach has points of similarity with(Bro?ker, 1999) but eschews modal logic in fa-vor of a simpler and arguably more perspicuousconstraint-based formulation.
It is also relatedto the lifting rules of (Kahane et al, 1998), butwhere they choose to stipulate rules that licenseliftings, we opt instead for placing constraints onotherwise unrestricted climbing.5 German Verbal PhenomenaWe now illustrate our theory by applying it to thetreatment of word order phenomena in the verbalcomplex of German verb final sentences.
We as-sume the grammar and lexicon shown in Figure 1.These are intended purely for didactic purposesand we extend for them no claim of linguistic ad-equacy.5.1 VP ExtrapositionControl verbs like versuchen or versprechen al-low their zu-infinitival complement to be option-ally extraposed.
This phenomenon is also knownas optional coherence.
(6) (dass) Maria einen Mann zu lieben versucht(7) (dass) Maria versucht, einen Mann zu liebenBoth examples share the following ID tree:(dass) Maria einen Mann zu lieben versuchtdetobject zuvinfsubjectOptional extraposition is handled by having twolexical entries for zu lieben.
One requires it toland in canonical position:fieldext(zu lieben1) = {vc}the other requires it to be extraposed:fieldext(zu lieben2) = {xf}In the canonical case, zu lieben1 does not offerfield mf and einen Mann must climb to the finiteverb:(dass) Maria einen Mann zu lieben versuchtndn vvdfmfmf vcIn the extraposed case, zu lieben2 itself offersfield mf:(dass) Maria versucht einen Mann zu liebennvdnvmfdfmfxf5.2 Partial VP ExtrapositionIn example (8), the zu-infinitive zu lieben is extra-posed to the right of its governing verb versucht,but its nominal complement einen Mann remainsin the Mittelfeld:(8) (dass) Maria einen Mann versucht, zu liebenIn our account, Mann is restricted to land in an mffield which both extraposed zu lieben2 and finiteverb versucht offer.
In example (8) the nominalcomplement simply climbed up to the finite verb:(dass) Maria einen Mann versucht zu liebenndnvvmfdfmf xf5.3 Obligatory Head-final PlacementVerb clusters are typically head-final in German:non-finite verbs precede their verbal heads.
(9) (dass)(that)MariaMarianomeinenaMannmanaccliebenlovewirdwill(10)*(dass) Maria einen Mann wird liebenThe ID tree for (9) is:(dass) Maria einen Mann lieben wirdsubjectdetobjectvinfThe lexical entry for the bare infinitive lieben re-quires it to land in a vc field:fieldext(lieben) = {vc}therefore only the following LP tree is licensed:3(dass) Maria einen Mann lieben wirdndn vvmfdfmf vcwhere mf ?
vc ?
v, and subject and ob-ject, both in field mf, remain mutually unordered.Thus we correctly license (9) and reject (10).5.4 Optional Auxiliary FlipIn an auxiliary flip construction (Hinrichs andNakazawa, 1994), the verbal complement of anauxiliary verb, such as haben or werden, followsrather than precedes its head.
Only a certain classof bare infinitive verbs can land in extraposed po-sition.
As we illustrated above, main verbs donot belong to this class; however, modals such asko?nnen do, and may land in either canonical (11)or in extraposed (12) position.
This behavior iscalled ?optional auxiliary flip?.
(11) (dass)(that)MariaMariaeinenaMannmanliebenloveko?nnencanwirdwill(that) Maria will be able to love a man(12) (dass) Maria einen Mann wird lieben ko?nnenBoth examples share the following ID tree:(dass) Maria einen Mann wird lieben ko?nnensubjectdetobjectvinfvinfOur grammar fragment describes optional auxil-iary flip constructions in two steps:?
wird offers both vc and xf fields:valencyID(wird) = {mf?, vc?, xf?}?
ko?nnen has two lexical entries, one canonicaland one extraposed:fieldext(ko?nnen1) = {vc}fieldext(ko?nnen2) = {xf}3It is important to notice that there is no spurious ambi-guity concerning the topological placement of Mann: liebenin canonical position does not offer field mf; therefore Mannmust climb to the finite verb.Thus we correctly account for examples (11) and(12) with the following LP trees:(dass) Maria einen Mann lieben ko?nnen wirdndnvvvmfdfmfvcvc(dass) Maria einen Mann wird lieben ko?nnenndnvvvmfdfmfvcxfThe astute reader will have noticed that other LPtrees are licensed for the earlier ID tree: they areconsidered in the section below.5.5 V-Projection RaisingThis phenomenon related to auxiliary flip de-scribes the case where non-verbal material is in-terspersed in the verb cluster:(13) (dass) Maria wird einen Mann lieben ko?nnen(14)*(dass) Maria lieben einen Mann ko?nnen wird(15)*(dass) Maria lieben ko?nnen einen Mann wirdThe ID tree remains as before.
The NP einenMann must land in a mf field.
lieben is in canon-ical position and thus does not offer mf, butboth extraposed ko?nnen2 and finite verb wird do.Whereas in (12), the NP climbed up to wird, in(13) it climbs only up to ko?nnen.
(dass) Maria wird einen Mann lieben ko?nnennvdn vvmfdfmf vcxf(14) is ruled out because ko?nnen must be in thevc of wird, therefore lieben must be in the vcof ko?nnen, and einen Mann must be in the mf ofwird.
Therefore, einen Mann must precede bothlieben and ko?nnen.
Similarly for (15).5.6 Intermediate PlacementThe Zwischenstellung construction describescases where the auxiliary has been flipped but itsverbal argument remains in the Mittelfeld.
Theseare the remaining linearizations predicted by ourtheory for the running example started above:(16) (dass) Maria einen Mann lieben wird ko?nnen(17) (dass) einen Mann Maria lieben wird ko?nnenwhere lieben has climbed up to the finite verb.5.7 Obligatory Auxiliary FlipSubstitute infinitives (Ersatzinfinitiv) are furtherexamples of extraposed verbal forms.
A sub-stitute infinitive exhibits bare infinitival inflec-tion, yet acts as a complement of the perfectizerhaben, which syntactically requires a past partici-ple.
Only modals, AcI-verbs such as sehen andlassen, and the verb helfen can appear in substi-tute infinitival inflection.A substitute infinitive cannot land in canonicalposition; it must be extraposed: an auxiliary flipinvolving a substitute infinitive is called an ?oblig-atory auxiliary flip?.
(18) (dass)(that)MariaMariaeinenaMannmanhathasliebenloveko?nnencan(that) Maria was able to love a man(19) (dass) Maria hat einen Mann lieben ko?nnen(20)*(dass) Maria einen Mann lieben ko?nnen hatThese examples share the ID tree:(dass) Maria einen Mann hat lieben ko?nnensubjectdetobjectxvinfvinfhat subcategorizes for a verb in past participle in-flection because:valencyID(hat) = {subject, vpast}and the edge constraint for w?????
?vpast w?
requires:cat(w?)
= vpastThis is satisfied by ko?nnen2 which insists on beingextraposed, thus ruling (20) out:fieldext(ko?nnen2) = {xf}Example (18) has LP tree:(dass) Maria einen Mann hat lieben ko?nnenndnvvvmfdfmf xfvcIn (18) einen Mann climbs up to hat, while in (19)it only climbs up to ko?nnen.5.8 Double Auxiliary FlipDouble auxiliary flip constructions occur whenan auxiliary is an argument of another auxiliary.Each extraposed verb form offers both vc and mf:thus there are more opportunities for verbal andnominal arguments to climb to.
(21) (dass) Maria wird haben einen Mann liebenko?nnen(that) Maria will have been able to love a man(22) (dass) Maria einen Mann wird haben liebenko?nnen(23) (dass) Maria wird einen Mann lieben habenko?nnen(24) (dass) Maria einen Mann wird lieben habenko?nnen(25) (dass) Maria einen Mann lieben wird habenko?nnenThese examples have ID tree:Maria einen Mann wird haben lieben ko?nnensubjectdetobjectvinfvinfvpastand (22) obtains LP tree:Maria einen Mann wird haben lieben ko?nnenndnvvvvmfdfmf xfvcxf5.9 Obligatory CoherenceCertain verbs like scheint require their argumentto appear in canonical (or coherent) position.
(26) (dass)(that)MariaMariaeinenaMannmanzutoliebenlovescheintseems(that) Maria seems to love a man(27)*(dass) Maria einen Mann scheint, zu liebenObligatory coherence may be enforced with thefollowing constraint principle: if w is an obliga-tory coherence verb and w?
is its verbal argument,then w?
must land in w?s vc field.
Like barri-ers, the expression of this principle in our gram-matical formalism falls outside the scope of thepresent article and remains the subject of activeresearch.46 ConclusionsIn this article, we described a treatment of lin-ear precedence that extends the constraint-basedframework for dependency grammar proposed byDuchier (1999).
We distinguished two orthogo-nal, yet mutually constraining tree structures: un-ordered, non-projective ID trees which capturepurely syntactic dependencies, and ordered, pro-jective LP trees which capture topological depen-dencies.
Our theory is formulated in terms of (a)lexicalized constraints and (b) principles whichgovern ?climbing?
conditions.We illustrated this theory with an application tothe treatment of word order phenomena in the ver-bal complex of German verb final sentences, anddemonstrated that these traditionally challengingphenomena emerge naturally from our simple andelegant account.Although we provided here an account spe-cific to German, our framework intentionally per-mits the definition of arbitrary language-specifictopologies.
Whether this proves linguistically ad-equate in practice needs to be substantiated in fu-ture research.Characteristic of our approach is that the for-mal presentation defines valid analyses as the so-lutions of a constraint satisfaction problem whichis amenable to efficient processing through con-straint propagation.
A prototype was imple-mented in Mozart/Oz and supports a parsing4we also thank an anonymous reviewer for pointing outthat our grammar fragment does not permit intrapositionmode as well as a mode generating all licensedlinearizations for a given input.
It was used toprepare all examples in this article.While the preliminary results presented hereare encouraging and demonstrate the potential ofour approach to linear precedence, much work re-mains to be done to extend its coverage and toarrive at a cohesive and comprehensive grammarformalism.ReferencesGunnar Bech.
1955.
Studien u?ber das deutsche Ver-bum infinitum.
2nd unrevised edition published1983 by Max Niemeyer Verlag, Tu?bingen (Linguis-tische Arbeiten 139).Norbert Bro?ker.
1999.
Eine Dependenzgrammatikzur Kopplung heterogener Wissensquellen.
Lin-guistische Arbeiten 405.
Max Niemeyer Verlag,Tu?bingen/FRG.Denys Duchier.
1999.
Axiomatizing dependencyparsing using set constraints.
In Sixth Meeting onthe Mathematics of Language, Orlando/FL, July.Erhard Hinrichs and Tsuneko Nakazawa.
1994.
Lin-earizing AUXs in German verbal complexes.
InNerbonne et al (Nerbonne et al, 1994), pages 11?37.Sylvain Kahane, Alexis Nasr, and Owen Rambow.1998.
Pseudo-projectivity: a polynomially parsablenon-projective dependency grammar.
In Proc.ACL/COLING?98, pages 646?52, Montre?al.Andreas Kathol.
2000.
Linear Syntax.
Oxford Uni-versity Press.Igor Melc?uk.
1988.
Dependency Syntax: Theory andPractice.
The SUNY Press, Albany, N.Y.Stefan Mu?ller.
1999.
Deutsche Syntax deklara-tiv.
Head-Driven Phrase Structure Grammar fu?rdas Deutsche.
Linguistische Arbeiten 394.
MaxNiemeyer Verlag, Tu?bingen/FRG.John Nerbonne, Klaus Netter, and Carl Pollard, edi-tors.
1994.
German in Head-Driven Phrase Struc-ture Grammar.
CSLI, Stanford/CA.Mike Reape.
1994.
Domain union and word ordervariation in German.
In Nerbonne et al (Nerbonneet al, 1994), pages 151?197.Hans Uszkoreit.
1987.
Word Order and ConstituentStructure in German.
CSLI, Stanford/CA.
