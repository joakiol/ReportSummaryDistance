Parsing Plans Situation-Dependently in DialoguesKiyosh i  Kogure ,  Ak i ra  Sh imazu  and Mik io  NakanoNTT  Basic  Research  Laborator ies3-1 Mor inosato -Wakamiya ,  Atsugi ,  Kanagawa,  243-01.
Japan{kogure ,  sh imazu ,  nakano}@atom,  br l .
n t t .
jpAbstractThis paper describes a plan parsingmethod that can handle the effects andpreconditions of actions and that parsesplans in a manner dependent on dialoguestate changes, especially on the men-tal state changes of dialogue participantscaused by utterances.
This method isbased on active chart parsing and usesaugmented edge structures to keep stateinformation locally and time map man-agement o deal with state changes.
Ithas been implemented in Prolog and isused for plan recognition in dialogues.1 Int roduct ionDialogue understanding requires plan recognition.Many plan inference models have thus been pro-posed.
As an approach to the computation of planrecognition from observed actions, plan parsinghms been proposed by Sidner (1985) and formal-ized by Vilain (1990).
A typical plan recipe foran action includes a sequence of subactions as itsdecomposition, sointerpreting an action sequencein terms of plans can be seen as parsing in whichobserved actions correspond to lexieal tokens andplan recipes correspond to grammatical rules.Previous plan parsing methods, however, areinsufficient for dialogue understanding since theydo not handle the effects and preconditions of ac-tions.
These effects and preconditions are of cru-cial importance in reasoning about what the agentintends to do and what she presupposes.
Moreconcretely, without treating them, it is impossible(a) to describe actions in terms of their effects, (b)to capture the relationship between an action andanother action that satisfies the former's precon-ditions to enable it, and (c) to interpret actions ina manner dependent on the dialogue state.To solve these problems, we have developed aplan parsing method that can handle the effectsand preconditions of actions and that parses plansin a manner dependent on dialogue state changes,especially on the mental state changes of dia-logue participants caused by dialogue utterances.This method, in particular, makes (a) (c) possi-ble.
The method is based on active chart pars-ing and uses augmented edge structures to keepstate information locally and time map manage-ment (Dean and McDermott, 1987) to deal withstate changes.
The method is implemented in Sic-stus Prolog and is applied to a dialogue under-standing system (Shimazu et al, 1994).2 Requ i rements  fo r  T reat ingEf fects  and  Precond i t ionsLet us examine typical situations where the effectsand preconditions of actions must be treated.2.1 Effect-Based Action DescriptionsIn describing plan recipes, it is convenient to spec-ify an action in terms of its effects ms follows:Recipe 1Action: informref(S, H, Term, Prop)Decomposition: achieve(bel(H, P))Effects: belref(H, Term, Prop)Constraints: parameter(Term, Prop)A description of the form 'achieve(P)' specifies theaction for achieving the state where the propo-sition P holds.
This recipe thus says that aninformref action can be performed by an actionthat has 'bel(H, P)' as its effect.
There maybe many such actions.
Furthermore, the actionspecified by 'achieve(P)' depends on the situationwhere P is about to be achieved.
In the extremecase, i fP already holds, the agent need not do any-thing.
For example, a speaker may not performany action to make a hearer believe a propositionif the speaker believes the hearer already believesit.
If we are not permitted to use this form, wemust enumerate all the actions that achieve P to-gether with the conditions under which they do.Treating this form requires calculating the effectsof actions.2.2 Action-EnablingGiven a goal, a planning procedure searches for anaction to achieve the goal (a main action).
If theprocedure identifies uch an action with precondi-tions, it calls itself recursively to search for actions1094O~~01 .~ : contradicts(~,~, q</)~oj:Figure h Effects of Complex Action.that satisfy them (enabling actions of tile main ac-tion), and then provides the action sequence con-sisting of the main action preceded by its enablingactions.
Given an action sequence of this form, aplan recognition procedure must thus regard it asI)erforming a main action to achieve its ettb.ct(s).There are many kinds of dialogue phenomena thatcan be captured by such action-enabling relation-ships.
Understanding snch dialogue phenomenareqnires handling effects and preconditions.2.3 S ta te -Dependent  In ter i ) re tat ionThere are cases where state-dependent i erpreta-tion is iml)ossible unless the effects and precondi-tions of actions are treated.
Consider, for exam-ple, the folh)wing dialogue fragment:A: Please tell Ine how to go to the Laboratories.B: Take the bus to Tokyo.Whereas an imperative sentence (with surfacespeech act type surface_request) is generally inter-preted as a request, the second utterance actuallydescribes a step in tile plan to go to the Labora-tories because the first utterance convinces B thatA wants to have that plan.
This latter interpreta-tion can be captured by using the heuristic rule forseh;cting an interpretation with fewer unsatisfiedpreconditions and the following recipe:Rec ipe  2Action: describe_step(S, H Action, Plan)Preconditions: bel(S, want(H, Plan))Decomposition: surface_request(S, It, Action)Constraints: stei)(Aetion , Plan)This interpretation would be possible instead byusing a recipe whose decomposition Mso containsthe action of making B believe A's want.
How-ever, such a recipe can handle only cases wherethe belief has been established by the action justbefore surface_request.3 E f fects  and  Precond i t ions3.1 Effects of  Ac t ionsThe efl>cts of a linguistic action in a dia-logue mainly I)roducc unobservable mental statechanges of the diMogne participants.
For a com-puter to participate in a dialogue like people do,it must simulate such mental state changes.The clthcts of an action are the propositionstlmt hold after the action's successfltl execution.The effects are taken to be cah:nlated recursivelyc~Case (a)(tgj = ~/)k I I *C~e (b)~Pk  : ~ j  = ~Pk) .
.
.
.~i ,, , contradicts(~i, bk)C:~s0 (~)'~bk : contradi('ts((pl, ~bk)qoi ) ).Case (d) contradicts(q~i, Pk)'t/,' iFigure 2: Preconditions of Complex Action.fl'om tile action's recipe and component actionsif any: the effects are essentially those specifiedby the action's recipe, plus those of componentactions.
Since an action is modeled to have a cer-tain tenq)oral extent, an action's effect is inodeledto hohl at the point in time where the action hasjust finished and to continue, to persist infinitelyor until the first instance that a contradictory factholds.
An effect of an a ( : t ion ' s  component actionalso holds in the same way.
Therefore, an ac-tion ~ with (71, - .
.
,%)  as its component actionshas component action 7{'s effect ~oi as its own ef-R'~ct if there is no component action 3'3 after 3'/with an e\ [ fect  99j contradictory to ~oi written ascontradicts(~,i, ~j)- and does not if such "~i existsas in Figure 1.a.2 P recond i t ions  of  Ac t ionsTile preconditions of an action are tile proi)osi-(ions that must hold before the action's uccessfulexecution.
Recognizing an action thus requiresthat its preconditions can be ~msured or at letusthypothesized to be believed by the agent.The preconditions of an action are essentiMlytaken to consists of those specified by the ac~tion's recipe and those of its component actions ifatty.
A component action's precondition, however,can be satisfied by another component action's ef-fect.
Consider action a with its component ac-tions (%,... ,%~), as shown in Fignre 2.
Let usfocus on precondition '~b/~ of action %.
Whenthe.re is an action 7j before % such that its ef~fect q0j is identical to '~bk as in Case (a) in thefigure, "~b k is satisfied by ~oj, so *Pk need not hohtat (~'s starting time.
That is, ~ does not have ~/J/~as its precondition.
On the contrary, when thereis an action ~i before % such that its effect q0icontradicts ~/;k, ~bk's hohting at a's starting timecannot contribute to the satisfaction of %'s pre-condition */;k- If there exists an action 7j between7i and % with its effect qoj identical to ~bk, ~/Jk canbe satistied \[Case (b)\].
Otherwise, *Pk emmot besatisfied \[Case (c)\], so a cannot be successflflly ex--ecuted and shonht not be recognized.
This kind of1095interference is hereafter called 'effect-precondition(E-P) conflict.'
There is another kind of interfer-ence called 'precondition-precondition (P-P) con-flict:' if a precondition specified by ~'s recipe, or aprecondition ?i of any other component action 7icontradicts Ck, they cannot hold simultaneouslyat c~'s tarting time \[Case (d)\].
In such a case,should not be recognized.4 Act ive  Char t  P lan  Pars ing4.1 Decompos i t ion  GrammarThe relationship between an action and its de-composition specified by a recipe can be viewedas a phrase structure rule.
The decomposition re-lationship specified by Recipe 2, for example, canbe view asdescribeostep(S, H, Action, Plan)surface_request(S, H, Action).This interpretation of the decomposition relation-ships specified by recipes in a plan library gives usa decomt)osition grammar and allows us to applysyntactic parsing techniques to plan recognition.Based on this idea, we constructed a plan pars-ing method that handles the effects and precondi=tions of actions.
Hereafter, we focus on bottom-up active chart parsing, although the core of thediscussion below can be applied to other parsingmethods.4.2 Ca lcu lat ing  Effects and Precond i t ionsT ime Map ManagementTime map management is used to capture thetemporal state changes caused by the effects of ac-tions.
A time map consists of a set of (potential)fact tokens) A fact token is a triple (tl,t2,~o),where tl and t2 are time points and ~ is a time-less fact description (a term), that represents theproposition that ~ holds at tl and continues topersist through t2 or until a contradictory factholds.
As a time point, we use a vertex in a chart,which is an integer.
As a special case, time pointT is used to represent unbounded persistence.
Aneffect ~ of action finishing at t is represented by afact token (t, T, ~o}.A time map with a set ~" of fact tokens sup-ports queries about whether it guarantees that afact ~ holds over an interval \[t~, t2\] (written astm_holds((h,t2, ~),~-)).
i fact ~ is guaranteedto hold over an interval \[tl, t2\] exactly if there isan intervalrt' gl  such that (t~ <t l  <t2  <t~)A  L1 ,  21  - -  - -  - -(t~,t~,qo) e ~" an d if there is no (ta,t4, v') 6 ~"such that contradicts(~0,~0') A (t~ < ta _< t2).A precondition ?
of an action can be repre-sented by a triple similar to a fact token.
Since itmust be satisfied at the action's tarting time t, itis represented by (t, t, ?
).1This paper uses Shoham's terminology (1994).startendactionrsubactionsconstraintseffectspreconditionsacnd(an !nteger)(gn ihteger)(a term)(a sequence of terms)(a set of constraints}(a set of triples)(a set of triples)(a variable)Figure 3: Edge structureD a t a  St ructuresIn our chart parsing, an action is represented byan edge.
Since information on the effects and pre-conditions of the action represented by an edgemust be kept locally, we use the edge structureshown in Figure 3.
An edge's tart and end valuesare vertices that are the respective integers repre-senting the starting and ending time points of (thepart of) the action represented by the edge.
Theaction and rsubactions (remaining subaetions) val-ues are respectively an action description and asequence of descriptions of actions to find in orderto recognize the action.
An edge is called activeif its rsubaetions vahm is a non-empty sequenceand is inactive otherwise.
The constraints valueis a set of constraints on variable instantiation.The effects and preconditions values respectivelyare sets of triples representing the action's effectsand preconditions.
The aend (action end) value isa variable used as the placeholder of the action'sending time point.
The ending time of the actionrepresented by an active edge is not determinedyet, and neither is the starting point of the effectsspecified by the action's recipe.
To keep informa-tion on those effects in the edge, fact tokens withthe aend value as their starting time points areused.
An unbound time point variable is taken tobe greater than any integer and to be less than T.An edge's aend value is bound to its end value ifit is inactive.
Given an edge e and its field field,field(e) denotes the value of field in e.Char t  P roceduresGiven an observed action, chart parsing appliesthe following procedure:P rocedure  1 Let ~j be the description of thej - th observed action.
For each recipe with ac-tion ~r, and for each most general unifier 0 of~j and C~r satisfying the constraints Cr speci-fied by the recipe, create an inactive edge fromj - 1 to j such that its action, constraints, effects,and preconditions values respectively are a j0, CrO,{(j, T, ~T0)I~T e E~}, and {( j -1 , j -1 ,  ?~0} I?," EPr}, where Er and Pr are the effects and precon-ditions specified by the recipe.Chart parsing proceeds using the following twoprocedures.1096l ' rocedure  2 Let ei be an inactive edge.
Foreach recipe with its a.ction a,., decomposition(71 , .
- .
,%) ,  effects Er, and preconditions P,,and for each most general unifier 0, satisfy-ing constraints(ei) and recipe's constrains C,., ofaction@i) and 71 such thatg = (cffccts(ci))OU{(v,T,9::,,.O) I~," C ZC,.}
and7 ) = {(t,t,'?')
rd (prcconditions(ci))O I~tm_holds((t,  ?
),  g)}U{(start(ei), start(ed,GO) l G c/',.
},without E-P or P- I '  contlict, where v is a newvariable, create an edge from start(ci) to cnd(ci)such that its action, rsubactions, constraints, ef-fects, prceonditions, and aend values respectivelyare <Y,.O, (%,...  ,7,~)0, (C,.
O eonstraints(ci))O, g,7), and V.P rocedure  3 Let c~ and ei be adjacent activeand inactive edges such that rsubactions(e~) is(71, .
- .
,  7~).
For each most generM unifier 0, sat-isfying C = constraints(e~) O constraints(ci), of 71and action(el) such that= (eFects(ea) u eJy~cts(ed)O and7) = {(t,t,'~b) E (prcconditions(e.)Upreeonditions(ei) )OIt.,_holds ((t, t, ?
), C) },without F,-P or P-P conflict, create an edgefr<)m start(e<,) to end(el) such that its action,rsubaetions, constraints, effects, preconditions,and acnd values respectively are (action(e,))O,(Tu,-.. ,7~)0, CO, g, ~P, and acnd(c,~).Now that we have the basic means to eah:ulatethe effects and preconditions of the action repre-sented by an edge, we can augment plan parsingto handle the situations described in Section 2.E f fec t -based  act ion  descr ip t ions  The factthat the description of the form achieve(P) canspecify an action with P as its effect is capturedby augmenting Procedures 2 and 3.
The set of ef-fects of the action represented by an inactive edgeei that hold at the.
action's ending time is /?7/ ={qo I tm_holds({qo, end(ei), cnd(ei)), effects@i))}.The fact is thus captured in these procedures bychecking that Ei contains P, instead of unifying71 with action(ei), if 71 is of that form.The fact that achieve(P) can specify the nullaction if P already holds is captured by a newprocedure that, given an active edge e~ with as itsrsubactions value (achieve(P), 72 , .
- .
,  %}, createsa new edge whose rsubactions value is (%, .
.
.
,  %}and whose preconditions value is preconditions (e,~)if e~, has P aa its effect and preconditions(ca) plus{end(e.), end(c~), P} otherwise.Ac t ion -enab l ing  An action-enabling relation-ship can be captured by a new procedure that,given two adjacent inactive edges el and e2 suchthat el 's effects satisfy some of eu's preconditions,treaties a new inactive edge with action(c2) ,as itsaction value.
+Sta te -dependent  in terpreta t ion  A dialoguestate is determined by the initial state and the ef-fects of the I)receding actions.
The initial stateis treated by using a special 'initialize' inactiveedge from 0 to 0 with the effects value represent-ing it.
The influence of the qnitialize' edge ispropagated by the procedure for treating action-enabling relationships and preference rules refer-ring to precon(litions, a5 Conc lus ionA plan l)arsing method has been prol)osed thathandles the effe<:ts and l)reeonditions of actionsand that parses i)lans hi a manner del)endent (m<tialogue state changes ('ause<t by utterances.
Themethod has been implemented in Prolog.
The.imt)lemented progl'am uses an agenda inechanismthat uses priority scores on edges to obtain i)re -fi'.rred plans first.
The method has been applied tounderstanding route-explanation dialogues by us-ing the dialogue plan model that takes each actionof uttering a word ;~s a primitive and that treatsintra- and inter-utterance plans uniformly to treatfragmentary utterances (Kogure et al, 1994).ReferencesTllomas I~.
l)ean and Drew V. McDermott.
:1987.Tmnporal data base management.
ArtiJicial Intel-ligence, 32(1):1-55.Kiyoshi Kogure, Akira Shimazu, and Mikio Nakano.1994.
Recognizing plans in more natural dialogueutterances, in Proceedings ofIGWLP .94, pages 935 -938.Akira Shimazu, Kiyoshi Kogure, and Mikio Nakano.1994.
Cooperative distributed processing for un-derstanding dialogue utterances.
In Proceedings ofIUSLP 94, pages 99:102.Yoav Shoham.
1994.
Artificial Intelligence Tech-niques in Prolo 9.
Morgan Kanfmann Publishers.Candace L. Sidner.
1985.
Plan parsing for intendedresponse recognition in discourse.
ComputationalInteUigence, 1 (1):1-10.Mark VilMn.
1990.
Getting serious about parsingplans: a grammatical analysis of plan recoguition.In Proceedings ofAAAI-90, pages 190-197.2As an extention to control the applicability of thisprocedure, the effects and preconditions fields respec-tively are divided into main_effects and side_effect.sfields amt into preconditions and prerequisites fields.The procedure checks enabling relationships only be-tween main_effects and preconditions.aThe use of the initial state also contributes to theefficiency of plan parsing: an input action sequence(:an be shortened by cMculating the current state inthe middle of a dialogue and by restarting plan parsingwith the current state as a new initial state.1097
