SEHANTICS OF TEHPORAL QUERIES AND TEHPORAL DATACarole O. HafnerCollege of Computer ScienceNortheastern UniversityBoston, MA 02115AbstractThis paper analyzes the requirements for adding atemporal reasoning component to a natural languagedatabase query system, and proposes a computationalmodel that satisfies those requirements.
A prelim-Inary implementation in Prolog is used to generateexamples of the model's capabi Iltles.I.
IntroductionA major area of weakness in natural language (NL)interfaces is the lack of ability to understar~ andanswer queries involving time.
Although there isgrowing recognition of the importance of temporalsemantics among database theoretlcians (see, forexample, Codd \[6J, Anderson \[2L Clifford and Warren\[41, Snodgrass \[ i5\]), existing database managementsystems offer little or no support for themanipulation of tlme data.
Furthermore (as we willsee In the next Section), there is no consensus amongresearchers about how such capabilities should work.Thus, the developer of a NL interface who wants tosupport time-related queries cannot look to anunderlying ~ for he!p.Currently available NL systems such as Intellect (SJhave not attempted to sugoort temporal queries,except in a trivial sense.
In Intellect, users can askto retrieve date attributes (e.o~, "When was Smithhired'?')
or enter restrictions based on the value of adate attribute (e.g., "List the employees hired afterJan I, 1984"); but more complex questions, such as"How long has it been since Smith received a raise~or "What projects did Jones work on last January?
',are not 'Jnderstoo~ This Is a serious PraCticallimitation, since the intended users of NL systems areexecutives and other professionals who wil l  requiremore sopffistlcated temporal capal)illtles.This report describes a model of temporalreasoning that is designed to be tncoroorated Into aNL query system.
We assume that a syntacticcomponent could be developed to translate explicittemporal references in English (e.g., "two years ago')into logical representations, and restrict ourattention to the conceptual framework (including bothknowledge structures and rules of inference)underlying such representations.
Section 2 analyzesthe requirements that the temporal model mustsatisfy: first describing some of the issues that arisetn trying to model time in a computer, then definingfour basic semantic relattonsl~ips that are expressedby time attributes in databases, and finally analyzingthe capat)tlites required to Interpret a variety oftemporal queries.
Based on this analysis, acomputational model is described that satisfies manyof the requirements for understanding and answeringtime-related database queries, and examples arepresented that t l lustrate the model's calDabiltties.2.
Hodellng Temporal KnowledgeHodellng time, dasoite its olovlous importance, hasproved an elusive goal for artificial Intelligence (AI).One of the first formal proposals for representingtime-dependent knowledge in AI systems was the"situation calculus" described by I'lcCarthy a~l Hayes\[I I\].
That proposal created a paradigm for temporalreasoning based on the notion of an infinite collectionof states, each reoresenting a single instant of time.Prepositions are defined as being either true or falsein a particular state, and predicates such as "before(sl, s2)" can be defined to order the statestemporally.
This approach was used by Bruce \[3\] inmodeling the meaning of tensed verb phrases InEnglish, and It has been refined and extended byMcDermott (!
3~5tare space models describe time as being similarto the real number line, with branches for alternativepasts and hypothetical futures.
Although thisapproach is intuitively appealing, there are manyunsolved problems from both the logical and thelinguistic points of view.
A few of the currentproblems in temporal semantics are very brieflydescribed below:a. Non-monotonic reasontno~ In a system forautomated reasoning, conclusions are drawn on thebasis of current facts.
When a fact that was truebecomes false at a later time, conclusions that werebased on that fact may (or may not) have to berevised.
This problem, which is viewed by many as"the" current issue in common sense reasoning, hasbeen studied extensively by Doyle \[7\], Moore \[I 4\], andMcDermott \[I 3\], and continues to occupy the attentionof John McCarthy \[ !
2~b.
Representation of Intervals and processes.Another problem for temporal logic is therepresentation of events that occur over intervals oftime.
Allen \[I\] points out that even events whichseem to be instantaneous, such as a light coming on,cause problems for the state space model, since atthe instant that this event occurs it is impossible tosay that either "the light is on" or "the light is not on"is true.
As a result, Allen chooses a representation oftime that uses intervals as the primitive objectsinstead of instantaneous states.c.
Temporal distance.
Neither the state space modelnor the interval model offers a convincing notion oftemporal distance.
Yet, the ability of a system tounderstand how long an event took or how much timeseparated two events Is an Integral part of temporalreasonir~d.
Periodicity of time.
There are many periodic eventsthat affect the way we think and talk about time -such as day and night, the days of the wee~, etc.McDermott \[13\] shows how his tempo~ al logic candescribe periodic events, and Anderson \[2\] includes arepresentation of periodic data in her model oftemporal database semantics.
However, reasoningabout periodic time structures is sttli z relativelyunexplored issue.e.
Vagueness ana uncertainty.
People are able toreason about events whose temporal par-~neters arenot known exactly - in fact, almost all temporaldescriptions incorporate some vagueness.
The mostdirect treatment of this phenomenon was a system byKahn and Gorry \[9\], which attached a "fuzz factor" totemporal descriptions.
However, Kahn and Gorryrecognized that this approach was very crude andmore sophisticated techniques were needed.f.
Complex event structures.
The situation calculus isnot easily adapted to descriptions of complex actssuch as running as race, simultaneous events such ashiding something from someone by standing in frontof it while that person is in the room (an exampledis- cussed by Allen \[I \]), or "non-events" such aswaitin~Metaphorical time descriptions.
In naturallyoccuring NL dialogues, time descriptions arefrequently metaphoric.
Lakoff and Johnson \[I O\] haveshown that at least three metaphors are used todescribe time tn English: time as a path, time as aresource, and time as a moving object.
AI modelshave yet to adequately deal with any of thesemetaphors.Considering all of these complex issues (and thereare others not mentioned here), It is not surprisingthat general temporal capabilities are not found inapplied AI systems.
However, tn the domain of NLquery systems, it may be possible to ignore many ofthese problems and stil l  produce a useful system.
Thereason for this is, in the world models of computerdataOases, most of the complexity and ambiguity hasalready been "modeled out'.
Furthermore, current NLinterfaces only work well on a supclass of databases:those that Conform to a simple entity-attribute-rela-tionship model of reality.The research described in this paper has focused onthe design of a temporal component for a NL databaseQueP), system This has led to a model of time thatcorresponds to the structure of time attributes indatabases: i.e., a domain of discrete unitsrepresenting intervals of equal length.
(Whether theseunits are SOCOrK2S, minutes, days, or years may varyfrom one aatabase to another.)
The description of themodel presented In Section 3 assumes that the basictempora!
units are days, In order to make the modelmore intuitively meaningful; however, the model canbe easily adaoted to time units of other sizes.?
22.1 Analysis of Time Attributes in DatabasesThe primary role of time Information In databasesis to record the fact that a specific event occurred ata specific time.
(It is also possible to representtimes in the future, when an event is scheduled tooccur, e.~, the date when a lease Is due to expire.
)Having said this, there are sti l l  different ways inwhich time attributes may be semantically related tothe entities in the database, and these requiredifferent Inferences to be made in translating NLqueries into the framework of the data model.
Thefollowing categories of time attributes arefrequently observed in "real world" databases:I.
Time attributes describing individuals2.
Time of a "transaction"3.
Time when an attribute or relationship changed4.
The time of transition from one stage of aprocess to the next.The first two categories are quite straightforward.Time attributes of individuals appear In "entity"relations, as shown In Figure la; they describe theoccurrence of a significant, event for each Individual,such as an employee's date of birth or the date whenthe employee was hired.
This type of temporalattribute has a unique (and usually unchanging) valuefor each Individual.The term "transaction" is used here to describe anevent (usually involving several types of entities)that does not change the status of the participants,other than the fact that they participated In theevent.
For example, the date of each treatment (anX-ray, a therapy session, or a surgical procedure)given to a patient by a doctor would be recorded in amedical records database, as shown in Figure lb.Attributes In the third category record the time atwhich some other attribute or relationship changed.Databases containing this type of information arecalled "historical databases', in contrast to the moretraditional "operational" databases, which only recorda "snapshot" of the current state of the world.
Thesalary history and student records databases shown inl a.
Time Attributes Decribmg IndividualsEmploLIee DatabaseEmD_ID I Name I Addresslb.
Time of a TransactionMedical Records DatabasePatient IOoctor IProcedureI Birth_Date IHire-Datei c  Time Whan an Attr ibute or Relationship ChangedSalary History DatabaseEmp_lO I Salar9 IDateStudent Records DatabaseDateStudent-IO I Subject IOegree I DateI d. Time of a Process Transit ionPublication DatabaseISub-Oate \[Disp-Date JRev-Date \[Pub-DateExamples of Temporal Attr ibutesDoc_lO J AuthorFigure 1.3I.
Which doctors performed operations on June 15, 198372.
How many people received PhD's in Math last month?3.
What percent of the employees got raises in the 4th quarter of 198474.
Did any authors have more than one paper waiting for publication on Jan I?5 How much was Jones making in September of 198476.
How long has Green worked here?7.
What was the average review time for papers suDmitted in t go3?8.
Which patients received operations on each dog last week?9.
How many Ph.
D's were granted to women during each of the pest 10 years?Figure 2.Figure Ic are examples of this type of temporal datZLWithin this category, we must recognize a furtherdistinction between exclusive attributes such assalary and qon-exclustve attributes such as degree.When a new salary is entered for an employee, theprevious salary is no longer valid; but when a newdegree is entered, it Is added to the individual'sprevious degrees.Examples of Temporal QueriesThe last category of temporal data is used torecord fixed sequences of events that occur in variousactiivies.
For example, the publication database ofFigure Id records the life-cycle stages of paperssubmitted to a scientific journal: the date the paperwas received, the date it was accepted (or rejected),the date the revised version was received, and thedate that is it scheduled to be published.
We can viewthis sequence as a process with several stages('under review', "being revised', "awaitingpublication'), where each temporal attributerepresents the time of transition from one stage tothe next.2.2.
Analysts of Tempera!
Queriesparticular interval of time.
Current database systemsalready support time restrictions, such as Query I,that use simple, absolute time references.
Queriessuch as (2), which use relative time references, and(3) which refer to intervals not directly representedin the database, require a more elaCx~ate model oftime structures than current systems provide.
Thetime domain model described In Section 3.
I cansupport queries of this type.The second type of query asks about thestate-of-the-world on a given date (Query 4) orduring an interval of time (Query 5).
Understandingand answering these queries requires rules fordeducing the situation at a given time, as a result ofthe occurrence (or non-occun'ence) of events beforethat time.
For example, Query 5 asks about Jones'salary in September of Ig78; however, there may notbe an entry for Jones in the salary history file duringthat period.
The system must know that the correctsalary can be retrieved from the most recent salarychange entered for Jones before that date.
5action3.2 describes an event model that can represent thistype of know ledge.This section considers four types of queriesInvolving temporal data, and briefly outlines thecapaDilites that a temporal knowledge model musthave in order to understand and answer queries ofead~ type.Oueries I-3 in Figure 2 are examples of timerestriction aueries, which retrieve data aboutindividuals or events whose dates fall into aAnother type of query asks about the lenoth of timethat a situation has existed (Query 6), or about theduration of one stage of a process (Ouer 7 7).
Thesequeries require functions to compute and comparelengths of time, and rules for deducing the startingand K ing  times of states-of-the-world based on theevents that trigger them.
Section 3.3 shows how theproposed temporal model handles this type of query.4The last type of query Is the oertodlc query, whichasks for objects to be grouped according to one ormore attributes.
High-level data languages andcurrent NL interfaces are generally able to handle thistype of request when it refers directly to the value ofan attribute (e.~, Query 8), but not when it requiresinformation to be grouped by time period, as in Query9.
To anwer periodic queries requires a formalrepresentation for descriptions such as "each of thepast 5 years'; the "periodic descriptors" defined inSection 3.
I satisfy this requirement.3.
A Temporal Reasoning Model for DatabasesIn this section, a temporal reasoning model isproposed that can interpret the types of queriesdescribed in Section 2.2.
The model, which Isexpressed as a collection of predicates and ruleswritten in Prolng \[S\], consists of the followingcomponents:I.
A time domain model for representing units (days),intervals, lengths of time, calendar structures, anda variety of relative time descriptions.. An event model for representing and reasoningabout the temporal relationships among events,situations, and processes in the application domairL3.
I Time Domain ModelThe basic structures of the time domain model aredays, intervals.
Calendars, and oeriodlc descriotors.The days (D, OI, D2.. ) form a totally ordered set,with a "distance" function representing the number ofdays between two days.
The distance functionsatisfies the laws of addition, i.e.
:I) d ts tance(D I ,D2)= 0 <--> O i -D2) distance ( D I ,  D2 ) - - distance ( D2, DI)3) distance ( D I ,  D2 ) + distance ( D2, D3 ) -distance ( D I ,  03)Intervals (I, I1, 12..) are ordered pairs of days\[Ds, De\] such that distance (Ds, De) >= O.
If aninterval I - \[Ds, De\] then:4) s ta r t ( I )  ?
Ds5) end( I ) = De6) length ( I ) = distance ( start ( I) ,  end ( I )) + I7) during ( D, I) = "true" <-->distance (s tar t ( I ) ,  D ) >= 0 anddistance ( D, end(I)) >= 0Other temporal relations, such as "before (D I, D2)',"after(D I, D2)', and interval relations such as thosedescribed by Allen \[ i \], can be defined using the"distance" function in an equally straightforwardmanner.
Also included in the model Is a function"today" of no arguments whose value is always thecurrent day.Formulas (1-7) are repeated below in Prolog notattor~i ) dtstance(D I ,D2,0) :- O I = O2.2) distance(D1, D2, Y):- distance(D2, D1, X), Y = -X.3) distance(D i, D3, Z) :- distance(D I, D2, X),distance(D2, D3, Y), Z=X+Y.4) start(I,Ds).5) end(I,De).6) length(I, Y) :- distance(start(I), end(I), X),Y = X+l.7) during (D, I) :- distance(start(I), D , X), X >- 0 ,distance (D, end(I), Y), Y >- O.Examples of some natural language concepts:n_dayq ~jo (N, D) :- today(DT), distance(D, DT, N).n_days_from_now (N, O) :-today(DT), distance (DT, D, N).the..past..n_days (N, I) :-today(DT), end(I,DT), length( I,N).the._nexL.l~days (N, I) :-teday(DT), start(I,DT), length(I,N).the_day_before_yesterday (D) :- n_days_ago(2, D).A calendar is a structure for representingsequences of intervals, such as weeks, months, andyears.
We wil l  consider only "complete" calendars,which cover all the days, although It would be usefulto define Incomplete calendars to represent conceptssuch as "work weeks" which exclude some days.
Acalendar (CAt) is a totally ordered set of Intervaldescriptors called "calendar elements" (L'~, CEI, CE2..).
The following predicates are defined for ca len~.dtstcal(CAL, CEI, CE2, N).
This Is like the distancefunction for days.
It is true if CE2 is N calendarelements after CE I.
For example:, distcal(year,1983, 1985, 2) is true.5getcal(CAL, CE, I).
This predicate Is true if I Is theinterval represented by the calendar element CE.For example: getcal(year, 1983, \[ janO I 1983,dec311983\] ) is true.incal(CAL, D, CE, N).
This predicate Is true If D is theNth day of calendar element CE.
It is used to map aday into the calendar element to which It belongsFor example:, incal(month, jan 121983, \[jan, 1983\],t2\] ) ts true.Calendars satisfy the well-formedness rules thatwe would expect; for example, for each day D and eachcalendar CAL, there is at most one (for completecalendars, exactly one) calendar element CE andpositive integer N such that incal (CAL, D, CE, N) istrue.
Also, if CE i is before CE2, then each day in CE Iis before each day in CE2.
And, for completecalendars, if CE!
immediately precedes CE2, then thelast day of CEI immediately precedes the first day ofCE2.Although the representation of calendar elementsIs arbitrary, we have chosen conventions that are bothmeaningful to the programmer and useful to theimplementation.
The simplest calendars are thosesuch as "year', containing named elements that occuronly once.
Years are simply represented as atomscor~'espondlng to their names.
Cyclic calendars arethose that cycle within another calendar, such as thecalendars for "month" and "quarter'.
The elements ofthese calendars are represented as 2-tuoles, forexample: distcal(month, \[dec, 1983\], \[jan, !984\], ! )
istrue.
The calendar for weeks presents the mostdifficult problem for the time domain model, sinceweeks are not usually identified by name.
We havedefined the week calendar so that all weeks begin onSunday and end on Saturday, with each element of thecalendar equal to the interval it rel:cesents.
Whilethis Is not an entirely satisfactory solution, it allowsa number of useful "weekly" computations.Hore examples of natural language concel)t~from_ce 1_to_ce2(CAL, CE I, CE2, I) :-/e from January, I q~3 to duly, 1985 e/getcai(CAL, CE 1, I I ), getcal(CAL, CE2, 12),start(I I ,  S), end (12, E) , start(I,  5), er~KI, E).n_cai_elts_ago(CAL, N, D) :-/e three weeks ago o/today(OT), lncal(CAL, DT, CEi, X),dlstcal(CAL, CE2, CE I, N), Incal(CAL, D, CE2, X).The last structure in the time domain model is theperiodic de-JCrtptor (PO), ~ for PelX%--Jentingexpressions such as "each of the past 5 years" or"each month in 1983".
Periodic descriptors ate3-tupies consisting of a calendar (to define the sizeof each period), a starting element from that calendar(to define the first period), and either an endingelement from that calendar (to define the last period)or an integer (to define how many periods are to becomputed).
Periodic descriptors can run eitherforward or backward in time, as shown by thefollowing example:each_of_the_gas~cal_elts(CAL,N, PO):-PO - \[CAL, CEP, MI, today(DT), incal(CAL, DT, CET, _) ,dtstcal(CAL, CEP, CET, I ), H Is -N.To Interpret a query containing a periodic descrip-tor, the NL interface must first expand the structureInto a list of Intervals (this must wait untilexecution time in order to ensure the right value for"today') and then perform an Iteratlve execution ofthe query, restricting it In turn to each interval inthe list.3.2.
Event ModelIn the event model, each type of event isre~'esented by a unique predicate, as are thesituations and IX'ocess stages that are signified byevents.
For example, the event of a person receiving adegree is represented by: awarded(Person, Subject,Degree).
The situation of having the degree isrepresented by: holds(Person, Subject, Degree).
Whilethe "awarOed" medicate is true only on the date thedegree was received, the "holds" predicate is true onthat date and all future dates.
Below we define astraightforward al~:>roach to rewesentlng this type ofknow ledge.Five basic tempor'al predicates are Introduced torelate events and situations of the al~ltcation modelto elements of the Lime domain model.6timeof(E, D) - succeeds whenever an event thatmatches E occcurs In the database with a tlme thatmatches D. This is the basic assertion that relatesevents to their times of occurrence.nextof(E, T, D) - asserts that D is the next time ofoccurrence of event E after time T.nextof(E, T, D):- tlmeof(E, D) , before(T, D),not (tlmeof (E, X), before (T, X), before (X, O).startof(5, D) - defines the tlme when a situation orprocess stage begins to be true, based on theoccurrence of the event that triggers IL Rules ofthis sort are part of the knowledge base of eachapplication, for example:startof (holds(Person, Subject, Degree), Date) :-timeof (awarded( Person, Subject, Degree), Date).endof(5, D) - defines the time when a situation ceasesto be true.
For an exclusive attribute such assalary(jones, 40000), the "end-of" a situation is the"next-of" the same kind of event that triggered thesituation (i.e., when Jones gets a new salary thensalary(jones,40000) is no longer true).
For otherkinds of situations, a specific "termination" isrequired to signify the ending; e.g., a publicationceases to be "under review" when It Is accepted.trueon(S, D) - succeeds if situation S is true at timeD.
Given the predicates described above, thedefinition of trueon might be:.trueon(S, D):- startof (S, A), not (after(A,D)),not (endof(5, B), before (B, D)).This rule asserts that situation S is true at time 0if S began at a time before (or equal to) O, and dillnot end at a time before D.3.3.
An Example QueryWe can now bring the two parts of the modeltogether to describe how a temporal query isrepresented anti interpreted using the predicates andrules defined above.
We will consider the followingquery, addressed to the salary histor'/database:.Which employees are making at least twice as muchnow as they made 5 years ago.For experimental purposes, we have defined ourdatabase as a collection of Prolog facts, as proposedby Warren\[ 16\] ; thus, the database can be querieddirectly in Prolog.
We have also defined the "days',which are the primitive elements of the time domainmodel, to have names such as janO11982 orjul041776; these names appear in the database as thevalues of temporal attributes, as shown below:salhistory(jones, 30000, janO I 1983).salhistory(smith, 42000, jan l5 i 983).Each of the event-model predicates described in theprevious section has also been created, with"nowsalary(EHPlD, 5At)" substituted for E and"makes(EHPlD, SAt.)"
substituted for 5.
For example.-timeof(newsalary(EHPlO, SAt), D):-salhistory(EHPlD, $AL, D).startof(makes(EHPlD, SAL), D):-timeof(newsalary(EMPlO, SAt), O).endof(makes(EHPlO, 5AL), D2):-timeof(newsaiary(EHPl D,SAL), D),nextof(newsalary(EHPlO,SAL2), D, O2),SAt --- SAt2trueon(malces(EHPlD, 5At), D):-startof(makes(EMPlD,SAL), D.trueon(makes(EHPlD, S/d.
), D):-stattol'(mdcedBMPlD, SAL), DI ), befote(DI,D),(e~do((makes(EMPlD, SAL), I)2), before(D2, D)).We can now express the sample query in Proiog:resuit(EHPlO, 5AL, OLDSAL):-teday(DT),trueon(makes(EHPlD, $AL), OT),n_caL.elts_ago(year, 5, DFYA),trueordmakes(EHPlO, OLDSAL), DYFA),SAL >= 2 * OLDSAL.This Prolog rule would be the desired output of thelinguistic comoonent of a NL query system.ParalXcased in English, it says: retrieve all triples ofemployee td, current salary, and old salary, such thatthe employee makes the current salary today, theemployee made the old salary five years ago, and thecurrent ~alary is greater than or equal to two timesthe old salary.
If we exoand all of the Prolog rulesthat would be invoked in answering this query, leavingonly database access commands, arithmetic tests, andcomputations of the "distance" function, the completetranslation would be:.result(EMPlD, SAt, OLDSAL) :-today(DT),saihistory(EMPlO, SAt, O),distance(D, DT, X I ),Xl >=0,not(salhistory (EHPlD, SAL2, D2),distance(D, D2, X2),X2>O,distance (D2, DT, X3),X3>=O,S~J.
- SAL2),lncal(year, DT, YR1, Y),distcal (year, YR1, YPfA, -5),incal(year, DFYA, YFYA, Y),salhlstory (EMPlD, O(.DS~., D3),distance (D3, DYFA, X4),X4>= O,not(salhistory(EMPlD, OLDSAL2, D4),distance(OZ, D4, X5),X4> O,distance(D4, DYFA, XS),X5 >- O,OLDSAL I ",= OLDSAL2).4.
ConclusionsThis paper has proposed a temporal reasoning modelbased on the use of time attributes in databases, andthe types of queries that we would expect in"real-world" applications.
The model includesconstructs for representing events, situations, andprocesses that are similar to those found in othertemporal reasoning models.
It also addresses some!ssues of particular importance for NL query systems,which are not addressed by other recent work ;ntemporal reasoning, includir~.I.
Representing the time between two polnts, and thelengths of intervals.2.
Representing weeks, months, years, and otherstendm-d calendee structur?-~.3.
~epresenting information relative to "today", "thismonth', etc.4.
Representing periodic time descriptions.The use of discrete, calendar-like structures as abasis for representing tim.e in a computer is asimplification that is compatible with the discreterepresentation of information in databases.Hopefully, this simplification wil l  make IL easter toprogram the model and to integrate it Into astate-of-the-art NL quer~ system.5.
ReferencesI.
Alien, J. F., "Towards a General Theory of Actionand Time.
Artificial Intelllaence.
Voi.
23, No.
2(1984) 123-154.2.
Anderson, T. L, "Modeling Time at the ConceptualLevel."
In P. Scheuermann, ed., II~orovino OatabaseUsability and ResPonsiveness.
pp 273-297.Jerusalem: Academic Press, 1982.3.
Bruce, B., "A Model for Temporal Reference and itsApplication in a Question Answering System.
"Artificial Intellioence.
Vol 3, No.
I (1972), 1-25.4.
Clifford, J. and D. S. Warren, "Formal Semantics forTime in Databases."
A(:M TOOS.
Vol.
8, No.
2 (1983)214-254.5.
Clocksin, W.F.
and C. 5.
Melltsh, Proorammino inproloo.
Berli~ Springer-Verlag, 1981.6.
Codd, E. F., "Extending the Database Relational Modelto Capture More Meanino~" Ai~l TOO5.
Vol.
4, No.
4(1979) 397-434.7.
Doyle, J., "A Truth Maintenance System."
ArtificialI ntelltoence.
Vol.
12, No.
3 (1979), 231-272.8.
INTELLECT Reference Manual, INTELLECT LEX UtilityReference, Program Offerings LY20-9083-0 andLY20-9082-0, IBM Corp., 1983.9.
Ka~n, K. and G. A. Gorry, "Mechanizing TemporalKnowledge."
~ J f l c ia i  Intelligence.
Vol 9 (1977),87-108.I0.
Lakoff, G., andM.
Johnson, Metaohors We Live BY.The University of Chicago Press, Chicago ILL (1980).I I. McCarthy, J. and P. J. Hayes, "Some PhilosophicalProOlems from the Standpoint of ArtificialIntelligence."
In B. Mettzer and D. Mtchle, eds.,Machine Intellloence 4.
American Elsevier, New York(1969).12.
McCarthy, J., "'#hat is Common Sense?
"Presidential Address at the National Conference onArtificial Intelligence (AAAI-84), Austin, TX (1984).13.
McDermott, D., "A Temporal Logic for ReasoningAbout Processes and Plans."
Coonittve Science.
Vol.6 (1982) 101-155.14.
Moore, R. C., "Semantical Considerations onNonmonotonic Logic."
Artificial Intelllaence.
Vol.25, No.
1 ( 1 983), 75-94.15.
5nodgrass, R., "The Temporal Query LanguageTOuel."
In Proc.
3rd ACM SIGPIOD Svmo.
on princtolesqf Database Systems.
Waterloo, ONT (1984).16.
Warren, D. I-L O., "Efficient Processing ofInteractive Relational Database Queries Expressedin Logic" In proc 7th Conf.
on Very LaroeDatabases.
pp.
272-281.
IEEE Computer Society(1981).
