UNIFICATION-BASED SEMANTIC INTERPRETATION IN THE BBNSPOKEN LANGUAGE SYSTEMDavid  Stal lardBBN Systems and Technolog ies  Corporat ionCambr idge,  MA 02138ABSTRACTThis paper describes the current state of work onunification-based semantic interpretation i  HARC (forHear and Recognize Continous speech) the BBN Spo-ken Language System.
It presents the implementationof an integrated syntax/semantics grammar written in aunification formalism similar to Definite Clause Gram-mar.
This formalism is described, and its use in solvinga number of semantic interpretation problems is shown.These include, among others, the encoding of seman-tic selectional restrictions and the representation f rela-tional nouns and their modifiers.1 INTRODUCTIONOver the past year work on semantic interpretation ithe BBN Spoken Language System has shifted from aMontague Grammar (Montague, 1973) style rule-for-ruleapproach to one which attempts to carry out semanticinterpretation directly in the unification grammar ulesthemselves.
This is accomplished by adding semanticfeatures to the grammar rules, placing them on the samefooting as the existing syntactic features.
Meaning repre-sentations are thereby constructed, and semantic filteringconstraints applied, as part of parsing the utterance.We view such a move as having essentially three ad-vantages:?
more information is available to semantic interpre-tation, so it is possible to gain higher coverage?
syntax and semantics are integrated, so semanticfiltering constraints can be applied as constituentsare built and attached?
this integration is simple and does not require anycomplex engineering of cooperating software mod-ulesAll three of these advantages are important ones for aspoken language system.The HARC system has the following overall organiza-tion.
Spoken input is initially analyzed by the "N-best"algorithm(Chow and Schwartz, 1989), converting it into"a rank-ordered set of N best word-sequence hypothe-ses (for a given value of N).
These N hypotheses arethen analyzed by the parser, using the combined syn-tactic/semantic grammar.
Those hypotheses which aresyntactically and semantically allowed emerge from theparser as initial logical forms in which quantifiers areinterpreted "in place".
Next, the quantifier module as-signs scopes and passes the translation to the anaphoracomponent, which then resolves the referent of intra-and extra-sentential pronouns.
The completed logicalform is then passed to the back-end component whoseresponsibility is to compute the appropriate r sponse tothe user's input.The present paper confines itself to a description of thecombined syntactic/semantic grammar, along with somediscussion of the parsing algorithm.
We will first con-sider the representational framework in which the gram-mar is written.2 THE GRAMMAR FORMALISMThe BBN grammar formalism, described in detail in(Boisen et al, 1989), is most closely related to Defi-nite Clause Grammar (Pereira nd Warren, 1980).
Rulesconsist of a single left-hand term and zero or more righthand terms.
Terms can have features, whose values arethemselves terms.
Variables, indicated by the ":" prefix,indicate identity between different slots in and amongterms.Here is an example of a simple grammar rule writtenin this formalism:(VP (AGR :P :N) :MOOD (WH-) :TRX :TRY)(V :CONTRACT (TRANSITIVE) :P :N :MOOD)(NP :NSUBCATFRAME (WH-) :TRX :TRY)39This rule says that a VP can derive a transitive verb fol-lowed by an object NP.
The person, number and mood ofthe VP - -  indicated by the variables :P, :N and :MOODrespectively - - must be the same as the person, numberand mood of the verb.The distinguishing feature of the BBN formalism, inwhich it differs from DCG, is its strict system of typing.Each functor that can head a term is associated witha type and a fixed set of argument positions that arealso typed.
For example, the functor "AGR" has thetype AGREEMENT, and the argument types PERSONand NUMBER.
Variables are also typed; for examplethe variable :P has the type PERSON and the variable:N has the type NUMBER.
A given grammar writtenin the formalism, then, has two components: a set offunctor type declarations and a set of grammar ules.This typing feature nables the the grammar rules to bestatically checked against he type declarations.
A largeclass of errors in the grammar m such as accidentallyommitted features, transpositions or mispellings - -  canbe caught when the grammar is loaded into the computerinstead of through run-time debugging.
This capabilityhas proven very useful indeed in the course of creatingand modifying a large (~800 rule) grammar.3 BAS IC  EXAMPLESWe now present a very simple example of the use ofsemantic features in unification, adding semantic featuresto the VP rule considered earlier.
These new features areunderlined:(VP (AGR :P :N) :MOOD (WH-):TRX :TRY :SUBJ :WFF)(V (TRANSITIVE :WFF :SUBJ :OBJ):P :N :MOOD)(NP :NSUBCATFRAME (WH-) :TRX :TRY :OBJ)This rule passes up a formula as the semantics of the VP,indicated by the variable :WFF.
The semantics of thesubject of the clause, indicated by the variable :SUB J,is passed down to the verb, as is the semantics of theobject NP, indicated by the variable :OBJ.For the transitive verb "hire", we have the followinglexical rule:(V (TRANSITIVE (HIRE' :SUBJ :OBJ) :SUBJ :OBJ):P :N :MOOD)(hire)We can think of this rule in functional terms as takingsemantic arguments :SUBJ and :OBJ and returning as avalue the wff (HIRE' :SUBJ :OBJ).
Note the placementof semantic arguments to the verb inside the subcatego-rizafion term (headed by the functor "TRANSITIVE")instead of at the top-level of the "V".
This means thata verb with a differing number of arguments, such as"give", has a different subcategorization functor with acorresponding number of argument places for the seman-tic translations of these arguments.Like Definite Clause Grammar, the BBN formalismdoes not require that every term on the right-hand sideof the rule derive a non-empty string.
This is necce-sary to handle traces.
But empty-deriving terms are alsomade use of in some grammar rules as so-called "con-straint nodes".
These do not generate a real constituentof the parse tree, but instead stipulate that a particularrelationship hold between these constituents.
For exam-ple, in the rule turning a PP into a (post-copular) VP,we require that the PP semantics be construable as aspecifying a predication on the subject of the VP:(VP (AOR :P :N) :MOOD (FRED) :SUBJ :WFF)----I,(FP (FREDICATE-P) (WH-) :PP)(FREDICATIVE-PP :PP :SUBJ :WFF))PREDICATIVE-PP is a constraint clause, taldng the se-mantics of an NP and a PP and returning a wff that is apredication that the PP may be construed as making ofthe NP.
As the rule shows, the wff returned is passed upas the translation of the VP.Constraint nodes are used not only to impose a stipu-lation on the constituents of a rule but also to allow for~multiple ways to satisfy these constituents.
For exam-ple, the PP "in the Information Sciences Division" canapply differently to different subjects: to a person, inwhich case it indicates that the person is an employee ofthe Information Sciences Division, or to a department,in which it indicates that the department is one of thosemaking up the Information Sciences Division.So far we have not indicated how the system woulddistinguish between these two cases: in other words,how it would tell a person and a department apart.
Inthe next section, we discuss the internal structure of NPsemantics where such information is stored.404 REPRESENTATION OF PHRASAL SE-MANTICSThe variables :SUBJ and :OBJ in the previously pre-sented lexical rule for "hire" are typed to range over termstructures that represent noun phrase semantics.
Thesestructures have the following form:(Q-TERM QUANTIFIER VAR NOM-SEM)The QUANTIFIER is one of the many quanfifiers thatcorrespond to determiners in English: ALl ,  SOME,THE and various WH determiners.
Proper NPs aretreated as definite descriptions in our system; they arethus represented using the THE quantifier.The VAR denotes a variable of the object language,and is left uninstantiated (being filled in by a uniqueobject-language variable by the quantifier module).
TheNOM-SEM represents the set that the quantificationranges over, it effectively represents the semantics ofthe head of the NP after modification by the NP's otherconstituents.NOM-SEMs have a structure of their own.
The pnnci-pal functor of this type is NOM, which has the argumentstructure:(NOM PARAM-LIST SET-EXP SORT)The PARAM-LIST is a (possibly empty) list of param-eters, used to indicate the free argument places in a re-lational noun.
SET-EXP is a logical expression whichdenotes a set of individuals.
SORT is a term structurewhich represents the semantic lass of the elements ofSET-EXP.Note that this means that the SORT field of the NOMis accesible, via one level of indirection, from the Q-TERM NP representation.
It is this feature which pro-vides the means for selectional restriction based on se-mantic class.Semantic lasses (arranged in a hierarchy) are repre-sented as complex terms, whose arguments may them-selves be complex terms.
A translation (described in thenext section) is established between semantic lasses andthese terms such that non-empty overlap between twoclasses corresponds to unifiability of the correspondingterms, and disjointness between classes corresponds tonon-unifiability of the corresponding terms.As an example, we give a second version of the rulefor "hire", this time incorporating the selectional restric-tion that a department hires a person:(v (TRANSITIVE(HIRE' #1=(Q-TERM :Q1 :VAR1(NOM :PARS1 :SET1(INANIMATE (DEPTS))))#2=(Q-TERM :Q2 :VAR2(NOM :PARS2 :SET2(PERSON))))#1##2#:P :N :MOOD).
.
-?
(hire)The use of the numbers "1" and "2" above is intended toindicate the multiple occurrences of the complex formsthey label.
(Note that this is simply the Common Lisp(Steele Jr., 1984) convention for re-entrant list struc-ture in the rule above.
This is at present only used fornotational compactness; the system does not currentlyattempt to take computational dvantage of re-entrancyduring unification or other processing.
)Adjective phrase semantic representations (ADJ-SEMs) come in two varieties:(MODIFYINO-ADJ NOM-SEM NOM-SEM)and(PREDICATIVE-ADJ NP-SEMANTICS WFF)These represent different semantic types of adjective,and will be explained in a later section.The last major category whose semantic representationwe consider here is the prepositional phrase.
PPs in oursystem are given only partial semantic interpretationsconsisting of the preposition of the PP and the translationof the PP's NP object.
Their representations are thus ofthe following form:(PP-SEM PREP NP-SEMANTICS)5 ENCODING SEMANTIC  CLASSES ASTERMSThe translation from semantic lasses to complex termscan be performed systematically.
In this section wepresent an algorithm for translating semantic classesto terms, designed to work on taxonomies of seman-tic classes represented in a system such as KL-ONE(Schmolze and Israel, 1983) or NIKL (Moser, 1983).It has the advantage, important from the point of view41of such systems, that it correctly handles the distinctionbetween "primitive" and "defined" classes - -"def ined"meaning that the class is simply an intersection of twoor more other classes.The algorithm is seen in Figure 1, where the mainwork is done by the function TRANSLATE.
Throughout,the symbol ":ANY" indicates a "don't care" variable,unifying with anything.
This is in fact the only use ofvariables made.
The operation REGULARIZI:~ is usedto remove non-primitive classes from the taxonomy, andset them aside.
It is simple and we do not give it here.We now consider the classes PERSON, MALE, FE-MALE, ADULT, CHILD, MAN and PRIEST.
MALEand FEMALE are disjoint sub-classes of PERSON, asare ADULT and CHILD.
MAN is the class which is theintersection of ADULT and MALE.
PRIEST is a sub-class of MAN, but not identical to it.
Following are thetranslations the algorithm in Figure 1 gives to several ofthese classes:PERSON ~ (PERSON :ANY :ANY)ADULT ~ (PERSON (ADULT :ANY) :ANY)MALE ~ (PERSON :ANY (MALE:ANY))MAN ~ (PERSON (ADULT :ANY) (MALE :ANY))PRIEST ~ (PERSON (ADULT (PRIEST))(MALE (PRIEST)))Essentially, the algorithm works by mapping each set ofmutnzlly disjoint children of the class to an argumentplace of the term to be associated with that class.
Theterm associated with a class has the same depth as thedepth of the class in the laxonomy.The Iranslation produces by this algorithm are similarto those produced by the algorithm by Mellish (Mellish,1988).
We claim two advantages for ours.
First, andas already pointed out, it takes into account he differ-ence between "if" (primitive) and if-and-only-if (non-primitive) axiomitizations, where it would seem that theMellish algorithm does not.
Second, it is simpler, notrequiring such notions as "paths" and extensions "to"and "beyond" them.As a final comment on the issue of encoding semanticclasses as terms, we note that there is another encodingmethod which may have been overlooked: that is, en-coding each class as a term which has the same numberof arguments as there are classes.
It works as follows.
Inthe argument position corresponding to the class beingtranslated put a "1", and put a "1" in argument posi-tions corresponding to subsuming classes as well.
Inargument positions corresponding to disjoint classes puta "0".
In all other positions put a "dont-care" variable.While perhaps using space inefficiently, this encodingwill have all the desired properties.6 ANALYSIS OF NOUN PHRASES ANDNOUN MODIFIERSThe following is a simplified version of the rule for reg-ular count noun phrases:(NP :NSUBCATFRAME (AGR :P :N) :WI-I(Q-TERM :Q :VAR :NOM5))"--4(DETERMINER :N :WH :NOM1 :NOM2 :Q)(OPTNONPOSADJP (AGR :P :N) :NOM4 :NOM5)(OPTADJP (AGR :P :N) (PRENOMADJ) :NOM3:NOM4)(N-BAR :NSUBCATFRAME (AGR :P :N) :NOM1)(OPTNPADJUNCT (AGR :P :N) :NOM2 :NOM3)This rule generates NPs that have at least a deter-miner and a head noun, and which have zero ormore prenominal superlative or comparative adjectives("fastest", bigger" etc.
), prenominal positive adjectives("red","aUeged") and adjuncts ("in the house", "thatcame from Florida").
Its effect is to take the NOM-SEMsemantics of the head noun (the N-BAR) and thread itthrough the various modifications, add a quantifier and avariable for quantification and deliver the resulting pack-"age as the semantics for the whole NP.The initial NOM-SEM comes from the N-BAR, andis signified by :NOM1, the variable in that position.
Itis first of all passed to the DETERMINER.
Along witha quantifier, :Q, the DETERMINER passes back a pos-sibly modified NOM-SEM, :NOM2.
The reason for thisis that the determiner may be possessive, and a posses-sive determiner ffectively functions as a noun modifierwhich enters into scope relations with other modifiers ofthe NP.
Consider the noun phrase "John's best book".This cannot be analyzed as(SET X (BEST' BOOK') (EQUAL (AUTHOR-OF X)JOHN'))that is, as the subset of the best books in the world thatalso happen to be written by John.
Instead, it must beanalyzed as:(BEST' (SET X BOOK' (EQUAL (AUTHOR-OF X)JOHN')))42TRANSLATE-TAXONOMY (top)::=\[CONJUNCTION-CLASSES : = REGULARIZE (top)TRANSLATIONS : = TRANSLATE (top)(for pai r ing in CONJUNCTION-CLASSESdo tmp := :ANY(for class in pairing\[2\]do tmp := UNIFY(TRANSLATIONS(class) , tmp))TRANSLATIONS(pair ing\[ i \ ] )  := tmp)TRANSLATIONSTRANSLATE (concept) : :=DIS JOINTNESS-CLASSES :=(PICK-ARBITRARY-ORDER(SET s (POWER (CHILDREN concept))(AND (NON-EMPTY s)(FORALL x s (FORALL y s (-> (NOT (= x y))(DISJOINT x y)))))))(for class in DIS JOINTNESS-CLASSESdo (for sub-concept in classdo (for trans in (TRANSLATE sub-concept)do (TRANSLATIONS trans\[l\]) :=(UNIFY (CONS concept(for class' in DIS JOINTNESS-CLASSEScol lect (if (= class class')trans\[2\]:ANY)))(TRANSLATIONS trans\[l \])))))TRANSLATIONS(concept)  :=(CONS concept (for class in DIS JOINTNESS-CLASSES col lect :ANY))TRANSLATIONSFigure 1: Translation Algorithm43The essential point is that the possessive DETERMINERmust carry out its modification before other elements ofthe NP can, yet must still follow all other modificationsin affixing a quantifier to the final result of the NP.
If thedeterminer is conceived of as just a higher-order functionreturning a single value, as in Montague Grammar, it isdifficult to see how this can be done.
The virtue of ourunification approach is that it allows the determiner toreturn as separate values both a quantifier and a suitablymodified nominal.If the determiner is not possessive it simply passes upthe same NOM-SEM it was originally given.
The NOM-SEM returned by the DETERMINER, whether modifiedor not, is then passed down to the adjuncts of the NPas :NOM2, which modify it and return :NOM3.
Thisis then passed to the regular (non-superlative) prenomi-nal adjectives for further modification, returning :NOM4.Finally, :NOM4 is passed to the constituent OPTNON-POSADJP, the optional superlative adjectives.
The finalNOM-SEM, :NOM5, is passed up to become an elementof the complete Q-TERM semantics of the NP.As an example of the action of the modifying ele-ments in the above rule, consider the following rule forgenerating an NP adjunct from a PP:(OPTNPADJUNCT :NOM1 :NOM2)(PP :PP)(MODIFYING-PP :PP :NOM1 :NOM2)The NOM-SEM passed in from the containing NP,:NOM1, is in turn passed down to a constraint node,MODIFYING-PP, which takes the semantics of the PP,:PP, and "computes" the modified NOM-SEM, :NOM2,which is then passed back to the NP as the result of themodification.MODIFYING-PP is used to encompass different kindsof PP modification.
Relational modification, where thePP essentially fills in an argument, is handled by thefollowing solution to MODIFYING-PP:(MODIFYING-PP (PP-SEM (OFPREP) :NP)(NOM (PARAM :NP) :SET :SORT)(NOM (NO-PARAM) :SET :SORT))Since this rule is a constraint node solution, its fight-hand side is empty.
It unifies the NP object of the PPwith the "parameter NP" of the argument nominal.
Ofcourse, it will not be unifiable if the argument nominaldoes not contain a parameter NP, or if the parameter NPof the argument nominal contains the wrong semantictype.The lexical rule for relational noun "salary" is as fol-lows:(N (NOM (PARAM #1=(Q-TERM :Q :VAR(NOM :PARS :SET(PERSON))(SETOF (SAL' #1#))(INANIMATE (DOLLAR-AM'r))(salary)Note that requirement that the filler of the slot be of sortPERSON, and the co-occurence of this filler inside theNOM's set expression.Of course PPs can also occur in a predicative sense.For example, a person can be "in" in a department.
Tohandle this we have the following solution to to the con-straint node PREDICATWE-PP:(PREDICATIVE-PP(PP-SEM (INPREP)#1=(Q-TERM :Q1 :VAR1(NOM :PARS1 :SET1(INANIMATE (DEPTS)))))#2=(Q-TERM :Q2 :VAR2(NOM :PARS2 :SET2 (PERSON)))(EQUAL (DEPT-OF #2#) #1#))Note that this constraint solution will only unify if theclass of the NP object of the PP unifies with DEPTS,and the class of the NP being predicated of unifies withPERSON.When such a PP occurs as an adjunct o an NP, thederivation passes through the following indirect "lifting"rule:(MODIFYING-PP:PP(NOM :PAR :SET :SORT)(NOM :PAR (SET :VAR :SET :WFF) :SORT))---4(PREDICATIVE-PP:PP(Q-TERM (BOUND-Q) :VAR(NOM :PAR :SET :SORT)):WFF)Although the right-hand side of the rule is in this casenot empty, it will like all constraint nodes derive theempty string in the end.44Similar distinctions of modificational power are seenin the case of adjectives, where an adjective like "aver-age" or "previous" has the power to abstract over freeparameters of the noun meaning, and an adjective like"female" does not.
Consider the rule below:(OPTADJP (AGR :P :N) :POSIT :NOM1 :NOM3)----4(ADJP (AGR :P :N) :POSIT :ADJ-SEM)(OPTADJP (AGR :P :N) :POSIT :NOM1 :NOM2)(MODIFIYING-ADJ-READING :ADJ-SEM :NOM2:NOM3)This rule generates a string of one or more adjectives.Nominal semantics is threaded through the adjectivesright to left.
Adjectives like "previous", with the powerto modify the whole noun, have a semantic representa-tion headed by the functor "MODIFYING-ADJ", whileadjectives like "female", which only operate upon indi-vidual elements of the noun's extension, have a repre-sentation headed by the functor "PREDICATIVE-ADJ".The constraint node MODIFYING-ADJ-READING ac-cepts the first kind of adjective unchanged and lifts thesecond kind to the appropriate l vel.
Note that whilepredicative PPs and adjectives can be "lifted" to the nounmodifying level, the converse is not true.
That is, thesystem does not allow "That value is previous" or "Thatsalary is of Clark".7 CONSTRAINT NODES AND THEIRIMPACT ON PARSINGConstraint nodes are generally useful in that they allowone to give a name to a particular condition and use itin multiple places throughout the grammar.
Considerverbs which take PPs and ADJPs as complements.
In"John became happy", it is intended that that the adjec-tive "happy" apply to the subject "John".
It would notmake sense to say "The table became happy".
Similarly,in "I put the book on the floor", the PP "on the floor"is intended to apply to the object NP "the book" and itwould not make sense to say "I put the idea on the floor"Semantic type constraints in such cases clearly hold notjust between the verb and its various arguments, but be-tween the arguments themselves.
A constraint node likePREDICATIVE-PP can be used to express this relation-ship between arguments where it is needed.The HARC system currently employs a bottom-upleft-to-right parser.
The decision to use a bottom-upparser was made in order to facilitate the eventual han-dling of fragmentary and ill-formed input.The parser is based on the algorithm of Graham, Har-rison and Ruzzo (Susan L. Graham, 1980), but has beenmodified to work with a unification grammar(Haas, toappear).
Formally speaking, this algorithm can parsethe kind of grammar we have been discussing withoutany modification, since the constraint nodes and their so-lutions can simply be incorporated into the algorithm'sempty symbols table.For a non-toy domain, however, this increases the sizeof the parse tables intolerably.
We have therefore modi-fied the algorithm so that it treats constraint node emptysymbols specially, not expanding them when the parsetables are built but instead waiting until parse time whereit solves them top-down through a process that might bethought of as a kind of all-paths non-backtracking Pro-log.A problem still appears when constraint nodes receivetraces as arguments.
Until a trace is bound, it of coursecontains very little information, and hence unifies withalmost any constraint node solution.
Since bottom-upparsing often hypothesizes traces, there is a consequentcombinatorial explosion which can lead to slow parsing.The obvious solution to this problem is simply todefer the attempt o solve constraint nodes until thepoint in the parse where they have received adequate in-stantiafion.
The definition of "adequate" clearly differsfrom constraint node to constraint node: in the case ofPREDICATIVE-PP it might be that the preposition andclass of NP object be known.
Until constraint nodesare sufficiently instantiated to bother solving, they cansimply be carried as extra riders on chart edges, beingpassed up as new edges are built.
At the time of writingthis solution is in the process of being implemented.AcknowledgementsThe work reported here was supported by the AdvancedResearch Projects Agency and was monitored by the Of-fice of Naval Research under Contract No.
00014-89-C-0008.
The views and conclusions contained in thisdocument are those of the authors and should not be in-terpreted as necessarily representing the official policies,either expressed or implied, of the Defense AdvancedResearch Projects Agency or the United States Govern-ment.The author would like to thank Andy Haas, who wasthe original impetus behind the change to a unification-45style semantics in the BBN SLS project, and who madeimportant contributions to the ideas presented here.ReferencesS.
Boisen, Y. Chow, A. Haas, R. Ingria, S. Roukos,R.
Scha, D. Stallard, and M. Vilain.
Integration ofSpeech and Natural Language: Final Report.
TechnicalReport 6991, BBN Systems and Technologies Corpora-tion, Cambridge, Massachusetts, 1989.Yen-lu Chow and Richard Schwartz.
The OptimalN-Best algorithm: An efficient procedure for findingthe top N sentence hypotheses.
In Proceedings of theSpeech and Natural Language Workshop October 1989.DARPA, Morgan Kaufmann Publishers, Inc., October1989.Andrew Haas.
A New Parsing Algorithm for UnificationGrammar.
Compational Linguistics, (to appear).C.S.
MeUish.
Implementing systemic lassification byunification.
Computational Linguistics, 14(1):40--51,1988.R.
Montague.
The proper treatment of quantification iordinary english.
In Approaches to Natural Language.Proceedings of the 1970 Stanford Workship on Grammarand Semantics, pages 221-242.
Dordrecht: D.Reidel,1973.Margaret Moser.
An Overview of NIKL.
Technical ReportSection of BBN Report No.
5421, Bolt Beranek andNewman Inc., 1983.Femando C.N.
Pereira and David H.D, Warren.
Definiteclause grammars for language analysis - a survey of theformalism and a comparison with augmented transitionnetworks.
Artificial Intelligence, 13:231-278, 1980.J.
Schmolze and D. Israel.
KL-ONE: Semantics andclassification.
In Research in Knowlege Representationfor Natural Language Understanding, Annual Report: 1September 1982 to 31 August 1983.
BBN Report No.5421, 1983.Guy L. Steele Jr. Common LISP: The Language.
DigitalPress, Digital Equipment Corporation, 1984.Walter L. Ruzzo Susan L. Graham, Michael A. Harrison.An improved context-free r cognizer.
ACM Transactionson Programming Languages and Systems, 2(3):415--461,1980.46
