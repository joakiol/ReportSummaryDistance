Model for Lexical Knowledge 13aseMichio Isoda, Hideo AlsoKeio University, Faculty of Science and TechnologyNoriyuki Kamibayashi and Yoshifnmi MatsunagaFuji Xerox Co. Ltd., System Technology LaboratoryAbst rac tThis paper describes a model for a lexicalknowledge base (LKB).
An LKB is a knowledgebase management system (KBMS) which storesvarious kinds of dictionary knowledge in auniform framework and provides multipleviewpoints to the stored knowledge.KBMSs for natural anguage knowledge will befundamental components of knowledgeableenvironments where non-computer p ofessionalscan use various kinds of support tools fordocument preparation or translation.
However,basic models for such KBMSs have not beenestablished yet.
Thus, we propose a model for anLKB focusing on dictionary knowledge such asthat obtained from machine-readabledictionaries.When an LKB is given a key from a user, itaccesses the stored knowledge associated withthat key.
In addition to conventional directretrieval, the LKB has a more intelligent accesscapability to retrieve related knowledge throughrelationships among knowledge units.
Torepresent complex and irregular relationships,we employ the notion of implicit relationships.
Incontrast o conventional database models whererelationships between data items are staticallydefined at data generation time, the LKBextracts relationships dynamically byinterpreting the contents of stored knowledge atrun time.
This makes the LKB more flexible;users can add new functions or new knowledgeincrementally at any time.
The LKB also has thecapability to define and construct new virtualdictionaries from existing dictionaries.
Thususers can define their own customizeddictionaries suitable for their specific purposes.The proposed model provides a logical foundationfor building flexible and intelligent LKBs.1.
Introduct ionComputers have been powerful support ools forvarious kinds of human activities.
In particular,high performance personal workstations provideconvenient and friendly environments for officeworkers and engineers.
Conventional systems,however, provide only basic support ools such astext editors, text formatters, spelling checkers,and mail handlers.With the progress in natural languageprocessing, database management, and user-machine interface techniques, more advancedsupport tools have emerged.
They includemachine translation systems, style analyzers,personal databases, an electronic book\[Weyer82\], and an electronic encyclopedia\[Weyer85\].
Currently, these systems are in theexperimental stage and are being implementedand used individually.
They will eventually beintegrated to build knowledgeable environmentsin which non-computer professionals can performtheir tasks more quickly and easily.The fundamental components of these tools arelarge knowledge bases which store knowledgeabout natural anguages and application areas.Since many application programs will share thesame kind of knowledge, these knowledge basesmust be application-independent componentsthat can be accessed from application programsthrough some predefined interfaces.Thus, it is importmnt to establish methodologiesto construct hese knowledge bases \[Amsler84,Calzorali84a\].
The methodologies include basicmodels, architectures, knowledge representationschemes, and implementation techniques.
Sinceknowledge representation schemes and theirusage vary widely, it is difficult o build a generalknowledge base capable of coping with allapplications described above.Thus, as a first step to building these generalknowledge bases, we propose a model for an LKBfocusing on lexical knowledge such as thoseobtained from machine-readable dictionaries\[ICOT85\].
Methodologies developed for the LKBmay then be applied to other kinds of knowledgebases.LKBs provide intelligent access as well asconventional keyword access to storedknowledge.
Users can customize their owndictionaries, and this personalization i cludesmarking and annotating existing dictionariesand defining new access paths through which thesystem looks up requested ictionaries.
Theaddition of new knowledge and functions can bedone incrementally; it does not requirereorganization of the existing knowledge base orrecompilation f the whole system.2.
Lexical Knowledge BasesIn this section we will give an overview of theproposed LKBs.The most basic capability of the LKB is theconventional keyword search.
Given a keywordfrom a user, the LKB retrieves a piece of storedknowledge whose headword matches thekeyword.
We call an access unit of storeddictionary knowledge a lexical knowledge unit(LKU).
Headwords in machine-readabledictionaries are usually standardized; i.e.
withoutinflections or conjugations.
Since users won'talways give standardized headwords, it isnecessary to adopt conversion techniques fromnon-standardized keywords to standardized ones.Although the direct retrieval capability aloneallows users quick and convenient access tostored lexical knowledge, it is possible to providea more intelligenL access.
When an LKU islooked up by a given key, the LKB can interpretits contents and retrieve related LKUs throughrelationships among the LKUs.
The collectedLKUs are then shown to the user.
When peoplewrite or translate documents, they often use more451than one dictionary, consulting one after another.With bulky hardcopy dictionaries, many look-upscan become bothersome.
An LK_B can combineand access multiple dictionaries at a time andthus reduce the users' effort to find desireddictionary descriptions.Because it is preferable to allow users to usetheir own customized ictionaries, an LKB musthave mechanisms to change the activation pathwhich is specified by a combination ofdictionaries.
The combination is defined in termsof the relationships between dictionaries.
Forexample, an LKU of a Japanese-Englishdictionary may contain such information as theEnglish translation of Japanese headwords,synonyms, antonyms, idioms, related words,usages, or grammatical information.
Some usersmay want to combine this Japanese-Englishdictionary with an English usage dictionarythrough English-Japanese relationships, andothers may want to combine it with an English-English dictionary through synonymrelationships.Since the expected users of the LKB are non-computer professionals, the customization of anew dictionary should be easy and should notrequire users to write programs.
In our model, anew object in the system (dictionaries andassociation interpreters described in 3.3) isconstructed by combining a set of smaller,relatively independent, self-contained objects.The newly defined objects can be used recursivelyas parts of more complicated objects.
Thus userscan construct heir customized ictionaries likebuilding-blocks.3.
Model for Lexical Knowledge BaseAssociationI / \ Interpreters.. " " (AIPs)\[\] Lexical Knowledge Unit (LKU)\[\] LKU aecessed by key\[\] \[\] LKUsaceessedthroughimplicit relationships..... ~- Implicit relationshipFig.1 Model for Lexical Knowledge Base3.1 Lexical Knowledge UnitA unit of knowledge which is stored in a LKB iscalled a lexical knowledge unit (LKU).
Moreprecisely, a lexical knowledge unit is anindependent description which is interpreted by ahuman or a computer to obtain lexical knowledge452about a word.
The format of an LKU is:<Keys, Contents>where Keys are words which are described in theLKU and are used to access this LKU.
Contentsare descriptions about the keys, and they arefreely formatted.For example an LKU of the word 'happy' is:happy 1. glad; feeling contentment.
?
I'mhappiest when I'm playing baseball.1\] 2 ....In this example, "happy" is a key of this LKU,and the string "1. glad; feeling ..." is the content.3.2 Implicit RelationshipsThere are complex and irregular relationshipsamong words in the LKB.
To represent heserelationships, we employ the notion of implicitrelationships which will be explained in thissection.In conventional database models like therelational model or the network model,relationships among data items are representedexplicitly by means such as pointers or theequality of field values.
We call theserelationships explicit relationships.
On the otherhand, we define an implicit relationship to be arelationship that is represented in an LKU onlyimplicitly; there are no notions like physicalpointers or fixed fields in an LKU.
The contentsof an LKU are freely formatted; they are treatedas a sequence of byte data.
Implicit relationshipsin a LKU can be translated into explicit onesthrough an interpretation at run time.Procedures that interpret the contents of an LKUare called associativn interpreters ( AIPs ).If all the relationships among the LKUs had tobe represented explicitly, the resulting dataschema would be highly application-dependentand inflexible.
It is impractical and unnecessaryto represent all possible relagonships explicitlybecause some relationships are difficult to extractand unnecessary for immediate applications.Thus, when a user organizes data for a systemthat uses explicit relationships, he will extractand explicitly represent only those relationshipsthat are useful for his applications.
Time andlabor consuming reorganization of data schemawould then be required whenever a newapplication eeded relationships which have notyet been extracted.In the implicit relationship approach, however,relationships among LKUs are extracted at runtime, not at the data generation time.
Whenexisting AIPs cannot extract relationshipsnecessary for a new application, only additions ofnew AIPs are requested; reorganization of dataschema is not necessary.3.3 Association InterpretersAn association interpreter interprets thecontents of a given LKU, extracts ome implicitrelationships in the LKU, and outputs a set ofkeys and auxiliary information as explicitrepresentations of the implicit relationships.Different /kiPs extract different relationshipsfrom the same LKU.
Simple AIPs can beimplemented using pattern matching techniques;complex AI:Ps may employ parsing techniqueswhich have been adopted in many languageprocessing systems \[Calzorali84b, Nagao80\].As an example of a simple AIP, we will consideran AIP which returns synonyms such as 'glad'from an LKU of the word 'happy' described insection 3.1.
The following algorithm realizes thisAIP:(1)Divide the contents into a set of individualcomponents (ex., definitions of the word,examples, idioms,...) using some specialdelimitersuchas'?
'or' \]\[ '.
(2)Eliminate verything except definitions.
(3)Further divide the definitions into a list ofstrings delimited by ';' and '.'.
(4)Eliminate strings which consist of morethan one word (i.e., those which containblanks).We can implement this AIP by combining fourprocedures, each performing each step of theabove algorithm.
We call these procedures filters.An AIP is defined in terms of a combination offilters.
One can define a new AIP havingdifferent functions by specifying the differentcombinations of filters.
For example, if we use afilter which takes only the first definition of aword instead of one that performs tep (2), we canmake an AIP that returns synonyms from onlythe first definition of a word.
If existing filtersare not sufficient enough to make a new AIP, auser will have to write only those filter programshaving functions that existing filters don'talready have.
Thus, this scheme requires anly aminimum programming effort for users.In implementing AIPs in this scheme, it isimportant to standardize the input/outputinterface of filters, because different,nonstandardized interfaces restrict theircombinations unnecessarily.
To maximize theutility of each filter, the interface should bestandardized as transparent data, independent ofspecific dictionaries or meanings.3.4 Base Dict ionary and Virtual Dict ionaryA dictionary is defined as a set of LKUs of thesame type.
For example, a Japanese-Englishdictionary is a set of LKUs of the same type; thekeys of each LKU are Japanese words and thecontents correspond to English words, idioms,and examples.
A query to a dictionary is a keywith some auxiliary information, and the resultsof the query are corresponding LKUs.
There aretwo types of dictionaries: base dictionaries andvirtual dictionaries.
A base dictionary has itsLKUs actually stored in permanent storage whileLKUs in a virtual dictionary arc dynamicallymade from LKUs in base dictionaries.
A virtualdictionary is composed of one or more basedictionaries connected by AIPs.
The virtualdictionary mechanism allows users to definemultiple views of the knowledge in the LKB.When a virtual dictionary is given a query, itreturns the answer through the following steps:(1) Access base dictionaries with keys given inthe query.
(2)Interpret he resulting LKUs to extractkeys for accessing related LKUs using an AIP.
(3) Access other base dictionaries with thekeys to obtain related LKUs(4) Repeat steps (2) and (3) as necessary.
(5) Transfom~ LKUs obtained so far intodesired folzns and return them as answers tothe query.In this way a virtual dictionary repeats a cycle ofaccessing base dictionaries and interpretingLKUs to respond to queries.An example of a virtual dictionary is an English-Japanese synonym dictionary built from anEnglish-English dictionary and an English-Japanese dictionary connected by an AIPdescribed in 3.3.
This virtual dictionary takes anEnglish word as a query and returns Japanesetranslations of synonyms of the given Englishword.4.
Concluding RemarksIn this paper we have presented the basic modelfor a lexical knowledge base which stores variouskinds of dictionary knowledge in a uniformfrmnework and provides multiple viewpoints tothe stored knowledge.
The notion of implicitrelationship is introduced to represent complexrelationships among lexical knowledge units.
Byintroducing the notion of the implicitrelationships the electronic dictionary caninterpret he lexical knowledge in various waysand thus allow the incremental development ofelectronic dictionaries.
Virtual dictionaries andassociation interpreters can be built from smallercomponents (base/virtual dictionaries or filters),and this scheme minimizes the users' efibrts todefine their own customized ictionaries.Currently we are implementing a prototype LKBsystem based on the proposed model.
Our futureplans are (1) to verify the utility of the proposedmodel and (2) to study friendly user-interface.References\[Amsler84\] R.A.Amsler, Lexical KnowledgeBases, COLING 84, 1984\[Calzorali84a\] N Calzorali, Machine ReadableDictionaries, Lexical Data Bases, and the LexicalSystem, COLING 84, 1984\[Calzorali84b\] N. Calzorali, Detecting Patterns ina Lexical Data Base, COLING 84, 1984\[ICOT85\] T. Ishiwata, H.Tanaka, H.Miyoshi, YTanaka, S.Amano, H.Uchida, T.Ogino, and TYokoi, Basic Specification of the MachineReadable Dictionary, ICOT Technical Report TR-100, 1985\[Nagao80\] M.Nagao, J.Tsujii, Y.Ueda, M.Takiytuna, An Attempt to ComputerizeDictionary Data Base, COLING 80, 1980\[Weyer82\] S.Weyer, Searching for Information ina Dynamic Book, Xerox PARC SCG-82-I, feb.1982\[Weyer85\] S.Weyer and A.Borning, A PrototypeElectronic Encyclopedia, ACM Trans.
on OfficeInformation Systems, Vol.3, No.l, Jan. 1985453
