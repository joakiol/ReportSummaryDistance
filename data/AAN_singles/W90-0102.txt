Generation andSynchronous Tree-Adjoining GrammarsStuart M. ShieberAiken Computation LaboratoryDivision of Applied SciencesHarvard UniversityCambridge, MA 02138Yves SchabesDepartment of Computer andInformation ScienceUniversity of PennsylvaniaPhiladelphia, PA 19104AbstractTree-adjoining grammars (TAG) have been proposed asa formalism for generation based on the intuition thatthe extended omain of syntactic locality that TAGsprovide should aid in localizing semantic dependenciesas well, in turn serving as an aid to generation fromsemantic representations.
We demonstrate that thisintuition can be made concrete by using the formal-ism of synchronous tree-adjoining grammars.
The useof synchronous TAGs for generation provides olutionsto several problems with previous approaches to TAGgeneration.
Furthermore, the semantic monotonicityrequirement previously advocated for generation gram-mars as a computational id is seen to be an inherentproperty of synchronous TAGs.Introduct ionThe recent history of grammar eversing can be viewedas an effort to recover some notion of semantic local-ity on which to base a generation process.
For in-stance, Wedekind (1988) requires a property of a gram-mar that he refers to as connectedness, which spec-ifies that complements be semantically connected totheir head.
Shieber (1988) defines a notion of semanticmonoLonicity, a kind of compositionality property thatguarantees that it can be locally determined whetherphrases can contribute to forming an expression witha given meaning.
Generation schemes that reordertop-down generation (Dymetman and Isabelle, 1988;Strzalkowski, 1989) so as to make available informationthat well-founds the top-down recursion also fall intothe mold of localizing semantic information.
Semantic-head-driven generation (Shieber et al, forthcoming;Calder et al, 1989) uses semantic heads and their com-plements as a locus of semantic locality.Joshi (1987) points out that tree-adjoining grammarsmay be an especially appropriate formalism for gen-eration because of their syntactic locality properties,which, intuitively at least, ought to correlate with somenotion of semantic locality.
The same observation runsas an undercurrent in the work of McDonald and Puste-jovsky (1985), who apply TAGs to the task of genera-tion.
As these researchers note, the properties of TAGsfor describing the syntactic structuring of a natural an-guage mesh quite naturally with the requirements ofnatural-language neration.
Nonetheless, generation isnot, as typically viewed, a problem in natural-languagesyntax.
Any system that attempts to use the TAG for-malism as a substrate upon which to build a generationcomponent must devise some mechanism by which aTAG can articulate appropriately with semantic infor-mation.
In this paper, we discuss one such mechanism,synchronous TAGs, which we have previously proposedin the arena of semantic interpretation and automatictranslation, and examine how it might underly a gener-ation system of the sort proposed by Joshi and McDon-ald and Pustejovsky.
In particular, synchronous TAGsallow for a precise notion of semantic locality corre-sponding to the syntactic locality of pure TAGs.Scope of the PaperThe portion of the full-blown generation problem thatwe address here is what might be referred to as the tac-tical as opposed to the strategic generation problem.That is, we are concerned only with how to computeinstances of a well-defined relation between strings andcanonical ogical forms 1 in the direction from logicalforms to strings, a problem that is sometimes referredto as "reversing" a grammar.
This aspect of the gen-eration problem, which ignores the crucial issues in de-termining what content to communicate, what predi-cates to use in the communication, and so forth, canbe seen as the reverse of the problem of parsing natu-ral language to derive a semantic representation.
Thecitations in the first paragraph can serve to place theissue in its historical research context.
The other trulydifficult issues of general natural-language productionare well beyond the scope of this paper.1This issue of canonicality of logical forms is discussedby Shieber (1988).9Semantics in GenerationAlthough Joshi discusses at length the properties ofTAGs advantageous to the generation task (1987), hedoes not address the issue of characterizing a semanticrepresentation ffof which generation can proceed.
Mc-Donald and Pustejovsky do mention this issue.
BecauseTAGs break up complex syntactic structures into ele-mentary structures in a particular way, their semanticrepresentation follows this structuring by breaking upthe logical form into corresponding parts.
McDonaldand Pustejovsky consider the sentence(1)How many ships did Reuters report that Iraq hadsaid it attacked?Its semantic representation follows the decomposi-tion of the sentence into its elementary TAG trees--corresponding (roughly) to "How many ships .
.
.
i t  at-tacked", "did Reuters report that .
.
."
,  "Iraq had said.
.
."
.
McDonald and Pustejovsky describe their se-mantic representation: "The representation weuse ...amounts to breaking up the logical expression i to indi-vidual units and allowing them to include references toeach other."
The units for the example at hand wouldbe:Ux = ~(quantity-of-ships).attack( Iraq, quantity-of-ships)U2 = say( Iraq, UI)U3 = report(Renters, Us)By composing the units using substitution ofequals forequals, a more conventional logical form representationis revealed:report( Renters,say( Iraq,)t( quantity-of-ships).attack( lraq, quantity-of-ships)))Three problems present hemselves.First, the particular decomposition f the full seman-tic form must be explicitly specified as part of the inputto the generation system.Second, the basic operation that is used (implicitly)to compose the individual parts, namely substitutiondoes not parallel the primitive operation that TAGsmake available, namely adjunction.
In the particularexample, this latter problem is revealed in the scope ofthe quantity quantifier being inside the say predicate.The more standard representation f scoping would beakin to)t( quantity-of-ships).
(2) report( Renters,say( Iraq, attack( Iraq,quantity-of-ships)))but this requires one of the elementary semantic units tobe "broken up".
Consequently, McDonald and Puste-jovsky note that they cannot have the logical form (2)as the source of the example sentence (1).Third, the grammatical information alone does notdetermine where adjunctions should occur.
McDonaldand Pustejovsky allude to this problem when they notethat "the \[generator\] must have some principle by whichto judge where to start."
In their own example, theysay that "the two pending units, U2 and U3, are thenattached to this matrix ... into complement positions,"but do not specify how the particular attachment po-sitions within the elementary trees are chosen (whichof course has an impact on the semantics).
The rela-tionship between syntax and semantics that they pro-pose links elementary trees with units of the realizationspecification.
Apparently, a more finely structured rep-resentation is needed.Synchronous TAGsIn order to provide an explicit representation forthe se-mantics of strings generated by a TAG, and in so doingprovide a foundation for the generation efforts of Joshiand McDonald and Pustejovsky, we present an exten-sion to TAGs, synchronous TAGs, which was originallydeveloped just to characterize the declarative r lation-ship between strings and representations of their se-mantics.
The formalism allows us to circumvent someof the problems discussed above.The idea underlying synchronous TAGs is simple.One can characterize both a natural anguage and alogical form language with TAGs.
The relation be-tween strings in the two languages ( entences and log-ical forms, respectively) can then be rigorously statedby pairing the elementary trees of the two grammarsand linking the corresponding nodes, forming a newgrammar whose elements are linked pairs of elementarytrees.The synchronous TAG formalism addresses all threeof the problems mentioned above.
First, a synchronousTAG characterizes a relation between languages.
Thus,we need not assume that the sentences of the logicalform language come pre-packaged into their constituentunits (just as in the case of sentence parsing, where weneed not assume that sentences come pre-bracketed).Second, the operations that are used to build the twostructures--natural l nguage sentences and semanticrepresentations--are stated using the same kinds ofoperations, as they are both characterized by TAGs.Third, the linking of individual nodes in the elemen-tary trees of a synchronous TAG provides just the fine-grained relationship between syntax and semantics thatallows decisions about where to perform semantic op-erations to be well-defined.An  Example  Synchronous  TAGWe introduce synchronous TAGs by example, contin-uing with an exegesis of the sentence that McDonaldand Pustejovsky focus on, and following roughly the100l:How many sh~sks ~I ~ attack lraq qlraq V NPI Iattacked e iI ~ said lraq F*Iraq Aux VPhad V S*NAIsaidAux SI ~ report Reutersdid NP VPIReuters Vreport Comp S*NAIthatF*Figure 1: Example Synchronous TAGstructure of their TAG analysis.
2A synchronous TAG sufficient for this example in-cludes the three pairings of trees (labeled or, f~l, and/~2)found in Figure 1.
Note that the first components of thethree pairs constitute a TAG grammar sufficient o gen-erate the sentence "How many ships did Reuters reportthat Iraq attacked" or "How many ships did Reutersreport that Iraq said that Iraq attacked".
The secondcomponents generate strings in a logical form language.The syntax of that language includes uch phrase typesas formula (F) or abstracted property (A).
The obviouslinearization of such trees will be assumed, so that thelogical form in given for the sample sentence is in thelanguage.
Some of the nodes in the pairs are linked;formally, the interpretation of these links is that oper-2 The linguistic analysis implicit in the TAG English frag-ment that we present is not proposed as an appropriateone in general.
It merely provides ufficient structure tomake the points vis-k-vis generation.
Furthermore, the treesthat we present here for expository purposes as elementaryshould actually themselves be built from more primitivetrees.
Finally, we gloss over details such as features nec-essary to control for agreement or verb-form checking, andwe replace the pronoun with its proper noun antecedent tofinesse issues in pronominal interpretation.ations on the tree pairs must occur at both ends of alink.
For simplicity, we have marked only those linksthat will be needed for the derivation of the samplesentence.Derivation in the synchronous grammar proceeds bychoosing a pairing of initial trees from the grammarand repeatedly updating it by the following three-stepprocess: 31.
Choose a link to act upon.2.
Choose a pairing such that the two trees can respec-tively act on (substitute at or adjoin at) the respec-tive ends of the link chosen in Step 1.3.
Remove the chosen link from the trees being updatedand perform the two operations, one in each of thetrees.
If the trees in the chosen pairing themselveshave links, these are preserved in the result.For instance, we might start with the initial tree paira from Figure 1.
We choose the sole link in a, andchoose ~1 as the tree pair to operate with, as the firstcomponent of ~1 can operate (by adjunction) on an S3A fuller description of the formal aspects of synchronousTAGs can be found in a previous paper (Shieber and Sch-abes, forthcoming).11a +131:s~'~-~"How many ships NP VPFIraq Aux VP I attack lraq qhad.
Vsaid NP VPlraq V NPI Iattacked eiHow many ships Aux Sdid NP VPReuters VIreportreportgACompthat NP VPIraq AuxIhadReuters F.....iT',-...said l m q ~attack Iraq qVPAVsaid NP VPIraq V NPI IattackedFigure 2: Results of Synchronous Derivation Stepsnode, and the second on an F node as required by thechosen link.
The result of performing the adjunctionsis the pairing given as a + fll in Figure 2.
The linkin the fll pair is preserved in the resultant, and canserve as the chosen link in the next round of the deriva-tion.
This time, we use f12 to operate at each end of thelink resulting in the pairing labeled a + fil + fi2.
Thispairing manifests the association between the Englishstring "How many ships did Reuters report that Iraqsaid that Iraq attacked" and the logical form represen-tation in (2).Returning to the three issues cited previously, thesynchronous TAG presented here:1.
Makes the decomposition of the logical forms im-plicit in the grammar just as the decomposition ofthe natural-language expressions are, by stating the..structure of logical forms grammatically.Allows the same operations to be used for composingboth natural-language expressions and semantic rep-resentations a both are stated with the same gram-matical tools.Makes the fine-grained correspondance b tween ex-pressions of natural language and their meanings ex-plicit by the technique of node linking.The strong notion of semantic locality that synchronousTAGs embody makes these results possible.
This se-mantic locality, in turn, is only possible because the ex-tended omain of locality found in pure TAGs makes itpossible to localize dependencies that would otherwisebe spread across everal primitive structures.12Trans la t ion  w i th  Synchronous  TAGsSynchronous TAGs as informally described here declar-atively characterize a relation over strings in two lan-guages without priority of one of the languages overthe other.
Any method for computing this relation inone direction will perforce be applicable to the otherdirection as well.
The distinction between parsing andgeneration is a purely informal one depending merely onwhich side of the relation one chooses to compute from;both are instances of a process of translating betweentwo TAG languages appropriately synchronized.The question of generation with synchronous TAGsreverts then to one of whether this relation can be com-puted in general.
There are many issues involved inanswering this question, most importantly, what theunderlying TAG formalism (the base formalism) is thatthe two linked TAGs are stated in.
The simple exam-ple above required a particularly simple base formalism,namely pure TAGs with adjunction as the only opera-tion.
The experience of grammar writers has demon-strated that substitution is a necessary operation tobe added to the formalism, and that a limited formof feature structures with equations are helpful as well.Work on the use of synchronous TAGs to capture quan-tifier scoping possibilities makes use of so-called multi-component TAGs.
Finally, the base TAGs may be lex-icalized (Schabes et al, 1988) or not.Once the base formalism has been decided upon (wecurrently are using lexicalized multi-component TAGswith substitution and adjunction), a simple translationstrategy from a source string to a target is to parse thestring using an appropriate TAG parser for the baseformalism.
Each derivation of the source string canbe mapped according to the synchronizing links in thegrammar to a target derivation.
Such a target deriva-tion defines a string in the target language which is atranslate of the source string.In the case of generation, the source string is a se-mantic representation, the target is a natural-languagerealization.
For example, the logical form (2) has a sin-gle derivation in the pure TAG formed by projecting thesynchronous TAG onto its semantic omponent.
(Wemight notate the semantic components with a(sem),~l(sem), and fl2(sem), and analogously for the syntac-tic components.)
That derivation can be recovered by"parsing" the logical form with the projected logicalform grammar, as depicted in Figure 3.
The pairingswhose semantic omponents were used in this deriva-tion and the links operated on implicitly define a corre-sponding derivation on the syntactic side.
The yield ofthis derivation is a string whose meaning is representedby the logical form that we started with.The target derivation might not, unlike in the exam-ple above, be in canonical form (as defined by Vijay-Shaaaker (1988)), and consequently must be normalizedto put it into canonical form.
Under certain config-urations of links, the normalization process is nonde-~q .report(Reuters,said(lraq,attack(Iraq,q)))parsea (sere) a (syn)12 linking 12fll (sem) ~ fll (syn)I o I o8 2 CsynyieldsHow many shipsdid Reuters reportthat Iraq had saidIraq attacked?Figure 3: Generation by Derivation Translationterministic; thus one source derivation (necessarily incanonical form by virtue of properties of the parsing al-gorithm) may be associated with several canonical tar-get derivations.
In translation from naturM languageto logical forms, the multiple translates typically corre-spond to scope ambiguities in the source sentence (asquantifier scope or scope of negation or adverbs).
Onthe other hand, we have not observed the linking config-urations that give rise to such ambiguities in translatingin the other direction, that is, in performing eneration.In previous work, one of us noted that generationaccording to an augmented context-free grammar canbe made more efficient by requiring the grammar tobe semantically monotonic (Shieber, 1988); the derivedsemantics for an expression must include, in an appro-priate sense, the semantic material of all its subcon-stituents.
It is interesting to note that synchronousTAGs are inherently semantically monotonic, and thecomputational dvantages that accrue to such gram-mars apply to synchronous TAG generation as well.Furthermore, it is reasonable to require that the se-mantic component of a synchronous TAG be iexical-ized (in the sense of Schabes et al (1988)), allowing formore efficient parsing according to the semantic gram-mar and, consequently, more efficient generation.
Inthe case of augmented context-free grammars, the se-mantic monotonicity requirement precludes "lexicaliza-13tion" of the semantics.
It is not possible to requirenontrivial semantics to be associated with each lexi-cal item.
This fact, and the inefficiencies of genera-tion thatfollow from it, was the initial motivation forthe move to semantic-head-driven generation (Shieberet al, forthcoming).
The efficiencies that that algorith-mgains for augmented-context-free generation i here inthe synchronous TAG generation process if the semanticgramamr is lexicalized.
In summary, just as lexicaliza-tion of the syntactic grammar aids parsing (Schabes andJoshi, 1989), so lexicalization of the semantic grammaraids generation.The simple generation algorithm that we have justpresented seems to require that we completely analyzethe logical form before generating the target string, asthe process is a cascade of three subprocesses: parsingthe logical form to a source derivation, mapping fromsource to target derivation, and computing the targetderivation yield.
As is common in such cases, portionsof these computations can be interleaved, so that gen-eration of the target string can proceed incrementallywhile traversing the source logical form.
To what ex-tent this incrementality can be achieved in practice de-pends on subtleties in the exact formal definition ofsynchronous TAG derivation and properties of particu-lar grammars; a full explication is beyond the scope ofthis paper.ConclusionThe extended omain of locality that tree-adjoininggrammars enjoy would seem to make them ideal candi-dates for the task of tactical generation, where seman-tic locality is of great importance.
Synchronous TAGs,which extend pure TAGs to allow for mappings betweenlanguages, provide a formal foundation for this intuitionby making explicit the semantic locality that generationrequires.AcknowledgementsThis research was partially funded by ARO grantDAAG29-84-K-0061, DARPA grant N00014-85-K0018,and NSF grant MCS-82-19196 at the University ofPennsylvania.
We are indebted to Aravind Joshi forhis support of this research.BibliographyJonathan Calder, Mike Reape, and Hank Zeevat.
An al-gorithm for generation i  unification categorial gram-mar.
In Proceedings of the 4th Conference of the Eu-ropean Chapter of the Association for ComputationalLinguistics, pages 233-240, Manchester, England, 10-12 April 1989.
University of Manchester Institute ofScience and Technology.Marc Dymetman and Pierre Isabelle.
Reversible logicgrammars for machine translation.
In Proceedings ofthe Second International Conference on Theoreticaland Methodological Issues in Machine Translation ofNatural Languages, Pittsburgh, Pennsylvania, 1988.Carnegie-Mellon University.Aravind K. Joshi.
The relevance of tree adjoining ram-mar to generation.
In Gerard Kempen, editor, Nat-ural Language Generation, chapter 16, pages 233-252.
Martinus Nijhoff Publishers, Dordreeht, Hol-land, 1987.David D. McDonald and James D. Pustejovsky.
TAGsas a grammatical formalism for generation.
In Pro-ceedings of the 23rd Annual Meeting of the Associ-ation for Computational Linguistics, pages 94-103,University of Chicago, Chicago, Illinois, 8-12 July1985.Yves Schabes and Aravind K. Joshi.
The relevance oflexicalization to parsing.
In Proceedings of the Inter-national Workshop on Parsing Technologies, pages339-349, Pittsburgh, Pennsylvania, 28-31 August1989.
Carnegie-Mellon University.Yves Schabes, Anne Abeill~, and Aravind K. Joshi.Parsing strategies with 'lexicalized' grammars: Ap-plication to tree adjoining grammars.
In Proceedingsof the 12 th International Conference on Computa-tional Linguistics (COLING'88), Budapest, August1988.Stuart M. Shieber and Yves Schabes.
Synchronous tree-adjoining rammars.
In Proceedings of the 13th Inter-national Conference on Computational Linguistics,University of Helsinki, Helsinki, Finland, forthcom-ing.Stuart M. Shieber, Gertjan van Noord, Fernando C. N.Pereira, and Robert C. Moore.
Semantic-head-drivengeneration.
Computational Linguistics, forthcoming.Stuart M. Shieber.
A uniform architecture for pars-ing and generation.
In Proceedings of the 12th Inter-national Conference on Computational Linguistics,pages 614-619, Karl Marx University of Economics,Budapest, Hungary, 22-27 August 1988.Tomek Strzalkowski.
Automated inversion of a unifi-cation parser into a unification generator.
TechnicalReport 465, Department of Computer Science, NewYork University, New York, New York, 1989.K Vijay-Shanker.
A Study of Tree Adjoining Gram-mars.
PhD thesis, University of Pennsylvania,Philadelphia, Pennsylvania, 1988.Jfirgen Wedekind.
Generation as structure drivenderivation.
In Proceedings of the 12th InternationalConference on Computational Linguistics, pages 732-737, Budapest, Hungary, 1988.14
