Proceedings of the NAACL HLT 2010: Demonstration Session, pages 37?40,Los Angeles, California, June 2010. c?2010 Association for Computational LinguisticsInteractive Predictive Parsing using a Web-based Architecture?Ricardo Sa?nchez-Sa?ez?
Luis A. Leiva?
Joan-Andreu Sa?nchez?
Jose?-Miguel Bened??
?Instituto Tecnolo?gico de Informa?ticaUniversidad Polite?cnica de Valencia{rsanchez,luileito,jandreu,jbenedi}@{?dsic,?iti}.upv.esAbstractThis paper introduces a Web-based demon-stration of an interactive-predictive frameworkfor syntactic tree annotation, where the user istightly integrated into the interactive parsingsystem.
In contrast with the traditional post-editing approach, both the user and the sys-tem cooperate to generate error-free annotatedtrees.
User feedback is provided by means ofnatural mouse gestures and keyboard strokes.1 IntroductionThere is a whole family of problems within the pars-ing world where error-free results, in the form ofperfectly annotated trees, are needed.
Constructingerror-free trees is a necessity in many tasks, suchas handwritten mathematical expression recognition(Yamamoto et al, 2006), or new gold standard tree-bank creation (de la Clergerie et al, 2008).
It isa fact that current state-of-the-art syntactic parsersprovide trees that, although of excellent quality, stillcontain errors.
Because of this, the figure of a humancorrector who supervises the annotation process isunavoidable in this kind of problems.When using automatic parsers as a baseline forbuilding perfect syntactic trees, the role of the hu-man annotator is to post-edit the trees and correct theerrors.
This manner of operating results in the typ-ical two-step process for error correcting, in whichthe system first generates the whole output and then?Work partially supported by the Spanish MICINN underthe MIPRCV ?Consolider Ingenio 2010?
(CSD2007-00018),MITTRAL (TIN2009-14633-C03-01), Prometeo (PROME-TEO/2009/014) research projects, and the FPU fellowshipAP2006-01363.
The authors wish to thank Vicent Alabau forhis invaluable help with the CAT-API library.the user verifies or amends it.
This paradigm israther inefficient and uncomfortable for the humanannotator.
For example, in the creation of the PennTreebank annotated corpus, a basic two-stage setupwas employed: a rudimentary parsing system pro-vided a skeletal syntactic representation, which thenwas manually corrected by human annotators (Mar-cus et al, 1994).
Other tree annotating tools withinthe two-step paradigm exist, such as the TreeBanker(Carter, 1997) or the Tree Editor TrEd1.With the objective of reducing the user effort andmaking this laborious task easier, we devised an In-teractive Predictive framework.
Our aim is to putthe user into the loop, embedding him as a part ofthe automatic parser, and allowing him to interact inreal time within the system.
In this manner, the sys-tem can use the readily available user feedback tomake predictions about the parts that have not beenvalidated by the corrector.In this paper, we present a Web-based demo,which implements the Interactive Predictive Parsing(IPP) framework presented in (Sa?nchez-Sa?ez et al,2009).
User feedback (provided by means of key-board and mouse operations) allows the system topredict new subtrees for unvalidated parts of the an-notated sentence, which in turn reduces the humaneffort and improves annotation efficiency.As a back-end for our demo, we use a more pol-ished version of the CAT-API library, the Web-basedComputer Assisted Tool introduced in (Alabau et al,2009).
This library allows for a clean application de-sign, in which both the server side (the parsing en-gine) and the client side (which draws the trees, cap-tures and interprets the user feedback, and requests1http://ufal.mff.cuni.cz/?pajas/tred/37(a) System: output tree 1 (b) User: span modification (c) System: output tree 2Figure 1: An interaction example on the IPP system.parsed subtrees to the server) are independent.
Oneof the features that steam from the CAT-API libraryis the ability for several annotators to work concur-rently on the same problem-set, each in a differentclient computer sharing the same parsing server.Interactive predictive methods have been success-fully demonstrated to ease the work of transcrip-tors and translators in fields like Handwriting TextRecognition (Romero et al, 2009; Toselli et al,2008) and Statistical Machine Translation (Ortiz etal., 2010; Vidal et al, 2006).
This new paradigmenables the collaboration between annotators acrossthe globe, granting them a physical and geographicalfreedom that was inconceivable in the past.2 Interactive Predictive ParsingA tree t, associated to a string x1|x|, is composedby substructures that are usually referred as con-stituents.
A constituent cAij is defined by the non-terminal symbol A (either a syntactic label or a POStag) and its span ij (the starting and ending indexeswhich delimit the part of the input sentence encom-passed by the constituent).Here follows a general formulation for the non-interactive parsing scenario.
Using a grammaticalmodel G, the parser analyzes the input sentence x ={x1, .
.
.
, x|x|} and produces the parse tree t?t?
= arg maxt?TpG(t|x), (1)where pG(t|x) is the probability of parse tree t giventhe input string x using model G, and T is the set ofall possible parse trees for x.In the interactive predictive scenario, after obtain-ing the (probably incorrect) best tree t?, the user isable to individually correct any of its constituentscAij .
The system reacts to each of the corrections in-troduced by the human, proposing a new t??
that takesinto account the afore-mentioned corrections.The action of modifying an incorrect constituent(either setting the correct span or the correct label)implicitly validates a subtree that is composed bythe partially corrected constituent, all of its ancestorconstituents, and all constituents whose end span islower than the start span of the corrected constituent.We will name this subtree the validated prefix treetp.
When the user replaces the constituent cAij withthe correct one c?Aij , the validated prefix tree is:tp(c?Aij ) = {cBmn : m ?
i, n ?
j,d(cBmn) ?
d(c?Aij )} ?
{cDpq : p >= 1 , q < i}(2)with d(cBmn) being the depth of constituent cBmn.When a constituent correction is performed, theprefix tree tp(c?Aij ) is fixed and a new tree t??
that takesinto account the prefix is proposedt??
= arg maxt?TpG(t|x, tp(c?Aij )).
(3)Given that we are working with context-freegrammars, the only subtree that effectively needs tobe recalculated is the one starting from the parent ofthe corrected constituent.3 Demo outlineA preview version of the demonstration can be ac-cessed at http://cat.iti.upv.es/ipp/.The user is presented with the sentences in the se-lected corpus, and starts parsing them one by one.They make corrections in the trees both with the key-board and the computer mouse.
The user feedback38is decoded on the client side which in turn requestssubtrees to the parse engine.Two kind of operations can be performed overconstituents: span modification (performed either bydragging a line from the constituent to the word thatcorresponds to the span?s upper index, or deletinga tree branch by clicking on it), and label substitu-tion (done by typing the correct one on its text field).Modifying the span of a constituent invalidates itslabel, so the server recalculates it as part of the suf-fix.
Modifying the label of a constituent validates itsspan.When the user is about to perform an opera-tion, the affected constituent and the prefix that willbe validated are highlighted.
The target span ofthe modified constituent is visually shown as well.When the user obtains the correctly annotated tree,they can accept it by by clicking on a new sentence.As already mentioned, the user is tightly inte-grated into the interactive parsing process.
They fol-low a predetermined protocol in which they correctand/or validate the annotated parse trees:1.
The parsing server proposes a full parse tree tfor the input sentence.
The tree t is shown tothe user by the client (Fig.
1a).2.
The user finds the first2 incorrect constituent cand starts amending it, either by changing itslabel or changing its span (Fig.
1b, note howthe label is greyed out as it is discarded withthe span modification).
This operation implic-itly validates the prefix tree tp (highlighted ingreen).3.
The system decodes the user feedback (i.e.,mouse gestures or keyboard strokes) which caneither affect the label or the span of the incor-rect constituent c:(a) If the span of c is modified, the label isnot assumed to be correct.
A partial con-stituent c?, which includes span but no la-bel, is decoded from the user feedback.
(b) If the label of c is modified, the span isassumed to be correct.
The corrected con-stituent c?
is decoded from the user feed-back.2The tree visiting order is left-to-right depth-first.This step only deals with analysing the userfeedback, the parsing server will not be con-tacted until the next step.4.
Either the partially corrected constituent c?
orthe corrected constituent c?
is then used by theclient to create a new extended consolidatedprefix that combines the validated prefix and theuser feedback: either tpc?
or tpc?.
The clientsends the extended prefix tree to the parsingserver and requests a suitable continuation forthe parse tree, or tree suffix ts:(a) If the extended prefix is partial (tpc?
), thefirst element of ts is the label completingc?, followed by the remaining calculatedwhole constituents.
(b) If the extended prefix is complete (tpc?
),the parsing server produces a suitable treesuffix ts which contains the remaining cal-culated whole constituents.5.
The client concatenates the suffix returned bythe server to the validated extended prefix, andshows the whole tree to the client (Fig.
1c).6.
These previous steps are iterated until a final,perfect parse tree is produced by the server andvalidated by the user.Note that within this protocol, constituents can bedeleted or inserted by adequately modifying the spanof the left-neighbouring constituent.4 Demo architectureThe proposed system coordinates client-side script-ing with server-side technologies, by using the CAT-API library (Alabau et al, 2009).4.1 Server sideThe server side of our system is a parsing en-gine based on a customized CYK-Viterbi parser,which uses a Probabilistic Context-Free Grammar inChomsky Normal Form obtained from sections 2 to21 of the UPenn Treebank as a model (see (Sa?nchez-Sa?ez et al, 2009) for details).The client can request to the parsing server thebest subtree for any given span of the input string.For each requested subtree, the client can either pro-vide the starting label or not.
If the starting subtree39label is not provided, the server calculates the mostprobable label.
The server also performs transparenttree debinarization/binarization when communicat-ing with the client.4.2 Client sideThe client side has been designed taking into ac-count ergonomic issues in order to facilitate the in-teraction.The prototype is accessed through a Web browser,and the only requirement is the Flash plugin (98% ofmarket penetration) installed in the client machine.The hardware requirements in the client are verylow on the client side, as the parsing is process per-formed remotely on the server side: any computer(including netbooks) capable of running a modernWeb browser is enough.Each validated user interaction is saved as a logfile on the server side, so a tree?s annotation sessioncan be later resumed.4.2.1 Communication protocolThis demo exploits the WWW to enable the con-nection of simultaneous accesses across the globe.This architecture also provides cross-platform com-patibility and requires neither computational powernor disk space on the client?s machine.Client and server communicate via asynchronousHTTP connections, providing thus a richer interac-tive experience ?
no page refreshes is required whenparsing a new sentence.
Moreover, the Web clientcommunicates with the IPP engine through binaryTCP sockets.
Thus, response times are quite slow ?
adesired requirement for the user?s solace.
Addition-ally, cross-domain requests are possible, so the usercould switch between different IPP engines withinthe same UI.5 Evaluation resultsWe have carried out experiments that simulate userinteraction using section 23 of the Penn Treebank.The results suggest figures ranging from 42% to46% of effort saving compared to manually post-editing the trees without an interactive system.
Inother words, for every 100 erroneous constituentsproduced by a parsing system, an IPP user wouldcorrect only 58 (the other 42 constituents being au-tomatically recalculated by the IPP system).
Again,see (Sa?nchez-Sa?ez et al, 2009) for the details on ex-perimentation.5.1 Conclusions and future workWe have introduced a Web-based interactive-predictive system that, by using a parse engine inan integrated manner, aids the user in creating cor-rectly annotated syntactic trees.
Our system greatlyreduces the human effort required for this task com-pared to using a non-interactive automatic system.Future work includes improvements to the clientside (e.g., confidence measures as a visual aid, mul-timodality), as well as exploring other kinds of pars-ing algorithms for the server side (e.g., adaptativeparsing).ReferencesV.
Alabau, D. Ortiz, V. Romero, and J. Ocampo.
2009.
Amultimodal predictive-interactive application for com-puter assisted transcription and translation.
In ICMI-MLMI ?09, 227?228.D.
Carter.
1997.
The TreeBanker.
A tool for supervisedtraining of parsed corpora.
In ENVGRAM?97, 9?15.E.V.
de la Clergerie, O. Hamon, D. Mostefa, C. Ayache,P.
Paroubek, and A. Vilnat.
2008.
Passage: fromFrench parser evaluation to large sized treebank.
InLREC?08, 100:P2.M.P.
Marcus, B. Santorini, and M.A.
Marcinkiewicz.1994.
Building a large annotated corpus of En-glish: The Penn Treebank.
Computational linguistics,19(2):313?330.D.
Ortiz, L. A. Leiva, V. Alabau, and F. Casacuberta.2010.
Interactive machine translation using a web-based architecture.
In IUI?10, 423?425.V.
Romero, L. A. Leiva, A. H. Toselli, and E. Vidal.2009.
Interactive multimodal transcription of textimagse using a web-based demo system.
In IUI?09,477?478.R.
Sa?nchez-Sa?ez, J.A.
Sa?nchez, and J.M.
Bened??.
2009.Interactive predictive parsing.
In IWPT?09, 222?225.A.H.
Toselli, V. Romero, and E. Vidal.
2008.
Computerassisted transcription of text images and multimodalinteraction.
In MLMI?08, 5237: 296?308.E.
Vidal, F. Casacuberta, L.
Rodr?
?guez, J. Civera, andC.
Mart??nez.
2006.
Computer-assisted translation us-ing speech recognition.
IEEE Trans.
on Audio, Speechand Language Processing, 14(3):941?951.R.
Yamamoto, S. Sako, T. Nishimoto, and S. Sagayama.2006.
On-line recognition of handwritten mathe-matical expressions based on stroke-based stochasticcontext-free grammar.
In 10th Frontiers in Handwrit-ing Recognition, 249?254.40
