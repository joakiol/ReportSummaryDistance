Generat ing  Text  w i th  a Theorem ProverIvfin I. Gar ibaySchool of Computer  ScienceUniversity of Central  F lor idaOrlando, FLigaribay@cs.ucf.eduAbst rac tThe process of documenting designs is tedious andoften error-prone.
We discuss a system that au-tomatically generates documentation for the singlestep transition behavior of Statecharts with particu-lar focus on the correctness ofthe result in the sensethat the document will present all and only the factscorresponding to the design being documented.Our approach is to translate the Statechart intoa propositional formula, then translate this formulainto a natural language report.
In the later transla-tion pragmatic effects arise due to the way the in-formation is presented.
Whereas uch effects can bedifficult to quantify, we account for them within anabstract framework by applying a series of transfor-mations on the structure on the report while pre-serving soundness and completeness of the logicalcontent.
The result is an automatically generatedhypertext report that is both logically correct and,to a relatively high degree of confidence, free of mis-leading implicatures.1 In t roduct ionProducing technical documentation is a time-consuming and expensive task.
For instance, Re-iter et al (1995), report cases of engineers expend-ing five hours on documentation foreach hour spenton design and of airplane documentation sets whichweigh more than the actual airplane being docu-mented.
Part of the reason for this problem is thegap between Computer Aided Design (CAD) toolsand similar tools for assisting the documentation fthose designs.
Since research efforts focus primarilyin the former, this situation is likely to get worse asthe CAD tools get more powerful while documenta-tion tools lag far behind.In this paper we address the matter of automaticgeneration oftechnical documentation (Reiter et al,1992; Reiter et al, 1995; RSsner and Stede, 1992;Svenberg, 1994; Punshon et al, 1997) by studyingthe problem of automatically generating documentsdescribing the single step transition behavior of Stat-echarts.From a natural anguage generation (NLG) per-StatechartContent Planning Question tree + Tree transformationsText Planning i Hypermxt ~s implicit text planner (user)\[~ Theoreml, _?_T;_ JI.oa!izatioo Tomp,ato IHyper-t exit DocumentFigure 1: Conceptual view Of the system.spective, this problem is distinguished in that theformal correctness of the document being generatedis crucial while felicitousness of the style is rela-tively unimportant.
This leads us to a solutionbased on formally verifiable theorem-proving tech-niques which allows us to approach strategic NLG is-sues within a highly abstract and conceptually clearframework.The system takes a statechart in the form of alabeled directed graph and translates it into a setof propositional formulae defining its transition be-havior.
A hyper-text natural language document isgenerated on-demand from this set of formulae inresponse to the reader's interaction with the appli-cation.Figure 1 depicts a comparative (Moore and Paris,1993; Paris et al, 1991; Hovy, 1988) conceptual viewof the system while Fig.
2 shows the system archi-tecture.
A prototype has been fully implementedwith the exception of the statechart axiomatizationmodule, x2 A Log ica l  Semant ics  forStatechar tsThe graphical language of statecharts as proposedby David Harel (Harel et al, 1987; Harel and Naa-mad, 1996), has been widely recognized as a impor-tant tool for analyzing complex reactive systems.It has been implemented in commercial applica-tions like STATEMATE (Harel and Politi, 1998)1A full description of this algorithmic translation of a stat-echart from its graphical formalism to the propositional logicinput format used in this work is described in Garibay (2000).13Statechart.
.
.
.
.
t .
.
.
.
.~ Axlomatlzatlon )' Module ' I .
.
.
.
.
.
.
.
.
I\[ Statechart AxiomsReduction to ~I MRCNF module IN ,?
~I - I  to CN, moduleI Question Tree ,ode ~\[Information Eitraction Module ~'~ k.Hyper-text Organization/Realization M dul~Generated Hyper-text PageUser Interface (Browser) \]Theorem \]ProverFigure 2: System architecture of the theorem proverbased generator.
The dotted box is not imple-mented.
"rvIMAGEWOR HNG { PIC OFFSOUNDo J VhmN(Figure 3: Example Statechart.and RHAPSODY from ilogix (I-Logix Inc., 2000)and has been adopted as a part of the Unified Mod-eling Language (UML Revision Task Force, 1999;Booch, 1999), an endeavor to standardize a languageof blueprints for software.Statecharts (Fig.
3) are an extension of conven-tional finite state machines in which the states mayhave a hierarchical structure.
A configuration is de-fined as a maximal set of non-conflicting states whichare active at a given time.
A transition connectsstates and is labeled with the set of events that trig-ger it, and a second set of events that are generatedwhen the transition is taken.
A step of the statechartrelates the current configuration and the events thatare active to the next configuration and the eventsthat are generated.
A configuration and the set ofevents that are active is referred to as a status.We capture a step of a statechart as a pair ofpropositional models, one for the current status and((TV ~ WORKING v WAIT ING)(TV.next ~ WORKING.next  V WAIT ING,next)(WORKING --~ ~ WAIT ING)(WORKING.next  --~ ~ WAIT ING.next )(WAIT ING --~ ~ WORKING)(WAITING.next  --+ ~ WORKING.next )(WORKING ~ IMAGE A SOUND)(WORKING.next  ~ IMAGE.next  A SOUND.next)?
.. )((TV) A( (WORKING A P ICTURE A P IC -OFF  A WAIT ING.next)  V(WORKING ^~ (P ICTURE A P IC -OFF)  A( ( IMAGE A P ICTURE A P IC -OFF  A WAIT ING.next)  V( IMAGE A~ (P ICTURE A P IC-OFF)  A( (P ICTURE A P IC -OFF  A WAIT ING.next )  V(P ICTURE A TXT  A MUTE.next  A TEXT.next)  V(P ICTURE A~ OFF  A9 TXT  A P ICTURE.next )) ?
.. )))Figure 4: Section of the propositional logic transla-tion of the example statechart (Fig.
3).one for the next status.
In practice, we incorpo-rate this into a single model with two versions ofeach propositional variable: P for the truth value inthe current status and Pn for the truth value in thenext status 2.
A full description of the algorithmfor translating statecharts to sets of formulae canbe found in Garibay (2000).
For a example of thistranslation see Fig.
4.3 The Min imum Clausal Theory ofthe StatechartsAt this point, we have a formula that entails the the-ory of the single step transition behavior of a Stat-echart.
We can fulfill our requirement of generat-ing a sound and complete report just by translatingthis formula into English.
However, this approachpresents a number of problems.
For instance, theAND and OR connectives do not in general have thesame meaning in English as they do in logic (Gazdar,1979), furthermore, unlike in the logical formula thescope of the connectives in English is not, in gen-eral, well defined (Holt and Klein, 1999).
To mini-mize the ambiguity, we need to take the formula toa form with minimal nesting of operators.Potentially a more significant problem is the factthat much of the theory (the formula plus all its logi-cal consequences) i  obtainable only via complicatedinferences.
Since the reader understands the trans-lation of the formula at an intuitive level, makingonly limited inferences, a direct translation will failto communicate the entire theory.
Hence, we wouldlike to take the formula to a form that is closed, insome sense, under logical consequences.We address both issues by using what we refer toas minimal (fully) resolved conjunctive normal form(MRCNF).
A formula is in a MRCNF if and only if2These single step models will form the basis for a tem-poral model capturing the full behavior of the statecharts adescribed by Harel and Naamad (1996).14it is in conjunctive normal form (CNF) and is closedunder resolution, absorption and tautology (Fitting,1990; Rogers and Vijay-Shanker, 1994).
The clo-sure under resolution is effectively a finite approx-imation of closure under consequence, that is, ev-ery clause that is a logical consequence of the the-ory entailed by the formula is a direct consequenceof some clause in the MRCNF.
The other two op-erations guarantee minimality in size by removingclauses that are trivially true (tautology), and thosethat are proper super-sets of another (absorption).Hence, the translation will communicate not onlythe initial facts but also those inferred by resolution.Moreover, a formula in this form is just a conjunc-tion of disjunctions--eliminating the scoping prob-lem.
If we interpret he disjunctions as implications,the translation into English will be just a sequenceof implicative sentences that are to be interpretedconjunctively--a typical structure for such informa-tion in English.4 Organ iz ing  the  Hyper - textRepor t :  The  Quest ion  TreeA formula in MRCNF is organized in a way thatresembles a sequence of implicative sentences.
Theproblem now is the size of this sequence.
Large tobegin with, its size is increased by the transforma-tion to CNF and closure under resolution.
Hence,the translation of MRCNF directly into a sequenceof statements would present an uninterpretable s -quence of facts.
If they are going to be understoodby the reader there is a need for some kind of struc-ture.
The correct organization depends heavily onthe reader's goals and expectations.
However, be-yond the assumption that the reader's generic goalis to obtain information about the transition behav-ior of the statechart under consideration, we do notmake any assumptions about what the particularreader's goals may be.
Instead we present he reportas a hyper-text document and allow the reader to in-teractively refine their goal by following hyper-links.Effectively, the reader's queries focus the theory ofthe statechart in a particular aspect of its behavior 3.In this way, as in Reiter et al (1992) and Levineet al (1991), we use hyper-text as an implicit textplanner, in the sense that we account for every pos-sible model of the user/system interaction and letthe actual reader decide which goal to pursue.We will call the reader's elections choices.
Eachchoice the reader makes narrows the information wehave to convey, limiting it to all and only the partthat is logically consistent with that choice.
We willsay that the reader refines the theory by makingthe choice.
At each point, the choices available tothe reader are all the propositional variables that3In a process that will be precisely described shortly.the theory is contingent upon.
The reader effec-tively fixes the valuation of one of these variablesto true or false.
The system then adds the reader'schoice to the theory and recalculates the MRCNF.
Ifthe newly obtained theory remains contingent uponsome variables, the reader then will have availablea new set of choices.
If not, the reader will havereached a set of non-contingent facts (henceforthfacts) which are consequences of all the previouschoices.While this process makes the information moreaccessible by giving it a logical structure, it doesnothing to reduce the size of the report.
We resolvethis by generating the document on demand.
Whilethe refinement process (the core computation for on-demand generation) can potentially be very expen-sive in terms of time, the fact that we are adding sin-gleton clauses to an already minimum set of clausalconsequences allows us to use a simplified form ofthe theorem prover with asymptotic time complex-ity linear in the number of clauses.We can visualize the process of the reader mak-ing choices as navigating a question tree, in whicheach branch is labeled with a choice and each nodecontains the theory of the Statechart as refined bythe path of choices from the root to that node.
Inthis tree, a reader's choice is equivalent to the ques-tion: "What are the circumstances/situations if Xis true/false?."
The root is the full theory of thetransition behavior of the Statechart.
The childrenof a node are obtained by fixing the valuation ofeach of its contingent propositional variables in turnand recomputing the MRCNF.
The leaves are non-contingent theories (those containing only facts) aConceptually, the labels of each path from the rootto a leaf together with each one of the facts in thatleaf corresponds to all and only the valuations whichare models of the original theory.
Therefore, thequestion tree is sound and complete in the logicalsense.5 Generat ing  the  Hyper - text  Pageunder  P ragmat ic  Cons iderat ions :In fo rmat ion  Ext ract ion  Modu leThis tree turns out to provide a useful frameworkto address pragmatic issues--those that arise princi-pally from the structure of the report itself (Gazdar,1979).
By addressing these issues in the context ofthe question tree, rather than in its realization as areport, we abstract away from a great deal of sub-tle semantic detail that would otherwise obscure theanalysis.
Our approach consists of applying a se-ries of transformations that resolve these issues while4In general this structure is a directed acyclic graph whichReiter et al call the question space (Reiter et al, 1995), butsince we work with a tree that  spans it, we prefer questiontree.15preserving logical soundness and completeness of thedocument.5.1 P romot ing  factsIn the question tree, the facts are either reported atthe end of a chain of choices or are encoded in thechoices themselves.
A sequence of these choices isanalogous to a chain of nested implications in whichthe antecedents are the choices made by the userand the consequence is the theory as refined by thechoices.
This refinement continues until we obtaina non-contingent theory--one in which all variableshave valuations.
Thus, the chain of implicationseventually leads to a set of facts as its final con-sequence.
The pragmatic problem in this case re-lates to the amount of information to be provided(Grice's Maxim of Quantity (Grice, 1975)).
Thismaxim states that speakers will make their contri-bution as informative as is required, but not moreinformative than that (Gazdar, 1979).
Under thisassumption, reporting a fact as a consequence of asequence of choices explicitly denies that this fact isa consequence of any prefix of that sequence, in con-trast to the logical semantics of implication.
Suchimplicatures, while not consequences of the logicalcontent, are valid inferences that people make onthe basis of well established expectations about thecommunicative act.To avoid this false implicature, we present thefacts to the reader as soon as they become available,that is, as soon as they become non-contingent inthe theory.
The transformation, in this case, movesthe facts from the leaves to the interior nodes.
Thistransformation does not change the set of modelsrepresented in the tree simply because the move-ment of facts does not eliminate any path of the tree.Hence, the transformation preserves oundness andcompleteness of the tree.In practice, the facts are just the singleton clausesof a theory, therefore we can realize this transforma-tion by simply reporting singleton clauses as soon asthey appear in the theory.5.2 Repor t ing  facts on ly  onceOn the other hand, facts in a theory are also facts inevery consistent refinement of that theory.
Hence,reporting all the facts at each node of the questiontree leads us to report many of them repeatedly.
Ineffect, every fact reported in a node will be reportedin each of its children as well.
This repetition of factsviolates the "upper-bound" of Quantity-- it  reportsmore than is relevant.
In this case Quantity requiresus to report only information that is "new".In general, what is new will depend not only onwhat is reported but on inferences the reader is likelyto have made (McDonald, 1992).
We have, however,already committed to being explicit; our assumptionis that the reader makes essentially no inferences,that they know all and only what we have explicitlyreported.
Therefore, we can satisfy the upper boundof Quantity by reporting each fact exactly once oneach branch--when it first becomes non-contingent.To do this, we simply keep a list of all facts thathave been reported in the current branch; this is theextent of our model of the user.This transformation does not change the set ofmodels represented in the tree, since it only elimi-nates repeated literals.5.3 P romot ing  single level impl icat ionsOne of the difficulties in using Quantity is to deter-mine what information is "required".
At each nodeof the question tree we have a current heory to re-port.
The issue, in essence, is what to report at thatnode and what to report at its descendents.
On onehand, it seems clear that we are, at least, requiredto report the non-contingent facts at each node.
Onthe other hand, we don't want to report the wholetheory at the root.Our intuition is that the degree to which factsare relevant is inversely proportional to the diffi-culty of interpreting them.
Under these circum-stances, un-nested implications (i.e., binary disjunc-tions) are simple enough that the reader is likely toexpect hem to be reported.
From the perspectiveof the question tree, this suggest, that in additionto the facts at a node, we should also report, as im-plications, the facts at its non-contingent children(those that are leaves).
We refer to the choices lead-ing to non-contingent theories as conclusive choices.These are reported as single-level implications ("If Xthen (some sequence of facts~").
This has the effectof promoting the leaves of the tree to their parentpages.Note that a choice that is conclusive at some pagewill also be conclusive at each page in the subtreerooted at that page (or, rather, at each page reachedby a sequence of choices consistent with that choice).In keeping with the principle of reporting a fact ex-actly once along each path, we must avoid reportingthe implication at the descendent pages.
To thisend, after reporting each of the conclusive choiceson a page, we report the remainder of the tree be-low that page under an "Otherwise" choice in whichthe theory has been refined with the complementsof the conclusive choices.
This has the effect of dra-matically restructuring the tree: each of the non-contingent leaves is promoted to the highest page atwhich the choice that selects it becomes conclusive.Once again this transformation reorganizes thebranches of the question tree without changing theset of models it represents.To find the conclusive choices we run the theoremprover on the current heory extended, in turn, witheach literal upon which it is contingent.
If the re-sulting theory is non-contingent, then that literal is a1{}~far :* ( the  cur rent  conf igurat ion  does  not  inc lude  the  s ta te  WORKING)* ( the event  OFF is  not  ac t ive) .Facts :* the  next  conf igurat ion  w i l l  not  inc lude  the  s ta te  ~URKING.Independent  o f f  whether :* the event  PIC-OFF i s  act ive ,Depends on whether :* the  cur rent  conf igurat ion  inc ludes  the  s ta tes  SON and SOP.the  event  MUTE Is active.Cho ices :e I f  the  cur rent  conf igurat ion  i nc ludes  the  s ta te  SUN \[ then .
.
.
\]* If the current configuration duel not include the state SON ~ teen... \]* If the current configuration includes the state SOP \[ then... \]* I f  the  cur rent  conf igurat ion  does not  inc lude  the  s ta te  SOP \[ then .
.
.
\]* If the event  MUTE iS active \[ then.,.
\]* I f  the  event  MUTE i s  not  ac t ive  \[ then .
.
.
\]Figure 5: Example of generated hyper-text page.The fo l low ing  cho ices  are  conc lus ive :* I f  the  event  OFF i s  ac t ive  then:- the  next  conf igurat ion  wlll i nc lude  the  s ta te  WAITING,but  e l l l  no t  inc lude  ?hm s ta tes  PICTURE or  TEXT.- the  event  h'UTE r i l l  not  be generated .
* I f  the  next  conf igurat ion  tnc lude l  the  s ta te  WAITING then:the  event  OFF lw ac t ive .- the  next  conf igurat ion  s i l l  not  inc lude  the  s ta tes  PICTURE or  TEXT- the  event  NUTE w i l l  not  be generated .\ [Otherwise  .
.
.
\ ]Figure 6: Conclusive choices section (up), non-conclusive otherwise section (bottom).conclusive choice.
To find the remainder of the treeto be reported under the "Otherwise" case we ex-tend the current heory with the negation of each ofthe conclusive choices.
If the resulting theory is in-consistent we will say that the conclusive choices areexhaustive, if the result is a contingent theory we willsay that the conclusive choices are non-exhaustivewith non-conclusive otherwise, and if the result isa non-contingent theory we will say that the con-clusive choices, in this case, are non-exhaustive withconclusive otherwise.5.4 Aggregat ing  pairs  of  single condi t ionalsIt frequently happens that, at some page, two con-clusive choices lead to the same model.
In this case,we would report that each implies (among otherthings) the other.
However, these two implicationscan be aggregated to form a biconditional.
Further-more, Quantity requires us to select the strongestconnective that applies in any such case because ifa weaker connective is selected it suggests that nostronger one applies (a scalar implicature).
Con-sequently, we are actually compelled to aggregatethese two facts into a single biconditional.In practice, we use the theorem prover to eitherprove or disprove, for every implication, whether itsconverse is a theorem of the current heory.
If provedthen the biconditional is reported.Bicond i t iona l  I |p l i ca t ions :- the  next  conf igurat ion  r i l l  inc lude  the  s ta te  $OFF i f  and on ly  i fthe  next  conf igurat ion  w i l l  not  inc lude  the  s ta te  SON.One of  ~he fo l low ing  must be the  case :Either:- the  cur rent  conf igurat ion  inc ludes  the  , ta ts  SOFF,but  does not  inc lude  the  s ta te  TEXT.- the  event  ESOUNU t~ not  ac t ive .- the  next  conf igurat ion  r i l l  inc lude  the  s~ate  SOFF,but  wi l l  not  inc lude  the  s ta te  SON.- the event ESOUND will not be generated.O~:the current configuration Includel the state SUFF,hut  does not  inc lude  the  s ta te  TEXT.- the  event  ESOUND is  ac t ive .- the  next  conf igurat ion  wlll i nc lude  the  s ta te  SON,but wlll not include the state SDFF.- the event ESOOND .Iii not be generated.Figure 7: Biconditional implications and models ec-tions.OtherWise:- the  cur rent  conf igurat ion  does  ~ot  inc lude  the  i ra te  TEXT- the  next  conf igurat ion  w i l l  not  inc lude  the  s ta te  SON.Figure 8: Conclusive otherwise section.6 Hyper - text  Organ izat ion  andRea l i za t ion  Modu leThe organization of the hyper-text page generatedfrom each node of the question tree visited by theuser is shown in Fig.
5.
At the top of the page wereport (parenthetically) the set of choices that haveled to this page.
Next we report all of the new factsobtained from the current heory as described in sec-tions 5.1 and 5.2.
Then, the propositions that thetheory is no longer dependent on (those which nolonger occur in the theory ) followed by the list ofpropositions on which it does depend.
Finally wepresent he choices or, if there are any, the conclu-sive choices.
In the first (Fig.
5), each choice is pre-sented as an implicative sentence with a hyper-textlink leading to another page (another node of thequestion tree).
In the second (Fig.
6 top), we presentthe set of conclusive choices followed by one of thethree possible cases (described in Section 5.3) forthe "Otherwise" case.
If the conclusive choices areexhaustive (the otherwise case is inconsistent), wereport the biconditional implications (Section 5.4)followed by the final models (Fig 7).
If they are ex-haustive with a conclusive otherwise, we report theotherwise as another conclusive choice (Fig 8).
Fi-nally, if they are exhaustive with a non-conclusiveotherwise, we report only an otherwise hyper-link(Fig 6 bottom).The realization module is, in essence, a patternmatching and template filling process.
It's basiccomponent simply translates facts into fixed Englishlanguage sentences.
5 Facts are represented by lit-erals.
These are classified into the following cate-gories: current state, current event, next state, andnext event and the literais in each category are syn-5With added html mark-up.17Set  o f  L i te ra l s  ( fac ts )t((WAITING.next OFF WORKING -PICTURE,next TXT)\]Order ing  and  Aggregat ion((WORKING) (~)FF TXT) (WAITING.next -PICTUga.ne~,))Template  based  rea l i za t ionThe cur~n!
configuration i cludes ti~ state WORKINGThe next configuration will include the state WAITING, but will not include tbu state PICTURE J The cv?nts OFF and TXT an: activeFigure 9: Example of realization.tactically aggregated (Dalianis, 1999).
The processis illustrated in Figure 9.Re ferencesGrady Booch.
1999.
UML in action.
Communica-tions of the ACM, 42(10).Hercules Dalianis.
1999.
Aggregation in naturallanguage generation.
Computational Intelligence,15(4):384-414.Melvin Fitting.
1990.
First-order Logic and Au-tomated Theorem Proving.
Springer-Verlag, NewYork.Iv?n Ibargiien Garibay.
2000.
Automatic genera-tion of natural anguage documentation from stat-echarts.
Master's thesis, University of CentralFlorida.Gerald Gazdar.
1979.
Pragmatics: Implicature,Presupposition, and Logical Form.
AcademicPress.H.
Paul Grice.
1975.
Logic and conversation.
InPeter Cole and Jerry L. Morgan, editors, Syntaxand Semantics: Speech Acts, volume 3, pages 41-58.
Academic Press.David Harel and Amnon Naamad.
1996.
TheSTATEMATE semantics of statecharts.
ACMTransactions on Software Engineering andMethodology, 5(4):293-333, Oct.David Harel and Machal Politi.
1998.
ModelingReactive Systems with Statecharts: The STATE-MATE Approach.
McGraw-Hill.
QA 76.9 .$88H3677 1998.D.
Harel, A. Pnueli, J. P. Schmidt, and R. Sherman.1987.
On the formal semantics of statecharts.
InSymposium on Logic in Computer Science, pages54-64.
Computer Society of the IEEE, ComputerSociety Press, June.Alexander Holt and Ewan Klein.
1999.
Asemantically-derived subset of english for hard-ware verification.
In Proceedings of the 37th An-nual Meeting of the Association for Computa-tional Linguistics.Eduard H. Hovy.
1988.
Generating Natural Lan-guage under Pragmatic Constraints.
LawrenceErlbaum Associates.I-Logix Inc. 2000. http://www.ilogix.com.John Levine, Alison Cawsey, Chris Mellish,Lawrence Poynter, Ehud Reiter, Paul Tyson, andJohn Walker.
1991.
IDAS: Combining hypertextand natural anguage generation.
In Third Euro-pean Workshop on Natural Language Generation,pages 55-62, Innsbruck, Austria.David D. McDonald.
1992.
Type-driven suppres-sion of redundancy in the generation of inference-rich reports.
In R. Dale, E. Hovy, D. RSsner,and O.
Stock, editors, Aspects of Automated Nat-ural Language Generation, volume 587 of Lec-ture Notes in Artificial Intelligence, pages 73-88.Springer-Velag.Johanna D. Moore and C6cile L. Paris.
1993.
Plan-ning text for advisory dialogues: Capturing inten-tional and rhetorical information.
ComputationalLinguistics, 19(4):651-694.C~cile L. Paris, William R. Swartout, andWilliam C. Mann, editors.
1991.
Natural Lan-guage Generation in Artificial Intelligence andComputational Linguistics.
Kluwer AcademicPublishers.J.
M. Punshon, J. P. Tremblay, P. G. Sorenson, andP.
S. Findeisen.
1997.
From formal specificationsto natural language: A case of study.
In 12thIEEE International Conference Automated Soft-ware Engineering, pages 309-310, Incline Village,Nevada; USA, November.
IEEE Computer Soci-ety.Ehud Reiter, Chris Mellish, and John Levine.
1992.Automatic generation of on-line documentation inthe IDAS project.
In Third Conference on Ap-plied Natural Language Processing (ANLP-1992),pages 64-71, Trento, Italy.Ehud Reiter, Chris Mellish, and John Levine.
1995.Automatic generation of technical documentation.Applied Artificial Intelligence, 9(3):259-287.James Rogers and K. Vijay-Shanker.
1994.
Obtain-ing trees from their descriptions: An applicationto tree-adjoining grammars.
Computational Intel-ligence, 10:401-421.D.
RSsner and M. Stede.
1992.
Customizing rstfor the automatic production of technical man-uals.
In R. Dale et al, editors, Aspects of Auto-mated Natural Language Generation, number 587in Lecture Notes in Artificial Intelligence, pages199-214, Berlin.
Springer Verlag.S.
Svenberg.
1994.
Representing conceptual nd lin-guistic knowledge for multi-lingual generation ina technical domain.
In Proceedings of the 7th In-ternational Workshop on Natural Language Gen-eration, pages 245-248, Kennebunkport.UML Revision Task Force, 1999.
OMG Unified Mod-eling Language Specification , v. 1.3.
Documentad/99-06-09.
Object Management Group, June.18
