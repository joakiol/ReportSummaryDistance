Proceedings of 52nd Annual Meeting of the Association for Computational Linguistics: System Demonstrations, pages 43?48,Baltimore, Maryland USA, June 23-24, 2014.c?2014 Association for Computational LinguisticsThe Excitement Open Platform for Textual InferencesBernardo Magnini?, Roberto Zanoli?, Ido Dagan?, Kathrin Eichler?, G?unter Neumann?,Tae-Gil Noh?, Sebastian Pado?, Asher Stern?, Omer Levy?
?FBK (magnini|zanoli@fbk.eu)?Heidelberg, Stuttgart Univ.
(pado|noh@cl.uni-heidelberg.de)?DFKI (neumann|eichler@dfki.de)?Bar Ilan University (dagan|sterna3|omerlevy@cs.biu.ac.il)AbstractThis paper presents the Excitement OpenPlatform (EOP), a generic architecture anda comprehensive implementation for tex-tual inference in multiple languages.
Theplatform includes state-of-art algorithms,a large number of knowledge resources,and facilities for experimenting and test-ing innovative approaches.
The EOP isdistributed as an open source software.1 IntroductionIn the last decade textual entailment (Dagan et al.,2009) has been a very active topic in Computa-tional Linguistics, providing a unifying frameworkfor textual inference.
Several evaluation exerciseshave been organized around Recognizing TextualEntailment (RTE) challenges and many method-ologies, algorithms and knowledge resources havebeen proposed to address the task.
However, re-search in textual entailment is still fragmented andthere is no unifying algorithmic framework norsoftware architecture.In this paper, we present the Excitement OpenPlatform (EOP), a generic architecture and a com-prehensive implementation for multilingual textualinference which we make available to the scien-tific and technological communities.
To a largeextent, the idea is to follow the successful experi-ence of the Moses open source platform (Koehn etal., 2007) in Machine Translation, which has madea substantial impact on research in that field.
TheEOP is the result of a two-year coordinated workunder the international project EXCITEMENT.1Aconsortium of four academic partners has definedthe EOP architectural specifications, implementedthe functional interfaces of the EOP components,imported existing entailment engines into the EOP1http://www.excitement-project.euand finally designed and implemented a rich envi-ronment to support open source distribution.The goal of the platform is to provide function-ality for the automatic identification of entailmentrelations among texts.
The EOP is based on a modu-lar architecture with a particular focus on language-independent algorithms.
It allows developers andusers to combine linguistic pipelines, entailment al-gorithms and linguistic resources within and acrosslanguages with as little effort as possible.
For ex-ample, different entailment decision approachescan share the same resources and the same sub-components in the platform.
A classification-basedalgorithm can use the distance component of anedit-distance based entailment decision approach,and two different approaches can use the same setof knowledge resources.
Moreover, the platformhas various multilingual components for languageslike English, German and Italian.
The result is anideal software environment for experimenting andtesting innovative approaches for textual inferences.The EOP is distributed as an open source software2and its use is open both to users interested in usinginference in applications and to developers willingto extend the current functionalities.The paper is structured as follows.
Section 2presents the platform architecture, highlightinghow the EOP component-based approach favorsinteroperability.
Section 3 provides a picture ofthe current population of the EOP in terms of bothentailment algorithms and knowledge resources.Section 4 introduces expected use cases of the plat-form.
Finally, Section 5 presents the main featuresof the open source package.2 ArchitectureThe EOP platform takes as input two text portions,the first called the Text (abbreviated with T), thesecond called the Hypothesis (abbreviated with H).2http://hltfbk.github.io/Excitement-Open-Platform/43Linguis'c)Analysis)Pipeline)(LAP))Entailment)Core)(EC))Entailment)Decision))Algorithm)(EDA))Dynamic)and)Sta'c)Components)(Algorithms)and)Knowledge))Linguis'c)Analysis)Components)Decision)1)Raw)Data)Figure 1: EOP architectureThe output is an entailment judgement, either ?En-tailment?
if T entails H, or ?NonEntailment?
if therelation does not hold.
A confidence score for thedecision is also returned in both cases.The EOP architecture (Pad?o et al., 2014) is basedon the concept of modularization with pluggableand replaceable components to enable extensionand customization.
The overall structure is shownin Figure 1 and consists of two main parts.
TheLinguistic Analysis Pipeline (LAP) is a series oflinguistic annotation components.
The EntailmentCore (EC) performs the actual entailment recog-nition.
This separation ensures that (a) the com-ponents in the EC only rely on linguistic analysisin well-defined ways and (b) the LAP and EC canbe run independently of each other.
Configurationfiles are the principal means of configuring the EOP.In the rest of this section we first provide an intro-duction to the LAP, then we move to the EC andfinally describe the configuration files.2.1 Linguistic Analysis Pipeline (LAP)The Linguistic Analysis Pipeline is a collection ofannotation components for Natural Language Pro-cessing (NLP) based on the Apache UIMA frame-work.3Annotations range from tokenization topart of speech tagging, chunking, Named EntityRecognition and parsing.
The adoption of UIMAenables interoperability among components (e.g.,substitution of one parser by another one) whileensuring language independence.
Input and outputof the components are represented in an extendedversion of the DKPro type system based on UIMA3http://uima.apache.org/Common Analysis Structure (CAS) (Gurevych etal., 2007; Noh and Pad?o, 2013).2.2 Entailment Core (EC)The Entailment Core performs the actual entail-ment recognition based on the preprocessed textmade by the Linguistic Analysis Pipeline.
It con-sists of one or more Entailment Decision Algo-rithms (EDAs) and zero or more subordinate com-ponents.
An EDA takes an entailment decision(i.e., ?entailment?
or ?no entailment?)
while com-ponents provide static and dynamic information forthe EDA.Entailment Decision Algorithms are at the toplevel in the EC.
They compute an entailment deci-sion for a given Text/Hypothesis (T/H) pair, andcan use components that provide standardized al-gorithms or knowledge resources.
The EOP shipswith several EDAs (cf.
Section 3).Scoring Components accept a Text/Hypothesispair as an input, and return a vector of scores.Their output can be used directly to build minimalclassifier-based EDAs forming complete RTE sys-tems.
An extended version of these components arethe Distance Components that can produce normal-ized and unnormalized distance/similarity valuesin addition to the score vector.Annotation Components can be used to add dif-ferent annotations to the Text/Hypothesis pairs.
Anexample of such a type of component is one thatproduces word or phrase alignments between theText and the Hypothesis.Lexical Knowledge Components describe se-mantic relationships between words.
In theEOP, this knowledge is represented as directedrules made up of two word?POS pairs, wherethe LHS (left-hand side) entails the RHS (right-hand side), e.g., (shooting star,Noun) =?(meteorite,Noun).
Lexical Knowledge Compo-nents provide an interface that allows for (a) listingall RHS for a given LHS; (b) listing all LHS fora given RHS; and (c) checking for an entailmentrelation for a given LHS?RHS pair.
The interfacealso wraps all major lexical knowledge sources cur-rently used in RTE research, including manuallyconstructed ontologies like WordNet, and encyclo-pedic resources like Wikipedia.Syntactic Knowledge Components capture en-tailment relationships between syntactic and44lexical-syntactic expressions.
We represent suchrelationships by entailment rules that link (option-ally lexicalized) dependency tree fragments thatcan contain variables as nodes.
For example, therule fall of X =?
X falls, or X sells Y to Z =?Z buys Y from X express general paraphrasing pat-terns at the predicate-argument level that cannot becaptured by purely lexical rules.
Formally, eachsyntactic rule consists of two dependency tree frag-ments plus a mapping from the variables of theLHS tree to the variables of the RHS tree.42.3 Configuration FilesThe EC components can be combined into actualinference engines through configuration files whichcontain information to build a complete inferenceengine.
A configuration file completely describesan experiment.
For example, it specifies the re-sources that the selected EDA has to use and thedata set to be analysed.
The LAP needed for dataset preprocessing is another parameter that can beconfigured too.
The platform ships with a set ofpredefined configuration files accompanied by sup-porting documentation.3 Entailment Algorithms and ResourcesThis section provides a description of the Entail-ment Algorithms and Knowledge Resources thatare distributed with the EOP.3.1 Entailment AlgorithmsThe current version of the EOP platform ships withthree EDAs corresponding to three different ap-proaches to RTE: an EDA based on transformationsbetween T and H, an EDA based on edit distancealgorithms, and a classification based EDA usingfeatures extracted from T and H.Transformation-based EDA applies a sequenceof transformations on T with the goal of makingit identical to H. If each transformation preserves(fully or partially) the meaning of the original text,then it can be concluded that the modified text(which is actually the Hypothesis) can be inferredfrom the original one.
Consider the following sim-ple example where the text is ?The boy was locatedby the police?
and the Hypothesis is ?The childwas found by the police?.
Two transformations for?boy?
?
?child?
and ?located?
?
?found?
do thejob.4Variables of the LHS may also map to null, when materialof the LHS must be present but is deleted in the inference step.In the EOP we include a transformation basedinference system that adopts the knowledge basedtransformations of Bar-Haim et al.
(2007), while in-corporating a probabilistic model to estimate trans-formation confidences.
In addition, it includes asearch algorithm which finds an optimal sequenceof transformations for any given T/H pair (Stern etal., 2012).Edit distance EDA involves using algorithmscasting textual entailment as the problem of map-ping the whole content of T into the content of H.Mappings are performed as sequences of editingoperations (i.e., insertion, deletion and substitu-tion) on text portions needed to transform T into H,where each edit operation has a cost associated withit.
The underlying intuition is that the probabilityof an entailment relation between T and H is relatedto the distance between them; see Kouylekov andMagnini (2005) for a comprehensive experimentalstudy.Classification based EDA uses a Maximum En-tropy classifier to combine the outcomes of sev-eral scoring functions and to learn a classificationmodel for recognizing entailment.
The scoringfunctions extract a number of features at variouslinguistic levels (bag-of-words, syntactic dependen-cies, semantic dependencies, named entities).
Theapproach was thoroughly described in Wang andNeumann (2007).3.2 Knowledge ResourcesAs described in Section 2.2, knowledge resourcesare crucial to recognize cases where T and H usedifferent textual expressions (words, phrases) whilepreserving entailment.
The EOP platform includesa wide range of knowledge resources, including lex-ical and syntactic resources, where some of themare grabbed from manual resources, like dictionar-ies, while others are learned automatically.
ManyEOP resources are inherited from pre-existing RTEsystems migrated into the EOP platform, but nowuse the same interfaces, which makes them acces-sible in a uniform fashion.There are about two dozen lexical (e.g.
word-nets) and syntactic resources for three languages(i.e.
English, Italian and German).
However,since there is still a clear predominance of En-glish resources, the platform includes lexical andsyntactic knowledge mining tools to bootstrap re-sources from corpora, both for other languages and45EDA Accuracy / F1Transformation-based English RTE-3 67.13%Transformation-based English RTE-6 49.55%Edit-Distance English RTE-3 64.38%Edit-Distance German RTE-3 59.88%Edit-Distance Italian RTE-3 63.50%Classification-based English RTE-3 65.25%Classification-based German RTE-3 63.75%Median of RTE-3 (English) submissions 61.75%Median of RTE-6 (English) submissions 33.72%Table 1: EDAs resultsfor specific domains.
Particularly, the EOP plat-form includes a language independent tool to buildWikipedia resources (Shnarch et al., 2009), as wellas a language-independent framework for buildingdistributional similarity resources like DIRT (Linand Pantel, 2002) and Lin similarity(Lin, 1998).3.3 EOP EvaluationResults for the three EDAs included in the EOPplatform are reported in Table 1.
Each line rep-resents an EDA, the language and the dataseton which the EDA was evaluated.
For brevity,we omit here the knowledge resources used foreach EDA, even though knowledge configurationclearly affects performance.
The evaluations wereperformed on RTE-3 dataset (Giampiccolo et al.,2007), where the goal is to maximize accuracy.
We(manually) translated it to German and Italian forevaluations: in both cases the results fix a refer-ence for the two languages.
The two new datasetsfor German and English are available both as partof the EOP distribution and independently5.
Thetransformation-based EDA was also evaluated onRTE-6 dataset (Bentivogli et al., 2010), in whichthe goal is to maximize the F1 measure.The results of the included EDAs are higher thanmedian values of participated systems in RTE-3,and they are competing with state-of-the-arts inRTE-6 results.
To the best of our knowledge, theresults of the EDAs as provided in the platform arethe highest among those available as open sourcesystems for the community.4 Use CasesWe see four primary use cases for the EOP.
Theirrequirements were reflected in our design choices.Use Case 1: Applied Textual Entailment.
Thiscategory covers users who are not interested in the5http://www.excitement-project.eu/index.php/resultsdetails of RTE but who are interested in an NLPtask in which textual entailment can take over partof or all of the semantic processing, such as Ques-tion Answering or Intelligent Tutoring.
Such usersrequire a system that is as easy to deploy as possi-ble, which motivates our offer of the EOP platformas a library.
They also require a system that pro-vides good quality at a reasonable efficiency aswell as guidance as to the best choice of parame-ters.
The latter point is realized through our resultsarchive in the official EOP Wiki on the EOP site.Use Case 2: Textual Entailment Development.This category covers researchers who are interestedin Recognizing Textual Entailment itself, for exam-ple with the goal of developing novel algorithmsfor detecting entailment.
In contrast to the firstcategory, this group need to look ?under the hood?of the EOP platform and access the source code ofthe EOP.
For this reason, we have spent substantialeffort to provide the code in a well-structured andwell-documented form.A subclass of this group is formed by researcherswho want to set up a RTE infrastructure for lan-guages in which it does not yet exist (that is, al-most all languages).
The requirements of this classof users comprises clearly specified procedures toreplace the Linguistic Analysis Pipeline, which arecovered in our documentation, and simple methodsto acquire knowledge resources for these languages(assuming that the EDAs themselves are largelylanguage-independent).
These are provided by thelanguage-independent knowledge acquisition toolswhich we offer alongside the platform (cf.
Section3.2).Use Case 3: Lexical Semantics Evaluation.
Athird category consists of researchers whose pri-mary interest is in (lexical) semantics.As long as their scientific results can be phrasedin terms of semantic similarities or inference rules,the EOP platform can be used as a simple and stan-dardized workbench for these results that indicatesthe impact that the semantic knowledge under con-sideration has on deciding textual entailment.
Themain requirement for this user group is the simpleintegration of new knowledge resources into theEOP platform.
This is catered for through the defi-nition of the generic knowledge component inter-faces (cf.
Section 2.2) and detailed documentationon how to implement these interfaces.46Use Case 4: Educational Use.
The fourth andfinal use case is as an educational tool to supportacademic courses and projects on Recognizing Tex-tual Entailment and inference more generally.
Thisuse case calls, in common with the others, for easyusability and flexibility.
Specifically for this usecase, we have also developed a series of tutorialsaimed at acquainting new users with the EOP plat-form through a series of increasingly complexityexercises that cover all areas of the EOP.
We arealso posting proposals for projects to extend theEOP on the EOP Wiki.5 EOP DistributionThe EOP infrastructure follows state-of-the-art soft-ware engineering standards to support both usersand developers with a flexible, scalable and easy touse software environment.
In addition to communi-cation channels, like the mailing list and the issuetracking system, the EOP infrastructure comprisesthe following set of facilities.Version Control System: We use GitHub,6aweb-based hosting service for code and documen-tation storage, development, and issue tracking.Web Site: The GitHub Automatic Page Genera-tor was used to build the EOP web site and Wiki,containing a general introduction to the softwareplatform, the terms of its license, mailing lists tocontact the EOP members and links to the codereleases.Documentation: Both user and developer docu-mentation is available from Wiki pages; the pagesare written with the GitHub Wiki Editor and hostedon the GitHub repository.
The documentation in-cludes a Quick Start guide to start using the EOPplatform right away, and a detailed step by steptutorial.Results Archive: As a new feature for commu-nity building, EOP users can, and are encouragedto, share their results: the platform configurationfiles used to produce results as well as contact infor-mation can be saved and archived into a dedicatedpage on the EOP GitHub repository.
That allowsother EOP users to replicate experiments underthe same condition and/or avoid doing experimentsthat have already been done.6https://github.com/Build Automation Tool: The EOP has been de-veloped as a Maven7multi-modules project, withall modules sharing the same Maven standard struc-ture, making it easier to find files in the project onceone is used to Maven.Maven Artifacts Repository: Using a Mavenrepository has a twofold goal: (i) to serve as aninternal private repository of all software librariesused within the project (libraries are binary filesand should not be stored under version control sys-tems, which are intended to be used with text files);(ii) to make the produced EOP Maven artifactsavailable (i.e., for users who want to use the EOPas a library in their own code).
We use Artifactory8repository manager to store produced artifacts.Continuous Integration: The EOP uses Jenk-ins9for Continuous Integration, a software develop-ment practice where developers of a team integratetheir work frequently (e.g., daily).Code Quality Tool: Ensuring the quality of theproduced software is one of the most importantaspects of software engineering.
The EOP usestools like PMD10that can automatically be runduring development to help the developers checkthe quality of their software.5.1 Project RepositoryThe EOP Java source code is hosted on the EOPGithub repository and managed using Git.
Therepository consists of three main branches: therelease branch contains the code that is supposed tobe in a production-ready state, whereas the masterbranch contains the code to be incorporated into thenext release.
When the source code in the masterbranch reaches a stable point and is ready to bereleased, all of the changes are merged back intorelease.
Finally, the gh-pages branch contains theweb site pages.5.2 LicensingThe software of the platform is released under theterms of General Public License (GPL) version3.11The platform contains both components andresources designed by the EOP developers, as wellas others that are well known and freely available7http://maven.apache.org/8http://www.jfrog.com/9http://jenkins-ci.org/10http://pmd.sourceforge.net11http://www.gnu.org/licenses/gpl.html47in the NLP research community.
Additional com-ponents and resources whose license is not compat-ible with the EOP license have to be downloadedand installed separately by the user.6 ConclusionThis paper has presented the main characteristicsof Excitement Open Platform platform, a rich envi-ronment for experimenting and evaluating textualentailment systems.
On the software side, the EOPis a complex endeavor to integrate tools and re-sources in Computational Linguistics, includingpipelines for three languages, three pre-existingentailment engines, and about two dozens of lex-ical and syntactic resources.
The EOP assumes aclear and modular separation between linguisticannotations, entailment algorithms and knowledgeresources which are used by the algorithms.
Arelevant benefit of the architectural design is thata high level of interoperability is reached, provid-ing a stimulating environment for new research intextual inferences.The EOP platform has been already tested in sev-eral pilot research projects and educational courses,and it is currently distributed as open source soft-ware under the GPL-3 license.
To the best of ourknowledge, the entailment systems and their con-figurations provided in the platform are the bestsystems available as open source for the commu-nity.
As for the future, we are planning severalinitiatives for the promotion of the platform in theresearch community, as well as its active experi-mentation in real application scenarios.AcknowledgmentsThis work was partially supported by the EC-funded project EXCITEMENT (FP7ICT-287923).ReferencesRoy Bar-Haim, Ido Dagan, Iddo Greental, and EyalShnarch.
2007.
Semantic inference at the lexical-syntactic level.
In Proceedings of AAAI, pages 871?876, Vancouver, BC.Luisa Bentivogli, Peter Clark, Ido Dagan, Hoa TrangDang, and Danilo Giampiccolo.
2010.
The SixthPASCAL Recognizing Textual Entailment Chal-lenge.
In Proceedings of TAC, Gaithersburg, MD.Ido Dagan, Bill Dolan, Bernardo Magnini, and DanRoth.
2009.
Recognizing textual entailment: Ratio-nal, evaluation and approaches.
Journal of NaturalLanguage Engineering, 15(4):i?xvii.Danilo Giampiccolo, Bernardo Magnini, Ido Dagan,and Bill Dolan.
2007.
The Third PASCAL Recog-nising Textual Entailment Challenge.
In Proceed-ings of the ACL-PASCAL Workshop on Textual En-tailment and Paraphrasing, Prague, Czech Repub-lic.Iryna Gurevych, Max M?uhlh?auser, Christof M?uller,J?urgen Steimle, Markus Weimer, and Torsten Zesch.2007.
Darmstadt knowledge processing repositorybased on UIMA.
In Proceedings of the First Work-shop on Unstructured Information Management Ar-chitecture (UIMA@GSCL 2007), T?ubingen, Ger-many.Philipp Koehn, Hieu Hoang, Alexandra Birch, ChrisCallison-Burch, Marcello Federico, Nicola Bertoldi,Brooke Cowan, Wade Shen, Christine Moran,Richard Zens, Chris Dyer, Ondrej Bojar, AlexandraConstantin, and Evan Herbst.
2007.
Moses: OpenSource Toolkit for Statistical Machine Translation.In Proceedings of the ACL demo session, pages 177?180, Prague, Czech Republic.Milen Kouylekov and Bernardo Magnini.
2005.
Rec-ognizing textual entailment with tree edit distance al-gorithms.
In Proceedings of the First PASCAL Chal-lenges Workshop on Recognising Textual Entailment,pages 17?20, Southampton, UK.Dekang Lin and Patrick Pantel.
2002.
Discovery ofInference Rules for Question Answering.
Journal ofNatural Language Engineering, 7(4):343?360.Dekang Lin.
1998.
Automatic retrieval and clusteringof similar words.
In Proceedings of ACL/COLING,pages 768?774, Montr?eal, Canada.Tae-Gil Noh and Sebastian Pad?o.
2013.
UsingUIMA to structure an open platform for textual en-tailment.
In Proceedings of the 3rd Workshop onUnstructured Information Management Architecture(UIMA@GSCL 2013).Sebastian Pad?o, Tae-Gil Noh, Asher Stern, Rui Wang,and Roberto Zanoli.
2014.
Design and realiza-tion of a modular architecture for textual entailment.Journal of Natural Language Engineering.
doi:10.1017/S1351324913000351.Eyal Shnarch, Libby Barak, and Ido Dagan.
2009.
Ex-tracting lexical reference rules from Wikipedia.
InProceedings of ACL-IJCNLP, pages 450?458, Sin-gapore.Asher Stern, Roni Stern, Ido Dagan, and Ariel Felner.2012.
Efficient search for transformation-based in-ference.
In Proceedings of ACL, pages 283?291,Jeju Island, South Korea.Rui Wang and G?unter Neumann.
2007.
Recogniz-ing textual entailment using a subsequence kernelmethod.
In Proceedings of AAAI, pages 937?945,Vancouver, BC.48
