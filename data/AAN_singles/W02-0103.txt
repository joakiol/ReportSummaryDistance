A Web-based Instructional Platform for Constraint-Based GrammarFormalisms and ParsingW.
Detmar MeurersDept.
of LinguisticsOhio State Universitydm@ling.osu.eduGerald PennDept.
of Computer ScienceUniversity of Torontogpenn@cs.toronto.eduFrank RichterSeminar fu?r SprachwissenschaftUniversita?t Tu?bingenfr@sfs.uni-tuebingen.deAbstractWe propose the creation of a web-basedtraining framework comprising a set oftopics that revolve around the use of fea-ture structures as the core data structurein linguistic theory, its formal foundations,and its use in syntactic processing.1 IntroductionFeature structures have been used prolifically at ev-ery level of linguistic theory, and they form themathematical foundation of our most comprehen-sive and rigorous schools of syntactic theory, includ-ing Lexical-Functional Grammar and Head-drivenPhrase Structure Grammar.
This data structure ispopular because it shares many properties with thefirst-order terms of classical logic, and in addi-tion provides named access to substructures throughpaths of features.
Often it also includes a type sys-tem reminiscent of the taxonomical classificationsystems that are widely used in knowledge represen-tation, psychology and the natural sciences.For teaching a subject like computational linguis-tics, which draws on a broad curriculum from manytraditional disciplines to audiences with mixed back-grounds themselves, feature-structure-based theo-retical and computational linguistics have three im-portant properties.
First, they are a mature disci-pline, in which a great deal of accomplishments havebeen made over the last 20 years, spanning from em-pirical and conceptual advances in linguistic theoryto its mathematical and computational foundations,to grammar development and efficient processing.Second, they are pervasive as an already existingrepresentation standard for many levels of linguisticstudy.
Third, they are transparent, reducing com-plex theories of grammar to a basic collection ofmathematical concepts and algorithms for answer-ing formal questions about those theories.
One canaddress the distinction between descriptions of ob-jects and the objects themselves, the difference be-tween consistency and truth, and what it means for asyntactic theory to be not only elegant but correct ina precise and provable sense.The purpose of this paper is to discuss how thesethree properties can be cast into an instructional set-ting to arrive at a framework for teaching computa-tional linguistics that highlights the integrated natureand precision with which work in this very hetero-geneous discipline can be presented.
In principle,the framework we are proposing is open-ended, inthe sense that additional modules should be addedby students and other researchers, subject to the de-sign principles given in Section 3.
We are currentlydesigning three of the core modules for this frame-work: formal foundations, constraint-based gram-mar implementation, and parsing.2 Problems of seminar-style coursesThe contents of our core modules are based on aseries of previous seminar-style courses, in partic-ular on constraint-based grammar implementation,which also started integrating interactive compo-nents and web-based materials into traditional face-to-face teaching.
These are described in detail inSection 5.
The traditional seminar-style teachingmethod underlying the courses mentioned thereinJuly 2002, pp.
19-26.
Association for Computational Linguistics.Natural Language Processing and Computational Linguistics, Philadelphia,Proceedings of the Workshop on Effective Tools and Methodologies for Teachinghas a number of inherent problems, however.
Theseproblems become particularly pressing when topicsas diverse as linguistic theory, grammar implemen-tation, parsing, mathematical foundations of linguis-tic theory and feature logics are combined in a singlecourse that is addressed to a mixed audience withvarying backgrounds in computer science, knowl-edge representation, artificial intelligence and lin-guistics, in any combination of these subjects.First, the seminar-style teaching format as used inthose grammar implementation courses presupposesa fairly coherent audience of linguists with a sharedbackground of linguistic knowledge.
Second, sincecomputers are only used as a medium to implementgrammars and since the implementation platform isnot optimized for web-based training, it is neces-sary that there be a relatively low number of stu-dents per teacher.
Third, the theoretical material isin the form of overheads and research papers, whichare in electronic form but not easily accessible with-out the accompanying lecture as part of a seminar-style course.
Fourth, the background lectures of thecourses lack the support of the kind of graphical,interactive visualization that teaching software canin principle offer.
Finally, the courses follow a sin-gle path through the materials as determined by theteacher, which the student cannot change accordingto their specific interests and their prior knowledge.We believe that these shortcomings can be over-come by shifting from a seminar-style to a web-based training format in a way that preserves thepositive aspects of successful hands-on courses.
Onthe other hand, to successfully shift from seminar-style to web-based training we believe it is essentialto do this based on a scientific understanding of thenature and possibilities of web-based learning.
Inthe next section we therefore embed our work in thecontext of education and collaborate learning tech-nology research.3 Education and collaborative learningtechnology researchOur perspective on web-based training draws its in-spiration primarily from work in building ?learn-ing communities?
in education research (Lin et al,1995; Nonaka, 1994), in which:1. a precise context is established to introducetacit knowledge and experience, in this caseon subjects in computational linguistics and thetraditional disciplines it draws from,2.
conflicting perspectives are shared, conceptsare objectified and submitted to a process ofjustification and arbitration, and3.
the concepts are then integrated into the knowl-edge base as modules upon which further in-structional material or grammar implementa-tions can be constructed.We thus intend to provide an environment thatteaches students by actively encouraging them toparticipate in research that extends our collectiveknowledge in this area.
In principle, there are noboundaries to the material that could be included inthe evolving framework.
We intend to make it avail-able as an open-source standard for grammar de-velopment and instruction in the hope that this willencourage researchers and educators to contributemodules to it, and to use a feature-structure basedapproach for their own research and courses.Scardamalia and Bereiter (1993) identify sevenglobal characteristics that technologies must have tosupport this kind of participation:Balance: a distinction between public and privateand between individual and group knowledge pro-cesses.
That includes free access to others?
work, in-cluding implementations of concepts as algorithmsor grammars, and opportunities to borrow ideas intotheir own work that would be prohibitively time-consuming or otherwise advanced to formulate ontheir own.
Such technologies must also encour-age time for personal ?reflection and refinement?and anonymous public or private contribution to theknowledge space.
The present framework achievesthis by providing an open-source setting combinedwith a web-based instructional tool for self-pacedlearning and individual design of both the contentsand order of the curriculum.Contribution and notification: to prevent ideasfrom being presented in an insulated structure thatdiscourages questioning, debate, or revision.
As dis-cussed in Section 4.2, this is achieved by providingextensive linking and annotation of resources usingweb-compatible metalanguages for integrating mod-ules at the implementational, formal and instruc-tional levels.Source referencing: a means of preserving theboundaries of a contributor?s idea and its credit aswell as a history of prior accounts and antecedentsto the idea.
In the present framework, this is pro-vided by means of a requirements analysis compo-nent that requires contributed modules to identifythe contribution by new concepts or resources pro-vided, existing concepts or resources imported for itto work, and an account of existing alternatives witha description of its distinction from them.Storage and retrieval: which places contribu-tions in a ?communal context?
of related contribu-tions by others to encourage joint work between con-tributors working on problems with significant over-lap.
The present framework must organize the pre-sentation of existing modules along several thematicdimensions to accomplish this.Multiple points of entry: for stu-dents/contributors with different backgroundsand levels of experience.
Material is made acces-sible in more basic or fundamental modules byprojecting the formal content of the subject into agraphically based common-sense domain at whichit can be grasped more intuitively (see Section 4.3).Accessibility in more advanced modules is providedby links specified in the requirements analysiscomponent to more basic modules that the formerrely upon.Coherence-producing mechanisms: feedbackto contributors and framework moderators of mod-ules that are ?fading?
for lack of attention or furtherdevelopment.
These can either be reinstated or refor-mulated, moved to a private space of more periph-eral modules, or deleted outright.
This is a way ofencouraging activity that is productive, and restrict-ing the chance of confusion or information overload.Such a coherence mechanism must exist within thisframework.Links to external resources: to situate the justifi-cation and discussion of contributions in a wide con-text.
We make use of the web-based training plat-form ILIAS1 which is available as open source soft-ware and offers a high degree of flexibility in termsof the integration of internal and external resources.1http://www.ilias.uni-koeln.de/ios/index-e.html4 Integration of the frameworkThe goal of our current work is to transform previ-ous, seminar-style courses and new input into teach-ing materials that are fit for web-based training in thegeneral framework outlined in the previous section.This clearly involves much more than simply refor-matting old teaching materials into web-compatibleformats.
Instead, it requires an analysis of the con-tents of the courses, the interleaving and hyperlink-ing of the textual materials, and the developmentof graphical, interactive solutions for presenting andinteracting with the content of the material.
Sincethe nature of the textual material as such is familiar(instructional notes, reference guides to major sec-tions with indices, system documentation, annotatedsystem source code, and annotated grammar sourcecode), we use the limited space in this paper to high-light the integrated nature of the approach as well asthe web-based training specific issues of hyperlink-ing and visualization.4.1 Integration of linguistic and computationalaspectsOur approach is distinguished by its integration ofgrammars, the parsers that use them and the on-line instructional materials.
Compared to the LKBsystem2, which as mentioned in Section 5.2 hasalso been used successfully in teaching grammardevelopment, the greater range of formal expres-sive devices available to our parsing system, calledTRALE, allows for more readable and compactgrammars, which we believe to be of central impor-tance in a teaching context.
To illustrate this, weare currently porting the LinGO3 English ResourceGrammar (ERG) from the LKB (on which the ERGwas designed) to the TRALE system.Given the scope of our web-based training frame-work as including an integrated module on parsing,it is also relevant that the TRALE system itself canbe relatively compact and transparent at the source-code level since it exploits its close affinity to theunderlying Prolog on which it is implemented.
Thiscontrasts with the perspective of Copestake et al(2001), who concede that the LKB is unsuitable forteaching parsing.2http://www-csli.stanford.edu/?aac/lkb.html3http://lingo.stanford.edu/csli/4.2 The use of hyperlinksSeveral different varieties of links are distinguishedwithin the course material, giving a first-class repre-sentation to the transfer of knowledge between thelinguistic, computational and mathematical sourcesthat inform this interdisciplinary area.
We intend todistinguish the following kinds of links:Conceptual/taxonomical: connecting instancesof key concepts and terms used throughout thecourse material with their definitions and prove-nience;Empirical context: connecting instances of de-sign decisions, algorithms and formal definitions toencyclopedic discussions of their linguistic motiva-tion and empirical significance;Denotational: connecting instances of construc-tional terms and issues within linguistics as well ascorrectness conditions of algorithms to the mathe-matical definitions that formalize them within thefoundations of constraint-based linguistics;Operational: connecting mathematical defini-tions and instances of related linguistic discussionsto computational instructional material describingthe algorithms used to construct, refute or transformthe formal objects representing them in a practicalsystem;Implementational: connecting discussions of al-gorithms to the actual annotated system source codein the TRALE system used to implement them, andmathematical definitions and discussions of linguis-tic constructions to the actual annotated grammarsource code used to represent them in a typical im-plementation.The idea behind this classification is that whenmore course material is added to the web-basedtraining framework we are proposing, the new mate-rial will take into account these distinctions to obtaina conceptually coherent use of hyperlinks through-out the framework.4.3 VisualizationOur three core modules make use of a number ofgraphical user interfaces: a tool for interleaved vi-sualization and interaction with trees and attributevalue matrices, one for the presentation of lexicalrules and their interaction, an Emacs-based source-level debugger, and a program for the graphical ex-ploration of the formal foundations of typed featurelogic.
The first two are extensions of tools we al-ready used for our previous courses, and the third isan extension of the ALE source-level debugger, sowe here focus on the last, new development.The main goal of the MorphMoulder (MoMo) isto project the formality of its subject, the formalfoundations of constraint languages over typed fea-ture structures, onto a graphical level at which it canbe grasped more intuitively.4 The transparency ofthis level is essential for providing multiple pointsof entry (Section 3) to this fundamentally impor-tant module.
The MoMo tool allows the user toexplore the relationship between the two levels ofthe formal architecture: the descriptions and the el-ements described.
To this end, the user works witha graphical interface on a whiteboard.
Labeled di-rected graphs representing feature structures can beconstructed on the whiteboard from their basic com-ponents, nodes and arcs.
The nodes are depictedas colored balls, which are assigned types, and thearcs are depicted as arrows that may be labeled byfeature names.
Once a feature structure has beenconstructed, the user may examine its logical prop-erties.
The three main functions of the MoMo toolallow one to check (1) whether a feature structurecomplies with a given signature, (2) whether a well-formed feature structure satisfies a description or aset of descriptions, and (3) whether a well-formedfeature structure is a model of a description or a setof descriptions.
In the context of the course, thefunctions of MoMo thus lead the user from under-standing the well-formedness of feature structureswith respect to a signature to an understanding offeature structures in their role as a logical model ofa theory.
If a student has chosen course modules thatinclude a focus on formal foundations of feature log-ics or feature logics based linguistic theory, the firstintroduction to the subject by MoMo can easily befollowed up by a course module with rigorous math-ematical definitions.In constraint-based frameworks, the user declaresthe primitives of the empirical domain in terms ofa type hierarchy with appropriate attributes and at-tribute values.
Consider a signature that licenseslists of various birds, which may then be classifiedaccording to certain properties.
First of all, the sig-4MoMo is written by Ekaterina Ovchinnikova, U. Tu?bingen.nature needs to comprise a type hierarchy and fea-ture appropriateness conditions for lists.
Let type listbe an immediate supertype of the types non-empty-list and empty-list in the type hierarchy (henceforthabbreviated as nelist and elist).
Let the appropri-ateness conditions declare the attributes HEAD andTAIL appropriate for (objects of) type nelist, the val-ues of TAIL at nelist be of type list, and the valuesof HEAD at type nelist be of type bird (for lists ofbirds).
Finally no attributes are appropriate for thetype elist.
A typical choice for the interpretation ofthat kind of signature in constraint-based formalismsis the collection of totally well-typed and sort re-solved feature structures.
All nodes of totally well-typed and sort resolved feature structures are of amaximally specific type (types with no subtypes);and they have outgoing arcs for all and only thosefeatures that are appropriate to their type, with thefeature values again obeying appropriateness.
Oursignature for lists thus declares an ontology of fea-ture structures with nodes of type nelist or elist (butnever of type list), where the former must bear theoutgoing arcs HEAD and TAIL, and the latter have nooutgoing arcs.
They signal the end of the list.
TheHEAD values of non-empty lists must be in the de-notation of the type bird.Figure 1 illustrates how the MoMo tool can beused to study the relationship between signaturesand the feature structures they license by lettingthe user construct feature structures and interac-tively explore whether particular feature structuresare well-formed according to the signature.
To theleft of the whiteboard there are two clickable graph-ics consoles of possible nodes and arcs from whichthe user may choose to draw feature structures.
Theconsoles offer nodes of all maximally specific typesand arcs of all attributes that are declared in thesignature.
In the present example, parrot, wood-pecker, and canary are the maximally specific sub-types of bird.Each color of edge represents a different attribute,and each color of node represents a different type.The grayed outlines on edges and nodes indicate thatall of the respective edges and nodes in this partic-ular example are licensed by the signature that wasprovided.
The HEAD arc originating at the node oftype elist, however, violates the appropriateness con-ditions of the signature.
The feature structure de-Figure 1: Graphically evaluating well-typedness offeature structures.picted here, therefore, is not well-formed.
The sig-nature check thus fails on the given feature structure,as indicated by the red light in the upper functionconsole to the right of the whiteboard.Similarly, MoMo can graphically depict satisfia-bility and modellability of a single description or setof descriptions.
To this end, the user may be asked toconstruct a description that a given feature structuresatisfies or models; or she may be asked to constructfeature structures that satisfy or model a given de-scription (or set of descriptions).
The system willgive systematic feedback on the correct or incorrectusage of the syntax of the description language aswell as on to which extent a feature structure satis-fies or models descriptions, systematically guidingthe user to correct solutions.Figure 2 shows a successful satisfiability check ofa well-formed feature structure.
The feature struc-ture is derived from the one in Figure 1 by re-moving the incorrect HEAD arc and its substructurefrom the elist node.
The query, asked in a sepa-rate window, is whether the feature structure satis-fies the constraint (nelist, head:(parrot,color:green), tail:nelist).
Since thisis the case, the green light on the function console tothe right is signaling succeed.
If we were to performmodel checking of the same feature structure againstthe same constraint, checking would fail, and MoMowould indicate the nodes of the feature structure thatdo not satisfy the given constraint.Figure 2: Graphically evaluating constraint satisfac-tion of feature structures.MoMo?s descriptions are a syntactic parallel toTRALE?s descriptions, thus introducing the studentnot only to the syntax and semantics of constraintlanguages but also to the language that will be usedfor the implementation of grammars later in thecourse.
The close relationship of description lan-guages also facilitates a comparison of their model-theoretic semantics and the truth conditions of gram-mars with the structure and semantics of algorithmsthat use descriptions for constraint resolution and inparsing.
Finally, their common structure allows for atight network of hyperlinks across the boundaries ofdifferent course modules and course topics, linkingthem to a common source of mathematical, imple-mentational and linguistic indices, which explain theusage of common mathematical concepts across thedifferent areas of application of typed feature struc-tures.5 From seminar-style courses toweb-based trainingHaving discussed the ideas driving the web-basedteaching platform and exemplified one of the tools,we now return to the courses which have informedour work on the three core modules currently beingdeveloped in terms of their content and the use of aweb- and implementation environment they make.5.1 Grammar implementation in ALEALE5 (Carpenter and Penn, 1996) is a conserva-tive extension of Prolog based on typed featurestructures, with a built-in parser and semantic-head-driven generator.
The demand for such a utilitywas so great when it was beta-released in 1992that it immediately became the subject of earlywork in graphical front-end development for largeconstraint-based grammars: first with the Pleuk sys-tem (Calder, 1993), then as one of several systemssupported by Gertjan van Noord?s HDrug6, followedby an ALE-mode Emacs user interface (Laurens,1995).
It also provided the computational supportfor one of the very first web-based computationallinguistics courses, Colin Matheson?s widely usedHPSG Development in ALE7.
A follow-up course oncomputational morphology8, also by Colin Mathe-son, was based on ALE-RA9, a morphological ex-tension of ALE by Tomaz Erjavec.Our current web-based training module is sup-ported by an extension of ALE, called TRALE,that uses a slightly different interpretation of typingfound in many linguistic theories and an enhancedconstraint language that supports constraints withcomplex antecedents (Penn, 2000).5http://www.cs.toronto.edu/?gpenn/ale.html6http://grid.let.rug.nl/?vannoord/hdrug/7http://www.ltg.hcrc.ed.ac.uk/projects/ledtools/ale-hpsg/8http://www.ltg.ed.ac.uk/projects/ledtools/ale-ra/9http://nl.ijs.si/et/Thesis/ALE-RA/5.2 Constraint-based grammarimplementationOver the past five years, we have held another courseon Constraint-Based Grammar Implementation ina variety of settings, from summer schools to reg-ular curriculum courses.10 It offers hands-on ex-perience to linguists interested in the formalizationof linguistic knowledge in a constraint-based gram-mar formalism.
The course is taught in an interac-tive fashion in a computer laboratory and combinesbackground lectures with practical exercises on howto specify grammars in ConTroll11 (Go?tz and Meur-ers, 1997), a processing system for constraint-basedgrammars intended to process with HPSG theoriesdirectly from the form in which they are constructedby linguists.The background lectures of the Constraint-basedgrammar implementation courses introduce the rel-evant mathematical and computational knowledgeand focus on the main ingredients of constraint-based grammars: highly structured lexical represen-tations, constituent structures, and the encoding ofwell-formedness constraints on grammatical repre-sentations.
In the lab, students work on exercisesexploring the theoretical concepts covered in the lec-tures.
In a later part of the course, they are giventhe opportunity to undertake individualized gram-mar projects for modeling theoretically and empir-ically significant syntactic constructions of their na-tive language.This course was the first hands-on computationalsyntax course at the European Summer Schoolin Language, Logic, and Information (ESSLLI,1997: Aix-en-Provence), and was also offered at theLSA Linguistic Institute (1999: University of Illi-nois, Urbana-Champaign)12 and the ComputationalLinguistics and Represented Knowledge (CLaRK)Summer School (1999: Eberhard-Karls Universita?t,Tu?bingen)13.
Generally regarded as a highly suc-cessful course and teaching method, every subse-quent ESSLLI summer school has offered at leastone similar course: Practical HPSG Grammar Engi-neering (1998: Ann Copestake, Dan Flickinger, and10The courses were taught by E. Hinrichs and D. Meurers.11http://www.sfs.uni-tuebingen.de/controll/12http://ling.osu.edu/?dm/lehre/lsa99/13http://ling.osu.edu/?dm/lehre/clark99/Stephan Oepen)14, Development of large scale LFGgrammars: Linguistics, Engineering and Resources(1999: Miriam Butt, Annette Frank, and JonasKuhn)15, Grammatical Resources: Logic, Struc-ture, Control (1999: Michael Moortgat and RichardT.
Oehrle)16, An Introduction to Grammar Engi-neering using HPSG (2000: Ann Copestake, RobMalouf)17, Advanced Grammar Engineering usingHPSG (2000: Dan Flickinger, Stephan Oepen)18,and An Introduction to Stochastic Attribute-ValueGrammars (2001: Rob Malouf, Miles Osborne)19.5.3 Introduction to theory-driven CLA further source of material for the core modulesof our web-based training framework is the graduatelevel Introduction to Theory-driven ComputationalLinguistics at the Ohio State University.20 It coversthe basic issues of the following topics: finite stateautomata and transducers, formal language theory,computability and complexity, recognizers/parsersfor context free grammars, memoization, and pars-ing with complex categories.The theoretical material is combined with prac-tical exercises in Prolog implementing different as-pects of parsers.
At the end of the course, studentscomplete a project consisting of building and testinga grammar fragment for a short English text of theirchoice.
The traditional one-quarter course includesweekly exercises, extensive web-based course mate-rial for students, and a course workbook21 as a guidethrough the theoretical material.5.4 Model-theoretic introduction to SyntaxOur approach to teaching the fundamentals of math-ematical theories through graphical metaphors inthe context of syntax derives from our experiencewith this method in teaching Syntax I (HPSG) atthe Eberhard-Karls Universita?t Tu?bingen in 1998,14http://www.coli.uni-sb.de/esslli/Seiten/Oepen.html15http://www.let.uu.nl/esslli/Courses/butt.html16http://www.let.uu.nl/esslli/Courses/moortgat-oehrle.html17http://www.cs.bham.ac.uk/?esslli/notes/copestake.html18http://www.cs.bham.ac.uk/?esslli/notes/oepen.html19http://odur.let.rug.nl/?malouf/esslli01/20The course was taught by D. Meurers; see http://ling.osu.edu/?dm/2001/winter/684.01/21This workbook is based, with kind permission from theauthors, on the module workbook for ?Techniques in NaturalLanguage Processing 1?
by Chris Mellish, Pete Whitelock andGraeme Ritchie, 1994, Dept.
of AI, University of Edinburgh.1999 and 2001.22 In these seminars, which did notpresuppose any prior knowledge of model-theoreticmethods in logic, the mathematical foundations offeature logic were introduced by intuitive means butwith as much precision as possible without strict for-malization.
An introduction to a standardized ver-sion of the logical description language of HPSGwas accompanied with problem sets that requiredthe students to construct three-dimensional featurestructure models (made of styrofoam and wires) ofdescriptions and sets of descriptions.
The informalbut very concrete understanding of the relationshipbetween a theory cast in a constraint language and itsfeature structure models had a very positive result onstudents?
ability to grasp and build working analysesof unseen constructions compared to the results ofthe more traditional method of teaching constraint-based syntax used in previous years.
At the sametime, the teaching method successfully used an ap-peal to prior world knowledge rather than unfamiliarmathematical notation in order to make the studentsfamiliar with the basic concepts of constraint satis-faction and truth in feature logics.6 Summary and OutlookThe interdisciplinary nature of computational lin-guistics and the diverse backgrounds of the studentaudience makes it particularly attractive to teach asubject like constraint-based grammar formalismsand parsing using a web-based instructional plat-form which integrates formal and computationalfoundations, linguistic theory, and grammar im-plementation.
We discussed several seminar-stylecourses which have informed our proposal in termsof content, highlighted the problems of the tradi-tional face-to-face teaching, and described our en-vironment of web-based teaching materials plus im-plementational support.
We argued that a web-basedtraining framework for the topic can be organizedaround feature structures as a central data structurein formal foundations, linguistics and implementa-tion.
We outlined the educational and collaborativelearning background in which an informed proposalon web-based training must be embedded and usedthe newly developed tool MoMo as an illustration22The courses were taught by F. Richter and M. Sailer; seehttp://www.sfs.uni-tuebingen.de/?fr/teaching/of how we envisage projecting the formal content ofthe subject into a graphically based common-sensedomain in which it can be grasped more intuitively.The three core modules on formal founda-tions, constraint-based grammar implementation,and parsing will be completed and made publiclyavailable at the end of 2003.
The joint projectis funded by the German Federal Ministry for Re-search Technology (BMBF) as part of the consor-tium Media-intensive teaching modules in the com-putational linguistics curriculum (MiLCA).23ReferencesJ.
Calder.
1993.
Graphical interaction with constraint-based grammars.
In Proceedings of PACLING ?93,pages 160?168, Vancouver, British Columbia.B.
Carpenter and G. Penn.
1996.
Compiling typedattribute-value logic grammars.
In H. Bunt andM.
Tomita, editors, Recent Advances in Parsing Tech-nologies, pages 145?168.
Kluwer, Dordrecht.A.
Copestake, J. Carroll, D. Flickinger, R. Malouf, andS.
Oepen.
2001.
Using an open-source unification-based system for CL/NLP teaching.
In Proceedingsof the EACL/ACL Workshop on Sharing Tools and Re-sources for Research and Education, pages 35?38.T.
Go?tz and W. D. Meurers.
1997.
The ConTroll systemas large grammar development platform.
In Proceed-ings of the EACL/ACL Workshop on ComputationalEnvironments for Grammar Development and Linguis-tic Engineering, pages 38?45.
http://ling.osu.edu/?dm/papers/envgram.html.O.
Laurens.
1995.
An Emacs user interface for ALE.Technical Report CSS-IS TR 95-07, School of Com-puting Science, Simon Fraser University.X.
Lin, J.D.
Bransford, and C.E.
Hmelo.
1995.
Instruc-tional design and development of learning communi-ties: an invitation to dialogue.
Educational Technol-ogy, 35(5):53?63.I.
Nonaka.
1994.
A dynamic theory of organizationalknowledge creation.
Organizational Science, 5(1).G.
Penn.
2000.
Applying Constraint Handling Rulesto HPSG.
In Proceedings of the Workshop on Rule-Based Constraint Reasoning and Programming, CL2000.M.
Scardamalia and C. Bereiter.
1993.
Technologiesfor knowledge-building discourse.
Communicationsof the ACM, 36(5):37?41.23http://milca.sfs.uni-tuebingen.de/A4/HomePage/top.html
