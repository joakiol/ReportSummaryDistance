Proceedings of COLING 2014, the 25th International Conference on Computational Linguistics: System Demonstrations,pages 71?75, Dublin, Ireland, August 23-29 2014.CLAM: Quickly deploy NLP command-line tools on the webMaarten van GompelCentre for Language Studies (CLS)Radboud University Nijmegenproycon@anaproy.nlMartin ReynaertCLS, Radboud University NijmegenTiCC, Tilburg Universityreynaert@uvt.nlhttp://proycon.github.io/clamAbstractIn this paper we present the software CLAM; the Computational Linguistics Application Medi-ator.
CLAM is a tool that allows you to quickly and transparently transform command-line NLPtools into fully-fledged RESTful webservices with which automated clients can communicate, aswell as a generic webapplication interface for human end-users.1 IntroductionIn the field of Natural Language Processing, tools often come in the form of command-line tools aimed atUNIX-derived systems.
We consider this good practice in line with the UNIX philosophy (McIlroy et al.,1978) which states, amongst others, that programs should 1) do one thing and do it well, and 2) expectthe output of one program to be the input of another.
This can be rephrased as the Rule of Modularity:write programs consisting of simple parts, connected by well-defined interfaces (Raymond, 2004).Programs operating at the command-line offer such modularity, making them ideally suitable for in-tegration in a wide variety of workflows.
However, the command-line may not be the most suitableinterface for non-specialised human end-users.
Neither does it by itself facilitate usage over network un-less explicit server functionality has been programmed into the application.
Human end-users often wanta Graphical User Interface (GUI), a special instance of which is a Web User Interface.
Yet for automatedclients operating over a network, such an interface is a cumbersome barrier, and these instead prefer aproperly formalised webservice interface.
CLAM offers a solution to this problem, when all there is is asimple NLP command-line tool.CLAM finds application in areas where people want to make their software available to a larger public,but a command-line interface is not sufficient.
Setting up your tool may be complicated, especially ifthere are many dependencies or the target audience does not use Linux machines.
CLAM is ideally suitedfor quick demo purposes, or for integration into larger workflow systems.
It removes the burden fromthe software developer (you) to have to implement a server mode and build a GUI or web-interface, thussaving precious time.2 System architectureThe Computational Linguistics Application Mediator (CLAM) is a tool that wraps around yourcommand-line interface and allows you to very quickly and transparently turn your program into 1) aRESTful (Fielding, 2000) webservice with which automated clients can communicate, as well as 2) ageneric web user interface for human end-users.
Just like an actual clam is a shell around the animal thatinhabits it, which most onlookers never see directly, CLAM wraps around your sofware, providing extrafunctionality and hardening it through its built-in security mechanism.
You do not need to modify youroriginal software in any way, it is always taken as a given, you merely need to describe it.This work is licensed under a Creative Commons Attribution 4.0 International Licence: http://creativecommons.org/licenses/by/4.0/71An NLP command-line tool can usually be described in terms of input files, output files and parametersinfluencing its run.
Parameters may either be global parameters, pertaining to the system as a whole, orlocal parameters which act as metadata for specific input files.
File formats are never dictated by CLAMitself, but are up to the service provider to define.Figure 1: Schematic overview of the CLAM architectureCLAM discerns three states, which also reflect the stages in which the end-user or automated clientinteracts with the system1.
The system is ready to accept files for input and input parameters2.
The system is running3.
The system is done and the output files are offered for presentation/download.Any tool that can be described in these terms can be used with CLAM.
The system has been designedspecifically to work with software that may take quite some time to process or runs large batches.
Stagetwo therefore is not confined to lasting mere seconds as is custom in web-based applications, but maylast as long as hours, days, or any duration that the end-user is willing to wait.
Also, end-users need notmaintain a connection to the server.
Human end-users may close their browser and return at will, andautomated clients simply poll the system?s status with a certain interval.You are not limited to just a single run of your system; you may set it up to allow upload and processingof multiple files and run them in batch fashion.
This approach is common in processing text files forpurposes such as tokenisation or any form of tagging.In order for CLAM to turn a command-line tool into a webservice, developers are expected to providetwo things in addition to the actual tool:1.
Service configuration - This specifies everything there is to know about your application, it defineswhat the input will be, what the output will be, and what parameters the system may take.
Inputand output are always in the form of files, adhering to whatever format you desire.
The web userinterface, however, also optionally offers a text field for users to create files on the fly.722.
System wrapper script - This is a small script that CLAM will invoke to start your system.
It actsas the glue between CLAM and your actual application and may do some necessary interpretationand transformation of parameters to suit the command-line interface of your application.A generic client for communicating with the webservice is already provided, more specific clients canbe written using the CLAM API (Python) to greatly facilitate development.
The architecture of CLAMis schematically visualised in Figure 1.CLAM is a multi-user system, although out-of-the-box it simply uses an ?anonymous?
user and re-quires no authentication.
Each user can create an arbitrary number of projects.
One project correspondsto one run of the system, which may be one large batch depending on how you configure your service.Users can always return to earlier projects and inspect input files and output files, until they explicitlydelete the project.2.1 Service ConfigurationIn the service configuration file, you specify precisely what kind of input goes into the system, and whatkind of output goes out: this results in a deterministic and thus predictable webservice.
With any inputand output files, arbitrary metadata can be associated.
For input files, metadata is created from parametersthat can be set by users, these are rendered as input fields in the web interface.
You can specify how thismetadata is carried over to output files.
Additionally, as part of the metadata, provenance data is generatedfor all output files.
These are both stored in a simple and straightforward XML format.All these definitions are specified in so-called profiles.
A profile defines input templates and outputtemplates.
These can be seen as ?slots?
for certain filetypes and their metadata.
A small excerpt ofa profile for a simple translation system with some associated metadata is shown in Figure 2.
A fulldiscussion of its syntax goes beyond the scope of this paper, but is explained at length in the manual.Profile(InputTemplate(?maininput?, PlainTextFormat,"Translator input: Plain-text document",StaticParameter(id=?encoding?,name=?Encoding?,description=?The character encoding of the file?,value=?utf-8?
),ChoiceParameter(id=?language?,name=?Language?,description=?The language the text is in?,choices=[(?en?,?English?),(?nl?,?Dutch?),(?fr?,?French?
)]),),extension=?.txt?,multi=True), OutputTemplate(?translationoutput?, PlainTextFormat,"Translator output: Plain-text document",CopyMetaField(?encoding?,?maininput.encoding?)SetMetaField(?language?,?de?
),removeextension=?.txt?,extension=?.translation?,multi=True))Figure 2: An excerpt of a fictitious profile for a simple translation system from English, Dutch or Frenchto German.
The attribute multi=True states that multiple files of this type may be submitted during asingle runGlobal parameters to the system are specified independently of any profiles.
Consider a global pa-rameter that would indicate whether or not want the fictitious translation system seen in Figure 2 to becase-sensitive, and take a look at the following example1:PARAMETERS = [(?Translation parameters?, [BooleanParameter(id=?casesensitive?,name=?Case Sensitivity?,description=?Enable case sensitive behaviour??
)])]1Parameters are always grouped into named groups, ?Translation parameters?
is just the label of the group here732.2 System WrapperCommunication between CLAM and your command-line tool proceeds through a system wrapper script.The service configuration file defines what script to call and what variables, pre-defined by CLAM, topass to it:COMMAND = "mywrapper.py $DATAFILE $OUTPUTDIRECTORY"This is then executed whenever a user runs a project.
It is the job of the system wrapper script toinvoke your actual application.There are two main means of communicating the parameters to the system wrapper: one is to makeuse of the data file ($DATAFILE), which is an XML file that contains all input parameters.
It can beparsed and queried effortlessly using the CLAM API, provided you write your wrapper script in Python.The other way, more limited, is to specify parameter flags for your global parameters2in the serviceconfiguration, and simply let CLAM pass all global parameters as arguments on the command line:COMMAND = "mywrapper.pl $INPUTDIRECTORY $OUTPUTDIRECTORY $PARAMETERS"By passing the input directory, the system wrapper script can simply look for its input files there.3 ExtensionsCLAM can be extended by developers in several ways.
One is to write viewers, which take care of thevisualisation of output files for a specific file format, and are used by the web user interface.
Viewersmay be implemented as internal Python modules, or you can link to any external URL which takes careof the visualisation.
Another extension is converters, these allow users to upload an input file in onefile type and have it automatically converted to another.
Converters for PDF and Word to plain text arealready provided through third party tools.4 Technical DetailsCLAM is written in Python (2.6 or 2.7), (van Rossum, 2007).
It comes with a built-in HTTP server fordevelopment purposes, allowing you to quickly test and adjust your service.
Final deployment can bemade on common webservers such as Apache, Nginx or lighthttpd through the WSGI mechanism.
Theservice configuration file itself is by definition a Python file calling specific configuration directives inthe CLAM API.
The system wrapper script may be written in any language, but Python users benefit asthey can use the CLAM API which makes the job easier.
Projects and input files are stored in a simpledirectory structure on disk, allowing your tool easy access.
No database server is required.The webservice offers a RESTful interface (Fielding, 2000), meaning that the HTTP verbs GET, POST,PUT and DELETE are used on URLs that represent resources such as projects, input files, output files.The web application is implemented as a client-side layer on the webservice.
It is presented through XSLtransformation (Clark, 1999) of the webservice XML output.User authentication is implemented in the form of HTTP Digest Authentication, which ensures thatthe password is sent in encrypted form over the network even with servers where HTTPS is not used.HTTPS support is not present in CLAM itself but can be configured in the encompassing webserver.
Theunderlying user database can be specified either directly in the service configuration file or in a table ina Mysql database, but it is fairly easy to replace this and communicate with another external database ofyour choice instead.
There is also support for propagating credentials from another authentication sourcesuch as Shibboleth3, allowing for integrating with single-sign-on scenarios.
Implementation of OAuth24will follow in a later version.CLAM is open-source software licensed under the GNU Public License v3.
Both the software aswell as the documentation can be obtained through the CLAM website at github: http://proycon.github.io/clam .2caveat: this does not work for local parameters, i.e.
parameters pertaining to files3http://shibboleth.net4http://oauth.net/2/745 Related WorkAs far as we know, the only tool comparable to CLAM is Weblicht (Hinrichs et al., 2010).
Both tools arespecifically designed for an NLP context.
CLAM, however, is of a more generic and flexible nature andmay also find easier adoption in other fields.When it comes to data formats, Weblicht commits to a specific file format for corpus data.
CLAMleaves file formats completely up to the service providers, although it does come, as a bonus, with aviewer for users of FoLiA (van Gompel and Reynaert, 2013).Weblicht is Java-based whereas CLAM is Python-based, which tends to be less verbose and moreeasily accessible.
System wrapper scripts can be written in any language, and service configuration filessimply consist of directives that require virtually no Python knowledge.All in all CLAM offers a more lightweight solution than Weblicht, allowing webservices to be setup more easily and quicker.
Nevertheless, CLAM offers more power and flexibility in doing what itdoes: wrapping around command-line tools, its webservice specification is more elaborate than that ofWeblicht.
On the other hand, CLAM deliberately does not go as far as Weblicht and does not offer acomplete chaining environment, which is what Weblicht is.
In this we follow the aforementioned UNIXphilosophy of doing one thing well and one thing only.
Service chaining certainly remains possible andCLAM provides all the information to facilitate it, but it is left to other tools designed for the task.
CLAMhas been successfully used with Taverna (Hull et al., 2006) in the scope of the CLARIN-NL project ?TSTTools for Dutch as Webservices in a Workflow?
(Kemps-Snijders et al., 2012).AcknowledgementsCLAM support and development is generously funded by CLARIN-NL (Odijk, 2010), and is beingused by various projects in the Dutch & Flemish NLP communities, whose feedback and support havecontributed to its success.ReferencesJ.
Clark.
1999.
XSL transformations (XSLT) version 1.0.
Technical report, 11.R.
T. Fielding.
2000.
Architectural Styles and the Design of Network-based Software Architectures.
Doctoraldissertation.
University of California, Irvine.M.
Hinrichs, T. Zastrow, and E. W. Hinrichs.
2010.
Weblicht: Web-based LRT services in a Distributed eScienceInfrastructure.
In Nicoletta Calzolari, Khalid Choukri, Bente Maegaard, Joseph Mariani, Jan Odijk, SteliosPiperidis, Mike Rosner, and Daniel Tapias, editors, LREC.
European Language Resources Association.D.
Hull, K. Wolstencroft, R. Stevens, C. Goble, M. R. Pocock, P. Li, and T. Oinn.
2006.
Taverna: a tool forbuilding and running workflows of services.
Nucleic Acids Res, 34( Web Server issue):729?732, July.M.
Kemps-Snijders, M. Brouwer, J.P. Kunst, and T. Visser.
2012.
Dynamic web service deployment in a cloudenvironment.
In Nicoletta Calzolari, Khalid Choukri, Thierry Declerck, Mehmet Ugur Dogan, Bente Mae-gaard, Joseph Mariani, Jan Odijk, and Stelios Piperidis, editors, LREC, pages 2941?2944.
European LanguageResources Association (ELRA).M.
D. McIlroy, E. N. Pinson, and B.
A. Tague.
1978.
Unix time-sharing system forward.
The Bell SystemTechnical Journal, 57(6, part 2):p.1902.J.
Odijk.
2010.
The CLARIN-NL project.
In Proceedings of the Seventh International Conference on LanguageResources and Evaluation, LREC-2010, pages 48?53, Valletta, Malta.E.
S. Raymond.
2004.
The Art of Unix Programming.M.
van Gompel and M. Reynaert.
2013.
FoLiA: A practical XML Format for Linguistic Annotation - a descriptiveand comparative study.
Computational Linguistics in the Netherlands Journal, 3.G.
van Rossum.
2007.
Python programming language.
In USENIX Annual Technical Conference.
USENIX.75
