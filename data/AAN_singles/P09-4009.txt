Proceedings of the ACL-IJCNLP 2009 Software Demonstrations, pages 33?36,Suntec, Singapore, 3 August 2009.c?2009 ACL and AFNLPSystem for Querying Syntactically Annotated CorporaPetr PajasCharles Univ.
in Prague, MFF?UFALMalostransk?e n?am.
25118 00 Prague 1 ?
Czech Rep.pajas@ufal.mff.cuni.czJan?St?ep?anekCharles Univ.
in Prague, MFF?UFALMalostransk?e n?am.
25118 00 Prague 1 ?
Czech Rep.stepanek@ufal.mff.cuni.czAbstractThis paper presents a system for queryingtreebanks.
The system consists of a pow-erful query language with natural supportfor cross-layer queries, a client interfacewith a graphical query builder and visual-izer of the results, a command-line clientinterface, and two substitutable query en-gines: a very efficient engine using a re-lational database (suitable for large staticdata), and a slower, but paralel-computingenabled, engine operating on treebank files(suitable for ?live?
data).1 IntroductionSyntactically annotated treebanks are a great re-source of linguistic information that is availablehardly or not at all in flat text corpora.
Retrievingthis information requires specialized tools.
Someof the best-known tools for querying treebanksinclude TigerSEARCH (Lezius, 2002), TGrep2(Rohde, 2001), MonaSearch (Maryns and Kepser,2009), and NetGraph (M?
?rovsk?y, 2006).
All thesetools dispose of great power when querying a sin-gle annotation layer with nodes labeled by ?flat?feature records.However, most of the existing systems are littleequipped for applications on structurally complextreebanks, involving for example multiple inter-connected annotation layers, multi-lingual par-allel annotations with node-to-node alignments,or annotations where nodes are labeled by at-tributes with complex values such as lists or nestedattribute-value structures.
The Prague Depen-dency Treebank 2.0 (Haji?c and others, 2006), PDT2.0 for short, is a good example of a treebank withmultiple annotation layers and richly-structuredattribute values.
NetGraph was a tool tradition-ally used for querying over PDT, but still it doesnot directly support cross-layer queries, unless thelayers are merged together at the cost of loosingsome structural information.The presented system attempts to combine andextend features of the existing query tools and re-solve the limitations mentioned above.
We aregrateful to an anonymous referee for pointing usto ANNIS2 (Zeldes and others, 2009) ?
anothersystem that targets annotation on multiple levels.2 System OverviewOur system, named PML Tree Query (PML-TQ),consists of three main components (discussed fur-ther in the following sections):?
an expressive query language supportingcross-layer queries, arbitrary boolean com-binations of statements, able to query com-plex data structures.
It also includes a sub-language for generating listings and non-trivial statistical reports, which goes far be-yond statistical features of e.g.
TigerSearch.?
client interfaces: a graphical user inter-face with a graphical query builder, a cus-tomizable visualization of the results and acommand-line interface.?
two interchangeable engines that evaluatequeries: a very efficient engine that requiresthe treebank to be converted into a rela-tional database, and a somewhat slower en-gine which operates directly on treebank filesand is useful especially for data in the processof annotation and experimental data.The query language applies to a generic datamodel associated with an XML-based data formatcalled Prague Markup Language or PML (Pajasand?St?ep?anek, 2006).
Although PML was devel-oped in connection with PDT 2.0, it was designedas a universally applicable data format based onabstract data types, completely independent of a33particular annotation schema.
It can capture sim-ple linear annotations as well as annotations withone or more richly structured interconnected an-notation layers.
A concrete PML-based format fora specific annotation is defined by describing thedata layout and XML vocabulary in a special filecalled PML Schema and referring to this schemafile from individual data files.It is relatively easy to convert data from otherformats to PML without loss of information.
Infact, PML-TQ is implemented within the TrEdframework (Pajas and?St?ep?anek, 2008), whichuses PML as its native data format and already of-fers all kinds of tools for work with treebanks inseveral formats using on-the-fly transformation toPML (for XML input via XSLT).The whole framework is covered by an open-source license and runs on most current platforms.It is also language and script independent (operat-ing internally with Unicode).The graphical client for PML-TQ is an exten-sion to the tree editor TrEd that already serves asthe main annotation tool for treebank projects (in-cluding PDT 2.0) in various countries.
The clientand server communicate over the HTTP protocol,which makes it possible to easily use PML-TQ en-gine as a service for other applications.3 Query LanguageA PML-TQ query consists of a part that selectsnodes in the treebank, and an optional part thatgenerates a report from the selected occurrences.The selective part of the query specifies condi-tions that a group of nodes must satisfy to matchthe query.
The conditions can be formulated asarbitrary boolean combinations of subqueries andsimple statements that can express all kinds of re-lations between nodes and/or attribute values.
Thispart of the query can be visualized as a graph withvertices representing the matching nodes, con-nected by various types of edges.
The edges (vi-sualized by arrows of different colors and styles)represent various types of relations between thenodes.
There are four kinds of these relations:?
topological relations (child, descendantdepth-first-precedes, order-precedes, same-tree-as, same-document-as) and theirreversed counterparts (parent, ancestor,depth-first-follows, order-follows)?
inter- or cross-layer ID-based references?
user-implemented relations, i.e.
relationswhose low-level implementation is providedby the user as an extension to PML-TQ1(for example, we define relations eparent andechild for PDT 2.0 to distinguish effective de-pendency from technical dependency).?
transitive closures of the preceding two typesof relations (e.g.
if coref text.rf is a re-lation representing textual coreference, thencoref text.rf{4,} is a relation rep-resenting chains of textual coreference oflength at least 4).The query can be accompanied by an optionalpart consisting of a chain of output filters that canbe used to extract data from the matching nodes,compute statistics, and/or format and post-processthe results of a query.Let us examine these features on an exampleof a query over PDT 2.0, which looks for Czechwords that have a patient or effect argument in in-finitive form:t-node $t := [child t-node $s := [functor in { "PAT", "EFF" },a/lex.rf $a ] ];a-node $a := [m/tag??
?Vf?,0x child a-node [ afun = ?AuxV? ]
];>> for $s.functor,$t.t_lemmagive $1, $2, count()sort by $3 descThe square brackets enclose conditions regardingone node, so t-node $t := [...] is read?t-node $t with .
.
.
?.
Comma is synonymous withlogical and.
See Fig.
3 for the graphical represen-tation of the query and one match.This particular query selects occurrences of agroup of three nodes, $t, $s, and $a with thefollowing properties: $t and $s are both of typet-node, i.e.
nodes from a tectogrammatical tree(the types are defined in the PML Schema for thePDT 2.0); $s is a child of $t; the functor at-tribute of $s has either the value PAT or EFF; thenode $s points to a node of type a-node, named$a, via an ID-based reference a/lex.rf (thisexpression in fact retrieves value of an attributelex.rf from an attribute-value structure storedin the attribute a of $s); $a has an attribute m car-rying an attribute-value structure with the attribute1In some future version, the users will also be able to de-fine new relations as separate PML-TQ queries.340xt-node $s functor in { "PAT", "EFF" }t-node $tOutput filters:  >>  for $s.functor,$t.t_lemma     give $1,$2,count()     sort by $3 desca-node afun = 'AuxV'a-node $a m/tag ~ '^Vf'a/lex.rfchild#PersPronACTn.pron.def.perszapomenout enuncPREDv#CorACTqcomplexd?chatPATv.a-lnd94103-087-p1s3AuxSZapomn?liPredjsmeAuxV d?chatObj.AuxKZapomn?eli jsme d?ychat.
[We-forgot (aux) to-breathe.
]Figure 1: Graphical representation of a query (left) and a result spanning two annotation layerstagmatching regular expression ?Vf (in PDT 2.0tag set this indicates that $a is an infinitive); $ahas no child node that is an auxiliary verb (afun= ?AuxV?).
This last condition is expressed as asub-query with zero occurrences (0x).The selective part of the query is followed byone output filter (starting with >>).
It returns threevalues for each match: the functor of $s, the tec-togrammatical lemma of $t, and for each distinctpair of these two values the number of occurrencesof this pair counted over the whole matching set.The output is ordered by the 3rd column in the de-scending order.
It may look like this:PAT mo?znost 115PAT schopn?y 110EFF a 85PAT #Comma 83PAT rozhodnout_se 75In the PML data model, attributes (like a of$t, m of $a in our example) can carry com-plex values: attribute-value structures, lists, se-quences of named elements, which in turn maycontain other complex values.
PML-TQ addressesvalues nested within complex data types by at-tribute paths whose notation is somewhat similarto XPath (e.g.
m/tag or a/[2]/aux.rf).
Anattribute path evaluated on a given node may re-turn more than one value.
This happens for ex-ample when there is a list value on the attributepath: the expression m/w/token=?a?
where mis a list of attribute-value structures reads as someone value returned by m/w/token equals ?a?.By prefixing the path with a*, we may writeall values returned by m/w/token equal ?a?
as*m/w/token=?a?.We can also fix one value returned by an at-tribute path using the member keyword and queryit the same way we query a node in the treebank:t-node $n:= [member bridging [type = "CONTRAST",target.rf t-node [ functor="PAT" ]]]where bridging is an attribute of t-node con-taining a list of labeled graph edges (attribute-value structures).
We select one that has typeCONTRAST and points to a node with functor PAT.4 Query Editor and ClientFigure 2: The PML-TQ graphical client in TrEdThe graphical user interface lets the user tobuild the query graphically or in the text form; inboth cases it assists the user by offering availablenode-types, applicable relations, attribute paths,and values for enumerated data types.
It commu-nicates with the query engine and displays the re-sults (matches, reports, number of occurrences).35Colors are used to indicate which node in thequery graph corresponds to which node in the re-sult.
Matches from different annotation layers aredisplayed in parallel windows.
For each result, theuser can browse the complete document for con-text.
Individual results can be saved in the PMLformat or printed to PostScript, PDF, or SVG.
Theuser can also bookmark any tree from the resultset, using the bookmarking features of TrEd.
Thequeries are stored in a local file.25 EnginesFor practical reasons, we have developed two en-gines that evaluate PML-TQ queries:The first one is based on a translator of PML-TQ to SQL.
It utilizes the power of modern re-lational databases3and provides excellent perfor-mance and scalability (answering typical queriesover a 1-million-word treebank in a few seconds).To use this engine, the treebank must be, simi-larly to (Bird and others, 2006), converted intoread-only database tables, which makes this en-gine more suitable for data that do not change toooften (e.g.
final versions of treebanks).For querying over working data or data notlikely to be queried repeatedly, we have devel-oped an index-less query evaluator written in Perl,which performs searches over arbitrary data filessequentially.
Although generally slower than thedatabase implementation (partly due to the costof parsing the input PML data format), its perfor-mance can be boosted up using a built-in supportfor parallel execution on a computer cluster.Both engines are accessible through the identi-cal client interface.
Thus, users can run the samequery over a treebank stored in a database as wellas their local files of the same type.When implementing the system, we periodi-cally verify that both engines produce the sameresults on a large set of test queries.
This testingproved invaluable not only for maintaining con-sistency, but also for discovering bugs in the twoimplementations and also for performance tuning.6 ConclusionWe have presented a powerful open-source sys-tem for querying treebanks extending an estab-2The possibility of storing the queries in a user accounton the server is planned.3The system supports Oracle Database (version 10g ornewer, the free XE edition is sufficient) and PostgreSQL (ver-sion at least 8.4 is required for complete functionality).lished framework.
The current version of the sys-tem is available at http://ufal.mff.cuni.cz/?pajas/pmltq.AcknowledgmentsThis paper as well as the development of the sys-tem is supported by the grant Information Societyof GA AV?CR under contract 1ET101120503 andby the grant GAUK No.
22908.ReferencesSteven Bird et al 2006.
Designing and evaluating anXPath dialect for linguistic queries.
In ICDE ?06:Proceedings of the 22nd International Conferenceon Data Engineering, page 52.
IEEE Computer So-ciety.Jan Haji?c et al 2006.
The Prague Dependency Tree-bank 2.0.
CD-ROM.
Linguistic Data Consortium(CAT: LDC2006T01).Wolfgang Lezius.
2002.
Ein Suchwerkzeug f?ur syn-taktisch annotierte Textkorpora.
Ph.D. thesis, IMS,University of Stuttgart, December.
Arbeitspapieredes Instituts f?ur Maschinelle Sprachverarbeitung(AIMS), volume 8, number 4.Hendrik Maryns and Stephan Kepser.
2009.Monasearch ?
querying linguistic treebanks withmonadic second-order logic.
In Proceedings of the7th International Workshop on Treebanks and Lin-guistic Theories (TLT 2009).Ji?r??
M??rovsk?y.
2006.
Netgraph: A tool for searchingin Prague Dependency Treebank 2.0.
In Proceed-ings of the 5th Workshop on Treebanks and Linguis-tic Theories (TLT 2006), pages 211?222.Petr Pajas and Jan?St?ep?anek.
2008.
Recent advancesin a feature-rich framework for treebank annotation.In The 22nd International Conference on Computa-tional Linguistics - Proceedings of the Conference,volume 2, pages 673?680.
The Coling 2008 Orga-nizing Committee.Petr Pajas and Jan?St?ep?anek.
2006.
XML-based repre-sentation of multi-layered annotation in the PDT 2.0.In Proceedings of the LREC Workshop on Mergingand Layering Linguistic Information (LREC 2006),pages 40?47.Douglas L.T.
Rohde.
2001.
TGrep2 thenext-generation search engine for parse trees.http://tedlab.mit.edu/?dr/Tgrep2/.Amir Zeldes et al 2009.
Information structure inafrican languages: Corpora and tools.
In Proceed-ings of the Workshop on Language Technologies forAfrican Languages (AFLAT), 12th Conference of theEuropean Chapter of the Association for Computa-tional Linguistics (EACL-09), Athens, Greece, pages17?24.36
