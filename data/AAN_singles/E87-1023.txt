A MODEL FOR PREFERENCEDominique PetitpierreISSCOUniversity of Geneva54 route des AcaciasCH-1227 Geneva, SwitzerlandSteven KrauwerLouis des TombeInstituut voor Algemene TaalwetenschapRi jksuniversiteit  UtrechtTrans 143512 JK Utrecht, The NetherlandsDoug ArnoldCentre for Cognit ive StudiesUniversity of EssexColchester, CO4 3SQ, EnglandGiovanni B. Vari leDG XIII, Batiment Jean MonnetCommission of the European communit iesP.O.
Box 1907, Luxembourg, LuxembourgAbstractIn this paper we address the problem ofchoosing the best solution(s) from a setof interpretations of the same object (inour case a segment of text).
A notion ofpreference is stated, based on pairwisecomparisons of complete interpretations inorder to obtain a partial order among thecompeting interpretations.
An experimentalimplementation is described, which usesProlog-l ike preference statements.1.
IntroductionIn this paper we address the problem ofchoosing the best solution(s) from a setof interpretations of the same text seg-ment (For the sake of brevity, throughoutthis text we use the term interpretation,where in fact we should write representa-tion of an interpretation).
Althoughdeveloped in the context of a machinetranslation system (the Eurotra project,Arnold 1986, Arnold and des Tombe 1987),we believe that our approach is suited tomany other fields of computationall inguistics and even outside (patternrecognition, etc.
).After a brief overview of the problem(section 2), we suggest a general methodto deal with preference (section 3) andthen describe a possible implementation(section 4).
An appendix gives actualexamples of preference statements.2.
What is preference?In the computational l inguisticsliterature, the term 'preference' has beenused in dif ferent contexts.
We shall men-tion a few, selectively, (in section 2.1which may be skipped) and then state ourown view (in section 2.2).2.1.
Various approachesPreference strategies have often beenused for deal ing with the problem of ill-formed input (a part icular case of robust-ness, cf below section 2.2) (AJCL 1983,Charniak 1983).
Fol lowing Weischedel andSondheimer (1983) we dist inguish the cases134where preference is part of the part icularcomputation being performed (Wilks 1973,Fass and Wilks 1983, Pereira 1985) fromthe case where it is a separate process,run after the results of the computationhave been obtained (Jensen et al1983,Weischedel and Sondheimer 1983).A frequent approach to preference isscoring.
A numeric score is calculated,independently, for each competinginterpretation and is then used to rankthe interpretations.
The best interpreta-tions are then chosen.
The score can bethe number of constraints satisf ied by theinterpretation (Wilks 1973, Fass & Wilks1983), where these constraints might beassigned relative weights by the l inguist(Robinson 1982, Charniak 1983, Bennett andSlocum 1985) or calculated by the computer(Papegaaij 1986).
Such techniques havebeen used extensively for speech recogni-tion (Paxton 1977, Walker et al1978) andin the field of expert systems (such asMycin, Buchanan & Shortl i f fe 1984), wherethe calculation of both score and rankingbecome quite complex with probabi l i t iesand thresholds.The problem with scoring is that itseems quite unnatural for a l inguist toassociate a score (or weight or probabil-ity) to a part icular rule or piece of datawhen the knowledge being encoded is infact qualitative.
Furthermore, combiningthe scores based on different types ofreasoning to calculate a global score fora representation seems a rather arbitraryprocedure.
Such a uniform metric, even ifit can model actual l inguistic knowledge,forces the grammar writer to juggle withnumbers to get the behaviour he wants,thus making the preference processobscure.A further disadvantage of this approach isthat the score is often based on the wayinterpretations are built, rather than onthe propert ies of the interpretationsthemselves.Preference is also mentioned in al inguistic controversy started by Frazierand Fodor (1979) with their principles ofright associat ion and minimal attachment(Schubert 1984).
There the problem is todisambiguate many readings (or interpreta-tions) of a sentence in order to find thegood (preferred) one(s).
Various contribu-tions on that issue have in common thatbad interpretations are abandoned beforebeing finished, during computation(Shieber 1983, Pereira 1985).
Althoughthis method speeds up the computation,there is a risk that a possibl i ty will beabandoned too early, before the relevantinformation has been found.
This is shownby Wilks et al(1985) who claim to havethe ideal solution in Preference Seman-tics, which uses as part of its computa-tion scoring and ranking.2.2.
Our notion of preferenceOur approach, although stemming fromearlier work in the Eurotra project(McNaught et al1983, Johnson et al1985),is, we believe, new and original.We make the fol lowing assumptions:i the relation 'translation of' betweentexts as establ ished by a machinetranslat ion system has to be one to one(1-1)?ii There is apriori no formal or l inguis-tic guarantee that this will be thecase for the relation as a whole or forthe translat ion steps between inter-mediate levels of representation.
(Anattempt to formalize this can be foundin Krauwer and des Tombe 1984 or insection 4 of Johnson et al1985).The problem we want to address here is thefollowing:Given the fact that one to many (l-n)translat ions do occur, how do we ensurethat the final result is still I-1.This problem is not restr icted to machinetranslation:Often a program (for example a parser or atext generator) produces many interpreta-tions of the same object (usually a textsegment) when in the ideal case only oneis wanted.
In the fol lowing we refer to a'l-n translation' for this generalphenomenon.We see two types of solutions to thisproblem, each of them applicable tospecif ic classes of cases:i Spurious results can be el iminated onthe basis of their own individual pro-perties (e.g.
well-formedness, com-pleteness); for this we wil l  use theterm 'filtering'.ii Spurious results can be el iminated viacomparison of competing representa-tions, where only the best one(s) willhave the right to survive; for this wewill use the term 'preference'.It is important to note that we res-trict ourselves to reducing l-n transla-tions to (ideally) i-i.
We will assumethat the 'good' translat ion is one of thecandidates.
The problem of forcing thesystem to come up with at least 1 transla-tion (i.e.
do something about possible 1-0cases) wil l  not be addressed here.
Inorder to avoid confusion we wil l  use theterm 'robustness' to refer to this type ofproblem.
We are aware of the fact that wedeviate sl ightly from the standard use ofthe term preference.135There are two main types of l-n -ness:i l inguist ical ly motivated (i.e.
realambiguity in analysis, or true synonymyin generation).ii accidental, caused by overgeneration ofthe descr ipt ive devices that define theresult ing (or intermediate) interpreta-tions.Note that overgenerat ion and ambiguity orsynonymy may hide cases of undergenerat ion(cf the robustness problem).We define the appl icat ion of preferenceas the select ion of the best element(s)from a set of competing interpretations ofthe same object.According to this def init ion the scor-ing and ranking mechanism described in theprevious section is a case of preference.In the rest of this paper we wil ldescribe a preference device that is dif-ferent from the scoring and rankingmechanism in the sense that it is notbased on the way interpretations arebuilt, but rather on l inguistic propert iesOf the objects themselves.
Its maincharacter ist ics are that:it applies to complete and sound (wellformed) interpretations only.
That is,all the other modules of construction,transformation and f i l tering have beenapplied (Ex: parsing, Wh-movement,etc).
Thus, for these modules all com-peting representat ions are equivalent,and all the information needed for com-paring them has been found.ii it is based on pairwise comparisonbetween alternative (competing)interpretat ions of the same object.The problem can then be stated as fol-lows:How do we make use of the l inguisticknowledge in order to insure a i-i trans-lation?It is our basic bel ief  that it is impossi-ble for the l inguist to know the exactnature of a class of competing interpreta-tions in advance.
This implies that hecannot in general formulate one singlerule that picks out the best one.3.
The proposed method3.1.
Basic ideaOur proposal is the following:- It should be possible to make(linguistic) statements of the type: ifrepresentat ion A has property X, and Bproperty Y, then A is to be preferred overB (e.g.
'in law texts declarat ive sen-tences are better than questions', or'sentences with a main verb are betterthan sentences without one').- On the basis of a set of such statementsit should be possible to establ ish a par-tial order over the set of competingrepresentations.- And in that case the number of candi-dates can be reduced by, for example, let-ting only the maximal elements survive, ordiscarding the minimal ones.3.2.
Problems with the methodThe first (but least serious) problemis that it is not certain that l inguistswill always be able to make such state-ments (we wil l  call them 'p re ferencestatements') over pairs of representa-tions.
Exper imentat ion is necessary.The second one is more serious: itwould be highly unreal ist ic  to expect thatthe result of applying of the preferencestatements wil l  be a l inear order, in factthere is not even a guarantee that theorder wil l  be partial.
In general the out-come will  be a directed graph.
There arethree ways of tackl ing this problem:The l inguist should try to make the setof preference statements homogeneousand constrained, and should have con-trol over the way in which they areapplied, so that he can avoid contrad-ictory statements.ii One tries to make a formal device thatchecks whether contradict ions canOccur.iii One tries to compare pairs of competi-tors in a specif ic order such that itcan be guaranteed that the result isalways a partial  order.At the moment (iii) is the most feasible,(ii) the most ambitious, and (i) the mostdesirable solution.
Currently we envisagea combinat ion of (i) and (iii).The third problem is that of the maxi-mal elements.
Ideal ly there would be justone maximal element, i.e.
the preferredrepresentation.
This cannot be guaranteedto be true.The problems sketched here are by nomeans trivial.
That is why we want toexperiment with a first implementation ofthis method, to identify the variousrelevant parameters in the specif ic con-text of Eurotra.4.
The proposed implementationThe implementat ion proposed  here isdescribed in very general terms, and can136be adapted for a wide range of applica-tions.
We give in the appendix some com-mented examples specif ic to our particularcontext.4.1.
Preference rulesPreference statements are expressed bythe user in the form of rules (preferencerules).
There are three types of prefer-ence rules: simple rules, Dredefined rulesand composite rules.
A preference ruleapplied to two representations ofinterpretation tries to decide which oneis better than the other (preferred to theother).
It is not guaranteed that a rulecan always take a decision.A simple preference rule is of the formp = (Patternl > Pattern2)The name of the rule is p, and Patternland Pattern2 are current patterns.
Whengiven two arguments (two representationsor subparts) A and B (written p(A,B)) thesystem will  try to match Patternl with Aand Pattern2 with B.
If this succeeds thenA is better than B (or A is preferred to Bor A>B).
If it fails then the system willtry to match A with Pattern2 and B withPatternl.
If this succeeds then B isbetter than A.Predefined rules are provided for thecases where simple rules cannot expresssome useful basic preference statement.For example, in our actual implementation(cf appendix), two Dredefined rules saythat a tree structure with fewer (more)branches than the other is to be preferredto one with more (fewer) branches.
Thiscannot be expressed with the part icularlanguage for patterns.A composite preference rule is offormp = (Patternl,Pattern2)=> (pl($V,$W),p2 ($X, $Y),.-.
)theIdentif iers p, pl, p2, ... are rule names,Patternl and Pattern2 are actual patterns,and SV, $W, $X, $Y, ... are variable iden-tifiers, that should also occur in Pat-ternl ($V,$X) and Pattern2 ($W,$Y) wherethey identify sub-parts of the interpreta-tions.
When given two arguments A and B,the system tries to match A with Patternland B with Pattern2.
If this succeeds, thevariables SV,$X,.. occurring in Patternland SW,$Y .... occurring in Pattern2 areinstantiated to sub-parts of A and Brespectively.
Then the system tries eachpreference rule of the list, with theinstantiated arguments, till one rule candecide.
In this case the relat ionshipholding between A and B is the same asthat holding between the sub-part of A andthe sub-part of B.
If no rule of the listcan decide then preference is not decided.If the initial match doesn't succeed, thenan attempt wil l  be made to match A withPattern2 and B with Patternl.
If thissucceeds the system tries the rules of thelist in the same way as above.
Compositepreference rules al low recursion.This formalism is very much inspired bythe programming language Prolog: a prefer-ence rule is analogous to a three argumentpredicate (two interpretations and theresult ing relationship), a simple rule toan assertion, and a composite rule to aclause with sub-goals.4.2.
General algorithmInitially, all competing objects are inthe set of non ordered objects N and theset of ordered objects O is empty.
Then,the fol lowing is repeated until N isempty: an object is removed from N and iscompared to each object of O (if any),then it is added to O.This algorithm does not ensure that theresult ing directed graph of preferencerelat ionships among the competing objectshas no cycle.
Anyway, maximal (minimal)elements can be defined in the fol lowingway:An object E is a maximal (minimal) ele-ment if no competing object is better(worse) than E.Thus an object in a cycle of the graphcannot be maximal (minimal).To give the user control of how rulesare tr ied on the competing objects, onlyone dist inguished rule is applied to eachcompeting pair.
In the general case itshould be a composite rule that justpasses its two arguments to the rules ofthe list, thus ensuring that only theserules are tr ied and in that order.The pattern matching mechanism of com-posite rules is quite powerful.
(see alsothe appendix): It al lows some preferencesrule to be applied only to selectedobjects (satisfying a precondition).
Italso al lows (recursive) explorat ion ofsub-parts of representat ions (a derivationtree for example), in paral lel  or not.Finally it enables the user to give prior-ity to some preference rules over someothers.4.3.
Problems with the implementationAlthough we decided that this model isgood enough for prel iminary experimenta-tion, certain problems are alreadyapparent:- The system takes arbitrary decisions inthe case of a contradiction, that is if137some rule can be applied to a pair ofarguments in both orders (if p(A,B) andp(B,A) are both possible).
In part icular apreference decision should not be takenbetween identical objects.- Infinite recurs!on can occur with ctmpo-site preference rules.- Maximal (minimal) elements may not existin the result ing graph of preference rela-t ionships (for example if all elements arein a cycle).- Arbitrary decisions may be taken if thepatterns al low mult iple matches: thecurrent model wil l  stop with the firstmatch that produces a decision.Currently it is the user's responsibi l -ity to avoid these problems by writ ing"sensible" rules.
In the next section wesketch some possible solutions that areconsidered for a future implementation.5.
Future directionsThe implementation of this preferencemodel has been written in Prolog.
Tofacil itate experimentation, a mechanism isprovided for tracing the preference rulesappl icat ion to observe their behaviour.The model descr ibed above is very flex-ible.
We are currently studying the imple-mentation of variants of the basic com-parison algorithm:We are invest igat ing algorithms thatwould:- reduce the number of comparisons, byaiming at extract ing only the maximal(minimal) elements, without trying toorder all elements.- calculate the transit ive closure of thedirected graph, and then remove all con-tradictory relationships, thereby removingall cycles.
This amounts to saying thattwo interpretat ions are not comparable iftheir comparison leads to contradictorydecisions.- compare the competing interpretationsstepwise, that is all comparisons are per-formed with the first rule in a list, thenonly the pairs for which there is no deci-sion yet are compared with the secondrule, and so on.ACKNOWLEDGEMENTSWe would l ike to thank Paul Bennett,Maghi King, Gert jan Van Noord, Mike Rosnerand Susan Warwick for their fruitful com-ments and their support.APPENDIXIn the current framework of EUROTRA(Arnold and des Tombe 1987), representa-tion of interpretat ions are derivationtrees, containing at each node a set ofattr ibute-value pairs.
Here is a verysketchy and intuit ive descr ipt ion of thesyntax used in the patterns:- The identif iers s, np, vp etc.
arevalues of the  dist inguished attributeof the node (in these examples, thesyntactic category).- Curly brackets del imit a set of condi-tions to be satisf ied by a node.
Forexample (s,f=declarative} indicate therequired condit ions on the node for thedist inguished attr ibute (should havevalue s) and for an f attr ibute (shouldhave value declarative).- SA, SB, etc.
are var iable identifiers.- s.\[np,vp\] indicates a tree with root sand two daughters np and vp.- ?
or (?)
indicates an unspecif ied node.- * indicates a l ist of unspeci f iednodes.- SAiPattern indicates that the var iable$A is instantiated to the sub-tree thatmatches Pattern- $more branches (and $1ess_branches) isa predef ined preference rule thatprefer the argument that has more(less) branches than the other.- The first rule declared becomes thedist inguished rule applied to the com-peting interpretations.Example 1p0 = ($A!(?),$B!(?
)=> (pI($A,$B),p2($A,$B)),pl = ((s,f=declarative)> {s,f=interrogative}),p2 = (s.\[np,v,$A\]s,*\],s.\[np,v,$B!s,*\])=> (pI($A,$B),p2($A,$B))This set of preference rules wil lexplore, in parallel, two trees, from topto bottom, always taking the 's' branch,and prefer the tree in which it finds adeclarat ive sentence (opposed to aninterrogative).
I f  one inverts the order ofpl and p2 in the dist inguished compositerule p0  the trees would be explored frombottom to top.Rule p0 just passes its arguments to pl orp2~Rule pl prefers a declarat ive s over aninterrogative s.Rule p2 identif ies the embedded s in eachargument and passes them to pl or p2.Example 2p0 = (s.\[np,vp.\[*,$A!(?
)\]\] ,s.
\[np,vp.\[*,$B!(?
)\] \])=> (pI($A,$B),p2 ($A, SB),p3 ($A, $B) ),pl = (np.\[*,pp\] > pp),138p2 = (np.\[*,$A!np\] , $B!pp)=> (pl($A,$B),p2($A,$B),p3($A,$B)),p3 = (np.\[*,$A!(?)\],np.\[*,$B!(?
)\])=> (pI($A,$B),p2($A,$B),p3($A,$B)).Given two sentences, this set of ruleswill prefer the one that has the ppattached deeper in the structure than theother (right attachment).
This example isrestricted to explore only embedded nps.For both arguments, rule p0 identif ies thelast daughters of the vp of a sentence s,and passes them to preference rules pl orp2 or p3.Rule pl will prefer a pp attached under annp to a pp (which was attached higher inthe structure).Rule p2 will be tried only if pl was notapplicable.
It is there for the case thepp is imbedded deeper in the np.Rule p3 is similar to rule p0, except thatit takes the last daughters of a np.
It istried only if pl and p2 are not applica-ble.REFERENCESAJCL.
1983 Special issue on i l l-formedinput.
American 5ournal of computa-tional l inauistics 9(3-4).Arnold, Doug.
1986 Eurotra: A EuropeanPerspective On Machine Translation.Proceedinus of the IEEE 74(7): 979-992.Arnold, Doug and des Tombe, Louis.
1987Basic Theory and Methodology in EURO-TRA.
In: Nirenburg, Sergei, Ed.,Machine Translation.
Cambridge Univer-sity Press, Cambridge, England: 114-135.Bennett, Winf ield S. and Slocum, Jonathan.1985 The LRC machine Translation Sys-tem.
Computational l inquistics 11(2-3): iii-121.Buchanan, Bruce G. and Shortliffe, EdwardH.
1984 Ru~e-based Expert Systems.Addison Wesley, Reading, Massachusetts.Charniak, Eugene.
1983 A Parser WithSomething for Everyone.
In: King, Mar-garet, Ed., parsina Natural Lanquaqe.Academic Press, London, England: 117-149.Fass, Dan and Wilks, Yorick.
1983 Prefer-ence Semantics, I l l-Formedness, andMetaphor.
American iournal of computa-tional l inauistics 9(3-4): 178-187.Frazier, Lyn and Fodor, Janet D. 1978 TheSausage Machine: A New Two-Stage Pars-ing Model.
Coanition 6: 291-325.Jensen, K.; Heidorn, G. E.; Miller, L. A.and Ravin, Y.
1983 Parse Fitt ing andProse Fixing: Getting a Hold on Ill-Formedness.
American journal of compu-tational l inauistics 9(3-4): 147-160.Johnson, Rod; King, Margaret and desTombe, Louis.
1985 EUROTRA: A Multi l -ingual System Under Development.
Com-putational l inquistics 11(2-3): 155-169.Krauwer, Steven and des Tombe, Louis.1984 Transfer in a Mult i l ingual MachineTranslat ion System.
In: Proceedinus ofColinq84, Stanford, california: 464-467.Mc Naught, Jock; Arnold, Doug; Bennett,Paul; Fass, Dan; Grover, Claire; Huang,Xiuming; Johnson, Rod; Somers, Harry;Whitelock, Pete and Wilks, Yorick 1983Structure, Strategies and Taxonomy.Eurotra contract report ETL-I, Commis-sion of the European Communities, Lux-embourg, Luxembourg.Papegaaij, Bart; Sadler, Victor and Wit-kam, Toon.
1986 Word Expert Semantics;an Interl inqual Knowledae Based Ap-proach.
Foris, Dordrecht, Holland.Paxton, W.H.
1977 A Framework for SpeechUnderstanding.
Ph.D. Dissertation,Stanford University, Stanford, Califor-nia.Pereira, Fernando C. 1985 A New Charac-terization of Attachment Preferences.In: Dowty, David R.; Kartunnen, Lauriand Zwicky, Arnold M., Eds., Naturallanquaqe parsinq.
Cambridge UniversityPress, Cambridge,.
England: 307-319.Robinson, Jane J.
1982 DIAGRAM: A Grammarfor Dialogues.
Communications of theACM 25(1): 27-47.Schubert, Lenhart K. 1984 On ParsingPreferences.
In: proceedinqs of COL-ING84 Stanford, California: 247-250.Shieber, Stuart.
1983 Sentence Disambi-guation by a Shift-Reduce Parsing Tech-nique.
In: proceedinqs of IJCAI-8_/3Karlsruhe, West Germany: 699-703.Walker, D.E., Ed., 1978 Understandinq Spo-ken Lanquaqe.
North Holland, New York,New York.Weischedel, Ralph M. and Sondheimer, Nor-man K. 1983 Meta-rules as a Basis forProcessing I l l -Formed Input.
Americaniournal of computational l inquistics9(3-4): 161-177.Wilks, Yorick.
1973 An Artif icial Intel-l igence Approach to Machine Transla-tion, In: Schank, Roger C. and Colby,Mark Kenneth, Eds., Computer Models ofThought and Lanquaqe.
W.H.
Freeman andCo, San Francisco, California: 114-151.Wilks, Yorick; Huang, Xiuming and FassDan.
1985 Syntax, Preference and RightAttachment.
MCCS-85-5, July 1985, Com-puting Research Laboratory, New MexicoState University.139
