LUKE: AN EXPERIMENT IN THE EARLY INTEGRATIONOF NATURAL LANGUAGE PROCESSINGDavid A. Wroblewski, Elaine A. RichMCCHuman Interface Laboratory3500 West Balcones Center DriveAustin, Texas 78759AbstractLuke is a knowledge editor designed to support twotasks; the first is editing the classes and relations in aknowledge base.
The second is editing and maintaining thesemantic mapping knowledge neccesery to allow a naturallanguage interface to understand sentences with respect tothat knowledge base.
In order to emphasize designdecisions shared between the two tasks, Luke providesfacilities to concurrently debug the application and thenatural language interface.
Luke also makes naturallanguage available in its own user interface.
This makes itpossible for a knowledge base builder to exploit naturallanguage both as a way of locating desired concepts withinthe knowledge base and as a a way of doing consistencychecking on the knowledge base as it is being built.base, Luke makes natural language available inits own interface.
This makes it possible for theknowledge base builder to exploit naturallanguage both as a way of referring to objects inthe knowledge base and as a way of doingconsistency checking on the objects themselves.In this paper, we will describe both what Lukedoes and how doing that supports thisproductive view of the interaction betweenbuilding a knowledge based system and buildingan associated natural language interface.Background And MotivationIntroductionLuke is a knowledge base editor that hasbeen enhanced to support entering andmaintaining the semantic mappings needed by anatural language interface to a knowledge base.Thus Luke supports a team of system builderswho are simultaneously building a knowledge-based program and building a natural languageinterface to that program.
It makes sense for asingle tool to support both of these effortsbecause the efforts themselves are logicallyintertwined in two important ways, both of whichresult from the fact that the application programand its NL interface must share a singleknowledge base.
(This sharing is necessarybecause otherwise the NL system will not beable to communicate with the application).
Thefirst way in which the two efforts Luke supportsare related is that, although they produce twosystems that are different and may thus placedifferent demands on their associatedknowledge bases, both must share a single suchknowledge base.
By supporting the earlyintegration of the application program and theNL interface as this single knowledge base isbeing built, Luke helps to ensure that it will beadequate, with respect to both its content and itsstructure, to support both these target tasks.The second way in which the two systembuilding tasks are related is that one can supportthe other.
By associating natural language withconcepts as they are entered into a knowledgeA Model  Of Semant ic  Ana lys i sAll of the following discussion is based on amodel of semantic analysis similar to thatproposed in (Hobbs, 1985).
Under this model,syntactic and semantic analysis are done asseparate operations.
The first stage of semanticanalysis is a conversion to initia/logical form, inwhich the surface content of the sentence isencoded in a set of expressions that look likelogical terms, but whose predicates are takendirectly from the words used in the sentence.Initial logical form captures the predicationalstructure of the sentence, without expressir~g itin terms of the knowledge base.Once produced, the expressions in initiallogical form are individually translated into finallogical form, which is a set of first-order termswhose predicates are those used in theapplication's knowledge base.
The translationfrom initial logical form to final logical form isdone via a set of rules known as semanticmappings, and it is the acquisition of thesesemantic mappings that is the subject of thispaper 1.
The control of and exact details ofsemantic mappings are irrelevant for this1In reality, we further subdivide the semantic mappingsinto mappings and compoundings.
Mappings we describedabove.
Compoundings are rules that specify how two nounscan be compounded.186discussion; it is enough to know that semanticmappings roughly translate from the surfaceform of the English input to expressions built interms of the target knowledge base.The general form of a semantic mapping isshown below, along with several examples.
Asemantic mapping is a rule for translating oneinitial logical form into zero or more final logicalforms.
A semantic lexicon is then a collection ofsemantic mappings that specify translations forthe words in the syntactic lexicon.Generally:i / t - ->  tlt,,rl   .
.
.
.
t i t .Examples :(dog ?x) --> (canine ?x) (I)(make ?i ?x ?y) --> (2)(creating ?i)(agent ?i ?x)(object ?i ?y)(graphic-ob j ?y)A mapping for the noun "dog" is shown in (1).This rule states that the referent of a nounphrase whose head is "dog" must be a memberof the class canine.
Mapping (2) shows thatsortal restrictions can be included in themapping, in this case restricting the direct objectof the verb "make" to be a member of the classgraphic-obj.
An ILF may match the left handside of many semantic mappings, and soambiguity is captured in the semantic lexicon.In our model of semantic analysis, thesesemantic mappings are used to build a picture ofwhat was said in the sentence by postingconstraints.
In fact, each semantic mappingexploits two kinds of constraints.
Lexicalconstraints define the applicability of a mappingas a function of the words that appear in asentence.
These constraints always appear onthe left hand side of a semantic mapping.Knowledge-base constraints define theapplicability of a mapping as a function of themeanings of the current word, as well as theother words in a sentence.
These constraintsalways appear on the right hand side of asemantic mapping.
Viewed this way, mapping(1) constrains the referent of "a dog" (or "thedog" or any noun phrase with "dog" as its head)to be a member of the class canine,  but doesnot specify what (if any) specialization ofcanine the referent might refer to.
Forexample, it does not commit to the classschnauzer versus the class dachshund.Past ExperienceOur early attempts at porting our naturallanguage understanding system, Lucy (Rich,1987), consisted of "hand-crafting" a set ofsemantic mappings for an existing knowledgebase.
The application program was anintelligent advice system (Miller, 1987) thatwould accept questions from a user aboutoperating a statistical analysis program and tryto provide advice based on its knowledge of theprogram's interface and internal structure.Creating the semantic mappings was a longand tedious chore.
Starting with a mostly-complete knowledge base, finding the correctsemantic mappings was a matter of knowledgeacquisition, in which we asked the knowledgebase designers what knowledge structure aparticular word might map onto.
Many times thiswas almost as difficult for the knowledge basedesigners as it was for the "semanticians", sincethe knowledge base was quite large, anddeveloped by several people.
Often, theknowledge base designer being interviewed wasnot familiar with the area of the knowledge basebeing mapped into, and thus could notaccurately answer questions, especially withrespect to completeness (i.e., "this is the onlyclass that the word could map into.
")Furthermore, defining the semantic mappingsoften uncovered inconsistencies in theknowledge base.
When this happened, it wasnot always immediately clear what the correctaction was; we could either fix the knowledgebase or live with the inconsistencies (whichusually meant semantic ambiguity where nonewas really necessary.
)Even worse, there were many cases wheredefining any semantic mapping was problematic.In these cases, representational decisions thathad already been made either precluded ormade very difficult any principled mapping ofEnglish expressions into the knowledge base.This happened when information was needed toanalyze a syntactic constituent (perhaps a nounphrase like "the mouse") but the referent of theconstituent (the mouse icon on the screen), wasnot represented in the knowledge base.
Thus,no semantic mapping could be written.
Theproblem could be solved by simply introducingthe relevent knowledge, but sometimes a bettersolution would have involved redesigning aportion of the knowledge base to represent moreclearly important features of the domain.Usually this was too costly an option to consider.Finally, we quickly discovered that the dreamof establishing the semantic mappings once andfor all was a fallacy.
Any significant knowledge187base is "under construction" for a long period oftime; introducing semantic mappings before theknowledge base is totally done necessarilyimplies maintenance of the semantic mappingsin the face of a changing knowledge base.
Thisis a paradox: on the one hand, it would be bestto have a completed knowledge base beforedoing any semantic mapping.
On the otherhand, to avoid problematic semantic mappings itwould be best to introduce semantic mappingsand "debug" them as early as possible in thedevelopment of the knowledge base.operations performed at the editor interface aretranslated into a series of function calls via awell-defined functional interface to theknowledge representation system.
The baseeditor is a complete system: it can be runindependently of any of the extensionsdescribed hereafter.
The base editor knowsnothing of the Lucy natural languageunderstanding system.The Dual-Application DevelopmentModelIn order to avoid the problems mentioned inthe last section, Luke endorses adual-application mode/ of the developmentprocess.
Under such a model, there are tworelated applications being developed.
One is anatural language interface (NLI), responsible forforming a syntactic, semantic, and pragmaticanalysis of user input, and passing theinterpreted input to the domain application.
Thedomain application, of course, could beanything.
We focused on knowledge-basedapplications so that we could assume that aknowledge base was a part of the domainapplication.
We assume that the naturallanguage understanding component and thedomain component both have access to theknowledge base, and that semantic analysisshould be done with respect to that knowledgebase.The dual-application model highlights thedesign interplay between the domain applicationand the interface.
In particular, knowledge basedesign decisions motivated exclusively by thedomain application or the NLI, without regard forthe other application, are likely to be inadequatein the final, integrated, system.
Such ill-informeddecisions might be avoided in a developmentenvironment that allows the earliest possibleintegration of the applications.
Luke is our firstattempt to provide such an environment, and isbuilt to support the work done during earlyprototyping and full-scale development of anapplication.NL I._.
PAnalysis IAlgorithms\[ q ' -LUKElase" KnowteogeRepresentation~.~ SystemFigure 1" Luke's ArchitectureThe base editor allows two types ofcommar,ds: terminological and assertionalcommands 2.
These terms are taken from(Brachman, 1983), which defines a knowledgebase as consisting of two "boxes".
The Tboxholds the terminological information of theknowledge base, information that defines whatsymbols are valid class identifiers, and what thenames, arities, domains and ranges of thoserelations are.
Brachman and Levesque liken theterminological knowledge to the "noun phrases"of the knowledge base.Luke's ArchitectureLuke is an enhanced version of a simpleknowledge editor, as illustrated in Figure 1.
Inthe discussion that follows, we will refer to thisas the base editor, because it forms thefoundation upon which Luke is built.
All2Actually, there is at least one other type of command:management.
Management commands handle such prosaicissues as saving and loading knowledge bases.
While thesecommands will not be described in detail in this paper, thereader should be aware that a significant effort was alsorequired to upgrade these to handle managing both theknowledge base and the semantic lexicon,188OperationCreate ClassCreate SlotDelete ClassTable 1: Knowledge Editing Operationsand Their EffectsSemantic Lexicon EffectNew mappings possible.Old mappings may have to be refined.Existing mappings may be invalidbecause they refer to a now nonexistent class.De le te  S lo t  Some existing mappings may be invalidbecause they refer to a now nonexistent slot.A t tach  Superclass Some existing mappings may be invalidDetach Superclass because inheritance paths have changed.Rename (anything) Existing mappings may be invalid due to renaming.The Abox holds assertional information,described by using logical connectives such as"and", "or" and "not" and the predicates definedin the Tbox to form logical sentences.
While theterminological component describes what it ispossible to say, the assertional component holdsa theory of the world: a set of axioms describingthe valid inferences in the knowledge base.As shown in Figure 1, Luke extends the baseeditor by additionally maintaining a semanticlexicon.
Each time an operation is performed onthe knowledge base, Luke must update thesemantic lexicon so that the set of semanticmappings it contains remains consistent with theupdated knowledge base.
Table 1 shows someoperations and their effect on the semanticlexicon.As can be seen from this table, operationsthat change the terminological content of theknowledge base (such as Create Class orCreate Slot) may change the number orstructure of the semantic mappings known.
Forexample, consider the case of the CreateClass command.
By adding a new class to theknowledge base, we have extended the Tbox;,since the knowledge base is now able todescribe something it could not describe before,some English noun phrases that were previouslyuninterpretable can now be mapped into thisclass.
Existing mappings may have to bechanged, since the act of adding a class mayconstitute a refinement of an existing class andits associated mappings.For instance, one might add a set ofsubclasses of can ine where none used toexist.
If the current set of semantic mappingsmap "poodle" and "doberman" into canine,then these rules may have to be refined to mapinto the correct subclass.
Extending theterminological component of the knowledgebase extends the range of or precision withwhich syntactic constituents may besemantically analyzed.Operations that alter the Abox have less well-defined effects on the semantic lexicon.
Forinstance, without detailed knowledge of thedomain application and the domain itself, theaddition of an inference rule to the knowledgebase implies nothing about the possiblesemantic mappings or the validity of currentmappings.
In general, it is very difficult to usethe assertional component of a knowledge baseduring semantic processing; for this reason, wewill concentrate on terminological operations forthe remainder of this paper.Luke, then, is a "base editor" extended toaccount for the semantic mapping side effects ofknowledge editing operations.
Luke reacts inpredictable ways to each editing operation,based on the information shown in Table 1 :?
New mappings possible: Luke reacts tothis condition by conducting an "interview"with the user.
Each interview is designedto collect the minimum informationnecessary to infer any new semanticmappings.
In a word, the response topossible new mappings is "acquisition".?
Old mappings possibly invalid: Lukereacts to this condition by trying to identifythe affected mappings and requesting theuser verify their correctness.
In a word, theresponse to possibly invalid mappings is"verification".189\[ - - \ [~- -  CloseLukBStore  Rever t  Show Hook Conf igure""  ~ A~ ,~ b*" ><.
.
o,PUTi,S I1 / CTIO <.
; .
I , , i , ,/ / ~ .-.SL~M-rHE-CURREHr-LI~R~QRTA-STRUCT FILE-STRUCTlee Search For (a quoted noun phrase ,  fo r  exanple= me dog') "the current user"For  i n terpretat ion  1 of "the current user" (see a lso  f ranc  RESPONSEIIS)Query: Looking Far ?X- I l l  such that :(ACCOUNTS-ON ?X-l iT 73-1211)(CURRENTLY-LOCCEO-IN-ON ?X- l l?
73-121)(CL:AEMBER 73-1.21 PROCESSOR)(CL:MEMBER ?X-11.?
HUMAN)flnsMers:SUSAN-THE-CURRENT-USERCl ick le f t  on any d i sp layed  value to inspect i t .
)*11~ USER-RGEHDR (e tasks) (m I~t,m,c~ofRCrt.H~) 42 tasks:Ver i fy  napping M.OATR-i ( jb )  11,25a8Ver i fy  nab uord -OATA- ( jb )  i lp25s8Ver i fy  hem aord -COMPUTATION- ( jb )Verify hem uord -COMPUTE- ( jh)  11s2Ver i fy napping H.FILE-I ( jb )  11s25s8Ver i fy  hem uord -FILE- ( jb )  l la25sAOeflne nouns FILE-STRUCT ( jb)  11s25s9ef ine nouns ORTR-STRUCT ( jb )  l l s ISs6 .b A.
~ b~ xrRSK-~,Y(e t~sks) (an i~ta~ce o?~?RZk'Y-~Ver i fy  ~a=oin9 PREP.FOR-2 (de~) 11/ IReferred to David Urobleuski via jbJ im Barnet t  \ ]1 /2~/87  19 :26 :5~:Please take s look at thts  napptJ~m Barnet t  11 /25 /87  Z9:26:17:Could th is  neDpin9 ru le  be conbt~1~ ~ A~ ~ b~ '~IPREP.
FOR-I (~ task) (an t r~t~ 0?
P~D~SIT IO I~SOURCE: ((PREP.FORCATEGORY-TRIGGER: :PREPLEXICRL-TRIGGER: -FOR-LEXICRL-COMSTRRIHTS: ( ( : I  .
:AMYCRTEGORY-COHSTRRIHTS: ( ( : I  .
:RHYVARIABLES: ( : I  :X :Y)EXISTE~TIAL-VRRIRBLES: NILLHS: (FOR :I :MRHS: ((OUTPUT-DEURLIO: TFigure 2:Base Editor Facilities: Windows andAgendasFigure 2 shows the screen as it might typicallyappear during an editing session with Luke.
Theuser is provided with a suite of inspectors todisplay the class hierarchy or view individualframes in detail.
Each inspector provides aniconic menu of operations that can be performedon it or its contents.
Components of frames inthe inspectors, such as the names of slots, aremouse-sensitive and provide the mainmachanism for editing the frames themselves.Also provided is an agenda of tasks to beperformed.
A user may manually queue uptasks to perform as reminders, annotate tasks,or refer tasks to other members of thedevelopment team.
Tasks may be scheduledautomatically as a side effect of various editingcommands.
There are two main types of tasks:verification tasks and acquisition tasks.Verification tasks are reminders to inspect somepart of the knowledge base to ensure itsconsistency.
Acquisition tasks are (typically)interviews that Luke has requested with theuser.The Luke WindowThe base editor also provides a method ofdelaying tasks.
Some tasks, such as acquisitiontasks, are started at a default time, usuallyimmediately after the action that inspired them.The user has the option, at any point during thetask, of pressing the delay key, causing the taskto be stopped, and an agenda item created for itif none already exists.
Through this delayingmechanism, the user has control of when tasksare executed.The agenda is shown in the upper rightinspector in Figure 2.
It is implemented as aframe (an instance of the built-in class agenda,and may be inspected via the normal editingcommands of the base editor.
Each task isrepresented as an instance of the class task,and includes a description of the event thatinspired it.
Although the base editor makes verylittle use of the agenda mechanism, Lukeschedules a large number of interviews andverification tasks through the agenda.190User Tasks, User ModelsLuke is different from most other tools of itskind for three reasons.
It provides support forboth the acquisition and maintenance ofsemantic mappings.
Because it then knowsthose semantic mappings, it makes naturallanguage available in its own interface.
And inorder to do these things, it must assume moresophistication on the part of its users.
Theintended users of Luke are members of aknowledge engineering team.
These people areassumed to be familiar with the content andstructure of the knowledge base, or to becapable of discovering what they need to knowby inspecting the knowledge base.
Althoughthey are not assumed to have an extensivelinguistics background nor extensive familiaritywith the implementation of the semanticprocessing algorithms of Lucy, they areassumed to have a "qualitative model" ofsemantic processing (as presented earlier).Moreover, since we assume that a team ofengineers will be building the applications, somewith special interests or talents, tasks that mightrequire greater linguistic sophistication may bedelayed until the "linguistics specialist" can bebrought in.Luke provides tools for the acquisition ofsemantic mappings and the maintenance ofthose mappings once collected.
Althoughtraditionally, little attention has been paid to thelatter task, we believe that it may prove to be themore important of the two; once a large base ofmappings has been established, it is onlypractical to maintain them with tools specificallydesigned for that task.
The next part of of thissection will describe tools provided by Luke forboth tasks.
Then the remainder of the sectionwill show how these mappings can be used toinhance the user interface of Luke itself.Acquiring Semantic MappingsThe Luke acquisition modules are built withthe following design guidelines:1.
Perform acquisition tasks temporallynear the event that causes them.2.
Allow the user to delay acquisition at will.3.
Allow the user to specify the minimuminformation from which semanticmappings can be deduced.4.
Remember that people are better atverifying a proposed structure than theyare at creating correct structures fromscratch.5.
Try to repay the user for the workexpended in the interviews by using thesemantic mappings for knowledge basedebugging, navigation, and consistencychecking.6.
Project a correct model of semanticprocessing to the user throughout theacquisition process.In the Luke environment, acquiring semanticmappings turns out to be quite simple.
Thescheme we use in Luke involves a three-stageprocess.
In the first stage, Luke collectsassociations.
Simply put, an association is atriple of the form<word, part-of-speech, structure>In the second stage, a set of heuristics inspectsthe associations and compiles them intosemantic mappings.
For instance, theassociation <"dog",noun, canine> might bebuilt during acquisition to indicate that somenoun sense of the word "dog" maps into theclass canine.
In the final stage, the mappingrule deduced from the association is built,presented to the user for refinement via aspecial mapping editor, and entered into thesemantic lexicon.
Occassionally, Luke uses thenew mapping to inspire other mappings, such asthe nominalizations of a verb.
In this case, oncea verb mapping is known, nomimalizations of itare collected and created in the same manner,and heuristics take advantage of the fact that thenew nouns are nomimalizations of a verb whosemapping is known.
Thus the constraints on thecomplements of the verb are used to generatemappings for prepositions that can be used tospecify the complements of the nominalization ofthat verb.Although the basic acquisition technique issimple, obeying guideline 6 can be tricky.
Forinstance, in an early version of Luke wetemporally separated the interviews from theheuristic construction of associations.
Further,we did not submit the mappings to the userwhen they were guessed.
The mappings wereguessed later, in a background process, usuallyinvisible to the Luke user.
Yet semanticanalyses often succeeded, giving users theimpression that the associations were driving thesemantic analysis routines, not the semanticmappings deduced from them.
With such amodel of the process, the user was confusedand unprepared when semantic mappings("where did they come from?")
were incorrectand had to be inspected, debugged, and edited.In the current version of Luke, the semanticmappings are presented to the user at the end191of the interview, to be reviewed and editedimmediately.
Connecting the process ofassociating with the mapping creation processleads to much less confusion.Managing the Semantic LexiconOnce a semantic lexicon exists, maintaining itbecomes a significant chore.
During routineknowledge base editing a user may change theterminological content in such a way thatexisting semantic mappings become invalid.Deleting a class, for example, clearly makes anysemantic mappings that mention it incorrect.
If alarge semantic lexicon exists, changing theterminological content of the knowledge basemay entail editing a very large number ofsemantic mappings.Luke provides a number of tools to helpmanage the semantic lexicon.
These tools fallroughly into two categories, those that supportediting and those that aid in consistencychecking.
The editing tools allow a user torequest all the mappings that target a specificframe, or all the mappings that map from a givensurface form, via a special mappings browser.Users may edit semantic mappings at any timeusing the ordinary editing tools of the baseeditor, because semantic mappings themselvesare stored as frames in the knowledge base.The biggest maintenance service Lukeprovides is consistency checking.
When aframe is deleted, entered, or specialized in theknowledge base, or after any terminologicalediting operation, Luke collects all of thesemantic mappings that might be affected andcreates a set of tasks to verify their continuingcorrectness.
As always, the user can choose tohandle such tasks immediately, or delay for laterconsideration.Exploiting Natural Language in Luke ItselfThe overall goal in building Luke is to providea set of "power tools" (Sheils, 1983) that supportthe dual application model, and Luke is our firststep in that direction.
One potential problem inLuke's design is increasing the overhead ofbuilding a knowledge base, since various tasksare continually scheduled for the user.
This fearis mitigated by the following observations.
First,the added overhead doesn't represent extrawork to be done by the user, only a differenttime for the user to do it.
If there is to be a NLIfor the application, then the developer is in a"pay me now or pay me later" bind, where latepayment can be very costly.
Viewed this way,Luke is helping the user trade a short-term loss(interviews and verification tasks during editing)for a long-term gain (smaller NLI developmenteffort after the domain application is finished).Second, with the additional information providedby concurrently developing the NLI and thedomain knowledge base, Luke can "pay back"the user at editing time by strategically using thisinformation to support both extending anddebugging a knowledge base.
In the rest of thissection we describe some of the ways in whichthis is done.Luke provides the Search For command,which accepts a noun phrase as its argument.Search For converts that noun phrase into aknowledge base query by using the Lucy naturallanguage understanding system.
The nounphrase is parsed and semantically analyzedusing any known semantic mappings.
When theresulting query is executed, the matching framesare stored into a response frame, along withinformation concerning what mappings wereused in the interpretation process.
Then theuser is presented the frames in a menu.
Thus,Search For provides both a way of exercisingthe semantic mappings and retrieving framesfrom the knowledge base during normal editing.Note that such "retrieval by description" facilitiesare not usually provided in knowledge editorsbecause it would require a sophisticated querylanguage allowing abstraction and arbitrary userextensions.
Because Luke already has accessto a natural language analysis component,providing this service to the user isstraightforward.
Also note that such a service isvital to editing and maintaining large knowledgebases -- finding a frame using just graphicaldisplays of the class hierarchy and detailedsingle-frame displays does not provide any sortof "random access" capabilities, and finding aspecific frame using only such tools can be verydifficult.Luke also provides a method of testing theanalysis of entire sentences.
The developer cansubmit a sentence for analysis to the NLIprocessing algorithms.
The analysis of thesentence is returned as a frame in theknowledge base, recording the interpretationsfound, and a record of the mappings used to getthe interpretations.
This can be furtherprocessed by a "default command loop" used tosimulate the behaviour of the applicationprogram.
Using this facility, it is easy for theapplication developer to place her/himself in theplace of the application program, and to envisionthe sorts of responses neccesary.Furthermore, the process of interviewing is aform of documentation.
During an editingsession, the user leaves throughout the192knowledge base a "trail" of semantic hints thatvarious customized commands can takeadvantage of.
For instance, the ShowAssoc iated Nouns command pops up a quickmenu of words associated with the frame inquestion, providing a handy documentationfunction.Finally, Luke can catch several knowledgeediting mistakes that the base editor cannot.One of the most common is class duplication --unwittingly creating a class intended torepresent the same set of entities as an already-existing class.
Often this happens when theknowledge base is being built by a team ofpeople or because it has grown too complex foran individual to visualize.
Luke helps solve theproblem using the existing semantic mappings.After associating a noun with a class, Lukewarns the user of the total number of mappingsfor that noun and some indication of the framesit might map into.
This simple mechanismsdetects many cases of class duplication.variety of ways, including scheduling, executing,annotating, or referring them between membersof the development eam.Future PlansAt present, Luke is a useful, competentknowledge editor and provides a substrate oftools for concurrently managing thedevelopment of an application knowledge baseand the NLI that will ultimately operate with it.Ultimately, we hope to make Luke itself aknowledge-based program, adding to it theheuristics that an "expert NLI engineer" mighthave, and expanding its role to that of anintelligent assistant.
The groundwork is laid forsuch a step; Luke is already driven by a modelof itself, the knowledge base, Lucy's algorithms,and its users.
In the near term we plan toexpand and refine the role that such knowledgeplays in Luke's operation.Comparison To Other WorkLuke appears to be different than previoussystems of its ilk in a number of ways.
Mostimportantly, Luke is built to support the dual-application model of development.
Systemssuch as TEAM (Grosz, 1987), TELl (Ballard,1986), and to a lesser degree, IRACQ (Ayuso,1987), all aim for portability between existing,untouchable, applications (usually DBMS's).These tools have generally emphasized buildinga database schema in order to supply the(missing) terminological component of thedatabase.
We have rejected such an approachon the grounds that it is only useful for buildingsentence-to-single-command translators, not forwholesale integration of a NLI with anapplication.
Luke is an attempt o help design inthe natural language interface from the start.Because of this basic assumption, Luke ismore oriented toward users as sophisticatedsystem builders than as linguistically naive end-users or "database experts".
Luke users willunderstand some linguistics, either byeducational background, hands-on experience,or special primers and training.Finally, Luke is designed to support a team ofusers, not a single user.
Luke provides aflexible agenda and task management systemthat allows users to handle tasks for reviewingexisting mappings, investigating potentialconflicts in the semantic lexicon, and creatingnew mappings for new objects in the knowledgebase.
Such tasks can be operated on in aAcknowledgmentsThe ideas in this paper are the product of theentire LINGO team.
Mike Barnett designed andimplemented the agenda facility describedherein, and Kevin Knight designed some of thesemantic debugging aids.
Additionally, most ofthe ideas about the way this version Lukeoperates sprang from a working group includingMike Barnett, Jim Barnett, Kevin Knight, and theauthors.ReferencesDamaris M. Ayuso, Varda Shaked and RalphM.
Weischedel.
(July 1987).
AnEnvironment For Acquiring SemanticInformation.
Proceedings of the 25th AnnualMeeting of the Association of ComputationalLinguistics..B.W.
Ballard and D.E.
Stumberger.
(1986).Semantic Acquisition in TELl: ATransportable, User-Customized NaturalLanguage Processor.
Proceedings of the24th Annual Meeting of the Association ofComputational Linguistics..R.J. Brachman, R.E.
Fikes and H.J.
Levesque.
(October 1983).
Krypton: A FunctionalApproach to Knowledge Representation.IEEE Computer, Special Issue onKnowledge Representation,, pp.
67-73.193B.J.
Grosz, D.E.
Appelt P.A.
Martin and F.C.N.Periera.
(May 1987).
TEAM: AnExperiment in the Design of TransportableEnglish Interfaces.
Artificial Intelligence,32(2), 173-244.G.
Hobbs.
(1985).
Ontological Promiscuity.Proceedings of the 23th Annual Meeting ofthe Association of Computational Linguistics.Miller, J. R., Hill, W. C., McKendree, J., Masson,M.
E. J., Blumenthal, B., Terveen, L., &Zaback, J.
(1987).
The role of the systemimage in intelligent user assistance.Proceedings of INTERACT'87.
Stuttgart.Rich, E. A., J. Barnett, K. Wittenburg &D. Wroblewski.
(July 1987).
AmbiguityProcrastination.
Proceedings of AAAI-8 7.
.B.
Sheils.
(1983).
Power Tools forProgrammers.
Datamation,, pp.
131-144.194
