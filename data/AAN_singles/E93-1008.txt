Disjunctions and Inheritancein the  Context  Feature  S t ruc ture  Sys temMartin BSttcherGMD-IPSIDolivostra~e 15D 6100 DarmstadtGermanyboettche~darmstadt.gmd.deAbstractSubstantial efforts have been made in or-der to cope with disjunctions in constraintbased grammar formalisms (e.g.
\[Kasper,1987; Maxwell and Kaplan, 1991; DSrre andEisele, 1990\].).
This paper describes theroles of disjunctions and inheritance in theuse of feature structures and their formalsemantics.
With the notion of contexts weabstract from the graph structure of featurestructures and properly define the searchspace of alternatives.
The graph unifica-tion algorithm precomputes nogood combi-nations, and a specialized search procedurewhich we propose here uses them as a con-trolling factor in order to delay decisions aslong as there is no logical necessity for de-ciding.1 In t roduct ionThe Context Feature Structure System (CFS)\[BSttcher and KSnyves-Tdth, 1992\] is a unificationbased system which evaluates feature structures withdistributed isjunctions and dynamically definabletypes for structure inheritance.
CFS is currentlyused to develop and to test a dependency grammarfor German in the text analysis project KONTEXT.In this paper disjunctions and inheritance will be in-vestigated with regard to both, their application di-mension and their efficient computational treatment.The unification algorithm of CFS and the con-cept of virtual agreements for structure sharing hasbeen introduced in \[BSttcher and KSnyves-TSth,1992\].
The algorithm handles tructure inheritanceby structure sharing and constraint sharing whichavoids copying of path structures and constraintscompletely.
Disjunctions are evaluated concurrentlywithout backtracking and without combinatoric mul-tiplication of the path structure.
For that purposethe path structure is separated from the structure ofdisjunctions by the introduction of contexts.Contexts are one of the key concepts for main-taining disjunctions in feature terms.
They describereadings of disjunctive feature structures.
We definethem slightly different from the definitions in \[DSrreand Eisele, 1990\] and \[Backofen et ai., 1991\], with atechnical granularity which is more appropriate fortheir efficient reatment.
The CFS unification algo-rithm computes a set of nogood contexts for all con-flicts which occur during unification of structures.An algorithm for contexts which computes from aset of nogoods whether a structure is valid, will bedescribed in this paper.
It is a specialized searchprocedure which avoids the investigation of the fullsearch space of contexts by clustering disjunctions.We start with some examples how disjunctions andinheritance are used in the CFS environment.
Thencontexts are formally defined on the basis of the se-mantics of CFS feature structures.
Finally the algo-rithm computing validity of contexts is outlined.2 The Use of Disjunctions andInheritanceDisjunctionsDisjunctions are used to express ambiguity and ca-pability.
A first example is provided by the lexiconentry for German die (the, that, .
.
.)
in Figure 1.
Itmay be nominative oraccusative, and if it is singularthe gender has to be feminine.Those parts of the term which are not inside a dis-junction are required in any case.
Such parts shall beshared by all "readings" of the term.
The internal54die :=L_definit-or-relativ@ <>graph : die (nom}Cas  " accsyil : categ : ( Ilum : plt num : sg gen : fern \]}Figure 1: Lexicon Entry for dierepresentation shall provide for mechanisms whichprevent from multiplication of independent disjunc-tions (into dnf).t r&ns  :.~-~ t ra i l s  :?
dom : syn : categ : gvb : aktiv{ I \[categ \[class :nomn\]ssentjsyn : categ : \[cas : acc j\[lexem : hypo' \]syil : : class :\[prn none<tree-filler> = <role-filler trails>" .
\[ gvb : passiv \]dom:syn:  ca~eg: Lrel #1 J.
\[ class : prpo \]categ : rel ?
#1syn: \[ " \]lexem : {~::ch }<tree-filler> = <role-filler agens>?
v-verb-trails-slote<>Figure 2: The Type transAs a second example Figure 2 shows a type de-scribing possible realizations of a transitive object.The outermost disjunction distinguishes whether thedominating predicate is in active or in passive voice.For active predicates either a noun (syn : categ :class : nomn)or a subsentence (syn : categ : class :ssent) is allowed?
This way disjunctions describeand restrict the possibility of combinations of con-stituents?Externa l  T reatment  of  D is junct ionsThe KONTEXT grammar is a lexicalized gram-mar.
This means that the possibility of combinationsof constituents i described with the entries in thelexicon rather than in a separated, general grammar.A chart parser is used in order to decide which con-stituents to combine and maintain the combinations?This means that some of the disjunctions concerningconcrete combinations are handled not by the unifi-cation formalism, but by the chart?
Therefore struc-ture sharing for inheritance which is extensively usedby the parser is even more important.Inher i tanceInheritance is used for two purposes: abstraction inthe lexicon and non-destructive combination ofchartentries?
Figure 3 together with the type trans of Fig-ure 2 shows an example of abstraction: The featurestructure of trans is inherited (marked by $<>) tothe structure for the lexeme spielen (to play) at thedestination of the path syn : slots :.
A virtual copyof the type structure is inserted?
The type trans willbe inherited to all the verbs which allow (or require)a transitive object.
It is obvious that it makes ensenot only to inherit the structure to all the verbs onthe level of grammar description but also to sharethe structure in the internal representation, withoutcopying it.L_spielen :=lexem : spielen.
\[ fie_verb : schwachsyn : ca~eg : \[ pfk : habeilslots : trans@<>v-verbt~<>Figure 3: Lexicon Entry for spielenInheritance is also extensively used by the parser.It works bottom-up and has to try different combi-nations of constituents.
For single words it just looksup the structures in the lexicon.
Then it combines aslot of a functor with a filler.
An example is given inFigure 4 which shows a trace of the chart for the sen-tence Kinder spielen eine Rolle im Theater.
(Chil-dren play a part in the theatre.)
In the 6'th block, inthe line starting with .
.
.
4 the parser combines type_16 (for the lexicon entry of im) with the type _17(for Theater) and defines this combination dynami-cally as type _18.
_16 is the functor, _17 the filler,and caspn the name of the slot.
The combination isdone by unification of feature structures by the CFSsystem.The point here is that the parser tries to combinethe result _18 of this step more than once with differ-ent other structures, but unification is a destructiveoperation!
So, instead of directly unifying the struc-tures of say _7 and _18 (_11 and _18, .
?
.
), _7 and_18 are inherited into the new structure of _20.
Thisway virtual copies of the structures are produced,and these are unified?
It is essential for efficiencythat a virtual copy does not mean that the structureof the type has to be copied.
The lazy copying ap-proach (\[Kogure, 1990\], and \[Emele, 1991\] for lazycopying in TFS with historical backtracking) copiesonly overlapping parts of the structure.
CFS avoidseven this by structure- and constraint-sharing.For common sentences in German, which tend tobe rather long, a lot of types will be generated?
Theysupply only a small part of structure themselves (justthe path from the functor to the filler and a simpleslot-filler combination structure).
The bulk of the55i: Kinder_I : Kinder open/sat2: spielen...I _2 : spielen_3 : spielen _2_4 : spielen _2opensubje Kinder _I open/sattrans Kinder _I open3: eine...2 _S : eine open/sat4: Rolle...3 _6 : Rolle...2 _7 : Rolle _6_II: spielen _3...1 _14: spielen _2open/satrefer eine _5 open/sattrans Rolle _7 open/sattrans Rolle _7 open5: im...4 _16: im open6: Theater?
..5 _17: Theater...4 _18: im _16 caspnTheater _17...3 _19: Rolle _6 caspp im _18?
..2 _20: Rolle _7 ?aspp im _18_21: spielen _11 caspp im _18...I _22:spie len_14 caspp im_18_26: spielen _3 trans Rolle _20...I _29: spielen _2 trans Rolle _20open/satopen/satopen/satopen/satopen/satopenopen/satopen7: ??
?.6 _30: open_31: ?
_30 praed spielen _26 sat_32: .
_30 praed spielen _21 satFigure 4: Chart for Kinder  spielen .
.
.structure is shared among the lexicon and all thedifferent combinations produced by the parser.Avo id ing  Recurs ive  Inher i tanceRecursive inheritance would be a means to com-bine phrases in order to analyze (and generate) with-out a parser (as in TFS).
On the other hand a parseris a controlled device which e.g.
knows about im-portant paths in feature structures describing con-stituents, and which can do steps in a certain se-quence, while unification in principle is sequence-invariant.
We think that recursion is not in princi-ple impossible in spite of CFS' concurrent treatmentof disjunctions, but we draw the borderline betweenthe parser and the unification formalism such thatthe cases for recursion and iteration are handled bythe parser.
This seems to be more efficient.The  Connect ion  between D is junct ions  andTypesThe similarity of the relation between disjunctivestructure and disjunct and the relation between typeand instance is, that in a set theoretic semantics (seebelow) the denotation of the former is a supersetof the denotation of the latter.
The difference isthat a disjunctive structure is invalid, i.e.
has theempty set as denotation, if each disjunct is invalid.A type, however, stays valid even when all its cur-rently known instances are invalid.
This distinctionmirrors the uses of the two: inheritance for abstrac-tion, disjunctions for complete numeration of alter-natives.
When an external system, like the chart ofthe parser, keeps track of the relation between typesand instances disjunctions might be replaced by in-heritance.3 Contexts  and  Inher i tanceThis chapter introduces the syntax and semantics ofCFS feature terms, defines contexts, and investigatesthe relation between type and instance concerningthe validity of contexts.
We want to define contextssuch that they describe a certain reading of a (dis-junctive) term, i.e.
chooses a disjunct for some or allof the disjunctions.
We will define validity of a con-text such that the intended reading has a non-emptydenotation.The CFS unification algorithm as described in\[BSttcher, KSnyves-TSth 92\] computes a set of in-vMid contexts for all unification conflicts, which areMways conflicts between constraints expressed in thefeature term (or in types).
The purpose of the defini-tion of contexts is to cover all possible conflicts, andto define an appropriate search space for the searchprocedure described in the last part of this paper.Therefore our definition of contexts differ from thosein \[DSrre and Eisele, 1990\] or \[Backofen et al, 1991\].Syntax  and  Semant ics  o f  Feature  TermsLet A = {a, .
.
.}
be a set of atoms, F = {f, fi, gi , .
.
.
}a set of feature names, D -- {d,.
.
.}
a set of disjunc-tion names, X = {x, y, z , .
.
.}
a set of type names,I = {i , .
.
.}
a set of instantiation ames.
The setof terms T - {t, t l , .
.
.}
is defined by the recursivescheme in Figure 5.
A sequence of type definitions isX := ~1 y := t2 Z := t3 .
.
.
.a atomf : t feature value pairIt1.. .
t , \]  unification{t l .
.
.
tn}d disjunction<f l .
- - fn  > = <gl..-gm> path equationzQ<>i type inheritanceFigure 5: The Set of Feature Terms TThe concrete syntax of CFS is richer than this def-inition.
Variables are allowed to express path equa-tions, and types can be unified destructively.
Cyclicpath equations (e.g.
<> = <gl.
?
?gm >) are supported,but recursive type definition and negation are notsupported, yet.56In order to define contexts we define the set of dis-junctions of a term, the disjuncts of a disjunction,and deciders as (complete) functions from disjunc-tions to disjuncts.
Mi is a mapping substituting alldisjunction names d by i(d), where i is unique foreach instantiation.dis : T ~ 2 D, sub : D ~ 2 N,dis(a) := {}dis(<p> -- <q>) : -  {}dis(f : t) : -  dis(t)dis(x~<>i) := dis(Mi(t))lz := tdis(\[tl, ..,tn\]) := U.i dis(tj)dis({tl, .
.
,tn}a) := {d} U Uj dis(tj),sub(d) := {1, ..., n}deciders(t) :={choice: dis(t) -o Nlchoice(d) E sub(d)}Figure 6 defines the interpretation \[tiC of deciders ic w.r.t, terms t as subsets of some universe U (similarto \[Smolka, 1988\], without sorts, but with nameddisjunctions and instantiations).a I E U,yz : g?, yZ(a = ?, = ?,\[a\]\]c :={a I }I f :  tic :--{s e Ulf l (s )  E It\],}\[ It1.. t,\] :=N, \[t \]o\ [{q. .
t .
}d\ ]o  :=l\[t<d)Li<fl..fn > = <gl-..qm>\]e:----{S e Ulf (..ft (s)) =gi(..gl(s)) # ?
}:={s e := ts eFigure 6: Decider InterpretationSimilar to deciders we define specializers as partialfunctions from disjunctions to disjuncts.
We alsodefine a partial order _t on specializers of a term:c1 ~ c~ iffVdedis(t) (c~ is defined on dA c2(d) = j)==~ cz(d) = jThe interpretation function can be extended tospecializers now: If c is a specializer of t, then?~6deeiders(t)Ae'-g~?A specializer is valid iff it's denotation is not empty.For the most general specializer, the function ca-which is undefined on each disjunction, we get theinterpretation of the term:It\] := \[fLyContextsContexts will be objects of computation and repre-sentation.
They are used in order to record validityfor distributed isjunctions.
We give our definitionfirst, and a short discussion afterwards.For the purpose of explanation we restrict he syn-tax concerning the composition of disjunctions.
Wesay that a disjunctive subterm {..-}d of t  is outwardsin t if there is no subterm {.., tj, ..}a, of t with {...}nsubterm of tj.
We require for each disjunctive sub-term {...}a o f t  and each subterm {..,tj, ..}d' of t :  if{...}d is outwards in t i then each subterm {...}a of tis outwards in tj.
This relation between d ~ and d wedefine as subdis(d~,j, d).
Figure 7 shows the defini-tion of contexts.A specializer c of  t is a context of t, iffVd, d / E dis(t) :(e is defined on d ^  snbdis( d', j, d) )=~(e is defined on d ~ ^  e(d ~) = j)Figure 7: Definition of ContextsThe set of contexts and a bottom element ?
forma lattice (__t, Ct?).
The infimum operator of thislattice we write as At.
We drop the index ~ fromoperators whenever it is clear which term is meant.Discussion: E.g.
for the termf : t"t lIt d2 dl(dl --~ 2, d2 ~ 1) is a specializer but not a con-text.
We exclude such specializers which have moregeneral specializers (dl --~ 2) with the same deno-tation.
For the same term (d2 ~ 1) is not a con-text.
This makes sense due to the fact that thereis no constraint expressed in the term required in(d2 ~ 1), but e.g.
a at the destination of f is re-quired in (dl --* 1, d2 ~ 1).
We will utilize thisinformation about the dependency of disjunctions asit is expressed in our definition of contexts.In order to show what contexts are used for wedefine the relation is required in (requi) of subtermsand contexts of t by the recursive scheme:t requi cTf : t ~ requie =~ t' requicz~<>i requi e A z := t' :?, Mi(t/) requi c\[..,t I, ..\] requi e ~ t' requi c{..,tj,..}d requi c :~ tj requi (d -+ j/c(a/)\]The contexts in which some subterms of t are re-quired, we call input contexts of t. Each value con-straint at the destination of a certain path and eachpath equation is required in a certain input context.Example: Ine57a is required in (dl --+ 1) at the destination of f ,and e is required in (d2 --+ 2) at the destination of f ,and the conflict is in the infimum context (dl --* 1) n(d~ --, 2) = (dl ---, 1, d2 ---, 2).
This way each conflictis always in one context, and any context might be acontext of a conflict.
So the contexts are defined withthe necessary differentiation and without superfluouselements.We call the contexts of conflicts nogoods.
It is nota trivial problem to compute the validity of a termor a context from the set of nogoods in the generalcase.
This will be the topic of the last part (4).Ins tant ia t ionIf z := t is a type, and x is inherited to some termx?<>i then for each context c of z there is a corre-sponding context d of z?<>i with the same denota-tion.\[z?<>i\]c, = \[Mi(t)\]c, = \[ticc' : dis(M~(t) ~ N,  c'( i (d)) = c(d)Therefore ach nogood of t also implies that the cor-responding context of the instance term z?<>i hasthe empty denotation.
It is not necessary to detectthe conflicts again.
The nogoods can be inherited.
(In fact they have to because CFS will never com-pute a conflict twice.
)If the instance is a larger term, the instance usuallywill be more specific than the type, and there mightbe conflicts between constraints in the type and con-straints in the instance.
In this case there are validcontexts of the type with invalid corresponding con-texts of the instance.
Furthermore the inheritancecan occur in the scope of disjunctions of the instance.We summarize this by the definition of contezt map-ping mi in Figure 8.z := t, c E contexts(t)t I - -  .
.
x@<>i .
.
,zQ<>i is required in d E contezts(t')mi : contezts( t ) ~ eontezts( t'),( i(d)---* c(d) )mi(c) := d' --.
* c'(d')Figure 8: Context Mappings4 Computing ValidityGiven a set of nogood contexts, the disjunctions andthe subdis-relation ofa term, the question is whetherthe term is valid, i.e.
whether it has a non-emptydenotation.
A nogood context n means that \[t\]n ={}.
The answer to this question in this section will bean algorithm, which in CFS is run after all conflictsare computed, because an incremental version of thealgorithm seems to be more expensive.
We start withan example in order to show that simple approachesare not effective.
{fi t }, { \[i t }.
{ \[i(dl --, 1, --, 1), (dl 2, 2),(d2 --+ 1, d3 --* 1), (d2 --* 2, d3 --* 2),(d3 --* 1, dl ---* 1), (d3 "-~ 2, dl --~ 2)Figure 9: Term and Nogood ContextsFor the term in Figure 9 the unification algorithmof CFS computes the shown nogoods.
The term isinvalid because ach decider's denotation is empty.A strategy which looks for similar nogoods and triesto replace them by a more general one will fail.
Thisexample shows that it is necessary at least in somecases to look at (a covering of) more specific contexts.But before we start to describe an algorithm forthis purpose we want to explain why the algorithmwe describe does a little bit more.
It computes allmost general invalid contexts from the set of givennogoods.
This border of invalid contexts, the com-puted nogoods, allows us afterwards to test at a lowrate whether a context is invalid or not.
It is just thetest Bn G Computed-Nogoods : c ~_t n. This test isfrequently required during inspection of a result andduring output.
Moreover nogoods are inherited, andif these nogoods are the most general invalid con-texts, computations for instances will be reduced.The search procedure for the most general invalidcontexts starts from the most general context cv.It descends through the context lattice and modifiesthe set of nogoods.
We give a rough description firstand a refinement afterwards:Recursive procedure n-11.
if 3n E Nogoods : c -4 n then return 'bad'.2.
select a disjunction d with c undefined on d andsuch that the specializer (d -* j, d ~ --~ c(d~)) isa context, if no such disjunction exists, return'good'.3.
for each j E sub(d) recursively call n-1 with (d --+j, d ~ -.+ c( d~) .4. if each call returns 'bad', then replace all n ENogoods : n ~_ c by c and return 'bad'.5.
continue with step 2 selecting a different disjunc-tion.If we replace the fifth step by5.
return 'good'n-1 will be a test procedure for validity.n-1 is not be very efficient since it visits contextsmore than once and since it descends down to mostspecific contexts even in cases without nogoods.
Inorder to describe the enhancements we write: Cl isrelevant for c2, iff cl I-1 c2 ~ .1..58The algorithm implemented for CFS is based onthe following ideas:(a) select nogoods relevant for c, return 'good' ifthere are none(b) specialize c only by disjunctions for which atleast some of the relevant nogoods is defined.
(c) order the disjunctions, elect in this order in thestep 2.-4.
cycle.
(d) prevent multiple visits of contexts by differentspecialization sequences: if the selected isjunc-tion is lower than some disjunction c is definedon, do not select any disjunction i  the recursivecalls (do step 1 only).The procedure will be favorably parametrized notonly by the context c, but also by the selection ofrelevant nogoods, which is reduced in each recursivecall (because only 'relevant' disjunctions are selecteddue to enhencement (b)).
This makes the procedurestop at depth linear to the number of disjunctionsa nogood is defined on.
Together with the ordering(c,d) every context which is more general than anynogood is visited once (step 1 visits due to enhence-ment (d) not counted), because they are candidatesfor most general nogood contexts.
For very few no-goods it might be better to use a different proce-dure searching 'bottom-up' from the nogoods (as \[deKleer, 1986, second part\] proposed for ATMS).
(a) reduces spreading by recognizing contextswithout more specific invalid contexts.
(b) might befurther estricted in some cases: select only such dwith Vj G sub(d) : 3n E relevant-nogoods : n(d) = j.
(b) in fact clusters disjunctions into mutually inde-pendent sets of disjunctions.
This also ignores dis-junctions for which there are currently no nogoodsthereby reducing the search space exponentially.El iminating Irrelevant DisjunctionsThe algorithm implemented in CFS is also capableof a second task: It computes whether disjunctionsare no longer relevant.
This is the case if either thecontext in which the disjunctive term is required isinvalid, or the contexts of all but one disjunct is in-valid.Why is this an interesting property?
There are tworeasons: This knowledge reduces the search space ofthe algorithm computing the border of most generalnogoods.
And during inheritance neither the dis-junction nor the nogoods for such disjunctions needto be inherited.
It is most often during inheritancethat a disjunction of a type becomes irrelevant in theinstance.
(Nobody would write down a disjunctionwhich becomes irrelevant in the instance itself.
)Structure- and constraint sharing in CFS makes itnecessary to keep this information because contextsof shared constraints in the type are still defined onthis disjunction, i.e.
the disjunction stays relevantin the type.
Let the only valid disjunct of d be k.The information that either the constraint can beignored (c(d) ~ k) or the disjunction can be ignored(c(d) = k) is stored with the instantiation.
The con-text mapping for the instantiation filters out eitherthe whole context or the disjunction.The algorithm is extended in the following way:4a.
if e is an input context of t and d is a disjunc-tion specializing e and the subcontexts are alsoinput contexts, and if all but one specializationdelivers 'bad' the disjunction is irrelevant for t.All subdisjunctions of subterms other than theone which is not 'bad' are irrelevant, oo.ConsequencesOne consequence of the elimination of irrelevant dis-junctions during inheritance is, that an efficient im-plementation f contexts by bitvectors (as proposedin e.g.
\[de Kleer, 1986\]) with a simple shift operationfor context mappings will waste a lot of space.
Eithersparse coding of these bit vectors or a difficult com-pactifying context mapping is required.
The sparsecoding are just vectors of pairs of disjunction amesand choices.
Maybe someone finds a good solutionto this problem.
Nevertheless the context mapping isnot consuming much of the resources, and the elim-ination of irrelevant disjunctions i worth it.5 Conclus ionFor the tasks outlined in the first part, the efficienttreatment of disjunctions and inheritance, we intro-duced contexts.
Contexts have been defined on thebasis of a set theoretic semantics for CFS featurestructures, uch that they describe the space of pos-sible unification conflicts adequately.
The unificationformalism of CFS computes a set of nogood contexts,from which the algorithm outlined in the third partcomputes the border of most general nogood con-texts, which is also important for inspection and out-put.
Clearly we cannot find a polynomial algorithmfor an exponential problem (number of possible no-goods), but by elaborated techniques we can reducethe effort exponentially in order to get usable sys-tems in the practical case.References\[Backofen et al, 1991\] R. Backofen, L. Euler, andG.
Ghrz.
Distributed disjunctions for life.
InH.
Boley and M. M. Richter, editors, ProcessingDeclarative Knowledge.
Springer, Berlin, 1991.\[Bhttcher and Khnyves-T6th, 1992\] M. Bhttcherand M. Khnyves-Thth.
Non-destructive unifica-tion of disjunctive feature structures by constraintsharing.
In H. Trost and R. Backofen, editors,Coping with Linguistic Ambiguity in Typed Fea-ture Formalisms, Workshop Notes, Vienna, 1992.ECAI '92.\[de Kleer, 1986\] J. de Kleer.
ATMS.
Artificial In-telligence, 28(2), 1986.59\[DSrre and Eisele, 1990\] J. DSrre and A. Eisele.
Fea-ture logic with disjunctive unification.
In Proceed-ings of COLING '90, Helsinki, 1990.\[Emele, 1991\] M. C. Emele.
Unification with lazynon-redundant copying.
In Proceedings of the gg'thACL, Berkeley, 1991.\[Kasper, 1987\] R. Kasper.
A unification method fordisjunctive feature descriptions.
In Proceedings ofthe 25'th ACL, Stanford, 1987.\[Kogure, 1990\] K. Kogure.
Strategic lazy incremen-tal copy graph unification.
In Proceedings of COL-ING '90, Helsinki, 1990.\[Maxwell andKaplan, 1991\] J. T. Maxwell andR.
M. Kaplan.
A method for disjunctive constraintsatisfaction.
In M. Tomita, editor, Current Issuesin Parsing Technology.
Kluver Academic Publish-ers, 1991.\[Smolka, 1988\] G. Smolka.
A feature logic withsubsorts.
Lilog Report 33, IBM Deutschland,Stuttgart, 1988.60
