IIntranet learning tools for NLPWilliam J BLACKCentre for ComputationalLinguistics, UMISTPO Box 88, ManchesterM60 I QD, United Kingdombill@ccl,umist.ac.ukSimon HILLDepartment ofComputation, UMISTPO Box 88, ManchesterM60 1QD, UnitedKingdom,Mahmoud KASSAEICentre for ComputationalLinguistics, UMISTPO Box 88, ManchesterM60 1QD, United Kingdommahmoud @ccl.umist.ac.ukAbstractThis paper describes experience with thedeveloped of tools for CL education using Java.Some are standalone Java applets and others areclients which connect to a parsing server using aLISP-based backend.
The principal benefits areplatform independence and reusability ratherthan world-wide web access, although intranettechnology reduces the need for special purposelabs.IntroductionNetworked computers can be used to supportlearning in various ways.
In computationallinguistics, the predominant pattern of use istwofold: Learning materials are distributed usinghypertext, and laboratories are conducted inwhich students work directly with computationallinguistics processors such as parsers andgenerators.The 'authorware' approach to developinglearning materials has not been popular in theteaching of computational linguistics because ofthe extensive labour involved in encodingcontent.
Since CL is all about the use ofpowerful general mechanisms and expressiveformalisms, the idea of writing learningmaterials using less expressive tools has littleappeal.However, the new technologies of the internetmake it easier to combine media to produceintegrated learning environments in whichpedagogical materials can be intimatelyconnected to mechanisms and resources.Using such approaches can produce payoffswhether or not distance learning is involved.
Abetter integrated set of resources for laboratoryactivities makes fewer demands on support staffsuch as graduate demonstrators.
The ability toencapsulate mechanisms and tools in appletsalso means that the need to maintain specialpurpose laboratories i diminished, and it is alsopossible to promote CL to potential students inschools.This paper reports experience with the use ofweb browsers to provide practical activities to anintroductory class of computational linguisticsstudents.
We concentrate on the tools developedlocally, although we make use of others whereappropriate.
Much of the discussion focuses onwhat is possible with the constraints imposed bycurrent network software.1 Learning ObjectivesBehind the practical work reported in the rest ofthis paper is an assumption that introductory CLeducation should provide learning environmentsboth for the linguistic and computational spectsof CL.For the former aspect, a simplified grammardevelopment environment is required; for thelatter, an interactive xploratory tool which canstep through processes like constructing aderivation, applying a specific search algorithm,relating the data structures to the representationsproduced as the result of analysis.,~ The Pa,ser - Netseape I~1~\] E_File _Edit View Go Communicator Help~i Back Forv,,~rd Reload.. Home Seamh Netscape  P,int Seeuhl.~ Stop~ I"~!
v .
|' .
.
, T.:::l ' .
J  ,, ,,,,,,- ........ " , ,, - , ,i; .... ii\];;;,i~,~ ~ Bookma,ks ...~ Locaton"  s t  ac uk/webparser/cl,entl 0/chent html ~ ~ 'V,/ha\[sRelatedType string to be parsed - no punctuation:IAn airline took american hotel chain over an J Parse I Clear 1PrevlNellTO(VP ..._f--,--,,,._.CAT TVI PREDICATE TOOK OVER'SEM lARGO (1)LARG1 (2)ARGO (1)ARG1 (2)NPDET NI IAN AIRLINEIN41 S VFigure 1 The client-server parser running in Netscape browser2 Tools for  explor ing grammars  andlinguistic representationsIn the preceding paragraph, we contended thatsimplified grammar development environmentsare required.
Why not the real thing, like theAlvey Tools, Geppetto, LFG workbench, Pleuk,ProFit, ALEP et al The target audience is theintroductory CL student, either in the first yearof a study programme or taking a CL module aspart of a cognate discipline.
Tools used byresearchers are for later in the course, if wemanage to retain the interest of the students,which we will only do if we make CL tools asaccessible as the generality of IT applications.Graphical user interfaces are essential: to give astudent a graphics workstation and have theminteract with Prolog in a terminal windowconveys an unfavourable impression.Some excellent learning software for CL isavailable, such as the Linguistic Instrumentstools for CFGs DCGs, PATR and categorialgrammars.
Their main drawback is that they aretied to the MacOS platform.2.1 Software platforms for portabil ityThere are implementations of the programminglanguages considered suitable for NLP that havagraphical user interface (GUI) developmenttools, but unfortunately these are not standard.The ideal would be to use programminglanguages and GUI  development tools that areavailable on different computer systems.
Thetwo most widely known platform-independentGUI development tools are Tcl/TK and Java.. Ofthe two, Tcl/TK is simpler, but Java has thecrucial advantage that it can 'run anywhere' in aweb browser, whereas for Tcl/TK, the user hasto obtain a plug-in.Integrating tools with teaching materialAnother use of Java running in a browser is toembed the interactive lements into hypertext,allowing a close linkage of textual learningmaterials with practical activities.
As well asusing Java to provide run-anywhere programs,teaching materials can be enhanced by appletswhich display linguistic analyses graphically,and even have the displayed information open tomanipulation.The grammat)cal resources used are thegrammars in PATR-II as presented in Gazdarand Mellish, 1989.The client-side itree and AVM-drawing programsillustrated in Figure 1 can be used independentlyof the server discussed below, to produceanimated teaching notes.
The data to bedisplayed and manipulated in this applet isspecified in applet's parameters, o it is possibleto use it to illustrate different analyses atdifferent parts of an educational hypertext.
Thereis one structured string parameter which encodesthe tree, and one further parameter for eachnode, which encodes the content of therespective AVMs.The Thistle tree-editing suite (Calder, 1998) is awell-developed interactive tool for working withlinguistic representations such as trees andAVMs is a more sophisticated alternative.However, the tree-drawing program described isonly a part of a more sophisticated mechanismwhich links the linguistic information displays toon-line parsing,3 On-line ParsingHaving chosen to use Java for the developmentof graphical displays of linguistic data, we haveto consider what is the most appropriate nginefor the analysis or generation behind them.
Onepossibility would be to re-write the code forthose algorithms in Java, but this ignores thepossibility of re-using existing programs writtenin Prolog or LISP, which are documented invarious textbooks.
These implementations aremore established than existing Java-basedparsers, which have not so far featured inpublished learning materials.There are several practical ways in which aProlog or LISP parser can have its outputdisplayed graphically in a browser.
One is toinvoke the parser from within a CGI script on aweb server.
This strategy has been adopted byRamsay (1999) for presenting the Parasiteproject on the WWW.A disadvantage is that each request involves theoverhead of starting a new Prolog process, and aconsequently inflated response time, as well ascomplex arrangements tomaintain dialogue stateinformation.Cl ient-server  pars ingIn the CCL webparser system, the LISP-basedparsing program acts as a server which acceptssocket connections from the Java applet thathandles the display.The intention was that the LISP parser should bea black box, so we elected to build th serverusing Expect.
This is an extension of Tcl/TK(Libes, 1995) that is specially designed to'automate' interactive programs.The Expect program spawns a LISP process andthen controls it by simulating the user with itssend and expect commands.
It uses its sendcommand to load linguistic resources, and thenit opens a server socket, awaiting requests fromnetworked clients.When socket connections are accepted fromusers' browser clients, the expect programpasses these on to the LISP parser program, andawaits the response, which it passes back to theclient.The advantage of using Expect as an intermed-iate layer is that it enables the LISP process toreact to different client programs withouthaving to restart o serve each of them.
It alsolets the server save the results of a parse, e.g.
achart, and let the user ask for information that isstored in chart edges for some time after theinitial parse was done.
When a parse request isprocessed, a reference number is generated andthe chart is cached, indexed by that number.
Thereference numbers are notified to the client aspart of the message summafising the result ofthe analysis.The client-server protocolA simple protocol has been defined forcommunication between the client and theserver, as shown in Table 1.
The client prefixeseach request by one of the keywords parse, tree,and avm.Table 1 Client-server protocol for web parserClient requestparse word*tree p# tree#avm p# edge#Key:Server responseparsecount p# numshowtreelp#1treenode*showavmledge#1dagnode*/dagedge*p# reference number of the parse requesttree# nth analysis produced in parse p#edge# nth edge from the chart of parsep#treenode is a triple node#, parent, labeldagnode is a numberdagedge is a triple fi'om, to, labelFigure 1 illustrates this client-server systemrunning in a Netscape browser.Educational use of the client-serverparserThe version displayed is under development, andstill lacks some features it would need to bereally useful in an educational context.
Themost important practical requirement is for theuser to be able to modify the grammars andlexicons that the system uses.
To make theprogram useful for reinforcing different stages ina course, the user has to be able to selectalternative grammars, and to be able to edithis/her own.
This is inconvenient to implementwhen the interface is an applet, because anapplet is not normally permitted to saveprograms on the local machine.
However, weexpect o have a workaround for this in place forthe next academic year.Being able to display the results of parsing in theform of conventional diagrams is an advance ontextual interaction.
When the student isworking on a grammar, the displays producedgive feedback which is much more readilyunderstood than textual output.Students in the later years of the CL course havebeen able to use the system to visualise theresults of parsing with grammars underdevelopment in another window.
The plannedfile-management facilities will enable theprogram to be used regularly with the targetusers (students new to CL) in the next academicyear.Tools to support the understanding of CLprocessingUnderstanding grammar notation is only part ofwhat a CL student needs to learn in practicalclasses.
Accordingly, we have started to developa suite of tools that animate parsing algorithmsusing Java only, without he need for a server.The first of these was developed in a day, andlets the student step through the construction ofa derivation, either top-down or bottom-up.
Thisprogram is illustrated in Figure 2.
It has beenextended so users can supply their own rules.This program has been successfully deployedwith first-year students already and appears tohave enhanced their understanding of these basicconcepts of formal language theory and parsingalgorithms.
The same program can be used,with different data, to illustrate searchalgorithms in general.I, r  ~ ~ : .
.
.
.
.
.
.
.
.
.
.
: .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
i ~"  .
.
.
.
.
.
.
~ ;~%>7 , ' " *~ 3 : :  "~ "~!~'  ii!
L~ Bookmarks ...1~`L~cat~:~http:~www.cc~um'~t~a~uk~tea~h~ng~mate~a~.~;3~iat%Re~ated~To actavate, Chck m the Start state box after <s> and press the return key.
Thenchoose rutes from the "Productions" list.
For additi0nal help, click here.
jGoal: Start state:I <s>(~ Top down (" Bottom up Productions:DerivationStarting new der ivat ion  a t  s ta te :  <s><rap> <vp> by rule 0<det> <n> <vp> by rule $<det> <n> <vp>: Rule 7 :not applicable.<det> <n> <vp>: Rule 7 mot applicable.<proper>- -> "F ido"  ~"<proper>- -> "John"<proper>- -> "MarT"<pronoun>- -> "it"<det>- -> "the"<det>- -> "a"<n>- -> "dog"<n>- -> "girl"?
i ?i.
i ?. "
: i i : i~Help is available on the following topics:.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
- -  ?Figure 2 Interactive tool for constructing derivationsWe are modifying this program so that it canshow the agenda at each step of an automaticderivation to enhance the student'sunderstanding of search algorithms in general.At some point, this program will be integratedwith the graphical presentation elements.DiscussionThe software described in this paper is stillunder development.
It has been used bystudents, but not yet extensively.
It will bedifficult to get objective information on whatdifference such accessible interactive learningtools make to the students' learning, but a studyof usability will be conducted uring the nextacademic session.The main advantage (for the teacher) in using aWWW-based environment for delivering naturallanguage processing practical work to students ithat once developed, the laboratory needs lessspecialist provision and staffing than before.Students can also work in their own time incampus-wide computer facilities without havingto have NLP software installed.Planned developmentsThe software described is at a rather immaturephase of deyelopment, but most of the hard workhas been done.
Planned future developmentsafter the file management facilities arecompleted include:?
graphical viewers for the chart in chartparsing?
dependency tree viewers?
discourse representation viewersincremental tracing of generation algorithmsAlso on the agenda is to make on-line access toa range of well-known NLP programs anintegral feature of all the teaching materials forintroductory NLP.
Using the same Expect-basedmeachnism, we can put user interfaces aroundtaggers, morphological analysers, dictionariesand corpus-analysis programs and link to themall with hypertext.ConclusionWe have described recent work on theimplementation of student-oriented tools fornatural anguage processing.Three kinds of tool have been developed, whichcomplement those available elsewhere.
Firstly aparameterisable applet which enables thelecturer to incorporate syntax trees withembedded attribute-value matrices intohypertext teaching materials.
Second, a portableHTML-Java interface to a parsing serverresiding on a departmental intranet server.Finally, we have developed a tool that lets thestudent explore the process of analysis step-by-step, to reinforce understanding of the basicalgorithms for NLP.Both the second and the third tool are now beingenhanced to enable them to be used by studentsto develop their own resources, and effort is alsounder way to complete graphical viewers for amore complete inventory of linguisticrepresentations.The client-server method of constructing an on-line parser with a user interface is an attractiveapproach because it allows us to re-use existingtools, for example those which are featured inteaching materials, such as Gazdar and Mellish(1989).
The Expect plus Java technologyprovides a good solution for developing userinterfaces for local use; the possibility ofdeploying these within hypermedia provides anadditional opportunity to package the practicalwork within course materials.Tools usedThe client-server program was developed usingJDK1.1.7, Allegro Common Lisp TM, version 5.0,Expect version 1.5, and the Apache Web server,under Solaris TM 2.6.
The client programs havebeen tested on Netscape 4.0 and 4.5, and onInternet Explorer TM 4.0.
It is planned to verifythat the LISP portion can run under a freelyavailable LISP, with a view to making the toolsavailable to anyone interested in using them.AvailabilityThe client-server parser can be tried out athttp://bermuda.ccl.umist.ac.uk/webparser/client !0/client.htmlWhen the software is available for download itwill be announced athttp://www.ccl.umist.ac.uk.AcknowledgementsSimon Hill was supported by a EPSRCstudentship, and some further financial supporthas been provided by ELSNET ....ReferencesCalder, J.
(1998) How to build a (quite general)linguistic diagram editor.
In Thinking withDiagrams (TwD98), Aberystwyth, UK.Gazdar, G. and Mellish, C.S..(1989) NaturalLanguage Processing in LISP.
Reading, MA:.Addison WesleyLibes.
D. (1995), Exploring Expect.
Cambridge, MA:O'Reilly,Ramsay, A.M. (1999) Weak lexical semantics andmultiple views.
In H.C. Bunt and E.G.C.
Thijsse,Eds, 3rd International Workshop onComputational Semantics, pages 205--218,Tilburg, The Netherlands.
