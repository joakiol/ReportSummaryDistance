Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 898?904,Sydney, July 2006. c?2006 Association for Computational LinguisticsFrom Prosodic Trees to Syntactic TreesAndi WuGrapeCity Inc.andi.wu@grapecity.comKirk LoweryWestminster Hebrew Instituteklowery@whi.wts.eduAbstractThis paper describes an ongoing effort toparse the Hebrew Bible.
The parser consultsthe bracketing information extracted from thecantillation marks of the Masoetic text.
Wefirst constructed a cantillation treebankwhich encodes the prosodic structures of thetext.
It was found that many of the prosodicboundaries in the cantillation treescorrespond, directly or indirectly, to thephrase boundaries of the syntactic trees weare trying to build.
All the useful boundaryinformation was then extracted to help theparser make syntactic decisions, eitherserving as hard constraints in rule applicationor used probabilistically in tree ranking.This has greatly improved the accuracy andefficiency of the parser and reduced theamount of manual work in building a Hebrewtreebank.IntroductionThe text of the Hebrew Bible (HB) has beencarefully studied throughout the centuries, withdetailed lexical, phonological and morphologicalanalysis available for every verse of HB.However, very few attempts have been made at averse-by-verse syntactic analysis.
The onlyknown effort in this direction is the Hebrewparser built by George Yaeger (Yaeger 1998,2002), but the analysis is still incomplete in thesense that not all syntactic units are recognizedand the accuracy of the trees are yet to bechecked.Since a detailed syntactic analysis of HB is ofinterest to both linguistic and biblical studies,we launched a project to build a treebank of theHebrew Bible.
In this project, the trees areautomatically generated by a parser and thenmanually checked in a tree editor.
Once a treehas been edited or approved, its phraseboundaries are recorded in a database.
When thesame verse is parsed again, the existing bracketswill force the parser to produce trees whosebrackets are exactly the same as those of themanually approved trees.
Compared withtraditional approaches to treebanking where thecorrect structure is preserved in a set of tree files,our approach has much more agility.
In the eventof design/format changes, we can automaticallyregenerate the trees according to the newspecifications without manually touching thetrees.
The bracketing information will persistthrough the updates and the basic structure of thetrees will remain correct regardless of thechanges in the details of trees.
We call this a?dynamic treebank?
where, instead ofmaintaining a set of trees, we maintain aparser/grammar, a dictionary, a set of sentences,and a database of bracketing information.
Thetrees can be generated at any time.Since our parser/grammar can consult knownphrase boundaries to build trees, its performancecan be greatly improved if large amounts ofbracketing information are available.
Humaninspection and correction can provide thoseboundaries, but the amount of manual work canbe reduced significantly if there is an existingsource of bracketing information for us to use.Fortunately, a great deal of such information canbe obtained from the cantillation marks of theHebrew text.1 The cantillation treebank1.1 Cantillation marksThe text of HB has been systematically annotatedfor more than a thousand years.
By the end of the9th century, a group of Jewish scholars known asthe Masoretes had developed a system for898marking the structures of the Bible verses.
Thesystem contains a set of cantillation marks 1which indicate the division and subdivision ofeach verse, very much like the punctuation marksor the brackets we use to mark constituentstructures.
At that time, those cantillation markswere intended to record the correct way ofreading or chanting the Hebrew text: how togroup words into phrases and where to put pausesbetween intonational units.
In the eyes of modernlinguists, the hierarchical structures thus markedcan be best understood as a prosodicrepresentation of the verses (Dresher 1994).There are two types of cantillation marks: theconjunctive marks which group multiple wordsinto single units and the disjunctive marks whichdivide and subdivide a verse in a binary fashion.The marking of Genesis 1:1, for example, isequivalent to the bracketing shown below.
(English words are used here in place of Hebrewto make it easier for non-Hebrew-speakers tounderstand.
OM stands for object marker.
)( ( ( In beginning )( created God ))( ( OM( the heavens ))(  ( and OM )( the earth ))))This analysis resembles the prosodic structure inSelkirk (1984) and the performance structure inGee and Grosjean (1983).1.2.
Parsing the prosodic structureThe cantillation system in the Mesoretic text is avery complex one with dozens of diacriticsymbols and complicated annotation rules.
As aresult, only a few trained scholars can decipherthem and their practical use has been very limited.In order to make the information encoded by thissystem more accessible to both humans and1 The cantillation marks show how a text is to be sung.See http://en.wikipedia.org/wiki/Cantillation.machines, we built a treebank where the prosodicstructures of HB verses are explicitly representedas trees in XML format (Wu & Lowery, 2006).There have been quite a few studies of theMasoretic cantillation system.
After reviewingthe existing analyses, such as Wickes (1881),Price (1990), Richter (2004) and Jacobson (2002),we adopted the binary analysis of British andForeign Bible Society (BFBS 2002) which isbased on the principle of dichotomy of Wicks(1881).
The binary trees thus generated are bestfor extracting brackets that are syntacticallysignificant.We found all the binary rules that underlie theannotation and coded them in a context-freegrammar.
This CFG was then used by the parserto automatically generate the prosodic trees.
Theinput text to the parser was the MORPH databasedeveloped by Groves & Lowery (2006) where thethe cantillation marks are represented as numbersin its Michigan Code text.The following is the prosodic tree generated forGenesis 1:1, displayed in English glosses in thetree editor (going right-to-left according to thewriting convention of Hebrew):Figure 1The node labels ?athnach?, ?tiphcha?, ?mereka?and ?munach?
in this tree are names of thecantillation marks that indicate the types ofboundaries between the two chunks theydominate.
Different types of boundaries havedifferent (relative) boundary strengths.
The ?m?nodes are morphemes and the ?w?
nodes arewords.8991.3.
A complete prosodic treebankSince the Mesoretic annotation is supposed tomark the structure of every verse unambiguously,we expect to parse every verse successfully withexactly one tree assigned to it, given that (1) theannotation is perfectly correct and (2) the CFGgrammars correctly encoded the annotation rules.The actual results were close to our expectation:all the 23213 verses were successfully parsed, ofwhich 23099 received exactly one complete tree.The success rate is 99.5 percent.
The 174 versesthat received multiple parse trees all have wordsthat carry more than one cantillation mark.
Thiscan of course create boundary ambiguities andresult in multiple parse trees.
We have goodreasons to believe that the grammars we used arecorrect.
We would have failed to parse someverses if the grammars had been incomplete andwe would have gotten multiple trees for a muchgreater number of verses if the grammars hadbeen ambiguous.2 Phrase boundary extractionNow that a cantillation treebank is available, wecan get brackets from those trees and use them insyntactic parsing.
Although prosodic structuresare not syntactic structures, they do correspond toeach other in some systematic ways.
Just as thereare ways to transform syntactic structures toprosodic structures (e.g.
Abney 1992), prosodicstructures can also provide clues to syntacticstructures.
As we have discovered, some of thebrackets in the cantillation trees can be directlymapped to syntactic boundaries, some can bemapped after some adjustment, and some have nosyntactic significance at all.2.1 Direct correspondencesDirect correspondences are most likely to befound at the clausal level.
Almost all the clauseboundaries can be found in the cantillation trees.Take Genesis 1:3 as an example:Figure 2Here, the verse is first divided into two clauses:?God said let there be light?
and ?there was light?.The first clause is further divided into ?God said?and ?let there be light?.
Such bracketing willprevent the wrong analysis where ?let there belight?
and ?there was light?
are conjoined toserve as the object of ?God said?.
Given the factthat there are no punctuation marks in HB, it isvery difficult for the parser to rule out the wrongparse without the help of the cantillatioininformation.Coordination is another area where thecantillation brackets are of great help.
Thesyntactic ambiguity associated with coordinationis well-known, but the ambiguity can often beresolved with help of prosodic cues.
This isindeed what we find in the cantillation treebank.In Genesis 24:35, for example, we find thefollowing sequence of words: ?male servants andmaid servants and camels and donkeys?.Common sense tells us that there are only twopossible analyses for this sequence: (1) a flatstructure where the four NPs are sisters, or (2)?male servant?
conjoins with ?maid servant,?camels?
conjoins with ?donkeys?, and then thetwo conjoined NPs are further conjoined assisters.
However, the computer is faced with 14different choices.
Fortunately, the cantillationtree can help us pick the correct structure:900Figure 3The brackets extracted from this tree will forcethe parser to produce only the second analysisabove.Good correspondences are also found for mostbase NPs and PPs.
Here is an example fromGenesis 1:4, which means ?God separated thelight from the darkness?
:Figure 4As we can see, the noun phrases andprepositional phrases all have correspondingbrackets in this tree.2.2 Indirect correspondencesNow we turn to prosodic structures that can beadjusted to correspond to syntactic structures.They usually involve the use of function wordssuch as conjunctions, prepositions anddeterminers.
Syntactically, these words aresupposed to be attached to complete NPs, oftenresulting in trees where those single words aresisters to large NP chunks.
Such ?unbalanced?trees are rarely found in prosodic structures,however, where a sentence tends to be dividedinto chunks of similar length for better rhythmand flow of speech.This is certainly the case in the HB cantillationtreebank.
It must have already been noticed inthe example trees we have seen so far that theconjunction ?and?
is always attached to the wordthat immediately follows it.
As a matter of fact,the conjunction and the following word are oftentreated as a single word for phonological reasons.Prepositions are also traditionally treated as partof the following word.
It is therefore not asurprise to find trees of the following kind:Figure 5In this tree, the preposition ?over?
is attached to?surface of?
instead of ?surface of the waters?.We also see the conjunction ?and?
is attached to?spirit of?
rather than to the whole clause.A similar situation is found for determiners, ascan be seen in this sub-tree where ?every of?
isattached to ?crawler of?
instead of ?crawler of theground?.Figure 6901In all these cases, the differences betweenprosodic structures and syntactic structures aresystematic and predictable.
All of them can beadjusted to correspond better to syntacticstructures by raising the function words out oftheir current positions and re-attach them to somehigher nodes.2.3 Extracting the boundariesIn the bracket extraction phase, we go through allthe sub-trees and get their beginning and endingpositions in the form of (begin, end).
Given thetree in Figure 6, for example, we can extract thefollowing brackets: (n, n+3), (n, n+1), (n+2,n+3), where n is the position of the first word inthe sub-tree.For cases of indirect correspondence discussed in2.2, we automatically adjust the brackets byremoving the ones around the function word andits following word and adding a pair of bracketsthat start from the word following the functionword and end in the last word of the phrase.
Afterthis adjustment, the brackets extracted fromFigure 6 will become (n, n+3), (n+1, n+3) and(n+2, n+3).
This in effect transforms this tree tothe one in Figure 7 which corresponds better to itssyntactic structure:Figure 7For trees that start with ?and?, we detach ?and?and re-attach it to the highest node that covers thephrase starting with ?and?.
After this and otheradjustments, the brackets we extract from Figure5 will be:(n, n+7)(n+1, n+7)(n+1, n+2)(n+3, n+7)(n+4, n+7)(n+5, n+7)(n+6, n+7)These brackets transform the tree into the one inFigure 8:Figure 8The cantillation trees also contain brackets thatare not related to syntactic structures at all.
Sinceit is difficult to identify those useless bracketsautomatically, we just leave them alone and letthem be extracted anyway.
Fortunately, as wewill see in the next section, the parser does notdepend completely on the extracted bracketinginformation.
The useless brackets can simply beignored in the parsing process.3 Building a syntactic treebankAs we mentioned earlier, we use a parser togenerate the treebank.
This parser uses anaugmented context-free grammar that encodesthe grammatical knowledge of Biblical Hebrew.Each rule in this grammar has a number ofgrammatical conditions which must be satisfiedin order for the rule to apply.
In addition, it mayhave a bracketing condition which can eitherblock the application of a rule or force a rule toapply.Besides serving as conditions in rule application,902the bracketing information is also used to ranktrees in cases where more than one tree isgenerated.3.1 Brackets as rule conditionsBracketing information is used in some grammarrules to guide the parser in making syntacticdecisions.
In those rules, we have conditions thatlook at the beginning position and endingposition of the sub-tree to be produced by the ruleand check to see if those bracket positions arefound in our phrase boundary database.
Thesub-tree will be built only if the bracketingconditions are satisfied.There are two types of bracketing conditions.One type serves as the necessary and sufficientcondition for rule application.
These conditionswork in disjunction with grammatical conditions.A rule will apply when either the grammaticalconditions or the bracketing conditions aresatisfied.
This is where the bracketing conditioncan force a rule to apply regardless of thegrammatical conditions.
The brackets consultedby this kind of conditions must be the manuallyapproved ones or the automatically extractedones that are highly reliable.
Such conditionsmake it possible for us to override grammaticalconditions that are too strict and build thestructures that are known to be correct.The other type of bracketing conditions serves asthe necessary conditions only.
They work inconjunction with grammatical conditions todetermine the applicability of a rule.
The mainfunction of those bracketing conditions is toblock structures that the grammatical conditionsfail to block because of lack of information.However, they cannot force a rule to apply.
Thesub-tree to be produced the rule will be built onlyif both the grammatical conditions and thebracketing conditions are met.The overall design of the rules and conditions aremeant to build a linguistically motivated Hebrewgrammar that is independent of the cantillationtreebank while making use of its prosodicinformation.3.2 Brackets for tree rankingThe use of bracketing conditions greatly reducesthe number of trees the parser generates.
In fact,many verses yield a single parse only.
However,there are still cases where multiple trees aregenerated.
In those cases, we use the bracketinginformation to help rank the trees.During tree ranking, the brackets of each tree arecompared with the brackets in the cantillationtrees to find the number of mismatches.
Treesthat have fewer mismatches are ranked higherthan trees that have more mismatches.
In mostcases, the top-ranking tree is the correct parse.Theoretically, it should be possible to remove allthe bracketing conditions from the rules, let theparser produce all possible trees, and use thebracketing information solely at the tree-rankingstage to select the correct trees.
We can even usemachine learning techniques to build a statisticalparser.
However, a Treebank of the Biblerequires 100% accuracy but none of the statisticalmodels are capable of that standard yet.
As longas 100% accuracy is not guaranteed, manualchecking will be required to fix all the individualerrors.
Such case-by-case fixes are easy to do inour current approach but are very difficult instatistical models.3.3  EvaluationSince only a very small fraction of the treesgenerated by our parser have been manuallyverified, there is not yet a complete goldenstandard to objectively evaluate the accuracy ofthe parser.
However, some observations areobvious:(1) The parsing process can become intractablewithout the bracketing conditions.
We triedparsing with those conditions removed fromthe rules to see how many more trees we willget.
It turned out that parsing became so slowthat we had to terminate it before it wasfinished.
This shows that the bracketingconditions are playing an indispensable rolein making syntactic decisions.903(2) The number of edits needed to correct thetrees in manual checking is minimal.
Mosttrees generated by the machine are basicallycorrect and only a few touches are necessaryto make them perfect.
(3) The boundary information extracted from thecantillation tree could take a long time tocreate if done by hand, and a great deal ofmanual work is saved by using the bracketsfrom the cantillation treebank.ConclusionIn this paper, we have demonstrated the use ofprosodic information in syntactic parsing in atreebanking project.
There are correlationsbetween prosodic structures and syntacticstructures.
By using a parser that consults theprosodic phrase boundaries, the cost of buildingthe treebank can be minimized.ReferencesAbney, S (1992) Prosodic Structure, PerformanceStructure and Phrase Structure.
In Proceedings,Speech and Natural.
Language Workshop, pp.425-428.BFBS (2002)  The Masoretes and the Punctuation ofBiblical Hebrew.
British & Foreign Bible Society,Machine Assisted Translation Team.Dresher, B.E.
(1994) The Prosodic Basis of theTiberian Hebrew System of Accents.
In Language,Vol.
70,  No 1, pp.
1-52.Gee J. P. & F. Grosjean  (2002)  The Masoretes andthe Punctuation of Biblical Hebrew.
British &Foreign Bible Society, Machine AssistedTranslation Team.Groves, A & K. Lowery, eds.
(2006).
The WestminsterHebrew Bible Morphology Database.
Philadelphia:Westminster Hebrew Institute.Jacobson, J.R. (2002)  Chanting the Hebrew Bible.The Jewish Publication Society, Philadelphia..Price, J.
(1990)  The Syntax of Masoretic Accents inthe Hebrew Bible.
The Edwin Mellen Press,Lewiston/Queenston/Lampeter.Richter, H (2004)  Hebrew Cantillation Marks andTheir Encoding.
Published athttp://www.lrz-muenchen.de/~hr/teamim/Selkirk, E. (1984) Phonology and Syntax: TheRelation between Sound and Structure.
Cambridge,MA: MIT Press.Wickes, W. (1881) Two Treatises on the Accentuationof the Old Testament.
Reprint by KTAV, NewYork, 1970..Wu, A & K. Lowery (2006) A Hebrew Tree BankBased on Cantillation Marks.
In Proceedings ofLREC 2006.Yaeger, G (1998) Layered Parsing: a PrincipledBottom-up Parsing Formalism for Classical BiblicalHebrew, a working paper, ASTER Institute, PointPleasant, NJ.Yaeger, G (2002) A Layered Parser Implementation ofa Schema of Clause Types in Classical BiblicalHebrew, SBL Conference, Toronto, Ontario,Canada.904
