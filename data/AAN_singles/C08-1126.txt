Proceedings of the 22nd International Conference on Computational Linguistics (Coling 2008), pages 1001?1008Manchester, August 2008Exploiting Graph Structure for Accelerating the Calculation of ShortestPaths in WordnetsHolger WunschCollaborative Research Center 441 ?Linguistic Data Structures?University of Tu?bingen, Germanywunsch@sfs.uni-tuebingen.deAbstractThis paper presents an approach for sub-stantially reducing the time needed to cal-culate the shortest paths between all con-cepts in a wordnet.
The algorithm exploitsthe unique ?star-like?
topology of word-nets to cut down on time-expensive calcu-lations performed by algorithms to solvethe all-pairs shortest path problem in gen-eral graphs.
The algorithm was applied totwo wordnets of two different languages:Princeton WordNet (Fellbaum, 1998) forEnglish, and GermaNet (Kunze and Lem-nitzer, 2002), the German language word-net.
For both wordnets, the time neededfor finding all shortest paths was broughtdown from several days to a matter ofminutes.1 IntroductionSignificant effort has been devoted in linguistic re-search to the problem of determining the semanticdistance1 between two concepts.
Many of the ap-proaches that were developed to provide a solutionfor the task use wordnets as their basic knowledgeresource.
Budanitsky and Hirst (2006) present anextensive number of approaches for determininglexical semantic relatedness based on the Prince-ton WordNet (Fellbaum, 1998).
A large numberof these solutions have in common that at somepoint in the calculation, the length of the shortestpath that connects the two concepts in question hasc?
2008.
Licensed under the Creative CommonsAttribution-Noncommercial-Share Alike 3.0 Unported li-cense (http://creativecommons.org/licenses/by-nc-sa/3.0/).Some rights reserved.1see Budanitsky and Hirst (2006) for a critical discussionof the term ?semantic distance?.to be taken into account.
The length of the short-est path between two concepts is thus a vital pieceof information in virtually any approach for deter-mining their semantic distance.From a computer science perspective, a word-net is a directed graph.
The nodes in the graphcorrespond to the concepts that are stored in thewordnet.
Two nodes are connected by an edge ifthere exists a semantic relation between the twoconcepts that correspond to the nodes.
The edgesare directed, reflecting the directedness of seman-tic relations in wordnets, such as the relation ofhypernymy.
The problem of finding the shortestpath between two nodes in a graph has been wellstudied in computer science.
Sedgewick (1990)presents two algorithms:?
Dijkstra?s algorithm finds the shortest pathbetween two concepts in quadratic time, andis extensible to find the shortest paths be-tween all concepts in cubic time.?
The Floyd-Warshall algorithm, which is veryeasy to implement, solves the all-pairs short-est path problem in cubic time as well.
TheFloyd-Warshall algorithm served as the base-line algorithm for this paper.Both algorithms operate on general directedgraphs.
The structure of a directed graph issketched in figure 1.
Given two nodes, there existmultiple different paths that connect the two nodes.In figure 1, in order to get from L to D, one couldtake the path L?G?E?D, but also L?G?C?A?F?E?D, and several other paths.
An algorithm that looksfor the shortest path must deal with this situationand basically be able to consider all alternatives.Computing of the length of all shortest pathswith the Floyd-Warshall algorithm takes about 1201001ABFGECJDKL MHIFigure 1: Schematic structure of a general graph.Example taken from Sedgewick (1990).hours for GermaNet, using a compiler-optimizedC implementation on a machine equipped withtwo AMD Opteron processors.
GermaNet, whichcontains 53,312 synsets2 in its current release 5,is of moderate size, compared to the PrincetonWordNet, which contains more than twice as manysynsets.
The execution time of 120 hours is accept-able if the wordnet does not change, and the short-est paths are calculated once and then kept for lateruse.
However, when the task involves the modifi-cation of the wordnet itself and the repeated recal-culation of all shortest paths, this is unacceptable.In such cases the execution time will most likelyprohibit research involving such techniques.It has been shown that there is no faster way forsolving the all-pairs shortest paths problem in gen-eral graphs.
However, the structure of wordnetsis somewhat different to that of a general directedgraph.
It can best be described to be similar to thatof a star, as depicted in figure 2.
In the middle,there is a unique top node that dominates all othernodes3.
In the center area around the top node,the synsets represent general concepts.
Closer tothe fringe, the synsets become more and more spe-cific.
A typical configuration in this region would2A synset is a set of words that are synonymous.
Through-out this paper, we will use the term synset synonymously tonodes in a graph, since the relevant relations (which are rep-resented by edges in the graph) hold between synsets.3In most wordnets such as Princeton WordNet or Ger-maNet, there is usually no unique top node.
Instead, thereis a set of most general concepts, called unique beginners.
Inthe example in figure 2, the unique beginners would be thesynsets s1, s3, s11, s15, and s23.
The algorithm presentedhere requires the wordnet to be a connected graph, thereforewe stipulate an explicit artificial top node.be a biological taxonomy of animals, or specifickinds of vehicles.
The number of such special-ized synsets in the outer regions of the wordnetoutweighs the number of core concepts by severalorders of magnitude.
In other words, the majorityof synsets in a wordnet is part of tree structures thatare arranged around a relatively small core graph.In the remainder of this paper, we will presentan approach to solving the all-pairs shortest pathsproblem in wordnets that is superior in executiontime by consistently exploiting this specific struc-ture of wordnets.2 Finding Paths In a WordnetWe implemented the Floyd-Warshall algorithm asour baseline.
The Floyd-Warshall algorithm usesa dynamic programming approach.
The basic ideais to find all shortest paths by first computing andstoring the paths lengths between nodes that areclose to each other, and then moving on to longerpaths by combining the results of the shorter paths.The Floyd-Warshall algorithm uses a matrix thatcontains for each pair of nodes the length of theshortest path that connects the two nodes.
The ma-trix is initialized by setting the length of the short-est path between any two adjacent nodes to 14.
Allother fields are set to ?
(which indicates that nopath has been found (yet)).
Then the algorithmchecks for any pair of nodes x and y whether thereexists a node z such that the path from x to y thatruns along z is shorter than the path between x andy that has been found so far.Floyd-Warshall AlgorithmN : set of nodesp: matrix that contains the lengths of the short-est path between any node x and y ?
N .Initialization Stepfor all x, y ?
N do5: if neighbors(x, y) thenpxy := 1elsepxy := ?end if10: end for4The Floyd-Warshall algorithm can also be used to calcu-late shortest paths in weighted graphs in which case the matrixwould be initialized with the weights of the edges betweenadjacent nodes.
We will focus on unweighted graphs in thispaper.1002Tops1s3s4s5s6s2s9s10s11s12s13s14s22s18s17s15s23s25s24s16s20s19s21s7s8Figure 2: Schematic star-like structure of a wordnet.Shortest Path Calculationfor all z ?
N dofor all x, y ?
N dopxy := min(pxy, pxz + pzy)15: end forend forSince the shortest of all possible paths must befound, the Floyd-Warshall algorithm has to checkfor any node z if the path x?z?y is the shortest.Returning to the example in figure 2, the shortestpath between x = s1 and y = s16 is s1?Top?s15?s16.
The Floyd-Warshall algorithm also considersthe other possible paths, such as s1?s3?Top?s15?s16 or s1?Top?s11?s17?s15?s16, which are even-tually discarded because they turn out to be not theshortest connection.Now consider a path such as the one illustratedin figure 3, which is the shortest undirected pathbetween the synsets s8 and s205.
In order to findthis shortest path, the Floyd-Warshall algorithmwould check all possible combinations of nodesx?z?y in order to find a potential shorter alterna-tive.
To the human reader it is obvious that this isan unnecessary amount of work: there is only onepath that leads from s8 to s1, because the part ofthe wordnet rooted in s4 is in fact a tree, and pathsconnecting two nodes in trees are always unique.The same is true for the structure rooted in s18.5Since the edges in the graph correspond to the hypernymyrelations in the wordnet, they all point towards the top node.In order to get from s8 to s20, one must first follow the path upto the top node along the hypernymy axis, and then down tos20 in the opposite direction.
Therefore, paths are undirected.Moreover, there is a unique link from s4 to s1, andfrom s18 to s17.
The synsets s1 and s17 are part ofthe core structure of the wordnet with higher den-sity.
Here, between s1 and s17 there do exist morethan one paths which must all be considered by thepath finding algorithm.The complexity of the Floyd-Warshall algorithmresults from the necessity of considering all possi-ble paths through a general graph in order to findthe shortest one.
Wordnets are graphs ?
but, asexplained above, they have a very special struc-ture: There is a core graph consisting of a limitednumber of synsets, but the majority of all synsetsis arranged in tree structures that are attached tothe core graph, which gives wordnets the star-likestructure described earlier.This structure, which is specific to wordnets,can be exploited such that expensive calculationsare only performed where necessary ?
in the coregraph of the wordnet ?
while specialized cheapercalculations are used in the outer parts.3 Structure-Adapted Shortest PathSearchThe observations about the structure of wordnetsand the nature of general algorithms to find allshortest paths lead to the conclusion that an al-gorithm that is adapted to the specific structureof wordnets should be superior over general algo-rithms with respect to execution time.
In this sec-tion, we will present such a structure-adapted ap-proach.
It operates in two stages: In the first stage,1003Tops1s3s4s5s6s2s9s10s11s12s13s14s22s18s17s15s23s25s24s16s20s19s21s7s8Figure 3: A path through the wordnet.all nodes in the wordnet are classified whether theyare part of the core graph or a peripheral tree struc-ture.
The second stage is the shortest path searchproper, which uses the information about the struc-ture of the wordnet that was acquired in the firststage.3.1 Stage 1: Node classificationIn the first stage, the algorithm determines whethera node belongs to the graph proper which consti-tutes the core network, or to a tree structure in theperiphery.
The algorithm classifies nodes in fourclasses, which are illustrated in figure 4.1.
Inner nodes: Inner nodes belong to the graphin the center of the network.
A node is an in-ner node if it has more than one parent node,or if one of its children is an inner node.In figure 4, inner nodes have a white back-ground.2.
Root nodes: A root node, as suggested by itsname, is the root node of a tree.
Root nodeshave a unique parent node, which must be aninner node.
In figure 4, root nodes have a darkgray background, and thick borders.3.
Tree nodes: Tree nodes are part of a tree,i.e.
they have one unique parent node.
Thisparent node must either be a root node, or atree node as well.
In figure 4, tree nodes havea dark gray background (and thin borders).4.
Leaf nodes: Leaf nodes have a unique parentnode, which must be an inner node.
They donot have any child nodes.
As such, leaf nodesare actually a special case of a root node.
Butfor performance reasons, they will be handledseparately from root nodes.
In figure 4, leafnodes have a light gray background.Two remarks are in order.
The tree structuresreferred to in this classification rely on a well de-fined parent-child relation.
The hypernymy rela-tion, which is the only relation between synsets weconsider in this paper, is a directed relation thatsatisfies this property: if synset x is a hypernym ofsynset y, then x is a parent node of y.The difference between the terms tree node andleaf node may seem a little arbitrary ?
consider-ing for example s8, which is a tree node, and s9,which is a leaf node.
Both nodes do not have childnodes.
However, from a performance perspective,it is advantageous to treat leaf nodes and tree nodesdifferently in the algorithm, which is why two dif-ferent nodes types are assumed.3.2 Stage 2: Shortest Path SearchThe second stage is the actual pathfinding step.The underlying basic idea is to split the calcula-tion: Consider the sample path in figure 3 betweensynsets s8 and s20.
This path runs through threeregions of the wordnet.
The synsets in the first partof the path, s8-s5-s4 all belong to the tree that isrooted in synset s4.
Then the path enters the core1004Tops1s3s4s5s6s2s9s10s11s12s13s14s22s18s17s15s23s25s24s16s20s19s21s7s8Figure 4: Node classes.
White: inner nodes; dark gray: tree nodes; dark gray with thick border: rootnodes; light gray: leaf nodes.graph and runs along s1-Top-s15-s176.
The thirdpart of the path is s18-s20.
Again, the correspond-ing synsets are members of a tree whose root iss18.The important point is that for any part of a paththat runs though a tree, this is the only possiblepath through the tree.
A general algorithm for find-ing the shortest path out of a set of multiple pos-sible paths is not necessary here.
This way, it ispossible to restrict the application of general buttime-expensive algorithms to the area of the word-net where this is needed ?
the core of the network,while elsewhere it is sufficient to just determine thelength of a path through a tree, a task which can besolved very efficiently.Returning to our example, the algorithm splitsthe calculation of the shortest path between s8 ands20 as follows: Both s8 and s20 are part of a tree,as determined in step 1.
The root of the tree thats8 is a member of is s4.
The length of the pathbetween s2 and s4 is 2. s4?s parent node is s1.Root nodes have a unique parent node by defini-tion.
Therefore we know that only s1 can be thenext node on the path, and its distance is 1, sinces4 and s1 are neighbors.
So, the length of the pathup to s1 is 3.
In the same fashion, the length ofthe other part of the path that is located in a tree,the path between s20 and s17, can be computed.6there are actually two possible paths of the same length(8) ?
the other possible path would be the one that runs alongsynset s11.The length of this part is 2.
Now there remainsthe part between node s1 and s17.
This part of thepath runs through the core graph.
Here, a generalalgorithm for finding shortest paths, such as theFloyd-Warshall algorithm, must be used to com-pute the path?s length.
The length of the shortestpossible path within this region turns out to be 3.Now the lengths of all parts of the path have beendetermined ?
and the total length of the shortestpath is just the sum of the three parts, which is 8.4 ImplementationThis section will present pseudo-code for the twostages of structure-adapted shortest path search.4.1 Stage 1: Node classificationStage 1 explores a wordnet and classifies everynode whether it is an inner node, or a root, tree, orleaf node.
The procedure starts out by classifyingas leaf nodes all nodes that are childless and thathave one unique parent node.
Note however thatthe definition of a leaf node requires that its parentnode be an inner node.
This constraint can not bechecked at this point, since information about in-ner nodes is not yet available.
Therefore the checkis postponed until later.Next, any node that has more than one parentnode is classified as an inner node.
The transitiveclosure of all of this node?s parent nodes is classi-fied as inner nodes as well.The remaining nodes that have not been classi-1005fied so far are either root or tree nodes.
A nodeis a root node if its parent node is an inner node,otherwise it is a tree node.The last step is to check the constraint on leafnodes which has been postponed.
As stated in thedefinition, leaf nodes are childless and have an in-ner node as parent.
Nodes with no children whoseparent node is either a root node or a tree node arenot leaf nodes, but rather tree nodes.
Thus, eachpotential leaf node is visited to ensure that its par-ent node is in fact an inner node in which case theclassification as a leaf node remains unchanged.Otherwise, the node is reclassified as tree node.The pseudocode of the node classification algo-rithm is listed below.Node Classification Algorithm7N : set of nodesNode classes: inner , leaf , root , tree,undefinedClassify leaf nodesfor all n ?
N do5: if |children(n)| = 0 ?|parents(n)| = 1 thenassign class(n, leaf )end ifend forClassify inner nodes10: for all n ?
N doif |parents(n)| > 1 thenif class(n) 6= inner thenassign class(n, inner){All parent nodes of inner nodes areinner nodes as well}15: for all m ?
parents?
(n) doassign class(m, inner)end forend ifend if20: end forClassify root and tree nodesfor all n ?
N doif class(n) = undefined thenif class(parents(n)[0]) = inner then25: assign class(n, root)7Notes on the notation: parents(n) and children(n) arefunctions that return a list of all parent or child nodes of thenode n. parents(n)[0] returns the first node in the list ofparent nodes of n.
parents?
(n) is the transitive closure ofall parent nodes of n. |parents(n)| is the number of parentnodes of n.elseassign class(n, tree)end ifend if30: end forReclassify leaf nodes as tree nodes if theyare children of tree nodesfor all n ?
N doif class(n) = leaf thenif class(parents(n)[0]) = root ?class(parents(n)[0]) = leaf then35: assign class(n, tree)end ifend ifend for4.2 Stage 2: Finding Shortest PathsThe actual calculation of shortest paths takes placein stage 2.
In order to calculate the shortest pathsbetween two nodes x and y, two main cases areconsidered.4.2.1 x and y do not belong to the same treex and y do not belong to the same tree if the rootnodes of the trees that x and y are members of aredifferent: root(x) 6= root(y).The path from x to y is then split into three parts:?
lxix : the length of the subpath from x to thefirst inner node ix on the path.?
lyiy : the length of the subpath from y to thefirst inner node iy on the path.?
lixiy : the length of the subpath from ix to iy,which runs through the core.The following cases are considered by the algo-rithm:1. x is an inner node: ix = x, and lxix = 0.2. x is a tree node: lxix is the length of the pathfrom x to the root node of the tree rx, plus 1to get from rx to ix: lxix := lxrx + 1.3. x is a leaf node or a root node: lxix is 1.4. y is an inner node: iy = y, and lyiy = 0.5. y is a tree node: lyiy is the length of the pathfrom y to the root node of the tree ry, plus 1to get from ry to iy: lyiy := lyry + 1.6. y is a leaf node or a root node: lyiy is 1.1006The length of the path lixiy (the path runningthrough the core graph) is calculated using theFloyd-Warshall algorithm, that is lixiy = pixiy(see the description of the Floyd-Warshall algo-rithm above).The total length of the shortest path is thenlxy := lxix + lixiy + lyiy .4.2.2 x and y belong to the same treeThis is a special case that is treated differentlyfrom all other cases.
Let z be the lowest node inthe tree that dominates both x and y (where z maybe equal to x or y).
Then lxy = lxz + lyz .Shortest Paths AlgorithmInput:Two nodes x, y ?
N .Path matrix p for nodes in the core graph ascalculated by Floyd-WarshallOutput:5: The length of the shortest path between x andy, lxy.if ((class(x) = root ?
class(x) = tree) ?
(class(y) = root ?
class(y) = tree)) ?root(x) = root(y) thenFirst case: x and y belong to the same treeLet z ?
S be the lowest common subsumerof x and y.lxy := lxz + lyz10: return lxyelseSecond case: x and y do not belong to thesame treeix := x;iy := y;15: if class(x) = tree thenrx := root(x)lxix := lxrx + 1else if class(x) = root ?
class(x) = leafthenlxix := 120: elselxix := 0end ifif class(y) = tree thenry := root(y)25: lyiy := lyry + 1else if class(y) = root ?
class(y) = leafthenlyiy := 1elselyiy := 030: end iflxy := lxix + lixiy + lyiyend if5 Experiments and Results5.1 The DataIn order to assess the performance of structureadapted path search, we experimented with twodifferent wordnets.
For English, we looked atPrinceton WordNet (Fellbaum, 1998) in its currentrelease 3, which contains 117,659 synsets.
Only4,250 of these synsets belong to the core network.The remaining 113,410 nodes are members of pe-ripheral tree structures, which amounts to 96 % ofall nodes.Furthermore, we applied the approach toGermaNet (Kunze and Lemnitzer, 2002) for Ger-man.
The architecture of GermaNet is modelledafter Princeton WordNet and is largely compati-ble.
GermaNet, in its current release 5.0, contains53,312 synsets.
Out of these, 8,728 synsets aremembers of the core of the network (i.e.
the partof the network that is a graph proper).
The remain-ing 44,273 synsets are part of peripheral tree struc-tures (or leaf nodes).
Hence, 83% of the synsetsin GermaNet are part of substructures that do notrequire a general algorithm for calculating shortestpaths.The topology of GermaNet is thus slightly dif-ferent than that of WordNet.
The fact that morenodes belong to the core graph indicates thatGermaNet?s density with respect to the hypernymyrelation is higher than the density of WordNet onthe level of the more abstract concepts.5.2 Application of the AlgorithmWe conducted our experiments on a machineequipped with two AMD Opteron 250 processorsrunning at 2.4 GHz and 8 GB of main memory.For the path-finding stage, we implemented twoC programs.
Both operate on the same input.
Bothprograms were compiled using gcc?s -O3 optionfor maximum optimization.The first program only used the Floyd-Warshallalgorithm ?
the node classes were effectively ig-nored.
For WordNet, the estimated processingtime was at least 35 days.
This value was com-puted by interpolating the time that had passedto process 15,000 synsets.
At this point, thetests were aborted.
Since Floyd-Warshall becomes1007Princeton WordNetSynsets 117,659Inner nodes 4,250Root nodes 7,174Tree nodes 56,532Leaf nodes 49,704Node classification time ca.
1 secondFloyd-Warshall path search > 35 daysStructure-adapted path search 9 minutesGermaNetSynsets 53,312Inner nodes 8,728Root nodes 4,641Tree nodes 18,949Leaf nodes 20,683Node classification time 1.2 secondsFloyd-Warshall path search 120 hoursStructure-adapted path search 40 minutesTable 1: Structure-adapted path search ?
Summaryof resultsslower the more nodes have been processed, thisvalue is likely to be even higher.
GermaNet con-tains only half of the synsets, and the Floyd-Warshall algorithm completed in 120 hours8.
Theresult, a matrix of 53,312?53,312 elements, con-taining the lengths of the shortest paths between allnodes, was written to a binary file whose size wasroughly 3 GB.In the second program, we implemented thestructure-adapted shortest path search approach.For calculating shortest paths in the core grapharea of the network, we used the same implemen-tation of the Floyd-Warshall algorithm as in thefirst program.
With the same input data and thesame machine, we were able to bring the executiontime down to 40 minutes for GermaNet, and only9 minutes for WordNet.
This includes creating theoutput file, which had the same binary format asthe one generated by the first program.
The dif-ference in processing time between WordNet andGermaNet stems from the smaller core graph inWordNet, which allows for even more nodes to beexcluded from the time consuming Floyd-Warshallcalculation.
The results of the experiments aresummarized in table 1.8The complexity of the Floyd-Warshall algorithm is cubic,therefore twice as many synsets result in a processing effortthat is eight times higher.6 DiscussionThe experiments show that with a thorough pre-analysis of the structure of a wordnet and consis-tent usage of this additional information, the timeit takes to calculate all shortest paths can be re-duced dramatically.
This is because most nodes ina wordnet are part of substructures that are propertrees and not general graphs.
In trees, it is possibleto calculate the length of a path very much moreefficiently than in an arbitrarily-structured graph.We successfully applied structure-adapted pathsearch to two wordnets, the Princeton WordNetand GermaNet.
Since the algorithm does not relyon concrete properties of a specific wordnet, it caneasily be applied to wordnets for other languages.The benefits of structure adaptation diminishwith increasing density of the network as moreand more nodes become part of the core graph.
Inthis case, the execution time will approach that ofthe Floyd-Warshall algorithm.
It is also obviousthat the approach does not generalize to arbitrarygraphs.
As long as the structure of graphs is sim-ilar to the star-like structure of wordnets, we ex-pect the approach to be beneficial in applicationsinvolving such graphs as well.ReferencesBudanitsky, A. and Hirst, G. (2006).
EvaluatingWordNet-based Measures of Lexical SemanticRelatedness.
In Computational Linguistics, vol-ume 32.
Association for Computational Lin-guistics.Fellbaum, C. (1998).
WordNet: An Electronic Lex-ical Database.
MIT Press, Cambridge, MA.Kunze, C. and Lemnitzer, L. (2002).
GermaNet?
Representation, Visualization, Application.
InProceedings of LREC, pages 1485?1491.Sedgewick, R. (1990).
Algorithms in C. AddisonWesley.1008
