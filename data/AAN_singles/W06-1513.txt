Proceedings of the 8th International Workshop on Tree Adjoining Grammar and Related Formalisms, pages 97?102,Sydney, July 2006. c?2006 Association for Computational LinguisticsThree reasons to adopt TAG-based surface realisationClaire GardentCNRS / LORIA615, rue du Jardin BotaniqueF-54 600 Villers-Le`s-Nancygardent@loria.frEric KowINRIA / LORIAUniversite?
Henri Poincare?615, rue du Jardin BotaniqueF-54 600 Villers-Le`s-Nancykow@loria.frAbstractSurface realisation from flat semantic for-mulae is known to be exponential in thelength of the input.
In this paper, we arguethat TAG naturally supports the integrationof three main ways of reducing complex-ity: polarity filtering, delayed adjunctionand empty semantic items elimination.
Wesupport these claims by presenting somepreliminary results of the TAG-based sur-face realiser GenI.1 IntroductionSurface realisation consists in producing all thesentences associated by a grammar with a givensemantic formula.
For lexicalist grammars suchas LTAG (Lexicalised Tree Adjoining Grammar),surface realisation usually proceeds bottom-upfrom a set of flat semantic literals1.
However,surface realisation from flat semantic formulae isknown to be exponential in the length of the input(Kay96; Bre92; KS02).
In this paper, we abstractfrom the TAG based surface realiser for FrenchGenI, (GK05) and argue that TAG naturally sup-ports the integration of various proposals made tohelp reduce either surface realisation or parsingcomplexity into a TAG based, lexically driven sur-face realiser.
Specifically, we show:1. that TAG elementary trees naturally supportthe implementation of a technique called po-larity filtering used to reduce the exponen-tial factor introduced by lexical ambiguity(Per03),1See e.g., (CCFP99) for a discussion summarising the rea-sons for this choice.2.
that TAG two operations of substitution andadjunction provides a natural framework forimplementing a delayed adjunction mecha-nism capable of reducing the complexity dueto the lack of ordering information and3.
that TAG extended domain of locality helpsreduce the potential complexity increment in-troduced by semantically empty items such asinfinitival ?to?
or complementiser ?that?.2 Surface realisation, flat semantics andcomputational complexityWhy is surface realisation exponential in thelength of the input?
As shown in (Kay96), onereason for this is the lack of ordering information.Contrary to parsing where the input is a string i.e.,an ordered list of words, the input to surface re-alisation is a set of literals.
Supposing each lit-eral selects exactly one constituent in the lexicon,then the number of possible combinations betweenthese constituents will be 2n (the number of sub-sets obtainable from a set of size n).In practice of course, there are possible restric-tions on constituent combination.
In particular,most existing realisers impose the constraint thatonly constituents with non overlapping semanticsand compatible indices can be combined.
Be-cause of this restriction, the core of the complex-ity stems in practice from intersective modifiers(Bre92; Kay96).
Given a set of n modifiers allmodifying the same structure, all possible inter-mediate structures will be constructed i.e.
2n+1.A second reason for the exponential complexityof surface realisation is lexical ambiguity.
As forbottom-up parsing, in surface realisation from flatsemantics, the input is used to select a set of lexi-cal entries namely all lexical entries whose seman-97tics subsumes one or more of the input literals.
Ina realistic grammar, one literal will be associatedwith more than one lexical entries.
So if Lexi is thenumber of lexical entries associated with literal li,then for an input semantics comprising n literals,the number of sets of lexical constituents coveringthe input semantics is:?i=ni=1 LexiThe two sources of complexity interact by mul-tiplying out so that the potential number of combi-nations of constituents is:2n ?i=n?i=1LexiIn what follows, we show that TAG naturallysupports various optimisations that have been pro-posed to reduce the search space.3 Polarity filteringTo restrict the impact of lexical ambiguity on pars-ing efficiency, (Per03) introduces a method calledPolarity filtering.
This method is based on the ob-servation that many of the combinations of lexi-cal entries which cover the input semantics are infact syntactically invalid either because a syntacticrequirement is not fulfilled or because a syntacticresource is not used.
Accordingly, polarity basedfiltering eliminates such combinations by:?
assigning each lexical entry with a set of po-larities reflecting its syntactic requirementsand resources,?
computing for each possible combination oflexical entries the sum of its polarities and?
only allowing surface realisation on combi-nations which have a net sum of zero (all re-quirements are satisfied and all resources areused).By filtering the initial search space before thetree combination phase, polarity filtering in effectreduces the impact of lexical ambiguity i.e.
de-creases?i=ni=1 Lexi.The definitory properties of TAG elementarytrees provide a natural way to assign polarities toa TAG lexical entries: each elementary tree can beassociated with a polarity +C , where C is the cat-egory of its root node and each substitution or footnode in that tree, a polarity ?C is added, where Cis the category of that node.We implemented polarity filtering in GenIbased on this way of associating lexical entrieswith polarities2 .
We then measured the impact ofthis filtering on the initial search space (the num-ber of sets of lexical items actually explored bythe realiser), on space (measured by the numberof chart items created) and on time.Table 1 summarises the impact of polarity fil-tering on the initial search space3.
possible indi-cates the number of combinations of lexical entrieswhich cover the input semantics and thus can po-tentially lead to a valid syntactic tree realising theinput semantics and explored gives the number ofcombinations actually explored by the surface re-aliser after polarity filtering has ruled out combi-nations which cannot possibly lead to a valid syn-tactic tree).As is to be expected, the impact increases withthe number of input literals so that while polarityfiltering divides the initial search space by 35.6 foran input ranging between 1 and 6 literals, it dividesit by 441.6 for an input size ranging between 14and 16 literalsliterals possible explored (?
)1-6 199.10 5.60 35.67-9 6460.88 40.06 161.310-13 43028.25 137.06 313.914-16 292747.64 662.91 441.6Figure 1: Polarity filtering and initial space(Sets of initial trees covering the input semantics)Table 2 gives the impact of polarity filtering onspace as measured by the number of created chartitems (or constituents).
The first column (w/o pol.
)gives the number of created charted items whenpolarity filtering is switched off and the second,(with pol.)
when polarity filtering is on.
As canbe seen, the effect is particularly pronounced whenthe input exceeds 10 literals.Finally, Figure 3 shows that the overhead intro-duced by the construction of the polarity automa-ton means that formulae under 10 literals are re-alised in roughly the same time with or without po-larity filtering.
However, for larger sentences, po-larity filtering is increasingly important in keepingrealisation times reasonable.
For instance, givenan input ranging between 14 and 16 literals, polar-2See (GK05) for more details.3For each group of input (1-6 literals, 7-9, etc.
), measuresare based on an average of 15 cases.98literals w/o pol.
with pol.
(?
)1-6 146.40 83.60 1.87-9 3273.50 1281.25 2.610-13 7468.06 702.50 10.614-16 17502.36 1613.91 10.8Figure 2: With and without Polarity filtering(Chart items)ity filtering divides realisation time by 5, that is,yields a realisation time of 2.21 seconds instead of11.61.literals w/o pol.
with pol.
(?
)1-6 0.81 0.79 1.07-9 1.68 1.35 1.210-13 3.56 1.88 1.914-16 11.61 2.21 5.3Figure 3: With and without Polarity filtering (CPUtimes)4 Substitution/adjunction distinctionOne important specificity of TAG is that it includestwo combination operations namely, adjunctionand substitution.
We now show that this featureof TAG is particularly useful in improving surfacerealisation performance.4.1 Reducing the impact of intersectivemodifiersTo restrict the combinatorics induced by modi-fiers, (CCFP99; CO05) proposes either to han-dle modifiers after a complete syntactic tree isbuilt (i.e., after all syntactic requirements are ful-filled) or before the modifiee is combined withother items (e.g., before the head noun has com-bined with a determiner).
Although the number ofintermediate structures generated is still 2n for nmodifiers, both strategies have the effect of block-ing these 2n structures from multiplying out withother structures in the chart.
More precisely, givenan input semantics of size n where k of its liter-als are to be realised as modifiers, the number ofintermediate structures possible in the two phaseapproach is 2k + 2n?k, which can be considerablysmaller than 2n, depending on the size of k.In TAG, we can make use of the fact that substi-tution and adjunction apply independently of eachother to implement a two-phase generation strat-egy where modifiers are handled only after a com-plete syntactic tree is built.
In the first phase,only substitutions are performed and in the sec-ond, only adjunctions.
Additionally, before ad-junction starts, all unsaturated trees (trees withunfilled substitution sites) are discarded from thechart thereby ensuring that modifiers do not com-bine with structures that cannot possibly lead to avalid result (since no constituent could be found tofill the unsaturated substitution sites).Since in TAG, modifiers always involve the useof adjunction, modifiers will always be handled bythe second phase of the algorithm and thereby ad-joined into ?saturated trees?
i.e., trees devoid ofunfilled substitutions sites.
In this way, the prolif-eration of structures induced by the modifiers canbe restricted.The substitution-before-adjunction strategy wasintegrated in GenI yielding the improvements in-dicated in Figures 4 and 5.literals 1 phase 2 phase (?)?
3 0.73 0.73 1.04 0.74 0.75 1.05 0.97 0.93 1.06 2.91 0.89 3.37 4.24 1.30 3.3?
8 Time outFigure 4: With and without SBA (CPU times)literals 1 phase 2 phase (?)?
3 47.00 44.33 1.14 107.00 108.00 1.05 310.00 263.00 1.26 1387.33 883.00 1.67 2293.50 761.33 3.0Figure 5: With and without SBA (Chart items)As table 4 shows, when there is more than 7 lit-erals in the input, the one-phase algorithm timesout.
More in general, for the data shown, the twophase strategy leads to an average decrease in timeranging between 1 and 3.3% and a decrease inspace varying between 1.1% and 3% respectively.Although the poor performance of the 1 phasealgorithm is in part due to a very large and stronglyovergenerating grammar4 , the data clearly showsthat SBA is essential in supporting large scale TAGbased surface realisation.4The grammar used is a grammar for French which con-tains roughly 3 400 initial trees (CD04).994.2 Substitution-before-adjunction combinedwith Polarity FilteringThe substitution-before-adjunction strategy limitsthe impact of intersective modifiers by restrictingthe number of constituents the modifiers can com-bine with within one set of lexical items.
Becausepolarity filtering reduces the number of sets of lex-ical items to be considered, it trivially also reducesthe number of sets of lexical items involving ad-junctions.The space improvement provided by combiningthe substitution-before-adjunction (SBA) strategywith polarity filtering is illustrated in Figures 6and 7 which show the space reduction associatedwith cases ordered either according to their num-ber of literals or according to their number of footnodes (i.e., adjunction cases).
As should be ex-pected, the number of foot nodes is more highlycorrelated with a space reduction.
Specifically,a combined SBA/polarity strategy divides by 3.4the space used for cases involving between 1 and12 auxiliary trees; and by 18.8 the space used forcases involving between 14 and 16 auxiliary trees.literals w/o pol.
with pol.
(?
)1-6 367.90 109.50 3.47-9 6192.69 1550.19 4.010-13 11211.06 711.06 15.814-16 30660.27 1631.64 18.8Figure 6: SBA + Polarity (Chart items)# aux trees w/o pol.
with pol.
(?
)1-12 2124.27 620.82 3.413-120 8751.53 1786.47 4.9121-190 11528.43 611.50 18.9191-350 25279.75 1085.75 23.3Figure 7: SBA + Polarity (Chart items)4.3 Filtering out unusable treesAnother interesting aspect of TAG?s use of twocombination operations and more specifically ofthe substitution-before-adjunction strategy is thatit naturally supports the inclusion of a third phaseto filter out unusable trees that is, trees which canbe determined not to be integrable in any validderivation.
Specifically, this third phase occurs be-tween substitution and adjunction and filters out:?
all trees with an unfilled substitution site?
all saturated trees whose root node is not la-belled with an S categoryThe first filter (elimination of unsaturated trees)is required, as indicated above, to restrict the im-pact of intersective modifiers: by discarding them,we restrict adjunction to saturated trees.
The sec-ond, makes use of the property of auxiliary treeswhich insists that root and foot node be labelledwith the same category.
Because of this property,adjunction cannot affect the category of the tree itadjoins to.
In particular, a tree which after all pos-sible substitutions have been performed, has rootlabel C with C 6= S can never lead to the creationby adjunction of a tree with root label S. Hence itcan be discarded (provided of course, the genera-tor is seeking to build sentences).Figures 8 and 9 illustrate the impact of this sec-ond filter (called the Root Node Filter, RNF) onthe chart size when polarity filtering is switchedoff.
As for SAB, the figures show a higher correla-tion between the RNF and the number of adjunc-tion nodes than with the number of literals.
In-triguingly, the impact of the filter is proportionallyhigher on sentences with fewer foot nodes.
Al-though this needs to be checked more thoroughly,the explanation for this could be the following.The trees removed by the Root Node Filter are sat-urated tree not rooted in S hence essentially sat-urated NP trees.
Examination of the data revealsthat the number of these trees removed by the RNFremains almost constant (though this might be anad hoc property of the specific testsuite used).Hence in proportion, the effect of the RNF dimin-ishes.Note however that in absolute terms, the num-ber of trees whose derivation is avoided by theRNF remains quite high thus contributing to anoverall better performance.literals w/o RNF with RNF (?
)1-6 367.90 146.40 2.57-9 6192.69 3273.50 1.910-13 11211.06 7468.06 1.514-16 30660.27 17502.36 1.8Figure 8: Root node filter w/o Pol (Chart Items).As Figures 10 and 11 show, combining the RootNode Filter with polarity filtering simply rein-forces the biases noted above: Root Node Filteringis proportionally more effective for short input butcan remain useful in absolute terms.
A more thor-100# aux trees w/o RNF with RNF (?
)1-12 2124.27 527.36 4.013-120 8751.53 5570.33 1.6121-190 11528.43 6490.14 1.8191-350 25279.75 15469.17 1.6Figure 9: Root node filter w/o Pol (Chart Items).ough investigation of the data and further exper-iments are needed however to determine whethersuch behaviour is not tied to some ad hoc propertyof our (still too limited) testsuite.literals w/o RNF with RNF (?
)1-6 109.50 83.60 1.37-9 1550.19 1281.25 1.210-13 711.06 702.50 1.014-16 1631.64 1613.91 1.0Figure 10: Root node filter + Pol (Chart Items).# aux trees w/o RNF with RNF (?
)1-12 422 621 1.513-120 1627 1786 1.1121-190 600 612 1.0191-350 1073 1086 1.0Figure 11: Root Node Filter + Pol (Chart Items).5 TAG extended domain of localityArguably there are words such as complementiserthat or infinitival to whose semantics is empty.These words are to surface realisation what gaps(or empty categories) are to parsing.
In a naive ap-proach, they require that all trees with an emptysemantics be considered as potential constituentcandidate at each combining step.
In terms of ef-ficiency, this roughly means increasing the size ofthe input n (just like postulating gaps at all po-sition in an input string increases the size of thatstring).To avoid this shortcoming, a common practice(CCFP99) consists in specifying a set of ruleswhich selects empty semantic items on the basisof the input literals.
However these rules fail to re-flect the fact that empty semantic items are usuallyfunctional words and hence governed by syntacticrather than semantic constraints.By contrast, in a TAG based surface realiser,TAG elementary trees provide a natural way tospecify the syntactic environment in which emptysemantic items can occur.
For instance, comple-mentiser that occurs with verbs taking a sententialargument which is generally captured by includ-ing the complementiser as a co-anchor in the treesof these verbs.More in general, the extended domain of local-ity provided by TAG elementary trees, togetherwith the possibility of specifying co-anchorsmeans that empty semantic items can be avoidedaltogether.
Hence they do not require specifictreatment and have no impact on efficiency.6 DiscussionWe have argued that TAG presents several fea-tures that makes it particularly amenable to thedevelopment of an optimised surface realiser.
Wenow summarise these features and briefly compareTAG with CCG (Combinatory Categorial Gram-mar) and HPSG (Head Driven Phrase StructureGrammar) based surface realisation.6.1 Using tree node typesThe different types of tree nodes identified by TAGcan be used to support polarity filtering wherebysubstitution nodes can be associated with negativepolarities (requirements) and root nodes with pos-itive polarities (resources).
As our preliminary ex-periments show, polarity filtering has a significantimpact on the initial search space, on the spaceused and on CPU times.So far, this particular type of global filteringon the initial search space has been used neitherin the HPSG (CCFP99; CO05) nor in the CCG(Whi04) approach.
Although it could presumablybe adapted to fit these grammars, such an adapta-tion is in essence less straightforward than in TAG.In CCG, the several combination rules meanthat a subcategory can function either as a re-source or as a requirement depending on the rulethat applies.
For instance, in the verbal category(S\NP )/NP , the subcategory S\NP functionsas a resource when NPs are type raised (it satisfiesthe requirement of a type raised NP with categoryS/(S\NP )).
However it will need to be furtherdecomposed into a resource and a requirement ifthey are not.
More in general, polarity specifica-tion in CCG would need to take into account theseveral combination rules in addition to the cate-gory structure.
In HPSG, it is the interaction oflexical categories with lexical and phrasal rulesthat will need to be taken into consideration.1016.2 Using rule typesThe two types of tree combining operations per-mitted by TAG can be used to structure the sur-face realisation algorithm.
As we?ve shown, per-forming all substitutions before allowing for ad-junction greatly reduces the exponential impact ofintersective modifiers.
Moreover, combining sucha substitution-before-adjunction strategy with po-larity filtering further improves performance.In comparison, the HPSG and the CCG ap-proach do not support such a natural structuringof the algorithm and intersective modifiers induceeither a pre- or a post-processing.In HPSG, intersective modifiers are discardedduring the chart generation phase and adjoinedinto the generated structures at a later stage.
Thisis inelegant in that (i) intersective modifiers are ar-tificially treated separately and (ii) structures sub-ject to adjunction have to be non monotonicallyrecomputed to reflect the impact of the adjunctionin that part of the tree dominating the adjunction.In CCG, the input logical form is chunked intosubtrees each corresponding to a separate gen-eration subproblem to be solved independently.Again the approach is ad hoc in that it does notrely on a given grammatical or linguistic property.As a result, e.g., negation needs special treatmentto avoid incompleteness (if the heuristic applies,negated sentences cannot be generated).
Similarly,it is unclear how long distance dependencies in-volving modifiers (e.g., Which office did you saythat Peter work in ?)
are handled.6.3 Using TAG extended domain of localityTAG extended domain of locality means thatempty semantic items need no special treatment.In contrast, both the HPSG and the CCG approachresort to ad hoc filtering rules which, based ona scan of the input semantics, add semanticallyempty items to the chart.7 Further researchAlthough the results presented give strong evi-dence for the claim that TAG naturally supportsthe development of an optimised surface based re-aliser, they are based on a limited testsuite and ona core grammar for French that heavily overgen-erates.
Hence they do not truly reflect the poten-tial of the proposed optimisations on the perfor-mance of a large scale surface realiser.
Currentwork concentrates on remedying these shortcom-ings.
In particular, we are working on develop-ing a structured test suite which permits a pre-cise measure of the impact of different factors bothon complexity and on the optimisations used.
Inthis testsuite for instance, each item is associatedwith a series of indicators concerning its potentialcomplexity: number of literals in the correspond-ing input semantics, number of trees, number ofnodes, number of substitutions nodes and numberof foot nodes in the corresponding selection of ini-tial trees.Further work also includes restricting overgen-eration and exploring in how far, polarity filteringcan be used to select one among the many para-phrasesReferencesC.
Brew.
Letting the cat out of the bag: Generationfor shake-and-bake MT.
In Proceedings of COLING?92, Nantes, France, 1992.J.
Carroll, A. Copestake, D. Flickinger, andV.
Paznan?ski.
An efficient chart generator for(semi-)lexicalist grammars.
In Proceedings ofEWNLG ?99, 1999.B.
Crabbe?
and D. Duchier.
Metagrammar redux.
InInternational Workshop on Constraint Solving andLanguage Processing - CSLP 2004, Copenhagen,2004.J.
Carroll and S. Oepen.
High efficiency realization fora wide-coverage unification grammar.
In R. Daleand K-F. Wong, editors, Proceedings of the Sec-ond International Joint Conference on Natural Lan-guage Processing, volume 3651 of Springer Lec-ture Notes in Artificial Intelligence, pages 165?176,2005.C.
Gardent and E. Kow.
Generating and select-ing grammatical paraphrases.
In Proceedings ofthe 10th European Workshop on Natural LanguageGeneration, Aberdeen, Scotland, 2005.M.
Kay.
Chart Generation.
In 34th ACL, pages 200?204, Santa Cruz, California, 1996.A.
Koller and K. Striegnitz.
Generation as dependencyparsing.
In Proceedings of the 40th ACL, Philadel-phia, 2002.G.
Perrier.
Les grammaires d?interaction, 2003.
Ha-bilitation a` diriger les recherches en informatique,universite?
Nancy 2.M.
White.
Reining in CCG chart realization.
In INLG,pages 182?191, 2004.102
