RESPONSE GENERATION IN QUESTION - ANSWERING SYSTEMSRalph GrishmanNew York University1.
INTRODUCTIONAS part of our long-term research into techniques forinformation retrieval from natural language data bases,we have developed over the past few years a natural lang-uage interface for data base retrieval \[1,2\].
Indeveloping this system, we have sought general, conceptu-ally simple, linguistically-based solutlons to problemsof semantic representation and interpretation.
Onecomponent of the system, which we have recently redesign-ed and are now implementing in its revised form, involvesthe generation of responses.
This paper will brieflydescribe our approach, and how this approach simplifiessome of the problems of response generation.Our system processes a query in four stages: syntacticanalysis, semantic analysis, simplification, and retriev-al (see Figure i).
The syntactic analysis, which isperformed by the Linguistic String Parser, constructs aparse tree a~d then applies a series of transformationswhich decompose the sentence into a operator-operand-adjunct tree, The semantic analysis first translatesthis tree into a formula of the predicate calculus withset-formers and quantification over sets.
This isfollowed by anaphora resolution (replacement of pronounswith their antecedents) and predicate expansion(replacement of predicates not appearing in the data baseby their definitions in terms of predicates in the database).
The simplification stage performs certain optimi-zations on nested quantifiers, after which the retrievalcomponent evaluates the formula with respect to the database and generates a response.Our original system, like many current question-answeringsystems, had simple mechanisms for generating lists andtables in response to questions.
As we broadened oursystem's coverage, however, to include predicate expan-sion and to handle a broad range of conjoined struc~:ures,the number of ad hoc rules for generating answers grewconsiderably.
We decided therefore to introduce a muchmore general mechanism, for translating predicatecalculus expressions back into English.2.
PROBLEMS OF RESPONSE GENERATIONTo understand how this can simplify response generation,we must consider a few of the problems of generatingresponses.
The basic mechanism of answer generation isvery simple.
Yes-no questions are translated into predi-cate formulas; if the formula evaluates to ~r~e, print"yes", else "no".
Wh-questions translate into set-formers; the extension of the set is the answer to thequestion.One complication is embedded set-formers.
An embeddedset-former arises when the question contains a quantifieror conjunction with wider scope than the question word.For example, the questionWhich students passed the French exam and which failedit?will be translated into two set-for~ers connected by G~d:{s E set-of-students I passed (s, French exam)}~d{s E set-of-students I failed (s, French exam)}It would be confusing to print the two sets by them-selves.
Instead, for each set to be printed, we takethe predicate satisfied by the set, add a universalquantifier over the extension of the set, and convert theresulting formula into an English sentence.
For ourexample, this would meanprint-Eng~ish-equiva~ent-of'(Vx E el)passed ix, French exam)'~)here S I = {s 6 set-of-students I passed(s,French exam)}andp~nt-~gl~sh-equ~valent-of (Vx ~ s 2)failed ix, French exam)'where S 2 = {s E set-of-students I failed(s,French exam)}which would generate a response such asJohn, Paul, and Mary passed the French exam;Sam and Judy failed it.The same technique will handle set-fo~aers within thescope of quantifiers, as in the sentenceWhich exams did each student take?Additional complications arise when the system wants toadd some words or explanation to the direct answer to aquestion.
When asked a yes-no question, a helpfulquestion-answering system will try to provide more infor-mation than just "yes" or "no".
In our system, if theoutermost quantifier is existential - -  (3x ~ S) C(x) - -we print {x E S I C(x\]}; if it is universal - -(Vx E S) C(x) - -we  print {x E S I 7C(x)}.
For example,in response toDid all the students take the English exam?our system will replyNO, John, Mary, and Sam did not.When the outermost quantifier is the product of predicateexpansion, however, it is not sufficient to print thecorresponding set, since the predicate which this setsatisfies is not explicit in the question.
For example,in the data base of radiology reports we are currentlyusing, a report is negGtiue if it does not show any posi-tive or suspicious medical findings.
Thus the questiQnWas the X-ray negative?would be translated intonegative iX-ray)and expanded into(Vf E medical-findings\] ~show(X-ray,f)sO the system would compute the set{f E medical-findings \[ show(X-ray,f)}Just printing the extension of this set,NO p ~tastases .99QUESTION ANALYSIS RESPONSE SYNTHESISQUESTICN RESPONSEstring analysis IPARSE TREEdecomposition generative transformations transformationalOPERATOR-OPERAND-ADJUNCT TREE OPERATOR-OPERAND'~ans~T TREEquantifier analysis arise tO op-op-adjtreePREDICATE CALCULUS FORMICA PRED.
CALC.
~(P~?U~Sd ~ ged)PLOD.
CALC.
(pronouns reso lved)  PREDICATE FORMULApredicate expansion substitute retrieved dataAnte pred icatePRED.
CALC.
(p red icates  e~panded)transl, to retrieval re tes t~RIEVAL  REQUESTsimplificationRETRIEVAL REQUEST (simplified) RETRIEVED DATAFigure 1.
The s t ructure  of  the NYU quest ion -answer ing  system.would be confusing to the user.
Rather, by using thesam~ rule as before foe printing a set, we produce aresponse such asNo, ~he X-ray showed metastases.Similar considerations apply to yes-no questions wi~h aconjunction of Wide scope.3.
DESIGN AND IMPLEMENTATIONAs we noted ear l ie r ,  our  quest ion -ana lys i s  p rocedu~ i scomposed o f  severa l  s tages  which t rans form ~he quest iont.hrou~h a se=ias  of  represen~at ionsx  sentence ,  p inet ree ,  operator -operand-ad: Junct  t ree  (~ans  fo rmat iona ldeconpoei~Lon), predic&te ca lcu lus  fo rnu la ,  re t r ieva lrequest .
TIlLs mul~L-#tage s t ructure  has made Ats t ra ight fo r~a~d to des ign our  sen~nce  geuere~inn,  o rsynthesis, pro~edttre, which const~cts  ~he sm represen-tations i n  ~he reveres  order  from the  ana lys i sprocedure ?In designing ~he synthes is  procedure ,  ~he first decisionwe had to make weal which representation should thesynthesls p~ocedm accept as input?
The retrieval pro-cedure instant.lares varifies in ~he re~leval request,so it might seem ~ost  s~.ra ightforwaurd fo r  ,':hit re~ievalprocedure to pass  to  ~he synthes is  pz~c~du~ a modi f iedre t r ieva l  request  representat ion .
A l~rna~ive ly ,  wecould keep track of the correspondence betweencomponents o f  ~he re t r ieva l  request  and com~nen~ o fthe parse t~,  ope=a~o~-operand-adJunct tree, orpredicate calculus representation.
Then we cou ld  sub-s~.
i tu te  ~he resu l t s  of  retrieval back into one of ~helatter representations and have ~-he synthesis componentwork fz~m there .
Th is  would simplify the  synthesis pro -cedure,  since its s~ar~ing point would be "closer" to~he sentence representation.A beullo z~equi=nt  for using one o!
~eee rtpresenta-tlona is ~hen the ability to emtLblish a correspondencebetween those ccn~onen~ o f  the re t r ieva l  request  whichmay be significant in genera~Lng a response and compon-ents of ~he other representation.
Because pred icatee~rmlon  introduces variables and relations which areno~ present earlier but which may have to be used in theresponse ,  we could not  use a representat ion  c loser  tothe  surface than the  outpot of  predicate expansion(a predicate calculus formula).
Subsequent s~aqes of ~heanalysis procedure ,  hcMevtr, (translation to retrievalrequest and simplification), do not introduce structureswhich wall be needed in generating responses.
We ~here-fore choose tO simpllfy Stir syn1~lesizer by using as itsinput the output of predicate expansion \[instantiatedwi~h the result.s of retrieval) rather than ~he retrievalz~quest.The synthesis procedure has ~hree stages, which corres-pond to th ree  of the  s taqes  of the  analysis procedure(Fi~IEt l).
First, noun phrases which can be pronominal-i zed are identified.
Second, ~he predicate calculusexpression is translated into an operator-operand-adJuncttree.
Finally, a set of gtnerative transformations areapplied to produce a parse ~e,  whose frontier is thegenerated  sentence .The correspondence between analysis and synthesis extendsto ~he deta i l s  of the analytic and generative transfoE-matlonal stages.
Bo~h stages use the same prelim, ~he~ransforma~ional component of  ~he Linguistic StringParser \[3\].
MidSt analytic r.Tansformations have corres-ponding members (performing ~he reverse transformations)in ~he generative set.
These correspondences have great-ly facilitated ~he design and coding of our generatives t age .100One problem in transforming phrases into predicatecalculus and than regenerating them is that syntacticparaphrases will be mapped into a single phrase (one ofthe paraphrases).
For example, "the negative X-rays" and"the X-rays which were negative" have the same predicatecalculus representation, so only one of these structureswould be regenerated.
This is undesirable in generatingreplies ~ a natural reply will, whenever possible,employ the saume syntactic constructions used in thequestion.
In order to generate ~uch natural replies, eachpredicate and quantifier which is directly derived froma phrase in the question is tagged with the syntacticstructure of that phrase.
Predicates and quantifiers notdirectly derived from the question (e.g., those producedby predicate expansion) are untagged.
Generative trans-fora~tions usa these tags to select the syntactics t r~ture  to be generated.
For untagged constructs, aspecial set of transformations select appropriatesyntactic structures (this is the only set of generativetransformations without corresponding analytic transfor-mations ) .4.
OTHER EFFORTSAS we noted at the beginning, few question-answeringsystems incorporate full-fledged sentence generators Ifixed-format and tabular responses suffice for systemshandling a limited range of quantification, conjunction,and inference.
However, several investigators havedeveloped procedures for generating sentences frominternal reprsentations such as semantic nets andconceptual dependency structures \[4,5,6,7\].Sentence generation from an internal representationinvolves at least three types of operations:o recursive sequencing through the nested predicatestructureo sequencing through the components at one level of thestructureo transforming the structure or generating words of thetarget sentence.The last function is performed by LISP procedures in thesystems cited (in our system it is coded in RestrictionLanguage, a language specially designed for writingnatural-language grammars).
The first two functions areeither coded into the LISP procedures or are performedby an augmented transition network (ATN).
Although theuse of ATNs suggests a parallelism with recognitionprocedures, the significance of the networks is actuallyquite different; a path in a recognition ATN correspondsto the concatenation of strings, while a path in agenerative ATN corresponds to a sequence of arcs in asemantic network.
In general, it seems that littleattention has been focussed on developing parallelrecognition and generation procedures.Goldman \[5\] has concentrated on a fourth type of opera-tion, the selection of appropriate words (especiallyverbs) and syntactic relations to convey particularpredicates in particular contexts.
Although in generalthis can be a difficult problem, for our domain (andprobably for the domains of all current question-answer-ing systems) this selection is straightforward and canbe done by table lookup or simple pattern matching.5.
c0Nc~vBz0.We have discussed in this paper some of the problems ofresponse generation for question-answering systems, andhow these problems can be solved using a procedure whichganezates sentences from their internal representation.We have Driefly described the structure of this procedureand noted how our multistage processing has made itpossible to have a high degree of parallelism betweenanalysis and synthesis.
We believe, in particular, thatthis paral lel ism is more readily achieved with ourseparate stages for parsing and transformationaldecomposition than with ATN recognizers, in which thesestages are combined.The translation from predicate calculus to an operator-operand-adjunct tree and the generative transformationsare operational; the pronom/nalization of noun phrasesis being implemented.
We expect that as our question-answering system is further enriched (e.g., to recognizepresupposition, to allow more powerful inferencing rules)the ability to generate full-sentence responses willprove increasingly valuable.6.
ACKNQ.WLE DGEMENTSI would like to thank Mr. Richard Cantone andMr.
Ng~ Thanh Nh~n, who have implemented m~st of theextensions to our question-answering system over thepast year.This research was supported in part by the NationalScience Foundation under Grant NO.
MCS 78-03118, by theOffice of Naval Research under Contract No.
N00014-75-C-0571, and by the Department of Energy, under Contract No.EY-76-C-02- 3077.7.
REFERENCES\[i\] R. Grishman and L. Hirschman, Question Answeringfrom Natural Language Medical Data Bases,Artificial InteZligence 11 (1978) 25-43.\[2\] R. Grishman, The Simplification of RetrievalRequests Generated by Question-Answering Systems,Proc.
Fourth Intl.
Conf.
on Very Large Data Bases(1978) 400-406.\[3\] J. R. Nobbs and R. Grishman, The Automatic Transfor-mational Analysis of English Sentences."
An Implemen-tation.
Intern.
J. Co~p,,ter Math.
A 5 (1976)267-283.\[4\] R. Simmons and J. Sloctun, Generating EnglishDiscourse from Semantic Networks.
Comm.
A.C.M.
1~(1972) 891-905.\[5\] N. Goldman, Sentence Paraphrasing from a ConceptUalBase.
Com.
A.C.M.
18 (1975) 96-106.\[6\] H. Wong, Generating English Sentences from SemanticStructures.
Technloal Re,opt No.
84, Dept.
ofComputer Sci., Univ.
of Toronto (1975).\[7\] J. Slocum, Generating a Verbal Response.
InUnd6Ps~an~ing Spoken Lunguugo, ed.
D. Walker,North-Holland (1978) 375-380.101
