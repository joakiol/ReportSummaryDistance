A User  F r iend ly  A T N Programming Env i ronment  (APE)tIans Haugeneder, Manfred GehrkeSiemens AG, ZT ZTI INFW.
GermanyAPE is a workbench to develop ATN grammars based on an active chart parser.It represents he networks graphically and supports the grammar writer by win-(tow- and menu-based debugging techniques.1.
ATNs - Attractive, but ....Augmented Transition Network Grammars are one ofthe frameworks for developing natural anguage par-sers that has been used sueessfully in a large number ofnatural anguage systems for many languages since itsintroduction i the early seventies by Woods \[WOO 701.Three aspects of ATNs, namely applicability in varioustypes of natural anguage systems, suitability for dif-ferent languages and the availability of efficient proces-sing methods make ATNs an adequate framework forpractically oriented development of natural languageparsers.Since the time of its introduction the core of the ATNformalism has proved to be astonishingly stable and theexposition and specification ofATNs given in \[BAT 78\]turned out to become a quasi-standard.One of the five claims stated there, namely perspicuity,deserves ome comments, because to us it doesn't seemjustified strongly.
On the contrary we feel that con-cerning perspicuity and descriptiveness ATN grammarsdo have some shortcomings.
These come into play if youuse the ATN formalism to develop a grammar for a non-trivial subset of a natural language.The main reason for this insufficient perspicuity clearlylies in the possiblities ATNs offer with respect o localand global register setting and testing.
These facilities,though practically very useful, give an ATN grammar asomewhat procedural character, the grammar writer hasto cope with.
In this sense ATNs can be seen as aprogramming language for writing nondeterministicprograms (grammars).
Thus for the development of anylarger grammars (programs) some sort of programmingenvironment for ATNs not only is necessary but alsocompensates the lack of perspicuity and it makes thedevelopment of ATN grammars a practicable task.2.
Design Considerat ions for an ATN Env i ronmentExamining various ATN environments a \[KEH 80\],\[GNE 82\] and \[CHR 831 for example we developed ourATN programming environment (APE) along followingdesign principles.1) The various tools the environment offers must be in-tegrated allowing simultaneous grammar editing andtesting.2) The grarmnar editor has to represent the networkstructures graphically allowing the user to access thegrammar via the contextfree skeleton of the variousnetworks.3) The desigu of the system should make use of techni-ques like multi-windowing, menue- and mouse-basedinteraction facilities, in order to make the systemusable in an easy manner.With this desiderata concerning the design of such asystem, certain requirements concerning the hardwareand software fi)r such an implementation are necessary.We have chosen Interlisp-D (Trademark of XEROX) asbasis of APE, which due to its comprehensive display-and interaction facilitie:i~ proved to be an adequatestarting point for the realisa-tion ofour ideas.3.
Active Chart Pars ing as a Framework  for anATN Env i ronmentActive Chart parsing (\[KAP 73\]) is a highly general fra-mework to implement parsers.
The two main ideas ofthis approach are to represent the parser's control struc-ture explicitly allowing high flexibility in scheduling thevarious paths to be followed and to prevent he parserfrom doing the same thing twice using a comprehensivebookkeeping mechanism.
The interaction of thesecomponents is shown schematically in figure 1.PARSERFigure 1The possibilities of a flexible scheduling is achieved bymeans of an agenda, which at any state of the parsercontains all the tasks that are induced by the grammarand not processed so far.
The ordering of the agendathereby determines the way, the search space istraversed.
With this agenda-based scheduling facilitythe parser can apply various control structures likedepth-first, breadth-first or heuristic scheduling, evenchanging it during one parse.Such facilities are of interest for "tuning" the parser'sbehaviour in an intended way.
Agenda-based task sche-duling also offers the operational facilities for pruningparts of the search space which amounts to switching offcertain parts of a grammar during a parse.The second central concept in active chart parsing, thechart, is a graph structure, which does not only do thebookkeeping of the parsed constituents (the inactiveedges).
It also records each of the partial intermediatesteps (the active edges), thus logically representing allthe paths in work and all constituents parsed so faroffering the possibility to inspect he uptothen parsingprocess.But more important, e.g.
for perspicuity, the chart (i.e.its graphical representation) also can be seen as a des-criptive representation f the parser's tate from a naive399grammar writers' point of view.
It is a conceptuallysimple representation, whose atomic constructs, thegraph's nodes, the active and inactive dges, have clearcounterparts o the conceptual entities a grammar wri-ter has a naive understanding of, namely the positions inthe sentence to parse (i.e.
the nodes), the partial parsesspawning between two nodes (i.e.
the active edges) andalready analysed constituents (i.e.
the inactive edgesspawning the sequence of words between two nodes).Thus a graphical representation f the chart growing asthe parser proceeds makes the parsing process easilyperspicuable for the user.4.
Description of the Env i ronment4.1.
The Grammar-Edi torThe user interface to the ATN grammar is built on top ofan active graph-like representation f the single net-works, which is initiated by the user in a menu-basedmanner.
This bird's eye view gives the user an overallfirst impression of the global structure of the wholegrammar with the type of the ,arc (PUSH, POP, CAT,JUMP) and the specification of categorial" informationwith CAT- and PUSH-arcs.Thus the user is not beaten with an unnatural,  artificial-ly linearized (for example lispish) way to represent thebasic graph-like concepts of ATNs.
The benefits of suchnetwork-based grammar specification facilities havebeen pointed out by Grimes \[GR175\].The networks, displayed in the way described above,additionally offers the user a number of operationalfacilities, such as getting:more specific information on acertain arc as for example its actions or additional tests.The user can activate the displayed network's arc andnodes respectively by clicking the mouse.Activating an arc hereby pops a menu with the follo-wing possibilities:- info: Gives a detailed printout of the arc, includingits status (broken vs. unbroken).- delete: Deletes the arc from the network, causing anew graphical layout of the network.- edit: Edits the complete arc in a mouse- and menu-oriented editor with all necessary facilities tomodify various parts of the arc, such as tests,actions and forms as well as its weight.
Lea-ving the editor several checks are performed,putting the user back into the edit mode, if themodified arc structure is incorrect (e.g.
if itcontains too many items or items of an incor-rect type at the wrong place).- break: Puts a break on the arc taking the user into thebreak mode with interactive facilities (as des-cribed below) after the broken arc's actions areperformed.- unbreak: Removes a break from the arc.Activating a node in the network offers the followingfacilities:- info:- insert:Gives a detailed printout of all the arcs star-ting at that node.Allows the user to insert an arc starting at thenode activated, the arc's ending node (exceptPOP-arcs) being determined via the mouse.
Tointroduce additional new nodes the user isprompted by the system for subsequent arcsuntil he specifies a POP-arc or an alreadyexisting node as ending node of the lastprompted arc.400- merge: A new node N1 is inserted after node N withthe leaving arcs of N now beginning at N1 anda new arc between N and N1.4.2.
Grammar-DebuggerThe user can specify in advance certain constructions hewants to be parsed, thus having the possiblitiy to testcertain NP-constructions for example without he over-head of parsing awhole sentence.These debugging facilities can be involved in three ways:primarily while the parser is working in a stepper-modeoy means of a user interaction, secondly during theparser's run by means of a break put on an grammar arcand thirdly system-initiated at the end of the parsegiving the user the possibility to restart.In the stepper-mode the user can cause a break whilewatching the chart growing as the parser processes onetask after another in the following way.
During thesingle steps of creating of the chart graphically thesystem is interruptable to give the user the opportunityto put APE's stepper into the break-mode ~oy mouse-clicking the relevant menu's item).In the break-mode the user is offered a number ofoperational facilities which can be accessed activatingthe chart nodes and edges with the mouse.
When selec-ting an edge the user can get more detailled info~ana-tion as for example its weight, its register environmentand its history, consisting of the path through the gram-mar each arc being augmented with additional informa-tion as its current inputword, its register environmentand the number of the task being responsible forprocessing that arc, which directly reflects the way thescheduling is performed.
But more importantly the~.ammar tester can also modify the edges in variousdimensions, including the following options:- registers:- weight:- ending edge:The user can change registers by emplo-ying the same language he is used to asa grammar writer, i.e.
in terms ofactions defined in the ATN formalism asfor example SETRs, ADDRs or form tobe evaluated such as BUILDQs.Allows to change of the weight of anedge, affecting the order of furtherprocessing.With this option an edge can be modifiedwith respect o the part of the inputbeing spanned by it.This last option together with the possibilities of regi-ster modifying renders for example the simple simu-lation of the parser's behaviour under the assumption ofa (effectively missing or due to not matching testsblocked) grammar arc by enlarging the span of an edge.Another more powerful possibility in testing a grammaris the introduction of additional (in)active dges, con-necting two arbitrary nodes, which can be achieved viaan activation of the starting arc.
This allows the speci-fication of partial parses or parsed constituents, which -though missing due to some defect in the grammar - theuser wants the to make use of in further parsing process.Parallel to all the options presented so far the user canedit the grammar on the fly, thus being able to modifythe grammar just when he recognises certain bugs.Additionally APE gives the user the possibilitiy to mani-pulate the agenda offering him various actions to beperformed on the single tasks l!ke freezing and kil l ing atask, or changing its weight, this facility provides anadvanced grammar writer with very effective means tofocus the parser on things that are interesting for him ina certain situation, abondoning with irrelevcnt paths orpostponing them.Finally, when the user has done all the things thatseemed useful to him at this break point he can continuethe parsing process leaving the stepper options as theyare or changing them appropriately.At the end of the parsing process the user again gets in abreak mode giving him the opportunuity of insertingnew edges with the facility to restart he parsing processwith this new information.
Thus adding a new inactiveedge and restarting for example amounts to asking theparser "what would yours results have been with anadditional constituent ci from word wj to word Wk?
".With the facilities described above the user also caneasily analyse a configuration when the parser did notsucceed in parsing a certain construction?This description, though sketchy, should give an impres-sion of the ~acilitities of APE and the ideas behind it.
Anil lustration of APE's environment is shown in the appen-dix.5.
Out lookThe described ATN programming environment givessubstantial support o the user in building up a workinggrammar, but some of APE's aspects aren't completelysattsfymg.
~o a lot of polishing the user interface as wellas improving the functionality isstill to be done.AppendixSnapshot of the system in the breakmode.Primari ly we are currently working on an user friendlylexicon handling.
Another augmentation will be theeasier global specification ofvery flne-grained breaks.We'd like to thank U. Hochgesand, C. Maienborn and L.Simon for implementing parts of the environment andthe colleagues of our lab fbr many fruitful discussions.7.
L i terature\[BAT 78\]Bates, M., "The Theory and Practice of AugmentedTransition Network Gramnmrs', in: Bole, L. (ed), "Natu-ral Language Communication with Computers", Berlin1978\[CHR 831Christaller, T., "An ATN Prgramming Environment",in: Bolc, L. (ed), '~Phe Design of Interpreters, Compilers,and Editors for Augmented Transition Networks",Berlin 1983\[GNE 82\]Gnefkow, W., "Studien zu einer Programmierumgebungffir Augmented Transition Networks", Memo ANS-3,Universitat fIamburg, 1982\[Gill 75\]Grimes, J.
(ed) "Network Grammars", SummerInstitute of Linguistics, University of Oklahoma, 1975\[KAP 73\]Kaplan, R. M., "A General Syntactic Processor", in:Rustin, R. (ed), "Natural Language Processing", NewYork 1973\[KEH 80\]Kehler, T.P., Woods, R.C., "ATN Grammar Modelling inApplied Linguistics", Proc.
19th ACL Meeting, 1980\[WOO 701Woods, W.A., '~rransition Network Grammars for Natu-ral Language Analysis", Comm.of the ACM 13(10), 1970I401A LANGUAGE FOR TRANSCRIPTIONSpaper  submi t ted  forCOLING 86BonnbyYves LEPAGEGETA, BP 68dntvers i t~  Sc lent i r tque  et  M6d ica le  de Grenob le38402 Sa ln t -Mar t ln -d 'H~res ,  FRANCE(Final dra f t ,  April 1986)ABSTRACTTo dea l  w i th  spec i f i c  a lphabets  i s  a necess i ty  tnnatura l  language process ing .
In  Grenob le ,  th l s  p rob lemis  so lved  w i th  he ld  o f  t ranscr ip t ions .
Here we presenta language (LT)  des igned to  the rap id  wr i t ing  o fpassage f rom one t ranscr ip t ion  to  another  ( t ransducers )and g ive  some examples o f  i t s  use.KEY-WORDSTranscr ip t ions ,  t ransducers ,  mu l t i -a lphabet  textp rocess ing ,  log ica l  and phys ica l  p rocess ing  o f  texts .INTRODUCTIONIn  the genera l  f ramework or  natura l  languageprocess ing ,  the poss ib i l i t i es  o f  in ter faces  provtded  bythe  cur rent  dev ices  a re  ra ther  poor ,  when censtder |ng~fo r  example ,  the number o f  a lphabets  to  be used.
Theprob lem o f  uppercase / lowercase  le t te rs ,  that  o fnon- la t in  a lphabets ,  not  ment ion ing  ideograms,  isUsUa l ly  so lved  by the use o f  t ranscr ip t ions  i n  computersc ience  c i rc le  dea l ing  w l th  natura l  languages<BOITET83>.Our idea i s  to  p rov ide  a ra ther  s imp le  dev icea l low ing  rap id  wr i t ing  o f  programs per fo rming  thepassage f rom one t ranscr ip t ion  to  another  ( t ransducers ,<KAIN72>) ,  w i th  he lp  o f  a language (LT or  Language fo rT ranscr ip t ions )  based on an abst rac t  automaton.
Thede f in i t ion  and the  imp lementat ion  o f  th i s  language werein i t ia ted  dur ing  an eng ineer ing  school  pro ject<MENGAB4>.
The work on th i s  Spec la l l sed  Language fo rL ingu is t i c  Programming (SLLP) has led to  a F i r s tvers ion  <LT85> in the  context  o?
a GETA/USMG pro jec t .I t  has then been extended in the frame o f  EUROTRAcont ract  ETS-5 <ETS5>.Th is  paper  presents :the  semant ics  o f  LT in  automata theory ;the syntax  o f  LT br ie f ly  descr ibed;Ind icat ions  on the  Imp lementat ion ;some app l l ca t lons .I .
SEMANTICS OF I_T IN AUTOMATA THEORYinput  tape .
.
.
a <st r  x> .
.
.
a <st r  x>READING HEAD .
.
.
.
.
.
.
~ .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
l .
.
.
.
.
.
.
......
I .
.
.
.
.
.
.
Is ta te  E q I - ->  !
q '  I- - - t  .
.
.
.
.
.
I - - -wr i t ing  head ~output  tape <st r  z> <st r  z> b .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.G iven a s ta te  and a character  read ,  the  t ransducergoes In to  another  s ta te  and determines  which characterto  wr i te  onto  the  output  tape ( t rans i t ion) .Tile most s imple  t ransducer  i s  determin is t i c  andr~ la~r .
:i t  has on ly  one input  tape and on ly  one outputtape;there  i s  on ly  one way fo r  read ing  and wr i t ing( r lghtwards) ;I t  reads on ly  one symbol at a t ime;  i t  wr i teson ly  one symbol fo r  one symbol read;there  are  no o ther  ob jec ts  such as s tacks  orba l loons .2, THE ABSTRACT AUTOMATON OF LTTile "bas ic"  automaton is  extended in LT in to  th reed i rec t ions1.
ava i lab i l i ty  o f  the r ight  context  by means o f  tworead ing  heads.
The t rans i t ion  i s  funct ion  o f  thehead ( " fo rward"  or  "cur rent" )  used in  the read ingo f  the input  tape .
A spec ia l  t rans i t ion  per fo rmsthe re turn  o f  the " fo rward"  head onto  thepos i t ion  o f  the "cur rent"  one.
Th is  permi ts  tos imu la tes  the read lng  o f  the empty s t r ing  andp laces  the abst rac t  automaton or  LT in the c lasso f  t i le  "sequent ia l  t ransducers"  as de f ined  in<KAIN72>;2. use o f  the  not ions  o f  a t t r ibutes  in the s ta tes .A s ta te  I s  an e t iquet te  w i th  a t t r ibutes .
Theva lues  o f  some at t r ibutes  a re  tes ted  be fore  at rans i t ion  (cond i t ion)  and the va lues  o f  someat t r ibutes  are  changed a f te r  (ac t ions ) .
Th istheoret i ca l ly  inc reases  the non-determin ism o fthe automaton;3. work on s t r ings  and not on ly  on characters ,  whichsets  de f ln i t l ve iy  the automaton In the  c lass  o f"sequent ia l  t ransducers" .1.
"BASIC" TRAN~JCERTransduct lon  may be regarded  as a s imu l taneousoperat ion  of read ing  and wr i t ing ,  writ ing be ing  afunct ion  o f  read ing  <AHO,UL?2>, <CHAUCHE74>.
At ransducer  I s  a machine w i th  an input  tape and anoutput  tape .?
.
.
<st r  x> <st r  y> .
.
.
<st r  x '> <st r  y '>.
.
.
.
.
.
T .
.
.
.
.
.
.
I .
.
.
.
.
.
.
.
.
.
.
.
.
| .
.
.
.
.
.
.
.
f .
.
.
.
.
.
.
.I ~ !
II II q t - ->  I q' IIA l=a i  I I AI =ai ' 1. .
.
.
I .
.
.
.
.
.
.
I - - -<si r  z>.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.<str  z '>  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.402The bower  o f  the  LT automaton  1!
; res t ra ined  to  at ransducer  w l th  the  fo l low ing  character i s t i cs :one input  tape  and one output  tape ;determin ism;s ta tes  de f ined  by  e t iquet tes  and a t t r ibutes ;two read ing  heads .The abst rac t  LT t ransducer  may b(~ under -used  as adetermin is t i c  f tn l te -s ta te  mach ine .
So the  c lass  o flanguages  wh ich  car l  be ana lysed  by  LT compr ises  tl~ec lass  o f  regu lar  languages .On the  cont rary  to  what  we wrote  in  <ETS5>, LF canbe used  to  de f ine  an accepter  o f  t i l e  famouscontext -dependent  language anbncn .
I t  I s  thesemi - regu lar i ty  wh ich  per ln l t s  to  s lmul~Lte  s tacks .
Th ismeans that  \ [ t ie  c lass  o f  languages  ana lysed  by  theabst rac t  LT t ransducer  compr ises  some o f  thecent  ex  t -dependent  languages .Us ing  the  Chomsl{y h ie rarchy  we say that  I_T canana lysea l l  the  languages  o f  c lass  L3 ;some o f  the  languages  o f  c lass  L~;  to  know I f  a l llaeguagl.~s In  1_2 can be ana lysed  by  LT I s  an openpr  ob 1 em;some o f  the  languages  o f  c lass  I_1;I I .
SYNTAX OF.
LTSUMMARYAf ter "  a presentat ion  o f  the  synta;~ o f  the  s t r lngs ,we in t roduce  the  de f in i t ion  o f  cond i t ions  and act ionsbased  on the  a t t r ibutes .Wi th  these  three  ob jec ts  ( s t r ings ,  cond i t ions  andact ions )  we def ine  the  ru les  wh ich  serve  to  wr i te  thebund les .F ina l ly ,  we sketch  the  genera l  s t ruc ture  o f  a I.Tp rogram.
Inc identa l ly ,  the  concrete  syntax  o f  LT hastaken  i t s  Insp i ra t ion  f rom t l la t  o f  Ar tane- -78  <DSEI>.J - .
ZHB_ _S_!
R_I NG$_A s t r ing  Is  a concatenat ion  o f  s imp le  s t r ings .
As imp le  s t r lng  may be a s t r ing  e l  characters  orhexadec imal  codes  or  spec ia l  symbo ls  fo r  the  end o f  thel ine  and t i l e  end o f  the  f i l e .Any s t r lng  o f  a cer ta in  length  may be read  wt th  he lpo f  a spec la l  des ignator .There  ex is t  th ree  o ther  convent ions  fo r  the  outputtape  to  des  I~nate  the  same s t r ing  as read  in  input  , o rw l th  le t te rs  on ly  in  UDDer -case  or  l l l  l ower -case .2._ THE OON\[!
\ [TIONS AND~IO~SA cgnd l__t _l on I s  a first order  pred icate  on thea t t r ibutes ,  expressed  in  the  usua l  syntax  ( log ica lconnectors :  no ,  and ,  o r ;  parentheses  a l lowed) .
Thea t t r ibutes  be long  to  one o f  the  three  c lasses :  sca la r ,se t  o r  a r i thmet ic  ( in fe r io r  to  an upper  bound) .An acU_oP_ can be an ass ignment  o f  a va lue  to  avar iab le ,  a l~st  o f  ac t ions  car r ied  out  cond i t iona l ly ,o r ,  a b lock  conta in ing  a l l s t  o f  ac t ions .Th ls  not ion  i s  extended to  th ree  predef lned  act ions .The f i r s t  has  no impact  at  a l l  oi l  the  semant ics  o f  thet ransduct ton  (d i sp lay ing  a message on an aux i l i a ryf i l e ) ;  the  two o thers ,  on the  cont rary ,  a re  s ign i f i cantfo r  the  t ransduct ion  (d i sp lay ing  a re turn  code  on theer ror  f i l e  and s topp ing  the  t ransduct lon ;  mov ing  the" fo rward"  head back  to  the  pos i t ion  o f  the  "cur rent"head  (seml - regu lar l ty ) ) .A ru le  descr ibes  a ( ; lass  o f  t rans i t ions  o f  theshape  :i nput  s t r ing  / cond i t ion  == output  s t r ing  / ac t ions  .the  symbol  ?
at  the  head o f  the  ru le  s ign i f ies  that  theinpqt  s t r ing  i s  to  be read  under  the  " fo rward  't head .The ph i losophy  o f  LT | s  to  put  together  the  poss ib lepassages  from one et lquet to  to  another  in to  a bundle o ft i le  shape:de <et lquet te l> a <et iquet te2> v iar l l l e l  ru le2  .
.
.
ru leN4.
GENERAL STRUC.TU, RE_OF A _T PROGRAMA LT progra ln  I s  d iv ided  in to  sect ions .One mLISt g ive  the  ln i t la l  s ta i r  o f  the  automaton .Others  g ive  the  de f in i t ion  o f  a t t  r !butes  andthe i r  le l t ta l l sa t lon .Other  opt iona l  sec t ions  de f ine  c~n~l~lons ,a?t.
JQDs and LU leA  wh ich  can be re fer red  to  bythe i r  names in  the  bund les .The o ther  sect lons  g lve  the  bund les  exp l tc l te ly .I I I~_ IM@LEMENTAj IONIn order-  to  fac l  11 l a te  prograrrlYH ng in LT ,  anenv i ronment  fo r  th i s  language was wr i t ten  tnP ro log -Cr  I ss <PROLOG85> :The manager  a l lows  the  man ipu la t ion  o f  LTprograms.
The usua~ funct ions  o f  an in teract iveenv i ronment  (PROI_OG, APL) a re  de f ined:  load ing ,sav ing ,  ed i t ing ,  l t s t tng  .
.
.
.The compi le r  was Imp lemented  w i th  use  o f  agenerator  Of  aoa lyser  s insp i red  f rom METAL<METAL82>, but  less  power fu l .The In terpreter  I s  a mock-up  in  P ro log  wh ichworks  on the  abst rac t  t rees  resu l t ing  f romcom#t la t  ion .The user  must spec i fy  the  f i l es  wbtch  w i l l  bethe  input  and output  tapes ,  and the  LT program tobe in terpreted .
In teract ive  t races  are  poss ib le .The des ign  o f  a Pasca l  vers ion  o f  theIn terpreter  in  o rder  to  inc rease  the  ra te  o fexecut ion  i s  cur rent ly  in  work .IV.
APPLICATIONS!~EX~MPL# OF.
EBO~BA~To I l lus t ra te  the  syntax  o f  LT ,  we g lve  a b lece  o fthe  program fo r  the  ana lys i s  Of AnBnCn on the  nextpage .403+ .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Il e ta t  in i t ia l  <read_AB> .Il var iab les!
las tchar  : (A ,  B, C, EOL) .
- -  l as t  character  read!I * *  Read ing  AnBn,  read ing  a l te rnat ive ly  A and B undert the  cur rent  and the  fo rward  heads  respect ive ly .Ide  <read  AB> a <read  AB> v ia1 'A '  / l as tchar  = B == / \ ]as tchar  := A .f?
'B '  / l as tchar  = A == / las tchar  := B .lde  <read  AB> a <read  BC> v laI?
'C '  / l as tchar  = A == / las tchar  := C .lde  <read  AB> a <fa i l>  v ia!
/ ~astchar  = B == ' ***  Re jec ted  s t r ing . '
ee l  .I - -  I f  not  A1?
/ l as tchar  = A == ' ***  Re jec ted  s t r ing . '
eo l  .I - -  I f  ne i ther  B nor  CI1,*  Read lng  o f  BnCn : same pr lnc lp le  as fo r  AnBn.!
.
.
.!
!~*  F ina l  sec t ion  fo r  the  ana lys i s .Ide  <read  C> a <success> v iaI 'C '  / l as tchar  = EOL == ' ***  Va l ld  s t r ing . '
eo l  .Ide  <read  C> a <fa i l>  v iaI == ' ***  Character  C miss ing . '
eo l  .+ .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.2.
TRA~SCRIPT IONS_FOR D IACRIT ICS  LETTERSThere  ex is ts  in  F rench  a lo t  o f  d iacr i t i cs  andaccents .
In  the  f rame o f  Eurot ra ,  a t ranscr lp t lon  fo rthe  d iacr i t i cs  was proposed .
14ere ts  a text  in  theEurot ra  Shor t  T ranscr ip t ion  and i t s  respond ing  fo rm Inthe  ac tua l  F rench  or thograph.
The passage  between thetwo fo rms was per fo rmed by a LT program.+ .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.!
Un cer ta in  Mopt f lo ry  (1533) ,  puts  l ' Impr lmeurI E t ienne  OGler  (out  Pub i la  en 1540 De la  Punctuat ion!
de la  Langue F ranc lSoyse ,  b lus  des  accents  d 'yce l ie! )
l ' employe l2rent  notarament pour  marouer  la chuteI d 'un  e & l ' In te l l r teur  d 'un  mot : v ra l l3ment ,I pat l3na ,  e tc .I (Gre l lv tsse ,  Le Ben Usage)  + .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
+Un cer ta in  Mont f lo ry  (1533) ,  pu ls  l ' lmpr imeur  IEt ienne  Do le t  (qu l  Pub l la  en 1540 De la  Punctuat ion  !de la  Langue F ranooyse ,  p lus  des  aeoents  d 'yce l le  ) !l ' employ~rent  notamment  pour  marquer  la  chute  d 'un  Ie & l ' ln t~r ieur  d 'un  mot : v ra~ment ,  basra ,  e tc .
I(Gr~vtsse ,  Le 8on Usage)  I. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
+3~ PHYSICAL A N_~_GICAL  PROCESSING OF TEXTS_The use  o# the  LT language is not  l im i ted  to  thet ranscr lb t lons ;  one o f  I t s  in teres t ing  features ,  andnot  the  leas t  one ,  i s  that  phys ica l  and log ica lp rocess ing  o f  texts  coutd  be.
car r ied  out  w i th  I t s  he lp .+ .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
+l .
sp  2 fl .us on fIAvant -dernter  exemple :  I + .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
+In  the  prev ious  text ,  the  f i r s t  two l lnes  cor respondto  fo rmat t ing  commands o f  SCRIBERE (a  text  fo rmat t ingso f tware  deve lopped at  GETA and based  on SCRIPT,  an IBMtext  fo rmat t ing  so f tware ,  <SCRIBERE85>) Transducershave  been wr i t ten  wh ich  re f lec t  tab les  o?
ln fo rmat ionsabout  punctuat ion ,  fo rmat t ing  commands and s t ruc tura lseparators .
Here  I s  the  resu l t  o f  the  app l i ca t ion  o fthe  sequence  o f  those  t ransducers  wr i t ten  In  LT on thefa l low lng  text .404l .Sp 2 : type=format , fo rmat=paragraph , leve l= l , s ta r t=no l1.US on : tYbe=format , fo rmat=beg_under l t , l eve l=7,  tI s ta r t=yes ,ov i=endunder l l  lIAvantI -  : l eve l=9,s tar t=no,content=hyphen !fdernter  !fexemple  II: : teve l=3,s tar t=no,conteot=co lon  !CONCLUSIONThe language L I  de f ined  and imp lemented  as above  wastes ted  on var ious  examples :passages  f rom t ranscr ip t ions  to  o thers  (Russ ian ,Tha i ,  Greek ,  .
.
. )
;- l og ica l  and phys lca l  p rocess ing  o f  texts ;ana lys i s  o f  the  context  dependent  languageAnBnCn.Though we In tent iona l ly  l im i ted  the  syntax  o f  LT andfo rced  non-determin ism In  the  ln terpretat lon  to  f i t  ourpurpose ,  the  power  o f  th l s  language seems to  be ra thersu f f i c ient  fo r  the  app l i ca t ions  i t  is sbec ia l l sed  In .REFERENCE~<AHO,UL72> AHQ A l f red  V .
,  ULLMAN Je f f rey  D.The Theor~ o f  Pars ln~L,  T rans la t lqn  aod_C~Ul~qPrent ice  Hal l  ser ies  in Automat ic  Computat ion ,1972.<BOITET83> BOITET Chr i s t ianConve0_L!pEIs de_$&ansc?
j#~ toD~puE A~ sa is !A  e t  pour '\]La r~v ls lon  de textes  ~LL~ Ar i#De-78Do cu~eetat tpn~_~st~m@ r usse~fran~als  ver~!~RUB-FRBRappor t  DRET n ?
41 ,  GETA, Grenob le ,  d~cembre  1983.<CHAUCHE74> CHAUCHE JacquesTr~Es~uct~M~& ~oresc~e~E~des  e~ r6a l l&at lon  de Sys~es~l tqu~s auxgr_Ammaire& t rADsforma$~onne l \ ]~sTh6se  d 'E ta t ,  Grenob le ,  d~cembre  1974.<DSEI> BOITET Chr i s t ian ,  ed i to rLe o1~&q_~DJ~s&r Ar l aoe -~ d 6 ~ 9 8 2(Vo lume 1, Par t le  1 : l e  logtc le l )  avr l l  1982Convent ion  ADI n ?
81 /423Cab Soget l  Log ic le l  - GETA-Champol l ion<ETS5> LEPAGE Yves ,  VAUQUOIS Pht l lppeLO~L!#J~I a~d~.
!c~Q&ess i r~ o f  textsEurot ra  cont rac t  ETS5,  Par t  BIn termed ia te  repor t  number 2,  September  1985<KAIN72> KAIN R ichard  Y.~oma~L~_Theor j~:  MAc l l i oe~and L ~Mac Gnaw-H i l l  Computer  sc ience-ser ies  1972<LT85> LEPAGE YvesL ~ n  lan~gAgA_~D~c\ [Nc~on~a~e\ ]u~sa leNrIn terna l  document ,  GEFA, September  1985<METAL82> MELESE Ber t randMETAL n lan  a e d ~ p ~ a t t o n  Dour  le  sys t~mAM# N_ZO_RT .S .
I .
vo l .1 ,  n?4 ,  1982,  pp 275-285<MENGA84> MENGA Dan ie l@g_ag&~EaDsduct_ j ID~LTRappor t  de t ro l s l~me ann ie  ENSIMAG, Ju in  1984<PROLOG85> CRISS-Untvers t t6  I IPR L ~ E S & ~ &  ex~LeDslon CLqL lan#a~e Prolo_~qCRISS-Un lvers I t~ I I  Grenob le ,  Ju l l l e t  1985<SCRIBERE85> 8ACHLIT Dan ie l ,  VERASTEGUI Ne lsonSCRIBEREIn terna l  document ,  GETA, Apr l l  1985
