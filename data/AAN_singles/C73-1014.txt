G/JNEY G6NENgUNIQUE DECIPHEKABILITY OF CODESWITH CONSTRAINTSWITH APPLICATION TO SYLLABIFICATIONOF TURKISH WORDS1.
INTRODUCTIONInformation lossless automata were first studied by D. A. HUFFMAN(1959).
Huffman also devised tests for information losslessness (IL) andinformation losslessness of finite order (ILF).
By treating finite Statemachines as encoders and decoders, the tests for IL and ILF can be ap-plied to coding theory.
This is done by S. EV~.N (1962, 1963, 1965)who devised testing methods for unique decipherability (UD) andunique decipherability of finite delay (UDF), concepts hown to beparallel to IL and ILF.In this paper, tests for UD and UDF for codes with constraints areinvestigated.
The basis of the proposed method is Even's procedure.The constraints are of the form " code word X never follows codeword Y" for specific ordered pairs (X, Y) of code words.The need for testing UD and UDF for codes with constraints orig-inally arised in the syllabification prob\]em for Turkish words.
Theproblem is, essentially, to find an algorithm for syllabification of wordsfor a given printed Turkish text.
The construction of syllables in Turk-ish language is very regular and hence it is not difficult to find suchalgorithms intuitively, by trial and error.
By a thorough analysis ofthe UD and UDF properties of printed word - syllable structure con-version, it is also possible to investigate he effects of the flood of for-eign (mostly French) words on the syllable structure of Turkish.In part 2 some basic definitions are given.
In part 3 Even's proce-dure for testing UD and UDF is discussed briefly.
The test for codeswith constraints i presented in part 4.
Finally, in part 5, applicationson Turkish syllable structure are discussed briefly.184 GUNEY GONEN~2.
NOTATION AND BASIC DEFINITIONS tSource symbols will be shown by capital etters A, B, ..... L, W, X,Y, Z.
Code symbols will be shown by 0 and 1.
A concatenation f afinite number of code symbols is called a code word.
A code consists ofa finite number of code words of fmite length, each representing asource symbol.
A coded message is obtained by concatenating code words,without spacing or any other punctuation.
Variable-length codes inwhich code words are not necessarily of the same length, will only beconsidered.A code is said to be uniquely decipherable if and only if every codedmessage can be decomposed into a sequence of code words in onlyone way.
A code is said to be uniquely decipherable offinite delay N ifand only if N is the least integer, so that the knowledge of the first Nsymbols of the coded message suffices to determine its first code word.3.
TESTS FOR UD AND UDPBy treating finite state machines as encoders and decoders, tests forUD and UDF can be converted into tests for IL and ILF (S. EVEN, 1965;Z. KOHAVr, 1970).
Without going into tests for IL and ILF, we shallgive Even's testing procedure for UD and UDF here.
At the same timewe shall demonstrate the procedure on a binary code T which consistsof 4 code words:A=O,  B=IO,  C=01,  and D=101.
~Procedure 1.(!
a) Insert aseparation symbol S at the beginning and end of eacl~ Code wordin the code.
.
.
.
.
.
(lb) Let code word X be of length n. Insert he separation Symbol Xi be-tween i-th and (i + 1)-th symbol of Code word X for 1 ~ i ~ n-1.
Do1 Basic definitions in parts 2 and 3 follows Z. KOHAW (1970).I f  0 denotes vocal and I denotes consonant, hen A, B, C, and D are four of the12 syllable types of Turkish.UNIQUE DECIPHERABILITY OF CODES WITH CONSTRAINTS 185this for all code words for which n ~> 2.
For example, after steps (la)and (lb), D = 101 becomes D = S1DIODzlS.
(lc) The separation symbol to the right of the code symbol t is called thet-successor f the separation symbol to the left of the same code symbol.For example, D 1 is the 1-successor f S, D2 is the 0-successor f D1, andS is the 1-successor lD2, in code word D.Two separation symbols are said to be compatible if(I) They are t-successors of S, for some code symbol t, or,(II) They are t-successors of two separation symbols which are them-selves compatibles.I f  (WX) is a compatible pair, and if Y and Z are t-successors of W andX, respectively, then the compatible pair (YZ) is said to be implied by(WX) under t.Construct a testing table as follows: the column headings are the codesymbols.
The first row heading is S. The entries in the first row arecompatible pairs found by (I) above, under corresponding column t.The other row headings are the compatible pairs.
The entries in row(WX), column t, are the compatible pairs implied by (WX) under t.The testing table for code T is shown in fig.
1.code TA: 0 .
.
.
.
.B: 10C:I O1 -D: 101A: SOSB: S1B~OSC: SOGlSD: S1DtOD, IS0s (SC,)SGB,D, (SD,)sB, (sc,) (ss)SD, (C,D,) (SD,)SD,C~D,1(B ol)(sn,) (so,)(sn,) (SD )(ss)Fig.
1.
Code T(ld) If the tabl e contains pai r  (SS) then the code is not UD, otherwise it isLID.
Since there are (SS) pairs in the testing table for code T, it is notLID.
By tracing back the compatibles, tarting from a (SS) pair, onecan arrive the symbo| S (possibly through several paths).The sequence of code symbols corresponding to this traceback pathgives an ambiguous message.
In fig.
2 some of these ambiguous mes-sages are shown for code T.186S ?.-~SC ~----SB ?--~-.SSS?
SC, ~-2-SO,?
C,D, ~----SSS ~-L-B,O,?SD,2--SB, ?---SSS1.-~B1Dl ?-~SD21.-~SDl ?-LC1D~ l--~-SSGONEY G6NEN~010 = AB or CA0101 = AD or CC1010 = BB or DA10101 = BD or DCFig.
2.
Some ambiguous messages in code T(le) If no (SS) pair is generated, then a testing raph is constructed from thetable as follows: corresponding to every row in the table there is a vertexin the graph.
If (YZ) is implied by (WX) under t, then a directed arclabeled t leads from vertex (WX) to vertex (YZ) in the graph.
(1./') A code is uniquely decipherable of finite delay N if and only if its test-ing graph is loop-free.
If the graph is loop-free and the length of thelongest path in the graph is r, then N = r + 1.4.
CONSTRAINTS ON CODE WORD OCCURRENCESIn the above discussion, there was no constraint whatsoever regard-ing the occurrence of any code word at any point of  the message.
Onthe other hand there may be such a case that, for some specific code,the code word X never follows the code word Y.
These constraintsmay arise from the physical nature of  the encoder (for example no letterother than u can follow letter q in an English text) or may be deliberat-ely imposed upon a code to achieve LID or UDF properties.The constraints of the fo rm"  code word X never follows code wordY" will be termed a first-order constraint.
For the codes with first orderconstraints, a testing procedure is given below:Procedure 2.
(2a) Insert a separation symbol Px at the beginning and a separation symbolQx at the end of each code word X in the code.
(2b) Insert separation symbols X~ as in (lb).
For example after steps (2a)and (2b), D = 101 becomes PnlDlOD21QD.
(2c) Let a number e(X, Y) be defined for every ordered pair of code words(X, Y) in the following way:UNIQUE DECIPHERABILITY OF CODES WITH CONSTRAINTS 187re(X, 1,')= 1 if the code word X is allowed to occur immediatelyafter the code word Y,-- 0 otherwise.A constraint matrix M in which there is one row and one column foreach Code word can be defined such that the element of M in the rowX, column Y is re(X, Y).For example, consider code T of part 3.
Let the following four con-straints be imposed on this code: A never follows C,.
C never followsC, A never follows D, and C never follows D. These four constraintscan also be expressed as " a code word starting with a 0 never followsa code word ending with a 1 ".
The resulting code, called code \[7, andits constraint matrix is shown in fig.
3.code UA: 0 PB: 10 QAC,C: O1B~D~D: 101Qc B`A: Pa0Qa QGDaB: PB1Bt0QB QBDaC: Pc0G11QcQDBx D: PD1D, ODalQDQDD~0(QAC1)(q~D.
)J(BIDI)(QcB,) (QcD,)(QDB,) (QDDa)ABCDB !
1M=C 1 0D 1 1Fig.
3.
Code U(2d) The separation symbol to the right of the code symbol t is called thet-successor f the separation symbol to the left of the same code symbol.Furthermore, a separation symbol X~ (Qx) is the t-successor of the sep-aration symbol Qv if X} (Qx) is a t-successor of Px and re(X, Y) = 1.Two separation symbols are said to be compatible if(I) They are t-successors of Px and Pr  for some t, X, and Y, or188 CONEY GONEN~(II) They are t-successors?of two separation symbols which are them-selves compatible.Construct he testing table as in (lc), with the change: the first rowheading is P. The testing table for code U is shown in fig.
3.
(2e) If the table contains any pair (QxQy) for some X and Y (possibly iden-tical), then the code is not UD.
Otherwise it is UD.
For example it isseen from fig.
3 that code U is UD.
If the code is not UD, then a trace-back of compatibles which implied a pair (QxQY) gives an ambiguousmessage.
(2e) If the code is UD, then one can construct the testing graph as in (le).The testing graph for code U is shown in fig.
4.Fig.
4.
Testing raph for code UThe longest path in this graph has length 3.
Hence the code is UDF oforder 4; in other words the knowledge of the first 4 code symbols uf-fices to determine the first code word, but 3 is not sufficient.
To demon-strate that the knowledge of the first 3 code symbols is not sufficient,consider apath of length 3 in the graph, for example the path 101 fromP to QnD1.
When we receive 101 we can not decide whether this isword D, or word B (= 10) occurred and a word D (----- 101) has juststarted (the last vertex QnD1 actually points to this ambiguity).
But,if the fourth .symbol received is a 0 we can now decide that the firstcode word was B, andif  the fourth symbol isa 1 we decide that thefirst code word was D.There may be other types of constraints present on the code.
A con-straint of the form " code word X never follows YZ ", where Y andUNIQUE DECIPHERABILITY OF CODES WITH CONSTRAINTS 189Z are distinct, will be termed a second order constraint.
If there existssuch a constraint, hen it can be converted into the following first orderconstraints: create a new code word ;~, identical in structure to Z. Thenimpose the constraints "X  never follows Z, Z never follows Y"  (forsimplification purposes one can impose the additional constraints:" Z, never follows Z,, X, or Z ").
Higher order constraints can be han-dled similarly.5.
SYLLABLE STRUCTURE OF TURKISH LANGUAGEIn Turkish language there are 12 syllable types.
These are shownin Table 1.TABLE 1.SYLLABLE TYPES OF TURKISH LANGUAGE(0 denotes vowel, 1 denotes consonant)Symbol Structure ExampleA 0 a~lk (open)B 10 baba (father)C 01 ekmek (bread)D 101 altm (gold)E 011 erk (power)F 1011 tiirk (turkish)G 110 kraliqe (queen)H 1101 kontrol (control)I 1110 strateji (strategy)J 11101 stronsiyum (strontium)K 11011 tren~kot (trench coat)L 10111 kontrbas (cello)The first six syllable types (types A-F) are syllable types of properTurkish language.
The remaining six types (types G-L) came intoTurkish with foreign borrowings.
These are somewhat characterizedby consonant clusters, which are totally alien to the language.
In spok-en language, especially as spoken by not-well-educated people, theseclusters are simplified by the addition of a vowel before or within the190 GUNEY G6NEN~cluster, thereby increasing the number of syllables in the word (G. L.LEwis, 1967).
Since our main concern is printed texts we shall not dealwith these and other aspects of the spoken language.The treatment of printed Turkish words as messages encoded intoa code in which syllables are code words and letters are code symbolsenables us to syllabify printed texts automatically.
This is importantbecause of the following reasons:1) Automatic syllabification makes it possible to recognizeand count (mainly for statistical purposes) syllable types and/or syllablesfrom texts read into the computer without any syllable separationmarkers.2) Automatic syllabification is necessary in automatic type-setting, without automatic syllabification words to be separated atline ends can not be properly syllabified.3) Automatic syllabification gives insight into the syllablestructure, its deformation under some effects, and the relation betweenspoken and printed .language, thereby helping linguists working onthe subject.The first six syllable types a without any constraints obviously forma non-UD code.
For example a word 0110 can be decoded as 01.10(CB) or as 011.0 (EA).
On the other hand the phonetic rules of the lan-guage put some constraints as to which syllable type can not follow agiven syllable type.
The set of constraints inherent in the language canbe summarized as "each vowel takes the first consonant before it intoits syllable " (T. BANGUO~Ltl, 1959).
In our notation, the constraintset can be summarized as "no syllable starting with a vowel (0) canfollow a syllable ending with a consonant (1) ".
The constraint matrixcorresponding to this set is shown below.ABCDEFA BC D EF-1 1 0 0 0 0 -1 1 1 1 1 11 1 0 0 0 01 1 1 1 1 11 1 0 0 0 01 1 1 1 1 13 Turkish alphabet consists of  eight vowels (a, e, z, i, o,//, u, //) and 21 consonants(b, c, ~, d,f, g, ~, h, .i, k, l, m, n, p, r, s, .s, t, v, y, z).
Only one vowel can be presentin any syllable.
There are no diphtongs in Turkish.UNIQUE DECIPHERABILITY OF CODES WITH CONSTRAINTS 191Now, by constructing the testing table and graph, it can be shownthatthis code is UDF of order 5.
4 This simply means that there is analgorithm, to syllabify any proper Turkish word which operates in thefollowing manner:1) The only information required about the characters in thetext is about their being vowel, consonant or "other " (such as blank,comma, numeral etc.
).2) When a word is being scanned, its first syllable will bedecided upon atthe fifth character of the word or before.
Since the codeis UD the decision process is completed when the word ends (i.e.
uponfirst blank).The introduction of the syllable types G, H, ..., L of Table 1 into thelanguage causes the "invention" of new constraints.
These are notyet thoroughly investigated or explained.
One set of constraints can besummarized as: "no syllable starting with two or more consonants canfollow a syllable ending with a vowel ".5 With the addition of this setof contraints, the constraint matrix becomesABCDEFGHIJKLA B C D E F G H I J K L-1  1 0 0 0 0 1 0 1 0 0 0 -1 1 1 1 1 1 1 1 1 1 1 11 1 0 0 0 0 1 0 1 0 0 01 1 1 1 1 1 1 1 1 1 1 11 1 0 0 0 0 1 0 1 0 0 01 1 1 1 1 1 1 1 1 1 1 10 0 1 1 1 1 0 1 0 1 1 10 0 1 1 1 1 0 1 0 1 1 10 0 1 1 1 1 0 1 0 1 1 10 0 1 1 1 1 0 1 0 1 1 10 0 1 1 1 1 0 1 0 1 1 11 1 1 1 1 1 1 1 1 1 1 1' It is also interesting to note that the first order constraints to make the code A, B,.
.
.
.
F uniquely decipherable of  finite delay are found to be precisely those constraintsinherent in the language.No mention of this kind of constraint is found in the literature.
This rule, and theone given before must clearly be the result of the shape of vocal organs.
We should alsomention that no exception at all to these two rules exists.192 GUNEY GSNEN~The code thus generated can be shown to be still non-UD.
Sometypical ambiguities concerning the existing words are shown below:Message Ambiguous(word) syllabification Examples01110 CG 01.110 em.pri.me, is.pri.fiz.maEB 011.10 ens.ti.ti~, esk.ka.va.tSr101110 DG 101.110 kon.gre, kom.pra.dorFB 1011.10 fark.h, kiirk4ii011101 CH 01.1101 mtran.ca, ak.trisED 011.101 eks.per1011101 DH 101.1101 kan.gren, kon.tratFD 1011.101 tabl.dot, teks.tilA careful and thorough search (through all borrowings in the lan-guage) revealed one fact: if we increase the code symbols from two(vowel, consonant) to three (v ----- vowel, r-----letter " r  ", ~ = conso-~nant other than " r  ") then the resulting code becomes UD, and act-ually UDF of delay 7 for all existing foreign (and of course all native)words.
The examples given above hints this.
Simply note that the wordsin the upper line in each set have an r as the second letter of secondsyllable, whereas a letter other than r appears at the same position of theword, for words of the lower lines, e.g.
emprime and enistitii.Finally, with these considerations an algorithm for tlae syllabificat-ion is programmed (in rOX~TaAN).
This algorithm is based on thestate-table of the inverse of the finite state machine which is taken asthe encoder device 4,7.
The input to the program is a printed text, theoutput is the same text (numerals etc.
skipped), all the words beingsyllabified.
There are minor additions to the program.
For exampleunsyllabifiable words (due to punching errors, etc.)
are printed out asthey are, but in brackets.
The program is run on mM 360/40.
An exampleof input data and corresponding printouts are shown in fig.
5.UNIQUE DECIPHERABILITY OF CODES WITH CONSTRAINTS 193HECE AYIRMA PROGRAMI GELENEK AKARYAKIT UYGULAMAHE*CE A*YIR*MA PROG*RA*MI GE*LE*NEK A*KAR*YA*KIT UY*GU*LA*MATORTU KONGRE KORKAK KANGREN TABLDOT KONTRAT TANJANTTOR*TU KON*GRE KOR*KAK KAN*GREN TABL*DOT KON*TRAT TAN*JANTSTEREOSKOP AHMET RIZA O STRC BB ANISTE*RE*OS*KOP AH*MET RI*ZA O (STRC) CBB) A*NI.
.
-  .
, 'EMPRIME ENSTITU EKSPER ISTRANCA ISTRONGILOs ISFENKSEM*PRI*ME ENS*TI*TU EKS*PER IS*TRAN*CA IS*TRON*GI*LOS IS*FENKSFBRKET CKANDIRMACAI .12/MAYIS/1971 GUSULHANECFBRKETJ KAN*DIR*MA*CA MA*YIS GU*SUL*HA*NESAAT TATAR AMFITEATR TELEKS KREOZOT FLAMA FLUORSA*AT TA*TAR AM*FI*TE*ATR TE*LEKS KRE*O*ZOT FLA*MA FLU*ORAERODINAMIK AIT ARAP AORT AVURT ARKEOLOG BABAA*E*RO*DI*NA*MIK A*IT A-RAP A*ORT A*VURT AR*KE*O*LOG BA*BATRAHOM FREKANS STRATEJI STRATOSFER ARTITRA*HOM FRE*KANS STRA*TE*JI STRA*TOS*FER AR*TIKONTRAST EKSKAVATOR ENSTITUKON*TRAST EKS*KA*VA*TOR ENS*TI*TUFig.
5.
Computer printouts of the syllabification program.
In each set of two lines, the upper linethe input data, the lower line is the output.13REFERENCEST.
BANGUOC, LU, Tiirk Grameri-Ses Bilgisi,Ankara, 1959.S.
Evmq, Generalized Automata nd TheirInformation LossIessness, in SwitchingCircuit Theory and Logical Design,AIEE Special Publication, S-141, 1962,pp.
144-147.S.
Ev~, Tests for Unique Decipherabitity,in,  IEEE Trans.
Information Theory ~,vol.
IT-9 (April 1963), pp.
109-112.S.
EVEN, On Information Lossless Automataof Finite Order, in ~ IEEE Trans.
Elec.Comp.
~, vol.
EC-14 (August 1965),pp.
561-569.D.
A. HUFFMAN, Canonical Forms forInformation Lossless Finite State Ma-chines, in ~ IR.E Trans.
Circuit Theory ~,vol.
CT-6, Special Supplement (May1959), pp.
41-59.G.
L. Lmwls, Turkish Grammar, London,1967.Z.
KO~L~W, Switching and Finite AutomataTheory, New York, 1970.
