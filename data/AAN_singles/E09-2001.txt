Proceedings of the EACL 2009 Demonstrations Session, pages 1?4,Athens, Greece, 3 April 2009. c?2009 Association for Computational LinguisticsFrolog: an accommodating text-adventure gameLuciana BenottiTALARIS Team - LORIA (Universite?
Henri Poincare?, INRIA)BP 239, 54506 Vandoeuvre-le`s-Nancy, FranceLuciana.Benotti@loria.frAbstractFrolog is a text-adventure game whose goalis to serve as a laboratory for testing prag-matic theories of accommodation.
Tothis end, rather than implementing ad-hocmechanisms for each task that is neces-sary in such a conversational agent, Frologintegrates recently developed tools fromcomputational linguistics, theorem prov-ing and artificial intelligence planning.1 IntroductionIf we take a dialogue perspective on Lewis?
(1979)notion of accommodation and assume that thestate of a dialogue is changed by the acts per-formed by the dialogue participants, it is natural tointerpret Lewis?
broad notion of accommodationas tacit (or implicit) dialogue acts.
This is the ap-proach adopted by Kreutel and Matheson (2003)who formalize the treatment of tacit dialogue actsin the information state update framework.
Ac-cording to them, accommodation is ruled by thefollowing principle:Context Accommodation (CA): For any move mthat ocurrs in a given scenario sci: if assignmentof a context-dependent interpretation to m in scifails, try to accommodate sci to a new contextsci+1 in an appropriate way by assuming implicitdialogue acts performed in m, and start interpre-tation of m again in sci+1.The authors concentrate on the treatment of im-plicit acceptance acts but suggest that the CA prin-ciple can be seen as a general means of context-dependent interpretation.
This principle opens upthe question of how to find the appropriate tacit di-alogue acts.
Finding them is an inference problemthat is addressed using special-purpose algorithmsin (Thomason et al, 2006), where the authorspresent a unified architecture for both context-dependent interpretation and context-dependentgeneration.
In Frolog, we investigate how this in-ference process can be implemented using recenttools from artificial intelligence planning.The resulting framework naturally lends itselfto studying the pressing problem for current the-ories of accommodation called missing accommo-dation (Beaver and Zeevat, 2007).
These theoriescan neither explain why accommodation is some-times easier and sometimes much more difficult,nor how cases of missing accommodation relate toclarification subdialogues in conversation.
We re-view what Frolog has to offer to the understandingof accommodation in general and missing accom-modation in particular in Section 3.
But first, wehave to introduce Frolog and describe its compo-nents, and we do so in Section 2.2 The text-adventure gameText-adventures are computer games that simulatea physical environment which can be manipulatedby means of natural language requests.
The gameprovides feedback in the form of natural languagedescriptions of the game world and of the resultsof the players?
actions.Frolog is based on a previous text-adventurecalled FrOz (Koller et al, 2004) and its designis depicted in Figure 1.
The architecture is or-ganized in three natural language understanding(NLU) modules and three natural language gener-ation (NLG) modules, and the state of the interac-tion is represented in two knowledge bases (KBs).The two KBs codify, in Description Logic (Baaderet al, 2003), assertions and concepts relevant for agiven game scenario.
The game KB represents thetrue state of the game world, while the player KBkeeps track of the player?s beliefs about the gameworld.
Frolog?s modules are scenario-independent;the player can play different game scenarios byplugging in the different information resourcesthat constitute the scenario.Frolog uses generic external tools for the mostheavy-loaded tasks (depicted in grey in Figure 1);1Open the chestGrammarandLexiconsParsingReferenceResolutionKB ManagerPlayer KBGame KBActionExecutionAccommodationActionDatabaseContentDeterminationReferenceGenerationRealizationThe chest is openFigure 1: Architecture of Frolognamely, a generic parser and a generic realizerfor parsing and realization, an automated theoremprover for knowledge base management, and ar-tificial intelligence planners for implementing itsaccommodating capabilities.
The rest of the mod-ules (depicted in white) were implemented by usin Prolog and Java.
Frolog?s interface shows the in-teraction with the player, the input/output of eachmodule and the content of the KBs.We now present Frolog?s modules in pairs of anNLU module and its NLG counterpart; each pairuses a particular kind of information resource andhas analogous input/output.2.1 Parsing and RealizationThe parsing and the realization modules use thesame linguistic resources, namely a reversiblegrammar, a lemma lexicon and a morphologicallexicon represented in the XMG grammatical for-malism (Crabbe?
and Duchier, 2004).
The XMGgrammar used specifies a Tree Adjoining Gram-mar (TAG) of around 500 trees and integrates asemantic dimension a` la (Gardent, 2008).
An ex-ample of the semantics associated with the playerinput ?open the chest?
is depicted in Figure 2.NP?A = youSNP?
VP NP?Vopen Nopen(E) chestagent (E,A) chest(C)patient(E,C)NPthe NP*det(C)?
?open(E), agent(E,you), patient(E,C), chest(C), det(C)Figure 2: Parsing/realization for ?open the chest?The parsing module performs the syntacticanalysis of a command issued by the player, andconstructs its semantic representation using theTAG parser Tulipa (Kallmeyer et al, 2008) (illus-trated in the Figure 2 by ?).
The realization mod-ule works in the opposite direction, verbalizing theresults of the execution of the command from thesemantic representation using the TAG surface re-alizer GenI (Gardent and Kow, 2007) (illustratedin the Figure 2 by ?
).2.2 Reference Resolution and ReferenceGenerationThe reference resolution (RR) module is respon-sible for mapping the semantic representations ofdefinite and indefinite noun phrases and pronounsto individuals in the knowledge bases (illustratedin Figure 3 by ?).
The reference generation (RG)module performs the inverse task, that is it gener-ates the semantic representation of a noun phrasethat uniquely identifies an individual in the knowl-edge bases (illustrated in the Figure 3 by ?).
Thealgorithms used for RR and RG are describedin (Koller et al, 2004).det(C), chest(C), little(C), has-location(C,T), table(T)?
?littlechesttablelittlechestbigchesthas-locationhas-locationFigure 3: RR/RG for ?the little chest on the table?Frolog uses the theorem proverRACER (Haarslev and Mo?ller, 2001) to querythe KBs and perform RR and RG.
In order tomanage the ambiguity of referring expressionstwo levels of saliency are considered.
The playerKB is queried (instead of the game KB) naturallycapturing the fact that the player will not refer toindividuals he doesn?t know about (even if theyexist in the game KB).
Among the objects that theplayer already knows, a second level of saliency ismodelled employing a simple stack of discoursereferents which keeps track of the most recentlyreferred individuals.
A new individual gets intothe player KB when the player explores the world.22.3 Action Execution and ContentDeterminationThese two last modules share the last informationresource that constitute an scenario, namely, theaction database.
The action database includes thedefinitions of the actions that can be executed bythe player (such as take or open).
Each action isspecified as a STRIPS-like operator (Fikes et al,1972) detailing its arguments, preconditions andeffects as illustrated below.
The arguments showthe thematic roles of the verb (for instance, theverb open requires a patient and an agent), the pre-conditions indicate the conditions that the gameworld must satisfy so that the action can be exe-cuted (for instance, in order to open the chest, ithas to be accessible, unlocked and closed); the ef-fects determine how the action changes the gameworld when it is executed (after opening the chest,it will be open).action: open(E) agent(E,A) patient(E,P)preconditions: accessible(P), not(locked(P)), closed(P)effects: opened(P)Executing a player?s command amounts to ver-ifying whether the preconditions of the actions in-volved by the command hold in the game worldand, if they do, changing the game KB accordingto the effects.
After the command is executed, thecontent determination module constructs the se-mantic representation of the effects that were ap-plied, updates the player KB with it and passes itto the next module for its verbalization (so that theplayer knows what changed in the world).
For ourrunning example the following modules will ver-balize ?the chest is open?
closing a complete cycleof the system as illustrated in Figure 1.If a precondition of an action does not hold thenFrolog tries to accommodate as we will explain infollowing section.3 Accommodation in FrologIn the previous section we presented the execu-tion of the system when everything ?goes well?,that is (to come back to the terminology usedin Section 1) when the assignment of a context-dependent interpretation to the player?s move suc-ceeds.
However, during the interaction with Frolog,it often happens that the player issues a commandthat cannot be directly executed in the current stateof the game but needs accommodation or clarifica-tion.
This is the topic of the next two subsections.3.1 Tacit acts are inferable and executable:accommodation succeedsSuppose that the player has just locked the littlechest and left its key on the table when she real-izes that she forgot to take the sword from it, soshe utters ?open the chest?.
If Frolog is in its non-accommodating mode then it answers ?the chestis locked?
because the precondition not(locked(P))does not hold in the game world.
In this mode, theinteractions with the game can get quite long andrepetitive as illustrated below.Non-accommodating mode Accommodating modeP: open the chest P: open the chestF: the chest is locked F: the chest is openP: unlock itF: you don?t have the key...In its accommodating mode, Frolog tries to ac-commodate the current state sci of the game to anew state sci+1 in which the precondition hold, byassuming tacit dialogue acts performed, and startsthe interpretation of the command again in sci+1.That is, the game assumes that ?take the key andunlock the chest with it?
are tacit acts that are per-formed when the player says ?open the chest?.The inference of such tacit dialogue acts is doneusing artificial intelligence planners.
The planningproblems are generated on the fly during a gameeach time a precondition does not hold; the ini-tial state being the player KB, the goal being theprecondition that failed, and the action schemasthose actions available in the action database.
Thesize of the plans can be configured, when thelength is zero we say that Frolog is in its non-accommodating mode.
For detailed discussionof the subtleties involved in the kind of infor-mation that has to be used to infer the tacit actssee (Benotti, 2007).Two planners have been integrated in Frolog(the player can decide which one to use): Black-box (Kautz and Selman, 1999) which is fastand deterministic and PKS (Petrick and Bacchus,2004) which can reason over non-deterministicactions.
For detailed discussion and examplesincluding non-deterministic actions see (Benotti,2008).3.2 Accommodation fails: clarification startsTacit acts are inferred using the information avail-able to the player (the player KB) but their exe-cution is verified with respect to the accurate andcomplete state of the world (the game KB).
So3Frolog distinguishes three ways in which accom-modation can fail: there is no plan, there is morethan one plan, or there is a plan which is not ex-ecutable in the game world.
For reasons of spacewe will only illustrate the last case here.Suppose that the golden key, which was lyingon the table, was taken by a thief without theplayer knowing.
As a consequence, the key is onthe table in the player KB, but in the game KBthe thief has it.
In this situation, the player issuesthe command ?Open the chest?
and the sequenceof tacit acts inferred (given the player beliefs) is?take the key from the table and unlock the chestwith it?.
When trying to execute the tacit acts,the game finds the precondition that does not holdand verbalizes it with ?the key is not on the table,you don?t know where it is?.
Such answer can beseen as a clarification request (CR), it has the ef-fect of assigning to the player the responsabilityof finding the key before trying to open the chest.The same responsability that would be assigned bymore commonly used CR that can happen in thisscenario, namely ?Where is the key?
?.In the game, such clarifications vary accordingto the knowledge that is currently available to theplayer.
If the player knows that the dragon has thekey and she can only take it while the dragon isasleep an answer such as ?the dragon is not sleep-ing?
is generated in the same fashion.4 Conclusion and future workIn this paper we have presented a text-adventuregame which is an interesting test-bed for experi-menting with accommodation.
The text-adventureframework makes evident the strong relation be-tween accommodation and clarification (which isnot commonly studied), highlighting the impor-tance of investigating accommodation in dialogueand not in isolation.Our work is in its early stages and can be ad-vanced in many directions.
We are particularly in-terested in modifying the architecture of the sys-tem in order to model reference as another actioninstead of preprocessing references with special-purpose algorithms.
In this way we would notonly obtain a more elegant architecture, but alsobe able to investigate the interactions between ref-erence and other kinds of actions, which occur inevery-day conversations.ReferencesF.
Baader, D. Calvanese, D. McGuinness, D. Nardi, andP.
Patel-Schneider.
2003.
The Description LogicHandbook: Theory, Implementation, and Applica-tions.
Cambridge University Press.D.
Beaver and H. Zeevat.
2007.
Accommodation.In The Oxford Handbook of Linguistic Interfaces,pages 503?539.
Oxford University Press.L.
Benotti.
2007.
Incomplete knowledge and tacit ac-tion: Enlightened update in a dialogue game.
InProc.
of DECALOG, pages 17?24.L.
Benotti.
2008.
Accommodation through tacit sens-ing.
In Proc.
of LONDIAL, pages 75?82.B.
Crabbe?
and D. Duchier.
2004.
Metagrammar redux.In Proc.
of CSLP04.R.
Fikes, P. Hart, and N. Nilsson.
1972.
Learning andexecuting generalized robot plans.
AI, 3:251?288.C.
Gardent and E. Kow.
2007.
A symbolic approach tonear-deterministic surface realisation using tree ad-joining grammar.
In Proc.
of ACL07.C.
Gardent.
2008.
Integrating a unification-based se-mantics in a large scale lexicalised tree adjoininiggrammar for french.
In Proc.
of COLING08.V.
Haarslev and R. Mo?ller.
2001.
RACER systemdescription.
In Proc.
of IJCAR01, number 2083 inLNAI, pages 701?705.L.
Kallmeyer, T. Lichte, W. Maier, Y. Parmentier,J.
Dellert, and K. Evang.
2008.
TuLiPA: Towardsa multi-formalism parsing environment for grammarengineering.
In Proc.
of the WGEAF08.H.
Kautz and B. Selman.
1999.
Unifying SAT-basedand graph-based planning.
In Proc.
of IJCAI99,pages 318?325.A.
Koller, R. Debusmann, M. Gabsdil, and K. Strieg-nitz.
2004.
Put my galakmid coin into the dispenserand kick it: Computational linguistics and theoremproving in a computer game.
JoLLI, 13(2):187?206.J.
Kreutel and C. Matheson.
2003.
Context-dependentinterpretation and implicit dialogue acts.
In Perspec-tives on Dialogue in the New Millenium, pages 179?192.
John Benjamins.D.
Lewis.
1979.
Scorekeeping in a language game.Philosophical Logic, 8:339?359.R.
Petrick and F. Bacchus.
2004.
Extending theknowledge-based approach to planning with incom-plete information and sensing.
In Proc.
of ICP-KRR04, pages 613?622.R.
Thomason, M. Stone, and D. DeVault.
2006.
En-lightened update: A computational architecture forpresupposition and other pragmatic phenomena.
InProc.
of Workshop on Presup.
Accommodation.4
