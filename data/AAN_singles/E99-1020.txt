Proceedings of EACL '99Tabular Algorithms for TAG ParsingMiguel A. AlonsoDepartamento deComputacidnUnivesidad e La CorufiaCampus de Elvifia s/n15071 La CorufiaSPAINalonso@dc.fi.udc.esDavid CabreroDepartamento deComputacidnUnivesidad e La CorufiaCampus de Elvifia s/n15071 La CorufiaSPAINcabreroQdc.fi.udc.esEric de la ClergerieINRIADomaine de VoluceauRocquencourt, B.P.
10578153 Le Chesnay CedexFRANCEEric.De_La_Clergerie@inria.frManuel VilaresDepartamento de ComputacidnUnivesidad de La CorufiaCampus de Elvifia s/n15071 La CorufiaSPAINvilares@dc.fi.udc.esAbstractWe describe several tabular algorithmsfor Tree Adjoining Grammar parsing,creating a continuum from simple purebottom-up algorithms to complex pre-dictive algorithms and showing whattransformations must be applied to eachone in order to obtain the next one in thecontinuum.1 IntroductionTree Adjoining Grammars are a extension of CFGintroduced by Joshi in (Joshi, 1987) that usetrees instead of productions as the primary rep-resenting structure.
Several parsing algorithmshave been proposed for this formalism, most ofthem based on tabular techniques, ranging fromsimple bottom-up algorithms (Vijay-Shanker andJoshi, 1985) to sophisticated extensions of theEarley's algorithm (Schabes and Joshi, 1988; Sch-abes, 1994; Nederhof, 1997).
However, it is diffi-cult to inter-relate different parsing algorithms.
Inthis paper we study several tabular algorithms forTAG parsing, showing their common characteris-tics and how one algorithm can be derived fromanother in turn, creating a continuum from simplepure bottom-up to complex predictive algorithms.Formally, a TAG is a 5-tuple ~ =(VN,VT, S , I ,A) ,  where VN is a finite set ofnon-terminal symbols, VT a finite set of terminalsymbols, S the axiom of the grammar, I a finiteset of initial trees and A a finite set of auxiliarytrees.
IUA  is the set of elementary trees.
Internalnodes are labeled by non-terminals and leaf nodesby terminals or ~, except for just one leaf perauxiliary tree (the foot) which is labeled by thesame non-terminal used as the label of its rootnode.
The path in an elementary tree from theroot node to the foot node is called the spine ofthe tree.New trees are derived by adjoining: let a be atree contaiIiing a node N ~ labeled by A and letbe an auxiliary tree whose root and foot nodesare also labeled by A.
Then, the adjoining ofat the adjunction ode N ~ is obtained by excisingthe subtree of a with root N a, attaching j3 to N ?and attaching the excised subtree to the foot of ~.We use ~ E adj(N ~) to denote that a tree ~ maybe adjoined at node N ~ of the elementary tree a.In order to describe the parsing algorithms forTAG, we must be able to represent the partialrecognition of elementary trees.
Parsing algo-rithms for context-free grammars usually denotepartial recognition of productions by dotted pro-ductions.
We can extend this approach to the caseof TAG by considering each elementary tree q, asformed by a set of context-free productions 7)(7):a node N ~ and its children N~.
.
.
N~ are repre-sented by a production N ~ --~ N~.
.
.
N~.
Thus,the position of the dot in the tree is indicated bythe position of the dot in a production in 7)(3' ).The elements of the productions are the nodes of150Proceedings of EACL '99the tree, except for the case of elements belongingto VT U {E} in the right-hand side of production.Those elements may not have children and are notcandidates to be adjunction nodes, so we identifysuch nodes labeled by a terminal with that termi-nal.To simplify the description of parsing algo-rithms we consider an additional production -r -+R a for each initial tree and the two additional pro-ductions T --* R ~ and F ~ ~ 2_ for each auxiliarytree B, where R ~ and F ~ correspond to the rootnode and the foot node of/3, respectively.
Afterdisabling T and 2_ as adjunction nodes the gener-ative capability of the grammars remains intact.The relation ~ of derivation on P(7) is de-fined by 5 ~ u if there are 5', 5", M ~, v such that5 = 5'M~5 ", u = 5'v~" and M "r --+ v E 7)(3 ') ex-ists.
The reflexive and transitive closure of =~ isdenoted :~ .In a abuse of notation, we also use :~ to rep-resent derivations involving an adjunction.
So,5 ~ u if there are 5~,~",M'r,v such that 5 =5'M~5 '', R ~ ~ viF~v3, ~ E adj(M~), M "r --+ v2and v = ?~t?31v2u3 ~tt .Given two pairs (p,q) and (i, j) of integers,(p,q) <_ (i , j)  is satisfied i f /<  p and q _< j.  Giventwo integers p and q we define p U q as p if q is un-defined and as q if p is undefined, being undefinedin other case.1.1 Parsing SchemataWe will describe parsing algorithms using ParsingSchemata, a framework for high-level descriptionof parsing algorithms (Sikkel, 1997).
An interest-ing application of this framework is the analysis ofthe relations between different parsing algorithmsby studying the formal relations between their un-derlying parsing schemata.
Originally, this frame-work was created for context-free grammars butwe have extended it to deal with tree adjoininggrammars.A parsing system for a grammar G and stringal ... a,~ is a triple (2:, 7-/, D), with :2 a set of itemswhich represent intermediate parse results, 7-/ aninitial set of items called hypothesis that encodesthe sentence to be parsed, and Z) a set of deduc-tion steps that allow new items to be derived fromalready known items.
Deduction steps are of theform '~'~"'~ cond, meaning that if all antecedents7\]i of a deduction step are present and the con-ditions cond are satisfied, then the consequentshould be generated by the parser.
A set 5 v C Z of.final items represent the recognition of a sentence.A parsing schema is a parsing system parameter-ized by a grammar and a sentence.Parsing schemata re closely related to gram-matical deduction systems (Shieber et al, 1995),where items are called formula schemata, deduc-tion steps are inference rules, hypothesis are ax-ioms and final items are goal formulas.A parsing schema can be generalized fromanother one using the following transforma-tions (Sikkel, 1997):?
Item refinement,multiple items.breaking single items into?
Step refinement, decomposing a single deduc-tion step in a sequence of steps.?
Extension of a schema by considering a largerclass of grammars.In order to decrease the number of items anddeduction steps in a parsing schema, we can applythe following kinds of filtering:?
Static filtering, in which redundant parts aresimply discarded.?
Dynamic filtering, using context informationto determine the validity of items.?
Step contraction, in which a sequence of de-duction steps is replaced by a single one.The set of items in a parsing system PAIg cor-responding to the parsing schema Alg describinga given parsing algorithm Alg is denoted 2:Alg, theset of hypotheses 7/Alg, the set of final items ~'Algand the set of deduction steps is denoted ~)Alg"2 A CYK- l i ke  A lgor i thmWe have chosen the CYK-like algorithm for TAGdescribed in (Vijay-Shanker and Joshi, 1985) asour starting point.
Due to the intrinsic limitationsof this pure bottom-up algorithm, the grammarsit can deal with are restricted to those with nodeshaving at most two children.The tabular interpretation of this algorithmworks with items of the form\[N "~ ,i, j \[ p, q I adj\]such that N ~ ~ ai+l .
.
.ap F ~ aq+l .
.
.a jai+l ... aj if and only if (p, q) 7~ ( - ,  - )  and N ~a i+ l .
.
,  aj if and only if (p,q) = ( - , - ) ,  whereN ~ is a node of an elementary tree with a labelbelonging to VN.The two indices with respect o the input stringi and j indicate the portion of the input string thathas been derived from N "~.
If V E A, p and q aretwo indices with respect o the input string thatindicate that part of the input string recognized151Proceedings of EACL '99by the foot node o fv .
In other casep= q =-representing they are undefined.
The element adjindicates whether adjunction has taken place onnode N r.The introduction of the element adj taking itsvalue from the set {true, false} corrects the itemspreviously proposed for this kind of algorithmsin (Vijay-Shanker and Joshi, 1985) in order toavoid several adjunctions on a node.
A value oftrue indicates that an adjunction has taken placein the node N r and therefore further adjunctionson the same node are forbidden.
A value of falseindicates that no adjunction was performed onthat node.
In this case, during future processingthis item can play the role of the item recognizingthe excised part of an elemetitary tree to be at-tached to the foot node of an auxiliary tree.
As aconsequence, only one adjunction can take placeon an elementary node, as is prescribed by thetree adjoining grammar formalism (Schabes andShieber, 1994).
As an additional advantage, thealgorithm does not need to require the restrictionthat every auxiliary tree must have at least oneterminal symbol in its frontier (Vijay-Shanker andJoshi, 1985).Schema 1 The parsing systems \]PCYK corre-sponding to the CYK-l ine algorithm for a tree ad-joining grammar G and an input string a l .
.
.
anis defined as follows:ICYK={ \[N 7 , i , j l p ,q lad j \ ]  }such that N ~ ?
79(7), label(Nr) ?
VN, 7 E I UA,  0 < i < j ,  (p,q) <_ ( i , j ) ,  adj e {true, false}7"~Cy K = { \[a, i -- 1, i\] I a = ai, 1 < i < n }\[a, i - 1, if N r -+ a ~ScanCYK = \ [Nr ,  i - 1, i \[ - , -  I false\]79~'?K = \[N% i, i I - , -  I false\] N~ -~ e)FootCYK = \[Fr, i, j I i, j I false\]\[M r, i, k \[ p, q I adj\],q~LeftDo,n \[P~', k, j I - ,  - -  I ad j \ ]'-'CYK = \[NT, i, j I P, q I false\]such that N "r --+ M+rP r E 79(7), M r E spine(v)\[M r, i, k l - , - lad j \ ] ,~R.ightDoln \ [p 'r  k, j I P, q I adj\]~CYK = \[N r, i, j I P, q false\]such that N "r --+ M'rP ~ ?
P(7),  p r  ?
sp/ne(7)\[M ~, i, k adjJ ,P~, k, j --,'-- \[\[ adj\] ?
pNoDom :CYK \[Nr, i, j I - ,  - I false\]such that N r ~ MrP  r ?
P(7),  M~, P'~sp/ne(~)?
)Unary = \[ M~, i, j I P, q I adj\] N~, M.  rcY~ \[N% i, j I P, q I false\] -+ ?
P(~)\[ R~, i', j '  i, j I adjl, Nr , i , j  \[p,q false\] DAdj?YK = \ [N%i ' , j '  \[p,q \[ true\]such that 3 e A, ~ ?
adj(N "r)q~Scan I I-DFoot q'~LeftDoml iDCYK ~'CYK \['j ~)~YK I.J : "-' ~'CYK ~'CYK~RightDom II T~NoDom U TlUnary TIAdjCYK ~ "CYK ~CYK \[J "CYK$'CYK = { \[R ~,0,n \[ - , - \ [ad j \ ] la  e I }The hypotheses defined for this parsing systemare the standard ones and therefore they will beomitted in the next parsing systems described inthis paper.The key steps in the parsing system IPCyK areDcF?~?t~ and 7?~di K, which are in charge of the recog-nition of adjunctions.
The other steps are incharge of the bottom-up traversal of elementarytrees and, in the case of auxiliary trees, the prop-agation of the information corresponding to thepart of the input string recognized by the footnode.The set of deductive steps q-~Foot make it possi- ~'CYKble to start the bottom-up traversal of each aux-iliary tree, as it predict all possible parts of theinput string that can be recognized by the footnodes.
Several parses can exist for an auxiliarytree which only differs in the part of the inputstring which was predicted for the foot node.
Notall of them need take part on a derivation, onlythose with a predicted foot compatible with anadjunction.
The compatibility between the ad-junction node and the foot node of the adjoined~Adj .
when tree is checked by a derivation step 'CYK"the root of an auxiliary tree /3 has been reached,it checks for the existence of a subtree of an ele-mentary tree rooted by a node N ~ which satisfiesthe following conditions:i.
/3 can be adjoined on N'L2.
N "r derives the same part of the input stringderived from the foot node of/3.152Proceedings of EACL '99If the Conditions are satisfied, further adjunctionson N are forbidden and the parsing process con-tinues a bottom-up traverse of the rest of the ele-mentary tree 3' containing N x.3 A Bottom-up Earley-likeAlgorithmTo overcome the limitation of binary branching intrees imposed by CYK-like algorithms, we define abottom-up Earley-like parsing algorithm for TAG.As a first step we need to introduce the dottedrules into items, which are of the form\[N ~ --4 5 ?
v , i , j  I P, q\]such that 6 ~ a~+1...% F "y aq+l .
.
.a ;  :~ai+l .. .
a~ if and only if (p, q) # ( - , - )  and 5 =~ai+l .. .
aj if and only if (p, q) = ( - ,  - ) .The items of the new parsing schema, denotedbuEx,  are obtained by refining the items of CYK.The dotted rules eliminate the need for the ele-ment adj indicating whether the node in the left-hand side of the production has been used as ad-junction node.Schema 2 The parsing system \]PbuE correspond-ing to the bottom-up Earl?y-like parsing algorithm,given a tree adjoining grammar G and a inputstring al .
.
.
a,~ is defined as follows:Zb.E = \[N "~ --+ 5 ?
v, i, j I P, q\]such that N ~ 2_+ 5v ?
P(3"), 3" E I U A,  0 < i <j,  (p,q) <_ ( i , j )Init bun = \[N'v --+ ?5, i, i \ [ - , - \ ]DFoot buE \[FZ ~ ?
?
, i , j  \] i,j\]I N ~ --+ 5 ?
av , i , j  -1  I P, q\], ~s(:a. a, j  - 1,if?
q,,,E = \[N~ --+ 5a ?
v, i, j I P, q\]N'r --4 6 ?M~v, i ,  k IP, q\],M r ~ v?
,  k, j \] p', q'\] ~r) COml) :hue \ [N~- -+SM~?v , i , j \ [pUp ' ,qUq ' \ ]T --4 R~.
,k , j  I l,m\],M "r --~ v ?
,  l, m I P', q'\],N ~ --4 5 ?
M~v, i , k  \] p,q\], ~)AdjComp =hue \[N~ --4 5M'r ?
v, i, j I P U p', q U q'\]such that ~ ?
A ,  ~ ?
ad j (M ~)~buE = 7)Init U T)Foot U T)Scanj ) ~buE ~I)uE ~buE "J~)Comp qDAdjComphue  U ~buE- , - \ ] l - ?X  }The deduction steps of \]PbuE are  obtained fromthe steps in IPcyK applying the following refine-ment:?
LeftDom, RightDom and NoDom deductivesteps have been split into steps Init andComp.?
Unary and E steps are no longer necessary,due to the uniform treatment of all produc-tions independently of the length of the pro-duction.The algorithm performs a bottom-up recog-nition of the auxiliary trees applying the steps~)Comp During the traversal of auxiliary trees, buE1 "information about the part of the input string rec-ognized by the foot is propagated bottom-up.
Aset of deductive steps z)Init ~buE are in charge of start-ing the recognition process, predicting all possiblestart positions for each rule.A filter has been applied to the parsing system\]PCYK, contracting the deductive steps Adj andComp in a single AdjComp, as the item gener-ated by a deductive step Adj can only be used toadvance the dot in the rule which has been usedto predict the left-hand side of its production.4 An Earley-like Algor i thmAn Earley-like parsing algorithm for TAG can beobtained by incorporating top-down prediction.To do so, two dynamic filters must be applied to\]PbuE:?
The deductive steps in D~ nit will only considerproductions having the root of an initial treeas left-hand side.?
A new set ~)Pred of predictive steps will bein charge of controlling the generation ofnew items, considering only those new itemswhich are potentially useful for the parsingprocess.Schema 3 The parsing system \]PE correspondingto an Earley-like parsing algorithm for TAG with-out the valid prefix property, given a tree adjoininggrammar G and a input string al .
.
.
an is definedas follows:~E ---- \]~buEv "'t = \[7 .R - ,  0, 01 - , - \ ]  ?
I153.-%Proceedings of EACL '99DP~d = \[ Nr  --+ ~ * Mrv ,  i, j I P, q\]\ [Mr --+ *v , j , j  \[ - , - \ ]?AdjP~d = \[ N'~ -'+ 5 * Mrv,  i, j I P, q\]E \[7- --+ .R~,  j, j I --, --\]such that fl ?
adj (M r)fr k l - ,- \] ,  ~)FootPred ~ .N ' r  -+ ~ * M'r v, i, j I P, q\]\[Mr k, k l - , - \ ]such that/3 ?
adj(M" 0\[M ~ ~ v*, k, l I P, q\],,?, k, k I - ,  -1,, ,T)FootComp ---- \[ Ny  ~ 6*Mrv ,  i, J \[P ,q\]~E \[F~ --+ _1_., k, l I k, l\]such that fl ?
adj(M~),  p U p' and q t2q' are defined)AdjComp E ---- IT ~ Rf~*,j, m lk,  l\],M ' r -+v* ,k , l \ [p ,q \ ] ,  ,N r -+ 6 .Mrv ,  i , j  \ [p,q'\]\[Nr ~ 6Mr ?
v, i, m \[ P U p', q U q'\]such that/3 ?
adj (M r)Init T)Scan j , ~)Pred U ~r)Comp, ,7) E - -  7:) E U ouE ~ E :.hue wT~ AdjPred i i T~FootPred I I T)V?
?tC?mpl I~)~ p~Ed jC?m V ~" E "" ~E ~'*~'E  = ~buEParsing begins by creating the item correspond-ing to a production having the root of an initialtree as left-hand side and the dot in the leffmostposition of the right-hand side.
Then, a set of de-ductive steps ~E Pred and  ~Comp w E traverse ach ele-T)AdjPred predicts the ad- mentary tree.
A step in w Ejunction of an auxiliary tree/3 in a node of an ele-mentary tree 3' and starts the traversal of/3.
Oncethe foot of/3 has been reached, the traversal of/3~FootPred  is momentary suspended by a step in E ,which re-takes the subtree of 7 which must be at-tached to the foot of/3.
At this moment, there isno information available about the node in whichthe adjunction of/3 has been performed, so all pos-sible nodes are predicted.
When the traversal of a?
.r~FootComp predicted subtree has finished, a step m/ Jnre-takes the traversal of/3 continuing at the footnode.
When the traversal of/3 is completely fin-T~hdjC?mp checks if the ished, a deduction step in w Esubtree attached to the foot of \[3 corresponds withthe adjunction node.
With respect to steps in~)AdjComp E , p and q are instantiated if and only ifthe adjunction node is in the spine of V-5 The  Va l id  P re f ix  P roper tyParsers atisfying the valid prefix property guaran-tee that, as they read the input string from left toright, the substrings read so fax are valid prefixesof the language defined by the grammar.
More for-mally, a parser satisfies the valid prefix propertyif for any substring al .. ?
ak read from the inputstring al .
?
?
akak+ l ?
.
.
an guarantees that there isa string of tokens bl .
.
.
b in ,  where bi need not bepart of the input string, such that al .
.
.
akbl .
.. bmis a valid string of the language.To maintain the valid prefix property, the parsermust recognize all possible derived trees in prefixform.
In order to do that, two different phasesmust work coordinately: a top-down phase thatexpands the children of each node visited and abottom-up hase grouping the children nodes toindicate the recognition of the parent node (Sch-abes, 1991).During the recognition of a derived tree in pre-fix form, node expansion can depend on adjunc-tion operations performed in the previously vis-ited part of the tree.
Due to this kind of dependen-cies the set path is a context-free language (Vijay-Shanker et al, 1987).
A bottom-up algorithm(e.g.
CYK-like or bottom-up Eaxley-like) canstack the dependencies shown by the context-freelanguage defining the path-set.
This is sufficientto get a correct parsing algorithm, but withoutthe valid prefix property.
To preserve this prop-erty the algorithm must have a top-down phasewhich also stacks the dependencies shown by thelanguage defining the path-set.
To transform analgorithm without the valid prefix property intoanother which preserves it is a difficult task be-cause stacking operations performed uring top-down and bottom-up phases must be correlatedsome way and it is not clear how to do so with-out augmenting the time complexity (Nederhof,1997).CYK-like, bottom-up Earley-like and Eaxley-like parsing algorithms described above do notpreserve the valid prefix property because foot-prediction (a top-down operation) is not restric-tive enough to guarantee that the subtree attachedto the foot node really corresponds with a instanceof the tree involved in the adjunction.To obtain a Earley-like parsing algorithm fortree adjoining grammars preserving the valid pre-fix property we need to refine the items by in-cluding a new element o indicate the position of154Proceedings of EACL '99the input string corresponding to the left-most ex-treme of the frontier of the tree to which the dot-ted rule in the item belongs:\ [h ,g  "~ ~ 5 ?
v , i , j  \[ p,q\]such that R ~ ~ ah+~ .
.
.a iSvv  and 5 =~a i .
.
.ap  F "r aq+~ .
.
.a j  ~ a i .
.
.a j  if and only if(p, q) # ( - , - )  and 5 ~ ai .
.
.a j  if and only if(P, q) = ( - ,  - ) .Thus, an item \[N ~ --+ 5 * v , i , j  I P,q\] of IPEcorresponds now with a subset of {\[h, N 7 --+ 5.v, i, j I P, q\] } for all h e \[0, n\].Schema 4 The parsing system \]PEarley corre-sponding to a Earley-like parsing algorithm withthe valid prefix property, for a tree adjoining gram-mar ~ and a input string a~.
.
.an  is defined asfollows:~Earley = \[h, N ~ --+ 5 ?
v, i, j I P, q\]N "r ~ 5?v  ~ P(7) ,  7 ~ IUA ,  O < h < i <j ,  (p,q) < ( i , j )Dlnit I Earley \[0, T -+ ?R  ~, 0, 0 I - , - \ ]\ [h ,N ~ -~ 5*av ,  i , j -  1 \[p,q\],~Scan \[a,3 - 1,j\]~'Earley = \[h, N7 --+ 8a ?
v, i, j \[ p, q\]~)Pred \[h, N~ ~5"M'~v, i , J  \[P,q\]Earley "= \[h, M'r --+ ?v, j, j \ [  - , - \ ]f h, N "y ~ 5 * M'rv, " ~)CompEarley = \[h, N "r --+ 5M7.
v, i, j I P U p', q U q'\]DAdjPred \[h, N "r -+ 5 ?
M~rv, i, j I P, q\]E,~l~y = \[j, T --+ .R~,  j, j I - , -1such that \[3 E adj(M ~)\ [ j ,F  ~ --+ o_L, k, k I - , - \ ] ,T~FootPred = \[ h, N "r --+ 5 ?
M'Y v, i, j \] p, q\]z"Earley \[h, M y --+ *5, k, k I - ,  - \ ]such that \[3 E adj(M ~)\ [h,M "Y ~ v* ,k , l  I P, q\],\ [ j ,F ~ -+ ._L,k, k \[ - , - \ ] ,~)FootComp \[h, N ~ --+ 5 * M~v, i , j  I if, q'\]Earley = \ [ j , F  ~ ~ .J-",~,l I ~, l \ ]fl E adj(MT), p U p' and q U q' are defined-DAdjCompEarleyfj, T --+ R~.
, j ,m k,l\],h ,M ~ --+ v .
,k ,  l lp, q\],h ,N  ~ --+ 5 ?
M~v, i , j  I P',q'\]\[h, N'r -+ 5M'r ?
v, i, m I P U p', q U q'\]such that \[3 e adj (M ~)~)Earley =~In i t  L.J ~)Scan U q3Pred IIEarley Earley ~"Earley "J~)Comp T3AdjPred ff')FootPredl iEarley U ~Earley l J ~"Earley "~~DFootComp T)AdjCompEarley LJ ~Earley~'Earley = { \[O, -r -~ R%,  O, n l - , - l l~e  I }Time complexity of the Earley-like algorithmwith respect to the length n of input string isAdjOomp O(nT), and it is given by steps 79Earley .
A1-q-lAdjComp though 8 indices are involved in a step ~Earley ,partial application allows us to reduce the timecomplexity to O(nT).Algorithms without the valid prefix propertyhave a time complexity C0(n 6) with respect o thelength of the input string.
The change in com-plexity is due to the additional index in items of\]PEarley- That  index is needed to check the treesT~FootPred ^--J ,r~FootComp In the involved in steps ~'~Earley i~uu t.,Earley .other steps, that  index is only propagated to thegenerated item.
This feature allows us to refineff-IAdjComp splitting them into several the steps in ~Earley 'steps generating intermediate items without thatindex.
To get a correct .s~titting, we must first?
.
- Adjt~omp ?
- &fferentlate steps m ~)Earley in whmh p and qq~AdjComp are instantiated from steps in "Earley in whichp' and q' are instantiated.
So, we must define twoq'3AdjC?mpl and q3AdjO?mP2 o f  s teps  in- new sets  ~Ear ley ~Earleyq3Ad jC?mp Additionally, in stead of the single set ~Earley "q3AdjComp 1steps in ~Earley we need to introduce a newitem (dynamic filtering) to guarantee the correct-ness of the steps.\[j,-r - ,  R~, , j ,m I k,1\],\ [h,M ~ --+ vo, k, l  lp, q\],\ [h,F ~ -+ _L.,p,q p,q\],DadjCom p' = \[h, N ~ --+ 5 ?
M'rv, i, j - ,  - \ ]Earley \[h, N7 --~ 5M7 ?
u, i, m \[ p, q\]such that 13 E adj(M ~)\ [ j ,T --+ R~*, j ,  m l k,l\],ih, M y --+ v ' ,k , l  - , - \ ] ,  ,T)AdjCornp 2 \[h,N'r -+ 5* M'rv, i , j  i f ,q \ ]WEarley : \[h, N~ ~ 5M~ ?
v, i, m I P', q'\]such that \[3 E adj(M "y)~DEarley ~D Init I.J ~D Scan LJ "FIPred II Earley Earley ~Earley ~~)Comp ,/-)Adj Pred q-)FootPredl iEarley \['j ~Earley I.J ~Earley "-"~)FootComp "/3 AdjC?mpl It q'~ AdjC?rnp2Earley I J ~Earley "-" ~Earley155Proceedings of EACL '99"DAdjC?mpl into Now, we must refine steps in '~'Earley~) AdjC?mp?
and ~) AdjC?mpff steps in Earley Earley , and re-q-)AdjComp ?
q')AdjC?rnp2 into steps in ~Earley fine steps in ,iEarleyand q')AdjC?mp2' Correctness of these splittings ~Earleyis guaranteed by the context-free property ofTA G (Vijay-Shanker and Weir, 1993) establishingthe independence of each adjunction with respectto any other adjunction.After step refinement, we get the Earley-likeparsing algorithm for TAG described in (Neder-hof, 1997), which preserves the valid prefix prop-erty having a time complexity O(n 6) with respectto the input string.
In this schema we also needto define a new kind of intermediate pseudo-items\[\[g r --+ 5 ?
u, i, j I P, q\]\]such that 5 ~ a i .
.
.ap  F "y aq+l .
.
.a j  ~ a i .
.
.a jif and only if (p, q) ?
( - , - )  and 6 :~ a i .
.
.
aj ifand only if (p, q) = ( - , - )  .Schema 5 The parsing system \]PEarley coFre -sponding to a the final Earley-like parsing algo-rithm with the valid prefix property having timecomplexity O(n6), for a tree adjoining grammar Gand a input string al .
.
.
an is defined as follows:~Earley = { \ [h ,N  r ~ (~ ?
b',?
:,j i P ,q\]  }such that N "r ~ 5 .
u E p('r), 7 E I tO A,  O < h <i< j ,  (p,q)_<(i, j)~Earley = { \[\[ Nr  -'') ~ ?
/ \ ] , i , J  I P,q\]\]  }such that N r ~ d .u  ?
P(7), ~/ ?
IU  A,  O < i <j ,  (p,q) <_ ( i , j )?
\] ')~Earley : ~Earley k.J Z~.arleyDlnit Eltrley O~ I F-\[0, T~.R%0,0  - , - \ ]\[h,,N r --+ 5 .
au, i,3 - l i p ,  q\],~Scan \[a, 3 - 1, j\]?
~E,~l~y = \[h, Nr  ~ 5a ?
u, i, j I P, q\]~r)Pred \[h, Nr  --+ 5 * Mru,  i , j  l P, q\]Earlcy -~- \[h, Mr ~ *v, j, j \[ - , - \ ]\[ h,N  r --+ 5 ?
Mru,  i ,k  !
p,q\], h,,M "v --+ v .
,k , j  \ ] i f ,q\ ]  ~r)(:()mp ----I,:,u.l,,y \[h, N r --+ 5Mr ?
u, i, j I P tO p', q U q'\],DAd jPre  d _ \ [h,N r --+ 5 * M'Yu, i , j  l p, q\]Earley -- \[j, T -~ ; f i~  \[ - ,  -\]such that 13 E adj(M r)\[ j ,F ~ -+ *J_,k,k\[ - , -1 ,~FootP~ed = \[h, N r -'+ 5 * M'~v, i , j  \[ p, q\]~'Earley \[h, M'r --+ .5, k, k \[ - ,  - \]such that/3 E adj(M ~):D F?otC?mp = Earleysuch that /3q' are defined\[h, M r --+ 5?, k, l I P, q\],}j, F ~ -+ ?
?,k,k  - , - \ ] ,  h ,N  ~ -+ 5 .
M~u, i , j  p',q'\]\[j, FZ -~ _k.
,k, l  I k,l\]?
adj(M'r), p U p' andq U\[j, T --+ RZ.
, j ,  rn ~pkql!
,,F~AdjComp o = \[h, M r --+ 5?, k, l \[--Earley \[\[M'r --+ 5?, j, rn \[ p, q\]\]such that/3 E adj(M r)\[\[Mr j, m p, q\]l,\[h,F r -+ .l_.,p,q p,q\],~AdiCompl' \[h, N r ~ 5 ?
M~u, i , j  - ,  -\]~'Earley = \[h, N~ ~ ~M~ ?
u, i, m I P, q\]such that/3 ?
adj(M r)\[\[M "r-+ 5. , j ,  rn \[ p,q\]\],q~AdjComp 2' \[h, Nr  --+ 5* M'ru, i , j  \[ p,q\]~Earley = \[h, Nr  - ,  ?
i, m I p, q\]such that/3 e adj(M r)~)Scan -riPred I I = ,F)Init LJ \[.J ~)Earley ~'Earley Earley ~" Earley'-'~DCornp ,F)Adj Pred 1"~FootPredl I Earley LJ ~Earley LJ ~JEarley v~)FootCornp ~D AdjC?mp0 I,.JEarley I J Earley~) AdjC?ml)ff I.J q")AdjC?mP'/Earley ~Earley-~Earley = { \[0,7- ~ R ao ,0 ,n  I - , - \ ]  I c~ ?
I }6 Conc lus ionWe have described a set of parsing algorithmsfor TAG creating a continuum which has theCYK-like parsing algorithm by (Vijay-Shankerand Joshi, 1985) as its starting point and theEarley-like parsing algorithm by (Nederhof, 1997)preserving the valid prefix property with time156Proceedings of EACL '99complexity O(n 6) as its goal.
As intermediate al-gorithms, we have defined abottom-up Earley-likeparsing algorithm and an Earley-like parsing algo-rithm without he valid prefix property, which toour knowledge has not been previously describedin literature 1.
We have also shown how to trans-form one algorithm into the next using simpletransformations.Other algorithms could also hasbeen included in the continuum, but for reasonsof space we have chosen to show only the algo-rithms we consider milestones in the developmentof parsing algorithms for TAG.An interesting project for the future will be totranslate the algorithms presented here to sev-eral proposed automata models for TAG whichhave an associated tabulation technique: StronglyDriven 2-Stack Automata (de la Clergerie andAlonso, 1998), Bottom-up 2-Stack Automata (dela Clergerie t al., 1998) and Linear Indexed Au-tomata (Nederhof, 1998).7 AcknowledgmentsThis work has been partially supported byFEDER of European Union (1FD97-0047-C04-02)and Xunta de Galicia (and XUGA20402B97).Re ferencesEric de la Clergerie and Miguel A. Alonso.
1998.A tabular interpretation of a class of 2-StackAutomata.
In COLING-ACL '98, 36th AnnualMeeting of the Association for ComputationalLinguistics and 17th International Conferenceon Computational Linguistics, Proceedings ofthe Conference, volume II, pages 1333-1339,Montreal, Quebec, Canada, August.
ACL.Eric de la Clergerie, Miguel A. Alonso, andDavid Cabrero.
1998.
A tabular interpreta-tion of bottom-up automata for TAG.
In Proc.of Fourth International Workshop on Tree-Adjoining Grammars and Related Frameworks(TAG+4), pages 42-45, Philadelphia, PA, USA,August.Aravind K. Joshi.
1987.
An introduction totree adjoining rammars.
In Alexis Manaster-Ramer, editor, Mathematics of Language, pages87-115.
John Benjamins Publishing Co., Ams-terdam/Philadelphia.Mark-Jan Nederhof.
1997.
Solving the correct-prefix property for TAGs.
In T. Becket and~Other different formulations of Earley-like pars-ing algorithms for TAG has been previously proposed,e.g.
(Schabes, 1991).H.-V. Krieger, editors, Proc.
of the Fifth Meet-ing on Mathematics of Language, pages 124-130, Schloss Dagstuhl, Saarbruecken, Germany,August.Mark-Jan Nederhof.
1998.
Linear indexed au-tomata nd tabulation of TAG parsing.
In Proc.of First Workshop on Tabulation in Parsingand Deduction (TAPD'98), pages 1-9, Paris,France, April.Yves Schabes and Aravind K. Joshi.
1988.
AnEarley-type parsing algorithm for tree adjoininggrammars.
In Proc.
of 26th Annual Meeting ofthe Association for Computational Linguistics,pages 258-269, Buffalo, NY, USA, June.
ACL.Yves Schabes and Stuart M. Shieber.
1994.
Analternative conception of tree-adjoining deriva-tion.
Computational Linguistics, 20(1):91-124.Yves Schabes.
1991.
The valid prefix propertyand left to right parsing of tree-adjoining gram?mar.
In Proc.
of II International Workshop onParsing Technologies, IWPT'91, pages 21-30,Cancfin, Mexico.Yves Schabes.
1994.
Left to right parsing oflexicalized tree-adjoining grammars.
Computa-tional Intelligence, 10(4):506-515.Stuart M. Shieber, Yves Schabes, and FernandoC.
N. Pereira.
1995.
Principles and implemen-tation of deductive parsing.
Yournal of LogicProgramming, 24(1&2):3-36, July-August.Klaas Sikkel.
1997.
Parsing Schemata --  AFramework for Specification and Analysis ofParsing Algorithms.
Texts in Theoretical Com-puter Science --  An EATCS Series.
Springer-Verlag, Berlin/Heidelberg/New York.Krishnamurti Vijay-Shanker and Aravind K.Joshi.
1985.
Some computational properties oftree adjoining rammars.
In 23rd Annual Meet-ing of the Association \]or Computational Lin-guistics, pages 82-93, Chicago, IL, USA, July.ACL.Krishnamurti Vijay-Shanker and David J. Weir.1993.
Parsing some constrained gram-mar formalisms.
Computational Linguistics,19(4):591-636.Krishnamurti Vijay-Shanker, David J. Weir, andAravind K. Joshi.
1987.
Characterizing struc-tural descriptions produced by various gram-matical formalisms.
In Proc.
o/the P5th AnnualMeeting of the Association \]or ComputationalLinguistics, pages 104-111, Buffalo, NY, USA,June.
ACL.157
