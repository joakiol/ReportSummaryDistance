AN ECLECTIC APPROACH TOBUILDING NATURAL LANGUAGE INTERFACESBrian Phillips.
Michael J. Freiling, James H. Alexander,Steven L. M essick, Steve Rehfu~, Sheldon N icholltTektronix, Inc.P.O.
Box 500, M/S 50-662Beavertoa, OR 97077ABSTRACTINKA is a natural language interface to facilitateknowledge acquisition during expert system development forelectronic instrument rouble-thooting.
The expert systemdesign methodology develops a domain definition, calledGLIB, in the form of a semantic grammar.
This grammar for-mat enables GLIB to be used with the INGLISH interface,which constrains users to create statements within a subset ofEnglish.
Incremental patting in INGLISH allows immediateremedial information to be generated if a user deviates fromthe sublanguage.
Sentences are translated into production rulesusing the methodology of lexical-functional grammar.
The sys-tem is written in Sms/ltalk and, in INK,A, produces rides for aProlog inference ngine.INTRODUCTIONThe ides/ natural anguage interface would let any user,without any prior training, interact with a computer.
Such aninterface would be useful in the knowledge acquisition phaseof expert system development where the diagnostic knowledgeof a Hilled practitioner has to be elicited.
As technicians arenot farnifiar with formal knowledge representation schemes, atrained intermediary, a knowledge ngineer, is generallyemployed to handcraft he interns/ format.
This process istime-consuming and expensive.INKA (INglish Knowledge Acquisition) permits taskexperts to express their knowledge in a subset of English, andhave it automatically translated into the appropriate represen-tational formalism.
In particular, the version of INKA to bediscussed here accepts input in a sublanguage called GLIBwhich permits the statement of facts and rules relevant o thetroubleshooting of electronic systems (Freiling et al, 1984),and translates these statements into Prolog unit clauses for laterproce~ng by a specialized inference mechanism.
Experimentswith INKA to date have enabled us to construct mfflcienttroubleshooting rules to build a localizing troubleshooter for asimple circuit.INKA is designed as one of the tools of DETEKTR, anenvironment for building knowledge based electronic instru.ment troubleshooters (Freiling & Alexander, 1984).DETEKTR supports an expert system development methodol-ogy which is outlined below.
The design goal of INKA is thatit serve as a natural anguage input system to facilitate transferof knowledge during the knowledge acquisition phase of expertsystem development.
IIqKA is not intended to stand alone asthe sole mechanism for knowledge transfer, but to be sup-t A summer intern at Tektronix, currently at the Univer-sity of llfinois, Champs/gn-Urbana.ported by components capable of managing a coherent dis/o-gue with the task expert.
McKeown (1984) has po/nted out anumber of important aspec~ of the pragmatics that relate tothe usage phase of an expert system.
Similar pragmatics arerequired to insure adequate construction of the system'sknowledge base during the knowledge ac~n phase of anexpert system's development.
The most important pragmaticfacility is one to estimate the degree of epistemi?
coverage ofthe knowledge acquired so far, and to prompt he task expertfor more knowledge in areas where the coverage is weak.
It isunfeasible to assume that any task expert can simply perform a~memory dump" of expertise into some natural languageinterface and be done with it.This paper discusses the natural anguage technology usedin building INKA.
The system incorporates a diverse collec-tion of natural language technologies in its construction.Specifically, INKA utilizes a semam/c grammar (Burton, 1976)to characterize the domain sublanguage, lexical-functionalsem~aics (Kaplan & Bresnan, 1982) to translate to the internalform of representation, and an interface that includes left-corner parsitlg with in-line guidance to address the Linguisticcoverage problem that aris~ with sublanguages.
We feel thiseclectic approach is a useful for building application-orientednatural language interfaces.
Although we are describing aknowledge acquisition application, the methodology can beused for any application whose sublanguage can be stated inthe prescribed grammar formalism.Tereisias (Davis, 1977) provides a natural languageenvironment for debugging a knowledge base.
INKA atpresent contains no facilities to modify an existing rule or totest the evolving knowledge base for some level of integr/ty;these are to be future additions.INKA is written in Smalltalk (Goidberg & Robson, 1983)and runs on both the Tekuroulx Magnolia Workstation and the4404 Artificial Intelligence System.
INKA makes extensiveuse of the bit-mapped isplay and three-button mouse on thesesystems.LANGUAGE AS A KNOWLEDGE ENGINEERING TOOLThe major bottlenecks in building knowledge based sys-tems have proven to be related to the definition and acquisi-tion of knowledge to be processed.The first bottleneck occurs in the knowledge definitionphase of system development, where symbolic structures aredefined that represent the knowledge necessary to accomplisha particular task.
A bottleneck arises because of the ~ortageof knowledge ngineers, who are skilled in defining these struc-tures and using them to express relevant knowledge.254The second bottleneck occurs in the knowledge acquisitionphase, which involves the codification of the knowledge neces-sary for a system to function correctly.
A bottleneck ariseshere because in current practice, the presence of theknowledge engineer is required throughout this time-consuming process.In the course of defining a viable methodology for theconstruction of expert systems (Frelling & Alexander 1984;Alexander et al 1985), we have identified cermia classes ofproblems where the task of definin$ the knowledge structuresand the task of actually building them can be effectivelyseparated, with only the former being performed by a trainedknowledge engineer.
The problem of building a large collec-tion of knowledge-based troubleshooters for electronic instru-meats is an example.
In order to support he construct/on of alarge class of such systems, it makes sense to perform theknowledge definition step for the overall domain initially, andto build domain-specific developmera tools, which includeproblem-oriented mbsets of Enghsh and special purpose graph-ical displays, that can be reused in the development of eachindividual knowledge-based system.Even in the context of such an approach, we have foundthat there is usually a shortage of capable knowledge ngineersto carry out the knowledge deflnltioa phase, and that a well-defined methodology can be of great value here in aiding non-linguistically oriented computer scientists to carry out this ver-bal elicitation task.
The major issue is how to gee starteddefining the forms into which knowledge is to be cast.We have found it an effect/ve technique tO begin this pro-cem by recording statements made by task experts on tape, andtranscribing these to fairly natural En~)i~.
When enoughrecording has been done, the statements begin to take onrecognizable patterns.
It is then pom/ble to build a formalgrammar for much of the relevant utterances, using linguisticengineering techniques uch as semantic grammars The sym-bols of this grammar and the task specific vocabulary provideconvenient points for defining formal sub-structures, which arepieced together to define a complete symbolic representation.Once the grammar is reasonably well-defined, the mapping tosymbolic representation can be carried out with mapping tenh-niques such as the f-structure constraints of lexical-fuactioaalgrammar.Up to this point, we can imagine that the entire task hasbeen carried out on paper, or some machine-readableequivalent.
Even in such a rudimentary form, the exercise isuseful, because it provides a conveniently formal documenta-tion for the knowledge representation decisions that have beenmade.
However, it is also the case that these formal defini-tions, if appropriately constructed, provide all that is necessaryto construct a problem specific interface for acquiring utter-antes expressed in this sublanguage.
In fact, the idea of usingthis technique to build acquisition interfaces, using INGLISH,actually occurred as a result of wondering what to do with agrammar we had constructed simply in order to document ourrepresentation structures (Freiling et al 1984).We do not intend to imply that it is possible in complexknowledge based system applications to simply build a gram.mar and immediately begin acquirin~ knowledge.
Often theprocess leading to construction of the grammar can be quitecomplex.
In our case, it even involved building a simple proto-type troubleshooting system before we had gained sufficientconfidence in our representation structures to attempt aknowledge acquis/tion interface.Nor do we intend to claim that all the knowledge neces-sary to build a complete expert system need be computed inthis fashion.
Systems such as INKA can be justified on aneconomic bash if they make pom/ble only the transfer of a ~'~nificam fraction of the relevant knowledge.GLIB  - A PROBLEM SPECHrIC SUBLANGUAGEThe knowledge acquisition language developed for elec-tron/c devine troubleshooting is called GLIB (GeneralLanguage for Insumneat Behavior), and is aimed primarily atdescribing observations of the static and dynamic behavior ofelectrical signals as measured with oscilloscopes, voltmeters,and other standard electronic test instruments (Freiling et al1984).
The grammatical structure of GLIB is that of a seman-tic grammar, where non-terminal symbols represent units ofinterest to the problem domain rather than recognizablelinguistic categories.This semantic grammar formalism is an important part ofthe DETEKTR methodology because the construction ofsemantic grammars is a technique that is easily learned by theapprentice knowledge engineer.
It also ma~es possible theestablishment of very strong constraints on the formal languagedeveloped by this process.
Two of the design constraints wefind it advisable to impose are that the language be unambigu-ous (in the formal sense of a unique derivation for each legalsentence) and that it be context-free.
These constraints, as willbe seen, make pom/ble features of the interface which cannotnormally be delivered in other contexts, such as menus fromwhich to select all legal next terminal tokens.
While increasingcomplexity of the acquisition sublanguage may make thesegoals unfeas/ble past a certain point, in simple systems they arefeatures to be cherished.Figure I shows a fragment of the GLIB grammar.
In theDETEKTR version of INKA, sentences in this language areaccepted, and mapped into Proiog terms for proceming by aProlog based diagnostic inference ngine.
At present, the eric/-ration is unguided: responsibility res/des with the user to ensurethat all relevant statements are generated.
We are still studyingthe issues involved ia determining completeness of aknowledge base and assimilating new knowledge.
One out-come of these studies should be means of guiding the user toareas of the knowledge base that are incomplete and warrantfurther elaboration.
Future enhancements o the system willinclude explanation and modification facilities, so thatknowledge may be added or changed after testing the infer-ence engine.THE NATURAL LANGUAGE INTERFACE DESIGNINGLISH - INterface enGLISH (Ph/Ilips & Nicholl,1984) - allows a user to create sentences either by menu selec-tion, by typing, or by a mixture of the two.
This allows theself-paced transition from menu-driven to a typed mode ofinteract/on.
In-line help is available.
To assist the v/pist,automatic spelling correction, word completion, and automaticphrase completion are provided.
INGLISH constrains users tocreate statements within a subset of English, here GLIB.A statement can be entered as a sequence of menu-selections using only the mouse.
A mouse-click brings up amenu of words and phrases that are valid extensions of the255<:rttl*'~> ::I=I F  <condit ion> THEN <?on?lmma><condifiou> ::',<?otltl=n independeln predicate> I<context independent predicate> WHEN ~'-.m~-tund coatext><conclusion> ::!,<fuectionaJ context><atonfi?
funct~nal context> ::-<device> HAS FAILED I<device> B OK< f ~  conner> ::1.<atomic functional context> !<atomic functional context> AND <functional context> I<atomic functio~taJ context> OR <f,,r~tionaI context><atOtUiC stt~tetugaJ contexL> ::~,<device> IS REMOVED~-JtfttCtttt~l COtlteXt> ::1=<atomi?
structm'aJ context> I<atomic structural context> AND <structural context><context independent prostate> ::=<value predicate><value predicatc> ::=<value xpre~on> IS <value xpreslion> I<value xpt~mou> <comparator> <value c~im:smon><coml~tralOf> ::~IS EQUAL TO I = IIS GREATER THAN I > IIS LESS THAN I < !IS LESS THAN OR EQUAL TO I <= IIS GREATER THAN OR EQUAL TO I >-  IIS NOT EQUAL TO I !
:,Figure 1: A fragment of GLIBcurrent sentence fragment.
Once a selection is made from themenu using the mouse, the fragment is extended.
Thissequence can be repeated until the sentence is completed.Creating a sentence in this manner compares with theNLMENU system (Tennant e ta l .
,  1983).
Unlike NLMENU,keyboard entry is also possible with IHGLISH.
Gilfoil (1982)found that users prefer a command form of entry to menu-driven dialogue as their experience increases.
When typing, auser who is unsure of the coverage can invoke a menu, eitherby a mouse-click or by typing a second space character, to findout what INGLISH expects next without aborting the currentstatement.
Similarly, any unacceptable word causes the menuto appear, giving immediate feedback of a deviation andsuggestions for correct continuation.
A choice from the menucan be typed or selected u~ng the mouse.
|NGLISH in factallows all actions to be performed from the keyboard or withthe mouse and for them to be freely intermingled.
As onlyvalid words are accepted, all completed sentences are well-formed and can be translated into the internal representation.Figure 5, in the " INGLISH" window, shows a completesentence and its translation, and a partial sentence with a menuof continuations.
The numbers associated with each menuitem provide a shorthand for entry, i.e., "~12" can be typedinstead of "RESISTANCE".
As menu entries can be phrases,this can save significant typing effort.Input is processed on a word-by-word basis.
Single spacesand punctuation characters erve as word terminators.
Wordsare echoed as typed and overwritten in uppercase whenaccepted.
Thus, if lowercase is used for typing, the progress ofthe sentence is easily followed.
An invalid entry remains visi-ble along with the menu of acceptable continuations then isreplaced when a selection is made.The spelling corrector (a Smalltalk system routine is used)only corrects to words that would be acceptable in the currentsyntactic/semantic context.
As Carbonell and Hayes (1983)point out, this is more efficient and accurate than attemptingto correct against he whole application dictionary.Word completion is provided with the "escape" character(cf.
DEC, 1971).
When this is used, INGLISH attempts tocomplete the word on the basis of the characters o far typed.If there are several possibilities, they are displayed in a menu.Automatic phrase completion occurs whenever the con-text permits no choice.
The completion will extend as far asposs/ble In an extreme case a dngle word could yield a wholesentence!
The system will "soak-up" any words in the comple-tion that have also been typed.The spelling cot'rector and automatic phrase completioncan interact in a disturbing manner.
Any  word that is outsidethe coverage will be treated ~s an error and an attempt will bemade to correct it.
If there \[s a viable correction, it will bemade.
Should phrase completion then be possible, a portion ofa sentence could be constructed that is quite different from theone intended by the user.
Such behavior will probably be lessevident in large gramman.
Nevertheless, it may be necessaryto have a "cautious" and "trusting" mode, as in Interlisp'sDWIM (Xerox, 1983), for users who resent the precociousimpat/ence of the interface.The system does not support anaphora, and ellipsis isoffe:ed indirectly.
The interface has two modes: "ENTRY"and "EDIT" (Figure 5).
These are selected by clicking themouse while in the pane at the top right of the interface win-dow.
Rules are normally entered in the Enter mode.
When inEdit mode, the window gives access to the SmalltaLk editor.This allows any text in the window to be modified to create anew statement.
After editing, a menu command is used topass the sentence to the paner  as if it were being typed.
Anyerrc;" in the constructed sentence causes a remedial menu to bedisplayed and the tail of the edited sentence to be thrownaway.The 1HGLISH interface alleviates the problem of linguis-tic coverage for designers and users of natural language inter-faces.
A natural language interface user composes his entriesbearing in mind a model of the interface's capabilities.
If hismodel is not accurate, his interactions will be error-prone.
Hemay excerd the coverage of the system and have his entryrejected.
If this happens frequently, use of the interface maybe abandoned in frustration.
On the other hand he may forman overly conservative model of the system and fail to ur~izethe full capabifities of the interface (Tennant, 1980).
An inter-face designer is confronted by many linguistic phenomena,e.g., noun groups, retative rlauses, ambiguity, reference,ellipsis, anaphora, and paraphrases.
On account of perfor-mance requirements or on a lack of a theoretical understand-ing, many of these constructions will not be in the interface.INGLISH allows designers to rest more comfortably with thecompromises they have made, knowing that users can sys-tematically discover the coverage of the interface.256THE IMPLEMENTATION OF  INGL ISHINGLISH parses incrementally from left to right and per-forms all checking on each word as it is entered.
The parserfollows the Left-Corner Algorithm (Gr/ffiths & Petrick, 1965),modified to a pseudo-parallel format so that it can follow allparses simultaneously (Phillips, 1984).
Th/s algorithm buildsphrases bottom-up from the left-comer, i.e., rules are selectedby the first symbol of their r/ght-hand-s/des.
For example,given a phrase initial category e, a rule of the form X --e - -wi l l  be chosen.
The remaining rule segments of the right-hands/de are predictions about the structure of the remainder of thephrase and are processed left-to-right.
Subsequent inputs willdirectly match success/ve rule segments ff the latter are term/-aal symbols of the grammar.
When a non-terminal symbol isencountered, a subparse is initiated.
The subparse is also con-structed bottom-up from the left-corner, following the ruleselection process just described.
When an embedded rule iscompleted, the phrase formed may have the structure of thenon-terminal category that or/ginated the subparse and so com-plete the subparse.
If there is no match, it will become theleft-corner of a phrase that will eventually match the originat-ing category.The parser includes a Re,whabiliry Mmriz (Griffiths &Petrick, 1965) to provide top-down filtering of rule selection.The mntrix indicates when a category A can have a category Bas a left-most descendant in a passe tree.
The matrix is staticand can be derived from the grammar in advance of any pan.ing.
It is computable as the transitive closure under multiplica-tion of the boolean matrix of left daughters of non-terminalcategories in the grammar.
It is used as a further constraint onrule selection.
For example, when the goal is to construct asentence and the category of the lust word of input is e, thenrule selection, giving X - c --, will also be constrained to havethe property S * X -- The filtering is applicable whenever arule is selected: during subparses the constraint is to reach thecategory originating the subparse.A semantic grammar formalism is used in INGLISH,which make the grammar application dependent.
As was men-tioned earlier, this format was independently chosen as pan ofthe knowledge engineering methodology for describing theavplication domain.
The rationale for the choice forINGLISH was that the simultaneous yntactic and semanticchecking assists in achieving real-time processing.
A fragmentof the grammar is shown in Figure 1.Pre-processing on the grammar coasu'uc:s the terminaland non-terminal vocabularies of the grammar, the reachabllitymatrix, and an inverse dictionary.
The set of all possible initia/words and phrases for sentences can also be precomputed.The Smafltalk system contnin~ controllers that manageactivity on a variety of input devices and from these a con-troller was readily constructed" to coordinate mouse and key-?
Smalltalk is an object-oriented language.
Instead ofcreating a procedure that controls system operation, theuser creates an object (usually a data structure), and aset of methods (operations that transform, and commun-icate with the object).
Smalitalk programs create objectsor send messages to other objects.
Once received, mes-sages result in the execution of a method.Programmers do not create each object and itsmethods individually.
Instead, classes of objects are de-board activity in INGLISH.
Either form of entry incrementsan intermediate buffer which is inspected by the parser.
Whena complete word is found in the buffer it is parsed.Every phra~ in an on-going analys/s is contained in aSmalltalk object.
The final parse is a tree of objects.
Theintermediate state of a parse is represented by a set of objectscontaining partially instantiated phrases.
After the first wordhas established an initial set of phrase objects, they are Dolledby the pa~er for their next segments.
From these and therever~; dictionary, a "lookahead ictionary" is estabfished thatassoc/ates expected words with the phrasal objects that wouldaccept hem.
Using this dictionary an incoming word will onlybe sent to those ob~'ts  that will accept it.
If the word in notin the set of expected words, the dict/onary keys sre used toattempt spelling correction and, iI correction fails, to make themenu to be displayed.
If the dictionary contains only a singleword, this indicates that automatic phrase completion shouldtake place.
A new lookahead ictionary is then formed fromthe updated phrase objects, and so On.KNOWLEDGE TRANSLATIONThe internal form of a diagnostic role is a clause in Pro-log.
Sentences are translated using functional stigmata, as inlexicai-functioaal grammar.
The functional schemata areattached to the phrase structure rules of GLIB (Figure 2).
(t F o a ~ 0  COND roItM), 0 CNCI.
FORM))>(t COND)-.
(t CNCL)-.<ride> -> IF <condition> THEN <conclus/on>(.
r-OaMl--<.~.
((t a~).
(, SYAI"B)}.~(, ~ *  (t SYAI"R)-.<condition> -> <indicator> IS ~ >(.
e'OltM)--<.umn((, oev), ~m')>(, OnV)-,<conclus/on>--> <device> HAS FAILEDFigure 2: GL/B rules with attached schemataUnlike lex/cal-functional grammar, the schemata do not set upconstraint equations as the interface and the semant/c grammarensure the well-formedne~ and unamhigu/ty of the sentence.As a result, propagation of functional structure is handled veryquickly in a post-proce~ng step since the appficable grammati-ca/ rules have already been chosen by the parsing process.Further, by restricting the input to strictly prescribed sub-language GLIB, not Engl~h in general, the Ur~n~Intioa processis s/mplified.fined.
A clam definition describes an object and themethods that it understands.
Classes are structuredh/erarehically, and any class automaticaUy /nheritsmethods from its superclass.As a result of this hierarchy and code inher/tance,applications may be wr/tten by adap~ng previously con-?
strutted code to the ~k  at hand.
Much of the appUca-t/on code can be inherited from prev/ously definedSmaIitalk code.
The programmer need only redefinedifferences by overriding the inappropriate code withcustom/zed code.
(Alexander & Freiling, 1985).257The parser constzvcts a par~ tree with attached sche-mata, referred to as a constituent-structure, or c -s t ructure .Translation proceeds by instantiatinS the meta-vatiablns of theschemata of the c-structm~ created by INGLISH to form func-tional equations which ate solved to produce a functional struc-ture ( f -~e) .
The final rule form is obtained from the f-structure of the sentence when its sub.structures are recursivelytrandormed according to the contents of each f-structure.As an example, given the lexical-functioaal form of thesemantic grammar in Figure 2 and the following sentence:IF LED-2 IS ON THEN TRANSISTOR-17 HAS FAILEDthe' c-structure in Figure 3 would be produced.
This showsthat a rule has a condition part, COND, and a conclus/on part,CNCL, that should become a clausal-form ~Ule(COND,CNCL).
~ The meta-symbol t refers to the parent node and tto the node to which the schema is attached.The final phase of INKA interprets the f-structures toproduce Pmlog clauses.
All of the information required toproduce the clauses is contained in the FORM property in thisexample.
The FORM property is printed, with all variablesinstantiated, to produce the f'mal rule in the form of a Prologclause.
The f-strucntre of Figure 4 produces the Prolog clauserule(state(led-2, on), ~tatus(transistor-17, failed)KNOWLEDGE USETranslated rules are sent to a diagnostic engine that hasbeen implemented ia Pmiog.
The diagnosdc engine usesGLIB statements about he hierarchical structure of the deviceto build a strategy for successive localization of failures.
Start-ing at the highest level ('the circuit" in GLIB terminology),named sub-cimults are examined in turn, and diagnostic rulesretrieved to determine correctness or failure of the sub-circuit<rule>IF <condition.
:> THEN(taqD~/t \] (t ~nl,A~)~.
(t STA~))=~<indicator> IS <state>LED-2 ON<conclusion>(* FOItMl--qmm~(* bey).
(, cev)-.<device>.
HAS FAILEDITR.ANSISTOR- 17Figure 3: C-structureThe functional specifications of the example may besolved by instantiating the recta-symbols with actual nodes andassigning properties and values to the nodes according to thespecifications.
In the example given, most specifications are ofthe form "(t pmpert'y)=value" where "value" is most often *.This form indicates that the node graphically indicated by t in?
the c-structure is the specified property of the parent node(pointed to by *).
Specifications are left-= _~:o?_ lative and have afunctional semantic interpretation.
A specification of (tCOND FORM) refers to the FORM property of the parentnode's COND property.
The f-~mcture for the example isgiven in Figure 4.in question.
If no specific determination can be made, thesub-circuit sa.mumed to be functioning properly.A sample session including acquisition of a rule and ato-ning of a test diagnosis i  shown in Figure 5.
The circuit usedin this example consists of an oscillator wh/ch drives a lightemitting diode (LED-2 in the schematic) and a power supply(LED-1 indicates when the power supply is on).
Theschematic diagram of the circuit is in the upper pane of the"Insu'ument Data" window; the circuit board layout is in thelower pane.
Rules for diagnosing problems in the circuit| IND led-2COND\[ STATE on\[ FORM <sta~(O IND FORM), (t STATE FORM))>CNCL \[ DEV tr~i,~torol7t FORM <s~u.?
((, DEV), fa~ed)>t FORM <rule(O COND), (, CNCL))>Figure 4".
F-structure258GUll Knowledge Acquisition EntryIF NODE 4 VOLTAGE IS EQUAL TO NODE 5 VOLTAGE THEN RESISTOR 2 HAS FAILED .
"PARSEDrula(comp(aq.voltage(nods(4)).voltags(nods(5 ))).status(componsnt(r ssistor(2))0 f ailed),-)IF lOWER SURLY 1.CURRENT ($3)FREQUENCY (#4)HAS FAILED (#5)IMPEDANCE (#6)IS (ltT~POWER (#111RESISTANCE (#12VOLTAGE (#13)"'ABORT 1#14)Is led number 2 not flashing?
yesWhat is the voltage of node number 2?
15IS led numl:)ef 1 dim?
noIs it true that the voltage of node number 4 is equal to thevoltage of node number .5?
yesOscillator number 1 is failing.Resistor number 2 iS failing.Instrument (3ateI.
No,.555 I ~ ~4.oo~-, ~ .~.~ : I ,J,,,i", ~=' 'c= Innnnnnann nnnnnEI l n n n n n n n n n n n ~ ~ '  ', ,.
~',;_~ ?.V.~ n n n nEI ID l=e~l=l= l i l=~~, , , - .
-~ .
,.-, ' .
, .
.
, i i l l~ l= l= i i |I l n n n n n n n ~ n n n n n n n n = ~ .
~  nn  n n=~I=IOI I i iD  rrll.
l,,~ ....
~,~.
'~ = ~ = I= = l= I= n Q" '~ =131=0\ [I l nnnnnnn~ ~n~n~nnnqnvt  ~nnn?~ll l=nnnnnni!
: - .+~'i .
,!
;'::,,.~ n | i  .,..
:.~i~n n l iq  nli=.,'t~= n nn  nqll lnn anna  nilii.
;.~ ::~..i.,.,~ n B~,:~.~i~!>.,,~ a n i l  n i l  n n n n n n n , lI l nnnnann~.
, '~ ,~n~nnn lu innn  an  nnqlFigure 5: An \[\]gKA ===/on('troubleshooting" rules) are added to the system in the win-dow labeled "INGLISH."
The interface to the diagnnszi?engine is in the "Prolog" window.
The " INGLISI I"  windowshows a recently added rule, with its Prolog translationimmediately below it.
It also shows a partially completed rulealong with a menu of acceptable sentence continuations.
Theuser may select one of the menu items (either a word orphrase) to be appendcd to the current sentence.
The "Pmlog"window displays the results of a recent est diagnosis.
This testwas run after the first rule in the ~NGLISH"  window wasadded, but before the addition of the second rule was begun.The last question asked during the diagnosis corresponds to thefirst rule.
Resistor 2, in both the schematic and boarddiagrams of the =Instrument Data" window, is highlighted as aresult of running the diagnos/s: whenever the diagnnstic engineselects a specific component for consideration that componentis highlighted on the display.
Some 20 statements and ruleshave been col lected '.
'or diagnosing the circuit; Figure 6 lists aportion of them with their Prolog translation.259THE CIRCUIT CONTAINS OSCILLATOR-1 AND POWERSUPPLY-1.has_cemponent(block(circult), block(oscillator(1))).has_component(block(c/rcuit), block(powetlupply(1))).RESISTOR-1 IS PART OF OSCILLATOR-1.has.xomponent(block(o~-fllator(I)), component(resistor(l))).IF LED-2 IS NOT FLASHING AND THE VOLTAGE OF NODE-2  IS EQUALTO 15 VOLTS THEN OSCILLATOR-1 HAS FAILED.rule(and(not(state(led(2), flashing))),comp(voltage(node(2)), If)),status(block(oscillator(I)), fa/led),\[\]).IIF \[..,ED-,1 IS DIM AND LED-2 IS OFF THEN ~ISTOR-1  HAS FAILED.rule(and(state(led(l), dim),state(led(2), off)),status(component(resistor(1)), failed),\[\]).Figure 6: GLIB rules with Pmlog translationsDISCUSSIONInformal observations show that subjects generally needonly a few minutes of instruction to start using INGLISH.
Ini-tially there is a preference to tt~ the mouse to explore the cov-erage and then to begin to incorporate some typing.
We havenot had any long-term use~ to observe their trends.Use~ could react negatively to limited language systems;even when the coverage is well-engineered users will occasion-ally encounter the boundaries.
Fortunately, Headier &Michaelis (1983) found that subjects were able to adapt o lim-ited language systems.INGLISH does not let the designer off the hookl A umrcan still have a statement in mind and not easily f'md a way toexpre~ it through the grammar.
Diligent engineering is stillneeded to prepare a grammar that will allow a user to beguided to a paraphrase of his or/ginal thoughL Nevertheless,the grammar design problem is simplified: when guidance isprovided fewer paraphrases need be incorporated.The use of a semantic grammar to define the fragment ofEnglish to be processed oes impose limitations on the com-plexity of acceptable input.
In the INKA system as it iscurrently cen.mxtcted, however, them are two distinct ways inwhich the semantic orrectness of an input can be enforced,tint in the parsing of the of the semantically ceRstralnedgrammar, and second in the tran.qat/on process, as the ftmc-donal structures are built.In short, the our approach to building practical naturallanguage inte~.-ees does not depend on a semantic grammar to?oastra/n input.
In the future we intend to explore the u~ ofa wider class of grammars that include a domain-independentkernel and a domain-specific component, like GLIB.
In thisapproach we are in substantial agreement with Winograd(1984) who advocates a similar approach as an effective diroc.finn for further naturul language resea~h.REFERENCESAlexander, J.H., & Freiling, MJ.
Building an Expert Systemin SmalRalk-80 (R).
Systems and Software, 1985, 4, 111-118,Alexander, J.H., Freiling, MJ., Messick, S.L., & Reh/uss, S.Efficient Expert System Development Through Domain-Specific Tools.
Proceedings of the F~fth International WorkJhopon Expert Systems and their Applications, Avignon, France,Burton, R.R.
Semamic Grammar: los Eng~ncering Tecb, n i~  forConsmac:ing Natural lamgaage UnderstmTding System.v (Techni.caJ Report No.
3453).
Cambridge, MA: Bolt, Beranek, &Newman Inc., 1976.Carbonell, J.G., & Hayes, PJ.
Recovery Strate~es for Pars-ing Extragrammatical Language.
American Journal of Computa-tional Linguimics, 1983, 3-4, 123.146.Davis, R. Interactive Transfer of Expertise: Acquisition ofNew Inference Rules.
Proceedings of the Fifth InternationalJoint Colrference on Art~iciai intelligence, Cambridge, MA,1977, 321-328.\[DEC\] TOPS-20 Reference MammL Maynard, MAt DigitalEquipment Corporation, 1971.Freiling, MJ., & Alexander, J.H.
Diagrams and Grammar:Tools for the Mass Production of Expert Systems.
1EEE FirstConference on Ar~ficial Intelligence Applications.
Denver,Colorado, 1984.Freiiing, M., Alexander, J., Feucht, D., & Stubbs, D. GL/B -A LAnguage for gepreeentmg the Behavior of Electronic Devices(Technical Report CR-&t-12).
Beaverton, OR: Tektronix,Inc., 1984.Gilfoil, D.M.
Warming up to Computers: A Study of Cogni-five and Affective Interaction over Time.
Proceedings of theHaman Fncterx in Computer 5y~ema Conference, Gaithersburg,MD, 1982, 245-250.Goldberg, A.
& Robson, D. Smalltaik 80: The l,a~guage andits lmpiemamtmiom.
Re-dlng, MA: Addison-Wesley, 1983.260Griffiths, T., & Petr/ck, $.R.
"On the relative efficiency ofcoatext.free grammar recoe, niT~ru.
?
Comm.
ACM,  1965, 8,289-300.Headier, J.A., & Michnefis, P.R.
The Effects of LimitedGrammar on Interactive Natural Language.
ProceEdings of thaHuman Factors in Computer Systems Conference, Bo~a,  MA,1983, 190.192.Kaplan, R.M., & Bre, mnn, J.W.
Lex/cal-Funct/onal Grammar:.A Formal System for Grammatical Representat/oa.
In J.Brecmm (Ed.
), T~ Ment~ Representation f O r ~  Rein.r/ore.
Cambridge, MA: MIT  Press, 1982.McKeowa, K.R.
Natural Language for Expert Sy~ems: Corn-par/son with databa~ systems.
Proceedings of tha InternationalConference on Computational l, in~rics, Stanford, CA, 1984,190-193.Phillips, B. Aa Ob~'t-or/ented Parser.
la B.G.
Barn & G.Gnida (Eds.
), Computational Models of Natara~ Langaage Pro.?Lu/nz.
Amsterdam: North-Holland, 1984.Phillips, B., & NichoH, S. INGUSH: A Nanwal Language Inter.face (Techn/cal Report CR-84-27).
Beaverton, OR: Tek-tronix, Inc., 1984.Tennant, H.R.
Evaluation of Natural Language Processors(Technical Report 1"-103).
Coordinated S?/eace Laboratory,University of Illinois, Urbana, IL, 1980.Tennaat, H.R., Ross, K.M., & Thompson, C.W.
UsableNatural Language Interfaces Through Menu-Based Namra/Language Understanding.
Proceedings of the Human Factors inComputer ~,, ystem.t Conference, Boston, MA, 1983, 190-192.Winograd, T. Mov/ng the Semans/?
Fu/o'um (Techn/cal Report84-17).
Center for the Study of Language and laformat/an,Stanford, CA, 1984.\[Xerox\] Interlixp Reference Manual  Palo Alto, CA: XeroxPalo Alto Research Center, 1983.261
