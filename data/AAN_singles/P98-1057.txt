Group Theory and Linguistic Processing*Marc DymetmanXerox  Research  Centre  Europe6, chemin  de Mauper tu i s38240 Mey lan ,  F ranceMarc .
Dymetman@xrce .
xerox ,  com1 IntroductionThere is currently much interest in bringing togetherthe tradition of categorial grammar, and especially theLambek calculus (Lambek, 1958), with the more recentparadigm of linear logic (Girard, 1987) to which it hasstrong ties.
One active research area concerns the de-sign of non-commutative rsions of linear logic (Abr-usci, 1991; Rdtor6, 1993) which can be sensitive to wordorder while retaining the hypothetical reasoning capabil-ities of standard (commutative) linear logic that make itso well-adapted to handling such phenomena as quanti-fier scoping (Dalrymple t al., 1995).Some connections between the Lambek calculus andgroup structure have long been known (van Benthem,1986), and linear logic itself has some aspects tronglyreminiscent of groups (the producer/consumer duality ofa formula A with its linear negation Aa-), but no seriousattempt has been made so far to base a theory of linguis-tic description solely on group structure.This paper presents uch a model, G-grammars (for"group grammars"), and argues that:?
The standard group-theoretic notion of conjugacy,which is central in G-grammars, is well-suited toa uniform description of commutative and non-commutative aspects of language;?
The use of conjugacy provides an elegant approachto long-distance dependency and scoping phenom-ena, both in parsing and in generation;?
G-grammars give a symmetrical account of thesemantics-phonology relation, from which it is easyto extract, via simple group calculations, rewritingsystems computing this relation for the parsing andgeneration modes.2 Group ComputationA MONOID AI is a set M together with a product M ?31 --+ ,ll, written (a, b) ~+ ab, such that:?
This product is associative;?
There is an element 1 E M (the neutral element)with la = al  = a for all a 6 M.* This paper is an abridged version of Group Theory and Gram-matical Description, TR-MLTT-033, XRCE, April 1998; availableon the CMP-LG archive at the address: http://xxx.lanl.gov/abs/cmp-Ig/9805002.A GROUP is a monoid in which every element a has aninverse a -1 such that a-  l a = aa -1 -- l.A PREORDER on a set is a reflexive and transitive re-lation on this set.
When the relation is also symmetrical,that is, R(x,  Y) ~ R(y,  x), then the preorder is called anEQUIVALENCE RELATION.
When it is antisymmetrical,that is that is, R(x ,  Y) A R(y,  x) ~ x = Y, it is called aPARTIAL ORDER.A preorder R on a group G will be said to be COM-PATIBLE with the group product iff, whenever R(x, Y)and R( x', y'), then R( xx' ,  yy').Normal submonoids of a group.
We consider a com-patible preorder notated x -4 y on a group G. The fol-lowing properties, for any x, y E G, are immediate:x -+ y ?
:~ x y -  l -41;x -4 y ?0 y - l  -4 x-1;x-41  ?
:v 1 -4x -~;x-41  :::?, yxy - l  -41 ,  fo ranyyEG.Two elements x, x' in a group G are said to be CONJU-GATE if there exists y 6 G such that x' = yxy  -1.
Thefourth property above says that the set A,/ of elementsx 6 G such that x -41 is a set which contains along withan element all its conjugates, that is, a NORMAL subsetof G. As M is clearly a submonoid of G, it will be calleda NORMAL SUBMONOID o f  G .Conversely, it is easy to show that with any nor-mal submonoid M of G one can associate a pre-order compatible with G. Indeed let's define x -+ yas xy  -1 6 M. The relation --~ is clearly reflex-ive and transitive, hence is a preorder.
It is alsocompatible with G, for if xl --)- yl and x2 -4 y_~, thenxly1-1, x2yg.
-1 and yl (x~y2-1)y1-1 are in M; henceXlX2y~.-ly1-1 : x ly l - l y lx~.y2-1y1-1  is in M, im-plying that XlX2 -4 y ly: ,  that is, that the preorder iscompatible.If S is a subset of G, the intersection of all normalsubmonoids of G containing S (resp.
of all subgroupsof G containing S) is a normal submonoid of G (resp.
aJ ln general M is not a subgroup of G. It is iff x ~ y impliesY --+ x, that is, if the compatible preorder --~ is an equivalence re-lation (and, therefore, a CONGRUENCE) on G. When this is the case,M is a NORMAL SUBGROUPof G. This notion plays a pivotal role inclassical algebra.
Its generalization to submonoids of G is basic for thealgebraic theory of computation presented here.348normal subgroup of G) and is called the NORMAL SUB-MONOID CLOSURE NM(S) of S in G (resp.
the NOR-MAL SUBGROUP CLOSURE NG(S) of S in G).The free group over %'.
We now consider an arbitraryset V, called the VOCABULARY, and we form the so-called SET OF ATOMS ON W, which is notated V t_J V -1and is obtained by taking both elements v in V and theformal inverses v-1 of these elements.We now consider the set F(V)  consisting of the emptystring, notated 1, and of strings of the form zxx~....:e,,where zi is an atom on V. It is assumed that such astring is REDUCED, that is, never contains two consecu-tive atoms which are inverse of each other: no substringvv-1 or v-1 v is allowed to appear in a reduced string.When a and fl are two reduced strings, their concate-nation c~fl can be reduced by eliminating all substrings ofthe form v v-  1 or v -  1 v. It can be proven that the reducedstring 7 obtained in this way is independent of the orderof such eliminations.
In this way, a product on F (V)is defined, and it is easily shown that F(V)  becomes a(non-commutative) group, called the FREE GROUP overV (Hungerford, 1974).Group computation.
We will say that an ordered pairGCS = (~, R) is a GROUP COMPUTATION STRUCTUREif:1.
V is a set, called the VOCABULARY, or the set ofGENERATORS2.
R is a subset of F(V) ,  called the LEXICON, or theset of RELATORS.
2The submonoid closure NM(R) of R in F (V)  is calledthe RESULT MONOID of  the group computation structureGCS.
The elements of NM(R) will be called COMPU-TATION RESULTS, or  simply RESULTS.If r is a relator, and if ct is an arbitrary element ofF(V) ,  then ct, rc~ -1 will be called a QUASI-RELATOR ofthe group computation structure.
It is easily seen thatthe set RN of quasi-relators i equal to the normal sub-set closure of R in F(V) ,  and that NM(RN) is equal toNM(R).A COMPUTATION relative to GCS is a finite sequencec = (rl .
.
.
.
, rn) of quasi-relators.
The product rx ?
?
?
r,,in F (V)  is evidently a result, and is called the RESULTOF THE COMPUTATION c. It can be shown that the resultmonoid is entirely covered in this way: each result isthe result of some computation.
A computation can thusbe seen as a "witness", or as a "proof", of the fact thata given element of F (V)  is a result of the computationstructure.
3For specific computation tasks, one focusses on resultsof a certain sort, for instance results which express a re-lationship of input-output, where input and output are2 For readers familiar with group theory, this terminology will evokethe classical notion of group PRESENTATION through generators andrelators.
The main difference with our definition is that, in the classicalcase, the set of relators is taken to be symmetrical, that is, to containr -1 if it contains r. When this additional assumption is made, ourpreorder becomes an equivalence r lation.3The analogy with the view in constructive logics is clear.
Therewhat we call a result is called a formula or a tbpe, and what we call acomputation is called aprot~j john -11 louise -1p partsra man -1W woman -1A -I r (A) ran -1A -I s (A, B) B -I saw - IE -I i (E,A)  A -I in -It(N) N -I the -Iev(N,X ,P \ [X \ ] )  p\ [x\ ] -1 ~- i  X N -I ever)' -asm(N,X ,P \ [X \ ] )  p\ [x\ ] -1 ~- i  X N -1 some -xN -I t t (N ,X ,P \ [X \ ] )  p\[X\] -I a -I X ~ that - IFigure 1 : A G-grammar for a fragment of Englishassumed to belong to certain object types.
For exam-ple, in computational linguistics, one is often interestedin results which express a relationship between a fixedsemantic input and a possible textual output (generationmode) or conversely in results which express a relation-ship between a fixed textual input and a possible seman-tic output (parsing mode).If GCS = (V, R) is a group computation structure,and if A is a given subset of F(V) ,  then we will callthe pair GCSA = (GCS, A) a GROUP COMPUTATIONSTRUCTURE WITH ACCEPTORS.
We will say that Ais the set of acceptors, or the PUBLIC INTERFACE, ofGCSA.
A result of GCS which belongs to the publicinterface will be called a PUBLIC RESULT of GCSA.3 G-GrammarsWe will now show how the formal concepts introducedabove can be applied to the problems of grammaticaldescription and computation.
We start by introducinga grammar, which we will call a G-GRAMMAR (for"Group Grammar"), for a fragment of English (see Fig.1).A G-grammar is a group computation structure withacceptors over a vocabulary V = Vlog U ~/pho~ con-sisting of a set of logical forms l/~og and a disjointset of phonological elements (in the example, words)l/~ho,,.
Examples of phonological elements are john,saw, ever).,, examples of logical forms j ,  s ( j ,  1) ,ev  (re,x, sra(w,y,  s (x ,y ) )  ); these logical forms canbe glossed respectively as "john", "john saw louise" and"for every man x, for some woman y, x saw y".The grammar lexicon, or set of relators, R is given as alist of"lexical schemes".
An example is given in Fig.
1.Each line is a lexical scheme and represents a set of re-lators in F(V) .
The first line is a ground scheme, whichcorresponds to the single relator j john-1, and so arethe next four lines.
The fifth line is a non-ground scheme,which corresponds to an infinite set of relators, obtainedby instanciating the term meta-variable A (notated in up-percase) to a logical form.
So are the remaining lines.We use Greek letters for expression meta-variables suchas a, which can be replaced by an arbitrary expressionof F(V) ;  thus, whereas the term meta-variables A, B .....range over logical forms, the expression meta-variables,~, fl ..... range over products of logical forms and phono-349logical elements (or their inverses) in F(V) .
4The notation p \[x\] is employed to express the factthat a logical form containing an argument identifier xis equal to the application of the abstraction P to x. Themeta-variable X in p \[X\] ranges over such identifiers (x,y, z .... ), which are notated in lower-case italics (and arealways ground).
The meta-variable p ranges over logi-cal form abstractions missing one argument (for instanceAz.
s ( j ,  z) ).
When matching meta-variables in logicalforms, we will allow limited use of higher-order unifica-tion.
For instance, one can match P \[X\] to -~ ( j  ,x) bytakingP = Az.s( j ,  z) and X = x.The vocabulary and the set of relators that we have justspecified define a group computation structure GCS =(I,, _R).
We will now describe a set of acceptors A forthis computation structure.
We take A to be the set ofelements of F (V)  which are products of the followingform:S l I /n - lWr~_1-1  .
.
.
IV1 -1where S is a logical form (S stands for "semantics"),and where each II';- is a phonological element (W standsfor "'word").
The expression above is a way of encodingthe ordered pair consisting of the logical form S and thephonological string 111 l,I) .
.
.
l.I;~ (that is, the inverse ofthe product l, Vn- 11Vn- 1 - I .
.
.
I.V1-1).A public result SWn- lWn_ l -1 .
.
.
t ' Iq  -1 in thegroup computation structure with acceptors ((V, R), A)- -  the G-grammar - -wi l l  be interpreted as meaning thatthe logical form S can be expressed as the phonologicalstring IV1 l'l:~ ' .. lYn.Let us give an example of a public result relative to thegrammar of Fig.
1.We consider the relators (instanciations of relatorschemes):r l  = j -1  s ( j ,1 )r,_ = 1 louise -1r3  = j j ohn  - tI -  1 saw-1and the quasi-relators:' - i  r l '  = j r l  3r2 '  = ( j  san,)  r2r3  ' = r3j saw) - iThen we have:r l '  r2 '  r3 '  =j j-1 s(j,l) i-I saw-1 j-Ij saw 1 louise-1 saw-  1. j -1j j ohn-1  = s ( j ,1 )  louise-1 saw-  1 john-  xwhich means that s ( j ,  1 ) louise-I  saw-  l j ohn-  1 is theresult of a computation (r~ ' ,  r2 ' ,  r3 ' ) ?
This resultis obviously a public one, which means that the logi-cal form s ( j ,  1 ) can be verbalized as the phonologicalstring john saw louise.4Expression meta-variables are employed in the grammar for form-ing the set of conjugates c~ e:cp ~-1  of certain expressions ezp (inour example, earp is ov{N,X ,P \ [X \ ]  ) P\[X\] -1 ,  sm(N,X ,P \ [X \ ]  )P \[X\] -1  or X).
Conjugacy allows the enclosed material exp to moveas a bh, ck in expressions of F (V) ,  see sections 3. and 4.j ~ johni ~ louisep ~ parism ~ manw ~ womanr (A)  -~ A rans (A,B) -~ A saw Bi (E ,A)  -~ E in At (N)  --~ the Nev(N,X ,P \ [X \ ] )  ~ ce -1sm(N,X ,P \ [X I )  ...x cr -1t t  (N ,X ,P \ [X \ ] )eveo'  N X -a  oc P \ [X \ ]some N X -1 a P \ [X \ ]N that a -a X -1 c~ P \ [X \ ]Figure 2: Generation-oriented rules4 Generat ionApplying directly, as we have just done, the definition ofa group computation structure in order to obtain publicresults can be somewhat unintuitive.
It is often easier touse the preorder --+.
If, for a, b, c 6 F (V) ,  abc is a rela-tor, then abc --+ 1, and therefore b --+ a - l c  -1.
Taking thisremark into account, it is possible to write the relators ofour G-grammar as the "rewriting rules" of Fig.
2; we usethe notation ----" instead of --+ to distinguish these rulesfrom the parsing rules which will be introduced in thenext section.The rules of Fig.
2 have a systematic structure.
Theleft-hand side of each rule consists of a single logicalform, taken from the corresponding relator in the G-grammar; the right-hand side is obtained by "moving"all the renmining elements in the relator to the right ofthe arrow.Because the rules of Fig.
2 privilege the rewriting ofa logical form into an expression of F (V) ,  they arecalled generation-oriented rules associated with the G-grammar.Using these rules, and the fact that the preorderis compatible with the product of F (V) ,  the fact thats ( j ,  1 ) l ou i se - l saw- l john  - 1 is a public result can beobtained in a simpler way than previously.
We have:s ( j , l )j ~ john1 ~ louisej saw 1by the seventh, first and second rules (properly instanci-ated), and therefore, by transitivity and compatibility ofthe preorder:s ( j ,1 )  ~ j saw 1john saw 1 ~ john saw louisewhich .proves that s ( j ,  1 ) ---~john saw louise,which Is equivalent to saying that s ( j ,  1)louise- 1 saw-  l j ohn-  1 is a public result.Some other generation examples are given in Fig.
3.The first example is straightforward and works simi-larly to the one we have just seen: from the logical form5.
( s ( j ,  1 ) ,  p)  one can derive the phonological stringjohn saw louise in paris.350i(s(j, l) ,p)-~ s(j,l) in p_.x j saw 1 in p--~ john saw 1 in pjohn saw louise in pj ohn  saw louise in parisev(m,x,sm(w,y, s (x,y) ) )--~ ct -I every m x -I c~ sm(w,y ,s (x ,y ) )0 -1 every m x -1 o~ 19 -1 some w y-1 /3 s (x,y)---, cr -~ every man x -1 a/3-1 some woman y -1  /3 x saw ya -1 every man x -1 a x saw some woman(by taking/3 = saw -1 x -1)__x every man saw some woman(by taking a = 1)sm(w,y,ev(m,x, s (x,y) ) )._~ /3-i some w y-1 /3 ev(m,x ,s (x ,y ) ) )/3 - I  some w y -1  /9 ce-1 ever)' m x -1 ce s (x ,y )--~ /3 -1 some woman y -1  flc~ -1 ever), man x -1 ce x saw y/3 -1 some woman y -1  /3 every man saw y(by taking a = 1).--, every man saw some woman(by taking/3 = saw -1 man -a every -1)Figure 3: Generation examplesmerit, quantified noun phrases can move to whateverplace is assigned to them after the expansion of their"scope" predicate, a place which was unpredictable atthe time of the expansion of the quantified logical form.The identifiers act as "target markers" for the quantifiednoun phrase: the only way to "get rid" of an identifier xis by moving z -1 ,  and  therefore  w i th  it the cor respond-ing quant i f ied  noun  phrase ,  to a place where it can cancelwith z.5 ParsingTo the compatible preorder ~ on F(V)  there corre-sponds a "reverse" compatible preorder ---, defined asa ---, b iff b ~ a, or, equivalently, a -  1 __+ b- 1.
The nor-mal submonoid M '  in F(V)  associated with ---, is theinverse monoid of the normal submonoid M associatedwith ~,  that is, M '  contains a iff M contains a -  1.It is then clear that one can present he relations:j j ohn- i - -+  1A- I r (A)  ran - I -+  1sm(N,X ,P \ [X \ ] )  P \ [X \ ] - I~- IX  N- isom e- l -+etc.in the equivalent way:j ohn  j -1 ._ .
,  1ran r (A) - IA  ---7 1some N x- lo  ' P\[X\]etc.sm(N,X ,P \ [X \ ] ) -1~-1-v  1Long-distance movement and quantifiers The sec-ond and third examples are parallel to each other andshow the derivation of the same string ever}' man sawsome woman from two different logical forms.
Thepenultimate and last steps of each example are the mostinteresting.
In the penultimate step of the second exam-ple,/3 is instanciated to saw -1  x -1  .
This has the effect of"moving" as  a who le  the expression some woman y -~to the position just before y, and therefore to allow for thecancellation of y -  * and y.
The net effect is thus to "re-place" the identifier y by the string some woman;  in thelast step c~ is instanciated to the neutral element 1, whichhas the effect of replacing x by ever}' man.
In the penul-timate step of the third example, a. is instanciated to theneutral element, which has the effect of replacing x by ev-ery  man;  then fl is instanciated to saw-1man- levery -1 ,which has the effect of replacing y by some woman.Remark .
In all cases in which an expression similar toa al  .
.
.
am a -1  appears (with the ai arbitrary vo-cabulary elements), it is easily seen that, by giving a anappropriate value in F(V) ,  the al .
.
.
am can move ar-bitrarily to the left or to the right, but  on ly  together  inso l idar i ty ;  they can also freely permute cyclically, thatis, by giving an appropriate value to a, the expressiona al .
.
.
am a - l  can take on the value ak ak+l .
.
-a,,, al ?
?, ak-1 (other permutations are in general notpossible).
The values given to the or, fl, etc., in the exam-ples of this paper can be understood intuitively in termsof these two properties.We see that, by this mechanism of concerted move-john --~ jlouise ---, 1paris ---, pman --, mwoman -.--, Wran -= A -1 r(A)saw -v A -I s(A,B) B -Iin --, E -I i(E,A) A -Ithe --7 t(N) N -Iever)' --, o ev(N,X,P\[X\])some --, c~ sm(N,X,P\[X\])that -v  N -I t t(N,X,P\[X\])p\[x\]-I ~-I X N -IP\[X\]-a ~-1 X N -Ip\[x\]-1 ~-I XFigure 4: Parsing-oriented rulesSuppose now that we move to the right of the --7 ar-row all elements appearing on the left of it, but for thesingle phonological element of each relator.
We obtainthe rules of Fig.
4, which we call the "parsing-oriented"rules associated with the G-grammar.By the same reasoning as in the generation case, it iseasy to show that any derivation using these rules andleading to the relation PS  --,  LF ,  where PS  is a phono-logical string and LF  a logical form, corresponds to apublic result LF  PS  -1  in the G-grammar.A few parsing examples are given in Fig.
5; they arethe converses of the generation examples given earlier.In the first example, we first rewrite each of thephonological elements into the expression appearing on351j ohn  saw lou ise  in par i s--, j A -1 s (A,B)  B -1 i E -a--, s ( j ,B)  B -I 1 E -I i (E ,p)--, s ( j , l )  E -I i (E ,p)--, i ( s ( j , l )  ,p)i (E ,C)  C -a pever  3 , man saw some woman?
- ,  cr ev (N ,x ,P \ [x \ ] )  P \ [x \ ]  - I  a -1 X N -1 m A -1 s (A ,B)  B -1 /3 sm(M,y ,Q\ [y \ ] )  Q \ [y \ ] - i---, ~ ev(m,x ,P \ [x \ ] )  P lx \ ]  -a  o~ -1 x A -x s (A ,B)  B -1 /3 sm(w,y ,Q\ [y \ ] )  Q \ [y l -a  /3-1 y---, x A -a ev(m,x,P\[x\]) P\[x\] - I  s(A,B) B -1 /3 sm(w,y,Q\[y\])  Q\ [y \ ] - i  /3-a y- ,  x A -1 ev(m,x ,P \ [x \ ] )  P\[x\] -a s(A,B) Q\ [y \ ] - i  sm(w,y,Q\[y\])  B -1 y--, ev (m,x ,P \ [x l )  P\[x\] -a s(x,y)  Q\[y\]-a sm(w,y,Q\[y\])and then either:---, ev(m,x,P\[xl)  P\[xl -a sm(w,y,s(x,y))--, ev(m,x, sm(w,y,s(x,y)  )or:---, ev (m,x ,  sO<,y) )  Q\[y \ ] - i  sm(w,y ,Q\ [y \ ] )sm(w,y, ev (m, x, s (x,y))Figure 5: Parsing examples~-*yM- lwthe right-hand side of the rules (and where the meta-variables have been renamed in the standard way to avoidname clashes).
The rewriting has taken place in par-allel, which is of course permitted (we could have ob-tained the same result by rewriting the words one byone).
We then perform certain unifications: A is uni-fied with j ,  C with p; then B is unified to 1.
5 Finally Eis unified with s ( j ,  i ), and we obtain the logical form?
( s ( j ,  3. )
,  p ).
In this last step, it might seem feasibleto unify v. to ?
(E, p) instead, but that is in fact forbid-den for it would mean that the logical form -i ( E, p) isnot a finite tree, as we do require.
This condition pre-vents "self-cancellation" of a logical form with a logicalform that it strictly contains.Quantif ier scoping In the second example, we startby unifying m with N and w with M; then we "move"P\ [x \ ]  -1  next to s (A ,B)  by taking a = xA-1 ;  6 thenagain we "move" Q \[y\] -1 next to s (A, B) by taking fl= B sm (w, y, Q \[y\] ) -1; x is then unified with A and ywith B.
This leads to the expression:ev(m,x ,  P\[x\] ) P \ [x \ ] - l s  (x, y )Q\ [y \ ] - l sm(w,  y,Q\[y\] )where we now have a choice.
We can eitherunify s (x ,y )  with Q\ [y \ ] ,  or with P \ [x \ ] .
In the5Another possibility at this point would be to unify 1 with E ratherthan with E. This would lead to the construction of the logical formi ( 1, p ), and, after unification of E with that logical form, would con-duct to the output s ( j ,  i ( 1, p)  ).
If one wants to prevent this output,several approaches are possible.
The first one consists in typing the log-ical form with syntactic ategories.
The second one is to have some no-tion of logical-form well-formedness (or perhaps interpretability) dis-allowing the logical forms i ( 1, p) \[louise in paris\] or i ( t (w), p)\[(the woman) in paris\], although it might allow the form t ( i  (w, p) )\[the (woman in paris)\].t'We have assumed that the meta-variables corresponding to identi-fiers in P and Q have been instanciated toarbitrary, but different, valuesx and y.
See (Dy,netman, 1998) for a discussion of this point.first case, we continue by now unifying P Ix\]with sm(w,y ,s (x ,y )  ), leading to the outputev(m,x ,  sm(w,y ,s (x ,y ) ) ) .
In the sec-ond case, we continue by now unifying Q\[y\]with ev(m,x ,s (x ,y )  ), leading to the outputsm(w,y,  ev (m,x ,s (x ,y ) ) .
The two possiblequantifier scopings for the input string are thus obtained,each corresponding to a certain order of performing theunifications.AcknowledgmentsThanks to Christian Retor6, Eric de la Clergerie, AlainLecomte and Aarne Ranta for comments and discussion.ReferencesV.M.
Abrusci.
1991.
Phase semantics and sequent cal-culus for pure non-commutative classical inear logic.Journal of Symbolic Logic, 56(4).M.
Dalrymple, J. Lamping, E Pereira, and V. Saraswat.1995.
Linear logic for meaning assembly.
In Proc.CLNLP, Edinburgh.Marc Dymetman.
1998.
Group computation and its ap-plications to linguistic description.
(in preparation).J.Y.
Girard.
1987.
Linear logic.
Theoretical ComputerScience, 50(1).Thomas W. Hungerford.
1974.
Algebra.
Springer-Verlag.J.
Lambek.
1958.
The mathematics of sentence struc-ture.
American Mathematical Monthly, 65:154-168.C.
R4tor& 1993.
Rdseaux et sdquents ordonn~s.
Ph.D.thesis, Univ.
Paris 7.Johan van Benthem.
1986.
Essays in Logical Semantics.D.
Reidel, Dordrecht, Holland.352
