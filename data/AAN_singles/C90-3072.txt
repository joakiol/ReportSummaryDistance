Spelling-checking for Highly Inflective LanguagesJan Haji:*, Jant~ Drdzd***Research Institute of Computing MachineryLoret~ask6 nfim.
3Praha 1Czechoslovakia**Computer Centre of the Czechoslovak Academy of SciencesPod vodfu~nskou v~ 2Praha 8CzechoslovakiaAbstractSpelling-checkers have become an integral partof most text processing software.
From different rea-sons among which the speed of processing prevailsthey are usually based on dictionaries of word formsinstead of words.
This approach is sufficient forlanguages with little inflection such as English, but failsfor highly inflective languages such as Czech, Russian,Slovak or other Slavonic languages.
We havedeveloped a special method for describing inflectionfor the purpose of building spelling-checkers for suchlanguages.
The speed of the resulting program liessomewhere in the middle of the scale of existingspelling-checkers for English and the main dictionaryfits into the standard 360K floppy, whereas the numberof recognized word forms exceeds 6 million (forCzech).
Further, a special method has been developedfor easy word classification.1.
IntroductionAfter some delay, personal computers are nowwidely available in countries speaking Slavoniclanguages.
Of course, they are used, i.a., for text pro-cessing.
After solving the obvious problems withnational alphabets (most of which are unfortunately notincluded in the standard IBM character set), thedemand for a spelling-checker followed.
The problemwith Slavonic languages in general and with Czech inparticular is that they consist of millions of word forms,thus the space needed for storing all of them directlygrows over an acceptable boundary (whereas a typicalCzech noun without "direct" derivatives has 7 differentforms, an adjective could have 80 forms and a verb,which typically forms a dozen of derivatives - multi-plied by ten or so possible prefixes - more than 5000).Then, two methods are available to overcomethis problem:1) to compress the forms somehow, still allowing fastaccess;2) to use linguistic knowledge about he regularities ofthe morphological behaviour of the words.The first method fails after some investigations,even when considering some probabilistic models(which, using the multiple bit hash tables method(Fiala, 1986) with probability of false answers below0.0005, cannot use less than 2 bits per word formstored).Using the knowledge collected over generationsof Czech linguists (e.g, Havr~nek and Jedli~ka, 1963;Slavi~kov~, 1975) and especially the latest works of thePrague group led by prof. P. Sgall (Panevovfi et al,1981; Weisheitelovh, Krhrakovh and Sgall, 1982;Kirschner, 1983) we adapted the second method for thepurpose of a spelling checking program to meet thecompeting requirements on space, speed and complete-ness.2.
The Model of InflectionFirst, we decided to exclude the phonology levelwhich is usually part of a morphological processing,because of the time penalty it would cause during pro-cessing.
This means that all the phonological changes,although some of them are really regular, have to betreated in a single processing step together with themorphotactics.
The space increase caused by this deci-sion is still acceptable (for Czech, and, as far as weknow, for the other Slavonic languages too).The basic model of inflection we use assumesthat a word form is a concatenation f a ~tem and anending.
For this purpose, we had to define the termsstem and ending in the following "computational" wayto suit our purposes: the term stem means for us thepart of the word which does not change in the course ofinflection, the term ending means the part of the formwhich, when appended to the stem, completes the stemto a meaningful form.
Exactly this model is used fornouns.358 1For verbs, it is suitable to extend this basic modelto cover negation, as the negation is formed by theprefix he-.
Moreover, as a spelling-checker does notneed to use the meanings of the words, we extended theword fotm definition further to cover verb prefixes.
Ofcourse, it is not economical to consider all possibleverb prefixes, because most Czech verbs can have 3 to8 derivatives by prefixes only.
We use a compromise of15 most frequent verb prefLxes.
All the other, as well astheir combinations, are considered to be part of thestein as defined in the previous paragraph.Our system uses two types of adjective structure.First, proper adjectives are viewed as consisting of astem and an ending and possibly the superlative prefix(nej-) and/or the negative prefix.
Second, verbal adjec-fives can have a verbal prefix in addition to the partsmentioned above.
The latter type of partitiozfing is themost complicated one in our system.For example, the form nejnevykupovdvandjdi (lit.
'not the (item which is) mostly bought for speculativepurposes iteratively') consists, from the point of viewof our model, of five par'm: the superlative prefix nej-,the negative prefix ne-, the "speculative" prefix vyo,the stein (of "to buy") kup and the ending ovdvandflt,which combines the functions of itemtiveness, passive,comparison, and nominative singular.Thus, we had to employ 240 sets of endings.
Ofcourse, there are also hundreds of exceptions.
Forthem, as well as for indeclinable word classes, there isa special set consisting of a zero ending and the wholeform is stored, i.e., in our terms, the whole form is con-sidered to be the "stem".3.
User InterfaceAs the Czech users (not differing from theirforeign colleagues in this respect) do not like learning anew text processors, we decided to follow the ideasbehind Turbo Lightning.
This way, using a memoryresident program which is user-configumble to dif-ferent text processors, we obtained a unified interfacefor virtually all users.The basic functions of interactive singleword/page check and/or correction are accompaniedalso by batch functions, which are preferred by someusers fi>r longer texts and some types of text proces-sors.
The types of texts supported by the batch moderange fl:om simple ASCII files to files produced byWordPerfect 5.0, including die source texts for theTEX typesetting system.The system also facilitates the process of addingword forms to the user's own dictionary.
Due to thereasons discussed above, this causes problems, as theother forms of that word cannot be included fullyautomatically.
An algorithm exists (see below) how toaccomplish this task with the user's assisstance.
Theidea is similar to Finkler and Neumann (1988), thoughsimplified for our purposes; Carter (1989) in his VEXsystem also uses the method of giving sunple questionsto the user (supposedly non-linguist) to learn aboutword's behaviour, but it is for English and primarilyintended for assigning syntax properties rather thanmorphological.
The hnplementation f the algoritlmatogether with its user interface will be included as anoff-line utility (in the first version, available in autumn'89, there was no such utility; it should be included inthe second version).4.
The Semi-automatic Word ClassificationEquipping the lexical entries with morphologicalinformation is an unpleasant task; very boring forlinguists, and en'or-inducing for anybody.
And if thedictionary is to be updated primarily by nondinguists,the need for (at least some) automation is obvious.Fortunately, some inflectional languages (includ-ing Czech, as well as the other Slavonic languages)tend to indicate their morphological properties by(some of) the forms of the word itself, at least statisti-cally.As our purpose is to facilitate morphologicalclassification of new words which are added to a dic-tionary, and as newly coined words or technical termsnot included in file main dictionary are mostly regular,we can suppose that the irregular words are already inthe dictionary.When classifying a given word from the user dic-tionary (added to it dufing the on-linechecking/correcting process), the user should firstchange the ending of the form moved here from thetext to create the dictionary form of the word, i.e., nom-inative singular for nomis, nominative singular mascu-line for adjectives, and infinitive for verbs.
In somecases, the system can provide the dictionary formautomatically, but mostly the only help it can offer is toposition the cursor under the last character of the wordform.Then the user should select the basic class towhich the word belongs: indeclinable, verb, adjectiveor noun.
There are no other questions for indeclinables,of course.
For adjectives, the only further decision con-ceres the possibility of creating its comparative and/ornegative forms.
For verbs, the user should do twofirings: first, select all possible prefixes from the 15prefixes handled by the system, and then, assignperfective/imperfective/both flag to the word and to itsprefixed forms (for all the prefixed forms, this flag hasthe same value).
For nouns, where the situation is verycomplicated, there is a hierarchy of questions andselections, which, for some masculine inanimates,reaches the level of five questions/selections.
For-tunately, thanks to lots of investigations performed bymathematical nd statistical linguists in the past, wecan arrange things so that in most cases the fu~t selec-tion displayed is the fight one.2 359For an experienced user, there is the possibilityof writing directly the name of the appropriate class.We used this mode of operation when entering all regu-lar Czech nouns into the dictionary.Then the system constructs the stem and assignsthe set of endings and prompts the user to confirm theresulting set of forms,For example, when classifying the formradionuklidy (radionuclides), first the user deletes theending -y (which is one of the plural endings).
Thenhe/she selects "noun" as the basic class; then "mascu-line inanimate" is the right choice.
Then, he/she shouldselect radionuklidu as the right form which can followthe preposition bez (without), and state that radionuk-lida is not correct in this case.
The last selection con-ceres the preposition o (about), after which radionuk-lidu is the only possibility (as opposed to the formradionuklid~, which cannot be used after the preposi-tion o ).
Using this information, the system is able todecide that the stem is radionuklid (i.e., it equals to thenominative singular form) and the set of endings hasthe identification hdl.
The user then confirms thatradionuklid,-lidu,-lidem,-lidy ,-lid?t,-lid~m,-lidech arethe all and only correct forms of radionuklid.5.
ImplementationAs mentioned above, we selected the memoryresident version as the primary way of operation.
TheprogranL together with the cca 7,000 most fi'equentCzech words, takes approximately 110K of memory.
Itis able to check one screenful of a 60 column standardtext (approx.
200 words) within 3 seconds on a 10MHz PC AT with a 28msec hard disc.
When the pro-gram runs as an ordinary program (in the mark- onlybatch mode), it is possible to have almost all the dic-tionary entries in main memory, and then it runs morethan five limes faster (100K of text in less than oneminute).The size of the main dictionary was in the firstversion, covering 80.000 - 100.000 Czech "dictionary"words, approximately 290K (not counting the 7000most frequent ones, which reside in the memory any-way).
This means that it can be used even on the oldestfloppy based systems, e.g., in high schools.
SinceOctober 1989, the system is available for anybodywishing to avoid misprints when writing in Czech.6.
ConclusionsIn the project described in this paper, the maintopics were:1) the design of the inflectional model, which willallow for a very fast parsing;2) the design of techniques for storing the dictionary ofstems together with the infection classes in acompressed form, still allowing fast access;3) the design of methods for allowing the user to addwords with complete inflectional information tothe dictionary.We do not claim that there are no better solu-tions, but the resulting system has been accepted by itsusers both from the space as well as time point of view.However, the users (after some time of an exc,Stementfrom their new toy) demand very soon the systemmarks false agreement (very common error in Czech),the word "farm" when used instead of "form" (theCzech words almost equal to these two English ones),etc .
.
.
.
Could anybody think of a simple yet clearexplanation to he given to them why they should stillwait a little?ReferencesCarter, D. M. (1989).
Lexical Acquisition in the CoreLanguage Engine.
In: Proceedings of the 4thEuropean Chapter ACL Conference, ACL.
Man-chester.
Great Britain.
April 1989. pp.
137-144.Fiala, P. (1986).
Po~ta~ v roll ~e~tinfi/e.
(The computeras a teacher of Czech).
In: Proceedings of SOF.SEM'86, Vol.
II.
UVT UJEP Bmo.
JCMF.
Lip-tovsk~ J~n.
N',zk6 Tatry.
1986. pp.
187-190.
InCzech.Finlder, W. and (3.
Neumann (1988).
MORPHIX.
AFast Realization of a Classification.BasedApproach to Morphology.
Bericht Nr.
40.XTRA.
KI-Labor am Lehrstuhl flit InformatikIV.
Universit~it des Saaflandes.
Saad~riicken.1988.
11 pp.Havrfinek, B. and A. Jedli~ka (1963).
Ceskd mluvnice.
(The Czech grammar).
SPN Praha.
Prague.
1963.2rid ed.
561 pp.Kirschner, Z.
(1983).
MOSAIC - A Method ofAutomatic Extraction of Significant Terms fromTexts.
In: Explizite Beschreibung tier Spracheund automatische Textbearbeitung X. Internalpublications MFF UK Praha.
Prague.
1983.
124PP.Panevov~, J. et al (1981).
Lexical Input Data forExperiments with Czech.
In: ExpliziteBeschreibung der Sprache und automatischeTextbearbeitung VI.
Internal publications MFFUK Praha.
Prague.
1981.
160 pp.S1av'l~kov~, E. (1975).
Retrogrddnl movfematickyslovnik ~e~tiny.
(Retrograde morphemic diction-a~T of Czech language).
Academia Praha.Prague.
1975.
648 pp.Weisheitelovh, J. Kr~flcovg K. and P. Sgall (1982).Morphemic Analysis of Czech.
In: ExpliziteBeschreibung der Sprache und automatischeTextbearbeitung VII.
Internal publications MFFUK Praha.
Prague.
1982.
120pp.360 3
