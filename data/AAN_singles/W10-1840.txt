Proceedings of the Fourth Linguistic Annotation Workshop, ACL 2010, pages 247?255,Uppsala, Sweden, 15-16 July 2010. c?2010 Association for Computational LinguisticsAnatomy of Annotation Schemes:Mapping to GrAFNancy IdeDepartment of Computer ScienceVassar CollegePoughkeepsie, NY, USAide@cs.vassar.eduHarry BuntTilburg Center for Creative ComputingTilburg University, The Netherlandsharry.bunt@uvt.nlAbstractIn this paper, we apply the annota-tion scheme design methodology definedin (Bunt, 2010) and demonstrate its usefor generating a mapping from an exist-ing annotation scheme to a representa-tion in GrAF format.
The most impor-tant features of this methodology are (1)the distinction of the abstract and con-crete syntax of an annotation language;(2) the specification of a formal seman-tics for the abstract syntax; and (3) theformalization of the relation between ab-stract and concrete syntax, which guar-antees that any concrete syntax inheritsthe semantics of the abstract syntax, andthus guarantees meaning-preserving map-pings between representation formats.
Byway of illustration, we apply this map-ping strategy to annotations from ISO-TimeML, PropBank, and FrameNet.1 IntroductionThe Linguistic Annotation Framework (LAF, (Ideand Romary, 2004); ISO 24612, 2009) definesan abstract model for annotations together withan XML serialization of the model, the GraphAnnotation Format (GrAF, (Ide and Suderman,2007)).
GrAF is intended to be a pivot format ca-pable of representing diverse annotation types ofvarying complexity, guaranteeing syntactic con-sistency among the different annotations.
GrAFdoes not address the issue of semantic consis-tency among annotation labels and categories; thisis assumed to be handled by other standardiza-tion efforts such as ISOCat (Kemps-Snijders et al,2009).
ISOCat provides a set of data categories atvarious levels of granularity, each accompanied bya precise definition of its linguistic meaning.
La-bels applied in a user-defined annotation schemeshould be mapped to these categories in order toensure semantic consistency among annotations ofthe same phenomenon.While the mapping of annotation labels to acommon definition, coupled with the syntacticconsistency guaranteed by GrAF, takes a giantstep towards the harmonization of linguistic an-notations, this is still not enough to ensure thatthese annotations are sufficiently compatible to en-able merging, comparison, and manipulation withcommon software.
For this, the conceptual struc-ture of the annotation, in terms of the structuralrelations among the defined annotation categories,must also be consistent.
It is therefore necessary toconsider this aspect of annotation scheme designin order to achieve a comprehensive treatment ofthe requirements for full harmonization of linguis-tic annotations.In (Bunt, 2010), a design methodology for se-mantic annotation schemes is proposed, devel-oped during the ISO project ?Semantic annota-tion framework, Part 1: Time and events?
(?Se-mAF/Time?, for short), which is currently near-ing completion (see ISO DIS 24617-1, 2009).
Themethodology includes a syntax that specifies botha class of representation structures and a classof more abstract annotation structures.
Thesetwo components of the language specification arecalled its concrete and abstract syntax, respec-tively.
A distinguishing feature of the proposedmethodology is that the semantics is defined forthe structures of the abstract syntax, rather thanfor the expressions that represent these structures.In this paper, we generalize the design method-ology defined in (Bunt, 2010) and demonstrateits use for generating a mapping from an ex-isting annotation scheme to a representation inGrAF format.
By way of illustration, we applythe mapping strategy to annotations from ISO-TimeML (ISO, 2009), PropBank (Palmer et al,2005), and FrameNet (Baker et al, 1998).2472 BackgroundThe process of corpus annotation may consist ofattaching simple labels to textual elements, suchas part of speech and syntactic designations andnamed entity tags.
For more complex types ofannotation, annotations include a variety of ad-ditional information about linguistic features andrelations.
This is especially true for the kindsof semantic annotation that have recently begunto be undertaken in earnest, including semanticrole labeling (e.g., FrameNet and PropBank) andtime and event annotation (e.g., TimeML).
How-ever, these annotation schemes are not always de-signed based on formal principles, and as a result,comparing or merging information?even from twoschemes annotating the same phenomenon?can bedifficult or impossible without substantial humaneffort.A major source of difficulties in interpreting an-notation scheme content is that information in theannotation is implicit rather than explicit, making(especially) structural relations among parts of thelinguistic information ambiguous.
This often re-sults from the use of an impoverished representa-tion scheme, which provides only minimal mech-anisms for bracketing and association.
Consider,for example, the two annotation fragments below,expressed with parenthetic bracketing, taken froma computational lexicon:(1) (SUBC ((NP-TO-INF-LOC) (NP-PP)))(2) (FEATURES ((NHUMAN) (COUNTABLE)))In (1), the bracketed information is a list of alter-natives, whereas in (2), it is a set of properties, butthere is no way to automatically distinguish thetwo in order to process them differently.
Anotherexample comes from PropBank:wsj/00/wsj_0003.mrg 13 6 gold have.03vn--a 0:2-ARG0 6:0-rel 7:1-ARG110:1-ARGM-ADVBecause of the ?flat?
representation1, it is im-possible to automatically determine if the mor-phosyntactic descriptor ?vn?a?
is associated withthe element annotated as ?rel?, vs. the ?gold?descriptor that is (assumedly) associated with theentire proposition.
In both of these examples,linguistically-informed humans have little diffi-culty determining the structure because of theknowledge they bring to the interpretation.
Thisknowledge is then embedded in the processing1In PropBank annotation, this information appears on asingle line.software so that the data are processed properly;however, because it is not a part of the represen-tation itself, it is not available to others who maydevelop software for other kinds of processing.To avoid these problems, annotation scheme de-sign in ISO projects is split into two phases: thespecification of (1) an abstract model consistingof annotation categories and structures and (2)specification of (possibly multiple) representationstructures.
An abstract model of annotation struc-tures is typically implemented via development ofa ?metamodel?, i.e.
a listing of the categoriesof entities and relations to be considered, oftenvisualized by a UML-like diagram?i.e., a graph.Schemes described via this method are triviallymappable to GrAF, ensuring that syntactic con-sistency among the different schemes, whatevertheir original representation structures may be, isachievable.
It also ensures that these schemes aretrivially mappable to different representation for-mats that are used in various software systems,e.g., GATE, UIMA, NLTK, GraphViz, etc.3 Anatomy of an annotation schemeAs specified in (Bunt, 2010), an annotationscheme consists of a syntax that specifies a class ofmore abstract annotation structures (the abstractsyntax) and a class of representation structures (theconcrete syntax), plus a semantics associated withthe abstract syntax.3.1 Abstract syntaxThe abstract syntax of an annotation scheme de-fines the set-theoretical structures which constitutethe information that may be contained in annota-tions.
It consists of (a) a specification of the el-ements from which these structures are built up,called a conceptual inventory; and (b) annota-tion construction rules, which describe the possi-ble combinations of these elements into annota-tion structures.
The semantics of the annotationscheme components is defined for the annotationstructures of the abstract syntax; Bunt (2010) pro-vides a formal specification of the semantics ofISO-TimeML in terms of Discourse Representa-tion Structures (Kamp and Reyle, 1993), and de-fines the class of concrete representations of thestructures defined by the abstract syntax.For example, a fragment of the ISO-TimeML22All references to ISO-TimeML are based on the stateof the project as documented in ISO 264617-1:2009(E) from248conceptual inventory includes:3?
finite sets of elements called event types,tenses, aspects, signatures, cardinalities, andveracities.?
finite sets of elements called temporal rela-tions, duration relations, event subordinationrelations, aspectual relations, etc.The annotation construction rules for ISO-TimeML specify how to construct two typesof annotation structures: entity structures andlink structures.
One type of entity structure,called an event structure, is defined as a 6-tuple?e, t, a, s, k, v?
where e is a member of the set ofevent types; t and a are a tense and an aspect,respectively; s is a signature (a set-theoreticaltype that is used for handling quantification overevents); k is a cardinality, used for expressing in-formation about the size of a set of events in-volved in a quantified relation; and v is a verac-ity, which is used to represent whether an event isclaimed to have occurred, or claimed not to haveoccurred (for dealing with positive and negativepolarity, respectively), or to have yet another sta-tus such as ?possibly?
or ?requested?, for handlingsuch cases as Please come back later today.
Atime-amount structure is a pair ?n, u?
or a triple?R,n, u?, where n is a real number, R a numericalrelation, and u a temporal unit.
The rules also de-fine a link structure called an event duration struc-ture as a triple ?event structure, time-amountstructure, duration relation?.3.2 Concrete syntaxThe concrete syntax provides the representation ofannotation structures defined in the abstract syn-tax.
A concrete syntax is said to be ideal fora given abstract syntax if there is a one-to-onecorrespondence between the structures defined bythe abstract syntax and those defined by the con-crete syntax.
An ideal concrete syntax RF1 de-fines a function F1 from annotation structures toRFi-representations, and an inverse function F?1ifrom RF1-representations to annotation structures.In other words, the abstract and the concrete syn-tax are isomorphic.
Since this holds for any idealconcrete syntax, it follows that any two ideal rep-resentation formats are isomorphic.
Given twoSeptember 2009.3See (Bunt, 2010) for the full specification for ISO-TimeML.<isoTimeML-ICS1rep xml:id="a1"><EVENT xml:id="e1" anchor="t2"type ="FAST" tense=PASTsignature="INDIVIDUAL"/><TIME-AMOUNT xml:id="ta1"anchor="t4" numeral="2" unit="day"/><MLINK event="e1"duration="ta1" relType="FOR"/></isoTimeML-ICS1rep>Tokens: [It1][fastedt2][fort3][twot4][dayst5].Figure 1: ISO-TimeML ICS1 annotationideal representation formats RFi and RFj we candefine a homomorphic mapping Cij from RFi-representations to RFj-representations by(1) Cij =D Fj ?
F?1i , i.e.
Cij(r) = Fj(F?1i (r))for any RFi-representation rand conversely, we can define a homomorphicmapping Cji from RFj-representations to RFi-representations by(2) Cji =D Fi ?
F?1j , i.e.
Cji(r) = Fi(F?1j (r))for any RFj-representation rThese two mappings constitute conversions fromone format to the other, that is, they constituteone-to-one meaning-preserving mappings: if ?
(r)denotes the meaning of representation r, then?
(Cij(r)) = ?
(r) for any Fi-representation r,and conversely, ?(Cji(r?))
= ?(r?)
for any Fj-representation r?.Figure 1 shows a rendering of the sentence Ifasted for two days using a concrete XML-basedsyntax for the annotation structures defined bythe ISO-TimeML abstract syntax, called the ICS-1format, as described in (Bunt, 2010).4 GrAF overviewGrAF is an exchange or pivot format intended tosimplify the processes of merging of annotationsfrom different sources and using annotations withdifferent software systems.
The underlying datamodel is a directed acyclic graph, which is iso-morphic to UML-like structures that may be usedto define an abstract syntax for a given annotationscheme, as described in section 3.GrAF is an XML serialization of a formal graphconsisting of nodes and edges, either or bothof which are decorated with feature structures.Nodes may have edges to one or more other nodes249<node xml:id="fn-n1"/><a label="FE" ref="fn-n1" as="FrameNet"><fs><f name="FE" value="Recipient"/><f name="GF" value="Obj"/><f name="PT" value="NP"/></fs></a><edge id="e1" from="fn-n1"to="fntok-n5"/>Figure 2: FrameNet frame element annotation inGrAFin the graph, or they may be linked directly to re-gions within the primary data that is being anno-tated.
The feature structure attached to a node oredge provides the content of the annotation?thatis, the associated linguistic information expressedas a set of attribute-value pairs.
The feature struc-tures in GrAF conform to formal feature struc-ture specifications and may be subjected to op-erations defined over feature structures, includingsubsumption and unification.
As a result, any rep-resentation of an annotation in GrAF must consistof a feature structure that provides all of the rele-vant linguistic information.Figure 2 shows a fragment of a FrameNet frameelement annotation, serialized in GrAF XML.
Itconsists of a graph node with id ?fn-n1?
and an an-notation with the label ?FE?4.
The ref attribute onthe <a> (annotation) element associates the anno-tation with node ?fn-n1?.
The annotation containsa feature structure with three features: FE (Frameelement), GF (Grammatical Function), and PT(Phrase Type).
An edge connects the node to an-other node in the graph with the id ?fntok-n5?
(notshown here), which is associated with annotationinformation for a token that in turn references thespan of text in primary data being annotated.5 Mapping to GrAFLAF specifies that an annotation representation Ris valid if it is mappable to a meaning-preservingrepresentation in GrAF, and that its GrAF repre-sentation is in turn mappable to R. In terms ofthe definitions in section 3, a LAF-valid repre-sentation R is one where ?
(R) = ?
(CRG(R))and ?
(G) = ?
(CGR(G)), where G is a GrAF4Note that the value of the label attribute is, for practicalpurposes, a convenience; it is used primarily when generatingalternative representation formats.representation.
We can also define a valid anno-tation scheme in terms of conversion transitivitythrough GrAF; that is, for two arbitrary annotationschemes R and S, the following holds:?
(R) = ?
(CRG(R)) = ?
(CGS(S))Our goal here is to provide a formal speci-fication for the mapping function CRG, assum-ing the existence of a formal specification ofan annotation scheme as outlined in section 3.To accomplish this, it is necessary to identifythe two components of an abstract syntax forannotation scheme R: the conceptual inventoryand the annotation construction rules that indi-cate how elements of the conceptual inventory arecombined into annotation structures?specifically,entity structures, which describe annotation ob-jects, and link structures, which describe relationsamong entity structures.
Once these are available,a general procedure for establishing a GrAF repre-sentation of the annotation structures is as follows:For each type of entity structure e:?
introduce a label Le, where Le is the entitystructure type;?
define a set of features f corresponding one-to-one with the components of the n-tupleof elements from the conceptual inventorydefining entity structure e.A link structure is a triple ?E1, E2, r?
consistingof two sets of entity structures and a relational el-ement defining a relation between them.
For eachtype of link structure:1. introduce a label Lr, where Lr is the typename of relation r.2.
If r is associated with a set of elements fromthe conceptual inventory, then features arecreated as in (2), above.In GrAF, an annotation A consists of a label Land a feature structure containing a set of featuresf .
Annotations may be associated with nodes oredges in the graph.
Typically, entity structures areassociated with nodes that have links into a regionof primary data or one or more edges connecting itto other nodes in the graph.
Link structures are as-sociated with edges, identifying a relation amongtwo or more entity structures.
In the simplest case,a link structure consists of a relation between two250entity structures, each of a given type; in the cor-responding GrAF representation, the link structurelabel is associated with an edge d that connectsnodes n1, n2, each of which is decorated with an-notations labeled L1, L2, respectively.For example, for the ISO-TimeML abstractsyntax fragment provided in section 3, we de-fine the labels EVENT and INSTANT cor-responding to the two entity structures withnames event structure and time amount struc-ture, and a link structure TIME-ANCHORING.Because an event structure is defined as a 6-tuple ?e, t, a, s, k, v?, we define six features event,tense, aspect signature, cardinality, and verac-ity.5 A time-amount structure may be a pair?n, u?
or a triple ?R,n, u?, where n is a realnumber, R a numerical relation, and u a tem-poral unit, so we introduce features numeral,unit, and relType.
Finally, the time anchoringlink structure is a triple ?event structure, time-amountstructure, duration relation?.
In thiscase, the first two elements of the triple are theentity structures being linked; these will be repre-sented as nodes in the GrAF implementation.
Thelabel and features associated with each entity andlink structure provide the template for an annota-tion corresponding to that structure with appropri-ate values filled in, which may then be associatedwith a node or edge in the graph.5.1 ISO-TimeML exampleThe GrAF representation of the ISO-TimeML an-notation for the sentence I fasted for two days isshown in Figure 3, based on the abstract syntaxgiven in section 3.1.To create an annotation corresponding to anISO-TimeML entity structure, a node <node> el-ement) is created and assigned a unique identi-fier as the value of the XML attribute xml:id.
Anannotation (<a>) element is also created, with alabel attribute whose value is the entity structurename, and which contains a feature structure pro-viding the appropriate feature/value pairs for thatentity structure.
The annotation is associated withthe node by using the node?s unique identifier asthe value of the ref attribute on the <a> element.An edge is then created from the node to anothernode in the graph (r2) that references the data to beannotated?in this case, one or more tokens defined5The latter three attributes have the default values INDI-VIDUAL, 1, and POSITIVE, respectively, and will be omit-ted in the examples to follow if they have these values.over regions of the primary data.ISO-TimeML link structures define a relationbetween two entity structures, and are rendered inGrAF as a labeled edge between the nodes anno-tated with the entity structure information.
In theISO-TimeML example, an annotation with labelMLINK (?measure link?)
is created with a singlefeature relType.
The from and to attributes on the<edge> element link the node with the EVENTentity structure annotation (node tml-n1 in theexample) to the node with the TIME-AMOUNTannotation (tml-n2).
This edge is then associ-ated with the MLINK annotation (cf.
Bunt andPustejovsky, 2009; Pustejovsky et al, 2010).Figure 1 shows the rendering of the ISO-TimeML abstract syntax in the ICS-1 concretesyntax.
Following Section 3.2, these two realiza-tions of the abstract syntax for ISO-TimeML areisomorphic.<node xml:id="tml-n1"/><a label="EVENT" ref="tml-n1"as="TimeML"><fs><f name="event" value="fast"/><f name="tense" value="Past"/><f name="signature"value="individual"/></fs></a><edge xml:id="tml-e1" from="tml-n1"to="t2"/><node xml:id="tml-n2"/><a label="TIME-AMOUNT" ref="tml-n2"as="TimeML"><fs><f name="numeral" value="2"/><f name="unit" value="day"/></fs></a><edge xml:id="tml-e2" from="tml-n2"to="t4"/><edge xml:id="tml-e3" from="tml-n2"to="t5"/><edge xml:id="tml-e4" from="tml-n1"to="tml-n2"/><a label="MLINK" ref="tml-e4"as="TimeML"><fs><f name="relType" value="FOR"/></fs></a>Tokens: [It1][fastedt2][fort3][twot4][dayst5].Figure 3: ISO-TimeML annotation in GrAF2515.2 Reverse engineering the abstract syntaxThe previous two sections show how schemes forwhich an abstract syntax is specified can be ren-dered in GrAF as well as other concrete syn-tax representations.
However, as noted in sec-tion 2, many annotation formats?especially legacyformats?were not designed based on an underly-ing data model.
Therefore, in order to achieve amapping to GrAF, it is necessary to ?reverse en-gineer?
the annotation format to define its abstractsyntax.
Because of problems such as those out-lined in Section 2, this exercise may require someextrapolation of information that is implicit, or notspecified, in the original annotation format.
Weprovide two examples below, one for PropBankand one for FrameNet.5.2.1 An abstract syntax for PropBankThe PropBank format specifies an annotation fora sentence consisting of several columns, specify-ing the file path; the sentence number within thefile; the number of the terminal in the sentencethat is the location of the verb; a status indica-tion; a frameset identifier (frame and sense num-ber); an inflection field providing person, tense,aspect, voice, and form of the verb; and one ormore ?proplabels?
representing an annotation as-sociated with a particular argument or adjunct ofthe proposition.
Proplabels are associated withprimary data via reference to the Penn Treebank(PTB) node in the syntax tree of the sentence.Based on this we can specify a portion of aPropBank conceptual Inventory:?
a special proposition type verb, designatingthe verb (replaces PropBank ?rel?);?
a finite set PROP = {ARGA,ARGM,ARG0, ARG1, ARG2} of proposition la-bels;?
a finite set FEAT = {EXT,DIR,LOC,TMP,REC,PRD,NEG,MOD,ADV,MNR,CAU,PNC,DIS}, plus the set ofprepositions and ?null?, comprising the set offeatures;?
a finite set of sets INF ={form, tense, aspect, person, voice},where form = {infinitive, gerund,participle, finite}, tense = {future,past, present}, aspect = {perfect,progressive, both}, person ={default, 3rd},and voice = {active, passive}.?
a finite set FrameSets = {fs1, fs2, ...fsn}where each fsi is a frame set defined in Prop-Bank.An abstract syntax for PropBank could specifythe following annotation construction rules:?
a proposition entity structure is a pair ?f,A?where f is a frameset and A is a set of argu-ment entity structures.6?
an argument entity structure is an argumenta ?
PROP ?
FEAT .?
a verb entity structure is a 5-tuple?f, t, a, p, v?
where f ?
form, t ?
tense,a ?
aspect, p ?
person, and v ?
voice.Based on this, the PropBank annotation in Sec-tion 2 can be rendered into a concrete syntax; inthis case, in GrAF as shown in Figure 4.
Note thatthe to attribute on <edge> elements have as val-ues the reference to PTB nodes from the originalPropBank encoding; in GrAF, these values wouldbe identifers on the appropriate nodes in a GrAFrepresentation of PTB.
We have also included rolenames (e.g., ?owner?)
in the annotation, which arenot present in the original; this was done for con-venience and readability, and the values for the?role?
feature could have been given as arg-0, arg-1, etc.
instead.The original PropBank encoding is close to anideal concrete syntax, as it can be generated fromthe abstract syntax.
However, the round trip backto the abstract syntax is not possible, because it isnecessary to do some interpretation of associationsamong bits of annotation information in order toconstruct the abstract syntax and, subsequently,map the PropBank format to GrAF.
Specifically,in the GrAF encoding the inflection information isassociated with the node referencing the verb, butthis association is not explicit in the original (andin fact may not be what the annotation scheme de-signers intended).5.2.2 An abstract syntax for FrameNetThe FrameNet XML format is shown in Fig-ure 5.7 The structure and content of this encod-ing is highly oriented toward a presentation view,6We do not include the bookkeeping information associ-ated with a PropBank annotation in the abstract syntax.7Some detail concerning the html display has been omit-ted for brevity.252<node xml:id="pb-n1"/><a label="Proposition" ref="pb-n1"as="PropBank"><fs><f name="file"value="wsj/00/wsj_0003.mrg"/><f name="sentenceNo" value="13"/><f name="verbOffset" value="6"/><f name="status" value="gold"/><f name="frameSet"value="have.03"/></fs></a><node xml:id="pb-n2"/><a label="VERB" ref="pb-n2"as="PropBank"><fs><f name="role" value="rel"/><f name="form" value="finite"/><f name="tense" value="present"/><f name="voice" value="active"/></fs></a><edge xml:id="pb-e1" from="pb-n1"to="pb-n2"/><edge xml:id="pb-e2" from="pb-n2"to="ptb-6-0"/><node xml:id="pb-n3"/><a label="ARG0" ref="pb-n3"as="PropBank"><fs><f name="role" value="owner"/></fs></a><edge xml:id="pb-e3" from="pb-n1"to="pb-n3"/><edge xml:id="pb-e4" from="pb-n3"to="ptb-0-2"/><node xml:id="pb-n4"/><a label="ARG1" ref="pb-n4"as="PropBank"><fs><f name="role" value="possession"/></fs></a><edge xml:id="e5" from="pb-n1"to="pb-n4"/><edge xml:id="e6" from="pb-n4"to="ptb-7-1"/><node xml:id="pb-n5"/><a label="ARGM" ref="pb-n5"as="PropBank"><fs><f name="role" value="adjunct"/><f name="feature" value="adverbial"/></fs></a><edge xml:id="e7" from="pb-n1"to="pb-n5"/><edge xml:id="e8" from="pb-n5"to="ptb-10-1"/>Figure 4: PropBank annotation in GrAFintended to support display of the sentence andframe elements in a browser.A partial abstract syntax for FrameNet derivedfrom this format includes the following conceptualinventory:?
a Target, designating the frame-evoking lex-ical unit;?
a finite set FE = {Recipient, Supplier,Means, ...} of frame element labels;?
a finite set GF = {Obj,Ext,Dep, ...} ofgrammatical functions.?
a finite set PT = {NP,PP, ...} of phrasetypes.?
a finite set LU = {u1, u2, ...un} where eachui is a lexical unit.?
a finite set POS = {n, v, a, r} denotingparts of speech;?
a finite set FrameNames = {f1, f2,...fn}where each fi is a frame defined inFrameNet.An abstract syntax for this partial inventorycould specify the following annotation construc-tion rules:?
a frame entity structure is a pair ?f,A?
wheref is a frame name, u is a lexical unit, and F isa set of frame element (FE) entity structures.?
an FE entity structure is a triple {f, g, p}, f ?FE, g ?
GF, p ?
PT .The GrAF rendering of the abstract syntax isgiven in Figure 6, which was generated from theFrameNet abstract syntax using the rules outlinedin section 5.
Both the FrameNet XML and theGrAF rendering provide an ideal concrete syntaxbecause they are isomorphic8 to the abstract syn-tax and, by the definition in section 3.2, are con-versions of one another.6 ConclusionIn this paper we outlined a methodology for an-notation scheme design and development; demon-strated how schemes designed using this method-ology may be easily mapped to GrAF; and demon-strated how ?reverse engineering?
an annotation8Obviously, in the FrameNet XML additional elementsare introduced for display and bookkeeping purposes.253format whose abstract syntax is unspecified canprovide the information required to map that for-mat to GrAF.
This work was undertaken with twogoals in mind: (1) to provide a formal method formapping to GrAF; and (2) to demonstrate the ad-vantages of a methodology for annotation schemedesign that is based on an abstract model, asadopted in ISO TC37 SC4 projects and formalizedin (Bunt, 2010).
The ultimate goal is, of course, toachieve harmonization of annotation formats, sothat they can be merged, enabling the study of in-teractions among information at different linguis-tic levels; compared, in order to both evaluate andimprove automatic annotation accuracy; and to en-able seamless transition from one software envi-ronment to another when creating and using lin-guistic annotations.<annotationSet lexUnitRef="11673"luName="provide.v" frameRef="1346"frameName="Supply"status="MANUAL" ID="2022935"><layer rank="1" name="Target"><label end="109" start="103"name="Target"/></layer><layer rank="1" name="FE"><label bgColor="0000FF" ... end="138"start="111" name="Recipient"/><label bgColor="FF0000"... end="84"start="83" name="Supplier"/><label bgColor="FF00FF"... end="79"start="0" name="Means"/></layer><layer rank="1" name="GF"><label end="138" start="111"name="Obj"/><label end="84" start="83"name="Ext"/><label end="79" start="0"name="Dep"/></layer><layer rank="1" name="PT"><label end="138" start="111"name="NP"/><label end="84" start="83"name="NP"/><label end="79" start="0" name="PP"/></layer>...</annotationSet>Figure 5: FrameNet XML formatReferencesCollin F. Baker, Charles J. Fillmore, and John B. Lowe.1998.
The Berkeley FrameNet project.
In Proceed-<node xml:id="fn-as1"/><a label="annotationSet" ref="fn-as1"as="FrameNet"><fs><f name="lexUnitRef" value="11673"/><f name="luName" value="provide.v"/><f name="frameRef" value="1346"/><f name="frameName" value="Supply"/><f name="status" value="MANUAL"/><f name="ID" value="2022935"/></fs></a><node xml:id="fn-n1"/><a label="Target" ref="fn-n1"as="FrameNet"><fs><f name="name" value="Target"/></fs></a><edge xml:id="e69" from="fn-as1"to="fn-n1"/><edge xml:id="e90" from="fn-n1"to="fn-t1"/><node xml:id="fn-n2"/><a label="FE" ref="fn-n2"as="FrameNet"><fs><f name="FE" value="Recipient"/><f name="GF" value="Obj"/><f name="PT" value="NP"/></fs></a><edge xml:id="e67" from="fn-as1"to="fn-n2"/><edge xml:id="e91" from="fn-n2"to="fn-t2"/><node xml:id="fn-n3"/><a label="FE" ref="fn-n3"as="FrameNet"><fs><f name="FE" value="Supplier"/><f name="GF" value="Ext"/><f name="PT" value="NP"/></fs></a><edge xml:id="e46" from="fn-as1"to="fn-n3"/><edge xml:id="e92" from="fn-n3"to="fn-t3"/><node xml:id="fn-n4"/><a label="FE" ref="fn-n4"as="FrameNet"><fs><f name="FE" value="Means"/><f name="GF" value="Dep"/><f name="PT" value="PP"/></fs></a><edge xml:id="e10" from="fn-as1"to="fn-n4"/><edge xml:id="e93" from="fn-n4"to="fn-t4"/>Figure 6: FrameNet in GrAF format254ings of the 17th international conference on Compu-tational linguistics, pages 86?90, Morristown, NJ,USA.
Association for Computational Linguistics.Harry Bunt and James Pustejovsky.
2010.
Annotationof temporal and event quantification.
In Proceed-ings of the Fifth International Workshop on Interop-erable Semantic Annotation (ISA-5), pages 15?22,Hong Kong SAR.
City University of Hong Kong.Harry Bunt.
2010.
A methodology for designingsemantic annotation languages exploiting semantic-syntactic isomorphisms.
In Proceedings of the Sec-ond International Conference on Global Interoper-ability for Language Resources (ICGL2010), pages29?46, Hong Kong SAR.
City University of HongKong.Nancy Ide and Laurent Romary.
2004.
Interna-tional standard for a linguistic annotation frame-work.
Journal of Natural Language Engineering,10(3?4):211?225.Nancy Ide and Keith Suderman.
2007.
GrAF: A graph-based format for linguistic annotations.
In Proceed-ings of the First Linguistic Annotation Workshop,pages 1?8, Prague.ISO.
2009.
Language Resource Management - Seman-tic Annotation Framework (SemAF) - Part 1: Timeand Events.
Secretariat KATS, October.
ISO In-ternational Standard 24617-1:2009(E)), 11 October2009.H.
Kamp and U. Reyle.
1993.
From Discourse toLogic.
Kluwer Academic Publishers, Dordrecht.Marc Kemps-Snijders, Menzo Windhouwer, Peter Wit-tenburg, and Sue Ellen Wright.
2009.
ISOcat : Re-modelling metadata for language resources.
Inter-national Journal of Metadata and Semantic Ontolo-gies, 4(4):261?276.Inderjeet Mani, James Pustejovsky, and Beth Sund-heim.
2004.
Introduction to the special issue ontemporal information processing.
ACM Transac-tions on Asian Language Information Processing(TALIP), 3(1):1?10.Martha Palmer, Daniel Gildea, and Paul Kingsbury.2005.
The Proposition Bank: An annotated cor-pus of semantic roles.
Computational Linguistics,31(1):71?106, March.James Pustejovsky, Harry Bunt, Kiyong Lee, and Lau-rent Romary.
2010.
ISO-TimeML: An InternationalStandard for Semantic Annotation.
In Proceedingsof the Fifth International Workshop on InteroperableSemantic Annotation (ISA-5), Paris.
ELDA.255
