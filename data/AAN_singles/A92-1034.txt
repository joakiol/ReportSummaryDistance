MORPHIa: A Practical Compiler for Reversible Morphology RulesJohn R. R. LeavittCenter  for  Mach ine  Trans lat ionCarneg ie  Me l lon  Un ivers i tyP i t tsburgh,  PA 15213j r r l@cs,  cmu.
eduAbstractMorph~ is a Common Lisp compiler for reversibleinflectional morphology rules developed at the Cen-ter for Machine Translation at Carnegie Mellon Uni-versity.
This paper describes the Morph~ process-ing model, its implementation, and how it handlessome common morphological processes.1 IntroductionThe input to the Morph~ rule compiler is a rule file containinginflection rules, the specification of a discrimination networkof morphological forms, and definitions of certain classes ofstrings and string mappings.
This rule file can be compiledinto either a word generation program or a word parsing pro-gram.
The word generation program produces an inflectedsurface form from a feature structure, 1 while the word pars-ing program takes an inflected form and produces a set offeature structures for valid parses.
22 The Processing ModelIn Morph~ the process of inflection is seen as consisting oftwo basic steps:1.
By making a series of feature- and orthographically-based decisions, choose an inflection procedure.2.
Apply that procedure to the uninflected root.To implement the first step, Morph~ uses a feature-baseddiscrimination etwork with orthographically-based inflec-tion rules at the leaves.
Each node in the discriminationnetwork specifies aset of features common to all of its descen-dants.
For example, at the top of a subtree for nouns, a nodemight contain the features { (cat: noun)  } which wouldbeinherited by the nodes for single-noun and plural-noun, andSO on.That Morph~ explicitly divides feature-based decisionsfrom orthographic decisions has two important consequences:1These feature slructures are structurally the same as those usedby the Generalized LR Parser/Compiler \[Tomita et al, 1988\] andthe Generation Kit \[Tomita and Nyberg, 1988\], and can containnon-syntactic features.2A detailed escription of the Morph~ program and rule file for-malism and some example rule files axe given in \[Leavitt, 1992\].?
The type of feature that may be checked in the discrimi-nation network is not restricted.
For instance, phonolog-ical and/or morphological features (e.g.
paradigm) canbe checked alongside syntactic features (e.g.
category).?
A single morpheme can be split across everal leaf nodesif feature tests below the morpheme l vel are necessary.2.1 The Rule FormalismAs shown in Figure 1, a rule consists of a set of clauses, eachof which contains orthographic pattern on the left-hand sideand a set of inflection operations on the right-hand side.?
Orthographic patterns.
The orthographically-based d -cisions are made by matching against regular expression-based patterns.
Standard regular expression operations(i.e.
Kleene closure, wildcards, etc.)
are included.
Inaddition, non-standard operations for matching againsta pre-defined class of strings 3, and binding and retrievalof portions of the word 4 are included.?
Inflection Operations.
The application of the inflectionprocedure is implemented asthe sequential execution ofthe inflection operations in the right-hand side.
The in-flection operations include affixation, deletion, and thecombined operation of "replacement" in prefix, suffix,and infix positions.
Also included is an operation for per-forming regular string-to-string mapping within a word.53 ProcessingDuring generation, processing begins with a feature structureentering the tree at the root node, and trickling down to theappropriate l af node.
Once at the leaf node, the word root iscompared against each clause's orthographic pattern in turn.When a match is found, the inflection procedure for that clauseis applied to the word root and the result is returned.During parsing, processing begins with an inflected formentering the tree at each leaf node where the inflection rulesare applied "in reverse" and the non-passing results discarded.Applying a rule "in reverse" means that the word is matched3This class matching isequivalent"alphabet subsets" inKIMMO\[Karttunen etal., 1983\], "restricted variables" in NABU \[Slocum,1988\], and "sla'ing vats" in DIMORPH \[Gibson, 1991\].4These mechanisms are similar to the binding and retrieval mech-anisms used in Unix utilities such as "sed".5String-to-string mapping is roughly equivalent to the "pairing-up \[of\] variables" inNABU.233( leaf-rule v+pres -par t(((:or "x .... y") $)(+s "ing") )((c v (% Gc) s)(+s %1 "ing"))( (C "e" S)(rs "e .... ing") )( (C "ie" $)(rs " le .... y ing") )( : ot herwi se(+s "ing") ) ); verbs  l ike perp lex  & carry; verbs  l ike cut; verbs  l lke make; verbs  l lke die; verbs  l lke dentFigure 1: Inflection Rule for English Present Participleagainst he inflected forms and the operations perform de-inflection, rather than vice versa.
After all clauses in allleaves have been tried, and presumably most results havebeen discarded, each remaining parse follows the networkupwards, collecting the features of each node it traverses untila set of full feature structures arrives at the root node.
Whenthis process is finished, a lexicon check is made to ensure thatonly valid words (of the proper category, paradigm, etc.)
arekept.4 Handling Common MorphologicalProcessesThis section explains how common morphological processesare handled by Morph~.?
Affixation.
Prefixation, suffixation, and infixation arehandled irectly by the +p, +s, and +5.
inflection oper-ators.
To determine the insertion point, infixes must beplaced either before or after some portion of the wordthat was bound during pattern matching.?
Deletion.
Word initial, word final, and word internaldeletion are handled directly by the -p ,  - s ,  and -5_inflection operators.
As with infixation, some boundpart of the word must act as an "anchor" for the deletion.?
Gemination and Reduplication.
Since expressions maybe bound during pattern matching, bound expressionscan be affixed to the word to create the effects of gem-ination or reduplication.
For example, when formingthe present participle, certain English verbs repeat hefinal consonant before adding the suffix "ing" (e.g.
"cut"--~ "cutting").
This simple twinning is encoded by thethird clause in the above sample rule.
Reduplication, asfound in Warlpiri \[Sproat and Brunson, 1988\], or Latin\[Matthews, 1974\], can be handled in a similar manner(i.e.
by binding the appropriate portion of the root andretrieving it during affixation).?
Paradigmatic Alternation.
Alternations that consists ofa single mapping of one string to another, such as the"-fe/-ve" alternation for the plural of English nouns like"wife" or"knife" can be handled by a single replacementoperation.
Alternations that consist of a number of re-lated alternation, such as the {"-us/-i" -um/-a" -a/-ae"}alternation for the plural of English nouns like "octopus","spectrum", and "vertebra" could be handled as separatecases, but it is convenient to be able to refer to the en-tire class of alternations.
The map operator invokes astring-to-string mapping on a bound portion of a word.
6Alternations such as vowel rounding in the comparativeforms of German adjectives, and consonant and vowelalternation i Rumanian, can be handled by this method.?
Suppletion.
Morph~ currently handles uppletion by re-quiring suppletive forms (e.g.
"went" for "go") to beincluded in the lexicon.
In this, it is not unlike manyother system, such as KIMMO and DIMORPH.5 Current Uses and Future ResearchMorph~ is presently being used for French and German gen-eration morphology in the Kant project, a knowledge-basedmachine translation system being developed at Carnegie Mel-lon University \[Mitamura etal., 1991\].
In addition, arule filehas been developed for English and one is currently being de-signed for Spanish.
Future research will be directed towardsmorphological phenomena that cannot currently be handledin an elegant fashion.
Certain types of suppletion, such asirregular stems with regular endings in Latin, should be han-dled more generally and with less reliance on the lexicon as astorehouse of irregularities.
In addition, the design of mech-anisms appropriate othe handling of prosodic inflection willalso be investigated.6 AcknowledgmentsI would like to thank Alex Franz, Nicholas Brownlow, andDeryle Lonsdale for their comments on drafts of this paper.References\[Gibson, 1991\] Gibson, E. (1991).
DIMoRPH: A MorphologicalAnalyzer.
Technical Report CMU-CMT-91-128, Center for Ma-chine Translation, Carnegie Mellon University.\[Karttunen tal., 1983\] Karttunen et al, L. (1983).
KIMMO: A twolevel morphological nalyzer.
In Texas Linguistic Forum 22.\[Leavitt, 1992\] Leavitt, J.
(1992).
The MORPHI~ User's Guide.Center for Machine Translation, Carnegie Mellon University.\[Matthews, 1974\] Matthews, P. (1974).
Morphology.
CambridgeUniversity Press, Cambridge, England.\[Mitamura et al, 1991\] Mitamura, T., Nyberg, E., and Carbonell, J.(1991).
An Efficient Interlingua Translation System for Multi-lingual Document Production.
In Proceedings of Machine Trans-lation Sumrait IlL\[Slocum, 1988\] Slocum, J.
(1988).
Morphological processing inthe NABU system.
In Proceedings of the SecondApplied NaturalLanguage Processing Conference, pages 228-234.\[SproatandBmnson, 1988\] Sproat, R. and Bmnson, B.
(1988).Constituent-Based Morphological Parsing: A New Approach tothe Problem of Word-Recognition.
I Proceedingsofthe 26thAn-nual Meeting of the Association for Computational Linguistics.\[Tomita et al, 1988\] Tomita, M., Mitamura, T., and Kee, M. (1988).The Generalized LR Parser~Compiler User's Guide.
Center forMachine Translation, Carnegie Mellon University.\[Tomita nd Nyberg, 1988\] Tomita, M. and Nyberg, E. (1988).
TheGeneration Kit and the Transformation Kit.
Center for MachineTranslation, Carnegie Mellon University.6It should be noted that binding the appropriate portion of theword is a non.vial task and may require a place marker in the rootto help the pattern locate it.
This is, however, an artifact of language,not  the inflection model.234
