Long-Distance Dependencies and Applicative Universal GrammarSel)astian ShaumyanYale University, U.S.A., e-maih shaumyan@minerva.cis.yale.eduFr6d~rique SegondRank Xerox Research Centre, France, e-maih fi~ederique.~egond@xerox.frAbstractTo deal with long-distance dependencies, Applicative UniversalGrammar (AUG) proposes anew type of categorial rides, calledsuperposition rules.
We compare the AUG rules with the alter-native rules of Steedman's Combinatery Categorial Grammar(CCG) (Steedman, 1987, 1988, 1990; Szabolcsi, 1987; Adesand Steedman, 1982).
In contrast to Steedtmm's rules, the AUGrules are free from inconsistencies in their semantic interpreta-tion, fi'ee from spurious ambiguity.
"lhe superposition rules arcbased on the Theory of Type Supetposition, established indepen-dently of the problem of long-distance dependencies and havinga broad unifying power.I.
Characterization of ApplicativeUniversal GrammarApplicative Universal Grmnmar (AUG) is a linguistictheory that uses the lormalism of catcgorial g~unmar ,as ameans for representing the structure of language.
AUGhas two levElS: 1) lhe study of the grammatical s ructurcin itsclt (genotype grammar), ~md 2) the study of the lin-ear representation f the grammatical structure (pheno-type grammar).
AUG includes a system of combinators(Curry and Feys, 1958) ,'rod fi)nnulates semiotic oncepts,principles, and laws that dctcnninc tile fimctioning of nat-ur~d languages ,as sign systems (for a complete descriptionof AUG, see Shaumyan, 1974, 1977, 1987; Dcsci6s,1990; Scgond, 1990a; some applications of AI \]G arc dis-cussed in Shaumyan 1989, 1991).AUG is based on the relation operator-operand, whichcorresponds to the relation fi~nction-argument i  catego-rial grmnmar.
We prefer the terms operator-operand forreasons imilar to those given by l l indley and Seldin(1986, pp.
44-45).
In AI IG categories are generated rccur-sively by the type-forming operator O, and are calledO-types.
AUG recognizes two primitive types--terms(nouns and noun-phrases) and sentences, denoted by t mids, respectively.
The rule for generating O-types is:1) The primitive types t and s are O-types.2) If x and y m'e O-types, then Oxy is an O-lype.
(1)For the sake of brevity, we use the term type in the senseof the O-type.
Taking t and s as primitives, wc generatethe inductive class of types: t, s, Ott, Oss, Ots, Ost, OtOts,OOtsOts, and so on.In representing the types we u~ the parentheses-free Pol-ish notation, which is more convenient than Curry's nola-tion with internal parentheses.The basic rule of combination of phrases is the Rule ofPhrase Application, which is defined as follows:Phrase A of type Oxy, called an operator, combineswith phrase B of type x, called its operand, to formphrase AB of type y, called its resultant:Oxy A x By (AB) (2)The applicative tree of (2) has the form:y (AB)Oxy A x B (3)"llm concept of immediate constituents i  defined as:If phrase A is ml operator and phm~ B is its operand,then they ,are inunediate constituenls of file resultant(AB).
(4)The concept of closeness i defined as:(liven phrases A and B that are immediate constituentsof phrase (AB), if A is a complex phrase comprisingimmcdiate constituents C and D, then the syntacticand semantic onnEction between C and D is closerthan the syntactic m~d scmanlic onnection between Aand B.
(5)Under definition (5) various degrees of relative closenessof syntactic and semantic onnection between immediateconstituents me distinguished depending on the complex-ity of a phrase.in phenotype grmnmm" the application operation is con-strained by two principles: the Principle of Adjacency ofOperators and Their  Operands and the Principle ofUniqueness of hmnediate Constituents.l'rinciple of Adjacency of Operators and Their Operands:An operator and its operand must be adjacent ele-ments of a sequence, so that tile operator eitherdirectly precedes or directly follows its oper,-md.
(6)Under file Adjacency l'rinciplc we have two new rules - -the notational wuiants of operator application: one fortorward combination mid one for backward combination:Oxy A x By (AB) (7)853x A Oxy By (AB) (8)These rules are called the Linear Precedence Rules'.
Analternative notation for these rules splits the type-formingoperator O iuto indexed type-fot~ning operators O r and 0 lwhich generate types of the form Orxy and Otxy.
Theoperator of type O~xy has its operand on its right, and fileoperator of type OtxY has its operand on its left.
So theLinear Precedence Rules may be presented as follows:Orxy A x By (AB) (9)x A Olxy By (AB) (10)llere is an exmnple of applying this notation:OrtOtts bought t newspaperst John Ods bought newspaperss John bought newspapers (11)Given file Rule of Phrase Application and Linear Prcce-dence Rules, we can combine tile two rule formats intoone system, as is done with the corresponding rule for-mats in Generalized Phrase Structure Greanmar (Gazdaret al, 1985: 44-50).Principle of Uniqueness of immediate Constituents':If phrase A aud phrase B are immediate constituents ofphrase C, then neither A uor B can be an immediateconstituent of another phrase D. (12)qb illustrate, consider the sentence: John loves vodka.Here loves and vodka are the immediate constituents of(loves vodka), enid John.aud (loves vodka) are tile hnme-diate constituents of (John (loves vodka)), tinder thealxwe constraint, this analysis precludes analyzing thissentence as: ((John loves) vodka).In terms of "algebra, the Principle of Uniqueness of hnme-diate Constituents con'esponds to non-associativity:AUG is a non-associative system.To make the AUG notation compact, we introduce recur-sively defined adjoined symbols (Shaumyan 1987: 199):A type symbol is called adjoined if it is introducedinto tile type system by a definition of file form:Z = Oxywhere z denotes ,'m adjoined type and Oxy denotes atype where x and y are either other ,adjoined type sym-bols, oft, ors.
(13)This type of definition is called definitional reduction.By this process all adjoined type symbols are defined illterms of the uithnate definientia t ,'rod s. We can introduceas many adjoined type symbols as we need.
l lere areexamples of the definitional reduction for adjoined typesymbols that will be used below:PI = OtsP2 = Oqh = OtOtsP3 = Otpz = OtOtOtsd I = OplPl = OOtsOtsd2 = OP2 P2 = OOtplOt Pl = OOtOtsOtOts (14)AUG clahns that a typology of word order must be basedon a comparison of specific word orders in individual lan-guages with a canonical word order as defined in geno-type gr,-anmar.
The canonical word order requires that anoperator precedes its adjacent operand.
For ex,'unple, thecanonical form of file sentence My older brother boughtan interesting book yesterday is: (yesterday ((bought (an(interesting book))) (my (oMer brother)))).2.
Long-Distance Dependencies in CCGConsider, for example, the phrase Apples which Harryeats.
This phrase contains three sets of binary depen-dences: 1) apples-eats, 2) which-eats, and 3) Harry-eats.The first two sets consist of discontinuous constituents.This is ml iastauce of file phenomenon called intersectingdependencies.
Intersecting dependencies arise when oneset of discontinuous constituents is intercalated byanother set of discontinuous constituents in the surfaceexpression.
To find au adequate formed characterization fdiscontinuous constituents and intersecting dependenciesis one of the cenla~d problems for categorial gr,'umnar, aslbr auy linguistic theory timt is concerned with linear rep-resentation of expressions.
This problem induced somelinguists to introduce new rules extending the tbnnalismof categori~d gramm~u'.
Sleedman's Combiuatory Catego-rial Grammar (CCG) proposes file following ,-malysis ofthe phrase Apples which Harty eats (1987:415; presentedhcrc in the AUG notation):(apples) which llartyOOtsOtt OOtssOtteatsOtOts?OIII|X)Se backwardOtsapply forward(15)In (15), subject ype raising (assigning OOtss to Harry) incoujuuction with composition is used to resolve tile diffi-culty caused by gapping involved ill the extraction of thedirect object of the finite verb eats.Forward and backward composition ,are dclined as fol-lows (ill terms of AUG):Under the rule of "compose forward", A of type Oxyand B of type Oyz combine to yield the result (AB) oftype Oxz.
Under the rule of "compose backward", Aof type Oyz aud B of type Oxy comhinc to yield theresult (AB) of type Oxz.
(16)Type rai~ing is defiue(l as ,'m operation whereby an oper-,'rod acquires a new type that turus it into ,'m operator overits operator.
The general rule of type raising in tile AUGnotation is:x -~ OOxyy (17)854For exmnple, subject ype raising is delined in lerms ofAUG as follows:Subject ype raising is a proccss by which a subject oftype t acquires the type OOtss, which turns it into anopcmtor over the predicate (51 type Ots.
( l  8)As ,'mothcr examplc of the ~m;dysis Ihat uses type raising,let us eonsidcr the scntcnce John loves Mary wiMly andSue madly (Bouma, 1989: 25).
Using typc raising andcompositiou, the analysis of this sentence can be pre-senlcd as follows in |he AI.
IG notation:John loves Mary wiMly and Sue nuMlyt P2 t Op2P2 OxOxx t Op2P2raise objectOp2Pl OP2PlCOl I|\[)OSP, .
.
.
.
.backward OP2P 1 O1)215 Iapply for w,'ml .
.
.
.
.
.
(X)P2Pl ()p2plapply I~mkwardOP2Pl.
.
.
.
.
.
.
.
.
.
.
.
.
apply backwardPtapply I)ackwards (19)in (19), to resolve the diff iculty caused by gappinginvolved in the coordination operation, object ype raisiugis used (assigning OP2Pl to Mary and Sue) ahmg withcomposition.l)oes lhe CCG machinery produce adequate syntactic andsemaulic represenlations of the stn~cturc of a sentence?What is the semantic interpretation (51 type raising?It is ckfimed lhat Ilm nominative case moq)hology in lali-guages like 1 ,atin delermines a noun-phrase argument likeBalbus to be something that must combine with a predi-cate (Steedman, 1990: 22l).
But case endings ~e not reli-ablc cr i ter ia  for detc , 'min ing facts of syntax andselnalllics, lit Russiml and lnally oilier languages thc lIOlll-inativc h~Ls no cndings.
Scmantic~dly, predicate + subjectis an attributivc onncclion just as adjectival modiJier +subject, l?cdieate and a((jcctival modificr arc determin-ing members, and sul)jcct is thcir determined member.Accordingly, wc get tile prolx)rtion:predicate : subject = adjectival modifier : subject (20)This means that if the synlactic categorial system is toconfi)rm to the semantic atego,'ial system, predicatesmust be operators over subjects just as adjee|ives.
Typeraising transforming sut)jeets inlo operators over predi-cates conllicts with the scmmllie categorial system.Furthermore, if in (19) we have a correct analysis of e(~)r-dination, we should bc able to deduce the two interpreta-tions of the scntence John loves Mary wildly and Suemadly: "John loves Mary wildly, aud John loves Suemadly" mid "John loves Mmy wildly, and Sue loves M,-u'ymadly."
This is a classic case of mnbiguity with co(n'dina~tion (we do not know if the second conjunct is subject orobject).
Unfortunately CCG fails to distinguish I)ctweenthc two interpretations.The other well-known prot)lem with type raising is spuri-ous ambiguity.
Spurious mnbiguity is multiple mmlysesof one sentence, Idl o1' them related to file s~unc seinauticinterpretation.
For instance, just by using subject andol~icct ype raising one obtains four different analyses ti)ra simple sentence:John loves Maryt Otp I t -~ s()pl s OtPl t --> sOpls OtPl Opzpl ~ > st ()lPl Op2Pl - ~ s (20These lour a\[mlyses arc associated with just one motoring:((loves Mary) John).There m'e other difficulties with type raising.
We see thatin (19) (Mary wildly) and (Sue madly) m'e assigned typeOP2Pl, which is associated with the accusative luucli(nLIt is very dillicult to accept hat (Mary wildly) or (Suemadly) are direct objects of low', or that they arc at allcolnpatitsle.
The correct analysis is: the adverbs wildlyand mad@ me modifiers of the verb love, ,'rod the nounsMary and Sue are direct objects of the verb love.
(Marywildly) and (Sue madly) arc phantom coustituenls Ihat (1oIIO1 correspoll(l I(1 ~uly synlaetic or SeluaulJc reality.Type raising corresponds to Ihe coml)inator C. and com-posithm correspond to combinator B.
Both m'c powerfultools when properly used.
One of tim conditions of Ilmirl)rope r use is respect for constituency.
A(1G uses thesecombinators widely when their usc is justified.The main sin oi' CC(; is that it fails to recognize Ilmt syn-laclic al|d semantic onnections are non-associative.
CC(;bmls liom linguistics Ilm norm~d non-~tssocialive constitu-ency mmlysis based on the explicit or implicit rccognilionof the hierarchy of relative syntactic m~d semmdic lo~-IleSS of  cOnlleCliOllS betwecll inunediate conslituents of asentence.3.
The AUG Theory of Type SuperpositionAn altcrnativc method of parsing gapping consmlcthms ibased on Ihc Thcory of Typc Superpositi(m. "1o explainour new method, wc need to outline this theory briclly.
( ;iron a synlactic unit, a secondary syntaclic type may bcsupelposed on its inhercnl, primaxy syntactic tylx: so as toform a new bislralal, syncretic type.
For exmnple, whenthe suflix -ing is used to change Ihe linite form of Ilm verbto itlslruct into a verbal noun-  -the so-called gerund-instructing, wc have a ease of the supcrposition of type ton type OtOts.
Thc verNd noun retains thc synlaetie rime-lion of Ihe verb to inslruct: it can lake an ot'dcct in theaccusative (on instructing him) and an adverb (He sug-gested our immediately instructing them).
The s~unc isline of Ihe I~nglish or French inlinilives: they behave bothlike verbs and nouns.
For exmnplc, ill tile Frellch senl~llecLife des livres est divertissant or in the English scntence"lb read books isfim the infinitivcs lake direct objccts likcfinite verbs and simultaneously are subjects like nouns.The suflix -ing (or any olher similar device) we call a8:;5superposer, and the finite form of the verb to instruct withrespect to the suffix -ing we call the superponend of -ing.The suffix -ing superposes the syntactic type t on the syn-tactic type OtOts of the verb to instruct so as to combinethem into a new syncretic syntactic type.We can formalize the notion ofsuperposition ,as follows:Let E be an expression of type x, and let E take ontype y on type x.
Then E shall be said to belong to typez such that z is stratified into y superposed onto x.Type z is represented by the formula:<y:x) (22)where the colon C) indicates the stratification of type zinto y superposed on x enclosed into angle brackets.
Theright part of the formula indicates the primary type of E,and its left part indicates the secondary type of E.Definition of superposer:An operator R of type Ox<y:x> shall be calleda superposer.
(23)Rule of Superposition:Ox<y:x> A x B<y:x> (AB) (24)Type superposition has important consequenccs both forlinguistic theory mid computational linguistics, the dis-cussion of which is beyond the scope of the present paper.We will only focus on the topic of our paper--long-dis-tance dependences.
For the lack of space we must confineourselves to some examples of our approach that concerutopicalization, relative clauses, and gapping (a detailedpresentation of the theory of type superposition is givenin Shaumyan and Segond, 1993).4.
Long-Distance Dependencies in AUGWe propose anew approach to parsing gapping sentencesthat allows us to dispense with the concept of type rais-ing.
AUG claims that gapping superposes econdarytypes on primary types of the adjacent syutactic units of asentence, thereby establishing new relations betwecnthem on top of the old ones preserved in superposition.Here is the AUG alternative analysis of the phrase in (15):(apples) which Harry eatsOxOtt t OtOtsSUl)etl)ose dis~Ots:OtOts>apply backwardSapply forwardOtt (25)Under the characterization f superposition i the forego-ing section, the obligatory absence of the adjacent directobject in apples which Harry eats is a contextual operatorsuperposing type Ots on type OtOts of eats.
Thc superpo-sition yields the same result as the hypothetical pplica-tion of eats to its absent direct object.
That is, thesecondary type of eats is equivalent to the type of thehypothetical combination eats' + direct object.
Then, theapplication of eats to Harry results in Harry eats of types.
Following Benveniste's analysis of relative pronouns(1966: 208-224), we consider them operators having vari-able operands; hence, type OxOtt is assigned to which.Type superposition is a strictly fonn,-d concept reflectingobservable formal processes of language.
There areobservable strictly formal criteria for defining superposi-tion.
A derived syntactic unit with a syncretic type isalways more complex than the initial one; it consists oftwo parts: initial syntactic unit + superposer.
So read-ing,where -ing is a superposcr, is more complex than read.But where are formal markers of superposition i (25)?The answer is that superposers, as all other languageitems, are signs, and a sign is not necessarily a sequenceof sounds.
It may be a change of stress, an alternation, achange of word order, a change of grammatical context,etc.
(ShaumymL 1987: 3-5).
In (25) the syntactic onfigu-ration of the phrase apples which Harry eats containsobservable contextual signs of superposition.
To do jus-tice to this fact we have to use an adequate formalism.AUG includes two principles to describe superposition:the Principle of Elimination of Empty Constituents andthe Principle of Syntactic Assimilation.Principle of Elimination of Empty Constituents':Given a syntactic group of an operator A of type Oxyand its operand B of type x, either A or B may beempty: 1) if B is empty, empty B serves as a contex-tual sign superposiug type y on type Oxy of A, so thatA is assigned the syncretic type <y:Oxy~; and 2) ifAis empty, empty A serves as a contextual sign super-posing type y on type x of B, so that B is assigned thesyncretic type <y:x~.
(26)The Principle of the Elimination of Empty Constituentseharactcrizes natural syntactic onnectivity.
When in thegroup operator:operand file empty operand is eliminated,the operator represents the whole group and is assignedthe type of the whole group.
Conversely, when in thegroup operator:operand the empty operator is eliminated,the operand represents the whole group and is assigncdthc type of the whole group.Lct us turn to the senteuce John loves Mary wildly andSue madly in (19).
As was said above, this sentence is,'unbiguous: Sue may bc a subject or ,an object.
A correctsyntactic analysis of this sentence must reflect thissemantic ambiguity.
Dcpending on two possible iutcrpre-tations of this sentence, we discover two different gap-pings here: "John loves Mary wildly, and \[loves\] Suemadly" and "John loves Mary wildly, and Sue \[lovesMary\] madly".
In the light of the lhiuciple of Eliminationof Empty Constituents, AUG proposes the following twommlyses of the sentence to reflect wo different gappings:856John loves Maryt P2 tapply --f6rward Plapplybael~wardwiMly andOPlPl OxOxxP lPlllovesl Sue madlyt OPlPlsuperpose Pl - -<Pl:t>applybackward Pl?
applyOP lP  1 forwardapply backward(27)John loves Mary wildly and Sue ltoves Mary\] madlyt P2 t OPlPl OxOxx t OplPl- -  apply superpose Plf6rw~d Pl ~PI:OPlPl >apply applybacl~ward bacl~ward Pl S~apply applybackward OSS f6rwardapplybackward (28)Principle of Syntactic Assimilation:Given two phrases A and B belonging to types incom-patible under the Rule of Phrase Application, one ofthese phrases can change its type by superposition sothat the types of the two phrases become compatible,if tile relation A:B is analogous to some relation X:Ybetween phrases of compatible types.
(29)Consider the sentence Apples Harry eats.
qtfis sentence isan exmnple of long-distance dependency because the sub-ject intervenes between the direct object and the predi-cate.
!
Iere is tile AUG analysis:Apples Harry eatst t OtOtsSUl~rpose Ol,s<Ots:OtOts>apply backwardS- - -  superpose Ols<Ots:S~apply backwards (30)We observe that in (30) Apples is the topic and Harry eatsis tile comment.
Since the proportion topic : comment =subject : predicate holds, type Ots is supcrposed on type sof ttarry eats.The Principle of Syntactic Assimilation is completelygeneral: it concerns both long-distance and immediatedependencies.
Consider the phrase gold watch.
Bothwords have type t. Therefore, they belong to incompatibletypes.
But since the proportion gold : watch = goMen :watch holds, type Ott is superposed on type t of goM.The phenomenon of superposition must not be coufusedwith polymorphism.
Polymorphism is a situation when aword is assigned several types, having equal syntacticweight.
For example, an English adverb can be assignedat least three types having equal syntactic weight: OPlPl ,Op2P2 or  OP.~3, depending whether it modifies an intran-sitive, transitive or ditransitive verb.
Iiere we have anequality between the types.
But in the above example thenoun gold remains a noun even though it modif iesanother noun.
To describe polymorphism in a compactway, Fr6d6rique Segond has introduced the concept oftype variable.
"Ilms, the above and other types that can beassigned to an adverb are coded by the formula Oxx (Seg-ond, 1990a: 131-132).
Other cases of polymorphism areexhibited by the conjunction and, which can combine twosentences, two nouns or any units belonging to identicaltypes; ~md by the relative pronoun which of type OxOtt,mentioned in (25).
Depending on different cases of poly-morphism, we introduce various type variables.5.
ConclusionWe have compared two "alternative methods of compula-lion of long-distance dependencies: the CCG and AUGmethods.
Both methods ,are consistent with respect otheir mathematical machinery.The essential difference between the two methods is thatwhile AUG with its theory of superposition expands itsformalism to reflect file linguistic reality, CCG, by aban-doning the normal constituency analysis, gets caught upin its formalism to lapse into linguistic unreality.CCG analysis produces phantoms, as:(He must) leave.
((He must) love) her.
(31)This startling analysis does not permit us to correctlydescribe agreement, government and clitization.
Theseartificial constituent structures are completely divorcedfrom the syntactic and semantic reality.The CCG's use of type raising iu conjunction with typecomposition changes the initial natural types assigned towords into artificial types and produces artificial constitu-ents for the convenience of computation.
By contrast,supeq)osition, in conj unction with the Principle of Elhni-nation of Empty Constituents and the Principle of Syntac-tic Assimilation, changes natund types into natural typesand produces yutactically and semantically appropriateconstituents without any sacrifice in the consistency ofthe mathematical formalism or in the convenience ofcomputation.In support of their departure from the accepted ealalysesof syntactic onstituents he proponents of the CCG referto psychological studies ou speech recognition claimingthat hmnan "recognizer" works "from left to right".
(Adesand Stcedman, 1982: 517-518).~\[kvo problems arise here.
First, although uman speech islinear and the words of a sentence are produced from leftto right, so to say, that does not mean that the listener ana-lyzes spccch word by word.
It is reasonable to assumethat the listener performs the analysis of a sentence firstby syntactic blocks and then globally.
There is no conchl-sive psychological evidence that tile hearer's recognitionof tile sentence sUucture corresponds to the CCG methodthat disposes with the normal constituency analysis.Second, psychological phenomena are irrelevant to con-firmation or refutation of linguistic theories, because fin-857guistics is completely independent of psychology.
True,linguistic processes involve the psychological processesin the human mind.
But logical and mathematical reason-ing also involve psychological processes, l lowever,nobody tries to b~se logic or mathematics on psychology.Linguistics is part of semiotics--the theory of sign sys-tems.
Sign systems, as well as mathematical systems, arein the human mind.
But the laws of semiotics and mathe-matics are different from the laws of psychology.One may argue that computational linguistics is differentfrom ordinary linguistics ,and therefore any parser will dofor computational linguistics as long as it "works".
Webelieve that good computatiolml linguistics must be goodlinguistics ,'tq well.
Both ordinary and computational lin-guistics must share common theoretical principles charac-terizing the nature of human language.
Computatiouallinguistics is not second-rate linguistics where anythinggoes.The real difference between the two types of linguis-tics is that compuUltional linguistics exp,'mds ordinary lin-guistics by rules character iz ing its interaction withcomputers rather than distorts it.
Computational linguis-tics is at the cutting edge of the study of hum,'m lauguage:it must enrich our understauding of all its aspects, ratherthem fudge the linguistic oncepts for the sake of the easeof the implementation.The irreparable defect of the CCG method is that it pro-duces phantom constituents m~d phautom slructures thatprechtde a correct analysis of linguistic processes.The CCG method is interesting attd important as anexperiment in rite application of combiuators in linguis-tics.
The negative results of this experiment ~u'e importantin that they reveal the hazards involved in the use of com-binators (for use of combiuators in AUG, see Shaumyan,1987; Descl6s, 1990; Descl6s et al 1985, 1986).As an instrument of cognition mathematics has a specificfunction--to be a tool of deduction.
But deduction is neu-tral to file value of ideas.
It is like a mill: if you put graininto it, you will get flour; ~utd if you put in chaff, you willget processed chaff.
Mathematical consistency does uotguarantee a correct description of reality.
"Side by sidewith mathematization f knowledge, mathematization fnonsense also goes on (N~dimov, 1981: 149)."
The use ofmathematics as a tool of deduction makes sense onlywhen the initial ideas from which we deduce their conse-quences have value (on use and abuse of mathematicalformalism, see Shaumy,'m 1987: 28-29, 318-321).In conclusion, we would like to say a few words about Ihecomputer implementation f AUG, Fr6d6rique Segondhas implemented AUG and its theory of superposition todeal with infinitive clauses and gerunds in French (for acomplete description of the parser, see Segond, 1990a).This parser has been implemented in PLNLP (Program~ruing Language for Natural  Language Processing,described in lleidom, 1972) at the IBM Research Centerin l'aris.
The parser uses a machine dictionary of 50,000ena'ies ~md was tested on more thm~ one hundred ifferenttypes of sentences, including constructions such as rela-tive clauses, simple cases of coordinatiou, infinitiveclauses, and gerunds, among others.
Currently Sebasli~mShaumyan is working on implementing AUG in func-tional programming languages (Miranda, I Iaskell).ReferencesAdes, Anthony and Steedman, Mark.
1982.
"On tile Order ofWords".
Linguistics and Philosophy, 4, pp.
515-578.Benveniste, l~mile.
1966.
Probldmes de linguistique gdndrale.Editions Gallimard.Bouma, Gosse.
1989.
"Efficient Processing of Flexible Catego-rial Grammar".
In Proceedings of ACL (European Chapter),Manchester, pp.
12-26.Curry, Haskell B. and Feys, Robert.
1958.
Combinatoty Logic.Vol.
1.
Amsterdam: North-Holland Publishing Company.Descl6s, Jean-Pierre; Guentch6va, Zlatka; Shaumyan, Sebas-tian.
1985.
Theoretical Aspects of Passivization i the Frame-work of Applicative Grammar.
Aansterdam & Philadelphia: JohnBenjamins Publishing Company.Descl6s, Jean-Pierre; Guentchfva, Zlatka; Shaumyan, Sebas-tian.
1986.
"Reflexive Constructions: 'lbwards aUniversal Deft-nitiou in the Framework of Applicative Granuuar."
Linguisticaelnvestigationes, 2.Descl6s, Jean-Pierre.
1990.
Languages applicatifs, languesnaturelles et cognition.
Paris: Hermes.Gazdar, Gerald; Klein, Ewan; Pullum, Geoffrey; Sag, Ivan.1985.
Generalized Phrase Structure Grammar.
Cambridge,Massachusetts: lhtrvard University Press.Iteidorn G. E. 1972.
Natural Language Inputs to a SimulationProgramming System.
Technical report from the Naval Post-graduate School.llindley, J. R. and Seldin, J. P. 1986. lntpoduction to Combina-tors and Z-Calculus.
Cambridge: Cambridge University Press.Nalimov, V. V. 1981. hi the Labyrinth of lzJnguage: A Mathe-matician's Journey.
Philadelphia: ISI Press.Segond, Fr6d6rique, 1989.
"Grammaire cat6gorielle earichie:uue implementation", hvceedings of the 7th Congress AFCERFIA, P;u'is, pp.
599-613.Segond, Fr6d~rique.
1990a.
Grammaire eatdgorielle dufrancais, t/tude th(orique t implantation.
Le systkme GraCF(Grammaire Catggorielle Etandu).
Paris: IBM FRANCE.Segond, Fr~d6rique, 1990b.
"Approches des grammairescat6gorielles".
Mathdmatique, lnformatique t SciencesHumuines, 110, pp.
47-60.Shaumyan, Sebastian.
1974.
Applikativnaja grammatika kaksemanticeskaja teorija jazyka.
Moskva: Nauka.Shaumyan, Sebastian.
1977.
Applicative Grammar as a Seman-tic Theory of Natural Language (translation of Shaumyan,1974).
Chicago: tJuiversity of Chicago Press.Shauinyan, Sebastian.
1987.
A Semiotic Theory of Language.Bloomington & Indianapolis: Indiana University Press.Shaumyan, Sebasti~ul.
1989.
"A Semiotic llleory of KnowleAgeRepresentation and Symbolic Computing."
Proceedings of theFourth International Confetence on Symbolic and Logical Corn?puting.
Madison, SD.Shaumyan, Sebastian.
1991.
"Applicative Ilniversal Grammarand Translation".
t'toceedings ofthe Fifth International Confer-ence on Symbolic aml Logical Computing.
Madison, SD.Shaumyan, Sebastian and Segond, Fr6d6rique, 1993.
"The The-ory of Superposition of Applicative Utfiversal Grammar".
Col-loque ~lnformatique & Langues Naturelles~ (LL.N.)
'93.Nantes: I.R.I.N.Steedmau, Mark.
1987.
"Combinatory Gr~unmars and ParasiticGaps".
Natural xtnguage and Linguistic Theory, 5, pp.
403-439.Steedman, Mark.
1988.
"Combinators and Grammars".
InOehrle R. T., Bach E., Wheeler D.
(eds.
), 1988, CategorialGrammars and Natural Language Structures, Dordrecht: I).Reidel 'ul~lishiag Company, pp.
207-263.Steedman, Mm'k.
1990.
"Gapping as Constituent Coordination".Linguistics and Philosophy, 13, pp.
207-263.Szabolcsi, Anna.
1987.
"On Combinatory Categorial Gram-mar".
In Proceedings of the Symposium on Logic and language,Debrecen, Budapest: Akademiai Kiado, pp.
151- 162.858
