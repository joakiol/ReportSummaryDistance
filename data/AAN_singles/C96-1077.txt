Compil ing a Part i t ion-Based Two-Level FormalismEdmund Grimley-Evans*University of Cambridge(St John's College)Computer LaboratoryCambridge CB2 3QG, UKEdmund.
Gr imley-Evans@cl .
cam.
ac.
ukGeorge Anton K i raz  tUniversity of Cambridge(St John's College)Computer LaboratoryCambridge CB2 3QG, UKGeorge.
Kiraz@cl.
cam.
ac .
ukStephen G. Pu lmanUniversity of CambridgeCointmter LaboratoryCambridge CB2 3QG, UKand SRI International, CambridgesgpOcam, sri.
comAbstractThis paper describes an algorithm for thecompilation of a two (or more) level or-thographic or phonological rule notationinto finite state transducers.
The no-tation is an alternative to the standardone deriving from Koskenniemi's work:it is believed to have some practical de-scriptive advantages, and is quite widelyused, but has a different interpretation.Etficient interpreters exist for the nota-tion, but until now it has not been clearhow to compile to equivalent automatain a transparent way.
The present papershows how to do this, using some of theconceptual tools provided by Kaplan andKay's regular relations calculus.1 I n t roduct ionTwo-level formalisins based on that introducedby (Koskenniemi, 1983) (see also (Ritchie et al,1992) and (Kaplan and Kay, 1994)) are widelyused in practical NLP systems, and are deservedlyregarded as something of a standard.
However,there is at least one serious rival two-level notationin existence, developed in response to practicaldifficulties encountered in writing large-scale mor-phological descriptions using Koskenniemi's nota-tion.
Tile formalism was first introduced in (Blacket al, 1987), was adapted by (Ruessink, 1989),and an extended version of it was proposed for usein the European Commission's ALEP languageengineering platform (Pulman, 1991).
A flmtherextension to the formalisln was described in (Pul-man and Hepple, 1993).The alternative partition tbrmalism was mo-tivated by several perceived practical disadvan-*Supported by SERC studentship no.
92313384.tSupported by a Benefactors' Studentship from StJohn's College.rages to Koskenniemi's notation.
These are de-tailed more fully in (Black et al, 1987, pp.
13-15),and in (Ritchie et al, 1992, pp.
181-9).
In brief:(1) Koskennienli rules are not easily interpretable(by tile grammarian) locally, for the interpretationof 'feasible pairs' depends on other rules in theset.
(2) There are frequently interactions betweenrules: whenever the lexieal/surface pair affectedby a rule A appears in tile context of another uleB, the grammarian must check that its appearancein rule B will not conflict with the requirements ofrule A.
(3) Contexts may conflict: the same lexicalcharacter may obligatorily have multiple realisa-tions in different contexts, but it may be impossi-ble to state the contexts in ways that do not blocka desired application.
(4) Restriction to singlecharacter changes: whenever a change affectingmore than one adjacent character occurs, multi-ple rules nmst be written.
At best this promptstile interaction problem, and at worst can requirethe rules to be forInulated with under-restrictivecontexts to avoid mutual blocking.
(5) There isno mechanism for relating particular ules to spe-cific classes of morpheme.
This has to be achievedindirectly by introducing special abstract rigger-ing characters in lexical representations.
This isclumsy, and sometimes descriptively inadequate('h'ost, 1990).Some of these problems can be alleviated bythe use of a rule compiler that detects conflictssuch as that described in (Karttunen and Beesley,1992).
Others could be overcome by simple exten-sions to the tbrmalism.
But several of these prob-lems arise from the interpretation of Koskenniemirules: each rule corresponds to a transducer, andthe two-level description of a language consists ofthe intersection of these transducers.
Thus some-how or other it must be arranged that every ruleaccepts every two-level correspondence.
We refer1;o this class of formalisms as 'parallel': every rule,in effect, is applied ill parallel at each point in theinput.454The partition tbrmalism coImists of two typesof rules (defined in more detail beh)w) which en-force optional or obligatory changes.
Tl~e notionof well-formedness i  defined via the notion of a'partition' of a sequence of lexical/surface corre-spondences, informally, a partition is a valid anal-ysis if (i) every element of the t)artition is licensedby an optional rule, and (ii) no element of thepartition violates an obligatory rule.We have tbund that this formalism has somepractical adwmtages: (1) The rules are relativelyindependent ot: each other.
(2) Their interpreta-tion is more familiar for linguists: each rule copeswith a single correspondence: in general you don'thave to worry about all other rules having to t)e(:ompatible with it.
(3) Multiple character changesart  permitted (with some restrictions discussedbelow).
(4) A category or term associated witheach rule is requi,'e(t o uni(y with the affectedmorpheme, allowing for morI)ho-synta(:tic etfectsto be cleanly described.
(5) There ix a simple andetfMent direct interpreter for tt,e rule forrnalism.Tile partition formalism has been implementedin the European Commission's ALEP system tbrnatural language ngineering, distributed to over30 sites.
Descriptions of 9 EU languages arct)eing develot)e(1.
A version has also be, en im-plemented within SI{.I's Core l,anguage Engine(Carl;er, 1995) and has been used to develot) de-scriptions of English, French, Spanish, Polish,Swedish, and Korean morphology.
An N-level ex-tension of the formalism has also been developedby (Kiraz, 1994; Kiraz, 1996b) arrd used to de.-.scribe t;he morphology of Syria(: and other Semiticlanguages, arrd by (Bowden an(t Kiraz, 1995) forerror dete(',tion in noncon(:atenative strings.
This1)m.'tition-l)ased two-level formalism is thus a seri-ous riwll to the standard Koskcnniemi notation.lIowever, until now, the Koskenniemi notationhas had one clear advantage in that it was clearhow t;o compile it into transducers, with all theconsequent gains in etliciency and portability andwith |;ire ability t;o construct lexical transducersas in (Karttunen, 1.994).
This paper sets out toremedy (ha|; defect by descril)ing a comtfilationalgorithm for the I)artition-bas('d two-level nora-lion.2 Def in i t ion  o f  the  Formal i sm2.1 Formal  Def in i t ionWe use n tapes, where tim first N tapes are\]exical and the remaining M are surface, n --N q M. In practi(:e, M :: 1.
We write Eifor the alphabet of sylnbols used on tape i, andE :: (Er U {el) x ... x (E,~ U {c}), so that E* isthe set of string-tuples representing possible con-tents of the n tapes.
A proI)er subset of regularn-relations have the property that they are ex-pressible as the Cartesian product of n regularlanguages, H. = 1~1 ?
... x l~n; we call such re=lations 'orthogonal'.
(W('.
present our detinitionsalong tire lines of (Kat)lan and Kay, 1994)).We use two regulm" ot)erators: In t ro  and Sub.I n t rosL  denotes the set of strings in L into whichelements of S may be arbitrarily inserted, andSUBA,,~L denotes the set of strings in L ill whichsubstrings that are in /3 may be replaced bystrings from A.
Both operators map regular lan-guages into regular languages, because they canbe, t:haract(!rise(1 by regular relations: over tim al-.phabct E, Intros.
= ( Idz tO ({el ?
S))*, SubA,,~ =-(Id>\] tO (/3 x A))*, wtiere IdL = {(,% a') I .s' 6 L},the identity relation over L.There are two kinds of two-level rules.
The con-text restriction, or optional, rules, consist of a leftcontext 1, a centre c, and a right context r. Surfacecoercion, or obligatory, rules require the centre tobe split into lexical cl and surface c, compolmnts.Det in l t ion 2.1 A N:M context  res t r ie t ion(CR)  rule is a triple.
(/,,c,r) where l ,c , r  are'orthogonal' regular relations of the form l ::I l X .
.
.
X ln~ (: = Cl X .
.
.
X ( :~  ?'
- ?
'1 X .. .
X '1"~,.
\[-1Def in i t ion 2.2 A N:M sur face coerc ion  (SC)ru le ix a quadruple (/,c/,c~,r) where l and rare 'orthogonal' regular relations of tile form l =l I x ... x 1.n~ ?"
: ~"r x .
.
.
x l 'n ,  &lid Cl an(t c sare 'orthogonal' regular relations restricting onlythe lexical and surface tapes, respectively, of the\[:or'rH C l 7?
C I X ... x G N X >~N \[ \[ x ... X ~N-} M and,% = E~' x ... x ) .
\ ]~  x CN+:j x ... x (W+M.
\[\]We usually use the following notation tbr rules:LLC l,I.
;x RI,C ~>\[?-\[?>i,SC S J}{.1.'
\]{.SCwhereI,LC (lel't l(,xi,:al corlt,,~t) = (~, .
.
.
,  1N>LEX (lexical form) = <q,..., oN)RLC (right lexical context )= ( r , , .
.
.
,rN)LSC (left surface context) :: <IN+r,... ,1N+M)SUl l \ ] "  ( sur fac ,  c fo r l l l )  == <c NI.I , .
.
.
,CN+M>II,S(?
(right surt'~(:e conl;cxt) = ( rN+l , .
.
.
,  rN+M)1.
( Sm "e in t)racticc all the left conl;(;xts I.i startwith E~ a.ud all the right contexts ?
'i end with L*,we omit wril;ing it and assume it by default.
Theoperators are: ~ for CII.
rule, s, *{= for S(\] rules and4> for coInposite rules.A prot)osed morphologit:at nalysis 1 ) is an ,~-tuI)le of strings, and th('.
rules are intert)reted asapplying ~o a section of this analysis in conl;ext:455P = l}l~,t~ (n-way concatenation of a left con-text, centre, aim right context).
Formally:Def i in i t ion 2.3 A C19, rule (1, c, r) contextua l lyallows (1}, Pc, P,.)
iff P~ E l, P,.
E r and P~ G c.\[\]Def in i t ion  2.4 An SC rule (l, cl, c,., r) coer-c ive ly  disal lows (Pt, P~,Pr) iff 1} G l, P,.
E r,P,.
Ecl and P,~ ?
c~.
\[\]Def in i t ion  2.5 A N:M two- leve l  g rammar  isa pair (1~_~, \]~,<=), where f~ is a set of N:M con-text restriction rules and I~?
is a set of N:M sur-face coercion rules.
\[\]Def in i t ion  2.6 A two-level grmnmar (R~, R~=)aecepts  the string-tuple l ', partitioned asPt,...,Pa:, iff P = PIt~...Pj,, (n-way concate-nation) and (1) for each i there is a CR ruleA E I I ,  such that A contextually allows? )
.
(I 1 ...I ,-1, Pi, Pi+l ...Pk) and (2) there are no i < jsuch that there is an SC rule/3 E /~?
such that Bcoercively disallows U~ ...P~-I, P~..,Pj-~, 15...Pk).There are some alternatives to condition (2):(2 0 there is no i sudl that there is at, SCrule B E R?
such that B coerciw,qy disallows"D 3.
(t:L...I,.--t,15,Pi+I...Pk): this is (2) with the re-striction j = i + 1; since SC rules can only ap-ply to the partitions P/, epenthetic rules such as(~*@,~i),e X E.~,Z~ X (t,@,k)S*) ('insert an abetween lexical and surface ks') can not be en-forced: the rule would disallow adjacent (k,k)sonly if they were separated by an empty parti-tion: ...(k, k), e, (k, k)... would be disallowed, but...(k, k), (k, k}... would be accepted.
(2ii) there is no i such that there is an SCrule B E Re  such that, B coercively disallows(P1...Pi-:,, Pi, Pi+,...P~) or B coercively disallows(Pt.
.
.Pi- I ,  Pi...P~): this is (2) with the restrictionj = i + 1 or j = i; this allows epenthetic rulesto be used but rnay in certain cases be counteriI>tuitive for the user when insertion rules are used.For example, the rule (E* (g, g), u x E~, E~ x v, E*)('change 'u to v aft;re' a g') would not disallow astring-tuple partitioned as ...(.
(I, g), (e, c), (u, u)... -assmning some CR rule allows (e, e).Earlier versions of the partition fbrmalism couldnot (in practice) cope with multiple lexical char-actors in SC ru les ,  see (Carter, 1995, ?4.1).
Thisis not tit(; case here.The tbllowing rules illustrate the formalism:V B - * =>RI: V b *B - B - * =>R2: b b *c d ?> R3: c b dR1 and R2 illustrate the iterative application ofrules on strings: they sanction the lexical-surfacestrings (VBBB,Vbbb), where the second (B,b)pair serves as the centre of the first applicationof R2 and as the left context of the second ap-plication of the same rule.
R,a is an cpentheticrule which also demonstrates centres of unequallength.
(We assume that <V,V), (c,c) and (d,d)are sanctioned by other identity rules.
)The conditions in Definitions 2.1 and 2.2 thatrestrict the regular relations in the rules to be-ing 'orthogonal' are required in order for the fi-nal hmguagc t;o be regular, because Definition 2.6involves an implicit intersection of rule contexts,and we know that the intersection of regular rela-tions is not in general regular.2.2 Regu lar  Express ions  for Compi la t ion'Ib compile a two-level grammar into an automa-ton we use a calculus of regular languages.
Wefirst use the standard technique of converting reg-ular mrelations into same-length regular elationsby padding them with a space symbol 0.
Unlikearbitrary regulm' n-relations, same-length regularrelations m'e closed under intersection and comple-mentation, be.cause a theorem tells us that theycorrespond to regular languages over (e-free) n-tuplcs of symbols (Kaplan and Kay, 1994, p. 342).A proposed morphological nalysis P = P1 ...P~:can be represented as a sanle-length string-tupleco l3lwt~2w...wlSt, w, where \[~ E E* is Vi convertedto a same-length string-tuple by padding with0s, and w = (wl,...,w~,), whe.re the {w~} arenew symbols to indicate the partition boundaries,w~ ?
~ v {0}.Since in a partitioned string-tuple accepted bythe grammar (R=>, R~=) each Pi E e for some CRrule (l, c,r) ERa ,  we can make this representa-tion unique by defining a canonical way of convert-ing each such possible centre (2 into a same-lengthstring-tuple 6'.
A simple way of doing this is topad with 0s at, the right making each string as longas the longest string in C: if C - (Pl, ...,pn),(;' = (>0" ,  .
.
.
,p,,0*) n >~* - z* (0 ,  ..., 0) (1)However, since we know tit(; set of possible pro._titions - it is U{c \] ~l,r(l,(-,'r} E 1{:,}- we canreduce the number of elements of E in use, andhence silnplify the calculations, by inserting the 0sin a more flexible manIter: e.g., if C -- (ab, b}, letO = (ab, Ob) rather than (?
: (ab, b0): assuminganother ule.
requires us to use (b, b} anyway, weonly haw; to add (a, 0) rather than (a, b} and (b, 0).456The 1)reprocessor could use simI)le heuristics tomake such decisions.
In any case, the padding oft)ossibl(, t)artitions (:arries over to the (:entres c ofca  r, les: it" (l,,-,,-) e = {0  I C c c}.I tencetbrth let 7c be l;he set; of elements of E thatappear  in seine 0-padded rule centre.The contexts of all rules and the lexical andsurface Celltres of SC rules Inust l)e converted intosame-length regular n-relations |)y inserting 0s ata\]l 1)ossible positions on each tape independently:if a; - 2 ;  1 x .
.
.
x xntx ?= ( In t ro to}xt  ?
... ?
Intro{o}xn)Fire* (2)Note the difference between this insertion of0 everywhere, denoted x ?, and the canonicalpadding L'.
Both r('quire the 'orthogonal i ty'  condi-tion in ord('r for the intersection with 7r* to yielda regular language: inserting Os into (a, b}* atall possibh; l)ositions on each tape iIulependentlywould give a non-regular elation, for examt)le.Now we derive a formula ibr the set of O-padded;rod part i t ioned analysis st;rings accepted by thegrammar  (/~,=>, 17,?_): The set of O-pa(l(ted centresof context; restriction rules ix given by:u = I c,,,..(L,c,,.)
(s)th,re we assume that  these centres are disjoint(Vc, d ~ .l).c : d V c f\] d = 0), because in prac-tice each c in a singleton set,, however tiler(; is analternative deriw~tion that  does not require this.We proceed subtraetively, start ing as an initialapproximat ion with an art)itrary concatenation ofthe possible l)artitions, i.e.
the (:entres of Cl/, rules:co(Dee)* (4)From this we wish to subtract  tim set of stringscontaining a t)artition that  is not allowed by anyCR rule: We introduce a new placeholder symbolT, r ~ 7c O {co}, to represent he centre of a rule,so the set of possihle contexts for a given centreG D is given by:\[.J z%, .?
(s)( / ,~,r )~l l  ,So the set, of contexts in wlfich the centre c maynot, al)t)ear is the comlflement of this:rC*Tre* -- U I('T"'?
(6)(t,,Lr)<1~Now we can introduce t;he partit ion sel)arator cothroughout,  then substitute the centre itself, w&o,for its placeholder T in order t() derive an expres-sion for the set of part i t ioned strings in which aninstan('e of the centre c al)l)ears ill a context  inwhich it, is 'not allowed: \[o denotes comt)osition \](7)If we subtract a term like this tbr each ~ 6 DDorn our initial approximat ion (eq.
4), then wehave all ext)ression for tile set of strings allowedby the CR rules of tile gralnlnar:C D(l,~,r)C51i, >\]t remains to enforce the sm'fime coercion rules/~-.
For a given SC ruh; (1, ct, Cs, r) 6 /~,<:, a, firstal)llroxinmtion I;o tim set of strings in which thisrule is violated is given by:I n t ro{w} (/t/co(c'/' -- Cs?
)cor 0) (.9)Here (r,'(~) - c~) is the set of strings that  matchthe lexical centre but, do 11ol, match the surfacecentre.
For part (2) of Definition 2.6 to apply thismust equal the concatemttion of 0 or more adja-cent partit ions, hence it has on each side of it, thepartit ion separator co, and the operator  I n t ro  iil-troduces additional part it ion separators into tilecontexts and the centre.
The only case not yet{:overed is where dm centre matches 0 a(\[jacentpartit ions (i = j in part  (2) of Definition 2.6).This can be dealt with by prefixing witll the sub-stitution operator Sub~o,o0w, so the set of strings inwhich one of the SC rules is violated is:U Sub~o,~o~o o Intro{~} (l?co(cp, - c(:)cor ?
)( I,,~, c., ,.,.
)(.
lt<~We subtract; this too fl'om our aporoxin, a~l(ur{(eq.
8) in order to arrive at a formula for the setof 0-padded and partitione(l strings that  are ac-(:epted Iiy the grammar:& = co(Dw)* -  \[_J Sub~<~ o~GI)( / ,d,r)6 IL >" " U Subw,ww oIntro{~} (/?co(el ' - -  c\[~)co, '?)
(1\])Finally, we can replace l;he part it ion separatorco anti the st)ace sylnbol 0/)y e to convert So intoa regular (but no longer same-length) relation Sthat maps t)etween lexical and surface representa-tions, as in (Kaphm and Kay, 1994, p. 368).3 Algorithm and IllustrationThis section goes through the compilat ion of thesamI)le grammar  in section 2.1 step by step.4573.1 Preprocess ingPreprocessing involves making all expressions ofequal-length.
Let, E1 = {V,B,c,d,0} and E~.
={V,b,c,d,0} be the lexical and surface alphabets,respectively.
We pad all centres with O's (eq.
1),then compute the set of 0-padded centres (eq.
3),D = {(B,b), (0,b), {V,V), (c,c), (d,d)} (12)We also compute contexts (eq.
2).
Uninstantiatedcontexts becomeIntro{o}(E~) x Intro{o}(E~) (13)The right context of R3, for instance, becomesIntro{o}(dS~) x Intro{o}(dE~) (\]4)3.2 Compilation into AutomataThe algorithm consists of three phases: (1) con-structing a FSA which accepts the centres, (2) ap-plying CR rules, and (3) \[brcing SC constraints.The first approximation to the grammar (eq.
4)produces FSA1 which accepts all centres.DFSA1Phase 2 deals with CR rules.
We have two cen-tres to process: (B,b) (R1 ~ R2) and (0,b) (R3).For each centre, we compute the set of invalid con-texts in which the centre occurs (eq.
7).
Then wesubtract his from FSA1 (eq.
8), yielding FSA2.<d,d><d,d> ""FSA2The third phase deals with SC rules: here theportion of R3.
Firstly, we compute the set ofstrings in which R3 is violated (eq.
10).
Secondly,we subtract he result from FSA2 (eq.
11), re-sulting in an automaton which only differs fromFSA2 in that the edge from q5 to qo is deleted.4 Comparison with PreviousCompilationsThis section points out the differences in compil-ing two-level rules in Koskenniemi's formalism onone hand, and the one presented here on the other.4.1 Over lapping ContextsOne of the most important requirements of two-level rules is allowing the multiple applicationsof a rule on the same string.
It is this require-ment which makes the compilation procedures inthe Koskemfiemi formalism - described in (Ka-plan and Kay, 1994) - inconvenient.
'The multi-ple application of a given rule', they state, 'willturn out to be the major source of difficulty inexpressing rewriting rules in terms of regular re-lations and finite-state transducers' (p. 346).
Thesame difficulty applies to two-level rules.Consider R1 and R2 (?2.1), and D ={(V,V>, <B,b)}.
(Kaplan and Kay, 1994) expressCR rules by the relation, 1Restrict(c, l r) : 7r*l c~r* N ~c*c rlr* (15)This expression 'does not allow for the possibil-ity that the context substring of one applicationmight overlap with the centre and context por-tions of a preceding one' (p. 371).
They resolvethis by using auxiliary symbols: (1) They intro-duce left and right context brackets, <k and >k,for each context pair lk - rk of a specific centrewhich take the place of the contexts.
(2) Thenthey ensure that each <k:<k only occurs if itscontext Ik has occurred, and each >k:>k only oc-curs if followed by its context rk.
The automatonwhich results after compiling the two rules is:V:V V:V >k:>k >~:>~ >~:>~ ~:<,V:VB:bV:V>1:>1.
'2:>2Removing all auxiliary symbols results in:B:bV:VOur algorithm produces this machine directly.Compiling Koskenniemi's formalism is compli-cated by its interpretation: rules apply to the en-tire input.
A partition rule is concerned onlywith the part of the input that matches its centre.1This expression is an expansion of Restrict in(Kaplan and Kay, 1994, p. 371).4584.2 Conditional CompilationCompiling epenthetic rules in the Koskenniemiformalism requires pecial means; hence, the algo-rithm is conditional on the type of tim rule (Ka-plan and Kay, 1994, p. 374).
This peculiarity, inthe Koskenniemi formalism, is due to the dual in-terpretation of the 0 symbol in the parallel formal-isin: it is a genuine symbol in the alphabet, yet itacts as the empty string e in two-level ext)ressions.Note that it is the duty of the user to insert suchsymbols as appropriate (Karttunen and Beesley,1992).This duality does not hohl in the pm'titionformalism.
The user can express lexical-surfacepairs of unequal engths.
It is the duty of the rulecompiler to ensure that all expressions m'e of equallength prior to compilation.
With CR rules, thisis done by padding zeros.
With SC rules, howew;r,the In t ro  operator accomplishes this task.
Thereis a subtle, but important, (lifl~rence here.Consider rule R3 (?2.1).
The 0-padded centreof the CR portion becomes (0,b).
The SC portion,however, is computed by the expressionInsert{0}(() x Insert{0l(b) (16)yielding automaton (a):1<0,0> Any <o,o> A~,,a bIf the centre of the SC portion had been paddedwith 0's, the centre wouht have beenInsert{0}(0 ) x Insert{0}(/,) (17)yielding the undesired automaton (b).
Both aresimilar except hat state qo is final in the former.Taking (a) as the centre, eq.
10 includes (cd,cd);hence, eq.
11 excludes it.
The compilation of ourrules is not conditional; it is general enough tocope with all sorts of rules, epenthetic or not.5 Conc lus ion  and Future WorkThis paper showed how to compile the partitionformalism into N-tape automata.
Apart from in-creased efficiency and portability of impleinenta-lions, this result also enables us to more easilyrelate this formalism to others in the field, usingthe finite-state calculus to describe the relationsimplemented by the rule compiler.A small-scale prototype of the algorithm hasbeen implemented in Prolog.
The rule compilermak(;s use of a finite-state calculus library whichallows the user to compile regular expressions intoautomata.
The regular expression language in-cludes standard operators in addition to the op-erators defined here.
The system has been testedwith a number of hypothetical rule sets (to testthe integrity of the algorithm) and linguisticallymotivated morphological grammars which makeuse of multiple tapes.
Compiling realistic descrip-tions would need a more efficient implementationin a more suitable language such as C /C++.\]Alture work includes an extension to simulatea restricted torm of unification between categoriesassociated with rules and morphemes.ReferencesBlack, A., Ritchie, G., Pulman, S., and Russell, G.(1987).
F()rmalisms for morphographemic descrip-tion.
In EACL-87, pp.
11 8.Bowden, T. and Kiraz, G. (1995).
A mor-phographe.mic model for error correction i  noncon-catenative strings.
In ACL-95, pp.
24-30.Carter, D. (1995).
Rapid development of morpholog-ical descriptions for full language processing sys-tems.
in EACL-95, pp.
202-9.Kaplan, R. and Kay, M. (1994).
Regular models ofphonological rule systems.
Computational Linguis-tics, 20(3):331 78.Karttunen, L. (1994).
Constructing lexical transduc-ers.
In COLING-9~, pp.
406 411.Karttunen, L. and Beesley, K. (1992).
Two-Level RuleCompiler.
Palo Alto Resem'ch Center, Xerox Cot-poration.Kiraz, G. (1994).
Multi-tape two-level morphology:a case study in Semitic non-linear morphology.
InCOLING-9\]~, pp.
18{}-6.Kiraz, G. (1996b).
Computational Approach to Non-Linear Morphology.
PhD thesis, University of Cam-bridge.Koskenniemi, K. (1983).
Two-Level Morphology.
PhDthesis, University of Helsinki.Puhnan, S. (1991).
Two level morphology.
In Alshawiet.
al, ET6/I Rule Formalism and Virtual MachineDesign Study, chapter 5.
CEC, Luxembourg.Pulman, S. and Hepple, M. (1993).
A feat{{re-basedformalism for two-level phonology: a descriptionand implementation.
Computer Speech and Lan-guage, 7:333 58.Ritchic, G., Black, A., I{ussell, G., and Puhnan,S.
(1992).
Computational Morphology: PracticalMechanisms for the English Lexicon.
MIT Press,Cambridge Mass.Ruessink, H. (1989).
Two level formalisms.
TechnicalReport 5, Utrecht Working Papers in NLP.Trost, H. (1990).
The application of two-level mor-phology to non-concatenative German morphology.In Karlgren, H., editor, COLING-90, pages 371-6.459
