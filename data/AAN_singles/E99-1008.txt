Proceedings of EACL '99Chinese Numbers, MIX, Scrambling,andRange Concatenation GrammarsPierre BoullierINRIA-RocquencourtDomaine de VoluceauB.P.
10578153 Le Chesnay Cedex, FRANCEPierre.Boullier@inria.frAbstractThe notion of mild context-sensitivitywas formulated in an attempt o expressthe formal power which is both neces-sary and sufficient o define the syntaxof natural languages.
However, somelinguistic phenomena such as Chinesenumbers and German word scramblinglie beyond the realm of mildly context-sensitive formalisms.
On the other hand,the class of range concatenation gram-mars provides added power w.r.t, mildlycontext-sensitive grammars while keep-ing a polynomial parse time behavior.
Inthis report, we show that this increasedpower can be used to define the above-mentioned linguistic phenomena with apolynomial parse time of a very low de-gree.1 Mot ivat ionThe notion of mild context-sensitivity originatesin an attempt by \[Joshi 85\] to express the for-mal power needed to define the syntax of nat-ural languages (NLs).
We know that context-free grammars (CFGs) are not adequate to de-fine NLs since some phenomena are beyond theirpower (see \[Shieber 85\]).
Popular incarnationsof mildly context-sensitive (MCS) formalisms aretree adjoining grammars (TAGs) \[Vijay-Shanker87\] and linear context-free r writing (LCFR) sys-tems \[Vijay-Shanker, Weir, and Joshi 87\].
How-ever, there are some linguistic phenomena whichare known to lie beyond MCS formalisms.
Chi-nese numbers have been studied in \[Radzinski 91\]where it is shown that the set of these numbers isnot a LCFR language and that it appears also notto be MCS since it violates the constant growthproperty.
Scrambling is a word-order phenomenonwhich also lies beyond LCFR systems (see \[Becket,Rambow, and Niv 92\]).On the other hand, range concatenation gram-mar (RCG), presented in \[Boullier 98a\], is asyntactic formalism which is a variant of sim-ple literal movement grammar (LMG), describedin \[Groenink 97\], and which is also related to theframework of LFP developed by \[Rounds 88\].
Infact it may be considered to lie halfway betweentheir respective string and integer versions; RCGsretain from the string version of LMGs or LFPsthe notion of concatenation, applying it to ranges(couples of integers which denote occurrences ofsubstrings in a source text) rather than strings,and from their integer version the ability to han-dle only (part of) the source text (this later featurebeing the key to tractability).
RCGs can also beseen as definite clause grammars acting on a flatdomain: its variables are bound to ranges.
Thisformalism, which extends CFGs, aims at being aconvincing challenger as a syntactic base for vari-ous tasks, especially in natural anguage process-ing.
We have shown that the positive version ofRCGs, as simple LMGs or integer indexing LFPs,exactly covers the class PTIME of languages rec-ognizable in deterministic polynomial time.
Sincethe composition operations of RCGs are not re-stricted to be linear and non-erasing, its languages(RCLs) are not semi-linear.
Therefore, RCGs arenot MCS and are more powerful than LCFR sys-tems, while staying computationally tractable: itssentences can be parsed in polynomial time.
How-ever, this formalism shares with LCFR systemsthe fact that its derivations are CF (i.e.
the choiceof the operation performed at each step only de-pends on the object to be derived from).
As inthe CF case, its derived trees can be packed intopolynomial sized parse forests.
For a CFG, thecomponents of a parse forest are nodes labeled bycouples (A, p) where A is a nonterminal symboland p is a range, while for an RCG, the labelshave the form (A, p-') where # is a vector (list) ofranges.
Besides its power and efficiency, this for-malism possesses many other attractive proper-53Proceedings of EACL '99ties.
Let us emphasize in this introduction the factthat RCLs are closed under intersection and com-plementation 1, and, like CFGs, RCGs can act assyntactic backbones upon which decorations fromother domains (probabilities, logical terms, fea-ture structures) can be grafted.The purpose of this paper is to study whetherthe extra power of RCGs Cover LCFR systems) issufficient o deal with Chinese numbers and Ger-man scrambling phenomena.2 Range Concatenat ion  GrammarsThis section introduces the notion of RCG andpresents ome of its properties, more details ap-pear in \[Boullier 98a\].Def in i t ion 1 A positive range concatenationgrammar (PRCG) G = (N,T,  V ,P ,S)  is a 5-tuplewhere N is a finite set o\] predicate names, T andV are finite, disjoint sets of terminal symbols andvariable symbols respectively, S E N is the startpredicate name, and P is a finite set of clauses?0 --* ?1- .
-Cmwhere m >_ 0 and each o\ ]?0 ,?1 , .
.
.
,era is a pred-icate of the formA(a l , .
.
.
,  ap)where p >_ 1 is its arity, A E N and each of ai E(T U V)*, 1 < i < p, is an argument.Each occurrence of a predicate in the RHS of aclause is a predicate call, it is a predicate defini-tion if it occurs in its LHS.
Clauses which definepredicate A are called A-clauses.
This definitionassigns a fixed arity to each predicate name.
Thearity of S, the start predicate name, is one.
Thearity k of a grammar (we have a k-PRCG), is themaximum arity of its predicates.Lower case letters such as a, b, c , .
.
.
will denoteterminal symbols, while late occurring upper caseletters such as T, W, X, Y, Z will denote elementsof V.The language defined by a PRCG is based onthe notion of range.
For a given input string w =a l .
.
.an  a range is a couple ( i , j ) ,  0 < i < j _< nof integers which denotes the occurrence of somesubstring ai+l.
.
,  aj in w. The number i is itslower bound, j is its upper bound and j - i is itssize.
If i = j ,  we have an empty range.
We will1 Since this closure properties can be reached with-out changing the structure (grammar) of the con-stituents (i.e.
we can get the intersection of two gram-mars G1 and G2 without changing neither G1 nor G2),this allows for a form of modularity which may lead tothe design of libraries of reusable grammatical compo-nents.use several equivalent denotations for ranges: anexplicit dotted notation like wl * w2 * w3 or, if w2extends from positions i + 1 through j ,  a tuplenotation (i..j)~, or (i..j) when w is understoodor of no importance.
Of course, only consecutiveranges can be concatenated into new ranges.
Inany PRCG, terminals, variables and arguments ina clause are supposed to be bound to ranges bya substitution mechanism.
An instantiated clauseis a clause in which variables and arguments areconsistently (w.r.t.
the concatenation operation)replaced by ranges; its components are instanti-ated predicates.For example, A( (g..h), (i..j), (k..1) --*B((g+l..h), (i+l..j-1), (k..l-1)) is an instantiationof the clause A(aX,  bYc, Zd) --* B (X ,  \]7, Z)if the source text a l .
.
.an  is such thatag+l = a,a~+l = b, aj = c and al = d. Inthis case, the variables X, Y and Z are bound to(g+l..h), (i+l..j-t) and (k..l-1) respectively.
2For a grammar G and a source text w, a deriverelation, denoted by =~, is defined on strings ofG,winstantiated predicates.
If an instantiated pred-icate is the LHS of some instantiated clause, itcan be replaced by the RHS of that instantiatedclause.Definit ion 2 The language of a PRCG G =(N, T, V, P, S) is the setz::(G) = I G,wAn input string w = a l .
.
.an  is a sentence ifand only if the empty string (of instantiated pred-icates) can be derived from S((0..n)), the instan-tiation of the start predicate on the whole sourcetext.The arguments of a given predicate may denotediscontinuous or even overlapping ranges.
Fun-damentally, a predicate name A defines a notion(property, structure, dependency,.
.
.  )
between itsarguments, whose ranges can be arbitrarily scat-tered over the source text.
PRCGs are thereforewell suited to describe long distance dependen-cies.
Overlapping ranges arise as a consequence ofthe non-linearity of the formalism.
For example,the same variable (denoting the same range) mayoccur in different arguments in the RHS of someclause, expressing different views (properties) ofthe same portion of the source text.2Often, for a variable X, instead of saying the rangewhich is bound to X or denoted by X ,  we will say, therange X, or even instead of the string whose occur-rence is denoted by the range which is bound to X, wewill say the string X.54Proceedings of EACL '99Note that the order of RI-IS predicates in aclause is of no importance.As an example of a PRCG, the following set ofclauses describes the three-copy language {www \[w ?
{a,b}*} which is not a CFL and even liesbeyond the formal power of TAGs.S(XYZ)  ~ A(X ,Y ,Z)A(aX, aY, aZ) --* A(X,  Y, Z)A(bX, bY, bZ) --* A(X ,  Y, Z)A(c, ~, e) --* eDefinit ion 3 A negative range concatenationgrammar (NRCG) G = (N, T, V, P, S) is a 5-tuple, like a PRCG, except that some predicatesoccurring in RHS, have the form A(a l , .
.
.
,  ctp).A predicate call of the form A(a l , .
.
.
, ap)  issaid to be a negative predicate call.
The intuitivemeaning is that an instantiated negative predicatesucceeds if and only if its positive counterpart (al-ways) fails.
The idea is that the language definedby A(a l , .
.
.
,ap)  is the complementary w.r.t T*of the language defined by A(ax , .
.
.
,ap) .
Moreformally, the couple A(p-') =~ e is in the deriverelation if and only if /SA(p") ~ e. Thereforethis definition is based on a "negation by failure"rule.
However, in order to avoid inconsistenciesoccurring when an instantiated predicate is de-fined in terms of its negative counterpart, we pro-hibit derivations exhibiting this possibility.
3 Thuswe only define sentences by so called consistentderivations.
We say that a grammar is consistentif all its derivations are consistent.Def init ion 4 A range concatenation grammar(RCG) is a PRCG or a NRCG.The PRCG (resp.
NRCG) term will be used tounderline the absence (resp.
presence) of negativepredicate calls.3As an example, consider the NRCG G with twoclauses S(X) --* S(X) and S(e) --* e and the sourcetext w = a.
Let us consider the sequence S(?a.)G,wS(?a?)
~ e. If, on the one hand, we consider thisG,wsequence as a (valid) derivation, this shows, by defini-tion, that a is a sentence, and thus (S(?a?
),e)  ~ .G,wThis last result is in contradiction with our hypothe-sis.
On the other hand, if this sequence is not a (valid)derivation, and since the second clause cannot producea (valid) derivation for S(?a?)
either, we can concludethat we have S(?a?)
=~ e. Since, by the first clause,G,zvfor any binding p of X we have S(p) ~ S(p), we con-G,wclude that, in contradiction with our hypothesis, theinitial sequence is a derivation.In \[Boullier 98a\], we presented a parsing algo-rithm which, for an RCG G and an input stringof length n, produces a parse forest in time poly-nomial with n and linear with IGI.
The degree ofthis polynomial is at most the maximum numberof free (independent) bounds in a clause.
Intu-itively, if we consider an instantiation of a clause,all its terminal symbols, variable, arguments arebound to ranges.
This means that each position(bound) in its arguments i mapped onto a sourceindex, a position in the source text.
However, atsome times, the knowledge of a basic subset ofcouples (bound, source index) is sufficient o de-duce the full mapping.
4 We call number of freebounds, the minimum cardinality of such a basicsubset.In the sequel we will assume that the predicatenames len, and eq are defined: s* len(l, X )  checks that the size of the range de-noted by the variable X is the integer l, and?
eq(X, Y )  checks that the substrings electedby the ranges X and Y are equal.3 Ch inese  Numbers  &: RCGsThe number-name system of Chinese, specificallythe Mandarin dialect, allows large number namesto be constructed in the following way.
The namefor 1012 is zhao and the word for five is wu.
Thesequence uru zhao zhao wu zhao is a well-formedChinese number name (i.e.
5 1024 + 5 1012) al-though wu zhao wu zhao zhao is not: the number4If XaY is some argument, if X ?
aY denotes a po-sition in this argument, and if (XoaY, i) is an elementof the mapping, we know that (Xa ?
Y, i + 1) must beanother element.
Moreover, if we know that the sizeof the range X is 3 and that the sizes of the rangesX and Y are (always) equal (see for example the sub-sequent predicates len and eq), we can conclude that(?XaY, i - 3) and (XaY.
,  i + 4) are also elements ofthe mapping.SThe current implementation f our prototype sys-tem predefines everal predicate names including len,and eq.
It must be noted that these predefined predi-cates do not increase the formal power of RCGs sinceeach of them can be defined by a pure RCG.
Forexample, len(1,X) can be defined by lenl(t) --* cwhich is a clause schema over all terminals t E T.Their introduction is not only justified by the fact thatthey are more efficiently implemented than their RCGdefined counterpart but mainly because they conveysome static information about the length of their ar-guments which can be used, as already noted, to de-crease the number of free bounds and thus lead to animproved parse time.
In particular, the parse timesfor Chinese numbers, MIX, and German scramblingwhich are given in the next sections rely upon thisstatement.55Proceedings of EACL '99of consecutive zhao's must strictly decrease fromleft to right.
All the well-formed number namescomposed only of instances of wu and zhao formthe set{ wu zhao kl wu zhao k2 .. .
wu zhao kp Ik l>k2>.
.
.
>kp>0}which can be abstracted asCN -= {abklabk2...abkp lk l>ks>.
.
.
>kp>0}These numbers have been studied in \[Radzinski91\], where it is shown that CN is not a LCFRlanguage but an Indexed Language (IL) \[Aho 68\].Radzinski also argued that CN also appears notto be MCS and moreover he says that he fails "tofind a well-studied and attractive formalism thatwould seem to generate Numeric Chinese withoutgenerating the entire class of ILs (or some non-ILs)".We will show that CN is defined by the RCG inFigure 1.1 : S(aX)  --* A (X ,  aX, X )2: A(W, TX ,  bY) --, len(1,T) A (W,X ,Y )3 : A(WaY,  X,  aY) --* len(O, X )  A(Y, W, Y )4 : A(W, X,  ~) --* len(O, X )  len(O, W)Figure 1: RCG of Chinese numbers.Let's call b k~ the i th slice.
The core of this RCGis the predicate A of arity three.
The string de-noted by its third argument has always the formbk~-labk'+l..., it is a suffix of the source text,its prefix ab k~ ...abk~-lab I has already been ex-amined.
The property of the second argument isto have a size which is strictly greater than ki - l,the number of leading b's in the current slice stillto be processed.
The leading b's of the third ar-gument and the leading terminal symbols of thesecond argument are simultaneously scanned (andskipped) by the second clause, until either thenext slice is introduced (by an a) in the thirdclause, or the whole source text is exhausted inthe fourth clause.
When the processing of a sliceis completed, we must check that the size of thesecond argument is not null (i.e.
that ki-1 > ki).This is performed by the negative calls len(O, X )in the third and fourth clause.
However, doingthat, the i th slice has been skipped, but, in orderfor the process to continue, this slice must be "re-built" since it will be used as second argument toprocess the next slice.
This reconstruction pro-cess is performed with the help of the first argu-ment.
At the beginning of the processing of anew slice, say the i th, both the first and third ar-gument denote the same string b k~ab ki+l .
.
.
.
Thefirst argument will stay unchanged while the lead-ing b's of the third argument are processed (seethe second clause).
When the processing of thei th slice is completed, and if it is not the last one(case of the third clause), the first and third argu-ment respectively denote the strings bk~ab k~+l .
.
.and ab k'+l .
.
.
.
Thus, the i th slice b kl can  be ex-tracted "by difference", it is the string W if thefirst and third argument are respectively WaYand aY (see the third clause).
Last, the wholeprocess is initialized by the first clause.
The firstand third argument of A are equal, since we starta new slice, the size of the second argument isforced to be strictly greater than the third, doingthat, we are sure that it is strictly greater thankl, the size of the first slice.
Remark that the testfen(O, W)  in the fourth clause checks that the sizekp of the rightmost slice is not null, as stipulatedin the language formal definition.
The derivationfor the sentence abbbab is shown in Figure 2 where=~ means that clause #p has been applied.S(eabbbab?
)A(a ?
bbbab*,A(a ?
bbbab.,2 A(a * bbbab*,A(a ?
bbbab?,A(abbba ?
b?,2 A(abbba ?
be,4 ~ goabbbab., a * bbbab*)a ?
bbbab*, ab * bbabe)ab * bbab*, abb ?
bab?
)abb ?
babe, abbb ?
ab?
)a ?
bbb ?
ab, abbba ?
b?
)ab ?
bb * ab, abbbab ?
*)Figure 2: Derivation for the CN string abbbab.If we look at this grammar, for any input stringof length n, we can see that the maximum numberof steps in any derivation is n+l  (this number is anupper limit which is only reached for sentences).Since, at each step the choice of the A-clause toapply is performed in constant ime (three clausesto try), the overall parse time behavior is linear.Therefore, we have shown that Chinese num-bers can be parsed in linear time by an RCG.56Proceedings of EACL '994 MIX  8z RCGsOriginally described by Emmon Bach, the MIXlanguage consists of strings in {a, b, c}* such thateach string contains the same number of occur-rences of each letter.
MIX is interesting becauseit has a very simple and intuitive characteriza-tion.
However, Gazdar reported 6 that MIX maywell be outside the class of ILs (as conjecturedby Bill Marsh in an unpublished 1985 ASL pa-per).
It has turned out to be a very difficult prob-lem.
In \[Joshi, Vijay-Shanker, and Weir 91\] theauthors have shown that MIX can be defined bya variant of TAGs with local dominance and lin-ear precedence (TAG(LD/LP)), but very little isknown about this class of grammars, except hat,as TAGs, they continue to satisfy the constantgrowth property.
Below, we will show that MIXis an RCL which can be recognized in linear time.1: S(X) ~ M(X ,X ,X)2: M(aX, bY, cZ) --* M(X,Y ,Z)3: M(TX,  Y ,Z)  --.
len(1,T) a(T)M(X,  Y, Z)4: M(X,  TY, Z) -.-, len(1,T) b(T)M(X, Y, Z)5 : M(X ,Y ,  TZ)  ~ len(1,T) c(T)M(X,  Y, Z)6 : M(e,?,?)
--* ?7: a(a) --* ?8: b(b) ~ ?9: c(c) ~ ?generalization to any number of letters.
In thecase where the three leading letters are respec-tively a, b and c, they are simultaneously skipped(see clause #2) and the clause #6 is eventually in-stantiated if and only if the input string containsthe same number of occurrences of each letter.The leading steps in the derivation for the sen-tence baccba re shown in Figure 4 where =~ meansthat clause #p is applied and :~ means that clause#q cannot be applied, and thus implies the valida-tion of the corresponding negative predicate call.S(?baccba?
)M(obaccba., obaccba*, obaccba.
)a( ob ?
accba )M ( b ?
accba?
,obaccbao , *baccba.
)M(b ?
accba*, obaccba?, ?baccbao)=~ c(ob ?
accba)M ( b ?
accba?, ?baccba?, b ?
accba* )g M(b * accba*, ?baccba?, b ?
accba?
)5 =V c(b ?
a ?
accba )M ( b ?
accba., ?baccba., ba * ccba?
)M (b ?
accba*, ?baccba., ba ?
ccba?
)M (ba ?
ccba?, b ?
accba?, bac ?
cba?
)Figure 3: RCG of MIX.Consider the RCG in Figure 3.
The source textis concurrently scanned three times by the threearguments of the predicate M (see the predicatecall M(X,  X, X)  in the first clause).
The first, sec-ond and third argument of M respectively onlydeal with the letters a, b and c. If the leadingletter of any argument (which at any time is asuffix of the source text) is not the right letter,this letter is skipped.
The third clause only pro-cess the first argument of M (the two others arepassed unchanged), and skips any letter which isnot an a.
The analogous holds for the fourth andfifth clauses which respectively only consider thesecond and third argument of M, looking for aleading b or c. Note that the knowledge that aletter is not the right one is acquired via a nega-tive predicate call because this allows for an easy6See http://www.ccl.kuleuven.ac.be/LKR/dtr/mixl.dtr.Figure 4: Derivation for the MIX string baccba.It is not difficult to see that the length of anyderivation is linear in the length of the correspond-ing input string, and that the choice of any stepin this derivation takes a constant ime.
There-fore, the parse time complexity of this grammaris linear.Of course, we can think of several generaliza-tions of MIX.
We let the reader devise an RCG inwhich the relation between the number of occur-rences of each letter is not the equality, instead,we will study here the case where, on the onehand, the number of letters in T is not limitedto three, and, on the other hand, all the lettersin T do not necessarily appear in a sentence.
IfT = (bl , .
.
.
,bq} is its terminal vocabulary, andif 7r is a permutation, the permutation languagek .
@)}, with ai E T, n = {w I w =0<p<qand i# j  ~a i#a j ,  can be definedby the set of clauses in Figure 5.57Proceedings of EACL '99ES(TX) ~ len(1,T)A(T, TX, TX)A(T,W, T1X) -* len(1,T1)M, (T, W, T,, W)A(T,W,X)A(T, W, ?)
--* ?M4(T,T'X, T1,T~Y) -* eq(T,T') eq(T1,T~)M4(T,X,T~,Y)M4(T,T'X, T1,Y) ---* len(1,T') eq(T,T')M4 (T, X,  T~, Y)M4(T,X, T1,T~Y) ---* len(1,T~) eq(T1,T~)M4(T,X, T1,Y)M4(T,s,TI,?)
-'*Figure 5: RCG of the permutation language H.The basic idea of this grammar is the following.In a source text w = t l .
.
.
tm.
.
.
tn ,  we choose areference position r, 1 < r < n (for example, ifr = 1, we choose the first position which corre-sponds to the leading letter tl), and a current po-sition c, 1 < c < n, and we check that the numberof occurrences of the current erminal to, and thenumber of occurrences of the reference terminaltr are equal.
Of course, if this check succeeds forall the current positions c and for one referenceposition r, the string w is in H. This check is per-formed by the predicate M4(T1, X, T2, Y) of arityfour.
Its first and third arguments respectivelydenote the reference position and the current po-sition (:/'1 and T2 are bound to ranges of size onewhich refer to tr and tc respectively) while thesecond and fourth arguments denote the stringsin which the searches are performed: the occur-rences of the reference terminal G are searchedin X and the occurrences of the current terminaltc are searched in Y.
A call to M4 succeeds ifand only if the number of occurrences of tr in Xis equal to the number of occurrences of t?
in Y.The S-clauses elect the reference position (r -- 1,if w is not empty).
The purpose of the A-clausesis to select all the current positions c and to callM4 for each such c's.
Note that the variable W isalways bound to the whole source text.
We caneasily see that the complexity of any predicate callM4(T1,X, T2,Y) is linear in \]X\[ + \[Y\[, and sincethe number of such calls from the third clause isn, we have a quadratic time RCG.5 Scrambl ing  &: RCGsScrambling is a word-order phenomenon whichoccurs in several languages such as German,Japanese, Hindi, .
.
.
and which is known to bebeyond the formal power of TAGs (see \[Becker,Joshi, and Rainbow 91\]).
In \[Becker, Ram-bow, and Niv 92\], the authors even show thatLCFR systems cannot derive scrambling.
Thisis of course also true for multi-components TAGs(see \[Rambow 94\]).
In \[Groenink 97\], p. 171, theauthor said that "simple LMG formalism does notseem to provide any method that can be immedi-ately recognized as solving such problems".
Wewill show below that scrambling can be expressedwithin the RCG framework.Scrambling can be seen as a leftward movementof arguments (nominal, prepositional or clausal).Groenink notices that similar phenomena also oc-cur in Dutch verb clusters, where the order ofverbs (as opposed to objects) can in some casebe reversed.In \[Becket, Rambow, and Niv 92\], from the fol-lowing German example.
.
.
dab \[dem Kunden\]i \[den Kuehlschrank\]j. .
.
that the client (DAT) the refrigerator (ACC)bisher noch niemandso far yet no-one (NOM)ti \[\[tj zu reparieren\] zu versuchen\]to repair to tryversprochen hat.promised has.?
.. that so far no-one has promised the client totry to repair the refrigerator.the authors argued that scrambling may be "dou-bly unbounded" in the sense that:?
there is no bound on the distance over whicheach element can scramble;there is no bound on the number of un-bounded dependencies that can occur in onesentence?They used the language {zr(nl ... n,~) vl ... Vm }where 7r is a permutation, as a formal representa-tion for a subset of scrambled German sentences,where it is assumed that each verb vi has exactlyone overt nominal argument ni.However, in \[Becket, Joshi, and Rambow 91\],we can find the following example.
.
.
dag \[des Verbrechens\]k \[der Detektiv\]i. .
.
that the crime (GEN) the detective (NOM)\[den VerdEchtigen\]j dem Klienten58Proceedings of EACL '99the suspect (ACC) the client (DAT)\ [PRO/t j  tk zu iiberfiihren\] versprochen hat.to indict promised has.... that the detective has promised the client toindict the suspect of the crime.where the verb of the embedded clause sub-categorizes for three NPs, one of which is anempty subject (PRO).
Thus, the scrambling phe-nomenon can be abstracted by the languageSCR = {~(nl .
.
.np)  v l .
.
.vq}.
We assume thatthe set T of terminal symbols is partitioned intothe noun part .M = {nx,.
.
.
,nt} and the verb partY = {vl , .
.
.
,v,~}, and that there is a mapping hfrom .M onto \]; which indicates, when v = h(n),that the noun n is an argument for the verb v.If h is an injective mapping, we describe the casewhere each verb has exactly one overt nominalargument, if h is not injective, we describe thecase where several nominal arguments can be at-tached to a single verb.
To be a sentence of SCR,the string ~r(nl ... n~... np)vl ... vj ... vq must besuch that0<p<l ,  0<q<_m,  n iE .M,  vj EI;,i ?
i' ==~ ni # ne, j ?
j' =:=v j ?
vj,, Vn/3 Wand Vvj3ni s.t.
vj = h(ni), and r is a permuta-tion.
The RCG in Figure 6 defines SCR.Of course, the predicate names .M, Y and h re-spectively define the set of nouns .M, the set ofverbs \]; and the mapping h between .h\]" and V.The purpose of the predicate name .M+)2 + is tosplit any source text w in a prefix part which onlycontains nouns and a suffix part which only con-tains verbs.
This is performed by a left-to-rightscan of w during which nouns are skipped (see thefirst .M+V+-clause).
When the first verb is found,we check, by the call Y*(Y), that the remainingsuffix Y only contains verbs.
Then, the predicates.Ms and ~;s are both called with two identical ar-guments, the first one is the prefix part and thesecond is the suffix part.
Note how the prefix partX can be extracted by the predicate definition.M+lZ+(XTY, TY) from the first argument (whichdenotes the whole source text) in using the secondargument TY.
The predicate name.Ms (resp.
Ys)is in charge to check that each noun ni of the pre-fix part (resp.
each verb vj of the suffix part) hasboth a single occurrence in its own part, and thatthere is a verb vj in the suffix part (resp.
a nounni in the prefix part) such that h(ni,vj) is true.The prefix part is examined from left-to-right un-til completion by the .Ms-clauses.
For each nounT in this prefix part, the single occurrence testis performed by a negative calls to TinT*(T, X),and the existence of a verb vj in the suffix part s.t.s (w)  -~.M+ V+(W, TY).M+ ~;+(XTY, TY).Ms(T X, Y).Ms (e:, Y) -~.Min lZ+ (T, T'Y ).MinY+(T, TIY --,Vs(X, TY) -~Vs(X,e)~)in.M + (T, T'Y --*l)in.M + ( T, T'YTinT*(T, T'Y) --*TinT*(T, T'Y)V*(TX) --,V*(~) -~.M(n l  ) --~.M(nl) --*V(vl) -~v(,,,.
)h(nl, vx ) --*h(nt, vm).M+v+ (w, w)len(1, T) .M(T).M+ v+(w, Y)len(1,T) ~;(T) V*(Y).Ms(X, TY) \];s(X, TY)fen(l, T) TinT*(T, X).Min)2+(T, Y) .Ms(X, Y)len(1, T') h(T, T').Min Y+ (T, Y)len(1, T') h(T, T')len(1, T) TinT*(T, Y)~;in.M+(T, X) )2s(X, Y)cfen(l, T') h(T', T)Yin.M+(T, Y)fen(l, T') h(T', T)len(1, T) eq(T, T')TinT*(T, Y)len(1, T) eq(T, T')len(1,T) 1;(T) \];*(X)e:Figure 6: RCG of scrambling.h(T, W), is performed by the.MinY+(T, Y) call.
Acall TinT*(T, X) is true if and only if the terminalsymbol T occurs in X.
The .MinV+-clauses spellfrom left-to-right the suffix part.
If the noun T isnot an argument of the verb T' (note the nega-tive predicate call), this verb is skipped, until anh relation between T and T' is eventually found.Of course, an analogous processing is performedfor each verb in the suffix part.
We can easily seethat, the cutting of each source text w in a prefixpart and a suffix part, and the checking that thesuffix part only contains verbs, takes a time lin-ear in Iw\[.
For each noun in the prefix part, theunique occurrence check takes a linear time andthe check that there is a corresponding verb inthe suffix part also takes a linear time.
Of course,the same results hold for each verb in the suffixpart.
Thus, we can conclude that the scramblingphenomenon can be parsed in quadratic time.59Proceedings of EACL '996 Conc lus ionThe class of RCGs is a syntactic formalism whichseems very promising since it has many interestingproperties among which we can quote its power,above that of LCFR systems; its efficiency, withpolynomial time parsing; its modularity; and thefact that the output of its parsers can be viewedas shared parse forests.
It can thus be used asis to define languages or it can be used as an in-termediate (high-level) representation.
This lastpossibility comes from the fact that many popu-lar formalisms can be translated into equivalentRCGs, without loosing any efficiency.
For exam-ple, TAGs can be translated into equivalent RCGswhich can be parsed in O(n 6) time (see \[Boullier985\]).In this paper, we have shown that this extra for-mal power can be used in NL processing.
We turnour attention to the two phenomena of Chinesenumbers and German scrambling which are bothbeyond the formal power of MCS formalisms.
Toour knowledge, Chinese numbers were only knownto be an IL and it was not even known whetherscrambling can be described by an IG.
We haveseen that these phenomena c n both be defined byRCGs.
Moreover, the corresponding parse time ispolynomial with a very low degree.
During thiswork we have also classified the famous MIX lan-guage, as a linear parse time RCL.Re ferences\[Aho 68\] Alfred Aho.
1968.
Indexed grammars -an extension of context-free grammars.
In Jour-nal of the ACM, Vol.
15, pages 647-671.\[Becker, Joshi, and Rambow 91\] Tilman Becket,Aravind Joshi, and Owen Rambow.
1991.
Longdistance scrambling and tree adjoining gram-mars.
In Proceedings of the fifth Conference ofthe European Chapter of the Association forComputational Linguistics (EACL'91), pages21-26.\[Becker, Rambow, and Niv 92\] Tilman Becket,Owen Rambow, and Michael Niv.
1992.
TheDerivational Generative Power of FormalSystems or Scrambling is Beyond LCFRS.
InTechnical Report IRCS-92-38, Institute forResearch in Cognitive Science, University ofPennsylvania, Philadelphia, PA.\[Boullier 98a\] Pierre Boullier.
1998.
Proposalfor a Natural Language Processing SyntacticBackbone.
In Research Report No 3342 athttp ://www.
inria, fr/RRRT/RR-3342, html,INRIA-Rocquencourt, France, Jan. 1998, 41pages.\[Boullier 98b\] Pierre Boullier.
1998.
A Generaliza-tion of Mildly Context-Sensitive Formalisms.
InProceedings of the Fourth International Work-shop on Tree Adjoining Grammars and RelatedFrameworks (TAG?4), University of Pennsyl-vania, Philadelphia, PA, pages 17-20.\[Groenink 97\] Annius Groenink.
1997.
SUR-FACE WITHOUT STRUCTURE Word order andtractability issues in natural anguage analysis.PhD thesis, Utrecht University, The Nether-lands, Nov. 1977, 250 pages.\[Joshi 85\] Aravind Joshi.
1985.
How muchcontext-sensitivity s necessary for characteriz-ing structural descriptions - -  Tree AdjoiningGrammars.
In Natural Language Processing- -  Theoretical, Computational nd Psycholog-ical Perspective, D. Dowty, L. Karttunen, andA.
Zwicky, editors, Cambridge University Press,New-York, NY.\[Joshi, Vijay-Shanker, and Weir 91\] AravindJoshi, K. Vijay-Shanker, and David Weir.
1991.The convergence of mildly context-sensitivegrammatical formalisms.
In FoundationalIssues in Natural Language Processing, P. Sells,S.
Shieber, and T. Wasow editors, MIT Press,Cambridge, Mass.\[Radzinski 91\] Daniel Radzinski.
1991.
ChineseNumber-Names, Tree Adjoining Languages,and Mild Context-Sensitivity.
In Computa-tional Linguistics, 17(3), pages 277-299.\[Rainbow 94\] Owen Rainbow.
1994.
Formal andComputational Aspects of Natured LanguageSyntax.
In PhD Thesis, University of Pennsyl-vania, Philadelphia, PA.\[Rounds 88\]'William Rounds.
1988.
LFP: A Logicfor Linguistic Descriptions and an Analysis ofits Complexity.
In ACL Computational Lin-guistics, Vol.
14(4), pages 1-9.\[Shieber 85\] Stuart Shieber.
1985.
Evidenceagainst the context-freeness of natural lan-guage.
In Linguistics and Philosophy, Vol.
8,pages 333-343.\[Vijay-Shanker 87\] K. Vijay-Shanker.
1987.
Astudy of tree adjoining grammars.
PhD thesis,University of Pennsylvania, Philadelphia, PA.\[Vijay-Shanker, Weir, and Joshi 87\] K. Vijay-Shanker, David Weir, and Aravind Joshi.
1987.Characterizing Structural Descriptions Pro-duced by Various Grammatical Formalisms.
InProceedings of the 25th Meeting of the Associa-tion for Computational Linguistics (ACL'87),Stanford University, CA, pages 104-111.60
