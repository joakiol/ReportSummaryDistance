Proceedings of the Third Workshop on Issues in Teaching Computational Linguistics (TeachCL-08), pages 19?26,Columbus, Ohio, USA, June 2008. c?2008 Association for Computational LinguisticsFreshmen?s CL curriculum: the benefits of redundancy ?Heike ZinsmeisterDepartment of LinguisticsUniversity of Konstanz78457 Konstanz, GermanyHeike.Zinsmeister@uni-konstanz.deAbstractIn the course of the European Bologna ac-cord on higher education, German universitieshave been reorganizing their traditional ?Mag-ister?
and ?Diplom?
studies into modularizedbachelor?s and master?s programs.
This re-vision provides a chance to update the pro-grams.
In this paper we introduce the curricu-lum of a first semester B.A.
program in Com-putational Linguistics which was taught forthe first time last semester.
In addition, we an-alyze the syllabi of four mandatory courses ofthe first semester to identify overlapping con-tent which led to redundancies.
We suggest forfuture semesters to reorganize the schedules ina way that students encounter recurring topicsiteratively in a constructive way.1 IntroductionWe present the first semester curriculum of a newlyrevised bachelor?s program in Computational Lin-guistics at the University of Heidelberg, Germany,which was taught for the first time at the Departmentof Computational Linguistics last winter semester.Four courses are mandatory for the students inthe first semester: a comprehensive Introduction toComputational Linguistics, backed up with a courseon Formal Foundations that emphasizes mathemat-ical topics, and a general introduction to linguisticcore modules in Foundations of Linguistic Analysis,the set up is completed by an Introduction to Pro-?This paper is about the curriculum taught at the Depart-ment of Computational Linguistics at the University of Heidel-berg, where the author used to work.gramming that introduces core concepts of program-ming employing the programming language Python.The parallel design leads to a situation in whichrelated topics are introduced in the same semesterin parallel fashion.
Redundant duplication per se isto be avoided given that lecture time is always toosparse and should be used most efficiently such thatthere is enough room for examples, short in-courseexercises, questions and discussions.We analyzed the syllabi for common topics andplotted these topics to see whether they are dealtwith in a constructive way across the curricu-lum.
For future semesters we suggest some re-organization to optimize the courses?
interactions.Since all courses are taught in the department ofComputational Linguistics, decisions on both thecourses?
subtopics as well as their temporal sequenc-ing is in full control of the local department.We think that it is reasonable to keep the com-mon topics and even the redundancy of introducingthem in more than one course only.
Iterative re-introduction could be helpful for the students if itis accompanied by a reference to the earlier men-tion as well as a motivation of the specific relevancefor the course at hand.
We expect that such an iter-ative approach reinforces understanding since it al-lows the students to build upon their prior knowl-edge and, furthermore, to approach the very sameconcept from different perspectives.
This iterativemethod is inspired by the idea of spiral learning inthe sense of Jerome S. Bruner (Bruner, 1960) whichbuilds on a constructivist view on learning.
It as-sumes that learning is an active process in whichlearners construct new ideas or concepts based upon19their prior knowledge.
A curriculum can support thisprocess if it revisits its basic ideas repeatedly: ?thespiral curriculum [..] turns back on itself at higherlevels?
(Bruner, 1960, p.53).The rest of this paper is organized as follows.First, we briefly sketch the Bologna Process, an ef-fort of harmonizing higher education in Europe andalso the special situation in Heidelberg being thebackground against which the bachelor?s programdescribed is created.
Then, we introduce the bach-elor?s program of Computational Linguistics at theUniversity of Heidelberg in Germany and describeits four mandatory courses of the first semester.
Weanalyze the syllabi for common topics, and, finally,present a re-organized schedule for future semesterswhich is inspired by an iterative learning approach.2 BackgroundThe European Bologna Process is an effort of Eu-ropean countries to establish a common higher ed-ucation area by the year 2010.
Its central elementis the introduction of a two-cycle study system con-sisting of bachelor?s and master?s degrees with com-parable qualifications throughout Europe based ona common credit transfer system which allows forcomparing the workload of individual courses.1In the course of this international harmonizing ef-fort, German universities are reorganizing their pro-grams from traditional ?Magister?
or ?Diplom?
pro-grams to modular bachelor?s and master?s programs.Previously ?Magister?
or ?Diplom?
was first degreein Germany, i.e.
a bachelor?s degree did not exist.A characteristic of the traditional programs was thefreedom of choice they offered to their students,more pronounced in the ?Magister?
programs thanin the ?Diplom?
programs the latter of which weretraditionally realized in more technically orienteddisciplines and the former in the humanities.
Bothtype of programs were set up with a standard periodof study of nine to ten semesters but the average stu-dent required more than this.
European bachelor?sprograms predetermine a highly structured curricu-1One European Credit Transfer System point cor-responds to 25-30 hours workload on the student cf.http://www.uni-heidelberg.de/studium/bologna/materialien/diploma/ECTSUsersGuide05.pdf.
For theBologna Process in general see http://ec.europa.eu/education/policies/educ/bologna/bologna_en.html.lum and offer a first university degree after six orseven semester of study.The Computational Linguistics department inHeidelberg was pioneering with an early bachelor?sprogram devised by Peter Hellwig at the beginningof the Bologna Process.
Adaptions of the orig-inal bachelor?s program became necessary due togeneral developments in the international Bolognapolicy and finally the need for a revised programemerged.
This was realized in 2007 by Anette Frankwho had filled the by then vacant chair in Compu-tational Linguistics.
The change of the departmen-tal head brought a change from a more vocationallyoriented program that prepared students to take jobsin the local language technology industry to a moreacademically oriented one, which is reflected in therevised syllabus.
We will point to differences be-tween the original program and the revised programwhere relevant.3 The Study of Computational Linguisticsin HeidelbergComputational linguistics (CL) is adiscipline between linguistics and com-puter science which is concerned with thecomputational aspects of the human lan-guage faculty.
[...] The applied compo-nent of CL is more interested in the practi-cal outcome of modeling human languageuse.
The goal is to create software prod-ucts that have some knowledge of humanlanguage.
[...] Theoretical CL takes upissues in formal theories.
[...] Compu-tational linguists develop formal modelssimulating aspects of the human languagefaculty and implement them as computerprograms.
(www.aclweb.org/nlpfaq.txt,credited to Hans Uszkoreit)This quote from Hans Uszkoreit outlines theknowledge and skills that a study of CL should equipits students with: programming skills, handling offormal models, algorithmic thinking and last but notleast an explicit knowledge of linguistic analysis.All four areas are covered in our freshmen?sclasses which are introduced in more detail in subse-quent subsections after the presentation of the over-all program.20In Heidelberg, B.A.
students have to collect 180credit points to complete their study.
They nor-mally enroll in two or three subjects which meansthat they take Computational Linguistics as mainsubject (in which it provides 75% of the overallworkload), secondary main subject (50%) or mi-nor subject (25%) 2 in combination with comple-mentary subjects in the areas of computer science3,humanities, psychology, economics, or law.
Table1 gives an overview of the courses in a 75% B.A.The first semester requirements are the same in allB.A.
options involving Computational Linguistics.4In addition to the courses depicted in Table 1 stu-dents need to gain credits in Generic Competences(?u?bergreifende Kompetenzen?
aka soft skills andcourses from other departments of the faculty).53.1 The CurriculumWe thought it relevant for the students to get ac-quainted with Computational Linguistics proper asearly as the first semester.
Therefore, in addition toan introduction to formal foundations and program-ming a comprehensive introduction to algorithmsand analysis in computational linguistics is manda-tory.
It was the first time that this combination ofcourses was taught.
Before that, the Introductionto Computational Linguistics also introduced stu-dents to core linguistic topics which were spreadacross the whole course.
The motivation for an inde-pendent introduction to linguistics was that studentsshould get a profound background knowledge in lin-guistic analysis such that further courses could buildon them.
Before that, even basic concepts such asmorpheme had to be reintroduced.
Introduction toProgramming and Formal Foundations used to be incomplementary distribution due to the fact that theyused to be taught by the one and the same person.An additional lecturer position in the department al-lowed us to to offer both courses in parallel.The Freshmen?s curriculum consists of four2The minor subject option had to be introduced due to for-mal requirements.
It is likely to be dispensed with in the future.3Computer science can only be taken as minor subject.4In the 25% B.A.
the workload on students is reduced.
Theyonly need to attend one of the two courses on formal founda-tions either Mathematical Foundations in the first semester orLogical Foundations in the second one.5In the 75% B.A.
students need to collect 20 credit points inGeneric Competences during their three-year study.mandatory courses which are described in the fol-lowing.3.1.1 Introduction to ComputationalLinguisticsThe core lecture of the first semester is the Intro-duction to Computational Linguistics.
It is held fourhours a week and is worth six credit points.
It in-troduces the foundations of Computational Linguis-tics, its research objectives and research methods.
Itprovides an overall survey of the field: the levelsof language description, formal-mathematical andlogical models as well as algorithmic approachesfor processing such formal models.
Specific top-ics are: dealing with ambiguities, approximation oflinguistic regularities, and the relation of languageand knowledge; some applications of ComputationalLinguistics are also introduced.
Mandatory read-ings are selected sections from Jurafsky & Martin(2000), complemented by chapters from Carstensenet al (2004) and Bird et al (forthcoming).This course is seen as the backbone of the firstsemester curriculum.
We therefore list the lecturesin detail.
The content of the other three courses isonly briefly described below and will be discussedin Section 4.The first part of the schedule was strongly inspiredby Jurafsky & Martin (2000):?
Sub-token level (3 lectures): computing mor-phology by means of regular expressions, au-tomata, and transducers.?
Token level and context (4 lectures): identify-ing tokens and computing them by means oftokenizing, edit distance, n-grams, and part-of-speech tagging.?
Syntactic level (6 lectures): syntactic analysisin terms of constituency, dependency, phrasestructure grammars and probabilistic contextfree grammars; formal grammar types: compu-tation of syntactic structure by means of pars-ing strategies and parsing algorithms, and syn-tactic resources in terms of treebanks.The second part of the schedule built more onCarstensen et al (2004).
It mainly dealt with se-mantic issues in term of analysis, computation, andresources.21Computational Linguistics Linguistic ComputationalSemester Modules Modules Modules6 BA-Thesis, Oral Exam5 Advanced Studies (Computational Linguistics Core Studies in Softwareor Formal Linguistics) Theoretical Project4 Core Studies in Computational Linguistics or AppliedComputer3 Statistical Methods Algorithmic CL Formal Semantics Sciencefor CL2 Logical Formal Syntax Advanced ProgrammingFoundations1 Introduction Mathematical Foundations of Introduction toto CL Foundations Linguistic Analysis ProgrammingTable 1: Modules in B.A.
Computational Linguistics (75%)?
predicate logic (2 lectures)?
propositional logic and inferences (2 lectures)?
compositional semantics and Lambda calculus(1 lecture)?
lexical semantics including resources (2 lec-tures)?
discourse semantics / pragmatics (1 lecture)The schedule was rounded off by two lectureson applications, in particular information extractionand machine translation.There were eight assessments during the semesterof which students had to pass 60%.
Most of themdealt with theoretical comprehension, two morepractical assessments involved an introduction to ba-sic UNIX tools, and (probabilistic) parsing with theNLTK tools (Bird et al, forthcoming).
We decidedto split the written exam into two sub-exams, the firstone took place in half time the second one in the fi-nal week of the semester.
Thus students could betterfocus on the topics at hand.3.1.2 Formal Foundations part 1:Mathematical FoundationsFormal Foundations is held two hours a week andis worth six credit points.
The theory of formallanguages is a prerequisite for e.g.
model-theoreticsemantics and parsing approaches.
This lecture inparticular deals with mathematical foundations, for-mal languages and formal grammars, regular expres-sions and finite automata, context-free languages,context-sensitive languages and Type-0 languages,Turing machines, and computability theory.
Therecommended reading includes Scho?ning (2001),Klabunde (1998), Partee et al (1990), as well asHopcroft and Ullman (1979).There were eight graded assessments and the stu-dents had to pass 50% of the overall tasks .3.1.3 Foundations of Linguistic AnalysisThe introduction to linguistics is also held twohours a week and is worth four credit points.
Lin-guistic knowledge is a distinctive property of com-putational linguistics.
In this lecture students get athorough introduction to the core modules of the lan-guage faculty: phonetics and phonology, morphol-ogy, syntax, semantics, and pragmatics with a spe-cial emphasis on linguistic phenomena of German.The core reading was Meibauer et al (2002).There were ten small assessments of which thestudents had to pass eight.3.1.4 Introduction to ProgrammingThe fourth mandatory course is held four hoursa week and is worth six credit points.
In this lec-ture, students learn to devise algorithmic solutionsand implementations for problems related to Natu-ral Language Processing.
Moreover, the course in-troduces basic principles of software engineering in22order to equip the students with skills to develop cor-rect and maintainable programs.
These capabilitiesare further facilitated in the Advanced Programmingcourse during the second semester and a comprehen-sive hands-on software project during the advancedphase of undergraduate studies.Recommended reading is Demleitner (unpub-lished), Lutz and Ascher (2007), Martelli (2006),as well as the official Python documentation (vanRossum, 2008).There were ten programming assessments ofwhich the students had to hand in eight and earn halfof the points to be permitted to take the final exam.3.2 Local Conditions3.2.1 StudentsStudents require higher education entrance quali-fication and no other prerequisites.
Language of in-struction is German but students come from variouscountries and speak a diversity of native languages,including Bulgarian, Chinese, English, French, Ital-ian, Japanese, Kurdish, Polish, Russian, Spanish,Turkish, Turkmen and Ukrainian.
About 40 stu-dents enrolled in Computational Linguistics, abouttwo third of which classified themselves as program-ming beginners.
In general about 20% of the firstsemester students failed at least one of the coursesfirst time.3.2.2 Realization of CoursesThree of the four courses under examination aretaught by faculty members holding a PhD (or acomparable doctoral degree) and one by a memberof the faculty still completing his doctorate.
Thecourses are taught as lectures which are accompa-nied by optional tutorial sessions.
These tutorialswere coached by undergraduate student tutors whomainly corrected and discussed the students?
assess-ments.
The students had to hand in assessments on aregular basis which could either be solved as a groupor individually depending on the course.
Passing asubstantial portion of the exercises was a prerequi-site for being permitted to take the courses?
exams.Each course provided its own wiki platform for thestudents to communicate easily among themselvesas well as with student tutors and lecturers.
Thewikis were also a common platform for publishingexample solutions by the tutors and keeping recordsof answers to students?
questions.4 Analysis of the SyllabiThe individual courses were planned in accordancewith the sequence of topics in standard textbookssuch as Jurafsky and Martin (2000) and Carstensenet al (2004) for Introduction to Computational Lin-guistics, Scho?ning (2001) for Formal Foundations,and Meibauer et al (2002) for Foundations of Lin-guistic Analysis.
In Introduction to Programmingwe used a hands-on manuscript (Demleitner, unpub-lished).The following list summarizes the main topicsthat are dealt with in more than one syllabus.
Com-mon topics include:?
modules of linguistics: ICL, FLA?
regular expressions: ICL, FF, IP?
automata: ICL, FF?
grammar types: ICL, FF?
morphology: ICL, FLA?
segmentation, tokenization: ICL, FLA, IP?
n-grams: ICL, IP?
phrase-structure grammars: ICL, FF, FLA?
parsing: ICL, FF, IP?
lexical semantics: ICL, FLA?
model in semantics: ICL, FF?
discourse semantics, pragmatics: ICL, FLABefore the semester started, the group of lectur-ers met and arranged the general schedules of thecourses.
During the semester, the lecturers happenedto lose track of the progression of other courses.
Insome cases explicit cross-references were given, forexample in the case of lexical semantics, but mostof the time, concepts were (re-)introduced in eachcourse independently.
Sometimes lecturers askedstudents whether they were already familiar witha newly introduced topic from other courses; thenthere was a short discussion in class and students23were reminded of previous mentions of that topic.
Ingeneral, the didactics of the individual courses werenot adapted to take account of such recurrence oftopics across the curriculum.Nevertheless, the parallel fashion of the fourcourses at hand seemed to be reasonable even inthis form.
Students deemed the interdependence be-tween the courses as appropriate in the final evalua-tion of the courses.
They gave it an average score of2.052 with a standard deviation of 1.05 on a scale of1 (very appropriate) to 6 (non-existent).Our conclusion is that a slight rescheduling ofthe courses would improve teaching efficiency inthe sense that lecturers could count on already in-troduced materials and students could benefit fromrecurring topics by exploring them in the context ofdifferent disciplines.
Table 2 depicts our proposedschedule.An important and easily realizable change that wesuggest is to ensure that all linguistic modules aredealt with first in Foundation of Linguistic Anal-ysis (FLA) before they are set into a more formaland also computational setting in the Introduction toComputational Linguistics (ICL).
This could be re-alized by starting FLA with morphology right fromthe beginning, instead of introducing the linguisticmodules first which was also part of the introduc-tion in ICL.
FLA also entered the areas of lexicogra-phy and psycho linguistics (aka the mental lexicon)which could be skipped in future semesters.
Lec-tures on phonetics and phonology which were taughtafter morphology could be rescheduled to the endof the semester.
Both topics are relevant for appli-cations which were introduced in the final sessionsof ICL and also for subsequent optional seminarsin speech generation or speech synthesis in highersemesters.In Formal Foundations (FF) lectures on gram-mars, the Chomsky hierarchy, and decision theorytook place in lectures 5 and 6.
They could be post-poned and lectures on automata moved forward in-stead.
This would ensure that both of these topicsare dealt with in FF after they have been introducedin ICL.
Formal Foundations provides a more formaland deepened insight into these topics and should,therefore, be encountered last.In Introduction to Programming (IP) issues of al-gorithms and analysis are a means to an end: theyare used in programming examples and assessments.Therefore, such topics should be referred to in IPonly after they have been introduced in ICL.
Thecoordination of this already worked out well withrespect to n-grams and phrase structure grammars.Lectures on segmentation and regular expressionstook place in the last third of the semester and couldbe moved forward to have them closer to their intro-duction in the other courses.From a student?s perspective these changes wouldresult in a kind of spiral curriculum.
For example,the first encounter with constituency and syntacticphrase structure would be in FLA, the course whichis least formal and relates most to secondary schoolknowledge.
Their second involvement with phrasestructure would be in ICL and was more formaland also involved computational aspects of syntacticanalysis.
Then, they would learn more on the formalcharacteristics of grammars in FF, and finally, theyperceived it as an application in an IP programmingtask.
If these lectures are seen as stages on a com-mon pathway of learning then they conform to theidea of spiral learning: in course of time the studentsreturn to the same concepts each time on a more ad-vanced level.Table 2 gives a contrastive overview of the fourcourse curricula and shows how the individual topicscould temporally related to one another to support aniterative leaning approach.The first column counts the semester?s teachingunits in the average winter semester (which includessome public holidays).
Introduction to Computa-tional Linguistics (ICL) and Introduction to Pro-gramming (IP) took place twice a week, Foun-dations of Linguistic Analysis (FLA) and FormalFoundations (FF) only once.
The 25th session is fol-lowed by another week of revision and final exams,which is not included here.5 ConclusionWe proposed an enhanced curriculum for teachingparallel freshman?s courses in Computational Lin-guistics, in the spirit of the newly revised bache-lor?s program in Computational Linguistics at theUniversity of Heidelberg.
In particular, we exam-ined the first semester curriculum of four mandatorycourses: Introduction to Computational Linguis-24Introduction to Formal Foundations of Introduction to# Computational Linguistics Foundations Linguistic Analysis Programming1 sets, introductioniterations, relations2 introduction to morphology: morphemes data typesComputational Linguistics inflection, derivationand linguistic modules3 regular expression equivalence relation functions andand automata function, induction methodsformal languages4 morphology and syntax: PoS, strings, data structures,finite automata topological fields control structures5 morphology and automata: sequencesfinite transducers DFAs and NFAs6 tokenizer and NFAs, regular grammars data structures:spelling editor regular expression dictionaries7 tokenizing syntax: phrases encodingsand n-grams chunks, X-bar schema8 tagging: rule-based, Pumping lemma, modules,HMMs, Brill minimizing of automata packages, tests9 tagging syntax: valency, semantic modulesroles, gram.
functions10 syntax and CFGs closures exercise: n-gramsconstituency, dependency11 grammar types, syntax: sentential level regular expressionsparsing CP/IP structures12 parsing: bottom up, grammars, left-right regular expressionstop down derivation, Chomsky hierarchy13 parsing: Earley semantics: meaning, PS grammar,algorithm lexical semantics recursion14 midterm exam decision theory file handling15 treebanks and PCFCs parsing: CYK algorithm tuple, listcomprehensions16 treebanks: semantics: compositional object-orientedresources semantics programming: basics17 semantics: predicate logic pushdown automata oo programming:Turing machines, techniquescomputability theory18 Christmas puzzle: pragmatics: deixis, Christmas lecturepredicate logic and anaphora, informationmodel theory structure19 semantics: propositional revision: oo programming:logic and inferences Pumping lemma techniques20 semantics: propositional pragmatics: speech acts exercise:logic and inference conversational maxims, segmentationpresuppositions21 semantics: compositional a simple grammar factory functionssemantics and ?-calculus for English22 semantics: lexical phonetics blocks and visibilitysemantics23 semantics: lexical exceptionssemantics revision24 semantics: discourse phonology objectsemantics customization25 applications exam revision examTable 2: Re-organized curriculum of first semester courses25tics, Formal Foundations, Foundations of Linguis-tic Analysis, and Introduction to Programming, andidentified common topics.
When the four courseswere first held in parallel last semester, it happenedthat recurring topics were introduced independentlywithout taking into account their previous mentionin other courses.
For future semesters we suggest abetter alignment of recurring topics and sketch re-arrangements of the courses?
schedules.
Instead ofpruning recurrent topics, we think that from the per-spective of the psychology of learning it is usefulfor the students if the same concepts and ideas areapproached from different angles iteratively.AcknowledgmentsWe are indebted to our co-instructors in Heidel-berg: Anette Frank, teaching the Introduction toComputational Linguistics, Philipp Cimiano teach-ing Formal Foundations, as well as Matthias Har-tung and Wolodja Wentland, co-teaching Introduc-tion to Programming, for sharing their experiencesand commenting on versions of this paper.
Wewould also like to thank Anke Holler for valuableinput on the history of the Heidelberg B.A.
program,Karin Thumser-Dauth for pointing us to the work ofJerome Bruner, Piklu Gupta for commenting on apre-final version and also for help with the English.A special thank goes to three anonymous reviewersfor their very detailed and constructive comments.ReferencesSteven Bird, Ewan Klein, and Edward Loper.
forthcom-ing.
Natural Language Processing in Python.Jerome S. Bruner.
1960.
The Process of Education.
Har-vard University Press, Cambridge, Mass.Kai-Uwe Carstensen, Christian Ebert, Cornelia Endriss,Susanne Jekat, Ralf Klabunde, Hagen Langer.
eds.2004.
Computerlinguistik und Sprachtechnologie.Eine Einfu?hrung.
Spektrum, Akademischer Verlag,Heidelberg.Markus Demleitner.
unpublished.
Programmieren I.www.cl.uni-heidelberg.de/kurs/skripte/prog1/html/John E. Hopcroft and Jeffrey D. Ullman.
1979.
Introduc-tion to Automata Theory, Languages and ComputationAddison Wesley.Daniel Jurafsky and James H. Martin.
2000.
Speechand Language Processing.
An Introduction to NaturalLanguage Processing, Computational Linguistics, andSpeech Recognition.
Prentice Hall Series in ArtificialIntelligence.
Prentice Hall.Ralf Klabunde.
1998.
Formale Grundlagen der Linguis-tik Narr, Tu?bingen.Mark Lutz and David Ascher.
2007.
Learning Python.O?Reilly, 2nd Edition.Alex Martelli.
2006.
Python in a Nutshell.
A DesktopQuick Reference.
O?Reilly, 2nd Edition.Jo?rg Meibauer et al eds.
2007.
Einfu?hrung in die ger-manistische Linguistik.
Metzler, Stuttgart.Barbara Partee et al.
1990.
Mathematical Methods inLinguistics.
Kluwer, Dordrecht.Guido van Rossum.
2008.
Python Tutorial.
Python Soft-ware Foundation.
docs.python.org/tut/tut.htmlUwe Scho?ning.
2001.
Theoretische Informatik kurzge-fasst.
Spektrum Akademischer Verlag in Elsevier.26
