Using Semantic Web Technology to Support NLGCase study: OWL finds RAGSChris MellishComputing ScienceUniversity of Aberdeen, Aberdeen AB24 3UE, UKc.mellish@abdn.ac.ukAbstractThe semantic web is a general visionfor supporting knowledge-based process-ing across the WWW and its successors.As such, semantic web technology has po-tential to support the exchange and pro-cessing of complex NLG data.
This pa-per discusses one particular approach todata sharing and exchange that was de-veloped for NLG ?
the RAGS framework.This was developed independently of thesemantic web.
RAGS was relatively com-plex and involved a number of idiosyn-cratic features.
However, we present a ra-tional reconstruction of RAGS in terms ofsemantic web concepts, which yields a rel-atively simple approach that can exploitsemantic web technology directly.
Giventhat RAGS was motivated by the concernsof the NLG community, it is perhaps re-markable that its aspirations seem to fit sowell with semantic web technology.1 IntroductionThe semantic web is a vision of a future worldwide web where content, rather than being primar-ily in the form of unanalysed natural language, ismachine accessible (Antoniou and van Harmelen,2004).
This could bring a number of advantagescompared to the present web, in terms, for instanceof the precision of web search mechanisms and theextent to which web resources can be brought to-gether automatically for solving complex process-ing problems.From the point of view of NLG, the seman-tic web offers a vision of a situation where re-sources can be formally described and composed,and where it is possible to live with the variety ofdifferent approaches and views of the world whichcharacterise the users of the web.
Given the het-erogeneous nature of NLG, it seems worth con-sidering whether there might be some useful ideashere for NLG.The foundation of the semantic web is the ideaof replacing formatting-oriented languages such asHTML by varieties of XML which can capture thestructure of content explicitly.
Markup of linguis-tic resources (text corpora, transcribed dialogues,etc.)
via XML is now standard in NLP, but veryoften each use of XML is unique and hard to rec-oncile with any other use.
The semantic web goesbeyond this in proposing a more abstract basic lan-guage and allowing explicit representation of whatthings in it mean.
For the semantic web, RDF(Klyne and Carroll, 2003), which is built on top ofXML, represents a common language for express-ing content as a ?semantic network?
of triples, andontology languages, such as OWL (McGuinnessand van Harmelen, 2004), allow the expressionof constraints and principles which partially con-strain possible interpretations of the symbols usedin the RDF.
These ontologies are statements thatthemselves can be inspected and modified.
Theycan provide the basis for different people to ex-press their assumptions, agreements and disagree-ments, and to synthesise complex data from mul-tiple sources.2 RAGSRAGS (?Reference Architecture for GenerationSystems?)
was an attempt to exploit previous ideasabout common features between NLG systemsin order to propose a reference architecture thatwould help researchers to share, modularise andevaluate NLG systems and their components.
Inpractice, the project found that there was lessagreement than expected among NLG researcherson the modules of an NLG system or the order oftheir running.
On the other hand, there was rea-sonable agreement (at an abstract level) about thekinds of data that an NLG system needs to repre-Figure 1: RAGSsent, in passing from some original non-linguisticinput to a fully-formed linguistic description as itsoutput.
Figure 1 summarises RAGS and how itwas intended to be used.
The following descrip-tion simplifies/ rationalises in a number of ways;more information about RAGS can be found in(Mellish et al, 2006) and (Cahill et al, 2001).RAGS provides abstract type definitions for 6different types of data representations: concep-tual, rhetorical, document, semantic, syntactic and?quote?.
As an example, here are the definitionsassociated with document representations (whichdescribe the parts of a document and aspects oftheir logical formatting).DocRep = DocAttr ?DocRepSeqDocRepSeq = DocRep?DocAttr = (DocFeat?
DocAtom)DocFeat,DocAtom ?
PrimitivesThese type definitions express the types in termsof set theory (using constructions such as union,Cartesian product, subset and function), wherethe ?primitive?
types correspond to basic setsthat have to be defined in a theory-specific way.Thus a document representation (DocRep) hastwo components, a DocAttr and a DocRepSeq.A DocRepSeq is a sequence of zero or moreDocReps, which represent the document structureof the parts of the document.
A DocAttr is afunction from DocFeats to DocAtoms.
The for-mer can be thought of as a set of names of ?fea-tures?
for parts of documents (e.g.
text level, in-dentation) and the latter as a set of values for these(e.g.
?Clause?, 3).
However the sets DocFeatand DocAtom are left unspecified in the RAGSformalisation.
The idea is that researchers will notnecessarily agree how to instantiate these primi-tives.
Clusters of researchers may agree on stan-dard possibilities for these sets and this will helpthem to share data (but even researchers not ableto agree on the primitive sets will be able to under-stand one anothers?
data to some extent).
Whentwo NLG modules need to exchange data, theyneed to refer to an agreed instantiation of the prim-itive types in order to share fully.Although it gives some examples, RAGS doesnot specify any particular formats in which datashould be represented in different programminglanguages and used by NLG modules ?
poten-tially, arbitrary ?native formats?
could be used,as long as they can be viewed as ?implementa-tions?
of the abstract type definitions.
Furtherconditions are, however, imposed by requiring acorrespondance between native formats and repre-sentations in a ?reference implementation?
calledthe Objects and Arrows (OA) model.
This pro-vides answers to further questions, such as whatpartially-specified data representations are possi-ble, where re-entrancy can occur and how datarepresentations of different types can be mixed.The OA model represents data as directed graphs,whose nodes represent typed pieces of data andwhose edges represent relations.
The possible le-gal states of an OA representation are formally de-fined, in a way that resembles the way that infor-mation states in a unification grammar can be char-acterised (Shieber, 1986).
Each node in the graphis labelled with a type, e.g.
DocRep, DocAtom.Each node is assumed to have a unique identifierand for primitive types a node can also have a sub-type, a theory-dependent elaboration that appliesto this particular data object (e.g.
a DocAtomcould have the subtype 3).
Some edges in thegraph indicate ?local arrows?, which describe theparts of complex datastructures.
For instance,edges labelled el indicate elements of unorderedstructures, and arrows labelled el-1, el-2 etc.
indi-cate components of ordered structures.
Edges canalso represent ?non-local arrows?
which describerelationships between representations at differentlevels.
Non-local arrows allow data representa-tions at different levels to be mixed into a singlegraph.Representations in the Objects and Arrowsmodel can be mapped to an XML interchange rep-resentation.
The correspondance between nativeformats and the OA model can then be used to mapbetween native data representations and XML (inboth directions).
Modules can communicate viaagreed native formats or, if this is undesirable, viathe XML representation.3 Some Problems with RAGSSome of the problems with RAGS, which have im-peded its uptake, include:?
Complexity and lack of tools ?
RAGS was aproposal with a unique shape and takes sometime to understand fully.
It ploughs its owndistinctive furrow.
Because it was developedin a project with limited resources, there arelimited tools provided for, for instance, dis-playing RAGS structures, supporting differ-ent programming languages and styles andautomatic consistency checking.
This meansthat engaging with RAGS involves initiallya significant amount of low-level program-ming, with benefits only to be seen at sometime in the future.?
Idiosyncratic use of XML ?
RAGS had to ad-dress the problem of expressing a graph in aserialised form, where there can be multiple,but different, serialisations of the same graph.It did this in its own way, which means that itis hard to exploit general tools which addressthis problem in other areas.?
Inclarity about how to ?buy-in?
to limited de-grees - there is no defined mechanism for di-viding generally agreed from non-agreed el-ements of a RAGS representation or for ex-pressing or referring to an ?agreed instantia-tion?.4 Recasting RAGS data in terms of RDFThe first step in recasting RAGS in semantic webterms is to exploit the fact that it is the OA model(rather than the abstract type definitions) that is thebasis of data communication, since this model ex-presses more concrete requirements on the form ofthe data.
Therefore initially we concentrate on theOA model and its XML serialisation.RDF is a data model that fits OA graphs verywell.
It provides a way of creating ?seman-tic networks?
with sets of object-attribute-valuetriples.
Objects and attributes are ?resources?,which are associated with Universal ResourceIdentifiers (URIs), and values are either resourcesor basic data items (?literals?, e.g.
strings or in-tegers).
Resources have types, indicated by theRDF type attribute.
The idea of an RDF resourcemaps nicely to a RAGS object, and the idea of anRDF attribute maps nicely to a RAGS arrow.URIs provide a natural way to allow reen-trancy to be represented and at the same time per-mit unambiguous references to external objectsin the way that RAGS intended should be pos-sible.
The XML namespace mechanism allowscomplex IDs to be abbreviated by names of theform Prefix:N, where Prefix is an abbrevi-ation for the place where the name N is definedand N is the basic name (sometimes the prefix canbe inferred from context and can be missed out).Thus, for instance, if the prefix rags is definedto stand for the start of a URI identifying RAGSthen rags:DocRep identifies the type DocRepdefined by RAGS, as distinct from any other defi-nition anyone might have.It follows from the preceding discussion that in-stances of the RAGS abstract types can be mappednaturally to RDF resources with the abstract typeas the value for the RDF attribute type.
Arrowscan be mapped into RDF attributes, and so it re-ally only remains to have a convention for the rep-resentation of ?subtype?
information in RAGS.
Inthis paper, we will assume that instances of primi-tive types can have a value for the attribute sub.RDF can be serialised in XML in a number ofways (which in fact are closely related to the pos-sible XML serialisations of RAGS).To summarise, using RDF rather than RAGSXML introduces negligable extra complexity buthas a number of advantages:?
Because it is a standard use of XML, it meansthat generic software tools can be used withit.
Existing tools, for instance, support read-ing and writing RDF from different program-ming languages, visualising RDF structures(see Figure 4) and consistency checking.?
Because it comes with a universal way ofnaming concepts, it means that it is possi-ble for different RAGS resources to be un-ambiguous and reference one another.5 Formalising the RAGS types usingontologiesRDF gives us a more standard way to interpret theOA model and to serialise OA instance informa-tion in XML.
However, on its own it does not en-force data representations to be consistent with theintent of the abstract type definitions.
For instance,it does not prevent an element of a DocRepSeqbeing something other than a DocRep.For RAGS, an XML DTD provided constraintson what could appear in the XML serialisation, butDTDs are not very expressive and the RAGS DTDhad to be quite loose in order to allow partial rep-resentations.
The modern way to define the termsthat appear in a use of RDF, and what constraintsthere are on their use, is to define an ontology us-ing a language like RDFS (Brickley and Guha,2003) or OWL (McGuinness and van Harmelen,2004).
An ontology can be thought of as a set oflogical axioms that limits possible interpretationsof the terms.
This could be used to show, for in-stance, that a given set of instance data is inconsis-tent with an ontology, or that further logical conse-quences follow from it.
There are various versionsof the web ontology language OWL.
In this paper,we use OWL DL, which is based on a descriptionlogic, and we will use standard description logicnotation in this paper.Description logics allow one to make statementsabout the terms (names of concepts and roles) usedin some knowledge representation.
In our case,a concept corresponds to a RAGS type (imple-mented by an RDF resource linked to from in-dividuals by a type attribute) and a role cor-responds to a RAGS arrow (implemented by anRDF attribute).
Complex names of concepts canbe built from simple names using particular con-structors.
For instance, if ?
and ?
are two con-cept names (simple concept names or more com-plex expressions made from them) and ?
is a rolename, then, the following are also concept names:?unionsq ?
- names the concept of everythingwhich is ?
or ?
?u ?
- names the concept of everythingwhich is ?
and ???.?
- names the concept of everythingwhich has a value for ?
which is aninstance of concept ???.?
- names the concept of everythingwhich only has values for ?
whichare instances of concept ?=n ?
- names the concept of everythingwith exactly n different values of ?Constructors can be nested, so that, for instance,C1 u ?r.C2 is a possible concept name, assumingthat C1 and C2 are simple concept names and r isa role name.For an ontology, one then writes logical axiomsstating relationships between simple or complexconcept names, e.g.
?1 v ?2 - states that ?1 names a morespecific concept than ?2?1 ?
?2 - states that ?1 names the sameconcept as ?2disjoint({?1, .
.
.
?n}) - states that?1, .
.
.
?n are disjoint concepts (nopair can have a common instance).
?1 vr ?2 - states that ?1 names a sub-property of ?2domain(?, ?)
- states that ?
can onlyapply to things satisfying concept ?range(?, ?)
- states that values of ?must satisfy concept ?functional(?)
- states that ?
is a func-tional roleFigure 2: Using Multiple Ontologies in RAGSFor more information on the formal basis of de-scription logics and their relevance for ontologies,see (Horrocks, 2005).For RAGS, a number of advantages follow fromadopting DLs as the basis for formalising data rep-resentations:Modularity.
A given set of instance data may re-late to more than one ontology which ex-presses constraints on it.
One ontology issaid to import another if it inherits the con-straints that the other provides.
The standard(monotonic) logic approach applies, in thatone can choose to describe the world in termsof any consistent set of axioms.
Ontologiespackage up sets of axioms into bundles thatone might decide to include or not include inone?s own model of the world.
Ontologies fordifferent purposes can be built by differentpeople but used together in an eclectic way.This formalises the idea of ?variable buy-in?in RAGS.Openness.
Also corresponding to the usual ap-proach with logic, the semantics of OWLmakes no closed world assumption.
Thus astatement cannot be inconsistent purely byfailing to specify something.
This means thatit is only necessary to describe the proper-ties of complete datastructures in an ontol-ogy.
Partial descriptions of data will be notbe inconsistent by virtue of their partiality.Only having to describe complete datastruc-tures makes the specification job much sim-pler.
In a similar way, the semantics of OWLmakes no unique names assumption.
Thusindividuals with different names are not nec-essarily distinct.
This means that it is gen-erally possible to make a given descriptionmore specific by specifying the identity oftwo individuals (unless inconsistency arisesthrough, for instance, the individuals havingincompatible types).
This is another require-ment if one wishes the power to add furtherinformation to partial representations.Software tools.
As with RDF, use of OWL DLopens up the possibility of exploiting generictools developed elsewhere, for instance rea-soners and facilities to translate RAGS con-cepts into programming language structures.6 The RAGS OntologiesIt is convenient to modularise what RAGS requiresas well-formedness constraints as a set of ontolo-gies.
This allows us to formalise what it means to?buy-in?
to one or more parts of RAGS.
It simplymeans importing one or more of the RAGS ontolo-gies (in addition to one?s own) and making use ofsome of the terms defined in them.
We now outlineone possible version of the core RAGS ontologies.Figure 2 shows the way that the RAGS ontolo-gies are intended to be used.
A dataset in generalmakes use of concepts defined in the core RAGSontologies (the ?upper ontology?
and the ?NLGFigure 3: The RAGS ?NLG ontology?ontology?
)1 and also theory-dependent elabora-tions defined in separate ontologies (which maycorrespond one-to-one to the different levels, asshown, but need not do so necessarily).
Theseelaborations are not (initially) provided by RAGSbut may arise from arbitrary research subcom-munities.
Logically, the dataset is simple de-scribed/constrained by the union of the axiomscoming from the ontologies it makes use of.
Ingeneral, different datasets will make consistentreferences to the concepts in the core RAGSontologies, but they may make use of differenttheory-dependent elaborations.The basis of RAGS is a very neutral theoryabout datatypes (and how they can be encoded inXML).
This is in fact independent of the fact thatRAGS is intended for NLG - at this level, RAGScould be used to describe data in other domains, orNLG-oriented data that is not covered by RAGS.
Ittherefore makes sense to think of this as a separa-ble part of the theory, the ?upper ontology?.
At thetop level, datastructures (instances of Object)belong to one of the concepts Ordered, Setand Primitive.
Ordered structures are divided1These are both available in full fromhttp://www.abdn.ac.uk/?csc248/ontologies/up in terms of the number of components (con-cepts Arity-1, Arity-2 etc) and whether theyare Tuples or Sequences.
For convenience,union types such as Arity-atleast-2 arealso defined.The RAGS NLG ontology (see Figure 3 foran overview) contains the main substance of theRAGS type definitions.
As the figure shows,it introduces a number of new concepts as sub-concepts of the upper ontology concepts.
Forinstance, DocRepSeq, RhetRepSeq, Adjand Scoping are introduced as subconceptsof SpecificSequence (these concepts cor-respond to types used in RAGS at the doc-ument, rhetorical, syntactic and semantic lev-els).
Not shown in the diagram is the type ofroles, Functional that includes all argumentsof RAGS functional objects2.
The set of typedefinitions describing a level of representation inRAGS translates quite directly into a set of axiomsin this ontology.
For instance, the following is theencoding of the type definitions for document rep-2Whereas in RAGS a functional type (e.g.
DocAttr)is represented as an unordered set of (ordered) pairs of theform <function argument,function value>, here we can sim-ply implement the function arguments as RDF attributes andomit the functional types.Figure 4: Visualisation of example Document Representationresentations.
First of all, it is necessary to specifythat aDocRep is a tuple with arity 1 (theDocAttris not needed), and that its component must have aspecific type:DocRep v Tuple uArity-1DocRep v (?el-1.DocRepSeq)The next few axioms do a similar job forDocRepSeq, a kind of sequence:DocRepSeq v SpecificSequenceDocRepSeq v (?n-el.DocRep)Finally, a high level role DocFeat is introduced,whose subroles will correspond to particular docu-ment features like Indentation.
The domain andrange of such roles are constrained via constraintson DocFeat:DocFeat vr Functionaldomain(DocFeat,DocRep)range(DocFeat,DocAtom)7 Other Ontologies and RAGSAs stated above, in general one produces special-isations of the RAGS framework by creating newontologies that:?
Introduce specialisations of the RAGS prim-itive concepts (and perhaps new roles that in-stances of these can have).?
Introduce subroles of the RAGS functionalroles.?
Add new axioms that specialise existingRAGS requirements, involving the core con-cepts and roles and/or the newly introducedones.An example of this might be an example ontol-ogy that instantiates a simple theory of documentstructure, following (Power et al, 2003).
Giventhe notion of document structure introduced insection 2 and formalised in section 6, it is reallyonly necessary to specify the ?features?
of piecesof document structure (DocFeat) and their ?val-ues?
(DocAtom).
The former are modelled asroles and the latter in terms of concepts.
First weintroduce the basic types of values:DocAtom ?
(Position unionsq Indentation unionsqLevel unionsq Connective)disjoint({(Position, Indentation, Level,Connective})Positions in the text could be modelled by objectswhose sub values are positive integers (there is astandard (RDFS) datatype for these).
The follow-ing axioms capture this and the characteristics ofthe role hasPosition:Position v (?sub.xsd : positiveInteger)hasPosition vr DocFeatrange(hasPosition, Position)functional(hasPosition)For text levels, on the other hand, there is a fixedset of possible values.
These are introduced as dis-joint concepts.
In addition, the role hasLevel isintroduced:Level ?
(ChapterunionsqParagraphunionsqSectionunionsqText-Clause unionsq Text-Phrase unionsqText-Sentence)disjoint({Chapter, Paragraph, Section,Text-Clause, Text-Phrase, Text-Sentence})hasLevel vr DocFeatrange(hasLevel, Level)functional(hasLevel)Figure 4 shows an example DocRep (labelled?d12?)
described by this ontology, as visualisedby the RDF-Gravity tool developed by SalzburgResearch.
It consists of aDocRepSeq (?d6?)
withtwo DocRep components (?d0?
and ?d13?).
Theindentations of ?d12?
and ?d0?
are not known, butthey are constrained to be the same.It is easy to think of examples of other (ex-isting or potential) ontologies that could providetheories of the RAGS primitive types.
For in-stance, WordNet (Miller, 1995) or the GeneralisedUpper Model (Bateman et al, 1995) could beused to bring in a theory of semantic predicates(SemPred).
An ontology of rhetorical relations(RhetRel) could be built based on RST, and soon.Ontologies can use the expressive power ofOWL to make relatively complex statements.For instance, the following could be used in anRST ontology to capture the concept of nucleus-satellite relations and the constraint that a rhetori-cal representation with such a relation (as its firstcomponent) has exactly two subspans (recorded inthe second component):NS v RhetRel(RhetRep u ?el-1.NS) v (?el-2.Arity-2)8 Relation to Other WorkReworking RAGS to use semantic web technologyrelates to two main strands of previous work: workon XML-based markup of linguistic resources andwork on linguistic ontologies.The trouble with applying existing annotationmethods (e.g.
the Text Encoding Initiative) toNLG is that they presuppose the existence of alinear text to start with, whereas in NLG one isforced to represent more abstract structures beforecoming up with the actual text.
A recent proposalfrom Linguistics for a linguistic ontology for thesemantic web (Farrar and Langendoen, 2003) isagain based around making annotations to exist-ing text.
Research is only just beginning to es-cape from a ?time-based?
mode of annotation, forinstance by using ?stand-off?
annotations to indi-cate layout (Bateman et al, 2002).
In addition,most annotation schemes are partial (only describecertain aspects of the text) and non-structured (as-sign simple labels to portions of text).
For NLG,one needs a way of representing all the informa-tion that is needed for generating a text, and thisusually has complex internal structure.Linguistic ontologies are ontologies developedto describe linguistic concepts.
Although ontolo-gies are used in a number of NLP projects (e.g.
(Estival et al, 2004)), the ontologies used are usu-ally ontologies of the application domain ratherthan the linguistic structures of natural languages.The development of ontologies to describe aspectsof natural languages is comparatively rare.
TheWordNet ontologies are a widely used resourcedescribing the repertoire of word senses of nat-ural languages, but these concentrate on individ-ual words rather than larger linguistic structures.More relevant to NLG is work on various versionsof the Generalised Upper Model (Bateman et al,1995), which outlines aspects of meaning relevantto making NLG decisions.
This has been used tohelp translate domain knowledge in a number ofNLG systems (Aguado et al, 1998).In summary, existing approaches to using on-tologies or XML for natural language related pur-poses are not adequate to describe the datastruc-tures needed for NLG.
Semantic web technologyapplied to specifications with the complexity ofthose generated by RAGS might, however, be ableto fill this gap.9 The Semantic Web for NLG tasksIn the above, we have made a case for the use ofsemantic web technology to aid inter-operabilityand sharing of resources for NLG.
This was jus-tified largely by the fact that the most significantNLG ?standardisation?
effort so far, RAGS, canbe straightfowardly recast in semantic web terms,bringing distinct advantages.
Even if RAGS itselfis not taken forward in its current form, this sug-gests that further developments of the idea couldbear fruit in semantic web terms.The semantic web is certainly not a panacea forall the problems of NLG, and indeed there are as-pects of the technology that are still at an earlystage of development.
For instance, the problemsof matching/ reconciling alternative ontologies aremany and complex.
Some researchers even dis-pute the viability of the general approach.
On theother hand, the semantic web community is con-cerned with a number of problems that are alsovery relevant to NLG.
Fundamentally, the seman-tic web is about sharing and exploiting distributedcomputational resources in an open communitywhere many different goals, viewpoints and the-ories are represented.
This is something that NLGalso seeks to do in a number of ways.
The seman-tic web movement has considerable momentum.There are more of them than us.
Let?s see what wecan get from it.AcknowledgmentsThis work was supported by EPSRC grantEP/E011764/1.ReferencesG.
Aguado, A. Ba no?n, John A. Bateman, S. Bernardos,M.
Ferna?ndez, A.
Go?mez-Pe?rez, E. Nieto, A. Olalla,R.
Plaza, and A. Sa?nchez.
1998.
Ontogeneration:Reusing domain and linguistic ontologies for Span-ish text generation.
In Proceedings of the ECAI?98Workshop on Applications of Ontologies and Prob-lem Solving Methods, pages 1?10, Brighton, UK.Grigoris Antoniou and Frank van Harmelen.
2004.
ASemantic Web Primer.
MIT Press.John A. Bateman, Renate Henschel, and Fabio Rinaldi.1995.
Generalized Upper Model 2.0: documenta-tion.
Technical report, GMD/Institut fu?r IntegriertePublikations- und Informationssysteme, Darmstadt,Germany.John Bateman, Renate Henschel, and Judy Delin.2002.
A brief introduction to the GeM annotationscheme for complex document layout.
In Proceed-ings of NLP-XML 2002, Taipei.D.
Brickley and R. V. Guha.
2003.
Rdf vocabularydescription language 1.0: Rdf schema.
TechnicalReport http://www.w3.org/TR/rdf-schema, WorldWide Web Consortium.Lynne Cahill, Roger Evans, Chris Mellish, DanielPaiva, Mike Reape, and Donia Scott.
2001.The RAGS Reference Manual .
Available athttp://www.itri.brighton.ac.uk/projects/rags.Dominique Estival, Chris Nowak, and AndrewZschorn.
2004.
Towards ontology-based naturallanguage processing.
In Proceedings of NLP-XML2004, Barcelona.Scott Farrar and Terry Langendoen.
2003.
A linguisticontology for the semantic web.
Glot International,7(3):1?4.Ian Horrocks.
2005.
Description logics in ontologyapplications.
In B. Beckert, editor, Proc.
of the 9thInt.
Conf.
on Automated Reasoning with AnalyticTableaux and Related Methods (TABLEAUX 2005),pages 2?13.
Springer Verlag LNCS 3702.Baden Hughes and Steven Bird.
2003.
Grid-enablingnatural language engineering by stealth.
In Pro-ceedings of the HLT-NAACL 2003 Workshop on TheSoftware Engineering and Architecture of LanguageTechnology Systems.G.
Klyne and J. Carroll.
2003.
Resource descrip-tion framework (rdf): Concepts and abstract syn-tax.
Technical Report http://www.w3.org/TR/rdf-concepts, World Wide Web Consortium.D.
L. McGuinness and F. van Harmelen.2004.
Owl web ontology language overview.http://www.w3.org/TR/owl-features/.Chris Mellish, Donia Scott, Lynne Cahill, Daniel Paiva,Roger Evans, and Mike Reape.
2006.
A referencearchitecture for generation systems.
Natural lan-guage engineering, 1:1?34.G.
Miller.
1995.
Wordnet: A lexical database for en-glish.
CACM, 38(11):39?41.Richard Power, Donia Scott, and Nadjet Bouayad-Agha.
2003.
Document structure.
ComputationalLinguistics, 29:211?260.Stuart M. Shieber.
1986.
An introduction tounification-based approaches to grammar.
CSLI.
