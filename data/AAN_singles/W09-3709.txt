Proceedings of the 8th International Conference on Computational Semantics, pages 73?89,Tilburg, January 2009. c?2009 International Conference on Computational SemanticsA Conceptual and Operational Model forProcedural Texts and its Use in Textual IntegrationIsabelle Dautriche(1,2), Patrick Saint-Dizier(1)(1) IRIT-CNRS, Toulouse, France(2) INSA, Toulouse Franceisabelle.dautriche@gmail.com, stdizier@irit.frAbstractIn this paper, we propose a conceptual and operational model forprocedural texts, within Action theory.
We propose some elements tomodel the complexity and expliciteness of instructions, showing, how,for a given execution of the procedure, the success of the goal can bemeasured.
Next, we show how a procedure can be enriched via textualintegration in order to improve the success rate of the goal.1 IntroductionProcedural texts consist of a sequence of instructions, designed with someaccuracy in order to reach a goal (e.g.
assemble a computer).
Proceduraltexts may also include subgoals.
Goals and subgoals are most of the timerealized by means of titles and subtitles.
The user must carefully follow stepby step the given instructions in order to reach the goal.
A procedure is ingeneral a finite sequence of subactions, terminal elements being instructions.Instruction execution may be conditional, associated with preferences oradvices.
Instructions may contain continuous processes, loops and may beorganized as a cluster in a loop, till some result is reached.
This is presentedin (Delpech et al 2008).
Not surprisingly, procedures have a structure thatresembles what is usually found in imperative programming.The main goal of our project is to analyze the structure of proceduraltexts in order to efficiently and accurately respond to How-to?
questions.This means identifying titles (which basically convey the main goals of aprocedure in a number of domains), sequences of instructions serving thesegoals, and a number of additional structures such as prerequisites, warnings,advices, illustrations, etc.
(Takechi et al.
2003), (Adam, 2001).
A response73to an How-to question is then the well-formed text portion within the scopeof the title that matches the question (Delpech et al 2007, 2008).
Quiteoften, we have several texts candidates for the response.
It is often difficultto make a choice a priori, therefore, we offer the user two approaches whichmay complement each other:?
the possibility to get a few relevant documents, undergoing a fewconstraints (e.g.
good typography), associated with inter-documentnavigation tools based on contents (experiments related to user nav-igation strategies have been carried out using the Navitexte software(http://panini.u-paris10.fr/jlm/?Start:projets:NaviTexte)),?
the selection of a main document and the integration into this docu-ment of additional information such as missing manners, instruments,durations, etc., coming from the other candidate procedures, possiblyin an interactive way, upon user?s request.
Obviously, this is very chal-lenging, and it may be necessary e.g.
to indicate integration situationsto the user in case some incoherences arise.In this paper, besides developing the foundational aspects of proceduraltexts within the perspective of Action Theory (originating from (Davidson80), see also: http://actiontheory.free.fr/), we develop a first experiment wecarried out for textual integration.
Text fusion or integration is in generalextremely difficult, however, procedural texts being strongly restricted inform and contents make such an experiment possible and of much interest.What is presented here is basically a feasability study, identifying difficulties,deadlocks, and the linguistic and reasoning resources which may be needed.Evaluation results are preliminary and therefore indicative.2 Dealing with Procedural TextsIn our perspective, procedural texts range from apparently simple cookingrecipes to large maintenance manuals.
They also include documents as di-verse as teaching texts, medical notices, social behavior recommendations,directions for use, assembly notices, do-it-yourself notices, itinerary guides,advice texts, savoir-faire guides etc.
(Aouladomar et al, 2005).
Proceduraltexts follow a number of structural criteria, whose realization may dependon the author?s writing abilities, on the target user, and on traditions asso-ciated with a given domain.
Procedural texts can be regulatory, procedural,programmatory, prescriptive or injunctive.74We have developed a quite detailed analysis of procedural texts froma manual corpus analysis, identifying their main basic components as wellas their global structure.
For that purpose, we have defined two levels: asegmentation level that basically identifies structures considered as terminalstructures (titles, instructions, prerequisites, connectors, etc.)
and a gram-mar level that binds these terminal structures to give a global structure toprocedural texts (Delpech et al 2008) (Fontan et al 2008).
This structureis textual and dedicated only to elements relevant to procedurality.
Ourstudy was carried out on a development corpus of 1700 French texts takenfrom the Web from most of the areas cited above, and extracted from ourmore global corpus of 8000 texts.Procedural texts are complex structures, they often exhibit a quite com-plex rational (the instructions) and ?irrational?
structure which is mainlycomposed of advices, conditions, preferences, evaluations, user stimulations,etc.
They form what we call the explanation structure, which motivates andjustifies the goal-instructions structure, viewed as the backbone of procedu-ral texts.
A number of these elements are forms of argumentation, they ap-pear to be very useful, sometimes as important as instructions: they providea strong and essential internal cohesion and coherence to procedural texts.They also indicate, among other things, the consequences on the target goalof an incorrect or incomplete execution of the associated instruction.A conceptual and operational semantics for procedural texts can be de-rived from these considerations, where, in fact, what is essential is to modelthe complexity of a procedure, the risks, and a series of indicators of thedifficulty to reach the goal.As an illustration, consider the cooking receipe extract in Figure 1 (ourwork is realized on French, with English glosses), describing the prepara-tion of a pizza, arguments are in italics.
As the reader can note, warningsand advices operate at various levels, some are general recommendations,while others clearly indicate the risks of a failure, complete or partial, if theinstruction is not correctly carried out.3 A Formal Model for Procedural Texts withinAction TheoryAction Theory is a general framework that deals with various facets of ac-tions, including e.g.
planning issues, modelling causality and psychologicalinvestigations related to the notion of goal.
Action theory seems to be aconvenient framework to give a conceptual semantics to procedurality, and75HOW TO MAKE PIZZAMaking Pizza DoughPour the warm water in a large mixing bowl.
Add the sugar and stir untildissolved otherwise it may burn when baking.Add the yeast and gently stir the mixture until the yeast is dissolved.Let the mixture sit for 10 minutes to allow the yeast to become ?active?, do notwait for more otherwise its effect will decrease.The mixture should become foamy at the surface and appear cloudy, and willbegin to release its familiar, ?yeasty?
aroma.Add the salt and olive oil and stir again to combine the ingredients, make surethey are well mixed otherwise the oil will burn.Add 1 cup of flour to the mixture and whisk in until fully dissolved, otherwiseyou?ll get lumps later .Add the second cup of flour and whisk it in until the mixture is smooth, alter-natively, you can add the flour gradually.You may need to add a dusting of flour from time to time to reduce the stickinessof the dough as you work it with your hands.
Be patient, folding the doughmixture in on itself, over and over again.Figure 1: Arguments in a procedureto one of its main language realizations: procedural texts.Since argumentation is a major feature of procedural texts it will play amajor role in our modelling.
We then develop the main facets of a conceptualsemantics for procedural texts, with a focus on the measure of the success inreaching a goal, based on arguments.
This leads us to investigate measuresof instructions complexity and expliciteness.
The second part of the paper isan experiment showing how complexity and expliciteness can be dealt within order to guarantee a higher success rate to the procedure using textualintegration.3.1 Structure of ArgumentsRoughly, argumentation is a process that allows speakers to construct state-ments for or against another statement called the conclusion.
These formerstatements are called supports.
The general form of an argument is : Con-clusion ?because?
Support (noted as C because S).
In natural language,conclusions usually appear before the support, but they may also appearafter, to stress the support.
A conclusion may receive several supports, pos-sibly of different natures (advices and warnings): don?t add natural fertilizer,76this may attract insects, which will damage your young plants.
Argumentsmay be more or less strong, they bear in general a certain weight, mostlyinduced from the words they contain or from their syntactic construction(Anscombre et al 1981), (Moeschler 1985), (Amgoud et al.
2001).
In nat-ural contexts, this weight is somewhat vague and therefore quite difficult toprecisely evaluate.In procedural texts, arguments are associated with instructions or groupsof related instructions (that we call instructional compounds).
Contrary toworks in artificial intelligence, arguments appear here in isolation, they donot attack each other, they simply contribute to the success of the goal theprocedure encodes.3.2 Modelling Procedural TextsLet G be a goal which can be reached by the sequence of instructionsAi, i ?
[1, n].
We will not go here into the details of their exact tem-poral structure, which is often basically sequential.
A correct execution ofall the instructions guarantees the success of the goal G.Let us then assume that any Aiis associated with a support Si(possiblynot realized).
The absence of an explicit support does not mean that theinstruction is not important, but simply that failing to realize it has obvi-ous consequences on the goal G. A procedure is then a temporally orderedsequence of AiSi.Let us next associate with every instruction AiSi(or, instructional com-pound, no distinction is made in this paper) a vector (pi, gi, di, ti) where:?
piis the associated penalty when the user, for a given execution, partlyor fully fails to realize Ai,?
giis the gain associated with Ai: there is a gain only in case where Aiis an advice, aimed at improving the quality of G,?
diis the intrinsic difficulty of the instruction Ai,?
tiis the degree of explicitness of Ai.These parameters are obviously quite difficult to elaborate.
This is devel-oped in the next subsections.Let us concentrate here on the realization of the goal G, and on measuringits success, given a certain execution U by a user.
It is important to notethat failing to properly realize an instruction does not necessarily mean thatthe goal cannot be reached, but the result of the procedure won?t be as nice77as it could have been.
In the natural language expressions of conclusions(the Aj) as well as of supports, there are many modals or classes of verbs(like risk verbs) that indeed modulate those consequences on G, contrast forexample:use professional products to clean your leathers, they will give them a brighteraspect.
with:carefully plug in your mother card vertically, otherwise you will most likelydamage its connectors.In the latter case, the goal ?mounting your own PC?
is likely to fail if theinstruction is not correctly realized (the instruction at stake will be assigneda high penalty), whereas in the former, the goal ?cleaning your leathers?
willjust be less successful in a certain sense, where there is an explicit gainassociated if professional products are used.
These parameters and theirlanguage realizations are studied in (Fontan et al 2008).Given a certain realization by a user, the success of a goal G can beevaluated by the sum of the gains on the one hand, and the sum of thepenalties on the other hand.
Gains and penalties a priori do not compen-sate each other: they operate at different levels.
Since any Aiis in factrealized successfully to a certain degree by the user for a given an executionU, gains and penalties need to be weighted for that execution, i.e.
pairedwith a success measure for each instruction.
Let us introduce respectively?iand ?ifor gains and penalties on Ai, each of these weights being includedin [0, 1].
Then, for a given execution of the goal G, we have:gain(G) =?ni=1gi?
?i, penalty(G) =?ni=1pi?
?i3.3 Elaborating penalties and gainsA penalty is equal to 0 when the action is correctly realized.
Otherwise ithas a positive value.
Gains are also positive values and are only associatedwith advices (optional instructions), therefore, gains are positive only whenadvice are executed, otherwise they are null.The difficulty is to elaborate a model that can describe in a simple waythe form penalties may have.
For that purpose, and as a first experimenta-tion, we introduce a three place vector representing three types of executionlevels, to which penalty costs can be associated.
The vector represents penal-ities according to three levels of success for an instructions: (good execution,average, failure).
To make it representative of the various importance of theinstructions in a procedure, we introduce four levels of importance:78- Essential action, with vector: (0, N, infinite),- Important action : (0, 1, N),- Useful action : (0,0,1),- Optionnal action : (0,0,0).The value of N remains a parameter that needs to be adjusted experimen-tally.
In case of an essential action, failure entails the goal failure, since thevalue of the penalty is infinite.
The four levels of importance of actions is aparameter quite frequently encountered in experimental psychology, didac-tics and cognitive ergonomy when users have to evaluate the importance ofa task, e.g.
in emergency stituations.For each instruction, the level of importance can be estimated from theterms in the instruction (illocutionary force captured in warnings) or bespecified by the author of the text, e.g.
via appropriate devices like icons,which abound in large public procedural texts.We can have a similar characterization for gains:- Important advice: (0, 1, M),- Useful if done completely: (0, 0, 1),- No advice (0, 0, 0).The value of N needs also to be experimentally elaborated.3.4 Measuring the intrinsic difficulty rate d of an instructionIt is of much interest to be able to measure the inherent complexity ordifficulty of an instruction.
This notion obviously depends on the reader,and may be somewhat dependent on the other actions around it.
Neverthe-less, we think that some features introduce in any situation some inherentdifficulties.
We give here some elements found in procedures identified asintroducing some complexity, independently of the domain at stake.
Thoseelements are essentially structures like verbs, PPs and adverbs.Considering that procedural texts must limit as much as possible thedistance between the text and the action (they are oriented towards action,not inferencing), we have identified elements inducing complexity by askingusers to indicate and possibly comment every indication in instructions forwhich they had to make an elaboration (imagine a gesture, identify a toolamong a set of closely related tools, evaluate a manner (slowly, cautiously),etc.).
The protocol is simple and informal, but nevertheless gives interestingindications for parameters inducing complexity.The most frequently encountered parameters are, informally:?
presence of ?complex?
manners (e. g. very slowly), by complex we mean79either a manner which is inherently difficult to realize or a mannerreinforced by an adverb of intensity,?
technical complexity of the verb or the verb compound used: if mostinstructions include a verb which is quite simple, some exhibit quitetechnical verbs, metaphorical uses, or verbs applied to unexpectedsituations, for which an elaboration is needed.
This is for examplerelatively frequent in cooking (with specialised verbs like ?re?server?which have a different meaning than the standard one), or in do-it-yourself texts written by technicians of the domain.?
duration of execution as specified in the instruction (the longer themore difficult),?
synchronization between actions, in particular in instructional com-pounds,?
uncommon tools, or uncommon uses of basic tools (open the box witha sharp knife),?
presence of evaluation statements or resulting states, for example toindicate the termination of the action (as soon as the sauce turns brownadd flour).At the moment, we have lists of a priori complex verbs and manners for eachdomain collected from our development corpus.
The task is to organize theseterms by increasing complexity, via the design of adequate scales.
Mannersare relatively limited and have been ordered manually quite easily.
For largergroups of terms, we can also simply form groups of terms classified accordingto complexity, without introducing scales and accurate order analysis.Obviously, these observations allow us to introduce a very preliminarymeasure of complexity, since more empirical measures need to be realized.To be able to have an indicative evaluation, each of the points above countsfor 1, independently of its importance or strength in the text.
Complexity ctherefore ranges from 0 to 6.
The complexity rate diof instruction i is c/6to keep it in the [0,1] range.It is important to note that the higher the difficulty diis, the morerisky the instruction is in terms of failure.
Since it is not in general easyto decompose a difficult action into several simpler ones, a strategy to limitrisks is to enrich a difficult instruction as much as possible so that all thedetails are given: this can be measured by the expliciteness criteria.803.5 Measuring the expliciteness rate t of an instructionExpliciteness characterizes the degree of accuracy of an instruction.
Severalmarks, independently of the domain, contribute to making more explicit aninstruction:?
when appropriate: existence of means or instruments,?
pronominal references as minimal as possible, and predicate argumentconstructions as comprehensive as possible,?
length of action explicit when appropriate (stir during 10 minutes),?
list of items to consider as explicit and low level as possible (mix theflour with the sugar, eggs and oil),?
presence of an argument, advice or warning,?
presence of some help elements like images, diagrams, or elaborations,variants, etc.Those criteria may be dependent on the domain, for example length ofan action is very relevant in cooking, somewhat in do-it-yourself, and muchless in the society domain.
Similarly as for d, each item counts for 1 at themoment, expliciteness e therefore ranges from 0 to 6.
The expliciteness rateis ti= e/6 to keep it in the [0,1] range.Note also that the higher tiis, the more chances the instruction has tosucceed since it is very explicit and has a lot of details.Now, if we consider the product di?
(1?
ti), the more it tends towards1, the higher the risk is for the action to fail.
Therefore, when diis high, itis also necessary that tiis high to compensate the difficulty.
Given that diremains unchanged (if the instruction cannot be simplified), the strategy isthen to increase tias much as possible.4 Enhancing expliciteness: towards procedure in-tegrationAn approach to enhancing t is to add information to those instructions whichare judged difficult, wherever possible.
This technique is called documentintegration.
It consists in considering a ?reference?
document that is gradu-ally enriched from information contained in other closely related documents(i.e.
procedures with the same goal).
A difficulty is to keep the coherence81and cohesion of the document.
Information may be added gradually, by in-struction or by theme (e.g.
instrument, duration), over the whole proceduredepending e.g.
on the user?s needs or requirements.Integrating information into an already existing document is a very diffi-cult task.
The work presented here is essentially a feasability study, appliedto a very restricted type of text: procedural texts, where the text can besegmented into small items (instructions), which have a quite homogeneousand simple style.
This allows us to evaluate feasability, difficulties, needsand to propose some elements of a method.
We view document integra-tion as a kind of inference mechanism that includes several aspects, amongwhich:?
evaluation of the relevance of adding or revising a certain type ofinformation, w.r.t.
expliciteness requirements, e.g.
based on Grice?smaxims,?
maintenance of the coherence of the text, while keeping integration amonotonic process.Besides being basically a monotonic process, integration is also modularsince it can operate by themes, possibly following different strategies.Two main types of structures may be integrated: (1) additional infor-mation within an instruction or (2) additional instructions between two in-structions.
We will concentrate here on the first, which is probably the lesscomplex.
By adding information, we mean in particular adding a role notspecified so far (e.g.
instrument, duration) or updating an already existingdata (e.g.
cheese + mozarella ?
?cheese, e.g.
mozarella?, the symbol ?+?being in this paper the integration operator).In this section, we focus on texts which are prototypically proceduralsuch as cooking receipes, do-it-yourself, gardening, etc... We propose somecriteria to select a reference procedure among a choice of procedures relatedto the same goal.
Then we propose criteria to align instructions judged to beclosely related, based on a semantic tagging of instructions.
We propose asimple form of similarity ranking and, finally, show how information can beintegrated into the reference document, generating well-formed instructions.4.1 A task-oriented tagging of instruction contentsLet us first introduce the tags we consider, inspired from thematic roles, butwhich may apply to a variety of syntactic constructs, besides NPs and PPs,such as adverbs or adjectives.
These roles are basically action-oriented, they82form the prototypical pattern one may associate with an instruction.
Wedefined them from thematic roles and stabilized their definition and scopefrom a number observations over manual annotations.
We have the followingmain roles: Themes: are basically ingredients, tools or objects on which anaction is realized (preheat the oven) or shapes (form a ball of dough).
Theycan also be persons in the social relation domain.Manner: indicates how the action is carried out, it does not modify thetheme, but indicates the way the instruction must be realized (serrez lapoigne d?un demi tour., turn the handle of half a tour).Means: identifies the entity via which the action is realized, this entity is ingeneral an element that interacts with the theme in some way, e.g.
to forma whole with it (arroser les endives avec jus, put sauce on the endives).Instrument: the object used to realize an action, controlled by the agent,and that participates at various degrees to the sucess of the action.Goal: refers to the abstract or concrete objective towards which the actionis directed.Result: refers to the expression that characterizes the consequence of theaction (make notes of your expenses to be able to evaluate how much youspend over a week).Condition: expression that indicates the constraints under which the actioncan be realized or should be considered.Localization: source, fixed or destination applied to time or space, possiblyto abstract entities.We also observed a number of rhetorical relations within the instruction(or instructional compound), but this is not dealt with at the moment.
Forexample, we will not integrate advices or elaborations.In terms of parsing and tagging, we use the last version of Cordial(http://www.synapse-fr.com/correcteur orthographe grammaire.htm), thatproduces a parse which is appropriate for our needs: constituents are cor-rectly identified and are paired with semantic annotations that we use toassign roles, in conjunction with the lexicon of the predicates of the domainthat indicates the roles of arguments with their semantic type.
Adjuncts arelabelled on the basis of the preposition that introduces them (via our Prep-Net database) and the semantic type given by Cordial.
For cooking receipeand gardening texts the accuracy is at the moment about 72% which is amoderately good result.
Most errors come from incorrect style in the proce-dure, and lack of domain specific descriptions for prepositions introducingadjuncts.834.2 Selection of the reference textThere are different strategies for selecting the text, called the reference text(noted as R), that will be enriched from other procedural texts dealing withthe same procedure.
We assume at this stage that we have texts dealingexactly with the same procedure, possibly with minor variants.
The textwith the largest number of instructions is selected as the reference.
The ideabehind is that it is probably the most detailed one (but the correlation isnot absolute), and therefore also the simplest one since, for a given task, itsdecomposition level into instructions is probably the highest.
When we haveseveral procedures with approximately the same number of instructions, thedecision may be more difficult to make.
Two criteria are considered: thequality of the typography, which is an important feature for users, andsecondly, the origin (profesionnal site prefered to a blog).4.3 Aligning instructionsGiven a reference text (noted as R) and another procedure (noted as E)used to enrich the former, the first challenge is to align instructions dealingexactly with the same action.
This is not necessarily a one to one relation:several instructions in E may correspond to a single one in R or vice versa.Next, instructions in the two texts may be organized differently: we observedslightly different temporal organizations (in particular for minor operations,e.g.
: add salt and pepper which may appear at several places).Let us concentrate here on simple situations where two instructions arecomparable.
Our starting point are instructions tagged as indicated above.Let AR,ibe such an instruction in R and AE,jsuch an instruction from E.The procedure is roughly the following:(1) aligning verbs: a first parameter, VA, encodes the alignement qualityof the main verb of the two instructions.
The situations are the following:(1) identical, (2) quasi-synonym, as stated in our domain verb ontology,(3) related via lexical inference (arroser (Theme: la garniture) (manner:de sauce) versus verser (theme: la sauce) (fixed-position: sur la garniture),gloss: baste/pour sauce on the garnish), (4) support construction synonymof the other construction (mettre un torchon sur / couvrir, put a dish towelon /cover), and (5) different.
A mark is associated with each of these levels,tentatively 4 for (1), 2 for (2) to (4) which are of a similar complexity and0 for (5).
(2) aligning and comparing arguments: arguments tagged by the samerole (or those shown to be identical via lexical inference) are considered.84The objects included into those common roles must be closely related: thisis evaluated via a conceptual metrics (that basically considers sisters andimmediate ancestors at this stage) applied on the domain ontology, cookingin our experiment.
Success or failure is measured via a second parameter AA.Furthemore, roles are distributed into 3 categories, the first one having thehighest weight.
For the cooking domain, we have: (1) theme and temporallocalizations (duration or position), (2) spatial localization (fixed, source,destination), (3) means, instrument.
The other roles are quite difficult tocompare in the cooking domain and are so far kept in level 3.For each tagged role which is comparable, a mark is given that takes intoaccount the level of the tag (1 to 3 above).
The mark we get per alignedargument (k) in instructions AR,i(the instruction from the referent text)and AE,j(the one from the enriching text) is:mk= f(AR,i,k, AE,j,k)where f(AR,i,k, AE,j,k) is the metrics that assigns a similarity measure forthe argument k, as indicated above.
The global rate associated with narguments successfully aligned between the two instructions is:MAi=?ni=1?i?miwhere ?
is the weight that corresponds to the three categories of roles givenin the paragraph above.
The global alignement rate is then:rate(AR,i, AE,j) = ??
V Ai+ ?
?MAi/n.where ?
and ?
encode respectively the relative importance of verbs andthe arguments in the alignment.
These parameters need to be adjustedexperimentally.
At the moment, they are both equal to 1, meaning thatthe verb and the arguments in total have the same weight in the alignmentrate.
As can be noted, we do not take into account at this level the possiblenegative effects of arguments not aligned, since they may contain, in fact,useful information to add to the reference text.All the instructions in R and E that can potentially align are compared,independently of the temporal relations in the texts.
As a result a matrixcontaining all the alignement rates is produced.
For each instruction in R,the best rate, if it is above a certain minimal threshold, is considered andthe corresponding instruction in E is considered for information integration.In the case where there are several instructions in E which can be alignedwith an instruction in R, then two factors are considered, in the followingpriority order:- whether these instructions also have good alignement rates with otherinstructions in R, in which case, they may be selected for alignement withone of these other instructions,- whether they temporally coincide in the sequence of instructions in R and85E.
It should however be noted that, although procedural texts have a strong,but simple, temporal structure, we observed many permutations which makethis criteria less strong than it could have been.At this stage, it is quite difficult to evaluate the accuracy of the aligne-ment strategy since we do not cover all the cases, which may entail er-rors.
However, considering just the cases where we have a one-to-one aligne-ment strategy, over cooking and gardening domains, tested on 14 reference-enriching pairs of texts (with an average of 18 instructions for referencetexts), we get a recall of about 74% for a precision of about 90%.
Thoseresults are quite encouraging, but we need to analyze the reasons of errors.We observed more complex cases where alignement must be realized onthe basis of patterns, i.e.
groups of instructions (possibly discontinuous) andnot single, isolated instructions.
This is in particular the case with iterativestructures (stir again for one minute) which are repeated with variants.
Wehave not explored these situations, but it is clear that the detection of suchpatterns is an important aspect.4.4 Integrating informationGiven two aligned instructions, the next step is to add information to thereference document instruction AR.
The verb in ARis kept, while the infor-mation which is added is basically the tagged elements, which are argumentsor adjuncts.
All the tagged elements in the enriching document instruction(AE) are considered, even if ARalready has an element based on the sametag.
Let us define an integration operator, noted as ?+?, composed of a leftcontext element, fragment of AR, and a right context, fragment of AE.
Theresult is an enriched instruction.
This operation is monotonic: the amountof information resulting from one or more applications of information inte-gration is always increasing.Adding information follows a strategy with two main aspects:(1) parameterized adjunction: of missing elements (tags not present inAR), according to two parameters:- information explicity requested by the user (if this possibility is offered),such as instruments,- information a priori essential to a domain: for example adding tools,manners and durations is important in cooking to make instructions moreexplicit, and therefore less difficult to realize.
Duration may be less relevantin do-it yourself texts.
(2) integrating already existing information: in AR, where the threefollowing points are treated so far:86- disjunctive knowledge integration: add (soya milk + rice milk) ?
add soyaor rice milk.- exemplification: add (cheese + mozarella) ?
add cheese, for examplemozarella.- blocking ill-formed configurations: for example, in the case of incorpora-tion: (butter the bread + with butter ?
butter the bread) ?with butter?
isnot included because the noun butter is already incorporated into the verb.Let us now consider the surface realization of the resulting enriched in-struction.
For the first aspect above, this process starts from the taggedelements so that a correct linguistic realization can be produced.
We do notjust copy and paste the additional information to AR, but, based on theannotated elements, we introduce insertion rules, that indicate where theinformation must be inserted into the proposition.
For example, [stir man-ner: gently duration: for 4 minutes] + [theme: the sauce] must be realizedas:[stir manner: gently theme: the sauce duration: for 4 minutes]where the theme is inserted between the manner and the duration.
Theresulting instruction is then:Stir gently the sauce during 4 minutes.This is realized by an insertion rule that says:Verb (manner:X duration:Y) + (theme:Z) ?
Verb manner:X theme:Z du-ration:Y.From the needs in terms of integration and from the observation of thestructure of instructions, we have defined at the moment 19 insertion rules.These are now being generalized so that more generic situations can becaptured.
In particular, we rephrased these rules in terms well-formednessconditions essentially based on thematic linear precedence, a widely usedapproach in language generation:instrument < duration, meaning that any instrument always precedes a du-ration expression.
Similarly, we have:theme < instrument, duration, localization.In this approach, we keep the ?base?
form used in most instructions sincethere is almost never any syntactic alternation.
These precedence specifica-tions are very close to thematic role hierarchies, except that we deal herealso with a number of adjuncts (goals, manners, etc.)
that may occupy alarge number of positions in the instruction.
These adjuncts are howeversubject to constraints, e.g.
:goal, condition < manner, means, result.Finally, we apply the ?heavy-NP shift?
movement when the argument is large,for example a long theme will be moved at the end of the instruction.87At the visualization level, integrated information is underlined so thatthe user knows that it has been imported, and may consider it with somecare or may get the original enriching instruction.5 ConclusionIn this paper, we have presented a model for the structure of procedural textsbased on Action Theory, where the success of a goal is evaluated via severalparameters.
We have in particular investigated the notions of complexityand expliciteness of a procedure, and proposed an approach to improve thesuccess rate of a procedure via the integration of additional knowledge fromother procedures into a reference procedure.
This latter point has entailedthe introduction of a semantic tagging, task-oriented, of instructions, thedevelopment of an alignment strategy and a simple language realizationstrategy.Obviously what we propose here is basically exploratory, to evaluatecomplexity and feasability.
Document integration is a very hard task.
Al-thought restricting ourselves to very prototypical procedural texts does helpto propose solutions, it is clear that this work needs a lots of adjustmentsand testing.Acknowledgements This work was supported by the French ANR re-search programme, under the TextCoop project.References[1] Adam, J.M., Types de Textes ou genres de Discours?
Comment Classer lesTextes qui Disent De et Comment Faire, Langages, 141, pp.
10-27, 2001.
[2] Amgoud, L., Bonnefon, J.F., Prade, H., An Argumentation-based Approach toMultiple Criteria Decision, in 8th European Conf.
on Symbolic and QuantitativeApproaches to Reasoning with Uncertainty, ECSQARU?2005, Barcelona.
[3] Amgoud, L., Parsons, S., Maudet, N., Arguments, Dialogue, and Negotiation,in: 14th European Conference on Artificial Intelligence, Berlin, 2001.
[4] Anscombre, J.-Cl.
Ducrot, O., Interrogation et Argumentation, in Langue fran-caise, no 52, L?interrogation, 5 - 22, 1981.
[5] Aouladomar, F., Towards Answering Procedural Questions.
Dans : KRAQ?05- IJCAI workshop, Edinburgh, F. Benamara, P. Saint-Dizier (Eds.
), p. 24-36,juillet 2005.
[6] Davidson, D., Essays on Actions and Events, Oxford: Oxford University Press,1980.88[7] Delin, J., Hartley, A., Paris, C., Scott, D., Vander Linden, K., Expressing Pro-cedural Relationships in Multilingual Instructions, Proc.
7th Int.
Workshop onNatural Language Generation, USA, 1994.
[8] Delpech, E., Saint-Dizier, P., A Two-Level Strategy for Parsing ProceduralTexts, proc.
VSST07, Marrackech, 2007.
[9] Delpech, E., Saint-Dizier, P., Investigating the Structure of Procedural Textsfor Answering How-to Questions, LREC 2008, Marrakech.
[10] Fontan, L., Saint-Dizier, P., Analyzing the explanation structure of proceduraltexts: dealing with Advices and Warnings, STEP, semantics in text processing,College publications, J. Bos and R. delmonte (edts), 2008.
[11] Moschler, J., Argumentation et Conversation, Ele?ments pour une AnalysePragmatique du Discours, Hatier - Cre?dif, 1985.
[12] Takechi, M., Tokunaga, T., Matsumoto, Y., Tanaka, H., Feature Selectionin Categorizing Procedural Expressions, 6th Int?l Workshop on Information Re-trieval with Asian Languages (IRAL2003), pp.49-56, 2003.89
