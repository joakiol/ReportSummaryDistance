Generating an LTAGout of a principle-based hierarchical representationMarie-H~l~ne CanditoTALANA and UFRL ,  Universit6 Paris 72, place Jussieu, Tour  centrale 8~me 6tage piece 80175251 Paris cedex  05 FRANCEmarie-helene.candito @ linguist.jussieu.frAbstractLexicalized Tree Adjoining Grammars haveproved useful for NLP.
However, numerousredundancy problems face LTAGs developers, ashighlighted by Vijay-Shanker and Schabes (92).We present and a tool that automaticallygenerates the tree families of an LTAG.
It startsfrom a compact hierarchical organization ofsyntactic descriptions that is linguisticallymotivated and carries out all the relevantcombinations of linguistic phenomena.1 Lexicalized TAGsLexicalized Tree Adjoining Grammar (LTAG) is aformalism integrating lexicon and grammar (Joshi, 87;Schabes et al, 88), which has proved useful for NLP.Linguists have developed over the years sizeable LTAGgrammars, especially for English (XTAG group, 95) andFrench (Abeill6, 91).In this formalism, the lexical items are associatedwith elementary trees representing their maximalprojection.
Features tructures are associated with thetrees, that are combined with substitution andadjunction.
Adjunction allows the extended omain oflocality of the formalism : all trees anchored by apredicate contain odes for all its arguments.Such a lexicalized formalism needs a practicalorganization.
LTAGs consist of a morphologicallexicon, a syntactic lexicon of lemmas and a set of treeschemata, i.e.
trees in which the lexical anchor ismissing.
In the syntactic lexicon, lemrnas elect he treeschemata they can anchor 1.The set of tree schemata forms the syntactic part ofthe grammar.
The tree schemata selected by predicativeitems are grouped into families, and collectivelyselected.
A tree family contains the different possibletrees for a given canonical subcategorization.
Alongwith the "canonical" trees, a family contains the onesthat would be transformationally related in a movement-base approach.
These are first the trees where a"redistribution" of the syntactic function of thearguments has occurred, for instance the passive trees, or1At grammar use, the words of the sentence to be parsed areassociated with the relevant tree schemata to form completelexicalized trees.middle (for French) or dative shift (for English), leadingto an "actual subcategorization" different from thecanonical one.
Secondly, a family may contain the treeswith extracted argument (or cliticized in French).In the syntactic lexicon, a particular lemma mayselect a family only partially.
For instance a lemmamight select he transitive family, ruling out the passivetrees.
On the other hand, the features appearing in thetree schemata re common to every lemma selectingthese trees.
The idiosyncratic features (attached to theanchor or upper in the tree) are introduced in thesyntactic lexicon.2 Deve lopment  and maintenanceproblems with LTAGsThis extreme lexicalization entails that a sizeableLTAG comprises hundreds of elementary trees (over 600for the cited large grammars).
And as highlighted byVijay-Shanker and Schabes (92), information onsyntactic structures and associated features equations irepeated indozens of tree schemata (hundreds for subject-verb agreement for instance).Redundancy makes the tasks of LTAG writing,extending or updating very difficult, especially becauseall combinations of phenomena must be handled.
And,in addition to the practical problem of grammar storage,redundancy makes it hard to get a clear vision of thetheoretical nd practical choices on which the grammaris based.3 Existing solutionsA few solutions have been proposed for theproblems described above.
They use two main devicesfor lexicon representation : inheritance networks andlexical rules.
But for LTAG representation, i heritancenetworks have to include phrase-structure informationalso, and lexical rules become "lexico-syntactic rules".Vijay-Shanker and Schabes, (92) have first proposed ascheme for LTAG representation.
Implemented work isalso described in (Becker, 93; 95) and (Evans et al, 95).The three cited solutions give an efficientrepresentation (without redundancy) of an LTAG, buthave in our opinion two major deficiencies.
First thesesolutions use inheritance networks and lexical rules in apurely technical way.
They give no principle about heform of the hierarchy or the lexical rules, whereas we342believe that addressing the practical problem ofredundancy should give the opportunity of formalizingthe well-formedness of elementary trees and of treefamilies.
And second, the generative aspect of thesesolutions is not developed.
Certainly the lexical rulesare proposed as a tool for generation of new schemata ornew classes in a inheritance network.
But the automatictriggering, ordering and bounding of the lexical rules isnot discussed 2.4 Proposed solution : a principle-basedrepresentation and a generation systemWe propose a system for the writing and/or theupdating of an LTAG.
It comprises a principled andhierarchical representation f lexico-syntactic structures.Using this hierarchy and principles of well-formedness,the tool carries out automatically the relevant crossingsof linguistic phenomena togenerate the tree families.This solution not only addresses the problem ofredundancy but also gives a more principle-basedrepresentation f an LTAG.
The implementation f theprinciples gives a real generative power to the tool.Due to a lack of space we cannot develop all theaspects of this work 3.
After a brief description of theorganization of the syntactic hierarchy, we will focus onthe use of partial descriptions of trees.4.1 Organization of the hierarchyThe proposed organization of the hierarchy followsfrom the linguistic principles of well-formedness ofelementary TAG trees, mainly the predicate-argumentsco-occurrence principle (Kroch and Joshi, 85; Abeillt,91) : the trees for a predicative item contain positionsfor all its arguments.But for a given predicate, we expect he canonicalarguments to remain constant hrough redistribution offunctions.
The canonical subject (argument 0) in apassive construction, even when unexpressed, is still anargument of the predicate.
So the principle should be aprinciple of predicate-functions co-occurrence : the treesfor a predicative item contain positions for all thefunctions of its actual subcategorization.This reformulated principle presupposes thedefinition of an actual subcategorization, given thecanonical subcategorization of a predicate.
Thispresupposition a d the predicate-functions co-occurrenceprinciple are fulfilled by organizing the hierarchy alongthe three following dimensions :dimension 1 : canonical subcategorization frameThis dimension defines the types of canonicalsubcategorization.
Its classes contain information on thearguments of a predicate, their index, their possiblecategories and their canonical syntactic function.2Becket (93) gives a linguistic principle for the bounding of hismeta-rules, but has no solution for the application fthis principle.3A fuller description of the work can be found in (Candito, toappear)dimension 2 : redistribution of syntactic functionsThis dimension defines the types of redistribution offunctions (including the case of no redistribution at all).The association of a canonical subcategorization frameand a compatible redistribution gives an actualsubcategorization, namely a list of argument-functionpairs, that have to be locally realized.dimension 3 ?
syntactic realizations of functionsIt expresses the way the different syntactic functions arepositioned at the phrase-structure level (in canonical,cliticized, extracted position...).These three dimensions constitute the core hierarchy.Out of this syntactic database and following principlesof well-forrnedness the generator creates elementarytrees.
This is a two-steps process : it first creates ometerminal classes with inherited properties only - they aretotally defined by their list of super-classes.
Then ittranslates these terminal classes into the relevantelementary tree schemata, in the XTAG 4 format, so thatthey can be used for parsing.Tree schemata generation respects the predicate-functions co-occurrence principle.
Their correspondingterminal classes are created first by associating acanonical subcat (dimension 1) with a compatibleredistribution, including the case of no redistribution(dimension 2).
Then for each function defined in theactual subcat, exactly one realization of function ispicked up in dimension 3.The generation is made family by family.
This issimply achieved by fixing the canonical subcat frame(dimension 1), At the development s age, generation canalso be done following other criterions.
For instance, allpassive trees or all trees with extracted complements canbe generated.4.2 Formal choices : monotonic inheritancenetwork and partial descriptions of treesThe generation process described above is quitepowerful in the context of LTAGs, because it carries outautomatically all the relevant crossings of linguisticphenomena.
These crossings are precisely the majorsource of redundancy in LTAGs.
Because of thisgenerative device, we do not need to introduce lexico-syntactic rules, and thus we do not have to face theproblems of ordering and bounding their application.Further, as was mentioned in section 1, lexicalidiosyncrasies are handled in the syntactic lexicon, andnot in the set of tree schemata.
So to representhierarchically this set, we do not think thatnonmonotonicity is linguistically justified.
We havethus chosen monotonicity, which gives moretransparency and improves declarativity.
We follow here4XTAG (Paroubek etal., 92) is a tool for writing and using LTAGs,including among other things atree editor and a syntactic parser.343Vijay-Shanker and Schabes (92) and use partialdescriptions of trees (Rogers and Vijay-Shanker, 94) 5.A partial description is a set of constraints thatcharacterizes a set of trees.
Adding information to thedescription reduces monotonically the set of satisfyingtrees.
The partial descriptions of Rogers and Vijay-Shanker (94) use three relations : left-of, parent anddominance (represented with a dashed line).
A dominancelink can be further specified as a path of  length superioror equal to zero.
These links are obviously useful tounderspecify a relation between two nodes at a generallevel, that will be specified at an either lower or laterallevel.
Figure 1 shows a partial description representing asentence with a nominal subject in canonical position,giving no other information about possible othercomplements.
The underspecified link between the S andV nodes allows for either presence or absence of acliticized complement on the verb.
In the case of aclitic, the path between the S and V nodes can bespecified with the description of figure 2.
Then, if wehave the information that the nodes labelled respectivelyS and V of figures 1 and 2 are the same, the conjunctionof the two descriptions is equivalent to the descriptionof figure 3.$s I. .
Vr-.
/ \N V0 CI V0Figure 1 Figure 2$N Vra / \oFigure 3This example shows the declarativity obtained withpartial descriptions that use large dominance links.
Theinheritance of  descriptions of  figure 1 and 2 is orderindependent.
Without large dominance links, an order ofinheritance of  the classes describing a subject incanonical position and a cliticized complement shouldbe predefined.In the hierarchy of syntactic descriptions we propose,the partial description associated with a class is theunification of the own description of the class with allinherited partial descriptions.
Identity of nodes is statedin our system by "naming" both nodes in the same way,since in descriptions of  trees, nodes are referred to byconstants.
Two nodes, in two conjunct descriptions,referred to by the same constant are the same node.Equality of nodes can also be inferred, mainly using thefact that a tree node has only one direct parent node.We have added atomic features associated with eachconstant, such as category, index, canonical syntacticfunction and actual syntactic function.
In theconjunction of two descriptions, the identification oftwo nodes known to be the same requires the unification5Vijay-Shanker & Schabes (92) have used the partial descriptionsintroduced in (Rogers & Vijay-Shanker, 92), but we have used themore recent version of (Rogers & Vijay-Shanker, 94).
Thedifference lies principally in the definition of quasi-trees, first seenas partial models of trees and later as distinguished sets ofconstraints.of  such features.
In case of  failure, the wholeconjunction leads to an unsatisfiable description.A terminal class is translated into its correspondingelementary tree(s) by taking the minimal satisfyingtree(s) of the partial description of the class 6.4 .3 App l i ca t ion  to the  F rench  LTAGThe tool was used to generate tree families of theFrench grammar, using a hand-written hierarchy ofsyntactic descriptions.
This task is facilitated by theguidelines given on the form of the hierarchy.
Out ofabout 90 hand-written classes, the tool generates 730trees for the 17 families for verbs without sententialcomplements 7, 400 of which were present in the pre-existing grammar.
We have added phenomena such assome causative construct ions or free order ofcomplements.The proposed type of  hierarchy is meant to beuniversal, and we are currently working on itsapplication to Italian.5 ReferencesA.
Abeill~.
1991.
Une grammaire lexicaliste d'ArbresAdjoints pour le fran~ais, PhD thesis, Univ.
Paris 7.T.
Becker.
1993.
HyTAG : a new type of Tree AdjoiningGrammars for Hybrid Syntactic Representation of FreeOrder Languages, PhD thesis, Univ.
of Saarbriicken.T.
Becker.
1994.
Patterns in Metarules.
Proc.
of TAG+3.M-H. Candito.
To appear.
A principle-based hierarchicalrepresentation of LTAGs.
Proc.
of COLING'96,Copenhagen.R.
Evans, G. Gazdar and D. Weir.
1995.
EncodingLexicalized Tree Adjoining Grammar with a NonmonotonicInheritance Hierarchy.
Proc.
of ACL'95, Boston.A.
Joshi.
1987.
Introduction to Tree Adjoining Grammar,in A. Manaster Ramer (ed), The Mathematics of Language,J.
Benjamins, pp.
87-114.A.
Kroch and A. Joshi.
1985.
The linguistic relevance ofTree Adjoining Grammars.
Technical report, Univ.
ofPennsylvania.P.
Paroubek, Y. Schabes and A. Joshi.
1992.
XTAG - Agraphical Workbench for developing Tree AdjoiningGrammars.
Proc.
of 3-ANLP, Trento.J.
Rogers and K. Vijay-Shanker.
1992.
Reasoning withdescriptions of trees.
Proc.
ACL'92, pp.
72-80.J.
Rogers and K. Vijay-Shanker.
1994.
Obtaining treesfrom their descriptions : an application to Tree-AdjoiningGrammars.
Computational Intelligence, vol.
10, N ?
4.Y.
Schabes, A. Abeill6 and A. Joshi.
1988.
Parsingstrategies with lexicalized grammars : Tree AdjoiningGrammars.
Proc.
of COLING'88, Budapest, vol.
2.K.
Vijay-Shanker and Y. Schabes.
1992.
Structure Sharingin Lexicalized Tree Adjoining Grammar.
Proc, ofCOLING'92, Nantes, pp.
205-211.XTAG research group.
1995.
A lexicalized TAG for English,Technical Report IRCS 95-03, Univ.
of Pennsylvania.6 Intuitively the remaining underspecified links are taken to be pathof minimal length.
See Rogers and Vijay-Shanker (94).7 By the time of conference, we will be able to give figures for thefamilies with sentential complements al o.344
