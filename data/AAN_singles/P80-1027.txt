Parsing in the Ahsmmee ofa Comldete LexiconJim Davidson and S. Jerrold KaplanComputer Science Departmen~ Stanford UniversityStanfor~ CA 94305I.
IntroductionIt is impractical for natural anguage parsers which serve as front ends tolarge or changing databases to maintain a complete in-core lexicon ofwords and meanings.
This note discusses a practical approach to usingalternative sources of lexical knowledge by postponing word categorizationdecisions until the parse is complete, and resolving remaining lexicalanthiguities usiug a variety of informatkm available at that time.il.
The ProblemA natutal language parser working with a database query system (c.g~PLANES \[Waltz et al 1976\], LADDER \[Hcndrix, 1977\], ROBOT \[Harris,1977\], CO-OP \[Kaplan, 19791) encounters lexical diflicultics not present insimpler applications.
In pprticular, the description of the domain ofdiscourse may be quite large (millions of words), and varies as theunderlying database changes.
This precludes reliance upon an explicit,fixed ,'exicote-a dictionary which records all the terms known to thesystem--because of:ta) redundv.cy: Kccpmg the same intbrmation in two places (the lexiconand the database) lcads to problcms of integrity.
Updating is moredifficult if it must occur simultaneously in two places.
(h) size: A database of, say, 30.000 cntries cannot hc duplicated inprimary memory.For example, it may hc impractical fi)r a systcm dcaling with a databaseof ships to store the names of all the ships in a separate it-core Icxicun.
Ifnot all allowable Icxical entries are explicitly encoded, |here will be tcrmsencountered by the parser about which nnthing is known.
The problem isto assign these terms to a particular class, in the absence of a specificlexical entry.Thus.
given the scntcnco, "Where is the Fox docked?
", the parser wouldhave to decide, in the absence of any prior informatiou about "Fox", thatit was the name of a ship, and nuL say, a port.IlL.
Previous approachesTh.ere are several methods by which unknown tenns can bc immediatelyassigned to a category: the parser can chock tire database to scc if theunknown term is there (as iu \[Harris, 1977\]); the user may beintcractivcly queried (in the style of RFNDEYOUS \[Codd ct al.. 1978\]);the parser might siutolv make an assumption based on the immcdiat~context, and proceed (as in \[Kaplan, 1979\]).
(We call theseextended-lexicon methods.)
However, these methods have the aaso?iatedcosts of time, inconvenience, and inaccuracy, and so constitute imperfectsolutions.Note in particular that simply using the database itself as a lexicon willnot work in the general case.
If the database is not fully indexed, thetime required to search various fields to identify an unknown lexical itemwill tend to be prohibitive, if this requires multiple disk accesses.
Inaddition, as noted in \[Kaplan, Mays` and Josh\[ 1979\].
the query mayreasonably contain unknown terms that are not in the database ("Is JohnSmith an employee?"
should be answerable even if "John Smith" is not inthe database).IV.
An Approach--Delay the Decision, then Compare ClassificationMethodsOur approach is to defer any Icxical decision as long as possible, and thento apply the extended-lexicon methods identified above, in order ofiucrcasing COSLSpecifically, all possible parses are colloctcd` using a semantic grammar(see below), by allowing the unknown term to satisfy any categoryrequired to complete the par~e.
The result is a list of categnri~ forunknown terms, each of which is syntactically valid as a classification for'Jln item.
Consequcotly, interpretations thar do not result in completeparscs are eliminated.
Since a semantic grammar tightly restricts the classof allowable sentences, this technique can substantially rcduce rilecomplexity of the remaining disambiguation process.The category assignments leading to successful parses are then ordered bya procedure which estimates the cost of chocking them.
This orderingcurrently assumcs an undcrlying cost model in which aec~sing thedatabase on indexcd or hashed ficlds is the least expensive, a singleremaining interpretation warrants an assumption of corrccmcss, aud lasdy,remaining ambiguities are resolved by asking the user.A disambigu.
',.ted lexical item is added temporarily to the in-core lexicon,so that future qucrics involving that term will not require repetition of thedisambiguation process.
After the item has not been rcferenccd for someperiod of time (dctcrmincd empirically) the term is droppcd from thelexicon.Y.
ExampleThis approach has been implemented in the parser for the Knowlcdgcllasc Management Systems (KBMS) project tcstbcd` \[Wicdcthold, 1978\](11)e KBMS pr,3ject is conccrned wig) the application of artificialintelligence techniques to the design and use of database systems.
Amongother comoonents, it contains a natural language front end fi)r aCODASYL databa.s?
in the merchant shipping domain.
)The KBMS parser is implementcd using the LIFER package, a semanticgrommar based system designed at SRI \[Hendrix, 1977\].
Semanticgrammars have the property that the metasymbols correspond to objectsand actions in thc domain, rather than to abstract grammatical concepts.For example, the KBMS parser has classes called SHIPS and PORTS.The KBMS pa~r  starts with a moderate-size in-core lexicon (400words); however, none of the larger database categories (SHIPS.
PORTS,SItlPCLASSES.
CARGOES) art stored in the in-core lexicon.Following is a tran~ript from a run of the KBMS parser.
Thc input tothe pa~er is in italics: annotations are in braces.,.is izmir in italy?
{"Italy" is known, from the in-core lexicon, to be acountry.
"|zmir" is unknown.})
UNKNOWN TERM IZMIR) POSSIBLE CATEGORII~: SIIIPS.
PORTS.
CARGOES{At the point where the word |ZMIR is encountered, any category whichadmits a name is possible.
These include ships, ports, and cargoes.})
FIN1SIIING PARSE) POSSIBI.E CATEGORY FOR IZMIR, LEADING TO VALID PARSE: SHIPS.
PORTS{When the parse is complete, the category "cargoes" has been eliminated,since it did not lead to a valid parse.
So, the remaining two categories areconsidered.
}>" CHECKING SHIPS FILE IN DATABASE) IZM\[R NOT THERE) ASSUME TI\[AT IZMIR IS A PORT.
{Of the two remaining categories, SHIPS is indexed in the database byname while PoR'rs is not and would theretbre be very expensive to check.So, the SIIII~.
file iS examined first Since |TJVllR is not in the database as ashipname, only PORTS remains.
At this point, the parser assumes thatIZMIR is a port since this is the only remaining plausible interpretation.This assumption will be presented to d~e user, and will ultiw,=tely beverified in the database query.
}105) FINAl.
QUERY:> \[:u,' the PORTS with PUl'tnall|e etlual tO 'IZMIR'.> is the Portcountry equal to "1"1"?A simple English generation system (written by l'qlrl Saeerdoti).
illustratedabove, has been used :o provide the user with a simplified naturallanguage paraphrase of the qnery.
Thus, invalid assumptions orinterpretations tade by tile parser are easily detected.
In a normal run,the inlbmlation about lexical prtx:essing would not bc printed.In the cxanlplc above, the unknown term happencd to consist of a singleword.
In the gcncral ease.
of course, it could be scvcral words long (as isoften thc case with the names of ships or pcnple).Items recognized by cxtendcd-lcxicon methods are added to the in-corelexicon, for a period of time.
Thc time at which thcy are droppcd fromthe in-.core lexicon is dctermincd by considcration of the time of lastreference, and comp.
'~rison of thc (known) cost of recognizing thc itemsagain with the eest in space of keeping them in core.VIii.
Applications of this MethodThe method of delaying a categorization decision until the parse iscompleted has some possible extensions.
At tile time a check is made ofthe database for classification purposes, it is known which query will bereturacd if the lookup is successRil.
For simple queries, therefore, it ispossible not only to verify the classification of the unknown term.
but alsoto fetch the answer to the query during the check of the database.
Forexamplc, with the query "What cargo is the Fox carrying.
~'.
the systemcould retrieve the answer at the samc time that it verified that thc "Fox"is a ship.
Thus, the phases of parsing and qucry-prncessing can becombined.
This 'pro-fetching' is possible only because the classificationdecision has been postponcd undl thc parse is complete.Thc technique of collecting all parses before attempting verification canalso provide thc user with information.
Since all possible categories forthe unknown term have been considered, the user v.ill have a better idea.in the event that the parse cventually fails, whether an additional grammarrulc is needed, an item is missing fiom the databasc, or a lexicon entryhas been omitted.VI.
Limitations of this MethodIn its simplest form.
this method is restricted to operating with semanticgrammars.
Specifically.
the files in the database must correspond tocategories in the grammar.
With a syntactic grammar, the method is stillapplicable, but more complicated; semantic compatibility checks arene,:essary at various points.
Moreover.
the set of acceptable sentences isnot as tightly constrained as with a semantic grammar, so there is lessinlbrmation to be gained from the grammar itself.This method (and all extended-lexicon metht~s) prevents use of anINTI:'RLL~'P.type spelling correcter.
Snch a spclling cnrreetor elies onhaving a complete in-enre lexicon against which to compare words; thethrust of the extended-lexicon methods is the ab~nce of such a lexicon.If the unknown term already has a meaning to the system, which leads toa valid parse, the extended-lexicon methods won't even be invoked.
Forexample, in the KBMS system, the question "Where is the City ofIstanbul?"
is interpreted as referring to the city, rather than the shipnamed 'City of Istanbul'.
This difficulty is mitigated somewhat by the factthat semantic grammar estricts the number of possible interpretations, sothat the number of  genuinely ambiguous eases like this is comparativelysmall.
For instance, the query " What is t,.
speed of" the City of l~tanbul"would be parsed correctly as refcrrmg to a ship, since 'City of Istanbul"cannot meaningfully refer to the city in this case.V.
ConclusionThe technique discussed here could be implemented in practically anyapplication that uses a semantie grammar-- it  does not require anyparticular parsing strategy or system.
In the KBMS tcstbcd, the work wasdone without any access to the internal mechanisms of I.IFER.
The onlyrequirement was the ability to call user supplied functions at appropriatetimes during the parse, such as would be provided by any comparableparsing system.This method was developed with the assumption that the costs ofextended-lexicon perations uch as database access, asking the user.
etc.,are significantly greater than the costs of parsing.
T'nus these operationswere avoided where possible.
Different cost models might result indifferent, more complex, strategies.
Note also that the cost model, byusing information in the database catalogue and database schema, canautomatically reflect many aspects of  the database implementation, thusproviding a certain degree of domain-independence.
Changes such asimplementation f a new index will be picked up by tile cost model, andthus be transparent to the design of the rest of the parser.For natural language systems to provide practical access for databaseusers, they must be capable of handling realistic databases.
Such databasesarc often quite large, and may be subject to frequent update.
Both ofthese characteristics render impractical the encoding and maintenance of afixed, in--core lexicon.
Existing systems have incorporated a variety ofstrategies for coping with these problems.
This note has described atechnique for reducing the number of lexical ambiguities for unknownterms by deferring lexical decisions as long as possible, and using a simplecost model to select an appropriate method for resolving remainingambiguities.Vl.
AcknowledgmentsThis work was performed under ARPA contract #N00039-80-G-0132.The Views and conclusions contained m this document are those of theauthors and should not bc interpreted as representative of the officialpolicies, either expressed or implied, of DARPA or the U.S. Government.Thc authors would likc to thank Daniel Sagalowicz.
Norman Haas, GaryHendrix and F.arl Sacerdoti of SRI International for their invaluableassistance and for making thcir programs available to us.
Wc would alsolike to thank Sheldon Finkelstein.
Dung Appclt, and Jonathan King forproofreading thc final dralLVI.
References\[1\] Codd, E. F., ?t at., Rendezvous Version /: An Experimental English-Language Query Formulation System for Casual Users of Relational DataBases.
IBM Research report RJ2144(29407), IBM Research Laboratory,San Jose, CA, 1978.\[2\] Harris, L., Natural Language Data Base Query: Using the databaseitself as the definition of world knowledge and as an extension of thedictionary, Technical Rcport 77-2, Mathematics Dept.. DartmouthCollcge, Hanovcr.
NH, 1977\[3\] Hcndrix.
G.G., The LIFER Manual: A Guide to Building PracticalNatural Language Interfaces, Technical Note t38, Artificial IntelligenceCenter.
SRI International, 1977\[41 Kaplan, S. J..
Cooperative Responses from a Portable Natural LanguageData Base Query System, Ph.D. dissertation, U. of Pennsylvania, vailableas HPP-79-19, Computer Science Department, Stanford University.Stanford, CA.
1979\[5\] Kaplan.
5.
J.. E. Mays.
and A. K. Joshi.
A Technique for Managingthe Lexicon in a Natural Language Interface to a Changing Data Base,Prac.
Sixth \[nternation_l Joint Conference on Artificial Intelligence.
Tokyo,1979.
pp 463-465.\[6\] Sacerdoti, F.D., Language Access to Distributed Data with ErrorRecovery, Prec.
Fifth International Joint Conference on ArtificialIntelligence.
Cambridge, MA, 1977, pp 196-202\[7\] Waltz, D.I,.. An English Language Question Answering System for aLarge Relational Database, Communications of the ACM, 21.
7, July,1978\[8\] Wiedcrhold, Gio.
Management of Scmantic Information for Databases,Third USA-Japan Computer Conference Praceedings.
San Francisco, 1978.pp 192-197106
