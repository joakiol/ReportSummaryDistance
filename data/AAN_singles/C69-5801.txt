COMPUTER-AIDED RESEARCH ON SYNONYMY AND ANTONYMY *H. P. EdmundsonUniversity of Maryland, College Park, Md., U.S.A.andMartin N. EpsteinNational Institutes of Health, Bethesda, Md., U.S.A.AbstractThis research is a continuation of that reported in AxiomaticCharacterization of Synonymy and Antonymy, which was presented atthe 1967 International Conference on Computational Linguistics \[3\].In that paper on mathematical linguistics the relations of synonymyand antonymy were regarded as ternary relations and their domainsand ranges were discussed.
Synonymy and antonymy were defined jointlyand implicity by a system of eight axioms, which permitted the proofsof several intuitively satisfying theorems.
The present paper oncomputational linguistics is a preliminary report which describessome computer programs that have been used to investigate the extentto which those axioms model an existing dictionary of synonyms andantonyms \[9\].
A set of computer programs is discussed that (i) inputthe dictionary data concerning synonyms and antonyms, (2) create adata structure in core memory to permit the manipulation of data,(3) query this data structure about words and relations, and (4) out-put the answers to queries or the entire data structure, if desired.Some examples of computer output are also given to indicate presentdirections of the computer-aided research.
*This research was supported in part by the Office of NavalResearch under Contract N00014-67-A-0239-0004.i.
Introductioni.i Previous ResearchThis work is a continuation of research initially reported inthe paper Mathematical Models of Synonymy, which was presented at the1965 International Conference on Computational Linguistics \[2\].
Thatpaper included a historical summary of the concepts of synonymy andantonymy.
It was noted that since the first book on English synonyms,which appeared in the second half of the 18th century, dictionariesof synonyms and antonyms have varied according to the particularexplicit or implicit definitions of "synonym" and "antonym" that wereused.
The roles of grammatical class, word context, and substitu-tability in the same context were discussed.As was noted, synonymy traditionally has been regarded as a bin-ary relation between two words, Graphs of these binary relationswere drawn for several sets of words based on Webster's Dictionary ofSynonyms \[8\] and matrices for these graphs were exhibited as an equi-valent representation.
These empirical results showed that the con-cepts of synonymy and antonymy required the use of ternary relationsbetween two words in a specified sense rather than simply a binaryrelation between two words.
The synonymy relation was then definedimplicitly, rather than explicitly, by three axioms stating the pro-perties of being reflexive, symmetric, and transitive.
The antonymyrelation was also defined by three axioms stating the properties ofbeing irreflexive, symmetric, and antitransitive (the last term wascoined for that study).
It was noted that these six axioms could beexpressed in the calculus of relations and that this relation algebracould be used to produce shorter proofs of theorems, even though noproofs were given.
In addition, several geometrical and topologicalmodels of synonymy and antonymy were posed and examined.The characterizations of synonymy and antonymy initiated inEdmundson \[2\] were investigated more thoroughly in Edmundson \[3\].Synonymy and antonymy were defined jointly and implicitly by a set ofeight axioms rather than separately as before.
First, it was notedthat the original six axioms were insufficient to permit the proofsof certain theorems whose truth was strongly suggested by intuitivenotions about synonymy and antonymy.
In addition, it was discoveredthat certain fundamental assumptions about synonymy and antonymymust be made explicit as axioms.
Some of these have to do withspecifying the domain and range of the synonymy and antonymy relations.This is related to questions about whether function words, which lin-guistically belong to closed classes, should have synonyms and ant-onyms and whether content words, which linguistically belong to openclasses, must have synonyms and antonyms.
Several fundamental theoremsof this axiom system were stated and proved.
The informal interpre-tations of many of these theorems were intuitively satisfying.
Forexample, it was proved that any even power of the antonymy relationis the synonymy relation, while any odd power is the antonymy relation.These results supported the belief that an algebraic character-ization is .insightful and appropriate.
For example, the assumptionthat synonymy is an equivalence relation also has been made, eitherdirectly or indirectly, by F. Kiefer and S. Abraham \[4\], U. Welnreich\[i0\], and others.
Since the axiom system defined the notions of syn-onymy and antonymy jointly and implicitly, it avoidedlcertain diffi-culties that are encountered when attempts are made to define thesenotions separately and explicitly.1.2 AxiomsBefore investigating axioms for synonymy and antonymy, we willrecapitulate some notions and notations for the calculus of binaryrelations.
Consider a set V of arbitrary elements, which wil l  becalled the universal set.
A binary relation on V is defined as a setR of ordered pairs <x,y>, where x,y ?
V. The proposition that x standsin relation R to y wil l  be denoted by xRy.
The domain ~(R) of rela-tion R is defined as the set ~(R)~{x:(~y)(xRy)}.
The complement,union, intersection, and converse relations are defined byxRy - ~ xRyx(R n S)y - xRy A xSyx(R US)y  -z xRy V xSyxR-ly - yRxThe identity relation I is defined byxly _= x = yThe product and power relations are defined byxRiSy - (,~z)\[xRz A zSy\]R n : RIR ~-~ n~lThe inclusion and equality of relations are defined byR = S - xRy -----> xSyIR = S - R = S A S = RUnder the assumption that synonymy and antonymy are ternary rela-tions on the set of all words, the following definitions will  be used:xSiY E word x is a synonym of word y with respect to theintension i (or word x is synonymous in sense i to word y)xAiY E word x is an antonym of word y with respect to the inten-sion i (or word x is antonymous in sense i to word y)In addition to the synonymy and antonymy relations, it will be use-ful to introduce the following classes that are the images by theserelations.
The synonym class of a word y is defined bysi(Y) ~ {x : xSiY}which may be extended to an arbitrary set E of words bysi(E) ~ {x : (~y) \[y c E A xSiY\] }Similarly, the antonym class of a word y is defined byai(Y) ~ {x : xAiY}which may be extended to a set E of words byai(E ) E {x : (~y)\[y c E A xAiY\]}Following Edmundson \[3\], it will be assumed that the synonymyand antonymy relations are defined by the following set of axioms--rather than as in Edmundson \[2\].Axiom i (Reflexive):Axiom 2 (Symmetric):Axiom 3 (Transitive):Axiom 4 (Irreflexive):Axiom 5 (Symmetric):Axiom 6 (Ant~transitive):Axiom 7 (Right-identity):Axiom 8 (Nonempty):(Vx) \[xSix\](Vx) (Vy) \[xSiY => xS i ly\](Vx) (Vy) (Vz) \[xSiY A YSiz --> xSiz\](VX) \[xAix \](Vx) (Vy) \[xAiY --------> xA?
l ly\](Vx) (Vy) (Vz) \[xAiY A YAiz ~--> xSiz\](Vx) (Vy) (Vz) \[xAiY A YSiz ------> xAiz\](Vy) (~x) \[xAiY\]The above eight axioms may be expressed more succinctly in the calcu-lus of relations as follows:Axiom i (Reflexive): i = S i-iAxiom 2 (Symmetric): S i = S iAxiom 3 (Transitive): S 2 ~ S i iAxiom 4 (Irreflexive)': I = AiAxiom 5 (Symmetric): A i ~ A iAxiom 6 (Antitransitive): A~ l ~ SiAxiom 7 (Right-identity): AII S i ~ A iAxiom 8 (Nonempty): (Vy)(~x)\[xAiY \]As mentioned in \[3\], even though si(Y ) ~ @ since YSiY by Axiom i,it may be necessary to add the following axiom:Axiom 9: (Vy)(~x)\[x # y A xSiY\]to guarantee that the domain of the relation S i is not trivia\], i.e.,si(Y) - (y} # ?Axiom 9 is not necessary if si(Y ) is permitted to be a unit set forcertain words.
Thus, we might define si(Y) = {y} for any functionword y, e.g., si(and) = {and}.
But this will not work for antonymysince ai(Y ) might be considered empty for certain words such as func-tion words, e.g., ai(and) = ~.
The alternative of defining ai(Y ) = {y}is not reasonable since it produces more problems than it solves.Axiom 8: (Vy)~x)\[xAiY\], which is equivalent to(~y)\[ai(Y) # ~\] ,is reasonable if the contrary y of word y (e.g., "irrelevant", "imposs-ible", "nonuse", etc.)
is permitted, i.e., ~ ?
ai(Y).2.
Research Methodology2.1 Research GoalsThe synonymy and antonymy relations possess interesting proper ~ties, which can be treated mathematically to provide insight aboutsemantic relations and connectivity among words in a natural language.One such model is the axiom system just stated.
The immediate goal ofthe current research is to compile, in computer-accessible form, a dic-tionary containing all synonymy and antonymy relations holding betweenselected words.
Such a dictionary is useful in gaining a better un-derstanding of how the English lexicon is semantically structuredsince it can eventually enable the determination of the completenessof the descriptions in any synonym-antonym dictionary.
Another objec-tive is to assist the lexicographer in compiling such a dictionary sothat all words are defined and related in a consistent manner.2.2 Data Base and Data StructureFor the present research a test dictionary was compiled by select-ing English words from Webster's New Dictionary of Synonyms \[9\].
Ac-cordingly, a set of computer programs was written to do the following:i.
Input, in a prescribed format, words selected from the abovedictionary together with relevant data concerning their synonyms andantonyms.2.
Create in core memory a suitable data structure (see \[5\]) forthe input, which permits the manipulation of the dictionary data.
Fu-ture extensions to the system would make use of direct-access storageto enable the processing of more data.2.3 Data Ana lvs~The test dictionary is analyzed with the aid of computer programsthat were written to do the following:I. Query the data structure about words and relations.
Twoquery modes are built into the system.
The first mode allows the se-lection of words fulfi l l ing an input request and the second mode per-mits the verif ication that certain relations hold between selectedwords.2.
Output the answers to queries or output the entire data struc-ture, if desired.3.
Verify the consistency of word groupings, the degree of com-pleteness of related subgroups, and the presence or absence of anom-al ies-in the data base.3.
Input3.1 Input Specif icationFirst, it is necessary to specify and format the input data sothat a set of programs may process and query a test dictionary, whichresides in core in the present version of the system.
This is accom-pl ished using the following input prototype:<word>,<grammar code><sense #><relatlon~,~word>,... ,<word>,;wherei.2.<word> is an entry in Webster's New Dictionary of Synonyms.<grammar code>makes use of the following coding mnemonics:N - NounV - VerbJ - AdjectiveB - Adverb0 - PronounD - DeterminerL - Auxil iaryP - PrepositionC - Con junct ion3.
<=ense #> is a one-digit number representing a sense associ-ated  with a word in the dictionary.4.
<relation> is denoted byS - SynonymyA - AntonymyM - word used in the description of another wordbut not itself a main entry.5.
<word>,...,<word> is the set of words standing in the givenrelation to the main entry in the given sense.Thus, each input item consists of a main-entry word followed bya comma, a one-character grammar code, a one-digit sense number, aone-character relation, a comma, a list of words (separated by commas)that in the given sense stand in the given relation to the main entry,a comma, and a semicolon that denotes the end of an input item.
Asample computer input is:51nPLE,J2S,E&SY,FACILE,LIGHT,EFFORTLESS,SMOOTH,;Continuation cards may be appended to any i tem by placing a "+" incolumn 80 of subsequent cards.3.2 CommentsSeveral problems remain in fully attaining the above stated goals.On the one hand, it is difficult to select from a manual dictionarysufficiently small sets of words that are closed under the relationsS and A, while on the other hand large segments of such a dictionarycannot be input at present.
Programs have been written to stguctureand process small test dictionaries, to select words from the datai0structure using a query language, and to verify that certain rela-tions hold between words.4.
Processing4.1 Input AnalysisIn the first phase of pro?essing the program checks the well-formedness of the input entries, isolates words, records grammaticalclasses, and establishes relations between words.4.2 Creation of the Data StructureThe data structure created in core provides for the constructionof two tables.The first is a directory table whose items consist of a locationidentifier, an entry, the grammar code, the sense number, and the rela-t ion.
This directorysequentially stores the input information, ellm-inates duplicates, and provides a reference pointer to a second table,the matrix table.The matrix table consists of an ineidence or connectivity matrix,which is used to store the synonymy and antonymy relations betweenwords.
It should be noted that xSy is stored differently from ySx.In addition xSx is recorded in the data structure only if it so ap-peared in Webster's New Dictionary of Synonyms.It is also possible to develop a teachability or accessibilitymatrix from the stored input.
In graph-theoretic terms the matrix maybe regarded as follows: words correspond to vertices and relationscorrespond to directed edges.
Note that for all x and y in the datastructure, it can be determined whether xSy and xAy are true or false.ii4.3 Query LanguageThe two basic modes of operating upon the data structure are theselection mode and the verification mode.
Both modes permit queriesto be composed and matched against the data structure.
The responseto a query statement in the selection mode is a listing of all thoseentries in the data structure satisfying the request, lh the verifi-cation mode the response indicates whether a statement is true or falseand, if false, points out which segment of the query statement doesnot hold.Simple query statements are of the form:?
if QUERYwhere "?"
is used to initiate the request; "if" is used as a prefixfor particular query types; and "QUERY" consists, in the simplestcase, of one of the following five statement types:i. xRy2.
x*y3.
xR*4.
*Ry5.
*R*where "*" denotes that any value in the specified field is allowedand the sense i is not explicitiy denoted.
Item 1 above operates inthe verif ication mode, while items 2-5 operate in the selection mode.Simple query statements can be extended to allow compound expre-sions by means of the operators "not", "and", and "then".
For example,the query?
if xSy and ySx12tests whether synonymy (in sense i) is a symmetric relation for thewords x and y, while the query?
if xSy and ySz then xSzchecks to see if transitivity of synonymy (in sense i) holds for thewords x,y, and z.It is also possible to determine if the composition SIS of therelation S holds, i.e., for given words x and y, does the givenword z in the data structure satisfy t%e request:?
if xSz and zSyTo select all such z from the data structure, the request is formu-lated as follows:?
if xS* and *SyThe synonymy relation S is assumed to be reflexive, symmetric,and transitive, whi le the antonymy relation A is assumed to be irre-flexive, symmetric, and antitransitive.
The input forms of queriesrepresenting these properties are as follows:i. Reflexive:2.
Symmetric:3.
Transitive:4.
Irreflexive:5.
Symmetric:6.
Antitransitive:?
x,S,x,;?
if x,S,y,.then.y,S,x,;?
if x,S,y,.and.y,S,z,.then.x,S,z,;?
not x,A,x,;?
if x,A,y,.then.y,A,x,;?
if x,A,y,.and.y,A,z,.then.x,$,z,;In addition, the input format for the properties of right-identityand nonempty are as follows:?
x,A,y,.and.y,S,z,.then.x,A,z,;  7.
Right-identity: ?
if r8.
Nonempty: ?
if *,A,y,;This last property is interpreted as follows: for all y in the datai 13structure, does there exist a word x such that x stands in the rela ~tion A to y?An example of the input to test if transitivity holds for thewords "big", "great", and "large", in that order is as follows:?
if big,S,great,.and.great,S,large,.then.big,S,large,;4.4 Verif ication AlgorithmsTwo basic verif ication algorithms have been programmed.
Thefirst seeks to detect the presence of either a chain or a loop amongthe given words.
The input consists of pairs of words standing inthe relation S. A chain exists if it is possible to linearly orderthe set of input words so that the relation S holds between adjacentwords.
A loop is detected if every word is preceded by another wordand the algorithm cannot locate a word that has no predecessor.
Thisalgorithm may be useful in developing techniques for structuring thevocabulary of a synonym-antonym dictionary so that no word is usedbefore it has been defined.The second algorithm determines whether selected groups of wordsform an equivalence class with respect to synonymy in a given sense.A binary relation R is said to be an equivalence relation if it isreflexive, symmetric, and transitive.
An equivalence relation R parti-tions a set of elements into disjoint classes such that two elementsare equivalent if and only if they belong to the same class.
Theroutine determines whether two given words are in an existing synonymclass and, if not, establishes a new c lass .
The test fo~ equivalenceclasses in a set of words is initiated by the input statement.EQUV(<word>,...,<word>)14which incorporates tests for reflexivity, symmetry, and transitivity.The output is a table indicating class membership of wozds o\[, if noequivalence relations exist, indicates those properties not satisfiedby particular words.
For example, the routine found that, aside fromreflexivity, the words "pure", "simple", and "absolute" formed anequivalence class in a particular sense i.
On the other hand, thewords "aft", "astern", "abaft", "after", and "behind" formed twoequivalence classes {aft, astern, abaft} and {after, behind}.
At pre-sent, the graphs of equivalence classes are drawn manually, ratherthan by computer.Appendix 2 outlines the structure of an input deck and lists asample input including both input data and query statements.5.
Output5.1 Relational FormThe relational form of output verifies whether the simple s tate -ment xRy is true or false and also whether compounds of simple state-ments are true or false.
For example, the query?
if stern A softproducedTHE FOLLOUING RELATIOH HOLDS: STERN A SOFTwhile for the query?
if far A high and high A low then high A farthe following set of responses was obtained: rTHE FOLLOWING RELATION HOLDS: FAR & HIGHTHE FOLLOHIHG RELATIOH HOLDS: HIGH A LOUTHE GIVEN REL?TION DOES HOT HOLD: HIGH A F&HQUERY REQUEST NOT SAT ISF IED - -  STATEHENT FALSE155.2 List FormIn the list form of response to a query the main entry and allwords (if any) that are pointed to by the main entry are listed.
Forexample, the query?
if * S sternproducedTEE FOLLOWING ~ORDS AEE IN THE RELAT ION S TO STERNS EVEEEAUSTEREASCET ICIn general, this form of output consists of lists of the fo l low-ing two types: a list of all words synonymous or antonymous to agiven Word, and a list of all synonymy or antonymy relations holdingamong a given set of words.5.3 Matrix FormThe matrix form of output represents the relations by a matrixconsisting of S's and A's according to whether the relation S or Aholds between given pairs of words.
A blank in such a matrix indicatesthat neither S nor A relates two words in the data structure.
Forexample, the following matrix revealed four senses of the word"simple".16.simpleapureabsolutesheer*compoundcomplexsimplezeasyfaci lel ighte f for t lesssmoothcompl icateddi f f icul ts imple $naturalingenuousnaiveunsophist icatedart lesssimple"fool ishsi l lyfatuousasin inewisesensib leJudic iousce of ~d  ia c f p i  nb oc  o i f  nqS S mos  f r s i f s a ei ospa i  a l t m c i i t n nm p l h o p m e c i l o a c m u u ap u u e u l p a i g e o t u p r o il r t e n e l s l h s t e l l a u ve e e r d z e y e t s h d t e l ' s eI a $SSS&ASSSSSS  SSSS& S$ S S S S & ASSSSSSSS  SSSSSS  SSSSS5 SSSSSSS&ASSSSSSSSSSSSS SSSSSS SSSSSS SS S S S SunsoPhi 1s suta  f fa  edi r so  aS  n ic t ios t i  sca l m l i u .
w i it e p i l o f i b oe s l s l u n s l ud s e h y s e e e sS S S S S AS SSSSS  SSSSS  SSSSS &~A SR& A&S SASSThe superscr ip t  denotes  the  sense  number to  be assoc ia ted  w i th  "s imp le" .
A "*" i s  p laced  tothe  le f t  o f  those  words that  do not  appear  as main  eut r ies  in  Webster ' s  New D ic t ionary  o f176.
Concluding RemarksThe programs were written almost completely in FORTRAN IV andhave been run on the IBM 360 and the PDP i0.
A flowchart, whichstm~narizes these programs, appears as Appendix i.
In addition, aSNOBOL 4 program has been written for the detection of chains andloops.Several problems in fully achieving the stated research goalshave appeared.
It was difficult to select small closed sets of wordsfrom Webster's New Dictionary of Synonyms and it was not feasible tokeypunch the entire dictionary.
Since the size of a truly suitabledata base was too large to retain in core memory, several sampledictionaries have been selected to study the feasibility of theprinciples and techniques involved.
Most of the current effort hasbeen devoted to providing programming capability for the processingof small test dictionaries.
Different words may be input with eachrun, thereby increasing the size of the sample data base to gaindeeper insight into the properties of the entries listed in a manualdictionary.
Further computer-aided research on synonyms and antonymswil l  help to validate or extend the axiomatic model proposed earlier.Also, future research could consider the additional relations "con-trasting" and "analogous" cited in some manual dictionaries and theiautomatic determination of the senses of words.18Bibliography\[i\].\[2\].\[3\].\[4\] .\[5\].\[6\].\[7\] .\[8\].\[9\].\[lO\].\[ii\].R.
Carnap, Introduction to Symbolic Logic and Its Applications,W.
Meyer and J. Wilkinson (trs.).
Dover, N.Y., 1958.H.
P. Edmundson, "Mathematical Models of Synonymy", Internation-al Conference on Computational Linguistics, New York, 1965.H.
P. Edmundson, "Axiomatic Characterization of Synonymy andAntonymy", International Conference on ComputationalLinguistics, Grenoble, 1967.F.
Kiefer and S. Abraham, "Some Problems of Formalization in ,w Linguistics , Linguistics, v. 17, Oct. 1965, pp.
11-20.D.
Knuth, The Art of Computer Programming : Vol.____~l, FundamentalAlgorithms, Addison-Wesley, New York, 1968.V.
V. Martynov, Pytannja prikladnoji lingvistykv; tezisydopovidej mi~vuzovs'koji naukovoji konferenciji, Sept. 22-28, 1960, Cernivcy.A.
Naess, "Synonymity as Revealed by Intuition", PhilosophicalReview, v. 66, 1957, pp.
87-93.Webster's Dictionary of Synonyms, Merriam Co., Springfield,Mass., 1951.Webster's New Dictionary of Synonyms, Merriam Co., Springfield,Mass., 1968.U.
Weinreich, "Explorations in Semantic Theory", in CurrentTrends in Linguistics, III, T. Sebeok (ed.
), Mouton andCo., The Hague, 1966.P.
Ziff, Se__ mantic Analysis, Cornell University Press, Ithaca,N.Y., 1960.- -  19APPENDIX I-FLOW CHARTINPUT ANALYSIS1.
Check well-formednessof input entries2.
Edit input entries-isolate words-record grammar codes-establish relationsiDATA-STRUCTURE CREATIONi.
Create directory-eliminate duplicateentries2.
Create connectivitymatrixI ,QUERY-SELECTION MODEi.
Analyze query-scan query-flag errors2.
Execute query-look up words-match data-structure3.
Output answerQUERY-VERIFICATION MODEi.
Locate words2.
Determine equivalences3.
Output answer20APPENDIX 2-  RUN INSTRUCTICNSFirst the basic st ructure el an input deck is outl ineS.Comments  and explanat ion are enclosed in parentheses.
Asample run which may be input to the system follows.. .
.
.
.
.
.
.
.
.
FORMAT OF THE INPUT DECK .
.
.
.
.
.
.
.
.
.PARAMETER CARD (constant for each run ) .
(input to the creat ion program in the inputdescr ibed above)proto%yperOD ( input del imeter  ) .-SELECT MODE(guery requests  in both the verify and select  mode follow )(all quer ies  which are to be matched against the data til~.using the query input format descr ibed above.
)-EQUIVALENCE MODE(using the set of terms inputted, determine if the set teemsan equ iva lence  class)?
* (run terminator  ) .A SAMPLE RUN,; +ZSAEONIF~.FOR,C S ,BECAUSE,S INCE,AS , INASMUCH AS,;BECAUSE, S,FOR,SINCE,  AS, INASMUCH AS,;SINCE, S ,BECAUSE,FOR,AS , INASMUCH AS,;AS, S~SINCE,BECAUSE,FOR, INASMUCH AS,;INASMUCII AS, S ,S INCE,BECAUSE,FOR,AS, ;FULL, S,CO~PLETE,  PLENARY,R'EPLETE,;FULL, A,EMPTY,;COMPLETE,  S ,FULL,PLENAR?,REPLETE, :COMPLETE,  A, INCOMPLETE, ;REPLETE, S ,FULL,COMPLETE,  PLENAR?,;PLENARY, S ,FULL ,COMPLETE,REPLETE, ;PLENARY, A,LIMITED,;EMPTY, S ,VACANT,BLANK,VOID,VACUOUS, ;EMPTY, S,EMPTY,;INCOMPLETE,  M,;L IMITED, ~,;SEVERE, S ,STERN,AUSTERE,ASCETIC , ;SEVERE, A,TOLERANT,;STERN, S ,SEVERE,AUSTERE,ASCETIC , ;STERN, A,SOFT,;AUSTERE, S ,SEVERE,STERN,ASCETIC , ;AUSTERE, A,LUSCIOUS,;ASCETIC, S ,AUSTERE,SEVERE,STENN, ;21ASCETIC, A,LUXURIOUS,;REMOTE, StDISTANTwFARwREMOVE~,;~EMOVED, 5,REMOTEtFARrDISTANT,;DISTANT, S,FARsREMOVED,RENOTE,;FAR, S#RE~OTE,RENOVEDwDISTANT,;FAR, A,REAR,HIGHwNEA~BY,;NEAR, S,CLOSEeHIGHrNEARBYr;REAR, AwFAR,;HIGHf SwTALL,LOFTY,:TALL, StHIGHwLOFTY,;NEARBY, SwCLOSEtNEA~,H~GN,;HIGH.
A,LOM,;CLOSE o S,NEAR,IiIGH, NEARBy,:CLOSE, S,CLOSE,;CLOSE, A,REMOTE,;SIMPLE,JIS,PU~E,ABSOLUTE, SHEER,;SIMPLE#JIA,COMPOUND,CONPLEX,;PURE,J S,SIMPLE,PURE#ABSOLUTE,SHEER,:ABSOLUTE,J S,SIMPLE, PURE,SUEER~;ShEER,J S,SIMPLE,PURE, ANSOLHTE,;COMPLEX,J S,COMPLEX,COMPLICATED, INTRICATE, TNVOLVED,KNOTTY,;COMPLEX,J A,SIMPLE,;CO~PCUND, M,;ZSI~PLE#J2S,EASY, FACILE,LIGHT,EFFORTLESS, S~OOTH,;SI~PLE,J A,COMPLICATED,DIFF\[CULT,;COMPLICATED, S,~NTRICAT~,INVOLVED,COMPLEX,KNOTT?,;COMPLICATED, A,SIMPLE,;COMPLEX, S,CUMPLEX,COMPL\[CATED, INTRICATE, INVOLVED,KNI}TTY,;FACILE, S, EASY,SMOOTR,LIGHT,SIMPLE,EFFORTLESS,;LIGHT, ,,EASY,SIMPLE, FACILE,EFFORTLESS, SMOOTH,;~FFORTLESS, S,EASY,SMOCTH,FACILE,SIMPLE,LIGHT,;SMOOTH, S,EFFORTLESS,EASY,LIGHT,SIMPLE,FACILE,;SIMPLE, 3S,NATURAL,INGENUOUS,NAIVE, UNSOPHISTICATED,ARTLESS,;NATURAL, S,NATURAL, SI~PLE,INGENUOUS,NAIVE,;JNSOPHISTICATED,ARTLESS,0NAFFECTED,;INGENUOUS, S,NATURAL,SIMPLE, NAIVE, UNSOPHISTICATED,ARTLESS,;NAIVE, S,UNSOPHISTICATED,ARTLESS,INGERUOUS,NATURALrS\[RPLE,;I\]NSOPHISTICATED, S, NATU~AL, SIMPLEoINGENOOUS,NAIVE,A~TLESS~;ARTLESS, S,NATURAL,SIMPLE,INGENUOHS,NAIVF,UNSOPRISTICATED,URAFFECTED,;UNAFFECTED, S,ARTLESS,NATURAL,SIMPLE, INGENUOUS,NAIVE,UNSOPNISTICATEU,;ZSIMPLE,,\]~S,FOOLISH,SI~LE, SILLY,FATUOUS,ASfNINE,;FOOLISH, 5,SIMPLE,SILLY,FATUOUS,ASLNINE,;SILLY, S,SIMPLE, POOLISH, FATHOUS,ASINIRE,;FATUOUS, S,ASININE,SILLY,FOOLISH,SIMPLE,;FATUOUS, A,SENSIBLE,;ASININE, S,SIMPLE,FATUOUS,SILLY,FOOLISH,;ASININE, A,SENSIBLE,JUDICIOUS,:SIMPLE, ~A,WISE,;WISE, S,SENSIBLE,JUDICIOUS,;WISE, A,SIMPLE,;SENSISLE, A,FOOLISN,FATUOUS,AS~RINE,:5ENSIBL~, S, NISE,JUDICIOUS,;JUDICIOUS, S,N\[SE,SENSIULE,;22J~JD\[CIO(\]~;, A,ASININE,:INFE~TOH, S,UNDERLING,SUBORDI~&TE,:I~F~HIOH, 5,1NFERIOR,:I~FERIOR, A,SUPERIOR,;UNDERLING, ~,INFERIOR,SUBORDINATE,:UNDERLING, A,LEADER,~ASTER,;5UBO~DI~ATE,NIS,INFERIOR,UNDENLING,;SUBORDINATE,JIS,SECONDARY,DEPENDENT,SUBJECT,TRIBUTAR?,COLLATERAL,:SUBORDINATE,JIS,SUBORDINATE,;SUBORDINATE,JIA,CHIEF, LEADENG,:SUBORDINATE,J2A,DOMINANT,;SUPEPrOR, S,BETTER, PREFERABLE,;SUPERIOR, A,INFERIOR,;PREFERABLE, S,BETTER,SUPERIOR,;BETTER, S,SUPERIOR,PREFE~ABLE,BETTEB,;LEADER, S,HEAD,CBIEE, CHIEFTAIN,MASTES,;lEADER, A,FOLLOWER,;MAST?R, S,CHIEF,C~IEFTAIN,HEAD,LEADER,:FOLLOWER, S,ADHEBENT,DXSCIPLB,SECTAR?,PABTIS&B,HENCHMAN,SATELLITE,;FOLLOWER, A,LEADER,;hOD-SELECT NODE FOR QUERYFAR,S,BEMOTE,;STERN,~,SEVERE,:~TERN,A,SOFT,;~,S,STERN,;STBBN,S,#,;STERN,S,AUSTERE,;FULL,A,EMPTY,;IF FAR,A,NEAR,.AND.
CLOSE,&,REMOTE,.THEN.
FAR,S,BEMOTE,:IF FAR, A, REAR,.THEN.
NEAE,&,FAR#;F?R,A,HIGH,:FAR,&,*,.AND.
*,S, HIGB,;IF FAR,A,HIGH,.AND.
HIGH,A,IOW,.THEN.
HIGB,A,FAB,;IF UNDEBLING,A,LEADER,.AND.LEADEB#&,FOLLOWEB,.THEN-UWDERLING,S,FOLLOWEB,;SIMPLE J1,S,SIMPLE al,;SIMPLE J~,S,SIMPLE a~,;IF SIMPLE J1,A,COMPLEX,.AND.COMPLEX,A,SIMPLE J~,.THER.SIMPLE JI,S,SI~PLE J1,;?
IF ASININE,A,SENSIBLE,.&MD.SENSXBLE, S,JUDIC\[O~S,-THEN-ASININE, A,JUDICIOUS,;-EQUIVALENCE MODEECUV(FULL,COMPLETE,FULL, PLENARY,FULL,BEPLETE,COMPLETE,PLENARY,RBPLETE,FULL,)E~UV(HIGH,TALL,HIGH,LOFTY,LEADER,HEAD, LEADE~,MASTBB,)y
