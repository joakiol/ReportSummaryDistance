Proceedings of COLING 2014, the 25th International Conference on Computational Linguistics: System Demonstrations,pages 48?51, Dublin, Ireland, August 23-29 2014.Sanskrit Linguistics Web ServicesGe?rard HuetInria Paris-Rocquencourtgerard.huet@inria.frAmba KulkarniUniversity of Hyderabadapksh@uohyd.ernet.inAbstractWe propose to demonstrate a collection of tools for Sanskrit Computational Linguisticsdeveloped by cooperating teams in the general setting of Web services.
These servicesoffer a systematic architecture integrating multilingual lexicons, morphological generationand analysis, segmentation and parsing, and interlink with the Sanskrit Library digitalrepository.
They may be used as distributed Internet services, or installed as local toolson individual users workstations.1 Community buildingSanskrit is the primary culture-bearing language of India, with a continuous production ofliterature in all fields of human endeavour over the course of four millennia.
It benefited froma strong linguistics tradition, established from early times, and notably from the grammarcomposed by Pa?n.ini around the fourth century B.C.E., and commented since by innumerablegrammatical treatises.
This fairly complete descriptive apparatus took a prescriptive character,resulting in a constrained evolution of the language within its official grammar, leading toits stability as a semi-formal language.
On the other hand, multiple styles of writing treatises,commentaries, and even poetry, led to a variety of specific dialects, both in prose and in versifiedform.The efforts towards developing tools for the computational treatment of Sanskrit have beensteadily progressing both at national as well as international level.
A Sanskrit ComputationalLinguistics consortium funded by the Indian Government coordinates the development of con-sistent tools within 7 research institutes.
In 2007, the first of a series of International SanskritComputational Linguistics Symposia was organized in Paris with the aim of gathering a commu-nity of teams sharing ideas as well as linguistic resources, and developing inter-operable software.These symposia have benefited the computer scientists from the grammatical expertise of thetraditional scholars, while the traditional scholars could see the practical applications of thethousand of years old theories.Within this general effort, specific tools were developed at Inria in Paris and University ofHyderabad for the analysis of Sanskrit texts, designed as inter-communicating Web services.
Aspecific human-machine interface was developed, allowing annotation experts to produce taggedtree banks for the Sanskrit Library, a digital TEI-conformant repository of Sanskrit corpus.This joint work was presented at COLING-2012 (Goyal et al., 2012).
We herein propose todemonstrate the current functionalities of this software platform.2 Architecture of componentsIt was deemed counter-productive to attempt to build a monolithical rigid system, and weturned rather to developing on various sites independent components, communicating with eachThis work is licenced under a Creative Commons Attribution 4.0 International License.
Page numbers andproceedings footer are added by the organizers.
License details: http://creativecommons.org/licenses/by/4.0/48other as Web services interchanging XML data.
This allows freedom of programming languagesand environments, operating systems, and even linguistic resources.
This also permits greaterflexibility of independent versioning of the components.
Furthermore, HTML and client-sidescripting provide a standardized solution to a common user interface, with easy multilingualdisplay through Unicode.Currently the system supports several lexicon resources.
A specific core lexicon, the SanskritHeritage dictionary (Huet, 2004), has been developed as the seed resource for morphologicaldatabases.
Digitalized versions of the Monier-Williams (Monier-Williams et al., 1999) and theApte dictionaries are being progressively integrated by semi-automatic alignment.
Amarakos?a,the oldest thesaurus of Sanskrit, has also been digitalized (Nair and Kulkarni, 2010), providingthe ontological information following the Indian tradition.A number of components use the Zen Computational Linguistics Toolkit1, a systematic func-tional programming library of finite-state tools.
It handles lexicon management, phonologicalcomputation, morphology generation (both generative and inflexional), and segmentation.
Thesegmentation component is specially important, in view of sandhi.
Sanskrit text is representedas the result of phonetic smoothing, whose efficient inversion is problematic.
An original solutionto sandhi analysis was developed (Huet, 2005; Huet, 2006).Morphological databanks are produced mechanically from the core dictionary stems, informedwith their production parameters.
Sharing techniques give highly compressed data structuresloadable dynamically in process memory, eschewing the use of costly database technology.
Themorphological treatment processes are not strictly speaking Pa?n.inian, but it is possible to relatethem precisely to Pa?n.inian derivations (Goyal and Huet, 2012).
Independently, databanks issuedfrom the Sanskrit traditional repositories have been digitalized (Bharati et al., 2006) and linkedto the As.t.a?dhya?y??
simulator which generates the nominal forms following the Pa?n.inian process(Goyal et al., 2009).
Lemma alignment algorithms permit inter-operability of these variousresources, seen as plug-in components.Segmentation leads to morphological tagging, a complete but much over-generating process.A typical sentence may have billions of possible analyses.
A graphical user-interface, providinga fully shared view of all segmentations, has been developed (Huet and Goyal, 2013).
It isdesigned to be very fast, and to allow human annotators easy inspection of the segment features.Experiments with semi-automatic annotation of parts of the Sanskrit Library2validated theapproach.A deterministic tabulated dependency parser has been designed (Kulkarni, 2013).
The appli-cation of local constraints at an early stage and stacking of intermediate results along dynamicprogramming yield fast results.
The graphical user-interface of the segmenter is adapted to theparser in order to show the shared view of all possible solutions in a compact form.Annotated corpus statistics are being used to build the language and grammar models forvarious tasks.
An experimental version of a segmenter (Kumar et al., 2010) is developed thatconstraints the sequence of constituents by a language model and uses the split model based onthe empirical data of sandhi rules for splitting.
These empirical models may further be used tobuild weighted finite state automaton to prioritize the solutions.3 Salient novel featuresThe segmentation algorithm uses a novel approach to finite state technology, through EffectiveEilenberg machines (Huet and Razet, 2008).
Although Sanskrit has huge literature, only anegligible part of it has been tagged for various levels of analyses.
Thus use of statisticaltechniques or machine learning is almost ruled out.
While machines are good at syntacticanalysis, for semantic compatibility of solutions we still depend on human assistance.
This callsfor a suitable interface which can represent billions of solutions with all relevant linguistic details1http://yquem.inria.fr/~huet/ZEN/2http://sanskritlibrary.org49to be displayed on a screen.
This requirement led us to develop a tabulated display interface,using efficiently a compact shared representation of solutions, presenting an ergonomical solutionto human assistance.
This interface was also further adapted to display all possible sententialparses in a compact tabular format for choosing the correct parse.A new technology of forms alignment, indexed by their morphological production history(?unique naming?
), allows uniform access to various dictionaries, despite possibly conflictinghomophony partitions.The consistently structured core lexical repository, together with lexicon alignment, al-lows the automatic production of derived human-readable dictionaries under the Baby-loo/Stardict/Goldendict formats, with consistent hypertext linking to grammatical processes.Some requirements of Sanskrit computational tools are very specific.
Sanskrit has a vastliterature spreading over several knowledge domains.
Most of the important Sanskrit literature isalready translated into several languages.
In spite of this, scholars want to have access to originalsources, and thus development of the computational tools with convenient user interfaces thatallow seamless connectivity to and from the lexical resources, generation engines and analysistools becomes meaningful.
Further, the availability of As.t.a?dhya?y?
?, an almost complete grammarfor Sanskrit, also puts demands on the developers to authenticate the inverse process of analysisby the generative rules of grammars.
These considerations have resulted in the development ofsuitable interfaces linking various resources and tools through Web services.4 Software engineering and deployment issuesThe Web services approach allows independent development of components, seen as XML trans-ducers keeping a history of interactions through the argument structure of the CGI invocations.This allows independent development, archiving and distribution of modules developed in C,PERL, Ocaml, Python, Java, Javascript, etc.Parametrization of the various platform interconnections allows for distributed use throughInternet, as well as local use on workstations.
Extreme programming methodology allows foragile development with high frequency releasing and a fast user feedback.The software, as well as linguistic resources, are available under open-source licences.5 Demonstration scenarioThe tools will be demonstrated on a few typical sentences, showing various usages of the software.The first presentation will demonstrate the Sanskrit Heritage segmenter on an input sentence.It will show how to select a segmentation solution using the graphical interface, then the wayto refine the solution using the dependency parser of the Hyderabad Sanskrit ComputationalLinguistics analyser, in order to get its dependency structure.
A dual presentation will startfrom the Hyderabad analyser, using the Heritage segmenter as a front end.
Finally it will beshown how to access the analyser tools from marked-up corpus in the Sanskrit library.
Settingsallow switching between the various lexicons, and displaying grammatical information either inromanized Western style, or in Devana?gar??
traditional Indian style.
The demo will also includelinking to actual Pa?n.inian derivation process to ensure precision in the analysis.
If time permits,the Goldendict versions of the lexicons will be shown, informed with grammatical information.AcknowledgementThe Inria ?Sanskrit Heritage?
platform benefited from important contributions of Pawan Goyal,notably in its graphical interface.
We wish also to thank Peter Scharf for his cooperation onthe Sanskrit Library interface.
Various components of the software at University of Hyderabadwere developed with support from TDIL Programme, DeitY, Government of India for the project?Development of Sanskrit computational toolkit and Sanskrit-Hindi Machine Translation system?with contributions from Sivaja Nair, Anil Kumar, Karunakar, Devanand Shukl and Pavankumar.50ReferencesAkshar Bharati, Amba Kulkarni, and V. Sheeba.
2006.
Building a wide coverage Sanskrit morphologicalanalyser: A practical approach.
First National Symposium on Modeling and Shallow Parsing of IndianLanguages, IIT Mumbai.Pawan Goyal and Ge?rard Huet.
2012.
Completeness analysis of a Sanskrit reader.
In Proceedings, 5thInternational Symposium on Sanskrit Computational Linguistics.
DK Publisher.Pawan Goyal, Amba Kulkarni, and Laxmidhar Behera.
2009.
Computer simulation of As.t.a?dhya?y??
:Some insights.
In Ge?rard Huet, Amba Kulkarni, and Peter Scharf, editors, Sanskrit ComputationalLinguistics 1 & 2, pages 139?161.
Springer-Verlag LNAI 5402.Pawan Goyal, Ge?rard Huet, Amba Kulkarni, Peter Scharf, and Ralph Bunker.
2012.
A distributed plat-form for Sanskrit processing.
In 24th International Conference on Computational Linguistics (COL-ING), Mumbai.Ge?rard Huet and Pawan Goyal.
2013.
Design of a lean interface for Sanskrit corpus annotation.
InProceedings, ICON13, Hyderabad.Ge?rard Huet and Beno?
?t Razet.
2008.
Computing with relational machines.
ICON?2008 tutorial.Ge?rard Huet.
2003.
Towards computational processing of Sanskrit.
In International Conference onNatural Language Processing (ICON).Ge?rard Huet.
2004.
Design of a lexical database for Sanskrit.
In Workshop on Enhancing and UsingElectronic Dictionaries, COLING 2004. International Conference on Computational Linguistics.Ge?rard Huet.
2005.
A functional toolkit for morphological and phonological processing, application to aSanskrit tagger.
J. Functional Programming, 15,4:573?614.Ge?rard Huet, 2006.
Themes and Tasks in Old and Middle Indo-Aryan Linguistics, Eds.
Bertil Tikkanenand Heinrich Hettrich, chapter Lexicon-directed Segmentation and Tagging of Sanskrit, pages 307?325.Motilal Banarsidass, Delhi.Ge?rard Huet.
2007.
Shallow syntax analysis in Sanskrit guided by semantic nets constraints.
In Pro-ceedings of the 2006 International Workshop on Research Issues in Digital Libraries, New York, NY,USA.
ACM.Amba Kulkarni and Devanand Shukl.
2009.
Sanskrit morphological analyser: Some issues.
IndianLinguistics, 70(1-4):169?177.Amba Kulkarni, Sheetal Pokar, and Devanand Shukl.
2010.
Designing a constraint based parser forSanskrit.
In G N Jha, editor, Proceedings of the 4th International Sanskrit Computational LinguisticsSymposium.
Springer-Verlag LNAI 6465.Amba Kulkarni.
2013.
A deterministic dependency parser with dynamic programming for Sanskrit.
InProceedings of the Second International Conference on Dependency Linguistics (DepLing 2013), pages157?166, Prague, August.
Charles University Matfyzpress, Prague, Czech Republic.Anil Kumar, Vipul Mittal, and Amba Kulkarni.
2010.
Sanskrit compound processor.
In G N Jha, editor,Proceedings of the International Sanskrit Computational Linguistics Symposium.
Springer-Verlag LNAI6465.Vipul Mittal.
2010.
Automatic sanskrit segmentizer using finite state transducers.
In Proceedingsof the ACL 2010 Student Research Workshop, pages 85?90, Uppsala, Sweden, July.
Association forComputational Linguistics.M.
Monier-Williams, E. Leumann, and C. Cappeller.
1999.
A Sanskrit-English Dictionary: EtymologicalAnd Philologically Arranged With Special Reference To Cognate Indo-European Languages.
AsianEducational Services.Sivaja S. Nair and Amba Kulkarni.
2010.
The knowledge structure in Amarakos?a.
In G N Jha, editor,Proceedings of the International Sanskrit Computational Linguistics Symposium.
Springer-Verlag LNAI6465.Peter Scharf and Malcolm Hyman.
2009.
Linguistic Issues in Encoding Sanskrit.
Motilal Banarsidass,Delhi.S.C.
Vasu.
1980.
The As.t.a?dhya?y??
of Pa?n.ini.
Motilal Banarsidass.51
