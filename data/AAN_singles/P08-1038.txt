Proceedings of ACL-08: HLT, pages 326?334,Columbus, Ohio, USA, June 2008. c?2008 Association for Computational LinguisticsA Logical Basis for the D Combinator and Normal Form in CCGFrederick Hoyt and Jason BaldridgeThe Department of LinguisticsThe University of Texas at Austin{fmhoyt,jbaldrid}@mail.utexas.eduAbstractThe standard set of rules defined in Combina-tory Categorial Grammar (CCG) fails to pro-vide satisfactory analyses for a number of syn-tactic structures found in natural languages.These structures can be analyzed elegantly byaugmenting CCG with a class of rules basedon the combinator D (Curry and Feys, 1958).We show two ways to derive the D rules:one based on unary composition and the otherbased on a logical characterization of CCG?srule base (Baldridge, 2002).
We also showhow Eisner?s (1996) normal form constraintsfollow from this logic, ensuring that the Drules do not lead to spurious ambiguities.1 IntroductionCombinatory Categorial Grammar (CCG, Steedman(2000)) is a compositional, semantically transparentformalism that is both linguistically expressive andcomputationally tractable.
It has been used for a va-riety of tasks, such as wide-coverage parsing (Hock-enmaier and Steedman, 2002; Clark and Curran,2007), sentence realization (White, 2006), learningsemantic parsers (Zettlemoyer and Collins, 2007),dialog systems (Kruijff et al, 2007), grammar engi-neering (Beavers, 2004; Baldridge et al, 2007), andmodeling syntactic priming (Reitter et al, 2006).A distinctive aspect of CCG is that it providesa very flexible notion of constituency.
This sup-ports elegant analyses of several phenomena (e.g.,coordination, long-distance extraction, and intona-tion) and allows incremental parsing with the com-petence grammar (Steedman, 2000).
Here, we arguethat even with its flexibility, CCG as standardly de-fined is not permissive enough for certain linguisticconstructions and greater incrementality.
FollowingWittenburg (1987), we remedy this by adding a setof rules based on the D combinator of combinatorylogic (Curry and Feys, 1958).
(1) x/(y/z) :f y/w :g ?
x/(w/z) :?h.f(?x.ghx)We show that CCG augmented with this rule im-proves CCG?s empirical coverage by allowing betteranalyses of modal verbs in English and causatives inSpanish, and certain coordinate constructions.The D rules are well-behaved; we show this byderiving them both from unary composition andfrom the logic defined by Baldridge (2002).
Bothperspectives on D ensure that the new rules are com-patible with normal form constraints (Eisner, 1996)for controlling spurious ambiguity.
The logic alsoensures that the new rules are subject to modalitiesconsistent with those defined by Baldridge and Krui-jff (2003).
Furthermore, we define a logic that pro-duces Eisner?s constraints as grammar internal theo-rems rather than parsing stipulations.2 Combinatory Categorial GrammarCCG uses a universal set of syntactic rules based onthe B, T, and S combinators of combinatory logic(Curry and Feys, 1958):(2) B: ((Bf)g)x = f(gx)T: Txf = fxS: ((Sf)g)x = fx(gx)CCG functors are functions over strings of symbols,so different linearized versions of each of the com-binators have to be specified (ignoring S here):326(3) FA: (>) x/?y y ?
x(<) y x\?y ?
xB: (>B) x/y y/z ?
x/z(<B) y\z x\y ?
x\z(>B?)
x/?y y\?z ?
x\?z(<B?)
y/?z x\?y ?
x/?zT: (>T) x ?
t/i(t\ix)(<T) x ?
t\i(t/ix)The symbols {?, , ?, ?}
are modalities that allowsubtypes of slashes to be defined; this in turn allowsthe slashes on categories to be defined in a way thatallows them to be used (or not) with specific subsetsof the above rules.
The rules of this multimodal ver-sion of CCG (Baldridge, 2002; Baldridge and Krui-jff, 2003) are derived as theorems of a CategorialType Logic (CTL, Moortgat (1997)).This treats CCG as a compilation of CTL proofs,providing a principled, grammar-internal basis forrestrictions on the CCG rules, transferring language-particular restrictions on rule application to the lex-icon, and allowing the CCG rules to be viewedas grammatical universals (Baldridge and Kruijff,2003; Steedman and Baldridge, To Appear).These rules?especially the B rules?allowderivations to be partially associative: given appro-priate type assignments, a string ABC can be ana-lyzed as either A(BC) or (AB)C. This associativityleads to elegant analyses of phenomena that demandmore effort in less flexible frameworks.
One of thebest known is ?odd constituent?
coordination:(4) Bob gave Stan a beer and Max a coke.
(5) I will buy and you will eat a cheeseburger.The coordinated constituents are challenging be-cause they are at odds with standardly assumedphrase structure constituents.
In CCG, such con-stituents simply follow from the associativity addedby the B and T rules.
For example, given the cate-gory assignments in (6) and the abbreviations in (7),(4) is analyzed as in (8) and (9).
Each conjunct isa pair of type-raised NPs combined by means of the>B-rule, deriving two composed constituents thatare arguments to the conjunction:1(6) i.
Bob ` s/(s\np)1We follow (Steedman, 2000) in assuming that type-raisingapplies in the lexicon, and therefore that nominals such as Stanii.
Stan, Max `((s\np)/np)\(((s\np)/np)/np)iii.
a beer, a coke ` (s\np)\((s\np)/np)iv.
and ` (x\?x)/?xv.
gave ` ((s\np)/np)/np(7) i. vp = s\npii.
tv = (s\np)/npiii.
dtv = ((s\np)/np)/np(8) Stan a beer and Max a coketv\dt vp\tv (x\?x)/?x tv\dt vp\tv<B <Bvp\dt vp\dt>(vp\dt)\(vp\dt)<vp\dt(9) Bill gave Stan a beer and Max a cokes/vp dt vp\dt<vp>sSimilarly, I will buy is derived with category s/npby assuming the category (6i) for I and composingthat with both verbs in turn.CCG?s approach is appealing because such con-stituents are not odd at all: they simply follow fromthe fact that CCG is a system of type-based gram-matical inference that allows left associativity.3 Linguistic Motivation for DCCG is only partially associative.
Here, we discussseveral situations which require greater associativityand thus cannot be given an adequate analysis withCCG as standardly defined.
These structures havein common that a category of the form x|(y|z) mustcombine with one of the form y|w?exactly the con-figuration handled by the D schemata in (1).3.1 Cross-Conjunct ExtractionIn the first situation, a question word is distributedacross auxiliary or subordinating verb categories:(10) .
.
.what you can and what you must not baseyour verdict on.We call this cross-conjunct extraction.
It was notedby Pickering and Barry (1993) for English, but to thebest of our knowledge it has not been treated in thehave type-raised lexical assignments.
We also suppress seman-tic representations in the derivations for the sake of space.327CCG literature, nor noted in other languages.
Theproblem it presents to CCG is clear in (11), whichshows the necessary derivation of (10) using stan-dard multimodal category assignments.
For the to-kens of what to form constituents with you can andyou must not, they must must combine directly.
Theproblem is that these constituents (in bold) cannot becreated with the standard CCG combinators in (3).
(11) ss/(vp/np)s/(vp/np)s/(s/np)whats/vpyou can(s/(vp/np))\(s/(vp/np))(x\?x)/?xands/(vp/np)s/(s/np)whats/vpyou must notvp/npbase your verdict onThe category for and is marked for non-associativitywith ?, and thus combines with other expressionsonly by function application (Baldridge, 2002).
Thisensures that each conjunct is a discrete constituent.Cross-conjunct extraction occurs in other lan-guages as well, including Dutch (12), German (13),Romanian (14), and Spanish (15):(12) datthatikIhaarherwilwantenanddatthatikIhaarhermoetcanhelpen.help?.
.
.
that I want to and that I can help her.?
(13) WenwhokanncanichIundandwenwhodarfmayichInochstillw?hlen?choose?Whom can I and whom may I still chose??
(14) Gandeste-teconsider.imper.2s-refl.2scuiwho.dat?ewhatvrei,want.2ss?iandcuiwho.dat?ewhatpot?i,can.2ssa?todai.give.subj.2s?Consider to whom you want and to whom youare able to give what.?
(15) Memeloitpuedescan.2syandmemeloitdebesmust.2sexplicarask?You can and should explain it to me.
?It is thus a general phenomenon, not just a quirkof English.
While it could be handled with extra cat-egories, such as (s/(vp/np))/(s/np) for what, this isexactly the sort of strong-arm tactic that inclusion ofthe standard B, T, and S rules is meant to avoid.3.2 English Auxiliary VerbsThe standard CCG analysis for English auxiliaryverbs is the type exemplified in (16) (Steedman,2000, 68), interpreted as a unary operator over sen-tence meanings (Gamut, 1991; Kratzer, 1991):(16) can ` (s\np)/(s\np) : ?P et?x.
?P (x)However, this type is empirically underdetermined,given a widely-noted set of generalizations suggest-ing that auxiliaries and raising verbs take no subjectargument at all (Jacobson, 1990, a.o.).
(17) i.
Lack of syntactic restrictions on the subject;ii.
Lack of semantic restrictions on the subject;iii.
Inheritance of selectional restrictions from thesubordinate predicate.Two arguments are made for (16).
First, it is nec-essary so that type-raised subjects can compose withthe auxiliary in extraction contexts, as in (18):(18) what I can eats/(s/np) s/vp vp/vp tv>Bs/vp>Bs/np>sSecond, it is claimed to be necessary in order to ac-count for subject-verb agreement, on the assumptionthat agreement features are domain restrictions onfunctors of type s\np (Steedman, 1992, 1996).The first argument is the topic of this paper, and,as we show below, is refuted by the use of the D-combinator.
The second argument is undermined byexamples like (19):(19) There appear to have been [ neither [ any catas-trophic consequences ], nor [ a drastic change inthe average age of retirement ] ] .In (19), appear agrees with two negative-polarity-sensitive NPs trapped inside a neither-nor coordi-nate structure in which they are licensed.
Ap-pear therefore does not combine with them directly,showing that the agreement relation need not be me-diated by direct application of a subject argument.We conclude, therefore, that the assignment of thevp/vp type to English auxiliaries and modal verbs isunsupported on both formal and linguistic grounds.Following Jacobson (1990), a more empirically-motivated assignment is (20):328(20) can ` s/s : ?pt .
?pCombining (20) with a type-raised subject presentsanother instance of the structure in (1), where thatquestion words are represented as variable-bindingoperators (Groenendijk and Stokhof, 1997):(21) what I cans/(s/np) : ?Qet?yQy s/vp : ?P et .P i?
s/s : ?pt .?p?
?
?
>B ?
?
?3.3 The Spanish Causative ConstructionThe schema in (1) is also found in the widely-studied Romance causative construction (Andrewsand Manning, 1999, a.m.o), illustrated in (22):(22) Noscl.1phizomade.3sleerreadEltheSe?orLorddeoflostheAnillos.Rings?He made us read The Lord of the Rings.
?The aspect of the construction that is relevant hereis that the causative verb hacer appears to take anobject argument understood as the subject or agentof the subordinate verb (the causee).
However, it hasbeen argued that Spanish causative verbs do not infact take objects (Ackerman and Moore, 1999, andrefs therein).
There are two arguments for this.First, syntactic alternations that apply to object-taking verbs, such as passivization and periphrasiswith subjunctive complements, do not apply to hacer(Luj?n, 1980).
Second, hacer specifies neither thecase form of the causee, nor any semantic entail-ments with respect to it.
These are instead deter-mined by syntactic, semantic, and pragmatic factors,such as transitivity, word order, animacy, gender, so-cial prestige, and referential specificity (Finnemann,1982, a.o).
Thus, there is neither syntactic nor se-mantic evidence that hacer takes an object argument.On this basis, we assign hacer the category (23):(23) hacer ` (s\np)/s : ?P?x.cause?PxHowever, Spanish has examples of cross-conjunctextraction in which hacer hosts clitics:(24) Nonotsoloonlylecl.dat.3msordenaron,ordered.3psino quebutlecl.dat.3mshicieronmade.3pbarrersweeplatheverada.sidewalk?They not only ordered him to, but also made himsweep the sidewalk.
?This shows another instance of the schema in (1),which is undefined for any of the combinators in (3):(25) le hicieron barrer la verada(s\np)/((s\np)/np) (s\np)/s (s|np)?
?
?
>B ?
?
?3.4 Analyses Based on DThe preceding data motivates adding D rules (we re-turn to the distribution of the modalities below):(26) >D x/(y/z) y/w ?
x/(w/z)>D?
x/?
(y/?z) y\?w ?
x\?(w/?z)>D?
x/(y\?z) y/?w ?
x/(w\?z)>D? x/?
(y\z) y\?w ?
x\?
(w\z)(27) <D y\w x\(y\z) ?
x\(w\z)<D?
y/?w x\?
(y\?z) ?
x/?(w\?z)<D?
y\?w x\(y/?z) ?
x\(w/?z)<D? y/?w x\?
(y/z) ?
x/?
(w/z)To illustrate with example (10), one application of>D allows you and can to combine when the auxil-iary is given the principled type assignment s/s, andanother combines what with the result.
(28) what you cans/(s/np) s/(s\?np) s/?s>D?s/(s\?np)>Ds/((s\?np)/np)The derivation then proceeds in the usual way.Likewise, D handles the Spanish causative con-structions (29) straightforwardly :(29) lo hice dormir(s\np)/((s\np)/np) (s\np)/s s/np>D(s\np)/(s/np)>s\npThe D-rules thus provide straightforward analy-ses of such constructions by delivering flexible con-stituency while maintaining CCG?s committment tolow categorial ambiguity and semantic transparency.4 Deriving Eisner Normal FormAdding new rules can have implications for parsingefficiency.
In this section, we show that the D rulesfit naturally within standard normal form constraintsfor CCG parsing (Eisner, 1996), by providing both329combinatory and logical bases for D. This addition-ally allows Eisner?s normal form constraints to bederived as grammar internal theorems.4.1 The Spurious Ambiguity ProblemCCG?s flexibility is useful for linguistic analy-ses, but leads to spurious ambiguity (Wittenburg,1987) due to the associativity introduced by theB and T rules.
This can incur a high compu-tational cost which parsers must deal with.
Sev-eral techniques have been proposed for the prob-lem (Wittenburg, 1987; Karttunen, 1989; Heppleand Morrill, 1989; Eisner, 1996).
The most com-monly used are Karttunnen?s chart subsumptioncheck (White and Baldridge, 2003; Hockenmaierand Steedman, 2002) and Eisner?s normal-form con-straints (Bozsahin, 1998; Clark and Curran, 2007).Eisner?s normal form, referred to here as EisnerNF and paraphrased in (30), has the advantage of notrequiring comparisons of logical forms: it functionspurely on the syntactic types being combined.
(30) For a set S of semantically equivalent2 parse treesfor a string ABC, admit the unique parse tree suchthat at least one of (i) or (ii) holds:i.
C is not the argument of (AB) resulting fromapplication of >B1+.ii.
A is not the argument of (BC) resulting fromapplication of <B1+.The implication is that outputs of B1+ rules areinert, using the terminology of Baldridge (2002).Inert slashes are Baldridge?s (2002) encoding inOpenCCG3 of his CTL interpretation of Steedman?s(2000) antecedent-government feature.Eisner derives (30) from two theorems about theset of semantically equivalent parses that a CCGparser will generate for a given string (see (Eisner,1996) for proofs and discussion of the theorems):(31) Theorem 1 : For every parse tree ?, there is a se-mantically equivalent parse-tree NF (?)
in whichno node resulting from application of B or S func-tions as the primary functor in a rule application.
(32) Theorem 2 : If NF (?)
and NF (??)
are distinctparse trees, then their model-theoretic interpreta-tions are distinct.2Two parse trees are semantically equivalent if: (i) their leafnodes have equivalent interpretations, and (ii) equivalent scoperelations hold between their respective leaf-node meanings.3http://openccg.sourceforge.netEisner uses a generalized form Bn (n?0) of compo-sition that subsumes function application:4(33) >Bn : x/y y$n ?
x$n(34) <Bn : y$n x\y ?
x$nBased on these theorems, Eisner defines NF as fol-lows (for R, S, T as Bn or S, and Q=Bn?1 ):(35) Given a parse tree ?:i.
If ?
is a lexical item, then ?
is in Eisner-NF.ii.
If ?
is a parse tree ?R, ?, ??
and NF (?
),NF (?
), then NF (?).iii.
If ?
is not in Eisner-NF, thenNF (?)
= ?Q, ?1 , ?2 ?, andNF (?)
= ?S, ?1 , NF (?T, ?2 , ??
)?.As a parsing constraint, (30) is a filter on the setof parses produced for a given string.
It preserves allthe unique semantic forms generated for the stringwhile eliminating all spurious ambiguities: it is bothsafe and complete.Given the utility of Eisner NF for practical CCGparsing, the D rules we propose should be compati-ble with (30).
This requires that the generalizationsunderlying (30) apply to D as well.
In the remainderof this section, we show this in two ways.4.2 Deriving D from BThe first is to derive the binary B rules from a unaryrule based on the unary combinator B?
:5(36) x/y : fxy ?
(x/z)/(y/z) : ?hzy?xz .f(hx)We then derive D from B?
and show that clause (iii)of (35) holds of Q schematized over both B and D.Applying D to an argument sequence is equiva-lent to compound application of binary B:(37) (((Df)g)h)x = (fg)(hx)(38) ((((BB)f)g)h)x = ((B(fg))h)x = (fg)(hx)Syntactically, binary B is equivalent to applicationof unary B?
to the primary functor ?, followed byapplying the secondary functor ?
to the output of B?by means of function application (Jacobson, 1999):4We use Steedman?s (Steedman, 1996) ?$?-convention forrepresenting argument stacks of length n, for n ?
0.5This is Lambek?s (1958) Division rule, also known as the?Geach rule?
(Jacobson, 1999).330(39) ?
?x/y y/z>B?
(x/z)/(y/z)>x/zBn (n ?
1) is derived by applying B?
to the primaryfunctor n times.
For example, B2 is derived by 2applications of B?
to the primary functor:(40) ?
?x/y (y/w)/zB?(x/w)/(y/w)B?
((x/w)/z)/((y/w)/z)>(x/w)/zThe rules for D correspond to application of B?
toboth the primary and secondary functors, followedby function application:(41) ?
?x/(y/z) y/w>B?
>B?
(x/(w/z))/((y/z)/(w/z)) (y/z)/(w/z)>x/(w/z)As with Bn , Dn?1 can be derived by iterative appli-cation of B?
to both primary and secondary functors.Because B can be derived from B?, clause (iii) of(35) is equivalent to the following:(42) If ?
is not in Eisner-NF, thenNF (?)
= ?FA, ?B?, ?1 ?, ?2 ?, such thatNF (?)
= ?S, ?1 , NF (?T, ?2 , ??
)?Interpreted in terms of B?, both B and D involve ap-plication of B?
to the primary functor.
It follows thatTheorem I applies directly to D simply by virtue ofthe equivalence between binary B and unary-B?+FA.Eisner?s NF constraints can then be reinterpretedas a constraint on B?
requiring its output to be an inertresult category.
We represent this in terms of the B?-rules introducing an inert slash, indicated with ?!?
(adopting the convention from OpenCCG):(43) x/y : fxy ?
(x/!z)/(y/!z) : ?hzy?xzfhxHence, both binary B and D return inert functors:(44) ?
?x/y y/z>B?
(x/!z)/(y/!z)>x/!z(45) ?
?x/(y/z) y/w>B?
>B?(x/!(w/z))/((y/z)/!
(w/z)) (y/!z)/(w/!z)>x/!
(w/z)The binary substitution (S) combinator can besimilarly incorporated into the system.
Unary sub-stitution S?
is like B?
except that it introduces a slashon only the argument-side of the input functor.
Westipulate that S?
returns a category with inert slashes:(46) (S?)
(x/y)/z ?
(x/!z)/(y/!z)T is by definition unary.
It follows that all the binaryrules in CCG (including the D-rules) can be reducedto (iterated) instantiations of the unary combinatorsB?, S?, or T plus function application.This provides a basis for CCG in which all com-binatory rules are derived from unary B?
S?, and T.4.3 A Logical Basis for Eisner Normal FormThe previous section shows that deriving CCG rulesfrom unary combinators allows us to derive the D-rules while preserving Eisner NF.
In this section, wepresent an alternate formulation of Eisner NF withBaldridge?s (2002) CTL basis for CCG.
This for-mulation allows us to derive the D-rules as before,and does so in a way that seamlessly integrates withBaldridge?s system of modalized functors.In CTL, B and B?
are proofs derived via struc-tural rules that allow associativity and permutationof symbols within a sequent, in combination withthe slash introduction and elimination rules of thebase logic.
To control application of these rules,Baldridge keys them to binary modal operators  (forassociativity) and ?
(for permutation).
Given these,>B is proven in (47):(47) ?
` x/y ?
` y/z [a ` z][/E](?
? ai) ` y[/E](?
? (?
? ai)) ` x[RA]((?
? ?)
? ai) ` x[/I](?
? ?)
` x/zIn a CCG ruleset compiled from such logics, acategory must have an appropriately decorated slashin order to be the input to a rule.
This means thatrules apply universally, without language-specific331restrictions.
Instead, restrictions can only be de-clared via modalities marked on lexical categories.Unary B?
and the D rules in 4.2 can be derived us-ing the same logic.
For example, >B?
can be derivedas in (48):(48) ?
` x/y [f ` y/z]1 [a ` z]2[/E](f1 ? a2 ) ` y[/E](?
? (f1 ? a2 )) ` x[RA]((?
? f1 ) ? a2 ) ` x[/I](?
? f1 ) ` x/z[/I]?
` (x/z)/(y/z)The D rules are also theorems of this system.
Forexample, the proof for >D applies (48) as a lemmato each of the primary and secondary functors:(49) ?
` x/(y/z) ?
` y/w>B?
>B??
` (x/(w/z))/((y/z)/(w/z)) ?
` (y/z)/(w/z)[/E](?
? ?)
` x/(w/z)>D?
involves an associative version of B?
appliedto the primary functor (50), and a permutative ver-sion to the secondary functor (51).
(50) ?
` x/(y\?z) [f ` (y\?z)/?
(w\?z)]1 [g ` w\?z]2[/?E](f1 ??
g2 ) ` y\?z[/E](?
? (f1 ?.
g2 )) ` x[RA]((?
? f1 ) ?.
g2 ) ` x[/?I](?
? f1 ) ` x/?(w\?z)[/I]?
` (x/?(w\?z))/((y\?z)/?
(w\?z))(51) ?
` y/?w [a ` z]1 [f ` w\?z]2[\?E](a1 ??
f2 ) ` w[/?E](?
??
(a1 ??
f2 )) ` y[LP ](a1 ??
(?
??
f2 )) ` y[\?I](?
??
f2 ) ` y\?z[/?I]?
` (y\?z)/?
(w\?z)Rules for D with appropriate modalities can there-fore be incorporated seamlessly into CCG.In the preceding subsection, we encoded EisnerNF with inert slashes.
In Baldridge?s CTL basisfor CCG, inert slashes are represented as functorsseeking non-lexical arguments, represented as cate-gories marked with an antecedent-governed feature,reflecting the intuition that non-lexical argumentshave to be ?bound?
by a superordinate functor.This is based on an interpretation of antecedent-government as a unary modality ?ant that allowsstructures marked by it to permute to the left or rightperiphery of a structure:6(52) ((?a ??
?ant?b) ??
?c) ` x((?a ??
?c) ??
?ant?b) ` x[ARP](?a ??
(?ant?b ??
?c)) ` x(?ant?b ??
(?a ??
?c)) ` x[ALP]Unlike permutation rules without ?ant , these per-mutation rules can only be used in a proof whenpreceeded by a hypothetical category marked withthe 2?ant modality.
The elimination rule for 2?-modalities introduces a corresponding ?-markedobject in the resulting structure, feeding the rule:(53) [a ` 2?antz]1[2?E]?anta1 ` z ?
` y\?z[\?E]?
` x/?y (?anta1 ??
?)
` y[/?E](?
??
(?anta1 ??
?))
` x[ALP ][a ` ?ant2?antz]2 (?anta1 ??
(?
??
?))
` x[?E](a ??
(?
??
?))
` x[\?I]2(?
??
?)
` x\?
?ant2?antzRe-introduction of the [a ` ?ant2?antz]k hypothesisresults in a functor the argument of which is markedwith ?ant2?ant .
Because lexical categories are notmarked as such, the functor cannot take a lexical ar-gument, and so is effectively an inert functor.In Baldridge?s (2002) system, only proofs involv-ing the ARP and ALP rules produce inert categories.In Eisner NF, all instances of B-rules result in inertcategories.
This can be reproduced in Baldridge?ssystem simply by keying all structural rules to theant-modality, the result being that all proofs involv-ing structural rules result in inert functors.As desired, the D-rules result in inert categories aswell.
For example, >D is derived as follows (2?antand ?ant are abbreviated as 2?
and ?
):6Note that the diamond operator used here is a syntactic op-erator, rather than a semantic operator as used in (16) above.The unary modalities used in CTL describe accessibility rela-tionships between subtypes and supertypes of particular cate-gories: in effect, they define feature hierarchies.
See Moortgat(1997) and Oehrle (To Appear) for further explanation.332(54) ?
` y/w [a ` 2?
(w/z)]1 [b ` 2?z]2[2?E] [2?E]?a ` w/z ?b ` z[/E](?a ? ?b) ` w[/E](?
? (?a ? ?b)) ` y[RA][c ` ?2?z]3 ((?
? ?a) ? ?b) ` y[?E]2((?
? ?a) ? c) ` y[/I]3(?
? ?a) ` y/?2?z(55) (54)...?
` x/(y/?2?z) (?
? ?a) ` y/?2?z[/E](?
? (?
? ?a)) ` x[RA][d ` ?2?
(w/z)]4 ((?
? ?)
? ?a) ` x[?E]1((?
? ?)
? d) ` x[/I]4(?
? ?)
` x/?2?
(w/z)(54)-(55) can be used as a lemma corresponding tothe CCG rule in (57):(56) ?
` x/(y/?2?z) ?
` y/w[D](?
? ?)
` x/?2?
(w/z)(57) x/(y/!z) y/w ?
x/!
(w/z)This means that all CCG rules compiled from thelogic?which requires ?ant to licence the structuralrules necessary to prove the rules?return inert func-tors.
Eisner NF thus falls out of the logic because allinstances of B, D, and S produce inert categories.This in turns allows us to view Eisner NF as part ofa theory of grammatical competence, in addition tobeing a useful technique for constraining parsing.5 ConclusionIncluding the D-combinator rules in the CCG ruleset lets us capture several linguistic generalizationsthat lack satisfactory analyses in standard CCG.Furthermore, CCG augmented with D is compat-ible with Eisner NF (Eisner, 1996), a standardtechnique for controlling derivational ambiguity inCCG-parsers, and also with the modalized versionof CCG (Baldridge and Kruijff, 2003).
A conse-quence is that both the D rules and the NF con-straints can be derived from a grammar-internal per-spective.
This extends CCG?s linguistic applicabil-ity without sacrificing efficiency.Wittenburg (1987) originally proposed using rulesbased on D as a way to reduce spurious ambiguity,which he achieved by eliminating B rules entirelyand replacing them with variations on D. Witten-burg notes that doing so produces as many instancesof D as there are rules in the standard rule set.
Ourproposal retains B and S, but, thanks to Eisner NF,eliminates spurious ambiguity, a result that Witten-burg was not able to realize at the time.Our approach can be incorporated into Eisner NFstraightforwardly However, Eisner NF disprefers in-cremental analyses by forcing right-corner analysesof long-distance dependencies, such as in (58):(58) (What (does (Grommet (think (Tottie (said (Victor(knows (Wallace ate)))))))))?For applications that call for increased incremental-ity (e.g., aligning visual and spoken input incremen-tally (Kruijff et al, 2007)), CCG rules that do notproduce inert categories can be derived a CTL ba-sis that does not require ?ant for associativity andpermutation.
The D-rules derived from this kind ofCTL specification would allow for left-corner analy-ses of such dependencies with the competence gram-mar.
An extracted element can ?wrap around?
thewords intervening between it and its extraction site.For example, D would allow the following bracket-ing for the same example (while producing the samelogical form):(59) (((((((((What does) Grommet) think) Tottie) said)Victor) knows) Wallace) ate)?Finally, the unary combinator basis for CCG pro-vides an interesting additional specification for gen-erating CCG rules.
Like the CTL basis, the unarycombinator basis can produce a much wider rangeof possible rules, such as D rules, that may be rel-evant for linguistic applications.
Whichever basisis used, inclusion of the D-rules increases empiricalcoverage, while at the same time preserving CCG?scomputational attractiveness.AcknowledgmentsThanks Mark Steedman for extensive comments andsuggestions, and particularly for noting the relation-ship between the D-rules and unary B?.
Thanksalso to Emmon Bach, Cem Bozsahin, Jason Eisner,Geert-Jan Kruijff and the ACL reviewers.333ReferencesFarrell Ackerman and John Moore.
1999.
Syntagmaticand Paradigmatic Dimensions of Causee Encodings.Linguistics and Philosophy, 24:1?44.Avery D. Andrews and Christopher D. Manning.
1999.Complex Predicates and Information Spreading inLFG.
CSLI Publications, Palo Alto, California.Jason Baldridge and Geert-Jan Kruijff.
2003.
Multi-Modal Combinatory Categorial Grammar.
In Proceed-ings of EACL 10, pages 211?218.Jason Baldridge, Sudipta Chatterjee, Alexis Palmer, andBen Wing.
2007.
DotCCG and VisCCG: Wiki andProgramming Paradigms for Improved Grammar En-gineering with OpenCCG.
In Proceedings of GEAF2007.Jason Baldridge.
2002.
Lexically Specified DerivationalControl in Combinatory Categorial Grammar.
Ph.D.thesis, University of Edinburgh.John Beavers.
2004.
Type-inheritance CombinatoryCategorial Grammar.
In Proceedings of COLING-04,Geneva, Switzerland.Robert Borsley and Kersti B?rjars, editors.
To Appear.Non-Transformational Syntax: A Guide to CurrentModels.
Blackwell.Cem Bozsahin.
1998.
Deriving the Predicate-ArgumentStructure for a Free Word Order Language.
In Pro-ceedings of COLING-ACL ?98.Stephen Clark and James Curran.
2007.
Wide-CoverageEfficient Statistical Parsing with CCG and Log-LinearModels.
Computational Linguistics, 33(4).Haskell B. Curry and Robert Feys.
1958.
CombinatoryLogic, volume 1.
North Holland, Amsterdam.Jason Eisner.
1996.
Efficient Normal-Form Parsing forCombinatory Categorial Grammars.
In Proceedings ofthe ACL 34.Michael D Finnemann.
1982.
Aspects of the SpanishCausative Construction.
Ph.D. thesis, University ofMinnesota.L.
T. F. Gamut.
1991.
Logic, Language, and Meaning,volume II.
Chicago University Press.Jeroen Groenendijk and Martin Stokhof.
1997.
Ques-tions.
In Johan van Benthem and Alice ter Meulen,editors, Handbook of Logic and Language, chapter 19,pages 1055?1124.
Elsevier Science, Amsterdam.Mark Hepple and Glyn Morrill.
1989.
Parsing andDerivational Equivalence.
In Proceedings of EACL 4.Julia Hockenmaier and Mark Steedman.
2002.
Gen-erative Models for Statistical Parsing with Combina-tory Categorial Grammar.
In Proceedings.
of ACL 40,pages 335?342, Philadelpha, PA.Pauline Jacobson.
1990.
Raising as Function Composi-tion.
Linguistics and Philosophy, 13:423?475.Pauline Jacobson.
1999.
Towards a Variable-Free Se-mantics.
Linguistics and Philosophy, 22:117?184.Lauri Karttunen.
1989.
Radical Lexicalism.
In MarkBaltin and Anthony Kroch, editors, Alternative Con-ceptions of Phrase Structure.
University of ChicagoPress, Chicago.Angelika Kratzer.
1991.
Modality.
In Arnim von Ste-chow and Dieter Wunderlich, editors, Semantics: AnInternational Handbook of Contemporary SemanticResearch, pages 639?650.
Walter de Gruyter, Berlin.Geert-Jan M. Kruijff, Pierre Lison, Trevor Benjamin,Henrik Jacobsson, and Nick Hawes.
2007.
Incremen-tal, Multi-Level Processing for Comprehending Situ-ated Dialogue in Human-Robot Interaction.
In Lan-guage and Robots: Proceedings from the Symposium(LangRo?2007), Aveiro, Portugal.Joachim Lambek.
1958.
The mathematics of sentencestructure.
American Mathematical Monthly, 65:154?169.Marta Luj?n.
1980.
Clitic Promotion and Mood in Span-ish Verbal Complements.
Linguistics, 18:381?484.Michael Moortgat.
1997.
Categorial Type Logics.
In Jo-han van Benthem and Alice ter Meulen, editors, Hand-book of Logic and Language, pages 93?177.
NorthHolland, Amsterdam.Richard T Oehrle.
To Appear.
Multi-Modal Type Log-ical Grammar.
In Boersley and B?rjars (Borsley andB?rjars, To Appear).Martin Pickering and Guy Barry.
1993.
DependencyCategorial Grammar and Coordination.
Linguistics,31:855?902.David Reitter, Julia Hockenmaier, and Frank Keller.2006.
Priming Effects in Combinatory CategorialGrammar.
In Proceedings of EMNLP-2006.Mark Steedman and Jason Baldridge.
To Appear.
Com-binatory Categorial Grammar.
In Borsley and B?rjars(Borsley and B?rjars, To Appear).Mark Steedman.
1996.
Surface Structure and Interpre-tation.
MIT Press.Mark Steedman.
2000.
The Syntactic Process.
MITPress.Michael White and Jason Baldridge.
2003.
AdaptingChart Realization to CCG.
In Proceedings of ENLG.Michael White.
2006.
Efficient Realization of Coordi-nate Structures in Combinatory Categorial Grammar.Research on Language and Computation, 4(1):39?75.Kent Wittenburg.
1987.
Predictive Combinators: AMethod for Efficient Processing of Combinatory Cat-egorial Grammars.
In Proceedings of ACL 25.Luke Zettlemoyer and Michael Collins.
2007.
On-line Learning of Relaxed CCG Grammars for Parsingto Logical Form.
In Proceedings of EMNLP-CoNLL2007.334
