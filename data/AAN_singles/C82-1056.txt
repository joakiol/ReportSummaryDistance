COLING 82, J. Horeclc)) (ed.
)North-Holland Publishing Company?
Academia, 1982NATNRAL LANGUAGE UPDATES*Sharon C. SalveterDavid MaierComputer Science DepartmentState University of New York at Stony BrookStony Brook, New York 11794USAA great deal of research effort has been expended in support of natural language(NL) database querying.
English and English-like query systems already exist,such as ROBOT\[Ha77\], TQA\[Da78\], LUNAREWo76\] and those described by Kaplan\[Ka79\],Walker\[Wa78\] and Waltz\[Wa75\].
Little effort has gone to NL database update\[KD81, Br81, Sk80, CHSI\].
We want to extend l~ interaction to include datamodification (insert, delete, modify) rather than simply data extraction.
Thedesirability and unavailability of NL database modification has been noted byWiederhold, et al[WiSl\].
Database systems currently do not contain structuresfor explicit modelling of real world changes.N~ querying of a database requires that the correspondence between the semanticdescription of the real world and the database definition be explicitly stated.The NL query system must translate a question phrased in terms of the semanticdescription into a question phrased in terms of the database definition, that is,into a data retrieval command in the language of the database system.
For NLdatabase modification, a stative correspondence between database states and realworld states is not adequate.
To suoDort NL undate we need to renresent an activecorrespondence, the connection between real world changes and database updates.We have a means to describe the actions that change the state of the real world:active verbs.
We also have a means to describe a change in the database state:a data manipulation language (DML) command.
We must capture the notion that anaction in the real world causes changes in the real world that must be reflectedin the database, as shown in Fig.
i.
But given a real world action, how do wefind a DML sequence that will accomplish the corresponding changes in thedatabase?
We need to connect verbs like "schedule," "hire" and "reserve" withsome structures that dictate appropriate D~ sequences that perform the corres-ponding updates to the database.
In addition, a verb may denote various actions,that is, it may have different senses.There is no explicit database object that re~resents all the changes in the data-base that correspond to the changes in the real world brought about byactions such as "schedule."
The desired situation is shown in Fig.
2, where RWSistatively corresponds to DBSi.
We have an active correspondence between"schedule" and a parameterized database transaction PT.
Different instances ofthe schedule action, S1 and $2, cause different changes in the real world state,from RWSI to RWS2 or RWS3.
From the active correspondence of "schedule" and PTwe want to select the proper transaction, T1 or T2, to effect the correct changein the database.We propose a structure, a ~ ,  to represent action verbs on the databaseside.
One verbgraph is associated with each sense of a verb; its structure willrepresent all variants of that sense.
A verbgraph exploits commonalities amongthe variants of a verb sense and also distinguishes the variants.
A verbgraphis used to select DML sequences appropriate to reflect the actions of eachvariant of a verb sense.
The primitives in the structures are relations, attrib-utes and values from the database, employed in DML-like expressions.345346 S.C. SALVETER and D. MAIERVerbgraphs are extensions of frame structures used to represent verb meaning inMoran\[Sa78, Sa79\].
A verbgraph is directed acyclie graph with five kinds ofnodes: header~ footer, information~ AND and OR.
An example of a verbgraph isshown in Fig.
3.
The header is the source of the graph, the footer is the sink.Every information node (represented by a rectangle) has one incoming and outgoingedge.
An AND or OR node (represented by ,and  O , respectively) can have anynumber of incoming and outgoing edges.
A variant corresponds to a completedirected path in the graph.
We define a complete path to be a connected subgraphsuch that (i) the header is included; (2) the footer is included; (3) if it con-tains an information node, it contains the incoming and outgoing edge; (4) if itcontains an AND node, it contains a l l  lncoming and outgoing edges; and (5) if itcontains an OR node, it contains exactly one incoming and outgoing edge.
Anexample of a complete path in Fig.
3 is the header, the footer, information nodesA,B,D,J, and connector nodes a,b,c,d,g,k~l~n.Expressions in information nodes can be of two basic types: asslgnment and re-striction.
An example of the assignment type (node D in Fig.
3) is RES.date ?APFT.date.
An example of the restriction type (node B in Fig.
3) is APPT.who i__n_nRI, where, in this case, R1 is the result of a query against the database.A verbgraph supports NL update in the following manner.
Assume we have onlya single sense for each verb.
When a user update command is entered, informationis first extracted from the command, classified by domain and used to instantiateelements of the information nodes.
We then examine the graph to see if a uniquepath has been determined.
If not, we generate from the graph a question whoseresponse further constrains the possibilities.
Once a unique complete path isdetermined~ the information in that path is used to instantiate the parameterizedDML in the footer.The verbgraph SCHEDULE-APPOINTMENT in Fig.
3 is based on the following databaseschema:~MP(name, office, phone, supervisor)APPOINTMENT(name, date, time, duration, who, topic, location)MAILBOX(name, date, time, from, message)ROOMRESERVE(room, date, time, duration, reserver)with domains (permissible sets of values):DOMAIN ATTRIBUTES WITH THAT DOMAINpersonname name, who, from, reserver, suDervlsorroomnum room, location, officephonenum phonecalendardate dateclocktime timeelapsedtime durationtext message, topicThe basic variations for this verbgraph are whether the person being scheduled isin the company, whether a room should be reserved and whether ones supervisorshould be notified.Suppose we have the update command "Schedule an appointment With James Parker onApril 13," where James Parker is a company employee.
Interaction with the verb-graph proceeds as follows.
First, information is extracted from the command andclassified by domain.
For example, James Parker is in domain personname, whichcan only be used to instantlate APPT.name, AFFT.who, ApPT2.name and APPT2.who.However, since USER is a system variable, the only slots left are APPT.who andApPT2.name, which are necessarily the same.
Thus we can instantiate APPT.who andAPPT2.name with "James Parker."
We classify "April 13" as a calendardate andNATURAL LANGUAGE UPDATES 347Instantiate APPT.date, APPT2.date and RES.date with it, because all these must bethe same.
No more useful information is in the update request.Second, we examine the graph to see if a unique path has been determined.
Inthis case it has not.
However, other possibilities are constrained because weknow the path must go through node B.
This is because the path must go througheither node B or node C and by analyzing the response to retrieval RI, we candetermine it must be node B (i.e., James Parker is a company employee).Now we must determine the rest of the path.
One determination yet to be made iswhether or not node D is in the bath.
Because no room was mentioned in the query,we generate from the graph a question such as "Where will the appointment takeplace?"
Suppose the answer is "my office."
Presume we can translate '~y office"into the scheduler's office number.
This response has two effects.
First, weknow that no room has to be reserved, so node D is not in the path.
Second, wecan fill APPT.where in node F.Finally, all that remains to be decided is if node H is on the path.
A questionlike "Should we notify your supervisor?"
is generated.
Supposing the answer is"no."
Now the path is completely determined: it contains nodes A, B and F.Now that we have determined a unique path in the graph, we discover that not allthe information has been filled-in in every node on the path.
We now ask ques-tions to complete these nodes, such as What time?, For how long?
and What isthe topic?
At this point we have a unique complete path, so the appropriatecalls to INFORM can be made and the parameterized DML in the footer can befilled-in.Note that th e above interaction was quite rigidly structured.
In particular,i) After the user issues the original command, the verbgraphinstantiation program chooses the order of the subsequentdata entry.2) There is no provision for default, or optional values.3) Even if optional values were allowed, the program wouldhave to ask questions for them anyway, since the user hasno opportunity to specify them subsequent to the originalcommand.We want the interaction to be more user-directed.
Our general principle is toallow the user to volunteer additional information during the course of the inter-action, as long as the path has not been determined and values remain unspecified.We could use the following interaction protocol.
The user enters the initialcommand and hits return.
The program will accept additional lines of input.However, if the user Just hits return, and the program needs more information theprogram will generate a question.
The user then answers that question, followedby a return.
As before, additional information may be entered on subsequent lines.If the user hits return on an empty llne, another question is generated, ifnecessary.The following advantages accrue from letting the user volunteer information.
Theuser may choose the order of data entry.
We can now have optional values, but nothave to ask questions about them.
Since the user has an opportunity to volunteerany values, if he or she does not volunteer the value, a default value will beused.From our previous example, suppose topic is optional, with default null string.Consider the following interaction under our new paradigm.i > Schedule an appointment with James Parker ,on April 13348 S.C. SALVETER and D. MAIER2 > At 3:00pm for 15 minutes3 >4 > Where will the appointment take place?5 > My office6 > Notify my supervisor7 >The user enters the initial command on llne i.
In line 2 she volunteers supple-mental information.
Since llne 3 is empty, the program generates the question inline 4.
The user responds to the question in llne 5 and volunteers informationat line 6.
At line 7, a value for topic still has not been snecified, but theuser has the option.
Since an empty line is entered, and all non-obligatoryslots are filled in, the command interaction terminates, and the program uses thedefault for the optional slot.
DML can now be executed.Verbgraphs are also a means for specifying non-database operations, such as send-ing a confirmation letter when an appointment is made.
The verbgraph can also beused to express integrity constraints on the uDdate operation, just as functionaldependencies represent constraints on states of the database.
We can also easilyexpress integrity constraints on successive states of the database.
Finally,there is the opportunity for computer aided design of the verbgraDhs.We are currently considering hierarchically structured transactions, as used inthe TAXIS semantic model \[MBW80\], as an alternative to verbgraphs.
Verbgraphscan be ambiguous, and do not lend themselves to top-down design.
Hierarchicaltransactions would seem to overcome both problems.
Hierarchical transactions inTAXIS are not quite as versatile as verbgraphs in representing variants.
Thehierarchy is induced by hierarchies on the entity classes involved.
Variantsbased on the relationship among particular entities, as recorded in the database,cannot be represented.
Also all variants in the hierarchy must involve the sameentity classes, where we may want to involvesome classes only in certain variants.However, these shortcomings do not seem insurmountable.Real World DatabaseRwsl ~ ) DBSl~action \[ DNLRWS2 ( ) DBS2FIGURE iinduced connectionsI_ RWS2 ~ DBS2"Schedu le"4~Parameter i zedTransaction PTFigure 2NATURAL LANGUAGE UPDATES 349APPT.who i__nnRlAPPT2.name ?APPT.whoAPPT2.who ?
APPT.nameAPPT2.time ?APPT.timei APPT2.date  ?
APPT .date  :APPT2.topie ?APPT.tople~ SCHEDULE-APPOINTMENT>APPT.name + USERAPPT.time +In_n~utfrom elocktimeAPPT.duration +innp~ from elapsedtimeAPPT.date ?
input from calendardateAPPT.who ~inputfro____mmpersonnamei APPT.topie + input from text%,, ,% |\[ PT.who not in I 1IRES.room + APPT.whereAPPT2.where + APPT.where .
IRES.date ?
APPT.datecall INFORM(APPT.who, ~RES.reserver ?
APPT.nameIRES.time ?
APPT.time~-~,name, 'Meeting ~RES.duration ?
APPT.duration\]with me on %APPT.date ~at %APPT.time') IAPPT'where ?
i n  np_ut, from roe==?
in ut from R3 APPT.where J ~ PT .where ot R2?
J k %IAPPT.where not in R3\] G1 m ')L ~ ,  APPT.
name, Meetingi~  _ .
- -  lwith %APPT.who on %APPT.date in P,I = i__nn ~ retrieve name Iroom %APPT.where')EMP retrieve office where ~ , R2 i_~n name~ame - -  ~ .in DiP retrieve office where %~- -name~e or name=APPT.name /\]i- APPOINTMENT insert APPT, APPT2~in EMP retrieve supervisor where {|~tt ROOMRESERVE ~ RES ~) -- name=APPT, name k~ In ~ yFigure 3350\[Br81\]\[CH81\]\[Da78\]\[Ha77\]\[I~79\]\[D~8I\]\[MAW80\]\[Sa78\]\[Sa79\]Esk8o\]\[Wa78\]\[wisl\]\[Wo76\]S.C. SALVETER and D. MAIERBrodie, M.L., On modelling behavioral semantics of database.
VLDB VII,Cannes, Prance, 1981.Carbonell, J. and Hayes, P., Multi-strategy construction-specificparsing for flexible database query and update.
CMU Internal Report,July 1981.Damereau, F.J., The derivation of answers from logical forms in aquestion answering system.
American Journal of ComputationalLinguistics, Microfiche 75, 1978, pp.
3-42.Harris, L.R., Using the database itself as a semantic component to aidthe parsing of natural language data base queries.
Dartmouth CollegeMathematics Dept.
TR 77-2, 1977.Kaplan, 8.J., Cooperative responses from a natural language data basequery system.
Stanford Univ.
Heuristic Progra~ning Project paperHPP-79-19.Kaplan, S.J., and Davidson, J., Interpreting natural language updates.Proceedings of the 19th Annual Meeting of the Association forComputational Linguistics, June 1981.Mylopoulos, J., Bernstein, P., and Wong, K., A language facility fordesigning database - intensive applications.
ACM TODS,5, 2, 1980,pp.
185-207.Salveter, S.C., Inferring conceptual structures from pictorial inputdata.
University of Wisconsin, Computer Science Dept., TR 328, 1978.Salveter, S.C., Inferring conceptual graphs.
Co~nitlve Science, 3,pp.
141-166.Skuce, D.R., Bridging the gap between natural and computer language,Proc.
of Int'l Congress on Applied Systems, and Cybernetics, Acapulco,December 1980.Walker, D.E., Understanding Spoken Language.
American Elsevier, 1978.Wiederhold, G., KaDlan, S.J.. and Sagalowicz, D., Research in knowledgebase management systems.
S~GMOD Record, VII, #3, April 1981, pp.
26-54.Woods, W., et al, Speech understanding systems: final technical report.BBN No.
3438, Cambridge, MA, 1976.
