Proceedings of the Ninth International Workshop on Parsing Technologies (IWPT), pages 18?29,Vancouver, October 2005. c?2005 Association for Computational LinguisticsSwitch Graphs for Parsing Type Logical Grammars?Bob CarpenterAlias-i181 North 11th Street, #401Brooklyn, NY, 11211carp@colloquial.comGlyn MorrillUniversitat Polite`cnica de CatalunyaDepartament de Llenguatges i Sistemes Informa`ticsE-08034 Barcelonamorrill@lsi.upc.eduAbstractParsing in type logical grammars amountsto theorem proving in a substructurallogic.
This paper takes the proof netpresentation of Lambek?s associative cal-culus as a case study.
It introducesswitch graphs for online maintenanceof the Danos-Regnier acyclicity condi-tion on proof nets.
Early detection ofDanos-Regnier acyclicity violations sup-ports early failure in shift-reduce parsers.Normalized switch graphs represent thecombinatorial potential of a set of anal-yses derived from lexical and structuralambiguities.
Packing these subanalysesand memoizing the results leads directlyto a dynamic programming algorithm forLambek grammars.1 IntroductionFollowing Montague (1970), we take the goalof a theory of grammar to be that of assign-ing semantic terms to linguistic expressions.Type logical grammar is a paradigm for devel-oping grammatical theories based on a strongnotion of typing for natural language expres-sions.
Specifically, each linguistic expression isassigned a syntactic type and a semantic term.For instance, the expression ?John read the book?of English might be assigned a syntactic typeS and the semantic term read(the(book))(j),?Supported by CICYT project TIC2002?04019?C03?01.the expression ?book that John read?
the termthat(?x.read(x)(j))(book) and type CN, and?person that read the book?
the type CN and termthat(?y.read(the(book))(y))(person).2 Lambek?s Associative CalculusLambek?s associative calculus L (Lambek 1958)contains three connectives: concatenation, left divi-sion, and right division.
Logically, concatenation isconjunction and the divisions are directed implica-tions.
Algebraically, concatenation is a free semi-group product and the divisions its left and rightresiduals.
Viewed as a purely syntactic formalism,L assigns syntactic types to linguistic expressionsmodeled as sequences of tokens.
From a stipulatedlexical assignment of expressions to syntactic types,further assignments of expressions to types are de-rived through purely logical inference, with the logicrepresenting a sound and complete axiomatizationand inference system over the algebraic structure(Pentus 1995).L appears near the bottom of a hierarchy ofsubstructural logics obtained by dropping structuralrules: Lambek proofs are valid as multiplicativeintuitionistic linear proofs (restoring permutation)which are valid as conjuntive and implicative rele-vance proofs (restoring contraction) which are validas conjuntive and implicative intuitionistic proofs(restoring weakening).
In type logical grammars,lexical entries are associated with syntactic typesand intuitionistic (in fact probably relevant) proofsas semantic representations, notated as terms of thesimply typed ?-calculus with product, under theCurry-Howard correspondence.
The semantics of a18derived expression is the result of substituting thelexical semantics into the reading of the derivationas an intuitionistic proof.2.1 Syntactic and Semantic TypesThe set of syntactic types is defined recursively onthe basis of a set SynAtom of atomic syntactic types.The full set SynTyp of syntactic types is the leastset containing the atomic syntactic types SynAtomand closed under the formation of products (SynTyp?SynTyp), left divisions (SynTyp\SynTyp), and rightdivisions (SynTyp/SynTyp).
The two division, or?slash?, types, A/B, read A over B, and B\A, read Bunder A, refine the semantic function types by pro-viding a directionality of the argument with respectto the function.
A linguistic expression assigned totype A/B combines with an expression of type B onits right side to produce an expression of type A. Anexpression of type B\A combines with an expressionof syntactic type B on its left to produce an expres-sion of type A.
The product syntactic type A ?B is as-signed to the concatenation of an expression of typeA to an expression of type B.
The distinguishingfeature of Lambek calculus with respect to the ear-lier categorial grammar of Bar-Hillel is that as wellas the familar cancelation (modus ponens) rules, itadmits also a form of the deduction theorem: if theresult of concatenating an expression e to each B re-sults in an expression of type A, then it follows thate is assigned to syntactic type A/B.Semantic representations in Lambek type logicalgrammar are simply typed ?-terms with product.
Weassume a set SemAtom of atomic semantic types,which generate the usual function types ?
?
?
andproduct types ?
?
?.
Terms are grounded on an in-finite set of distinct variables Var?, along with a setof distinct contants Con?
for each type ?.
We as-sume the usual ?-terms consisting of variables, con-stants, function applications ?(?
), function abstrac-tions ?x.
?, pairs ?
?, ??
and projections from pairspi1?
and pi2?
onto the first and second element of thepair respectively.
We say that a term ?
is closed ifand only if it contains no free variables.A type map consists of a mapping typ :SynAtom ?
SemTyp.
That is, each atomic syn-tactic type A ?
AtomCat is assigned to a (not neces-sarily atomic) semantic type typ(A) ?
SemTyp.
Se-mantic types are assigned to complex syntactic typesas follows:typ(A ?
B) = typ(A) ?
typ(B) [Product]typ(A/B) = typ(B) ?
typ(A) [Right Division]typ(B\A) = typ(B) ?
typ(A) [Left Division]We will often write ?
: A where ?
is a ?-term of typetyp(A).2.2 Linguistic Expressions and the LexiconIn the Lambek calculus, linguistic expressions aremodeled by sequences of atomic symbols.
Theseatomic symbols are drawn from a finite set Tok oftokens.
The full set of linguistic expressions Tok?is the set of sequences of tokens.
For the sake ofthis short version of the paper we admit the emptysequence; we will address its exclusion (as in theoriginal definition of L) in a longer version.The compositional assignment of semantic termsto linguistic expressions is grounded by a finite setof assignments of terms and types to expressions.A lexicon is a finite relation Lex ?
Tok?
?
Term ?SynTyp, where all ?w, ?, A?
?
Lex are such that thesemantic term ?
is of the appropriate type for thesyntactic type A.
We assume that the only termsused in the lexicon are relevant, in the sense of rele-vance logic, in not containing vacuous abstractions.Note that the set of atomic semantic types, atomicsyntactic types and the semantic type mapping areassumed as part of the definition of a lexicon.
Typelogical grammar is an example of a fully lexicalizedgrammar formalism in that the lexicon is the onlylocus of language-specific information.2.3 Proof NetsA sequent ?
?
?
: A is formed from an antecedent?
consisting of a (possibly empty) sequence of ?-term and syntactic type pairs, and a consequent pair?
: A, where the terms are of the appropritate typefor the types.
Following Roorda (1991), we definetheoremhood with Girard-style proof nets (Girard1987), a geometric alternative to Lambek?s Gentzen-style calculus (Lambek 1958).Proof nets form a graph over nodes labeled bypolar types, where a polar type is the combinationof a syntactic type and one of two polarities, input(negative) and output (positive).
We write A?
for theinput polar type, which corresponds to antecedenttypes and is thus logicaly negative.
We write A?
for19the output polar type, which is logically positive andcorresponds to a consequent type.
A literal is a po-lar type with an atomic syntactic type.
Where A isan atomic syntactic type, the literals A?
and A?
aresaid to be complementary.Each polar type defines an ordered binary treerooted at that polar type, known as a polar tree.
For aliteral, the polar tree is a single node labeled by thatliteral.
For polar types with complex syntactic types,the polar tree is rooted at the polar type and unfoldedupwards based on connective and polarity accordingto the solid lines in Figure 1, which includes alsoother annotation.
Examples for some linguisticallymotivated types are shown in Figure 2.The solid edges of the graphs are the edges ofthe logical links.
Each unfolding is labeled with amultiplicative linear logic connective, either multi-plicative conjunction (?)
or multiplicative disjunc-tion (?).
This derives from the logical interpretationof the polar type trees as formula trees in multiplica-tive linear logic.
Unfolding the Lambek connectivesto their linear counterparts, (A/B)?
and (B\A)?
un-fold to A??B?
; (A/B)?
and (B\A)?
unfold to A??B?
;(A ?
B)?
unfolds to A?
?
B?
; and (A ?
B)?
unfolds toA??B?.
The type unfoldings correspond to the clas-sical equivalences between (?
?
?)
and (??
?
?
),between ?(?
?
?)
and (?
?
??
), and between?(?
?
?)
and (??
?
??).
For atomic syntactic typesA, A?
becomes simply A, whereas A?
becomes itslinear negation A?
; this is the sense in which po-lar atomic types correspond to logical literals.
Thenon-commutatitive nature of the Lambek calculus isreflected in the ordering of the subtrees in the un-foldings; for commutative logics, the proof trees arenot ordered.The proof frame for a syntactic sequentC1, .
.
.
,Cn ?
C0 is the ordered sequence ofpolar trees rooted at C?0,C?1, .
.
.
,C?n.
We convertsequents to frames in this order, with the outputpolar tree first.
In general, what follows applies toany cyclic reordering of these polar trees.
Note thatthe antecedent types C1, .
.
.Cn have input (negative)polarity inputs and the consequent type C0 hasoutput (positive) polarity.
All of our proof framesare intuitionistic in that they have a single outputconclusion, i.e.
a unique polar tree rooted at anoutput type.A partial proof structure consists of a proof framewith a set of axiom links linking pairs of comple-mentary literals with at most one link per literal.
Ax-iom links in both directions are shown in Figure 3.A proof structure is a proof structure in which allliterals are connected to complementary literals byaxiom links.Proof nets are proof structures meeting certainconditions.
A proof structure is planar if and only ifits axiom links can be drawn in the half-plane with-out crossing lines; this condition enforces the lackof commutativity of the Lambek calculus.
The fi-nal condition on proof structures involves switch-ing.
A switching of a proof structure is a subgraphthat arises from the proof structure by removing ex-actly one edge from each disjunctive (?)
link.
Aproof structure is said to be Danos-Regnier (DR-)acyclic if and only if each of its switchings is acyclic(Danos and Regnier 1989).1A proof net is a planarDR-acyclic proof structure.
A theorem is any se-quent forming the proof frame of a proof net.Consider the three proof nets in Figure 4.
The firstexample has no logical links, and corresponds to thesimplest sequent derivation S ?
S .
The second ex-ample represents a determiner, noun and intransitiveverb sequence.
Both of these examples are acyclic,as must be every proof net with no logical ?-links.The third example corresponds to the type-raisingsequent N ?
S/(N\S ).
Unlike the other examples,this proof net involves a ?-link and is cyclic.
Butboth of its switchings are acyclic, so it satisfies theDanos-Regnier acyclicity condition.2.4 Essential Nets and Semantic TripsA term is said to be pure if and only if it containsno constants.
The linear terms are closed, pure ?-terms that bind each variable exactly once.
Eachproof net in the Lambek calculus corresponds to alinear (i.e.
binding each variable exactly once) ?-term via the Curry-Howard correspondence.
Thisterm abstracts over variables standing in for the se-mantics of the inputs in the antecedent of the sequentand has a body that is determined by the consequentof the sequent.
For instance, the ?-term ?x.
?P.P(x)corresponds to the syntactic sequent x : N, P :1The full Danos-Regnier condition is that every switchingbe acyclic and connected.
Fadda and Morrill (2005) show thatfor the intuitionistic case (i.e.
single output conclusion, as forL), DR-acyclicity entails the connectedness of every switching.20?(?)
: A?
{ }BBBBBBBBBBB**&-5BM U//_______ ?
: B?
{ }           OO??
: A/B?xi : B?{Li}CCCCCCCCCCCC?
: A?{Ri}{{{{{{{{{{{{OO??xi.?
: A/B?LLq{OO?
: B?
{ }>>>>>>>>>>>OO?(?)
: A?
{ }|||||||||||tt|qioo_ _ _ _ _ _ _??
: B\A??
: A?
{Li}CCCCCCCCCCCCOOxi : B?{Ri}{{{{{{{{{{{{??xi.?
: B\A?RRMC6-'OOpi1?
: A?{Li}AAAAAAAAAAA**&,5AMpi2?
: B?{Ri}}}}}}}}}}}}tt}r??
: A ?
B??
: B?
{ }CCCCCCCCCCCCOO?
: A?
{ }zzzzzzzzzzzzOO??
?, ??
: A ?
B?RRNC7.
( LLpzOOFigure 1: Logical Links with Switch Paths (solid) and Semantic Trip (dashed)x : S ?
x : N?
y(x) : S ?
?y : N\S ?????
u : CN?
z(?x.y)(u) : CN?
x : N?
y : S ??
?z(?x.y)CN\CN?DDDDzzzz?x.y : S/N?DDDDzzzz?z : (CN\CN)/(S/N)?RRRRRRRlllllllt : S ?
v : N?
r:N?
x(?yw.u)(?v.t)(r):S ?
u:S ?
w : N?
z : N?
y(z) : S ??
?
?
?
?v.t : N\S ?>>>>     x(?yw.u)(?v.t) : N\S ?NNNNNN    ?w.u : N\S ?>>>>     y : N\S ?>>>>     ?
?x(?y.
?w.u) : (N\S )\(N\S )?NNNNNNpppppp?y.
?w.u : (N\S )\(N\S )?NNNNNNpppppp?x : ((N\S )\(N\S ))/((N\S )\(N\S ))?WWWWWWWWWWggggggggggFigure 2: Examples of Polar Type Trees21?
: A??
: A?uu V[_ch{ }OO?
: A?
))h c _ [ V?
: A?
{ }OOFigure 3: Axiom Links with Switch Paths and Semantic TripS ?
S ?N?
CN?
N?
S ??
?S ?
N/CN???
CN?
N\S ???
N?
S ?
?N\S ???
S ?
?S/(N\S )???
N?Figure 4: Three Example Proof NetsN\S ?
P(x) : S and ?x.
?P.P(x) corresponds tothe sequent x : N ?
?P.P(x) : S/(N\S ).
The ?-term induced by the Curry-Howard correspondencecan be determined by a unification problem over aproof net (Roorda 1991).
Different proof nets for thesame theorem correspond to different interpretationsthrough the Curry-Howard correspondence.
The es-sential net of a proof structure is the directed graphrooted at the root node of the output polar type treewhose edges are shown as dashed lines in Figures 1and 3 (LaMarche 1994).
Each output division typeintroduces a fresh variable on its input subtype (itsargument), as indicated by the labels xi in Figure 1.The essential nets for the examples in Figure 4 areshown in Figure 5.Terms are computed for the polar type trees byassigning terms to the roots of the polar inputs.
Thetree is then unfolded unifying in substitutions as itgoes, as illustrated in the example polar type trees inFigure 2.
The direction of axiom links in the essen-tial net provide the substitutions necessary to solvethe unification problem of ?-terms in the proof netestablished by equating the two halves of each ax-iom linked complementary pair of literals.
A traver-sal of an essential net carrying out the substitutionsspecified by axiom links constitutes a semantic tripthe end result of which is the Curry-Howard ?-termfor the Lambek calculus theorem derived by theproof net.
All ?-terms derived from a semantic tripwith variables or constants assigned to input root po-lar types will be in ?-?
long form.
The essential netdirectly corresponds to the tree of the semantic termderived by the Curry-Howard correspondence.The well-formedness of a set of axiom linkingsover a polar tree may be expressed in terms of theessential net.
Among the conditions are that an es-sential net must be acyclic and planar.
In addition,essential nets must be connected in two ways.
First,there must be a path from the root of the single out-put polar tree to the root of each of the input polartrees.
Second, there must be a path from each outputdaughter of an output division to the input daugh-ter.
That is, when A/B?
is unfolded to B?A?, theremust be a path from A?
to B?.
These conditions ex-press the definition of linear semantic terms dictatedthrough the logic by the Curry-Howard correspon-dence.
The first condition requires each variable (orterm) corresponding to the root of an input polar treeto occur in the output term, whereas the second con-dition requires that variables only occur within theirproper scopes so that they are bound.
The essen-tial nets presented in Figure 5 adhere to these con-ditions and produce well-typed linear ?-terms.
Theexample presented in Figure 6 shows a set of axiomlinks that does not form a proof net; it violates thecondition on variable binding, as is seen from thelack of path from the N?
daughter to the N?
daugh-ter of the N/N?
node.
The major drawback to us-ing these conditions directly in parsing is that theyare existential in the sense of requring the existenceof a certain kind of path, and thus difficult to refuteonline during parsing.
In comparison, the Danos-22t(k) : N????
?// CN?N?
r(t(k)) : S ? ooS ?t : N/CN?
k : CN?
r : N\S ?N?x(j) : S ?oo~~||||x : N\S ?
S ?
?x.x(j) : S/(N\S )?>>||||j : N?Figure 5: Semantic Trips?(?x.?)(?
(x)) : N?
//BBBBN?x : N?N??(?x.?)
: N/N?
//((PPPPPP?x.?
: N/N?>>||||N?
?
(x) : N?oo~~||||N??
: (N/N)/(N/N)?
?
: N?
?
: N\N?Figure 6: Unbound Variable in Illegal Semantic TripN?
N?___________________________N?______________N??
?N/N?BBBB||N/N?BBN?
N??
?N?
(N/N)/(N/N)?P P P PnnnnN?
N\N?BB||Figure 7: Switching with Path Violating Danos-Regnier Acyclicity23Regnier acyclicity condition is violated by the at-tempt to close off the binding of the variable.
Thepath vilolating DR acyclicity is shown in Figure 7,with the path given in dashed lines and the switch-ing taking the right daughter of N/N?
as the arc toremove.3 Parsing with Switch GraphsThe planar connection of all literals into a proofstructure is straightforward to implement.
Axiomlinks are simply added in such a way that planarityis maintained until a complete linkage is found.
Inour shift-reduce-style parser, planarity is maintainedby a stack in the usual way (Morrill 2000).
For dy-namic programming, we combine switch graphs inthe cells in a Cocke-Kasami-Younger (CKY) parser(Morrill 1996).
The main challenge is enforcingDR-acyclicity, and this is the main focus of the restof the paper.
We introduce switch graphs, which notonly maintain DR-acyclicity, but also lead the wayto a normal form for well-formed subsequence frag-ments of a partial proof structure.
This normal formunderlies the packing of ambiguities in subderiva-tions in exactly the same way as usual in dynamicprogramming parsing.3.1 Switch GraphsSwitch graphs are based on the observation that aproof structure is DR-acyclic if and only if every cy-cle contains both edges of a ?-link.
If a cycle con-tains both edges of a ?-link, then any switching re-moves the cycle.
Thus if every cycle in a proof struc-ture contains both edges of a ?-link, every switchingis acyclic.The (initial) switch graph of a partial proof struc-ture is defined as the undirected graph underlyingthe partial proof structure with edges labeled withsets of ?-edge identifiers as indicated in Figures 1and 3.
Each edge in a logical ?-link is labeled withthe singleton set containing an identifier of the linkitself, either Li for the left link of ?-link i or Ri forthe right link of ?-link i. Edges of axiom links andlogical ?-links are labeled with the empty set.The closure of a switch graph is computed by it-erating the following operation: if there is an edgen1 ?
n2 labeled with set X1 and an edge edge n2 ?
n3labeled with set X2 such that X1?X2 does not containboth edges of a ?-link, add an edge n1 ?
n3 labeledwith X1?X2.
An edge n?m labeled by X is subsumedby an edge between the same nodes n?m labeled byY if Y ?
X.
The normal switch graph of a partialproof structure is derived by closing its the initialswitch graph, removing edges that are subsumed byother edges, and restricting to the literal nodes notconnected by an axiom link.
These normal switchgraphs define a unique representation of the combi-natorial possibilities of a span of polar trees and theirassociated links in a partial proof structure.
That is,any partial proof structure substructure that leads tothe same normal switch graph may be substituted inany proof net while maintaining well-formedness.The fundamental insight explored in this paper isthat two literals may be connected by an axiom linkin a partial proof structure without violating DR-acyclicity if and only if they are not connected inthe normal switch graph for the partial proof struc-ture.
The normal switch graph arising from the ad-dition of an axiom link is easily computed.
It is justthe closure generated by adding the new axiom link,with the two literals being linked removed.3.2 Shift-Reduce ParsingIn this section, we present the search space for ashift-reduce-style parsing algorithm based on switchgraphs.
The states in the search consist of a globalstack of literals, a lexical stack of literals, the re-maining tokens to be processed, and the set of linksamong nodes on the stacks in the switch graph.
Theshift-reduce search space is characterized by an ini-tial state and state transitions.
These are shown inschematic form in Figure 8.
The initial state con-tains the output type?s literals and switch graph.
Alexical transition is from a state with an empty lexi-cal stack to one containing the lexical literals of thenext token; the lexical entry?s switch graph mergeswith the current one.
A shift transition pops a literalfrom the lexical stack and pushes it onto the globalstack.
A reduce transition adds an axiom link be-tween the top of the global stack and lexical stackif they are complementary and are not connected inthe switch graph; the resulting switch graph resultsfrom adding the axiom link and normalizing.
Thestack discipline insures that all partial proof struc-tures considered are planar.Figure 10 displays as rows the shift-reduce search24Stack Lex Sw-Gr OpA?
gr(A?)
start(A)S GS A?
G ?
gr(A?)
lex(w, A)Stack Lex Sw-Gr OpAiS A jL GS L (G ?
i= j) ?
{i, j} reduce(i, j)AS BL GBAS L G shift(B)Figure 8: Shift-Reduce Parsing SchematicN?1 N?2 N?4 N?5N?0 N1/N?29999 N?3 N4\N?59999 N?1 N?2 N?4 N?5N?0 N1/N?29999 N?3 N4\N?59999 Figure 9: Modifier Attachment Ambiguity Proof NetsStack Lex Tok Sw-Gr Ax OpN?0 startN?0 N?1 N?2 w1 1-2{} lex?
N?2 0=1 reduceN?2 shiftN?2 N?3 w2 lexN?3 N?2 shiftN?3 N?2 N?4 N?5 w3 4-5{} lexN?2 N?5 3=4 reduce2=5 reduceStack Lex Tok Sw-Gr Ax OpN?0 startN?0 N?1 N?2 w1 1-2{} lexN?1 N?0 N?2 1-2{} shiftN?2 N?1 N?0 1-2{} shiftN?2 N?1 N?0 N?3 w2 1-2{} lexN?1 N?0 2=3 reduceN?1 N?0 N?4 N?5 w3 4-5{} lexN?0 N?5 1=4 reduce0=5 reduceFigure 10: Modifier Attachment Ambiguity Shift-Reduce Search States25states corresponding to the two valid proof netsshown in Figure 9.
The subscripts on syntactic typesin the diagram is only so that they can be indexedin the rows of the table describing the search states.The initial state in both searches is created from theoutput type?s literal.
The third column of the dia-grams indicate the token consumed at each lexicalentry.
The switch graphs are shown for the rowsfor which they?re active.
Because there are no ?-links, all sets of edges are empty.
The fifth columnshows the axiom linking made at each reduce step.The history of these decisions and lexical insertionchoices determines the final proof net.
Finally, thesixth column shows the operation used to derive theresult.
Note that reduction is from the top of the lex-ical stack to the top of the global stack and is onlyallowed if the nodes to be linked are not connected inthe switch graph.
This is why N?1 cannot reduce withN?2 in the second diagram in Figure 10; the secondshift is mandatory at this point.
Note that as activenodes are removed, as in the first diagram reductionstep linking 0=2, the switch graph contracts to justthe unlinked nodes.
After the reduction, only N?2 isunlinked, so there can be no switch graph links.
Thelink between node 4 and 5 is similarly removed al-most as soon as it?s introduced in the second reduc-tion step.
In the second diagram, the switch graphlinks persist as lexical literals are pushed onto thestack.Shift-reduce parses stand in one-to-one corre-spondence with proof nets.
The shift and reduce op-erations may be read directly from a proof net byworking left to right through the literals.
Betweenliterals, the horizontal axiom links represent literalson the stack.
Literals in the current lexical syntac-tic type represent the lexical stack.
Literals that areshifted to the global stack eventually reduce by ax-iom linking with a literal to the right; literals that arereduced from the lexical stack axiom link to theirleft with a literal on the global stack.3.3 Memoized ParsingUsing switch graphs, we reduce associative Lam-bek calculus parsing to an infinite binary phrase-structure grammar, where the non-terminals arenormalized switch graphs.
The phrase structureschemes are shown in Steedman notation in Fig-ure 11.
Lexical entries for syntactic type A are de-rived from the input polar tree rooted at A?.
Thispolar tree yields a switch graph, which is always avalid lexical entry in the phrase structure grammar.Any result of axiom linking adjacent complemen-tary pairs of literals in the polar tree that maintainsswitch-graph acyclicity is also permitted.
For in-stance, allowing empty left-hand sides of sequents,the input type A/(B/B)?
would produce the literalsA?1B?2B?3 with links 1-2 : {L3}, 1-3 : {R3}.
This couldbe reduced by taking the axiom link 2=3, to pro-duce the single node switch graph A?1.
In contrast,(B/B)/A?
produces the switch graph B?1B?2A?3 withlinks 1-2, 1-3, and 2-3.
Thus the complementary Bliterals may not be linked.Given a pair of normal switch graphs, the binaryrule scheme provides a finite set of derived switchgraphs.
One or more complementary literals may beaxiom linked in a nested fashion at the borders ofboth switch graphs.
These sequences are marked as?
and ?
and their positions are given relative to theother literals in the switch graph in Figure 11.
Un-linked combinations are not necessary because thegraph must eventually be connected.
This schemeis non-deterministic in choice of ?.
For instance, anadverb input (N1\S 2)/(N4\S 3)?
produces the literalsN?1S?2S?3N?4 and connections 1-2, 1-3:{L4}, 1-4:{R4},2-3:{L4}, and 2-4:{R4}.
When it combines with averb phrase input N5\S ?6 with literals N?5S?6 and con-nections 5-6, then either the nominals may be linked(4=5), or the nominals and sentential literals may belinked (4=5, 3=6).
The result of the single linking isN?1S?2S?3S?6 with connections 1-2, 1-3:{L4}, 1-6:{R4},2-3:{L4}, and 2-6:{R4}.
The result of the double link-ing is simply N?1S?6 with connection 1-6, or in otherwords, a verb phrase.The dynamic programming equality condition isthat two analyses are considered equal if they leadto the same normalized switch graphs.
This equalityis only considered up to the renaming of nodes andedges.
Backpointers to derivations allow semanticreadings to be packed in the form of lexical choicesand axiom linkings.
For instance, consider the twoparses in Figure 12.With a finite set of lexical entries, bottom-upmemoized parsing schemes will terminate.
We illus-trate two derivations of a simple subject-verb-objectconstruction in Figure 13.
This is a so-called spuri-ous ambiguity because the two derivations produce26wlex?G???????????
?Lex(w, A), andA?
has switch graphw.
literals ?, links G????????????
?1 ?G1?
?2G2 ?
= ?
?1 ?2(G1 ?
G2) ?
(?
= ?)????????????????
= Ai1 , .
.
.
, Ain?
= A jn , .
.
.
, A j1(?
= ?)
= i1 = j1, .
.
.
, in = jn??????????????
?Figure 11: Phrase-Structure Schemes over Switch Graphsa:N1/N2a(x):N?1 x:N?21-2b:N3b:N?3c:N4\N5y:N?4 c(y):N?54-5 3=4c(b):N?52=5a(b(c)):N?1a:N1/N2a(x):N?1 x:N?21-2b:N3b:N?32=3a(b):N?1c:N4\N5y:N?4 c(y):N?54-5 1=4c(a(b)):N?5Figure 12: Modifier Attachment Ambiguity Packingthe same semantic term.
They are not spurious glob-ally because the alternative linkings are required foradverbial modification and object relativization re-spectively.
The ambiguity in the phrase structuregrammar results from the associativity of the combi-nation of axiom linkings.
The two derivations do notpropagate their ambiguity under the dynamic pror-gramming scheme precisely because they produceequivalent results.
Nevertheless, a worthwhile opti-mization is to restrict the structure of combinationsof linkings in the phrase-structure schemes to corre-spond to an unambiguous left-most linking strategy;this corresponds to the way in which other associa-tive operators are parsed in programming language.For instance, x+y+z will be assumed to be x+(y+z)if + is defined to be right associative.An unambiguous right-associative context-freegrammar for linkings M over literals A and theircomplements A is:M ?
A A | A M A | A A M | A M A MAn example of packing for subject/object scope am-biguities is shown in Figure 14.
The derivationsin Figure 14 produce different semantic interpreta-tions; one of these is subject-wide scope and theother object-wide scope.
Unsurprisingly, the mem-oizing parser does not solve P = NP in the affirmi-tive (Pentus 2003).
The size of the switch graphs onthe intermediate structures is not bounded, nor is thenumber of alternative switch-paths between literals.It remains an open question as to whether the switchgraph parser could be bounded for a fixed lexicon(Pentus 1997).3.4 Empty Antecedents and SubtendingLambek?s calculus required the antecedent ?
ina sequent ?
?
?
: A to be non-empty.Proof nets derive theorems ( ?
CN/CN) and((CN/CN)/(CN/CN) ?
CN/CN), as shown in Fig-ure 15.
These derivations both allow the construc-tion of an output, namely the identity term ?x.x andmodifier syntactic type CN/CN, out of no input.A literal A is said to subtend a complementaryliteral A if they are the leftmost and rightmost de-scendants of a ?-link.
In both of the examples inFigure 15, the output adjective CN/CN?
unfolds tothe sequence of literals CN?CN?
in which the inputCN?
subtends the output CN?.
If literals that standin a subtending relation are never linked, the set oftheorems is restricted to those derivable in Lambek?soriginal calculus.Consider the proof net in Figure 16.
An analysisin which S ?8 linked to S?11 and N?9 linked to N?10 isnot ruled out by Danos-Regnier acyclicity.
It is ruledout by the subtending condition because S ?8 subtendsS ?11, being the leftmost and right most daughters ofthe ?-node (N10\S 11)\(N9\S 8)?.
Further note thatthere are no cycles violating DR acyclicity; each ofthe sixteen switchings is acyclic.4 ConclusionWe have introduced switch graphs for shift-reduceand CKY-style parsing of grammars in the asso-ciative Lambek calculus.
Switch graphs encode27NN?1(N\S )/NN?2 S?3 N?42-3, 2-4, 3-41=2S ?3 N?43-4NN?54=5S ?3NN?1(N\S )/NN?2 S?3 N?42-3, 2-4, 3-4NN?54=5N?2 S?32-31=2S ?3N?2 S?3?N2\S ?3??
N?4?N?1 (N2\S 3)/N?4??
N?5Figure 13: Left vs.
Right Attachment: Packing Locally Spurious Attachment AmbiguityS ?2 N?3 N?4 S ?5 N?7 S ?8?
?
?S ?1 N3\S ?2/// N4\S ?5/// N?6 S 8/N?7/// S ?9?
?
?S 1/(N3\S 2)?/// (N4\S 5)/N?6/// (S 8/N7)\S ?9/// S ?2 N?3 N?4 S ?5 N?7 S ?8?
?
?S ?1 N3\S ?2/// N4\S ?5/// N?6 S 8/N?7/// S ?9?
?
?S 1/(N3\S 2)?/// (N4\S 5)/N?6/// (S 8/N7)\S ?9/// S ?1S ?2N?31-2:{L3}, 1-3:{R3}N?4 S ?5N?64-5, 4-6, 5-6S ?1N?61-6N?7 S ?8S ?97-9:{L7}, 8-9:{R7}S ?9S ?1S ?2N?31-2:{L3}, 1-3:{R3}N?4 S ?5N?64-5, 4-6, 5-6N?7 S ?8S ?97-9:{L7}, 8-9:{R7}N?4 S ?94-9S ?1Figure 14: Scope Ambiguity: Partial Proof Structure Fragments with Phrase Structurex : CN?
CN??
?x.x : CN/CN?????
 y(?x.x)(w) : CN?
CN?
x : CN?
CN??
?w : CN?
CN?
y(?x.x) : CN/CN?????
?x.x : CN/CN?????
?
?
?w.y(?x.x)(w) : CN/CN?????
y : (CN/CN)/(CN/CN)?OOOOOOooooooFigure 15: Subtending Examples28S ?
N?5 N?6 S?7 S?8 N?9 N?10 S?11?
?
?
?N5\S ?4////N6\S ?7////N9\S ?8////N10\S ?11////S ?12 N?13 N?14 S?15?
?
?
?N?2 S?3 (N5\S 4)\(N6\S 7)?????
?(N10\S 11)\(N9\S 8)?????
?N13\S ?12////N14\S ?15////?
?
?S ?0_____________________N?1 N2\S?3////((N5\S 4)\(N6\S 7))/((N10\S 11)\(N9\S 8))?OOOOOOOooooooo(N13\S 12)\(N14\S 15)?????
?Figure 16: Higher-Order Example: Adverbial Intensifierthe axiom-linking possibilities of a sequence of un-linked literals deriving from underlying polar trees.We introduced two parsers based on switch graphs.The shift-reduce parsers are memory efficient andparses correspond uniquely to (cut free) proof nets.They can be made more efficient by bounding stacksize.
The memoizing parsers are able to pack attach-ment and scope distinctions that lead to different ?-terms but have the same combinatory possibilities.ReferencesD.
Bechet.
2003.
Incremental parsing of lambek calculususing proof-net interfaces.
In Proc.
of the 8th Interna-tional Workshop on Parsing Technologies.V.
Danos and L. Regnier.
1989.
The structure of multi-plicatives.
Arch.
Math.
Logic, 28:181?203.P.
de Groote and C. Retore?.
1996.
On the semantic read-ings of proof nets.
In Proc.
of Formal Grammar, pages57?70.M.
Faddo and G. Morrill.
2005.
The Lambek calculuswith brackets.
In P. Scott, C. Casadio, and R. Seely,editors, Language and Grammar: Studies in Math.Ling.
and Nat.
Lang.
CSLI Press, Stanford.J.-Y.
Girard.
1987.
Linear logic.
Theoret.
Comput.
Sci.,50:1?102.F.
Lamarche.
1994.
Proof nets for intuitionistic linearlogic I: Essential nets.
Technical report, Imperial Col-lege, London.J.
Lambek.
1958.
The mathematics of sentence structure.Amer.
Math.
Mon., 65:154?170.R.
Montague.
1970.
Universal grammar.
Theoria,36:373?398.G.
Morrill.
1996.
Memoisation of categorial proof nets:parallelism in categorial processing.
Technical Re-port LSI-96-24-R, Dept.
de Llenguatges i Sistemes In-forma`tics, Universitat Polite`cnica de Catalunya.G.
Morrill.
2000.
Incremental processing and accept-ability.
Comput.
Ling., 26(3):319?338.M.
Pentus.
1995.
Models for the Lambek calculus.
An-nals of Pure and Applied Logic, 75(1?2):179?213.M.
Pentus.
1997.
Product-free Lambek calculus andcontext-free grammars.
Journal of Symbolic Logic,62(2):648?660.M.
Pentus.
2003.
Lambek calculus is NP-complete.Technical Report TR-203005, CUNY Graduate Cen-ter.D.
Roorda.
1991.
Resource logics: Proof-theoreticalinvestigations.
Ph.D. thesis, Universiteit van Amster-dam.29
