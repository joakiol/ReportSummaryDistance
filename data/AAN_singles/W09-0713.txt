Proceedings of the EACL 2009 Workshop on Language Technologies for African Languages ?
AfLaT 2009, pages 89?95,Athens, Greece, 31 March 2009. c?2009 Association for Computational LinguisticsA repository of free lexical resources for African languages:the project and the methodPiotr Ba?skiInstitute of English StudiesUniversity of WarsawWarsaw, Polandbansp@o2.plBeata W?jtowiczInstitute of Oriental StudiesUniversity of WarsawWarsaw, Polandb.wojtowicz@uw.edu.plAbstractWe report on a project which we believe tohave the potential to become home to, amongothers, bilingual dictionaries for African lan-guages.
Kept in a well-structured XML for-mat with several possible degrees of confor-mance, the dictionaries will be able to get us-able even in their early versions, which willbe then subject to supervised improvement asuser feedback accumulates.
The project isFreeDict, part of SourceForge, a well-knownInternet repository of open source content.We demonstrate a possible process of dic-tionary development on the example of oneof FreeDict dictionaries, a Swahili-Englishdictionary that we maintain and have beendeveloping through subsequent stages of in-creasing complexity and machine-processability.
The aim of the paper is toshow that even a small bilingual lexical re-source can be submitted to this project andgradually developed into a machine-processable form that can then interact withother FreeDict resources.
We also present theimmediate benefits of locating bilingual Afri-can dictionaries in this project.We have found FreeDict to be a very promis-ing project with a lot of potential, and thepresent paper is meant to spread the newsabout it, in the hope to create an active com-munity of linguists and lexicographers ofvarious backgrounds, where common re-search subprojects can be fruitfully carriedout.1 IntroductionThe FreeDict project was started by Horst Eyer-mann in 2000 and initially hosted bilingual dic-tionaries produced by concatenating (crossing)the contents of the dictionaries in the Ergane pro-ject (http://download.travlang.com/Ergane/),with Esperanto as the interlanguage.
At first, thedata was kept in the DICT format (Faith andMartin, 1997).DICT (Dictionary Server Protocol) is by nowa well-established TCP-based query/responseprotocol that allows a client to access definitionsfrom a set of various dictionary databases.
Itprovides data in textual form, but it also has thepotential of providing MIME-encoded content.The clients can be free-standing desktop applica-tions or they can be integrated into editors orweb browsers.
DICT web gateways also exist(see e.g.
http://dict.org/).The DICT format is a plain text format with anaccompanying index file.
The FreeDict-DICTinterface initially used so-called ?c5 files?.1 A c5example of an entry from version 0.0.1 of Swa-hili-English dictionary is presented below.abiriapassenger(s)Later on, the project adopted the TEI P4 standard(Sperberg-McQueen and Burnard, 2002) as itsprimary format, and with the help of its secondadministrator, Michael Bunk, created tools forconversion from the TEI into a variety of otherdictionary platforms.
A simple dictionary editorwas also created.
The change of the primaryformat was a very fortunate move, thanks towhich we can today recommend the project asthe possible home for free African language dic-tionaries big and small.We are going to base our discussion on theSwahili-English dictionary, the first FreeDictdictionary encoded according to the guidelines ofTEI P5 XML standard (TEI Consortium, 2007).The dictionary in its current form is an offshootof a different project of ours that we decided tomake available on a free license and in version0.4 contains over 2600 headwords.
We use it todemonstrate a possible process of dictionary de-1 C5 is the format used, among others, by the CIA WorldFactbook, where the heading is at the left edge and the con-tents are indented by 5 spaces.89velopment, from the simplest to the advanced,machine-processable form.2 From glossaries to rich lexical data-bases: the possible shapes of FreeDictdictionariesA dictionary can begin its life at FreeDict as asimple glossary, with the simplest format possi-ble, as shown in the made-up entry below:<entry><form><orth>alasiri</orth></form><def>afternoon</def></entry>The next example entry comes from Swahili-English xFried Freedict Dictionary, version0.0.2, compiled by Beata W?jtowicz.
That dic-tionary contained around 1500 entries of variedquality.
It was based on a dictionary extractedfrom Morris P. Fried?s Swahili-Kiswahili to Eng-lish Translation Program, to which selected en-tries from the first FreeDict Swahili-English dic-tionary (compiled by Horst Eyermann) wereadded.
That version also introduced informationon parts of speech.<entry><form><orth>alasiri</orth></form><def>   afternoon</def><gramGrp> <pos>n</pos> </gramGrp></entry>On the way to version 0.3, the entry looked asfollows:<entry xml:id="alasiri"><form><orth>alasiri</orth></form><gramGrp><pos>n</pos></gramGrp><sense><def>afternoon (period between 3p.m.
and 5 p.m.)</def></sense></entry>All the bracketed information was then turnedinto separate <note/> elements, in order tomake the translation equivalents easily proc-essable (see Prinsloo and de Schryver, 2002, forremarks on processability of translation equiva-lents).
The change was performed by regexsearch-and-replace, roughly from\((.+)\)</def> into </def><notetype="hint">$1</note>2, with a subsequent2 This is in fact a slight simplification of what has beendone, made for the purpose of clarity.
Naturally, the regexeshave to be adopted to the circumstances (regularity of mar-kup, regularity of expressions in brackets, the number ofreview of all the new <note/> elements ex-tracted by an XPath query.Depending on the regularity of expressions inbrackets, some additional words would be in-serted into the search string, to be converted into<note/> elements of the appropriate type.
Ini-tially, only @type="hint" was used, as themost generic.
At the moment, there are severalmore specialized type values, including@type="editor", which contains editorial re-marks that will not be shown to the user but willremain in the source.
@type-less <note/> ele-ments are used for quick localized communica-tion between editors and are discarded by XSLTscripts when preparing the source version forrelease (they are also clearly marked by the CSSstylesheet that accompanies the dictionary, sothat the editors can easily spot each note whenreviewing the dictionary in a browser).
FreeDictadvocates the use of some other types of notes:recording the last editor of the entry, the date ofthe latest modification, and the degree of cer-tainty, valuable in this kind of projects (where,e.g., some automated changes would set the cer-tainty level to ?low?
and as such requiring edito-rial approval).In the current version, 0.4, the <sense/>element looks as follows.<sense><def>afternoon</def><note type="def">period between 3p.m.
and 5 p.m.</note></sense>This is what we decided to keep in version 0.4,exactly for the purpose of illustrating the possi-ble development stages of dictionaries.
In thenext version, the <sense/> element will eventu-ally attain the form currently (i.e., after Septem-ber 2007) recommended by the TEI Guidelinesfor translation equivalents:<sense><cit type="trans"><quote>afternoon</quote><def>period between 3 p.m. and5 p.m.</def></cit></sense>The <quote/> element holds the translationequivalent that can be an anchor for dictionarysuch expressions per single element content, etc.).
Some-times, an XSL transformation may turn out to do a betterjob, thanks to the many string-handling functions of XPath2.0.90reversal or concatenation.
The <def/> elementabove is not abused anymore and holds a realdefinition, i.e., an ?explanatory equivalent?,which may become a sense-discriminating notein the reversed dictionary.We stress that each of the XML structures pre-sented above (some of them admittedly border-ing on tag abuse) conforms to the general P5format and can be easily processed and pub-lished.
In other words, dictionary editors are notforced to conform to the final format in order tosee their work being used and commented on.The next section presents another aspect ofdictionary creation, where what matters is theease of data manipulation and filling in the pre-dictable information for the developer.3 Plural forms: an illustration of auto-mated creation of entriesAt the stage of development at which bracketshave been eliminated from translation equiva-lents, a relatively simple entry might look asshown below.
This is an entry as created by adeveloper, to be further processed by XSLT.3<entry><form><orth>adui</orth><ref target="#maadui"/></form><gramGrp><pos>n</pos></gramGrp><sense><def>enemy</def></sense><sense><def>opponent</def><note type="hint">in games orsports</note></sense></entry>This entry is then processed and turned into theform presented below.<entry xml:id="adui"><form><orth>adui</orth></form><xr type="plural-form"><ref tar-get="#maadui">maadui</ref></xr><gramGrp><pos>n</pos></gramGrp><sense xml:id="adui.1" n="1"><def>enemy</def></sense><sense xml:id="adui.2" n="2">3 The verbosity of XML markup can be overwhelming, butmany XML editors feature content completion and can savethe developer a lot of typing, the more so that TEI schemasare often part of the editor package.<def>opponent</def><note type="hint">in games orsports</note></sense></entry>If the plural form does not exist in the dictionary,the script creates an entry for it:<entry xml:id="maadui"><form><orth>maadui</orth></form><gramGrp><pos>n</pos></gramGrp><sense><xr type="plural-sense">Plural of<ref target="#adui">adui</ref></xr><def>enemy</def><def>opponent <note type="hint">ingames or sports</note></def></sense></entry>The equivalents in this kind of automatically cre-ated entries for plurals will remain within<def/> elements even after we adopt thecit/quote system mentioned above in the discus-sion of alasiri.
This is because <def/> elementsare not anchors for dictionary reversal, and pluralentries will be skipped by the reversal tools,unless the plural/collective form has its ownunique meaning, as is the case with e.g.
majani,which is morphologically the plural form of jani?leaf; blade of grass?, but apart from that, itshould also be glossed as ?grass?, and it is thelatter form that should become a headword in thereversed, English-Swahili dictionary.Another area where the XML format and toolsgive excellent results is text normalization.
Anearlier example shows unnecessary spaces inversion 0.0.2: <def>   afternoon</def>.Handling these required only the use of an XPathfunction normalize-space(), which strips allthe unwanted whitespace characters.4All the indexing is also done automatically.The indexing system in this particular dictionaryis based on the shape of the headword, which itis easy to convert into form acceptable by theXML ID attributes (the XPath translate()and replace() functions are handy here).
All4 That version contained more traps for machine-processing,such as bracketed parts of words ?
sometimes this wasdone in a nontrivial manner, as in the entry for adui:<def>   enemy(-ies)</def>.
See Prinsloo and deSchryver (2002) for remarks on the non-friendliness of suchspace-saving devices.91the entries are first reordered alphabetically, thenthe script checks for homographs and assignsthem appropriate indexes (e.g.
chapa-1 for thenoun meaning ?brand?, chapa-2 for the verbmeaning ?beat?)
and appropriate attributes usedlater in the creation of superscripts (suppressedin the plain-text DICT format).
Multiple sensesare also treated similarly ?
each receives itsown @xml:id attribute and numbering (see theexample of adui above).We emphasize the fact that the encoding for-mat makes it possible to reduce the developer?sworkload, with each stage of the dictionary en-hancement being publishable.
This allows one towork on the dictionary on and off, in their sparetime.4 Visualization of underlying structureSome Swahili words are best lemmatized asstems.
Version 0.4 of our dictionary does not yetdisplay the differences between bound stems andfree forms, but we will transfer this functionality(which we use in another project) to one of thefuture versions.
This will make it possible for usto, e.g., add hyphens to bound forms and prepend?-a ?
to adjectives introduced by the ?-a of rela-tionship?, adding extra structure visible to theend user, but ignored in sorting or queries.Disjunctively written languages can be han-dled similarly.
Kiango (2000:36) lists the follow-ing examples from Haya, discussing the prob-lems surrounding alphabetization of nouns inprint dictionaries:a ka yaga ?air?e m pambo ?seed?o mu twe  ?head?The vocalic pre-prefixes should not be used forthe purpose of arranging headwords, because ifthey are, all nouns end up under one of the threeletters.
Instead, class prefixes (ka, m, mu) shouldform the basis for alphabetization.
In theXML/TEI format adopted by FreeDict, suchproblems are easily solved, either by using aseparate element to hold the pre-prefix, or by theuse of an appropriate attribute.
The former solu-tion is illustrated below.<entry><form><orth extent="ppref">a</orth><orth>ka yaga</orth></form><def>air</def></entry>The default value for the @extent attribute is?full?, so it only needs to be mentioned wherethe value is different.An AfLaT reviewer rightly points out that inan electronic dictionary, alphabetization is irrele-vant.
Indeed, the DICT format features separate?dictionary?
and ?index?
files, and searching isdone on the index file, which addresses the rele-vant portions of the dictionary file.
The issue ofalphabetization arises, however, in two cases:when preparing a print version of the dictionary,or when using the dictionary outside of the DICTsystem (this is a ?working view?
for the main-tainers that can also be used as an out-of-the-boxview for users).In connection with the first case ?
preparingprint/PDF versions of dictionaries ?
it is worthpointing out that conversion from TEI XML intovarious publication formats is made easy thanksto the open-source XSLT conversion suite main-tained by Sebastian Rahtz (http://www.tei-c.org/Tools/Stylesheets/).As for the ?out-of-the-box preview?, FreeDictdictionaries, by virtue of being marked up inXML, can be equipped with CSS stylesheets thatmake it possible to display the XML source inthe browser, as if it were an HTML page.
Here,because the user can search the page for thegiven form, alphabetization is not so relevant,but it can be handy, if only for aesthetic reasons.Below is a screenshot of a fragment of the CSSview of the file swa-eng.tei from version 0.4 dis-tribution package, opened directly in the Firefoxbrowser.Figure 1: A CSS preview of the source XMLThe CSS adds some text (e.g.
?
[sg=pl]?, ?
(pl:?,or sense numbering) and imposes visual structureonto the source XML.
As can be seen in the en-try for kiungo, we give precedence to formal92properties of headwords over the semantic dis-tinctions, but other macrostructural decisions areobviously possible as well.
The figure belowshows one more CSS view, demonstrating sub-categorization, treatment of notes (all the brack-eted strings are contents of separate XML ele-ments, with parentheses supplied by the CSS), aswell as the treatment of homographs.Figure 2: Subcategorization and grammar notes (an-other CSS view of the source XML)Our use of colours (here: shades of grey) is also afunction of the CSS, introduced mainly with thedeveloper in mind, as a kind of an error-checkingdevice.5 Other possible enhancements of themicrostructureIn section 3, we have illustrated a possiblemethod of refining dictionary structure in anautomatic fashion.
Thanks to the many possiblevariations of the format, other features may beintroduced stage by stage.
They include, e.g.,adding the corresponding plurals (illustratedabove) or marking forms where the plural is thesame as the singular, as done below by the use ofthe @type attribute.
This example also illustratesthe addition of cross-references to synonyms,where eropleni is linked to the second, inani-mate, sense of ndege ?bird; airplane?.<entry xml:id="eropleni"><form type="N"><orth>eropleni</orth></form><gramGrp><pos>n</pos></gramGrp><sense><def>airplane</def><xr type="syn">(synonym: <ref target="#ndege.2">ndege</ref>)</xr></sense></entry>The <form/> element below illustrates the han-dling of alternative spellings of the noun af-isa/ofisa ?officer?.
Both headwords are used inretrieval.<entry xml:id="afisa"><form><orth n="1">afisa</orth><orth type="variant"n="2">ofisa</orth><ref target="#maafisa" n="1"/><ref target="#maofisa" n="2"/></form>The above is the source as prepared by a devel-oper.
This is then processed, the plural forms arecreated if they do not exist in the dictionary, andthe result is as in figure 3 below.Figure 3: Illustration of alternative spellings/plurals(CSS view)Other examples of what can be gradually intro-duced into the dictionary include addition ofsubcategorization information (illustrated bypako in Figure 2, where ?pron?
is the POS and?poss?
is the content of the <subc/> element),addition of explicit noun-class- and agreement-marking, introduction of irregularly inflectedforms, tables with inflection (linked to the ap-propriate stems), nested entries, and, obviously,the continuous improvement of lexicographicinformation (the arrangement and selection ofsenses, selection of headwords, an appropriatePOS system).Crucially, this system allows a developer to?publish early, publish often?, and few of theenhancements mentioned here depend on others?
developers are free to choose and to extendthe dictionary at their own pace.In our case, this is a gradual move towardsstructures of finer granularity, suitable for rever-sal (into English-Swahili) and concatenation withother dictionaries (we are going to use English asthe bridge language for pairing the Swahili-English dictionary with English-* dictionaries).6 Potential for the futureWe wish to stress the potential that the encodingformat and the entire project have for producinglexical resources for ?non-commercial?
lan-guages, where funding and the time that the de-velopers may spend on the dictionary are not al-ways guaranteed.
FreeDict dictionary develop-ment can proceed in stages, one can start with a93simple format and get the dictionary publishedon-line practically within days.
The project hasall the SourceForge publishing facilities at itsdisposal, together with bug/patch/etc.
trackersand community forums.
It also has a mailing listand a wiki that can serve to document some pos-sibly difficult aspects of dictionary creation.Thanks to the robust build system of FreeDict,creating a tarball containing a DICT-formatteddictionary and index is only a matter of issuingthe ?make?
command with appropriate argu-ments, and submitting the resulting archive to theSourceForge file release system.5FreeDict is the nexus for the following:?
XML, with its potential for creatingwell-structured documents,?
TEI P5, a de-facto standard taking ad-vantage of this potential,?
the SourceForge repository as well asdistribution and content-management net-work,?
the DICT distribution network: apartfrom being able to query DICT serversstraight from the desktop, Firefox userscan also take advantage of an add-on cli-ent that returns definitions for highlightedwords on a web page,?
FreeDict tools (still under developmentfor TEI P5) as means to manipulate dic-tionaries and to create, among others, theDICT format (usable directly from DICTservers and by other dictionary-providingprojects, e.g., StarDict or Open Dict).6Additionally, lexical resources submitted toFreeDict may undergo further transformations:reversal or concatenation, which means thatwork put into developing a single resource maywell be re-used in developing others.
Consider-ing the possible re-use of lexical resources, theyare expected to be prepared with a view towardsclean exposure of translation equivalents (in thecit/quote system or at least by judicious use ofseparators and brackets).The project has its own distribution system, inthe form of GNU/Linux packages ?
for exam-5 This is something that a dictionary creator need not botherabout ?
submitting a TEI source of the dictionary to themailing list is enough.6 The FreeDict build process provides targets for platformsother than DICT, e.g.
the Evolutionary Dictionary(http://www.mrhoney.de/y/1/html/evolutio.htm) or zbedic(http://bedic.sourceforge.net/).ple, K?stutis Bili?nas is the packager for DebianLinux and maintains a page tracking the usage ofDebian-FreeDict packages;Apart from the above, the content publishedby FreeDict is guaranteed to be free.7 The costs of developing for FreeDictAn AfLaT reviewer suggested that we provide ameasure of the effort required to develop a re-source for FreeDict.
We hope to show here thatthis is very much dependent on the quality andform of the resource and on how much time thedictionary creator is willing to invest into it.
Cru-cially, given the open-source nature of the pro-ject, even a simple, small list of near-binary pair-ings of equivalents can be a) quickly made usefulto e.g.
the readers of web pages written in thegiven language, and b) extended by others into amore satisfying resource.It may be that the effort needed to create lan-guage resources in e.g.
Lexique Pro, an excellentfree tool by SIL International(http://www.lexiquepro.com/) is smaller, butthere are differences in that Lexique Pro is aWindows-only closed-source program whosenative MDF (Multi-Dictionary-Formatter) formatis not as flexible as XML and therefore cannot beprocessed by the many tools that handle XMLand TEI in particular.
Consequently, the perspec-tives for re-use of Lexique Pro dictionaries incomputational linguistic applications are muchsmaller.
To our knowledge, Lexique Pro does notmake it possible for users to query words straightoff web pages, which can be done thanks to dict,a Firefox add-on (http://dict.mozdev.org/).
It ad-mittedly has other advantages that make it a seri-ous alternative.7The ideal solution would be to have an editingfront-end such as Lexique Pro coupled with theopenness and modifiability of the data offered byFreeDict.
Indeed, there are plans for creating aconverter from the new LIFT interchange stan-dard (http://code.google.com/p/lift-standard/)that the beta versions of Lexique Pro can read7 We do not discuss professional commercial dictionarywriting systems such as TshwaneLex(http://tshwanedje.com/tshwanelex/) because, despite theacademic discounts, they may be out of range for the aver-age developer.
It is worth mentioning that the discountedversions of TshwaneLex come with the understandable ?no-commercial-use?
restriction, which is in conflict with eitherthe GNU Public License or the nearly equivalent CreativeCommons BY-SA license that all SourceForge resourcesmust be under (cf.
http://www.gnu.org/licenses/gpl-faq.html).94and write, to the version of the TEI format usedby FreeDict.
That would undoubtedly enhancethe attractiveness of the project.To sum up, developing for FreeDict minimallyrequires some basic knowledge of XML.
FreeXML editors exist (e.g.
XML Copy Editor,http://sourceforge.net/projects/xml-copy-editor/)that can make editing easier by autocompletingthe elements (inserting closing tags, suggestingelements and attributes that are allowed at thegiven place in the structure) and signalling en-coding mistakes.8 African Languages and FreeDictA reviewer remarked that the link to African lan-guage technology in this paper appears only to bepresent in the examples.
Indeed, FreeDict is not aproject that focuses on African-languages ?
it isa project where African language resources canbe hosted and quickly become useful to users.Given an opportunity, we will encourage re-searches dealing with other languages to join theproject ?
which will hopefully result in the crea-tion of more cross-language resources, especiallygiven that the encoding format is not tied to anyparticular language and is able to easily accom-modate features characteristic of practically anylanguage.During the session on ?African Languages inAdvance?
at the 2008 Pozna?
Linguistic Meet-ing, where we presented our Swahili-Polish pro-ject and also mentioned FreeDict as the placewhere we wanted to donate parts of our testSwahili-English dictionary that would otherwiseremain on our disks, we talked to an organizer ofthat session, Karien Brits, about the advantagesthat this project can have for some of her col-leagues working on South-African languages.This is what encouraged us to move on with theFreeDict Swahili-English dictionary and we hopethat others will also find this project, and thepossibilities that it offers, attractive.The FreeDict project has recently awoken af-ter a period of lower activity, and at the moment,every week brings something new.
Currently, asfar as African languages are concerned, apartfrom Swahili?English dictionaries, the projecthosts very basic Afrikaans?English dictionaries,and an Afrikaans-German dictionary (all of themin need of a maintainer).8 We hope that FreeDict8 Dictionary sources can be accessed from the ?download?link on the project page: http://sourceforge.net/projects/freedict/.
They can be queried online at e.g.
http://dict.org/,by setting the appropriate language pair in the database.will become home to many African languageresources, and, thanks to the possibility of dic-tionary concatenation, facilitate also the creationof many African?European dictionary pairs aswell as all-African bilingual dictionaries.AcknowledgementsWe are grateful to three anonymous AfLaT-2009reviewers for their helpful comments on the pre-vious version of this paper, and to Michael Bunkfor confirming that our version of the history ofthe project is close to reality.
We also wish tothank Janusz S. Bie?
for turning our attention tothe FreeDict project a few years ago.ReferencesDICT: http://www.dict.org/Faith, Rik and Martin, Brett.
1997.
A DictionaryServer Protocol.
Request for Comments: 2229(RFC #2229).
Network Working Group.
Availablefrom ftp://ftp.isi.edu/in-notes/rfc2229.txt (last ac-cessed on January 19, 2009).FreeDict: http://www.freedict.org/,http://freedict.sourceforge.net/Kiango, John G. 2000.
Bantu lexicography: a criti-cal survey of the principles and process ofconstructing dictionary entries.
Tokyo: Institutefor the Study of Languages and Cultures of Asiaand Africa, Tokyo University of Foreign Studies.Prinsloo, Danie J. and Gilles-Maurice de Schryver.2002.
Reversing an African-language lexicon: theNorthern Sotho Terminology and Orthography No.4 as a case in point.
South African Journal of Afri-can Languages, 22/2: 161?185Sperberg-McQueen, Michael and Lou Burnard (eds).2002.
The Text Encoding Initiative Guidelines(P4).
Text Encoding Initiative, Oxford.TEI Consortium, eds.
2007.
TEI P5: Guidelines forElectronic Text Encoding and Interchange.Version 1.2.0.
Last updated on October 31st 2008.TEI Consortium.
Available fromhttp://www.tei-c.org/Guidelines/P5/ (last accessedon January 19, 2009).95
