Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 1838?1848,Austin, Texas, November 1-5, 2016. c?2016 Association for Computational LinguisticsDeep Reinforcement Learning with a Combinatorial Action Space forPredicting Popular Reddit ThreadsJi He?, Mari Ostendorf?, Xiaodong He?, Jianshu Chen?, Jianfeng Gao?, Lihong Li?, Li Deng?
?Department of Electrical Engineering, University of Washington, Seattle, WA 98195, USA{jvking, ostendor}@uw.edu?Microsoft Research, Redmond, WA 98052, USA{xiaohe, jianshuc, jfgao, lihongli, deng}@microsoft.comAbstractWe introduce an online popularity predictionand tracking task as a benchmark task for rein-forcement learning with a combinatorial, nat-ural language action space.
A specified num-ber of discussion threads predicted to be pop-ular are recommended, chosen from a fixedwindow of recent comments to track.
Noveldeep reinforcement learning architectures arestudied for effective modeling of the valuefunction associated with actions comprisedof interdependent sub-actions.
The proposedmodel, which represents dependence betweensub-actions through a bi-directional LSTM,gives the best performance across different ex-perimental configurations and domains, and italso generalizes well with varying numbers ofrecommendation requests.1 IntroductionThis paper is concerned with learning policies forsequential decision-making tasks, where a systemtakes actions given options characterized by natu-ral language with the goal of maximizing a long-term reward.
More specifically, we consider taskswith a combinatorial action space, where each ac-tion is a set of multiple interdependent sub-actions.The problem of a combinatorial natural language ac-tion space arises in many applications.
For example,in real-time news feed recommendation, a user maywant to read diverse topics of interest, and an ac-tion (i.e.
recommendation) from the computer agentwould consist of a set of news articles that are not allsimilar in topics (Yue and Guestrin, 2011).
In adver-tisement placement, an action is a selection of sev-eral ads to display, and bundling with complemen-tary products might receive higher click-through-rate than displaying all similar popular products.In this work, we consider Reddit popularity pre-diction, which is similar to newsfeed recommenda-tion but different in two respects.
First, our goalis not to make recommendations based on an indi-vidual?s preferences, but instead based on the antic-ipated long-term interest level of a broad group ofreaders from a target community.
Second, we try topredict rather than detect popularity.
Unlike individ-ual interests, community interest level is not oftenimmediately clear; there is a time lag before the levelof interest starts to take off.
Here, the goal is for therecommendation system to identify and track writ-ten documents (e.g.
news articles, comments in dis-cussion forum threads, or scientific articles) in realtime ?
attempting to identify hot updates before theybecome hot to keep the reader at the leading edge.The premise is that the user?s bandwidth is limited,and only a limited number of things can be recom-mended out of several possibilities.
In our experi-mental work, we use discussion forum text, wherethe recommendations correspond to recent posts orcomments, assessing interest based on communityresponse as observed in ?likes?
or other positive re-actions to those comments.
For training purposes,we can use community response measured at a timemuch later than the original post or publication.
Thisproblem is well-suited to the reinforcement learn-ing paradigm, since the reward (the level of com-munity uptake or positive response) is not immedi-ately known, so the system needs to learn a mecha-nism for estimating future reactions.
Different from1838typical reinforcement learning, the action space iscombinatorial since an action corresponds to a set ofcomments (sub-actions) chosen from a larger set ofcandidates.
A sub-action is a written comment (ordocument, for another variant of this task).Two challenges associated with this problem in-clude the potentially high computational complexityof the combinatorial action space and the develop-ment of a framework for estimating the long-termreward (the Q-value in reinforcement learning) froma combination of sub-actions characterized by nat-ural language.
Here, we focus on the second prob-lem, exploring different deep neural network archi-tectures in an effort to efficiently account for the po-tential redundancy and/or temporal dependency ofdifferent sub-actions in relation to the state space.We sidestep the computational complexity issue (fornow) by working with a task where the number ofcombinations is not too large and by further reduc-ing costs by random sampling.There are two main contributions in this paper.First, we propose a novel reinforcement learningtask with both states and combinatorial actions de-fined by natural language,1 which is introduced insection 2.
This task, which is based on commentpopularity prediction using data from the Reddit dis-cussion forum, can serve as a benchmark in socialmedia recommendation and trend spotting.
The sec-ond contribution is the development of a novel deepreinforcement learning architecture for handling acombinatorial action space associated with naturallanguage.
Prior work related to both the task anddeep reinforcement learning is reviewed in section 3,Details for the new models and baseline architec-tures are described in section 4.
Experimental re-sults in section 5 show the proposed methods outper-form baseline models and that a bidirectional LSTMis effective for characterizing the combined utility ofsub-actions.
A brief summary of findings and openquestions are in section 6.2 Popularity Prediction and TrackingOur experiments are based on Reddit2, one of theworld?s largest public discussion forums.
On Red-1Simulator code and Reddit discussion identifiers are re-leased at https://github.com/jvking/reddit-RL-simulator2http://www.reddit.comFigure 1: A snapshot of the top of a Reddit discussion tree,where karma scores are shown in red boxes.dit, registered users initiate a post and people re-spond with comments, either to the original post orone of its associated comments.
Together, the com-ments and the original post form a discussion tree,which grows as new comments are contributed.
Ithas been show that discussions tend to have a hier-archical topic structure (Weninger et al, 2013), i.e.different branches of the discussion reflect narrow-ing of higher level topics.
Reddit discussions aregrouped into different domains, called subreddits,according to different topics or themes.
Dependingon the popularity of the subreddit, a post can receivehundreds of comments.Comments (and posts) are associated with posi-tive and negative votes (i.e., likes and dislikes) fromregistered users that are combined to get a karmascore, which can be used as a measure for popularity.An example of the top of a Reddit discussion tree isgiven in Figure 1.
The scores in red boxes mark thecurrent karma (popularity) of each comment, and itis quite common that a lower karma comment (e.g.
?Yeah, politics aside, this one looks much cooler?,compared to ?looks more like zom-bama?)
will leadto more children and popular comments in the fu-ture (e.g.
?true dat?).
Note that the karma scoresare dynamic, changing as readers react to the evolv-ing discussion and eventually settling down as thediscussion trails off.
In a real-time comment recom-mendation system, the eventual karma of a commentis not immediately available, so prediction of pop-ularity is based on the text in the comment in thecontext of prior comments in the subtree and othercomments in the current time window.1839Popularity prediction and tracking in the Redditsetting is used in this paper for studying reinforce-ment learning to model long-term rewards in a com-binatorial action space.
At each time step, the statecorresponds to the collection of comments previ-ously recommended.
The system aims at automat-ically picking a few lines of the discussion to followfrom the new set of comments in a given window,which is a combinatorial action.
Thread popular-ity tracking can be thought of as a proxy task fornews or scientific article recommendation.
It has theadvantages that ?documents?
(comments) are rela-tively short and that the long-term reward can becharacterized by Reddit voting scores, which makesthis task easier to work with for algorithm develop-ment than these larger related tasks.In this work, we only consider new comments as-sociated with the threads of the discussion that weare currently following to limit the number of pos-sible sub-actions at each time step and with the as-sumption that prior context is needed to interpret thecomments.
In other words, the new recommendationshould focus on comments that are in the subtrees ofpreviously recommended comments.
(A variant re-laxing this restriction is suggested in the conclusionsection.)
Typically, one would expect some inter-dependencies between comments made in the samewindow if they fall under the same subtree, becausethey correspond to a reply to the same parent.
Inaddition, there may be some temporal dependency,since one sub-action may be a comment on the other.These dependencies will affect the combined utilityof the sub-actions.According to our experiments, the performance issignificantly worse when we learn a myopic policycompared to reinforcement learning with the samefeature set.
This shows that long-term dependencyindeed matters, as illustrated in Figure 1.
This servesas a justification that reinforcement learning is anappropriate approach for modeling popularity of adiscussion thread.3 Related WorkThere is a large body of work on reinforcementlearning.
Among those of most interest here aredeep reinforcement learning methods that leverageneural networks because of their success in handlinglarge discrete state/action spaces.
Early work suchas TD-gammon used a neural network to approxi-mate the state value function (Tesauro, 1995).
Re-cent advances in deep learning (LeCun et al, 2015;Deng and Yu, 2014; Hinton et al, 2012; Krizhevskyet al, 2012; Sordoni et al, 2015) inspired significantprogress by combining deep learning with reinforce-ment learning (Mnih et al, 2015; Silver et al, 2016;Lillicrap et al, 2016; Duan et al, 2016).
In natu-ral language processing, reinforcement learning hasbeen applied successfully to dialogue systems thatgenerate natural language and converse with a hu-man user (Scheffler and Young, 2002; Singh et al,1999; Wen et al, 2016).
There has also been in-terest in mapping text instructions to sequences ofexecutable actions and extracting textual knowledgeto improve game control performance (Branavan etal., 2009; Branavan et al, 2011).Recently, Narasimhan et al (2015) studied thetask of text-based games with a deep Q-learningframework.
He et al (2016) proposed to use a sepa-rate deep network for handling natural language ac-tions and to model Q-values via state-action interac-tion.
Nogueira and Cho (2016) have also proposeda goal-driven web navigation task for language-based sequential decision making.
Narasimhan etal.
(2016) applied reinforcement learning for acquir-ing and incorporating external evidence to improveinformation extraction accuracy.
The study that wepresent with Reddit popularity tracking differs fromthese other text-based reinforcement learning tasksin that the language in both state and action spacesis unconstrained and quite rich.Dulac-Arnold et al (2016) also investigated aproblem of large discrete action spaces.
A Wolper-tinger architecture is proposed to reduce computa-tional complexity of evaluating all actions.
While acombinatorial action space can be large and discrete,their method does not directly apply in our case, be-cause the possible actions are changing over differ-ent states.
In addition, our work differs in that its fo-cus is on modeling the combined action-value func-tion rather than on reducing computational com-plexity.
Other work that targets a structured actionspace includes: an actor-critic algorithm, where ac-tions can have real-valued parameters (Hausknechtand Stone, 2016); and the factored Markov DecisionProcess (MDP) (Guestrin et al, 2001; Sallans and1840Hinton, 2004), with certain independence assump-tions between a next-state component and a sub-action.
As for a bandits setting, Yue and Guestrin(2011) considered diversification of multi-item rec-ommendation, but their methodology is limited tousing linear approximation with hand-crafted fea-tures.The task explored in our paper ?
detecting andtracking popular threads in a discussion ?
is some-what related to topic detection and tracking (Allan,2012; Mathioudakis and Koudas, 2010), but it dif-fers in that the goal is not to track topics basedon frequency, but rather based on reader response.Thus, our work is more closely related to popu-larity prediction for social media and online news.These studies have explored a variety of definitions(or measurements) of popularity, including: the vol-ume of comments in response to blog posts (Yanoand Smith, 2010) and news articles (Tasgkias et al,2009; Tatar et al, 2011), the number of Twittershares of news articles (Bandari et al, 2012), thenumber of reshares on Facebook (Cheng et al, 2014)and retweets on Twitter (Suh et al, 2010; Hong etal., 2011; Tan et al, 2014; Zhao et al, 2015), therate of posts related to a source rumor (Lukasik etal., 2015), and the difference in the number of readerup and down votes on posts and comments in Redditdiscussion forums (Lakkaraju et al, 2013; Jaech etal., 2015).
An advantage of working with the Red-dit data is that both positive and negative reactionsare accounted for in the karma score.
Of the priorwork on Reddit, the task explored here is most simi-lar to (Jaech et al, 2015) in that it involves choosingrelatively high karma comments (or threads) from atime-limited set rather than directly predicting com-ment (or post) karma.
Prior work on popularityprediction used supervised learning; this is the firstwork that frames tracking hot topics in social mediawith deep reinforcement learning.4 Characterizing a combinatorial actionspace4.1 NotationIn this sequential decision making problem, at eachtime step t, the agent receives a text string that de-scribes the state st ?
S (i.e., ?state-text?)
and picksa text string that describes the action at ?
A (i.e.,?action-text?
), where S and A denote the state andaction spaces, respectively.
Here, we assume at ischosen from a set of given candidates.
In our caseboth S and A are described by natural language.Given the state-text and action-texts, the agent aimsto select the best action in order to maximize itslong-term reward.
Then the environment state is up-dated st+1 = s?
according to a probability p(s?|s, a),and the agent receives a reward rt+1 for that partic-ular transition.
We define the action-value function(i.e.
the Q-function) Q(s, a) as the expected returnstarting from s and taking the action a:Q(s, a) = E{+?
?l=0?lrt+1+l|st = s, at = a}where ?
?
(0, 1) denotes a discount factor.
TheQ-function associated with an optimal policy canbe found by the Q-learning algorithm (Watkins andDayan, 1992):Q(st, at)?
Q(st, at)+?t ?
(rt+1 + ?
?maxa Q(st+1, a)?Q(st, at))where ?t is a learning rate parameter.The set of comments that are being tracked at timestep t is denoted as Mt.
All previously tracked com-ments, as well as the post (root node of the tree), isconsidered as state st (st = {M0,M1, ?
?
?
,Mt}),and we initialize s0 = M0 to be the post.
Anaction is taken when a total of N new comments{ct,1, ct,2, ?
?
?
, ct,N} appear as nodes in the subtreeof Mt, and the agent picks a set of K comments tobe tracked in the next time step t+1.
Thus we have:at = {c1t , c2t , ?
?
?
, cKt }, cit ?
{ct,1, ct,2, ?
?
?
, ct,N}and cit 6= cjt if i 6= j (1)and Mt+1 = at.
At the same time, by taking ac-tion at at state st, the reward rt+1 is the accumulatedkarma scores, i.e.
sum over all comments in Mt+1.Note that the reward signal is used in online train-ing, while at model deployment (testing stage), thescores are only used as an evaluation metric.Following the reinforcement learning tradition,we call tracking of a single discussion tree from start(root node post) to end (no more new comments ap-pear) an episode.
We also randomly partition all1841discussion trees into separate training and testingsets, so that texts seen by the agent in training andtesting are from the same domain but different dis-cussions.
For each episode, depending on whethertraining/testing, the simulator randomly picks a dis-cussion tree, and presents the agent with the currentstate and N new comments.4.2 Q-function alternativesWith the real-time setting, it is clear that action atwill affect the next state st+1 and furthermore thefuture expected reward.
The action at consists of Kcomments (sub-actions), making modeling Q-valuesQ(st, at) difficult.
To handle a large state space,Mnih et al (2015) proposed a Deep Q-Network(DQN).
In case of a large action space, we mayuse both state and action representations as input toa deep neural network.
It is shown that the DeepReinforcement Relevance Network (DRRN, Figure2(b)), i.e.
two separate deep neural networks formodeling state embedding and action embedding,performs better than per-action DQN (PA-DQN inFigure 2(a)), as well as other DQN variants for deal-ing with natural language action spaces (He et al,2016).Our baseline models include Linear, PA-DQN and DRRN.
We concatenate the K sub-actions/comments to form the action representation.The Linear and PA-DQN (Figure 2(a)) take as inputa concatenation of state and action representations,and model a single Q-value Q(st, at) using linear orDNN function approximations.
The DRRN consistsof a pair of DNNs, one for the state-text embeddingand the other for action-text embeddings, whichare then used to compute Q(st, at) via a pairwiseinteraction function (Figure 2(b)).One simple alternative approach by utilizing thiscombinatorial structure is to compute an embeddingfor each sub-action cit.
We can then model the valuein picking a particular sub-action, Q(st, cit), througha pairwise interaction between the state and this sub-action.
Q(st, cit) represents the expected accumu-lated future rewards by including this sub-action.The agent then greedily picks the top-K sub-actionswith highest values to achieve the highest Q(st, at).In this approach, we are assuming the long-term re-wards associated with sub-actions are independentof each other.
More specifically, greedily pickingthe top-K sub-actions is equivalent to maximizingthe following action-value function:Q(st, at) =K?i=1Q(st, cit) (2)while satisfying (1).
We call this proposed methodDRRN-Sum, and its architecture is shown in Figure2(c).
Similarly as in DRRN, we use two networksto embed state and actions separately.
However, fordifferent sub-actions, we keep the network param-eters tied.
We also use the same top layer dimen-sion and the same pairwise interaction function forall sub-actions.In the case of a linear additive interaction, suchas an inner product or bilinear operation, Equation(2) is equivalent to computing the interaction be-tween the state embedding and an action embed-ding, where the action embedding is obtained lin-early by summing over K sub-action embeddings.When sub-actions have strong correlation, this in-dependence assumption is invalid and can result ina poor estimation of Q(st, at).
For example, mostpeople are interested in the total information storedin the combined action at.
Due to content redun-dancy in the sub-actions c1t , c2t , ?
?
?
, cKt , we expectQ(st, at) to be smaller than?iQ(st, cit).To come up with a general model for handling acombinatorial action-value function, we further pro-pose the DRRN-BiLSTM (Figure 2(d)).
In this ar-chitecture, we use a DNN to generate an embeddingfor each comment.
Then a Bidirectional Long Short-Term Memory (Graves and Schmidhuber, 2005) isused to combine a sequence of K comment embed-dings.
As the Bidirectional LSTM has a larger ca-pacity due to its nonlinear structure, we expect itwill capture more details on how the embeddings forthe sub-actions combine into an action embedding.Note that both of our proposed methods (DRRN-Sum and DRRN-BiLSTM) can handle a varyingvalue ofK, while for the DQN and DRRN baselines,we need to use a fixed K in training and testing.5 Experiments5.1 Datasets and Experimental ConfigurationsOur data consists of 5 subreddits (askscience,askmen, todayilearned, worldnews, nfl) with diverse1842??
???
???
????????????
(?, ??)??
???
???
????????,???,???
(?, ??)??,????,?
?pairwise interaction function(e.g.
inner product)(a) Per-action DQN??
???
???
????????????
(?, ??)??
???
???
????????,???,???
(?, ??)??,????,?
?pairwise interaction function(e.g.
inner product)(b) DRRN??
???
???
????????,???,???
(?, ??)??,????,?
?pairwise interaction function(e.g.
inner product)??,????,????,????,????
(?, ??
)summation(c) DRRN-Sum??
???
???
????????,???,???
(?, ??)??,????,?
?pairwise interaction function(e.g.
inner product)??,????,????,????,????,?
?bidirectional LSTMbidirectional LSTM????
??
????????
??
???
?outputinput(d) DRRN-BiLSTMFigure 2: Different deep Q-learning architecturestopics and genres.
In our experiments, in order tohave long enough discussion threads, we filter outdiscussion trees with fewer than 100 comments.
Foreach subreddit, we randomly partition 90% of thedata for online training, and 10% of the data for test-ing (deployment).
The basic subreddit statistics areshown in Table 1.
We report the random policy per-formances and heuristic upper bound performances(averaged over 10,000 episodes) in Table 2 and Ta-ble 3.3 The upper bound performances are obtainedusing stabilized karma scores and offline constructedtree structure.
The mean and standard deviation areobtained by 5 independent runs.In all our experiments we set N = 10.
Explicitlyrepresenting all N -choose-K actions requires a lotof memory and does not scale up.
We therefore usea variant of Q-learning: when taking the max over3Upper bounds are estimated by greedily searching througheach discussion tree to find K max karma discussion threads(overlapped comments are counted only once).
This upperbound may not be attainable in a real-time setting.Subreddit # Posts (in k) # Comments (in M)askscience 0.94 0.32askmen 4.45 1.06todayilearned 9.44 5.11worldnews 9.88 5.99nfl 11.73 6.12Table 1: Basic statistics of filtered subreddit data setsSubreddit Random Upper boundaskscience 321.3 (7.0) 2109.0 (16.5)askmen 132.4 (0.7) 651.4 (2.8)todayilearned 390.3 (5.7) 2679.6 (30.1)worldnews 205.8 (4.5) 1853.4 (44.4)nfl 237.1 (1.4) 1338.2 (13.2)Table 2: Mean and standard deviation of random and upper-bound performance (with N = 10,K = 3) across differentsubreddits.1843K Random Upper bound2 201.0 (2.1) 1991.3 (2.9)3 321.3 (7.0) 2109.0 (16.5)4 447.1 (10.8) 2206.6 (8.2)5 561.3 (18.8) 2298.0 (29.1)Table 3: Mean and standard deviation of random and upper-bound performance on askscience, with N = 10 and K =2, 3, 4, 5.possible next-actions, we instead randomly subsam-ple m?
actions and take the max over them.
We setm?
= 10 throughout our experiments.
This heuristictechnique works well in our experiments.For text preprocessing we remove punctuationand lowercase capital letters.
For each state st andcomment cit, we use a bag-of-words representationwith the same vocabulary in all networks.
The vo-cabulary contains the most frequent 5,000 words; theout-of-vocabulary rate is 7.1%.In terms of the Q-learning agent, fully-connectedneural networks are used for text embeddings.
Thenetwork has L = 2 hidden layers, each with20 nodes, and model parameters are initializedwith small random numbers.
-greedy is used forexploration-exploitation, and we keep  = 0.1throughout online training and testing.
We pick thediscount factor ?
= 0.9.
During online training, weuse experience replay (Lin, 1992) and the memorysize is set to 10,000 tuples of (st, at, rt+1, st+1).
Foreach experience replay, 500 episodes are generatedand stored in a first-in-first-out fashion, and multi-ple epochs are trained for each model.
Minibatchstochastic gradient descent is implemented with abatch size of 100.
The learning rate is kept constant:?t = 0.000001.The proposed methods are compared with threebaseline models: Linear, per-action DQN (PA-DQN), and DRRN.
For both Linear and PA-DQN,the state and comments are concatenated as an in-put.
For the DRRN, the state and comments are sentthrough two separate deep neural networks.
How-ever, in our baselines, we do not explicitly modelhow values associated with each comment are com-bined to form the action value.
For the DRRNbaseline and proposed methods (DRRN-Sum andDRRN-BiLSTM), we use an inner product as thepairwise interaction function.0 5 10 15Number of replays300400500600700800900RewardsRandomLinearPA-DQNDRRNDRRN-SumDRRN-BiLstmFigure 3: Learning curves of baselines and proposed methodson ?askscience?5.2 Experimental ResultsIn Figure 3 we provide learning curves of differ-ent models on the askscience subreddit during on-line learning.
In this experiment, we set N =10,K = 3.
Each curve is obtained by averagingover 3 independent runs, and the error bars are alsoshown.
All models start with random performance,and converge after approximately 15 experience re-plays.
The DRRN-Sum converges as fast as baselinemodels, with better converged performance.
DRRN-BiLSTM converges slower than other methods, butwith the best converged performance.After we train all the models on the training set,we fix the model parameters and apply (deploy) onthe test set, where the models predict which actionto take but no reward is shown until evaluation.
Thetest performance is averaged over 1000 episodes,and we report mean and standard deviation over 5independent runs.On askscience, we try multiple settings with N =10, K = 2, 3, 4, 5 and the results are shown in Ta-ble 4.
Both DRRN-Sum and DRRN-BiLSTM con-sistently outperform baseline methods.
The DRRN-BiLSTM performs better with larger K, probablydue to the greater chance of redundancy in combin-ing more sub-actions.We also perform online training and test acrossdifferent subreddits.
With N = 10,K = 3, thetest performance gains over the linear baseline areshown in Figure 4.
Again, the test performance is1844K Linear PA-DQN DRRN DRRN-Sum DRRN-BiLSTM2 553.3 (2.8) 556.8 (14.5) 553.0 (17.5) 569.6 (18.4) 573.2 (12.9)3 656.2 (22.5) 668.3 (19.9) 694.9 (15.5) 704.3 (20.1) 711.1 (8.7)4 812.5 (23.4) 818.0 (29.9) 828.2 (27.5) 829.9 (13.2) 854.7 (16.0)5 861.6 (28.3) 884.3 (11.4) 921.8 (10.7) 942.3 (19.1) 980.9 (21.1)Table 4: On askscience, average karma scores and standard deviation of baselines and proposed methods (with N = 10)020406080100120140askscience askmen todayilearned worldnews nflAverage reward (Karmascores)Linear PA-DQN DRRN DRRN-Sum DRRN-BiLSTMFigure 4: Average karma score gains over the linear baseline and standard deviation across different subreddits (withN = 10,K =3).K DRRN-Sum DRRN-BiLSTM2 538.5 (18.9) 551.2 (10.5)4 819.1 (14.7) 829.9 (11.1)5 921.6 (15.6) 951.3 (15.7)Table 5: On askscience, average karma scores and standard de-viation of proposed methods trained with K = 3 and test withdifferent K?saveraged over 1000 episodes, and we report meanand standard deviation over 5 independent runs.
Thefindings are consistent with those for askscience.Since different subreddits may have very differentkarma scores distributions and language style, thissuggests the algorithms apply to different text gen-res.In actual model deployment, a possible scenariois that users may have different requests.
For exam-ple, a user may ask the agent to provide K = 2 dis-cussion threads on one day, due to limited readingtime, and ask the agent to provide K = 5 discus-sion threads on the other day.
For the baseline mod-els (Linear, PA-DQN, DRRN), we will need to trainseparate models for different K?s.
The proposedmethods (DRRN-Sum and DRRN-BiLSTM), on theother hand, can easily handle a varying K. To testwhether the performance indeed generalizes well,we train proposed models on askscience with N =10,K = 3 and test them with N = 10,K ?
2, 4, 5,as shown in Table 5.
Compared to the proposedmodels that are specifically trained for these K?s(Table 4), the generalized test performance indeeddegrades, as expected.
However, in many cases, ourproposed methods still outperform all three base-lines (Linear, PA-DQN and DRRN) that are trainedspecifically for these K?s.
This shows that the pro-posed methods can generalize to varying K?s evenif it is trained on a particular value of K.In Table 6, we show an anecdotal example withstate and sub-actions.
The two sub-actions arestrongly correlated and have redundant information.By combining the second sub-action compared tochoosing just the first sub-action alone, DRRN-Sumand DRRN-BiLSTM predict 86% and 26% relativeincrease in action-value, respectively.
Since thesetwo sub-actions are highly redundant, we hypothe-size DRRN-BiLSTM is better than DRRN-Sum atcapturing interdependency between sub-actions.6 ConclusionIn this paper we introduce a new reinforcementlearning task associated with predicting and trackingpopular threads on Reddit.
The states and actions1845State text (partially shown)Are there any cosmological phenomena that westrongly suspect will occur, but the universe just isn?told enough for them to have happened yet?Comments (sub-actions) (partially shown)[1] White dwarf stars will eventually stop emitting lightand become black dwarfs.
[2] Yes, there are quite a few,such as: White dwarfs will cool down to black dwarfs.Table 6: An example state and its sub-actionsare all described by natural language so the task isuseful for language studies.
We then develop noveldeep Q-learning architectures to better model thestate-action value function with a combinatorial ac-tion space.
The proposed DRRN-BiLSTM methodnot only performs better across different experimen-tal configurations and domains, but it also general-izes well for scenarios where the user can requestchanges in the number tracked.This work represents a first step towards address-ing the popularity prediction and tracking problem.While performance of the system beats several base-lines, it still falls far short of the oracle result.
Priorwork has shown that timing is an important factorin predicting popularity (Lampe and Resnick, 2004;Jaech et al, 2015), and all the proposed modelswould benefit from incorporating this information.Another variant might consider short-term reactionsto a comment, if any, in the update window.
Itwould also be of interest to explore implementationsof backtracking in the sub-action space (incurring acost), in order to recommend comments that werenot selected earlier but have become highly popular.Lastly, it will be important to study principled solu-tions for handling the computational complexity ofthe combinatorial action space.ReferencesJ.
Allan.
2012.
Topic detection and tracking: event-based information organization, volume 12.
SpringerScience & Business Media.Roja Bandari, Sitaram Asur, and Bernardo Huberman.2012.
The pulse of news in social media: forecastingpopularity.
In Proc.
Int.
AAAI Conf.
Web and SocialMedia (ICWSM).S.R.K.
Branavan, H. Chen, L. Zettlemoyer, and R. Barzi-lay.
2009.
Reinforcement learning for mapping in-structions to actions.
In Proc.
of the Joint Conferenceof the 47th Annual Meeting of the ACL and the 4thIJCNLP, pages 82?90, August.S.R.K.
Branavan, D. Silver, and R. Barzilay.
2011.Learning to win by reading manuals in a Monte-Carloframework.
In Proc.
of the Annual Meeting of the As-sociation for Computational Linguistics: Human Lan-guage Technologies-Volume 1, pages 268?277.
Asso-ciation for Computational Linguistics.Justin Cheng, Lada Adamic, P. Alex Dow, Jon Kleinberg,and Jure Leskovec.
2014.
Can cascades be predicted?In Proc.
Int.
Conf.
World Wide Web (WWW).L.
Deng and D. Yu.
2014.
Deep learning: Methods andapplications.
Foundations and Trends in Signal Pro-cessing, 7(3?4):197?387.Y.
Duan, X. Chen, R. Houthooft, J. Schulman, andP.
Abbeel.
2016.
Benchmarking deep reinforcementlearning for continuous control.
In Proceedings of the33rd International Conference on Machine Learning(ICML).G.
Dulac-Arnold, R. Evans, H. van Hasselt, P. Sunehag,T.
Lillicrap, and J.
Hunt.
2016.
Deep reinforcementlearning in large discrete action spaces.
arXiv preprintarXiv:1512.07679.A.
Graves and J. Schmidhuber.
2005.
Framewisephoneme classification with bidirectional LSTM andother neural network architectures.
Neural Networks,18(5):602?610.C.
Guestrin, D. Koller, and R. Parr.
2001.
Multiagentplanning with factored MDPs.
In NIPS, volume 1,pages 1523?1530.M.
Hausknecht and P. Stone.
2016.
Deep reinforcementlearning in parameterized action space.
In Interna-tional Conference on Learning Representations.J.
He, J. Chen, X.
He, J. Gao, L. Li, L. Deng, and M. Os-tendorf.
2016.
Deep reinforcement learning with anatural language action space.
In Proc.
Annu.
MeetingAssoc.
for Computational Linguistics (ACL).G.
Hinton, L. Deng, D. Yu, G. E. Dahl, A. Mohamed,N.
Jaitly, A.
Senior, V. Vanhoucke, P. Nguyen, T. N.Sainath, and B. Kingsbury.
2012.
Deep neural net-works for acoustic modeling in speech recognition:The shared views of four research groups.
IEEE Sig-nal Process.
Mag., 29(6):82?97.Liangjie Hong, Ovidiu Dan, and Brian Davison.
2011.Predicting popular messages in Twitter.
In Proc.
Int.Conf.
World Wide Web (WWW), pages 57?58.A.
Jaech, V. Zayats, H. Fang, M. Ostendorf, and H. Ha-jishirzi.
2015.
Talking to the crowd: What do peoplereact to in online discussions?
In Proc.
of the Confer-ence on Empirical Methods in Natural Language Pro-cessing, pages 2026?2031, September.A.
Krizhevsky, I. Sutskever, and G. Hinton.
2012.
Im-agenet classification with deep convolutional neuralnetworks.
In NIPS, pages 1097?1105.1846Himabindu Lakkaraju, Julian McAuley, and JureLeskovec.
2013.
What?s in a name?
Understandingthe interplay between titles, content, and communitiesin social media.
In Proc.
Int.
AAAI Conf.
Web and So-cial Media (ICWSM).C.
Lampe and P. Resnick.
2004.
Slash(dot) and burn:distributed moderation in a large online conversationspace.
In Proceedings of the SIGCHI Conference onHuman Factors in Computing Systems, pages 543?550.Y.
LeCun, Y. Bengio, and G. Hinton.
2015.
Deep learn-ing.
Nature, 521(7553):436?444.T.
P Lillicrap, J. J Hunt, A. Pritzel, N. Heess, T. Erez,Y.
Tassa, D. Silver, and D. Wierstra.
2016.
Continu-ous control with deep reinforcement learning.
In In-ternational Conference on Learning Representations.L-J Lin.
1992.
Self-improving reactive agents based onreinforcement learning, planning and teaching.
Ma-chine Learning, 8(3?4):293?321.Michal Lukasik, Trevor Cohn, and Kalina Bontcheva.2015.
Point process modelling of rumour dynamicsin social media.
In Proc.
Annu.
Meeting Assoc.
forComputational Linguistics (ACL).M.
Mathioudakis and N. Koudas.
2010.
Twittermonitor:trend detection over the twitter stream.
In Proceedingsof the 2010 ACM SIGMOD International Conferenceon Management of data, pages 1155?1158.
ACM.V.
Mnih, K. Kavukcuoglu, D. Silver, A.
A Rusu, J. Ve-ness, M. G Bellemare, A. Graves, M. Riedmiller, A. KFidjeland, G. Ostrovski, et al 2015.
Human-levelcontrol through deep reinforcement learning.
Nature,518(7540):529?533.K.
Narasimhan, T. Kulkarni, and R. Barzilay.
2015.
Lan-guage understanding for text-based games using deepreinforcement learning.
In Proc.
of the 2015 Confer-ence on Empirical Methods in Natural Language Pro-cessing, pages 1?11, September.K.
Narasimhan, A. Yala, and R. Barzilay.
2016.
Im-proving information extraction by acquiring externalevidence with reinforcement learning.
arXiv preprintarXiv:1603.07954.R.
Nogueira and K. Cho.
2016.
Webnav: A new large-scale task for natural language based sequential deci-sion making.
arXiv preprint arXiv:1602.02261.B.
Sallans and G. E Hinton.
2004.
Reinforcement learn-ing with factored states and actions.
The Journal ofMachine Learning Research, 5:1063?1088.K.
Scheffler and S. Young.
2002.
Automatic learningof dialogue strategy using dialogue simulation and re-inforcement learning.
In Proc.
of the second Inter-national Conference on Human Language TechnologyResearch, pages 12?19.D.
Silver, A. Huang, C. J Maddison, A. Guez, L. Sifre,G.
Van Den Driessche, J. Schrittwieser, I. Antonoglou,V.
Panneershelvam, M. Lanctot, et al 2016.
Master-ing the game of Go with deep neural networks and treesearch.
Nature, 529(7587):484?489.S.
P Singh, M. J Kearns, D. J Litman, and M. A Walker.1999.
Reinforcement learning for spoken dialoguesystems.
In NIPS, pages 956?962.A.
Sordoni, M. Galley, M. Auli, C. Brockett, Y. Ji,M.
Mitchell, J.-Y.
Nie, J. Gao, and B. Dolan.
2015.A neural network approach to context-sensitive gen-eration of conversational responses.
In NAACL-HLT2015.B.
Suh, L. Hong, P. Pirolli, and E. H. Chi.
2010.
Want tobe retweeted?
Large scale analytics on factors impact-ing retweet in twitter network.
In Proc.
IEEE Inter.Conf.
on Social Computing (SocialCom), pages 177?184.Chenhao Tan, Lillian Lee, and Bo Pang.
2014.
The ef-fect of wording on message propagation: Topic- andauthor-controlled natural experiments on Twitter.
InProc.
Annu.
Meeting Assoc.
for Computational Lin-guistics (ACL), pages 175?186.Manos Tasgkias, Wouter Weerkamp, and Maarten de Ri-jke.
2009.
Predicting the volume of comments on on-line news stories.
In Proc.
CIKM, pages 1765?1768.Alexandru Tatar, Jeremie Leguay, Panayotis Antoniadis,Arnaud Limbourg, Marcelo Dias de Amorim, andSerge Fdida.
2011.
Predicting the polularity of onlinearticles based on user comments.
In Proc.
Inter.
Conf.on Web Intelligence, Mining and Semantics (WIMS),pages 67:1?67:8.G.
Tesauro.
1995.
Temporal difference learning and TD-gammon.
Communications of the ACM, 38(3):58?68.C.
JCH Watkins and P. Dayan.
1992.
Q-learning.
Ma-chine learning, 8(3-4):279?292.T.-H. Wen, M. Gasic, N. Mrksic, L. M Rojas-Barahona,P.-H. Su, S. Ultes, D. Vandyke, and S. Young.
2016.
Anetwork-based end-to-end trainable task-oriented dia-logue system.
arXiv preprint arXiv:1604.04562.T.
Weninger, X.
A. Zhu, and J. Han.
2013.
An explo-ration of discussion threads in social news sites: A casestudy of the reddit community.
In Advances in So-cial Networks Analysis and Mining (ASONAM), 2013IEEE/ACM International Conference on, pages 579?583.
IEEE.Tae Yano and Noah A. Smith.
2010.
What?s worthy ofcomment?
Content and comment volume in politicalblogs.
In Proc.
Int.
AAAI Conf.
Weblogs and SocialMedia (ICWSM).Y.
Yue and C. Guestrin.
2011.
Linear submodular ban-dits and their application to diversified retrieval.
InAdvances in Neural Information Processing Systems,pages 2483?2491.1847Qingyuan Zhao, Murat A. Erdogdu, Hera Y.
He, AnandRajaraman, and Jure Leskovec.
2015.
SEISMIC: Aself-exciting point process model for predicting Tweetpopularity.
In Proc.
ACM SIGKDD Conf.
KnowledgeDiscovery and Data Mining.1848
