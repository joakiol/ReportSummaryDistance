A Computational Morphology System for ArabicRiyad AI-ShalabiMartha EvensDepartment of Computer Science and Applied MathematicsIllinois Institute of Technology10 West 31st StreetChicago, IL 60616alshriy@minna.cns.iit.edu, mwe@math.nwu.edu312-567-5153AbstractThis paper describes a new algorithm formorphological analysis of Arabic words,which has been tested on a corpus of 242abstracts from the Saudi Arabian NationalComputer Conference.
It runs an order ofmagnitude faster than other algorithms intheliterature.1.
IntroductionThis paper describes a computer system forArabic morphology that employs a new,faster algorithm to find roots and patterns forverb forms and for nouns and adjectivesderived from verbs.
The program has beentested on a corpus of 242 abstracts from theSaudi Arabian National Conferences and weare in the process of extending the list ofroots to handle anewspaper corpus as well.To represent the Arabic character set, weused the Nafitha software developed by 01system, Manama, Bahrain (Nafitha 1988).The morphology system was written withthe goal of supporting natural anguageprocessing programs such as parsers andinformation retrieval systems.
It iscoordinated with a large Arabic lexicon(A1Samara, 1996).
It can, however, be usedto display whole paradigms for Arabic verbs.It can also display a single form, if the userchooses to specify not just the root but themood, gender, number, and person.
It canalso analyze any verb form given to it.
Inaddition to 1,116 roots for regular verbs, thesystem stores forms for the thirty-nine mostcommon irregular verbs.
The Arabic wordfor morphology is "t(a)Sryf' based on theroot "Srf', which has a basic idea ofchanging direction, averting, and flowingfreely.
"t(a)Sryf" is the total range ofmorphological patterns used with a givenroot (Owens, 1988).
Here the "S" in theword "T(a)Sryf" stands for the letter"o,,"since there is no corresponding letter inEnglish for this letter.We became involved in problems ofmorphology because we need to find stemsand roots for purposes of informationretrieval (A1-Kharashi and Evens, 1994;Abu-Salem, 1992; Hmeidi, 1995) and parsing(Abu-Arafah, 1995).
The morphology systemis coordinated with a large lexicon for Arabic(Hammouri, 1994; A1Samara, 1996).The organization of this paper is verystraightforward.
The next section contains anoverview of other approaches tocomputational morphology.
Then wedescribe our approach to Arabic morphologyand its extension to four and five letter ootsas well as the three letter oots that are muchmore common.
Finally, we show examplesof the output that the program produceswhen it is used interactively and concludewith plans for future research.662.
Review of  Some OtherMorphology Systems,  Systematicattempts at computational morphology in theWest were successful enough by 1992 tolead to the almost simultaneous publicationof two major books, Sproat (1992) andRitchie et al (1992).
At about he same timethe PC-Kimmo program became widelyavailable (Antworth, 1992).
It had beenobvious from the very beginning of Arabiclanguage processing that morphologysystems were an absolute necessity, becauseof the extremely complex morphology thatArabic shares with other Semitic languages.Hegazi and EISharkawi (1986) designed asystem to detect he root of any Arabic wordalong with morphological patterns and wordcategories.
Their system has also been usedfor detection and correction &mistakes inspelling and vowelization.Saliba and Ai-Dannan (1989) developeda Comprehensive Arabic MorphologicalAnalysis and Generation System at the IBMScientific Center in Kuwait.
Their analyzerexamines the input word for different wordtypes and attempts to find all possibleanalyses.
In the analysis process the longestvalid prefix and suffix are stripped from theword and the remaining part of the word,which is called the stem, is used to identify avalid Arabic word.
If the stem is accepted asa content word (noun or verb)then furtheranalysis processes will be carried out.EI-Sadany and Hashish (1989)developed an Arabic morphological systemalso designed to carry out both analysis andgeneration, capable of dealing withvowelized, semivowelized, andnonvowelized Arabic words.
This systemwas developed at the IBM Cairo ScientificCenter.
The system has the ability tovowelize nonvowelized words.
The systemwas implemented inProlog on the IBM PS/2Model 60.A1-Fedaghi and A1-Anzi (1989) presentan algorithm to generate the root and thepattern of a given Arabic word.
The mainconcept in the algorithm is to locate theposition of the three letters of a possibletriliteral root in the pattern and check to seewhether the candidate trigram appears in alist of known roots.When we began to work on themorphology problem ourselves, our firstreaction was to start with PC-Kimmo, whichwe had used in some experiments with muchsimpler problems in English morphology.
Butwhen we communicated with Evan Antworthof the Summer Institute of Linguistics, hediscouraged us:"The basic two level mechanism as it isimplemented in PC-KIMMO can't easilyhandle (if at all) the distinctive semiticpatterns of consonantal root and intercalatedvowels".When we received this message weabandoned our plans to use PC KIMMO andresolved to first extend the E1-Anzi and A1-Fedaghi Algorithm to handle quadriliteralroots and then to look for ways to improveon it.3.
Algorithm to FindQuadriliteral Roots.
The first authordesigned and implemented an algorithm tofind quadriliteral roots and their patterns.This algorithm follows the same strategy asthe algorithm of Al-Fedaghi and A1-Anzi(1989).Quadriliteral roots are usually formed asextensions oftriliteral roots by reduplicatingthe final consonant.
Thus, the standardtriliteral pattern "t91" becomes thequadriliteral pattern "t911."
Here 9 stands forthe letter "ayn" since there is nocorresponding letter in English for this letter.The other forms of quadriliteral verbs arethen obtained by adding affixes to the root.The first step of the algorithm forquadriliteral roots is to search the input form67for a correct pattern.
We take a candidatepattern and look for the four letters in theinput word (corresponding to f, 9, 1, and 1).
Ifthe letters are found we label their positions,posl, pos2, pos3, and pos4.
Otherwise, wechoose the next candidate pattern and tryagain.
Once we have a match in all fourpositions we go to the second step.The second step is to extract he rootfrom the input word in the positions posl,pos2, pos3, and pos4.4.
New Approach to Finding theRoot and the Pattern.
The algorithm forquadriliteral roots shown in Figure 1 is anextension of the triliteral algorithm of AI-Fedaghi and AI-Anzi (1989).
Once wehadimplemented i t  successfully, we wereconcerned that it was somewhat slow, so wesearched for a new approach that would giveus the same result.
This new approach wasthen implemented for both triliteral andquadriliteral roots.We describe how our approach works fortriliteral roots.
The first step is to remove thelongest possible prefix.
Then we look at theremainder.
The three letters of the root mustlie somewhere in the first four or fivecharacters of the remainder.
What is more,the first letter of the remainder is the firstletter of the root since we have removed thelongest possible prefix.We check all possible trigrams within thefirst five letters of the remainder.
That is, wecheck the following six possible trigrams:?
first, second, and third lettersfirst, second, and fourthfirst, second, and fiRhfirst, third, and fourthfirst, third, and fifthfirst, fourth, and fiRhIn order to test the algorithm, weprepared two files: a file of roots and a file ofprefixes.
The program outputs the root andthe pattern for each word in each &the 242abstracts.
Our colleagues in the ArabicLanguage Processing Laboratory checked allthe results for correctness.In the abstracts there are 19,167running words, 16,775 with triliteral roots,and 1,124 with quadriliteral roots, none withquintiliteral roots.
The program handles allthese correctly.
The other 1,268 words arenouns not derived from verbal roots (solidnouns) or borrowings from foreignlanguages.The algorithm requires less space andmuch less time than the AI-Fedaghi and AI-Anzi algorithm.
The average time to searchfor the roots for all words in an abstract is2.2 seconds and the average time to searchfor roots with the A1-Fedaghi and Al-Anzialgorithm is 17.2 seconds.
The averagelength of an abstract is35 words.5.
The Morphology System.
The mainsystem menu contains the following options.First, get the various paradigms of the word.This is most often needed by human usersand perhaps tutoring programs.
Second, geta specific form aRer passing in a word andmood, person, number, and gender.
This ismost often needed by text generationsystems.
Third, analyze the input word toget back the part of speech, person,number, and gender.
This is most oRenneeded by a parser.
First, get the root ofthe input word.
This is most often neededby information retrieval systems.
The mainmenu of the system is shown in Figure 2.From the main menu the user can select oneof the four options.
In case the user selectsthe first option, he/she will get al theinformation about the input word as seen inFigure 3.
When the user selects the secondoption, the menus in Figures 4, 5, 6, and 7appear in sequence to select he appropriatecodes.
Examples &the output in these casesis shown below.68beginget wordfor all patterns that have the same length as the input worddo beginlet pat = patternlocate the positions of the letters f, 9, 1, and I in patlet posl, pos2, pos3, and pos4 be the positions respectivelyreplace the letters in the given word at the positionsposl, pos2, pos3, and pos4 with the letters f, 9, 1 and 1 respectivelylet new-word be the word formed in the previous tepif (new-word == pat)then exit the loopend;end;let root = word\[pos 1 \]+word\[pos2\]+word\[pos3\]+word\[pos4\]return root and the pattern patFigure 1.
Algorithm to find quadriliteral rootsWELCOME TO THE MORPHOLOGYMAIN MENU\[1\] GetParadigm (display all information)\[2\] GetForm (get specific tense form)\[3\] Analyze (get mood/person/number/gender)\[4\] GetRootSYSTEMFigure 2.
System Main MenuGiven the word ?.~ aider passing the mood = imperfect, number = plural, gender = masculine,and person = 3rd personthe form is ~ ,..ak.When the user selects the third option he/she will get the following output:the input word ~..xk.
(~.~ verb 3rd sing mast)When the user selects option four he/she will get the following output:the input word ~.-~.the root of~.ak, is ~.~69wordrootpatternstemPresent0 b_l_-_..a:-J.:O J ; -ot, ja.,:.
;,/.ca..Pastb-u,The Paradigm in the Third PersonGender Pronoun(mas)(mas) t~(mas)(fem) ,,~(fern)(fern)The Paradigm in the Second PersonImperative Present Past Gender~t~l ~ ~ (mas)t .~  ot-~-_: ~ (mas)bA~l o~a.s r :~  (mas)~.d~l c-.J:s ~ (fern)t~l  ?
t~ b_,-J- (fern)~.t~l ~___.
l.: ~ (fem)Past PresentThe Paradigm in the First PersonGender Pronoun(mas) t;~(mas)Pronoun?..~1Figure 3.
The Complete Analysis of the Word "m(a)91wmat"70\[ 1 \] For Perfect\[2\] For Imperfect\[3\] For ImperativeEnter the mood CodeFigure 4.
Mood Code MenuEnter the Gender CodeIf the mood is imperative nter \[1\]\[1\] For Masculine\[2\] For FeminineFigure 5.
Gender Code MenuEnter the Person CodeIf the mood is imperative nter \[2\]\[1 \] For 1 st Person\[2\] For 2nd Person\[3\] For 3rd PersonFigure 6.
Person Code MenuEnter the Number CodeIf the mood is imperative nter \[1\] or \[3\]\[1\] For Singular\[2\] For Dual\[3\] For PluralFigure 7.
Number Code Menu6.
Conclusion.
Morphological analysis isthe first step of most natural languageprocessing applications.
We have developeda new algorithm that runs an order ofmagnitude faster than other algorithms in theliterature.
We plan to make efforts to extendour system to generate adjectives andgenerate different ypes of derived nouns.The area of vowelization deserves furtherresearch.
It is very important in resolvingambiguity in the meaning of the words andthe correct pronunciation of the words.Vowelizing Arabic text is the process ofplacing the short vowels above and belowArabic consonants.
Our concentration i  thisproject has been on the analysis of non-vowelized text.
The next step is toinvestigate more about this area, in order tobuild a morphological system that cananalyze the vowelized text.ReferencesAbu-Arafah, A.
1995.
A Grammar for theArabic Language Suitable for MachineParsing and Automatic Text Generation.Ph.D.
Dissertation, Computer ScienceDepartment, Illinois Institute ofTechnology, Chicago, IL.Abu-Salem, H. 1992.
A MicrocomputerBased Arabic Bibliographic InformationRetrieval System with Relational Thesauri(Arabic ~) .
h. D i ssertatioa,Computer Science Department, IllinoisInstitute of Technology, Chicago, IL.71Al-Fedaghi, S. S., and A1-Anzi, F. S. 1989.A New Algorithm to Generate ArabicRoot-Pattern Forms, Proceedings of the1 lth National Computer Conference andExhibition, March, Dharan, Saudi Arabia,391-400.AI-Kharashi, I., and Evens, M. 1994.Comparing Words, Stems, and Roots asIndex Terms in an Arabic InformationRetrieval System.
Journal of the AmericanSociety for Information Science.
Vol.45,No.8, September 1994, 548-560.AISamara, K. 1996.
An Arabic Lexicon toSupport Information Retrieval, Parsing andtext Generation.
Ph.D.  Dissertation,Computer Science Department, IllinoisInstitute of Technology, Chicago, IL.Antworth, E., 1992.
Glossing Text with thePC-KIMMO Morphological Parser.Computers and the Humanities.
Vol-26.Nos.
5-6, December 1992, 389-398.EI-Sadany, T. A., and Hashish, M. A.
1989.An Arabic Morphological System.
IBMSystems Journal.
Vol.28, No.4, 600-612.Hammouri, A.
1994.
An Arabic LexiconDatabase to Support Natural LanguageProcessing.
Ph.D. Dissertation, ComputerScience Department, Illinois Institute ofTechnology.Chicago, IL.Hegazi, N., and EISharkawi, A.
A.
1986.Natural Arabic Language Processing,Proceedings of the 9th NationalComputer Conference and Exhibition,Riyadh, Saudi Arabia, 1-17.Hmeidi, I. I.
1995.
Design andImplementation f AutomaticWord and Phrase Indexing for InformationRetrieval with Arabic Documents.
Ph.D.Dissertation, Computer Science Department,Illinois Institute of Technology, Chicago, IL.Nafitha 1988.
User's Guide and AdvancedProgrammers Reference, release 3.0,Manama, Bahrain: 01 system.Owens, J.
1988.
An Introduction toMedieval Arabic Gramatical Theory.
TheFoundations of Grammar.
John Benjamins,Amsterdam.Ritchie, G., Black, A., Russell, G., andPulman, S. 1992.
ComputationalMorphology.
MIT Press, Cambridge, MA.Saliba, B., and Al-Dannan, A.
1989.Automatic Morphological Analysis ofArabic: A Study of Content Word Analysis.Proceedings of the First Kuwait ComputerConference, Kuwait, March, 3-5.Sproat, R. 1992.
Morphology andComputation.
MIT press, Cam- bridge, MA.72
