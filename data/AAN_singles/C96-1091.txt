A Compilat ion-Chart Method forLinear Categorial Deduct ionMark  Hepp lel)epl; ,  o f  Compul ;o r  Sole.He0.Un ivers i t ;y  of  Shef f ie ldRegent ,  Court ; ,  211 l%r l ;obe l lo  St;reel;She l lMd $71 4DP,  UKhepp le@dcs ,  she f .
ac .
ukAbst rac tRecent, work in ca.t;eg(Mj gr;mmt;~r hasseen proposals for a wide.
r;Lltg(~ O\[ sys-.t;(;i\[IS, differing in their 'resomx:e sensi-tivil;y' and hence, implicitly, {;heir under..lying nol;ion of qinguisl;ie SLlllet;ure'.
acommon frmnework for t)arsing such sys-t;elns is elll(;l'ging;, whereby some inel;hodof linear logi(: l;hcorent \])roving is usedin COlnbinal;ion with ;~ sysl,em of l;t-1)elling l;hat; ensures l;hat; only (\[edtl(>Lions a,pl)rot)ri}tt;c Lo l;he r(~le.vanL (:at;ego-rM formalism are allowed.
This l)al)(n'presenl, s a deduction reel;hod for impli-(-a.t, ional line~r logic I;ha|; brings with il,I;he benelil; thai; (:harl; parsing providesfor CI,'G parsing, namely avoiding (;heneed (;o recompu(;e intenne.dial;e resull;swheal ,qcarching exhausi;ively for ;~ll possi-ble mmlyses.
The mel;ho(\[ involves (:ore-piling possibly higher-or(l(;r linear formu-lae 1;o indexed firsl;-or(ler formulae, overwhi(:h (tcdu(:l;ion is ina(le using jusL a, sin-.gle inference rule.1 In t roduct ionThis t)al)er present;s a method appl ical le to pars-ing a. range of cal;egorial gramm~u' formalisms, inpa.rl;ieulm ones Lhal; l';tll wil;hin l;he %yt>e-logieal't;ra.dition, of which Lhe (associa.l;ive) l ,mnbek cal-culus L is l;he most; familiar rcl)re.qenLal;iw; (l ,am-bek, 1988).
l{,e(;enl; work haos se.en proposals tier arange of such sysl;el\[l.q, differing in their resourcesensitivity (and hence, imt)licil;ly , (;heir underly-ing llo|;ion of 'linguisLi(: sl.rllei;llre'), in some easescombining differing resource sensiCivil;ies wi(;hina, single sysl;e\]n. I Some o17 l;hese propos;ds em-l)\]oy a ' labelled de(luei;ion' me.l;hodology (G;d)b;~y,\]994), where|)y 1;he.
I;yi)es in  a pr()of are asso(:ial;(!dwil;h labels under a Sl)e.eiti(;d diseiI)litte , l;he la.belsiS(x;, for cxanLlile , the \['orma.lisnls devcqoped illMoortg~t & Morrill (1991), Moortgat & ()ehrle(1.994), Morrill 11994), Ilct,1)le (1995).re.cording proof' inform;~l;ion a.s a basis for ensming;correcl; int'crelming.Alongside such developmenLs, vmiotts work ha.saddressed I;he ;tssoeial;e(t parsing 1)rol)lem.
2 ()\["l)~Lrt;iculm inl;eresl, here ~tre .qysl;ems t;ha,l; employa 1;heorem proving reel;hod l;hat is (perhaps im-plicitly) appropriat;e for use with linear h)gi(:, andcombine it wiLh ~ labelling system I;hat; restrict,s;uhnil;t;cd deducl;ions 1;o be l,hose of some weakerlogic.
Moorl;gal; (\]!
)92) shows how a linear proofnel, mel;hod may 1)e combined wit;h a r;mge of la.-belling disciplines t;o provide dedu(:\[;ion for a ran,g(!o1 ca,l;egori~l sys|;ems.
Morrill (199,5) shows how 71,t;ypes nmy be t;ra.nsl;tl;ed Lo labelled inq)li(:ationallinem' l;yl>es , wil;h deduct;ion implement;ed via.
aversion of SI,D resolution.
The crucial ol)serva.I;ionis t;hat, linem' logic sl;;m(ls ~bove all of @e l;yl)(>logi(;a,l syst;ems prot)osed a,s (:at;cgorial formalismsin Lhe hierarchy of sul)st;ruel;m'a\] logics, and he~tcelinem' logi(: deduct, ion methods (:m\] i)rovide ;t com-mon basis for parsing all of these systems.The prescnl, work contrilml;es to this pro.\]ect byproviding a met;hod of deduction for the impli-c;~l;ional fragment; of linear logic l;hal;, like charl;parsing for I 'SG, avoids reeonipul;agion of result,,q,i.e.
where any combinat ion o\[' 1;ypes c(mt;ril)ut;es{;o more t;han one overall aImlysis, it, need onlyt>e (:omt>ut;ed once..
In whal; follows, i will first;ini;rodu(:e (tcdue(;ion tot iml)lical;ional inear logic,and discuss it;s ineompal;ibitil;y with a. eharl>like(\[e(tu(:l;ion apt)r();wh, before pre.senl;ing ~t (;omi)i-la.l,ion met;hod {;hat; converl;s form(thin Lo a formfor which a chart>like deduction me{;hod is t)o~qsi -ble.
Finally, 1 will inl;roduce, l;he Morrill (\]995)method for t;ranslat, ing l~mnl)ek t, yi)es t;o lal>elledlincm' types, as a b~tsis for illus\[;ra|;ing how t;he('harl;-compilat, ion reel;hod c&n be used as a gen-era.1 fl'mnework fin' (:al;egorial dedu(:Lion, via l;heuse of such 1;ra.nslal;ions.2Al>l)roa(:hc.b include sequent proof n(n',mtlisacionmethods for I, (K6nig, 1{)89; Flel)ple, \]990; llemlriks,1992), charl; pro'sing mc.l;hods for L (t(6nig, 1990; Hep-.pie, 1992), mid proof tiC;l; methods for a range of sys-t;ems (Roorda, 11991.; Moortgat, 1992).5372 Implicational Linear LogicLinear logic is an example of a "resource-sensitive"logic, requiring that in any deduction, every as-sumption ('resource') is used precisely once.
Weconsider only the implicational fragment of (in-tuitionistic) linear logic.
3 The set of formulaearises by closing a (nonempty) set of atomic types.4 under the linear implication operator o- (i.e.~- ::= A I 5%--Y).
Various alternative formula-tions are possible.
We here use a natural deduc-tion formulation, requiring the following rules (o-elimination and introduction respectively):Ao-B :a B:b \[B :v\]o-E A :aA: (ab) o--IAo--B : )~v.aEliminations and introductions correspond tosteps of functional application and abstraction, re-spectively, as the lambda term labelling reveals.The introduction rule discharges precisely one as-sumption (B) within the proof to which it applies(ensuring linear use of resources, i.e.
that eachresource is used precisely once).
Consider the fol-lowing proof that Xo-Y, Yo-Z =~ Xo-ZXo-Y : x Yo--Z : y \[Z : z\]Y: (yz)x: (x(w))xo-z:Following Prawitz (1965), a normal form forproofs can be defined using just tile fbllowing(meaning preserving) contraction rule (analogousto /4-conversion).
This observation is of note inthat it restricts the form of proofs that we mustconsider in seeking to prove some possible theo-rem.\[B\]AAo-13A: DBB AThe normal form proofs of this system have astraightforward structural characterisation, thattheir main branch (the unique path fi'om an as-sumption to the proof's end-type that includes no3It follows that tile parsing method to be devel-oped applies only to categorial systems having onlyimplicational connectives.
It is standard in categorialcalculi to include also a 'product' operator, enabliugmatter like addition of substructures, e.g.
L has aproduct (commonly notated as) .
,  with the Lambekimplicationals / and \ being its left and right residuals.Although it is appealing from a logical point of viewto include such operators, their use is not motivatedin grammar.minor premise of an elimination inference) con-sists of a sequence of (>_ 0) eliminations followedby a sequence of (> 0) introductions.The differential status of the left and right handside formulae in a sequent may be addressed interms of polarity, with left formulae being deemedto have positive polarity, and the right formulato have negative polarity.
Polarity applies alsoto subformulae, i.e.
in a formula Xo-Y with agiven polarity p, the subformula X has the samepolarity p, and Y has the opposite polarity.
Forexample, a positively occuring higher-oi'der typemight have the following pattern of positive andnegative subformulae: (X  + o- (Y-  o- Z ~ )-  )+Consider the following proof involving this type:Xo- (yo -z )  Yo-W Wo-Z \[Z\]WYYo-ZXObserve that the involvement of 'hypothetical rea-soning' in this proof (i.e.
the use of an additionalassumption that is later discharged) is driven bythe presence of the higher-order formula, and thatthe additional assumption in fact corresponds tothe positive subformula occurrence Z within thathigher-order formula.
In tile following proof thatXo-(yo-(Yo--Z))  ~ Xo-Z, hypothetical reason-ing again arises in relation to positive subformu-lae, i.e.
the subformula Yo-Z of the higher-orderformula (X  + o- (y -  o- (Y+ o- Z- )4 ) - )+ ,as well as tile subtbrmula Z of the (overall neg-ative) goal formula (X- o- Z + )- .Xo- (Yo- (Yo-Z)) \[Yo-Z\] \[Z\]YYo-(Yo-Z)XXo-ZMore specifically, additional assumptions linkto maximal positive subformulae, i.e.
asubformula Y+ in a context; of the form(X- o- Y+) - ,  but not in (Y+ o- Z-) ~.For an even more complex formula, e.g.
(v+ o-(w- o-(x+ o-(Y o- z+ )- )+ )- )+we might find that a proof would involve not onlyan additional assumption corresponding to thepositive subformula Xo-(Yo-Z)) ,  but that reason-ing with that assumption would in turn involve afurther additional assumption corresponding to itspositive subformula Z.5383 A Compi la t ion -Char t  MethodStandard chart parsing for PSG has the adwmtagethat a simple organising principle governs the stor-age of results and underpins earch, namely spanwithin a linear dimension, specified by limiting left,and right points.
A fllrther crucial feature is thatwhat we derive as all item for any span is purely afunction of the results derived for substretches ofthat span, and ultimately of the lexical categoriesthat it dominates (assuming a given grammar).l)eduction in implicational linear logic lacks bothof these features, although, as we shall see shortly,some notion of 'span' can be specified.
The cru-cial problem for developing a chart-like methodis the fact that, in combining any two elementsA,B ~ C, there is an infinite number of possibleresults C we could derive, and that what we infact should derive depends not just on the for-mulae themselves, but upon other formulae thatmight combine with thai; result.
More particu-larly, the reasoning needed to derive C is liable toinvolve hypothetical elements whose involvementis driven by the presence of some higher-order typeelsewhere.F i rs t -Order  L inear  Deduct ionLet us t)egin by avoiding this latter l)roblem byconsidering the fl'agment involving only first-orderfbrmulae, i.e.
those defined by S ::= fl.
t Yo--A,and furthermore allow only atomic goals (i.e.
soA is atomic in any F ~ A).
Consequently, tile\[o-I\] rule is not required, and hypothetical rea-soning excluded.
In combining types using justthe remaining elimination rule, we must still en-sure linear use of resources, i.e.
that no resourcemay be used inore than once in any deduction,and that in any overall deduction, every resourcehas been used.
These requirements carl be en-forced using an indexation method, whereby eachinitial forinula in our dat, at)ase is marked with aunique index (or strictly a single(era set contain-ing that index), and where a formula that resultsti'om a combination is inarked with the union ofthe index sets of the two formulae combined.
4 We.can ensure that no initial assumption contributesmore than once to any deduction by requiring thatwherever two tbrmulae are combined, their indexsets must be disjoint.
Thus, we require the fol-lowing modified \[o-El rule (where ?, '~/~, vrarc'.
indexsets, and t0 denotes union of sets that are requiredto be disjoint):4): Ao-B : a '~/~ :B : b?
- (bao',/~7r: A: (all)In proving I' => A, a snccessflfl ow',rall analysis isrecognised by the prescmee of a database formula4See Llord & Morrill (1995) fbr a related use ofindexing in ensuring linear use of resources.A whose index set is the flfll set of indices as-signed to the initial formulae in P. For' example,to prove Xo-X, Xo-X,  Xo--Y, Y => X, we mightstart with a database containing entries as fbllows(the tmmbering of entries is purely for exposition):I. i :Xo- -X :v2.
j : Xo -X  : w3.
k :Xo-Y :z4.
l :Y :yUse of the modified elimination rule gives addi-tional fornmlae as follows:5.
{k , /} :  X: zy  \[3+4\]6.
{i, k, 1}: X: v(a:y) \[1-t-5\]7.
{j, k, l}: X: w(zy) \[2-1-5\]8.
{i , j ,k ,1}:X:v(w(xy))  \[1+7\]9.
{i, j ,k, l}:X:w(v(a:y)) \[2+6\]There are two successful analyses, numbered 8 and9, which we recognise by the fact that they havethe intended goal type (X), and are indexed withthe full set of the indices assigned to the initialleft hand side fornmlae.
Note that the formulamnnbered 5 contributes to both of tile sucessflfloverall mtalyses, without needing to be recom-tinted.
Hence we can see that we have alreadygained the key benefit of a chart approach for PSGparsing, nanmly avoiding the need to recomputepartial results.
It can be seen that indexing inthe above method plays a role sinfilar to that of'spans' within standard (:hart parsing.An adequate algorithm for use with the aboveapproach is easily stated.
Given a possible the-orem Br, .
.
.
,Bn => A, tire left hand side formu-lae are each assigned unique indices and semanticvariables, and t)ul; on ail agenda.
Then, a loopis followed in which a formula is .taken from theagenda and added to the database, and then thenext formula is taken from the agenda and so onuntil the agenda is empty.
Whenever a formulais added to the datahase, a check is made to seeif it can combine with formulae ah'eady there, inwhich (:as(; new formulae are generated, which areadded to tile agenda.
When the agenda is empty,a check is made for any successful overall analsy-ses, identified as described above.
Note that sincethe result of a combination always bears an indexset larger than either of its parent formulae, andsince the maximal index set that any fornmla c~ncarry includes all and only the indices assignedto the original left hand side formulae, the aboveprocess nmst terminate.Higher -Order  L inear  Deduct ionI,et us turn now to the general case, where higher-order formulae are allowed.
The method to bedescribed involves compiling tile initial formulae(which may be higher-order) to give a new, possi-bly larger, set; of formulae which arc; all tirst order.We observed above how hypothetical reasoning ina proof is driven by the presence within higher-order fornuflae of positively occurring subforinu-539lae.
The compilation inethod involves identify-ing and excising such subformulae (thereby sim-plifying the containing formulae) and includingthem as additional assumptions.
For example,this method will simplify the higher-order formulaXo- (Yo-Z)  to become Xo--Y, generating an addi-tional assumption of Z.
The two key challenges forsuch an approach are firstly ensuring that the ad-ditional assumptions are appropriately used (oth-erwise invalid reasoning will follow), and secondlyensuring that a proof term appropriate to the orig-inal type combination is returned.Consider an attempt o prove the (invalid) typecombination: Xo-Zo- (Yo-Z) ,  Y => X. Compila-tion of the tbrmula Xo-Zo- (yo -Z)  yiehls two for-mulae Xo--Zo-Y and Z, so tile initial query be-comes Xo-Zo-Y ,  Z, Y => X, which is provable.The problem arises due to inappropriate use of theadditional formula Z, which should only be usedto prove the argument Y (just as Z's role wouhlbe to contribute to proving the argument Yo-Zin a standard proof involving the original formulaXo-Zo-(Yo--Z)).
The solution to this problem re-lies upon the indexing method adopted above.The additional assumption generated in compilinga higher-order formula such as Xo--(yo-Z) will it-self be marked with a unique index.
By recordingthis index on tile argument position from whichthe additional assumption was generated, we canenforce the requirement that the assumption con-tributes to the derivation of that argument.
Notethat a single argument position inay give rise toinore dmn one addil;ional assumption, and so infact all index set that should be recorded.
For ex-ample, The (indexed) formula i: Xo - (yo -Zo-W)will compile to give three indexed formulae:i :Xo-(Y:{ j ,k})  j :Z  k :WWe, require a inodified elimination rule that willenforce appropriate usage: 5?
: Ao - (B : r t )  : a '~/~: B : b ~r = eU~/~7r:A: (ab)Note that the compilation process must also gen-crate additional assumptions corresponding to thepositive subformulae of the right hand side of aquery, e.g.
compilal;ion of Xo-Y, Yo-Z ~, Xo-Zsimplifies the right hand side formula to atomicX, giving and additional assumption Z.The second challenge we noted for such an ap-proach is ensuring that a proof term (loosely, theSNore the requirement that (t is a proper subset of,/~, which will have the consequence that other assump-tions must also contrihute to deriving the argunwntB.
This will block a derivation of the linear logicallyvalid Xo- (yo -Y )  => X.
However, this move accordswith general categorial practice, where it is standm'dto require that each deduction rests m, at least one as-sumption.
The alternative regime is easily achieved,by making the condition c~ C ~/).
'serum:tic recipe' of the combination) ai)propriateto the original type, combination is returned.
Letus illustrate how this can be achieved with a sim-ple example.
Consider the following proof:Xo- (Yo-Z)  : z ro -W:y  Wc-Z  :,w \[Z:z\]W:wzY : y(wz)Yo-Z  : Az.y(wz)Deriving the argument Yc -Z  of the higher-orderfornmla involves a final introduction steI), whk:h,semanl;ically, corresponds l;o an abstraction stepthat binds the variable semantics of l;he additionalassuinption Z.
The possibility arises that, compila-tion inight insert tile absl;rael~ion i to the seman-tics of the compiled tbrmula, so that it latex' bindsthe variable of the additional formula.
For exam-ple, coinpilation of Xo-  (Yo-Z) lnight yield Xo-Ywith term Ay.z(Az.y) and Z with variable term z,so that combining the former with some formuladerived from the latter (i.e.
whose tern\] includedz) would cause the free occurrence of z to becomebound, giving a result such as x(iz.f(z)).
In thatcase, we can see that all;hough C, olnpilation haseliminated the need tbr an explicit introductionstep in the proof, the, sl;ep still occurs imtflicitlyill the semantics.Of course, anyone familiar with lambda calcu-lus will immediately spot the flaw in the preced-ing proposal, namely that the substitution processthat is used in ~-conversion is careflllly stated toavoid such 'accidental binding' of w~riables (by re-naIning bound variables, wherever equired).
Wewill instead use a special variant of substitionwhich specifically does not act to avoid accidentalbinding, notated __\[_//~\] (e.g.
t,\[s//'v\] to indicatesubstitution of s R)r v in t).
Not(; that tim assign-ment of term variables in the apt)roach in generalis such that other eases of 'accidental binding' (i.e.beyond those that we want) wilt not occur, in-corporating this idea, we arrive at the fbllowing(final) version of tile elimination rule?
: Ao-- (B:(~) : kv.a '~/J :B : b c,C ~ -- ~'~/~re: A: a\[b//v\]Note that the form of the rule requires the, im-plicational formula 1;hat; it, operates 111)Oll ;o t)e of acertain forin, i.e.
involving an at)strael;ion (Av.a).This requirement is met by all implieationals, (asa side effect of the (:ompilation process.A precise statement of the compilation proce-dure (r) is given in Figure.
1.
This takes a sequentF ~ A:x as input, where every left aml right handside formula is labelled wil;h a Ulfique variable, andreturns a strucl;ure (A, (?
: G : u)), where A is aset, of indexed tirst order formulae, ?
is the flfll540T(X l  : 'd ' l , .
.
.
,  Xn : ~1~,1, 0 X0 : a;0) :.
: (~ ,  ((/) : (~ : ?t))where, i0 , .
.
.
,  i~ \[resh i,t(li(:('.sneg(i0 :X0 :x0)  = ( i0 :G :u)WI 'A : FUpos(il : X1 :x , )U .
, .Upos(i,~ : X,~ : 'a:,,.
)(/, :- indices(A).,,o~(,: x :  t):-- ( i :  x :/,) whe~e X a,;omi(:.post,: : X~ o-y, :/,) (,i: x~( r , , ,  : (/,) : ~,,..~)LJF tJ Awhe,'e neg('i : \]q : '.)
= ( i '}~ : '.
)~Ul ~(v a hesh variabh 0pos( i  : X l  : (t',))) : ( i :  X 2 : ,';)l~Jz~(/~--indices(l').,eg( i :X :v )  =: ( i :  X:v)  whereXa.
tomic .neg( i :X lo -}q  :u )__ ( i :X2 :w)O l 'UAwhere v. :-: Av.
:r (v, :c fresh variables)neg(i : X, : z) = ( i :  X2 : w)Ul ~pos( j  : r, : v ) :=  A ( j  a fr(;sh in, lex).Figure \] : The COml)iladon pro(:edureset; of indices, (\] is an atx)mi(: Goal I;yp(',, and u avariable, l,et A* denote the result; of (:losiug Aunder (,he elimination rule.
The, sequent ix proveniJ)" (() : G : u) (~ A* fi)r some assigmnent of avahle 1;o 'a.
Under t;hat assignment, the originalright hand side va.riable x will return a (:ompleteproof term for the imi)lMt I)roof of the originals(;qll(:IIIL Not, c {;hal l,he t)i'ot)f Lerllhq so t)ro(hlce(lhave a form whi(:h (:orrest)onds, (m(h;r l;he Curry-l loward isomorphism, to itormal form dedu(:l;ions(as defin(xl earlier).A simt)le example.
Compilat ion of the sequent:Xo- (Yo -Z)  :x, Yo--W:y,  Wo-Z :w ~ X :vyields the goal Sl)ecification ({i, j, k, 1} :X :v )  andfl)rmulae 11-4, with t'ormulae 5-7 m'ising under com-binat;ion.
Formula 7 meet;s t;he, goal spe(:ith:ation,so th(; inil;ial sequent ix proven, with l)roof termm()~Z.y(Wz) ) rel;urned.I.
i :Xo~(y:{j}):Au.z(Az., , , )2. j :Z :z3.
k: Yo -W : A'u.y'u4.
1 : Wo-Z  : )vu.'w',,5.
{ j , l} :W:wz  \[2+4\]6.
{ j ,k ,~}:  v::q(~,,~) \[a+~\]7.
{,:, j, k, l}: x :  :,;(A~.,(,,,,~)) \[7l+6\]The indexed firsl;-ord(;r formulae generate(1 bythe comI)ilation procedure can t)e processe, d us-ing t)recisely the same algoril;hm as that des(:ribedabove for handling formulae of the iirsl>order fl'ag~men% with precisely the same benctit, i.e.
avoid-ing re(:ompul:ation of I)artiM results.Some efti(:iency questions tMse.
Imagine a Pro-log implementat ion of the method, with indexedfornmlae being stored as facts ('edges') in the Pro-h)g database.
An imt)orl;ant, overhead will arisewh(;n adding an agenda item to the dal;al)ase fl'omlo(:~dng those, lbrmub~ Mrea(ly there that the cur-reid; t'orilltlla (:all combine with,  i.e.
if we ltlllSI;separat( Jy access every formula Mready stored toewduate if in(l(,xation requiremelltS are satisii(d,a .d  (:oml)iIladon possil)le.
Note firstly dmt,, since(:omt)ih'd formulae are all tirst-order, if we area<tding an alomi(: f(>rmula we nee,(t (>nly h)ok tostored iml)li(:atiomfl formula.e for possible (:oral)i-.nations, and vice versa.
'Fhis is easily a<:hiev(xl.
'l'he prol>h'm (>f (',valuating in<lexation require,-ments can be (~ase(11)y using at bit-vector e,n(:o(lingof in(h',x sets.
The, (:Oml)iladon t)rocess will returna full set 1 of l:he mfi(lUe iudices assigmxl to any\[brnntlae.
If we impose an arbitrary ord(n ()vetdm elements of this sol;, we (:&n then (m(:o(h~ l;heexl;eltsiolt Of al ly il l(lex set; We edl(;Ollill;er ttsillg aii'n-1)la(:e bitove(:tor, where n is the c}udinality of l,i.e.
if some, index set (:ontains the it;h ('\]e,m('m, of(ordered) 1, then the ii;h eh'ment of its bil>v(w,l;()ris 1, otherwis(~ 0.
\[t is uscl'ul to store fiflly sp(',c-ilie(l bit-vectors with al;omi(: formula(;, specifyingl;heir imh'x set.
For iml)li(:adonal fornmla, how-.ever, it is usehfl to store a.
1)it-ve,(:tor (m(:oding its'requireme, nt.s for an appropr iately indexed argumenl;, i.e.
with 0s instantiate(l for tim (;\]em(!nts ofthe impli(:ational's own index sel; (to enfor(:(!
dis-join(hess of index s(;ts), and with \] s a, pl)ea.ring; forthose indi(:e,s that it requires hay(!
l)e(m inv()lvedin de, riving the argument.
Other 1)ositi()ns will 1)etilled with anonymous variM)les.
The bil:-vet:torsfor an imt)li(:ational and an at()mi(', formula willm;~t(:h just in case I:hcy ~r('~ permil;tcd tx) (:oml)inc,a(:(:or(ting to in(lexal;ion requir(;ments.
(Tim oneshortfM1 here is thai; tim the(hod allows the impli-(:al,ioiml (;o spe(:ify t;ha.t (:crtain indices are a sub-sel; of those of l;he argumellt, but not that  tlmy area proper subset l;hereof.)
l ly storing su(:h vet;totswith formulae in the datalm.se, indexation require-ments cam l)e, (:he(:ked by the process of mat(:hing;1;o the d~tabase, so dial; only at)prot)riate, entries;~re brought out for further examination,4 Labe l l ing  and  Lambek Ca lcu lusAs dis(:usscd in the introduction, tim abovemethod is proposed as a generM method for pars-ing (:ategorial systems, via a trant'ormation offormulae \['tom the relevatfl; system to l inem tbr-mulae.
Such translation shouhl induce lal)ellittg(hal imi)orts  the cons(fronts of ttlc~ originM weakerlogic.
\[n that case,, although we employ a generalmethod for iml)lieationM line, ar deduction, the re-suits we derive will I)e all and only those that; re-tie(:(, validity of the weaker system.
I will i l lustratethis idea by considering one of two such transla-tion methods described by Morrill (1995).
Thismethod is based on a. relational algebraic modelfor L (van l{enthem, 1991), which inl;erprets typesas relent, ions on some set V (intuitively, pointal541string positions), i.e.
sets of ordered pairs fromV x V (intuitively, strings identified by delimitingpoints):D(A\B)  = {(vz,v3) \[ V {vl,v2) C D(A),(vl,v3) e D(B)}D(B/A)  = {(vl,v2) I V (v2,v3) C D(A),(Vl, V3) e D(B)}Morrill specifies polar translation functions,which convert Lambek types that are markedfor position ('span') to labelled linear formulae.The translation functions are identity functions onatomic formulae, and for complex formulae are de-fined mutually as follows (where each superscriptp stands for one of the functions, with i0 indicatingthe complementary function to p):i - k : B p o- i - j : A ~ where i is a newvariable/constantj - k : A \B  p as p is +/ -i - k : B p o-- j - k : A p where k is a newvariable/constantaspis +/ -  i - j  :B/AVA sequent B1, ?.
?,/3n =~ A is translated as:O- l :B l+, .
.
.
, (n -1 ) -n :B  + ~ O-n:A-For example, X/(Y/Z),  Y/W, W/Z ::> X trans-lates to give the following linear formulae (wherei , j ,  1 are variables, and k a constant):Database: (0 - i:X)o-((2 - k:Y)o-(i  - k:Z))(1 - j :Y)o-(2 - j:W)(2 - l :W)o-(3 - I:Z)Goal: (0 - 3:X)Such linear formulae can be used with any lineardeduction method, given the (trivial) additionaltask of unifying variables and constants in thestring position labels.
Note that for cases that arenot L valid, but where the translation is linear log-ically valid, deduction will fail due to unificationfailure for string position labels.
A minor com-plication arises for using this approach with thecompilation-chart method described above.
Forexample, the higher-order formula would compileto two indexed formulae:a:(0 - i:X)o-(2 - k:Y):Ay.x(Az.y)b:(i - k:Z):zNote that the string position variable i appears inboth resulting formulae.
For an overall deductionemploying these two formulae to be correct, thebinding of the two instances of i must be consis-tent.
However, we cannot simply employ a globalbinding context since the chart method should beable to return alternative proofs of the same theo-rem, and such alternative proofs will typically in-duce distinct (but internally consistent) bindingsover string position variables.
Variable bindingsmust instead be handled locally, i.e.
each formulain the database will carry with it a context indicat-ing bindings that have been made in its derivation.Where two formula are combined, their contextsare merged (and must be consistent).Referencesvan Benthem, J.
1991.
Languagc in Action: Cat-egories, Lamdas and Dynamic Logic.
Studies inLogic and the Foundations of Mathematics, vol130, North-Holland, Amsterdam.Gabbay, D.M.
1994.
Labelled deductive systems.Part I: Foundations.
Oxford University Press(to appear).
First draft 1.989, current draft, May1994.ttendriks, It.
1992.
'Lambek Semantics: normal-isation, spurious ambiguity, partial deductionand proof nets', Proc.
of Eighth AmsterdamColloquium, ILLI, University of Amsterdam.Hepple, M. 1990.
'Normal form theorem provingfor the Lambek calculus', Proc.
of COLING-90.Hepple, M. 1992. '
Chart Parsing Lambek Gram-mars: Modal Extensions and Incrementality',Proc.
of COL1NG 92.Hepple, M. 1995.
'Mixing Modes of LinguisticDescription in Categorial Grammar', Proceed-ings EA CL - 7, Dublin.KSnig, E. 1989, 'Parsing as natural deduction',Pwc.
of ACL-25.KSnig, E. 1990, 'The complexity of parsingwith extended categorial grammars', Proc.
ofCOLING 90.Lambek, J.
1958.
The mathematics of sentencestructure.
American Mathematical Monthly 65.Llor6, F.X.
& Morrill, G. 1995.
'Difference Listsand Difference Bags for Logic Programmingof Categorial Deduction', Pwc.
of SEPLN XI,Duesto.Moortgat, M. 1992.
'Labelled deductive sys-tems for categorial theorem proving', Proc.
ofEighth Amsterdam Colloquium, ILLI, Univo4"-sity of Amsterdam.Moortgat, M. & Oehrle, R. 1994.
'Adjacency,dependency and order'.
Proc.
of Ninth Ams-terdam Colloquium.Moortgat, M. & Morrill, G. 1991.
'Heads andPhrases: Type Calculus for Dependency andConstituency.'
To appear: Journal of Lan-guage, Logic and Information.Morrill, G. 1994.
~l}jpe Logical Grammar: Cat-egorial Logic of Signs.
Kluwer Academic Pub-lishers, Dordrecht.Morrill, G. 1995.
'Higher-order Linear Logic Pro-gramming of Categorial Dedution', Proc.
ofEA CL- 7, Dublin.Prawitz, D. 1965.
Natural Deduction: a ProofTheoretical Study, Almqvist and Wiksell, Upp-sala.Roorda, D. 1991.
Resource Logics: Proof Theo-retical Investigations.
Ph.D. Dissertation, Am-sterdam.542
