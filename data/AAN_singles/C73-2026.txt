DAVID W. PACKARDCOMPUTER-ASSISTED MORPHOLOGICALANALYSIS OF ANCIENT GREEKINTRODUCTION IThis system for automated morphological nalysis of ancient Greekhad its origin in a practical need rather than a theoretical concern fornatural anguage parsing.
Our immediate goal was to develop a newtextbook and curriculum for teaching ancient Greek to Americanuniversity students.
Most traditional methods assume that a student iswilling to spend at least one year in the study of grammar beforereading any significant quantity of literature.
Our conviction is thatstudents can begin reading literature very early in the first year if theinitial grammatical instruction is focused on those features of the lan-guage which actually occur in the texts first read.
To test this theory,we have used the computer to help produce a complete lexical andgrammatical nalysis of 40,000 words of ancient Greek selected fromtexts which students might wish to read in their first year.
We haveconcentrated our attention initially on morphological analysis sincethe complexity of Greek morphology is the major obstacle to learningthe language.
We have prepared statistical summaries of the morpho-logy of each text, as well as complete concordances organized bothaccording to dictionary lemma and morphological category.
Althoughour first goal is to collect information for a textbook, it is obviousthat an automated system for morphological nalysis will have usesfar beyond the teaching of elementary Greek.THE METHODS OF ANALYSISOur system is based on a combination of computer analysis andsubsequent editorial verification.
The program is able to identify most1 I wish to thank the University of California for sponsoring this work under itsprogram Innovative Projects in University Instruction.344 DAVID W. PACKARDGreek words automatically, but we always examine carefully theresulting analysis and make provision for correcting and supplementingit manually wherever necessary.No prior editing of the text is required; the program will acceptany Greek text which includes the normal diacritical signs (accents,breathing marks, and iotas subscript).
The words are analyzed in theorder in which they appear in the text without being sorted into al-phabetical order.
Each word is first examined to determine whetherit occurs in a list of exceptional forms.
If the word is found in this list,it is not subjected to further analysis.
This list, which we call the in-declinable list, contains forms which are not inflected (prepositions,adverbs, particles, etc.)
as well as forms whose inflection is highlyirregular.
The list currently contains about 800 entries.
Roughly 50%of the words in a typical text are found in this list.Words not in the indeclinable list must be analyzed according tothe rules of Greek morphology.
Since the analytical procedure hasrefinements peculiar to Greek, it cannot be understood without someknowledge of how Greek nouns and verbs are inflected.Most inflection in Greek consists of adding an ending to a fixedstem.
The present active indicative of the verb ~.p~0c0 'write'  is con-jugated: y~&~0-co, yp&~0-?~, -?p&~-~, etc.
The task of analyzing suchforms is simply one of segmenting the word into a stem and an ending.The program first removes the final letter of the word and determineswhether that letter appears in the table as an inflectional ending.
Ifit does, the remainder of the word is tentatively assumed to be a stem,and a search is made for this stem in the dictionary.
If the stem existsand is consistent with the ending, the program identifies this as onepossible analysis.
The program then continues by searching for longerendings.
Each possible combination of stem and ending must be ex-amined since the word may be ambiguous.In some cases the original juncture between stem and ending isobscured by phonological changes.
The verb &y0cz~&co ' love' wasoriginally conjugated with the same endings as yp&q~o~: 0~0c~&-o~,&3'~z~&-e~g, 0~y0c~&-e~, tc., but in the standard literary dialect of Athens(Attic) the adjacent vowels contract, giving the following forms:0~'0~, &?0c~?, &?~n~, etc.
We treat these contracted forms as a sep-arate conjugation with a separate set of endings, even though thisproduces a false division between stem and ending: 0~.0cTt-~, ?~-8~,&~,0cr~-~, etc.
With the proper selection of such pseudo-stems, it ispossible to break down nearly any inflected form into a stem and anCOMPUTER-ASSISTED MORPHOLOGICAL ANALYSIS OF ANCIENT GREECK 345ending.
Especially troublesome are nouns of the third declension wherethe nominative singular and dative plural are subject o a great varietyof sound changes.
The nominative v6~ 'night ', for example, and itsdative plural v~ must be placed in the indeclinable list since theycannot be reconstructed irectly from the stem vu?~:-.
Words like~0~0V.0c 'lesson ', however, are broken into a pseudo-stem ~0~0v~- andthe endings -~,  -/z0c-ro~, -g.~-?~, -~.r0c, -I*0~'r~0v, -g.0c~r~.
This allows us toavoid the need to enter each nominative singular and dative plural intothe exception list, as would have been necessary with the linguisticallycorrect stem ~0~0vl~0~'r-.
Such decisions of expediency do not affect thefinal analysis but only the construction of the tables used by the pro-gram.A Greek verb can have six principal parts; these are the stems whichform the basis for conjugation.
The present stem of'ro0~0co, f r example,is yp~q~-, the future yp0c+-, the aorist ?p~+-, the prefect y~yp0c~o-, theaorist passive yp0~(0)-.
Past tenses of the indicative (aorist, imperfect,pluperfect) augment hese stems by prefixing an initial ~-, or if thestem begins with a vowel, by lengthening that vowel.
The imperfectindicative built on the stem ~,p0~- is ~-y~0~0-ov, ~-yp0~0-~g, -?p0~-e, tc.The aorist indicative built on the stem ~x0- is {x0-ov,-~x0-ev, {x0-~,etc.
In an earlier version of our program we included in the dictionaryboth augmented and unaugmented forms of each stem (~'p0~0- and~?~0~0-, ~0- and {~0-).
This was uneconomical since the augmentedform is nearly always predictable.
The dictionary now contains onlyunaugmented stems except for a few verbs like ~Zo~ and 6p0100 whichare augmented in special ways (e~:Zov and ~&l~00v).
Reduplicated perfectstems, however, are entered in the dictionary.Greek shows great freedom in forming compound verbs by theaddition of prepositional prefixes.
From the stem yp=~0- is derivedr~0~p0~-yt~-eo 'write beside ', ?0~.~-yl~0-~o, 'write down', 6r~o-yt~0~0-~o'write under ', etc.
It would be uneconomical to include z~0~0~yl~0~0-,?.r.yp.~-, and 6r~oyl~.q~- in the dictionary since all are formed bythe addition of common prefixes to the single verb stem yp~-.
A dif-ficulty arises, however, from the fact that the prefixes are often assimi-lated phonetically to the following letter.
The prefix ouv- ' together'appears as auv- before vowels and dental consonants, as av~- beforelabial consonants, as ou'i'- before guttural consonants, as ou?~- before ?~,and as ov(~) before ~.
The prefix ~ex0~- appears as V.~r0~- before consonants,~t~0- before vowels with aspiration and ~?z- before vowels withoutaspiration.
The program must recognize the assimilated forms of each346 DAVID W. PACKARDprefix and must verify that the letter following the prefix could infact have caused the suspected assimilation.
In some cases a single verbis compounded with as many as three prefixes, each of which mayappear in an assimilated form.
The form ~u~,?0t0t~r~t must be analyzedas o~ + ?~x0~ + ~ ,  o~0~t~ as o~ + ~z=~ + 0~ + ~o~t~.Further complication is caused by the fact that verbal augments comebefore the stem but after the prefixes.
The imperfect of o~.-~,-e0is ou~-~-~w-o~.Thus, if the word cannot be analyzed irectly into a stem and anending, the program must attempt o remove prepositional prefixesfrom the beginning of the word.
If a hypothetical prefix can be re--moved, the program proceeds to analyze the remainder of the word.If this analysis is successfu!
the prefix is reunited with the word in thefinal analysis.
In some cases the program makes more than one hy-pothetical division between prefix and stem.
The verb &~-;~6o~ wouldgenerate three hypothetical divisions: &,~0~ + &x6~o, &,~0~ + &x6~0, andfinally ~,~0~ + X6~.If the word still cannot be analyzed, the program attempts to isolatea verbal augment at the beginning of the stem (but after any preposi-tional prefixes).
Most imperfect and aorist indicative verbal forms areanalyzed only at this point.
The program often generates everal hy-pothetical unaugmented stems.
The imperfect indicative of @co is ~o~.In analyzing this form, the program would make two initial falseattempts: augment + $~y-, augment + ~y-, before finding the correctanalysis augment + &y-.
Both prefix and augment may be ambiguous.The form z=xp~-couu would produce eight hypothetical divisions:z=~p~ + Air-,~p~ + augment + ~z-zc~0~ + augment + fix-~p~ + augment + ?~.
'r-~p~ + augment + zkr-~0tp0t + augment + ~kr-zc0t~0t + augment + ~\[-=-.Final short vowels are often elided, especially in poetry.
If theprogram finds an apostrophe at the end of a word, it hypotheticallyrestores each short vowel in turn.
Most elided forms can be recon-structed successfully by this method.
Crasis, the merging of two wordsinto one, is more difficult o recognize automatically.
We simply enterCOMPUTER-ASSISTED MORPHOLOGICAL ANALYSIS OF ANCIENT GREEK 347the most common examples (e.g.
"~&x~0~, ~o~t~, etc.)
in the inde-clinable list and leave the others for the editor.A major problem faced by any automated analysis procedure ishow to deal with ambiguity.
The program often generates more thanone potential analysis for a single form.
It would be possible to printevery alternative, but we have found it more satisfactory to print onlythe most likely analysis together with a warning of possible error.Mistakes can be corrected later by the editor.
There seems to be littleambiguity in Greek about which stem should be assigned to each form.Examples of such ambiguity are more interesting as curiosities thanobstructive to the analysis process.
Most of them occur only becausethe program ignores accents.
The following ' ambiguous' forms werefound in the first 2000 words of Euripides' Medea: ~u~,~ (~0~6?co or' 7  ~uy~.
), ~X~0v (~Xo?
or ~X~co ?
), o~x~0v (o~xo?
or o~?~0 ?
),~xvcov (~?-vov or z~xvdco ?
), 0~pZ ~ (~pxco r 0~pX ~?
), ~tox0ou (~6X0og or ~ox0&o ?
),~yc0v (~yd~v or @o~?
), ~{~0v (~gd~,J or 0~Ie?
), q~ol3ou (e6~o~ or ~o~o?
),z~ovt0v (z:6vo?
or ~ov&o?
), .m~0~v,t0v (~6~0~vvo?
or ~u0~vv&o?
), ~o~v (~o4~or ~o&o ?
), -r~X~t~ (-~?,~u~ or -r~Xcuc&o ?
), 6p?tov (6p?og or 6p?&o ?
).In nearly every case of ambiguity between a verbal and a nominalanalysis, we have found that the nominal form is correct.
The programaccordingly always prefers the latter.Much more common are ambiguities about whether an article oradjective is masculine or neuter, whether a neuter noun is nominativeor accusative, or whether a verb is middle or passive.
Here again, weallow the program to make a likely guess and mark the analysis asdoubtful.
The editor can correct any mistakes.A certain amount of this second kind of ambiguity could undoubtedlybe resolved rather easily by a primitive syntactical scan which limiteditself to immediate constituents of the type article + adjective + nounor preposition 4- noun.
The gender of the noun in the first case wouldoften make clear the gender of the adjective and article.DETAILS OF IMPLEMENTATIONIn line with our pragmatic approach and our immediate need tohave a large volume of text analyzed, we have designed our procedures348 DAVID W. PACKARDto take advantage of the hardware available at the UCLA Campus Com-puting Network; but the program could be modified to operate onother systems without great difficulty.Our first problem was the representation f the Greek alphabetwith accents and diacritical signs on a keypunch.
Here are the firstfew lines of the Apology as we keypunched them:O(/TI MEIN U(MEI=S,  W)= A)/NDP,.ES *)AQHNAI=OI ,PEPO/NQATE U(PO I TW= N E)MW= N KATHGO/RWN,OU)K O I )= DA: E)GW I D' OU)= m KAI I AU)TOIS U(P'AU)TW = N O)LI/GOU E)MAUTOU = E)PELAQO/MHN,OU(/TW P IQANW= S E)/LEGON.This transliteration suffices for most purposes; we have a Greek fonton an RCA Videocomp hotocomposer available whenever we wish toprint the Greek in a more conventional manner.The program is written in Assembly language for an IBM 360/91computer.
In the current implementation all tables reside in core storage.With 300K bytes of memory, we can accomodate 4000 stems, 2000endings, and 1000 indeclinables.
This is the maximum memory al-lowed for high priority jobs at our computing center, but our machinewill accept jobs requiring several million bytes on a low priority basis.Using more sophisticated data compression techniques, we could expandthe table size to around 10,000 stems without exceeding 300K of sto-rage.
So far we have been able to work easily within the limitation of4000 stems.The dictionary lookup uses a simple binary search algorithm.
Thetables are sorted by the program at the beginning of the analysis.
Thisallows extra items to be inserted temporarily for each text withoutmaking them permanent members of the dictionary stored on the disk.The morphological endings, however, are stored in a permanent treestructure.
This not only conserves torage but also allows much fastersearching.
The tree, which currently contains about 2000 endings, isgenerated by a separate program.
The analysis program reads it fromthe disk along with the lists of stems and indeclinables.Ad hoc programming techniques are used for isolating the prefixesand augments.
Greek shows many idiosyncrasies in this area, and itwould be difficult o design an efficient able-driven algorithm for thispurpose.If this system is to be expanded to include dictionaries for a widerCOMPUTER-ASSISTED MORPHOLOGICAL ANALYSIS OF ANCIENT GREEK 349range of texts, it will eventually be necessary to exceed the currentlimitation on dictionary size.
At our computing center the existingprogram could accomodate at least 25,000 stems, which is undoubtedlyadequate for any text.
If the system were to be used on a machinewith limited memory, however, it would be desirable to keep the entirelist of endings in memory at all times and to process the text severaltimes with different subsets of the dictionary.THE FIRST FORTY-THOUSAND WORDS ANALYZEDRather than encoding a standard list of Greek verbal and nominalstems, we have decided to add entries to our dictionary only as theyare needed.
This approach seems satisfactory, and our tables now suf-fice for a wide range of Greek prose of the classical period.
So far wehave analyzed Plato's Apology, Crito, and Lysis, Xenophon's Consti-tution of the Spartans, Euripides' Medea, and selections from Thucydidesand the New Testament.
In the course of analyzing these texts, we havebeen constantly improving the dictionary and the program.
We expectthat far less time will be required in correcting the computer analysisin the future.Our tables were developed entirely from the texts cited above.
It isencouraging that these tables appear to include a very high proportionof the forms needed for analyzing a variety of additional texts, fromthe Hippocratic corpus to the fables of Aesop.
A problem perhapsunique to Greek is the existence of several literary dialects with varyingmorphology.
Within a single Attic drama, the dialogue is in Atticwhile the choral odes are in a form of Doric.
Moreover, Herodotusand the Hippocratic authors write in Ionic, and Homer requires yetanother set of endings and dictionaries.
We are currently workingon tables for use in analyzing Homer.The program is able to analyze about 2000 words per second.
Thecomputer charges for analyzing the entire Apology are under one dollar.We have found that we require about one hour of manual editingto check 500 words of analyzed text, or about four hours of humantime to check the work done by the machine in less than one second.The cost of this editing is about fifteen times greater than the costof the initial computer analysis.
For this reason we have taken painsto design a convenient system for introducing coirections into theanalyzed text.350 DAVID W. PACKARDOur program has many points in common with the system usedby Professor Delatte in Lihge for automated analysis of Latin.
So faras I know, the Liege program does not include mechanisms for identi-fying augments and assimilated prefixes, but these features couldundoubtedly be added.
Despite the conceptual similarities, there aresignificant differences between the two systems in terms of imple-mentation.
Our program, since it maintains all of its tables in corestorage, requires nearly twenty times more memory than theirs andcould not possibly be used on a small computer like their IBM 360/20.The Liege system, on the other hand, could be used on a large machinelike ours, but it would generate a tremendous amount of superfluousinput-output activity by searching the dictionaries on the disk.
Eachprogram takes advantage of the characteristics of the machine forwhich it was designed.
Given a large machine, our approach isprobablymore economical, but the computer charges are a small part of thetotal expense involved in producing an accurate analysis.~An entirely different approach is taken by Busa who generates allpossible inflected forms of each stem and then collates his sorted textwith this list.
I can see no advantage in using this method on machineswith large core capacity.
Busa's approach, on the other hand, mightbe appropriate for machines with extensive magnetic tape capacitybut limited core storage and no disks.INITIAL RESULTSAs an example of our statistics, we can compare the morphologyof Plato's Apology with the grammatical topics introduced in the firstthirty lessons of a widely used elementary Greek textbook.
The firstlesson (Lesson 3) equips the student o recognize the endings of morethan 1500 of the 8000 words in the text (the definite article, &y0~06?,X6"fog, yv6tz~, and ~po,~).
The next lesson introduces adjectives like8~og with 250 examples, the relative pronoun with about 100, andvarious first declension ouns which account for an additional 150forms.
The first chapter on verbs brings 200 verbal forms within thestudent's grasp, and Chapter 8 increases this by 150 imperfect andThe Li6ge program is described in great detail by JosEPH D~NOOZ in the Revue(1973, No.
1) of the Organisation I temationale pour l'Etude des Langues Anciennes parOrdinateur.COMPUTER-ASSISTED MORPHOLOGICAL ANALYSIS OF ANCIENT GREEK 351aorist indicatives.
In the first twelve lessons, little is superfluous, thoughone might question the presentation f ~o~dr~pog and &~?cvc0v in Les-son 9.
Lessons 12 and 13, however, enable the student o recognizeexactly five new words in the Apology.
These chapters piesent he-~t verbs.
These uncommon, confusing, irregular verbs are introducedfar earlier than the middle voice and the participle, each of which oc-curs many times more often.
Lesson 15 consists of xt~&co and ~0&~00,which covers 150 forms.
Lesson 16, however, adds only 9 forms, apartfrom the very common personal pronouns (about 500 examples).The active participle is postponed until Lesson 19, despite its greatfrequency (230 occurrences), and the extremely common middle voiceis presented only in Lessons 25 through 29.
A textbook designed toequip students with the morphology needed for reading Plato earlywould be organized far differently.On the basis of these statistics, we have written (and are now using)a new textbook which introduces the middle voice (Lesson 4) and theparticiple (Lesson 6) very early but postpones -V-~ verbs and other lesscommon forms.APPENDIXThe purpose of this Appendix (written in 1977) is to describe brieflyour progress since 1973.
Many additional texts have been analyzed andcorrected, including four books of Thucydides, the Hellenica of Xenophon,and the Phaedrus, Gorgias and Laws of Plato.
The program has successfullybeen installed at half a dozen universities.
The editing of the analysis is nowpeformed on consoles equipped with the full Greek alphabet includingaccents (on an Ibycus System).There has also been a major revision in the internal organization of thedictionary used by the program.
The new dictionary is created by a com-puter program from a dictionary in the old format.
Those who use the ana-lysis program do not need to be aware of the internal structure of the dic-tionary, but it may be of interest to specialists.Each entry in the stem dictionary consists of four elements: the stem,the type-code, the flag, and the lemma.
In.the initial version of the programthese fields were stored in a fixed format:Stem Type Flag Lemma~vOp~oz~ N2 M ~v0pco~o?~?X'a~'~ A2 S ~yo~06?~o~X V1 M ~o6Xotz0tt~ouX N1 F ~o~X~z~oXt N3I F ~6X~yp~?
Vl ypo~coyp~ VF yp~,?~ypot~ VA yp~?coysyp~?
VX yp~?~ysypc~ VP yp~,?~Yfl~9 VCThis format is convenient for external use, but it is a very inefticient wayto store the dictionary inside the computer.
We must allow fourteen cha-racters for a long word like rcokuz~p0~W.oouvv b but we need only five fora short word like yp0~?co.
The same objection holds for the type field whichuses three characters to distinguish fewer than one hundred ifferent codes,and the flag, which has only four possible values.
In the case of the lemmafield, not only does the fixed length format waste space for short lemmas,COMPUTER-ASSISTED MORPHOLOGICAL ANALYSIS OF ANCIENT GREEK 353but the same lemma is often repeated with more than one stem.
Manylemmas, moreover, can be reconstructed from the stem simply by addingan ending and an accent.Tin3 STEMSIn order to conserve space, the stems are divided into fifteen sub-diction-aries according to their length.
All stems of length one are stored in alpha-betical order in the first subset of the dictionary, followed by stems oflength two, and so forth.
This solves the problem of wasted space, but itrequires a table showing the location of each sub-dictionary.
In order tofind a given stem in the dictionary, we use the Stem Length Table to findthe location of the dictionary for stems of that length.
Within the propersublist the stem is found by a binary search.THE TYPE CODEAssociated with every stem is a one-byte field specifying the type.
In-ternally the types are coded as follows:lxxx xxxx Verbs 128 types01xx xxxx Nouns 64 types001x xxxx Adjectives 32 types0001 xxxx Pronouns 16 types0000 xxxx Others 16 typesThe verb stems are further subdivided into the following classes:10 000 xxx11 000 xxx10 001 xxx11 001 xxx10 010 xxx11 010 xxx10 011 xxx11 011 xxx10 100 xxx11 100 xxx10 101 xxx11 101 xxx10 110 xxxpresent stemsaugmented present stemspresent stemsaugmented present stemsaorist stemsaugmented aorist stemsaorist passive stemsaugmented aorist passive stemsperfect active stemsaugmented perfect active stemsperfect middle stemsaugmented perfect middle stemsfuture stemsThe last three bits (printed above as xxx) provide eight types within eachclass.
Two present classes accommodate sixteen types.
The second bit from23354 DAVID W. PACKARDthe left always indicates whether the stem is augmented.
Since a future stemcannot be augmented, the type code 1111xxxx is illegal and reserved forspecial use internally by the program (for duplicate stems).TrlE FLATSEach stem has a flag with four possible values.
The meaning of the flagdepends on the type of the stem.
For nouns the flag gives the gender.
Forverbs the flag indicates whether the stem is deponent.
For adjectives theflag identifies tems that are by nature comparative or superlative.
Internallythe flag is coded as a two-bit binary number and is stored in the leftmostportion of the lemma fidd.THE LEMMASLemmas are divided into two basic classes, those that are self-definingand those that are not.
A self-defining lemma can be reconstructed byadding one of the following endings to the stem:coy co o~o4 ~ ?coThe suffix is coded as a four-bit binary number.
Another four-bit numberspecifies which accent o use and where to place it.
These two four-bit fieldsare packed into a single byte.
A self-defining lemma is recognized by thefact that the first byte contains ff111111 (where ff are the two flag bits).The second byte contains the suffix and accent codes.
Lemmas which arenot self-defining are stored in the Lemma String.
Each lemma appears onlyonce in this string.
The lemma field in the stem list is an index into theLemma Table, which gives the length of the lemma and its origin within theLemma String.DUPLICATE STEMSIt often happens that two or more stems are spelled alike.
In such casesonly one copy of the stem is placed in the dictionary itself.
This stem,instead of having its type code and lemma code, has a pointer to theDuplicate Stem List.
Duplicate stems are recognized by a type code of theform l l l lnnnn, where the four-bit binary number nnnn serves as a counterCOMPUTER-ASSISTED MORPHOLOGICAL ANALYSIS OF ANCIENT GREEK 355showing how many entries for this stem exist in the duplicate stem list.The lemma field is an index into this list.
Each entry in the duplicate stemlist is a three-byte field consisting of a standard type code and lemma field.SAVINGS IN SPACEIn the original fixed format the six stems of the verb yf~&q0co required atotal of 240 bytes in the dictionary (six entries of 40 bytes each).
With thenew format the space required is as follows:The stem ypo~qoThe stem yp~qaThe stem ysyo~q~The stem ysyO0~Duplicate list for 3,p0~0Duplicate list for y9~d~Lemma string for 7p&~0toLemma Table for 7p&~0t07 bytes7 bytes9 bytes8 bytes6 bytes6 bytes6 bytes4 bytesThe total space required is now 53 bytes, or about 20% of the previousvalue.
For many nouns and adjectives the saving is even greater.
Thenoun 0s6g now requires only five bytes (the lemma is self-defining).
In alarge dictionary the average entry requires about eleven bytes.
