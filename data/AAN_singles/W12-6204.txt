Proceedings of the 10th International Workshop on Finite State Methods and Natural Language Processing, pages 25?29,Donostia?San Sebastia?n, July 23?25, 2012. c?2012 Association for Computational LinguisticsUrdu ?
Roman Transliteration via Finite State TransducersTina Bo?gelUniversity of KonstanzKonstanz, GermanyTina.Boegel@uni-konstanz.deAbstractThis paper introduces a two-way Urdu?Roman transliterator based solely on a non-probabilistic finite state transducer that solvesthe encountered scriptural issues via a partic-ular architectural design in combination witha set of restrictions.
In order to deal with theenormous amount of overgenerations causedby inherent properties of the Urdu script, thetransliterator depends on a set of phonologi-cal and orthographic restrictions and a wordlist; additionally, a default component is im-plemented to allow for unknown entities to betransliterated, thus ensuring a large degree offlexibility in addition to robustness.1 IntroductionThis paper introduces a way of transliterating Urduand Roman via a non-probabilistic finite state trans-ducer (TURF), thus allowing for easier machineprocessing.1 The TURF transliterator was originallydesigned for a grammar of Hindi/Urdu (Bo?gel et al,2009), based on the grammar development platformXLE (Crouch et al, 2011).
This grammar is writ-ten in Roman script to serve as a bridge/pivot lan-guage between the different scripts used by Urduand Hindi.
It is in principle able to parse input fromboth Hindi and Urdu and can generate output forboth of these language varieties.
In order to achievethis goal, transliterators converting the scripts ofUrdu and Hindi, respectively, into the common Ro-man representation are of great importance.1I would like to thank Tafseer Ahmed and Miriam Buttfor their help with the content of this paper.
This researchwas part of the Urdu ParGram project funded by the DeutscheForschungsgemeinschaft.The TURF system presented in this paper is con-cerned with the Urdu?Roman transliteration.
Itdeals with the Urdu-specific orthographic issues byintegrating certain restrictional components into thefinite state transducer to cut down on overgener-ation, while at the same time employing an ar-chitectural design that allows for a large degreeof flexibility.
The transliterator is based solelyon a non-probabilistic finite state transducer im-plemented with the Xerox finite state technology(XFST) (Beesley and Karttunen, 2003), a robust andeasy-to-use finite state tool.This paper is organized as follows: In section 2,one of the (many) orthographic issues of Urdu is in-troduced.
Section 3 contains a short review of ear-lier approaches.
Section 4 gives a brief introductioninto the transducer and the set of restrictions used tocut down on overgeneration.
Following this is anaccount of the architectural design of the translit-eration process (section 5).
The last two sectionsprovide a first evaluation of the TURF system and afinal conclusion.2 Urdu script issuesUrdu is an Indo-Aryan language spoken mainly inPakistan and India.
It is written in a version of thePersian alphabet and includes a substantial amountof Persian and Arabic vocabulary.
The direction ofthe script is from right to left and the shapes of mostcharacters are context sensitive; i.e., depending onthe position within the word, a character assumes acertain form.Urdu has a set of diacritical marks which ap-pear above or below a character defining a partic-ular vowel, its absence or compound forms.
In total,there are 15 of these diacritics (Malik, 2006, 13);25the four most frequent ones are shown in Table 1 incombination with the letter H. ?b?.H.
+ diacritic Name Roman transliterationH. Zabar baH.
Zer biH. Pesh buH.
Tashdid bbTable 1: The four most frequently used diacriticsWhen transliterating from the Urdu script to anotherscript, these diacritics present a huge problem be-cause in standard Urdu texts, the diacritics are rarelyused.
Thus, for example, we generally are only con-fronted with the letter H. ?b?
and have to guess atthe pronunciation that was intended.
Take, e.g., thefollowing example, where the word AJ?
kuttA ?dog?is to be transliterated.
Without diacritics, the wordconsists of three letters: k, t and A.
If in the case oftransliteration, the system takes a guess at possibleshort vowels and geminated consonants, the outputcontains multiple possibilities ((1)).
(1)In addition to the correct transliteration kuttA, thetransliterator proposes five other possibilities for themissing diacritics.
These examples show that thisproperty of the Urdu script makes it extremely dif-ficult for any transliterator to correctly transliterateundiacriticized input without the help of word lists.3 Earlier approachesEarlier approaches to Urdu transliteration almostalways have been concerned with the process oftransliterating Urdu to Hindi or Hindi to Urdu (see,e.g., Lehal and Saini (2010) (Hindi ?
Urdu), Ma-lik et al (2009) (Urdu ?
Hindi), Malik et al(2010) (Urdu?
Roman) or Ahmed (2009) (Roman?
Urdu).
An exception is Malik (2006), who ex-plored the general idea of using finite state transduc-ers and an intermediate/pivot language to deal withthe issues of the scripts of Urdu and Hindi.All of these approaches are highly dependent onword lists due to the properties of the Urdu script andthe problems arising with the use of diacritics.
Mostsystems dealing with undiacriticized input are facedwith low accuracy rates: The original system of Ma-lik (2006), e.g., drops from approximately 80% to50% accuracy (cf.
Malik et al (2009, 178)) ?
othershave higher accuracy rates at the cost of being uni-directional.While Malik et al (2009) have claimed that thenon-probabilistic finite state model is not able tohandle the orthographic issues of Urdu in a satisfy-ing way, this paper shows that there are possibilitiesfor allowing a high accuracy of interpretation, evenif the input text does not include diacritics.4 The TURF TransliteratorThe TURF transliterator has been implemented asa non-probabilistic finite state transducer compiledwith the lexc language (Lexicon Compiler), which isexplicitly designed to build finite state networks andanalyzers (Beesley and Karttunen, 2003, 203).
Theresulting network is completely compatible with onethat was written with, e.g., regular expressions, buthas the advantage in that it is easily readable.
Thetransliteration scheme used here was developed byMalik et al (2010), following Glassman (1986).As has been shown in section 1, Urdu transliter-ation with simple character-to-character mapping isnot sufficient.
A default integration of short vowelsand geminated consonants will, on the other hand,cause significant overgeneration.
In order to reducethis overgeneration and to keep the transliterator asefficient as possible, the current approach integratesseveral layers of restrictions.4.1 The word listWhen dealing with Urdu transliteration it is not pos-sible to not work with a word list in order to ex-clude a large proportion of the overgenerated out-put.
In contrast to other approaches, which dependon Hindi or Urdu wordlists, TURF works with a Ro-man wordlist.
This wordlist is derived from an XFSTfinite state morphology (Bo?gel et al, 2007) indepen-dently created as part of the Urdu ParGram devel-opment effort for the Roman intermediate language(Bo?gel et al, 2009).264.2 Regular expression filtersThe regular expression filters are based on knowl-edge about the phonotactics of the language and area powerful tool for reducing the number of possi-bilities proposed by the transliterator.
As a concreteexample, consider the filter in (2).
(2) [ ?
[ y A [a |i |u] ]]In Urdu a combination of [ y A short vowel ] is notallowed (?).
A filter like in (2) can thus be used todisallow any generations that match this sequence.4.3 Flag diacriticsThe XFST software also provides the user with amethod to store ?memory?
within a finite state net-work (cf.
Beesley and Karttunen (2003, 339)).These so-called flag diacritics enable the user to en-force desired constraints within a network, keepingthe transducers relatively small and simple by re-moving illegal paths and thus reducing the numberof possible analyses.5 The overall TURF architectureHowever, the finite state transducer should also beable to deal with unknown items; thus, the con-straints on transliteration should not be too restric-tive, but should allow for a default transliteration aswell.
Word lists in general have the drawback that amatching of a finite state transducer output against aword list will delete any entities not on the word list.This means that a methodology needs to be foundto deal with unknown but legitimate words with-out involving any further (non-finite state) software.Figure 1 shows the general architecture to achievethis goal.
For illustrative purposes two words aretransliterated: H. A J?
kitAb ?book?
and I?, whichtransliterates to an unknown word kt, potentiallyhaving the surface forms kut, kat or kit.5.1 Step 1: Transliteration Part 1The finite state transducer itself consists of a net-work containing the Roman?Urdu character map-ping with the possible paths regulated via flag dia-critics.
Apart from these regular mappings, the net-work also contains a default Urdu and a default Ro-man component where the respective characters aresimply matched against themselves (e.g.
k:k, r:r).On top of this network, the regular expression filtersprovide further restrictions for the output form.Figure 1: Transliteration of I?
and H. AJ?The Urdu script default 1-1 mappings are markedwith a special identification tag ([+Uscript]) forlater processing purposes.
Thus, an Urdu scriptword will not only be transliterated into the corre-sponding Roman script, but will also be ?transliter-ated?
into itself plus an identificational tag.The output of the basic transliterator shows partof the vast overgeneration caused by the underspec-ified nature of the script, even though the restrictingfilters and flags are compiled into this component.5.2 Step 2: Word list matching and tag deletionIn step 2, the output is matched against a Romanword list.
In case there is a match, the respectiveword is tagged [+match].
After this process, a27filter is applied, erasing all output forms that containneither a [+match] nor a [Uscript+] tag.
Thisway we are left with two choices for the word H.
AJ??
one transliterated ?matched?
form and one defaultUrdu form ?
while the word I?
is left with only thedefault Urdu form.5.3 Step 3: Distinguishing unknown andovergenerated entitiesThe Urdu word list applied in step 3 is a translitera-tion of the original Roman word list (4.1), which wastransliterated via the TURF system.
Thus, the Urduword list is a mirror image of the Roman word list.During this step, the Urdu script words are matchedagainst the Urdu word list, this time deleting all thewords that find a match.
As was to be expected frommatching against a mirror word list of the originalRoman word list, all of the words that found a matchin the Roman word list will also find a match in theUrdu word list, while all unknown entities fail tomatch.
As a result, any Urdu script version of an al-ready correctly transliterated word is deleted, whilethe Urdu script unknown entity is kept for furtherprocessing ?
the system has now effectively sepa-rated known from unknown entities.In a further step, the tags of the remaining entitiesare deleted, which leaves us with the correct translit-eration of the known word kitAb and the unknownUrdu script word I?.5.4 Step 4: Transliteration Part 2The remaining words are once again sent into thefinite state transducer of step 1.
The Roman translit-eration kitAb passes unhindered through the DefaultRoman part.
The Urdu word on the other hand istransliterated to all possible forms (in this case three)within the range of the restrictions applied by flagsand filters.5.5 Step 5: Final adjustmentsUp to now, the transliterator is only applicable tosingle words.
With a simple (recursive) regular ex-pression it can be designed to apply to larger stringscontaining more than one word.The ouput can then be easily composed with astandard tokenizer (e.g.
Kaplan (2005)) to enablesmooth machine processing.6 EvaluationA first evaluation of the TURF transliterator withunseen texts resulted in an accuracy of 86%, if theinput was not diacriticized.
The accuracy rate forundiacriticized text always depends on the size ofthe word list.
The word list used in this applicationis currently being extended from formerly 20.000 to40.000 words; thus, a significant improvement of theaccuracy rate can be expected within the next fewmonths.If the optional inclusion of short vowels is re-moved from the network, the accuracy rate for di-acriticized input is close to 97%.When transliterating from Roman to Urdu, the ac-curacy rate is close to a 100%, iff the Roman script iswritten according to the transliteration scheme pro-posed by Malik et al (2010).Transliteration U?
R U?
R R?
UInput diacritics no diacriticsDiacritics opt.
/ compuls.
optionalAccuracy 86% / 97% 86% ?
100%Table 2: Accuracy rates of the TURF transliterator7 ConclusionThis paper has introduced a finite state transducerfor Urdu ?
Roman transliteration.
Furthermore,this paper has shown that it is possible for appli-cations based only on non-probabilistic finite statetechnology to return output with a high state-of-the-art accuracy rate; as a consequence, the applicationprofits from the inherently fast and small nature offinite state transducers.While the transliteration from Roman to Urdu isbasically a simple character to character mapping,the transliteration from Urdu to Roman causes asubstantial amount of overgeneration due to theunderspecified nature of the Urdu script.
This wassolved by applying different layers of restrictions.The specific architectural design enables TURF todistinguish between unknown-to-the-word-list andovergenerated items; thus, when matched againsta word list, unknown items are not deleted alongwith the overgenerated items, but are transliteratedalong with the known items.
As a consequence,a transliteration is always given, resulting in anefficient, highly accurate and robust system.28ReferencesTafseer Ahmed.
2009.
Roman to Urdu transliterationusing wordlist.
In Proceedings of the Conference onLanguage and Technology 2009 (CLT09), CRULP, La-hore.Kenneth R. Beesley and Lauri Karttunen.
2003.
FiniteState Morphology.
CSLI Publications, Stanford, CA.Tina Bo?gel, Miriam Butt, Annette Hautli, and SebastianSulger.
2007.
Developing a finite-state morpholog-ical analyzer for Urdu and Hindi.
In T. Hanneforthund K. M. Wu?rzner, editor, Proceedings of the SixthInternational Workshop on Finite-State Methods andNatural Language Processing, pages 86?96, Potsdam.Potsdam University Press.Tina Bo?gel, Miriam Butt, Annette Hautli, and Sebas-tian Sulger.
2009.
Urdu and the modular architec-ture of ParGram.
In Proceedings of the Conferenceon Language and Technology 2009 (CLT09), CRULP,Lahore.Dick Crouch, Mary Dalrymple, Ron Kaplan,Tracy King, John Maxwell, and Paula New-man.
2011.
XLE Documentation.
PaloAlto Research Center, Palo Alto, CA.
URL:http://www2.parc.com/isl/groups/nltt/xle/doc/xle toc.html.Eugene H. Glassman.
1986.
Spoken Urdu.
NiraliKitaben Publishing House, Lahore, 6 edition.Ronald M. Kaplan.
2005.
A method for tokenizing text.In Festschrift in Honor of Kimmo Koskenniemi?s 60thanniversary.
CSLI Publications, Stanford, CA.Gurpreet S. Lehal and Tejinder S. Saini.
2010.
AHindi to Urdu transliteration system.
In Proceedingsof ICON-2010: 8th International Conference on Nat-ural Language Processing, Kharagpur.Abbas Malik, Laurent Besacier, Christian Boitet, andPushpak Bhattacharyya.
2009.
A hybrid model forUrdu Hindi transliteration.
In Proceedings of the 2009Named Entities Workshop, ACL-IJCNLP, pages 177?185, Suntec, Singapore.Muhammad Kamran Malik, Tafseer Ahmed, SebastianSulger, Tina Bo?gel, Atif Gulzar, Ghulam Raza, Sar-mad Hussain, and Miriam Butt.
2010.
Transliter-ating Urdu for a Broad-Coverage Urdu/Hindi LFGGrammar.
In Proceedings of the Seventh Conferenceon International Language Resources and Evaluation(LREC 2010).
European Language Resources Associ-ation (ELRA).Abbas Malik.
2006.
Hindi Urdu machine transliterationsystem.
Master?s thesis, University of Paris.29
