SOME COMPUTATIONAL PROPERTISSOF  TREE ADJO IN ING GRAMM.~.S*K.  V i jay -Shank~"  and  Arav ind  K .
Jouh iDepar tment  o f  Computer  and  In fo rmat ion  ~e ienceRoom 288 Moore  Schoo l /D2Un ivers i ty  o f  Pennsy lvan iaPh i lade lph ia~ PA  191CtABSTRACTTree Adjoining Grammar (TAG) is u formalism for naturallanguage grammars.
Some of the basic notions of TAG's wereintroduced in \[Jo~hi,Levy, mad Takakashi I~'Sl and by \[Jo~hi, l~ l .A detailed investigation of the linguistic relevance of TAG's has beencarried out in IKroch and Joshi,1985~.
In this paper, we will describesome new results for TAG's, espe?ially in the following areas: (I)parsing complexity of TAG's, (2) some closure results for TAG's, and(3) the relationship to Head grammars.1.
INTRODUCTIONlnvestigatiou of constrained grammatical sys tem from thepoint of view of their linguistic &leqnary and their computationaltractability has been a mnjor concern of computational linguists forthe last several years.
Generalized Phrase Structure grammars(GPSG), Lexical Functional grunmmm (LFG), Phrm~ Linkinggrammars (PLG), and Tree Adjoining grammars (TAG) are somekey examples of grammatical systems that have been and stillcontinue to be investignted along theme lines.Some of the bask notions of TAG's were introduced in \[Joahi,Levy, and Takahashi,1975\] and \[Jo~hi,198,3 I.
Some pretiminav/investigations of the linguistic relevance and some computationalproperties were also carried out in \[Jo~hi, l~S3 I.
More recently, adetailed iuvestigution of the linguistic relevance of TAG's werecarried out by \[Kro~h and Joshi, 19851.In this paper, we will des?ribe some new results for TAG's,especially in the following areas: (I) parsing complexity of TAG's, (2)some closure results for TAG's, and (3) the relationship to Headgrammar*.
These topics will be covered in Sections 3, 4, and $respectively.
In section 2, we will give an introduction to TAG's.
Insection 6, we will state some properties not discussed here.
A detailedexposition of these results is given in \ [V i jay-Sbuh~ and Joahi,1985\[.
*This work wu ptrt is J~ su.~ported by NSP Gr~u~* Mk'TS-4~IOII6.~'~R,MCS42-07.~94.
We wtat to thank Clr |  Pol!ard.
Kelly Rozeh, David Se~ tadDavid Weu'.
We have beDeflt~l enormously I:y v*/uablo di~*eo~iotc with them.822.
TREE ADJO IN ING GRAMMARS- -TAG'sWe now introduce tree adjoining grammars (TAG's).
TAG'sare more powerful than CFG's, botb weakly and strongly, l TAG'swere first introduced in \[Joshi, Levy, and Takahashi,1975J and\[Joehi,1983 I.
We include their description in this ~*ction to make thepaper ~lf-contalned.We can define a tree adjoining grammar as follows.
A treeadjoining grammar G is a paw (i,A) where i is a set of initial trees,and A is a set of auxiliary trees.A tree a ls an initial tree if it is of the formGI ISI \I \ eE .
r~l \I \lThat m, the root node of a is labelled S and the frontier nodesare all terminal symbob.
The internal nodes are ~11 non-terminals.A tree ~ is an acxiliar?
tree if it is of the form~= XI \I \I \ wle= EI \.
.
.
.
.
X .
.
.
.
.V !
V~That is, the root node of ~ is labelled with a :on-terminal Xand the frontier nodes are all labelled with terminals ymbols exceptone which is labelled X.
The node labelled by X on the frontier willbe c~dl~l the foot node of ~.
The frontiers of initial trees belong tor-*, whereas the frontiers of the auxiliary trees belong to ~ N ~ U~'+ N '-'*.~/e will now define a compoeition operation called adjoining,(or adlunetion) which compo6es an auxiliary tree ~ with a tree 3'.Let 3' be a tree with a node n labelled X and let ~ be an auxiliarytree with the root labelled with the same symbol X.
(Note thatmnst have, by definition, a node (and only one) labelled X on thefrontier.
)IGr~nm~u Ol tad G2 mm w*aJtly equivuJ*a* if the forint ItaCU*ll* of GI,I~Gi} m tim J~in?
lua?un4pD ot G~ ~G2b G I  tad G:I *.,,* ,troo?ly *quivuJeotthey m mmkl7 eq~,ivuJeIt tad for etch w UI E,(GI) ~e L(G2), both G i  tad G2the strne itI~l~urld delleriptioll to v.  A ~ m r  G is ~ly  uleqoa~for t IPtriD|l llMl~ql~ ~* if UGI  am L G ~1 Itt'OO?~ I~deql\]otdl for b if L(G) m htad for elg'b w is I~ G *~iglm am ?
*ppmpdm e ,ttuctural description to m. The8oti~a 0( ItrOu?
*dequtcT ~ undoobtodlY not pmciN becsmn it deport ,4* o l  thenotion 0~ zpp~pfiato * tn t t tu~ de~.
*riptiomlAdjoining can now be defined as follows.
If # is adjoined toat the node n then the resulting tree "Tt' is as shown in Fig.
2.1below.7 = ~:$ X/ \  / \/ \ / \node / X \ / \n I I \ \ - - -X - - -t3" =S/ \  3'/ \~'~vithoutIX \  t- - /  \ - -/ \- -x - -/ \/ \+- -FiKure 2.1The tree t dominnted by X in 3' is excised, ~ is inserted at thenode n in "7 and the tree t is attached to the foot node (lab*lled X) of~, i.e., ~ is inserted or adjoined to the node n in 3' pushing tdownwards, Note that ~ljoinmg is not a suJmtitutioa operation.We will now defineT(G): The set of alJ trees derived in G starting from initialtrees in I.
This set will be called the tree set of G.L(G): The set of all terminal s t r inp which uppe'mr in thefrontier of the trees in TIG).
This set will be called the stringlanguage (~r langtiage) of G. If L is the string language of s TAG Gthen we say that L is a Tree-Adjoinin~ I.angllage (TAL).
Therelationship between TAG's , context-free grammmm, and thecorresponding string languages can be summarised as follows (\[Joehi,Levy, and Takahashi, 1975\], \[Joshi, 19831).Theorem 2.1: For every context-free grammar, G', there is soequivalent TAG, G, both weakly and strongly.Theorem 2.2: For every TAG, G, we have the followingsitoatious:a.
LeG) is context-free 3nd there is a context-free grammarG' that is strongly (cud therefore weakly) equivalent oG.b.C.L(G) is context-free and there is 4o coutext~free gramma~G' that is equivalent o G. Of course, there must be ncontext-free grmmmar that is weakly equivalent to G.L(G) is strictly context-sensitive.
Obviously in this cue,there is no context-freo grammar that is weaklyequivalent to G.Part8 Ca) ~d (e) of Theorem 2.2 appear in (\[Jushi, Levy, andTskahacbi, 19T5\]).
Pact (b) is implicit im that paper, but it isimpor*ut  to state it explicitly as we have done here because of it8linguistic significance.
~mmple 2.1 illustrates part Ca).
We will nowillustrate p,1~ (b) and (e).Example 2.2: Let G J (I,A) where!
:A ?~t =~t  :5Ie$ TI \  I \n T t SI \  I \l b  I bS TLet us look s t  some der tv t t lons  tn G."TO : ~ :SeIe3'2 =Sa/T \/ I \/ n S\~=' I \  \I I b \?
T __~ .
.
.
.
I~I bSIe~t$/ \u TI \$biU~t71 == 3'0 with ~I 3'= =* 3'1 with ~adjoined at S am indicated in "f0.
adjoined at T as indicated in ~..Clearly.
L(G), the string language of G isL-- { , .eb .
/ Q>o }which is a context-free language.
Thus, there must exist a context-tree grammar, G', which is at least we~tkly equivalent to G. \[t cam beshown however that there is no context.flee grammar G' which isstrongly equivalent to G, i.e., T(G) I-  T(G').
This follows from thefa t  that the set T(G) (the tree ~et of G) is non-r~o,~nizable.
*.e.,there is an finite s t~e bottom-up tree automaton that can recognizeprecisely T(G).
Thus s TAG ma~" ~ _z context-free language,~ign  structural de~riptious to the strinAs that cannot beusi~ned by ~ context-free ~rammnr.F.~xample 2.3: Let G ,m (I,A) where$I@#t = #= =S TI \  I \m T a SII\ II\I I \  I I \b S c b T c8,3The precise definition of L(G) is as follows:L(G) =- L t =.
{w ?
ca / n > o, w is a string of a's and b's such that(1) the number o( u's I=, the number o( b's - -  n, and(2) for any initial subetriag of w, the numberof a's > the number o( b's.
}L I is a strictly context-sensitive language (i.e., s context,,sensitive language that i, not context-free).
This can be shown asfollows.
Intersecting L with the regular language a* b* ?
c* results inthe language1~== { a abnec  a /  n>>_o} =-L  t Na 'b 'ec"i~ i~ well-known strictly context-sensitive language.
The resultof intersecting a context-free language with a regular language isalways a context-free language; hence, L t is not a context-freelanguage.
It is thus a strictly context-feusitive language.
Example2.3 thus illustrates part (e) of Theorem 2.2.TAG's have more power than CFG's.
However, the extrapower is quite limited.
The language L t bag equal number of a's, b'sa~d c's; however, the s's and b's are mixed in a certain way.
TheItmguage I~ is similar to Lt, except that a's come before all b's.TAG's as defined so far are not powerful enough to generate Lt.This can be seen as follows.
Clearly, for any TAG for I.~, eachinitial tree must contain equal number of a's, b's and c's (includingsero), sod each auxiliary tree must also contain equal number of a's,b's and c's.
Further in each cue  the a's must precede the b's.
Thenit i~ easy to see from the grammar of Example 2.3, that it will not bepo~ible to avoid getting the a's and b's mixed.
However, L t can begenerated by a TAG with local constraints (see Section 2.1} The so-called copy language.t .
-  {wewlw,{~b}"  }also cannot be generated by s TAG, however, again, with localconstraints.
It is thus clear that TAG's can generate more thancontext-free languages.
It can be shown that TAG's cannot generateall context,-sensitive languages \[Jmhi ,lg84J.Although TAG's are more powerful than CFG's, this extrapower is highly constrained and apparently it is just the right kindfor characterizing certain structural descriptions.
TAG's share almostall the formal properties of CFG's (more precisely, the correspondingclasses of language,).
~.
we shalJ see in Netin* 4 of this paper and\[Vijay-Shankar nd Joehi,1985J.
In addition,the string languages ofTAG's can also be parsed in polynomial time, in partkular is O(nS}.The parsing algorithm is described is detail in section 3.| .1 .
TAG's  with Lanai Const ra in ts  on Ad, Jo ln ln |The adjoining operation as def'med in Seetion 2.1 is "context-free'.
Au auxiliary tree, say,X/ \I \I \- - -X - - -is adjoinable to s tree t at a node, say, n, if the label of thatnode is X. Adjoining does not depend on thn context (tree context)around the node n. In this sense, adjoining is context-free.In \[Jmhi ,19831, I~al  constraints on adjoining similar to thoseinvestigated by \[Joshi and Levy ,1977\] were considered.These are ageneralization of the context-sensitive constraints tudied by \[Petersand Ritchie ,1~9\].
It was soon recognized, however, that the fullpower of these constraints was never fully utilized, both in thelinguistic context as well as in the "formal languages' of TAG's.The so-called proper analysis contexts and domination contexts (asdefined in \[Jmhi and Levy ,197T\]) as used in \[Joshi ,1983J alwaysturned out to be such that the context elements were always in aspecific elementary tree i.e., they were further localized by being inthe same elementary tree.
Based on this observation and asuggestion in \[Jaehi, Levy and Takahashi ,1975\], we will deseribe anew way of introducing local constraints.
This approach not onlycaptures the insight stated above, but it is truly in the spirit ofTAG's.
The earlier approach was not so, although it was certainlyadequate for the investigation in \[Jmhi ,1983J.
A precisecharacterization f  that approach still remains an open problem.G - -  (I,A) be a TAG with local constraints if for eachelementary tree t E l t.J A, and for each node, n, in t, we specify theset ~ of auxiliary trees that nan be adjoined at the node n. Notethat if there is no constraint then all auxiliary trees are adjoinable atn (of course, only those whose root has the same label as the label ofth* node s).
Thus, in general, ~ is a subset o( the set of all theauxiliary trees adjoiuable at n.We will adopt the following conventions.1.
Since.
by definition, no auxiliary trees are adjoinable to anode labelled by a terminal symbol, no constraint has tobe stated for node labelled by a terminal.2.
If there is no constraint, i.e., all auxiliary trees (with theappropriate root label} are adioinable at a node, say, u,then we will not state this explicitly.3.
if no auxiliary trees are adjoinable at a node n, then wewill write the constraint as ($~, where $ denotes the nullset.We will alE.~ allow for the possibility that for a node atleast one adjoining is obligatory, of course, from the setof all ixxmible auxiliary trees adjoiuable at that node.Hence, a TAG with Meal constraints i defined as follows.
G =(I, A) is a TAG with local constraints dr for each node, n. in each treet, be speeify one (and only one) of the following constraints.1.
S, Ioetive Adjoinin~ ~.qA:) Only u specified subset of theset of all auxiliary trees are adjoinable at u. SA isw-linen aa (C), where C is u subset of the set of allauxiliary trees adjoisable at n.If C equals the set of all auxiliary t rm adjoinable at n,then we do not explkitly state this at the node n.2.
Null Adjoining; (NA:) No  auxiliary tree ia adjoinable atthe ,,ode N. NA will be written u (~).3.
Obli~atin~ Adjoining; {OA:) At least one (out of all theauxiliary trees adjoissble at a) must be adjoined at n.OA is written as (OA).
or as O(C) where C is a subeet ofthe set of all suxifiacy trees adjoisable at u.I~--~amp~ 2.4: Let G == (I~.)
be u TAG with I~  constraints whereI: a I tS C~)/ \~t s S (B2)I Ia b84s (~t )  s (~=)I \  I \I \ I \a S (?~) (?~) S hIn a t no anxiliary trees can be adjoined to the root node.
Only~t is adjoinable to the left S node at depth 1 and only ~= isadjoinable to the right S node at depth 1.
In ~t only BI is adjoinuhieat the root node and uo auxiliary trees ate adjoinable at the ~.~,~'node.
Similarly for ~2.We must now modify our definition of adjoining to take care o(the local constraints, given a tree "7 with a node, say, is, labelled Aand given an auxiliary tree, say,/J, with the root node labelled A, wedefine adjoining as follows.
~ is adjoinable to "y at the node n if B E~, where ~ is the constraint associated with the node u in "7.
Theresult of adjoining d to ~ will be as defined in earlier, except hat theconstraint C ~.~sociated with u will be replaced by C', the constraint?ssociated with the root node orb and by C' ,  the constraintassociated with the foot node of ~.
Thus, given"T: ~=S/ \ node nI k (C)I / \I /  \ \I I  \ \The resultant tree "7' isk (C ' )/ \/ \/ \/ \/ \(C')q,' IS/ \/ \/ \/ k CC')/ / \  \- - - /  \ - - -/ \/ A (C')/ / \  \- - .
/  \ - - -/ \We abo adopt the convention that any derived tree with a nodewhich has an OA constraint associated with it will not be included inthe tree set associated with a TAG, G. The string language L of G isthen defined as the get of all terminal strings at all trees derived in G(starting with initial tre~) whkh have on OA constraints left-inthem.Example 2.5: Let G == (I,A) be a TAG with local constraintswhere: Of --A:  8=S (~)/ I/ Ia S/1\/1 \h I ?S (?~)There are no constraints in a t. In ~ no auxiliasT trees are adjoinabieat the root node and the foot node and for the center S node thereare an constraints.Starting with a t and adjoining ~ to a t at the root node weobtain?
=S (~)I II Ia SI I \I I \b I cS (?
)ISAdjoining ~ to the ceuter S node (the only node at whichadjunction can be made) we have" I '  :amS (~)I II I,~ ..~j" (~,), ' / I  "t a S ~ ~/ I t \; /1 \/ b I ?
/ t' -  - - - ?
'1~ - -/1 \h I eS (?~)IlIt ia easy to ~.e that G generates the string languageL = { a?b 'ec ' lu>O}Other languages such as L'=={a al In ~_~1}, L" == {a a= I n ~__ 1}aim cannot be generated by TAG's.
This is because the strings of aTAL grow linearly (for a detailed definite of the property called"contact growth" property, see \[Jmhi ,1983 I.For those familiar with \[Joehi, 19&3\], it is worth pointing outthat the SA constraint is only abbreviating, i.e., it does not affect thepower of TAG's.
The NA and OA constraints however do affect thepower of TAG's.
This way of looking at local constraints has onlygreatly simplified their statement, but it has also Mlowed us tocapture the insight that the 'locality' of the constraint in statable interms of the elemental/ trees themselves!S.2.
Simple Llngulntle ExmmphmWe now give a couple of Unguistie examples.
Readers may refer~o \[Krocb and Joshi, 1985\] for detads.I, Starting with ~fl ~m at which is an initial tree and then adjoining~1 (with appropriate l xieaJ insertions) at the indicated node in at,we obtain "~:~.85"~t = Ot  =S/ \~ .
VP/ \  l \DET ~1 V IPI I I I \I I I I \~hn g i r l  I DET Itm I In sea lerthe gXrl ~n t sen/or~1 =mid/ \MP $/ \/ \~P VPI / \?
Y MpI Iant, lIBL11$/ \/ \~Mp~ VP/\ ~ I\~\\  ~ I \MP \ \  V ~P/ \  , S ~ I / \DET 11 ; / \~ts  VET !I i t lm S\  I Ithe g i r l  I lVp/ \ \ \  a sen/orVP \I I / \  xI I \not I x ~" p t  \\ I IThe g l r l  who net BLl l  t,* n sealer2.
Starting with the initial tree 3't =a ~ and adjoining 0~ atthe indicated node in a ,  we obtain 7~-3'1 = (~2 ="~2 =02 =* S 0(02) S ,/ \  / \MP ~p liP VPI / \  I /1 \PRO TO ~P W / I \/ \  I V MP S (h)V h'P John I \I I l \tnvlr, n I persuaded gI II ltry B111PRO to i nv i te"1 \ \I Np yp ~I/ !
I I \  ',I I V MP, ~'  (@)J J o in  I I .
7 \i I g~w v~I persuaded I .
~ I / \X I~ I TOVP\ i~PRO / \  %.. Bill~ V l(P. .
.
.
I ILnvtt, 1Iiltr~John pomaded eLI1 ~o XnvLte M~ryJohn persuaded B211 SNote that the initial tree cz 2 is not a matrix sentence.
In orderfor it to become a matrix sentence, it must undergo am adjuuction atits root node, for example, by the auxiliary tree ~2 as shown above.Thus.
for a 2 we will specify a local constraint O(~2) for the rootnode, indicating that a 2 requires for it to undergo am adjuuction atthe mot node by an auxiliary tree 02.
In a fuller grammar there willbe, of course, some alternatives in the scope of O().3.
PARSING TREE-ADJO IN INGLANGUAGESa.
l .
l)eflnltlonmWe will give a few additional definitioM.
These sre notnecessaW for defining derivations in a TAG as defined in section 2.However, they are introduced to help explain the parsing algorithmand the proofs for some of the closure properties of TAL's.DEF IN IT ION 3.1 Let 3',3" be two tre~.We say "r \[--" 3" if in 3' weadjoin an auxiliary tree to obtain 3".I'-* is the reflexive,transitive closure of \]---.DEF IN IT ION 3.2 3" is called a derived tree if 7 I--* 3" for someelementary tree %' We then say "~' E D('I).The frontier of any derived tree 3' belongs to either ~ ~ ~ UN ~ if 7E D(,~) for some auxiliary tree 0. or to ~ if 3' E Dqcr)for some initial tree a.
Note if ";, E D(a) for some initial tree ~, then3' is aim a sententtal tree.If 0 is an auxiliary tre~, "7 E D(0) and the frontier of 3' is w I Xw 2 {X is a nooterminsJ.wl.w 2 E ~ r~') then the le~ node having thisnon-terminal symbol X at the frontier is called the foot of 3'.Sometimes we will be loosely using the phrase "adjoining witha derived tree" "7 E D(~) for some auxiliary tree 0.
What we mean isthat suppose we sdjoin d at some nc~le and then sLdjoin within t~ andso on, we can derive the desired derived tree E D(0) which uses thesame adjoining sequence and use this resulting tree to "adioin" atthe original node.3.3.
The Psrs i .
s  A lsor l thmThe ~igorithm, we present here to parse Tree-AdjoiningLanguages {TAL~), is s modification of the CTK algorithm (which isdescribed in detail iu \[Abe and UIIman,1073 D, which uses ,, dynamicprogramming technique to parse CFL's.
For the sake of making ourdescription of the parsing algorithm simpler, we shall present healgorithm for parsing without considering local constraints.
We willlater show how to handle local constraints.We shall s.~ume that any node in the elementary trees in thegrammar has atmos?
two children.
Thm assumption c~m be madewithout any loss of generality, because it can be easily shown thatfor any TAG G there m an equivalent TAG G I such that amy node inamy elementary tree in G t has atmmt two children.
A similarassumption is made in CYK algorithm.
We use the terms ancestorrand descend~at, throughout the paper ms & transitive and reflexiverelation, for example, the foot node may be called the ancestor of thefoot ands.The ~lgoritbm works am follows.
Let st... % be the input to beposed.
We use a fom~limeoaioaal rray A; each element of thesrrny cont4uiu a subset of the nodes o( derived t rm.
We say a nodeX of a derived tree 3" belongs to A(i,j.k,lJ iJr X dominates a sub-tree o(3' whose frontier m given by either =q+a...aq Y ak+i... ~ (where thefoot node of 3' ~ labelled by Y) or ~q+t--.~ (i.e., j ,,- k. ~; -86corresponds to the case when T is a sentential tree).
The indices(i,j,k,I) refer to the positions between the input symbols and rangeover 0 through u.
If i == 5 say.
the,, it refers to the gap between a sand a s.Initially, we fill A l i , i+ l , t+ l , i+ l  \] with those nodes in thefrontier of the elementary trees whose label is the same as the inputai+ t for 0 < i < n- l .
The foot nodes of auxiliary trees will belong toMI A(i,i,j,jl, such that i _< j.We are now in a position to fill in 311 the elements of the arrayA.
There are five c~mes to be considered.Case 1.
We know that if a node X in a derived tree is theancestor of the foot node, and node Y is its right sibling, such that XE A\[i,j,k,II and Y E A\[l,m.m,nJ, then their parent, say.
Z shouldbelong to A(i,j,k,n\[, see Fig 3.1a.Case 2.
If the right sibling Y is the ancestor of the foot nodesuch that it belongs to All,m,n,pJ and its left sibling X belongs toA i.j.j.lJ, then we know that the parent Z of X and Y belongs toA i ,m,n.p, see Fig 3.1bCase 3.
If neither X nor its right sibling Y are the ancestors ofthe foot node ( or there is no foot node) then if X E A\[i,J,j,ll and Y EA\[I.m.m,nJ then their parent Z belongs to A\[ioj,j,n\[.Came 4.
If ?
node Z has only one child X, and if X E A\[i,j,k,l\],then obviously Z E A{i,j,k,ll.Ca~e 5.
If 3 node X E AIi.j,k,ll, and the root Y of a derivedtree "7 having the same label as that of X, belongs to A\[m,i,l.u I, thenadjoining "t at X makes the resulting node to be in AIm,Lk,nl, see Fig3.1c.
( , )  X"I \I \I \I \I Z' \/ / \  \I / \ \I I \ \ ?/ V' Y' \/ / \  / \  \/ / \ / \ \I I \ I  \ \I !
I I I It j k 1 ?
?
(b) x'I \I \I \I \I Z' \/ / \  \/ / \ \/ / \ \/ V' Y' \/ / \  I \  \/ / \ / \ \I / \ I  \ \.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
X ' .
.
.
.
.
.
.
.I I I I I Ji J 1 an  p(c) Y/%/ \/ \/ \/ \/ \/ \/ \.
.
.
.
.
.
.
.
.
.
X .
.
.
.
.
.
.
./ \I / \ In / \ ?/ \/ \I I I Ii J k IPi l l ?
re  3._~IAlthough we have stated that the elements of the arraycontain 3 subset of the nodes of derived trees, what really goes inthere ape the addresses of nodes in the elementary trees.
Thus thethe size of any set is bounded by a constant, determined by thegrammar.
It is hoped that the presentation of the sdgorithm belowwill make it clear why we do so.3.3.
The  adl~orithmThe complete algorithm is given belowStep I For i=O to n- I  s tep I doStep 2 put a l l  node?
in  the f ront ie r  o f  e lemnntsryt r~ whoso l~bel 18 ~*t  In A \ [ i .
i?
l .
i * l .
i * l \ ] .Step 3 For i :O to n- I  stop t doStep 4 fo r  J : l  to  n- I  s top 1 doStep 8 put foot  nodes of  a l l  aux i l i a ry  t rees  inXt t .
: .
J .
J \ ]Step 6 For 1:0 to n step I doStep 7 For i : l  to 0 step - I  doStep 8 For J=i to 1 step I doStep 9 For k=l to J step -1 doStep I0 do Cue  1Step I t  do Cue  2Step 12 do C~O 3Step 13 do Cue  5Step 14 do Cue  4Step 1S Accept i f  root of  somn in i t ia l  t ree E A \ [O .
J , j ,n \ ] ,0~J~_nwhere,(a) Case I corresponds to situation where the left sibling is theancestor of the foot node.
The parent is put in A\[i,j.k.l I if the leftsibling is in A\[i,j.k.m I and the right sibling is in A|m.p,p,l|, where k~_ m < I, m _~ p, p ~_ I.
Therefore Came I m written asFor ask to 1-I  ~top I dofo r  p= a to I s tep I doi f  there i s  ?
l e f t  s ib l ing  in A \ [ t .
J .
k .n \ ]  and ther ight  s ib l ing  in A\[n.p.p.1\]  sat i s fy ing  appropr ia teres t r i c t ionn  then put the i r  parentin A\[i,j,k.i\].
(b) Case 2 corresponds to the case where the right sibliog is theancestor ,~f the foot node.
If the left sibling is in A\[i,m.m.pl and the.ght  sibling is in A(p,j,k.I I, i -- m < p and p ~ j, then we put theirparent in A\[i,j,k,l I.
This may be written asFor n : l  to J - t  s top 1 doFor p=u-t to J s tep 1 dofor  ?11 le f t  8 ib l inp  in A( t .n .n ,p \ ]  and r iKht8 ib l inpin  A \ [p .
J .
k .
l \ ]  sa t l s fy ins  ?ppropr la tn  rHCr lc t lon8  put~heix parentsin A{?
, j , k .1 \ ] .87(c) Case 3 corresponds to the cane where ?either children ateancestors of the foot ?ode.
If the left sibling E A\[i,j,j,ml and the rightsibling E A(m,p,p01\[ then we can pat the parent in A\[i,j,j,lJ if it is thec~, .
that ( i<  j _< mor i~ j < m) and(m < p ~ lo t  m _< p <| ) ,Th i s  may be written aefo~ s : J t,o l - t  st,up I dofor  p : J to 1 ?~*p t dof ?
r  .11 left ,  sLblLnKg in A \ [ i .
J , J ,n \ ]  andright, s ib l ings  i ?
A(n,p,p,1\]  ?at1?fy1.nlg t, he appropr iaterant,rXcCio??
pot the i r  pgwuat, Xa A( / .
J .
J .
I \ ] .
(e) Came 5 correspo?ds to adjoining.
If X is n node in A\[m,j,k,pJ andY is the root of a a?xiliary tree with same symbol as that of X, suchthat Y is in A\[i,m,p,I\] ((i <_ m _< p < ior i  < m_< p <_ l Jand(m< j < k ~ por to  ~j  ~_k < p)J.
This may be writte?
asfor ?
= ?
co J 8t*p t dofor p = u ~o I stop t dot f  t node X E A\ [a .
J .k .p \ ]  and t, he root, oftuxl lXary t ree ~.?
In k \ [ t ,a .p , l \ ]  t, heu put, X Xn A( i .
J , k , l \ ]Case 4 corresponds to the case where s ?ode Y has only one child XIf X E A~i,j,k,ll then put Y in A\[i,j,k,l\[.
Repe~t Case 4 again if Y hasus siblings.3.4.
Complex i ty  of  the  A lsor l thmIt is obvious that steps I0 through 15 (cases a-e) are completedin 0(?-*), beta?an the different cases have at most two nested forloop statements, the iterating variables taking values in the range 0thro?gh u.
They are repeated utmost 0( ?
4) times, because o( thefour loop statements i?
steps 6 through 9.
The initialization phase(steps 1 through 5) has a time complexity of 0( ?
+ ?
: )  == 0(?2).Step 15 is completed in O(?).
Therefore, the time complexity of theparsing algorithm is O(?S).3.5.
Cot ,~.etnem of tha  A l lo r l thmThe main issue in proving the algorithm correct, is to showthat while computing the contents of an element of the array A, wemust have already determined the contents of other elements of thearray needed to correctly complete this entry.
We can show thisinductively by considering each cue individually.
We give an;.uformal argument below.Case h We need to know the co?tents of A\[i,j,k.m\[, A\[m,p,p,I\]where m < I, i < m. when we are trying to compute the co?tents orAii.j,k,l \[.
Since I is the y&riable itererated i?
the outermost loop (step6), we can assume (by indnctio?
hypothesis) that for all m < I andfor all p,q,r, the coate?ts of A\[p,q,r,mJ are already computed.
Hence,the contents of A\[i,j,k,mJ are known.
Similarly, for all m > i, andfor all p,q, and r <_.
l, A\[m,p,q,rJ would have been computed.
Thus,A\[m,p,p,i I would also have bee?
computed.Case 2: By s similar ream?lag, the co?tents of A(i,m,m,pJ andA\[p,j,k,l I are known since p < I and p > i.Case 3: Woe?
we are trying to camp?re the contents of someAii,j,j,lJ, we need to know the nodes in A(i,j~i,pJ and A\[p,q,q,l\[.
,Note j> i or j < I. tlence, we know that the co?tents of A\[i,j.i,pj andA(p,q,q,l\] would have bee?
compared already.Came 5: The co?tents of A\[i,m,p,iJ and A(m,j,k,pJ must bek?own i ?
order to compote A(i,j,k,l\[, where ( i _< m ~ p < I or i <m < p_<l )aad(m_<j_< k < por to  < j_< k_<p) .
Sinceeither m > i or p < I, contents of Alm,j,k,pl will be know?.Similarly, since either m < j or k < p, the co?re?re of A(i,m,p,l Iwould have been comp?tcd.3.S.
Pmmlug wi th  Loead Const~mlnt4So far,we have a~,samed that the give?
grammar has ?o localconstraints, If the grammar has local constraints, it is easy to modifythe above algorithm to take care of them.
Note that in Ca~e 5, if anadjunctio?
occurs at a ?ode X, we add X again to the element of thearray we are computing.
This seems to be in co?trust with ourdefinition of how to associate local constraints with the ?odes in ase?te?tial tree.
We should have added the root of the auxiliary treeinstead to the element of the array being computed, since so far uthe local constraints are concerned,this ?ode decides the localconstraints at this node in the derived tree.
However, this schemecannot be adopted in oar algorithm for obvious reasons.
We let pairsof the form (g,C) belong to elements of the array, where g is - -before and C represents the local constraints to be associated withthis ?ode.We then alter the algorithm as follows.
If (X,CI) refers to auode at which we attempt to adjoin with an auxiliary tree (whoseroot is denoted by (Y,Cs)).
the?
adi ?nctio?
would determined by C I.If adjunctio?
is allowed, then we can add (X,Cs) in the correspondingelement of the array.
In cases I through 4, we do not attempt o adda new element if any one of the children has an obligatoryconstraint.Once it has bee?
determined that the given string belongs tothe language, we ca?
find the parse i?
a way similar to the schemeadopted i?
CYK algorithm.To make this process simpler and moreefficient, we can use pointers from the new clement added to theelements which caused it to be put there.
For example, considerCase i of the algorithm (step 10 ).
If we add a node Z to A(i.i,k,I I,because of the pr~nce  of its children X and ?
i?
A\[ij,k,m i andA(m,p,p.q respectively, then we add pointers from this node Z i?A\[i,j,k,l\] to the nodes X, Y i?
A{i,j,k,mj and A\[m,p,p,l\[.
Once this hasbeen done, the parse c,m be found by traversing the tree formed bythese pointers.A paner based o?
the techniques described above is currentlybeing implemented mad wiU be reported at time of presentation.4.
CLOSURE PROPERTIES OF TAG'sI?
this 6ectio?, we present some closure resoits for TALe.
Wenow informally sketch the proofs for the closure properties.interested readers may refer to \[Vijay-Shaakas mad Jo6hi,1985\] forthe eL, replete proofs.4.1.
C losure  undem Un ionLet G t and G. z be two TAGs generating L I and l.~ respectively.We c~?
eonstrnct '~ TAG G snch that L(G)m'L t U L-a-Le* G I =- { 11, At, NI, S ), and G 2 = ( I~, A=, N~., S )Without Io~ of senerality, we may assume that the N I N N:e =" h.Let G --  ( I l U 12 , At LJ A=, N t U N=, S ).
We claim that L(G) :~ L lLet x EL t  U L-z.
Then x EL I  or x E I~.
If x EL I ,  then itmust be possible to generate the string x in G , since 11 , A t are inG.
Hence x E L(G).
Similarly if x E \[q , we can show that x E L(G).Hence L t U L~ C L(G).
If x E L(G), then x is derived using eitheronly Ij, A t or only l~,A:tsince N I I"1 N,j =,, ~.
Hence, x EL t  or X Et~  Thus, L(G} '-- Lt U I~  Therefore, L(G) =- Lt U L~884.2.
C lmure  under  Concatena~onLet G t - - ( l t ,At ,N~,St) ,  G ,  ,,, (\[~.~=,N~,S~) be two TAGsgenerating Lt, I~ respectively, such that N I I'1 N= =- ~.
We camconstruct ?
TAG G =- (I, A, N, S) such that L(G)=,, L!
.
!~.
Wechoo~ S such that S is not in Ns t,J N=.
We let N - -  N t IJ N ,  U{S}, A ,m A t U An.
For all t t E !1, t~ E I,, we add tl:~ to I, as shownin Fig 4.2.1.
Therefore, !
=- ( tl= / t!
E It, t~ ~ l~), where the nodesin the subtrees tt and t~ of the tree t~= have the same coustra~atmmmocinted with them us in the original grammars G !
and G=.
it iseasy to show that L(G) ,m L I .
L~, once we note that there are noNx i f ia~ trees in G rooted with the symbol S, and that N I f3 N,  ,md).s~ s~s t= I \ t~= I \I \ I \I \ I \f"t2 :S/ \/ \/ \/ \s, s~I X I X/ *,t \ / ~s \Fib, urn 4 2. t4.3.
Cloeuru under  K le~ne gt.m~Let G t =, (iI,At,NI,S1) be a TAG generating L t. We can showthat we can construct a TAG G such that L(G) - .
Lt*.
Let S be asymbol not in N t, and let N m N I U {S}.
We let the set \[ of initialtrees of G be (re} .
where t e is the tree shown in Fig 4.3~.
The set o(auxiliary tree, A is defined uA = {t~A / t t ?
It} UAt.The tree tlA is u shown in Fig 4.3b, with the coustraintm onthe root of each tlA being the null adjoining constraint, anconstraint~ on the foot, and the constraints on the nodes of thesnbtreee t t of the tre~ ttA being the same sm thee for thecorresponding nodes in the inithd tree t t of G I.To see why L(G) ,m Lt*, consider x ~ L(G).
Obviously, the treederived (whose frontier is given by x ) must be of the form ~howu inFig 4.3?, where each t t' is a sententinJ tree in GI~UCh t I' E D(ti), forzn initial tree t i in G t. Thus, L(G) C LI*.On the other hand, if x E Ls*, then x =- Wl...wu, w i ~ L t for 1_< i < n. Let e,u'h w| then be the frontier of t~Je sententiai tree t i' ofG t such that t i' ~ D(t;), t I ~ I t. Obviously, we ca8 derive the tree T,using the initial tree t,, and have ?
sequence of adjoining operationsusing the auxiliary trees tl, ~ for I _< i _ n. From T we c,-, obviouslyobtain the tree T' the same am given by Fig 4.3?, using only themtxifimry t re~ in A t. The fruntiee of T '  is obviously wl...w =.
Henee, xI~G).
Therefore, LI* E L(G).
Thus L(G) =~ Us*.
(*) % = SIn(b) ~IA : $IX/ \S St/ \/ \ , r  t,t/ \(c)//SIX/X/~\* '~ ' t$I StS I \I I \ .
-  c ' ,eT ?FIgure 4.34.4.
Cloeulm under  Intemm~tlon w i th  R elgul~ur ImaKuNlemLet L T be a TAL and L R be a regular language.
Let G be ?TAG generating L T and M = (Q , ~ , 6 , q0 , QV) be a finite stateautomaton recognizing Lit.
We can construct a 8ramma: G and willshow that L(GI) u L T N L R.Let a be an elementary tree in G. We shall associate with eachnode a quadruple (qt,q2,%,q4) where qt,q2,q.l,qi E Q Let (qt,%,q.~,q4)be mare)tinted with a node X in (~.
Let us assume that a is anauxiliary tree, and that X is an ancestor of the foot node of a. andhence, the ancestor of the foot node of any derived tree "r in D(a).Let Y be the label of the root and foot nodes of (~.
If the frontier of7 ('T in D(o)) is w t w 2 Y w s w 4, and the frontier of the snbtree ofrooted at Z, which corresponds to the node X in a is w= Y w~.
Theidea of amso~iating (qt,q~,q3,q~) with X is that it must be the casethat 6?
(qz, w~) =- q~, and ~(q~, w=) =, qs.
When ~ becomes a part ofthe seutenti ~I tree ~" whose frontier is given by u w I w 2 v w s w4 w,then it must be the case that 6*(q~, v) == cut.
Following thisremmoing, we must make q= == q~, if Z is not the ancestor of the footnode of % or if "~ is in D(o) for some initial tree (~ in G.We have assumed here, as in the case of the parting algorithmpresenf~ed earlier, that =ny node in ~y  elementary tree has ~tmosttwo children.From G we cam obtain GI u follows.
For each initial tree a,mmociate with the root the quadruple (q0, q, q, qr) where qe is theinitial state of the ~qni~ state automaton M, and ~ E QF.
For eachauxiliary tree # of G, associate with the root the quadruple(ql,q~,qa,q4), where q,ql,q=,ch,q4 a~e some variables which will laterbe given values from Q.
Let X be some node in some elementary treecL Let (ql,q=,o.s,q4) be ~umociaU~l with X.
Then, we have to considerthe fol~)'~iag cuesCans I" X hi- two chUdreu Y and Z.
The left child y is theancestor of the foot node of a.
Then zuoeiste with V the quadruple (p, q~, o..I, q ), and ( q, r, r, s ) with Z, and ~ssociate with X: theconstraint that only throe trees whoue root has the quadruple ( qt, P,s, q4 ), among Shone which were allowed in the orism~ grmmmus,may be adjoined at this node.
If qt pd p, or q4 ~,i s , then theconstraint associated with X must be made obligatory.
Lf in theorigin.l g ruamar  X had an obligatory constraint associated with itthen we retmm the obligatory constraint regarcllelm of the relationshipbetween qt and p, mud q4 and s. if the constraint amsccinted with Xis a null adjoining constraint, we seaociate ( qt, qt, CL,, q ), and ( q, r,r, q4 ) with Y and Z resp~tively, and aamcinte the nuU adjoiningenustramt with X.
If the label o( Z is a. where s E ~, then we cboouss ~ q such that 6 ( q, a ) I s. In the nu II adjoining constr~nt c~ule,q is cheeeu such that 6 ( q, a ) == q4.89CaN 2: This corresponds to the case where ?
node X hu  twochildlt~ Y and Z, with (qt,q~,ql0qt) asm?inted at X.
\ [ s t  Z ( the rightchild ) be the aucestor of the the foot node the tree a.
Then we shallsmucinte (p,q,q,r), (r,qs,qa,s) with Y and Z.
The am?slated cottstraiatwith X shaft be that only those trees amour those which wereallowed in the nepa l  f~nmlmar may be adjoined provided their roothas the quadruple (ql,p,s,q4) aaso?inted with it.
If qt ~ P or q4 ~ rthen we make the constraint obligatory.
If the original grammar hadobfiptory constraint we wifl re tm the obfiptory constraint.
NaBconstraint in the original grammar will force us to use null constraintud  not consider the cases where it is not the case that qt I p andq4 m s. If the label of Y is ?
terminal 'a' then we chouse r such that6*(p,a) m r. If the constraint at X is s nuU adjoining constraint, hen?
?
(q t ,a )  - r.Case 3: This corresponds to the cue  where ?either the leftchild V nor the right child Z of the node X is the ancestor of the footnode of a or if a is a initial tree.
Then qs ~ q8 I q.
We willammeiate with Y and 7. the quadruples (p,r,r,q) and (q,u,t) reap.
Theconstraints are assigned as before , in this cuse it is dictated by thequadruple (ql,P,t,qt).
\[f it is not the cue  that ql " P and q4 um t,then it becomes an OA constraint.
The OA and NA constraints at Xare treated similar to the previous eMes, and so is the cue  if eitherY o1' Z is labelled by a terminal symbol.Cuss 4: If (ql,qt,q~bqt) is assort?ted with a node X, which hunonly one child Y, then we can de~ with the various cusee as follows.We will annotate with Y the q?adruple (p,qs,qa~t) and the constraintthat root of the t~,e which can be adjoined at X should have thequadruple (qt,P~,qt) amucinted with it amen8 the trees which wereaflowed in the original grammar, if it is to be adjoined st X. Thecm where the original grammar bad null or obligatory constraintamocinted with this node or Y is labelled with a terminsi symbol, aretreated similar to how we dealt with them in the previous cuses.Once this has been done, let ql,---,qm be the independentvariables for this elementary tree o, then we produce as many co~of a so that ql,..-,qm take ad possible value8 from Q.
The onlydiHerenee ?meal  the varions copies of cs so produced will beeonsteaint8 u ~  with the nodes in the trees.
Repeat he prose?for aft the elementary trees in G a.
Once this has been dome and eachtree |lynn ~ unique name we can write the constraints in terms ofthem names.
We will now show why L~G1) m U T ~ L R.Let w E I~GI).
Then there is a sequence of adjoiningoperations starting with uu inithd tree a to derive w. Obviowdy, w EL.F, also since corresponding to ensh tree used in deriving w, there isn corresponding tree in G, which diffem only in the constraintsasm?inted with its nodes.
Note, however, that the coutraintsaloeinted with the nodes in tre~ in G z are just a reatriction of thecorresponding om in G, or an obligatory constraint where there wunoes in G. Now, if we can amume ( by induction hypothesis ) that ifafter n adjoining operation we cam derive "/' E D(a').
the?
there is acorresponding tree ~, E D(a) in G, which bus the same tree structureas 7' but differm| only in the constraints aasociated with thecorl~sponding nodes, then if we adjoin at some ..ode in "7' to obtain~t'.
we can adjoin in "T to obtain "ft (corresponding to "it').Therefore, if w can be derived in Gt, then it eu  definitely be derivedinG.If we can abe 8bow that l,(Gt) ~ 14, then we ean concludethat L(GI) ~ L T /'1 Lm.
We can use induction to prove this.
Theinduction hypothesis that if all derived trees obtained after k <_ nadjeininlg operations have the prepethy P then so will the derivedafter n + 1 adjoininp where P is defined as,Property P: If any node X in a derived tree -f bus the foot-node ofthe tree 0 to which X belongs labeDed Y as ?
descendant sucb thatw z Y w= is the fro?tier of the s?btree of ~ rooted at X, then if(ql,q~,q.l,q4) had bee?
as?oct?ted with X, 6*(qt,wl) m q= and6"(q3,ws) m q4, and if w is the fro?tier of the subtree under the footnode of 0 i?
"/is then 6*(q~,w) ~ q8- if X is not the ancestor of thefoot ?ode of 0 then the subtree of 0 below is of the form wtw s.Suppme X has aso~inted with it (ql,q,q,q2) the?
6*(qt,wl) --  q,5*(q,w,) = q,.Actually what we mean by an adjoining operation is not?eeessarily just one adjoining operation but the minimum number sothat no obligatory constraints are am?tinted with any nodes in thederived trees.
Similarly, the base ease need not consider onlyelementary trees, but the smalleat (in terms of the number ofadjoining operations) tree starting with elementary trees which h,mno obligatory constraint annotated with any o( its nodes.
The basecue can be see?
easily considering the why the grammar wse built(it can be shown far?ally by induction on the height of the tree) Theinductive step is obvious.
Note that the derived tree we are gong touse for adjoining will have the property P, and so will the tree stwhich we adjoin; the former because of the way we dreig?ed thegrammar and amiped coaatraints, and the latter because ofinduction hypothesis.
Thus so will the new derived tree.
Once wehave proved this, all we have to do to show that L(GI) C_ L R is toconsider those derived trees which axe soots?tint rees and observethat the roots of these trees obey property P.Now, if n string x E LT f3 Lit, we can show that x E L(G).
Todo that, we make use of the following claim.let  ~ be sn anxilinry tree in G with root labelled Y and let "r ED(B).
We claim that the~ is a B' in Gt with the same structure u 0,such 'that there is n ~,' in D(beta~))') where q' hu  the same structureas % such that there is no OA constraint in ~'.
le t  X be a node in~t which wu used in deriving ~,.
The?
there is n node X' in ~' suchthat X' belo ?p to the anxilliary tree 0 f  (with the same structure as01- There are several rMes to consider -Case 1: X is the ancestor of the foot node of 01, such that thefro?tier of the subtree of 0t rooted at X is wsYw 4 and the fro?tier ofthe subtree or 7 rooted at X is W|WlZW~W t. Let 6~(qt,w|) an q,6*(q,wt) - -  q,, 6*(qa,w2) n r, and 6*(r,wt) --  q4.
Then X' will have(ql,q,r,qt) aseocinted with it, and there will be no OA constraint inCase 2: X is the ancestor of the foot node o( Of  and the frontier ofthe subtree of 0t rooted at X is wsYw 4. let  the frontier of thesubtree of "I rooted at X is WsWlW=W t. Then we claim that X' in 7'will have amucinted with it the q?adl~tple (qt,q,r,qt), if 6*(ql,wl) mq, 6*(q,wl) me p, 60(p,w2) me r, and 6*(r,wt) u q4-Case 3: let  '.he frontier of the subtree of 0t {and aJeo ~) rooted at Xis WlW =.
Let 6*(q,wl) a p, ~(p,ws) I r. Then X' will haveassociated with it the quadruple (q,p,p,r).We shall prove o?r  claim by induction o?
the number ofucljoi?ins operations used to derive "T. The buse case (where -~ == 0} isobvious from the way the I rammar ( i  t wu  built.
We shall nowamume that for all derived trees % which have bee?
derived from 0using k or less adjolnins operatiou, have the property u required iao?r claim, le t  "f be a derived tree in 0 after k adjuuctious.
By ourinductive hypothesis we may ass?me the existence of thecorresponding derived tree "T' (E D(0') derived in G t. Let X be n nodein -y as show?
in Fig.
4.4.1.
The?
the ?ode X' in 7' corresponding toX will have associated with it the q?adruple (ql',cht',qs',qt").
Note weare nan ?
inn  here that the left child Y' of X' is the ancestor of the90foot node of ~', The quadruples (qt',ql',q~',P) and (P,Pl,Pl,q4") willbe asao?inted with ?'
and Z' (by the induction hypothesis).
Let "h bederived from ~ by adjoining ~1 at X as in Fig.
4.4.2.
We have tochew the existence of ~t' in G 1 such that the root of this auxiliar7tree hu  saso?iatod with it the quadruple (q,qt',q4",r).
The exmtenceel the tree follows from induction hypothesis (k =ffi 0).
We have alsogot to show that there exists "/t' with the same structure us "f butone that allows ~1' to be adjoined at the required node.
But thisshould be 8o, since from the way we obtained the tree, in G1, therewill exist ~t" such that X I' has the quadruple (q,q~',qa',r) and theconstraint* at X l' are dictated by the quadruple (q,qt',q4e,r), batsuch that the two children.of Xt' will have the same quadruple as in7'.
We can now adjoin ~I' in ~I" to obtain "h'.
It can be shown that~t' has the required property to establish our clam./ \/ \/ \/ \/ x \/ / \  \/ / \ \ x / \ y/ / \ \ / \/ / \ \ / \/ / \  / \  \ / \/ / \ / \ \ / \  / \/ / \ /  \ \ / \ / \.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
/ \ I \v'~ T v'= w* t n'= / \ / \/ x/ \lr'!
~ W' 2 e?1 e* 2~* (q' t .v '  t)=q'=~* (p,v?
t)--'pt&*(q'a.w'~)---p ~*(Pt.e'=)=q',Fl~furn 4.4.1/ \/ \/ \/ \/ \/ \/ \/ \/ / \  \/ / \ \/ / \ \/ / \ \.
.
.
.
.
.
.
.
/ \ .
.
.
.
.
.
.
.I \I \I \ .
.
.
.
.
.
.
.
/ \  .
.
.
.
.
.
.
.~*(q.x) fq ' t  &*(q's.y)--rFi?~urn 4.4.2Flatly, any node below the foot of Dr' in 74' will satisfy ourrequieement~ as they are the same as the corresponding odes in 71 *.Since BI' satisfies the requirement, it is simple to obasrve that thenodes in ~1' will, even after the adjunctiou of ~1' in "at'.
However,because the quadruple associated with X I' are different, thequadruples of the nodes above X t" must reflect this cbuge.
It is easyto check the existence of an anxKinr?
tree such that the nodes aboveX t' satisfy the requirements a s ta~l  above.
It can alan be argued amthe basis of the design of g ramme GI, that there exisu trees whichailow this new auxiliary tree to be adjoined ~t the appropriate place.This then allows us to conclude that there exmt a derived tree foretch derived tree beiongin to D(~) as in our claim.
The next step isto extend our claim to take into --count all derived trees (i.e.,including the sentential trees).
This can be done in a manner similarto our treatment of derived trees belonging to D(~) for some~dl inry tree ~ as above.
Of course, we have to consider only thecue where the finite state automaton start8 from the ini?i~d sta~ q0,and rez~bes ome final state qr ou the input which is the frontier o(some esnten*ial tree in G. This, then allowu us to conclude that L~ rl'L R C L(G1).
Hence, L(Gt) - -  L T ~l Lit.5.
HEAD G ~ S  AND TAG'sIn this section, we attempt o show that Head Grmmmmm (HG)are remarkably similar to Tree Adjoining Grammars.
It appesn thatthe basic intuition behind the two systems is more or less the same.Head Grammars were introduced in (Pollard,1084\], but we follow thenotations used in \[Roach,10841.
It has been observed that TAG's andHG's share a lot of common formal properties uch as almostidentical closure results, similar pummping lemma.Consider the basic operation in Head Grammars - the HeadWrapping operation.
A derivation from n non-terminal produces apair (i,a1...ai...a~) (a more convenient representation for this pan isal...~ilLl+l...a~ ).
The arrow denotes the head of the string, which inturn determines where the string is split up when wrapping operationtakes place.
For example, consider X->LL~(A,B), and let A=*whlxand B=~*uglv.Then we say, X=*whuglvx.We shall define some functions used in the HG formalism,which we need here.
If A derives in 0 or more steps the headed stringwhx and B derives ugv, then q, q,l) i f  X -> LLI(A.B) L8 a rule ~u the gTtmmmx ~henX dsrlveu vhugvx2) L!
X -> LL~(A.B) ts * ruln ?n ~he grammar ~hnuX derlves vhugvx4.3) i f  X -> LCt(A.B) Ls a rulo In the grammar thenX dertvnu vhxugv4) i f  X -> LC~(A.B) in a rule \[n the granm~r thenX durlvee vhxtt~r4 bNov consider hoe u dertv .
t lon  Ln TAGs proceeds -Let ~ be an auxilliary tree and let ~ be n sentential tree as inFig 5.1.
Adjoining ~ at the root of the sub-tree ~ gives us thesenteutiaJ tree in Fig 5.1.
We eros, now see how the string whx has?
wrapped around* the sub-tree i.e,the string ugv.
This seems tosuggest that there is something similiar m the role played by the footin an auxilliary tree and the head in a Head Grammar how theadjoining operations and head-wrapping operations operate onstrings.
We could say that if X is the root of ~ auxilliary tree t~ andal...x i X a~+t...a ~ is the frontier o( a derived tree ~ E D(~}, then thederivation of 7 would correspond to a derivation from a non-terminalX to the string al...a 4 1ai?t...a~ in HG and the use of 7 in somesenteutial tree would correspond to how the strings al... a 5 and~?t...a~ are used in deriving, string in HL.a= S/ \/ \/ X \/ / - \  \/ / - -  - \ \~_~_'7ugv  $/ \/ \!
\/ x \,hT-~-xu~~= X/ \/ \/ \/ X \v h ?r i~r, s.J191Based on this observation, we attempt ?4) show the closerelationship of TAL'o and HL's.
It is more convin/ent for us to thinkof the headed string (i,at...sl) as the string ?t.--~ with tbe headpointing in between the symbok I 4 and 14+t rather than at thesymbol 14.
The defmition of the dehvation ?per?tom can be extendedhi ~ stra/ghtforward manner t4) take this into account.
However, wec'~" ?cheers the S2rne effect by considering the dermitions of theSl imier ?
LLJ~C,ete.
Pollard suggests tha* cases such as I J~ ,~)  beIcR u"dermed.
We shrift -'~,ume thai if ~" --,.by then L I~.~)  ~,?
,h~,  LC~)  - -  ~, LC~,~)  - -  ~ ,  '-C,~L;) - -  ~, ~C,(;,X) - -  ~,=.~ Lc,(~,;) = ~.~'e, the~ say that if G is n He~d Grammar, then w I -= w bx belongs?4) L(G) if and only if S derives the headed string wbx'ror whXx.With this new definition, we shsil show, without givin~ the proof,~hat the c i~  of TAL's is ensnared hi the chum of HL's.
bysystematically coeverthiS any TAG G to n HG G'.
We shaft assume,without loss of general/t)', that the constra/nts expressed at the nodesof elementary trees of G ~re -I) Nothing can be ?de?heed st ?
node (NA),2) Any appropriat~ tree (~mbob at the node and root of the~*uxillimry tree must marsh) can be adjoined (AA), or3) Adjoining at the node is ?brig?tory (OA).It is ea~ ?4) show that these constra/nts are enough, and thatselective adjoinhig can be expressed in terms of these and additiomdnon-terminals.
We know give ?
protednrzi deseriptioe of obtainingan equivalent Head Crammat from ?
Tree*Adjoining Grammar.
Theprocedure works u follows.
It k a reeumve procedure(Couvert_to_HG) which takes in two patametsrs, the firstrepresenting the node oe which it k being ?pplied and the ~e~ood thelabel appearing on the left-hand side of the HG productions for thisnode.
ff X is a ~onterminal, for each auxiliary tree ~ whose root huthe label X, we obtain ?
sequence of production- such that the rmstone has X on the left-hand side.
Using these productions, we candefoe the string Wl~W ~ where n derived tree in D(~) has ?
frontierwiYw ~.
ff Y is ?Ysode with with IsJ)ei X in some tree whereadjoining is allowed, we introduce the productionsT' -> L~(x .
r )  {so then.
s derived t.ree with rootlnbel X nny wrl~ 8~'ovad the 8t.rin4| derived from the nbt.reobelow ?.hie node~r -> L~t(A 1 .
.
.
.
.
Aj) {anmu*4q that thereexo J children of this node and the Ink chi ld t ?
theancestor of the foot node.
By cedllng t.he procedurerecurstvely for i l l  the J chLldren of T with At.kr~nlrlng frox I throuKh J, ve cns derive from I1' thefront.
?er of the subtreo belo~ Y}T' -> I '  { thin iu t~ handle t*hn cue  where noadJuc~on ~d~ns place ?
t  T)If G is s TAG then we do the following -Repeat for every In?t182 treeConvert to RG(root,S') (S" wi l l  be the 8t4u-t symbol ofthe nov Heed (;re=,--,'}.Repe&t* for o~?h Amctllta~-y t r~Conret~ m J~ (root.
roo~lmlo l )where Ccarez~ ~o HG(n~te.nwso) In dettnsd -.. fo l lmmL!
undo 18 an index.aLl node tJmncnsn I I !
tJm ~mstr~tnt  n~ ~hn node t8 A&add product, ions $~I->LLu(node syubo l .
I ' ) .| '->LC t (At', .
.
.
.
At ' ,  .
.
.
.
Aj ' )S\]m->LCt (At ' .
.
.
.
.
At ' ,  .
.
.
.
A| ')?
here I I ' .A t ' ,~ ' .
.
.
.A | '  are ,,mr ?ou-tenLtna~synbole,A !
.
.
.
.
.
A| correspond t.o the J chl ldrenot the node sad l= l  I f  foot, node is  not* ?
descund..mt*of node else =1 ?uch t*h&t* the 1 ~ chi ld of ?ode i sancan~r of foot* node,J=uQber of chiZdreu of ?odefor  Im-I co J sup  I doConvert, to HG(k ~ chi ld of ?ode.At ' ) .Cue 2 The conet.r~tnt* ?t* ~bn node Ls JUt.Sue u Cue 1 except don't* add the product*loneS~m->LL t (node 8~mbol .
r ) .II*->LCt (AI ' .
.
.
.
.
A| ' ) .Cue 3 The constrn int  st, the node l ?
0A.Stse an Cue I except, that* we don't, a4dSyx->t.C t (At',...Aj')else i f  *.he node hu  ?
ternl?s3, synbol ?
.then add the production gyx ->~,el ?e {it  1?
?
foot* node }i t  the cons&taint* at, the foot.
node is  AA then,dd the product*ionn _ _Syx ->ill(node syxbol,~)/~i t  the con?t.rx.iat* t ?
0A then add onXy theproduct.ionSyu ->l.t1(node s lnt~I .~)L!
the c gnetl"~nt* i l  gA add the product.ionS~w ->.~We sh~dl now xive so example of converting ?
TAG C to sHG.
G coeta~s ?
single initiaJ t r~ o, and ?
single suxiliar7 treeas in Fig.
5.2.$a= I ~=Ftf~ur.
S..~2I \I \a SI t \I I \/ I \b s(~) cObviouS, L(Cl - -  {so~c- / ?
_> 0192Appbying the procedure Convert to_HG to this grammar weobtain the HG whose productions are given by-s'-~ LL~(S,A)A ->s -> L%(B.?
)B -> I\[c -> LL~(S,D)/O0 -> I.Ct(Z.F.G)-> '~F -> "~ - )  -~-vhtch can be re~r~tten  us' -> s/~S-> LCt(a,X')~' ->  LL~(S,~c) or ~' ->u~(s,~c)I t  can be vur i f te~ Chat Chin grumsr  generates exact lyL(G).It is worth emphasising that the main point of this exercise wUto show the ~imilarities between He~J Grammars and Tree AdjoiningGrammars.
We have shown how a HG G' (using our extendeddefinitions) can be obtained in a systematic fashion from a TAGG.
It is our belief that the extension of the definition may notnecessar/.
Yet, this conversion process hould help us understand thesimilarities between the two formalisms.6.
OTHER MATHEMATICAL  PROPERTIESOF TAG'sAdditional formal properties of TAG's have been discussed in{Vijay-Shankat and Joshi,1085\].
Some of them are listed belowt) Pumping lemmn for TAG's2) TAL's are closed under sub6titution and homomorphisms3) TAL's are not closed under the following operationsa) intersection vtth TkL'8h) |.ntnrsoct~.on ntth CFL'nc) coapleMnt, attonSome other properties that have been considered in \[Vijay-Shank~r ~d Joshi,1985j re u followst) clomsrn under the fo l loetng properttana) tnver le hosollorphteib) ~m ~ptn~2) 8eLtltnnLrtty tad PartlrJ~-bouadndaan8.Referqene~1.
Aho,A.V., and Ullman,J.D., 1073 "Theory nf Parsing, Translation tan__{d Compiling, Volume 1: Pxrsinp;, Prentice-Hall, Englewood Cliffs,N.J., 1973.2.
Joshi,A.K., 1983 "How much context-sensitivity s necessary forchare~terising structural descriptions - tree adjoining gramman" inNatural Lanpiua~ie ~ - Th#oretieal v Computational I and~og iea l  Perspectives (ed.
"D.~owty, L.Karttunen, A.Zwick~,Cambridge University Press, New York, (originally presented in1983) to appear in 1985.3.
Joshi,A.K., and LevyJ~.S., 1977 "Constraints on StructuralDc,seriptinns: Local Transformations s, SIAM \]ourual of Computinlt;June 1977.4.
Joshi,A.K., Levy :..S., and Takahashi, M., 1975 "Tree adjoininggramm=rs', Jo, rual of Comout~r ~"~'ems and Sc.
;enees March 19755.
Kroch, T ,  and Joshi, A.K., I~85 ?Linguistic relevance of treeadjoining grammars', Technical Report i MS-CIS-g.5-18, Dept.
ofComputrr and ?~.formation Scteuee I University of P~nnsvlvania, April6.
Poll:zrd, C,  t984 "Generalized Fhruse Structure Grammars, HeadGrammars, and Natural l"nggagea, Ph.D dissertation t StanfordUniver~itz, August 19847.
Ro~h.
!<., 1084 "Form~J P.-operties of Head Gra:,~m~rs',unpublbhed manu~'ript, Stanford University, also presented at theM-.th~.mir~ ,ff l,anguage~ workshop zt the University of Michigan,Ann Arbor, Oct. lg~.l.8.
Vijay-S~',ankar,K., Jnshi.A.K.. 1935 "Formal Properties ot TreeAdjolmug Grammars'.
Tm'hni~.
'il Report, D~pt.
hi' Cnmp,,ter nailhzformation Srit,~rf.~ Univ@r~ttv of Peoesvlvant~, July 1985.93
