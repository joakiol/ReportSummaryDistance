COLING 82, J. HoreckS, (ed.
)North-Holland Publishing Company?
Academia, 1982IMPLEMENTATION AND CONVERSATIONAL ENVIRONMENT OF ARIANE 78.4,AN INTEGRATED SYSTEM FOR AUTOMATED TRANSLATION AND HUMAN REVISIONCh.
BOITET, P. GUILLAUME and M. QUEZEL-AMBRUNAZUniversit~ Scientif ique et M~dicale de GrenobleGETA - BP.
53X38041 Grenoble C~dexFRANCEINTRODUCTIONARIANE-78.4 is a computer system designed to of fer  an adequate environment forconstructing machine t rans lat ion programs, for running them, and for (humanly)revising the rough translat ions produced by the computer.
ARIANE-78 has been opera-t ional  at GETA for more than 4 years now.
This paper refers to version 4.
I t  hasbeen used for a number of applications (russian and japanese, english to frenchand malay, portuguese to english) and has constantly been amended to meet the needsof the users.
Parts of this system have been presented before \ [2 ,3 ,7 ,8 \ ] ,  but i tswhole has only been described in internal technical documents.This paper t r ies  to give such a global presentation.
Given the space constraint ,i t  centers on the conversational environment under which users may manipulate thedata bases of texts (with the i r  part ia l  transforms, the i r  translat ions and the i rrevis ion) and of l ingu is t i c  programs (e.g.
grammars ahd d ic t ionar ies) ,  test anddebug the i r  programs, run complete translat ions and revise them.
'Part I gives the necessary introduction to the system and i ts  components.
Eachcomponent (e.g.
morphological analysis, structural analysis,  etc.)
is wr i t ten isone of the four languages specialized for l ingu is t i c  programming (LSLP) supportedby the system (ATEF, ROBRA, TRANSF and SYGMOR).
Those languages have been presen-ted elsewhere.In part I I ,  we explain the global queries and actions of ARIANE-78.
Some globalvariables (such as the source language code) may be set.
Various informations maybe extracted from the data base, such as which texts have part ia l  results for agiven step of the t rans lat ion process, or which are the lexical  units for a givensource (or target)  language code, and in which grammars or d ict ionar ies theyappear.
Some global actions, such as archiving part of a l ingu is t i c  appl icat ion,may also be performed.Part I I I  and IV concern the subenvironments under which l inguists  may prepare thetexts in d i f ferent  corpuses, by entering them d i rec t ly ,  or reading them from inputdevices, as well as compose and compile the l ingu is t i c  f i l es .~art ~ describes some of the fac i l i t i es  supported for  the interact ive debugging ofthe d i f ferent  steps of an appl icat ion.
Last, but not least ,  Part VI presents 2very powerful operators and the subenvironment for human revis ion.
The f i r s t  ope-rator allows to compile a given appl icat ion,  par t ia l l y  or to ta l l y ,  by issuing onecommand and i ts  parameters.
Should an error occur in some f i l e ,  the l ingu is t  may?
correct i t ,  and the process w i l l  automatical ly continue the compilation.
Thesecond operator allows to use ARIANE-78 as a real operational system.
In onecommand, the user may order a l l  or some texts of a given corpus to be automati-ca l ly  translated by a given source-target language pair .We conclude by giving some estimates of the stat ic  and dynamic costs of the sys-tem (disk space, central memory, CPU times).1920 CH.
BO1TET, P. GU1LLAUME and M. QUEZEL-AMBRUNAZI - THE SYSTEM AND ITS COMPONENTSThe schema below shows the different steps of the translation process.
The compo-nents of ARIANE-78 implementing the 4 different algorithmic models appear withincircles, they are linked by double lines to the rectangles corresponding to thel inguist ic  data written in the associated metalanguage for the indicated step.Simple arrows show the flow of control.
UL means "lexical unit".
The usual abbre-viation for each step is given between parentheses (e.g.
AS for multilevel analy-sis).<7 ,::cTRANSFER/LEXICAL | J SOURCE :t i ,-~ .
.
.
.
.
.
.
.
~ STRUCTUREI " I IK,~I~IbI 'LK I t , , .~ .
ti i /TL~ J , WI~.
II' "\"INTERMEDIATESOURCE ~ /T_ .... /\STRUCTURAL LTR}SFER(TSI II INTERMEDIATEI TARGETi STRUCTUREANALYSIS (AS)' I 'p .
.
.
.
--L .
.
.
.
.IRESULT =iILABELED TREEANALYSIS (AM)SOURCE TEXTISTRING OF ,~HA_RAC_T E_R S -- _'IARIANESYNTACTICGENERATION(:SURFACE !I REPRESENTATIO~ LQ\[36EIZ-T##J=LGMORPHOLOGICALIENERATION(GM~r "  1 I'TARgEt-TEXTI STRING OFi CHARACTERS I!
.
.
.
.
.
.
.
.
.
.
.
t~=o lzIMPLEMENTATION AND CONVERSATIONAL EL'~/IRONMENT OF ARIANE 78.4 21In each step, the l inguist ic  data may be of four different kinds :- grammatical "variabTes" ( l ike gender, number, semantic type), which definethe attributes present on each node of a ( l inguist ic)  tree structure ;- classes, describing useful combinations of values of variables ;- dictionaries ;- grammars, containing the rules and the strategy for using them.They are expressed in a metalanguage.
Their syntax and coherency is f i r s t  checkedby the corresponding compiler which then generates a compact intermediate code.At run-time, this code is interpreted.The conversational monitor ARIANE is a transparent interface with the user.
I thandles the data-base of l inguist ic  f i les  and of texts, with their  intermediateresults.
The entire system exists in 2 versions (french and english).
Any userspace is implemented as a virtual machine (under VM/CMS), and may support anynumber of analyses, transfers and generations.
A "source language code" (a "targetlanguage code") is associated with each analysis (generation), and a pair "sourcecode-target code" with each transfer.Once a user has logged in, he (or she) types in "ARIANE" and enters level 0 of themonitor, which is constructed as a hierarchyof subenvironments, with correspondingmenus.
At any time, entering a null l ine pops to the next higher environment, i fany, and "STOP" allows to exi t  from any depth.
A trace of the session is alwaysconstructed and may be printed or discarded (the normal type of terminal is ascreen).ARIANE handles certain global variables, l ike the dialog mode (brief or detai led),the source and/or target language codes, or the name of the current corpus(homogeneous et of texts with the same method of structuring).
Their values areasked by the system, i f  there is no default, and may be expl ic i ty  assigned by theuser.~All environments provide a help function.
Hitting '?'
gives a brief explanation,and 'DET' a more complete one (not all  environments need i t ,  however).These features enable users with no particular computer science background to usethe system.
The only things to know are the standard editor (EDGAR or XEDIT), andthe metalanguages of the different components.II - GLOBAL QUERIES AND ACTIONSI - Setting the global variablesCHGMODLGINDGTXT'LGTXTswitches between brief and detailed mode.resets the langage code(s).resets the current corpus name.is the same as LG + INDGTXT.2 - Information on the data baseThe information asked may concern the l inguist ic  data, the corpora, the texts, the(part ial)  results and the lexical units.Linguistic dataLIENS gives al l  analyses, transfers and generations known to ARIANE in the userspace.22 CH.
BOITET, P. GUILLAUME and M. QUEZEL-AMBRUNAZPRET v isual izes the state of any or a l l  steps of ~hese appl icat ions.
A givenstep must be completely compiled in order to execute i t .LISGEN (LlSVAR) l i s t s  a l l  the l ingu is t i c  f i l es  (only the var iables) of a givenapp l i cat ion ,  from one step to another, e .g .
,  with "AS TS", from structuralanalysis to structural  t~ansfer.Corpora and textsLINDG, LTLG and LTOT l i s t  respect ive ly  a l l  corpus names, the names of a l l  texts ina given corpus, or the names of a l l  texts in a l l  corpora.LTXIG an LTXTIG l i s t  respect ive ly  a l l  texts of a given corpus, or a l l  texts of a l lcorpora.
I t  is not unusual to have more than a dozen corpora and somehundreds of texts in one of them.Results of d i f fe rent  processingsRESULT allows to p r in t  a rough t rans lat ion  and/or i t s  rev is ion,  with or withoutthe source text .
The output is formatted (by using the standard SCRIPTsystem), and contains the date where the rough t rans lat ion  was obtained ( i f  any),the dates (of compilation) and language codes of the analyses, transfers and gene-rat ions used, as well as the date of the last  (manual) rev is ion,  i f  any.
The roughoutput i t se l f  may not be altered manually.RESGT indicates,  for  given language code(s), for  one (or a l l )  corpus, and for  agiven step (AS, TS, GS, GM or RV - for  rev is ion) ,  the names of the textshaving a corresponding resu l t .
Al l  intermediate resu l ts  (not the t rans lat ions orrevis ions,  however) are erased when the corresponding l ingu is t i c  data is modified.The rough t rans lat ion (not the revis ion) is erased when the source text  is modified.I f  TRAD or REVIS is used instead of GM or RV, RESGT acts l i ke  a global RESULT,which allows to p r in t  a l l  results of a given type, for  one or a l l  corpora, in onecommand.Lexical unitsLTULS (or LTULC) gives tables ind icat ing where the source (or target)  lex ica lunits have been referenced.
For instance, i t  is possible to know, in thecase when a given generation is shared by several appl icat ions (e.g.
russian-french,engl ish-french),  for  which source languages a given target  lex ica l  unit  has beenan equivalent in one of the transfer  d ic t ionar ies .3 - Global actionsDUPLG allows to copy a given appl icat ion (or part of i t )  onto another one, whichmay already eXist or not.
This is of course very useful during thedevelopment of a pro ject .DESTRUC is the opposite funct ion,  and allows (with a lo t  of warnings !)
to erasea given appl icat ion (or part of i t ) .ELIMIG allows to erase an ent i re  corpus, with a l l  re lated resu l ts ,  in much thesame way.I I I  - PREPARATION OF THE TEXTSThis environment is cal led PRTXT.
I ts  subcommands are e i ther  proper or general.The data base of texts is divided into corpora.
For each corpus, there is an asso-ciated structur ing method, defined by an hierarchy of separators./IMPLEMENTATION AND CONVERSATIONAL ENVIRONMENT OF ARIANE 78.4 23Usual interpretations are in terms of sections, paragraphs and sentences, but ncinterpretation is forced on the user.
Hence, a text always appear with an associa-ted tree-l ike structure of decomposition.1 - Proper subcommandsCREAT, ELIM and MODIF are respectively used for creating, erasing or modifying atext (under a ful l  screen editor).REGROUP allows to group several texts in one.CARTES is used to enter texts via a tape or a card reader.DESCRT is used to display or to modify the "descriptor" of the current corpus,which contains the ordered l i s t  of the separators defining the structuringmethod of the corpus.LISTE, with subcommands LITEX, LTDES, LIOCC, allows to print a text, in a format~dor unformatted way, its tree structure (deduced from the structuring method),and the sorted l i s t  of its "occurrences" ("words", or "forms").2 - General subcommandsUnder this environment, i t  is also possible to ask global queries relative to thecorpora and the texts : LINDG, LTLG, LTOT, LTXIG, LTXTIG (see above).IV - PREPARATION OF THE LINGUISTIC DATAThere are 6 subenvironments, denoted by PR<name of phase> : PRAM, PRAS, PRTL, PRTS,PRGS, PRGM.
The subcommands are either a global action, or some acronym for asubset of the components of the l inguist ic data.1 - Commands relative to the components of the l inguist ic dataThese components vary with the metalanguage of the given step.
In general, theycomprise :- the declaration of the "variables", which would be better called "attributetypes".
The fundamental construct, in any given step, is a decoration type (a hie-rarchical collection of attributes).
Each node of a tree structure bears a decora-tion of the declared type.
The "variables" ("attribute types") are either non-ter-minal, and correspond to subdecorations, or elementary, and may then be of typesakin to PASCAL scalar, set and integer types.
See \[9\] or \[11\] for examples.
We useDV (DVM and DVS in AM, where there are two sets of variables).- formats, which are constant such record structures.
Linguistically spea-king, a format corresponds to a "class" (combination of certain values of the va-riables).
We use FTM, FTS and FTSG in AM, and FAF elsewhere.- boolean procedures, which may express any boolean conditions on the valuesof the variables of one or several decorations.
We use PCP as acronym.- assignment procedures, which express assignments (of values of variables)from one set of decorations to another.
We use the name PAF.- dictionaries (DIC).
All phases (AM, TL, GM) using dictionaries may declareseveral dictionaries.- grammars (GR).We give now the components which are expected for  each step of the translationp'rocess.24 CH.
BOITET, P. GU1LLAUME and M. QUEZEI.-AMBRUNAZAM (ATEF) : DVM, DVS, FTM, FTS, FTSG, GR, DIC (I to 7)AS,TS,GS (ROBRA) : DV, FAF, GRTL (TRANSF): DV, FAF, PCP, PAF, DIC (I to 7)GM (SYGMOR): DV, FAF, PCP, GR (0 to 9), DIC (I to 7).The division in different dictionaries is used for strategic purposes.
At TL; forinstance, i t  is possible to choose, before execution, any ordered subset of thepresent dictionaries.
The induced priorit ies are used for the choice of equivalents.The following subcommands apply to any of these components :M (modify) calls the editor and destructs the invalidated compiled f i les.V (visualize) calls the editor, but no modification is allowed.L ( l i s t )  prints the data, with a variety of options.C (compile) compiles the data, with a variety of options.For the dictionaries~, a number of predefined sorting options are defined, and theuser may also sort on any key he chooses (TRIZONE command).2 - Global actionsIn any PRXX environment, LISTEF wil l  print all the data, with or without the dic-tionaries.
In PRAM, PRTL and PRGM, the commands CMPDIC and EFDIC are used to com-pile al l  the dictionaries, or to erase some of them.
In PRGM, the commands CMPGRANand EFGRAM are used in much the same way for the grammars.V - INTERACTIVE DEBUGGINGThere are 6 subenvironments, denoted by EX<name of phase> : EXAM, EXAS, EXTL, EXTS,EXGS, EXGM.
They are used to debug the translation process up to the indicatedphase.
I f  some previous intermediate result already exists for the processed text,the system asks the user whether to use i t  as starting point or not.
The possiblesubcommands are relative to the preparation of a text (typical ly, a short text fortesting a particular phenomenon), or to the execution proper.1 - Commands relative to the submitted textThese commands are a subset of the PRTXT subcommands, namely CREAT, ELIM, MODIF,LISTE.
RESULT is also possible (so that one can visualize the old results beforestarting a new execution).2 - Execution properExecution is called by the EXECUT command.
It  may concern the tota l i ty  of the text,or part of i t .
This part is expressed in a logical or in a physical way, by givingeither the f i r s t  and last units, or the f i rs t  ane last segments.
A unit is any partor subpart of a text, as defined by the structur,ng method of the corpus.
A seg-ment is an integer number of units of the highest possible level such that the num-ber of words of the corresponding fragment of text lies between two specified l i -mits (which are parameters of ARIANE and depend of the size of the virtual memoryof the virtual machine).
A trace of the segmentation may be provided, as well asCPU times for the different steps.
The EXECUT subenvironment asks the user to give,for each step, tracing and output parameters.
ATEF and ROBRA provide a variety ofpossible traces.
With some options, execution may be followed step by step.
InROBRA, the trace parameters may be different for each grammar call (a transforma-tional system is a structured collection of such grammars).
To give an example, i tis quite usual to produce no trace at all for a large part of a process, then areduced one for the grammar preceding the one being debugged, and then a fa i r lycomplete one for some grammar calls, and so on i f  the behaviour of several gran~Brsmust be investigated.
This point is quite crucial for the development of applica-tions of reasonable size and scope.IMPLEMENTATION AND CONVERSATIONAL ENVIRONMENT OF ARIANE 78,4 25VI - GLOBAL OPERATORS1 - Global compilationDue to the variety of components of l inguist ic  data used in a given application(up to 21 dictionaries and usually 5 grammars, with variables, formats, procedures),the global operator COMPGEN is very useful in practice.
The user indicates thef i r s t  and last steps to be compiled (e.g.
AM-GM, or AS-TS, etc.)
,  with the compila-tion options.Should an error occur in a given component, the system asks the user whether hewants to modify i t .
I f  no, compiling may continue (e.g.
when a dictionary containssome errors), or not (other cases).
I f  yes, the editor is called, modifications aremade, and the global compilation may proceed.z - Processing of a quantity of textsThis is the TRAGEN global command, with arguments A, T, GS and GM.
These argumentsindicate up to which step execution must proceed.
In one l ine,  the user gives al lgeneral parameters (source and target languages, output units, i f  any, for theunknown words, the results, the CPU times, and the trace of segmentation ; and formof the result - with or without the source text).The system then asks which texts are to be processed.
I t  is possible to give themexp l i c i t l y ,  by entering their  names and their corpus, or to specify an entire cor-pus, with or without the possibi l i ty  to amend (under the editor) the l i s t  proposedby the system.Hence, TRAGEN (GM) may be used as a production environment "cranking out" roughtranslations of texts already in the data base.
An operational production environ-ment, with constant input flow of texts (from tapes, disquettes, terminal, etc.
)and output flow of translations, is currently being developed.
I t  wi l l  also includea more sophisticated revision subenvironment han ARIANE.3 - Human revisionBeing used as a system for automated translation, ARIANE provides an environmentfor human revision, called RI~gTS~II)ITT.
he rough machine output may or may not exist.In the last case, revision is the same as human translation and revision.
In thef i r s t  case, obviously the most interesting, a f i l e  for the revised translation iscreatedby copying the rough translation.
The rough translation i t se l f  may neverbe altered by the user.Revision is done under the standard editor, with 2 or 3 windows on the same screen,on which the source text,  the rough translation (optionnally) and the revised textappear.
In the future, a real text processing system may be used instead of theeditor, with functions specialized to frequent actions done during revision, suchas erasing, inserting or swapping words, sentences or paragraphs.VII - STATIC AND DYNAMIC COSTSWe don't consider here the cost of preparing the grammars and dictionaries for agiven application, but rather the static and dynamic costs incurred while develo-ping, maintaining and using an application.I - Static costsWe refer to them only in terms of space on secondary storage (disks).This cost is divided into 2 parts :- the space for the f i les  containing the basic software in executable form.This space is shared by al l  user spaces, and amounts to roughly 7 Mbytes for anyof the 2 (english and french) versions of ARIANE-78.4.- the space for the texts and the l inguist ic  data.26 CH.
BOITET, P. GUILLAUME and M. QUEZEL-AMBRUNAZThe space taken for a source text is just the size of the f i l e  containing i t ,  andthe same goes for its rough translation and its revision, i f  any.
If  an interme-diate result is kept, its size is roughly 4 times the size of the source text ( i tcontains some representation of the associated tree structure).
For any text andany language pair, up to 3 intermediate results may exist (after analysis, trans-fer, or syntactic generation).
Obviously, the space taken by the texts does notmeasure the complexity or val idity of an application.
I t  is only a measure of thesize of the corpus (corpora) used for developping and debugging an application.
Inthe current russian-french application, for example, the source texts occupy rou-ghly 12 Mbytes on disk.
This corresponds to roughly 700000 words, because of someredundancies.The space taken by the l inguistic data is f i rs t  divided in two parts : the sourcedata and the compiled data.
Second, one must distinguish between data relative tothe l inguistic model, and the typology (variables, formats, procedures, grammars),and the dictionaries, the size of which may expand i f  domains are added, or bettercovered.
The following table gives this partition for a previous russian-frenchversion (1980), using roughly 4000 lexical units, and reasonably large grammars.Linguistic Relative to Dictionariesdata the modelsource 0,35 1,25compiled 0,3 0,5Total 0,65 1,75Total1,60,82,4The marginal space for adding one lexical unit (in the dictionaries of AM, TL andGM) is roughly 310 bytes/UL in source form, and 120 bytes/UL in compiled form.
Thecompression factor is higher for dictionaries than for grammars.2 - Dynamic ostsThey may be measured in terms of the CPU time and the size of the virtual memoryused while executing a translation, as this computation dominates the costs.A main principle of the implementation has been to use the virtual memory fac i l i tyin such a way that, should the real memory be big enough, the only I/O incurred forexecuting a translation are due to loading the executable module generated byARIANE, and reading/writing the input text, the intermediate results and the trans-lation on disk f i les.
In other terms, everything is done in central memory.For an application l ike the one mentioned above, a 2 Mbytes virtual memory isenough to contain the OS (CMS) of the virtual machine, the compiled tables,ARIANE's programs, and the work areas.
As we said before, adding 1000 UL causesthis size to augment by roughly 120K.As far as CPU times are concerned, only virtual CPU is significative.
As i t  variesconsiderably from one type of machine to another, we prefer to give estimates inmillions of (virtual) machine instructions necessary to translate one word, orMi/w.
I f  we consider various applications (russian-french, french-english,english-malay or english-chinese), this complexity lies between 3 and 7 Mi/w.According to the size and load of the computer system, a certain overhead (forsimulation and paging) has to be added to obtain the total CPU time.
No uniformrule may be given.IMPLEMENTATION AND CONVERSATIONAL ENVIRONMENT OF ARIANE 78.4REFERENCES\ [ I \ ]\[2\]?
\ [3 \ ]\ [4\]\[5\]\[6\]\[7\]\[8\]\[9\]\[10\]\[11\]2?N~dobejkine N. - "Appl icat ion du syst~me ATEF ~ l 'analyse automatique destextes russes".
COLING-73, Pisa, 1973.Qu~zel-Ambrunaz M., Guillaume P. - "Analyse automatique de textes par unsyst~me d'~tats f in i s " .
COLING-73, Pisa, 1973.Chauch~ J.
- "Transducteurs et arborescences.
Etude et r~a l i sat ion  de syst~mesappliques aux grammaires transformationnel les".
Doct.
thesis ,  Grenoble, 1974.Boitet  Ch.
- "Un essai de r~ponse ~ quelques questions th~oriques et pratiquesl i~es a la traduction automatique.
D~f in i t ion d'un syst~me prototype".Doct.
thesis,  Grenoble, 1976.Boitet  Ch.
- "Probl~mes actuels en traduction automatique : un essai der~ponse".
COLING-76, Ottawa, 1976.N~dobejkine N. - "Niveaux d ' in terpr~tat ion  dans une traduction mult i l ingue :appl icat ion ~ l 'analyse du russe".
COLING-76, Ottawa, 1976.Thouin B.
- "Syst~me informatique pour la g~n~ration morphologique de languesnaturel les en ~tats - f in i s " .
COLING-76, Ottawa, 1976.Boitet  Ch., Guillaume P., Qu~zel-Ambrunaz M. - "Manipulation d'arborescenceset paral l~l isme : le syst~me ROBRA".
COLING-78, Bergen, 1978.Boitet  Ch., N~dobejkine N. - "Russian-French at GETA : out l ine of the methodand detai led example".
COLING-80, Tokyo, octobre 1980.Guilbaud J.Ph.
- "Analyse morphologique de l 'al lemand en vue de la traductionpar ordinateur de textes techniques spec ia l i s ts" .
Thesis, Paris,  1981.Nedobejkine N., Boitet  Ch.
- "Russian-French machine t rans lat ion  at Grenoble.A general software used for  implementing a par t i cu la r  l ingu is t i c  strategy".To appear in L inguist ics (1982).
