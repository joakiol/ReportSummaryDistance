On the Universal Generation Problem forUnification GrammarsJu?rgen Wedekind?University of CopenhagenThe universal generation problem for unification grammars is the problem of determiningwhether a given grammar derives any terminal string with a given feature structure.
It is knownthat the problem is decidable for LFG and PATR grammars if only acyclic feature structures aretaken into consideration.
In this brief note, we show that the problem is undecidable for cyclicstructures.
This holds even for grammars that are off-line parsable.The universal generation problem for unification grammars is the problem of determin-ing for an arbitrary grammar G and an arbitrary feature structure F whether there existsat least one sentence that G derives with F. If F is acyclic, Wedekind and Kaplan (2012)have shown that the problem is decidable for LFG (Kaplan and Bresnan 1982) and PATR(Shieber et al.
1983) grammars.
They prove that the set of strings that a grammar relatesto an acyclic feature structure can be described by a context-free grammar.
Decidabilityof the problem then follows because the emptiness problem is decidable for context-free languages.
For cyclic feature structures they demonstrated by example that the setof strings that a grammar relates to an input might not be context-free, but they did notfurther investigate the formal properties of the languages that are in general related tocyclic structures.In this brief note, we show the undecidability of the universal generation prob-lem by reduction from the undecidable emptiness problem for the intersection of twocontext-free languages.
We provide a proof for LFG- or PATR-style grammars that asso-ciate feature structures with trees derived in accordance with a context-free grammar.Our result also applies to other systems such as HPSG (Pollard and Sag 1994) whoseformal devices are powerful enough to simulate, albeit indirectly, the effect of context-free derivation.To state the universal generation problem more formally, recall that a unificationgrammar G defines a binary derivation relation ?G between terminal strings and featurestructures, as given in (1).
(1) ?G(s, F) iff G derives terminal string s with feature structure FThe universal generation problem is then the problem of deciding for an arbitraryunification grammar G and an arbitrary feature structure F whether {s | ?G(s, F)} isempty or not.?
Center for Language Technology, University of Copenhagen, Njalsgade 140, 2300 Copenhagen S,Denmark.
E-mail: jwedekind@hum.ku.dk.Submission received: 29 October 2013; accepted for publication: 27 January 2014.doi:10.1162/COLI a 00191?
2014 Association for Computational LinguisticsComputational Linguistics Volume 40, Number 3SA DB Cb c drootB EL RB EL RB E B E B Eb c drootB E'L' R'B E'L' R'B E' B E' B E'b c dFigure 1A sample c-structure and the f-structures associated with it by type 1 (top) and type 2 (bottom)string grammar derivations.For the reduction of the emptiness problem for the intersection of two context-freelanguages, we can, without loss of generality, assume that the context-free languages are-free.
These languages can be described by grammars in Chomsky normal form, thatis, by context-free grammars G = (N, T, S, P) with nonterminal vocabulary N, terminalvocabulary T, and start symbol S where every rule in P is of the form A ?
BC withB, C ?
N, or A ?
a with a ?
T.For the proof we first define for each context-free grammar G in Chomsky normalform two LFG grammars that both derive L(G) and that associate with each derivableterminal string feature structures (f-structures) that provide slightly different encodingsof the derivable string.Let G = (N, T, S, P) be a context-free grammar in Chomsky normal form.
A type1 string grammar String1(G) for G is an LFG grammar (N, T, S, P?)
whose rule set P?includes for each rule A ?
BC in P a rule of the form (2a) and for each rule A ?
a in Pa rule of the form (2b).
(2) a.
A ?
B C(?
L) = ?
(?
R) = ?(?
B) = (?
B) (?
E) = (?
E)(?
L E) = (?
B)b.
A ?
a(?
B a) = (?
E)A type 2 string grammar String2(G) for G is an LFG grammar (N, T, S, P?)
whose ruleset P?
includes a rule of the form (3a) for each A ?
BC in P and a rule of the form (3b)for each A ?
a in P.(3) a.
A ?
B C(?
L') = ?
(?
R') = ?(?
B) = (?
B) (?
E') = (?
E')(?
L' E') = (?
B)b.
A ?
a(?
B a) = (?
E')Figure 1 illustrates a c-structure and the f-structures associated with it by type 1and type 2 string grammar derivations.1 The attributes L, R, B, and E are mnemonic1 Note that the terminal symbols also occur as attributes in the annotations of the terminal rules.
This?abuse?
of the terminal symbols is not essential to our argument (a set of new attributes that is inone-to-one correspondence with the set of terminals would also suffice), but it makes the encodingof the terminal strings in the f-structures more perspicuous.534Wedekind On the Universal Generation Problemfor ?left?, ?right?, ?begin?, and ?end?, respectively.
For later reference, we also depictedthe constant root that we uniformly use to instantiate the ?
of a derivation that refersto the c-structure root; root then labels the f-structure element to which it refers inthe minimal model of the f-description.
(In Kaplan and Bresnan?s [1982] terminology,root corresponds to the f-structure variable associated with the c-structure root, usuallynotated by f1.
)Both types of string grammars have in common that they have G as their context-free skeleton and that for every string in L(G), the f-structure for each string grammarencodes both the string itself and also the branching structure of a derivation in G thatleads to that terminal string.
The f-structures derived by the two types of grammarsvary only slightly in the labels that they use to encode those properties.
An f-structureof a type 2 grammar derivation for a given string shares the ?begin?
attribute (B) withthe f-structure of a corresponding type 1 grammar derivation, but it has distinct ?left?,?right?, and ?end?
attributes (L', R', E').Because the derived f-descriptions can never be unsatisfiable (the string grammarsdo not contain atomic values), the f-structure constraints of the string grammars do notactually filter the language of the context-free grammar.
Thus G and its string grammarsmust have the same language L(G) = L(String1(G)) = L(String2(G)).
By induction onthe depth of the derivation trees it is also easy to see that the minimal solution of thef-description of a derivation of a terminal string s is acyclic and single-rooted, andsatisfies (root B s?)
= (root E) and (root B s?)
= (root E'), respectively, if and only if s?= s.That is, these grammars both encode their terminal strings in their respective (root B) to(root E)/(root E') paths.Before going into the details of the undecidability proof, we first give an out-line of the proof idea.
For the reduction, we have to construct for two arbitrary-free context-free languages L1 and L2 an LFG grammar G and an input structureF such that the set of terminal strings that G derives with F is empty if and onlyif the intersection of L1 and L2 is empty.
Because every -free context-free languageis derivable by a context-free grammar in Chomsky normal form, we can makethe LFG grammar G by combining the productions of String1(G1) and String2(G2),for two arbitrary context-free grammars G1 = (N1, T1, S1, P1) and G2 = (N2, T2, S2, P2)in Chomsky normal form.
To avoid undesired interactions between the rules ofthe two string grammars, we assume that the sets of nonterminals of G1 and G2are disjoint (this is without loss of generality because nonterminals can always berenamed).We observed already that the string grammars String1(G1) and String2(G2) asso-ciate with any c-structure derivation of a terminal string s1 in G1 and any c-structurederivation of a terminal string s2 in G2 f-structures that encode s1 and s2 as theirrespective (root B) values.
By construction of the string grammars, the only paths thatthe two f-structures share are the paths (root B s?)
where s?
is a common prefix of s1and s2.
Thus, if we define G to consist of the rules of String1(G1) and String2(G2),and a start rule that expands S to S1S2 and forces the f-structures for s1 and s2 tounify, their (root E) and (root E') paths become reentrant ((root E) = (root E')) if andonly if s1 and s2 are identical.
G then assigns to a terminal string an f-structure withreentrant (root E) and (root E') paths if and only if it has the form s?s?
and s?
is inL(G1) ?
L(G2).If all we do is unification on the top level the f-structures for the strings s1s2would still record information on the structure of their derivation.
Thus distinct stringsin {s?s?
| s?
?
L(G1) ?
L(G2)} would get assigned distinct f-structures.
However, theproof requires that there be a single f-structure that is assigned to all strings s?s?
with535Computational Linguistics Volume 40, Number 3rootEE'EE BLRL'R'cycles for the attributes in T1 ?
T2Figure 2The functional contribution of the S rule to a derivation in G.s?
in L(G1) ?
L(G2).
We achieve that by annotating the start rule so that the unifiedf-structures derived by the string grammars are folded up into one and the same cyclicf-structure F. This f-structure consists of a single element (node) and |T1 ?
T2|+ 7 cyclesof length 1, each one labeled with one of the attributes in {B, L, R, L', R', E, E'} ?
(T1 ?
T2).F thus has the following form.2(4)BLRL'R'EE'cycles for the attributes in T1 ?
T2F must contain cycles for all terminals in T1 ?
T2, so that it imposes no constraints onthe strings that may appear in L(G1) ?
L(G2).The folding into F is accomplished by annotations of G?s start rule whose contribu-tion to a derivation in G is depicted in Figure 2.
As earlier, we include root for later use.Obviously, if (root E) = (root E') holds in the unified f-structures of the string grammars,then the unification of the string grammar f-structures and the structure in Figure 2yields F. Otherwise, their unification results in a structure that only properly subsumesF.
This is because neither (root E E) nor (root E' E) exists in the unified f-structures of thetwo string grammars, and therefore their values in the structure in Figure 2 are notmerged when the structures are unified.
Thus G derives with F exactly the set of stringss?s?
with s?
in L(G1) ?
L(G2).
Hence, this set is empty if and only if L(G1) ?
L(G2) isempty.We now give a rigorous statement and proof of our undecidability theorem.TheoremFor an arbitrary LFG grammar G and an arbitrary f-structure F it is undecidable whether{s | ?G(s, F)} = ?.2 This f-structure may look peculiar in that it does not contain atomic feature values.
However, this is notrelevant to the proof.
To make the f-structure look more ?natural,?
we can, for example, expand G by anannotation (?
D) = V at the start rule and F by a feature D with value V.536Wedekind On the Universal Generation ProblemProofLet G1 = (N1, T1, S1, P1) and G2 = (N2, T2, S2, P2) be two arbitrary context-free gram-mars in Chomsky normal form.
Without loss of generality, we can assume thatN1 ?
N2 = ?.
On the basis of String1(G1) and String2(G2) we construct an LFG grammarG = (N, T, S, P) with N = N1 ?
N2 ?
{S}, S?
N1 ?
N2, and T = T1 ?
T2.
The rule set Pconsists of the rules of String1(G1) and String2(G2) and the following start rule.S ?
S1 S2?
= ?
?
= ?(?
E E) = ?
(?
E' E) = (?
E' E B)(?
E' E) = (?
E' E L)(?
E' E) = (?
E' E R)(?
E' E) = (?
E' E L')(?
E' E) = (?
E' E R')......}annotations (?
E' E) = (?
E' E x)for all x in T1 ?
T2The functional contribution of this start rule to a derivation in G is depicted in Figure 2.The (?
E E) = ?
annotation at S1 introduces the left cycle and the annotations at S2account for the rest.
Now let F be the f-structure in (4) and consider an arbitraryderivation of a terminal string s with f-description FD in G. By construction of G, s musthave the form s1s2, with s1 derived from S1 and s2 derived from S2.
We claim s1 = s2 iffF is the f-structure for FD.
Note first that also G does not contain atomic values.
Thus,FD cannot be unsatisfiable and must have an f-structure.If s1= s2, then FD  (root E)= (root E'), since (root B s1)= (root E) and (root B s2)= (root E')follow from FD.
From (root E)= (root E') and the instantiated annotations of the S rule,we get (root x)= root, for all x?
{B, L, R, L', R'}?
(T1?T2).
With these equations we canthen derive from (root B s1)= (root E) and (root B s2)= (root E') equations root =(root x),for x?
{E, E'}.
Thus F must be the f-structure that we obtain from a minimal modelof FD.Now suppose s1= s2.
Let FD1 and FD2 be the f-descriptions of the string grammars,FD?1 = FD1?
{root = n1}, FD?2 = FD2 ?
{root = n2}, with n1 and n2 instantiating ?
in theannotations at S1 and S2, and FD?= FD?1?
FD?2.
By construction of G, the only termsshared by the deductive closures of FD?1 and FD?2 are the common subterms of (root B s1)and (root B s2).
Thus FD?
(root E)= (root E'), because otherwise FD?1  (root B s?
)= (root E)and FD?2  (root B s?
)= (root E') would imply s?= s1 and s?= s2, as we saw earlier.
Becauseobviously (root E E) and (root E' E) do not occur in any equation derivable from FD?,(root E)= (root E') cannot follow from FD either, and F cannot be the f-structurefor FD.Thus {s | ?G(s, F)}= {s?s?
| s?
?
L(G1)?
L(G2)} and hence {s | ?G(s, F)}= ?
if and onlyif L(G1)?
L(G2) = ?.
Since the emptiness problem for the intersection of context-freelanguages is in general undecidable, the generation problem must be undecidabletoo.As a consequence of this theorem we know that there does not exist a general gen-eration algorithm, at least if cyclic input structures are considered as legitimate inputs.We note that the grammars constructed in this proof are off-line parsable (cf.,e.g., Kaplan and Bresnan 1982; Johnson 1988; Jaeger, Francez, and Wintner 2005).
Off-line parsability is sufficient to guarantee the decidability of the recognition/parsingproblem even for cyclic f-structures.
But Wedekind and Kaplan (2012) have shown thatoff-line parsability is not necessary to guarantee that generation from acyclic structures537Computational Linguistics Volume 40, Number 3is decidable, and the grammars in this proof demonstrate that it is not sufficient forcyclic structures.Off-line parsability typically bounds the size of the c-structures of a string by a func-tion of the length of that string.
This works for parsing because the size of the f-structureis bounded by the size of the c-structure, but it is insufficient for generation because itdoes not constrain the structural correspondence between the c- and f-structure (see alsoDymetman 1991).
A single constraint that guarantees decidability for both parsing andgeneration must not only bound the size of the f-structures for a terminal string by thelength of the string, but it must also ensure, as we have learned from the proof herein,that the determination of the terminal strings for an f-structure can be achieved withfinite control.AcknowledgmentsThe author wishes to thank Ron Kaplanfor his insightful comments and helpfulsuggestions during the preparation of thispaper, and the four anonymous reviewers fortheir valuable feedback on an earlier draft.ReferencesDymetman, Marc.
1991.
Inherently reversiblegrammars, logic programming andcomputability.
In Proceedings of the ACLWorkshop: Reversible Grammar in NaturalLanguage Processing, pages 20?30, Berkeley,CA.Jaeger, Efrat, Nissim Francez, and ShulyWintner.
2005.
Unification grammars andoff-line parsability.
Journal of Logic,Language, and Information, 14(2):199?234.Johnson, Mark.
1988.
Attribute?Value Logicand the Theory of Grammar.
CSLIPublications, Stanford, CA.Kaplan, Ronald M. and Joan Bresnan.
1982.Lexical-Functional Grammar: A formalsystem for grammatical representation.In Joan Bresnan, editor, The MentalRepresentation of Grammatical Relations.
MITPress, Cambridge, MA, pages 173?281.Pollard, Carl and Ivan Sag.
1994.
Head-DrivenPhrase Structure Grammar.
The Universityof Chicago Press, Chicago, IL.Shieber, Stuart M., Hans Uszkoreit,Fernando C. N. Pereira, Jane Robinson,and Mabry Tyson.
1983.
The formalismand implementation of PATR-II.
InBarbara J. Grosz and Mark E. Stickel,editors, Research on Interactive Acquisitionand Use of Knowledge.
SRI Final Report1894.
SRI International, Menlo Park, CA,pages 39?79.Wedekind, Ju?rgen and Ronald M. Kaplan.2012.
LFG generation by grammarspecialization.
Computational Linguistics,38(4):867?915.538
