Proceedings of the NAACL HLT Workshop on Software Engineering, Testing, and Quality Assurance for Natural Language Processing, pages 45?46,Boulder, Colorado, June 2009. c?2009 Association for Computational LinguisticsGrammar Engineering for CCG using Ant and XSLT?Scott Martin, Rajakrishnan Rajkumar, and Michael WhiteOhio State UniversityDepartment of Linguistics{scott,raja,mwhite}@ling.ohio-state.eduOverviewCorpus conversion and grammar extraction havetraditionally been portrayed as tasks that areperformed once and never again revisited (Burkeet al, 2004).
We report the successful imple-mentation of an approach to these tasks thatfacilitates the improvement of grammar engi-neering as an evolving process.
Taking thestandard version of the CCGbank (Hocken-maier and Steedman, 2007) as input, our sys-tem then introduces greater depth of linguis-tic insight by augmenting it with attributesthe original corpus lacks: Propbank roles andhead lexicalization for case-marking preposi-tions (Boxwell and White, 2008), derivationalre-structuring for punctuation analysis (Whiteand Rajkumar, 2008), named entity annotationand lemmatization.
Our implementation ap-plies successive XSLT transforms controlled byApache Ant (http://ant.apache.org/) to anXML translation of this corpus, finally produc-ing an OpenCCG grammar (http://openccg.sourceforge.net/).
This design is beneficialto grammar engineering both because of XSLT?sunique suitability to performing arbitrary trans-formations of XML trees and the fine-grainedcontrol that Ant provides.
The resulting systemenables state-of-the-art BLEU scores for surfacerealization on section 23 of the CCGbank.1 DesignRather than transforming the corpus, it wouldbe simple to introduce several of the corpus aug-?This work was supported in part by NSF grant no.IIS-0812297.mentations that we make (e.g.
punctuation re-structuring) during grammar extraction.
How-ever, machine learning applications (e.g., real-ization ranking) benefit when the corpus andextracted grammar are consistent.
A case inpoint: annotating the corpus with named en-tities, then using n-gram models with words re-placed by their class labels to score realization.Accordingly, our pipeline design starts by gen-erating an XML version of the CCGbank us-ing JavaCC (http://javacc.dev.java.net/)from the original corpus.
Next, conversion andextraction transforms are applied to create aconverted corpus (also in XML) and extractedgrammar (in OpenCCG format).We refactored our original design to separatethe grammar engineering task into several con-figurable processes using Ant tasks.
This sim-plifies process management, speeds experimentiterations, and facilitates the comparison of dif-ferent grammar engineering strategies.2 ImplementationIt seemed natural to implement our pipeline pro-cedure in XSLT since both OpenCCG grammarsand our CCGbank translation are represented inXML.
Aside from its inherent attributes, XSLTrequires no re-compilation as a result of being aninterpreted language.
Also, because both con-version and extraction use a series of transformsin a chain, each required sub-step can be splitinto as many XSLT transforms as desired.Both the conversion and extraction stepswere implemented by extending Ant with cus-tom tasks as configuring Ant tasks requires no45source editing or compilation.
Ant is partic-ularly well-suited to this process because, likeOpenCCG (whose libraries are used in the ex-traction phase), it is written in Java.
Our sys-tem also employs the Ant-provided javacc task,invoking the JavaCC parser to translate theCCGbank to XML.
This approach is preferableto a direct Java implementation because it keepssource code and configuration separate, allowingfor more rapid grammar engineering iterations.Our particular implementation harnessesAnt?s built-in FileSet (for specification ofgroups of corpus files) and FileList (for re-use of series of XSLT transforms) data types.The first of our extension tasks, convert, encap-sulates the conversion process while the secondtask, extract, implements the grammar extrac-tion procedure for a previously-converted cor-pus.3 Experimental ImpactOur conversion process currently supports var-ious experiments by including only specifiedtransforms.
We gain the ability to cre-ate corpora with various combinations of at-tributes, among them punctuation annotation,semantic class information, and named entities(lack of space precludes inclusion of exampleshere; see http://www.ling.ohio-state.edu/~scott/publications/grammareng/).
In ad-dition to extracting grammars, the extractiontask employs a constrained parser to create log-ical forms (LFs) for surface realization and ex-tracts SRILM training data for realization scor-ing.
This task also enables feature extractionfrom LF graphs for training during supertaggingfor realization (Espinosa et al, 2008).Our design supports comprehensive experi-mentation and has helped facilitate recent ef-forts to investigate factors impacting surface re-alization, such as semantic classes and namedentities.
Our initial results reported in (White etal., 2007) record 69.7% single-rooted LFs with aBLEU score of 0.5768.
But current figures standat 95.8% single-rooted LFs and a state-of-theart BLEU score of 0.8506 on section 23 of theCCGbank.
(Fragmentary LFs result when atleast one semantic dependency is missing fromthe LF graph.)
In achieving these results, im-provements in the grammar engineering processhave been at least as important as improvementsin the statistical models.4 Conclusions and Future WorkWe designed and implemented a system that fa-cilitates the process of grammar engineering byseparating conversion and extraction steps intoa pipeline of XSLT transforms.
Our Ant imple-mentation is highly configurable and has posi-tive effects on our grammar engineering efforts,including increased process control and a short-ened testing cycle for different grammar engi-neering approaches.
Future work will focus onincreasing the number of single-rooted LFs andintegrating this system with OpenCCG.References[Boxwell and White2008] Stephen Boxwell andMichael White.
2008.
Projecting Propbank rolesonto the CCGbank.
In Proc.
LREC-08.
[Burke et al2004] Michael Burke, Aoife Cahill,Mairead Mccarthy, Ruth O?Donovan, JosefGenabith, and Andy Way.
2004.
Evaluatingautomatic LFG F-structure annotation for thePenn-II treebank.
Research on Language andComputation, 2:523?547, December.
[Espinosa et al2008] Dominic Espinosa, MichaelWhite, and Dennis Mehay.
2008.
Hypertagging:Supertagging for surface realization with CCG.In Proc.
ACL-08: HLT.
[Hockenmaier and Steedman2007] Julia Hockenmaierand Mark Steedman.
2007.
CCGbank: A Corpusof CCG Derivations and Dependency StructuresExtracted from the Penn Treebank.
Computa-tional Linguistics, 33(3):355?396.
[White and Rajkumar2008] Michael White and Ra-jakrishnan Rajkumar.
2008.
A more preciseanalysis of punctuation for broad-coverage sur-face realization with CCG.
In Proc.
of the Work-shop on Grammar Engineering Across Frame-works (GEAF08).
[White et al2007] Michael White, Rajakrishnan Ra-jkumar, and Scott Martin.
2007.
Towards broadcoverage surface realization with CCG.
In Proc.of the Workshop on Using Corpora for NLG: Lan-guage Generation and Machine Translation (UC-NLG+MT).46
