Proceedings of the 2009 Named Entities Workshop, ACL-IJCNLP 2009, pages 48?51,Suntec, Singapore, 7 August 2009. c?2009 ACL and AFNLPTesting and Performance Evaluation of Machine Transliteration Systemfor Tamil LanguageKommaluri Vijayanand1, 2?, Inampudi Ramesh Babu1, 3, Poonguzhali Sandiran1, 2(1) Department of Computer Science and Engineering,(2) Pondicherry University, Puducherry - 605 014, India.
(3) Acharya Nagarjuna University, Nagarjuna Nagar - 522 510, India.kvixs@yahoo.co.in, rinampudi@yahoo.com, poon 8724@yahoo.comAbstractMachine Translation (MT) is a science fic-tion that was converted into reality withthe enormous contributions from the MTresearch community.
We cannot expectany text without Named Entities (NE).Such NEs are crucial in deciding the qua-lity of MT.
NEs are to be recognized fromthe text and transliterated accordingly intothe target language in order to ensure thequality of MT.
In the present paper wepresent various technical issues encounte-red during handling the shared task of NEtransliteration for Tamil.1 IntroductionOut of several underlying issues relating to Ma-chine Translation (MT) against the dependenceon the human editors, Named Entity Recognition(NER) play a pivotal role.
When a MT system isdeveloped and executed, majority of the initial testcases are bound to fail, when the system attemptto translate the names, acronyms etc.
Special at-tention is required to handle such cases where inNER and transliteration task play a pivot role (Vi-jayanand and Subramanian, 2006).We had participated in the shared task towardsthe languages English to Tamil, English to Hindiand English to Kannada after receiving the refe-rence corpora which consists of 1000 names foreach language pair (Li et al, 2009b).
Though wecommitted responsibility for the three languagepairs viz., English to Tamil, English to Kannadaand English to Hindi, we mainly concentrated onthe English to Tamil language pair.
The Tamil Ma-chine Transliteration System shall be available fordemonstration during the workshop.?
?Research Scholar at Acharya Nagarjuna University, In-dia and Visiting Scholar of Universite?
Joseph Fourier (Gre-noble 1), Grenoble, France.The present transliteration system is implemen-ted using JDK 1.6.0 for transliterating the NamedEntities in Tamil language from the source namesin English.
The character combination in Englishsuch as A, Aa, I, ee, u, oo, ai, o, ou, forms vo-wels in Tamil.
Similarly the characters k, ng, ch, t,etc., form consonants and the characters ka, nga,cha etc., form compound characters.
One singlecharacter in English produce different pronuncia-tions and for each pronunciation, there exists a se-parate character.
For example in the words Ma-dura and Ramya the sound of a is different whena is suffixed with r and y.
Similarly, the cha-racter n has different pronunciations dependingupon the suffix.
For example in the words San-chit, Pannu, Nandini, Jahangir the character n hasdifferent pronunciations depending upon the suf-fix.
We need to identify and consider these crite-ria when we transliterate the words from the lan-guages English to Tamil.
Thus the present systemtakes into account all such cases and generate thepossible transliterations for the data given by theshared task (Li et al, 2009a).The paper is organized in such a way that, weenumerate various rules that are formulated anddeployed in favor of segmentation are explainedwith suitable examples in section 2.
The technicaldetails regarding the system design is presented inthe section 3.
The results generated by the systemand the evaluation of the transliterations that arecarried out using different kinds of data are explai-ned in the section 4, followed by the section 5 thatconcludes the papers with the overall remarks andfuture work.2 Segmentation RulesEvery word is a combination of characters andtransforms its sound based on the characters thatsurrounds it as described in the previous section.During transliteration it is quite important to iden-tify the break points with in the word to pronounce48the given word correctly.
Towards enforcing suchconstraint we had devised and employed variousrules towards segmentation based on the phoneticconversions.
They are enumerated as follows :1.
If the second index to the current index of theword is a, e, I or u, then it is considered to beone individual segment.2.
If the second index to the current index of theword is h and the third index to the currentindex of the word is a, e, I, o or u, then it isconsidered as one segment.3.
If the second and third index to the currentindex of the word is a, e, I, o or u and if it issame character i.e., aa,ee, oo, then it is consi-dered as one segment.4.
If the second index to the current index of theword is a, o and the third index to the currentindex of the word is e or u, then it is conside-red as one segment.5.
If the second and third index to the currentindex of the word does not satisfy any of theabove four conditions then the current indexof the word is considered to be as one seg-ment.Based on these rules the partition algorithm wassketched and implemented in favor of partitioningthe word.
The partitioning algorithm is appliedonly for the named entities and explained with thefollowing example.Let us consider a word Chandrachur, thepresent system navigate through five steps for seg-menting this word as listed below :1.
The word is fragmented as Cha | ndrachurInitially the system parse from the initial cha-racter c and checks the second index.
It re-cognizes that the second index is h. Then itreads the third index according to the rulenumber 2.
It then recognizes that the third in-dex is a.
So the system partitions up to thatthird index and consider it as one segment.2.
Further segmentation : Cha | n | drachurNow the system starts from the fourth indexand consider that index as the current index.It continues checking the fifth index.
As itdoes not satisfy any of the rules, it partitionsthe fourth index from the source word andconsider it as one segment.3.
Cha | n | d | rachurIn the third step checking starts from the fifthindex and now it is considered to be the cur-rent index.
Then it checks the sixth index.Since, it does not satisfy any of the rules,the system partitions the fifth index from thesource name and it is considered as one seg-ment.4.
Cha | n | d | ra | churNow the system starts from the sixth indexand consider this to be the current index.
Itchecks the seventh index, after recognizingthe presence of a, then it checks whether theeighth index is a, e or u, as per the rule 3 andrule 4.
As it does not satisfy with those rules,the system partitions from sixth index to se-venth index as one segment.5.
Cha | n | d | ra | chu | rFinally checking starts from the eighth indexwhich is treated as the current index and thesystem checks the ninth index.
The ninth in-dex consists of h. Thus, checks the tenth in-dex for the presence of a, e, I, o or u accor-ding to the rule 2 and satisfies with that rule.Thus, the system partitions from eighth indexto tenth index as one segment and the ele-venth index become one segment.Similarly, for the word Manikkam the systemapplies the partitioning algorithm and segment theword as shown below :1.
Ma | nikkam2.
Ma | ni | kkam3.
Ma | ni | k | kam4.
Ma | ni | k | ka | m3 The System DesignThe system was designed in such a way thatit produces four to six transliterations for a givenword in English.
We stored all the possible com-binations of characters in English and its corres-ponding Tamil characters in a database and crea-ted an interface to read the test file.
The systemis facilitated to browse the test file using the filehandling technique which was designed applyingthe logical concepts.
Consonants in English whencombined with vowels in English to form com-pound words in Tamil.
Compound words havemany forms for a single combination.The present system extract the source namesand store them in an array list.
These source names49are retrieved from an array list sequentially andstored in a string variable for further processing.The value of the string is parsed character wiseand check for the existence of a vowel or h, in thenext two positions to its index i.e., for each cha-racter the next two characters are checked, if thereexists vowels or h, then these characters are extrac-ted up to that index and stored in another stringvariable.
Other wise only that variable is storedand compared with the database that contain Ta-mil characters, for each combination of charactersthat are present in English.
Thereafter each indexin an array list of each transliteration will be com-bined with each index in another array list of trans-literated letter combination, stored in another va-riable.
This process will continue until the systemencounter the end of each array list.
After gettingall the combinations, these combinations are sto-red in an array list and it is written to the file.It is to be noted that only one source name isassigned to the string variable at a time.
After get-ting the target name of that source name, the nextsource name is retrieved from an array list.
Af-ter retrieving the source name it is passed to thenext module for segmentation.
The segments for-med are stored in an array list.
Then these targetcharacters for each segment is retrieved from thedatabase and stored in a separate list.
There afterthe values in an array list are merged appropriatelyand stored in an array list.4 Results and EvaluationThis section describes briefly about the resultsand evaluation conducted and present the results.We had employed various techniques and algo-rithms as explained in previous sections, to selectthe appropriate transliterated word that matchesthe source name from the n-best candidate listusing six metrics.4.1 ResultsThe result file consists of source name with itsID and the ranked list of target names.
The targetnames are generated along with the source names,after being processed by the system.
The sourcenames are the names given in the test file.
Thetarget names are the names that are generated bythe system.
The target names are ranked accor-ding to their ID?s.
The target names are Unicodecharacters in Tamil.
After applying various tech-niques we produce the result file.
It is worth stat-ting that the result file is generated in the XMLformat using UTF-8 encoding schema.The present system transliterates for 1000source names and generates up to six best candi-date lists (Target names).
We conducted testing forthe given data towards transliterations.
The firsttransliteration present in the four best candidatelists are considered to be the correct hit.
The eva-luation is carried out using Python.
These six me-trics are implemented in python.
The metrics areas follows :1.
Word Accuracy in Top-1 (ACC)2.
Mean F-Score3.
Mean Reciprocal Rank (MRR)4.
MAP ref5.
MAP 106.
MAP sysMAP refers to the Mean Average Precision.
Py-thon is preferred because it is an excellent pro-gramming language, easy to understand, dynamicand truly object oriented.4.2 EvaluationThe Result file and the Test file in XML formatand the python script developed with six metricsreads the above mentioned files.
Execution of thescript requires Python interpreter.
The Result fileis the one generated by the Transliteration Systemand the test file is created manually with a singletransliteration for each source name and testing isconducted.
As part of the shared task (Kumaranand Kellner, 2007) evaluation was done by run-ning the system and thus 6 metrics are displayedas output, with each metric given the value 0 or 1.These metrics declare the performance of the sys-tem.
The max-candidates argument in the script isassigned 10 (max-candidates=10).
It is also chan-ged according to target names provided.
The out-put of the evaluation of our Transliteration Systemare as follows :1.
Word Accuracy in Top-1 (ACC) : The ACCof our system is 0.403974,2.
Mean F-Score : The Mean F-Score of oursystem is 0.865840.3.
MRR = The Mean Reciprocal rank of oursystem is 0.449227.4.
MAP ref : The MAP ref of the system is0.390545.505.
MAP 10 : The MAP 10 value of the systemis 0.240066.6.
MAP sys : The MAP sys of the system is0.369840.The output that was generated by our system ispresented in appendix.5 ConclusionsAfter working with the experiment that was car-ried out for evaluating the metrics, we concludethat the accuracy in top-1 score of our system is0.061.
The reason could be that the accurate trans-literation is not generated in the top scored transli-teration.
We could improve the performance of thepresent system by involving all the possible trans-literations.
With the initial test results are very lowwhen compared to Urdu to Hindi transliterationsystem (M. G. et al, 2008), yields 97.12% andHindi to Urdu delivers 97.88% of accuracy andNER system favor of the Bengali language whichhad demonstrated the evaluation results with aprecision of 80.12% (Ekbal and Bandyopadhyay,2008).After participating in the shared task we hadtested the transliteration system thoroughly byapplying various techniques as explained in thepresent paper.
So far we had carried out the transli-teration for six named entity candidates.
In futurewe would like to extend the task for translitera-tion candidates unto twenty.
Thus the named entitytransliteration task that is being carried out wouldbe a solution for the long standing research pro-blem in handling the named entities that is quitecommon in speech and text machine translation.AcknowledgmentsI am thankful to the anonymous referees fortheir valuable advices towards improving this pa-per.
I am thankful to my students Kanickairaj Ca-roline, Dhivya Moorthy and Kothandapani Selvifor rendering their service and cooperation in ful-filling this task.
I extend my gratitude to all theelders for their support and encouragement.ReferencesAsif Ekbal and Sivaji Bandyopadhyay.
2008.
Namedentity recognition using support vector machine : Alanguage independent approach.
International Jour-nal of Computer Systems Science and Engineering,4(2) :155?170.FIG.
1 ?
Screenshot of Evaluation Result.A.
Kumaran and Tobias Kellner.
2007.
A generic fra-mework for machine transliteration.
In 30th AnnualACM SIGIR Conference, Amsterdam.Hauzhou Li, A Kumaran, Vladimir Pervouchine, andMin Zhang.
2009a.
Report on news 2009 ma-chine transliteration shared task.
In Proceedingsof the ACL-IJCNLP 2009 Named Entities Workshop(NEWS 2009), Singapore.Hauzhou Li, A Kumaran, Min Zhang, and VladimirPervouchine.
2009b.
White paper of news 2009machine transliteration shared task.
In Proceedingsof the ACL-IJCNLP 2009 Named Entities Workshop(NEWS 2009), Singapore.Abbas Malik M. G., Christian Boitet, and PushpakBhattacharyya.
2008.
Hindi urdu machine translite-ration using finite state transducers.
In Proceedingsof the 22nd International Conference on Computa-tional Linguistics (COLING 2008), Manchester.Kommaluri Vijayanand and Ramalingam Subrama-nian.
2006.
Anuvadini : An automatic example-based machine translation system for bengali intoassamese and oriya.
In Proceedings of the First Na-tional Symposium on Modeling and Shallow Parsingof Indian Languages (MSPIL-06), IIT Bombay, In-dia.51
