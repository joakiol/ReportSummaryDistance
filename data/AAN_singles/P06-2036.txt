Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 279?286,Sydney, July 2006. c?2006 Association for Computational LinguisticsFactoring Synchronous Grammars By SortingDaniel GildeaComputer Science Dept.University of RochesterRochester, NY 14627Giorgio SattaDept.
of Information Eng?gUniversity of PaduaI-35131 Padua, ItalyHao ZhangComputer Science Dept.University of RochesterRochester, NY 14627AbstractSynchronous Context-Free Grammars(SCFGs) have been successfully exploitedas translation models in machine trans-lation applications.
When parsing withan SCFG, computational complexitygrows exponentially with the length of therules, in the worst case.
In this paper weexamine the problem of factorizing eachrule of an input SCFG to a generativelyequivalent set of rules, each having thesmallest possible length.
Our algorithmworks in time O(n log n), for each ruleof length n. This improves upon previousresults and solves an open problem aboutrecognizing permutations that can befactored.1 IntroductionSynchronous Context-Free Grammars (SCFGs)are a generalization of the Context-Free Gram-mar (CFG) formalism to simultaneously producestrings in two languages.
SCFGs have a widerange of applications, including machine transla-tion, word and phrase alignments, and automaticdictionary construction.
Variations of SCFGs goback to Aho and Ullman (1972)?s Syntax-DirectedTranslation Schemata, but also include the In-version Transduction Grammars in Wu (1997),which restrict grammar rules to be binary, the syn-chronous grammars in Chiang (2005), which useonly a single nonterminal symbol, and the Multi-text Grammars in Melamed (2003), which allowindependent rewriting, as well as other tree-basedmodels such as Yamada and Knight (2001) andGalley et al (2004).When viewed as a rewriting system, an SCFGgenerates a set of string pairs, representing sometranslation relation.
We are concerned here withthe time complexity of parsing such a pair, accord-ing to the grammar.
Assume then a pair with eachstring having a maximum length of N , and con-sider an SCFG G of size |G|, with a bound of nnonterminals in the right-hand side of each rule ina single dimension, which we call below the rankof G. As an upper bound, parsing can be carriedout in time O(|G|Nn+4) by a dynamic program-ming algorithm maintaining continuous spans inone dimension.
As a lower bound, parsing strate-gies with discontinuous spans in both dimensionscan take time ?
(|G|N c?n) for unfriendly permu-tations (Satta and Peserico, 2005).
A natural ques-tion to ask then is: What if we could reduce therank of G, preserving the generated translation?As in the case of CFGs, one way of doing thiswould be to factorize each single rule into severalrules of rank strictly smaller than n. It is not diffi-cult to see that this would result in a new grammarof size at most 2 ?
|G|.
In the time complexitiesreported above, we see that such a size increasewould be more than compensated by the reductionin the degree of the polynomial in N .
We thusconclude that a reduction in the rank of an SCFGwould result in more efficient parsing algorithms,for most common parsing strategies.In the general case, normal forms with boundedrank are not admitted by SCFGs, as shown in (Ahoand Ullman, 1972).
Nonetheless, an SCFG with arank of n may not necessarily meet the worst caseof Aho and Ullman (1972).
It is then reasonableto ask if our SCFG G can be factorized, and whatis the smallest rank k < n that can be obtainedin this way.
This paper answers these two ques-tions, by providing an algorithm that factorizes therules of an input SCFG, resulting in a new, genera-tively equivalent, SCFG with rank k as low as pos-sible.
The algorithm works in time O(n log n) foreach rule, regardless of the rank k of the factorizedrules.
As discussed above, in this way we achievean improvement of the parsing time for SCFGs,obtaining an upper bound of O(|G|N k+4) by us-ing a parsing strategy that maintains continuous2791,21,22,12 11,23 43,1,4,27 5 8 64,1,3,5,27 1 2,4,1,34 6 3 58 2Figure 1: Two permutation trees.
The permuta-tions associated with the leaves can be producedby composing the permutations at the internalnodes.spans in one dimension.Previous work on this problem has been pre-sented in Zhang et al (2006), where a method isprovided for casting an SCFG to a form with rankk = 2.
If generalized to any value of k, that algo-rithm would run in time O(n2).
We thus improveexisting factorization methods by almost a factorof n. We also solve an open problem mentionedby Albert et al (2003), who pose the question ofwhether irreducible, or simple, permutations canbe recognized in time less than ?
(n2).2 Synchronous CFGs and permutationtreesWe begin by describing the synchronous CFG for-malism, which is more rigorously defined by Ahoand Ullman (1972) and Satta and Peserico (2005).Let us consider strings defined over some set ofnonterminal and terminal symbols, as defined forCFGs.
We say that two such strings are syn-chronous if some bijective relation is given be-tween the occurrences of the nonterminals in thetwo strings.
A synchronous context-free gram-mar (SCFG) is defined as a CFG, with the dif-ference that it uses synchronous rules of the form[A1 ?
?1, A2 ?
?2], with A1, A2 nonterminalsand ?1, ?2 synchronous strings.
We can use pro-duction [A1 ?
?1, A2 ?
?2] to rewrite any syn-chronous strings [?11A1?12, ?21A2?22] into thesynchronous strings [?11?1?12, ?21?2?22], un-der the condition that the indicated occurrencesof A1 and A2 be related by the bijection asso-ciated with the source synchronous strings.
Fur-thermore, the bijective relation associated with thetarget synchronous strings is obtained by compos-ing the relation associated with the source syn-chronous strings and the relation associated withsynchronous pair [?1, ?2], in the most obviousway.As in standard constructions that reduce therank of a CFG, in this paper we focus on eachsingle synchronous rule and factorize it into syn-chronous rules of lower rank.
If we view the bijec-tive relation associated with a synchronous rule asa permutation, we can further reduce our factoriza-tion problem to the problem of factorizing a per-mutation of arity n into the composition of severalpermutations of arity k < n. Such factorizationcan be represented as a tree of composed permuta-tions, called in what follows a permutation tree.A permutation tree can be converted into a set ofk-ary SCFG rules equivalent to the input rule.
Forexample, the input rule:[ X ?
A(1)B(2)C(3)D(4)E(5)F (6)G(7)H(8),X ?
B(2)A(1)C(3)D(4)G(7)E(5)H(8)F (6) ]yields the permutation tree of Figure 1(left).
In-troducing a new grammar nonterminal Xi for eachinternal node of the tree yields an equivalent set ofsmaller rules:[ X ?
X(1)1 X(2)2 , X ?
X(1)1 X(2)2 ][ X1 ?
X(1)3 X(2)4 , X1 ?
X(1)3 X(2)4 ][ X3 ?
A(1)B(2), X3 ?
B(2)A(1) ][ X4 ?
C(1)D(2), X4 ?
C(1)D(2) ][ X2 ?
E(1)F (2)G(3)H(4),X2 ?
G(3)E(1)H(4)F (2) ]In the case of stochastic grammars, the rule cor-responding to the root of the permutation tree isassigned the original rule?s probability, while allother rules, associated with new grammar nonter-minals, are assigned probability 1.
We processeach rule of an input SCFG independently, pro-ducing an equivalent grammar with the smallestpossible arity.3 Factorization AlgorithmIn this section we specify and discuss our factor-ization algorithm.
The algorithm takes as input apermutation defined on the set {1, ?
?
?
, n}, repre-senting a rule of some SCFG, and provides a per-mutation tree of arity k ?
n for that permutation,with k as small as possible.Permutation trees covering a given input permu-tation are unambiguous with the exception of se-quences of binary rules of the same type (eitherinverted or straight) (Albert et al, 2003).
Thus,when factorizing a permutation into a permutation280tree, it is safe to greedily reduce a subsequenceinto a new subtree as soon as a subsequence isfound which represents a continuous span in bothdimensions of the permutation matrix1 associatedwith the input permutation.
For space reasons, weomit the proof, but emphasize that any greedy re-duction turns out to be either necessary, or equiv-alent to the other alternatives.Any sequences of binary rules can be rear-ranged into a normalized form (e.g.
always left-branching) as a postprocessing step, if desired.The top-level structure of the algorithm exploitsa divide-and-conquer approach, and is the same asthat of the well-known mergesort algorithm (Cor-men et al, 1990).
We work on subsequences ofthe original permutation, and ?merge?
neighbor-ing subsequences into successively longer subse-quences, combining two subsequences of length2i into a subsequence of length 2i+1 until we havebuilt one subsequence spanning the entire permu-tation.
If each combination of subsequences canbe performed in linear time, then the entire permu-tation can be processed in time O(n log n).
As inthe case of mergesort, this is an application of theso-called master theorem (Cormen et al, 1990).As the algorithm operates, we will maintain theinvariant that we must have built all subtrees ofthe target permutation tree that are entirely withina given subsequence that has been processed.
Thisis analogous to the invariant in mergesort that allprocessed subsequences are in sorted order.
Whenwe combine two subsequences, we need only buildnodes in the tree that cover parts of both sub-sequences, but are entirely within the combinedsubsequence.
Thus, we are looking for subtreesthat span the midpoint of the combined subse-quence, but have left and right boundaries withinthe boundaries of the combined subsequence.
Inwhat follows, this midpoint is called the splitpoint.From this invariant, we will be guaranteed tohave a complete, correct permutation tree at theend of last subsequence combination.
An exampleof the operation of the general algorithm is shownin Figure 2.
The top-level structure of the algo-rithm is presented in function KARIZE of Figure 3.There may be more than one reduction neces-sary spanning a given split point when combin-ing two subsequences.
Function MERGE in Fig-1A permutation matrix is a way of representing a permuta-tion, and is obtained by rearranging the row (or the columns)of an identity matrix, according to the permutation itself.2 1 3 4 7 5 8 62,12 11,23 4 7 5 8 61,22,12 11,23 43,1,4,27 5 8 61,21,22,12 11,23 43,1,4,27 5 8 6Figure 2: Recursive combination of permutationtrees.
Top row, the input permutation.
Second row,after combination into sequences of length two, bi-nary nodes have been built where possible.
Thirdrow, after combination into sequences of lengthfour; bottom row, the entire output tree.ure 3 initializes certain data structures describedbelow, and then checks for reductions repeatedlyuntil no further reduction is possible.
It looks firstfor the smallest reduction crossing the split pointof the subsequences being combined.
If SCAN,described below, finds a valid reduction, it is com-mitted by calling REDUCE.
If a reduction is found,we look for further reductions crossing either theleft or right boundary of the new reduction, repeat-ing until no further reductions are possible.
Be-cause we only need to find reductions spanningthe original split point at a given combination step,this process is guaranteed to find all reductionsneeded.We now turn to the problem of identifying aspecific reduction to be made across a split point,which involves identifying the reduction?s left andright boundaries.
Given a subsequence and can-didate left and right boundaries for that subse-quence, the validity of making a reduction overthis span can be tested by verifying whether thespan constitutes a permuted sequence, that is,a permutation of a contiguous sequence of inte-gers.
Since the starting permutation is definedon a set {1, 2, ?
?
?
, n}, we have no repeated in-tegers in our subsequences, and the above condi-281function KARIZE(pi).
initialize with identity mappingh?
hmin?
hmax?
(0..|pi|);.
mergesort corefor size?
1; size ?
|pi|; size?
size * 2 dofor min?
0;min < |pi|-size+1;min?
min + 2 * size dodiv = min + size - 1;max?
min(|pi|, min + 2*size - 1);MERGE(min, div, max);function MERGE(min, div, max).
initialize hsort h[min..max] according to pi[i];sort hmin[min..max] according to pi[i];sort hmax[min..max] according to pi[i];.
merging sorted list takes linear time.
initialize vfor i?
min; i ?
max; i?
i + 1 dov [ h[i] ]?
i;.
check if start of new reduced blockif i = min orhmin[i] 6= hmin[i-1] thenvmin?
i;vmin[ h[i] ]?
vmin;for i?
max; i ?
min; i?
i - 1 do.
check if start of new reduced blockif i = max orhmax[i] 6= hmax[i+1] thenvmax?
i ;vmax[ h[i] ]?
vmax;.
look for reductionsif SCAN(div) thenREDUCE(scanned reduction);while SCAN(left) or SCAN(right) doREDUCE(smaller reduction);function REDUCE(left, right, bot, top)for i?
bot..top dohmin[i]?
left;hmax[i]?
right;for i?
left..right dovmin[i]?
bot;vmax[i]?
top;print ?reduce:?
left..right ;Figure 3: KARIZE: Top level of algorithm, iden-tical to that of mergesort.
MERGE: combines twosubsequences of size 2i into new subsequence ofsize 2i+1.
REDUCE: commits reduction by updat-ing min and max arrays.tion can be tested by scanning the span in ques-tion, finding the minimum and maximum integersin the span, and checking whether their differenceis equal to the length of the span minus one.
Be-low we call this condition the reduction test.
Asan example of the reduction test, consider the sub-sequence (7, 5, 8, 6), and take the last three ele-ments, (5, 8, 6), as a candidate span.
We see that5 and 8 are the minimum and maximum integersin the corresponding span, respectively.
We thencompute 8 ?
5 = 3, while the length of the spanminus one is 2, implying that no reduction is possi-ble.
However, examining the entire subsequence,the minimum is 5 and the maximum is 8, and8 ?
5 = 3, which is the length of the span minusone.
We therefore conclude that we can reducethat span by means of some permutation, that is,parse the span by means of a node in the permuta-tion tree.
This reduction constitutes the 4-ary nodein the permutation tree of Figure 2.A trivial implementation of the reduction testwould be to tests all combinations of left and rightboundaries for the new reduction.
Unfortunately,this would take time ?
(n2) for a single subse-quence combination step, whereas to achieve theoverall O(n log n) complexity we need linear timefor each combination step.It turns out that the boundaries of the next re-duction, covering a given split point, can be com-puted in linear time with the technique shown infunction SCAN of Figure 5.
We start with left andright candidate boundaries at the two points imme-diately to the left and right of the split point, andthen repeatedly check whether the current left andright boundaries identify a permuted sequence byapplying the reduction test, and move the left andright boundaries outward as necessary, as soon as?missing?
integers are identified outside the cur-rent boundaries, as explained below.
We will showthat, as we move outward, the number of possibleconfigurations achieved for the positions of the leftand the right boundaries is linearly bounded in thelength of the combined subsequence (as opposedto quadratically bounded).In order to efficiently implement the above idea,we will in fact maintain four boundaries for thecandidate reduction, which can be visualized asthe left, right, top and bottom boundaries in thepermutation matrix.
No explicit representationof the permutation matrix itself is constructed, asthat would require quadratic time.
Rather, we2827 1 4 6 3 5 8 2pi 472113244361638755886527vpihFigure 4: Permutation matrix for input permuta-tion pi (left) and within-subsequence permutationv (right) for subsequences of size four.maintain two arrays: h, which maps from verticalto horizontal positions within the current subse-quence, and v which maps from horizontal to ver-tical positions.
These arrays represent the within-subsequence permutation obtained by sorting theelements of each subsequence according to theinput permutation, while keeping each elementwithin its block, as shown in Figure 4.Within each subsequence, we alternate betweenscanning horizontally from left to right, possiblyextending the top and bottom boundaries (Figure 5lines 9 to 14), and scanning vertically from bottomto top, possibly extending the left and right bound-aries (lines 20 to 26).
Each extension is forcedwhen, looking at the within-subsequence permuta-tion, we find that some element is within the cur-rent boundaries in one dimension but outside theboundaries in the other.
If the distance betweenvertical boundaries is larger in the input permu-tation than in the subsequence permutation, nec-essary elements are missing from the current sub-sequence and no reduction is possible at this step(line 18).
When all necessary elements are presentin the current subsequence and no further exten-sions are necessary to the boundaries (line 30), wehave satisfied the reduction test on the input per-mutation, and make a reduction.The trick used to keep the iterative scanning lin-ear is that we skip the subsequence scanned on theprevious iteration on each scan, in both the hori-zontal and vertical directions.
Lines 13 and 25 ofFigure 5 perform this skip by advancing the x and ycounters past previously scanned regions.
Consid-ering the horizontal scan of lines 9 to 14, in a giveniteration of the while loop, we scan only the itemsbetween newleft and left and between right andnewright.
On the next iteration of the while loop,the newleft boundary has moved further to the left,1: function SCAN (div)2: left???
;3: right???
;4: newleft?
div;5: newright?
div + 1 ;6: newtop???
;7: newbot??
;8: while 1 do.
horizontal scan9: for x?
newleft; x ?
newright ; do10: newtop?
max(newtop, vmax[x]);11: newbot?
min(newbot, vmin[x]);.
skip to end of reduced block12: x?
hmax[vmin[x]] + 1;.
skip section scanned on last iter13: if x = left then14: x?
right + 1;15: right?
newright;16: left?
newleft;.
the reduction test17: if newtop - newbot <18: pi[h[newtop]] - pi[h[newbot]] then19: return (0);.
vertical scan20: for y?
newbot; y ?
newtop ; do21: newright?22: max(newright, hmax[y]);23: newleft?
min(newleft, hmin[y]);.
skip to end of reduced block24: y?
vmax[hmin[y]] + 1;.
skip section scanned on last iter25: if y = bot then26: y?
top + 1;27: top?
newtop;28: bot?
newbot;.
if no change to boundaries, reduce29: if newright = right30: and newleft = left then31: return (1, left, right, bot, top);Figure 5: Linear time function to check for a sin-gle reduction at split point div.283while the variable left takes the previous value ofnewleft, ensuring that the items scanned on this it-eration are distinct from those already processed.Similarly, on the right edge we scan new items,between right and newright.
The same analysisapplies to the vertical scan.
Because each item inthe permutation is scanned only once in the verti-cal direction and once in the horizontal direction,the entire call to SCAN takes linear time, regard-less of the number of iterations of the while loopthat are required.We must further show that each call to MERGEtakes only linear time, despite that fact that itmay involve many calls to SCAN.
We accom-plish this by introducing a second type of skippingin the scans, which advances past any previouslyreduced block in a single step.
In order to skippast previous reductions, we maintain (in func-tion REDUCE) auxiliary arrays with the minimumand maximum positions of the largest block eachpoint has been reduced to, in both the horizontaland vertical dimensions.
We use these data struc-tures (hmin, hmax, vmin, vmax) when advancing tothe next position of the scan in lines 12 and 24 ofFigure 5.
Because each call to SCAN skips itemsscanned by previous calls, each item is scannedat most twice across an entire call to MERGE,once when scanning across a new reduction?s leftboundary and once when scanning across the rightboundary, guaranteeing that MERGE completes inlinear time.4 An ExampleIn this section we examine the operation of thealgorithm on a permutation of length eight, re-sulting in the permutation tree of Figure 1(right).We will build up our analysis of the permutationby starting with individual items of the input per-mutation and building up subsequences of length2, 4, and finally 8.
In our example permutation,(7, 1, 4, 6, 3, 5, 8, 2), no reductions can be madeuntil the final combination step, in which one per-mutation of size 4 is used, and one of size 5.We begin with the input permutation along thebottom of Figure 6a.
We represent the interme-diate data structures h, hmin, and hmax along thevertical axis of the figure; these three arrays are allinitialized to be the sequence (1, 2, ?
?
?
, 8).Figure 6b shows the combination of individualitems into subsequences of length two.
Each newsubsequence of the h array is sorted according toa)71111111222222433333364444443555555566666687777772888888pivvminvmaxhhminhmax171212343464535656787828vpihb)72222221111111433333364444443555555566666688888882777777pivvminvmaxhhminhmax272111343464535656888727vpihc)74442221111333422244463331113666888577755588886662555777pivvminvmaxhhminhmax472113244361638755886527vpihFigure 6: Steps in an example computation,with input permutation pi on left and within-subsequence permutation described by v array onright.
Panel (a) shows initial blocks of unit size,(b) shows combination of unit blocks into blocksof size two, and (c) size two into size four.
Noreductions are possible in these stages; examplecontinued in next figure.284a)77772221111888444455566663333333666555544488881112222777pivvminvmaxhhminhmax b)77772221111888443653666363363336636553643688881112222777pivvminvmaxhhminhmaxLeft and right boundaries are initializedto be adjacent to horizontal split point.Vertical scan shows left and right bound-aries must be extended.
Permutation ofsize four is reduced.c)77772221111888443653666363363336636553643688881112222777pivvminvmaxhhminhmax d)77772221111888443653666363363336636553643688881112222777pivvminvmaxhhminhmaxSearch for next reduction: left and rightboundaries initialized to be adjacent toleft edge of previous reduction.Vertical scan shows right boundary mustbe extended.e)77772221111888443653666363363336636553643688881112222777pivvminvmaxhhminhmax f)77182181118818441851866183183318618551841888181182218718pivvminvmaxhhminhmaxHorizontal scan shows top boundary mustbe extended.Vertical scan shows left boundary mustbe extended.
Permutation of size five isreduced.Figure 7: Steps in scanning for final combination of subsequences, where v = pi.
Area within currentleft, right, top and bottom boundaries is shaded; darker shading indicates a reduction.
In each scan, thespan scanned in the previous panel is skipped over.285the vertical position of the dots in the correspond-ing columns.
Thus, because pi[7] = 8 > pi[8] = 2,we swap 7 and 8 in the h array.
The algorithmchecks whether any reductions can be made at thisstep by computing the difference between the in-tegers on each side of each split point.
Becausenone of the pairs of integers in are consecutive, noreductions are made at this step.Figure 6c shows the combination the pairsinto subsequences of length four.
The two splitpoints to be examined are between the second andthird position, and the sixth and seventh position.Again, no reductions are possible.Finally we combine the two subsequences oflength four to complete the analysis of the entirepermutation.
The split point is between the fourthand fifth positions of the input permutation, andin the first horizontal scan of these two positions,we see that pi[4] = 6 and pi[5] = 3, meaning ourtop boundary will be 6 and our bottom boundary3, shown in Figure 7a.
Scanning vertically fromposition 3 to 6, we see horizontal positions 5, 3,6, and 4, giving the minimum, 3, as the new leftboundary and the maximum, 6, as the new rightboundary, shown in Figure 7b.
We now performanother horizontal scan starting at position 3, butthen jumping directly to position 6, as horizontalpositions 4 and 5 were scanned previously.
Af-ter this scan, the minimum vertical position seenremains 3, and the maximum vertical position isstill 6.
At this point, because we have the sameboundaries as on the previous scan, we can stopand verify whether the region determined by ourcurrent boundaries has the same length in the ver-tical and horizontal dimensions.
Both dimensionshave length four, meaning that we have found asubsequence that is continuous in both dimensionsand can safely be reduced, as shown in Figure 6d.After making this reduction, we update the hminarray to have all 3?s for the newly reduced span,and update hmax to have all sixes.
We then checkwhether further reductions are possible coveringthis split point.
We repeat the process of scan-ning horizontally and vertically in Figure 7c-f,this time skipping the span just reduced.
One fur-ther reduction is possible, covering the entire inputpermutation, as shown in Figure 7f.5 ConclusionThe algorithm above not only identifies whethera permutation can be factored into a composi-tion of permutations, but also returns the factor-ization that minimizes the largest rule size, in timeO(n log n).
The factored SCFG with rules of sizeat most k can be used to synchronously parsein time O(Nk+4) by dynamic programming withcontinuous spans in one dimension.As mentioned in the introduction, the optimalparsing strategy for SCFG rules with a givenpermutation may involve dynamic programmingstates with discontinuous spans in both dimen-sions.
Whether these optimal parsing strategiescan be found efficiently remains an interestingopen problem.Acknowledgments This work was partially sup-ported by NSF ITR IIS-09325646 and NSF ITRIIS-0428020.ReferencesAlbert V. Aho and Jeffery D. Ullman.
1972.
TheTheory of Parsing, Translation, and Compiling, vol-ume 1.
Prentice-Hall, Englewood Cliffs, NJ.M.
H. Albert, M. D. Atkinson, and M. Klazar.
2003.The enumeration of simple permutations.
Journalof Integer Sequences, 6(03.4.4):18 pages.David Chiang.
2005.
A hierarchical phrase-basedmodel for statistical machine translation.
In Pro-ceedings of ACL-05, pages 263?270.Thomas H. Cormen, Charles E. Leiserson, andRonald L. Rivest.
1990.
Introduction to algorithms.MIT Press, Cambridge, MA.Michel Galley, Mark Hopkins, Kevin Knight, andDaniel Marcu.
2004.
What?s in a translation rule?In Proceedings of HLT/NAACL.I.
Dan Melamed.
2003.
Multitext grammars and syn-chronous parsers.
In Proceedings of HLT/NAACL.Giorgio Satta and Enoch Peserico.
2005.
Some com-putational complexity results for synchronouscontext-free grammars.
In Proceedings ofHLT/EMNLP, pages 803?810.Dekai Wu.
1997.
Stochastic inversion transductiongrammars and bilingual parsing of parallel corpora.Computational Linguistics, 23(3):377?403.Kenji Yamada and Kevin Knight.
2001.
A syntax-based statistical translation model.
In Proceedingsof ACL-01.Hao Zhang, Liang Huang, Daniel Gildea, and KevinKnight.
2006.
Synchronous binarization for ma-chine translation.
In Proceedings of HLT/NAACL.286
