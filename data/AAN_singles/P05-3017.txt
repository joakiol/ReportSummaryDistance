Supporting Annotation Layers for Natural Language ProcessingPreslav Nakov, Ariel Schwartz, Brian WolfComputer Science DivisionUniversity of California, BerkeleyBerkeley, CA 94720{nakov,sariel}@cs.berkeley.eduMarti HearstSIMSUniversity of California, BerkeleyBerkeley, CA 94720hearst@sims.berkeley.eduAbstractWe demonstrate a system for flexiblequerying against text that has been anno-tated with the results of NLP processing.The system supports self-overlapping andparallel layers, integration of syntactic andontological hierarchies, flexibility in theformat of returned results, and tight inte-gration with SQL.
We present a query lan-guage and its use on examples taken fromthe NLP literature.1 IntroductionToday most natural language processing (NLP)algorithms make use of the results of previousprocessing steps.
For example, a word sense disam-biguation algorithm may combine the output of a to-kenizer, a part-of-speech tagger, a phrase boundaryrecognizer, and a module that classifies noun phrasesinto semantic categories.
Currently there is no stan-dard way to represent and store the results of suchprocessing for efficient retrieval.We propose a framework for annotating text withthe results of NLP processing and then queryingagainst those annotations in flexible ways.
Theframework includes a query language and an in-dexing architecture for efficient retrieval, built ontop of a relational database management system(RDBMS).
The model allows for both hierarchicaland overlapping layers of annotation as well as forquerying at multiple levels of description.In the remainder of the paper we describe relatedwork, illustrate the annotation model and the querylanguage and describe the indexing architecture andthe experimental results, thus showing the feasibilityof the approach for a variety of NLP tasks.2 Related WorkThere are several specialized tools for indexing andquerying treebanks.
(See Bird et al (2005) for anoverview and critical comparisons.)
TGrep21 is aa grep-like utility for the Penn Treebank corpus ofparsed Wall Street Journal texts.
It allows Booleanexpressions over nodes and regular expressions in-side nodes.
Matching uses a binary index and isperformed recursively starting at the top node in thequery.
TIGERSearch2 is associated with the Germansyntactic corpus TIGER.
The tool is more typed thanTGrep2 and allows search over discontinuous con-stituents that are common in German.
TIGERSearchstores the corpus in a Prolog-like logical form andsearches using unification matching.
LPath is anextension of XPath with three features: immedi-ate precedence, subtree scoping and edge alignment.The queries are executed in an SQL database (Laiand Bird, 2004).
Other tree query languages includeCorpusSearch, Gsearch, Linguist?s Search Engine,Netgraph, TIQL, VIQTORYA etc.Some tools go beyond the tree model and al-low multiple intersecting hierarchies.
Emu (Cas-sidy and Harrington, 2001) supports sequential lev-els of annotations over speech datasets.
Hierarchi-cal relations may exist between tokens in differentlevels, but precedence is defined only between el-ements within the same level.
The queries cannot1http://tedlab.mit.edu/?dr/Tgrep2/2http://www.ims.uni-stuttgart.de/projekte/TIGER/TIGERSearch/express immediate precedence and are executed us-ing a linear search.
NiteQL is the query languagefor the MATE annotation workbench (McKelvie etal., 2001).
It is highly expressive and, similarly toTIGERSearch, allows quering of intersecting hier-archies.
However, the system uses XML for stor-age and retrieval, with an in-memory representation,which may limit its scalability.Bird and Liberman (2001) introduce an abstractgeneral annotation approach, based on annotationgraphs.3 The model is best suited for speech data,where time constraints are limited within an inter-val, but it is unnecessarily complex for supportingannotations on written text.3 The Layered Query LanguageOur framework differs from others by simultane-ously supporting several key features:?
Multiple overlapping layers (which cannot beexpressed in a single XML file), including self-overlapping (e.g., a word shared by two phrasesfrom the same layer), and parallel layers, aswhen multiple syntactic parses span the sametext.?
Integration of multiple intersecting hierarchies(e.g., MeSH, UMLS, WordNet).?
Flexible results format.?
Tight integration with SQL, including applica-tion of SQL operators over the returned results.?
Scalability to large collections such as MED-LINE (containing millions of documents).4While existing systems possess some of these fea-tures, none offers all of them.We assume that the underlying text is fairly static.While we support addition, removal and editing ofannotations via a Java API, we do not optimize forefficient editing, but instead focus on compact rep-resentation, easy query formulation, easy additionand removal of layers, and straightforward trans-lation into SQL.
Below we illustrate our LayeredQuery Language (LQL) using examples from bio-science NLP.53http://agtk.sourceforge.net/4http://www.nlm.nih.gov/pubs/factsheets/medline.html5See http://biotext.berkeley.edu/lql/ for a formal descriptionof the language and additional examples.Figure 1 illustrates the layered annotation of asentence from biomedical text.
Each annotation rep-resents an interval spanning a sequence of charac-ters, using absolute beginning and ending positions.Each layer corresponds to a conceptually differentkind of annotation (e.g., word, gene/protein6, shal-low parse).
Layers can be sequential, overlapping(e.g., two concepts sharing the same word), and hi-erarchical (either spanning, when the intervals arenested as in a parse tree, or ontologically, when thetoken itself is derived from a hierarchical ontology).Word, POS and shallow parse layers are sequen-tial (the latter can skip or span multiple words).
Thegene/protein layer assigns IDs from the LocusLinkdatabase of gene names.7 For a given gene there areas many LocusLink IDs as the number of organismsit is found in (e.g., 4 in the case of the gene Bcl-2).The MeSH layer contains entities from the hier-archical medical ontology MeSH (Medical SubjectHeadings).8 The MeSH annotations on Figure 1 areoverlapping (share the word cell) and hierarchicalboth ways: spanning, since blood cell (with MeSHid D001773) orthographically spans the word cell(id A11), and ontologically, since blood cell is a kindof cell and cell death (id D016923) is a kind of Bio-logical Phenomena.Given this annotation, we can extract potentialprotein-protein interactions from MEDLINE text.One simple approach is to follow (Blaschke et al,1999), who developed a list of verbs (and their de-rived forms) and scanned for sentences containingthe pattern PROTEIN ... INTERACTION-VERB ...PROTEIN.
This can be expressed in LQL as follows:FROM[layer=?sentence?
{ ALLOW GAPS }[layer=?protein?]
AS prot1[layer=?pos?
&& tag_type="verb" &&content=?activates?][layer=?protein?]
AS prot2] SELECT prot1.content, prot2.contentThis example extracts sentences containing a pro-tein name in the gene/protein layer, followed by anysequence of words (because of ALLOW GAPS), fol-lowed by the interaction verb activates, followed byany sequence of words, and finally followed by an-6Genes and their corresponding proteins often share thesame name and the difference between them is often elided.7http://www.ncbi.nlm.nih.gov/LocusLink8http://www.nlm.nih.gov/mesh/meshhome.htmlFigure 1: Illustration of the annotation layers.
The full parse, sentence and section layers are not shown.other protein name.
All possible protein matcheswithin the same sentence will be returned.
The re-sults are presented as pairs of protein names.Each query level specifies a layer (e.g., sentence,part-of-speech, gene/protein) and optional restric-tions on the attribute values.
A binding statementis allowed after the layer?s closing bracket.
Wecan search for more than one verb simultaneously,e.g., by changing the POS layer of the query aboveto [layer=?pos?
&& (content=?activates?|| content=?inhibit?
|| content=?binds?
)].Further, a wildcard like content ?
?activate%?can match the verb forms activate, activates andactivated.
We can also use double quotes " to makethe comparison case insensitive.
Finally, since LQLis automatically translated into SQL, SQL codecan be written to surround the LQL query and toreference its results, thus allowing the use of SQLoperators such as GROUP BY, COUNT, DISTINCT,ORDER BY, etc., as well as set operations like UNION.Now consider the task of extracting interactionsbetween chemicals and diseases.
Given the sen-tence ?Adherence to statin prevents one coronaryheart disease event for every 429 patients.
?, wewant to extract the relation that statin (potentially)prevents coronary heart disease.
The latter is inthe MeSH hierarchy (id D003327) with tree codesC14.280.647.250 and C14.907.553.470.250, whilethe former is listed in the MeSH supplementary con-cepts (ID C047068).
In fact, the whole C subtreein MeSH contains diseases and all supplementaryMeSH concepts represent chemicals.
So we can findpotentially useful sentences (to be further processedby another algorithm) using the following query:FROM[layer=?sentence?
{NO ORDER, ALLOW GAPS}[layer=?shallow_parse?
&& tag_type=?NP?[layer=?chemicals?]
AS chem $][layer=?shallow_parse?
&& tag_type=?NP?[layer=?MeSH?
&& label BELOW "C"] AS dis $]] AS sentSELECT chem.content,dis.content,sent.contentThis looks for sentences containing two NPs in anyorder without overlaps (NO ORDER) and separated byany number of intervening elements.
We further re-quire one of the NPs to end (ensured by the $ sym-bol) with a chemical, and the other (the disease) toend with a MeSH term from the C subtree.4 System ArchitectureOur basic model is similar to that of TIPSTER (Gr-ishman, 1996): each annotation is stored as a record,which specifies the character-level beginning andending positions, the layer and the type.
The ba-sic table9 contains the following columns: (1) an-notation id; (2) doc id; (3) section: title, abstractor body; (4) layer id: layer identifier (word, POS,shallow parse, sentence, etc.
); (5) start char pos:beginning character position, relative to section anddoc id; (6) end char pos: ending character posi-tion; (7) tag type: a layer-specific token identifier.After evaluating various different extensionsof the structure above, we have arrived at onewith some additional columns, which improvescross-layer query performance: (8) sentence id;(9) word id; (10) first word pos; and (11)last word pos.
Columns (9)-(11) treat the wordlayer as atomic and require all annotations to coin-cide with word boundaries.Finally, we use two types of composite indexes:forward, which looks for positions in a given docu-ment, and inverted, which supports searching basedon annotation values.10 An index lookup can be per-formed on any column combination that correspondsto an index prefix.
An RDBMS?
query optimizerestimates the optimal access paths (index and tablescans), and join orders based on statistics collectedover the stored records.
In complex queries a com-bination of forward (F) and inverted (I) indexes istypically used.
The particular ones we used are:11(F) +doc id+section+layer id+sentence+first word pos+last word pos+tag type(I) +layer id+tag type+doc id+section+sentence+first word pos+last word pos(I) +word id+layer id+tag type+doc id+section+sentence+first word posWe have experimented with the system on a col-lection of 1.4 million MEDLINE abstracts, whichinclude 10 million sentences annotated with 320million multi-layered annotations.
The current data-base size is around 70 GB.
Annotations are indexedas they are inserted into the database.9There are some additional tables mapping token IDs to en-tities (the string in case of a word, the MeSH label(s) in case ofa MeSH term etc.
)10These inverted indexes can be seen as a direct extension ofthe widely used inverted file indexes in traditional IR systems.11There is also an index on annotation id, which allows forannotating relations between annotations.Our initial evaluation shows variation in the exe-cution time, depending on the kind and complexityof the query.
Response time for simple queries isusually less than a minute, while for more complexones it can be much longer.
We are in the process offurther investigating and tuning the system.5 Conclusions and Future WorkWe have provided a mechanism to effectively storeand query layers of textual annotations, focusingon compact representation, easy query formulation,easy addition and removal of layers, and straight-forward translation into SQL.
Using a collection of1.4 MEDLINE abstracts, we have evaluated vari-ous structures for data storage and have arrived ata promising one.We have also designed a concise language (LQL)to express queries that span multiple levels of anno-tation structure, allowing users to express queries ina syntax that closely resembles the underlying anno-tation structure.
We plan to release the software tothe research community for use in their own annota-tion and querying needs.Acknowledgements This research was supportedby NSF DBI-0317510 and a gift from Genentech.ReferencesSteven Bird and Mark Liberman.
2001.
A formal frameworkfor linguistic annotation.
Speech Communication, 33(1-2):23?60.Steven Bird, Yi Chen, Susan Davidson, Haejoong Lee, andYifeng Zheng.
2005.
Extending XPath to support linguis-tic queries.
In Proceedings of PLANX, pages 35?46.Christian Blaschke, Miguel Andrade, Christos Ouzounis, andAlfonso Valencia.
1999.
Automatic extraction of biologicalinformation from scientific text: Protein-protein interactions.In Proceedings of ISMB, pages 60?67.Steve Cassidy and Jonathan Harrington.
2001.
Multi-level an-notation in the Emu speech database management system.Speech Communication, 33(1-2):61?77.Ralph Grishman.
1996.
Building an architecture: a CAWGsaga.
Advances in Text Processing: Tipster Program Ph.
II.Catherine Lai and Steven Bird.
2004.
Querying and updatingtreebanks: A critical survey and requirements analysis.
InProceedings Australasian Language Technology Workshop,pages 139?146.David McKelvie, Amy Isard, Andreas Mengel, Morten Moeller,Michael Grosse, and Marion Klein.
2001.
The MATE work-bench - an annotation tool for XML coded speech corpora.Speech Communication, 33(1-2):97?112.
