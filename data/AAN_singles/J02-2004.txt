c?
2002 Association for Computational LinguisticsIncremental Construction andMaintenance of Minimal Finite-StateAutomataRafael C. Carrasco?
Mikel L. Forcada?Universitat d?Alacant Universitat d?AlacantDaciuk et al [Computational Linguistics 26(1):3?16 (2000)] describe a method for constructingincrementally minimal, deterministic, acyclic finite-state automata (dictionaries) from sets ofstrings.
But acyclic finite-state automata have limitations: For instance, if one wants a linguisticapplication to accept all possible integer numbers or Internet addresses, the corresponding finite-state automaton has to be cyclic.
In this article, we describe a simple and equally efficient methodfor modifying any minimal finite-state automaton (be it acyclic or not) so that a string is addedto or removed from the language it accepts; both operations are very important when dictionarymaintenance is performed and solve the dictionary construction problem addressed by Daciuket al as a special case.
The algorithms proposed here may be straightforwardly derived fromthe customary textbook constructions for the intersection and the complementation of finite-state automata; the algorithms exploit the special properties of the automata resulting from theintersection operation when one of the finite-state automata accepts a single string.1.
IntroductionIn a recent paper in this journal, Daciuk et al (2000) describe two methods for con-structing incrementally minimal, deterministic, acyclic finite-state automata (dictio-naries) from sets of strings: The first method adds strings in dictionary order, and thesecond one is for unsorted data.
Adding an entry is an important dictionary mainte-nance operation, but so is removing an entry from the dictionary, for example, if itis found to be incorrect.
Since ordering cannot obviously be expected in the removalcase, we will focus on the second, more general problem (a solution for which hasalready been sketched by Revuz [2000]).But dictionaries or acyclic finite automata have limitations: For instance, if onewants an application to accept all possible integer numbers or Internet addresses, thecorresponding finite-state automaton has to be cyclic.
In this article, we show a simpleand equally efficient method for modifying any minimal finite-state automaton (be itacyclic or not) so that a string is added to or removed from the language it accepts.
Thealgorithm may be straightforwardly derived from customary textbook constructionsfor the intersection and the complementation of finite-state automata; the resultingalgorithm solves the dictionary construction problem addressed by Daciuk et al?s(2000) second algorithm as a special case.?
Departament de Llenguatges i Sistemes Informa`tics, Universitat d?Alacant, E-03071 Alacant, Spain.E-mail: carrasco@dlsi.ua.es?
Departament de Llenguatges i Sistemes Informa`tics, Universitat d?Alacant, E-03071 Alacant, Spain.E-mail: mlf@dlsi.ua.es.208Computational Linguistics Volume 28, Number 2This article has the following parts.
In Section 2, we give some necessary math-ematical preliminaries.
The minimal automata resulting from adding or removing astring are described in detail in Section 3; the algorithms are described in Section 4.In Section 5, one addition and one removal example are explained in detail, and someclosing remarks are given in Section 6.2.
Mathematical Preliminaries2.1 Finite-State Automata and LanguagesAs in Daciuk et al (2000), we will define a deterministic finite-state automaton asM = (Q,?, ?, q0, F), where Q is a finite set of states, q0 ?
Q is the start state, F ?
Q isa set of accepting states, ?
is a finite set of symbols called the alphabet, and ?
: Q ??
?
Q is the next-state mapping.
In this article, we will define ?
as a total mapping;the corresponding finite-state automaton will be called complete (Revuz 2000).
Thisinvolves no loss of generality, as any finite-state automaton may be made completeby adding a new absorption state ?
to Q, so that all undefined transitions point to itand ?
(?, a) =?
for all a ?
?.
Using complete finite-state automata is convenient forthe theoretical discussion presented in this article; real implementations of automataand the corresponding algorithms need not contain an explicit representation of theabsorption state and its incoming and outgoing transitions.For complete finite-state automata, the extended mapping ??
: Q ?
??
?
Q (theextension of ?
for strings) is defined simply as??
(q, ) = q??
(q, ax ) = ??(?
(q, a), x) (1)for all a ?
?
and x ?
?
?, with  the empty or null string.
The language accepted byautomaton ML(M) = {w ?
??
: ??
(q0, w) ?
F} (2)and the right language of state qL(q) = {x ?
??
: ??
(q, x) ?
F} (3)are defined as in Daciuk et al (2000).2.2 Single-String AutomatonWe also find it convenient to define the (complete) single-string automaton for stringw, denoted Mw = (Qw,?, ?w, q0w, Fw), such that L(Mw) = {w}.
This automaton hasQw = Pr(w)?
{?w}, where Pr(w) is the set of all prefixes of w and ?w is the absorptionstate, Fw = {w}, and q0w =  (note that nonabsorption states in Qw will be named afterthe corresponding prefix of w).
The next-state function is defined as follows?
(x, a) ={xa if x , xa ?
Pr(w)?w otherwise(4)Note that the single-string automaton for a string w has |Qw| = |w|+ 2 states.2.3 Operations with Finite-State Automata2.3.1 Intersection Automaton.
Given two finite-state automata M1 and M2, it is easyto build an automaton M so that L(M) = L(M1) ?
L(M2).
This construction is found209Carrasco and Forcada Incremental Construction of Minimal FSAin formal language theory textbooks (Hopcroft and Ullman 1979, page 59) and isreferred to as standard in papers (Karakostas, Viglas, and Lipton 2000).
The (complete)intersection automaton has Q = Q1?Q2, q0 = (q01, q02), F = F1?F2, and ?
((q1, q2), a) =(?1(q1, a), ?2(q2, a)) for all a ?
?, q1 ?
Q1 and q2 ?
Q2.2.3.2 Complementary Automaton.
Given a complete finite-state automaton M, it iseasy to build its complementary automaton M?
so that L(M?)
= ??
?
L(M); the onlychange is the set of final states: F?
= Q ?
F (Hopcroft and Ullman 1979, page 59).
Inparticular, the complementary single-string automaton M?w accepting ??
?
{w} isidentical to Mw except that F?w = Q ?
{w}.2.3.3 Union Automaton.
The above constructions may be combined easily to obtain aconstruction to build, from two complete automata M1 and M2, the (complete) unionautomaton M such that L(M) = L(M1) ?
L(M2).
It suffices to consider that, for anytwo languages on ?
?, L1 ?
L2 = ??
?
(??
?
L1) ?
(??
?
L2).
The resulting automatonM is identical to the intersection automaton defined above except that F = (F1 ?Q2)?
(Q1 ?
F2).3.
Adding and Removing a String3.1 Adding a StringGiven a (possibly cyclic) minimal complete finite-state automaton M, it is easy tobuild a new complete automaton M?
accepting L(M?)
= L(M) ?
{w} by applying theunion construct defined above to M and the single-string automaton Mw.
The resultingautomaton M?
= (Q?,?, ?
?, q?0, F?
), which may be minimized very easily (see below), hasfour kinds of states in Q?:?
States of the form (q,?w) with q ?
Q ?
{?
}, equivalent to thosenonabsorption states of M that are not reached by any prefix of w; theywill be called intact states, because they have the same transitionstructure as their counterparts in M (that is, if ?
(q, a) = q?, then??
((q,?w), a) = (q?,?w)) and belong to F?
if q ?
F. As a result, they haveexactly the same right languages, L((q,?w)) = L(q), because all of theiroutgoing transitions go to other intact states.
Furthermore, each state(q,?w) has a different right language; therefore, no two intact states willever be merged into one by minimization (intact states may, however, beeliminated, if they become unreachable, as we will describe below).
Forlarge automata (dictionaries) M, these are the great majority of states (thenumber of intact states ranges between |Q| ?
|w| ?
1 and |Q|); therefore, itwill be convenient in practice to consider M?
as a modified version of M,and it will be treated as such in the algorithms found in this article.?
States of the form (q, x) with q ?
Q ?
{?}
and x ?
Pr(w), such that??
(q0, x) = q; they will be called cloned states, inspired by theterminology in Daciuk et al (2000); the remaining states in(Q ?
{?})?
Pr(w)?the great majority of states in Q ?
Qw?may safelybe discarded because they are unreachable from the new start stateq?0 = (q0, ), which itself is a cloned state.
Cloned states are modifiedversions of the original states q ?
Q ?
{?
}: All of their outgoingtransitions point to the corresponding intact states in Q?, that is,(?
(q, a),?w), except for the transition with symbol a : xa ?
Pr(w), which210Computational Linguistics Volume 28, Number 2now points to the corresponding cloned state (?
(q, a), xa), that is,??
((q, x), a) ={(?
(q, a), xa) if xa ?
Pr(w)(?
(q, a),?w) otherwise(5)Cloned states are in F?
if the corresponding original states are in F; inaddition, if there is a cloned state of the form (q, w), then it is in F?.
Thereare at most |w|+ 1 cloned states.?
States of the form (?, x), with x ?
Pr(w).
These states will be calledqueue states; states of this form appear when the string w is not in L(M)(the pertinent case, because we are adding it) and only if in the originalautomaton ??
(q0, x) =?
for some x ?
Pr(w).
Only the final queue state(?, w)?if it exists?is in F?.
There are at most |w| queue states.?
The new absorption state ?
?= (?,?w) /?
F.This automaton has to be minimized; because of the nature of the construction algo-rithm, however, minimization may be accomplished in a small number of operations.It is not difficult to show that minimization may be performed by initializing a list Rcalled the register (Daciuk et al 2000) with all of the intact states and then testing,one by one, queue and cloned states (starting with the last queue state (?, w) or, if itdoes not exist, the last clone state (q, w), and descending in Pr(w)) against states inthe register and adding them to the register if they are not found to be equivalent toa state in R. (Performing this check backwards avoids having to test the equivalenceof states by visiting their descendants recursively: see the end of Section 4.1.)
Mini-mization (including the elimination of unreachable states in M?)
appears in Section 4as part of the string addition and removal algorithms.3.2 Removing a StringAgain, given a (possibly cyclic) minimal complete finite-state automaton M, it is easyto build a new complete automaton M?
accepting L(M?)
= L(M) ?
{w} = L(M) ?(??
?
{w}) by applying the intersection construct defined above to M and M?w.
Theresulting automaton has the same sets of reachable states in Q?
as in the case of addingstring w and therefore the same close-to-minimality properties; since w is supposedto be in L(M), however, no queue states will be formed.
(Note that, if w /?
L(M),a nonaccepting queue with all states eventually equivalent to ?
?= (?,?w) may beformed.)
The accepting states in F?
are intact states (q,?w) and cloned states (q, x)with q ?
F, except for state (q, w).
Minimization may be performed analogously to thestring addition case.4.
Algorithms4.1 Adding a StringFigure 1 shows the algorithm that may be used to add a string to an existing automa-ton, which follows the construction in Section 3.1.
The resulting automaton is viewedas a modification of the original one: Therefore, intact states are not created; instead,unreachable intact states are eliminated later.
The register R of states not needingminimization is initialized with Q.
The algorithm has three parts:?
First, the cloned and queue states are built and added to Q by usingfunction clone() for all prefixes of w. The function returns a cloned state211Carrasco and Forcada Incremental Construction of Minimal FSA(with all transitions created), if the argument is a nonabsorption state inQ ?
{?
}, or a queue state, if it operates on the absorption state ??
Q.?
Second, those intact states that have become unreachable as a result ofdesignating the cloned state q?0 as the new start state are removed from Qand R, and the start state is replaced by its clone.
Unreachable states aresimply those having no incoming transitions as constructed by thealgorithm or as a consequence of the removal of other unreachablestates; therefore, function unreachable() simply has to check for theabsence of incoming transitions.
Note that only intact states (q,?w)corresponding to q such that ??
(q0, x) = q for some x ?
Pr(w) maybecome unreachable as a result of having been cloned.?
Third, the queue and cloned states are checked (starting with the laststate) against the register using function replace or register(), which isessentially the same as the nonrecursive version in the second algorithmin Daciuk et al (2000) and is shown in Figure 2.
If argument state q isfound to be equivalent to a state p in the register R, function merge(p, q)is called to redirect into p those transitions coming into q; if not,argument state q is simply added to the register.
Equivalence is checkedby function equiv(), shown in Figure 3, which checks for the equivalenceof states by comparing (1) whether both states are accepting or not, and(2) whether the corresponding outgoing transitions lead to the same statein R. Note that outgoing transitions cannot lead to equivalent states, asthere are no pairs of different equivalent states in the register(?p, q ?
R, equiv(p, q) ?
p = q) and backwards minimization guaranteesthat the state has no transitions to unregister states.Finally, the new (minimal) automaton is returned.
In real implementations, absorptionstates are not explicitly stored; this results in small differences in the implementationsof the functions clone() and equiv().4.2 Removing a StringThe algorithm for removing a string from the language accepted by an automaton M?differs from the previous algorithm only in that the lineF ?
F ?
{qlast}has to be added after the first end for.
Since the string removal algorithm will usuallybe asked to remove a string that was in L(M), function clone() will usually generateonly cloned states and no queue states (see Section 3.2 for the special case w /?
L(M)).5.
Examples5.1 Adding a StringAssume that we want to add the string bra to the automaton in Figure 4, which acceptsthe set of strings (ba)+?
{bar} (for clarity, in all automata, the absorption state and alltransitions leading to it will not be drawn).
The single-string automaton for string brais shown in Figure 5.
Application of the first stages of the string addition algorithmleads to the (unminimized) automaton in Figure 6.
The automaton has, in addition tothe set of intact states {(0,?w), .
.
.
, (5,?w)}, two cloned states ((0, ) and (1, b)) and twoqueue states ((?, br) and (?, bra)).
As a consequence of the designation of (0, ) as the212Computational Linguistics Volume 28, Number 2algorithm addstringInput: M = (Q,?, ?, q0, F) (minimal, complete), w ?
?
?Output: M?=(Q?,?, ?
?, q?0, F?)
minimal, complete, and such that L(M?)=L(M)?
{w}R ?
Q [initialize register]q?0 ?
clone(q0) [clone start state]qlast ?
q?0for i = 1 to |w|q ?
clone(??
(q0, w1 ?
?
?wi)) [create cloned and queue states;add clones of accepting states to F]?
(qlast, wi) ?
qqlast ?
qend fori ?
1qcurrent ?
q0while(i ?
|w| and unreachable(qcurrent))qnext ?
?
(qcurrent, wi)Q ?
Q ?
{qcurrent} [remove unreachable state from Qand update transitions in ?
]R ?
R ?
{qcurrent} [remove also from register]qcurrent ?
qnexti ?
i + 1end whileif unreachable(qcurrent)Q ?
Q ?
{qcurrent}R ?
R ?
{qcurrent}end ifq0 ?
q?0 [replace start state]for i = |w| downto 1replace or register(??
(q0, w1 ?
?
?wi)) [check queue and cloned states one by one]end forreturn M = (Q,?, ?, q0, F)end algorithmFigure 1Algorithm to add a string w to the language accepted by a finite-state automaton whilekeeping it minimal.function replace or register(q)if ?p ?
R : equiv(p, q) thenmerge(p, q)elseR ?
R ?
{q}end ifend functionFigure 2The function replace or register().213Carrasco and Forcada Incremental Construction of Minimal FSAfunction equiv(p, q)if (p ?
F ?
q /?
F) ?
(p /?
F ?
q ?
F) return falsefor all symbols a ?
?if ?
(p, a) = ?
(q, a) return falseend forreturn trueend functionFigure 3The function equiv(p, q).Figure 4Minimal automaton accepting the set of strings (ba)+ ?
{bar}.Figure 5Single-string automaton accepting string bra.0,?w 1,?w 2,?w3,?w4,?w 5,?w0,?
1,b?,br ?,brab arb abbaraFigure 6Unminimized automaton accepting the set (ba)+ ?
{bar} ?
{bra}.
Shadowed states (0,?w)and (1,?w) have become unreachable (have no incoming transitions) and are eliminated inprecisely that order.214Computational Linguistics Volume 28, Number 2Figure 7Minimal automaton accepting the set (ba)+ ?
{bar} ?
{bra}.?
b ba bab babab a b aFigure 8Single-string automaton accepting the string baba.0,?w 1,?w2,?w3,?w4,?w5,?w6,?w0,?
1,b 2,ba 4,bab 6,bababarbraabbrarb abFigure 9Unminimized automaton accepting the set (ba)+ ?
{bar} ?
{bra} ?
{baba}.
Shadowed states(0,?w), (1,?w), and (2,?w) have become unreachable (have no incoming transitions) and areeliminated in precisely that order.new start state, shadowed states (0,?w) and (1,?w) become unreachable (have no in-coming transitions) and are eliminated in precisely that order in the second stage of thealgorithm.
The final stage of the algorithm puts intact states into the register and testsqueue and cloned states for equivalence with states in the register.
The first state testedis (?, bra), which is found to be equivalent to (3,?w); therefore, transitions cominginto (?, bra) are made to point to (3,?w).
Then, states (?, br), (1, b) and (0, ) are testedin order, found to have no equivalent in the register, and added to it.
The resultingminimal automaton, after a convenient renumbering of states, is shown in Figure 7.5.2 Removing a StringNow let us consider the case in which we want to remove string baba from thelanguage accepted by the automaton in Figure 7 (the single-string automaton for babais shown in Figure 8).
The automaton resulting from the application of the initial(construction) stages of the automaton is shown in Figure 9.
Note that state (6, baba) ismarked as nonaccepting, because we are removing a string.
Again, as a consequenceof the designation of (0, ) as the new start state, shadowed states (0,?w), (1,?w),215Carrasco and Forcada Incremental Construction of Minimal FSA0 12345 67 8braarb ababFigure 10Minimal automaton accepting the set (ba)+ ?
{bar} ?
{bra} ?
{baba}.and (2,?w) become unreachable (have no incoming transitions) and are eliminated inprecisely that order in the second stage of the algorithm.
The last stage of the algorithmputs all intact states into the register, checks cloned states (6, baba), (4, bab), (2, ba),(1, b) and (0, ) (no queue states, since baba is accepted by the automaton in Figure 7),and finds none of them to be equivalent to those in the register, to which they areadded.
The resulting minimal automaton is shown in Figure 10.6.
Concluding RemarksWe have derived, from basic results of language and automata theory, a simple methodfor modifying a minimal (possibly cyclic) finite-state automaton so that it recognizesone string more or one string less while keeping the finite-state automaton minimal.These two operations may be applied to dictionary construction and maintenanceand generalize the result in Daciuk et al?s (2000) second algorithm (incremental con-struction of acyclic finite-state automata from unsorted strings) in two respects, withinteresting practical implications:?
The method described here allows for the addition of strings to thelanguages of cyclic automata (in practice, it may be convenient to havecycles in dictionaries if we want them to accept, for example, all possibleinteger numbers or Internet addresses).
In this respect, the algorithmpresented also generalizes the string removal method sketched by Revuz(2000) for acyclic automata.?
Removal of strings is as easy as addition.
This means that, for example,the detection of an erroneous entry in the dictionary does not implyhaving to rebuild the dictionary completely.The asymptotic time complexity of the algorithms is in the same class (O(|Q||w|)) asthat in Daciuk et al (2000), because the slowest part of the algorithm (the last one)checks all queue and cloned states (O(|w|)) against all states of the register (O(|Q|)).
Assuggested by one of the reviewers of this article, an improvement in efficiency may beobtained by realizing that, in many cases, cloned states corresponding to the shortestprefixes of string w are not affected by minimization, because their intact equivalentshave become unreachable and therefore have been removed from the register; thesolution lies in identifying these states and not cloning them (for example, Daciuk etal.
?s [2000] and Revuz?s [2000] algorithms do not clone them).As for the future, we are working on an adaptation of this algorithm for the main-tenance of morphological analyzers and generators using finite-state nondeterministicletter transducers (Roche and Schabes 1997; Garrido et al 1999).216Computational Linguistics Volume 28, Number 2AcknowledgmentsThe work reported in this article has beenfunded by the Spanish Comisio?nInterministerial de Ciencia y Tecnolog?
?athrough grant TIC2000-1599.
We thank thetwo reviewers for their suggestions andColin de la Higuera for his comments onthe manuscript.ReferencesDaciuk, Jan, Stoyan Mihov, Bruce W.Watson, and Richard E. Watson.
2000.Incremental construction of minimalacyclic finite-state automata.Computational Linguistics, 26(1):3?16.Garrido, Alicia, Amaia Iturraspe, SandraMontserrat, Herm?
?nia Pastor, andMikel L. Forcada.
1999.
A compiler formorphological analysers and generatorsbased on finite-state transducers.Procesamiento del Lenguaje Natural,25:93?98.Hopcroft, John E. and Jeffrey D. Ullman.1979.
Introduction to Automata Theory,Languages, and Computation.Addison-Wesley, Reading, MA.Karakostas, George, Anastasios Viglas, andRichard J. Lipton.
2000.
On thecomplexity of intersecting finite stateautomata.
In Proceedings of the 15th AnnualIEEE Conference on ComputationalComplexity (CoCo?00), pages 229?234.Revuz, Dominique.
2000.
Dynamic acyclicminimal automaton.
In Preproceedings ofCIAA 2000: Fifth International Conference onImplementation and Application of Automata,pages 226?232, London, Ontario, July24?25.Roche, Emmanuel and Yves Schabes.
1997.Introduction.
In Emmanuel Roche andYves Schabes, editors, Finite-State LanguageProcessing.
MIT Press, pages 1?65.
