AN INDEXING TECHNIQUE FOR IMPLEMENTINGCOMMAND RELATIONSLongin LateckiUniversity of  HamburgDepartment of  Computer ScienceBodenstedtstr.
16, 2000 Hamburg 50GermanyTOPIC AREA: SYNTAX,  SEMANTICSABSTRACTCommand relations are important toolsin l inguistics, especial ly in anaphoratheory.
In this paper I present an indexingtechnique which allows us to implement asimple and efficient check for most casesof command relations which have beenpresented in linguistic literature.
I alsoshow a wide perspective of applicationsfor the indexing technique in the imple-mentation of other linguistic phenomenain syntax as well as in semantics.0.
INTRODUCTIONBarker and Pullum (1990) have given a generaldefinition of command relations.
Their definitioncovers most cases of command relations that havebeen presented in linguistic literature.
I will presenthere an indexing technique for syntax trees whichallows us to implement a check for all commandrelations which fulfill the definition fromBarker/Pullum (1990).
The indexing technique canbe implemented in a simple and efficient waywithout any special requierments for the formalismused.
Hence, the indexing technique has a widespectrum of applications for testing commandrelations in syntactic analysis.
Futhermore, thismethod can also be used for command tests insemantics, i.e.
to test for any two semanticrepresentations whether the corresponding odes ofthe syntax tree are in a command relation.
Theusefulness and necessity of a command test insemantics have been demonstrated in Latecki/Pinkal(1990).The general idea of the indexing technique is thefollowing: while a syntax tree is being built, specialindices are assigned to the nodes of this tree.Afterwards we can check whether a commandrelation between two nodes of this tree holds bymerely examining simple set-theoretical re ations ofcorresponding index sets.1.
A GENERAL DEF IN IT ION FORCOMMAND RELAT IONSThe general command definition fromBarker/Pullum (1990) can be informally stated in thefollowing way:1.1 DEFINITION (all).
a P-commands 13 iffevery node with a property P that properlydominates a also dominates ~.In this chapter I will show that this definition isequivalent to the following definition (minimum).1.2 DEFINITION (minimum).
a P -com-mands ~ iff the first node with a property P thatproperly dominates ?x also dominates 13.In this definition the first node that dominates ameans the node most immediately dominating a, asit isusually used in linguistics.
Below I will specifyboth of these definitions formally.The main difference between these two definitionsis that in the first we must check every node with aproperty P that properly dominates a, while in thesecond it is enough to check only one node, just thefirst node with the property P that properlydiominates a.It can be easily seen that the command tests basedon definition 1.2 are an important improvement inefficiency for computational pplications.4"-51  -Both versions (all) and (minimum) are used ascommand efinitions in linguistic literature, so theirequivalence also has linguistic onsequences.
Forexample, definition 1.3 of MAX-command fromBarker/Pullum (1990) (which I formulate followingSells" definition of c-command, Sells (1987)) isequivalent o Definition 1.4, which has beenproposed in Aoun/Sportich (1982).1.3 DEFINIT ION.
a MAX-commands  ~ iffevery maximal projection properly dominating adominates ~.1.4 DEFINIT ION.
a MAX-commands ~ iffthe first maximal projection properly dominating adominates ~.These definitions are special cases of definitions1.1 and 1.2 for the property of being a set ofmaximal projections.Before I formulate the general command definitionin a formal way, I will now quote some otherdefinitions from Barker/Pullum (1990).1.5 DEFINITION.
A relation R on a set N isref lexive iff aRa for all a in N; irreflexive iffaRa; symmetr i c  iff aRb implies bRa;asymmetr ic  iff aRb implies ~bRa;ant i symmetr ic  iff aRb and bRa implies a=b;transitive iff aRb and bRc implies aRc.A relation R on a set N is called a linear order ifit is reflexive, antisymmetric, transitive and has thefollowing property (comparability): for every aand b in N, either aRb or bRa.The following definition of a tree stems fromWall (1972).1.6 DEFINITION.
A tree is a 5-tupleT=<N,L,_>D,<P,LABEL>, whereN is a finite nonempty set, the nodes of T,L is a finite set, the labels of T,>D is a reflexive, antisymmetric elation on N, thedominance relation of T,<P is an irreflexive, asymmetric, transitive relationon N, the precedence relation of T, andLABEL is a total function from N into L, thelabeling function of T, such that for all a, b, c and dfrom N and some unique r in N (the root node ofT), the following hold:(i) The Single Root Condition: r>Da(ii) The Exclusivity Condition:(a_~>Db v b_>Da)<---~(a<Pb v b<Pa)(iii) The Nontangling Condition:(a<Pb ^  a.>_>Dc ^ b>Dd)--~c<PdI will also use >D the proper dominance relation,which will be just like >_D but with all pairs of theform <a,a> removed.1.7 DEFINIT ION.
If aM 13 we say that a isthe mother  of  13, or a immediate lydominates 13, where ctM\[3 iffo~13 ^ -~3x \[o.~x>Dl~\].1.8 DEFINITION.
A property  P on a set ofnodes N is a subset of N. If a node ot satisfies P, Iwill write cte P or P(o0.1.9 DEFINITION.
The set of upper boundsfor a with respect to a property P, written UB(a,P),is given byUB(a,P)= {13e N: 13>Da ^ P(~)}.Thus 13 is an upper bound for a if and only ifit properly dominates a and satisfies P.1.I0 DEFINITION.
Let X be any nonemptysubset of a set of nodes N of a tree T. We will callan element a the smallest element of X and denoteit as minX if cte X and for every node x xe X --,x>Da.
If X is an empty set, then minX = the rootnode of T.A set X is said to be well-ordered by >D if therelation >D is a linear order on X and everynonempty subset of X has a smallest element.
Forexample, the set Z of integers with the.
usualordering relation > is well-ordered.Now I can formally specify the meaning of theexpression "the first node with a property P thatproperly dominates a" from the definition 1.2; itdenotes the smallest element of the set UB(a,P),minUB(a,P).
First I will show that this elementalways exists..In set theory, it is a well-known fact that in anytree, a set of nodes that dominate a given node iswell-ordered in the dominance relation (seeKuratowski/Mostowski (1976), for example).
To beprecise, for a given node a of a tree T, the setUB(ct)= {xe T: x>Dct} is well-ordered.
Hence, the setUB(a,P)=UB(a) n P has a smallest element, whichwe denote minUB(a,P).At this point we are ready to formally statecommand definitions 1.1 and 1.2.1.U DEFINITION (all).
a P -commands 13iff Vx (xe UB(a,P) -~ x>DI3).1.12 DEF IN IT ION (min imum).
ct P-com-mands 13 iff minUB(a,P)_>DIL- 52  -We say that P generates the P-command relation.For example, we obtain the MAX-commandrelation (1.3) as a special case of Definition 1.11 ifwe take the set {ae N: LABEL(a)e MAX} as aproperty P, where MAX is any set of maximalprojections.Def'mition 1.11 is the general command efinitionfrom Barker/PuHum (1990).1.13 THEOREM.
Definitions 1.11 (all) and1,12 (minimum) are equivalent.Proof.
If a pair <?x,l~> fulfills the definition (all),then it also fulfills the definition (minimum),because minUB(?c~)?
UB(cx,P) if UB(a,P) ~ O. IfUB(a,P) = O, then minUB(ct,P) = the root node ofT, so condition minUB(cx,P)>D\[3 is also fulfilled.Conversely, let a pair <cx,13> fulfill the definition(rain).
This means that minUB(a,P)>D\[LWe must show that Vx (xe UB(cx,P) ---> x>DI3).
IfUB(a,P) is the empty set, then the claim is triviallyfulfilled.
If UB(cx,P) is not empty, then let x be anyelement from UB(~,P).
Then x>DminUB(et,P).Since ,,>D,, is a linear relation on UB(cz,P), it istransitive.
Hence, x_>DminUB(a ,P)  andminUB(cc,P)>D\[3 implies x>_.DI3.2.
AN INDEXING TECHNIQUEI will now present an indexing mechanism whichallows us to check any command relation in thesense of Definition 1.11 in a simple andstraightforward way.Let P be any property of nodes of a given syntaxtree.
The idea is the following: while the syntax treei~ being built, there are special indices assigned toevery node of this tree.Generally, every node inherits indices from itsmother.Specifically, if P(c0 holds for a node co, then aunique new index is put into the index set of ?z andthe new index set of o~ obtained in this way will beinherited futher.
This process is formally describedin the following definition of functions indp and fp.Letting T be any syntax tree, we define functionsindp and fp from all nodes of T into finite subsetsof N (the positive integers), whereby we can takefinite subsets of any index set as a image of indpand fp.2.1 DEFINITION.
Let P be any property.
Thefunction i ndp :N  --~ F (N)= {a~N:cr i safinite subset of N} is defined recursively as follows:1 ?
indp(root(T)) ={ 1 }, where root(T) denotes theroot node.2 ?
If cx immediately dominates \[3, thenindp(I\] ) = indp(~t) u fp(\[3),where fp is a function fp: N --', F (N) whichfulfills the following conditions:11 If ?t~ P, then fp(ct) = O.21 If ?xeP, then fp(ct)= {x}, for some uniqueindex xeN (x~ U {fp(T): TeN and y~oc}).The procedural aspect of this definition can bedescribed as follows.
First, the function fp assigns aset with a unique index to every node from P, andthe empty set to every node which does not belongtoP,Then, for every node, the set it has been assignedby the function fp is added to the indices it inheritsfrom its mother.
The result is the value of thefunction indp.Based on this description, it is easy to note thefollowing facts.2.2 FACT.If ~-Di3, then indp(v) G indp(13) - fp(\[3).2.3 FACT.If 3~ P, then Te_DI~ iff fp(y) ~ indp(\[3).Now I present he main theorem of this paperwhich gives a basis for efficient and simpleimplementations of P-command relations.
Due tothis theorem, we can check whether any P-commandrelation holds between two nodes by merelyexamining the subset relationship of correspondingindex sets.2.4 THEOREM.
Node ?x P-commands node \[~iff indp(ct)  - fp(cx) ~ indp(\[~).The proof, which makes use of equivalenceTheorem 1.13, will be given at the end of thischapter.To illustrate the P-command check based on thetheorem above, I give an example for a MAX-command relation (1.3) which we obtain fromgeneral command efinition 1.11 if we take the set{seN:  LABEL(~)e MAX} as a property P, whereMAX = {NP, VP, AP, PP, S-bar} is a set ofmaximal projections (Sells 1987).Let us consider the syntax analysis for sentence(2.5).
In tree (2.6), the upper set of indices at everynode corresponds tothe value of the function fp for- 53 -this node and the lower set of indices corresponds tothe value of the function indp for this node.
(2.5) A f r iend  of  h is  saw every  man w i th  ate lescope .We can see, for example, that he verb "saw" MAX-commands the prepositional phrase "with atelescope", by verifying that indpCsaw")-fpCsaw")={1,5} ~ { 1,5,7}=indpCwith a telescope"),or that "every man" does not MAX-command "his",by verifying thatindp("every man")-fpCevery man")= {1,5} is not asubset of indpChis")= { 1,2,3,4 }.
(2.6){I} SB}Npl2} {t,2}O ODet { 1,2} N-b~{ 1,2}IA O nD {3}N-bar 11,2 } *'11,2,31,2) 0 XTn {41N{I'21 P11,2,3} "~ 11,2,3,41I I Ifriend of hisvp\[51il,5}2)V-bar { 1,5 }2) ),~{6}V-bar{l,5} "~ {1,5,6}I I2) every manV{1,51isawpD {7 }~{1,5,7}Iwith a telescopeTo do P-command tests in semantics, we merelyneed to extend functions fp and indp to semanticrepresentations of every node.
We can do this in thefollowing way:If a" is a semantic representation f a node or, thenfp(cx') = fp(a) and indp(a')  = indp(a).Now we can check, for two given semanticrepresentations ct', 13", whether a P-commandrelation holds between the two corresponding nodes?x, 13, by examining the condition from Theorem 2.4for ?x', 13": indp(a3 - fp(cx') ~ indp(\[~').
(For moredetails ee Latecki/Pinkal (1990).
)An important advantage ofthe indexing techniqueis that its applicability for checking commandrelations in semantics does not depend on anispomorphism between syntactic and semanticstructure, since the necessary syntactic informationis encoded in indices.
Therefore, this information canbe moved to any required position in the semanticstructure together with the representation f a givennode.Definition 1.11 does not cover all cases ofcommand relations which have been presented inlinguistic literature, but there are only a fewexceptions.
One is the relation that is called c-command in Reinhart (1976; 1981, p.612; 1983,p.23):2.7 DEFINITION.
Node ct c(ons i t i tuent ) -commands  node ~ iff the branching node Xl mostimmediately dominating cteither dominates 13or isimmediately dominated by a node x 2 whichdominates \[~, and x2 is of the same category type asx 1.
A node y is a branching node iff there existstwo different nodes x,y such that ~/Mx ^  vMy.As T. Reinhart wrote, the intention of thisdef'mition is to capture c-command relations in casesS-bar over S or VP over VP.
Hence, we can say (for- 54  -I5our purposes) that x 2 is of the same category type asXl if LABEL(x2) = S-bar, LABEL(xl) = S orLABEL(x2) = LABEL(xl) = VP.This c-command efinition allows the minimalupper bound to be replaced by another node, onenode closer to the root, so this relation cannot begenerated by any property, since this property mustthen depend on the node ix.
However, the conditionof Definition 2.7 can be generated by a relation.
Inorder to use a given relation R as generator, it isenough to replace the set of upper bounds UB(ot,P)by the set UB(tx,R)={13~N: 13>Dot ^ (xRI3)}, ingeneral command definition 1.11.
For detaileddisscusion see Barker/Pullum (1990).With an example of Reinharts c-commandorelation, I want to show that it is also possibleto t reat  re la t iona l  command def in i t ionswith the index ing technique.
Here I do notwant to consider the treatment of the relationalcommand efinition with the indexing technique inthe general case, because it would lead to a formalmathematical discussion without linguisticconnections.To specify a test for Reinharts c-command, weneed merely to modify part 20 of the definition ofthe function indp in 2.1.
The definition of thefunction fp together with the basis test conditiongiven in Theorem 2.4 will be left unchanged.
As aproperty P we take the set of branching nodes.New part 20 of DeFinition 2.1 will be formulatedin the following way:2 ?"
If (x immediately dominates 13 and 13 is of thesame category as ix, then indp(\[3) = indp(tx).If ct immediately dominates 13 and \[3 is not of thesame category as ct then indp(\[3) = indp(ct) L) fp(~).The idea of this modification is that if a node 13 isof the same category as a node ix, then 13 onlyinherits the indices from or.
So, in this case, thenew index from the set fP(l~) does not influence thevalue of the function indp on 13.
I illustrate theindexing check for c-command efinition 2.7 withthe syntax analysis for the following examplesentense from Reinhart (1983).
(2.8) Lola found the book  in the l ibrary.In tree (2.9), the upper set of indices at every nodecorresponds to the value of the function fp at thisnode and the lower set of indices corresponds: to thevalue of the function indp at this node.We can see, for example, that the subject of S,"Lola", c-commands the COMP in S-bar, byverifying that indpCLola")-fpCLola")={ 1 } K { 1 } =indp(COMP),or that the object, "the book", c-commands the NPin PP, "the library", by verifying thatindp("the book")-fpCthe book")={ 1,4} ~ { 1,4,7,8}=indpCthe litrary").
(2.9)O COMP{ I }Npl 13 ILola {510 {6}V { 1,41 NP { 1,4,61I Ifound the bookDD {7}P{1,4,7} '"~ {1,4,7,8}I Iin the library- 55  -To conclude this chapter I give the proof of Theorem2.4.Proof  o f  Theorem 2.4 .
"~ " Let (x P-command \[~.
If we denote"y=minUB(ct,P) and indp(~,)=E, thenindp(o0 =Z o fp(a), because fp(x)=O, for everynode x between ct and %Due to Definition 1.12 (minimum), the node ~/alsodominates 13, hence I: ~ indp(I\]).
So, we have theinclusion indp(a)-fp(~t) ~ indp(13).
"~" Now let indp(c0-fp(c0 ~ indp(I\]), for any twonodes (x, I\] of some tree T, and let ~, be any nodefrom P that dominates 0t.
indp(y) ~ indp(a)-fp(a),since y dominates ct(2.2).From the transitivity of the inclusion relation,indp(y) ~ indp(~).
This implies that fp ( ' f~indp(\[3).
Due to Fact 2.3, the needed relation "Feu~holds, so ot P-commands ~.3.
CONCLUSIONSI have presented an indexing technique whichallows us to test all command relations that fulfillthe definition of Barker and Pullum (1990).
On anexample of Reinharts c-command relation, I havealso shown that it is possible to treat relationalcommands with this technique.The indexing technique can be simply andefficiently implemented without any specialrequierments for the formalism used.
Based on it,Millies (1990) has implemented tests for MAX-command, subjacency and government in aprinciple-based parser for GB (Chomsky 1981, 1982and 1986).It is also possible to use similar indexingprocesses to treat other linguistic phenomena insyntax as well as in semantics.
Hence, the indexingtechnique has a wide spectrum of applications.
Forexample, Latecki and Pink~il (1990) present anindexing mechanism which allows us to achieve theeffects of "Nested Cooper Storage" (Keller 1988 andCooper 1983).REFERENCESAoun, J.
/ Sportiche, D. (1982): On the FormalTheory of Government.
Linguistic Review 2,211-236.Barker, Ch.
/ Pullum G. K. (1990): A Theory ofCommand Relations.
Linguistics andPhilosophy 13: 1-34.Chomsky, N. (1981): Lectures on Government andBinding.
Dordrecht: Foris.Chomsky, N. (1982): Some Concepts andConsequences of the Theory of Government andBinding.
MIT Press.Chomsky, N. (1986): Barriers.
Linguistic InquiryMonigraphs 13, MIT Press: Cambrdge.Cooper, R. (1983): Quantification and SemanticTheory.
D. Reidel, Dordrecht.Keller, W. R. (1988): Nested Cooper Storage: TheProper Treatment of Quantification i  OrdinaryNoun Phrases.
In U. Reyle and C.
Rohrer(eds.
), Natural Language Parsing and LinguisticTheories, 432-447, D. Reidel, Dordrecht.Kuratowski, K. / Mostowski, A.
(1976): SetTheory.
PWN: Warsaw-Amsterdam.Latecki, L. / Pinkal, M. (1990): Syntactic andSemantic Conditions for Quantifier Scope.
Toappear in: Proceedings of the Workshop on"Processing of Plurals and Quantifiers" atGWAI-90, September 1990.Millies, S. (1990): Ein modularer Ansatz filrprinzipienbasiertes Parsing.
LILOG-Report139, IBM: Stuttgart, Germany.Sells, P. (1987): Lectures on ContemporarySemantic Theories.
CSLI Lecture Notes.Reinhart, T. (1976): The Syntactic Domain ofAnaphora.
Doctoral dissertation, MIT,Cambridge, Massachusetts.Reinhart, T. (1981): Definite NP Anaphora nd C-Commands Domains.
Linguistic Inquiry 12,?
605-635.Reinhart, T. (1983): Anaphora and SemanticInterpretation, University of Chicago Press,Chicago, Illinois.Wall, R. (1972): Introduction to Mathematical?
Linguistics.
Prentice Hall: Engelewood Cliffs,New Jersey.ACKNOWLEDGMENTSI would like to thank my advisor Manfred Pinkalfor valuable discussions and silggestions.I also want to thank Geoff Simmons forcorrecting my English.- 56  -
