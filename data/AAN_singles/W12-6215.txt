Proceedings of the 10th International Workshop on Finite State Methods and Natural Language Processing, pages 80?89,Donostia?San Sebastia?n, July 23?25, 2012. c?2012 Association for Computational LinguisticsA Finite-State Temporal Ontology and Event-intervalsTim FernandoComputer Science DepartmentTrinity College DublinIrelandtfernand@tcd.ieAbstractA finite-state approach to temporal ontologyfor natural language text is described underwhich intervals (of the real line) paired withevent descriptions are encoded as strings.
Theapproach is applied to an interval temporallogic linked to TimeML, a standard mark-uplanguage for time and events, for which vari-ous finite-state mechanisms are proposed.1 IntroductionA model-theoretic perspective on finite-state meth-ods is provided by an important theorem due toBu?chi, Elgot and Trakhtenbrot (Thomas, 1997).Given a finite alphabet ?, a system MSO?
ofmonadic second-order logic is set up with a binaryrelation symbol (for successor) and a unary relationsymbol for each symbol in ?
so that the formulae ofMSO?
define precisely the regular languages over ?
(minus the null string ).
Extensions of this theoremto infinite strings and trees are fundamental to workon formal verification associated with Model Check-ing (Clarke et al, 1999).
In that work, a well-definedcomputational system (of hardware or software) canbe taken for granted, against which to evaluate pre-cise specifications.
The matter is far more delicate,however, with natural language semantics.
It is notclear what models, if any, are appropriate for naturallanguage.
Nor is it obvious what logical forms natu-ral language statements translate to.
That said, thereis a considerable body of work in linguistic seman-tics that uses model theory, and no shortage of nat-ural language text containing information that criesout for extraction.A step towards (semi-)automated reasoning abouttemporal information is taken in TimeML (Puste-jovsky et al, 2003), a ?mark-up language for tempo-ral and event expressions?
(www.timeml.org).The primary aim of the present paper is to show howfinite-state methods can push this step further, bybuilding strings, regular languages and regular rela-tions to represent some basic semantic ingredientsproposed for TimeML.
An instructive example issentence (1), which is assigned in (Pratt-Hartmann,2005a; ISO, 2007) the logical form (2).
(1) After his talk with Mary, John drove to Boston.
(2) p(e) ?
q(e?)
?
after(e, e?
)If we read p(e) as ?e is an event of John talking withMary?
and q(e?)
as ?e?
is an event of John driving toBoston?
then (2) says ?an event e?
of John driving toBoston comes after an event e of John talking withMary .?
Evidently, (1) follows from (3) and (4) be-low (implicitly quantifying the variables e and e?
in(2) existentially).
(3) John talked with Mary from 1pm to 2pm.
(4) John drove to Boston from 2pm to 4pm.But is (3) not compatible with (5) ?
and indeed im-plied by (5)?
(5) John talked with Mary from 1pm to 4pm.Could we truthfully assert (1), given (4) and (5)?
Orif not (1), perhaps (6)?
(6) After talking with Mary for an hour, John droveto Boston.80The acceptability of (6) suffers, however, if we aretold (7).
(7) John drove toward Boston from 1pm to 2pm.Clearly, individuating events, as (2) does, opensup a can of worms.
But since at least (Davidson,1967), there has been no retreating from events (Par-sons, 1990; Kamp and Reyle, 1993; Pratt-Hartmann,2005).
Be that as it may, an appeal to events carrieswith it an obligation to provide a minimal accountof what holds during these events and perhaps evena bit beyond.
It is for such an account that finite-state methods are deployed below, viewed throughthe lens of the Bu?chi-Elgot-Trakhtenbrot theorem.That lens gives temporal logic, the formulae ofwhich ?
hereafter called fluents (for brevity) ?may or may not hold at a string position, conceivedas time and ordered according to succession withinthe string.
For example, we can introduce a flu-ent p for ?John talked with Mary?
and a fluent qfor ?John drove to Boston?
to form the string p q(of length 2) for ?after John talked with Mary, Johndrove to Boston.?
The idea is that a string ?1 ?
?
?
?nof boxes ?i describes a sequence t1, .
.
.
, tn of ntimes, ti coming before ti+1, such that every fluentin ?i holds at ti.1 To a first approximation, a box ?iis a snapshot at time ti, making ?1 ?
?
?
?n a cartoonor filmstrip.
But just what is a time ti: a temporalpoint or an interval?For p q to apply to (3) and (4), it is naturalto regard ti as an interval, setting up an accountof the entailment from (5) to (3) in terms of theso-called subinterval property of John-talking-with-Mary (Bennett and Partee, 1972).
John-driving-to-Boston, by contrast, does not have this property, ne-cessitating the change from to Boston in (4) to to-ward Boston in (7).
We can bring out this fact byrepresenting individual events as strings, refining,for instance, our picture q of John?s drive to Bostonby adding a fluent r for ?John in Boston?
to formq q,r .
An event of motion is conceptualized as afinite sequence of snapshots in (Tenny, 1987) andelsewhere ?
a conceptualization resoundingly re-jected in (Jackendoff, 1996) because1The alphabet ?
from which strings are formed is the familyPow(X) of subsets of some set X of fluents.
A fluent corre-sponds to a monadic second-order variable in the Bu?chi-Elgot-Trakhtenbrot theorem.it misrepresents the essential continuity ofevents of motion.
For one thing, aside fromthe beginning and end points, the choice of afinite set of subevents is altogether arbitrary.How many subevents are there, and how is oneto choose them?
Notice that to stipulate thesubevents as equally spaced, for instance onesecond or 3.5 milliseconds apart, is as arbi-trary and unmotivated as any other choice.Another difficulty with a snapshot conceptu-alization concerns the representation of non-bounded events (activities) such as John ranalong the river (for hours).
A finite sequenceof subevents necessarily has a specified begin-ning and ending, so it cannot encode the ab-sence of endpoints.
And excluding the speci-fied endpoints simply exposes other specifiedsubevents, which thereby become new end-points.
Thus encoding nonbounded events re-quires major surgery in the semantic represen-tation.
[page 316]Jackendoff?s objections are overcome below byfinite-state manipulations that may well be calledsurgery.
Following details supplied in the next sec-tion,2 strings are formed from a finite set X of flu-ents that is allowed to vary so that(i) the continuity desired by Jackendoff arises inthe inverse limit of a system of projections piX(defined below; Table 1), and(ii) the temporal span of any finite string may, onexpanding the set X , stretch without bound tothe left (past) and/or to the right (future).Applying piX , section 2 proceeds to encode a modelA of an interval temporal logic as a string s(A).Building on that encoding, section 3 develops finite-state methods for interval temporal logic.
Section4 concludes with proposals (drawing on work of theearlier sections) for extending the empirical (linguis-tic) coverage.2 From event-intervals to stringsBefore equating the set X of fluents with a modelinterpreting TimeML, let us bring out the intuition2The present work extends a line of research most recentlyreported in (Fernando, 2011, 2011a, 2011b, 2012).
That line isrelated to (Niemi and Koskenniemi, 2009), from which it dif-fers in adopting an alphabet Pow(X) that equates sucession ina string with temporal succession.81?X(?1 ?
?
?
?n) def= (?1 ?X) ?
?
?
(?n ?X)bc(s) def=???bc(?s?)
if s = ??s??bc(??s?)
if s = ???s?
and ?
6= ?
?s otherwiseunpad(s) def={ unpad(s?)
if s = s?
or s?s otherwiseTable 1: Behind piX(s) def= unpad(bc(?X(s)))underlying the function piX through a familiar exam-ple.
We can represent a calendar year by the stringsmo def= Jan Feb ?
?
?
Decof length 12 (with a month in each box), or (addingone of 31 days d1, d2,.
.
., d31) the stringsmo,dy def= Jan,d1 Jan,d2 ?
?
?Jan,d31 Feb,d1 ?
?
?
Dec,d31of length 365 (a box per day in a non-leap year).3Unlike the points in say, the real line R, a box cansplit if we enlarge the set X of fluents we can put init, as illustrated by the change from Jan in smo toJan,d1 Jan,d2 ?
?
?
Jan,d31 in smo,dy.
Two func-tions link the strings smo,dy and smo(i) a function ?mo that keeps only the months in abox so that?mo(smo,dy) = Jan 31 Feb 28 ?
?
?
Dec 31(ii) block compression bc, which compresses con-secutive occurrences of a box into one, map-ping ?mo(smo,dy) tobc( Jan 31 Feb 28 ?
?
?
Dec 31) = smoso that bc(?mo(smo,dy)) = smo.
As made precisein Table 1, ?X ?sees only X?
(setting modef= {Jan,3In (Niemi and Koskenniemi, 2009), smo is represented asthe string[m Jan ]m [m Feb ]m [m Mar ]m ... [m Dec ]mof length 36 over 14 symbols (the 12 months plus the 2 brackets[m and ]m) on which finite-state transducers operate.
(See theprevious footnote.
)R ?Allen sR ?
Lpi({x, x?})
?R([a, b], [a?, b?
])x = x?
x, x?
a = a?, b = b?x s x?
x, x?
x?
a = a?, b < b?x si x?
x, x?
x a = a?, b?
< bx f x?
x?
x, x?
a?
< a, b = b?x fi x?
x x, x?
a < a?, b = b?x d x?
x?
x, x?
x?
a?
< a, b < b?x di x?
x x, x?
x a < a?, b?
< bx o x?
x x, x?
x?
a < a?
?
b < b?x oi x?
x?
x, x?
x a?
< a ?
b?
< bx m x?
x x?
--x < x?
x x?
b < a?x mi x?
x?
x --x > x?
x?
x b?
< aTable 2: The Allen relations via pi{x,x?
}Feb, .
.
.Dec} to make ?mo an instance of ?X ), whilebc eliminates stutters, hardwiring the view that timepasses only if there is change (or rather: we observetime passing only if we observe a change within abox).
As this example shows, temporal granularitydepends on the set X of observables that may goinside a box.
Writing bcX for the composition map-ping s to bc(?X(s)), we havebc{Jan}(smo,dy) = bc{Jan}(smo) = Janbc{Feb}(smo,dy) = bc{Feb}(smo) = Febbc{d3}(smo,dy) = ( d3 )12 .Now, the function piX is bcX followed by the deletionunpad of any initial or final empty boxes (Table1).4 We can then define a fluent x to be an s-intervalif pi{x}(s) is x .
Next, let Lpi(X) be the languagepiX [?x?X pi?1{x} x ] consisting of strings piX(s) fors ?
Pow(X)?
such that pi{x}(s) = x for all x ?
X .Note that Lpi({x}) = { x } while for x 6= x?,Lpi({x, x?})
consists of 13 strings sR, one per inter-val relation R in (Allen, 1983); see columns 1 and 2of Table 2Lpi({x, x?})
= {sR | R ?
Allen} .4Restricted to a finite alphabet, the maps ?X , bc, unpadand piX are computable by finite-state transducers (Fernando,2011).82For example, in the case of the ?f inish?
relationf?Allen,s |= x fx?
??
pi{x,x?
}(s) = x?
x, x?provided x and x?
are s-intervals.
The third columnof Table 2 characterizes R ?Allen as conditions ?Ron pairs [a, b] and [a?, b?]
of real numbers (in R) de-noting closed intervals5 ?
e.g.,[a, b] f [a?, b?]
??
a?
< a and b = b?
.This brings us to the semantics of TimeML pro-posed in (Pratt-Hartmann, 2005a).
A system T PLof Temporal Preposition Logic is built from an infi-nite set E of event-atoms, and interpreted relative tothe familyI def= {[a, b] | a, b ?
R and a ?
b}of closed, bounded non-empty intervals in R. AT PL-model A is defined to be a finite subset ofI ?
E. The intuition is that a pair ?I, e?
in A repre-sents ?an occurrence of an event of type e over theinterval?
I (Pratt-Hartmann, 2005; page 17), revers-ing the construal in line (2) above of e as a token.Identifying occurrences with events, we can think ofA as a finite set of events, conceived as ?intervalscum description?
(van Benthem, 1983; page 113).Treating events as fluents, we haveProposition 1.
For every T PL-model A, there is aunique string s(A) ?
Lpi(A) such that for all x, x?
?A with x = ?I, e?
and x?
= ?I ?, e??,pi{x,x?
}(s(A)) = sR ??
?R(I, I ?
)for R ?Allen and sR, ?R specified in Table 2.To construct the string s(A), let Ends(A) be the setof endpoints of AEnds(A) def=?I?dom(A)ends(I)where dom(A) is the domain {I | (?e ?
E) ?I, e?
?A} of A, and ends([a, b]) is the unordered pair5Over non-empty closed intervals that include points [a, a],the Allen relations m and mi collapse to o and oi, respectively.Alternatively, we can realize m and mi by trading closed in-tervals for open intervals (required to be non-empty); see theAppendix below.x1 def= ?
[1, 5], e?
r1 = 1, r2 = 4x2 def= ?
[4, 9], e?
r3 = 5, r4 = 9x3 def= ?
[9, 50], e??
r5 = 50A def= {x1, x2, x3}Table 3: Example s(A) = x1 x1, x2 x2 x2, x3 x3{a, b}.
Sorting gives Ends(A) = {r1, r2, .
.
.
, rn}with r1 < r2 < ?
?
?
< rn.
Breaking [r1, rn] up into2n?
1 intervals, let?i def= {?I, e?
?
A | ri ?
I} for 1 ?
i ?
nand?i def= {?I, e?
?
A | [ri, ri+1] ?
I} for 1 ?
i < n.Interleaving and block-compressing gives(A) def= bc(?1?1 ?
?
?
?n?1?n?1?n)(see Table 3 for an example).
One may then verify(by induction on the cardinality of the domain of A)that s(A) is the unique string in Lpi(A) satisfyingthe equivalence in Proposition 1.But is encoding A as a string s(A) adequate forT PL-satisfaction?
Let us introduce T PL-formulaethrough an English example.
(8) During each of John?s drives to Boston, he atea donut.
(8) translates in T PL to (9), which is interpretedrelative to a T PL-model A and an interval I ?
Iaccording to (10) and (11), with [e]?
abbreviating??e???
(as usual), > a tautology (in that A |=I >always) and ?
as strict (irreflexive) subset.
(9) [John-drive-to-Boston] ?John-eat-a-donut?>(10) A |=I ?e??
def??
(?J ?
I s.t.
A(J, e))A |=J ?
(11) A |=I ??
def??
not A |=I ?Clause (10) shows off a crucial feature of T PL:quantification over intervals is bounded by the do-main of A; that is, quantification is restricted to in-tervals that are paired up with an event-atom by the83T PL-model (making T PL ?quasi-guarded?
; Pratt-Hartmann, 2005; page 5).
This is not to say that theonly intervals I that may appear in formingA |=I ?are those in the domain of A.
Indeed, for [a, b] ?
Iand [a?, b?]
?
dom(A) such that [a?, b?]
?
[a, b],T PL uses intervalsinit([a?, b?
], [a, b]) def= [a, a?
]fin([a?, b?
], [a, b]) def= [b?, b]to interpret {e}<?
and {e}>?
according to (12).
(12) A |=I {e}<?
def??
(?
!J ?
I s.t.
A(J, e))A |=init(J,I) ?A |=I {e}>?
def??
(?
!J ?
I s.t.
A(J, e))A |=fin(J,I) ?The bang !
in ?
!J in (12) expresses uniqueness,which means that under the translation of (1) as (13)below, the interval I of evaluation is required to con-tain a unique event of John talking with Mary.
(1) After his talk with Mary?
??
?
John drove to Boston?
??
?.p q(13) {p}>?q?>For a translation of (1) more faithful to(2) p(e) ?
q(e?)
?
after(e, e?
)than (13),6 it suffices to drop !
in (12) for ?e?< and?e?> in place of {e}< and {e}> respectively (Fer-nando, 2011a), and to revise (13) to ?p?>?q?>.
Re-laxing uniqueness, we can form [p]>?q?> for afterevery talk with Mary, John drove to Boston, as wellas ?p?>?p?> for after a talk with Mary, John talkedwith Mary again.
T PL has further constructs efand el for the (minimal) first and (minimal) last e-events in an interval.Returning to the suitability of s(A) for T PL, con-sider the question: when do two pairsA, I andA?, I ?of T PL-models A,A?
and intervals I, I ?
?
I sat-isfy the same T PL-formulae?
Some definitions arein order.
A bijection f : A ?
B between finite sets6Caution: e and e?
are tokens in (2), but types in T PL.A and B of real numbers is order-preserving if forall a, a?
?
A,a < a?
??
f(a) < f(a?
)in which case we write f : A ?= B.
Given a T PL-model A, and a function f : Ends(A) ?
R, let Afbe A with all its intervals renamed by fAf def= {?
[f(a), f(b)], e?
| ?
[a, b], e?
?
A} .Now, we say A is congruent with A?
and write A ?=A?
if there is an order-preserving bijection betweenEnds(A) and Ends(A?)
that renames A to A?A ?= A?
def??
(?f : Ends(A) ?= Ends(A?))A?
= Af .Finally, we bring I into the picture by defining therestriction AI of A to I to be the subsetAI def= {?J, e?
?
A | J ?
I}of A with intervals strictly contained in I .Proposition 2.
For all finite subsets A and A?
ofI ?
E and all intervals I, I ?
?
I, if AI ?= A?I?
thenfor every T PL-formula ?,A |=I ?
??
A?
|=I?
?
.Proposition 2 suggests normalizing a T PLmodelAwith endpoints r1 < r2 < ?
?
?
< rn to nr(A) with rirenamed to inr(A) def= Af where f def= {?r1, 1?, .
.
.
, ?rn, n?
}.Assigning every T PL-formula ?
the truth setT (?)
def= {s(nr(AI)) | A is a T PL-model,I ?
I and A |=I ?
}givesProposition 3.
For every T PL-formula ?, T PL-model A, and interval I ?
I,A |=I ?
??
s(nr(AI)) ?
T (?)
.To bolster the claim that T (?)
encodes T PL-satisfaction, we may construct T (?)
by inductionon ?, mimicking the clauses for T PL-satisfaction,as in (14).
(14) T (?
?
??)
= T (?)
?
T (??
)Details are provided in the next section, where weconsider the finite-state character of the clauses, andmay verify Propositions 2 and 3.843 Regularity and relations behind truthA consequence of Proposition 3 is that the entail-ment from ?
to ??
given by?
|?I,E ??
def??
(?
finite A ?
I ?
E)(?I ?
I)A |=I ?
implies A |=I ?
?becomes equivalent to the inclusion T (?)
?
T (??
),or to the unsatisfiability of ?
?
????
|?I,E ??
??
T (?
?
???)
= ?assuming classical interpretations (14) and (15) ofconjunction ?
and negation ?.
(15) T (??)
= ?+ ?
T (?
)Finite-state methods are of interest as regular lan-guages are closed under intersection and comple-mentation.
(Context-free languages are not; nor iscontainment between context-free languages decid-able.)
The alphabet ?
in (15) is, however, infinite;?
is the set Fin(J ?
E) of finite subsets of J ?
E,where J is the setJ def= {[n,m] ?
I | n,m ?
Z+}of intervals in I with endpoints in the set Z+ ofpositive integers 1, 2, .
.
.
(containing the domain ofa normalized T PL-model).
As with piX , regular-ity demands restricting ?
to a finite subalphabet ?or better: subalphabets given by the set F of pairs?I ?, E??
of finite subsets I ?
and E?
of J and E re-spectively, for which?
=??I?,E??
?FPow(I ?
?
E?)
.The basis of the decidability/complexity results in(Pratt-Hartmann, 2005) is a lemma (number 3 inpage 20) that, for any T PL-formula ?, bounds thesize of a minimal model of ?.
We get a computablefunction mapping a T PL-formula ?
to a finite sub-set I?
of J just big enough so that if ?
is T PL-satisfiable,(?A ?
Pow(I?
?
E?
))(?I ?
I?)
A |=I ?whereE?
is the finite subset ofE occurring in ?.
Tominimize notational clutter, we leave out the choice?I ?, E??
?
F of a finite alphabet below.Next, keeping intersection and complementationin (14) and (15) in mind, let us call an opera-tion regularity-preserving (rp) if its output is regu-lar whenever all its inputs are regular.
To interpretT PL, we construe operations broadly to allow theirinputs and output to range over relations betweenstrings (and not just languages), construing a rela-tion to be regular if it is computable by a finite-statetransducer.
For instance, the modal diamond ?e?
la-belled by an event-atom e ?
E is interpreted via anaccessibility relation R(e) in the usual Kripke se-manticsT (?e??)
= R(e)?1T (?
)of ?e??
where R?1L is the set {s ?
??
| (?s?
?L) sRs?}
of strings related by R to a string in L.The operation that outputs R?1L on inputs R and Lis rp.
But what is the accessibility relationR(e)?Three ingredients go into makingR(e):(i) a notion of strict containment A betweenstrings(ii) the demarcation s?
of a string s(iii) a set D(e) of strings representing full occur-rences of e.We take up each in turn, starting withA, which com-bines two ways a string can be part of another.
Tocapture strict inclusion ?
between intervals, we saya string s?
is a proper factor of a string s, and writes pfac s?, if s?
is s with some prefix u and suffix vdeleted, and uv is non-emptys pfac s?
??
(?u, v) s = us?v and uv 6= .
(Dropping the requirement uv 6=  gives factorssimpliciter.)
The second way a string s?
may be partof s applies specifically to strings of sets.
We say ssubsumes s?, and write s s?, if they are of the samelength, and ?
holds componentwise between them?1 ?
?
?
?n  ?
?1 ?
?
???mdef??
n = m and?
?i ?
?i for 1 ?
i ?
n.Now, writing R;R?
for the relational composition ofbinary relations R and R?
in which the output of Ris fed as input to R?s R;R?
s?
def??
(?s??)
sRs??
and s??R?s?
,85we compose pfac with  for strict containment AA def= pfac ;  (=  ; pfac) .
(It is well-known that relational composition ; isrp.)
Next, the idea behind demarcating a string sis to mark the beginning and ending of every in-terval I mentioned in s, with fresh fluents bgn-Iand I-end.
The demarcation (?1?2 ?
?
??n)?
of?1?2 ?
?
?
?n adds bgn-I to ?i precisely ifthere is some e such that ?I, e?
?
?i and eitheri = 1 or ?I, e?
6?
?i?1and adds I-end to ?i precisely ifthere is some e such that ?I, e?
?
?i and eitheri = n or ?I, e?
6?
?i+1.7For s = s(A) given by the example in Table 3,s?
= x1, bgn-I1 x1, x2, I1-end, bgn-I2x2 x2, x3, I2-end, bgn-I3 x3, I3-endWe then form the denotation DI?
(e) of e relative toa finite subset I ?
of I by demarcating every string in?I?I?
?I, e?+ as in (16).
(16) DI?
(e) def= ?I?I?{s?
| s ?
?I, e?+}To simplify notation, we suppress the subscript I ?on DI?(e).
Restricting strict containment A to D(e)givessR?
(e) s?
def??
s A s?
and s?
?
D(e)from which we defineR(e), making adjustments fordemarcationsR(e) s?
def??
s?
R?
(e) s?
?.That is, R(e) is the composition ??;R?
(e); ??
wheredemarcation ??
is inverted by ??.
As T PL?s otherconstructs are shown in ?4.1 of (Fernando, 2011a)to be interpretable by rp operations, we have7The markers bgn-I and I-end are analogous to the brackets[g and ]g in (Niemi and Koskenniemi, 2009), an essential differ-ence being that a grain (type) g supports multiple occurrencesof [g and ]g, in contrast to the (token) interval I .Proposition 4.
All T PL-connectives can be inter-preted by rp operations.Beyond T PL, the interval temporal logic HS of(Halpern and Shoham, 1991) suggests variants of?e??
with strict containment A in R(e) replaced byany of Allen?s 13 interval relations R.(17) A |=I ?e?R?
def??
(?J s.t.
I R J)A(J, e) and A |=J ?To emulate (17), we need to mark the evaluation in-terval I in A by some r 6?
E, settingAr[I] def= A ?
{?I, r?
}rather than simply forming AI (which will do if wecan always assume the model?s full temporal extentis marked).
A string s = ?1 ?
?
?
?n r-marks I if?I, r?
?
?ni=1 ?i.
If that interval is unique, we says is r-marked, and write I(s) for the interval it r-marks, and s?
for s with the fluent ?I(s), r?
deleted(so that s(Ar[I])?
= s(A)).
For any of the rela-tions R ?Allen, we let ?R hold between r-markedstrings that are identical except possibly for the in-tervals they r-mark, which are related by Rs ?R s?
def??
s?
= s??
and I(s) R I(s?
).Next, given an event-atom e, we let R(e)R be a bi-nary relation that holds between r-marked strings re-lated by ?R, the latter of which picks out a factorsubsuming some string in D(e)sR(e)R s?
def??
s ?R s?
and(?d ?
D(e)) s?r  dwhere s?r is the factor of s?
that begins with bgn-I(s?
)and ends with I(s?)-end.
Replacing AI by Ar[I] inT (?)
forTr(?)
def= {s(nr(Ar[I])) | A is a T PL-model,I ?
I and A |=I ?}
,(17) corresponds toTr(?e?R?)
= R(e)?1R Tr(?
).864 Conclusion and future workThe key notion behind the analysis above of time interms of strings is the map piX , which for X consist-ing of interval-event pairs ?I, e?, is applied in Propo-sition 1 to turn a T PL-model A into a string s(A).As far as T PL-satisfaction A |=I ?
is concerned,we can normalize the endpoints of the intervals to aninitial segment of the positive integers, after restrict-ing A to intervals contained in the evaluation inter-val I (Proposition 3).
For a finite-state encoding ofT PL-satisfaction, it is useful to demarcate the oth-erwise homogeneous picture ?I, e?
+ of ?I, e?, andto define a notion A of proper containment betweenstrings.
We close with further finite-state enhance-ments.Demarcation is linguistically significant, bearingdirectly on telicity and the so-called Aristotle-Ryle-Kenny-Vendler classification (Dowty, 1979), illus-trated by the contrasts in (18) and (19).
(18) John was driving |?
John droveJohn was driving to L.A. 6|?
John drove to L.A.(19) John drove for an hourJohn drove to L.A. in an hourThe difference at work in (18) and (19) is that Johndriving to L.A. has a termination condition, in(John,L.A.
), missing from John driving.
Given a fluentsuch as in(John, L.A.), we call a language L ?-telicif for every s ?
L, there is an n ?
0 such thats  ??
n ?
(which is to say: a string in L endsas soon as ?
becomes true).
L is telic if it is ?-telic,for some ?.
Now, the contrasts in (18) and (19) canbe put down formally to the language for John driv-ing to L.A. being telic, but not that for John driving(Fernando, 2008).The demarcation (via ?)
just described does notrely on some set I ?
of intervals I from which flu-ents bgn-I and I-end are formed (as in s?
from sec-tion 3).
There are at least two reasons for attempt-ing to avoid I ?
when demarcating or, for that matter,building the set D(e) of denotations of e. The firstis that under a definition such as (16), the numberof e-events (i.e., events of type e) is bounded by thecardinality of I ?.
(16) DI?
(e) def= ?I?I?{s?
| s ?
?I, e?+}The second is that an interval arguably has little todo with an e-event being an e-event.
An interval[4,9] does not, in and of itself, make ?
[4, 9], e?
an e-event; ?
[4, 9], e?
is an e-event only in a T PL-modelthat says it is.
An alternative is to express in stringswhat holds during an event that makes it an e-event.Consider the event type e of Pat walking a mile.
In-cremental change in an event of that type can be rep-resented through a parametrized fluent f(r) with pa-rameter r ranging over the reals in the unit interval[0, 1], such that f(r) says Pat has walked r?
(a mile).Let D(e) bef(0) f?+f(1)where f?
abbreviates the fluent(?r < 1) f(r) ?
Previous(?f(r)).Previous is a temporal operator that constrainsstrings ?1 ?
?
?
?n so that whenever Previous(?)
be-longs to ?i+1, ?
belongs to ?i; that is,Previous(?)
?
?using an rp binary operator ?
on languages thatcombines subsumption  with constraints famil-iar from finite-state morphology (Beesley and Kart-tunen, 2003).The borders and interior of ?I, e?
aside, there isthe matter of locating an e-string in a larger string(effected in T PL through strict inclusion ?, thestring-analog of which is proper containment A).But what larger string?
The influential theory oftense and aspect in (Reichenbach, 1947) places e rel-ative not only to the speech S but also to a referencetime r, differentiating, for instance, the simple paste, r S from the present perfect e S,r , as requiredby differences in defeasible entailments |?, (20), andacceptability, (21).
(20) Pat has left Paris |?
Pat is not in ParisPat left Paris 6|?
Pat is not in Paris(21) Pat left Paris.
(?Pat has left Paris.
)But Pat is back in Paris.The placement of r provides a bound on the iner-tia applying to the postcondition of Pat?s departure87(Fernando, 2008).
The extension Ar[I] proposed insection 3 to the combinationAI (adequate for T PL,but not HS) explicitly r-marks the evaluation inter-val I , facilitating an account more intricate than sim-ply A of e?s occurrence in the larger string.
T PLgoes no further than Ramsey in analyzing That Cae-sar died as an ontological claim that an event of cer-tain sort exists (Parsons, 1990), leading to the viewof an event as a truthmaker (Davidson, 1967; Mulli-gan et al, 1984).
The idea of an event (in isolation)as some sort of proof runs into serious difficulties,however, as soon as tense and aspect are broughtinto the picture; complications such as the Imperfec-tive Paradox (Dowty, 1979), illustrated in (22), raisetricky questions about what it means for an event toexist and how to ground it in the world (speakingloosely) in which the utterance is made.
(22) John was drawing a circle when he ran out ofink.But while the burden of proof may be too heavy tobe borne by a single pair ?I, e?
of interval I andevent-atom e, the larger picture in which the pair isembedded can be strung out, and a temporal state-ment ?
interpreted as a binary relation R?
betweensuch strings that goes well beyond A.
The inputs toR?
serve as indices, with those in the domain ofR?supporting the truth of ??
is true at s def??
(?s?)
sR?
s?
(Fernando, 2011, 2012).
In witnessing truth at par-ticular inputs, the outputs of R?
constitute denota-tions more informative than truth values, from whichindices can be built bottom-up, in harmony with asemantic analysis of text from its parts (to whichpresumably TimeML is committed).
An obviousquestion is how far finite-state methods will take us.Based on the evidence at hand, we have much fur-ther to go.AcknowledgmentsMy thanks to Daniel Isemann for useful, sustaineddiscussions.
The work is supported by EI Grant #CC-2011-2601B:GRCTC.ReferencesJames F. Allen.
1983.
Maintaining knowledge abouttemporal intervals.
Communications of the Associa-tion for Computing Machinery 26(11): 832?843.James F. Allen and George Ferguson.
Actions and eventsin interval temporal logic.
J.
Logic and Computation,4(5):531?579, 1994.Kenneth R. Beesley and Lauri Karttunen.
2003.
FiniteState Morphology.
CSLI, Stanford, CA.Michael Bennett and Barbara Partee.
1972.
Toward thelogic of tense and aspect in English.
Indiana UniversityLinguistics Club, Bloomington, IN.J.F.A.K.
van Benthem.
1983.
The Logic of Time.
Reidel.Edmund M. Clarke, Jr., Orna Grumberg and Doron A.Peled.
1999.
Model Checking.
MIT Press.Donald Davidson.
1967.
The logical form of action sen-tences.
In The Logic of Decision and Action, pages 81?95.
University of Pittsburgh Press.David Dowty.
1979.
Word Meaning and Montague Gram-mar.
Kluwer.Tim Fernando.
2008.
Branching from inertia worlds.
J.Semantics 25:321?344.Tim Fernando.
2011.
Regular relations for temporalpropositions.
Natural Language Engineering 17(2):163?184.Tim Fernando.
2011a.
Strings over intervals.
TextInfer2011 Workshop on Textual Entailment, pages 50-58,Edinburgh (ACL Archives).Tim Fernando.
2011b.
Finite-state representations em-bodying temporal relations.
In 9th International Work-shop FSMNLP 2011, Blois, pages 12?20.
A revised,extended version is in the author?s webpage.Tim Fernando.
2012.
Steedman?s temporality proposaland finite automata.
In Amsterdam Colloquium 2011,Sprnger LNCS 7218, pages 301-310.Joseph Y. Halpern and Yoav Shoham.
1991.
A Proposi-tional Modal Logic of Time Intervals.
J. Associationfor Computing Machinery 38(4): 935?962.ISO.
2007.
ISO Draft International Standard 24617-1 Se-mantic annotation framework ?
Part 1: Time andevents.
ISO (Geneva).Ray Jackendoff.
1996.
The proper treatment of mea-suring out, telicity, and perhaps even quantificationin English.
Natural Language and Linguistic Theory14:305?354.Hans Kamp and Uwe Reyle.
1993.
From Disocurse toLogic.
Kluwer.Kevin Mulligan, Peter Simons and Barry Smith.
1984.Truth-makers.
Philosophy and Phenomenological Re-search 44: 287?321.Jyrki Niemi and Kimmo Koskenniemi.
2009.
Repre-senting and combining calendar information by using88finite-state transducers.
In 7th International WorkshopFSMNLP 2008, pages 122?33.
Amsterdam.Terry Parsons.
1990.
Events in the Semantics of English.MIT Press.Ian Pratt-Hartmann.
2005.
Temporal prepositions andtheir logic.
Artificial Intelligence 166: 1?36.Ian Pratt-Hartmann.
2005a.
From TimeML to TPL?.
InAnnotating, Extracting and Reasoning about Time andEvents, Schloss Dagstuhl.James Pustejovsky, Jose?
Castan?o, Robert Ingria, RoserSaur?
?, Robert Gaizauskas, Andrea Setzer and GrahamKatz.
2003.
TimeML: Robust Specification of Eventand Temporal Expressions in Text.
In 5th InternationalWorkshop on Computational Semantics, pages 337-353.
Tilburg.Hans Reichenbach.
1947.
Elements of Symbolic Logic.Macmillan & Co (New York).Carol Tenny.
1987.
Grammaticalizing Aspect and Affect-edness.
PhD dissertation, Department of Linguisticsand Philosophy, MIT.Wolfgang Thomas.
1997.
Languages, automata and logic.In Handbook of Formal Languages: Beyond Words,Volume 3, pages 389?455.
Springer-Verlag.Appendix: a case of ?less is more?
?Because the set I of intervals from which a T PL-model A is constructed includes singleton sets[a, a] = {a} (for all real numbers a), there can neverbe events x and x?
in A such that x meets (or abuts)x?, x m x?, according to Table 2 above.
It is, how-ever, easy enough to throw out sets [a, a] from I,requiring that for [a, b] ?
I, a be strictly less thanb.
(In doing so, we follow (Allen, 1983) and (Pratt-Hartmann, 2005a), but stray from (Pratt-Hartmann,2005).)
The result is that the overlap at b between[a, b] and [b, c] is deeemed un-observable (effec-tively re-interpreting closed intervals by their interi-ors, understood to be non-empty).
The third column?R([a, b], [a?, b?])
in Table 2 is modified to a condi-tion [a, b]R?
[a?, b?]
that differs on the cases whereRis one of the four Allen relations o,m,oi,mi, split-ting the disjunction a?
?
b in o with m, and a ?
b?in oi with mi.R ?Allen sR ?
Lpi({e1, e2}) [a, b] R?
[a?, b?
]x o x?
x x, x?
x?
a < a?
< b < b?x m x?
x x?
b = a?x oi x?
x?
x, x?
x a?
< a < b?
< bx mi x?
x?
x b?
= aAll other rows in Table 2 are the same for[a, b] R?
[a?, b?].
The somewhat wasteful encodings(A) in Proposition 1 then becomes s?
(A) inProposition 1?.
For every T PL-model A such thata < b for all [a, b] ?
dom(A), there is a uniquestring s?
(A) ?
Lpi(A) such that for all x, x?
?
Awith x = ?I, e?
and x?
= ?I ?, e?
?, and R ?Allenpi{x,x?}(s?
(A)) = sR ??
I R?I ?.The encoding s?
(A) is formed exactly as s(A) is insection 2 above from the endpoints r1 < r2 < ?
?
?
<rn of dom(A), except that the ?i?s for the endpointsri are dropped (these being un-observable), leavingus with the ?i?s for [ri, ri+1]s?
(A) def= bc(?1 ?
?
?
?n?1).Beyond Proposition 1, the arguments above fors(A) carry over to s?
(A), with the requirement ona T PL-model A that a < b for all [a, b] ?
dom(A).It is noteworthy that (Pratt-Hartmann, 2005a) makesno mention that this requirement is a departure from(Pratt-Hartmann, 2005).
Although the restrictiona < b rules out T PL-models with points [a, a] intheir domain, it also opens T PL up to strings inwhich events meet ?
a trade-off accepted in (Allenand Ferguson, 1994).
To properly accommodatepoints alongside larger intervals, we can introducea fluent indiv marking out boxes corresponding topoints [a, a] (as opposed to divisible intervals [a, b]where a < b), and re-define piX to leave boxes withindiv in them alone.
From this perspective, the re-striction a < b is quite compatible with piX as de-fined above.
But can we justify the notational over-head in introducing indiv and complicating piX?
Wesay no more here.89
