Proceedings of the 5th International Workshop on Semantic Evaluation, ACL 2010, pages 190?193,Uppsala, Sweden, 15-16 July 2010. c?2010 Association for Computational LinguisticsKP-Miner: Participation in SemEval-2Samhaa R. El-BeltagyCairo UniversityGiza, Egypt.samhaa@computer.orgAhmed RafeaThe American University in CairoNew Cairo, Egypt.rafea@aucegypt.eduAbstractThis paper briefly describes the KP-Miner sys-tem which is a system developed for the ex-traction of keyphrases from English and Arab-ic documents, irrespective of their nature.
Thepaper also outlines the performance of the sys-tem in the ?Automatic Keyphrase Extractionfrom Scientific Articles?
task which is part ofSemEval-2.1 IntroductionKP-Miner (El-Beltagy, 2006) (El-Beltagy, 2009)is a system for the extraction  of keyphrases fromEnglish and Arabic documents.
When develop-ing the system, the goal was to build a generalpurpose keyphrase extraction system that can beeasily configured by users based on their under-standing of the documents from which keyphras-es are to be extracted and without the need forany training documents or the use of any sophis-ticated natural language processing or linguistictools.
As such, the keyphrase extraction processin KP-Miner is an un-supervised one.
Whenbuilding a general purpose keyphrase extractionsystem, this was an important objective, as train-ing data is not always readily available for anytype of data.
The goal of entering the KP-Minersystem into the SemEval-2 competition, was tosee how well it will perform on a specific task,without making any changes in its default para-meters.2 System OverviewKeyphrase extraction in the KP-Miner system isa three step process: candidate keyphrase selec-tion, candidate keyphrase weight calculation andfinally keyphrase refinement.
Each of thesesteps, is explained in the following sub-sections.More details about the employed algorithm, andjustification for using certain values for selectedparameters, can be found in (El-Beltagy, 2009).2.1 Candidate keyphrase selectionIn KP-Miner, a set of rules is employed  in orderto elicit candidate keyphrases.
As a phrase willnever be separated by punctuation marks withinsome given text and will rarely have stop wordswithin it, the first condition a sequence of wordshas to display in order to be considered a candi-date keyphrase, is that it is not be separated bypunctuation marks or stop words.
A total of 187common stopwords (the, then, in, above, etc)are used in the candidate keyphrase extractionstep.
After applying this first condition on anygiven document, too many candidates will begenerated; some of which will make no sense toa human reader.
To filter these out, two furtherconditions are applied.
The first condition statesthat a phrase has to have appeared at least ntimes in the document from which keyphrasesare to be extracted, in order to be considered acandidate keyphrase.
This is called the least al-lowable seen frequency(lasf) factor and in theEnglish version of the system, this is set to 3.However, if a document is short, n is decre-mented depending on the length of the document.The second condition is related to the positionwhere a candidate keyphrase first appears withinan input document.
Through observation as wellas experimentation, it was found that in longdocuments, phrases occurring for the first timeafter a given threshold, are very rarely keyphras-es.
So a cutoff constant CutOff is defined interms of a number of words after which if aphrase appears for the first time, it is filtered outand ignored.
The initial prototype of the KP-Miner  system (El-Beltagy, 2006), set this cutoffvalue to a constant (850).
Further experimenta-tion carried out in (El-Beltagy, 2009) revealedthat an optimum value for this constant is 400.
In190the implementation of the KP-Miner system, thephrase extraction step described above is carriedout in two phases.
In the first phase, words arescanned until either a punctuation mark or a stopword is encountered.
The scanned sequence ofwords and all possible n-grams within the en-countered sequence where n can vary from 1 tosequence length-1, are stemmed and stored inboth their original and stemmed forms.
If thephrase (in its stemmed or original form) or anyof its sub-phrases, has been seen before, then thecount of the previously seen term is incrementedby one, otherwise the previously unseen term isassigned a count of one.
Very weak stemming isperformed in this step using only the first step ofthe Porter stemmer (Porter, 1980).
In the secondphase, the document is scanned again for thelongest possible sequence that fulfills the condi-tions mentioned above.
This is then consideredas a candidate keyphrase.
Unlike most of theother keyphrase extraction systems, the devisedalgorithm places no limit on the length of keyp-hrases, but it was found that extracted keyphrasesrarely exceed three terms.2.2 Candidate  keyphrases weight calcula-tionSingle key features obtained from documents bymodels such as TF-IDF  (Salton and Buckley,1988) have already been shown to be representa-tive of documents from which they?ve been ex-tracted as demonstrated by their wide and suc-cessful use in clustering and classification tasks.However, when applied to the task of keyphraseextraction, these same models  performed verypoorly (Turney, 1999).
By looking at almostany document, it can be observed  that the occur-rences of phrases is much less frequent than theoccurrence of single terms within the same doc-ument.
So it can be concluded that one of thereasons that TF-IDF performs poorly on its ownwhen applied to the task of keyphrase extraction,is that it does not take this fact into considerationwhich results in a bias  towards single words asthey occur in larger numbers.
So, a boosting fac-tor is needed for compound terms in order to bal-ance this bias towards single terms.
In this workfor each input document d from which keyphras-es are to be extracted, a boosting factor Bd  iscalculated as follows:Bd=  |Nd| /(|Pd| *?
)and if Bd > ?
then Bd  = ?Here  |Nd|  is the number of all candidate terms indocument d, |Pd|  is the number of candidateterms whose length exceeds one in document dand ?
and ?
are weight adjustment constants.The values used by the implemented system are3 for  ?
and 2.3 for ?
.To calculate the weights of document terms, theTF-IDF model in conjunction with the intro-duced boosting factor, is used.
However, anotherthing to consider when applying TF-IDF for  ageneral application rather than a corpus specificone, is that keyphrase combinations do not occuras frequently within a document set as do singleterms.
In other words, while it is possible to col-lect frequency information for use by a generalsingle keyword extractor from a moderately largeset of random documents, the same is not true forkeyphrase information.
There are two possibleapproaches to address this observation.
In thefirst, a very large corpus of a varied nature canbe used to collect keyphrase related frequencyinformation.
In the second, which is adopted inthis work, any encountered phrase is consideredto have appeared only once in the corpus.
Thismeans that for compound  phrases, frequencywithin a document as well as the boosting factorare really what determine its weight as the idfvalue for all compound phrases will be a constantc determined by the size of the corpus used tobuild frequency information for single terms.
Ifthe position rules described in (El-Beltagy, 2009)are also employed, then the position factor is alsoused in the calculation for the term weights.
Insummary, the  following equation is used to cal-culate the weight of candidate keyphrases wheth-er single or compound:wi j = tfi j* idf * Bi* PfWhere:wij =  weight of term tj in Document Ditfi j =  frequency of term tj in Document Diidf = log2 N/n where N is the number of doc-uments in the collection and n is num-ber of documents where term tj occursat least once.
If the term is compound, nis set to 1.Bi = the boosting factor associated with doc-ument DiPf=  the  term position associated factor.
Ifposition rules are not used this is set to1.2.3 Final Candidate Phrase List RefinementThe KP-Miner system, allows the user tospecify a  number  n of keyphrases s/he wantsback and uses the sorted list to return the top nkeyphrases requested by the user.
The defaultnumber of n is  five.
As stated in step one, when191generating candidate  keyphrases, the longestpossible sequence of words that are un-interrupted by possible phrase terminators, aresought and stored and so are sub-phrases con-tained within that sequence provided that theyappear somewhere in the text on their own.
Forexample, if the  phrase ?excess body weight?
isencountered five times in a document, the phraseitself will be stored along with a count of five.
Ifthe sub-phrase , ?body weight?,  is also encoun-tered on its own, than it will also be stored alongwith the number of times it appeared in the textincluding the number of times it appeared as partof the phrase ?excess body weight?.
This meansthat an overlap between the count of two or morephrases can exist.
Aiming to eliminate this over-lap in counting early on can contribute to thedominance of possibly noisy phrases or to over-looking potential keyphrases that are encoun-tered as sub-phrases.
However, once  the weightcalculation step has been performed and a clearpicture of which phrases are most likely to bekey ones is obtained, this overlap can be ad-dressed through refinement.
To refine results inthe KP-Miner system, the top n keys are scannedto see if any of them is a sub-phrase of another.If any of them are, then its count is decrementedby the frequency of the term of which it is a part.After this step is completed, weights are re-calculated and a final list of phrases sorted byweight, is produced.
The reason the top n keysrather than all candidates, are used in this step isso that lower weighted keywords do not affectthe outcome of the final keyphrase list.
It is im-portant to note that the refinement step is an op-tional one, but experiments have shown that inthe English version of the system, omitting thisstep leads to the production of keyphrase liststhat match better with author assigned keyword.In (El-Beltagy, 2009) the authors suggested thatemploying  this step leads to the extraction ofhigher quality keyphrases.
Experimentation car-ried out on the Gold standard dataset provided bythe  organizers of the SemEval-2 competition on?Keyphrase Extraction from Scientific Docu-ments?
and described in the next section,  seemsto suggest that this idea is a valid one.3 Participation in the SemEval-2 Com-petitionOne of the new tracks introduced to SemEvalthis year is a track dedicated entirely to keyp-hrase extraction from scientific articles.
The taskwas proposed with the aim of providing partici-pants with  ?the chance to compete and bench-mark?
this  technology (SemEval2, 2010).In this competition, participants were providedwith 40 trial documents, 144 training documents,and 100 test documents.
For the trial and trainingdata, three sets of answers were provided: au-thor-assigned keyphrases, reader-assigned keyp-hrases, and finally a set that is simply a combina-tion between the 2 previous sets.
Unlike author-assigned keyphrases, which may or may not oc-cur in the content, all reader-assigned keyphraseswere said to have been extracted from the papers.The participants were then asked to produce thetop 15 keyphrases for each article in the test doc-ument set and to submit the stemmed version ofthese to the organizers.Evaluation was carried out in the traditionalway in which keyphrase sets extracted by each ofthe participants were matched against answersets  (i.e.
author-assigned keyphrases and reader-assigned keyphrases) to  calculate precision, re-call and F-score.
Participants were then rankedby F-score when extracting all 15 keyphrases.Since the KP-miner system is an unsupervisedkeyphrase extraction system, no use was made ofthe trial and training data.
The system was simp-ly run of the set of test documents, and the outputwas sent to the organizers.
2 different runs weresubmitted: one produced used the initial proto-type of the system, (El-Beltagy, 2006), while thesecond was produced using the more mature ver-sion of the system (El-Beltagy, 2009).
Both sys-tems were run without making any changes totheir default parameters.
The idea was to see howwell the KP-Miner would fair among otherkeyphrase extraction systems without any addi-tional configuration.
The more mature version ofthe system performed better when its resultswere compared to the author-reader combinedkeyphrase set and consequently was the onewhose final results were taken into considerationin the competition.
The system ranked at 2 , witha tie between it and another system when extract-ing 15 keyphrases from the combined keypharseset.
The results are shown in table 1.Precision  Recall F-ScoreHUMB 27.2% 27.8% 27.5%WINGNUS 24.9% 25.5% 25.2%KP-Miner 24.9% 25.5% 25.2%SZTERGAK 24.8% 25.4% 25.1%ICL 24.6% 25.2% 24.9%SEERLAB 24.1% 24.6% 24.3%192KX_FBK 23.6% 24.2% 23.9%DERIUNLP 22.0% 22.5% 22.3%Maui 20.3% 20.8% 20.6%DFKI 20.3% 20.7% 20.5%BUAP 19.0% 19.4% 19.2%SJTULTLAB 18.4% 18.8% 18.6%UNICE 18.3% 18.8% 18.5%UNPMC 18.1% 18.6% 18.3%JU_CSE 17.8% 18.2% 18.0%LIKEY 16.3% 16.7% 16.5%UvT 14.6% 14.9% 14.8%NIRAJIIITH 14.1% 14.5% 14.3%POLYU 13.9% 14.2% 14.0%UKP 5.3% 5.4% 5.3%Table 1: Performance of all participating systems overcombined keywords when extracting 15 keyphrasesWhen evaluating the system on reader as-signed keyphrases only (again when extracting15 keyphrases), the KP-Miner system ranked at 6with a tie between it and another system.
Thesystem?s precision, recall, and f-score were:19.3%,  24.1% , 21.5%  respectively.To test whether the phrase refinement step de-scribed in section 2.3 would improve the resultsor not, this option was turned on, and the resultswere evaluated using the script  and the goldendataset provided by the competition organizers.The results  are shown in tables 2 and 3.Precision  Recall F-ScoreTop 5 29.6%   12.3%   17.4%Top 10  23.3%   20.5% 24.3%Top  15 25.3% 26.1% 25.8%Table 2: Performance over combined keywords whenextracting, 5, 10, and 15 keyphrasesPrecision  Recall F-ScoreTop 5 37.8%   12.9%   19.2%Top 10  30.3%   19.4% 21.1%Top  15 20.1% 25.1% 22.3%Table 3: Performance over reader assigned keywordswhen extracting, 5, 10, and 15 keyphrasesHad these results been submitted, the systemwould have still ranked at number 2 (but morecomfortably so) when comparing its results tothe combined author-reader set of keywords, butit would jumped to third place for the reader as-signed keyphrases.
This improvement confirmswhat the authors hypothesized in (El-Beltagy,2009) which is that the usage of the final refine-ment step does lead to better quality keyphrases.4 Conclusion and future workDespite the fact that the KP-Miner was de-signed as a general purpose keyphrase extractionsystem, and despite the simplicity of the systemand the fact that it requires no training to func-tion, it seems to have performed relatively wellwhen carrying out the task of keyphrase extrac-tion from scientific documents.
The fact that  itwas outperformed, seems to indicate that for op-timal performance for this specific task, furthertweaking of the system?s parameters should becarried out.
In future work, the authors will in-vestigate the usage of machine learning tech-niques for configuring the system for specifictasks.
A further improvement to the system canentail allowing certain stopwords to appear with-in the produced keyphrases.
It is worth notingthat the organizers stated that 55 of the readerassigned keyphrases and 6 of the author assignedkeyphrases (making a total of 61 keyphrases inthe combined dataset), contained the ?of?
stop-word.
However, none of these would have beendetected by the KP-Miner system as currently?of?
is considered as a phrase terminator.ReferencesM Porter.
1980.
An Algorithm for Suffix Stripping,Program, 14, 130-137.G.
Salton and C. Buckley.
1988.
Term-weighting Ap-proaches in Automatic Text Retrieval, Informa-tion Processing and Management, 24:513-523.Peter D. Turney.
1999.
Learning to Extract Keyphras-es from Text, National Research Council, Institutefor Information Technology, ERB-1057.Samhaa.
R. El-Beltagy and Ahmed Rafea.
2009.
KP-Miner: A Keyphrase Extraction System for  Eng-lish and Arabic Documents Information Systems,34(1):132-144.Samhaa R. El-Beltagy.
2006.
KP-Miner: A SimpleSystem for Effective Keyphrase Extraction.
Pro-ceeding of the 3rd IEEE International Confe-rence on Innovations in Information Technol-ogy (IIT ?06),  Dubai, UAE.SemEval.
2010. http://semeval2.fbk.eu/semeval2.php193
