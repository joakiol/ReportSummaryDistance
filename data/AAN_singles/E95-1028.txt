Rapid  Deve lopment  of Morpho log ica l  Descr ip t ions  forFull Language Processing SystemsDavid CarterSRI International Cambridge Computer Science Research Centre23 Millers Yard, Mill LaneCambridge CB2 1RQ, U:K.dmc~cam, sri.
comAbstractI describe a compiler and developmentenvironment for feature-augmented wo-level morphology rules integrated intoa full NLP system.
The compiler isoptimized for a class of languages in-cluding many or most European ones,and for rapid development and debug-ging of descriptions of new languages.The key design decision is to composemorphophonological and morphosyntac-tic information, but not the lexicon,when compiling the description.
Thisresults in typical compilation times ofabout a minute, and has allowed a rea-sonably full, feature-based description ofFrench inflectional morphology to be de-veloped in about a month by a linguistnew to the system.1 IntroductionThe paradigm of two-level morphology (Kosken-niemi, 1983) has become popular for handlingword formation phenomena in a variety of lan-guages.
The original formulation has been ex-tended to allow morphotactic constraints to be ex-pressed by feature specification (Trost, 1990; A1-shawi et al 1991) rather than Koskenniemi's lessperspicuous device of continuation classes.
Meth-ods for the automatic ompilation of rules from anotation convenient for the rule-writer into finite-state automata have also been developed, allowingthe efficient analysis and synthesis of word forms.The automata may be derived from the rules alone(Trost, 1990), or involve composition with the lex-icon (Karttunen, Kaplan and Zaenen, 1992).However, there is often a trade-off between run-time efficiency and factors important for rapid andaccurate system development, such as perspicuityof notation, ease of debugging, speed of compi-lation and the size of its output, and the inde-pendence of the morphological nd lexical compo-nents.
In compilation, one may compose any orall of(a) the two-level rule set,(b) the set of affixes and their allowed combina-tions, and(c) the lexicon;see Kaplan and Kay (1994 / for an exposition ofthe mathematical basis.
The type of compilationappropriate for rapid development and acceptablerun-time performance depends on, at least, thenature of the language being described and thenumber of base forms in the lexicon; that is, on theposition in the three-dimensional space defined by(a), (b) and (c).For example, English inflectional morphology isrelatively simple; dimensions (a) and (b) are fairlysmall, so if (c), the lexicon, is known in advanceand is of manageable size, then the entire task ofmorphological nMysis can be carried out at com-pile time, producing a list of analysed word formswhich need only be looked up at run time, or anetwork which can be traversed very simply.
Al-ternatively, there may be no need to provide aspowerful a mechanism as two-level morphology atall; a simpler device such as affix stripping (A1-shawi, 1992, pl l9ff)  or merely listing all inflectedforms explicitly may be preferable.For agglutinative languages such as Korean,Finnish and Turkish (Kwon and Karttunen, 1994;Koskenniemi, 1983; Oflazer, 1993), dimension (b)is very large, so creating an exhaustive word listis out of the question unless the lexicon is trivial.Compilation to a network may still make sense,however, and because these languages tend to ex-hibit few non-eoncatenative morphophonologicalphenomena other than vowel harmony, the con-tinuation class mechanism ay suffice to describethe allowed affix sequences at the surface level.Many European languages are of the inflect-ing type, and occupy still another region of thespace of difficulty.
They are too complex mor-phologically to yield easily to the simpler tech-niques that can work for English.
The phonologi-cal or orthographic changes involved in affixationmay be quite complex, so dimension (a) can belaige, and a feature mechanism ay be needed tohandle such varied but interrelated morphosyn-202tactic phenomena such as umlaut (Trost, 1991),case, number, gender, and different morphologi-cal paradigms.
On the other hand, while theremay be many different affixes, their possibilitiesfor combination within a word are fairly limited,so dimension (b) is quite manageable.This paper describes a representation and as-sociated compiler intended for two-level morpho-logical descriptions of the written forms of inflect-ing languages.
The system described is a com-ponent of the Core Language Engine (CLE; AI-shawi, 1992), a general-purpose language analyserand generator implemented in Prolog which sup-ports both a built-in lexicon and access to largeexternal lexical databases.
In this context, highlyefficient word analysis and generation at run-timeare less important han ensuring that the mor-phology mechanism is expressive, is easy to debug,and allows relatively quick compilation.
Morphol-ogy also needs to be well integrated with otherprocessing levels.
In particular, it should be pos-sible to specify relations among morphosyntacticand morphophonological ru es and lexical entries;for the convenience of developers, this is done bymeans of feature equations.
Further, it cannot beassumed that the lexicon has been fully specifiedwhen the morphology rules are compiled.
Devel-opers may wish to add and test further lexicalentries without frequently recompiling the rules,and it may also be necessary to deal with un-known words at run time, for example by query-ing a large external lexical database or attempt-ing spelling correction (Alshawi, 1992, pp124-7).Also, both analysis and generation of word formsare required.
Run-time speed need only be enoughto make the time spent on morphology small com-pared to sententia\] and contextual processing.These parameters - languages with a complexmorphology/syntax interface but a limited num-ber of affix combinations, tasks where the lexiconis not necessarily known at compile time, bidirec-tional processing, and the need to ease develop-ment rather than optimize run-time efficiency -dictate the design of the morphology compiler de-scribed in this paper, in which spelling rules andpossible affix combinations (items (a) and (b)),but not the lexicon (item (c)), are composed inthe compilation phase.
Descriptions of French,Polish and English inflectional morphology havebeen developed for it, and I show how various as-peers of the mechanism allow phenomena in theselanguages to be handled.2 The Description Language2.1 Morphophono logyThe formalism for spelling rules (dimension (a)) isa syntactic variant of that of Ruessink (1989) andPulman (1991).
A rule is of the formspel l (Name,  Surface Op Lexical,Classes, Features).Rules may be optional (Op is "~") or obliga-tory (Op is "?~").
Surface and Lexical are bothstrings of the form" LContext I Target I RContext"meaning that the surface and lexical targets maycorrespond if the left and right contexts and theFeatures specification are satisfied.
The verticalbars simply separate the parts of the string anddo not themselves match letters.
The correspon-dence between surface and lexical strings for anentire word is licensed if there is a partitioning ofboth so that each partition (pair of correspondingsurface and lexica\] targets) is licensed by a rule,and no partition breaks an obligatory rule.
A par-tition breaks an obligatory rule if the surface tar-get does not match but everything else, includingthe feature specification, does.The Features in a rule is a list of Feature =Value equations.
The allowed (finite) set of valuesof each feature must be prespecified.
Value maybe atomic or it may he a boolean expression.Members of the surface and lexieal strings maybe characters or classes of single characters.
Thelatter are represented by a single digit N in thestring and an item N/ClassName in the Classeslist; multiple occurrences of the same N in a singlerule must all match the same character in a givenapplication.Figure I shows three of the French spelling rulesdeveloped for this system.
The change_e_~l rule(simplified slightly here) makes it obligatory for alexical e to be realised as a surface ~ when followedby t, r, or l, then a morpheme boundary, thene, as long as the feature cdouble has an appro-priate value.
The defau l t  rule that copies char-acters between surface and lexical levels and theboundary rule that deletes boundary markers areboth optional.
Together these rules permit the fol-lowing realization of cher ("expensive") followedby e (feminine gender suffix) as chore, as shownin Figure 2.
Because of the obligatory nature ofchange_e_~l, and the fact that the orthographicfeature restriction on the root cher, \[cdouble=n\],is consistent with the one on that rule, an alter-native realisation chere, involving the use of thede fau l t  rule in third position, is ruled out.
1Unlike many other flavours of two-level mor-phology, the Target parts of a rule need not con-sist of a single character (or class occurrence);they can contain more than one, and the surfacetarget may be empty.
This obviates the needfor "null" characters at the surface.
However,although surface targets of any length can use-fully be specified, it is in pract icea good strategy1The cdouble feature is in fact used to specify thespelling changes when e is added to various stems:cher+e=chdre, achet+e=ach~te, but jet+e=jette.203spel l (change_e_~l ,  " I ~1" ~:~ " I e I l+e",  \ [ l / t r l \ ] ,  \[ ,cdouble=n\]).spell(default, " I l l "  =~ " I l l " ,  \[,1/letter\], \['3).spell(boundary, " \ [  \[" ~ " I l l " ,  \[,I/bmarker\] , \['1).Figure 1: Three spelling rulesSurface: c h ~ r eLexical: c h e r + e +Rule: def.
def.
c.e_~l def.
bdy.
def.
bdy.Figure 2: Partitioning of ehtre as chef+e+always to make lexical targets exactly one char-acter long, because, by definition, an obligatoryrule cannot block the application of another uleif their lexicM targets axe of different lengths.
Theexample in Section 4.1 below clarifies this point.2.2 Word  Format ion  and  In ter fac ing  toSyntaxThe allowed sequences of morphemes, and thesyntactic and semantic properties of morphemesand of the words derived by combining them, arespecified by morphosyntactic production rules (di-mension (b)) and lexical entries both for affixes(dimension (b)) and for roots (dimension (c)), es-sentially as described by Alshawi (1992) (wherethe production rules are referred to as "morphol-ogy rules").
Affixes may appear explicitly in pro-duction rules or, like roots, they may be assignedcomplex feature-valued categories.
Information,including the creation of logical forms, is passedbetween constituents in a rule by the sharing ofvariables.
These feature-augmented productionrules are just the same device as those used in theCLE's syntactico-semantic descriptions, and are amuch more natural way to express morphotacticinformation than finite-state devices uch as con-tinuation classes (see Trost and Matiasek, 1994,for a related approach).The syntactic and semantic production rules forderiving the feminine singular of a French adjec-tive by suffixation with "e" are given, with somedetails omitted, in Figure 3.
In this case, nearlyMI features are shared between the inflected wordand the root, as is the logical form for the word(shown as Adj in the dor iv  rule).
The only differ-ing feature is that for gender, shown as the thirdargument of the ?agr macro, which itself expandsto a category.Irregular forms, either complete words or affix-able stems, are specified by listing the morpho-logical rules and terminal morphemes from whichthe appropriate analyses may be constructed, forexample:irreg(dit, \[-dire, ' PRESENT_3s ' \ ] ,\[v_v_affix-only\] ).Here, PRESENT_3s is a pseudo-affix which has thesame syntactic and semantic information attachedto it as (one sense of) the affix "t" ,  which isused to form some regular third person singulars.However, the spelling rules make no reference toPRESENT_3s; it is simply a device allowing cate-gories and logical forms for irregulax words to bebuilt up using the same production rules as forregular words.3 CompilationAll rules and lexieal entries in the CLE are com-piled to a form that allows normal Prolog unifi-cation to be used for category matching at runtime.
The same compiled forms are used for anal-ysis and generation, but are indexed differently.Each feature for a major category is assigned aunique position in the compiled Prolog term, andfeatures for which finite value sets have been spec-ified are compiled into vectors in a form that al-lows boolean expressions, involving negation aswell as conjunction and disjunction, to be con-joined by unification (see Mellish, 1988; Alshawi,1992, pp46-48).The compilation of morphological informationis motivated by the nature of the task and of thelanguages to be handled.
As discussed in Sec-tion 1, we expect the number of affix combina-tions to be limited, but the lexicon is not neces-sarily known in advance.
Morphophonological in-teractions may be quite complex, and the purposeof morphological processing is to derive syntacticand semantic analyses from words and vice versafor the purpose of full NLP.
Reasonably quickcompilation is required, and run-time speed needonly be moderate.3.1 Compi l ing  Spel l ing Pat ternsCompilation of individual spe l l  rules is straight-forward; feature specifications are compiled topositional/boolean format, characters and occur-rences of character classes are also converted toboolean vectors, and left contexts are reversed (cfAbrahamson, 1992) for efficiency.
However, al-though it would be possible to analyse words di-rectly with individually compiled rules (see Sec-tion 5 below), it can take an unacceptably longtime to do so, largely because of the wide range of204morph(adjp_adjp_fem,\ [ad jp: \ [agr= @agr(3,s ing, f )  \] Shared\],ad jp : \ [agr= ~agr(3,s ing,m) I Shared\],el):- Shared=\[aform=Aform, ..., wh=n\].Z rule (syntax)Z mother categoryZ first daughter (category)Z second daughter (literal)shared syntactic featuresderiv(adjp_adjp_fem, only\ [ (Ad j ,ad jp :Shared) ,(Adj,adjp:Shared), Z(_,e)\])?
- Shared=\[anaIn=Ai, ..., subjval=Subj\]rule (semantics)mother logical form and cat.first daughtersecond daughter?
~ shared semantic featuresFigure 3: Syntactic and semantic morphological production ruleschoices of rule available at each point and the needto check at each stage that obligatory rules havenot been broken.
We therefore take the followingapproach.First, all legal sequences of morphemes are pro-duced by top-down nondeterministic applicationof the production rules (Section 2.2), selecting af-fixes but keeping the root morpheme unspecifiedbecause, as explained above, the lexicon is unde-termined at this stage.
For example, for English,the sequences *+ed+ly and un+*+ing are amongthose produced, the asterisk representing the un-specified root.Then, each sequence, together with any associ-ated restrictions on orthographic features, under-goes analysis by the compiled spelling rules (Sec-tion 2.1), with the surface sequence and the rootpart of the lexical sequence initially uninstanti-ated.
Rules are applied recursively and nondeter-ministically, somewhat in the style of Abramson(1992), taking advantage of Prolog's unificationmechanism to instantiate the part of the surfacestring corresponding to affixes and to place somespelling constraints on the start and/or end of thesurface and/or lexical forms of the root.This process results in a set of spelling palterns,one for each distinct application of the spellingrules to each affix sequence suggested by the pro-duction rules.
A spelling pattern consists of par-tially specified surface and lexical root charactersequences~ fully specified surface and lexical affixsequences, orthographic feature constraints asso-ciated with the spelling rules and affixes used, anda pair of syntactic ategory specifications derivedfrom the production rules used.
One category isfor the root form, and one for the inflected form.Spelling patterns are indexed according to thesurface (for analysis) and lexical (for generation)affix characters they involve.
At run time, an in-flected word is analysed nondeterministically inseveral stages, each of which may succeed anynumber of times including zero.?
stripping off possible (surface) affix charac-ters in the word and locating a spelling pat-tern that they index;?
matching the remaining characters in theword against he surface part of the spellingpattern, thereby, through shared variables,instantiating the characters for the lexicalpart to provide a possible root spelling;?
checking any orthographic feature constraintson that root;?
finding a lexical entry for the root, by any of arange of mechanisms including lookup in thesystem's own lexicon, querying an externallexical database, or attempting to guess anentry for an undefined word; and?
unifying the root lexical entry with the rootcategory in the spelling pattern, thereby,through variable sharing with the other cate-gory in the pattern, creating a fully specifiedcategory for the inflected form that can beused in parsing.In generation, the process works in reverse, start-ing from indexes on the lexical affix characters.3.2 Represent ing  Lexical RootsComplications arise in spelling rule applicationfrom the fact that, at compile time, neither thelexical nor the surface form of the root, nor evenits length, is known.
It would be possible to hy-pothesize all sensible lengths and compile separatespelling patterns for each.
However, this wouldlead to many times more patterns being producedthan are really necessary.Lexical (and, after instantiation, surface)strings for the unspecified roots are therefore rep-resented in a more complex but less redundantway: as a structureL1 ... Lm v(L, R) R1 ... R,.Here the Li's are variables later instantiated tosingle characters at the beginning of the root, andL is a variable, which is later instantiated to alist of characters, for its continuation.
Similarly,the /~'s represent he end of the root, and Ris the continuation (this time reversed) leftwardsinto the root from the R1.
The v(L, R) structureis always matched specially with a Kleene-star of205the de fau l t  spelling rule.
For full generality andminimal redundancy, Lm and R1 are constrainednot to match the default rule, but the other Li'sand Ri's may.
The values of n required are thosefor which, for some spelling rule, there are k char-acters in the target lexical string and n - k fromthe beginning of the right context up to (but notincluding) a boundary symbol.
The lexical stringof that rule may then match R1,...,Rk, and itsright context match Rk+l,..., Rn,+,....
The re-quired values of m may be calculated similarlywith reference to the left contexts of rules.
2During rule compilation, the spelling patternthat leads to the run-time analysis of chore givenabove is derived from m = 0 and n = 2 and thespecified rule sequence, with the variables R1 R2matching as in Figure 4.3.3 App ly ing  Ob l igatory  Ru lesIn the absence of a lexical string for the root, thecorrect treatment of obligatory rules is anotherproblem for compilation.
If an obligatory rulespecifies that lexical X must be realised as surfaceY when certain contextual and feature conditionshold, then a partitioning where X is realised assomething other than Y is only" allowed if one ormore of those conditions is unsatisfied.
Because ofthe use of boolean vectors for both features andcharacters, it is quite possible to constrain eachpartitioning by unifying it with the complementof one of the conditions of each applicable obliga-tory rule, thereby preventing that rule from apply-ing.
For English, with its relatively simple inflec-tional spelling changes, this works well.
However,for other languages, including French, it leads toexcessive numbers of spelling patterns, becausethere are many obligatory rules with non-trivialcontexts and feature specifications.For this reason, complement unification is notactually carried out at compile time.
Instead, thespelling patterns are augmented with the fact thatcertain conditions on certain obligatory rules needto be checked on certain parts of the partitioningwhen it is fully instantiated.
This slows down run-time performance a little but, as we will see below,the speed is still quite acceptable.3.4 T imingsThe compilation process for the entire rule settakes just over a minute for a fairly thorough de-2Alternations in the middle of a root, such as um-laut, can be handled straightforwardly b altering theroot/affix pattern from L1.
.
.
Lm v(L,R) R1...R, toL1 .
.
.
Lm v(L,R) M v(L ' ,R ' )  R1...Rn, with M for-bidden to be the default  rule.
This has not beennecessary for the descriptions developed so far, but itsimplementation is not expected to lead to any greatdecrease in run-time performance, because the non-determinism it induces in the lookup process is nodifferent in kind from that arising from alternationsat root-affix boundaries.scription of French inflectional morphology, run-ning on a Sparcstation 10/41 (SPECint92=52.6).Run-time speeds are quite adequate for full NLP,and reflect the fact that the system is imple-mented in Prolog rather than (say) C and that fullsyntactico-semantic analyses of sentences, ratherthan just morpheme sequences or acceptabilityjudgments, are produced.Analysis of French words using this rule set andonly an in-core lexicon averages around 50 wordsper second, with a mean of 11 spelling analysesper word leading to a mean of 1.6 morphologicalanalyses (the reduction being because many of theroots suggested by spelling analysis do not existor cannot combine with the affixes produced).
Ifresults are cached, subsequent attempts to anal-yse the same word are around 40 times faster still.Generation is also quite acceptably fast, runningat around 100 Words per second; it is slightly fasterthan analysis because only one spelling, ratherthan all possible analyses, is sought from eachcall.
Because of the separation between lexicaland morphological representations, these timingsare essentially unaffected by in-core lexicon size,as full advantage is taken of Prolog's built-in in-dexing.Development times are at least as importantas computation times.
A rule set embodying aquite comprehensive treatment of French inflec-tional morphology was developed in about oneperson month.
The English spelling rule set wasadapted from Ritchie e~ al (1992) in only a day ortwo.
A Polish rule set is also under development,and Swedish is planned for the near future.4 Some ExamplesTo clarify further the use of the formalism andthe operation of the mechanisms, we now examineseveral further examples.4.1 Mu l t ip le - le t te r  spe l l ing  changesSome obligatory spelling changes in French involvemore than one letter.
For example, masculine ad-jectives and nouns ending in eau have femininecounterparts ending in elle: beau ("nice") becomesbelle, chameau ("camel") becomes chamelle.
Thefinal e is a feminizing affix and can be seen asinducing the obligatory spelling change au ~ II.However, although the obvious spelling rule,spell(change_au_ll, "Ill\[" +-+ "laui+e"),allows this change, it does not rule out the incor-rect realization of beau+e as e'beaue, shown in Fig-ure 5, because it only affects partitionings wherethe au at the lexical level forms a single partition,rather than one for a and one for u.
Instead, thefollowing pair of rules, in which the lexical targetshave only one character each, achieve the desiredeffect:206Compiletime:Runtime:Variable: v( L, t=0 R1 R2 ...Surface: c h ~ r eFigure 4: Spelling pattern application to the analysis of ch@reSurface: b e a u eLexical: b e a u + e +Rule: def.
def.
def.
def.
bdy.
def.
bdy.Figure 5: Incorrect partitioning for beau+e+spell(change_au_lll, " Ill" ~ "lalu+e")spell(change_au_ll2, "Ill" ~-+ "alul+e")Here, change_au_lll rules out a:a partition inFigure 5, and change_au_ll2 rules out the u:uone.It is not necessary for the surface target to con-tain exactly one character for the blocking effectto apply, because the semantics of obligatorinessis that the lezicaltarget and all contexts, taken to-gether, make the specified surface target (of what-ever length) obligatory for that partition.
The re-verse constraint, on the lexical target, does notapply.4.2 Us ing  features  to  cont ro l  ru leapp l i ca t ionFeatures can be used to control the application ofrules to particular lexical items where the appli-cability cannot be deduced from spellings alone.For example, Polish nouns with stems whose fi-nal syllable has vowel 6 normally have inflectedforms in which the accent is dropped.
Thus in thenominative plural, kr6j ("style") becomes kroje,b6r ("forest") becomes bory, b6j ("combat") be-comes boje.
However, there are exceptions, uch aszb6j ("bandit") becoming zbgje.
Similarly, someFrench verbs whose infinitives end in -eler takea grave accent on the first e in the third per-son singular future (modeler, "model", becomesmod~lera), while others double the I instead (e.g.appeler, "call", becomes appellera).These phenomena can be handled by providingan obligatory rule for the case whether the letterchanges, but constraining the applicability of therule with a feature and making the feature clashwith that for roots where the change does not oc-cur.
In the Polish case:spel l (change_6_o,  " \ [o\["  +-+ " \ [611+2" ,\ [ i / c ,  21v\], \ [ c lmgo:y \ ] ) .o r th (zb6 j ,  \[chngo=n\] ) .Then the partitionings given in Figure 6 will bethe only possible ones.
For b6j, the change_6_orule must apply, because the chngo feature for b6jis unspecified and therefore can take any value; forzb@ however, the rule is prevented from applyingby the feature clash, and so the default rule is theonly one that can apply.5 Debugging the RulesThe debugging tools help in checking the opera-tion of the spelling rules, either (1) in conjunctionwith other constraints or (2) on their own.For case (1), the user may ask to see all inflec-tions of a root licensed by the spelling rules, pro-duction rules, and lexicon; for chef, the outputis\ [ cher ,e \ ]  : ad jp  -> chore\ [ cher ,e ,s \ ] :  adjp -> chores\ [cher ,s \ ]  : adjp -> chersmeaning that when cher is an ad jp  (adjective) itmay combine with the suffixes listed to producethe inflected forms shown.
This is useful in check-ing over- and undergeneration.
It is also possibleto view the spelling patterns and production ruletree used to produce a form; for chore, the trace(slightly simplified here) is as in figure 7.
Thespelling pattern 194 referred to here is the onedepicted in a different form in Figure 4.
The no-tation {clmnprstv=A} denotes a set of possibleconsonants represented by the variable A, whichalso occurs on the right hand side of the rule, in-dicating that the same selection must be made forboth occurrences.
Production rule tree 17 is thatfor a single application of the rule adjp_adjp_fem,which describes the feminine form of the an ad-jective, where the root is taken to be the mas-culine form.
The Root and In f l  lines show thefeatures that differ between the root and inflectedforms, while the Both line shows those that theyshare.
Tree 18, which is also pointed to by thespelling pattern, describes the feminine forms ofnouns analogously.For case (2), the spelling rules may be applieddirectly, just as in rule compilation, to a speci-fied surface or lexical character sequence, as if no207Surface: b o j eLexical: b 6 j + e +Rule: def.
c_6_o, def.
bdy.
def.
bdy.Surface: z b 6 j eLexicah z b 6 j + e +Rule: def.
def.
def.
def.
bdy.
def.
bdy.Figure 6: Feature-dependent dropping of accent"chbre"  has root "chef" wi th  pat te rn  194 and t ree 17.Pat te rn  194:"___~{c lmnprstv=A}e"  <-> "___e{c lmnprstv=A}+e+"=> t ree 17 and 18 if \ [doublec=n\]Uses: de fau l t *  change_e_~l  defau l t  boundary  defau l t  boundaryTree 17:Both = adjp:\[dmodified=n,headfinal=y,mhdfl=y,synmorpha=l,wh=n\]Root = adjp : \ [agr=agr : \ [gender=m\] \ ]Inf l  = ad jp : \ [agr=agr : \ [gender=f \ ] \ ]Tree = adjp_ad jp_ fem=>\[* ,e \ ]Figure 7: Debugger trace of derivation of chorelexical or morphotactic constraints existed.
Fea-ture constraints, and cases where the rules will notapply if those constraints are broken, are shown.For the lexical sequence cher+e+, for example, theoutput is as follows.Surface:  "chbre"  <->Lexica l :  "chef".
Suff ix: "e"c :: c <- defau l th :: h <- defau l tb : :  e <-  change_e_b lr : :  r <-  de fau l t:: + <- boundaryCategory:  orth: \ [cdouble=n\]e :: e <- defau l t:: + <~ boundarySur face  :Lex ica l  :c :: c <- defau l th :: h <- defau l te :: e <- defau l t" change_e_  b l !'
)r :: r <- defau l t:: + <- boundarye :: e <- defau l t:: + <- boundary"chere" <->"cher".
Suff ix: "e"(breaksThis indicates to the user that if chef is givena lexical entry consistent with the constraintcdoub le=n,  then only the first analysis will bevalid; otherwise, only the second will be.6 Conc lus ions  and Further  WorkThe rule formalism and compiler described herework well for European languages with reasonablycomplex orthographic changes but a limited rangeof possible affix combinations.
Development, com-pilation and run-time efficiency are quite accept-able, and the use of rules containing complexfeature-augmented categories allows morphotacticbehaviours and non-segmentM spelling constraintsto be specified in a way that is perspicuous to lin-guists, leading to rapid development of descrip-tions adequate for full NLP.The kinds of non-linear effects common inSemitic languages, where vowel and consonantpatterns are interpolated in words (Kay, 1987;Kiraz, 1994) could be treated efficiently by themechanisms described here if it proved possible todefine a representation that allowed the parts ofan inflected word corresponding to the root to beseparated fairly cleanly from the parts expressingthe inflection.
The latter could then be used by amodified version of the current system as the basisfor efficient lookup of spelling patterns which, asin the current system, would allow possible lexicalroots to be calculated.Agglutinative languages could be handled ef-208flciently by the current mechanism if specifica-tions were provided for the affix combinations thatwere likely to occur at all often in real texts.
Abackup mechanism could then be provided whichattempted a slower, but more complete, direct ap-plication of the rules for the rarer cases.The interaction of morphological nalysis withspelling correction (Carter, 1992; Oflazer, 1994;Bowden, 1995) is another possibly fruitful area ofwork.
Once the root spelling patterns and the affixcombinations pointing to them have been created,analysis essentially reduces to an instance of affix-stripping, which would be amenable to exactly thetechnique outlined by Carter (1992).
As in thatwork, a discrimination et of root forms would berequired; however, this could be augmented inde-pendently of spelling pattern creation, so that theflexibility resulting from not composing the lexi-con with the spelling rules would not be lost.AcknowledgmentsI am grateful to Manny Rayner and anonymousEuropean ACL referees for commenting on earlierversions of this paper, and to Pierrette Bouillionand Malgorzata Styg for comments and also fo~providing me with their analyses of the Frenchand Polish examples respectively.This research was partly funded by the DefenceResearch Agency, Malvern, UK, under StrategicResearch Project M2YBT44X.ReferencesAbramson, H., (1992).
"A Logic ProgrammingView of Relational Morphology".
Proceedingsof COLING-92, 850-854.Alshawi, H. (1992).
The Core Language Engine(ed).
MIT Press.Alshawi, H., D.J.
Arnold, R. Backofen, D.M.Carter, J. Lindop, K. Netter, S.G. Pulman,J.
Tsujii, and H. Uszkoreit (1991).
Euro-ira ET6/I: Rule Formalism and Virtual Ma-chine Design Study.
Commission of the Eu-ropean Communities, Luxembourg.Bowden, T. (1995) "Cooperative Error Handlingand Shallow Processing", these proceedings.Carter, D.M.
(1992).
"Lattice-based Word Identi-fication in CLARE".
Proceedings of A CL-92.Kaplan, R., and M. Kay (1994).
"Regular Mod-els of Phonological Rule Systems", Computa-tional Linguistics, 20:3, 331-378.Kay, M. (1987).
"Non-concatenative Finite-StateMorphology".
Proceedings of EA CL-87.Karttunen, L., R.M.
Kaplan, and A. Zaenen(1992).
"Two-level Morphology with Com-position".
Proceedings of COLING-92, 141:148.Kiraz, G. (1994).
"Multi-tape Two-level Morphol-ogy".
Proceedings of COLING-94, 180-186.Koskenniemi, K. (1983).
Two-level morphology:a general computational model for word.formrecognition and production.
University ofHelsinki, Department of General Linguistics,Publications, No.
11.Kwon, H-C., and L. Karttunen (1994).
"Incre-mental Construction of a Lexical Transducerfor Korean".
Proceedings of COLING-9~,1262-1266.Mellish, C. S. (1988).
"Implementing SystemicClassification by Unification".
Computa-tional Linguistics 14:40-51.Oflazer, K. (1993).
"Two-level Description ofTurkish Morphology".
Proceedings of Euro-pean A CL- 93.Oflazer, K. (1994).
Spelling Correction in Agglu-tinative Languages.
Article 9410004 incmp-lg?xxx, lanl .
gov archive.Ritchie, G., G.J.
Russell, A.W.
Black and S.G.Pulman (1992).
Computational Morphology.MIT Press.Ruessink, H. (1989).
Two Level Formalisms.Utrecht Working Papers in NLP, no.
5.Trost, H. (1990).
"The Application of Two-levelMorphology to Non-Concatenative GermanMorphology".
Proceedings of COLING.90,371-376.Trost, H. (1991).
"X2MORF: A Morphologi-cal Component Based on Augmented Two-level Morphology".
Proceedings of IJCAI-91,1024-1030.Tr0st, H., and J. Matiasek (1994).
"Morphol-ogy with a Null-Interface", Proceedings ofCOLING-94.209
