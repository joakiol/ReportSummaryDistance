PRINCIPLES  OF TEMPLATE DES IGNJerry Hobbs, David IsraelArtificial Intelligence CenterSRI InternationalMenlo Park CA 94025ABSTRACTThe functionality of systems that extract information fromtexts can be specified quite simply: the input is a stream oftexts and the output is some representation of the informa-tion to be extracted.
Hence, the problem of template designis an instance of the problem of knowledge representation.In particular, it is the problem of representing essential factsabout situations in a way that can mediate between textsthat describe those situations and a vaxiety of applicationsthat involve reasoning about them.The research on which we report here is directed at eluci-dating principles of template design and at compiling these,with examples, in a manual for template designers.1.
Introduct ionThe functionality of systems that extract information fromtexts can be specified quite simply: the input is a stream oftexts and the output is some representation of the informa-tion to be extracted.
In the message understanding researchpromoted by ARPA through its Human Language Technol-ogy initiative, the form of this output has been templates(feature-structures), with complex path-names (slots) andvarious constraints on fillers.
The design of these templates,especially considered as concrete data structures, has beendetermined to some degree at least by considerations havingto do with automatic scoring.
Beyond that, it has not beenmade clear what principles have driven or should drive thedesign of these output forms; but it has become clear thatserious defects in the form of the output can undermine theutility of an information extraction system.
If the output isunusable, or not easily usable, the breadth and reliability ofcoverage of the natural anguage analysis component will beof little value.As part of the DASH research project on Data Access forSituation Handling, we axe attempting to elucidate principlesof template design and at compiling these, with examples, in?
a manual for template designers.
Our methodology has in-eluded detailed critical analysis of the templates from a vari-ety of information extraction tasks (MUC-4, MUG-5, Tipster-1, the Waxbreaker Message Handling \[WBMH\] tasks), to-gether with the creation of templates for the TREC topicdescriptions and narratives.The design of templates, or more generally, abstract datastructures, as output forms for automatic information ex-traction systems must be sensitive to three different but in-teracting considerations:1. the template as representational device2.
the template as generated from input3.
the template as input to further processing, by humansor programs or both.The central consideration i our research is that of the tem-plate as a representational device.
The problem of templatedesign is a special case of the general problem of knowledgerepresentation.
In particular, it is the problem of represent-ing, within a constrained formalism, essential facts about sit-uations in a way that can mediate between texts that describethose situations and a variety of applications that involve rea-soning about them.What facts about a situation are essential is determined bya semantic model of the domain, which is in turn motivatedby the particular information requirements of the analyticalpurposes which the extracted information is to serve.
Thisspecification could, in principle, be done without any detailedthought given to the nature of the texts from which informa-tion is to be extracted; thus it could include information re-quirements that simply could not be met by the input stream.It might also abstract from information readily transducedfrom the input stream.
Conversely, the domain specificationmay reveal cases where one must extract information that isnot important o the end user in order to disambiguate orotherwise xplicate important informational content.
Again,the domain model could be specified without any detailedthought given to the design of the concrete syntax of thetemplate.
In this latter regard, crucial considerations includeintelligibility and 'browsability', together with the utility ofthe template fills as input to further processing.We here report some results of a program of research ~medat uncovering the underlying principles of template design.2.
Basic OntologyIn constructing a representation for a domain or task, thefirst questions to ask are:1.
What axe the basic entities?
What properties of theseobjects and what relations among them are we inter-ested in?2.
What kinds of changes in such properties and relationsare we interested in?Answers to any one of these questions depend on answers tothe others.
Answers to the first provide the basic ontology of177the representation.Bas ic  Ent i t ies  The basic entities hould be things that en-dure throughout the temporal focus of the task.
1 They enterinto the relations and axe characterized by the properties ofprimary interest and are the participants in events that maychange those properties and relations.
In the joint venturesdomain, companies are the primary candidates for basic enti-ties.
In the long run, they get formed, split, merge, and go outof business, but for many analytical purposes, and in partieu-lax for the purposes implicit in the MUC-5 task, we can thinkof them as permanent.
It is companies that enter into jointventure relationships and through such relationships bringabout the one crucial exception to the rough-and-ready rulejust mentioned: the creation of new, joint venture compa-nies.
In the same domain, facilities and people axe also goodcandidates for basic entities.The basic entities may be represented by structured objectswith a number of slots, as follows:<TEMPLATE> :ffiCOMPANY: <COMPANY-l>?
?
o .
?
o ?
o<COMPANY-I>:Name: ''General Motors''National i ty:  U.S.?
o ?
, ?
.
o ?or by an atomic element such as an identifier, a set fill, anumber, or a string:<TEMPLATE> :=o .
o o .
, oCOMPANY: ''General Motors ' 'The difference in outcome between these two cases is thatin the former you have to look elsewhere for the informationabout the entity, whereas in the latter you don't.
In gen-eral, it 's better not to have to, so unless there is a good dealof information that needs to be recorded about the type ofentity in question, it is better to use an atomic element orepresent such entities.
Again, within the joint venture do-main, companies are good candidates for representation asstructured objects, since we need to know their aliases, lo-cation, nationality, officers, etc.
On the other hand, withinthat same domain, it may be that the only information weneed to record about a person, aside from his relation to acompany, is his name, so in that case it is better to representthe person (atomically) by his name.1 For more on this, see next section.Natura l  K inds  It is better if the types of basic entities, es-pecially those represented by structured objects, are 'naturalkinds', that is, if they correspond to fairly natural, intuitiveways of classifying and characterizing the domain of inter-est.
For example, companies, people, facilities are naturalkinds in this sense.
Ordered pairs of Industry Types andProduct/Services axe not.
Rather than have basic entities ofunnatural kinds, one may opt for more, or more complex, slotfills in objects of more natural varieties.
Still, it should beremarked that one's eommonsense demarcation of a domaininto basic entities is always subject o revision by the particu-lar analytical demands of the task at hand.
Thus, in the caseof WBMH, while units (e.g., divisions, battalions, etc.)
area perfectly natural kind of entity, deployments, that is rel-atively short-lived activities involving elements from units,may be less natural but they axe at least equally central.Assoc ia t ing  Proper t ies  w i th  the  R ight  Ob jects  It isimportant o determine whether the property encoded in theslot of an object is really a property of that object, ratherthan of some other related object.
For example, in the Tip-ster templates, Total Capitalization was viewed as a propertyof the Contribution object, whereas it is really a property ofthe Tie-Up Relationship, and thus should be associated withthat object.
This misplacement of properties seems especiallylikely when the entities in question axe types of relationshipsor activities, as they are in this ease.
We return to the issueof representing relations below.3.
Temporal GranularityWe have noted that the issue of what kinds of changes are ofinterest relative to a given task is centrally important o thedesign of templates for the task.
The resolution of this issueis a crucial determinant, in particular, of what we call thetemporal granularity of the representation.
Certain proper-ties of and relations among entities are relatively permanent;others are relatively short-lived.
But what counts as per-manent and what as short-lived is itself dependent on ourinterests and purposes, both theoretical and practical.
Ananalysis of the kinds of changes that are of interest shoulddetermine, even if only roughly, a temporal interval or lengthof time as its focus or window.
See Fig.
1.
Note that thereis a mutual dependence here: Properties and relations thatare apt to change within that time interval are temporary;those that are likely to hold throughout he designated in-terval are, with respect o this task, permanent.
Thus, thefixing of a temporal granularity allows the resolution of manyproblems in template design by defining limits on what wehave to specify.For example, in the joint ventures domain, we are interestedin the formation (or dissolution) of tie-up relations amongcompanies.
Thus such relations are temporary, whereas ub-sidiary relations are permanent.
If we were interested inbuy-outs, subsidiary relations would be viewed as temporary,changes in such relationships being an important focus forthe task.
In the domain of troop movements or deployments,locations and associated equipment are temporary, whereasa unit's place in the command hierarchy is permanent, eventhough on the scale of decades (or even much less), that mightchange.178Temporary I PropertiesFocus of TaskPermanent Properties/Tom mu~lcatlon-Ev~tSource-Ent Target-Ent Purposive-Event/ I \Entl Ent2 Basic-Event / \Ent3 Ent4Figure 3: Typical Event StructureFigure I: Temporal Granularity and FocusNote that temporal granularity is task-relative rather thanmessage-relative.
The messages may have been written fromvery different temporal perspectives, with very different in-terests and purposes.
We need to extract the informationfrom them in a form that is appropriate for the task at hand.4.
Representing RelationsA relation can be represented in one of two ways, as a sep-arate object in its own right, or as a property of one of itsarguments.
See Fig.
2For example, the subsidiary relation could be represented byits own Entity Relationship object, or it could be representedby a Parent Company slot in the Entity object.The following criteria seem useful in deciding which of theseoptions to adopt:I.
If the relation is of primary interest in the task, option(a) may be the best choice.2.
If a lot of other information needs to be recorded aboutthat relation, option (a) is a good choice; if only the twoarguments need to be recorded, option (b) is probablybetter.3.
If the relation is permanent relative to the temporalgranularity of the information task, then option (b) is agood choice.4.
If some other relation, Relation2, depends on Relationl,in the sense that the former cannot exist without thelatter existing, then Relation2 is a good candidate forbeing represented via option (b).With respect to the second criterion, if in addition to thetwo arguments, we want to specify the time, the location,ao boRelation Entity1/ \Entity1 Entity2 Relation: EnUty2Figure 2: Representing Relationsand various other aspects of the relation, then option (a) isindicated.
With respect to the third criterion, if the relationis at least as permanent as the entities, then option (b) is agood choice.
These two criteria overlap to some extent.
Ifthe relation is permanent, there is likely no need to record itstime.In the specific case of the Subsidiary relation in Tipster, it isnot the relation of primary interest (Tie-Ups are), there areno other properties that need to be specified for the relationother than the parent and child companies, and the relationis permanent with respect to the temporal focus of the task.Therefore, option (b) seems appropriate.The Tipster template presents an apposite xample of crite-rion 4 as well.
A Contribution, as conceptualized in the tem-plate, is a relationship, just as a Tie-Up-Relationship s, so itcertainly could qualify for object status.
However, it is depen-dent on a Tie-Up-Relationship; a Contribution relationshipamong companies can't exist without a Tie-Up-Relationshipamong them.
This indicates option (b) is appropriate.5.
EventsWe can classify events, and the relations among entities thatthey involve, in di~erent ways for different purposes.
On  thebasis of an examination of a variety of templates, we hypoth-esize that there axe three central event types.
First, there arethose that directly relate two or more basic entities, such asa company manufacturing a product or a terrorist organiza-tion attacking a target or a vendor supplying a buyer with apart.
These very same events, however--especially if, as inthe examples just mentioned, they involve purposive agents--can also be classified in terms of their purpose or aim.
Thistype of classification typically involves further reference toan activity or condition, as when a company manufactures aproduct in order to enter a new market or when two compa-nies form a joint venture for the purpose of carrying out someactivity.
Third, there is the specially important type of eventinvolving communicative relations among basic entities, to-gether with a content communicated, itself comprising somefurther activity or event of any of the three types.
Thus, atypical event structure might be represented as in Fig.
3.Of course, in many cases there would be equations identifyingthe various entities involved.
Thus, GM might announce itis forming a joint venture with Toyota for the manufactureof cars by GM in 3apan, where Source-Ent = Entl = Ent3= GM.
We also note that a Communication-Event can havea Basic-Event for its third argument.179Relat ion/ \Event l  Event2Figure 4: Relations Between EventsIn addition to these three event types, there are relations be-tween events that we may need to represent, such as causalityor the subevent (part-whole) relation, as in Fig.
4.
Thus, ashooting event could cause a dying event, and a troop move-ment might be part of a larger attack.In general, the template structure should be no deeper thanthis.
It is better for the trees to be very broad (i.e., forindividual objects to have lots of slots) than to be very deep.6.
Entity SnapshotsIn many applications, there are a large number of tempo-rary or transient properties of entities that are of primaryconcern.
If we design the template around the enduring ba-sic entities themselves, it might seem that these temporaryproperties hould be demoted to mere slots rather than berepresented as entities in their own right.
These slots, onthe other hand, would also have to allow multiple entriesand each entry would have to have time stamps.
A way toeliminate this complexity is to have as first-class objects, inaddition to Entities, Entity Snapshots.
An Entity Snapshotis an Entity at a particular point or interval in time.
As such,an Entity Snapshot would have a pointer to the Entity thatit is a snapshot of.
It would also carry all the temporary in-formation about the Entity.
The time of the snapshot wouldalso be one of the slots.In the WBMH domain, these Entity Snapshots, under thename Entity Information, are pr imary objects of interest.They represent deployments, or "target opportunities".
Suchtemporary properties of Entities as Equipment, Location, Di-rection, and so on, are really to be associated with deploy-ments, Snapshots, rather than Entities or Units.6.1.
Entities from Entity SnapshotsOften the first way one might think of an entity is in terms ofits structure and properties at a particular moment in time.One later realizes that in fact the entity maintains its identityover time as its internal structure changes.
In this case weshould reconceptualize the entity as being a mapping from in-stants or temporal intervals into its structure and propertiesat that time.For example, one's first intuition about the nature of a de-partment may be that it is a set of employees.
Later one re-alizes it should have been conceptualized as a mapping fromtimes to sets of employees.
In this case, it is a good idea tohave both Departments and Department Snapshots, wherethe set of employees i  a property of the Department Snap-shot.There are a number of interesting problems of analysis thatrevolve around the relationship between entities and entitysnapshots.
Sometimes one is of primary interest, sometimesthe other.
For example, in Desert Shield, units were of inter-est; in particular a major focus of concern was the calculationof unit strengths.
In Desert Storm, however, deploymentswere of primary interest, since it was deployments that pre-sented the immediate danger.
2 In general, we want to be ableto infer the identity of different deployments across time, toinfer their membership in units, to derive some of their prop-erties from default properties of their units, and to determineproperties of units, such as unit strength and readiness, fromproperties of deployments.7.
Slot F i l lsSlot fills should be uncomplicated.
They should take one ofthe following forms:(a) Atomic elements, such as identifiers, numbers,strings.
(b) Pointers to structured objects.
(c) Tuples whose elements are of types a and b.
(d) Sets whose elements are of types a, b, or c.orIt is probably confusing to have tuples with more than threeelements.
Thus, the maximum complexity of a slot fill wouldbe{(A1, B1, C1), (A2, B2, C2) , .
.
.
}Many set fills of type (d) whose elements are of type (c)may be thought of as functions.
For example, if we hada set of pairs of companies and ownership percentages, wecould think of it as representing a function from companiesto ownership percentages.
However, not all set fills of thistype are conveniently thought of as functions.
If we have anOfficers slot for the Company object, whose filler is a set oftuPles of the form (Position Person), then an entry might be:{ (PRES, "White"),(CEO, "White"),(SREXEC, "Brown"),(SREXEC, "Green")}This is a not function in either position or name.7.1.
Objects or TuplesIt is of course possible, and often good programming practice,to implement uples as structured objects:Tuple :g:B:C:2This pair of examples also illustrates that different but inti-mately related tasks can have different emporal granularlties.180But in the presentation of the templates, it is often betterfrom the user's point of view to represent hem as tuples,rather than multiplying kinds of objects.
This is an instanceof the prindple that the user shouldn't have to go lookingtoo fax afield for information.
As you follow a complex pathof pointers, it can be easy to forget what the type of anobject is and where it fits into the web of relationships you'reinterested in.References1.
Sundheim, B., ed.
Proceedings, Fourth Message Under-standing Conference (MUC-4), McLean, VA, June, 1992.Distributed by Morgan Kanfmann Publishers, Inc., SanMateo, CA.2.
Sundheim, B., ed.
Proceedings, Fifth Message Under-standing Conference (MUC-5), Baltimore, MD, August,1993.8.
Backpo in tersMemory is cheap.
Time, especially the user's time, is expen-sive.
Therefore, a user should be able to browse through adatabase, easily traveling from any node to any related node.In a troop movement domain, sometimes the user will wantto ask the two questions,1.
What activities axe going on in Sector A?2.
What units axe involved in these activities?and sometimes he will want to ask:1.
What activities is Unit A involved in?2.
What is the location of these activities?Therefore, for every pointer from one object to another, thereshould be a backpointer.It might be objected that backpointers amount o storing in-formation redundantly, but that's rather like saying two-waystreets axe redundant because you can always get back towhere you started by some other route.
However, backpoint-ers should be considered secondary.
They do not need to bepart of the template definition.
It should just be assumedthat the backpointers will be constructed as weU.
(More-over, in evaluations, backpointers should not be scored.
Thiswas one of the chief difficulties in the scoring of the Tipstertemplates.
)9 .
SummaryWe have reported on research directed at elucidating gen-erally applicable principles of template design.
The guidingperspective of the research reported here is that templatedesign is a special case of knowledge representation i  a con-strained representation language.
Thus it is no surprise thatmany of the main issues in knowledge representation, issuesof choice of ontology, of the nature of relations and of events,arise here as well.
We have also paid attention to issues ofreadability as well, for if the templates produced, either byhand or by program, axe not easily intelligible, their accuracyand completeness will be of little use.10 .
AcknowledgementsThe DASH project has been sponsored by the Office of P~e-search and development, under Contract No.
93-F149300-000.
We would especially like to thank William Schulthels ofORD for his active and extremely useful participation in theresearch.
We would also like to thank Boyan Onyshkevych,especially for discussions about the Tipster template, andMabry Tyson.181
