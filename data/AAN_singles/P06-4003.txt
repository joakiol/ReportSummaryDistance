Proceedings of the COLING/ACL 2006 Interactive Presentation Sessions, pages 9?12,Sydney, July 2006. c?2006 Association for Computational LinguisticsLeXFlow: a System for Cross-fertilization of Computational LexiconsMaurizio Tesconi and Andrea MarchettiCNR-IITVia Moruzzi 1, 56024 Pisa, Italy{maurizio.tesconi,andrea.marchetti}@iit.cnr.itFrancesca Bertagna and Monica Monachini and Claudia Soria and Nicoletta CalzolariCNR-ILCVia Moruzzi 1, 56024 Pisa, Italy{francesca.bertagna,monica.monachini,claudia.soria,nicoletta.calzolari}@ilc.cnr.itAbstractThis demo presents LeXFlow, a work-flow management system for cross-fertilization of computational lexicons.Borrowing from techniques used in thedomain of document workflows, wemodel the activity of lexicon manage-ment as a set of workflow types, wherelexical entries move across agents in theprocess of being dynamically updated.
Aprototype of LeXFlow has been imple-mented with extensive use of XML tech-nologies (XSLT, XPath, XForms, SVG)and open-source tools (Cocoon, Tomcat,MySQL).
LeXFlow is a web-based ap-plication that enables the cooperative anddistributed management of computationallexicons.1 IntroductionLeXFlow is a workflow management systemaimed at enabling the semi-automatic manage-ment of computational lexicons.
By managementwe mean not only creation, population and vali-dation of lexical entries but also integration andenrichment of different lexicons.A lexicon can be enriched by resorting toautomatically acquired information, for instanceby means of an application extracting informa-tion from corpora.
But a lexicon can be enrichedalso by resorting to the information available inanother lexicon, which can happen to encodedifferent types of information, or at different lev-els of granularity.
LeXFlow intends to addressthe request by the computational lexicon com-munity for a change in perspective on computa-tional lexicons: from static resources towardsdynamically configurable multi-source entities,where the content of lexical entries is dynami-cally modified and updated on the basis of theintegration of knowledge coming from differentsources (indifferently represented by human ac-tors, other lexical resources, or applications forthe automatic extraction of lexical informationfrom texts).This scenario has at least two strictly relatedprerequisites: i) existing lexicons have to beavailable in or be mappable to a standard formenabling the overcoming of their respective dif-ferences and idiosyncrasies, thus making theirmutual comprehensibility a reality; ii) an archi-tectural framework should be used for the effec-tive and practical management of lexicons, byproviding the communicative channel throughwhich lexicons can really communicate andshare the information encoded therein.For the first point, standardization issues obvi-ously play the central role.
Important and exten-sive efforts have been and are being made to-wards the extension and integration of existingand emerging open lexical and terminologicalstandards and best practices, such as EAGLES,ISLE, TEI, OLIF, Martif (ISO 12200), DataCategories (ISO 12620), ISO/TC37/SC4, andLIRICS.
An important achievement in this re-spect is the MILE, a meta-entry for the encodingof multilingual lexical information (Calzolari etal., 2003); in our approach we have embraced theMILE model.As far as the second point is concerned, someinitial steps have been made to realize frame-works enabling inter-lexica access, search, inte-gration and operability.
Nevertheless, the generalimpression is that little has been made towardsthe development of new methods and techniques9for the concrete interoperability among lexicaland textual resources.
The intent of LeXFlow isto fill in this gap.2 LeXFlow Design and ApplicationLeXFlow is conceived as a metaphoric extensionand adaptation to computational lexicons ofXFlow, a framework for the management ofdocument workflows (DW, Marchetti et al,2005).A DW can be seen as a process of cooperativeauthoring where the document can be the goal ofthe process or just a side effect of the coopera-tion.
Through a DW, a document life-cycle istracked and supervised, continually providingcontrol over the actions leading to documentcompilation In this environment a documenttravels among agents who essentially carry outthe pipeline receive-process-send activity.Each lexical entry can be modelled as a docu-ment instance (formally represented as an XMLrepresentation of the MILE lexical entry), whosebehaviour can be formally specified by means ofa document workflow type (DWT) where differ-ent agents, with clear-cut roles and responsibili-ties, act over different portions of the same entryby performing different tasks.Two types of agents are envisaged: externalagents are human or software actors which per-form activities dependent from the particularDWT, and internal agents are software actorsproviding general-purpose activities useful forany DWT and, for this reason, implemented di-rectly into the system.
Internal agents performgeneral functionalities such as creat-ing/converting a document belonging to a par-ticular DWT, populating it with some initial data,duplicating a document to be sent to multipleagents, splitting a document and sending portionsof information to different agents, merging du-plicated documents coming from multiple agents,aggregating fragments, and finally terminatingoperations over the document.
An external agentexecutes some processing using the documentcontent and possibly other data, e.g.
updates thedocument inserting the results of the precedingprocessing, signs the updating and finally sendsthe document to the next agent(s).The state diagram in Figure 1 describes thedifferent states of the document instances.
At thestarting point of the document life cycle there isa creation phase, in which the system raises anew instance of a document with informationattached.Figure 1.
Document State Diagram.The document instance goes into pendingstate.
When an agent gets the document, it goesinto processing state in which the agent compilesthe parts under his/her responsibility.
If theagent, for some reason, doesn?t complete the in-stance elaboration, he can save the work per-formed until that moment and the document in-stance goes into freezing state.
If the elaborationis completed (submitted), or cancelled, the in-stance goes back into pending state, waiting for anew elaboration.Borrowing from techniques used in DWs, wehave modelled the activity of lexicon manage-ment as a set of DWT, where lexical entriesmove across agents and become dynamicallyupdated.3 Lexical Workflow General Architec-tureAs already written, LeXFlow is based on XFlowwhich is composed of three parts: i) the AgentEnvironment, i.e.
the agents participating to allDWs; ii) the Data, i.e.
the DW descriptions plusthe documents created by the DW and iii) theEngine.
Figure 2 illustrates the architecture of theframework.Figure 2.
General Architecture.The DW environment is the set of human andsoftware agents participating to at least one DW.10The description of a DW can be seen as an ex-tension of the XML document class.
A class ofdocuments, created in a DW, shares the schemaof their structure, as well as the definition of theprocedural rules driving the DWT and the list ofthe agents attending to it.
Therefore, in order todescribe a DWT, we need four components:?
a schema of the documents involved in theDWT;?
the agent roles chart, i.e.
the set of the ex-ternal and internal agents, operating on thedocument flow.
Inside the role chart theseagents are organized in roles and groups inorder to define who has access to thedocument.
This component constitutes theDW environment;?
a document interface description used byexternal agents to access the documents.This component also allows checking ac-cess permissions to the document;?
a document workflow description definingall the paths that a document can follow inits life-cycle, the activities and policies foreach role.The document workflow engine constitutes therun-time support for the DW, it implements theinternal agents, the support for agents?
activities,and some system modules that the external agentshave to use to interact with the DW system.Also, the engine is responsible for two kinds ofdocuments useful for each document flow: thedocuments system logs and the documents systemmetadata.4 The lexicon Augmentation WorkflowTypeIn this section we present a first DWT, called?lexicon augmentation?, for dynamic augmenta-tion of semantic MILE-compliant lexicons.
ThisDWT corresponds to the scenario where an entryof a lexicon A becomes enriched via basicallytwo steps.
First, by virtue of being mapped ontoa corresponding entry belonging to a lexicon B,the entry(A) inherits the semantic relations avail-able in the mapped entry(B).
Second, by resortingto an automatic application that acquires infor-mation about semantic relations from corpora,the acquired relations are integrated into the en-try and proposed to the human encoder.In order to test the system we considered theSimple/Clips (Ruimy et al, 2003) and ItalWord-Net (Roventini et al, 2003) lexicons.An overall picture of the flow is shown in Fig-ure 3, illustrating the different agents participat-ing to the flow.
Rectangles represent human ac-tors over the entries, while the other figuressymbolize software agents: ovals are internalagents and octagons external ones.
The function-ality offered to human agents are: display ofMILE-encoded lexical entries, selection of lexi-cal entries, mapping between lexical entries be-longing to different lexicons1, automatic calcula-tions of new semantic relations (either automati-cally derived from corpora and mutually inferredfrom the mapping) and manual verification of thenewly proposed semantic relations.5 Implementation OverviewOur system is currently implemented as a web-based application where the human externalagents interact with system through a webbrowser.
All the human external agents attendingthe different document workflows are the usersof system.
Once authenticated through usernameand password the user accesses his workloadarea where the system lists all his pending docu-ments (i.e.
entries) sorted by type of flow.The system shows only the flows to which theuser has access.
From the workload area the user1 We hypothesize a human agent, but the same role could beperformed by a software agent.
To this end, we are investi-gating the possibility of automatically exploiting the proce-dure described in (Ruimy and Roventini, 2005).Figure 3.
Lexicon Augmentation Workflow.11can browse his documents and select some op-erationsFigure 4.
LeXFlow User Activity State Diagram.such as: selecting and processing pending docu-ment; creating a new document; displaying agraph representing a DW of a previously createddocument; highlighting the current position ofthe document.
This information is rendered as anSVG (Scalable Vector Graphics) image.
Figure 5illustrates the overall implementation of the sys-tem.5.1 The Client Side: External Agent Inter-actionThe form used to process the documents is ren-dered with XForms.
Using XForms, a browsercan communicate with the server through XMLdocuments and is capable of displaying thedocument with a user interface that can be de-fined for each type of document.
A browser withXForms capabilities will receive an XML docu-ment that will be displayed according to thespecified template, then it will let the user editthe document and finally it will send the modi-fied document to the server.5.2 The Server SideThe server-side is implemented with ApacheTomcat, Apache Cocoon and MySQL.
Tomcat isused as the web server, authentication module(when the communication between the serverand the client needs to be encrypted) and servletcontainer.
Cocoon is a publishing framework thatuses the power of XML.
The entire functioningof Cocoon is based on one key concept: compo-nent pipelines.
The pipeline connotes a series ofevents, which consists of taking a request as in-put, processing and transforming it, and then giv-ing the desired response.
MySQL is used forstoring and retrieving the documents and thestatus of the documents.Each software agent is implemented as a web-service and the WSDL language is used to defineits interface.ReferencesNicoletta Calzolari, Francesca Bertagna, AlessandroLenci and Monica Monachini, editors.
2003.
Stan-dards and Best Practice for Multilingual Computa-tional Lexicons.
MILE (the Multilingual ISLELexical Entry).
ISLE Deliverable D2.2 & 3.2.
Pisa.Andrea Marchetti, Maurizio Tesconi, and SalvatoreMinutoli.
2005.
XFlow: An XML-Based Docu-ment-Centric Workflow.
In Proceedings of WI-SE?05, pages 290- 303, New York, NY, USA.Adriana Roventini, Antonietta Alonge, FrancescaBertagna, Nicoletta Calzolari, Christian Girardi,Bernardo Magnini, Rita Marinelli, and AntonioZampolli.
2003.
ItalWordNet: Building a LargeSemantic Database for the Automatic Treatment ofItalian.
In Antonio Zampolli, Nicoletta Calzolari,and Laura Cignoni, editors, Computational Lingui-stics in Pisa, Istituto Editoriale e Poligrafico Inter-nazionale, Pisa-Roma, pages 745-791.Nilda Ruimy, Monica Monachini, Elisabetta Gola,Nicoletta Calzolari, Cristina Del Fiorentino, MarisaUlivieri, and Sergio Rossi.
2003.
A ComputationalSemantic Lexicon of Italian: SIMPLE.
In AntonioZampolli, Nicoletta Calzolari, and Laura Cignoni,editors, Computational Linguistics in Pisa, IstitutoEditoriale e Poligrafico Internazionale, Pisa-Roma,pages 821-864.Nilda Ruimy and Adriana Roventini.
2005.
Towardsthe linking of two electronic lexical databases ofItalian.
In  Proceedings of L&T'05 - LanguageTechnologies as a Challenge for Computer Scienceand Linguistics, pages 230-234, Poznan, Poland.Figure 5.
Overall System Implementation.12
