A Mechanism for ellipsis resolution in dialogued systems.Dfaz de Ilarraza Sanchez, A.
*, Rodrfguez Hontoria, H. +, Verdejo Mafllo, F. +*Informatika Saila.
Euskal Herriko UnibertsitateaIn formatika FakuItateaBarrio de Ibaeta s/n.
20080 Donostia.
SpainTno.
(34) (43) 218000E-maih ar adiaz@ gorria.if,ehu.esABSTRACT:  An ellipsis resolution mechanism ispresented.
The mechanism is a part of a Natural LanguageUnderstanding System developed in the last years in orderto be included as a main component of several projectsbased on man/machine interactions.
CAPRA, anintelligent system for teaching programming, and GUAI,a natural anguage interfaces generator, are two of suchapplications.
In our approach, syntactic and knowledge-based techniques are combined in order to get a greatcoverage of elliptical cases.I.
Introduct ion.Anaphoric reference always appear in any NaturalLanguage application.
Its occurrence is common inDialogued Based systems.
Present work describes anapproach for the most emphasized form of anaphoricreference: the ellipsis.
It has been implemented in aNatural Language Understanding System.
This system isthe core of some projects based on Human/Computerinteraction.
Tutor/student Interface of the CAPRA system\[Garijo et al871, and the interfaces generator GUAI\[Rodrfg,mz,89\], are two of such applications.Ellipsis resolution has to deal with two majorsubproblems:I.- The analysis of the elliptical sentence.2.- The reconstruction f the elided fragments.Related to the first point, usually, flexible analysistechniques are applied \[Hayes,Reddy,83\].
For the secondpoint, there is not a general solution.
Several partialapproaches have been made by means of syntactic\[Weischedel,Sondheimer,82\] or conceptual techniquesbased on focus exploration \[Sidner,83\].Our approach uses both techniques in order to get a greatcoverage of resolved cases.2.
Dialogue managementNL-Dialogue systems are usually based on three datastructures \[Grosz,Sidner,86\]: Dialogue Structure, torepresent the organization of the interactions between thespeakers, the Intentional Structure to organize theintentions of the speakers, core of the comnmnicativeprocess during the dialogue, and the Attentional Structurewhere topics of tile Dialogue are represented.!
'he Dialogue StructureThe D ia logue Structure is a modelization of thecommunication process.
This structure is dynamicallybuilt and is represented by a tree.
Conversat ion is theroot of the tree.
A conversation takes place betweenseveral participants and it is composed by one or moreD ia logues .
Dialogues are units of communicationcharacterized by a specific topic.
A Dialogue is composedby one or more In terchanges .
Diaalogues are tied tothe Attentional Structure.An Interchange has an Objective which must be filled.An Interchange has information about its goal, level ofsatisfaction and its evolution.The Intervention is the elemental component of the.Dialogue S~ucture.
An Intervention is produced in a+ Department Llenguatges i Sistemes Inform~ticsUniversitat Politgcnica de Catalunya.C/Pan Gargallo, 5 08028 Barcelona SpainTno.
(34) (3) 4017000E-mail: horacio@ fib.upc.esspecific time, and implies that a message has been sentby a speaker to a hearer.
The content of the message isrepresented in different linguistic levels.The Attentional StNctureThe Attentional Structure is used as a search-space in theresolution of some types of References.
In our system,definite reference, direct and anaphoric, and, specially,pronominal and elliptical reference use the AttentionalStructure.
In our system, the Attentional Structure ismainly conceptual..Th.e organization of the analysis l~rocess.In our approach the linguistic de3cription follows astratified model; however, parsing is a cooperativeprocess between different Knowledge Sources.
These KSgenerate partial interpretations, interrupt each other, askfor information to other components, ete.In order to describe and implement different parsingstrategies, our system is based on the use of a multilevelBlackboard Arch i tecture .In a descriptive level, at any moment, there will be acollection of concepts, already built in the parsingprocess, called Real izations, and another collection ofvirtual concepts, objects we wait for, calledExpectat ions .
The core of the process consists ofobtaining some new realizations atisfying currentexpectations.
Realizations and Expecte4ions are created atdifferent levels and implemented in a frame-likeformalism.3.
E l l ips is .Since the appearence of C. Sidner's works the relationbetween anaphora nd focus is commonly accepted.
Theanaphoric treatment we propose is performed in a parallelway to the construction of the Attentional Structure.Relationships between anaphoric resolution and theAttentional Structure are as follows:During the process of anaphora resolution, queries to theAttentional Structure are made in order' to find theantecedent of the anaphoric expression, leading,somt;times to the modification of such structure.We will examine here one of the more important andfrecquent type of anaphora in systems based ondialogues: Ellipsis.Two types of ellipsis can be considered: syntactical andconceptual.
We say that a syntactical ellipsis happenswhen a syntactical component is missed.
A conceptualellipsis is detected when the value of a mandatorydescriptor for that concept has not been given.Conceptual ellit~sisWhen values of mandatory descriptors are not present,the system will generate xpectations for instances thatcould fill the descriptors.
The reference resolution processwill try to solve these expectations, first, by means ofthe Attentional Structure and then by means of defaultvalues defined in the KB.452 1Figure 1 shows the objects generated during theinterpretation process for the query " the current price ofB.T.
stocks",:,S;O ~: L l ...... L ~ I~,: I I In~=: STOCX-EXCHANGE J J~nlsh~7: Il,o..,~ohT: I I"~':8' I~ T,r,~ I I g??''~H"d"'"'i?
": Ilpo,'~o": I~ ..__l l n~Inal: i 8AR.~')'s?ssi~'d: \[ T01~Y v \[I~EL~i I '-n=': ' "fig.
1.Syntactical .elliPSiSSyntactical ellipsis are usually short term anaphoricreferences.
The resolution mechanism we have adoptedconsiders that syntactical elements that are antecedent ofthe elided ones, must be found in the previous message ofthe user himself/herself.
The method emphasizes theparallelism between whole arid elided expressions.The syntactic formalism we used is based on a R.P.S.G,(\[Sager,81\], \[Hirsehman,Puder,86\]).The syntactic structures managed by the system are parsetrees and basically the process consists of an unificationof two parse trees.
Formally, they are n-ary labeled trees.The label keeps only the syntactical category and,eventually a list of associated syntactic features.The classical formulation of unification for two trees isbased on a preorder traversat of both trees, in parallel,trying to unify the different nodes.
A strict application ofthe unification algorithm will not be very useful.
In orderto get a great coverage it is necessary to make moreflexible the unification conditions.
This will be done inthree aspects:Taking into account the type of components to beunified.
In the kind of syntactical formalism we use,rules, and so the structure of the parse tree, are derivedby (1) Subst i tut ion of a syntactic ategory by another,or (2) Ad junct lon  of modifiers chains to a centralone.
Grammatical categories are so subcategorized intocentral and adjunct.In our unification algorithm, the adjunct components ofthe first tree (ea: ellipsis antecedent) dont't have toparticipate in the unification process.
The adjunctcomponents of the second tree (ec: elliptical component)are considered in the unification process but they can beunified with empty trees.On the other hand, the order of the adjunct componentsin any of the trees doesn't matter to the unificationprocess (even in the case that this order would had beenimportant during the syntactic process)Another point to be considered is the relaxation of theunification conditions between components.
Usually, two:c~odes are unifiable if they have the same syntaeticalcategory and their syntactic features are compatible.
Weestablish a flexible criterium introducing the concept ofcompatibility between categories.
We will not requirethat two categories must be identical bu!
compatible.
Theidea of compatibility between categories is based on theequality of distributional features, though it has beenweakened (so, for example, <*N > and <*PRON> (Nounand Pronoun) are compatible).3.1 Unification AlgorithmThe algorithm has two phases: During the first one ea(ellipsis antecedent) and ec  (elliptical component) treesare unified.
If the unification has been successful, thercsuh of this phase is a target ree in which some adjunctcomponents can be incorrectly placed.
Tim second phasetransforms the target tree in order to get a rightplacement of all the constituents.Unification PhaseComponents of ea categorized as central areincorporated to the target tree in the same structuralposition they had in ea .
If the algorithm finds theirsequivalents in ec  then the htbel of constituents in thetarget ree will hold the information contained in ec .The adjunct components of ec are incorporated, togetherwith their labels, to the ta:rget ree having or not beenunified with a corresponding component in ea.The adjunct components of ea whitout equivalent in ecare not incorporated to the target ree.
They are saved ina list of pending components.If there is a central component in ec  whitout equivalenti n  ea  , the unification process fails.The implementation f the algorithm is based on twomain mutually recursive functions: dd-tree-unif icatlonand dd- fo res t -un i  f leat lon.The function dd-tree-uni.ficat_i.io_jl takes as arguments thetrees to be unified.
It examines the compatibility of theroots by means of a call to the r id -compat ib lefunction.
If the roots are not compatible, the functionreturns an empty list.If the roots are compatible, the function makes a call todd-forest-unification whose arguments are forestscomposed by the children of both trees.
The functionreturns a tuple composed by the target tree, the twopending forests and the list of pending adjunct elementswe talked above.The function dd-fo1"est-unifi._.cation takes as arguments woforests and tries to unify their initial fragments.
Bothforest are traversed in parallel trying matching theircorresponding trees until one of the forests becomesempty or the unification fails.
Each matching considersthe following cases:1.- Both lrees are unifiable (a call to dd-tree-unification has been successfully made).
In this case theunification goes on and, eventually, the size list ofpendings is increased, the unified trees are eliminatedfrom the respective forests and the pending forests thatthe function dd-tree-unification returns are incorporated tothe new ones for their treatment.2.- The tree of the first forest is neither unifiablenor adjunct.
The component is incorporated to the targettree and its children to the correspondent forest.3.- The tree of the second forest is not unifiable butadjunct.
The component is incorporated to the target treeand its children to the correspondent forest.4.- None of the previous cases happen.
In this case,the unification process is stopped.In any of the previous cases, the function returns asimilar tuple to the dd-tree..unification, dd-forest-unification never fails..If the algorithm fails in this firstphase, then the unification is not possible.Transformation phaseInputs for the second phase of the algorithm are thetarget tree and the list of pending adjunct components.The adjunct components of the target tree not unified inthe former phase are examined and their correspondingelements are searched in the list of pending elements.
Ifan element is found, it is deleted from the list and theposition of the component of tile target ree is modified,indicating that its correspondent element has been found(unified).When the process is finished, the pending adjunctcomponents are not considered a:nymore and constituentsof the target ree are confirmed in their positions.2 453Examp~leLet us follow the application of the algorithm with anexample.
Figure 2 shows the syntactic structure of thefirst intervention "Cu~il es el fndice de boy?".
The secondintervention "Y el de ayer?"
is shown in figure 3.
Figure4 shows the target tree "Cu~l es el fndice de ayer?
",result of the unification process.fig.
2. fig.
3.The algorithm starts by trying to unify trees with rootslisint3511 and lisint6831, there are not pending adjuncts.Syntactic categories of these components are identical,INTERROG, and there is not syntactical features, so theunification is possible.
Now, the problem is reduced andwe must unify two forests, the first one composed by thetrees with roots lisint731, lisint2151 and lisint3461 andthe second one by lisint5141 and lisint6501.lisint731 and lisint2151, are central and without anypossible unificator in the second forest, then they areincorporated to the target tree.
The first forest now iscomposed by the trees iisint791 and lisint346t, and thereare no changes in the second one.The same considerations will lead to incorporatecomponents iisint791 and lisint3461.
The first forest isnow composed by the element whith the lisint2711 root.Second one remains without changes.fig.
4.The incorporation of lisint2711 to the target treeproduces the unification of the forest composed bylisint841 , lisint891 and lisint2501, and the second one,still remains without changes.Nodes lisint841 and lisint5141, both with *ART category,"masculine" and "singular", are unifiable withoutproblems, lisint891 being a central node is alsoincorporated.
Now the problem is reduced to theunification of the prepositional phrases lisint2501 andlisint6501 which it is done easily and the resulting targettree is shown in figure 4.
Further cases can be found in\[Rodriguez, 89\] and \[Diaz de Ilarraza, 90\]4.
Conclus ionsWe have presented here a mechanism for ellipsisresolution in dialogued systems.
Our proposal combinessyntactic and contextual information.
First one is usedto unify the parse tree of the elliptical sentence withtrees of previous entences.
The unification algorithm ismore flexible than those presented in the literature, andin consequence, solves more cases.
Its flexibility isbased on the differentiated treatment for central andadjunct components of the parsing trees as well as agreater freedom in the syntactic realization of theconstituents.
Syntactic resolution is complementedwith resolution rules for conceptual ellipsis working onthe dialogue structures.
As a result a broad range ofcases are covered by the system.5.
References.\[Diaz de Ilarraza, 90\] Diaz de Ilarraza, A.: "Gesti6nde di~logos en lenguaje natural para un sistema deensefianza inteligente".
Tesis Doctoral.
Universidad e!Pals Vasco,1990\[Garijo et al87\] Garijo, F., Verdejo, F., Dfaz deIlarraza, A., FernS.ndez, 1. ,Sarasola, K.: "CAPRA: Anintelligent system to teach novice programmers".International Conference on Artificial Intelligence, SanSebastian, 1987.\[Grosz,Sldner,86\] Grosz, B., Sidner, C.: "Attention,Intentions and the Structure of Discourse".
ComputationalLinguistics Vol.
12, Num.
3, 1986.\[Hayes,Reddy,83\] Hayes, Reddy: "Steps toward agraceful interaction in spoken and written man/machineinteraction".
I J.M.M.S.
Vol.
19, 1983.\[Hirschman,Puder,86\] Hirschman, L., Puder, P.:"Restriction Grammar: A Prolog implementation".
En"Logic Programming and its applications".
Ablex Seriesin Artificial Intelligence, 1986.\[Hlrst,79\] Hirst, G.: "Anaphora in Natural LanguageUnderstanding: A survey".
Tech.
Report 79.2, D.C.S.U.British Columbia, Vancouver, Canad~i, 1979.\[Rodriguez,89\] Rodrfguez, H.: "GUAI: Un generadorautom~tico de interfaces en lengua natural".
TesisDoctoral.
Facuhat d' Inform~tica U.P.C.
Barcelona, \]989.\[Sager,81\] Sager, N.: "Natural Language InformationProcessing".
Addison-Wesley, 1981.\[Sldner,83\] Sidner, C.: "Focusing in thecomprehension f definite anaphora".
En "ComputationalModels of discourse".Brody, M. y Berwick, R. eds.
MITPress, Cambridge, MA, 1983.\ [Welschedel ,Sondhelmer,82\]  Weischedel,Sondheimer: "An improved heuristic for ellipsisprocessing".
20th.
A.M. of A.C.L., 1982.454 3
