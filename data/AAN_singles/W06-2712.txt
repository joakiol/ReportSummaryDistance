Representing and Accessing Multi-Level Annotations in MMAX2Christoph Mu?llerEML Research gGmbHVilla BoschSchlo?-Wolfsbrunnenweg 3369118 Heidelberg, Germanychristoph.mueller@eml-research.de1 IntroductionMMAX21 is a versatile, XML-based annotationtool which has already been used in a variety of an-notation projects.
It is also the tool of choice in theongoing project DIANA-Summ, which deals withanaphora resolution and its application to spokendialog summarization.
The project uses the ICSIMeeting Corpus (Janin et al, 2003), a corpus ofmulti-party dialogs which contains a considerableamount of simultaneous speech.
It features a semi-automatically generated segmentation in whichthe corpus developers tried to track the flow of thedialog by inserting segment starts approximatelywhenever a person started talking.
As a result, thecorpus has some interesting structural properties,most notably overlap, that are challenging for anXML-based representation format.
The followingbrief overview of MMAX2 focuses on this aspect,using examples from the ICSI Meeting Corpus.2 The MMAX2 Data ModelLike most current annotation tools, MMAX2makes use of stand-off annotation.
The base datais represented as a sequence of <word> elementswith exactly one PCDATA child each.
Normally,these PCDATA children represent orthographicalwords, but larger or smaller units (e.g.
characters)are also possible, depending on the required gran-ularity of the representation.2<?xml version="1.0" encoding="US-ASCII"?><!DOCTYPE words SYSTEM "words.dtd"><words>...<word id="word_3710">That</word><word id="word_3711">?s</word><word id="word_3712">just</word><word id="word_3713">a</word><word id="word_3714" meta="true">Pause</word><word id="word_3715">specification</word><word id="word_3716">for</word><word id="word_3717">the</word><word id="word_3718">X_M_L</word><word id="word_3719">Yep</word><word id="word_3720">.</word>1http://mmax.eml-research.de2The meta attribute in the example serves to distinguishmeta information from actual spoken words.<word id="word_3721">format</word><word id="word_3722">.</word>...</words>The order of the elements in the base data file isdetermined by the order of the segments that theybelong to.Annotations are represented in the form of<markable> elements which reference one ormore base data elements by means of a span at-tribute.
Each markable is associated with exactlyone markable level which has a unique, descrip-tive name and which groups markables that be-long to the same category or annotation dimen-sion.
Each markable level is stored in a sepa-rate XML file which bears the level name as anXML name space.
The ID of a markable must beunique for the level that it belongs to.
Markablescan carry arbitrarily many features in the commonattribute=value format.
It is by means ofthese features that the actual annotation informa-tion is represented.
For each markable level, ad-missible attributes and possible values are definedin an annotation scheme XML file (not shown).These annotation schemes are much more power-ful for expressing attribute-related constraints thane.g.
DTDs.
The following first example shows theresult of the segmentation of the sample base data.The participant attribute contains the identi-fier of the speaker that is associated with the re-spective segment.<?xml version="1.0" encoding="US-ASCII"?><!DOCTYPE markables SYSTEM "markables.dtd"><markables xmlns="www.eml.org/NameSpaces/segment">...<markable id="markable_468"span="word_3710..word_3714"participant="me012"/><markable id="markable_469"span="word_3715..word_3718"participant="me012"/><markable id="markable_470"span="word_3719..word_3720"participant="mn015"/><markable id="markable_471"span="word_3721..word_3722"participant="me012"/>...</markables>73The next example contains markables representingthe nominal and verbal chunks in the sample basedata.<?xml version="1.0" encoding="US-ASCII"?><!DOCTYPE markables SYSTEM "markables.dtd"><markables xmlns="www.eml.org/NameSpaces/chunks">...<markable id="markable_7834"span="word_3710"type="demonstrative"/><markable id="markable_7835"span="word_3711"type="copula"/><markable id="markable_7836"span="word_3713..word_3715"type="nn"/><markable id="markable_7837"span="word_3711..word_3715"type="predication"subject="markable_7834"/><markable id="markable_7838"span="word_3717..word_3718,word_3721"type="nn"/>...</markables>The following basic facts about markables inMMAX2 are worth noting:1.
Every markable is defined with reference tothe base data.
Markables on the same or differentlevels are independent and ignorant of each other,and only related indirectly, i.e.
by means of basedata elements that they have in common.3 Struc-tural relations like embedding ([[?s] just [a speci-fication]]) can only be determined with recourseto the base data elements that each markablespans.
This lazy representation makes it simpleand straightforward to add markables and entiremarkable levels to existing annotations.
It is also anatural way to represent non-hierarchical relationslike overlap between markables.
For example, asegment break runs through the nominal chunkrepresented by markable markable 7836 ([aspecification]) in the example above.
If the seg-ment markables were defined in terms of the mark-ables contained in them, this would be a prob-lem because the nominal chunk crosses a segmentboundary.
The downside of this lazy representa-tion is that more processing is required for e.g.querying, when the structural relations betweenmarkables have to be determined.2.
Markables can be discontinuous.
A markablenormally spans a sequence of base data elements.Each connected subsequence of these is called amarkable fragment.
A discontinuous markable isone that contains more than one fragment, like3Note that this merely means that markables are notdefined in terms of other markables, while they can in-deed reference each other: In the above example, markablemarkable 7837 ([?s just a specification]) uses an associa-tive relation (in this case named subject) to represent a ref-erence to markable markable 7834 ([That]) on the samelevel.
References to markables on other levels can be repre-sented by prefixing the markable ID with the level name.markable markable 7838 ([the XML format])above.
Actually, this markable exemplifies whatcould be called discontinuous overlap because itdoes not only cross a segment boundary, but it alsohas to omit elements from an intervening segmentby another speaker.3 Accessing Data From Within MMAX23.1 VisualizationWhen a MMAX2 document is currently loaded,the main display contains the base data text plusannotation-related information.
This informationcan comprise?
line breaks (e.g.
one after each segment),?
markable feature?s values (e.g.
theparticipant value at the beginningof each segment),?
literal text (e.g.
a tab character after theparticipant value),?
markable customizations, and?
markable handles.The so-called markable customizations are incharge of displaying text in different colors, fonts,font styles, or font sizes depending on a mark-able?s features.
The order in which they are ap-plied to the text is determined by the order ofthe currently available markable levels.
Mark-able customizations are processed bottom-up, somarkable levels should be ordered in such a waythat levels containing smaller elements (e.g.
POStags) should be on top of those levels contain-ing larger elements (chunks, segments etc.).
Thisway, smaller elements will not be hidden by largerones.When it comes to visualizing several, poten-tially embedded or overlapping markables, the so-called markable handles are of particular impor-tance.
In their most simple form, markable han-dles are pairs of short strings (most often pairsof brackets) that are displayed directly before andafter each fragment of a markable.
When twoor more markables from different levels start atthe same base data element, the nesting order ofthe markables (and their handles) is determinedon the basis of the order of the currently avail-able markable levels.
The color of markable han-dles can also be customized depending on a mark-able?s features.
Figure 1 gives an idea of what the74Figure 1: Highlighted markable handles on a discontinuous (left) and an overlapping (right) markable.MMAX2 main window can look like.
Both han-dles and text background for chunk markableswith type=predication are rendered in lightgray.
Other handles are rendered in a darker color.Markable handles are sensitive to mouse events:resting the mouse pointer over a markable handlewill highlight all handles of the pertaining mark-able.
Reasonable use of markable customizationsand handles allows for convenient visualization ofeven rather complex annotations.3.2 QueryingMMAX2 includes a query console which can beused to formulate simple queries using a specialmulti-level query language called MMAXQL.
Aquery in MMAXQL consists of a sequence ofquery tokens which describe elements (i.e.
eitherbase data elements or markables) to be matched,and relation operators which specify which rela-tion should hold between the elements matchedby two adjacent query tokens.
A single markablequery token has the formstring/conditionswhere string is an optional regular expressionand conditions specifies which features(s) themarkable should match.
The most simple condi-tion is just the name of a markable level, whichwill match all markables on that level.
If a regularexpression is also supplied, the query will returnonly the matching markables.
The query[Aa]n?\s.+/chunkswill return all markables from the chunks levelthat begin with the indefinite article4.
Markableswith particular features can be queried by specify-ing the desired attribute-value combinations.
The4The space character in the regular expression must bemasked as \s because otherwise it will be interpreted as aquery token separator.following query e.g.
will return all markables fromthe chunks level with a type value of either nnor demonstrative:/chunks.type={nn,demonstrative}If a particular value is defined for exactly one at-tribute on exactly one markable level only, boththe level and the attribute name can be left out ina query, rendering queries very concise (cf.
the ac-cess to the meta level below).Relation operators can be used to connecttwo query tokens to form a complex query.The set of supported sequential and hierarchi-cal relation operators5 includes meets (default),starts, starts with, in, dom, equals,ends, ends with, overlaps right, andoverlaps left.
Whether two markables standin a certain relation is determined with respectto the base data elements that they span.
In thecurrent early implementation, for all markables(including discontinuous ones), only the first andlast base data element is considered.
The re-sult of a query can directly be used as the inputto another query.
The following example givesan idea of what a more complex query can looklike.
The query combines the segment level, themeta level (which contains markables represent-ing e.g.
pauses, emphases, or sounds like breath-ing or mike noise), and the base data level to re-trieve those instances of you know from the ICSIMeeting corpus that occur in segments spoken byfemale speakers6 which also contain a pause or anemphasis (represented on the meta level):?
[Yy]ou know?
in (/participant={f.*} dom /{pause,emphasis})The next query shows how overlap can be han-5Associative relations are not discussed here, (Mu?ller,2005).6The first letter of the participant value encodes thespeaker?s gender.75dled.
It retrieves all chunk markables along withtheir pertaining segments by getting two partiallists and merging them using the operator or.
(/chunks in /segment) or (/chunks overlaps_right /segment)4 Accessing Data by Means of XSLMMAX2 has a built-in XSL style sheet proces-sor7 that can be used from the console to reada MMAX2 document and process it with a user-defined XSL style sheet.
The XSL processor pro-vides some special extensions for handling stand-off annotation as it is realized in MMAX2.
In thecurrent beta implementation, only some basic ex-tensions exist.
The style sheet processor can becalled from the console like this:org.eml.MMAX2.Process -in INFILE.mmax -style STYLEFILE.xslThe root element of each MMAX2 document isthe words element, i.e.
the root of the base datafile, which will be matched by the supplied XSLstyle sheet?s default template.
The actual process-ing starts in the XSL template for the word ele-ments, i.e.
the root element?s children.
A minimaltemplate looks like this:<xsl:template match="word"><xsl:text> </xsl:text><xsl:apply-templatesselect="mmax:getStartedMarkables(@id)"mode="opening"/><xsl:value-of select="text()"/><xsl:apply-templatesselect="mmax:getEndedMarkables(@id)"mode="closing"/></xsl:template>The above template inserts a white space beforethe current word and then calls an extension func-tion that returns a NodeList containing all mark-ables starting at the word.
The template theninserts the word?s text and calls another exten-sion function that returns a NodeList of markablesending at the word.
The markables returned bythe two extension function calls are themselvesmatched by XSL templates.
A minimal templatepair for matching starting and ending markablesfrom the chunks level and enclosing them inbold brackets (using HTML) looks like this:<xsl:template match="chunks:markable" mode="opening"><b>[</b></xsl:template><xsl:template match="chunks:markable" mode="closing"><b>]</b></xsl:template>Note how the markable level name (here:chunks) is used as a markable name spaceto control which markables the above templatesshould match.
The following templates wrap apair of <p> tags around each markable from7Based on Apache?s Xalanthe segment level and adds the value of theparticipant attribute to the beginning of each.<xsl:template match="segment:markable" mode="opening"><xsl:text disable-output-escaping="yes">&lt;p&gt;</xsl:text><b><xsl:value-of select="@participant"/></b></xsl:template><xsl:template match="segment:markable" mode="closing"><xsl:text disable-output-escaping="yes">&lt;/p&gt;</xsl:text></xsl:template>Creating HTML in this way can be useful forconverting a MMAX2 document with multiplelevels of annotation to a lean version for distrib-ution and (online) viewing.5 ConclusionMMAX2 is a practically usable tool for multi-level annotation.
Its main field of application isthe manual creation of annotated corpora, whichis supported by flexible and powerful means of vi-sualizing both simple and complex (incl.
overlap-ping) annotations.
MMAX2 also features a sim-ple query language and a way of accessing anno-tated corpora by means of XSL style sheets.
Whilethese two data access methods are somewhat lim-ited in scope, they are still useful in practice.
Ifa query or processing task is beyond the scope ofwhat MMAX2 can do, its simple and open XMLdata format allows for easy conversion into otherXML-based formats, incl.
those of other annota-tion and query tools.AcknowledgementsThis work has partly been funded by the KlausTschira Foundation (KTF), Heidelberg, Germany,and by the Deutsche Forschungsgemeinschaft(DFG) in the context of the project DIANA-Summ(STR 545/2-1).ReferencesJanin, A., D. Baron, J. Edwards, D. Ellis, D. Gelbart,N.
Morgan, B. Peskin, T. Pfau, E. Shriberg, A. Stol-cke & C. Wooters (2003).
The ICSI Meeting Cor-pus.
In Proceedings of the IEEE International Con-ference on Acoustics, Speech and Signal Processing,Hong Kong, pp.
364?367.Mu?ller, C. (2005).
A flexible stand-off data model withquery language for multi-level annotation.
In Pro-ceedings of the Interactive Posters/Demonstrationssession at the 43rd Annual Meeting of the Associa-tion for Computational Linguistics, Ann Arbor, Mi.,25-30 June 2005, pp.
pp.
109?112.76
