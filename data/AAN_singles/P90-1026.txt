Asymmetry  in Pars ing  and  Generat ing  with Unif icat ion Grammars :Case Studies F rom ELUGraham Russell,* Susan Warwick,* and John Carroll?
* ISSCO, 54 rte.
des Acacias ?
Cambridge University Computer Laboratory1227 Geneva, Switzerland New Museums Site, Pembroke Streetrussell@divmm.onige.ch Cambridge CB2 3QGAbst ractRecent developments in generation algorithms haveenabled work in nnificafion-based computationallinguistics to approach more closely the ideal ofgrammars as declarative statements of linguisticfacts, neutral between analysis an0_ synthesis, x-"~-ouithis perspective, however, the situation is still farfrom perfect; all known methods of generationimpose constraints on the grammars they assume.We briefly consider a number of proposals forgeneration, outlining their consequences for theform of grammacs, and then report on experiencearising from the addition of a generator toan exist-ing unification environment.
The algorithm inquestion (based on that of Shieber et al (1989)),though among the most permissive currently avail-able, excludes certain classes of parsable analyses.1.
I n t roduct ionParsing and generation me both concerned with therelation between texts and representations, and inso far as a grammar defines this relation withoutreference to direction, it may be regarded as rever-sible.
Yet, in practice, the program which 'applies'a grammar for the purpose of parsing is quite dis-tinct from the one which performs generation.tThe essential difference between parsing andgenerating lies in the nature of the input.
The text,as a string of words, traditionally establishes thestarting point of parsing; whether the processing istop-down or bottom-up, the basis for selectinggrammar roles is information associated with wordsin the lexicon.
In the case of generation, there is ingeneral no guarantee that the constituents of aninput representation correspond towords; a portionof the input may be related irectly to a given word,or it may be the result of combining representationsassociated to some sequence of rules, portions ofwhich me ultimately related to lexical items.
Forexample, if the sentence John kicked the bucketreceives the semantic representation die(John), it isi Parsing and generation eed not employ dif-ferent algorithms or control strategies; ee Shieber(1988) for discussion.
However, a truly reversiblegram would be an entirely different undergokingwhat is described here.
One such project iscurrently under way at New Mexico State Universi-ty (Yorick Wilk~, p.c.).
205relatively easy to see how during parsing the recog-uilion of kicked and the bucket will provide thenecessary information (from the lexical entry forkick) to build that represemo~on.
"l'ne representa-tion and the lexical items are in general related notdhectly, but rather via intennediate syntactic rules,any of which is able to manipulate the representa-tion in arbitrary ways; in generation, it is not possi-ble to identify the correct lexical item without con-sidering the syntactic rules which may intervene.The generation problem, then, consists in howto build a syntactic structure faom an initialrepresentation, taking it as the root, and extendingthe structure 'downward' to the lexicon by select-ing rules from the grammar and attaching them atthe appropriate points.Though unification based systems have been inuse for parsing for a number of years, generationhas until recently not attracted comparable atten-tion; Wedet-lnd (1988), Dymetmaun & lsabelle(1988) and Shieber (1988) describe tluee systemsof note.
Not surprisingly, given the relative infancyof these explorations, none of these systems iswithout problems.
The most permissive of thecurrent proposals appears to be Shieber et al's(1989) revision of the Shieber (1988) algorithm, yetseveral plausible grammatical nalyses handled bythe parser me beyond the capacity of evenapproach.This paper reports on experience arising fromthe addition of a generator component tothe FLU 2environment; the algorithm is a variant of that pro-posed in Shieber et al (1989).
We first considergeneral aspects of adapting unification grammarsinitially developed for parsing to their use in gen-eration.
A brief description of the generator inELUhighlights the differences and improvements wehave adopted.
We then demonstrate shortcomings2 "Environnement Linguistique d'Unification".Cf.
Johnson & Rosner (1989) for a description ofUD (Unification Device) which includes the parserand facilities such as procedural abswactions andextended ata types (lists and trees) and Estival etal.
(1989) for a description of the extended ELUsystem which incorporates the ori~ml UD plus ageneration and translation component.of this class of generation algorithms on the basis oftwo case studies.2.
Generating with Unification Gram-marsThe goal of employing a single, minimally aug-mented, grammar for both parsing and generationhas become more accessible with the introductionof declaratve grammar formalisms (cf.
Kay, 1985).In the context of machine translation, for which theELU system has been developed, the use of thesame grammar for both tasks is highly desirable;indeed much of the work on bidirectional grammarshas been carried out in centres working on MT (cf.Busemann, 1987; van Nonrd, to appear;, Dymet-mann & Isabelle, 1988; and Wedekind, 1988).Regardless of the application, however, the abilityto generate with a grammar isextremely useful as amethod of checking its adequacy.Despite the objective of reversibility, all of thesystems mentioned here impose generation-specificrestrictions on their grammars, either by limitingthe form of possible rules or by augmenting themwith annotations.
DymeUnann & Isabelle (1988)require the grammar writer to specify for each rolethe order in which daughters should be generated;however, an order that might be correct when gen-erating from one structure can lead to non-terminating search with another.
Busemann (1987)and Saim-Dizier (1989) describe methods of gen-eration which rely on the parsing of a control struc-ture using a specialized grammar to build the syn-tax of a sentence; it is questionable to what extentthe latter two systems can be considered to operatewith bidirectional grammars.Constraints imposed by Wedekind (1988) andvan Noord (to appear) exclude certain linguisticanalyses from generation.
In order tO overcome thehigh degree of non-determinism inherent in thetop-down approach, Wedekind stipulates that adaughter of a rule must be 'connected' (i.e.
that itssemantics must be instantiated) before it can begenerated from.
Less restrictively, van Noordstipulates similar constraints on rules, i.e.
that if thesemantics of the mother node is known, then thesemantics of the head daughter is instantiated, andadditionally that if the syntax of the semantic headis known, then the semantics of each daughter isknown.
These restrictions limit the class of possi-ble analyses, excluding accounts appropriate toLFG (Kaplan and Bresnan, 1982), HPSG (Pollard& Sag, 1987) and UCG (7_eevat et al, 1987).The disparate state of progress in parsing andgeneration raises important issues concerning theadequacy of grammatical descriptions and the com-putational tools that interpret hem.
A situationexists in which a grammar may be 'correct' foranalysis, but 'incorrect' for generation.Significantly, this may be the case even when therestrictions and annotations mentioned above aretaken into account.
Grammatical analysesdeveloped in a purely parsing environment cannot206always be transferred slraightforwardly into a for-mat suitable for generation.
Two types of conclu-sion may be drawn from this: failures may beascribed to inadequacies of current generator tech-nology, or the grammatical analyses in questionmay be re-evaluated.
Practical remedies willinvolve two related strands of research; improvingmethods of generation so as to IDinimiTe restric-tions on the form of grammars that can be gen-erated fzom, and identifying problematic propertiesof grammars.
It is the second of these which thepresent paper chiefly addresses, though we alsoremark, in the next section, on some enhancementsto the Shieber et al (1989) algorithm that have beenincorporated inthe ELU generator.3.
The Generator in ELUIn this section we describe the generation algorithmin ELU, and discuss in what respects it differs fromthat described by Shieber et al (1989).
3 Twonotions central to this method of generation are thatof the 'pivot', and that of partitioning the grammarintO 'chaining' and 'noD-chaining ' rules.
Loosely,the 'pivot' of a structure to be generated from is thelowest node in a path down semantic heads of rulesat which the semantics of the current generationroot structure remain~ unchanged.
A ch~inlng lilleis one in which the semantics of the object associ-ated with the right-hand side category that has beendeclared as the head unifies with that of the left-hand side category.
Other rules are non-chainingroles.
Rules that apply between the root and thepivot are, by definition, chaining rules; further, anyrule which can be attached below the pivot is, bydefinition, a non-chaining rule.
Rules are parti-tioned into these two groups drain 8 grammar com-pilaton.Once the chaining rules have been identifed, thegrammar compiler computes the possible sequencesof such rules alon 8 a path through their mothers andsemantic heads.
The result is a 'teachability table',each of whose elements i a pair of restrictor valuesets4 representing classes of FSs which can occur atthe top and bouom of such a path; in each case, the'bottom' restrictor set characterizes a pivot.
A res-trictor set is also computed for each lexical stem, inorder to retrieve words efficiently during genera-tionThe generation algorithm uses the distinctionbetween chaining and non-chaining rules as well as3 Our discussion will therefore assume familiari-ty with this paper.4 Restrictors are attributes selected by the writerof a grammar as being maximally distinctive; whentwo FSs are to be unified, their respective restrictorvalues axe first checked for compatibility, so as toeliminate the cost of an attempted nnificaton whichis bound to fail.
See Shieber (1985).that between head and non-head auglzers, thereachability table for chaining rules, the semanticportion of the FS to be generated fi~m 5, and therestrictors for lexicon stems.
The algorithm is:1.
Take all grammar rules declared as 'initial' (orall rules in the grammar if no such declarationhas been made); for each of these rules whosemother unifies with the input FS, apply the roletop-down, building FSs for each of thedaughters, and, starting with the head daughter,execute step 2 for each one.
If generation firomthe daughters i successful, compute all possibleword-forms (as constrained by the locally avail-able syntactic nformation) for each lexical stemgenerated.2.
Create a pivot COnSisting of just the semanticportion of the current FS.
Non-determiniejc-ally perform steps 2a and 2b:a. Fmd a lexical stem which unifies with thepivot, making sure Coy checking with thereachability table) that he FS resulting fromthe unification can be linked through seman-tic heads of just chaining rules up to thecurrent FS.b.
Fmd a non-chaining rule which can have thepivot as mother, similarly making sure thatthe FS resulting from the unification of thepivot and the mother can be linked up to thecurrent FS.
Recursively (through 2) gen-erate the rule's daughters, tarting with thehead aughter.3.
Link the pivot up to the current FS throughsemantic beads of just chaining rules (at eachstage, before adding a new rule in the chain,checking with the teachability able that furtherlinking will be possible) and then recursively(through 2) generate the non-bead Os, ghters ofthese rules.In this algorithm non-cbaining roles are used top-down, while chaining rules are used bottom-up.Linking information is used both to check the appli-cability of a lexical stem or a non-chainlng rolewhen generating top-down from a pivot, and also tocontrol search when generating bottom-up, byensuring that the left-hand side of any role con-sidered still lies on a possible path through chainingrules to the current FS.One innovation of the ELU generator is that thenotion 'semantic bead' is interpreted rather dif-ferently; whereas the earlier work simply definesthe semantic bead of a rule as the daughter whosesemantics unifies with that of the left-hand side, andthus leaves the notion undefined for non-chalnlngrules, that described here permits the grammarwriter to identify one daughter in each rule as the5 The relevant paths being determined by theuser's declarationsemantic head.
A role in which a O~ghter sluuesthe semantics of the mother can thus be made into achaining rule or a non-chaining rule, according towhether that daughter is identified as the semantichead, and a rule that would otherwise have multiplesemantic heads can be assigned just one.
6 A rule inwhich there is no such daughter will remain a non-chaining rule, but may nevertheless be annotatedwith a similar specification.
The rationale is two-fold: the ability to coerce what would otherwise bea chaining rule to a non-chaining rule grallts thegrammar writer more control over generation, andthe ability to specify one daughter as semantic~dlymore si?nlf~mnt than the others may be exploited inorder to direct the attention of the generatortowards !hat daughter.A second difference is the order of events inbottom-up generation.
Instead of generating firomthe non-head aughters of each chaining rule as it isattached, the pivot is firm linked to the root, so that,if backtracking is forced, effort will not have beenspent on processing StrU~h-e that must be dis-carded.Finally, on each occasion that op-down genera-tion is initiated, an auempt is made to add a lexicalitem below the current root, rather than extendingthe path by application of non-chainlng rules untilno such rule is applicable.
Here, the motivation isthat lexical information may be made available assoon as possible without forcing the grammarwriter to adopt analyses that will produce bottom-up generation.
This is important because globalsyntactic properties of a sentence are ofteu deter-mined by lexical information.4.
Grammars  for  Generat ion4.1.
In t roduct ionIn this section we examine more closely interac-tions between generator and grammar.
These fallunder two headings: (i) the presence of nowdeterwini.~m in the grammar, and (ii) the role oflexicalism.One aspect of non-detetmini.qm in generation,that of the ordering of role application, is partiallyovercome in FLU by the user specification of thebead daughter.
Non-determinism with respect othe order of solving constraint equations i  less wellunderstood.
The use of restrictors helps to reducethe number of feature structures to be considered.6 Thus circumventing a problem noted byShieber et al (1989, f~4) in connection with suchrules.
Van Noord (p.c.)
stipulates that any daughterwhich has the same semantics as the mother, but isnot the semantic bead, may not branch: this con-straint is clearly too strong, precluding, among oth-er things, linguistically motivated accounts of coor-dination.207However, in FLU, the use of relational abstractionsas a generalization of temj~late facilities increasesthe problem considerably/Relational abstractionspermit the grammar writer to augment the phrasestructure rules with statements which may receivemultiple definitions in terms of constraint equa-tions; the 'Linear Precedence' definition in (2)below is an example.
This facility is a standardELU device for collapsing what would in an unex-tended PATR-like formalLqr?
he several distinctrules, thereby capturing linguistic generalizationsthat would otherwise go unexpressed.It is particularly impoRant to control non-determinism in generation, since, at least when pro-cessing is initiated, there is relatively little informa-tion available to direct he search.
Expanding multi-ple definitions as they are encountered would giverise to an n~cceptable number of alternatives,many of which might he identical, and often theinformation from the abstraction is not requireduntil all but one of the alternatives have beenexcluded by other factors.
This is not always thecase, however, and when exceptions occur theireffect may be drastic.
We now describe one suchexception to demonstrate how an elegant analysisfor parsing is unsuitable for generation.4.2.
A grammar  for French cliticsA common technique in modem lexically-orientedgrammars, and one which reflects and extends thetraditional notion of 'valency', is to encode infor-marion about he various phrases with which a verbcombines in items on a subcategorization list.
Thegrammar then enforces a match between a memberof the list and a phrase which is to combine withsome projection of the verb and removes the itemfrom the list.
When a sentence is complete, i.e.
theverb has 'found' all necessary phrases, a grammarmay require that the list he empty, or perhaps thatany remaining item is in some way specified asoptional.
See e.g.
Shieber (1986) and Pollard andSag (1987) for applications of this method.A complete grammar of French must accountfor the position and ordering of clitic pronouns.These precede the verb, while other complementphrases follow.
Moreover, they appear in a fixedorder, as shown in (1):(1) me le lui y ente la leurse lesnousvonsUp to three clitics may occur, but for the sake ofthis discussion, we consider only the simpler case7 Cf.
Johnson & Rosuer (1989) for a fullerdescription of relational abstractions.of two critics as complement phrases to the verb.
sThere are of course many ways of accounting fortheir distribution; 9 the subcategorization listdeviceseems a natural solution, since any complementphrase may be realized as a critic.
The grammarrule in (2) introduces up to two clitics before theverb, their relative order determined by a relationalabstraction which is defined by a number ofclauses, each clause licensing one of the possibleclitic sequences.
(2) vplus -> CI1 C12 I-IVH'recede(Cll,O_2)List = <HV subcat> - -  CII<vplus ubcat> =List - -  C12Precede(X,Y)<X person> =first/second<Y person> -- thirdPtecede(X,Y)<X case> = accusative<Y case> = dativeSome remarks on notation will be helpful: calls torelational abstractions are indicated by the exclama-tion mark, feature-value disjunction is indicated bythe slash, and an equation of the form'X = Y - -Z ' ,  where X and Y are lists, nnifies Xnon-detenninistically with the result of extractingone instance of Z from Y.The effect of this rule, then, is to associate apair of clitics with a verb, checkln~ that they arecorrectly ordered, and unifying the subcategoriza-tion list of the left-hand side category with a copyof that of the head verb from which objects unify-ing with each of the clitlcs have been removed.The problem emerges when informationassumed to he held in the subcategorizafion listof'vplus' is required in order to control further gen-eration.
For example, if 'vplus' appears as sister toanother complement phrase, and the same pro-cedure of unifying the latter with an item on the listtakes place, then because the generator hassuspended expansion of non-determini.~tic abstrac-lions, the subcategorization list itself will he unin-stantiated, and therefore no information regardingthe semantics of the complement phrase will heavailable to restrict op-down generation.s This is something of an oversimplification, asnot only complement phrases, but also adverbialsand parts of complement phrases are realized as cli-tics.
See Grimshaw (1982) for a partial LFG ac-count of these phenomena.
We also ignore the is-sue of negation, which considerably complicatesthe clitic-aux-verb structure.9 The categorial treatment proposed in Baschunget al (1987) not only makes use of order of argu-ments, but also codes each clitic for all possiblecombinations.208Modifications to the syntactic constituencyassumed bere do not affect he principle; as long asthe instanfiation of so central an element of thegrammar as the subcategorization list is delayed,the problem will remain.
An alternative type ofanalysis would remove the non-determinism fromthe grammar by factoring it out into a largernomber of rules.
This solution is not without itsown disadvantages; the number of distinct rulesneeded by a full treatment of French critics,integrated with the placement of the various nega-tive panicles and auxiliaries, hould not be underes-timated.
We postpone further discussion of non-determini.~m and delay until the conclusion and turnnow to the problem of empty semantic heads, animportant problem for bead-driven generation algo-rithms.
1o4.3.
Empty Semantic HeadsIn German and Dutch, there are two positions in asentence where tensed verbs may appear: in secondposition of a main clause, and in final position of asubordinate clause.
Once again, a multitude of ana-lyses are possible within ELU grammars.
Oneapproach is to control the distribution of verbs withgrammar rules specific to clause-type; this solutiongives rise to what might be felt to be an unaccept-able degree of duplication i  the grammar.
A moreelegant approach, successful for parsing, exploitsthe possibility of assoc/ating a word or phraseappearing in one position within a sentence with a'gap' elsewbere.The latter analysis will be recognized as a vari-ant of a standard Govermnent-Binding treatment, inwhich a tensed verb in a main clause is 'raised'from an 'underlying' sentence-final position to a'surface' second position (see e.g.
Haider (1985),Platzack (1985) for discussion of this class of ana-lyses).
The dependency may be implemented bythe use of a feature, say 'v2', whose value in averb-second construction is a feature structurerepresenting the verb to be raised, and in other con-stmctions an atomic onstant such as 'none', whichserves to block the dependency.
At the extractionsite, any value of 'v2' other than 'none' may becashed out as an empty production.
Informationregarding the various syntactic properties of theraised verb is passed in the normal fashion betweenthe verb's true position and the extraction site,wbere it is able to exert the same constraints uponcomplement phrases that a lexically-realiTed verbwould.The simplified rule set given in (3) will serve asa basis for discussion.
Recall that the generatoroperates by partitioning the rules of the grammar1o This problem is alluded to in Shieber et al(1989, fn.4) and is discussed in a draft of an ex-panded version of the paper.209into classes to be applied top-down (non-ch~inlngrules - here 'S-gap' and 'V2') and bottom-up(chaining rules - here 'TOP', 'S' and 'V').Bottom-up generation is only practical if the inputstructure to that phase of generation containssufficient information, e.g.
the verb with its sub-categorization list.
(3) # Rule TOPTOP -> XP I-I_S<* cat> = top <* head> = <H_S head><XP cut> = np <H_S subcat> =\[XP\]<H_S cat> = sbar#Rule V2Sbar -> H_V2 S<* cat> = sbar <H_V2 cat> - v<S cat> = s <* subcat> =<S suboat><S v2> = H_V2 <* bead> = <S bead><H_V2 head syn vfonn> = finite#Rule SS -> XPH_S<S cat>ffis <XP cat> = ap<H_S cat> = s <* v2> = <H_S v2><* subcat> =<H_S subcat> - -  XP<* head> = <I-IS head>#Rule VS -> H_V<S cat> =s <* head> = <H_V bead><H_V cat> = v <* subcat> =<H_V subcat># Rule S-gapS ->-<S cat> = s <S bead> = <V2 head><S v2> ffi V2 <S subcat> =<V2 subcat>The verb-raising analysis sketched here has theunfortunate property of supplying the generatorwith a semantic bead (the verb gap) about whichnothing is known.
At the stage when top-downprocessing has identified the verb gap as the start-ing point fog boUom-up generation, the inputfeatm'e structure is underspecified.
In particular,the subeategorization list of the missing verb is-ninstalltiated, and in the grammar in question, it isthe length of this list which controls invocation ofthe recumive role 'S'.
No bindings can be found,and the generator suspends evaluation of that equa-tion in the hope, in-founded on this occasion, thatinformation not yet present will later allow its solu-tion.
The result is that 'S '  is repeatedly addedabove 'S-gap', in a non-termlnating attempt oensure completeness of the search.Van Noord (1989) describes two solutions tothis problem, both of which are additions to the ori-ginal program, and whose only motivation (so far)is to overcome this specific problem.
The first,somewhat ad-hoc, solution allows the verb to haveas one of its morphological realizations the emptystring.
Since word forms are generated at the endof processing by a morphological front-end, thegenerator can posit the same word in both positions(for the purpose of relrieving its subcategorizafionbehaviour f~om the lexicon, for example).
Themorphological component then generates oneempty string and one full word according to theposition of the verb (i.e.
in a main or subordinateclause).
"\['nis mechani.~n is not available in ELU.The second solution adds an additional 'connect'clause in the Prolog program, specific to gaps, inorder to assure that the gap is first instanfiatedbefore further processing; this solution raises theissue of I~ming programs to treat specific problemsas they are encountenxLThere are other constructions which raise thesame kind of problem; the fronting of apparentlynon-constitnent verbal sequences in German (Ner-boone, 1986) introduces more complex dependen-cies, while in English the phenomena of Gappingand Verb-Phrase Ellipsis both manifest themselvessyntactically in the absence from a sentence of averb and possibly other material.
Here, thedifficulty is, if anything, greater, as the dependen-cies in question are anaphoric in nature, rather thansyntactic.5.
ConclusionWe have seen, in the preceding section, how inorder to write grammars uitable for use with thegenerator, one must either modify the technicalaspects of the grammar or dispense with cemfinclasses of grammatical nalysis (losing the benefitsof relational abstraction on one hand, and lexical-ism on the other, for example).
Both of these maybe interpreted as restricting the freedom of thegrammar writer.
The problematic case illustrated insection 4.2 raises the issue of non-deterrolni~m, apotential pitfall for all unification-based systems.In parsing, the result may be long processing limes,but when generating with algorithms of this class,the consequence is often non-tern~inafion.
AsShieber et al (1989, fn.4) observe, failure to choosethe right daughter as the starting point for recursivegeneration may prevent tenuinafion.The desire to exploit he power of unification byusing the lexicon as a repository of essentially syn-tactic (beyond pure semantic) information isnatural, and has been encouraged by the success intheoretical linguistics of grammatical formalismswhich employ such techniques.
Yet the use ofthese techniques in grammar writing, which arehighly attractive from the point of view of economyand expressive power, deprives the generator ofinformation that is, strictly speaking, syntactic.Semantic heads alone are not sufficient to drive thegeneration process, if syntactic information cannotalso be made available.
Our interim conclusion isthat strong versions of the lexicalist position do notappear to be compatible with our current generator,at least for a number of cases.
This is not to saythat it should be abandoned - the benefits in termsof clarity and economy are probably too great - butsome care is needed if it is to be exploited effec- 210lively.Given that work on this type of generation is inits early stages, it is to be hoped that confimfingresearch will enable less restricted grammars to bewritten.
Nevertheless, the currently available facili-ties have been employed successfully in general,mJking it possible to envisage defining the 'ade-quacy' of a grammar in terms of its behavior bothin parsing and in generation.ReferencesBaschung, K, G.G.
Bes, A. Corluy, and T. Guillotin(1987) "Auxiliaries and Critics in French UCGGrammar".
Proceedings of the Third Confer-ence of the European Chapter of the Associa-tion for Computational Linguistics, Copen-hagen, Denmark, April lst-3rd 1987: 173-178.Bmsnan, J.
(ed.)
(1982) The Mental Representationof Grammatical Relations.
Cambridge, MA:MIT Pmm.Busemann, S. (1987) "Generienmg mit GPSG".KIT-Report 49, Techni~che Universit~t Berlin.Dymelman, M. & P. Isabelle (1988) "ReversibleLogic Grammars for Machine Translation".Proceedings of the 2nd International Confer-ence on Theoretical nd Methodological Issuesin Machine Translation of Natural Languages,Camegie-Mellon U iversity, Pittsburgh, USA.Estival, D., A. Ballim, G. Russell, and S. Warwick(1989) "A Syntax and Semantics for Feanue-Structu~ Transfer".
MS, ISSCO.Grimshaw, J.
(1982) "On the Lexical Representa-tion of Romance Reflexive Clitics", in Bresnan(ed.
): 87-  148.Haider, H. (1985) "V-Second in German", in H.Haider and M. Prinzhom (eds.)
Verb SecondPhenomena in Germanic Languages: 49 - 75.Dordrecht: Foris.Johnson, R. and M. Rosner (1989) "A RichEnvironment for Experimentation withUnification Grammars".
Proceedings of theFourth Conference of the European Chapter ofthe Association for Computational Linguistics,Manchester, UK, April 10th-12th 1989:182-189.Kaplan, R.M.
and J. Breanan (1982) "Lexical-Functional Grammar:.
A Formal System forGrammatical Representation", in Bresnun (ed.
):173-281.Kay, M. (1985) "Parsing in Functional UnificationGrammar", in D. Dowry, L. Kamunen, and A.Zwicky (eds.)
Natural Language Parsing.Cambridge: Cambridge University Press:251-278.Nerbonne, J.
(1986) "'Phantoms' and GermanFronting: Poltergeist Constituents?".
Linguis-tics 24-5, 857-870.van Noord, G. (to appear) "Bottom Up Genemtinnin Unification-based Formalisms", in C. Mell-ish, R. Dale, and M. Zock (eds.)
Proceedings ofthe Second European Workshop on NaturalLanguage Generation.Platzack, C. (1985) "A Survey of Generative Ana-lyses of the Verb Second Phenomenon in Ger-manic".
Nordic Journal of Linguistics 8:49-73.Pollard, C. and I.A.
Sag (1987) Information-BasedSyntax and Semantics, Volume 1: Fundamen.ta/s.
CSLI Lecture Notes no.
13Saint-Dizier, P. (1989) "A Generation MethodBased on Principles of Government-BindingTheory".
Paper presented atthe Second Euro-211pean Natural Language Generation Wmkshop,Edinburgh, April 1989.Shieber, S.M.
(1985) "Using Restriction to ExtendParsing Algorithms for Complex-l~ttme-BuedForfoali~ms".
Proceedings of the 23rd AnnualMeeting of the Association for ComputationalLinguistics:.
145-152.Shieber, S.M.
(1986) An Introduction toUnifration-Based Approaches to Grammar.CSLI l.,~tu~ Notes no.
4.Shieber, S.M.
(1988) "A Uniform Ardfiteotme forProsing and Generation".
Proceedings of the12th International Conference on Computa.tionai Linguistics, Budapest, Hungary:614--619.Shieber, S.M., van Noord, G., R.C.
Moore, andEC.N.
Pexeira (1989) "A Semantic-Head-Driven Algorithm for Unification-Based For-malisms".
Proceedings of the 27th AnnualMeeting of the Association for ComputationalLinguis~cy.
7-17.Wedekind, J.
(1988) "Generation as Stmoture-Driven Derivation".
Proceedings of the 12thInternational Conference on ComputationalLinguistics, Budapest, Hungmy: 732-737.Zeevat, I-L, E. Klein, and J. Calder (1987)"Unification Categorial Grammar".
CategorialGrammar, Unification Grammar, and Parsing,Edinburgh Working Papers in Cognitive Sci-ence, Volume 1.
Cenue for Cognitive Science,University of Edinburgh: 195-222
