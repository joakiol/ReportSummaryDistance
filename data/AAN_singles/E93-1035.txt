On Abstract Finite-State MorphologyAj i t  Narayanan & Lama HashemDepar tment  of Computer  ScienceUnivers i ty of ExeterExeter  EX4 4PTUKAbst rac tAspects of abstract finite-state morphologyare introduced and demonstrated.
The useof two-way finite automata for Arabic nounstem and verb root inflection leads to ab-stractions based on finite-state transitionnetwork topology as well as the form andcontent of network arcs.
Nonconcatenativemorphology is distinguished from concate-native morphology by its use of movementon the output tape rather than the inputtape.
The idea of specific automata forclasses of inflection inheriting some or allof the nodes, arc form and arc content ofthe abstract automaton is also introduced.This can lead to novel linguistic generali-ties and applications, as well as advantagesin terms of procedural efficiency and repre-sentation.1 In t roduct ionFinite-state approaches to morphology provide waysof analyzing surface forms by appealing to the no-tion of a finite-state transducer which in turn mim-ics an ordered set of rewrite rules.
Instead of in-termediate forms being introduced (as would hap-pen if rewrite rules are used (e.g.
\[Narayanan andMehdi, 1991\] for Arabic morphology)), the finite-state transducer works on two tapes (one represent-ing lexical structure, the other the surface struc-ture) and switches states if the symbols currentlybeing scanned on the two tapes match the condi-tions of the state transition.
Following the distinc-tion expressed by Kay \[1987\], two-level morphol-ogy is a specialization of finite-state morphology inthat intermediate forms are not required even inthe grammatical formalism (e.g.
\[Koskenniemi, 1983;Koskenniemi, 1984\]).
The only representations re-quired are those for the lexical and surface forms,together with ways of mapping between the one andthe other directly.
Surface forms express the resultof any spelling-change interactions between dictio-nary/lexicon primitives.
A typical architecture ofa two-level morphological system \[Karttunen, 1983;Kataja and Koskenniemi, 1988\] consists of a dictio-nary/lexicon component containing roots, stems, af-fixes and their co-occurrence r strictions, and an au-tomaton component which codes for the mappingsbetween dictionary/lexicon forms and surface real-izations.One of the problems faced by two-level approacheswas their handling of nonconcatenative morphol-ogy.
The main difference between Semitic and non-Semitic languages i that inflectional patterns are notstraightforwardly concatenative (where morphemesare simply concatenated with roots, stems and eachother) but 'interdigitate' or 'intercalate', i.e.
the alTLxpattern is distributed among the constituents of theroot morpheme.
For example, the Arabic root 'd_r_s'('study') intercalates with the inflectional pattern'_u_i_' (perfect passive) to form the stem 'duris' ('wasstudied'), which in turn can be inflected to signifynumber and gender 1.
This nonconcatenative aspectof Arabic can be problematic for a traditional two-level approach which bypasses intermediate forms.The problem concerns the way roots, stems (roots forArabic verbs, stems for Arabic nouns) and inflectionpatterns are represented and stored.
It is obviouslynot practical to store all the possible inflected forms1Modern written Arabic rarely marks the vowels(short vowels are marked by diacritics), in this case the'u' and 'i' in 'duris', except in beginners' books on Arabic.The (text) realization has the form Mrs'.297of each root.
Instead, roots are usually separatedfrom inflections.
Morphological nalysis of a stringthen consists of identifying the root and followingpointers to inflections which may themselves containpointers to other inflections \[Karttunen, 1983\].
Thenonconcatenative aspect of Arabic means that, whenprocessing a 'word' from beginning to end, differ-ent constituents ofdifferent inflections are ertcountedduring root and inflection identification.
The tradi-tional idea of identifying a root and then followinga pointer to types of inflection depending on im-mediately contiguous constituents of the inflectioncannot be adopted.
This forced the ALPNET re-searchers, for example, to adopt a novel way of stor-ing and identifying inflections \[Beesley el al., 1989;Beesley and Newton, 1989; Beesley, 1990\].
In theirsystem there are two types of lexicon: the root lexi-con, and the pattern lexicon.
The root lexicon stores(three-consonant) roots in the form 'X_Y_Z', andthe pattern lexicon stores inflectional patterns in theform '_A_B_', where the underscores '_' are called de.tours.
Starting with the pattern lexicon, the analysisroutines recursively switch between the two types oflexicon whenever a detour character is found.This interesting solution raises the question ofwhat aspect of morphology detouring is meant toreflect or express.
If detouring isbased simply on im-plementation a d efficiency criteria, it is open to thepossible criticism that an alternative, fficient wayof handling intercalation which expresses ome lin-guistic generalities whilst being consistent with thetwo-level approach should be preferred.
Also, it isnot clear what the implications of detouring are forparallel evaluation.
However, one possible advantageis that detouring forces inflectional patterns to bekept together in the dictionary, rather than splittingthem up into even smaller fragments, as might be re-quired by a simple two-level approach.
For instance,without detouring, patterns of the form '_A_B_' mayneed to be split up into lexical entries first for the'A' and then, at a different level, for 'B'.
The factthat 'A' and 'B' together represent a certain class ofmorphological phenomena might be lost.2 Represent ing  in terca la t ionAn alternative approach to nonconcatenative mor-phology consists of usin G the idea of prosodic tem-plates \[McCarthy, 1981J, whereby the underlyingpatterns of vowels and consonants are described.
Forinstance, Kay \[1987\] provides a four-level accountof how the Arabic root 'ktb' ('write') is mappedonto the stem 'aktabib' (imperfective active form)by means of the template 'VCCVCVC' (where 'V'stands for vowel and 'C' for consonant) and eighttransitions.
The first tape contains the root, the sec-ond the template, the third the intercalative vowels(vocalism), and the fourth the surface form.
Stateswitches are determined by 'frames' of quadrupleswhich specify what each tape symbol must be.
Thereis an overhead attached to the formulation of indi-vidual templates and quadruples (which representthe mapping rules) for even a restricted set of lex-ical entries.
More generally, there is nothing in thetemplates themselves which allows underlying pat-terns to emerge or be used.
This has led to theexamination of ways of making abstractions on andclassifying templates.
For instance, inheritance anddefault-based approaches, as used in artificial in-telligence, can be adopted for template and lexicalentry representation \[DeSmedt, 1984\], so that du-plicate and redundant information can be deletedfrom individual entries if the path they are on al-ready contains this information.
Research as fo-cused on unification-based formalisms for inheritancenetwork representation (e.g.\[Flickinger t al., 1985;Shieber, 1986; Porter, 1987; Evans and Gazdar, 1990;Bird and Blackburn, 1990; Reinhard and Gibbon,1991\]).The question arises as to whether it is possi-ble to achieve the generalities obtainable througha prosodic template approach within a multi-levelfinite-state model.
Briefly, we hypothesize, in addi-tion to the lexical and surface levels, an abstract levelof automaton representation at which classes of in-flectional phenomena are given an abstract represen-tation.
These abstract automata re translated intotwo-level automata for specific morphological phe-nomena.
Concatenative and nonconcatenative pat-terns of inflection are represented not via the dictio-nary but at an abstract automaton component level.Applications of abstract automata to Arabic nounstems and verb roots are described below.3 Arab ic  noun  s t ruc tureA noun stem in Arabic is inflected according toCase Type (nominative, accusative, genitive), Num-ber (singular, dual, plural), Gender (feminine andmasculine), and Definite/Indefinite.
These mainlyare suffixes added to the noun stem.
The case end-ings determine the vowelisation of the end letter ofthe stem.The Indefinite Noun Endings are:SingularNominative: - /un / "  (double damma) (e.g.
wal-adon *d))Accusative: - /an/"  (fatha) (e.g.
waladan "ld))Genitive: - /en/ .
(kasra) (e.g.
waladen aJ))DualNominative: -/ani/~I (e.g.
waladani ~laJ))Accusative: - /ayni /~.
(e.g.
waladyni x:eaJ~)Genitive: as for accusative.PluralIn Arabic there are three types of plural.
These arethe Sound Masculine Plural (SMP), the Sound Femi-nine Plural (SFP), and the Broken Plural (BP).
TheSMP is for male human beings 2.
For example ?.
, .~2Exception: sana - year ~ which can take the SMP.298('engineer') becomes o~.
,~ or O~.
~v.
depending onthe case ending.
The SFP is for female human be-ings, inanimates, and most foreign words that havebeen incorporated into the language.
For example,~Jt~ ('scientist') becomes "b'LJt~ or ~,LJ~, again de-pending on the case ending.
Similarly, 'car' (an inan-imate object) ( ;).t~ ) becomes %'b.t~ or obt~.
TheBP does not follow any regular pattern and is fornouns that do not fall into the above categories.
Butthis is not necessarily the case.
For example, o?.!
('son' - -  male human) can be pluralised to *~.i whichis a broken plural.The SMP EndingNominative: -/oon/~.~ (e.g.
muhamiyoon o~1.~)Accusative: -/yyn/O~.
(e.g.
muhamiyyn O=,L~)Genitive: as for the accusativeThe SFP EndingIf there is the feminine nding of ~ then it needs tobe removed before adding the SFP ending.Nominative:-/atun/"b-1 (e.g.
maktabatun ?b~)Accusative: - /a ten / f , i  (e.g.
maktabaten o .
t~Genitive: as for the accusativeThe definite noun endings are the same as for theindefinite noun, except hat al ( JI ) is added to thebeginning of the noun.
When a noun is made defi-nite, the nunation is lost, so any ending with doublefatha, kasra, or damma would be reduced to a singlefatha, kasra, or damma.
For example, "~J, ('boy')becomes "aJjJl ('the boy').4 Network representationThe noun structure system to be described belowproduces urface forms of lexical representation a dso is a generator of inflected nouns.
Generation isachieved by the use of finite-state transition networks(FSTNs).
FSTNs realize finite-state tables (FSTs)which can be used for providing the mappings be-tween lexical and surface structure.
For instance,consider the FST in Figure 1 and the associatedtransition etwork in Figure 2.
According to theInputh a1.
2 0States 2.
0 33.
2 04: 0 0Figure 1: FST for a Laughing Machinetabular epresentation, if we're in state 1 (first row)and an 'h' is the current input character found (firstcolumn), then we switch to state 2 and look at thenext character.
If we're in state 1 and an 'a' or '!
'is found, then we switch to an error state (0).
Ifwe're in state 2 and an 'a' is found, we switch tostate 3 and read the next character, otherwise weh 6Figure 2: FSTN for the FST in Figure 1switch to an error state.
States 1, 2 and 3 are non-terminal (signified by the full-stops), whereas tate 4is terminal (signified by ':').
This FST specifies thestate-switching behaviour of any machine which is toaccept strings of the form '{ha}n\[ ' , i.e.
one or moreoccurrences of 'ha' followed by an exclamation mark.The same FST can be interpreted as a generator ofsuch strings if ' Input' is changed to 'Output' in Fig-ure 1.
The 'conditions' on arcs are reinterpreted ascharacters to be output in this case.The transition etwork in Figure 2 is constructeddirectly from the FST: nodes are labeled with statenumbers, and arcs specify the input conditions beforea state switch can occur.
Double-circled nodes in thetransition etwork signify start and terminal nodes.Given such FSTs and equivalent transition etworksfor Arabic noun and verb structures, Prolog was usedto implement the automata.
Start and end statesare declared with the predicates s tar t_state(X)  andend_state(Y)  where X and Y represent state num-bers, and arc declarations have the form: a rc  (Cur-rentState ,  NextState ,  \ [ InputStr ing\] ,  \ [Output -Str ing\]).
The third argument consists of the param-eters Input  Character ,  D i rect ion,  Offset, andthe fourth refers (for nouns) to the characters for theoutput word.
The direction indicates how to movethe scanning head across the input.
It can be oneof two values: r for right, and I for left.
The offsetindicates by how much to move left or right alongthe input tape.
(Right or left zero is the same as notmoving.)
The use of directions and offsets (a non-zero offset of n can be regarded as n separate statetransitions of one move in the required direction)means that the automata used here are examplesof two-way finite automata \[Rabin and Scott, 1959;Sheperdson, 1959; Hopcroft and Ullman, 1979\].The system works in the following way for Sin-gular Nominatives (and similarly for all the othernoun inflections).
A request for 'bnt' ('girl') to beinflected with Singular Nominative produces the list\ [b,n,t ,+,o,n\]  which is then fed to the appropriateautomaton.
The FSTN for the Singular Nominativeautomaton can be seen in Figure 3 and its associatedFST in Figure 4.
The first character, 'b', is identi-fied.
The current arc statement is matched against299Input Output CurrentCharacter List StateFigure 3: FSTN for the Singular NominativeStates1: 12.
03.
44.
05.
06: 07: 0Lexical evel-b o n2 0 0 00 7 3 00 0 0 00 0 5 60 0 0 60 0 0 00 0 0 0Figure 4: FST for the Singular Nominativethe arc facts of the automaton.
For the first letter wehave: are(1,?,\[b,?,?\],\[?\]), i.e.
what is the state to bemoved to from state 1, and what is to be producedat this stage?
This will match against he storedarc(1,1,\[Anychr,r,1\],\[Anychr\]), i.e.
if in state 1and any character found, then stay in state 1 andmove one position to the right (offset) after copyingthe character ('b') to the output.
The next characteris then scanned.
This matching process is repeateduntil the whole of the input word has been read.Figure 5 shows how the output string is built up forinput \[b~n~t~+,o~n\].
For the first four steps the pro-cedure is straightforward: the input is echoed to theoutput list.
The boundary sign (+) is replaced witha null value (").
When the first of the case ending let-ters is met, nothing is produced until a check is madewhether the previous output character needs chang-ing.
The automaton therefore moves back to the endof the stem to check the end character (line 7).
Forthis particular example, the character remains thesame, and the automaton moves forward again tothe first case ending (line 8).
The offsets for move-ment backwards and forwards leaves the automatonat the same position as in line 6.
The bottom lineshows the output list at the end of the traversal ofthe automaton.
(The 'O' in the output list refersto the double damma.)
Null values are deleted, andthe output list sent to the Arabic output routines.Narayanan and Hashem \[1992\] provide xample runsand more detail about the implementation.b 1b \[b\] 1b \[b,n\] 1t \[b,n,t\] 1+ \[b,n,t,'\] 2o \[b,n,t," ,"\] 3t \[b,n,t," ,"1 4o \[b,n,t,"  ,"\] 5n \[b,n,t,"  ," ,O\] 6Figure 5: Building The Output String5 Inher i tance-based  der ivat ionTwo-way automata for all nine types of inflection(three Case by three Number) can be constructedfrom abstract ones.
For instance, the noun systemused two abstractions on number.
Figure 6 repre-())Figure 6: The abstract automaton for the Singularand Pluralsents the abstract automaton form for all three cases(nominative, accusative and genitive) of singular andplural, and Figure 7 of dual.
()Figure 7: The abstract automaton for the DualSpecific automata, for example for Dual Accusat-ive and Genitive (Figure 8), can be derived from theabstract dual automaton by means of the specific300automaton inheriting the basic form of the abstractautomaton and adding specific arcs and nodes (spe-cialization), as will be described later.Figure 8: FSTN for the Dual Accusative/Genitive6 Verb  s t ruc tureThe major difference between concatenative andnonconcatenative two-way automata for Arabic isthat, for nonconcatenation, movement in both di-rections is required within the output tape ratherthan the input tape, so that affix information canbe inserted between root characters.
For concate-native two-way automata (as for the nouns), anymoves are to the beginning or ending of the stemon the input tape, and if the last character of thestem needs changing this happens before the affixoutput is added.Arabic verb structure is well-documented (e.g.\[McCarthy, 1981; Hudson, 1986\]).
The following ta-ble gives the perfect active and perfect passive stemsof the first three forms of 'ktb' only, but these areadequate to demonstrate the abstraction principlesinvolved here.Form Active PassiveI katab kutibII kattab kuttibIII kaatab kuutibThe input representation is of the form \[<root>+ <vowels>\], e.g.
\[k,t,b,+,a,a\] with a request forForm II results in 'kattab', and \[k,t,b,+,u,i I resultsin 'kuutib' if Form III passive is requested.The following six statements describe an automa-ton (Figure 9) for generating Form I stems.
(1) a rc ( l ,2 ,  \ [C,r ,1\ ] ,  \[C_,r,0\])(2) axc(2,3,  \ [C,r ,1\ ] ,  \[C_,r,1\])(3) arc(3,4,  \ [C,r ,1\ ] ,  \ [C,r ,1\])(4) vxc(4 ,6 , \ [+ , r ,1 \ ] , \ [ " , r ,1 \ ] )(5) arc(S,6,  I'V,r, 1\], I ' \[V,l ,4\],  \ [ "  , r ,4 \ ] \ ] )(e) arc(e ,7 ,  \ [V,r ,1\] ,  \ [ \ [V,1,2\] ,  [ "  , r ,2 \ ] \ ] )The output argument of the arc statement is morecomplex than for nouns.
The output argument \[X,Figure 9: Automaton for Form ID, N\] means 'After moving N steps in direction D,write X', where X can be a consonant C or vowel V.Also, the output argument can consist of one or twolists, the first for moving in one direction, the otherto return the head to an appropriate location on theoutput tape for the next state.
For instance, giventhe input \[k,t,b,+,a,a\] with a request for Form I,arc (1) would produce 'C_' (i.e.
the first consonantis output together with a blank space to its right).The same would happen for the second consonantby arc (2).
Arc (3) produces only a consonant, soin state 4 the output tape contains 'C_C_C', withthe head of the output tape resting on the last C.Arc (4) acts as a check that exactly three consonantshave been found.
Arc (5) makes the output headmove left four positions (to the first blank betweentwo Cs) and inserts the V before moving back toits original position (and writing a null value againover the existing null value).
Arc 6 works similarly,except hat the offset is only two.
The input has beenscanned sequentially, one character at a time.This automaton also works for perfect passiveForm I stems: 'a' and 'a' are replaced by 'u' and'i'.
Also, Form II can inherit the Form I automatonand add two specializations.
First, arc (2) is changedso that instead of one C being written two copies ofthe C are made (i.e.
(2a)), and arc (5) has offset 5and not 4 (i.e.
(ha)):(2a) arc(2,3,  \ [C,r ,1\ ] ,  \[CC_,r,1\])(Sa) arc(S,e ,  IV,r ,1\ ] ,  \ [ \ [V, I ,S\ ] ,  \ [ "  , r ,S \ ] \ ] )Form III can inherit from Form I and add its twospecializations, namely, arc (1) is changed so thattwo blanks are introduced (i.e.
(lb)), and arc (5) sothat two Vs are written (i.e.
(bb)).
The offset whenmoving left is 5, and when returning 4.
( lb) a rc ( l ,2 ,  \ [C,r ,1\ ] ,  \[C__,r,O\])(Sb) axc(S,6, IV,r ,1\ ] ,  \[\[W/,1,S\],  \[' ' , r ,4 \ ] \ ] )7 Abst rac t  automata  and  inher i tanceThe abstract automaton underlying Forms I, II andIII is given in Figure 10.
The solid lines specify thosearcs which are core to all specific automata, and thedashed lines signify arcs which will be specialized.
In301,VcbQFigure 10: Abstract automaton for Forms I, II andIIIthe arcs of the automata for Forms I, II and III thepattern of output Cs and Vs has specialized (as in(lb), (2a) and (5b)) and so have offsets (as in 5(a)and 5(b)).
Inheritance is multiple since the automa-ton for Form III inherits (2) from Form I as well as1.
the right return offset of 4 from (5) of Form I,i.e.
arc(5,6, \[V,r,1\], \[\[V,1,4\], \[~', r 4\]\]), and2.
the move left (before writing) offset from (5a) ofForm II, i.e.
arc(5,6, IV,r,1\], \[\[V, 1,5\], ~',r,5\]\]).Form III also specializes its V pattern, i.e.
arc(5,6, \[V,r,1\], \[\[VV, 1, 5\], \[",r,4\]\]).
In all cases, thereare seven states and fixed length stems dependingon their form.
The inheritance structure for thesethree Forms is given in Figure 11.
Form 0 specifiesthe core arcs which are inherited by all specific au-tomata and cannot be specialized, and subsequentautomata can further specialize their behaviour byadding their own arcs or changing contents of arcsinherited from other automata.The inheritance status of an arc is given by anotherargument in the arc representation.
Arcs thereforehave the following form in the implemented system:arc (S 1, S2, IP, OP, status)where S1 and $2 are state numbers, IP and OP arethe sets of input and output parameters, respectively,and 'status' is 0 for core and non-zero for non-core.In the case of representing the inheritance relation-ships between the different Forms, any non-zero sta-tus value refers to the Form for which the arc is aspecialization.
The Form I automaton is thereforefully described by:(1) arc(l,2, I t , r ,(2) arc(2,3, \[C,r,(3) arc(3,4, \[C,r,(4) az'c(4,S, \ [+,r ,(6) arc(S,e, \[V,r,1\], \[C_,r,O\], l)1\], \[c_,r, 1\], 1)13, \[C,r, 1\] ,o)1\] , \ [" ,r ,1\] ,o)i \] ,  \[\[v, l ,4\],  \[",r,4\]\], l)(6) az'c(6,7, IV,r,1\], \ [ \[V, l ,2\] ,  [ ' ' , r ,2 \ ] \ ]  O)where status 1 refers to Form I specialization.
FormII automata re fully described by:a0~ (3),(4),(6)n I (1),(2),(5)~ (lb),(2),(Sb)Figure lh  Inheritance structure for Forms I, II andIII(1) arc(l,2, \[C,r,1\], \[C_,r,O\] ,1)(2a) arc(2,3, \[C,r,1\], \[CC_,r,l\] ,2)(3) arc(3,4, \[C,r,1\], \[C,r,1\] ,0)(4) arc(4,5, \[+,r,1\], \ [ "  ,r,1\] ,o)(Sa) arc(5,6, \[V,r,1\], \[\[V,1,6\], \ [ ' '  ,r ,5\]\]  ,2)(6) arc(e,7, \[V,r,1\], \[\[v,1,2\], [ "  ,r,2\]\] o)where status 2 refers to Form II specialization.
Sim-ilarly for Form III:(lb) arc(l,2, \[C,r,1\], \[C__,r,O\] ,3)(2) arc(2,3, \[C,r,1\], \[C_,r,1\] ,1)(3) arc(S,4, \[C,r,1\], \[C,r,1\] ,0)(4) arc(4,fi, \ [+,r,1\] ,  \[ '~,r,1\],O)(sb) arc(s,e, Iv,r,1\], \ [ \ [w , l , s \ ] ,  \[",r,4\]\] .s)(6) arc(6,7, IV,r,1\], \[\[V,1,2\], [ ' ' , r ,2\] \ ] ,O)where (5b) has been constructed out of (5) and 5(a),i.e.
the state number's, input argument and right re-turn offset of 5, and the move left offset of 5, respec-tively.
Ideally, these changes to (5) and (5a) will becarried out within the Form III object.8 DiscussionThe work reported here demonstrates the feasibil-ity of adopting an abstract automaton, three-levelapproach to Arabic.
Of particular importance isthe distinction between abstract and particular FSA,where abstract automata represent classes of inflec-tional phenomena t an abstract level.
They alsorepresent algorithmic (processing) generalities.
Forinstance, crossing sequences, i.e.
movement acrosscells on the input (for nouns) and output (for verbs)tapes, cannot have repeated states with the headmoving in the same direction (otherwise we may bein a loop).
The first time movement left takes place,the state number must be odd (3 for nouns, 5 for302verbs).
Subsequent crossings must be in opposite di-rections.The examples presented deal with significant frag-ments of Arabic, and potentially useful ways of rep-resenting Arabic verb Forms in inheritance networkshave been identified.
Other advantages to the three-level model involve the.
applicability of parallelismand the general way that the model is faithful to thetwo-level approach.
There is a clear separation be-tween the top level of abstract automata dealing withclasses of inflection, on the one hand, and the knowl-edge expressed in the dictionary component, on theother.
Also, the abstract automata express generalinflectional processes: particular automata derivedfrom these abstract automata handle individual in-flectional variations.Another advantage is that the three-level modelmay actually be intuitively more plausible as a gen-eral model of how native speakers acquire morpho-logically rich languages such as Arabic.
The childmay construct the abstract automata for classes ofinflectional variations after exposure to individualwords and sentences, and then use these abstractautomata to make sense of the remaining inflectionalvariations not so far encountered.
And with regardto the teaching of Arabic, the abstract automatamay represent a teaching strategy whereby the over-all structure of Arabic inflection types can be taughtbefore specific ones are introduced.There are implications for grammatical descrip-tions of inflectionally-rich languages.
Most Arabicgrammar books introduce inflectional variations inthe form of complete tables which need to be memo-rized.
Abstract automata may provide a more struc-tured description of morphological phenomena.
Andfinally, and perhaps most interestingly, the abstractlevel of automata description makes possible thecomparison and contrasting of morphological phe-nomena cross different but related morphologicallyrich languages.
Analysis of inflections in differentlanguages can be based on automata topology andarc form and content.
This can lead to language-independent morphological theories of inflectionaltypes.
Research is continuing on all these aspects,as well as on relationships with structured Markovmodels \[Kornai, 1991\] and multi-tape autosegmentalphonology \[Wiebe, 1992\].References\[Beesley and Newton, 1989\] K. Beesley and S. New-ton.
Computer analysis of Aymara morphology: Atwo-level, finite state approach.
In S. Cox, editor,Proceedings of the ISth Annual Deseret Languageand Linguistics Symposium, pages 126-144.
De-seret Language and Linguistics Society, BrighamYoung University, 1989.\[Beesley et aL, 1989\] K. Beesley, T. Buckwalter, andS.
Newton.
Two-level finite state analysis of Ara-bic.
In Proceedings of the First Conference onBilingual Computing in Arabic and English.
Liter-ary and Linguistic Computing Centre, CambridgeUniversity, 1989.\[Beesley, 1990\] K. Beesley.
Finite-state descriptionsof Arabic morphology.
In Proceedings of the Sec-ond Conference on Bilingual Computing in Arabicand English.
Literary and Linguistic ComputingCentre, Cambridge University, 1990.\[Bird and Blackburn, 1990\] S. Bird and P. Black-burn.
A logical approach to Arabic phonology.In Proceedings of the Fifth Conference of the Eu-ropean Chapter of the Association for Computa-tional Linguistics, pages 89-94, 1990.\[DeSmedt, 1984\] W. M. DeSmedt.
Using object-oriented knowledge representation techniques inmorphology and syntax programming.
In Proceed-ings of the 198~ European Conference on ArtificialIntelligence, pages 181-184, 1984.\[Evans and Gazdar, 1990\] R. Evans and G. Gazdar,editors.
The DATR Papers, Volume 1.
School ofCognitive and Computing Sciences, University ofSussex, 1990.\[Flickinger et al, 1985\] D. P. Flickinger, C. J. Pol-lard, and T. Wasow.
Structure-sharing in lexicalrepresentation.
I  Proceedings of the 23rd AnnualMeeting of the Association for Computational Lin-guistics, pages 262-267, 1985.\[Hopcroft and Ullman, 1979\] J. E. Hopcroft and J.D.
Ullman.
Introduction to Automata Theory,Languages, and Computation.
Addison Wesley,1979.\[Hudson, 1986\] G. Hudson.
Arabic root and patternmorphology without iers.
Journal of Linguistics,22:85-122, 1986.\[Karttunen, 1983\] L. Karttunen.
KIMMO: A two-level morphological nalyzer.
Tezas Linguistic Fo-rum, 22:163-186, 1983.\[Kataja nd Koskenniemi, 1988\]L. Kataja and K. Koskenniemi.
Finite-state de-scription of Semitic morphology: a ease study inAncient Akkadian.
In Proceedings of the Inter-national Conference on Computational Linguistics(COLING88), pages 313-315, 1988.\[Kornai, 1991\] A. Kornai.
Formal Phonology.
PhDthesis, Stanford University, 1991.\[Koskenniemi, 1983\] K. Koskenniemi.
Two-levelmodel for morphological nalysis.
In Proceedingsof the International Joint Conference on ArtificialIntelligence, pages 683-685, 1983.\[Koskenniemi, 1984\] K. Koskenniemi.
A generalcomputational model for word-form recognitionand production.
In Proceedings of the Interna-tional Conference on Computational Linguistics(COLING84), pages 178-181, 1984.303\[McCarthy, 1981\] J. J. McCarthy.
A prosodic the-ory of nonconcatenative morphology.
LinguisticInquiry, 12:373-418, 1981.\[Narayanan and Mehdi, 1991\] A. Narayanan and S.Mehdi.
A computer model for transliterated Ara-bic.
Applied Computer Translation, 1(3):5-28,1991.\[Porter, 1987\] H. H. Porter.
Incorporating inheri-tance and feature structures into logic grammarformalism.
In Proceedings of the 25th AnnualMeeting of the Association for Computational Lin-guistics, pages 228-234, 1987.\[Rabin and Scott, 1959\] M. O. Rabin and D. Scott.Finite automata nd their decision problems.
IBMJournal of Research and Development, 3(2):115-125, 1959.\[Reinhard and Gibbon, 1991\] S. Reinhard and D.Gibbon.
Prosodic inheritance and morphologicalgeneralisations.
In Proceedings of the Fifth Con-ference of the European Chapter of the Associ-ation for Computational Linguistics, pages 131-136, 1991.\[Sheperdson, 1959\] J. C. Sheperdson.
The reductionof two-way automata to one-way automata.
IBMJournal of Research and Development, 3(2):198-200, 1959.\[Shieber, 1986\] S. M. Shieber.
An Introduction toUnification-Based Approaches to Grammar.
CSLI,Stanford, 1986.\[Wiebe, 1992\] B. Wiebe.
Modelling AntosegmentalPhonology with Multi-Tape Finite State Transduc-ers.
PhD thesis, Simon Fraser University, 1992.304
