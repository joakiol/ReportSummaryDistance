Proceedings of 52nd Annual Meeting of the Association for Computational Linguistics: System Demonstrations, pages 115?120,Baltimore, Maryland USA, June 23-24, 2014.c?2014 Association for Computational LinguisticsEnhanced Search with Wildcards and Morphological Inflectionsin the Google Books Ngram ViewerJason Mann?
?David Zhang?
?Lu Yang?
?Dipanjan Das?Slav Petrov?
?Columbia University?USC?Cornell University?Google Inc.Contact: dipanjand@google.com, slav@google.comAbstractWe present a new version of the GoogleBooks Ngram Viewer, which plots the fre-quency of words and phrases over the lastfive centuries; its data encompasses 6%of the world?s published books.
The newViewer adds three features for more pow-erful search: wildcards, morphological in-flections, and capitalization.
These addi-tions allow the discovery of patterns thatwere previously difficult to find and fur-ther facilitate the study of linguistic trendsin printed text.1 IntroductionThe Google Books Ngram project facilitates theanalysis of cultural, social and linguistic trendsthrough five centuries of written text in eightlanguages.
The Ngram Corpus (Michel et al.,2011; Lin et al., 2012) consists of words andphrases (i.e., ngrams) and their usage frequencyover time.1The interactive Ngram Viewer2allowsusers to retrieve and plot the frequency of mul-tiple ngrams on a simple webpage.
The Vieweris widely popular and can be used to efficientlyexplore and visualize patterns in the underlyingngram data.
For example, the ngram data hasbeen used to detect emotion trends in 20th cen-tury books (Acerbi et al., 2013), to analyze textfocusing on market capitalism throughout the pastcentury (Schulz and Robinson, 2013), detect so-cial and cultural impact of historical personalities(Skiena and Ward, 2013), or to analyze the corre-lation of economic crises with a literary ?misery?The majority of this work was carried out during aninternship at Google.1The Ngram Corpus is freely available for download athttp://books.google.com/ngrams/datasets.2See http://books.google.com/ngrams.1930 1965 2000Relative FrequencyQuery: "President Kennedy, President Reagan, President Nixon""President Kennedy""President Reagan""President Nixon"Figure 1: Mention frequencies for three different Americanpresidents queried one-by-one.index?
reflected in printed text during crises peri-ods (Bentley et al., 2014).A limitation of the Viewer, however, is that allthe reasoning has to be done by the user, andonly individual, user-specified ngrams can be re-trieved and plotted.
For example, to comparethe popularity of different presidents, one needsto come up with a list of presidents and thensearch for them one-by-one.
The result of thequery ?President Kennedy, PresidentNixon, President Reagan?
is shown inFigure 1.
To determine the most popular president,one would need to search for all presidents, whichis cumbersome and should ideally be automated.In this paper, we therefore present an updatedversion of the Viewer that enhances its searchfunctionality.
We introduce three new featuresthat automatically expand a given query and re-trieve a collection of ngrams, to facilitate the dis-covery of patterns in the underlying data.
First,users can replace one query term with a place-holder symbol ?*?
(wildcard, henceforth), whichwill return the ten most frequent expansions ofthe wildcard in the corpus for the specified yearrange.
Second, by adding a specific marker toany word in a query (?
INF?
), ngrams with all115morphological inflections of that word will be re-trieved.
Finally, the new Viewer supports capi-talization searches, which return all capitalizationvariants of the query ngram.
Figure 2 provides ex-amples for these three new types of queries.While it is fairly obvious how the above searchfeatures can be implemented via brute-force com-putation, supporting an interactive applicationwith low latency necessitates some precomputa-tion.
In particular, the wildcard search featureposes some challenges because the most frequentexpansions depend on the selected year range(consider the frequency with which presidents arementioned during different decades, for example).To this end, we provide details of our system ar-chitecture in ?2 and discuss how the new searchfeatures are implemented in ?3.
In addition, wepresent an overhaul of the Ngram Viewer?s userinterface with interactive features that allow foreasier management of the increase in data pointsreturned.Detailed analysis and interpretation of trendsuncovered with the new search interface is beyondthe scope of this paper.
We highlight some in-teresting use cases in ?4; many of the presentedqueries were difficult (or impossible) to execute inthe previous versions of the system.
We emphasizethat this demonstration updates only the Viewer,providing tools for easier analysis of the underly-ing corpora.
The ngram corpora themselves arenot updated.2 System OverviewWe first briefly review the two editions of theNgram Corpus (Michel et al., 2011; Lin et al.,2012) and then describe the extensions to the ar-chitecture of the Viewer that are needed to supportthe new search features.2.1 The Ngram CorpusThe Google Books Ngram Corpus provides ngramcounts for eight different languages over morethan 500 years; additionally, the English corpusis split further into British vs. American Englishand Fiction to aid domain-specific analysis.
Thiscorpus is a subset of all books digitized at Googleand represents more than 6% of all publicized texts(Lin et al., 2012).
Two editions of the corpus areavailable: the first edition dates from 2009 and isdescribed in Michel et al.
(2011); the second edi-tion is from 2012 and is described in Lin et al.1900 1950 2000RelativeFrequencyQuery: "University of *"University of CaliforniaUniversity of ChicagoUniversity of WisconsinUniversity of MichiganUniversity of Pennsylvania1950 1975 2000RelativeFrequencyQuery: "book_INF a hotel"book a hotelbooked a hotelbooking a hotelbooks a hotel1800 1900 2000RelativeFrequencyQuery: "fitzgerald [case-insensitive]"FitzgeraldFitzGeraldFITZGERALDFigure 2: In the new enhanced search features of the NgramViewer, a single query is automatically expanded to retrievemultiple related ngrams.
From top to bottom, we show ex-amples of the wildcard operator (?*?
), the ?
INF?
marker thatresults in morphological inflections, and the case insensitivesearch functionality.
Due to space considerations we showonly a subset of the results returned by the Ngram Viewer.(2012).
The new search features presented hereare available for both editions.Michel et al.
(2011) extract ngrams for eachpage in isolation.
More specifically, they usewhitespace tokenization and extract all ngrams upto length five.
These ngrams include ones that po-tentially span sentence boundaries, but do not in-clude ngrams that span across page breaks (evenwhen they are part of the same sentence).
Linet al.
(2012) on the other hand perform tokeniza-tion, text normalization and segmentation into sen-tences.
They then add synthetic START andEND tokens to the beginning and end of the sen-116tences to enable the distinction of sentence me-dial ngrams from those near sentence boundaries.They also ensure that sentences that span acrosspage boundaries are included.
Due to these dif-ferences, as well as the availability of additionalbook data, improvements to the optical characterrecognition algorithms and metadata extraction fordating the books, the ngrams counts from the twoeditions are not the same.The edition from Lin et al.
(2012) additionallyincludes syntactic ngrams.
The corpus is taggedusing the universal part-of-speech (POS) tag setof Petrov et al.
(2012): NOUN (nouns), VERB(verbs), ADJ (adjectives), ADV (adverbs), PRON(pronouns), DET (determiners and articles), ADP(prepositions and postpositions), CONJ (conjunc-tions).
Words can be disambiguated by their POStag by simply appending the tag to the word withan underscore (e.g.
book NOUN) and can also bereplaced by POS tags in the ngrams, see Lin etal.
(2012) for details.
The corpus is parsed witha dependency parser and head-modifier syntacticrelations between words in the same sentence areextracted.
Dependency relations are representedas ?=>?
in the corpus.
Our new enhanced searchfeatures for automatic expansions can also be ap-plied to these syntactic ngrams.
In fact, some ofthe most interesting queries use expansions to au-tomatically uncover related ngrams, while usingsyntax to focus on particular patterns.The Viewer supports the composition of ngramfrequencies via arithmetic operators.
Addition (+),subtraction (-) and division (/) of ngrams are car-ried out on a per year basis, while multiplication(*) is performed by a scalar that is applied to allcounts in the time series.
Where ambiguous, thewildcard operator takes precedence over the mul-tiplication operator.
Parentheses can be used todisambiguate and to force the interpretation of amathematical operation.2.2 ArchitectureThe Ngram Viewer provides a lightweight inter-face to the underlying ngram corpora.
In its basicform, user requests are directed through the serverto a simple lookup table containing the raw ngramsand their frequencies.
This data flow is displayedin the top part of Figure 3 and is maintained forqueries that do not involve the new expansion fea-tures introduced in this work.The expansion queries could in principle beRaw Ngrams?King James?
:{(1900, 234),(1901, 122), ?
}?Kinged James?
:{(1900, 20),(1901, 15), ?}?Inflections?King_INF?
:{King, Kinged,Kings,?
}Wildcards?King *?
:{King James,King George,?
}Capitalizations?king james?
:{king James,King James,?
}NgramViewerServerUsernew in this versionNgram Viewer System ArchitectureFigure 3: Overview of the Ngram Viewer architecture.implemented by scanning the raw ngrams onthe fly and returning the matching subset: toanswer the query ?President*?, one wouldneed to obtain all bigrams starting with the wordPresident (there are 23,693) and extract themost frequent ten.
Given the large number ofngrams (especially for larger n), such an approachturns out to be too slow for an interactive appli-cation.
We therefore pre-compute intermediate re-sults that can be used to more efficiently retrievethe results for expansion queries.
The intermedi-ate results are stored in additional lookup tables(shown at the bottom in Figure 3).
When the userexecutes an expansion search, the query is firstrouted to the appropriate lookup table which storesall possible expansions (including expansions thatmight not appear in the corpus).
These expandedngrams are then retrieved from the raw ngram ta-ble, sorted by frequency and returned to he user.We describe the intermediate results tables andhow they are generated in the next section.Note that we only support one expansion oper-ation per query ngram.
This is needed in order toavoid the combinatorial explosion that would re-sult from mixing multiple expansion operators inthe same query.3 New FeaturesThe three new search features are implemented viathe same two-step approach.
As shown in Fig-ure 3, we add three new lookup tables that storeintermediate results needed for efficiently support-1171800 1900 2000RelativeFrequencyQuery: "President *"President ofPresident ?sPresident andPresident toPresident Roosevelt1800 1900 2000RelativeFrequencyQuery: "President *_NOUN, 1800-2000"President Roosevelt_NOUNPresident Wilson_NOUNPresident Lincoln_NOUNPresident Johnson_NOUNPresident Truman_NOUN1950 1975 2000RelativeFrequencyQuery: "President *_NOUN, 1950-2000"President Roosevelt_NOUNPresident Truman_NOUNPresident Kennedy_NOUNPresident Johnson_NOUNPresident Eisenhower_NOUNFigure 4: Different wildcard queries for bigrams starting with President.
Specification of a POS tag along with the wildcardoperator results in more specific results, and the results vary depending on the selected yaer range.ing the new search types.
In all cases the lookuptables provide a set of possible expansions that arethen retrieved in the original raw ngram table.
Be-low we describe how these intermediate results aregenerated and how they are used to retrieve the fi-nal results.3.1 WildcardsWildcards provide a convenient way to automat-ically retrieve and explore related ngrams.
Be-cause of the large number of possibilities that canfill a wildcard slot, returning anything but the topfew expansions is likely to be overwhelming.
Wetherefore return only the ten most frequent expan-sions.
Determining the most frequent expansionsis unfortunately computationally very expensivebecause of the large number of ngrams; the query?the*?
for example has 2,353,960 expansions.To avoid expensive on-the-fly computations,we precompute the most frequent expansions forall possible queries.
The problem that arisesis that the ten most frequent expansions dependon the selected year range.
Consider the query?President*?
; we would like to be able getthe correct result for any year range.
Since ourdata spans more than 500 years, precomputing theresults for all year ranges is not a possibility.
In-stead, we compute the possible wildcard expan-sions for each year.
The top expansions for theentire range are then taken from the union of topexpansions for each year.
This set is at most ofsize 10n (where n is the year range) and in practicetypically a lot smaller.
Theoretically it is possiblefor this approximation to miss an expansion that isnever among the top ten for a particular year, butis cumulatively in the top ten for the entire range.This would happen if there were many spikes inthe data, which is not the case.To make the wildcard expansions more rele-vant, we filter expansions that consist entirely ofpunctuation symbols.
To further narrow downthe expansions and focus on particular patterns,we allow wildcards to be qualified via POStags.
Figure 4 shows some example wildcardqueries involving bigrams that start with the word?President.?
See also Table 1 for some addi-tional examples.
Note that it is possible to replacePOS tags with wildcards (e.g., cook*) whichwill find all POS tags that the query word can take.3.2 Morphological InflectionsWhen comparing ngram frequencies (especiallyacross languages, but also for the same language),it can be useful to examine and potentially aggre-gate the frequencies of all inflected forms.
Thiscan be accomplished by manually deriving all in-flected forms and then using arithmetic operationsto aggregate their counts.
Our new inflected formsearch accomplishes this automatically.
By ap-pending the keyword INF to a word, a set ofngrams with all inflected forms of the word willbe retrieved.
To generate the inflected forms wemake use of Wiktionary3and supplement it withautomatically generated inflection tables based onthe approach of Durrett and DeNero (2013).Because there are at most a few dozen inflectedforms for any given word, we can afford to sub-stitute and retrieve all inflections of the markedword, even the ones that are not grammatical in agiven ngram context.
This has the advantage thatwe only need to store inflected forms for individ-ual words rather than entire ngrams.
If a generatedngram has no support in the corpus, we simplyomit it from the final set of results.
We do not per-form any additional filtering; as a result, an inflec-tion search can produce many results, especiallyfor morphologically rich languages like Russian.We have therefore updated the user interface tobetter deal with many data lines (?4).3See http://www.wiktionary.org/.
BecauseWiktionary is an evolving resource, results for a particularquery may change over time.118Query Possible Replacements*?s TheoremLagrange ?s Theorem, Gauss ?s Theorem,Euler ?s Theorem, Pascal ?s TheoremWar=>*NOUNWar=>World NOUN, War=>Civil NOUN,War=>Second NOUN, War=>Cold NOUNlubov~ INF lubil, lublu, lubit, lubit~, lubila, lubimyi?, lubix~book INF book, books, booked, bookingbook INF NOUN book, bookscook*cook NOUN, cook VERBthe cook (case insensitive)THE COOK, the cook, The Cook, the Cook, The cookTable 1: Examples expansions for wildcard, inflection, and capitalization queries.3.3 CapitalizationBy aggregating different capitalizations of thesame word, one can normalize between sentence-initial and sentence-medial occurrences of a givenword.
A simple way to accomplish this is bysearching for a lowercased, capitalized and allcaps spelling of the query.
This however can missCamelCase spelling and other capitalization vari-ants (consider FitzGerald for example).
It isof course not feasible to try all case variants of ev-ery letter in the query.
Instead, we perform an of-fline precomputation step in which we collect allngrams that map to the same lowercased string.Due to scanning errors and spelling mistakes therecan be many extremely rare capitalization variantsfor a given query.
We therefore filter out all vari-ants that have a cumulative count of less than 1%of the most frequent variant for a given year range.Capitalization searches are enabled by selecting acase-insensitive check box on the new interface.4 Use CasesThe three features introduced in this paper repre-sent a major extension of the capabilities of theNgram Viewer.
While the second edition of theNgram Corpus (Lin et al., 2012) introduced syn-tactic ngrams, the functionality of the Viewer hadremained largely unchanged since its first launchfive years ago.
Together, the updated Corpus andViewer enable a much more detailed analysis ofthe underlying data.
Below we provide some usescases highlighting the ways in which sophisticatedqueries can be crafted.
While the results producesome intriguing patterns, we leave their analysis tothe experts.Since we have made no modifications to the un-derlying raw ngrams, all of the plots in this pa-per could have also been generated with the pre-vious version of the Viewer.
They would, how-ever, have required the user to manually generateand issue all query terms.
For example, Figure 1shows manually created queries searching for spe-cific presidents; contrarily, Figure 4 shows singlewildcard queries that automatically retrieve the tenmost frequently mentioned presidents and uncoveradditional trends that would have required extrawork on behalf of the user.The wildcard feature used on its own can be apowerful tool for the analysis of top expansionsfor a certain context.
Although already useful onits own, it becomes really powerful when com-bined with POS tags.
The user can attach an un-derscore and POS tag to either a wildcard-basedor inflection-based query to specify that the ex-pansions returned should be of a specific part ofspeech.
Compare the utility of the generic wild-card and a search with a noun part-of-speech spec-ification in a query examining president names,?President*?
vs. ?President*NOUN?shown in Figure 4.
The former gives a mixtureof prepositions, particles, and verbs along withnames of presidents, and because the latter spec-ifies the noun tag, the top expansions turn out tobe names and more in line with the intention ofthe search.
Also, note in Figure 4 the difference inexpansions that searching over two different timeranges provides.
In Table 2, we compare the com-bination of the wildcard feature with the existingdependency link feature to highlight a comparisonof context across several languages.It is worth noting that the newly introduced fea-tures could result in many lines in the resultingchart.
Hence, we have updated the Viewer?s userinterface to better handle charts involving manyngrams.
The new interactive functionality allowsthe user to highlight a line by hovering over it,keep that focus by left clicking, and clear all fo-cused lines by double clicking.
A right click onany of the expansions returned by an issued querycombines them into the year-wise sum total of allthe expansions.
We added another feature to the1191700 1850 2000RelativeFrequencyQuery: "light_INF""light""lights""lighted""lighter""lit""lighting""lightest"1700 1850 2000RelativeFrequencyQuery: "light_VERB_INF""light_VERB""lighted_VERB""lit_VERB""lighting_VERB""lights_VERB"Figure 5: Comparison of specification of POS tag in wildcard search.English American BritishGerman French Russian ItalianChineseSpanish Hebrew(All) English English (Simplified)drinks drinks drinks trinkt boit p~t beve ?
bebe dzywater water water Bier (beer) vin (wine) on (he) vino (wine) ?
(wine) agua (water) oii (wine)wine wine wine Kaffee (coffee) sang (blood) qai?
(tea) acqua (water) ?
(tea) vino (wine) min (water)milk coffee tea Wein (wine) eau (water) vodu (water) sangue (blood) ?
(water) sangre (blood) d (the)coffee beer blood Wasser (water) cafe (coffee) On (He) birra (beer) ??
(coffee) vaso (glass) qek (cup)beer milk beer Tee (tea) verre (glass) vino (wine) caff?e (coffee) ?
(person) cerveza (beer) dz (tea)Table 2: Comparison of the top modifiers of the verb drinks, or its equivalent in translation, in all corpora, retrieved viathe query drinks VERB=>*NOUN and equivalents in the other languages.
The modifiers can appear both in subject and inobject position because we have access only to unlabeled dependencies.interface that creates static URLs maintaining allthe raw ngrams retrieved from any query.
This pre-vents statically linked charts from changing overtime, and allowing for backwards compatibility.One of the primary benefits of the capitalizationfeature is the combination of multiple searchesin one, which allows the user to compare case-insensitive usages of two different phrases.
Analternative use is in Figure 2(c), where capitaliza-tion search allows the immediate identification ofchanging orthographic usage of a word or phrase;in this case the figure shows the arrival of F. ScottFitzgerald in the early to mid 20th century, as wellas the rise in popularity of the CamelCase varietyof his surname at the turn of the 19th century.Searches using inflections can be useful for thesame reasons as the capitalization feature, and alsobe used to compare changes in spelling; it is par-ticularly useful for the analysis of irregular verbs,where the query can return both the regular andirregular forms of a verb.5 ConclusionsWe have presented an update to the Ngram Viewerthat introduces new search features.
Users cannow perform more powerful searches that auto-matically uncover trends which were previouslydifficult or impossible to extract.
We look forwardto seeing what users of the Viewer will discover.6 AcknowledgementsWe would like to thank John DeNero, Jon Orwant,Karl Moritz Hermann for many useful discussions.ReferencesA.
Acerbi, V. Lampos, and R. A. Bentley.
2013.
Ro-bustness of emotion extraction from 20th century en-glish books.
In Proceedings of the IEEE Interna-tional Conference on Big Data.A.
R. Bentley, A. Acerbi, P. Ormerod, and V. Lampos.2014.
Books average previous decade of economicmisery.
PLOS One, 9(1).G.
Durrett and J. DeNero.
2013.
Supervised learningof complete morphological paradigms.
In Proceed-ings of NAACL-HLT.Y.
Lin, J.-B.
Michel, E. L. Aiden, J. Orwant, W. Brock-man, and S. Petrov.
2012.
Syntactic annotations forthe Google Books Ngram Corpus.
In Proceedingsof the ACL.J.-B.
Michel, Y. K. Shen, A. P. Aiden, A. Veres,M.
K. Gray, The Google Books Team, J. P. Pick-ett, D. Hoiberg, D. Clancy, P. Norvig, J. Orwant,S.
Pinker, M. A. Nowak, and E. Lieberman Aiden.2011.
Quantitative analysis of culture using millionsof digitized books.
Science.S.
Petrov, D. Das, and R. McDonald.
2012.
A univer-sal part-of-speech tagset.
In Proc.
of LREC.J.
Schulz and L. Robinson.
2013.
Shifting grounds andevolving battlegrounds.
American Journal of Cul-tural Sociology, 1(3):373?402.S.
Skiena and C. Ward.
2013. Who?s Bigger?
: WhereHistorical Figures Really Rank.
Cambridge Univer-sity Press.120
