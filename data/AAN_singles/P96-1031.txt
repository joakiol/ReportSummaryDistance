An Efficient Compiler for Weighted Rewrite RulesMehryar  Mohr iAT&T Research600 Mounta in  AvenueMurray Hill, 07974 NJmohr i@research ,  att.
comRichard  SproatBell Laboratories700 Mounta in  AvenueMurray Hill, 07974 NJrws@bel l - labs ,  comAbst rac tContext-dependent rewrite rules are usedin many areas of natural anguage andspeech processing.
Work in computa-tional phonology has demonstrated that,given certain conditions, such rewriterules can be represented as finite-statetransducers (FSTs).
We describe a newalgorithm for compiling rewrite rules intoFSTs.
We show the algorithm to be sim-pler and more efficient than existing al-gorithms.
Further, many of our appli-cations demand the ability to compileweighted rules into weighted FSTs, trans-ducers generalized by providing transi-tions with weights.
We have extendedthe algorithm to allow for this.1.
Mot ivat ionRewrite rules are used in many areas of naturallanguage and speech processing, including syntax,morphology, and phonology 1.
In interesting ap-plications, the number of rules can be very large.It is then crucial to give a representation f theserules that leads to efficient programs.Finite-state transducers provide just such acompact representation (Mohri, 1994).
They areused in various areas of natural language andspeech processing because their increased compu-tational power enables one to build very large ma-chines to model interestingly complex linguisticphenomena.
They also allow algebraic operationssuch as union, composition, and projection whichare very useful in practice (Berstel, 1979; Eilen-berg, 1974 1976).
And, as originally shown byJohnson (1972), rewrite rules can be modeled as1 Parallel rewrite rules also have interesting applica-tions in biology.
In addition to their formal anguagetheory interest, systems uch as those of Aristid Lin-denmayer provide rich mathematical models for bio-logical development (Rozenberg and Sa\]omaa, 1980).231finite-state transducers, under the condition thatno rule be allowed to apply any more than a finitenumber of times to its own output.Kaplan and Kay (1994), or equivalently Kart-tunen (1995), provide an algorithm for compilingrewrite rules into finite-state transducers, underthe condition that they do not rewrite their non-contextual part 2.
We here present anew algorithmfor compiling such rewrite rules which is both sim-pler to understand and implement, and computa-tionally more efficient.
Clarity is important since,as pointed out by Kaplan and Kay (1994), the rep-resentation of rewrite rules by finite-state trans-ducers involves many subtleties.
Time and spaceefficiency of the compilation are also crucial.
Us-ing naive algorithms can be very time consumingand lead to very large machines (Liberman, 1994).In some applications uch as those relatedto speech processing, one needs to use weightedrewrite rules, namely rewrite rules to whichweights are associated.
These weights are thenused at the final stage of applications tooutput hemost probable analysis.
Weighted rewrite rulescan be compiled into weighted finite-state trans-ducers, namely transducers generalized by pro-viding transitions with a weighted output, underthe same context condition.
These transducersare very useful in speech processing (Pereira etal., 1994).
We briefly describe how we have aug-mented our algorithm to handle the compilationof weighted rules into weighted finite-state trans-ducers.In order to set the stage for our own contribu-tion, we start by reviewing salient aspects of theKaplan and Kay algorithm.2The genera\] question of the decidability of thehalting problem even for one-rule semi-Thue systemsis still open.
Robert McNaughton (1994) has recentlymade a positive conjecture about he class of the ruleswithout self overlap.Prologue oI d( Obligatory( ?
, <i , >))Id(Rightcontezt(p, < >))ReplaceId(Leftcontezt(A, < >))Prologue - i= Id(Z~< 0 <i ?
?< > B~,< 0) o= Id((  0 > p>0Z 0- > > p>0  0- > o= \[Id(~*<,>, o)Opt(Id(<a)?
?<c>c ?
?
?c>cId(>a))\]* o-" Id( (~0A<0 - ~0 < < Z~0 f\] ~0A<0 - ~0 < < ~0)>)  oFigure 1: Compilation of obligatory left-to-right rules, using the KK algorithm.(1)2.
The KK AlgorithmThe rewrite rules we consider here have the fol-lowing general form:?
--, p (2)Such rules can be interpreted in the following way:?
is to be replaced by ?
whenever it is precededby A and followed by p. Thus, A and p representthe left and right contexts of application of therules.
In general, ?, ?, A and p are all regularexpressions over the alphabet of the rules.
Severaltypes of rules can be considered epending on theirbeing obligatory or optional, and on their directionof application, from left to right, right to left orsimultaneous application.Consider an obligatory rewrite rule of the form?
--+ ?/A p, which we will assume applies left toright across the input string.
Compilation of thisrule in the algorithm of Kaplan and Kay (1994)(KK for short) involves composing together sixtransducers, ee Figure 1.We use the notations of KK.
In particular,denotes the alphabet, < denotes the set of contextlabeled brackets {<a, <i, <c}, > the set {>a, >i,>c}, and 0 an additional character epresentingdeleted material.
Subscript symbols of an expres-sion are symbols which are allowed to freely ap-pear anywhere in the strings represented by thatexpression.
Given a regular expression r, Id(r) isthe identity transducer obtained from an automa-ton A representing r by adding output labels to Aidentical to its input labels.The first transducer, Prologue, freely intro-duces labeled brackets from the set {<a, <i,<~, >a, >i, >~} which are used by left andright context transducers.
The last transducer,Prologue - i ,  erases all such brackets.In such a short space, we can of course nothope to do justice to the KK algorithm, and thereader who is not familiar with it is urged to con-sult their paper.
However, one point that we doneed to stress is the following: while the con-struction of Prologue, Prologue - i  and Replace232is fairly direct, construction of the other transduc-ers is more complex, with each being derived viathe application of several evels of regular oper-ations from the original expressions in the rules.This clearly appears from the explicit expressionswe have indicated for the transducers.
The con-struction of the three other transducers involvesmany operations including: two intersections ofautomata, two distinct subtractions, and ninecomplementations.
Each subtraction involves anintersection and a complementation algorithm 3.So, in the whole, four intersections and elevencomplementations need to be performed.Intersection and complementation are classi-cal automata lgorithms (Aho et al, 1974; Ahoet al, 1986).
The complexity of intersection isquadratic.
But the classical complementation al-gorithm requires the input automaton to be de-terministic.
Thus, each of these 11 operations re-quires first the determinization f the input.
Suchoperations can be very costly in the case of theautomata involved in the KK algorithm 4.In the following section we briefly describe anew algorithm for compiling rewrite rules.
For rea-sons of space, we concentrate here on the com-pilation of left-to-right obligatory rewrite rules.However, our methods extend straightforwardly toother modes of application (optional, right-to-left,simultaneous, batch), or kinds of rules (two-levelrules) discussed by Kaplan and Kay (1994).3A subtraction can of course also be performed i-rectly by combining the two steps of intersection andcomplementation, but the corresponding algorithmhas exactly the same cost as the total cost of the twooperations performed consecutively.4 One could hope to find a more efficient way of de-termining the complement ofan automaton that wouldnot require determinization.
However, this problemis PSPACE-complete.
Indeed, the regular expressionnon-universality problem is a subproblem of comple-mentation known to be PSPACE-complete (Garey andJohnson, 1979, page 174), (Stockmeyer and Meyer,1973).
This problem also known as the emptinessof complement problem has been extensively studied(Aho et al, 1974, page 410-419).3.
New A lgor i thm3.1.
Overv iewIn contrast o the KK algorithm which introduces"brackets everywhere only to restrict their occur-rence subsequently, our algorithm introduces con-text symbols just when and where they are needed.Furthermore, the number of intermediate trans-ducers necessary in the construction of the rulesis smaller than in the KK algorithm, and each ofthe transducers can be constructed more directlyand efficiently from the primitive expressions ofthe rule, ~, ~, A, p.A transducer corresponding to the left-to-right obligatory rule ?
--* ?/A p can be ob-tained by composition of five transducers:r o f o replace o 11 o 12 (3)1.
The transducer introduces in a string amarker > before every instance of p. For rea-sons that will become clear we will notate thisas Z* p --~ E* > p.2.
The transducer f introduces markers <1 and<2 before each instance of ~ that is followedby >: u u {>})'{<1, <2}5 >.
In other words, this transducer/harksjust those ~b that occur before p.3.
The replacement transducer replace replaces~b with ~ in the context <1 ~b >, simultane-ously deleting > in all positions (Figure 2).Since >, <1, and <2 need to be ignored whendetermining an occurrence of ~b, there areloops over the transitions >: c, <1: ?, <~: cat all states of ?, or equivalently of the statesof the cross product transducer ?
?
~.4.
The transducer 11 admits only those stringsin which occurrences of <1 are precededby A and deletes <l  at such occurrences:5.
The transducer 12 admits only those stringsin which occurrences of <2 are not precededby A and deletes <~ at such occurrences:2*X <2-~ ~*~.Clearly the composition of these transducers leadsto the desired result.
The construction of thetransducer replace is straightforward.
In the fol-lowing, we show that the construction of the otherfour transducers i  also very simple, and that itonly requires the determinization of 3 automataand additional work linear (time and space) in thesize of the determinized automata.3.2.
MarkersMarkers  o f  TYPE 1Let us start by considering the problem of con-structing what we shall call a TYPE I transducer,233Figure 2: Replacement transducer eplace in theobligatory left-to-right case.which inserts a marker after all prefixes of a stringthat match a particular egular expression.
Givena regular expression fl defined on the alphabet E,one can construct, using classical algorithms (Ahoet al, 1986), a deterministic automaton a repre-senting E*fl.
As with the KK algorithm, one canobtain from a a transducer X = Id (a)  simply byassigning to each transition the same output labelas the input label.
We can easily transform X intoa new transducer  such that it inserts an arbi-trary marker ~ after each occurrence of a patterndescribed by ~.
To do so, we make final the non-final states of X and for any final state q of X wecreate a new state q~, a copy of q.
Thus, q' hasthe same transitions as q, and qP is a final state.We then make q non-final, remove the transitionsleaving q and add a transition from q to q' withinput label the empty word c, and output ~.
Fig-ures 3 and 4 illustrate the transformation f X intoT .a:a cicFigure 3: Final state q of X with entering andleaving transitions.ata ctcFigure 4: States and transitions of r obtained bymodifications of those of X.Propos i t ion  1 Let ~ be a deterministic automa-ton representing E*/3, then the transducer  ob-tained as described above is a transducer post-marking occurrences of fl in a string ofF* by #.Proof.
The proof is based on the observa-tion that a deterministic automaton representingE*/~ is necessarily complete 5.
Notice that non-deterministic automata representing ~*j3 are notnecessarily complete.
Let q be a state of a and letu E ~* be a string reaching q6.
Let v be a stringdescribed by the regular expression ft. Then, forany a E ~, uav is in ~*~.
Hence, uav is acceptedby the automaton a, and, since ~ is deterministic,there exists a transition labeled with a leaving q.Thus, one can read any string u E E* using theautomaton a.
Since by definition of a, the statereached when reading a prefix u ~ of u is final iffu ~ E ~*~, by construction, the transducer  in-serts the symbol # after the prefix u ~ iff u ~ endswith a pattern of ft.
This ends the proof of theproposition, t3Markers  o f  TYPE 2In some cases, one wishes to check that anyoccurrence of # in a string s is preceded (or fol-lowed) by an occurrence of a pattern of 8.
Weshall say that the corresponding transducers areof TYPE 2.
They play the role of a filter.
Hereagain, they can be defined from a deterministic au-tomaton representing E*B.
Figure 5 illustrates themodifications to make from the automaton of fig-ure 3.
The symbols # should only appear at finalstates and must be erased.
The loop # : e addedat final states of Id(c~) is enough for that purpose.All states of the transducer are then made finalsince any string conforming to this restriction isacceptable: cf.
the transducer !1 for A above.#:EFigure 5: Filter transducer, TYPE 2.5An automaton A is complete iff at any state q andfor any element aof the alphabet ~ there exists at leastone transition leaving q labeled with a.
In the case ofdeterministic automata, the transition is unique.6We assume all states of a accessible.
This is trueif a is obtained by determinization.234Markers  of  TYPE 3In other cases, one wishes to check the reverseconstraint, that is that occurrences of # in thestring s are not preceded (or followed) by any oc-currence of a pattern of ft.
The transformationthen simply consists of adding a loop at each non-final state of Id(a), and of making all states final.Thus, a state such as that of figure 6 is trans-a:a  c:cFigure 6: Non-final state q of a.formed into that of figure 5.
We shall say that thecorresponding transducer is of TYPE 3: cf.
thetransducer 12 for ~.The construction of these transducers (TYPE1-3) can be generalized in various ways.
In par-ticular:?
One can add several alternative markers{#1, ' " ,  #k} after each occurrence of a pat-tern of 8 in a string.
The result is then anautomaton with transitions labeled with, forinstance, ~1, ' "  ", ~k after each pattern of fl:cf.
transducer f for ?
above.?
Instead of inserting a symbol, one can deletea symbol which would be necessarily presentafter each occurrence of a pattern of 8.For any regular expression a, de-fine M arker( a, type, deletions, insertions) as thetransducer of type type constructed as previouslydescribed from a deterministic automaton repre-senting a, insertions and deletions being, respec-tively, the set of insertions and deletions the trans-ducer makes.P ropos i t ion  2 For any regular expressiona, Marker(a, type, deletions, insertions) can beconstructed from a deterministic automaton rep-resenting a in linear time and space with respectto the size of this automaton.Proof.
We proved in the previous proposition thatthe modifications do indeed lead to the desiredtransducer for TYPE 1.
The proof for other casesis similar.
That the construction is linear in spaceis clear since at most one additional transition andstate is created for final or non-final states 7.
Theoverall t ime complexity of the construction is lin-ear, since the construction of ld(a) is linear in the~For TYPE 2 and TYPE 3, no  state is added but onlya transition per final or non-final state.r = \[reverse(Marker(E*reverse(p), 1, {>},0))\]f = \[reverse(Marker((~ U {>})*reverse(C> ), 1, {<1, <u},0))\]11 = \[Marker(N*)L 2,0, {<1})\]<~:<212 = \[Marker($*A,3,@, {<2})\]Figure 7: Expressions of the r, f ,  ll, and 12 using Marker.
(4)(5)(6)(7)number of transitions of a and that other modifi-cations consisting of adding new states and transi-tions and making states final or not are also linear.DWe just showed that Marker(a,type, de-letions, insertions) can be constructed in a veryefficient way.
Figure 7 gives the expressions of thefour transducers r, f ,  ll, and 12 using Marker.Thus, these transducers can be constructedvery efficiently from deterministic automata repre-senting s ~*reverse(p), (~ O {>})* reverse(t> >),and E*,~.
The construction of r and f requirestwo reverse operations.
This is because these twotransducers insert material before p or ?.4.
Extension to Weighted RulesIn many applications, in particular in areas re-lated to speech, one wishes not only to give allpossible analyses of some input, but also to givesome measure of how likely each of the analyses is.One can then generalize replacements by consid-ering extended regular expressions, namely, usingthe terminology of formal language theory, ratio-nal power series (Berstel and Reutenauer, 1988;Salomaa nd Soittola, 1978).The rational power series we consider here arefunctions mapping ~* to ~+ U {oo) which can bedescribed by regular expressions over the alphabet(T~+ U {co}) x ~.
S = (4a)(2b)*(3b) is an exampleof rational power series.
It defines a function inthe following way: it associates a non-null num-ber only with the strings recognized by the regu-lar expression ab*b.
This number is obtained byadding the coefficients involved in the recognitionof the string.
The value associated with abbb, forinstance, is (S, abbb) = 4 + 2 + 2 + 3 = 11.In general, such extended regular expressionscan be redundant.
Some strings can be matchedSAs in the KK algorithm we denote by ?> the setof the strings described by ?
containing possibly oc-currences of > at any position.
In the same way, sub-scripts such as >:> for a transducer r indicate thatloops by >:> are added at all states of r. We de-note by reverse(a) the regular expression describingexactly the reverse strings of a if a is a regular expres-sion, or the reverse transducer of a if a is a transducer.235in different ways with distinct coefficients.
Thevalue associated with those strings is then the min-imum of all possible results.
S' = (2a)(3b)(4b) +(5a)(3b*) matches abb with the different weights2+3+4 -- 9 and 5+3+3 = 11.
The mini-mum of the two is the value associated with abb:(S', abb) = 9.
Non-negative numbers in the defi-nition of these power series are often interpretedas the negative logarithm of probabilities.
Thisexplains our choice of the operations: addition ofthe weights along the string recognition and min,since we are only interested in that result whichhas the highest probability 9.Rewrite rules can be generalized by letting ?be a rational power series.
The result of the ap-plication of a generalized rule to a string is thena set of weighted strings which can be representedby a weighted automaton.
Consider for instancethe following rule, which states that an abstractnasal, denoted N, is rewritten as m in the contextof a following labial:Y ---* m/__\ [+labia l \ ]  (8)zNow suppose that this is only probabilisticallytrue, and that while ninety percent of the timeN does indeed become m in this environment,about ten percent of the time in real speech it be-comes n. Converting from probabilities to weights,one would say that N becomes m with weighta = - log(0.9),  and n with weight fl = - log(0.1),in the stated environment.
One could representthis by the following rule:N --* am + f in/__\[+labial \]  (9)We define Weighted finite-state transducers astransducers such that in addition to input and out-put labels, each transition is labeled with a weight.The result of the application of a weightedtransducer to a string, or more generally to anautomaton is a weighted automaton.
The corre-sponding operation is similar to the unweightedcase.
However, the weight of the transducerand those of the string or automaton eed tobe combined too, here added, during composition(Pereira et al, 1994).9Using the terminology of the theory of languages,the functions we consider here are power series de-fined on the tropical semiring (7~+U{oo}, min, +, (x), 0)(Kuich and Salomaa, 1986).\"_/Toop:p/ON:N/O~N:m/aN:n/l~:0~ N:N/OFigure 8: Transducer representing the rule 9.We have generalized the composition opera-tion to the weighted case by introducing this com-bination of weights.
The algorithm we describedin the previous ections can then also be used tocompile weighted rewrite rules.As an example, the obligatory rule 9 can berepresented by the weighted transducer of Fig-ure 8 10.
The following theorem extends to theweighted case the assertion proved by Kaplan andKay (1994).Theorem 1 A weighted rewrite rule of the typedefined above that does not rewrite its non-contextual part can be represented by a weightedfinite-state transducer.Proof.
The construction we described in the pre-vious section also provides a constructive proofof this theorem in the unweighted case.
In case?
is a power series, one simply needs to use inthat construction a weighted finite-state trans-ducer epresenting ?.
By definition of compositionof weighted transducers, ormultiplication ofpowerseries, the weights are then used in a way consis-tent with the definition of the weighted context-dependent rules, o5.
Exper imentsIn order to compare the performance of the M-gorithm presented here with KK, we timed bothalgorithms on the compilation of individual rulestaken from the following set (k ?
\[0, 10\]):a --* b~ c ~ (10)a --* b~ c k (11)1?We here use the symbol ~ to denote all lettersdifferent from b, rn, n, p, and N.236In other words we tested twenty two rules wherethe left context or the right context is varied inlength from zero to ten occurrences of c. For ourexperiments, we used the alphabet of a realisticapplication, the text analyzer for the Bell Labora-tories German text-to-speech system consisting of194 labels.
All tests were run on a Silicon Graph-ics IRIS Indigo 4000, 100 MhZ IP20 Processor,128 Mbytes RAM, running IRIX 5.2.
Figure 9shows the relative performance of the two algo-rithms for the left context: apparently the per-formance of both algorithms i  roughly linear inthe length of the left context, but KK has a worseconstant, due to the larger number of operationsinvolved.
Figure 10 shows the equivalent data forthe right context.
At first glance the data lookssimilar to that for the left context, until one no-tices that in Figure 10 we have plotted the time ona log scale: the KK algorithm ishyperexponential.What is the reason for this performance d gra-dation in the right context?
The culprits turnout to be the two intersectands in the expressionof Rightcontext(p, <, >) in Figure 1.
Considerfor example the righthand intersectand, namely~0 > P>0~0-  > ~0,  which is the complementof ~0 > P>0~0-  > ~0-  As previously in-dicated, the complementation Mgorithm.
requiresdeterminization, and the determinization f au-tomata representing expressions of the form ~*a,where c~ is a regular expression, is often very ex-pensive, specially when the expression a is alreadycomplex, as in this case.Figure 11 plots the behavior of determiniza-tion on the expression Z~0 > P>0Z~0- > ~0for each of the rules in the set a ~ b /__c  k,(k e \[0, 10\]).
On the horizontal axis is the num-ber of arcs of the non-deterministic input machine,and on the vertical axis the log of the number ofarcs of the deterministic machine, i.e.
the ma-chine result of the determinization algorithm with-out using any minimization.
The perfect linearityindicates an exponential time and space behav-ior, and this in turn explains the observed iffer-ence in performance.
In contrast, the constructionof the right context machine in our algorithm in-volves only the single determinization f the au-tomaton representing ~*p, and thus is much lessexpensive.
The comparison just discussed involvesa rather artificiM ruleset, but the differences inperformance that we have highlighted show up inreal applications.
Consider two sets of pronun-ciation rules from the Bell Laboratories Germantext-to-speech system: the size of the alphabet forthis ruleset is 194, as noted above.
The first rule-set, consisting of pronunciation rules for the ortho-graphic vowel <5> contains twelve rules, and thesecond ruleset, which deals with the orthographicq,o11/" -----nl /.../'/"/m/ '=i1~11 j0 0 0 ` ~'-" 0 / 0 ~ 00__0/0 0 0I I I I2 4 6 $L=tr~lm 011.~t ComxtFigure 9: Compilation times for rules of the forma ~ b /ck  , (k E \[0, 10\]).9"oo.//I: / N,*  a~,~t.vn I/o/" /./i i /11~0~0~0 ". '
'"  0i J i i i2 4 6 e 10Figure 10: Compilation times for rules of the forma ~ b /  c k, (k E \[0, 10\]).vowel <a> contains twenty five rules.
In the ac-tual application of the rule compiler to these rules,one compiles the individual rules in each rulesetone by one, and composes them together in theorder written, compacts them after each composi-tion, and derives a single transducer for each set.When done off-line, these operations of compo-Table 1: Comparison in a real example.I Rulesll KK II New Itime space time space(s) states arcs (s) states arcs<5> 62 412 50,475 47 394 47,491<a> 284 1,939 215,721 240 1,927 213,408sition and compaction dominate the time corre-sponding to the construction of the transducer foreach individual rule.
The difference between thetwo algorithms appears till clearly for these twosets of rules.
Table 1 shows for each algorithmthe times in seconds for the overall construction,and the number of states and arcs of the outputtransducers.6.
Conc lus ionWe briefly described anew algorithm for compilingcontext-dependent rewrite rules into finite-statetransducers.
Several additional methods can beused to make this algorithm even more efficient.The automata determinizations eeded forthis algorithm are of a specific type.
They repre-237sent expressions of the type ~*?
where ?
is a reg-ular expression.
Given a deterministic automatonrepresenting ?, such determinizations can be per-formed in a more efficient way using failure func-tions (Mohri, 1995).
Moreover, the correspondingdeterminization is independent of ~ which can bevery large in some applications.
It only dependson the alphabet of the automaton representing ?.One can devise an on-the-fly implementationof the composition algorithm leading to the finaltransducer representing a rule.
Only the neces-sary part of the intermediate transducers i thenexpanded for a given input (Pereira et al, 1994).The resulting transducer representing a ruleis often subsequentiable or p-subsequentiable.
Itcan then be determinized and minimized (Mohri,1994).
This both makes the use of the transducertime efficient and reduces its size.We also indicated an extension of the theoryof rule-compilation to the case of weighted rules,which compile into weighted finite-state transduc-ers.
Many algorithms used in the finite-state the-ory and in their applications to natural anguageprocessing can be extended in the same way.To date the main serious application of thiscompiler has been to developing text-analyzersfor text-to-speech systems at Bell Laboratories(Sproat, 1996): partial to more-or-less completeanalyzers have been built for Spanish, Italian,French, Romanian, German, Russian, Mandarinand Japanese.
However, we hope to also be able touse the compiler in serious applications in speech2 -co!O / /?/?/ /?////I I tSOO 1;10 1120II S~S in I:bsr SFigure 11: Number of arcs in the non-deterministic automaton r representing PS =$ $ E~0 > P>0E>0- > E>0 versus the log of the num-ber of arcs in the automaton obtained by deter-minization of r.recognition in the future.AcknowledgementsWe wish to thank several colleagues of AT&T/_BellLabs, in particular Fernando Pereira and MichaelRiley for stimulating discussions about this workand Bernd MSbius for providing the German pro-nunciation rules cited herein.Re ferencesAlfred V. Aho, John E. Hopcroft, and Jeffrey D.Ullman.
1974.
The design and analysis ofcomputer algorithms.
Addison Wesley: Read-ing, MA.Alfred V. Aho, Ravi Sethi, and Jeffrey D. Ullman.1986.
Compilers, Principles, Techniques andTools.
Addison Wesley: Reading, MA.Jean Berstel and Christophe Reutenauer.1988.
Rational Series and Their Languages.Springer-Verlag: Berlin-New York.Jean Berstel.
1979.
Transductions and Context-Free Languages.
Teubner Studienbucher:Stuttgart.Samuel Eilenberg.
1974-1976.
Automata, Lan-guages and Machines, volume A-B.
AcademicPress.238Michael R. Garey and David S. Johnson.
1979.Computers and Intractability.
Freeman andCompany, New York.C.
Douglas Johnson.
1972.
Formal Aspects ofPhonological Description.
Mouton, Mouton,The Hague.Ronald M. Kaplan and Martin Kay.
1994.
Regu-lar models of phonological rule systems.
Com-putational Linguistics, 20(3).Lauri Karttunen.
1995.
The replace operator.
In33 rd Meeting of the Association for Compu-tational Linguistics (ACL 95), Proceedings ofthe Conference, MIT, Cambridge, Massachus-setts.
ACL.Wener Kuich and Arto Salomaa.
1986.
Semir-ings, Automata, Languages.
Springer-Verlag:Berlin-New York.Mark Liberman.
1994.
Commentary on kaplanand kay.
Computational Linguistics, 20(3).Robert McNaughton.
1994.
The uniform halt-ing problem for one-rule semi-thue systems.Technical Report 94-18, Department of Com-puter Science, Rensselaer Polytechnic Insti-tute, Troy, New York.Mehryar Mohri.
1994.
Compact representationsby finite-state transducers.
In 32 nd Meeting ofthe Association for Computational Linguistics(ACL 94), Proceedings of the Conference, LasCruces, New Mexico.
ACL.Mehryar Mohri.
1995.
Matching patterns of anautomaton.
Lecture Notes in Computer Sci-ence, 937.Fernando C. N. Pereira, Michael Riley, andRichard Sproat.
1994.
Weighted rationaltransductions and their application to humanlanguage processing.
In ARPA Workshop onHuman Language Technology.
Advanced Re-search Projects Agency.Grzegorz Rozenberg and Arto Salomaa.
1980.The Mathematical Theory of L Systems.
Aca-demic Press, New York.Arto Salomaa and Matti Soittola.
1978.Automata- Theoretic Aspects of Formal PowerSeries.
Springer-Verlag: Berlin-New York.Richard Sproat.
1996.
Multilingual text analy-sis for text-to-speech synthesis.
In Proceed-ings of the ECAI-96 Workshop on ExtendedFinite State Models of Language, Budapest,Hungary.
European Conference on ArtificialIntelligence.L.
J. Stockmeyer and A. R. Meyer.
1973.
Wordproblems requiring exponential time.
In Pro-ceedings of the 5 th Annual ACM Sympo-sium on Theory of Computing.
Association forComputing Machinery, New York, 1-9.
