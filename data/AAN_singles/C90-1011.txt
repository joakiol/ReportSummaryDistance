CONCEPT ANALYSIS AND TERMINOLOGY:A KNOWLEDGE-BASED APPROACH TO DOCUMENTATIONDouglas SkuceDept of Computer ScienceUniversity of Ottawa, Canadadoug@uotcsi2.bitnetIngrid MeyerSchool of Translators and InterpretersUniversity of Ottawa, Canadaixmal@uottawa.bitnetABSTRACT The central concern of terminology, acomponent of the general documentation process, isconcept analysis, an activity which is becomingrecognized as fundamental asterm banks evolve intoknowledge bases.
We propose that concept analysiscan be facilitated by knowledge engineeringtechnology, and describe a generic knowledgeacquisition tool called CODE (Conceptually OrientedDesign Environment) that has been successfully usedin two terminology applications: 1) a bilingualvocabulary project with the Terminology Directorateof the Secretary of State of Canada, and 2) a softwaredocumentation project with Bell Northern Research.We conclude with some implications of computer-assisted concept analysis for terminology.1.
TERMINOLOGY AND CONCEPTANALYSISTerminology, the discipline concerned with theformation, description and naming of concepts inspecialized fields of knowledge, is a key componentof the general documentation process: it is normallypreceded by knowledge acquisition (usually notformalized), and followed by document preparation.While it is still very common for one person to beresponsible for all stages of the documentationprocess, terminological ctivities are increasinglybecoming a distinct specialization, due to 1) theexponential growth of technical concepts, andconsequent interest in terminology banks, electronicdictionaries, and various other computer aids forterminology; 2) the growing need for efficient transferof highly specialized knowledge across national andlinguistic boundaries, and associated emand forregulating the terminology of specialized omains; 3)the increasing recognition by corporations that high-quality documentation, which presupposes high-quality terminology, is an important factor in thesuccess of a product.Concept analysis involves 1) the description ofconcepU; through an enumeration of theircharacteristics, or properties, and 2) the description ofrelations that hold within systems of concepts.
It isgenerally agreed, and particularly stressed by theVienna School of Terminology (Waster 1985), thatconcept analysis is the central concern ofterminology, essential to delimiting and partitioningnomenclatures, constructing definitions, distinguish-ing quasi-synonyms, dealing with neology, carryingout multilingual terminological analysis, andcommunicating with subject-field experts.
Despiteits importance, however, concept analysis is stilldone in an ad hoc fashion: to date, no developedmethodology exists.
Only rarely does one findgraphical or structured textual presentations ofconcept systems in terminological publications:rather, one normally detects only traces of conceptualstructures in the definitions of certain terms,"somewhat like a puzzle that no one can put togetherbecause there are pieces missing, and there :is nopicture of the whole that can serve as a guide"(translated from Kukulska-Hulme and Knowles1989:382).Apart from the lack of established methodology,a number of factors contribute to the difficulty offormalized concept analysis: 1) the terminologist ioften not an expert in his subject fields, and thusfaces all the knowledge licitation and representationproblems that characterize the knowledge engineeringprocess (Skuce et al1989); 2) since any partitioningof reality i3 arbitrary to some degree, conceptrelations often occur in complex "layerings" (Sowa1984:349); 3) consistency and conceptual clarity aredifficult to maintain in fields that are large,multidisciplinary, or rapidly evolving (Meyer andSkuce 1990).We belive that these problems c,'mnot be solvedadequately using "paper-and-pencil" or "do-it-all-in-my-head" methods.
The need for computer assistanceis becoming all the more crucial as term banks evolveinto multifunctional knowledge bases (Budin et al),with various applications becoming dependent onthem for example, management information,training, expert systems and machine translation.With the increasing focus on the knowledgecomponent of terminological research comes a needfor sophisticated documentation workstations thatinclude a knowledge support tool.2.
CODE: A KNOWLEDGE SUPPORTENVIRONMENTCODE (for Conceptually Oriented DesignEnvironment, Skuce et al1989, Skuce 1989a, 1990)is a generic knowledge acquisition enviromnent,written in Smalltalk, that runs on a UNIX,Macintosh or 386 machine.
The system has beendeveloped at the Artificial Intelligence Laboratory ofthe University of Ottawa, Canada, and a protototypehas been tested in 2 terminology applications(described below).
CODE's associated methodology56 1(Skuce 1989b) integrates knowledge representationideas from artificial intelligence, and includes alogical and a natural language analysis component.
Itwas also influenced by experience with major expertsystem tools like KEE and ART.
CODE may bethought of as a "spreadsheet for ideas", the intendeduser being any person faced with the task ofsystematically organizing expert knowledge.
Thisknowledge, whether obtained verbally or textually, israrely \]presented asprecisely as terminologists wouldlike: conceptual nd terminological confusion are therule rather than the exception.
CODE employs aflexible knowledge representation which permitsconsiderable variety in style and degree of formality.It includes mechanisms for catching many conceptualand terminological errors and guidance towardscorrecting them.CODE is organized around the two fundamentalnotions of concept and property.
Concepts can be oftwo types: class concepts and instance concepls.
Forexample, 'university' is a class concept with instancessuch as 'University of Ottawa'.
A property is a unitof information that characterizes a concept,corresponding roughly to a succinct declarativesentence.
CODE organizes knowledge into unitscalled conceptual descriptors (CDs), which areanalogous to frames in artificial intelligence orobject.,; in object-oriented programming.
CDs can beat'ranged in inheritance hierarchies, so that morespecific concepts may inherit properties from moregeneral ones.
InheriUmce is controllcxl by a system of"flags", which define the inheritance behaviour as afunction of the kind of property and the kind ofinheritance link.CODE offers the following useful features forterminology:1.
Detection of inconsistencies.
A well-developed system for controlling inheritance ofproperties helps the terminologist maintainconceptual c arity and consistency.
For example, thelogical behaviour of properties can be flagged as"necessary", "sufficient", optional" or "typical"; themodifiability of properties (in subconcepts) can beflagged as "not permissible", 'Tree", or "if logicallyconsistent"; etc.
When a change is made to aproperty at a high conceptual level, one is queried asto whether the change also applies to subconcepts.Similarly, when a concept is moved from one branchof the network to another, one is queried about theproperties that will be affected.
These and othermechanisms for checking inconsistencies allow theterminologist todo "what-if" experiments and obtainquick feedback about he desirability of changes2.
F lex ib le  means  of specifyingrelations and properties.
CODE is not tied toany particular theory of concepts: the user canspecify any properties and relations he wishes.
Aswell as hierarchical relations (e.g.
generic-specific,part--whole), the terminologist may also specify anynumber of user-defined associative relations (in thegeneral sense of non-hierarchical).3.
Graphical  and textual representa-tion.
The knowledge base can be visualized eitherby a graphical display, in the form of a directed graph,or by textual units, called CD Views.
Any changesmade on the graph are updated automatically in thecorresponding CD Views, and vice versa.
Thegraphical display is highly developed, offeringfeatures for managing large graphs, viewing multiplegraphs (essential for multilingual terminology),indicating concepts and relations of special interest,and displaying hierarchical nd associative r lations.4.
Representation of multiple partit-ioning of reality.
A subject field can often bepartitioned in several ways, depending on whichproperties of concepts are emphasized.
Sinceterminologists frequently need to take such multiplepartitions into account, CODE offers two features ofinterest: 1) multiple inheritance is permitted, andcertain properties can be blocked if necessary; 2)concepts can be assigned various keys, so that onecan focus on only certain concepts within theknowledge base, or work with all conceptualpartitions imultaneously.5.
Hypertext- l ike browsing capability.CODE's browsing facility, the Property Browser,allows the terminologist to "navigate" easily betweenconcepts, between properties, and between conceptsand properties.
A multiple windowing capabilityallows simultaneous viewing of any number ofgraphs, CD views, and Property Browsers.3.
APPLICATIONS OF CODEA.
Bilingual terminology.
During the fallof 1989, CODE was tested by Meyer in theTerminology Directorate of the Department of theSecretary of State of Canada.
The TerminologyDirectorate practises terminology as a discipline in itsown right.
Its efforts are largely geared towardstranslation eeds.
Knowledge acquisition is a vitalpart of the terminology work at the Secretary ofState: most of it is done from documcnts, althoughsubject-field experts are frequently consulted as well.The amount of knowledge acquisition depends on thetype of project: it is most important tot thematicresearch of the vocabulary type, i.e.
research aimingat a complete coverage of a specialized field, leadingto a published work that includes definitions, and notsimply bilingual ists of equivalents.CODE was used in a vocabulary project fortypesetting.
The system served two purposes: 1) toformally represent knowledge that had already beenacquired in the field, and that was reflected to somedegree in a previous vocabulary - it was found that theformal representation lead to improvements on theprevious definitions; 2) to systematize knowledge onemerging concepts in the field, particularly regardingthe role of computerization.B.
Software documentation.
Documentat-ion is an essential aspect of the software productionprocess, but unlortunately it is often not treated withsufficient care.
Part of the problem is that carefulconceptual analysis and terminological control areoften not part of the design and development phases2 57that precede documentation.
Indeed, one of the goalsin designing CODE was to help software ngineersorganize knowledge for themselves and fordocumentation.
Ideally, knowledge (and henceterminology) should be systematized, edited, verified,maintained, and then distributed to those who need itthroughout the whole software cycle.
Typically,however, this is left to the documentalists, who, likethe terminologists described above, must try to piecetogether a consistent description of the system afterthe fact.An experiment in this application of CODE wascompleted in the fall of 1989 at Bell NorthernResearch, where Skuce spent some 60 days workingclosely with the designers of a new designenvironment for communications systems.
Theconceptual structure and terminology of this systemwere worked out in many long knowledge acquisitionsessions.
The resulting knowledge base is now beingused to drive documentation production, on-line help,and subsequent design extensions.4.
CONCLUSIONSA knowledge base produced with CODE can beseen as a "blueprint" for a documentation project, inthat it clarifies the conceptual structure andterminology of the project from the outset.
Just asone does not construct buildings without blueprints,systematic and computer-assisted concept analysisshould be a prerequisite for the documentation processin general, particularly the terminology component.The following are just a few examples of the positiveimplications we foresee for our approach:!.
Greater quality and multifunction-ality of terminological data, through a largeand well-structured knowledge component.2.
Terminological consistency betweenall phases of the documentation process,(i.e.
less of the "pass-my-confusion-onto-the-next-person" phenomenon).3.
Enhanced communication amongterminologists, other documentalists, andexperts through a shareable knowledge base.
Thedocumentalist's and terminologist's betterunderstanding of the conceptual structure of anexpert's field is also bound to enhance his credibilitywith the expert.4.
Efficient training.
A knowledge basethat offers efficient, on-line retrieval of informationensures conceptual continuity, and prevents a newdocumentalist from having to relearn his predecessor'sfield "from scratch".5.
Improved transfer of knowledge ac-ross linguistic borders.
The translation processis a great bottleneck for efficient inter-linguisticknowledge transfer: both human and machinetranslation are greatly enhanced by correctterminology and conceptual c arity.ACKNOWLEDGEMENTSThe projects described above were greatly enriched bydiscussions with C. Leonhardt, D. Michaud, L.Paradis, S. Pavel, and P. Weissenhofer at theSecretary of State, and with R. Aubin, I. Engelberg,M.
Javor, J. McGee and B. Selic at Bell NorthernResearch.
Skuce's research as been supported byCOGNOS Inc., the National Sciences andEngineering Research Council of Canada (NSERC),the University Research Incentives Fund (URIF) ofthe Government of Ontario, and Research Services ofthe University of Ottawa.
Meyer's research as beensupported by Research Services of the University ofOttawa.REFERENCESBUDIN, G., Galinski, C., NEDOBITY, W.,THALLER, R. 1988.
"Terminology and KnowledgeData Processing".
Terminology and KnowledgeEngineering (Proceedings of the InternationalCongress on Terminology and KnowledgeEngineering, Trier, 1987), Ed.
H. Czap and C.Galinski.
Frankfurt: INDEKS Verlag.KUKULSKA-HULME, Agnes and KNOWLES,Frank.
1989.
"L'organisation conceptuelle desdictionnaires automatiques pour textes techniques".META, Vol.
34, No.
3.MEYER, Ingrid and SKUCE, Douglas.
1990.
"Computer-Assisted Concept Analysis: AKnowledge-Based Approach to Terminology".
Paperpresented at the EURALEX Fourth InternationalConference, lvlalaga.SKUCE, Douglas.
1990 (in press).
"ALanguage and System for Making Definitions ofTechnical Concepts".
Journal of Systems andSoftware.SKUCE, Douglas.
1989a.
"A GenericKnowledge Acquisition Environment IntegratingNatural Language and Logic".
Proceedings IJCAIWorkshop on Knowledge Acquisition (Detroit, Aug.1989).SKUCE, Douglas.
1989b.
"Beyond Objects: ASynthesis of Objects, Logic, and Natural Languagefor Software Production".
Submitted to IEEETransactions on Knowledge and Data Engineering.SKUCE, Douglas, WANG, S., andBEAUVILLE, Y.
1989.
"A Generic KnowledgeAcquisition Environment for Conceptual andOntological Analysis".
Proceedings KnowledgeAcquisition for Knowledge-Based Systems Workshop(Banff, Canada, Oct. 1989).SOWA, John.
1984.
Conceptual Structures.Reading., MA: Addison-Wesley.WUSTER, Eugen.
1985.
Einfiihrung in dieAllgemeine Terminologielehre und TerminologischeLexikographie.
Vienna: Infoterm.358
