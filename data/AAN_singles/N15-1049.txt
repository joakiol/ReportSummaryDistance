Human Language Technologies: The 2015 Annual Conference of the North American Chapter of the ACL, pages 462?471,Denver, Colorado, May 31 ?
June 5, 2015.c?2015 Association for Computational LinguisticsA Dynamic Programming Algorithm forTree Trimming-based Text SummarizationMasaaki Nishino1, Norihito Yasuda2, Tsutomu Hirao1, Shin-ichi Minato2,3, Masaaki Nagata11NTT Communication Science Laboratories, NTT Corporation2ERATO Minato Discrete Structure Manipulation System Project, JST3Graduate School of Information Science and Technology, Hokkaido Universitynishino.masaaki@lab.ntt.co.jpAbstractTree trimming is the problem of extractingan optimal subtree from an input tree, andsentence extraction and sentence compres-sion methods can be formulated and solvedas tree trimming problems.
Previous ap-proaches require integer linear programming(ILP) solvers to obtain exact solutions.
Theproblem of this approach is that ILP solversare black-boxes and have no theoretical guar-antee as to their computation complexity.
Wepropose a dynamic programming (DP) algo-rithm for tree trimming problems whose run-ning time is O(NL logN), where N is thenumber of tree nodes and L is the length limit.Our algorithm exploits the zero-suppressed bi-nary decision diagram (ZDD), a data struc-ture that represents a family of sets as a di-rected acyclic graph, to represent the set ofsubtrees in a compact form; the structure ofZDD permits the application of DP to obtainexact solutions, and our algorithm is applica-ble to different tree trimming problems.
More-over, experiments show that our algorithm isfaster than state-of-the-art ILP solvers, andthat it scales well to handle large summariza-tion problems.1 IntroductionExtractive text summarization and sentence com-pression are tasks that basically select a subset ofthe input set of textual units that is appropriate asa summary or a compressed sentence.
Current textsummarization and sentence compression methodsregard the problem of extracting such a subset as acombinatorial optimization problem (e.g., (Filatovaand Hatzivassiloglou, 2004; McDonald, 2007; Linand Bilmes, 2010)).
Tree trimming, the problem offinding an optimal subtree of an input tree, is onekind of these combinatorial optimization problems,and it is used in three classes of text summarizations:sentence compression (Filippova and Strube, 2008;Filippova and Altun, 2013), single-document sum-marization (Hirao et al, 2013), and the combinationof sentence compression and single-document sum-marization (Kikuchi et al, 2014).
In these tasks, theset of input textual units is represented as a rootedtree whose nodes correspond to the minimum tex-tual units such as sentences and words.
Next, a sub-set is made by forming a subtree by trimming theinput tree.
Since the optimal trimmed subtree pre-serves the relationships between textual units, it isa concise representation of the original set that pre-serves linguistic quality.A shortcoming of tree trimming-based methods isthat they are formulated as integer linear program-ming (ILP) problems and so an ILP solver is neededto solve them.
Although modern ILP solvers cansolve many instances of tree trimming problems ina short time, there is no theoretical guarantee thatthey obtain an optimal solution.
Furthermore, evenif an optimal solution can be obtained, we cannot es-timate the running time.
Estimating the running timeis critical for practical applications.In this paper, we propose a dynamic programming(DP) algorithm for tree trimming problems that fo-cus on text summarization.
The algorithm can solveall three different classes of tree trimming problemsproposed so far in a unified way, and it can alwaysfind an optimal solution in O(NL logN) time forthese problems, where N is the number of nodes ofthe input tree and L is the length limit.
The runningtime of our algorithm only depends on N and L and462so is independent of the input trees structure.
Find-ing an exact solution is important since we can use itto evaluate the performance of heuristic algorithms.The key idea of our algorithm is to use the zero-suppressed binary decision diagram (ZDD) (Minato,1993) to represent the set of all subtrees of the inputtree.
ZDD is a data structure that represents a fam-ily of sets as a directed acyclic graph (DAG).
It canrepresent a family of sets in compressed form.
Weuse ZDD to represent the set of subtrees of the in-put tree, and then run a DP algorithm on the ZDD toobtain the optimal solution that satisfies the lengthlimit.
The algorithm runs in time O(|Z|L), where|Z| is the number of nodes of ZDD, and L is thelength limit.
Although the number of ZDD nodesdepends on the set we want to represent, we cangive theoretical upper bounds when we representthe set of all subtrees of an input tree.
ZDD usesO(N logN) nodes to represent the set of all sub-trees of an N node input tree.
Hence the DP algo-rithm runs in O(NL logN) time.
The main virtuesof the proposed algorithm are that (1) it can alwaysfind an exact solution, (2) its running time is the-oretically guaranteed, and (3) it can solve the threeknown tree trimming problems.
Furthermore, our al-gorithm is fast enough to be practical and scalable.Since text summarization methods are often appliedto large scale inputs (e.g., (Christensen et al, 2014;Nakao, 2000)), scalability is important.
We compareit to state-of-the-art ILP solvers and confirm that theproposed algorithm can be hundreds of times faster.Since our method assumes known formuations fortext summarization, the summary created by our al-gorithm is exactly the same as that obtained by ap-plying previous methods.
However, we believe thatalgorithmic improvements in computational cost isas important as improvements in accuracy in orderto make better practical systems.2 Tree Trimming ProblemsWe briefly review the three tree trimming formula-tions used in text summarization and sentence com-pression.
They all try to find the subtree that maxi-mizes the sum of item weights while satisfying thelength limit.
Let D = {e1, .
.
.
, eN} be the input setof textual units, where eirepresents the i-th unit.
Weuse wiand lito represent the weight and length ofei, respectively.
Given length limit L, these methodssolve the following optimization problem:MaximizeT?D?ei?TwiSubject to T ?
T and?ei?Tli?
L ,(1)where T ?
D and T ?
2D.
We use T to representthe set of subtrees that can be feasible solutions ifwe ignore the length limit.
The following problemsemploy different T to match each problem setting.
IfT = 2D, i.e., T equals the set of all possible subsetsof D, it is equivalent to the 0-1 knapsack problem,and is solved with the standard DP algorithm.Sentence Extraction Hirao et al (2013) proposeda single-document summarization algorithm to solvea tree trimming problem.
They represent a documentas a set of elementary discourse units (EDUs) andthen select an optimal subset to make a summary.Each EDU is a minimal unit that composes the dis-course structure of the document; it usually corre-sponds to a clause.
Their summarization method firstrepresents a document as a dependency discoursetree (DEP-DT) that represents the dependency struc-ture between EDUs.
DEP-DT is a rooted tree inwhich each node corresponds to an EDU.
They thenselect the rooted subtree that maximizes the sum ofweights and satisfies the length limit to make a sum-mary, where we say a subtree is rooted if it containsthe root node of the input tree.
This problem can beformulated as the combinatorial optimization prob-lem of Eq.
(1), where T is the set of all rooted sub-trees of the input DEP-DT.Sentence Compression Filippova and Strube(2008) proposed a sentence compression methodbased on the trimming of a word dependency tree.
Itsrecently proposed variant shows state-of-the-art per-formance (Filippova and Altun, 2013).
They trim asyntactical dependency tree to compress a sentence.Their formulation is similar to the previous sentenceextraction method except that it allows the root nodeof a subtree to be other than the root node of theinput tree.
In other words, their formulation allowsmultiple candidate root nodes for a subtree.
We rep-resent such a set of candidate root nodes as R, andthe set of possible solutions T for this formulation463(a) Rooted tree (b) Multi-rooted tree(c) Nested treeFigure 1: Example trees.is the set of all subtrees of the input tree whose rootnode is contained in R.Sentence Extraction & Compression Kikuchi etal.
(2014) proposed a single-document summariza-tion method that can select compressed sentences.It is an extension of the sentence extraction methodproposed in (Hirao et al, 2013).
They represent adocument as a sentence dependency tree that is ob-tained from DEP-DT, and then represent each sen-tence in the sentence dependency tree as a word de-pendency tree.
In the following, inner trees refer tothe word dependency trees that correspond to sen-tences, while the outer tree represents the sentencedependency tree that represents a document.
Hencea document is represented as a nested tree whereeach node of the outer tree corresponds to an innertree.
They then make a summary by first selecting arooted subtree of the outer tree, and then selecting asubtree for each inner tree that corresponds to a nodeof the selected subtree of the outer tree.
Each innertree has multiple root candidate nodes, and the rootnode of a subtree of an inner tree is a root candidatenode of the tree.
The set of feasible solutions, T ,corresponds to all possible nested trees constructedin this way1.Fig.
1 shows example input trees used in the abovethree tasks: (a) a rooted tree used in sentence extrac-tion, (b) a multi-rooted tree used in sentence com-1Kikuchi et al (2014) set further constraints on possible sub-trees of a syntactical tree.
Our method can also cope with theseadditional constraints (see Sect.
7).Table 1: Examples of valid and invalid subtrees ofthe input trees in Fig.
1Valid InvalidRooted tree e1e2e3, e1e2e5e2e3e4, e6Multi-rooted tree e1e2e5, e2e3e4e3, e5e6Nested tree e1e2e4, e1e4e5e8e4e5e6, e1e2e7pression, and (c) a nested tree used in sentence ex-traction & compression.
Gray nodes are root candi-date nodes.
Each tree yields a different set of validsubtrees.
Tab.
1 shows examples of valid and invalidsubtrees of each input tree, where we assume thateach subtree in T is represented by a set of nodesthat is contained in the subtree.3 Zero-suppressed Binary DecisionDiagram (ZDD)The key idea of the proposed algorithm is to rep-resent the set of candidate subtrees T as a zero-suppressed binary decision diagram (ZDD) (Minato,1993).
ZDD is a variant of binary decision diagram(BDD) (Bryant, 1986; Akers, 1978), and is a datastructure that can succinctly represent a family ofsets as a DAG.
ZDD has two types of nodes, namelybranch nodes and terminal nodes.
Branch nodes arenon-terminal nodes.
Each branch node has exactlytwo out edges, called low-edge and high-edge, anda label that represents the item that the node corre-sponds to.
We use hi(i), lo(i), and v(i) to representthe node pointed to by the high-edge, low-edge, andthe label of the i-th node of the ZDD, respectively.The branch node that has no parent node is the rootnode.
Terminal nodes have no outgoing edges, anda ZDD has exactly two terminal nodes whose labelsare > and ?.
A path from the root node to termi-nal node > represents a set of items contained in thefamily of sets represented by the ZDD.
We can re-cover the set of items that corresponds to a path byselecting the labels of the branch nodes whose high-edges lie on the path.Fig.
2(a) is a ZDD that represents the family ofsets {e1e2, e2e3, e1e3}.
We use circles to representbranch nodes and rectangles to represent the ter-minal nodes.
A dashed edge represents a low-edgeand full edge represents a high-edge.
The numberon each circle node represents the label of the node.For example, the label of the root node of the ZDD464Figure 2: An example ZDD and how the dynamicprogramming algorithm works with the ZDD.
(a)An example ZDD that represents the family of sets{e1e2, e1e3, e2e3}, (b) table S and (c) table B aftercompletion of the table filling phase.in Fig.
2(a) is 1.
The ZDD has three different pathsthat start at the root node and end at >.
Each pathcorresponds to an item contained in the family ofsets.In the following, let z1, .
.
.
, z|Z|be the nodes ofa ZDD.
We use Z to represent a ZDD, and |Z| torepresent the number of nodes in Z.
We assumei < hi(i), lo(i) for every i = 1, .
.
.
, |Z| ?
2. z1corresponds to the root node, and z|Z|?1, z|Z|cor-responds to > and ?
terminal nodes, respectively.We also assume that the ZDD is ordered, i.e., thereis a total order on the labels, and the label of a par-ent node comes before that of a child node for everyparent-child node pair.
The ZDD in Fig.
2(a) is anordered ZDD whose order is e1, e2, e3.4 Dynamic Programming Algorithm forTree Trimming ProblemsOur algorithm takes the following three-step proce-dure.
First, we represent the set of subtrees T foreach tree trimming problem as a ZDD.
Then we ap-ply a bottom-up and table-filling style DP algorithmto the ZDD.
Finally, we backtrack the filled table toobtain an optimal solution.Our algorithm is similar to the standard DP al-gorithm for the 0-1 knapsack problem, which solvesthe problem inO(NL) time withN items and lengthlimit L. The DP algorithm solves a knapsack prob-lem by filling anN?
(L+1) table by recursively ex-ploiting previously computed partial solutions.
Ouralgorithm also fills a table for problem solving, butthe table?s size is |Z| ?
(L + 1).
That is, the sizeof the table equals the number of nodes of the ZDDAlgorithm 1 Dynamic Programming AlgorithmInput: ZDD Z that represent T , length limit L, and wi, lifor1 ?
i ?
NOutput: Optimal subtree r1: Initialize S[i][j]?
??
for all i, j.2: S[|Z| ?
1][0]?
0.3: for i = |Z| ?
2, .
.
.
, 1 do4: for j = 0, .
.
.
, L do5: if j ?
lv(i)andS[hi(i)][j ?
lv(i)] + wv(i)> S[lo(i)][j] then6: S[i][j]?
S[hi(i)][j ?
lv(i)] + wv(i)7: B[i][j]?
HI8: else9: S[i][j]?
S[lo(i)][j], B[i][j]?
LO10: k??
argmax0?k?LS[1][k]11: i?
1, j ?
k?, r?
?12: while (i, j) 6= (|Z| ?
1, 0) do13: if B[i][j] = HI then14: r?
r ?
{v(i)}, i?
hi(i), j ?
j ?
lv(i)15: else16: i?
lo(i)17: return rthat represents a set of subtrees T .
The tables can beseen as the set of |Z| arrays with (L+1) entries, andeach array is associated with each ZDD node.
We fillthese tables by referring to previously computed re-sults by using the ZDD?s structure.Alg.
1 is the DP algorithm that can solve the prob-lem of Eq.
(1), given the ZDD that represents thefamily of sets T .
We first prepare two tables, S andB; both have |Z| ?
(L+ 1) entries.
Table S is usedfor storing intermediate weights, and B is used forstoring information used in recovering the optimalsolution.
We first fill the elements in S and B whiletraversing the ZDD in order from the terminal nodesto the root node.
We then use B to recover the so-lution that maximizes the weight.
In the table fillingphase (lines 1 to 9), we update S[i][j] and B[i][j],recursively.
Weight S[i][j] represents the maximumweight of the ZDD path from the i-th node to the> terminal node, whose total length is j.
We com-pare S[hi(i)][j ?
lv(i)] + wv(i)and S[lo(i)][j], andselect the maximum weight to set S[i][j].
The valueof B[i][j] stores which candidate we set to S[i][j].
Ifwe use the former one, we set label HI to B[i][j],otherwise LO.
After filling the table, we run a back-tracking procedure to obtain an optimal solution.
Inthe backtracking phase (lines 10 to 16), we start fromB[i][k?]
and repeat backtracking using the entries ofB.465We give here a proof of the correctness of the al-gorithm.
We use the fact that the ZDD is constructedrecursively; given the i-th branch node ziof a ZDD,the subgraph induced by the set of nodes that are de-scendants of ziis also a ZDD.
Let the ZDD whoseroot node is zibe Zi, and the family of sets repre-sented by Zibe Ti.
Family of sets Ti, Tlo(i)and Thi(i)satisfy the following relationship.Ti= Tlo(i)?
{ev(i)?
T |T ?
Thi(i)}Proposition 1.
Alg.
1 can find the optimal solutionof the problem of Eq.
(1), where we assume T is rep-resented as an ordered ZDD.Proof.
We use induction to give a proof thatS[i][j] = maxT?ei?Twiafter running our algo-rithm, where T is a set of tree nodes that satisfiesT ?
Tiand?ei?Tli= j.
If i = |Z| ?
1, thenTi= {?}
and S[i][0] = 0 and S[i][j] = ??
forj 6= 0, which satisfies the condition.
Suppose thatS[lo(i)][j] and S[hi(i)][j] both satisfy the conditionfor j = 0, .
.
.
, L. If the set that maximizes S[i][j]does not have ev(i), then the set is contained in Tlo(i),and its size is j.
Therefore, the maximum weightequals S[lo(i)][j] (Alg.1 line 9).
Otherwise, the setthat maximizes S[i][j] has ev(i), so the item is con-tained in {ev(i)?
T |T ?
Thi(i)}, and its weight isS[hi(i)][j?lv(i)]+wv(i)(Alg.1 line 6).
SinceZ1cor-responds to the root node and it represents all possi-ble solutions, maxjS[1][j] is the maximum weightof the subset that satisfies the length limit and is con-tained in T .Proposition 2.
The time and space complexity ofAlg.
1 are both O(|Z|L).Proof.
We have to store tables S,B and solution r.The tables have |Z| ?
(L+1) entries and |Z| ?
|r|,the space complexity is O(|Z|L).
For the time com-plexity, filling entries in S and B requires O(|Z|L)time since to fill an entry requires constant time.Backtracking requires at most N updates, hence thetime complexity is O(|Z|L).We show an example of our algorithm in Fig.
2.Suppose that D = {e1e2, e1e3, e2e3}, (l1, l2, l3) =(1, 1, 3) and (w1, w2, w3) = (2, 1, 3).
Set D is rep-resented as the ZDD in Fig.
2(a).
Let L = 4 and runthe DP algorithm yielding tables S and B shown in(a) (b) (c)Figure 3: Example ZDDs representing the set oftrimmed subtrees of the trees in Fig.
1.
(a) Rooted-tree, (b) multi-rooted tree, and (c) nested-treeFig.
2(b,c).
Suppose that we want to fill entry S[1][4](the upper right cell).
There are two possible pathsto reach the entry; the first path takes the high-edgefrom S[2][3], and the second path takes the low-edgefrom S[3][4].
We use hollow and black arrows to rep-resent these paths in Fig.
2(b).
Since the former pathresults in weight 5, which is higher than that of thelater path, hence we set S[1][4] = 5 and B[1][4] =HI.
After filling all the entries in tables, we can seeS[1][4] has the maximum weight, and the backtrack-ing from B[1][4]?
B[2][3] ?
B[4][3] ?
B[5][0].B[5][0] corresponds to the > terminal node, and thebacktracking yields the optimal solution e1e3.5 ZDD SizesWe give upper bounds on the size of the ZDD rep-resenting the family of sets T of Eq.
(1) for the threeproblems.
The number of subtrees contained in Tmay grow exponentially with the size of the originaltree, however, we can represent them as a ZDD withvery few nodes.
Since the running time of our algo-rithm isO(|Z|L), these theoretical upper bounds de-termine the running time of the proposed tree trim-ming algorithms.We first give a proof of the size of the ZDD thatrepresents all rooted subtrees of a given tree.Proposition 3.
Given a tree with N nodes, we canconstruct a ZDD that represents all rooted subtreesof the tree whose number of nodes is N + 2, if weuse a depth first pre-order of tree nodes as the order466of ZDD labels.This result can be derived from the result of(Knuth, 2011), Chap.7.1.4, exercise 266.
Fig.
3(a) isa ZDD that represents the set of all rooted subtrees ofthe tree in Fig.
1(a), where we employ pre-orderinge1, e2, e3, e4, e5, e6.We next show the size of the ZDDs that representthe set of all subtrees of a multi-rooted tree.Proposition 4.
Given an N node tree and the set ofcandidate root nodes R, the set of all possible sub-trees can be represented by a ZDD whose number ofnodes is O(N log |R|).Proof.
(Sketch) The set of all possible subtrees canbe represented as the union of the sets of rooted sub-trees for different root r ?
R. The set of rooted sub-trees for a root node r can be represented as a ZDDthat has O(N) nodes, hence the set of ZDDs for dif-ferent root nodes has O(N |R|) nodes in total.
Wecan further reduce this upper bound by employingappropriate depth first pre-ordering so as to share asmany ZDD substructures as possible, and this order-ing results in a union ZDD whose number of nodesis O(N log |R|).This proposition is related to a recently proved re-sult that the set of all subtrees of an N -node tree canbe represented as a ZDD whose number of nodesis O(N logN) (Yasuda et al, 2014).
This is a spe-cial case of the above theorem that R equals the setof all nodes of the tree, i.e., |R| = N .
The keypoint is to use the heaviest-last depth first pre-orderas the ZDD label order.
In this order, a node withthe heaviest weight always comes after other sib-lings, where we define the weight of a node as thesize of the maximum rooted subtree T ?
T thatis contained in its descendant tree.
Fig.
3(b) is anexample of the ZDD that represents the set of allpossible rooted subtrees of the multi-rooted tree inFig.
1(b), where the heaviest-last depth first pre-order is e1, e5, e6, e2, e3, e4.The upper bound size of a ZDD for nested sub-trees can be estimated by combining the above twotheoretical results on rooted subtrees and multi-rooted subtrees.Proposition 5.
For a nested tree whose sum ofthe number of nodes of inner trees is N , and thesets of candidate root nodes for inner trees areR1, .
.
.
, RM, where M is the number of inner trees,we can represent the set of possible nested subtreesby O(N log |R?|), where |R?| = maxi|Ri|.Proof.
(Sketch) The ZDD corresponding to the setof nested subtrees can be constructed as follows:first we make ZDDs that represent the set of rootedsubtrees of the outer tree and inner trees.
The outertree is represented as a ZDD with O(N) nodes, andthe i-th inner tree is represented as a ZDD withO(Nilog |Ri|) nodes, where Niis the number ofnodes of the i-th inner tree.
Then we can constructthe ZDD for the nested tree by replacing each ZDDnode of the outer-tree ZDD with the inner-tree ZDDcorresponding to that node.Fig.
3(c) is a ZDD that represents the set of nestedsubtrees of the tree in Fig.
1(c), where we employ theorder e1, e2, e3, e4, e5, e6, e7, e8.We can directly prove the running time of the DPalgorithm by exploiting the above three results toshow the DP algorithm for the three problems takesO(NL), O(NL log |R|), and O(NL log |R?|) time,respectively.
Here we assume that a ZDD that repre-sents the set T is given.
We need additional time forconstructing a ZDD that represents T i.e.
the inputtree.
However, ZDD construction also can be donein O(|Z|) for the three tree trimming problems.
Weshow details of ZDD construction in the next sec-tion.6 Efficient ZDD ConstructionWe introduce here an efficient algorithm for con-structing a ZDD that is used in the tree trimmingproblems.
A ZDD can be constructed by repeatedlyapplying set operations between intermediate ZDDs,however, this process may be too slow since the run-ning time of the set operations depends on the sizeof input and output ZDDs.We first show the flow of an efficient ZDD con-struction algorithm for multi-rooted trees.
This al-gorithm also can be used for constructing a ZDD forall rooted subtrees of a tree since a single-root treeis also a multi-rooted tree.
The algorithm consistsof two steps: first, we determine the appropriate or-der of ZDD nodes.
We then use the top-down ZDDconstruction algorithm shown in (Knuth, 2011)(Chap.7.1.4, Exercise 55) to construct a ZDD.
The467top-down algorithm can efficiently construct a ZDDthat represents the set of all connected componentsof a graph, and we can use it for constructing the setof all rooted subtrees with small modification.
Therunning time of top-down construction algorithmsmay not be O(|Z|), but our modified algorithm canobtain the ZDD in O(|Z|) time by exploiting thestructure of the input tree to avoid to make unnec-essary ZDD nodes.We can extend this ZDD construction algorithm tocreate ZDDs that represent the set of nested subtrees.We first compute the orders of outer tree and each in-ner tree, and then construct ZDDs for them using thetop-down construction algorithm.
Finally, we obtainthe required ZDD by replacing ZDD nodes of theouter tree with the corresponding inner ZDDs.
Theseprocedure also can be done in O(|Z|) time, sinceconstructing the ZDDs for each tree takes time pro-portional to its size, and the ZDD substitution phasealso takes time proportional to ZDD size.7 DiscussionWhen solving a tree trimming problem, we some-times want to add constraints to the problem so asto obtain better results.
For example, Kikuchi et al(2014) use additional constraints to set the mini-mum number of words (say ?
words) extracted froma sentence if the sentence is contained in a sum-mary, and require each selected inner tree to con-tain at least one verb and noun if the inner tree hasthem.
Since our tree trimming approach can workonce the ZDD that represents the set of feasible so-lutions is constructed, adding new constraints to theset of solutions can be easily performed by apply-ing ZDD operations.
These operations can be per-formed efficiently for many cases and the proposedapproach will still work well.
Moreover, we can ex-tend the algorithm to construct ZDDs that representthe extended set of feasible solutions.
We can alsogive theoretical upper bounds for the new constraint-added problem.
In this nested tree case, we can provethat the number of ZDD nodes is O(N?
log |R?|).8 ExperimentsWe conduct experiments on the three tree trimmingtasks of text summarization, sentence compression,and the combination of summarization and text com-pression.
For the text summarization experiments,we use the test collection for summarization evalua-tion contained in the RST Discourse Treebank (RST-DTB) (Carlson et al, 2001), which is used in the pre-vious work.
The test collection consists of 30 docu-ments with the reference summaries whose length isabout 10% of the original document.
We used thesame parameters used in the previous papers.
Forsentence compression, we use the English compres-sion corpus used in (Filippova and Strube, 2008),which consists of 82 news stories selected from theBritish National Corpus and American News TextCorpus, and consists of more than 1,300 sentences.We set the sizes of compressed sentences to be 70%of the original length, which is used in the origi-nal paper.
We compare the proposed algorithm toGurobi 5.5.0, a widely used commercial ILP solver2.It was run in the default settings and we used single-thread mode.
We run Gurobi until it finds an optimalsolution.
Our algorithm was implemented in C++,and all experiments were conducted on a Linux ma-chine with a Xeon E5-2670 2.60 GHz CPU and 192GB RAM.Fig.
4 compares the running time of our algorithm(includes ZDD construction time) and Gurobi.
Eachplotted marker in the figures represents a test in-stance, and if the position of a marker is below thedashed line, it means that our method is faster thanGurobi.
We can see that our method is always fasterthan Gurobi; it was, at most, 300, 10, and 50 timesfaster in sentence extraction, sentence compression,and extraction & compression, respectively.
Fig.
5,6shows the relation between the input tree size andthe ZDD construction times, and the relation be-tween the input tree size and converted ZDD sizerespectively.
These results show that both ZDD sizesand construction time were linear to the number ofinput tree nodes.
The number of ZDD nodes lookslike smaller than the O(N logN) bounds for multi-rooted trees and nested trees.
This result is causedsince the set of root candidate nodesR is small com-paring with N for a typical input document.Next we conduct experiments to assess the scala-bility of the proposed method by solving problemswith different input sizes.
We choose the nested tree2We also used CPLEX 12.5.1.0, but Gurobi shows betterperformance in most cases.46810?1 100 101 102 103Gurobi time (ms)10?1100101102103ZDDtime(ms)(a) Sentence extraction10?1 100 101 102 103Gurobi time (ms)10?1100101102103ZDDtime(ms)(b) Sentence compression10?1 100 101 102 103Gurobi time (ms)10?1100101102103ZDDtime(ms)(c) Extraction & compressionFigure 4: Performance comparison between the proposed method and Gurobi0 100 200 300 400Numer of tree nodes0.000.020.040.060.08Constructiontime(ms)(a) Sentence extraction0 50 100 150Numer of tree nodes0.00.10.20.3Constructiontime(ms)(b) Sentence compression0 500 1000 1500 2000Numer of tree nodes024Constructiontime(ms)(c) Extraction & compressionFigure 5: ZDD construction time with number of input tree nodes0 100 200 300 400Number of tree nodes0100200300400ZDDsize(a) Sentence extraction0 50 100 150Number of tree nodes0100200300ZDDsize(b) Sentence compression0 500 1000 1500 2000Number of tree nodes0200040006000ZDDsize(c) Extraction & compressionFigure 6: ZDD sizes with number of input tree nodestrimming problem since it is the most complex prob-lem.
We make a large artificial nested tree by con-catenating outer-trees of the nested trees of 30 RST-DT datasets.
The results are shown in Fig.
7, and itshows that out method scales well with large inputscomparing with Gurobi.9 Related WorkRecently proposed text summarization and sentencecompression methods solve a task by formulating itas a combinatorial optimization problem (McDon-ald, 2007; Woodsend and Lapata, 2010; Martinsand Smith, 2009; Clarke and Lapata, 2008).
Thesecombinatorial optimization-based formulations en-able flexible models that can reflect the properties re-quired.
However, their complexity makes it difficultto solve optimization problems efficiently.
Theseproblems can be solved by using ILP solvers, how-ever, they may fail to find optimal solutions and theyhave no guarantee on the running time.
Since theproposed method is a DP algorithm and it has a the-oretical guarantee, it always find an optimal solutionin time proportional to the size of the input tree.Our method also can be seen as a kind of fasttext summarization algorithm.
Previous fast algo-rithms are approximate algorithms (Qian and Liu,2013; Lin and Bilmes, 2010; Lin and Bilmes, 2011;Davis et al, 2012), while our algorithm is an ex-act algorithm.
Of course, there is a difference intask hardness since previous methods were designedfor multi-document summarization and ours for sin-gle document summarization.
Those works suggest4690 5000 10000 15000 20000 25000Number of tree nodes05001000150020002500Solutiontime(ms) ZDDGurobiFigure 7: Solution time of our algorithm and Gurobiwith different input tree sizes.that algorithms that have guarantees on both runningtime and quality of solutions are highly demanding,and the proposed pseudo-polynomial time exact al-gorithm is valuable.The Zero-suppressed Binary Decision Diagram(ZDD) (Minato, 1993) is a variant of the Binary De-cision Diagram (BDD) (Akers, 1978; Bryant, 1986).BDD is a data structure that represents a Booleanfunction as a DAG, and ZDD can represent a fam-ily of sets in a compact form.
Recently, ZDD andBDD have been used for solving optimization prob-lems (Bergman et al, 2014a; Bergman et al, 2014b);they find the optimal solution by representing the setof feasible solutions in a BDD or its variants.
Com-pared to these optimization methods, the proposedmethod differs in two main points.
First, the pro-posed algorithm extends the ZDD-based optimiza-tion algorithm to solve knapsack problems.
Second,it offers proofs of the size of ZDDs representingtrimmed subtrees.The ZDD-based method presented in this paper isrelated to our previous work of a BDD-constrainedsearch (BCS) method (Nishino et al, 2015).
In BCS,a BDD is used to solve constraints-added variants ofshortest path problems on a DAG, and a 0-1 knap-sack problem with additional constraints also canbe solved by BCS.
The main advantage of the DP-algorithm shown in this paper is that it has a theoret-ical guarantee on its running time which depends ononly the size of the input tree.
This advantage comesfrom using ZDD instead of BDD, and designing analgorithm specialized for variants of the knapsackproblem.
Though not obvious, it is possible to ex-tend BCS to use ZDD instead of BDD and employthe label order used in this paper to give a theoreticalbound that only depends on the size of an input tree.Nevertheless, the bound attained with this extensionis worse than that shown in this paper.10 ConclusionWe have proposed a DP algorithm for the tree trim-ming problems that appear in text summarization.Our approach always finds an optimal solution, andit runs in O(NL logN) time, where N is the num-ber of tree nodes and L is the length limit.
The keyto our approach is to represent a set of subtrees of aninput tree as a ZDD.
By using ZDD, we can give atheoretical guarantee of the running time of the al-gorithm.
Experiments show that the proposal allowsthree different tree trimming problems to be solvedin the same way.ReferencesSheldon B. Akers.
1978.
Binary decision diagrams.Computers, IEEE Transactions on, C-27(6):509?516.David Bergman, Andre A. Cire, and Willem-Jan van Ho-eve.
2014a.
MDD propagation for sequence con-straints.
Journal of Artificial Intelligence Research,50:697?722.David Bergman, Andre A Cire, Willem-Jan van Hoeve,and Tallys Yunes.
2014b.
BDD-based heuristics forbinary optimization.
Journal of Heuristics, 20(2):211?234.Randal E Bryant.
1986.
Graph-based algorithms forboolean function manipulation.
Computers, IEEETransactions on, C-35(8):677?691.Lynn Carlson, Daniel Marcu, and Mary Ellen Okurowski.2001.
Building a discourse-tagged corpus in theframework of rhetorical structure theory.
In Proceed-ings of the Second SIGdial Workshop on Discourseand Dialogue - Volume 16, SIGDIAL?01, pages 1?10.Janara Christensen, Stephen Soderland, Gagan Bansal,and Mausam.
2014.
Hierarchical summarization:Scaling up multi-document summarization.
In Pro-ceedings of the 52nd Annual Meeting of the Associ-ation for Computational Linguistics, ACL?14, pages902?912.James Clarke and Mirella Lapata.
2008.
Global infer-ence for sentence compression an integer linear pro-gramming approach.
Journal of Artificial IntelligenceResearch, 31(1):399?429.Sashka T. Davis, John M. Conroy, and Judith .D.Schlesinger.
2012.
Occams ?
an optimal combina-torial covering algorithm for multi-document summa-470rization.
In IEEE 12th International Conference onData Mining Workshops, ICDMW, pages 454?463.Elena Filatova and Vasileios Hatzivassiloglou.
2004.A formal model for information selection in multi-sentence text extraction.
In Proceedings of the 20thInternational Conference on Computational Linguis-tics, COLING?04.Katja Filippova and Yasemin Altun.
2013.
Overcom-ing the lack of parallel data in sentence compres-sion.
In Proceedings of the 2013 Conference onEmpirical Methods in Natural Language Processing,EMNLP?13, pages 1481?1491.Katja Filippova and Michael Strube.
2008.
Dependencytree based sentence compression.
In Proceedings ofthe Fifth International Natural Language GenerationConference, INLG?08, pages 25?32.Tsutomu Hirao, Yasuhisa Yoshida, Masaaki Nishino,Norihito Yasuda, and Masaaki Nagata.
2013.
Single-document summarization as a tree knapsack prob-lem.
In Proceedings of the 2013 Conference onEmpirical Methods in Natural Language Processing,EMNLP?13, pages 1515?1520.Yuta Kikuchi, Tsutomu Hirao, Hiroya Takamura, Man-abu Okumura, and Masaaki Nagata.
2014.
Singledocument summarization based on nested tree struc-ture.
In Proceedings of the 52nd Annual Meeting of theAssociation for Computational Linguistics, ACL?14,pages 315?320.Donald E Knuth.
2011.
The Art of Computer Program-ming, Volume 4A: Combinatorial Algorithms, Part 1.Addison-Wesley.Hui Lin and Jeff Bilmes.
2010.
Multi-document sum-marization via budgeted maximization of submodu-lar functions.
In Human Language Technologies: The2010 Annual Conference of the North American Chap-ter of the Association for Computational Linguistics,NAACL/HLT?10, pages 912?920.Hui Lin and Jeff Bilmes.
2011.
A class of submodu-lar functions for document summarization.
In Pro-ceedings of the 49th Annual Meeting of the Associa-tion for Computational Linguistics: Human LanguageTechnologies, ACL/HLT?11, pages 510?520.Andr?e FT Martins and Noah A Smith.
2009.
Summa-rization with a joint model for sentence extraction andcompression.
In Proceedings of the Workshop on In-teger Linear Programming for Natural Langauge Pro-cessing, pages 1?9.Ryan McDonald.
2007.
A study of global inference algo-rithms in multi-document summarization.
In Proceed-ings of the 9th European Conference on InformationRetrieval, ECIR?07, pages 557?564.Shin-ichi Minato.
1993.
Zero-suppressed BDDs forset manipulation in combinatorial problems.
In De-sign Automation, 1993.
30th Conference on, DAC?93,pages 272?277.Yoshio Nakao.
2000.
An algorithm for one-page sum-marization of a long text based on thematic hierarchydetection.
In Proceedings of the 38th Annual Meet-ing of the Association for Computational Linguistics,ACL?00, pages 302?309.Masaaki Nishino, Norihito Yasuda, Shin-ichi Minato, andMasaaki Nagata.
2015.
BDD-constrained search:A unified approach to constrained shortest path prob-lems.
In Proceedings of the 29th AAAI Conference onArtificial Intelligence, AAAI?15, pages 1219?1225.Xian Qian and Yang Liu.
2013.
Fast joint compressionand summarization via graph cuts.
In Proceedings ofthe 2013 Conference on Empirical Methods in NaturalLanguage Processing, EMNLP?13, pages 1492?1502.Kristian Woodsend and Mirella Lapata.
2010.
Automaticgeneration of story highlights.
In Proceedings of the48th Annual Meeting of the Association for Computa-tional Linguistics, ACL?10, pages 565?574.Norihito Yasuda, Masaaki Nishino, and Shin-ichi Minato.2014.
On the size of the zero-suppressed binary deci-sion diagram that represents all the subtrees in a tree.In Trends and Applications in Knowledge Discoveryand Data Mining, Lecture Notes in Computer Science,pages 504?510.471
