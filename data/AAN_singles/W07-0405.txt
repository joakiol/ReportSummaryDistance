Proceedings of SSST, NAACL-HLT 2007 / AMTA Workshop on Syntax and Structure in Statistical Translation, pages 33?40,Rochester, New York, April 2007. c?2007 Association for Computational LinguisticsBinarization, Synchronous Binarization, and Target-side Binarization?Liang HuangUniversity of Pennsylvania3330 Walnut Street, Levine HallPhiladelphia, PA 19104lhuang3@cis.upenn.eduAbstractBinarization is essential for achievingpolynomial time complexities in pars-ing and syntax-based machine transla-tion.
This paper presents a new binariza-tion scheme, target-side binarization, andcompares it with source-side and syn-chronous binarizations on both string-based and tree-based systems using syn-chronous grammars.
In particular, wedemonstrate the effectiveness of target-side binarization on a large-scale tree-to-string translation system.1 IntroductionSeveral recent syntax-based models for machinetranslation (Chiang, 2005; Galley et al, 2006) canbe seen as instances of the general framework ofsynchronous grammars and tree transducers.
In thisframework, decoding can be thought of as pars-ing problems, whose complexity is in general expo-nential in the number of nonterminals on the righthand side of a grammar rule.
To alleviate this prob-lem, one can borrow from parsing the techniqueof binarizing context-free grammars (into ChomskyNormal Form) to reduce the complexity.
With syn-chronous context-free grammars (SCFG), however,this problem becomes more complicated with theadditional dimension of target-side permutation.The simplest method of binarizing an SCFG isto binarize (left-to-right) on the source-side as iftreating it as a monolingual CFG for the source-langauge.
However, this approach does not guaran-?This work is partially supported by NSF ITR grants IIS-0428020 (while I was visiting USC/ISI) and EIA-0205456.
Ialso wish to thank Jonathan Graehl, Giorgio Satta, Hao Zhang,and the three anonymous reviewers for helpful comments.tee contiguous spans on the target-side, due to the ar-bitrary re-ordering of nonterminals between the twolanguages.
As a result, decoding with an integratedlanguage model still has an exponential complexity.Synchronous binarization (Zhang et al, 2006)solves this problem by simultaneously binarizingboth source and target-sides of a synchronous rule,making sure of contiguous spans on both sideswhenever possible.
Neglecting the small amountof non-binarizable rules, the decoding complexitywith an integrated language model becomes polyno-mial and translation quality is significantly improvedthanks to the better search.
However, this method ismore sophisticated to implement than the previousmethod and binarizability ratio decreases on freerword-order languages (Wellington et al, 2006).This paper presents a third alternative, target-side binarization, which is the symmetric version ofthe simple source-side variant mentioned above.
Wecompare it with the other two schemes in two pop-ular instantiations of MT systems based on SCFGs:the string-based systems (Chiang, 2005; Galley etal., 2006) where the input is a string to be parsedusing the source-side of the SCFG; and the tree-based systems (Liu et al, 2006; Huang et al, 2006)where the input is a parse tree and is recursivelyconverted into a target string using the SCFG as atree-transducer.
While synchronous binarization isthe best strategy for string-based systems, we showthat target-side binarization can achieve the sameperformance of synchronous binarization for tree-based systems, with much simpler implementationand 100% binarizability.2 Synchronous Grammars andBinarization SchemesIn this section, we define synchronous context-free grammars and present the three binarization33NPPPVPChinese ??English?
?NP-PPNP-PPVPcontiguousgapNPPP-VPcontiguouscontiguousPPNP-VPNP-VPgapcontiguous(a) example rule (b) source-side (c) synchronous (d) target-sideFigure 1: Illustration of the three binarization schemes, with virtual nonterminals in gray.schemes through a motivational example.A synchronous CFG (SCFG) is a context-freerewriting system for generating string pairs.
Eachrule (synchronous production) rewrites a nontermi-nal in two dimensions subject to the constraint thatthe sequence of nonterminal children on one side isa permutation of the nonterminal sequence on theother side.
Each co-indexed child nonterminal pairwill be further rewritten as a unit.
The rank of a ruleis defined as the number of its synchronous nonter-minals.
We also define the source and target projec-tions of an SCFG to be the CFGs for the source andtarget languages, respectively.For example, the following SCFG1(1)S ?
NP 1 PP 2 VP 3 , NP 1 VP 3 PP 2NP ?
Baoweier, PowellVP ?
juxing le huitan, held a meetingPP ?
yu Shalong, with Sharoncaptures the re-ordering of PP and VP betweenChinese (source) and English (target).
The source-projection of the first rule, for example, isS ?
NP PP VP.Decoding with an SCFG (e.g., translating fromChinese to English using the above grammar) can becast as a parsing problem (see Section 3 for details),in which case we need to binarize a synchronous rulewith more than two nonterminals to achieve polyno-mial time algorithms (Zhang et al, 2006).
We willnext present the three different binarization schemesusing Example 1.1An alternative notation, used by Satta and Peserico (2005),allows co-indexed nonterminals to take different symbols acrosslanguages, which is convenient in describing syntactic diver-gences (see Figure 2).2.1 Source-side BinarizationThe first and simplest scheme, source-side binariza-tion, works left-to-right on the source projection ofthe SCFG without respecting the re-orderings on thetarget-side.
So it will binarize the first rule as:(2) S ?
NP-PP VPNP-PP ?
NP PPwhich corresponds to Figure 1 (b).
Notice that thevirtual nonterminal NP-PP representing the inter-mediate symbol is discontinuous with two spans onthe target (English) side, because this binarizationscheme completely ignores the reorderings of non-terminals.
As a result, the binarized grammar, witha gap on the target-side, is no longer an SCFG, butcan be represented in the more general formalism ofMulti-Text Grammars (MTG) (Melamed, 2003):(3)(SS)???
[1, 2][1, 2, 1](NP-PP VPNP-PP (2) VP)here [1, 2, 1] denotes that on that target-side, the firstnonterminal NP-PP has two discontinuous spans,with the second nonterminal VP in the gap.Intuitively speaking, the gaps on the target-sidewill lead to exponential complexity in decoding withintegrated language models (see Section 3), as wellas synchronous parsing (Zhang et al, 2006).2.2 Synchronous BinarizationA more principled method is synchronous binariza-tion, which simultaneously binarizes both sourceand target sides, with the constraint that virtual non-terminals always have contiguous spans on bothsides.
The resulting grammar is thus another SCFG,the binary branching equivalent of the original gram-mar, which can be thought of as an extension of the34[jinyibu]1further[ jiuonzhongdongMideastweijicrisis]2 [juxing]3hold[huitan]4talk?
[hold]3 [further]1 [talks]4 [on the Mideast crisis]2?1234Chinese ??English?
?Figure 2: An example of non-binarizable rule from the hand-aligned Chinese-English data in Liu et al(2005).
The SCFG rule is VP ?
ADVP 1 PP 2 VB 3 NN 4 , VP ?
VB 3 JJ 1 NNS 4 PP 2 in the notatoinof Satta and Peserico (2005).Chomsky Normal Form in synchronous grammars.The example rule is now binarized into:(4) S ?
NP1 PP-VP 2 , NP 1 PP-VP 2PP-VP ?
PP 1 VP 2 , VP 2 PP 1which corresponds to Figure 1 (c).
This represen-tation, being contiguous on both sides, successfullyreduces the decoding complexity to a low polyno-mial and significantly improved the search quality(Zhang et al, 2006).However, this scheme has the following draw-backs.
First, synchronous binarization is not alwayspossible with an arbitrary SCFG.
Some reorder-ings, for example, the permutation (2, 4, 1, 3), isnon-binarizable.
Although according to Zhang et al(2006), the vast majority (99.7%) of rules in theirChinese-English dataset are binarizable, there do ex-ist some interesting cases that are not (see Figure 2for a real-data example).
More importantly, the ra-tio of binarizability, as expected, decreases on freerword-order languages (Wellington et al, 2006).
Sec-ond, synchronous binarization is significantly morecomplicated to implement than the straightforwardsource-side binarization.2.3 Target-side BinarizationWe now introduce a novel scheme, target-side bi-narization, which is the symmetric version of thesource-side variant.
Under this method, the target-side is always contiguous, while leaving some gapson the source-side.
The example rule is binarizedinto the following MTG form:(5)(SS)???
[1, 2, 1][1, 2](NP-VP (2) PPNP-VP PP)which corresponds to Figure 1 (d).scheme s(b) t(b)source-side 1 ?
n/2synchronous 1 1target-side ?
n/2 1Table 1: Source and target arities of the three bina-rization schemes of an SCFG rule of rank n.Although the discontinuity on the source-side inthis new scheme causes exponential complexity instring-based systems (Section 3.1), the continuousspans on the target-side will ensure polynomial com-plexity in tree-based systems (Section 3.2).Before we move on to study the effects of vari-ous binarization schemes in decoding, we need someformal machineries of discontinuities.We define the source and target arities of avirtual nonterminal V , denoted s(V ) and t(V ), tobe the number of (consecutive) spans of V on thesource and target sides, respectively.
This definitionextends to a binarization b of an SCFG rule of rankn, where arities s(b) and t(b) are defined as themaximum source and target arities over all virtualnonterminals in b, respectively.
For example, thesource and target arities of the three binarizations inFigure 1 are 1 and 2 for (b), 1 and 1 for (c), and2 and 1 for (d).
In general, the arities for the threebinarization schemes are summarized in Table 1.3 Theoretical AnalysisWe now compare the algorithmic complexities of thethree binarization schemes in a central problem ofmachine translation: decoding with an integrated n-gram language model.
Depending on the input be-ing a string or a parse-tree, we divide MT systemsbased on synchronous grammars into two broad cat-egories: string-based and tree-based.353.1 String-based ApproachesString-based approaches include both string-to-string (Chiang, 2005) and string-to-tree systems(Galley et al, 2006).2 To simplify the presentationwe will just focus on the former but the analysis alsoapplies to the latter.
We will first discuss decodingwith a pure SCFG as the translation model (hence-forth ?LM decoding), and then extend it to includean n-gram model (+LM decoding).3.1.1 Translation as ParsingThe ?LM decoder can be cast as a (monolin-gual) parser on the source language: it takes thesource-language string as input and parses it usingthe source-projection of the SCFG while buildingthe corresponding target-language sub-translationsin parallel.
For source-side and synchronous bina-rizations, since the resulting grammar has contigu-ous source spans, we can apply the CKY algorithmwhich guarantees cubic time complexity.For example, a deduction along the virtual rule inthe synchronously binarized grammar (4) is notated(PPj,k) : (w1, t1) (VPk,l) : (w2, t2)(PP-VPj,l) : (w1 + w2, t2t1) (6)where i, j, k are free indices in the source string,w1, w2 are the scores of the two antecedent items,and t1, t2 are the corresponding sub-translations.3The resulting translation t2t1 is the inverted concate-nation as specified by the target-side of the SCFGrule.The case for a source-side binarized grammar (3)is slightly more complicated than the above, becausewe have to keep track of gaps on the target side.
Forexample, we first combine NP with PP(NPi,j) : (w1, t1) (PPj,k) : (w2, t2)(NP-PPi,k) : (w1 + w2, t1 ?
t2) (7)2Our notation of X-to-Y systems is defined as follows: X de-notes the input, either a string or a tree; while Y represents theRHS structure of an individual rule: Y is string if the RHS isa flat one-level tree (as in SCFGs), and Y is tree if the RHSis multi-level as in (Galley et al, 2006).
This convention alsoapplies to tree-based approaches.3The actual system does not need to store the translationssince they can be recovered from backpointers and they are notconsidered part of the state.
We keep them here only for presen-tation reasons.NP-PPNP-PPVPthree Chinese indicesi k lEnglishtranslationst 1t 3t 2 PPNP-VPNP-VPfour Chinese indicesi j k lt 1t 2(a): Deduction (8) (b): Deduction (10)Figure 3: Illustrations of two deductions with gaps.leaving a gap (?)
on the target-side resulting item,because NP and PP are not contiguous in the En-glish ordering.
This gap is later filled in by the sub-translation t3 of VP (see also Figure 3 (a)):(NP-PPi,k) : (w1, t1 ?
t2) (VPk,l) : (w2, t3)(Si,l) : (w1 + w2, t1t3t2)(8)In both cases, there are still only three free indiceson the source-side, so the complexity remains cubic.The gaps on the target-side do not require any ex-tra computation in the current ?LM setting, but aswe shall see shortly below, will lead to exponentialcomplexity when integrating a language model.For a target-side binarized grammar as in (5),however, the source-side spans are discontinuouswhere CKY can not apply, and we have to enumeratemore free indices on the source side.
For example,the first deduction(NPi,j) : (w1, t1) (VPk,l) : (w2, t2)(NP-VPi,j?k,l) : (w1 + w2, t1t2) (9)leaves a gap in the source-side span of the resultingitem, which is later filled in when the item is com-bined with a PP (see also Figure 3 (b)):(NP-VPi,j?k,l) : (w1, t1) (PPj,k) : (w2, t2)(Si,l) : (w1 + w2, t1t2)(10)Both of the above deductions have four free in-dices, and thus of complexity O(|w|4) instead of cu-bic in the length of the input string w.More generally, the complexity of a binarizationscheme depends on its source arity.
In the worst-case, a binarized grammar with a source arity of swill require at most (2s+1) free indices in a deduc-tion, because otherwise if one rule needs (2s + 2)36indices, then there are s+1 spans, which contradictsthe definition of arity (Huang et al, 2005).4These deductive systems represent the searchspace of decoding without a language model.
Whenone is instantiated for a particular input string, it de-fines a set of derivations, called a forest, representedin a compact structure that has a structure of a hyper-graph.
Accordingly we call items like (PP1,3) nodesin the forest, and an instantiated deduction like(PP-VP1,6) ?
(PP1,3)(VP3,6)we call a hyperedge that connects one or more an-tecedent nodes to a consequent node.
In this rep-resentation, the time complexity of ?LM decoding,which we refer to as source-side complexity, is pro-portional to the size of the forest F , i.e., the num-ber of hyperedges (instantiated deductions) in F .
Tosummarize, the source-side complexity for a bina-rized grammar of source arity s is|F | = O(|w|2s+1).3.1.2 Adding a Language ModelTo integrate with a bigram language model, wecan use the dynamic-programming algorithm of Wu(1996), which we may think of as proceeding intwo passes.
The first pass is as above, and the sec-ond pass traverses the first-pass forest, assigning toeach node v a set of augmented items, which we call+LM items, of the form (va?b), where a and b aretarget words and ?
is a placeholder symbol for anelided part of a target-language string.
This item in-dicates that a possible translation of the part of theinput spanned by v is a target string that starts witha and ends with b.Here is an example deduction in the syn-chronously binarized grammar (4), for a +LM itemfor the node (PP-VP1,6) based on the ?LM Deduc-tion (6):(PP with ?
Sharon1,3 ): (w1, t1) (VP held ?
talk3,6 ): (w2, t2)(PP-VP held ?
Sharon1,6 ): (w?, t2t1)(11)4Actually this is true only if in any binarization scheme,a non-contiguous item is always combined with a contiguousitem.
We define both source and target binarizations to be in-cremental (i.e., left-to-right or right-to-left), so this assumptiontrivially holds.
More general binarization schemes are possibleto have even higher complexities, but also possible to achievebetter complexities.
Full discussion is left for a separate paper.where w?
= w1 + w2 ?
logPlm(with | talk) isthe score of the resulting +LM item: the sum ofthe scores of the antecedent items, plus a combi-nation cost which is the negative log probability ofthe bigrams formed in combining adjacent boundarywords of antecedents.Now that we keep track of target-side boundarywords, an additional complexity, called target-sidecomplexity, is introduced.
In Deduction (11), fourtarget words are enumerated, and each +LM itemstores two boundary words; this is also true in gen-eral for synchronous and target-side binarized gram-mars where we always combine two consecutivetarget strings in a deduction.
More generally, thisscheme can be easily extended to work with an m-gram model (Chiang, 2007) where m is usually ?
3(trigram or higher) in practice.
The target-side com-plexity for this case is thusO(|V |4(m?1))where V is the target language vocabulary.
This isbecause each constituent must store its initial andfinal (m ?
1)-grams, which yields four (m ?
1)-grams in a binary combination.
In practice, it is oftenassumed that there are only a constant number oftranslations for each input word, which reduces thiscomplexity into O(|w|4(m?1)).However, for source-side binarization whichleaves gaps on the target-side, the situation becomesmore complicated.
Consider Deduction (8), wherethe sub-translation for the virtual node NP-PP isgapped (t1?t2).
Now if we integrate a bigram modelbased on that deduction, we have to maintain theboundary words of both t1 and t2 in the +LM nodeof NP-PP.
Together with the boundary words in nodeVP, there are a total of six target words to enumeratefor this +LM deduction:(NP-PPa?b?e?fi,k ) : (w1, t1 ?
t2) (VPc?dk,l ) : (w2, t3)(Sa?fi,l ) : (w?, t1t3t2)(12)where w?
= w1 + w2 ?
logPlm(c | b)Plm(e | d).With an analysis similar to that of the source-side,we state that, for a binarized grammar with targetarity t, the target-side complexity, denoted T , isT = O(|w|2(t+1)(m?1))37scheme string-based tree-basedsource-side |w|3+2(t+1)(m?1) |w|1+2(t+1)(m?1)synchronous |w|3+4(m?1) |w|1+4(m?1)target-side |w|(2s+1)+4(m?1) |w|1+4(m?1)Table 2: Worst-case decoding complexities of thethree binarization schemes in the two approaches(excluding the O(|w|3) time for source-side parsingin tree-based approaches).because in the worst-case, there are t + 1 spans in-volved in a +LM deduction (t of them from one vir-tual antecedent and the other one non-virtual), andfor each span, there are m ?
1 target words to enu-merate at both left and right boundaries, giving atotal of 2(t + 1)(m ?
1) words in this deduction.We now conclude that, in a string-based system,the combined complexities for a binarized grammarwith source arity s and target arity t isO(|F |T ) = O(|w|(2s+1)+2(t+1)(m?1)).The results for the three specific binarizationschemes are summarized in Table 2.
Although bothsource-side and target-side binarizations lead to ex-ponential complexities, it is likely that languagemodel combinations (target-side complexity) dom-inate the computation, since m is larger than 2 inpractice.
In this sense, target-side binarization is stillpreferable to source-side binarization.It is also worth noting that with the hook trickof Huang et al (2005), the target-side complex-ity can be reduced to O(|w|(2t+1)(m?1)), makingit more analogous to its source-side counterpart:if we consider the decoding problem as intersect-ing the SCFG with a source-side DFA which has|S| = |w|+1 states, and a target-side DFA which has|T | = O(|w|m?1) states, then the intersected gram-mar has a parsing complexity of O(|S|2s+1|T |2t+1),which is symmetric from both sides.3.2 Tree-based ApproachesThe tree-based approaches include the tree-to-string(also called syntax-directed) systems (Liu et al,2006; Huang et al, 2006).
This approach takesa source-language parse tree, instead of the plainstring, as input, and tries to find the best derivationthat recursively rewrites the input tree into a target...S?
: t1t3t2NP?
?1 : t1...PP?
?2 : t2...VP?
?3 : t3...Figure 4: Illustration of tree-to-string deduction.string, using the SCFG as a tree-transducer.
In thissetting, the ?LM decoding phase is a tree-parsingproblem (Eisner, 2003) which aims to cover the en-tire tree by a set of rules.
For example, a deductionof the first rule in Example 1 would be:(NP?
?1) : (w1, t1) (PP?
?2) : (w2, t2) (VP?
?3) : (w3, t3)(S?)
: (w1 + w2 + w3, t1t3t2)(13)where ?
and ?
?
i(i = 1, 2, 3) are tree addresses(Shieber et al, 1995), with ?
?
i being the ith childof ?
(the address of the root node is ?).
The nonter-minal labels at these tree nodes must match those inthe SCFG rule, e.g., the input tree must have a PP atnode ?
?
2.The semantics of this deduction is the following:if the label of the current node in the input tree isS, and its three children are labeled NP, PP, and VP,with corresponding sub-translations t1, t2, and t3,then a possible translation for the current node S ist1t3t2 (see Figure 4).
An alternative, top-down ver-sion of this bottom-up deductive system is, at eachnode, try all SCFG rules that pattern-match the cur-rent subtree, and recursively solve sub-problems in-dicated by the variables, i.e., synchronous nontermi-nals, of the matching rule (Huang et al, 2006).With the input tree completely given, this settinghas some fundamental differences from its string-based counterpart.
First, we do not need to bina-rize the SCFG grammar before ?LM decoding.
Infact, it will be much harder to do the tree-parsing(pattern-matching) with a binarized grammar.
Sec-ond, regardless of the number of nonterminals in arule, building the ?LM forest always costs time lin-ear in the size of the input tree (times a grammarconstant, see (Huang et al, 2006, Sec.
5.1) for de-tails), which is in turn linear in the length of the inputstring.
So we have:O(|F |) = O(|w|).38This fast ?LM decoding is a major advantage oftree-based approaches.Now in +LM decoding, we still need binariza-tion of the hyperedges, as opposed to rules, in theforest, but the analysis is almost identical to that ofstring-based approach.
For example, the tree-basedversion of Deduction (12) for source-side binariza-tion is now notated(NP??1-PP?
?2a?b?e?f ) : (w1, t1 ?
t2) (VP?
?3c?d) : (w2, t3)(S?a?f ) : (w?, t1t3t2)(14)In general, the target-side complexity of a bina-rized grammar with target arity t is still T =O(|w|2(t+1)(m?1)) and the combined decoding com-plexity of the tree-based approach isO(|F |T ) = O(|w|1+2(t+1)(m?1)).Table 2 shows that in this tree-based setting,target-side binarization has exactly the same perfor-mance with synchronous binarization while beingmuch simpler to implement and does not have theproblem of non-binarizability.
The fact that simplebinarization works (at least) equally well, which isnot possible in string-based systems, is another ad-vantage of the tree-based approaches.4 ExperimentsSection 3 shows that target-side binarizationachieves the same polynomial decoding complexityas the more sophisticated synchronous binarizationin the tree-based systems.
We now empirically com-pare target-side binarization with an even simplervariant, on-the-fly generation, where the only dif-ference is that the latter does target-side left-to-rightbinarization during +LM decoding on a hyperedge-per-hyperedge basis, without sharing common vir-tual nonterminals across hyperedges, while the for-mer binarizes the whole ?LM forest before the+LM decoding.Our experiments are on English-to-Chinese trans-lation in the tree-to-string system of Huang et al(2006), which takes a source-language parse tree asinput and tries to recursively convert it to a target-language string according to transfer rules in a syn-chronous grammar (Galley et al, 2006).
For in-stance, the following rule01002003004005006005  10  15  20  25  30  35  40number of nodesintheforestlength of the input sentenceoriginal foresttarget-side binarizationon-the-fly generationFigure 5: Number of nodes in the forests.
Inputsentences are grouped into bins according to theirlengths (5-9, 10-14, 15-20, etc.
).VPVBDwasVP-Cx1:VBN PPINbyx2:NP-C?
bei x2 x1translates an English passive construction into Chi-nese.
Although the rules are actually in a syn-chronous tree-substitution grammar (STSG) insteadof an SCFG, its derivation structure is still a hy-pergraph and all the analysis in Section 3.2 stillapplies.
This system performs slightly better thanthe state-of-the-art phrase-based system Pharaoh(Koehn, 2004) on English to Chinese translation.
Avery similar system for the reverse direction is de-scribed in (Liu et al, 2006).Our data preparation follows (Huang et al, 2006):the training data is a parallel corpus of 28.3M wordson the English side, from which we extracted 24.7Mtree-to-string rules using the algorithm of (Galley etal., 2006), and trained a Chinese trigram model onthe Chinese side.
We test our methods on the sametest-set as in (Huang et al, 2006) which is a 140 sen-tence subset of NIST 2003 MT evaluation with 9?36words on the English side.
The weights for the log-linear model is tuned on a separate development set.Figure 5 compares the number of nodes in the bi-narized forests against the original forest.
On-the-flygeneration essentially works on a larger forest with392525.225.425.625.82626.25  10  15  20020000400006000080000100000120000BLEUscoreaverage#of +LMitemsper sentencebeam sizeBLEU scoreon-the-fly generationtarget-side binarizationFigure 6: Decoding speed and BLEU scores underbeam search.duplicate nodes due to the lack of sharing, which ison average 1.85 times bigger than the target-side bi-narized forest.
This difference is also reflected in thedecoding speed, which is illustrated in Figure 6 un-der various beam settings and where the amount ofcomputation is measured by the number of +LMitems generated.
At each individual beam setting,the two methods produce exactly the same set oftranslations (i.e., there is no relative search error),but the target-side binarization is consistently 1.3times faster thanks to the sharing.
In terms of transla-tion quality, the final BLEU score at the largest beamsetting is 0.2614, significantly higher than Pharaoh?s0.2354 as reported in (Huang et al, 2006).5 ConclusionThis paper introduces a simple binarization scheme,target-side binarization, and presents a systematicstudy of the theoretical properties of the three bina-rization schemes in both string-based and tree-basedsystems using syncrhonous grammars.
In particular,we show that target-side binarization achieves thesame polynomial complexity as synchronous bina-rization while being much simpler to implement anduniversally applicable to arbitrary SCFGs.
We alsodemonstrate the empirical effectiveness of this newscheme on a large-scale tree-to-string system.ReferencesDavid Chiang.
2005.
A hierarchical phrase-based modelfor statistical machine translation.
In Proceedings ofACL.David Chiang.
2007.
Hierarchical phrase-based trans-lation.
In Computational Linguistics, volume 33.
Toappear.Jason Eisner.
2003.
Learning non-isomorphic tree map-pings for machine translation.
In Proceedings of ACL(poster), pages 205?208.Michel Galley, Jonathan Graehl, Kevin Knight, DanielMarcu, Steve DeNeefe, Wei Wang, and IgnacioThayer.
2006.
Scalable inference and training ofcontext-rich syntactic translation models.
In Proceed-ings of COLING-ACL.Liang Huang, Hao Zhang, and Daniel Gildea.
2005.
Ma-chine translation as lexicalized parsing with hooks.
InProceedings of the Ninth International Workshop onParsing Technologies (IWPT-2005).Liang Huang, Kevin Knight, and Aravind Joshi.
2006.Statistical syntax-directed translation with extendeddomain of locality.
In Proc.
of AMTA.Philipp Koehn.
2004.
Pharaoh: a beam search decoderfor phrase-based statistical machine translation mod-els.
In Proceedings of AMTA, pages 115?124.Yang Liu, Qun Liu, and Shouxun Lin.
2005.
Log-linearmodels for word alignment.
In Proceedings of ACL.Yang Liu, Qun Liu, and Shouxun Lin.
2006.
Tree-to-string alignment template for statistical machine trans-lation.
In Proceedings of COLING-ACL.I.
Dan Melamed.
2003.
Multitext grammars and syn-chronous parsers.
In Proceedings of NAACL.Giorgio Satta and Enoch Peserico.
2005.
Some computa-tional complexity results for synchronous context-freegrammars.
In Proc.
of HLT-EMNLP 2005.Stuart Shieber, Yves Schabes, and Fernando Pereira.1995.
Principles and implementation of deductiveparsing.
Journal of Logic Programming, 24:3?36.Benjamin Wellington, Sonjia Waxmonsky, and I. DanMelamed.
2006.
Empirical lower bounds on the com-plexity of translational equivalence.
In Proceedings ofCOLING-ACL.Dekai Wu.
1996.
A polynomial-time algorithm for sta-tistical machine translation.
In Proceedings of ACL.Hao Zhang, Liang Huang, Daniel Gildea, and KevinKnight.
2006.
Synchronous binarization for machinetranslation.
In Proc.
of HLT-NAACL.40
