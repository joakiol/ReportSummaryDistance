XTAG System - A Wide Coverage Grammar for EnglishChristy Doran, Dania Egedi, Beth Ann Hockey, B. Srinivas and Martin Zaidel*Institute for Research in Cognitive ScienceUniversity of PennsylvaniaPhiladelphia, PA 19104-6228, USA{cdoran, egedi, beth, srini, zaidel} @linc.cis.upenn.eduAbstractThis paper presents the XTAG system, agrammar de-velopment tool based on the Tree Adjoining Grammar(TAG) formalism that includes a wide-coverage syn-tactic grammar for English.
The various componentsof the system are discussed and preliminary evalua-tion results from the parsing of various corpora aregiven.
Results from the comparison of X3AG againstthe IBM statistical parser and the Alvey Natural Lan-guage Tool parser are also given.1 INTRODUCTIONXTAG is a large on-going project o develop a wide-coverage grammar for English, based on the l,exi-calized Tree Adjoining Grammar (I3"AG) tbrmalism.LTAG is a lexicalized mildly-context sensitive treerewriting system \[Joshi et al, 1975; Schabes, 1990\]that is closely related to Dependency Grammars andCategorial Grammars.
Elementary trees in 13~AGprovicle a larger domain of locality over which syn-tactic and semantic (predicate-argument) constraintsare specified.
XTAG also serves as an LTAG gram-mar development system consisting of a predictiveleft-to-right parser, an X-window interface, a roofphological analyzer, and a part-of-speech tagger (alsoreferred to as simply 'tagger').2 SYSTEM DESCRIPT IONFigure 1 shows the overall llow of the system whenparsing a sentence.
The input sentence is submit-ted to the Morphological Analyzer and the 3hgger.The morphological analyzer etrieves the morpho-logical information for each individual word fromthe morphological database.
This output is tilteredin the P.O.S Blender using the output of the trigramtagger to reduce the part-of-speech ambiguity of the*currently at BBN, Cambridge, MA, USAInput Sentence~ 'ph  Analy~ l_ 'l'~ger ,,___ _ ~\ [  p.0.S Blender ~< 1?
.
.
.
.
.
.
.
i i __/ i  ~-1%~ TteeSdection , ,~NynOB~.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Derivation StructureFigure I : Overview of XTAG systemwords.
The sentence, now annotated with part-of-speech tags and morphological information for eachword, is input to the Parser, which consults the syn-tactic database and tree database to retrieve the appro-priate tree structures for each lexical item.
A varietyo\[' heuristics arc used to reduce the number of treesselected.
The parsertitan composes the structures toobtain the parse(s) of the sentence.2.1 Morphological AnalyzerThe morphology database \[Karp et al, 19921 wasoriginally exlracted from 1979 edition of the CollinsEnglish Dictionary and Oxford Adwmced Learner'sl)ictionary of Current English, and then cleaned upand auglnentcd by hand.
It consists of approximately317,000 inltected items, along with their root formsand intlectional intbrmalion (such as case, num-922bet, tense).
Thirteen parts of speech are difleren-tiated: Noun, Proper Noun, Pronoun, Verb, VerbParticle, Adverb, Adjective, Preposition, Comple-mentizer, Determiner, Conjunction, lntmjection, andNoun/Verb Contraction.
Notms and Verhs are thelargest categories, with approximately 213,000 and46,500 inflected forms, respectively.
'\['he access timefor a given inflected entry is 0.6 msec.2.2 Part -of -Speech TaggerA trigram part-of-speech tagger \[Church, 19881,trained on the Wall Street Jotlrilal Corpus, is incor-porated in XTAG.
The trigraln tagger has been ex-tended to output he N-best parts-of-speech sequences\[Soong and Huang, 1990\].
XTAG uses this infermat|on Io reduce the number of specious parses byfiltering the possible parts-of-speech provided by themorphological nalyzer for each word.
The taggerdecreases tile time to parse a sentence by an averageof 93%.2.3 ParserTim system uses an Ea,'ley-style parser which hasbeen extended to handle feature structures associatedwith trees \[Schabes, 19901.
The parser uses a generaltwo-pass parsing s|rategy for 'lexicalized' gramlnarsISchabes, 19881.
In the tree-selection pass, the parseruses tile syntactic database entry \[or each lexical itemin the sentence to select a set of elementary struc-tures from the tree database.
The tree-grafting passcomposes the selected trees using substitution a d ad-junct|on operations toobtain the parse of the sentence.The output of tile parser for tile sentence I had a mapyesterday is illustrated in l;igure 2.
The parse tree Irepresents he surface constituent s ructure, while thederivation tree represents he deriwttion history oftile parse.
The nodes of the derivation tree are the treenames anchored by tile lexical items.
The composi-tion operation is indicated by the nature of Ihe arcs; adashed line is used for substitution a d a bold line foradjunct|on.
The number beside ach tree name is theaddress of the node at which the operation took place.Tile deriwltion tree can also be interpreted as a de-pendency graph with unlabeled arcs hetween wordsof the sentence.lleuristics that take advantage of 12FAGs have beenimplemented to improve the performance of tileparser.
For instance, the span of the tree and theposition of the anchor in the tree are used to weed outunsuitable trees in the first pass of the parser.
Statisti-cal information about he usage frequency of the treesI liach node of Ihe parse tree has a ligature sh'uchlre, not shownhere, associaled with it.SrNP Vl'rN VP  AdNAI V NP yesterdayhad DeltP NI I1) mapIaP~.ll'Se T reenxOVnxl\[hadlo.NXN\[I\] (1) l~vxARB\[yesterdayl (2) r*NXdxNImap\] (2.2)Ii icd)XDlal (1)l)erivation TreeFigure 2: Output structures from the Parserhas been acquired by parsing corpora.
This informa-tion has been compiled into a statistical database (tilel,ex Prob DB) that is used by the parser.
Thesemethods peed the runt|me by approxmmtely 87%.J 2.3.1 lleuristics for Ranking the 1 arsesThe parser generates the parses in a rank order.
Thisranking is determined using a combination ofheuris-tics, which are expressed as structural preferences forderiwttion, e..g. attachment si es of adjuncts, right- vs.left- branching structures, topicalized sentences, etc.Similar hem'istics have been used for other parsers.See recent work by IHobbs and Bear, 199411, \[Mc-Cord, 19931,and \[Nagao, 1994t.A partial ist el ~ the heuristics used in XTAG fol-lows:1.
Prefer argument positions to adjunct positions(here, this amotmts Io preferring fewer adjunc-t|on operations).2.
For PPs other Ihan o/', attach to nearest site thatis llOt a proper noun.3.
Prefer right-branching structtu'e for sequences ofadiectives adverbs and PPs.9234.5.Prefer left-branching structure for sequences ofnorms.Prefer high attachment (wide-scope) for a modi-tier and a sequence of modifees of the same type(i.e.
a PP following or preceding a coordinateNP, an adjective or determiner preceding a co-ordinate NP or sequence of Ns, an N precedingcoordinate Ns).These rankings are used to control the number ofsentences passed on to further levels of processing.In applications emphasizing speed, only the high-est ranked parse will be considered, in applicationsemphasizing accuracy, the top N parses can be con-sidered.2.3.2 Syntactic DatabaseThe syntactic database associates lexical items withthe appropriate trees and tree families based on se-lectional information.
The syntactic database entrieswere originally extracted from the Oxford AdvancedLearner's Dictionary and Oxford Dictionary for Con-temporary Idiomatic English; and then modified andaugmented by hand.
There are more than 37,000syntactic database ntries.
Selected entries from thisdatabase are shown in Table 1.
Each syntactic entryconsists of an INDEX feld, the uninflected form underwhich the entry is compiled in the database, an ENTRYfield, which contains all of the lexical items that willanchor the associated tree(s), a pos field, which givesthe part-of-speech for the lexical item(s) in the ENTRYfeld, and then either (but not both) a TREES or FAMfield.
The TREES field indicates a list of individualtrees to be associated with the entry, while the FAMfield indicates a list of tree families.
A tree family,which corresponds toa subcategorization frame (seesection 2.3.3), may contain a number of trees.
Asyntactic entry may also contain a list of feature tem-plates (Fs) which expand out to feature quations tobe placed in the specified tree(s).
Any number of EXfelds may be provided for example sentences.
Notethat lexical items may have more than one entry andmay select he same tree more than once, using dif-ferent features to capture lexical idiosyncrasies (e.g.have).2.3.3 Tree DatabaseTrees in the English \[;FAG framework fall into twoconceptual c asses.
The smaller class consists o1' indi-vidual trees such as trees (a), (d), and (e) in Figure 3.These trees are generally anchored by non-verbal lex-ical items.
The larger class consists of trees that areINDEX: have/26ENTRY: havePOS: VTREES: ~VvxFS: #VPr_ind, #VPr_past, #VPr_perfect+#VP_ppart, #VP_pass-EX: he had died; we had diedINDEX: have/50ENTRY: havePOS: VTREES: flVvxFS: #VP_infEX: John has to go to the store.INDEX: have/69ENTRY: NP0 have NP1POS: NP0 V NPIFAM: Tnx0Vnx IFS: #TRANS+EX: John has a problem.INDEX: map/I\]gNTRY: NP0 map out NP1POS: NP0 V PL NP1FAM: Tnx0VplnxlINDEX: map/3ENTRY: mapPOS: NTREES: {rN, (~NXdxN,/iNnFS: #N_wh-, #N_.refl-INDEX: map/4ENTRY: mapPOS: NTREES: (~NXNFS: #N..wh-, #N_refl-, #N_plur"Fable 1 : Selected Syntactic Database Entriesgrouped into tree families.
These tree families rep-resent subcategorization frmnes; the trees in a treefamily would be related to each other transforma-tionally in a movement-based approach.
Trees 3(b)and 3(c) are members of two distinct ree families.As illustrated by trees 3(d) and 3(e), each node of atree is annotated with a set of features whose wtluesmay be specified within the tree or may be derivedfrom the syntactic database.
There are 385 trees thatcompose 40 tree families, along with 62 individuallyselected trees in the tree database.924NP(a)N t ?NP0$ VPVO NP /$(b)~rNI'(~I, VPV0 I'1.0 NPI$(c)NP \[ras .
.
.
.
.
.
.
.
/ace\]line .
* <3>\]Igl' : <2>\]DeII'.I.
\[ag,'\[wh : <1>: <2> \[\]\[\] NO \[:::::~ :<;3>> \[!\[\]V)w', \[\]Ii I ellSe : <2> \[nlode : <3> \[ISSJ~lI-CllSe i <4> Imrl;ect : <5> jIf , .
:  <,> \[\] w,*  \ [ .
, , , .
t~t  : <s.-- \[\] t .
.
.
.
.
.
.
2> \[1 \[ NA I13 ,nod,~ : <3> \[\] I ~ssig,,-case : <4> \[\]1 \[\](d) (c)Figure 3: Natnple trees frolll the Tree 1)atabase2.3 .4  Statistics DatabaseThe statistics database contains trec tmigram frequen-cies which have been collected by parsing lhe WallStreet Jourllal, the IBM manttal, and the ATIS corpttsusing the XTAG English grammar.
The parser, aug-mented with the statistics database \[Joshi and Srini-vas, 1994\], assigns each word of the input sentencethe top three inost frequently used trees given thepart-of-speech o1' the word.
On failure the parserretries using all the trees suggested by the syntacticdatabase liar each word.
The augmented parser hasbeen observed to have a success rate of 50% withoutretries.2.4 X - In ter faceXTAG provides a graphical interface for manipulat-ing TAGs.
The interface offers the following:Menu-based facility for creating and modifyingtree liles and loading grammar files.User controlled parser parameters, including theparsing of categories (S, embedded S, NP, l)etP),and the use of the tagger (on/o flTrctry on failure),Storage/,etriewfl facilities for elementary andt)arsed hces as text liles.The production of postscript files correspondingto elementary and parsed trees.Graphical displays of trec and feature data struc-tures, including a scroll 'web' for large treestructures.Mouse-based tree editor for crca|ing and modi-fying trees and feature shuctures.Hand combination of trees by adjunction or sub-stitution for use in diagnosing rallunar prob-lems.Figure 4 shows tile X window interface after anumber of sentences have becll pat'sed.925Exits Bttffers Oranmuar Parsers Parsingderived-tree-889Bill w'oJttod to go to Washh~oaderived- tree- 140368derived- tree- 140369derived- tree- 140370I eoul~t't understmul himderived- tree- 140449Go to your roomderived- tree- 140420derlved-tree-140621derived-tree- 140622derived- tree- 140763derived- tree- 140764derived- tree-140768derived- tt~-140766parsers in the same class as XqAG.
Although XTAGis being extended to handle sentence fragments, theyare not included at present, and are thereby not re-flected in the data in Table 2.
Statistical informationti'om the parsed corpora described in Section 2.3.4 ispresently used only for' speeding the parser but not totune the grammar to parse any specilic corpus.
Notethen, thai the data below does not involve any corpustraining.CorpusWSJIBM ManualATISnts~Av.
# of% Parsed parses/sent39.09% 7.5375.42% 6.1474.42% 6.0Table 2: Performance of XTAG on various corporaFigure 4: XTAG Interface3 ENGLISH GRAMMARThe morphology, syntactic, and tree databases to-gether comprise the English grammar.
Lexical itemsnot in the databases are handled by default mecha-nisms.
The range of syntactic phenomena that canbe handled is large and includes auxiliaries (includ-ing inversion), copula, raising and small clause con-structions, topicalization, relative clauses, infinitives,gerunds, passives, adjuncts, it-clefts, wh-clefts, PROconstructions, noun-noun modifications, extraposi-tion, determiner phrases, genitives, negation, noun-verb contractions and imperatives.
Analyses for sen-tential adjuncts and time NP adverbials are currentlybeing implemented.
The combination of large scalelexicons and wide phenomena coverage result in arobust system.4 CORPUS PARSING AND EVALU-ATIONXTAG has recently been used to parse the Wall StreetJournal 2, IBM manual, and ATIS corpora s a meansof evaluating the coverage and correctness ofXTAGparses.
For this evaluation, a sentence is consid-ered to have parsed correctly if XTAG producesparse trees.
Verifying the presence of the correctparse among the parses generated is done manuallyat present.
Table 2 shows the preliminary results.
Wewill present more complete and rigorous results by thetime of the conference and compare them with other2Sentences of length <= 15 words4.1 Comparison with IBM ParserA more detailed experiment tomeasure the crossingbracket accuracy of the XTAG-parsed IBM-manualsentences has been performed.
Of the 1600 IBMsentences that have been parsed (those available fromthe Penn Treebank \[Marcus et al, 19931), only 67overlapped with the IBM-manual treebank that wasbracketed by University of Lancaster.
3 The XTAG-parses for these 67 sentences were compared 4 withthe Lancaster IBM-manual treebank.Table 3 shows the results obtained in this experi-ment.
It also shows the crossing bracket accuracy ofthe latest IBM statistical parser \[Jelinek el al., 1994\]on the same genre of sentences.
Recall is a measureof the number of bracketed constituents he systemgot right divided by the number of constituents inthe corresponding Treebank sentences.
Precision isthe number of bracketed constituents the system gotright divided by the number of bracketed constituentsin the system's parse.Based on the present data, we believe our" resultswill be consistent for the complete XTAO-parsedIBM corpus; we plan to evaluate the XTAG parsesagainst the Penn Treebank.
In addition, we are pars-ing the Lancaster sentences, and adding those to theXTAG IBM corpus.While the crossing-brackets measure is useful forcomparing the output of different parsers, we believethat it is a somewhat inadequate method for" evaluat-ing a parser like XTAG for" two main reasons.
First,3The treebank was obtained through Salim Roukos(roukos@watson.ibm.com) at IBM.~We used the parseval program written by Phil llarison(phil @atc.boeing.com).926Sysl:emX'A'A%IBM Stat.parsert  !
"am-k-?ts l-- 1 11000 86.2% Nol | Not I_ \[ Ava Ja?k, I AyailabloTable 3: Performailco O\[ XTAG on II}Mqnalnlal sen~fencestile parse generated by the XTAG system is nnichricher in its representation f the internal structure ofcertain phrases thari those present in manually cre-ated treebanks.
Even though the Lancaster treebankis 1nero detailed in terins of bracketing than the PemiTreebank, it is not complete in its bracketing of theinternal structure of notln phlases.
As a result oFcom-paring the XTAG parse with a skeletal representation,the precision score is misleadingly ow for the XTAGsystem.a seCol ld i'eaSOll tliat lhe crossing brackcl I l leaSlll 'eis inadequate for ewlhiafing XTA(I  is thai the pri-iriary strtlcturo in XTAG is the doriwition tl'oo \['rOlllwhicll the bracketed hee is deriwtd.
Two identicalbracketings for a sentellCO Ci\[ll \[laVe coinpletely tlil:-forent deriwition trees.
A iliore direcl ilieasuro oF thetlorlornlanco il' file XTAG parser would evahiale thederiwition structtlre, which captures the dependenciesbetween word;;.4.2 Coi l ipar isOl l  with A lveyWe also colnpared the XTt\G parser to the AlveyNal:tlral kailgtlage Tools (ANI ;l') t)alser, and louildthat the two perfornled coniparably.
We parsed the solof I~DOCI'2 Noltn Pluases presented in Appendix l:l ofthe teciinical report IC, arroll, 1903 \], using Iho XTAGparser.
The lechnical report presenls the ranking oftile correct parse and also gives the Ioial iillillber ofdoriwitions for each liOtill phrase.
In this experhnenl,we have conlparod lhe total nuinber o\[' doriwliionsobtained |'rent X'I'A(I with lhai oblainod front theANUF parser.Table 4 sulnlnarizos the results of lhis cxperhlleilt.A iolal of 143 lloun i)luasos were parsed.
The NPswhicll did nol have a correct parse in the top lhrooderivations for tile ANLT parser were considered asfaihlres for AN\[ \ ] ' .
Tile maxinitlnl and average iluni-her of derivations cohnnns show Ihe highesl and lheaverage lillnlbc;r o\[ derivations produced for tile NPsthat tiave a correct derivation hi the top tinco deriwi-tlons, l:or tile XTAG systeiii, porloriilallce rcsullswith alid without ihe P()S lagger are siR)wit.
55BcCatlSt?
tilt?
NPs {11o, eli {ivol'~l~O, silorit',f Ihall ihc.'
St?lltcnt?oson which il was lrahi~;d, the perforlnanco of Iho POS la~ggt?r issyswni 7iparsed % parsedANi : r i 'a rmr- ;  71 127-M Si~.Sl%X'IAG with I <,7 1 65.
(/3%XTAG wilhout / 127l \ [ -  86.7i%_ !~os j~ i~ , L _ 2v ,x T xu I32 1 4.
7 d28 \[ 3.45 /Table 4: Conlparison of XTAG and ANIfI" ParserIt would be interesting lo see if the two systemsperfornied similarly on a wider range of dala.
InICarroll, 1993 \], only tile IA)OCE NPs are annotatedwith tile nunlber of deriwltions; we are interested ingetting nlore data annolated with Ihis inforimition, inorder to lllake further conlparisons.5 COMPUTER PI ,ATFORMXTAG was developed Oll the Still SI-'ARC station so-ties, and has been tested on the Still 4 and l ip BOILCATs series 9000.
It is awlihlble through allonymotlSflp, and requires 20MB of space.
Please send nlail toxtag-requesl(,~linc.cis.upenn.edu for I'tp instructionsor inore hllormaliOll.
XTAG Fequh'es lhe followingsollware to rtll/:u k niachiile runnhlg UNIX and X t IR4.
Prt'viousreleases o\[ X will ilol work.
X1 tR4 is freesoftware available \[rolli MIT.Ii A COllllllOll l,isp conipiler which supports tilelatest deliniiit)n of Ct)llllllOn I,isp (Steele's (701n-men Lisp, second edition).
XTAG has beenlesled wiih Lucid Commoli l,is I) 4.0 and Alle-gro 4.0.1.ii (\]l,X versioll 4 or hi.gher.
C\],X is the lisp etluiv.alent to tile Xlib package wrilten in C.?
Mark Kalllrowilz's l,isp \[Jlilities fronl CMIJ:logical-pathnalnes and dolsystenl.The latest version o1' CLX (RS.0) and tile CMUl,isp Utilities are provided in our flp directory foryour convenience, ltowevcr, we ask that you refer tothe approl~riate source for updates.The nlorpllology database colnponentl Kar l) el al.,1992 I, no longer under Iicenshlg restrictions, is avail-able as a separate syslolll frolil the XTA( i  system.
Igphislrtiotioils alld iilore iiifornlatiOll can bc obtahled byinailing requosls 1o lcx-request(a)lhlc.cis.upenn.odu.signilit?antly degraded.
\[:or this i'oflSOll, the table contains illJi)r-lliatioil abotlt lilt?
pc:rlorlliant?t?
of XTA( I  both with and wilhoutIhe tagger.927References\]Carroll, 199311 Carroll, J.
(1993).
PracticalUnification-based Parsing of Natural Lan-guage.
University of Cambridge, ComputerLaboratory, Cambridge, England.\[Church, 1988\] Church., K. (1988).
A StochasticParts Program and Noun Phrase Parser for Unre-stricted Text.
In 2nd Applied Natural xmguageProcessing ConJerence.IHobbs and Bear, 199411 Hobbs, J. and Bear, J.(1994).
Two principles of parse preference.
InCurrent Issues in Natural Language Process-ing: In Honour of Don Walker.
Giardini withKluwer.IJelinek et al, 199411 Jelinek, E, Lafferty, J., Mager-man, D., Mercel, R., Ratnaparkhi, A., andRoukos, S. (1994).
Decision tree parsing usinga hidden derivation model.
ARPA Workshop onHuman Language Technology, pages 260-265.\[Joshi et al, 197511 Joshi, A.J., Levy, L., and Taka-hashi, M. (1975).
T1ee adjunct grammars.
InJournal of Computer and System Sciences.\[Joshi and Srinivas, 1994\] Joshi, A.J.
and Srinivas,B.
(1994).
Disambiguation f Super Parts ofSpeech (or Suptertags): Almost Parsing.
InProceedings of the 15 ~/~ International Confer-ence on Computational Linguistics (COLING'92), Kyoto, Japan, August.\[Karp et al, 1992\] Kaq), I)., Schabes, Y., Zaidel, M.,and Egedi, 1).
(I 992).
A Freely Available WideCoverage Morphological Analyzer for English.In Proceedings of the 15 t/~ hzternational Confer-ence on Computational Linguistics (COLING'92) Nantes, France, August.\[Marcus et al, 1993\] Marcus, M., Santorini, B., andMalvinkiewicz, M.A.
(I 993).
Building a largeannotated corpus of English: The Penn Tree-bank.
Computational Linguistics, 19.2:313--330, June.\[McCord, 1993\] McCord, M. (1993).
Heuristicsfor broad-coverage natural language process-ing.
In DARPA Human Language TeehnologyWorkshop, March.INagao, 1994\] Nagao, M. (1994).
Varieties ofheuristics in sentence processing.
In Current Is-sues in Natural Language Processing: In Hon-our of Don Walker.
Giardini with Kluwer.\[Schabes, 198811 Schabes, Y., Abeill6, A., andJoshi, A.K.
(1988).
Parsing strategies with 'lex-icalized' grammars: Application to tree adjoin-ing grammars.
In Proceedings of the 12 zh bzter-national Conference on Comt)utational Linguis-tics (COLING'88), Budapest, Ilungary, August.\[Schabes, 1990\] Schabes, Y.
(1990).
Mathemati-cal and Computational Aspects c~f LexicalizedGrammars.
Ph.1).
thesis, University of Penn-sylvania, Philadelphia, PA, August.
Awlil-able as technical report (MS-CIS-90-48, LINCLAB179) fi'om the Department of ComputerScience.\[Soong and Huang, 199011 Soong, EK.
andHuang, E. (1990).
A Fast Tree-Trellis Searchfor Finding the N-Best Sentence Hypothesis inContinuous Speech Recognition.
In Journal o/Acoustic Society, AM., May.928
