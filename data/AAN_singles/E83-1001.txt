ABSTRACT CONTROL STRUCTURESAND THE SEMANTICS OF QUANTIFIERSSteven CushingComputer ~ Science Department: " St. Anselm CollegeManchester, New Hampshire, 03102 USAABSTRACTIntuitively, a Ruantifier is any word orphrase that expresses a meaning that answers one ofthe questions "How many?"
or "How much?"
TypicalEnglish examples include all, no, many, few, somebut not many, all but at most a ver~ few, wherever,whoever, whoever there is, and also, it can beargued, 0nly (Keenan, 1971), also (Cushing, 1978b),and the (Chomsky, 1977).
In this paper we reviewan empirically motivated analysis of such meanings(Cushing, 1976; 1982a) and draw out its computa-tional significance.
For purposes of illustration,we focus our attention on the meanings expressed bythe English words whatever and some, commonlyrepresented, respectively, by the symbols "~" and"3", but most of what we say will generalize to theother meanings of this class.In Section I, we review the notion of satis-faction in a model, through which logical formulasare customarily imbued implicitly with meaning.
InSection 2, we discuss quantifier relativizatlon, anotion that becomes important for meanings otherthan ~ and 3.
In Section 3, we use these twonotions to characterize quantifier meanings asstructured functions of a certain sort.
InSection 4, we discuss the computational signifi-cance of that analysis.
In Section 5, we elaborateon this significance by outlining a notion ofabstract control structure that the analysisinstantiates.I MODELS AND SATISFACTIONGiven a semantic representation language Lcontaining predicate constants and individualconstants and variables, an interpretation ~ of Lis a triple <D, R, (~}>, where D is a set ofindividuals, the domain of ~; R i s~ function, theinterpretation function of I, that assigns membersof D to individual constant~in  L and sets of listsof members of D to predicates in L, the length of alist being equal to the number of arguments in thepredicate to which it corresponds; and (f} is a setof functions, the assignment funct ions~f  ~, thatassign members of D to variables in L. A model Mfor L is a pair <D, R>, an interpretation of Lwithout its assignment functions.
Since "a factualsituation comprises a set of individuals bearingcertain relations to each other," such "a situationcan be represented by a relational structure<~'~i ..... ~i .... >' where D is the set of indivi-duals in question and ~I ..... ~ i ' " "  certain rela-tions on D," (van Fraassen, I~71, 107), i.e., inthis context, sets of lists of members of D.Models thus serve intuitively to relate formulas inL to the factual situations they are intended todescribe by mapping their constants into D and<--RI ..... ~i .... >" The "variable" character o~ thesymbols assigned values by an f relative to thoseinterpreted by R is reflected in the fact that aset of ~s corresponds to a fixed <D, R> to comprisean interpretation.The distinction between R and f gives us twodifferent levels on which the satisfaction offormulas can be defined, i.e., on which formulas inL can be said to be true or false under I. First,we define satisfaction relative to an assignment ofvalues to variables, by formulating statements like(i)-(vi) of Figure I, where "2 ~ (A) \[~\]" is readas f satisfies A in M or M satisfies A glven f.Given these statements, we ~an define "A--DB"~ readif A then B, as 'U(B & ~)" ,  and we can define~3~)" ,  read for some x or there are x, as"~(~--~)'~".
Second, we can define satisfaction by amodel, by saying that M satisfies A, written "M(A)", if M ~ (A) \[f\] for whatever assignmentfunctions f there are for M. Intuitively, this canbe read as saying that A is true of the factualsituation that is represented by the relationalstructure into which L is interpreted, regardlessof what values are given to variables by theassignment functions of an interpretation.
Forsome discussion of the cognitive or psychologicalsignificance of these notions, see Miller (1979a,b)and Cushing (1983).II SIMPLE AND RELATIVIZED QUANTIFICATIONStatement (v) of Figure i characterizes simplequantifications like (i), which represent the mean-ings expressed by sentences like (2), for whichx = "x" and A = (3), while (vi) characterizesrelativlzed quantifications like (4), which(i) ~ ~ (~I = ~2 )\[~\] iff (!
'~', if and only if) !
(~I) = ~(x_2)(ll) ~ ~ (?
(~I ..... x ) )  W iff (~(~i) .....
~(~.))
c ~(P_)(iii) M ~ (A & B)\[f\] iff M ~ (A)\[f\] and M ~ (B)\[f\](iv) M ~ (~ A)\[f\] iff it is not the case that M ~ (A)\[f\](v) M ~ ((V x) A)\[f\] iff M ~ (A)\[f'\] for whatever assignments ~' for M are like ~ except perhaps(l.~', at most) at(vi) M ~ ((?
x_)(B;A))\[f\] iff M ~ (A)\[f'\] for whatever assignments f' for M are like f exceptperhaps at ~ for which E~ (B)\[f ~\]Figure I: Typical Satisfaction Statements for Logical Formulas (adapted from van Fraassen, 1971, 108)represent the meanings expressed by sentences like(5), for which x and A are as for (2) and B = (6):(i)(2)(3)(4)(5)(V x) AWhatever there is is interesting.Interesting(x)(v ~)(~;A)Whatever is linguistic is interesting.
(= Whatever there is that is linguisticis interesting.
)(6) Linguistic(x)In general, B and ~ in (4) are lists of formulas inL, the relativization formulas and the principalformulas, respectively, of (4); both lists for (5)are of length I, and we will assume lists of thatlength for the rest of our discussion.Given (v) and (vi), the relativized quantifi-cation (4) is logically equivalent to the simplequantification (7), reflecting the synonymy of (5)with (8),  for example, but this fact does notgeneralize to quantifier meanings other than V,because there are quantifiers ~ for which there isno truth-functlonal connective c for which (9) isl-~gically equivalent to (I0):(7) (v x)(B = A)(8) Whatever there is, if it is linguistic,then it is interesting.
(9) (Rx_)(~;A)(IO) (R x)~B c A)For a formal proof of this important fact, seeCushing (1976; 1982a).
The relativized case mustthus be considered separately from the simple one,despite its apparent superfluity in the case of ?,which suffices for our purposes (with 3) in allother respects.III QUANTIFIER MEANINGS AS STRUCTURED FUNCTIONSStatement (vi) characterizes the meaning ex-pressed by (4) implicitly, by stating the condi-tions under which (4) can be said to be either trueor false; in general, other "truth values" are alsorequired for natural language (Cushing, 1982a;1983), but we will not discuss those cases here.Given (vi), we can characterize the meaningexpressed by (4) explicitly as a function, (Ii),that generates a truth value ~ from M, f, x, B, andA:(II) u = V(M,f,x,B,A)If we let o* be the function that maps a predicatein i to its extension relative to M, f, and ~ --i.e., the subset of D whose members make thatp--re--dicate satisfied b~ M given ~ when assignedindividually as values to ~ --, then we can replacethe English clause on the rlght-hand side of the"iff" in (v i )  with the equivalent set-theoretlcformulation (12), and thus (v i )  itself with theequivalent statement (13):(12) D fl o*(M,f,x,B) c o*(M,f,x,A)(13) ~ ~ (v ~) (~;A_) \[~\]iff D fl o*(M,f,x,B) = o*(M,f,x,A)In other words, (4) is true if and only if theintersection of D with the extension of B is whollycontained as a subset in the extension of A.
D isomitted from the right-hand side of the " ~ " in(12) for more general reasons that need not concernus here.Letting ~i' i__=0,i,2, be set variables, we canabstract away from the sets in (12) to get the re-lation -- i.e., in this context, boolean-valuedfunction -- (14), which can be factored into morebasic component set-theoretlc relations as shown in(15), in which the superscripts and subscriptsindicate which argument places a relation is to beapplied to, when the steps in the derivation arereversed:(14) ~0 na1?a2c__~ (~0 n ?i '~2) (~,_ n 21) (~,az ,a2)  .
.
.
.
.Finally, dropping the arguments ~i from the lastllne of (15), we get the quantiflca~ional relation,0~, expressed by V, as shown in (16):(16) 0 v : (?~, n 21)The function (ii), the meaning expressed by(4), thus consists of instances of two otherfunctions: G*, which generates sets from models,assignments, and predicates; and D~, which gener-ates truth values from sets; all related as inFigure 2.
Strictly speaking, the left-most in-stance of o* is really a different function --viz., the three-lnput function o*( , , ,true),rather than the four-input function ~*( , , , ) --,since true is a constant that must occur there, butthis technicality need not worry us here.
Eachfunction in Figure 2 provides the same mapping asis provided collectively by the lower-levelfunctions to which it is connected.
"Select sets",for example, is a mnemonic dummy-name for thefunction that consists of the three indicatedinstances of o*, through which these three inde-pendent instances interface with 0~.
The effect of~, in turn, is achieved by applying PV to whateverthree sets are provided to it by Select-sets.
LikeSelect-sets, p~ can also be further decomposed intosubfunctions, as shown in Figure 3, which reflectsthe structure of (15).
The important point here isnot the tree notation per s e, but the fact that afunctional hierarchy is involved, of the indicatedsort.
Any other notation that is capable of ex-pressing the relevant relationships would be Justas -- in certain respects, more (Cushing, 1982a,Figures 10 and ii) -- adequate for our purpose.For some general discussion of meanings as struc-tured functions, see Cushing (1979a).The two immediate subfunctions of ~ differ inone key respect, namely, in that Select-sets hasnothing to do specifically with ~, but would berequired in the analysis of any quantifier meaning;everything that is peculiar to ~ is encoded en-tirely in p~.
An analysis of B, for example, canbe obtained by simply replacing p~ in Figure 2 withan appropriate 0B, viz., the one in (17), in whichComp is a function that take the complement of aset -- i.e., those members of D that are not in theset --, and Pair is a function that duplicates itsinput:2 I 6 i(17) p 3 = (#l'C?mpl' n 2,Pairl)This relation unravels to exactly the correct truthcondition and satisfaction statement for relati-vized 3, Just as (16) does for ~.In the general case, we also have to include athird subfunction, R O, which generates a numericalparameter, as indicated in Figure 4.
The functionu = V(M_,_f,x,B,A)u : 0~(~O,al,a 2) ( _~o~ets (M, f ,x ,B ,A)~0 = a*(M,f,x,true) a I : ~*(M,f,x,B) a 2 = o*(M,f,x,A)Figure 2: Functional Decomposition of Relativized2 , , , 2u = = i(?o ,at ' )  ~ )u_= (ao' : - -~ ' )  ~0' = -a2Figure 3: Functional Decomposition of the Quantificational Relation Expressed by Relativized Vu fi Q(M,f,x,B,A)/ ~ Select-setsu = 0Q(~0,al,a2, ~) (~O'al'a2 'p) = and-parameter (M,f,x,B,A) - -  .
, - -  - -  - -~ , x , B , A ) _  I ~ 9_ ffi HQ(B,AD~0 " o*(M,f,x,true) a I *' o*(M,f,x,B__) a 2 - o*(M,f,x,A)Figure 4: Functional Decomposition of the General Relatlvized Quantifier Meaning/oQ(characteristic of Q:predication propertyQSelect-sets-and-parameterSelect-sets(independent of ~:binding property)(characteristic of Q:irreducibility property,in certain cases)Figure 5: Relationships Among Quantifier Meaning Subfunctions and the Properties They ExplicateSelect-sets -- more precisely, its o* subfunctions-- explicates the binding property common to allquantifier meanings, because it characterizes theextensions of predicates (via a*) by removing therelevant variable from the purview of the assign-ment, as can be seen clearly in statement (vi) ofFigure I.
The function 0~, the quantificationalrelation expressed by ~, explicates the predicationproperty of quantifier meanings, by virtue (pri-marily) of which different quantifier meanings aredistinguished.
Its quantlficational relation iswhat a quantifier predicates; the extensions of thepredicates it is applied to are what it predicatesthat of.
The intuition that quantifiers are insome sense predicational is thus explained, eventhough the notion that they are "higher predicates"in a syntactic sense has long since failed the testof empirical verification.
The function n o is whatunderlies the irreducibility property of certainquantifier meanings, by virtue of which (9) is  notlogically equivalent to (I0).
Like 0~, n O isspecifically characteristic of ~.
For present pur-poses, we can consider it to be null in the case ofand 3.
The relationship of these functions tothe quantifier meanings they decompose is indicatedschematically in Figure 5.IV COMPUTATIONAL SIGNIFICANCEIt must be stressed in the strongest possibleterms that the motivation for the analysis embodiedin Figure 4 has absolutely nothing at all to dowith computational considerations of any sort.Computational relevance need not imply linguisticor cognitive relevance, any more than mathematicalrelevance does, and vice versa.
See Cushing(1979b) and Berwick and Weinberg (1982) forrelevant argumentation.
On the contrary, theanalysls is motivated by a wide range of linguisticand psychological considerations that is tooextensive to review here.
See Cushing (1982a) forthe full argument.
The analysis does havecomputational significance, however, which followspost facto from its form and consists in the factthat functional hierarchies of exactly the sort itexemplifies can be seen to make up the computa-tional systems that are expressed by computer pro-grams.If we take a program like the one in Figure 6,for example, and ask what functions -- ~.~.,mathematical mappings with no side effects -- itinvolves, we can answer immediately with the llstin (18):(18) (i) y = x + 2(li) Z' =" (y + x) 2,2 (iii) z = z(iv) z' = (y x)  2(v) z = - z  '2(vl) w = z - IThere is a function that gets a value for y byadding 2 to the value of x, a function that gets avalue for z' by squaring the sum of the values of xand y, and so on.
Closer examination reveals,however, that there is an even larger number ofother functions that must be recognized as beinginvolved in Figure 6.
First, there is the functionin (19), which does appear expl ic it ly in Figure 6,but without an explicit output variable:(19) s = sin(y)Second, there is the boolean-valued function in(20), which also appears in F igure 6, but with noindication as to its functional character:(20) b = <(s,.5)More signif icantly,  there is a set offunctions that are entirely implicit in Figure 6.Since (19) generates a value of s from a value ofy, and (20) generates a value of b from that valueof s, there is an implicit function -- cal i  it F 1-- that is defined by that interaction, generat ingthat value of b from that value of y, as indicatedin (21):(21) b = Fl(Y)b s = ~  ~ sin(y)Similarly, since (18)(ii) and (iv) generate valuesof z' independently from values of x and y, andthese are then taken by (18)(ill) and (v),respectively, to generate values of z, there aretwo further implicit functions -- call them F 4 andBEGINIF sin y < .5END ;y=x+2;THEN z' = (y + x) ** 2;Z = Z w ** 2;ELSE z' = (y - x) ** 2;z =- (z '  ** 2);w= z -  I;Figure 6: A Simple Sample Programw = z - i z = Fs(x,y,b) b = <(s,.5) s = sin(y)(b = Fa lse) /  ~ ~  (b = True)z = -z 2 z 2 = (y - x) 2 z = z I z I = (y + x) 2Figure 7: Functional Hierarchy Expressed by the Program in Figure 6.y~=x + 2F 5 -- that are defined by these interactions, asshown in (22) and (23):(22) z ~ F4(x,y)z = z / '2 -~~z ' = (y + x) 2(23) z " Fb(X,y )z =- /z '2~~z ' .
(y - x) 2Since F 4 and F 5 generate different values, ingeneral, for z for the same values of x and y, theyinteract, in turn, to define a "choice" function --call it F 3 -- with its alternatives determined, inthis case, by the value of b, as indicated in (24):(24) z = F3(x,y,b)(b = Fa lse ) /  ~ (b = True)/ \z = F5(x,y) z = F4(x,y)Continuing in this way, we can extract two furtherfunctions: F 2, which consists of the compositionof (18vi) and F3; and FO, which consists of thecomposition of F 2, FI, and (181) and defines theoverall function effected by the program, as shownin Figure 7.The variables in Figure 6 are strictlynumerical only for the sake of illustration.
As wehave Just seen, even in this case, extracting theimplicit functional hierarchy expressed by theprogram requires the introduction of a non-numerical -- viz., boolean-valued -- variable.
Ingeneral, variables in a program can be taken torange over any data type at all -- i.e., any kindof object to be processed --, as long as it can beprovided with an appropriate implementation, andthe same is therefore true, as well, of itsimplicit functional hierarchy.
For an extensivellst of references on abstract data types, seeKaput (1980); for some discussion of their com-plementary relationship with the functionalhierarchies expressed by programs, see Cushing(1978a; 1980).The hierarchy expressed by an assemblylanguage program, for example, might well involvevariables that range over registers, locations, andthe llke, and bottom-node functions that store andretrieve data, and so on, just as Figure 4 hasbottom-node functions that assign extensions topredicates and form the intersections of sets.Given implementations of these latter functions,Figure 4 defines a computational system, Just asmuch as Figure 7 does, and so can be naturallyimplemented in whatever programming language thoseimplementations are themselves formulated in.V ABSTRACT CONTROL STRUCTURESAS FUNCTIONAL HIERARCHIESThe control structure indicators -- the wordsIF, THEN, ELSE, the semi-colons, the sequentialplacement on the page, and so on -- in Figure 6 aread hoc syntactic devices that really expresssemantic relationships of functional hierarchy,viz., those shown in Figure 7.
In general, we canidentify a control structure with such a functionalhierarchy.
For some background discussion relevantto this notion, see Hamilton and Zeldin (1976).
Acontrol structure can be said to be legitimate, ifits interfaces are correct, !
'e', if the sub-functions do effect the same mappings as thefunctions they purportedly decompose.
Of the threestructures in Figure 8, for example, only (ii) islegitimate, because (i) and (iii) each generates avalue of a as a side effect -- !
'~', a is generatedby a subfunction, but not by the overall function--, and b in (i) appears from nowhere -- !
'~., asan input to a subfunction, but not as an input tothe overall function, or as an output from anothersubfunction on the same level.Structure (iii) can be made legitimate byadding a to the output list of its top-mostfunction, as indicated in (25):(25)y = h(x)This structure represents one sort of parallelprocess, in which two functions operate in-dependently on the same input variable to generatevalues for different output variables.
Structure(i) can be made legitimate by adding a to theoutput llst of its top-most function, as in they ~Af(x) y ~ f(x)Y = ~~x.
, .
.=  h(x)y = f(x)y =~/~~'"= h(x)Figure 8: Three Possible Control Structurescase of (iii), and also adding b to that function'sinput llst, as indicated in (26):(26) y,a = f (b,x)This structure represents a different sort ofparallel process, in which two functions operateindependently on different input variables togenerate values for different output variables.Structure ( i i )  represents a non-parallel,sequential process in which two functions operatedependently, one generating a value for an outputvariable that is used by the other as an inputvariable.In general, the variables in these structurescan be interpreted as really representing lists ofvariables, just as "B" and "~" in (4) can beinterpreted as representing lists of predicates?Of these three legitimate structures, then, only(ii) can be seen as occurring in Figure 7.Figure 4 also contains a different structure (forSelect-sets) that combines the features of (25) and(26).The important point here is that functionalhierarchies comprising legitimate control struc-tures are inherent in the systems expressed byworkable programs.
As such, they have provenuseful both as a verification tool and as aprogramming tool.
For some discussion of therelationship that ought to exist, ideally, betweenthese two different modes of application, seeHamilton and Zeldin (1979).Through interaction with those who havewritten an existing program, one can derive theabstract control structure of the system expressedby the program, make that structure legitimate, andthen make the corresponding changes in the originalprogram.
In this way, subtle but substantialerrors can be exposed and corrected that might notbe readily revealed by more conventional debuggingtechniques.Conversely, given a legitimate control struc-ture -- such as the one for quantifier meanings inFigure 4, for example --, the system it comprisescan be implemented in any convenient programminglanguage -- essentially, by reversing the processthrough which we derived Figure 7 from Figure 6,adapted to the relevant language.
For some dis-cussion of software that automates this process,see Cushing (19825) and Wasserman and Gutz (1982).For a good description of the vision that motivatesthe development of this software -- ~.~., the idealsituation toward which its development is directed--, see Hamilton and Zeldln (1983).
Our presentconcerns are primarily theoretical and thus do notrequire the ultimate perfection of this or anyother software.A number of interesting variants have beenproposed to make this notion of control structureapplicable to a wider class of programs?
SeeMartin (1982), for example, for an attempt tointegrate it with more traditional data basenotions.
Harel (1979) introduces non-determlnacy,and Prade and Valna (1980) attempt to incorporateconcepts from the theory of fuzzy sets and systems.Further development of the latter of these effortswould be of particular interest in our presentcontext, in view of work done by Zadeh (1977), forexample, to explicate quantifier and other meaningsin terms of fuzzy logic.ACKNOWLEDGEMENTSI would llke to thank Fred Barrett, MitkaGolub, and Robert Kuhns for helpful comments on anearlier draft, and Margaret Moore for typing thefinal manuscript.REFERENCESBerwick, Robert C. and Amy S. Weinberg.
1982.
"Parsing Efficiency, Computational Complexity,and the Evaluation of Grammatical Theories.
"Linguistic Inquiry?
13:165-191.Chomsky, Noam.
1977.
Essays on Form and Inter-pretation.
New York: North-Holland.Cushing, Steven.
1976.
"The Formal Semantics ofQuantification."
UCLA doctoral dissertation.Ann Arbor, Michigan: University Microfilms.?
1978a.
"Algebraic Specification of DataTypes in Higher Order Software."
Proceedings,Eleventh Annual Hawaii International Conferenceo__nn System Sciences?
Honolulu, Hawaii??
19785.
"Not Only Only, But Also Also.
"Linguistic Inquiry.
9:1271132.. 1979a.
"Lexical Functions and LexicalDecompositibn: An Algebraic Approach to LexicalMeaning."
Linguistic ~ .
10:327-345.?
19795.
"Semantic Considerations in NaturalLanguage: Crosslingulstic Evidence and Morpho-logical Motivation."
Studies i._n_n Language.
3:181-201.1980.
"Software Security and How to HandleIt.
~ Chapter 4 of Advances in Computer SecurityManagement, Volume I. Rullo, Thomas A.
(ed.
).Philadelphia: Heyden & Son.?
1982a.
~uantlfier Meanings: A Study inthe Dimensions of Semantic Competenc~.
North -'ZHolland Linguistic Series, Volume 48.
Amsterdam:North-Holland.1982b.
Letter to ACM Forum.
Communl-cations of the ACM.
25:951.?
1983.
"Dynamic Model Selection in the In-terpretation of Discourse."
In Cosnitive Con___~straints on Communication: Representations andProcesses.
Vaina, Lucia and Jaakko Hintikka(eds.).
Dordrecht: Reidel.van Fraassen, Bas C. 1971.
Formal Semantics andLogic.
New York: Macmillan.Hamilton, Margaret and Saydean Zeldin.
1976.
"Higher Order Software -- A Methodology forDefining Software."
IEEE Transactions onSoftware Engineering.
SE-2:9-32.. 1979.
"The Relationship Between Design andVerlfication."
Journal of System s and Software.1:29-56.1983.Automation."3:25-62.
"The Functional Life Cycle and ItsJournal of Systems and Software.Harel, David.
1979.
"And/Or Programs: A NewApproach to Structured Programming."
SRecifi-cations of Reliable Software.
IEEE Catalog No.79 CH1401-9C.Kaput, Deepak.
1980.
"Towards a Theory forAbstract Data Types?"
TR-237.
Laboratory forComputer Science?
Massachusetts Institute ofTechnology?Keenan, Edward L. 1971.
"Quantifier Structures inEnglish."
Foundations of Language.
7:255-284.Martin, James.
1982?
Program Design Which IsPro vabl ~ Correct.
Carnforth, England: Savant In-stitute.Miller, George A.
1979a.
"Construction andSelection in the Mental Representation of Text.
"Cahler_.~sd__ee~'Institut d~eLingulstique de Louvain.5:185-197.19795.
"Images and Models, Similes andMetaphors."
In Metaphor and Thought.
Ortony,Andrew (ed.).
Cambridge: Cambridge UniversityPress.Prade, Henri and Lucia Valna.
1980.
"What 'FuzzyHOS' May Mean."
ProceedlnKs, Fourth Interna-tional Computer Software and Applications Con..___~ference.
IEEE Catalog No.
80 CH1607-I.Wasserman, Anthony I. and Steven Gutz.
Reply toLetters to ACM Forum.
Communications of the ACM.25:951-2.Zadeh, Lotfl A.
1977.
"PRUF - A Language for theRepresentation of Meaning in Natural Languages.
"Proceedln~s, Fifth International Joint Conferenceon Artificial Intelli~ence, Volume 2.
Cambridge,Massachusetts.
