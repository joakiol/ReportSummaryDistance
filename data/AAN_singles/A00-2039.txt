Finite-State Reduplication in One-Level Prosodic MorphologyMarkus WaltherUniversity of MarburgFB09/IGS, Wilhelm-R6pke-Str.
6A, D-35032 Marburg, GermanyMarkus.
Wal ther@ma i I er.
un i -marburg ,  deAbstractReduplication, a central instance of prosodic mor-phology, is particularly challenging for state-of-the-art computational morphology, since it involvescopying of some part of a phonological string.
Inthis paper I advocate a finite-state method that com-bines enriched lexical representations via intersec-tion to implement the copying.
The proposal in-cludes a resource-conscious variant of automata andcan benefit from the existence of lazy algorithms.Finally, the implementation f a complex case fromKoasati s presented.1 IntroductionIn the past two decades computational morphologyhas been quite successful in dealing with the chal-lenges posed by natural anguage word patterns.Using finite-state methods, it has been possible todescribe both word formation and the concomi-tant phonological modifications in many languages,ranging from straightforward concatenative combi-nation (Koskenniemi, 1983) over Semitic-style non-concatenative intercalation (Beesley (1996), Kiraz(1994)) to circumfixional long-distance dependen-cies (Beesley, 1998).However, Sproat (1992) observes that, despitethe existence of "working systems that are capa-ble of doing a great deal of morphological naly-sis", "there are still outstanding problems and ar-eas which have not received much serious attention"(ibid., 123).
Problem areas in his view include sub-tractive morphology, infixation, the proper inclu-sion of prosodic structure and, in particular, redu-plication: "From a computational point of view, onepoint cannot be overstressed: the copying requiredin reduplication places reduplication i a class apartfrom all other morphology."
(ibid., 60).
Productivereduplication is so troublesome for a formal accountbased on regular languages (or regular elations)because unbounded total instances like Indonesiannoun plural (orang-orang 'men') are isomorphic tothe copy language ww, which is context-sensitive.In the rest of this paper I will lay out a proposalfor handling reduplication with finite-state methods.As a starting point, I adopt Bird & Ellison (1994)'sOne-Level Phonology, a monostratal constraint-based framework where phonological representa-tions, morphemes and generalizations are all finite-state automata (FSAs) and constraint combinationis accomplished via automata intersection.
Whileit is possible to transfer much of the present pro-posal to the transducer-based setting that is oftenpreferred nowadays, the monostratal pproach stilloffers an attractive alternative due to its easy blendwith monostratal grammars such as HPSG and thegood prospects for machine learning of its surface-true constraints (Ellison (1992), Belz (1998)).After a brief survey of important kinds of redupli-cation in ?2, section ?3 explains the necessary ex-tensions of One-Level Phonology to deal with thechallenges presented by reduplication, within thelarger domain of prosodic morphology in general.A worked-out example from Koasati in ?4 illus-trates the interplay of the various components in animplemented analysis, before some conclusions aredrawn in section ?5.2 ReduplicationA well-known case from the context-sensitivitydebate of the eighties is the N-o-N reduplicativeconstruction from Bambara (Northwestern Mande,(Culy, 1985)):(1) a. wulu-o-wulu 'whichever dog'b.
wulunyinina-o-wulunyinina'whichever dog searcher'c.
wulunyininafil~la-o-wulunyininafil~la'whoever watches dog searchers'Beyond total copying, (1) also illustrates the pos-sibility of so-called fixed-melody parts in redupli-296cation: a constant/o/intervenes b tween base (i.e.original) and reduplicant (i.e.
copied part, in boldprint), tThe next case from Semai expressive minor redu-plication (Mon-Khmer, Hendricks (1998)) high-lights the possibility of an interaction between redu-plication and internal truncation:(2) a. c?e:t ct-c?e:t 'sweet'b.
drph dh-drj3h 'appearance of nod-ding constantly'c.
cfa:l cl-cfa:l 'appearance of flick-ering red object'Reduplication copies the initial and final segment ofthe base, skipping all of its interior segments, whichmay be of arbitrary length.A final case comes from Koasati punctual-aspectreduplication (Muscogean, (Kimball, 1988)):(3) a. ta.hfis.pin tlahas-tl 6:-pin'to be light in weight'b.
la.pfit.kin llapat-ll6:-kin'to be narrowc.
ak.Mt.lin alk-hl o-l~itlin'to be loose'd.
ok.cAk.kon Olk-hlo-c~kon'to be green or blue'Koasati s particularly interesting, because it showsthat copy and original need not always be adjacent- here the reduplicant is infixed into its own base -and also because it illustrates that the copy may bephonologically modified: the/h/ in the copied partof (3).c,d is best analysed as a voiceless vowel, i.e.the phonetically closest consonantal expression ofits source.
Moreover, the locus of the infixed redu-plicant is predictable on prosodic grounds, as it isinserted after the first heavy syllable of the base.Heavy syllables in Koasati are long (C)VV or closed(C)VC.
Prosodic influence is also responsible forthe length alternation of its fixed-melody part/o(o)/,since the heaviness requirement for the penultimate,stressed, syllable of the word causes long \[o:\] iff thereduplicant constitutes that syllable.tCuly (1985), who presents a uperset ofthe data under (1)in the context of a formal proof of context-sensitivity, showsthat he reduplicative construction in fact can copy the outcomeof a recursive agentive construction, thereby becoming trulyunbounded.
He emphasizes the fact hat it is "very productive,with few, if any restrictions onthe choice of the noun" (p.346).3 Finite-State MethodsThe present proposal differs from the state-labelledautomata employed in One-Level Phonology by re-turning to conventional rc-labelled ones, but sharesthe idea that labels denote sets, which is advanta-geous for compact automata.3.1 Enriched RepresentationsAs motivated in ?2, an appropriate automaton repre-sentation of morphemes that may undergo redupli-cation should provide generic support for three keyoperations: (i) copying or repetition of symbols, (ii)truncation or skipping, and (iii) in fixation.For copying, the idea is to enrich the FSA rep-resenting a morpheme by encoding stepwise repeti-tion locally.
For every content arc i 2~ j we add areverse repeat arc j repe~t i.
Following repeat arcs,we can now move backwards within a string, as weshall see in more detail below.For truncation, a similar local encoding is avail-able: For every content arc i --% j,  add another skiparc i ski~ j.
This allows us to move forward whilesuppressing the spellout of e.A generic recipe for infixation ensures that seg-mental material can be inserted anywhere withinan existing morpheme FSA.
A possible representa-tional enrichment therefore adds a self loop i ~ ilabelled with the symbol alphabet E to every state iof the FSA.
2Each of the three enrichments presupposes anepsilon-free automaton i order to be wellbehaved.This requirement in particular ensures that techni-cal arcs (skip, repeat) are in 1:1 correspondencewith content arcs, which is essential for unambigu-ous positional movement: e.g.
add_skips(a e b)would ambiguously require 1 or 2 skips to supressthe spellout of b, because it creates a disjunction ofthe empty string e with skip.
It is perhaps worthemphasizing that there is no special interpretationwhatsoever for these technical arcs: the standard au-tomaton semantics i unaffected.
As a consequence,skip and repeat will be a visible part of the outputin word form generation and must be allowed in theinput for parsing as well.Taken together, the three enrichments yield anautomaton for Bambara wulu, shown in figure 1.a.While skipping is not necessary for this example,4 ~ 4 is: it will host the fixed-melody/o/.
The2This can be seen as an application fthe ignore operatorof Kaplan and Kay (1994), where E* is being ignored.297repeat arcs will of course facilitate copying, as weshall see in a moment.a.Ig I; I; I; I;: repeat seg:OFigure 1: Enriched automata for wulu (a.
), BambaraN-o-N reduplication (b.
)3.2 Copying as IntersectionBird & Ellison (1992) came close to discoveringa useful device for reduplication when they notedthat automaton intersection has at least indexed-grammar power (ibid., p.48).
They demonstratedtheir claim by showing that odd-length strings ofindefinite length like the one described by theregular expression (a bcde f g)+ can be repeatedby intersecting them with an automaton accept-ing only strings of even length: the result is(abede f gabede f g) +.Generalizing from their artifical example, let usfirst make one additional minor enrichment by tag-ging the edges of the reduplicative portion of abase with synchronization bits :1, while usingthe opposite value :0 for the interior part (see fig-ure 1.a).
This gives us a segment-independenthandle on those edges and a regular expressionseg:l seg:o* seg:l for the whole synchronized portion(seg abbreviates the set of phonological segments).Assuming repeat-enriched bases, a total redupli-cation morpheme can now be seen as a partial wordspecification which mentions two synchronized por-tions separated by an arbitrary-length move back-wards:(4) seg:lseg:o*seg:l repeat* seg:lseg:o* seg:lMoreover, total reduplicative copying now simplyis intersection of the base and (4), or - in the Bam-bara case - a simple variant hat adds the/o/(figure1.b).
Disregarding serf loops for the moment, thereader may verify that no expansion of the kleene-starred repeat that traverses less than Ibase\[ seg-ments will satisfy the demand for two synchronizedportions.
Semai requires another slight variant of(4) which skips the interior of the base in the redu-plicant:(5) seg:l skip*seg:l repeat* seg:lseg:o*seg:lThe identification of copying with intersection otonly allows for great flexibility in describing the fullrange of actual reduplicative constructions with reg-ular expressions, it also reuses the central operationfor constraint combination that is independently re-quired for one-level morphology and phonology.Any improvement in efficient implementation ofintersection therefore has immediate benefits forgrammar computation as a whole.
In contrast, ahypothetical setup where a dedicated total copy de-vice is sandwiched between finite-state transducersseems much less elegant and may require additionalmachinery to detect copies during parsing.Note that it is in fact possible to computereduplication-as-intersection overan entire lexiconof bases (see figure 3 for an example), provided thatrepeat arcs are added individually to each base, En-riched base FSAs can then be unioned together andundergo further automaton transformations such asdeterminization or minimization.
This restrictionis necessary because our finite-state method cannotexpress token identity as normally required in stringrepetition.
Rather than identifying the same token, itaddresses the same string position, using the weakernotion of type identity.
Therefore, application of themethod is only safe ff strings are effectively isolatedfrom one another, which is exactly what per-baseenrichment achieves.
See ?3.4 for a suggestion onhow to lift the restriction in practice.3.3 Resource ConsciousnessOne pays a certain price for allowing general repe-tition and infixation: because of its self loops andtechnical arcs, the automaton of figure 1.a over-generates wildly.
Also, during intersection, selfloops can absorb other morphemes in unexpectedways.
A possible diagnosis of the underlying de-fect is that we need to distinguish between produc-ers and consumers of information.
In analogy toLFG's constraint vs constraining equations, infor-mation may only be consumed if it has been pro-duced at least once.For automata, let us spend a P/C bit per arc, withP/C=I for producers and P/C=O for consumer arcs.In open interpretation mode, then, intersection com-bines the P/C bits of compatible arcs via logical OR,making producers dominant.
It follows that a re-source may be multiply consumed, which has obvi-ous advantages for our application, the multiple re-alization of string symbols.
A final step of closed in-298terpretation prunes all consumer-only arcs that sur-vived constraint interaction, in what may be seenas intersection with the universal producer languageunder logical-AND combination of P/C bits.Using these resource-conscious notions, we cannow model both the default absence of material andpurely contextual requirements as consumer-typeinformation: unless satisfied by lexical resourcesthat have been explicitly produced, the correspond-ing arcs will not be part of the result.
By convention,producers are displayed in bold.
Thus, the exact re-sult of figure 1.a 71 1.b after closed interpretation is:W:I U:0/:o U:o o repeat 4 repeat* W:l u:o l:o U:lThis expression also illustrates that, for parsing,strings like wuluowulu need to be consumer-self-loop-enriched via a small preprocessing step, be-cause intersection with the grammar would other-wise fail due to unmentioned technical arcs such asrepeat.
Because our proposal is fully declarative,parsing then reduces to intersecting the enrichedparse string with the grammar-and-lexicon automa-ton (whose construction will itself involve intersec-tion) in closed interpretation mode, followed by acheck for nonemptiness of the result.
Whereas theoriginal parse string was underspecified for mor-phological categories, the parse result for a realis-tic morphology system will, in addition to technicalarcs, contain fully specified category arcs in somepredefined linearization order, which can be effi-ciently retrieved if desired.3.4 On-demand AlgorithmsIt is clear that the above method is particularly at-tractive if some of its operations can be performedonline, since a fullform lexicon of productive redu-plications is clearly undesirable e.g.
for Bambara.
Itherefore consider briefly questions of efficient im-plementation f these operations.Mohri et al (1998) identify the existence of alocal computation rule as the main precondition 3for a lazy implementation f automaton operations,i.e.
one where results are only computed whendemanded by subsequent operations.
Such imple-mentations are very advantageous when large in-termediate automata may be constructed but only asmall part of them is visited for any particular in-put.
They show that such a rule exists for composi-3A second condition is that no state is visited that has notbeen discovered from the start state.
It is easy to implement (6)so that this condition is fulfilled as well.tion o, hence also for our operation of intersection(An  B = range(identity(A) o identity(B))).Fortunately, the three enrichment steps all havelocal computation rules as well:(6) e repeat a. q~-+ q2 ~ q2 ) q~ski~b.
q l -~  q2 ~ ql q2c.
q ~ q-~+ qThe impact of the existence of lazy implementa-tions for enrichment operations i twofold: we can(a) now maintain minimized base lexicons for stor-age efficiency and add enrichments lazily to the cur-rently pursued string hypothesis only, possibly mod-ulated by exception diacritics that control when en-richment should or should not happen.
4 And (b),laziness uffices to make the proposed reduplicationmethod reasonably time-efficient, despite the largernumber of online operations.
Actual benchmarksfrom a pilot implementation are reported elsewhere(Walther, submitted).4 A Worked ExampleIn this section I show how to implement the Koasaticase from (3) using the FSA Utilities toolbox (vanNoord, 1997).
FSA Utilities is a Prolog-basedfinite-state toolkit and extendible regular expressioncompiler.
It is freely available and encourages rapidprototyping.Figure 2 displays the regular expression opera-tors that will be used (italicized operators are mod-ifications or extensions).
The grammar will be pre-\[ \] empty string\[ E l ,  E2 .
.
.
.
.
En\] concatenation f Ei{ El ,  E2 .
.
.
.
.
En}  union of EiE*  Kleene closureE ^ optionalityE1 & E2 intersectionX --> (Y /Z)  monotonic ruleX-+YCX/  Z,-~ S complement set of SHead(argl .
.
.
.
.
argN) (parametrized):= Body macro definitionFigure 2: Regular expression operatorssented below in a piecewise fashion, with line num-bers added for easy reference.4See Walther (submitted) for further details.
With determin-istic automata, the question of how to recover from a wrongstring hypothesis during parsing is not an issue.299Starting with the definition of stems (line 1), weadd the three enrichments to the bare phonologicalstring (2).
However, the innermost producer-typestring constructed by s t r ingToAutomaton  (3) isintersected with phonological constraints (5,6)  thatneed to see the string only, minus its enrichments.This is akin to lexical rule application.1 stem(FirstSeg, String) :=2 add_repeats (add_sk ips (add_se l f loops(3 \[FirstSeg, str ingToAutomaton(Str ing)\]4 & ignore_technical_symbols_ in(5 mora i f icat ion&mark_f i rs t_heavy_sy l lab le6 & posi t ional  c lassi f icat ion)))) .78 underspeci f ied_for_voic ing(BaseSpec)  :=9 { producer(BaseSpec & vowel),i0 \[producer(h),consumer(skip)\]  }.ii12 tahaspin := stem(\[\], "tahaspin").13 aklat l in  := stem(underspec i f ied_for_14 voic ing( iow),"k lat l in") .Lines 8-10 capture the V/h alternation that is char-acteristic for vowel-initial stems under reduplica-tion, with the vocalic alternant constituting the de-fault used in isolated pronunciation.
In contrast,the ha/alternant is concatenated with a consumer-type skip that requires a producer from elsewhere.Lines 12-1 ?
define two example stems.The following constraint (15-18)  enriches aprosodically underspecified string with moras# - abstract units of syllable weight (Hayes,1995) - ,  a prerequisite to locating (20-24)  andsynchronization-marking (25-31)  the first heavysyllable after which the reduplicative infix will beinserted.15 mora i f icat ion  :=16 ( vowel --> ( mora / s igma ) )&17 ( consonant --> ( mora / consonant ) )&18 ( consonant --> ( (~ mora) / vowel ) ).1920 first_(X) := \[not_contains(X), X\].21 heavy_r ime := \[consumer(mora),22 consumer(mora)\] .23 heavy_sy l lab le  := \[consumer( ~ mora),24 heavy_rime\].25 mark__first__heavy_syllable :=26 \[ f i rst_(heavy_r ime)&synced_const i tuent,27 synced_const i tuent\] .28 r ight_synced := \[consumer(~':l '&seg) *,29 consumer( ' : l '&seg)\] .30 synced_const i tuent  :=31 \[consumer(': l '&seg), r ight synced\].32 pos i t iona l_c lass i f icat ion :=33 \[consumer( init ia l ) ,consumer(medial)  *,34 consumer(f inal) \ ] .1 I INote that both the constituent before ( t:l a h a s:l )/ I and after (p:l i n:~ ) the infixation site need to bemarked.
Also, it turns out to be useful to classifybase string positions for easy reference in the redu-plicative morpheme, which motivates lines 32-  34.The main part now is the reduplicative morphemeitself (35), which looks like a mixture of Bambaraand Semai: the spellout of the base is followed by it-erated repeats (36) to move back to its synchronizedinitial position (37), which - recal l /h/ -  is requiredto be consonantal.
The rest of the base is skippedbefore insertion of the fixed-melody part/o(o)/oc-curs (38, 42-44).
Proceeding with the interruptedrealization of the base, we identify its beginning asa synchronized syllable onset (,,~ mora), followedby a right-synchronized string (39- 40).35363738394041424344punctua l_aspect_redupl icat ion :=\[synced_constituent, producer(repeat)*,consumer(': l '  & init ial & consonant),producer(skip) *, f ixed_melody,consumer(': l '  & seg & - mora),r ightsynced\ ] .f ixed_melody :=\[producer(o & ~ ':i' & medial  & mora),producer(o & ~ ':i' & medial  & mora)^\].Finally, some obvious word_level_con-straints need to be defined (45-54), before thecentral intersection of Stem and punctual-aspectreduplication (57) completes our Koasati fragment:4546474849505152535455565758word_ level_constra ints  :=last_segment_ is_moraic  &last_two_syl ls_are_heavy.last_segment_ is_moraic  :=\[consumer(sigma) *, consumer(mora)\] .last_two_syl ls_are_heavy :=\[consumer(sigma) *,heavy_syl lable,heavy_syl lable\ ] .wordform(Stem):=closed_ interpretat ion(word_ level_constra ints  & Stem &punctua laspect_ redup l i ca t ion) .The result of wordform ( {tahaspin,  ak lat  lin} )is shown in figure 3 ( \[ and \] are aliases for initialand final position).Space precludes the description of a final automa-ton operation called Bounded Local Optimization(Walther, 1999) that turns out to be useful here to300~ r a  19  repeat 11 e e t l 3  repeat 7 .0 a re  eat7 1 5 1_mora :0 repeata ora_:0k_mora : 1Figure 3: Koasati reduplications tahas-too-pin, ak-ho(o)-latlinban unattested free length variation, as found e.g.in ak-ho(o)-latlin where the length of o is yet tobe determined.
Suffice to say that a parametriza-tion of Bounded Local Optimization would prunethe moraic arc 16 ~ 19 in figure 3 by considering itcostlier than the non-moraic arc 16 --~ 18, therebyeliminating the last source of indeterminacy.5 ConclusionThis paper has presented a novel finite-state methodfor reduplication that is applicable for both un-bounded total cases, truncated or otherwise phono-logically modified types and infixing instances.
Thekey ingredients of the proposal are suitably en-riched automaton representations, the identificationof reduplicative copying with automaton intersec-tion and a resource-conscious interpretation thatdifferentiates between two types of arc symbols,namely producers and consumers of information.After demonstrating the existence of efficient on-demand algorithms to reduplication's central oper-ations, a case study from Koasati has shown thatall of the above ingredients may be necessary in theanalysis of a single complex piece of prosodic mor-phology.It is worth mentioning that our method can betransferred into a two-level transducer setting with-out major difficulties (Walther, 1999, appendix B).I conclude that the one-level approach to redu-plicative prosodic morphology presents an attractiveway of extending finite-state techniques to difficultphenomena that hitherto resisted elegant computa-tional analyses.AcknowledgementsThe research in this paper has been funded bythe German research agency DFG under grant WI853/4-1.
Particular thanks go to the anonymous re-viewers for very useful comments.ReferencesKenneth R. Be~sley.
1996.
Arabic finite-state mor-phological analysis and generation.
In Proceed-ings of COLING-96, volume I, pages 89-94.Kenneth R. Beesley.
1998.
Constraining separatedmorphotactic dependencies in finite-state gram-mars.
In Proceedings of FSMNLP'98, BilkentUniversity, Turkey.Anja Belz.
1998.
Discovering phonotactic finite-state automata by genetic search.
In Proceedingsof COLING-ACL '98, volume II, pages 1472-74.Steven Bird and T. Mark Ellison.
1992.
One-LevelPhonology: Autosegmental representations andrules as finite-state automata.
Technical report,Centre for Cognitive Science, University of Ed-inburgh.
EUCCS/RP-51.Steven Bird and T. Mark Ellison.
1994.
One-Level Phonology.
Computational Linguistics,20(1):55-90.Chris Culy.
1985.
The complexity of the vocab-ulary of Bambara.
Linguistics and Philosophy,8:345-351.T.
Mark Ellison.
1992.
Machine Learning ofPhonological Representations.
Ph.D. thesis,University of Western Australia, Perth.Bruce Hayes.
1995.
Metrical stress theory: prin-301ciples and case studies.
University of ChicagoPress.Sean Hendricks.
1998.
Reduplication withoutprosodic templates: A case from Semai.
Handoutfrom talk given at LSA annual meeting, January8.Ron Kaplan and Martin Kay.
1994.
Regular mod-els of phonological rule systems.
ComputationalLinguistics, 20(3):331-78.Geoffrey Kimball.
1988.
Koasati reduplication.
InW.
Shipley, editor, In honour of Mary Haas:from the Haas Festival Conference on NativeAmerican Linguistics, pages 431-42.
Mouton deGruyter, Berlin.George Anton Kiraz.
1994.
Multi-tape two-levelmorphology: a case study in Semitic nonlinearmorphology.
In Proceedings of COLING '94,volume 1, pages 180-186.Kimmo Koskenniemi.
I983.
Two-Level Morphol-ogy: A General Computational Model for Word-Form Recognition and Production.
Ph.D. thesis,University of Helsinki.Mehryar Mohri, Fernando Pereira, and Michael Ri-ley.
1998.
A rational design for aweighted finite-state transducer library.
In D. Wood and S. Yu,editors, Automata Implementation.
Second Inter-national Workshop on Implementing Automata,WIA "97, volume 1436 of Lecture Notes in Com-puter Science, pages 144-58.
Springer Verlag.Richard Sproat.
1992.
Morphology and Computa-tion.
MIT Press, Cambridge, Mass.Gertjan van Noord.
1997.
FSA Utilities: Atoolbox to manipulate finite-state automata.
InDarrell Raymond, Derrick Wood, and ShengYu, editors, Automata Implementation, volume1260 of Lecture Notes in Computer Science,pages 87-108.
Springer Verlag.
(Software underhttp : //grid.
let.
rug.
nl/~vannoord/Fsa/).Markus Walther.
1999.
One-Level Prosodic Mor-phology.
Marburger Arbeiten zur Linguistik 1,University of Marburg.
64 pp.
(http://www.uni-marburg.de/linguistik/mal).Markus Walther.
submitted.
On finite-state redupli-cation.
In COLING-2000.302
