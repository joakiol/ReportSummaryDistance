2012 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pages 607?610,Montre?al, Canada, June 3-8, 2012. c?2012 Association for Computational LinguisticsThe Intelius Nickname Collection:Quantitative Analyses from Billions of Public RecordsVitor R. Carvalho, Yigit Kiran and Andrew BorthwickIntelius Data Research500 108th Avenue NE, Bellevue, WA 98004{vcarvalho,ykiran,aborthwick}@intelius.comAbstractAlthough first names and nicknames in theUnited States have been well documented,there has been almost no quantitative analysison the usage and association of these namesamongst themselves.
In this paper we in-troduce the Intelius Nickname Collection, aquantitative compilation of millions of name-nickname associations based on informationgathered from billions of public records.
Tothe best of our knowledge, this is the largestcollection of its kind, making it a natural re-source for tasks such as coreference resolu-tion, record linkage, named entity recogni-tion, people and expert search, information ex-traction, demographic and sociological stud-ies, etc.
The collection will be made freelyavailable.1 IntroductionNicknames are descriptive, invented person namesthat are frequently used in addition or instead of theperson?s official name.
Very often nicknames aretruncated forms of the original name that can be usedfor convenience ?
for instance, ?Betsy?
instead of?Elizabeth?.Previous studies on nicknames have mostly fo-cused on their origins or common descriptions.
TheOxford Dictionary of First Names (Hanks et al,2007), for instance, presents a comprehensive de-scription of origins and common uses of most nick-names in modern English.
More quantitative explo-rations of the subject, such as the one provided byAlias Conditional ProbabilityBetty 4.51%Beth 3.83%Liz 3.34%Elisabeth 0.95%Betsy 0.92%Table 1: Nickname Distribution Sample for ?Elizabeth?the US Social Security Office1 tend to focus on babyname selection and on the relative popularity of mostcommon first names.In this paper we present a quantitative study onnickname usage in the United States.
Using bil-lions of personal public records and a state-of-the-art large-scale record linkage system, we were ableto generate a comprehensive dataset with millionsof name-nickname associations and their relativestrength.
A small sample of this collection canbe seen in Table 1, where the most frequent nick-names associated with the first name ?Elizabeth?and their Conditional Alias Probabilities.
We ex-plain the derivation of these probabilities in detailin Section 3.3.
This collection can provide valu-able features and insights for applications as diverseas entity extraction, coreference resolution, peoplesearch, language modeling, and machine translation.It will be made freely available for download fromthe Linguistic Data Consortium.1Popular Baby Names from Social Security Online:http://www.ssa.gov/OACT/babynames/6072 Prior WorkTo the best of our knowledge, there are no com-prehensive, empirically derived nickname databasescurrently made freely available for research pur-poses.
(Bollacker, 2008) contains an extensivedatabase of names and nicknames2, with listingson over 13,000 given names, containing multi-ple ?variations?
for each name.
However, thisdatabase makes no attempt to distinguish betweencommon and less common variants and skips somevery common nicknames.
For instance, the en-try for ?William?
lists ?Wilmot?
and ?Wilton?as variants of William but does not list ?Bill?or ?Billy?.
(Meranda, 1998) provides a moreuseful database which appears to also be manu-ally constructed.
The database is in the form ofName1|Name2|?substitution likelihood?, but the au-thor states in the comments that the substitution like-lihood is ?mostly guesswork?
and the data containsnumerous coverage gaps.
For instance, commonnicknames such as ?Jack?, ?Willy?, and ?Sally?
areall missing.3 Generating the Nickname DistributionThe nickname collection was derived from billionsof public, commercial and web records that power amajor commercial People Search Engine.
The pro-cess described below associates all records belong-ing to a particular person into clusters, and fromthese clusters it constructs a final person profile thatis used to derive name-alias associations.
The entireprocess is briefly described below.3.1 Data Collection and CleaningThe process starts by collecting billions of personalrecords from three different sources of U.S. per-sonal records.
The first source is derived from USgovernment records, such as marriage, divorce anddeath records.
The second is derived from publiclyavailable web profiles, such as professional and so-cial network public profiles.
The third type is de-rived from commercial sources, such as financialand property reports (e.g., information made publicafter buying a house).After collection and categorization, all records gothrough a cleaning process that starts with the re-2http://www.freebase.com/view/base/givennames/given namemoval of bogus, junk and spam records.
Then allrecords are normalized to an approximately com-mon representation.
Then finally, all major noisetypes and inconsistencies are addressed, such asempty/bogus fields, field duplication, outlier valuesand encoding issues.
At this point, all records areready for the Record Linkage process.3.2 Record Linkage ProcessThe Record Linkage process should link togetherall records belonging to the same real-world per-son.
That is, this process should turn billions of in-put records into a few hundred million clusters ofrecords (or profiles), where each cluster is uniquelyassociated with a real-world unique individual.Our system follows the standard high-level struc-ture of a record linkage pipeline (Elmagarmid et al,2007) by being divided into four major components:1) data cleaning 2) blocking 3) pair-wise linkage and4) clustering.
The data cleaning step was describedabove.
The blocking step uses a new algorithm im-plemented in MapReduce (Dean et al, 2004) whichgroups records by shared properties to determinewhich pairs of records should be examined by thepairwise linker as potential duplicates.
The linkagestep assigns a score to pairs of records using a super-vised pairwise-based machine learning model whoseimplementation is described in detail in (Sheng etal., 2011) and achieves precision in excess of 99.5%with recall in excess of 80%, as measured on a ran-dom set with tens of thousands of human labels.If a pair scores above a user-defined threshold, therecords are presumed to represent the same person.The clustering step first combines record pairs intoconnected components and then further partitionseach connected component to remove inconsistentpair-wise links.
Hence at the end of the entire recordlinkage process, the system has partitioned the inputrecords into disjoint sets called profiles, where eachprofile corresponds to a single person.
While thetask is very challeging (e.g., many people share com-mon names such as ?John Smith?)
and this processis far from perfect, it is working sufficiently well topower multiple products at Intelius, including a ma-jor people search engine.6083.3 AlgorithmWe used the MapReduce framework (Dean et al,2004) to accomodate operations over very largedatasets.
The main goal of this task is to preservethe relationship amongst different names inside aprofile.
The algorithm?s pseudocode is illustrated inFigure 1.Many different names can be listed under a pro-file, including the real name (e.g., the ?official?
or?legal?
name), nicknames, diminutives, typos, etc.In the first phase of the algorithm, a mapper visits allprofiles to reveal these names and outputs a <key,value>pair for each name token.
The keys are thenames, and the values are a list with all other namesfound in the profile.
This is a safe approach since wedo not attempt to determine whether a given token isan original name, a diminutive or a typo.
Hence-forth, we refer to the key as Name and the values asAliases.The reducer will merge all alias lists of a givenname, and count, aggregate and filter them.
Sincethe mapper function produces intermediate pairswith all different names seen inside a profile, re-ducing them will create a bi-directional relation be-tween names and aliases, where one can search forall aliases of a name as well as the reverse.
The re-ducer also estimates conditional probabilities of thealiases.
The Conditional Alias Probability (CAP)of an alias defines the probability of an alias beingused to denote a person with a given name.
Specifi-cally, It can be expressed as CAP (aliasi|namej) =count(aliasi?namej)count(namej), where the count() operator re-turns the number of profiles satisfying its criteria.Processing a large number of profiles creates ahuge alias lists for each name.
Even worse, mostof the aliases in that list are typos or very uniquenicknames that would not be considered a typicalalias for the name.
In order to help control thisnoise, we used the following parameters in the al-gorithm.
Alias Count Minimum sets the minimumnumber of profiles that should have an alias forthe alias to be included.
Total Count Minimumdetermines whether we output the whole set ofname and aliases.
It is determined by comput-ing the total number of occurrences of the name.CAP Threshold forces the reducer to filter outaliases whose probability is below a threshold.MAP(profile)1 names := ?2 for name ?
profile3 names := names ?
name4 for current name ?
names5 aliases := ?6 for other name ?
names7 if current name 6= other name8 aliases := aliases ?
other name9 EMIT(current name, aliases)REDUCE(key , values)1 aliaslist := ?2 for record ?
values3 if aliaslist .contains(record)4 INCREMENT(aliaslist [record ])5 else6 aliaslist [record ] := 1;7 SORT-BY-COUNT(aliaslist)8 COMPUTE-FREQUENCIES(aliaslist)9 FILTER(aliaslist)10 EMIT(key , aliaslist)Figure 1: MapReduce Nickname Extractor algorithm3.4 AnalysisThe number of generated name-alias associationsdepends largely on the specific parameter set usedin by the algorithm.
While different applicationsmay benefit from different parameters, many of ourinternal applications had success using the follow-ing set of parameters: Total Count Minimum =100, Alias Count Minimum = 10, andCAP Threshold = 0.1%.
Using this parameterset, the process generated 331,237 name-alias pairs.Table 2 shows CAP values for various name-alias pairs.
As expected, notice that valuesof CAP (X|Y ) can be completely different fromCAP (Y |X), as in the case of ?Monica?
and?Monic?.
The collection also shows that completelyunrelated names can be associated to a short alias,such as ?Al?.
Notice also that very frequent ty-pos, such as?Jefffrey?, are also part of the collection.Finally, very common name abbreviations such as?Jas?
for ?James?
are also part of the set as long asthey are statistically relevant.609Figure 2: Conditional Probability of ?William?
?s Aliases over the Decades in the US.X Y CAP (Y |X)Monica Monika 1.00%Monica Monic 0.26%Monic Monica 38.76%Al Albert 14.83%Al Alfred 8.28%Al Alan 4.96%Jas James 71.94%Jas Jim 7.54%James Jas 2.09%Jefffrey Jeffrey 40.04%Jefffrey Jeff 25.69%Table 2: Sample CAPs For Multiple Aliases.3.5 Limitations and Future ExplorationsIt is important to keep in mind that the collectionis only valid for adults in the USA.
Also, despite thenoise reduction obtained by the algorithm thresholdsin Section 3.3, some cases of frequent typos, for-eign spellings/transliterations, and abbreviations arestill statistically indistinguishable from actual nick-names.
For instance, ?WM?
(a common abbreviationof William) is as frequent as many of its nicknames.While we could have used a human-edited list to fil-ter out these cases, we decided to keep it in the col-lection because some applications may benefit fromthis information.
A coreference application, for in-stance, could infer that ?Wm Jones?
and ?WilliamJones?
have a high probability of being the same per-son.Looking forward, there are multiple directionsto explore.
Besides names, the final record clus-ters generally contain other information such as ad-dresses, date of birth (DOB), professional titles, etc.As an example, Figure 2 illustrates the probability ofthe most frequent nicknames of ?William?
for peopleborn over different decades in the US.
It is interest-ing to notice that, while ?Bill?
was the most likelynickname for people born between the 1940s and1980s, ?Will?
has become significantly more popu-lar since the 80s - to the point that it has becomethe most likely nickname in the 90s.
We believe ournext steps will include investigating various migra-tion, economic, sociological and demographic pat-terns while also leveraging this information in recordlinkage and coreference resolution modules.ReferencesK Bollacker, C. Evans, P. Paritosh, et al 2008.
Freebase: Acollaboratively created graph database for structuring hu-man knowledge.
ACM SIGMOD.Ahmed Elmagarmid, Panagiotis Ipeirotis and VassiliosVerykios 2007.
Duplicate Record Detection: A Survey.IEEE TKDE 19 (1)Patrick Hanks, Hardcastle Kate and Flavia Hodges 2007 Ox-ford Dictionary of First Names.
Oxford University Press,USA, 2nd edition, ISBN 978-0-19-861060-1.Deron Meranda 1998 Most Common Nicknames for FirstNames http://deron.meranda.us/data.Jean-Baptiste Michel et al 2011 Quantitative Analysis of Cul-ture Using Millions of Digitized Books.
Science, Vol.
331no.
6014 pp.
176-182Sheng Chen, Andrew Borthwick and Vitor R. Carvalho 2011.The Case for Cost-Sensitive and Easy-To-Interpret Models inIndustrial Record Linkage.
International Workshop on Qual-ity in Databases VLDB-2011Jeff Dean and Sanjay Ghemawat 2004.
MapReduce: SimplifiedData Processing on Large Clusters Symposium on Operat-ing System Design and Implementation OSDI-2004610
