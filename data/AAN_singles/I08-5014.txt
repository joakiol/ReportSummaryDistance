Proceedings of the IJCNLP-08 Workshop on NER for South and South East Asian Languages, pages 97?104,Hyderabad, India, January 2008. c?2008 Asian Federation of Natural Language ProcessingNamed Entity Recognition for Indian LanguagesAnimesh Nayan, B. Ravi Kiran Rao, Pawandeep Singh,Sudip Sanyal and Ratna SanyalIndian Institute of Information TechnologyAllahabad, Indiae-mail@domainAbstractAbstract Stub This paper talks about a newapproach to     recognize named entities forIndian languages.
Phonetic matching tech-nique is used to match the strings of differ-ent languages on the basis of their similarsounding property.
We have tested our sys-tem with a comparable corpus of Englishand Hindi language data.
This approach islanguage independent and requires only aset of rules appropriate for a language.1 IntroductionNamed Entity Recognition (NER) is a subtask ofmachine translation and information retrieval.Named entities are words which belong to certaincategories like persons, places, organizations, nu-merical quantities, expressions of times etc.
Alarge number of techniques have been developed torecognize named entities for different languages.Some of them are Rule based and others are Statis-tical techniques.
The rule based approach uses themorphological and contextual evidence (Kim andWoodland, 2000) of a natural language and conse-quently determines the named entities.
This even-tually leads to formation of some language specificrules for identifying named entities.
The statisticaltechniques use large annotated data to train amodel (Malouf, 2002) (like Hidden MarkovModel) and subsequently examine it with the testdata.
Both the methods mentioned above requirethe efforts of a language expert.
An appropriatelylarge set of annotated data is yet to be made avail-able for the Indian Languages.
Consequently, theapplication of the statistical technique for IndianLanguages is not very feasible.This paper deals with a new technique to recog-nize named entities of different languages.
Ourapproach does not use the previously mentionedtechniques.
Instead, we use an approach that notonly reduces the burden of collecting and annotat-ing data, but is language independent as well.
Weuse this method to build a multilingual named en-tity list that can be used by the named entity recog-nizer.
Our method recognizes and finds the actualrepresentation of the named entities in the targetlanguage from an untagged corpus.
Our idea wasto match the two representations of the samenamed entity in two different languages using aphonetic matching algorithm.
This comes from theproperty of named entities that they sound similarwhen written in native script or any other script.However this cross-lingual matching is not a trivialtask.
First of all, the two strings to be matchedhave to be represented in a common script.
So weface two choices here.
Either we should convertthe two strings into some common intermediaterepresentation (ex.
Phonemic representation) ortransliterate the name written in Indian language toEnglish and then look for phonetic equivalence.Our engine has been tested for Hindi.
After makingtransliteration rules for Hindi, we used a variationof the Editex algorithm to match the transliteratedstring with entries in English named entity data-base to find a match.
Here it is worthwhile to men-tion that certain class of name entities which arenot similar sounding (mostly phrases) cannot beextracted through this cross-lingual matching.
E.g.
?United Nations?, ?Government of India?
etc.
Ab-breviations which are spelled character by charac-97ter in both the languages can however be extracted.E.g.
BBC ( ), LTTE ( ) etc.In the next section we have given the system ar-chitecture.
The logical flow and overall descriptionof the system are discussed here.
Our own set oftransliteration rules in Hindi are given in the thirdsection.
In the fourth section we define our base-line task.
Our system has been tested with a paral-lel corpus which consisted of both English andHindi language data.
The results obtained usingour system is described in the fifth section togetherwith an analysis.
Conclusions are presented in thelast section together with directions for future im-provements.2 System Architecture: Logical Flow andoverall description of the SystemThe system architecture is shown in Figure 1.
Itconsists of the following modules:Figure 1: System Architecture2.1 CrawlerThe crawler is a web-bot or spider which browsesthe web in an automated manner.
It starts with alist of Uniform Resource Locators (URL) that it isto visit, called the seeds.
As the crawler visits theseURL?s it collects all the hyperlinks and adds themto a queue.
URL?s from the queue are crawled fur-ther.
Since the crawler collects the data from web,the data collection is fully automated.
The crawlergathers data for both English and other Indian lan-guages.
The data collected for English is used topopulate the English named entity database whichis significantly accurate.
We have used the freelyavailable Stanford Named Entity Recognizer(Finkel, Grenager, and Manning, 2005) in our en-gine.
The data collected for Indian languages willbe used to build a database of named entities forthe given language.2.2 ParserThe crawler saves the content in an html formonto the system.
The parser parses these html files.Additionally the parser can also parse the PDF aswell as RTF files.
The output of the parser ispassed to the corresponding modules for the twodifferent languages.2.3 Phonetic MatcherPhonetic matching is the task of matching two rep-resentations of the same name.
A name may havemore than one representation in its native scriptitself.
If the name is represented in a script otherthan its native script, there may be large number ofpotential variants for its representation.
Phoneticmatching is a fuzzy string matching technique inwhich we match strings on the basis of their simi-lar sounding property and not identity.
Most com-mon phonetic matching techniques are Soundexand Editex.
These techniques are used to matchtwo representations of the same name in English.We survey the techniques in the following subsec-tions.2.3.1 SoundexSoundex algorithm was designed by Odell andRussell in 1918 to find spelling variation of names.It represents classes of sounds which can belumped together.
The classes for the algorithm areshown in Appendix A.
These classes are placed forphonetic matching according to the following algo-rithm:1.
Replace all but the first letter of the stringby its phonetic code.2.
Eliminate any adjacent representation ofcodes.3.
Eliminate all occurrences of code 0 i.e.eliminate all vowels.4.
Return the first four characters of the re-sulting string.5.
Examples: Dickson = d25, Dikson = d25.Two names match if they have the same soun-dex representation.
This method does not account98for vowels and hence is not accurate for cross-lingual matching.2.3.2 EditexThe Editex algorithm was designed by Zobel andDart (Zobel and Dart,1996).
It is an enhancementof the Levenshtein (Levenshtein, 1966) edit dis-tance algorithm.
The Levenshtein algorithm meas-ures the edit distance between two strings whereedit distance is defined as the minimum number ofbasic operations required to match one string to theother where the basic operations are insertion, de-letion and substitution.
Insertion and deletion costsare 1 and substitution cost is given by a functionsubst_cost (Xi, Yj) which returns 0 if the two char-acters Xi and Yj are same and 1, if they are differ-ent.
The score dist [m, n] is returned as the editdistance between two strings.
A score of zero im-plies a perfect match.The algorithm has O (mn) time and space com-plexity where m and n are the lengths of the twostrings respectively.
The pseudo code for theLevenshtein edit distance algorithm is described inAppendix B. Editex groups similar sounding pho-nemes into equivalence classes.
The substitutioncost is determined by a function S (Xi, Yj) thatreturns 0 if the two characters Xi and Yj are same,1 if they lie in the same equivalence class and 2otherwise.
The insertion and substitution costs aredetermined by a function D (Xi-1, Xi) which isalmost same as S (Xi, Yj) except for the differencethat it compares letters of the same string and itreturns 1 if Xi-1 is ?h?
or ?w?
and Xi-1 is not equalto Xi.
The editex equivalence classes and the ed-itex pseudo-code are given in Appendix C.Editex performs fairly better than Soundex andLeveinshtein edit distance algorithms.
Howeverfurther enhancements in Editex are also possible.?Tapering?
is one enhancement in which we weighmismatches at the beginning of the string withhigher score than mismatches towards the end(Zobel and Dart, 1996).
Other enhancements arethose in which input strings are mapped to theirphonemic representation, called phonometricmethods (Zobel and Dart, 1996).3 Transliteration rulesTo perform phonetic matching of two differentrepresentations of a named entity, we need both ofthem in a common script.
We choose to transliter-ate the named entity in Indian language to English.The transliteration rules for a language must bewritten for the same.
We have written our own setof transliteration rules for Hindi.
These can be de-scribed briefly as underThe entity to be transliterated is scanned character bycharacter from left to right.
Each character of Hindi ismapped to an equivalent character/set of character inEnglish according to a mapping function.
The charac-ter set generated by the function is appended into astring as per the rules.
E.g.
??
= ??
+ ?
is a singlecharacter representation in Unicode (???)
and maps to?Ka?.1.
Start with an empty string.
When a conso-nant or singleton vowel (not as ?matra?)
isencountered append the set of charactersreturned by mapping function.2.
When a consonant is followed by a vowelthe preceding ?a?
should be removed andthe character set for the vowel should beappended.
E.g.
??
consists of two charac-ters ?
+ .
Once we encounter ?
weappend ?ka?
and when is encounterednext we remove the ?a?
and append themapping for i.e.
?e?.
This rule applies ingeneral to all the vowels.3.
If the transliterated string has ?a?
as its lastcharacter while it doesn?t have the vowelas last character of Hindi string, re-move this occurrence of ?a?.
The lastvowel in Hindi is very important as two al-together different words may have the onlydifference in the last vowel.
E.g.
????
?and ??????
are proper nouns having dif-ferent genders.
Their English representa-tions are ?Kamal?
and ?Kamla?
respec-tively.The transliteration always performs a one to onemapping of a character in Hindi to a set of charac-ters in English.
However the English representa-tion may have different character sets for the sameHindi character in different names.
E.g.
?????
is?Kamal?
while ???????
is ?Cricket?.
???
is oftenrepresented by ?K?
for Hindi names, by ?C?
for99English names and by ?Q?
for Urdu names.
TheEditex algorithm groups these letters in the sameequivalence class.4 Baseline TaskAt the core of our method lies the phonetic match-ing algorithm.
We have modified the Editex algo-rithm as mentioned in Appendix C. Editex can bemodified to take into account that there can bemore than three (0, 1, 2) levels of acceptability forsubstitutions due to the inherent properties of par-ticular languages.
For example, say ?ckq?
is oneequivalence class in Editex.
?c?
and ?k?
have a sub-stitution cost of 1.
We may reduce this substitutioncost to 0.5 for a language in which it is highlyprobable that the same character maps to ?c?
and?k?
in the English representation of its names.Thus the equivalence classes and the substitutioncosts in Editex can be modified for cross-lingualphonetic matching.
There can also be further lan-guage specific enhancements.
The following algo-rithm along with some language specific enhance-ments was implemented for Hindi.4.1 Abbreviation CheckAbbreviations form an important class of namedentities.
So, we first check whether the Hindi stringis an abbreviation in which the English charactersare spelled individually.
For each English alphabetwe have some unique Hindi representation.
Thefunction performs accurately most of the time andextracts such named entities.
If we are able to findout that the string is an abbreviation, the corre-sponding English representation can be returned bythe function itself, hence there is no need of furthermatching.
If the string is not an abbreviation, weproceed to the actual matching algorithm.4.2 4.2.
First letter matchingThe first letters of the two strings must either bethe same or should belong to the same equivalenceclass.
The equivalence classes for first charactermatching are:"ckq", "wbv", "iy?,"jz", "aeiou"The English named entity database must be in-dexed according to the first letter of the named en-tity so that we only search for matches in thoseindexes which fall into the same equivalence class.This is very important for the computational effi-ciency of the engine as it reduces the search space.4.3 PreprocessingOften the phonetic inconsistencies in English leadto low matching score for two representation of thesame name.
To take this into account, beforematching the two strings the named entity retrievedfrom English Named entity database is preproc-essed to form a new string.
We have used the fa-mous ?Mark Twain?s plan for the improvement ofEnglish spelling?
(http://grammar.ccc.commnet.edu/grammar/twain.htm) added with some more rules.This way we tackle the problem of more than onepossible character sets for some vowels since onlyone of them can be chosen during transliteration.We also tackle some other problems like silent-alphabets and repeated alphabets so that the prob-ability of generating high matching score in-creases.
The following set of rules for preprocess-ing was used.1.
Change all occurrences of ?oo?
to ?u?.
(both character sets are for the vowel  )2.
Change all occurrences of ?ee?
to ?i?
(both character sets are for the vowel   )3.
Change all occurrences of ?f?
to ph?4.
Change all occurrences of ?au?
to ?o?5.
If a word starts with "x", replace the "x"with a "z".
Change all the remaining "x"sto "ks"s.6.
If a "c" is directly followed by an "e" or"i", change the "c" to an "s"7.
If a "c" is directly followed by a "k", re-move the "c".
Keep applying this rule asnecessary    (Example: "cck" becomes"k".)8.
If a word starts with "sch", change the"sch" to a "sk".9.
If a "ch" is directly followed by an "r",change the "ch" to a "k".10.
After applying the above rules, change all"c"s that are not directly followed by an"h", to a "k".
(This includes all "c"s thatare last letter of a word)11.
If a word starts with "kn" change "kn"to?n?12.
Change all double consonants of the sameletter to a single consonant.
A consonant isany letter that is not one of "a, e, i, o, u.
"(Example: "apple" becomes "aple").
Keep100applying this rule as necessary (Example:"zzz" becomes "z".
)4.4 Editex ScoreNow the transliterated string and the preprocessedstring are compared to generate an editex score.The equivalence classes we used were similar to asproposed in the original editex algorithm exceptfor some language specific changes for Hindi.Length of the two strings has to be consideredwhile deciding the threshold score for a match oth-erwise there can be greater number of mismatchesfor small strings.
So we normalize  editex score asd = [1- {editex(X, Y) / (length(X) + length(Y)}]The decided threshold for match was 0.86.
Ascore above threshold guarantees equivalence ofthe two representations.
The results are shown inTable-1.HindiNEEnglishNETransliterationOutputEditexScore??????
Hindi  Hindi 1.0???????
Philistini Phalastini 0.9?????????
Bangladesh      Bangladesh 1.0???????
Jharkhand Jharakhand     0.894??????
Pashchim Pashchim 1.0?????
Bengal Bangal 0.916????
Bharat Bharat 1.0?????
Cricket Kriket 0.923???
Greg Greg 1.0????
Chappel Chaipal 0.857?????
Mahendra Mahendr 0.933?????
Rahul Rahul 1.0????
Dravid Dravid 1.0????????
Chattisgarh Chattisagadh 0.866Table-1: Hindi named entities with transliterationoutput and normalized Editex scores5 Results and AnalysisWe have tested our system with a parallel corpuswhich consisted of both English and Hindi lan-guage data.
Further we used the web crawler topopulate our NE list of both the languages thusembedding the concept of comparable corpus.
Theresults for English obtained using parallel corpusare:Precision: 81.40% and Recall: 81.39%This corpus carried named entities from the do-main of travel, tourism and culture.
Further forclassifying the results for Hindi we used the defini-tion of named entities as given by Chinchor (Chin-chor, 1997) as for entity names organizations (OE),person names (PE) and location names (LE).
Theresults for numeric expressions (monetary valuesand percentages) and temporal expressions (datesand times) were not considered for results becauseit is a trivial task to build grammar rules for suchentities which appear quite regularly.We have focused on OE, PE and LE named enti-ties for Hindi so that we can analyze the perform-ance on new and hitherto undiscovered entitieswhich come into existence with the passage oftime.
This premise provides the real basis for chal-lenging the performance of any NER technique forIndian Languages.The testing on the corpus of around 1000 sen-tences revealed the following results for Hindi:?
Precision for all named entities(PE+OE+LE): 80.2%?
Recall for PE (person entity names):47.4%?
Recall for OE (organization entity names):42.9%?
Recall for LE (location entity names):74.6%It is important to observe here that the engineshows good recall for location entity names (LE)which were more abundant in the corpus.
Besidesthis, the corpus had a heterogeneous mix of namedentities with tourism-related information not onlyfrom India but also from the continents of SouthAmerica and Antarctica.
A good recall percentagefor Hindi location entity names is encouraging asthe named entities related to South America andAntarctica did not have phonetic similarity with101the native entities available from tourism informa-tion from India.
This gives good credence to thephonetic matching approach used above.
Causesfor the comparatively lower recall percentageamong person entity names and organization entitynames are under further investigation.6 ConclusionsWe have used the phonetic matching technique tomatch the strings of different languages on the ba-sis of their similar sounding property.
As the Pho-netic Matcher module is tested for more data, moregeneric rules can be made to improve its accuracy.The Engine should be improved so that it may rec-ognize phrasal named entities and abbreviations.The engine will work for any language if the pho-netic matching rules are written for that language.We can also develop a crawler which will be fo-cused upon a certain domain of interest.
Focusedcrawlers are very important for generating re-sources for natural language processing.
A focusedcrawler application is an intelligent agent thatcrawls the web for content related to a specificdomain.
This kind of crawler could be used in thefuture for purposes of data collection for a particu-lar domain.7 AcknowledgementsThe authors gratefully acknowledge financial assis-tance from TDIL, MCIT (Govt.
of India).ReferencesChinchor, N. 1997.
MUC-7 Named entity task defini-tion.
In Proceedings of the 7th Message Understand-ing Conference (MUC-7)Finkel, Jenny Rose, Grenager, Trond and Manning,Christopher.
2005.
Incorporating Non-local Informa-tion into Information Extraction Systems by GibbsSampling.
Proceedings of the 43rd Annual Meetingof the Association for Computational Linguistics(ACL 2005), pp.
363-370.Kim, J. and Woodland, P.C.
2000a.
Rule Based NamedEntity Recognition.
Technical Report CUED/ FIN-FENG/TR.385, Cambridge University EngineeringDepartment, 2000.Malouf, Robert.
2002 Markov models for language-independent named entity recognition.
In Proceed-ings of CoNLL-2002 Taipei, Taiwan, pages 591-599.Levenshtein, V.I.
1966.
Binary codes capable of cor-recting deletions, insertions, and reversals.
SovietPhysics Doklady 10: 707?710.Zobel, Justin and Dart, Philip.
1996.
Phonetic stringmatching: Lessons from information retrieval.
InProceedings of the Eighteenth ACM SIGIR Interna-tional Conference on Research and Development inInformation Retrieval, Zurich, Switzerland, August1996, pp.
166-173.Appendix A: Soundex classesCode Letters Code Letters0 aeiouyhw 4 l1 bpfv 5 mn2 cgjkqsxz 6 R3 dtAppendix B: Pseudo code for Leveinshtein edit dis-tance:Input: Two strings, X and YOutput: The minimum edit dis-tance between X and Ym ?
length(X)n ?
length(Y)for i =0 to m dodist[i, 0] ?
ifor j = 0 to n dodist[0, j] ?
jfor i = 1 to m dofor j = 1 to n dodist[i, j] =min{dist[i-1, j]+inser_cost,dist[i-1, j-1]+ subst_cost[Xi, Yj],dist[i, j-1] + delet_cost}endAppendix C: Editex Equivalence Classes:aeiouy       bp       ckq       dt       lr        mngj              fpy       sxz      csz102Pseudo code for Editex AlgorithmInput: Two strings, X and YOutput: The editex distancebetween X and Ym = length(X)n = length(Y)editex_dist[0, 0] = 0for i = 1 to m doeditex_dist[i, 0]= editex_dist[i-1, 0]+ D(Xi-1, Xi)for j = 0 to n doeditex_dist[0, j]= editex_dist[0, j-1]+ D(Yj-1, Yj)for i = 1 to m dofor j = 1 to n doeditex_dist[i, j] =min { editex_dist[i-1, j]+ D(Xi-1, Xi),editex_dist[i-1, j-1]+ S(X, Yj),editex_dist[i, j-1]+ D(Yj-1, Yj)end103104
