Overview of AlethGenJos4 CochERLI1, place des MarseillaisF-94227 Charenton-le-pont CedexFRANCEjose.coch@erli.fr1.
IntroductionAlethGen is ERLI's automatic multi-paragraphtext-generation toolbox.
It was first specified in1992 and the French version developed in 1993-1994.
The English version has been underdevelopment since 1995.
The Spanish version isplanned for 1997.AlethGen has already been used for generatingtexts in several applications, notably forproducing correspondence for a leading Frenchmail-order company (see \[Coch & David 94\],\[Coch, David & Magnoler 95\]).AlethGen is much more than a sentencegenerator.
Its main characteristics are:?
the high quality of the multi-paragraph textsgenerated,  an terms of f luidity,understandability, and personalisation, and?
the data-driven planning approach, whichallows applications to produce an extensiveset of different ext structures.AlethGen is an industrial toolbox that uses severaltechniques in a hybrid way, i.e.
it has severalmodules which can be integrated and used indifferent ways to meet different applications'requirements.
The modules are described inChapter 2, and the architectures in Chapter 3.Given that AlethGen is used in commercial andindustrial projects, it is important o describe thecharacteristics of the systems it has been used tobuild, in terms of quality criteria and performance(Chapter 4).Finally, the existing projects using AlethGen aredescribed in Chapter 5.2.
Modules2.1.
OverviewThe three main modules of AlethGen are theDirect generator, the Text planner, and theLinguistic realisation module.2.2.
Direct Generator (AlethGen/GD)The main functions of the Direct generator are:?
to plan the structure of the text in a directmode (top-down), thanks to a conditionalscript language using a traditional(algorithmic) approach,25?
to generate more or less fixed expressionsor non-l inguistic texts (i.e.
tables,addresses, lists, etc.)
by manipulatingcharacter strings, also using a traditionalconditional approach.The Direct generator can be used without theother modules to generate texts in an automaticbut non-linguistic way.
Reiter \[Reiter 95\] callsthis technique "the template approach".The content of the knowledge bases and scriptsused by the Direct generator depends on theapplication.2.3.
Text Planner (AlethGen/Pla)The function of the Text planner is to plan the textin a data-driven mode.
The input of this module isstructured ata from the application.
The contentand format of the input thus depend on theapplication.The Text planner uses declarative knowledgebases containing rules written in a logicalformalism.The output is an ordered list of Events, withrhetoric features and rhetoric operators (the<< surface structure >> of the text).
This module isdivided in two sub-modules: the Conceptualplanner and the Rhetorical planner.Thus, the content-determination and rhetoricalplanning functions are not integrated in AlethGen,but separated in two different sub-modules.
Onone hand, AlethGen's Rhetorical plannerproduces surface rhetorical representation ( otintermediate, as for example in RST \[Mann &Thompson 88\]).
On the need for surface rhetoricalrepresentation, see \[Coch & David 94\].
On theother hand, Rhetorical planning depends on thelanguage, whereas Conceptual planning does not.In this way, separation between these sub-modules is useful for multilingual applications, inwhich several Rhetorical planners (one perlanguage) use the output of a unique Conceptualplanner (as in the MultiMeteo project: see below).Conceptual PlannerThe Conceptual planner sub-module performs the"from data to concepts" step.
The output of theConceptual planner is the deep structure of thetext, where the events to be realised are selected,linked by conceptual relations, but not yetdefinitively ordered.
The Conceptual planner usesconceptual rules which depend on the application(but not on the language).For an overview of the Conceptual planner, see\[Coch & David 94\].Rhttorical Planner"The sub-module that calculates the surface orderbetween the events is called the Rhetoricalplanner.
This sub-module chooses concretesurface operators (such as "because", thus", "if","then", "and", etc.
), modalities ("can", "must",counterfactuals, etc.)
and order, according torhetorical rules.
Choices depend on certainattributes, e.g.
whether or not the addressee isaware of an event, whether or not an event is inthe addressee's favour, etc.
The Rhetoricalplanner uses rhetorical rules which depend on thelanguage and style of the texts to be generated.2.4.
Linguistic Realisation (AlethGen/GL)The function of the Linguistic realisation moduleis to produce the output text from its surfacestructure.
This module can be divided into twosub-modules: the planning of noun phrases andanaphora, and the sentence-by-sentence linguisticrealisation proper.Planning of noun phrasesThe output of the previous stage (the surfacestructure of the text) may contain repetitions ofobjects.
It would, of course, be unacceptable torepeat noun phrases referring to the same objectwithout any control.Introducing an object in a text may also require adefinite description or simply a definite article.These problems are solved by the noun-phraseI Reading of me I inputI Application Style IStructure ScriptsDirect GeneratorSemi-fixed \[text scriptsStructuredinternal damI Text DeepStructureI Text SurfaceStructureI Annotated TextSurface Structu re--7Semi-fixed, fixedexpressions; non-linguistic textplanning sub-module.
For a description of thissubmodule, see \[Coch & Wonsever 95\].Sentence-by-sentence Linguistic RealisationThis sub-module is inspired mainly by theMeaning-Text Theory (as developed for examplein \[Mel'~uk 88\]).The AlethGen Generation Grammar is composedof several sets of rules, defining the transitionbetween the different levels of representation:Events -> Semantic -> Deep Syntactic -> SurfaceSyntactic -> Morphology.
Intermediaterepresentations and transition rules are written ina very general formalism, such as featurestructures.The introduction of the Events level, which doesnot exist in the Meaning-Text Theory, wassuggested by other projects, and is required formaking a true distinction between therepresentation resulting from the application andlinguistic semantics, thus ensuring the tool'sportability.
This distinction is also desirable formultilingual processing.There is a general version of the Grammar, but itneeds to be adapted to each new application.3.
Architectures3.1.
Full-Hybrid ConfigurationThe following is a (simplified) view of theintegration of all AlethGen modules in thestandard generation process.Conceptual IPlan nerRhe~r~alPlannerText Planner\I Fully linguistictext/\[ OutputText \]Nou n-phraseand AnaphoraPlan n in gLinguisticRealisationAI ethGen/GL26Thus, according to \[Reiter 95\] this architecturecan be defined as "hybrid", because it uses bothlinguist:c and template techniques.
However.this " full-hybrid " architecture of AlethGenmodules eems to be more powerful than thosestudied by Reiter, because here it is possible ~owork with both high-level conceptual anddirect planning, and with both linguistic andtemplate realisation, depending on the type oftext (or part of text) to be generated.This architecture is used by La Redoute's pilotmail-generation system (see below).3.2.
"Template" ConfigurationReading of theinputinternal dataApplication Style IStructure Sc rip ~Direct GeneratorSemi-fixed Itext scriptsSemi-fixed, fixed Iex pression s: non -linguistic textI Ou utText IThe advantage of this architecture is that itseems to be easier, cheaper, and quicker whendeveloping a generation system.
On the otherhand, its main drawbacks (as pointed out by\[Reiter95\]) are in its adaptability, upgra-dability and maintainability when the possiblerealisations of the sentences vary greatly from alinguistic point of view.
For these reasons, theTemplate architecture is useful for building~< one-shot ,, prototypes.This particular AlethGen architecture was usedto develop a prototype weather-forecastgenerator in French for Mdtdo France (seebelow).4.
Characteristics of AlethGen4.1.
QualityObviously, the quality of the texts producedusing AlethGen does not depend only on thecharacteristics of AlethGen, but also on theway in which the tool is used for building anapplication, and, above all, on how preciselyquality criteria and methods of evaluating themare defined.A good example of this are the quality resultsof the mail-generation system built for LaRedoute (see below).A set of formal and user-oriented quality testswere planned and quality criteria definedduring the first phase of the project.
Examplesof quality criteria are correct spelling, goodgrammar, understandabi l i ty ,  f luidity,appropriateness of tone, personalisation,absence of repetition, precision of terminologyused, etc (for details, see \[Coch 96\]).The evaluation was carried out by anindependent jury (representative of end users),which studied the quality of the various typesof letter, including:?
those written by a semi-automatic fill-in-the-blanks system ("SA"), currently inuse,?
those generated automatically by thepilot system based on AlethGen, and?
those written manually in an "ideal" way,by an excellent writer, without timeconstraints.A report was drawn up on each letter, withvalues for assessment on quality criteriadefined by La Redoute.The results of the validation test show that:?
the , Ideal - letters are the best (this isnot surprising!).
However, the differencebetween << Ideal >> human letters andAlethGen's letters is not that great;?
the quality of the letters generated by thepilot system using AlethGen is greaterthan that of the semi-automatic system,for all quality criteria (and especially forpersonalisation, absence of repetition,and precision of the terminology used).These results are illustrated in the followinggraph (marks out of 20):18171615141312111098\[\] Semi -automatic\[\] A I ethGen?
I deal274.2.
PerformancesThe systems built with AlethGen generate awhole text on a complex problem (15-20sentences) in less than 2 seconds.
Sometimes(as in the mail-generation project for LaRedoute: see below) one or two minutes areneeded for user-interface dialog.As regards productivity gains, performancelevels are to be compared with more than 5minutes for the other approaches, andsometimes everal tens of minutes for humanwriting.4.3.
Technical characteristicsThe system was written in C++ under Unix andruns on Unix stations.
The Direct generatormodule also runs on PC/Windows.5.
Applications5.1.
Mail generation for La RedouteLa Redoute is the leading mail-order firm inFrance.
It receives several thousand requestletters, faxes, or telephone calls each day.
LaRedoute and ERLI developed a real-situationpilot system for automatically replying to theserequests.
This system (for details on thisproject, see \[Coch, David & Magnoler 1995\])builds a text (i.e.
a letter) from data entered bythe human operator processing the request, acustomer database, and knowledge bases.
Theoverall system is composed of two mainmodules: the Decision module and theGeneration module.The Decision module allows the writer (readingthe request letter) to identify the author andsubject of the request letter, ask him/her forrelevant information, and suggests a decision.After validation, it communicates the relevantinformation to the Generation module, whichautomatically produces the reply letter in anSGML format.
This last module was built usingAlethGen tools in a full-hybrid architecture.5.2.
Weather-forecast production prototypeERLI developed a <~ one-shot 7> weather-forecast generation prototype in French forM6t6o France.
Weather forecasts are currentlygenerated in a general-public style only, with ageographical ly and seasonally limitedvocabulary.
The prototype runs onPC/Windows and is integrated in a textprocessor (Word 6.0).5.3.
English generation for a translation toolOne of the objectives of the EUREKA GRAALproject is to construct a machine-translationengine.
It uses the AlethGen's Linguisticrealisation module, which can be used as amodule for deep generation or surfacegeneration from machine-translation transferinput.5.4.
MultiMeteo: multilingaal generationThe goal of the MultiMeteo project is to buildan automatic multilingual generation system tobe used by Meteo France, Instituto Nacional deMeteorologfa nd other European WeatherOffices, for producing weather forecasts fromstructured ata.
This system will allow eachEuropean forecaster to produce texts inEnglish, French, German, and Spanishautomatically.MultiMeteo is a 3-year project funded partiallyby the Language Engineering programme ofthe European Commission.In each country, the MultiMeteo software willbe installed and tested at 4 or 5 geographicalsites, representative of different meteorologicalcharacteristics ( outh, north, plain, mountain,sea, etc.).
In each site, 4 or 5 different styles offorecast will be developed (local general-public, regional general-public, mountainsports, sea-side sports, agriculture, aviation,etc.
).REFERENCES\[Coch & David 94\].
Coch, J.; David, R.:"Representing knowledge for planningmultisentential text", in Proceedings of the 4thConference on Applied Natural LanguageProcessing.
Stuttgart, Germany, 1994.\[Coch, David & Magnoler 95\].
Coch, J.; David,R.
; Magnoler, J.: "Quality test for a mailgeneration system", in Proceedings of"Linguistic Engineering 95, Montpellier, France1995.\[Coch & Wonsever 95\].
Coch, J.; Wonsever D.:"Improvement of an Algorithm for Planningand Generating Anaphora", in Proceedings ofDeixis 95, Nancy, France 1995..\[Coch 96\].
Coch, J.: "Evaluating andcomparing three text-production techniques", inProceedings of the 16th Conference ofComputational Linguistics, Coling 96,Copenhagen, Danmark 1996.\[Mann & Thompson 88\].
Mann W. C.,Thompson S. A. : "Rhetorical Structure Theory:Towards a functional theory of textorganization", in Text 8(3), 1988.\[Mel'cuk 88\].
Mel'cuk I.: "Dependency Syntax:Theory and Practice", State University of NewYork Press, Albany, NY, USA 1988.\[Reiter 95\].
Reiter, E.: "NLG vs. Templates" inProceedings of the 1995 European NaturalLanguage Generation Workshop, Holland,1995.28
