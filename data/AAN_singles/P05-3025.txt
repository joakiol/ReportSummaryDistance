Proceedings of the ACL Interactive Poster and Demonstration Sessions,pages 97?100, Ann Arbor, June 2005. c?2005 Association for Computational LinguisticsInteractively Exploring a Machine Translation ModelSteve DeNeefe, Kevin Knight, and Hayward H. ChanInformation Sciences Institute and Department of Computer ScienceThe Viterbi School of Engineering, University of Southern California4676 Admiralty Way, Suite 1001Marina del Rey, CA 90292{sdeneefe,knight}@isi.edu, hhchan@umich.eduAbstractThis paper describes a method of in-teractively visualizing and directing theprocess of translating a sentence.
Themethod allows a user to explore a modelof syntax-based statistical machine trans-lation (MT), to understand the model?sstrengths and weaknesses, and to compareit to other MT systems.
Using this visual-ization method, we can find and addressconceptual and practical problems in anMT system.
In our demonstration at ACL,new users of our tool will drive a syntax-based decoder for themselves.1 IntroductionThere are many new approaches to statistical ma-chine translation, and more ideas are being sug-gested all the time.
However, it is difficult to deter-mine how well a model will actually perform.
Ex-perienced researchers have been surprised by the ca-pability of unintuitive word-for-word models; at thesame time, seemingly capable models often have se-rious hidden problems ?
intuition is no substitutefor experimentation.
With translation ideas growingmore complex, capturing aspects of linguistic struc-ture in different ways, it becomes difficult to try outa new idea without a large-scale software develop-ment effort.Anyone who builds a full-scale, trainable trans-lation system using syntactic information faces thisproblem.
We know that syntactic models often donot fit the data.
For example, the syntactic sys-tem described in Yamada and Knight (2001) can-not translate n-to-m-word phrases and does not al-low for multi-level syntactic transformations; bothphenomena are frequently observed in real data.
Inbuilding a new syntax-based MT system which ad-dresses these flaws, we wanted to find problems inour framework as early as possible.
So we decidedto create a tool that could help us answer questionslike:1.
Does our framework allow good translationsfor real data, and if not, where does it get stuck?2.
How does our framework compare to exist-ing state-of-the-art phrase-based statistical MTsystems such as Och and Ney (2004)?The result is DerivTool, an interactive translationvisualization tool.
It allows a user to build up atranslation from one language to another, step bystep, presenting the user with the myriad of choicesavailable to the decoder at each point in the pro-cess.
DerivTool simplifies the user?s experience ofexploring these choices by presenting only the de-cisions relevant to the context in which the user isworking, and allowing the user to search for choicesthat fit a particular set of conditions.
Some previ-ous tools have allowed the user to visualize wordalignment information (Callison-Burch et al, 2004;Smith and Jahr, 2000), but there has been no cor-responding deep effort into visualizing the decodingexperience itself.
Other tools use visualization to aidthe user in manually developing a grammar (Copes-take and Flickinger, 2000), while our tool visualizes97Starting with: ?
?0 ?and applying the rule: NPB(DT(the) NNS(police)) ?
?0we get: ?
NPB(DT(the) NNS(police)) ?If we then apply the rule: VBN(killed) ?
?we get: ?
NPB(DT(the) NNS(police)) VBN(killed)Applying the next rule: NP-C(x0:NPB) ?
x0results in: ?
NP-C(NPB(DT(the) NNS(police))) VBN(killed)Finally, applying the rule: VP(VBD(was) VP-C(x0:VBN PP(IN(by) x1:NP-C))) ?
?
x1 x0results in the final phrase: VP(VBD(was) VP-C(VBN(killed) PP(IN(by) NP-C(NPB(DT(the) NNS(police))))))Table 1: By applying applying four rules, a Chinese verb phrase is translated to English.the translation process itself, using rules from verylarge, automatically learned rule sets.
DerivTool canbe adapted to visualize other syntax-based MT mod-els, other tree-to-tree or tree-to-string MT models, ormodels for paraphrasing.2 Translation FrameworkIt is useful at this point to give a brief descrip-tion of the syntax-based framework that we workwith, which is based on translating Chinese sen-tences into English syntax trees.
Galley et al (2004)describe how to learn hundreds of millions of tree-transformation rules from a parsed, aligned Chi-nese/English corpus, and Galley et al (submitted)describe probability estimators for those rules.
Wedecode a new Chinese sentence with a method simi-lar to parsing, where we apply learned rules to buildup a complete English tree hypothesis from the Chi-nese string.The rule extractor learns rules for many situations.Some are simple phrase-to-phrase rules such as:NPB(DT(the) NNS(police)) ?
?0This rule should be read as follows: replace the Chi-nese word ?0 with the noun phrase ?the police?.Others rules can take existing tree fragments andbuild upon them.
For example, the ruleS(x0:NP-C x1:VP x2:.)
?
x0 x1 x2takes three parts of a sentence, a noun phrase (x0),a verb phrase (x1), and a period (x2) and ties themtogether to build a complete sentence.
Rules alsocan involve phrase re-ordering, as inNPB(x0:JJ x1:NN) ?
x1 x0This rule builds an English noun phrase out of anadjective (x0) and a noun (x1), but in the Chinese,the order is reversed.
Multilevel rules can tie severalof these concepts together; the ruleVP(VBD(was) VP-C(x0:VBN PP(IN(by) x1:NP-C)))?
?
x1 x0takes a Chinese word ?
and two English con-stituents ?
x1, a noun phrase, and x0, a past-participle verb ?
and translates them into a phraseof the form ?was [verb] by [noun-phrase]?.
Noticethat the order of the constituents has been reversed inthe resulting English phrase, and that English func-tion words have been generated.The decoder builds up a translation from theChinese sentence into an English tree by apply-ing these rules.
It follows the decoding-as-parsingidea exemplified by Wu (1996) and Yamada andKnight (2002).
For example, the Chinese verbphrase ?
?0 ? (literally, ?
[passive] policekill?)
can be translated to English via four rules (seeTable 1).3 DerivToolIn order to test whether good translations can be gen-erated with rules learned by Galley et al (2004),we created DerivTool as an environment for interac-tively using these rules as a decoder would.
A userstarts with a Chinese sentence and applies rules oneafter another, building up a translation from Chineseto English.
After finishing the translation, the usercan save the trace of rule-applications (the deriva-tion tree) for later analysis.We now outline the typical procedure for a userto translate a sentence with DerivTool.
To start, theuser loads a set of sentences to translate and choosesa particular one to work with.
The tool then presentsthe user with a window split halfway up.
The top98Figure 1: DerivTool with a completed derivation.half is the workspace where the user builds a transla-tion.
It initially displays only the Chinese sentence,with each word as a separate node.
The bottom halfpresents a set of tabbed panels which allow the userto select rules to build up the translation.
See Fig-ure 1 for a picture of the interface showing a com-pleted derivation tree.The most immediately useful panel is called Se-lecting Template, which shows a grid of possible En-glish phrasal translations for Chinese phrases fromthe sentence.
This phrase grid contains both phraseslearned in our extracted rules (e.g., ?the police?from earlier) and phrases learned by the phrase-based translation system (Och and Ney, 2004)1.
Theuser presses a grid button to choose a phrase to in-clude in the translation.
At this point, a frequency-1The phrase-based system serves as a sparring partner.
Wedisplay its best decoding in the center of the screen.
Note thatin Figure 1 its output lacks an auxiliary verb and an article.ordered list of rules will appear; these rules trans-late the Chinese phrase into the button-selected En-glish phrase, and the user specifies which one to use.Often there will be more than one rule (e.g., ?may translate via the rule VBD(killed) ?
? orVBN(killed) ?
?), and sometimes there are norules available.
When there are no rules, the buttonsare marked in red, telling us that the phrase-basedsystem has access to this phrasal translation but ourlearned syntactic rules did not capture it.
Other but-tons are marked green to represent translations fromthe specialized number/name/date system, and oth-ers are blue, indicating the phrases in the phrase-based decoder?s best output.
A purple button indi-cates both red and blue, i.e., the phrase was cho-sen by the phrase-based decoder but is unavailablein our syntactic framework.
This is a bad combina-tion, showing us where rule learning is weak.
The99remaining buttons are gray.Once the user has chosen the phrasal rules re-quired for translating the sentence, the next step isto stitch these phrases together into a complete En-glish syntax tree using more general rules.
These arefound in another panel called Searching.
This panelallows a user to select a set of adjacent, top-levelnodes in the tree and find a rule that will connectthem together.
It is commonly used for building uplarger constituents from smaller ones.
For example,if one has a noun-phrase, a verb-phrase, and a pe-riod, the user can search for the rule that connectsthem and builds an ?S?
on top, completing the sen-tence.
The results of a search are presented in a list,again ordered by frequency.A few more features to note are: 1) loading andsaving your work at any point, 2) adding free-formnotes to the document (e.g.
?I couldn?t find a rulethat...?
), and 3) manually typing rules if one cannotbe found by the above methods.
This allows us tosee deficiencies in the framework.4 How DerivTool HelpsFirst, DerivTool has given us confidence that oursyntax-based framework can work, and that the ruleswe are learning are good.
We have been able tomanually build a good translation for each sentencewe tried, both for short and long sentences.
In fact,there are multiple good ways to translate sentencesusing these rules, because different DerivTool userstranslate sentences differently.
Ordering rules byfrequency and/or probability helps us determine ifthe rules we want are also frequent and favored byour model.DerivTool has also helped us to find problemswith the framework and to see clearly how to fixthem.
For example, in one of our first sentenceswe realized that there was no rule for translat-ing a date ?
likewise for numbers, names, cur-rency values, and times of day.
Our phrase-basedsystem solves these problems with a specializeddate/name/number translator.
Through the processof manually typing syntactic transformation rulesfor dates and numbers in DerivTool, it became clearthat our current date/name/number translator did notprovide enough information to create such syntac-tic rules automatically.
This sparked a new area ofresearch before we had a fully-functional decoder.We also found that multi-word noun phrases, suchas ?Israeli Prime Minister Sharon?
and ?the FrenchAmbassador?s visit?
were often parsed in a way thatdid not allow us to learn good translation rules.The flat structure of the constituents in the syntaxtree makes it difficult to learn rules that are generalenough to be useful.
Phrases with possessives alsogave particular difficulty due to the awkward mul-tilevel structure of the parser?s output.
We are re-searching solutions to these problems involving re-structuring the syntax trees before training.Finally, our tool has helped us find bugs in oursystem.
We found many cases where rules wewanted to use were unexpectedly absent.
We eventu-ally traced these bugs to our rule extraction system.Our decoder would have simply worked around thisproblem, producing less desirable translations, butDerivTool allowed us to quickly spot the missingrules.5 ConclusionWe created DerivTool to test our MT frameworkagainst real-world data before building a fully-functional decoder.
By allowing us to play the roleof a decoder and translate sentences manually, it hasgiven us insight into how well our framework fitsthe data, what some of its weaknesses are, and howit compares to other systems.
We continue to useit as we try out new rule-extraction techniques andfinish the decoding system.ReferencesChris Callison-Burch, Colin Bannard and Josh Schroeder.2004.
Improved statistical translation through editing.EAMT-2004 Workshop.Ann Copestake and Dan Flickinger.
2000.
An open sourcegrammar development environment and broad-coverage En-glish grammar using HPSG.
Proc.
of LREC 2000.Michel Galley, Mark Hopkins, Kevin Knight, and DanielMarcu.
2004.
What?s in a translation rule?
Proc.
of NAACL-HLT 2004.Franz Och and Hermann Ney.
2004.
The alignment templateapproach to statistical machine translation.
ComputationalLinguistics, 30(4).Noah A. Smith and Michael E. Jahr.
2000.
Cairo: An Align-ment Visualization Tool.
Proc.
of LREC 2000.Dekai Wu.
1996.
A polynomial-time algorithm for statisticalmachine translation.
Proc.
of ACL.Kenji Yamada and Kevin Knight.
2001.
A syntax-based statis-tical translation model.
Proc.
of ACL.Kenji Yamada and Kevin Knight.
2002.
A decoder for syntax-based statistical MT.
Proc.
of ACL.100
