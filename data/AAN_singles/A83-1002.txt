PROBLEMS IN NATURAL-LANGUAGE INTERFACE TO DSMSWITH EXAMPLES FROM EUFIDMarjorie TempletonJohn BurgerSystem Development CorporationSanta Mortice, CaliforniaABSTRACTFor five years the  End-User FriendlyInterface to Data management (EUFID) pro-ject team at System Development Corpora-tion worked on the design and implementa-tion of a Natural-Language Interface(NLI) system that was to be independentof both the application and the databasemanagement system.
In this paper wedescribe application, natural- languageand database  management problems involvedin NLI development, with specific refer-ence to the EUFID system as an example.I INTRODUCTIONFrom 1976 to  1981 SDC was invo lvedin  the  deve lopment  o f  the  End-UserFriendly Interface to Data management(EUFID) system, a natura l - language inter-face (NLI) that is designed to beindependent of both the application andthe underlying database management system(DBMS).
\[TEMP79, TEMP80, BURG80,BURG82\].
The EUFID system permits usersto communicate with database managementsystems in natural English rather thanformal query languages.
It is assumedthat the application domain is welldefined and bounded, that users share acommon language to address the applica-tion, and that users may have littleexperience with computers or DBMSs butare competent in the application area.At least three broad categories ofissues had to be addressed during EUFIDdevelopment, and it is apparent that theyare common to any general natural-language interface to database managementsystems.The first category involves theapplication: how to character ize  therequirements of the human-machine dialo-gue and interaction, capture that infor-mation efficiently, formalize the infor-mation and incorporate that knowledgeinto a framework that can be used by thesystem.
The major problems in this areaare knowledge acquisition and representa-tion.
For many NLI systems, bringing upa new application requires extensiveeffort by system designers with coopera-tion from a representative set of end-users.
Tools that could assist inautomating this process are badly needed.The second set of issues involveslanguage processing techniques: how toassign constituent structure andinterpretation to queries using robustand general methods that al low extensionto additional lexical items, sentencetypes and semantic relationships.
SomeNLI systems dist inguish the assignment ofsyntactic structure, or  parsing, from theinterpretation.
Other systems, includingEUFID, combine information about consti-tuent and semantic structure into anintegrated semantic grammar.The third class involves databaseissues: how to actual ly perform theintent of the natural- language questionby formulating the correct structuredquery and eff ic iently navigat ing throughthe database to retrieve the rightanswer.
This involves a thorough under-standing of the DBMS structure underlyingthe appl icat ion,  the operations and func-tions the query language supports, andthe nature and volati l i ty of the data-base.Obviously issues in these threeareas are related, and the knowledgeneeded to deal with them may be distr i-buted throughout a natura l - languageinterface system.
The purpose of thispaper is to show how such issues might beaddressed in NLI development, with illus-trations from EUFID.The next section includes a briefreview of related work, and an overviewof the EUFID system.
The third sectiondescribes the goals that EUFID achieved,and section four discusses in detail ~omeof the major application, language, anddatabase problems that arose.
Sectionfive suggests guidelines for determiningwhether an application is an appropriatetarget for a natural- language interface.II BACKGROUNDOver the past two decades a consid-erable amount of work has gone into thedevelopment of natural-language systems.Early developments were in the areas oftext processing, syntactic parsing tech-niques, machine translation, and earlyattempts at Engl ish- language questionanswering systems.
Several earlyquest ion-answering experiments arereviewed by R. F. Simmons in \[SIMM65\].Waltz has edited a col lect ion of shortpapers on topics related to natural-language and artificial intel l igence in asurvey of NLI research \[WALT77\].
A sur-vey of NLIs and evaluation of severalsystems with respect to  their applicabil-ity to command and control environmentscan be found in \[OS179\].A.
RELATED WORKWhile few NLIs have reached the com-mercial marketplace, many systems havecontr ibuted to advancing the state of theart.
Several representative systems andthe problems they addressed are describedin this section.i.
CONVERSE \[KELLT1\] used formal syn-tactic analysis to generate surface-and deep-structure parsings togetherwith formal semantic transformationrules to  produce queries for abui lt- in relational DBMS.
It waswritten in SDC LISP and ran on IBM37@ computers.
Started in 1968, itwas one of  the first natural-language processors to be built forthe purpose of querying a separatedata management system.2.
LADDER \[HEND77\] was designed toaccess large distr ibuted databases.it is implemented in INTERLISP, runson a PDP-I@, and can interface todifferent DBMSs with proper confi-guration.
It uses a semantic gram-mar and, like EUFID and most NLIs, adi f ferent grammar must be definedfor each application.3.
The Lunar Rocks system LSNLIS\[WOOD72\] was the first to use theAugmented Transit ion Network (ATN)grammar.
Wrl~ten in LISP, ittransformed formally parsed ques-tions into representations of thefirst-order predicate calculus fordeductive processing against abuilt- in DBMS.4.
PHLIQAI \[SCHA77\] uses a syntacticparser which runs as a separate passfrom the semantic understandingpasses.
This system is mainlyi nvo lved  w i th  prob lems o f  semant icsand has three  separate  layers  o fsemantic understanding.
The layersare called "English FormalLanguage", "World Model Language",and "Data Base Language" and appearto correspond roughly to the "exter-nal", "conceptual",  and "internal"views of data as descr ibed by C. J.Date \[DATE77\].
PHLIQAI can inter-face to a var iety of database struc-tures and DBMSs.5.
The Programmed LANguage-basedEnquiry System (PLANES) \[WALT78\]uses an ATN based parser and asemantic case frame analysis tounderstand questions.
Case framesare used to handle pronominal andel l ipt ical reference and to generateresponses to  clar i fy part ia l lyinterpreted questions.6.
REL \[THOM69\], init ial ly writtenent irely in assembler code for anIBM36@, has been in cont inuousdevelopment since 1967.
REL al lowsa user to make interactive exten-sions to the grammar and semanticsof the system.
It uses a formalgrammar expressed as a set of gen-eral re-write rules with semantictransformations attached to eachrule.
Answers are obtained from abui lt - in database.7.
RENDEZVOUS \[CODD74\] addresses theproblem of certa inty regarding themachine's understanding of theuser's question.
It engages theuser in dialogue to specify anddisambiguate the question and willnot route the formal query to therelational DBMS until the user issatisf ied with the machine'sinterpretation.8.
ROBOT \[HARR78\] is one of the few NLIsystems current ly avai lable on thecommercial  market.
It is the basisfor Cul l inane's OnLine English\[CULL80\] and Arti f ic ial  Intel l igenceCorporat ion's Intellect \[EDP82\].
Ituses an extracted version of thedatabase for lexical data to assistthe ATN parser.9.
TORUS \[MYLO76\], like RENDEZVOUS,engages the user in a dialogue tospecify and disambiguate the user'squestion.
It is a research orientedsystem looking at the problems ofknowledge representation, and someeffort has been spent on the under-standing of text as well as ques-tions.B.
OVERVIEW OF EUFIDEUFID is a general purpose natural-language front-end for database manage-ment.
The original design goals forEUFID were:- to be application independent.
Thismeans that the program must be tabledriven.
The tables contain the dic-tionary and semantic information andare loaded with appl icat ion-specif lcdata.
It was desired that thetables could be constructed by some-one other than the EUFID staff, sothat  users could build new applica-tions on their own.- to be database independent.
Thismeans that the organization of thedata in the  database must berepresentable in tables that drivethe query generator.
~ A databasereorganization that does not changethe semantics of the applicationshou ld  be t ransparen~ to  the  user .- to be DBMS independent.
This meansthat it must be able to generaterequests to different DBMSs in theDBMS's query language and that theinterface of EUF~D to a differentDBMS should not require changes tothe  NLI modules.
Transferring thesame database with the same semanticcontent to another DBMS should betransparent to the natural-languageusers.- to run on a mini-computer that mightpossibly be different from the com-puter with the DBMS.- to have a fast response time, evenwhen the question cannot be inter-preted.
This means it must be ablequickly to recognize unanalyzableconstructs.- to handle nonstandard or poorly-formed (but, nevertheless, meaning-ful) questions.- to be portable to various machines.This means that the system had to be* We make a technical dist inctionbetween the words "question" and"query".
A question is any stringentered by the user to the EUFIDanalyzer, regardless of theterminating punctuation.
This isconsistent with the design sinceEUFID treats all input as a requestfor information.
A query is a formalrepresentation of a question ineither the EUFID intermediatelanguage IL, or in the formal querylanguage of a DBMS.written in a high level language;init ial ly a customer required codeto be written in FORTRAN, later wewere able to use the "C" programminglanguage.- to support different views of thedata for security purposes.The design which met these requirementsis a modular system which uses an Inter-mediate Language (IL) as the output ofthe  natural- language analysis system\[BURG82\].
This language represents, inmany ways, the union of the capabi l i t iesof many "target" DBMS query languages.The EUFID system consists of threemajor modules, not counting the DBM3 (seeFigure I).
The analyzer (parser) moduleis table driven.
It is necessary only toproperly build and load the tables tointerface EUFID to a new application.Mapping a question from its d ict ionary(user) representation to DBMS representa-tion is handled by mapping functions con-tained in a table and applied by aseparate  module, the  "mapper".
Each con-tent (application dependent) word in thedict ionary has one or more mapping func-tions defined for it.
A final stage ofthe mapper is a query- language generatorcontaining the syntax of IL.
This stagewrites a query in IL using thegroup/field names found by the mapper torepresent the user's concepts and thestructural relationships between them.This design satisfies the  requirement ofapplication independence.ENGLISHQUESTION P, ESPO~SEt tFigure i: EUFID Block DiagramFor each different DBMS used by aEUFID application, a "translator" moduleneeds to be written to convert a query inIL to the equivalent in the DBMS querylanguage.
This design satisfies therequirement of DBMS independence.Other modules are the system con-troller, a "help" module, and a "synonymeditor".
An "Application DefinitionModule" is used off-l ine to assist in thecreation of the run-time applicationdescription tables.The following subsections descrloeeach of the modules of the EUFID system,and give our motivat ion for design.i.
A~plication Definit ionsBringing up a new appl ication is along and complex process.
The databasedef init ion must be transmitted to EUFID.A large corpus of "typical" user ques-tions must be col lected from a represen-tative set of users and from these thedict ionary and mapping tables aredesigned.
A "semantic graph" is definedfor the application.
This graph isimplicit ly realized in the dict ionarywhere the nodes of the graph are thedef in i t ions of English content words andthe connect iv i ty  of the graph is impliedby the case-structure relat ionshipsdefined for the nodes.All d ict ionary and mapping-funct iondata are then entered into computer fileswhich are processed by the Appl icat ionDefinit ion Module (ADM) to produce therun-time tables.
These final tables arecomplex structures of pointers, characterstrings, and index tables, designed todecrease access time to the informationrequired by the analyzer and mappermodules.The ADM, typically, needs to be runseveral times to "debug" the tables.EUFID interfaces to  three appl icat ionscurrent ly exist, and building tables foreach new appl icat ion took less time thanthe previous one, but  it still requiresseveral staff-months to bring up a newapplication.a.
User-View RepresentationAll information on the user's viewof the database is kept in the dict ion-ary.
The dict ionary consists of twokinds of words and definit ions.
Functionwords, such as preposit ions and Conjunc-tions, are pre-stored in eachappl icat ion's dict ionary and are used bythe analyzer for direction on how to con-nect the semantic-graph nodes duringanalysis.
Content words are appl icationdependent.
The d -c rOons  of contentwords are semantic-graph nodes.
The con-nectivity o?
the graph is indicated bysemantic case slots and pointers con-tained in the nodes.
A form ofsemant ic -case  is used to  indicate theattr ibutes of an entity (e.g., adjec-tives, preposit ional phrases, and othermodif iers of a noun).b.
Mapping FunctionsThe list of mapping functions isderived from the dictionary.
Every pos-sible connection of every node has to beconsidered.
Frequently, desig~ :o,~-s iderat ions in the mapping- funct ion listnecessitate going back and modifying thecontent of the dict ionary.
This is anexample of the over lap of the l inguist icand database issues in assigning aninterpretation to a question.c.
Database Representat ionThe structure of  the data  in theuser's database is represented in twotables, called the CAN (for canonical)and REL (for relationships) tables.
Tak-ing advantage of the fact that any data-base can be represented in relationalform, EUFID lists each database group asif it were a relation.
Group-to-groupl inkage (represented in the REL table) isdealt  with as if a join* were necessaryto implement the link.
For hierarchicaland network DBMSs the join will not beneeded: the link is "wired in" to thedatabase structure.
EUFID neverthelessassumes a join mainly in order to faci l i -tate the writ ing of group-to-group linksin IL, which is a relational language.The CAN table includes database-speci f icinformation for each field (attribute) ofeach group (relation), such as fieldname, containing group, name of domainfrom which attr ibuted gets its values,and a pointer to a set of conversionfunctions for numeric values which can bebe used to convert from one unit of meas-ure to another (e.g., feet to meters).These data are used by the run-t imemodules which map and translate thetree-structured output of the analyzer toIL on the actual group/f ie ld names of thedatabase, and then co the language of theDBMS.
These modules are discussed in thenext sections.2.
The EUFID AnalyzerThe current version of the EUFIDanalyzer employs a variant of the Cocke-Kasami-Younger algorithm for parsing itsinput.
This classical nonpredict ivebottom-up algorithm has been used in afamily of "chart parsers" developed byKay, Earley, and others \[AHO72\].
Themain features of these parsers are: (i)They use arbitrary context- free grammars.There are no restr ict ions on rules whichhave left-recursion or other character is-tics which sometimes cause diff iculty.
(2) They produce all possible parses of agiven input string.
The grammars theyuse may be ambiguous at either thenonterminal-  or terminal-symbol levels.In natural - language processing, thisallows for a precise representat ion of* The term "join" refers to a compositeoperation between two relations in arelational DBMS.both the syntactic and lexical ambigui-ties which may be present in an inputsentence.
(3) They provide partialparses of the input.
Each non-terminalsymbol derives some input substring.Even if no such substring spans theentire sentence, i.e., no complete parseis achieved, analyses of various regionsof  the  sentence  are  available.
(4) Theyare conceptual ly straightforward and easyto  implement.
The speed and storage con-siderations which have kept such parsersfrom being widely used in compilers areless relevant in the analysis of  shortstrings such as queries to a DBMS.The grammar used by the EUFID parseris essential ly semantic.
The symbols ofthe grammar represent  the  concepts under-lying lexical items, and the  rulesspecify the ways in which these conceptscan be combined.
More spec i f i ca l l y ,  theconcepts are organ ized  into a case sys-tem.
Each rule states that a given pairof constituents can be linked if the con-ceptua l  head of one constituent fills acase on the conceptual head of the  other.A degree of context  sensit ivity isachieved by attaching predicates to therules.
These pred icates  b lock  applica-tion of the  rules unless certain (usuallysyntactic) conditions hold true.
Theparser uses syntactic information only"on demand", that is, only when suchinformation is necessary to reso lvesemantic ambiguities.
This adds to itscoverage and robustness, and makes itrelatively insensitive to the phrasingvariations which must be explicit lyaccounted for in many other systems.3.
MappingThe mapper module converts the out-put of the analyzer to input for thetranslator module.
Analyzer output is atree structure where the nodes aresemantic-graph nodes corresponding to thecontent words in the user's question andobtained from the dictionary.Input to the translator module is astring in the syntax of IL which containsthe names of actual groups and fields inthe database.
The mapping algorithm,thus, has to make several levels ofconversion simultaneously:- it must convert a tree structureinto a linear string of tokens,- it must convert semantic-graph nodesinto database group- and field-names, and- it must convert the connectivity ofthe tree (representing concept-to-concept linkage in English) into the(frequently very different) group-to-field and group-to-group connec-tions of the  database.The mapper makes use of a table ofmapping functions.
The table contains atleast one mapping function for every con-tent word in the dictionary.
Theanalyzer's tree is traversed bottom up,applying mapping functions to each nodeon the  way.
Mapping funct ions  are con-text  sensit ive with respect to thosenodes below it in the tree: nodes thathave already been mapped.
A new tree isgradual ly formed and connected this way.Mapping functions may indicate that themap of a semantic-graph node is a data-base node (that is, a group or fieldname), or  a pre-connected sub- t ree  ofdatabase nodes.
The mapping function mayalso indicate removal of a database nodeor modif icat ion to the existing structureof the tree being constructed.The new t ree  i s  c reated  in  te rms  o fthe  database  groups  and f ie lds  and i t ss t ruc ture  re f lec ts  the  connect iv i ty  o fthe database.
A final stage of themapper traverses this new tree and gen-erates the EL statement of the queryusing a table of the syntax and keywordsof EL and the database names from thetree.An alternative method of mappingthat i s  now being investigated involvesbreaking the process into two basicparts.
The first step would be to mapthe tree output  o f  the analyzer to  an I Lquery on what C. J.
Date calls the "con-ceptual schema" of the database \[DATE77\].A second step would take this IL inputand re-arrange the schema connectivity(and names of groups and fields) fromthat of the conceptual schema to that ofthe actual target database, generatinganother IL query as input to the currenttranslators.4.
Trans la t in~The final run-time module in EUFIDis a syntax translator that converts ILto the actual DBMS query language.
Ifnecessary, the translator can also addaccess-path information related to data-base search.
Currently, two translatorshave been written.
One converts IL toQUEL, a relatively simple conversion intothe language of the relational databasemanagement system INGRES \[STONY6\].
Theother translator converts IL into thequery language of the World-Wide DataManagement System (WWDMS) \[HONE76\] usedby the Department of Defense, and alsohandles additional access path informa-tion.
This translator was quite diff i-cult to design and build because of thehighly procedural nature of the WWDMSquery system.The output of a translator is sentto the appropriate DBMS.
In the EUFIDsystem running at SDC, a QUEL query issubmitted direct ly to INGRES running onthe same PDP-II/70 as EUFID.
For testingpurposes, queries generated by the WWDMStranslator were transmitted from a PDP-11/70 to a Honeywell H6000 with a WWDMSdatabase.5.
Appl icat ion Descript ionEUFID runs on three di f ferent appli-cation databases.
The METRO appl icat ioninvolves monitoring of shipping transac-tions between companies in a city called"Metropolis".
There are ten companieslocated in any one of three neighbor-hoods.
Each company rents warehousespace for shipping/recelving transac-tions, and has local off ices whichreceive goods.
The data is organizedtelat ional ly using the INGRES databasemanagement system.
That means that thereare no navigational links stored in therecords (called "relations") and there isno predefined "root" to the databasestructure.
Access may be made from anyrelation to any other relation as long asthere is a field in each of the two rela-tions which has the same "domain" (set ofvalues).AIREP (ADP Incident REPorting) is anetwork database, implemented in WWDMS.It contains reports about hardware andsoftware failures and resolution of theproblems in a large computer system.Active problems are maintained in anactive file and old, solved problems aremoved to an historical file.
If a prob-lem \[s reported more than once, an abbre-viated record is made for the addit ionalreport, called the "duplicate incident"record.
This means that there are fourbasic type of report: active incidents,dupl icate incidents, historicalincidents, and historical dupl icateincidents.
In addition, there arerecords about sites, problems, and solu-tions.The APPLICANT database is a rela-tional database implemented in INGRESthat contains information about jobapplicants and their backgrounds.
Thecentral entity is the "applicant", whileother relations describe the appl icant'sspecialties, education, previous employ-ment, computer experience, and inter-views.Each database has dif ferent featureschat may present problems for a natural-language interface but which are typicalof 'real-world' applications.
METRO hasrelatively few entit ies but has complexrelationships among them.
APPLICANT hasmany updates and many dif ferent values,some coming from open-ended domains.AIREP has a network database structureand contains the same data structure infour di f ferent files.III LEVEL OF SUCCESSMost of the EUFID design goals wereactual ly met.
EUFID runs on a mini-computer, a DEC PDP 11/70.
It is appli-cation, database, and DBMS independent.A typical quest ion is analyzed, mappedand translated in five to fifteen secondseven with grammatica l ly  incorrect input.The analyzer contains a good spel-ling corrector and a good morphologyalgorithm that strips inf lect ional end-ings so that all inflected forms of wordsneed not be stored expl icit ly.
A"synonym editor" permits the user toreplace any word or string of words inthe dic ionary with another word orstring, to accommodate personal jargonand expressabi l i ty.
A "Concept GraphEditor s allows a database administratorto modify tables and define user profi lesso that di f ferent users may have l imitedviews of the data for security purposes.The analysis strategy, based on asemantic grammar, permits easy andnatural paraphrase recognit ion, althoughthere are l inguist ic constructs it cannothandle.
These are discussed below.An English word may have more thanone def init ion without complicat ing theanalysis strategy.
For example, "ship"as a vessel and as a verb meaning "tosend" can be defined in the same dict ion-ary.
Words used as database values, suchas names, may also have mult iple def ini -tions, e.g., "New York" used as the nameof both a city and a state.The mapper, despite its many l imita-tions, can correct ly map almost all treesoutput by the analyzer.
It is able tohandle English conjunctions,  mapping themappropriately to logical ANDs or ORs, andunderstanding that some "ands" may needto be interpreted as OR and vice-versaunder certain circumstances.
It is ableto generate calls on DBMS calculat ions(e.g., average) and user-defined func-tions (e.g., marine great-c irc le dis-tance) if the user-function exists and issupported by the DBMS.Questions involving time are inter-preted in a reasonable way.
Functionsare defined for "between" and "during" inthe METRO application.
The AIREP appl i -cation allows time comparisons such as"What system was running when incidentJ123 occurred" which require a test tosee if a point in time is within aninterval.The mapper can translate "uservalues" (e.g., "Russian") to databasevalues (e.g., "USSR"), and convert oneunit of measure (e.g., feet) to another(e.g., meters).EUFID can in ter face  to  very  complexrelational and CODASYL-type databaseshaving diff icult  nav igat ion  and para l le lstructures.
In the  AIREP application acons is tent  WWDMS navigational methodologyi s  used to  access  non-key  records .
Thesystem can also map to the  parallel, butnot  identical, structures for duplicateand historical incidents.In  the INGRES applications, EUFID isab le  to use and correctly map to =re la -t ionsh ip  re la t ions"  wh ich  re la te  two ormore o ther  re la t ions .
For  example ,  theMETRO relation =cw" conta ins  a companyname, a warehouse name, and a date.
Thisrepresents  the  in i t ia l  bus iness  contact.A user  might  ask, =When d id  Co lon ia ls ta r t  to  do bus iness  w i th  Super io r?
= or?
When d id  bus iness  beg in  between Co lon ia land Super io r?
= , e i ther  o f  wh ich  must  ~o inboth  the  company ( "c  =) and the  warehouse('w') relations to  the =cw" relation.The system cont ro l  module keeps ajournal of all user-system interactiontogether with internal module-to-moduledata such as the IL for the user's ques-tion and the generated DBMS query.
Thesystem also employs a very effective HELPmodule which, under cer ta in  cir-cumstances, is context sensitive to  theproblem affecting the user.IV PROBLEMSThis section describes problemsassociated with EUFID development thatappear to be common to natural- languageinterfaces to database management sys-tems.
They are loosely classif ied intothe major areas Of application, languageand database management issues, althoughthere may be overlap.
Criteria forevaluating whether an application isappropriate for a natural- languagefront-end are also described.A.
APPLICATION DEFINITION PROBLEMSThe primary issue in this area isconcerned with problems of defining,creating, and bringing up the necessarydata for a new application.
The discus-sion points out the diff icult ies associ-ated with systematic knowledge acquisi-tion.I.
User ModelA single database may be used bydifferent groups of users for differentpurposes.
For example, some users of theAPPLICANT database may wish to fill aspecific Job opening while others maycollect statist ics on types of appli~cants.
The language used for these twofunctions can be quite different, and itis necessary to have extensive interac-tion with cooperative users in order tocharacterize the kinds of dialogues theywill have with the system.Not on ly  must representativel anguage protoco ls  be co l lec ted ,  butdesired responses must be understood.For example, to answer a question such as=What is the  status of our forces inEurope = , the system must know whether'our' refers to U.S. or NATO or someother unit.The importance of this interactionbetween potential users and systemdeve lopers  should not  be underestimated,as  i t  i s  the  bas i s  fo r  de f in ing  much ofthe knowledge base needed by the system,and may also be the  basis for eventualuser acceptance or  rejection of the NLIsys tem.2.
Value Recogn i t ionA "value = is a specific datum storedin the database, and is the smallestpiece of data obtainable as the result ofa database query.
For example, i nresponse  to  the  quest ion  "What companiesin North Hills shipped light freight toSuperior?
= the METRO DBMS returns twovalues: "Colonial" and "Supreme'.
Valuescan also be used in a query to qualify orselect certain records for output, e.g.,in the  above question "North Hills" and"Superior" are values that must berepresented in the query to the DBMS.
Aslong as the alphanumeric values used in aparticular database field are the same aswords in the  English questions, there areno diff icult problems involved in recog-nizing values as selectors in a query.There are three basic ways to recog-nize these value words in a question.They can be explicit ly listed in the dic-tionary, recognized by a pattern or con-text, or found in the database itself.If the value words are stored in thedictionary, they can be subject to spel-ling correction because the spellingcorrector uses the dict ionary to locatewords which are a close match to unrecog-nized words in a question.
This means,though, that all possible values andvariant legitimate spell ings of valuesfor a concept must be put either into thedict ionary or into the synonym list.This is reasonable for concepts whichhave a small and controlled set of_values* such as the names of the* A set of va lues  is called a "domain ,r.companies in METRO, but may becomeunwieldy for large sets of values.If a value can be recognized by apattern, it is not necessary to itemizeall instances in the dict ionary.
Forexample, a date may be entered as"yy/mm/dd" so that any input matching thepattern "nn/nn/nn" is recognized as adate.
This is the approach used fordates and for names of appl icants in theAPPLICANT database, where names of peoplematch the pattern "I .
I .Lastname".In another approach, OnLine English\[CULL80\] and Intellect \[HARR78, EDP82\](two var iat ions of ROBOT) used the data-base to recognize values.
This is asat isfactory solution if the database issmall or if the small number of di f ferentvalues is stored in an index accessibleto the NLI, and if the values in thedatabase are suitable for use in Englishquestions.Each of these solutions has disad-vantages.
If values are stored in thedict ionary there may be many dif ferentways to spell each particular value.
Forexample, the company name for "SystemDevelopment Corporation" may also begiven as "S.D.C.
", "S D C", or "SystemDevelopment Cotp".
While each dif ferentspell ing could be entered as a synonymfor the "correct" spell ing in the data-base, this would result in an enormousprol i ferat ion of the dict ionary entriesand problems with concurrency controlbetween the updates directed to the datamanagement system and the updates to thedictionary.
A creative solution might heto define rules for synonym generationand apply them to database updates.A somewhat different example is fromthe APPLICANT appl ication which has manyopen ended domains, such as names ofapplicants and previous employers.
Inthis case, the appl ication designer mayhave to treat certain fields as"retr ieve-only", meaning that the datacan be asked ~or but not used as a selec-tion criterion.
A database with a largenumber of retr ieve-only fields may be apoor candidate for an NLI.Patterns can be used only if theycan be enforced, and probably few valuesreally fit the patterns nicely.
Propernames ate a poor choice for patternsbecause of variat ions such as middle ini-tial or title such as "Dr." or "Jr.".Also, spell ing correction cannot be per-formed unless the value is stored in thedictionary.Finally, the solution of using thedatabase itself to recognize values isunsat is factory to a general NLI for any-thing other than trivial databases,unless an inverted index of values iseasi ly accessible.
There are the prob-lems of spell ing correct ion and synonymsfor database values, the inef f ic iencyinvolved in accessing the DBMS forevery unrecognized word, and the di f f i -culty of knowing which fields in thedatabase to search.3.
Semantic Variat ion By ValueDatabases are general ly  designedwith a minimum number of d i f ferent  recordtypes.
When there are entit ies which aresimilar, but possibly have a small numberof attr ibutes which are not shared, theentit ies will be stored in the samerecord type with null values for theattr ibutes that do not apply.
The user,in his questions, may view these similarentit ies as very di f ferent entit ies andtalk about them dif ferently.We did not encounter the problemwith METRO or AIREP.
For example, inMETRO, the user asks the same type ofquest ions about the company named "Colo-nial" as about the company named"Supreme".
In APPLICANT, however, eachappl icant has a set of "specialt ies" suchas "computer programmer", "accountingclerk", or "gardener".
These are allstored as values of the specialty fieldin the database.
Unfortunately, in thiscase di f ferent specialt ies evoke com-pletely di f ferent concepts to the enduser.
The user may ask quest ions suchas, "What programmers know COBOL?
", "Whocan program in COBOL?
", and "How manyappl icants with a specialty in computerprogramming applied in 1982?".
Noticethe new nouns and verbs that are intro-duced by this specialty name.A value domain such as specialt iesshould be handled with an ISA hierarchy.Each di f ferent type of specialty such asgardener or programmer could have a dif-ferent concept that is a subset of theconcept "specialty".
Some quest ionscould be asked about all specialt ies andothers could be directed only to certainsubconcepts.
However, there is no \[SAhierarchy in EUFID, and it would havebeen ineff icient to treat each specialtyand subspecialty as a separate conceptsince there are 30 specialt ies and 196subspecialt ies.
Therefore, we requiredthe users to know the exact values, toknow which values are for specialt ies andwhich are for subspecialt ies, and to askquestions using the values only as nouns.This is not "user friendly".I0Even if it were possible to build adifferent concept for each differentskill, there is an update problem.
Whena new value is added to a va lue domainwhere there ace uniform semantics (as inadding a new company name in METRO), thenew value is simply attached to theexisting concept, when the new value hasdifferent semantics, the  newly associatedconcepts, nouns, and verbs cannot beadded automatically.
If the  NLI supportsan ISA hierarchy, someone wi l l  need tocategor i ze  the  new value and add a newnode to  the  h ie rarchy  or  spec i fy  a pos i -t ion  in  the  h ie rarchy .4.
Automation of Def in i t ionA natura l - language in ter face  sys temwi l l  not  be pract i ca l  unt i l  a new app l i -ca t ion  can be installed easily.
"Easily"means that the end-user organization mustbe able to create and modify the drivingtables for the application relativelyquickly without the help of the NLIdeveloper, and must be able to use theNLI without restructuring the database.Each EUFID application required"handcrafted" tables that were built bythe development staff.
Each new applica-tion was done in less time than the pre-vious one, but still required severalstaff-months to bring up.
Clearly, thegoal of facil itating the building of thetab les  by  end users was not  met .Computer -ass i s ted  too ls  fo r  de f in ing  newapplications are a prerequisite for prac-tical NLIs.B.
LANGUAGE PROBLEMSThe basic approach to languageanalysis in EUFID involves a bottom upparser using a semantic grammar.
Thesymbols of the grammar are conceptsunderlying lexical items, and the rulesof the grammar ace based on a case frame-work.
Essentially syntactic informationis used only when needed to resolve ambi-guity.
The language features that thistechnique has to  handle are common to anyNLI, and some of the problem areas aredescribed in the following sections.I .
Anaphora and EllipsisTo support natural interaction it isdesirable to allow the use of anaphoricreference and elliptical constructionsacross sentence sequences, such as "Whatapplicants know Fortran and C?
", "Whichof them live in California?
", "InNevada?
", "How many know Pascal?'.
Oneof the biggest problems is to define thescope of the reference in such cases.
Inthe example, it is not clear whether theuser wishes to retrieve the set  of allapplicants who know Pascal or only thesubset  who l i ve  in  Nevada .One so lu t ion  i s  to  p rov ide  commandsthat al low users  to def ine  subsets  of thedatabase to which to address questions.This removes the ambiguity and speeds upretrieval time on a large database .
How-ever, it moves the NLI interaction towardthat of a structured query language, andforces the user to be aware of the levelof subset be ing  accessed.
It is alsodif f icult  to implement because a subsetmay i nvo lve  pro jec t ions  and jo ins  tobuild a new relation containing the sub-set.
The NLI must be able dynamical lyand temporari ly to change the mappingtables to  map to  this new relation.2.
Intell l~ent InteractionOne of the EUFID design goals was torespond promptly either with an answer orwith a message that the question couldnot be interpreted.
The system handlesspelling or typographical errors byinteracting with the user to  select thecorrect word.
However, when all of thewords are recognized but do not  connectsemantically, It is diff icult to identifya single point in analysis which causedthe failure.It is in this area that the absenceof a syntactic mechanism for determiningwel l - formedness was most not iceab le .There are times when a question has aproper syntactic structure, but containssemantic relationships unrecognizable tothe application as in "What is the loca-tlon of North Hills?".
A response of"Location is not defined for North Hillsin this appllcacion" should be derivablefrom the recognizable semant ic  failure.Similarly, it would be useful to have aframework for interpreting partial trees,as in the question "What companies doesMohawk ship to?"
where Mohawk is not arecognized word within the application.An appropriate response might be "Com-panies ship to receiving offices and com-panies; Mohawk is ne i ther  a receivingoffice nor a company.
The names ofoff ices and companies are .
.
. "
.Interpretation of partial analyses  is notpossible within the EUFID system; iteither succeeds or fails completely.3.
Yes/No QuestionsIn normal NLI interaction users maywish to ask "yes/no" questions, yet noDBMS has the abil ity to answer "yes" or"no" explicitly.
The EUFID mapper maps ayes/no question into a query which willretrieve some data, such as an "outputidentifier" or default name for a con-cept, if the answer is "yes" and no dataif the answer if "no".
However, theanswer may be "no" for several reasons.IIFor example, a "no" response to the ques-tion "Has John Smith been interviewed?
"may mean that the database has knowledgeabout John Smith and about interviews andSmith is not listed as having had aninterview*, or the database knows aboutJohn Smith and no data about interviewsis available.
A third possibi l i ty couldbe that the database has informationabout John Smith and his employmentsituation (already hired), and theresponse might include that information,as in "No, but he has already beenhired'.4.
Conjunct ionsThe scope  of conjunct ions is a dif-ficult problem for any parsing or analyz-ing algorithm.
The natural - language useof "and" and "or" does not necessar i lycorrespond to the logical meaning, as inthe question "List the appl icants wholive in Cal i fornia and Arizona.".
Multi-ple conjunct ions in a single question canbe ambiguous as in "which minor i ty andfemale appl icants know Fortran andCobol?'.
This could be interpreted withlogical "and" or with logical "or" as in"Which appl icants who are minor i ty orfemale know either Fortran or Cobol?
".The EUFID mapper will change English"and" to logical "or" when the twophrases within the scope of the conjunc-tion are values for the same field.
Inthe example above, an applicant has onlyone state of residence.uncertain whether they should be returnedin the answer.
It is also di f f icult  totake a complement of a set of data usingthe many data management systems that donot support set operators between rela-tions.Questions which require a "yes" or"no" response are di f f icul t  to answerbecause often the "no" is due to apresupposit ion which is invalid.
This isespecial ly  true with negation.
For exam-ple, if the user asks, "Does every com-pany in North Hills except Supreme useNH2?
", the answer may be "no" becauseSupreme is not in North Hills.The current implementation of EUFIDdoes not al low expl ic it  negation,although some negative concepts are han-dled such as "What companies ship to com-panies other than Colonial?".
"Otherthan" is interpreted as the "!-" operatorin exact ly the same way that "greaterthan" is interpreted as ">".C.
INTERPRETATION AND DATABASE ISSUESMany quest ions make perfect sensesemantical ly  but are di f f icult  to mapinto DBMS queries because of the databasestructure.
The problems become worsewhen access is through an NLI because ofincreased expectat ions on the part of theuser and because it may be di f f icul t  fora help system adequately to descr ibe theproblem to the user who is unaware of thedatabase structure.5.
NepptionNegative requests may contain expli-cit negative words such as "not" and"never" or may contain implicit negativessuch as "only", "except" and "other than"\[OLNE78\].
The interpretation of nega-tives can be very diff icult.
For exam-ple, "Which companies did not ship anyperishable freight in 1976" could meaneither "Which (of all the  companies)shipped no perishable freight in 1976?
"or "Which (of the companies that shipperishable freight) shipped none in1976?'.
Moreover, if some companies wereonly receivers and never shippers it is" - "~e is the important dist inct ionbetween a "closed world" database inwhich the assumption is that thedatabase covers the whole world (ofthe application) and an "open world"database in which it is understoodthat the database does not representall there is to the real world of theapplication.
In the open worlddatabase, which we encounter most ofthe time, a response of "not thatthis database knows of" might be moreappropriate.I.
IL LimitationsThe design of the IL is crit ical.It must be rich enough to supportretrieval from all the underlying DBMSs.However, if it contains capabi l i t ies thatdo not exist in a specif ic DBMS, it isdi f f icult  to describe this def ic iency tothe user.In APPLICANT, the user cannot getboth the major and minor fields of studyby asking "List appl icants and field ofstudy", because a l imitation in the EUFIDIL prevents making two joins between edu-cation and subject records.
This problemwas corrected in a subsequent version ofIL with the addit ion of a "range" state-ment similar to  that used by QUEL\[STON76\].The current IL does not contain an"EXISTS" or "FAILS" operator which cantest for the existence of a record.
Suchan operator is frequently used to test aninterrecord link in a network orhierarchical DBMS.
It is needed toexpress "What problems are unsolved?"
tothe AIREP application, which requires atest for a database link between a~Zproblem set and a solution set.2.
Mixed Case ValuesEUFID allows a value in the databaseto  be upper or lower case and will con-ver t  a value in the question either toall upper or all lower case in the IL, orleave it as input by  the user.
If thedatabase values are mixed case, it is notposs ib le  to  conver t  the  user ' s  input  to  as ing le  case .
I f  the  user  does  not  entereach le t te r  in the  proper  case ,  the  va luewill not  match.3.
Granular it~ DifferencesThe NLI user is not  expected tounderstand exactly how data is stored,and yet must understand something aboutthe granular ity of the data.
Time fieldsoften cause problems because time may beg iven  by year or  by fractions of  asecond.
Users  may make t ime compar i sonsthat require more granular ity than isstored in the  database.
For example, theuser can ask "What incidents werereported at SAC while system release 3.4was installed?".
If incidents wererepor ted  by day but system release dateswere given by month, the system wouldreturn i nc idents  which occurred in thedays of the month before the systemrelease was ins ta l led .4.
Nested QueriesA very simple question in Englishcan turn into a very complicated requestin the  query language if it involvesretrieval of data which must be used fo rqualif ication in another part of the samequery.
In IL these are called "nestedqueries".
Most of ten  some qualif icationneeds to be done both  "inside" and "out-side" the  clause of the query that doesthe internal retrieve.
For example, thequest ion  "What i nc ident  a t  SAC had thelongest  downt ime?"
f rom our  AIREP app l i -ca t ion  i s  expressed  in  I L  asretrieve \[INCA.
ID\]where (INCA.SITENAME = "SAC")and (INCA.DNTM -\[retrieve \[ max (INCA.DNTM)\]where (INCA.SITENAME = "SAC")})The nested part of the  query is enclosedin braces.
"INCA" is the database nameof the active incident records.
Noticethat removing the "INCA.SITENAME = 'SAC'"clause from either the inner or outerquery would result in an incorrect formu-lation of the question.A similar example from the METROapplication is the question, "What com-pany shipped more than the average amountof light freight in 198~?"
which will13generate  the  IL queryre t r ieve  \ [cc t .
scname\ ]where  (cc t .date  ?
198~)and (cc t .
l f  >-{ re t r ieve  \ [avg (cc t .
l f ) \ ]where (cct.date - 1980)})Here ,  =cct"  i s  the  name o f  the  company-to -company transaction relation.
"Scname" is the name of a shipping com-pany in this relation.
Note again thatthe  qua l i f i ca t ion  on "198~"  needs  to  bedone both  i ns ide  and outs ide  the  nestedpar t  o f  the  query.In the query language for INGRESsuch a request  i s  expressed  in  a mannervery  s imi l ta r  to  the  IL express ions .
ForWWDMS a very  complex  procedure  i s  gen-e ra ted .
In a l l  cases ,  the  DBMS needs  toanswer  the  inner  request  and save  theresu l t  fo r  usa in  qua l i fy ing  the  outerrequest .
There  are  many database  manage-ment sys tems that  cannot  hand le  suchquest ions  and these  I L  s ta tements  cannotbe translated into the system's querylanguage.5.
I ncons is tency  In RetrievalThe NLI presents a uniform view ofall databases  and DBMSs, but it is diff i -cult to truly mask all dif ferences in thebehav ior  o f  the  DBMSS because  they  do nota l l  p rocess  the  equ iva lent  query  in  thesame way.
For example, when data areretrieved from two relations in a rela-tional database, the two relations mustbe Jo ined  on a common attribute.
Theanswer forms a new relation which may bedisplayed to the  user or  stored.
Sincethe join clause acts as qualif ication, arecord (tuple) in either relation whichhas no corresponding tup le  in the  otherrelation does  not  participate in theresult.
This is a different concept fromthe hierarchical and network models wherethe system retrieves all records from amaster record and then retrievescorresponding records from a subfile.This difference can cause anomalies withretrieval.
For example, in a pure rela-tional system "List applicants and thei~interviews" would be treated as "Listapplicants who have had interviewstogether with their interview informa-tion."
A hierarch ica l  or network DBMSwould treat it as "List all applicants(whether or not  they have  been inter-viewed) plus any interview informationthat exists."
This second interpreta-tion is more likely to be the correctone.D.
OVERALL NLI DESIGNThere are several problems thataffect the selection of appl icat ions forthe NLI.
Some databases and data manage-ment systems may not be appropriate tar-gets for natural - language interfaces.Some DBMS functions may be dif f icult  tosupport.
It is important to have a clearunderstanding of these problems so thatthe NLI can mediate between the userview, as represented by the natural-language questions, and the underlyingdatabase structure.i.
~ Design Considerat ionFor any database there are natural-language quest ions that cannot be inter-preted because the concepts involved lleoutside the world of the database.
Ques-tions can also involve structural com-plexity that is not  representable in theDBMS query language.
A part icular ly  dif-ficult decis ion in the overall  design ofan NLI is the issue of where in the chainof events of processing a user's questioninto a DBMS query to trap these quest ionsand stop processing.One approach is to decide that if aquestion is not meaningful to the worldof the database it should not be meaning-ful to the NLI and, therefore, notanalyzable on semantic grounds.
Anotherassumes that if the NLI can analyze aquestion that cannot be asked of thedatabase, it has a much better chance ofdescribing to the user what is wrong withthe question and how it might berephrased to get the desired information.Codd made good use of the dialogueprocedures of the RENDEZVOUS \[CODD74\]system to avoid questions that the DBMScould not handle, as well as avoidinggeneration of DBMS queries that did notrepresent the user's intent.
Such a sys-tem, however, requires a very largesemantic base (much larger than that ofthe database) in order to make meaningfulcommunicat ion with the user during thedialogue.2.
Class of Database to SupportSome databases are simply not goodcandidates for an NLI because of charac-teristics mentioned in previous sectionssuch as many retr ieve-only fields, ordomains that have a high update rate butcannot be recognized by a pattern.There are also some structural prob-lems chat must be recognized.
If thedatabase contains "flat" files about onebasic entity, it is reasonably easy tomap quer ies  and to  exp la in  prob lems tothe  user  when the  mapp ing  cannot  be made.However, there can be "reasonable"queries that cannot be answered direct lybecause of the database structure.Hierarchical DBMSs present the most prob-lems with navigation because access muststart from the root.
For example, if theAPPLICANT database were under anhierarchical  DBMS, the question "List thespecialt ies for each applicant" could beanswered direct ly  but not "What are thespecialt ies?"
as there would be no way toget to the specialty records except viaparticular applicant records.An array allows more than oneinstance of a field or set of fields in asingle record.
There may be arrays ofvalues or even arrays of sets of valuesin nonrelat lonal databases.
When theuser retr ieves a field that is an arraythe DBMS requires a subscript into thearray.
Either the user must specif lythis subscript or the NLI must map to allmembers of the array with a test formissing data.3.
Class of DBMS to Supp%rtFor systems such as EUFID, the data-base must be organized within a datamanagdment system so that the data isstructured and individual fields arenamed.
If the data is just text, theEUFID approach cannot be used.Current NLI systems are designed tobe used interact ively by a user, whichmeans that the DBMS should also have aninteractive query language.
However, nocall data management systems are interac-tive.
WWDMS \[HONE76\] has a user querylanguage, but  queries are entered into abatch job queue and answers may notreturn for many minutes.
If an Nil frontend is to be added to such a DBMS, i~must have the  capabi l i ty to generatequery programs without any access to thedatabase for parsing or for processingthe returned answer.The query language should supportoperations equivalent to the relationaloperations of select, project, and join.Also, the query language should supportsome arithmetic capabil ity.
Most haveaggregate functions such as SUM andCOUNT.
WWDMS does not have an easy-to-use average operation, but it does have aprocedural language with arithmeticoperators so that EUFID can produce a"query" that procedural ly calculates anaverage.Basic calculat ions should be sup-ported such as "age=today-birthdate".
Itis also desirable to be able to call spe-cial functions to do complex calculat ionssuch as nav igat iona l  ca lcu la t ionsrequ i red  in  a nava l  database .4.
Support for MetadataMetadata is data about the data inthe database.
It would be able to tellthe user of the METRO application, forexample, the k ind  of information thedatabase has for warehouses and otherentit ies in the application.
Such meta-data might be extensions of activeintegrated data dictionaries now avail-able in  some DBMSs.In an app l i ca t ion - leve l  system theuser  shou ld  be ab le  to  query  the  metadatato  learn  about  the  s t ruc ture  o f  the  data -base.
A different mode, such as themenus used by the EUFID help system,could be used to access metadata, orEnglish language questions to both metainformation and the database could besupported.5.
UpdatesSome potential users would like anatural- language interface to include thecapabil i ty to update the database.Currently, updating through any highlevel view of the database should beavoided, especial ly when the view con-tains joins or derlve4 data, because ofthe  risk of inadvertently enteringincorrectly- interpreted data.V SUMMARY AND CONCLUSIONSFor many years, researchers havebeen attempting to build robust systemsfor natural- language access to databases.It is not clear that such a system existsfor general use \[0SI79\].
There are prob-lems that need to be solved on both thefront end, the parsing of the Englishquestion, and the back end, the transla-tion of the question into a data manage-ment system query.
It is important tounderstand the types of requests, typesof functions, and types of databases thatcan be supported by a specific NLI.Some general guidelines that can beapplied to the selection of applicationsfor current NLI front ends are suggestedbelow:lo2.the underlying DBMS should have aninteractive query language,the DMS view should be relational orat least support multiple accesspaths,3.
the database should not containarrays either of values or of struc-tures,4.
the input must be control led tostandardize values,5.
there should be few fields than havevalues that change rapidly, cannotbe recognized by a pattern, and thatmust be used in qualif ication,6.
the users of the NLI should have acommon use for the data and a commonvlew of the data, and7.
there must be some user who under-stands the questions that will beasked and is avai lable to work withthe developers of the NLI.We believe that current systemdevelopment is l imited by the need forgood semantic modell ing techniques andthe length of time needed to build theknowledge base required to interface witha new application.
When the knowledgebase for the NLI is developed, the data-base as well as sample input must be con-sidered in the design.
Parsing of ques-tions to a database cannot be divorcedfrom the database contents since semanticinterpretation can only be determined inthe context of that database.
On theother hand, a robust system cannot bedeveloped by considering only databasestructure and content, because the rangeof the questions allowed would not accu-rately reflect the user view of theappl ication and also would not accountfor all the information that is inferredat some level.ACKNOWLEDGEMENTSWe would like to acknowledge themany people who have contributed to EUFIDdevelopment: David Brill, Marilyn Cril-ley, Dolores Dawson, LeRoy Gates, IrisKameny, Philip Klahr, Antonio Leal, Char-lotte Linde, Eric Lund, Fillp Machi, Ken-neth Miller, Eileen Lepoff, BeatriceOshika, Roberta Peeler, Douglas Pintar,Arie Shoshani, Martin Vago, and JimWeiner.\[5REFERENCES\[AHO72\] Aho, A. V. and J. D. Ullman, "TheTheory of Parsing, Translation, andCompiling", Vol.
I: Parsing,Prentice-Hall, 1972, pp.
314-23Z.\[BURGBff\] Burger, J. F., "Semantic Data-base Mapping in EUFID", Proceedingsof the 198Z ACM/SIGMOD Conference,~3"n~-a ' -o~caY- ' -Ca~.
,  May 14-16,198ff.\[BURG82\] Burger ,  J .
F. and Mar jo r ie  Tem-pleton, "Recommendations for anInternal Input Language Eor theKnowledge-Based System', SystemDevelopment Corporation internalpaper N-(L)-24890/021/00, January 5,1982.\[CODD74\] Codd, E. F., "Seven Steps toRendezvous with the Casual User',Proc.
IFIP TC-2 Working Conferenceon Data-'5"~e'-~a~a~emen~ ~ystems, Car ~gese, Corsica, April 1-5, 1974, inJ.
W. Kimbie and K. I.
Koffeman(Eds.
), "Data Base Management"North-Holland, 1974.\[CULL80\] Cullinane Corporation, "IQS Sum-mary Description", May 1980.\[DATE77\] Date, C. J., "An Introduction toDatabase Systems', second edition,Addison-Wesley Publishing, MenloPark, CA, 1977.\[EDP82\] "Query Systems for End Users",EDP Analyzer, Vol.
20, No.
9, Sep-tember, 1982.\[HARR78\] Harris, L. R., "The ROBOT Sys-tem: Natural Language ProcessingApplied to Data Base Query',Proceedings ACM 78 Annual Confer-ence, 1978.\[HEND77\] Hendrix, G. G., E. D. Sacerdoti,D.
Sagalowicz, and J. Slocum,"Developing a Natural LanguageInterface to Complex Data" SRIReport 78-305, August 1977.rHONE76\] Honeywell, WWMCCS: World WideData Management System User's Guide,Honeywell DE97 Ray.3, April 1976.\[KELL71\] Kellogg, C. H., J. F. Burger, T.billet, and K. Fogt, "The CONVERSENatural Language Data managementSystem: Current Status and Plans",Proceedings of the ACM SZmposium on:ntormation ~ ~ a n d  ~etrleval-~,University o?
Maryland, CollegePark, MD, 1971, pp.
33-46.\[MYLO76\] Mylopoulos, J., A.
8org ida ,  P.Cohen, N. Roussopoulos, J. Tsotsos,and H. Wong, "TORUS: A Step TowardsBridging the Gap between Data Basesand the Casual User", in InformationVolume 2 1976, PergamonPress, pp 49-64.\[OLNE78\] Olney, John, "Enabling EUFID toHandle Negative Expressions", SDCSP-3996, August 1978.\[OS179\] Operating Systems, Inc., "AnAssessment of Natural LanguageInterfaces for Command and ControlDatabase Query", Logicon/OSI Divi-sion report for WWMCCS System16Engineering, OSI Report R79-026, 29June 1979.\[SCHA77\] Scha, R. J. H., "PhillipsQuestion-Answering System PHLIQAI",in SIGART Newsletter Number 61,February 1977, Association for Com-puting machinery, New York.\[SIMM65\] Simmons, R. F., "AnsweringEnglish Questions by Computer -- aSurvey', Comm.
ACM 8,1, January1965, 53-70.\[STON76\] Stonebraker, M., et.
al., "TheDesign and Implementation ofINGRES', Electronics ResearchLaboratory, College of Engineering,University of California at Berke-ley, Memorandum No.
ERL-M577, 27January 1976.\[TEMP79\] Templeton, M. P., "EUFID: AFriendly and Flexible Frontend forData Management Systems", Proceed-o~_~hOf the 1979 National Conferencee--As--~cl'~on tot ComputationalL'rn~-~stics, August, 1979.\[TEMP80\] Templeton, M. P., "A NaturalLanguage User Interface", Proceed-ings of "Pathwazs ~o Systemrn~r i%7" ,  washington DYC.
C ah~o?
ACM, 1980.\[THOM69\], Thompson, F. B., P. C. Lock-emann, B. H. Dostert, and R.Deverill, "REL: A Rapidly ExtensibleLanguage System", in Proceedings ofthe 24th ACM National Conference,s~ociation--"~or Computing machinery,New York, 1969, pp 399-417.\[WALT77\] Waltz, D. L., "Natura l  LanguageInterfaces", in SIGART NewsletterNumber 61, February - '~7,  Associa-tion for Computing machinery, NewYork.\[WALT78\] Waltz, D. L., "An Englishlanguage Question Answering Systemfor a Large Relational Database",Communications of the ACM 21, 7(July1978), pp 526-539.\[WOOD72\] Woods, W. A., R. M. Kaplan, B.Nash-Webber, The Lunar SciencesNatura l  Lan@ua~e-"rnformation ' System~'~Repor t ,  Report number~,Bolt, Beranek, and Newman, Inc.,Cambridge, MA, 15 June 1972.
