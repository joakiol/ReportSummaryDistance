An Eva luat ion  Semant ics  for DATR Theor iesBill KellerSchool of Cognitive and Computing SciencesThe University of Sussex, Brighton, UKb i l l k@cogs ,  susx .
ac .
ukAbstractThis paper describes an operational se-mantics for DATR theories.
The seman-tics is presented as a set of inference rulesthat axiomatises the evaluation relation-ship for DATR expressions.
The infer-ence rules provide a clear picture of theway in which DATR works, and shouldlead to a better understanding of themathematical nd computational prop-erties of the language.1 IntroductionDATR was originally introduced by Evans andGazdar (1989a; 1989b) as a simple, non-monotonic language for representing lexical inher-itance hierarchies.
A DATR hierarchy is definedby means of path-value specifications.
Inheritanceof values permits appropriate generalizations tobe captured and redundancy in the description ofdata to be avoided.
A simple default mechanismprovides for concise descriptions while allowing forparticular exceptions to inherited information tobe stated in a natural way.Currently, DATR is the most widely-used lexicalknowledge representation language in the naturallanguage processing community.
The formalismhas been applied to a wide variety of problems,including inflectional and derivational morphol-ogy (Gazdar, 1992; Kilbury, 1992; Corbett andFraser, 1993), lexical semantics (Kilgariff, 1993),morphonology (Cahill, 1993), prosody (Gibbonand Bleiching, 1991) and speech (Andry et al,1992).
In more recent work, DATR has been usedto provide a concise, inheritance-based ncodingof Lexiealized Tree Adjoining Grammar (Evanset al, 1995).
There are around a dozen differentimplementations of DATR in existence and large-scale DATR lexicons have been designed for use ina number of natural anguage processing applica-tions (Cahill and Evans, 1990; Andry et al, 1992;Cahill, 1994).
A comprehensive, informal intro-duction to DATR and its application to the designof natural language lexicons can tbund in (Evansand Gazdar, 1996).The original publications on DATR sought toprovide the language with (1) a formal theoryof inference (Evans and Gazdar, 1989a) and (2)a model-theoretic semantics (Evans and Gazdar,1989b).
Unfortunately, the definitions et out inthese papers are not general enough to cover allof the constructs available in the DATR language.In particular, they fail to provide a full and cor-rect treatment of DATR's notion of 'global inher-itance', or the widely-used 'evaluable path' con-struct.
A denotational semantics for DATR thatcovers all of the major constructs has been pre-sented in (Keller, 1995).
However, it still remainsto provide a suitably general, formal theory of in-ference for DATR, and it is this objective that isaddressed in the present paper.2 Syntax of DATR TheoriesLet NODE and ATOM be finite sets of symbols.
E1-eInents of NODE are called nodes and denoted byN.
Elements of ATOM are called atoms and de-noted by a.
Elements of ATOM* are called valuesand denoted by a, /3, 7- The set DESC of DATRvalue descriptors (or simply descriptors) is builtup from the nodes and atoms as shown below.
\[nthe following, sequences of descriptors in DESC*are denoted ?, ~/J.1.
a C DESC for any a E ATOM2.
For any N C NODE and 66 C DESC*:N:  (?)
e DES(;"N: (66)" E m.~sct'(66)" E DESC"N" E DESCElements of DESC are either atomic descriptors(1) or else inheritance descriptors (2).
Inheritancedescriptors are fllrther distinguished as being local(unquoted) or global (quoted).
For ?
C PESO* asequence of descriptors, an expression (?)
is calleda path descriptor.
When each element of ?
isatomic, then (?)
is called a path, and denoted P.For N a node, P a path and ?
a (possiblyempty) sequence of value descriptors, an equationof the form N : P == 66 is called a (definitional)646sentence.
InforInally, N : P .
.
.
.
?
specif ies aprolmrty of the node N, nalnely that the valueof the path P is given by the sequence of valuedescriptors ?.
A DATR theory "Y is a finite se, tof definitional sentences ubject to the fbllowingre(luirelnent of functionality:if N : 1' == ?
6 T & N : P =-- '(; 6 T th(!n ~/) -~ ~t/Jt)Smctionality thus correst)onds to a semantic re-quirement that node/path  pairs are associatedwith (at most) one value.3 In ference  in  DATRThe probh'm of constructing an explicit theoryof infhrence for DATR was originally addressed in(Evans and Gazdar, 1989a).
In this work, an at-tempt is made to set out a logic of DATR state-merits.
Consider for eXaml)le the following ruleof in%rence, adapted from (Evans and Gazdar,1989a).NI:\['I--=N~:P'2, N~ : P'2 == ~Ni : l'l ='-~'~The prelnises are detinitional sentences which canbe read: "the value of path 1'~ at node Nj ix (in-herited fl'om) the value of path P'2 at; N2" and"the vahle of path 1~,2 at, node N2 is el", respec-tively.
Given the premise, s the rule lieenees theconclusion "the value of path \['l at node Nj is(t".
Thus, the rule captures a logical relationshipbetween DATR sentences.
For a given DATR the-ory T, rules of this kind lllay /)e used to deduceadditional sentences as theorems of '\]-.In contrast, the system of inR;renee describedill this pal)er characterizes a relationship betweenDATR expressions (i.e.
sequences of descriptors)and the vahles they may be used to cOlnlmte.As an example, consider the following (simpliiied)rule of the operational semantics:if N1 : l'~ == 4) G T the, nNi : Pt ~ rtThe rule is applieatfle just in case the theory Tcontains a detinitional sentence N, : t~l - - eft.
Itstates that if the sequence of value descril)tors (/)on the right of the sentence valuates to ( - ->) thesequence of atoms tt, then it may be concludedthat the node/1)ath pair NI : I~ also evaluatesto a.
Rules of this kind may be used to provide,an inductive detinition of an evaluation relationbetween DATR expresskms and their values.Both approaches to inference in DATR aim toprovide a system of deductioi~ that makes it possi-ble to (teterlnine formally, for a given DATR theory7~, what; follows fl'om the stateulellts in 7 .
Theprimary interest lies in deducing statements aboutthe vahles associated with particular node/pathpairs defined within the theory.
UnRn'tunately,the proof rules described in (Ewms and Gazdar,1989a) are not su\[\[iciently general to support all ofthe required inferenees, and it is not obvious thatthe approach can be extended appropriately to(:over all of the available DATR constructs.
A par-tieuiar t)rot)hnn (:on(:erns DATR's notion of non-local or global inheritance.
The value (~xi)resse(l t)ya global inheritan(:e descriptor (lep(,nds on morethan just the proi)ertie.s of the nodes sl)eeified by{;he definitional sentences of a theory.
In fact,it only makes sense to talk about the value ofa global descriptor elative to a given context ofevaluation, or 91obal context.
Because the proofrules of (Evans and C, azdar, 1989a) just talk aboutDATR sentences, which do not make explicit reii'~r-ence to contexl., it is not possible to give.
a satisfac-tory a(:comlt of the global inheritance mechanism.The evaluation semantics described ill the fol-lowing sections provides a perspicuous treatmentof both local and global inheritance in DATR.
The,rules eaptme the essential details of the t)roeess ofevaluating DATR expressions, and for this reasonsilouhl prove, of use to the language imt)lementer.4 Loca l  I nher i tanceAs a point of departure, this section providesrules of inference for a restricted variant of DATRwhich lacks both global inheritance and tilt de-fault me(:hmfism.
This varianl; will be refl'ared toas DATRL.
The syntax of DATRI, is as given insee|ion 2, except of course that the three formsof global inheritance descriptor are omitted.
Anexami>le of a simph; DATR~, theory is shown next.Noun:  (cat) .
.
.
.
nouu@un) : _Dog:  (cat) == Noun(root) =--  dog(sing) .
.
.
.
(root)(plur) == (root) Noun:  (sufl)In this and all subsequent examples, a nun>her of standard abbreviatory devices are adopted.Sets of definitional sentences with the same nodeon the left-hand side are groupe.d together andthe node h;ft implicit in all but the tirst givensentence.
Als% a definitional sent;en(:e such itsDog:  (c.at) --=== Noun:  (, 'at), where the path onthe right is identical to that on the left, is writtenmore succinctly as Dog : (cat )  - -= Noun.
Sim-ilarly, nodes oil the right of a sentence a.re sup-pressed whe.n identical to the node on the left.The DATRL theory defines the propertie~s of twonodes, Noun and Dog.
The detinitional sen-te, iices specify values for node/path  l)airs, wherethe st)eeitication is either direct (a particular valueis e?hitfited), or indirect (the wflue is obtainedby local inheritance), l%r e?alnpte, the value ofthe node/path pair Noun : {eat} is specitied di-rectly as noun .
Ill contrast, the node/path pairDog : (cat} obtains its value indirectly, by local647Val~tes :a~a ValDefinitions :Sequences :Evaluable Paths :if N : (a) == ?
6 T thenDef N :  (a) ~Seq?
===?
a N : (a) =:::V pSub N:  (?)
==~ flFigure 1: Evaluation Semantics for DATRLinheritance from the value of Noun : (cat).
ThusDog : <cat) also has the value noun.
The value ofDog : (plur) is specified indirectly by a sequenceof descriptors Dog:  (root) Noun:  (suiT).
Intu-itively, the required value is obtained by concate-nating the values of the descriptors Dog : (root)and Noun : (surf}, yielding dog s.We wish to provide an inductive definition ofan evaluation relation (denoted ~)  between se-quences of DATR descriptors in DESC* and se-quences of atoms (i.e.
values) in ATOM*.
We writeto mean that the sequences of descriptors ?
eval-uates to the sequence of atoms a.
With respectto the DATR/ theory above we should expectthat Dog : (cat) ~ noun and that Dog :(root)  Noun:  (surf) ~ dog s, amongst otherthings.The formal definition of ==v for DATRL is pro-vided by just four rules of inference, as shown infigure 1.
The rule for Values states simply thata sequence of atoms evaluates to itself.
Anotherway of thinking about this is that atom sequencesare basic, and thus cannot be evaluated further.The rule for Definitions was briefly discussed inthe previous section.
It permits inferences to bemade about the values associated with node/pathpairs, provided that the theory T contains the ap-propriate definitional sentences.
The third ruledeals with the evaluation of sequences of descrip-tors, by breaking them up into shorter sequences.Given that the values of the sequences ?
and ?are known, then the value of ??
can be obtainedsimply by concatenation.
Note that this rule in-troduces ome non-determinism, since in generalthere is more than one way to break up a se-quence of value descriptors.
However, whicheverway the sequence is broken up, the result (i.e.value obtained) should be the same.
The follow-ing proof serves to illustrate the use of the rulesVal, Def  and Seq.
It establishes formally that thenode/path pair Dog : (plur) does indeed evaluateto dog s given the DATRL theory above.dog==~dog Val s ~ s ValDcf Dog: <root) :=~ dog Noun:  <suiT) ~ s DefSeq Dog: <root) Noun:  (surf) ==~ dog sDcf Dog: (plur) ~ dog sThe final rule of figure 1 deals with DATR's evalu-able path construct.
Consider a value descriptorof the form A:  (B:  0).
To determine the value ofthe descriptor it is first necessary to establish whatpath is specified by the path descriptor (B : 0)-This involves evaluating the descriptor B : 0 andthen 'plugging in' the resultant value a to obtainthe path (a).
The required value is then obtainedby evaluating A : (a).
The rule for EvaluablePaths provides a general statement of this pro-cess: if a sequence of value descriptors ?
evaluatesto a and N:  (a) evaluates to/3, then N:  (?)
alsoevaluates to ~.5 Global InheritanceDATR's local inheritance mechanism provides fora simple kind of data abstraction.
Thus, in theDATRL theory above, information about the plu-ral suffix is stated once and for all at the abstractNoun node.
It is then available to any instanceof Noun such as Dog via local inheritance.
Onthe other hand, information about the formationof singular and plural forms of dog must still belocated at the Dog node, even though the pro-cesses involved are entirely regular.
To overcomethis problem, DATR provides a second form of in-heritance: global inheritance.
This section pro-vides an evaluation semantics for a default-freevariant of DATR with both local and global in-heritance (DATRG).
A simple DATRG theory isshown below.Noun:  <cat) : :  noun<sum ==<sing) =-  "<root)"<pint) == "(root)" <surf)Dog : (cat) == Noun<root) == dog(sing) == Noun(plur) == NounThe new theory is equivalent to that given pre-viously in the sense that it associates exactly thesame values with node/path pairs.
However, inthe DATRa theory global inheritance is used tocapture the relevant generalizations about the sin-gular and plural forms of nouns in English.
Thus,the sent~ence Noun : <sing) == "<root)" statesthat the singular form of any noun is identical toits root (whatever that may be).
The sentenceNoun:  (plur) == "(root)"  (surf) states that theplural is obtained by attaching the (plural) suffixto the root.To understand the way in which global inheri-tance works, it is necessary to introduce DATR's648notion of global contea't.
Suppose that we wishto determine the value of Dog : (sing) in the ex-alnt)le DATRc; theory.
Initially, the global contextwill be the pair (Dog, sing), bS"om tile theory, thevalue of Dog : (sing} is to be inherited (locally)fl'om Noun : (sing), which ill turn inherits itsvalue (globally) from the quoted path "(root)".rio evaluate the quoted path, the global context isexamined to find the current global node (this isDog) and the vahle of "(root)"  is then obtainedby evaluating Dog : (root), which yields dog asrequired.More generally, the global context is used to fillin the missing node (t/ath) when a quoted path(node) is encountered.
In addition, as a side ef-fect of evahlating a global inheritance descriptorthe global context is updated.
Thus, after encoun-tering the quoted path "(root}" in the preced-ing example, tile global context is changed from(Dog, sing) to (Dog, root) .
That is, the pathcomponent of the context is set to tile new globalpath root .Let T be a DATRa theory defined with respectto the set of nodes NODE and the set of atomsATOM.
The set (:ON'X' of (.qlobal) contexts of 7- isdefined as the set of all pairs of the form (N, (t), forN G NODE and (.~ G ATOM*.
Contexts are denotedt)y C. The evaluation relation ~ is now takento be a mapping from elements of CeNT X \])ESC*to  ATOM*.
We writecF4)~to mean that ?
evaluates to fl in the global contextC.To axiomatise the IleW evaluation relation, the,DATRc rules m'e modified to incorporate theglobal context parameter.
For example, the rulefor Evaluable Paths now becolnes:0 t- 4) ~ ,  a C t- N : (,~) =-> flSub~C P N : (?)
==> flTwo sinfilar rules are required for sentences con-tMning quoted descriptors of the forms "N : {?
)"and "(qS)".
Note that the context (7 plays no sl)e-cial role here, but is simply carried unchangedfrom premises to conclusion.
The rules for Values,Definitio'ns and Sequences are modified in an en-tirely similar inanner.
Finally, to capture tile wayin which values are derived for quoted descriptorsthree entirely new rules are required, one for eachof the quoted fi/rms.
These rules are shown infigure 2.Consider for examt)le the Quoted Path rule.The premise states that N : (c~) evahmtes to flin the glohal context (N, a).
Given rills, the rulelicences the conehlsion that the quoted descrip-tor' "(oe)" also evaluates to fl in any context withthe same node component N. in other words, toewduate a quoted path "(a)" in a context (N, (f),just evahmte the local descriptor N : (a) in theQuoted Node/Path :Quoted PathQuoted Node(N, . )
~- N :  <,~> ~/ JQUOC ~- "N : (c~)" ==~ ,{3(N, a) ~ N:  <oe> ==:>/3Q~O 2 (U,~?)
~ "<,~)" ~ fi(N,,,) ~- N: ( .)
= .
/~O,,o:, (N', ,t) ~- "N" ==~ flFigure 2: Evaluation of Quoted Descriptorsupdated global context (N,a).
The rules (leal~ing with global node/t)adl pairs, and global nodeswork in a similar way.The following proof illustrates the use of tt{eQuoted Path rule (Qu%).
It demonstrates thatDog : (sing) evaluates to dog, given the DATRotheory, aim when the initial global context is takento be (Dog, sing).Val (Dog, root) t- dog =-=~ dogDef (Dog, root) \[- Dog: (root) ==~ ,log Q'ao2(Dog, sing) t- "(root)" ==~ dogDef (Dog, sing) F- Not , , , :  (sing) :=~ dogDef (Dog, sing) F- Dog: (sing) ~ dog6 Path  Extens ions  and  Defau l tsIn DATR, wflues may be associated with particu-lar node/path pairs either explicitly, in terms oflocal or global inheritance, or implicitly 'by de-fault'.
The basic idea underlying DATR's defaultumchanism is as follows: any definitional sentenceis applicable not only to the path specified on itsleft-hand side, but also for any rightward exten-sion of that path for which no more specitic def-initional sentence xists.
Making use of defimlts,the DATRc: theory given above can be expressedmore succinctly as shown next.Noun : ( ca t )  - - - :  noun<~ing> -= "<root)"(plur) =:: "<root>" (still)( .
, , f t - )  - -= .Dog : 0 == Noun(root) == dogIlere, the relationship between the nodes Dog andNoun has effectively been collapsed into just asingle statement Dog : 0 == Noun.
This is p0s-sible because, the sentence now corresponds to awhole class of implicit definitional sentences, eachof which is obtained by extending the paths foundon the left- and right-hand sides ill the same way.Accordingly, the value of Dog : {cat) is specifiedimplicitly as the value of Noun : (eat), and sim-ilarly for Dog : (sing) and Dog : (surf}.
In con-trast, the specification Dog : {root} == Noun :649Ygllte8 :Val Ct -cx~aDefinitions : if a is the longest prefix of a 7s.t.
N : <a) -------- ?
C T, thenC~?~f lD4Sequences :SeqC F ??
~,  aftEvaluable Paths :Sub 1C t- N:  <?> ===~ flC \[- "N: (?>" :::=~, fl Sub2Sub3 c ~- "<?>" =% ,~Quoted Descriptors :(N, ~)  ~ N:  <~> ~C ~- "N : <a)" =:::~, fl(N, aT) I- N :  (a) :=::V~ fl(N, ~.?)
~ "<~>" ~Q~o,Quo~(N, aT) ~- N :  ((~> ==~.y /3Q~tO 3(N', a) ~- "N" =:::~, flPath Extensions :C F N : (c~7) ~ flEzt C V N : <o~) ==:~.~ flFigure 3: The Evaluation Semantics for DATR(root} does not follow 'by default' from the def-inition of Dog, even though it can be obtainedby extending left and right paths in the requiredmanner.
The reason is that the theory alreadycontains an explicit statement about the value ofDog:  {root}.The evaluation relation is now defined as a map-ping from elements of CONT ?
DESC* X ATOM*(i.e.
context/descriptor sequence/path extensiontriples) to ATOM*.
We write:to nman that ?
evaluates to a in context C givenpath extension 7.
When 7 = e is the emi)ty pathextension, we will continue to write C ~- ?
~ c,.A complete set of iifference rules for DATR isshown in figure 3.
The rules for Values, Sequencesand Evaluable Paths require only slight modi-fication as the path extension is simply passedthrough from premises to consequent.
The rulesfor Quoted Descriptors are also much as hefore.Here however, the path extension 7 appears aspart of the global context in the premise of eachrule.
This means/;hat when a global descriptor isencountered, any path extension present is treated'globally' rather than 'locally'.
The main changein the Definitions rule lies in the conditions un-der which it is applicable.
The amended rule justcaptures the 'most specific sentence wins' defaultmechanism.
Finally, the new rule for Path Ezten-sions serves as a way of making any path exten-sion explicit.
For example, if Dog : (eat} eval-uates to noun,  then Dog : (} also evaluates tonoun given the (explicit) path extension cat.An example proof showing thai; Dog : <plur>evaluates to dog s given the DATR theory pre-sented above is shown in figure 4.7 Conc lus ionsThe evaluation semantics presented in this paperconstitutes the first fully worked out,, formal sys-tem of inference, for DATR theories.
This fulfillsone of the original objectives of the DATR pro-gramme, as set out in (Evans and Gazdar, 1989a;Evans and Gazdar, 1989b), to provide the lan-guage with an explMt theory of inference.
Theinference rules provides a clear picture of the wayin which the different constructs of the languagework, and should serve as a foundation for futureinvestigations of the mathematical nd computa-tional properties of DATR.
Although the rules ab-stract away from particular impleInentational de-tails such as order of evaluation, they can be rea&ily understood in computational terms and mayprove useful as a guide to the construction of prac-tical DATR interpreters.AcknowledgementsThe author wishes to thank Roger Evans, GeraldGazdar and David Weir for suggestions and com-ments relating to this work.References1,?ancois Andry, Norman lh'aser, Scott McGlashan,Simon Thornton, and Nick Youd.
1992.
Mak-ing DATR work tbr speech: lexicon compilation inSUNDIAL.
Computational Linguistics, 1.8(3):245267.Lynne Cahill and Roger Evans.
1990.
An applicationof DATR: the TIC lexicon.
In Pwcecdings of the9th European Conference on Artificial Intelligence,pages 12(1 125.Lynne Cahill.
1993.
Mort)honology in the lexicon.
InProceedings of the 6th Confc.rcnce of the EuropeanChapter of thc Association for Computational Lin-guistics, pages 87-96.Lynne Cahill.
1994.
An inheritance-based l xicon formessage understanding systems.
In Proceedings ofthe dth ACL Conference on Applied Natural Lan-guage Prvccssing, pages 211 212.Greville Corbett and Norman l~'aser.
1993.
Networkmorphology: a I)ATR account of l/.ussian nominalinflection.
Journal of Linguistics, 29:113 142.650Val (Dog, root)  b dog ~ dog(Dog, root)  ~- Dog : (root) ~ dog(Dog,  plur) I- "(root)" ~ dogDef Val (Dog,  plur)  I- s ==~ sQu?2 (Dog, p lur)  ~- Noun:  <surf) ~ sSeq (Dog,  plur) I- "(root)" Noun:  (suf D ~ dog s(Dog,  plur)  I- Noun : (plur) ~ dog sE:l:t(Dog, p lur)  \[- Noun : 0 ~p lur  (log sm:f (Dog, p lur)  F Dog:  (plur) ~ (log s/)~Figure 4: Proof  uti l ising dcfmJtsRoger Evans and Gerald Gazdar.
1989a.
Intbrence inDATR.
In Prvceedings of the 4th CoT@fence of theEuropean Chapter of the Association for Computa-tional Linguistics, pages 66 71.Roger Ewms and Gerald Gazdar.
19891).
Tile sem~m-tics of DATR.
In Proceedings of AISB-89, pages79 87.Roger Evans and Gerald Gazdar.
1996.
DATI{: A bm-guage tbr lexical knowledge representation.
Compu-tational Linguistics 22(2).
Also available as CSRP382, School of Cognitive and Computing Science,The University of Sussex and Technical report 95-15, ITtH, University of Brighton.Roger Evans, Gerald Gazdar, and David Weir.
1995.Encoding lexicalized tree adjoining grammars witha nonmonotonic inheritance hierarchy.
In Proceed-ings of tile 33rd Annual Meeting of tile Associationfor Computational Linguistics, pages 7~84.Gerald Gazdar.
1992.
Paradigm flmction morphologyin DATR.
In Lynne Cahill and Richard Coates, ed-itors, Sussex Papers in General and CornputationalLinguistics, munber CSRP 239 in Cognitive ScienceResem'ch Papers, pages 45- 53.
University of Sussex,Brighton.Da\[ydd Gibbon and Doris Bleiching.
199\].
An ILEXmodel tbr German colnpound stress in DATI/,.
InProceedings of the FOR, WISS-ASL Workshop onProsody in Man-Machine Communication.Bill Keller.
1995.
DATR theories and DATR models.In Proceedings of the 33rd Annual Meeting of theAssociation for Computational Linguistics, pages55 62.James Kilbury.
1992.
Pardigm-based erivati0nalmorphology.
In Gnenther Goerz, editor, Proceed-ings of KONVENS 92, pages 159 168.
Springer,Berlin.Adain Kilgariff.
1993.
Inheriting verb alternadons.In Proceedings of the 6th Conference of ttle Euro-pean Chapter of the Association for ComputationalLinguistics, pages 213 221.651
