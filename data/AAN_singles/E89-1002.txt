PARSING AND DERIVATIONAL EQUIVALENCE*Mark Hepple and Glyn MorrillCentre for Cognitive Science, University of Edinburgh2 Buccleuch Place, Edinburgh EH8 9LW ScotlandAbst ractIt is a tacit assumption of much linguistic inquirythat all distinct derivations of a string should assigndistinct meanings.
But despite the tidiness of suchderivational uniqueness, there seems to be no a pri-ori reason to assume that a gramma r must have thisproperty.
If a grammar exhibits derivational equiv-alence, whereby distinct derivations of a string as-sign the same meanings, naive exhaustive searchfor all derivations will be redundant, and quitepossibly intractable.
In this paper we show hownotions of derivation-reduction and normal formcan be used to avoid unnecessary work while pars-ing with grammars exhibiting derivational equiv-alence.
With grammar regarded as analogous tologic, derivations are proofs; what we are advocat-ing is proof-reduction, and normal form proof; theinvocation of these logical techniques adds a furtherparagraph to the story of parsing-as-deduction.I n t roduct ionThe phenomenon of derivational equivalenceis most evident in work on generalised categorialgrammars, where it has been referred to as ~spu-rious ambiguity'.
It has been argued that the ca-pacity to assign left-branching, and therefore incre-mentally interpretable, analyses makes these gram-mars of particular psychological interest.
We willillustrate our methodology by reference to gener-alised categorial grammars using a combinatorylogic (as opposed to say, lambda-calculus) seman-tics.
In particular we consider combinatory (cate-gorial) grammars with rules and generalised rules*We thank Mike Reape for criticism and suggestions inrelation to this material, and Inge Bethke and Henk Zee-vat for reading a late draft.
All errors are our own.
Thework was carried out by the alphabetically first author underESRC Postgraduate Award C00428722003 and by the sec-ond under ESRC Postgraduate Award C00428522008 andan SERC Postdoctoral Fellowship in IT.of the kind of Steedman (1987), and with metarules(Morri~ 19ss).Although the problem of derivational equiva-lence is most apparent in generalised categorialgrammars, the problem is likely to recur in manygrammars characterising a full complement of con-structions.
For example, suppose that a grammaris capable of characterising right extraposition ofan object's adjunct to clause-final position.
Thensentences such as Joha met a man yesterday whoswims will be generated.
But it is probable thatthe same grammar will assign Joha met a maa whoswims a right extraposition derivation in which therelative clause happens to occupy its normal posi-tion in the string; the normal and right extrapo-sition derivations generate the same strings withthe same meanings, so there is derivational equiva-lence.
Note that a single equivalence of this kind ina grammar undermines a methodological ssump-tion of derivational uniqueness.Combinatory Logic and Combina-tory GrammarCombinatory logic (CL; Curry and Feys, 1958;Curry, Hindley and Seldin, 1972; Hindley andSeldin, 1986) refers to systems which are ap-plicative, like the lambda-calculi, but which for-malise functional abstraction through a small num-ber of basic 'combinators',  rather than through avariable-binding operator like A.
We will define atyped combinatory logic.
Assume a set of basictypes, say e and t. Then the set of types is definedas follows:(1) a.
If A is a basic type then A is a typeb.
If A and B are types then A-*B is a typeA convention of right-associativity will be used fortypes, so that e.g.
(e--,t)-*(e--,t) may be writ-- 10 -ten (e---*t)--*e--,t. There is a set of constants (say,John', walks', ...), and a mapping from the set ofconstants into the set of types.
In addition thereare the combinators in (2); their lambda-analoguesare shown in parentheses.
(2) IA-.., AB(B-~ C)-* (A--~B)-*A-*CC (A-* B--~C)-~ B--* A--~CW(A--* A-*B)-*A--*B(~x\[x\])(~x~y~,.\[x(y--)})(~x~y~,.\[(x,)y\])(AxAy\[(xy)y\])The set of CL-terms is defined thus:(3) a.
If M is a constant or combinator f type A thenM is a CL-term of type Ab.
If M is a CL-term of type B---~A and N is a CL-term of type B then (MN) is a CL-term of typeA.The interpretation of a term built by (3b) is givenby the functional application of the interpretationof the left-hand sub-term to that of the right-hand one.
We will assume a convention of left-association for application.
Some examples of CL-terms are as follows, where the types are writtenbelow each component term:(4) a. walks' John'e-*t  eb.
C I((e---* t) ---, e-* t )--* e---, (e---, t) --* t (e---,t)---,e---,te-* (e--* t)---,tc.
B probably I walks'(t-* t ) -*  (e- -*t) -*e-*t  t--*t e--~t(e-*t)-*e--+te--~tOther basic combinators can be used in a CL, forexample S, which corresponds to Ax~yAz\[(xz)(yz)\].Our CL definition is (extensionally) equivalent othe ALcalculus, i.e.
the lambda-calculus withoutvacuous abstraction (terms of the form AxM wherex does not occur in M).
There is a combinator K(AxAy\[x\]) which would introduce vacuous abstrac-tion, and the CL with S and K is (extensionally)equivalent to the AK-calculus, i.e.
the full lambda-calculus.A combinatory grammar (CG) can be defined ina largely analogous manner.
Assume a set of basiccategories, say S, NP, ... Then the set of categoriesis defined as follows:(5) a.
If X is a basic category then X is a categoryb.
If X and Y are categories then X/Y and X\Y arecategoriesA convention of left-associativity will be used forcategories, so that e.g.
(S \NP) \ (S \NP)  may bewritten S \NP\ (S \NP) .
There is a set of words,and a lexical association of words with categories.There is a set of rules with combinators, mini-mally:(6) a.
Forward Application (>)f: X/Y+Y=~X (where fxy=xy)b. Backward Application (<)b: Y+X\Y  ::~ X (wherebyx=xy)The set of CG-terms is defined thus:(7) a.
If M is word of category A then M is a CG-termof category Ab.
If X I+.
?
"+Xn :~ X0 is a rule with combinator ~b,and $1, ..., Sn are CG-terms of category X1,...,Xn, then \[~# S1 ... Sn\] is a CG-term of categoryX0.The interpretation of a term built by (Tb) is givenby the functional application of the combinator tothe sub-term interpretations in left-to-right order.A verb phrase containing an auxiliary can be de-rived as in (8) (throughout, VP abbreviates S\NP).The meaning assigned is given by (ga), which isequal to (91)).
(8) will see JohnVP/VP VP/NP NP.>VP)VP(9) a.
(f will' (f see' John'))b. will' (see' John')Suppose the grammar is augmented with a ruleof functional composition (10), as is claimed to beappropriate for analysis of extraction and coordina-tion (Ades and Steedman, 1982; Steedman, 1985).Then for example, the right hand conjunct in ( l la)can be analysed as shown in ( l lb) .-11 -(10) Forward Composition (>B)B: X /Y  + Y/Z =~ X/Z (where B x y z = x (y z))(11) a. Mary \[phoned and will see\] Johnb.
will seeVP/VP VP/NP.>BVP/NPForward Application of ( l lb)  to John will assignmeaning (12) which is again equal to (gb), and thisis appropriate because toill see John is unambigu-ous.
(12) (f (B will' see') John')However the grammar now exhibits derivationalequivalence, with different derivations assigningthe same meaning.
In general a sequenceA1/A2 +A2/A3 9.A3/A4 9.
"'9"An can be analysedaS AI with the same meaning by combining anypair of adjacent elements at each step.
Thus thereare a number of equivalent derivations equal tothe number  of n-leaf binary trees; this is given bythe Catalan series, which is such that Catalan(n)> 2 '~-2.
As well as it being inefficient o searchthrough derivations which are equivalent, he expo-nential figure signifies computational intractability.Several suggestions have been made in relationto this problem.
Pareschi and Steedman (1987) de-scribe what they call a 'lazy chart parser' intendedto yield only one of each set of equivalent analy-ses by adopting a reduce-first parsing strategy, andinvoking a special recovery procedure to avoid thebacktracking that this strategy would otherwise ne-cessitate.
But Hepple (1987) shows that their al-gorithm is incomplete.Wittenburg (1987) presents an approach inwhich a combinatory grammar is compiled into onenot exhibiting derivational equivalence.
Such com-pilation seeks to avoid the problem of parsing witha grammar exhibiting derivational equivalence byarranging that the grammar used on-line does nothave this property.
The concern here however ismanagement of parsing when the grammar usedon-line does have the problematic property.Karttunen (1986) suggests a strategy in whichevery potential new edge is tested against he chartto see whether an existing analysis spanning thesame region is equivalent.
If one is found, the newanalysis is discarded.
However, because this checkrequires comparison with every edge spanning therelevant region, checking time increases with thenumber of such edges.The solution we offer is one in which there isa notion of normal form derivation, and a set ofcontraction rules which reduce derivations to theirnormal forms, normal form derivations being thoseto which no contraction rule can apply.
The con-traction rules might be used in a number of ways(e.g.
to transform one derivation into another,rather than recompute from the start, cf.
Pareschiand Steedman).
The possibility emphasised hereis one in which we ensure that a processing stepdoes not create a non-normal form derivation.
Anysuch derivation is dispensable, assuming exhaustivesearch: the normal form derivation to which it isequivalent, and which won't be excluded, will yieldthe same result.
Thus the equivalence check canbe to make sure that each derivation computed isa normal form, e.g.
by checking that no step createsa form to which a contraction rule can apply.
Un-like Karttunen's ubsumption check this test doesnot become slower with the size of a chart.
The testto see whether a derivation is normal form involvesnothing but the derivation itself and the invarlantdefinition of normal form.The next section gives a general outline of re-duction and normal forms.
This is followed by anillustration in relation to typed combinatory logic,where we emphasise that the reduction constitutesa proof-reduction.
We then describe how the no-tions can be applied to combinatory grammar tohandle the problem of parsing and derivationalequivalence, and we again note that if derivationsare regarded as proofs, the method is an instantia-tion of proof-reduction.Reduct ion  and  Normal  FormIt is a common state of affairs for some terms ofa language to be equivalent in that for the intendedsemantics, their interpretations are the same in allmodels.
In such a circumstance it can be useful toelect normal forms which act as unique represen-tatives of their equivalence class.
For example, ifterms can be transformed into normal forms, equiv-alence between terms can be equated with identityof normal forms.
1The usual way of defining normal forms is by1For our purposes 'identity I can mean exact syntacticidentity, and this simplifies discussion somewhat; ina systemwith bound variables uch as the lambda-calculus, identitywould mean identity up to renaming of bound variables.- 12 -defining a re lat ion l> ( 'contracts- to ' )  of CONTRAC-TION between equivalent terms; a term X is said tobe in NORMAL FORM if and only if there is no termY such that  X 1> Y.
The contract ion re lat ion gen-erates a reduct ion re lat ion ~ ( ' reduces-to')  and anequal i ty  re lat ion -- ( 'equals')  between terms as fol-lows:(13) a. I fX I> YthenX_> Yb.
X>Xc.
If X_> YandY_> Z thenX >_ Z(14) a. I fX I> Y thenX=Yb.
X=Xc.
If X= YandY= Z thenX= Zd.
I fX= YthenY= XThe equal i ty  re lat ion is sound with respect  to asemant ic  equivalence relat ion -- if X = Y impliesX = Y, and complete if X ---Y implies X -- Y. I t  is asufficient condit ion for soundness that  the contrac-t ion re lat ion is valid.
Y is a normal  form of X if andonly if Y is a normal  form and X _> Y.
A sequenceX0 I> X1 1> .
.
-  I> Xn is cal led a REDUCTION (ofX0 to X.
).We see from (14) that  if there is a T such that  P>_ T and Q >_ T, then P -- Q (-- T).
In part icular ,if X and Y have the same normal  form, then X --Y.Suppose the relat ions of reduct ion and equal i tygenerated by the contract ion relat ion have the fol-lowing property:(15) Church-Rosser (C-R): If P --- Q then there is a Tsuch that P >_ T and Q _> T.There follow as corol laries that  if P and Q are dis-t inct normal  forms then P ~ Q, and that  any nor-mal  form of a term is uniquef l  If two terms X andY have dist inct  normal  forms P and Q, then X --PandY- -Q ,  butP~Q,  soX~ Y.2Suppose P and Q are distinct normal forms and that P---- Q.
Because normal forms only reduce to themselves andP and Q are distinct, there is no term to which P and Q canboth reduce.
But C-R tells us that if P = Q, then there/aa term to which they can both reduce.
And suppose thata term X has distinct normal forms P and Q; then X = P,X = Q, and P -- Q.
But by the first corollary, for distinctnormal forms P and Q, P ~ Q.We have establ ished that  if two terms have thesame normal  form then they are equal and (givenC-R) that  if they have different normal  forms thenthey are not equal, and that  normal  forms areunique.
Suppose we also have the following prop-erty:(16) Strong Normalisation (SN): Every reduction is finite.This  has the corol lary (normal isat ion) that  everyterm has a normal  form.
A sufficient condit ion todemonstrate  SN would be to find a metr ic  whichassigns to each term a finite non-negat ive integerscore, and to show that  each appl icat ion of a con-t ract ion decrements the score by a non-zero inte-gral amount .
It  follows that  any reduct ion of a termmust  be finite.
Given both  C-R and SN, equal i ty isdecidable: we can reduce any terms to their  normalforms in a finite number  of steps, and compare foridentity.Norxizal Form and Proof -Reduct ionin Combinatory  LogicIn the CL case, note for example the followingequivalence (omitt ing types for the moment) :(17) B probably ~ walks ~ John ~ -- probably ~(walks' John #)We may have the following contract ion rules:(18) a. IM  I>Mb.
BMNP i>M(NP)c. CMNP i>MPNd.
WMN i>MNNThese state that  any term containing an occurrenceof the form on the left can be transformed to onein which the occurrence is replaced by the form onthe r ight.
A form on the left is cal led a REDEX, theform on the r ight,  its CONTRACTUM.
To see the va-l id i ty of the contract ion re lat ion defined (and thesoundness of the consequent equal i ty) ,  note thatthe funct ional  interpretat ions  of a redex and a con-t rac tum are the same, and that  by compos i t iona lity, the interpretat ion of a term is unchanged bysubst i tut ion of a subterm for an occurrence of asubterm with the same interpretat ion.
An exam-ple of reduct ion of a term to its normal  form is asfollows:- 13 -(19) C I John' (B probably' walks n) I>I (B probably I walkd) Johnll>B probably ~ walk~ John' I>probably I (walks' John')Returning to emphasise types, observe that theycan be regarded as formulae of implicational logic.In fact the type schemes of the basic combinatorsin (2), together with a modus ponens rule corre-sponding to the application in (3b), provide anaxiomatisation f relevant implication (see Morrilland Carpenter, 1987, for discussion in relation togrammar):(20) a.
A-+A(B-+C)-+(A-+B)-+A-+C(A-*B-+C)-+(B-+A-+C)(A.--,A-~B)--*A-'*Bb.
B---~A BAConsider the typed CL-terms in (4).
For each ofthese, the tree of type formulae is a proof in im-plicational relevance logic.
Corresponding to theterm-reduction a d normal form in (19), there isproof-reduction a d a normal form for a proof overthe language of types (see e.g.
Hindley and Seldin,1986).
There can be proof-contraction rules suchas the following:(21) B N M Pm ~ ~ m(B-+C)-+(A-~B)-+A-+C B-*C A-+B A(A-+B)-+A-+CA-+CcN M PB--~C A--,B A1>BcProof-reduction originated with Prawitz (1965)and is now a standard technique in logic.
The sug-gestion of this paper is that if parse trees labelledwith categories can be regarded as proofs over thelanguage of categories, then the problem of parsingand derivational equivalence an be treated on thepattern of proof-reductlon.Before proceeding to the grammar cases, a cou-ple of remarks are in order.
The equivalence ad-dressed by the reductions above is not strong (ex-tensional), but what is called weak equivalence.
Forexample the following pairs (whose types have beenomitted) are distinct weak normal forms, but areextensionally equivalent:(22) a.
B (B probablyanecessarily l) walks lb.
B probablyW(B necessarilylwalks s)(23) a.
B I walks Ib.
walks'Strong equivalence and reduction is far more com-plex than weak equivalence and reduction, but un-fortunately it is the former which is appropriatefor the grammars.
Later examples will thus differin this respect from the one above.
A second dif-ference is that in the example above, combinatorsare axioms, and there is a single rule of applica-tion.
In the grammar cases combinators are rules.Finally, grammar derivations have both a phono-logical interpretation (dependent on the order ofthe words), and a semantic interpretation.
Sinceno derivations are equivalent if they produce a dif-ferent sequence of words, derivation reduction mustalways preserve word order.Normal  Form and Proof -Reduct ionin Combinatory  GrammarConsider a combinatory grammar containingthe application rules, Forward Composition, andalso Subject Type-Raising (24); the latter two en-able association of a subject with an incompleteverb phrase; this is required in (25), as shown in(26).
(24) Subject Type-Raising (>T)T: NP =~ S/(S\NP) (where T y x = x y)(25) a.
\[John likes and Mary loves\] operab.
the man who John likes(26) John likesNP S\NP/NP"-->TS/(S\NP).>BS/NPThis grammar will allow many equivalentderivations, but consider the following contractionrules:- 14 -x /v  Y/Z z,>Bx/zxx/Y v /z  zl>~ YX(f(B ~y) ,) = (fx ( ry, ) )b. X/Y Y/Z Z/W X/Y Y/Z Z/W?
>B >BX/Z 1>2 Y/W>B ,>Bx /w x /w(B (Bxy)  z )= (Bx(By , ) )C. NP S\NP NP S\NPS/(S\NP) I>s SS(f(Tx) y) ---- (b x y)Each contraction rule states that a derivationcontaining an occurrence of the redex can be trans-formed into an equivalent one in which the occur-rence is replaced by the contractum.
To see thatthe rules are valid, note that in each contractionrule constituent order is preserved, and that thedetermination of the root meaning in terms of thedaughter meanings i (extensionally) equivalent un-der the functional interpretation of the combina-tors.Observe by analogy with combinatory logic thata derivation can be regarded as a proof over thelanguage of categories, and that the derivation-reduction defined above is a proof-reduction.
Sofar as we are aware, the relations of reduction andequality generated observe the C-R corollaries thatdistinct normal forms are non-equal, and that nor-mal forms are unique.
We provid e the followingreasoning to the effect that SN holds.Assign to each derivation a score, depending onits binary and unary branching tree structure asfollows:(28) a.
An elementary tree has score 1b.
If a left subtree has score z and a right subtree hasscore y, the binary-branching tree formed fromthem has score 2z -t- yc.
If a subtree has score z then a unary-branchingtree formed from it has score 2zAll derivations will have a finite score of at least 1.Consider the scores for the redex and contractum ineach of the above.
Let z, y, and z be the scores forthe subtrees dominated by the leaves in left-to-rightorder.
For I>1, the score of the redex is 2(2z?y)?zand that of its contractum is 2z-t-(2y + z): a decre-ment of 2z, and this is always non-zero because allscores are at least 1.
The case of 1>2 is the same.In I>s the score of the redex is 2(2z) -t- y, that ofthe contractum 2~-t-y: also a proper decrement.
Soall reductions are finite, and there is the corollarythat all derivations have normal forms.Since all derivations have normal forms, we cansafely limit attention in parsing to normal formderivations: for all the derivations excluded, thereis an equivalent normal form which is not excluded.If not all derivations had normal forms, limitationto normal forms might lose those derivations in thegrammar which do not have normal forms.
Thestrategy to avoid unnecessary work can be to dis-continue any derivation that contains a redex.
Thetest is neutral as to whether the parsing algorithmis, e.g.
top-down or bottom-up.The seven derivations of John will see Mary inthe grammar are shown below.
Each occurrence ofa redex is marked with a correspondingly labelledasterisk.
It will be seen that of the seven logicalpossibilities, only one is now licensed:(29) a. John will see MaryNP VP/VP VP/NP NP>VPb.VPCJohn will see MaryVP /NPm ,\ VPSc.
John will see Marym mNP VP/VP VP/NP NPS/NP ~.S- 15 -d. John will see Ma"~y* i  NP>T VP/VP VTTNP NPe.
John will see MaryNP vP/vP vP/NP NP~>T ~B* l  S/VF' S/NP VP/NP S.>S .> )f. John will see Mary *tNP;1,~'VP/VP V /NP>B~NP ~/ J \[- "s vP) ,g. John will see MaryNP VP/VP VP/NP NP~>T ~,"1~'S/VP )S/VP ~B VP.>SThe derivations are related by the contractionrelation as follows:(so) 1 32/e  " f ~ b - ~/c aConsider now the combinatory grammar ob-tained by replacing Forward Composition bythe Generallsed Forward Composition rule (31a},whose semantics B"  is recursively defined in termsof B as shown in (31b).
(31) a.b.Generalised Forward Composition (>B"):B": X/Y + Y/ZI.--/Zn =~ X/ZI '"/ZnB* =B;  B "+z = BBB n, .>  1This rule allows for combinations such as the fol-lowing:(32) will givevP/vP vP/PP/NP>B 2VP/PP/NPWe may accompany the adoption of this rule withreplacement of the contraction rule (27b) by thefollowing generalised version:(ss) a. X/Y WZz"'/Zm Zm/Wz"'/W.
,)B mY/Zz.. -/Zm-~B nx /zz - -  .
/ z~.z /wz - .
.
/WnX/Y Y/Zz---/Z~ Zm/Wz.../Wn ,~B nl>g Y/ZI.../Zm.1/Wl.../Wn .)Bin+n-1X/Zr--/Zm.1/Wr--/Wnb.
(B n (Bm x y) ,) = (B ('r'+"-*) x (B" y ~-))for ,  > I; m>_lIt will be seen that (33a) has (27b) as the specialcase n = 1, m = 1.
Furthermore, if we admit acombinator B ?
which is equivalent to the combi-nator f, and use this as the semantics for ForwardApplication, we can extend the generalised contrac-tion rule (33) to have (27a) as a special case also(by allowing the values for m and n to be such that, ~_ 0; m > 1).
It will be seen that again, everycontraction results in a proper decrement of thescore assigned, so that SN holds.In Morrill (1988) it is argued at length that evenrules like generalised forward composition are notadequate to characterise the full range of extrac-tion and coordination phenomena, nd that deepergeneralisations eed to be expressed.
In particular,a system is advocated in which more complex rulesare derived from the basic rules of application bythe use of metarules, like that in (34); these are sim-ilar to those of G azdar (1981), but with slash inter-preted as the categorial operator (see also Geach,1972, p485; Moo/tgat, 1987, plS).
(34) Right Abstraction#: X+Y=~V ==~ R~b: X+Y/Z=>V/Z(where (R g x y) -- = gx(yz)  )Note for instance that applying Right Abstractionto Forward Application yields Steedman's ForwardComposition primitive, and that successive appli-cation yields higher order compositions:- 16 -(35) a. Rf: X /Y  + Y/Z ::~ X/Zb.
R(Rf): X/Y + Y/Z/W ::~ X/Z/WApplying Right Abstraction to Backward Applica-tion yields a combinator capable of assembling asubject and incomplete verb phrase, without firsttype-raising the subject:(36) a.b.Rb: Y + X\Y/Z =~ X/ZJohn likesNP S\NP/NP'RbS/NP(Note that for this approach, the labelling for a ruleused in a derivation is precisely the combinator thatforms the semantics for that rule.
)Consider a g rammar  with just the applica-tion rules and Right Abstraction.
Let R '~ beR( .
.
.
1%(~6)...) with n _> 0 occurrences of R. In-stead of the contraction rules earlier we may have:(3~) a. x v /z  z /w l .
.
.
/w .R"fYIWI'--IW.VlW~...lw.x VlZ z lwr .
.
lw .~,~ V/ZRnfv /w l .
.
.
/w .b.
(R"~b x (Rnf y z)) -- (R"r (Re x y) z)Suppose we now assign scores as follows:(38) a.
An elementary tree has score Ib.
If a left subtree has score z and a right subtree hasscore y, the binary-branching tree formed fromthem has score z + 21/The score ofa redex will be x+2(y-i-2z) and that ofits contractum (x + 2y) + 2z: a proper decrement,so SN holds and all derivations have normal formsas before.
For the sentence John will see Mary,the grammar allows the set of derivations shown in(39).
(sg) a .
John will see MaryNP VP /VP  VP /NP  NPRbs/vPRfS/NPfSb.
John will see Maryc.
John will see MaryjfSd.
John will see MaryNP VP/VP VP/NP NPRfe.
John will see MawNP~ VP/VPRb VP/NP NP )" _ v ' ,\ .
SAs before, we can see that only one derivation,(39b), contains no redexes, and it is thus the onlyadmissible normal form derivation.
The derivationsare related by the contraction relation as follows:(40) b ' d ~ c .
aConc lus ionWe have offered a solution to the problem ofparsing and derivational equivalence by introduc-ing a notion of normal-form derivation.
A defini-tion of redex can be used to avoid computing non-normal form derivations.
Computing only normalform derivations i safe provided every non-normalform derivation has a normal form equivalent.
By- 17 -demonstrating strong normalisation for the exam-ples given, we have shown that every derivationdoes have a normal form, and that consequentlyparsing with this method is complete in the sensethat at least one member of each equivalence classis computed.
In addition, it would be desirableto show that the Church-Rosser property holds, toguarantee that each equivalence class has a uniquenormal form.
This would ensure that parsing withthis method is optimal in the sense that for eachequivalence class, only one derivation is computed.ReferencesAdes, A. and Steedman, M. J.
1982.
On the Or-der of Words.
Linguistics and Philosophy, 4: 517-558.Curry, H. B. and Feys, R. 1958.
Combinatorylogic, Volume I.
North Holland, Amsterdam.Curry, H. B., Hindley, J. R. and Seldin, J. P.1972.
Combinatory logic, Volume II.
North Hol-land, Amsterdam.Gazdar, G. 1981.
Unbounded ependencies andcoordinate structure.
Linguistic Inquiry, 12: 155-184.Geach, P. T. 1972.
A program for syntax.
InDavidson, D. and Haman, G.
(eds.)
Semantics ofNatural Language.
Dordrecht: D. ReideLHindley, J. R. and Seldin, J. P. 1986.
Intro-duction to combinators and h-calculus.
CambridgeUniversity Press, Cambridge.Hepple, M. 1987.
Methods for Parsing Com-binatory Grammars and the Spurious AmbiguiWProblem.
Masters Thesis, Centre for Cognitive Sci-ence, University of Edinburgh.Karttunen, L. 1986.
Radical Lexicallsm.
Re-port No.
CSLI-86-68, Center for the Study of Lan-guage and Information, December, 1986.
Paperpresented at the Conference on Alternative Con-ceptions of Phrase Structure, July 1986, New York.Moortgat, M. 1987.
Lambek Categoria\] Gram-mar and the Autonomy Thesis.
INL Working Pa-pers No.
87-03, Instituut voor Nederlandse Lexi-cologie, Leiden, April, 1987.Morrill, G. 1988.
Extraction and Coordina-tion in Phrase Structure Grammar and CategorialGrammar.
PhD Thesis, Centre for Cognitive Sci-ence, University of Edinburgh.Morrill, G. and Carpenter, B.
1987.
Compo-sitionality, Implicational Logics, and Theories ofGrammar.
Research Paper No.
EUCCS/RP-11,Centre for Cognitive Science, University of Edin-burgh, Edinburgh, June, 1987.
To appear in Lin-guistics and Philosophy.Pareschi, R. and Steedman, M. J.
1987.
ALazy Way to Chart-Parse with Extended Catego-rial Grammars.
In Proceedinge of the ?Sth An-nual Meeting of the Association for ComputationalLinguistics, Stanford University, Stanford, Ca., 6-9July, 1987.Prawitz, D. 1965.
Natural Deduction: A ProofTheoretical Study.
Ahnqvist and Wiksell, Uppsala.Steedman, M. 1985.
Dependency and Coordi-nation in the Grammar of Dutch and English.
Lan-guage, 61: 523-568.Steedman, M. 1987.
Combinatory Grammarsand Parasitic Gaps.
Natural Language and Lin-guistic Theory, 5: 403-439.Wittenburg, K. 1987.
Predictive Combinators:a Method for Efficient Processing of CombinatoryCategorial Grammar.
In Proceedings of the ~5thAnnual Meeting of the Association for Computa-tional Linguistics, Stanford University, Stanford,Ca., 6-9 July, 1987.- 18 -
