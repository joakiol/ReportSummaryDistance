Coling 2010: Poster Volume, pages 206?213,Beijing, August 2010Comparing Sanskrit Texts for Critical Editions ?Marc CsernelProjet AXIS: Inria-Rocquencourt& Universite Paris-DauphineMarc.Csernel@inria.frTristan CazenaveLAMSADEUniversite Paris-Dauphine,cazenave@lamsade.dauphine.frAbstractTraditionally Sanskrit is written withoutblank, sentences can make thousands ofcharacters without any separation.
A crit-ical edition takes into account all the dif-ferent known versions of the same text inorder to show the differences between anytwo distinct versions, in term of wordsmissing, changed or omitted.
This pa-per describes the Sanskrit characteristicsthat make text comparisons different fromother languages, and will present differentmethods of comparison of Sanskrit textswhich can be used for the elaboration ofcomputer assisted critical edition of San-skrit texts.
It describes two sets of meth-ods used to obtain the alignments needed.The first set is using the L.C.S., the sec-ond one the global alignment algorithm.One of the methods of the second set usesa classical technique in the field of artifi-cial intelligence, the A* algorithm to ob-tain the suitable alignment.
We concludeby comparing our different results in termof adequacy as well as complexity.1 IntroductionA critical edition is an edition that takes intoaccount all the different known versions of thesame text.
If the text is mainly known througha great number of manuscripts that include nontrivial differences, the critical edition often looksrather daunting for readers unfamiliar with thesubject: the edition is then formed mainly by?
This work is supported by the EEC FP7 project IDEASfootnotes that enlighten the differences betweenmanuscripts, while the main text (that of the edi-tion) is rather short, sometimes a few lines on apage.
The differences between the texts are usu-ally described in term of words (sometime sen-tences) missing, added or changed in a specificmanuscript.
This reminds us the edit distance butin term of words instead of characters.
The textof the edition is established by the editor accord-ing to his own knowledge of the text.
It can bea particular manuscript or a ?mean?
text built ac-cording to some specific criteria.
Building a crit-ical edition by comparing texts two by two, espe-cially manuscript ones, is a task which is certainlylong and, sometimes, tedious.
This is why, fora long time, computer programs have been help-ing philologists in their work (see O?Hara (1993)or Monroy (2002) for example), but most of themare dedicated to texts written in Latin (sometimesGreek) scripts.In this paper we will focus on the problems in-volved by a critical edition of manuscripts writ-ten in Sanskrit.
Our approach will be illustratedby texts that are extracted from manuscripts of the?Banaras gloss?, ka?s?ika?vr.
tti.The Banaras gloss was written around the 7thcentury A.D., and is one of the most famous com-mentary on the Pa?n.
ini?s grammar, which is knownas the first generative grammar ever written, andwas written around the fifth century B.C.
as aset of rules.
These rules cannot be understoodwithout the explanation provided by a commen-tary such as the ka?s?ika?vr.
tti.
This collection waschosen, because it is one of the largest collectionof Sanskrit manuscripts (about hundred differentones) of the same text actually known.206In what follows we will first describe the char-acteristics of Sanskrit that matter for text compar-ison algorithms, we will then show that such acomparison requires the use of a lemmatized textas the main text.
The use of a lemmatized text in-duces the need of a lexical preprocessing.
Oncethe lexical preprocessing is achieved, we can pro-ceed to the comparison, where we develop twokinds of approach, one based on the LCS, whichwas used to solved this problem, the other one re-lated to sequence alignment.
In both cases the re-sults are compared in terms of adequacy as wellas complexity.
We then conclude and examine theperspective of further work.2 How to compare Sanskrit manuscriptsOne of the main characteristics of Sanskrit is thatit is not linked to a specific script.
But herewe will provide all our examples using the De-vana?gar??
script, which is nowadays the most used.The script has a 48 letters alphabet.
Due to thelong English presence in India, a tradition of writ-ing Sanskrit with the Latin alphabet (a translitera-tion) has been established for a long time.
Thesetransliteration schemes were originally carried outto be used with traditional printing.
It was adaptedfor computers by Frans Velthuis (Velthuis, 1991),more specifically to be used with TEX.
Accordingto the Velthuis transliteration scheme, each San-skrit letter is written using one, two or three Latincharacters; notice that according to most translit-eration schemes, upper case and lower case Ro-man characters have a very different meaning.In ancient manuscripts, Sanskrit is written with-out spaces, and this is an important graphicalspecificity, because it increases greatly the com-plexity of text comparison algorithms.
On theother hand, each critical edition deals with the no-tion of word.
Since electronic Sanskrit lexiconssuch as the one built by Huet (2006; 2004) do notcope with grammatical texts, we must find a wayto identify each Sanskrit word within a characterstring, without the help of either a lexicon or ofspaces to separate the words.The reader interested in a deeper approach ofthe Sanskrit characteristics which matters for acomputer comparison can look in Csernel andPatte (2009).The solution comes from the lemmatization ofone of the two texts of the comparison: the textof the edition.
The lemmatized text is preparedby hand by the editor.
We call it a padapa?t.ha,according to a mode of recitation where sylla-bles are separated.
From this lemmatized text, wewill build the text of the edition, that we call asam.
hitapa?t.ha, according to a mode of recitationwhere the text is said continuously.
The trans-formation of the padapa?t.ha into the sam.
hitapa?t.hais not straightforward because of the existence ofsandhi rules.What is called sandhi ?
from the Sanskrit: li-aison ?
is a set of phonetic rules which apply tothe morpheme junctions inside a word or to thejunction of words in a sentence.
These rules areperfectly codified in Pa?n.
ini?s grammar.
Roughlyspeaking the Sanskrit reflects (via the sandhi) inthe writing the liaison(s) which are made by ahuman speaker.
A text with separators (such asspaces) between words, can look rather different(the letter string can change greatly) from a textwhere no separator is found (see the example ofpadapa?t.ha on next page).The processing is done in three steps, but onlytwo of them will be considered in this paper:?
First step: The padapa?t.ha is transformedinto a virtual sam.
hitapa?t.ha in order to makefeasible a comparison with a manuscript.The transformation consists in removing allthe separations between words and thenin applying the sandhi.
This virtualsam.
hitapa?t.ha which will form the text of theedition, is compared with each manuscript.As a sub product of this lexical treatment, theplaces where the separation between wordsoccur will be kept into a table which will beused in further treatments.?
Second step: An alignment of a manuscriptand the virtual sam.
hitapa?t.ha.
We describethree different methods to obtain these align-ments.
The aim is to identify, as precisely aspossible, the words in the manuscript, usingthe padapa?t.ha as a pattern.
Once the wordsof the manuscript have been determined, wecan see through the alignment those whichhave been added, modified or suppressed.207?
Third step:: Display the results in a compre-hensive way for the editor.The comparison is done paragraph by para-graph, according to the paragraphs made in thepadapa?t.ha during its elaboration by the editor.Each of the obtained alignments, together withthe lemmatized text (i.e.
padapa?t.ha), suggests anidentification of the words of the manuscript.3 The lexical preprocessingThe goal of this step is to transform both thepadapa?t.ha and the manuscript in order to makethem comparable.
This treatment will mainlyconsist in transforming the padapa?t.ha into asam.
hitapa?t.ha by applying the sandhi.At the end of the lexical treatment the texts aretransmitted to the comparison module in an inter-nal encoding.This allows us to ensure the comparison what-ever the text encoding.An example of padapa?t.ha:vi?ud?panna ruupa siddhis+v.rttis+iya.mkaa"sikaa naamaWe can see that words are separated by three dif-ferent lemmatization signs: +, , ?
which indicaterespectively the presence of an inflected item, thecomponent of a compound word, the presence ofa prefix.The previous padapa?t.ha becomes the followingsam.
hitapa?t.ha:vyutpannaruupasiddhirv.rttiriya.mkaa"sikaanaamaafter the transformation induced by the lexicalpre-processing, the bold letters represent the let-ters (and the lemmatization signs) which havebeen transformed.Notice that we were induced (for homogene-ity reasons) to remove all the spaces from themanuscript before the comparison process.
Thusno word of the manuscript can appear separatelyduring that process.The sandhi are perfectly determined bythe Sanskrit grammar (see for example Re-nou (1996)).
They induce a special kind of dif-ficulties due to the fact that their construction canbe, in certain cases, a two-step process.
Duringthe first step, a sandhi induces the introduction of1d0< tasmai4c3,5< gurave---> gane> "> saayaWord 1 ?tasmai?
is :- MissingWord 2 ?"srii?
is :- Followed byAdded word(s)?ga.ne"saaya?Word 3 ?gurave?
is :- MissingEdiff with spaces L.C.S.
based results without spaceTable 1: different comparisonsa new letter (or a letter sequence).
This new lettercan induce, in the second step, the construction ofanother sandhi.4 The first trialsThe very first trials on Sanskrit critical editionwere conducted by Csernel and Patte (2009).Their first idea was to use diff (Myers (1986)) inorder to obtain the differences between two San-skrit sequences.But they find the result quite disappointing.
Theclassical diff command line provided no usefulinformation at all.They obtained a slightly better result withEmacs ediff, as shown in Table 1, left col-umn: we can see which words are different.
Butas soon as they wanted to compare the same se-quences without blank, they could not get a betterresult using ediff than using diff.
This is whythey started to implement an L.C.S.
(Hirschberg,1975) based algorithm.
Its results appear in theright column of Table 1.4.1 The L.C.S based algorithmThe L.C.S matrix associated with the previous re-sult can be seen on figure 1 on next page.On this figure the vertical text represents thesam.
hitapa?t.ha, the horizontal text is associatedwith a manuscript.
The horizontal bold dark lineshave been provided by the padapa?t.ha, before ithas been transformed into the sam.
hitapa?t.ha.The rectangles indicate how the correspon-dences have been done between the sam.
hitapa?t.haand the manuscript.
One corresponds to a wordmissing (tasmai), two correspond to a wordpresent in both strings: the words s"rii andnama.h, the last one corresponds to a word witha more ambiguous status, we can say either that208Figure 1: The L.C.S.
Matrixthe word has been replaced or that one word ismissing and another word has been added.
We cansee below the result in term of alignment wherethe double ?|?
represents a separation betweentwo words.t a s m ai "s r ii g u r a v e - - - - n a m a .h- - - - - "s r ii g - - a .n e "s aa y a n a m a .hthe corresponding alignmentIf the result appears quite obvious within thisexample, it is not always so easy, particularlywhen different paths within the matrix can leadto different alignments providing different results.This induced them to put a lot of post treat-ments to improve their results, and, at the end, themethod looked rather complicated.
This is whywe were induced to produce an aligment methodbased on the edit distance.5 Alignment based on edit distanceWe used two different methods to get the align-ments formed by the matrix: the first one, basedon the common sense, is the subject of this sec-tion.
The second one, based on the IDA* algo-rithm is the subject of the next one.The idea is to get anyone of the alignments be-tween the sam.
hitapa?t.ha and the manuscript, fromthe distance matrix, and then apply some simpletransformations to get the right one.The first goal is to minimize the number of in-complete words which appear in the alignment(mostly in the manuscript).
The second goal is toimprove the compactness of each letter sequenceby moving in the same word the letters apart fromthe gaps.In the following we consider that the distancematrix has been built from the top left to the bot-tom right, and that the alignment is built by keep-ing a path from the bottom right till the top left ofthe matrix.In such case, if some words are missing in themanuscript, some letters can be misaligned (notwith the proper word), but this misalignment canbe easily corrected by shifting the orphan letterstill the correct matching word.5.1 Shifting the orphan lettersWe will call an orphan letter a letter belonging toan incomplete word of the manuscript (generally)and being isolated.
To obtain a proper alignmentthese letters must fit with the words to which theybelong.The sequence Seq 1 below gives a good ex-ample.
The upper line of the table representsthe padapa?t.ha, the second one the manuscript.In this table, the words pratyaahaaraa andrtha.h are missing in the manuscript.
Conse-quently the letters a.h are misplaced, with theword rtha.h.
The goal is to shift them to theright place with the word upade"sa.h.
Theresult after shifting the letters appears in the se-quence Seq 2 .u p a d e "s a .h p r a t y aa h aa r aa r th a .hu p a d e "s - - - - - - - - - - - - - - a .hSeq 1u p a d e "s a .h p r a t y aa h aa r aa r th a .hu p a d e "s a .h - - - - - - - - - - - - - -Seq 2On the second example (Seq 3 & 4) we see on theleft side of the table that the letter a must just beshifted from the beginning of asiddhy to theend of saavarny giving Seq 4.s aa v a r .n y a p r a s y d dh ys aa v a r .n y - - - a s y d dh ySeq 3: the orphan letters aa v a r .n y a p r a s y d dh ys aa v a r .n y a - - - s y d dh ySeq 4: once shifted209But another kind of possible shift is the onelinked to the presence of supplementary letterswithin the manuscript such as in Seq 5.
Theletters a and nam of the padapa?t.ha are shifted tothe right end of the sequence prayoj such asshown in Seq 6.p r a y o j - - - - - a - - - - n a mp r a y o j a n a m s a .m j "n aa n a mSeq 5: before shiftingp r a y o j a n a m - - - - - - - - -p r a y o j a n a m s a .m j "n aa n a mSeq 6: once shifted5.2 The resultsThe results of the program are first displayed as atext file.
They do not come directly from the align-ment but from a further treatment, which elimi-nates some of the useless differences discovered,and transform the other ones into something moreconvenient for a human reader.Paragraph 3 is Missing in File Asb2Word 11 ?saara?
is:- Substituted with ?saadhu?
in Man.
aaWord 17 ?viv.rta?
is:- Followed by Added word(s) ?grantha"saa?in Manuscript A3Word 21 ?viudpanna?
is:- Substituted with ?vyutpannaa?
in Man.
A3(P3) Word 32 ?k.rtyam?
is:- Substituted with ?karyam?
inManuscript A3- Substituted with ?kaaryam?
inManuscripts aa, am4, ba2Such a result, if not fully perfect, has been vali-dated as a correct base for further ameliorations.6 Using A* for critical editionIn this section we explain the application of A*(Hart et al, 1968; Ikeda and Imai, 1994) to criticaledition.
We start defining a position for the prob-lem, then we explain the cost function we haveused and the admissible heuristic.
We end withthe search algorithm.6.1 PositionsA position is a couple of indexes (x,y) that repre-sents a position in the dynamic programming ma-trix.
The starting position is at the bottom right ofthe matrix.
The goal position is at the upper left ofthe matrix (0,0).
There are at most three succes-sors of a position: the upper position (x,y-1),the position on the left (x-1,y) and the positionat the upper left (x-1,y-1).Moving to the position at the upper left meansaligning two characters in the sequences.
Mov-ing up means aligning a gap in the horizontal se-quence with a letter in the vertical sequence.
Mov-ing to the left means aligning a gap in the verticalsequence with a letter in the horizontal sequence.6.2 A cost function for the critical editionIt appeared at the end of the first trials of Cserneland Patte (2009) that we can consider the mostimportant criteria concerning the text alignmentto be an alignment concerning as few words aspossible, and as a secondary criteria the highestpossible compactness.It can be formalized by a cost function whichwill contain?
the edit distance between the two strings.?
the number of sequences of gaps.?
the number of words in the manuscript con-taining at least a gap.6.3 The admissible heuristicWe can observe that the edit distance containedin the dynamic programming matrix is alwayssmaller than the score function we want to min-imize since the score function is the edit distanceincreased by the number of gap sequences and thenumber of words containing gaps.At any node in the tree, the minimum cost paththat goes through that node will be greater than thecost of the path to the node (the g value) increasedby the edit distance.The edit distance contained in the dynamic pro-gramming matrix is an admissible heuristic forour problem.6.4 The search algorithmThe search algorithm is the adaptation of IDA*(Korf, 1985) to the critical edition problem.
Ittakes 7 parameters: g the cost of the path to thenode, y and x the coordinates of the current po-sition in the matrix, and four booleans that tell ifa gap has already been seen in the same word ofthe padapa?t.ha, if a gap has already been seen inthe same word of the manuscript, if the previousmove is a gap in the manuscript or a move in thepadapa?t.ha.210The search is successful if it has reached the up-per left of the matrix (x = 0 and y = 0, lines3 and 4 of the pseudo code), and it fails if theminimal cost of the path going through the currentnode is greater than the threshold (lines 5-6).
Thesearch is also stopped if the position has alreadybeen searched during the same iteration, with thesame threshold and a less or equal g (lines 7-8).In other cases recursive calls are performed(lines 15, 22, 36 and 43).The first case deals with the insertion of a gapin the padapa?t.ha (possible if x is strictly positive,lines 11-16).
If this is the first gap in the wordwe do not add anything to the cost, since we don?tcare about the number of words containing gaps inthe padapa?t.ha, if the previous move is not a gapin the padapa?t.ha then we add one to the cost (line14) and the recursive call is made with a cost ofg + deltag + 1 since inserting a gap also costsone.The second case deals with alignment of thesame letters (lines 17-23).
In that case the re-cursive call is performed with the same g sinceit costs zero to align the same letters and that nogap is inserted.The third case deals with the insertion of a gapin the manuscript (possible if y is strictly positive,lines 24-37).
Then the cost is increased by one forthe first gap in the word (line 28), by one for thefirst gap of a sequence of gaps (line 32), and byone since a gap is inserted.The fourth case deals with the alignment of twodifferent letters and increases the cost by one sincealigning two different letters costs one and no gapis inserted (lines 38-45).The pseudo code for the search algorithm is:1 bool search (g, y, x, gapAlreadySeen,gapInMat,2 previousIsGapInMat,previousIsGapInPad)3 if y=0 and x=04 return true5 if g + h(y,x) > threshold6 return false7 if position already searched with smaller g8 return false9 newSeen = gapAlreadySeen10 newSeenMat = gapInMat11 if x > 012 deltag = 013 if not previousIsGapInPad// cost of a sequence of gaps// in the Padapatha14 deltag = deltag + 115 if search (g+deltag+1, y, x-1,true, gapInMat, false, true)16 return true17 if y > 0 and x > 018 if alignment of the same letters19 if new word in the Padapatha20 newSeen = false21 newSeenMat = false22 if search (g, y-1 , x-1, newSeen,newSeenMat, false, false)23 return true24 if y > 025 deltag = 0;26 if not gapInMat27 // cost of each word containing// gaps in the Matrikapatha28 deltag = 129 newSeenMat = true30 if not previousIsGapInMat31 // cost of a sequence of gaps in// the Matrikapatha32 deltag = deltag + 133 if new word in the Padapatha34 newSeen = false;35 newSeenMat = false;36 if search (g+deltag+1, y-1, x,newSeen, newSeenMat, true, false)37 return true;38 if y>0 and x>039 if alignment of different letters40 if new word in the Padapatha41 newSeen = false42 newSeenMat = false43 if search (g+1, y-1 , x-1, newSeen,newSeenMat, false, false)44 return true45 return falseThe search function is bounded by a thresholdon the cost of the path.
In order to find the shortestpath, an iterative loop progressively increasing thecost is used.7 Experiments and ConclusionsWe have tested on our Sanskrit texts three differ-ent methods to align them: one based upon theL.C.S., the two other ones based on the edit dis-tance.
We have tested them on a set of 43 differentmanuscripts of a short text, the introduction of theka?s?ika?vr.
tti: the pratya?ha?rasu?trah.
.
A critical edi-tion of this text exists (Bhate et al, 2009), and wehave not seen obvious differences with our results.The size of the padapa?t.ha related to this text isapproximately 9500 characters.
The time neededfor the treatment is approximately 29 seconds forthe L.C.S based one, 22 for the second method(with the shifts) and 185 seconds for the third onebased on the IDA*algorithm (all mesured on aPentium 4 (3.2mgz)).The comparison between the first method and211the two others cannot be absolute, because thefirst one displays its results under a more syn-thetic form, and cannot display only the align-ments.
This form takes a little more time to beproceeded but less time to be written.Comparing the different methods:?
The first trial (L.C.S.)
was a very usefulone, because it allows displaying significantresults to Sanskrit philologists, and opensthe possibility of further research.
But itis too complicated compared with other ap-proaches, and the different steps needed,though useful, do not provide the opportunityto make easily further improvements.?
The second approach gives the best results interm of time.
It is conceptually quite simple,and not too difficult to implement in term ofprogramming.
And it gives place, becauseit has been simple to implement, for furtherimprovements.?
What can we say then about the IDA*method, which is by far the longest to makethe computation?
That it is unmistakably notthe best choice as a production method whencomputation time is a preoccupation (but thetime overhead has nothing definitive), but itis for sure, for the person ?who knows?
themost flexible, and the easiest way to imple-ment alignment methods, and to check anhypothesis.
Using A* would probabbly befaster as the branching factor is small.The use of edit distance based methods hasbeen, by the simplifications and the ameliorationsit provide for the comparison of the Sanskrit texta great improvement.
Both methods will allowus to consider different coefficients for replacingthe letters in the edit distance matrix and leads tofurther simplification of the pre-processing.
TheIDA* (or other A*) method, opens wide the doorsfor further experiments.
Among these experi-ments one of the most interesting will consist inthe modelling of an interaction between the infor-mation provided by the annotations contained ineach manuscript (especially the presence of miss-ing parts of the text) and the alignment.It is difficult to provide a numerical evaluationof the different results, first because they are notprovided under the same form, the first methodis provided as a human readable text and the twoother ones as sequence alignments, secondly be-cause it is difficult (and we did not find it) toprovide a criterion which differs from the func-tion we optimize in the A* algorithm.
Otherwiseeven if the differences between the two methodsare rather tiny, the A* algorithm which optimizesby construction the criterion will be considered al-ways as slightly better.Another possible improvement is related to thefact that in Sanskrit, the order of the words is notnecessary meaningful.
Two sentences with thewords appearing in two different orders can havethe same meaning.But there is a problem that none of these meth-ods can solve, the problem induced by the absenceof a word which has been used to build a sandhi.Once it disappeared the sandhi disappeared too,and a new sandhi can appear, then it looks likea real change of the text, but these modificationsare perfectly justified in term of Sanskrit grammarand should not be notified in the critical edition.For example if we look at the following sequence:"s aa s t r a p r a v .r t t y a r th a .h"s aa s t r aa - - - - - - - - - r th a .h?
the word "saastra has been changed in"saastraa (with a long a at the end).?
the word prav.rtty has disappeared.?
the word artha.h has been changed tortha.hIn fact only the second point is valid.
Ifwe put the words "saastra and artha.hone after another in a Sanskrit text we get"saastraartha.h.
The two short a at thejunction of the two words become a long aa (inbold) because of a sandhi rule.
We have (untilnow) no precise idea on the way to solve this kindof problem, but we have the deep feeling that theanswer will not be straightforward.On the other hand we believe that the problemsinduced by the comparison of Sanskrit texts for212the construction of a critical edition, is an inter-esting family of problems.
We hope that the so-lutions of these problems can be applied to otherlanguages, and perhaps that it will also benefit tosome other problems.ReferencesBhate, Saroja, Pascale Haag, and Vincenzo Ver-giani.
2009.
The critical edition.
In Haag, Pas-cale and Vincenzo Vergiani, editors, Studies in theka?s?ika?vr.
tti The section on Pratya?ha?ras.
Societa Ed-itrice Fiorentina.Csernel, Marc and Franc?ois Patte.
2009.
Critical edi-tion of sanskrit texts.
In Sanskrit ComputationalLinguistics, volume 5402 of Lecture Notes in Com-puter Science, pages 358?379.Hart, P., N. Nilsson, and B. Raphael.
1968.
A for-mal basis for the heuristic determination of mini-mum cost paths.
IEEE Trans.
Syst.
Sci.
Cybernet.,4(2):100?107.Hirschberg, D.S.
1975.
A linear space algorithmfor computing maximal common subsequences.CACM, 18(6):341?343.Huet, Gerard.
2004.
Design of a lexical database forsanskrit.
In COLING Workshop on Electronic Dic-tionaries, pages 8?14, Geneva.Huet, Gerard.
2006.
He?ritage du sanskrit: Diction-naire franc?ais-sanskrit.http://sanskrit.inria.fr/Dico.pd.Ikeda, T. and T. Imai.
1994.
Fast A* algorithms formultiple sequence alignment.
In Genome Informat-ics Workshop 94, pages 90?99.Korf, R. E. 1985.
Depth-first iterative-deepening:an optimal admissible tree search.
Artificial Intel-ligence, 27(1):97?109.Monroy, C. et al 2002.
Visualization of variants intextual collations to analyse the evolution of literaryworks in the cervantes project.
In Proceedings ofthe 6th European Conference, ECDL 2002, pages638?53, Rome, Italy.Myers, E.W.
1986.
An O(ND) difference algorithmand its variations.
Algorithmica, 1(2):251?266.O?Hara, R.J. Robinson, P.M.W.
1993.
Computer-assisted methods of stemmatic analysis.
In Blake,Norman and Peter Robinson, editors, OccasionalPapers of the Canterbury Tales Project, volume 1,pages 53?74.
Office for Humanities Communica-tion, Oxford University.Renou, Louis.
1996.
Grammaire sanskrite:phone?tique, composition, de?rivation, le nom,le verbe, la phrase.
Maisonneuve, Paris.
(re?impression).Velthuis, F., 1991.
Devana?gar??
for TEX, Ver-sion 1.2, User Manual.
http://www.ctan.org/tex-archive/language/devanagari/velthuis/.213
