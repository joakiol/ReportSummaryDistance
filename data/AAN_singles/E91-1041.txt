A DIALOGUE MANAGER USING INITIATIVE-RESPONSE UNITS ANDDISTRIBUTED CONTROLArne J0nssonDepartment ofComputer and Information ScienceLinktiping UniversityS- 581 83 LINKOPING, SWEDENPhone: +46 13281717Email: ARJ@IDA.LIU.SEAbstractThis paper describes a system for managing: dialoguein a natural anguage interface.
The proposed approachuses a dialogue manager as the overall control mecha-nism.
The dialogue manager accesses domain independ-ent resources for interpretation, generation and back-ground system access.
It also uses information from do-main dependent knowledge sources, which are custom-ized for various applications.Instead of using complex plan-based reasoning, thedialogue manager uses information about possible inter-action structures and information from the specific dia-logue situation to manage the dialogue.
This ismotivated from the analysis of a series of experimentswhere users interacted with a simulated natural languageinterface.
The dialogue manager integrates informationabout segment types and moves into a hierarchical dia-logue tree.
The dialogue tree is accessed through ascore-board which uses exchangeable access functions.
Thecontrol is distributed and the dialogue is directed fromaction plans in the nodes in the dialogue tree.1 IntroductionTo achieve true cooperation a natural language inter-face must be able to participate in a coherent dialoguewith the user.
A common, generally applicable'approachis to use plan-inference asa basis for reasoning:about in-tentions of the user as proposed by, for instance, Allen &Perrault (1980), Litman (1986), Carberry (1989) andPollack (1986).
However, computationally these ap-proaches are not so efficient.Reichman (1985) describes a discourse grammarbased on the assumption that a conversation can be de-scribed using conventionalized discourse rules.
Gilbert,Buckland, Frolich, Jirotka & Luff (1990) uses interac-tion rules in their menu-based advisory system.
Our ap-proach is similar to Reichman and Gilbert el al.
In aseries of experiments (Dahlb~lck & JOnsson, 1989, J0ns-son & Dahib/tck, 1988) we studied ialogue behaviour inan information-seeking teraction between a human anda computer using a simulated natural language interface(NLI).
One important result was that the users followeda rather straightforward information searching strategywhich could be well described using conventionalizedrules.Reichman uses surface linguistic phenomena for rec-ognizing how the speaker's tructure the discourse.
Wefound, however, very little use of surface linguistic uesin our dialogues.
In our corpus users normally initiate arequest for information, which is followed by an answerfrom the system.
Sometimes the request needs clarifica,tion before the answer can be given as a response to theinitial question (this is illustrated in section 4 and 5).
Op.tionally the user can interrupt the original question andstart a new initiative-response unit, but this also followsthe goals of information-seeking.
Thus, we adopt a strat,egy in which we employ the notion of adjacency pairs(Schegloff & Sacks, 1973, see also Levinson, 1983:3030.
In our approach the dialogue is planned and utter-ances are interpreted in terms of speech acts.
The speechacts are determined on the basis of structural informationin the utterance and in the immediate context.Further, we found, in our experiments, that differentconfigurations of the background system (e.g.
data base,consultation) and task to solve (e.g.
information retriev-al, configuration) require different mechanisms for han-dling dialogue in an NLI (JOnsson, 1990).
Therefore, onemajor design criterion is that the system should be easyto adapt (customiZe) to a new application.The natural language interface described in this paperis constructed on the assumption that different applica-tions have different sublanguages (Grishman & Kit-tredge, 1987), i.e.
subsets of a natural language.
A sub-language is not only defined by a grammar and lexicon,but also by interaction behaviour, i.e factors uch as howthe user and system handle clarifications, who takes theinitiative, what is cooperative in a certain application,what are the user categories and so on.The dialogue manager operates as the central control.ler in the NLI (Ahrenberg, Dahlb/tck & J6nsson, 1990).It passes information encoded in directed acyclic graphs(dags) between different modules for parsing, genera-tion, etc.
This paper, however, only describes the dia-logue manager's role in the control of the dialogue.
Iassume that the dag's correctly describe the full meaningof the user's input.
For a discussion of interpretation fuser input in this system see Ahrenberg (1988).
The dia-logue manager is implemented in CommonLisp but iscurrently not completely integrated with the other mod-ules of the system.- 233 -)Figure 1.
Overview of the architecture2 The dialogue managerThe dialogue manager (DM) is the kernel in the natu-ral language interface, see figure 1.
It directs the dia-logue, assists the instantiator and deep generator andcommunicates with the background system.
DM can beviewed as a controller of resources and knowledgesources.The resources in our system are a chart parser(Wir6n, 1988), an instantiator which links the linguisticobject descriptions toobjects in the universe of discourse(Ahrenberg, 1989), a translator which translates the in-stantiated structures in|o a form suitable for accessingthe background system" and finally a deep and a surfacegenerator for generating a system utterance.
These re-sources are domain independent processes accessingvarious knowledge sources.The knowledge sources are domain dependent andimplemented in the same knowledge base system andcan be modified for each new application.
We use a lexi-con for general and domain-specific" vocabulary and agrammar with knowledge of syntactic onstructions andtheir semantic impact.
Furthermore, we use descriptionsof dialogue objects, i.e.
segments and moves and theirassociated information (section 3) and domain object de-scriptions which contain relations between the conceptsused to describe objects in the background system andconstraints on them.The need for domain object information in a naturallanguage database interface has been argued for by forinstance Copestake & Sparck Jones (1990) and McCoy& Cheng (1988).
The domain objects are primarily usedby the instantiator and deep generator, but the translator,parser and surface generator can also use this informa-tion.
For a discussion on domain objects in this systemsee Ahrenberg, J6nsson & Dahlb~ick (1990).Each input or output from the resources passes viathe dialogue manager (DM).
A typical segment beginswith an input from the user that is sent to the DM whichl.
Initially we use only a relational database ystem.passes it to the parser.
The parser sends its result to theDM which passes it to the instantiator where it is en-hanced with referential information.
This is sent to thetranslator which accesses the background system and ifthe access ucceeds, informs the DM.
The DM forwardsthe information to the deep generator where an enhanceddescription iscreated which is sent to the surface genera-tor and finally a. response is given from the DM to theuser.
This has the advantage that the DM always hascontrol over what happens in the system.
Thus, if onemodule does not succeed with its task, the DM directsthe recovery.
For instance, if the translator cannot accessthe data base due to lack of information from the user,the DM receives information from the translator thatthere is information missing and then in turn calls thedeep and surfac.~ generators to produce a suitable mes-sage to the user.
The DM then waits for input to provideto the parser and: instantiator.
Finally, the DM tries to in-tegrate the new information with the previous informa-tion.Internally the dialogue manager maintains three dy-namic structures for monitoring the dialogue: the dia-logue tree (section 4) where the dialogue history is kept,action plans (section 5) for controlling the dialogue andfinally a scoreboard (section 6) which constitutes the in-terface between the dialogue tree and other modules ofthe system.3 Dialogue objectsDialogue objects play a central role in this architec-ture.
The dialogue objects consist of two components,one is a process :description of a prototypicaf use of thedialogue object.
This is described below.
The other con-rains static reformation about speaker, hearer, type, top-ic, context and different types of descriptors to describesalient objects, e.g.
the focused object, potential focusedobjects and optionally the current set.
The current setrecords which subset of the data base that is currentlyused.
We found in our data base dialogues that the useroften restricts the possible candidates in a database- 234 -search.
For ~ln example consider the dialogue fragmentin example 1L$7>be more specificU8> 0.7 litre/10km"$9> Daihatsu Charade Fiat UnoFord Fiesta Honda CivicLancia Y10/A112 Mazda 323Mitsubishi Colt Nissan MicraNissan Cherry Opel CorsaPeugeot 205 Opel KadettRenault 5 Toyota StarletMost of the cars consume iless than 1 litre/10km,Toyota Corolla Volkswagen PoloUl0>Which five consume least?
Rank themS 1 l>Daihatsu CharadeFiat UnoNissan MicraToyota StarletHonda CivicUl2>Which of these is safestSl3>They are all equal except Nissan Micra which isthe worstUl4>Which one is easiest to handle?S 15>No informationExample 1First the user specifies a set of cars in utterance U8>,presented by the system in $9>.
This set is however, toolarge, therefore in utterance U10> it is reduced.
In the se-quence of utterances U12> to S15>, Current set consistsof the cars presented in U11>.
Current set does not haveto be explicit as in example 1, instead it can be describedby constraints.
For instance, in a travel data base the usermay be interested in a trip to Greek islands which re-stricts the search in the database to Greek islands for alarge part of the ensuing dialogue.The communication is hierarchically structured usingthree different categories of dialogue objects.
There arevarious proposals as to the number of levels needed.
Thesystem developed by Polanyi & Scha (1984) uses fivedifferent levels to hierarchically structure a dialogue andLOKI (Wachtel, 1986) uses four.
In LOKI the levels are:conversation, dialogue, exchange and move.
When ana-lysing our dialogues we found no certain criteria con-cerning how to divide a dialogue into'a set of exchanges.Therefore we only use three different dialogue objecttypes: dialogue, initiative-response-unit (IR) and move.Dialogue, in our notation, is similar to conversation iLOKI, while IR-units resemble xchanges.
IR-units arerecursive and, unlike LOKI, we allow arbitrary embed-ding of IR-units.The smallest unit handled by our dialogue manager isthe move.
An utterance can consist of more than onemove and is thus regarded as a sequence of moves.
Amove object is used for describing information about amove.
Moves are categorized according to the type of il-Iocutionary act and topic.
Some typical move types are:Question (Q), Assertion (AS), Answer (A) and Directive(DI).
Topic describes which knowledge source to con-suit: the background system, i.e.
solving a task (T), theongoing dialogue (D) or the organisation of the back-I.
The dialogue is an English translation of a dialogue fromour corpus of Swedish dialogues collected in Wizard-of-Ozsimulations.
It is continued in section 4.ground system (S).
For brevity when we refer to a movewith its associated topic, the move type is subscribedwith topic, e.g.
Qr.?
Normally an exchange of information begins with aninitiative followed by a response (IR).
The initiative cancome from the system or the user.
A typical IR-unit in aquestion-answer database application is a task-relatedquestion followed by a successful answer Qr/A-r. Othertypical IR-units are: Qs/As for a clarification requestfrom the user, Qr/ASs when the requested information isnot in the database, Q~/A o for questions about he ongo-ing dialogue.?
The dialogue:manager uses a dialogue tree (section 4)as: control structure.
The root node is of type Dialogue(the D-node) and controls the overall interaction.
Whenan IR-unit is finished it returns control to the D-node.The D-node creates an instance of a new IR-unit with in-formation about initiator and responder.
It also copiesrelevant information about salient objects and attributesfrom the previous IR-unit to the new one.
Our simula.ti0ns show that users prefer coherence in the dialogue.Thus, we use the heuristic that no information explicitlychanged is duplicated from one IR-unit to the next.As stated above, an instance of a dialogue object hasone component describing static information about initi-ator, responder, salient objects etc., and another describ-ing the process, i.e.
the actions performed whenexecuting the object.
We call this a plan, although if wewere to follow Pollack (1990) we could call it recipe-for-actions.
Figure 2 shows a template description for an IR-unit used in a database information-seeking application.
"Class: IRTopic: Tv D v SContext: link to fatherInitiator: System v UserResponder: System v UserType: type of/R-unit e.g.
Q/AInitiative type: e.g.
OResponse type: e.g.
ATurns: list of daughter nodesCurrentObject:CurrentAttribute:CurrentSet:CurrentRequest:I\[nitiator =User~ ---> ll~ocess: ((create-move user) "7| (access) |/ (create-move system) IL_ (up))Enitiator = System~-> P~ocess: ((create-move system)i| (create-move user)L (up))- -  , -=Figure 2.
A template description for IR-unitsThe static component forms the context in which theprocesses are executed.
The attributes are updated withnew values during the execution of the action plan.
Forinstance, a user IR-unit, i.e.
an IR-unit which waits for auser initiative to be interpreted, has no value for the Initi-ative and Response slots until the initiative has been in-terpreted.
This is discussed further in section 4.The process component of the IR-unit is divided intotwo different plan descriptions, one if the system initiat-e d the segment and another for a user-initiated segment.- 235 -However, as can be seen in figure 2, they use the samegeneral actions for creating moves, acting and traversingthe tree (up).
The actions behave differently dependingon the static description, for instance the action (access)uses the value of the slot Topic to determine whichknowledge source to consult.
Information about valuesof attributes describing the request for information isfound in the dag structure delivered by the instantiatorwhich is passed to the translator by the dialogue manag-er.
The slot CurrontRequost contains the request formedby the translator and is used for clarifications.In database applications the system behaves as a user-directed interface.
It initiates an IR-unit only for clarifi-cation requests, either because 1) difficulties arise wheninterpreting the utterance, or 2) difficulties arise whenaccessing the data base, e.g.
when the user needs to pro-vide a parameter for correct access, see S17> in example2 below, or finally 3) if difficulties arise in the presenta-tion of the result from the data base access.
The action totake after a clarification request is first to check the va-lidity of the response and then to propagate the informa-tion to the node which initiated the clarification.In other applications, e.g.
tutoring or consultationsystems, the behaviour need not be user-directed.
Insteadit may be system-directed or mixed initiative.
In our ap-proach this is achieved by customizing the dialogue ob-jects, section 7.For move-units there are two different process de-scriptions, one for user moves and one for systemmoves.
The user move has the plan ((parse) (instantiate)(up)) and the system move has the plan ((deep-generate)(surface-generate) (up)).4 The dialogue treeThe dialogue tree represents he dialogue as it devel-ops in the interaction.
Information about salient objectsis represented in the dialogue tree and is used by the in-stantiator and deep generator.
The dialogue manager up-dates the dialogue tree for each new move.An important feature of the dialogue manager is dis-tributed control.
Every node in the tree is responsible forits own correctness.
For instance, the plan for a task re-lated question-answer, Or/AT, contains no reparationstrategies for missing information to the background sys-tem.
If the interpreter fails to access the data base due tolack of information, the translator signals this to the DMwhich creates an instance of an IR-unit for a clarificationrequest and inserts it into the Or/AT.
The plan for clarifi-cauon request hen generates a move explaining themissing information and creates a user move waiting forthe  user input.
This has the advantage that theplans arevery simple, as they only have local scope, cf.
sections 3and 6.
Furthermore, the plans are more generally appli-cable.UI6>S17>U18>S19>U20>$21>I would like a car with a large bootHow big (litres)?I don't knowThey vary in size from about 200-350 litresI want at least 300 litres.BMW 318/320Example 2The tree is built bottom up but with a top down pre-diction from the context.
This is illustrated in the dia-logue in example 2, which will generate a dialogue treewith clarifications on two levels.
Initially the D-nodecreates an instance of an IR-node and inserts it into thetree, i.e.
creates links between the IR-node and the D-node.
The IR-node creates an instance of a user move.The move node parses and instantiates U16> successful-ly as an ASa- and then integrates it into the tree.
Informa-tion from the move-node is then available also at the IR-node whose type can be determined as AST/AT.
Whenthe database is accessed from this node, the translatorfinds that there is a need for clarification, in this caseconcerning the use of the word large in connection witha boot.
This creates a plan which first prompts the userwith a question, S17>, and then waits for the user to givean answer.
Here the user does not answer but instead ex-presses a request for clarification, U18>.
This is shownin part 1) of figure 3 as the clarification IR-unit, QSs/As.The fact that U18> constitutes a clarification request andnot an answer to S 17> is decided after the creation of theuser move from U18>.
When the DM receives the inter-pretation from the instantiator, it does not satisfy the ex-pectation for an answer, and so it has to instantiate a newIR-unit for clarification request which is connected to thepreviously created IR-clarification request (Qr/AT).1) D 2) D / /AST/AT AST/ArAST Or/Ar AS-r QT/Ar Ar U16~ U16/ /~ $21QT QsYAs QT Qs~As ATS17/ S17 ~ U20Qs Qs As UI8 U18 S19Figure 3.
A dialogue treeUtterance UI8> in the context of the Qr/Ar IR-unitindicates that the user needs ome information about hebackground system and it is thus interpreted as Qs.
Thisinformation is supplied in S19>.
For the next utterance,U20>, a new user move is created which is integratedinto the tree as an answer to the original clarification re-quest.
This information is propagated up to the first nodeAST/Ar which now can form an answer to the first ques-tion $21>, part 2) in figure 3.
The next step (not shownin figure 3) is to generate a new IR-unit under D whichwill generate a new user move and the system is readyfor further user input.5 The action planThe plan describing aprototypical use of an object ispushed onto a slack called the action plan.
In accordancewith our distributed esign, each node maintains its ownstack, see figure 5.
The overall control strategy is that thestack top is popped and executed.
Complex plans, aswhen the query to the data base needs clarification, arehandled with the same control mechanism.
The dialoguemanager then updates the action plan of the current nodewith an action for creating an instance of a,clarificationrequest dialogue object and another action'to integrate- 236 -new information.
The DM pops the stack of the currentnode and executes that action.
When this new exchangeis completed the result is integrated into the node whichinitiated the clarification.Again, consider the dialogue tree in figure 3.
Part 1)in figure 4 shows the stack for the node AST/Ar beforeprocessing U16>, i.e.
before the move node is createdwhich parses and instantiates the move.
At this time thenode type is not known.l)(create-move user)(access)(create-move system)(up)2)(create-IR QT/AT)(integrate-new-info)(access)(create-move system)(up)Figure 4.
The action plan for an IR-nodePopping the action (create-move user) results in thecreation of a move node which is ready to interpret auser input.
The move node has a plan of its own: ((parse)(instantiate) (up)).
When UI6> is interpreted in the movenode, AS T in figure 3, the move node ends with the ac-tion (up) which tries to find a corresponding father.
Inthis case it succeeds with the IR-unit from which themove node was created and the dialogue is controlledfrom this node, now AST/AT.
The slack top is now (ac-cess) which in this case uses the topic T, i.e.
a data baseaccess.
However, the data base access does not succeed.Therefore a call for clarification, an action for later inte-grating the new information into the old request and anew call to (access) is placed on the slack.
This is seenin part 2) of figure 4.
The action (access) has differentrepair strategies for the different clarification requesttypes described above.
Similar repair strategies apply toall actions.The slack top is an action which creates aknown IR-unit asking for a data base access parfimeter.
This actionthen creates the Qr/Ar-node in figure 3.
Now this nodewill have its own action plan stack from which process-ing is controlled.
This node is also responsible for thecorrectness of the answer given from the user, which inthis case results in a new clarification request.
This doesnot affect he node AST/AT instead the clarifications areprocessed and eventually control is returned to the nodeAST/Ar and the new information:is integrated into its oldrequest, stored in CurrentRequost.The two clarification odes, QT/A r, Qs/As, in figure 3behave in a similar fashion.6 ScoreboardControlling the dialogue is only one of the responsi-bilities of the dialogue manager.
It is also responsible formonitoring the dialogue.
Information about salient ob-jects is represented in the dialogue tree and is accessedthrough a scoreboard, figure 5.
The scoreboard is the in-terface between the dialogue manager and the othermodules in the NLI.'
ScoreboardlS~aker;Hearer;CurrentRequ~t:Current Segment:-"Current Move: ----.CurrentObiect:CurrentSe/: :C rr t Ai/ri e;ue treeActionAction i -Action i - 2Act/on IAction Plan1Figure 5.
The intemal structures used by DMThe attributes of the scoreboard take their valuesfrom the tree via pointers or via retrieve functions whichsearch the dialogue tree.
The lexicon and grammar arewritten with references to the attributes on the score-board and therefore are not involved in traversing the di-alogue tree.
:Furthermore, the retrieve functions can be altered, al-lowing the search for a referent to an anaphoric expres-sion to be application dependent.
This means that weneed only update the retrieve function connected to anelement on the ~oreboard, not the grammar or lexicon,when an application requires a change in dialogue style.7 CustomizationOne objective of this project is to develop a naturallanguage interface that can be customized to differentapplications, i.e.
a natural language interface shell to beused by a language ngineer when creating an NLI for aspecific application.Customization is achieved by using different ex-changeable/modifiable knowledge sources.
Our inten-tion is to build a library of prototypical knowledgesources and re-uSe much of the knowledge between dif-ferent applications.
For instance the lexicon for an SQLdata base interface needs to be updated with data basecontent-specific terms but large parts of it are re-usable.Furthermore, we believe this to be possible not only forthe lexicon and grammar, but also for the dialogue ob-jects.
The plans for a data base system will be much thesame regardless of the domain.
Customization, however,is not the topic of this paper.
For more on this see Jrns-son (1991).8 SummaryI have presented an architecture for dialogue manage-me~t for naturallanguage interfaces to various applica-tions.
The dialogue manager operates as a controller ofresources for parsing, instantiation, generation and data-base access.
:The design of the dialogue manager is based on theanalysis of a corpus of simulated human-computer inter-actions.
Unlike plan-based proposals which employ userintentions to guide the interaction, the dialogue managerdescribed here uses plans with information about proto-typical interaction patterns.
The plans are modelled in- 237 -dialogue objects which also contain static informationfor representing the dialogue.The dialogue objects are hierarchically structured inthree categones: dialogue, initiative-response and move.The initiative-response category is recursive.
Use of aninitiative-response structure can be criticised in the sameway as adjacency pairs for not adequately describing anaturally occurring discourse.
However, for a restrictedsublanguage, such as natural anguage communicationwith computers, we believe that this is a very efficientway of managing the dialogue (cf.
Levinson 1981:114).The dialogue history is represented in a dialogue treeconsisting of instantiated dialogue objects.
The resourc-es access the dialogue tree through ascoreboard and thusneed no mechanisms for traversing the tree.We have conducted experiments which show that inan information-seeking human-computer dialogue theproposed mechanisms can correctly handle the dialogue.Empirical tests will show how many different interactionsettings we can handle.AcknowledgementsThis work is much inspired by the work that I havedone with Nils Dahlb~ick and Lars Ahrenberg.
AkeThurte did most of the coding for the DM in XeroxCommon Lisp on a Sun Spare Station and many ideaswere formed uring discussions with him.
Lars Ahren-berg, Ivan Rankin, Mats Wirtn and Richard Hitsch haveread previous versions of the paper and provided manyvaluable comments.ReferencesAhrenberg, Lars (1988) An Object-Oriented Dia-logue System for Swedish, Nordic Journal of Linguistics,Vol.
11, Nos 1-2, pp 3-16Ahrenberg, Lars (1989) A Constraint-Based Modelfor Natural-Language Understanding and a Pilot Imple-mentation.
Research Report LiTH-IDA-R-89-22, Depart-ment of Computer and Information Science, Link6pingUniversity.Ahrenberg, Lars, Arne J6nsson & Nils Dahib~lck(1990) Discourse Representation and Discourse Manage-ment for Natural Language Interfaces, To appei~r in Pro-ceedings of the Second Nordic Conference on TextComprehension in Man and Machine, T~lby, Stockholm.Allen, James.
F. & C. Raymond Perrault (1980) Ana-lysing Intention in Utterances, Artificiallnteiligence, 15,pp 143-178.Carberry, Sandra (1989) A Pragmatics-Based Ap-proach to Ellipsis Resolution, ComputationalLinguistics,Vol.
15, No 2. pp 75-96.Copestake, Ann & Karen Sparck Jones (1990) Natu-ral Language Interfaces to Databases, Technical ReportNo.
187, University of Cambridge, UKDahlb~lck, Nils & Ame J6nsson (1989) EmpiricalStudies of Discourse Representations forNatural Lan-guage Interfaces, Proceedings of the Fourth Conferenceof the European Chapter of the ACL, Manchester.
1989.Gilbert, Nigel, Sarah Buckland, David Frolich, Mari-na Jirotka & Paul Luff, Providing Advice Through Dia-logue, (1990) Proceedings of ECAI-90, Stockholm.Grishman, R.:& Kittredge, R.
(Eds.)
1986.
Analysinglanguage in restricted omains.
Lawrence Edbaum.JOnsson, Arne (1990) Application-Dependent Dis-course Management for Natural Language Interfaces: AnEmpirical Investigation, Papers from the Seventh Scandi.navian Conferen'ce ofComputational Linguistics, Rey-kjavik, Iceland.
:JOnsson, Arne (1991) A Natural Language Shell andTools for Customizing the Dialogue in Natural LanguageInterfaces.
Internal Report, LiTH-IDA-R-91-10.JOnsson, Arne & Nils Dahlbitck (1988) Talking to aComputer isnot Like Talking to Your Best Friend.
Pro-ceedings of The first Scandinivian Conference on Artifi-cial Intelligence, Troms?, Norway.Levinson, Stephen C. (1981) Some Pre-Observationson the Modelling of Dialogue, Discourse Processes, No4, pp 93-116.Levinson, Stephen C. (1983) Pragmatics.
CambridgeUniversity Press.LineU, Per, Lennart Gustavsson & P~vi Juvonen(1988) Interactional Dominance in Dyadic Communica-tion.
A presentation f the Initiative-Response Analysis.Linguistics, 26(3).Litman, Diane J.
(1986) Understanding Plan Ellipsis,Proceedings of AAAI-86.McCoy, Kathleen F. & Jeannette Cheng (1988) Focusof Attention: Constraining What Can Be Said Next, Pre-sented at the 4th International Workshop on Natural Lan,guage Generation.Buffalo.Polanyi, Livia & Remko Scha (1984) A Syntactic Ap-proach to Discourse Semantics, Proceedings of COL-ING' 84 , Stanford.Pollack, Mariha E. (1986) A Model of Plan Inferencethat Distinguishes between the Beliefs of Actors and Ob,servers, Proceedings of the 24th Annual Meeting of theACL, New York.Pollack, Martha E. (1990) Plans as Complex MentalAttitudes, Intentions in Communication, MITPress,1990.Reichman, Rachel (1985) Getting Computers to TalkLike You and Me, MIT Press, Cambridge, MA.Schegloff, Emanuel, A.
& Harvey Sacks (1973)Opening up clos!ngs, Semiotica, 7, pp 289-327.Wachtel, Tom (1986) Pragmatic sensitivity in NL in,terfaces and the Structure of conversations, Proceedingsof COLING'86.
Bonn.Wirtn, Mats :(1988) On Control Strategies and Incre-mentality inUnification-Based Chart Parsing, Licentiatethesis, Thesis No 140, Department ofComputer and In-formation Science, Linktping University- 238 -
