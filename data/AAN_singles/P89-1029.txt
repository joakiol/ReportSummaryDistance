A GENERALIZATION OF THE OFFLINE PARSABLE GRAMMARSAndrew HaasBBN Systems and Technologies, 10 Moulton St., Cambridge MA.
02138ABSTRACTThe offline parsable grammars apparentlyhave enough formal power to describe humanlanguage, yet the parsing problem for thesegrammars is solvable.
Unfortunately they excludegrammars that use x-bar theory - and thesegrammars have strong linguistic justification.
Wedefine a more general class of unificationgrammars, which admits x-bar grammars whilepreserving the desirable properties of offlineparsable grammars.Consider a unification grammar based on termunification.
A typical rule has the formt o - -~ t 1 .
.
.
t nwhere t o is a term of first order logic, and tt...t nare either terms or terminal symbols.
Those t iwhich are terms are called the top-level terms ofthe rule.
Suppose that no top-level term is avariable.
Then erasing the arguments of the top-level terms gives a new ruleC 0 ---,?.
Cl....C nwhere each c i is either a function letter or aterminal symbol.
Erasing all the arguments ofeach top-level term in a unification grammar Gproduces a context-free grammar called thecomext-free backbone of G. If the context-freebackbone is finitely ambiguous then G is offlineparsable (Pereira and Warren, 1983; Kaplan andBresnan, 1982).
The .parsing problem for offlineparsable grammars ts solvable.
Yet thesegrammars apparently have enough formal powerto describe natural language - at least, they candescribe the crossed-serial dependencies of Dutchand Swiss German, which are presently the mostwidely accepted example of a construction thatgoes beyond context-free grammar (Shieber1985a).Suppose that the variable M ranges overintegers, and the function letter "s" denotes thesuccessor function.
Consider the rule1 p(M) ---) p(s(M))A grammar containing this rule cannot be offlineparsable, because erasing the arguments of thetop-level terms in the rule gives2 p ---~ pwhich immediately leads to infinite ambiguity.One's intuition is that rule (1) could not occur in anatural anguage, because it allows arbitrarily longderivations that end with a single symbol:p(s(0)) ~ p(0)p(s(s(0))) ~ p(s(0)) ~ p(0)p(s(s(s(0)))) ~ p(s(s(0))) ~ p(s(0)) --> p(0), , ?
.Derivations ending in a single symbol can occurin natural anguage, but their length is apparentlyrestricted to at most a few steps.
In this case theoffline parsable grammars exclude a rule thatseems to have no place in natural anguage.Unfortunately the offline parsable grammarsalso exclude rules that do have a place in naturallanguage.
The excluded rules use x-bar theory.In x-bar theory the major categories (noun phrase,verb phrase, noun, verb, etc.)
are not primitive.The theory analyzes them in terms of twofeatures: the phrase types noun, verb, adjective,preposition, and the bar levels 1,2 and 3.
Thus anoun phrase is maJor-cat(n,2) and a noun is major-cat(n,1).
This is a very simplified account, but it isenough for the present purpose.
See (Gazdar,Klein, Pullum, and Sag 1985) for more detail.Since a noun phrase often consists of asingle noun we need the rule3 major-.cat(n,2) ~ major-.cat(n,l)Erasing the arguments of the category symbolsgives4 major-cat ~ major-catand any grammar that contains this rule isinfinitely ambiguous.
Thus the offline parsablegrammars exclude rule (3), which has stronglinguistic justification.One would like a class of grammars thatexcludes the bad rulep(s(Y)) -., p(Y)and allows the useful rule237major-cat(n,2) --~ major-cat(n,1 )Offline parsable grammars exclude the secondrule because in forming the context-free backbonethey erase too much information - they erase thebar levels and phrase types, which are needed toguarantee finite ambiguity.
To include x-bargrammars in the class of offline parsablegrammars we must find a different way to formthe backbone - one that does not require us toerase the bar levels and phrase types.One approach is to let the grammar writerchoose a finite set of features that will appear inthe backbone, and erase everything else.
Thisresembles Shieber's method of restriction(Shieber 1985b).Or following Sato et.al.
(1984)we could allow the grammar writer to choose amaximum depth for the terms in the backbone,and erase every symbol beyond that depth.
Eithermethod might be satisfactory in practice, but fortheoretical purposes one cannot just rely on theingenuity of grammar writers.
One would like atheory that decides for every grammar whatinformation is to appear in the backbone.Our solution is very close to the ideas of Xuand Warren (1988).
We add a simple sort systemto the grammar.
It is then easy to distinguishthose sorts S that are recursive, in the sense that aterm of sort S can contain a proper subterm of sortS.
For example, the sort "list" is recursive becauseevery non-empty list contains at least one sublist,while the sorts "bar level" and "phrase type" arenot recursive.
We form the acyclic backbone byerasing every term whose sort is recursive.
Thispreserves the information about bar levels andphrase types by using a general criterion, withoutrequiring the grammar writer to mark thesefeatures as special.
We then use the acyclicbackbone to define a class of grammars for whichthe parsing problem is solvable, and this classincludes x-bar grammars.Let us review the offline parsable grammars.Let G be a unification grammar with a set of rulesR, a set of terminals T, and a start symbol S. Smust be a ground term.
The ground grammar forG is the four-tuple (L,T,R' ,S), where L is the setof ground terms of G and R" is the set of groundinstances of rules in R. If the ground grammar isfinite it is simply a context-free grammar.
Even i fthe ground grammar is in.f'mite, we can define theset of derivation trees and the language that itgenerates just as we do for a context-freegrammar.
The language and the derivation treesgenerated by a unification grammar are the onesgenerated by its ground grammar.
Thus one canconsider a unification grammar as an abbreviationfor a ground grammar.
The present paper excludesgrammars with rules whose right side is empty;one can remove this restriction by astraightforward extension.A ground grammar is depth-bounded if forevery L > 0 there is a D > 0 such that every parsetree for a string of length L has a depth < D. Inother words, the depth of a p.arse tree is boundedby the length of the stnng it derives.
Bydefinition, a unification grammar is depth-bounded iff its ground grammar is depth-bounded.One can prove that a context-free grammar isdepth-bounded iff it is finitely ambiguous (thegrammar has a f'mite set of symbols, so there isonly a finite number of strings of given length L,and it has a finite number of rules, so there is onlya finite number of possible parse trees of givendepth D).Depth-bounded grammars are importantbecause the parsing problem is solvable for anydepth-bounded unification grammar.
Consider abottom-up chart parser that generates partial parsetrees in order of depth.
If the input (~ is of lengthL, there is a depth D such that all parse trees forany substring of a have depth less than D. Theparser will eventually reach depth D; at this depththere are no parse trees, and then the parser willhalt.The essential properties of offline parablegrammars are these:Theorem 1.
It is decidable whether a givenunification grammar is offline parsable.Proof: It is straightforward to construct thecontext-free backbone.
To decide whether thebackbone is finitely ambiguous, we need onlydecide whether it is depth-bounded.
We present analgorithm for this problem.Let C a be the set of pairs \[A,B\] such that AB by a tree of depth n. Clearly C t is the set ofpairs \[A,B\] such that (A ----) B) is a rule of G. Also,Cn+ 1 is the set of pairs \[A,C\] such that for someB, \[A,B\] ~ C a and \[B,C\] ?
C t. Then if G isdepth-bounded, C a is empty for some n > 0.
If Gis not depth-bounded, then for some non-terminalA, A =~ A.The following algorithm decides whether acfg is depth-bounded or not by generating C n forsuccessive values of n until either C a is empty,proving that the grammar is depth-bounded, or C acontains apair of the form \[A, A\], proving that thegrammar is not depth-bounded.
The algorithmalways halts, because the grammar is either depth-bounded or it is not; in the first case C n -- ~ forsome n, and in the second case \[A,A\] e C a forsome n.238Algorithm 1.n := 1;C I := {\[A,BI I (A ~ B) is a rule o fG  }while true do\[ if C n = ~ then return true;if (3 A .
\[A,A\] ~ Ca) then return false;Cn, I := {\[A,C\] 1(3 B.
\[A,B\] ~ C n^ \[B,C\] ~ Ct)};n := n+t;\]Theorem 2.
If a unification grammar G isoffline parsable, it is depth-bounded.Proof: The context-free backbone of G isdepth-bounded because it is finitely ambiguous.Suppose that the unification grammar G is notdepth-bounded; then there is a string a of symbolsin G such that cx has arbitrarily deep parse trees inG.
If t is a parse tree for a in G, let t '  be formedby replacing each non-terminal f(xt...xn) in t withthe symbol f. t '  is a parse tree for ct in thecontext-free backbone, and it has the same depthas t. Therefore a has arbitrarily deep parse trees inthe context-free backbone, so the context-freebackbone is not depth-bounded.
Thiscontradiction shows that the unification grammarmust be depth-bounded.Theorem 2 at once implies that the parsingproblem is solvable for offline parsable grammars.We define a new kind of backbone for aunification grammar, called the acyclic backbone,The acyclic backbone is like the context-freebackbone in two ways: there is an algorithrn todecide whether the acyclic backbone is depth-bounded, and ff the acyclic backbone is depth-bounded then the original grammar is depth-bounded.
The key difference between the acyclicbackbone and the context-free backbone is that informing the acyclic backbone for an x-bargrammar, we do not erase the phrase type and barlevel features.
We consider the class of unificationgrammars whose acyclic backbone is depth-bounded.
This class has the desirable properties ofoffline parsable grammars, and it includes x-bargrammars that are not offline parsable.For this purpose we augment our grammarformalism with a sort system, as defined in(GaUier 1986).
Let S be a finite, non-empty set ofsorts.
An S-ranked alphabet is a pair (Y~,r)consisting of a set ~ together with a function r :Y~-+ S* X S assigning a rank (u,s) to each symbol fin I:.
The string u in S* is the arity of f  and s is thesort off .
Terms are defined in the usual way, andwe require that every sort includes at least oneground term.As an illustration, let S = { phrase, person,number I.
Let the function letters of 57 be { np, vp,s, 1st, 2nd, 3rd, singular, plural }.
Let ranks beassigned to the function letters as follows,omitting the variables.r(np) = (\[person,  umber\],phrase)r(vp) = (\[person, umber\],phrase)r(s) = (e,phrase)r(lst) = (e,number)r(2nd) = (e,number)r(3rd) = (e,number)r(singular) = (e,person)r(plural) = (e,person)We have used the notation \[a,b,c\] for the string ofa, b and c, and e for the empty string.
Typicalterms of this ranked alphabet are np(lst,singular)and vp(2nd, plural).A sort s is cyclic if there exists a term of sorts containing a proper subterm of sort s. If not, s iscalled acyclic.
A function letter, variable, or termis called cyclic if its sort is cyclic, and acyclic ifits sort is acyclic.
In the previous example, thesorts "person","number", and "phrase" are acyclic.Here is an example of a cyclic sort.
Let S ={list,atom} and let the function letters of E be {cons, nil, a, b, c }.
Letr(a) = (e,atom)r(b) = (e,atom)r(c) = (e,atom)r(nil) = (e,list)r(cons) = (\[atom,list\],list)The term cons(a,nil) is of sort "list", and itcontains the proper subterm nil, also of sort "list".Therefore "list" is a cyclic sort.
The sort "list"includes an infinite number of terms, and it is easyto see that every cyclic sort includes an infinitenumber of ground terms.If G is a unification grammar, we form theacyclic backbone of G by replacing all cyclicterms in the rules of G with distinct new variables.More exactly, we apply the following recursivetransformation to each top-level term in the rulesof G.transform(f(t t...tn) ) --if the sort of f is cyclicthen new-variable0else f(transform(t 1)...transform(tn))where "new-variable" is a function that returns anew variable each time it is called (this newvariable must be of the same sort as the functionletter t').
Obviously the rules of the acyclicbackbone subsume the original rules, and theycontain no cyclic function letters.
Since the239acyclic backbone allows all the rules that theoriginal grammar allowed, if it is depth-bounded,certainly the original grammar must be depth-bounded.Applying this transformation to rule (1)givesp(X) --~ p(Y)because the sort that contains the integers must becyclic.
Applying the transformation to rule (3)leaves the rule unchanged, because the sorts"phrase type" and "bar level" are acyclic.
In anyx-bar grammar, the sorts "phrase type" and "barlevel" will each contain a finite set of terms;therefore they are not cyclic sorts, and in formingthe acyclic backbone we will preserve the phrasetypes and bar levels.
In order to get this we resultwe need not make any special provision for x-bargrammars - it follows from the general principlethat if any sort s contains a finite number ofground terms, then each term of sort s will appearunchanged in the acyclic backbone.We must show that it is decidable whether agiven unification grammar has a depth-boundedacyclic backbone.
We will generalize algorithm 1so that given the acyclic backbone G '  of aunification grammar G, it decides whether G '  isdepth-bounded.
The idea of the generalization isto use a set S of pairs of terms with variables as arepresentation for the set of ground instances ofpairs in S. Given this representation, one can useunification to compute the functions andpredicates that the algorithm requires.
First onemust build a representation for the set of pairs ofground terms \[A,B\] such that (A --> B) is a rule inthe ground grammar of G ' .
C lear ly  thisrepresentation is just the set of pairs of terms\[C,D\] such that (C ~ D) is arule o fG ' .Next there is the function that takes sets S tand S 2 and finds the set link(Si,S 2) of all pairs\[A,C\] such that for some B, \[A,B\] e S t and \[B,C\]S 2.
Let T t be a representation for S t and T 2 arepresentation for S 2, and assume that T t and T 2share no variables.
Then the following set ofterms is a representation for link(St,S2):{ s(\[A,C\]) I(3 B,B' .
\[A,B\] ~ T 1 A \[B' ,C\] E T 2A S is the most general unifierof B and B' )IOne can prove this from the basic properties ofunification.It is easy to check whether a set of pairs ofterms represents the empty set or not - since everysort includes at least one ground term.
a set ofpairs represents the empty set iff it is empty.
It isalso easy to decide whether a set T of pairs withvariables represents a set S of ground pairs thatincludes a pair of the form \[A,A\] - merely checkwhether A unifies with B for some pair \[A,B\] inT.
In this case there is no need for renaming, andonce again the reader can show that the test iscorrect using the basic properties of unification.Thus we can "lift" the algorithm forchecking depth-boundedness from a context-treegrammar to a unification grammar.
Of course thenew algorithm enters an infinite loop for someunification grammars - for example, a grammarcontaining only the rule1 p(M) -+ p(s(M))In the context-free case the algorithm haltsbecause if there are arbitrarily long chains, somesymbol derives itself - and the algorithm willeventually detect this.
In a grammar with ruleslike (1), there are arbitrarily long chains and yetno symbol ever derives itself.
This is possiblebecause a ground grammar can have infinitelymany non-terminals.Yet we can show that if the unificationgrammar G contains no cyclic function letters, theresult that holds for cfgs will still hold: if there arearbitrarily long chain derivations, some symbolderives itself.
This means that when operating onan acyclic backbone, the algorithm is guaranteedto halt.
Thus we can decide for any unificationgrammar whether its acyclic backbone is depth-bounded or not.The following is the central result of thispaper:Theorem 3.
Let G '  be a unfication grammarwithout cyclic function letters.
If the groundgrammar of G '  allows arbitrarily long chainderivations, then some symbol in the groundgrammar derives itself.Proof: In any S-ranked alphabet, the ntunberof terms that contain no cyclic function letters isfinite (up to alphabetic variance).
To see this, letC be the number of acyclic sorts in the language.Then the maximum depth of a term that containsno cyclic function letters is C+I.
For consider aterm as a labeled tree, and consider any path fromthe root of such a tree to one of its leaves.
Thepath can contain at most one variable or function..letter of each non-cyclic sort, plus one variable ofa cyclic sort.
Then its length is at most C+I.Furthermore, there is only a finite number offunction letters, each taking a fixed number ofarguments, so there is a finite bound on the240number of arguments of a function letter in anyterm.
These two observations imply that thenumber of terms without cyclic function letters isfinite (up to alphabetic variance).Unification never introduces a functionletter that did not appear in the input; thereforeperforming unifications on the acyclic backbonewill always produce terms that contain no cyclicfunction letters.
Since the number of such termsis finite, unification on the acyclic backbone canproduce only a finite number of distinct erms.Let D t be the set of lists (A,B) such that (AB) is a rule of G ' .
For n> 0 let Dn+ t be the setof lists s((Ao,...An,B)) such that (Ao,...An) ~ D n,(A',B) ~ D t, and s is the most general unifier ofA n and A' (after suitable renaming of variables).Then the set of ground instances of lists in D n isthe set of chain derivations of length n in theground grammar for G ' .
Once again, the proof isfrom basic properties of unification.The lists in D a contain no cyclic functionletters, because they were constructed byunification from Dr, which contains no cyclicfunction letters.
Let N be the number of distinctterms without cyclic function letters in G'  - ormore exactly, the number of equivalence classesunder alphabetic variance.
Since the groundgrammar for G'  allows arbitrarily long chainderivations, DN?
t must contain at least oneelement, say (Ao,...AN+I).
This list contains twoterms that belong to the same equivalence class;let A i be the first one and Aj the second.
Sincethese terms are alphabetic variants they can beunified by some substitution s. Thus the lists((Ao,...AN+t)) contains two identical terms, s(Ai)and s(Aj).
Let s" be any subsitution that mapss((AO,...AN?t)) to a ground expression.
Thenst(s((A0,...AN+I))) is a chain derivation in theground grammar for G ' .
It contains a sub-lists' (s(Ai,...Aj)), which is also a chain derivation inthe ground grammar for G ' .
This derivationbegins and ends with the symbol s' (s(Ai)) ---s'(s(Aj)).
So this symbol derives itself in theground grammar for G ' ,  which is what we set outto prove.FinaU.y, we can show that the new class ofgrammars m a superset of the offline parsablegrammars.Theorem 4.
If G is a typed unificationgrammar and its context-free backbone is finitelyambiguous, then its acyclic backbone is depth-bounded.Proof: Asssume without loss of generalitythat the top-level function letters in the rules of G~e acyclic.
Consider a "backbone" G'  formed byreplacing the arguments of top-level terms in Gwith new variables.
If the context-free backboneof G is finitely ambiguous, it is depth-bounded,and G' must also be depth-bounded (the intuitionhere is that replacing the arguments with newvariables is equivalent to erasing them altogether).G' is weaker than the acyclic backbone of G, so ifG'  is depth-bounded the acyclic backbone is alsodepth-bounded.The author conjectures that grammars whoseacyclic backbone is depth-bounded in factgenerate the same languages as the offlineparsable grammars.ConclusionThe offline parsable grammars apparentlyhave enough formal power to describe naturallanguage syntax, but they exclude linguisticallydesirable grammars that use x-bar theory.
Thishappens because in forming the backbone oneerases too much information.
Shieber's restrictionmethod can solve this problem in many practicalcases, but it offers no general solution - it is up tothe grammar writer to decide what to erase in eachcase.
We have shown that by using a simple sortsystem one can automatically choose the featuresto be erased, and this choice will allow the x-bargrammars.The sort system has independent motivation.For example, it allows us to assert hat the feature"person" takes only the values 1st, 2nd and 3rd.This important fact is not expressed in an unsorteddefinite clause grammar.
Sort-checking will thenallow us to catch errors in a grammar - forexample, arguments in the wrong order.
RobertIngria and the author have used a sort system ofthis kind in the grammar of BBN SpokenLanguage System (Boisen et al, 1988).
Thisgrammar now has about 700 rules andconsiderable syntactic overage, so it represents aserious test of our sort system.
We have found thatthe sort system is a natural way to expresssyntactic facts, and a considerable help indetecting errors.
Thus we have solved the problemabout offline parsable grammars using amechanism that is already needed for otherpurposes.These ideas can be generalized to otherforms of unification.
Consider dag unification asin Shieber (1985b).
Given a set S of sorts, assign asort to each label and to each atomic dag.
Thearity of a label is a set of sorts (not a sequence ofsorts as in term unification).
A dag is well-formedff whenever an arc labeled 1 leads to a node n,241either n is atomic and its sort is in the arity of 1, orn has outgoing arcs labeled Ir..l n, and the sorts of11...1 n are ill the arity of 1.
One can go on todevelop the theory for dags much as the presentpaper has developed it for terms.This work is a step toward the goal offormally defining the class of possible grammarsof human languages.
Here is an example of aplausible grammar that our definition does notallow.
Shieber (1986) proposed to make the list ofarguments of a verb a feature of that verb, leadingto a grammar roughly like this:vp ~ v(Args) arglist(Args)v(cons(np,nil)) ~ \[eat\]arglist(nil) ----r earglist(cons(X,L)) ~ X arglist(L)Such a grammar is desirable because it allows usto assert once that an English VP consists of averb followed by a suitable list of arguments.
Thelist of arguments must be a cyclic sort, so it willbe erased in forming the acyclic backbone.
Thiswill lead to loops of the formarglist(X) ~ arglist(Y)Therefore a grammar of this kind will not have adepth-bounded acyclic backbone.
This type ofgrammar is not as stroagly motivated as the x-bargrammars, but it suggests that the class ofgrammars proposed here is still too narrow tocapture the generalizations of human language.Geoffrey; and Sag, Ivan.
(1985) GeneralizedPhrase Structure Grammar.
Oxford: BasilBlackwell.Pereira, Fernando, and Warren, DavidH.
D. (1983) Parsing as Deduction.
InProceedings of the 21st Annual Meeting of theAssociation for Computational Linguistics,Cambridge, Massachusetts.Sato, Taisuke, and Tamaki, Hisao.
(1984)Enumeration of Success Patterns in LogicPrograms.
Theoretical Computer Science 34,227 -240.Shieber, Stuart.
(1985a) Evidence againstthe Context-freeness of Natural Language.Linguistics and Philosophy 8(3), 333-343.Shieber, Stuart.
(1985b).
Using Restrictionto Extend Parsing Algorithms for Complex-Feature-Based Formalisms.
In Proceedings of the23rd Annual Meeting of the Association forComputational Linguistics, 145-152.
University ofChicago, Chicago, Illinois.Shieber, Stuart.
(1986) An Introduction toUnification-Based Approaches to Grammar.Center for the Study of Language andInformation.Xu, Jiyang, and Warren, David S. (1988) AType System for Prolog.
In Logic Programming:Proceedings of the Fifth International Conferenceand Symposium, 604-619.
MIT Press.ACKNOWLEDGEMENTSThe author wishes to acknowledge thesupport of the Office of Naval Research undercontract number N00014-85-C-0279.REFERENCESBoisen, Sean; Chow, Yen-lu; Haas, Andrew;lngria, Robert; Roucos, Salim; StaUard, David;and Vilain, Marc.
(1989) Integration of Speechand Natural Language Final Report.
Report No.6991, BBN Systems and TechnologiesCorporation.
Cambridge, Massachusetts.Bresnan, Joan, and Kaplan, Ronald.
(1982)LFG: A Formal System for GrammaticalRepresentation.
i  The Mental Representation fGrammatical Relations.
M1T Press.Gallier, Jean H. (1986) Logic for ComputerScience.
Harper and Row, New York, New York.Gazdar, Gerald; Klein, Ewan; Pullum,242
