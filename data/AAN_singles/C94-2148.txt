UNIVERSAL GUIDES AND FINITENESS AND SYMMETRY OFGRAMMAR PROCESSING ALGORITHMSMiroslav Martinovi~Courant Institute of Mathematical Sciences, New York Universitymartin@cs.nyu.eduABSTRACTThis paper presents a novel technique called "universalguides" which explores inherent properties of logicgrammars (changing variable binding status) in order tocharacterize tbrmal criteria for termination i  a derivationprocess.
The notion of universal guides also offers a newframework in which both parsing and generation can beviewed merely as two different instances of the samegeneric process: guide consumption.
This techniquegeneralizes and exemplifies a new and original use of anexisting concept of "proper guides" recently proposed inliterature for controlling top-down left-to-right (TDLR)execution in logic progrmns.
We show that universalguides are independent of a particular grammar evaluationstrategy.
Also, unlike proper guides they can be specifiedin the same mmmer for any given algorithm withoutknowing in advance whether the algorithm is a parsing ora generation algorithm.
Their introduction i to a grammarprevents as well the occurrence of certain grammar ulesan infinite number of times dnring a derivation process.1.
INTRODUCTION AND MOTIVATIONThis research interacted with a Japanese-Englishmachine translation project at New York University.
Theresults reported herein are part of an attempt to establishan evaluation system for grammar processing algorithms(parsing and generation algorithms).
The need forevaluation of various competing approaches presentlyavailable lbr parser and generator design has been feltstrongly in both Theoretical and Computational1,inguistics.
Both fields have been thus fat predominantlyempMcal, so that the measuring of actual progress hasbecome very difficult, l lere, we introduce the notion ofuniversal guides in order to discuss two of the mostrelevant criteria tot the comparison of different parsingand generation algorithms: finiteness aml symmetry.Other criteria such as completeness, soundness, efficiency,etc., although equally significant and interesting, areoutside of the scope of this paper and are addressed in\[M92\].There is a natural appeal to the problem ofcharacterizing parsing and generation within the samefl'amework and in a symmetrical way.
The reversibility isby its nature symmetrical: parsing is retrieving asemanticcontent fiom a phonological one, and generation, aphonological from a semantic content.
Several papers(\[$88\], \[N89\], \[SNMP89\], \[DI88\], \[DI90\], and \[DIP90\])have recognized parsing and generation as instances of asingle paradigm and have pointed out the correspondencebetween certain parsing problems and techniques (left-recursion, linking, Early deduction) and their correlates ingeneration.It has also been long noticed that adopting a certaintechnique for a derNation process can lead to terminationproblems (sometimes referred to as infinite derivations).Perhaps the best known example of this is using theTDLR derivation lor left-recursive rules.
Consequently, tospecify conditions on grammars, whose liflfillment isnecessary and stffficient o guarantee finite derivationsunder a given evaluation strategy, posed another problem,one that has been given serious attention recently (\[D90\],\[I)lP90\]).
These conditions are usually referred to as thefiniteness criteria and are often given in the form ofsufficient hough not necessary conditions ("worst case"analysis of the finiteness of an algorithm).What we propose here is to abstract the notion of stringindex in parsing to the notion of a universal guide.
Asimilar proposal was made in \[DIPg0\] for guides (herecalled proper guides to distinguish them fiom univetwalguides).
Using the new concept, both parsing andgeneration call be seen as two instances of the samegeneric process: universal guide consmnption.
Universalguides prove to be more general than proper guidesbecause they can be used under any evaluation strategyand not only under TDLR technique as must properguides.
They achieve symmetry in treating parsing andgeneration but need not be instantiated ifl'erently ineither case, unlike proper guides.
Universal guides can beconsnmed anywhere during a derivation, as opposed toproper guides which may be consumed only by theapplication of lexical rules, therefore restricting the classof grammars for which they can be used.
Moreover, weshow here that proper guides can be viewed as a specialcase of our universal guides concept.
The introduction ofuniversal guides into a grammar also prevents the infiniterepetition of certain grammar ules (i.e.
those that do notinstantiate any grammar variable and cause infinite loops).2.
PRIOR RELATED WORKSome of the most significant findings with respect ocharacterizing finiteness and symmetry of gratnmarprocessing algorithms have been published by \[)ymetman,lsabelle and Perrault in \[D1P90\].
The authors pointed outthe symmetrical nature of parsing and generation byintroducing the notion of (proper) guides.
A guidestructure is a partially ordered set G that respects thedescending chain condition, i.e.
the condition that in (3 all916strictly decreasing chaius (1~ >l\[>...>li>.,. )
are finite.Guides were introduced lilt() each of a logic gralllnlar'sllon-tcrlllinals in the fOlill ell: IleW, SO called guidevariables.
These variables added SOlllC redundal/cy whichcould be exploited for tighter control of thecomputational process.
Aller the guide wuiablcs wereadded and left recursion was eliminated (by perlbrmingthe usual trallslbrmation as indicated in \[I)IP901), thecreation of a IICW gl'allllllaf, equivalent lo the originalone, was completed.
Then, a set of conditions wasspecified that, if the now gIanllnal' satisfied it, guaranteeda finite deriwition lor any given goal.
The conditions are:tile guide coilstullplion condition (GCC) alid the no-clmincondition (Nee) .
The guide coi\]stnnption condition statesthat the wthies for guide wu'iablcs must initially he finiteand must also be consumed (decreased) each time alexical predicate is expanded.
The no-chain conditionprohihits tile exclusive appearance el:predicates like 7' 4/on tile right-hand side of  a rule.
It was shown that i f  both(iCC altd NCC held, all derivations ill the gl-allllllal'would lie finite.
The notion of guides is applicable Ioboth parsing and generation btit it is instantiateddifl{Jrently in each case (for parsing, the guide wiriablcrcprcscuts file list of words awaitiug to he allalyzed, aildfbr generation, the list of seniantics of subcalegorizcdconstituents lonmining to be generated).
Tile authors ofI I)lPg01 also denlonstrated all application of their mainresult to the chiss of lexical gl'all/lllars.The following inqJrovcments look desirable with respectto the maiil result from 11)11>901:(i) The guides should bc specified bolero the detailso1 Ihe algoritlun (parsin!.,> or gelleration) alld lhcunderlying lallllllal" (lexical or other kind) arc awfilablc.They should llot he dependent on these details;(ii) The lnaiu result (concerning linitc derivations)should be stated with respect to ally gfanlniar evahlatiollstrategy and not only with respect to tile top-down,left-to-right algorithm;(iii) The constunption of guides Stlould be allowed atally level, llot only lexical; alld(iv) The very introduction of guides (with noaddilional gralnlllar lrailsforniatioiis) should prevent acertain kind of iulinite derivalions fron/ happeuing (i.e.those due to left recursive rules).Wc show here that tile guides' approach hy l)ymctmanct al.
can be viewed as a special case of tile universalguides approach lhat we introduce in this paper.
We alsodemonstrate thai universal guides realize the desirediniprovcmcnls.3.
UNIVERSAl ,  ( ;UI I )ESWe nlotivatc our introduction of tmivcrsal guidesaround the idea that a deriwition can be perceived as aprocess of discovering the set of all wiriabfcs thatparticipate iu it.
In other words, a deriwltion is 13nding alllogic grammar symbols that arc Uldnstantiatcd at themoment when they appear in the derivation for the firsttime, and keeping track of changing of their bindingstatus.
The logic glammar symbols enter a derivation hyapplying a production rule in which they participateeither as bound, or partially or totally unbotuld.
'f'hcnon-hound ones may or may not get instantiated uringthe dcriwltion and their number can be finite (in thecase era  finite derivation) o, inlhiitc (as with an inl\]nitcderiwltion).
The term complete derivation we use for thederivation "in which the set of uninstantiated variableseventually gets reduced to all empty set,The set (finite or infinite) of all these variables hasproperties sinlilar to tile guides as defined byllylnetman, et al in \[I)IP90\] (only the descending chaincondition is not guaranteed) and will as such be a majorcompoHent of .our notion of universal guides.
Thecomparison relalioil Ibr this partially ordered structureconsisting of sets will be based on tile rclatiolJ "being asubset" c-.
We forinalizc the previous discussion by theIbllow ing dclhfitions.I)I:,FINITION 3.
I.
(A \[;SEI:UI, I~ARTIAI,I,YO1(1)1H~, El) P, 1,;1 ,ATION)Lot S and S' bc two sets and N and N' lwo n()n-negative integers.
We say that ordered pair (S,N) isgreater than or equal lo ordered pair (S' ,N')  and write(S,N)~>(S',N') i ff(S S '&  N. N ' )or(S .~S'  or(S :S'&N>N')~is obviously a reflexive, anti.-symmctrical andtransitive relation and therefore a relation e/l partialorder.I)I<;I:INITI()N 3.2.
(UNIVI~,RSA1, GUII)I iS)l,ct ~ he a collection of all subsets of a set ~ (~ '.1~(~))and I ?
set of all non-negative integers.
A universalguide structure is a partially ordered structure (P ,~) ,where P :  { (S ,N) /  S~'~ & N~I ?
}, and > is fiomtile definition 3.1..The presence of a special kind of universal guides ina grammar is always only implicit, but for tile sake ofbeing able to prove Ihcts about them formally, it can bemade explicit.
The universal guide structure in a logicgramnmr is hased oil the set of wuiables stilluninstantiated at a given moment of a derivationprocess, l",xpansion of a production rule may or may notinstantiate (consume) some of them.
l:or instance, byadding two special extra argtuncnts to each symbol inthe following rules:(1) noun phrase ( Num, NP Str, NP Rest ) -->det(Num,NP Str,I) Rcst),noun(Nun\],l) Rest,NP Rest).
(2) del ( sing, laiD Rest\] I) Rest ).
(3) noun ( sing, I(log~kN Rest\]~ N Rest ).tile convergence or diver/_,ence of a derivation using tilerules becomes explicit.
The uew arguments are: a set ofcurrently uninstantiated variables (tile so called guide'sset component) and a non-negative integer (the guide's977numeric omponent).
The following simple derivation ofthe phrase a dog:noun~hrase (Num, NP_Str, NP_Rest) ->det (Num, NP.
Str, DRest),noun (Nmn, DRest,  NP_Rest) --> (1)det (sing, laiD Rest\], D Rest),noun (sing, D Rest, NP Rest) --> (2)det (sing, \[a, doglNP Rest\], \[doglNP - Rest\]),noun (sing, \[dog\[NP_Rest\], NP_Rest).
(3)(assuming there are p rules in the grammar) becomes:noun phrase (Num, NP_Str, NP Rest,{Num, NP_Str, NP_Rest, D_Rest}, p) -->det (Num, NP Str, D_Rest,{Num, NP Str, NP_Rest, D_Rest}, p-l),noun (Num, D Rest, NP Rest,{Num, NP_Str, NP Rest, DRest}, p-l) --> (/)det (sing, laiD_Rest\], I)  Rest,{NP_Rest, D_Rest}, p),noun (sing, D Rest, NP_Rest,{NP Rest, DRest}, O) --> (2)det (sing, \[a,dog~NP Rest\], \[dog~NP_Rest\],{NP_Rest}, O),noun (sing, \[doglNP Rest\], NP_Rest,{NP_Rest}, 0).
(3).The new arguments are given in bold case.
When a ruleto be expanded (partially or completely) instantiates somevariables (rules (2) and (3) in the previous example), theguide's set component is reduced by those variables andthe guide's numeric omponent is reset o p (the numberof rules in the grammar).
On the other hand, when a ruledoes not instantiate any variable, the set component s aysunchanged and the numeric component is decreased byone (rule (1)).The numeric component actually counts (down) thenumber of consecutive occurrences of rules that do notinstantiate may variable.
If that number is larger than thetotal number of rules in the grammar (p), then agrammar ule must have been repeated in its unchangedform, and a potentially infinite derivation is caught.
Sucha rule is always failed.
For example, np --> np pp rulewill in a TDLR derivation cause an infinite loop.However, adding universal guides to it will always, whenthis rule is applied, decrease the guide's numericcomponent by one (as no variable gets instantiated).Since the numeric component is always initialized andreset (after a rule that instantiates some variable(s)) to 9(number of rules in the grammar), it will eventually godown to 0, which in turn will fail this rule, as in thefollowing sequence:np(Vars,p) --> np(Vars,p- 1) pp(Vars,p- 1)--> np(Vars,p-2) pp(Vars,p-2)pp(Vars,p-l)--> np(Vars,p-3) pp(Vars,p-3)pp(Vars,p-2)pp(Vars, p- l)--> np(Vars,0) pp(Vars,0)pp(Vars, I) ... pp(Vars,p- 1)--> fail.All details (additional arguments for original predicates,additional predicates, transformation of the original rulesinto equivalent ones containing uides) of the proceduretbr introducing universal guides into a grammar andtheir handling can be lound in \[M92\].Thus, the universal guide structure is represented inthe new grammar by the pairs (Unln,Num) which standfor the set of all currently uninstantiated variables andthe numeric guide's component, respectively.
The newgrammar is equivalent o the original one.
By theintroduction of an additional grammar predicate at theend of each rule (called decrease in \[M92\]) the guideconsumption condition is demonstrated to hold for anyfinite and complete derivation.
If a variable gets boundthen the guide gets stricUy smaller because the set ofstill uninstantiated variables participating in thederivation has lost one member.
If no variabie getsinstantiated, the decrease of the number component isthere to ensure that the guide itself strictly decreases (bythe definition 3.2.).
By failing, this new (decrease)predicate will stop any derivation that contains asequence of more than p consecutive applications ofrules that do not instantiate any variable (because thefurther decrease of the guide's numeric componentwould make it negative).
Otherwise, a production rulewould be repeated in the same manner withoutinstantiating any of the present variables which would inturn cause an infinite derivation to take place.
Thus,because of the way the universal guides are introducedfor any derivation in the new grammar, guideconsumption condition holds.
The difference betweenfinite and infinite derivations is isolated and solelycharacterized by the set component of the universalguides being either finite or infinite initially.The following theorem establishes a correlationbetween proper and universal guides.Theorem 3.1.: lfthere is a proper guide structure for aclass of logic grammars (in its form flom \[DIP90\])satisfying guide consumption and no-chain conditions(GCC and NCC) under the TDLR grammar evaluationalgorithm, then the universal guide structure (under thesame algorithm) is a proper guide structure satisfyingboth GCC and NCC.ProofThe existence of the proper guides atisfying GCC andNCC nnder the TDLR algorithm guarantees that allderivations will be finite for the given class ofgrammars (main theorem from \[DIP90\]).Since the derivations are finite, the universal guideswill initially assume a finite value (its set componentwill be set to all variables taking part in the derivationand its number component will be assigned value p(number of different production rules in the grammar).The universal guides are defined to always satisfy theguide consumption condition, and since NCC is assnmedas well, it only remains to show that the descending918chain condition is respected.As every strictly descending chain of universal guideswith a finite initial value must be finite (moreover, weknow lhat its length is always less than or equal to p*u(u being number of variables taking part in thederivation), the universal guide structure has allproperties of a proper guide structure,,Thus, whenever proper guides can be used to establishthe finiteness of an algorithm, the universal guidesapproach may likewise be used.Also, tile notion of universal guides proves to be moregeneral than the notion of guides in the sense that it doesnot asstane any partictflar algorithm under which agrammar will be processed.
It is applicable to anyalgorithm, and to apply it would mean to specifyconditions on gtammars thal would (for a givenalgorithm) guarantee finiteness of tile forclnentioncd sets(set components of the universal guides).
Of conrse, thecharacter of tile conditions will ctepcnd oll tile nature oftile gtamtnar processing algorithm.
Proper guicles asproposed by I)ymetman, ctal.
guarantee finiteness el:onespecific (TI)I,R) algorithm if the grammar satisfies GCCand NCC.The following example describing a wh-question (hereused for tile generation of tile sentence who wrote this\[~l'Olll the given semantics wrote(who, this')) could behelpftfl to illustrate the applicability of tile tmiversalguides approach where tim proper guides would notwork:1 ) whquesWhQues Sere, WhQues Sen, WhQues SenRest ) -->whsubjNumber, WhSubj Sere, WhQues.
Sen, Restl ),whpredNumber, Tense, \[WhSubj Sere, WhObj Sere\],WhQues Sere, Restl, Rest2 ),who/~j ( WhOl~i Sere, Rest2, WhQues SenRest ).
(2) whsubj (X, who, \[wholWhSubjRest\], WhSubjRest).
(3) whsubj (X, what, \[what WhSubjRest\], WhSubjRest).
(4) whpred (sing, perf, \[Subj,Obj\], wrote(who,this),\[wroteliWhPredRest\], WhPredRest ).
(5) whobj (this, \[thisl, WhObjRest\], WhObjRest).Fig.
3.1.: A Sample Grammar.When the semantic-head-driven g eration algorithm(see \[SNMP89\]) is used, lhe order in which differentrules are applied carl best be described by tile analysistrec from tile Fig.
3.2..
The mnnbering for edgesindicates the order in which the grammar ules wereused.
Thus, rule (4) was used first, then rule (1),lollowcd by rules (2) and (5) respectively.
The variablesthat were introduced as uninstantiated are WhQues Sen(by invoking the topmost predicate), Sut?/, Old/, andWhPredRest (by the application of rule (4)).
Theapplication of rule (I) (expanded second) unifiednumber components of u,hsub\] and whpred (alreadyinstantiatcd by rule (4)), semantic omponents ofwhsuhjand whol~/ with variables Sul?j and Ot?j fi'om wkf)red ,whques(wrote(who, this),WhQues_Sen,\[\[l)whpred(Nun) ber: ..1 1  Tensse, Subj,  Obj l ,wrote(who,th is) ,whsubj(number, Rest 1, Rest2)WhQues_Sen, Rest 1)whsubj( sing, who,\[who I Iwrote I Rest2\]l,\[wrote I Rest2\])whpred( sing, perf,\[Subj,Obj\],wrote(who,this),\[wrote \[ Rest2\], Rest2)whobj(  Obj ,Rest2, II)whobj( th is ,lthisl, \[I)31who.wrote\] 4thisFig.
3.2.: A Derivation 'Free.919respectively, WhSubjRest component with WhPred Sencomponent of whpred (already partially instantiated byrule (4)), as well as WhPredRest with WhObj Sen.
It alsounified WhSut~j Sen with WhQues Sen and \[\] withWhObjRest and therefore did not introduce any newuninstantiated variables.
The application of rules (2) and(4) did not introduce new variables neither.
Thus, the setof all uninstantiated variables participating in thisderivation is { WhQues_Sen, Subj, Obj, WhPredRest }.Subj gets instantiated by the application of rule (2), Ol~/and WhPredRest by rule (5), and the instantiation of thevariable WhQues Sen is partially done by rules (4), (2),and eventually completed by rule (5).
Thus, setcomponent of the universal guide variable {WhQues_Sen, Subj, Obj, WbPredRest }is first consumedby the application of rule (4) (part of WhQues &m), thenby rule (2) (another part of WhQuesSen, plus Subj), andeventually reduced to an empty set (represented here as\[\]) by rule (5) (final ingredienf of WhQues Sen, plus Ol~/and WhPredRest).This semantic-head-driven d rivation with the universalguides included (and under' assumption that the grammarhas p different production rules) can be described by thefollowing steps:-- whques (wrote(who, this), WhQucs_Sen, \[\],{WhQues Sen, Subj, Obj, WhPredRest}, p).
-?--- whpred (sing, perf, \[Subj,Obj\], wrote(Subj,Obj),\[wrotclWhPredRcst\], WhPredRest,{WhQues_Sen, Subj, Obj, WhPredRest}, P).
rule (4)-- whques (wrote(who,this), WhQues Sen, \[1,{WhQues Sen, Subj, Obj, WhPredRest}, p-I) -->whsubj (sing, Subj, WhQues_Sen, \[wrotel~WhPredRest\],{WhQues Sen, Subj, Obj, WhPredRest}, p-I),whpred (sing, perf, \[Subj,Obj\], wrote(Subj,Obj),\ [wrote ' ,WhPredRest \ ] ,  WhPredRest ,{WhQues_Sen,Subj,Obj,Wh PredRest}, o-l),whob j  (Ob j ,  WhPredRest ,  \ [ \ ] ,{WhQues_Sen,Subj,Obj,WhPredllest}, O-1) rule (1)-- whsubj (sing, who, \[who,wrote',WhPredRest\],\[wrote',Wh PredRest\],{WhQues_Sen,Obj,WhPredl/est},p) rule (2)-- whobj (this, \[this\], \[\], {}, p) rule (5)Unlike universal guides proper guides require a specific(TDLR) grammar evaluation strategy and therefore thisapproach is not applicable at all for the semantic-head-driven generation algorithm since this algorithm assumesa grammar evaluation strategy different fi'om TDI,R.Generally and tbr any evaluation strategy, the formallink between the universal guide consumption andtermination can be expressed by the following claim:Theorem 3.2.: I,et G be a logic grammar and G' itsequivalent aRer the universal guides were introduced intoG.
If the guide consumption condition is fulfilled lbr aderivation in G' and initial value of the guide structureis finite, then the derivation in question will be finite too.The proof of this theorem as well as a detailedspecification of how to introduce tmiversal guides intoa grammar can be found in \[M92\].Moreover, the common essence of tim parsing andgeneration process as merely different instances of thestone generic process of consuming the universal guidesbecomes obvious after making the appearance ofuniversal guides explicit.
Universal guide variables donot necessarily have different meaning for" parsing andgeneration as do proper guides.
Even under anevaluation strategy (TDLR) assumed in advance properguides (as in the case of lexical grammar> floln\[DIP90\]) represent difterenl entities for parsing andgeneration.
For a parsing algorithm guides are differencelists of words remaining to be analyzed, and for' ageneration they are lists of subcategorized semantics tobe generated next.
Unlike proper guides, universalguides exposed the common substance of the twoprocesses.
They are always (for parsing as well as forgeneration) instantiated as sets of all currentlyuninstantiated variables.Another feature of the univcrsal guides that gives theman advantage over proper guides is that they do notimpose the restriction that the guides can be consnmedonly at the level of lexical predicates.
Thus, the class ofgrammars lbr which this approach can be used isbroader than for that of proper guides.Also, we in effect presented here a class of grammarsthe recursivity of which can be proven by induction.4.
CONCLUSIONThis paper' addressed finiteness and symmctry ofparsing and generation algorithms using a novelunivers'al guides approach.
We pointed out somedeficiencies of proper guides' approach as advocated insome earlier research.
These included the applicabilityof proper guides only when the evaluation strategy isTDLR, and when it is also known whether a parsing ora generation algorithm is in question.
Also, theconsmnption of proper guides was allowed only at thelexical evel.
By the introduction of univers'al guide.s' allof these deficiencies are eliminated and a true symmetryis achieved in treating the parsing and generationproblem.
Unlike proper guides, univers'al guides' do notneed to be constructed and instantiated ifferently tbrparsing and for generation, and no additional grammartransformation (i.e.
left recursion elimination) is neededfor them to be applicable.5.
ACKNOWLEDC, MENTSThis papcr is based upon work supported by theDefense Advance Research Prqject Agency underContract N00014-90-J-1851 from the Office of NavalResearch, the National Science Foundation under GrantIRI-93-02615 and the Canadian Institute for Roboticsand Intelligent Systems (IRIS).
Additional support was92.0providcd by Wagner College, Staten lshmd and l'accUniversity, New York.6.
REFERENCES11)1881 I)YMETMAN, M. and \[SAI{I:,\[,I,I'I, P.1988.
"Reversible l,ogic Grammars for MachineTranslation".Proceedings of the 2nd International (.
'onJerenceon 7heoretical and Methodological Issues inMachine 7'ranslalion (?/ Natural Languages,Carnegie-Mellon University, Pittsburgh, PA.111)19011 I)YMI:/I'MAN, M. and ISABH,I,t.
;, I'.1990.
"Grammar Bidirectionality hrough Controlledl\]ackward Deduction".Logic and Logic Grammars ./i;r l,a~NuageProcessing.eds.
Saint Dizier, P. and S. Szpakowicz,Chichester, England: Ellis llorwood.II)IPg0\] I)YMI:/I'MAN, M., ISAI~I';I,t,I".
P. andPI,;RRAUI ,T, F.1990.
"A Symmetrical Approach to Parsing and(ieneration".I'rocecdin,qs o\]' the 13th International(.
'or~brence on (/ompulational Linguistics(('OLING-90)l lelsinki, Hnland, Vol.
3, pp.
90-96.\[1)M78\] I)\[,;RSIIOWITZ, N., MANNA, Z.1978.
"Proving Termination with MultisetOrderings".
"li~chnical RrT)ort, Staq/),'d Uni., March 1978.ID87\] I)I!RSIIOWITZ, N.1987.
"Termination of Rewriting".,Joto'nal ~?"
5,)nnholic (/omputalionVol.
3, 1987.\[M921 MARTINOVIC, M.1992.
An Evaluation A))stem ./i)r Parsing andGeneration Algorithm.October 1992, Belgrade University ThesisResearch Report.\[MS921 MARTINOVI('2, M. and STRZALKOWSKI, T.1992.
"Comparing Two Gralnmar-Based GenerationAlgorithms: A Case Study".Proceedings (?/'the 30th Annual Meeting q/the/lssociation Jor Computational Linguistics,July 1992, Newark, Delaware.\[N89\] VAN N()ORD, J.1989.
"BUG: A Directed Bottom-Up Generator lbrUnification Based Formalisms".Working Papepw in Natural LanguageProcessing No.
4.Utrecht, Holland: RUU, l)epartment ofl,inguistics.IS88\] SIHEBVJL S. M.1988.
"A IJnilbrm Architecture for Parsing and(}eneration".l'rocecdings of the 12tk International(/oq/brcrwe on Computational Linguistics.pp.
614-619., P, udapest,  hmgary, August 1988.\[SNMP89\] SI\[II~I~II:JL S.M., VAN NOORI), G.,MOORt';, R., PERt';IRA, F.1989.
"A Semantie-t lead-Driven GenerationAlgorithnl for Unification-Based Fornlalisms".l'roceedings q/'the 27th Annual Meeting of theAssociation Jbr ('ompulational Linguistics,pp.
7- 17, Vancouver, B.C., Canada, .hme 1989.921
