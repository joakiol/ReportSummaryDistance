Context-Sensitive Electronic DictionariesG?bor PR?SZ?KYMorphoLogicK?sm?rki u.
8.1118 Budapest, Hungaryproszeky@morphologic.huBal?zs KISMorphoLogicK?sm?rki u.
8.1118 Budapest, Hungarykis@morphologic.huAbstractThis paper introduces a context-sensitiveelectronic dictionary that provides transla-tions for any piece of text displayed on acomputer screen, without requiring user in-teraction.
This is achieved through a processof three phases: text acquisition from thescreen, morpho-syntactic analysis of thecontext of the selected word, and the dic-tionary lookup.
As with other similar toolsavailable, this program usually works withdictionaries adapted from one or more prin-ted dictionaries.
To implement context sen-sitive features, however, traditional diction-ary entries need to be restructured.
By split-ting up entries into smaller pieces and in-dexing them in a special way, the program isable to display a restricted set of informationthat is relevant to the context.
Based on theinformation in the dictionaries, the programis able to recognize?even discontinu-ous?multiword expressions on the screen.The program has three major features whichwe believe make it unique for the time being,and which the development focused on: lin-guistic flexibility (stemming, morphologicalanalysis and shallow parsing), open archi-tecture (three major architectural blocks, allreplaceable along public documented APIs),and flexible user interface (replaceable dic-tionaries, direct user feedback).In this paper, we assess the functional re-quirements of a context-sensitive dictionaryas a start; then we explain the program?sthree phases of operation, focusing on theimplementation of the lexicons and the con-text-sensitive features.
We conclude the pa-per by comparing our tool to other similarpublicly available products, and summarizeplans for future development.1 IntroductionWith several instant comprehension tools pub-licly available, we need not justify the usefulnessof the type of device we are developing.
Themain idea behind the program is to help computerusers understand the large number of foreignlanguage texts they encounter.
In most situationsof computer usage, users do not need translations,nor do they have to provide translations.
A dic-tionary in such cases must not be another appli-cation but a background process providing helpwhen necessary.This help must be context-sensitive in twoaspects: first, it should appear in the contextwhere the need for translation occurred, the usermust not be forced to switch to another context ofa separate application; second, the output?thetranslation?should contain only informationrelevant to the textual context for which thetranslation is required.
An entire dictionary entryshould almost never be displayed since it con-tains multiword examples irrelevant to the con-text of translation.
Adapting a bi-lingual diction-ary to foreign language comprehension takes therecompilation of any dictionary to some extentbefore it is incorporated in the system (Feldwegand Breidt 1996).We define the context-sensitive electronicdictionary we devise here as a context-sensitiveinstant comprehension tool.
It is more than adictionary lookup engine as it tailors dictionaryentries to the context of the translation point.
It isless than a translation engine, however, as itperforms no syntactic processing of the sourcetext, only series of dictionary lookups.It is not only the textual context that our tool issensitive to?like all major instant dictionaries:in a graphical computing environment, it readstext from anywhere on the computer screen,performs its linguistic analysis in the background,and then uses one or more dictionaries to find thetranslations.
The output is displayed in a bubble,in front of the existing screen contents, leaving itotherwise intact.
The program is activated with-out a mouse click, simply by leaving the mousepointer over the translation point for one second.There are several aspects of user interface designaffecting the decision to use this mechanism.
Theobvious advantage of using no mouse clicks isthat this never interferes with the extisting userinterfaces of any other programs.2 Requirements of a comprehensionassistantAn instant comprehension assistant is completelyleft alone in the sense that it cannot ask for userinteraction: it cannot require the user to choosefrom a list of ambiguous linguistic analyses, and,at the same time, it should keep the proportion ofsemantic ambiguities as low as possible.
So suchan application can only rely on its own linguisticknowledge.When the user leaves the mouse pointer over aword, it means that he needs information aboutthat word and its context.
The boundaries of thecontext are not precisely specified: it could be theentire sentence (or even a larger passage) whichincludes the selected word, or?more often?asmaller context such as a multi-word expressionaround it.
It is therefore the task of the program todetermine the largest possible context, analyze it,and provide as much information of it as possi-ble?based on the dictionaries behind the system.The minimum requirement is that the programshould recognize all obvious multi-word expres-sions and idioms, and provide appropriate trans-lations.
All possible forms of the multi-wordexpressions should be identified?even ifword-forms are inflected or the word order isdifferent from the basic form.
This is the matterof the quality of the linguistic parsing compo-nents and the dictionaries.
If no multi-word ex-pressions are recognized in the context, thecomprehension assistant should display a simpledictionary entry for the selected word only, list-ing all possible translations found in the activedictionaries.There is another implication of the fact thatthe comprehension assistant is not allowed to askfor user interaction.
The program has to acquirepieces of text from the screen regardless of theapplication that displayed them without relyingon user input, clipboard or file contents, or spe-cial application properties.
As there is no directaccess to the text, the program sees pieces of textas sequences of characters without formatting orother document-specific information, includingthe language of the source text.
This requiresimplementing a language identification algo-rithm, too.
So far, it is clear that a well-behavedcomprehension assistant is a rather special com-bination of different techniques, involving lan-guage technology in almost every bit of op-eration.3 Phases of context-sensitive instantcomprehensionPhase 1: Text acquisition.
When the user leavesthe mouse pointer unmoved for one second, thetext acquisition phase is activated.
This is a taskall instant dictionaries must face.
Current im-plementations rely on operating system (orgraphical user interface) resources to acquire textdisplayed on the screen.
Our implementationperforms a combination of an OCR-like proce-dure on the screen contents and applica-tion-specific acquisition procedures.
The formerworks with all applications, but is less accuratewith nonstandard character sizes, while the lattercommunicates with known programs?this isvery accurate, but limited to a closed set of pro-grams.
Depending on the version, text is acquiredeither one line or one paragraph at a time (whenapplicable).Phase 2: Linguistic analysis and dictionarylookups.
Linguistic analysis is used to identifythe word that was pointed at, and perform amorpho-syntactic analysis of its context to de-termine what to look up in the dictionaries.
Lin-guistic analysis consists of several steps essentialfor proper dictionary lookup, because there is noinitial information about the text other than thetext itself?with a single word highlighted indi-cating the position of the mouse pointer and thusthe initial point of analysis.
One must take intoaccount that the initial data are often results of anOCR-like process whose errors require correc-tion during subsequent linguistic analy-sis?similarly to the procedure in common OCRprograms.1The linguistic analyzer module performsmorpho-syntactic analysis for the selected wordin context?by means of the HUMOR engine(Pr?sz?ky and Kis 1999).
At this point, morpho-logical analysis has three main purposes: (a) lin-guistic stemming for accurate dictionary lookups,(b) spelling correction and (c) preparation ofshallow parsing of the context to identify candi-dates for multi-word expressions.If linguistic analysis fails to recognize anymulti-word expressions, words from the contextare still passed on to the dictionary lookup phaseas the dictionaries may contain idiomatic phrasesthat cannot be recognized on a linguistic basis.The dictionary lookup module receives lexicalstems in the context of the translation point, andmatches them against the installed dictionaries.The program uses the same robust dictionaryengine as the one we use in our terminologymanagement system.
It is capable of handlingmultiple dictionaries at the same time (Pr?sz?ky1998).Dictionaries are compiled to facilitate the fil-tering of multiword lexemes.
This means twothings: first, in addition to headwords, all lex-emes (subheadwords, examples) within entriesare indexed.
Second, entries are split into smallerparts to retrieve only relevant information.The engine is capable of finding all multi-wordlexemes which include one or more words with asingle lookup.
In some cases, this could be arather lengthy list which must be filtered usingthe other words in the context.
More precisely,(translations for) multi-word expressions will bedisplayed if and only if they include some sig-nificant words of the context (and do not containother significant words).
By ?significant word?,we mean that there are also ?nonsignificant?words (or stop-words) that are skipped whenforming a query expression for the dictionaryengine.1 According to our experience, however, recognition errorsare very rare because there is a closed set of shapes (glyphsin the currently installed system fonts) that may occur in anytext displayed by applications (except for pieces of textwithin bitmap images).
Recognition errors are usually re-sults of applications using nonstandard techniques (e.g.dynamically altering character spacing) to display text.The ambiguity of the output is reduced ?only?by this filtering process.
If an entry is consideredas relevant by the filtering procedure, it is dis-played.
In current implementations, differentmeanings of a single word or a multiword lexemeare not filtered out based on the context.Phase 3: Rendering and graphic output.
Theoutput of the program is displayed in a bub-ble-shaped pop-up window on the screen thatdisappears if the user moves the mouse cursoragain.
The bubble contains formatted text: cur-rent implementations use either a proprietaryXML-to-RTF conversion procedure, or XSLTformatting, depending on the version.4 Some implementation detailsDictionaries.
Dictionaries in our system are rep-resented as lexical databases where the structureof each dictionary is strictly preserved.
This isachieved through using XML as the single dic-tionary format.
Dictionaries are either originallywritten in XML or transformed from a printed oranother electronic format by means of automaticand semi-automatic tools.All dictionaries are bi-lingual.
Currentlyavailable dictionaries use language pairs such asEnglish-Hungarian, German-Hungarian.
How-ever, there are experimental dictionaries for otherlanguages such as Spanish, Polish, and evenJapanese.The largest dictionary currently available is anadaptation of Hungary?s newest academic Eng-lish-Hungarian dictionary, which contains over400,000 entries in the electronic version.
(Notethat for the reasons mentioned earlier, originalentries are split into multiple parts for filteringmultiword lexemes.
)We have mentioned earlier that a languageidentification module might be required for effi-cient operation of an instant dictionary.
Onecould notice, however, that we have not imple-mented such a module.
Although we have de-veloped a language identifier called LangWitch,we use a much simpler approach in the instantcomprehension tool: all dictionaries are lookedup in both their languages.
If a word is there in adictionary in any language, there is a hit.
There-fore, if there is a word on the screen that is in-cluded in any of the installed dictionaries in anylanguage handled by them, it will be recognizedand translated.Filtering.
By using a heuristic procedure, theprogram is able to recognize continuous and dis-continuous multiword lexemes.
The size of theanalysis window if configurable, but basically itis determined by the longest multiword examplein the dictionary.Text acquisition accuracy.
Most versions of ourinstant comprehension assistant use theOCR-based text acquisition technique mentionedearlier.
This procedure is capable of recognizingtext written in fonts installed on the computer.
Ifa piece of text is written in an installed font and ina standard size between 8 and 16 points, therecognition accuracy is near 100 percent.
Withnonstandard text sizes (zoomed display, too smallor too large character spacing), however, theaccuracy radically declines.
Some applica-tions?like Microsoft Word or Adobe AcrobatReader?display text in a nonstandard way.
Forthese applications, we use alternative acquisitionmethods that communicate with the particularapplication using an application-specific protocol,which provides accurate text recognition.Processing user feedback.
Our team does notregularly develop dictionary contents.
Some dic-tionaries, however, have been developed by us,and these dictionaries are continuously reviewedand updated.
The update process is rather uniquebecause it is built largely on user feedback.
Fromthe aspect of dictionary development (and evenlinguistic research), the comprehension assistantis an ideal source of linguistic information be-cause it reaches a potentially large number ofusers (since it is not a special application but autility that has its place in every computing en-vironment).
Based on this insight, we have im-plemented an instant feedback feature, whichcomprises of two processes:(1) Logging: the program continuously logswords and multiword expressions it wasunable to analyze or failed to find in thedictionaries.
(2) Contacting the developers: the programautomatically sends e-mails containing thecurrent logs to the developer lab.22 This requires permission from the user which the programasks for during installation.Logs are gathered and analysed by further auto-matic tools at the development site.
Having beenfiltered to exclude obvious noise entries, the listis then sent to lexicographers for further analysis.This process effectively reveals errors and defi-ciencies in the dictionaries and the morphologicallexicons, and, at the same time, it helps definingdirections of further improvements.5 Comparison to other systemsThere are two categories where our context-sen-sitive instant comprehension tool?the brandname is MoBiMouse?might be compared toother systems: functionality and linguistic accu-racy.
There are a few pop-up dictionaries on themarket: the most well-known are Babylon,WordPoint, CleverLearn, iFinger, Langen-scheidt's Pop-up Dictionary and Techocraft?sRoboWord, but none of them have as manylanguage technology features as MoBiMouse.There are some ?glossing?
programs in researchlaboratories (RXCE, see Feldweg and Breidt1996; or Sharp, see Poznanski et al 1998) thataccess dictionaries with a context-sensitivelook-up procedure.
However, they present theinformation to the user through their owngraphical interface, and none of them have thebasic featuere of MoBiMouse, namely, being acontext-sensitive instant comprehension tool forany running application.
The above systems donot have access to more than one dictionary at thesame time, unlike MoBiMouse.
On the otherhand, the treatment of multiword units in theIDAREX formalism (Segond and Breidt 1996) ismore sophisticated than in MoBiMouse.
Anotherproject with instant understanding is GLOSSER,whose prototype (Nerbonne et al 1997) performsmorphological analysis of the sentence contain-ing the selected word in a similar manner.
InGLOSSER?unlike in MoBiMouse?there is astochastic disambiguation step but everything isshown in a.separate window.The text acquisition techniques used in Mo-BiMouse are independent from both the languageand the writing system.
Hence it is rather differ-ent from most known applications that work withEnglish characters only.
Most other pop-up dic-tionary applications start by pressing a button orclicking the mouse.
MoBiMouse is activatedwithout mouse clicks (like RoboWord), thereforeit can be used to acquire any text from the screenwithout affecting other running applications.MoBiMouse is even able to access user interfaceelements such as menus and buttons because itworks from the graphical content of the entirescreen, while others such as RoboWord accessonly the window contents displayed by applica-tions.The speed of the text acquisition module is1000 character/s, stemming takes 0,002 s/word-form, an average dictionary lookup 0,02 s. Mo-BiMouse, unlike Babylon, can be used in bothlanguage directions of the dictionary due to itswriting independence and liguistic componentsfor many languages.6 Future development plansMost our development plans focus on improvingthe program?s user interface.
Before MoBiMouse,we have developed an electronic dic-tionary/terminology management program calledMoBiDic.
The new versions of both programs areintegrated into a single package, where the fullMoBiDic user interface is callable through theMoBiMouse technology..As for the linguistic capabilities, we plan toexploit MoBiMouse?s open architecture and in-tegrate the ?traditional?
dictionary lookup modulewith a parser/translator engine capable of ana-lysing and often translating an entire sentence orat least a part of it.
The parser/translator engine(called MetaMorpho) is still under development.ConclusionMoBiMouse is a context-sensitive instant com-prehension tool that offers translations for wordsand expressions displayed on computer screens.The program is activated without a mouse clickwhen the user leaves the mouse pointer over theword in question.
The translation is displayed in atooltip-like bubble.
If the mouse is moved again,the translation disappears promptly, so the user'swork will not be disrupted by another programrequiring a whole window.Although there are many similar programspublicly available, we believe MoBiMouse isquite unique thanks to many of its features: (1)the combined text acquisition procedure (usingan application-independent and an applica-tion-specific module), which makes it work inany application, (2) the rich linguistic processingwith the linguistic stemming and the con-text-sensitive filtering module, which makes theprogram the most linguisticly sophisticated of itskind, (3) and the open architecture which makesany major architectural element replaceable,providing for an easy development of any kind ofinstant information acquisition application.AcknowledgementsThe authors would like to thank Andr?s F?ldes,development project leader for MoBiMouse, andL?szl?
Tihanyi, chief content developer at Mor-phoLogic.ReferencesFeldweg, H. and E. Breidt (1996)COMPASS?An Intelligent Dictionary Sys-tem for Reading Text in a Foreign Language.Papers in Computational Lexicography(COMPLEX 96), Linguistics Institute, HAS,Budapest, pp.
53?62.Nerbonne, L. Karttunen, E. Paskaleva, G.Pr?sz?ky and T. Roosmaa (1997) ReadingMore into Foreign Languages.
Proceedings ofthe 5th Conference on Applied Natural Lan-guage Processing (ANLP?97), Washington, pp.135?138.Poznanski, V., P. Whitelock, J. Udens and S.Corley (1998) Practical Glossing by PrioritisedTiling.
Proceedings of the COLING-98,Montreal, pp.
1060?1066.Pr?sz?ky, G. (1998) An Intelligent Multi-Dic-tionary Environment.
Proceedings of theCOLING-98, Montreal, pp.
1067?1071.Pr?sz?ky, G. and B. Kis (1999) A Unifica-tion-based Approach to Morpho-SyntacticParsing of Agglutinative and Other (Hughly)Inflectional Languages.
Proceedings of the37thAnnual Meeting of ACL, College Park, pp.261?268.Segond, F. and E. Breidt (1996) IDAREX: de-scription formelle des expression ?
mots mul-tiples en fran?ais et en allemand.
In: A. Clas,Ph.
Thoiron and H. B?joint (eds.)
Lexico-matique et dictionnairiques, Montreal, Au-pelf-Uref
