Compositional Semantics for Linguistic FormalismsShu ly  Wintner*Inst i tute for Research in Cognit ive ScienceUniversity of Pennsylvania3401 Walnut  St., Suite 400APhi ladelphia,  PA 19018shuly@:t?nc, c i s .
upenn,  eduAbst rac tIn what sense is a grammar the union of itsrules?
This paper adapts the notion of com-position, well developed in the context of pro-gramming languages, to the domain of linguis-tic formalisms.
We study alternative definitionsfor the semantics of such formalisms, suggest-ing a denotational semantics that we show tobe compositional and fully-abstract.
This fa-cilitates a clear, mathematically sound way fordefining grammar modularity.1 In t roduct ionDeveloping large scale grammars for naturallanguages is a complicated task, and the prob-lems grammar engineers face when designingbroad-coverage grammars are reminiscent ofthose tackled by software engineering (Erbachand Uszkoreit, 1990).
Viewing contemporarylinguistic formalisms as very high level declara-tive programming languages, a grammar  for anatural language can be viewed as a program.It is therefore possible to adapt methods andtechniques of software engineering to the do-main of natural language formalisms.
We be-lieve that any advances in grammar engineeringmust be preceded by a more theoretical work,concentrating on the semantics of grammars.This view reflects the situation in logic program-ming, where developments in alternative defini-tions for predicate logic semantics led to im-plementations of various program compositionoperators (Bugliesi et al, 1994).This paper suggests a denotational seman-tics tbr unification-based linguistic formalismsand shows that it is compositional and fully-*I am grateful to Nissim Francez for comment ing  on anem'lier version of this paper.
This work was supportedby an IRCS Fellowship and NSF grant SBR 8920230.abstract.
This facilitates a clear, mathemati-cally sound way for defining grammar modu-larity.
While most of the results we report onare probably not surprising, we believe that itis important o derive them directly for linguis-tic formalisms for two reasons.
First, practi-tioners of linguistic formMisms usually do notview them as instances of a general logic pro-gramming framework, but rather as first-classprogramming environments which deserve in-dependent study.
Second, there are some cru-cial differences between contemporary linguis-tic formalisms and, say, Prolog: the basic ele-ments - -  typed feature-structures - -  are moregeneral than first-order terms, the notion of uni-fication is different, and computations amountto parsing, rather than SLD-resolution.
Thefact that we can derive similar results in thisnew domain is encouraging, and should not beconsidered trivial.Analogously to logic programming languages,the denotation of grammars can be defined us-ing various techniques.
We review alternativeapproaches, operational and denotational, tothe semantics of linguistic formalisms in sec-tion 2 and show that they are "too crude"to support grammar composition.
Section 3presents an alternative semantics, shown to becompositional (with respect o grammar union,a simple syntactic combination operation ongrammars).
However, this definition is "toofine": in section 4 we present an adequate,compositional and fully-abstract semantics forlinguistic formalisms.
For lack of space, someproofs are omitted; an extended version is avail-able as a technical report (Wintner, 1999).2 Grammar  semant icsViewing grammars as formal entities that sharemany features with computer programs, it is9{}natural  to consider the notion of semantics ofratification-based formalisms.
We review in thisse(:tion the operational definition of Shieber eta,1.
(1995) and the denotat ional  definition of,e.g., Pereira and Shieber (1984) or Carpenter(1992, pp.
204-206).
We show that these def-initions are equivalent and that  none of themsupports compositionality.2.1 Bas ic  not ionsW(, assume famil iarity with theories of featurestructure based unification grammars, as for-mulated by, e.g., Carpenter (1992) or Shieber(1992).
Grammars  are defined over typed fea-twre .structures (TFSs) which can be viewed asgeneralizations of first-order terms (Carpenter,1991).
TFSs are partial ly ordered by subsump-tion, with ?
the least (or most general) TFS.
Amulti-rooted structure (MRS, see Sikkel (1997)()r Wintner and Francez (1999)) is a sequenceof TFSs, with possible reentrancies among dif-fi;rent elements in the sequence.
Meta-variablesA,/3 range over TFSs and a, p - over MRSs.MRSs are part ial ly ordered by subsumption,  de-n()ted '__', with a least upper bound operation()f 'an'llfication, denoted 'U', and a greatest lowestt)(mnd denoted 'W.
We assume the existence ofa.
fixed, finite set WORDS of words.
A lexiconassociates with every word a set of TFSs, its cat-egory.
Meta-variable a ranges over WORDS and.w -- over strings of words (elements of WORDS*).Grammars are defined over a signature of typesand features, assumed to be fixed below.Def in i t ion  1.
A rule is an MRS of lengthgreater than or equal to 1 with a designated(fir'st) element, the head o.f the rule.
The rest ofthe elements .form the rule's body (which maybe em, pty, in which case the rule is depicteda.s' a TFS).
A lex icon is a total .function .fromWORDS to .finite, possibly empty sets o.f TFSs.A grammar  G = (T?,/:, A s} is a .finite set of,rules TO, a lexicon ?.
and a s tar t  symbol  A sthat is a TFS.Figure 1 depicts an example grammar,  1 sup-pressing the underlying type hierarchy.
2The definition of unification is lifted to MRSs:let a ,p  be two MRSs of the same length; the'Grammars are displayed using a simple descriptionlanguage, where ':' denotes feature values.2Assmne that in all the example grammars, the typess, n, v and vp are maximal and (pairwise) inconsistent.A '~ = (~:at : .~){ (cat : s )  -+ (co, t :n )  (ca t :vp)  \]7~ = (cat:  vp) ---> (c.at: v) (cat :  n)vp) + .,,)Z2(John) = Z~(Mary) = {(cat:  'n)}?
(sleeps) = ?
(sleep) = ?
(lovcs) = {(co, t : v)}Figure 1: An example grammar,  Gunification of a and p, denoted c, U p, is themost general MRS that is subsmned by both erand p, if it exists.
Otherwise, the unification.fails.Def in i t ion  2.
An MRS (AI,.. .
,A~:) reducesto a TFS A with respect to a gram, mar G (de-noted (A t , .
.
.
,Ak )  ~(-~ A) 'li~' th, ere exists arule p E T~ such, that (B,131,.. .
,B~:) = p ll(_L, A1,... ,  Ak) and B V- A. Wll, en G is under-stood from.
the context it is om, itted.
Reductioncan be viewed as the bottom-up counterpart ofderivation.I f  f ,  g, are flmctions over the same (set) do-main, .f + g is )~I..f(I) U .q(I).
Let ITEMS ={\[w, i ,A, j \ ]  \[ w E WORDS*, A is a TFS andi , j  E {0,1 ,2 ,3 , .
.
.}}
.
Let Z = 2 ITEMS.
Meta-variables x, y range over items and I - over setsof items.
When 27 is ordered by set inclusionit forms a complete lattice with set union as aleast upper bound (lub) operation.
A f lmctionT : 27 -+ 27 is monotone if whenever 11 C_/2, alsoT(I1) C_ T(I2).
It is continuous iftbr every chainI1 C_ /2 C_ .
.
.
,  T(Uj< ~/.i) = Uj<~T( I j )  .
I f  afunction T is monotone it has a least fixpoint(Tarski-Knaster theorem); if T is also continu-ous, the fixpoint can be obtained by iterativeapplication of T to the empty set (Kleene the-orem): lfp(T) = TSw,  where T I "  0 = 0 andT t n = T (T  t (n -  1)) when 'n is a succes-sor ordinal and (_Jk<n(T i" n) when n is a limitordinal.When the semantics of programming lan-guages are concerned, a notion of observablesis called for: Ob is a f lmction associating a setof objects, the observables, with every program.The choice of semantics induces a natural  equiv-alence operator on grammars: given a semantics'H ' ,  G1 ~ G2 iff ~GI~ = ~G2~.
An essential re-quirement of any semantic equivalence is that  it97'be correct (observables-preserving): if G1 -G2 ,then Ob(G1) = Ob(G2).Let 'U' be a composition operation on gram-mars and ' ? '
a combination operator on deno-rations.
A (correct) semantics 'H '  is compo-.s'itional (Gaifinan and Shapiro, 1989) if when-ever ~1~ : ~G2~ and ~G3\] -- ~G4\], also~G, U G3~ = \[G2 U G4\].
A semantics is com-mutative (Brogi et al, 1992) if ~G1 UG2\] =~G,~ ?
\[G2~.
This is a stronger notion than(:ompositionality: if a semantics is commutativewith respect o some operator then it is compo-sitional.2.2 An operat ional  semanticsAs Van Emden and Kowalski (1976) note, "todefine an operational semantics for a program-ruing language is to define an implementationalindependent interpreter for it.
For predicatelogic the proof procedure behaves as such an in-terpreter."
Shieber et al (1995) view parsing asa.
deductive process that proves claims about thegrammatical status of strings from assumptionsderived from the grammar.
We follow their in-sight and notation and list a deductive systemfor parsing unification-based grammars.Definit ion 3.
The deductive parsing systemassociated with a grammar G = (7~,F.,AS} isdefined over ITEMS and is characterized by:Axioms: \[a, i, A, i + 1\] i.f B E Z.
(a) and B K A;\[e, i, A, i\] if B is an e-rule in T~ and B K_ AGoals: \[w, 0, A, \[w\]\] where A ~ A sInference rules:\[wx , i l , A1, i l l , .
.
.
,  \[Wk, ik, Ak , Jk \]\[Wl " " " Wk, i, A, j\]if .
'h = i1,+1 .for 1 <_ l < k and i = il andJ = Jk and (A1, .
.
.
,Ak)  =>a AWhen an item \ [w , i ,A , j \ ]  can be deduced,applying k times the inference rules associ-z~ted with a grammar G, we write F-~\[w, i  A, j\].When the number of inference steps is irrele-vant it is omitted.
Notice that the domain ofitems is infinite, and in particular that the num-ber of axioms is infinite.
Also, notice that thegoal is to deduce a TFS which is subsumed bythe start symbol, and when TFSs can be cyclic,there can be infinitely many such TFSs (and,hence, goals) - see Wintner and Francez (1999).Definit ion 4.
The operational denotationo.f a grammar G is EG~o,, = {x IF-v; :,:}.
G1 -opG2 iy \]C1 o, =  G2Bo ,We use the operational semantics to de-fine the language generated by a grammar G:L(G) = {(w,A}  \[ \[w,O,A,l',,\[\] E \[G\]o,}.
Noticethat a language is not merely a set of strings;rather, each string is associated with a TFSthrough the deduction procedure.
Note alsothat the start symbol A ' does not play a rolein this definition; this is equivalent to assumingthat the start symbol is always the most generalTFS, _k.The most natural observable for a grammarwould be its language, either as a set of stringsor augmented by TFSs.
Thus we take Ob(G)to be L(G) and by definition, the operationalsemantics '~.\] op' preserves observables.2.3 Denotat iona l  semanticsIn this section we consider denotational seman-tics through a fixpoint of a transformational op-erator associated with grammars.
-This is es-sentially similar to the definition of Pereira andShieber (1984) and Carpenter (1992, pp.
204-206).
We then show that the denotational se-mantics is equivalent o the operational one.Associate with a grammar G an operator7~ that, analogously to the immediate conse-quence operator of logic programming, can bethought of as a "parsing step" operator in thecontext of grammatical formalisms.
For thefollowing discussion fix a particular grammarG = (n ,E ,A~) .Definit ion 5.
Let Tc  : Z -+ Z be a trans-formation on sets o.f items, where .for everyI C_ ITEMS, \ [w, i ,A , j \ ]  E T(~(I) iff either?
there exist Y l , .
.
.
, yk  E I such that Yl =\[w1,,iz,Al,jt\] .for" 1 < 1 <_ k and il+l = jzfor 1 < l < k and il = 1 and jk = J and(A1,.
.
.
,Ak)  ~ A and w = "w~ .. ?
wk; or?
i = j  andB is an e-rule in G andB K Aand w = e; or?
i+ l  = j  and \[w\[ = 1 andB G 12(w) andBKA.For every grammar G, To., is monotone andcontinuous, and hence its least fixpoint existsand l.fp(TG) = TG $ w. Following the paradigm98of logic programming languages, define a fix-point semantics for unification-based grammarsby taking the least fixpoint of the parsing stepoperator as the denotation of a grammar.Def in i t ion  6.
The f ixpoint denotat ion of agrammar G is ~G\[.fp = l.fp(Ta).
G1 =--.fp G2 iff~ti,( T<; ~ ) = l fp(Ta~).The denotational definition is equivalent othe operational one:Theorem 1.
For x E ITEMS, X E lfp(TG) iff~-(?
x.The proof is that \ [w, i ,A , j \ ]  E Ta $ n iffF-7;,\[w, i, A, j\], by induction on n.Coro l la ry  2.
The relation '=fp' is correct:whenever G1 =.fp G2, also Ob(G1) = Ob(a2).2.4 Compos i t iona l i tyWhile the operational and the denotational se-mantics defined above are standard for com-plete grammars, they are too coarse to serveas a model when the composition of grammarsis concerned.
When the denotation of a gram-mar is taken to be ~G\]op, important character-istics of the internal structure of the grammarare lost.
To demonstrate the problem, we intro-duce a natural composition operator on gram-mars, namely union of the sets of rules (and thelexicons) in the composed grammars.Def in i t ion  7.
/ f  GI = <T?1, ~1, A~) and G2 =(7-~2,E'2,A~) are two grammars over the samesignature, then the un ion  of the two gram-mars, denoted G1 U G2, is a new grammar G =(T~, ?, AS> such that T~ = 7~ 1 (.J 7"~2, ft. = ff~l + ff~2and A s = A~ rq A~.Figure 2 exemplifies grammar union.
Observethat for every G, G', G O G' = G' O G.?
P ropos i t ion  3.
The equivalence relation '=op'is not compositional with respect to Ob, {U}.Proof.
Consider the grammars in figure 2.~a:~o,, = lado .
= {\["loves",/, (cat: v), i  + 1\]li > 0} but tbr I = {\["John loves John", i, (cat:s ) , i+3  I i >_ 0}, I C_ \[G1UG4\]op whereasI ~ \[G1UGa~op.
Thus Ga =-op G4 but(Gl (2 Go) ~op (G1 tO G4), hence '~--Op' is notcompositional with respect o Ob, {tO}.
\[\]G1 : A s = (cat :.s)(co, t :  s) -+ (c.,t: ,,,,) (co, t :  vp)C(John) = {((:.t : n)}a2:  A s = (_1_)(co, t :  vp) -+ (co, t :  v)(cat : vp) -+ (cat :v )  (cat :n )/:(sleeps) =/:( loves) = {(cat:  v)}Go: A s = (&)/:(loves) = {(cat: v)}G4: A s = (_1_)(cat:vp) -+ (co, t :v )  ( ca t :n )C(loves) = {(cat: v)}G1 U G2 : A s = (cat : s)(co, t :  ~) -+ (~:o,t: ,,,,) (~.at : vp)(cat : vp) -~ (co, t : v)(cat: vp) --+ (cat: v) (cat: n)/:(John) = {(cat:  n)}?
(sleeps) = ?
(loves) = {(cat:  v)}G1UGa : A s = (cat : s)(cat: s) --+ (cat: n) (cat: vp)C(John) = {(cat: ',,,)}?
(loves) = {(cat:  v)}GI U G4 : A s = (cat : s)(co, t :  ~) + (co.t: ,,,.)
(cat: vp)(co, t : vp) -~ (cat: , , )  (co, t : ~)/:(John) = {(cat: n)}/:(loves) = {(cat:  v)}Figure 2: Grammar unionThe implication of the above proposition is thatwhile grammar union might be a natural, welldefined syntactic operation on grammars, thestandard semantics of grannnars is too coarse tosupport it.
Intuitively, this is because when agrammar G1 includes a particular ule p that isinapplicable for reduction, this rule contributesnothing to the denotation of the grammar.
Butwhen G1 is combined with some other grammar,G2, p might be used for reduction in G1 U G2,where it can interact with the rules of G2.
Wesuggest an alternative, fixpoint based semanticsfor unification based grammars that naturallysupports compositionality.3 A compos i t iona l  semant icsTo overcome the problems delineated above, wefollow Mancarella and Pedreschi (1988) in con-sidering the grammar transformation operatoritself (rather than its fixpoint) as the denota-99tion of a grammar.Def in i t ion  8.
The algebraic denotat ion  o.fG is ffGffa I = Ta.
G1 -a t  G2 iff Tal = TG2.Not only is the algebraic semantics composi-tionM, it is also commutative with respect togrammar union.
To show that, a compositionoperation on denotations has to be defined, andwe tbllow Mancarella and Pedreschi (1988) inits definition:Tc;~ ?
To;., = ),LTc, (~) u Ta2 (5Theorem 4.
The semantics '==-at ' is commuta-tive with respect to grammar union and '?
': fore, vcry two grammars G1, G2, \ [a l f fat"  ~G2ffal =:G  I \[-J G 2 ff  (tl .Proof.
It has to be shown that, for every set ofitems L Tca~a., (I) = Ta, ( I )u  Ta.,(I).?
if x E TG1 (I) U TG~, (I) then either x GTch (I) or x E Ta.,(I).
From the definitionof grammar union, x E TG1uG2(I) in anycase.?
if z E Ta~ua.,(I) then x can be added byeither of the three clauses in the definitionof Ta.- if x is added by the first clause thenthere is a rule p G 7~1 U T~2 that li-censes the derivation through whichz is added.
Then either p E 7~1 orp G T~2, but in any case p would havelicensed the same derivation, so either~ Ta~ (I) or ?
~ Ta~ (I).- if x is added by the second clause thenthere is an e-rule in G1 U G2 due towhich x is added, and by the samerationale either x C TG~(I) or x ETG~(I).- if x is added by the third clause thenthere exists a lexical category in ?1 U?2 due to which x is added, hence thiscategory exists in either ?1 or ?2, andtherefore x C TG~ (I) U TG2 (I).\[\]Since '==-at' is commutative, it is also compo-sitional with respect to grammar union.
In-tuitively, since TG captures only one step ofthe computation, it cannot capture interactionsamong different rules in the (unioned) grammar,and hence taking To: to be the denotation of Gyields a compositional semantics.The Ta operator eflects the structure of thegrammar better than its fixpoint.
In otherwords, the equivalence r lation induced by TG isfiner than the relation induced by lfp(Tc).
Thequestion is, how fine is the ' -a l '  relation?
Tomake sure that a semantics is not too fine, oneusually checks the reverse direction.Def in i t ion  9.
A fu l l y -abst rac t  equivalencerelation ' - '  is such that G1 =- G'2 'i,.\[.-f for all G,Ob(G1 U G) = Ob(G.e U G).Propos i t ion  5.
Th, e semantic equivalence re-lation '--at' is not fully abshuct.Proof.
Let G1 be the grammarA~ = ?,?1 = 0,~ = {(cat:  ~) -~ (~:.,t : ,,,,p) (c.,t : vp),(cat:  up) -~ (,:..t : ',,.p)}and G2 be the gramm~:rA~ = 2 ,Z:2 = O,n~ = {(~at : .~) -~ (~,.,t : .,p) ( .a t :  ~p)}?
G1 ~at G2: because tbr I = {\["John lovesMary",6,(cat : np),9\]}, T(;I(I ) = I butTo., (I) = O?
for all G, Ob(G U G~) = Ob(G \[3 G2).
Theonly difference between GUG1 and GUG2 isthe presence of the rule (cat : up) -+ (cat :up) in the former.
This rule can contributenothing to a deduction procedure, since anyitem it licenses must already be deducible.Therefore, any item deducible with G U G1is also deducible with G U G2 and henceOb(G U G1) ---- Ob(G U G,2).\[\]A better attempt would have been to con-sider, instead of TG, the fbllowing operator asthe denotation of G: \[G\]i d = AI.Ta(I)  U I. Inother words, the semantics is Ta + Id, whereId is the identity operator.
Unfortunately, thisdoes not solve the problem, as  '~'\]id' is still notfully-abstract.1004 A ful ly abstract semant icsWe have shown so far that 'H fp '  is not com-positional, and that 'H id '  is compositional butnot fully abstract.
The "right" semantics, there-fore, lies somewhere in between: since the choiceof semantics induces a natural equivalence ongrammars, we seek an equivalence that is cruderthzm 'H id '  but finer than 'H.fp'.
In this sectionwe adapt results from Lassez and Maher (1984)a.nd Maher (1988) to the domain of unification-b~Lsed linguistic formalisms.Consider the following semantics for logicprograms: rather than taking the operator asso-dated with the entire program, look only at therules (excluding the facts), and take the mean-ing of a program to be the function that is ob-tained by an infinite applications of the opera-tor associated with the rules.
In our framework,this would amount to associating the followingoperator with a grammar:Def in i t ion  10.
Let RG : Z -~ Z be a trans-format ion on sets o.f items, where .for every\[ C ITEMS, \ [w, i ,A , j \ ]  E RG( I )  iff there existY l , .
.
.
, Yk  E I such that yl = \ [wz, i t ,A l , jd  .for1 _ < l _ < k and il+t = jl .for 1 < l < k andi, = 1 and.jk = J and (A1 , .
.
.
,Ak )  ~ A and"~1) ~ 'tl) 1 ?
?
?
?U k .Th, e functional denotation of a grammar G is/\[G~.f,,, = (Re  + Id) ~ = End-0 (RG + Id) n. Noticethat R w is not RG "\[ w: the former  is a funct ion "df rom sets of items to set of items; the latter isa .set of items.Observe that Rc is defined similarly to Ta(definition 5), ignoring the items added (by Ta)due to e-rules and lexical items.
If we define theset of items I 'n i tc to be those items that area.dded by TG independently of the argument itoperates on, then for every grammar G and ev-ery set of items I, Ta ( I )  = Ra( I )  U In i ta .
Re-lating the functional semantics to the fixpointone, we tbllow Lassez and Maher (1984) in prov-ing that the fixpoint of the grammar transfor-mation operator can be computed by applyingthe fimctional semantics to the set InitG.Def in i t ion  11.
For G = (hg,?,A~),  In i tc  ={\[e,i,A,i\] \[ B is an e~-rule in G and B E_A} U{\[a, i ,A, i  + 1J I B E ?
(a)  .for B E A}Theorem 6.
For every grammar G,(R.c + fd.)
(z',,.itcd = tb(TG)Proof.
We show that tbr every 'n., (T~ + Id)n = (E~.-~ (Re + Id) ~:) (I'nit(;) by induction onTt.For n = 1, (Tc + Id) ~\[ 1 = (Tc~ + Id ) ( (Ta  +Id) ~ O) = (Tc, + Id)(O).
Clearly, the onlyitems added by TG are due to the second andthird clauses of definition 5, which are exactlyI n i ta .
Also, (E~=o(Ra + Id)~:)(Initc;) = (Ra  +Id) ?
( In i tc )  = I'nitc;.Assume that the proposition holds tbr n -  1,that is, (To + Id) "\[ (',, - 1) = t~E'"-2t~'a:=0 xta +Id)  k )Un i te ) .
Then(Ta + Id) $ n =definition of i"(TG + Id ) ( (Ta  + Id) ~\[ (v, - 1)) =by the induction hypothesis~n--2 (Ta + Id) ( (  k=0(RG + I d )k ) ( In i ta ) )  =since Ta( I )  = Ra( I )  U In i taEn-2 (Ra  + Id)( (  k=Q(Rc; + Id)~' ) ( In i ta) )  U In i ta  =(Ra + (Ra + Id) k) (1',,,its,)) =(y\ ]n-1/R , Id)h:)(Init(:) k=0 ~, ,G - I -Hence (RG + Id) ~ ( Init( ;  = (27(; + Id) ~ w =lfp( TG ) .
\[\]The choice of 'Hfl~' as the semantics calls fora different notion of' observables.
The denota-tion of a grammar is now a flmction which re-flects an infinite number of' applications of thegrammar's rules, but completely ignores the e-rules and the lexical entries.
If we took the ob-servables of a grammar G to be L(G)  we couldin general have ~G1\].f,.
= ~G2\]fl~.
but Ob(G1) 7 ~Ob(G2) (due to different lexicons), that is, thesemantics would not be correct.
However, whenthe lexical entries in a grammar (including the e-rules, which can be viewed as empty categories,or the lexical entries of traces) are taken as in-put, a natural notion of observables preservationis obtained.
To guarantee correctness, we definethe observables of a grammar G with respect toa given input.Def in i t ion  12.
Th, e observab les  of a gram-mar G = (~ , / : ,A  s} with respect to an in-put set of items I are Ot, (C) = {(',,, ,A) I\[w,0, d, I 1\] e101Coro l la ry  7.
The semantics '~.~.f ' is correct:'llf G1 =fn G2 then .for every I, Obl(G1) =Ol,  ( a,e ).The above definition corresponds to the pre-vious one in a natural way: when the input istaken to be Inita, the observables of a grammarare its language.Theorem 8.
For all G, L(G) = Obinita(G).P'moJ:L(G) =definition of L(G){ (',,,, A) I \[w, O, A, I 1\] e I\[C\]lo,,} =definition 4{(w, A) \[ F-c \[w, O, A, =by theorem 1{<w, A> I \[,w, 0, A, Iwl\] e l.fp(Ta)} =by theorem 6{(,w, A) I \[w, O, A, \[wl\] e \ [G\ ] fn ( In i tG)}  =by definition 12Obt,,,~tc; (G)\ [ \ ].To show that the semantics 'Hfn' is composi-tional we must define an operator for combiningdenotations.
Unfortunately, the simplest oper-ator, '+',  would not do.
However, a differentoperator does the job.
Define ~Gl~.f~ ?
\[G2~f~ to1)e (\[\[G1\]l.fn + \[G2~f~) ?'.
Then 'H.f~' is commuta-tive (and hence compositional) with respect to~?'
and 'U'.Theorem 9. fiG1 U G2~fn = ~Gl\]fn " ~G2~.fn.The proof is basically similar to the case oflogic programming (Lassez and Maher, 1984)and is detailed in Wintner (1999).Theorem 10.
The semantics '~'\[fn' is fullyabstract: ,for every two grammars G1 and G2,'llf .for" every grammar G and set of items I,Obr(G1 U G) = ObI(G2 U G), then G1 =fn G2.The proof is constructive: assuming thatG t ~f;~ G2, we show a grammar G (which de-t)ends on G1 and G2) such that Obt(G1 U G) ?Obr(G2 U G).
For the details, see Wintner(1999).5 Conc lus ionsThis paper discusses alternative definitions forthe semantics of unification-based linguistic for-malisms, culminating in one that is both com-positional and fully-abstract (with respect togrammar union, a simple syntactic ombinationoperations on grammars).
This is mostly anadaptation of well-known results from h)gic pro-gramming to the ti'amework of unification-basedlinguistic tbrmalisms, and it is encouraging tosee that the same choice of semantics whichis compositional and fiflly-abstra(:t for Prologturned out to have the same desirable proper-ties in our domain.The functional semantics '~.\].f,' defined hereassigns to a grammar a fimction which reflectsthe (possibly infinite) successive application ofgrammar ules, viewing the lexicon as input tothe parsing process.
We, believe that this is akey to modularity in grammar design.
A gram-mar module has to define a set of items thatit "exports", and a set of items that can be"imported", in a similar way to the declarationof interfaces in programming languages.
Weare currently working out the details of sucha definition.
An immediate application will fa-cilitate the implementation of grammar devel-opment systems that support modularity in aclear, mathematically sound way.The results reported here can be extendedin various directions.
First, we are only con-cerned in this work with one composition oper-ator, grammar union.
But alternative operatorsare possible, too.
In particular, it would be in-teresting to define an operator which combinesthe information encoded in two grammar ules,for example by unifying the rules.
Such an op-erator would facilitate a separate developmentof grammars along a different axis: one modulecan define the syntactic component of a gram-mar while another module would account for thesemantics.
The composition operator will unifyeach rule of one module with an associated rulein the other.
It remains to be seen whether thegrammar semantics we define here is composi-tional and fully abstract with respect o such anoperator.A different extension of these results shouldprovide for a distribution of the type hierarchyamong several grammar modules.
While we as-sume in this work that all grammars are defined102over a given signature, it is more realistic to as-sume separate, interacting signatures.
We hopeto be able to explore these directions in the fu-ture.ReferencesAntonio Brogi, Evelina Lamina, and PaolaMello.
1992.
Compositional model-theoreticsemantics for logic programs.
New Genera-tion Computing, 11:1-21.Michele Bugliesi, Evelina Lamina, and PaolaMello.
1994.
Modularity in logic pro-gramming.
Journal of Logic Programming,19,20:443 502.Bob Carpenter.
1991.
Typed feature struc-tures: A generalization of first-order terms.In Vijai Saraswat and Ueda Kazunori, edi-tors, Logic Programming - Proceedings of the1991 International Symposium,, pages 187-201, Cambridge, MA.
MIT Press.Bob Carpenter.
1992.
The Logic of Typed Fea-ture Structures.
Cambridge Tracts in Theo-retical Computer Science.
Cambridge Univer-sity Press.Gregor Erbach and Hans Uszkoreit.
1990.Grammar engineering: Problems andprospects.
CLAUS report 1, University ofthe Saarland and German research center forArtificial Intelligence, July.Haim Gaifman and Ehud Shapiro.
1989.
Fullyabstract compositional semantics for logicprogramming.
In 16th Annual ACM Sym-posium on Principles o.f Logic Programming,pages 134-142, Austin, Texas, January.J.-L. Lassez and M. J. Maher.
1984.
Closuresand fairness in the semantics of programminglogic.
Theoretical computer science, 29:167-184.M.
J. Maher.
1988.
Equivalences of logic pro-grams.
In .Jack Minker, editor, Foundationsof Deductive Databases and Logic Program-rain.q, chapter 16, pages 627-658.
MorganKaulinann Publishers, Los Altos, CA.Paolo Mancarella and Dino Pedreschi.
1988.An algebra of logic programs.
In Robert A.Kowalski and Kenneth A. Bowen, edi-tors, Logic Programming: Proceedings of theF@h international conference and sympo-,sium, pages 1006-1023, Cambridge, Mass.MIT Press.Fernando C. N. Pereira and Stuart M. Shieber.1984.
The semantics of grammar formalismsseen as computer languages.
In Proceedings ofthe lOth international con.ference on compu-tational inguistics and the 22nd annual meet-ing o.f the association .for computational lin-guistics, pages 123-129, Stantbrd, CA, July.Stuart Shieber, Yves Schabes, and FernandoPereira.
1995.
Principles and implementationof deductive parsing.
Jo'wrr~,al o\]" Logic Pro-gramming, 24(1-2):3-36, July/August.Stuart M. Shieber.
1992.
Constraint-BasedGrammar Form, alism, s. MIT Press, Cam-bridge, Mass.Klaas Sikkel.
1997.
Par'sing Schemata.
Texts inTheoretical Computer Science - An EATCSSeries.
Springer Verlag, Berlin.M.
H. Van Emden and Robert A. Kowalski.1976.
The semantics of predicate logic as aprogramming language..Iournal of the Asso-ciation .for Ccrmputing Machinery, 23(4):733-742, October.Shuly Wintner and Nissim Francez.
1999.
Off-line parsability and the well-tbundedness ofsubsumption.
Journal of Logic, Languageand In.formation, 8(1):1-16, January.Shuly Wintner.
1999.
Compositional semanticsfor linguistic formalisms.
IRCS Report 99-05,Institute for Research in Cognitive Science,University of Pennsylvania, 3401 Wahmt St.,Suite 400A, Philadelphia, PA 19018.103
