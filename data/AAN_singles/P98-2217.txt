A tabu lar  in terpretat ion  of  a class of  2 -S tack  AutomataEr ic  V i l l emonte  de  la  C le rger ieINR IA  - Rocquencour t -  B.P.
10578153 Le ChesnayCedex ,  FRANCEEric.De_La_Clergerie@inria.frMigue l  A lonso  PardoUn ivers idad  de La  Coru f iaCampus  de Elv i f ia  s /n15071 La  Coruf ia ,  SPA INalonso?dc, fi.
udc.
esAbstractThe paper presents a tabular interpretation for akind of 2-Stack Automata.
These automata may beused to describe various parsing strategies, rangingfrom purely top-down to purely bottom-up, for LIGsand TAGs.
The tabular interpretation ensures, forall strategies, a time complexity in O(n 6) and spacecomplexity in O(n 5) where n is the length of theinput string.In t roduct ion2-Stack automata \[2SA\] have been identified as pos-sible operational devices to describe parsing strate-gies for Linear Indexed Grammars \[LIG\] or Tree Ad-joining Grammars \[TAG\] (mirroring the traditionaluse of Push-Down Automata \[PDA\] for Context-Free Grammars \[CFG\]).
Different variants of 2SA(or not so distant Embedded Push-Down Automata)have been proposed, some to describe top-downstrategies (Vijay-Shanker, 1988; Becker, 1994), someto describe bottom-up strategies (Rambow, 1994;Nederhof, 1998; Alonso Pardo et al, 1997), but none(that we know) that are able to describe both kindsof strategies.The same dichotomy also exists in the differenttabular algorithms that has been proposed for spe-cific parsing strategies with complexity ranging fromO(n 6) for bottom-up strategies to O(n 9) for prefix-valid top-down strategies (with the exception of aO(n 6) tabular interpretation of a prefix-valid hybridstrategy (Nederhof, 1997)).
It must also be notedthat the different abular algorithms may be diffi-cult to understand and it is often unclear to know ifthe algorithms till hold for different strategies.This paper overcomes these problems by (a) in-troducing strongly-driven 2SA \[SD-2SA\] that maybe used to describe parsing strategies for TAGsand LIGs, ranging from purely top-down to purelybottom-up, and (b) presenting a tabular interpre-tation of these automata in time complexity O(n 6)and space complexity O(nS).The tabular interpretation follows the principlesof Dynamic Programming: the derivations are bro-ken into elementary sub-derivations that may (a) becombined in different contexts to retrieve all possi-ble derivations and (b) be represented in a compactway by items, allowing tabulation.The strongly-driven 2SA are introduced and moti-vated in Section 1.
We illustrate in Sections 2 and 3their power by describing several parsing strategiesfor LIGs and TAGs.
Items are presented in Sec-tion 4.
Section 5 lists the rules to combine items andtransitions and establishes correctness theorems.1 S t rong ly -dr iven  2 -Stack  Automata2SA are natural extensions of Push-Down Automataworking on a pair of stacks.
However, it is knownthat unrestricted 2SA have the power of a TuringMachine.
The remedy is to consider asymmetricstacks, one being the Master Stack MS where mostof the work is done and the other being the AuxiliaryStack AS mainly used for restricted "bookkeeping".The following remarks are intended to give an ideaof the restrictions we want to enforce.
The first onesare rather standard and may be found under differ-ent forms in the literature.
The last one justifies thequalification of "strongly-driven" for our automata.\[Session\] AS should actually be seen as a stack ofsession stacks, each one being associated to asession.
Only the topmost session stack maybe consulted or modified.
This idea is closelyrelated to the notion of Embedded Push-DownAutomata (Rambow, 1994, 96-102).\[Linearity\] A session starts in mode write w andswitches at some point in mode erase e. Inmode w (resp.
e), no element can be poppedfrom (resp.
pushed to) the master stack MS.Switching back from e to w is not allowed.
Thisrequirement is related to linearity because itmeans that a same session stack is never usedtwice by "descendants" of an element in MS.\[Soft Session Exit\] Exiting a session is only possi-ble when reaching back, with an empty sessionstack and in mode erase, the MS element hatinitiated the session.\[Driving\] Each pushing on MS done in write modeleaves some mark in MS about the action that1333</zW \W/ZE \EI I I I--*W ~W Write Mode11-~E ~EI I I I I I I I I I I I I I I ?Master stackFigure 1: Representation f transitions and derivationstook place on the session stack.
The poppingof this mark (in erase mode) will guide whichaction should take place on the session stack.In other words, we want the erasing actions tofaithfully retrace the writing actions.Formally, a SD-2SA .A is specified by a tuple(~, .M, X, $0, $l, O) where ~ denotes the finite set ofterminals, .M the finite set of master stack elementsand X the finite set of auxiliary stack elements.
Theinit symbol $0 and final symbol $y are distinguishedelements of Ad.
O is a finite set of transitions.The master stack MS is a word in (D.M)* where2) denotes the set {/~, x.~, ---% ~} of act ion  marksused to remember which action (w.r.t.
the auxiliarystack AS) takes place when pushing the next masterstack element.
The empty master stack is noted eand a non-empty master stack ~1A1 ...  ~nAn whereA,~ denotes the topmost element.The meaning of the action marks is:/2 Pushing of an element on AS.
"x~ Popping of the topmost element of AS.--* No action on AS.Creation of a new session (with a new emptysession stack on AS).The auxiliary stack AS is a word of (K:X*)* whereK: = {~w,~e} is a set of two elements used todelimit session stacks in AS.
Delimiter ~w (resp.~e)  is used to start a new session from a sessionwhich is in writing (resp.
erasing) mode.
The emptyauxiliary stack is noted e.Given some input string xl .
.
.
x i  E E*, a configu-ration of .A is a tuple (m, u, ~, ~) where m E {w, e}denotes a mode (writing or erasing), u a string posi-tion in \[0, f\], -- the master stack and ~ the auxiliarystack.
Modes are ordered by w -~ e to capture thefact that no switching from e to w is possible.
Theinitial configuration of ,4 is (w, 0, ~$0, ~w)  and thefinal one (e, f ,  ~$f, ~W).A transition is given as a pair (p, --, ~), z (q, O, 0)where p, q are modes (or, with some abuse, variablesranging over modes), z in E*, .-- and O suffixes ofmaster stacks in .M(2)Ad)*, and ~,0 suffixes of aux-iliary stacks in X*(~gX*)* = (XUK:)*.
Such a transi-tion applies on any configuration (p, u, k~--, ~b~) suchthat xu+l .
.
.
x ,  = z and returns (q, v, ~0,  ?0).We restrict the kind of allowed transitions:SWAP (p, A, ~), z (q, B, ~) with p _ q and eithere K: ("session bottom check") or ~ = e ("noAS consultation") ./ -WRITE  (w,A, e), z (w, ATB,  b)/ -ERASE (e, A/ZB,a) , z (e, D, e)- - * -WRITE  (w, A, e), ~ , (w, A-*B, e)- - * -ERASE (e, A-+B, e) , ~ ~ (e, C, e)~-WRITE  (m, A, e), z, (w, A~B,  ~m)~-ERASE (e, A~B,  ~m) ~i~ (m, C, e)x ,~-WRITE  (w, A, a),  ~, (w, A'x~B, e)"~-ERASE (e, A"~B, e) , ~ , (e, C, c)Figure 1 graphically outlines the different kindsof transitions using a 2D representation where theX-axis (Y-axis) is related to the master (resp.
aux-iliary) stack.
Figure 1 also shows the two forms ofderivations we encounter (during a same session).2 Us ing  2SA to  parse  L IGsIndexed Grammars (Aho, 1968) are an extension ofContext-free Grammars in which a stack of indicesis associated with each non-terminal symbol.
LinearIndexed Grammars (Gazdar, 1987) are a restrictedform of Indexed Grammars in which the index stackof at most one body non-terminal (the child) is re-lated with the stack of the head non-terminal (thefather).
The other stacks of the production musthave a bounded stack size.Formally, a LIG G is a 5-tuple (VT, VN, S, VI,P)where VT is a finite set of terminals, VN is a finiteset of non-terminals, S E VN is the start symbol,VI is a finite set of indices and P is a finite set ofproductions.
Following (Gazdar, 1987) we considerproductions in which at most one element can bepushed on or popped from a stack of indices:1334\[Terminal\] Ak,o\[\] --+ ak where ak ?
VT U {?
},\[POP\] Ak,o \[oo\] --.
Ak,t \ [ \ ] .
.
.
Ak,d\[oo'y\]... Ak,.~ \[\]\[PUSH\] Ak,0\[ooT\]--* Ak,1 \ [ \ ] .
.
.
Ak,d\[OO\]... Ak,,~ \[\]\[HOR\] Ak,0\[oo\] ~ ak,1 \[1... Ak,d\[OO\]... a~,,~ \[1To each production k of type PUSH, POP orHOR, we associate a characteristic tuple t(k) =(d, 5, a,/3) where d is the position of the child andthe other arguments given by the following table:Type 5 aPUSH /z e 7POP ~ 7 eHOR ---* e ?We introduce symbols ~'k,i as a shortcut for dottedproductions \[Ak,0~Ak,1 ... Ak,i ?
Ak,i+ l .. .
Ak,,~ \].In order to design a broad class of parsing strate-gies ranging from pure top-down to pure bottom-up,we parameterize the automaton to be presented bya call projection -'* from 12 to )2 cart and a returnprojection *'-" from 12 to "W et where ~ = VN U VIand \]2 cart and V ret are two sets of elements.
We re-quire \]2 cart N \]2 ret = 0 and ("-*, +'-) to be invertible,i.eVX, rev ,  (X ,*X)  = (V ,  ~)  =:~ x = rThe projections extend to sequences by takingX1.
.
.
X :  = X-~I ...  ~ and "~ =e (similarly for +-).Given a LIG G and a choice of projections, wedefine the 2SA .A(G, -~, = ~-) (Vr, M,  X, -~, ~ ,  O)where M = {Vk,i}U~TU~TT, X = ~//U~//, and whosetransitions are built using the following rules.?
Call/Return of a non childCALL :  (m, Vk,i,e)* , (w, Vk , i~ ,~ rn)RET:  (e, , (m, Vk,i+,,e)?
Call/Return of a child for t(k) = (i + 1,5, a,/3).CALL(5) : (w, Vk,i, W),  ~_~ (w, Vk,iSAk,-~+l, "-~)RET(5) : (e, Vk,iSAk,i++'-'-';1, /3) , , (e, Vk.i+l, W)?
Production SelectionSEL:  (w,A---~,0, e), , (w, Vk,0, e)?
Production PublishingPUB:  (e, Vk,n~,e), , (e, ~0k,0, e)?
Scanning (for terminal productions)SCAN : (w, ' m a~ ~ m Ak,0, ~ )~---*(e, Ak,0, ~ )The reader may easily check that A(G,-'-*, ~-'-)recognizes L(G).
The choice of the call and re turnelements for the MS (A~k,i and Ak,i) and the AS('-~ and ~')  defines a parsing strategy, by controllinghow information flow between the phases of predic-tion and propagation.
The following table lists thechoices corresponding to the main parsing strategies(but others are definable).Strategy ~ ~- -~ ~-Top-Down A _l_ 7 .l_Bottom-Up 2.
A' _l_ 7Earley A A' 7 7'It is also worth to note that the descrip-tion of A(G,-*,  +--) could be simplified.
In-deed, for every configuration (m,u,E,~) deriv-able with .A(G, "--*,*-"), we can show that --- =~Vk l , i lS t .
.
.
Vk.,i,,SnX, and that 5t only dependson Vk~,i~.
That means that we could use a masterstack without action marks, these marks being im-plicitly given by the elements XTk,i.3 Us ing  2SA to  parse  TAGsTree Adjoining Grammars are a extension of CFGintroduced by Joshi in (Joshi, 1987) that usetrees instead of productions as primary represent-ing structure.
Formally, a TAG is a 5-tuple G =(VN,VT, S , I ,A) ,  where VN is a finite set of non-terminal symbols, VT a finite set of terminal sym-bols, S the axiom of the grammar, I a finite set ofinitial trees and A a finite set of auxiliary trees.
IUAis the set of elementary trees.
Internal nodes are la-beled by non-terminals and leaf nodes by terminalsor e, except for exactly one leaf per auxiliary tree(the foot) which is labeled by the same non-terminalused as label of its root node.New trees are derived by adjoining: let be a atree containing a node u labeled by A and let befl an auxiliary tree whose root and foot nodes arealso labeled by A.
Then, the adjoining of/3 at theadjunction ode u is obtained by excising the subtreea~ of a with root u, attaching/3 to u and attachingthe excised subtree to the foot of/3 (See Fig.
2).pineFigure 2: Traversal of an adjunctionAn elementary tree a may be represented by aset P(a)  of context free productions, each one beingeither of the form?
Yk,O ---4 Pk ,1 .
.
.
Pk,n~, where Yk,o denotes somenon-leaf node k of a and uk,i the i th son  of k.1335?
vk,0 --* al?, where vk,0 denotes ome leaf node kof c~ with terminal abel ak.As done for LIGs, we introduce symbols Vk,ito denote dotted productions and consider pro-jections "* and ~ to define the parameterized2SA .A(G, -'-*, *") = (VT, At, At, v0,0, ~0,0, O) whereAt = {Vk,i) U {vk,i} U {v~,/).
The transitions aregiven by the following rules (and illustrated in Fig-ure 2).?
Call / Return for a node not on a spine.
Thecall starts a new session, exited at return.CALL  : (m, Vk,i,e) , , (w ,m RET:  (e, Vk , /~vk.
i+ l ,~ ) '  ' (m, Vk,i+l,e)?
Call / Return for a node vk,i+l on a spine.The adjunction stack is propagated un-modifiedalong the spine.SCALL  : (w, Vk,i,e), , (w, Vk,i---*vk,i+~,e)SRET : (e, Vk,i--*bk,i+l, e) , ~ (e, Vk,i+l,e)?
Call / Return for an adjunction on node uk,0.The computation is diverted to parse some ac-ceptable auxiliary tree ~ (with root node rh),and a continuation point is stored on the auxil-iary stack.ACALL  : (w, vk,0,e) , , Vk,o/Zr~,Vk,o)ARET:  (e,v~,o/ZF3Z,Vk,,~), , (e, ~-" e) /\]k,0,?
Call / Return for a foot node f~.
The continu-ation stored by the adjunction is used to parsethe excised subtree.FCALL  : (w, f~,A) ,- , (w, f-'-~"~A, e)FRET : (e, f~'%A,~) , , (e, \]~,A)Note: These two transitions use a variable Aover At.
This is a slight extension of 2SA thatpreserves correctness and complexity.?
Production SelectionSEL:  (w, vk.~,e), , (w, Vk,0,e)?
Production PublishingPUB:  (m, Vk,n~,e), (e ,~ e) /\]k,0,?
ScanningSCAN:  (w, v~,0, ~m), ~ , (e ,  ~---Different parsing strategies can be obtained bychoosing the call (vk,i) and re turn  (vk,i) elements:Strategyprefix-valid Top-Down v _l_Bottom-Up _L v'prefix-valid Earley v v'Non prefix-valid variants of the top-down andEarley-like strategies can also be defined, by tak-ing ~ = _L and ~ = r~ for every root node r~ ofan auxiliary tree j3 (the projections being unmodi-fied on the other elements).
In other words, we geta full prediction on the context-free backbone of Gbut no prediction on the adjunctions.4 I temsWe identify two kinds of elementary deriva-tions, namely Context -F ree  \[CF\] and escapedContext -F ree  \[xCF\] derivations, respectively rep-resented by CF and xCF items.
An item keeps thepertinent information relative to a derivation, whichallows to apply the sequence of transitions associ-ated with the derivation in different contexts.Before presenting these items, we introduce thefollowing classification about derivations.A derivation (p,u, EA,~)\[--~7 / (q,v,O,O) is saidr ightward  if no element of E is accessed (even forconsultation) during the derivation and if A is onlyconsulted.
Then F~A is a prefix of O.Similarly, a derivation (p, u, E, ~)1-~" (q, v, O, 0) issaid upward  if no element of ~ is accessed (even forconsultation).
Then ~ is a prefix of 0.We also note w\[q/p\] the prefix substitution of p byq for all words w,p, q on some vocabulary such thatp is prefix of w.4.1 Context -F ree  Der ivat ionsA Context -F ree  \[CF\] derivation only depends onthe topmost element A of the initial stack MS. Thatmeans that no element of the initial AS and no ele-ment of MS below element A is needed:(o, u , -A ,  ~)l-~l (w, v, OB, 0)1-~2 (m, w, OBhC, ~c)where?
dl and did2 are both rightward and upward.?
d 2 is rightward.?
either (5 # ~,  o = w, and c e A') or(5 = ~,  and c = ~o).For such a derivation, we have:P ropos i t ion  4.1 For all prefix stacks E',~',(o,u,E'A,(') I-~, (w,v, O'B,8')(re, w, O 'B6C, (c )where  O '  = and o' = O\[gl \].The proposition suggests representing the CFderivation by a CF item of the formABh(7, mwhere A = (u, A) and B = (v, B) are micro  config-urations and (7 = (w, C, c) a mini  configuration.1336B ~cA .t~.--. "
" CF(-*) I tem CF(7)  or CF(~) I temBCF(X~) I tem B?
: : :?
: : :xCF(--*) I tem r~I I I I I I I I: : :xCF(/z) I tem r~ "-~I I I I I IFigure 3: Items ShapesA xCF('x~)Item r~I I I I I I I ,4.2 Escaped Context -F ree  Der ivat ionsAn escaped Context -F ree  \[xCF\] derivation is al-most a CF derivation, except for an escape sub-derivation that accesses deep elements of AS.where(w, u, EA, ~) I~ (w,v, eB ,  e)\[ *--"- (w ,  s,  @D,  ~d) d~I*-- (e,t,@DX,~E,?)
dxI-~; (e, w, OBSC, ?c)?
dl and did2 are both rightward and upward??
d2 and dx are rightward??
d3 is upward??
5# ~ and d, cE X.P ropos i t ion  4.2 For all prefix stacks ~ and ~',stack ?~, and rightward derivation(w, s, @'D, ~'d)l~x , (e, t, @'DX,~E, ?
')where ~' = ?\[~'/E\],  we have(w, u, E'A, ~ ' ) \ [ -~-I~* d2I~* d3(w, v, e\[='/--\]B, e\[~'/~\])(w, s, ?\[-' lZ\] D, ~' d) .
( e, t, ?\[E' /E\]DX~E, ?
')(e, w, O\[~-'/Z\]BSC, ?
'c)The proposition suggests representing the xCFderivation by an xCF item of the formABS\[i:) E\]Cewhere A = (u,A), B -- (v,B/, /~ = (s,D,d/ ,  E =(t, E / and C -- (w, C, c/.In order to homogenize notations, we also usethe alternate notation ABS\[oo\]Cm to represent CFitem ABSC'rn, introducing a dummy symbol o.The specific forms taken by CF and xCF items forthe different actions 5 are outlined in Figure 3.5 Combin ing i tems and transit ionsWe provide the rules to combine items and transi-tions in order to retrieve all possible 2SA derivations.These rules do not explicit the scanning con-straints and suppose that the string z may be readbetween positions w and k of the input string?
Theyuse holes * to denote slots that not need be con-sulted.
For any mini configuration A = (u, A, a), wenote ~o = (u, A) its micro projection?\ [ - -*-WRITE\]  r = (w, C, e), ~, (w, C--*F, e)A**\[oo\]Cw =~ AC?~\ [oo \ ]~ 'wwhere C = <w, C, c>, and F = (k, F, c).\ [ / -WRITE \ ]  r = (w, C, e), ~, (w, C/ZF, f)(1)A**\[oo\] Cw ==~ G ?
G ?/z \[oo\] Fwwhere C = (w, C, c), and F = (k, F, f).\[~-WRITE\] r = (m, C, e) vz.
"(w, C~F, ~"~)(2)A**\[oo\]Cm ==~ C?C?~\ [o?
\ ]Fwwhere C = (w, C, c), and F = {k, F, ~m).iX -WRITE \ ]  T = (W, C, c): z (w, CX~F,e)(3)\]i?**\[?
?\]CWM**\[oo\]Aw }~ MC?\ \ [ ??
\ ]Fw (4)where C = (w,C,c), A = (u,A,a), and F =<k,F,a).\[--*-ERASE\] r = (e, B--*C, e) , ~ , (e, F, e)A?MA\[?
?\] \]~w'4?\]~?~\[DE\]Oe }~ A?MA\ [DE\ ]Fe  (5)where C = (w, C, c), b = (v, B, b), ~' = (k, F, c/,and (when D # o) D = (s,D,b).1337\[x,~-ERASE\] ~-= (e, Bx~C,e), z (e , f ,  f)21?
B?
"~\[D*\]C'e }~I?
*A \[oo\]-~lw =~ -/V/?
O#\[\]~C?\] ~'e (6)f~?o~\[oolBwwhere C' = (w,C,c), /~ = (v,B,b), M =(/,M,m), ~' = (k,F, f) ,  and (when D ~ o)D = (*,*,m).I F -ERASE\ ]  ~- = (e, B~C, ~'~) ~ (m, F, e)/~?B~\[oo\]Ce }~ MNA\[DE\]Fm (7) MNA\[DE\ ]Bmwhere C = (w~C,~m), B = (v,B,b), and ~' =(k,F,a)\ [ /Z-ERASE\] r = (e, B/ZC, c) , = ~ (e, F, e)MNA\[~\]l~w/~?\]~/?/Z\[?
?\]Ce }==~ MNA\[?
?\]/ae (S)where (~7 = (w,C,c/, B = (v,B,b/, and ~' =(k, F, b).B?B?/Z\[DE?\]Ce }MNA\[oolBw ~ MNA\[OPI~'e (9)MD?x,~\[OP\]E,ewhere C' = (w, C, c), /~ = (v, B, b), ~' = {k, F, b),and (when O # o) O = <l, O, b).\[SWAP\] r = (p, C,~), z (q, F,~)AB6\[DE\]Cm ~ AB6\[DEI~'m (10)where C?
= (w, C, c), ~' = (k, F, c), and eitherc=~=~?or~=e.The best way to apprehend these rules is to vi-sualize them graphically as done for the two mostcomplex ones (Rules 6 and 9) in Figures 4 and 5.A "--LFigure 4: Application of Rule 6N C D~M P "~'-"~Figure 5: Application of Rule 95.1 Reducing the complexityAn analysis of the time complexity to apply each rulegives us polynomial complexities O(n") with u <_ 6except for Rule 9 where u = 8.
However, by adapt-ing an idea from (Nederhof, 1997), we replace Rule 9by the alternate and equivalent Rule 11."B?
*/\[b'E?\]C'e } ,D?
x,,~\[OP\]~'eMNA\[oo\]l~w ~ MNA\[OPI~e (11)M .
'%\[O P\]*ewhere C7 : (w,C,c), B = (v,B,b), ~' = (k,F,b),and (when O ?
v) O = (l, O, b).Rule 11 has same complexity than Rule 9, but mayactually be split into two rules of lesser complex-ity O(n6), introducing an intermediary pseudo-itemBB/Z\[\[OP\]\]Ce (intuitively assimilable to a "deeplyescaped" CF derivation).Rule 12 collects these pseudo-items (indepen-dently from any transition) while Rule 13 combinesthem with items (given a/Z-ERASE transition ~-).BB/Z\[/)E?\]C'e }===~ BB/Z\[\[OP\]\](3'e (12)*D?\\[OP\]E,e1~?
\]~?/Z\[\[OP\]\]Ce }MNA\[c~\]I~w ~ MNA\[OP\]Fe (13)M* ~,~\[OP\]*ewhere C7 = (w,C,c}, B = (v,B,b), ~' = (k,F,b),and (when O ?
o) O = (l, O, b).Theorem 5.1 The worst time complexity of the ap-plication rules (1,2,3,4,5,6,7,8,10,12,13) is O(n 6)where n is the length of the input string.
The worstspace complexity is O(nS).5.2 Correctness resultsTwo main theorems establish the correctness ofderivable items w.r.t, derivable configurations.A derivable item is either the initial i tem oran item resulting from the application of a combi-nation rules on derivable items.
The initial item(0, e)(0, e)~\[oo\] <0, $0, ~w> w stands for the virtualderivation step (w, 0, e, e)\[- (w, 0, ~$0, ~w).Theorem 5.2 (Soundness)For  every derivableitem Z = AB6\[?IE\]Cm, there exists a derivationon configurations(o, e) I-D--- Ul~- vsuch that H\[-~- V is a CF or xCF derivation repre-sentable by I.Proof: By induction on the item derivation lengthand by case analysis.
I1338Theorem 5.3 (Completeness) For all derivableconfiguration (m, w, EC , ~c), there exists a derivableitem AB~\[DE\]Cm such that C = (w, C, c}.Proof: By induction on the configuration deriva-tion length and by case analysis of the different ap-plication rules.
We also need the following "Extrac-tion Lemma".
|Proposition 5.1 From any derivation(0, e)I--~- (m, w, EC, ~c)may be extracted a suffix CF or xCF sub-derivationU\[~ (m, .,, ~.C, ~c) for some configuration U.5.3 IllustrationIn the context of TAG parsing (Sect.
3), we canprovide some intuition of the items that are builtwith .A(G, "-*, +-), using some characteristic pointsencountered during the traversal of an adjunction(Fig.
6).on ADJon SPINEon FOOTafter CALLA1A1/\[oo\]RIwAI SI'--'~\[oO\]Fl WBi Fl"N\[oo\]Aawbefore RETAIAI/\[F1A4\]R2eAI S1---+\[FI A4\]F2eB1 F1 ",.~ \[G, B4\]A4 eFigure 6: Adjunction and Items6 Conc lus ionThis paper unifies different results about TAGs andLIGs in an uniform setting and illustrates the ad-vantages of a clear distinction between the use ofan operational device and the evaluation of this de-vice.
The operational device (here SD-2SA) helps usto focus on the description of parsing strategies (forLIGs and TAGs), while, independently, wedesign anefficient evaluation mechanism for this device (heretabular interpretation with complexity O(n6)).Besides illustrating a methodology, we believe ourapproach also opens new axes of research.For instance, even if the tabular interpretationwe have presented has (we believe) the best possi-ble complexity, it is still possible (using techniquesoutside the scope of this paper, (Barth61emy andVillemonte de la Clergerie, 1996)) to improve its ef-ficiency by refining what information should be keptin each kind of items (hence increasing computationsharing and reducing the number of items).To handle TAGs or LIGs with attributes, we alsoplan to extend SD-2SA to deal with first-order terms(rather than just symbols) using unification to applytransitions and subsumption to check items.Re ferencesAlfred V. Aho.
1968.
Indexed grammars - -  an ex-tension of context-free grammars.
Journal of theACM, 15(4):647-671, October.Miguel Angel Alonso Pardo, Eric de la Clergerie,and Manuel Vilares Ferro.
1997.
Automata-basedparsing in dynamic programming for Linear In-dexed Grammars.
In A. S. Narin'yani, editor,Proc.
of DIALOGUE'97 Computational Linguis-tics and its Applications International Workshop,pages 22-27, Moscow, Russia, June.F.
P. Barth~lemy and E. Villemonte de la Clergerie.1996.
Information flow in tabular interpretationsfor generalized push-down automata.
To appearin journal of TCS.Tilman Becker.
1994.
A new automaton modelfor TAGs: 2-SA.
Computational Intelligence,10(4):422-430.Gerald Gazdar.
1987.
Applicability of indexedgrammars to natural anguages.
In U. Reyle andC.
Rohrer, editors, Natural Language Parsing andLinguistic Theories, pages 69-94.
D. Reidel Pub-lishing Company.Aravind K. Joshi.
1987.
An introduction to treeadjoining rammars.
In Alexis Manaster-Ramer,editor, Mathematics of Language, pages 87-115.
John Benjamins Publishing Co., Amster-dam/Philadelphia.Mark-Jan Nederhof.
1997.
Solving the correct-prefix property for TAGs.
In T. Becker and H.-V.Krieger, editors, Proc.
of MOL'97, pages 124-130,Schloss Dagstuhl, Germany, August.Mark-Jan Nederhof.
1998.
Linear indexed automataand tabulation of TAG parsing.
In Proc.
of FirstWorkshop on Tabulation in Parsing and Deduc-tion (TAPD'98), pages 1-9, Paris, France, April.Owen Rambow.
1994.
Formal and ComputationalAspects of Natural Language Syntax.
Ph.D. thesis,University of Pennsylvania.K.
Vijay-Shanker.
1988.
A Study of Tree AdjoiningGrammars.
Ph.D. thesis, University of Pennsyl-vania, January.1339
