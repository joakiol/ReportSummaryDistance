Proceedings of Human Language Technology Conference and Conference on Empirical Methods in Natural LanguageProcessing (HLT/EMNLP), pages 555?562, Vancouver, October 2005. c?2005 Association for Computational LinguisticsUsing MONA for Querying Linguistic TreebanksStephan Kepser?Collaborative Research Centre 441University of T?ubingenT?ubingen, Germanykepser@sfs.uni-tuebingen.deAbstractMONA is an automata toolkit provid-ing a compiler for compiling formulae ofmonadic second order logic on strings ortrees into string automata or tree automata.In this paper, we evaluate the option ofusing MONA as a treebank query tool.Unfortunately, we find that MONA is notan option.
There are several reasons whythe main being unsustainable query an-swer times.
If the treebank contains largertrees with more than 100 nodes, then eventhe processing of simple queries may takehours.1 IntroductionIn recent years large amounts of electronic texts havebecome available providing a new base for empiri-cal studies in linguistics and offering a chance to lin-guists to compare their theories with large amountsof utterances from ?the real world?.
While taggingwith morphosyntactic categories has become a stan-dard for almost all corpora, more and more of themare nowadays annotated with refined syntactic in-formation.
Examples are the Penn Treebank (Mar-cus et al, 1993) for American English annotated atthe University of Pennsylvania, the French treebank(Abeille?
and Cle?ment, 1999) developed in Paris, theTIGER Corpus (Brants et al, 2002) for Germanannotated at the Universities of Saarbru?cken and?
This research was funded by a German Science Founda-tion grant (DFG SFB441-6).Stuttgart, and the Tu?bingen Treebanks (Hinrichs etal., 2000) for Japanese, German and English fromthe University of Tu?bingen.
To make these rich syn-tactic annotations accessible for linguists, the devel-opment of powerful query tools is an obvious needand has become an important task in computationallinguistics.Consequently, a number of treebank query toolshave been developed.
Probably amongst the mostimportant ones are CorpusSearch (Randall, 2000),ICECUP III (Wallis and Nelson, 2000), fsq (Kepser,2003), TGrep2 (Rohde, 2001), and TIGERSearch(Ko?nig and Lezius, 2000).
A common feature ofthese tools is the relatively low expressive powerof their query languages.
Explicit or implicit ref-erences to nodes in a tree are mostly interpreted ex-istentially.
The notable exception is fsq, which em-ploys full first order logic as its query language.The importance of the expressive power of thequery language is a consequence of the sizes of theavailable treebanks, which can contain several ten-thousand trees.
It is clearly impossible to browsethese treebanks manually searching for linguisticphenomena.
But a query tool that does not permitthe user to specify the sought linguistic phenomenonquite precisely is not too helpful, either.
If the usercan only approximate the phenomenon he seeks an-swer sets will be very big, often containing severalhundred to thousand trees.
Weeding through answersets of this size is cumbersome and not really fruit-ful.
If the task is to gain small answer sets, thenquery languages must be powerful.
The reason whythe above mentioned query tools still offer querylanguages of limited expressive power is the fear that555there may be a price to be paid for offering a pow-erful query language, namely longer query answertimes due to more complex query evaluation algo-rithms.At least on a theoretical level, this fear is notnecessarily justified.
As was recently shown byKepser (2004), there exists a powerful query lan-guage with a query evaluation algorithm of low com-plexity.
The query language is monadic second-order logic (MSO henceforth), an extension of first-order logic that additionally allows for the quantifi-cation over sets of tree nodes.
The fact that makesthis language so appealing beyond its expressivepower is that the evaluation time of an MSO queryon a tree is only linear in the size of the tree.
Thequery evaluation algorithm proceeds in two steps.
Inthe first step, a query is compiled into an equivalenttree automaton.
In the second, the automaton is runon each tree of the treebank.
Since a run of an au-tomaton on a tree is linear in the size of the tree, theevaluation of an MSO query is linear in the size of atree.There has sometimes been the question whetherthe expressive power of MSO is really needed.
Be-yond the statements above about retrieving small an-swer sets there is an important argument concern-ing the expressive power of the grammars underly-ing the annotation of the treebanks.
A standard as-sumption in the description of the syntax of naturallanguages is that at least context-free string gram-mars are required.
On the level of trees, these corre-spond to regular tree grammars (Ge?cseg and Steinby,1997).
It is natural to demand that the expressivepower of the query language matches the expressivepower of the underlying grammar.
Otherwise therecan be linguistic phenomena annotated in the tree-bank for which a user cannot directly query.
Thequery language which exactly matches the expres-sive power of regular tree grammars is MSO.
Inother words, a set of trees is definable by a regu-lar tree grammar iff there is an MSO formula thatdefines this set of trees (Ge?cseg and Steinby, 1997).Hence MSO is a natural choice of query languageunder the given assumption that the syntax of natu-ral language is (at least) context-free on the string ortoken level.Since the use of MSO as a query language fortreebanks is ?
at least on a theoretical level ?
quiteappealing, it is worth trying to develop a query sys-tem that brings these theoretical concepts to prac-tise.
The largest and most demanding subpart ofthis enterprise is the development of a tree automatatoolkit, a toolkit that compiles formulae into tree au-tomata and performs standard operations on tree au-tomata such as union, intersection, negation, and de-termination.
Since this task is very demanding, itmakes sense to investigate whether one could useexisting tree automata toolkits before starting to de-velop a new one.
To the authors?
knowledge, thereexists only one of-the-shelf usable tree automatatoolkit, and that is MONA (Klarlund, 1998).
It isthe aim of this paper to give an evaluation of usingMONA for querying linguistic treebanks.2 The Tree Automata Toolkit MONATree automata are generalisations of finite state au-tomata to trees.
For a general introduction to tree au-tomata, we refer the reader to (Ge?cseg and Steinby,1997).
There exists a strong connection between treeautomata and MSO.
A set of trees is definable byan MSO formula if and only if there exists a treeautomaton accepting this set.
This equivalence isconstructive, there is an algorithm that constructs anautomaton from a given MSO formula.MONA is an implementation of this relation-ship.
It is being developed by Nils Klarlund, AndersM?ller, and Michael Schwartzbach.
Its intendedmain uses are hardware and program verification.MONA is actually an implementation of the compi-lation of monadic second order logic on strings andtrees into finite state automata or tree automata, re-spectively.
But we focus exclusively on the tree parthere.
As we will see later, MONA was not devel-oped with linguistic applications in mind.2.1 The Language of MONAThe language of MONA is pure monadic second or-der logic of two successors.
We will only mentionthe part of the language that is needed for describingtrees.
There are first-order and second-order terms.A first-order variable is a first-order term.
The con-stant root is a first-order term denoting the root nodeof a tree.
If t is a first-order term and s is a non-empty sequence of 0?s and 1?s, then t.s is a first-order term.
0 denotes the left daughter, and 1 the556right daughter of a node.
A sequence of 0?s and1?s denotes a path in the tree.
The term root.011,e.g., denotes the node that is reached from the rootby first going to the left daughter and then goingtwice down to the right daughter.
A set variable isa second-order term.
If t1, .
.
.
, tk are first-order termsthen {t1, .
.
.
, tk} is a second-order term.
We considerthe following formulae.
Let t, t ?
be first-order termsand T,T ?
be second order terms.
Atomic formulaeare?
t = t ?
?
Equality of nodes,?
T = T ?
?
Equality of node sets,?
t in T ?
t is a member of set T ,?
empty(T ) ?
Set T is empty.Formulae are constructed from atomic formulaeusing the boolean connectives and quantification.Let ?
and ?
be formulae.
Then we define complexformulae as?
?
?
?
Negation of ?,?
?
& ?
?
Conjunction of ?
and ?,?
?
| ?
?
Disjunction of ?
and ?,?
?
=> ?
?
Implication of ?
and ?,?
ex1 x : ?
?
First-order existential quantifica-tion of x in ?,?
all1 x : ?
?
First-order universal quantifica-tion of x in ?,?
ex2 X : ?
?
Existential quantification of set Xin ?,?
all2 X : ?
?
Universal quantification of set X in?.We note that there is no way to extend this lan-guage.
This has three important consequences.Firstly, we are restricted to using binary trees only.And secondly, we cannot accommodate linguistic la-bels in a direct way.
We have to find some coding.Finally, and this is a significant drawback that mayexclude the use of MONA for many applications,we cannot code the tokens, the word sequence at theleaves of a tree.
Hence we can neither query for par-ticular words or sequences of words.
We can onlyquery the structure of a tree ?
including the labels.2.2 The MONA CompilerThe main program of MONA is a compiler that com-piles formulae in the above described language intotree automata.
The input is a file containing the for-mulae.
The output is an analysis of the automatonthat is constructed.
In particular, it is stated whetheroriginal tree ttranslateoriginal query qtranslateMONA formulafor tcompileMONA formulafor q and tcompileAutomaton for timport 44iiiiiiiiiiiiiiiiii Automaton for q and tor /0Figure 1: Method of using MONA for querying.the formula is satisfiable at all, i.e., whether an au-tomaton can be constructed.MONA does not provide a method to execute anautomaton on a tree.
But if a formula can be com-piled into an automaton, this automaton can be out-put to file.
And a file containing an automaton can beimported into a file containing a formula.
We there-fore use the following strategy to query treebanksusing MONA.
Each tree from the treebank is trans-lated into a formula in the MONA language.
Howthis can be done, will be described later.
The for-mula representing the tree is then compiled into anautomaton and written to file.
Now the treebank ex-ists as a set of automata files.
A query to the originaltreebank will also be translated into a MONA for-mula.
For each tree of the treebank, this formula isextended by an import statement for the automatonrepresenting the tree.
If and only if the extended for-mula representing query and tree can be compiledinto an automaton, then the tree is a match for theoriginal query.
This way we can use MONA to querythe treebank.
The method is depicted in Figure 1.3 The Tu?bingen TreebanksIn order to evaluate the usability of MONA as aquery tool we had to chose some treebank to do ourevaluation on.
We opted for the Tu?bingen Treebankof spoken German.
The Tu?bingen Treebanks, an-notated at the University of Tu?bingen, comprise aGerman, an English and a Japanese treebank con-sisting of spoken dialogs restricted to the domain ofarranging business appointments.
For our evalua-tion, we focus on the German treebank (Tu?Ba-D/S)(Stegmann et al, 2000; Hinrichs et al, 2000) thatcontains approximately 38.000 trees.The treebank is part-of-speech tagged using theStuttgart-Tu?bingen tag set (STTS) developed by5570 1 2 3 4500 501502 503504505istVAFINderARTvierundzwanzigsteADJAJuliNN.$.HD HDVXFINHD ?ADJX?
HDNXPREDLK?MF?SIMPXFigure 2: An example tree from Tu?Ba-D/S.Schiller et al (1995).
One of the design decisionsfor the development of the treebank was the commit-ment to reusability.
As a consequence, the choice ofthe syntactic annotation scheme should not reflect aparticular syntactic theory but rather be as theory-neutral as possible.
Therefore a surface-orientedscheme was adopted to structure German sentencesthat uses the notion of topological fields in a sensesimilar to that of Ho?hle (1985).
The verbal elementshave the categories LK (linke Klammer) and VC (ver-bal complex); roughly everything preceeding the LKforms the ?Vorfeld?
VF, everything between LK andVC forms the ?Mittelfeld?
MF, and the material fol-lowing the VC forms the ?Nachfeld?
NF.The treebank is annotated with syntactic cate-gories as node labels, grammatical functions as edgelabels and dependency relations.
The syntactic cat-egories follow traditional phrase structure and thetheory of topological fields.
An example of a treecan be found in Figure 2.
To cope with the charac-teristics of spontaneous speech, the data structures inthe Tu?bingen Treebanks are of a more general formthan trees.
For example, an entry may consist of sev-eral tree structures.
It may also contain completelydisconnected nodes.
In contrast to TIGER or thePenn Treebank, there are neither crossing branchesnor empty categories.There is no particular reason why we chose thistreebank.
Many others could have been used as wellfor testing the applicability of MONA.4 Converting Trees into Automata4.1 Translating Trees into Tree DescriptionsWhen translating trees from the treebank intoMONA formulae describing these trees we considerproper trees only.
Many treebanks, including Tu?Ba-D/S, contain more complex structures than propertrees.
For the evaluation purpose here we simplifythese structures as follows.
We ignore the secondaryrelations.
And we introduce a new super root.
Alldisconnected subparts are connected to this superroot.
Note that we employ this restriction for theevaluation purpose only.
The general method doesnot require these restrictions, because even morecomplex tree-like structures can be recoded intoproper binary trees, as is shown in (Kepser, 2004).As stated above, the translation of trees into for-mulae has to perform two tasks.
The trees, whichare arbitrarily branching, must be transformed intobinary trees.
And the linguistic labels, i.e., the nodecategories and grammatical functions, have to becoded.
For the transformation into binary trees, weemploy the First-Daughter-Next-Sibling encoding,a rather standard technique.
Consider an arbitrarynode x in the tree.
If x has any daughters, its left-most daughter will become the left daughter of x inthe transformed tree.
If x has any sisters, then itsleftmost sister will become the right daughter of x inthe transformed tree.
This transformation is appliedrecursively to all nodes in the tree.
For example, thetree in Figure 2 is transformed into the binary tree inFigure 3.Note how the disconnected punctuation node atthe lower right corner in Figure 2 becomes the rightdaughter of the SIMPX node in Figure 3.
Note alsothat we have both category and grammatical func-tion as node labels for those nodes that have a gram-matical function.Such a binary tree is now described by a severalformulae.
The first formula, called Carcase, collectsthe addresses of all nodes in the tree to describe thetree structure without any labels.
For our exampletree, the formula would beCarcase = {root,root.0,root.00,root.000,root.0000,root.01,root.001,root.0010,root.00100,root.001001,root.0010010,root.0010011}.A syntactic category or grammatical function iscoded as the set of nodes in the tree that are labelled558SROOTqqqqqqqqqqSIMPXqqqqqqqqqqMMMMMMMMMMLK?oooooooooooMMMMMMMMMM$PERIODVXFIN HDooooooooooooMF?qqqqqqqqqqVAFIN HD NX PREDoooooooooooART?OOOOOOOOOOOADJX?oooooooooooMMMMMMMMMMADJA HD NN HDFigure 3: Binary recoding of the tree in Figure 2.with this category or function.
This is the way to cir-cumvent the problem that we cannot extend the lan-guage of MONA.
Here are some formulae for somelabels of the example tree.LK = {root.00}, ART = {root.00100}, HD ={root.000,root.0000,root.0010010, root.0010011}.For all category or function labels that are notpresent at a particular tree, but part of the label set ofthe treebank, we state that the corresponding sets areempty.
For example, the description of the exampletree contains the formula empty(VC).We implemented a program that actually performsthis translation step.
The input is a fraction ofthe Tu?Ba-D/S treebank in NEGRA export format(Brants, 1997).
The output is a file for each treecontaining the MONA formulae coding this tree.
Inthis way, we get a set of MONA formulae describingeach tree.4.2 Compiling Tree Descriptions intoAutomataAs mentioned above, the next step consists in com-piling each tree description into an equivalent au-tomaton.
This is the first part of the evaluation.We tested whether MONA can actually perform thiscompilation.
Astonishingly, the answer is not assimple as one might expect.
It turns out that the com-puting power required to perform the compilation isquite high.
To start, we chose a very small subset ofthe Tu?Ba-D/S, just 1000 trees.
Some of these treescontain more than 100 nodes, one more than 200nodes.
Processing descriptions of these large treesactually requires a lot of computing power.It seems it is not possible to perform this compi-lation step on a desktop machine.
We used an AMD2200 machine with 2GB Ram for a try, but abortedthe compilation of the 1000 trees after 15 hours.
Atthat time, only 230 trees had been compiled.To actually get through the compilation of thetreebank we transfered the task to a cluster com-puter.
On this cluster we used 4 nodes each equippedwith two AMD Opteron 146 (2GHz, 4GB Ram) inparallel.
Parallelisation is simple since each tree de-scription can be compiled independently of all theothers.
The parallelisation was done by hand.
Usingthis equipment we could compile 999 trees in about4 hours.
These 4 hours are the time needed to com-plete the whole task, not pure processing time.
Thetree containing more than 200 nodes could still notbe compiled.
Its compilation terminated unsuccess-fully after 6 hours.
We decided to drop this tree fromthe sample.It is obvious that this is a major obstacle for usingMONA.
It is difficult to believe that many linguistswill have access to a cluster computers and sufficientknowledge to use it.
And we expect on the base ofour experiences that a compilation on an ordinarydesktop machine can take several days, provided themachine is equipped with large amounts of memory.Otherwise it will fail.
One still has to consider that1000 trees are not much.
The TIGER corpus and theTu?Ba-D/S have each about 40.000 trees.
Thus onemay argue that this fact alone makes MONA unsuit-able for use by linguists.
But the compilation stephas to be performed only once.
The files contain-ing the resulting automata are machine independent.Hence a corpus provider could at least in theory pro-vide his corpus as a collection of MONA automata.This labour would be worth trying, if the resultingautomata could be used for efficient querying.5 Querying the TreebankIn order to query the treebank we designed a querylanguage that has MSO as its core but contains fea-tures desirable for treebank querying.
Naturally thelanguage is designed to query the original trees, nottheir codings.
It is therefore necessary to translatea query into an equivalent MONA formula that re-559spects the translation of the trees.5.1 The Query LanguageThe query language is defined as follows.
The lan-guage has a LISP-like syntax.
First-order variables(x,y, .
.
.)
range over nodes, set variables (X ,Y, .
.
.
)range over sets of nodes.
The atomic formulae are?
(cat x NX) ?
Node x is of category NX,?
(fct x HD) ?
Node x is of grammatical functionHD,?
(> x y) ?
Node x is the mother of node y,?
(>+ x y) ?
Node x properly dominates y,?
(.
x y) ?
Node x is immediately to the leftof y,?
(.. x y) ?
Node x is to the left of y,?
(= x y) ?
Node x and y are identical,?
(= X Y) ?
Node sets X and Y are identical,?
(in x X) ?
Node x is a member of set X .Complex formulae are constructed by booleanconnectives and quantification.
Let x be a nodevariable, X a set variable, and ?
and ?
formulae.Then we have?
(!
?)
?
Negation of ?,?
(& ?
?)
?
Conjunction of ?
and ?,?
(| ?
?)
?
Disjunction of ?
and ?,?
(-> ?
?)
?
Implication of ?
and ?,?
(E x ?)
?
Existential quantification of x in ?,?
(A x ?)
?
Universal quantification of x in ?,?
(E2 X ?)
?
Existential quantification of setvariable X in ?,?
(A2 X ?)
?
Universal quantification of set vari-able X in ?.5.2 Translating the Query LanguageThe next step consists of translating queries in thislanguage into MONA formulae.
As is simple to see,the translation of the complex formulae is straightforward, because they are essentially the same inboth languages.
The more demanding task is con-nected with the translation of formulae on categoryand function labels and the tree structure, i.e., dom-inance and precedence.As described above, categories and functions arecoded as sets.
Hence a query for a category or func-tion is translated into a formula expressing set mem-bership in the relevant set.
For example, the query(cat x SIMPX) is translated into (x in SIMPX).The translations of dominance and precedence arethe most complicated ones, because we transformedthe treebank trees into binary trees.
Now we have toreconstruct the original tree structures out of thesebinary trees.
In the first step we have to definedominance on coded binary trees.
The MONA lan-guage contains formulae for the left and right daugh-ter of a node, but there is no formula for dominance,the transitive closure of the daughter relation.
Thatwe can define dominance at all is a consequence ofthe expressive power of MSO.
As was shown byCourcelle (1990), the transitive closure of any MSO-definable binary relation is also MSO-definable.
LetR be an MSO-definable binary relation.
Then?X (?z,w(z ?
X ?R(z,w) ?
w ?
X)?
?z(R(x,z) ?
z ?
X)) ?
y ?
Xis a formula with free variables x and y that definesthe transitive closure of R. If we now take R(x,y) inthe above formula to be (x.0 = y | x.1 = y) we definedominance (dom).
In a similar fashion we can definethat y is on the rightmost branch of x (rb(x,y)) bytaking R(x,y) to be (x.1 = y).Now for immediate dominance, if node x is themother of y in the original tree, we have to distin-guish to cases.
In the simpler case, y is the leftmostdaughter of x, so after transformation, y is the leftdaughter of x.
Or y is not the leftmost daughter ofx, in that case it is a sister of the leftmost daugh-ter z of x.
All sisters of z are found on the rightmostbranch of z in the transformed trees.
Hence (> x y)is translated into (x.0 = y | ex1 z : x.0 = z & rb(z,y)).Proper dominance is treated similarly.
If we iter-ate the above argument that the daughters of a nodex in the original tree become the left daughter z of xand the rightmost successors of z, we can see that zand all the nodes dominated by z in the translatedtree are actually all the nodes dominated by x inthe original tree.
Hence (>+ x y) is translated into(x.0 = y | ex1 z : x.0 = z & dom(z,y)).For precedence, consider a node x in a coded bi-nary tree.
By definition the left daughter of x andall her successors are nodes that preceed the rightdaughter of x and her successors in the original tree.Thus (.. x y) is translated into(x.1 = y | ( ex1 z,w,v : z.0 = w & z.1 = v &(w = x | dom(w,x)) &(v = y | dom(v,y)))).560Immediate precedence can be expressed usingprecedence.
Node x immediately precedes y if x pre-cedes y there is no node z that is preceeded by x andprecedes y.There is a small issue in the translation of quan-tified formulae.
In the translation of a first-orderquantification (existential or universal) of a variablex we have to make sure that x actually ranges overthe nodes in a particular tree.
Otherwise MONAmay construct an automaton that contains the codedtree as a substructure, but is more general.
In sucha case we could no longer be certain that a solutionfound by MONA actually represents a proper matchof the original query on the original tree.
To solvethis problem, we add (x in Carcase) to the transla-tion of (E x ?)
or (A x ?).
E.g., (E x ?)
trans-lates to (ex1 x : x in Carcase & ??)
where ??
is thetranslation of ?.
The same holds ?
mutatis mutandis?
for set variable quantification.5.3 Performing a QueryWe implemented a small program that performs theabove described translation of queries.
It actuallydoes a little bit more.
It adds the defining formulaefor dom and rb.
Furthermore, as mentioned above,MONA allows to include a precompiled automatoninto a set of MONA formulae via a special importdeclaration.
Such an import declaration is used toinclude the automata representing the (coded) treesfrom the treebank.
Thus the set of MONA formulaeto evaluate a query consist of the translation of thequery, the formulae for dom and rb, and an importdeclaration for one tree from the treebank.
This setof MONA formulae can now be fed into MONA totry to compile it into an automaton.
If the compila-tion is successful, there exists an automaton that atthe same time represents the translation of the queryand the translation of the given tree.
Hence the treeis a match for the query.
If there is no automaton, thetree is no match for the query.
To perform the queryon the whole treebank there is a loop that stepwiseimports every tree and calls MONA to check if anautomaton can be compiled.
The result is the set oftree IDs that identify the trees that match the query.We tested this method on our small treebank of999 trees from Tu?Ba-D/S.
Unfortunately it turnedout that the reloading of large precompiled automata(representing large trees) also requires enormouscomputational resources.
We experimented witha very simple query: ?x NX(x) (or (E x (cat xNX))).
On our desktop machine (AMD 2200, 2GBRam), it took 6 hours and 9 minutes to process thisquery.
If we pose the same query on the whole tree-bank Tu?Ba-D/S (with about 38.000 trees) using es-tablished query tools like TIGERSearch or fsq, pro-cessing time is about 5 seconds.
Hence the methodof using MONA is clearly not appropriate for desk-top computers.Even access to larger computing power does notsolve the problem.
We processed the same queryon one processor (AMD Opteron 146, 2GHz, 4GBRam) of the cluster computer mentioned above.There it took 1 minute and 30 seconds.
About thesame query answer time was required for a second,more complex query that asked for two different NXnodes and a third SIMPX node.
These query answertimes are still too long, because we queried onlyabout one fortieth of the whole treebank.
Since eachtree is queried separately, we can expect a linear timeincrease in the query time in the number of trees.
Inother words, evaluating the query on the whole tree-bank would probably take about 1 hour.
And thaton a computer with such massive computing power.TIGERSearch and fsq are 720 times faster, and theyrun on desktop computers.6 ConclusionsDespite the many reported successful applications ofMONA in other areas, we have to state that MONAis clearly not a choice for querying linguistic tree-banks.
Firstly, we cannot use MONA to query for to-kens (or words).
Secondly, the compilation of a tree-bank into a set of automata is extremely difficult andresources consuming, if not impossible.
And finally,practical query answer times are way too long.
Ap-parently, reloading precompiled automata represent-ing large trees takes too much time, because the au-tomata representing these large trees are themselveshuge.We note that this is unfortunately not the first neg-ative experience of trying to apply MONA to com-putational linguistics tasks.
Morawietz and Cor-nell (1999), who try to use MONA to compile logi-cal formalisations of GB-theory, also report that au-tomata get too large to work with.561The general problem behind these two unsuccess-ful applications of MONA to problems in computa-tional linguistics seems to be that MONA does notallow users to define their own signatures.
Hencelinguistic labels have to be coded in an indirect fash-ion.
Though this coding works in theory, the result-ing automata can become huge.
The reason for thisexplosion in automata size, though, remains myste-rious.The negative experience we made with MONAdoes on the other hand not mean that the whole en-terprise of using tree automata for querying tree-banks is deemed to fail.
It seems that it is ratherthis particular deficit of MONA of providing no di-rect way to cope with labelled trees that causes thenegative result.
It could therefore well be worth try-ing to implement tree automata for labelled trees anduse these for treebank querying.ReferencesAnne Abeille?
and Lionel Cle?ment.
1999.
A tagged ref-erence corpus for French.
In Proceedings of EACL-LINC.Sabine Brants, Stefanie Dipper, Silvia Hansen, WolfgangLezius, and George Smith.
2002.
The TIGER Tree-bank.
In Kiril Simov, editor, Proceedings of the Work-shop on Treebanks and Linguistic Theories, Sozopol.Thorsten Brants.
1997.
The NEGRA export format.CLAUS Report 98, Universita?t des Saarlandes, Com-puterlinguistik, Saarbru?cken, Germany.Bruno Courcelle.
1990.
Graph rewriting: An alge-braic and logic approach.
In Jan van Leeuwen, edi-tor, Handbook of Theoretical Computer Science, vol-ume B, chapter 5, pages 193?242.
Elsevier.Ferenc Ge?cseg and Magnus Steinby.
1997.
Tree lan-guages.
In Grzegorz Rozenberg and Arto Salomaa,editors, Handbook of Formal Languages, Vol 3: Be-yond Words, pages 1?68.
Springer-Verlag.Erhard Hinrichs, Julia Bartels, Yasuhiro Kawata, ValiaKordoni, and Heike Telljohann.
2000.
The VERBMO-BIL treebanks.
In Proceedings of KONVENS 2000.Tilman Ho?hle.
1985.
Der Begriff ?Mittelfeld?.
An-merkungen u?ber die Theorie der topologischen Felder.In A. Scho?ne, editor, Kontroversen, alte und neue.Akten des 7.
Internationalen Germanistenkongresses,pages 329?340.Stephan Kepser.
2003.
Finite Structure Query: A toolfor querying syntactically annotated corpora.
In AnnCopestake and Jan Hajic?, editors, Proceedings EACL2003, pages 179?186.Stephan Kepser.
2004.
Querying linguistic treebankswith monadic second-order logic in linear time.
Jour-nal of Logic, Language, and Information, 13:457?470.Nils Klarlund.
1998.
Mona & Fido: The logic-automaton connection in practice.
In Computer Sci-ence Logic, CSL ?97, LNCS 1414, pages 311?326.Springer.Esther Ko?nig and Wolfgang Lezius.
2000.
A descrip-tion language for syntactically annotated corpora.
InProceedings of the COLING Conference, pages 1056?1060.Mitchell Marcus, Beatrice Santorini, and Mary AnnMarcinkiewicz.
1993.
Building a large annotated cor-pus of English: The Penn Treebank.
ComputationalLinguistics, 19(2):313?330.Frank Morawietz and Tom Cornell.
1999.
The MSOlogic-automaton connection in linguistics.
In AlainLecomte, Franc?ois Lamarche, and Guy Perrier, ed-itors, Logical Aspects of Computational Linguistics,LNCS 1582, pages 112?131.
Springer.Beth Randall.
2000.
CorpusSearch user?s manual.
Tech-nical report, University of Pennsylvania.
http://www.ling.upenn.edu/mideng/ppcme2dir/.Douglas Rohde.
2001.
Tgrep2.
Technical report,Carnegie Mellon University.Anne Schiller, Simone Teufel, and Christine Thielen.1995.
Guidelines fu?r das Tagging deutscher Textcor-pora mit STTS.
Manuscript, Universities of Stuttgartand Tu?bingen.Rosmary Stegmann, Heike Telljohann, and Erhard Hin-richs.
2000.
Stylebook for the German treebank inVERBMOBIL.
Technical Report 239, SfS, Universityof Tu?bingen.Sean Wallis and Gerald Nelson.
2000.
Exploiting fuzzytree fragment queries in the investigation of parsed cor-pora.
Literary and Linguistic Computing, 15(3):339?361.562
