Proceedings of the Human Language Technology Conference of the NAACL, Companion Volume, pages 284?287,New York City, June 2006. c?2006 Association for Computational LinguisticsSconeEdit: A Text-guided Domain Knowledge EditorAlicia Tribble Benjamin Lambert Scott E. FahlmanLanguage TechnologiesInstituteLanguage TechnologiesInstituteLanguage TechnologiesInstituteCarnegie Mellon University Carnegie Mellon University Carnegie Mellon UniversityPittsburgh, PA 15213 Pittsburgh, PA 15213 Pittsburgh, PA 15213atribble@cs.cmu.edu benlambert@cmu.edu sef@cs.cmu.eduAbstractWe will demonstrate SconeEdit, a new toolfor exploring and editing knowledge bases(KBs) that leverages interaction with do-main texts.
The tool provides an annotatedview of user-selected text, allowing a userto see which concepts from the text are inthe KB and to edit the KB directly fromthis Text View.
Alongside the Text View,SconeEdit provides a navigable KB Viewof the knowledge base, centered on con-cepts that appear in the text.
This unifiedtool gives the user a text-driven way to ex-plore a KB and add new knowledge.1 IntroductionWe will demonstrate SconeEdit, a new tool forexploring and editing knowledge bases that inte-grates domain text.
SconeEdit expands on thefunction of traditional ontology editors by showingthe user an interactive text window (Text View)where the user can view and edit concepts from theknowledge base as highlighted terms in their origi-nal context.
The Text View augments a traditionalKB View, allowing the user to leverage existingknowledge as well as domain-focused text exam-ples to perform a variety of knowledge-basedtasks.Consider the task of assessing the quality of aknowledge base as a resource for a new AI or natu-ral language system.
In SconeEdit, a user can viewthe knowledge base alongside a text documentfrom the target domain.
SconeEdit searches forinstances of KB concepts in the text and highlightsthem in the Text View.
Already the user can see aconcise visual sample of the coverage of the KBfor this domain.Now the user can work with the KB View andText View together to navigate the ontology.Double-clicking on a highlighted concept like?keyboard?
opens a detailed view of that conceptin the KB View.
Inside the KB View, the user canclick on the superclass of the keyboard concept tosee the concept computer input device and all of itschildren.
Next, SconeEdit selectively highlights allinstances of computer input device in the text.
Thesystem uses type inference from the KB to high-light ?mouse?, ?touchpad?, and ?wireless key-board.?
If ?scanner?
appears in the text but isn?tincluded in the knowledge base, the user can spotthe omission quickly.Figure 1.
The SconeEdit Interface284In this way, domain text is used as a measuringtool for coverage of domain knowledge.
Our dem-onstration allows the user to try SconeEdit and toexplore the interaction of text and knowledge.2 The Knowledge BaseSconeEdit is a software client to the Scone Knowl-edge Base System, or simply ?Scone?
(Fahlman,2005).
Scone is an efficient, open-source knowl-edge base (KB) system being developed in theLanguage Technologies Institute of Carnegie Mel-lon University.
Scone is intended to be a practicalKB system that can be used as a component in awide range of AI and natural language softwareapplications.
One of the goals in developing Sconeis to make it easy to use, especially when addingnew knowledge.The SconeEdit interface makes Scone more us-able in several ways: the Text View display givesthe user a convenient and intuitive starting pointfor exploring the knowledge base.
SconeEdit alsoprovides an easy way of adding knowledge to theKB without learning the formal input language forScone.
This demonstration focuses on the effec-tiveness of SconeEdit and Scone together, but thedesign principles of SconeEdit are applicable toknowledge bases written in other formalisms.Figure 1 shows the SconeEdit window with adocument and KB loaded.
The left side of the in-terface contains the Text View, and the KB Viewis on the right.
Each of these views is described indetail below.3 Architecture3.1 Text ViewIn a traditional ontology browser, the user startslooking for concepts of interest by typing wordsand phrases into a search field.
This is the modelfor several existing tools, including the VisDicviewer for WordNet (Hor?k and Smr?, 2004), theINOH ontology viewer (INOH, 2004), and theGene Ontology viewer presented by Koike andTakagi (2004), among others.SconeEdit improves on this browsing paradigmby giving a user who is unfamiliar with the knowl-edge base an easy way to start exploring.
Ratherthan generating a series of guesses at what may beFigure 2.
Excerpt from Text View, with Searchand Text Tabscovered by the KB, the user can load natural lan-guage text into SconeEdit from a file or the systemclipboard.
We take an article from XinhuanetNews Service (Xinhuanet, 2006) as an example.Figure 2 shows an excerpt of this text after it hasbeen loaded.When the text file is loaded, it appears in theText Tab of the Text View pane.
SconeEdit high-lights all strings that it can identify as conceptsfrom the knowledge base.
In this example, ?Wash-ington?
is correctly identified as the city, not thestate.
In many cases the concept may be ambigu-ous from the string alone.
SconeEdit currentlyuses dynamic programming to highlight the long-est-matching concept names it can find (see Sec-tion 5).
More sophisticated disambiguation is apriority for our future work.The result of highlighting is a concise visualrepresentation of what is ?known?
about that text.The Text View helps a user find relevant knowl-edge quickly, even in a large general-domain KB.Clicking on any highlighted term in the Text Viewbrings up a hierarchical representation of that con-cept in the KB View.3.2 KB ViewThe KB View contains two tabs: a Graph Tab anda List Tab.
The Graph Tab displays an excerptfrom the knowledge base as a network of linkedconcepts with one focus concept in the center.When the user clicks on a highlighted concept inthe Text View, a graph focused on that conceptappears in the Graph Tab.
Continuing with ourXinhuanet example, Figure 3 shows the Graph Tabafter a user has clicked on ?Washington?
in thetext.
The Graph View now displays concepts thatare closely related to Washington-Dc in the knowl-edge base.285Figure 3.
KB View, Graph Tab of Washington-DcFigure 4.
KB View, List Tab of CityClicking on any of these related concepts in theGraph Tab moves the focus of the graph to thatconcept.The List Tab shows an alternative view of thesame focus concept.
It displays KB information asa set of property lists.
As in the Graph Tab, theuser can double-click on any concept in the ListTab to bring that concept into focus.
When thefocus concept is densely connected to other con-cepts in the KB, the List Tab can be easier to inter-pret than the Graph Tab.
In general, research hasshown that preference for the list style or graphstyle is personal and varies from user to user(Tribble and Ros?, 2006).
Figure 4 shows the ListTab, focused on the concept City.4 Adding KnowledgeBrowsing the knowledge base in this way gives theuser a detailed, domain-targeted view of its con-tents.
A natural extension of this paradigm is toallow the user to edit the KB while browsing.
Forexample, a user may encounter a concept in theFigure 5.
Adding a concept synonymtext that is not present in the knowledge base.SconeEdit allows the user to simply click on aword in the text to create a new concept in the KB(see Figure 5).
To specify where the new conceptbelongs, the user navigates to the appropriate loca-tion in the KB View (List Tab or Graph Tab).The user can also modify an existing KB con-cept by adding English synonyms.
For example,the word ?United States?
may be highlighted in atext example, while ?U.S.?
is not.
To add a syno-nym for the ?United States?
concept, the usernavigates to this concept in the KB View, and thenclicks on the text ?U.S.?.
A menu offers the choiceof adding a synonym to the existing focus concept.Figure 5 illustrates this process.5 Identifying KB Concepts in TextElements in a Scone knowledge base representspecific concepts, rather than words or wordsenses.
Each concept is linked with a list of Eng-lish names (words or phrases).
This associationbetween Scone elements and English names ismany-to-many.To map a sentence to the set of concepts thatappear there, a dynamic-programming alignment isperformed using the English names in the KB as adictionary.
SconeEdit searches for an alignmentthat covers as much of the input text as possible.The result of aligning an input string with conceptsis a set of triples, each consisting of a concept, anoffset, and a length.
These triples are used directlyby the Text Tab to highlight substrings and associ-ate them with KB concepts.Consider the sentence ?Washington, D.C. is acity.?
Table 1 shows some example Scone con-cepts and their English names.
Given a knowledge286Concept Name English NamesWashington-State ?Washington?, ?Washing-ton State?,Washington-Dc ?Washington?, ?Washing-ton, D.C.?City ?city?Table 1.
Example concepts and their EnglishName listsbase with these concepts, SconeEdit returns thealignment: (concept: Washington-DC, offset: 1,length: 16) (concept: City, offset: 23, length: 4).6 Planned FeaturesA single node in the KB could have hundreds orthousands of outgoing links.
For readability, thebrowser must select a subset of these links to dis-play to the user.
We plan to leverage Scone?s rea-soning ability, along with SconeEdit?s document-driven design, to select which nodes are likely tobe relevant to the user in the context of the loadeddocument(s).
For example, a user who views sub-classes of disease in a medical ontology may bepresented with thousands of disease types.
If thecurrent document loaded into SconeEdit is adocument about food, Scone may be able to prunethe subclasses it lists to only food-borne illnesses.Another feature we hope to add is better integra-tion with an entire corpus.
The current system al-lows the user to work with individual documents.This could be extended to allow a user to navigateto a particular concept in the knowledge base andretrieve all documents in a corpus containing thatconcept (in its various forms).
These documentscould then be used to generate more KB conceptsof interest.7 Related WorkTo the best of our knowledge, existing ontologyand KB editors and viewers do not specificallyfocus on editing and viewing an ontology or KB inthe context of natural language text.
Other ontol-ogy editors such as Prot?g?
(Gennari, 2002) andOntoEdit (Sure, 2002) offer many features for gen-erating complex ontologies, but do not provide therich interaction with domain text that is the focusof SconeEdit.
The CNet Big Picture (CNet NewsOnline, 2000) is one example of a system that doeslink ontology knowledge to text, but the conceptsin the ontology are limited to a small fixed set.AcknowledgementsThis material is based upon work supported by theDefense Advanced Research Projects Agency(DARPA) under Contract No.
NBCHD030010.The authors would like to thank Vasco Pedro, EricNyberg, and Tim Isganitis for their contributions toSconeEdit.ReferencesCNet News Online.
2000.
The Big Picture,http://news.com.com/The+Big+Picture/2030-12_3-5843390.html.Scott E. Fahlman.
2006.
Scone User's Manual,http://www.cs.cmu.edu/~sef/scone/.J.
Gennari, M. A. Musen, R. W. Fergerson, W. E.Grosso, M. Crubezy, H. Eriksson, N. F. Noy, S. W.Tu.
2002.
The Evolution of Prot?g?
: An Environmentfor Knowledge-Based Systems Development.
Inter-national Journal of Human-Computer Interaction,58(1), pp.
89?123.Ale?
Hor?k and Pavel Smr?.
2004.
VisDic -- WordNetBrowsing and Editing Tool.
Proceedings of GWC2004, pp.
136?141.INOH, 2004.
INOH Ontology Viewer Website.http://www.inoh.org:8083/ontology-viewer/.Asako Koike and Toshishisa Takagi, 2004.Gene/protein/family name recognition in biomedicalliterature.
In Proceedings of  BioLINK 2004: LinkingBiological Literature, Ontologies, and Databases,pp.
9-16.Alicia Tribble and Carolyn Ros?.
2006.
Usable Brows-ers for Ontological Knowledge Acquisition.
To ap-pear in Proceedings of CHI-2006.
Montr?al, Canada.April 22-27, 2006.Xinhuanet.
2006.
US accused of blocking approval ofnew UN human rights body.http://news.xinhuanet.com/english/2006-03/02/content_4247159.htm.Y.
Sure, M. Erdmann, J. Angele, S. Staab, R. Studerand D. Wenke.
OntoEdit: Collaborative OntologyEngineering for the Semantic Web.
In Proceedings ofthe first International Semantic Web Conference2002 (ISWC 2002).287
