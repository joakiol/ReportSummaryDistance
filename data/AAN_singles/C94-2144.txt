"YD/2---A Type  Descr ip t ion  Languagefor Const ra int -Based GrammarsHans-Ulrich Krieger, Ulrich Scldifer{krieger,schaefer}@dfki.uni-sb.de(\]CITIIIaAt Research (Je, d;cr tbr Artificial lnte, lligcnc(; (I)FI(I)Stuhlsm;zenhmtsweg 3, 1)-(;(;\] 23 S~m'l)rii(:kcn, Gc~ llla,llyAbstract 2 MotivationThis paper presents "FD~g, a typed feal, ure-bascd rein'c-sent, el;ion language att(l ild'erence system.
Type defini-tions in TDL consis~ of type and feature constraints overthe Imolean cmme(Mves.
TD?
supports open- and closed-worM reasoning over types and allows for par|;itions andiueompal;i\[)le I.ypes.
Working with l)artially as well aswith lhlly expanded types is possible.
E\[lieienl.
reasoningin "\]'1)12 is accomplished through Sl)Ccialized mtMules.Tot)teal Pat)er.
7t~pie Area: sofl,w;u'e fin" NI,I', gram--mar \['t)i'midism for Lyl)ed \['e~H.Hi't: st,rut:lures.1 IntroductionOver l;he last lb.w years, eonsl;raint-based grammartbrmalisms have become the predominmtt t)ar;tdigmin natural  language processing ~uld (:oulptltal;iollallinguistics.
Their success stems from tim feet thatI ;hey e~LIl be  seen  as  ;t tt ioltoLoIt i ( : ,  highqe.vel re l ) resew-I;ation language for linguistic knowledge which can begiven tt l)reeise m~d;hetn~d:ical semantics.
The mMnidea of representii~g as much linguistic knowledge aspossit)h~ through a mfique dater type <died fi'atu*'estruetur,, Cdlows the inl,egl:,ttion of differenl; des(:l;i 1)lion levels withoul, taking care of interface probh!lnS.While the tirst N)l)roaehes relied (m almotate(t I)hrasesLIJll(:l;lll?e FIl les (e .g .
,  PAr\['\[{, ?
\ [ l ) ,  1110(1(21711 fo rmal i smstry l,o specify grmnmal, ical knowledge as well as lexi-con entries entirely through feature, sLruetures, h, or-der to au:hieve t, his goal, one must enrich the exl)res-sive power of the lirst imilication-based formMismswith different forms of disjunctive deseril)tions, l,at-er, oLher operations came int,o play, e.g., (classical)negation.
Ol,her proposals consider the integration offuncl;ionM/relatiomd del)endencies into t,he \[brmMismwhich make them in gelleral 'l'uriug-c.omph2te (( .g.,AI, I'; \[4\]).
However l,he mosl; important ext(msion 1;o\['ormalisms eonsisl;s of tire incorporation of types, lbl:instance in modern systems like TI"S \[15\], CUI e \[tl\],or "FD?
\[7\].
Types are ordered hierm:ehically its it isknown front ol)jeet-oriented t)rogranmdng languages.This leads l,o multiple inheritlmee in the descriptionof linguistic entities.
Finally, reeursive types are nee-.essary 1;o describe at lelust phrase-structure ccursionwhich is inherent in all gramnta.r ibrmalisms whichare nol; l)rovidcd with a context-free loaekbone.ht the next section, we argue for the need and rel-.evmtce of using types in CL and Nl,l ).
AO;er that, wegive an overview of 7"1)?
and il,s specialized inl~:rencemodules.
EspeeiMly, we have it closer look ()it thenovel features of J'D.~ and ltresenl, the techniques weh~tve mployed in iulltlein(mLing "~1)?,Mode.rn tylmd mdtieaJ,ion-.ba,sed granunax foruudimnsdiffer from etMy unt, yped systcnis in that they high--light tile notion of  a fi!ature type.
Tyl)es C~L\[1 t)e 3,1'-ranged hierarchically, where a subtype inherits mono-tonicMly all the inlbrmation frolu its supertypes andunification plays l;he role of the primary in%rm~ttion-coml)imng operation.
A tN)e definition elm be seen as;m M)breviation for ~ (:Oml~lex exl)ressi(m, (:(msisl.ingof I.ype eonstraiuts (eoncerning the sub-/sup(~rl.yp(:rehLtionship) ;rod feature constraints (stat,ing the :~1'propriate M,i;ribut.es and t;he, ir values) over the c(mueet.ives A, V, and -,.
Types serve its abbrcvi~tfionsIbr lexicon e, ntries, 11) rule s(:helu;d.;'L, and mfiv(~rsa.Iits well as kmguage-specilic principles as is l'amilinrDoln I lPSG.
Ih~sides using Lyt)cs as an abl)revia|.ion~\[tl lt|(!~ltS ~tS temlthd,es rare, I,}lere are  o|,hel;  ~t(lv~ttlliagesas well which cmmot be a(:(;Oml)lished by te.nl)la.i.es:?
STRU(JTUIt.
ING KNOWI,b;D(',I!
;Types together with the l)ossibility to orderthen, hier;u'ehieally allow for a luodul;u" aHdele~m way to r,~l)rcs('.nl, lingulsLic kuowle(lge ndequ~d,ely.
Moreow:r, generalizntions can be put,a.t the apl)l'Ol~ri;d,e h:vels of re.13resenl;atioti.?
I ,~FFI('IENT I'I{,OCI,'SSIN(ICertain I,yl)e eonsLrainl,s (;all I)e (:ompih~d iltl,o el:ficient represenl,al;ious like.
bit veeLors \[I\], wherea (l\[,l/ (grcgd;esL h)wer bOUl ld ) ,  L \[Jl~, (leaM; Ul)p(~rI),mnd), or a, ~ (Lyl,e s,d)SUml)liot 0 eOmlml;m, iot~reduces to low-h'vel bit Inanilmlatio,i ; see Seel,iou3.2.
Moreover, types release mltyt)ed uniliei~tio.fi'om eXlmnSive COmlmI.M;iou through lhe i)ossibility to declare them incoml)al;ilde, lu iuhligi(m,working with t.yf)e ua.mes only or with partiMlyexpanded l;ypes minimizes the costs of copyingsl, ruet;ures during processing.
'Phis can only bea.ccomplished i\[' the sysLent m~ukes at Uleeh;LILiSlnfor type exlmnsion available; see Se(:l,ion ;L4.?
TYPE  ( J I IECKIN(I'Fype deliniti(ms allow n gramm~riml to (leelar(~which attributes are al)l)rOl)riate lkq' a given l.yl)eand which types m:e a.l)prol)riate for a given at..tribute, therelb.
'e disallowiug one to write il~(:(msistent, feat, m'e structures.
Again, type expansiollis necess;try to determine the glol)M etmsist,eneyof it given description.?
RECIJltSIVI,\] TY I 'ESl{ecursive l,ypes give it glmlmnar writ.or the op-porl.unity to formulnl.e cerl.Mn fimel.ion.s or re--lations as recm'sivc type specific.;ttions.
\Yorking in the type deduel,io|l i)~-tra(ligm el\]i'orecs a,grammar writer 1,o rel)la(:e the eonl;exl;..fl'ee back.89,3bone through recursive types.
Here, parameter-ized delayed type expansion is the ticket to theworld of controlled linguistic deduction \[13\]; seeSection 3.4.3 TD?TDZ: is a unificatiol,-based grammar development en-vironment and run time system snpporting HPSG-like grammars.
Work on TD?
has started within theDISCO project of the DFKI \[14\] (this volume).
TheDISCO grammar currently consists of approx.
900type specifications written in TD?
and is the largestHPSG grammar for German \[9\].
The core engine ofDISCO consists of T/I?
and the feature constraintsolver //D/A~ \[3\].
ND/~ itself is a powerful untypedunification machinery which allows the use of dis-tributed disjunctions, general negation, and fllnction-al dependencies.
The modules communicate throughan interface, and this connection mirrors exactly theway an abstract typed unification algorithm works:two typed feature structures can only be unified ifthe attached types are definitely compatible.
Thisis accomplished by the unifier in that ~ handlesover two typed feature structures to TD?
which givesback a simplified form (plus additional information;see Fig.
1).
The motivation for separating type andfeatnre constraints and processing them in special-ized modules (which again might consist of special-ized components as is the case in 73)?)
is twofold: (i)this strategy reduces the complexity of tile whole sys-tem, thus making the architecture clear, and (ii) leadsto a higher performance of the whole system becauseevery module is designed to cover only a specializedtask.3.1 TD?
Language7"D?
supports type definitions consisting of type con-straints and feature constraints over the operatorsA, V, -1, and ?
(xor).
The operators are general-ized in that they can connect feature descriptions,coreference tags (logical variables) as well as types.77)?
distinguishes between arm types (open-world se-mantics), sort types (closed-world semantics), built-intypes (being made available by the underlying COM-MON LISP system), and atoms.
Recursive types areexplicitly allowed and handled by a sophisticated lazytype expansion mechanism.In asking for the greatest lower bound of two awntypes a and b which share no common subtype, TD?always returns a A b (open-world reasoning), and not2_.
The reason for assuming this is manifold: (i) par-tiality of our linguistic knowledge, (ii) approach isin harmony with terminological (KL-ONE-like) lan-guages which share a similar semantics, (iii) impor-tant during incremental grammar/lexicon construe-tion (which has been shown usefid in our project),and (iv) one must not write superfluous type defini-tions to guarantee successful type unifications duringprocessing.The opposite case holds for the C, LB of sort types(closed-world approach).
Furthermore, sort types dif-fer in another point from avm types in that they arcnot fllrther structured, as is the case for atoIns.
More-over, 779?
oilers the possibility to declare partitions,a feature heavily used in IfPSG.
In addition, one candeclare sets of types as incompatible, meaning thatthe conjunction of them yields ?, so that specific avmtypes can be closed.7"D?
allows a grammarian to define and use param-eterized templates (macros).
There exists a specialinstance definition facility to ease the writing of lex-icon entries which differ from nor,hal types in thatthey are not entered into the type hierarchy.
Inputgiven to TD?
is parsed by a Zebu-generated LALR(1)parser \[8\] to allow for an intuitive, hi9h-level inputsyntax and to abstract fi'om uninteresting details im-posed by the unifier and the underlying Lisp systenr.The kernel of TD?-.
(and of most other monoton-ic systems) can be given a set-theoretical semanticsMong the lines of \[12\].
It is easy to translate TD?.statements into denotation-preserving expressions ofSmolka's feature logic, thus viewing 7"D?
only as syn-tactic sugar for a restricted (decidable) subset of first-order logic.
Take for instance the following featuredescription O written as an attribute-vMue matrix:np\[ agr'eement \]?= A~\ [ \ ]  NUM sOPERS 3rdSUBJ \ [ \ ]It is not hard to rewrite this two-dimensionM de-scription to a flat first-order formula, where at-tributes/features (e.g., .~GR) are interpreted as binaryrelations and types (e.g., up) as unary predicates:3~.
,~p(?)
A ,Ga(e,, ~) A ,,a,?~em~,,t(~) ARUM(x, sg) A PERS(x, o?7"(1) A SUBJ(?, x)The corresponding VD?
type definition of ?
looks asfollows (actually &; is used on the keyboard insteadof A, \[instead of V,~instead of ~):?
:= np A \[AGR #x A agreement A \[NUll st, PERS at'd\],SUBJ #~\].3.2 Type  H ierarchyThe type hierarchy is either called directly by thecontrol machinery of TD?
during the detinition of atype (type classification) or indirectly via the simpli-tier both at definition and at run time (type unifica-tion).3.2.1 Encod ing  MethodThe implementation f the type hierarchy is basedon A'/t-Kaci's encoding technique for partial orders\[1\].
Every type t is assigned a code 7(t) (representedvia a bit vector) such that 7(0 reflects tile reflexivetransitive closure of the subsumption relation withrespect to t. Decoding a code c is realized eitherby a look-up OFF 3t .
7-1(c) = t) or by computingthe "maximal restriction" of the set of types whosecodes are less than c. l)eper, ding on the encodingmethod, the hierarchy occupies O(n logn) (compactencoding) resp.
O(n 2) (transitive closure encoding)bits.
ltere, GLB/LUB operations directly correspondto bit-or/and instructions.
GI,B, I, UB and ~ com-putations 1-1ave the nice property that they can becarried out in this tYamework in O(n), where n is the894~\] , \[...\] .
.
.
.
.
.
.
.
.
.
.
_>Query{~ 1, \[...1up/ .
Resu l t~\]\]A\[~<bl,N> ~ pe h iera, rchy -<~--  ( ,tAb) TZ)?
<{~, ,, A ~, _q ,  {yo~, ~o, ~ai~)>Figure 1: ht ter fa ( 'e  between "FDE and ll/)'&& DepetMiug on the type hierarchy and the type of  ~ and \[~,TD?.
either returns c (c is del initely the ( ;LB of  a and b) or a A b (open-world reasoning) resl).
~L (clo.se<l-worldreasoning 9 i f  there doesn't  exist a single type which is ecplal to the GLB of a and b.
In addition, 7"DL: determitwswhether tlDi32: must  carry out lbature term unification (yes) or not (no), i.e., the return type contains all theinformation one needs to work on prol>erly ( fa i l  signals a global unification lhilure).number of (,ypes.
1Aitq(aci 's  nmthod has been extended in 7'D?
tocover the ol)en-world nature of avm types in thai; po-tential (\]I,I~/LUB cmMidates (calculated front theircodes) must be verified.
Why so'.
e Take the.
lbllowingex~mrple to see why this is ne.cessary:a: := J/ Azx' := y' A z' A \ [ .
1\]l)uring processing, one can definitely substitute y A zthrough % I)ut rewriting !I' A z' to a:' is not correct,because x' difl'ers fi'om f A z ' -  a/ is more speciiic asa coltseqtlellCX: of the l~e;~ture consl, r~t\[llt \[tt 1\].
So Wemake ;~ distinction between the "internal" gre;~testlower bound GI,B4, concerning only the type subsumptiot~ relation i)y using Ait-Kaci's method alone(which is however used for sort types) and the :'ex-t(,rmq" one, GIA}c , which takes the subsumption re-lation over fi;ature structures into &(:COtlllt.With Gl,l)-< and GLIJc in mind, we (:m~_ define, ageneralized (~,B operation infbrmally by the follow-ing table.
This GLI} operation, is actually used duringtype mfitication (jr(.'
:: feature constraint):-di~g- ,Tis,,~-.~oT!
,~fft,~i,u-F_ f,;7-\[_f,'~ _ lLs , ' -~.
\[ ?
l - Is-.-- ; .
j?lJh('A'ca,Jmj < > Gl.
l lE( .vmi,  a,,m~) -..vm,:~(IUIIL 1 #,:--~?
(ll~?lt I ~ (llHII.
2I.
.L ~-->.
C\[,I\]~ (amnl,  arm2) -- J_, via anexplicit incomp~ttibility declara~tionaural A aline!, otherwise (open world)~..  ,,,,,,,,~ <=.
exp~md(,,,,,,,,,.~) ni~:~,, ?
z_L, otherwisesor't.~ ?-=> ( \ ] l , I}5(sor t t ,  .sorte) = ~orta3.
sort  t 4;:._~ sort1 == sort2.L, otherwise (closed worM)at, ora l  ,~ ~--'.~ type-of(a/oral ,~) ~ sort.& i,,1.
where sort~,l is ~ built-inJ., otherwise5.
.
atoHtt #,--~ o{oHt I =: (tlont 2?, otherwiseT 4~> f,:l VI fc~ ?
_l_ 6. .
_L, otherwiseThe encoding algorithm is also exl,m,ded towardsthe rcdcJiuition of  types and the use of undcJ lmdtypes, an essentiM lmrt of at, im:remental gram-mar/lexicon dew.qopmetd, systenl, ll.edetining a I,ypemeans not oldy to m~ke changes local to this type.h,stead, (.,lie }I:4S to redefil,e all depcndcul.s of thistype -a l l  subtypes in case of a conjunctive l;ype defitdtion and all disjunction alternatives for at disjuuc-tive type speeilication plus, in both cases, all typeswhich use these types in their de\[inition.
The depen-dent types o\[ a l.ype t can be characterized gr~q)h-theoretically via l,he strongly c(mnected componentof t with respect o the depe,Mency relation.3.2 .2  D(moln I )os ing  Type  Def in i t ionsConjm~ctivc, e.g., x := J/A z ~tnd disju,u;tivc t!lp('.specificalio)~s, e.g., a/ ::-= f V z / are entered difl'er-ently into the hier~u'chy: :c inherits from its s,,per-l;ypes 9 and z, whereas x' delines itse|f through itsIActuMly, one can choose, in 7"DE I)ctwccn the twoencoding I:cchniques and between bit vectors and bignumsill COMMON \[ASP for the representatiou f the codes, h,our I,l.ql' implelnentaLion: operatimm on bignulns are.
amagtfil;ude faster than on bi~ vectors.895\ Jz luAvAwlyFigure 2: The intermediate types luAH and NAvAwlare introduced by TD?
during the type delinitions,= := uA', ,  A \[a 0\] and Y := wA v A ,*A  \[a 1\].alternatives !/ and z'.
This distinction is represent-ed through tile use of different kinds of edges in thetype graph (bold edges denote disjunction elements;see Fig.
3).
But; it is worth noting that both of tllemexpress subsumption (x ~ y and x' >-_ y') and thatthe GLB/LUB operations must work properly over"conjunctive" as well as "disjunctive" subsumptionlinks.TD?
decomposes complex definitions consisting ofA, V, and ~ by introducing intermediate types, sothat the resulting expression is either a pure covjunc-lion or" a disjunction of type symbols.
Intermediatetype names are enclosed in vertical bars (ef.
the in-termediate types \[u A v I and lu A v A w{ in Fig.
2).Tile same technique is applied when using ?
(seeFig.
3).
(b will be decomposed into A, V and ~, plusadditional intermediates.
For each negated tyt)e ~t,7"1)?
introduces a new intermediate type symbol I-'tlhaving the definition ~t and dechu'es it incompatiblewith t (see Section 3.2.a).
I,~ addition, if t is notalready present, T/)?
will add t as a new type to thehierarchy (see types \[~b\[ allcl \]-el in Fig.
3).Let's consider the example a := b ?
c. The de-composition can be stated informally by the follow-ing rewrite steps (assuming that the user tu~s chosenCNF):a := bOc.
:= (~ A -~(-) v ( -~ A c).
:= (b v -~b) A (b v c) A ( -~ V ~)  A (-,e V e),, :=  (~ v e) A (~ v ~).
:=  I~vel A I~bWel3.2.3 Incompatible Types and BottomPropagationIncompatible lypes lead to the introduction of spe-cialized bottom symbols (see Fig.
3 and 4) which how-ever are identified in the underlying logic in that theydenote the empty set.
These bottom symbols must bepropagated ownwards by a mechanism called bottompropagation which takes place at definition time (seeFig.
4).
Note that it is important o take not onlysubtypes of incompatible types into account but alsodisjunction elements as the following example shows:T-k(b, ~b\] J-{e,~c}Figure 3: Decomposing a := b?c, such that a inheritsfrom tile intermediates IbVc\[ and b/ ,v~cl ..k -- a A b. }
_~C+ a A bi := J- and a A b~ = J_b := bl V b.
).One might expect; that incompatibility statementstogether with feature term unification o longer leadto a monotonic, set-theoretical semantics.
But thisis not the case.
To preserve monotonicity, one mustassume a 2-level interpretation of tgpcd feature struc-tures, where feature constraints and t, ype constraintsmight denote diflb.rent sets of objects and the glob~al interpretation is determined by the intersection ofthe two sets.
Take for instance the type definitionsA := \[a 1\] and 13 := \[b 1\], plus the user declarationJ- = A A B, meaning that A and B are incompatible.Tl,en A A B will simplify to J_ although the corre-sponding feature structures of A and \[t successfullyunify to \[a 1, b 1\], thus the global interpretation is ?.3.3 Symbo l i c  S impl i f ier\[File simplifier operates on arbitrary TD~ expressions.Simplitication is done at definition time and at runtime when typed unification takes place (cf.
\]rig.
1).The main issue of symbolic simplitication is to avoid(i) unnecessary feature constraint unification and (it)queries to the type hierarchy by simply applying"syntactic" reduction rules.
Consider all expressionlike x~ A .
.
.
A xi .
.
.
A "~a: i  , .
.
A xn.
The shnplilier willdetect .k by simply applying reduction rules.The simplification schemata re well known fromthe propositional calculus.
They are hard-wired inthe implementation to speed up computation.
For-really, type simplitication in "FD?
can be character-ized as a term rewriting system.
A set of reductionrnles is applied until a normal form is reached.
Con-fluence and termination is guaranteed by imposinga total generalized lexicwraphic order on terms (seebelow).
In addition, this order has the nice effectsof neglecting eommutativity (which is expensiw.'
andmight lead to termination problems): there is onlyone representative lbr a given formula.
Therefore,memoizatiou is cheap and is employed in TD?
toreuse precomputed results of simplilied expressions(one must not cover all permutations of a formula).Additional reduction rules are applied at run timeusing "semantic" inlbrmation of the type hierarchy(GLB, LUB, and ~).896\[ l -d ',:: b A \[p t'\].< : : :  b A \[p --\].. t ,  - - - +  <, / /~ .
c.l-{a,b>,:} I-{a,b,c}Iqgure d: I Jottom propagat, icm trigg'ered throltg'h the :mbEglWS d aud c of  b, ,so f, ha.L a A d A c as well w; a A ,.
: A cwill simI>lil ~ to _L during processing.a.a .1  Norn ia l  For l l ihi order to reduce ;ui m;1)il;rary l,yl m expression toit s impler expression, Siml)lifi(:al;ion rules inusl; I)e a\])-plied.
So we have to deline wh;Ll, it, lfie0Al.q for &llexpress io l l  t() t)(; "SJ l l l l l le ' .
Ollo, CilJl eil;he, r (:boo,q(; thecoujimcl,ivc or disjuimt, ive nol:maJ tbrm.
The ~tdwtlr-I, a gcs of CN I"/ I )NF are:i UNIQIIF, NES,q<l'yl)e ('.XlJl:ossiolls ill llOl'lll~t\[ \[O1"111 ttl;C IllliqllO,niodulo  (;onunutal;ivil,y.
Sorl,ing l,yllc extJressionsaccording t,o ~ t;oi,;d lexi(Jographic order will leadi;o a i:otM u i l iqueness  o f  l,yl)e ex l l i :ess ions (,<-;ee,Section 3.3.3).?
LINEAI{I'FY'\['ype expressions in liOi'lllal \['orlll ;~i:e l inear.
Arbi l ; r ; t ly  l lesl.ed expl:essi()i is c:itii l ie 1,ra.nsfortxiedinl,o l lal  (JXl)i'OS,'-;iOllS.
Th i s  l\[l;,ty l'(',dlil;(?
i ,he COHIplexil,y of later s inipl i l icat ious,  e,g;., ;d; rl l i l  t ime.?
( J t )M l 'a  I tAB I I ,1TYTh is  l ) roper i ,y  is a colls(xlll(;lt(:(!
of  the  two  oi;hel;proli(;l:tie,<;.
(~'ni(lue aal(I line,u: exl)ressions lnakeit; easy i,o l i i ld O1" 1,() cOUllm,'e (sul))expl:essions.This is itlll)Ort, allt, \[or the liierlloiz~d;ioli x;t:hliiquedescribed in Scctioii 3.3.4.3.3.2 l l ,educt ion  Rnl(~slu order to reach a normal  forui, it; would sufficeto at)l)ly only the s(:ll.etlt;t|;;~ \['or (lf)ll})\[(~ neg~l,ion, dis-I,ribul, ivity, and De Morgan's  h~ws.
Ilowever, in theworst case, t, hcsc I, hr('(; rtlles wouht blow iI t) i,he leugl;hof th(~ normal  lbrm to eXl)OnCnl,ial size ((:omp~u'edwith \],he mtull)er o\[ lit, erals iu the originaJ expres-sion).
To ~o,'oi(l I, his, ()(;her titles ;tr(' use(I intermedi-ately: idempotcnce,  idenl, ity, al)sorpl,ioih etc.
If theycan l)e applied, t, he.y alw~tys re(tilt:t; l,he lengl,h of I,hcexpressions, l'\]specia.lly w\[; run l, ime, llu(; also al; del L\]nil;ion tilne, i\[, is use\['ul to eXldOi\[, infbrmM, i(m \['rt)lnthe, t,ype hi(warchy.
I"url,h(:r siml)lilit:al, ious are l)ossi-hie by ~csking lbr l,h(; ( : l l , l t ,  \ ] , t i l l ,  altd ~.3.3.3 Lc 'x lcogra l )h ic  OrderTo avoid the al)pli('ation of l;ltc cotmnutativi l ,  y rule,wc introduc(~ ;~ to(,al lcxicographic order on tyllc cx-lU'essious.
Together with I)NF/(TNI,', we ol)taiil aunique sorl;ed normal  fornt tbr an arbi t rary l;y\[)e ex-pression.
This  guarant,ees fast (:oinparabilil,y.We define I;he order <NF on 7>ary normal  forms:t~,lpe <N~; neqaled type <NI; conjunction <NI,' dis,-,\]'?trtCti01~ <NI" symbol <NI" striu9 <NF ~lltll21J(~F.
l"ot'the coinl)arisoil of atoms, st;rings, and type names,we use the lexic, ographical  order on str ings ;rod lbrllitlllt)(!l:S \[,h(~ ordering < ou n;ttural  IIIIlH\[)OI'S.l",x;unple: a <NI; b <NI; bb <NI;  -m(t <NI;  c.z A b <NI,'a A - ,a <NI; a V b <NJ" (t V b V c <NI; a V i:1.3.4 Memoiza l f io i tThe memoizat ion t, cchnique describe, d in \[10\] hw-;1)een ad;q)ted in order to reuse precomlml,ed resull;s o\]'l.ype sinq)li\[i<:at,ion.
The lexicogral>hically sorted nor-lnM f?
)rni guar;uitees fast; ~u:cess 1;o lU:CCOlnlml;e(l l,ypesinll)l i l ications.
Memoiza|; ion resull, s are also used bythe recursive simplific;d;ion algorit;hm (;o exploit, pre-conl lmted results for subexln:cssions.Some enqfirical results show I;he usefulness of nteui-oization, The current DISCO grallltlUtr \]'t)r Q',0r-lI|~l,ll co118i81,8 o\]' 88 F) types ;uld 27 tentl~latx:s. AI:ter a lull (,ylm expausion of a toy lexicon of 244 ins(,;tltces/elll, ries, the lnemoiz;tl, ion table txmtaium ap-prox.
3000 cnl;ries (l iterals m'c noL lneuloized).
18000results have been reused ~tt; lc'asl; once (some up t;(~600 ti ines) of whMl 90 % ~re proper sinlplilica(,ions(i.e., the siinpli l icd formulae m:e really shorter th~mt, he unsimpli l ied ones).3.4  Type Ex lmns ion  and  Cont ro lWc noted earlier I, hat  types allow us to refer to c(m,--pIex constra ints  folirougli tim use o\[ symbol nantes.l/,ecolml, rucl, ing |,he consl, r;tinl,s which determi lm aI,ype (rept:eseltted as a \['eature sl,rucl;ure) requires acomplex ol)er;-ttion called Qjpc c,7,Tmusz'om This  isCOml);tr;tble to (Jat'lmnl;er's lolalhj wcll-l~jpcdncss \[5\].3.4 .1  Mot ivat ionIn ~J'l)l~, I,he mot, iwttioll for type expansion is m;m-iibl(l:?
CONSISTI,;NCYAI, definition time, type expansion del,ermiueswhc|;her tim st:l, of |,ype delinil;ion,s (g rammar  andlexicon) is consistent.
At; run time, t, ype exi);m-sion is involved in checking the satis\[i;d)ility ofl;he unilical;ion of two part,\]ally explm(h.'d typedfe;d,ure s(;rucl, lures, e.g., dur ing parsing.897?
ECONOMYFrom the standpoint of efficiency, it; does makesense to work only with small, partially expand-ed structures (if possible) to speed up featureterm unification and to reduce the antount ofcopying.
At the end of processing however, onehas to snake the result/constraints explicit.?
ItECURSIONl{ecursive types are inherently present in modernconstraint-based granmlar theories like IIPSGwhich are not provided with a context-free back-bone.
Moreover, if the formalism does not al-low fnnctionM or relational constraints, one tnustspecify certain f lmctions/relations like appendthrough recurslve types.
Take for instance Ait-Kaci's version of the append type which (:ass bestated in "\]-DE as follows:append := appendo V appendl.aN)endo := \[FRONT < >,BACK #1A list,WHOLE #1\] .append, := \[FRONT < #first.
#~v.stl >,BACK #back A list,WHOLE < #first.
#rest2 >,PATCH append A \[FRONT #restl,BACK #back,WHOLE #rest2\]\].o TYPE DEDUCTIONParsing and generation can be seen in the light oftype deduction as a uniforin process, where ideal-ly only the phonology (for parsing) or the seman-tics (for generation) must be giw'.n.
Type expan-sion together with a sufficiently specified gram-mar then is responsible in both cases for cov-strncting a fully specified feature structure whichis maximal informative and compatible with theinput.
Itowever, \[la\] has shown that type ex-pansion without sophistieated control strategiesis in Illany cases inelficient and moreover doesnot guarantee termination.3.4.2 Cont ro l led  Type.
Ex l ians ionUszkoreit \[la\] introduced a new strategy tbr lin-guistic processing called controlled linguistic deduc-lion.
Ills approaeh permits the.specitication of lit>gnistic performance models without giving up thedeclarative basis of linguistie competence, especial-ly monotonicity and eompleteness.
The ewduation ofboth cm0nnctive and disjunctive constraints can becontrolled in this framework.
For conjunctive con-straints, the one with the highest faihtre probabilityshould be evahtated first.
For disjunctive ones, a suc-cess measure is used instead: the alternative with thehighest success probabil ity is used until a unificationfails, in which case one has to backtrack to the nextbest alternative.7'D?
and /./D~de snpport this strategy in that ev-ery feature structnre can be associated with its sue-cess/faihtre potentiM such that type expansion can besensitive to these settings.
Moreover, one can makeother decisions as well during type expansion:?
only regard structures which art subsumed by agiven type resp.
the opposite case (e.g., expandthe type subcat-list always or never expand thetype daughters)?
take into &ccouttt only structures under cer-tain paths or again assume the oliposite case(e.g., always expand the wtlue nailer pathSYNSEMILOCICAT; in addition, it is possible toemploy path pattenls in the sense of patternmatching)?
set the depth of type expansion for a given typeNote that we are not restricted to apply only oneof these settings-- they can be used in combinationand can be changed dynamically during processing.It does make sense, tbr instance, to expand at cer-tain well-defined points during parsing the (partial)information obtained so far.
If this will not resnlt in afailure, one can throw away (resp.
store) this flflly ex-panded feature structure, working on with the older(and smaller) one.
tlowever, if the information is in-consistent, we luust backtrack to older stages in com-putation.
Going this way which of course assumes/seuristic knowledge (language as well as grammar-specific knowledge) results in faster processing andcopying.
Moreover, the inference ngine lllnst be ableto handle possibly illconsistenl, knowledge, e.g., incast of a chart parser to allow for a third kind ofedge (besides active and passive ones).3.4.3 Reem's iw;  Types ,  hnp lenmntat iona lIssues,  and  Undee idab i l l tyThe set of all recursive types of a given gram-mar/ lexicon can be precompiled by employing thedependency graph of this type system.
This graphis updated every time a new type delhfition is addedto the system.
Thus detecting whether a given typeis recnrsive or not reduces to a simple table look--up.ltowever l, he expansion of a recnrsive type itself is alittle bit harder.
In T'D?, we are using a lazy expan-sion technique whMt only makes those constraintsexplicit which are really new.
To pslt it in anoth-.er way: if no (global or local) control informationis specified to guide a specific expansion, a recnrsivetype will be be expanded under all its paths (localplus inherited paths) until one reaches a point wherethe information is already given in a prcJi:r path.
Wecall such an expanded structure a resolved typeil t?~.a -ture structure.
Of course, there are inlinitely manyresolved feature structures, but this structure is themost general resolved one.Take lbr instance the append example l?om the1)revions section, append is of course a recursivetype because one of its alternatives, viz., append 1uses append under the PATCH attrilmte.
Exl)and-ing append with no additional information sup-plied (especiMly no path leading inside appcndl,e.g., PATCH I PATCH I PATCH) yields a disjunctive featurestructure where both append o and append I are sub-stituted by their definitiorl.
The expansion then stopsif no other informatioll enforce a fisrther expansion.In practice, one has to keep track of the visitedpaths and visited typeil feature structures to avoidunnecessary expansion.
3'0 make expansion more el Lficient, we mark structures whether they are fully ex-panded or not.
A feature strnetnre is then fully ex-panded iff all of its substructures are fully expanded.This simple idea leads to a massive reduction of thesearch space when dealing wills incremental expan-sion (e.g., during parsing).898It is worth noting that the sat|st|ability of fea-ture descript ions admi t t ing  recursive type equa-t ions/det in i t ions is in general undecidable.
Roundsand Manaster- l l ,  aumr \[11\] were the tirst having shownthat  a t(asper- l l .ounds logic enriched with recnrsivetypes allows one to encode it Tur ing machine, lie-cause our logic is much more richer, we imlne(l iatelyget; the sanle result tbr TD?.i towever, one can choose in 7"l)?
between a com-plete expansion a lgor i thm which may not tern i inateand a non-comf)lete on(.'
to guarantee tcrmin~-ttion (see\[2\] and \[5, Ch.
1,5\] for s imi lar prol,osals ).
The latterease heavily depends on the notion of resolvedness(see above).
In both  cases, the depth of the searchspace can be restr icted by specifying a max imal  pathlength.4 Compar i son  w i th  o ther  Sys tems7'D/~ is tmique in that  it iml) lemevts many novel fea-tures not found in other systems like ALE \[4\], I,IFI';\[2\], (7,: TIeS \[15\].
Of course, these systems l,rovideother l~atures whiclt are not present in our formal-|sin.
What  makes 7,D?
unique in COmlTarison to themis the d ist inct ion open vs. closed world, the awdlabil-ity of the full boolean connectives and distr ibuteddis junct ions (via UD/~) ,  as well as an imphmte,ltedlazy type expansion mechaif ism for reeursive types(as compared with LIFE).
AI,E, \[br instance, neitherallows d is |mint | re  nor recurs|re tyl)es and enforcesthe l;ype hierarchy to be a I?,CPO.
IIowever, il; makesrecursion available througl, detinite relations and in-corporates special mechanisms \[br eml)ty categoriesand lexical rules.
TFS  comes up with a closed worhl,the unawdlabi l i ty  of negative in format ion (only im-plicitly present) and only a poor tbrm of dis junctivein format ion but  performs parsing and generat ion en-tirely through type deduct ion (in fact, it was the tirstsystem).
LIF'I'3 comes closest to us but l)rovides a se-mant ics  for types that  is s imilar to TFS.
Moreoverthe lack of negative in format ion and distr ibuted dis-junct ions makes it again comparal) le with TFS.
L IFFas a whole can be seen as an extension of PROI,O(~ (aswas the case for its predecessor LO('HN), where tirst-order terms are rel)laced by .~-terms.
In this sense,I,IFF, is rMmr than onr fomal ism in that  it offers afifll relat ional  calculus.5 Summary  and  Out lookIn this pal)er , we have presented 7,D?, a typed tha-ture for lnMism thg~t integrates a |)owerflfl feature con-strMnt solver and type system.
13oth of t\]tem providethe boolean connectives A, V, and ~, where a con>l)lex exl)ression is decomposed by emphTying interme-diate types.
Moreover, recursive types are supportedas well.
lit 7,D/2, a grammar  writer decides whethertypes liw.
~ in an open or a closed world.
This ef-fe.cts ( \]Lt l  and LIJI\] computat ions .  '
| 'he type systemi~,self consists of several inference components,  eachdesigned to cover etficiently a specific task: (i) a tiltvector encoding o\[ the hierarchy, (ii) a fast symbol icsimpli l ier for complex type expressions, (iii) memoization t;(7 cache preeomI)uted results, and (iv) a so-phist icated type expansion nmchanism.
The systemas described in this paper has been implemented inCOMMON IASP and integrated in tile I ) ISCO environ-men|  \[14\].The next lll;kjor version of 7,D?
will be integrat-ed into a declarat ive sl)ecilication langttage which al-lows l inguists to define eoutrol kuowledge that  can bensed dur ing proe~.'ssing.
In addit ion,  certain forms ofknow|edge, compi lat ion will be made availa/fle in fu-ture versions o\[' TD/~, e.g., the auto lnat ic  detection o\['syntact ic ineonq)atibi l i t ies between tyl)es , so that  atype eOmlmtat ion can subsl, itute an extensive featureterm unif ication.Re  \ [ 'e rences\[1\] l lassan Ai't-Kaci, Robert lloye.r, Pa(a'ick Lincoln, ~-tlldt{oger Nasr.
I*;flieient; implementation of lattice operations.
ACM Transactions ou l'rogrammin 9 Lan-(lUages aud Sgstcms, 11 (1.
):115- 146, January 1989.\[2\] IIassan M'l,-Kaci, Andreas Podelski, and Seth CopenGoldstein.
Ovder-sort, ed R:aLure timory uni\[icaLion.Teclm.
Hcport 32, \])EC Paris l/.esem'ch |, lb., tg.
')a.\[3\] Rolf \]~a(:kofcll and Cln'ist;oph Weyers.
UDi/g'c a fca-|.life t:onst, raint solver with distributed disiunctionand classical negation.
Teclmical report., D \["K \[, Sct\[tt'-brficken, (\]ermmty, 1!/9-1.
Forthconting.\[4\] Bob Carpenter.
ALE |;he al;tribu(:e logic engine us-er's guide.
Version ft. Technical report., Labm'atotyfor Computal;iona\[ l,inguisl;ics.
Carnegie Mellou Uni-versity, Pit(.sburgh, PA, 1992.\[5\] Bob Carpenter.
The Logic of ~lilped Feature Struc-tm'cs.
Cambridge University Press, Cmnbridge, 19!
)2.\[6\] .lochen l)Srre and Michael Dovna.
CUF .a formal-ism for lhtguisi, c knowledge representation.
In?1 ' l )  ~ ~lt'{~ , editor, Comp.utational Aspects cff Cou-straint- B,sed Linguistic Description.
DYANA, 1!
)9:L\[7\] l lans-UMch Krieger and Ulrich Sch'ffer.
"\['1)?.
-atype description language for HPSG.
Pm't 2: userguide.
Technical report, DFKI, Saarbrlleken, (k't'-many, 19!)-1.
Forthcoming.\[8\] Joachiln l~aul)sch.
Zebu: A tool for speeifyil~g rcversible \],ALR(I) parsers.
'\]'ethnical re.porl;, IIewleM;-Packard, 1993.\[9\] Klaus Netter.
Ar(:|dteci;m'e and coverage of |;he 1)\[,%.CO grammar.
In S. Busemamt aim K.
IIarbusch,eds., t'roc, of the DFKI Workshop on N ,  tural Lau-9tu,/e Systems: Modularity and ltc- Usability~ 1993.\[10\] Peter Norvig.
Techniques fin' mttomal:ic memoizai;ionwith applications t;o (:oul;ex|;-ft'ee pro'sing.
Computa-tional Linguistics, 17(1):91--98, 1991.\[11\] William C. \]{O/llttls and Alexis Mg.tli.~tsl;tw-l{~-ttllel'.
Alogical version of fimctional gr;unmsu'.
In Procccdi,,qsof the A UL, pages 89 4)6, 1987.\[t2\] GerL Smolka.
A feature logic with subsorl;s. I,II,O(',l/.eporL 33, IBM (;ermany, Sl;ut.tgart, 1988.\[13\] l lans Uszkoreit.
Strat;cgies for adding control infoflint|ion (.o declarative gr;munars, in l'roccediuya ofthe ACL, l)agcs 237 245, 1991.\[14\] H.
Uszkoreit., R. Backofen, S. lhlsemann, A.K.
l)iagne, E.A.
Ilinkehnan, W. Kasper, B. Kiefcr, t\[.-/j.
KT"ieger, K. Netter, G. Neummm, S. Oel)en , andS.\[ ).
Sl)ackman.
DISCO- an HPSC;-bas(:d NI,P sys.-tern aim il;s app|h:al;ion for aplmintlnent uchedulhlg.In Proceediuqs of COLING, 1994.\[15\] Hdmi Zajac.
Inheritance and constraint-bas('.dgrammar formal|sins.
Computational Linguistics,J8(2): tat) ~82, 1,,),,)2.899
