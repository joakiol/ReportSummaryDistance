Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 55?60,Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational LinguisticsICARUS ?
An Extensible Graphical Search Toolfor Dependency TreebanksMarkus Ga?rtner Gregor Thiele Wolfgang Seeker Anders Bjo?rkelund Jonas KuhnInstitut fu?r Maschinelle SprachverarbeitungUniversity of Stuttgartfirstname.lastname@ims.uni-stuttgart.deAbstractWe present ICARUS, a versatile graphi-cal search tool to query dependency tree-banks.
Search results can be inspectedboth quantitatively and qualitatively bymeans of frequency lists, tables, or depen-dency graphs.
ICARUS also ships withplugins that enable it to interface with toolchains running either locally or remotely.1 IntroductionIn this paper we present ICARUS1 a search andvisualization tool that primarily targets depen-dency syntax.
The tool has been designed suchthat it requires minimal effort to get started withsearching a treebank or system output of an auto-matic dependency parser, while still allowing forflexible queries.
It enables the user to search de-pendency treebanks given a variety of constraints,including searching for particular subtrees.
Em-phasis has been placed on a functionality thatmakes it possible for the user to switch back andforth between a high-level, aggregated view of thesearch results and browsing of particular corpusinstances, with an intuitive visualization of theway in which it matches the query.
We believe thisto be an important prerequisite for accessing anno-tated corpora, especially for non-expert users.Search queries in ICARUS can be constructedeither in a graphical or a text-based manner.
Build-ing queries graphically removes the overhead oflearning a specialized query language and thusmakes the tool more accessible for a wider audi-ence.
ICARUS provides a very intuitive way ofbreaking down the search results in terms of fre-quency statistics (such as the distribution of part-of-speech on one child of a particular verb againstthe lemma of another child).
The dimensions for1Interactive platform for Corpus Analysis and Researchtools, University of Stuttgartthe frequency break-down are simply specified byusing grouping operators in the query.
The fre-quency tables are filled and updated in real timeas the search proceeds through the corpus ?
allow-ing for a quick detection of misassumptions in thequery.ICARUS uses a plugin-based architecture thatpermits the user to write his own plugins and in-tegrate them into the system.
For example, itcomes with a plugin that interfaces with an exter-nal parser that can be used to parse a sentence fromwithin the user interface.
The constraints for thequery can then be copy-pasted from the resultingparse visualization.
This facilitates example-basedquerying, which is particularly helpful for inexpe-rienced users ?
they do not have to recall detailsof the annotation conventions outside of their fo-cus of interests but can go by what the parser pro-vides.2ICARUS is written entirely in Java and runs outof the box without requiring any installation ofthe tool itself or additional libraries.
This makesit platform independent and the only requirementis that a Java Runtime Environment (JRE) is in-stalled on the host system.
It is open-source andfreely available for download.3As parsers and other Natural Language Pro-cessing (NLP) tools are starting to find their wayinto other sciences such as (digital) humanities orsocial sciences, it gets increasingly important toprovide intuitive visualization tools that integrateseamlessly with existing NLP tools and are easyto use also for non-linguists.
ICARUS interfacesreadily with NLP tools provided as web servicesby CLARIN-D,4 the German incarnation of theEuropean Infrastructure initiative CLARIN.2This is of course only practical with rather reliable auto-matic parsers, but in our experience, the state-of-the-art qual-ity is sufficient.3www.ims.uni-stuttgart.de/forschung/ressourcen/werkzeuge/icarus.en.html4http://de.clarin.eu55The remainder of this paper is structured as fol-lows: In Section 2 we elaborate on the motivationfor the tool and discuss related work.
Section 3presents a running example of how to build queriesand how results are visualized.
In Section 4 weoutline the details of the architecture.
Section 5discusses ongoing work, and Section 6 concludes.2 BackgroundLinguistically annotated corpora are among themost important sources of knowledge for empir-ical linguistics as well as computational modelingof natural language.
Moreover, for most users theonly way to develop a systematic understandingof the phenomena in the annotations is through aprocess of continuous exploration, which requiressuitable and intuitive tools.As automatic analysis tools such as syntacticparsers have reached a high quality standard, ex-ploration of large collections of auto-parsed cor-pus material becomes more and more common.
Ofcourse, the querying problem is the same no matterwhether some target annotation was added manu-ally, as in a treebank, or automatically.
Yet, thestrategy changes, as the user will try to make surehe catches systematic parsing errors and developsan understanding of how the results he is deal-ing with come about.
While there is no guaran-teed method for avoiding erroneous matches, webelieve that an easy-to-use transparent queryingmechanism that allows the user to look at the sameor similar results from various angles is the bestpossible basis for an informed usage: frequencytables breaking down the corpus distributions indifferent dimensions are a good high-level hint,and the actual corpus instances should be only oneor two mouse clicks away, presented with a con-cise visualization of the respective instantiation ofthe query constraints.Syntactic annotations are quite difficult to queryif one is interested in specific constructions thatare not directly encoded in the annotation labels(which is the case for most interesting phenom-ena).
Several tools have been developed to enableresearchers to do this.
However, many of thesetools are designed for constituent trees only.Dependency syntax has become popular as aframework for treebanking because it lends itselfnaturally to the representation of free word orderphenomena and was thus adopted in the creation oftreebanks for many languages that have less strictword order, such as the Prague Dependency Tree-bank for Czech (Hajic?
et al 2000) or SynTagRusfor Russian (Boguslavsky et al 2000).A simple tool for visualization of dependencytrees is What?s wrong with my NLP?
(Riedel,2008).
Its querying functionality is however lim-ited to simple string-searching on surface forms.
Asomewhat more advanced tool is MaltEval (Nils-son and Nivre, 2008), which offers a number ofpredefined search patterns ranging from part-of-speech tag to branching degree.On the other hand, powerful tools such as PML-TQ (Pajas and S?te?pa?nek, 2009) or INESS (Meurer,2012) offer expressive query languages and canfacilitate cross-layer queries (e.g., involving bothsyntactic and semantic structures).
They alsoaccommodate both constituent and dependencystructures.In terms of complexity in usage and expressiv-ity, we believe ICARUS constitutes a middle waybetween highly expressive and very simple visu-alization tools.
It is easy to use, requires no in-stallation, while still having rich query and visual-ization capabilities.
ICARUS is similar to PML-TQ in that it also allows the user to create queriesgraphically.
It is also similar to the search toolGrETEL (Augustinus et al 2012) as it interfaceswith a parser, allowing the user to create queriesstarting from an automatic parse.
Thus, queriescan be created without any prior knowledge of thetreebank annotation scheme.As for searching constituent treebanks, thereis a plethora of existing search tools, suchas TGrep2 (Rohde, 2001), TigerSearch (Lezius,2002), MonaSearch (Maryns, 2009), and Fangorn(Ghodke and Bird, 2012), among others.
They im-plement different query languages with varying ef-ficiency and expressiveness.3 Introductory ExampleBefore going into the technical details, we showan example of what you can do with ICARUS.Assume that a user is interested in passive con-structions in English, but does not know exactlyhow this is annotated in a treebank.
As a first step,he can use a provided plugin that interfaces witha tool chain5 to parse a sentence that contains apassive construction (thus adopting the example-based querying approach laid out in the introduc-5using mate-tools by Bohnet (2010); available athttp://code.google.com/p/mate-tools56tion).
Figure 1 shows the parser interface.
In thelower field, the user entered the sentence.
Theother two fields show the output of the parser, onceas a graph and once as a feature value description.Figure 1: Parsing the sentence ?Mary was kissedby a boy.?
with a predefined tool chain.In the second step, the user can then mark partsof the output graph by selecting some nodes andedges, and have ICARUS construct a query struc-ture from it, following the drag-and-drop schemeusers are familiar with from typical office soft-ware.
The automatically built query can be man-ually adjusted by the user (relaxing constraints)and then be used to search for similar structuresin a treebank.
The parsing step can of course beskipped altogether, and a query can be constructedby hand right away.
Figure 2 shows the querybuilder, where the user can define or edit searchgraphs graphically in the main window, or enterthem as a query string in the lower window.Figure 2: Query builder for constructing queries.For the example, Figure 3 shows the query as itis automatically constructed by ICARUS from thepartial parse tree (3a), and what it might look likeafter the user has changed it (3b).
The modifiedquery matches passive constructions in English, asannotated in the CoNLL 2008 Shared Task data set(Surdeanu et al 2008), which we use here.
(a) automatically extracted (b) manually editedFigure 3: Search graphs for finding passive con-structions.
(a) was constructed automatically fromthe parsed sentence, (b) is a more general version.The search returns 6,386 matches.
Note thatthe query (Figure 3b) contains a <*>-expression.This grouping operator groups the results accord-ing to the specified dimension, in this case by thelemma of the passivized verb.
Figure 4 showsthe result view.
On the left, a list of lemmas ispresented, sorted by frequency.
Clicking on thelemma displays the list of matches containing thatparticular lemma on the right side.
The match-ing sentences can then be browsed, with the activesentence also being shown as a tree.
Note that theinstantiation of the query constraints is highlightedin the tree display.Figure 4: Passive constructions in the treebankgrouped by lemma and sorted by frequency.The query could be further refined to restrict itto passives with an overt logical subject, using amore complex search graph for the by-phrase anda second instance of the grouping operator.
Theresults will then also be grouped by the lemma ofthe logical subject, and are therefore presented asa two-dimensional table.
Figure 5 shows the newquery and the resulting view.
The user is presentedwith a frequency table, where each cell containsthe number of hits for this particular combinationof verb lemma and logical subject.
Clicking onthe cell opens up a view similar to the right part ofFigure 4 where the user can then again browse theactual trees.57Figure 5: Search graph and result view for passiveconstructions with overt logical subjects, groupedby lemma of the verb and the lemma of the logicalsubject.Finally, we can add a third grouping operator.Figure 6 shows a further refined query for passiveswith an overt logical subject and an object.
In theresults, the user is presented with a list of valuesfor the first grouping operator to the left.
Clickingon one item in that list opens up a table on the rightpresenting the other two dimensions of the query.Figure 6: Search graph and result view for passiveconstructions with an overt logical subject and anobject, grouped by lemma of the verb, the logicalsubject, and the object.This example demonstrates a typical use casefor a user that is interested in certain linguisticconstructions in his corpus.
Creating the searchgraph and interpreting the results does not re-quire any specialized knowledge other than fa-miliarity with the annotation of the corpus beingsearched.
It especially does not require any pro-gramming skills, and the possibility to graphicallybuild a query obviates the need to learn a special-ized query language.4 ArchitectureThis section goes into more details about the in-ner workings of ICARUS.
A main componentis the search engine, which enables the user toquickly search treebanks for whatever he is inter-ested in.
A second important feature of ICARUSis the plugin-based architecture, which allows forthe definition of custom extensions.
Currently,ICARUS can read the commonly used CoNLL de-pendency formats, and it is easy to write exten-sions in order to add additional formats.4.1 Search Engine and Query BuilderICARUS has a tree-based search engine for tree-banks, and includes a graphical query builder.Structure and appearance of search graphs are sim-ilar to the design used for displaying dependencytrees (cf.
Figure 1), which is realized with theopen-source library JGraph.6 Queries and/or theirresults can be saved to disk and later reloaded forfurther processing.Defining a query graphically basically amountsto drawing a partial graph structure that definesthe type of structure that the user is interested in.In practice, this is done by creating nodes in thequery builder and connecting them by edges.
Thenodes correspond to words in the dependency treesof the treebank.
Several features like word iden-tity, lemma, part of speech, etc.
can be specifiedfor each node in the search graph in order to re-strict the query.
Dominance and precedence con-straints over a set of nodes can be defined by sim-ply linking nodes with the appropriate edge type.Edges can be further specified for relation type,distance, direction, projectivity, and transitivity.
Asimple example is shown in Figures 2 and 3.
Thesearch engine supports regular expressions for allstring-properties (form, lemma, part of speech, re-lation).
It also supports negation of (existence of)nodes and edges, and their properties.As an alternative to the search graph, the usercan also specify the query in a text-based formatby constructing a comma separated collection ofconstraints in the form of key=value pairs for asingle node contained within square brackets.
Hi-erarchical structures are expressed by nesting theirtextual representation.
Figure 7 shows the text-based form of the three queries used in the exam-ples in Section 3.6http://www.jgraph.com/58Query 1: [lemma=be[pos=VBN,lemma=<*>,rel=VC]]Query 2: [lemma=be[pos=VBN,lemma=<*>,rel=VC[form=by,rel=LGS[lemma=<*>,rel=PMOD]]]]Query 3: [lemma=be[pos=VBN,lemma=<*>,rel=VC[form=by,rel=LGS[lemma=<*>,rel=PMOD]][lemma=<*>,rel=OBJ]]]Figure 7: Text representation of the three queries used in the example in Section 3.A central feature of the query language is thegrouping operator (<*>), which will match anyvalue and cause the search engine to group resultentries by the actual instance of the property de-clared to be grouped.
The results of the searchwill then be visualized as a list of instances to-gether with their respective frequencies.
Resultscan be sorted alphabetically or by frequency (ab-solute or relative counts) .
Depending on the num-ber of grouping operators used (up to a maximumof three) the result is structured as a list of fre-quencies (cf.
Figure 4), a table of frequencies forpairs of instances (cf.
Figure 5), or a list whereeach item then opens up a table of frequency re-sults (cf.
Figure 6).
In the search graph and theresult view, different colors are used to distinguishbetween different grouping operators.The ICARUS search engine offers three differ-ent search modes:Sentence-based.
Sentence based search stops atthe first successful hit in a sentence and returnsevery sentence on a list of results at most once.Exhaustive sentence-based.
The exhaustivesentence-based search mode extends the sentencebased search by the possibility of processing mul-tiple hits within a single sentence.
Every sentencewith at least one hit is returned exactly once.
In theresult view, the user can then browse the differenthits found in one sentence.Hit-based.
Every successful hit is returned sepa-rately on the corresponding list of results.When a query is issued, the search results aredisplayed on the fly as the search engine is pro-cessing the treebank.
The sentences can be ren-dered in one of two ways: either as a tree, wherenodes are arranged vertically by depth in the tree,or horizontally with all the nodes arranged side-by-side.
If a tree does not fit on the screen, part ofit is automatically collapsed but can be expandedagain by the user.4.2 ExtensibilityICARUS relies on the Java Plugin Framework,7which provides a powerful XML-based frame-7http://jpf.sourceforge.net/work for defining plugins similarly to the engineused by the popular Eclipse IDE project.
Theplugin-based architecture makes it possible foranybody to write extensions to ICARUS that arespecialized for a particular task.
The parser inte-gration of mate-tools demonstrated in Section 3 isan example for such an extension.The plugin system facilitates custom extensionsthat make it possible to intercept certain stagesof an ongoing search process and interact with it.This makes it possible for external tools to pre-process search data and apply additional annota-tions and/or filtering, or even make use of exist-ing indices by using search constraints to limit theamount of data passed to the search engine.
Withthis general setup, it is for example possible to eas-ily extend ICARUS to work with constituent trees.ICARUS comes with a dedicated plugin thatenables access to web services provided byCLARIN-D.
The project aims to provide tools andservices for language-centered research in the hu-manities and social sciences.
In contrast to the in-tegration of, e.g., mate-tools, where the tool chainis executed locally, the user can define a tool chainby chaining several web services (e.g., lemmatiz-ers, part-of-speech taggers etc.)
together and ap-ply them to his own data.
To do this, ICARUSis able to read and write the TCF exchange for-mat (Heid et al 2010) that is used by CLARIN-Dweb services.
The output can then be inspectedand searched using ICARUS.
As new NLP toolsare added as CLARIN-D web services they can beimmediately employed by ICARUS.5 Upcoming ExtensionsAn upcoming release includes the following ex-tensions:?
Currently, treebanks are assumed to fit intothe executing computer?s main memory.The new implementation will support asyn-chronous loading of data, with notificationspassed to the query engine or a plugin whenrequired data is available.
Treebanks withmillions of entries can then be loaded in less59memory consuming chunks, thus keeping thesystem responsive when access is requested.?
The search engine is being extended with anoperator that allows disjunctions of queries.This will enable the user to aggregate fre-quency output over multiple queries.6 ConclusionWe have presented ICARUS, a versatile and user-friendly search and visualization tool for depen-dency trees.
It is aimed not only at (computa-tional) linguists, but also at people from other dis-ciplines, e.g., the humanities or social sciences,who work with language data.
It lets the usercreate queries graphically and returns results (1)quantitatively by means of frequency lists and ta-bles as well as (2) qualitatively by connecting thestatistics to the matching sentences and allowingthe user to browse them graphically.
Its plugin-based architecture enables it to interface for exam-ple with external processing pipelines, which letsthe user apply processing tools directly from theuser interface.In the future, specialized plugins are plannedto work with different linguistic annotations, e.g.cross-sentence annotations as used to annotatecoreference chains.
Additionally, a plugin is in-tended that interfaces the search engine with adatabase.AcknowledgmentsThis work was funded by the DeutscheForschungsgemeinschaft (DFG) via the SFB732 ?Incremental Specification in Context?,project D8, and by the Bundesministerium fu?rBildung und Forschung (BMBF) via project No.01UG1120F, CLARIN-D center Stuttgart.
Theauthors are also indebted to Andre?
Blessing andHeike Zinsmeister for reading an earlier draft ofthis paper.ReferencesLiesbeth Augustinus, Vincent Vandeghinste, andFrank Van Eynde.
2012.
Example-based TreebankQuerying.
In Proceedings of the Eight InternationalConference on Language Resources and Evaluation(LREC?12), Istanbul, Turkey.
ELRA.Igor Boguslavsky, Svetlana Grigorieva, Nikolai Grig-oriev, Leonid Kreidlin, and Nadezhda Frid.
2000.Dependency Treebank for Russian: Concept, Tools,Types of Information.
In COLING 2000, pages987?991, Saarbru?cken, Germany.Bernd Bohnet.
2010.
Top Accuracy and Fast Depen-dency Parsing is not a Contradiction.
In COLING2010, pages 89?97, Beijing, China.Sumukh Ghodke and Steven Bird.
2012.
Fangorn: ASystem for Querying very large Treebanks.
In COL-ING 2012: Demonstration Papers, pages 175?182,Mumbai, India.Jan Hajic?, Alena Bo?hmova?, Eva Hajic?ova?, and BarboraVidova?-Hladka?.
2000.
The Prague DependencyTreebank: A Three-Level Annotation Scenario.
InTreebanks: Building and Using Parsed Corpora,pages 103?127.
Amsterdam:Kluwer.Ulrich Heid, Helmut Schmid, Kerstin Eckart, and Er-hard Hinrichs.
2010.
A Corpus Representation For-mat for Linguistic Web Services: The D-SPIN TextCorpus Format and its Relationship with ISO Stan-dards.
In Proceedings of the Seventh InternationalConference on Language Resources and Evaluation(LREC?10), Valletta, Malta.
ELRA.Wolfgang Lezius.
2002.
Ein Suchwerkzeug fu?r syn-taktisch annotierte Textkorpora.
Ph.D. thesis, IMS,University of Stuttgart.Hendrik Maryns.
2009.
MonaSearch ?
A Tool forQuerying Linguistic Treebanks.
In Proceedings ofTLT 2009, Groningen.Paul Meurer.
2012.
INESS-Search: A Search Systemfor LFG (and Other) Treebanks.
In Miriam Butt andTracy Holloway King, editors, Proceedings of theLFG2012 Conference.
CSLI Publications.Jens Nilsson and Joakim Nivre.
2008.
MaltEval: anEvaluation and Visualization Tool for DependencyParsing.
In Proceedings of the Sixth InternationalConference on Language Resources and Evaluation(LREC?08), Marrakech, Morocco.
ELRA.Petr Pajas and Jan S?te?pa?nek.
2009.
System for Query-ing Syntactically Annotated Corpora.
In Proceed-ings of the ACL-IJCNLP 2009 Software Demonstra-tions, pages 33?36, Suntec, Singapore.
Associationfor Computational Linguistics.Sebastian Riedel.
2008.
What?s Wrong With MyNLP?http://code.google.com/p/whatswrong/.Douglas L.T.
Rohde.
2001.
TGrep2 the next-generation search engine for parse trees.http://tedlab.mit.edu/?dr/Tgrep2/.Mihai Surdeanu, Richard Johansson, Adam Meyers,Llu?
?s Ma`rquez, and Joakim Nivre.
2008.
TheCoNLL 2008 Shared Task on Joint Parsing of Syn-tactic and Semantic Dependencies.
In CoNLL 2008,pages 159?177, Manchester, England.60
