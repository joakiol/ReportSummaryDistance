Using Tree Adjoining Grammars in theSystemic Framework*Kath leen  F .
McCoy ,  K .
V i jay -Shanker ,  G i joo  YangUniversity of DelawareNewark, DE 19716Abst rac tIn this paper we investigate the incorporation ofTree Adjoining Grammars (TAG) into the systemicframework.
We show that while systemic grammarshave many desirable characteristics as a generationparadigm, they appear to have problems in generatingcertain kinds of sentences (e.g., those containing discon-tinuity or long-distance dependencies).
We argue thatthese problems can be overcome with an appropriatechoice of structural units of realization.We show that TAG provides appropriate units ofstructural realization because they localize all depen-dencies and allow the realization of two independentsubpieces to be interspersed with each other.
We go onto show how TAG can be incorporated without affect-ing the basic tenants of systemic grammar.
Finally, weindicate how the incorporation of TAG yields severalbenefits to the systemic framework.In t roduct ionAs pointed out by many researchers (e.g., \[Davey 1978;Mann 1983; Matthiessen & Kasper 1985; Patten 1988;Bateman & Paris 1989\]), systemic linguistics offersmany advantages to a sentence generation componentof a text generation system.
Perhaps the strongest as-set of systemics is its view of the generation processas a goal directed enterprise.
Its emphasis is on func-tion rather than form \[Halliday 1985; Fawcett 1980;Hudson 1971\], where the functional distinctions thatare required in the grammar manifest themselves in theeventual output form.While systemic linguists have remained agnostic withrespect o certain processing decisions, a computer im-plementation of a systemic grammar requires that ex-plicit decisions be made concerning realization opera-tors and the structures available for manipulation ateach point in the processing.
The explicit decisionsthat were made in previous implementations of ystemic*This work is supported in part by Grant #H133ES0015from the National Institute on Disability and Rehabilita-tion Research.
Support was also provided by the NemoursFoundation.grammar (e.g., \[Mann 1983; Mann & Matthiessen 1985;Matthiessen & Kasper 1985\]) have proven to be prob-lematic in some respects.
In particular, the currentimplementations have difficulty in generating certainsentences which exhibit discontinuities or long distancedependencies.
To date, these can only be handled in alimited fashion, and the solutions provided are not verysatisfying.We argue that Tree Adjoining Grammar (TAG) pro-vides a structural unit that is precisely appropriate forthe implementation f a systemic grammar for the gen-eration task.
Moreover, we believe our use of TAG forthis purpose is completely consistent with the systemicparadigm and helps to overcome the above difficulties.In this paper we first introduce the notion of a sys-temic grammar and the processing paradigm it es-pouses.
We indicate problems with current implemen-tations of this paradigm.
Next, we introduce the notionof lexicalized Tree Adjoining Grammars, emphasizingtheir structural domains of locality, and justify that thebasic structures of TAG are appropriate structures tobe used in an implementation f a systemic grammar.Following this we indicate how a tree adjoining ram-mar can be used as the basis for an implementationof systemic grammar indicating the differences betweenthe approach of current implementations of systemicgrammar and that which would result from the incor-poration of TAG.
Finally, we indicate potential gainsresulting from the incorporation ofTAGs and the scopeof current work.Generat ing  in Sys temic  Parad igm:P rob lems?Systemic linguistics deals with the meaning and func-tion of an utterance, it is a semantics driven approachrather than a syntax driven approach.
In systemics,form follows function.
The grammar itself is factoredinto three metafunctional domains (each of which affectthe final text): ideational (concerning the characteris-tics of the conceptual situation to be presented), inter-personal (concerning the interaction between speakerand hearer) and textual (concerning the coherence of1the text as a whole).A systemic functional grammar consists of networksof grammatical choice alternatives, where individualnetworks are concerned with one of the metafunctionaldomains.
In generation, these networks are traversedand fragments of grammatical structure are built upand manipulated using a set of realization operatorswhich are associated with the various choice alterna-tives.
The correct choice is made by consulting theinformation concerning the planned utterances.
As thechoices are made, the associated realization statementsin the network are evaluated in order to realize the finalstructure.For instance, figure 1 contains a small fragment of asystemic grammar for clauses.
The network indicatesthat a clause may either be simple or complex.
If it issimple and full, then the grammatical function processis inserted (indicated by +process).
The realization op-eration '% subject process" indicates that the subjectshould be ordered before the process in the final real-ization.Systemics deals with communicative function and itseventual surface manifestation at many levels.
Thebasic processing starts with a semantically meaning-ful piece of representation which is decomposed into itscomponent pieces via network traversal.
The compo-nent pieces may then be further specified by re-enteringthe network.
Given this rank-based ecomposition (orstepwise decomposition), it is not unreasonable to as-sume that 1) decisions at a higher rank are made priorto decisions at a lower rank - that is, the decompo-sition of a particular semantic unit may not be influ-enced by the eventual decomposition of its componentpieces, and 2) the structural realizations of the com-ponent pieces of a decomposed unit must be handledindependently.
These criteria, which we call the inde-pendence criterion, are implicitly followed by currentcomputer implementations of systemic grammar.Implementing a systemic grammar on computer hasforced researchers to be very explicit about certain rep-resentational issues.
Such explicitness (coupled with animplicit following of the independence criterion), hasenabled the uncovering of certain constructions whichappear to be problematic for the systemic framework.For instance, Matthiessen points out that: "There arevarious structural relationships (e.g., discontinuity...)that do not pose a problem for the informal box diagramrepresentation \[used by systemic linguists\] but prove tobe a problem for explicit realization statements \[nec-essary for computer implementations\].
"\[Matthiessen &Kasper 1985, p. 6\].
We believe that the same appliesto (so called) long distance dependencies.It can be argued that the problems uncovered byMatthiessen are not due to explicit realization state-ments, but rather result from using explicit realizationstatements coupled with the implicit assumption thatgrammatical functions are realized as atomic strings.We further argue that if the independence riterion isto be followed, the choice of realization operators, thescope of the realization operators, and the choice ofappropriate units of realization must be considered to-gether.Consider, for example, the problems which arise ingenerating a sentence containing a long distance de-pendency when atomic strings are taken as the struc-tural unit of realization.
Consider the sentence: "It wasMary that John thought Bill liked".
A natural decom-position would result in the semantic subpieces whichcorrespond to "john thought" and the dependent clause"bill liked mary".
The extraction of "mary" will bedone subsequent to this decomposition; this extractionshould influence the realization of the structural unit forthe dependent clause (and should not affect the func-tional decomposition).
But notice, if we assume thestructural units of realization are atomic strings, we canget "John thought it was Mary that Bill liked" but notour desired utterance "It was Mary that John thoughtBill liked" because to do so would necessitate insertingone atomic string ("John thought") within another ("Itwas Mary that Bill liked").Two possible ways to get around this problem are:(1) to say that the intended sentence is made up of sev-eral independent but smaller functions (e.g., realizedas "john thought", "bill", "liked", "mary").
But thissolution goes against he step-wise decomposition i tosemantically meaningful units.
Moreover, this methodis not sufficient because we can always consider a sen-tence that requires one more level of embedding whichwould necessitate a revision of units.
(2) not to break upthe sentence into the two functional constituents men-tioned, but use some other decomposition.
But this isnot a correct solution because then one functional de-cision at a lower level (extraction of "mary") influencesanother which logically precedes the first (decomposi-tion in the clause complex network).In order to follow the independence criterion (i.e.,realization of different independent functions do not in-fluence each other), the structural units being built asthe realization of a grammatical function must be ca-pable of localizing all structural dependencies becausethey must embody all constraints pecified with thatfunction.
In addition, the chosen structural units mustbe composable in such a way as to allow the surfacestring of one unit to be interspersed with the surfacestring for another (as was required in our example).
Ifthis is the case, then it makes sense that these struc-tural units should be taken as the bounding domainfor the realization operators.
The structures used byTAGs have precisely these qualities and are thus an ap-propriate choice for a structural unit of realization inan implementation of systemic grammar.
The struc-tures used in a TAG have an enlarged domain of lo-cality that factor all dependencies (e.g., agreement con-straints, predicate-argument structure, filler-gap depen-2Trans i t ive Tree GroupS SNPO ~\[+wh\] SNPO~ VPNP0 VPV NP1 ~ \[V NP1 ~?SNP1 ~ SNPO ~ VPV NP1Imeans that at that node substitution must occur.Figure 3: A Tree Group Selected by Likefrom one another by syntactic variations (which we shallcall transformations).
For example, the verb like, whichtakes a nominal subject and a nominal object, selectsthe transitive tree group.
Some of the members of thistree group axe shown in Figure 3.
The figure containsthree initial trees, the first corresponds to a declarativesentence, the second to a wh-question on the subject,and the third to an it-cleft construction on the object.S -TAGsThe processing within a Systemic Tree AdjoiningGrammar (S-TAG) is similar to that in systemic gram-mar (e.g., the networks axe traversed and the realizationoperators associated with the choices taken are evalu-ated).
In S-TAG we have already stated that the indi-vidual grammatical functions are realized structurallyby elementary trees and that elementary trees providethe bounding scope for application of realization opera-tors.
Thus, the "functions" which are inserted into thesystemic structure will be associated with elementarytrees in the TAG formalism.
While the types of realiza-tion operators required by S-TAG will be the same asfor general systemic grammars, the individual operatorswill be tailored to the TAG formalism.Regions in S-TAGThe basic processing within a systemic grammar musttake into account two dimensions of processing deci-sions:1.
Metafunctional domains.
Structures are built in thethree metafunctional domains (ideational, interper-sonal, and textual) simultaneously.
Certain realiza-tion operators are used to "conflate" the indepen-dently built structures.2.
Processing from one "rank" to another.
It is throughchanges in rank that semantic structures are eventu-ally realized as surface form.
The general method-ology is to insert functional units into a structure.Following this, these functional units are refined byre-entering the network at a lower rank.
This processcontinues until a surface structure has been fleshedout.While the processing in the S-TAG grammar followsthe same principles, we differ in some implementationissues to accommodate TAG.
One of the major contri-butions of this work is in the processing from one rankto another.
In particular, this work makes explicit thebounding domains for the realization operators whichare responsible for realizing a given grammatical func-tion.
Thus it becomes clear what is available for manip-ulation when a network is entered (and re-entered forspecifying a function inserted uring the initial networktraversals).
We employ the notion of a region for thispurpose.In general a region is created to expand a grammat-ical function.
Since we have said that elementary treesare appropriate structural units for realizing the func-tions and for the bounding domains for the realizationoperators, we state that an elementary tree will eventu-ally be associated with every region.
The appropriateelementary tree will be chosen after a decision has beenmade to insert a lexical item.
Informally, this lexicalitem will be the lexical anchor of the elementary treethat will be chosen in the region.
For this reason wewill call this lexical item the lexical anchor of the re-gion also) The region serves as the bounding domainon the realization operations.
All realization operations1This approach as interesting consequences, such asadopting a head driven generation strategy within the sys-4used within a region are applicable on the features of thelexical anchor of the region or the tree selected by thisanchor.
In the section on "Lexicon and Tree Groups"we will discuss how the features of the anchor, the treegroups selected, and trees selected will be maintainedm a region.Once a lexical anchor is picked, the tree groups asso-ciated with that anchor will be considered.
The choicesin the network will cause realization operators to beevaluated which will narrow this set of trees to one.This single tree is then said to be associated with theregion and will be the structural.realization of the gram-matical function being expanded (whose expansion wasthe reason for the creation of the region).
This filteringwill be done by using realization operations that selectbetween tree groups and those that select tree memberswithin tree groups.
Such realization operations will bediscussed in the section on "Realization Operators".Based on the characteristics of the tree associatedwith a region and directives from the networks be-ing traversed, decisions to expand certain grammati-cal functions (previously inserted in the region) will bemade.
Sub-regions will be created to expand these func-tions and the network will be re-entered to determinethe expansion.
Notice that this will cause an elementarytree to be associated with each sub-region.
These sub-regions must eventually be combined with the super-regions which spawned them using realization opera-tions for adjoining and substitution.This view of the process is potentially complicatedsince some of the realization operations to be evaluatedin the region may not be applied before the set of treesbeing considered is narrowed down sufficiently.
For ex-ample, an operator which selects a particular tree neednot be applied until the tree groups have been narrowedto one.
If at the point an operator which selects a treeis called for, if the number of tree groups has not beenreduced to one, it serves no purpose to apply the oper-ation on each tree group.
Hence, in such cases, withina region we will maintain a record of realization opera-tions that have to be completed later.
These operationswill be applied at the appropriate time.Lex icon  and  Tree  GroupsIn the lexicon, a lexical item will be associated witha set of tree groups, each of which contains a set ofelementary trees.
We choose to represent a tree groupin the lexicon as a feature-structure/tree-group-namepair.
The feature-structure includes all of the commonfeatures of the trees within the tree groups, the featuresof the lexical item itself, and its lexical idiosyncrasies,if any.
The tree group name can be thought of as apointer to the actual tree group kept in a separate area(allowing for sharing of tree groups by lexical items).temics framework.
It will also have implications on the de-sign of the network.For example, with the lexical item, walk, we willassociate the pairs (ft,.a,~s,trans), (fiotra,~,,intrans),(f ,  ou,~, noun), trans, for instance, is the name of thetree group for transitive verbs.
All trees in this groupshare the information that the lexical anchor is a tran-sitive verb.
Thus, this information is stored in ftransalong with any other features that are common to thetrees in the group.
The other two pairs represent thefact that walk can be used as a intransitive verb as wellas a noun.The trees that constitute a tree group are kept to-gether.
Some realization operators which will be evalu-ated in a region will refer to certain grammatical func-tions that are represented as nodes in the tree associ-ated with that region.
Hence we will use a mappingtable that maps abstract positions (grammatical func-tions) to actual nodes in an elementary tree.Rea l i za t ion  OperatorsHaving set up the notion of a region (and its asso-ciated elementary tree) as the bounding domain overwhich the realization operators can function, we arenow in a position to discuss some of the realizationoperators that will be used in S-TAG.
These opera-tors parallel those found in other systemic grammarimplementations, although they are particular to theuse of TAG.
According to \[Matthiessen & Kasper 1985\]the realization operators used in a systemic networkcan be viewed along three dimensions: (1) Structuring(which defines the structure and its organization withinone rank and within one functional domain), (2) Rank(which "organizes the grammar into a scale of units:clause- group/phrase - word - morpheme" \[Matthiessen& Kasper 1985, p. 25\]), and (3) Metafunctional lay-ering (which integrates the structures developed withinthe various metafunctional domains (e.g., interpersonal,ideational, and textual)).We concentrate on the rank and structuring opera-tors because they appear to be most affected by theaddition of TAG.
Aside from the nature of the actualstructural units, a major difference between S-TAG andprevious implementations of systemics is that previousimplementations have built up structures of minimalimport: upon proper evidence a functional unit is addedto the current structure, ordered with respect to theother elements, accumulates features, and is then ex-panded so as to satisfy those features.
There appearsto be no automatic mechanism for carrying out syn-tactic implications of decisions that have been made.In S-TAG we take an opposite approach.
In the TAGwe have precompiled minimally complete packages ofsyntactic structure.
Rather than building up structureonly when we have enough evidence to know that itis correct (as has previously been done), our operationcan be characterized as deciding between the syntac-tic possibilities that are consistent with what is knownat the given point in the network.
2 As a result manyof the structuring operators we introduce are designedto narrow down the trees that could possibly realize aparticular function.In t roduc ing  the Lexical Anchor:  Inser t (Lex-i tem) When the lexical anchor is identified in thenetwork, this operation will be used.
The purpose ofthis operation is not only to introduce the lexical an-chor into the region but also to bring the associated setof feature-structure/tree-group-name p irs.
Thus thetree group itself is not brought in but is indirectly ac-cessible.
A tree is brought into the region only afterthe narrowing process is completed.
The anchor is theninserted into the tree.F i l ter ing Tree Groups  in a Region We will useone realization operation to choose among the the treegroups being considered in a region.
This choice is madeon the basis of some features that become known duringthe traversal of the network and is basically a decisionabout the functional units the realization must repre-sent.
Thus, in some sense it is analogous to the "in-sert" operator in Nigel.
For example, the insertion of aparticular lexical item, say walk, will bring into consid-eration all possible tree groups it can participate in.
Ifit becomes known (in the transitivity network) that therecipient function will have to be realized, then amongthe various tree groups of the lexical anchor of the re-gion, only the appropriate tree groups (such as thosecorresponding to transitive verb form) will have to beconsidered.For current purposes, the realization operation thatfilters the tree groups will be called Select-Groupwhich takes a feature as an argument.
In theabove example, the network may cause the opera-tion: Select-Group(transitive) to be evaluated.
Re-call that the three tree-groups referenced for this lexi-cal item are represented by the pairs: (ftrans,trans),(fintran,,intrans), and (fnoun,noun).
Since thefeature-structures ftran,, fintrans, fnoun are kept in thelexicon itself rather than with the tree group, these tu-pies will be brought into the region on lexical insertion.If the realization operation Select-Group(transitive)(which is analogous to insert process and recipient in?
the Nigel grammar) is evaluated in the region, thefeature transitive is unified with the three feature-structures ftrans, fintrans, f.o~,n.
Since this feature isonly consistent with the features in ftrans, only the pair(ftrans, trans) will remain in the region.Select ing Trees f rom a Tree Group The realiza-tion operation used to narrow down the choice of ele-mentary trees within a tree group considered in a region2Note it is not necessary to bring all of the syntacticstructures into the region, rather much of this processingcan be done based on the features tored with the lexicalanchor.is called Select-Tree.
We had described a tree groupto correspond to a specific semantic entity with all ofits relevant semantic features inserted.
The group it-self represents all syntactic realizations of this entity.Therefore the purpose of this operation is to chooseamong different syntactic forms possible.
Its effect issomewhat analogous to that of the "order" operatorsin Nigel.
For example, if during the traversal of thenetwork it is realized that the object is to be topical-ized then the Select-Tree operation will be evaluated.Among the various syntactic variations possible, thetree(s) which realize this thematization will thus beidentified.Compos ing  Trees Recall that sub-regions are cre-ated to expand grammatical functions.
The elementarytrees associated with the sub-regions are to be com-posed with the tree associated with the super-regioneither by substitution or by adjunction.
Expansion ofa grammatical function is done, in the Nigel grammar,when a function is preselected with a set of features.The preselected features determine where to re-enterthe network in order to expand the given function.
Theresulting realization will replace the original functionin the eventual realization of the input.
In S-TAG thisis accomplished by using the realization operation Ex-pand(function, features).
This will cause the creationof a sub-region (which is named by the function).
Therealization of the function will occur in this sub-regionby re-entering the network at a point determined by thepreselected feature (as in Nigel).The tree which eventually realizes the function mustbe composed (by substitution or adjoining) with thetree in the super-region at the node corresponding tothe function (as given by the mapping table).
Thedecision to adjoin or substitute is made based on thetypes of the trees that are picked in the sub- and super-regions.DiscussionThe strongest asset of systemic grammar is its view ofgeneration as a goal-directed enterprise with emphasislaid on function rather than form.
While our work in-volves the incorporation of a syntactic formalism intosystemic grammar, we have not departed from the gen-eral approach of systemics view of generation.
Sys-temic linguists, however, have not been interested inthe details of the mapping between functional choicesand the resulting form.
In particular, they are not con-cerned with the details of the structural units that arerealized.
In a computer implementation, a programmerneeds to be concerned about the details of the structuralunits, how they are realized, and how the constraints ofsystemic grammars are translated as principles of im-plementation.
It is in this context hat we propose theuse of TAG trees as appropriate structural units andexamine the processing paradigm (and its logical con-6sequences) that follows from such a choice.
Thus, theincorporation of TAG is more than just a simple addi-tion of a syntactic formalism to the systemic framework.We argue that the incorporation ofTAGs enriches a sys-temic grammar implementation for the following rea-sons:First, systemic linguists have stressed the notion ofstepwise semantic decomposition asa constraint on anyimplementation f a systemic grammar.
Hence it is notunreasonable to expect the realization of the form toconform to the decomposition of the semantic units.
Wehave called this the independence riterion, indicatingthat independent decomposed functional units be real-ized independently in any implementation of systemicgrammar.
We argued that in order to be consistent withthis paradigm, we have to choose appropriate struc-tural units as realizations of semantic/functional pieces.These units must capture all necessary structural rela-tionships, and should be the bounding domains for therealization operators that build them.
Under these con-ditions, we argued that the structural units should havea "large" enough notion of locality to be able to factorout all structural dependencies.
Since the elementarystructures of TAGs are "minimally complete" to allowfor the factoring of dependencies, we have argued thatthey are appropriate structures that can be built andmanipulated in an implementation of systemic gram-mar.
They also form appropriate bounding domainsfor the realization operators.
Our preliminary work onincorporating TAGs in the systemic framework gives usencouragement to believe that this is indeed the case.Second, in addition to justifying the use of TAGstructures for systemics, we can show that we can han-dle the discontinuity (which we did not explicitly dis-cuss for lack of space) and long distance dependencyproblem which plague other implementations of sys-temic grammars.
The key point to make here is thatnot only are these handled but that generation of utter-ances with discontinuity or long distance dependenciesis conceptually no different han generation of utter-ances without any form of discontinuity.Third, systemic grammar places emphasis on func-tion over form and makes clear that functional distinc-tions in the input manifests themselves in the differentavailable forms.
It is clear that our approach bringsthis aspect of systemics to the fore front.
Note that thedifferent rees in a tree group yield various syntactic re-alizations of a single predicate-argument structure.
Aswe step through the network, various choices are madeon the basis of the functional content of the plannedutterance.
These choices will result in choosing onesyntactic realization over another.Finally, what we have suggested calls for putting to-gether two formalisms o that a mainly semantics drivenprocessor (systemics) is able to reap some of the advan-tages of a syntax driven (TAG) approach.
Currently asystemic network employs limited mechanism for carry-ing through the syntactic onsequences of the decisionsthat it makes.
Thus one of two things has to happen:1. the network designer must anticipate all syntacticconsequences and explicitly state each of them at thetime a decision is made.
This is not an ideal solution,especially when the network becomes very large.2.
the system must depend on the environment beingconsistent in order to carry out the desired conse-quences.
In this case the syntactic onsequences arestrung throughout he network (perhaps promptedby different questions that are asked).
The envi-ronment must be counted on to answer those ques-tions in a consistent fashion.
Even if the informa-tion is straightforwardly captured in the environment(which is unclear), due to lack of the ability to carryout syntactic onsequences, it becomes necessary toask questions of the environment (to make choices)that are redundant.
In addition, this arrangementgoes against he systemic enterprise in which the en-vironment keeps track of semantic ontent.The addition of TAG allows an independent mech-anism (e.g., the TAG processing) to maintain consis-tent syntactic onsequences of decisions made.
For ex-ample, agreement constraints are precompiled into thetree.
Also, for example, given the choice of a particularlexical item - once the trees for that item have beennarrowed to one, the tree itself will contain the infor-mation about what functions must be expanded.
Thusthis information eed not be included in the network aswell.We believe that network design will be simpler be-cause the incorporation of TAG makes possible cleardemarcation of semantic hoices from syntactic onse-quences.
Also it allow for the separation of lexical id-iosyncrasies into the lexicon rather than the network.Our work so far has been concerned with identifyingthe TAG structures as appropriate structural units in acomputer implementation of a systemic grammar.
Theimplementation decisions that have been discussed aregiven to indicate the logical consequences of incorpo-rating the TAG formalism in the systemic paradigm.These consequences would necessarily be handled inany actual implementation (e.g., breaking processinginto regions, associating elementary trees with regions,the nature of realization operators).
Considerable workremains to be done.
We need to investigate the con-sequences of using the TAG formalism on the designof the systemic network especially in terms of uncov-ering redundancy and separation of syntax, semantics,and lexicon design.
While currently used networks willbe helpful in this task, we anticipate considerable revi-sions in the network design due to the incorporation ofTAG.
Furthermore, we have only examined some func-tional domains and a subset of realization operationsthat will be required.
These topics are the focus of ourcurrent research.7References\[Bateman ~ Paris 1989\] Bateman, J. and Paris, C.1989.
Phrasing a text in terms the user can under-stand.
In: Proceedings of the 11th International JointConference on Arlificial Intelligence, IJCAI-89, De-troit, Michigan: 1511-1517.\[Davey 1978\] Davey, A.
1978.
Discourse Production.Edinburgh University Press, Edinburgh.\[Fawcett 1980\] Fawcett, R.P.
1980.
Cognitive linguis-tics and social interaction.
Julius Groos Verlag Hei-delburg and Exter University.\[Halliday 1985\] Halliday, M. A. K. 1985.
An introduc-tion to functional grammar.
Edward Arnold, LondonEngland.\[Hudson 1971\] Hudson, R.A. 1971.
English ComplexSentences: An Introduction to Systemic Grammar.North Holland.\[Joshi 1985\] Joshi, Aravind K. 1985.
How MuchContext-Sensitivity is Necessary for ChracterizingStructural Descriptions : Tree Adjoining Grammar.In: D. Dowry, L. Karttunen, and A. Zwicky, Eds.,Natural Language Processing : Theoretical, Compu-tational and Psychological Perspectives.
CambridgeUniversity Press, New York.\[Mann 1983\] Mann, William C. 1983.
A LinguisticOverview of the Nigel: Text Generation Grammar.Technical Report ISI/RS-83-9, ISI/USC.\[Mann & Matthiessen 1985\] Mann, W. andMatthiessen, C. 1985.
Nigel: A systemic grammarfor text generation.
In: O. Freedle, Ed., SystemicPerspectives on Discourse.
Norwood, NJ.\[Matthiessen & Kasper 1985\] Matthiessen, Chris-tian and Kasper, Robert.
1985.
Representational Is-sues in Systemic Functional Grammar -and- SystemicGrammar and Functional Unification Grammar.
In:12th International Systemic Workshop, Ann Arbor,Michigan, Also appears as : ISI/USC Technical NoteRS-87-179, May 1987.\[Patten 1988\] Patten, T. 1988.
Systemic Text Gen-eration as Problem Solving.
Cambridge UniversityPress, Cambridge.\[Schabes et al 1988\] Schabes, Y., Abille, A., andJoshi, A.
1988.
Parsing Strategies with 'Lexicalized'Grammars: Application to Tree Adjoining Gram-mars.
In: Proceedings of the 12th InternationalConference on Computational Linguistics (COLING'88), Budapest, Hungary.\[Vijay-shanker & Joshi 1988\] Vijay-shanker, K. andJoshi, Aravind K. 1988.
Feature Structure BasedTree Adjoining Grammar.
In: Proceedings of the 12thInternational Conference on Computational Linguis-tics (COLING' 88), Budapest, Hungary.
