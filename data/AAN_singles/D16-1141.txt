Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 1339?1347,Austin, Texas, November 1-5, 2016. c?2016 Association for Computational LinguisticsPoet Admits // Mute Cypher: Beam Search to find Mutually EncipheringPoetic TextsCole Peterson and Alona FysheUniversity of Victoriacpeterso@uvic.ca, afyshe@uvic.caAbstractThe Xenotext Experiment implants poetry intoan extremophile?s DNA, and uses that DNAto generate new poetry in a protein form.The molecular machinery of life requires thatthese two poems encipher each other un-der a symmetric substitution cipher.
Wesearch for ciphers which permit writing underthe Xenotext constraints, incorporating ideasfrom cipher-cracking algorithms, and usingn-gram data to assess a cipher?s ?writabil-ity?.
Our algorithm, Beam Verse, is a beamsearch which uses new heuristics to navigatethe cipher-space.
We find thousands of ci-phers which score higher than successful ci-phers used to write Xenotext constrained texts.1 IntroductionFor over a decade, poet Christian Bo?k has beenworking on The Xenotext (Bo?k, 2008), a literary ex-periment which aims to insert poetry into the DNAof an extremophile organism.
In contrast to pop-ular modern data storage mediums like paper andhard disks, DNA is more robust to accidents, andrequires minimal maintenance to last hundreds oreven thousands of years (Cox, 2001).
Many groupsare actively pursuing efficient and stable ways to useDNA to encode information (Shimanovsky et al,2002; Goldman et al, 2013).
With his project, Bo?kaims to leave a lasting cultural contribution insideof an organism, which, as a result of DNA?s durabil-ity and self-replicating properties, could conceivablysurvive longer than all other existing works of art.Furthermore, Bo?k aims to craft his poem so theprotein it instructs the cell to produce is yet an-other English poem.
In a sense, Bo?k not only turnsa microbe into a genetic book, he also engineersthe microbe to be, in a sense, a poet.
The organ-ism?s molecular machinery powers this translationbetween the two texts, which, at a high level, is asymmetric substitution cipher between the letters,and is described in more detail in Section 2.
Thetwo poems (the poet?s and the organism?s) must bothplay by the rules we refer to as the Xenotext Con-straints:?
Each text is valid natural language.?
The substitution cipher function applied to onetext, results in the other text, and vice versa.
Inother words, the cipher function must be sym-metric.?
Whitespace characters (space, new line) enci-pher themselves, and are the only characters al-lowed identity mappings.After four years of work, Bo?k successfully wrotetwo English poems which satisfied the Xenotextconstraints1, becoming the first person to do so.
Thefirst challenge was finding a cipher which allowsfor two valid English texts to be written.
Finding?writable?
ciphers is difficult and is the focus of thispaper.We present Beam Verse, a language-agnostic al-gorithm driven by the target language?s n-gram data,that searches for ?writable?
ciphers, and suggestswords and phrases which can be written under them.1The two poems used the cipher (abcdefghijlmqtvukyspnoxrwz)1339We do not concern ourselves with the full biochem-ical constraints of The Xenotext (eg.
the actual im-pact of the protein and the cell?s reaction to it, orits viability after folding) and instead only considerthe Xenotext constraints listed above.
This problemsits at the intersection of natural language process-ing and cryptography, and is a prerequisite to thegenetic engineering required to fully realize a liv-ing xenotext.
Our algorithm uncovers new cipherswhich make satisfying the Xenotext constraints inEnglish possible, and makes it easier for a poet ofany language to investigate the feasibility of writingtwo mutually enciphering texts in their own tongue.2 Genetic BackgroundDNA provides instructions to a living cell to pro-duce a protein.
DNA has a double helix structure(reminiscent of a twisted ladder) and is made up offour nucleotides: adenine, cytosine, guanine, andthymine, commonly abbreviated as A, T, C, and G.Each nucleotide always appears paired with anotheracross the ?rung?
of the ladder, A with T, C with G,and vice versa.
To transfer the data in the DNA tothe protein-producing ribosome, the double helix is?unzipped?, separating the ladder at the rungs, and acopy of the exposed DNA sequence called an mRNAtranscript is synthesized, pairing in the same waythe DNA did, with the exception that adenine in theDNA strand pairs with uracil (U) in the mRNA.
Theribosome reads the mRNA as instructions to producea specific protein.
A protein is a sequence of aminoacids and each triplet of nucleotides in the mRNA(called a codon) represents one of the twenty aminoacids (see Table 2) (Campbell and Reece, 2008).We can write in the DNA of an organism by hav-ing a codon represent a letter.
When this sequenceof codons (the full poem) is read by the organism, itthen writes a sequence of amino acids, each of whichrepresent a letter, in reply2.
The letters in each poemhave a bijective relationship determined by the bio-chemical processes that link them.
For example, asshown in Table 2, the letters E and T are mutually2This makes the writing lipogrammatic, as there are only 20amino acids, and one of them (Serine) must be used as the spacecharacter.
Serine is used for the space because it is the onlyamino acid to encipher itself, as both codons AGT and TCAproduce it, mirroring the constraint that the space is mapped toitself in our ciphers.linked, as wherever the poet uses the letter E, the celluses the letter T, and vice versa.
If the poet was towrite ?mute?
instead of ?poet?, the cell would write?poet?
instead of ?mute?.Poet?s Letter P O E TDNA Codon AAC GAG CCG GGCmRNA Codon UUG CUC GGC CCGAmino Acid phenylalanine leucine glycine prolineCell?s Letter M U T ETable 1: Sample translation from text through DNA to new textThis view of DNA is extremely simplistic, andserves only to motivate and provide context for therest of this paper.
When using a codon to representa poet?s letter and an amino acid to represent oneof the organism?s letters, many complexities arisewhich add further constraints to the text, which weignore in the remainder of the paper.
When actuallyinserting his poetry into a cell, Bo?k struggled to getthe organism to express the correct protein, becausehe failed to account for the full complexity of thecell and caused the cell to ?censor?
itself (Wershler,2012).
However, we consider these additional con-straints to be future work.3 Substitution CiphersSubstitution ciphers are among the earliest knownforms of cryptography, having existed since at leastthe days of Caesar (Sinkov, 1966).
They work byreplacing one letter in the plaintext with another toform the ciphertext.
However, they are never usedin modern cryptography because, despite a largekeyspace, substitution ciphers do not change theletter frequency between plaintext and ciphertext.When properties of the plaintext are known (like thelanguage it is written in), letter or word frequencydata from that language can be used to quickly crackthe cipher and uncover the key.Every word has a deterministic encryption undera cipher.
The encrypted word could be nonsense, orit could be another word.
The word ?poet?, for ex-ample, can encrypt to many other words, including?mute?.
The ?poet?mute?
word-pair forms whatwe call a partial cipher, and notate as (poemut).
We1340say this partial cipher has a cardinality of three, asit defines three letter pairings.
A full cipher in a26-letter language has a cardinality of 13.
We alsorefer to (poemut) as a primary cipher, because it is thelowest cardinality cipher to contain the word-pairing?poet?mute?.As no characters except whitespace are allowedidentity mappings a word-pair like ?eat?cat?
isnot valid, as both a and t would have to map tothem selves.
The symmetric Xenotext constraintprohibits ?admits?
from pairing with ?cipher?, asthe letter i would require a mapping to both d andh.
However, ?admits?
can pair with the alterna-tive spelling ?cypher?, forming the primary cipher(admitscypher).
We can combine this cipher with (poemut), asnone of the letter pairs conflict with each other ?
theyare compatible with each other.
Together, they form(poeadismutcyhr).
As the letter-pairs in (poemut) and (admitscypher)are subsets of the letter-pairs in (poeadismutcyhr), we call(poemut) and (admitscypher) subciphers of (poeadismutcyhr), and saythat (poeadismutcyhr) extends (poemut) and (admitscypher).
For anytwo ciphers ?1 and ?2, we use the notation ?1 ?
?2to denote that ?1 is a subcipher of ?2.If we applied (poeadismutcyhr) to ?Poet Admits?
(thefirst part of this paper?s title), it would result ?MuteCypher?
(the second part of the paper?s title).
The ti-tle refers to the difficulty of writing under the Xeno-text constraint, as it is hard to find a cipher wherewriting is possible, most of the ciphers are mute.Once all of the possible word pairs of a target lan-guage have been discovered (Section 7) the chal-lenge becomes navigating the tradeoffs of includinga letter pair, as each letter pair eliminates the pos-sibility of using some word-pairs, while includingother word-pairs.If a language has an odd number of characters asymmetric substitution cipher is not possible usingevery letter.
We must decide which letter to leaveout of our texts.
This is accomplished by inserting anull letter (which appears nowhere in the language)into our letter set, thus giving the language an evennumber of characters.
At the conclusion of BeamVerse the letter paired with null is the character toleave out.4 Scoring a Cipher?s ?Writability?When scoring a cipher, an important considerationis what makes one cipher more ?writable?
than an-other.
We might score a cipher on the number ofvalid words under it, as having more words at yourdisposal makes it easier to write, but this is not nec-essarily so if all the words are all rare and useless.To combat this, we weight words based upon theirfrequency in language, so that better, more frequentwords contribute more to a ciphers overall score.This values highly frequent and syntactically impor-tant words, like ?the?
or ?and?, while also allow-ing a large number of infrequent words to also con-tribute significantly to the score.
However, a word?susefulness when writing mutually enciphering textsis explicitly tied to its sister word under the cipher.?The?
looses its usefulness if every time it is usedin one poem, a less frequent word like ?nag?
mustbe used in the other.
We propose that since a wordpair is only as good as its weakest word, that ciphersbe scored by taking the sum of all available wordpairs, counting the minimum frequency of the twowords.
This means that the word pair ?the?nag?would count the frequency of ?nag?.Multiple different word pairings can form thesame primary cipher.
For example, (thea) is formedby both ?the?eat?
and ?he?at?, and would countthe score of both word-pairs.
As there are alwaysless or equal primary ciphers than word-pairs, it ismore memory efficient to store the score of all theprimary ciphers than to store the scores of all theword-pairs.
We count the score of a primary cipher?p towards a full cipher ?f if it is a subcipher of ?f .Formally, if P is the set of all primary ciphers and?p ?
P , the score of ?f is??p?
?f score(?p).Alternatively, this could be expressed as a dotproduct between a vector where every element is thescore of a primary (the score vector, s), and a vec-tor indicating whether a primary cipher is a subci-pher (the heuristic vector, h), as seen in equation 1.In section 8 we show how h can be calculated ef-ficiently, and also how it can be use to provide anupper and lower bound the score of a full cipher ex-tended from a partial cipher.score = s ?
h (1)The concept of a word-pair can easily be extended1341to include longer word-level n-grams.
Like words,every n-gram either enciphers to nonsense or has asister n-gram it is locked to under a cipher.
All n-gram pairs also have an associated frequency in thelanguage, and so can contribute to the score of a ci-pher in the same way as single words do: by theminimum of the two n-gram?s frequency countingas the weight of the pair.
Using n-grams also indi-rectly captures some syntactic structure, and allowsfor generation of sample phrase and sentence gener-ation from the cipher by chaining together n-grams.These small phrases can be used to quickly proto-type poetry.
For our word list and frequency data,we use Google?s n-grams (Michel et al, 2011), butany dataset could be used, and would give differentciphers depending on the data?s source.5 Graphical and CombinatoricRepresentationThere are 7,905,853,580,625 possible symmetricsubstitution ciphers in a 26 letter language like En-glish.
Even with the efficient means of scoring ci-phers shown in section 8 (which can calculate a fullcipher?s score in ?
300 microseconds) the bruteforce solution would take over 75 years of comput-ing time.
To avoid this expensive full calculation,we formulate the problem as a graph of partial ci-phers and use beam search to navigate the graph tohigh valued full solutions.
We regret that the small-est non-trivial graph (of a 6 letter language) is toolarge to be included here; it requires 75 nodes ar-ranged in three layers which takes up an entire page,but it can be found on our website3.
An incompletegraph is shown in Figure 1.
As we search the cipherspace we trace edges up through the graph to a fullcipher solution.The size of the mth layer of a n letter languageis defined by equations 2-4.
The counts for a 26-letter language and a derivation of this equation canbe seen on our website.f(m, 0) = 1 (2)f(1, n) = n?
(n?
1)/2 (3)f(m,n) = f(m?
1, n)?f(1, n?
2?
(m?
1))/m (4)3http://www.langlearnlab.cs.uvic.ca/beamverse(astzonfj)(astonf) (aszonj)(atof) (stnf) (ason) (azoj) (sznj)(isan)(tf) (ao) (sn) (zj)(ia)[1,1,1][1,0,0] [0,1,1] [1,1,1] [1,1,1]Figure 1: An incomplete cipher-graph, showing some of thepartial ciphers which descend from (astzonfj).
Three primary ci-phers are shown in boxes, and are the same example primaryciphers used in Section 8.
Compatibility vectors (discussed inSection 8.1) are shown for every letter-pair.
Edges in this graphrepresent a difference of a letter-pair between ciphers.
Each car-dinality of partial cipher has a layer in the graph, which is ourbeam in the search.6 Beam SearchA beam search algorithm does not require us to storeall of this graph in memory, as we only examinea subset of the ciphers anticipated to be the best.Beam search works by enumerating all possibilitiesfor one step of a solution (one layer of the ciphergraph), sorting those options by a heuristic, keep-ing the best n partial solutions, and pruning the rest(Edelkamp and Schroedl, 2011).
We fully expandone step further on the best n partial solutions, re-peating the pruning and expanding process until aset of full solutions are reached.
Beam search caneffectively crack substitution ciphers, as shown byNuhn et al (2013).A static beam size could be used (keeping the bestthousand partial ciphers at each step, for example),however, the lower cardinality the partial, the morepossibilities it generates.
Every cardinality-1 partialcipher generates 276 possible cardinality-2 partialciphers, whereas a cardinality-12 partial cipher onlygenerates one possible full cipher (as there are onlytwo unpaired letters remaining, therefore they mustpair together).
A constant beam size will limit thealgorithm?s performance in later stages of the search1342if this is not accounted for.We can rearrange our recursive definition in Equa-tions 2 to 4 to determine the beam size which willgenerate exactly as many partial ciphers as we canhold in memory.
If we want to generateB ciphers inan n letter language, and are at layer m, we shouldprune the beam to b(m,n).
This can be found byreplacing replacing f(m,n) for B, and f(m?
1, n)for b(m,n) in equation 4 and rearranging to produceequation 5, removingm from equation 4 because wecannot assume duplicates will be generated.b(m,n) = Bf(1, n?
2?
(m?
1)) (5)7 Generating Primary CiphersIn order to generate the primary ciphers, we mustfind all words which can encipher with each other,and record their score.
Rather than checking everyword against every other word, many useless checkscan be avoided by hashing each word or n-gram ac-cording to the pattern of its letters, a concept whichHauer et al (2014) called ?pattern-equivalence?
andused to crack substitution ciphers.
We use a keywhich represents each letter in the n-gram with anumber or symbol, ordered by first occurrence ofthe letter, while maintaining whitespace (eg.
?andwe are??
?123 45 165?).
Another trigram like ?hisor her?
would also generate the same key, and so thetwo trigrams would be checked against each other tosee if they validly encipher, which they do, forminga primary partial cipher (andwrhisoe) .A match on the hash key does not guarantee thatthe words form a valid pairing.
Many words whichshare a key form invalid word-pairings due to thesymmetric or identity restrictions of the Xenotextconstraint (eg.
?cat?eat?, which share the key?123?, or ?admits?cipher?, which share the key?123456?
are both invalid word-pairings).
The scoreof a primary cipher is the sum of the score of allword-pairs which generate the primary.
The algo-rithm is shown in Algorithm 1.8 Beam Search HeuristicsRecall from Section 3 that, in a full cipher, all let-ters have a defined mapping (the cipher has a car-dinality of 13), while in a partial cipher some let-ters have undefined defined mappings, and that a pri-Algorithm 1 Generating Primary Ciphers1: function GENERATE PRIMARIES(ngrams)2: for word1 ?
ngrams do3: key ?
pattern(word1)4: for word2 ?
patternDict[key] do5: if mutually-encipher(word,word2) then6: primaries[encipher(word1, word2)] +=minScore(word1, word2)7: end if8: end for9: patternDict[key].add(word1)10: end for11: return primaries12: end functionmary cipher is the minimal cardinality partial cipherto contain a particular word-pair and is the build-ing block of a cipher?s score.
We explore three dif-ferent heuristics which calculate the true score forfull ciphers, and estimate the score of full ciphersextended from a partial cipher by forming an upperand lower bound.
All heuristics produce a vector h,which forms the score for a cipher when dotted withthe score vector s (Equation 1).
For full ciphers thisvector will be the same regardless of the heuristicused, and the score from Equation 1 will be the truescore of the full cipher, whereas different heuristicswill give different values for a partial cipher, andthus guide Beam Verse in different directions.
Weimplement these heuristics using bitwise operations,making them both memory and CPU efficient.To demonstrate the calculation of the heuristics,we use the following primary ciphers as a runningexample, (isan) (score: 100), (atof) (score: 82), and(onas) (score: 76), which are the same primary ci-phers as are shown in Figure 1.
These three pri-maries would form the score vector, which is sharedamongst all heuristics, is s = [100, 82, 76].
ThusP = {(isan), (atof), (onas)}, and |P | = 3.
We show theheuristic calculation for all three heuristics on thepartial cipher (aszonj).8.1 Upper Bound: Compatibility VectorRecall that two ciphers are compatible if they haveno conflicting letter-pairs.
If two ciphers are com-patible, it is possible to combine them.
Every cipher?
has a vector representing compatibility with the1343primary ciphers P .
This vector is |P | long, and con-tains a 1 in the ith element if ?
is compatible withthe ith primary cipher, and a 0 if it is not.We use a superscript c on a cipher to notate itscompatibility vector.
Here are the compatibility vec-tors for four letter-pairs, using the primary ciphersoutlined above, and are shown in Figure 1:(ia)c = [1, 0, 0], (sn)c = [1, 1, 1],(ao)c = [0, 1, 1], (zj)c = [1, 1, 1].This is an upper-bound because the primary ci-phers compatible with ?may not be compatible witheach other.
For example, the null cipher, which hasno letter pairings, is compatible with all primaryciphers, but no full cipher contains all primaries.When we combine two ciphers ?1 and ?2, whichhave compatibility vectors ?c1 and ?c2, the resultingcipher ?3 has a compatibility vector ?c3 = ?c1 ?
?c2,where ?
is the bitwise AND operation.
We calculatethe compatibility vector for every letter-pair, and cancombine those vectors to determine the compatibil-ity vector for any cipher.
The heuristic?s score for(aszonj) follows.h = (aszonj)c = (ao)c ?
(sn)c ?
(zj)c = [0, 1, 1]score(aszonj) = 100 ?
0 + 82 ?
1 + 76 ?
1 = 1588.2 Lower Bound: Guarantee VectorWe can calculate another vector, g for every cipher?
which represents whether each primary cipher isa subcipher of ?.
This forms a lower bound guar-antee because any cipher which extends from ?
willalso contain the primary ciphers in g, plus poten-tially more.
The null cipher in this case would havea heuristic vector g of all zeros, as it does not con-tain any of the primary ciphers.
Likewise, in this P ,all of the individual letter pairs ((ao), (sn), (zj)) wouldhave a heuristic vector of all zeros, as all of the pri-maries require at least two letter-pairs.Efficiently implementing this heuristic is slightlymore challenging than the compatibility heuristic.Our method, which uses bitwise operations and iscacheable like the compatibility vector.
Using thisheuristic, g of (aszonj) is [0, 0, 1], as (isan) 6?
(aszonj),(atof) 6?
(aszonj), and (ason) ?
(aszonj).This heuristic therefore scores (aszonj) as follows:score(aszonj) = 100 ?
0 + 82 ?
0 + 76 ?
1 = 768.3 Middle Ground: Medium VectorBoth of the two aforementioned heuristics haveweaknesses.
The optimistic, max heuristic does notdifferentiate between a primary cipher it already hasand one that it potentially has, and the conservativemin heuristic is greedy and short-sighted.
Our thirdheuristic incorporates elements from the first two,to ideally form a measure that is neither overly op-timistic, or overly short-sighted.
Unlike the lowerbound heuristic in Section 8.2, which requires all let-ter pairings to count a primary cipher, this mediumheuristic counts some of the primary cipher?s scoreif some of the letter-pairs are present.
For example,if a partial cipher has 3/4 of the required letter pair-ings for a primary, it would count 75% of the score.For example, (aszonj) has one of the two letter pair-ings of the first primary, (isan); one of the two let-ter pairings of the second primary, (atof); and twoof the two letter pairings of the third primary, (onas).We represent this as [0.5,0.5,1].
However, we knowfrom Section 8.2 that the first primary is incompat-ible with (aszonj), and so we do not count its score.That makes the heuristic vector h = [0, 0.5, 1], andscore(aszonj) = 100 ?
0 + 82 ?
.5 + 76 ?
1 = 117.We have now evaluated the same cipher usingthree different heuristics, all which produce a differ-ent score.
These scores are guaranteed to convergeto the same value at the full cipher.8.4 Speed improvementsTable 8.4 shows the massive performance gains ofthe heuristics, which are over 3000 times faster thanthe simplistic means of scoring by iterating over ev-ery word and checking if it enciphers to anythinguseful.9 Related WorkNuhn et al (2013) use a beam search algorithm tocrack substitution ciphers.
Our work differs fromtheir?s in several key ways: in Nuhn et al (2013)there are two distinct symbol spaces, that of the ci-phertext and that of the plaintext and so there isno concept of symmetry.
Each step of Nuhn etal.
?s beam search explores pairing a ciphertext char-acter with a plaintext character, and decides uponthe ?extension-order?
to pair the ciphertext letters,whereas each step of our search pairs two characters1344Heuristic Time Memoryword 1?
106?s all words+1int/wordmed 3?
103?s n bits/primary8.3 + 1 int/primarymin 2?
103?s n bits/primary8.2 + 1 int/primarymax 3?
102?s 1 bit/primary8.1 + 1 int/primaryTable 2: Time to score a cipher using different means, andeach mean?s memory requirements.
The word method stores thestrings of all words and enciphers them and checks if they arevalid words.
It will produce the same value as the min heuristic.together.
As such, we make 13 decisions, not 26.Additionally, the search space of the non-symmetric and symmetric ciphers are characteristi-cally different.
If the ?extension-order?
is predeter-mined as in Nuhn et al?s work, there is only onepath from the bottom of the graph to a full solution.In contrast, our graph has 13!
different paths to anyfull solution, as all the permutations of the 13 differ-ent letter pairs are valid paths.
On the one hand, thishighly connected property of the graph means thatwe can prune our beam to a smaller size, as failingto expand a partial cipher does not eliminate it fromappearing as a subcipher in a future solution like itdoes for Nuhn et al.However, the connectedness of our cipher graphdoes present new challenges.
As the Xenotext con-straints are not satisfied by one cipher, we wantto maximize the number of different solutions pre-sented to the writer which each allow for unique ex-pressive potential.
We observe, however, that theconnectedness property results in a final beam whichis smaller and less diverse than would be anticipated.This is caused by multiple partial ciphers in a beamsharing the same ?propensity?
to become an identi-cal full cipher.
We solve this by enforcing that everypartial cipher in the beam be incompatible with ev-ery other, thereby guaranteeing that no two partialciphers can share the same ?propensity?, and that allpossibilities generated from them in all future layerswill be unique.
As there are many (O(n2)) compat-ibility comparisons to be made at every beam, welimit only enforce compatibility for the first thou-sand ciphers in the beam.Our scoring function is also entirely differentfrom what would be used to crack a substitution ci-pher.
Unlike Beam Verse, cracking software is tiedto a ciphertext, and typically uses character-level n-gram data to calculate the probability that a deci-pherment is valid.
Beam Verse, on the other hand,uses word-level n-grams as the basis of scoring, andis not tied to any given text, but suggests fragmentsof text which satisfy the Xenotext constraint.10 ResultsThe raw score of a cipher changes according to thedataset, and so we report the score divided by high-est scored cipher across all of the heuristics.
Ta-ble 10 shows results using unigrams, while Table 10shows results for primary ciphers generated from bi-grams.Heuristic High Low End Beam Sizemax 0.74 0.53 12160min 0.98 0.97 4223med 0.93 0.73 13043max incomp 0.71 0.59 12160min incomp 1.00 0.97 4181med incomp 0.85 0.74 13043Bo?k 0.39Table 3: Normalized scores for three different heuristics onhighest 216 unigram primary ciphers, and a variable beam aim-ing for 215 ciphers.
?Incomp?
means that we enforce that allpartial ciphers in the beam be incompatible with each other.
Thelow value is the normalized score of the index of the shortestend beam.
This is a better comparison that the last cipher in thebeam, as the length of the beams is variable across heuristics.Heuristic High Low End Beam Sizemax 0.81 0.73 9631min 1.00 0.94 5777med 0.97 0.88 13291max incomp 0.81 0.73 9631min incomp 0.97 0.88 13301med incomp 0.97 0.84 13291Bo?k 0.23Table 4: Normalized scores for different heuristics on highest220 bigram primary ciphers, and a variable beam aiming for215 ciphers.We note that all ciphers we generate, regardless1345of heuristic, score higher than the cipher Bo?k usedto write his poems.
This suggests that there aremany ciphers other than Bo?k?s which can be usedto write Xenotext constrained poetry.
Poems writ-ten using ciphers generated from Beam Verse canbe found on our website.
However, attempting towrite with some high-scoring ciphers has revealedthat our scoring metric may be only loosely cor-related with the true ?writability?, as some cipherswhich score higher that Bo?k?s we find more difficultto write with.Bo?k?s cipher also scores relatively worse than thetop ciphers using a bigram model (Table 10).
Manyof the bigrams Bo?k uses in his poems are not fre-quent enough to be in the Google bigrams.
Anecdo-tally, we find ciphers generated using bigram data tobe more writable, as bigram models begin to capturesyntactic structure of the language.Enforcing that each cipher in the beam be in-compatible with every other showed minimal gainswith some heuristics and minimal losses in others.It does, however, guarantee that more ciphers willbe generated.
Enforcing incompatibility is probablynot worth the processing time if memory permits in-creasing the size of the beam instead.The top scoring cipher4 according to the unigrammodel performs similarly to the Bo?k cipher whenscored against the bigram model, accumulating only24% of the points the highest scoring bigram cipherdoes.
The top bigram cipher5 scores 68% of the topunigram cipher?s score when using unigram scoring,not as drastic of a difference, but still low enoughto be pruned by Beam Verse and not be discovered.The discrepancy in scores between models suggeststhat ?writable?
ciphers are excluded from our finalresults, and also encourages running Beam Verseon additional datasets to find new ciphers.
A scorewhich incorporates elements from multiple modelsof language might be explored, searching for cipherswhich perform well across all datasets.11 Further WorkWork in Kao (2011) sets out to quantify good poeticstyle and techniques.
We note that some poetic tech-niques, like alliteration and anaphora, are preserved4(abcdegijkmnqvfhlryutpswozx)5(abcdefjklnpqxightomuvrswzy)through the substitution cipher.
We could boost allit-erative n-grams to encourage Beam Verse to includealliterative n-grams.As Beam Verse is language agnostic, all of thework here is applicable to other languages.
TheXenotext constraints might be more easily satisfiedin a different language than English, perhaps a lan-guage with a smaller character set like Hawaiian(which only consists of thirteen letters).
Addition-ally, The Xenotext project as defined here only min-imally uses the organism to actively write ?
the or-ganism does not have any degree of freedom to ex-press itself as its poem is precisely determined bythe author?s poem.
However, DNA possesses com-putational power (Paun et al, 2005), which could beleveraged to generate natural language.
By takingadvantage of the complexity of the cell, its outputcould be more loosely defined, and change accord-ing to mutations in the DNA.Further investigation can also be done into quanti-fying the ?writability?
of a limited vocabulary (per-haps using semantic and grammar data), and con-strained text generation under constraint.
Poetic en-deavours with rigid mathematical constraints are notonly attempted by Bo?k.
Any work in the traditionsof the Oulipo, a primarily French-speaking group ofwriters who explore the creative potential of mathe-matical and logical constraints, would stand to ben-efit immensely from software tools designed to aidconstrained writing.
Whereas visual artists and mu-sicians have been quick to use computers to produceimages and sounds which would have been impossi-ble by traditional means, writers have been slow touse computers to produce works which would havebeen impossible to create otherwise.12 ConclusionIn this paper we present a new metric to quantify?writability?
of a symmetric substitution cipher.
Weexperiment using three different heuristics in a beamsearch, an algorithm we call Beam Verse.
We findthat our score for ?writability?, which takes the min-imum frequency of a word or n-gram pair, is effec-tive at finding candidate ciphers, but is not a perfectmetric of ?writability?
in this constrained environ-ment.
?Writability?
is highly subjective, and possi-bly requires more data than just n-gram frequency1346(eg.
semantic and grammar information).
Luckily,beam search is highly flexible, and any scoring func-tion, perhaps using a more sophisticated model ofwritability, could be used in place of the one usedhere.Source code and highly scoring ciphers are avail-able for download6.ReferencesChristian Bo?k.
2008.
The xenotext experiment.SCRIPTed, 5:228?231.Neil A. Campbell and Jane B. Reece.
2008.
Biology.Pearson, 8th edition.Jonathan PL Cox.
2001.
Long-term data storage in dna.TRENDS in Biotechnology, 19(7):247?250.Stefan Edelkamp and Stefan Schroedl.
2011.
Heuristicsearch: theory and applications.
Elsevier.Nick Goldman, Paul Bertone, Siyuan Chen, ChristopheDessimoz, Emily M LeProust, Botond Sipos, andEwan Birney.
2013.
Towards practical, high-capacity,low-maintenance information storage in synthesizeddna.
Nature, 494(7435):77?80.Bradley Hauer, Ryan Hayward, and Grzegorz Kondrak.2014.
Solving substitution ciphers with combined lan-guage models.
pages 2314?2325.Justine T Kao.
2011.
A computational analysis of poeticcraft in contemporary professional and amateur poetry.Jean-Baptiste Michel, Yuan Kui Shen, Aviva PresserAiden, Adrian Veres, Matthew K Gray, Joseph P Pick-ett, Dale Hoiberg, Dan Clancy, Peter Norvig, and JonOrwant.
2011.
Quantitative analysis of culture usingmillions of digitized books.
science, 331(6014):176?182.Tomas Mikolov, Kai Chen, Greg Corrado, and JeffreyDean.
2013.
Efficient estimation of word representa-tions in vector space.
arXiv preprint arXiv:1301.3781.Malte Nuhn, Julian Schamper, and Hermann Ney.
2013.Beam search for solving substitution ciphers.
Citeseer.Gheorghe Paun, Grzegorz Rozenberg, and Arto Salomaa.2005.
DNA computing: new computing paradigms.Springer Science & Business Media.Boris Shimanovsky, Jessica Feng, and Miodrag Potkon-jak.
2002.
Hiding data in dna.
pages 373?386.Springer.Abraham Sinkov.
1966.
Elementary cryptanalysis: Amathematical approach, mathematical association ofamerica, 1966.
Additional Reading.Darren Wershler.
2012.
The xenotext experiment, so far.Canadian Journal of Communication, 37(1):43.6http://www.langlearnlab.cs.uvic.ca/beamverse1347
