Proceedings of the 8th International Conference on Computational Semantics, pages 272?276,Tilburg, January 2009. c?2009 International Conference on Computational SemanticsFlexible Semantic Composition with DUDESPhilipp CimianoWeb Information Systems Group, TU Delft1 DUDESIn this paper we present a novel formalism for semantic construction calledDUDES (Dependency-based Underspecified Discourse REpresentationStructures).
The DUDES formalism has been designed to overcome therigidity of semantic composition based on the lambda calculus (where theorder of application is typically fixed) and provides some flexibility withrespect to the direction of the dependence and with respect to the orderof application of arguments.
In this short paper we present the DUDESformalism and work through a simple example.
DUDES bears some resem-blance to the work on ?-DRT [2] and LUDs [1] as well as with the workof Copestake et al [4] and represents a generalization of the formalism in-troduced in [3].
A detailed discussion of the relation to these formalisms isclearly out of the scope of this paper.
DUDES are characterized by threemain facts.
First, they represent semantic dependencies and are thus in-herently suitable for a dependency-based grammar formalism assuming thatsyntactic dependencies correspond to semantic dependencies (though thecorrespondence might be ?inverted?).
Second, they explicitly encode scoperelations and are thus able to yield underspecified representations as output(in contrast to the linear logic approach for LFG [5] where different scopingscorrespond to different derivations).
Third, there is one single operation forsemantic composition which is, to some extent, order-independent (in con-trast to traditional lambda-based formalisms) as well as flexible with respectto the direction of the syntactic dependency.
As the name suggests, DUDESbuilds on DRT [6] and in particular on UDRT [7] in the sense that it relies onlabeled DRSs and dominance relations between these to talk about scope.First of all, we now first formally introduce DUDES:Definition 1 (DUDES)A DUDES is a 7-tuple (m, l, t, U,A, S,C) consisting of272- A main discourse referent m and a distinguished label l- The type t of the semantic structure (after inserting all arguments)- A set U of UDRS components.
These UDRS components are in essencelabeled DRSs [6].- A set of argument quadruples (l, v, rel, type) consisting of i) a label l (the main labelof a DUDE inserted as argument, ii) the main variable v of the argument DUDE,iii) a grammatical relation and iv) a semantic type.- A set S of scope relations between labels introduced in U .- A set C of constraints on the arguments, e.g.
including ontological constraints orselectional restrictions etc.We now give the semantic representation of the entries for our runningexample: ?John likes every nice woman.?
:John:j l ?
?e, t?, t?l:jJohn(j)like:e > t>: , ?
:e:like(x,y)(l1, x, subj, ?
?e, t?, t?
), (l2, y, obj, ?
?e, t?, t?)?
?
scope(l1), l1?
>,?
?
scope(l2), l2?
>every:x l ?
?e, t?, t?l:l1:x?
l2:(l?,x,spec,?e, t?)l??
l1nice:x l ?e, t?l:nice(x)(l?, x,mod, ?e, t?
)l ?
l?woman:w l ?e, t?l:woman(w)Further, we introduce the semantic composition operation for DUDESalong a dependency tree, distinguishing tree cases:Definition 2 (Semantic Composition for DUDES)Let (?1, ?2) be an edge in some DAG (dependency tree, LTAG derivation tree or F-Structure DAG).
Assume the edge is labeled with r (a grammatical function) andthe semantics of the vertices ?1and ?2are given by DUDEs as follows: ?1:=(m1, l1, t1, U1, A1, S1, C1) and ?2= (m2, l2, t2, U2, A2, S2, C2).
Then the result of applying?2to ?1is the DUDE ?
?= ?1(?2) = (m?, l?, t?, U?, A?, S, C?
), where we need to distinguishthe following cases:if (l, v, r, t2) ?
A1if (l, v, r, t1) ?
A2(t1= t2) if (l, v, r, t1) ?
A2(t16= t2)(Complementation) (Modification) (Inversion)m?
:= m1m?
:= m1m?
:= m2t?
:= t1t?
:= t1t?
:= t2U?
:= U1?
U2U?
:= U1?
U2U?
:= U1?
U2A?
:= A1\{(l, v, r, t2)} A?
:= A1A?
:= A2\{(l, v, r, t1)}S?
:= S1?
S2S?
:= S1?
S2S?
:= S1?
S2C?
:= C1?
C2C?
:= C1?
C2C?
:= C1?
C2v ?
m2, l ?
l2v ?
m1(?
m2), l ?
l1v ?
m1, l ?
l1where ???
is the operation of unification between variables.Concerning the order of application, from the definition of the seman-tic composition operator it follows that complements and modifiers can beapplied in any order, but inversions have to be carried out at the end as273they change the mother DUDES and would thus inhibit the application ofthe complements and the modifiers.
In the following section we show howthe semantic composition operation defined above applies to a concrete ex-ample.
We will also discuss that our operations still work if (some of) thedependencies are inverted.2 A Worked ExampleWe will consider the two fol-lowing (possible) analyses forthe sentence: ?John likesevery nice woman.
?, corre-sponding to the NP analysis(a) and DP analysis (b), re-spectively.a)likesubjyyyyyyyyobjEEEEEEEEjohn womanspecyyyyyyyymodEEEEEEEEevery niceb)likesubjyyyyyyyyobjEEEEEEEEjohn everyspecwomanmodnice2.1 ComplementationGiven the dependency analysis in a) to theright, as a result of applying our seman-tic composition operator for the comple-mentation case we get a DUDES wherethe argument has been correctly inserted,the DRS components and the scope condi-tions have been merged and one argumenthas been removed.
Note that this waspossible because i) the edge was labeledwith the appropriate grammatical relation?subj?
and ii) the types of ?2and of the ar-gument match (both are of type ?
?e, t?, t?
).The resulting DUDES for [[John likes]] isshown in b) to the right.
(In case of DRSconditions which are not complex, we as-sume that the functions ?res?
and ?scope?are resolved to the identity function.
)a)e > t>: , ?
:e:like(x,y)(l1, x, subj, ?
?e, t?, t?
), (l2, y, obj, ?
?e, t?, t?)?
?
scope(l1) ?
>,?
?
scope(l2) ?
>subjj l ?
?e, t?, t?l:jJohn(j)b)e > t>: , ?
:e:like(j,y)l1:jJohn(j)(l2, y, obj, ?
?e, t?, t?)?
?
l1?
>,?
?
scope(l2) ?
>2.2 Specification and ModificationThe two possible dependency analyses for determiner/noun constructionsgive rise to two configurations, corresponding to a) and b) below, for the se-mantic composition operator.
In both cases, independent of the fact whether274the determiner is the dependent or the head, we get that first the semanticrepresentation of the adjective is applied to the one of the noun (as the mod-ifier has to be applied before the inversion is carried out in configuration a),thus yielding the two configurations in c) and d).a)w l ?e, t?l:woman(w)specyyyyyyyymodEEEEEEEEx l ?
?e, t?, t?l1:x?
l2:(l?,x,spec,?e, t?)l??
l1x l ?e, t?l:nice(x)(l?, x,mod, ?e, t?
)l ?
l?b)x l ?
?e, t?, t?l1:x?
l2:(l?,x,spec,?e, t?)l??
l1specw l ?e, t?l:woman(w)modx l ?e, t?l:nice(x)(l?, x,mod, ?e, t?
)l ?
l?c)w l ?e, t?l:woman(w),l?:nice(w)l??
lspecx l ?
?e, t?, t?l1:x?l2:(l?,x,spec,?e, t?)l??
l1d)x l ?
?e, t?, t?l1:x?l2:(l?,x,spec,?e, t?)l??
l1specw l ?e, t?l:woman(w),l?:nice(w)l??
lIn case c) we have a case of inversion, while in case d) we have a caseof complementation.
Overall, in both cases we yield the following DUDES:[[every nice woman]]=w l ?
?e, t?, t?l1:w?
l2: , l:woman(w), l?:nice(w)l??
l, l ?
l12.3 ResultAfter a further semantic composition step (case complementation), applying[[every nice woman]] (from Sec.
2.2) to [[John likes]] (from Sec.
2.1), weyield as resulting UDRS:275e > t>: , ?
:e:like(j,w), l1:jJohn(j)l:l2:w?
l3:, l?:woman(w),l?:nice(w)?
?
l1?
>,?
?
l3, l ?
>, l??
l2,l???
l?ejJohn(j)w?woman(w)nice(w)e:like(j,w)References[1] J. Bos, B. Gamba?ck, C. Lieske, Y. Mori, M. Pinkal, and K. Worm.
Compositionalsemantics in verbmobil.
In Proceedings of COLING?96, 1996.
[2] Johan Bos, Elsbeth Mastenbroek, Scott Mcglashan, Sebastian Millies, and ManfredPinkal.
A compositional drs-based formalism for nlp applications.
In Proceedings ofthe International Workshop on Computational Semantics, 1994.
[3] P. Cimiano, A. Frank, and U. Reyle.
UDRT-based semantics construction for LTAG?
and what it tells us about the role of adjunction in LTAG ?.
In Proceedings of the7th International Workshop on Computational Semantics, pages 41?52, 2007.
[4] Ann Copestake, Alex Lascarides, and Dan Flickinger.
An algebra for semantic con-struction in constraint-based grammars.
In Proceedings of ACL?01, 2001.
[5] Mary Dalrymple, John Lamping, Fernando C. N. Pereira, and Vijay Saraswat.
Linearlogic for meaning assembly.
revised version of the (overview) paper in Proc.
of theWorkshop on Computational Logic for Natural Language Processing, Edinburgh, UK.1995., 2002.
[6] H. Kamp and U. Reyle.
From Discourse to Logic.
Kluwer, 1993.
[7] Uwe Reyle.
Dealing with ambiguities by underspecification: Construction, represen-tation and deduction.
Journal of Semantics, 10(2):123?179, 1993.276
