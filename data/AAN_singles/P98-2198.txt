Locating noun phrases with finite state transducers.Jean Senel lartLADL (Laboratoire d 'automat ique  documentaire t l inguistique.
)Universit~ Paris VII2, place Jussieu75251 PARIS Cedex 05email: senella@ladl.j ussieu.frAbst rac tWe present a method for constructing, main-taining and consulting a database of propernouns.
We describe noun phrases composed ofa proper noun and/or a description of a hu-man occupation.
They are formalized by finitestate transducers (FST) and large coverage dic-tionaries and are applied to a corpus of news-papers.
We take into account synonymy andhyperonymy.
This first stage of our parsing pro-cedure has a high degree of accuracy.
We showhow we can handle requests uch as: 'Find allnewspaper articles in a general corpus mention-ing the French prime minister', or 'How is Mr. Xreferred to in the corpus; what have been his dif-ferent occupations through out the period overwhich our corpus extends?'
In the first case, nontrivial occurrences of noun phrases are located,that is phrases not containing words presentin the request~ but either synonyms, or propernouns relevant to request.
The results of thesearch is far better than than those obtained bya key-word based engine.
Most answers are cor-rect: except some cases of homonymy (where ahuman reader would also fail without more con-text).
Also, the treatment of people having sev-eral different occupations is not fully resolved.We have built for French, a library of about onethousand such FSTs., and English FSTs arc un-der construction.
The same method can be usedto locate and propose new proper nouns, sim-ply by replacing iven proper names in the sameFSTs by variables.1 In t roduct ionInformation Retrieval in full texts is one of thechallenges of the next years.
Web engines at-tempt to select among the millions of existingWeb Sites, those corresponding to some inputrequest.
Newspaper archives is another exam-1212ple: there are several gigabytes of news on elec-tronic support, and the size is increasing ev-ery day.
Different approaches have been pro-posed to retrieve precise information in a largedatabase of natural texts:1.
Key-words algorithms (e.g.
Yahoo): co-occurrences of tile different words of therequest are searched for in one same doc-ument.
Generally, slight variations ofspelling are allowed to take into accountgrammatical endings and typing errors.2.
Exact pattern algorithms (e.g.
OED): se-quences containing occurrences describedby a regular expression oll characters arelocated.3.
Statistical algorithms (e.g.
LiveTopic):they offer to the user documents containingwords of the request and also words thatare statistically and semantically close withrespect of clustering or factorial analysis.The first method is the simplest one: itgenerally provides results with an importantnoise (documents containing homographs of thewords of the request, not in relation with the re-quest, or documents containing words that havea form very close to that of the request, but witha different meaning).The second method yields excellent results, tothe extent that the pattern of the request is suf-ficiently complex, and thus allows specificationof synonymous forms.
Also, the different gram-matical endings can be described precisely.
Thedrawback of such precision is the difficulty tobuild and handle complex requests.The third approach can provide good resultsfor a very simple request.
But., as any statis-tical method, it needs documents of a huge size,and thus, cannot take into account words occur-ring a limited number of times in the database,which is the case of roughly one word out of two,according Zipf's law 1 (Zipf, 1932).We are particularly interested in finding nounphrases containing or referring to proper nouns,in order to answer the following requests:1. Who is John Major?2.
Find all document re/erring to John Major.3.
Find all people, who have been French min-isters o~ culture.With the key-word method, texts containing thesequence 'John Major' are found, but also, textscontaining 'a UN Protection Force, Major RobAnninck', 'P.
Major', 'a former Long Islander,John Jacques' and 'Mr.
Major'.The statistical approach will probably succeed(supposing the text is large enough) in associ-ating the words John Major, with the wordsBritain, prime and minister.
Therefore, itwould provide documents containing the se-quence 'the prime minister, John Major', butalso 'the French prime minister' or 'TimothyEggar, Britain's energy minister' which haveexactly the same number of correctly associ-ated words.
Such answers are an inevitableconsequence of any method not grammaticallyfounded.M.
Gross and J. Senellart (1998) have proposeda preprocessing step of the text which groups upto 50 % of the words of the text into compoundutterances.
By hiding irrelevant meanings ofsimple words which are part of compounds, theyobtain more relevant tokens.
In the precedingexample, the minimal tokens would be the com-pound nouns 'prime minister 'or 'energy minis-ter', thus, the statistical engine could not havemisinterpreted the word 'minister' in 'ene~yyminister' and in 'prime minister'.We propose here a new method based on a for-mal and full description of the specific phrasesactually used to describe occupations.
We alsouse large coverage dictionaries, and libraries ofgeneral purpose finite state transducers.
Ouralgorithm finds answers to questions of types 1,2 and 3, with nearly no errors due to silence,or to noise.
The few cases of remaining errorsare treated in section 5 and we show, that inorder to avoid them by a gencral method, onemust perform a complete syntactic analysis of1 This is t rue whatever  the size of the database is.the sentence.Our algorithm has three different applications.First, by using dictionaries of proper nouns andlocal grammars d~cribing occupations, it an-swers requests.
Synonyms and hyponyms areformally treated, as well as the chronologicalevolution of the corpus.
By consulting a pre-processed index of the database, it provides re-sults in real time.
The second application of thealgorithm consists in replacing proper nouns inFSTs by variables, and use them to locate andpropose to the user new proper nouns not listedin dictionaries.
In this way, the construction ofthe library of FSTs and of the dictionaries canbe automated at least in part.
The third ap-plication is automatic translation of such nounphrases, by constructing the equivalent rans-ducers in the different languages.In section 2, we provide the formal descriptionof the problem, and we show how we can use au-tomaton representations.
In section 3, we showhow we can handle requests.
In section 4, wegive some examples.
In section 5, we analyzefailed answers.
In section 6, we show how weuse transducers to enrich a dictionary.2 Formal  Descr ip t ionWe deal with noun phrases containing a de-scription of an occupation, a proper noun, orboth combined.
For example, 'a senior RAFo\]flcer', 'Peter Lilley, the Shadow Chancellor','Sir Terence Burns, the Treasury PermanentSecretary' or 'a former Haitian prime minister,Rosny Smarth'.
For our purpose, we must havea formal way of describing and identifying suchsequences.2.1 Descr ip t ion  of  occupat ionsWe describe occupations by means of localgrammars, which are directly written in theform of FS graphs.
These graphs are equivalentto FSTs with inverted representation (FST)(Roche and Schabes, 1997) as in figure 1, whereeach box represents a transition of the automa-ton (input of the transducer), and the labelunder a box is an output of the transducer.
Theinitial state is the left arrow, the final state isthe double square.
The optional grey boxes, (cffigure 2), represent sub-transducers: in otherwords, by 'zooming' on all sub-transducers,we view a given FST as a simple graph, withno parts singled out.
However, we insist on1213_____?nexttu r inFlgule 2 MmlstelOccupatmn giaphabFigure 1: Formal examplekeeping sub-FST automata, as they will becomputed independently, and as they allowus to keep a simple representation f complexconstructions.
The output of a grey box, isthe output of the sub-transducer.
The symbollabeled <E> represents the void transition,and the different lines inside are paralleltransitions.
Such a representation is convenientto formulate linguistic constraints.
A grapheditor (Silberztein, 1993) is available to directlyconstruct FSTs.
In theory, such FSTs are morepowerful than traditional FSTQ.In figure 1, the transducer ecognizes thesequences a, b, ca, cb.
To each of theseinput sequences, it associates an output notedval( input).
Here, val(a) = {ab}, val(b) = {b},2 I f  a sub-automaton refers to a parent automaton,we will be able to express context dependent words uchas a'*b n .val(c) is not defined as c is not recognizedby the automaton, val(ca) = {d}, andval(cb) = {b}.We define an ordering relation on the set ofrecognized sequences by a transducer T, thatis: x <_T Y ?
:~ Veeva l (x ) ,  eEval(y).
In ourexample, b --<T a and b =7- cb with derivedequality relation.We construct our transducer describing occu-pations in such a way that with this ordering 3relation:- Two sequences x, y are synonyms if and onlyif x =7- Y- The sequence y is an hyponym of x (i.e.
yis a x) if and only if x --<T Y.The transducer in figure 2 describes 4 differentsequences referring to the word minister.Sub-parts of the transducers Country andNat iona l i ty  are given in figure 3 and 4.By construction, all the sequences recognizedare grammatically correct.
For example, thevariant of minister of European affairs: minis-ter for European affairs is recognized, but not3 The equality relation --r az~d the strict comparisonare directly deduced from _<T definition.4 For the sake of clarity, it is not complete, for exam-ple it doesn't ake into account regional ministries as inUSA or in India.
It doesn't represent either the sequencedeputy prime minister.
Moreover, a large part could befactorized in a sub-automaton.1214ChineseFigure 3: Country.graphChineseFigure 4: Nationality.graphFrench minister for agriculture.
The output ofthe transducer is compatible with our definitionof order:?
val(France's culture minister)=7- {French, minister, Culture}=7-val(culture minister of France)>7- val(French minister)?
'chancellor of the Exchequer'=T 'financeminister'?
'prime minister~ T'minister' i.e.
aprime minister is a minister but 'deputyminister~7-'minister' i.e.
a deputy minister isnot a minister.Reciprocally, given an output, it easy to findall paths corresponding to this output (byinverting the inputs and the outputs in thetransducer).
This will be very useful to fornm-late answers to requests, or to translate nounphrases: the ':natural language" sequencescorresponding to the set {minister, French}are : "French minister" or "minister of France".We will note val-i({minister, French}) ={'french minister', 'minister of France'}.2.2 Full Name descriptionThe full name description is based oll thesame methodology (cf.
figure 5), exceptthat the boxes containing <PN : F?rstName> and<PN:SurName> represent words of the propernouns dictionaries.
The output of this trans-ducer is computed in a different way: the out-put is the surname, the firstname if available,and the gender implied either by the firstname,or by the short title: Mr., Sir, princess, etc ....3 Hand l ing  requests :  a dynamicd ic t ionaryIn order to instantly obtain answers for all re-quests, we build an incremental index of allmatches described by the FST library.
Atthis stage, the program proposes new possibleproper nouns not yet listed, they complete thedictionary.
Our index has the following prop-erty: when an FST is modified, it is not thewhole library which is recompiled, but only theFSTs affected by the modification.
We now de-scribe this stage and show how the program con-sults the index and the FST library to constructthe answer.3.1 Const ruct ing  the  databaseIn (Senellart, 1998), a fast algorithm thatparses regular expressions on full inverted textis presented.
We use such an algorithm forlocating occurrences of the FSTs in the text.For each FST, and for each of its occurrencesin the text, we compute the position, thelength, and the FST associated output of theoccurrence.This type of index is compressed in tile sameway entries of the full inverted text are.
Thischoice of structure has the following features:1.
There is no difference of parsing betweena 'grey (autonomous) box' and a 'nor-real one'.
Once sub-transducers have beencompiled, they behave like normal words.Thus, the parsing algorithms are exactlythe same.2.
A makefile including dependencies be-tween the different graphs is built, andmodifications of one graph triggers there-compilation of the graphs directly orindirectly dependent..
This structure is incrementah adding newtexts to the database is easy, we only needto index them and to merge the previousindex with the new one by.
a trivial pointeroperation.A description of a whole noun phrase is givenmade by the graph of figure 6.1215. .
.
.
.fFigure 5: FullName.graph~\[ Occupalion!
:::\[) \[ FullN,%'ne!ii IYFigure 6: NounPhrases.graph, the <A> label stands for any adjective.
(Information of the general purpose dictionary)We use a second structure: a dynamic propernoun dictionary ~ that relies on the indexes ofOccupat ion .graph  and Fu l lName.graph .
T)is called 'dynamic' dictionary, because the infor-mation associated to the entries depend on thelocations in the text we are looking for.
Thealgorithm that constructs T) is the following:1.
For each recognized occurrence we asso-ciate O1 which is the output of Full-Name.graph  and the output 02 of theOccupat ion .graph  (see section 4 for ex-amples).2.
If O1 is not empty., find O1 in :D: that is,find the last e in T) such that O1 <__7- e. -If there is none, create one : i.e.
associatethis FullName with the occupation 02 andwith the current location in the text.- If there exists one, and its occupation iscompatible with 02 then add the currentlocation to this entry.
Or else, create a newentry for O1 (eventually completed by theinformation from e) with its new occupa-tion 02, and pointing to the current loca-tion in the text.3.
If O1 is empty: the noun phrase is limitedto the occupation part.
Find the last entryin :D compatible with 02, and then add the1216current location to the entry.A detailed run of this algorithm is given in sec-tion 4.3.2 Consu l t ing  the  databaseGiven a request of type 1: Who is P. We firstapply tile NounPhrases .graph  to P. If P isnot recognized, the research fails.
It it is rec-ognized, we obtain two outputs O1 and 02 aspreviously mentioned.
For this type of requestO1 cannot be empty.
So we look in T) for theentries that match O1 (there can be several, of-ten when the first name is not given, or givenby its initial).
Then, we print the different oc-cupations associated to these entries.Given a request of type 2: the result is just anextension of the previous case: once we havefound the entries in T~, we print all positions as-sociated in the text.Given a request of type 3, the method isdifferent: we begin by applying the Noun-Phrases .graph  to P. In this case, O1 is empty.Then we look up the entries of 2), and check ifat some location of the text, its occupation iscompatible with the occupation of the request.4 Examples  o f  useConsider the following chronological extract ofFrench newspaper :I- M.  Jack Lan K, minlstre de i'dducation nationale et de la culture,2- ChafE& le 7 avril 1992 par M.  Lan K de rdfldchlr aux conditions de3- M.  Jack Lank  a lanc4 d imanche soir ~I la t&Idvision l'idde d'impliquer4- Commentant  Faction du mlnlstre de la culture, le premier adjolnt5- En  d4finltive l'idde de M. Lan K apparaTt comme un r~ve !6- Le directeur de l'American Ballet Theater, Kevin McKenz le  :7- M. Lan K pr~sente son pro jet de r~forme des lycdes prdvoyant8- Tous, soutenez la |oi Lan  K, par distraction, de temps en temps, ici9- M.  Jack Lan K, maire de Blols, a omclellement d~posd saI0- Sortants : Michel Fromet, suppldant de Jack LanK, se repr~sente11- De  son cotd.
Carl Lan K, secr~talre gdn@ra\] du Front national, a12- et Jack Lan K, anclen mlnlstre de \['dducatlon natlonale et de la culture,13- l'ancien ministre, Jack LanK, et son successeur, Jacques Toubon,14- Jack Lang, malre de Blois et anclen minlstre,15- ..., le nouveau ministre de l'4ducation nationale, Jacques Woubo.,- At the beginning 7) is empty.- We read the sentence h01 = {m, Jack, Lang},02 = {minister, education, culture}.
There isno entry in 7) corresponding to 01, thus wecreate in 7) the following entry :SurName=LanE, FirstName=Jack, Gender=m,(Line 1 Occupation=minis%or,education,culture)- We read the sentence 2:O1 --- {m, Lang}.
01matches the only entry in 7), and moreover as02 is empty: it also matches the entry.
Thuswe add the line 2, as a reference to this firstentry.SurName=Lan E , FirstName=Jack, Gender=m,(Line 1 ,20ccupat ion~in is ter ,educat ion .cu l ture)- At the end of the processing, 7) equals to:SurName=LanK, FirstName=Jack, Gender--m,(Line 1,2,3,4,5,70ccnpation=nlinister,educatlon,cu\]ture)(Line 9,12.13.14 Occupation----mayor,Blols)SurName=Fromet, FirstName=Mi chel, Gender=m,(Line 10 Occupat ion=min is ter .deputy ,educat ion ,cu l ture)SurName=LanK, FirstName=Carl, G ender--m,(Line I10?cupation=head-party,F~)SurName=Toubon, FirstName=Jacques, Gender=m,(Line 13,15 Occupation----mlnlster,education)Now if we search all parts of the text men-tioning the minister of culture, we applyNounPhrases .graph  to this request and wefind O1 = {}, O2 = {minister, culture}.
Theonly entries in 7) matching 02 correspond tothe lines 1,2,3,4,5,7,13,15.
This was expected,lines referring to the homonym of Jack Langhave not be considered, nor line referring JackLang designated as the mayor of Blois.5 Remain ing  er rorsSome cases are difficult to solve, as we can seein the sentence: In China, the first minister has....
The first phrase of the sentence: In China isan adverbial, and could be located everywherein the sentence.
It could even be implicit, thatis, implied by the rest of the text.
In such acase, a human reader will need the context, toidentify the person designated.
We are not able,to extract the information we need, thus the re-sult is not false, but imprecise.Another situation leads to wrong results: whenone same person has several occupations, andis designated sometimes by one, sometimes byanother.
To resolve such a case, we must repre-sent the set of occupations that axe compatible.This is a rather large project ell the 'semantics'of occupation.Finally, as we can see if figure 6, a determinerand an adjective can be found between the Full-name part, and the Occupation part.
In mostcase, it is something 'this', or 'tile', or 'the well-known', or 'our great', and can be easily de-scribed by a FST.
But in very exceptional case,we can find also complex sequences between theFullname part, and the Occupation part.
Forexample: 'M.
X, who is since 1976, the primeminister of ...'.
In this case, it is not possible,in tile current state of the developpment of outFST library, to provide a complete description.6 Bu i ld ing  the  d ic t ionar ies  and  thedatabaseThe results of our approach is in proportion tilesize of the database we use.
We show that us-ing variables in FSTs, and the bootstrappingmethod, this constraint is not as huge it seems.One can start with a minimal database and im-prove tile database, when testing it on a newcorpus.
Suppose for example, that the databaseis empty (we only have general purpose dictio-naries).
We ask the system to find all occur-rences of the word 'minister', the result has thefollowing form of concordance.
"The I s rae l i  fo re ign  minister.
$himon Peres.
said the internthe  Russian foreign minister.
Indrei V. gozyrev, was l ike lyBerlusconi as prime minister,  but ty i s sue  ought  to  be the?oturi ,  as  the  Creek min is ter  o f  cu l tu re ,  thought  up the  ide1217fir:~ deputy prime minister, Oleg Soskove~s; Moscow has plOn this small sample, we see that it is in-teresting to search the different occurrences of" (<A>+<N>)  <minister>" and we obtain thelist: prime, foreign, Greek, finance, trade,interior, Cambodian, ...We separate automatically in this list, wordswith uppercase first letter and lowercase words.This provide a first draft for a Nationality dic-tionary (on a 1Mo corpus, we obtain 234 entries(only with this simple rule).
The list is thenmanually checked to extract noise as 'Trademinister of ...'.
We then sort the lowercaseadjective and begin to construct he ministergraph.
We find directly 23 words in the sub-graph "SpecialityMinisterLeft", plus the specialcompounds "prime minister" and "chief min-ister".
We then apply this graph to the cor-pus and attempt o extend occurrences to theleft and to the right.
We notice that we canfind a name of country with an "'s"just tothe left of the occupation, and thus we catchpotential names of country with the followingrequest :  "\[A-Z\]\[a-z\]*'s :MinisterOccupation",where \[A-Z\] \[a-z\]  * is any word beginning withan uppercase l tter.
This is an example of vari-able in the automaton.
Pursuing this text-basedmethod and starting from scratch, in roughly10 minutes, we build a first version of the dic-tionaries: Country (87 entries) and Nationality(255 entries), Firstname (50 entries), Surname(47 entries), plus a first version of the Minis-terOccupation and the FullName FSTs... Thegraphical tools and the real-time parsing algo-rithms we use are crucial in this construction.Remark that the strict domain of proper nouncannot be bounded: when we describe occupa-tions in companies, we must catch the companynames.
When we describe the medical occupa-tion, we are lead to catch the hospital names...Very quickly the coverage of the database n-larges, and dictionaries of names of companies,of towns must be constructed.
Concerning theFrench, in a newspaper corpus, one word out oftwenty is included in a occupation sequence: i.e.one sentence out of two in our corpus containedsuch noun phrase.7 Conclus ionIn conclusion, we have developed this systemfirst for the French language, with very goodresults.
It partially solves the problem ofInformation Retrieval for this precise domain.In fact the "occupation" domain is not closed:is a "thief" an occupation ?
To avoid suchdifficulties, and in order to reach a goodcoverage of the domain, we have describedessentially institutional occupations.
We knowfull well that if we want to be precise, a verydeep semantic description should be done:for example, it is not sure that we can say a"prime minister" of France is comparable witha "prime minister" of UK ?
One of strengthof the described system is that it enables usto gather information present in different loca-tions of the corpus, which improves punctualdescriptions.
Another interest of having suchrepresentations for different languages is apossibly automatic translation for such nounphrases.
The output of the source languagewill be used in the target language of FSTs toidentify paths having the same output, hencethe same meaning.
We are working to adaptthe representation to other languages, such asEnglish and the challenge is not only to repeatthe same work on another language, but to keepthe same output for two synonyms in Frenchand English, which is not easy, because someoccupations are totally specific to a language.Our method is totally text-based, and the ap-propriate tools allow us to enrich the databaseprogressively.
We strongly believe that thecomplete description of such noun phrases isneeded (for all needs: IR, translation, syntacticanalysis...), and our interactive method whichis quite efficient o this aim.ReferencesM.
Gross and J. Senellart.
1998.
Nouvellesbases pour une approche statistique.
InJADT98, Nice, France.E.
Roche and Y. Schabes, eds.
1997.
Finitestate language processing.
MIT Press.Jean Senellart.
1998.
Fast pattern matching inindexed texts.
Being published in TCS.M.
Silberztein.
1993.
Dictionnairesdlectroniques et analyse automatique detextes.
Masson.Zipf.
1932.
Selected Studies of the Principleof Relative Frequencies in Language.
Cam-bridge.1218RdsumdNous prdsentons une mdthode permet-tant de construire et de maintenir semi-automatiquement (avec vdrification manuelle)une base de donnde de noms propres associdsdes professions.
Nous ddcrivons exactementles groupes nominaux composds d'un norapropre et/ou d'une sdquence ddcrivant uneprofession.
La description est faite "~ l'aide detransducteurs finis et de dictionnaires &usagecourant ~ large couverture.
Nous montronsensuite comment nous pouvons traiter desrequites du type: 'Quels sont les articles dansle corpus mentionnant le premier ministrefran~ais ?
', ou 'Comment Mr. X est ddcrit,quelles ont dtd ses diffdrentes professions aucours de la pdriode couverte par notre corpus?'
Dans le premier cas, des occurrences nontriviales sont trouvdes: par exemple, cellesne comportant pas de roots de la requite,mais des constructions synonymes ou m~mele nora propre associd ~ cette profession paxdes occurrences prdcddentes.
Le rdsultat d'unetelle recherche est donc laxgement supdrieur~t ce qu'on obtient par mots-clefs, ou parassociation statistique.
Mis ~ part quelques casd'homonymies, toutes les rdponses sont exactes,certaines peuvent ~tre imprdcises.
Nous avonsconstruit pour le fran~.ais, une telle bibliothbquede transducteurs finis, et un travail analogueest en cours pour l'anglais.
D'une manibreaussi importante que le formalisme utilisd, nousmontrons comment l'utilisation d'une interfaceconviviale de construction de graphe rendpossible une telle ddmaxche.
Nous montronscomment utiliser ces m~mes transducteurs pourcompldter les dictionnaires de noms propres,et donc d'avoir de meilleurs rdsultats.
Nousmontrons enfin comment de tels transducteurspeuvent ~tre utilisds pour traduire les termesddcrivant des professions.1219
