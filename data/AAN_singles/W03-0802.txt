WHAT: An XSLT-based Infrastructure for the Integration of NaturalLanguage Processing ComponentsUlrich Sch?ferLanguage Technology Lab, German Research Center for Artificial Intelligence (DFKI)Stuhlsatzenhausweg 3, D-66123 Saarbr?cken, GermanyUlrich.Schaefer@dfki.deAbstractThe idea of the Whiteboard project is to integratedeep and shallow natural language processingcomponents in order to benefit from their synergy.The project came up with the first fully integratedhybrid system consisting of a fast HPSG parser thatutilizes tokenization, PoS, morphology, lexical,named entity, phrase chunk and (for German)topological sentence field analyses from shallowcomponents.
This integration increases robustness,directs the search space and hence reducesprocessing time of the deep parser.
In this paper, wefocus on one of the central integration facilities, theXSLT-based Whiteboard Annotation Transformer(WHAT), report on the benefits of XSLT-basedNLP component integration, and present examplesof XSL transformation of shallow and deepannotations used in the integrated architecture.
Theinfrastructure is open, portable and well suited for,but not restricted to the development of hybrid NLParchitectures as well as NLP applications.1 IntroductionDuring the last decade, SGML and XML have becomean important interchange format for linguistic data, bethey created manually by linguists, or automatically bynatural language processing (NLP) components.LT-XML (Brew et al 2000), XCES (Ide and Romary2001) and many other are examples for XML-based orXML-supporting software architectures for naturallanguage processing.The main focus of the Whiteboard project (2000-2002)was to integrate shallow and deep natural languageprocessing components.
The idea was to combine bothin order to benefit from their advantages.
Successful andbeneficial integration included tokenization, PoS,morphology, lexical, named entity, phrase chunk and(for German) topological sentence field levels in a fullyautomated XML-based system.
Crysmann et al (2002)and Frank et al (2003) show that this close deep-shallow combination significantly increases robustnessand performance compared to the (already fast)standalone deep HPSG parser by Callmeier (2000).
Theonly comparable architecture so far was described byGrover et al (2002), but their integration was limited totokenization and PoS tagging (the shallow chunker didnot guide or contribute to deep analysis).In this paper, we will focus on one of the centralintegration facilities, the XSLT-based WhiteboardAnnotation Transformer (WHAT), report on thebenefits of XSLT-based NLP component integration,and present examples of XSL transformation of shallowand deep annotations used in the integrated architecture.Because the infrastructure is in general independent ofdeep or shallow paradigms, it can also be applied topurely shallow or deep systems.2 Whiteboard: Deep-Shallow IntegrationDeep processing (DNLP) systems1 try to apply as muchlinguistic knowledge as possible during the analysis ofsentences and result in a uniformly representedcollection of the knowledge that contributed to theanalysis.
The result often consists of many possibleanalyses per sentence reflecting the uncertainty whichof the possible readings was intended ?
or no answer atall if the linguistic knowledge was contradictory orinsufficient with respect to the input sentence.Shallow processing (SNLP) systems do not attempt toachieve such an exhaustive linguistic analysis.
They aredesigend for specific tasks ignoring many details ininput and linguistic framework.
Utilizing rule-based(e.g., finite-state) or statistics-based approaches, theyare in general much faster than DNLP.
Due to the lackof efficiency and robustness of DNLP systems, the trendin application-oriented language processing systemdevelopment in the last years was to improve SNLPsystems.
They are now capable of analyzing Megabytesof texts within seconds, but precision and qualitybarriers are so obvious (especially on domains thesystems where not designed for or trained on) that aneed for 'deeper' systems re-emerged.
Moreover,1 In this paper, 'deep' is nearly synonymous to typedunification-based grammar formalisms, e.g.
HPSG(Pollard and Sag 1994), although the infrastructure mayalso apply to other deep linguistic frameworks.semantics construction from an input sentence is quitepoor and erroneous in typical shallow systems.But also development of DNLP made advances duringthe last few years, especially in the field of efficiency(Callmeier 2000).A promising solution to improve quality of naturallanguage processing is the combination of deep andshallow technologies.
Deep processing benefits fromspecialized and fast shallow analysis results, shallowprocessing becomes 'deeper' using at least partial resultsfrom DNLP.Many natural language processing applications couldbenefit from the synergy of the combination of deep andshallow, e.g.
advanced information extraction, questionanswering, or grammar checking systems.The Whiteboard architecture aims at integratingdifferent language technology components.
Both onlineand offline coupling of existing software modules issupported, i.e., the architecture provides direct access tostandoff XML annotation as well as programminginterfaces.
Applications communicate with thecomponents through programming interfaces.
A multi-layer chart holds the linguistic processing results in theonline system memory while XML annotations can beaccessed online as well as offline.
Figure 1 gives anoverview of the general architecture called WHAM(WHiteboard Annotation Machine).There are two main points of the architecture that areimportant to stress.
First, the different paradigms ofDNLP and SNLP are preserved throughout thearchitecture, e.g.
there is a shallow and a deepprogramming interface.The second point is that the WHAM offersprogramming interfaces which are not simply DOMinterfaces isomorphic to the XML markup they arebased on, but hierarchically defined classes.
E.g., a fastindex-sequential storage and retrieval mechanism basedon XML is encapsulated through the shallowprogramming interface.
However, while the typedfeature structure-based programming interface to deepcomponents is stable, it turned out that the XML-basedinterface was too inflexible when new, mainly shallow,components with new DTDs had to be integrated.Therefore, a more flexible approach had to be devised.3 WHAT: The Whiteboard AnnotationTransformerThe main motivation for developing an XSLT-basedinfrastructure for NLP components was to provideflexible access to standoff XML annotations producedby the components.XSLT (Clark 1999) is a W3C standard language for thetransformation of XML documents.
Input of an XSLtransformation must be XML, while output can be anysyntax (e.g., XML, text, HTML, RTF, or evenprogramming language source code, etc.).
The power ofXSLT mainly comes from its sublanguage XPath (Clarkand DeRose 1999), which supports access to XMLstructure, elements, attributes and text through concisepath expressions.
An XSL stylesheet consists oftemplates with XPath expressions that must match theinput document in order to be executed.
The order inwhich templates are called is by default top-down, leftto right, but can be modified, augmented, or suppressedthrough loops, conditionals, and recursive call of(named) templates.WHAT, the WHiteboard Annotation Transformer, isbuilt on top of a standard XSL transformation engine.
Itprovides uniform access to standoff annotation throughqueries that can either be used from non-XML awarecomponents to get access to information stored in theannotation (V and N queries), or to transform (modify,enrich, merge) XML annotation documents (D queries).While the WHAT is written in a programming languagesuch as Java or C, the XSL query templates that arespecific for a standoff DTD of a component's XMLoutput are independent of that programming language,i.e., they must only be written once for a newXMLstandoffmarkupcomponent-specific XSLTtemplate libraryconstructedXSLTstylesheetqueryresultXSLTprocessorWHATFigure 1: Whiteboard Architecture: WHAMFigure 2: WHAT Architecturedeep NLPcomponentsprogram-minginterfaceshallowNLPcomponents XMLstandoffannotationmultilayerchartNLP-basedapplicationWHATWHAMcomponent and are collected in a so-called templatelibrary.3.1 WHAT QueriesBased on an input XML document (or DOM object), aWHAT query that consists of?
component name,?
query name, and?
query-specific parameters such as an index oridentifieris looked up in the XSLT template library for thespecified component, an XSLT stylesheet is returnedand applied to the XML document by the XSLTprocessor.
The result of stylesheet application is thenreturned as the answer to the WHAT query.
There arebasically three kinds of results:?
strings (including non-XML output, e.g.
RTF oreven programming language source code)?
lists of unique identifiers denoting references tonodes in the XML input document?
XML documentsIn other words, if we formulate queries as functions, weget the following query signatures:?
getValue: C ?
D ?
P* ?
S*?
getNodes: C ?
D ?
P* ?
N*?
getDocument: C ?
D ?
P* ?
Dwhere C is the component, D an XML document, P* a(possibly empty) sequence of parameters, S* a sequenceof strings, and N* a sequence of node identifiers.We now give examples for each of the query types.3.1.1 V-queries (getValue)V-queries return string values from XML attributevalues or text.
The simplest case is a single XPathlookup.
As an example, we determine the type of namedentity 23 in a shallow XML annotation produced by theSPPC system (Piskorski and Neumann 2000).The WHAT querygetValue("NE.type", "de.dfki.lt.sppc", 23)would lead to the lookup of the following query in theXSLT template library for SPPC<query name="getValue.NE.type" component="de.dfki.lt.sppc"><!-- returns the type of named entity as number --><xsl:param name="index"/><xsl:template match="/WHITEBOARD/SPPC_XML//NE[@id=$index]"><xsl:value-of select="@type"/></xsl:template></query>On appropriate SPPC XML annotation, containing thenamed entity tag e.g.
<NE id="23"type="location"?> somewhere below the root tag,this query would return the String "location".By adding a subsequent lookup to a translation table(through XML entity definitions or as part of the inputdocument or of the component-specific templatelibrary), it would also be possible to translate namings,e.g.
in order to map SPPC-annotation-specific namingsto HPSG type names.We see from this example how the WHAT helps toabstract from component-specific DTD structure andnamings.
However, queries need not be that simple.Complex computations can be performed and the returnvalue can also be numbers, e.g., for queries that countelements, words, etc.3.1.2 N-queries (getNodes)An important feature of WHAT is navigation in theannotation.
N-queries compute and return lists of nodeidentifiers that can again be used as parameters forsubsequent (e.g.
V-)queries.The sample query returns the node identifiers of allnamed entities (NE tags) that are in the given range oftokens (W tags).
The template calls a recursive auxiliarytemplate that seeks the next named entity until the endof the range is reached.
The WHAT querygetNodes("W.NEinRange", "de.dfki.lt.sppc",3,19)would lead to the lookup of the following query in theXSLT template library for SPPC.<query name="getNodes.W.NEinRange" compon.="de.dfki.lt.sppc"><!-- returns NE nodes starting exactly at token $index to(at most) token $index2 --><xsl:param name="index"/> <xsl:param name="index2"/><xsl:template match="/"><xsl:variable name="startX"select="/WHITEBOARD/SPPC_XML//W[@id=$index]/ancestor::NE"/><xsl:if test="$startX//W[1]/@id = $index"><xsl:call-template name="checknextX"><xsl:with-param name="nextX" select="$startX"/><xsl:with-param name="lastW" select="$index2"/></xsl:call-template></xsl:if></xsl:template><xsl:template name="checknextX"><!-- auxiliary template (recursive) --><xsl:param name="nextX"/><xsl:param name="lastW"/><xsl:variable name="Xtokens" select="$nextX//W"/><xsl:if test="number(substring($Xtokens[last()]/@id, 2))&lt;= number(substring($lastW, 2))"><xsl:value-of select="$nextX/@id"/><xsl:text> </xsl:text><xsl:call-template name="checknextX"><xsl:with-param name="nextX"select="/WHITEBOARD/SPPC_XML//NE[@id=concat('N', string(1 +number(substring($nextX/@id,2))))]"/><xsl:with-param name="lastW" select="$lastW"/></xsl:call-template></xsl:if></xsl:template></query>Again, the query forms an abstraction from DTDstructure.
E.g., in SPPC XML output, named entityelements enclose token elements.
This need not be thecase for another shallow component; its template wouldbe defined differently, but the query call syntax wouldbe the same.3.1.3 D-queries (getDocument)D-queries return transformed XML documents - this isthe classical, general use of XSLT.
Complextransformations that modify, enrich or produce(standoff) annotation can be used for many purposes.Examples are?
conversion from a different XML format?
merging of several XML documents into one?
auxiliary document modifications, e.g.
to addunique identifiers to elements, sort elements etc.?
providing interface to NLP applications (up tocode generation for a programming languagecompiler?)?
visualization and formatting (Thistle, HTML,PDF, ?)?
perhaps the most important is to do (linguistic)computation and transformation in order to turn aWHAT query into a kind of NLP componentitself.
This is e.g.
intensively used in the shallowtopological field parser integration we describebelow.
Multiple queries are applied in a sequenceto transform a topological field tree into a list ofconstraints over syntactic spans that are used forinitialization of the deep parser's chart.
One ofthese WHAT queries has more than 900 lines ofXSLT code.We can show only a short example here, a query thatinserts unique identifier attributes into an arbitrary XMLdocument without id attributes.<query name="getDocument.generateIDs"><!-- generate unique id for each element --><xsl:template match="*"><xsl:copy select=".
"><xsl:attribute name="id"><xsl:value-of select="generate-id()"/></xsl:attribute><xsl:for-each select="@*"><xsl:copy-of select=".
"/></xsl:for-each><xsl:apply-templates/></xsl:copy>/xsl:template></query>Note that this is an example for a stylesheet that iscompletely independent of a DTD, it just works on anyXML document ?
and thus shows how generic XSLtransformation rules can be.Another example is transformation of XML treerepresentations into Thistle trees (arbora DTD; seeCalder 2000).
While the output DTD is fixed, this isagain not true for the input document which can containarbitrary element names and branches.
Thistlevisualizations generated through WHAT are shown inFig.
4, 5 and 6 below.3.2 Components of the Hybrid SystemThe WHAT has been successfully used in theWhiteboard architecture for online analysis of Germannewspaper sentences.
For more details on motivationand evaluation cf.
Frank et al (2003) and Becker andFrank (2002).
The simplified diagram in Figure 3depicts the components and places where WHAT comesinto play in the hybrid integration of deep and shallowprocessing components (V, N, D denote the WHATquery types).
The system takes an input sentence, andruns three shallow systems on it:?
the rule-based shallow SPPC (Piskorski andNeumann 2000) for named entity recognition,?
TnT/Chunkie, a statistics-based shallow PoStagger and chunker by (Skut and Brants 1998),?
LoPar, a probabilistic context-free parser (Schmid2000), which takes PoS-tagged tokens as input,and produces binary tree representations ofsentence fields, e.g., topo.bin in Fig.
4.
For ajustification for binary vs. flat trees cf.
Becker andFrank (2002).The results of the components are three standoffannotations of the input sentence.
Then, a sequence ofD-queries is applied to flatten the binary topologicalfield trees (result is topo.flat, Fig.
5), merge withshallow chunk information from Chunkie (topo.chunks,Fig.
6), and apply the main D-query computing bracketinformation for the deep parser from the merged topotree (topo.brackets, Fig.
7).Finally, the deep parser PET (Callmeier 2000), modifiedas described in Frank et al (2003), is started with achart initialized using the shallow bracket information(topo.brackets) through WHAT V and N queries.
PETalso accesses lexical and named entity information fromSPPC through V queries.input sentenceSPPC TnTLoPar Chunkietopo.bintopo.flattopo.bracketstopo.chunksPETDDDDV, NWHAT-based applicationD,V,NFigure 3: WHAT in the hybrid parserAgain, WHAT abstraction facilitates exchange of theshallow input components of PET without needing torewrite the parser's code.The dashed lines in Figure 3 indicate that a WHAT-based application can have access to the standoffannotation through D, V or N queries.The Thistle diagrams below are created via D queriesout of the intermediate topo.
* trees.Figure 4.
A binary tree as result of the topoparser(topo.bin).Figure 5.
The same tree after flattening (topo.flat).Figure 6.
The topo tree merged with chunks(topo.chunks).<TOPO2HPSG type="root" id="5608"><MAP_CONSTR id="T1" constr="v2_cp" left="W1" right="W13"/><MAP_CONSTR id="T2" constr="v2_vf" left="W1" right="W2"/><MAP_CONSTR id="T3" constr="vfronted_vfin+rk" left="W3" right="W3"/><MAP_CONSTR id="T4" constr="vfronted_vfin+vp+rk" left="W3" right="W13"/><MAP_CONSTR id="T5" constr="vfronted_vp+rk" left="W4" right="W13"/><MAP_CONSTR id="T6" constr="vfronted_rk-complex" left="W7" right="W7"/><MAP_CONSTR id="T7" constr="vl_cpfin_compl" left="W9" right="W13"/><MAP_CONSTR id="T8" constr="vl_compl_vp" left="W10" right="W13"/><MAP_CONSTR id="T9" constr="vl_rk_fin+complex+f" left="W12" right="W13"/><MAP_CONSTR id="T10" constr="extrapos_rk+nf" left="W7" right="W13"/></TOPO2HPSG>Figure 7.
The extracted brackets (topo.brackets)3.3 Accessing and Transforming DeepAnnotationIn the sections so far, we showed examples for shallowXML annotation.
But annotation access should not stopbefore deep analysis results.
In this section, we turn todeep XML annotation.
Typed feature structures providea powerful, universal representation for deep linguisticknowledge.While it is in general inefficient to use XML markup torepresent typed feature structures during processing(e.g.
for unification, subsumption operations), there areseveral applications that may benefit from astandardized system-independent XML markup of typedfeature structures, e.g., as exchange format for?
deep NLP component results (e.g.
parser chart)?
grammar definitions?
feature structure visualization or editing tools?
feature structure 'tree banks' of analysed textsSailer and Richter (2001) propose an XML markupwhere the recursive embedding of attribute-value pairsis decomposed into a kind of definite equivalences ornon-recursive node lists (triples of node ID, type nameand embedded lists of attribute-node pairs).
The onlyadvantage we see for this kind of representation is itsproximity to a particular kind of feature structureimplementation.We adopt an SGML markup for typed featurestructures originally developed by the Text EncodingInitiative (TEI) which is very compact and seems to bewidely accepted, e.g.
also in the Tree AdjoiningGrammar community (Issac 1998).
Langendoen andSimons (1995) give an in-depth justification for thenaming and structure of a feature structure DTD.
Wewill focus here on the feature structure DTD subset thatis able to encode the basic data structures of deepsystems such as LKB (Copestake 1999), PET(Callmeier 2000), PAGE, or the shallow systemSProUT (Becker et al 2002) which have a subset ofTDL (Krieger and Sch?fer 1994) as their common basicformalism2:<?xml version="1.0" ?><!-- minimal typed feature structure DTD --><!ELEMENT FS ( F* ) ><!ATTLIST FS type NMTOKEN #IMPLIEDcoref NMTOKEN #IMPLIED ><!ELEMENT F ( FS ) ><!ATTLIST F name NMTOKEN #REQUIRED >The FS tag encodes typed Feature Structure nodes, Fencodes Features.
Atoms are encoded as typed Featurestructure nodes with empty feature list.
An important2 Encoding of type hierarchies or other possibly systemor formalism-specific definitions are of course notcovered by this minimal DTD.point is the encoding of coreferences (reentrancies)between feature structure nodes which denote structuresharing.
For the sake of symmetry in therepresentation/DTD, we do not declare the corefattribute as ID/IDREF, but as NMTOKEN.An application of WHAT access or transformation ofdeep annotation would be to specifiy a feature pathunder which a value (type, atom, or complex FS) is tobe returned.
The problem here are the coreferenceswhich must be dereferenced at every feature level of thepath.
A general solution is to recursively dereference allnodes in the path.We give only a limited example here, a query to accessoutput of the SProUT system.
It returns the value (type)of a feature somewhere under the specified attribute in adisjunction of typed feature structures, assuming that weare not interested here in structure sharing betweencomplex values.<query name="getValue.fs.attr" component="de.dfki.lt.sprout"><xsl:param name="disj"/><xsl:param name="attr"/><xsl:template match='DISJ[$disj]'><xsl:variable name="node" select='.//F[@name=$attr]/FS'/><xsl:choose><xsl:when test="$node/@type"><xsl:value-of select="$node/@type"/></xsl:when><xsl:otherwise><xsl:if test="$node/@coref"><xsl:call-template name="deref"><xsl:with-param name="coref"select="$node/@coref"/></xsl:call-template></xsl:if></xsl:otherwise></xsl:choose><xsl:apply-templates/></xsl:template><xsl:template name="deref"><xsl:param name="coref"/><xsl:for-each select=".//FS[@coref=$coref]"><xsl:if test='@type'><xsl:value-of select="@type"/></xsl:if></xsl:for-each></xsl:template></query>To complete the picture of abstraction through WHATqueries, we can imagine that the same types of query arepossible to access e.g.
the same morphologyinformation in both shallow and in deep annotation,although their representation within the annotationmight be totally different.3.4 Efficiency of XSLT ProcessorsProcessing speed of current XSLT engines on largeinput documents is a problem.
Many XSLTimplementations lack efficiency (for an overview cf.xmlbench.sourceforge.net).
Although optimization ispossible (e.g.
through DTD specification, indexing etc.
),this is not done seriously in many implementations.However, there are several WHAT-specific solutionsthat can help making queries faster.
A pragmatic one ispre-editing of large annotation files.
An HPSG parsere.g.
focuses on one sentence at a time and does notexceed the sentence boundaries (which can bedetermined reliably by shallow methods) so that itsuffices to split shallow XML input into per-sentenceannotations in order to reduce processing time to areasonable amount.Another solution could be packing several independentqueries into a 'prepared statement' in one stylesheet.However, as processing speed is mainly determined bythe size of the input document, this does not speed upprocessing time substantially.WHAT implementations are free to be based on DOMtrees or plain XML text input (strings or streams).
DOMtree representations are used by XSLT implementationssuch als libxml/libslt for C/Perl/Python/TCL or Xalanfor Java.
Hence, DOM implementations of WHAT arepreferable in order to avoid unnecessary XML parsingwhen processing multiple WHAT transformations onthe same input and thus help to improve processingspeed.As in all programming language, there a multiplesolutions for a problem.
An XSL profiling tool (e.g.xsltprofiler.org) can help to locate inefficient XSLTcode.3.5 Related WorkAs argued in Thompson and McKelvie (1997), standoffannotation is a viable solution in order to cope with thecombination of multiple overlapping hierarchies and theefficiency problem of XML tree modification for largeannotations.Ide (2000) gives an overview of NLP-related XML coretechnologies that also strives XSLT.We adopt the pragmatic view of Carletta et al (2002),who see that computational linguistics greatly benefitsfrom general XMLification, namely by getting for freestandards and advanced technologies for storing andmanipulating XML annotation, mainly through W3Cand various open source projects.
The trade-off for thisbenefit is a representation language somewhat limitedwith respect to linguistic expressivity.NiteQL (Evert and Voormann 2002) can be seen as anextension to XPath within XSLT, has a more concisesyntax especially for document structure-relatedexpressions and a focus on timeline support withspecialized queries (for speech annotation).
The querylanguage in general does not add expressive power toXSLT and the implementation currently only supportsJava XSLT engines.Because of unstable standardization and implementationstatus, we did not yet make use of XQuery (Boag et al2002).
XQuery is a powerful, SQL-like query languageon XML documents where XPath is a subset rather thana sublanguage as in XSLT.3.6 Advantages of WHATWHAT is?
based on standard W3C technology (XSLT)?
portable.
As the programming language-specificwrapper code is relatively small, WHAT caneasily be ported to any programming language forwhich an XSLT engine exists.
Currently, WHATis implemented in Java (JAXP/Xalan) and C/C++(Gnome libxml/libxslt).
Through libxml/libxslt, itcan also easily be ported to Perl, Python, Tcl andother languages?
easy to extend to new components/DTDs.
Thishas to be done only once for a component throughXSLT query library definitions, and access will beavailable immediately in all programminglanguages for which a WHAT implementationexists?
powerful (mainly through XPath which is part ofXSLT).WHAT can be used?
to perform computations and complextransformations on XML annotation,?
as uniform access to abstract from component-specific namings and DTD structure, and?
to exchange results between components (e.g., togive non-XML-aware components access toinformation encoded XML annotation),?
to define application-specific architectures foronline and offline processing of NLP XMLannotation.4 Conclusion and Future WorkWe have presented an open, flexible and powerfulinfrastructure based on standard W3C technology forthe online and offline combination of natural languageprocessing components, with a focus on, but not limitedto, hybrid deep and shallow architectures.The infrastructure is part of the Whiteboard architectureand is employed and will be continued in severalsuccessor projects.
The infrastructure is well suited forrapid prototyping of hybrid NLP architectures as well asfor developing NLP applications, and can be used toboth access NLP XML markup from programminglanguages and to compute or transform it.Because WHAT is an open framework, it is worthconsidering XQuery as a future extension to WHAT.Which engine to ask, an XSLT or an XQuery processor,could be coded in each <query> element of the WHATtemplate library.WHAT can be used to translate to the ingenious Thistletool (Calder 2000) for visualization of linguisticanalyses and back from Thistle in editor mode, e.g.
formanual, graphical correction of automatically annotatedtexts for training etc.A proximate approach is to combine WHAT with SDL(Krieger 2003) to declaratively specify WHAT-basedNLP architectures (pipelines, loops, paralleltransformation) that can be compiled to Java code.The proximity to W3C standards suggests using WHATdirectly for transformation of NLP results intoapplication-oriented (W3C) markup, or to use W3Cmarkup (e.g.
RDF) for semantic web integration inNLP, VoiceXML, etc.5 AcknowledgementsI would like to thank my collegues, especially AnetteFrank, Bernd Kiefer, Hans-Ulrich Krieger and G?nterNeumann, for cooperation and many discussions.This work has been supported by a grant from theGerman Federal Ministry of Education and Research(FKZ 01IW002).This document was generated partly in the context ofthe DeepThought project, funded under the ThematicProgramme User-friendly Information Society of the 5thFramework Programme of the European Community ?
(Contract N?
IST-2001-37836).
The author is solelyresponsible for its content, it does not represent theopinion of the European Community and theCommunity is not responsible for any use that might bemade of data appearing therein.6 ReferencesMarkus Becker and Anette Frank.
2002.
A StochasticTopological Parser of German.
Proceedings ofCOLING-2002, pp 71-77, Taipei.Markus Becker, Witold Dro?d?y  ski, Hans-UlrichKrieger, Jakub Piskorski, Ulrich Sch?fer, Feiyu Xu.2002.
SProUT - Shallow Processing with TypedFeature Structures and Unification.
Proceedings ofthe International Conference on NLP (ICON 2002).Mumbai, India.Scott Boag, Don Chamberlin, Mary F. Fernandez,Daniela Florescu, Jonathan Robie and J?r?meSim?on.
2002.
XQuery 1.0: An XML QueryLanguage.
http://www.w3c.org/TR/xqueryChris Brew, David McKelvie, Richard Tobin, HenryThompson and Andrei Mikheev.
2000.
The XMLLibrary LT XML.
User documentation and referenceguide.
LTG.
University of Edinburgh.Joe Calder.
2000.
Thistle: Diagram Display Enginesand Editors.
Technical report.
HCRC.
University ofEdinburgh.Ulrich Callmeier.
2000.
PET - A platform forexperimentation with efficient HPSG processingtechniques.
Natural Language Engineering, 6 (1)(Special Issue on Efficient Processing with HPSG:Methods, systems, evaluation).
Editors: D. Flickinger,S.Oepen, H. Uszkoreit, J. Tsujii, pp.
99 ?
108.Cambridge, UK: Cambridge University Press.Jean Carletta, David McKelvie, Amy Isard, AndreasMengel, Marion Klein, Morten Baun M?ller.
2002.
Ageneric approach to software support for linguisticannotation using XML.
Readings in CorpusLinguistics, ed.
G. Sampson and D. McCarthy,London and NY: Continuum International.James Clark (ed.).
1999.
XSL Transformations (XSLT)http://www.w3c.org/TR/xsltJames Clark and Steve DeRose (eds.).
1999.
XML PathLanguage (XPath) http://www.w3c.org/TR/xpathAnne Copestake.
1999.
The (new) LKB system.ftp://www-csli.stanford.edu/~aac/newdoc.pdfBerthold Crysmann, Anette Frank, Bernd Kiefer, Hans-Ulrich Krieger, Stefan M?ller, G?nter Neumann,Jakub Piskorski, Ulrich Sch?fer, Melanie Siegel, HansUszkoreit, Feiyu Xu.
2002.
An IntegratedArchitecture for Shallow and Deep Processing.Proceedings of ACL-2002, Philadelphia, PA.Stefan Evert with Holger Voormann.
2002.
NITE QueryLanguage.
NITE Project Document.
Stuttgart.Anette Frank, Markus Becker, Berthold Crysmann,Bernd Kiefer and Ulrich Sch?fer.
2003.
IntegratedShallow and Deep Parsing.
Submitted manuscript.Claire Grover, Ewan Klein, Alex Lascarides and MariaLapata.
2002.
XML-based NLP Tools for Analysingand Annotating Medical Language.
Proceedings ofthe Second International Workshop on NLP and XML(NLPXML-2002).
Taipei.Nancy Ide.
2000.
The XML Framework and itsImplications for the Development of NaturalLanguage Processing Tools.
Proceedings of theCOLING Workshop on Using Toolsets andArchitectures to Build NLP Systems, Luxembourg.Nancy Ide and Laurent Romary.
2001.
A CommonFramework for Syntactic Annotation.
Proceedings ofACL-2001.
pp.
298-305.
Toulouse.Fabrice Issac.
1998.
A Standard RepresentationFramework for TAG.
In Fourth InternationalWorkshop on Tree Adjoining Grammars and RelatedFrameworks (TAG+4), Philadelphia, PA.Hans-Ulrich Krieger.
2003.
SDL ?
A DescriptionLanguage for Specifying NLP Systems.
DFKITechnical Report.
Saarbr?cken.Hans-Ulrich Krieger and Ulrich Sch?fer.
1994.
TDL - AType Description Language for Constraint-BasedGrammars.
Proceedings of COLING-94.
Vol.
2 pp.893-899, Kyoto.D.
Terence Langendoen and Gary F. Simons.
1995.
Arationale for the TEI recommendations for feature-structure markup.
Computers and the Humanities29(3).
Reprinted in Nancy Ide and Jean Veronis, eds.The Text Encoding Initiative: Background andContext, pp.
191-209.
Dordrecht: Kluwer Acad.
Publ.Jakub Piskorski and G?nter Neumann.
2000.
AnIntelligent Text Extraction and Navigation System.
Inproceedings of 6th RIAO-2000, Paris.Carl J. Pollard and Ivan A.
Sag.
1994.
Head-DrivenPhrase Structure Grammar.
Chicago: University ofChicago Press.Manfred Sailer and Frank Richter.
2001.
Eine XML-Kodierung f?r AVM-Beschreibungen (in German).
InLobin H.
(ed.)
Proceedings of the Annual Meeting ofthe Gesellschaft f?r linguistische Datenverarbeitung,Giessen.
pp.
161 ?
168.Helmut Schmid.
2000.
LoPar: Design andImplementation.
Arbeitspapiere desSonderforschungsbereiches 340, No.
149.
Universityof Stuttgart.Wojciech Skut and Thorsten Brants.
1998.
Chunktagger ?
statistical recognition of noun phrases.
InProceedings of the ESSLLI Workshop on AutomatedAcquisition of Syntax and Parsing.
Saarbr?cken.Henry S. Thompson and David McKelvie.
1997.Hyperlink Semantics for standoff markup of read-onlydocuments.
In Proc SGML EU 1997.
