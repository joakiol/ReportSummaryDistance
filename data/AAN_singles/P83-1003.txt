Crossed Ser ia l  Dependencies:i low-power parseable extension to GPSGHenry ThompsonDepartment of Artificial IntelligenceandProgram in Cognitive ScienceUniversity of EdinburghHope Park Square, Meadow LaneEdinburgh EH8 9NWSCOTLANDABSTRACTAn extension to the GPSG grammatical formalism isproposed, allowing non-terminals to consist offinite sequences of category labels, and allowingschematic variables to range over such sequences.The extension is shown to be sufficient to providea strongly adequate grammar for crossed serialdependencies, as found in e.g.
Dutch subordinateclauses.
The structures induced for suchconstructions are argued to be more appropriate todata involving conjunction than some previousproposals have been.
The extension is shown to beparseable by a simple extension to an existingparsing method for GPSG.I.
INTRODUCTIONThere has been considerable interest in thecommunity lately with the implications of crossedserial dependencies in e.g.
Dutch subordinateclauses for non-transformational theories ofgrammar.
Although context-free phrase structuregrammars under the standard interpretations areweakly adequate to generate such languages as anb n,they are not capable of assigning the correctdependencies - that is, they are nots t rong lyadequate.In a recent paper (Bresnan Kaplsn Peters endZaenen 1982) (hereafter BKPZ), a solution to theDutch problem was presented in terms of LFG (Kaplanand Bresnan 1982), which is known to haveconsiderably more than context-free power.
(Steedman 1983) and (Joshi 1983) have also madeproposals for solutions in terms of Steedman/Adesgrammars and tree adjunction grammars (Ades andSteedman 1982; Joshi Levy and Yueh 1975).
In thispaper I present a minimal extension to the GPSCformalism (Gazdar 1981c) which also provides asolution.
It induces structures for the relevantsentences which are non-trivially distinct fromthose in BKPZ, and which I argue are moreappropriate.
It appears, when suitablyconstrained, to be similar to Joshi's proposal inmaking only a small increment in power, beingincapable, for instance, of analysing anbnc n withcrossed dependencies.
And it can easily be parsedby a small modification to the parsing mechanisms Ihave already developed for GPSG.II.
AN EXTENSION TO GPSGII.I Extendin G the s~ntaxGPSG includes the idea of compound non-terminals,composed of pairs of standard category labels.
Wecan extend this trivially to finite sequences ofcategory labels.
This in itself does not changethe weak generative capacity of the grammar, as theset of non-terminals remains finite.
CPSG alsoincludes the idea of rule schemata - rules withvariables over categories.
If we further allowvariables over sequences, then we get a realchange.At this point I must introduce some notation.
Iwill write\[a,b ,c\]for a non-terminal label composed of the categoriesa, b, and c. I will writeZa b*to indicate that the schematic variable Z rangesover sequences of the category b.
We can then givethe following grammar for anb n with crossed16dependencies:S -> eS:Z -> a SIZ:b .
( I )s:z -> a s z:b (2)blZ -> b z (3),where we allow variables over sequences to appearnot only alone, but in simple, that is withconstant terms only, concatenation, notated with avertical bar (I).
This grammar gives us thefollowing analysis for a3b 5, where I have usedsubscripts to record the dependencies, and themarginal numbers give the rule which admits theadjacent node:S (I)al/~\[S,bl\] (I)a ~  (2)s" \[bI, 2, b\] (3)3With the aid of this example, we see that rule Igenerates a's while accumulating b's, rule 2 bringsthis process to an end, and rule 5 successivelygenerates the accumulated b's, in the correct,'crossed', order.
This is essentially thestructure we will produce for the Dutch examples aswell, so it is important to point out exactly howthe crossed dependencies are captured.
This mustcome out in two ways in GPSG - subcategorisationrestrictions, and interpretation.
That thesubcategorisation is handled properly should beclear from the above example.
Suppose that thecategories a and b are pre-terminals rather thanterminals, and that there are actually three sortsof a's and three sorts of b's, subcategorised foreach other.
If one used the standard GPSGmechanism for recording this dependency, namely byproviding three rules, whose rule number would thenappear as a feature on those pre-terminalsappearing in them directly, we would get the abovestructure, where we can reinterpret the subscriptsas the rule numbers so introduced, and see that thedependencies are correctly reflected.II.2 Semantic interpretationAs for the semantics no actual extension isrequired - the untyped lambda calculus is stillsufficient to the task, albeit with a fair amountof work.
We can use what amounts to apa  ...... 6 andunpacking approach.
The compound b nodes havecompound interpretations, which are distributedappropriately higher up the tree.
For this, weneed pairs and sequences of interpretations.Following Church, we can represent a pair <l,r> as~f (1 ) ( r ) \ ] .
If P is such a pair, then POP(~x~x\[x\])  and PI = P(kxXx\[y\]).
Using pairs wecan of course produce arbitrary sequences, as inLisp.
In what follows I will use a Lisp-basedshorthand, using CAR, CDR, CONS, and so on.
Theseusages are discharged in Appendix I.Using this shorthand, we can give the followingexample of a set of semantic rules for associationwith the syntactic rules given above, whichpreserves the appropriate dependency, assuming thatthe b'(a',S') is the desired result at each level:CONS(CADR (Q')(a' )(CA~(Q' )),CDDR (Q ' )) (~where Q' is short for SI, Z~,b ' ,CO~S(CAR (Q ' )(a') (S') ,CDR(Q ' )) (2where Q' is short for Ziqh ' ,ADJOIN(Z' ,b' ).
(3These rules are most easily understood in reverseorder.
Rule 3 simply appends the interpretation ofthe immediately dominated b to the sequence ofinterpretations of the dominated sequence of b's.Rule 2 takes the first interpretation of such asequence, applies it to the interpretations of theimmediately dominated a and S, and prepends theresult to the unused balance of the sequence of binterpretations.
We now have a sequence consistingof first a sentential interpretation, and then anumber of h interpretations.
Rule I thus appliesthe second (b type) element of such a sequence tothe interpretation of the immediately dominated a,and the first (S type) element of the sequence.The result is again prepended to the unusedbalance, if any.
The patient reader can satisfyhimself that this will produce the following(crossed) interpretation:17II.3 Parsin~As for parsing context-free grammars with thenon-terminals and  schemata this proposal allows,very little needs to be added to the mechanisms Ihave provided to deal with non-sequence schemata inGPSG, as described in (Thompson 1981 b).
We simplytreat all non-terminals as sequences, many of onlyone element.
The same basic technique of a bottom-up chart parsing strategy, which substitutes formatched variables in the active version of therule, will do the job.
By restricting only onesequence variable to occur once in each non-terminal, the task of matching is kept simple anddeterministic.
Thus we allow e.g.
SIZIb but notZlblZ.
The substitutions take place byconcatenation, so that if we have an instance ofrule (~) matching first \[a\] and then \[3,b,b,b\] inthe course of bottom-up processing, the Z on theright hand side will match \[b,b\], and the resultingsubstitution into the left hand side will cause theconstituent to be labeled \[S,b,b\].In making this extension to my existing system,the changes required were all localised to thatpart of the code which matches rule parts againstnodes, and here the price is paid only if asequence variable is encountered.
This suggeststhat the impact of this mechanism on the parsingcomplexity of the system is quite small.III.
APPLICATION TO DUTCHGiven the limited space available, I can presentonly a very high-level account of how thisextension to GPSG can provide an account of crossedserial dependencies in Dutch.
In particular I willhave nothing to say about the difficult issue ofthe precise distribution of tensed and untensedverb forms.III.
1 The Dutch dataDiscussion of the phenomenon of crossed serialdependencies in Dutch subordinate clauses isbedeviled by considerable disagreement about justwhat the facts are.
The following five examplesform the core of the basis for my analysis:I) omdat ik probeer Nikki te leren Nederlandste spreken2) omdat ik probeer Nikki Nederlands te lerenspreken3) omdat ik Nikki probeer te leren Nederlandste spreken4) omdat ik Nikki Nederlands probeer te lerenspreken5) * omdat ik Nikki probeer Nederlands te lerenspreken.With the proviso that (I) is often judgedquestionable, at least on stylistic grounds, thispattern of judgements seems fairly stable amongnative speakers of Dutch from the Netherlands.There is some suggestion that this is not  thepattern of judgements typical of native speakers ofDutch from Belgium.III.2 Grammar rules for the Dutch dataThis pattern leads us to propose the followingbasic rules for subordinate clauses:A) S' -> omdat NP VPB) VP -> V VP (probeer)C) VP -> NP V VP (leren)D) VP -> NP V (spreken).Taken straight, these give us (I) only.
For (2)- (4), we propose what amounts to a verb loweringapproach, where verbs are lowered onto VPs, whencethey lower again to form compound verbs.
(5) isruled out by requiring that a lowered verb musthave a target verb to compound with.
The resultingcompound may itself be lowered, but only as a unit.This approach is partially inspired by Seuren'stransformational account in terms of predicateraising (Seuren 1972).So the interpretation of the compound labels isthat e.g.
\[V,V\] is a compound verb, and \[VP,V,V!
isa VP with a compound verb lowered onto it.
Itfollows that for each VP rule, we need anassociated compound version which allows thelowering of (possibly compound) verbs from the VPonto the verb, so we would have e.g.Di) VPIZ -> NP ZIV,where we now use Z as a variable over sequences ofVS.
The other half of the process must be18reflected in rules associated with each VP rulewhich introduces a VP complement, allowing the verbto be lowered onto the complement.
As this rulemust also expand VPs with verbs lowered onto them,we want e.g.cii) vPlz -> ~P wlzlv.Rather than enumerate such rules, we can usemetarules to conveniently express what is wanted:I) VP -> ... V ... ==> VPIZ -> ... ZlV ...H) vP -> ... v vP o-> vPlz -> ... vP:z:v.(I) will apply to all three of (B) - (D), allowingcompound verbs to be discharged at any point.
(II)will apply to (B) and (C), allowing the lowering(with compounding if needed) of verbs ontocomplements.
We need one more rule, to unpack thecompound verbs, and the syntactic part of oureffort is complete:E) wlz -> W Z,where W is an ordinary variable whose rangeconsists of V. This slight indirection is necessaryto insure that subcategorisation informationpropagates correctly.By suitably combining the rules (A) - (E),together with the meta-generated rules (Bi) - (Di),(Bii) and (Cii), we can now generate examples (2)(4).
(4), which is fully crossed, is verysimilar to the example in section II.1, and usesmeta-generated expansions for all its VP nodes:S'NikkiNederlands V b \[Vc,Vd\]probeer V c V di Ite leren spreken(A)(Bii)( Cii )(Di)(E)(E)Once again I include the relevant rule name in themargin, and indicate with subscripts the rule namefeature introduced to enforce subcategorisation.Sentences (2) and (3) each involve two meta-generated rules and one ordinary one.
For reasonsof space, only (3) is illustrated below.
(2) issimilar, but using rules (B), (Cii), and (Di).s' (A)~P vP (Rii) aik \[vP,Zb\] (ci).~Pc \[Vb,Vc\]~ ~ ~  (E),(Di)Nikki V b ~d Vdpro~eer ~c .
!preken te leren Nederlands teIII.3 Semantic rules for the Dutch dataThe semantics follows that in section II.2 quiteclosely.
For our purposes simple interpretationsof (B) - (D) will suffice:B') v'(vP')c') v' (NP' ,~ ' )D') v'(NP').The semantics for the metarules is also reasonablystraightforward, given that we know where we aregoing:I ' )  F(V') ==> CONS(F(CAR(Z:V')),CDR(Z',V'))II') F(V',VP') ==> CONS(F(CADR(Q'),CAR(Q')),cm~(Q')),where Q' is short for VPlZl, V '.
(I') will givesemantics very much like those of rule (2) insection II.2, while (II') will give semantics likethose of rule (I).
(E ?)
is just like (3):E') ADJ01N(Z' ,W ' )It is left to the enthusiastic reader to workthrough the examples and see that all of sentences(I) - (4) above in fact receive the sameinterpretation.III.4 Which structure is right - evidence fromconjunctionThe careful reader will have noted that thestructures proposed are not the same as those ofBKPZ.
Their structures have the compound verbdepending from the highest VP, while ours dependfrom the lowest possible.
With the exception ofBKPZ's example (~3), which none of my sources judgegrammatical with the 'root Marie' as given, I19believe my proposal accounts for all the judgementscited in their paper.
On the other hand, I do notbelieve they can account for all of the followingconjunction judgement, the first three based on(4), the next two on (3), whereas under thestandard GPSG treatment of conjunction they allfall out of our analysis:6) omdat ik Nikki Nederlanda wil leren sprekenen Frans wil laten schrijvenbecause I want to teach Nikki to speak Dutchand let \[Nikki\] write French7) * omdat ik Nikki Nedrelands wil leren sprekenen Frans laten schrijven8) omdat ik Nikki Nederlands wil leren sprekenen Carla Frans wil laten schrijvenbecause I want to teach Nikki to speak Dutchand let Carla write French.9) omdat ik Nikki wil leren Nederlands te sprekenen Frans te schrijvenbecause I want to teach Nikki to speak Dutchand to write FrenchIO) * omdat ik Nikki wil leren Nederlands tespreken en Carla Frans te schrijvenor... en Frans (ts) laten schrijven(6) contains a conjoined \[VP,V,V\], (8) a conjoined\[VP,V\], and (7) fails because it attempts toconjoin a \[VP,V,V\] with a \[VP,V\].
(9) conjoins anordinary VP iaside a \[VP,V\], and (10) fails bytrying to conjoin a VP with either a non-constituent or a \[VP,V\].It is certainly not the case that adding thissmall amount of 'evidence' to the small amountalready published establishes the case for the deepembedding, but I th ink  it is suggestive.
Takentogether with the obvious way in which the deepembedding allows some vestige of compositionalityto persist in the semantics, I think that at thevery least a serious reconsideration of the BKPZproposal is in order.IV.
CONCLUSIONSIt is of course too early to tell whether thisaugmentation will be of general use orsignificance.
It does seem to me to offer areasonably concise and satisfying account of atleast the Dutch phenomena without radicallyaltering the grammatical framework of GPSG.Further work is clearly needed to exactlyestablish the status of this augmented GPSG withrespect to generative capacity and parsability.
Itis intriguing to speculate as to its weakequivalence with the tree adjunction grammars ofJoahi et al Even in the weakest augmentation,allowing only one occurence of one variable oversequences in any constituent of any rule, theapparent similarity of their power remains to beformally established, but it at least appears thatlike tree adjunction grammars, these grammarscannot generate anbncn with both dependenciescrossed, and like them, it can generate it with anyone set crossed and the other nested.
Neither canit generate WW, although it can with a sequencevariable ranging over the entire alphabet, if itcan be shown that it is indeed weakly equivalent toTAG, then strong support will be lent to the claimthat an interesting new point on the Chomskyhierarchy between CFGs and the indexed grammars hasbeen found.ACKNOWLEDGEMENTSThe work described herein was partially supportedby SERC Grant GR/B/93086.
My thanks to HanReichgelt, for renewing my interest in this problemby presenting a version of Seuren's analysis in aseminar, and providing the initial sentential data;to Ewan Klein, for telling me about Church's'implementation' of pairs and conditionals in thelambda calculus; to Brian Smith, for introducing meto the wonderfully obscure power of the Y operator;and to Gerald Gazdar, Aravind Joshi, Martin Kay andMark Steedman, for helpful discussion on variousaspects of this work.APPENDIX ISEQUENCES IN THE UNTYPED LAMBDA CALCULUSTo imbed enough of Lisp in the lambda cslculusfor our needs, we require not just pairs, but NILand conditionals as well.
Conditionals areimplemented similarly to pairs - "if p then q else20r" is simply p applied to the pair <q,r>, whereTRUE and FALSE are the left and right pair elementselectors respectively.
In order to effectivelyconstruct and manipulate lists, some method ofdetermining their end is required.
Numerouspossibilities exist, of which we have chosen arelatively inefficient but conceptually clearapproach.
We compose lists of triples, rather thanpairs.
Normal CONS pairs are given as<TRUE,car,cdr>, while NIL is <FALSE,,>.Given this approach, we can define the followingshorthand, with which the semantic rules given insections II.2 and III.3 can be translated into thelambda calculus:TR= - Ix \[~y \[~\]\]FALSE-  ~x.Lky.LyJ\]NIL -  ~f.Ef(FALSE)(kp.\[p\])(~p.\[p\])lC0NS(A,B) - ~f.Ef(TRUE)(A)(B)JCAe(L) - L(~x.\[ ~y\[  ~z\[y\] \]3 )CDR(L) L()~x.t ),y.L ),z.\[ z\] \] j )C0NSP(L) - T(~x \[~y.\[~z.\[x\]\]\])CADR(L) - CAR(CDR(L))ADJOINFORM - la.\[ IL.
\[ ~N.
\[CONSP(L)(CONS(CA~(L),a(CD~(L) ) (N) ) )(CONS(N,NIL)) \] \]\]- ~f.\[ ~.\[ f(x(~) )\] (~x.\[ f(x(x))\])\]ADJOIN(L,N) - Y (ADJO I~0~M)(T) (N)Joshi, A.
1983.
How much context-sensitivity isrequired to provide reasonable structuraldescriptions: Tree adjoininggran~nars, version submitted to thisconference.Joehi, A.K., Levy, L. So and Yueh, K. 1975.
Treeadjunct grammars.
Journal of Comp .... andSystem Sciences.Kaplan, R.M.
and Bresnan, J.
1982.
Lexical-functional grammar: A formal system ofgrammatical representation.
In J. Bresnan,editor, The mental representation ofgrammatical relations.
MIT Press,Cambridge, MA.Seuren, P. 1972.
Predicate Raising in French andSundry Languages.
ms., Nijmegen.Steedman, M. 1983.
On the Generality of theNested Dependency Constraint and thereason for an Exception in Dutch.
InButterworth, B., Comrie, E. and Dahl, 0.,editors, Explanations of LanguageUniversals.
Mouton.Thompson, H.S.
1981b.
Chart Parsing and RuleSchemata in GPSG.
In Proceedings of theNineteenth Annual Meeting of theAssociation for Computational Linguistics.ACL, Stanford, CA.
Also DAI Research Paper165, Dept.
of Artificial Intelligence,Univ.
of Edinburgh.Note that we use Church's Y operator to produce therequired recursive definition of ADJOIN.REFERENCESAdes, A. and Steedman, M. 1982.
On the order ofwords.
Linguistics and Philosophy.
toappear.Bresnan, J.W., Kaplan, R., Peters, S. and Zaenen,A.
1982.
Cross-serial dependencies inDutch.
Linguistic Inquir\[ 13.Cazdar, G. 1981c.
Phrase structure grammar.
In P.Jacobson and G. Pullum, editors, Thenature of syntactic representation.
D.Reidel, Dordrecht.21
