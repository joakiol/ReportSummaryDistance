Reversibility and Re-usability of Resourcesin NLG and Natural Language Dialog SystemsMartin Klarner3SOFT GmbHFrauenweiherstr.
14, D-91058 Erlangen, Germanymartin.klarner@3soft.deAbstractReversibility is a key to efficient and maintain-able NLG systems.
In this paper, we presenta formal definition of reversible NLG systemsand develop a classification of existing naturallanguage dialog systems in this framework.1 IntroductionReversibility is a key factor in building efficient andmaintainable NLG and natural language dialog systems(NLDSs).
But previous formal descriptions of reversibil-ity are still lacking in coverage and applicability to exist-ing systems.
In this paper, we extend former approachesto this matter by formally defining reversibility in NLDSsand developing a proper classification of such systemsin terms of reversibility.
After that, existing NLG andgeneric dialog systems are used as examples for the fea-sibility and applicability of our classification.In our point of view, it is useless to consider reversibil-ity for an NLG system alone, because parsing and dia-log management are equally important for developing anNLDS.
Hence, our classification applies to complete di-alog systems and not only NLG systems.2 A Formal Description of ReversibilityIn this section, we will provide a formal definition ofreversibility which is based on previous work [Neumannand van Noord, 1994].
To this end, we will first givea short overview of the results obtained there in sect.2.1.
After that, we will present our extended definitionin sect.
2.2.2.1 Previous definitions of ReversibilityIn [Neumann and van Noord, 1994], a definition of re-versibility for programs is provided.
The authors startwith a definition for computing a relation r in both di-rections (def.
1).Definition 1.
(Computing a relation in both directionsaccording to Neumann and van Noord)A program P computes a relation r in both di-rections, iff for a given input ?dir, e?
it recursively enu-merates the set{x | (?e, x?
?
r ?
dir = 0) ?
(?x, e?
?
r ?
dir = 1)}.In this definition, the parameter dir denotes the di-rection in which the input is computed, and e representsthe content of the input for which the appropriate outputhas to be obtained.Let us state a simple corollary to def.
1 which relatesthe notion of computing a relation in both directions tothe notion of inverse relations.Corollary 1.
A program P computes the relation r inboth directions, if P computes r and the inverse relationof r, r?1.Proof.
According to def.
1, P recursively enumerates theset {x | ?e, x?
?
r} for dir = 0 and the set {x | ?x, e?
?
r}for dir = 1.
Hence, it computes r for dir = 0 and(using the standard definition of inverse relations) r?1for dir = 1.Based on def.
1, the following definitions for r-reversibility of programs and relations are provided in[Neumann and van Noord, 1994] (def.
2).Definition 2.
(Reversibility of programs and relationsaccording to Neumann and van Noord)1.
A program P is r-reversible if it computes r inboth directions.2.
A relation r is reversible iff an r-reversible pro-gram exists.The notion of reversible programs in def.
1 and 2 isvery general: In an extreme case, such a program canconsist of two completely independent parts tied to-gether only by an initial conditional statement.
Thisstatement decides, depending on the value of the direc-tion parameter dir, whether the program part computingrelation r (for dir = 0) or the one computing r?1 (fordir = 1) is used.
In our opinion, such a program shouldnot be called reversible any more.
Hence, definitions 1and 2 are too general.On the other hand, they are too specific; this is dueto three reasons:1.
Program and data are not distinguished.2.
Thus, different resources and resource types1 arealso not addressed.1such as linguistic and pragmatic resources3.
The availability time for a program or a resource2is not considered.Hence, in the next section we will replace these def-initions by a more general description of reversibilityfor generic program systems before we will describe re-versibility in current NLDSs.2.2 Extended definition of reversibilityIn this section, we will present our definition of reversibil-ity.
We start with definitions of a generic program sys-tem and of system and program relations (def.
3).Definition 3.
(Program system, system relations, andprogram relations)1.
A program system S consists of a triplet(COMPS , PROGS , RESS) of(a) a set of preprocessing programs COMPS ={C1, .
.
.
, Ck} which are executed before systemstart,(b) a set of runtime programs PROGS ={P1, .
.
.
, Pl},(c) and a set of resources RESS = {R1, .
.
.
, Rm}.2.
The set of relations RELS = {r1, .
.
.
, rn} computedby the programs of PROGS is called the set of sys-tem relations of S.3.
The set of relations RELP = {r1, .
.
.
, rp} computedby a single program Pi ?
PROGS is called the setof program relations of P .By resources we denote every data structure needed bya runtime program for its execution3.
More precisely, theresource RPi,rk provides a necessary (but not sufficient)condition for the runtime program Pi to compute one ofits program relations rk.
All of these resources must beavailable at system start, but they may be generated bypreprocessing programs.Before we can state our definition of reversibility, wehave to give a formal description of inverse programs andresources (def.
4).Definition 4.
(Inverse program and inverse resource)Let S be a program system, R ?
RESS a system re-source, and P ?
PROGS a program with a program re-lation r ?
RELP .
Let R be a resource needed by P forcomputing r.1.
Then every program P?1 computing the inverse re-lation r?1 is called an inverse program to P withrespect to r.2.
The transformation of a resource R needed by P?1to compute r?1 is called inverse resource R?1 toR with respect to r.A simple corollary relates self-inverse programs to r-reversible programs.2i.e.
whether it is available only at runtime or already atcompile time3contrary to the terminology used e.g.
in operating sys-tems programmingCorollary 2.
If P ?
P?1 holds, i.e.
if P is self-inversewith respect to r, then P is r-reversible.Proof.
If P computes r, P?1 computes r?1, and P ?P?1 holds, then P computes r?1 as well.
Then, accord-ing to def.
1, P computes r in both directions, and withdef.
2 P is r-reversible.Algorithmic reversibilityFor any program system of def.
3, we define algorithmicreversibility in the following way (def.
5).Definition 5.
(Algorithmic reversibility)Let S be a program system, P ?
PROGS a programin S, and r ?
RELP a program relation of P .Then S is algorithmic-reversible in P and r if Pis r-reversible.Hence, P (and no other program Q ?
PROGS withQ 6= P )4 has to compute r and r?1 as well.Data reversibilityData reversibility, the counterpart of algorithmic re-versibility, can be defined as follows (def.
6).Definition 6.
(Data reversibility)Let S be a program system, R ?
RESS a system re-source of S, and r ?
RELS a system relation of S.Then S is data-reversible to R and r if two programsP1, P2 ?
PROGS exist which both need R to be executedand for both of which r ?
RELP1 and r?1 ?
RELP2holds.Thus, P1 must compute r using R, and P2 must com-pute the inverse relation r?1 (also by using R).
IfP1 ?
P2 ?
P holds, S is also algorithmic-reversible to Pand r.Static and dynamic reversibilityA different dimension of reversibility dealing with theavailability time of a program or a resource can be de-scribed as follows (def.
7).Definition 7.
(Static and dynamic reversibility)Let S be a program system, R ?
RESS a system re-source and r ?
RELS a system relation of S.1.
S is static-reversible with respect to R and r if(a) a program P ?
PROGS with r ?
RELP existswhich needs R for its execution,(b) also r?1 ?
RELS, P?1 ?
PROGS, and R?1 ?RESS holds,and additionally(c) at least one preprocessing program C ?COMPS is needed for the construction of R?1from R or of P?1 from P .2.
If no such program C is needed, S is calleddynamic-reversible with respect to R and r.4By Q 6= P we denote syntactic in-equivalence here.
Thisis easily decidable, whereas semantic equivalence of programsis certainly not.If, under the preconditions of def.
7, the inverseprogram P?1 is constructed, S is also algorithmic-reversible with respect to P and r. However, if the in-verse resource R?1 is constructed, S is data-reversiblewith respect to R and r. Obviously, both algorithmicand data reversibility can occur simultaneously.3 Reversibility in Dialog SystemsConsider the special relation sp?s between phonetic andsemantic structures.
This is the relation computed bythe analysis part of a natural language dialog system(NLDS).
By applying our definitions of reversibility pre-sented in sect.
2.2 on sp?s, we face an important ques-tion of natural language processing: To what extent isa given NLDS reversible?
But before we consider thisquestion in more detail, we have to define our notion ofan NLDS first.
Based on def.
3, we formally describe anNLDS as follows (def.
8).Definition 8.
(NLDS)Let rp?s be the relation between phonological and se-mantic structures and r?1p?s the inverse relation of rp?s.5An NLDS is a program system S with rp?s ?
RELSand r?1p?s ?
rs?p ?
RELS.Hence, an NLDS must contain both the relations rp?sand rs?p as system relations.
This is quite obvious, sincenatural language dialog requires both natural languageunderstanding (NLU) and natural language generation(NLG).4 Classification of Reversibility TypesAs we have seen in the previous sections, generic pro-gram systems and NLDSs in particular can be reversiblein two independent dimensions: On the one hand, theycan be static or6 dynamic, and on the other hand, al-gorithms and/or data can be reversible.
Given that asystem may also be not reversible at all in both dimen-sions just mentioned, we obtain a classification of ninepossible reversibility types.
[Neumann, 1994], however, describes just four types ofreversibility in dialog systems and takes only the gram-mar as a linguistic resource into account: Type A hasstatic reversibility (in terms of data and algorithms),while type B has dynamic data reversibility.
Type C hasstatistically reversible data and dynamically reversiblealgorithms, while type D has dynamic data and algo-rithmic reversibility.By further exploring the notions of algorithmic anddata reversibility introduced above, both of which can berealized in three different variants (none, static, and dy-namic), we are able to extend the classification in [Neu-mann, 1994] by two more types: Type E is statically re-versible in terms of data and algorithms, and type F hasdynamic data and static algorithmic reversibility.
Our5Henceforth, we will denote r?1p?s just rs?p for obvioussimplicity reasons.6The ?or?
here must be read as an ?exclusive or?.extended classification of reversible dialog systems is de-picted in fig.
1.There are three more possible types in our classifi-cation, all of them without data reversibility: Type Ghas statically and type H dynamically reversible algo-rithms, whereas type I does not have any reversibilityat all.
While types G and H are just not desirable forreal-world NLDSs, type I is even unacceptable.
Hencewe decided to exclude types G, H, and I from fig.
1 anddepict them separately in fig.
2.
However, the legenddisplayed there applies to fig.
1 as well.It has to be pointed out here that any classification ofreversible dialog systems must not be restricted to thegrammar, but has to be extended to the other resourcesused in an NLDS as well.
Apart from the grammar,we distinguish five additional system resources: Lexiconand morphology component are linguistic resources (to-gether with the grammar), whereas discourse memory,domain model, and user model are pragmatic systemresources.
Hence, the reversibility of an NLDS can beclassified depending on (at least) six different resourcecategories.
Together with the six reversibility types in-troduced above, these six resources form a 6-tuple whichenables us to describe the reversibility of an NLDS for-mally and completely.Let us take the Conald dialog system [Ludwig, 2003]as an example.
The system lexicon is precompiled intoan NLG lexicon at development time, hence we havestatic reversibility of type E here.
On the other hand, themorphology component is used by both the parser andthe generator at runtime in a uniform way (cf.
[Klarnerand Ludwig, 2004]), resulting in dynamic reversibility forthis component.
Discourse memory and domain modelare used in the dialog manager for pragmatic integra-tion and by the NLG component.
The data structuresare identical, but the algorithms are different.
Thus, wehave type B reversibility for these two resources.
Theuser model, however, is not used for parsing, only forgeneration, hence the system is not reversible with re-spect to the user model.In table 1 the reversibility types of the different re-sources are put together.
They form a tuple (E, D, A, B,B, none) completely describing reversibility in Conald.Resource TypeLexicon EMorphology DGrammar ADiscourse Memory BDomain Model BUser Model noneTable 1: Reversibility of Conald.The Amalia system [Gabrilovich et al, 1998] is a typ-ical example for Prolog-based reversible NLG systems.The system grammar is first inverted and then compiledinto two different versions, one for parsing and one forgeneration.
Thus, we have type C reversibility here.
TheParserParserUniform SourceAlgorithmUniformAlgorithmParserParserUniform SourceAlgorithmUniformAlgorithmGeneratorGeneratorGeneratorGeneratorParsingResourceParsingResourceParsingResourceSystemResourceSystemResourceSystemResourceGenerationResourceGenerationResourceGenerationResourceSystemResourceSystemResourceSystemResourceType Adata: static; algorithms: noneType Bdata: dynamic; algorithms: noneType Cdata: static; algorithms: dynamicType Ddata: dynamic; algorithms: dynamicType Edata: static; algorithms: staticType Fdata: dynamic; algorithms: staticFigure 1: Reversible dialog systems.ParserParserUniformAlgorithmUniform SourceAlgorithmGeneratorGeneratorAA BBBAParsingResourceParsingResourceGenerationResourceGenerationResourceParsingResourceGenerationResourceLegenduses resourceis compiled intoType Gdata: none; algorithms: staticType HType IResourceProgramis compiled intoProgramFigure 2: Not-so-reversible dialog systems.same applies to the lexicon.
As there are no pragmaticresources and no morphology component, we can skiptheir analysis here.
Hence, Amalia can be characterizedby the reversibility tuple (C, n/a, C, n/a, n/a, n/a); cf.table 2.Resource TypeLexicon CMorphology n/aGrammar CDiscourse Memory n/aDomain Model n/aUser Model n/aTable 2: Reversibility of Amalia.Our third and final example is Trips [Ferguson andAllen, 1998].
In this system, the Discourse Context andthe Reference component are shared between the Inter-pretation Manager (which is used for parsing) and theGeneration Manager (cf.
[Allen et al, 2001]).
This re-sults in type B for the discourse memory.
The sameholds for the ontology of Trips (cf.
[Stent, 2001], p.139): Its domain model is of type B as well.
As thereis no specific user model contained in the system, thereis also no degree of reversibility to be found there.
Forvarious reasons, the Generation Manager uses its owngrammar and morphology component (cf.
[Stent, 2001],p. 180 & 182).
The NLG lexicon of Trips is obtainedsemi-automatically from various system resources andoff-line extraction (cf.
[Stent, 2001], p. 180).
Hence, wehave type A reversibility here.
We therefore concludethat Trips can be described by the reversibility tuple(A, none, C, B, B, n/a); cf.
table 3.Resource TypeLexicon AMorphology noneGrammar noneDiscourse Memory BDomain Model BUser Model n/aTable 3: Reversibility of Trips.5 Re-usability as Static Reversibility ofResourcesGiven our definitions of reversibility in sect.
2, we canview re-using resources in an NLDS as static or dynamicreversibility of the system for these resources.
Comparedto the definition in [Neumann and van Noord, 1994] re-ferred in sect.
2.1, this is a more general definition whichcan be applied to a lot of existing NLDSs.Let us again use the Conald system as an example,this time only taking the data structures into account,in order to search for possible re-use of resources.
Twocore linguistic resources of its parsing branch are re-usedin its NLG component Hyperbug [Klarner and Ludwig,2004]: The system lexicon and the morphology compo-nent are both used by the parser and the generator, withstatic reversibility for the system lexicon and dynamic re-versibility for the morphology component.
As mentionedin sect.
4, re-use is also done for the pragmatic resources,namely discourse memory and domain model.Generally speaking, the more linguistic and pragmaticresources are re-used in an NLDS, the higher its degree ofreversibility becomes, and the more efficient the systemwill be to develop and maintain.6 Conclusion and Further WorkWe have developed a formal description of reversibilityfor NLDSs, using definitions for program systems, sys-tem relations, and system resources.
Based on these def-initions, we have presented a classification of reversibleNLDSs in general and NLG systems in particular.
Ourclassification extends previous approaches in three di-mensions: First, it covers static and dynamic reversibil-ity, second, it considers algorithmic and data reversibil-ity, and third, it takes the different resources of a dialogsystem into account.The 6-tuple used in our classification can, of course,be extended to incorporate different linguistic and prag-matic resources, should they prove useful for an NLDS.However, we identified the set of resources mentionedabove by thorough investigation of existing systemsbased on the results presented in [Maier, 1999] for textplanning; presently, we do not think we need additionalones.Unfortunately, our definition of reversibility does notyet completely reflect all aspects of current NLDSs: Forexample, it does not cover systems where preprocessingand runtime programs cannot be clearly separated, be-cause such systems allow a flexible choice for a givenresource and/or algorithm to be computed beforehand(by preprocessing) or at runtime.7 This extended de-gree of dynamic has yet to be taken into account in ourdefinitions.The obvious practical application of our classificationis twofold: First, using it in a descriptive way to analyzeexisting systems.
Second, and more practical, using it ina normative way to further develop one?s one NLDS tobe as reversible as possible (i.e., to obtain a ?D?
in allsix positions of the 6-tuple of reversibility types).
Bothapplications are important, but the second is the one weare going to pursue in the near future.AcknowledgmentsMost of the work described here was done while complet-ing my PhD thesis [Klarner, 2005] at the Chair for Artifi-cal Intelligence of the University of Erlangen-Nuremberg.This is why I want to thank my former colleagues there,7While such systems are certainly an attractive theoreticalpossibility, we are not aware of real-world existing ones so far.especially Bernd Ludwig and Peter Rei?, for their en-during cooperation and support.
Many thanks to theanonymous reviewers as well for providing very helpfulcomments to the initial version of this paper.References[Allen et al, 2001] J. Allen, G. Ferguson, and A. Stent.An architecture for more realistic conversational sys-tems.
In Proc.
6th Int.
Conf.
on Intelligent User In-terfaces (IUI-2001), pages 1?8, Santa Fe, 2001.
[Ferguson and Allen, 1998] George Ferguson and JamesAllen.
Trips: An intelligent integrated problem-solving assistant.
In Proc.
AAAI-98, Madison, WI,1998.
[Gabrilovich et al, 1998] Evgeniy Gabrilovich, NissimFrancez, and Shuly Wintner.
Natural language gen-eration with abstract machine.
In Proc.
INLG-98,Niagara-on-the-Lake, 1998.
[Klarner and Ludwig, 2004] Martin Klarner and BerndLudwig.
Hybrid natural language generation in aspoken language dialog system.
In Susanne Biundo,Thom Fru?hwirth, and Gu?nther Palm, editors, Proc.KI-2004, pages 97?112, Ulm, 2004.
[Klarner, 2005] Martin Klarner.
Hybride, pragma-tisch eingebettete Realisierung mittels Bottom-Up-Generierung in einem natu?rlichsprachlichen Di-alogsystem.
PhD thesis, Erlangen-Nu?rnberg, 2005.
[Ludwig, 2003] Bernd Ludwig.
Ein konfigurierbaresDialogsystem fu?r Mensch-Maschine-Interaktion ingesprochener Sprache.
PhD thesis, Universita?tErlangen-Nu?rnberg, 2003.
[Maier, 1999] Elisabeth Maier.
Entwurf und Implemen-tierung von Wissensquellen fu?r die Textplanung ?
einemodulare Architektur.
Berlin, 1999.
[Neumann and van Noord, 1994] Gu?nther Neumannand Gertjaan van Noord.
Reversibility and self-monitoring in natural language generation.
In TomekStrzalkowski, editor, Reversible Grammars in NaturalLanguage Processing.
Boston, Dordrecht, London,1994.
[Neumann, 1994] Gu?nter Neumann.
A Uniform Compu-tation Model for Natural Language Parsing and Gen-eration.
PhD thesis, Universita?t des Saarlands, 1994.
[Stent, 2001] Amanda J. Stent.
Dialogue Systems asConversational Partners: Applying Conversation ActsTheory to Natural Language Generation for Task-Oriented Mixed-Initiative Spoken Dialogue.
PhD the-sis, University of Massachusetts Amherst, 2001.
