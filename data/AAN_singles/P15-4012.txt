Proceedings of ACL-IJCNLP 2015 System Demonstrations, pages 67?72,Beijing, China, July 26-31, 2015.c?2015 ACL and AFNLPSCHN?APPER: A Web Toolkit for Exploratory Relation ExtractionThilo Michael and Alan AkbikTechnische Universit?at BerlinEinsteinufer 17, 10587 Berlin{thilo.michael,alan.akbik}@tu-berlin.deAbstractWe present SCHN?APPER, a web toolkit forExploratory Relation Extraction (ERE).The tool allows users to identify relationsof interest in a very large text corpus in anexploratory and highly interactive fashion.With this tool, we demonstrate the ease-of-use and intuitive nature of ERE, as wellas its applicability to large corpora.
Weshow how users can formulate exploratory,natural language-like pattern queries thatreturn relation instances.
We also showhow automatically computed suggestionsare used to guide the exploration process.Finally, we demonstrate how users createextractors with SCHN?APPER once a rela-tion of interest is identified.1 IntroductionRelation Extraction (RE) is the task of extract-ing instances of semantic relations between enti-ties in unstructured data such as natural languagetext.
Common examples are the BORNIN relation-ship between a person and its birthplace, or theCHILDOF relation between a parent and its child.A principal challenge in RE is how to build highquality extractors for a given set of relations atminimal effort.One line of approaches to RE are rule-based,where users manually define rule-sets consistingof extraction patterns that if observed point to in-stances of a relation.
Advantages associated withrule-based RE are a high level of direct controlover the extraction process: Ideally, rule-writersbuild interpretable and maintainable rule-sets, en-abling both the extension and error analysis ofrule-based extractors (Chiticariu et al., 2013).
In-deed, in a number of recent works, rule-basedRE approaches have been found to outperformprevious machine-learning based state-of-the-artsystems, for tasks such as temporal expressiondetection (Str?otgen and Gertz, 2010) and Ope-nIE (Del Corro and Gemulla, 2013).Exploratory search for relations.
Recently, in(Akbik et al., 2014), we introduced the paradigmof Exploratory Relation Extraction (ERE).
We ar-gued that workflows and tooling can be developedin such a way as to enable an interactive and openended search for relations.
With ERE, relationstherefore do not need to be precisely defined inadvance.
Rather, users can start a process of ex-ploration for interesting relations even if their in-formation needs are only vaguely defined.We outlined key ideas in order to enable theexploratory workflow: First, extraction patternsshould be very easy to define and quick to test,much in the same way as exploratory keywordqueries in a web search engine (Marchionini,2006).
Second, the exploration process shouldbe guided through suggestions computed fromthe available data and previous user interactions.Third, there should be a high level of interactivity.Appropriate tooling is therefore required.Contributions.
With this demo, we presentSCHN?APPER, a web-based tool for ERE thatdemonstrates the incremental, data-guided work-flow introduced in (Akbik et al., 2014).
The demois intended to underline a central claim of ERE,which is that non-experts can use it to easily ex-plore a corpus for relational information and buildextractors.
Additionally, by using a large portionof the CLUEWEB091corpus as dataset, we aim tohighlight the applicability of such an approach tovery large datasets.Paper outline.
We first give a quick overview overthe ERE workflow in Section 2.
We then presentSCHN?APPER, our web interface (Section 3) andwalk through an example workflow with the tool.We then briefly give an overview over related workand give an outlook of possible future additions to1http://www.lemurproject.org/clueweb09/index.php67PatternSuggestions[X] launchedfrom[Y][X] arriveat[Y][X] built by [Y]Y_TypeSuggestionsOrganizationLocationCelestrial_Object1.LaunchInitial QueryInitial QueryX_TypeSpacecraftY_TypePatternIndex2.Select fromSuggestionsUpdated Suggestions[X] missionto[Y][X] orbit [Y][X] flyby[Y]selectUpda [X][X]Updated SelectionX_TypeSpacecraftY_TypeCelestrial_ObjectPattern[X] arriveat[Y]3.InteractunselectFigure 1: Illustration of the Exploratory Relation Extraction example workflow discussed in Section 2.2.the toolkit and the method itself.2 Exploratory Relation ExtractionWe demonstrate an approach to finding binary re-lations in text that has been proposed in (Akbik etal., 2014).
Each relation holds between two enti-ties: a subject and an object entity.
Users explorea corpus for information by selecting and compos-ing extraction patterns.2.1 Pattern LanguageExtraction patterns consist of two components:1.
Dependency subtrees.
The first componentis the lexico-syntactic pattern that connects twoentities in a sentence.
Here, we allow arbitrarysubtrees in a sentence?s dependency tree, as longas they span two entities of interest.
To gener-alize the patterns, they are stemmed and the twoentities are replaced by the placeholders ?
[X]and [Y]?.
Examples of subtree patterns are ?
[X]and [Y] married?
and ?
[X] ?s father[Y]?2.
However, since any subtree is a possiblepattern, many subtrees with less obvious meaningsare also possible; in the end, it is up to the user tomake the decision which patterns are relevant andwhich are not.2.
Entity type restrictions Optionally, patternsmay be further restricted to match only entities ofcertain fine-grained types, such as PERSON, LO-CATION, LANGUAGE or MOVIE.
The type restric-tions may be set individually for each subject andobject entities.
Since the subject is replaced with2For the purpose of readability, we do not display the deepsyntactic information from the subtrees.
Instead, we onlyshow the lexical portion of the patterns.
Here, some verbs,such as participles and gerunds, are not stemmed for read-ability purposes.the placeholder [X] in a pattern, its restriction isreferred to as X Type, while the object restrictionis referred to as Y Type.Preemptive pattern extraction.
Followingthe idea of preemptive Information Extrac-tion (Shinyama and Sekine, 2006), we pre-extractand store all subtrees and entity types from a givencorpus for each sentence with at least two namedentities.
This allows not only fast retrieval ofmatching entity pairs for a given set of subtreesand type restrictions, but also allows us to com-pute pattern correlations over the entire dataset forthe presently selected setup.
In the next section,we show how fast retrieval and pattern correlationsare used to aid the exploration process.2.2 Example WorkflowWe illustrate the exploration process with an ex-ample workflow, the first steps of which are de-picted in Figure 1.
Assume that our user is inter-ested in relations that involve ?spacecraft?, but isunsure of what types of relations may be found forsuch entities in the given corpus.Initial query (1).
The user starts by issuing an ini-tial query that is strongly underspecified: By set-ting X Type to SPACECRAFT and leaving the Pat-tern and Y Type fields in the query unspecified, theuser searches for all sentences that contain at leastone entity of the desired type.
At this point, thereare no other restrictions to the query with regardsto patterns or object entity types.Explore by reacting to suggestions (2).
After is-suing the query, the system responds with both alist of sentences that match the query (not illus-trated in Figure 1) and well as, more importantly,suggestions for patterns and object entity type re-68strictions that correlate with the user query.The user can now choose from the suggestions:For instance, by selecting the object type LOCA-TION and the pattern ?
[X] launched from[Y]?, the user may direct the exploration processtowards relations that indicate locations (cities,countries, sites) from which a spacecraft waslaunched.
Similarly, by choosing ORGANIZATIONas object type and ?
[X] built by [Y]?
aspattern, the user may select organizations (con-tractors, space agencies) that constructed or de-signed spacecraft as the focus of interest.In the example shown in Figure 1, the user in-stead selects the object type CELESTIALOBJECTand the pattern ?
[X] arrive at [Y]?.
Thisdirects the search towards relations that indicatespacecraft missions to celestial objects.User interactions (3).
This user interaction up-dates both the query as well as the suggestionsfor patterns and restrictions.
Now pattern sug-gestions are more specific to the previous selec-tion; For instance, by selecting either the pattern?
[X] orbit [Y]?
or ?
[X] fly by [Y]?,the user can specify relations for spacecraft thathave achieved orbit around celestial objects, orhave made flybys.
By following a process ofquerying, inspecting results, selecting and unse-lecting subtrees and restrictions, the user can in-teractively explore the given corpus for relationsof interest.
Once an interesting relation is iden-tified, the user utilizes the same approach to buildan extractor by compiling a list of relevant patternsfrom the suggestions.
Typically, the more patternsa user selects, the higher the recall of the createdextractor will be.Store extractor.
When the user has identified aninteresting relation and selected a list of relevantpatterns, she can export the extraction results (i.e.all relation instances found by the extractor).
Theuser can also save the extractor and provide a de-scriptive name for the relation for possible laterreuse.3 Web DemonstrationWe now present SCHN?APPER3, our web toolkit forExploratory Relation Extraction.3The tool was named after the Petroicidae famliy of birds,which in German are called Schn?apper.
This name stemsfrom the verb schnappen (Schmitthenner, 1837), which trans-lates as ?to grab?
or ?to catch?.
We found this fitting sincethe tool is used to ?grab?
or ?catch?
information.3.1 Web InterfaceIn order to make the use of SCHN?APPER asstraightforward as possible, the user interface isclearly structured into four panels that fit onto onescreen.
The top half of the screen consists of threepanels in which the user can select patterns and en-tity type restrictions.
The bottom half of the screenis the result panel which displays a sample of ex-traction results for the currently selected patternsand entity type restrictions.
See Figure 2 for thescreen and a breakdown of the panels, which weexplain in more detail in the following:Pattern panel (1) Of the three panels in the up-per half of the screen, the pattern panel assumesthe center stage.
Here, the user can enter keywordsin the search field to find appropriate patterns.
Ifat least one user interaction has already been made(e.g.
one pattern or type restriction selected), a listof pattern suggestions is presented in gray.
Sin-gle clicking on a pattern suggestion gives a smallnumber of example sentences and entity pairs forwhich this pattern holds (this is illustrated in field(6) in Figure 2).
Double-clicking on a pattern addsit to the extractor; it is then highlighted blue andsuggestions as well as the result panel are updatedto reflect the selection.
By double-clicking on aselected pattern, users may remove it again fromthe selection.Entity type restriction panels (2) Extractorsmay also have entity type restrictions which re-strict lexico-syntactic patterns to only apply to en-tities of certain types.
The top right and top leftpanels are used to define restrictions for the sub-ject and object of a binary relation respectively.Here, users have a choice between three differ-ent ways of selecting entity type restrictions.
Thefirst and default option is to use FREEBASE entitytypes (Bollacker et al., 2008).
I.e.
the user canselect the subject of a relation to be only of theFREEBASE type SPACECRAFT, ORGANIZATIONor CELESTIALOBJECT.The user can also restrict a relation to one spe-cific entity.
For instance, by restricting the objectof a BORNIN relation to be the country ?Finland?,the extractor will only find persons born in Fin-land.Finally, the user can restrict entities to thosefound with a previously created extractor.
Userscan embed extractors in this way to find morecomplex relations.
For instance, an extractor that69 Figure 2: Screen capture of the SCHN?APPER tool showing the pattern panel (1) with an activated patternshowing a list of example sentences (6), the entity type restriction panels (2) and the result panel (3).The permalink button (4) and the download button (5) are located at the bottom.finds ?Persons born in Finland?
may be used to re-strict the subject entity of another extractor.
Theother extractor can then find a relation between?Persons born in Finland?
and, for example, en-tities of type BUILDING (?Buildings designed bypersons from Finland?
).Similar to the pattern panel, double-clicking isused to select or unselect type restrictions.
Uponeach interaction, the suggestions as well as the re-sult panel are updated to reflect the current selec-tion.Result panel (3) The lower half of the screen isthe result panel which lists a set of entity pairs thatare found with the presently selected patterns andrestrictions.
Each entity pair is displayed alongwith the sentence that matches the pattern.
Byclicking the magnifying glass symbol next to anentity pair, more details are shown, including theentity pair?s FREEBASE ids and a list of sentencesthat match the selected patterns.Storing and exporting extractors After finish-ing building an extractor, users can export thesetup as a JSON by clicking the download buttonin the lower right corner of the screen (see field(5) in Figure 2).
This exports the selected patternsand restrictions, together with a result list of entitypairs found with the extractor.
In addition, userscan generate a ?permalink?
by clicking the buttonin the lower left corner of the screen (see field (4)in Figure 2).
This allows users to generate links tocreated extractors and share them electronically.3.2 Example UsageWe now briefly give an example of using the tool.Assume a user is interested in a relation betweenpersons and the companies they founded.There are several entry points the user maychoose from.
For instance, the user might searchfor appropriate entity types in the X Type andY Type panels.
Another option is to start by look-ing for appropriate patterns.
For this, the user canuse the search box in the pattern panel (1) to searchfor the general term ?found?.
This results in alist of patterns being displayed, which includes thepattern ?
[X] found [Y]?.
By single-clickingon it, the user can see a list of sentences that in-clude this pattern.
This is illustrated in field (6) inFigure 2.The user activates the pattern by double-clicking it.
He sees the output of the extractorin the result panel (3) as well as patterns and en-70tity types that are suggested based on the currentselection.
Scanning through the result panel, theuser finds that while many matching sentences doindeed express the desired relation (like ?PierreOmidyar founded eBay?
), some others do not(?Snape found Sirius Black?
).The tool however also presents three sets of sug-gestions that the user can use to refine the pat-terns.
For instance, for both X Type and Y Type aranked list of suggestions highlighted gray appears(2).
As illustrated in Figure 2, it suggests PER-SON as X Type and ORGANIZATION as Y Type.The user can affirm suggestions by double click-ing on them.
When selecting ORGANIZATION asY Type, the result panel is updated to reflect themost recent changes.
Scanning through the resultsthe user sees that the extraction quality has greatlyimproved as there are far fewer false positives inthe list.The user may now try to further improve the ex-tractor by selecting more specific patterns.
Thetool suggests the pattern ?
[X] be founderof [Y]?, which more accurately describes therelation the user wants to extract.
Again by single-clicking on the suggestion, the user can see exam-ple sentences that match this pattern, as well as theselected entity type restrictions.
Double-clickingon the pattern adds it to the extractor, which nowconsists of two patterns.
With multiple patternsselected, the tool is now able to suggest patternsmore accurately, offering patterns such as ?
[Y]founded by [X]?, ?
[X] start [Y]?
and?
[X] co-found [Y]?.
By selecting them andimplicitly rejecting those suggestions that do notreflect the desired relation (like the correlatedpatterns ?
[X] president of [Y]?
or ?
[X]CEO of [Y]?
), the user incrementally createsan extractor.After multiple iterations of selecting suggestedpatterns and entity type restrictions the user is ableto download the results of the extractor by usingthe download button (5) at the bottom of the page.3.3 Implementation DetailsWe use CLUEWEB09 as corpus and make use ofFACC1 annotations (Gabrilovich et al., 2013) todetermine entity mentions and their FREEBASEtypes.
We extract all English sentences that con-tain at least 2 FREEBASE entities, yielding over160 million sentences.
We then parse these sen-tences using the CLEARNLP pipeline (Choi andMcCallum, 2013) and preemptively generate allsubtrees for all entity pairs in all sentences.
To-gether with information on the entity types, westore all information in a Lucene index for fast re-trieval.3.4 Hands-on DemonstrationWe plan a hands-on demonstration in whichusers work with SCHN?APPER to explore theCLUEWEB09 corpus for relations of interest.
Ourpurpose is twofold: One the one hand we wouldlike to make the case for the simplicity and in-tuitive nature of the proposed approach.
One theother hand, we would like to gather feedback fromthe NLP community for possible future improve-ments to the approach.
In particular some of themore advanced features such as embedding extrac-tors within other extractors may be interesting todiscuss in a hands-on demo4.4 Previous WorkRecent work in the field of rule-based RE has in-vestigated workflows and tooling to facilitate thecreation of extractors.
(Li et al., 2012) presented awizard-like approach to guide users in the processof building extractors.
In (Akbik et al., 2013), wepresented an example-driven workflow that allowseven users who are unfamiliar with NLP to writeextractors using lexico-syntactic patterns over de-pendency trees.
Similarly, (Grishman and He,2014) create a toolkit for persons who are expertsin a domain of interest, but not in NLP.
Users cre-ate extractors for pre-defined entities and relationsby seeding example instances in a semi-supervisedfashion.
(Gupta and Manning, 2014) use a similarbootstrapping approach and create a tool for vi-sualizing learned patterns for diagnostic purposes.Finally, (Freedman et al., 2011) focus on reduc-ing effort in a user-driven process by including el-ements from active learning and bootstrapping, buttarget their tool at NLP experts.Unlike the approach presented with this demo,these approaches are mostly intended for tradi-tional RE in which relations of interest are spec-ified in advance.
With this demo, we instead sup-port an exploratory workflow in which relationsof interest may be discovered through user inter-actions with available data at little effort.4The tool is also publicly available online.
It can bereached through Alan Akbik?s web page.715 OutlookWhile SCHN?APPER is currently focused on binaryrelations only, we are investigating the applicationof comparable workflows at the entity level.
Ide-ally, we would like to be able to create extractorsthat find named entities of custom types and em-bed them into custom relation extractors.
While,as the demo shows, it is already possible to em-bed extractors into other extractors, more researchis required fully develop the process of creatingentity extractors, which possibly includes develop-ing a different pattern language for the entity level.With more extensive capabilities of creating cus-tom entity extractors, such tooling could conceiv-ably be used to use the approach for knowledgebase population tasks (Surdeanu and Ji, 2014).The approach could be also used to quickly cre-ate custom knowledge bases for specialized topicssuch as the biomedical domain (Hunter and Co-hen, 2006).
Another point of interest is that, sincethe tooling is Web-based, collaborative aspects ofcreating custom knowledge bases can be investi-gated in this context.ReferencesAlan Akbik, Oresti Konomi, and Michail Melnikov.2013.
Propminer: A workflow for interactive infor-mation extraction and exploration using dependencytrees.
In ACL System Demonstrations.
Associationfor Computational Linguistics.Alan Akbik, Thilo Michael, and Christoph Boden.2014.
Exploratory relation extraction in large textcorpora.
In COLING 2014, 25th International Con-ference on Computational Linguistics, Proceedingsof the Conference: Technical Papers, August 23-29,2014, Dublin, Ireland, pages 2087?2096.Kurt Bollacker, Colin Evans, Praveen Paritosh, TimSturge, and Jamie Taylor.
2008.
Freebase: a col-laboratively created graph database for structuringhuman knowledge.
In Proceedings of the 2008 ACMSIGMOD international conference on Managementof data, pages 1247?1250.
ACM.Laura Chiticariu, Yunyao Li, and Frederick R Reiss.2013.
Rule-based information extraction is dead!long live rule-based information extraction systems!In Proceedings of the 2013 Conference on Empiri-cal Methods in Natural Language Processing, pages827?832.Jinho D. Choi and Andrew McCallum.
2013.Transition-based dependency parsing with selec-tional branching.
In Proceedings of the 51st AnnualMeeting of the Association for Computational Lin-guistics.Luciano Del Corro and Rainer Gemulla.
2013.Clausie: clause-based open information extraction.In Proceedings of the 22nd international conferenceon World Wide Web, pages 355?366.
InternationalWorld Wide Web Conferences Steering Committee.Marjorie Freedman, Lance Ramshaw, ElizabethBoschee, Ryan Gabbard, Gary Kratkiewicz, Nico-las Ward, and Ralph Weischedel.
2011.
Extremeextraction: machine reading in a week.
In Proceed-ings of the Conference on Empirical Methods in Nat-ural Language Processing, pages 1437?1446.
Asso-ciation for Computational Linguistics.Evgeniy Gabrilovich, Michael Ringgaard, and Amar-nag Subramanya.
2013.
FACC1: freebase anno-tation of ClueWeb corpora, version 1 (release date2013-06-26, format version 1, correction level 0).Ralph Grishman and Yifan He.
2014.
An informa-tion extraction customizer.
In Text, Speech and Dia-logue, pages 3?10.
Springer.Sonal Gupta and Christopher D Manning.
2014.Spied: Stanford pattern-based information extrac-tion and diagnostics.
Sponsor: Idibon, page 38.Lawrence Hunter and K Bretonnel Cohen.
2006.Biomedical language processing: what?s beyondpubmed?
Molecular cell, 21(5):589?594.Yunyao Li, Laura Chiticariu, Huahai Yang, Frederick RReiss, and Arnaldo Carreno-fuentes.
2012.
Wizie: abest practices guided development environment forinformation extraction.
In Proceedings of the ACL2012 System Demonstrations, pages 109?114.
As-sociation for Computational Linguistics.Gary Marchionini.
2006.
Exploratory search: fromfinding to understanding.
Communications of theACM, 49(4):41?46.Friedrich Schmitthenner.
1837.
Kurzes deutschesW?orterbuch f?ur Etymologie, Synonymik und Or-thographie.
Jonghaus.Yusuke Shinyama and Satoshi Sekine.
2006.
Preemp-tive information extraction using unrestricted rela-tion discovery.
In Proceedings of the main confer-ence on Human Language Technology Conferenceof the North American Chapter of the Association ofComputational Linguistics, pages 304?311.
Associ-ation for Computational Linguistics.Jannik Str?otgen and Michael Gertz.
2010.
Heideltime:High quality rule-based extraction and normaliza-tion of temporal expressions.
In Proceedings of the5th International Workshop on Semantic Evaluation,pages 321?324.
Association for Computational Lin-guistics.Mihai Surdeanu and Heng Ji.
2014.
Overview of theenglish slot filling track at the tac2014 knowledgebase population evaluation.
In Proc.
Text AnalysisConference (TAC2014).72
