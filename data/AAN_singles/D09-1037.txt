Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 352?361,Singapore, 6-7 August 2009.c?2009 ACL and AFNLPA Bayesian Model of Syntax-Directed Tree to String Grammar InductionTrevor Cohn and Phil BlunsomSchool of InformaticsUniversity of Edinburgh10 Crichton Street, Edinburgh EH8 9ABScotland, United Kingdom{tcohn,pblunsom}@inf.ed.ac.ukAbstractTree based translation models are a com-pelling means of integrating linguistic in-formation into machine translation.
Syn-tax can inform lexical selection and re-ordering choices and thereby improvetranslation quality.
Research to date hasfocussed primarily on decoding with suchmodels, but less on the difficult problem ofinducing the bilingual grammar from data.We propose a generative Bayesian modelof tree-to-string translation which inducesgrammars that are both smaller and pro-duce better translations than the previousheuristic two-stage approach which em-ploys a separate word alignment step.1 IntroductionMany recent advances in statistical machine trans-lation (SMT) are a result of the incorporation ofsyntactic knowledge into the translation process(Marcu et al, 2006; Zollmann and Venugopal,2006).
This has been facilitated by the use of syn-chronous grammars to model translation as a gen-erative process over pairs of strings in two lan-guages.
Such models are particularly attractivefor translating between languages with divergentword orders, such as Chinese and English, wheresyntax-inspired translation rules can succinctly de-scribe the requisite reordering operations.
In con-trast, standard phrase-based models (Koehn et al,2003) assume a mostly monotone mapping be-tween source and target, and therefore cannotadequately model these phenomena.
Currentlythe most successful paradigm for the use of syn-chronous grammars in translation is that of string-to-tree transduction (Galley et al, 2004; Zollmannand Venugopal, 2006; Galley et al, 2006; Marcuet al, 2006).
In this case a grammar is extractedfrom a parallel corpus, with strings on its sourceside and syntax trees on its target side, which isthen used to translate novel sentences by perform-ing inference over the space of target syntax treeslicensed by the grammar.To date grammar-based translation models haverelied on heuristics to extract a grammar from aword-aligned parallel corpus.
These heuristics areextensions of those developed for phrase-basedmodels (Koehn et al, 2003), and involve sym-metrising two directional word alignments fol-lowed by a projection step which uses the align-ments to find a mapping between source words andnodes in the target parse trees (Galley et al, 2004).However, such approaches leave much to be de-sired.
Word-alignments rarely factorise cleanlywith parse trees (i.e., alignment points cross con-stituent structures), resulting in large and implau-sible translation rules which generalise poorly tounseen data (Fossum et al, 2008).
The principalreason for employing a grammar based formal-ism is to induce rules which capture long-rangereorderings between source and target.
Howeverif the grammar itself is extracted using word-alignments induced with models that are unableto capture such reorderings, it is unlikely that thegrammar will live up to expectations.In this work we draw on recent advances inBayesian modelling of grammar induction (John-son et al, 2007; Cohn et al, 2009) to propose anon-parametric model of synchronous tree substi-tution grammar (STSG), continuing a recent trendin SMT to seek principled probabilistic formula-tions for heuristic translation models (Zhang et al,2008; DeNero et al, 2008; Blunsom et al, 2009b;Blunsom et al, 2009a).
This model leverages ahierarchical Bayesian prior to induce a compacttranslation grammar directly from a parsed paral-lel corpus, unconstrained by word-alignments.
Weshow that the induced grammars are more plausi-ble and improve translation output.This paper is structured as follows: In Section3522 we introduce the STSG formalism and describecurrent heuristic approaches to grammar induc-tion.
We define a principled Bayesian model ofstring-to-tree translation in Section 3, and describean inference technique using Gibbs sampling inSection 4.
In Section 5 we analyse an inducedgrammar on a corpus of Chinese?English trans-lation, comparing them with a heuristic grammarin terms of grammar size and translation quality.2 BackgroundCurrent tree-to-string translation models are aform of Synchronous Tree Substitution Grammar(STSG; Eisner (2003)).
Formally, a STSG is a5-tuple, G = (T, T?, N, S,R), where T and T?are sets of terminal symbols in the target andsource languages respectively, N is a set of non-terminal symbols, S ?
N is the distinguishedroot non-terminal and R is a set of productions(a.k.a.
rules).
Each production is a tuple compris-ing an elementary tree and a string, the formerreferring to a tree fragment of depth ?
1 whereeach internal node is labelled with a non-terminaland each leaf is labelled with either a terminal ora non-terminal.
The string part of the rule de-scribes the lexical component of the rule in thesource language and includes a special variable foreach frontier non-terminal in the elementary tree.These variables describe the reordering and formthe recursion sites in the generative process of cre-ating tree and string pairs with the grammar.
Forexample, the rule?
(NP NP 1 (PP (IN of) NP 2 )), 2 ?
1 ?
(1)rewrites a noun-phrase (NP) as a NP and prepo-sitional phrase (PP) headed by ?of?
in the targetlanguage.
The rule generates the token ???
inthe source and reverses the order of the two childnoun-phrases, indicated by the numbering of thevariables in the string part.A derivation creates a (tree, string) pair by start-ing with the root non-terminal and an empty string,then choosing a rule to rewrite (substitute) the non-terminal and expand the string.
This process re-peats by rewriting all frontier non-terminals untilthere are none remaining.
A Probabilistic STSGassigns a probability to each rule in the grammar.The probability of a derivation is the product ofthe probabilities of its component rules, and theprobability of a (tree, string) pair is the sum of theprobabilities over all its derivations.2.1 Heuristic Grammar InductionGrammar based SMT models almost exclusivelyfollow the same two-stage approach to gram-mar induction developed for phrase-based meth-ods (Koehn et al, 2003).
In this approach theyinduce a finite-state grammar with phrase-pairs asrules by taking a sentence aligned parallel cor-pus and 1) predicting word alignments before 2)extracting transduction rules that are ?consistent?with the word aligned data.
Although empiri-cally effective, this two stage approach is less thanideal due to the disconnect between the word-based models used for alignment and the phrase-based translation model.
This is problematic as theword-based model cannot recognise phrase-basedphenomena.
Moreover, it raises the problem ofidentifying and weighting the rules from the wordalignment.The same criticisms levied at the phrase-basedmodels apply equally to the two-stage techniqueused for synchronous grammar induction (Galleyet al, 2004; Zollmann and Venugopal, 2006; Gal-ley et al, 2006; Marcu et al, 2006).
Namely thatthe word alignment models typically do not useany syntax and therefore will not be able to model,e.g., consistent syntactic reordering effects, or theimpact of the syntactic category on phrase transla-tions.
The identification and estimation of gram-mar rules from word aligned data is also non-trivial.
Galley et al (2004) describe an algorithmfor inducing a string-to-tree grammar using a par-allel corpus with syntax trees on target side.
Theirmethod projects the source strings onto nodes ofthe target tree using the word alignment, and thenextracts the minimal transduction rules as well asrules composed of adjacent minimal units.
Theproduction weights are estimated either by heuris-tic counting (Koehn et al, 2003) or using the EMalgorithm.
Both estimation techniques are flawed.The heuristic method is inconsistent in the limit(Johnson, 2002) while EM is degenerate, placingdisproportionate probability mass on the largestrules in order to describe the data with as few arules as possible (DeNero et al, 2006).
With nolimit on rule size this method will learn a singlerule for every training instance, and therefore willnot generalise to unseen sentences.
These prob-lems can be ameliorated by imposing limits onrule size or early stopping of EM training, how-ever neither of these techniques addresses the un-derlying problems.353In contrast, our model is trained in a single step,i.e., the alignment model is the translation model.This allows syntax to directly inform the align-ments.
We infer a grammar without resorting toword alignment constraints or limits on rule size.The model uses a prior to bias towards a compactgrammar with small rules, thus solving the degen-eracy problem.3 ModelOur training data comprises parallel target treesand source strings and our aim is to induce a STSGthat best describes this data.
This is achievedby inferring a distribution over the derivations foreach training instance, where the set of derivationscollectively specify the grammar.
In the follow-ing, we denote the source trees as t, target stringss, and derivations r which are sequences of gram-mar rules, r.As described in section 2.1, previous methodsfor estimating a STSG have suffered from degen-eracy.
A principled way to correct for such degen-erated behaviour is to use a prior over rules whichbiases towards small rules.
This matches our intu-ition: we expect good translation rules to be small,with few internal nodes, frontier non-terminalsand terminal strings.
However, we recognise thaton occasion larger rules will be necessary; we al-low such rules when there is sufficient support inthe data.We model the grammar as a set of distributions,Gc, over the productions for each non-terminalsymbol, c. We adopt a non-parametric Bayesianapproach by treating eachGcas a random variablewith a Dirichlet process (DP) prior,r|c ?
GcGc|?c, P0?
DP(?c, P0(?|c)) ,where P0(?|c) (the base distribution) is a distribu-tion over the infinite space of trees rooted with c,and ?c(the concentration parameter) controls themodel?s tendency towards either reusing existingrules or creating novel ones as each training in-stance is encountered (and consequently, the ten-dency to infer larger or smaller grammars).
Wediscuss the base distribution in more detail below.Rather than representing the distribution Gcex-plicitly, we integrate over all possible values ofGc.This leads to the following predictive distributionfor the rule rigiven the previously observed rulesr?i= r1.
.
.
ri?1,p(ri|r?i, c, ?c, P0) =n?iri+ ?cP0(ri|c)n?ic+ ?c, (2)where n?iriis the number number of timesrihas been used to rewrite c in r?i, andn?ic=?r,R(r)=cn?iris the total count of rewrit-ing c (hereR(r) is the root non-terminal of r).
Thedistribution is exchangeable, meaning that all per-mutations of the input sequence are assigned thesame probability.
This allows us to treat any itemas being the last, which is fundamental for efficientGibbs sampling.
Henceforth we adopt the notationr?and n?to refer to the rules and counts for thewhole data set excluding the current rules underconsideration, irrespective of their location in thecorpus.The base distribution, P0, assigns a prior prob-ability to an infinite number of rules, where eachrule is an (elementary tree, source string) pair de-noted r = (e,w).
While there are a myriad ofpossible distributions, we developed a very sim-ple one.
We decompose the probability into twofactors,P0(e,w|c) = P (e|c)P (w|e) , (3)the probability of the target elementary treeand the probability of the source string, wherec = R(r).The tree probability, P (e|c) in (3), is modelledusing generative process whereby the root cate-gory c is expanded into a sequence of child non-terminals, then each of these are either expandedor left as-is.
This process continues until thereare no unprocessed children.
The number of childnodes for each expansion is drawn from a geo-metric prior with parameter pchild, except in thecase of pre-terminals where the number of chil-dren is always one.
The binary expansion deci-sions are drawn from a Bernoulli prior with pa-rameter pexpand, and non-terminals and terminalsare drawn uniformly from N and T respectively.For example, the source side of rule (1) was gen-erated as follows: 1) the NP was rewritten as twochildren; 2) an NP; and 4) a PP; 5) the NP childwas not expanded; 6) the PP child was expanded;7) as an IN; and 8) a NP; 9) the IN was expanded tothe terminal ?of?
; and 10) the final NP was not ex-panded.
Each of these steps is a draw from the rel-evant distribution, and the total probability is theproduct of the probabilities for each step.354Hong/NNP Kong/NNP??
?
?
?
?
??
?
??
?
??
?SNPVP ./.NP PPEvery/DT corner/NN of/IN NPis/VBZ VPfilled/VBN PPwith/IN NPfun/NN0 1 2 3 4 5 6 7 8 109 11[2,3)[2,6)[3,6) [0,1)[0,2)[0,11)[10,11)[6,10)[6,10)[7,9) [9,10)[9,10)???
?
?
?
?Figure 1: Example derivation.
Each node is annotated with their span in the target string (aligned nodes are shaded).
The dottededges show the implied alignments.
Preterminals are displayed with their child terminal in the leaf nodes.The second factor in (3) is P (w|e), the prob-ability of the source string (a sequence of sourceterminals and variables).
We assume that the el-ementary tree is generated first, and condition thestring probability on l = F (e), its number of fron-tier nodes (i.e., variables).
The string is then cre-ated by choosing a number of terminals from a ge-ometric prior with parameter ptermthen drawingeach terminal from a uniform distribution over T?.Finally each of the l variables are inserted into thestring one at a time using a uniform distributionover the possible placements.
For the example rulein (1) the generative process corresponds to 1) de-ciding to create one terminal; 2) with value ?
; 3)inserting the first variable after the terminal; and4) inserting the second variable before the termi-nal.
Again, the probability of the string is simplythe product of the probabilities for each step.Together both the factors in the base distribu-tion penalise large trees with many nodes and longstrings with many terminals and variables.
P0de-creases exponentially with rule size, thus discour-aging the model from using larger rules; for thisto occur the rules must significantly increase thelikelihood.4 TrainingTo train our model we use Gibbs sampling (Gemanand Geman, 1984), a Markov chain Monte Carlomethod (Gilks et al, 1996) in which variables arerepeatedly sampled conditioned on the values ofall other variables in the model.1After a period ofburn-in, each sampler state (set of variable assign-ments) is a sample from the posterior distributionof the model.
In our case, we wish to sample fromthe posterior over the grammar, P (r|t, s, ?
).To simplify matters we associate an alignmentvariable, a, with every internal node of the treesin the training set.
This variable specifies the spanof source tokens to which node is aligned.
Alter-natively, the node can be unaligned, which is en-coded as an empty span.
I.e.
a ?
(J ?
J) ?
?where J is the set of target word indices.
Spansare written [i, j): inclusive of i and exclusive ofj.
Each aligned node (a 6= ?)
forms the rootof a rule as well as being a frontier non-terminalof an ancestor rule, while unaligned nodes formpart of an ancestor rule.2The set of valid align-ments are constrained by the tree in a number ofways.
Child nodes can be aligned only to sub-spans of their ancestor nodes?
alignments and notwo nodes?
alignments can overlap.
Finally, theroot node of the tree must be aligned to the full1Previous approaches to bilingual grammar inductionhave used variational inference to optimise a bound on thedata log-likelihood (Zhang et al, 2008; Blunsom et al,2009b).
Both these approaches truncated the grammar a pri-ori in order to permit tractable inference.
In contrast ourGibbs sampler can perform inference over the full space ofgrammars.
See also Blunsom et al (2009a) where we presenta Gibbs sampler for inducing SCFGs without truncation.2The Gibbs sampler is an extension of our sampler formonolingual tree-substitution grammar (Cohn et al, 2009),which used a binary substitution variable at each node to en-code the segmentation of a training tree into elementary trees.355?
(S (NP NP 1 PP 2 ) VP 3 .
4 ), 2 1 3 4 ??
(NP DT 1 NN 2 ), 1 2 ??
(DT Every),???
(NN corner),??????
(PP (IN of) NP 1 ), 1 ???
(NP (NNP Hong) (NNP Kong)),????
(VP (VBZ is) VP 1 ), 1 ??
(VP VBN 1 PP 2 ),?
1 2 ??
(VBN filled),????
(PP (IN with) (NP NN 1 )), 1 ??
(NN fun),???(.
.),?
?Table 1: Grammar rules specified by the derivation in Fig-ure 1.
Each rule is shown as a tuple comprising a tar-get elementary tree and a source string.
Boxed numbersshow the alignment between string variables and frontier non-terminals.span of source words.Collectively, the training trees and alignmentvariables specify the sequence of rules r, whichin turn specify the grammar.
Figure 1 shows anexample derivation with alignment variables.
Thecorresponding STSG rules are shown in Table 1.4.1 Gibbs operatorsThe Gibbs sampler works by sampling new val-ues of the alignment variables, using two differ-ent Gibbs operators to make the updates.
The firstoperator, EXPAND, takes a tree node, v, and sam-ples a new alignment, av, given the alignments ofall other nodes in the same tree and all other treesin the corpus, denoted a?.
The set of valid la-bels is constrained by the other alignments in thetree, specifically that of the node?s closest alignedancestor, ap, its closest aligned descendants, ad,and its aligned siblings, as(the aligned descen-dants of a).
The alignment variable may be empty,av= ?, while non-empty values must obey thetree constraints.
Specifically the span must be asubspan of its ancestor, av?
ap, subsume its de-scendants, av?
?ad, and not overlap its siblings,j 6?
?as,?j ?
av.
Figure 2 shows an exam-ple with the range of valid values for corner/NN?salignment variable and the corresponding align-ments that these encode.Each alignment in the set of valid outcomes de-fines a set of grammar rules.
The non-aligned out-come results in a single rule rprooted at ancestornode p. While the various aligned outcomes re-?
?
?
?
?NPEvery/DT corner/NN2 3 4 5[2,3)[2,6)[3,6)?
?
?
?
?NPEvery/DT corner/NN2 3 4 5[2,3)[2,6)[4,6)?
?
?
?
?NPEvery/DT corner/NN2 3 4 5[2,3)[2,6)[5,6)?
?
?
?
?NPEvery/DT corner/NN2 3 4 5[2,3)[2,6)?
?
?
?
?NPEvery/DT corner/NN2 3 4 5[2,3)[2,6)[4,5)?
?
?
?
?NPEvery/DT corner/NN2 3 4 5[2,3)[2,6)[3,4)6 6666 6?Figure 2: Possible state updates for the (NN corner) node us-ing the EXPAND operator.sult in a pair of rules, rp?and rv, rooted at p and vrespectively.
In the example in Figure 2, the top-right outcome has av= ?
andrp= ?
(NP DT 1 (NN corner)), 1 ?????
.The bottom-right outcome, av= [4, 5), describesthe pair of rules:rp?= ?
(NP DT 1 NN 2 ), 1 ?
2 ???
andrv= ?
(NN corner),??
.The set of valid options are then scored accordingto the probability of their rules as follows:P (rp|r?)
=n?rp+ ?P0(rp|cp)n?cp+ ?
(4)P (rp?, rv|r?)
= P (rp?|r?
)P (rv|r?, rp?
)=n?rp?+ ?P0(rp?|cp)n?cp+ ??
(5)n?rv+ ?
(rp?, rv) + ?P0(rv|cv)n?cv+ ?
(cp, cv) + ?where cpis the non-terminal at node p (simi-larly for cv), n?denote counts of trees (e.g., n?rp)or the sum over all trees expanding a non-terminal (e.g., n?cv) in the conditioning context,r?, and ?
(?, ?)
is the Kronecker delta function,which returns 1 when its arguments are identi-cal and 0 otherwise.
For clarity, we have omit-ted some items from the conditioning context356in (4) and (5), namely t, s and hyper-parameters?, pchild, pexpand, pterm.
The ?
terms in the sec-ond factor of (5) account for the changes to n?that would occur after observing rp?, which formspart of the conditioning context for rv.
If the rulesrp?and rvare identical, then the count n?rvwouldincrease by one, and if the rules expand the sameroot non-terminal, then n?cvwould increase by one.Equation (4) is evaluated once for the unalignedoutcome, av= ?, and (5) is evaluated for eachvalid alignment.
The probabilities are normalisedand an outcome sampled.The EXPAND operator is sufficient to movefrom one derivation to any other valid derivation,however it may take many steps to do so.
Theseintermediate steps may require the sampler to passthrough highly improbable regions of the statespace, and consequently such moves are unlikely.The second operator, SWAP, is designed to helpaddress this problem by increasing the mobility ofthe sampler, allowing it to mix more quickly.
Theoperator considers pairs of nodes, v, w, in one treeand attempts to swap their alignment values.3Thisis illustrated in the example in Figure 3.
There aretwo options being compared: preserving the align-ments (left) or swapping them (right).
This canchange three rules implied by the derivation: thatrooted at the nodes?
common aligned ancestor, p,and those rooted at v and w. For the example, theleft option implies rules{rp= ?
(NP DT 1 NN 2 ), 1 2 ?,rv= ?
(DT Every),?
?,rw= ?
(NN corner),?????}
,and the right option implies rules{rp= ?
(NP DT 1 NN 2 ), 2 1 ?,rv= ?
(DT Every),????
?,rw= ?
(NN corner),??}
.We simply evaluate the probability ofboth triples of rules under our model,P (rp, rv, rw|r?)
= P (rp|r?
)P (rv|r?, rp)P (rw|r?, rp, rv), where the additional rules inthe conditioning context signify their inclusionin the counts r?before applying (2) to evaluatethe probability (much the same as in (5) where3We rarely need to consider the full quadratic space ofnode pairs, as the validity constraints mean that the onlycandidates for swapping are siblings (i.e., share the closestaligned ancestor) which do not have any aligned descendants.?
?
?
?
?NPEvery/DT corner/NN2 3 4 5[2,3)[2,6)[3,6)?
?
?
?
?NPEvery/DT corner/NN2 3 4 5[3,6)[2,6)6 6[2,3)Figure 3: Possible state updates for the pair of nodes(DT every) and (NN corner) using the SWAP operator.English?
ChineseSentences 300kWords or Segments 11.0M 8.6MAvg.
Sent.
Length 36 28Longest Sent.
80 80Table 2: NIST Chinese-English corpora statistics(LDC2003E14, LDC2005E47).the ?
functions encode the changes to the counts).An outcome is then sampled according to thenormalised probabilities of the preserve vs. swaprules.The Gibbs sampler makes use of both operators.The algorithm visits each (tree, string) pair in thetraining set in random order and applies the EX-PAND operator to every node in the tree.
After thetree has been processed, the SWAP operator is ap-plied to all candidate pairs of nodes.
Visiting allsentence pairs in this way constitutes a single sam-ple from the Gibbs sampler.5 ExperimentsWe evaluate our non-parametric model of gram-mar induction on a subset of the NIST Chinese-English translation evaluation, representing a real-istic SMT experiment with millions of words andlong sentences.
The Chinese-English training dataconsists of the FBIS corpus (LDC2003E14) andthe first 100k sentence pairs from the Sinoramacorpus (LDC2005E47).
The Chinese text was seg-mented with a CRF-based Chinese segmenter op-timized for MT (Chang et al, 2008), and the En-glish text was parsed using the Stanford parser(Klein and Manning, 2003).As a baseline we implemented the heuristicgrammar extraction technique of Galley et al(2004) (henceforth GHKM).
This method findsthe minimum sized translation rules which areconsistent with a word-aligned sentence pair, as357described in section 2.1.
The rules are thentreated as events in a relative frequency esti-mate.4We used Giza++ Model 4 to obtainword alignments (Och and Ney, 2003), usingthe grow-diag-final-and heuristic to sym-metrise the two directional predictions (Koehn etal., 2003).The model was sampled for 300 iterations to?burn-in?, where in each iteration we applied bothsampling operators to all nodes (or node pairs)of all training instances.
We initialised the sam-pler using the GHKM derivation of the trainingdata (the baseline system).
The final state of thesampler was used to extract the grammar.
Thehyperparameters were set by hand to ?
= 106,pchild= 0.5, pexpand= 0.5, and pterm= 0.5.5Overall the model took on average 2,218s per fulliteration of Gibbs sampling and 1 week in totalto train, using a single core of a 2.3Ghz AMDOpteron machine.5.1 Grammar AnalysisThe resulting grammar had 1.62M rules, al-most identical to the GHKM grammar which had1.63M.
Despite their similarity in size the gram-mars were quite different, as illustrated in Fig-ure 4, which shows histograms over various mea-sures of rule size for the two grammars.
Undereach measure the sampled grammar finds manymore simple rules ?
shallower with fewer internalnodes, fewer variables and fewer terminals ?
thanthe GHKM method.
This demonstrates that theprior is effective in shifting mass away from com-plex rules.
To show how the rules themselves dif-fer, Table 3 lists rules in the sampled grammar thatare not in the GHKM grammar.
Note that many ofthese rules are highly plausible, describing regulartree structures and lexicalisation.
These rules havenot been specified to the same extent in the GHKMgrammar.
For example the first rule incorporates4Our implementation of the GHKM algorithm attachesunaligned source words to the highest possible node in thesource tree, rather than allowing all attachment points as inthe original presentation (Galley et al, 2004).
Allowing allattachments made no difference to translation performance,but did make the grammar considerably larger.
We imple-mented only the minimal rule extraction, i.e., with no rulecomposition (Galley et al, 2006).
Consequently there is noderivational ambiguity, obviating the need for expectationmaximisation or similar for rule estimation.5Note that although ?
seems large, it still encouragessparse distributions as the P0values are typically muchsmaller than its reciprocal, 10?6, especially if the rule islarge.
?P0< 1 implies a sparse Dirichlet prior.1 2 3 4 5 6 7 8 9 10 11GKHMGibbsmaximum tree depthnumber of rules020k40k60k80k0 1 2 3 4 5 6 7 8 9 10variablesnumber of rules020k40k60k80k0 1 2 3 4 5 6 7 8 9 10source terminalsnumber of rules020k40k60k80k0 1 2 3 4 5 6 7 8 9 10target terminalsnumber of rules025k50k75k100kFigure 4: Histograms over rule statistics comparing theheuristic grammar (GHKM) and learnt grammar (Gibbs).the TOP symbol, while the GHKM grammar in-stead relies on the rule ?
(TOP S 1 ), 1 ?
to producethe same fragment.
The model has learnt to dis-tinguish between sentence-spanning and subsen-tential S constituents, which typically do not in-clude final punctuation.
The third and ninth (last)rule are particularly interesting.
These rules en-code reordering effects relating to noun phrasesand subordinate prepositional phrases, in partic-ular that Chinese prepositional modifiers precedethe nouns they modify.
Differences in word or-der such as these are quite common in Chinese-English corpora, so it is imperative that they aremodelled accurately.The rules in the GHKM grammar that do notappear in the sampled grammar are shown inTable 4.
In contrast to the rules only present inthe sampled grammar, these have much lowercounts, i.e., are less probable.
Each of these ruleshas been specified further by the Bayesian model.358?
(TOP (S NP 1 VP 2 .
3 )), 1 2 3 ??
(S (VP (TO to) VP 1 )), 1 ??
(NP NP 1 (PP (IN of) NP 2 )), 2 1 ??
(PP (IN in) NP 1 ), ?
1 ??
(NP NP 1 (PP (IN of) NP 2 )), 1 2 ??
(NP (DT the) NN 1 ), ?
1 ??
(S (VP TO 1 VP 2 )), 1 2 ??
(VP (VBZ is) NP 1 ), ?
1 ??
(NP (NP (DT the) NN 1 ) (PP (IN of) NP 2 )), 2 1 ?Table 3: Top ten rules in the sampled grammar that do notappear in the GHKM grammar.
All the above rules are quitehigh probability, with counts between 37,118 and 7,275 fromfirst to last.?
(PP (IN at) (NP DT 1 (NNS levels))), 1 ???
(NP NP 1 , 2 NP 3 (, ,) CC 4 NP 5 ), 1 2 3 4 5 ??
(NP NP 1 , 2 NP 3 , 4 NP 5 (, ,) (CC and) NP 6 ), 1 2 3 4 5 , 6 ??
(S S 1 (NP (PRP They)) VP 2 .
3 ), 1 2 3 ??
(S PP 1 , 2 NP 3 VP 4 .
5 ?
6 ), 1 2 3 4 6 5 ??
(S PP 1 , 2 NP 3 VP 4 .
5 ), 1 ?
2 3 4 5 ??
(NP (NNP Foreign) (NNP Ministry) NN 1 (NNP Zhu) (NNP Bangzao)),???
1 ?????
(S S 1 S 2 ), 1 2 ??
(S S 1 (NP (PRP We)) VP 2 .
3 ), 1 2 3 ??
(NP (DT the) (NNS people) POS 1 ), ??
1 ?Table 4: Top ten rules in the GHKM grammar that do not ap-pear in the sampled grammar.
These are quite low probabilityrules: their counts range from 1,137 to 103.For example, every instance of the first rulehad the same determiner and target translation,?
(PP (IN at) (NP (DT all) (NNS levels))),??
?,and therefore the model specified the determiner,resulting in a single rule.
The model has correctlylearnt that other translations for (DT all) arenot appropriate in this context (e.g., ?, ?
?or ??).
In a number of the remaining rulesthe commas were lexicalised, or S rules wereextended to include the TOP symbol.To further illustrate the differences between thegrammars, Table 5 shows the rules which includethe possessive particle, ?, and at least one vari-able.
In both grammars there are many fully lex-icalised rules which translate the token to, e.g., adeterminer or a preposition.
The grammars differon the complex rules which combine lexicalisa-tion and frontier non-terminals.
The GHKM rulesare all very simple depth-1 SCFG rules, contain-ing minimal information.
In contrast, the sampledrules are more lexicalised, licensing the insertionof various English tokens and tree substructure.Note particularly the second and forth rule whichsuccinctly describe the reordering of prepositionalSampled Grammar?
(NP (DT the) NN 1 ),?
1 ??
(NP (NP (DT the) NN 1 ) (PP (IN of) NP 2 )), 2 ?
1 ??
(NP (DT the) NN 1 ), 1 ???
(NP (NP (DT the) JJ 1 NN 2 ) (PP (IN of) NP 3 )), 3 ?
1 2 ??
(PP (IN of) NP 1 ), 1 ?
?GHKM Grammar?
(NP JJ 1 NNS 2 ), 1 ?
2 ??
(NP JJ 1 NN 2 ), 1 ?
2 ??
(NP DT 1 JJ 2 NN 3 ), 1 2 ?
3 ??
(NP PRP$ 1 NN 2 ), 1 ?
2 ??
(NP NP 1 PP 2 ), 2 ?
1 ?Table 5: Top five rules which include the possessive particle?
and at least one variable.phrases with an noun phrase.5.2 TranslationIn order to test the translation performance ofthe grammars induced by our model and theGHKM method6we report BLEU (Papineni etal., 2002) scores on sentences of up to twentywords in length from the MT03 NIST evaluation.We built a synchronous beam search decoder tofind the maximum scoring derivation, based onthe CYK+ chart parsing algorithm and the cube-pruning method of Chiang (2007).
Parse edges forall constituents spanning a given chart cell werecube-pruned together using a beam of width 1000,and only edges from the top ten constituents ineach cell were retained.
No artificial glue-rules orrule span limits were employed.7The parametersof the translation system were trained to maximizeBLEU on the MT02 test set (Och, 2003).
Decodingtook roughly 10s per sentence for both grammars,using a 8-core 2.6Ghz Intel Xeon machine.Table 6 shows the BLEU scores for the baselineusing the GHKM rule induction algorithm, andour non-parametric Bayesian grammar inductionmethod.
We see a small increase in generalisationperformance from our model.
Our previous anal-6Our decoder was unable to process unary rules (thosewhich consume nothing in the source).
Monolingual pars-ing with unary productions is fairly straightforward (Stolcke,1995), however in the transductive setting these rules can li-cence infinite insertions in the target string.
This is furthercomplicated by the language model integration.
Thereforewe composed each unary rule instance with its descendantrule(s) to create a non-unary rule.7Our decoder lacks certain features shown to be beneficialto synchronous grammar decoding, in particular rule binari-sation (Zhang et al, 2006).
As such the reported results forMT03 lag the state-of-the-art: the Moses phrase-based de-coder (Koehn et al, 2007) achieves 26.8.
We believe that im-provements from a better decoder implementation would beorthogonal to the improvements presented here (and wouldallow us to relax the length restriction on the test set).359Model BLEU scoreGHKM 26.0Our model 26.6Table 6: Translation results on the NIST test set MT03 forsentences of length ?
20.ysis (Section 5.1) of the grammars produced bythe two approaches showed our method producedbetter lexicalised rules than those induced by theGHKM algorithm.
Galley et al (2006) noted thatthe GHKM algorithm often over generalised andproposed combining minimal rules to form com-posed rules as a solution.
Although composingrules was effective at improving BLEU scores, theresult was a massive expansion in the size of thegrammar.
By learning the appropriate level of lex-icalisation we believe that our inference algorithmis having a similar effect as composing rules (Gal-ley et al, 2006), however the resulting grammarremains compact, a significant advantage of ourapproach.6 ConclusionIn this paper we have presented a method for in-ducing a tree-to-string grammar which removesthe need for various heuristics and constraintsfrom models of word alignment.
Instead the modelis capable of directly inferring a grammar in onestep, using the syntactic fragments that it has learntto better align the source and target data.
Using aprior which favours sparse distributions and sim-pler rules, we demonstrate that the model findsa more parsimonious grammar than the heuristictechnique.
Moreover, this grammar results in im-proved translations on a standard evaluation set.We expect that various extensions to the modelwould improve its performance.
One avenue is todevelop a more sophisticated prior over rules, e.g.,one that recognises common types of rule via theshape of the tree and ordering pattern in the tar-get.
A second avenue is to develop better meansof inference under the grammar, in order to ensurefaster mixing and a means to escape from localoptima.
Finally, we wish to develop a method fordecoding under the full Bayesian model, instead ofthe current beam search.
With these extensions weexpect that our model of grammar induction hasthe potential to greatly improve translation output.AcknowledgementsThe authors acknowledge the support of the EP-SRC (grants GR/T04557/01 and EP/D074959/1).This work has made use of the resources pro-vided by the Edinburgh Compute and Data Facility(ECDF).
The ECDF is partially supported by theeDIKT initiative.ReferencesP.
Blunsom, T. Cohn, C. Dyer, M. Osborne.
2009a.A Gibbs sampler for phrasal synchronous grammarinduction.
In Proceedings of the Joint conferenceof the 47th Annual Meeting of the Association forComputational Linguistics and the 4th InternationalJoint Conference on Natural Language Processingof the Asian Federation of Natural Language Pro-cessing, Singapore.
To appear.P.
Blunsom, T. Cohn, M. Osborne.
2009b.
Bayesiansynchronous grammar induction.
In D. Koller,D.
Schuurmans, Y. Bengio, L. Bottou, eds., Ad-vances in Neural Information Processing Systems21, 161?168.
MIT Press, Cambridge, MA.P.-C. Chang, M. Galley, C. D. Manning.
2008.
Op-timizing Chinese word segmentation for machinetranslation performance.
In Proceedings of theThird Workshop on Statistical Machine Translation,224?232, Columbus, Ohio.D.
Chiang.
2007.
Hierarchical phrase-based transla-tion.
Computational Linguistics, 33(2):201?228.T.
Cohn, S. Goldwater, P. Blunsom.
2009.
Inducingcompact but accurate tree-substitution grammars.In Proceedings of Human Language Technologies:The 2009 Annual Conference of the North AmericanChapter of the Association for Computational Lin-guistics, 548?556, Boulder, Colorado.J.
DeNero, D. Gillick, J. Zhang, D. Klein.
2006.Why generative phrase models underperform sur-face heuristics.
In Proceedings on the Workshop onStatistical Machine Translation, 31?38, New YorkCity, NY.J.
DeNero, A. Bouchard-C?ot?e, D. Klein.
2008.
Sam-pling alignment structure under a Bayesian transla-tion model.
In Proceedings of the 2008 Conferenceon Empirical Methods in Natural Language Pro-cessing, 314?323, Honolulu, Hawaii.J.
Eisner.
2003.
Learning non-isomorphic tree map-pings for machine translation.
In The CompanionVolume to the Proceedings of 41st Annual Meeting ofthe Association for Computational Linguistics, 205?208, Sapporo, Japan.V.
Fossum, K. Knight, S. Abney.
2008.
Using syn-tax to improve word alignment precision for syntax-based machine translation.
In Proceedings of the360Third Workshop on Statistical Machine Translation,44?52, Columbus, Ohio.M.
Galley, M. Hopkins, K. Knight, D. Marcu.
2004.What?s in a translation rule?
In Proceedings of the2004 Human Language Technology Conference ofthe North American Chapter of the Association forComputational Linguistics, 273?280, Boston, MA.M.
Galley, J. Graehl, K. Knight, D. Marcu, S. DeNeefe,W.
Wang, I. Thayer.
2006.
Scalable inference andtraining of context-rich syntactic translation mod-els.
In Proceedings of the 21st International Con-ference on Computational Linguistics and 44th An-nual Meeting of the Association for ComputationalLinguistics, 961?968, Sydney, Australia.S.
Geman, D. Geman.
1984.
Stochastic relaxation,Gibbs distributions and the Bayesian restoration ofimages.
IEEE Transactions on Pattern Analysis andMachine Intelligence, 6:721?741.W.
Gilks, S. Richardson, D. J. Spiegelhalter, eds.
1996.Markov Chain Monte Carlo in Practice.
Chapmanand Hall, Suffolk.M.
Johnson, T. L. Griffiths, S. Goldwater.
2007.Adaptor grammars: A framework for specifyingcompositional nonparametric Bayesian models.
InB.
Sch?olkopf, J. Platt, T. Hoffman, eds., Advancesin Neural Information Processing Systems 19, 641?648.
MIT Press, Cambridge, MA.M.
Johnson.
2002.
The DOP estimation method isbiased and inconsistent.
Computational Lingusitics,28(1):71?76.D.
Klein, C. D. Manning.
2003.
Fast exact inferencewith a factored model for natural language parsing.In In Advances in Neural Information ProcessingSystems 15, 3?10.
MIT Press.P.
Koehn, F. J. Och, D. Marcu.
2003.
Statisti-cal phrase-based translation.
In Proceedings ofthe 2003 Human Language Technology Conferenceof the North American Chapter of the Associationfor Computational Linguistics, 48?54, Edmonton,Canada.P.
Koehn, H. Hoang, A. Birch, C. Callison-Burch,M.
Federico, N. Bertoldi, B. Cowan, W. Shen,C.
Moran, R. Zens, C. Dyer, O. Bojar, A. Con-stantin, E. Herbst.
2007.
Moses: Open sourcetoolkit for statistical machine translation.
In Pro-ceedings of the 45th Annual Meeting of the Associa-tion for Computational Linguistics Companion Vol-ume Proceedings of the Demo and Poster Sessions,177?180, Prague, Czech Republic.D.
Marcu, W. Wang, A. Echihabi, K. Knight.
2006.SPMT: Statistical machine translation with syntact-ified target language phrases.
In Proceedings of the2006 Conference on Empirical Methods in NaturalLanguage Processing, 44?52, Sydney, Australia.F.
J. Och, H. Ney.
2003.
A systematic comparison ofvarious statistical alignment models.
ComputationalLinguistics, 29(1):19?51.F.
J. Och.
2003.
Minimum error rate training in sta-tistical machine translation.
In Proceedings of the41st Annual Meeting of the Association for Compu-tational Linguistics, 160?167, Sapporo, Japan.K.
Papineni, S. Roukos, T. Ward, W.-J.
Zhu.
2002.BLEU: a method for automatic evaluation of ma-chine translation.
In Proceedings of the 40th AnnualMeeting of the Association for Computational Lin-guistics, 311?318, Philadelphia, PA.A.
Stolcke.
1995.
An efficient probabilistic context-free parsing algorithm that computes prefix proba-bilities.
Computational Linguistics, 21(2).H.
Zhang, L. Huang, D. Gildea, K. Knight.
2006.
Syn-chronous binarization for machine translation.
InProceedings of the 2006 Human Language Technol-ogy Conference of the North American Chapter ofthe Association for Computational Linguistics, 256?263.H.
Zhang, C. Quirk, R. C. Moore, D. Gildea.
2008.Bayesian learning of non-compositional phraseswith synchronous parsing.
In Proceedings of ACL-08: HLT, 97?105, Columbus, Ohio.A.
Zollmann, A. Venugopal.
2006.
Syntax augmentedmachine translation via chart parsing.
In Proceed-ings of the 2006 Human Language Technology Con-ference of the North American Chapter of the As-sociation for Computational Linguistics, 138?141,New York City, NY.361
