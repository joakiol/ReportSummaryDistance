Proceedings of the 2010 Workshop on Applications of Tree Automata in Natural Language Processing, ACL 2010, pages 37?45,Uppsala, Sweden, 16 July 2010. c?2010 Association for Computational LinguisticsTransforming Lexica as TreesMark-Jan NederhofUniversity of St AndrewsNorth Haugh, St AndrewsKY16 9SXScotlandAbstractWe investigate the problem of structurallychanging lexica, while preserving the in-formation.
We present a type of lexicontransformation that is complete on an in-teresting class of lexica.
Our work is mo-tivated by the problem of merging one ormore lexica into one lexicon.
Lexica, lexi-con schemas, and lexicon transformationsare all seen as particular kinds of trees.1 IntroductionA standard for lexical resources, called LexicalMarkup Framework (LMF), has been developedunder the auspices of ISO (Francopoulo et al,2006).
At its core is the understanding that mostinformation represented in a lexicon is hierarchi-cal in nature, so that it can be represented as atree.
Although LMF also includes relations be-tween nodes orthogonal to the tree structure, wewill in this paper simplify the presentation bytreating only purely tree-shaped lexica.There is a high demand for tools supporting themerger of a number of lexica.
A few examplesof papers that express this demand are Chan Ka-Leung and Wu (1999), Jing et al (2000), Mona-chini et al (2004) and Ruimy (2006).
A typicalscenario is the following.
The ultimate goal ofa project is the creation of a single lexicon for agiven language.
In order to obtain the necessarydata, several field linguists independently gatherlexical resources.
Despite efforts to come to agree-ments before the start of the field work, there willgenerally be overlap in the scope of the respec-tive resources and there are frequently inconsis-tencies both in the lexical information itself andin the form in which information is represented.In the latter case, the information needs to be re-structured as part of the process of creating a sin-gle lexicon.We have developed a model of the merging pro-cess, and experiments with an implementation areunderway.
The actions performed by the tool areguided by a linguist, but portions of the work mayalso be done purely mechanically, if this is sospecified by the user.
The purpose of the presentpaper is to study one aspect of the adequacy ofthe model, namely the restructuring of informa-tion, with one input lexicon and one output lexi-con.
This corresponds to a special use of our tool,which may in general produce one output lexiconout of any number of input lexica.As our lexica are trees, the use of well-established techniques such as term unification(Lloyd, 1984) and tree transduction (Fu?lo?p andVogler, 1998) seem obvious candidates for so-lutions to our problem.
Also technologies suchas XSL (Harold and Means, 2004) and XQuery(Walmsley, 2007) spring to mind.
We have chosena different approach however, which, as we willshow, has favourable theoretical properties.The structure of this paper is as follows.
Thetype of lexicon that we consider is formalized inSection 2, and lexicon transformations are dis-cussed in Section 3.
Section 4 shows that the pro-posed type of lexicon transformation suffices tomap all ?reasonable?
lexica to one another, as longas they contain the same information.
Conditionsunder which transformations preserve informationare discussed in Section 5.
A brief overview of animplementation is given in Section 6.2 Lexica and their structuresIn this section, we formalize the notions of lexica,lexicon structures, and their meanings, abstracting37away from details that are irrelevant to the discus-sion that follows.A lexicon schema S is a tuple (A,C, T ), whereA is a finite set of attributes, C is a finite set ofcomponents (A ?
C = ?
), and T is a labelled,unordered tree such that:?
each leaf node is labelled by an element fromA,?
each non-leaf node is labelled by an elementfrom C , and?
each element from A?C occurs exactly once.A lexicon L is a tuple (A,V,C, t), where A isas above, V is a set of values, C is as above, and tis a labelled, unordered tree such that:?
each leaf node is labelled by an element fromA?
V ,?
each non-leaf node is labelled by an elementfrom C ,?
if a leaf node with a label of the form (a, v1)has a parent labelled c, then each leaf nodewith a label of the form (a, v2) has a parentlabelled c, and?
if a non-leaf node labelled c1 has a parent la-belled c2, then each non-leaf node labelled c1has a parent labelled c2.Due to the last two constraints, we may comparelexica and lexicon schemata.
In order to simplifythis comparison, we will assume that in a lexicon,A and C only contain elements that occur in t.This is without loss of generality, as unused ele-ments of A and C can be omitted.
We will alsoassume that t contains at least two nodes, so thatthe root is not a leaf.We say a lexicon L = (AL, V, CL, t) is an in-stance of lexicon schema S = (AS , CS , T ) ifAL ?
AS , CL ?
CS , and furthermore:?
the label of the root of t equals the label ofthe root of T ,?
if a leaf node of t with a label of the form(a, v1) has a parent labelled c, then the leafnode of T labelled a has a parent labelled c,and?
if a non-leaf node of t labelled c1 has a par-ent labelled c2, then the non-leaf node of Tlabelled c1 has a parent labelled c2.Lexiconlang EntryKeylemma posMeaninggloss exampleFigure 1: A lexicon schema S.Examples of a lexicon schema and a lexicon aregiven in Figures 1 and 2.
For the sake of succinct-ness, an attribute-value pair such as (example, ?Erist mit dem Zug gefahren?)
is commonly separatedby =, and where it is required for graphical rea-sons, the value may be drawn beneath the attribute,stretched out vertically.On a number of occasions in the constructionsand proofs that follow, it is convenient to assumethat the root node of a lexicon schema has exactlyone child.
If this does not hold, as in the run-ning example, we may introduce an artificial rootnode labelled by an artificial component, denotedby ?$?, which has the conceptual root node as onlychild.
We will refer to the lexicon schema thatresults as an extended lexicon schema.
(Cf.
thetheory of context-free grammars, which are oftenextended with a new start symbol.)
As a conse-quence, a lexicon that is an instance of an extendedlexicon schema may, in pathological cases, haveseveral nodes that are labelled by the conceptualroot component of the schema.The components in lexicon schemata and lexicaprovide a means of structuring sets of attributes, orsets of attribute-value pairs respectively, into tree-shaped forms.
The discussion that follows willtreat components and structure as secondary, andwill take attributes and attribute-value pairs as theprimary carriers of information.A lexicon base B is a tuple (A,V, I), where Aand V are as above, and I is a finite non-empty setof items, each of which is a partial function fromA to V , defined on at least one attribute.
Suchpartial functions will also be represented as non-empty sets of attribute-value pairs, in which eachattribute occurs at most once.38Lexiconlang=German EntryKeylemma=fahrenpos=VMeaninggloss=driveexample=EinFahrradfahrenMeaninggloss=goexample=EristmitdemZuggefahrenEntryKeylemma=Fahrradpos=NMeaninggloss=bicycleexample=EinFahrradfahrenexample=MeinFahrradhateinenPlattenFigure 2: A lexicon L that is an instance of S from Figure 1.Let L = (A,V,C, t) be a lexicon, where r is theroot of t. Its base, denoted by B(L), is (A,V, I)with I = I(r), where the function I on nodes n ofthe lexicon is defined as follows.?
For a leaf node n labelled by the attribute-value pair (a, v), I(n) = {{(a, v)}}.
Inwords, the set I(n) contains only one item,which is a partial function mapping attributea to value v.?
For a non-leaf node n, assume that m differ-ent components or attributes d1, .
.
.
, dm oc-cur among the children.
(Each element d iseither a component or an attribute.)
Let Nj(1 ?
j ?
m) be the set of children of nlabelled by dj if dj is a component or by(dj , v), some value v, if dj is an attribute.Then:I(n) ={?1 ?
?
?
?
?
?m | n1 ?
N1, .
.
.
, nm ?
Nm,?1 ?
I(n1), .
.
.
, ?m ?
I(nm)}.Note that by the definition of lexica and of N1, .
.
.
,Nm, no attribute may occur both in ?i and in ?j ifi 6= j.
This means that ?1 ?
?
?
?
?
?m is a partialfunction as required.For the lexicon of the running example, the baseis:{ {lang=German, lemma=fahren, pos=V,gloss=drive,example=Ein Fahrrad fahren},{lang=German, lemma=fahren, pos=V,gloss=go,example=Er ist mit dem Zug gefahren},{lang=German, lemma=Fahrrad, pos=N,gloss=bicycle,example=Ein Fahrrad fahren},{lang=German, lemma=Fahrrad, pos=N,gloss=bicycle,example=Mein Fahrrad hat einen Platten} }.There are many different lexica however that sharethe same base.
This is illustrated by Figure 3.
Wesee that the information is presented in an entirelydifferent fashion, with a focus on the examples.In a lexicon such as that in Figure 2, there maybe nodes labelled ?Meaning?
without any childrencorresponding to attribute ?example?.
This meansthat there would be items ?
in B(L) such that?
(example) is undefined.
For some of the con-structions and proofs below, it is convenient to cir-cumvent this complication, by assuming special?null?
values for absent leaf nodes for attributes.As a result, we may treat an item as a completefunction rather than as a partial function on the do-main A.There is a certain resemblance between the baseof a lexicon and the disjunctive normal form of alogical expression, the attribute-value pairs takingthe place of propositional variables, and the items39Phrasebooklang=German Phraseexample=EinFahrradfahrenWordlemma=fahrenpos=Vgloss=driveWordlemma=Fahrradpos=Ngloss=bicyclePhraseexample=EristmitdemZuggefahrenWordlemma=fahrenpos=Vgloss=goPhraseexample=MeinFahrradhateinenPlattenWordlemma=Fahrradpos=Ngloss=bicycleFigure 3: A lexicon L?
with the same base as the one in Figure 2.taking the place of conjunctions.
Thus our seman-tic interpretation of lexica is such that two siblingsin the tree are regarded as alternatives (disjunc-tion) if their labels contain the same attribute orcomponent, and they are regarded as joint infor-mation (conjunction) if their labels contain distinctattributes or components.Theorem 1 For each lexicon base B =(AB , V, I) and for each lexicon schema S =(AS , C, T ) with AB ?
AS , there is a lexicon Lthat is an instance of S and whose base is B.Proof Assume the root r of T has only one childr?.
(Otherwise, make S extended first.)
Let T ?
bethe subtree of T at r?.
For each item ?
?
I , createa copy of T ?, denoted by t?.
At each leaf node oft?, supplement the label a with the correspondingvalue from ?
if any; if a does not occur in ?, thenremove the leaf node from t?.
(If the parent of aremoved leaf node has no other children, then alsoremove the parent, etc.)
Create a root node, withthe same label as r, the children of which are theroots of the respective t?.
Let the resulting tree becalled t. The requirements of the theorem are nowsatisfied by L = (AB , V, C, t).3 Lexicon transformationsAs we have seen, the information contained in onelexicon base may be rendered in different struc-tural forms, in terms of lexica.
The structure of alexicon is isolated from its content by means of alexicon schema.
In this section we will address thequestion how we may formalize transformationsfrom one lexicon schema S1 to lexicon schema S2,or more precisely, from one class of lexica that areinstances of S1 to another class of lexica that areinstances of S2.
In fact, for the sake of the defini-tions below, we assume that the input to a transfor-mation is not a lexicon but its base, which containsall the necessary information.
(That the actual im-plementation mentioned in Section 1 may oftenavoid expansion to the base need not concern ushere.
)A lexicon transformation R is a tuple (A,C, ?
),where A is a finite set of attributes as before, Cis a finite set of components as before, and ?
is alabelled, unordered tree such that:?
each leaf node is labelled by an element fromA,?
the root node is labelled by an element fromC ,?
each internal node is either labelled by an el-ement from C , or by a subset of A,?
each element from A?C occurs exactly onceas a label by itself,?
each element from A occurs exactly once ina label that is a subset of A, and?
each node ?
labelled by a set {a1, .
.
.
, ak}?
A has exactly one child, which is labelled40by an element from A ?
C , and the leaveslabelled a1, .
.
.
, ak are each descendants of?.A lexicon transformation is very similar to a lex-icon schema, except for the extra nodes labelledby sets A?
?
A of attributes, which we refer toas restrictors.
Such a node indicates that for thepurpose of the subtree, one should commit to par-ticular subsets of the input lexicon base.
Each suchsubset is determined by a choice of a fixed valuefor each attribute in A?.As an example, consider the lexicon transfor-mations in Figure 4(a) and (b).
If we omit thenodes labelled by restrictors, then we obtain a lex-icon schema.
In the case of (b), this is the lexi-con schema in Figure 1.
In Figure 4(a), the nodelabelled {example} means that the transforma-tion takes one non-empty subset of the base foreach possible value of attribute ?example?.
Foreach subset, one node labelled ?Phrase?
is gener-ated in the target lexicon.
At the node labelled{lemma,pos}, the subset of the base is further re-stricted, and for each combination of a value of?lemma?
and a value of ?pos?
in the current sub-set of items, a node labelled ?Word?
is generated.If the base contains several glosses for one choiceof ?example?, ?lemma?
and ?pos?, each such glossleads to a separate leaf node.The meaning of a lexicon transformation is for-mally expressed in Figure 5.
A call lexicon(?, I ?
),where ?
is a node of ?
and I ?
is a subset of I fromthe input lexicon base B = (A,V, I), returns a setof nodes.
The function is recursive, in that thevalue of lexicon(?, I ?)
is expressed in terms of val-ues of lexicon(?
?, I ??)
for child nodes ?
?
of ?
andsubsets I ??
of I ?.
The main purpose is the computa-tion of lexicon(?, I), where ?
is the root of ?
.
As ?is labelled by an element from C , lexicon(?, I) isby definition a singleton set {r}, with r becomingthe root of the resulting lexicon.Note that the placement of restrictors is criti-cal.
For example, if we were to move up the re-strictor {gloss} in Figure 4(b) to merge with therestrictor {lemma,pos}, this would result in oneentry for each combination of ?lemma?, ?pos?
and?gloss?, and in each entry there would be at mostone meaning.
It is not apparent that such a choicewould be less appropriate than the choice we madein Figures 2 and 4(b).
However, if we were tomove down the node labelled {gloss} to become achild of the node labelled ?Meaning?
and a parentPhrasebook{lang}lang{example}Phraseexample {lemma, pos}Wordlemma pos {gloss}gloss(a)Lexicon{lang}lang{lemma, pos}EntryKeylemma pos{gloss}Meaninggloss {example}example(b)Figure 4: Two lexicon transformations: (a) is ca-pable of mapping the base of lexicon L (Figure 2)to lexicon L?
(Figure 3), and (b) is capable of thereverse mapping.of the leaf node labelled ?gloss?, then we wouldlose the coupling between glosses and examples,which seems undesirable.
This observation under-lies much of the development in Section 5.4 CompletenessNext, we investigate whether the lexicon transfor-mations as we defined them are powerful enoughto produce ?reasonable?
lexica starting from a lex-icon base.
As unreasonable, we reject those lexicathat contain information that cannot be expressedin terms of a base.
This concerns siblings in thetree with the same component label.
How manysiblings with the same component should be gen-erated can be deduced from the base, provided wemay assume that there is a combination of attributevalues that distinguishes one sibling from another.41lexicon(?, I ?)
:if the label of ?
is a ?
Alet v be the (only) value such that ??
?
I ?[?
(a) = v]create a new node n with label (a, v)return {n}else if the label of ?
is c ?
Clet the children of ?
be ?1, .
.
.
, ?mcreate a new node n with label c and children?1?i?mlexicon(?i, I ?
)return {n}else if the label of ?
is A?
= {a1, .
.
.
, ak} ?
Alet the only child of ?
be ?
?let I be the set of all I ??
such that there is a combination ofv1, .
.
.
, vk ?
V with I ??
= {?
?
I ?
| ?
(a1) = v1, .
.
.
, ?
(ak) = vk} 6= ?return?I??
?I lexicon(?
?, I ??
)Figure 5: The meaning of a lexicon transformation, as a recursive function.
The return value is a set ofnodes that are created.
The main application is lexicon(?, I), where ?
is the root of ?
and I is taken fromthe input lexicon base.We call such a combination of attributes a key.Formally, a key mapping for a lexicon schema(A,C, T ) is a function f that maps each compo-nent from C to a subset of A, subject to the fol-lowing restrictions.
Let c be a component and letn be the node of T that is labelled by c. Then foreach attribute a in key f(c), the leaf node of T thatis labelled by a should be a descendant of n. Thecomponent that occurs as label of the root of T isalways mapped to the empty set of attributes, andmay be ignored in the following discussion.Let lexicon L = (AL, V, CL, t) be an instance ofschema S = (AS , CS , T ).
We say that L satisfiesthe key mapping f for S if:1. among the leaves, there is no pair of distinctsiblings in t with identical labels, and2.
for each maximal set {n1, .
.
.
, nm} of sib-lings in t labelled by the same component c,with f(c) = {a1, .
.
.
, ak}, we have that foreach i (1 ?
i ?
m), there is a distinct combi-nation of values v1, .
.
.
, vk ?
V such that:I(ni) = {?
?
?1?j?mI(nj) | ?
(a1) = v1, .
.
.
,?
(ak) = vk}.The second condition states that the total set ofitems coming from all siblings with the same labelc is partitioned on the basis of distinct combina-tions of values for attributes from the key, and thesubsets of the partition come from the respectivesiblings.Returning to the running example, the lexicon Lin Figure 2 satisfies the key mapping f given by:f(Lexicon) = ?f(Entry) = {lemma,pos}f(Key) = ?f(Meaning) = {gloss}A different key mapping exists for the lexicon L?in Figure 3.If n1 and n2 are two distinct nodes in the treeT of schema S, with labels c1 and c2, respec-tively, then we may assume that f(c1) and f(c2)are disjoint, for the following reason.
Suppose thatthe intersection of f(c1) and f(c2) includes an at-tribute a, then n1 must be a descendant of n2 orvice versa, because the leaf labelled a must be adescendant of both n1 and n2.
Assume that n1 is adescendant of n2.
As the base is already restrictedat n1 to items ?
with ?
(a) = v, for certain v, amay be omitted from f(c2) without changing thesemantics of the key mapping.
This observation isused in the construction in the proof of the follow-ing.Theorem 2 Let lexicon L = (AL, V, CL, t) be aninstance of schema S = (AS , CS , T ), satisfyingkey mapping f .
Then there is a lexicon transfor-mation that maps B(L) to L.Proof The required lexicon transformation isconstructed out of T and f .
We insert an ad-ditional restrictor node just above each non-leafnode labelled c, and as the restrictor we take f(c).42(If f(c) = ?, we may abstain from adding a restric-tor node.)
If an attribute a does not occur in f(c),for any c ?
CS , then we add a restrictor node withset {a} just above the leaf node labelled a. Theresult is the tree ?
of a lexicon transformation R =(AS , CS , ?
).It is now straightforward to prove that R mapsB(L) to L, by induction on the height of T , onthe basis of the close similarity between the struc-ture of T and the structure of ?
, and the close linkbetween the chosen restrictors and the keys fromwhich they were constructed.For the running example, the construction in theproof above leads to the transformation in Fig-ure 4(b).Theorem 2 reveals the conditions under whichthe structure of a lexicon can be retrieved fromits base, by means of a transformation.
Simulta-neously, it shows the completeness of the type oflexicon transformation that we proposed.
If a lexi-con L is given, and if an alternative lexicon L?
withB(L?)
= B(L) exists that is an instance of someschema S and that is ?reasonable?
in the sense thatit satisfies a key mapping for S, then L?
can be ef-fectively constructed from L by the derived trans-formation.5 ConsistencyWe now investigate the conditions under whicha lexicon transformation preserves the base.
Thestarting point is the observation at the end of Sec-tion 3, where we argued that if a restrictor is cho-sen too low in the tree ?
relative to other restric-tors, then some necessary dependence between at-tribute values is lost.
Note that the proof of Theo-rem 1 suggests that having only one restrictor withall attributes at the root of the tree always pre-serves the base, but the result would be unsatis-factory in practice.For a set A of attributes, we define an indepen-dence system D as a set of triples (A1, A2, A3)where A1, A2, A3 ?
A and A1 ?
A2 = ?.
Wepronounce (A1, A2, A3) ?
D as ?A1 and A2 areindependent under A3?.
It should be noted that A3may overlap with A1 and with A2.We say a lexicon base (A,V, I) satisfies D iffor each (A1, A2, A3) ?
D with A1 = {a1,1,.
.
.
a1,k1}, A2 = {a2,1, .
.
.
a2,k2}, A3 = {a3,1,.
.
.
a3,k3}, and for each combination of values v1,1,.
.
.
, v1,k1 , v2,1, .
.
.
, v2,k2 , v3,1, .
.
.
, v3,k3 , we have:??
?
I[?
(a1,1) = v1,1 ?
.
.
.
?
?
(a1,k1) = v1,k1 ??
(a3,1) = v3,1 ?
.
.
.
?
?
(a3,k3) = v3,k3] ???
?
I[?
(a2,1) = v2,1 ?
.
.
.
?
?
(a2,k2) = v2,k2 ??
(a3,1) = v3,1 ?
.
.
.
?
?
(a3,k3) = v3,k3]=???
?
I[?
(a1,1) = v1,1 ?
.
.
.
?
?
(a1,k1) = v1,k1 ??
(a2,1) = v2,1 ?
.
.
.
?
?
(a2,k2) = v2,k2 ??
(a3,1) = v3,1 ?
.
.
.
?
?
(a3,k3) = v3,k3].The intuition is that as long as the values for A3 arefixed, allowable combinations of values for A1 ?A2 in I can be found by looking at A1 and A2individually.We say that a lexicon transformation R =(A,C, ?)
is allowed by an independence systemD if the following condition is satisfied for eachnode ?
in ?
that is labelled by a component c anda node ?
?
that is its child: Let A1 be the set of at-tributes at leaves that are descendants of ?
?, andlet A2 be the set of attributes at leaves that are de-scendants of the other children of ?.
Let A3 bethe union of the restrictors at ancestors of ?.
Now(A1, A2, A3) should be in D.Theorem 3 If a lexicon base B = (A,V, I) satis-fies an independence system D, if a lexicon trans-formation R is allowed by D, and if R maps B tolexicon L, then B(L) = B.The proof by induction on the height of ?
isfairly straightforward but tedious.In the running example, there are a num-ber of triples in D but most are trivial, suchas (?, {gloss, example}, {lemma,pos}).Another triple in D is ({lang},{lemma,pos, gloss, example}, ?
), but onlybecause we assume in this example that onelexicon is designed for one language only.
Ingeneral, there will be more interesting indepen-dency, typically if a lexical entry consists of anumber of unconnected units, for example oneexplaining syntactic usage of a word, anotherexplaining semantic usage, and another presentinginformation on etymology.The implication of Theorem 3 is that transfor-mations between lexica preserve the informationthat they represent, as long as the transforma-tions respect the dependencies between sets of at-tributes.
Within these bounds, an attribute a maybe located in a restrictor in ?
anywhere betweenthe root node and the leaf node labelled a.436 ImplementationThe mathematical framework in this paper mod-els a restricted case of merging and restructuringa number of input lexica.
An implementation wasdeveloped as a potential new module of LEXUS,which is a web-based tool for manipulating lexi-cal resources, as described by Kemps-Snijders etal.
(2006).The restriction considered here involves onlyone input lexicon, and we have abstracted awayfrom a large number of features present in the ac-tual implementation, among which are provisionsto interact with the user, to access external linguis-tic functions (e.g.
morphological operations), andto rename attributes.
These simplifications haveallowed us to isolate one essential and difficultproblem of lexicon merging, namely how to carryover the underlying information from one lexiconto another, in spite of possible significant differ-ences in structure.The framework considered here assumes thatduring construction of the target lexicon, the infor-mation present in the source lexicon is repeatedlynarrowed down by restrictors, as explained in Sec-tion 3.
Each restrictor amounts to a loop over allcombinations of the relevant attribute values fromthe currently considered part of the source lexicon.Let us consider a path from the root of the lexi-con transformation to a leaf, which may compriseseveral restrictors.
The number of combinations ofattribute values considered is bounded by an expo-nential function on the total number of attributescontained in those restrictors.
Motivated by thisconsideration, we have chosen to regard a lexicontransformation as if its input were an expandedform of the source lexicon, or in other words, alexicon base.However, in terms of the actual implementation,the discussed form of restrictors must be seen as aworst case, which is able to realize some of themost invasive types of restructuring.
Next to re-strictors that select combinations of attribute val-ues, our lexicon transformations also allow prim-itives that each represent a loop over all nodes ofthe presently considered part of the source lexi-con that are labelled by a chosen component orattribute.
By using only such primitives, the timecomplexity remains polynomial in the size of theinput lexicon and the size of the input lexicontransformation.
This requires an implementationthat does not expand the information contained ina source lexicon in terms of a lexicon base.
Afull description of the implementation would gobeyond the context of this paper.7 ConclusionsWe have introduced a class of lexicon transfor-mations, and have shown interesting completenessand consistency properties.The restrictors in our lexicon transformationsare able to repeatedly narrow down the informa-tion contained in the source lexicon based on at-tribute values, while constructing the target lexi-con from the top down.
Existing types of tree ma-nipulations, such as tree transducers, do not pos-sess the ability to repeatedly narrow down a setof considered nodes scattered throughout a sourcestructure, and therefore seem to be incapable ofexpressing types of lexicon transformations allow-ing the completeness results we have seen in thispaper.One could in principle implement our lexicontransformations in terms of technologies such asXQuery and XSLT, but only in the sense thatthese formalisms are Turing complete.
Our restric-tors do not have a direct equivalent in these for-malisms, which would make our type of lexicontransformation cumbersome to express in XQueryor XSLT.
At the same time, their Turing complete-ness makes XQuery and XSLT too powerful tobe of practical use for the specification of lexicontransformations.A tentative conclusion seems to be that our classof lexicon transformations has useful propertiesnot shared by a number of existing theories involv-ing tree manipulations.
This justifies further study.AcknowledgementsThis work was done while the author was em-ployed at the Max Planck Institute for Psycholin-guistics.
The work was motivated by suggestionsfrom Peter Wittenburg and Marc Kemps-Snijders,whose input is gratefully acknowledged.ReferencesD.
Chan Ka-Leung and D. Wu.
1999.
Automati-cally merging lexicons that have incompatible part-of-speech categories.
In Joint SIGDAT Conferenceon Empirical Methods in Natural Language Pro-cessing and Very Large Corpora, pages 247?257,University of Maryland, USA, June.44G.
Francopoulo, N. Bel, M. George, N. Calzolari,M.
Monachini, M. Pet, and C. Soria.
2006.
Lexi-cal markup framework (LMF) for NLP multilingualresources.
In Proceedings of the Workshop on Mul-tilingual Language Resources and Interoperability,pages 1?8, Sydney, Australia, July.Z.
Fu?lo?p and H. Vogler.
1998.
Syntax-Directed Se-mantics: Formal Models Based on Tree Transduc-ers.
Springer, Berlin.E.R.
Harold and W.S.
Means.
2004.
XML in a Nut-shell.
O?Reilly.H.
Jing, Y. Dahan Netzer, M. Elhadad, and K.R.
McK-eown.
2000.
Integrating a large-scale, reusable lex-icon with a natural language generator.
In Proceed-ings of the First International Conference on Nat-ural Language Generation, pages 209?216, MitzpeRamon, Israel, June.M.
Kemps-Snijders, M.-J.
Nederhof, and P. Witten-burg.
2006.
LEXUS, a web-based tool for manip-ulating lexical resources.
In LREC 2006: Fifth In-ternational Conference on Language Resources andEvaluation, Proceedings, pages 1862?1865.J.W.
Lloyd.
1984.
Foundations of Logic Programming.Springer-Verlag.M.
Monachini, F. Calzolari, M. Mammini, S. Rossi,and M. Ulivieri.
2004.
Unifying lexicons in viewof a phonological and morphological lexical DB.
InLREC 2004: Fourth International Conference onLanguage Resources and Evaluation, pages 1107?1110, Lisbon, Portugal, May.N.
Ruimy.
2006.
Merging two ontology-based lexi-cal resources.
In LREC 2006: Fifth InternationalConference on Language Resources and Evaluation,Proceedings, pages 1716?1721.P.
Walmsley.
2007.
XQuery.
O?Reilly.45
