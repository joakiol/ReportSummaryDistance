Capturing CFLs with Tree AdjoiningJames Rogers*Dept .
of  Computer  and  In fo rmat ion  Sc iencesUn ivers i ty  of De lawareNewark ,  DE  19716, USAj rogers?c is ,  ude l .
eduGrammarsAbst rac tWe define a decidable class of TAGs that is stronglyequivalent o CFGs and is cubic-time parsable.
Thisclass serves to lexicalize CFGs in the same manner asthe LC, FGs of Schabes and Waters but with consider-ably less restriction on the form of the grammars.
Theclass provides a nornlal form for TAGs that generatelocal sets m rnuch the same way that regular grammarsprovide a normal form for CFGs that generate regularsets.In t roduct ionWe introduce the notion of Regular Form for Tree Ad-joining ( ; rammars (TA(;s).
The class of TAGs thatare in regular from is equivalent in strong generativecapacity 1 to the Context-Free Grammars,  that is, thesets of trees generated by TAGs in this class are the localsets--the sets of derivation trees generated by CFGs.
2Our investigations were initially motivated by the workof Schabes, Joshi, and Waters in lexicalization of CFGsvia TAGs (Schabes and Joshi, 1991; Joshi and Schabes,1992; Schabes and Waters, 1993a; Schabes and Waters,1993b; Schabes, 1990).
The class we describe not onlyserves to lexicalize CFGs in a way that is more faith-tiff and more flexible in its encoding than earlier work,but provides a basis for using the more expressive TAGformalism to define Context-Free Languages (CFLs.
)In Schabes et al (1988) and Schabes (1990) a gen-eral notion of lexicalized grammars is introduced.
Agrammar is lexicalized in this sense if each of the ba-sic structures it manipulates i associated with a lexicalitem, its anchor.
The set of structures relevant to aparticular input string, then, is selected by the lexical*The work reported here owes a great deal to extensivediscussions with K. Vijay-Shanker.1 We will refer to equivalence of the sets of trees generatedby two grammars or classes of grammars as strong equiva-lence.
Equivalence of their string languages will be referredto as weak equivalence.2Technically, the sets of trees generated by TAGs in theclass are recognizable sets.
The local and recognizable setsare equivalent modulo projection.
We discuss the distinctionin the next section.items that occur in that string.
There are a numberof reasons for exploring lexicalized grammars.
Chiefamong these are linguistic considerations--lexicalizedgrammars reflect the tendency in many current syntac-tic theories to have the details of the syntactic structurebe projected from the lexicon.
There are also practicaladvantages.
All lexicalized grammars are finitely am-biguous and, consequently, recognition for them is de-cidable.
Further, lexicalization supports trategies thatcan, in practice, improve the speed of recognition algo-rithms (Schabes et M., 1988).One grammar formalism is said to lezicalize an-other (Joshi and Schabes, 1992) if for every grammarin the second formalism there is a lexicalized grammarin the first that generates exactly the same set of struc-tures.
While CFGs are attractive for efficiency of recog-nition, Joshi and Schabes (1992) have shown that anarbitrary CFG cannot, in general, be converted into astrongly equivalent lexiealized CFG.
Instead, they showhow CFGs can be lexicalized by LTAGS (LexicalizedTAGs).
While the LTAG that lexicalizes a given CFGmust be strongly equivalent to that CFG, both the lan-guages and sets of trees generated by LTAGs as a classare strict supersets of the CFLs and local sets.
Thus,while this gives a means of constructing a lexicalizedgrammar from an existing CFG, it does not providea direct method for constructing lexicalized grammarsthat are known to be equivalent to (unspecified) CFGs.Furthermore, the best known recognition algorithm forLTAGs runs in O(n 6) time.Schabes and Waters (1993a; 1993b) define Lexical-ized Context-Free Grammars (LCFGs), a class of lex-icalized TAGs (with restricted adjunction) that notonly lexicalizes CFGs, but is cubic-time parsable and isweakly equivalent to CFGs.
These LCFGs have a cou-ple of shortcomings.
First, they are not strongly equiv-alent to CFGs.
Since they are cubic-time parsable thisis primarily a theoretical rather than practical concern.More importantly, they employ structures of a highlyrestricted form.
Thus the restrictions of the formalism,in some cases, may override linguistic considerations inconstructing the grammar.
Clearly any class of TAGsthat are cubic-time parsable, or that are equivalent in155any sense to CFGs, must be restricted in some way.The question is what restrictions are necessary.In this paper we directly address the issue of iden-tifying a class of TAGs that are strongly equivalent toCFGs.
In doing so we define such a class--TAGs inregular form--that is decidable, cubic-time parsable,and lexicalizes CFGs.
Further, regular form is essen-tially a closure condition on the elementary trees of theTAG.
Rather than restricting the form of the trees thatcan be employed, or the mechanisms by which they arecombined, it requires that whenever a tree with a par-ticular form can be derived then certain other relatedtrees must be derivable as well.
The algorithm for de-ciding whether a given grammar is in regular form canproduce a set of elementary trees that will extend agrammar that does not meet the condition to one thatdoes.
3 Thus the grammar can be written largely on thebasis of the linguistic structures that it is intended tocapture.
We show that, while the LCFGs that are builtby Schabes and Waters's algorithm for lexicalization ofCFGs are in regular form, the restrictions they employare unnecessarily strong.Regular form provides a partial answer to the moregeneral issue of characterizing the TAGs that generatelocal sets.
It serves as a normal form for these TAGs inthe same way that regular grammars serve as a normalform for CFGs that generate regular languages.
Whilefor every TAG that generates a local set there is a TAGin regular form that generates the same set, and everyTAG in regular form generates a local set (modulo pro-jection), there are TAGs that are not in regular formthat generate local sets, just as there are CFGs thatgenerate regular languages that are not regular gram-mars.The next section of this paper briefly introduces no-tation for TAGs and the concept of recognizable sets.Our results on regular form are developed in the subse-quent section.
We first define a restricted use of the ad-junction operation--derivation by regular adjunction--which we show derives only recognizable sets.
We thendefine the class of TAGs in regular form and show thatthe set of trees derivable in a TAG of this form is deriv-able by regular adjunction in that TAG and is thereforerecognizable.
We next show that every local set can begenerated by a TAG in regular form and that Schabesand Waters's construction for LCFGs in fact producesTAGs in regular form.
Finally, we provide an algorithmfor deciding if a given TAG is in regular form.
We closewith a discussion of the implications of this work withrespect to the lexicalization of CFGs and the use ofTAGs to define languages that are strictly context-free,and raise the question of whether our results can bestrengthened for some classes of TAGs.3Although the result of this process is not, in general,equivalent o the original grammar.P re l iminar iesTree Adjo in ing  GrammarsFormally, a TAG is a five-tuple (E, NT, I, A, S / where:E is a finite set of terminal symbols,NT is a finite set of non-terminal symbols,I is a finite set of elementary initial trees,A is a finite set of elementary auxiliary trees,S is a distinguished non-terminal,the start symbol.Every non-frontier node of a tree in I t3 A is labeledwith a non-terminal.
Frontier nodes may be labeledwith either a terminal or a non-terminal.
Every treein A has exactly one frontier node that is designatedas its foot.
This must be labeled with the same non-terminal as the root.
The auxiliary and initial trees aredistinguished by the presence (or absence, respectively)of a foot node.
Every other frontier node that is la-beled with a non-terminal is considered to be markedfor substitution.
In a lexicalized TAG (LTAG) everytree in I tO A must have some frontier node designatedthe anchor, which must be labeled with a terminal.Unless otherwise stated, we include both elementaryand derived trees when referring to initial trees andauxiliary trees.
A TAG derives trees by a sequence ofsubstitutions and adjunctions in the elementary trees.In substitution an instance of an initial tree in which theroot is labeled X E NT is substituted for a frontier node(other than the foot) in an instance of either an initialor auxiliary tree that is also labeled X.
Both trees maybe either an elementary tree or a derived tree.In adjunction an instance of an auxiliary tree in whichthe root and foot are labeled X is inserted at a node,also labeled X, in an instance of either an initial orauxiliary tree as follows: the subtree at that node is ex-cised, the auxiliary tree is substituted at that node, andthe excised subtree is substituted at the foot of the aux-iliary tree.
Again, the trees may be either elementaryor derived.The set of objects ultimately derived by a TAG 6' isT(G), the set of completed initial trees derivable in (;.These are the initial trees derivable in G in which tileroot is labeled S and every frontier node is labeled witha terminal (thus no nodes are marked for substitution.
)We refer to the set of all trees, both initial and auxiliary,with or without nodes marked for substitution, that arederivable in G as TI(G).
The language derived by G isL(G) the set of strings in E* that are the yields of treesin T(G).In this paper, all TAGs are pure TAGs, i.e., withoutadjoining constraints.
Most of our results go throughfor TAGs with adjoining constraints as well, but thereis much more to say about these TAGs and the impli-cations of this work in distinguishing the pure TACsfrom TAGs in general.
This is a part of our ongoingresearch.The path between the root and foot (inclusive) of anauxiliary tree is referred to as its spine.
Auxiliary trees156in which no node on the spine other than the foot islabeled with the same non-terminal as the root we calla prvper auxiliary tree.Lemma 1 For any TAG G there is a TAG G' thatincludes no improper elementary trees ,such that T(G)is a projection ofT((7').Proof  (Sketch): The grammar G can be relabeled withsymbols in {(x,i} \[ x E E U NT, i E {0, 1}} to form G'.Every auxiliary tree is duplicated, with the root andfoot labeled (X,O) in one copy and (X, 1} in the other.Improper elementary auxiliary trees can be avoided byappropriate choice of labels along the spine.
\[\]The labels in the trees generated by G' are a refine-ment of the labels of the trees generated by G. Thus(7 partitions the categories assigned by G into sub-categories on the basis of (a fixed amount of) context.While the use here is technical rather than natural, theal)proach is familiar, as in the use of slashed categoriesto handle movement.Recognizable SetsThe local sets are formally very closely related tothe recognizable sets, which are somewhat more con-venient to work with.
These are sets of trees thatare accepted by finite-state tree automata (G~cseg andSteinby, 1984).
If E is a finite alphabet, a Z-valued treeis a finite, rooted, left-to-right ordered tree, the nodesof which are labeled with symbols in E. We will denotesuch a tree in which the root is labeled o" and in whichthe subtrees at the children of the root are t l , .
.
.
,  tn ascr(t l , .
.
.
, t , , ) .
The set of all E-valued trees is denotedA (non-deterministic) bottom-up finite state tree au-tomaton over E-valued trees is a tuple (E,Q, M, F)where:e is a finite alphabet,Q is a finite set of states,F is a subset of Q, the set of final states, andM is a partial flmction from I3 x Q* to p (Q)  (thepowerset of Q) with finite domain, the transi-tion function.The transition function M associates ets of stateswith alphabet symbols.
It induces a function that as-sociates ets of states with trees, M : T~ ~ P(Q),  suchthat:q e M(t )  4~t is a leaf labeled a and q E M(a, e), ort = a ( to , .
.
.
,  t,~) and there is a sequenceof states qo, ?
.
.
,  q, such that qi E M(t i) ,for 0 < i < n, and q E M(a, qo .
.
.
.
.
q,~).An automaton A = (E,Q, M, F} accepts a tree t ETE iff, by definition, FIq-'M(t) is not empty.
The set oftrees accepted by an automaton .,4 is denoted T(A).A set of trees is recognizable iff, by definition, it isT(A) for some automaton .A.Lemma 2 (Thatcher, 1967) Every local set is recog-nizable.
Every recognizable set is the projection of somelocal set.The projection is necessary because the automaton candistinguish between nodes labeled with the same sym-bol while the CFG cannot.
The set of trees (withbounded branching) in which exactly one node is la-beled A, for instance, is recognizable but not local.
Itis, however, the projection of a local set in which thelabels of the nodes that dominate the node labeled Aare distinguished from the labels of those that don't.As a corollary of this lemma, the path set of a recog-nizable (or local) set, i.e., the set of strings that labelpaths in the trees in that set, is regular.TAGs  in  Regu lar  FormRegu lar  AdjunctionThe fact that the path sets of recognizable sets must beregular provides our basic approach to defining a classof TAGs that generate only recognizable sets.
We startwith a restricted form of adjunction that can generateonly regular path sets and then look for a class of TAGsthat do not generate any trees that cannot be generatedwith this restricted form of adjunction.Def in i t ion  1 Regu lar  ad junct ion  is ordinary ad-junction restricted to the following cases:?
any auxiliary tree may be adjoined into any initialtree or at any node that is not on the spine of anauxiliary tree,?
any proper auxiliary tree may be adjoined into anyauxiliary tree at the root or fool of that tree,?
any auxiliary tree 7t may be adjoined at any nodealong the spine of any auxiliary tree 72 provided thatno instance of 3'2 can be adjoined at any node alongthe spine of 71.In figure 1, for example, this rules out adjunction of/31 into the spine of/33, or vice versa, either directly orindirectly (by adjunction of/33, say, into f12 and thenadjunction of the resulting auxiliary tree into fit-) Notethat, in the case of TAGs with no improper elementaryauxiliary trees, the requirement that only proper aux-iliary trees may be adjoined at the root or foot is notactually a restriction.
This is because the only way toderive an improper auxiliary tree in such a TAG with-out violating the other restrictions on regular adjunc-tion is by adjunction at the root or foot.
Any sequenceof such adjunctions can always be re-ordered in a waywhich meets the requirement.We denote the set.
of completed initial trees derivableby regular adjunetion in G as TR(G).
Similarly, wedenote the set of all trees that are derivable by regularadjunction in G as T~(G).
As intended, we can showthat TR(G) is always a recognizable set.
We are looking,then, for a class of TAGs for which T(G) = TR(G) forevery G in the class.
Clearly, this will be the case ifT'(G) = Th(a  ) for every such G.157t~l:SA BI Ia bXUX~__ x2AA B Ba A* b b\]32:Bb B*Figure 1: Regular Adjunction/ xFigure 2: Regular FormBb A \[--...B* a/ ?Propos i t ion  1 If G is a TAG and T'(G) = T'a(G ).Then T(G) is a recognizable set.Proof  (Sketch): This follows from the fact that in reg-ular adjunction, if one treats adjunction at the root orfoot as substitution, there is a fixed bound, dependentonly on G, on the depth to which auxiliary trees canbe nested.
Thus the nesting of the auxiliary trees canbe tracked by a fixed depth stack.
Such a stack can beencoded in a finite set of states.
It's reasonably easyto see, then, how G can be compiled into a bottom-upfinite state tree automaton, t3Since regular adjunction generates only recognizablesets, and thus (modulo projection) local sets, and sinceCFGs can be parsed in cubic time, one would hopethat TAGs that employ only regular adjunction can beparsed in cubic time as well.
In fact, such is the case.P ropos i t ion  2 I f  G is a TAG for which T(G) =TR(G) then there is a algorithm that recognizes tringsin L(G) in time proportional to the cube of the lengthof the string.
4Proof(Sketch):  This, again, follows from the factthat the depth of nesting of auxiliary trees isbounded in regular adjunction.
A CKY-stylestyle parsing algorithm for TAGs (the one givenin Vijay-Shanker and Weir (1993), for example) can bemodified to work with a two-dimensionM array, storingin each slot \[i, j\] a set of structures that encode a nodein an elementary tree that can occur at the root of asubtree spanning the input from position i through j insome tree derivable in G, along with a stack recordingthe nesting of elementary auxiliary trees around thatnode in the derivation of that tree.
Since the stacks4This result was suggested by K. Vijay-Shanker.are bounded the amount of data stored in each nodeis independent of the input length and the algorithmexecutes in time proportional to the cube of the lengthof the input, oRegu lar  FormWe are interested in classes of TAGs for which T'(G) =T~(G).
One such class is the TAGs in regular form.Def in i t ion  2 A TAG is in regu lar  fo rm if\[ whenevera completed auxiliary tree of the form 71 in Figure 2is derivable, where Xo ~?
xl ~ x2 and no node labeledX occurs properly between xo and xl, then trees of theform 72 and 73 are derivable as well.Effectively, this is a closure condition oll the elementarytrees of the grammar.
Note that it immediately impliesthat every improper elementary auxiliary tree in a reg-ular form TAG is redundant.
It is also easy to see, byinduction on the number of occurrences of X along thespine, that any auxiliary tree 7 for X that is derivablein G can be decomposed into the concatenation of asequence of proper auxiliary trees for X each of whichis derivable in G. We will refer to the proper auxiliarytrees in this sequence as the proper segments of 7.Lemina  3 Suppose G is a TAG in regular form.
ThenT'(G) = T?
(G)Proof :  Suppose 7 is any non-elementary auxiliary treederivable by unrestricted adjunction in G and that anysmaller tree derivable in (7, is derivable by regular ad-junction in G. I f ' / i s  proper, then it is clearly derivablefrom two strictly smaller trees by regular adjunction,each of which, by the induction hypothesis, is in T~(G).If 7 is improper, then it has the form of 71 in Figure 2and it is derivable by regular adjunction of 72 at theroot of'/3.
Since both of these are derivable and strictly158smaller than 7 they are in T~(G).
It follows that 7 isin T~(G') as well.
\[\]Lemma 4 Suppose (; is a TAG with no improper ele-mentary trees and T'(G) = T'R(G ).
Then G is in regu-lar form.Proof i  Suppose some 7 with the form of 7l in Fig-ure 2 is derivable in G and that for all trees 7' that aresmaller than 7 every proper segment of 7' is derivablein G'.
By assumption 7 is not elementary since it is im-proper.
Thus, by hypothesis, 7 is derivable by regularadjunction of some 7" into some 7' both of which arederivable in (/.Suppose 7" adjoins into the spine of 7' and that anode labeled X occurs along the spine of 7".
Then,by the definition of regular adjunction, 7" must be ad-joined at.
either tile root or foot of 7'.
Thus both 7'and 7" consist of sequences of consecutive proper seg-ments of 7 with 7" including t and the initial (possiblyempty) portion of u and 7' including the remainder ofu or vice versa.
In either case, by the induction hypoth-esis, every proper segment of both 7' and 7", and thusevery proper segment of 7 is derivable in G. Then treesof the forrn 72 and 73 are derivable from these propersegments.Suppose, on the other hand, that 7" does not adjoinalong the spine of 7 ~ or that no node labeled X occursalong tile spine of 7"- Note that 7" must occur entirelywithin a proper segment of 7.
Then 7' is a tree withthe form of 71 that is smaller than 7.
From the induc-tion hypothesis every proper segment of 7 ~ is derivablein (;.
It follows then that every proper segment of 7 isderivable in G, either because it is a proper segment of7' or because it is derivable by a?0unction of 7" into aproper segment of 7'- Again, trees of the form "r2 and7a are derivable from these 1)roper segments.
\[\]Regular Form and Local SetsThe class of TAGs in regular form is related to the lo-cal sets in much the same way that the class of regulargrammars is related to regular languages.
Every TAGin regular form generates a recognizable set.
This fol-lows from Lemma 3 and Proposition 1.
Thus, moduloprojection, every TAG in regular form generates a localset.
C, onversely, the next proposition establishes thatevery local set can be generated by a TAG in regu-lar form.
Thus regular form provides a normal formfor TAGs that generate local sets.
It is not the case,however, that all TAGs that generate local sets are inregular form.P ropos i t ion  3 For every CFG G there is a TAG G'in regular form such that the set of derivation trees forG is exactly T(G').Proof :  This is nearly immediate, since every CFG isequivalent o a Tree Substitution Grammar  (in whichall trees are of depth one) and every Tree SubstitutionGrammar is, in the definition we use here, a TAG withno elementary auxiliary trees.
It follows that this TAGcan derive no auxiliary trees at all, and is thus vacu-ously in regular form.
\[\]This proof is hardly satisfying, depending as it does onthe fact that TAGs, as we define them, can employ sub-stitution.
The next proposition yields, as a corollary,the more substantial result that every CFG is stronglyequivalent to a TAG in regular form in which substitu-tion plays no role.P ropos i t ion  4 The class of TAGs in regular form canlexicalize CFGs.Proof :  This follows directly from the equivalent lemmain Schabes and Waters (1993a).
The constructiongiven there builds a left-corner derivation graph (LCG).Vertices in this graph are the terminals and non-terminals of G. Edges correspond to the productionsof G in the following way: there is an edge from Xto Y labeled X ---* Ya  iff X ---* Ya  is a productionin G. Paths through this graph that end on a termi-nal characterize the left-corner derivations in G. Theconstruction proceeds by building a set of elementaryinitial trees corresponding to the simple (acyelic) pathsthrough the LCG that end on terminals.
These capturethe non-recursive l ft-corner derivations in G. The setof auxiliary trees is built in two steps.
First, an aux-iliary tree is constructed for every simple cycle in thegraph.
This gives a set of auxiliary trees that is suffi-cient, with the initial trees, to derive every tree gener-ated by the CFG.
This set of auxiliary trees, however,may include some which are not lexicalized, that is, inwhich every frontier node other than the foot is markedfor substitution.
These can be lexicalized by substitut-ing every corresponding elementary initial tree at oneof those frontier nodes.
Call the LCFG constructed forG by this method G'.
For our purposes, the importantpoint of the construction is that every simple cycle inthe LCG is represented by an elementary auxiliary tree.Since the spines of auxiliary trees derivable in G' cor-respond to cycles in the LCG, every proper segment ofan auxiliary tree derivable in G' is a simple cycle in theLCG.
Thus every such proper segment is derivable inG' and G' is in regular form.
\[\]The use of a graph which captures left-corner deriva-tions as the foundation of this construction guaranteesthat the auxiliary trees it builds will be left-recursive(will have the foot as the left-most leaf.)
It is a require-ment of LCFGs that all auxiliary trees be either left-or right-recursive.
Thus, while other derivation strate-gies may be employed in constructing the graph, thesemust always expand either the left- or right-most childat each step.
All that is required for the construction toproduce a TAG in regular form, though, is that everysimple cycle in the graph be realized in an elementarytree.
The resulting grammar will be in regular form no159matter what (complete) derivation strategy is capturedill the graph.
In particular, this admits the possibilityof generating an LTAG in which the anchor of each el-ementary tree is some linguistically motivated "head".Coro l la ry  1 For every CFG G there is a TAG G ~ inregular form in which no node is marked for substitu-tion, such that the set of derivation trees for G is exactlyT(G').This follows from the fact that the step used to lex-icalize the elementary auxiliary trees in Schabes andWaters's construction can be applied to every node (inboth initial and auxiliary trees) which is marked forsubstitution.
Paradoxically, to establish the corollaryit is not necessary for every elementary tree to be lex-icalized.
In Schabes and Waters's lemma G is requiredto be finitely ambiguous and to not generate the emptystring.
These restrictions are only necessary if G ~ is tobe lexicalized.
Here we can accept TAGs which includeelementary trees in which the only leaf is the foot nodeor which yield only the empty string.
Thus the corollaryapplies to all CFGs without restriction.Regu lar  Form i s  Dec idab leWe have established that regular form gives a class ofTAGs that is strongly equivalent to CFGs (modulo pro-jection), and that LTAGs in this class lexicalize CFGs.In this section we provide an effective procedure for de-ciding if a given TAG is in regular form.
The procedureis based on a graph that is not unlike the LCG of theconstruction of Schabes and Waters.If G is a TAG, the Spine Graph of G is a directedmulti-graph on a set of vertices, one for each non-terminal in G. If Hi is an elementary auxiliary treein G and the spine of fli is labeled with the sequence ofnon-terminals (Xo, X1, .
.
.
,  Xn) (where X0 = Xn andthe remaining Xj are not necessarily distinct), thenthere is an edge in the graph from each Xj to Xj+I la-beled (Hi, J, ti,j), where ti,j is that portion of Hi that isdominated by Xj but not properly dominated by Xj+I.There are no other edges in the graph except those cor-responding to the elementary auxiliary trees of G in thisway.The intent is for the spine graph of G to characterizethe set of auxiliary trees derivable in G by adjunctionalong the spine.
Clearly, any vertex that is labeled witha non-terminal for which there is no corresponding aux-iliary tree plays no active role in these derivations andcan be replaced, along with the pairs of edges incidenton it, by single edges.
Without loss of generality, then,we assume spine graphs of this reduced form.
Thus ev-ery vertex has at least one edge labeled with a 0 in itssecond component incident from it.A well-formed-cycle (wfc) in this graph is a (non-empty) path traced by the following non-deterministicautomaton:?
The automaton consists of a single push-down stack.Stack contents are labels of edges in the graph.?
The automaton starts on any vertex of the graph withan empty stack.?
At each step, the automaton can move as follows:- If there is an edge incident from the current vertexlabeled (ill, O, ti,o) the automaton can push thatlabel onto the stack and move to the vertex at thefar end of that edge.- If the top of stack contains (fli,j, tis) and there isan edge incident from the current vertex labeled(f l i , j+ 1,ti,j+l) the automaton may pop the topof stack, push (Hi,j-t-l,ti,j+l) and move to thevertex at the end of that edge.- If the top of stack contains (Hi,j, ti,j) but there isno edge incident from the current vertex labeled(Hi,J + 1,ti,j+l) then the automaton may pop thetop of stack and remain at the same vertex.?
The automaton may halt if its stack is empty.?
A path through the graph is traced by the automatonif it starts at the first vertex in the path and halts atthe last vertex in the path visiting each of the verticesin the path in order.Each wfc in a spine graph corresponds to the auxil-iary tree built by concatenating the third components ofthe labels on the edges in the cycle in order.
Then everywfc in the spine graph of G corresponds to an auxiliarytree that is derivable in G by adjunction along the spineonly.
Conversely, every such auxiliary tree correspondsto some wfc in the spine graph.A simple cycle in the spine graph, by definition, isany minimal cycle in the graph that ignores the labelsof the edges but not their direction.
Simple cycles cor-respond to auxiliary trees in the same way that wfcs do.Say that two cycles in the graph are equivalent iff theycorrespond to the same auxiliary tree.
The simple cy-cles in the spine graph for G correspond to the minimalset of elementary auxiliary trees in any presentation ofG that is closed under the regular form condition in tilefollowing way.Lemma 5 A TAG G is in regular form iff every simplecycle in its spine graph is equivalent o a wfc in thatgraph.Proof :(If every simple cycle is equivalent o a wfc then (; isin regular form.
)Suppose every simple cycle in the spine graph of (;is equivalent o a wfc and some tree of the form 71in Figure 2 is derivable in G. Wlog, assume the treeis derivable by adjunction along the spine only.
Thenthere is a wfc in the spine graph of G correspondingto that tree that is of the form (Xo , .
.
.
,Xk , .
.
.
,X , , )where X0 = Xk = Xn, 0 :~ k # n, and Xi # Xofor a l l0  < i < k. Thus (X0 .
.
.
.
,Xk) is as imple  cy-cle in the spine graph.
Further, (Xk .
.
.
.
.
Xn) is a se-quence of one or more such simple cycles.
It followsthat both (X0 , .
.
.
,Xk )  and (Xk , .
.
.
,Xn)  are wfc in tile160/3~1o - 1, so ~ /3o, to, to..... > XoSpine Graph/30, lo + 1 !~o~, ,  l~, t~ ...>X17o:tksoXoFigure 3: Regular Form is DecidableXspine graph and thus both 72 and 73 are derivable in(;.
(If (; is in regular form then every simple cycle corre-sponds to a wfc.
)Assume, wlog, tile spine graph of G is connected.
(Ifit is not we can treat G as a union of grammars.)
Sincethe spine graph is a union of wfcs it has an Eulerian wfc(in tile usual sense of Eulerian).
Further, since everyw~rl, ex is the initial vertex of some wfc, every vertex istile initial vertex of some Eulerian wfc.Suppose there is some simple cycleX0 (fl0,10, t0) Xl ( i l l , l l , t l )  ' ' '.
.
.
x~ (f~,, t, ,  t~) x0where the Xj are the vertices and the tuples are thelabels on the edges of the cycle.
Then there is a wfcstarting at Xo that includes the edge (flo, 10, to), al-though not necessarily initially.
In particular the Eule-rian wfc starting at X0 is such a wfc.
This correspondsto a derivable auxiliary tree that includes a proper seg-ment beginning with to.
Since G is in regular form,that proper segment is a derivable auxiliary tree.
Callthis 7o (see Figure 3.)
The spine of that tree is labeledX0,X1, .
.
.
,X0,  where anything (other than X0) canoccur in the ellipses.The same cycle can be rotated to get a simple cyclestarting at each of the Xj.
Thus for each Xj there is aderivable auxiliary tree starting with tj.
Call it 73".
Bya sequence of adjunctions of each 7j at the second nodeon the spine of 7j-1 an auxiliary tree for X0 is derivablein which the first proper segment is the concatenationoftO, t l , .
.
.
, tn .Again, by the fact that G is in regular form, this propersegment is derivable in G. Hence there is a wfc in thespine graph corresponding to this tree.
\[\]P ropos i t ion5  For any TAG G the question ofwhetherG is in regular form is decidable.
Further, thereis an effective procedure that, given any TAG, will ex-tend it to a TAG that is in regular form.Proof."
Given a TAG G we construct its spine graph.Since the TAG is finite, the graph is as well.
The TAGis in regular form iff every simple cycle is equivalentto a wfc.
This is clearly decidable.
Further, the setof elementary trees corresponding to simple cycles thatare not equivalent o wfcs is effectively constructible.Adding that set to the original TAG extends it to reg-ular form.
\[\]Of course the set of trees generated by the extendedTAG may well be a proper superset of the set gener-ated by the original TAG.DiscussionThe LCFGs of Schabes and Waters employ a restrictedform of adjunction and a highly restricted form of ele-mentary auxiliary tree.
The auxiliary trees of LCFGscan only occur in left- or right-recursive form, that is,with the foot as either the left- or right-most node onthe frontier of the tree.
Thus the structures that can becaptured in these trees are restricted by the mechanismitself, and Schabes and Waters (in (1993a)) cite twosituations where an existing LTAG grammar for En-glish (Abeill@ et at., 1990) fails to meet this restriction.But while it is sufficient to assure that the languagegenerated is context-free and cubic-time parsable, thisrestriction is stronger than necessary.TAGs in regular form, in contrast, are ordinary TAGsutilizing ordinary adjunction.
While it is developedfrom the notion of regular adjunction, regular formis just a closure condition on the elementary trees ofthe grammar.
Although that closure condition assuresthat all improper elementary auxiliary trees are redun-dant, the form of the elementary trees themselves iunrestricted.
Thus the structures they capture can bedriven primarily by linguistic considerations.
As wenoted earlier, the restrictions on the form of the treesin an LCFG significantly constrain the way in whichCFGs can be lexicalized using Schabes and Waters'sconstruction.
These constraints are eliminated if we re-quire only that the result be in regular form and thelexicalization can then be structured largely on linguis-tic principles.161On the other hand, regular form is a property of thegrammar as a whole, while the restrictions of LCFGare restrictions on individual trees (and the manner inwhich they are combined.)
Consequently, it is imme-diately obvious if a grammar meets the requirementsof LCFG, while it is less apparent if it is in regularform.
In the case of the LTAG grammar for English,neither of the situations noted by Schabes and Watersviolate regular form themselves.
As regular form isdecidable, it is reasonable to ask whether the gram-mar as a whole is in regular form.
A positive resultwould identify the large fragment of English covered bythis grammar as strongly context-free and cubic-timeparsable.
A negative result is likely to give insight intothose structures covered by the grammar that requirecontext-sensitivity.One might approach defining a context-free languagewithin the TAG formalism by developing a grammarwith the intent that all trees derivable in the grammarbe derivable by regular adjunction.
This condition canthen be verified by the algorithm of previous ection.
Inthe case that the grammar is not in regular form, the al-gorithm proposes a set of additional auxiliary trees thatwill establish that form.
In essence, this is a predictionabout the strings that would occur in a context-freelanguage xtending the language ncoded by the origi-nal grammar.
It is then a linguistic issue whether theseadditional strings are consistent with the intent of thegrammar.If a grammar is not in regular form, it is not necessar-ily the case that it does not generate a recognizable set.The main unresolved issue in this work is whether itis possible to characterize the class of TAGs that gen-erate local sets more completely.
It is easy to show,for TAGs that employ adjoining constraints, that thisis not possible.
This is a consequence of the fact thatone can construct, for any CFG, a TAG in which thepath language is the image, under a bijeetive homomor-phisrn, of the string language generated by that CFG.Since it is undecidable if an arbitrary CFG generatesa regular string language, and since the path languageof every recognizable set is regular, it is undecidableif an arbitrary TAG (employing adjoining constraints)generates a recognizable set.
This ability to captureCFLs in the string language, however, seems to dependcrucially on the nature of the adjoining constraints.
Itdoes not appear to extend to pure TAGs, or even TAGsin which the adjoining constraints are implemented asmonotonically growing sets of simple features.
In thecase of TAGs with these limited adjoining constraints,then, the questions of whether there is a class of TAGswhich includes all and only those which generate rec-ognizable sets, or if there is an effective procedure forreducing any such TAG which generates a recognizableset to one in regular form, are open.ReferencesAnne Abeill~, Kathleen M. Bishop, Sharon Cote, andYves Schabes.
1990.
A lexicalized tree adjoininggrammar for English.
Technical Report MS-CIS-90-24, Department of Computer and Information Sci-ence, University of Pennsylvania.Ferenc G~eseg and Magnus Steinby.
1984.
Tree Au-tomata.
Akad~miai Kiad6, Budapest.Aravind K. Joshi and Yves Schabes.
1992.
Tree-adjoining grammars and lexicalized grammars.
InM.
Nivat and A. Podelski, editors, Tree Automataand Languages, pages 409-431.
Elsevier Science Pub-lishers B.V.Yves Schabes and Aravind K. Joshi.
1991.
Parsingwith lexicalized tree adjoining grammar.
In MasaruTomita, editor, Current Issues in Parsing Technol-ogy, chapter 3, pages 25-47.
Kluwer Academic Pub-lishers.Yves Schabes and Richard C. Waters.
1993a.
Lexical-ized context-free grammars.
In 31st Annual Meet-ing of the Association for Computational Linguistics(ACL'93), pages 121-129, Columbus, OH.
Associa-tion for Computational Linguistics.Yves Schabes and Richard C. Waters.
1993b.
Lexical-ized context-free grammar: A cubic-time parsable,lexicalized normal form for context-free grammarthat preserves tree structure.
Technical Report 93-04, Mitsubishi Electric Research Laboratories Cam-bridge Research Center, Cambridge, MA, June.Yves Sehabes, Anne Abeill~, and Aravind K..\]oshi.1988.
Parsing strategies with 'lexicalized' grammars:Application to tree adjoining grammars.
In Proceed-ings of the 12th International Conference on Compu-tational Linguistics (COLING'88), Budapest, Hun-gary.
Association for Computational Linguistics.Yves Sehabes.
1990.
Mathematical nd ComputationalAspects of Lexicalized Grammars.
Ph.D. thesis, De-partment of Computer and information Science, Uni-versity of Pennsylvania.J.
W. Thatcher.
1967.
Characterizing derivation treesof context-free grammars through a generalization offinite automata theory.
Journal of Computer andSystem Sciences, 1:317-322.K.
Vijay-Shanker and David Weir.
1993.
Parsingsome constrained grammar formalisms.
Computa-tional Linguistics, 19(4):591-636.162
