Const ra in t -Based  Categor ia l  GrammarGosse  Bouma and  Ger t jan  van  NoordAlfa- informatica ndBehavorial  and Cognitive Neurosciences,Ri jksuniversiteit  Groningen{gosse,vannoord} @let.rug.nlAbst rac tWe propose a generalization f Categorial Grammar inwhich lexical categories are defined by means of recur-sive constraints.
In particular, the introduction of re-lational constraints allows one to capture the effects of(recursive) lexical rules in a computationally attractivemanner.
We illustrate the linguistic merits of the newapproach by showing how it accounts for the syntax ofDutch cross-serial dependencies and the position andscope of adjuncts in such constructions.
Delayed evalu-ation is used to process grammars containing recursiveconstraints.1 In t roduct ionCombinations ofCategorial Grammar (co) and unifica-tion naturally lead to the introduction of polymorphiccategories.
Thus, Karttunen (1989) categorizes NP's asX/X, where x is a verbal category, Zeevat el al.
(1987)assign the category X/(NP\X) to NP's, and Emms (1993)extends the Lambek-calculus with polymorphic ate-gories to account for coordination, quantifier scope, andextraction.The role of polymorphism has been restricted, how-ever, by the fact that in previous work categories weredefined as feature structures using the simple, non-recursive, constraints familiar from feature descriptionlanguages such as PATR.
Relational constraints can beused to define a range of polymorphic ategories thatare beyond the expressive capabilities of previous ap-proaches.In particular, the introduction of relational con-straints captures the effects of (recursive) lexical rulesin a computationally attractive manner.
The additionof such rules makes it feasible to consider truly 'lexical-ist' grammars, in which a powerful exical componentis accompanied by a highly restricted syntactic ompo-nent, consisting of application only.2 Recurs ive  Const ra in tsIn cG, many grammatical concepts can only be de-fined recursively.
Dowty (1982) defines grammaticalfunctions uch as subject and object as being the ul-timate and penultimate 'argument-in' of a verbal cate-gory.
Hoeksema (1984) defines verbs as exocentric at-egories reducible to s. Lexical rules frequently refer tosuch concepts.
For instance, a categorial lexical ruleof passive applies to verbs electing an object and mustremove the subject.In standard unification-based formalisms, these con-cepts and the rules referring to such concepts cannot beexpressed irectly.2.1 Sub jec t -verb  agreementConsider a categorial treatment of subject-verb agree-ment with intransitive ( NP\[NOM\]\S ) and transitive((NP\[NOM\]\S)/NP\[ACC\]) verbs defined as follows:(1) lez(walks,X):-iv(X)./ez(kisses, X) :-tv(X).vat\[  eat s \]iv( dir'\'arg \[ catnp \] )"case noraiv(valdir '/'vat\[ cats \]dir '\'arg \[ cat np \]case nomarg \[ cal np \]case  aCESubject-verb agreement can be incorporated easily ifone reduces agreement to a form of subcategorization.147If, however, one wishes to distinguish these two pieces ofinformation (to avoid a proliferation of subcategoriza-tion types or for morphological reasons, for instance), itis not obvious how this could be done without recursiveconstraints.
For intransitive verbs one needs the con-straint that (arg agr) = Agr (where Agr is some agree-ment value), for transitive verbs that (val arg agr) =Agr, and for ditransitive verbs that (val val arg agr) =Agr.
The generalization is captured using the recursiveconstraint sv_agreement (2).
In (2) and below, we usedefinite clauses to define lexical entries and constraints.Note that lexical entries relate words to feature struc-tures that are defined indirectly as a combination ofsimple constraints (evaluated by means of unification)and recursive constraints.
1(2) lex(walks, X) :-iv(X),sv_agreement( sg3 , X).lex(kisses, X) :-tv(X),sv_agreement( sg3 , X).sv-agreement(Agr' \[ cat np \] agr Agr \S).sv_agreement( Agr , Y \X  ) :-sv_agreement( Agr , X).Relational constraints can also be used to capturethe effect of lexical rules.
In a lexicalist theory suchas cG, in which syntactic rules are considered to beuniversally valid scheme's of functor-argument combi-nation, lexical rules are an essential tool for capturinglanguage-specific generalizations.
As Carpenter (1991)observes, some of the rules that have been proposedmust be able to operate recursively.
Predicative forma-tion in English, for instance, uses a lexical rule turninga category reducible to vP into a category reducing toa vP-modifier (vP\vP).
As a vP-modifier is reducibleto vP, the rule can (and sometimes must) be appliedrecursively.2 .2  Ad juncts  as  a rgumentsMiller (1992) proposes a lexical rule for French nounswhich adds an (modifying) adjective to the list of argu-ments that the noun subcategorizes for.
Since a noun1We use X/Y  and Y\X  as shorthand for dir ' / 'arg Yand dir ' , respectively and S, NP, and Adj as 'typedarg Yvariables' of type \[ cats \], \[ cat np \], and \[ cat adj \],respectively.can be modified by any number of adjectives, the rulemust be optional as well as recursive.
The advantagesof using a lexical rule in this case is that it simplifiesaccounting for agreement between ouns and adjectivesand that it enables an account of word order constraintsbetween arguments and modifiers of a noun in terms ofobliqueness.The idea that modifiers are introduced by means ofa lexical rule can be extended to verbs.
That is, ad-juncts could be introduced by means of a recursive rulethat optionally adds these elements to verbal categories.Such a rule would be an alternative for the standard cat-egorial analysis of adjuncts as (endocentric) functors.There is reason to consider this alternative.In Dutch, for instance, the position of verb modifiersis not fixed.
Adjuncts can in principle occur anywhereto the left of the verb: 2(3) a. dat Johan opzettelijk een ongelukthat J. deliberately an accidentveroorzaaktcausesthat J. deliberately causes an accidentb.
dat Johan Marie opzettelijkthat J. M. deliberatelygeen cadeau geeftno present givesthat J. deliberately gave M. no presentThere are several ways to account for this fact.
Onecan assign multiple categories to adjuncts or one canassign a polymorphic ategory x /x  to adjuncts, with xrestricted to 'verbal projections' (Bouma, 1988).Alternatively, one can assume that adjuncts are notfunctors, but arguments of the verb.
Since adjuncts areoptional, can be iterated, and can occur in several posi-tions, this implies that verbs must be polymorphic.
Theconstraint add_adjuncts has this effect, as it optionallyadds one or more adjuncts as arguments to the 'initial'category of a verb:(4) iex(veroorzaken, X):-add_adjuncts(X, NP\ (NP \S)).lex(geven, X) :-add_adjuncts(X, NP\ (NP\ (NP\S) ) ) .add_adjuncts(S, ).add_adjuncts(Adj \X, Y) :-add_adjuncts(X, Y).add_adjuncts( dir D , dir D ) :-arg A arg Aadd_adjuncts(X, Y).2As we want to abstract away from the effects of 'verb-second', we present only examples of subordinate clauses.148This constraint captures the effect of applying thefollowing (schematic) lexical rule recursively:(5) xl\...\xi\x,+l\...\s/Y1...Y,#XI  \ .
.
.
\X ikAd jkX i+ l  \ .
.
.
\S /Y1 .
.
.
Y .The derivation of (3a) is given below (where X =~ Yindicates that add_adjuncts(Y,X) is satisfied, and IV ----NP\S).
(6) .
.
.
J. opzetteli jk een ongelukNP ADJ NPveroorzaaktNP\IVNP\ (ADJ\IV)ADJ\IVIVSAn interesting implication of this analysis is that ina categorial setting the notion 'head' can be equatedwith the notion 'main functor'.
This has been pro-posed by Barry and Pickering (1990), but they areforced to assign a category containing Kleene-star op-erators to verbal elements.
The semantic counterpartof such category-assignments is unclear.
The presentproposal is an alternative for such assignments whichavoids introducing new categorial operators and whichdoes not lead to semantic complications (the semanticsof add_adjuncts is presented in section 3.3).
Below weargue that this analysis also allows for a straightforwardexplanation of the distribution and scope of adjuncts inverb phrases headed by a verbal complex.3 Cross -Ser ia l  Dependenc iesIn Dutch, verbs selecting an infinitival complement (e.g.modals and perception verbs) give rise to so called cross-serial dependencies.
The arguments of the verbs in-volved appear in the same order as the verbs in the'verb cluster':(7) a.b.dat An1 Bea2 will kussen~.dat An Bea wants to kissthat An wants to kiss Beadat An1 Bea2 Cor3 Willdat An Bea Cor wantszien2 kussen3.to see kissthat An wants to see Bea kiss CorThe property of forming cross-serial dependencies isa lexical property of the matrix verb.
If this verb is a'trigger' for cross-serial word order, this order is obliga-tory, whereas if it is not, the infinitival complement willfollow the verb:(8) a.
*dat An wil Bea kussen.b.
dat An zich voornam Beathat An Refl.
planned Beate kussen.to kissthat An.
planned to kiss Beae.
*dat An zich Bea voornam te kussen.3 .1  Genera l i zed  D iv i s ionCategorial accounts of cross-serial dependencies ini-tially made use of a syntactic rule of composition(Steedman, 1985).
Recognizing the lexical nature ofthe process, more recent proposals have used either alexical rule of composition (Moortgat, 1988) or a lexicalrule of 'division' (Hoeksema, 1991).
Division is a rulewhich enables a functor to inherit the arguments of itsargument :3X/Y  ::?, (X /Z ,  .
.
.
IZ , , ) I (Y /Z .
.
.
IZ , )To generate cross-serial dependencies, a 'dishar-monic' version of this rule is needed:(9) x/v  (zA... z.\x)/(zA.. ,  z.\Y)Hoeksema proposes that verbs which trigger cross-serial word order are subject to (9):(10) .
.
.An  Bea wil kussenNP NP IV/IV NP\IV#(NP\IV)/(NP\IV)NP\IVIVIn a framework using recursive constraints, gener-alized disharmonic division can be implemented as arecursive constraint connecting the initial category ofsuch verbs with a derived category:(11) lez(willen,X) :-cross_serial(X, (NP\S) / (NP\S) ) .lez(z ien,  X) :-cross_serial(X, (NP\ (NPkS)) / (NP\S) ) .lez(voornemen,  (NPre fl \ (NP \S) ) / (NP  \S)).aArgument inheritance is used in HPSG to account forverb clustering in German (Hinrichs and Nakazawa, 1989).The rlPSG analysis is essentially equivalent to Hoeksema'saccount.149(12) cross_serial(Out,In) :-division(Out, In),verb_cluster(Out).division(X, X) .division(  Z \X  ) / ( Z \  Y ), X '  /Y ' )  :-division(X/Y, X ' / Y') .\[ \[ + \] \] )Only verbs that trigger the cross-serial order are sub-ject to the division constraint.
This accounts immedi-ately for the fact that cross-serial orders do not arisewith all verbs selecting infinitival complements.3 .2  Verb  C lus tersThe verb_cluster constraint ensures that cross-serialword order is obligatory for verbs subject tocross_serial.
To rule out the ungrammatical (8a), forinstance, we assume that Bea kussen is not a verb clus-ter.
The verb kussen by itself, however, is unspecifiedfor vc, and thus (7a) is not excluded.We do not assume that cross-serial verbs take lexicalarguments (as has sometimes been suggested), as thatwould rule out the possibility of complex constituents othe right of cross-serial verbs altogether.
If one assumesthat a possible bracketing of the verb cluster in (7b) is\[wil \[zien kussen\]\] (coordination and fronting data havebeen used as arguments that this is indeed the case),a cross-serial verb must be able to combine with non-lexical verb clusters.
Furthermore, if a verb selects aparticle, the particle can optionally be included in theverb cluster, and thus can appear either to the right orto the left of a governing cross-serial verb.
For a verbcluster containing two cross-serial verbs, for instance,we have the following possibilities:(13) a. dat An Bea heeft durven aanthat An Bea has dared part.te sprekento speakthat An has dared to speak to Bea.b.
dat An Bea heeft aan durven te spreken.c.
dat An Bea aan heeft durven te spreken.A final piece of evidence for the the fact that cross-serial verbs may take complex phrases as argumentstems from the observation that certain adjectival andprepositional rguments can also appear as part of theverb cluster:(14) dat An dit aan Bea had duidelijkthat An this to Bea has cleargemaaktmadethai An had made this clear to BeaCross-serial verbs select a +vc  argument.
Therefore,all phrases that are not verb clusters must be marked -vc.
In general, in combining a (verbal) functor with itsargument, it is the argument hat determines whetherthe resulting phrase is -vc.
For instance, NP-argumentsalways give rise to -VC phrases, whereas particles andverbal arguments do not give rise to -vc phrases.
Thissuggests that NP's must be marked -vc, that particlesand verbs can remain unspecified for this feature, andthat in the syntactic rule for application the value ofthe feature vc must be reentrant between argumentand resultant.3 .3  The  d is t r ibut ion  and  scope  o fad junctsThe analysis of cross-serial dependencies in terms ofargument inheritance interacts with the analysis of ad-juncts presented in section 2.2.
If a matrix verb inheritsthe arguments of the verb it governs, it should be pos-sible to find modifiers of the matrix verb between thisverb and one of its inherited arguments.
This predictionis borne out (15a).
However, we also find structurallysimilar examples in which the adjunct modifies the gov-erned verb (15b).
Finally, there are examples that areambiguous between a wide and narrow scope reading(15c).
We take it that the latter case is actually whatneeds to be accounted for, i.e.
examples uch as (15a)and (15b) are cases in which there is a strong prefer-ence for a wide and narrow scope reading, respectively,but we will remain silent about the (semantic) factorsdetermining such preferences.
(15) a. dat Frits Marie volgens mij lijktthat F. M. to me seemste ontwijken.to avoidIt seems to me that F. avoids M.b.
dat Frits Marie opzettelijk lijktthat F. M. deliberately seemste ontwijken.to avoidIt seems that F. deliberately avoids M.c.
dat Frits Marie de laatste tijd lijktthat F. M. lately seemste ontwijken.to avoidIt seems lately as if F. avoids M.It seems as if F. avoids M. latelyOn the assumption that the lexical entries for lijkenen ontwijken are as in (16), example (15c) has two possi-ble derivations ((17) and (18)).
Procedurally speaking,the rule that adds adjuncts can be applied either to thematrix verb (after division has taken place) or to the150governed verb.
In the latter case, the adjunct is 'inher-ited' by the matrix verb.
Assuming that adjuncts takescope over the verbs introducing them, this accountsfor the ambiguity observed above.
(16) lex(lijken, Verb):-add_adjuncts(Verb, Verb'),cross_serial(Verb', (NP\S)/(NP\S)).lex(ontwijken, Verb):-add_adjuncts(Verb, NP\(NP\S)).
(17) ... de laatste tijd lijktADJ IV/IVte ontwijkenTVTV/TV(AD&TV)/TVADJ\TVTV(18) ... de laatste tijd lijkt te ontwijkenADJ IV/IV TV(ADJ\TV)/(ADJ\TV) ADJ\TVADJ\TVTVThe assumption that adjuncts cope over the verbsintroducing them can be implemented as follows.
Weuse a unification-based semantics in the spirit of Pereiraand Shieber (1987).
Furthermore, the semantics ishead-driven, i.e.
the semantics of a complex constituentis reetrant with the semantics of its head (i.e.
the func-tor).
The feature structure for a transitive verb in-cluding semantics (taking two NP's of the generalizedquantifier type ((e, t), t} as argument and assigning widescope to the subject) is:(19)valdir 'Varg \[\[ cat s \]dir 'V\[ cat np \] ar9 sem (X^Sobj)^Ss,,bjcat np \]sem (Y^kiss(X,V))ASobjsem Ssubi TVThus, a lexical entry for a transitive verb can be de-fined as follows (where TV refers to the feature struc-ture in 19):(20)/ez(kussen, X) :-add_adjuncts(X, TV).The lexical rule for adding adjuncts can now be ex-tended with a semantics:(21) add_adjuncts(\[ sem Sx \ ]x '  \[ sem Sy \]y) :-add_adj(X, Y, Sx, Sy).add_adj(S, S, Sem, Sem).val Xdir 'V add_adj(arg \[add_adj(X,cat adj \]sere Sy^SAY, Sx, Sa).,Y, Sx, Sy):-\[va, x\] \[va, Y\]add_adj( dir D , dir D ,Sx,Sr)  :-arg A arg Aadd_adj(X, Y, Sx, Sy).Each time an adjunct is added to the subcategoriza-tion frame of a verb, the semantics of the adjunct is'applied' to the semantics as it has been built up so far(Sy), and the result (SA) is passed on.
The final step inthe recursion unifies the semantics that is constructedin this way with the semantics of the 'output' category.As an adjunct A1 that appears to the left of an adjunctA2 in the string will be added to the subcategoriza-tion frame of the governing verb after As is added, thisorders the (sentential) scope of adjuncts according toleft-to-right word order.
Furthermore, since the scopeof adjuncts is now part of a verb's lexical semantics,any functor taking such a verb as argument (e.g.
verbsselecting for an infinitival complement) will have thesemantics of these adjuncts in its scope.Note that the alternative treatments ofadjuncts men-tioned in section 2.2 cannot account for the distributionor scope of adjuncts in cross-serial dependency con-structions.
Multiple (i.e.
a finite number of) catego-rizations cannot account for all possible word orders,since division implies that a trigger for cross-serial wordorder may have any number of arguments, and thus,that the number of 'subcategorization frames' for suchverbs is not fixed.
The polymorphic solution (assigningadjuncts the category x/x) does account for word or-der, but cannot account for narrow scope readings, asthe adjunct will always modify the whole verb cluster(i.e the matrix verb) and cannot be made to modify anembedded verb only.4 ProcessingThe introduction ofrecursive lexical rules has repercus-sions for processing as they lead to an infinite numberof lexical categories for a given lexical item or, if one151considers lexical rules as unary syntactic rules, to non-branching derivations of unbounded length.
In bothcases, a parser may not terminate.
One of the mainadvantages of modeling lexical rules by means of con-straints is that it suggests a solution for this problem.A control strategy which delays the evaluation of con-straints until certain crucial bits of information are filledin avoids non-termination a d in practice leads to gram-mars in which all constraints are fully evaluated at theend of the parse-process.Consider a grammar in which the only recursive con-straint is add_adjuncts, as defined in section 2.2.
Theintroduction of recursive constraints in itself does notsolve the non-termination problem.
If all solutionsfor add_adjuncts are simply enumerated uring lexicallook-up an infinite number of categories for any givenverb will result.During processing, however, it is not necessarily thecase that we need to consider all solutions.
Syntacticprocessing can lead to a (partial) instantiation of thearguments of a constraint.
If the right pieces of infor-mation are instantiated, the constraint will only have afinite number of solutions.Consider, for instance, a parse for the followingstring.
(22) ... J. opzettelijk een ongeluk veroorzaaktNP ADJ NP VerbNP\(ADJ\IV)ADJ\IVNP\SSEven if the category of the verb is left completelyopen initially, there is only one derivation for this stringthat reduces to S (remember that the syntax uses appli-cation only).
This derivation provides the informationthat the variable Verb must be a transitive verb select-ing one additional adjunct, and with this informationit is easy to check whether the following constraint issatisfied:add_adjuncts(NP\(ADJ\(NP\S) ), NP\(NP\S)).This suggests that recursive constraints should not beevaluated during lexical look-up, but that their evalu-ation should be delayed until the arguments are suffi-ciently instantiated.To implement this delayed evaluation strategy, weused the block facility of Sicstus Prolog.
For each re-cursive constraint, a block declaration defines what theconditions are under which it may  be evaluated.
Thedefinition of add_adjuncts (with semantics omitted forreadability), for instance, now becomes:(23) add_adjuncts(\[ arg Arg \ ]x ,Y )  :-add_adjuncts(X, Y, Arg).?
- block add_adjuncts(?,?,-).add_adjuncts(S, , _).add_adjuncts(Adj \X,  Y,  _) :-add_adjuncts(X, Y).
ivy, x\] \[w,Y\] add_adjuncts( dir D , dir D ,.A.)
:-arg A arg Aadd_adjuncts(X, Y).We use add_adjuncts~2 to extract the informationthat determines when add_adjuncts/3 is to be evalu-ated.
The b lock declaration states that add_adjuncts/3may only be evaluated if the third argument (i.e.
theargument of the 'output' category) is not a variable.During lexical ook-up, this argument is uninstantiated,and thus, no evaluation takes place.
As soon as a verbcombines with an argument, the argument category ofthe verb is instantiated and add_adjuncts~3 will be eval-uated.
Note, however, that calls to add_adjuncts~3 arerecursive, and thus one evaluation step may lead to an-other call to add_adjuncts~3, which in its turn will beblocked until the argument has been instantiated suffi-ciently.
Thus, the recursive constraint is evaluated in-crementally, with each syntactic application step lead-ing to a new evaluation step of the blocked constraint.The recursion will stop if an atomic category s is found.Delayed evaluation leads to a processing model inwhich the evaluation of lexieal constraints and the con-struction of derivational structure is completely inter-twined.4.1 Other strategiesThe delayed evaluation techniques discussed above canbe easily implemented in parsers which rely on back-tracking for their search.
For the grammars that wehave worked with, a simple bottom-up (shift-reduce)parser combined with delayed evaluation guaranteestermination of the parsing process.To obtain an efficient parser more complicated searchstrategies are required.
However, chart-based searchtechniques are not easily generalized for grammarswhich make use of complex constraints.
Even if the the-oretical problems can be solved (Johnson, 1993; DSrre,1993) severe practical problems might surface, if theconstraints are as complex as the ones proposed here.As an alternative we have implemented chart-basedparsers using the 'non-interleaved pruning' strategy(terminology from (Maxwell III and Kaplan, 1994)).152Using this strategy the parser first builds a parse-forestfor a sentence on the basis of the context-free backboneof the grammar.
In a second processing phase parsesare recovered on the basis of the parse forest and thecorresponding constraints are applied.
This may be ad-vantageous if the context-free backbone of the grammaris 'informative' nough to filter many unsuccessful par-tial derivations that the parser otherwise would have tocheck.As clearly a CUG grammar does not contain such aninformative context-free backbone a further step is touse 'selective feature movement' (cf.
again (Maxwell IIIand Kaplan, 1994)).
In this approach the base gram-mar is compiled into an equivalent modified grammarin which certain constraints from the base grammar areconverted to a more complex context-free backbone inthe modified grammar.Again, this technique does not easily give good resultsfor grammars of the type described.
It is not clear at allwhere we should begin extracting appropriate featuresfor such a modified grammar, because most informationpassing is simply too 'indirect' to be easily compiledinto a context-free backbone.We achieved the best results by using a 'hand-fabricated' context-free grammar as the first phase ofparsing.
This context-free grammar builds a parse for-est that is then used by the 'real' grammar to obtain ap-propriate representation(s) for the input sentence.
Thisturned out to reduce parsing times considerably.Clearly such a strategy raises questions on the rela-tion between this context-free grammar and the CUGgrammar.
The context-free grammar is required to pro-duce a superset of the derivations allowed by the CUG.Given the problems mentioned above it is difficult toshow that this is indeed the case (if it were easy, then itprobably would also be easy to obtain such a context-free grammar automatically).The strategy can be described in somewhat more de-tail as follows.
The context-free phase of processingbuilds a number of items defining the parse forest, in aformat hat can be used by the second processing phase.Such items are four-tuples(R, Po,P,n)where R is a rule name (consistent with the rule namesfrom the CUG), P0, P are string positions and D de-scribes the string positions associated with each daugh-ter of the rule (indicating which part of the string iscovered by that daughter).Through a head-driven recursive descent he secondprocessing phase recovers derivations on the basis ofthese items.
Note that the delayed evaluation tech-nique for complex constraints is essential here.
Alter-native solutions are obtained by backtracking.
If thefirst phase has done a good job in pruning many failingsearch branches then this is not too expensive, and wedo not have to worry about the interaction of cachingand complex constraints.5 F ina l  RemarksIn sections 2 and 3 we have sketched an analysis ofcross-serial dependency constructions and its interac-tion with the position and scope of adjuncts.
Therules given there are actually part of a larger frag-ment that covers the syntax of Dutch verb clustersin more detail.
The fragment accounts for cross-serial dependencies and extraposition constructions (in-cluding cases of 'partial' extraposition), infinitivus-pro-participio, modal and participle inversion, the positionof particles in verb clusters, clitic climbing, partial vp-topicalization, and verb second.
In the larger fragment,additional recursive constraints are introduced, but thesyntax is still restricted to application only.The result of Carpenter (1991) emphasizes the impor-tance of lexical rules.
There is a tendency in both CGand HPSG to rely more and more on mechanisms ( uchas inheritance and lexical rules or recursive constraints)that operate in the lexicon.
The unrestricted generativecapacity of recursive lexical rules implies that the re-maining role of syntax can be extremely simple.
In theexamples above we have stressed this by giving an ac-count for the syntax of cross-serial dependencies (a con-struction that is, given some additional assumptions,not context-free) using application only.
In general,such an approach seems promising, as it locates thesources of complexity for a given grammar in one place,namely the lexicon.ReferencesGuy Barry and Martin Pickering.
1990.
Dependencyand coordination i  categorial grammar.
In G. Barryand G. Morrill, editors, S~udies in Categorial Gram-mar.
University of Edinburgh.
Edinburgh WorkingPapers in Cognitive Science 5.Gosse Bouma.
1988.
Modifiers and specifiers in cate-gorial unification grammar.
Linguistics, 26:21-46.Bob Carpenter.
1991.
The generative power of cat-egorial grammars and head-driven phrase structuregrammars with lexical rules.
Computational Linguis-tics, 17(3):301-313.Jochen DSrre.
1993.
Generalizing earley deduction forconstraint-based grammars.
In Jochen Do~rre, edi-tor, Computational Aspects of Constraint-Based Lin-guistic Description.
Dyana-2 Deliverable R1.2.A.153David R. Dowty.
1982.
Grammatical relations andmontague grammar.
In Pauline Jacobson and Ge-offrey Pullum, editors, The Nature of Syntactic Rep-resentation, pages 79-130.
Reidel, Dordrecht.Martin Emms.
1993.
Parsing with polymorphism.
InSixth Conference of the European Chapter of the As-sociation for Computational Linguistics, pages 120-129.Erhard Hinrichs and Tsuneko Nakazawa.
1989.
Flippedout: AUX in German.
In Papers from the 25thAnnual Regional Meeting of the Chicago LinguisticSociety, pages 187-202.
Chicago Linguistics Society,Chicago.Jack Hoeksema.
1984.
Categorial Morphology.
Ph.D.thesis, Groningen University.Jack Hoeksema.
1991.
A categorial theory of reanalysisphenomena, ms. RUG Groningen.Mark Johnson.
1993.
Memoization in constraint logicprogramming.
Paper presented at the First Work-shop on Principles and Practice of Constraint Pro-gramming, April 28-30, Newport, Rhode Island.Lauri Karttunen.
1989.
RadicM lexicalism.
In Mark R.Baltin and Anthony S. Kroch, editors, AlternativeConceptions of Phrase Structure, pages 43-65.
Uni-versity of Chicago Press.John T. Maxwell III and Ronald M. Kaplan.
1994.
Theinterface between phrasal and functional constraints.Computational Linguistics, 19(4):571-90.Philip Miller.
1992.
Clitics and Constituents in PhraseStructure Grammar.
Garland, New York.Michael Moortgat.
1988.
Categorial Investigations.Ph.D.
thesis, University of Amsterdam.Fernando C.N.
Pereira and Stuart M. Shieber.
1987.Prolog and Natural Language Analysis.
Center forthe Study of Language and Information Stanford.Mark Steedman.
1985.
Dependency and coordinationin the grammar of Dutch and English.
Language,61:523-68.Henk Zeevat, Ewan Klein, and Jo Calder.
1987.
Uni-fication categorial grammar.
In Nicholas Haddock,Ewan Klein, and Glyn Morrill, editors, CategorialGrammar, Unification Grammar and Parsing.
Cen-tre for Cognitive Science, University of Edinburgh.Volume 1 of Working Papers in Cognitive Science.154
