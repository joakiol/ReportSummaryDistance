ON KNOWLEDGE-BASED MACHINE TRANSLATIONSergei Nirenburg*, Victor Raskin** az/d Alien Tucker*ABSTRACTThis paper describes the design of tile knowledge representation mediumused for representing concepts and assertions, respectively, in a subworldchosen for a knowledge-based machine u'anslation system.
This design isused in the TRANSLATOR machine translation project.
The kuowledgerepresentation language, or interlingua, has two components, DIL andTIL.
DIL stands for 'dictionary of interlingua' and descibes tile semanticsof a subworld.
T IL  stands for 'text of interlingua' and is responsible forproducing an interlingua text, which represents tile meaning of an inputtext in tile terms of trte interlingua.
We maintain that involved analysis ofvarious types of linguistic and eucyclopaedic meaniug is necessary for thetask of autx)matic translatiou.
The mechanisms for extracting and nlanipn-lating and reproducing the nteaning of te~ts will be reported in detail else-where.
The linguistic (inchlding tile syutactic) knowledge about sourcealtd target languages is used by the nlechanisnls that translate texts intoaud from the btterlingua.
Since interlingua is an artificial langnage, wecan (and do, through TII,) control tile syntax and semantics of the allowedinterlingua elements.
The interlingua, snggesled for TRANSI.ATOR has aln'oader coverage than other knowledge re, presentation schemata fornatural language.
It involves the knowledge about discourse, speech acts,focus, thne, space and other facets of the overall meaning of texts.to Delimit ing file Problem.TRANS/,AfOR explores the knowledge based apln'oach to machinetranslation.
"File basic translation strategy is to extract nleaniug froul tileinlmt text in source language, SL, represent this nmaning hi a languageiudependeut senlantic representation and tlmn render this meauh~g in /,tw'get language, TI,.
The knowledge representation language used in sucha set-up is called, for historical reasons, interlingua (henceforth, ILl.TRANSLATOR'S ultima~ ainl is achieving good quality an/el/latintranslation in n non-trivial snbworld and its corresponding sublangnage.The philosophy of 'rltANSI.ATOR ailns at tile independence of tile process oftrauslafion froln human intervention in tile fcnnl of the traditional pre-and/or post-editing, hlteraction during tit/,* process of tra~lslation can beaccommodated by this philosophy, but only as a temporary measure.Interactive modules will be phlgged into the system pendhlg the development of autonlatic modules for perfbrnling tile various tasks as well asmore powerful inference engines and representation schemata.
This is adevice that facilitates early testing of a system Even tlefbre all the modulesare actually built.
Another advantage of this strategy is that the systnlubecomes 'dynamic' ,  in the sense that its knowledge is growing with use.This strategy is an exteusion of one of the approaches discussed, forexample, in Carbonell and Tomita (1985) since it implies knowledgeacquisition during the exploitation stage a/~d also involves a broader classof texts as its inlnlt.
Johnson and Whitelock (1985) are also proponents ofthe interactive approach, lint their motivation is different, in that they per-ceive the human to be an integral part of their system even in its finalincarnation.
In any case, interactlvity is not tile central design feature ofTRANSLATOR.Before proceeding to describe the knowledge chlsters in TItANSI.A.."fOR we would like to colnnlent very briefly on a number of methodological points concerning MT research.
It seems that some of file opinionsmore or less commonly hekl by some members of the MT con/munitymay need rethinking.
In what follows we list some of these opinions,together with our comments.
A more detailed treatment of these topicswill be given elsewhere.l- Thin paper is based upon work suptx~rted by the National Science Foundationunder Grant DCR-8407114.
* Colgate University** Purdue UniversityOpinion.
It is nnnecessary to extract ile full meaning from the SL text inorder to achieve adequate MT.Conunent ,  An MT system can do well withont (involved) semantics innlany cases, bnt has to USE meaning in tile rest (or rely on hnlnau inter-yen/ion).
Machines, unlike humans, cannot on demand prodnce interpre-tations of text at all arbitrary depth sufficient for understanding.
There-fore, if one aims at fully automatic, one has to prepare tile system for tiletreatment of even very semantically involved text.
One Call, of course,think of designing a systenl that can decide how deeply each sentence canbe analyzed semantically in an atlempt o minimize selnantic analysis.
Wemaintain that tile decision nlaking involved is as complex as the initialproblem of deep senlantic analysi:;.Opinion?
II is not necessary to finish lnocessing the inlmt sentencebefore starting the translation.
Indeed, people very often do this (considerinterpleu~.rs) with very good re, suits.{2nlnment.
This Opinion is based on iutrospEcdon.
The \[eal thoughtprocesses that gt, on ill tile trans\[atols' or thE interprEtErs' heads are uotknown.
The (quite considerable) knowledge that the translators i/aveabout the subject of the text (speech) and about tilt: speech situation itselfprorupts them to preempt he text by following their expectations concern-ing the most probable set of meanings fbr the tcxl and deciding before tilefinal eorloboration arrives, biveu if' hi a majority of cases this strategyworks (as it is supposed to, because otherwise humans, being intelligentcreatures as thi:y are, Would not have had tile above expectations in thefirst place!
), them is nothing unusual in making an cr ier of" judgenlent.Those ot us who worked as translators surely remeulbct nmltipleinstances of this kind.
Of course, tills disEussion is relative to the qualityof product desired in tile Iranslatioii.Opinion?
Apln'oaches to MT based on AI do not pay sufficient attention tothe syntactic analysis of SI,, while syntactic information is important forMT.Cllnlnlexll.
Syntactic structure of inpnt conveys meaning; this nmanmg isextracted by the semantic analyzer with the help of syntactic knowledge.All clues are indeed used.
No resnlts of' syntactic analysis are, storEdbecause they are not needed.
Any approach that attempts to relate directlyvarious syntactic slyucturn trees between SE, lad T\]~, strikes us as quitennpromising.
It is only some early Al-otiented MT systems that werevuh/erable to this criticism.Opinion?
lL-based approaches Inad to an overkill because no peculia,i.ties of SI, (and of the relationship between, or contrastive knowledge of,SI, and TI,) can be used in translation.
Some languages have quite a lot inconunon in their syntax and meauing dislributiou.
It is wastefltl not to USEthis additional infbrmatiou iu translatiou.Comment .
While snch insights cau sometimcs bE detected and nsed,hies/ of them comes fronl h/uuan intnitinu, and cannot be taken advautageof in an MT systeel, which can hardly he considered a model of humanperformance.
It is also totally wrong to imply, in our opinion, thatdiscovery and implenlentation of those pieCES of contrastive knowledge canbe simpler or, in fact, distinct from invoiw?d semantic analysis.Opinion.
With l\[,, the process of translation beconms one of interpreta-tiou, The structure of the SL text, whert used in addition to It, in MT,governs tile choice of one of tile paraphrases.
Moreovm, again, II, is anoverkill, because tile paraphrases are not needed and add an elemeut ofambiguity.Comment .
thnnan translators always have a few practically Equallyacceptable paraphrases for virtually every St. sentence.
The degree ofmeaning similarity among the acceptable paraphrases i determined byexternal parameters.
The translation is executed according to the humantranslator's intuitive understanding of these parameters.
Only in II.approaches can one control tile required degree of sinlilarity among theacceptable paraphrases as la'anslatious of all SL sentence.Opiniou.
Generation of TL is a relatively simple problem for which verylittle or no knowledge other than lexical or syntactic is needed.627Cmnment.
Generation requires non-trivial decision making, forinstance, in the light of tim discussion in the previous paragraph, or, forthat matter, as regards the computational stylistics, which will have to be apart of the choice-making mechanisms in building TL texts.2.
Configuration of TRANSLATORThe background of the TRANSLATOR MT project at Colgate ispresented in Tucker and Nirenburg (1984).
This paper focuses on thestatic knowledge clusters of TRArqSLA'roR.
The latter are identified as fol-lows:?
.
IL dictionarye SL - IL dictionarye IL - TL dictionary?
SL grammar and syntactic dictionary .?
SL  - IL translator?
IL grammar?
TL grammar and syntactic dictionary?
I L  - TL translatorThere are also dynamic knowledge clusters in TRANSLATOR: tileparser and the generator modules as well as the inferencing mechanism(known as the Inspector) used to derive additional knowledge from ILrepresentations when troubleshooting becomes necessary.In this paper we will describe the structure of the IL dictionary andthe IL grammar, the central components of the system.
These two struc-tures are actually knowledge representation languages.
IL dictionary iswritten in a language for describing tim types of concepts that can appearin the subworld of translation.
IL grammar is written in a language forrepresenting the assertions about okens of those types that actually appearin texts.
We will call these languages DIL (for Dictionary Interlingua)and TIL (Text Interlingua), respectively.
The distinction between DIL andTIL is similar, for instance, to that between the description and the asser-tion languages in KL-ONE (cf., e.g., Brachman and Schmoltze, 1985).After discussing these languages we will briefly discuss the structureof knowledge about SL (the SL grammar and the SL - IL dictionary),enough only to help us through an illustration of how the IL dictionaryand grammar are used.3.
The IL Dic t ionary .The IL dictionary serves as the database where TRANSLATOR storesits knowledge about rite subworld of translation.
It is purely semantic,conceptual.
The IL dictionary is a source of information for representingthe meanings of SL texts.
In it one does not find any information pertain-ing to any particular SL or TL.
Thus, it is pure coincidence that most ofthe entry heads in this dictionary, as well as most of the members of theproperty sets (cf.
below) look like English words.
This choice was madewith the dictionary writers in mind.
The other possibility would havebeen to assign non-suggestive identifiers to entries and values in the ILdictionaries.
This would have slowed doffn the process of dictionary com-pilation.
The dictionary writers must do their best not to mix the seman-tics of an IL dictionary entry with that of an English word whose graphi-cal form coincides with that of the IL dictionary entry head.There are two kinds of entities in DIL: concepts and properties.Concepts are IL 'nouns' (objects) and IL 'verbs' (events).
IL 'adjectives','adverbs' and 'numerals' are represented by properties.
These are organ-ized as sets of property values indexed both by the name of the propertyset (e.g., 'color',  'time' or 'attitude') and by the individual values, tofacilitate retrieval.
Property values are applicable to specific concepttypes.
Their tokens do not appear on their own in IL texts, but only asfillers of slots in the frames for concept okens.
Thus, for example, 'red'will be a potential filler for the 'color' property of a token of every physi-cal object.
An explanation of the relationship between IL word types andtokens follows.The IL dictionary is organized as a set of entries (concept nodes)interconnected through a number of link types (properties).
However, thestructural backbone of the dictionary is the familiar isa hierarchy withproperty inheritance.
Note that most of the time the translation system willbe working with terminal nodes in this hierarchy.
But the nonterminalnodes play a special role in it.
By representing sets of entries, therebyproviding a link among a number of (related) concepts, they serve as the628basis for a variety of inference-making procedures.
Even more impor-tantly, these 'nonterminal entries' constitute, together with tile sets ofvarious property values, the schema of the dictionary, the set of terms thatarc used to describe the semantics of the rest of the dictionary entries.Just as all other nodes in the hierarchy, nonterminal nodesrepresent dictionary entries, which means that they can also have tokens.This device comes bandy when, on analyzing a segment of input, we conciude that a certain slot filler is unavailable in the text.
At the same time,if we know the identities of other slot fillers in the frame, we can come tocertain conclusions about the nature of an absentee.
For instance, if theAgent slot of a certain mental process is not filled, we, by consulting the'agent-of' slot of the nonterminal node 'mental-process', can infer (or,rather, abduce) that, whatever it is, it must be a 'creature'.
Thisknowledge helps in finding referents for anaphoric phenomena.The dictionary entries represent IL concept and property types; ILtexts consist of IL concept tokens (as well as \[L clause and sentencetokens).
Every token of an IL concept stands in the is-token-of relationshipto its corresponding type.
Structurally both IL concept ypes and IL con-cept tokens are represented as frames.
The frame for a type and theframe for a corresponding token are not identical in structure, though theintersection of their slot names is obviously non-zero.
One must note,however, that even in this case the semantics of the slots in the dictionaryframes is different from that of the corresponding slots in the text frame.Some of the slot names in the type frames refer to the paradigmaticrelationships of this concept ype with other concept ypes.
These are thetype parameters of an IL dictionary entry.
The rest of the information inan entry describes yntagmatic relationships that tokens of this particulartype have with tokens of other types on an IL text.
These are called tokenparcaneters.
Among the type parameters one finds the pointers in the isahierarchy, relationships like part-of, belangs-to, etc.The token-parameter slots in the dictionary entries contain eitherdefault values for the properties (the 'no-value' value is among the possi-ble default choices) or acceptable ranges of values, for the purpose of vali-dity testing.
IL concept okens, which are components of IL text, not itsdictionary, have their slots occupied by actual values of properties; ifinformation about a property is not forthcoming, then the default value (ifany) is inherited from the corresponding type representations.In what follows we will describe DIL, the IL dictionary language.We will do this by presenting the top levels of the isa hierarchy ofconcepts in our world and listing the frames for high-level nodes.
Next,we'll present examples of IL dictionary frames, including one completepath in the isa hierarchy, from the root to a terminal node.The actual contents of the tree are, as we already said, idiosyncratic:it may be overdeveloped in some of its branches and underdeveloped inmany others.
This state of affairs corresponds to the strategy of workingwithin a subworld.3.1 .
F rames .all :: = ('all'(' id' string)('properties' properties)('subworld' subworld*))This is the root of the isa hierarchy.
The three slots present here meanthat every node in the tree has an id; every node features ome properties(which exactly, will be shown in lower-level nodes); and every noderepresents a concept that belongs to one or more subworlds.event :: = ('event'('isa' all)('patient' object))At this level we meet the 'isa' slot for the first time.
This is the,pointer toa node's parent in the hierarchy.
Events divide into processes and states.The only overtly mentioned property common to all events is the concep-tual case of 'patient' (this reflects our opinion that in the sentence (1)John is not an agent, but rather a patient).
Note that 'patient' in DIL sub-sumes the semantics of 'beneficiary'.
(1) John is asleep.process :: = ('process'('isa' event)('is' process-sequence)('part-oP process*)('agent' creature)('object' objecO('instrument' objecO('source' object)('destination' object)('preconditions' state*)('effects' state*))In addition lo the conceptual case slots, the process frame contains infor-mation about preconditions and effects.
These are states that must typi-cally hold before and after the process takes place, respectively.
A pro-cess can also be a part of other processes.
Thus, for instance, move is apart of travel and, at the same time, of fetch or insert.
The 'is' slot of aprocess frame contains either tile constant primitive, if the process is notfurfller analyzable in DIL, or the description of file seqnence of processeswhich comprise the given process.
The process-sequence is a list of pro-cess names connected by tile operators equential, choice and shuffle.
Inother words, a process may be a sequence of subprocesses (sequential), achoice among several subprocesses (choice), a temporally unorderedsequence of subprocesses ( huffle) or any recursive combination of fileabove.
This treatment of processes i  inspired by Nirenburg et al, 1985.For the purposes of machine translation it seems unnecessary to introducea more involved t~nporal logic into consideration for the 'is' slot.physical-process :: = ('physical-process'('isa' process))mental-process :: = ('mental-process'('isa' 'process')('is' primitive)('agent' creature)('object' object\[ eveu0)Only creatures can be fillers for the 'agent' slot.
Mental objects classifyinto reaction processes (cf.
the English 'please' or 'like'), cognitionprocesses ('deduce') and perception processes ('see').
Objects of mentalprocesses can be either objects, as in (2) or events, as in (3).
(2) I know John(3) 1 know that John has traveled to Tibet.speech-process : := ('speech-process'('isa' process)('is' primitive)('agent' person)('patient' person* \[ organization*)('object' event)('source' 'agent')('destination' 'patient'))Speech processes are primitives.
The speech processes recognized by D1Linclude assertions (that further subdivide into definitions, opinions, facts,promises, etc.)
and requests (questions or commands).
The 'agent' slotfiller has file semantics of the speaker.
The 'patient' is the hearer.
Notethat there is a possibility for the hearer to be a group or an organization,as in (4).
(4) I promised the band to let them have a ten-minute break every hour.The 'agent' is the 'source' and the 'patient' is the 'destination' of aspeech process.state : := ('skate'('isa' event)('part-of' state*))The actant in states, which is the patient rather than the actor, is inheritedfrom the event frame.object : := ('object('isa' all)('part-of" object*)('consists-of' object*)('belongs-to' creature\[ organization)('object-of' (Mental-Process Speech-Process))('patient-of' event)('instrument-of' event)('source-of' event)('destination-of' event)('source-of' event))The '...-of' slots are used for consistency checks.3,2.
Properties.Property values are primitive concepts of IL used as values for slotsin concept frames.
We give here just an illustration of these.
Many moreexist and will be used in the imphrmentation.size-set :: = nil I infinitesimal \[...
I hugecolor-set :: = nil t black \] ... \[ whiteshape-set :: : nil \] flat I square \] spherical ...material-set :: = nil I (gold (specific-gravity 81) (unit-value 228))1 ...subworld-set :: = nil I computer-world \[ business-world \[ everyday worldboolean-set :: = nil I yes \] notexture-set :: = nil I smooth \] ... \[ roughproperties :: = ('properties'donne'('size' size set)('color' color-set)('shape' shape-set)('texture' texture-set)('belongs-to' creature \[ organization)('part-of' object I event)('consists-of' object \[ event)('power' real)('speed' real)('mass' real)('edibility' boolean-set)('made-of' material-set)...)3.3.
From the Root to a Leaf.A path of concept representations fi'om the root to a leaf node is presentedbelow.a l l ->  ob jec t -> pob jec t -> +a l ive -> c reature -> person->computer-userFrames for 'all' and 'object' see above.pobject :: = ('pobject'('isa' object)('object-off (+ (Take Put))('size' size-set)('shape' shape-set)('color' color-se0('mass' integer))The '+ '  sign in slots means all inherited information plus the contents oftile current slot.629+alive :: = (' +alive'('isa' pobject)('edibility' boolean-set)):feature :: = ('creature'('isa' +alive)('agent-off (Eat Ingest Drink Move Attack))('consists-off (Head Body))('object-of' (+ (Attack))('power' real)('speed' real))person :: = ('person'('isa' creature)('agent-off (+ (Take Put Find Speech-process Mental-Process)))('source-off Speech-process)('destination-off Speech-process)('consists-off (+ (Hand Foot ...)))('power' 50)('speed' 50)('mass' 55))computer-user :: = ('computer-user'('isa 'person)('agent-off (+ (Operate)))('subworld' computer-world))The complete frame of the leaf of this patb, 'computer-user', including allinherited slots and default values is listed below.
In reality frames like tMsdo not exist, because the tokens of this type do not contain all the possibleslot fillers.
(computer-user('isa' person)('agent-off (Operate Take Put Find Speech-process Mental-ProcessEat Ingest Drink Move Attack))('object-off (Find Mental-process Speech-process Attack Take Put))('destination-of' Speech-process)('source-off Speech-process)('consists-off (Hand Leg Head Body))('power' 50)('speed' 50)('mass' 55)('subworld' computer-world))4.
The Interl ingua Grammar .In the previous ection we dealt mostly with IL lexicon.
This sectionis devoted to the syntax of IL text.
Unlike a natural anguage text, an ILtext is not linear.
It is a (potentially) complex network of IL sentences,interconnected by \[L discourse markers.
An IL sentence consists of amain clause and a number of subordinate clauses, possibly interconnectedthrough discourse markers, with the speech act and focus informationadded.
IL clauses are the place where rite tokens of events are put into themodal and spatio-temporal context.
IL events are processes and states.
Itis in representations of the latter that tokens of IL 'verbs' and 'nouns'(retrieved from the dictionary and augmented by various property valuesidentified uring SL text analysis) meet for the first time.The above consideration led us to declare the language of the gram-mar a separate representation language, TIL.
There are important differ-ences between TIL and DIL.
At the same time there are regularcorrespondences.
The values of the properties in entity tokens typicallycorrespond to the data types listed as fillers for the corresponding slots inthe~ IL dictionary.
Thus, for instance, the color property slot in the \[L dic-tiohary frame for 'flower' can be occupied by a list (white yellow blue redpurple pink ...), the one for 'snow' will presumably contain only (white).At the same time, ' rose l l '  will have the value 'red' as the contents of its'color' slot.
This underscores the difference in the semantics of similarlynamed slots in DIL and T IE4.1.
Text.text :: ~ nil \]sentence I(discourse-structure-type ext text +)The above means that an IL text is either an empty string, a singlesentence, or a number of sentences interconnected through discoursestructure markers.4.2.
Sentence.sentence :: = ('sentence-token'('main-clanse' clause)('clauses' clause*)( ' i t '  string)('subworld' subworld)('modality' modality)('focus' focus)('speech-act' speech-act))Every sentence is declared to contain a speech act.
Thus, we pro-pose to represent (5) as (6), provided we can infer the identities of thespeaker and the hearer, as well as the identity of the process:(5) I 'd rather not do it.
(6) Boss ordered Employee X not to agree to the terms of Sales Offer Y.Both direct and indirect speech acts are represented with the help ofspeech process tokens.
With direct speech acts, the information to be putinto the sentence frame is present in the text, while with indirect speechacts it has to be inferred.Thematic information about the sentence is restricted to the valuesof the focus slot in the sentence frame.
This slot contains pointers to theentitles that constitute the 'given' and the 'new' in this particular sen-tence.
This entity can be a concept, a property of a concept, or an entireclause (cf.
4.11) The value of the modality slot for the IL sentence ischosen from the set of modalities (cf.
4.10).
The subworld slot is amarker that shows that the sentence belongs to a 'semantic field' related tocomputers.
In TRANSLATOR this is the designated topic for translation.
Inbroader environments he subworld information will be helpful to pruneunneeded inference paths.The fact that we allow only one clause to occupy the 'main-clause'slot of a sentence means that IL sentences cannot be compound (i.e., con-sist of a number of sentences connected through commas and coordinateconjunctions like the English 'and' ,  'or '  or 'but' .
The fact that otherclauses can be present means that it can be complex.
Sentences that arecompound in SL are translated as texts in IL, the representations of theimmediate constituents of die compound SL sentences being IL sentences.Appropriate discourse structure markers are used to represent the mean-ing carried by the conjunction.4,3.
Clause.
('clause-token'( ' i t '  string)('discourse-structure' discourse-structure)('focus' focus)('modality' modality)('time' time)('space' space)('event' event)('quantifier' quantifier2)('subworld' subworld)The major difference between the interlingua clauses and events isthat clauses contain information that actually appears in the input text(augmented by anaphora resolution), while events can be either containedin the input or inferred from it.A clause may be connected iscourse-wise not only with anotherclause but also with an object or an event, as well as with a sentence, aparagraph or even a whole text; also note that discourse structure assignsthe given clause as one of tile two arguments in the discourse structure;one clause can be an argument in more titan one discourse-structureexpression.6304.4.
Process.
(' physical-process -token'('id' string)('is-token-of' string)('agent' object-token)('object' object-token)('patient' object-token)('instrument' object-token)('source' object-token)('destination' object-token)('negation' negation)('quantifier' quantifier2)('phase' phase-set)('manner' manner-set)('space' space)('time' time)('snbworld' subworid))An actual process token is represented as follows:(move-token('id' move21)('is-token-oF move)('is' primitive)('agent' personl2)('object' person 12)('sonrce' (in house2))('destination' (in house3))('uegation' nil)('quantifier' nil)('phase' static)('manner' easily)('part-of' travel5)('time' (before 1700))('subworld' everyday-world))4.5.
State.
('state-token'('id' string)('is-token-of' string)('negation' negation)('quantifier' quantifier2)('patient" object-token)('phase' phase-set)('part-of' state-token*)('space' space)('time' time)('subworld' subwortd))Events in IL have a property of 'phase': they are either 'static','beginning' or 'end'.
This device is needed to represent changes of state.Changes of state are sometimes represented as a separate class ofprocesses.
The solution in IL may be more economical.4.6.
Object.A typical frame for an object token in TIL is as follows.
The'string' in the 'is-token-of' slot stands for the name of file correspondingobject type.
('object-token'('id' string)('is-token-of string)('subworld' subworld)('negation' negation)('quantifier' quantifier 1))An example object oken follows:('person-token'('id' person23)('is-token-of' person)('subworld' everyday-world)('negation' no)('quantifier' any)('power' 50)('speed' 50)('mass' 55))Note tim difference from DIL object fi'ames.
No '...-of' slots here.More emphasis on syutagmatic relationships and default overriding.4.7.
Time.time :: = nil I absolute-time 1 relative-tiumabsolute-time :: = ('time'('quantifier' quantifier2)('point' integer) I('interval-begin' integer)('interval-end' integer))relative-time :=  ('time'(temporal-operator event)('quantifier' quantifier2))temporal-operator :: = simultaneous I before I during\[ around I always I noneRelative time markers will predominantly appear in texts.4.8.
Space.space :: = nil I absolute-space I relative-spaceabsolute-space :: = ('space('quantifier' quantifier2)( 'coordinatel' real)('coordinate2' real)( 'coordiuateY real))relative-space :: = ('space'(spatial-operatm" object)('quantifier' quantifier2))spatial-operator :: = left-of I equal I between I in I above \]near I nolleAS in the case of'time, relative (topological) space specifications willpredominate in texts.4.9.
Slot Operators.quantifierl : := nil\] all\[ any I most I many t some \] few \[ 1 I 2 \[ ...quantifier2 :: = nil I hardly I half I almost I completely4.10.
Modality.modality :: = ('modality' modality-set)modality-set :: = real I desirable \] undesirable I conditional Ipossible I impossible I necessary \]nil4.11.
Thematic Informationfocus :: = ('given'('object' obj) l('event' event) I('clause' clause) I('quantifier' event-quantifier I quantifier))631(' new'('object' obj) I('event' even0 \[('clause' clause) \[('quantifier' event-quantifier I quantifier))The thematic information, together with the discourse structure andspeech act information, explicitly represents the rhetorical force of SLtexts.
The lack of this type of knowledge led many MT researchers todeclare that SL traces are necessary in the internal representation.
Theabove information inay prove sufficient for abandoning that requirement.4.12.
Discourse Structure.discourse-structure :: = (discourse-structure-type(clausel clause-n I sentence I text) I(clause-n I sentence I text clausel)* )discourse-structure-type :: = none l tempi equiv I +expan \[ -expan \[condi I + simil I -simil I choiceFor a more detailed description of the discourse cchesion markers inTRANSLATOR see Tucker et al, 1986.A clause may be connected iscourse-wise not only with anotherclause but also with a sentence, a paragraph or even a whole text; alsonote that discourse structure assigns the given clause as one of the twoarguments in the discourse structure; one clause can be an argument inmore than one discourse-structure expression.4.13.
Speech Act.speech-act :: = ('speech-act'('type' speech-process)('direct?'
yes I no)('speaker' object)('hearer' object+)('time' time)('space' space))Every IL sentence features a speech act, irrespective of whether itwas overtly mentioned in the SL text.
If it was, it is represented through atoken of a speech process.
Otherwise, it is inferred.
The time and.space ofthe speech act can be quite different from that of the proposition which isthe information transferred through this speech act.4.14.
Other Slots and Slot Fillers.negation :: = boolean-setreferent-set :: = nil I above \] below I object-tokenmanner-set :: = nil I difficulty I attitudedifficulty :: = nil I easily I --.
I difficultlyattitude :: = nil \[ caring \[ ...
I nonchalantlyphase-set :: = nil I static I beginning I end5.
ConclusionThis paper suggested an approach to conceptual representation f atext in a natural anguage for the purposes of translation.
An importantdistinction has been maintained between the representation f descriptionsand assertions.
We even suggested two different representation languages,DIL and TIL for the two tasks.The next task in the project is to actually implement the proceduresfor analysis, inference making and synthesis.
One crucial prerequisite forthat is the compilation of a substantial knowledge base (IL dictionary) forthe subworld of computers.
Now that the structure of IL has been speci-fied, we can actually do it.
Strategies and aids for uniform and computer-aided knowledge acquisition are being developed.Acknowledgement.
Theauthors wish to thank Irene Nirenburg for reading,discussing and criticizing the numerous successive versions of themanuscript.
Needless to say, it's we who are to blame for the remainingerrors.References.Brachman, R. and J. Schmoltze 1985.
An overview on the KL-ONEknowledge representation system.
Cognitive Science, vol.
9, issue 2.Carbonell, J. and M. Tomita 1985.
New approaches to machine transla-tion.
In: S. Nirenburg (ed.
).Johnson, R. and P. Whitelock 1985.
Machine translation as an experttask.
In: S. Nirenburg (ed.
).Nirenburg, S.
(ed.
), Proceedings of the Conference on Theoretical andMethodological Issues in Machine Translation.
Hamilton, NY, August1985.Nirenburg, S. and J. Brolio (in preparation).
A parsing strategy forknowledge-based machine translation.Nirenburg, S., V. Raskin and A. Tucker, Interlingua design in TRANSLA-TOR.
In: S. Nirenburg (ed.
)Tucker, A., S. Nirenburg and V. Raskin, Discourse, cohesion andsemantics of expository text (this volume).632
