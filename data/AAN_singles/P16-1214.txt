Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 2265?2275,Berlin, Germany, August 7-12, 2016.c?2016 Association for Computational LinguisticsOn Approximately Searching for Similar Word EmbeddingsKohei Sugawara Hayato Kobayashi Masajiro IwasakiYahoo Japan Corporation1-3 Kioicho, Chiyoda-ku, Tokyo 102-8282, Japan{ksugawar, hakobaya, miwasaki}@yahoo-corp.jpAbstractWe discuss an approximate similaritysearch for word embeddings, which isan operation to approximately find em-beddings close to a given vector.
Wecompared several metric-based search al-gorithms with hash-, tree-, and graph-based indexing from different aspects.Our experimental results showed that agraph-based indexing exhibits robust per-formance and additionally provided use-ful information, e.g., vector normalizationachieves an efficient search with cosinesimilarity.1 IntroductionAn embedding or distributed representation of aword is a real-valued vector that represents its?meaning?
on the basis of distributional seman-tics, where the meaning of a word is determinedby its context or surrounding words.
For a givenmeaning space, searching for similar embeddingsis one of the most basic operations in natural lan-guage processing and can be applied to various ap-plications, e.g., extracting synonyms, inferring themeanings of polysemous words, aligning wordsin two sentences in different languages, solvinganalogical reasoning questions, and searching fordocuments related to a query.In this paper, we address how to quickly andaccurately find similar embeddings in a continu-ous space for such applications.
This is impor-tant from a practical standpoint, e.g., when wewant to develop a real-time query expansion sys-tem on a search engine on the basis of an embed-ding similarity.
A key difference from the existingwork is that embeddings are not high-dimensionalsparse (traditional count) vectors, but (relatively)low-dimensional dense vectors.
We therefore needto use approximate search methods instead ofinverted-index-based methods (Zobel and Moffat,2006).
Three types of indexing are generally usedin approximate similarity search: hash-, tree-, andgraph-based indexing.
Hash-based indexing is themost common in natural language processing dueto its simplicity, while tree/graph-based indexingis preferred in image processing because of its per-formance.
We compare several algorithms withthese three indexing types and clarify which al-gorithm is most effective for similarity search forword embeddings from different aspects.To the best of our knowledge, no other studyhas compared approximate similarity search meth-ods focusing on neural word embeddings.
Al-though one study has compared similarity searchmethods for (count-based) vectors on the basisof distributional semantics (Gorman and Curran,2006), our study advances this topic and makesthe following contributions: (a) we focus on neu-ral word embeddings learned by a recently devel-oped skip-gram model (Mikolov, 2013), (b) showthat a graph-based search method clearly performsbetter than the best one reported in the Gormanand Curran study from different aspects, and (c)report the useful facts that normalizing vectors canachieve an effective search with cosine similarity,the search performance is more strongly related toa learning model of embeddings than its trainingdata, the distribution shape of embeddings is a keyfactor relating to the search performance, and thefinal performance of a target application can be fardifferent from the search performance.
We believethat our timely results can lead to the practical useof embeddings, especially for real-time applica-tions in the real world.The rest of the paper is organized as follows.In Section 2, we briefly survey hash-, tree-, andgraph-based indexing methods for achieving sim-ilarity search in a metric space.
In Section 3, we2265compare several similarity search algorithms fromdifferent aspects and discuss the results.
Finally,Section 4 concludes the paper.2 Similarity SearchWe briefly survey similarity search algorithms forreal-valued vectors, where we focus on approxi-mate algorithms that can deal with large scale data.In fact, word embeddings are usually trained on avery large corpus.
For example, well known pre-trained word embeddings (Mikolov, 2013) weretrained on the Google News dataset and consist ofabout 1,000 billion words with 300-dimensionalreal-valued vectors.
Search tasks on large-scalereal-valued vectors have been more actively stud-ied in the image processing field than in the natu-ral language processing field, since such tasks nat-urally correspond to searching for similar imageswith their feature vectors.Many similarity search algorithms have beendeveloped and are classified roughly into three in-dexing types: hash-, tree-, and graph-based.
Innatural language processing, hash-based indexingseems to be preferred because of its simplicityand ease of treating both sparse and dense vec-tors, while in image processing, tree- and graph-based indexing are preferred because of their per-formance and flexibility in adjusting parameters.We explain these three indexing types in more de-tail below.2.1 Hash-based IndexingHash-based indexing is a method to reduce thedimensionality of high-dimensional spaces by us-ing some hash functions so that we can efficientlysearch in the reduced space.
Locality-sensitivehashing (LSH) (Gionis et al, 1999) is a widelyused hash-based indexing algorithm, which mapssimilar vectors to the same hash values with highprobability by using multiple hash functions.There are many hash-based indexing algorithmsthat extend LSH for different metric spaces.
Dataret al (2004) applied the LSH scheme to Lpspaces,or Lebesgue spaces, and experimentally showedthat it outperformed the existing methods for thecase of p = 2.
Weiss et al (2009) showedthat the problem of finding the best hash functionis closely related to the problem of graph parti-tioning and proposed an efficient approximate al-gorithm by reducing the problem to calculatingthresholded eigenvectors of the graph Laplacian.In this paper, we focus on approximation of k-nearest neighbors and are not concerned about thehash-based indexing algorithms, since they are ba-sically designed for finding (not k-nearest) neigh-bors within a fixed radius of a given point, i.e., aso-called radius search.2.2 Tree-based IndexingTree-based indexing is used to recursively dividethe entire search space into hierarchical subspaces,where the subspaces are not necessarily disjointed,so that the search space forms a tree structure.Given a search query, we can efficiently find thesubspaces including the query by descending fromthe root note to the leaf nodes in the tree structureand then obtain its search results by scanning onlyneighbors belonging to the subspaces.
Note that incontrast to the hash-based indexing, we can easilyextend the size of search results or the number ofnearest neighbors by ascending to the parent sub-spaces.Arya et al (1998) proposed the balanced box-decomposition tree (BBD-tree) as a variant of thekd-tree (Bentley, 1975) for approximately search-ing for similar vectors on the basis of Minkowskimetrics, i.e., in Lpspaces when p ?
1.
Fast li-brary for approximate nearest neighbors (FLANN)(Muja and Lowe, 2008) is an open-source li-brary for approximate similarity search.
FLANNautomatically determines the optimal one fromthree indices: a randomized kd-tree where multi-ple kd-trees are searched in parallel (Silpa-Ananand Hartley, 2008), a k-means tree that is con-structed by hierarchical k-means partitioning (Nis-ter and Stewenius, 2006), and a mix of both kd-tree and k-means tree.
Spatial approximation sam-ple hierarchy (SASH) (Houle and Sakuma, 2005)achieves approximate search with multiple hierar-chical structures created by random sampling.
Ac-cording to the results in the previous study (Gor-man and Curran, 2006), SASH performed the bestfor vectors on the basis of distributional semantics,and its performance surpassed that of LSH.2.3 Graph-based IndexingGraph-based indexing is a method to approxi-mately find nearest neighbors by using a neigh-borhood graph, where each node is connected toits nearest neighbors calculated on the basis of acertain metric.
A simple search procedure for agiven query is achieved as follows.
An arbitrarynode in the graph is selected as a candidate for the2266true nearest neighbor.
In the process of checkingthe nearest neighbor of the candidate, if the queryis closer to the neighbor than the candidate, thecandidate is replaced by the neighbor.
Otherwise,the search procedure terminates by returning thecurrent candidate as the nearest neighbor of thequery.
This procedure can be regarded as a best-first search, and the result is an approximation ofthat of an exact search.Sebastian and Kimia (2002) first used a k-nearest neighbor graph (KNNG) as a search in-dex, and Hajebi et al (2011) improved the searchperformance by performing hill-climbing startingfrom a randomly sampled node of a KNNG.
Theirexperimental results with image features, i.e.,scale invariant feature transform (SIFT), showedthat a similarity search based on a KNNG outper-forms randomized kd-trees and LSH.
Although thebrute force construction cost of a KNNG drasti-cally increases as the number of nodes increasesbecause the construction procedure needs to cal-culate the nearest neighbors for each node, wecan efficiently approximate a KNNG (so-calledANNG) by incrementally constructing an ANNGwith approximate k-nearest neighbors calculatedon a partially constructed ANNG.
Neighborhoodgraph and tree for indexing (NGT) (Iwasaki, 2015)is a library released from Yahoo!
JAPAN thatachieves a similarity search on an ANNG; it hasalready been applied to several services.3 ExperimentsIn this paper, we focused on the pure similaritysearch task of word embeddings rather than com-plex application tasks for avoiding extraneous fac-tors, since many practical tasks can be formulatedas k-nearest neighbor search.
For example, assum-ing search engines, we can formalize query expan-sion, term deletion, and misspelling correction asfinding frequent similar words, infrequent similarwords, and similar words with different spellings,respectively.We chose FLANN from the tree-based meth-ods and NGT from the graph-based methods sincethey are expected to be suitable for practical use.FLANN and NGT are compared with SASH,which was the best method reported in a previousstudy (Gorman and Curran, 2006).
In addition,we consider LSH only for confirmation, since itis widely used in natural language processing, al-though several studies have reported that LSH per-formed worse than SASH and FLANN.
We usedthe E2LSH package (Andoni, 2004), which in-cludes an implementation of a practical LSH al-gorithm.3.1 Problem DefinitionThe purpose of an approximate similarity searchis to quickly and accurately find vectors close to agiven vector.
We formulate this task as a problemto find k-nearest neighbors as follows.
Let (X, d)be a metric space.
We denote by Nk(x, d) the setof k-nearest neighbors of a vector x ?
X withrespect to a metric d. Formally, the following con-dition holds: ?y ?
Nk(x, d), ?z ?
X \ Nk(x, d),d(x, y) ?
d(x, z).
Our goal with this problem isto approximate Nk(x, d) for a given vector x.We calculate the precision of an approximatesearch method A using the so-called precision atk or P@k, which is a widely used evaluation mea-sure in information retrieval.
The precision atk of A is defined as |Nk(x, d) ?
?Nk(x,A)|/k,where?Nk(x,A) is the set of approximate k-nearest neighbors of a vector x calculated by A.Since we use the same size k for an exact setNk(x, d) and its approximate set?Nk(x,A), thereis no trade-off between precision and recall.3.2 Basic SettingsThis section describes the basic settings in our ex-periments, where we changed a specific setting(e.g., number of dimensions) in order to evaluatethe performance in each experiment.
All the ex-periments were conducted on machines with twoXeon L5630 2.13-GHz processors and 24 GB ofmain memory running Linux operating systems.We prepared 200-dimensional word embed-dings learned from English Wikipedia in Febru-ary 2015, which contains about 3 billion sentencesspanning about 2 million words and 35 billiontokens, after preprocessing with the widely usedscript (Mahoney, 2011), which was also used forthe word2vec demo (Mikolov, 2013).
We used theskip-gram learning model with hierarchical soft-max training in the word2vec tool, where the win-dow size is 5, and the down-sampling parameter is0.001.We constructed and evaluated the index by di-viding the learned embeddings into 2 million em-beddings for training and 1,000 embeddings fortesting by random sampling, after normalizingthem so that the norm of each embedding was one.We built the search index of each search method2267for the training set on the basis of the Euclideandistance.
The Euclidean distance of normalizedvectors is closely related to the cosine similarity,as described later.
We prepared the top-10 (exact)nearest neighbors in the training set correspondingto each embedding in the testing set and plotted theaverage precision at 10 over the test set versus itscomputation time (log-scale), by changing the pa-rameter for precision of each method as describedbelow.
Note that it is difficult to compare differentalgorithms in terms of either precision or computa-tion time, since there is a trade-off between preci-sion and computation time in approximate search.We set the parameters of the three search meth-ods SASH, FLANN, and NGT as follows.
Wedetermined stable parameters for indexing usinggrid search and changed an appropriate parameterthat affected the accuracy when evaluating eachmethod.
For confirmation, we added LSH in thefirst experiment but did not use it in the other ex-periments since it clearly performs worse than theother methods.SASH We set the maximum number (p) of par-ents per node to 6 for indexing and changedthe scale factor for searching1.FLANN We set the target precision to 0.8, thebuild weight to 0, and the sample fraction to0.01 for indexing, and we changed the num-ber of features to be checked in the search2.The k-means index was always selected asthe optimal index in our experiments.NGT We set the edge number (E) to 10 for in-dexing and changed the search range (e) forsearching.LSH We set the success probability (1 ?
?)
to0.9 and changed the radius (R) for indexing.Note that there are no parameters for search-ing since LSH was developed to reduce di-mensionality, and we need to construct mul-tiple indices for adjusting its accuracy.1The scale factor is implemented as ?scaleFactor?
in thesource code (Houle, 2005), although there is no descriptionin the original paper (Houle and Sakuma, 2005).2Since FLANN is a library integrating several algorithms,the parameters can be described only by variables in thesource code (Muja and Lowe, 2008).
The target precision,build weight, and sample fraction for auto-tuned indexingare implemented as ?target precision?, ?build weight?, and?sample fraction?
in the structure ?AutotunedIndexParams?,respectively.
The number of features is implemented as?checks?
in the structure ?SearchParams?.3.3 ResultsIn this section we report the results of the perfor-mance comparison of SASH, FLANN, and NGTfrom the following different aspects: the distancefunction for indexing, the number of dimensionsof embeddings, the number of neighbors to beevaluated, the size of a training set for indexing,the learning model/data used for embeddings, andthe target task to be solved.3.3.1 Distance Function for IndexingWe evaluated the performance by changing thedistance function for indexing.
In natural languageprocessing, cosine similarity cos(x, y) =x?y?x?
?y?of two vectors x and y is widely used from a prac-tical perspective, and cosine distance dcos(x, y) =1 ?
cos(x, y) as its complement seems to be ap-propriate for the distance function for indexing.Unfortunately, however, the cosine distance is notstrictly metric but semimetric since the triangle in-equality is not satisfied.
Thus, we cannot directlyuse the cosine distance because the triangle in-equality is a key element for efficient indexing ina metric space.
In this paper, we use two alterna-tives: normalized and angular distances.The former is the Euclidean distance af-ter normalizing vectors, i.e., dnorm(x, y) =deuc(x?x?,y?y?
), where deuc(x, y) = ?x ?
y?.
Theset of k-nearest neighbors by dnormis theoreti-cally the same as that by dcos, i.e., Nk(x, dnorm) =Nk(x, dcos), since dnorm(x, y)2=?x?2?x?2+?y?2?y?2?2x?x?
?y?y?= 2dcos(x, y).
The latter is theangle between two vectors, i.e., darc(x, y) =arccos(cos(x, y)).
The set of k-nearest neigh-bors by darcis also the same as that by dcos,i.e., Nk(x, darc) = Nk(x, dcos), since arccos is amonotone decreasing function.
Note that darcisnot strictly metric, but it satisfies the triangle in-equality, i.e., pseudometric.Figure 1 plots the performances of SASH,FLANN, and NGT using the normalized, angular,and ordinal Euclidean distances.
Higher precisionat the same computational time (upper left line) in-dicates a better result.
The graphs show that NGTperformed the best for the normalized distance (a),while SASH performed the best for the angulardistance (b).
This large difference is caused by thelong computational time of darc.
Because we onlywant the maximum performance in graphs (a) and(b) for each method, we used only the normalizeddistance in the later experiments since the perfor-2268100101102103Time [msec]0.00.20.40.60.81.0PrecisionSASH (norm)FLANN (norm)NGT (norm)LSH(a) Normalized100101102103Time [msec]0.00.20.40.60.81.0PrecisionSASH (angle)FLANN (angle)NGT (angle)(b) Angular100101102103Time [msec]0.00.20.40.60.81.0PrecisionSASH (euc)FLANN (euc)NGT (euc)(c) EuclideanFigure 1: Precision versus computation time of SASH, FLANN, and NGT using the normalized, angular,and Euclidean distances.1.5 1.0 0.5 0.0 0.5 1.0 1.51.51.00.50.00.51.01.5(a) Normalized8 6 4 2 0 2 4 66420246(b) Un-normalizedFigure 2: 2D visualization of normalized andun-normalized embeddings by multi-dimensionalscaling.mance of SASH in graph (a) is almost the sameas that in (b).
For confirmation, we added the re-sult of LSH in graph (a) only.
The graph clearlyindicates that the performance of LSH is very loweven for neural word embeddings, which supportsthe results in the previous study (Gorman and Cur-ran, 2006), and therefore we did not use LSH inthe later experiments.Graph (c) shows that the performance using theEuclidean distance has a similar tendency to thatusing the normalized distance, but its computa-tion time is much worse than that using the nor-malized distance.
The reason for this is that itis essentially difficult to search for distant vec-tors in a metric-based index, and normalizationcan reduce the number of distant embeddings byaligning them on a hypersphere.
In fact, wecan confirm that the number of distant embed-dings was reduced after normalization accordingto Figure 2, which visualizes 1,000 embeddingsbefore/after normalization on a two-dimensionalspace by multi-dimensional scaling (MDS) (Borgand Groenen, 2005), where the radius of each cir-cle represents the search time of the correspond-ing embedding calculated by NGT.
MDS is a di-mensionality reduction method to place each pointin a low-dimensional space such that the distancesbetween any two points are preserved as much aspossible.
Note that the scale of graph (b) is aboutDistance Method Time (min)NormalizedSASH 74.6FLANN 56.5NGT 33.9LSH 44.6AngularSASH 252.4FLANN 654.9NGT 155.4EuclideanSASH 58.1FLANN 20.2NGT 83.0Table 1: Indexing time of SASH, FLANN, NGT,and LSH using the normalized, angular, Euclideandistance functions.five times larger than that of graph (a).
This alsosuggests that the normalized distance should bepreferred even when it has almost the same pre-cision as the Euclidean distance.Table 1 lists the indexing times of SASH,FLANN, and NGT on the basis of the normal-ized, angular, and Euclidean distances, where LSHis also added only in the result of the normal-ized distance.
The table indicates that NGT per-formed the best for the normalized and angulardistances, while FLANN performed the best forthe Euclidean distance.
However, all methodsseem to be suitable for practical use in terms ofindexing because we can create an index of En-glishWikipedia embeddings in several hours (onlyonce).
The large indexing time with the angulardistance also supports our suggestion that the nor-malized distance should be used.3.3.2 Number of Dimensions of EmbeddingsWe also evaluated the performances by changingthe number of dimensions of embeddings.
Sincethe optimal number of dimensions should dependon the tasks, we wanted to see how the search2269100101102103Time [msec]0.50.60.70.80.91.0PrecisionSASH (100 dim)FLANN (100 dim)NGT (100 dim)(a) 100 dimensions100101102103Time [msec]0.50.60.70.80.91.0PrecisionSASH (200 dim)FLANN (200 dim)NGT (200 dim)(b) 200 dimensions100101102103Time [msec]0.50.60.70.80.91.0PrecisionSASH (300 dim)FLANN (300 dim)NGT (300 dim)(c) 300 dimensionsFigure 3: Precision versus computation time of SASH, FLANN, and NGT using 100-, 200-, and 300-dimensional embeddings.100101102103Time [msec]0.20.30.40.50.60.70.80.91.0PrecisionSASH (top 10)FLANN (top 10)NGT (top 10)(a) P@10100101102103Time [msec]0.20.30.40.50.60.70.80.91.0PrecisionSASH (top 100)FLANN (top 100)NGT (top 100)(b) P@100100101102103Time [msec]0.20.30.40.50.60.70.80.91.0PrecisionSASH (top 200)FLANN (top 200)NGT (top 200)(c) P@200Figure 4: Precision versus computation time of SASH, FLANN, and NGT using precision at 10, 100,and 200.methods performed when the number of dimen-sions varied, while the number of dimensions ofimage features is usually fixed.
For example, SIFTfeatures (Lowe, 1999) are represented as 128-dimensional vectors.Figure 3 plots the performances of SASH,FLANN, and NGT using 100-, 200-, and 300-dimensional embeddings.
The graphs indicate thatNGT always performed the best.
SASH is ex-pected to perform well when the number of di-mensions is large, since FLANN and NGT per-form worse as the number of dimensions be-comes larger.
However, NGT would be a bet-ter choice since most existing pre-trained embed-dings (Turian et al, 2010; Mikolov, 2013; Pen-nington et al, 2014a) have a few hundred dimen-sions.3.3.3 Number of Neighbors to Be EvaluatedWe also conducted performance evaluations bychanging the number k of neighbors, i.e., the sizeof the set of k-nearest neighbors, to calculate theprecision at k. We need to change the number kon demand from target applications.
For exam-ple, we may use small numbers for extracting syn-onyms and large numbers for selecting candidatesfor news recommendations, where they will be re-duced via another sophisticated selection process.The performances of SASH, FLANN, and NGTusing 10-, 100-, and 200-nearest neighbors areshown in Figure 4.
The graphs indicate that NGTperformed the best in this measure also.
With200-nearest neighbors, the performance of SASHdropped sharply, which means that SASH is notrobust for the indexing parameter.
One possi-ble reason is that searching for relatively distantneighbors is difficult for a tree-based index, wherethe divided subspaces are not appropriate.3.3.4 Size of Training Set for IndexingWe conducted further performance evaluations bychanging the size of a training set, i.e., the num-ber of embeddings used for indexing.
We wantedto know how the search methods performed withdifferent sized search indices since a large searchindex will bring about extra operational costs in apractical sense, and a small search index is pre-ferred for a small application system.Figure 5 plots the performances of SASH,FLANN, and NGT using 100K, 1M, and 2M train-ing sets, which were randomly sampled so thateach training set can be virtually regarded as em-beddings with a vocabulary of its training set size.The graphs indicate that NGT always performedthe best for all search index sizes.
Moreover, wecan see that all results for each method have asimilar tendency.
This fact implies that a distri-bution of embeddings is related to the search per-2270100101102103Time [msec]0.50.60.70.80.91.0PrecisionSASH (size 100K)FLANN (size 100K)NGT (size 100K)(a) 100K100101102103Time [msec]0.50.60.70.80.91.0PrecisionSASH (size 1M)FLANN (size 1M)NGT (size 1M)(b) 1M100101102103Time [msec]0.50.60.70.80.91.0PrecisionSASH (size 2M)FLANN (size 2M)NGT (size 2M)(c) 2MFigure 5: Precision versus computation time of SASH, FLANN, and NGT using 100K, 1M, and 2Mtraining sets.100101102103Time [msec]0.30.40.50.60.70.80.91.0PrecisionSASH (GN)FLANN (GN)NGT (GN)(a) GN100101102103Time [msec]0.30.40.50.60.70.80.91.0PrecisionforsearchSASH (CW)FLANN (CW)NGT (CW)(b) CW100101102103Time [msec]0.30.40.50.60.70.80.91.0PrecisionSASH (GV)FLANN (GV)NGT (GV)(c) GVFigure 6: Precision versus computation time of SASH, FLANN, and NGT using GN, CW, and GVembeddings.0 50 100 150 200 250 300Dimension?0.6?0.4?0.20.00.20.40.6Kurtosis(a) GN0 50 100 150 200 250 300Dimension?20246810Kurtosis(b) GVFigure 7: Kurtosis of each dimension of GN andGV embeddings.formance, and the next section will actually con-firm the same property on another dataset used forlearning embeddings.3.3.5 Model and Data Used for EmbeddingsWe also conducted performance evaluations bychanging the learning models and training data forembeddings.
We used the following three pre-trained embeddings to investigate the performancewhen changing the data distributions used for in-dexing.GN 300-dimensional embeddings (Mikolov,2013) learned by the skip-gram model withnegative sampling (Mikolov et al, 2013a)using part of the Google News dataset, whichcontains about 3 million words and phrasesand 100 billion tokens.CW 200-dimensional embeddings (Turian et al,2010) learned by deep neural networks (Col-lobert and Weston, 2008) using the RCV1corpus, which contains about 269 thousandwords and 63 million tokens.GV 300-dimensional embeddings (Pennington etal., 2014a) learned by the global vectorsfor word representation (GloVe) model (Pen-nington et al, 2014b) using Common Crawlcorpora, which contain about 2 million wordsand 42 billion tokens.The performances of SASH, FLANN, and NGTusing GN, CW, and GV embeddings are plotted inFigure 6.
The graphs indicate that NGT consis-tently performed the best over different learningmodels.
A comparison of the results using GN em-beddings and the previous results using Wikipediaembeddings reveals that they had almost the sametendency.
This fast can be acceptable assuming anempirical rule that a corpus follows a power lawor Zipf?s law.
On the other hand, graphs (a), (b),and (c) have quite different tendencies.
Specifi-cally, all search methods compete with each otherfor CW embeddings, while they could not performwell for GV embeddings.
This implies that theperformance of a search method can be affectedby learning models rather than training sets usedfor embeddings.2271100101102103Time [msec]0.40.50.60.70.80.91.0PrecisionforanalogySASH (sem)FLANN (sem)NGT (sem)(a) Semantic analogy100101102103Time [msec]0.40.50.60.70.80.91.0PrecisionforanalogySASH (syn)FLANN (syn)NGT (syn)(b) Syntactic analogy100101102103Time [msec]0.40.50.60.70.80.91.0PrecisionforsearchSASH (search)FLANN (search)NGT (search)(c) Similarity searchFigure 8: Precision versus computation time of SASH, FLANN, and NGT using the semantic analogy,syntactic analogy, and similarity search tasks.0.5 0.6 0.7 0.8 0.9 1.0Precision for search0.40.50.60.70.8PrecisionforanalogySASHFLANNNGT(a) Semantic analogy0.5 0.6 0.7 0.8 0.9 1.0Precision for search0.40.50.60.70.8PrecisionforanalogySASHFLANNNGT(b) Syntactic analogyFigure 9: Precision of the semantic and syntacticanalogy tasks versus that of the similarity searchtask.We further investigated why GV embeddingsdeteriorate the search performance.
Table 2 liststhe variance and kurtosis of Wikipedia, GN, CW,and GV embeddings for clarifying the variation ordispersion of these distributions.
Kurtosis K(X)is a measure of the ?tailedness?
of the probabilitydistribution of a random variable X , defined byK(X) = ?4/?22?3, where ?nrepresents the n-thcentral moment, i.e., E[(X ?
E[X])n].
The con-stant ?3?
in the above definition sets the kurtosisof a normal distribution to 0.
The table clearly in-dicates that GV has a heavy tailed distribution inaccordance with the kurtosis values, although allvariances have almost the same value.
In fact, GVhas several high kurtosis peaks, while GN has onlysmall values, according to Figure 7, which visual-izes the kurtosis of each dimension.
Note that they-axis scale of graph (b) is about 20 times largerthan that of graph (a).
Because distant points ina metric space tend to deteriorate the performancein a search process, we need to pay attention to thedistribution shape of embeddings as well as theirquality, so as to efficiently search for similar em-beddings.3.3.6 Target Task to Be SolvedWe finally evaluated the performance by changingthe target task to be solved by using embeddings.We wanted to know how the search methods per-EW GN CW GVVariance 0.0033 0.0033 0.0050 0.0033Kurtosis 0.034 -0.026 -0.075 0.57Table 2: Variance and kurtosis of EnglishWikipedia (EW), GN, CW, and GV embeddings.formed with different task settings since even if theprecision of the search task is not good, it might besufficient for another task to be solved on the ba-sis of similarity search.
In this section, we addresswell known analogy tasks (Mikolov et al, 2013a),where semantic and syntactic analogy questionsare considered, e.g., ?Which word corresponds toJapan when Paris corresponds to France?
?, theanswer being ?Tokyo?.
These questions can besolved by searching for the nearest neighbors ofanalogical vectors generated via arithmetic op-erations., i.e., vec(?Paris?)
?
vec(?France?)
+vec(?Japan?
), where vec(w) represents an embed-ding of word w.Figure 8 plots the performances of SASH,FLANN, and NGT using the semantic and syntac-tic analogy tasks as well as that using the similaritysearch task (in Figure 1), which is added for com-parison.
The graphs indicate that NGT clearly per-formed the best even in the analogy tasks.
Com-paring the curves of NGT, we can see that those ingraphs (a) and (b) are quite different from that in(c), and the analogy precisions can maintain theirquality, even when the search precision is about0.9.For further analysis, we aligned the precisionsof the search task with those of the analogy tasksin Figure 9, where each point represents the resultscalculated with the same parameters.
The dottedline without markers in each graph is a line fromthe origin (0, 0) to the point where the analogyprecision is maximum when the search precision2272100101102103Time [msec]0.00.20.40.60.81.0PrecisionforanalogySASH (analogy GN)FLANN (analogy GN)NGT (analogy GN)(a) Analogy by GN100101102103Time [msec]0.00.20.40.60.81.0PrecisionforanalogySASH (analogy CW)FLANN (analogy CW)NGT (analogy CW)(b) Analogy by CW100101102103Time [msec]0.00.20.40.60.81.0PrecisionforanalogySASH (analogy GV)FLANN (analogy GV)NGT (analogy GV)(c) Analogy by GVFigure 10: Precision versus computation time of SASH, FLANN, and NGT for the analogy task (includ-ing both semantic and syntactic questions) using GN, CW, and GV embeddings.is 1.0, and thus it naively estimates a deteriora-tion rate of the analogy precision on the basis ofthe search precision.
The graphs indicate that thesearch precision can be far different from the es-timated precision of another task.
In fact, whenthe search precision by NGT is 0.8 in Figure 9 (a),the analogy precision 0.75 is unexpectedly high,since the naive estimation is 0.64 calculated by themaximum analogy precision 0.8 times the searchprecision 0.8.
This suggests that it is a good ideato check the final performance of a target applica-tion, although the search performance is valuablefrom a standpoint of general versatility.Finally, we conducted performance evaluationsfor the analogy task instead of the search task bychanging the learning models and training data forembeddings as in Section 3.3.5, in order to sup-port the robustness of NGT even for an opera-tion more sophisticated than just finding similarwords.
Figure 10 plots the performances of SASH,FLANN, and NGT for the analogy task includingboth semantic and syntactic questions using GN,CW, and GV embeddings.
The graphs indicatethat NGT performed the best over different learn-ing models even for the analogy task.
Althoughthe precisions of CW embeddings in graph (b) arevery low, the result seems to be acceptable accord-ing to the previous work (Mikolov et al, 2013b),which reported that the precisions of a syntacticanalogy task using CW embeddings in similar set-tings were at most 5 % (0.05).
The results of GNand GV embeddings in graphs (a) and (c) showa similar tendency to those of Wikipedia embed-dings in Figure 8.
However, the overall perfor-mance for the analogy task using GV embeddingsis unexpectedly high, contrary to the results forthe search task in Figure 6 (c).
One of the rea-sons is that arithmetic operations for solving anal-ogy questions can reduce kurtosis peaks, althoughwe omitted the kurtosis results due to space limi-tation.
This fact also supports our finding that dis-tant points in a metric space tend to deteriorate theperformance in a search process.4 ConclusionWe investigated approximate similarity search forword embeddings.
We compared three meth-ods: a graph-based method (NGT), a tree-basedmethod (FLANN), the SASH method, which wasreported to have the best performance in a previ-ous study (Gorman and Curran, 2006).
The resultsof experiments we conducted from various aspectsindicated that NGT generally performed the bestand that the distribution shape of embeddings is akey factor relating to the search performance.
Ourfuture research includes improving the search per-formance for embeddings with heavy-tailed dis-tributions and creating embeddings that can keepboth task quality and search performance high.We will release the source code used for ourcomparative experiments from the NGT page(Iwasaki, 2015).
Since we need to implementadditional glue codes for running FLANN andSASH, our code would be useful for researcherswho want to compare their results with ours.AcknowledgmentsWe would like to thank the anonymous reviewersfor giving us helpful comments.ReferencesAlexandr Andoni.
2004.
LSH Algorithm and Imple-mentation (E2LSH).
http://web.mit.edu/andoni/www/LSH/.Sunil Arya, David M. Mount, Nathan S. Netanyahu,Ruth Silverman, and Angela Y. Wu.
1998.
An Op-timal Algorithm for Approximate Nearest Neighbor2273Searching Fixed Dimensions.
Journal of the ACM(JACM), 45(6):891?923.Jon Louis Bentley.
1975.
Multidimensional BinarySearch Trees Used for Associative Searching.
Com-munication of the ACM, 18(9):509?517.Ingwer Borg and Patrick J. F. Groenen.
2005.
ModernMultidimensional Scaling.
Springer Series in Statis-tics.
Springer-Verlag New York.Ronan Collobert and Jason Weston.
2008.
A Uni-fied Architecture for Natural Language Processing:Deep Neural Networks with Multitask Learning.
InProceedings of the 25th International Conferenceon Machine Learning (ICML 2008), pages 160?167.ACM.Mayur Datar, Nicole Immorlica, Piotr Indyk, and Va-hab S. Mirrokni.
2004.
Locality-sensitive HashingScheme Based on P-stable Distributions.
In Pro-ceedings of the 20th Annual Symposium on Com-putational Geometry (SCG 2004), pages 253?262.ACM.Aristides Gionis, Piotr Indyk, and Rajeev Motwani.1999.
Similarity Search in High Dimensions viaHashing.
In Proceedings of the 25th InternationalConference on Very Large Data Bases (VLDB 2009),pages 518?529.
Morgan Kaufmann Publishers Inc.James Gorman and James R. Curran.
2006.
Scal-ing Distributional Similarity to Large Corpora.
InProceedings of the 21st International Conferenceon Computational Linguistics and the 44th AnnualMeeting of the Association for Computational Lin-guistics (COLING-ACL 2006), pages 361?368.
As-sociation for Computational Linguistics.Kiana Hajebi, Yasin Abbasi-Yadkori, Hossein Shah-bazi, and Hong Zhang.
2011.
Fast ApproximateNearest-neighbor Search with K-nearest NeighborGraph.
In Proceedings of the 22nd InternationalJoint Conference on Artificial Intelligence (IJCAI2011), pages 1312?1317.
AAAI Press.Michael E. Houle and Jun Sakuma.
2005.
FastApproximate Similarity Search in Extremely High-Dimensional Data Sets.
In Proceedings of the21st International Conference on Data Engineering(ICDE 2005), pages 619?630.
IEEE Computer So-ciety.Michael E. Houle.
2005.
The SASH Page.http://research.nii.ac.jp/%7Emeh/sash/sashpage.html.Masajiro Iwasaki.
2015.
NGT : Neigh-borhood Graph and Tree for Indexing.http://research-lab.yahoo.co.jp/software/ngt/.David G. Lowe.
1999.
Object Recognition from LocalScale-Invariant Features.
In Proceedings of the In-ternational Conference on Computer Vision (ICCV1999), pages 1150?1157.
IEEE Computer Society.Matt Mahoney.
2011.
About the Test Data.
http://mattmahoney.net/dc/textdata.html.Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-rado, and Jeff Dean.
2013a.
Distributed Represen-tations of Words and Phrases and their Composition-ality.
In Advances in Neural Information ProcessingSystems 26 (NIPS 2013), pages 3111?3119.
CurranAssociates, Inc.Tomas Mikolov, Wen tau Yih, and Geoffrey Zweig.2013b.
Linguistic Regularities in Continuous SpaceWord Representations.
In Proceedings of the 2013Conference of the North American Chapter of theAssociation for Computational Linguistics: HumanLanguage Technologies (NAACL-HLT 2013), pages746?751.
Association for Computational Linguis-tics.Tomas Mikolov.
2013. word2vec: Tool forcomputing continuous distributed representationsof words.
https://code.google.com/p/word2vec/.Marius Muja and David G. Lowe.
2008.
FLANN?
Fast Library for Approximate Nearest Neigh-bors.
http://www.cs.ubc.ca/research/flann/.David Nister and Henrik Stewenius.
2006.
ScalableRecognition with a Vocabulary Tree.
In Proceed-ings of the 2006 IEEE Computer Society Conferenceon Computer Vision and Pattern Recognition (CVPR2006), pages 2161?2168.
IEEE Computer Society.Jeffrey Pennington, Richard Socher, and Christo-pher D. Manning.
2014a.
GloVe: Global Vec-tors for Word Representation.
http://nlp.stanford.edu/projects/glove/.Jeffrey Pennington, Richard Socher, and Christo-pher D. Manning.
2014b.
GloVe: Global Vec-tors for Word Representation.
In Proceedings of the2014 Conference on Empirical Methods in NaturalLanguage Processing (EMNLP 2014), pages 1532?1543.Thomas B. Sebastian and Benjamin B. Kimia.
2002.Metric-Based Shape Retrieval in Large Databases.In Proceedings of the 16th International Conferenceon Pattern Recognition (ICPR 2002), pages 291?296.Chanop Silpa-Anan and Richard Hartley.
2008.
Opti-mised KD-trees for fast image descriptor matching.In Proceedings of the 2008 IEEE Computer SocietyConference on Computer Vision and Pattern Recog-nition (CVPR 2008), pages 1?8.
IEEE Computer So-ciety.Joseph Turian, Lev Ratinov, and Yoshua Bengio.
2010.CCG: RTE Annotation Data for ACL 2010 publica-tion.
http://cogcomp.cs.illinois.edu/Data/ACL2010_NER_Experiments.php.2274Yair Weiss, Antonio Torralba, and Robert Fergus.2009.
Spectral Hashing.
In Advances in NeuralInformation Processing Systems 21 (NIPS 2008),pages 1753?1760.
Curran Associates, Inc.Justin Zobel and Alistair Moffat.
2006.
Inverted Filesfor Text Search Engines.
ACM Computing Surveys,38(2).2275
