THEORETICAL/TECHNICAL ISSUES IN NATURAL LANGUAGE ACCESS TO DATABASESS.
R. PetrickIBM T.J. Watson Research CenterINTRODUCTIONIn responding to the guidelines established bythe session chairman of this panel, three of thefive topics he set forth will be discussed.
Theseinclude aggregate functions and quantity questions,querying semantically complex fields, and mult i - f i lequeries.
As we will make clear in the sequel, thetransformational apparatus utilized in the TQA Ques-tion Answering System provides a principled basisfor handling these and many other problems innatural language access to databases.In addition to considering some subset of thechairman's five problems, each of the panelists wasinvited to propose and choose one issue of his/herown choosing.
If time and space permitted, I wouldhave chosen the subject of extensibility of naturallanguage systems to new applications.
In light ofexisting restrictions, however, I have chosen a moretractable problem to which I have given some atten-tion and in whose treatment I am interested; this isthe translation of quantified relational calculusexpressions to a formal query language such as SQL.AGGREGATE FUNCTIONS AND QUANTITY QUESTIONSQuestions such as "How many employees are in thesales department?"
must be mapped into three radi-cally different database query language expressionsdepending on how the database is set up.
It may heappropriate to retrieve a pre-stored total number ofemployees from a NUMBER-OF-EMPLOYEES field of aDEPARTMENT file, or to count the number of recordsin an EMPLOYEE file that have the value SALES in theDEPARTMENT field, or, if departments are broken downinto offices with which are associated the totalnumbers of employees employed therein, to total thevalues of the NUMBER-OF-EMPLOYEES field in all therecords for offices in the sales department.In the TQA System there are a number of differ-ent levels of representation of a given query.
Thegrammar which assigns structure to a query has somecore components which are essentiallyapplication-independent (e.g., the cyclic and post-cyclic transformations) and has other componentsthat are application-dependent (e.g., portions ofthe lexicon and precyclic transformations).
Surfacestructures are mapped by the application-independentpost cyclic and cyclic transformations into a rela-tively deep structural level which is referred to asthe underlying structure level.
In this represen-tation, sentence nodes are expanded into a verb fol-lowed by a sequence of noun phrases, and therepresentation of reference is facilitated by theuse of logical variables XI, X2, ....
The underly-ing structure corresponding to the previously citedexample sentence would be something like the follow-ing (suppressing details):LOCATED WH SOME MANY EMPLOYEE X1 SALES DEPARTMENTNow, depending on feature information associatedwith the lexical items in the two NP's,application-specific precyclic transformations canbe formulated to map this underlying structure intoany of three query structures that directly reflectthe three data structures and corresponding formalqueries previously discussed.
Rather than sketchingquery structures that could be produced for thisexample, let me be more specific by substituting theactual treatment of two similar sentences currentlytreated by the TQA System land-use application.These are the sentences:(i) "How many parking lots are there in ward 1 block2?
"(2) "How many parking spaces are there in ward 1block 2?
"In the current data base, individual lots areidentified as being parking lots by a land use coderelation LUCF, which has attributes that includeJACCN (parcel account number) and LUC (land usecode).
Parking lots have an LUC value of 460.
Anoth-er relation, PARCFL, has attributes which includeJACCN and JPRK (the number of parking spaces on agiven parcel).The underlying structures assigned to both thesesentences are nearly identical, differing only inthe lexical distinctions between "parking lot" and"parking space".
The common structure is very muchlike that of the previously given tree structureexcept that PARKING LOT or PARKING SPACE (togetherwith their associated features) replaces EMPLOYEE,and the second NP dominates the string "WARD 1 BLOCK2".
The feature + UNIT on a node that dominatesPARKING SPACE is not found in the correspondingstructure involving PARKINGLOT, and this feature(together with a number of other structural prereq-51uisites) triggers a pair of precyclictransformations.
The action of those two transf-ormations is roughly indicated by the followingsequence of bracketted terminal strings (the actualtrees together with all their features would take upmuch more space):(BD LOCATED((WH SO~ MANY) (PARKINGSPACE X3))((WARD i) (BLOCK 2)) BD)TOTPUNIT.>(BD TOTAL((WH SOME) (THING X46))(THE (X3(BD PARKING SPACEX3((WARD I) (BLOCK 2)) BD))) BD)LOTINS2->(BD TOTAL((WH SOME) (THING X46))(THE (X3(BD PARKING SPACEX3(THE ((LOT X48)(BD LOCATEDX48((WARD i) (BLOCK 2))BD))) BD))) BD)Note that the lot ~nsertion transformation LOTINS2has produced structure of the type which is moredirectly assigned to the input query, "What is thetotal number of parking spaces in the lots which arelocated in ward 1 block 2?".
This structure is thenfurther transformed by a transformation LOCATIONthat replaces the abstract verb LOCATED by a verb(WBLOCK in this instance) which corresponds to anexisting data base relation.LOCATION->(BD TOTAL((WH SOME) (THINS X46))(THE (X3(BD PARKING SPACEX3(THE ((LOT X48)(BD WBLOCK((WARD i) (BLOCK 2))X48BD))) BD))) BD)The latter structure is mapped via the TQA Knuthattribute grammar formalism into the logical form:(setx 'X46'(total X46(bagx 'X3'(setx 'X48'(and(RELATION 'PARCFL'(JPRK JACCN)'(x3 x48)'(= =) )(RELATION 'PARCFL'(WBLOCK JACCN'('100200 X48)'(= =)))))))This logical form is in a set domain logical calcu-lus to be discussed later in the paper.
Roughly, itdenotes the set of elements X46 such that X46 is thesum of the members of the bag (like a set, but withpossible duplicate elements) of elements X3 suchthat a certain set is not empty, namely the set ofelements X48 such that X48 is the account number(JACCN) of a parcel whose number of parking spaces(JPRK) is X3 and whose wardblock (WBLOCK) is 100200.The expression(RELATION 'PARCFL'( JPRKJACCN)'(X3 X48)'(==) )in the above logical form denotes the propositionthat the relation formed from the PARCFL relation byprojecting over the attributes JPRK and JACCN con-tains the tuple (X3 X48).
The logical form isstraightforwardly translated by means of a LISP pro-gram whose details we will not concern ourselveswith into the SQL query:SELECT SUM(A.JPRK)FROM PARCFL AWHERE A.WBLOCK = '100200';The other structure (for the sentence withPARKING LOT) lacks the triggering feature + UNIT,and hence .transformations TOTPUNIT and LOTINS2 donot apply; furthermore, the LOCATION transformationapplies to the original instance of the verb LOCATEDrather than the copy of LOCATED introduced by thelot insertion transformation LOTINS2 in the analysisof the previous sentence:(BD LOCATED((WE SOME MANY) ((PARKING LOT 460) X3))((WARD i) (BLOCK 2)) BD)LOCATION->(BD WBLOCK((WARD I) (BLOCK 2))((WH SOME MANY) ((PARKING_LOT 460) X3)) BD)This structure is mapped via the Knuth attributegrammar into the logical form:(setx 'X48'(quantity X48(setx 'X3'(and(RELATION 'PARCFL'(WBLOCK JACCN)'('100200 X3)'(==) )(RELATION 'LUCF'(LUC JACCN)'('0460 X3)' (==)) )  ) ) )52and this logical form is translated to the SQLquery:SELECT COUNT(UNIQUEA.JACCN)FROM PARCFL A, LUCF BWHERE AoJACCN = B.JACCNAND B?LUC = '0460'AND A.WBLOCK = '100200' ;~qle points to be made with respect to thistreatment are that the information indicating dif-ferential, database-specific treatment can beencoded in lexical features, and that differentialtreatment itself can be implemented by means of pre-cyclic transformations which are formally of thesame type that the TQA system uses to relate under-lying to surface structures.
The features, such as+ UNIT in our example, are principled enough to per-mit their specification by a data base administratorwith the help of an on-line application customiza-tion program.
(+ UNIT is also required in lexicalitems such as DWELLING UNITS and STORIES).If the database organization had been different,simple lexical changes could have been made to trig-ger different sequences of transformations, result-ing in structures and ultimately SQL expressionsappropriate for that database organization.
In thisway, it would be easy to handle such database organ-izations as that in which the total number ofparking lots and/or parking spaces is stored foreach wardblock, and that in which such totals arestored for each splitblock which is included withina given wardblock.QUERYING SE~IANTICALLY COMPLEX FIELDSIn posing this problem, the session chairmanpointed out that natural language query systems usu-ally assume that the Concepts represented by data-base fields will always be expressed in English bysingle words or fixed phrases.
He cited as an exam-ple the query "Is John Jones a child of an alumnus?
"where "child of an alumnus" is a fixed phraseexpressing the binary relation with attributesAPPLICANT (whose values are the names of applicants)and CHILD-0F-ALUMNUS (whose values are either T orF).
He further noted that related queries such as"Is one of John Jones' parents an alumnus?"
or "Dideither parent of John Jones attend the college?
)"require some different treatment.The approach we have taken in TQA is, insofar aspossible, to provide the necessary coverage to per-mit all the locutions that are natural in a givenapplication.
The formalism by which this isattempted is, once again, the transformational appa-ratus.
Transformations often coalesce queries whichhave the same meaning but differ substantially intheir surface forms into common underlying or querystructures.
There is~ however, no requirement thatthis always be done, so such queries are sometimesmapped into logically equivalent rather than identi-cal query structures.
In either case, thetransformational formalism provides a solid basisfor assigning very deep semantic structures to awide spectrum of surface sentence structures.
Theextent to which we have been successful in allowingbroad coverage of logically equivalent alternativestatements of a query is difficult to quantify, butwe believe that we have done well relative to otherefforts for two reasons: (I) We have made an effortto cover as many underlying relations and their sur-face realizations as possible in treating a givenapplication, and (2) The transformational formalismwe use is effective in providing the broa~ coveragewhich reflects all the allowable interactionsbetween the syntactic phenomena treated by a partic-ular grammar.MULTI-FILE QUERIESThis problem deals with multi-file databases andthe questions of which files are relevant to a givenquery and how they should be joined.
This "problem"is one which is often raised, and which invariablyreflects a quick-and-dirty approach to syntactic andsemantic analysis.
Within a framework such as thatprovided by the transformational apparatus in TQA,this problem simply doesn't arise.
More accurately,it is a problem which doesn't arise if an adequategrammar is produced that assigns structure of thedepth of the TQA System's query structures.
This,of course, is no easy task, but it is one which iscentral to the transformational grammar-basedapproach~ and its successful treatment does providea principled basis for eliminating a number ofpotential difficulties such as this multi-file queryproblem.To see why this is so, let us consider how, for agiven query, relations are identified and joined inTQA.
As we have already indicated, TQA underlyingstructures and query structures consist of sentencenodes which dominate a verb followed by a sequenceof noun phrases.
These simple structures are joinedtogether to form a complete sentence structurethrough the use of additional phrase structure ruleswhich indicate conjunction, relative clause-mainclause connection, etc.
Query structure verbs cor-respond, for the most part, to database relations,and the noun phrase arguments of those verbs corre-spond to attributes of their a~sociated relations.Furthermore, query structures contain logical vari-ables which serve the function of establishingreference, including identity of reference.
Thus ifthe query structure assigned to a query identifiestwo (or more) relations which have attributes whosevalues are the same logical variable, we have anindication that it is those attributes over whichthe relations should be joined.An example should make this clearer.
Considerthe query structure which TQA assigns to the sen-tence"What is the zone of the vacant parcels in subplan-ning area 410?
"53(We omit feature information and some structurewhich is irrelevant to the subsequent discussion inthe structure below.
)I NP-,IDET  I N ~x4 / : / \THE NOM /S IB -SUBPLAN_AREA 410 X8 LUC 910 X8This structure represents the set of elements X4such that X4 is the zone of an element of the set oflots X8 such that the land use code (LUC) of X8 is910 and the subplanning area (SUBPLAN_AREA) of X8 is410.
The structure is mapped in straightforwardfashion by a Knuth attribute grammar translationprocedure into the set domain relational calculusexpression:(setx 'X4'(setx 'X8'(and(RELATION 'ZONEF'(ZONE JACCN)'(X4 XS)'(= =) )(RELATION 'GEOBASE*'(SUBPLA JACCN)'('410 XS) '(==) )(RELATION 'LUCF'(LUC JACCN)'('910 X8)'(= =))))))Each deep (query structure) verb such as ZONE hasassociated with it (by means of a translation tableentry) a relation, which is usually the projectionof an existing data base relation.
Thus instead oftranslating a portion of the above tree to (ZONE X4X8), an expression which is true if X4 is the zone ofthe parcel whose account number is XS, thetranslation table is used to produce(RELATION 'ZONEF'(ZONE JACCN)'(x4 xs)'(= =) )which is true if the projection of the ZONEFrelation over attributes ZONE and JACCN (accountnumber) contains a tuple (X4 XS).The conjunction of three relations with a commonJACCN attribute value of X8 indicates that the threerelations are to be joined over the attribute JACC ~'There is, however, one complication in translat-ing the relatiorul calculus expression above into aformal query language such as SQL.
The relationsZONEF and LUCF are existing database relations, butthere is no relation GEOBASE* in the database, giv-ing the subplanning area of specific parcels.Instead, the  PARCEL relation gives the splitblock(SBLOCK) of a given parcel (JACCN) and the GEOBASErelation gives the subplanning area (SUBPLA) of allthe parcels within a given splitblock (SBLOCK).There are at least three solutions to the prob-lem of bridging the gap between relational calculusexpressions such as this and appropriate formal que-ry language expressions.
These are:(i) Write a precyclic database-specific splitblockinsertion transformation which assigns query struc-ture corresponding to the query, "What are the zonesof the vacant parcels which are located in split-blocks in subplanning area 410?
"(2) Store information that permits replacingexpressions involving virtual relations such as(RELATION 'GEOBASE*'(SUBPLAJACCN)'('0410 XS)'(==) )by existentially quantified expressions involvingonly real database relations such as:(setx 'XIII(and(RELATION ' PARCFL' (SBLOCK JACCN)' (X111 XS), (= =) )(RELATION ' GEOBASE' (SUBPLA SBLOCK)'('410 XlII)'(==) ) )(3) Make the data base administrator (DBA) respon-sible for providing a formal query language defi-nition of the virtual relations produced.
In thiscase that would take the form of defining GEOBASE*as the appropriate join of projections over GEOBASEand PARCFL.All three solutions have been implemented in theTQA System and used in specific cases as seemsappropriate.
For a database system with the defini-tional facilities available in SQL, solution (3) isparticularly attractive because it is the type ofactivity with which data base administrators arefamiliar.
Solutions (I) and (2) were also imple-mented at various times for examples such as the onein question, leading to the following SQL query:SELECT UNIQUE A.ZONE, A.JACCNFROM ZONEF A, GEOBASE B, PARCFL C, LUCF DWHERE A.JACCN = C.JACCNAND C.JACCN = D.JACCNAND B.SBLOCK = C.SBLOCKAND D.LUC = '0910'AND B.SUBPLA= '4100';(We note for the careful reader that '0910' and'4100' are not misprints, but the discussion of howsuch normalization can be automatically achievedfrom DBA declarations is outside the scope of thepresent paper.
)54TRANSLATING QUANTIFIED RELATIONAL CALCULUSEXPRESSIONS TO FORMAL QUERY LANGUAGE EQUIVALENTSIn this section we consider a problem of our ownchoosing.
In most of the existing relational calcu-lus formalisms, use is made of logical variables andsome type of universal and existential quantifiers.Early versions of TQA were typical in this respect.The version of TQA which was tested in the WhitePlains experiment, for example, made use of quanti-fiefs FORATLEAST and FORALL whose nature is bestexplained by an example.
The lozical form assignedto the previously considered sentence was, at onetime:(setx 'X4'(foratleast i 'XII2(setx 'X8' (and(RELATION ' GEOBASE*' (SUBPLA JACCN)'('410 XS)'(==) )(RELATION ' LUCF' (LUC JACCN)'('910 X8)'(= =) ) ) )(RELATION ' ZONEF' (ZONE JACCN)' (X4 X112)' (==)) ) )This logical form denotes (roughly) the set of zonesX4 such that for at least one element XII2 of the setof parcels X8 which are in subplanning area 410 andhave a land use code of 910, parcel XII2 is in zoneX4.
In simple examples such  as this, where onlyexistential quantification of logical forms isinvolved, there is no problem in translating to aformal query language such as SQL.
However, whenvarious combinations of existential and universalquantification are involved in a logical form, thecorresponding quantification-indicating constructsto be used in the formal query language translationof that logical form is not at all obvious.
An exam-ination of the literature indicates that thearguments used in establishing the completeness ofquery languages offer little or no guidance as tothe construction of a practical translator fromrelational calculus to a formal query language suchas SQL.
Hence, the approach used in translating TQAlogical forms to corresponding SQL expressions willbe discussed, in the expectation of eliciting expla-nations of how the translation of quantification ishandled in other systems.We begin by observing that a logical form(foratleast 1Xl(setx X2 (f X2))(g El))(which denotes the proposition that for at least oneXl which belongs to the set of elements X2 such thatf(X2) is true, g(Xl) is true) is equivalent to therequirement of the non-emptiness of the set(I) (setx 'Xl '(@nd (f Xl) (g XI)))Similarly,(forall X1(aetx X2 (f X2))(g Xl))(which denotes the proposition that for all X1 inthe set of elements X2 such that f(X2) is true, g(Xl)is true), is equivalent to a requirement of the emp-tiness of the set(2) (setx 'XI '(and (f Xl) (not (g Xl))))Conversion of expressions with universal and exis-tential quantifiers is then possible to expressionsinvolving only set notation and a predicate involv-ing the emptiness of a set.
The latter type ofexpressions are called set domain relational calcu-lus expressions.Fortunately, SQL provides operators EXISTS andNOT EXISTS which take as their argument an SQLSELECT expression, the type of expression into whichlogical forms of the type (setx 'XI ... ) are trans-lated.
A recursive call to the basic logicalform-to-SQL translation facility then suffices tosupply the SQL argument of EXISTS or NOT EXISTS.It is worth noting that, under certain circum-stances which we will not explore here, the "(setxX2" portion of an embedded expression (setx 'X2 (fX2)) can be pulled forward, creating aprefix-normal-form-like expression of the type (setx'Xl (setx 'X2 ... )), and the logical variables thatcan be pulled all the way forward correspond toinformation implicitly requested in English queries.The values which satisfy these variables should alsobe printed to satisfy users' implicit requests forinformation.
For example, in our previously consid-ered query"What are the zones of the vacant parcels in sub-planning area 410?
"one probably wants the parcels identified in addi-tion to their zones.
Translation to the form of setdomain relational calculus used in TQA then providesa basis for either taking the initiative in automat-ically printing these implicitly requested values orfor engaging in a dialog with the user to determinewhether they should be printed.As a final example of this method of translatingquantified logical forms, consider the sentence"What gas stations are in a ward in which there isno drug store?
"The logical form initially assigned by TQA to thissentence is55(setx 'X2' (and(RELATION ' LUCF' (LUC JACCN)' ('0553 X2)'(==) )(foratleast I 'X81(setx 'X7(forall 'XS0(setx 'X13(RELATION ' LUCF' (LUC JACCN)'('0591 XI3)'(= =) ) )(RELATION ' PARCFL' (WARD JACCN)' (X7 XS0)'(-==) ) ) )(RELATION ' PARCFL' (WARD JACCN)' (XS l  X2)' (==)) ) ) )which is translated to the set domain logical form:(setx 'X2' (setx 'X7' (and(RELATION ' PARCFL' (WARD JACCN)' (x7 xz)'(==) )(not(setx 'X13' ( and(RELATION ' PARCFL' (WARD JACCN)' (X7 El3)'(==) )(RELATION ' LUCF' (LUC JACCN)' ('0591 XI3)' (==)) ) ) )(RELATION ' LUCF' (LUC JACCN)'('0553 X2)' (=  =) ) ) ) )The latter form translates easilyexpression:SELECT UNIQUE A.JACCN, A.WARDFROM PARCFL A, LUCF BWHERE A.JACCN = B.JACCN-AND B.LUC = '0553'AND NOT EXISTS(SELECT UNIQUE C.JACCNFROM PARCFL C, LUCF DWHERE C.WARD = A.WARDAND C.JACCN = DoJACCNAND D.LUC = '0591');into the SQLREFERENCESAstrahan, M.M.
; Blasgen, M.W.
; Chamberlin, D.Do;Eswaran, K.P.
; Gray, J.N.
; Griffiths, P.P.
; King,W.F.
; Lories, R.A.; McJones, J.; Mehl, J.W.
; Put-zolu, G.R.
; Traiger, I;L.; Wade, B.W.
; andWatson, V., "System R: Relational Approach toDatabase Management," ACM Transactions on Data-base Systems~ Vol.
i, No.
21, June, 1976, pp.97-137.Damerau~ F.J., "Advantages of a TransformationalGrammar for Question Answering," Proc.
5th IJCAI~Vol.
i, 1977, p?
192.Damerau, F.J., "Operating Statistics for The Trans-formational Question Answering System," AmericanJournal of Computational Linguistics~ Vol.
7, No.it January-March 1981, pp.
30-42.Petrick, S. R., "Semantic Interpretation in theRequest System," in Computational and Mathemat-ical Linguistics, Proceedings of the Interna-tional Conference on Computational Linguistics,Pisa, 27/VIII-I/IX 1973, pp.
585-610.Petrick, S.R.,Systems,"Development~314-325.
"On Natural Language Based ComputerIBM Journal of Research andVol.
20, No.
4, July 1976, pp.Petrick, S.R.
"Field Testing the TransformationalQuestion Answering (TQA) System," Proc.
19th Ann.Mtg.
of the ACL~ June 1981, pp.
35-36.Plath, W.J., "REQUEST: A Natural LanguageQuestion-Answering System," IBM Journal ofResearch and Development~ Vol.
20, No.
4, July1976, pp.
326-335.56
