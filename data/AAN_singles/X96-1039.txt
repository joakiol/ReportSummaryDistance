BUILDING AN ARCHITECTURE: A CAWG SAGARalph GrishmanComputer  Science Depar tmentNew York Un ivers i ty715 Broadway,  7th F loorNew York,  NY  10003grishman?cs, nyu.
eduAbstractThe Tipster Architecture - -  a standardized inter-face for providing document management, documentretrieval, and information extraction services - -  isone of the major products of Phase II of the Tip-ster program.
The architecture was developed by theContractors' Architecture Working Group (CAWG)over the past two years.
It has been refined throughfeedback from the demos developed by the CAWGfor the 6-month and 12-month Tipster meetings, andfrom the Tipster-compliant systems now being imple-mented.MOTIVATIONPhase II of the Tipster program had a twofold mis-sion: to advance the technology for document detec-tion (information retrieval and routing) and informa-tion extraction from free text, and also to facilitate thedelivery of this technology to Government customers.How could delivery of this technology be improved?The Government proposed an approach of identify-ing a core set of services needed by a broad range oftext analysis applications, and defining a standard setof functions and interfaces for these services.
Thesefunctions and interfaces would constitute an architec-ture - -  the Tipster Architecture.Creation of a standardized architecture could helpin many ways.
It could speed initial application devel-opment by providing standardized, pre-existing mod-ules.
It could ease system maintenance through well-defined, well-document internal interfaces betweenmodules.
It could support system upgrading to takeadvantage of improved technology, by making it mucheasier to replace an older module with a newer (andhopefully better-performing) module.
And by mak-ing it easier to combine language analysis modules innovel ways (for example, combining extraction anddetection) it could enhance system performance.In addition, the architecture would make it easierto conduct research on individual components of atext analysis system, by creating an environment ofstandardized modules.
The lone experimenter wouldnot need to create an entire application system fromscratch to conduct experiments.Central to all these benefits would be the notion ofplug and play: defining a set of modules and inter-faces with sufficient precision that we could unplugone vendor's module and replace it with another ven-dor's without affecting system functionality.THE SAGAThe LaunchThe objective was certainly quite ambitious: to cre-ate an architecture which could satisfy the needs of awide range of text analysis applications and could beimplemented efficiently enough to support operationalsystems.
To meet this challenge, the Government as-sembled a group of representatives of the contractorswho would be conducting research and developmentunder Tipster Phase II, and told us we had six monthsto create an architecture.
By including representa-tives of the contractors who would have to use thearchitecture (during the rest of Phase II), the Gov-ernment sought to insure that all the essential needsof various detection and extraction applications wouldbe addressed.
1The prospect was challenging and indeed a bitdaunting for a group none of whom had written an1The members of the committee have included, over thecourse of Phase II, Bill Caid, Jamie Callan, Jim Conley,Hal Corbin, Jim Cowie, Kathy DiBella, Ted Dunning, JoeDzikiewicz, Louise Guthrie, Jerry Hobbs, Clint Hyde, MarcIlgen, Paul Jacobs, Matt Mettler, Bill Ogden, Peggy Otsubo,Bev Schwartz, Ira Sider, Ralph Weischedel, and Remi Zajac;Ralph Grishman chaired the committee.213architecture before.
No one was sure quite what thefinal document would look like.
Fortunately, a seriesof planning workshops for Phase II, held in the springof 1993, had identified some basic concepts for an ar-chitecture, and provided a strong base of ideas fromwhich to start.Central among these ideas was the notion of an an-notated document.
All of the information which waslearned about a document in the course of its analysis- -  header zones, paragraph and sentence boundaries,person and organization ames in the text, relationalinformation about selected types of events, commentsby human analysts, etc.
- -  would be stored as an-notations which would be kept with the document.The annotations would point to segments of the orig-inal text; the original text would be maintained un-changed.Starting from these ideas, the CAWG set out inApril, 1994 to knit together an architecture.
Overthe spring and summer of 1994 the outlines of an ar-chitecture began to come together in the form of anArchitecture Design Document.
The CAWG initiallymet once a month in Washington; in the interveningfour weeks, the committee chair prepared a revisedDesign Document o reflect the changes and additionsproposed at the previous meeting.The architecture was specified in terms of a hi-erarchy of object classes, with operations associatedwith each class (and inheriting operations from classesabove it in the hierarchy).
The initial specifica-tion was programming language independent, but in-cluded some basic guidelines for implementations inC and Lisp.The principal object classes included the documentand the annotation, which were mentioned before.Documents were organized into collections.
In ad-dition to annotations, which provided informationabout segments of a document, a document couldhave attributes which specified information about theentire document (e.g., its source or creation date).
In-formation about an entire collection could be recordedas attributes on the collection.Modules within the Architecture Communicate pri-marily by passing documents and collections, and byadding annotations and attributes.
Thus a "name an-notator" would take a collection and add to each doc-ument in the collection some annotations indicatingthe proper names found in that document.
An infor-mation extraction module would add annotations cor-responding to instances of a type of event.
A retrievalengine would take a collection and a query and returna (smaller) collection of relevant documents, with anattribute on each document indicating its degree ofrelevance to the query.A number of specialized object types had to beadded for retrieval and routing, including differenttypes of queries and indexes for document and querycollections.The  DemosTo show the benefits of the architecture, and to pushits further development, he Government asked theCAWG to create an integrated emo system for the 6-month Tipster meeting in November 1994.
New Mex-ico State Univ.
created a "Document Manager" - -an implementation f the core document managementfunctions in accordance with the architecture.
Severalother contractors 2 provided detection and extractioncomponents which conformed to the architecture andinterfaced to this document manager.
This demo pro-vided the first, albeit limited, demonstration of "plugand play", and the first demonstration of detectionand extraction systems interacting through annotateddocuments.This demo led to several revisions to thearchitecture.
3 In addition, its success led to the de-sign of an even more ambitious demo for the 12-monthTipster meeting in May 1995.
This second demo in-tegrated several extraction systems, several detectionsystems and a richer set of interfaces 4.
The 12-monthdemo, in turn, propelled further developments in thearchitecture, including methods for declaring annota-tions and for representing information extraction tem-plates as annotations.A few more changes were made to the architecturedocument as a result of problems which came up dur-ing the 12-month demo.
In particular, an explicitspecification of the C-language interface was addedto the document.On the  Open SeaBy late 1995, several Government systems were beingimplemented in conformance with the Tipster Archi-tecture.
Contractors found that they had to extend ormodify the architecture to meet the needs of specificapplications.
These modifications and extensions arenow beginning to be presented to the CAWG and tothe Government's Architecture Committee for possi-ble revision of the standard architecture.2BBN, HNC, Martin-Marietta, and the Univ.
ofMassachusetts3 Most contentiously, the removal of "document lists", whichwere lists of pointers to documents in collections; all sets ofdocuments were now stored uniformly as collections.4including contributions from BBN, HNC, Lockheed-Martin, New Mexico State Univ., SRI, TRW, and the Univ.of Massachusetts214A L IV ING ARCHITECTUREThe Government originally hoped that an architecturecould be completed in six months, and that we couldthen all go back to doing research and writing sys-tems in conformance with the architecture.
It hasn'tquite worked out that way.
We did have an architec-ture after six months, so we might have stopped thereand let the Government mandate that people use thatarchitecture as best they could.
However, the Govern-ment had an ambitious et of goals, and we were stilla long way from meeting all of them.
In addition, itwas recognized that real success for the architecturelay in making it attractive nough, in both designand availability of components, to be widely and vol-untarily adopted.
So we have embarked on a programof gradual improvement of the architecture.
This iscomparable to many efforts at programming languagestandardization, where an initial specification is grad-ually revised over several years in response to userand developer feedback.After two years, we are closer to meeting the goalsset for the architecture, but we are still not done.We expect that there will be continuing incrementalrevisions to the architecture driven by the need forefficiency, completeness, precision, and simplicity:?
eff iciency: we have tried to minimize the loss ofefficiency due to conformance to the architecture.We recognize that there will be some cost in con-formance, since we are using general mechanismsin place of ones specially developed for a sin-gle application, but we need to insure that thesecosts are not so great that they make the archi-tecture unattractive.
In particular, we have beenlooking recently at the problems of retrieval, toinsure that the operations associated with creat-ing a new collection of documents for the resultsof a retrieval operation can be performed quickly.?
completeness :  in some sense the architecturewill never be "complete": there will always berequests to standardize additional services or re-sources associated with text analysis.
However,there are some areas which are clearly lackingand are needed by many applications.
The archi-tecture as yet makes no special provision for op-eration in a multi-process environment; we needto include such mechanisms as read and writelocks and transaction control which are typicalof data base systems.
We need to specify theerror conditions for the operations in the archi-tecture and the mechanisms for error signaling.The details of the interface have as yet been fullyspelled out only for C; based on the implementa-tions which are planned, we need to add explicitspecifications for C++,  CORBA, and CommonLisp.?
prec is ion:  We recognized all along that the rel-atively brief English prose describing the opera-tions in the architecture left some things under-specified.
Nonetheless, it was a sobering experi-ence in the fall of 1995 when for the first time acontractor who had not been part of the CAWG(and hence was not privy to the "oral tradition"of the CAWG) prepared a design for a Tipster-compliant application, and interpreted the De-sign Document in some unexpected ways.
Thisexperience has led to an extended iscussion ofthe semantics of some operations, and plans toinclude both more details and some examples inthe Design Document.It has also prompted the development of an ini-tial version of a val idat ion su i te  by New Mex-ico State Univ.
Until now, conformance to theTipster Architecture has been gauged by a man-ual comparison of an implementation with theDesign Document.
The validation suite imple-ments a series of tests, each of which tests someaspect of architecture compliance.
It thus willallow the verification of architecture complianceto be partially automated.
It will also providea definition of some aspects of the architecturewhich can complement the prose descriptions inthe Design Document.?
s impl ic i ty:  We have made a strong effort fromthe beginning to assemble an architecture from asmall number of simple yet powerful objects, andwhere necessary to rethink parts of the designrather than simply adding stuff on.
As we try tomake the architecture more comprehensive, therewill be a natural tendency to just add featuresand operations.
Unfortunately this makes the ar-chitecture harder to understand and harder to im-plement.
We therefore will need to maintain ourvigilance in protecting and enhancing the clarityof the design.Our hope is that, by continuing to be responsive to theneeds of the users - -  the designers and implementersof text analysis systems - -  in developing the archi-tecture, we can encourage the creation of a wide vari-ety of Tipster-compliant modules, available as COTS(commercial, off-the-shelf) products.
Through this"marketplace of Tipster modules" we will be able tomeet our goal of facilitating the transition of advancedtext analysis techniques to operational systems.215
