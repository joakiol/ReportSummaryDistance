A Symmetrical Approach to Parsing and GenerationMarc Dymetman, Pierre Isabelle and Frangois PenaultCCRIT, Communications Canada.
1575 Bld Chomedey.
Laval (Qu6bec) H7V 2X2 CANADAAbstract.
Lexicat Grammars are a class of unification grammars which share a fixed rule component,for which there exists a simple left-recursion elimination transformation.
The parsing and generationprograms ale seen as two dual non-left-recursive versions of the original grammar, and are implementedthrough a standard top-down Prolog interpreter.
Formal criteria for termination are given as conditionson lexical entries: during parsing as well as during generation the processing of a lexical entry constimessome amount of a guide; the guide used for parsing is a list of words remaining to be analyzed, while theguide for generation is a list of the semantics of constituents waiting to be generated.I .
In t roduct ionSymmetry  between pars ing  andgenerat ion.
There is a natural appeal to the attemptto characterize parsing and ge~;era~ion i a symmetricalway.
This is because the statement of the problem ofreversibil ity is naturally synlmetrical: parsing isconcerned with recovering semantic content fromphonological content, generation phonological contentfrom semantic content.
It has been noted by severalresearchers (\[$88\], tN891, \[SNMP891) that certainproblems (left-recursion) and techniques (left-cornerprocessing, linking, Ear!ey deduction) encountered inthe parsing domain hJ,'e o,rrelates in the generationdomain.
It is then na!
:ural to wy and see parsing andgeneration as instances of a single paradigm; \[$881 and\[D\[88, DI90I are attempts in this direction, but arehindered by the fact that there is no obvious correlatein gene,'ation of the string indexing techniques soprominent in parsing {string indices in chart parsing,differential ists m DCG parsing).Guides.
What we propose here is to take a stepback .and abstract file notion of string index to that of a;,??iUc.
This gci~er,d notion ,,viii apply to both parsingaud generation, but it wi/!
be instantiated ifferently inthe va'o modes.
The purpose of a guide is to orient theproof procedure, specif ic to either parsing orgeneration, in such a way that: (i) the guide isinitialized as a direct function of the input (the stringin parsing, thc semantics in generation), (it) the currentstale of the ,~uide strongly constrains the next access lothe lexicon, (iii) after lexical access, the size of theguide strictly decreases (,gMde-consumption co~lditic.1,see section 3).
Once a guide is specified, the generationproblem (respectively the parsing problem I) thenreduces to a problem fornml!y simihtr to the problem ofparsing v, ith a DCG \[PW80} containing no emptyproduct ions 2 (ie rules whose right-hand side is theempty string \[\]).Several parsing techniques can be applied to thisproblem; we will be concerned here with a top-downparsing approach directly implementable through astandard Prolog interpreter.
This approach relies on alefi-recl~r,sioll-climination trans/brmation for a certainclass of definite clause programs (see section 33.The ability 1o specify guides, for parsing or forgeneration, depends on certain composit ional i tyhypotheses which the underlying grammar has tosatisfy.I Thb, hall of the statcmenl ma> seem tautological, but it is not: see the attempt:it a reinlerprctalion of left exirap~sition iri terms of guides in section 5.2 Al~o <'ailed meh' r.h'x I11781.Hypotheses  on compos i t ionaHi ty .
Theparsing and generalion problems can be renderedtractable only if certain hypmheses are madeconcerning the composition of linguistic structures.Thus generation can be arduous if the semanticsassociated with the composition of two structures is thenm'estricted lambda-application 3 of tile first structure'ssemantics on the second structure's emantics: this isbecause knowledge of the mother's semantics does notconstrain in a usable way the semantics of thedaughters .
4 On the contrary, parsing is greatlysimplified if the string associated with the compositionof two strqctures is the concatenation of tile stringsassociated with each st,ucture: one can then use stringindexing to orient and control tl'e progression of theparsing process, as is done in DCG under tile guise of"dil'ferential lisls".l ,e?ical  Gran lmar .
The formalism of LexicalGrammar (LG) makes explicit certain compositionalityhypotheses which ensure the existence of guides forparsing as well as for generation.A Lexical Grammar has two parts: a (variable)lexicon and a (fixed) rule component.
The rulecomponent, a definhe clause specification, spells outbasic linguistic compositionality rules: (i) how a well-formed linguistic structure A is composed from well-formed structures B and (27: (it) what .
:ire the respectivestatuses of B and C (left constituent vs ri,,,htconstituent, syntactic head vs syntactic dependenl,semantic f-wad vs semantic depemlent): and (iii) how thestring (,'esp.
semantics, subcategorization list .
.
.
.
)associated with A is related to the strinoA (resp.semantics, subcategorization lists .
.
.
.  )
associated with/3 and C (see sectioi, 2).The ability to define a guide for parsing is a(simple) consequence of the fact that the stringassociated with A is the concatenation of the stringsassociated with B and (.,5.
The ability to define a guidefor generation is a (less simple) consequence of LG'shypotheses on subcategorization (see sections 2 and 4).
"~ By tmrestricted lambda-application, we mean functional applicationlbtlowed by, ivwriting to a ilOl'tlla\] lollll,4 In theories favoring such an approach (such as GPSG IGKPS871), parsingmay be computatiollally tractable, but generation does not seem to be.
Thesetheories can be questioned as plausible computational models, for they shouldbe judged on Iheir ability to account for production behavior (generation) aswell as for understanding behavior {parsing).5 A fairly standard assumption, ll: empty string lealizalions are allowed, thenextraposifion call still be handled, as '~ketched in section 5.90 1(P0) Lexical Grammar ules /Nconse  Kvat J ve add i t  i on conserva  t J ve add:i t i onof pars ing  gu ide  o\[ gent.rat ion gu ide  .
/  \guided parsing guided generation(Plp) program (Plg) program(leli-recursive) (lefl-recursive)i e f t - recdrs J .on  e\] il\[lJ nat Jol\]I lguided parsing guided generation(P2p) program (P2g) program(non left-recursive (non left-rccursiveFig.
1.
A symmetrical approach to parsing andgeneration: paper overviewPars ing  and  Generat ion  w i th  l ,ex ica lGrammar .
Fig.
I gives an overview of our approachto parsing and generation.
Let us briefly review theniain points:- -  (P0) is a definite clause specification of theoriginal LG rules.
It contains a purelydeclarative definition of linguisticcompositionality, but is unsuitable for directimplementation (see section 2)...... (Pip) (resp (Plg)) is a guided conservativeextension of (P0) for parsing (resp.
forgeneration); that is, (Plp) (resp (Plg)) is aspecification which describes the samelinguistic structures as (P0), hut adds a certainredundancy (guiding) to help constrain theimrsing (resp.
generation) process, ttowever,these definite clause programs are not yctadequate for direct top-down implementation,since they are left-recursive (see section 3).- -  (Plp) and (Pig) can be seen as symmetricalinstantiations of a common program schema(P1); (Pl) can be transformed into (P2), anequivalent non-leftorecursive program schema(see section 3).- -  (P2p) (resp (P2g)) is the non-left-recursiveversion of (Plp) (resp.
(Pig)).
Under theguide-consumption condition, it is guaranteedto terminate in top-down interpretation, and toenumerate all solutions to the parsing (resp.generation) problem (see section 4).For lack o/' space, theorems are stated here withoutproofs'; these, and more details, can be \]bund in \[D9Ob\].2.
Lex ica l  GrammarRule component  The fixed rule component ofLG (see Fig.
3) describes in a generic way thecombination of constituents.
A constituent A is eitherlexically specified (second clause in the phrasedefinition), or is a combination of two constituents /3and C (first clause in the phrase  definition).
B and Cplay complementary roles along the following threedimensions:- -  combine .strings : B is to the hift of C in thesurface order, or conversely to the right of C.This information is attached to eachconstituent through the string order feature.- -  combine syns : B is the syntact ic-head and Cthe syntactic-dependent, or conversely(syn order feature)..... combine seres : B is the semantic-head and Cthe semantic-dependent, or conversely(sere_order feature).Because B and C play symlnetrical roles (' , theseseemingly eight combinations actually redttce to fourdifferent cases.
To avoid duplicating cases, in thedefinition o1' the phrase  predicate, the symmetry hasbeen "broketf' by arbitrarily imposing that B be theleft constituent.
7Fig.
2 gives an example of a derivation tree in LG,using the lexicon of Fig.
4.ABma<v / '~"~hD Eof Te;;F Gvisited nolre daneA.subcat = \[\] A.sem : C.semB.subcat = \[J = D.scmC.subcat = \[BJ = often(,visit(marv,nd))D.subcat = left E.sem = F.semE.subcat = \[B\] = visit(mary,nd)F.subcat = IG,B\] B.sem = maryG.subcat = \[\] G.sem = ndFig.
2.
A derivation in LG(heavy lines correspond to semantic-heads)Our notion of semant ic -head  is a variant of thatgiven in \[SNMP89\], where a daughter is said to be asemantic-head if it shares the semantics of its mother.The combine  seres predicate is responsible forassigning sere -I-wad status (versus sem dep status) to aphrase, and for-imposing the following constraints:i. the semantic-head shares its semantics with itsmother,it.
the semantic-head always subeategorizes its sister((b) in Fig.
3),iii.
the mother's ubeategorization list is theconcatenation of the semantic-dependent lis andof the semantic-head list minas the element justincorporated ((c) in Fig.
3).
8The subcategorization list attached to a constituent Xcorresponds to constituents higher in the derivationtree which are expected to fill semamic  roles inside X.Subcalegorization lists are percolated flom the lexicalentries up the deriw~tion tree according to iii.6 Remark: the rules are m)t DCG rules, bul simply d<finite (orl\]o!?
0 (tau.sc.~7 If line (a) in the definitioll of phrase were omitled, the same ~('l el lingtListicstrUCtLIFeS Wollld result, but some strLlcltlres ',A'otl\[d be described twice, Line(a) is simply onc means of clinlinating these spurious ambiguities.
'\[he S~llllCel'lEcl would be produced by rephlcing (a) by fi.sem enter = sere \]wad or byB,spl ordcr = s>w head.8 hi fact, because of d~e constraints imposed by co#tM;w ,syn,s (see discussionbclm~ ) one of these lwo lists has to be empty.291phrase(A) :- phrase(B), phrase(C),B.string order = left,COlnbine(B,C,A).phrase(A) :- term(A).
(a)combine(B,C,A) :-(combine_str ings(B,C,A);combine_str ings(C,B,A)) ,(combine syns(B ,C,A);conrbine syns(C,B,A)),(combine_sems(B ,C,A);combine sems(C,B ,A)).combine_strings(B,C,A) :-B.string_order = left, C.string_order = right,append(B.str ing,C.str ing,A,str ing).combine sems(B,C,A) : -B.sem order = sere head, C.sem_order = sem_dep,A.sem = g.sem,B.subcat = \[CIRest\],append(C.subcat,Rest,A.subcat).combine syns(B,C,A) :-B.syn_order = syn head, C.syn_order = syn_dep,A.cat = B.cat,( B.sem_order = sere_head, C.subcat = \[\]% complement; C.sem order = sere_head, C.subcat = \ [ _  \]).% modifier(b)(c)Fig.
3.
The rules Hf Lexical Grammar 9Semantic-heads need not correspond to syntactic-heads.
In the case of a mod~fi'er like often, in paris, orhidden by john, the modif ier phrase, which is thesyntact i c -dependent ,  is the semantic-head andsemantical ly subcategorizes its sister: thus, in theexample of Fig.
2, the modifier phrase D semanticallysubcategorizes its sister E; combine sen:s has then theeffect of unifying tile semantics of E (visit(ntary,nd)) tothe substructure X in the semaatics (often(X)) attached) -e to D (see the lexical enty  for ~jten in Fig, 4).
This isreminiscent of work done in c'ttegorial gramnmr (see forinstance IZKC~ ~l), where a n'odifier is seen as having acategory of the fornl A/A, aud acts ;.Is a functor on thegroup it modifies.The combine syms predicate is responsible forassigning swz_head status (vers t l s  syndcp  status) to aphrase, and for ensuring the following constraints:i. Tile category cat of the ssntactic-head istransmitted to the mother.
The category of aphrase is lherefore always a projection of thecategory (n .vpa  ..) of some lexical item.ii.
When the syntactic-dependent is he same as tilesemamic-dependent, then the syntactic-dependent is semantically saturated (its subcatis empty).
This is the case when the syntactic-dependent plays the syntactic role of acomplement to its syntactic-head.iii.
When the syntactic-dependent is ile same asthe semantic-head, then tile syntactic-dependent's subcat contains only oneelement m. This is the case when the syntactic-dependent plays the syntactic role of arood(fief to its syntactic-head.The lexicon in LG Because LGs have afixed rule component, all specific linguistic knowledge9 Here, as in the sequel, we have made use of a "dot notation" for functionalaccess to the different featttros of a linguistic structure A: for instance, A.catrepresen%; the content of tile ('at feature ill A.l0 The "external argument" of the modifier, identified with the ~;emantic-dependent by tile semantic ombhmtkm rule.term(T) :- T.sem = mary,T.string = \]mary\],T.cat = n, T.subcat = 11.term(T) :- T.sem = not redame,T.string = \[notre,darnel,T.cat = n, T.subcat = \[\].term(T) :- T.sem = paris,T.string = \[paris\],T.cat = n, T.subcat = \[\].term(T) :- T.sem = die(S.sem),T.string =\[d ied\] ,T.cat = v, T.subcat = IS\],S.string order = left,S.cat = n, S.syn_order = syn_dep.term(T) :- T.sem = visit(S.sem,O.sem),T.string = \[visited\],T.cat = v, T.subcat = tO,S\],S.string order = left, S.cat = n,S.syn_order = syn dep,O.string order = right, O.cat = n,O.syn_order = syn dep.term(T) :- T.sem = in(S.sem,O.sem),T.string = \[in\],T.cat = p, T.subcat = tO,S\],S.string_order = left, S.cat = v,S.syn order = syn head,O.string_order = right, O.cat = n,O.syn_order = syn dep.term(T) :- T.sem = often(S.sem),T.string = \[often\],T.cat = adv, T.subcat = IS\],S.string_order = _, % may be left or rightS.cat = v,,S.syn order= syn head.Fig.
4.
Lexical entries in LG 11is contained in the lexicon.
Fig.
4 lists a few pos~'~blelexical entries.Consider a typical entry, for instance the cntry forin.
This entry specifies a possible leaf T of a derivationtree.
T has the following properties:i. T has string \[in\], and is of category p(preposit ion).ii.
T semantically subcalegorizes two phrases: O(the object of the preposition), of category n.and S (the "implicit subject" of thepreposition), of category v. By the generalconstraints associated with combine seres,this means that S and O will both havesemantic-dependent status.iii.
In the surface order, S is to the left of itssemantic-head, while O is to the right of itssemantic-head.iv.
The semantics in(S.sem,O,sem) of 7 is obtainedby unification from the semantics of itssubcategorized constituents S and O.v.
S is constrained to having syntacticqmad status,and O to having syntactic-dependent status.Because of the constraints imposed bycombine syns, this means that O will be asyntactic complement of the preposition, andthat the prepositional phrase will be amodifier of its "subject" S.Idioms.
The lexical apparatus allows for a directaccount of certain types of idiomatic constructions.
Forinstance, if the lexical entries of Fig.
5 are added to theFor eas ~ is f ex msilion, tile c )tltlib itioll of he tense to the semantics ofverbs is ignored here.92 3lexicon, then the expression "X kicked the bucket" willhe assigned the semantics die(X).
Entry (a) expressesthe fact that (in its idiomatic use), the verb form kickedsubcategor izes for a subject S and an object 0 whosesemant ics  is thebucket ,  and is i tself  ass igned thesemantics dietS.sere).term(T) :- T.sem = die(S.sem),T.string = \[kicked\],T.cat = v, T.subcat  = \[O,SI,S.string order = left, S.cat = n,S.syn order = syn_dep,O.string order = right, O.cat = n,O.syn order = syn dep,O.sem = the_bucket.term(T) :- T.sem = the_bucket, (b)T.slr ing = lthe,bucket\],T.cat = n, T.subcat = \[I.(a)Fig.
5.
Idioms in LG3.
Guides  and  l e f l - recurs ion  e l iminat ionGuide, i .
Consider a finite string l t, and let 12 be aproper suffix of  ll, l 3 be a proper suffix of 12, and soon.
This operation call only be iterated a finite numberof times.
The notion of guide-structure general izes this~,;ituation.DEFINITION 3.1.
A guide-structure is a partiallyordered set G which respects the descend ing  chaincond i t ion ,  i.e the condition that in G all strictlydecreasing ordered chains 11 > 12 > ... > l i > ... are,finite.Cons ider  now the fo l lowing e lementary def initeclause program (P0')t2:a(A) :- a(B), ~(B.A).
(P0)a(A) :- ttA).We assume here that g) is an abbreviation which,,;lands for a disjunction (C:,'-...'('k) of conjunctions Q ofgoals of  the form a(A), t(A), or {T=S} (unification: :oals) where the T, S are var iab les  or part ial lyiustant iated terms.
Among the var iables appear ingins ide 'i), only the " interface" var iables A, B areexpl ic i t ly  ment ioned.
We further assume that thedef in ing clauses (not shown) for the t predicate haveright-.hand s ides which are con junct ions  of  termun i f i ca t ion  goa ls  {T=S}.
We call t the l ex iconpredicate, and a the generie nonterminal predicate.Consider now the fol lowing program (Pl) ,  called aguided extension of (P0):a'(A,Li,,,Lout) :- a'(B,Li,,Li,ter) , (Pl)ff~'(B ,A ,Lmter,Lma).a'(A,Lm,Lma ) .
'- t'(A,Lin,Lout).
(P l )  is obtained from (P0) in the fol lowing way: (i)guide variables (Lin, Linte r, Lout)have been threadedthroughout (P0), and (it) the l -predicate t has beenrcphtced by a 3-predicate t 'wh ich  is assumed to be ar<finement of t, ie, Jb r  all A, Li,, Lot .
,  t'(A,Lip~,Lour)imp.lies t(A).Program (P l )  is a more constra ined version ofprogram (P0): t' can be seen as a version of t which isable to "consult" Liv ~, thus coostraining lexical access ateach step.
We will be interested in programs (P l )  whichrespect two condit ions:  (i) the gu ide-consumpt ionI!
Only programs of the (P0) form are discussed here, but the subsequentdiscussion ofguides generalizes asily to arbitrary definite clause programs.cond i t ion ,  and (it) the conservat ive  extensioncondition.I)~iFlNrrlOY 3.2.
Program (PI) is said to satisfy theguide-consumption condition if/" (i) the guide variablestake their values in some guide-structure G, and (it) anycall to t'(A,Lin,Lout) with Lin fully instantiated returnswith Lou t ./idly instantiated and strictly smaller in G.DEFINITION 3.3.
Program (P1) is said to be aconservative xtension of (PO) iff: a(A) is provable in(PO) e:> there exist Lin,Lou t such that a'(A,Lin,Lout) isprovable in (P1).The ~ part o f  the prev ious  def in i t ion  isautomatical ly satisfied by any program (P1) defined asabove.
The ~ part, on the other hand, is not, hutdepends on further condit ions on the ref inement ' of  t.Saying that (PI) is a conservative xtension of  (P0) istantamount to saying that (P1) adds some redundancy to(P0), wh ich  can be computat iona l ly  explo i ted toconstrain processing.Left-recurs ion e l iminat ion 13.
Program (PI)is left-recursive: in a top-down interpretation, a call toa '  will result in another immediate call to a ' ,  andtherefore will loop.
On the other hand the fol lowingprogram (P2)  is not left -recursive,  and Theorem 3.4shows fllat it is equivalent o (Pl):a'(A,,,Li.,L .)
:- t'(Ao,Li,l,Lo), aux(Ao,A,l,Lo,L,fl,aux(An,An,Ln,L.
).aux(Ai,An,Li,L n) :- ff)i'Ai,Ai+t,Li,Li+l),aux(A i+ 1 ,A n,Li + I ,L.).
(P2)Here, ,.to' and t '  are the same as in (P1), and a newpredicate aux, called the auxiliary nonterminal predicatehas been introduced.~4THFORFM 3.4.
Programs (P\] ) and (P2) are equivalentin predicate a'.l 5The fact tMt (p2) is not left-recursive does notalone guarantee termination of top-down interpretation.However ,  if (P I )  respects  the gu ide-consumpt ioncondi t ion and a further condi t ion,  the no-eha incondition, then (P2) does indeed terminate.
16DEFINrrIoN 3.5, Program (P1) is said to re,v~ect theno-chain condition llf each goal conjunction Ci'appearing in ?'
contains at least one call to a' or to t'.THEOREM 3.6.
Suppose (PI) satisfies both theguide-consumption condition attd the no-chaincondition.
Then relative to top-down, depth-first,interpretation of (P2), the query a(A,L0,Ln) ,  with L 0completely instantiated, has a finite SLD search tree \] 7associated with it (in other words, all its solutions willbe enumerated through backtracking, and the programwill terminate).4.
Pars ing  and generat ion  in Lex ica lGrammarThe rules of Fig.
3 are completely symmetrical intheir  spec i f i ca t ion  of  syntact ic  compos i t iona l i ty ,13 The general problem of left-recm'sion elimination m I)CGs (includingchain rules and mall rules \[H78\]) is studied in \[D90al; the existence of aGenerali=ed Greibaeh Normal Form is proven, and certain decidability resultsare givcll.14 The (PI) ~ (I)2) translbrmation is closely related to lej?-eorner parsing\[MTIIMY83\], which can in fact be recovered fronl this transformationthrough acertain encoding t)rocedurc (see ID90b\]),15 That is: a'(A,LM,Lou t) is a consequence of (P l) i ff a'(A,Lin.Lout) is aconsequcnce o\[(P2).16 In tile context of (?FGs, tile no chain condition would Colrk~spolld it) agl'allll/lal without ?\]la\[l~ rides, alld tile guide collgtllilption Collditioll \[o agranlmar without null rules.17 See \[L87\] A)r a definition of SI,D search tree.4 93(B,Lo,Lt)mary(A,L0,L4)1(C ,L I , L4)(D,L, ,L2)(E,L2,L4) o/re,,(F,L2,L3) (G,L3,L4)visited notre dameL 0 = \[mary,often,visited,notre,dame\]L 1 = \[often,visited,notre,dame\]L 2 = \[visited,notre,dame\]L 3 = \[notre,dame\]L 4 = \[\]Fig.
6.
A guide for parsing"s t r ing"  compos i t iona l i ty  and semant iccnmpos i t iona l i ty  is.
The symmetry between stringcompositionality attd semantic compositionality willallow us to treat parsing and generation as dual aspectsof the same algorithm.Orienting the rules.
The phrase predicate canbe rewritten in either one of the two forms: phrase j ) ,where emphasis is put on the relative linear order ofconstituents (h, ft  vs. r ight),  and phrase_g ,  whereemphasis is put on the relative semantic status(semantic head vs. semantic dependent) of constituents.phrases~(A) :-phrase_p(B), 'I'(B,A).
(POp)phrase p(A) :- term(A)where 'I'(B,A) stands for:?
t'(B,AJ - phrase~(CLB.strin3 order = left,combine(B,C,A).andphrase_g(A) :- phrase g(B), G(B,A).
(P0g)phrase_g(A) :- term(A)where G(B,A) stands for:G(B.A) -~ phrase_g(C),B.sem order = head,combine(B,C,A).LEMMA 4.1. phrase_p and phrase g are bothequivalent o phrase.The phrase j )  (resp.
phraseg)  programs are noweach in the format of the (P0) program of section 3,where a has been renamed: phrase p (resp.
phrase_g),and 09: P(resp.
G).These programs can be extended into guidedprograms (Plp) and (Plg), as was done in section 3:phrasej/(A,Lin,Lou t) :- (Plp)phrase p'(B,Lin,Linter), P'(B,A,Linter,Lout).phrase_p'(A,Lin,Lout) :- term~o'(A,Lin,Lout).where:andW(B,A,Li,lte,.,Lout) -~phrase~/(C,Linte,,Lout),B.string order = h'fi,combine(B,C,A).
(Dp)phrase g '(A ,L m,Lou t) :- (P 1 g)phr ase_g'( B ,Li,,,Linte,.
), G'( B ,A,Lmter,Lom).phrase g'(A,Lm,Lout) :- term g'(A,Lin,Lout).where:G(B,A,Linte,.,Lout) =~ phrase g'(C,Linter,Lout), (Dg)B.sem order = head,combi-ne(B,C.A ).In these programs, term p' and term_g'  are therefinements of term (corresponding to t' in program(P1) of section 3) used for parsing and generationrespectively.
Their definitions, which contain thesubstance of the guiding technique, are given below.N.B.
Programs (Plp) and (Pig) respect the no-chain cond i t ion :phrase_p '  is called inside 'P', andphrase_g' is called inside G'.A conserv'ltive guide for parsing.
Let usdefine term_p' in the following way:term I/(A,Lin,Lou t) :- term(A),append(A.string,Lo,,.Li,~).
(Gp)It is obvious that term p' is a refinement of term.Using the definition of combinestr ings"  in section 2,one can easily show that program (PIp)  is aconservative xtension of program (POp).The guide-structure Gp is the set of characterstrings, ordered in the following way: st\] <_ st2 iff st lis a suffix of st2.
If the lexicon is such that for an 5 'entry term(A), A.string is instantiated and is differentfrom the empty list, then it can easily be shown that(PIp) respects the guide-consumption condimm.The guide just introduced for parsing is simply arestatement in terms of guides of the usual differentiallists used in the Prolog translation of DCG rules.A conservative guide for generat ion .
Letus define term g" in the following way (using theauxiliary predicate extract sems):term_g'(A,Lin.Lo, t) .
'- term(A),L m=\[A.sem/Lmter\],extract sems(A.subcat,SubcatSems),append(SubcatSems,Li,te!.,Lont).extract_sems( \[\],/ \]).extract_sems(\[X/Rest\],\[X.sem/RestSems\]).
'-extract sems(Rest.RestSems).
(Gg)The guide structure L used for generation is a list ofsemantic structures, initially instantiated to IS .semi ,where S is the linguistic structure to be generated, ofwhich the semantics S.sem is known.
When a callterm g'(A,Lin,Lo,a) to the lexicon is made, with Lininstantiated to a list of semantic structures, the lexicalstructure A selected is constrained to be such that itssemantics A.sem is the first item on the Lin list.
TheA.sem element is "popped" from the guide, and isreplaced by the list of the semantics of the phrasessubcategorized by A.
(Fig.
7 illustrates the evolution ofthe guide in generation.
)18 This symmetry should not be obscured by tile fact that, in order to avoidduplicating clauses with the same logical content, the presentation of tile rulesappears otherwise (see above the discussion of "broken symmetry").94 5(A,L0,L4)(C,Lo,L3) {B,L3,L4)_ , i ~  mary(D,Lo,LI) (E,LbL3)(F,L,,L2> <G,L2,L3>visited non'e danteL 0 : \[often(visit(rnary,nd))\]L 1 = \[visit(mary,nd)\]L 2 = \[nd,mary\]L 3 = \[mary\]1.
4 = \[\]Fig.
7.
A guide for generationIt is" obvious that term_g' is then a refinement ofte rm,  and furthermore, using the definit ion ofeombine sems in section 2, one can prove:Lt",MMA 4.2.
Progranl (Plg) is a conservativeextension of program (POg).7'he guide.consumption eonditio~ in generation.Let us define recursively the size of an LG semanticrepresentation as the function fi'om terms to naturalnumbers such that:size\]atom\] = 1size\[atom(T I ..... T,)\] = 1 + sizelTl\] + ... + sizelT,JAssume now that, for any entry term(A) ,  thelexicon respects the following condition:I f  A.se,n is fully instantiated, then the A.subcatlist is instantiated sufficiently so that, for anyelement X of this list, (i) X.sem is J'ullyinstantiated, and (ii) X.sem has a strictly smallersize than A.sem.Under these conditions, one can define a guide-structureGg (see \[D90b\]), and one can prove:LEMMA 4.3.
Program (Plg) satL@'es the guide-consumption condition.The resulting programs for parsing andgenerat ion .
After the left-recursion el iminationtransforrnation of section 3 is performed, the parsingand generation programs take the following forms:phrase p'(An,Lm,Ln) :- term l/(Ao,Lin,Lo),aux fl(Ao,A n,LO,Ln).a ux_j)( A n,A ,,L n ,L pO .aux J~(Ai,An,Li,Ln) .
'- fP'(Ai,Ai+ 1,Li,Li+ l ),auxj)(Ai+ l,An,Li+ l,Ln)"phrase_g'(An,Li,,,Ln) .
'- term_g'(Ao,Li,,,Lo),aux_g(Ao,A~,Lo,Ln).attx__g( An,A ,~,Ln,L").atcr_ ,g(Ai,An,Li,L,) :- G'(Ai,Ai+ I,Li,Li+ I ),aux_g(Ai+ 1,A,~,Li+ l ,L,,).That is, after expliciting term_p', term_g', ft" and G'(see (Gp), (Gg), (Dp), (Dg), above), these programstake the forms (P2p) and (P2g) in Fig.
8; forparse(S.string,S.sem) :-S.cat =v, S.subeal=\[\],phrase_p'(S,S.string,\[\]).% S is a sentencephrasej)'(A,,,Li,,L n) .
'- term(A),append(A.string,Lo,Lin),aux.p( A o,A n,l,O,Ln).au-v j)(A n,An,Lt,,Ln).aux p(Ai,An,Li,Ln) :- phrasej/(C,Li,Li+l),Ai.string order= le/'t,combine(A i, C,A i+ l ),aux p(Ai+l,An,Li+t,L,).
(P2p)generate(S.string,S.sem) .
'-S.eat =v, S.subcat=\[\],phrase g'(S,lS.sem\],l /).% S is a sentencephrase g'(A,,,Lin,Ln) .
'- term(A),Lit ' = \[A .sem/Linte,.\],extract sems(A.subeat,SubeatSems),append(SubeatSems,Li,te,.,Lo),aux g(Ao,A,,Lo,Ln).atzx g(A n,A n,L n,Ln).au.r g(Ai,A,~,L i,L") .
'- phrase_g'(C,L i,Li+ l ),Ai.sem_order = head,c ombine( A i,C,A i + l),aux g(Ai+ l,An,Li+ 1,L").extract_seres(/i,\]\]).extractsems(\[X/Rest\],lX.sem/RestSemsl ).-extract sems(Rest,RestSems).(P2g)Fig.
8.
The final parsing and generation programs parseand generateconvenience interface predicates parse and generale arcprovided.Under the conditions on the lexicon given above- -  which are satisfied by the lexicon of Fig.
4 - ,programs (Plp) and (Pig) both respect the guide-consumption condition; they also respect the no-chaincondition (see remark following the description of(Pip) and (Plg)); Theorem 3.6 applies, and we have thefollowing result:/ f  parse(A.string,A.sem) (resp.gencrate(A.string,A.sem)) is called with A.stringinstantiated (re,v).
A.sem inslantialed), then allsolutions will be enumerated on baeklracking, andthe query will terminate.5.
Further researchHandl ing extraposit inn with guides.
Thespecific guides defined above for parsing and generationare not the only possible ones.
If for some reasoncertain conditions on the lexicon are to be relaxed,then more sophisticated guides must and can be defined.Thus, the guide introduced above for parsingessentially assumes that no lexical entry has an emptystring realization.
This condition may be too strict forcertain purposes, such as handl ing t races .Interestingly,  however,  the guide consumptioncondition can still be imposed in these cases, if onetakes care to suitably enrich the notion of guide.I,et us assume, fl)r instance, that there be a generalsyntactic constraint o the effect that two empty lexical6 95items cannot immediately follow each other 19.
Let usthen posit as a guide structure, instead of a list L ofwords, a couple <L,B>, where B is a variable restrictedto taking values 0 or 1.
Suppose further that thesecouples are ordered "lexicographically", ie that:VL,  L',B,B'L < L' ~ <L,B> < <L',B'>L= L'A B<B'  ~ <L,B> < <L,B'>.It is easy to see that the set of guides is then apartially ordered set which respects the descendingchain condition.Let us finally assume that term_p' is redefined inthe following manner:term p'(A,<Lin,Bin>,<Lout,Bout>) :-term(A),append( A.strin g ,Lout,Lin ) ,( A.string = \[\], Bin =l, Bout = 0; A.string #\[\] ,Bin = ,Bout = 1 ).It can be shown that this definition of guide_parse issufficient to ensure the guide-consumption condition,and therefore guarantees the termination of the parsingprocess.Variations on this idea are possible: for instance,one could define the guide as a couple <L,X> where X isa list of left-extraposed constituents ( ee \[P81\]).
Anytime a constituent is added to the extraposition list X,this operation is required to consume some words fromL, and any time a trace is encountered, it is required to"cancel" an element of X.
Because the lexicographicalorder defined on such guides in the following way:k 'L ,L ' ,X ,X 'L < L' -~ <L,X> < <L',X'>L= L' ,,~ X < X' ~ <L,X> < <L,X'>.respects the descending chain condition, the parsingprocess will be guaranteed to terminate.6.
Conclus ionThis paper shows that parsing and generation canbe seen as symmetrical, or dual, processes exploitingone and the same grammar and lexicon, and using abasic l<ft-recursion elimination transformation.Emphasis is on the simplicity and symmetry oflinguistic description, which is mostly contained inthe lexicon; compositionality appears under threeaspects: string composi t ional i ty ,  semanticcompositionality, and syntactic compositionality.
Theanalysis and generation processes each favor oneaspect: string compositionality in analysis, semanticcompositionality in generation.
These give rise to twoguides (analysis guide and generation guide), which aregeneralizations of string indexes.
The left-recursionelimination transformation described in the paper isstated using the general notion of guide, and isprovably guaranteed, under certain explicit conditions,to lead to termination of the parsing and generationprocesses.
We claim that the approach provides asimple, yet powerful solution to the problem ofgrammatical bidirectionality, and are currently testing itas a possible replacement for a more rule-oriented19 A counter-example to this implistic assumption s ot hard to come by: theperson who I john persuaded  I PRO to drink.
However, the assumption givesthe flavor of a possible s t of strategies forhandling empty categories.grammatical component in the context of the CRITTERtranslation system \[!DM88\].AcknowledgmentsThanks to Michel Boyer, Jean-Luc Cochard andElliott Macklovitch for discussion and comments.References\[D90a\] Dymetman, Marc.
A Generalized GreibachNormal Form for Definite Clause Grammars.
Laval,Qu6bec: Minist~re des Communications Canada, CentreCanadien de Recherche sur l'Informatisation duTravail.\[D90b\] Dymetman, Marc.
Lef t -Recurs ionElimination, Guiding, and Bidirectionality in LexicalGrammars (to appear).\[DI88\] Dymetman, Marc and Pierre lsabelle.1988.
Reversible Logic Grammars for MachineTranslation.
In Proceedings of the Second InternationalConference on Theoretical and Methodological Issues inMachine Translation of Natural Languages.
Pittsburgh:Carnegie Mellon University, June.\[DI90\] Dymetman, Marc and Pierre Isabel\]e.1990.
Grammar Bidirectionality through ControlledBackward Deduction.
In Logic and Logic Grammars forLanguage Processing, eds.
Saint Dizier, P. and S.Szpakowicz.
Chichester, England: Ellis Horwood.\[GKPS87\] Gazdar, Gerald, Ewan Klein, GeoffreyPullum and Ivan Sag.
1985.
Generalized Phrase StructureGrammar.
Oxford: Basil Blackwell.\[H78\] Han'ison, Michael A.
1978. lhtroductionto Formal Language Theory.
Reading, MA: Addison-Wesley.\[IDM88\] Isabelle, Pierre, Marc Dymetman andEtliott Macklovitch.
1988.
CRITTER: a TranslationSystem for Agricultural Market Reports.
In Proceedingsof the 12th International Conference on ComputationalLinguistics, 261-266.
Budapest, August.\[L87\] Lloyd, John Wylie.
1987.
Foundations of,Logic Programming, 2rid ed.
Berlin: Springer-Verlag,\[MTHMY831 Matsumoto Y., H. Tanaka, H.Hirikawa, H. Miyoshi, H. Yasukawa, 1983.
BUP: abottom-up arser embedded in Prolog.
New GenerationComputing 1:2, 145-158.\[PWS0\] Pereira, Fernando C. N. and David H. D.Warren.
1980.
Definite Clause Grammars for LanguageAnalysis.
Artificial Intelligence: 13, 231-78.\[P81\] Pere i ra ,  Fernando C. N. 198l.Extraposition Grammars.
Computational Linguistics7:4, 243-56.\[$88\] Shieber, Stuart M. 1988.. A UniformArchitecture for Parsing and Generation.
In Proceedingsof the 12th International Conference on ComputationalLinguistics, 614-19.
Budapest, August.\[SNMP89\] Shieber, Stuart, M., Gertjan vanNoord, Robert Moore and Fernando Pereira.
1989.
ASemantic-Head-Driven Generation Algorithm forUnification-Based Formalisms.
In Proceedings of the27th Annual Meeting of the Association forComputational Linguistics, 7-17.
Vancouver, BC,Canada, June.\[N89\] Van Noord, Jan. 1989.
BUG: A DirectedBottom-up Generator for Unification Based Formalisms.Working Papers in Natural Language Processing No.
4.Utrecht, Holland: RUU, Department of Linguistics.\[ZKC87\] Zeevat, H., E. Klein, and J. Calder.1987.
Unification Categorial grammar.
Edinburgh:University of Edinburgh, Centre for Cognitive Science,Research Paper EUCCS/RP-2I.96 7
