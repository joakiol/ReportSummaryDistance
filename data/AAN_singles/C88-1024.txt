A NEW DESIGN OF PROLOG-BASEDBOTTOM-UP PARSING SYSTEMWITH GOVERNMENT.BINDING THEORYHsin-Hsi Chen*,**, I-Peng Lin* and Chien-Ping Wu*** Department ofComputer Science and Information EngineeringNational Taiwan University, Taipei, Taiwan, R.O.C.
** Graduate Institute of Electrical EngineeringNational Taiwan University, Taipei, Taiwan, R.O.C.abstractThis paper addresses the problems of movementtransformation i Prolog-based bottom-up arsing system.Three principles of Government-Binding theory are employedto deal with these problems.
They are Empty CategoryPrinciple, C-command Principle, and Subjacency Principle.
Aformalism based upon them is proposed.
Translationalgorithms are given to add these linguistic principles to thegeneral grammar rules, the leftward movement grammar rules,and the rightward movement grammar rules respectively.
Thisapproach as the following specific features: the uniformtreatments of leftward and rightward movements, the arbitrarynumber of movement non-terminals in the rule body, andautomatic detection of grammar errors before parsirlg.
Anexample in Chinese demonstrates all the concepts.1.
IntroductionThe movement transformation is one of the majorproblems encountered in natural language processing.
It hasrelation to the empty constituents (traces) that exist at variouslevels of representation i natural language statements.Consider the following example in Chinese:~\ ] \ [~ ,  ~ ~ N T o (That book, I read.
)The word "N" (read) is a transitive verb, which should take adirect object.
However, the object " J J l~"  (that book) istopicalized to the first position of the sentence.
For thetreatment of this phenomenon, we cannot just write down therules:sentence --> noun-phrase,verb-phrase.verb-phrase --> transitive-verb,noun-phrase.verb-phrase --> transitive-verb.verb-phrase --> intransitive-verb.This is because many ungrammatical sentences will beaccepted.
Thus, we must provide some mechanisms in thegrammars in order to capture them.
It is still a hard work to do.Several difficulties are listed as follows:(1) The determination f movement is difficult.
That is,an element may be in a topicalization position, but it is notmoved from some other place in the sentence.
For example,(Fruit, I like.
)zk~,  ~ ~gt  ~o(As for fruit, I like banana.
)the first can be considered to be a movement phenomenon, butthe second cannot.
(2) The empty constituent may exist at many possiblepositiofis.
For example, given an n-word sentence such asCl Wl e2 w2 e 3 ... e(n_l) W(n-1) e(n) W(n) e(n+l)where w i is the i-th word and e i is an emptyconstituent, there am (n+l) possible positions from which themoved constituent may originate.
That is, for a movedconstituent (if there is any), there are so many possible mptyconstituents to co-index.
(3) Since the gap in between the moved constituent andits corresponding trace is arbitrary, it is implausible to list allthe possible movements exhaustively, and specify eachmovement constraint explicitly in the grammars.112The Government-Binding (GB) theory \[1\] providesuniversal principles to explain the movements.
Some of themare shown as follows:(1) Empty Category Principle \[7\] -A trace must be properly governed.
(2) C-command Principle \[7\]-a c-commands B iff every branching nodedominating a dominates/3.
(3) Subjacency Principle \[7\] -Any application of move - a may not cross morethan one bounding node.Summing up the above principles, we have to find a movezlconstituent toc-command a trace.
The constituent can neitherrelate to a u'ace out of its c-command domain, nor match a tracewhen more than one bounding node is crossed.
Suchprinciples nan'ow down the searching space to some extent.For example,(El) ~\]l~ tN J~ ~ ti~t'~ -  ~ To(The student that he man saw t i came.
)(E2)*t  m~-N t n~N~ ~T ~9~\[~ff~J~o(* The man that he student who t m saw t n came.
)There is a trace t i in the example (El).
Two NPs, i.e.
"N~"(the student) and "~\]g~lA. "
(the man), may co-index with it,but only the former is acceptable.
The reason is specified asbelow:(ZI') In,, \[s\]~.
(the man)~ (saw) q }~J (de)~-~i (the student) 1~ (cane)?
(asp)L .~o~(\[~i' ') ~,~the man)\[ n, ,\[st}~ (saw)tl ~ (de}~-i (the student)\]~ (came)\]' (asp)x ~ J  L.- o.
- IThe (El") interpretation violates the subjacency principle(assuming that s and n" are two bounding nodes).
Two tracesexist in the example (E2).
The traces t m and t n may co-indexwith the two NPs "~J~=" (the student) and "~\]I~{NA."
(theman), and vice versa.
However, both are wrong because of thesnbjacency principle:i-7- ?--a (E2') .\[s In' latm~ (saw)tn\]~J (de}~ nlthe student)15 (came)~ (asp)\]~ (de\]~\[~)~.
m(the man)\] L ?-~ o .-=--~(F,2' ') Is \[n' ~ tm~ (saw)tn\]/@ (de)~m(the student)\]~ (came)T (asp)\]IfJ {de)~\[l~L n (the man)I X~ _ ._ I2.
A Government-Bindlng based Logic GrammarFormalism2.1 The specifications of grammar formalismThe Government-Binding based Logic Grammar(GBLG) formalism is specified informally as follows:(I) the general grammar rules -(a) c(Arg) --> Cl(Argl),C2(Arg2),...,cn(Argn).where c(Arg) is a phrasal non-telrninal, and maybe also a bounding non-terminal,c.(Arg.)
( l< j  < n) is, a lexical terminal orJ J - _ .a phrasal non-terrmnal.
(b) c(Arg) --> Cl(Argl),C2(Arg2),...,ei(Argi),trace(TraceArg),c(i+ I ) (Argo+ 1 )),'",cn(Argn)"where the definitions of c(Arg) andcj(Argj) (l<j < n) are the same as above,trace('rraceArg) is a virtual non-terminal.The special case i=O is common.
For example, anoun phrase is topicalized from a subject position.
It isrepresented as s -- > trace,np.
(2) the leftward movement grammar rules -c(Arg) --> c 1(Arg I ),c2(Arg2),-",ei(Argi),m(Argm)<<<traee(TraeeArg),c(i+ 1 )(Arg(i+ 1)),...,cn(Argn).where the.definitions of c(Arg) andcj(Argj) ( l<j < n) arc the same as l(a),m(Argm)<<<trace(TraceArg) is a movementnon-terminal.When i=0, the movement non-terminal is the firstelement in ~he rule body.
(3) t he rightward movement grammar rules -(:(Arg) --> c i (Arg 1 ),e2(Arg2),'",ei(Argi),trace(TraceArg)>>>m(Argm),e(i+ 1 )(Argo+ 1 )),'",en(Argn)-Except that the operator '>>>' is used, the otherdefinitions are the same as those in the leftward movementrules.
It is apparent because of the uniform treatments of theleftward and the rightward movements.2.2 A sample grammarA sample grammar GBLG1 for Chinese shown belowintroduces lhe uses of the formalism:( r l )  slbm'(slbar(Topie,S)) -->topic(Topic) <<< traeeT(Topic),s(S).
( r2 ) slb~t,-(slbar(S)) --> s(S).
( r3 ) s(s(N2bar,V2bar,Par0) -->z~2bar(N2bar),v2bar(V2bar),* part(Part).
( r4 ) s(s(N2bar,V2bar)) --> n2bar0N2bar),v2bar(V2bar).
( r5 ) s(s(tt aceR(Trace),V2bar)) -->t raceR(Traee),v2bar(V2bar).
( r6 ) topic(topic(N2bar)) --> n2bar(N2bar).
( r7 ) n2bar(n2bar(Det,CL,Nlbar)) -->* det(Det),* cl(CL),nlbar0Nlbar).
( r8 )n2bar(n2bar(Nlbar)) --> nlbar(Nlbar).
( 19 ) nlbac(nlbar(Rel,N2bar)) -->tel(Rel),traceR(N2bar) >>> n2bar(N2bar).
(riO) nlbar(nlbar(N)) --> * n(N).
(rl 1) rel(rcl(S,De)) --> s(S),* de(De).
(r12) v2bar(v2bar(Adv,Vlbar)) -->* adv(Adv),vlbar(Vlbar).
(r13) v2bac(v2bar(Vlbar)) --> vlbar(V1 bar).
(r14) vlbar(vlbar(TV, N2bar)) ->  * tv(TV),n2bar(N2bar).
(r15) vlbat'(vlbar(TV,traceT(Trace)))-->* tvOW),traeeT(Trace).
(r16) vlbac(vlbarfrV,traeeR(Traee)))-->* tv(TV),traeeR(Trace).
(r17) vlbac(vlbar(iv)) --> * iv(IV).Among tlu;se grammar ules, (rl) deals with the leftwardmovement ( opiealization), (r9) treats the rightward movemen ~(relafivization), and the others am normal grammar rules.
Theheads of the grammar rules (r3), (r4), (r5), (r7), and (r8) arebounding nodes.
The virtual non-terminals traceT(Trace) andtraceR(Trace) appear in the rules (r5), (r15), and (1"16).2.3 Tramtsitive .relation of c.command theoryFor a phrasal non-terminal X, a virtual non-terminal Yand a transitive relation TR, X TRY if(1) X is the rule head of a grammar rule, and Y is anelement in its rule body, or(2) X is the rule head of a grammar ule, a phrasalnon-terminal I in its rule body, and I TR Y, or(3) there exists a sequence of phrasal non-terminals I 1,12 .....
I n, such that X TR I I TR 12 TR ... TR I n.The transitive relation TR is also a dominate relation.The c-command theory is embedded implicitly in theGBLGs if ~very grammar rules satisfy the following property:for a rule X 0 --> X1,X2,...,X m where X i is a terminalor a non-terminal, la  i ~ m, if Xi=(A<<<B) then there mustexist some Xj (i< j < m); such that Xj dominates the virtualnon-terminal B in other grammar rule.
That is, Xj TR B. Thephrasal non-terminal X 0 is the first branching node thatdominates A and Xj, and thus also dominates B.
Therefore, Ac-commands B. Xi=(B>>>A) has the similar behavior.
Rules(rl) and (r9) in grammar GBLGI  show these <<< and >>>relations respectively.2.4 Comparison with other logic programmingapproachesCompared with other logic programming approaches,especially the RLGs \[8,9\], the GBLGs  have the followingfeatures:(1) the uniform treatments of leftward movement andthe rightward movement -The direction of movement isexpressed in terms ofmovement operators <<< or >>>.
The interpretation ofmovement on-terminals A <<< B or B >>> A isIf A is a left moved constituent (or a fight movedconstituent), hen the corresponding trace denoted by B shouldbe found after (or before) A <<< B (or B >>> A).
It isillustrated in the Fig.
1.
The two trees are symmetric and thecorresponding rules are similar.
However, the rules are notsimilar in RLGs.
That is, the two types of movements are nottreated in the same way.
For the rightward movement, aconcept of adjunct node is introduced.
It says that the rightmoved constituent is found if the rule hung on the adjunct nodeis satisfied.
The operation semantics i enforced on the writingof the logic grammars.
It destroys the declarative semantics oflogic grammars to some extent.
(2) the arbitrary number of movement on-terminals inthe rule body -In our logic grammars, the number of movementnon-terminals in a rule is not restrictive if the rule satisfies theproperty specified in the last section.
The RLGs allow at mostone movement non-terminal in their rules.
The position ofmovement non-terminal is declared in the rule head.
It isdifficult for a translator to tell out the position if different types~he moved i onst it u o n t ~ / ~ ~i AA?AA Ak ......trace\[the empty constituent)XO the moved constltucntXl ... XJ nzx AA?el .
.
.
.
.
.
c).A Atrace(the empty constituent)Fio.
I Symmetric tree for leftward and riohtward movementof elements are interleaved in the rule body.
Thus, ourformalism is more clear and flexible than RLGs'.
(3) automatic detection of grammar errors before parsingFor significant grammar rules, a transitive relationTR must be satisfied.
The violation of the transitive relationcan be found beforehand uring rule translation.
Thus, thisfeature can help grammar writers detect he grammar errorsbefore parsing.I133.
A Bottom-up Parser in Prolog3.1 Problem specificationsThe Bottom-Up Parsing system (BUP) \[2,3,4\] uses theleft-coruer bottom-up algorithm to implement Definite ClauseGrammars (DCGs) \[5\].
It overcomes the problems oftop-down parsing, e.g.
the left-recursive invocation, andprovides an efficient way as Earley's and Pratt's algorithms\[3\].
However, it does not deal with the important syntacticproblem - movement transformation.
Extraposition Grarmnars(XGs) \[6\] propose extraposition lists (x-lists) to attack themovement problem, but when to extract races from x-listsbecomes a new obstacle \[8,9\].
Restricted Logic Grammars(RLGs) \[8,9\] based upon GB try to tackle the unrestrictedextraction from the x-list.
They emphasize the importance ofthe c-command and the subjacency principles during parsing.The extraction must obey these two principles.
The parsingstrategies of XGs and RLGs are all depth-first and left-to-right,thus they have the same drawbacks as DCGs do \[4\].
If theparsing strategy is left-coruer bottom-up, the following issueshave to be considered in the translation of GBLGs:(1) the empty constituent problem -The first element in the rule body, which acts as aleft-corner, should not be empty in left-corner bottom-upalgorithm.
However, the type 1 (b) of rules is common.
(2) the transfer of trace information -From Fig.
1, we know that the positions of emptyconstituents are usually lower than those of movedconstituents.
Because the parsing style is bottom-up, the traceinformation must be transferred up from the bottom.
Theconventional different list cannot be applied here.
Fig.
2 andFig.
3 illustrates the differences of data flow between top-downparsing and bottom-up arsing.e: Cl 91 c(i41) cn kHO 1' HI H(i-l) Hi Hi H{i+I} H(n-l) ~ H,' ...... ";, A ,': ........ A A \, : ,, : , .
,,"cll c12 ~ toil el2 ., ~ :c(I+I)I,...% ~nl on2FiG.
2 the data flow in tile top-down parsing~ q r o ~  (\[HI, H2 ..... Hn})HI "" H(i-I)---Hi ............ H(i?l)-,H(n-l)---Hn .......... ~ -~A,, A \ ,, ,, ,,Fig.
3 tho data flow in the bottom~uo parslnQ3.2 Data structureThe transfer of trace information is through a list calledextraposition list (x-list) and denoted by a symbol H. Thetransformation of x-list is bottom-up.
Fig.
3 sketches theconcept.
A special data structure shown below is proposed tocarry the information:\[In sequence of trace information/X\],X\]Note a mii variable X is introduced.
Based upon this notation,an empty list is represented as\[Z,Z\].
An algorithm that mergesarbitrary number of lists in linear time is designed:merge(X,Y) :- merge(X,Y,\[Z,Z\]).merge(\[\],L,L) :- !.merge(\[\[B,X\]JT\[,Y,\[A,B\]) :- merge(T,Y,\[A,XD.In the conventional list structure such as\[a sequence of trace information\]even though the difference list concept is adopted, thecomputation time is still in proportion to ml+m2+...+mn,where m i (1< i < n) is the number of elements in the i-th list.114Although our merge algorithm is the fastest, it is still aburden on the parsing.
In most cases, the predicate mergesempty lists.
That is nonsense.
To enhance the parsing speed,the merge predicate is added in which place it is needed.Observing the merge operation, we can find that it is neededonly when the number of lists to be merged is greater than one.The following method can decrease the number of x-listsduring rule translation, and thus delete most of the unnecessarymerges:Partition the basic elements in the logic grammars intotwo mutually exclusive sets: carry-H set and non-earry-H set.The elements in the carry-H set may contribute traceinformation during parsing, and those in the non-carry-H set donot introduce trace information absolutely.
The transitiverelation TR defined in the section 2.3 tells us which phrasalnon-terminals constitute the carry-H set.3.3 The translation of grammar rulesThe translation of basic elements in the GBLGs aresimilar to BUPs.
Only one difference is that an extra argumentthat carries trace information may be added to phrasalnon-terminal if it belongs to carry-H set.
Appendix lists thetranslated results of the grammar GBLG 1.3.3.1 The general grammar ulesThe general grammar rules are divided into two typesaccording as a virtual non-terminal disappears or appears in therule body:(a) c(Arg) --> Cl(Argl),C2(Arg2),...,cn(Argn)"When c is not a bounding node, e.g.
rule (r2), thetranslation is the same as that in BUP \[2,3,4\], except hat anextra argument H (if necessary) for x-list and a built-inpredicate merge are added in the new translation algorithm.This predicate is used to merge all the x-lists on the same level.The transformation f x-lists is bottom-up (only one direction)as shown in Fig.
3, Thus, the rule (a) is translated intocl(G,Argl,H1,X1,X) :-goal(c2,Arg2,H2,X1,X2),goal(cn,Argn,Hn,X(n- l),Xn),merge(\[H1,H2 ..... Hn\],H),c(G,Arg,H,Xn,X).When c is a bounding node, e.g.
rule (r4), theinformation isused to check the x-list transferred up.
Thus, anextra predicate bound is tagged to this type of rules:cl(G,Argl,H1,X1,X) :-goal(c2,Arg2,H2,X1,X2),goal(cn,Argn,Hn,X(n- 1),Xn),merge(\[HI,H2 ..... Hn\],H),bound(c,H),c(G,Arg,H,Xn,X).The predicate bound implements he subjacency principle.
Itsdefinition is:bound(C,\[X,Y\]) :- (var(X),!
;boundaux(C,X)).boundaux(C,X) :- var(X),l.boundaux(C,\[x(Trace,B ound,Direction)lXs\]) :-(var(Bound),!
,Bound=C,boundaux(C,Xs);Bound=s,C=s,!,boundaux(C,Xs);fail).A variable Bound which records the cross information isreserved for each element in the x-list.
When a bounding nodeis crossed, this variable is checked tO avoid the illegaloperation.
(b) c(Arg) --> e 1 (Arg 1),e2(Arg2),...,ci(Argi),trace(TraceArg),c(i+ 1)(Arg0+ 1)),'..,cn(Argn).where i >= O.
The rules (r5) and (r15) are twoexamples.If the left-coruer bottom-up arsing algorithm is used,the grammar rules should free of empty constituents.
Wheni=0, the grammar rule considers atrace (an empty constituent)to be the first element in the rule body.
It overrides theprinciple of the algorithm, but we can always select he firstelement c(i + 1) that satisfies the following criterion:(i) a lexieal terminal, or(2) a phrasal non-terminal, or(3) a phrasal non-terminal ina movement on-terminal,to be the left-comer and put the trace inforumtion i to an x-listbefore this non-terminal.
Thus, the translation is generalized asfollows (assume that cl is a left-comer ).ci(G,ArgI,H1,X1,X) :..goal(c2,Arg2,H2,X 1,X2),goal(ci,Argi,Hi,X(i- 1),Xi),goal(c(i+l),Arg0+l),H(i+l),Xi,X(i+l)),goal(cn,Argn,Hn,X(n-l),Xn),merge(\[H1,H2 ..... Hi,\[ \[x(trace(TraceArg),Bound,D)lZ\],Z\],H(i+I),...,Hn\],H),c(G,Arg,H,Xn,X).Here, the trace information is placed between Hi and H(i+l).Summing up, the virtual non-terminal is represented asa fixedfommt:x(trace(l'raceArg),Bound,Direction)and placed into x-list via merge operation.
The position inx-list is reflected from the original rule.3?3.2 The leftward movement grammar rulesThe leftward movement grammar rnles can begeneralized as below:c(Arg) o-> c 1 (Arg 1),c2(Arg2) .....ci(Argi)<<<trace(TraceArg),c(i+ 1)(Arg(i+ 1)) .....cn(Argn).The rule (rl) is an example.
Its translation is shown asfollows:cl(G,Argl,H1,X1,X) :-goal(c2,Arg2,H2,X1,X2),goal(ci,Argi,Hi,X(i-1),Xi),goal(c0+l),Arg(i+l),H(i+l),Xi,X(i+l)),goal(cn,Argn,Hn,X(n- 1),Xn),merge(\[H(i+l) ..... Hn\],T1),cuLtrace(x(trace(TraceArg),Bound,left),T1,T2),merge(\[H1,H2,...Hi,T2\],H),c(G,Arg,H,Xn,X).Comparing this translation with that of general grammar rules,we can find a new predicate cut_ .trace is added.
The cut traceimplements ile c-command principle, and its definition i~.cnLtrace(Trace,\[Y,X\],\[Y 1 X\]) :-(var(Y),!,(l'race=x(TraceIn fo,Bound,left), !
;fail);cut traceaux(Trace,Y,Y1)).cnLtraceaux(Trace,\[TracelXs\],Xs) :- !.cut  traceaux(Trace,\[HIX\],\[HIY\]) :-(vat(X),!,(Trace=x(TraceInfo,Bound,left),!
;fail);cut_traceaux(Tracc,X,Y)).The cut trace tries to retract a trace from x-list if a movementexists.
~landarin Chinese has many specific features that oilierlanguages do not have.
For example, topic-comment structuredoes not always involve movement transformation.
The firstcut traeeauz chmse matches the trace information with the x-list~ransferred f,'om the bottom on its right part.
The secondcut traceatrc tells us that if the expected leftward trace cannotma~h one of the elements in the x-list, then it will be drop out.The x-list is not changed and transferred up.
The concept isdemonstrated in Fig.
4.
It also explains why we can detectgrammar errors before parsing.
In summary, each movementnon-terminal is decomposed into a phrasal non-terminal nd avimml non-.tet~ninal.
The phrasal non-terminal is translated the'same as before.
The vktual non-terminal is represented asx( tr ace(l YaceA rg ),Bound, left )in this case, however, cut_trace is involved instead of merge.3.3.3 The r ightward movement grammar rulesBecause we treat the leftward and the rightwardmovement grammar rules in a uniform way, the translationalgorithm of both are similar.
The rightward movementgr~n~nar ruks are wifll the following format:c(Arg) --> c l(Arg l),C2(Arg2) .....lxace(TraceArg)>>> ci(Argi),c(i+l)(Arg(i+l)),'",cn(Argn)"The rule (r9) is an example.
"Itle corrsponding translated resultcl(G,\[Argl\],HI,X1,X) :-goal(c2,\[ Arg2\],H2 X 1 ,X2),eHk.
.
H(i-l) Ill1if there is a t raca  the expectedin thls range, le f t -movedthe corresDondln Q constltuentmoved elemsnt ison the uDDer levele( l+ l )A AIa trace should be found inthis range if theoxpoctat I on succeedsFlg.
4 the sketch o~ the translat ionof the leftward production rulesgoal(c(i-1),\[Arg0-1)\],H(i-1),X(i-2),X(i_l)),merge(\[H1,H2 .....H(i-1)\],T1),cut_trace(x(trace(TraceArg,Bound,right)),TI,T2),goal(ci,\[Argi\],Hi,X(i- 1),Xi),goal(cn,\[Argn\],Hn,X(n-1),Xn),merge(\[T2,Hi ..... Hn\],H),c(G,\[Arg\],I-t,Xn,X).The translation is very apparent for the symmetric property ofthe leftward and the rightward grammar rules illustrated in Fig.4 and Fig.
5.
A slight difference appears in the definition of thecc(i-l)i A <p1a trace should befound in this rangeen1the r ight -moved if there Is a traceconstituent in this range,the corraspondlngmoved element issn the upper levelFioo f. 5 the sketch of the translat ionthe rightward production ru lespredicate cut trace.
It shows an important linguisticphenomenon i -Mandarin Chinese: 'Relativization is always amovement ransformation.'
Thus, if we expect a trace andcannot find a corresponding one, failure is issued.
Thedirection information in x(trace(TraceArg),Bound, right), i.e.fight, tells out the difference between the leftward and therightward movements.
\](n general, we allow both leftwardmovement and rightward movement toappear in the same rule.A new predicate intersection is introduced to couple these twotranslations.3.4  Invocat ion  of the pars ing  sys temThe parsing system is triggered in the following way:goal(a start non-terminal,\[a sequence of arguments\],an empty :~-list,\[a sequence of  input string\],\[\]).In GBLG1, the invocation is shown as follows:goal(sl bar,\[ParseTree\],\[Z~I,\[input sentence\],\[\]),Par(Z).Because an empty x-list is represented as\[Z,Z\] (Z: a variable)in our special data structure shown in Section 3.2, var(Z)verifies its correctness.
For example, to parse the Chinesesentence "~Jl~  A.
~t~ \[t.~ 3K ?"
(the student that thatman saw came), we trigger tile parser by calling:?- goal(slbar,\[S lbar\], \[Z,Z\], \[ ' J J~', '~', ' J~', '~tE ','~ ' , '~ ' , '~ ' , '  Y '\],\[\]),vat(Z)./* 7- goal(s 1 bar,\[S 1 bar\],\[Z,Z\],\['that','man','saw','dc','student','ca me','aspect'\],\[\] ),var(Z ) .
, /1154.
ConclusionThis paper addresses the problems of movementtransformation i Prolog-based bottom-up arser.
Threeprinciples of Government-Binding theory are considered todealwith these problems.
They are Empty Category Principle,C-comr0and Principle and Subjacency Principle.
A sequenceof translation rules is given to add these linguistic principles tothe general grammar rules, the leftward movement grammarrules, and the rightward movements grammar rulesrespectively.
The empty constituent problem is solved in thispaper to allow the trace to be the first element in the grammarrule body.
A special data structure for extraposition list isproposed to transfer the movement information from the bottomto the top.
Based upon this structure, the fastest mergealgorithm is designed.
Those unnecessary merge predicatescan be eliminated with the help of transitive relation.
Thus, thenew design not only extends the original bottom-up arsingsystem with the movement facility, but also preserves theparsing efficiency.References\[ 1 \] N. Chomsky, Lectures on Government and Binding.Foris Publication, Dordrecht, Holland, 1981.\[ 2 \] Yuji Matsumoto, Hozumi Tanaka, et al, "BUP: ABottom-Up Parser Embedded in Prolog," NewGeneration Computing, Vol.
1, No.
2, 1983, pp.145-158.\[ 3 \] Yuji Matsumoto, Masaki Kiyono, and Hozumi Tanaka,"Facilities of the BUP Parsing System," in Dahl, V. andP.
Saint-Dizier, Natural Language Understanding andLogic Programming, 1985, pp.
97-106.\[ 4 \] Yuji Matsumoto, Hozurni Tanaka, and Masaki Kiyono,"BUP: A Bottom-Up Parsing System for NaturalLanguages," in Warren, D.H.D.
and M.
Canegham(eds.
), Logic Programming and Its Applications, 1986,pp.
262-275.\[ 5 \] F. Pereira and D.H.D.
Warren, "Definite ClauseGrammars for Language Analysis - A Survey of theFormalism and a Comparison with Augmented~Transition Networks," Artificial Intelligence, Vol.
13,1980, pp.
~!-278.
,,\[ 6 \] F. Pereira~,Extraposition Grammars, American Journalof CompU~?tion Linguistics, ~Vol.
7, No.
4, 1981, pp.243-256.\[ 7 \] P. Sells, Lectures On Contemporary S ntactic Theories,Center for the Study of Language and Information,1985.\[ 8 \] E.P.
Stabler, Jr,, "Restricting Logic Grammars," Proc.of the AAAI Conference, 1986, pp.
1048-1052.\[ 9 \] E.P.
Stabler, Jr., "Restricting Logic Grammars withGovernment-Binding Theory," ComputationalLinguistics, Vol.
13, No.
1-2, January-June, 1987, pp.1-10.AppendixBased upon the translation algorithms pecified inSection 3, the logic grammar GBLG1 is translated as below.The clause (ti) is the relevant translated result of the grammarrule (ri).
Note the codes have been optimized.
Thoseunnecessary merge operations are deleted from the translatedresults.
( tl ) topic(G,\[Topic\],H1,X1,X) :-goal(s,\[S\],H2,X 1 , 2),cut_trace(x(traceT(Topie),Bound,left),H2,T1 ),merge(\[H1,T1\],H),slbar(G,\[slbar(Topic,S)\],H,X2,X).
( t2)  s(G,\[S\],H,X1,X) :- slbar(G,\[slbar(S)\],H,X1,X).
( t3 ) n2bar(G,\[N2bar\],H1,X1,X) :-goal(v2bar,\[V2bar\],H2,X1,X2),lookup(part,\[Part\],X2,X3),merge(\[H1,H2\],H),bound(s,H),s(G,\[s(N2bar,V2bar,Par t)\] ,H,X3,X).
( t4 ) n2bar(G,\[N2bar\],H1,X1,X) :-goal(v2bar,\[V2bar\],H2,X 1 ,X2),merge(\[H1,H2\],H),bound(s,H),s(G,\[s(lq2bar,V2bar)\],H,X2,X).116( t5 ) v2bar(G,\[V2bar\],H1,X1,X) :-merge(\[\[\[x(traceR(Trace),Bound,righ01Z\],Z\],HI\],H),bound(s,H),s(G,\[s(traceR(Trace),V2bar)\],H,X I ,X).
( t6 ) n2bar(G,\[N2bar\],H,XLX) :-topic(G,\[topic(N2bar)\],H,X I X).
( t7 ) det(G,\[Det\],X1,X) :-lookup(cl,\[CL\],X1,X2),goal(nl bar,\[N lbar\],H,X2,X3),bound(n2bar,H),n2bar(G,\[n2bar(Det,CL,N 1 bar)\],H,X3,X).
( t8 ) nlbar(G,\[Nlbar\],H,Xl,X) :-bound(n2bar,H),n2bar(G,\[n2bar(Nlbar)\],H,X1,X).
( t9 ) reI(G,\[Rel\],H1,X1,X) :-eut_trace(x(tmeeR(N2bar),Bound,right),H1,T1),goal(n2bar,\[N2bar\],H2,X 1,X2),merge(\[T1,H2\],h0,nlbar(G,\[nlbar(Rel,N2bar)\],H,X2,X).
(tl0) n(G,\[N\],X1,X) :- nlbar(G,\[nlbar(N)\],\[Z,Z\],X1,X).
(t l l)  s(G,\[S\],H,X1,X) :-lookup(de,\[De\],X1,X2),rel(G,\[reI(S,De)\],H,X2~X).
(t12) adv(G,\[Adv\],X1,X) :-goal(vlbar,\[V 1 bar\],H,X 1,X2),v2bar(G,\[v2bar(Adv,V 1 bar)\] ,H,X2,X).
(t13) vlbar(G,\[Vlbar\],H,X1,X) :-v2bar(G,\[v2bar(V 1 bar)\],H,X 1,X).
(t14) tv(G,\[TV\],X1,X) :-goal(n2bar,\[N2bar\],H,XI,X2),vlbar(G,\[vlbar(TV,N2bar)\],H,X2,X).
(t15) tv(G,\[TV\],X!,X) :-v 1 bar(G,\[v 1 bar(TV,traceT(Traee))\],\[\[x(traeeT(Traee),Bound,left)lZ\],Z\],H,XI,X).
(t16) w(G,\[TV\],X1,X) :-v 1 bar(G,\[v 1 bar (TV,tr;aceR(Traee))\],\[\[x(traceR(Trace),Bound,right)lZ\],Z\],H,X 1 X).
(t17) iv(G,\[IV\],X1,X) :- vlbar(G,\[vlbar(IV)\],\[Z,Z\],X1,X).
