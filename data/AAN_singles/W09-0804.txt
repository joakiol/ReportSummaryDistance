Proceedings of the EACL 2009 Workshop on Computational Approaches to Semitic Languages, pages 27?35,Athens, Greece, 31 March, 2009. c?2009 Association for Computational LinguisticsA Hybrid Approach for Building Arabic DiacritizerKhaled Shaalan Hitham M. Abo Bakr Ibrahim ZiedanThe Faculty of Informatics  Computer & System Dept Computer & System Dept.The British University in Dubai Zagazig University Zagazig Universitykhaled.shaalan@buid.ac.ae hithamab@yahoo.com i.ziedan@yahoo.comAbstractModern standard Arabic is usually writtenwithout diacritics.
This makes it difficult forperforming Arabic text processing.
Diacritiza-tion helps clarify the meaning of words anddisambiguate any vague spellings or pronun-ciations, as some Arabic words are spelled thesame but differ in meaning.
In this paper, weaddress the issue of adding diacritics to undia-critized Arabic text using a hybrid approach.The approach requires an Arabic lexicon andlarge corpus of fully diacritized text for train-ing purposes in order to detect diacritics.
Case-Ending is treated as a separate post processingtask using syntactic information.
The hybridapproach relies on lexicon retrieval, bigram,and SVM-statistical prioritized techniques.We present results of an evaluation of the pro-posed diacritization approach and discuss var-ious modifications for improving the perfor-mance of this approach.1 IntroductionModern Arabic written texts usually includeArabic scripts without short vowels and otherdiacritic marks.
This often leads to considerableambiguity since several words that have differ-ent diacritic patterns may appear identical in adiacritic-less setting.
Educated modern Arabicspeakers are able to accurately derive/restorediacritics in a document.
This is based on thecontext and their linguistic knowledge of Arabic.However, a text without diacritics brings diffi-culties for Arabic readers.
It is also problematicfor Arabic processing applications, such as text-to-speech, speech-to-text, and text analysis,where the lack of diacritics adds another layer ofambiguity when processing the input data.
As anexample, full vocalization of Arabic text is re-quired for text-to-speech applications, where themapping from graphemes to phonemes is com-plicated compared to languages such as Englishand French; where there is, in most cases, simpleone-to-one relationship.
Nevertheless, usingArabic text with diacritics has proven an im-provement in the accuracy of speech-recognitionapplications (Zitouni et al, 2006).The problem of automatic restoration (i.e., deri-vation) of the diacritic signs of Arabic text canbe solved by two approaches.
The first is a rule-based approach that involves a complex integra-tion of the Arabic morphological, syntactic, andsemantic tools with significant efforts to acquirerespective linguistic rules.
A morphological ana-lyzer gets the breakdowns of the undiacritizedword according to known patterns or templatesand recognizes its prefixes and suffixes.
A syn-tax analyzer applies specific syntactic rules todetermine the case-ending diacritics, usually, bytechniques such as finite-state automata.
Seman-tics handling helps to resolve ambiguous casesand to filter out hypothesis.
Hence, rule-baseddiacritization approach is a complicated processand takes longer time to process an Arabic sen-tence which is naturally long.
The second ap-proach is the statistical approach that requireslinguistic resources such as a large tagged cor-pus (in particular a TreeBank) to extract lan-guage statistics for estimating the missing dia-critical marks.
The approach is fully automatedand does not require efforts to acquire respectivelinguistic knowledge.
Results are usually im-proved by increasing the size of the corpus.It is worth noting that identifying some of thediacritic marks can be seen as a morphologicalproblem and the relevant letters are called inter-nal characters in this paper.
Moreover, diacriticmark of the last character of the Arabic is calledcase ending (?????
???????).
The identification ofcase-ending diacritics is determined at the syn-27tactic processing level (case ending depends onthe position of the word within the sentence)whereas detecting the internal diacritics is de-termined at the morphological processing level.In widespread cases, the case-ending come in-ternally rather than with the last character suchas "?????????"
(by-her-pen).In this paper, an Arabic diacritizer is proposed.Internal diacritization was restored by a modelbased on the synergy of three different tech-niques:  retrieval of unambiguous lexicon en-tries, retrieval of two-word expression from apreprocessed diacritized bigram database, and aprediction using statistical approach based onSVM-learning technique, (Cristianini and Tay-lor, 2000) and (Hearst, 1998).
The later tech-nique tokenizes a text and provides a ReducedTag Set (RTS) of Part of Speech (POS)1 for eachtoken.
The tags are used to restore the diacritics.From the obtained diacritization results of thesetechniques, the most consistent one is selected.The Case-Ending diacritization is treated as apost-process of the internal diacritization taskusing the same machine learning approach thatwas trained on Base phrase (BP)-Chunk as wellas POS features of individual tokens with correctcase-ending tags.
A utility has been designed toextract correct case-ending tags from the LDC?sArabic Tree Bank (ATB).This paper presents a new simple but efficientapproach that gets results comparable with thebest performing systems, to our knowledge,(Habash and Rambow, 2007).
The achieved re-sults are: 11.795% Word Error Rate (WER) andabout 3.245% Diacritics Error Rate (DER).
Thepaper is structured as follows.
Section 2 reviewsclosely related work.
Section 3 introduces theproposed diacritization approach.
Section 4 de-scribes the training process.
Section 5 presentsthe evaluation experiment.
Section 6 concludesthe article and gives direction for future re-search.2 Related WorkDiacritic restoration has been receiving increas-ing attention and has been the focus of severalstudies.
In El-Sadany and Hashish (1988), a rule-1 List of POS and RTS that are used here can be found at:http://www.ircs.upenn.edu/arabic/Jan03release/arabic-POStags-collapse-to-PennPOStags.txtbased approach that uses morphological analyzerfor vowelization was proposed.
Another, rule-based grapheme to sound conversion approachappeared in 2003 by Y. El-Imam (2003).There are many related works dealing with theproblem of Arabic diacritization in general (Zi-touni et al, 2006), (Habash and Rambow, 2007),(Ananthakrishnan, 2005), (Kirchhoff, 2005).
and(Elshafei et al 2006); all trying to handle thisproblem using statistical approaches but theytend to handle the case ending diacritic mark inthe same way they used to handle the internal(any letter but the last) diacritics.
In our proposedapproach we differentiate between them as thedetection of case-ending diacritics is a syntactic-based problem whereas detecting the internaldiacritics is a morphological-based problem.
Ha-bash et al (2007) introduced a system calledMADA-D that uses Buckwalter?s Arabic mor-phological analyzer where they used 14 taggersand a lexeme-based language model.
MADA isso far the best performing system to date.
It hasbeen reported that it achieved a WER of 14.9%and a DER of 4.8%.3 The Proposed Diacritization Ap-proachThe Arabic internal diacritization problem willbe addressed from three different proposed tech-niques, each of which has its own strengths andweaknesses.
Such techniques are integrated tooptimize the performance of the Arabic diacritiz-er and to a large extent remove ambiguities.These proposed techniques are: 1) Lexicon Re-trieval, 2) diacritized bigram, and 3) SVM-statistical-based diacritizer.
Then, the case end-ing diacritization will be determined after theinternal discrimination is performed.
Figure 1shows the architecture of Arabic DiacritizationSystem.28ReceiveundiacritizedstatementTokenizestatementGet POS taggingGet BP-ChunkGet Case EndingSearch in ArabicLexicon for Diacword by usingthe POSReturn CaseEnding foreach TokenReturnDiac WordWord ifexistSplit Eeach wordwith its POSSearch for singleresult in theLexiconSearch InDiacritizedBigram DatabaseReturnDiac Wordif existReturnDiacWords ifexistReceiveselected internalDiacritizedWordsSearch for tokenin Internaldiacritized wordto decide theposition of Case-EndingFullyDiacritizedStatementAdd Case Endingin correctpositionGet Correct InternalDiacritics using DecisionMaker moduleSplit Statementto wordsSplit Statementto BigramsResults From SVMStatistical ModuleFigure 1: Arabic Diacritization SystemLexicon Retrieval Technique (LR)Lexicon retrieval approach tries to find the result(diacritized word) returned from an Arabic lex-icon for a specific input undiacritized word.
Ifonly one diacritization is returned, then there isno ambiguity.
This solution is final and we donot need to look at the results form the other twotechniques.
However, this situation is usuallyrare but when it occurs the result is confirmed.Diacritized Bigram Technique (DB)When more than one solution is retrieved for anunvowelized input word, i.e., ambiguous diacrti-cazation, the bigram technique comes into play.The idea behind this technique is to make use ofthe multiword expressions in Arabic texts.
Whensuch expressions are analyzed as separate words,the possibility for ambiguity is increased.
In thiswork, we considered a two-word expression (bi-gram) that usually occurs with high frequency inArabic texts such that one word can determinethe diacritization of the other.
Once the expres-sion is identified and diacritized correctly, it addsa sense of certitude to the diacritization whichsignificantly reduces the ambiguity.
Table 1shows an extraction of the diacritized bigramdatabase.1stWord2ndWordCat Diac.
1stWordDiac.
2ndWord???????
???????
3 ?????
????????????????
?????????
1 ???????
?????????????????
??????
1 ???????
????????
??????
1 ???
?????????????????
????????
1 ???????
????
?Table 1: Diacritized Bigram DatabaseSVM-Statistical Technique (SVM)The previous two diacritization techniques canbe viewed as a lookup process; either for a wordin the lexicon or for a two-word expression in alarge bigram database.
However, statistical me-thods can be viewed as general approaches be-cause they are heavily dependent on the Arabicsyntactic analysis that was manually performedby Arabic specialists.The main idea of this approach is to tokenizeand automatically annotate tokens with the cor-rect POS tags.
Then, by searching the Arabiclexicon using a token and the correspondingPOS, the correct diacritization result can reached,even though multiple ambiguous words are re-trieved from the lexicon.Buckwalter's morphological analyzer (Buck-walter, 2002) takes an inflected Arabic word andreturns fully diacritized ambiguous words.
Weclaim in our approach that only internal diacriticsshould be handled morphologically whereas caseending should be handled syntactically.
Hence,we have used the Buckwalter's morphologicalanalyzer after removing all case ending diacriticsfrom the suffixes table in order to prevent thegeneration of the case ending output.
One advan-tage of this modification is to considerably re-duce the number of alternatives (i.e., overgenera-tions) returned from the morphological analyzer.Another advantage is that some NLP tasks, suchas Information Retrieval, require only diacriticrestoration of internal (lexical) vowels which canbenefit from such modification.
For example,given the word ?
????
?
to this morphologicalanalyzer, it returns 7 results that have the sameinternal diacritics with one having no case-ending and 6 having different case-ending dia-critics.
Consequently, splitting the diacrizationinto two stages (internal and case ending) willavoid such morphological ambiguity and at thesecond stage the syntactic case ending is treated29separately as a post processing which ultimatelyleads to a fully efficient diacritized Arabic word.A Hybrid of All Internal TechniquesWhen we apply each of the three proposedtechniques on an input undiacritized Arabic sen-tence we may get different diacritization resultsfor each word within this sentence.
The selectioncriteria depend on the agreement among thesetechniques.
Two or more matched results candetermine the discrimination of a word.
In caseof disagreement, a priority is applied in the fol-lowing, highest to lowest, order: lexicon retriev-al, bigram and SVM-Statistical technique respec-tively.
If no solution is reached from all tech-niques, the undiacritized input word is returned.Case Ending ModelThe main idea is to relate the case-ending foreach token with its POS and chunk position aswell as its position within the sentence (AboBakr et al, 2008).
We made a training usingSupport Vector Machines (SVM) technique withundiacritized tokens.
This technique involves anArabic Treebank.An Arabic Treebank usually created on top ofa corpus that has already been annotated withPOS tags.
We have used the Penn Arabic Tree-bank (ATB) (Maamouri et al 2004).
ATB hasbegun in the fall of 2001 and has now completedfour full releases of morphologically and syntac-tically annotated data: Version 1 of the ATB hasthree parts with different releases; some versionslike Part 1 V3.0 and Part 2 V 2.0 are fully diacri-tized trees.
For example, consider the followingundiacritized statement:The following tree representation is partiallyextracted from the tree fileU-MAAH_UM.ARB_20020120-a.0007.tree that is partof  the ATB Part 2 V.2.Figure 2 shows a graphical representation of thistree2.
Case-ending is indicated, ovals in Figure 2,by one of the following tags: NCE,CASE_DEF_GEN, CASE_INDEF_GEN,CASE_DEF_NOM, CASE_DEF_ACC,CASE_INDEF_NOM, CASE_DEF_ACCGEN,CASE_INDEF ACC, andCASE_INDEF_ACCGEN.Table 2 gives the complete description of thesetags.Figure 2: A graphical representation of an Arabic sen-tence extracted from the Penn Arabic TreebankCase Ending Tags DescriptionNCE No Case EndingCASE_DEF_GEN  Kasra  ?
?CASE_INDEF_GEN  kasratan ?
?CASE_DEF_NOM Damma ?
?CASE_DEF_ACC Fat-ha ?
?CASE_DEF_ACCGEN  Maftouh bi Kasra ?
?CASE_INDEF_NOM  Damatan  ?
?CASE_INDEF_ACCGEN  Fathatan ??
or  ?
?CASE_INDEF_ACC Fathatan ?
?Table 2: Description of Case-Ending tags found inATBA sequence of tokens with its POS, BP-chunkand Case-Ending is extracted from Treebank us-ing YamCha File Creator (YFC utility3).
The2 This graphical representation of the Treebank files is ex-tracted from our Treebank Viewer tool that is freely availa-ble at: http://www.staff.zu.edu.eg/hmabobakr/3 We developed YFC utility to extract information fromPenn Arabic Treebank ATB and produce the Yamcha stan-dard input format to be able to use this information in thetraining process.http://www.staff.zu.edu.eg/hmabobakr/page.asp?id=53"?????
??????
???
???????
?????
????
??????
????????"....
"llywm AlvAny ElY AltwAly tZAhr TlAb(S (S (S (PP-TMP (PREP li-) (NP (NP(DET+NOUN+CASE_DEF_GEN -Al+yawom+i)(DET+ADJ Al+vAniy)) (PP (PREP EalaY) (NP(DET+NOUN Al+tawAliy))))) (VP(VERB_PERFECT+PVSUFF_SUBJ:3MS NAl+musolim+iyona) ?..30basic approach used in YFC is inspired by thework of Sabine for Treebank-to-chuck conver-sion script (Sang and Buchholz, 2000), which wehave extended to be used with Arabic.
This hasrequired adding some features like Case-Ending.The output produced from YFC utility for caseending training process is shown in Table 3.Token POS Chunk Case EndingL IN B-PP NCEAl DT B-NP NCEywm NN I-NP CASE_DEF_GENAl DT I-NP NCEvAny JJ I-NP NCEElY IN B-PP NCEAl DT B-NP NCEtwAly NN I-NP NCEtZAhr VBD B-VP NCETlAb NN B-NP CASE_INDEF_NOMYntmwn VBP B-VP NCE<lY IN B-PP NCEjmAEp NN B-NP CASE_DEF_GENTable 3: Training file format for detecting Case-Ending4 Training of the Arabic DiacritizerThe diacritization system we present here istrained and evaluated on the LDC?s Arabic Tree-bank of diacritized news articles ?
Part 2 v2.0:catalog number LDC2004T02 and 1-58563-282-1.
The corpus includes complete vocalization(including case endings).
We introduce here aclearly defined and replicable split of the corpus,so that the reproduction of the results or futureinvestigations can accurately and correctly beestablished.
This corpus includes 501 storiesfrom the Ummah Arabic News Text.
There are atotal of 144,199 words (counting non-Arabic to-kens such as numbers and punctuation) in the501 files - one story per file.
We split the cor-pus into two sets: training data and developmenttest (devtest) data.
The devtest data are the filesended by character ?7?
like?UMAAH_UM.ARB_20020120-a.0007.tree?and its count was 38 files.
The remaining filesare used for training.5 EvaluationFor Arabic tokenizer, POS tagger, BP-chunk,and statistical Case-Ending, we used a standardSVM with a polynomial kernel of degree 2 andC=1.0.
Evaluation of the system was done bycalculating the performance using the standardevaluation measures: accuracy, precision, recall,and the f-measure4.We used YamCha (Kudo andMatsumoto, 2003) implementation of SVMs.Diacritization evaluation of our experiments isreported in terms of word error rate (WER), anddiacritization error rate (DER)5.We conducted experiments to:1.
Evaluate the impact of tokenization, part-of-speech, chunking, and case-ending parame-ters on the training models, see Section 5.1.2.
Evaluate the impact of including and ex-cluding the case-ending on the performanceof the Arabic diacritizer, see Section 5.2.3.
Compare our approach of Tokenization andPOS tagger with the ArabicSVMTools tag-ger using different parameters and fea-ture(s), see Section 5.2.5.1 Results of Tokenization, Part-of-Speech,BP-chunking, and case-endingThe results obtained for tokenization (TOK),part-of-speech (POS), and Chunking (BP-chunk)tasks are comparable with the results presentedin the most notable literature (Diab et al 2007;Diab et al 2004).
We did some modifications ofthe feature list to compromise between the speedand accuracy.
The case ending task is novel, anddid not get enough handling in other research.
Itachieved acceptable results.Evaluation of the impact of the tokenizationparameter on the training processTwo tokenization tasks was performed onwindow sizes of -2 /+2 and -4/+4, for illustrationsee TOK1 and TOK2 tasks in Figure 3.
For eachwindow size there are two columns.
The first onecontains a sequence of Buckwalter's translite-rated Arabic letters shown from top to bottomthat resembles the left-to-right Arabic writingsystem (e.g., ?.wyblg Eddhm ?..
are the trans-literation of the Arabic words ...?????
?????...
, re-spectively).
The second column contains the cor-responding tokenization tags presented by In-side-Outside-Beginning (I-O-B) of a chunk, i.e.,4 These results were computed using our developed evlua-tion tool that was developed and tested against EvaluationTools for CONLL 2000http://www.cnts.ua.ac.be/conll2000/chunking/conlleval.txt.5 These results were computed using our developed evalua-tion tool that was developed based on information presentedin (Habash and Rambow, 2007).31prefix (PRE), word (WRD), and suffix (SUFF),respectively, (Kudo and Matsumoto, 2003).
Thetokenization tags are: B-PRE1, I-PRE1, B-PRE2,I-PRE2, B-PRE3, I-PRE3, B-WORD-1, I-WORD-1, B-SUFF1, I-SUFF1 and O for outsideword boundary.
We made segmentation for thedeterminer "Al" ?
"??".
This segmentation is im-portant for the case-ending detection for: the ad-jective and the noun it modifies ??????
????????
?,1st and 2nd Particle of the construction Annexedand Annexed noun ???????
?
??????
????
?, and Nu-nation  ???????"
".
The result of the evaluation of thetwo tokenization tasks is shown in Table 4.Figure 3: Tokenization evaluation with window sizesof -2/+2 and -4/+4Measurement TOK1 TOK2Accuracy 98.59% 99.56%Precision 97.17% 98.95%Recall 97.29% 99.06%F-Measure 97.23% 99.00%Table 4: Tokenization results with window sizes of-2/+2 and -4/+4Evaluation of the impact of the part-of-speechparameter on the training processA POS tagging (POS1) task was performed on asequence of tokens produced from the tokeniza-tion task.
A window size of +2/ -2 tokens centeredat the focus token.
We made another POS tag-ging (POS2) task by adding the last two charac-ters as an extra feature for enhancing the accura-cy of some tags such as plural or dual noun(NNS) and singular noun (NN).
For illustrationsee POS1 and POS2 tasks in Figure 4.
The resultof the evaluation of the two POS tagging tasks isshown in Table 5.Figure 4: POS evaluations with window size of -2/+2;with and without using the last two characters as anadded featureMeasurement POS1 POS2Accuracy 94.34% 95.97%Table 5: POS results for different window sizesEvaluation of the impact of chunking parame-ters on the training processThe chunking task was performed on tokens pro-duced from the tokenization and POS tasks.
Theevaluation included 16 tag-set (features) of awindow size of -2/+2 for both tokens and POS,and only the previous two chunk tags.
For illu-stration see Figure 5.
The result of the evaluationof is shown in Table 6.Figure 5: Chunk evaluation with window size of -2/+2Measurement ResultsAccuracy 95.52%Precision 93.19%Recall 95.90%F-Measure 94.52%Table 6: Results for BP-chunk32Evaluation of the impact case-ending parame-ters on the training processTwo case-ending tasks were performed.
Thefirst case-ending (CE1) task was discussed in aprevious work (Abo Bakr et al, 2008).
It wasperformed on window size of -3/+3 and 8 tagsets.
For illustration see Figure 6.Figure 6: Case-ending evaluation with window size of-3/+3The evaluation has achieved 95.35% in accu-racy.
We noticed that in some cases the systemcan produce unacceptable case ending (e.g.,Tanween on the sound plural masculine ?
?????????
???????)
that we could improved by:1- Enhancing the POS tagging (POS2) taskby adding last two characters (L2Ch) asa feature.2- Enhancing the case ending (CE2) task byadding the last character (LCh) and thelast two characters (L2Ch) as features.Figure 7: Case-Ending evaluation with widow size of-3/3 and using the last two characters (L2Ch) and thelast character (LCh) as added featuresThe following modifications were done toconduct the second case-ending (CE2) task, forillustration see Figure 7:?
Adding the last two characters (L2Ch) andthe last character (LCh) as features.?
Enhancing the case ending representation byadding an extra tagset for ?indeclension ofthe fatha?
- ?????
???
??????
that is presented inTreebank as ?PVSUFF_SUNJ:3MS?.Table 7 presents the results obtained for the twocase ending (CE1 and CE2) tasks.
As shown, theperformance is improved.Measurement CE1 CE2Accuracy 95.35% 96.57%Table 7: Results of Case Ending evaluation5.2 Diacritization ResultsIn this section, we compare our approach of To-kenization and POS tagger with Ara-bicSVMTools tagger.
We evaluate the impact ofincluding and excluding different techniques ofinternal diacritization and case-ending on theoverall performance of our Arabic diacritizer.
Inparticular, we show the results from the follow-ing techniques:  lexicon retrieval (LR), diacri-tized bigram (DB), SVM, and case-ending (CE),techniques.
Results for different combinationswere reported and compared.
All results wereperformed using TOK1, POS1, and CE1 tasksand shown in Table 8 through Table 10.Including CE Excluding CE6Technique WER DER WER DERLR 90.35% 40.85%?
31.38%?
36.67%SVM 69.94% 23.36%?
16.28%?
11.36%Table 8: WER and DER for Lexicon Retrieval andStatistical SVM techniques for including and exclud-ing case endingTable 8 shows that excluding case ending (letter)from the evaluation gives better results in termsof WER and DER.As shown in Table 9, it is noted that includingthe case ending technique has enhanced dramati-cally the results of diacritic restoration.
Furtherenhancement was obtained by adopting a newmethod to restore internal diacritics, when all ofthe hybrid techniques fail to return any solution;the new method, we call it ?accepts any?
(AA),6 Results for ?Excluding CE?
are calculated manually for alimited number of test files because Case-Ending diacritic isnot always at the last character.33is used for arbitrary accepting results from lex-icon.Technique WER DERLR+DB?
35.81%?
9.77%LR+DB+SVM?
33.51%?
7.99%LR+DB+SVM+CE 17.31% 4.41%LR+DB+SVM+CE+AA 16.66%?
3.84%Table 9: WER and DER for different combination ofdiacritization techniquesTo investigate the effect of enhancing POS tag-ging on the internal SVM statistical technique,we adapted our modules to interact with Ara-bicSVMTools, the up-to-date most famous freetagger7.
Some modification were made to ourmodule to accept the article ?Al?
as it may occuras radical letters inside the Noun (we handle ?Al?separately in our tokenizer).
We evaluated ourstatistical diacritization approach using Ara-bicSVMTools and our proposed tagger.
The useof ArabicSVMTools has improved the perfor-mance of our diacrtizer as shown in Table 10.ArabicSVMTools gave better results than ourproposed tagger.
However, our proposed taggeris about 4 times faster than ArabicSVMToolsbecause we use less features.Tagger WER DERArabicSVMTools  12.79% 9.94%Proposed SVM  16.28% 11.36%Table 10: WER and DER for statistical approach us-ing different taggers without considering case-endingdiacritics.Table 11, shows the results after modifying boththe statistical and the case ending approaches forTOK2, POS2, and CE2 tasks.
The last rowrepresent results after adding some simple heu-ristic rules (SHR) to correctly add Tanween Ka-sra instead of Tanween el Fatha in case of soundplural  feminine "???
??????
??????"
.Technique WER DERLR+DB+SVM 31.86% 7.92%LS+DB+SVM+CE 12.16% 3.78%LS+DB+SVM+CE+SHR 11.795% 3.245%Table 11: WER and DER for different techniques7 ArabicSVMTools:http://www.cs.columbia.edu/~mdiab/downloads/ArabicSVMTools.tar.gz6 Conclusions and Future workIn this paper, we proposed a diacritization modelthat distinguishes between internal and case end-ing diacritization.
The overall performance iscomparable with the best diacritization modelthat was reported in the literature so far.Statistically based methods show great promisein addressing the ambiguity resolution problemin Arabic language diacritization.The proposed system yields good results in theDER and WER compared with MADA-D sys-tem, the modifications for case ending algorithmhave enhanced the performance.The proposed system has an advantage that wecan use all internal diacritics approaches in paral-lel because there is no such dependency betweenalgorithms.
Nevertheless, the case ending algo-rithm can also be processed in parallel with thestatistical approach.
Such parallel processing ad-vantage can improve the response time that couldbe critical for some diacritization-based real timesystems.Maintaining the bigram database up-to-date willsignificantly enhance the performance of the sys-tem.Our future work will include adding some heu-ristic rules for the proposed model as a postprocessing.
This  will enhance the performancefor the system especially to restore correct dia-critics of the possessive personal pronounce suf-fixes ?
??????
?.
Moreover, adding extra POS tagsets to distinguish between dual noun and pluralnouns will enhance the diacritization results.
Weplan also to enrich the system by increasing thetraining set by using latest fully diacritized Tree-bank like Part1 V3.0 (Maamouri et al 2008)which is not available due to limitation of ourbudget.
This has the effect of enhancing the sys-tem performance and allow us to make a compar-ison with other systems, such as (Habash andRambow, 2007) and (Zitouni et al , 2006) .ReferencesAbo Bakr H. M. , Shaalan K., Ziedan I., 2008, "AStatistical Method for Adding Case Ending Diacrit-ics for Arabic Text", The Eighth Conference onLanguage Engineering, ESOLEC?2008, Page 225-234, Cairo, Egypt,Deceber 17-18 2008.Ananthakrishnan, Narayanan S., and Bangalore S.,(2005), ?Automatic diacritization of arabic tran-scripts for asr?.
In Proceedings of ICON-05, Kan-pur, India.Buckwalter T., (2002).
Buckwalter Arabic morpho-logical analyzer version 1.0.
Technical report, Lin-34guistic Data Consortium, LDC2002L49 and ISBN1-58563- 257-0.Cristianini N. and Taylor J.S., (2000), ?An Introduc-tion to Support Vector Machines and Other Kernel-based Learning Methods?, The Press Syndicate ofthe University of Cambridge, Cambridge, UnitedKingdom.Diab M., Hacioglu K., and Jurafsky D., (2004), "Au-tomatic Tagging of Arabic Text: From Raw Text toBase Phrase Chunks," In Proc.
of HLT/NAACL2004, Boston.Diab M., Hacioglu K., and Jurafsky D.,(2007), ?Arab-ic Computational Morphology Knowledge-basedand Empirical Methods?
- Chapter 7 ?AutomaticProcessing of Modern Standard ArabicText?,ISBN: 978-1-4020-6046-5, SpringerLink.El-Imam Y., (2003).
Phonetization of Arabic: rulesand algorithms.
Computer Speech and Language,18:339?
373.El-Sadany T. and Hashish M., (1988).
Semi-automatic vowelization of Arabic verbs.
In 10thNC Conference, Jeddah, Saudi Arabia.Elshafei M., Al-Muhtaseb H., and Alghamdi M.,(2006), ?Statistical Methods for Automatic Diacri-tization of Arabic Text?.
The Saudi 18th NationalComputer Conference.
Riyadh.
18: 301-306.Emam O. and Fisher V.
(2004)., A hierarchical ap-proach for the statistical vowelization of Arabictext.
Technical report, IBM patent filed, DE9-2004-0006, US patent application US2005/0192809 A1.Gal Y., (2002).
An HMM approach to vowel restora-tion in Arabic and Hebrew.
In ACL-02 Workshopon Computational Approaches to Semitic Languag-es.Habash N. and Rambow O., (2007), ?Arabic Diacriti-zation through Full Morphological Tagging?, InProceedings of the North American chapter of theAssociation for Computational Linguistics(NAACL), Rochester, New York.Hearst M. A., (1998), "Support Vector Machines,"IEEE Intelligent Systems, vol.
13,  no.
4,  pp.
18-28,  Jul/Aug,  1998.Kirchhoff K. and Vergyri D., (2005).
Cross-dialectaldata sharing for acoustic modeling in Arabic speechrecognition.
Speech Communication, 46(1):37?51,May.Kudo T. and Matsumoto Y., (2003), " Fast methodsfor kernel-based text analysis," In Proceedings ofthe 41st Annual Meeting on Association For Com-putational Linguistics - Volume 1 (Sapporo, Japan,July 07 - 12, 2003).
Annual Meeting of the ACL.Association for Computational Linguistics, Morris-town.Maamouri, M., Bies, A.
& Buckwalter, T. (2004).
ThePenn Arabic treebank: Building a largescale anno-tated Arabic corpus.
In NEMLAR Conference onArabic Language Resources and Tools, Cairo,Egypt.Maamouri M., Bies A., Kulick S., (2008), "EnhancedAnnotation and Parsing of the Arabic Treebank";INFOS 2008, Cairo, Egypt, March 27-29, 2008.Sang E. and Buchholz S., (2000), ?
Introduction to theCoNLL-2000 Shared Task: Chunking?, Proceedingof CoNLL-2000 and LLL-2000,Page 127-132, Lis-bon,Portugal.Zitouni I., Sorensen J. S., and Sarikaya R., (2006),?Maximum entropy based restoration of Arabic di-acritics?.
In Proceedings of ACL?06.35
