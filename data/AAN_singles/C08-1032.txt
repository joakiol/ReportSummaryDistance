Proceedings of the 22nd International Conference on Computational Linguistics (Coling 2008), pages 249?256Manchester, August 2008Integrating a unification-based semantics in a large scale Lexicalised TreeAdjoining Grammar for FrenchClaire GardentCNRS / LORIAEquipe Talaris, Bat.
B615, rue du jardin botanique54600 Villers les NancyFranceclaire.gardent@loria.frAbstractIn contrast to LFG and HPSG, there is todate no large scale Tree Adjoining Gram-mar (TAG) equiped with a compositionalsemantics.
In this paper, we report onthe integration of a unification-based se-mantics into a Feature-Based LexicalisedTAG for French consisting of around 6 000trees.
We focus on verb semantics andshow how factorisation can be used to sup-port a compact and principled encoding ofthe semantic information that needs to beassociated with each of the verbal elemen-tary trees.
The factorisation is made possi-ble by the use of XMG, a high-level linguis-tic formalism designed to specify and com-pile computational grammars and in partic-ular, grammars based on non-local trees ortree descriptions.1 IntroductionWhilst there exists large scale LFGs (LexicalFunctional Grammar) and HPSGs (Head-DrivenPhrase Structure Grammar) equipped with a com-positional semantics (Copestake et al, 2001; Frankand van Genabith, 2001), available Tree AdjoiningGrammars remain largely syntactic.One reason for this is that there has been, upto recently, much debate about how best to com-bine TAG with a compositional semantics.
Shouldit be based on the derived or the derivation tree?
Should Feature-Based LTAG be used or shouldsynchronous TAG?
Many proposals have been putforward but only recently did sufficient consensusc?
2008.
Licensed under the Creative CommonsAttribution-Noncommercial-Share Alike 3.0 Unported li-cense (http://creativecommons.org/licenses/by-nc-sa/3.0/).Some rights reserved.emerge to support the specification of a TAG basedcompositional semantics.
In a nutshell, it can beachieved either by using a synchronous TAG (Nes-son and Shieber, 2006) (in this case, the grammarexplicitely describes and synchronises syntax andsemantics structures) or by using Feature-BasedLTAG (in which case, the synchronisation betweensyntax and semantics is mediated by the unifica-tion of semantic indices associated with the FTAGelementary trees).Another more practical reason for the absenceof large scale TAGs integrating a compositionalsemantics is the lack of available computationalframeworks.
Up to recently, there has beenno available grammar writing environment andparser that would support the integration of com-positional semantics into a TAG.
One step inthat direction is provided by the development ofXMG(Duchier et al, 2004), a formalism whichsupports the specification of Feature-Based LT-AGs equipped with a compositional semantics a` la(Gardent and Kallmeyer, 2003).In this paper, we report on the integration of aunification-based semantics into a Feature-BasedLTAG for French which consists of around 6 000trees.
This integration is specified using XMGand we show how this formalism can be used tosupport a compact and principled encoding of thesemantic information that needs to be associatedwith each of the 6 000 elementary trees.The article is structured as follows.
We start(section 2) by presenting XMG and showing howit supports the specification of Feature-Based LT-AGs equipped with a compositional semantics.
Wethen present SEMFRAG, the FTAG grammar forFrench that we developed (section 3).
In section4, we show how XMG can be used to minimisethe development cost involved in enriching such249a grammar with a compositional semantics.
Sec-tion 5 compares the approach with related workand concludes with pointers for further research.2 The XMG formalismThe XMG formalism was designed to support thedevelopment and factorisation of computationalgrammars for Natural Language.
Like PATR II itis theory neutral in that its use is not restrictedto a single grammatical theory.
Unlike PATR IIhowever, the language provided by XMG allowsthe linguist to talk about the basic building blocksnot only of rule based computational linguistictheories such as as HPSG (Head Driven PhraseStructure Grammar) and LFG (Lexical FunctionalGrammar) but also of tree based theories such asTAG (Tree Adjoining Grammar).
As we shall see,this involves allowing for sophisticated node nam-ing and identification mechanisms.
Other differ-ences between PATR II and XMG include a moregeneral use of disjunction, the use of colours tocontrol tree construction and a more natural encod-ing of trees and of semantic representation than ispermitted by PATR II.
A detailed definition of theXMG formalism is given in (Duchier et al, 2004).In what follows, we give an intuitive presenta-tion of XMG emphasising the points that support astrongly factorised specification of grammars andin particular, of SEMFRAG.
We start by presentingthe basic building blocks XMG allows the linguistto talk about (2.1).
We then go on to discuss thefactorising mechanisms it supports (2.2).
Finally,we introduce the several node naming and identifi-cation mechanisms it provides (2.3).2.1 The basic building blocksIn XMG, the basic building blocks are CLASSESwhich may be specified along three dimensions :a syntactic dimension (SYN) which consists of atree description whose node variables can be dec-orated with feature structures; a semantic dimen-sion (SEM) consisting of a flat semantic formula;and a syntax/semantic interface (INTERFACE) forsynchronising semantic formulae and tree descrip-tions .SYN.
The syntactic dimension in XMG allows thelinguist to specify tree descriptions i.e., trees thatcan be underspecified with respect to both domi-nance and precedence.
The trees described maybe either local or extended and their nodes may bedecorated with either one or two feature structures(two for TAG TOP and BOTTOM feature struc-tures).SEM.
Using the semantic dimension, the linguistcan specify unification based flat semantic formu-lae in the sense of (Copestake et al, 2001) i.e.,non recursive formulae describing first order for-mulae with lambda binders replaced by unificationvariables and where scope may be underspecified.Semantic schemas can also be specified in whichpredicates are replaced by unification variablesthat will be instantiated during lexical lookup.
Forinstance, the SEM dimension may include the fol-lowing semantic formula and schema1:(1) a.
Every: l0: ?
(X,h1, h2), h1?
L1, h2?L2b.
Binary Relation Schema: l1: P (E), l1:Theta1(E,X), l1: Theta2(E,Y )In (1a), the flat semantic formula associatedwith every underspecifies scope by stating that thescope handle h2scopes, directly or indirectly (?
),over (the label L2associated with) the scopal ar-gument.In (1b) on the other hand, underspecifica-tion bears on the predicate P and the theta rolesTheta1, Theta2which are unification variableswhose value will be provided by the lexicon.
Inthis way, this binary relation schema can be usedto represent the semantics of all verbs denoting abinary relation.
The lexicon will then specify foreach verb the relevant relation and theta roles.INTERFACE.
The third XMG dimension permitssynchronising syntax and semantics.
In essence,features that are used in SYN or in SEM can be as-signed global names in the INTERFACE dimensionand synchronised using variable sharing.
For in-stance, given a feature-value pair F = X occuringin the SYN dimension and a semantic parameter Yoccuring in the SEM dimension, the following in-terface constraint permits both unifying (?synchro-nising?)
X and Y and assigning them the globalnames IDX and ARG respectively :(2) IDX = 1 X, ARG = 1 YAs we shall see in section 4.2.2, the interface al-lows for a natural and highly factorised means ofstating syntax/semantics linking constraints (e.g.,the subject constituent provides the semantic indexfor the first semantic argument).1Here and in what follows, we adopt the convention thatidentifiers starting with an upper case letter are unificationvariables.2502.2 Factorising mechanismsAn important feature of a linguistic formalism isthat it supports a high level of factorisation thusfacilitating grammar development, debugging andmaintenance.
In XMG, factorising can be achievedusing disjunctions, conjunctions and inheritance ofclasses.
As argued in (Crabbe?, 2005), classes dis-junction supports the description of alternatives,for instance, to describe the alternative possible re-alisations of a subject (see below).
As usual, con-junction and inheritance of classes permits com-bining the content of two classes2.2.3 Node naming and identificationmechanismsIn combining tree descriptions, the linguist oftenwants to identify nodes across descriptions.
Onedistinguishing feature of XMG it that it supports asophisticated treatment of node naming and nodeidentification (Gardent and Parmentier, 2006).Node naming.
In XMG, node names are by de-fault local to a class.
However explicit IMPORT andEXPORT declarations can be used to make names?visible?
to children classes.
An EXPORT declara-tion makes the exported name(s) visible to all chil-dren classes.
Conversely restrictive IMPORT dec-larations can be used either to block or to renameexported variables that are visible through inheri-tance.Node identification.
As we have just seen, IM-PORT and EXPORT declarations can be used tomake names ?visible?
to children classes andthereby idendify nodes from different classes.
Forinstance, if class C1inherits from class C2, C1refers to a node variable X and C2exports X, thenX denotes the same node in both C1and C2.However, this mechanism only works within asingle branch of the inheritance hierarchy.
Indeedin case of multiple inheritance (two classes C1andC2export the same variable X to a third class in-heriting from both C1and C2), identification willfail (X will not be interpreted as denoting the samenode in both C1and C2).
To remedy this short-coming, XMG allows for explicit node identifica-tions.
Thus in the above case, X can be identifiedusing the constraint C1.X = C2.X.2The distinction between conjunction and inheritance hasto do with some intricate issues concerning node identifica-tions which we will not address here.
See (Gardent and Par-mentier, 2006) for a detailed discussion on this.This concludes our informal presentation ofXMG.
For a more precise definition of its syn-tax, semantic and compilation process, we refer thereader to (Duchier et al, 2004).3 SemFraGTo illustrate the expressive power of XMG, we nowshow how it can be used to specify SEMFRAG,a TAG for French which integrates a unificationbased compositional semantics.
We start by pre-senting the grammar produced by the XMG speci-fication.SEMFRAG is a unification based version ofLTAG namely, Feature-based TAG.
A Feature-based TAG (FTAG, (Vijay-Shanker and Joshi,1988)) consists of a set of (auxiliary or initial) el-ementary trees and of two tree composition opera-tions: substitution and adjunction.
Initial trees aretrees whose leaves are labelled with substitutionnodes (marked with a downarrow) or terminal cat-egories.
Auxiliary trees are distinguished by a footnode (marked with a star) whose category must bethe same as that of the root node.
Substitution in-serts a tree onto a substitution node of some othertree while adjunction inserts an auxiliary tree intoa tree.
In an FTAG, the tree nodes are furthermoredecorated with two feature structures (called TOPand BOTTOM) which are unified during derivationas follows.
On substitution, the top of the substi-tution node is unified with the top of the root nodeof the tree being substituted in.
On adjunction, thetop of the root of the auxiliary tree is unified withthe top of the node where adjunction takes place;and the bottom features of the foot node are unifiedwith the bottom features of this node.
At the endof a derivation, the top and bottom of all nodes inthe derived tree are unified.To associate semantic representations with natu-ral language expressions, the FTAG is modified asproposed in (Gardent and Kallmeyer, 2003).
EachNPjJohnname(j,john)SNP?s VPrVrunsrun(r,s)VPxoften VP*often(x)?name(j,john), run(r,j), often(r)Figure 1: Flat Semantics for ?John often runs?elementary tree is associated with a flat semantic251representation.
For instance, in Figure 1,3 the treesfor John, runs and often are associated with the se-mantics name(j,john), run(r,s) and often(x) respec-tively.The arguments of a semantic functor are repre-sented by unification variables which occur both inthe semantic representation of this functor and onsome nodes of the associated syntactic tree.
For in-stance in Figure 1, the semantic index s occurringin the semantic representation of runs also occurson the subject substitution node of the associatedelementary tree.The value of semantic arguments is then de-termined by the unifications taking place duringderivation.
For instance, the semantic index s inthe tree for runs is unified during substitution withthe semantic indices labelling the root nodes of thetree for John.
As a result, the semantics of Johnoften runs is(3) {name(j,john),run(r,j),often(r)}SEMFRAG describes a core fragment of Frenchand contains around 6 000 elementary trees.
It cov-ers some 35 basic verbal subcategorisation framesand for each of these frames, the set of argumentredistributions (active, passive, middle, neuter, re-flexivisation, impersonal, passive impersonal) andof argument realisations (cliticisation, extraction,omission, permutations, etc.)
possible for thisframe.
Predicative (adjectival, nominal and prepo-sitional) and light verb constructions are also cov-ered as well as subcategorising nouns and adjec-tives.
Basic descriptions are provided for the re-maining constructions i.e., adverbs, determinersand prepositions.4 Implementing SEMFRAG using XMGWe now illustrate the power of XMG by show-ing how it can be used to produce a highly fac-torised specification of SEMFRAG, an FTAG of 6000 trees enriched with a unification based compo-sitional semantics.
Given the space constraints, weconcentrate on the verbal trees (trees anchored byverbs).
We start (4.1) by summarising the specifi-cation of SEMFRAG verbal syntactic trees given in(Crabbe?, 2005).
We then (4.2) show how this spec-ification of the syntax of verbal trees can be en-riched with a unification based compositional se-3Cx/Cxabbreviate a node with category C and atop/bottom feature structure including the feature-value pair{ index : x}.mantics.
We show in particular that this enrich-ment can be performed using only a limited set ofgeneral principles.4.1 SyntaxThe syntactic dimension of SEMFRAG was speci-fied in (Crabbe?, 2005).
For the verbal trees, it canbe summarised as follows.First, tree families are specified as disjunctionsof diatheses.
For instance, the N0VN1 family4 isdefined as :n0Vn1 ?
( dian0Vn1Active?
dian0Vn1Passive?
dian0Vn1dePassive?
dian0Vn1ShortPassive?
dian0Vn1ImpersonalPassive?
dian0Vn1middle?
dian0Vn1Reflexive )(1)Second, diatheses are defined as conjunctions ofclasses.
For instance, dian0Vn1Active is definedas:dian0Vn1Active ?
( Subject?
ActiveV erbForm?
Object )(2)Third, each grammatical function appearing in thedefinition of a diathesis is defined as a disjunctionof classes, each class representing a possible real-isation of that function.
For instance, the Subjectclass is:Subject ?
( CanonicalSubject?
RelativisedSubject?
WhSubject?
CleftSubject?
CliticSubject )(3)Fourth, each class describing a possible gram-matical function realisation specifies the adequatetree description.
For instance, the fragments forCanonicalSubject, ActiveVerbForm and Canon-icalObject are sketched in Figure 25.In sum, the XMG specification relies on a fairlyintuitive use of classes disjunctions and conjunc-tions.
Moreover, the basic leaf classes (i.e., themost deeply embedded disjuncts and conjuncts inthe grammar specification) are defined by inheri-tance, the inheritance hierarchy encoding the shar-ing of tree description fragments and/or feature4In TAG, a tree family gathers all the elementary treesassociated with verbs of a given syntactic type.
Thus, theN0VN1 family contains all the trees describing the syntacticcontexts in which a verb taking two nominal arguments (i.e.,a transitive verb) can occur.5Due to space constraints, these fragments are simplifiedin that features are omitted.252S?N??V?(CanSubj)S?V??(Active)S?V?N??
(CanObj)Figure 2: Tree fragmentsstructures between leaf classes.
As a result, sev-eral thousand trees are specified using only a fewhundred classes.4.2 SemanticsJust like grammar engineering is a complex issue,enriching a computational grammar with a com-positional semantics is potentially time consumingand error prone.
We now show that XMG permitsthis enrichment by means of a few general seman-tic principles thus minimising both work and therisk of errors.
To enrich a purely syntactic FTAGwith the type of unification based semantics de-scribed in section 3, three main changes need tobe carried out.First, trees must be labelled with appropriate se-mantic indices and labels.
For instance, the sub-ject node of a verbal tree must be labelled with asemantic index.Second, trees must be associated with appropri-ate semantic schemas.
For instance, the trees of then0Vn1 family must be associated with a semanticschema representing a binary relation.Third, variable sharing between semanticschemas and syntactic trees must be enforced.
Forinstance, the semantic index of the subject nodeof an active verb should be identified with thefirst semantic argument of the associated semanticschema.We now provide an XMG encoding of this infor-mation.
As for the syntax, we proceed top-downfrom the verb families down to argument realisa-tion and node labelling.4.2.1 Associating trees with semanticformulae.As indicated in the previous section, trees inTAG are grouped into tree families.
We use thisfeature to associate in one fell swoop all the treesof a given family with the appropriate semanticschema.
For instance, to associate transitive verbswith a binary relation schema, the syntactic speci-fication given in (1) is modified to:n0Vn1 ?
binaryRel ?
( dian0Vn1Active?
dian0Vn1Passive?
dian0Vn1dePassive?
dian0Vn1ShortPassive?
dian0Vn1ImpersonalPassive?
dian0Vn1middle?
dian0Vn1Reflexive )(4)4.2.2 Linking constraintsNext the correct syntax/semantic interface con-straints must be specified for each diathesis.
Thatis, the correct mapping between syntactic and se-mantic arguments must be enforced.
This is donein two steps.First, we define a set of INTERFACE constraintsof the formindexF= V, argi= Vwhich are meant to enforce the identificationof the semantic index (indexF) labelling a giventree node with grammatical function F (e.g., F =subject) with the index (argi) representing the i-th argument in a semantic schema.
For instance,when combined with a class C containing a vari-able X named6 arg1and a variable Y namedindexsubject, the SubjArg1 linking constraintindexsubject= V, arg1= Vensures that X and Y are identified.
Assuming fur-ther that arg1is used to name the first semantic ar-gument and indexsubjectto name the value of theindex feature labelling a subject node7, this con-straint ensures a subject/arg1mapping.Given such interface constraints, we then refinethe diathesis definitions so as to ensure the correctbindings.
For instance, the specification in (2) ismodified to :dian0Vn1Active ?
( SubjArg1?
ObjArg2?
Subject?
ActiveV erbForm?
Object )(5)whilst the passive diathesis is specified as:dian0Vn1Passive ?
( SubjArg2?
CagentArg1?
Subject?
PassiveV erbForm?
Cagent )(6)6As explained in section 2, interface constraints can beused to assign global names to values inside a class.7We will see in the next section how to ensure the appro-priate naming of syntactic indices and semantic arguments.2534.2.3 Labelling trees with semantic indices.The above scheme relies on the assumption thattree nodes are appropriately labelled with seman-tic indices (e.g., the subject node must be labelledwith a semantic index) and that these indices areappropriately named (arg1must denote the param-eter representing the first argument of a binary re-lation and indexsubjectthe value of the index fea-ture on a subject node).
As suggested in (Gardent,2007), a complete semantic labelling of a TAGwith the semantic features necessary to enrich thisTAG with the unification based compositional se-mantics sketched in section 3 can be obtained byapplying the following labelling principles8 :Argument labelling: In trees associated with se-mantic functors, each argument node is la-belled with a semantic index9 named after thegrammatical function of the argument node(e.g., indexsubjectfor a subject node).Anchor projection: The anchor node projects itslabel up to its maximal projection.Foot projection: A foot node projects its label upto the root10Controller/Controllee: In trees associated withcontrol verbs, the semantic index of the con-troller is identified with the value of the con-trolled index occuring on the sentential argu-ment node.As we shall now see, XMG permits a fairly directencoding of these principles.Argument labelling.
In the tree associated witha syntactic functor (e.g., a verb), each tree noderepresenting a syntactic argument (e.g., the sub-ject node) should be labelled with a semantic indexnamed after the grammatical function of that node(e.g., indexsubject).To label argument nodes with an appropriatelynamed semantic index, we first define a set ofclasses encapsulating a node with an index and aname.
We then identify this node with the appro-priate tree nodes.More specifically, we define for eachgrammatical function Function ?8Because of space constraints, the principles required tohandle quantification are omitted.9For simplicity, we only talk about indices here.
However,to be complete, labels are also need to be taken into account.10The foot projection principle only applies to foot nodesthat are not argument nodes i.e., to modifiee nodes.
{subject, object, cagent, iobject, .
.
.
}, a se-mantic class FunctionSem which associateswith an (exported) node called xFunction thefeature value pair index = I and an interfaceconstraint of the form indexFunction= I. Forinstance, the class SubjectSem associates thenode xSubject with the feature value pair index =I and the interface constraint indexsubject= I.subjectSem ?
[syn] : xSubject[index = I ][interface] : [indexsubject= I ](7)When specifying the tree fragments describingthe possible realisations of the grammatical func-tions, the (exported) argument node is systemati-cally named xArg.Finally, we modify the specification of the gram-matical functions realisations to import the ap-propriate semantic class and identify xArg andxFunction nodes.
For instance, 3 above ischanged to:Subject ?
SubjectSem ?xArg = xSubject ?
( CanonicalSubject?
RelativisedSubject?
WhSubject?
CleftSubject?
CliticSubject )(8)As a result, all xArg nodes in the tree descrip-tions associated with a subject realisation are la-belled with an index I feature whose global nameis indexsubject.Controller/Controllee.
Value sharing betweenthe semantic index of the controller (e.g., the sub-ject of the control verb) and that of the controllee(e.g., the empty subject of the infinitival comple-ment) is enforced using linking constraints be-tween the semantic index labelling the controllernode and that labelling the sentential argumentnode of the control verb.
Control verb definitionsthen import the appropriate (object or subject con-trol) linking constraint.Anchor and foot projection.
The anchor (foot)projection principle stipulate the projection of se-mantic indices from the anchor (foot) node up tothe maximal projection (root).
To enforce theseprinciples, we define a set of anchor projectionclasses as illustrated in Figure 3.
We then ?glue?these projection skeletons onto the relevant syntac-tic trees by importing them in their definition andexplicitely identifying the anchor node of the se-mantic projection classes with the anchor or footnode of these trees.
Since the solutions must betrees, the nodes dominating the anchor node of the254?E3E2?E2E1?E2E1?E1E?E1E?E1E??E?
??E?
?
?E?Depth 3 Depth 2 Depth 1?SE2E1?V PE1E?
?VE?ActiveVerbFormFigure 3: Anchor/Foot projectionprojection class will deterministically be unifiedwith those dominating the anchor or foot node ofthe trees being combined with.
For instance, forverbs, the class specifying the verbal spine (e.g.,ActiveVerbForm, cf.
2) will import a projectionclass and equate the anchor node of the verbalspine with that of the projection skeleton.
As a re-sult, the verb projects its index up to the root (mod-ulo the renaming made necessary by the possibilityof an adjunction) as illustrated on the right insideof Figure 3.4.3 DiscussionArguably, the XMG encoding we provided to en-rich an FTAG with a unification based composi-tional semantics, is compact and principled.It is principled in that it provides a direct andtransparent formulation of the main principles un-derlying the integration in a TAG of the unificationbased semantics sketched in Section 3.It is compact in that the number of modifica-tions needed to enrich syntax with semantics is rel-atively small: 76 class definitions and 498 classcalls are sufficient to associate the required se-mantic information (semantic schemas, semanticindices and index projections) with roughly 6000trees.
Crucially, this means that the time involvedin integrating the semantics in the grammar issmall (roughly a week linguist work) and furtherthat the maintenance, extension and debugging ofthe semantic component is greatly facilitated.Both these points rely on the expressivity ofXMG.
More in particular, the encoding heavily re-lies on two specific features of XMG namely, gen-eralised classes disjunctions and the possibility touse global names not only for tree nodes but alsofor feature values and semantic parameters.Generalised classes disjunctions are used to as-sociate large sets of trees with semantic schema(section 4.2.1) and to label sets of tree frag-ments with the appropriately named index (section4.2.3).
Intuitively, generalised classes disjunctionand conjunction permit factoring out the commonoperand of an enumeration (e.g., instead of enu-merating (a ?
b) ?
(a ?
c) ?
(a ?
d) ?
.
.
., we canspecify a ?
(b ?
c ?
d) ).
In practice, this meansthat the number of statements necessary to spec-ify the grammar can be greatly reduced.
For in-stance, the association of several thousands of verbtrees with a semantic schema is enforced by a totalof 176 statements.
In contrast, standard linguisticformalisms such as PATR IIor the LKB only allowdisjunctions over atomic feature values.Global names in turn, were used to support a di-rect encoding of linking constraints (section 4.2.2).37 linking constraints definitions and 255 linkingconstraints calls are sufficient to ensure the ap-propriate mapping between syntactic and seman-tic arguments in verb trees as well as adjectivaland nominal predicative trees.
More generally, thepossibility to introduce global names not only fortree nodes as in e.g., (Vijay-Shanker and Schabes,1992) but also for feature values and semantic pa-rameters allows for a simple and direct encodingof constraints applying to identifiers occuring ?farapart?
in a given tree (for instance, between the in-dex of the subject node in a controlverb tree andthat of a PRO index of its infinitival argument).5 ConclusionWhilst the development of standard unification-based grammars is well supported by the design offormalisms such as PATR II, the XLE and the LKB,formalisms for developing Tree-Based Grammarshave received less attention.
XMG aims to remedythis shortcoming by providing a formalism thatsupports talking about trees, tree sharing and treelabelling.Trees of arbitrary (finite) depth can be describedusing underspecified tree descriptions.
Addition-ally, trees can be combined with further linguisticdimensions such as semantic representations anda syntax/semantic interface to form more complexlinguistic units.Tree sharing is supported by the inheritance, theconjunction and the disjunction of tree descrip-tions together with a sophisticated identifier han-dling mechanism : identifiers are by default localbut can be made global or semi-global, on demand.Furthermore, identifiers can be identified either ex-plicitely (using either the interface or explicit iden-tification constraints) or implicitely (through in-255heritance or through the use of colours, a mech-anism not discussed here).Finally, tree labelling can be expressed by as-sociating tree nodes with one or two (for TAG)feature structures.
Importantly, feature values canbe assigned global names thereby allowing for thespecification of constraints on features that are ?farapart from each other?
within a tree.In this paper, we have argued that these fea-tures of XMG are effective in supporting an en-coding of an FTAG with a unification based com-positional semantics which is principled, transpar-ent and compact.
These features also markedlydistinguish XMG from existing formalisms usedto encode tree based grammars such as the non-monotonic encoding of TAG proposed in (Evanset al, 1995) (in contrast, XMG is fully monotonic)and the tree descriptions based approaches pro-posed in (Candito, 1996; Xia et al, 1998) where inparticular, tree descriptions can only be conjoined(not disjoined) and where identification across treefragments is restricted to nodes.More in general, we believe that expressive for-malisms are necessary to allow not only for thequick development of symbolic tree based gram-mars but also for their comparison and for the fac-toring of several grammars be they different wrtto the language they handle (as for instance in theHPSG Delphin or in the LFG Pargram project)or in the semantics they integrate e.g., a glue se-mantics as proposed in (Frank and van Genabith,2001), a lambda-based semantics as proposed in(Gardent, 2007) or as shown here, a unificationbased flat semantics.ReferencesM.H.
Candito.
1996.
A principle-based hierarchicalrepresentation of LTAGs.
In Proc.
of COLING?96,Kopenhagen.A.
Copestake, A. Lascarides, and D. Flickinger.
2001.An algebra for semantic construction in constraint-based grammars.
In Proc.
of ACL, Toulouse, France.B.
Crabbe?.
2005.
Repre?sentation informatique degrammaires fortement lexicalise?es.
Ph.D. thesis,Universite?
Henri Poincare?, Nancy.D.
Duchier, J.
Le Roux, and Y. Parmentier.
2004.
Themetagrammar compiler.
In 2nde confrence interna-tionale Oz/Mozart (MOZ?2004), Charleroi.R.
Evans, G. Gazdar, and D. Weir.
1995.
Encoding lex-icalized tree adjoining grammars with a nonmono-tonic inheritance hierarchy.
In Proc.
of ACL.A.
Frank and J. van Genabith.
2001.
Ll-based se-mantics for ltag - and what it teaches us about lfgand ltag.
In Proc.
of the LFG?01 Conference, HongKong.
CSLI Online Publications.C.
Gardent and L. Kallmeyer.
2003.
Semantic con-struction in ftag.
In Proc.
of EACL, Budapest, Hun-gary.C.
Gardent and Y. Parmentier.
2006.
Coreference han-dling in xmg.
In Proc.
of COLING (Poster), Sydney,Australia.C.
Gardent.
2007.
Tree adjoining grammar, semanticcalculi and labelling invariant.
In Proc.
of IWCS.Rebecca Nesson and Stuart M. Shieber.
2006.
SimplerTAG semantics through synchronization.
In Pro-ceedings of the 11th Conference on Formal Gram-mar, Malaga, Spain, 29?30 July.K.
Vijay-Shanker and A. K. Joshi.
1988.
Featurestructures based tree adjoining grammar.
In Proc.of COLING, pages 714?719, Budapest.K.
Vijay-Shanker and Y. Schabes.
1992.
Structuresharing in lexicalised tree adjoining grammar.
InProc.
of COLING 92, pages 205?211.F.
Xia, M. Palmer, K. Vijay-Shanker, and J. Rosen-zweig.
1998.
Consistent grammar development us-ing partial-tree descriptions for lexicalized tree ad-joining grammar.
Proc.
of TAG+4.256
