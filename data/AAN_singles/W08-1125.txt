A Dynamic Programming Approach toDocument Length ConstraintsKeith Vander LindenDepartment of Computer ScienceCalvin CollegeGrand Rapids, MI 49546, USAkvlinden@calvin.eduAbstractNatural language generation (NLG) applica-tions must occasionally deliver rhetoricallycoherent output under length constraints.
Forexample, certain types of documents must fiton a single webpage, on a cell phone screen,or into a fixed number of printed pages.
Todate, applications have achieved this goal bystructuring their content as a rhetorical treeand using a greedy algorithm to pick the dis-course elements to include in the final docu-ment.
Greedy algorithms are known to picksub-optimal solutions.
This paper presents analternate approach based on dynamic pro-gramming.1 Document Length ConstraintsA number of language engineering applicationshave addressed the issue of generating coherentdocuments under length constraints, includingNLG applications, e.g., SciFly (Paris, et al 2008),STOP (Reiter, 2000), ILEX (O'Donnell, 1997), andsummarization applications, e.g., Daniel Marcu(1999).
These applications all address the issue byrepresenting the content to be delivered as a rhetor-ical tree and using some formulation of a greedyalgorithm that satisfies the length constraints byeither selecting the most important elements of thetree or pruning the least important elements.1As an example, consider the two sample outputsshown in Figure 1.
Both outputs were produced by1 The STOP system identifies the problem as a bin-packingproblem but then describes its mechanism using terms com-mon to greedy algorithms (Reiter, 2000).a prototype that delivers information about a com-puter science department to prospective studentsvia email; cf.
(Paris, et al 2008).
The output iscomposed of coarse-grained elements (e.g., im-ages, phrases and paragraphs) and is formatted inpost-card size using HTML and includes hyper-links to related pages on the main department web-site.
The goal is to get the prospective student tovisit the main website.
The key difference betweenthe two examples is their length.
The one on theleft, which is shorter, was generated using a greedyalgorithm.
The one on the right, which uses thespace more fully, was generated using a dynamicprogramming algorithm.
The greedy algorithmincluded the ?FAQ?
section because it fit at thetime; the dynamic algorithm realized that waitingto include the ?News?
and the ?Alumni?
sectionswould be a more effective use of the space.This paper discusses the mechanisms used togenerate these two examples.
It starts with a dis-cussion of the rhetorical tree used as input for bothsample outputs, and then details the algorithmsused to satisfy the length constraint.
The lengthconstraint problem is viewed as a precedence-constrained 0-1 knapsack problem, and the algo-rithm is formulated using dynamic programming.2 Rhetorical Structure TreesResearchers have long viewed rhetorical treesas a means of structuring textual output and of dis-tinguishing those elements that should be ex-pressed (often called nuclei) from those that couldbe omitted (often called satellites) (Spark-Jones,1993), and there is psycholinguistic evidence thatthis view is valid (Marcu, 1999).
This paper will177build its trees using Rhetorical Structure Theory(RST), the most common of the theories deployedfor rhetorical structuring (Mann & Thompson,1988).Figure 2 shows the annotated RST tree used asthe basis for generating both of the sample outputsshown in Figure 1.
The highest level of the treeshows a template that affixes the header image as apreparation satellite and the footer as a backgroundsatellite.
The next level down shows the structureof the content of the email.
Each node is asso-ciated with a block of text or an image in the out-put.
The initial line (i.e., ?Ima Sample??)
isrepresented as a satellite setting the context for themain content in the nucleus (i.e., ?Thanks for yourinterest??).
There then follows a set of six elabo-ration satellites, each with internal structures of itsown (i.e., an image/caption pair, which is not rea-lized in either sample output because of its cost,and a set of five topic/hyperlink pairs).Each expressible node in the figure has an esti-mated length, denoted as a cost c measured in pix-els, and an estimated importance, denoted as abenefit b.
The cost of an expressible node is esti-mated based on the size of the text/image and spe-cified format.
Generally, the leaves are theexpressible nodes, but in the case where multipleleaves should be expressed together, the RST treeplaces a combined cost value in the parent node(e.g., the header and footer should be expressedtogether or not at all, so their parent node showstheir combined cost of 100 pixels).The benefit setting, denoted b(n,D), for a node nin a discourse tree D is formulated as follows:Here, P(n) denotes the parent of node n and W(r)denotes the weight of the satellite?s rhetorical rela-tion (e.g., in this paper, more important relationslike context have weight 0.5 and less importantrelations like preparation, elaboration, backgroundhave weight 0.4).
This formulation gives higherbenefit values to nuclei.
No penalty is placed onnodes lower in the tree.
This formulation is imple-mented as a recursive decent algorithm whose val-ues for the samples can be seen in Figure 2.The tree is produced by a Moore and Paris-styled text planner (Moore & Paris, 1993).
Select-ing the appropriate content from a content man-agement system, structuring it appropriately andestimating the cost/benefit of each node are inter-esting problems, but are not the focus of this paper.In preparation for the length constraint algo-rithm, the system creates a queue of expressiblenodes, each with its cost and benefit values.
Nuc-lei are queued before satellites.Figure 1.
Two Sample Outputs ?
The greedy output is on the left, the dynamic is on the right.1783 A Length Constraint AlgorithmThis paper views the length constraint problem as aprecedence-constrained 0-1 knapsack problem(Samphaiboon & Yamada, 2000); the output im-ages/paragraphs are viewed as items for the knap-sack, their length in pixels is viewed as their cost,and their rhetorical importance is viewed as theirbenefit.
The prohibition against expressing a satel-lite without also expressing its governing nuclei isviewed as a precedence constraint on the items.A common formulation for this problem is todefine the solution in terms of the maximum bene-fit for a subset of the first k nodes given a maxi-mum cost c as follows:Here,  and  are the benefit and cost of node krespectively, and  is defined by b(n, D) above.
Ifthe node k will fit within the maximum cost con-straint c, then B(k, c) is defined as the maximum ofeither the:previous solution for the first k-1 nodes notincluding node k; orprevious solution with space for  node k.A dynamic programming algorithm that imple-ments this formulation can be specified as follows:Function: format(C, Q, T)Input:A positive integer maximum cost limit CA queue Q of N nodes with positive integercost (ci) and real benefit (bi) settingsA tree T specifying rhetorical relationshipsOutput:A 2-D array B[n+1, c+1] specifying the val-ues for B(k,c) as defined abovefor c ?
0 to CB[0,c] ?
0for k ?
1 to Nfor c ?
0 to CB[0,c] ?
B[0,c-1]for c ?
ck to Cif (not unexpressedNucleus(B,c,k,T) andB[k-1,c-ci] + bi > B[k-1,c])B[k,c] ?
B[k-1,c-ci] + biThe format(C, Q, T) algorithm declares a 2-D arrayof maximum benefit values and sets the first row to0s.
For each expressible node k in Q (rows 1through N), it copies the previous row of benefitvalues and then, for each cost value above the costof the current node (columns ck through C), it ei-ther keeps the previous benefit value without nodek or inserts the benefit that includes node k.Given the array of maximal benefit values out-put by format(C, Q, T), the following algorithmwill compute set of nodes corresponding to a givenbenefit value:Figure 2.
Sample Discourse Tree for the Output in Figure 1 with Cost/Benefit Settings179Function: output(B, k, c)Input:An array B of maximal benefit valuesA node number kB?s maximum cost value c.Output:The set of nodes with total cost c and totalbenefit B(k, c).while k,c > 0if B[k,c] ?
B[k-1,c]include nodekc ?
c - ckk ?
k - 1The use of unexpressedNucleus(B,c,k,T) in theformat(C, Q, T) if-condition is an extension of thestandard algorithm for the 0-1 knapsack problemthat addresses rhetorical precedence constraints.
InRST-based NLG, satellites are not expressed with-out their nuclei.
For example, we would not wantto include the context expression (i.e., ?Ima Sam-ple??)
without also including its nucleus (i.e.,?Thanks for??).
Note that these ?governing?
nuc-lei are not always at the same level in the tree (e.g.,the header image satellite is dependent upon the?Thanks for??
nucleus one level down).The unexpressedNucleus(B,c,k,T) condition im-plements this constraint by requiring thatbefore including anynode n, where G(n,T) is the set of governing nucleifor n in tree T and is formulated as follows:Here, G+() looks up the tree, G-() looks down thetree, P(n) is n?s parent node, and NC(n) is the setof n?s nucleus children.
G() includes only express-ible nodes.
G() can be implemented by a set ofthree mutually recursive functions and can be me-moized to improve efficiency.The greedy algorithm used for the output in Fig-ure 1 uses the same input and a precedence queueof expressible nodes ordered by decreasing benefit.4 Analysis and ConclusionsThe dynamic programming algorithm will alwaysperform at least as well as the greedy algorithm,and sometimes better.
For example, given a totalcost maximum of 325, the greedy algorithm?s out-put in Figure 1 has total cost/benefit: 297/3.7,while the dynamic algorithm?s output has 316/4.1.Dynamic programming algorithms are noto-riously expensive in terms of space and time re-quirements.
They are pseudo-polynomial time,O(NC), but if N and C are ?small?
they can workin practice.
Typical document formatting problemswith dozens of expressible nodes and hundreds ofpixels of length are tractable.Further work on this project will follow a num-ber of directions, including: (1) doing a more com-plete quantitative analysis of the algorithm; (2)figuring out a more principled way to assign bene-fit values; (3) generalizing the problem to two di-mensions and multiple pages; (4) drawing thecontent from a content management system.ReferencesMann, W. C., & Thompson, S. A.
(1988).
Rhetoricalstructure theory: Toward a functional theory of textorganization.
Text , 8 (3), 243-281.Marcu, D. (1999).
Discourse trees are good indicators ofimportance in text.
In I. Mani, & M. Maybury (Ed.
),Advances in Automatic Text Summarization (pp.123-136).
MIT Press.Moore, J. D., & Paris, C. L. (1993).
Planning text foradvisory dialogues: Capturing intentional andrhetorical information.
Computational Linguistics ,19 (4), 651-694.O'Donnell, M. (1997).
Variable Length On-LineDocument Generation.
Proceedings of the SixthEuropean Workshop on NLG.
Duisburg, Germany:Gehard Mercator University.Paris, C. L., Colineau, N., Lampert, A., & Giralt Duran,J.
(2008).
Generation under Space Constraints.Sydney: CSIRO.Reiter, E. (2000).
Pipelines and Size Constraints.Computational Linguistics , 26 (2), 251-259.Samphaiboon, N., & Yamada, T. (2000).
Heuristic andExact Algorithms for the Precedence-ConstrainedKnapsack Problem.
Journal of Optimization Theoryand Applications , 105 (3), 659-676.Spark-Jones, K. (1993).
What might be in a summary?In Knorz, Krause, & Womser-Hacker (Ed.
),Proceedings of Information Retrieval 93: Von dermodellierung zur anwendung (pp.
9-26).Universitatsverlag Konstanz.180
