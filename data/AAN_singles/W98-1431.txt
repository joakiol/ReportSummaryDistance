SYSTEM DEMONSTRATIONFLAUBERT:  AN USER FR IENDLY SYSTEM FOR MULT IL INGUAL TEXTGENERATIONFREDI~RIC MEUNIERmeunier @ linguist.jussieu.frTALANAUFRLinguistiqueCase 7003-2, Place Jussieu75251 ParisFranceLAURENCE DANLOSdanlos @ linguist.jussieu.fr1 Introduction .
.
.FLAUBERT is an engine for text generation.
Its first applications has been for instructional texts, both inFrench and in English, in software and aeronautics domains.
I t  is an implementation f G-TAG, a- formalism for generation i spired from TAG (\[Danlos & Meunier 96\], \[Meunier 97\]).
This formalism isa lexicalized text generation system (\[Danl0s 98a\], \[Danlos 98b\]).All linguistic data are outside of the engine code program.
They are maintained irectly by linguistsunder a Simple text editor.
The syntactic TAG grammar we use for French is that-written by (\[Abeill691\]).
Moreover, the French families of elementary trees are automatically generated thanks to thehierarchical representation f LTAGS (\[Candito 96\]).
The TAG grammar we use for English is homemade.This engine runs on Sun Solaris with 32 M ?
RAM (generator and interface), and is written in Ada 95(generator) and C (interface).
It is compiled by the GNU compilers, and uses GNU Scripts (bash, perl,sed, awk).2 DescriptionAS in DRAFTER (\[Paris et al 95\]), FLAUBERT takes as input a conceptual representation provided bythe user who fills a questionnaire through an interface that proposes cascading menus based on a domainmodel (see below).
The emphasis i  put on linguistic issues such as lexical choices (including choices ofconnectives), parallelism issues, stylistic issues (e.g.
length and content of clauses and sentences), etc.FLAUBERT uses three databases:0 A domain model describing an ontology of concepts in a typed feature formalism.
In astandard way, the concepts include objects, actions, states and relations between them;?
A set of lexical data bases associated withconcepts; the lexical database for a given conceptdescribes its semantico-lexical realizations (lexical heads + argument structures) accompaniedwith tests of applicability for right semantics and well formdness;?
A TAG grammar whose syntactic informations allow a derived tree to be computed from aderivation tree (see the data flow below).3 Data f lowThe dataflow of  FLAUBERT is given in Figure 1.
The system is sequential:?
compiling the input data;?
building a lexicalized tree structure called a "g-derivation tree";?
building a derived tree;284!I!IIIi word re-ordering, typographic considerations, etc.
).I ~-q~ user interfaceIII?
post-processing.The first step deals with concepts of the domain and their instances provided by the user.
It leads to aconceptual representation.
Afterwards, the system search in the lexical data bases to make lexical choicesand builds a g-derivation tree.
During this step, it uses also other linguistic resources (lexical entry aswell as syntactic functions) to optimize lexical choices (parallelism, aggregation, etc.).
Next the systembuilds a derived tree (syntactic representation), using standard algorithms ([Schabes & Shieber 94]) andan existing TAG grammar designed for syntactic analysis.
Finally, the text is post-processed (flexion,buldinglexicalized treestructure~-q~ TAG grammar3.1 User interfacepost-processingFigure 1: Data flowFigure 2: Cascading menus285Since the user may encounter difficulties to give input to FLAUBERT, we have developed a friendly userinterface which proposes him/her to instanciate concepts with cascading menus as it is shown in Figure 2.This interface is under X, and can be displayed on most X servers.
It ?invokes the generator?
in a Xtermwhich is automatically opened.3.2 .Conceptual representationBelow an example of conceptual representation for an instructional text (in software application domain):E3 := Ot,~ \[E1 opened=> TOK4 \]E2E3 \ ]EO.
: = ~a.,-ax:x.tcm \[goa l  =>body  > ~-- -  .ef fec t  =>El  : = ~  \[- C reator  =>?
Created  =>E2:= ~tx~sszcn \[i s t -event  =>2DJfl-event =>E4 :-- O~m \[ "openeropenedE5  := CLmC~ \[.c l i cker  ?c l i ckedHITOKZ\ ]FAE5 \]HI :=Usm \[ \]TOKI  := U~ZR_XD \[ \]name => "User  ID" \]=> HI  TOK3 := BOT~m \[=> ~3K2 \] name => , 'Add .
.
. "
\]=> HI TOK4 := ~ \[=> .TOK3 \] name .
=>"User  name"  \]3.3 Semantic representationFrom E0, the system computes for French the g-derivation tree shown in Figtlre 3.
In this tree, each ?nodewritten in bold (possibly accompanied with a \[T__Feature\], e.g.
\[T._R4duc\]) points ?
to a TAGlexicalized elementary tree, except newS, a special tree which adds a new sentence to a text.B creeragent- " ~b jetHI  TOKI?
pourP1HIouvr i r?
\[T R~ui t  \]agent---.
, ,~r? "
obj e ~TOK2 avant\[ T_R~duc \]subordonn4ec l iquer\[T_R~duit)agent- - ob3 e t?
H I  " TOK3news2nd 'ouvr i r\[T_Moyen\]objet:TOK4Figure 3 " G-derivation tree2863.4 Syntactic representationFrom the g-derivation tree in Figure 3 and with a French TAG grammar, the derived tree schematically?
resumed in Figure 4 is composed.SPPPrep.
Spour  NO V N1 C ouvr i r  I m?dTinfE c r4erS SNO V N1 S m?dl=imp ~ PP PP" PER IODNOAVC 1 VsI Ise  ouvr i rFigure 4: Derived tree3.5 French and English TextsFrench: Pour crder un identificateur d'utilisateur, ouvrez la fen~tre "User ID" avant de cliquer sur lebouton "Add... ".
La fen~tre "User name" s'ouvre.English: In order to create an user ID, open the "User ID" window.
Afterwards, click on the "Add..."button.
The "User name" window is opened.References\[Abeill6 91\] Abeillr, A.
199!.
Une grammaire lexicalis~e d'arbres adjoints pour lefran~ais.
Ph.D., Universit6 deParis 7.\[Candito 96\] Candito, M.-H. 1996.
A principle-based hierarchical representatio n f  LTAGS.
Proceedings ofCOLING'96, Copenhagen.\[Danlos&Meunier 96\] Danlos, L., and F. Meunier.
1996.
G-TAG, un formalisme pour la grn4ration de textes :prrsentation etapplications industrielles.
Actes de ILN'96, Nantes.\[Danlos 98a\] Danlos, L. 1998.
Linguistic way for expressing a discourse relation in a lexicalized text generationsystem.
Proceedings of COLING-A CL'98, Montrral.\[Danlos 98b\] Danlos, L. 1998.
G-TAG: A formalism for text generation inspired from TAG.
In A. Abeill6 and O.Rambow (eds).
Tree Adjoining Grammars, CSLI, Stanford.\[Meunier 97\] Meunier, F. 1997.
Implantation duformalisme de ggnEration G-TAG.
Ph.D., Universit6 de Paris 7.\[Paris et al 95\] Paris, C., K. Vander Linden, M. Fischer, A. Hartley, L. Pemberton, R. Power, and D. Scott.
1995: Asupport Tool for Writing Multilingual Instructions.
Proceedings oflJCAI-95, 1398-1404, Montreal.\[Schabes&Shieber 94\] Schabes, Y., and S. Shieber.
1994.
An alternative Conception of Tree-Adjoining Derivation,Computational Linguistics, 20:1.287
