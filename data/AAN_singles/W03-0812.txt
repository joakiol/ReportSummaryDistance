SDL?A Description Language for Building NLP SystemsHans-Ulrich KriegerLanguage Technology LabGerman Research Center for Arti?cial Intelligence (DFKI)Stuhlsatzenhausweg 3, D-66123 Saarbru?cken, Germanykrieger@dfki.deAbstractWe present the system description languageSDL that offers a declarative way of specify-ing new complex NLP systems from alreadyexisting modules with the help of three oper-ators: sequence, parallelism, and unrestrictediteration.
Given a system description and mod-ules that implement a minimal interface, theSDL compiler returns a running Java programwhich realizes exactly the desired behavior ofthe original speci?cation.
The execution se-mantics of SDL is complemented by a preciseformal semantics, de?ned in terms of conceptsof function theory.
The SDL compiler is partof the SProUT shallow language platform, asystem for the development and processing ofmultilingual resources.1 IntroductionIn this paper, we focus on a general system descriptionlanguage, called SDL, which allows the declarative spec-i?cation of NLP systems from a set of already existingbase modules.
Assuming that each initial module imple-ments a minimal interface of methods, a new complexsystem is composed with the help of three operators, re-alizing a sequence of two modules, a (quasi-)parallel ex-ecution of several modules, and a potentially unrestrictedself-application of a single module.
Communication be-tween independent modules is decoupled by a mediatorwhich is sensitive to the operators connecting the mod-ules and to the modules themselves.
To put it in an-other way: new systems can be de?ned by simply puttingtogether existing independent modules, sharing a com-mon interface.
The interface assumes functionality whichmodules usually already provide, such as set input, clearinternal state, start computation, etc.
It is clear that suchan approach permits ?exible experimentation with dif-ferent software architectures during the set up of a new(NLP) system.
The use of mediators furthermore guar-antees that an independently developed module will stayindependent when integrated into a new system.
In theworst case, only the mediator needs to be modi?ed or up-graded, resp.
In many cases, not even a modi?cation ofthe mediator is necessary.
The execution semantics ofSDL is complemented by an abstract semantics, de?nedin terms of concepts of function theory, such as Cartesianproduct, functional composition & application, Lambdaabstraction, and unbounded minimization.
Contrary toan interpreted approach to system speci?cation, our ap-proach compiles a syntactically well-formed SDL expres-sion into a Java program.
This code might then be incor-porated into a larger system or might be directly compiledby the Java compiler, resulting in an executable ?le.
Thisstrategy has two advantages: ?rstly, the compiled Javacode is faster than an interpretation of the correspondingSDL expression, and secondly, the generated Java codecan be modi?ed or even extended by additional software.The structure of this paper is as follows.
In the nextsection, we motivate the development of SDL and givea ?avor of how base expressions can be compiled.
Wethen come up with an EBNF speci?cation of the concretesyntax for SDL in section 3 and explain SDL with thehelp of an example.
Since modules can be seen as func-tions in the mathematical sense, we argue in section 4that a system speci?cation can be given a precise formalsemantics.
We also clarify the formal status of the me-diators and show how they are incorporated in the de?-nition of the abstract semantics.
Section 5 then de?nesthe programming interfaces and their default implemen-tation, both for modules and for mediators.
In the ?nalsection, we present some details of the compilation pro-cess.2 Motivation & IdeaThe shallow text processing system SProUT (Beckeret al, 2002) developed at DFKI is a complex plat-form for the development and processing of multilin-gual resources.
SProUT arranges processing components(e.g., tokenizer, gazetteer, named entity recognition) ina strictly sequential fashion, as is known from standardcascaded ?nite-state devices (Abney, 1996).In order to connect such (independently developed) NLcomponents, one must look at the application program-mer interface (API) of each module, hoping that there areAPI methods which allow, e.g., to call a module with aspeci?c input, to obtain the result value, etc.
In the bestcase, API methods from different modules can be used di-rectly without much programming overhead.
In the worstcase, however, there is no API available, meaning that wehave to inspect the programming code of a module andhave to write additional code to realize interfaces betweenmodules (e.g., data transformation).
Even more demand-ing, recent hybrid NLP systems such as WHITEBOARD(Crysmann et al, 2002) implement more complex inter-actions and loops, instead of using a simple pipeline ofmodules.We have overcome this in?exible behavior by imple-menting the following idea.
Since we use typed featurestructures (Carpenter, 1992) in SProUT as the sole datainterchange format between processing modules, the con-struction of a new system can be reduced to the interpre-tation of a regular expression of modules.
Because the ?sign for concatenation can not be found on a keyboard,we have given the three characters +, |, and ?
the follow-ing meaning:?
sequence or concatenationm1+m2 expresses the fact that (1) the input tom1+m2 is the input given tom1, (2) the output of modulem1 serves as the input to m2, and (3) that the ?naloutput of m1 + m2 is equal to the output of m2.This is the usual ?ow of information in a sequentialcascaded shallow NL architecture.?
concurrency or parallelism| denotes a quasi-parallel computation of indepen-dent modules, where the ?nal output of each mod-ule serves as the input to a subsequent module (per-haps grouped in a structured object, as we do by de-fault).
This operator has far reaching potential.
Weenvisage, e.g., the parallel computation of severalmorphological analyzers with different coverage orthe parallel execution of a shallow topological parserand a deep HPSG parser (as in WHITEBOARD).
Ina programming language such as Java, the executionof modules can even be realized by independentlyrunning threads.?
unrestricted iteration or ?xpoint computationm?
has the following interpretation.
Module mfeeds its output back into itself, until no morechanges occur, thus implementing a kind of a ?x-point computation (Davey and Priestley, 1990).
It isclear that such a ?xpoint might not be reached in ?-nite time, i.e., the computation must not stop.
A pos-sible application was envisaged in (Braun, 1999),where an iterative application of a base clause mod-ule was necessary to model recursive embeddingof subordinate clauses in a system for parsing Ger-man clause sentential structures.
Notice that unre-stricted iteration would even allow us to simulate anall-paths context-free parsing behavior, since sucha feedback loop can in principle simulate an un-bounded number of cascade stages in a ?nite-statedevice (each level of a CF parse tree has been con-structed by a single cascade stage).We have de?ned a Java interface of methods whicheach module must ful?ll that will be incorporated in theconstruction of a new system.
Implementing such an in-terface means that a module must provide an implementa-tion for all methods speci?ed in the interface with exactlythe same method name and method signature, e.g., set-Input(), clear(), or run().
To ease this implementa-tion, we have also implemented an abstract Java class thatprovides a default implementation for all these methodswith the exception of run(), the method which starts thecomputation of the module and which delivers the ?nalresult.The interesting point now is that a new system, declar-atively speci?ed by means of the above apparatus, can beautomatically compiled into a single Java class.
Even thenewly generated Java class implements the above inter-face of methods.
This Java code can then be compiled bythe Java compiler into a running program, realizing ex-actly the intended behavior of the original system speci-?cation.
The execution semantics for an arbitrary mod-ule m is de?ned to be always the execution of the run()method of m, written in Java as m.run()Due to space limitations, we can only outline the basicidea and present a simpli?ed version of the compiled codefor a sequence of two module instances m1 +m2, for theindependent concurrent computation m1 | m2, and forthe unbounded iteration of a single module instance m?.Note that we use the typewriter font when referring tothe concrete syntax or the implementation, but use italicsto denote the abstract syntax.
(m1 + m2)(input) ?m1.clear();m1.setInput(input);m1.setOutput(m1.run(m1.getInput()));m2.clear();m2.setInput(seq(m1, m2));m2.setOutput(m2.run(m2.getInput()));return m2.getOutput();(m1 | m2)(input) ?m1.clear();m1.setInput(input);m1.setOutput(m1.run(m1.getInput()));m2.clear();m2.setInput(input);m2.setOutput(m2.run(m2.getInput()));return par(m1, m2);(m?
)(input) ?m.clear();m.setInput(input);m.setOutput(fix(m));return m.getOutput();The pseudo code above contains three methods,seq(), par(), and fix(), methods which mediate be-tween the output of one module and the input of a suc-ceeding module.
Clearly, such functionality should notbe squeezed into independently developed modules, sinceotherwise a module m must have a notion of a ?xpointduring the execution of m?
or must be sensitive to theoutput of every other module, e.g., during the processingof (m1 | m2) + m. Note that the mediators take mod-ules as input, and so having access to their internal in-formation via the public methods speci?ed in the moduleinterface (the API).The default implementation for seq is of course theidentity function (speaking in terms of functional compo-sition).
par wraps the two results in a structured object(default implementation: a Java array).
fix() imple-ments a ?xpoint computation (see section 5.3 for the Javacode).
These mediators can be made speci?c to specialmodule-module combinations and are an implementationof the mediator design pattern, which loosely couples in-dependent modules by encapsulating their interaction ina new object (Gamma et al, 1995, pp.
273).
I.e., themediators do not modify the original modules and onlyhave read access to input and output via getInput()and getOutput().In the following, we present a graphical representationfor displaying module combination.
Given such pictures,it is easy to see where the mediators come into play.
De-picting a sequence of two modules is, at ?rst sight, nothard.m1 m2Now, if the input format of m2 is not compatible withthe output of m1, must we change the programming codefor m2?
Even more serious, if we would have anotherexpression m3 + m2, must m2 also be sensitive to theoutput format of m3?
In order to avoid these and othercases, we decouple module interaction and introduce aspecial mediator method for the sequence operator (seqin the above code), depicted by ?.m1 + m2?
connects two modules.
This fact is re?ected by mak-ing seq a binary method which takes m1 and m2 as inputparameters (see example code).Let us now move to the parallel execution of severalmodules (not necessarily two, as in the above example).mkm1...There is one problem here.
What happens to the outputof each module when the lines come together, meeting inthe outgoing arrow?
The next section has a few wordson this and presents a solution.
We only note here thatthere exists a mediator method par, which, by default,groups the output in a structured object.
Since par doesnot know the number of modules in advance, it takes asits parameter an array of modules.
Note further that theinput arrows are ?ne?every module gets the same data.Hence, we have the following modi?ed picture.mkm1...|Now comes the ?
operator.
As we already said, themodule feeds itself with its own output, until a ?xpointhas been reached, i.e., until input equals output.
Insteadof writingmwe make the mediator method for ?
explicit, since it em-bodies the knowledge about ?xpoints (and not the mod-ule):m ?3 SyntaxA new system is built from an initial set of already ex-isting modules M with the help of the three operators +,|, and ?.
The set of all syntactically well-formed moduledescriptions D in SDL is inductively de?ned as follows:?
m ?M ?
m ?
D?
m1,m2 ?
D ?
m1 +m2 ?
D?
m1, .
.
.
,mk ?
D ?
(| m1 .
.
.mk) ?
D?
m ?
D ?
m?
?
DExamples in the concrete syntax are written using thetypewriter font, e.g., module.
All operators have thesame priority.
Succeeding modules are written from leftto right, using in?x notation, e.g., m1 + m2.Parallel executed modules must be put in parentheseswith the | operator ?rst, for instance (| m1 m2).
Notethat we use the pre?x notation for the concurrency op-erator | to allow for an arbitrary number of arguments,e.g., (| m1 m2 m3).
This technique furthermore cir-cumvents notorious grouping ambiguities which mightlead to different results when executing the modules.
No-tice that since | must neither be commutative nor must itbe associative, the result of (| m1 m2 m3) might be dif-ferent to (| m1 (| m2 m3)), to (| (| m1 m2) m3),or even to (| m2 (| m1 m3)), etc.
Whether | is com-mutative or associative is determined by the implemen-tation of concurrency mediator par.
Let us give an ex-ample.
Assume, for instance, that m1, m2, and m3 wouldreturn typed feature structures and that par() would jointhe results by using uni?cation.
In this case, | is clearlycommutative and associative, since uni?cation is commu-tative and associative (and idempotent).Finally, the unrestricted self-application of a moduleshould be expressed in the concrete syntax by using themodule name, pre?xed by the asterisk sign, and groupedusing parentheses, e.g., (* module).
module heremight represent a single module or a complex expression(which itself must be put in parentheses).Making | and ?
pre?x operators (in contrast to +) easethe work of the syntactical analysis of an SDL expression.The EBNF for a complete system description system isgiven by ?gure 1.
A concrete running example is shownin ?gure 2.The example system from ?gure 2 should be readas de?ne a new module de.dfki.lt.test.Systemas (| rnd1 rnd2 rnd3) + inc1 + ..., varia-bles rnd1, rnd2, and rnd3 refer to instancesof module de.dfki.lt.sdl.test.Randomize,module Randomize belongs to packagede.dfki.lt.sdl.test, the value of rnd1 shouldbe initialized with ("foo", "bar", "baz"), etc.Every single line must be separated by the newlinecharacter.The use of variables (instead of using directly modulenames, i.e., Java classes) has one important advantage:variables can be reused (viz., rnd2 and rnd3 in the ex-ample), meaning that the same instances are used at sev-eral places throughout the system description, instead ofusing several instances of the same module (which, ofcourse, can also be achieved; cf.
rnd1, rnd2, and rnd3which are instances of module Randomize).
Notice thatthe value of a variable can not be rede?ned during thecourse of a system description.4 Modules as FunctionsBefore we start the description of the implementation inthe next section, we will argue that a system descriptioncan be given a precise formal semantics, assuming thatthe initial modules, which we call base modules are wellde?ned.
First of all, we only need some basic mathemat-ical knowledge from secondary school, viz., the conceptof a function.A function f (sometimes called a mapping) from S toT , written as f : S ??
T , can be seen as a specialkind of relation, where the domain of f is S (written asDOM(f) = S), and for each element in the domain of f ,there is at most one element in the range (or codomain)RNG(f).
If there always exists an element in the range,we say that f is a total function (or well de?ned) and writef ?.
Otherwise, f is said to be a partial function, and foran s ?
S for which f is not de?ned, we then write f(s)?.Since S itself might consist of ordered n-tuples andthus is the Cartesian product of S1, .
.
.
, Sn, depicted as?ni=1Si, we use the vector notation and write f(~s) insteadof f(s).
The n-fold functional composition of f : S ?
?T (n ?
0) is written as fn and has the following induc-tive de?nition: f 0(~s) := ~s and f i+1(~s) := f(f i(~s)).s ?
S is said to be a ?xpoint of f : S ??
S ifff(f(s)) =S f(s) (we use =S to denote the equality rela-tion in S).Assuming that m is a module for which a proper run()method has been de?ned, we will, from now on, refer tothe function m as abbreviating m.run(), the executionof method run() from module m. Hence, we de?ne theexecution semantics of m to be equivalent to m.run().4.1 SequenceLet us start with the sequence m1 + m2 of two mod-ules, regarded as two function m1 : S1 ??
T1 andm2 : S2 ??
T2.
+ here is the analogue to functionalcomposition ?, and so we de?ne the meaning (or abstractsemantics) [[ ? ]]
of m1 +m2 as[[m1 +m2]](~s) := (m2 ?m1)(~s) = m2(m1(~s))m1 +m2 then is well-de?ned if m1 ?, m2 ?, and T1 ?S2 is the case, due to the following biconditional:m1 ?,m2 ?, T1 ?
S2 ??
(m1 ?m2 : S1 ??
T2)?4.2 ParallelismWe now come to the parallel execution of k modules mi :Si ??
Ti (1 ?
i ?
k), operating on the same input.
Asalready said, the default mediator for | returns an orderedsystem ?
de?nition {command}?
variablesde?nition ?module "=" regexpr newlinemodule ?
a fully quali?ed Java class nameregexpr ?
var | "(" regexpr ")" | regexpr "+" regexpr | "(" "|" {regexpr}+ ")" | "(" "*" regexpr ")"newline ?
the newline charactercommand?mediator | threadedmediator ?
"Mediator =" med newlinemed ?
a fully quali?ed Java class namethreaded ?
"Threaded =" {"yes" | "no"} newlinevariables ?
{vareq newline}+vareq ?
var "=" module [initexpr]var ?
a lowercase symbolinitexpr ?
"(" string {"," string}?
")"string ?
a Java stringFigure 1: The EBNF for the syntax of SDL.de.dfki.lt.test.System = (| rnd1 rnd2 rnd3) + inc1 + inc2 + (* i5ut42) + (* (rnd3 + rnd2))Mediator = de.dfki.lt.sdl.test.MaxMediatorThreaded = Yesrnd1 = de.dfki.lt.sdl.test.Randomize("foo", "bar", "baz")rnd2 = Randomize("bar", "baz")rnd3 = de.dfki.lt.sdl.test.Randomize("baz")inc1 = de.dfki.lt.sdl.test.Incrementinc2 = de.dfki.lt.sdl.test.Incrementi5ut42 = de.dfki.lt.sdl.test.Incr5UpTo42Figure 2: An example in the concrete syntax of SDL.sequence of the results of m1, .
.
.
,mk, hence is similarto the Cartesian product ?
:[[(| m1 .
.
.
mk)]](~s) := ?m1(~s), .
.
.
,mk(~s) ?
(| m1 .
.
.
mk) is well-de?ned if each module is wellde?ned and the domain of each module is a superset ofthe domain of the new composite module:m1 ?, .
.
.
,mk ?
=?(m1?
.
.
.
?mk : (S1 ?
.
.
.
?
Sk)k ??
T1?
.
.
.
?Tk)?4.3 IterationA proper de?nition of unrestricted iteration, however, de-serves more attention and a bit more work.
Since a mod-ule m feeds its output back into itself, it is clear that theiteration (m?
)(~s) must not terminate.
I.e., the questionwhetherm??
holds, is undecidable in general.
Obviously,a necessary condition for m??
is that S ?
T , and so ifm : S ??
T and m?
holds, we have m?
: S ??
S.Since m is usually not a monotonic function, it must notbe the case that m has a least and a greatest ?xpoint.
Ofcourse, m might not possess any ?xpoint at all.Within our very practical context, we are interested in?nitely-reachable ?xpoints.
From the above remarks, it isclear that given ~s ?
S, (m?
)(~s) terminates in ?nite timeiff no more changes occur during the iteration process,i.e.,?n ?
N .
mn(~s) =S mn?1(~s)We can formalize the meaning of ?
with the help ofKleene?s ?
operator, known from recursive function the-ory (Hermes, 1978).
?
is a functional and so, given afunction f as its input, returns a new function ?
(f), theunbounded minimization of f .
Originally employed toprecisely de?ne (partial) recursive functions of naturalnumbers, we need a slight generalization, so that we canapply ?
to functions, not necessarily operating on naturalnumbers.Let f : Nk+1 ??
N (k ?
N).
?
(f) : Nk ??
N isgiven by?
(f)(~x) :=??
?n if f(~x, n) = 0 and f(~x, i) > 0,for all 0 ?
i ?
n?
1?
otherwiseI.e., ?
(f)(~x) returns the least n for which f(~x, n) = 0.Such an n, of course, must not exist.We now move from the natural numbers N to an arbi-trary (structured) set S with equality relation =S .
Thetask of ?
here is to return the number of iteration stepsn for which a self-application of module m no longerchanges the output, when applied to the original input~s ?
S. And so, we have the following de?nitional equa-tion for the meaning of m?:[[m?
]](~s) := m?
(m)(~s)(~s)Obviously, the number of iteration steps needed to ob-tain a ?xpoint is given by ?
(m)(~s), where ?
: (S ?
?S) ??
N. Given m, we de?ne ?
(m) as?
(m)(~s) :=??????
?n if mn(~s) =S mn?1(~s) andmi(~s) 6=S mi?1(~s),for all 0 ?
i ?
n?
1?
otherwiseCompare this de?nition with the original ?
(f)(~x) onnatural numbers above.
Testing for zero is replaced hereby testing for equality in S. This last de?nition completesthe semantics for m?.4.4 Incorporating MediatorsThe above formalization does not include the use ofmediators.
The effects the mediators have on the in-put/output of modules are an integral part of the de?nitionfor the meaning of m1 +m2, (| m1 .
.
.
mk), and m?.
Incase we explicitly want to represent (the default imple-mentation of) the mediators in the above de?nitions, wemust, ?rst of all, clarify their status.Let us focus, for instance, on the mediator for the se-quence operator +.
We already said that the mediator for+ uses the output of m1 to feed m2, thus can be seen asthe identity function id, speaking in terms of functionalcomposition.
Hence, we might rede?ne [[(m1 +m2)]](~s)as[[(m1 +m2)]](~s) :=(m2 ?
id ?m1)(~s) = m2(id(m1(~s))) = m2(m1(~s))If so, mediators were functions and would have thesame status as modules.
Clearly, they pragmatically dif-fer from modules in that they coordinate the interactionbetween independent modules (remember the mediatormetaphor).
However, we have also said that the media-tor methods take modules as input.
When adopting thisview, a mediator is different from a module: it is a func-tional (as is ?
), taking functions as arguments (the mod-ules) and returning a function.
Now, let S be the mediatorfor the + operator.
We then obtain a different semanticsfor m1 +m2.
[[(m1 +m2)]](~s) := (m2 ?
S(m1,m2) ?m1)(~s)andS(m1,m2) := idis the case in the default implementation for +.
This view,in fact, precisely corresponds to the implementation.Let us quickly make the two other de?nitions re?ectthis new view and let P and F be the functionals for |and ?, resp.
For |, we now have[[(| m1 .
.
.
mk)]](~s) := (P(m1, .
.
.
,mk)?
(?ki=1mi))(~s k)(?ki=1mi)(~s k) denotes the ordered sequence?m1(~s), .
.
.
,mk(~s) ?
to which function P(m1, .
.
.
,mk)is applied.
At the moment,P(m1, .
.
.
,mk) := ?ki=1idi.e., the identity function is applied to the resultof each mi(~s), and so in the end, we still obtain?m1(~s), .
.
.
,mk(~s) ?.The adaption of m?
is also not hard: F is exactly the?
(m)(~x)-fold composition of m, given value ~x.
Since ~xare free variables, we use Church?s Lambda abstraction(Barendregt, 1984), make them bound, and writeF(m) := ?~x .m?(m)(~x)(~x)Thus[[m?
]](~s) := (F(m))(~s)It is clear that the above set of de?nitions is still notcomplete, since it does not cover the cases where a mod-ule m consists of several submodules, as does the syntaxof SDL clearly admit.
This leads us to the ?nal four in-ductive de?nitions which conclude this section:?
[[m]](~s) := m(~s) iff m is a base module?
[[(m1 +m2)]](~s) :=([[m2]] ?
S([[m1]], [[m2]]) ?
[[m1]])(~s)?
[[(| m1 .
.
.
mk)]](~s) :=(P([[m1]], .
.
.
, [[mk]]) ?
(?ki=1[[mi]]))(~s k)?
[[m?
]](~s) := (F([[m]]))(~s),whereas F([[m]]) := ?~x .
[[m]]?
([[m]])(~x)(~x)Recall that the execution semantics of m(~s) has notchanged after all and is still m.run(s), whereas s abbre-viates the Java notation for the k-tuple ~s.5 InterfacesThis section gives a short scetch of the API methodswhich every module must implement and presents the de-fault implementation of the mediator methods.5.1 Module Interface IModuleThe following seven methods must be implemented by amodule which should contribute to a new system.
Thenext subsection provides a default implementation forsix of them.
The exception is the one-argument methodrun() which is assumed to execute a module.?
clear() clears the internal state of the module itis applied to.
clear() is useful when a moduleinstance is reused during the execution of a sys-tem.
clear() might throw a ModuleClearErrorin case something goes wrong during the clearingphase.?
init() initializes a given module by providingan array of init strings.
init() might throw aModuleInitError.?
run() starts the execution of the module to whichit belongs and returns the result of this computa-tion.
An implementation of run() might throwa ModuleRunError.
Note that run() should notstore the input nor the output of the computation.This is supposed to be done independently by usingsetInput() and setOutput() (see below).?
setInput() stores the value of parameter inputand returns this value.?
getInput() returns the input originally given tosetInput().?
setOutput() stores the value of parameteroutput and returns this value.?
getOutput() returns the output originally given tosetOutput().5.2 Module MethodsSix of the seven module methods are provided by adefault implementation in class Modules which imple-ments interface IModule (see above).
New modules areadvised to inherit from Modules, so that only run()must actually be speci?ed.
Input and output of a moduleis memorized by introducing the two additional privateinstance ?elds input and output.public abstract class Modules implements IModule {private Object input, output;protected Modules() {this.input = null;this.output = null; }public Object run(Object input) throwsUnsupportedOperationException {throw new UnsupportedOperationException("..."); }public void clear() {this.input = null;this.output = null; }public void init(String[] initArgs) {}public Object setInput(Object input) {return (this.input = input); }public Object getInput() {return this.input; }public Object setOutput(Object output) {return (this.output = output); }public Object getOutput() {return this.output; }}5.3 Mediator MethodsThe public class Mediators provides a default imple-mentation for the three mediator methods, speci?ed ininterface IMediator.
It is worth noting that althoughfix() returns the ?xpoint, it relocates its computationinto an auxiliary method fixpoint() (see below), dueto the fact that mediators are not allowed to change theinternal state of a module.
And thus, the input ?eld stillcontains the original input, whereas the output ?eld refersto the ?xpoint, at last.public class Mediators implements IMediator {public Mediators() {}public Object seq(IModule module1, IModule module2) {return module1.getOutput(); }public Object par(IModule[] modules) {Object[] result = new Object[modules.length];for (int i = 0; i < modules.length; i++)result[i] = modules[i].getOutput();return result; }public Object fix(IModule module) {return fixpoint(module, module.getInput()); }private Object fixpoint(IModule module, Object input) {Object output = module.run(input);if (output.equals(input))return output;elsereturn fixpoint(module, output); }}6 CompilerIn section 2, we have already seen how basic expressionsare compiled into a sequence of instructions, consistingof API methods from the module and mediator interface.Here, we like to glance at the compilation of more com-plex SDL expressions.First of all, we note that complex expressions are de-composed into ?at basic expressions which are not fur-ther structured.
Each subexpression is associated with anew module variable and these variables are inserted intothe original system description which will also then be-come ?at.
In case of the example from ?gure 2, we havethe following subexpressions together with their vari-ables (we pre?x every variable by the dollar sign): $1= (| $rnd1 $rnd2 $rnd3), $2 = (* $i5ut42), $3= ($rnd3 + $rnd2), and $4 = (* $3).
As a result,the original system description reduces to $1 + $inc1+ $inc2 + $2 + $4 and thus is normalized as $1, .
.
.,$4 are.
The SDL compiler then introduces so-called localor inner Java classes for such subexpressions and locatesthem in the same package to which the newly de?nedsystem belongs.
Clearly, each new inner class must alsoful?ll the module interface IModule (see section 5) andthe SDL compiler produces the corresponding Java code,similar to the default implementation in class Modules(section 5), together with the right constructors for theinner classes.For each base module and each newly introduced innerclass, the compiler generates a private instance ?eld (e.g.,private Randomize $rnd1) and a new instance (e.g.,this.$rnd1 = new Randomize()) to which the APImethods can be applied.
Each occurence of the operators+, |, and * corresponds to the execution of the mediatormethods seq, par, and fix (see below).Local variables (pre?xed by the low line character) arealso introduced for the individual run() methods ( 15,. .
., 23 below).
These variables are introduced by theSDL compiler to serve as handles (or anchors) to alreadyevaluated subexpression, helping to establish a proper?ow of control during the recursive compilation process.We ?nish this paper by presenting the generated codefor the run() method for system System from ?gure 2.public Object run(Object input)throws ModuleClearError, ModuleRunError {this.clear();this.setInput(input);IMediator _med = new MaxMediator();this.$1.clear();this.$1.setInput(input);Object _15 = this.$1.run(input);this.$1.setOutput(_15);Object _16 = _med.seq(this.$1, this.$inc1);this.$inc1.clear();this.$inc1.setInput(_16);Object _17 = this.$inc1.run(_16);this.$inc1.setOutput(_17);Object _18 = _med.seq(this.$inc1, this.$inc2);this.$inc2.clear();this.$inc2.setInput(_18);Object _19 = this.$inc2.run(_18);this.$inc2.setOutput(_19);Object _20 = _med.seq(this.$inc2, this.$2);this.$2.clear();this.$2.setInput(_20);Object _21 = this.$2.run(_20);this.$2.setOutput(_21);Object _22 = _med.seq(this.$2, this.$4);this.$4.clear();this.$4.setInput(_22);Object _23 = this.$4.run(_22);this.$4.setOutput(_23);return this.setOutput(_23);}We always generate a new mediator object ( med) foreach local class in order to make the parallel executionof modules thread-safe.
Note that in the above code, themediator method seq() is applied four times due to thefact that + occurs four times in the original speci?cation.The full code generated by the SDL compilerfor the example from ?gure 2 can be found underhttp://www.dfki.de/?krieger/public/.
The di-rectory also contains the Java code of the involved mod-ules, plus the default implementation of the mediator andmodule methods.
In the workshop, we hope to furtherreport on the combination of WHAT (Scha?fer, 2003), anXSLT-based annotation transformer, with SDL.AcknowledgementI am grateful to my colleagues Bernd Kiefer, MarkusPilzecker, and Ulrich Scha?fer, helping me to make thingsclear.
Thanks to the anonymous reviewers who have iden-ti?ed weak points.
This work was supported by the Ger-man Federal Ministry for Education, Science, Research,and Technology under grant no.
01 IW C02 (QUETAL)and by an EU grant under no.
IST 12179 (Airforce).ReferencesS.
Abney.
1996.
Partial parsing via ?nite-state cascades.
Natu-ral Language Engineering, 2(4):337?344.H.
Barendregt.
1984.
The Lambda Calculus, its Syntax andSemantics.
North-Holland.M.
Becker, W. Dro?zd?zyn?ski, H.-U.
Krieger, J. Piskorski, U.Scha?fer, and F. Xu.
2002.
SProUT?shallow processingwith uni?cation and typed feature structures.
In Proceedingsof ICON.C.
Braun.
1999.
Flaches und robustes Parsen DeutscherSatzgefu?ge.
Master?s thesis, Universita?t des Saarlandes.
InGerman.B.
Carpenter.
1992.
The Logic of Typed Feature Structures.Cambridge University Press.B.
Crysmann, A. Frank, B. Kiefer, S. Mu?ller, G. Neumann, J.Piskorski, U. Scha?fer, M. Siegel, H. Uszkoreit, F. Xu, M.Becker, and H.-U.
Krieger.
2002.
An integrated architecturefor shallow and deep processing.
In Proceedings of ACL,pages 441?448.B.A.
Davey and H.A.
Priestley.
1990.
Introduction to Latticesand Order.
Cambridge University Press.E.
Gamma, R. Helm, R. Johnson, and J. Vlissides.
1995.
De-sign Patterns.
Elements of Reusable Object-Oriented Soft-ware.
Addison-Wesley.H.
Hermes.
1978.
Aufza?hlbarkeit, Entscheidbarkeit, Berechen-barkeit: Einfu?hrung in die Theorie der rekursiven Funktio-nen.
Springer, 3rd ed.
In German.
Also as Enumerability,Decidability, Computability: An Introduction to the Theoryof Recursive Functions.U.
Scha?fer.
2003.
WHAT: an XSLT-based infrastructure for theintegration of natural language processing components.
InProceedings of SEALTS.
