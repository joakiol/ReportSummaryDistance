Babel: A testbed for research in origins of languageAngus McIntyreSony CSL Paris6 rue AmyotParis 75003, Franceangus@csl.sony.frAbstractWe believe that language is a complex adaptivesystem that emerges from adaptive interactionsbetween language users and continues to evolveand adapt through repeated interactions.
Ourresearch looks at the mechanisms and processesinvolved in such emergence and adaptation.
Toprovide a basis for our computer simulations,we have implemented an open-ended, extensi-ble testbed called Babel which allows rapid con-struction of experiments and flexible visualiza-tion of results.1 IntroductionOver the past few years, a growing number ofresearchers have begun to look at some of thefundamental questions in linguistics in a newlight, using new tools and methodologies to ex-plore a number of unresolved issues.
Amongthese issues are questions about the origin andthe evolution of natural anguages - how a lan-guage can arise, and how it can continue to de-velop and change over time (see (Steels, 1997)for a summary).Some workers in the field stick relativelyclosely to what might be described as the Chom-skyan orthodoxy (see (Chomsky, 1981), (Chore-sky, 1986)) in assuming the existence of ageneticMly-encoded language acquisition device(LAD) which is primarily responsible for deter-mining the properties of language.
For theseresearchers (see for example (Sriscoe, 1997)),computer simulations offer the chance to ex-plore the possible properties and origins of theLAD.Other researchers choose to focus not on ge-netic evolution of human linguistic faculties, buton the selectionist forces that operate on lan-guage itself.
Kirby and Hurford (Kirby andHurford, 1997), for example, have shown thata model of selectionist processes operating onthe language is able to explain both linguis-tic universals and variational constraints.
Therole of selection effects on language can evenbe explored independently of any assumed in-herited language faculty; Oliphant (Oliphant,1996) shows that communication may emergefrom the nature of structured and repeated in-teractions between language users, while Steels(Steels, 1996) demonstrates how a coherentshared language can evolve in a population ofagents as a result of repeated language games- stylised interactions involving the exchange oflinguistic information.Our research views language as a complexadaptive system that emerges as a result ofinteractions between language users.
Contin-ued adaptive interactions lead naturally to theevolution of the language and the diffusion ofnew linguistic tokens and properties through thecommunity of speakers.
Using computer simu-lations of populations of language users, we areinvestigating the processes that shape naturallanguage and exploring possible learning mech-anisms that can allow coherent shared commu-nication systems to arise in populations.This paper describes a tool that we have de-veloped to allow rapid implementation f exper-imental simulations within this paradigm.
Ourdescription begins with an overview of the prin-cipal requirements we aimed to meet, followedby a more detailed look at the actual imple-mentation of the tool and the facilities that itprovides.2 Requ i rementsOur approach to studying language is basedon multi-agent simulations.
Mainstream re-search on multi-agent systems has given riseto a number of environments and programming830languages for building simulations (consider, forexample, SWARM (Minaret al, 1996), GAEA(Nakashima et al, 1996), or AKL (Carlson etal., 1994)), but none of these systems have beendesigned for specifically linguistic experimen-tation.
Moreover, we wanted to work withinthe paradigm proposed by Steels (Steels, 1996),where language-using a ents construct a sharedlanguage through repeated interactions with aprecise structure.
Examples of such games in-clude naming games, in which agents take turnsnaming and learning the names of objects intheir simulated environment, imitation gamesin which one agent attempts to meaningfullyimitate a linguistic form presented by another,and discrimination games, in which agents at-tempt to build a system that allows them to dis-cern distinctions between objects in the environ-ment.
The tool needed to provide a library of re-usable building blocks with which we could de-scribe the formal structure of these games, rep-resent the principal elements of the simulatedenvironment, and develop models of the agents'memories and learning processes.
Moreover, itwas important that it should be open-ended, sothat we would be able to use pre-defined ele-ments to rapidly build new simulations basedon new game types or agent properties.In addition to providing building blocks forsimulation development, he system must of-fer an interface for controlling the simulations.This interface should allow users to launch sim-ulations, to modify the environment by addingor removing agents, to change xperimental pa-rameters and so forth.
To simplify the task ofporting the tool and to protect simulation de-velopers from the intricacies of user interfaceprogramming, we also wanted to isolate the in-terface code as much as possible from the codedefining the (portable) core of the system andfrom code written by experimenters.Lastly, the tool was required to provide waysin which the data generated by simulationscould be visualized.
One of the challenges inthis type of simulation, particularly where mul-tiple agents are involved, is in getting an impres-sion of the changes that are taking place.
Wewanted something that could let us 'look inside'our simulations as they ran and try to get anidea of what was actually happening.
It shouldalso, of course, provide the means to export thedata for subsequent analysis or presentation.In summary, the system needed to offer anextensible set of building blocks for simulationdevelopment, ools for controlling the simula-tions, and tools for visualizing the progress ofsimulations.
In the next section we will look atthe approach taken to meeting these needs.3 Imp lementat ionThe choice of language for the implementationwas determined by the need for a standardizedlanguage suitable for rapid prototyping withgood symbolic and list-processing capabilities.While the portability of Java was tempting, weeventually decided on Common LISP ((Steele,1990)) with its more powerful symbol and listmanipulation facilities.Babel was developed using Macintosh Com-mon LISP from Digitool, and has since beenported to Windows under Allegro CommonLISP by colleagues at the Vrije UniversiteitBrussel.
The core of the system is portableCommon LISP that can run on any platform,leaving only the interface to be ported to otherplatforms.
In future, when stable implementa-tions of the Common LISP Interface Manager(CLIM) are widely available, it may be possi-ble to produce a single version which will runon any system.
The task of porting is, however,not too onerous, since the majority of the code iscontained in the portable core.
Most importantof all, experimenter code - definitions of agents,game types and environments - can typicallyrun without modification on any platform.
Thehigh-level services provided by the toolkit meanthat experimenters arely need to get involvedin platform-specific interface programming.3.1 Class l ibraryBuilding blocks for experimental developmentare provided by a rich class library ofCLOS (Common LISP Object System) objects.Classes present in the library include?
basic agent classes?
classes for capturing information about in-teractions, the contexts in which they takeplace and the linguistic tokens exchanged?
classes representing the agent's environ-ment ('worlds')831?
data structures that can be used to imple-ment agent memories and learning mecha-nismsThe two most important kinds of classesare the agent and the world classes.
Theagent classes define the capabilities of individ-ual agents - the way they store information,the kind of utterances they can produce, andthe mechanisms they use to learn or to buildstructure.
Depending on the nature of the envi-ronment, agents may also have attributes uchas position, age, energy state, social status, orany other property that might be relevant.
Thecore class library provides a root class of agents,together with some specializations appropriateto given interaction types or learning models.Experimenters can use these classes as founda-tions for building agents to function in a specificexperimental context.While agent classes define the capabilities andproperties of individual speakers in the languagecommunity, the world classes capture the prop-erties of the world and, more importantly, thenature of interactions between the agents.
Inthis way, procedural definitions of the differentkinds of language games can be given as part ofthe definition of a basic world class.
The exper-imenter can use a given language game simplyby basing their experimental world on the ap-propriate class.As an example, consider the following codefragment taken from the ng-world class:(de fmethod  RUN-GAME ( (Wor ld  ng-wor ld ) )( let*( (Speaker  (choose-speaker  .
.
. )
)(Hearer  (choose-hearer  .
.
. )
)(Context  (choose-context  ...))(Ut terance  (compose-ut terance  .
.
.
))(Success(when Ut terance( recogn ise -or -s to re  .
.
.
))))(update -wor ld -s ta te  ... )( reg is ter - in teract ion  ...)))This defines the basic form of the naminggame - the choice of speaker and hearer, thechoice of a context (including a topic), and theconstruction of an utterance by the speaker, fol-lowed by recognition of the utterance by thehearer 1.
The state of the world - including the1 To make the code easier to read, function argumentsare not shownobject ,~gurable-I ' ' .
_ ' object::::::::: ::::::::::/i : :\] r~ i l  wodd reporter monitor: : : : : :  : : : : : : : : : : : : : : : : : : :  : : : : : : :spatial- i i  object wodd-with- i i open- objects \[ \[ worldi i ~ ~  :_____!!
?~i:: : !
!
: : :  J : : : :~  :::: '"ng-agent ng-wodd::: : : : : : : : : : : : : : : : : : : : : : : : : : :i l'uster I ~" gdng- ~i open-ng--- - .
J  Naming !
.
.
.
.
.
.
t - -  ~,ge~; world i~ wodd Grime\ [ ' : : : : :  =================================================== i ~ Geographically-i open-gdng- Distributedwortd Naming Gamet .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Figure 1: Core classes in Babelagents' own memory structures - is then up-dated and the interaction is registered by themonitoring system (described later).
Each ofthe methods called by this method can be indi-vidually overridden by subclasses, giving exper-imenters fine control over the procedures usedto choose speakers or hearers, formulate utter-ances, store information and so forth.The class library is implemented in a modularfashion, so that experimenters can extend thefunctionality of the base classes by loading ad-ditional modules.
The multiple-inheritance sys-tem in CLOS allows properties to be attachedto experimental objects imply by making theminherit from different subclasses.
For instance,any object can be given a position by makingit inherit from the class spatial-object de-fined in the Space module, as shown in Figure1, which shows a portion of the existing classlibrary.As Babel evolves, useful classes and datastructures defined by experimenters are ab-sorbed into the core library set where they canin turn serve as building blocks for future ex-periments.3.2 Cont ro l  inter faceIn addition to the core class library, Babel mustprovide an interface that can be used to control832Figure 2: Babel's main control windowthe simulations.
As previously noted, the coreBabel functions and the code defining the inter-face are carefully separated, in order to facilitateporting and allow experimenters to write codethat does not depend on - or require knowledgeo f -  any specific operating system platform.The control interface in Babel is realised bya single window that allows the user to launchsimulations, to set experimental parameters, toconfigure data reporting tools and even to writesimple batch scripts to control ongoing simu-lations.
The different functionalities are sepa-rated out into subpanes that group related con-trols together.
Figure 2 shows a stylised view ofthe interface, showing each of the main controlpanes.Access to interface functions is available toexperimenter code through a well-defined API.For instance, experimental parameters can bedeclared using a simple description languagethat specifies the type, range and default val-ues for each parameter.
Parameters declared inthis way are automatically accessible for editingthrough the parameter editor, and can even beupdated programmatically at runtime by batchscripts executed by Babel's built-in task proces-sor.3.3 V isua l izat ion toolsA major challenge has been to provide a wayto allow experimenters to follow the progressof their experiments and to view and extractdata from the simulations.
The same consid-erations that governed esign of the interfaceare applicable here as well: the code needed todisplay simulation data (for instance by draw-ing a graph onscreen) is typically platform-dependent, but experimenters should not needto get involved in user interface programmingsimply to see their results.
Moreover, theyshould not need to 'reinvent he wheel' eachtime; once a particular way of visualizing datahas been implemented, it should be available toall experiments hat can make use of a similarrepresentation.The approach taken in Babel has been to sep-arate out the task of data collection from thetask of data display.
We call the data collectorsmonitors, because they monitor the simulationas it proceeds and sample data at appropriateintervals or under specific circumstances.
Datadisplay is handled by reporters, which take in-formation from the monitors and present it tothe user or export it for analysis by other pro-grams.Monitors and reporters tand in a many-to-many relationship to each other.
The data froma given monitor type can be shown by a rangeof different possible reporters; in the same way,a single reporter instance can show the out-put from multiple monitors imultaneously.
Inthe case of a graph display, for example, dif-ferent experimental variables or measures maybe drawn on the same chart, as shown in Fig-ure 3, where change in population is graphedagainst communicative success over time.
Simi-larly, a map might show the positions of individ'ual agents and the zones of occurrence of differ-ent linguistic features.
The control interface al-lows users to instantiate and combine monitorsand reporters, while a description system allowsthe Babel framework to ensure that users do notattempt to combine incompatible reporters andmonitors at runtime, issuing a warning if theuser attempts to make an inappropriate match.Communication between monitors and re-porters is defined by a high-level API, allowingthe monitors to remain platform-independent.Experimenters can build their own monitorsbased on a library of core monitor classes whichdefine appropriate behaviors such as takingsamples at specified intervals; reacting to eventsin the world or watching for the occurrence ofparticular conditions.
Other classes may spec-833\] i$~J~-~ Graph Olspla y I I:;I l=l~ Pelmlatkmo.. A J I "011.16.12840Figure 3: A graph display with two installedmonitorsify the sampling range of a given monitor - asingle agent, a defined group, or the entire pop-ulation - and multiple-inheritance makes it pos-sible to flexibly combine the different ypes.
Ef-forts have been made to provide powerful baseclasses to perform commonly-required tasks.
Insome cases, adding new monitoring functional-ity can involve as little as defining and declaringa single sampling function.4 Eva luat ion  and  s ta tusAt the time of writing, the Babel toolkit is stillunder development, and has only been releasedto a very limited test group.
Nevertheless, ini-tial reactions have been generally positive, andthe consensus seems to be that it meets its pri-mary goal of simplifying and accelerating thetask of developing simulations.
A Windows portis in progress, and there are plans to make thesoftware available to a wider community in fu-ture if there is sufficient interest.5 Conc lus ionThis paper has presented an software environ-ment for the development of multi-agent-basedsimulations of language mergence and evolu-tion.
Among the innovative features of the soft-ware are a class library capable of represent-ing the stylised interactions known as languagegames which form the basis of our research, anda flexible mechanism for capturing and present-ing data generated by the simulation.6 AcknowledgementsThe Babel environment was developed at theSony Computer Science Laboratory in Paris.My colleagues Luc Steels and Frederic Kaplanof Sony CSL Paris, and Joris van Looveren andBart de Boer from the Vrije Universiteit Brus-sel have provided essential feedback and sugges-tions throughout the development process.Re ferencesTed Briscoe.
1997.
Language acquisition: thebioprogram hypothesis and the baldwin ef-fect.
Language.
(submitted).B.
Carlson, S. Janson, and S. Haridi.
1994.Akl(fd): A concurrent language for fd pro-gramming.
In Proceedings of the 1994 In-ternational Logic Programming Symposium.MIT Press.Noam Chomsky.
1981.
Government and Bind-ing.
Foris, Dordrecht.Noam Chomsky.
1986.
Knowledge of Language.Praeger.Simon Kirby and James Hurford.
1997.
Learn-ing, culture and evolution in the origin of lin-guistic constraints.
In Phil Husbands and In-man Harvey, editors, Fourth European Con-ference on Artificial Life.
MIT Press.Nelson Minar, Roger Burkhart, Chris Langton,and Manor Ashkenazi.
1996.
The swarm sim-ulation system: A toolkit for building multi-agent simulations.
Technical report, SantaFeInstitute.Hideyuki Nakashima, Itsuki Noda, and KenichiHanda.
1996.
Organic programming lan-guage gaea for multi-agents.
In MarioTokoro, editor, Proceedings of the Second In-ternational Conference on Multi-Agent Sys-tems, pages 236-243, Menlo Park,CA.
TheAAAI Press.Mike Oliphant.
1996.
The dilemma of saus-surean communication.
BioSystems, 37(1-2):31-38.Guy L. Steele.
1990.
Common LISP: The Lan-guage.
Digital Press, Bedford, MA., secondedition.Luc Steels.
1996.
Self-organizing vocabularies.In C. Langton, editor, Proceedings of Alife V,Nara, Japan.Luc Steels.
1997.
The synthetic modeling oflanguage origins.
Evolution of Communica-tion Journal, 1(1):1-34.834
