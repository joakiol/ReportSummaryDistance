Coreference in Knowledge EditingKees  van  Deemter  and R ichard  PowerInformation Technology Research Institute (ITRI)University of Brighton, Lewes RoadBrighton, BN2 4G J, UKKees.van.Deemter,Richard.Power@itri .brighton.ac.ukAbst ractThis paper briefly outlines the WYSIWYM (WhatYou See is What You Meant) approach toknowledge diting and focuses on the role ofcoreferring Noun Phrases in the .feedback textsthat are generated by a WYSIWYM system andwhich play a key role in this approach.
Thepaper pays special attention to the operationsthat a user of a WYSIWYM system can performon feedback texts that contain coreferring NounPhrases and to how they can be supported.1 In t roduct ion1.1 Ed i t ing  knowledge by WYSIWYMWYSIWYM is a method of editing knowledgebases in which the user interacts with a feedbacktext generated by a natural anguage generationsystem (e.g.
Power and Scott 1998).
The ideaof  WYSIWYM editing is to provide an interfaceto a knowledge base that can be used easily byan author who is a domain expert but not nec-essarily an expert in knowledge representation.The feedback text serves two purposes: it showsthe knowledge that has already been specified;and it shows the options for adding new knowl-edge.
These options are marked by anchors.
Byclicking on an anchor, the user obtains a pop-up menu from which a semantic option can beselected.
The acronym WYSIWYM stands for'What You See Is What You Meant': a naturallanguage text ('what you see') presents a knowl-edge base that the author has built by purelysemantic decisions ('what you meant').This method was first implemented inDRAFTElZ-II (Power et al 1998), a re-engineeredversion of DRAFTER (Paris et al 1995) whichis designed for use by the technical authors whoproduce software documentation.
By interact-ing with the feedback text, the author defines aprocedure for performing a task, e.g.
the taskof saving a document in a word processor.When a new knowledge base is created,DRAFTER-II assumes that its root will be somekind of procedure.
A procedure instance is cre-ated, and assigned an identifier (for internal useonly), e.g.
procl .
The definition of the conceptprocedure specifies that every procedure hastwo attributes: a goal, and a method.
The g0almust be some kind of action, and the methodmust be a list of actions.
This information isconveyed to the author through a feedback textAchieve this goal by applying thismethod.with several special features.?
Undefined attributes are shownthrough anchors marked by the use ofboldface or italics.?
A boldface anchor indicates that theattribute is obligatory: its value mustbe specified.
An italicized anchor indi-cates that the attribute is optional.?
All anchors are mouse-sensitive.
Byclicking on an anchor, the author ob-tains a pop-up menu listing the per-missible values of the attribute; by se-lecting one of these options, the authorupdates the knowledge base.Although the anchors may be tackled in anyorder, we will assume that the author proceedsfrom left to right.
Clicking on th is  goal yieldsa pop-up menu that lists all the types of actionsthat the system knows about:chooseclicksaveschedule56(to save space, some options are omitted), fromwhich the author selects 'save'.
Although ap-parently selecting a word, the author is reallyselecting an option for editing the knowledgebase.
The program responds by creating a newinstance, of type save, and adding it to theknowledge base as the value of the goal at-tribute on procl :procedure (proc l ) .goa l (proc l ,  save l ) .save (savel).From the updated knowledge base, the genera-tor produces a new feedback textSave this data  by applying thismethod.including an anchor representing the undefinedactee  attribute on the savel  instance.
Notethat this text has been completely regenerated.It was not produced from the previous textmerely by replacing the anchor this goal bya longer string.
By continuing to make choicesat anchors, the author might expand the knowl-edge base in the following sequence:?
Save the document by applying thismethod.?
Save the document by performing thisact ion (further actions).?
Save the document by clicking on thisobject  (further actions).?
Save the document by clicking on thebutton with this label (further ac-tions).?
Save the document by clicking on theSave button (further actions).At this point the knowledge base is potentiallycomplete (no boldface anchors remain), so anoutput text can be generated and incorporatedinto the software manual.To save the document, click on theSave button.To delete information, the author opens a pop-up menu on any span of the feedback text thatpresents a defined attribute.
For instance, thespan 'the document' presents the actee at-tribute on the instance savel .
Clicking on thisspan in the feedback text, the author obtainsthe menuIf 'Cut' is selected, the instance that is currentlythe value of the actee  attribute is removed toa buffer, leaving the attribute undefined.
Theresulting feedback text introduces an anchor inplace of 'the document'.Save this data  by clicking on the Savebutton (further actions).When the buffer is full, the pop-up menus thatopen on anchors contain a 'Paste' option if theinstance in the buffer is a suitable value for therelevant attribute.1.2 L imitat ions  of DI:tAFTER-IIIn the DRAFTER-II implementation ofWYISYWM, the attribute value that is addedat an anchor is always a new instance of thespecified concept, never an existing instance.Suppose the author has developed the feedbacktextSave the document by entering thename of this ob ject  (.further actions).while aiming at the output textTo save the document, enter its nameand click on the Save button.The current (incomplete) state of the knowledgebase isprocedure (proc 1).goa l (proc l ,  save l ) .save (save 1).ac tee(save l ,  doc l ) .document (doc l ) .method(procl, listl).list (list ~).first(listl, enterl).enter (enterl).actee(enterl, namel).name (name I).The author now expands the anchor this ob-ject, which marks the owner attribute onnamel.
This can be done in two ways: open-ing a pop-up menu on the anchor and choosing'document', or choosing 'Copy' on the earlierphrase 'the document' and pasting the copiedmaterial on to the anchor.
In either case, the57current implementation creates a new instancedoc2 of the concept document instead of usingthe existing instance docl.
In other words, itadds the two assertionsowner(namel, doc2).document (doc2).instead of the single assertionowner(namel, docl).Our aim in this paper is to outline a way ofovercoming this limitation, so that the authorwill be able to specify whether two similar de-scriptions are coreferential.2 WYS lWYM + indicesHow can a feedback text indicate coreference?One possibility is to let feedback texts make useof anaphoric Noun Phrases, such as St' or %hisdocument'.
In this paper we will assume thatalthough output texts, which are meant to beread by a user who is not a domain expert, areexpressions of some natural language, ,feedbacktexts may sometimes include artificial elementsif this is necessary to avoid ambiguity.
We willexplore how the feedback language may be ex-tended by the use of referential indices: If twoNPs have the same index, they must have thesame referent, whereas if they have different in-dices, they may or may not have the same refer-ent.
Brackets can be added to disambiguate thescope of indices in complex nominals.
For ex-ample, the new feedback language can containsuch expressions as(the name of (the document)3h and(the date of (the document)3)2,where the indices imply that the documents inthe two expressions are the same.
In the re-mainder of this section, we will explore in whatdifferent ways an author may want to controlthe indices in the feedback text when she in-serts a new instance into the knowledge base,or when she cuts or copies an instance from theknowledge base.2.1 Which options for edit ing2.1.1 Insert ingImagine the author wants to expand an an-chor of the form 'this object', specifying thatit is a document.
Imagine, furthermore, thattwo other documents have already appearedin the feedback text, namely (document)l and(document)2.
Then the newly introduced ob-ject may corefer with (document)l or with(document)2 or with neither.
In order to avoidasking potentially superfluous questions, thesystem can first present he user with a menucontaining the two optionsI Existing object?New object?
\]Only in case of the first choice will the systemfollow up with the menuI (document)l?(document)2?
IIn case of the second choice, the system willreplace the anchor by some expression of theform (document)/, where i is a new index.2.1.2 Cutt ingIn the current version of DRAFTER, cutting isa conceptually simple operation that does notallow variations: an attribute value is replacedby its anchor.
When coreference enters the pic-ture, this is no longer the case.
In particular,there are two questions that we have to addresswhen an indexed NP is cut (as we will say byan obvious extension of usage of the word 'cut').Firstly, Does the author intend to cut this NPalone, or does she intend to cut all NPs with thesame index as this NP?
Secondly, if the authorintends to cut all expressions with the same in-dex, then Does the author intend the system torespect he indices?
In other words, does she as-sume that the anchors that will result when theNP is de-selected must all be filled by NPs thathave the same index?
Depending on how thesequestions are answered, three different variantsof the Cut operation arise.
Let albe the NP onwhich the author has clicked.
ThenCut-one only affects this occurrence ofO~ i ?Cut-all affects all occurrences of ai,also severing all coreference links be-tween their anchors.Cut-all c affects all occurrences of ai,respecting all coreference links be-tween their anchors.Consider the example in Section 1.2, adaptedto the situation where docl is the value of two58different attributes:p rocedure(proc l ) .goa l (proc l ,  save l ) .save(save l ) .ac tee(save l ,  doc l ) .document(docl ) .method(procl, listl).list(listl).first(list1, enter1).enter(enter1).actee(enterl, namel).name(namel).owner(name1, docl).To spell out the effect of the new operations, itwill be convenient to use variables.
If Cut-one isapplied to the occurrence of docl in the ownerattribute then the only effect on the content ofthe knowledge base is that the owner of namelis undefined, which may be represented by avariable, say x.
If, instead, Cut-all is applied tothe same instance of docl, then both the ownerofnamel and the actee of save1 are undefined,which may be represented by using two differentvariables, say x and y.
If, finally, Cut-all c isapplied then, once more, both are undefined,but their values must be equal.
This may berepresented by using the same variable, say x, inboth cases: actee(savel, x), owner(namel,x).2.1.3 Copy ingLike cutting, copying allows variations now thatthe knowledge base can use one and the sameinstance (e.g., docl) as the value of differ-ent attributes (e.g.
ac tee(save l ,  docl)  andowner(namel, doc l ) ) ) .
There are at least twooptions.
One option amounts to a faithful copyof an instance.
This option can be imple-mented simply by letting a buffer point to theinstance that is copied.
The other option (calledReplicate) duplicates the original feedback text,while renumbering all the indices in such a waythat all the indices in the replica are new, re-specting equalities between indices in the orig-ina/.
The second option arises when an authorwants to reuse a part of the feedback text to re-fer to a new instance.
Both editing operationsare relatively straightforward to understand andimplement.2.2 ExampleImagine an author wanting to create the proce-dure given in Section 2.1.2, starting out with theincomplete representation presented in Section1.2, where it is not yet specified what namel isthe name of.
The content of the knowledge basecan be reflected by the feedback textSave document/by entering the nameof this ob ject  (further actions),where i is an arbitrary number.
Suppose the au-thor opens a pop-up menu on the anchor 'thisobject' and chooses the option 'Existing object'.Note that, owing to some obvious type con-straints, the only instance in the existing knowl-edge base that can take the place of 'this object'is the object docl.
Consequently, there is noneed for the system to ask further questions.A slightly more round-about way in which thesame potentially complete knowledge base cancome about is as follows.
Confronted with thejust-presented menu, she decides to choose 'Newobject'.
The system then adds the statementsovner (namel, doe-j).document (doc-j).to the knowledge base, where doc-j is a con-stant that has not occurred before.
The follow-ing feedback text may be generated:Save document/by entering the nameof documentj (further actions).Seeing her mistake, the author can then clickon either 'document/' or 'document /and  selectCut.
This will cause the NP in question to be re-placed by the anchor 'this object', which bringsthe author back to a situation where she candecide that the two documents hould coreferafter all.3 Some prob lems3.1 L imitat ions of  the  use of  indicesIndices can be used to indicate, for two textspans, whether or not they are assumed, by theauthor, to refer to the same thing.
This impliesa number of problems familiar from the problemof tagging text corpora (e.g.
Hirschman et al1997).
Thus, it is unclear how indices should beused in relation to NPs occurring in intensionalcontexts.
For example, it seems that the brack-eted NPs in the following feedback text should59receive different indices, even though their ex-tension is equal:Make sure that (the date of the pro-gram) equals (the current date).Furthermore, it can be tempting to view an NPas anaphoric, even if it is impossible to nameany one text span as its antecedent.
For ex-ample, this happens when the role of an an-tecedent is played by a combination of severalNPs (e.g., the NP 'a file' and the NP 'a pro-gram' can together form the antecedent of theplural pronoun 'they') or when the antecedentis implied, rather than directly mentioned, bythe text (e.g., in the case of bridging anaphora).In these cases, it is difficult to see how indicescan be used.
Note, however, that the problem-atic phenomena mentioned here may not posea serious problem in the context of the presentwork, since we axe dealing with the construc-tion of feedback texts (as opposed, for example,to the output texts generated by the system)which tend to make a simplified use of language.(cf.
Section 2).3.2 Embedded NPsSuppose that the author has reached the follow-ing feedback textSave (the document)l by entering (thename of (the document)l)2 and enter-ing (the name of (the document)l)2(.further actions).with the intention of changing the second occur-rence of 'document' into 'directory'.
To avoidremoving both occurrences of 'the document'she chooses the Cut-one option rather than Cut-all.Save (the document)l by entering (thename of (the document)l)2 and enter-ing (the name of this object)2 (fur-ther actions).Now she clicks on the anchor this object  andchooses 'directory'.
What effect should this op-eration have on the noun phrase in which theanchor is embedded?
There are two possibil-ities.
Either the index of the embedding NPshould remain the same:(the name of (the directory)3)2or it should change, implying that the twonames are distinct:(the name of (the directory)3)4In this example, it seems clear that a name canbelong only to one object, so that the latterresult should be preferred.
However, in somecases the index on the embedding phrase mightplausibly remain the same after the embeddedphrase has been changed.
For instance, if wecopy 'the menu containing the Save option',then cut 'the Save option' from the second oc-currence of the phrase, replacing it by 'the Printoption', there is no reason why the Save andPrint options should not belong to the samemenu.
Thus to react appropriately to the Cut-one operation, the system may have to applydomain knowledge or seek guidance from theauthor.4 Conc lus ionAn experimental version of the ideas in this pa-per has been implemented in the DRAFTER-IIIsystem.
DRAFTER-III offers the user the pos-sibility of having coreference indicated eitherby indices, or by (colour-based) highlighting, orboth.
In future research, we plan to extend thecoverage of the system (e.g., by allowing differ-ent kinds of anaphoric expressions) and to im-prove the transparency of the interface for theknowledge ditor (i.e., for the author).5 ReferencesHelm 1982.
Heim, I.
The Semantic of Definite and In-definite Noun Phrases.
Ph.D. thesis, Univ.
of Mas-sachusets, Amherst, Mass.Hirschman et al 1997.
Hirschman, L.,Robinson, P.,Burger, J., and Vilain, M., Automating Coreference:The Role of Annotated Training Data.
Proc.
AAAI1997.
:'Paris et al1995.
Paris, C., Vander Linden, K., Fischer,M., Hartley, A., Pemberton, L., Power, R. and Scott, D.'A Support Tool for Writing Multilingual Instructions'Proceedings of IJCAI-95, 1398-1404, Montreal.Power and Scott 1998.
Power, R. and Scott, D. 'Mul-tilingual Authoring using Feedback Texts', Proceedingsof the 17th International Conference on ComputationalLinguistics and 36th Annual Meeting of the Associationfor Computational Linguistics (COLING-ACL 98), Mon-treal, Canada.60
