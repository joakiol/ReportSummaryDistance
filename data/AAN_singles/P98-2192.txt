Restrictions on Tree Adjoining LanguagesGiorgio SattaDip.
di Elettronica e InformaticaUniversit?
di Padova35131 Padova, Italysatta@dei, unipd, itWilliam SchulerComputer  and Information Science Dept.University of PennsylvaniaPhiladelphia, PA 19103schuler@linc, cis.
upenn, eduAbst rac tSeveral methods are known for parsing lan-guages generated by Tree Adjoining Grammars(TAGs) in O(n 6) worst case running time.
Inthis paper we investigate which restrictions onTAGs and TAG derivations are needed in orderto lower this O(n 6) time complexity, without in-troducing large runtime constants, and withoutlosing any of the generative power needed tocapture the syntactic constructions in naturallanguage that can be handled by unrestrictedTAGs.
In particular, we describe an algorithmfor parsing a strict subclass of TAG in O(nS),and attempt o show that this subclass retainsenough generative power to make it useful inthe general case.1 In t roduct ionSeveral methods are known that can parse lan-guages generated by Tree Adjoining Grammars(TAGs) in worst case time O(n6), where n isthe length of the input string (see (Schabesand Joshi, 1991) and references therein).
Al-though asymptotically faster methods can beconstructed, as discussed in (Rajasekaran andYooseph, 1995), these methods are not of prac-tical interest, due to large hidden constants.More generally, in (Satta, 1994) it has been ar-gued that methods for TAG parsing running intime asymptotically faster than O(n 6) are un-likely to have small hidden constants.A careful inspection of the proof providedin (Satta, 1994) reveals that the source of theclaimed computational complexity of TAG pars-ing resides in the fact that auxiliary trees canget adjunctions at (at least) two distinct nodesin their spine (the path connecting the root andthe foot nodes).
The question then arises ofwhether the bound of two is tight.
More gen-erally, in this paper we investigate which re-strictions on TAGs are needed in order to lowerthe O(n 6) time complexity, still retaining thegenerative power that is needed to capture thesyntactic onstructions ofnatural anguage thatunrestricted TAGs can handle.
The contribu-tion of this paper is twofold:?
We define a strict subclass of TAG whereadjunction of so-called wrapping trees atthe spine is restricted to take place at nomore than one distinct node.
We show thatin this case the parsing problem for TAGcan be solved in worst case time O(n5).?
We provide evidence that the proposedsubclass still captures the vast majorityof TAG analyses that have been currentlyproposed for the syntax of English and ofseveral other languages.Several restrictions on the adjunction opera-tion for TAG have been proposed in the liter-ature (Schabes and Waters, 1993; Schabes andWaters, 1995) (Rogers, 1994).
Differently fromhere, in all those works the main goal was oneof characterizing, through the adjunction oper-ation, the set of trees that can be generated bya context-free grammar (CFG).
For the sake ofcritical comparison, we discuss some commonsyntactic onstructions found in current naturallanguage TAG analyses, that can be capturedby our proposal but fall outside of the restric-tions mentioned above.2 Overv iewWe introduce here the subclass of TAG that weinvestigate in this paper, and briefly compare itwith other proposals in the literature.A TAG is a tuple G = (N ,~, I ,A ,S ) ,  whereN, ~ are the finite sets of nonterminal nd ter-minal symbols, respectively, I, A are the finite1176sets of initial and auxiliary trees, respectively,and S E N is the initial symbol.
Trees in 112 Aare also called elementary trees.
The reader isreferred to (Joshi, 1985) for the definitions oftree adjunction, tree substitution, and languagederived by a TAG.The spine of an auxiliary tree is the (unique)path that connects the root and the foot node.An auxiliary tree fl is called a r ight  (left) treeif (i) the leftmost (rightmost, resp.)
leaf in ~ isthe foot node; and (ii) the spine of fl containsonly the root and the foot nodes.
An auxiliarytree which is neither left nor right is called awrapp ing  tree.
1The TAG res t r i c t ion  we propose is statedas followed:..At the spine of each wrapping tree, there isat most one node that can host adjunctionof a wrapping tree.
This node is called awrapp ing  node.At the spine of each left (right) tree, nowrapping tree can be adjoined and no ad-junction constraints on right (left, resp.
)auxiliary trees are found.The above restriction does not in any way con-strain adjunction at nodes that are not in thespine of an auxiliary tree.
Similarly, there isno restriction on the adjunction of left or righttrees at the spines of wrapping trees.Our restriction is fundamentally differentfrom those in (Schabes and Waters, 1993; Sch-abes and Waters, 1995) and (Rogers, 1994),in that we allow wrapping auxiliary trees tonest inside each other an unbounded numberof times, so long as they only adjoin at oneplace in each others' spines.
Rogers, in contrast,restricts the nesting of wrapping auxiliaries toa number of times bounded by the size of thegrammar, and Schabes and Waters forbid wrap-ping auxiliaries altogether, at any node in thegrammar.We now focus on the recognition problem,and informally discuss the computational d-vantages that arise in this task when a TAGobeys the above restriction.
These ideas areformally developed in the next section.
Most of1The above names are also used in (Schabes and Wa-ters, 1995) for slightly different kinds of trees.the tabular methods for TAG recognition rep-resent subtrees of derived trees, rooted at somenode N and having the same span within theinput string, by means of items of the form(N, i ,p,q, j  I.
In this notation i, j are positionsin the input spanned by N, and p, q are posi-tions spanned by the foot node, in case N be-longs to the spine, as we assume in the discus-sion below.i' i p q j j 'Figure 1: O(n 6) wrapping adjunction step.The most time expensive step in TAG recog-nition is the one that deals with adjunction.When we adjoin at N a derived auxiliary treerooted at some node R, we have to combine to-gether two items (R, i', i, j, j'> and (N, i, p, q, j>.This is shown in Figure 1.
This step involvessix different indices that could range over anyposition in the input, and thus has a time costof O(n~).Let us now consider adjunction of wrappingtrees, and leave aside left and right trees forthe moment.
Assume that no adjunction hasbeen performed in the portion of the spinebelow N. Then none of the trees adjoinedbelow N will simultaneously affect the por-tions of the tree yield to the left and to theright of the foot node.
In this case we cansafely split the tree yield and represent item(N,i,p,q, jl by means of two items of a newkind, (Nle~,i,P> and (Wright,q,j>.
The adjunc-tion step can now be performed by means oftwo successive steps.
The first step combines(R, i', i, j, j ' )  and (Ntelt, i, p>, producing a newintermediate item I.
The second step combinesI and (Nright, q, Jl, producing the desired result.In this way the time cost is reduced to O(n5).It is not difficult to see that the above rea-soning also applies in cases where no adjunc-tion has been performed at the portion of thespine above N. This suggests that, when pro-1177(b):Figure 2: (.9(n 5) wrapping adjunction step.cessing a TAG that obeys the restriction intro-duced above, we can always 'split' each wrap-ping tree into four parts at the wrapping nodeN, since N is the only site in the spine thatcan host adjunction (see Figure 2(a)).
Adjunc-tion of a wrapping tree /3 at N can then besimulated by four steps, executed one after theother.
Each step composes the item resultingfrom the application of the previous tep withan item representing one of the four parts of thewrapping tree (see Figure 2(b)).We now consider adjunction involving leftand right trees, and show that a similar split-ting along the spine can be performed.
Assumethat 7 is a derived auxiliary tree, obtained byadjoining several eft and right trees one at thespine of the other.
Let x and y be the part ofthe yield of 7 to the left and right, respectively,of the foot node.
From the definition of leftand right trees, we have that the nodes in thespine of V have all the same nonterminal label.Also, from condition 2 in the above restrictionwe have that the left trees adjoined in 7 do notconstrain in any way the right trees adjoined in7.
Then the following derivation can always beperformed.
We adjoin all the left trees, each oneat the spine of the other, in such a way that theresulting tree 7te/t has yield x.
Similarly, we ad-joining all the right trees, one at the spine of theother, in such a way that the yield of the result-ing tree "Yright is y.
Finally, we adjoin "\[right atthe root of 71e/t, obtaining a derived tree havingthe same yield as 7.From the above observations it directly fol-lows that we can always recognize the yieldof 7 by independently recognizing 71~/t and7right.
Most important, 71e/t and 7ri~ht can berepresented by means of items (Rte/t,i,p) and(Rright,q,j).
As before, the adjunction of treeV at some subtree represented by an item I canbe recognized by means of two successive steps,one combining I with (Rle~, i,p) at its left, re-sulting in an intermediate item I t, and the sec-ond combining I ~ with (Rright, q, j) at its right,obtaining the desired result.3 Recogn i t ionThis section presents the main result of the pa-per.
We provide an algorithm for the recogni-tion of languages generated by the subclass ofTAGs introduced in the previous section, andshow that the worst case running time is (.9(n5),where n is the length of the input string.
Tosimplify the presentation, we assume the fol-lowing conditions throughout this section: first,that elementary trees are binary (no more thantwo children at each node) and no leaf node islabeled by e; and second, that there is alwaysa wrapping node in each wrapping tree, and itdiffers from the foot and the root node.
This iswithout any loss of generality.3.1 Grammar transformationLet G = (N, E, I, A) be a TAG obeying the re-strictions of Section 2.
We first transform A intoa new set of auxiliary trees A ~ that will be pro-cessed by our method.
The root and foot nodesof a tree/3 are denoted RE and FE, respectively.The wrapping node (as defined in Section 2) of~3 is denoted W E.Each left (right) tree ~ in A is inserted inA l and is called j3L (j3R).
Let 13 be a wrappingtree in A.
We split ~ into four auxiliary trees, asinformally described in Section 2.
Let ~0 be thesubtree of fl rooted at W~.
We call j3v the treeobtained from/~ by removing every descendantof W~ (and the corresponding arcs).
We removeevery node to the right (left) of the spine of ~3Dand call ~LD (~RD) the resulting tree.
Similarly,we remove every node to the right (left) of thespine of ~ j  and call flnv (~R~\]) the resultingtree.
We set F~L D and FER D equal to FE, andset FZL v and FER v equal to W E. Trees ~LU,BRv, ~LD, and ~RD are  inserted in A ~ for everywrapping tree/3 in A.1178Each tree in A' inherits at its nodes the ad-junction constraints specified in G. In addition,we impose the following constraints:?
only trees j3L can be adjoined at the spineof trees ~LD, I~LU;?
only trees fir can be adjoined at the spineof trees ~RD, ~RU;?
no adjunction can be performed at nodesF~Lu,FZRu.3.2 The a lgor i thmThe algorithm below is a tabular method thatworks bottom up on derivation trees.
Follow-ing (Shieber et al, 1995), we specify the algo-rithm using inference rules.
(The specificationhas been optimized for presentation simplicity,not for computational efficiency.
)Symbols N, P, Q denote nodes of trees in A'(including foot and root), c~ denotes initial treesand j3 denotes auxiliary trees.
Symbol abel(N)is the label of N and children(N) is a stringdenoting all children of N from left to right(children(N) is undefined if N is a leaf).
Wewrite c~ E Sbst(N) if c~ can be substituted atN.
We write f~ E Adj(N) if ~ can be adjoinedat N, and nil E Adj(N) if adjunction at N isoptional.We use two kind of items:?
Item <NX,i,j), X E {B,M,T},  denotes asubtree rooted at N and spanning the por-tion of the input from i to j.
Note that twoinput positions are sufficient, since trees inA ~ always have their foot node at the posi-tion of the leftmost or rightmost leaf.
Wehave X -- B if N has not yet been pro-cessed for adjunction, X = M if N hasbeen processed only for adjunction of treesf~L, and X = T if N has already been pro-cessed for adjunction.?
Item (~,i,p,q,j) denotes a wrapping tree(in A) with RZ spanning the portion ofthe input from i to j and with F~ spanningthe portion of the input from p to q. Inplace of ~ we might use symbols \[f~,LD\],\[~, RD\] and \[f~, RU\] to denote the tempo-rary results of recognizing the adjunctionof some wrapping tree at W~.A lgor i thm.
Let G be a TAG with the re-strictions of Section 2, and let A' be the asso-ciated set of auxiliary trees defined as in sec-tion 3.1.
Let aza2...an, n > 1, be an inputstring.
The algorithm accepts the input iff someitem (R T, 0, n) can be inferred for some c~ E I.Step 1 This step recognizes subtrees with rootN from subtrees with roots in children(N).
(g'l ,i - 1, i) ' label(N) = ai;(F~,i,i) '  e A', 0<i<n;(RT,i,jl(N~.,i,j) , ~ E Sbst(g);(pT,i, k) {QT, k,j)(N~,i,j) , children(N) = PQ;(pT, i, j) children(N) = P. (N ~, i, j) 'Step 2 This step recognizes the adjunction ofwrapping trees at wrapping nodes.
We rec-ognize the tree hosting adjunction by compos-ing its four 'chunks', represented by auxiliarytrees ~LD, ~RD, ~RU and ~LU in X, around thewrapped tree.
{R~,k ,p )  (~,i,k,q,j)(\[~,iD\],i,p,q,j) ,~' E Adj(Wz),p < q;<R~sD,q,k ) (\[~,LD\],i,p,k,j)<\[~,Rn\],i,p,q,j) ' p < q;R T (O~r~,k,j) <\[~,RD\],i,p,q,k)(\[~,RU\],i,p,q,j)(R~L,,i,k) (\[~,RU\],k,p,q,j).
(~,i,p,q,j)(R~,, i ,p) (R~, ,q, j )  nil E Adj(W~),p < q.
(\[~,RD\],i,p,q,j} 'Step 3 This step recognizes all remaining casesof adjunction.
(R~a,i,k) <NB,k,j) ,~EAdj(N),XE{M,T};(N~,i, j)(N x, i, k) (R~,, k, j)(NT,i,j) ,~EAdj(N),XE{B,M};(NB'i'J) nil E Adj(N);(N~ , i , j )  ,(NB,p,q) (~,i,p,q,j)(N.~,i,j) , ~ E Adj(N).Due to restrictions on space, we merely claimthe correctness of the above algorithm.
We nowestablish its worst case time complexity with re-spect to the input string length n. We need toconsider the maximum number d of input posi-tions appearing in the antecedent of an inferencerule.
In fact, in the worst case we will have toexecute a number of different evaluations ofeach1179inference rule which is proportional to n d ,  andeach evaluation can be carried out in an amountof time independent of n. It is easy to establishthat Step 1 can be executed in time O(n 3) andthat Step 3 can be executed in time O(n4).
Ad-junction at wrapping nodes performed at Step 2is the most expensive operation, requiring anamount of time O(n5).
This is also the timecomplexity of our algorithm.4 L ingu is t i c  Re levanceIn this section we will attempt o show that therestricted formalism presented in Section 2 re-tains enough generative power to make it usefulin the general case.4.1 Athemat ic  and  Complement  TreesWe begin by introducing the distinction be-tween athematic auxiliary trees and comple-ment auxiliary trees (Kroch, 1989), which aremeant to exhaustively characterize the auxil-iary trees used in any natural language TAGgrammar.
2 An a themat ic  auxiliary tree doesnot subcategorize for or assign a thematic roleto its foot node, so the head of the foot node be-comes the head of the phrase at the root.
Thestructure of an athematic auxiliary tree maythus be described as:X n _+ Xn .
.
.
(ymax) .
.
.
,  (1)where X n is any projection of category X, y,naxis the maximal projection of Y, and the order ofthe constituents i variable.
3 A complementauxiliary tree, on the other hand, introduces alexical head that subcategorizes for the tree'sfoot node and assigns it a thematic role.
Thestructure of a complement auxiliary tree may be?
described as:Xrnax  _+ .
.
.
yO .
.
.
X rna~ .
.
.
, (2)where X rna~ is the maximal projection Of somecategory X, and y0 is the lexical projection2The same linguistic distinction is used in the con-ception of 'modifier' and 'predicative' trees (Schabes andShieber, 1994), but Schabes and Shieber give the treesspecial properties in the calculation of derivation struc-tures, which we do not.3The CFG-like notation is taken directlyfrom (Kroch, 1989), where it is used to specify labelsat the root and frontier nodes of a tree without placingconstraints on the internal structure.of some category Y, whose maximal projectiondominates X max .From this we make the following observations:1.
Because it does not assign a theta role toits foot node, an athematic auxiliary treemay adjoin at any projection of a category,which we take to designate any adjunctionsite in a host elementary tree.2.
Because it does assign a theta role to itsfoot node, a complement auxiliary tree mayonly adjoin at a certain 'complement' ad-junction site in a host elementary tree,which must  at least be a max imal  projec-tion of a lexical category.3.
The  foot node of an athematic auxiliarytree is dominated only by the root, withno intervening nodes, so it falls outside ofthe max imal  projection of the head.4.
The  foot node of a complement  auxiliarytree is dominated by the max imal  projec-tion of the head, which may also dominateother arguments on either side of the foot.To  this we  now add the assumption that eachauxiliary tree can have only one complement  ad-junction site projecting from y0, where y0  isthe lexical category that projects yrnax.
Thisis justified in order to prevent projections of y0from receiving more  than one theta role f romcomplement  adjuncts, which would violate theunderlying theta criterion in Government  andBinding Theory  (Chomsky,  1981).We also as-sume that an auxiliary tree can not have com-plement adjunction sites on its spine project-ing from lexical heads other than y0  in or-der to preserve the minimality of elementarytrees (Kroch, 1989; Frank, 1992).
Thus  therecan be no more  than one complement  adjunc-tion site on the spine of any complement  auxil-iary tree, and no complement  adjunction site onthe spine of any athematic auxiliary tree, sincethe foot node of an athematic tree lies outsideof the max imal  projection of the head.
44It is important to note that, in order to satisfy thetheta criterion and minimality, we need only constrainthe number of complement adjunctions - not the numberof complement adjunction sites - on the spine of an aux-iliary tree.
Although this would remain within the powerof our formalism, we prefer to use constraints expressedin terms of adjunction sites, as we did in Section 2, be-1180Based on observations 3 and 4, we can fur-ther specify that only complement trees maywrap, because the foot node of an athematictree lies outside of the maximal projection of thehead, below which all of its subcategories mustattach.
5 In this manner, we can insure that onlyone wrapping tree (the complement auxiliary)can adjoin into the spine of a wrapping (com-plement) auxiliary, and only athematic auxil-iaries (which must be left/right trees) can ad-join elsewhere, fulfilling our TAG restriction inSection 2.4.2 Possible Extens ionsWe may want to weaken our definition to in-clude wrapping athematic auxiliaries, in orderto account for modifiers with raised heads orcomplements a  in Figure 3: "They so reveredhim that they built a statue in his honor."
Thiscan be done within the above algorithm as longas the athematic trees do not wrap produc-tively (that is as long as they cannot be ad-joined one at the spine of the other) by splittingthe athematic auxiliary tree down the spine andtreating the two fragments as tree-local multi-components, which can be simulated with non-recursive features (Hockey and Srinivas, 1993).VP "" .
.
.
.
.
.
.
"-.
S WB'Adv VP* S' NI~ VPso C S~ v NI~I Ithat reveredFigure 3: Wrapping athematic tree.Since the added features are non-recursive, thisextension would not alter the (9(n 5) result re-ported in Section 3.4.3 Compar i son  of CoverageIn contrast o the formalisms of Schabes andWaters (Schabes and Waters, 1993; Schabes andWaters, 1995), our restriction allows wrappingcomplement auxiliaries as in Figure 4 (Schabesand Waters, 1995).
Although it is difficult tofind examples in English which are excluded bycause it provides a restriction on elementary trees, ratherthan on derivations.5Except in the case of raising, discussed below.Rogers' regular form restriction (Rogers, 1994),we can cite verb-raised complement auxiliarytrees in Dutch as in Figure 5 (Kroch and San-torini, 1991).
Trees with this structure mayadjoin into each others' internal spine nodesan unbounded number of times, in violation ofRogers' definition of regular form adjunction,but within our criteria of wrapping adjunctionat only one node on the spine.tcr~ vPV S* PPdiscern P NI~IfromFigure 4: Wrapping complement tree.13: SNI~ VP latenS* VIEFigure 5: Verb-raising tree in Dutch.5 Conc lud ing  remarksOur proposal is intended to contribute to theassessment of the computational complexity ofsyntactic processing.
We have introduced astrict subclass of TAGs having the generativepower that is needed to account for the syntac-tic constructions of natural anguage that unre-stricted TAGs can handle.
We have specified amethod that recognizes the generated languagesin worst case time O(nS), where n is the lengthof the input string.
In order to account for thedependency on the input grammar G, let us de-fine IGI = EN( I  + \[Adj(N)1), where N rangesover the set of all nodes of the elementary trees.1181It is not difficult to see that the running time ofour method is proportional to I GI.Our method works as a recognizer.
As formany other tabular methods for TAG recogni-tion, we can devise simple procedures in orderto obtain a derived tree associated with an ac-cepted string.
To this end, we must be able to'interleave' adjunctions of left and right trees,that are always kept separate by our recognizer.The average case time complexity of ourmethod should surpass its worst case time per-formance, as is the case for many other tabularalgorithms for TAG recognition.
In a more ap-plicative perspective, then, the question arisesof whether there is any gain in using an algo-r ithm that is unable to recognize more than onewrapping adjunction at each spine, as opposedto using an unrestricted TAG algorithm.
Aswe have tried to argue in Section 4, it seemsthat standard syntactic onstructions do not ex-ploit multiple wrapping adjunctions at a singlespine.
Nevertheless, the local ambiguity of nat-ural language, as well as cases of ill-formed in-put, could always produce cases in which suchexpensive analyses are attempted by an unre-stricted algorithm.
In this perspective, then,we conjecture that having the single-wrapping-adjunction restriction embedded into the rec-ognizer would improve processing efficiency inthe average case.
Of course, more experimentalwork would be needed in order to evaluate sucha conjecture, which we leave for future work.AcknowledgmentsPart of this research was done while the firstauthor was visiting the Institute for Researchin Cognitive Science, University of Pennsylva-nia.
The first author was supported by NSFgrant SBR8920230.
The second author was sup-ported by U.S. Army Research Office ContractNo.
DAAH04-94G-0426.
The authors wouldlike to thank Christy Doran, Aravind Joshi,Anthony Kroch, Mark-Jan Nederhof, MartaPalmer, James Rogers and Anoop Sarkar fortheir help in this research.Re ferencesNoam Chomsky.
1981.
Lectures on government andbinding.
Foris, Dordercht.Robert Frank.
1992.
Syntactic locality and tree ad-joining grammar: grammatical acquisition andprocessing perspectives.
Ph.D. thesis, ComputerScience Department, University of Pennsylvania.Beth Ann Hockey and Srinivas Bangalore.
1993.Feature-based TAG in place of multi-componentadjunction: computational implications.
In Pro-ceedings of the Natural Language Processing Pa-cific Rim Symposium (NLPRS), Fukuoka, Japan.Aravind K. Joshi.
1985.
How much context sensitiv-ity is necessary for characterizing structural de-scriptions: Tree adjoining rammars.
In L. Kart-tunen D. Dowty and A. Zwicky, editors, Naturallanguage parsing: Psychological, computationaland theoretical perspectives, pages 206-250.
Cam-bridge University Press, Cambridge, U.K.Anthony S. Kroch and Beatrice Santorini.
1991.The derived constituent structure of west ger-manic verb-raising construction.
In Robert Frei-din, editor, Principles and Parameters in Com-parative Grammar, pages 269-338.
MIT Press.Anthony S. Kroch.
1989.
Asymmetries in long dis-tance extraction i  a TAG grammar.
In M. Baltinand A. Kroch, editors, Alternative Conceptionsof Phrase Structure, pages 66-98.
University ofChicago Press.Sanguthevar Rajasekaran and Shibu Yooseph.
1995.TAL recognition in O(M(n2)) time.
In Proceed-ings of the 33rd Annual Meeting of the Associa-tion \[or Computational Linguistics (ACL '95).James Rogers.
1994.
Capturing CFLs with treeadjoining grammars.
In Proceedings of the 32ndAnnual Meeting of the Association for Computa-tional Linguistics (ACL '94).Giorgio Satta.
1994.
Tree adjoining rammar pars-ing and boolean matrix multiplication.
Computa-tional Linguistics, 20(2):173-192.Yves Schabes and Aravind K. Joshi.
1991.
Pars-ing with lexicalized tree adjoining grammar.
InM.
Tomita, editor, Current Issues in ParsingTechnologies.
Kluwer Academic Publishers.Yves Schabes and Stuart M. Shieber.
1994.
An al-ternative conception of tree-adjoining derivation.Computational Linguistics, 20(1):91-124.Yves Schabes and Richard C. Waters.
1993.
Lexi-calized context-free grammars.
In Proceedings ofthe 31st Annual Meeting of the Association forComputational Linguistics (A CL '93).Yves Schabes and Richard C. Waters.
1995.
Treeinsertion grammar: A cubic-time parsable formal-ism that lexicalizes context-free grammar withoutchanging the trees produced.
Computational Lin-guistics, 21(4):479-515.Stuart M. Shieber, Yves Schabes, and Fer-nando C.N.
Pereira.
1995.
Principles and imple-mentation of deductive parsing.
Journal of LogicProgramming, 24:3-36.1182
