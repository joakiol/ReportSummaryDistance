HORN EXTENDED FEATURE STRUCTURES:FAST UNIF ICAT ION WITH NEGATION AND L IM ITED D IS JUNCTION tStephen J. HegnerDepar tment  of Computer  Science and Electr ical  Engineer ingVotey Bui ldingUniversity of VermontBur l ington,  VT  05405 USAtelephone: (802)656-3330internet:  hegner@uvm.eduuucp: .
.uunet!uvm-gen!hegnerABSTRACTThe notion of a Horn extended feature structure(HoXF) is introduced, which is a feature structureconstrained so that its only allowable extensions arethose satisfying some set of llorn clauses in feature-term logic, l loXF's greatly generalize ordinary fea-ture structures in admitting explicit representation fnegative and implicational constraints.
In contradis-tinction to the general case in which arbitrary logicalconstraints are allowed (for which the best known al-gorithms are exponential), there is a highly tractablealgorithm for the unification of HoXF's.1.
PRELIMINARY CONCEPTS1.1 Un i f i ca t ion -based  grammar  fo rmal i smsUnification-based grammar formalisms constitute acornerstone of many of the most important approachesto natural-language understanding (Shieber, 1986),(Colban, 1988), (Fenstad etal., 1989).
The basic ideais that the parser generates a number of partial repre-sentations of the total parse, which are subsequentlychecked for consistency and combined by a second pro-cess known as a unifier.
A common form of represen-tation for the partial representations is that of/caturestructures, which are record-like data structures whichare allowed to grow in three distinct ways: by addingmissing values, by adding attributes, and by coalescingexisting attr ibutes (forcing them to be the same).
Thelast operation may lead to cyclic structures, which wedo not exclude.
If the feature structure Sz is an ex-tension of $1 (i.e., $1 grows into $2 by application ofsome sequence of the above rules), we write $1 E $2and say that St subsumes $2.
Intuitively, if Sl E: $2,S~ contains more information than does Sl.
It is easyto show that E: is a partial order on the class of allfeature structures.Each feature structure represents partial informa-tion generated uring the parse.
To obtain the totalpicture, these partial components must be combinedtThe  research repor ted  herein was per fo rmed whi le theauthor  was v is i t ing the COSMOS Computat iona l  L inguist icsGroup of the Mathemat ics  Depar tment  at  the Univers i ty ofOslo.
l ie wishes to thank  Jens  Erik Fenstad  and the membersof  that  g roup  for prov id ing  a s t imu lat ing  research env i ronment .Par t i cu la r  thanks  are due  Tore Langho lm for many invaluabled iscuss ions regard ing  the i , , terplay of  logic, feature  s t ructures ,and  uni f icat ion.into one consistent piece of knowledge.
The formalprocess of unification is precisely this operation of com-bination.
The most general unifier (mgu) $1 LI $2 offeature structures Sj and Sa is the least feature struc-ture (under E) which is larger than both Sl and $2.Such an mgu exists if and only if $1 and $2 are con-sistent; that is, if and only if they subsume a commonfeature structure.1.2 Un i f i ca t ion  a lgor i thms and  th is  paperWhile the idea of a most general unifier is a pleasingtheoretical notion, its real utility rest with the factthat there are efficient algorithms for its computation.The fastest known algorithm, identified by Ait-Kaci(1984), runs in time which is, for all practical pur-poses, linear in the size of the input (i.e., the combinedsizes of the structures to be unified).
In proposing anyextension to the basic framework, a primary considera-tion must be the complexity of the ensuing unificationalgorithm.
The principal contribution of the researchsummarized here is to provide an extension of ordinaryfeature structures, admitting negation and limited dis-junction, while at the same time continuing to admita provably efficient unification algorithm.Due to space limitations, we must omit substan-tial background material from this paper.
Specifically,we assume that the reader is familiar with the no-tation and definitions urrounding feature structures(Shieber, 1986; Fenstad et al, 1989), as well as thetraditional unification algorithm (Colban, 1990).
Wealso have been forced to omit much detail from thedescription and verification of our algorithm.
A fullreport on this work will be available in the near fu-ture.2.
UNIF ICAT ION IN  THE PRESENCEOF  CONSTRAINTS2.1 Const ra in ts  on  feature  s t ructures  Not ev-ery feature structure is a possibility as the ultimateoutput of the parsing mechanism.
Typically, there areconstraints which must be observed.
One way of en-suring this sort of consistency is to build the checksright into the grammar, so that the feature structuresgenerated are always legitimate substructures of tilefinal output.
The CLG formalism (Dumas and Vat-lie, 1989) is an example of such a philosophy.
|n manyways, this is an attractive option~ because it provides a- 33  -unified context for expressing all aspects of the gram-mar.
liowever, this approach has the disadvantagethat it limits the use of independent parsing subalgo-rithms whose results are subsequently unified, sincethe consistency checks nmst be performed before thefeature structures are presented to the unifier.
There-fore, to maintain such independence, it would be adistinct advantage if some of the constraint checkingcould be relegated to the unification process.To establish a formal framework in which this ispossible, we must start by extending our notion of afeature structure.
Following the ideas of Moshier andRounds (1987) and Langholm (1989), we define an ex-tended fcature structure to be a pair (N, K:) in which/C is a set of feature structures and N is the least ele-ment of/C under the ordering _.
(Titus, by definition,K: has a least element, and K: determines N.) Think ofN a.s the "current" feature structure, and/C as the setof all structures into which N is allowed to grow.
Wedefine (N~,K:t) C:~ (N~,/C~) to mean precisely thatK~ C_ /C~.
In other words, the set of all structureswhich N~ can grow into is a subset of those which N~can grow into.
(It follows necessarily that N~ ~_ N2in this case.)
Note that if we identify the ordinaryfeature structure N with the pair (N, IM I N ~ M}),we precisely recapture ordinary subsumption.
Finally,the notion of unification associated with _~ is givenby(Mr,/Ct) LI= (M~,/C:~) =(M, /~ 17/C2) if/C~ n/c2has a least element M;undefined oOmrwise.2.2 Logica l  feature  s t ructures  w i th  con-s t ra in ts  To operate on pairs of the form (N~/C) al-gorithmically, we must have in place an appropriaterepresentation for the set g:.
There are many possiblechoices; ours is to let it be the set of all structuressatisfying a set of sentences iu a particular logic.
Thelogic which we use is a simple modification of the lan-guage of Rounds and Ka.sper (1986) (see also (Kasperand Rounds, 1990)) admitting negation but only bi-nary path equivalences.
Specifically, an atomic featureterm is one of the following.FormltJaT?
(~:  a)(,~ ?
f~)SemanticsThe identically true term.The identically false term.The path (nesting of attributes) cz existsand terminates with label a.The paths cr and /?
have a common endpoint (coalesced end points).In (a : a), the label a may be T, denoting a miss-ing value.
The notation (a ~ /~) is borrowed from(Langholm, 1989), and has the same semantics as{, ,B} of(Rounds and Kasper, 1986).
A (general)fea-tur~ term is b. i l t  up from atomic feature terms usingthe connectives ^, v, and -., with the usual semantics.In particular, the negation we use is the classical no-tion; a structure satisfes (-,~0) if and only if it doesnot satisfy ~.
For any set ?
of feature terms, Mod(&)denotes the set of all feature structures for which eachE r~ is true.
For a formal definition of satisfaction,we refer the reader to the above-cited references.
In-tuitively, any set of terms which defines a consistentrooted, directed graph is satisfiable.
Ilowever, let usspecifically remark that only nodes with no outgoingedges may have labels other than T, that labels otherthan T may occur at at most one end point, that notwo outgoing edges from the same node may have thesame label, and that any term of the form (a : .L) isequivalent to _L, and so inconsistent.Now we define a logical extended feature structure(LoXF) to be an extended feature structure iN, K:)in which K: = Mod(?)
for some consistent finiteset ~ of feature terms.
In particular, Mod(~) musthave a least model.
We also denote this pair byY(~) = (g. ,Mod(~b)) .
Now Y(~b,) E_, ~'(~2) re-duces to Mod(~)  C_ Mod(4,a), and{ ~(~ u ?2)undefinedif Mod(&a U q~)has a least element under E;otherwise.2.3 Remark  on negat ion  A full discussign of thenature of negation in LoXF's is complex, and will bethe focus of a separate paper.
IIowever, because thistopic has received a great deal of attention (Moshierand Rounds, 1987), (Langholm, 1989), (Dawar andVijay-Shanker, 1990), we feel it essential to remarkhere that ~'(?~) does not have the "classical" nega-tion semantics which can be determined by lookingsolely at the least element.
Indeed, the appropriatedefinition is that .~'(~) satisfies -'7' precisely when nomember of Mod(&) satisfies ?
; in other words, thestructure N .
is not allowed to be extended to satisfy~o.2.4 Un i f i ca t ion  a lgor i thms for log ica l  ex-tended feature  s t ructures  In view of the defini-tion immediately above, it is easy to see that that anyunification algorithm for LoXF's must solve the fol-lowing two problems in the course of attempting tounify ~'(~i) and ~'(~2).
(ul)  It must decide whether or not ~ i  U q~2 is consis-tent; i.e., whether or not there is a feature struc-ture satisfying all sentences of both ~i  and cb2.
(u2) In case that 4~I U~2 is satisfiable, it must also de-termine if there is a least model, and if so, identifyit.Now it is well known that (ul)  is an NP-completeproblem, even if we disallow negation and path equiva-lence (Rounds and Kasper, 1986, Thin.
4).
Therefore,barring the eventuality that P = NP, we cannot ex-pect to allow ~I and ~2 to be arbitrary finite sets offeature terms and still have a tractable algorithm forunification.
One solution, which has been taken by anumber of authors, such as Kasper (1989) and Eiseleand D6rre (1988), is to devise clever algorithms whichapply to the general case and appear empirically towork well on "typical" inputs, but still are provably- 34  -exponential in the worst case.
While such work is un-deniably of great value, we here propose a companionstrategy; namely, we restrict attention to pairs {N, ~)such that the very nature of ?
guarantees a tractablealgorithm.3.
HORN FEATURE LOGICIn the field of mathematicM logic in general, andin the computational logic relevant o computer sci-ence in particular, Horn clauses play a very special r61e(Makowsky, 1987).
Indeed, they form the basis for theprogramming language Prolog (Sterling and Shapiro,1986) and the database language Datalog (Ceri et ai.,1989).
This is due to the fact that while they possesssubstantial representational power, tractable inferencealgorithms are well known.
It is perhaps the main the-sis of this work that the utility of llorn clauses carriesover to computational linguistics as well.3.1 Horn  feature  c lauses  A feature literal is ei-ther an atomic feature term (e.g., (~:  a), (~ ~-.
/~),or _L) or its negation.
A feature clause is a finitedisjunction ?
lvt~v.
.
.v l ,n  of feature literals.
A fea-ture clause is florn if at most one of the t i 's  is notnegated.
A Horn extended feature structure ( lloXF)is a LoXF ~'(4,) such that ?
is a finite set of llornfeature clauses.3.2 A taxonomy of  Horn  feature  c lauses Be-fore moving on to a presentation of algorithms ontIoXF's, it is appropriate to provide a brief sketch ofthc utility and limits of restricting our attention: to col-lections of lIorn clauses, hnplication here is classical;in the case of ordinary propositional logic, we usethe notation et^~r~^... ^am =~ p to denote the clause~O'l v-~0r2v... V'~O'rnVp.
Horn feature clauses may thenbe thought of as falling into one of the following fourcategories.
( l I l )  A clause of the form a, consisting of a singlepositive literal, is just a fact.
(lI2) A clause of the form -~e, consisting of a singlenegative literal, is a negated fact.
In terms ofl loXF's,  if -~a E ?, this means that within ~'(&),no extension of N?
in which a is true is permit-ted.
As a concrete xample, a constraint statingthat a subject may not have an attr ibute named"tense" would be of this form.
(H3) A clause of the form ai  ^ *2 .
.
.
am =~ p is called arule or an implication.
Numerous examples of theutility of implication in linguistics are identified in(Wedekind, 1990, Sec.
1.3).
Kasper's conditionaldescriptions (Kasper, 1988) are also a form of im-plication.
More concretely, the requirement thata transitive verb requires a direct object is easilyexpressed in this form.
(114) A clause of the form a l^a2^.
.
.^am =~ 1 iscalled a compound negation.
The formalizationof the constraint hat a verb cannot be both in-transitive and take a direct object is an exampleof the use of such a clause,The type of knowledge which is not recapturable usingllorn feature logic is positive disjunction; i.e., formu-las of tim form ~rlva2, with both a.l and aa featureterms.
Of course, this has nothing in particular todo with feature-term logic, but is well-known limita-tion of Itorn clauses in general.
However, in acceptingthis l imitation, we also obtain many key properties,including tractable inference and the following impor-tant property of genericity.3.3 Tota l ly  gener ic  LoXF 'a  Let now ?
be anyfinite set of feature terms.
We say that ?
is totallygeneric if, for any set q of facts (see (H1) above),if Mod(O 0 #)  is nonempty then it contains a leastelement under E. Intuitively, if we use ?
to definethe LoXF ~(~) ,  total genericity says that howeverwe extend the base feature structure N?
(consistentlywith O), we will continue to have a LoXF.
Remarkably,we have the following.3.4 Theorem A set of feature terms ~p is totallygeneric if and only if it is equivalent o a set of Hornfeature clauses.Proof outline: This result is essentially a translationof (Makowsky, 1987, Thm.
1.9) to the logic Of featurestructures.
In words, it says that if (and only if) wework with l loXF's,  condition (u2) on page 4 becomessuperfluous (except for explicitly identifying the leastmodel.)
t34.
THE EXTENDED UNIF ICAT IONALGORITHMIt has been shown by Dowling and Gallier (1984)that satisfiability for finite sets of propositional IIornformulas can be tested in time linear in the length ofthe formulas.
Their algorithms can easily be modifiedto deliver the least model as well.
Since unificationof HoXF's is essentially testing for satisfiability plusidentifying the least model (see (ul ) -u(2)  on the previ-ous page), a natural approach would be to adapt oneof their algorithms.
Essentially, this is what we do.Like theirs, our algorithm is \]orward chaininff, we startwith the facts and "fire" rules until no more can befired, or until a contradiction appears.
However, theadaptation is not trivial, because feature-term logic ismore expressive than propositional logic.
In particu-lar, feature-term logic contains countably many tau-tologies which have no correlates in ordinary proposi-tional logic.
The main contribution of our algorithmis to implicitly recapture the full semantics of thesetautologies while keeping the time complexity withinreasonable bounds.
Due to space limitations, we can-not present ile full formality of the rather complexdata structures.
Rather, to highlight ile key features,we step through an annotated example.
We focus onlyupon the special problems inherent in the extensionto feature-term logic, and assume familiarity with theforward-chaining algorithm in (Dowling and Gallier,1984) and the graph unification algorithm in (Colban,1990).4.1 An  example  theory  and  extended featuregrap lm The set E contains the following eight l lornfeature clauses.
(~,) (AA : a).
(~, )  (n :  a) .- 35  -(~) (AA : a)^(B : a)=v (CCDDG : t).
(~)  (A : T )^(C:  T) =:, (ABDDG:  T).
(~s) (AA.X B)^(ABDDG : T)=} (ABDDEF : T).
(~) (A13DD : T)^(B : T) =:, (CCD x ABD).
(~,) (CCDD x ABDD) =} (AC : T).
(~s) (ACD : T) =v (ACC : t).Just as we may represent a set of atomic feature termswith a feature graph, so too may we represent, in part,a set of llorn feature clauses with an extended featuregraph.
Shown in Figure I below is the initial extendedfeature graph for the set ~, representing the state ofinference before any deductions are made.ata ?
-~ ?
i ?
i ?
i ?
@ ?
.
D ?
, -?
-,,=.c D D a__?
i ?
.~ I ,  i ,  ?
i tFigure 1: Initial extended feature structure for ~.Every path and every node label which occurs insome literal of E is represented.
The labels of all edges,as well as all non-T node labels, are underscored, e-noting that they are virtual, which means that theyare only possibilities for the minimal model, and notyet actually part of it.
The root node is denoted by?, and nodes with value T are denoted with a .. Notethat paths with common virtual end labels (e.g., AAand B) are not coalesced; virtual nodes and edges arenever unified.
As a result, the predecessors (along anydirected path) of any actual node or edge is itself ac-tual.
As inferences are made, edges and nodes becomeactual (depicted by deleting underscores), and actualnodes with common labels are ultimately coalesced.The final extended feature graph is shown in Figure2 below.
For easier visibility, actual edges are alsohighlighted with heavier lines.A B Da 4 ' ?
~ ?
- -~  @C /? '
~ ?D G : ?
- - - - i , -  tFigure 2: Final extended feature structure for .~..If we delete the remaining virtual nodes and edges,we obtain the graphical representation of the leastmodel of ::.4.2 Comput ing  the min ima l  mode l  of the ex-ample  Now let us consider the process of actuallyobtaining the structure of Figure 2 from E. In thepropositional forward chaining approach, we start bypooling the facts that we know - -  in this ease {~1, ~2}.We then look for rules whose left-hand sides have beensatisfied.
In the example, the left-hand side of~3 is sat-isfied, so we may fire that rule and add (CCDDG : t)to our list of known facts, exactly as in the proposi-tional case.
We may also conclude that (AA x B),because both are actual paths which terminate withthe same label a, and non-T labels are unique.
Therepresentative extended feature graph at this point isshown in Figure 3 below.A B D D O_a -q l ' - , ,~-  Q ~- ?
, ~ ?
D- ?
~- ?
(~) ?
D ql D ?N "=" C D D GI I  ~ o ~ ?
.,,,-.,...--i,- ?
~ 1~Figure 3: Intcrmcdlate structure for ~.There are other things which we may implicitly con-clude, and which we must conclude to fire the otherrules.
For example, we may fire rule ~4 at this point,because (AA : a) =~ (A : T) and (IJ : a) =?~ (/3 : T)are both tautologies in tile logic of feature terms, andso its left-hand side is satisfied.
Thus, we may add(A:BDDG : T) to our list of known facts.
Similarly,since, as noted above, (AA ~ 13) holds, we <may firerule ~5 to conclude (ABDDEF : T).
Likewise, wemay now fire rule ~s and conclude (CCD x ABD).The representative extended graph structure at thispc4nt is shown in Figure 4 below.A B D D G(D  ?
?
~ i lC G?
~ ?
?
~ tFigure 4: Intermediate structure for E.We mr, st eventually invoke a unification at the com-mon end point of CCD and ABD.
Such unificationimplicitly entails the tautology (CCD x ABD) :~(CCDD x A13DD) and permits us to conclude thatrule ~7 should fire and add (AC : T) to the set of factsof the least model.
The result represented by the finalextended feature graph of Figure 2.
Note that rule ~snever fires, and that there are virtual edges and nodesleft at the conclusion of the process.4.3 A taxonomy of  impl ic i t  ru les  for sets ofHorn  feature  c lauses As we remarked in the in-troduction to this section, to correctly adapt forwardchaining to the context of IIoXF's, we must implicitlyiticlude the semantics of countably many tautologies.These fall into three classes.
(il) Whenever an atomic term of the form (or// : a)is determined to be true (ap denotes the concate-,nation of a and fl), and another term of the form- 36  -(c, : T) occurs as au antecedent of a ilorn featureclause, (with either fl not the empty string or elsea :fl T), we must be able to automatically makethe deduction of the tautology (oq~ : a) =~ (~ : T )to conclude that (c~ : T) is now true.
We call thisnode and path subsumption.
In computing the leastmodel of =, the deductions (AA:  a) =~ CA: T) and(B : a) =~ (B : T) are examples of such rules.
(i2) Whenever we deduce two terms of the form (a : a)and (fl : a) to be true, with a ~ T, we must implic-itly realize the semantics of the rule (a : a)^(fl :a) ~ (a x fl), due to tile constraint hat non-T labels are unique.
We call this label matching.In computing the least model of E, tile deduction(AA : a)A(B : a) ::*.
(AA X B) is a specific example.
(i3) Whenever we coalesce two paths, we must per-form local unification on the subgraph rooted at thepoint of coalescence.
More precisely, if we coalescethe paths cY and fl, and the atom (~7 : a) is true, were,st deduce that both (cr7 x \[/7) and (f17 : a) aretrue; i.e., we must implicitly realize the compoundrule (c?
y. fl)^(c*7 : a) =~ (a'r x f17)^(f17 : a).
Thisis just a logical representation f local unification.
Incomputing the least model of E, a specific exampleis the deduction (CCD ~ ABD)^(CCDDG : t)(CCDDG .~ ABDDG)^(ABDDG : t).4.4 Data structures To support hese inferences,several specific data structures are supported.
Theyare sketched below.
(dl) There is tile list of clauses.
Each clause has acounter associated with it, indicating the number ofliterals which remain to be fired before its left-handside is satisfied.
When this count drops to zero, theclause fires and its consequent becomes true.
(d2) There is a list of atoms which occur in the an-tecedents of clauses.
With each literal is associateda set of pointers, one to each clause of which it isan antecedeut li eral.
When an atom becomes true,the appropriate clauses are notified, so they maydecrement their counters.
(d3) Tile working extended fealure structure, as illus-trated in Figures 1-4, is maintained throughout.
(d4) For each node in the working extended featurestructure, a list of atoms is maintained.
If the nodelabel is a, then each such atom in the list is of theform (c~ : a), with c, a path from the root node to thenode under consideration.
When that node becomesactual, that atom is notified that is is now satisfied.
(d5) For each non-T node label a which occurs insome atom, a list of all virtual nodes with that la-bel is maintained.
When one such node becomesactual, the other are checked to see if an inferenceof the form (i2) should be made.
(dr) For each atom of the form (or x fl) occurringas an antecedent in some clause, the nodes at theends of tl,ese paths in the working extended featurestructure are endowed with a common tag.
When-ever nodes are coalesced, a check for such commontags is made, so the appropriate atom may be noti-fied that it is now true.4.5 Independent  processes and  un i f i cat ionThe algorithm also maintains a ready queue of avail-able processes.
These processes are of three types.A process of the form Actual(or : a), when exe-cuted, makes the identified path and label actual inthe extended feature graph.
A process of the formCoalesce(hi,ha) coalesces the end points of the twonodes nl and n2 in the extended feature graph.
A pro-cess of the form Unify(n) performs a local unificationat the subgraph rooted at node n, using an algorithmsuch as identified in (Colban, 1990).
All processes inthe ready queue commute; they may be executed inany order.To unify two distinct sets of terms (perhaps gener-ated by independent parts of a parser), we join theirtwo extended feature graphs at the root, merge thecorresponding data structures, and add the commandUnify(root) to the merged process queue.
In otherwords, we perform a unification to match common in-formation, and then continue with the inference pro-cess.4.6 The  complex i ty  of the un i f i cat ion  algo-r i thm Define the length of a literal to be the numberof attribute name and attribute value occurrences init.
Thus, for example, length((AB ~ CD)) = 4 andlength((ABCD : a)) = 5.
For a set cb of tlorn featureclauses, we further define the following quantities.L = The length of ~I,; i.e., the sum of the lengths ofall literals occurring in 4~.P = The number of distinct terms of the form (orfl) which occur as the right-hand side of a rule in &.
(Facts are not  considered to be rules here.
)m = The number of distinct attributes in the in-put.
(If we collect all of the literMs occurring intile clauses of ?
and discard any negation to yield alarge pool of facts, then m is tile number of edges inthe graph representing the associated feature struc-ture.
If ~ is a set of positive iiterals to begin with,and hence represents an ordinary feature structure,then m represents he size of this feature structure.
)We then have the following theorem.4.7 Theorem The worst.case time complexityof our IloXF unification algorithm is O(L +(P + 1).
m. w(m)), where a~(m) is an inverse Acker-mann/unction (which grows more slowly than thanany primitive recursive function - for all practical pur-poses w(n) <_ 5).
121This may be compared to tile worst-case complex-ity of the usual algorithm for unifying ordinary featurestructures, which is O(m.w(m)).
The increase in com-plexity over this simpler case is due to two factors.
(cl) We must read the entire input; since iiterals maybe repeated, it is possible that L > m; hence tile Lterm.
(c2) Each time that we deduce that two nodes mustbe coalesced, we must perform a unification.
Thiscan occur at most P times - the number of timesthat a rule can assert a distinct coalescing of nodes.-37 -4.8 Further  remarks  on the a lgor i thm Note inparticular that there are no restrictions on where pathequivalences (e.g., (or ~.
~)) may occur in Horn featureclauses.
In particular, unlike (Kasper, 1988), we doallow negated path equivalences, llowever, if we dis-allow path equivalences as consequents of rules, thenthe complexity of our algorithm becomes essentiallythat of the traditional unification algorithm (see (c2)above).
It is primarily deducing path equivalences onthe fly which results in the additional computationalburden.5.
CONCLUSIONS,  FURTHER D I I tEC-T IONS~ AND PROJECT STATUS5.1 Conclusions and further  direct ions Wehave identified lloXF's as an attractive compromisebetween ordinary feature structures (in which there isno way to express constraints on growth) and full logi-cal feature theories (for which the unification problemis NP-complete).
We view lloXF's not as the "best"apl~roach, but rather as a tool to be used to buihlbetter overall unification-based grammar formalisms.The obvious next step is to develop an integratedframework in which IloXF's are employed to handlenegation and the disjunction arising from implication,while other techniques handle more general disjunc-tion and term subsumption (Smolka, 1988).
Such anoptimized approach could lead to much faster overallhandling of negation and disjunction, but further workis clearly needed to bear this out.5.2 Status  of  the pro ject  While the algorithmhas been spelled out in considerable detail, we havejust begun to build an actual implementation of theIIoXF unifier in the programming language Scheme.We expect to complete the implementation by thesummer of 1991.Re ferencesA/t-Kaci, lla.qsan (1984), A lattice-theoretic ap-llroach to coniputation based oil a calculus of partially-ordered type structures, PhD thesis, University ofPennsylvania, Philadelphia.Ceri, Stefano; Gottlob, Georg; and Tanca, Letizia(1989), "What you always wanted to know about Dat-slog (and never dared to ask)," 1EEE Trans.
Knotvl-edge Data Engrg., 1,146-166.Colban, Erik A.
(1988), Simplified unification basedgrammar formalisms, COSMOS Report No.
05, Uni-versity of Osio, Department of Mathematics.Colban, Erik A.
(1990), Unification algorithms, COS-MOS Report No.
16, University of Oslo, Departmentof Mathematics.Damas, Luis and Varile, Giovanni B.
(1989), "CLG:a grammar formalism based on constraint resolution,"in: Martins, Jo5.o P. and Morgado, Ernesto M., eds.,EPIA 89: dth Portugcse Conference on Artificial In-telligence, Lis&m, Portugal, September 1989, Proceed.ings, 175-186, Springer-Verlag.Dawar, A. and Vijay-Shanker, K. (1990), "An in-terpretation of negation in feature structure descrip-tions," Computational Linguistics, 16, 11-21.Dowling, William F. and Gallicr, Jean |I.
(1984),"Linear-time algorithms for testing the satisfiability ofpropositional ttorn clauses," J.
Logic Programming, 3,267-284.Eisele, Andreas and DSrre, Jochen (1988), "Unifica-tion of disjunctive feature descriptions," in: Proceed-ings o\] the ?6th Annual Meeting o\] the ACL.Fenstad, Jess Erik; Langholm, Tore; and Vestre,Espcn (1989), Representations and interpretations,COSMOS Report No.
09, University of Oslo, Depart-ment of Mathematics, To appear in Proceedings of theWorkshop on Computational Linguistics and FormalSemantics, Lugano, August.September 1988.Kasper, Robert T. (1988), "Conditional descriptionsin functional unification grammar," in: Proceedingso/ the ?6th Annual Meeting of the ACL, Buffalo, 233-240.Kasper, Robert T. (1989), "A unification method fordisjunctive feature descriptions," in: Proceedings o.fthe ~Sth Annual Meeting o\] the ACL, 235-242.Kasper, Robert T. and Rounds, William C. (1990),"Tile logic of unification in grammar," Linguistics andPhil., 13, 35-58.Langholm, Tore (1989), How to say no with featurestructures, COSMOS Report No.
13, University ofOslo, Department of Mathematics.Makowsky, Johann A.
(1987), "Why Ilorn formu-las matter in computer science: initial structures andgeneric examples," J. Comput.
System Sci., 34, 266-292.Mushier, M. Drew and Rounds, William C. (1987),"A logic for partially specified data structures," in:Con/erence Record ol the 14th Annual ACM POPLSymposium, 155-167.Rounds, William C. and Kasper, Robert (1986), "Acomplete logical calculus for record structures repre-senting linguistic information," in: Proceedings of theFirst IEEE Symposium on Logic in Computer Science,38-43.Shieber, Stuart M. (1986), An Introduction toUnification.Based Approaches to Grammar, Univer-sity of Chicago Press.Smolka, Gert (1988), A feature logic with sub-sorts, LILOG-Report 33, IBM Deutschland GmbH,Stuttgart.Sterling, Leon and Shapiro, Ehud (1986), The Art o\]Prolog, MIT Press.Wedekind, Jfirgen (1990), A survey of linguisticallymotivated extensions to unification-based formalisms,Deliverable R3,1.A, DYANA.- 38  -
