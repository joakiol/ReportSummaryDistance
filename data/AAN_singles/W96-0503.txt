The MODELEXPLAINERBeno i t  LavoieCoGenTex, Inc.840 Hanshaw RoadIthaca, NY 14850, USAbeno i t?cogentex ,  comOwen RambowCoGenTex, Inc.840 Hanshaw RoadIthaca, NY 14850, USAowen~cogentex, comEhud Re i terDepartment  of Computer  ScienceUniversity of AberdeenAberdeen AB9 2UE, Scotlandere i te r~csd ,  abdn.
ac.
uk1 In t roduct ion :  Ob jec t  Mode lsWith the emergence of object-oriented technol-ogy and user-centered, evolutionary softwareengineering paradigms, the requirements gath-ering phase has become an iterative activity.A requirements analyst builds a formal object-oriented (OO) data model (modeling).
A user(domain expert) performs a validation of theformal model.
Then, the requirements modelundergoes ubsequent evolution (modificationor adjustment) by a (perhaps different) analyst.It is widely believed that graphical represen-tations are easy to learn and use, both for mod-eling and for communication among the engi-neers and domain experts who together developthe OO data model.
This belief is reflected bythe large number of graphical OO data model-ing tools currently in research labs and on themarket.
However, this belief is a fallacy, assome recent empirical studies show.
For exam-ple, Kim (1990) simulated a modeling task withexperienced analysts and a validation task withsophisticated users not familiar with the par-ticular graphical anguage.
Both user groupsshowed semantic error rates between 25% and70% for the separately scored areas of entities,attributes, and relations.
Relations were partic-ularly troublesome to both analysts and users.Marian (1995) compares diagrams with textualrepresentations of nested conditional structures(which can be compared to data modeling inthe complexity of the "paths" through the sys-tem).
He hnas that "'the mmnslc difficultyof the graphics mode was the strongest effectobserved" (p.35).
We therefore conclude thatgraphics, in order to assure maximum commu-nicative fficiency, needs to be complemented byan alternate view of the data.
We claim that thealternate view should be provided by an expla-nation tool that represents the data in the formof a Standard English text.
This paper presentssuch a tool, the MODELEXPLAINER, or MoDExfor short.Automatically generating natural-languagedescriptions of software models and specifica-tions is not a new idea.
The first such systemwas Swartout's GIST Paraphraser (Swartout,1982).
More recent projects include the para-phraser in ARIES (Johnson et al, 1992); theGEMA data-flow diagram describer (Scott andde Souza, 1989); and Gulla's paraphraser for thePPP system (Gulla, 1993).
MODEx certainlybelongs in the tradition of these specificationparaphrasers, but the combination of featuresthat we will describe in the next section is.
toour knowledge, unique.2 Features  of  MoDExOur design is based on initial interviews withpotential users, and on subsequent feedbackfrom actual users during an iterative prototyp-ing approach.?
MoDEx includes examples in its texts: aswell as conventional descriptions.
The need forexamples in documentation has been pointedout in recent work by Paris and Mittal (see forexample (Mittal and Paris, 1'293) and the refer-ences cited therein).
However, none of the spec-ification paraphrasers proposed to date have in-cluded examples.?
MoDEx uses an interactive hypertext inter-face to allow users to browse through the model.Such interfaces have been used in other NLGapplications, (e.g., (Reiter eta l .
,  1995; Ram-bow and Korelsky, 1992)), but ours is based on(now) standard html-based WWW technology.?
MoDEx uses a simple modeling language,which is based on the ODL standard developedby the Object Database Management Group(OMC) (Cattail, 1994).
Some previous systemshave paraphrased complex modeling languagesthat are not widely used outside the researchcommunity (GIST, PPP).?
MoDEx does not have access to knowledgeabout the domain of the data model (beyondthe data model itself).
At least one previoussystem has used such knowledge (GEMA).3 A MoDEx Scenar ioFigure 1: The University O-O DiagramSuppose that a university has hired a consul-tant analyst to build an information systemfor its administration.
The analyst has de-vised a data-model and shows it to a univer-sity administrator for validation.
The modelis shown in Figure 1; it is adapted from (Cat-tell, 1994, p.56).
It uses the "crow's foot" no-tation of Martin and Odell (1992) for cardinal-ity on relations.
The administrator is not fa-miliar with this notation and cannot easily un-derstand it.
He invokes MoDEx to generate atextual description in English of a particular as-pect of the model, namely of the SECTION class(Figure 2).
The text is viewed via a World-Wide-Web browser such as Netscape or Mosaic.The General Observations section paraphrasesthe class definition, and the Ezamples sectiongives a concrete example of an instance of thisFigure 2: Description of SECTIONclass.
Hypertext links are included (shown un-derlined); for example, clicking on Professor willproduce a description of the PROFESSOR class.Several control buttons give access to additionaltexts.The administrator thinks it is strange that aSECTION may belong to zero or more COURSES.He clicks on the word belong and obtains thetext shown in Figure 3 (top).
This text, espe-cially with its boundary-value examples, makesit very clear that the model allows a SECTION tObelong to no COURSES, and also allows a SEC-TION to belong to more than one COURSE.
Inl/)Descr ip t ion  of  the  re la t ion  ' Is sect ion of 'Genera l  Observat ions:A section may belong, to zero or more Courses.
For ex-ample, S1 is a Sectioa and belongs to the Course CS100.$2 is a Section and does not belong to any Courses.$3 is a Section and belongs to three Courses, MathlG0,Physicsl00, and Engl00.Descr ip t ion  of  the  re la t ion  ' Is sect ion of 'Genera l  Observat ions:A section must belong to exactly one Course.
For exam-ple, $1 is a Sect~"~d belongs to the Course CS100.Cardinal i ty:It is illegal for a Section to belong to zero Courses.
Forexample, it would be illegal for the Section $2 not tobelong to any Courses.
In addition, It is illegal for aSection to belong to more than one Course.
For example,it would be illegal for the Section $3 to belong to twoCourses, Math100 and Physics100.Figure 3: Two descriptions of is sect ion  ofhis institution, each section belongs to exactlyone course.
(We have observed such cardinal-ity mistakes in many OO models.)
The ana-lyst fixes this and reruns MoDEx on this re-lation, obtaining the description shown in Fig-ure 3 (bottom).
The text now contains a newsection with negative xamples, which makes itclear that it is no longer possible for a SECTIONto belong either to zero COURSES or to multipleCOURSES.Several other types of text can be generated,such as path descriptions and comparisons andtexts about several classes.
We refer to (Lavoieet al, 1996) for more detailed information.4 How MODEx WorksMODEx is implemented using the now fairlystandard, modular pipeline architecture.
Sev-eral modules are part of COGENT, CoGenTex'sgenerator shell.
MoDEx operates as a 'Webserver' which generates HTML files that can beviewed by any Web browser.
For lack of spacewe refrain from giving details here and refer to(Lavoie et al, 1996) for details.5 Rest r i c t ions  on  the  Ob ject  Mode lMoDEx is designed for use independent of thedomain of the OO data model that is being de-scribed: it lacks domain knowledge.
This meansthat the system is fully portable between mod-eling domains, and is not overly costly to use.However, this also means that the system can-not detect semantic modeling errors.
Instead,MoDEx works by providing the analyst or do-main expert with a different representation ofthe model, namely in English.
Having a secondview in an easily accessible code allows him orher to more easily detect semantic errors.Furthermore, the lack of domain knowledgealso means that MoDEx cannot choose the cor-rect paraphrase for an ambiguous part of amodel.
For example, analysts usually label re-lations with either nouns or verbs, giving riseto paraphrases such as A committee determinesissues (verb) or A committee has an issue as itstopic (noun).
However, suppose the analyst in-troduces a relation called top  between classesGULFINKEL and WORROW.
Since top can'beeither a noun or a verb in English, the ana-lyst could either mean that A gulfinkel tops aworrow or that A gulfinkel has a worrow as itstop.
The two statements are presumably incom-patible, but the correct one can only be chosenon the basis of knowledge about the (fictitious)gulfinkel-worrow domain - which MoDEx lacks.We deal with this problem by requiring theMoDEx user to follow certain conventions withrespect o the labeling of relations and objects.The MODEx expects classes to be labeled withsingular nouns, and relations to be labeled withthird person singular active verbs, passive verbswith by, or nouns.
Verbs and nouns can be fol-lowed by a preposition, and there can be addi-tional material (arguments, adjuncts) betweena verb and its preposition.In fact, while such conventions appear tobe limiting at first, they serve a second pur-pose, namely that of imposing discipline innaming.
In a data model, it is importantthat names be used consistently for nam-ing objects and relations, since otherwise themodel is difficult to understand whether or11not MoDEx is used.
For example, a de-signer, looking at a graphical representationof a data model, .may well misunderstand thegulfinkel-worrow relation above and interpretit in the opposite manner from what the re-quirements analyst (who devised the model) in-tended.
Larger object-oriented software engi-neering projects therefore develop naming con-ventions, and Martin and Odell (1992, p.134)say (somwhat vaguely) that two classes con-nected by a relation "ought to read like a se-tence".
Thus, MoDEx can serve the purpose ofenforcing such naming conventions, ince if theyare not followed, the text will be nonsensical, oreven unreadable.6 Out lookThe MoDEx is implemented in C++ on bothUNIX and PC platforms.
It has been inte-grated with two object-oriented modeling en-vironments, the ADM (Advanced DevelopmentModel) of the KBSA (Knowledge-Based Soft-ware Assistant) (DeBellis et al, 1992), and withPtech, a commercial off-the-shelf object model-ing tool.
MoBEx has been fielded at a softwareengineering lab at Raytheon, Inc., with inter-esting and encouraging initial feedback.Currently, we are pursuing several develop-ment directions.
For example, we are extend-ing the system to allow the user to enter freetext associated with particular objects in themodel (such as classes, attributes).
This freetext can capture information ot deducible fromthe model (such as high-level descriptions ofpurpose), and will be integrated with the au-tomatically generated text.
We are also devel-oping a facility to direct the output of MoDExto commercial off-the-shelf publishing environ-ments for the production of standard (paper-based) documentation.AcknowledgmentsInitial development of MoDEx was fundedby USAF Rome Laboratory under contractsF30602-92-C-0015 and F30602-92-C-0124.
Cur-rent work on MoDEx is supported by theTRP-ROAD cooperative agreement F30602-95-2-0005 with the sponsorship of DARPA andRome Laboratory.
We thank F. Ahmed, K.Benner, B. Bussi~re, M. DeBellis, J.
Silver, andS.
Sparks for their comments and suggestions,and T. Caldwell, R. Kittredge, T. Korelsky, D.McCullough and M. White and two anonymousreviewers for their comments and criticism ofMoDEx and the present paper.Re ferencesCattell, R. G. G., editor (1994).
The Object DatabaseStandard: ODMG-93.
Morgan Kaufman Publishers,San Mateo, CA.DeBellis, M., Miriyala, K., Bhat, S., Sasso, B., and Ram-bow, O.
(1992).
KBSA (Knowledge-Based SoftwareAssistant) Concept Demo final report.
Technical re-port, Rome Laboratory.Gulla, J.
(1993).
Explanation Generation in Informa-tion Systems Engineering.
PhD thesis, Norwegian In-stitute of Technology.Johnson, W. L., Feather, M. S., and Harris, D. R.(1992).
Representation a d presentation of require-ments knowledge.
IEEE Transactions on SoftwareEngineering, pages 853-869,Kim, Y.-G. (1990).
Effects of Conceptual Data ModelingFormalisms on User Validation and Analyst Modelingof Information Requirements.
PhD thesis, Universityof Minnesota.Lavoie, B., Rainbow, O., and Reiter, E. (1996).
TheMODELEXPLAINER.
Technical Report CGT-TR-96-01, CoGenTex, Inc.Marian, P. (1995).
Why looking isn't always seeing:Readership skills and graphical programming.
Com-munications of the ACM, 38(6):33-42.Martin, J. and Odell, J.
(1992).
Object-Oriented Analy-sis and Design.
Prentice Hall, Englewood Cliffs, NJ.Mittal, V. and Paris, C. L. (1993).
Automatic documen-tation generation: The interaction of text and exam-ples.
In Proceedings of IJCAI-g& Chambery, France.Rambow, O. and Korelsky, T. (1992).
Applied text gen-eration.
In Third Conference on Applied Natural Lan-guage Processing, pages 40-47, Trento, Italy.Reiter, E., Mellish, C., and Levine, J.
(1995).
Automaticgeneration of technical documentation.
Applied Arti-ficial Intelligence, 9(3):259-287.Scott, D. and de Souza, C. (1989).
C0unciliatory plan-ning for extended escriptive texts.
Technical Report2822, Philips Research Laboratory, Redhill, UK.Swartout, B.
(1982).
GIST English generator.
In Pro-ceedings of the National Conference on Artificial In-telligence.
AAAI.12
