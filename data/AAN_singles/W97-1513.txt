Hdrug.
A Flexible and Extendible Development Environment forNatural Language Processing.Gert jan  van  NoordGosse  BoumaAbst rac tAlfa- informatica & BCN,University of Groningen{vannoord ,  gosse}@let ,  rug .
n lHdrug is an environment to develop gram-mars, parsers and generators for naturallanguages.
The package is written in Sic-stus Prolog and Tcl/Tk.
The system pro-vides a graphical user interface with a com-mand interpreter, and a number of visuali-sation tools, including visualisation of fea-ture structures, syntax trees, type hierar-chies, lexical hierarchies, feature structuretrees, definite clause definitions, grammarrules, lexical entries, and graphs of statis-tical information of various kinds.Hdrug is designed to be as flexible andextendible as possible.
This is illustratedby the fact that Hdrug has been usedboth for the development ofpractical real-time systems, but also as a tool to ex-periment with new theoretical notions andalternative processing strategies.
Gram-matical formalisms that have been usedrange from context-free grammars to con-catenative feature-based grammars (suchas the grammars written for ALE) and non-concatenative grammars such as Tree Ad-joining Grammars.1 In t roduct ionHdrug is an environment to develop grammars,parsers and generators for natural anguages.
Thesystem provides a number of visualisation tools, in-cluding visualisation of feature structures, syntaxtrees, type hierarchies, lexical hierarchies, featurestructure trees, definite clause definitions, grammarrules, lexical entries, and graphs of statistical infor-mation e.g.
concerning cputime requirements of dif-ferent parsers.
Visualisation can be requested forvarious output formats, including ASCII text for-mat, TK Canvas widget, ~TEX output, and CLiGoutput (Konrad et ah, 1996).Extendibility and flexibility have been major con-cerns in the design of Hdrug.
The Hdrug systemprovides a small core system with a large library ofauxiliary relations which can be included upon de-mand.
Hdrug extends a given NLP system with agraphical user interface and a number of visualisa-tion tools.
Applications using Hdrug typically addnew features on top of the functionality provided byHdrug.
The system is easily extendible because ofthe use of the Tcl/Tk scripting language, and theavailability of a large set of libraries.
Flexibility isobtained by a large number of global flags whichcan be altered easily to change aspects of the sys-tem.
Furthermore, a number of hook predicates canbe defined to adapt the system to the needs of aparticular application.The flexibility is illustrated by the fact that Hdrughas been used both for the development of grammarsand parsers for practical systems (Boves et al, 1995;van Noord et al, 1996), but also as a tool to ex-periment with new theoretical notions and alterna-tive processing strategies, uch as those discussed by(Carpenter, 1992), (van Noord and Bouma, 1994),(van Noord, 1994).
Furthermore, Hdrug has beenused extensively both for batch processing of largetext corpora, and also for demonstrating particularapplications for audiences of non-experts.Hdrug is implemented in SICStus Prolog version3, exploiting the built-in Tcl/Tk library.
The Hdrugsources are available free of charge under the GnuPublic Licence copyright restrictions.
Further infor-mation, including the sources and an on-line manual,is available on the World Wide Web.
1In this paper we illustrate the functionality ofHdrug, and its extendible and flexible nature, by1The URL is:http ://www.
let.
rug.
nl/-vannoord/Hdrug/91means of two examples: ALE and OVIS.2 OverviewThis section gives an overview of the functionalityprovided by Hdrug.2.1 I n ter faceHdrug provides three ways of interacting with theunderlying NLP system:?
Using an extendible command interpreter.?
Using Prolog queries.?
Using an extendible graphical user interface(based on Tcl/Tk).The first two approaches are mutually exclusive:if the command interpreter is listening, then youcannot give ordinary Prolog commands and viceversa.
In contrast, the graphical user interface (withmouse-driven menu's and buttons) can always beused.
This feature is very important and sets Hdrugapart from competing systems.
It implies that wecan use at the same time the full power of the Prologprompt (including tracing) and the graphical userinterface.
Using the command interpreter (with ahistory and alias mechanism) can be useful for ex-perienced users, as it might be somewhat faster thanusing the mouse (but note that many menu optionscan be selected using accelerators).
Furthermore, itis useful for situations in which the graphical userinterface is not available (e.g.
in the absence of anX workstation).
The availability of a command-lineinterface in combination with mouse-driven menu'sand buttons illustrates the flexible nature of the in-terface.An important and interesting property of boththe command interpreter and the graphical user in-terface is extendibility.
It is very easy to add fur-ther commands (and associated actions) to the com-mand interpreter (using straightforward DCG syn-tax).
The graphical user interface can be extendedby writing Tc l /Tk  scripts, possibly in combinationwith some Prolog code.
A number of examples willbe given in the remainder of this paper.Finally note that it is also possible to run Hdrugwithout the graphical user interface present (simplygive the -notk  option at startup).
This is some-times useful if no X workstation is available (e.g.
ifyou connect to the system over a slow serial line),but also for batch processing.
At any point you canstart or stop the graphical user interface by issuinga simple command.Figure 1: Example of visualisation provided byHdrug.
In this example the derivation tree for thesentence 'ik wil vroeger' (I want earlier) is shown ina TK widget.2.2 Visua l i sat ionHdrug supports the visualisation of a large collectionof data-structures into a number of different formats.These formats include 2:* ASCII text* Tk Canvas?~TEX?
CLiGThe Tk Canvas format is the format best inte-grated with the graphical user interface.
The data-structures for which visualisation is provided are:2At the moment not all datastructures are supportedfor all formats.
For example, plots of two dimensionaldata is only available for Tk.92?
Trees.
Various tree definitions can exist in par-allel.
For example, the system supports theprinting of syntax trees, derivation trees, typehierarchy trees, lexical hierarchies etc.
Actionscan be defined which are executed upon clickingon a node of a tree.
New tree definitions can beadded to the system by simple declarations.?
Feature structures.
Clicking on attributes of afeature-structure implode or explode the valueof that attribute.
Such feature structures canbe the feature structures associated with gram-mar rules, lexical entries, macro definitions andparse results.?
Trees with feature structure nodes.
Again, newtree definitions can be declared.
An example isprovided in figure 1.?
Graph (plots of two variable data), e.g.
to dis-play the (average) cputime or memory require-ments of different parsers.?
Tables.?
Prolog clauses.?
Definite clauses with feature structure argu-ments.
This can be used e.g.
to visualise macrodefinitions, lexical entries, and grammar ules(possibly with associated constraints).2.3 Parser  and  Generator  ManagementHdrug provides an interface for the definition ofparsers and generators.
Hdrug manages the resultsof a parse or generation request.
You can inspectthese results later.
Multiple parsers and generatorscan co-exist.
You can compare some of these parserswith respect o speed and memory usage on a singleexample sentence, or on sets of pre-defined exam-ple sentences.
Furthermore, actions can be definedwhich are executed right before parsing (generation)starts, or right after the construction of each parseresult (generation result), or right after parsing iscompleted.
For example, in the ALE system to bediscussed in the next section, a parse-tree is shownautomatically for each parse result.
As another ex-ample, for the OVIS system discussed in section 4,a word graph is read-in in an ASCII buffer and con-verted to an appropriate Prolog format before pars-ing starts.2.4 Usefu l  l ib rar iesMost of the visualisation tools are available throughlibraries as well.
In addition, the Hdrug library con-tains mechanisms to translate Prolog terms into fea-ture structures and vice versa (on the basis of a num-ber of declarations).
Furthermore, a library is pro-vided for the creation of 'Mellish' Prolog terms onthe basis of boolean expressions over finite domains(Mellish, 1988).
The reverse translation is providedtoo.
Such terms can be used as values of featurestructures to implement a limited form of disjunc-tion and negation by unification.A number of smaller utilities is provided in thelibrary as well, including libraries which extendterm_expansion, an add_clause mechanism (basedon chapter 9.1 of (O'Keefe, 1990)), management ofglobal variables (the predicate f lag /3  from (Ross,1989)), support for debugging, etc.2.5 Example  App l i ca t ionsA number of example applications i included in theHdrug distribution.
* ALE (Carpenter, 1992), including the exam-ple HPSG grammar and CG grammar.
Addingother ALE grammars i trivial.?
Definite-clause Grammar (Pereira and Warren,1980) for Dutch to illustrate semantic-head-driven generation (Shieber et al, 1989), and tocompare different parsers for speed (Bouma andvan Noord, 1993).?
Constraint-based Categorial Grammar,  withdelayed evaluation of constraints (Bouma andvan Noord, 1994).?
HPSG with lexical rules as delayed constraints(van Noord and Bouma, 1994).?
Head-driven Parsing for Tree Adjoining Gram-mars, as described in (van Noord, 1994)?
A few toy grammars in the Extraposition Gram-mar formalism (Pereira, 1981).3 ALETo illustrate the functionality of Hdrug we use BobCarpenter and Gerald Penn's ALE system (Carpen-ter, 1992).
To quote the authors:ALE is an integrated phrase structure pars-ing and definite clause logic programmingsystem in which the terms are typed featurestructures.
Typed feature structures com-bine type inheritance and appropriatenessspecifications for features and their values.The feature structures used in ALE gen-eralize the common feature structure sys-tems found in the linguistic programming93Figure 2: Main Hdrug window for ALE.
The nodes of the derivation tree can be clicked to obtain theassociated feature structure in the right-most canvas.
By clicking on attributes of the feature structures itis very easy to implode and explode parts of feature structures to concentrate on those parts of particularimportance for the user.
The VIEW menu provides an interface to the visualisation of all ALE datastructuresincluding (lexical) rules, macro's, definite clauses, lexical entries, and edges of the chart.systems PATR-II and FUG, the grammarformalisms HPSG and LFG, as well asthe logic programming systems Prolog-IIand LOGIN.
Programs in any of these lan-guages can be encoded irectly in ALE.Because ALE is available for SICStus Prolog, andbecause ALE only provides a very limited user in-terface, it provides a particular simple and usefulexample of an application for Hdrug.
The com-bined ALE/Hdrug system consists of the originalALE sources plus about 450 lines of Prolog codeand 250 lines of Tcl code.
These define the inter-face to Hdrug and provide some useful extensionsto the graphical user interface.
Apart from this, anyspecific ALE grammar further specifies a small num-ber of declarations.
For the example HPSG gram-mar which is included in the ALE distribution (arather large grammar: 1650 lines of ALE code) thisrequired only 8 lines of Prolog code.
The followingexamples assume the HPSG example grammar.Figure 2 shows the main Hdrug window after load-ing the ALE system with the HPSG grammar andafter the parse of the example sentence she sees  abook.The Hdrug window consists of two large canvaseswhich are used to display important data-structures.In this case the left-most canvas displays the deriva-tion tree of one of the analyses of the example sen-tence and the right-most canvas displays the featurestructure containing the semantic representation ofthe top-node of one of the parse results.
Immedi-ately under the menu-bar a sequence of buttons isdisplayed which are labelled '1' and '2'.
These repre-sent the results of parsing.
If such a button is presseda pull-down menu is displayed which allows the userto visualise that particular esult of the parser in oneof the available formats.
For example, it is possibleto inspect the parse tree of this object, where eachnode of the tree is a feature structure (the resultwould be to large to be displayed in a readable formhere).
Note that it is also possible to obtain a visu-alisation of the feature structure associated with thetop-most node of the parse tree in a specific format.These formats include a straightforward interface toALE's built-in pretty print routines.The menu-bar provides an interface to many ofthe standard functions of Hdrug.
The FILE menu-94subcat._principle( : -append( )~i, )~), )~))) ?Figure 3: Display of the Ale definite clause definition of the subcat principle.button includes options to load grammar files, Pro-log files and Tc l /Tk  files.
The OPTIONS menuprovides an interface to global Hdrug variables.Such variables include the value of the top-categoryfor parsing (the start symbol); the default parser;whether or not the system should check if an ob-ject is created whether such an object already exists(this feature is used to recognize spurious ambigu-ities), etc.
The PARSE and GENERATE menu but-tons are straightforward means to parse a sentenceor to generate a sentence for a given logical form.Note that ALE does not provide a generator, so thismenu-button is inactive.
If a parse is requested adialog box is displayed in which you can choose asentence from a predefined set of example sentences,or in which you can type in a new sentence.The VIEW menu-button is associated with a pull-down menu which is specific to the Ale application.It provides an interface to visualisation routines forthe following important ALE datastructures:?
Edges of the chart?
Lexical entries?
Macro definitions?
Phrase structure rules?
Lexical rules?
Types?
Empty Categories?
Definite ClausesFigure 4: Visualisation of part of the type signatureof the HPSG grammar distributed with ALE.?
Type SignatureFor example, the subcat_pr inc ip le /3  relation isdisplayed as in Figure 3.95Figure 5: Example of Hdrug support for comparison of different parsers for the same grammar and testsets.
In this example a left-corner (lc_mixtus) parser, a head-corner (hc9_mixtus) parser, an inactive chartparser (inact_p) and a bottom-up active chart parser (bu) were compared on a test-set of 5000 word graphs.Timings are in milliseconds and the input size is the number of transitions in the word graph.
Note that inthis example the parsers only parse the best path through the word graph.
The left-corner and head-cornerparsers perform this task much faster than the other two: average CPU-times are up to 500 milliseconds,whereas the chart-based parsers require up to 8000 milliseconds on average.4 OVISThe NWO Priority Programme Language andSpeech Technology is a research programme aim-ing at the development of spoken language informa-tion systems.
Its immediate goal is to develop ademonstrator f a public transport information sys-tem, which operates over ordinary telephone lines.This demonstrator is called OVIS, Openbaar Ver-voer Informatie Systeem (Public Transport Informa-tion System).
The language of the system is Dutch.Refer to (Bores et al, 1995; van Noord et al, 1996)for further information of this Programme.The natural language understanding componentof OVIS analyses the output of the speech recog-nizer (a word graph) and passes this analysis to thedialogue manager (as an update xpression).
Wordgraphs are weighted acyclic finite-state automatawhich represent in a compact format the hypothe-ses of a speech recognizer.
Each path through theword graph is a possible analysis of the user utter-ance; weights indicate the confidence of the speechrecognizer.The relation between such word graphs and up-date expressions i  defined by means of a DefiniteClause Grammar of Dutch.
This DCG and a num-ber of parsers have been developed with the Hdrugsystem.
The functionality of Hdrug has been usedto compare the different parsers with respect o ef-ficiency on sets of sentences and word graphs.
Forexample, upon loading a specific set of such wordgraphs, the system can be asked to parse each of theword graphs with a specified subset of the availableparsers, and to display information concerning parse96Figure 6: This figure shows the proportion of inputs (word graphs in this case) (percentage of the test-setof 380) can be treated per amount of CPU-time (in milliseconds) for a number of different parsers (a head-corner parser hc, a left-corner parser lc, an inactive chart parser, an active chart parser, a bottom-up Earleyparser bu-earley and an LR parser lr_cyk.
Note that in this example the parsers parse all paths through theword graph.
For this particular test-set he head-corner parser performs best.
As can be seen in the graphit treats 96% of the input word-graphs within 200 milliseconds.times and memory usage for each of those parsers.For example, figure 5 is the result of a test run of5000 word graphs for four different parsers.
Forslower parsers it is useful to implement a time-out omake sure that test sets can be treated within a rea-sonable amount of time.
In such cases mean cputimedoes not make sense; therefore, it is also possible toobtain a graph in which the percentage of inputsthat can be completed within a certain amount ofcputime is displayed.
This is supported in Hdrug aswell; an example is given in figure 6.
Similar sup-port is provided for the analysis of a given test-set ofsentences with respect o input size and with respectto the number of readings assigned.The functionality of Hdrug has been extended invarious ways for the OVIS application.
For exam-ple, a procedure has been implemented which canbe used to generate random sentences, as a meansto find errors in the grammar.
The menu bar isextended with a new menu-button which providesan interface to this new feature.
Incorporating suchnew features in the user interface is very straightfor-ward.Furthermore, similar to the VIEW menu of Ale itis also possible to obtain visualisation of datastruc-tures such as lexical entries and grammar rules.
Thismenu also provides an interface for the visualisationof word graphs by piping these word graphs to ei-ther the VCG (Sander, 1995) or dotty (Koutsofiosand North, 1994) graph drawing tools.Apart from adding new menu buttons it is alsoeasy to add items to existing pull-down menus.
Forexample, in OVIS we are not only interested in thespeed of the parser, but also in the accuracy.
A com-ponent has been implemented which measures wordaccuracy, sentence accuracy and concept accuracy(by comparing the results of analysis with a givenannotation).
This functionality is available througha number of new items on the TEST-SUITE menu.If a test suite has been loaded, then we can use thiscomponent to measure word accuracy and sentenceaccuracy of a number of difference analysis meth-ods.
Information is displayed in a window which isupdated every now and then (the interval can be setby the user).
Such an information window looks asin figure 7.97', ', ', ',,', ',' i~i~i@!i!~i!i~iiiii~i!i!~i!~;ii~i~i~ii~ii~ii~ii~;;ii;i;;ii~!!~!~i~iiiiii!~!!
!i!i~iiiii ;i!!!!
;iiii;!~iM~ ~i~!
!~!~i~;J~;~iiiiii;i!i~iii~iii;i!!~i!~i~i~i!....
"ii ;i ii i i i i!iiii~jiJi~!iii!iiii~iijjli i i i i l i l i i i iF~iiiiii i i~Figure 7: Example of an extension to Hdrug as part of the Ovis development system.
Such extensions canbe defined by means of a TCL script.
The integration of such extensions with the Hdrug user interface istrivial.5 F ina l  remarksThe main characteristics ofHdrug are its extendabil-ity and flexibility.
We believe that.
if such systemsare useful for computational linguists, then these twocriteria are of extreme importance.AcknowledgmentsPart of this research is being carried out within theframework of the Priority Programme Language andSpeech Technology (TST).
The TST-Programme issponsored by NWO (Dutch Organisation for Scien-tific Research).ReferencesGosse Bouma and Gertjan van Noord.
1993.
Head-driven parsing for lexicalist grammars: Experimentalresults.
In Sixth Conference of the European Chap-ter of the Association for Computational Linguistics,Utrecht.Gosse Bouma and Gertjan van Noord.
1994.
Constraint-based categorial grammar.
In 32th Annual Meeting ofthe Association for Computational Linguistics, NewMexico.Lou Boves, Jan Landsbergen, Remko Scha, and Gertjanvan Noord.
1995.
Language and Speech Technology.NWO Den Hang.
Project plan for the NWO PriorityProgramme 'Language and Speech Technology'.Bob Carpenter.
1992.
The attribute logic engine userguide.
Technical report, Laboratory for Computa-tonal Linguistics, Carnegie Mellon University, Pitts-burgh.Karten Konrad, Holger Maier, and Manfred Pinkal.1996.
CLEARS - -  an education and research tool forcomputational semantics.
In Proceedings of the 16thInternational Conference on Computational Linguis-tics (COLING), Copenhagen.Eleftherios Koutsofios and Stephen C. North.
1994.Editing graphs with dotty, dotty User Manual.C.S.
Mellish.
1988.
Implementing systemic lassificationby unification.
Computational Linguistics, 14(1).Richard A. O'Keefe.
1990.
The Craft of Prolog.
TheMIT Press.Fernando C.N.
Pereira and David Warren.
1980.
Deft-nite clause grammars for language analysis - -  a surveyof the formalism and a comparison with augmentedtransition etworks.
Artificial Intelligence, 13.Fernando C.N.
Pereira.
1981.
Extraposition grammars.Computational Linguistics, 7(4).Peter Ross.
1989.
Advanced Prolog.
Addison-Wesley.G.
Sander.
1995.
Graph layout through the VCGtool.
In R. Tamassia nd I.G.
ToUis, editors, GraphDrawing, DIMACS International Workshop GD '9~,Proceedings; Lecture Notes in Computer Science 894,pages 194-205.
Springer Verlag.Stuart M. Shieber, Gertjan van Noord, Robert C. Moore,and Fernando C.N.
Pereira.
1989.
A semantic-head-driven generation algorithm for unification based for-malisms.
\[n 27th Annual Meeting of the Associationfor Computational Linguistics, pages 7-17, Vancou-ver.Gertjan van Noord and Gosse Bouma.
1994.
Adjunctsand the processing of lexical rules.
In Proceedings ofthe 15th International Conference on ComputationalLinguistics (COLING), Kyoto.Gertjan van Noord, Gosse Bouma, Rob Koeling, andMark-Jan Nederhof.
1996.
Conventional natural an-guage processing in the NWO priority programme onlanguage and speech technology.
October 1996 De-liverables.
Technical Report 28, NWO Priority Pro-gramme Language and Speech Technology.Gertjan van Noord.
1994.
Head corner parsing for TAG.Computational Intelligence, 10(4).98
