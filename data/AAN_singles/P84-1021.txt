G~T : A GENERAL TRANSDUCER FOR TEACHING C~TIONAL LINGUISTICSP.
Shann J.L.
CochardDalle Molle Institute for Semantic and Cognitive StudiesUniversity of GenevaSwitzerlandABSTRACTThe GTI~syst~m is a tree-to-tree transducerdeveloped for teaching purposes in machine transla-tion.
The transducer is a specialized productionsystem giving the linguists the tools for express-ing infon~ation in a syntax that is close to theo-retical linguistics.
Major emphasis was placed ondeveloping a system that is user friendly, uniformand legible.
This paper describes the linguisticdata structure, the rule formalism and the controlfacilities that the linguist is provided with.1.
INTRODUCTIONThe GTT-system (Geneva Teaching Transducer)1is a ger~ral tree-to-tree transducer developed asa tool for training linguists in machine transla-tion and computational linguistics.
The transduceris a specialized production system tailored to therequirements of ecmputational linguists providingthem with a means of expressing i n fo rmat ion  in  aformat close to the linguistic theory they arefamiliar with.GIT has been developed for teaching purposesand cannot be considered as a system for largescale development.
A first version has been inple-mented in standard Pascal and is currently runningon a Univac 1100/61 and a VAX-780 under UNIX.
Atpresent it is being used by a team of linguistsfor experimental deve l~t  of an MT system for aspecial purpose language (Buchmann et al, 1984),and to train students in cc~putational linguistics.2.
THE UNIFORMITY AND SIMPLICITY OF THE SYSTEMAs a tool for training ccr~putational linguists,major emphasis was placed on developing a systemthat is user friendly, uniform, and which providesa legible syntax.One of the important requirements in machinetranslation is the separation of linguistic dataand algorithms (Vauquois, 1975).
The linguistshould have the means to express his knowledgedeclaratively without being obliged to mix ~u-This project is sponsored by the Swiss govern-ment.tational algorithms and linguistic data.
Produc-tion systems (Rosner, 1983) seem particularlysuited to meet such requirements (Johnson, 1982);the production set that expresses the object-levelknowledge is clearly separated from the controlpart that drives the application of the produc-tions.
Colmerauer's Q-system is the classic exam-ple of such a uniform production system used formachine translation (Colmerauer, 1970; Chevalier,1978: TAUM-METEO).
The linguistic knowledge is ex-pressed declaratively using the same data structu-re during the whole translation process as well astb~ sane type of production rules for dictionaryentries, morphology, analysis, transfer and gene-ration.
The disadvantage of the Q-system is itsquite unnatural rule-syntax for non-prrx/rammersand its lack of flexible control mechanism for theuser (Vauquois, 1978).In the design of our system the basic uniformsch~re of Q-systems has been followed, but therule syntax, the linguistic data structure and thecontrol facilities have been modernized accordingto recent developments in machine translation(Vauquois, 1978; Bo?tet, 1977; Johnson, 1980;Slocan, 1982).
These three points will be deve-loped in the next section.3.
DESCRIPTION OF THE SYST~43.1 OverviewThe general framework is a production systemwhere linguistic object knowledge is expressed ina rule-based declarative way.
The system takes thedictionaries and the grammars as data, cc~pilesthese data and the interpreter then uses them toprocess the input text.
The decoder transforms theresult into a digestable form for the user.3.2 Data structureThe data structure of the system is based ona chart (Varile, 1983).
One of the main advantagesof using a c~art is that the data structure doesnot change throughout the whole process of trans-lation (Vauquois, 1978).In the Q-system all linguistic data on thearcs is represented by bracketed strings causingan unclean mixture of constituent structure andother linguistic attributes such as grammaticaland semantic labels, etc.
With this representation88type checking is not possible.
Vauquois proposestwo changes :I) Tree structures with uun~lex labels on the nodesin order to allow interaction between differentlinguistic levels such as syntax or semantics, etc.2) A dissociation of the gecmetry from a particularlinguistic level.
With these modifications a singletree structure with complex labels increases thepower of representation in that several levels ofinterpretation can be processed simultaneously(Vauquois, 1978; Boftet, 1977).In our system each arc of the chart carries atree geometry and each node of the tree has aplex labelling consisting of a possible string andthe linguistic attributes.
Through the separationof gecmetry and attributes, the linguist can dealwith two distinct objects: with tree structures andcomplex labels on the nodes of the trees.tring='linguist' \]at=noun, gender=p~Figure i.
Tree with cc~plex labellingThe range or kind of linguistic attributespossible is not predefined by the system.
The lin-guist has to define the types he wants to use ina declaration part.e.g.
: category = verb, noun, np, pp.semantic-features = human, animate.gender = masc, fern, neut.An important aspect of type declaration is the con-trol it offers.
~ne system provides strong syntac-tic and semantic type checking, thereby constrain-ing the application range in order to avoid inap-propriate transductions.
The actual implementationallows the use of sets and subsets in the type de-finition.
Further extensions are planned.C~'ven that in this systmm the tree geometryis not bound to a specific linguistic level, thelinguist has the freedom to decide which infommationwill be represented by the geometry and which willbe treated as attributes on the nodes.
This repre-sentation tool is thus fairly general and allowsthe testing of different theories and strategiesin MT or computational linguistics.3.3 The rule slnltaxThe basic tool to express object-knc~ledge isa set of production rules which are similar in formto context-free phrase structure rules, and well-known to linguists from fozmal grammar.
In order tohave the same rule type for all operations in atranslation system the power of the rules must beof type 0 in the Chomsky classification, includingstring handling facilities.The rules exhibit two important additions tocontext-free phrase structure rules:- arbitrary structures can be matched on the left-hand side or built on the rlght-hand side, giving?
(ge~etry)(conditions)the pfx~er of unrestricted rules or transforma-tional grammar ~- arbitrary conditions on the application of therule can be added, giving the pc~er of a contextsensitive grammar.The power of unrestricted rewriting rules makesthe transducer a versatile inset  for express-ing any rule-governed aspect of language whetherthis be norphology, syntax, semantics.
The factthat the statements are basically phrase structurerules makes this language particularly congenialto linguists and hence well-suited for teachingpurposes.The fozmat of rules is detenuined by the sepa-ration of tree structure and attributes on thenodes.
Each rule has three parts: geometry, condi-tions and assignments, e.g.
:RULE1a + b ~ c(a,b)IF cat(a) = \[det\] and cat(b) = \[nou~(ass i s t )  ~ cat(c) := \[n~;The geometry has the standard left-hand side, pro-duction symbol (~, and right-hand side of a pro-duction rule.
a,b,c are variables describing thenodes of the tree structure.
The '+' indicates thesequence in the chart, e.g.
a+b :a bTree configurations are indicated by bracketing,c(a,b) correspc~ds to :----9/c\a bConditions and asslgrm~nts affect only the objectson the nodes.3.4 Control structureThe linguist has ~ tools for controlling theapplication of the rewriting rules :i) The rules can be grouped into packets (grammars)which are executed in sequence.2) Within a given grammar the rule-application canbe controlled by means of paraneters set by thelinguist.
According to the linguistic operation en-visaged, the parameters can be set to a ccmbinationof serial or parallel and one-pass or iterate.In all, 4 different combinations are possible :parallel and one-passparallel and iterateserial and one-passserial and iterate89In the parallel mode the rules within a gram-mar are considered as being unordered from a logi-cal point of view.
Different rules can be appliedon the same piece of data and produce alternativesin the chart.
The chart is updated at the end ofevery application-cycle.
In the serial mode therules are considered as being ordered in a sequen-ce.
Only one rule can be fired for a particularpiece of data.
But the following rules can matchthe result prDduced by a preceding rule.
The chartis updated after every rule that fired.
The para-meters one-pass and iterate control the nunber ofcycles.
Either the interpreter goes through a cy-cle only once, or iterates the cycles as long asany rule of the grammar can fire.The four ccmbinations allow different usesaccording to the linguistic task to be performed,e.g.
:Parallel and iterate applies the rules non-deter-ministically to cc~pute all possibilities, whichgives the system the power of a Turing Maritime(this is the only control mode for the Q-system).Parallel and one-pass is the typical ccrnbinationfor dictionaries that contain alternatives.
Twodifferent rules can apply to the sane piece ofdata.
The exhale below (fig.
2) uses this combi-nation in the first GRAMMAR 'vocabulary'.Serial and one-pass allows rule ordering.
Apossible application of this combination is a pre-ference mechanism via the explicit rule orderingusing the longest-match-first technique.
The'preference' in the example below (fig.
2)makes use of that by progressive weakening of theselectional restriction of the verb 'drink'.Rule 24 fires without semantic restrictions andrule 25 accepts sentences where the optional argu-ment is missing.The ~ le  should be sufficiently self-expla-natory.
It begins with the declaration of theattributes and contains three grannars.
The resultis shown for two sentences (fig.
3).
To demonstratewhich rule in the preference gran~ar has firedeach rule prDduces a different top label:rule 21 = PHI, rule 22 .
PH2, etc.Figure 2.
Example of a grammar file.DECLAREcat  ~ dot ,  noun,  verb ,  va l _nodo ,  np, ph i ,  ph2, ph3, ph4, phE;number 5 sg, p l ;marker  =human,  l iqu ld ,  notdr inkab lo ,  phyeob j?abet r ;va lancu  5 v l ,  v2,  v3~argument  - a rg l ,  e rg \ ] ,a rg3 JGRAHMAR vocebu lerU  PARN_L ~t QNEPASSRULE 1 a - )  ?ZF s t r lnQ (a )  5 " the"THEN cat (a J  :~  \ [dot \ ] ;RULE 2 a ->  aZF s t r tna(a )5  "man"THEN cat (a~ :~ \ [noun\ ] ;  number (a )  : "  \ [ sg \ ] Jmarkor (e )  :5  \ [human\ ] ;RULE 3 a :>  aXF s t r ing(a )  m "boor*THEN cat (a~ :5  \ [noun\ ] ;  number (a )  :~  Csg\ ] ;marker (a )  :~  C11qutd \ ] ;RULE 4 a 5)  aIF  s t r lnq  (a )  m "car 'THEN ca%Ear :m \ [noun\ ] J  number (a )  : "  \ [eg \ ] ;marker (a )  :m \ [phyeob j \ ] ;RULE 5 a 5\ [F  e~r~na la ) "  "gaxo lLno 'THEN cat (a~ :5  \ [noun\ ] ;  number (a )  :5  G ig \ ] ;markor (a )  : i  ?notdr?nkab le \ ] lRULE & a 5~ a\ ]F  s t r ing(e ) -  "d r inks"THEN cat (e l  :~  \ [noun\ ] ;  number (a )  :5  \ [p l \ ]~markor (a )  :m \ [1Lqutd \ ] ;RULE 7 a - )  a (b0c)I F  s t r ing(e )5  "dr inks": THEN cat (a?
:  ~\ [Vorb \ ] J  va lencu  (a ) :5 \ [V \ ] \ ] lca t (b ) .~\ [va l  node\ ] ;  ca t (c ) :5 \ [va l  node\ ] ;argument (b) :  ; \ [a rg l \ ] J  markor (b ) : -C~uman\ ] ;a rgument (c ) :5 \ [a r92 \ ] ;  marko~(c) : -C IL ;u td \ ] ;GRAMMAR nounphraee  SERIAL ONEPASSRULE 21 a + b m) tEa ,  b) \ [F  ca t (a )  5 \ [dot \ ]  and cat (b )  5 \ [noun\ ]THEN cat (c )  :5  \ [np \ ] ;  marker (c )  :u  markor (b ) JGRAMMAR pro forence  SERIAL ON\[PASSRULE 21 a + b(# l ,c ,#2,  d, W3) + e_m)  ~(b ,a~a)m , .
| F  ca t (a )ECnp\ ]  and cat (b )ECvero J  ago ca ;Le ;  ;np Jand va lency(b)  5Cv2\ ]  and araumont (?
)mCar9  L \ ]  and marker (c )~marke  r (a )and argument (d )ECar92\ ]  end marker (d )mma~ko r (a )THEN cat (x )  : -  ?ph l \ ] JRULE 22  a + b(O l ,  c ,#a)  + ?
5> x (b ,e ,e )  .
.I F  ca t (a )mCnp\ ]  and cat (b )  mCvOrb\]  and cat (e )~Lnp Jand va lencu(b)  =\ [v \ ] \ ]and argument (c )sCar91\ ]  and ma~kor (c ) -marker (a )THEN cat (x )  :5  \ [ph2\ ] ;RULE 23  4 + b(#1,  c ,#2)  + ?
~)  z (b ,a ,o )ZF ca%(a) -Cnp\ ]  and cat (b )aCvorb \ ]  and cet (o )~Cnp\ ]and va loncu(b)  m?v2\ ]  and aTgumlnt (c )m\ [arg  2 \ ]  and marker (c )Emarkor (a  )THEN Cat (x )  :m ?ph3\ ] ;RULE 24  a + b + ?
5~ x (b ,a .e )  I F  ca t (a )m(np\ ]  end cat (b )=Cverb \ ]  and cat (e )~Cnp\ ]and va lence(D)  5 \ [V2 \ ]THEN cat (x )  :5  ?ph4\ ] ;RULE 25  a + b 5 )  x (b ,a )I F  ca t (a )5 \ [np \ ]  and cat (b )m\ [verb \ ]and va loncu(b)  5 (v2 \ ]THEN cat (x )  :5  \ [phE\ ] JENDFILEFigure 3.
Output of upper granmar file.I nput  sentence  :(1 )  The men dr inks  tho  boor .Resu l t  :PHI CATmCPHI\]  !I -~DRINKS '  CATs \ [VERB\ ]  VALENCYEEV~\]i i -~AJ-'-NQDE CATE(VAL_NODE\] MARKER--\[HUMAN\] ARQUMENT--CARQI~; i -VALNODE CATECVAL_NQDE\] MARKERECLIGU\[D\] AROUMENTECARQ23I -NP  CAT ' \ [NP \ ]  MARKER'\[HUMAN\]i; .
i - ' THE '  CATmCDET\]!
- 'MAN'  CAT~CNOUN\] NUHEER~CSQ\] MARKERs\[HUMAN\]Ii -NP  CATE\ [NP\ ]  ARKERE\ [L IGUID\ ]i - ' THE '  ?AT-CDET\ ]i-'BEER" CATBCNGUN\] NUMBERE\[EQ\] RARKERE\[LZQUZD\]Xnput  sentence  :(2 )  The man dr inks  the  gazo l ine .Resu l t  :PH2 CATmCPH2 \]!
- 'DR INKS"  CATmEVERB\] VALENCYsEVS\]i I -VALNOgE CAT-CVAL,.NQDE\] NARKER=CHUHAN\] ARGUMENT-CARQI\]!
!
-VAL_NODE CAT=\ [VALNQDE\ ]  HARMER=CLZGUZD\] ARGUMENT=CARG2\]i -NP CAT- (NP \ ]  NARKER=(HUNAN\] ?
!I I - ' THE"  CAT=CDET\]' !
- 'MAN"  CAT=(NOUN\] NUMBERmCSG\] MARKER-\[HUMAN\]!~-NP CATBCNP\] MARKER~CNOTDRINKABLE\]~- 'THE"  CAT=(DET\ ]i - 'GAZOL\ [NE"  CATuCNOUN\] NUMBERsCEQ\] HARKERs(NQTDRZNKABLE\]904.
FACILITIES FOR THE USERThere is a system user-interaction in the twomain prograns of the system, the compiler and theinterpreter.
The following exanple (fig.
4) showshow the error n~_ssages of the ccrnpiler are printedin the u~L~ilation listing.
Each star with a numberpoints to the approximate position of the errorand a message explains the possible errors.
Thecc~piler tries to correct the error and in theworst case ignores that portion of the text follo-wing the error.
@RAHMAR er~or tes tPARALEL ITERATE*0pop.
O : -ES -  ISER IAL /  ou /PARALLEL/ a t tenduRULE 1a+b m) c (a ,b )\ [F  ETR ING(a)m'b lab le '  ANO cot (b )m\ [nom THEN cAt (d )  :m \[nom\];POe1 *2pos.
0 -E8 -  / , /  a t tenduapop.
1 -E8 -  /3 /  o t tenduepop.
2 -SEN-  td.
pop de~ln i  dane 14 geometr ia  (co te  d~o i t )RULE 2a(a)  m) c (a ,b )*0pop.
0 : -SKM-- ld.
deJa u t l l l so  put pa~t ie  goucheZF cot (a )m\ [det \ ]  THEN categ(b)  :m \ [noun\ ] ;oO o1pop.
~ i -SEH-  ld.
ne represente  poe un ensemblepos.
-SEPI- id.
ne ~ep~esente  pas un o|ementFigure 4.
Compilation listing with error message.The interpreter has a parameter that allows thesequence of rules that fired to be traced.
The tra-ce in figure 5 below corresponds to the executionof the example (i) in figure 3.i n t | rp re teur  do @-cedes O'J .
|  few-14-84app l i co t ten  de lo ~eg le  1app l i ca t ion  de la  reg le  1app l i co t ion  de 14 ~eg le  2app l i ca t ion  de lo  reg le  3app l i ca t ion  de la  reg lp  6app l i ca t ion  de la  ~og le  7VOCABULARY execute(e )app l i ca t ion  de lo  ~eg lo  11app l i ca t ion  de lo  ~eg le  11NOUNPHRASE execute(e )app l i ca t ion  de la  ~og le  21PREFERENCE execute(e )temps d ' ln terp~atot ion  : O .~ lb  Po?.
CPU3 .583  soc.
u t l l i sa teurFigure 5.
Trace of execution.5.
CONCLUSIONThe transducer is implemented in a m0dularstyle to allow easy changes to or addition of ccm-ponents as the need arises.
Tnis provides the pos-sibility of experimentation and of further deve-lopment in various directions:- integration of a lexical database with specialediting facilities for lexioographers;- developments of special interpreters for trans-fer or scoring mechanis~s for heuristics;- refinement of linguistically motivated typed~ecking.In this paper we have mainly conoentrated on syn-tactic applications to illustrate the use of thetransducer.
However, as we hope to have shown, theformalism of the system is general enough to allowinteresting applications in various domains of ion-guistics such as morphology, valency matching andpreference mechanisms (Wilks, 1983).A C ~ N ~Special thanks should go to Roderick Johnson ofCCL, UMIST, who contributed a great deal in theoriginal design of the system presented here, andwho, through frequent fruitful discussion, hascontinued to stimulate and influence later deve-lopments, as well as to Dominique Petitpierre andLindsay Hammond who programmed the initial i~ le -mentation.
We would also like to thank allbets of ISSO0 who have participated in the work,particularly B. Buchmann and S. Warwick.r/~rmK~ESBuchmann, B., Shann, P., Warwick, S. (1984).Design of a Machine Translation System for aSublanguage.
Prooeedings, COLING' 84.Chevalier, M., Dansereau, 5., Poulin, G. (1978).TA\[94-M~I'~O : description du sys t~.
T.A.U.M.,Groupe de recherdue en traduction autcmatique,Univez~it@ de Montreal, janvier 1978.Colmerauer, A.
(1970).
Los syst~nes-Q ou un forma-lisme pour analyser et synth~tiser des phrasessur ordinateur.
Universit@ de Montreal.Johnson, R.L.
(1982).
Parsing - an MT Perspective.In: K. Spazk Jones and Y. Wilks (eds.
), Automa-tic Natural Language Parsing, M~morand%~n I0,Cognitive Studies Centre, University of Essex.
}~Dsner, M. (1983).
Production SystEm~.
In:M. King (ed.
), Parsing Natural Language, Aca-demic Press, London.Sloc~n, J. and Bennett, W.S.
(1982).
Tne LRC Ma-chine Translation System: An Application ofState-of-the-Art Text and Natural LanguageProcessing Techniques to the Translation ofTedunical Manuals.
Working paper LRC-82-1,Linguistics Research Center, University ofTexas at Austin.Va~is ,  B.
(1975).
La traduction automatiqueGrenoble.
Documents de Linguistique Quantita-tive, 24.
Dunod, Paris.Vauquois, B.
(1978).
L'@vOlution des logiciels etdes mod~les linguistiques pour la traductionautcmatis@e. T.A.
Infolmations, 19.Varile, G.B.
(1983).
Charts: A Data Structure forParsing.
In: M. King (ed.
), Parsing NaturalLanguage, Ac~mic  Press, London.Wilks, Y.
(1973).
An Artificial Intelligenoe Ap-proach to Maduine Translation.
In: R.C.
Schankand K.M.
Colby (eds.
), Computer Models ofThought and Language, W.H.
Freeman, San Fran-cisco., pp.
114-151.91
