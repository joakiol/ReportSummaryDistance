Parsing with polymorphism *Mart in  Emms,The CISLeopoldstr 1398000 Munchen 40GermanyAbstractCertain phenomena resist coverage withinthe Lambek Calculus, such as scope-ambiguity and non-peripheral extraction.
Ihave argued in previous work that an ex-tension called Polymorphic Lambek Calcu-lus (PLC), which adds variables and theiruniversal quantification, covers these phe-nomena.
However, a major problem is theabsence of a known decision procedure forPLC grammars.
This paper proposes a de-cision procedure which covers a subset ofall the possible PLC grammars, a subsetwhich, however, includes the PLC gram-mars with wide coverage.
The decision pro-cedure is shown to be terminating, and cor-rect, and a Prolog implementation f it isdescribed.1 The Lambek CalculusTo begin, I give a brief description of Lambek cate-gorial grammar \[Lambek, 1958\].
The categories arebuilt up from basic categories, using the binary cat-egorial connectives ' / '  and 'V.
1 Then a set of 'cat-egorial rules' involving these categories i defined, ofthe form: x l , .
.
.
x ,  =~ y (n > 1), xi and y being cat-egories.
A distinctive feature is that the set of rulesis defined inductively.
Using a term adopted from*This work was done whilst the author was in receiptof a six month scholarship from the German AcademicExchange Service, whose support is gratefully acknowl-edged1Lambek also considered a third connective, the'product'.
I, in common with several authors, use thename Lambek calculus to refer to what is really theproduct-free calculuslogic, sequent, in place of 'categorial rule', Lambekpresented this inductive definition as a close variantof Gentzen's equent calculus for propositional logic.Lambek's calculus, L(/'\), is given below:(Ax) x =~ z(/L) U, y, V =~ w T ::~ z/LU,y/x,T,  V =~ w(\L) T =~ z U, y, Y =~ w\LU,T,y\~,  V ~ w(/R) T, z =~ y (\R) z, T =~ yT =~ y lz  T =~ y\zHere U, T, V are sequences of categories (U,V pos-sibly empty), w,z ,y  are categories.
In the twopremise rules, the T ::~ x premise is called the minorpremise.
The fact that L(//\)derives r, I will notateas L(/'\) ~-r. With regard to the names of the rules,'L' and 'R' stand for left and right.
For example,( \ i )  (resp.
(\R)), derives sequents with 'V on theleft (resp.
on the right) of the sequent arrow, ' =# 'For various purposes it is convenient to consider theaddition of the 'Cut' rule, given below (in which zis referred to as the Cut formula, and T ::~ z as theminor premise):U,z ,V  =~ w T =~ zCutU,T ,V~wLambek \[1958\] establishes that n(/,\)+ Cut \]-r iffL(/,\)~-r (Cut elimination), and that L(/'\)~- r is de-cidable.120The proof of the decidability of L(/'\) }-- r proceedsas follows.
First one reads the rules of L(/'\) 'back-wards', as a set of rewrites, growing a tree at itsleaves 'up the page'.
Call the trees grown this waydeduction trees.
L(/,\)~-r iff r is the root of a de-duction tree whose leaves are all axioms.
I t  remainsto note that there are only finitely many deductiontrees for a given sequent: a leaf can be grown inat most a finite number of different ways, and theadded daughters have always a diminished complex-ity (complexity measured as number of occurrencesof connectives).
This decision procedure is improvedupon somewhat if the rules of the calculus are ex-pressed as a Prolog data base of conditionals concern-ing a binary predicate seq, holding between a list ofcategories and a single category.
For later reference,let Lain stand for some such Prolog implementationof L(/'\).A grammar, G, in this perspective is an assignmentof categories to words.
Reading G }-s E y as 'accord-ing to G, s has category ', I will say G ~-s E y, if (i)s is lexically assigned y, or (ii) s = sl .
.
.
so (n  > 1),G~-s~ E xi, and L ( / , \ )~-x l , .
.
.
xn  =~ y.For any Lambek grammar, G, the questionwhether G~- s E x is decidable.
This is got bycombining Cut elimination with the decidability ofL(/'\)~-r.
Consider deciding whether G~sls2  Ez, where 81 and s2 are lexically assigned the cat-egories x and y.
One can first check whetherL(\]'\)~-x,y:=~ z, which is decidable.
If L(/,\)~x, y :=~ z, then one should try a 'non-flat' categori-sation possibility.
That is, one should also con-sider derivable categorisations of the subexpressions,namely x I and y' such that L(/,\)~- x =~ x', y ::~ y~,and check whether they may be combined to givez.
Here lurks a problem, because there are infinitelymany x ~ and y~ such that L(/,\)\[ - x :~ x I, y =V y~.The way out of this problem is the relationship be-tween the 'non-fiat' categorisation strategy and Cut-based proofs, to illustrate which, note that if therewere derivable categorisations, x' and yl of the subex-pressions, which combined to give z, then L(/'\)+ Cut~x,  y :=~ z:(1)Y ==~ y, x I,yl ==~ zCutCutx, y =C.
zSo parsing with an L(/,\) grammar comes to decid-ing the derivability of X l , .
.
.
,  xo =:~ s, where xi arethe categories of the lexical items.This Lambek style of grammar is associated alsowith a certain method for assigning meanings tostrings.
The idea is that a proof, 7, of L(/'\)- canmapped into a semantic operation, ~.
So, if there isa proof, 7, of Xl, .
.
.
,  ;go : :~ Y, then a sequence ofexpressions with categories X l , .
.
.
,  xn and meaningsml, .
.
- ,  ran, has a possible meaning 6(ma, .
.
.
,  too).As to which operation, G, goes with which proof, 7,this is defined by a term-associated calculus.
Repre-sentative parts of the (extensionally) term associatedcalculus, L~/'\), are given below:(Ax) x : a =~ x : a(/L) U,y : a(  fl ), V =V w : e T =~ z : flU,y/x : a ,T ,V  ~ w :e/L( /R )  T, x : ?
:~ y : /RThere are corresponding (\L) and (\R) rules.L~/'\)derives equents where in place of categoriesthere are category:term pairs.
If we start with anL(/,\) proof of r, and add variables to the antecedentcategories of r, there is a unique way to add termsto the rest of the proof so as to get a proof of L (/'\).When this is done the term, a, associated with thesuccedent of r, represents the semantic operation.The above mentioned ecision procedure can be em-bellished to develop trees featuring semantic terms,some of them unknown, together with an evolvingset of equations in these unknowns.
When a proof isdiscovered, the term for that proof can be obtainedby solving the set of equations.There is a semantic question to be asked aboutthe acceptability of parsing simply by search throughL(/,\) proofs: are all term-associated proofs for asequent in L(/,\)+ Cut equivalent o some term-associated proof in L(/,\), and vice-versa ?
The an-swer is yes \[Hendriks, 1989\], \[Moortgat, 1989\].2 Po lymorph ismDespite the great simplicity of Lambek grammars,a surprising amount of coverage is possible \[Moort-gat, 1988\].
Two aspects of this are embryonic ac -.counts of extraction, and scope-ambiguity, the lat-ter arising from the fact that there may be morethan one proof of a given sequent.
However, theaccounts possible have remained only partial.
Non-peripheral extraction remainsd unaccounted for (eg.the (man)/ who Dave told ei to leave) and only thescope-ambiguities of peripheral quantifiers are cov-ered (as in the structure QNP TV QNP).
A simpleaccount of cross-categorial coordination has also of-ten been cited as an attractive feature of Lambekgrammars (\[Moortgat, 1988\]).
However, the analy-ses are never in a purely Lambek grammar.
Belong-ing to Lambek grammar proper is a part assigningsome category to the strings to be coordinated, andthen lying without Lambek grammar, a coordinationschema, such as x, and, x ::~ x.121To overcome these deficits in coverage, I haveproposed a polymorphic extension of the calculus.Added to the categorial vocabulary are categoryvariables and their universal quantification, allowingsuch categories as: X, X/X, VX.X/(X\np).
To L(/,~ \~are added left and right rules for V, to give what I willcall L(/,\,v)(I given straightaway the term-associatedcalculus):(VL) U, x\[y/Z\] : c~(a), V :~ w: @U, VZ.= : a, V =~ w : q~(VR) T =V z : a \[Z is not freein 71 T =:~ VZ.z : AwaNotation: the terms are drawn from the languageof 2nd Order Polymorphic A-calculus \[Girard, 1972\],\[Reynolds, 1974\].
Here, terms carry their type asa superscript, and one can have variables in thesetypes (eg.
Axr.x~), one can abstract over such vari-able types, deriving terms of quantified type (eg.A~r.Ax ~.z ~, of type Vr(Tr--*~r)), and terms of quanti-fied type can be applied to types (eg.
Ar.Axr.=x(t),of type (Z-+Z)).
In the (VL) rule above, the type, a,that a is applied to, is the type that corresponds tothe category, y, that is being substituted for the cat-e~ory variable, Z.
2 An equivalent slight variant onL (/,\,v) takes as axioms only those z ::~ x sequentswhere z is basic or a variable, something I will callL~/'\'v).
It is easy to show L~/'\'v)~-r iff L(/,\,v)~--r(see \[Emms and Leiss, forthcoming\]).By assigning conjunctions to YX.
((X\X)/X), nega-tion to VX.X/X, and quantifiers to VX.X/(X\np)and VX.X\(X/np), one obtains coverage of cross-categorial coordination and negation, as well as acomprehensive account of quantifier scope ambiguity\[Emms, 1989\],\[Emms, 1991\].
Assigning relativisersto VX.
((cn\cn)/(s\X)/(X/np)),  non-peripheral ex-traction can also be handled \[Emms, 1992\].
Themeanings that go along with these categories are asfollows.
Where ?
is Q, ff or A f, let/:G vary over theconventional meanings of quantifiers, junctions andnegation, with ?
:p the polymorphic version.
?p(t) = ?GQ(a---*b)(pe'-"'~-"~)(x ") = Q(b)(y'---*Pyz) o) =who(a)(P~ a)(p~ t)(Qe t)(xe ) = P2(P~x) AQxI will give two illustrations.
The proof below wouldallow the embedded quantifier, every man, to be as-signed a de-re interpretation i John believes everyman walks.
Note (s\np)\((s\np)/s)  : X.2The (VR) given is a cut-down version of the 'official'version, which allows a change of bound variablenp, s\np ~ XnP, (s\np)/s, X =~s s\np =~.'
'~npl:np, (s\np)/s, X/(X'\np) s\np ::~ s,?Lnp, (s\np)/s, VX.X/(X\np), s\np ::~ sNow assuming j ,  bel, em and walk were the termsassociated with the antecedents of the root sequent,the term for the proof is:emp (tel, et ) ( AxA f A y\[f (walk( z ) )( y) \] )( bel)(j )We obtain as a possible denotation for John believesevery man walks:emp(ta ,  a ) (=, / ,  y ~ f (wa lk (z ) ) (y ) ) (be l ) ( j )= emp(a) (~,  y ~ b~t(waZk(=))(y)) ( j )= emp(t)(z ~-* bel(walk(z))(j))= emG(=As an illustration of non-peripheral extraction, theproof below allows the string who John told to go tobe recognised as a postmodifier of a common oun:s/vpc, vpc =~ s__ \Rr vpc =~ s\XD(c .
\c . )
/ (s \X) ,  vpc ca\canp, V, np, vpc ::~ s/L _ ./Lnp, V :~ X/np/Lrip, v, vpc cn\cnVLVX.
((cn\cn)/(s\X)/(X/np)), rip, V, vpc cn\cnHere r = cn\cn ~ cn\cn, V -- ( (s\np)/vpc)/np,= s/vpc.
Assuming who, j, told, and go were asso-ciated with the antecedents of the root, the term forthe proof is:who( (et, t ) )( AzAy\[told(z)(y)(j)l)( A f \ [ f  (go)\])We obtain for the denotation of the string who Johntold to go:who((et, t))(z, y ~ told(z)(y)(j))(f ~ /(go))= Q, z ~ (( f  ~ f(go))((y ~ told(z)(v)(j))) A O(z))= Q, z ~ (told(z)(go)(j) A Q(z))For the further discussion of the analyses withinan L (/,\,v) grammar that cover a significant range ofdata, see the earlier references.
I turn now to themain problem which this paper addresses: is therean automatic procedure able to find these analyses ?2.1 Cut  E l iminat ion  for  L (/,\,v)We want a procedure to decide whether G ~-s E z,where G is an L (/,\,v) grammar.
As with L(/'\) gram-mars, this problem reduces to deciding L(/'\'v)~ - r ifit can be shown both that Cut can be eliminated,and without the loss of any significant semantic di-versity.
This has recently been shown (\[Emms andLeiss, forthcoming\]).
I make some remarks on theproof.
The strategy of the proof of Cut eliminationfor L (/A) starts from the observation that a proof, 7,122using Cut must contain at least one use of Cut whichdominates no further uses of Cut - a ' topmost'  useof Cut.
Suppose this use of Cut derives r. Thenone defines two things: a degree of the Cut leadingto r, and a transformation taking the proof of r toan alternative proof of r, such that either the trans-formed proof of r is Cut-free, or it is a proof with2 or less cuts of lesser degree.
After a finite numberof iterations of the transformation, one must have acut free proof.In the proof for L (/'\), the degree of a Cut infer-ence is simply the sum of the numbers of connectivesin the two premises.
This cannot be the degree forL (/'\'v).
For example, a cases to be considered iswhere one has a cut of the kind shown in (2).
Thenatural rewrite is (3) (that T ~ y\[a/Z\] is provablerelies on the fact that Z is not free in T and substi-tution for free variables preserves derivability \[Emmsand Leiss, forthcoming\])(2) T ~ v VR U, v\[~/Z\], V ~ WVLT ~ VZ.y U, VZ.v, V =~ wCutV,T ,V  =~ w(3) T ::~ y\[a/Z\] U, y\[a/Z\], V =~.
w.CutU, T, V =C, wWith degree defined by number of connectives, weneed that the number of connectives in y\[a/Z\] isstrictly less than the number in VZ.y, and that isoften false.
The proof goes through instead by tak-ing the degree of a cut to be the sum of sizes of theproofs of its two premises, where the size is the num-ber of nodes in the proof.
32.2 Di f f icul t ies in dec id ing  L(/,\,v)}-T ::?, xSo the problem reduces to one of L (/'\'v) derivabil-ity.
Whether L (/'\'v) derivability is decidable I donot know.
The nearest to an answer to this thatthe logical literature comes is a result that quanti-fied intuitionistic propositional logic is undecidable\[Gabbay, 1974\].
The difference between L(/,\,v) andlogic of this result is the presence of the further con-nectives (V, A), and the availability of all structuralrules.
I will describe below some of the problems thatarise when some natural lines of thought towards adecision procedure are pursued.One might start by considering the logic that isL(/ ' \)+ (VR).
This can be argued to be decidablein the same fashion as L(/'\): read (VR) backwardsas a rewrite, adding another way to build deductiontrees.
As for L((/'\) a sequent has only finitely manydeduction trees, and provability is equivalent o theexistence of a deduction tree with axiom leaves.~In fact nodes above axiom form sequents are notcounted in the size, and the proof relies on changes ofbound variable and substitutions not changing the sizeof L(/'\'Y ) proofsHowever, when (VL) is added this simple argumentwill not work: if (VL) is read backwards as a furtherclaus- ill tile definition of deduction trees, then aleaf containing an antecedent V could be rewritteninfinitely many different ways.
A natural move at.this point is to redefine deduction trees, reading the(VL) rule as an instruction to substitute all unknown.One hopes then that: (i) the set of so-defined educ-tion trees for a given sequent, r, is finite (ii) there issome easy to check property, P, of these trees suchthat the existence of a P-tree in the set would beequivalent to L(/,\,v)~-r. Now, if we were consideringthe combination of first-order quantification with theLambek calculus, this strategy works, but whether itworks for n (/'\,v) remains unknown.I will go through the application of the strategy inthe first-order case to highlight why g(/,\,v) does notyield so easily.
The first-order quantification plus theLambek calculus, I will call L (/'\,v').
It is the end-point of a certain line of thought concerning agree-ment phenomena.
One first reanalyses basic cate-gories, such as s and np, as being built up by theapplication of a predicate to some arguments, givingcategories uch as np(3rd,sing), s(fin).
It is naturalthen to consider quantification over the first orderpositions, such as Vp.
s(fin)\np(p,pl), which couldbe used when, as in English, the plural forms of averb are not distinguished according to person.
NowL(/,\,v~) is decidable, which can be shown by adapt-ing an argument hat shows that when the contrac-tion rule is dropped from classical predicate logic,it becomes decidable \[Mey, 1992\].
Deduction treesfor a sequent, r, of L (/'\'v~) are defined so that therewrite associated with the (VL) rule substitutes anunknown.
There are then only finitely many deduc-tion trees (the absence of the structural rule of con-traction is essential here).
Now, if L(/'\'v')~--r, and rhas a complex first order term, one can be sure thatthis term is present in an axiom, because no rulesbuild complexity in the places in categories where abound variable can occur.
For this reason, the so-defined deduction trees for r cover all the possiblepatterns for a proof of r. Provability is thereforeequivalent o the existence of a substitution makingone of the deduction trees have axiom leaves, andthis can be checked using resolution.This situation does not wholly carry over tog(/,\,v).
The 'substitute an unknown' rewrite readingof (VL) defines only finitely many deduction trees fora sequent, r. However, these so-defined deductiontrees for r do not cover all the possible palterns fora proof of r: unlike g (/,\'v~), there are rules thatbuild complexity in the places in categories where abound variable can occur.
So, for example, L(/'\,v)~ -no, VX.X/(X\np), (s\np)\np,  but none of the de-duction trees represents the pattern of the proof.
Soto check for the existence of a deduction tree (asabove defined) that by a substitution would have ax-123iom leaves is not sufficient o decide derivability.
Itseems we must defined the looked for property, P,of deduction trees recursively, so that a tree has Pif (1) the leaves by a substitution become axioms, or(2) by hypothesising a connective in one of the un-knowns, and extending the tree by rewrites licensedby this connective, one obtains a P-tree.It would amount o the same thing if the definitionof deduction tree was extended (by hypothesising aconnective in an unknown), and the looked for prop-erty, P, kept simple: a tree whose leaves by a substi-tution become axioms.
However, the extended def-inition of deduction tree now allows infinitely manytrees for a sequent.
This may seem surprising, but isseen one considers a leaf such as T ==~ X.
One can hy-pothesis X = Y/Z, extend the deduction tree by therewrite associated with a slash Right rule, obtain-ing once again a leaf with a succedent occurrence ofan unknown.
By imposing a control strategy whichwould systematically consider all deduction trees ofheight h, before deduction trees of height h + 1, onecan be sure that any provable sequent would sooneror later be accepted by the decision procedure (be-cause its provability would entail the existence of adeduction tree of a certain finite height).
However,there is no reason to expect the procedure to termi-nate when working on an underivable sequent.
43 A par t ia l  dec is ion  procedure  fo rL(/,\,v)While there are problems in the way of a general de-cision procedure for L (/'\'V), I claim a partial decisionprocedure for L (/'\'v) is possible.
Partial in the senseof covering only a certain class of sequents, but onesufficiently large, I claim, to cover all linguisticallyrelevant cases.
The procedure will be a partial deci-sion procedure for L (/,\,v) via being a partial decisionprocedure for L(0/'\'v).To describe the class of sequents that the proce-dure applies to I need definitions of the 'polarity' ofan occurrence of a category.
Let the category polarityof an occurrence of z in a category  (pol(z, y)) be:pol(x, z) = +if z occurs in y, pol(:~,y/z)pol(x, y) = opp(pol(x, z/y))= pol(x,VZ.y)Here opp(+) = - ,  opp(-) = +.
The sequent polarityof an occurrence of x in y in a sequent r is the sameas the category polarity if y is an antecedent, andotherwise it is opposite.
I use 'polarity' as short for'sequent polarity'.
An example:(4) sk(V-X.X/(Xknp)) ::~ sk(V+X.X/(X\np))4I have found non-terminating consecutively boundeddepth first search to happen on the Prolog implementa-tion of the calculus that these paragraphs suggestThe decision procedure to be described is applica-ble to sequents whose negative occurrences of poly-morphic categories are unlimited, but whose positivepolymorphic ategories are drawn from:(5) VX.X/(X\np),  VX.X\(X/np),vx.x/x,VX.((cn\cn)/(s\X)/(X/np)vx.
((x\x)/x),I will now make three observations concerningproofs in L (L\'v), leading up to the definition of theprocedure.Observation One In the categories in (5) there isexactly one positive and one or two negative occur-rence of the bound variable.
This leads to the pre-dictable occurrence of certain sequents.
To help de-scribe these I need to define some more terminology.An initial labelling of a proof is the assignment ofunique integers to some of the categories in some se-quent of the proof.
A completed labelling is got froman initial labelling by a certain kind of propagationup the tree: a label is passed up when a labelledcategory is simply copied upward, and in a (VL) in-ference the label is distributed to the occurrences ofthe categories chosen for the variable.
In other infer-ences where a labelled category is active, the label isnot passed up.
For example:(6) sl =~s s=~ sl np=~ np s=~s/L .\Lsl/sl, s =~ s up, s\np =~ sVlX.X/X, s =~ s s\np =~ s\npvlx.x/x, s\np sI will say U, ai, V =~ w is 'positive for Vi' if the se-quent occurs in a labelled L (/'\ 'v) proof and the labelon ai has been passed from a labelled occurrence ofVi.
Correspondingly, call a sequent T ::~ ai 'negativefor Vi'.
Now note that in the above proof, the Vl inthe root led to one V + and one V~" branch.
This isno accident: one can predict the existence of suchbranches in any proof of a sequent with a positiveoccurrence of ViX.X/X.
To see this, let me first de-fine a notion reflecting how 'embedded' a categoryis:path(a, a) = O.Where a occurs in x, path(a, x/y) - (/,path(a, x)),path(a,y/z) = (/,path(a,z)), path(a, VZ.x) =( v, path(a, z))With the exception of bound variable, if a cate-gory occurs with a path (C,p), and a polarity 6,in the conclusion of an inference, then it occurs inthe premises of that inference with the same po-larity, and with either the same path or with pathp.
Also, in leaves of a proof in L (/'\ 'v), categoriesonly occur with zero path.
Therefore, if we have124a proof of a sequent with a positive occurrence ofViX.X/X and with non-zero path, then there mustoccur higher in the proof, a sequent with V,.X.X/Xoccurring again positively and this time with withzero-path.
In other words there must occur a node U,ViX.X/X, V =~ w. Then if there were no (VL) infer-ence in this proof introducing the category ViX.X/X,the category ViX.X/X would be present in the leavesof the proof.
Because the leaves can only feature ha-sic categories, there must be a (VL) inference, andtherefore a node U ~, ai/ai,  V ~ =~ w ~.
Reasoning in asimilar vein concerning the category ai/ai,  we can besure there must be a (/L) inference, with premisesU ~,a i ,V"=~w # and T ~=~al .
These are V + andV~- sequents.Provable sequents having a positive occurrence ofone of the polymorphic ategories from (5), labelledwith i, will generate an L~/'\'v) proof such that cor-responding to each of the positive and negative oc-currences of the bound variable, there are (distinct)V + and V~- branches.Observat ion Two We just argued that in any proofof a sequent with a positive occurrence of quantifiedcategory, there must occur a node at which the quan-tifier is introduced by a (VL) inference, and that forthe categories in (5), V~ sequents must appear abovethis.
For each of the V~ sequents, the minimum num-ber of steps there can be between the conclusion ofthe (VL) step and the V~ sequent is the length ofthe paths to the associated occurrence of the boundvariable in the quantified category.
Proofs featur-ing such minimum intervals between the quantifiedcategory and the associated V~ sequents I will callorderly.
One can ask the question whether wheneverthere is a proof of a sequent whose positive quanti-tiers are drawn from the list in (5), there is also an(equivalent) orderly proof.
And the answer is thatthere is.Proof sketch We want to show that for any cate-gory x in (5), for each of the occurrence of a variablein it, that if there is a proof of U, x, V =~ w, thenthere is a proof in which the steps leading from thelowest occurrence of the relevant V~ sequent o the(VL) inference correspond to the path to the boundvariable in x.Let me define the spine of a category as: sp(x /y)  =(/, sp(x)), sp(VZ.x) = (V, sp(x)), sp(x) = O, wherez is basic.We will show first for categories such that sp(x) =(V, slash), and sp(z)  = (slashl,  slash2), that whenthere is a proof such that the left inferences for thefirst two elements of the spine are separated by nsteps there must be an equivalent proof where theyare separated by n - 1 steps.One considers all the possibilities for the last in-tervening step, 1, and shows that the step associ-ated with the first element of the spine could havebeen done before l, thus lowering by 1 the numberof steps intervening between the first two elementsof the spine.
There is not the space to show all thecases.
(7), (S) and (9, (10) are representative exam-ples for sp(w) = (V, sp(x)).
Note that in (9) and (10)there are side-conditions to the (VR) inferences.
Sat-isfaction of these for (9) entails satisfaction for (10).
(11), (12) and (13),(14) show representative exam-ples for sp(w) = (slash1, slash2).
In (14), X' is somevariable chosen to be not free in U, x /y /z ,  T, V andw.
The provability of the upper premise U, x /y ,  Vw\ [X ' /X \ ]  follows from that of U, z /y ,  V ~ w bysubstitution for the variable X throughout.
5 As tothe equivalence of the proofs, one can confirm that inthe term-associated versions, the same term is pairedwith the succedent category in each case.
(7) U, a, V2 =~ w x'/y', V1 =*, b/LU, a/b, x' /y ' ,  Va, V~ =~ w"?LU, a/b, VZ.x/y, V1, V2 :=~w(8) E/v', v~ =~ b.VLU , a , V2 =~ w V Z. x / y , V1 =~ b"/LU, a/b, VZ.x/y, V1, V2 =~ w(9) U, x'/y', V ~ zVRU, z'/y', V :0 VY.z.VLU, YX.z/y,  V ~ VY.z(10) U, s'/y', V =~ z-?LU, VX.z/y, V =~ zVRU, VX.z/y, V =~ VY.z(11) U, a, V =~ w x/y,  T2 =~ b.\]LU, a/b, x/y,  T2, V ~ w T1 :* z/LU, a/b, x /y /z ,  T1, T2, V =~ w(12) z/y ,  T2 ~ b T1 =~ z/LU, a, V m, w x/V/z,  T1, T2 ~ b/LU, a/b, x /y /z ,  T1, T~, V =*, w(13) U, x/y, V ~ wVRV, x/y, Y ~ VYw\[Y /X\ ]  T =~ z./iU, z /y /z ,  T, V ~ VYw\[Y/X\ ]U, z /y ,  Y =~ w\ [X ' /Z \ ]  T =~ z./LU, x /y /z ,  T, V ~ w\[X ' lX \ ]'VRU, x /y /z ,  T, V ~ VYw\[Y /X\ ](14)5Here the 'full' version of (VR) is being used, incorpo-rating a change of bound variable.
See earlier footnote.125This is enough to show orderly proofs forVX.X/X and VX.(X\X)/X.
For VX.X/(X\np) andVX.
((cn\cn)/(s\X)/(X/np)) we must further showthat if there is a proof of T =~ x /y  whose last step isnot a (/R) inference introducing x/y,  then there isan equivalent proof whose last step is a (JR) infer-ence introducing ~./y.
One can show this by showingif there is a proof whose last two steps use (/R) fol-lowed by some rule *, then there is an equivalentproof reversing that order.
(15) and (16) illustratethis.
(15) U, a, V, y ~ x/RU,a ,V  ~x/y  T~b/nU, a/b, T, V ~ z/y(16) U, a, V, y =~ x T =~ b/LU, a, T, V, y ~U, a/b, T, V =~ x/y/RSo much by way of a sketch of a proof.
I willput the fact that orderly proofs exist to the follow-ing use.
For sequents whose positive quantifiers aredrawn from the list in (5), one can be sure that if theyhave proofs at all, they have a proofs which instan-tiate quantifiers 'one at a time'.
One at time in thesense that once a there is a (VL) inference, one cansuppose there will be no more (VL) on the branchesleading to the first occurrences of a V~ sequents.Observat ion  Three  Bearing in mind ObservationOne, the question whether a given choice, hi, for thevalue of the quantified variable is a good one willcome to depend, sooner or later, on the derivability,of a certain set of V/6 sequents, containing one V~sequent and one or two V~- sequents.
In relation tothis consider the following:Fact 1 (Unknown e l iminat ion)  (i) and (ii) areequivalent(i) There is an x such that L(/,\,v)\[-U,x,V ~ w,Ti ~ z .
.
.
.
, T, ~ z(it) L(/'\'v)~-U, Ti, V =?, w, .
.
.
,  U, T, ,  V =:~ wThe proof of this, from left to right usesCut and Cut-Elimination.
For example, fromL(/,\,v)~-U, x, V =?.
w, L(/,\,v)~-Ti =?, x, we deduceL(/'\'V)+ Cut ~-U, Ti, V ~ w. Therefore by Cutelimination, L(I,\,v)~U, T1, V ~ w. For the rightto left direction, let me say that (w\U) /V  is ashorthand for (w\ui  .
.
.
\us )  /v,, .
.
.
/ v i .
Wechoose the x to be (w\U) /Y .
Clearly forthis x, L(I,\,v)~-U,x,V ~ w. Also each of theclaims L(/,\,v)~-T/ =~ x, follows from the assumedU, 7~,V~w,  simply by sufficiently many slashRight inferences.On the basis of these observations, I suggest hefollowing decision procedure: 6Def in i t ion  1 (Dec is ion  procedure)  Where A, rvary over possibly empty sequences of sequents, let arewrite procedure 7~ be defined as follows1.
A, z =t, x, r .,~ A, r ,  where x is atomic2.
A, T :=~ w, r .,., A,  O, r ,  if T "=~ w followsfrom 0 by some rule of L(/'\'v) other than O/L)3.
A, U, VZ.z, V =~ w, r ~ A, z\[x/Z\],  V =~ w, r,where X is an unknown, and there are no otherunknowns in A,  U, VZ.z, V ::~ w, r4.
A, U,X,V =~ w, Tx =~ X .
.
.
.
, T,  ~X,  r..~ A U, T1, V =?, w, .
.
.
,  U, Tn, V ~ w, rA sequent T ~ w is accepted iff the sequence con-sisting of just this sequence can be rewritten to theempty sequence by 7?.The fourth clause slightly oversimplifies what I in-tend in the two respects that (i) the rewrite can applywhen the U, X, V =?, w, T1 =?, X, .
.
.
,  T,  =?, X occurdispersed in any order through the sequence, and (it)it can only apply if the unknown X does not occur insequents other than those mentioned.
Note becauseof clause 3, there will only ever be one unknown inthe state of the procedure.
This corresponds to Ob-servation Two above.
I will show that this procedureis terminating and correct when applied to sequentswhose positive quantifiers are drawn from (5).
Bycorrectness of the procedure, I mean that the pro-cedure accepts r i f f  L(/,\,V)\]--r. The implication leftto right I will call soundness, and from right to leftcompleteness.There is a term associated version of this deci-sion procedure, rewriting a pair consisting of a setof equations, and a sequence of term-associated se-quents.
On the basis of the discussion earlier, forthe most part the the reader should be able to eas-ily imagine what embellishments are required to theclauses of the rewrite.
I will just give the full versionof the Clause 4 rewrite.
The input will be:Equations:ESequence: A, U : ~7,_.
X:@I, V : ~' =t, w : @2, Ti : t~:~ X:~l, .
.
.
,  Tn : tn ::~ X:q/n, rThe output will be:Equations:E plus ?2 = (\]~I(~-~)(U), I I /1 - -  )tV~'tA~tI#i,.
.
.
,  ~ ,  = ~u~"Sequence: A, U : ~ ,  T1: 4 ,  V : ~ =~ w : @\], .
.
.
,U :un,  Tn :~,V :~ =?, w : ~ ,  r3.1 Terminat ionIf there are any rewrites possible for a sequence thereat most finitely many.
So we require that no rewriteseries can be infinitely long.
Call the sequents fea-turing an unknown a linked set.
At any one timenSince writing this paper, I have discovered that theabove observation concerning unknown elimination havebeen made before \[Moortgat, 1988\], \[Benthem, 1990\].This will be further discussed at the end of the paper126there is at most one linked set.
Let the degree, d, ofa sequence be the total number of connectives.
Allrewrites on a sequence that has no linked set lowerthe degree.
So rewriting can only go on finitely longbefore it stops or a linked set is introduced.
A linkedset is introduced by a clause 3 rewrite, introducingan unknown into some particular sequent.
Call thisthe input sequent.
While the sequence contains alinked set, either the degree of the whole sequencegoes down, and the sequence remains one containinga linked set (clause 1, clause 2), or the sequence be-comes one no longer containing a linked set (clause4).
So a rewrite can only go on finitely long beforeit either stops, or has a phase where a linked setis introduced and then eliminated.
Call the sequentswhich result from the elimination of the unknown in aclause 4 rewrite, the oulpul sequents.
Now consider-ing any such phase of unknown introduction followedby elimination, one can say that the count of posi-tive quantifiers in the input sequent must be strictlygreater than the count of positive quantifiers in anyof the outputs.
This, taken together with the factthat the maximum count of positive quantifiers isnever increased outside of such phases, means thatthere can only by finitely many such phases in arewrite.3.2 SoundnessWe show that if the procedure accepts a sequenceof n sequents (n > 1), then there is substitution forthe unknowns such that there are n proofs of the nsubstituted for sequents.
This subsumes oundness,which is where n = 1 and there are no unknowns.
Ishall use sub(A) to refer to the sequence of sequentsgot from A by some substitution for the unknowns inA, and L(/,\,v)~-A for the claim that there are proofsof each of the sequents in AThe proof is by induction on the length of theshortest accepting rewrite.
When the shortest ac-cepting rewrite is of length 1, the sequence must con-sist simply of an axiom, and so there is a proof.
Nowsuppose the statement is true for all sequences whoseshortest accepting rewrite is less than 1.
Then for se-quences whose shortest accepting rewrite is of lengthl, we consider case-wise what the first rewrite mightbe.?
clause 2 rewrite, for example: A, U, z/y, T, V ~ w,F .,.
* A, U,x, V =~.
w, T ::~ y, F. A, U,x, V ~ w,T ::~ y, r must have a shortest accepting rewriteof length < l, so by induction there is a substitu-tion such that L(/,\,v)~-sub(A), sub(U,x,V =~ w),sub(T ::V y), sub(r).
From this it follows thatL(/,\,V)Fsub(A), sub(U,z/y,T, V ~ ~), sub(r).The other possibilities for clause 2 rewrites work ina similar way?
clause 3 rewrite: A, U, VZ.x,V=~w, F~.~ A, U,x\[X/Z\], V =~ w, A.
By inductionthere is a substitution such that L(l'\'v)~-sub(A),sub(U,.x\[X/Z\], Y ::V w, sub(A).
Let sub' be the sub-stitution that differs from sub simply by substitut-ing nothing for X. sub'(VZ.x) -- VZ(sub'(x)), andsub(x\[X/Z\]) = subt(x)\[sub(X)/Z\].
It follows thatL(/,\,v)~-sub'(~), sub'(U, VZ.~, V ~ ~), sub'(F)* clause 4 rewrite.
A, U ,X,V: :~w,  T1 ::~X, .
.
.
,Tn ~ X, r ..~ A U, T1, V =v w, .
.
.
,  U, Tn, V =V wr .
By induction: L(/,\,v)~-sub(A),sub(U, T1, V =~ w,... ,  U, T,, V : ,  w), sub(r).
Letsub' be the substitution that differs from sub sim-ply by substituting for X, sub(w\U/V).
ClearlyL(/,\,v)~ - sub'(U,X,V=~w).
Also for each T~,it follows from L(/,\,v)~-sub(U, Ti, V :=0 w) thatL(/,\'v)~-sub'(Ti =~ X).
Hence L(/,\,v)~-subl(A),sub'(U, X, V =~ w), sub'(T1 =~ X), .
.
.
,  sub'(T, ::~ X),sub'(r) \[\]3.3 CompletenessI will now show completeness for sequents whose pos-itive polymorphic ategories are drawn from (5).By a frontier, f ,  in a proof, I will mean either theleaves of that proof or the leaves of a subtree havingthe same root.
Given a frontier f in a proof p, whichhas some completed labelling, the procedure will besaid to be in a state s that corresponds to f ,  if thestate and the frontier are identical except that (i) smay have some axioms deleted as compared with f ,and (ii) the occurrences of labelled, non-quantifiedai in f ,  are transformed to occurrences of some un-known in s. Given a state s, I will say that a frontier,f ,  is accessible if there is a state corresponding to fthat the procedure may reach from s.I assume the procedure is complete for unknown-free sequents whose positive quantifier count is zero.
7Now suppose the procedure is complete for unknown-free sequents whose positive quantifier count is lessthan some particular n, and consider a sequent r, ofpositive quantifier count n, with some proof, p, andone of the form remarked upon in Observation Two.There will be (VL) inferences in this proof, amongstwhich is a set lower than any others.
Take the con-clusion of one such (VL) inference, U, VX.y, V ==~ wand from all other branches pick a point not above a(VL) inference.
This set of points forms a frontier, f ,which is accessible if the procedure starts at r. Callthe corresponding state s. The sequents in the stateother than U, VX.y, V =~z w are unknown-free, havea positive quantifier count of less than n, and havea proof, and so by induction the procedure is com-plete for them.
So there is a possible later state s Iwhich consists olely of the sequent U, VX.y, V ~ w.We now focus on the subproof of p that is rooted inU, VX.y, V =~ w. Consider VX.y as labelled with i,and labelling to have been propagated up the tree.
Iwant to define a certain accessible frontier, if, in thistree.
There are a certain finite number of branchesending in U, VX.y, V ::~ w. A certain subset of those7I am of course assuming that all these positive quan-tified categories are drawn from the list in (5)127branches lead to V~ sequents, and without any in-tervening (VL) inferences.
Select for the frontier f 'tile lowest occurrences for the V~ sequents.
Fromthe other branches imply select a set of nodes, P,which is not preceded by a (VL).
This frontier is ac-cessible, and the corresponding state is: U, Xi, V=2,, w, T1 z=~ Xi, .
.
.
,  Tn ~ Xi.
By a clause 4 rewritethis leads to: U, T1, V =~ w, .
.
.
,  U, T,, V ~ w. Thisstate is unknown free, each of the sequents has pos-itive quantifier count less than n, and each has aproof.
So by induction, the procedure is complete foreach of the sequents, and the state may be rewrittento O" \[\]4 Implementat ionWe can with respect o the term-associated versionof the decision procedure ask whether it is semanti.cally comprehensive: whether the procedure assigns,up to logical equivalence, xactly the same terms toa sequent as are assigned to it by the declarative defi-nition of an L(/,\'v) grammar.
Some but not all partsof what is necessary for a proof of this are established- that Cut elimination for L (/'\'v) preserves readings,that restriction to orderly proofs loses no readings.However, for the moment, he claim rests ultimatelyon empirical evidence, drawn from the prolog imple-mentation that I will now describe.
I will describethe implementation as additions/alterations to theearlier mentioned Laln.First, it was noted in Observation Two, that one caninsist in proof search that Slash right rules are usedas soon as their application become possible: thisearly use of Slash right rules is the first modificationof Lain.
For the sake of the discussion, assume it isdone by adding to non Slash right rules a check onthe absence of a slash in the succedent.Second, a conditional for (VL) is added:seq(\[U,pol(X,Y):Terral,V\],W:Terra2):-groundseqC\[U,pol(X,Y):Tez~l,V\],W:Term2),substituteCXl,X,Y,Yl), ~ Y1 is Y\[XI/X\]mark(Y1,Y2),seq(\[U,Y2:Terml(Ty),V\],W:Term2) ,cattotype(X1,Ty).Note, polymorphic categories appear as terms uchas pol (x ,x/x) .
The code is in a simplified form,pretending that \[U, X, V\] matches any list that is theappending together of the lists U, fX\] and V, where inreality there are further clauses taking care of this.The conditional basically substitutes an unknown fora quantified variable.
Prior to the substitution thereis a check, groundseq, that the categories in the goaldo not already feature some syntactic unknown.
Sub-sequent o substitution, the mark relation leads tothe replacement of the positive occurrence of the un-known Xl with (Xl,a).Third, a goal featuring a zero-path occurrence of(Xl, a) :Term matches no standard sequent rule, be-cause of the marking, matching instead an 'argumentstacking' conditional:seqC\[U:\[~,CX,a) :F,V:~ ~\] ,W:Tena) :-x = (w\u) /v ,  Tez~ = FC~)Cr~)Fourth, sequents featuring the marked version of theunknown are dealt with before sequents featuring theunmarked (negative) instances of the unknown, byordering the major premise before the minor in theconditionals for the Slash Left rules.To illustrate I will 'trace' the behaviour of the pro-gram on the goal given as 1 below (tv stands for(s\np)/np1.
seq( \ [np : f , tv :g ,po lCx ,x \ (x /np) ) :h \ ] , s :T )2. seq( \ [np : f , tv :g , (X i ,a ) \ (X l /np) :h (Ty) \ ] ,s:T)3. seq( \ [np: f , (X l ,a) :h(Ty)(T1) \ ] ,s :T)4.
Xl = sknp, T : h(Ty)(T1)(f)5. seq(\ [ (s \np)/np:g\]  ,s\np/np:T1)6.
TI = )~x ~y g(x)(y)7. cattotype(s\np,Ty)8.
Ty = (e,t)9.
T = h(Ce , t ) ) ( Ix  ~y gxy)( f )1 matches against he (VL) clause.
The check thatthere are no syntactic unknowns around is success-ful, and after substitution and marking, we reach thesubgoal shown as 2, which introduces the new un-knowns Xl and Ty.
2 matches against the (\L) clause,the first subgoal of which is the major premise, shownas 3, with the new unknown T1 (if we could pickthe minor premise, we would have non-termination).3 matches only the 'argument s acking' conditional,giving a solution for Xl and solving T in terms of Tyand T1, as shown in 4.
The second subgoal of 2 isthen considered, under the current bindings, whichis 5.
5 will solve via a combination of slash Left andslash Right rules, giving the solution for T1 shown in6.
2 is now satisfied, and the final subgoal of 1 isconsidered under the current bindings, which is 7.
7solves with the solution for Ty shown in 8.
1 is nowsatisfied, and the solution for T is shown in 9 (recallin 4, T was expressed in terms of Ty and T1).Space precludes giving a formal argument that thisProlog implementation a d the foregoing decisionprocedure correspond, in the sense that they suc-ceed and fail on the same sequents, and assign thesame terms.
By way of indication of the behaviourof the implementation, and in particular its seman-tic comprehensiveness, I give below some examplesof what the implementation does by way of assigningreadings.
In all but the last two cases the task is toreduce to s. For the last two it is to reduce to cn.128(17) a. every man walks (I)b. every man loves a woman (2)C. John believes Mary thinks every man walks(3)d. every man a woman 2 flowers (0)e. every man loves a woman 2 flowers (0)f. every man gave a woman 2 flowers (6)g. (omdat) John gek en Mary dom is (1)h. man who John told to go (1)i. man who John told Mary to go (0)5 Conc lud ing  remarksTo pick up on an earlier footnote, I have discoveredsince writing this paper that Benthem and Moort-gat have shown decidable, by using what I have re-ferred to as Unknown Elimination, the system whichis L(/'\) with an added rule of 'Boolean Cut':U,x,V ~ w TI ~ x T2 ~ x-Bool.CutU, T1,J,T2,V =~ wThe question arises then of the relation betweentheir work and what has been proposed in this paper.At the very least, I hope to have shown that there islurking in this Unknown Elimination technique, anapproach not only to coordination, but also to quan-tifier scope ambiguity and non-peripheral extraction.The main difference between the decision procedurefor L (/'\'v) and that for L(/,\)+ Bool.Cut is that theUnknown Elimination technique isput to work on se-quents which do not arise from special purpose Cutrules, but simply by the elimination of categorial con-nectives from certainkinds of categories containingunknowns.
This introduces ome intricacies into theproof of completeness, which the observation con-cerning orderly proofs was used to deal with.As to the scope of the decision procedure, thisought to have a more general specification than thatwhich has been given here, though I have not yetfound it.
A plausible seeming idea is that thereshould be one positive and several negative occur-rences of a bound variable.
However, this includes acategory such as VX.s/(X/X), and a proof featuringthis category is not guaranteed to produce separateV ~ sequents.A direction for future research would be to in-vestigate the possibility of combining this approachto quantification, coordination and extraction withnon-categorial ccounts of other aspects of a lan-guage.
The idea would be to use such a non-categorial grammar as an extended axiom base.
Ifthis turned out to be feasible then we would have anattractively portable account of quantification, coor-dination and extraction.Re ferences\[Benthem, 1990\] Johan van Benthem.
CategorialGrammar meets unification.
In Unification for-malisms: syntax, semantics and implementation,J.Wedekind et al(eds.
).\[Emms, 1989\] Martin Emms.
Polymorphic Quanti-tiers.
In Proceedings of the Seventh AmsterdamColloquium, pages 139-163, Torenvliet, M. S.
L.(ed.
), Institute for Language, Logic and Informa-tion, Amsterdam, December 1989.\[Emms, 1991\] Martin Emms.
Polymorphic Quanti-tiers.
In Studies in Categoriai Grammar Barry, G.and Morrill, G.
(eds.)
, pages 65-112, Volume 5 ofWorking Papers in Cognitive Science, 1991, Edin-burgh, Centre for Cognitive Science.\[Emms, 1992\] Martin Emms.
Logical Ambiguity.PhD Thesis, Centre of Cognitive Science, Edin-burgh.\[Emms and Leiss, forthcoming\] Martin Emms andHans Leiss.
Cut Elimination for PolymorphicLambek Calculus.
CIS Technical Report, forth-coming.\[Gabbay, 1974\] Dov Gabbay.
Semantical Investiga-tions in Heyting's Intuitionistic Logic Dordrecht:Reidel.\[Girard, 1972\] :I. Y. Girard.
Interpreta-tion Fonctionelle t Elimination des Coupres deL'Arithmetique d'Order Superieur.
PhD Thesis.\[Hendriks, 1989\] Herman Hendriks.
Cut Eliminationand Semantics in Lambek Calculus Manuscriptavailable from University of Amsterdam.
To ap-pear in his PhD thesis 'Studied Flexibility'.\[Lambek, 1958\] Joachim Lambek.
The mathemat-ics of sentence structure.
American MathematicalMonthly, 65:154-170, 1958.\[Mey, 1992\] Daniel Mey.
Investigations on a Calcu-lus Without Contractions.
PhD Thesis, Swiss Fed-eral Institute of Technology, Zurich.\[Moortgat, 1988\] Michael Moortgat.
Categorial In-vestigations: Logical and Linguistic Aspects of theLambek Calculus.
Dordrecht: Forts Publications.\[Moortgat, 1989\] Michael Moortgat.
Unambiguousproof representations for the Lambek Calculus.In Proceedings of the Seventh Amsterdam Collo-quium, pages 389-401, Torenvliet, M. S. L.
(ed.
),Institute for Language, Logic and Information,Amsterdam, December 1989.\[Reynolds, 1974\] :I.C Reynolds.
Towards a theory oftype structure.
In Colloquium sur la programma-tion, 1974, pages 408-423.129
