The TELRI tool catalogue: structure and prospectsTomaz?
ErjavecDept.
of Intelligent SystemsInstitute ?Joz?ef Stefan?Jamova 39SI-1000 Ljubljana, Sloveniatomaz.erjavec@ijs.siTama?s Va?radiLinguistics InstituteHungarian Academy of SciencesP.O.Box 701/518Budapest H-1399, Hungaryvaradi@nytud.huAbstractIn the scope of the TELRI concertedaction a working group is investigat-ing the formation of a tool catalogueand repository.
The idea is similar tothat of the ACL Natural Language Soft-ware Registry, but the contents shouldbe mostly limited to corpus processingtools available free of cost for researchuse.
The catalogue should also offera help-line for installing and using thesoftware.
The paper reports on the set-up of this catalogue, and concentrateson the technical issues involved in itscreation, storage and display.
This in-volves the form interface on the Web,the XML DocBook encoding, and theXSL stylesheets used to present the cat-alogue either on the Web or in print.The paper lists the current entries in thecatalogue and discusses plans for theirexpansion and maintenance.1 IntroductionThe ?Trans-European Language Resources In-frastructure?, TELRI (http://www.telri.de/), is apan-European alliance of focal national language(technology) institutions with the emphasis onCentral and Eastern European and NIS countries.Some of the main objectives of TELRI is to col-lect, promote, and make available monolingualand multilingual language resources and toolsfor the extraction of language data and linguis-tic knowledge; to provide a forum where expertsfrom academia and industry share and assess toolsand resources; and to make available the expertiseof its partner institutions to the research commu-nity, to language industry and to the general pub-lic.A number of these goals is being servedby the ?TELRI Research Archive of Com-putational Tools and Resources?, TRACTOR,(http://www.tractor.de), which features monolin-gual, bilingual, and multilingual corpora and lex-ica in a wide variety of languages as well ascorpus- and lexicon-related software.
While theprimary aim is to pool the resources of TELRIpartners, TRACTOR also serves other institutionsby making the resources and tools available to thewider research and educational community.While the TRACTOR archives already offer anumber of tools, the longer term objective is tooffer a more substantial catalogue of corpus andlexicon processing software.
Furthermore, thesoftware itself is not necessarily available directlyfrom TRACTOR, which would also have a moreformalised structure and a well-defined processof updating and presenting its entries.
A closelyrelated initiative and model for this effort is the?The Natural Language Software Registry?
of theACL hosted at DFKI, a new edition of which wasreleased in 2000 (Declerck et al, 2000).
Whilethe ACL registry offers a much larger array oftools, the TELRI catalogue should have the ad-vantage that each entry also contains a pointer tothe TELRI member who is able to offer advice oninstalling and using the tool in question.Other related catalogues on the Webare the CTI?s Guide to Digital Resources(http://info.ox.ac.uk/ctitext/resguide/) which hasa section on Text Analysis Tools and Techniques.However, it does not seem to be maintained anylonger.The Summer Institute of Linguistics(http://www.sil.org/computing/catalog/) alsohosts a repository containing more than 60pieces of software developed at SIL.
Most of thesoftware is available for free download; the latestupdate to the pages comes spring 1999.A view on sharing resources, very muchbased on latest standardisation initiatives, hasbeen developed by the Open Language ArchivesCommunity, OLAC, (Bird and Simons, 2000),http://www.language-archives.org/.
OLAC is aninternational project to construct an infrastructureaimed at opening the whole array of language re-sources, including texts, recordings, lexicons, an-notations, software, protocols, models, and for-mats.
OLAC aims to develop community-specificmetadata to link language archives and establishcentralized catalogs.
It builds directly on twoother initiatives, namely the the Open ArchivesInitiative (developing and promoting interoper-ability standards for efficient dissemination ofcontent) and the Dublin Core Metadata Initia-tive (development of interoperable online meta-data standards).In the scope of the TELRI-II concerted action,a working group has been set up to design a cata-logue of corpus processing tools, and this paperreports on the preliminary results of the work-ing group.
The rest of the paper is structured asfollows: Section 2 gives the overall structure ofthe catalogue and its entries; Section 3 explainsthe pipeline for updating and displaying the cat-alogue, i.e.
the Web form interface for input, ed-itorial policy, and the stylesheet mechanism fordisplay; Section 4 lists the current contents of thecatalogue, while Section 5. gives some conclu-sions and outlines plans for its expansion and fur-ther maintenance.2 Catalogue FormatThe overall encoding chosen for the cataloguewas DocBook, an SGML/XML DTD primar-ily used for encoding computer manuals andother technical documentation.
Choosing anSGML/XML framework follows a similar strandof research in annotating linguistic resources, asexemplified in the XML version of the CorpusEncoding Standard (Nancy et al, 2000) and inwork on syntactic annotation (Nancy and Romary,2001).
An advantage of XML is the possibilityof further standardisation by the use of relatedrecommendations, i.e.
the XML Stylesheet Lan-guage.DocBook has a large user base and is welldocumented: a reference book has been pub-lished and is available on-line (Walsh, 1999)for browsing or downloading.
There is also aninteresting public initiative utilising DocBook,namely the Linux Documentation Project, LDP(http://www.linuxdoc.org/), which is working ondeveloping free, high quality documentation forthe GNU/Linux operating system.Because DocBook is an application of SGML,and, more recently, XML, many freely availabletools are available to process it.
Most importantly,this includes XSL processors, which can be usedto render DocBook documents in, say, HTML orPDF; this issue is further elaborated in Section 4.The complete catalogue is represented as one<book> element, with introductory matter in<bookinfo> giving the name, release informa-tion and some other general information aboutthe catalogue.
The catalogue is then divided (atpresent) into three <chapter> elements, eachgiving a a certain type of tools we plan to address: morpho-syntactic taggers concordancers alignersEach catalogue entry is contained in<sect1>, the top-level section element.The section, besides containing a <title>and being marked with an ID, is composed oftwo <sect2> elements.
The first gives theinformation that is common to all sorts of tools,while the second is tool-type specific.The information records are encoded as <for-malpara>, where each such element has a<title>, followed by the text of the of therecord as a <para>.
Various other DocBook el-ements are used to annotate pieces of informa-tion, e.g.
<address>, <affiliation> andsimilar details.
Table 1 gives as an example acomplete dummy catalogue entry, where variableparts are prefixed by ?this is?.<sect1 id="this_is_name_971886394"><title><productname>this is name</productname></title><sect2><title>Common part</title><formalpara><title>Task</title><para>this is task<indexterm><primary>this is task</primary></indexterm></para></formalpara><formalpara><title>Author(s)</title><para>this is author</para></formalpara><formalpara><title>Institute/Company</title><para><address><affiliation><orgname>this is affil</orgname></affiliation><street>this is street</street><city>this is city</city><country>this is country</country></address></para></formalpara><formalpara><title>Version</title><para>this is version</para></formalpara><formalpara><title>Interface</title><para>this is interface</para></formalpara><sect3><title>Implementation</title><formalpara><title>Platform</title><para><hardware>this is platform</hardware></para></formalpara><formalpara><title>Operating system</title><para><envar>this is os</envar></para></formalpara><formalpara><title>Language of implementation</title><para>this is impl</para></formalpara></sect3><sect3><title>License</title><formalpara><title>License conditions for research purposes</title><para>this is licres</para></formalpara><formalpara><title>License conditions for commercial purposes</title><para>this is liccom</para></formalpara><formalpara><title>Restrictions</title><para>this is restrict</para></formalpara></sect3><sect3><title>Distribution</title><formalpara><title>Availability of source code</title><para><ulink url="this is source_url">this is source_url</ulink></para></formalpara><formalpara><title>Download possibilities and formats</title><para><ulink url="this is binary_url">this is binary_url</ulink></para></formalpara></sect3><sect3><title>References</title><formalpara><title>Homepage</title><para><ulink url="this is homepage">this is home-page</ulink></para></formalpara><formalpara><title>Language of documentation</title><para>this is doc_lang</para></formalpara></sect3><sect3><title>TELRI helpline</title><para>this is helpline</para></sect3></sect2><sect2><title>Tool specific part</title><formalpara><title>Description</title><para>this is description</para></formalpara></sect2></sect1>Table 1: Example of entry in DocBook produced via the form interace3 Catalogue input and outputWhile the initial catalogue was input di-rectly with an SGML editor and then vali-dated, the envisioned additions will be per-formed via a Web form interface, available athttp://gnu.nytud.hu/telri/.
Figure 1 displays thetop part of the screenshot of the HTML form de-signed to collect the specification of descriptionof catalogue items.The definition of the particular informationsought about the software tools required someconsideration.
Obviously, we would like to haveas detailed a description of each item as possible.On the other hand, one has to bear in mind that theTELRI Catalogue will appeal for free voluntarycontributions.
Hence, the form should be maxi-mally easy to fill in with minimal effort in orderto avoid possibly deterring people from contribut-ing who might otherwise have done so.
The cru-cial factor to consider was to find the right balancebetween the set of required and optional items.
Inthe end, the required information fields were con-fined to the bare minimum of name, task, descrip-tion and TELRI helpline.
Table 2 displays the fulllist of questions used in the HTML form.The form interface runs a Perl CGI script,which mails the output, encoded as the above de-scribed DocBook <sect1> element, to the ed-itors of the catalogue.
After checking, fresh en-tries are included in the official release of the cat-alogue.The DocBook format is suitable for storageand interchange, but it is, of course, not appro-priate for displaying the information.
However,one of the benefits of using standardised solutionsis that conversion tools and specifications are, toa large extent, already available.
For presenta-tion, we have been so far experimenting with theXML Stylesheet Language, XSL, or, more pre-cisely, XSLT, the XSL Transformation Language,(W3C, 2000).
XSLT is a recommendation of theW3C and is a language for transforming XMLdocuments into other XML documents.
There al-ready exist several freely available XSLT proces-sors, e.g., Xalan (http://xml.apache.org/xalan/),produced by the Apache XML Project.XSLT is most often used to produce HTMLoutput for viewing on the Web, and so calledFormatted Objects, which are then furthertransformed into print formats, usually PDF.For DocBook XML there exist ready-madestylesheets for both kinds of output, made byNorman Walsh and available at on the Web(http://nwalsh.com/docbook/xsl/).
In the currentversion we have used these ?out of the box?
toolsto render the catalogue, although some slightmodifications would be in order to produce out-put better tailored to the catalogue application.Figure 2 contains a sample HTML output ofone item in the Catalogue.In summary, Figure 3 gives a graphicaloverview of the data processing of the TELRICatalogue items.4 Catalogue ContentsThe catalogue currently contains only a few sam-ple entries, which, nevertheless, exemplify thekinds of software that are to be most relevant forinclusion into the catalogue: tools that at least one TELRI partner has ex-perience in using and that the partner is will-ing to support for new users tools that are available free of cost, at leastfor academic purposes and, preferably, areopen source tools that are language independent or adapteasily to new languages tools that are primarily meant for corpus pro-cessingAt present, the catalogue lists the followingtools: The morpho-syntactic tagger TnT (Brants,2000)A robust and very efficient statistical part-of-speech tagger that is trainable on differ-ent languages and on virtually any tagset.
Itis available by a license agreement which isfree of charge for non-commercial purposes.Distribution is available, in binaries only, forLinux and SunOS/Solaris.Figure 1: The TELRI Catalogue HTML form*name = Name of product*task = Task of productauthor = Name(s) of author(s)affiliation = Name of companystreet = Address of companycitycountryversion = Version numberlanguage = Language(s)*descriptionlicres = License conditions for research purposesliccom = License conditions for commercial purposesrestrict = License restrictionssource url = URL of source codebinary url = URL of binary filesplatform = Supported hardwareos = Supperted operating system(s)impl = Language of implementationinterface = User interfacehomepage = URL of homepagedoc url = URL of documentationdoc lang = Language of documentation*helpline = TELRI helplineTable 2: Full list of fields of the Catalogue HTML formFigure 2: A sample output page of one Catalogue itemuser input User?readableformats:html, pdf etc.DocBookXMLPerl/CGI XSLTHTML?formFigure 3: Overview of the catalogue data processing The IMS Corpus Workbench concordancer(Christ, 1994)Comprises a powerful Corpus Query Proces-sor and a graphical user interface.
It is avail-able by a license agreement which is free ofcharge for non-commercial purposes.
Distri-bution, in binary form only, is available forLinux and SunOS/Solaris. The Vanilla sentence aligner (Danielssonand Ridings, 1997)A simple but useful program that alignsa parallel corpus by comparing sentencelengths in characters by dynamic time-warping.
The program assumes that hardboundaries are correctly aligned and per-forms alignment on soft boundaries.
It isfreely available with C source code distribu-tion. The Twente Word Aligner (Hiemstra, 1998)The program constructs a bilingual lexiconfrom a parallel sentence aligned corpus.
Thetranslations are ranked according to com-puted confidence.
The system uses statisti-cal measures and works for single words (to-kens) only.
It is available under the GNUGeneral Public License and is written in C. PLUG Word Aligner (Ahrenberg et al,1998)The system integrates a set of modules forknowledge-lite approaches to word align-ment, with various possibilities to changeconfiguration and to adapt the system toother language pairs and text types.
Thesystem takes a parallel sentence aligned cor-pus as input and produces a list of word andphrase correspondences in the text (link in-stances) and additionally a bilingual lexiconfrom these instances (type links).
It is avail-able by a license agreement which is free ofcharge for non-commercial purposes.
Distri-bution is available, in binary form only, forLinux and MS Windows.5 ConclusionsThe paper reported on the set-up of the TELRIcorpus-tool catalogue, concentrating on the tech-nical issues involved in its creation (form inter-face), storage (DocBook) and display (XSLT).
Atpresent, the input form is operational and the cata-logue contains a few sample entries and has a pre-liminary (default) rendering of its contents.
Thecurrent version of the catalogue and templates isavailable at http://nl.ijs.si/telri/In the future, we hope to flesh out the cat-alogue with more tools, and enlist the servicesof TELRI experts in providing user support forthem.
The catalogue will, where license permits,also archive a copy of the software, and will con-tinue with a proactive adoption of the GNU li-cense and open standards.The open (non-profit) nature of the tools weattempt to identify lends them well for pedago-cial purposes at the graduate and undergraduatecourses in natural language processing, corpuslinguistics and language engineering.The tool catalogue, as well as TRACTOR,could also be made a part of the Open LanguageArchives Community mentioned in the introduc-tion.
To join OLAC a number of changes andmappings would have to be defined, say from theon-line form onto Dublin Core and the OLACMetadata Set.
The choices currently listed in thetemplate could also be changed into a controlledvocabulary to facilitate searching.The process of catalogue updates is currentlymanual.
To automate the production of the on-line version of the catalogue directly from newform entries would be relatively easy, given suf-ficient volume to justify this.
More challeng-ing would be (semi)automatic tracking of newtools that become available via various (OLAC)archives and announcements.AcknowledgementsThe authors would like to thank Inguna Greitanefor her exposition of the catalogue structure vo-cabulary, Laurent Romary for his invaluable assis-tance with everything XSLT; and Victor Nagy forhis technical assistance in preparing the HTMLform and the CGI script.Thanks also to the anonymous reviewers fortheir valuable comments on the previous versionof the paper; for all remaining errors, only the au-thors are to blame.The work report here was supported by theCopernicus TELRI-II concerted action.ReferencesLars Ahrenberg, Mikael Andersson, and MagnusMerkel.
1998.
A simple hybrid aligner for gener-ating lexical correspondences in parallell texts.
InCOLING/ACL.Steven Bird and Gary Simons.
2000.
Open languagearchives community.
ElsNews, 9(4).Thorsten Brants.
2000.
Tnt - a statistical part-of-speech tagger.
In Proceedings of the SixthApplied Natural Language Processing ConferenceANLP-2000, Seattle, WA.
http://www.coli.uni-sb.de/?thorsten/tnt/.Oliver Christ.
1994.
A modular and flexible archi-tecture for an integrated corpus query system.
InProceedings of COMPLEX ?94: 3rd Conferenceon Computational Lexicography and Text Research,Budapest, Hungary.
CMP-LG archive id 9408005.Pernilla Danielsson and Daniel Ridings.
1997.
Prac-tical presentation of a ?vanilla?
aligner.
In Pre-sented at the TELRI Workshop on Alignment andExploitation of Texts.
Institute Joz?ef Stefan, Ljubl-jana.
http://nl.ijs.si/telri/Vanilla/doc/ljubljana/.Thierry Declerck, Alexander Werner Jachmann, andHans Uszkoreit.
2000.
The new edition of thenatural language software registry (an initiativeof acl hosted at dfki).
In Second InternationalConference on Language Resources and Evalua-tion, LREC?00, pages 1129?1132.
Paris.
ELRA.http://registry.dfki.de/.Djoerd Hiemstra.
1998.
Multilingual domain mod-eling in Twenty-One: automatic creation of a bi-directoral translation lexicon from a parallel cor-pus.
In Proceedings Computational Linguistics inthe Nederlands, pages 41?57.
Nijmegen.Ide Nancy and Laurent Romary.
2001.
A Com-mon Framework for Syntactic Annotation.
In ACL,Toulouse.Ide Nancy, Laurent Romary, and Patrice Bonhomme.2000.
CES/XML : An XML-based Standard forLinguistic Corpora.
In Second International Con-ference on Language Resources and Evaluation,LREC?00, pages 825?830.
Paris.
ELRA.W3C.
2000.
Extensible stylesheet language (XSL)version 1.0.
URL.
http://www.w3.org/TR/xsl.Norman Walsh.
1999.
DocBook: The Defini-tive Guide.
O?Reilly & Associates, Inc.http://docbook.org/.
