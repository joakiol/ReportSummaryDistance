Coordination in Tree Adjoining Grammars:Formalization and Implementation*Anoop Sarkar and Aravind JoshiDepartment of Computer and Information ScienceUniversity of PennsylvaniaPhiladelphia, PA 19104{ anoop, j oshi }Olinc.
cis.
upenn, eduAbst rac tIn this paper we show that an accountfor coordination can be constructed us-ing the derivation structures in a lexical-ized Tree Adjoining Grammar (LTAG).We present a notion of derivation inLTAGs that preserves the notion offixed constituency in the LTAG lexiconwhile providing the flexibility neededfor coordination phenomena.
We alsodiscuss the construction of a practi-cal parser for LTAGs that can han-dle coordination including cases of non-constituent coordination.1 IntroductionLexicMized Tree Adjoining Grammars (LTAG)and Combinatory Categorial Grammar (CCG)(Steedman, 1997) are known to be weakly equiv-alent but not strongly equivalent.
Coordinationschema have a natural description in CCG, whilethese schema have no natural equivalent in a stan-dard LTAG.In (Joshi and Schabes, 1991) it was shown thatin principle it is possible to construct a CCG-like account for coordination in the framework ofLTAGs, but there was no clear notion of what thederivation structure would look like.
In this pa-per, continuing the work of (Joshi and Schabes,1991), we show that an account for coordinationcan be constructed using the derivation structuresin an LTAG.Using the notions given in this paper we alsodiscuss the construction of practical parser forLTAGs that can handle coordination includingcases of non-constituent coordination.
This ap-proach has been implemented in the XTAG sys-tem (XTAG Research Group, 1995) thus extend-*This work is partially supported by NSF grantNSF-STC SBR 8920230.
ARPA grant N00014-94 andARO grant DAAH04-94-G0426.
We want to thankNobo Komagata, Seth Kulick, Jong Park, JamesRogers, B. Srinivas, Mark Steedman, and two anony-mous reviewers for their valuable comments.ing it to handle coordination.
This is the firstfull implementation of coordination in the LTAGframework.2 LTAGAn LTAG is a set of trees (elementary lrees) whichhave at least one terminal symbol on its frontiercalled the anchor.
Each node in the tree has aunique address obtained by applying a Gorn treeaddressing scheme, shown in the tree ol(cooked)(Fig.
1).
qYees can be rewritten using snbstitn-tion and adjunction.
A history of these operationson elementary trees in the form of a derivationtree can be used to reconstruct the derivation of astring recognized by a LTAG.
In Fig.
1, the treefl(dried) adjoins into ~(beans) and trees ~(John)and a(beans) substitutes into a(cooked) to give aderivation tree for John cooked ried beans.
Eachnode in the derivation tree is the name of an ele-mentary tree.
The labels on the edges denote theaddress in the parent node where a substitutionor adjunction has occured.TAG G: a (cooked) o~ (J{}hn) o~(beans) fi (dried)o S NP NPADJ N* 1 P I.I I P~ John beans driedcfx)kc(I / /2~NP ~P a(c00ked) \] / ~V NPI / / /~  '2 j t ,hnc /mked~a(John) a(beans)I I ADJ ~q\[~(dried) I dried beansDerivatit,n Tree Derived TreeFigure 1: Example of an LTAG and an LTAGderivation3 Trees as S t ruc tured  Categor iesIn (Joshi and Schabes, 1991) elementary trees aswell as derived trees in an LTAG were consideredas structured categories defined as a 3-tuple of anelementary or derived tree, the string it spanned610and the fnnctional type of the tree, e.g (cq, ll, Vl)in Fig.
2.
Functional types for trees could bethought of us defining un-Curried flmctions co lrcsponding to the Curried CCG counterpart.
Afimctional type was given to sequences of lexicalitems in trees even when they were not contiguous;i.e.
discontinuous constituents were also assignedtypes.
They were, however, barred from coordi-nating.Ol SNP~ VPV NPL Ieats cook ies11 eats cook ies"~1 NP  --'~" SFigure 2: Structured Category for cats cookiesCoordination of two structured categoriescq,a2 succeeded if tile lexieai strings of bothcategories were contiguous, the functional typeswere identical, and the least nodes dominating tilestrings spanned by the component tree have thesame label.
For example, in Fig.
3 the tree corre-sponding to eats cookies and drinks beer would beobtained by:\].
equating the NP nodes I in cq and t72, pre-serving the linear precedence of the argu-ments.2.
coordinating the VP nodes, which are theleast nodes dominating tile two contiguousstrings.3.
collapsing the supertrees above the VP node.4.
selecting the leftmost NP as the lexical sitefor the argument, since precedence with theverb is maintained by this choice.o l  vP  o2  s NP~VALV NP V NP ~ andI 1 : eals c(~)kies 12: d lil|~; beer eals ?l)okiea drinks I:ccr1:1 : NP ~ S 't2: NP ~ ,'q I: cats co~lkics altd drinks beerI :NP ----:~" SFigure 3: Coordination of eats cookies and drinksbeerThe process of coordination built a new de-rived structure given previously built pieces of1This notion of sharing should not be confilscdwith a deletion type an;dysis of coordination.
Thescheme presented in (Joshi attd Schabes, 1991) as well~*s the analysis presented in this paper are not deletionanalyses.derived structure (or perhaps elementary struc-tures).
There is no clear notion of a derivationstructure for this process.4 Coord inat ion  in TAGAn account for coordination in a standard LTAGcannot be given without introducing a notion ofsharing of arguments in tile two lexically anchoredtrees because of the not;ion of localily of argurnentsin I?FAG.
In (1) for instance, the NP the beans inI;he "right node raising" construction has to bcshared by the two eleinentary trees (anchored bycooked and ate respectively).
(l) (((Harry cooked) and (Mary ate)) thebeans)We introduce a notation that will enable us totalk about this more formally.
In Fi R. 1 the no-tation ~ denotes that a node is a non-terminaland hence expects a substitution operation to oc~cur.
The notation , marks tile foot node of anauxiliary tree.
Making this explicit we c~m viewan elementary tree as a ordered pair of the treestructure ~n(l a ordered set 2 of such nodes fi'omits frontier 3, e.g.
the tree for cooked will be rep-resented ~s (~(cooked), {\],2.2}}.
Note that thisrepresentation is not required by the LTAG for-malism.
The second projection of this orderedpair is used here for ease of explication.
Let thesecond projection of the pair minus the foot nodesbe (;he substitution set.
We will occasionally usethe first projection of the elementary tree to referto the ordered pair.Setting up Contractions.
We introduce an op-eration called build-contraction that takes an ele-mentary tree, places a subset from its second pro-jection into a contraction set and assigns the dif-ference of the set in the second projection of theoriginal elementary trec and the contraction set tothe second projection of the new elementary tree.The contents of the contraction set of a tree can beinferred from the contents of the set in the secondprojection of the elementary tree.
Hence, whilewe refer to the contraction set of an elementarytree, it does not have to bc stored along with itsrepresentation.Fig.
4 gives some examples; each node in thecontraction set is circled in the figure.
In the tree(a(cooked), {1,2.2}) application of the operationon the NP node at address 2.2 gives us a tree withthe contraction set {2.2}.
The new tree is de-noted by {a(eookcd){u.2}, {1}), or o~(cooked)D.2 }for short.
Placing the NP nodes at addresses 1and 2.2 of the tree a(cooked) into the contractionset gives us a(cooked)tl,2~ ).2'Fhc ordering is given by the fact that the elementsof the set ~re Gorn ~tddresses.3We sh~ll assume there are no adjunction con-straints in this paper.611a(eooked) S a(cexlked) S I~Jj-.... I~ .
.sP~ vp ~ wI Icooked c(mkcdFigure 4: Building contraction setsWe assume ~hat the anchor cannot be involvedin a build-contraction.
This assumption needsto be revised when gapping is considered in thisframework (?5).The Coordination Schema.
We use the stan-dard notion of coordination shown in Fig.
5 whichmaps two constituents of like type, but with differ-ent interpretations, into a constituent of the sametype 4.X Cnlq XFigure 5: Coordination schemaWe add a new rewriting operation to the LTAGformalism called conjoin 5.
While substitution andadjunction take two trees to give a derived tree,conjoin takes three trees and composes them togive a derived tree.
One of the trees is always thetree obtained by specializing the schema in Fig.
5for a particular category 6.Informally, the conjoin operation works as fol-lows: The two trees being coordinated are sub-stituted into the conjunction tree.
This no-tion of substitution differs from the traditionalLTAG substitution operation in the followingway: In LTAG substitution, always the rootnode of the tree being substituted is identifiedwith the substitution site.
In the conjoin op-eration however, the node substituting into theconjunction tree is given by an algorithm, whichwe shall call FindRoot that takes into accountthe contraction sets of the two trees.
Find-Root returns the lowest node that dominates allnodes in the substitution set of the elementarytree 7, e.g.
FindRoot(a(cooked){2.2}) will re-turn the root node, i.e.
corresponding to the S4In this paper, we do not consider coordination ofunlike categories, e.g.
Pat is a Republican and proudof it.
(Sarkar and Joshi, 1996) discusses uch cases,following Jorgensen and Abeill6 (1992).SLater we will discuss an alternative which replacesthis operation by the traditional operations of substi-tution and adjunction.6The tree obtained will be a lexicalized tree, withthe lexical anchor as the conjunction: and, but, etc.7This ensures the node picked by FindRoot alwaysdominates a contiguous tring in a derivation.
Thiscaptures the string contiguity condition that was usedconj S instantiation of the coordination schema.FindRoot(c~(eooked){1,2.2}) will return node ad-dress 2.1, corresponding to the V conj Vinstanti-ation.The conjoin operation then creates a contrac-tion between nodes in the contraction sets of thetrees being coordinated.
The term contraction istaken from the graph-theoretic notion of edge con-traction.
In a graph, when an edge joining twovertices is contracted, the nodes are merged andthe new vertex retains edges to the union of theneighbors of the merged vertices s. The conjoinoperation supplies a new edge between each cor-responding node in the contraction set and thencontracts that edge.
As a constraint on the ap-plication of the conjoin operation, the contractionsets of the two trees must be identical.Another way of viewing the conjoin operationis as the construction of an auxiliary structurefi'om an elementary tree.
For example, from theelementary tree (a(drinks), {1, 2.2}), the conjoinoperation would create the auxiliary structure(fl(drinks){1}, {2.2}) shown in Fig.
6.
The ad-junction operation would now be responsible forcreating contractions between nodes in the con-traction sets of the two trees supplied to it.
Suchan approach is attractive for two reasons.
First,it uses only the traditional operations of substitu-tion and adjnnction.
Secondly, it treats conj X asa kind of "modifier" on the left conjunct X. Wedo not choose between the two representations butcontinue to view the conjoin operation as a partof our formalism.SV NP~IdnnL~Figure 6: Coordination as adjunction.For example, applying conjoin to the treesConj(and), a(eats){1} and c~(drinks){l} gives ustile derivation tree and derived structure for theconstituent in (2) shown in Fig.
7.
(2) .
.
.
eats cookies and drinks beer.In Fig.
7 the nodes (~(eats){1} and a(drinks)\[llsignify an operation left incomplete at address 1.in (Joshi and Schabes, 1991).
A coordinated node willnever dominate multiple foot nodes.
Such a case oc-curs, e.g., two auxiliary trees with substitution odesat the same tree address are coordinated with only thesubstitution odes in the contraction set.SMerging in the graph-theoretic definition of con-traction involves the identification of two previouslydistinct nodes.
In the process of contraction overnodes in elementary trees it is the operation on thatnode (either substitution or adjunction) that is iden-tified.612Conj(~ml) VI' S Sv ,  .
.
.
.
.cot,i(,,,,+ \[ I I Icals el'tiMes drinks b~roc (cats) { I } a (drinks) Derived structure2.21 /2.2 {I,(cookies) a (beer)Derivation treeFigure 7: An example of the conjoin operation.The Effects of Contraction.
One of the effects ofcontraction is that; the notion of a derivation treefor the 12FAG formalism has to be extended to anacyclic derivation graph 9.
Simultaneous substitu-tion or adjunction modifies a derivation tree intoa graph as can be seen in Fig.
8.If a contracted node in a tree (after the conjoinoperation) is a substitution ode, then the argu-ment is recorded as a substitution into the two el-ementary trees ms for example in the sentences (3)and (4).
(3) Chapman eats cookies and drinks beer.
(4) Keats steals and Chapman eats apples.Fig.
8 contains the derivation and derived struc-tures for (3) and Fig.
9 for (4).
In Fig.
9 the d(,riw~-tion graph for sentence (4) accounts \['or the coor-dinations of the traditionM nonconstituent "Keatssteals" by carrying out the coordination at theroot, i.e.
S conj S. No constituent correspondingto "Keats steals" is created in the process of co-ordination.1) S VP Se~(eats)ll I ot(tlrinks)ll I NP VP andLc~(cnokies) 0I(Chapman) or(beer) Chapman V NP V NPi I I \[eats cookies drinks beerDgl+ivation ,,itrtlt~tufc, Derivezl slitlcttlreFigure 8: Derivation for Chapman eats cookiesand drinks beer.The derived structures in Figs.
8 and 9 arediff, cult to reconcile with traditional notions ofphrase structure 1?.
However, the derivation struc-ture gives us all the information about dependency?We shall use the general notation derivation struc-ture to refer to both derivation trees and derivationgraphs.t?McCawley (1982) rMsed the heterodox view thata discontinuous constituent structure should be givenfor right node raising cases, having the same notion ofconstituency as our approach.
IIowever, no conditionson the construction of such a structm'e was given.
Infact, his mechanism also covered cases of parentheticalplacement, scrambling, relative clause extrapositionColj(;md) S ~ Su(Keats) a(applcs) (y~Chapman) Keats V Chapmanv NPI I IsteMs eats applesDerivation structule Derived structureFigure 9: Derivation for Keats steals and Chap-man eats apples.that we need about the constituents.
The deriva-tion encodes exactly how particular elementarytrees are put together.
Obtaining a tree struc-ture fi:om a derived structure built by the conjoinoperation is discussed in (Sarkar and Joshi, 1996).Considerations of the locality of movement phe-nomena and its representation i the LTAG tbr-realism (Kroch and Joshi, 1986) can also now ex-pkdn constraints on coordinate structure, such asacross-the-board exceptions to the well known co-ordinate structure constraint, see Fig.
10.
Alsoin eases of unbounded right node raising such asKeats likes and Chapman thinks Mary likes beans,Chapman thinks simply adjoins into the right con-junct of the coordinate structure 11.Elelnenlary fleesNPV NPI IlikcdBtaicd EiSS alld SCoin p S*whh:hI)eriw~ticm Stnlcture0~(caoke,l)t / / /~2 Colj(and)I:)'.
(Mary) a(bcans) ~ ni'(\]~(Keats) eL(Chapman)Derived s\[i\]lctllre i ?
\](hunp S* *NI' VP NP x NP whichcooked thebcans Keatsliked andChapmanhatedFigurc 10: Derivation tbr Mary cooked the beanswhich Keats liked and Chapman hated.5 Cont ract ions  on  AnchorsAn LTAG along with the operations of substitu-tion and adjnnction also has tile implicit opera-tion of lexical insertion (represented as the dia-mond mark in Fig.
11).
Under this view, theand heavy NP shift.11A eomparision of this paper's approach with thederivational machinery in CCG and the devices of 3-Dcoordination is done in (Sarkar and Joshi, 1996).613LTAG trees are taken to be templates.
For ex-ample, the tree in Fig.
11 is now represented as<~(eat), {1, 2.1, 2.2\]).a(eats)SNP~ VPV O NP~teatsFigure 11: Lexicalization in a LTAG.If we extend the notion of contraction in theconjoin operation together with the operation oflexical insertion we have the following observa-tions: The two trees to be used by the conjoin op-eration are no longer strictly lexicalized as the la-bel associated with the diamond mark is a preter-minal.
Previous uses of conjoin applied to two dis-tinct trees.
If the lexicalization operation is to ap-ply simultaneously, the same anchor projects twoelementary trees from the lexicon.
The process ofcontraction ensures that the anchor is placed intoa pair of LTAG tree templates with a single lexicalinsertion.Gapping.
Using this extension to conjoin, wecan handle sentences that have the "gapping" con-struction like sentence (5).
(5) John ate bananas and Bill strawberries.The conjoin operation applies to copies of thesame elementary tree when the lexical anchor isin the contraction set.
For example, let o~(eats)be the tree selected by cats.
The coordination ofo~(cats){2.l} with a copy of itself and the subse-quent derivation tree is depicted in Fig.
1212 .S Conj(and)S and 5 1 ~~ c~(cat-s){ 2.1} a(cats){2.1 }V. N.+ NP+eats Nr~IeatsFigure 12: Handling the gapping construction us-ing contractions.An extension of the approach here will be topermit the conjoin operation to create contrac-tions on all the nodes in contraction sets that ita2In English, following Ross (1970), the anchor goesto the left conjunct.dominates during a derivation, allowing us to rec-ognize cases of gapping such as: John wants Pennto win and Bill, Princeton.
and John wants to tryto see Mary and Bill, Susan.Coordinating Ditransitive verbs.
In sentence (6)if we take the position that the string Mary a bookis not a constituent (i.e.
give has a structure as inFig.
13), then we can use the notion of contractionover the anchor of a tree to derive the sentencein (6).
The structure we derive is shown in Fig.
14.
(6) John gave Mary a book and Susan af l ower .SNP~V NP~, NP~ rgaveFigure 13: Tree for a ditransitive verb in LTAG.S VP SNP VP .
VPJohn V NP NP NP NPI I I P rgave Mary a book Siisan a flowerFigure 14: Derived tree for John gave Mary a bookand Susan a flower.Interactions.
Permitting contractions on mul-tiple substitution and adjunction sites along withcontractions on the anchor allow the derivation ofsluicing structures such as (7) (where the conjunctBill too can be interpreted as \[John loves\] Bill tooor as Bill \[loves Mary\] too 13.
(7) John loves Mary and Bill too.6 Pars ing  I ssuesThis section discusses parsing issues that arisein the modified TAG formalism that we havepresented.
We do not discuss general issuesin parsing TAGs, rather we give the appropri-ate modifications that are needed to the existingEarley-type parsing algorithm for TAGs due toSchabes and Joshi (1988).The algorithm relies on a tree traversal thatscans the input string from left to right while rec-ognizing the application of the conjoin operation.The nodes in the elementary trees are visited in atop-down left to right manner (Fig.
15).
F, ach dotin Fig.
15 divides the tree into a left context and a13Whether this should be derived syntactically iscontroversial, for example, see (Steedman, 1990).614right context, enabling the algorithm to scan theelementary tree while trying to recognize possibleapplications of the conjoin operation.S 4" B ??
a. , 'A ,(7Figure 15: Example of a tree traversal3'he derived structure corresponding to a coor-dination is a compositc structure built by apply-ing the conjoin operation to two elementary treesand an instantiation of the coordination schema.The algorithm never builds derived structures.
Itbuilds the derivation by visiting the appropriate,,()des during its tree traversal it, the following or-der (see Fig.
16).I 2 .
- .3  d .
.
.5  6 .
.
.2 '  7 ' .
.
. '
(  4 ' .
.
.5 /  6 I .
- .78The algorithm must also compute the correctspan of the string for the nodes that have beenidentified via a contraction.
Fig.
16 gives thepossible scenarios tbr the position of nodes thathave been linked by a contraction.
Whet, lootnodes undergo contraction, the algorithm has toensure that both the foo~ nodes share the sub-tree pushed under them, e.g.
9. ?
?
10 and 9 ~.
?
?
10 ~in l,'ig.
16(a).
Similarly, when substitution odesundergo contraction, the algorithm has to ensurethat the tree recognized ile by pr('.dicting a sub-stitution is shared by the nodcs, e.g.
11 ?
?
?
12 andl l ' .
.
.
12' in Figs.
16(b) and 16(c).
'1'he traversals9 ... 10 should st)an the same length of the intro,as 9 ' .
.
.10 ' ,  similarly for 11.. .
12 and 11' .
.
.12' .Various positions for such traversals is shown inFig.
116.
A derivation is valid if the input stringis accepted and each i, ode in a contraction sl)ansa valid subs,ring in the inI)ut.
'rite completeand formal (leseription of the l)arsing algorithmis given in (Sarkar and Joshi, 1996).7 Conc lus ionWe have shown thai; an acconnL tbr coordinationcan be given in a I/I.
'AG while maintaining the no-tion of a derivation strncture which is central tothe L'I'A(:I approa(-h. We showed that tixed con-stituen(-y can be maintained at the level of theelementary tree while accounting for cases of non-constituent coordination and gapping.
We dis-cussed the construction of a practical parser for\];I'AG that can handle these (-ases of coordina-tion.xoXo- - (2 ' ) '(a) A A(3 )~(6)  (3~(6 ' )(9) ~ ~(10) (9') (10') tX does nil, dotninale A ~(b) (3~.X ~(6) (3~o X o~6,)(11)?
~(12) ( I r~  ~(12')(c)Figure 16: Moving the dot while recognizing aconjoin operationReferencesJorgensen, 1I.
and A. Abeiild.
1992.
Coordination of"Unlike" (httegories in TAG.
In \]~roceedings of the2nd 7'AG Workshop, Philadelphia, PA.Joshi, Aravind and Yves Schabes.
1991.
Fixed andtlexible phrase structnre: Coordination i  Tree Ad-joining Grammar.
Presented at tile DARPA Work-shop on Spoken Language Systems.
Asilomar, CA.Kroch, A. and A. K. Joshi.
1986.
AnMyzing extrapo-sition in a tree adjoining gnmm, ar.
In G. lluck andA.
Ojeda, editors, Syntax and Semantics: l)iscon-tinuous Constituents.
Academic Press, New York.McCawley, James.
1982.
ParcnthcticMs and discomtinuous constituent structure.
Linguistic Inquiry,13(1):91-106.Ross, John.
1970.
Gapping and the order of con-stituents.
In M. Bicrwisch and K. Iieidolph, edi-tors, l'rogress in Linguistics.
Mouton, The Iiague.Sark~r, Anoop and Aravind Joshi.
:1996.
IIandlingCoordination i  a Tree Adjoining Gramma.r.
'\['ech--nicM report, Dept.
of Computer a.nd Info.
Sc., Univ.of Pennsylwtnia, Philadelphia, PA.Schabes, Yves and Aravind K. Joshi.
71988.
AnF, arley~type parsing algorithm for tree adjoininggrammars.
In 26th Meeting of the Association forComputational Linguistics, Buffalo, NY.Steedman, Mark.
1990.
Gapping as constituent cooldination.
Linguistics and Philosophy, 13:207 264.Steedln~n, Mark.
1997.
Surface Structure and inter-prctatiou: Unbounded and Bounded Dependency inCombinatory Grammar.
I,inguistic Inquiry monograph (to ~q~pear).
M\]T Press.XTAG Research Group.
1995.
A Lexicalized 'FreeAdjoining Grammar for F, nglish.
Technical report,IRCS Tech Rpt.
95-.03, University of Pennsylvania,Philadelphia, PA.615
