AN EFFICIENT CONTEXT-FREE PARSERFOR AUGMENTED PHRASE-STRUCTURE GRAMMARSMassimo Marino*, Antonella Spiezio, Giacomo Ferrari*, Irina Prodanof+*Linguistics Department, University of Pisa,Via S. Maria 36, 1-56100 Pisa - Italy+ Computational Linguistics Institute - CnrVia Della Faggiola 32, 1-56100 Pisa -ItalyABSTRACTIn this paper we present an efficientcontext-free (CF) bottom-up, non deterministicparser.
It is an extension of the ICA (ImmediateConstituent Analysis) parser proposed byGrishman (1976), and its major improvementsare described.It has been designed to run AugmentedPhrase-Structure Grammars (APSG) andperforms semantic interpretation in parallelwith syntactic analysis.It has been implemented in Franz Lisp andruns on VAX 11/780 and, recently, also on aSUN workstation, as the main component of atransportable Natural Language Interface (SAIL= Sistema per I'Analisi e I'lnterpretazione delLinguaggio).
Subsets of grammars of italianwritten in different formalisms and fordifferent applications have been experimentedwith SAIL.
In particular, a toy application hasbeen developed in which SAIL has been used asinterface to build a knowledge base in MRS(Genesereth et al 1980, Genesereth 1981)about ski paths in a ski environment, and to askfor advice about the best touristic path underspecific weather and physical conditions.1.
INTRODUCTIONMany parsers for natural language havebeen developed in the past, which run differenttypes of grammars.
Among them, the mostsuccessful are the CF grammars, theaugmented phrase-structure grammars(APSGs), and the semantic grammars.
All ofthem have different characteristics anddifferent advantages.
In particular APSGs offera natural tool for the treatment of certainnatural language phenomena, such as subject-verb agreement.
Semantic grammars are proneto a compositional algorithm for semanticinterpretation.The aim of our work is to implement aparser which associates the full extension ofan APSG to compositionality of semantics.
Theparser relies on the well stabilized ICAalgorithm.
This association allows a wide rangeof applications in syntactic/semantic analysestogether with the efficiency of a CF parser.2.
Funct ional  descr ipt ion of thepars ing a lgor i thmThe parsing algorithm consists of thefollowing modules:- a preprocessor;- a parser itself;- a post-processor and interpreter;and interacts with:- a dictionary, which is used by thepreprocessor;- the grammar, used by the parser.Figure 1 shows the structure of the system wehave designed.
Some of the modules, such asthe spelling corrector, the robustenesscomponent, and the NL answer generator, arestill being developed.2.1.
The dictionaryThe dictionary contains the 'word-forms',known to the interface, with the followingassociated information, called 'interpretation':- syntactic category;- semantic value;- syntactic features as gender, number, etc.
;A form can be single (a single word) ormultiple (more than one word).
Multiple formsare frequent in natural language and are ingeneral referred to as 'idioms'.
However, insemantic grammars, the use of multiple wordsis wider than in syntactic ones as also somesimpler phrases may be more convenientlytreated in the dictionary.
This is the reasonwhy multiple forms are treated by specificalgorithms which optimize storage and search.196The description of this algorithm is not the aimof this paper.Figure 2 shows an example of such adictionary, which contains the single formsche (that as conjunction), e' (is), noto(well-known) and the multiple forms e' noto(it's well-known) and e' noto che (it'swell-known that).
The mark EOW indicatesa final state in the interpretation of the formcurrently being scanned.2.2.
The grammarThe grammar is a set of complexgrammatical statements (CGS), represented inBNF as follows:CGS::=<RULE> <EXPRESSION><RULE> ::.<PRODUCTION> <TESTS> <ACTIONS><PRODUCTION>::=<LEFT-SYMBOL><RIGHT-PATTERN><LEFT-SYMBOL>::- a non terminal symbol<RIGHT-PATTERN>::= a sequence of categories<TESTS>::= a whatever predicate<ACTIONS>::- a whatever action<EXPRESSION>::= a semantic interpretation inany chosen formalismAs we have already stated, the<PRODUCTION>'s can be instantiated both withsyntactic and with semantic grammars.
Theschema of the rule and the order of theoperations are fixed, regardless of the choseninstance grammar.<TESTS> are evaluated before the applicationof a rule and can inhibit it if they fail.<ACTIONS> are activated after the applicationof a rule and perform additional structuring andstructure moving.
Both participate into aprocess of syntactic recognition and are to beconsidered as the syntactic augmentation of therules.
When using a semantic grammar the<ACTIONS> are, in general, not used.<EXPRESSION>'s are the semantic augmentationand specify the interpretation of the sentence,for top level rules, or (partial) constituents,for the other rules.
These two augmentationsimprove the syntactic power of the grammar,by adding context sensitiveness, and add asemantic relevance to the structuring ofconstituents, due to the one-to-onecorrespondence between syntactic andsemantic rules.The set of rules of a grammar is partitionedinto packets of rules sharing the samerightmost symbol of the <RIGHT-PATTERN> ofproductions.
This partitioning makes theirapplication a semi-deterministic process, asonly a restricted set of them is tried, and noother choice is given.2.3.
The preprocessorThe preprocessor scans the sentence fromleft to right, performs the dictionary look-upfor each word in the input string, and returns astructure with the syntactic and semanticinformation taken from the dictionary.
At theend of the scanning the input string has beentransformed into a sequence of such lexicalinterpretations.
The look-up takes into accountalso the possibility that a word in input is partof a multiple form.2.4.
The parserThe parser is an extension of the ICAalgorithm (Grishman 1976).
It shares with ICAthe following characteristics:it performs the syntactic recognitionbottorfi-up, left-to-right, first selectingreduction sets by an integrated breadth anddepth-first strategy.
It does not rejectsentences on a syntactic basis, but it onlyrejects rule by rule for a given input word.
Ifall the rules have been rejected with nosuccess, the next word in the preprocessedstring is read and the loop continues.Termination occurs in a natural way, whenno more rule can be applied and the input stringhas come to an end;- it gives as output a graph of all possibleparse trees; the complete parse tree(s) is(are) extracted from the graph in a followingstep.
This characterizes the algorithm as an all-path-algorithm which returns all possiblederivations for a sentence.
Therefore, theparser is able to create structure pieces alsofor ill-formed sentences, thus outputting, evenin this case, partial analyses.
This isparticularly useful for diagnosis and debugging.The following are the major extensions tothe basic ICA algotrithm:it is designed to run an APSG, inparticular it evaluates the tests beforeapplying a rule;197PREPROC~INPUTILUSERDICTIONARYDICTIONARYCONSTRUCTORI , ~ l ~  1 POSTPARSERPARSER ~ ANALYSISA.
P. S.a.
I sENTENCEs&II PARS ING II?
ISPECIALIZED USERFigure 1.
The system.USERDICTIONARYche e' notoEOW EOW noto EOW( ...... ) ( ...... ) ~ ( ...... )f %che EOW( .
.
.
.
.
.
)EOW Symbolic representation( ...... ) tree((e' (noto (the (EOW ( ...... )))(EOW ( ...... )))(EOW ( ...... )))(the (EOW ( ...... )))(noto (EOW ( ...... ))))Representation list ofthe dictionary abovewith multiple formsFigure 2.
The dictionary representation.198it handles lexical ambiguities duringparsing by representing them in specialmultiple nodes (see below);the partition of the rules into packetsmakes the selection of the rules semi-deterministic;it carries syntactic and semantic analysisin parallel.2.5.
Pos t -processor  and  in terpreterThe graph built by the parser is the datastructure out of which the parse tree isextracted by the post-processor.
To this endthe necessary conditions are that:a. there exists at least one top level nodeamong the nodes of the graph:b. at least one of the top level nodes cover thewhole sentence.If one of these conditions is not met, i.e.
ifthere is no top level node or no top level nodecovers the entire sentence, the analyser doesnot carry any interpretation but displays amessage to the user, indicating the morecomplete partial parsing, where the parserstopped.In case of ambiguity more than one top levelnode covers the entire sentence and more thanone semantic interpretation is proposed to theuser who will select the appropriate one.
If,instead, only one top level node is found, thesemantic interpretation is immediatelyproduced.3.
Data structure and a lgor i thm3.1.
Data  s t ruc tureThe algorithm takes in input a preprocessedstring and returns a graph of all possible parsetrees.
The nodes in the graph can be eitherterminals (forms), or non terminals(constituents).
Nodes are identified as follows:- the  'name' can be either FORMi orCONSTITUENTj, according to the type.
i and jare indexes, and forms and constituents havetwo independent orderings;- a general sequence number.The following two types of structuralinformation are associated with each node:a. the 'annotation' specifies the associated'interpretation', i.e.
:-the syntactic ategory of the node(the label);- i ts  semantic value:- its features.For terminal nodes, their interpretation, i.e.their annotation coincides with theinterpretation associated to the form by thepreprocessor.
For non terminal nodes, instead,the interpretation is made during the building ofthe node and the applied rule gives allnecessary information;b. the 'covering structure' of a node containsthe information necessary to identify in thegraph the subtree rooted in that node.
Eachnode in the graph dominates a subtree andcovers a part of the input, i.e.
a sequence ofterminal nodes.
In this sequence, the formassociated with the leftmost terminal node is a'first form'.
The form immediately to the rightof the form associated to rightmost terminalnode is the 'anchor'.
For terminal nodes thecovering structure contains:- the first form (the node itself);- the anchor (the next form in the inputstring);- the list of parent nodes;- the list of anchored nodes, i.e.
the nodeswhich have as anchor the form itself;while for non terminal nodes it consists of:- the  first form;- the anchor;- the  list of parents:- the list of sons.Two trees T1 and T2 are called adjacent if theanchor of T1 is the first form of T2.3.2.
The  a lgor i thmThe parser is a loop realized as a recursion.It scans the preprocessed string and creates aterminal node for every scanned form.
As aterminal node is created, the algorithmattempts to perform at!
the reductions whichare possible at that point.
A 'reduction set' isdefined as the set of nodes N1,N2 ..... Nn whichare roots of adjacent subtrees and correspond,in the same order, to the <RIGHT-PATTERN> ofthe examined production.
If no (more) reductionis possible, the parser scans the next form.The loop continues until the string is exhausted.The parser operates on the graph and has ininput two more data structures, i.e.
:- the stack of the active nodes, which containsall the nodes which are to be examined; this is199accessed with a LIFO policy;the list of rule packets, which contains therules potentially applicable on the current node.The loop starts from the first active node.Its annotation is extracted and thecorresponding rule packet is selected, i.e.
theone whose rightmost symbol corresponds tothe current node category.
The reduction setsare thus selected.
A reduction set is searchedby an integrated breadth and depth-firststrategy as alternatives are retrieved andstored all together as for breadth-first search,but are then expanded one by one.The choice of the possible applicable rules isnot a blind one and the rules are not all tested,but they are pre-selected by their partitioninto packets.
More than one set is possible ateach step, i.e.
the same rule can be appliedmore than once.
During the matching stepreduction sets are searched in parallel;reductions and the building of new nodes arealso carried in parallel.Once a reduction set is identified, the testsassociated with the current rule are evaluated.If they succeed, the corresponding rule isapplied and a new node which has as categorythe <LEFT-SYMBOL> of the production iscreated and inserted in the active node stack.This becomes the root of the (sub)tree whosesons are in the reduction set.
The evaluation oftests prior to entering a rule is a furtherimprovement in efficiency.The annotation of the new nodes is now createdby the execution of the actions, which insertnew features for the node, and the evaluationof the expression which assigns to it asemantic value.If the tests fail, the next reduction set isprocessed in the same way.
If there is no(more) reduction set, the next rule in thepacket is examined until no more rule is left.When the higher level loop is resumed the nextactive node is examined.
Termination occurswhen the input is consumed and no more rulecan be applied.3.3.
Lexical ambiguityThe algorithm can efficiently handle lexicalambiguity.For those forms which have more than oneinterpretation, a special annotation is provided.It contains a certain number of interpretationsand each interpretation has the following form:(#i ((<cat> <sem_val>)((<feat_name> <featval>)')))where #i is the ordering number of theinterpretation.
This structure is called'multiple node'.
Figure 3 shows multiple nodesparticipating to different structures.4.
An exampleThe most relevant application of SAIL is itsuse as a NL interface towards a knowledge baseabout ski environments.
Natural languagedeclarations about lifts, snow and weatherconditions, and classification of slopes aretranslated into MRS facts, and correspondentlyNL questions, including advice requests, areprocessed and inserted.Let's take the question:'Come si sale da Cervinla al PlateauRosa ?
''How can one get on the Plateau Rosafrom Cervinla ?
'and the grammar:Rule1 :PROD: TG -> come <connette> <partenza><arrive> ?TESTS: tACTIONS: tEXPRESS ION :(trueps'(connette (SEMVAL '<partenza>)(SEMVAL '<arrive>)$mezzo))Rule2:PROD: <partenza> -> da <luogo>TESTS: tACTIONS: tEXPRESS ION: (S EMVAL '<luogo>)Rule3:PROD: <arrive> -> al <tuogo>TESTS: tACTIONS: tEXPRESSION: (SEMVAL '<luogo>)200CONSTITUENT5 ~ E N T 7NT6?
I'?
I~.
?, I1'.
?, I~n IFORM3 = la FORM4 = nota FORM5 = polernicaCONSTITUENT5 recognizes 'la nota polemica' 'the polemic note'CONSTITUENT7recognizes 'la nota polemica ?
'the well-known controversy'Figure 3.
Multiple nodes.10,TG1, C ?come sl sale da Cervinia al Plateau Rosa ?Figure 4.
The parse-tree of the example.201DICTIONARY-FORM#I :<connette> -> sl saleDICTIONARY-FORM#2:<connette> -  si giungeDICTIONARY-FORM#3:<Iuogo> -> CerviniaDICTIONARY-FORM#4:<Iuogo> -> PlateauRosaSEMVAL is a function that gets the semanticvalue from the node having the categoryspecified by its parameter; this category mustappear in the right-hand side of the production.trueps is an MRS function that checks theknowledge base for the presence or not of apredicate.The parser starts by creating the terminalnodes:node1 : form 0 : comenode2: form 1 : sl salenode3: form 2 : danode4: form 3 : Cerviniaand the rule2 can be applied on nodes node3 andnode4.
The following node is created:node5: constituent 0 : da CerviniaIn an analogous way other nodes are added.node6: form 4 : alnode7: form 5 : Plateau Rosanode8: constituent 3 : al Plateau Rosanode9: form 6 : ?node10: constituent 4 : come si sale daCervinla al Plateau Rosa ?As the syntactic category of node10 is TG (TopGrammar) and it covers the entire input, theparsing is successful.
Figure 4 shows the parse-tree for this sentence.5.Conclusions and future developmentsAt present the parser described above hasbeen efficiently employed as a component of anatural language front-end.
The naturallanguage is Italian and typical input sentenceseither give information about the possible trips(paths/alternative paths) and theircharacteristics (type of lift, condition of snow,weather), or have the following form:'Qual'e" II percorso migliore perandare da X a Y per uno sclatoreprovetto ?
''What Is the best path from X to Y foran excel lent  skier ?
'Three different improvements are inprogress:the implementation of a spelling correcterand of a dictionary update system.The parserrejects such sentences where some formsoccur that are not in the dictionary.
A form notincluded in the dictionary cannot bedistinguished from a form incorrectly typedbut present in the dictionary.
The two casescorrespond to different situations and needdistinct solutions.
In the former case thedefective form may be inserted in thedictionary by means of an appropriate updateprocedure.
In the latter case the typing errormay be corrected on the basis of aclassification of errors compiled according tosome user's model;another perspective is making the parsermore powerful also about more strictlylinguistic phenomena as the resolution ofellipsis and anaphora;finally, the identification of general semanticfunctions to be employed in the <EXPRESSION>part of the rule has been started.REFERENCESGenesereth, M. R., Greiner, R. & Smith, D. E.(1980).
MRS Manual.
Technical Report HPP-80-24, Stanford University, Stanford CA.Genesereth, M. R. (1981).
The architectureof a multiple representation system.Technical Report HPP-81-6, StanfordUniversity, Stanford CA.Grishman, R. (1976).
A survey of syntacticanalysis procedures for natural language.AJCL, Microfiches 47, 2-96.Marine, M., Spiezio, A., Ferrari, G. &Prodanof, I.
(1986).
SAIL: a natural languageinterface for the building of and interactingwith knowledge bases.
In Proceedings ofAIMSA 86 (on microfiches), Varna, Bulgaria.Winograd, T. (1983).
Language as aCognitive Process.
VoI.I: Syntax.Addison-Wesley.202
