A GENEI~L IZE I )  RECONSTRUCTION ALGORITHM FOR ELLIPSISRESOLUTIONShalom Lappin and ttsue-Hueh ShihDepartment of LinguisticsSchool of Oriental and African StudiesUniversity of LondonThornhaugh Street, Russell SquareLondon WC1H OXG, UKshalom@semantics.soas.ac.uk, hh112@eng.cam.ac.ukAbstractWe present an algorithm which assigns interpretations toseveral major types of ellipsis structures through ageneralized procedure of syntactic reconstrtiction.Ellipsis structures are taken to be sequences of lexicallyrealized arguments and/or adjuncts of an empty verbalhead.
Reconstruction s characterized as the specificationof a (partial) correspondence relation between theunrealized head verb of an elided clause and itsargument and adjuncts on one hand, and the head of anon-elided antecedent sentence and its arguments andadjuncts on the other.
The algorithm generatesappropriate interpretations for cases of VP ellipsis,pseudo-gapping, bare llipsis (stripping), and gapping.
Itprovides a uniform computational approach to a widerange of ellipsis phenomena, nd it has significantadvantages over several other approaches to ellipsiswhich have recently been suggested in the computationaland linguistic literature.1 IntroductionEllipsis structures pose an importantproblem for NLP systems designed toprovide text understanding or to handledialogue.
They contain information which isnot overtly expressed, but which must berecovered through the identification of anantecedent.
However, unlike pronominalanaphora, which is resolved by matching apronoun with an antecedent oun phrase, theinterpretation of an ellipsis fragment (orsequence of fragments) generally involvesmapping it (them) into a sentential structureby association with an antecedent clause.
Itis possible to distinguish two mainapproaches to ellipsis resolution.
The firstseeks to associate an elided constructiondirectly with a semantic representation,while the second mediates semanticinterpretation through the reconstruction ofthe syntactic structure of the antecedent.
Thealgorithm we propose implements the secondview of ellipsis, by characterizing ellipsisresolution as the specification of a relation of(possibly partial) correspondence b tween thelexically unrealized head of an elided clauseand its arguments and adjuncts as one termof the relation, and the realized head of theantecedent clause and its arguments andadjuncts as the second term.The algorithm is a generalized procedurefor syntactic reconstruction which provides aunified way of handling a significant varietyof ellipsis constructions.
It modifies andextends the reconstruction strategy forhandling VP ellipsis suggested in Lappin andMcCord (1990).
The algorithm covers VPellipsis, illustrated in 1, pseudo-gapping (in2), bare ellipsis involving sequences of barearguments, adjuncts or both (in 3), andgapping (in 4).1.
John completed his paper before heexpected to.2.
John sent the flowers to Lucy betbrehe did the chocolates.3.
Bill wrote reviews :for the journal lastyear, and articles this year.4.
Sam teaches in London, and Lucy inBoston.It will be a useful component for sourceanalysis in machine translation, textunderstanding systems, and discourseinterpretation systems.6872 The Reconstruction AlgorithmLet an ellipsis fragment be a phrase which(i) occurs outside of a lexieally realizedsentence, and (ii) is interpreted as anargument or an adjunct of the head verb ofa non-elided sentence.
Let s = <bl,...,bk> (1_< k) be a sequence of ellipsis fragments suchthat, for each bi ~ s, b~q immediately followsb i.
Take s to be maximal in that there is noellipsis fragment, b0 or bk+ 1, not contained ins, which immediately precedes orimmediately follows an element of s.A. Identify an antecedent sentence S for s.B.
Take the head verb of S, A, as the newinterpreted head of the sentence to beconstructed from s (we will refer to the newhead as A').C.
Consider in sequence ach argument slotSlot~ in the SUBCAT list of A.1.
If there is a phrase C' in s which is ofthe appropriate type for filling Slot i, then fillSlot~ in the SUBCAT list of A' with C' andremove C' from s. Else,2.
If Slota is filled by a phrase C, then fillSlot, in A' with C, and list C as a newargument of A'.
Else,3.
If Sloti is empty in the frame of A, itremains empty in the frame of A'.4.
Construct a list, Arg-List, of thephrases which fill the SUBCAT list slots ofA'.D.
Construct a list of adjunct phrases for A'as follows.1.
Construct he list L of adjunct phrasesin s.a.
If L 4: nil, then for each elementAdjP' of L, fill an adjunct slot for A' withAdjP'.2.
Consider each adjunct slot of A filledby a phrase AdjP.a.
If there is a phrase AdjP' filling anadjunct slot of the same type in A', thenleave AdjP' in this slot and remove AdjP'from s. Else,b.
Fill an adjunct slot for A' with AdjP,and list AdjP as a new adjunct of A'.3.
Construct a list, Adj-List, of all thephrases which fill adjunct slots of A'.E.
Generate a new syntactic structure asfollows.1.
Concatenate Arg-List and Adj-List tocreate a combined list, Ph-List, of thephrasal arguments and adjuncts of A'.2.
Reorder the elements of Ph-List toproduce a new list, Ord-Ph-List, in which thesequence of arguments and adjunct phrasescorresponds to the order of arguments andadjuncts phrases of A.3.
Construct a new clause headed by A'.4.
Substitute Ord-Ph-List for the list ofarguments and adjunct phrases of A' in thenew structure.3 Coverage and Implementation of theAlgorithmAt this point, the algorithm has beenpartially implemented in Prolog to apply tothe output of McCord's English SlotGrammar ESG parser (which also runs inProlog) in order to generate reconstructedtrees for VP ellipsis and pseudo-gappingconstructions ( ee McCord et al (1992) fora description of ESG and NLP systemswhich run on top of it).
Examples of thealgorithm's output for theses cases are givenin 5 and 6.VP Ellipsis5.
John completed the paper before heexpected to.Interpreted VP ellipsis tree.f - subj(n) John(l)  noun(prop)O top complete(2,1,4) verb(fin)I I ndet the(3) det(def)L I .
obj(n) paper(4) noun(cn)I t vsubconj before(5,7) subconjI I subj(n) he(6) noun(pron)I I sccomp expect(7,6,8) verb(fin)I 1 comp(inf) preinf(8,6,9 ) preinft f auxcomp complete(9,6,4) verb(inf)I I ndet the(3) det(def)t J obj(n) paper(4) noun(cn)688Pseudo-Gapping6.
John sent the flowers to Mary before hedid the chocolates.Interpreted VP ellipsis tree.\[osubj(n)topndetobjCn)iobj(to)objprepvsubconj, subjCn)t sccompI ndett objCn)t iobj(to)objprepJohn(l) noun(prop)send(2,l,4,6) verb(fin)the(3) det(det)flower(4) noun(cn)to(5,6) prep(to)Mary(6) noun(prop)before(7,9) subconjhe(8) noun(pron)send(9,8,11,6) verb(fin)the(l O) det(det)chocolate(11) noun(cn)to(5,6) prep(to)Mary(6) noun(prop)The algorithm is currently being re-implemented in Prolog to apply to the outputof a modified ItPSG (Pollard and Sag(1994)) grammar designed to handle ellipsis.We are developing the grammar within theframework of Erbach's (1995) ProFIT systemfor augmenting Prolog with typed featurestructures.
The feature structures which thegrammar currently generates tbr simple bareargument and bare adjunct ellipsis cases areillustrated by the AVM's in 7 and 8,respectively (cases of bare adverb ellipsis arediscussed in Chao (1988) and Kcmpson andGabbay (1993)).7.
John gives Mary flowers, andchocolates too.phon!\[john, gives, mary, flowers, and, chocolates, tool&syn!loc!subcatlH&dtrs\[head_dtr\[i)hon!
!and } &synHoe!head!conj!<conj&mtbcat\[\[ QI, O2  I&eomp dtrs\[l_Ql&phon!ljohn, gives, mary, flowersl&syn\[loc\[heaul!
.I&subeat\[\[\]&dtrs\[head_dtr!phon!\[gives, mary, flowers\]&synHoelhead!_.l&subeat\[\[_Sl&dtrslhead_dtr\[phon\[\[gives\]&synHoc!head!_J&vfm'm!<fin&subcat!l_S, _Cl, I | I&comp_dtrs\[\[ CI&phon\[\[maryl&t t 9 l< syn.loc.head.case, ace&subeattll,I I&phon!\[flowers\]&synHoe!head\[ease\[<acc&subeat!\[Il&comp_dtrs!\[S&phon!ljohnl&syn!loe!lnead\[case\[<nom&subcatlH I,02&phon!\[choeolates, oo\]&syn!loe!head\[_Tl&subeat!\[l&dt rsHtead dtr!phon!\[ehocolates\]&syn\[Ioc!head\[ Tl&soheat!ll&dt rs\[head tr!phon\[ \[chocolatesl&synHoc!head!_TI &easel<ace&subcattll&eomp_dtrs!\[\[&eomp_dtrs\[\[\]&adj dtrs!phon!ltoo\]&syn\[Ioc!head!atype!<too&slnbcattll l8.
John sings, and beautifully too.phon!\[john, sings, aml, beautifully, too I&syaHoc!subcat\[\[l&dt rs\[head t r!l)hon!\[and\[&syn Hoc\[head!cooj!<conj&subcat!\[_E 1,W2\]&comp dtrs\[\[_El&phon!\[john, singsl&syn!loc!head!
,l&subcat!\[l&dtrslheaddtr!phon\[\[sings\]&syn!locHlead!_J&sobcat!\[ S\]&dtrs!head tr\[phon!bingsl&syn\[IocHlead\[ J&vfo rm\[<fin&subeat!\[_Sl&eomp_dt,'s\[ll&comp_dtrs!\[ S&phoo!ljohn\]&synHoc!head!case!<nom&subcat!ll I,W2&phml !
\ [beaut i fu l l y ,  too I&sya!loc!hcad!Jl&subcat!ll&dtrs!head_d trIphon\[lheautifullyl&syn!loc!hcad!_Jl&sal)cat!\[l&!
!
!
dtrs.head tr.phon.\[I)eautifully I &syn.loc.head.
Jt&subcat!\[\]&dtrsHtead_dtr!phon!
H&synHoc!hcad!
Jl&subeat!ll&dtrs!head tr!phon\[\[\[&syn.loe.head, ll &vform\[<elided&suhcat!\[l&eomp_dtrs!ll&comp_dtrs\[ n&adj dtrs!phon!\[beautifullyl&I !
!
y< syo.loc.head.atype, others&subcat!\[\]&comp_dtrs!H&eomp dtrs\[\[l&adj_dtrs\[phon!ltoo\]&synHocHlead\[atype!<too&subeat\[\[I \]The bare NP chocolates is the head of the689elided clause in the second conjunct of 7.The generalized ellipsis reconstructionalgorithm will identify gives as the head Vof the antecedent clause in the first conjunct,and then will fill one of the positions in itsSUBCAT list with the local features ofchocolates.
If it fills the direct object (thirdcomplement) position of this list with thebare NP, then it will fill the subject andindirect object positions with the localfeatures of John and Mary, generating thereconstructed feature structure correspondingto 9.9.
\[~p \[Np John\] \[vP \[v gives\] \[NP Mary\]\[NP flowers\]\]\] and\[,, \[Ne John\] \[vP \[vp \[v gives\] [NP Mary\]\[NP chocolates\]\] \[AdvP tOO\]\]\]By contrast, he bare adverb beautifully isan adjunct daughter of a VP headed by anempty verb in 8.
This is due to the fact thatin our grammar, an adverb is an adjunctwhich modifies a VP.
The algorithm willidentify sings as the head V of theantecedent clause and substitute it for theempty V in 8.
This will yield a featurestructure corresponding to 10.10.
\[m \[~ John\] \[ve \[v plays\]\]\] and\[n,\[NP John\] \[vv \[vp \[vP \[v plays\]\]\[AdvP beautifully\]\] too\]\]We employ a rule which permits anunbounded number of adverbs to begenerated in successively higher VP'sthrough left recursion on the daughter VPnode.
The relevant PS rule is of the formVP ~ VP, ADV.
We require this rule inorder to allow for the fact that there is noapparent upper bound on the number ofadverbs in a VP.
11 indicates that it ispossible to obtain an unbounded number ofbare adverbial adjuncts in an ellipsis site.11 a. John sang, but not in New York.b.
John sang, but not in New York at theconcert.c.
John sang, but not in New York at theconcert for three hours.d.
John sang, but not in New York at theconcert for three hours on Tuesday.e.
John sang, but not in New York at theconcert for three hours on Tuesday toimpress his music teacher.4 Comparison with Other Approaches toEllipsisReinhart (1991) suggests a syntacticreconstruction account of bare ellipsis whichadjoins an NP in the antecedent clause to anNP fragment by LF movement.
The result isa conjoined NP which, taken as ageneralized quantifier, applies to theantecedent clause, interpreted as a predicateformed by lambda abstraction.
So, forexample, adjunction of ,flowers in theantecedent clause of 7 to the NP fragmentchocolates in the ellipsis site produces theLF structure 12a, which is interpreted as 12b.12a.
\[IP'\[IP John gives Mary tl \]\[NP\[NP flowers\], \[NP and \[NP chocolates\]2\]2\]\]b.
(flowers and chocolates)(~x\[john givesmary x\])Given that Reinhart's analysis relies onLF adjunction of an NP in the antecedent toan NP in the ellipsis site in order to create ageneralized quantifier corresponding to acoordinate NP, it is not clear how it canapply to bare ellipsis cases like 3, in whicha sequence of arguments and adjuncts appearin the ellipsis site.
Moreover, the analysiscannot deal with bare ellipsis cases like 8,where a bare adjunct fragment does notcorrespond to any constituent in theantecedent clause.
Therefore, this accountdoes not cover the full range of bare ellipsiscases.
As we have seen, the proposedgeneralized reconstruction algorithm doeshandle bare ellipsis structures like 8.
In caseslike 3 the algorithm will substitute the headV of the antecedent for the empty verb ofthe elided clause, and the bare PP adverbwill modify the VP headed by this verb.
Thealgorithm will fill some of the complementpositions in the SUBCAT list of thereconstructed V with the NP arguments inthe ellipsis site, and it will fill the remainingpositions with arguments inherited from theantecedent head V. This procedure will yield690at least one appropriate r construction for theelided clause.Dalrymple t al.
(1991) and Shieber et al(1995) present a generalized semanticaccount  wh ich  employs  h igherorder-unification of property and relationvariables to resolve ellipsis.
Their generalstrategy is to specify the interpretation f theantecedent clause as an equation between apropositional variable S and a predicate-argument structure.
The arguments of thepredicate correspond to the fragments in theellipsis site, and ellipsis resolution consists infinding an appropriate value for the predicatevariable which can apply to both thesequence of arguments in the interpretationof the antecedent clause, and the sequence ofarguments in the ellipsis site.
Given theequations in 13a-c, higher-order unificationcorrectly generates 13d as the interpretationof 3.13a.
<a~,a2 > = <book reviews,last year> &<bj,b2> = <articles,this year>b.
S l - (wrote book reviews for thejournal (during) last year)(bill)c. R = )~x~,y\[bill wrote x for thejournal (during) Yld.
(book reviews)()~x\[(last year)()~y\[billwrote x for the journal (during) y\])\])and(articles)(~,x\[(this year)0~y\[billwrote x for the journal(during) y\])\])While the higher-order unificationanalysis can deal with bare ellipsis cases like3 (as well as VP ellipsis andpseudo-gapping), it is not clear how to applyit to bare ellipsis examples like 8, where theadjunct in the ellipsis site lacks acorresponding element in the antecedentclause.
Lappin (1996) suggests positing at}ee manner adverbial function variable inthe lexical semantic representation f verbslike sing.
This will permit the specificationof the equations in 14a-c for 8.
Higher-orderunification solves these equations to yield14d, the desired interpretation of 8.14a.
al = fn,,,,or & bl = beautifullyb.
S~ = (J,~,,~,,oXplays))(john)c. P = )g\[(/(plays)(john)\]d. )vJ\[ff(plays))(john)\]ff,,,~m,,~r ) and)g\[(J(plays))(j ohn)\](beautifully)In fact, this solution does not generalizeto cases like 11, which indicate that there isno upper bound on the number ofantecedentless bare adjuncts which canappear in a bare ellipsis sequence.
As it isnot possible to posit an unbounded numberof free adjunct function variables in thesemantic representation of a verb (VP), itseems that the higher-order unificationanalysis cannot deal with these cases.The generalized reconstruction algorithmpresented here does not require the presenceof constituents in the antecedentcorresponding to adjunct elements of thefragment sequence.
When a bare adjunctphrase AdjP does not correspond to a phrasein the antecedent clause, AdjP is simplyadded to the list of adjuncts of the new headverb of the reconstructed clause.
Therefore,the algorithm produces the correctreconstructed forms for the elided clauses inl l .Another problem is posed by the factthat, as higher-order unification applies tosemantic interpretations of antecedents, itwill not have access to syntactic structure.But at least some cases of ellipsis resolutionseem to require reference to this structure.Consider the contrast between 15a and 15b.15a.
The studems ent invitations to theprofessors yesterday, and to eachother today.b.?
?The students aid that John sentinvitations to the professorsyesterday, and to each other today.The elided conjunct in 15b is ill-lbrmedbecause the reciprocal NP each other in thebare argument is interpreted as illicitlybound from outside of its local syntacticdomain.
By contrast, the generalizedreconstruction algorithm generates the fullsyntactic structure of the elided clause, andso it provides the representation required tospecify the contrast between 15a and 15b.6915 ConclusionWe have proposed a generalizedreconstruction algorithm for ellipsisresolution.
The algorithm provides a unifiedcomputational procedure for assigninginterpretations to a significant variety ofellipsis constructions.
The basic strategywhich the algorithm encodes is toreconstruct an elided clause by (i) taking itshead verb V' to be identical to the head verbV of an antecedent clause, (ii) filling theargument positions in the SUBCAT list of V'with the NP's in the ellipsis site, (iii)inheriting NP arguments of V to fill thecorresponding argument positions in theSUBCAT list of V' which the NP's in theellipsis site do not occupy, (iv) applying theadjuncts in the ellipsis site to the (possiblysuccessive) VP('s) headed by V', and (v)inheriting any adjuncts modifying V asmodifiers of the VP('s) which V' heads,when these adjuncts do not correspond toadjuncts in the ellipsis site.
The algorithmhas wider empirical coverage than othercurrent approaches which have beensuggested within the computational andlinguistic literature.
It can be integrated intoa more comprehensive NLP system torecover missing information for purposes oftext and dialogue understanding.6 AcknowledgmentsWe are grateful to Chris Brew, Jo Calder,Claire Grover, and Suresh Manandhar forhelpful comments on some of the ideasproposed here and for useful advice onimplementational issues.
The researchdescribed in this paper is supported by grantGR/K59576 from the Engineering andPhysical Science Research Council of theUK.Dalrymple, M., S. Shieber, and F. Pereira(1991), "Ellipsis and Higher-OrderUnification", Linguistics and Philosophy14, pp.
399-452.Erbach, G. (1995), "ProFIT: Prolog withFeatures, Inheritance and Templates",Proceedings of the Seventh Conferenceof the European Association fi)rComputational Linguistics', pp.
180-187.Kempson, R. and D. Gabbay, (1993), "HowWe Understand Sentences.
And FragmentsToo?"
in M. Cobb (ed.
), SOAS WorkingPapers in Linguistics and Phonetics 3, pp.259-336.Lappin, S. (1996), "The Interpretation ofEllipsis" in S. Lappin (ed.
), The Handbookof Contemporary Semantic Theory,Blackwell, Oxford, pp.
145-175.Lappin, S. and M. McCord (1990),"Anaphora Resolution in Slot Grammar",Computational Linguistics 16, pp.
197-212.McCord, M., A. Bernth, S. Lappin, and W.Zadrozny (1992), "Natural LanguageProcessing within a Slot GrammarFramework", International Journal onArtificial Intelligence Tools" 1, pp.
229-277.Pollard, C. and I.
Sag (1994), Head-DrivenPhrase Structure Grammar, University ofChicago Press, Chicago, IL.Reinhart, T. (1991), "Elliptic Conjunctions-Non-Quantificational QR" in A.
Kasher(ed.
), The Chomskyan Turn, Blackwell,Oxford, pp.
360-384.Shieber, S., F. Pereira, and M. Dalrymple(1995), Interactions of Scope and Ellipsis',ms., Harvard University, AT&T BellLaboratories, and Xerox Parc.ReferencesChao, W. (1988), On Ellipsis, GarlandPublishing Co., New York.692
