Proceedings of EACL '99Transducers  f rom Rewr i te  Ru les  w i th  Backre ferencesDale GerdemannUniversity of TuebingenK1.
Wilhelmstr.
113D-72074 Tuebingendg@sf s. nphil, uni-tuebingen, deGertjan van NoordGroningen UniversityPO Box 716NL 9700 AS Groningenvannoord@let, rug.
nlAbstractContext sensitive rewrite rules have beenwidely used in several areas of naturallanguage processing, including syntax,morphology, phonology and speech pro-cessing.
Kaplan and Kay, Karttunen,and Mohri & Sproat have given vari-ous algorithms to compile such rewriterules into finite-state transducers.
Thepresent paper extends this work by al-lowing a limited form of backreferencingin such rules.
The explicit use of backref-erencing leads to more elegant and gen-eral solutions.1 IntroductionContext sensitive rewrite rules have been widelyused in several areas of natural language pro-cessing.
Johnson (1972) has shown that suchrewrite rules are equivalent to finite state trans-ducers in the special case that they are not al-lowed to rewrite their own output.
An algo-rithm for compilation into transducers was pro-vided by Kaplan and Kay (1994).
Improvementsand extensions to this algorithm have been pro-vided by Karttunen (1995), Karttunen (1997),Karttunen (1996) and Mohri and Sproat (1996).In this paper, the algorithm will be ex-tended to provide a limited form of back-referencing.
Backreferencing has been im-plicit in previous research, such as in the"batch rules" of Kaplan and Kay (1994), brack-eting transducers for finite-state parsing (Kart-tunen, 1996), and the "LocalExtension" operationof Roche and Schabes (1995).
The explicit use ofbackreferencing leads to more elegant and generalsolutions.Backreferencing is widely used in editors, script-ing languages and other tools employing regularexpressions (Friedl, 1997).
For example, Emacsuses the special brackets \ (  and \)  to capturestrings along with the notation \n  to recall the nthsuch string.
The expression \ (a* \ )b \ l  matchesstrings of the form anba n. Unrestricted use ofbackreferencing thus can introduce non-regularlanguages.
For NLP finite state calculi (Kart-tunen et al, 1996; van Noord, 1997) this is unac-ceptable.
The form of backreferences introducedin this paper will therefore be restricted.The central case of an allowable backreferenceis:x ~ T(x)/A__p (1)This says that each string x preceded by A andfollowed by p is replaced by T(x), where A and pare arbitrary regular expressions, and T is a trans-ducer) This contrasts harply with the rewritingrules that follow the tradition of Kaplan & Kay:?
~ ?l:~__p (2)In this case, any string from the language ?
isreplaced by any string independently chosen fromthe language ?.We also allow multiple (non-permuting) back-references of the form:~The syntax at this point is merely suggestive.
Asan example, suppose that T,c,.
transduces phrases intoacronyms.
Thenx =?~ T=cr(x)/(abbr)__(/abbr>would transduce <abbr>non-deterministic finiteautomaton</abbr> into <abbr>NDFA</abbr>.To compare this with a backreference in Perl,suppose that T~cr is a subroutine that con-verts phrases into acronyms and that R~?,.
isa regular expression matching phrases that canbe converted into acronyms.
Then (ignoringthe left context) one can write something like:s/(R~c,.)(?=(/ASBR))/T,,c~($1)/ge;.
The backrefer-ence variable, $1, will be set to whatever string R~c,.matches.126Proceedings of EACL '99x lx2.
.
,  xn ~ Tl(xl)T2(x2)...Tn(x,O/A--p (3)Since transducers are closed under concatenation,handling multiple backreferences reduces to theproblem of handling a single backreference:x ~ (TI" T2 .
.
.
.
.
T,O(x)/A--p (4)A problem arises if we want capturing to fol-low the POSIX standard requiring a longest-capture strategy.
~riedl (1997) (p. 117), forexample, discusses matching the regular expres-sion (toltop)(olpolo)?
(gicallo?logical) against theword: topological .
The desired result is that(once an overall match is established) the first setof parentheses should capture the longest stringpossible (top); the second set should then matchthe longest string possible from what's left (o),and so on.
Such a left-most longest match con-catenation operation is described in ?3.In the following section, we initially concentrateon the simple Case in (1) and show how (1) may becompiled assuming left-to-right processing alongwith the overall ongest match strategy describedby Karttunen (1996).The major components of the algorithm arenot new, but straightforward modifications ofcomponents presented in Karttunen (1996) andMohri and Sproat (1996).
We improve upon ex-isting approaches because we solve a problem con-cerning the use of special marker symbols (?2.1.2).A further contribution is that all steps are imple-mented in a freely available system, the FSA Util-ities of van Noord (1997) (?2.1.1).2 The  A lgor i thm2.1 P re l iminary  Cons iderat ionsBefore presenting the algorithm proper, we willdeal with a couple of meta issues.
First, we in-troduce our version of the finite state calculus in?2.1.1.
The treatment of special marker symbolsis discussed in ?2.1.2.
Then in ?2.1.3, we discussvarious utilities that will be essential for the algo-rithm.2.1.1 FSA Uti l i t iesThe algorithm is implemented in the FSA Util-ities (van Noord, 1997).
We use the notation pro-vided by the toolbox throughout this paper.
Ta-ble 1 lists the relevant regular expression opera-tors.
FSA Utilities offers the possibility to de-fine new regular expression operators.
For exam-ple, consider the definition of the nullary operatorvowel as the union of the five vowels:\[\] empty  string\[El , .
.
.
En\] concatenation of E1 ... En{} empty language<El,...En} union of El , .
.
.EnE* Kleene closureE ^  optionality-E complementEI-E2 difference$ E containmentE1 ~ E2 intersectionany symbolA : B pairE1 x E2 cross-productA o B compositiondomain(E) domain of a transductionrange (E) range of a transductionident ity (E) identity transductioninverse (E) inverse transductionTable 1: Regular expression operators.macro (vowel, {a, e, i ,o ,u}) .In such macro definitions, Prolog variables can beused in order to define new n-ary regular expres-sion operators in terms of existing operators.
Forinstance, the lenient_composition perator (Kart-tunen, 1998) is defined by:macro (priorityiunion (Q ,R),{Q, -domain(Q) o R}).macro (lenient_composition (R, C),priority_union(R o C,R)).Here, priority_union of two regular expressionsQ and R is defined as the union of Q and the compo-sition of the complement of the domain of Q withR.
Lenient composition of R and C is defined as thepriority union of the composition of R and C (onthe one hand) and R (on the other hand).Some operators, however, require somethingmore than simple macro expansion for their def-inition.
For example, suppose a user wanted tomatch n occurrences of some pattern.
The FSAUtilities already has the '*' and '+' quantifiers,but any other operators like this need to be userdefined.
For this purpose, the FSA Utilities sup-plies simple Prolog hooks allowing this generalquantifier to be defined as:macro (mat chn  (N, X), Regex) ?
-mat ch_n (N, X, Regex).match_n(O, _X, \[\] ) .match_n(N,X, \[XIRest\]) :-N>O,N1 is N-l,mat ch_n (NI, X, Rest) .127Proceedings of EACL '99For example: match_n(3,a)  is equivalent to theordinary finite state calculus expression \[a, a, a\].Finally, regular expression operators can bedefined in terms of operations on the un-derlying automaton.
In such cases, Prologhooks for manipulating states and transitionsmay be used.
This functionality has beenused in van Noord and Gerdemann (1999) to pro-vide an implementation of the algorithm inMohri and Sproat (1996).2.1.2 T reatment  of  MarkersPrevious algorithms for compiling rewriterules into transducers have followedKaplan and Kay (1994) by introducing spe-cial marker symbols (markers) into strings inorder to mark off candidate regions for replace-ment.
The assumption is that these markers areoutside the resulting transducer's alphabets.
Butprevious algorithms have not ensured that theassumption holds.This problem was recognized byKarttunen (1996), whose algorithm starts witha filter transducer which filters out any stringcontaining a marker.
This is problematic for tworeasons.
First, when applied to a string that doeshappen to contain a marker, the algorithm willsimply fail.
Second, it leads to logical problems inthe interpretation of complementation.
Since thecomplement of a regular expression R is definedas E - R, one needs to know whether the markersymbols are in E or not.
This has not beenclearly addressed in previous literature.We have taken a different approach by providinga contextual way of distinguishing markers fromnon-markers.
Every symbol used in the algorithmis replaced by a pair of symbols, where the secondmember of the pair is either a 0 or a 1 dependingon whether the first member is a marker or not.
2As the first step in the algorithm, O's are insertedafter every symbol in the input string to indicatethat initially every symbol is a non-marker.
Thisis defined as:macro (non_markers, \[?, \[\] :0\] *) .Similarly, the following macro can be used toinsert a 0 after every symbol in an arbitrary ex-pression E.2This approach is similar to the idea of laying downtracks as in the compilation of monadic second-orderlogic into automata Klarlund (1997, p. 5).
In fact, thistechnique could possibly be used for a more efficientimplementation f our algorithm: instead of addingtransitions over 0 and 1, one could represent the al-phabet as bit sequences and then add a final 0 bit forany ordinary symbol and a final 1 bit for a markersymbol.macro (non_markers (E),range (E o non_markers)) .Since E is a recognizer, it is first coerced toidentity(E).
This form of implicit conversion isstandard in the finite state calculus.Note that 0 and 1 are perfectly ordinary alpha-bet symbols, which may also be used within a re-placement.
For example, the sequence \[i,0\] repre-sents a non-marker use of the symbol I.2.1.3 Uti l i t iesBefore describing the algorithm, it will behelpful to have at our disposal a few generaltools, most of which were described already inKaplan and Kay (1994).
These tools, however,have been modified so that they work with ourapproach of distinguishing markers from ordinarysymbols.
So to begin with, we provide macros todescribe the alphabet and the alphabet extendedwith marker symbols:macro (s ig ,  \[?, 0\] ) .macro (xs ig ,  \[?, {0,1}\] ).The macro xs ig  is useful for defining a special-ized version of complementation a d containment:macro(not  (X) ,xs ig*  - X).macro ($$ (X), \ [xs ig* ,  X, xs ig*\ ]  ) .The algorithm uses four kinds of brackets, soit will be convenient to define macros for each ofthese brackets, and for a few disjunctions.macro ( lb l ,  \ [ '  <1 ' ,  1\] )macro ( lb2,  \ [ '  <2 ' ,  1\] )macro (rb2,  \ [ '  2> ' ,  1\] )macro ( rb l ,  \ [ '  1> ' ,  1\] )macro ( lb ,  { lb l ,  lb2})macro (rb,  {rb l  , rb2})macro (b l ,  { lb l ,  rb l} )macro (b2, { lb2,  rb2})macro (brack,  { lb ,  rb}) .As in Kaplan & Kay, we define an Intro(S) op-erator that produces a transducer that freely in-troduces instances of S into an input string.
Weextend this idea to create a family of Intro oper-ators.
It is often the case that we want to freelyintroduce marker symbols into a string at any po-sition except the beginning or the end.%% Free introduct ionmacro( intro(S) ,{xsig-S, \[\] x S}*) .~.7.
Introduction, except at beginmacro (xintro (S) , ( \[\] , \[xsig-S, intro (S) \] }) .?/.~.
Introduction, except at endmacro (introx (S) , ( \[\] , \[intro (S) , xsig-S\] }) .128Proceedings of EACL '99%% Introduction, except at begin & endmacro (xintrox (S), { \[\], \[xsig-S\] ,\[xsig-S, intro (S), xsig-S\] }).This family of Intro operators is useful for defin-ing a family of Ignore operators:macro( ign( E1,S) , range(E1 o in t ro (S) ) ) .macro(x ign(E l ,S )  ,range(E1 o x in t ro (S) ) ) .macro( ignx(E1,S) , range(E1 o in t rox(S) ) ) .macro (x igax (El ,  S), range (El o x in t rox  (S)) ) .In order to create filter transducers to en-sure that markers are placed in the correct po-sitions, Kaplan & Kay introduce the operatorP - i f f -S (L1 ,L2) .
A string is described by thisexpression iff each prefix in L1 is followed by asuffix in L2 and each suffix in L2 is preceded by aprefix in L1.
In our approach, this is defined as:macro( i f _p  then s(L1,L2) ,not(  iLl ,not (L2) \] ) ) .macro ( i f  s then_p (L1,L2),not ( \[not (al), L2\] ) ).macro (p_iff_s (LI, L2),if_p_then_s (LI, L2)if_s_then_p (LI ,L2) ).To make the use ofp_iff_s more convenient, weintroduce a new operator l_if f_r (L, R), which de-scribes strings where every string position is pre-ceded by a string in L just in case it is followed bya string in R:macro (l_iff_r (L ,R),p_iff_s(\[xsig*,L\] , \[R,xsig*\])) .Finally, we introduce a new operatorif (Condit ion, Then, Else) for conditionals.This operator is extremely useful, but in orderfor it to work within the finite state calculus, oneneeds a convention as to what counts as a booleantrue or false for the condition argument.
It ispossible to define t rue  as the universal anguageand false as the empty language:macro(true,?
*).
macro(false,{}).With these definitions, we can use the comple-ment operator as negation, the intersection opera-tor as conjunction and the union operator as dis-junction.
Arbitrary expressions may be coercedto booleans using the following macro:macro (coerce_t  oboo lean  (E),range(E o ( t rue x t rue) ) ) .Here, E should describe a recognizer.
E is com-posed with the universal transducer, which trans-duces from anything (?
*) to anything (?*).
Nowwith this background, we can define the condi-tionahmacro ( if (Cond, Then, Else),{ coerce_to_boolean(Cond) o Then,-coerce_to_boolean(Cond) o Else}).2.2 ImplementationA rule of the form x ~ T(x)/A__p will be writtenas replace(T,Lambda,Rho).
Rules of the moregeneral form xl .
.
.
z , ,  ~ T l (x l ) .
.
.T ,~(Xn) /A_-pwill be discussed in ?3.
The algorithm consistsof nine steps composed as in figure 1.The names of these steps are mostlyderived from Karttunen (1995) andMohri and Sproat (1996) even though thetransductions involved are not exactly the same.In particular, the steps derived from Mohri &Sproat (r, f, 11 and 12) will all be defined interms of the finite state calculus as opposed toMohri & Sproat's approach of using low-levelmanipulation of states and transitions, zThe first step, non_markers, was already de-fined above.
For the second step, we first considera simple special case.
If the empty string is inthe language described by Right, then r (R ight )should insert an rb2 in every string position.
Thedefinition of r (R ight )  is both simpler and moreefficient if this is treated as a special case.
To in-sert a bracket in every possible string position, weuse :\[\[\[\] x rb2,sig\]*,\[\] x rb2\]If the empty string is not in Right, then wemust use intro(rb2) to introduce the markerrb2, fol\]owed by l_iff_r to ensure that suchmarkers are immediately followed by a string inRight, or more precisely a string in Right whereadditional instances of rb2 are freely inserted inany position other than the beginning.
This ex-pression is written as:intro (rb2)oi_ if f _r (rb2, xign (non_markers (Right) , rb2) )Putting these two pieces together with the con-ditional yields:macro (r (R),if(\[\] ~ R, % If: \[\] is in R:\[\[\[\] x rb2,sig\]*,\[\] x rb2\],intro (rb2) % Else:ol_iff_r (rb2, xign (non_markers (R) , rb2) ) ) ) .The third step, f (domain(T ) )  is implementedas:3The  alternative implementat ion is provided invan Noord  and Gerdemann (1999).129macro(replace(T,Left,Right),non_markers0r(Right)0f(domain(T))0l e f t _ tor ight  (domain(T))0longest_match(domain(T))0aux_replace(T)0ll(Left)012(Left)Oinverse(non_markers)).Proceedings of EACL '99% introduce 0 after every symbol% (a b c => a 0 b 0 c 0).% introduce rb2 before any string% in Right.% introduce ib2 before any string in% domain(T) followed by rb2.% ib2 ... rb2 around domain(T) optionally% replaced by Ibl ... rbl% filter out non-longest matches marked% in previous step.% perform T's transduction on regions marked% off by bl's.% ensure that Ibl must be preceded% by a string in Left.% ensure that Ib2 must not occur preceded% by a string in Left.% remove the auxiliary O's.Figure 1: Definition of rep lace  operator.macro (f (Phi), intro (lb2)Ol_iff_r (Ib2, \[xignx (non_markers (Phi), b2),lb2",  rb2\] ) ) .The lb2 is first introduced and then, usingt_i f f_.r, it is constrained to occur immediately be-fore every instance of (ignoring complexities) Phifollowed by an rb2.
Phi needs to be marked asnormal text using non_markers and then xign_xis used to allow freely inserted lb2 and rb2 any-where except at the beginning and end.
The fol-lowing lb2" allows an optional b2, which occurswhen the empty string is in Phi.The fourth step is a guessing component which(ignoring complexities) looks for sequences of theform lb2 Phi rb2 and converts some of theseinto lb l  Phi rbl ,  where the bl  marking indicatesthat the sequence is a candidate for replacement.The complication is that Phi, as always, mustbe converted to non_markers (Phi) and instancesof b2 need to be ignored.
Furthermore, betweenpairs of lb l  and rbl ,  instances of lb2 are deleted.These lb2 markers have done their job and areno longer needed.
Putting this all together, thedefinition is:macro (left_to_right (Phi),\[ \[xsig*,lib2 x ibl,( ign (non_markers (Phi) , b2)Oinverse (intro (ib2))),rb2 x rbl\]\]*, xsig*\]).The fifth step filters out non-longest matchesproduced in the previous step.
For example (andsimplifying a bit), if Phi is ab*, then a string ofthe form ... rbl a b Ibl b ... should be ruled outsince there is an instance of Phi (ignoring bracketsexcept at the end) where there is an internal Ibl.This is implemented as:~macro (longest_mat ch (Phi),not ($$ ( \[lbl,(ignx (non_markers (Phi) , brack)$$(rb l )), % longer match must berb % followed by an rb\])) % so context is ok0~, done with rb2, throw away:inverse (intro (rb2)) ) .The sixth step performs the transduction de-scribed by T. This step is straightforwardly imple-mented, where the main difficulty is getting T toapply to our specially marked string:macro (aux_replace (T),{{sig, Ib2},\[Ibl,inverse (non_markers)4The line with $$ (rbl) (:an be oI)ti-mized a bit: Since we know that an rblmust be preceded by Phi, we can write!\[ign_ (non_markers (Phi) , brack) ,rb 1, xs ig*\] ).This may lead to a more constrained (hence smaller)transducer.130Proceedings of EACL '99oTonon_markers,rb l  x \[\]\]}*).The seventh step ensures that lbl is precededby a string in Left:macro (ii (L),ign ( if _s_then p (ignx ( \[xsig*, non_markers (L) \], lbl),\[lbl,xsig*\] ),ib2)Oinverse (intro (ib i) ) ).The eighth step ensures that ib2 is not precededby a string in Left .
This is implemented similarlyto the previous tep:macro (12 (L),if_s_then_p (ignx (not ( \[xsig*,non_markers (L) \] ), lb2),\[lb2, xsig*\] )0inverse ( intro (lb2) ) ).Finally the ninth step, inverse (non_markers),removes "the O's so that the final result in notmarked up in any special way.3 Longest Match CapturingAs discussed in ?1 the POSIX standard requiresthat multiple captures follow a longest matchstrategy.
For multiple captures as in (3), one es-tablishes first a longest match for domain(T1).. .
.
.
domain( T~ ).
Then we ensure that each ofdomain(Ti) in turn is required to match as longas possible, with each one having priority over itsrightward neighbors.
To implement this, we definea macro lm_concat(Ts) and use it as:rep lace  ( lm_concat (Ts) ,  Le f t ,  Right)Ensuring the longest overall match is delegatedto the rep lace  macro, so lm_concat(Ts) needsonly ensure that each individual transducer withinTs gets its proper left-to-right longest matchingpriority.
This problem is mostly solved by thesame techniques used to ensure the longest matchwithin the rep lace  macro.
The only complica-tion here is that Ts can be of unbounded length.So it is not possible to have a single expression inthe finite state calculus that applies to all possi-ble lenghts.
This means that we need somethinga little more powerful than mere macro expan-sion to construct he proper finite state calculusexpression.
The FSA Utilities provides a Prologhook for this purpose.
The resulting definition oflm_concat is given in figure 2.Suppose (as in Friedl (1997)), we want to matchthe following list of recognizers against he stringtopo log ica l  and insert a marker in each bound-ary position.
This reduces to applying:im_concat ( \[\ [{ \ [ t ,o \ ] , \ [ t ,o ,p \ ]} , \ [ \ ]  : '# ' \ ] ,\ [{o , \ [p ,o , l ,o \ ]} , \ [ \ ] :  '# ' \ ] ,{ \[g,i,c,a,l\], \[o',l,o,g,i,c,a,l\] }\])This expression transduces the stringtopological only to the string top#o#1ogical.
54 ConclusionsThe algorithm presented here has extended previ-ous algorithms for rewrite rules by adding a lim-ited version of backreferencing.
This allows theoutput of rewriting to be dependent on the form ofthe strings which are rewritten.
This new featurebrings techniques used in Perl-like languages intothe finite state calculus.
Such an integration isneeded in practical applications where simple textprocessing needs to be combined with more so-phisticated computational linguistics techniques.One particularly interesting example wherebackreferences are essential is cascaded etermin-istic (longest match) finite state parsing as de-scribed for example in Abney (Abney, 1996) andvarious papers in (Roche and Schabes, 1997a).Clearly, the standard rewrite rules do not apply inthis domain.
If NP is an NP recognizer, it wouldnot do to.say NP ~ \[NP\]/A_p.
Nothing wouldforce the string matched by the NP to the left ofthe arrow to be the same as the string matchedby the NP to the right of the arrow.One advantage of using our algorithm for fi-nite state parsing is that the left and right con-texts may be used to bring in top-down filter-ing.
6 An often cited advantage of finite state5An anonymous reviewer suggested theftlm_concat could be implemented in the frame-work of Karttunen (1996) as:\ [ to l top lo lpo lo \ ] -+ .
.
.
#;Indeed the resulting transducer from this expressionwould transduce topological into top#o#1ogical.But unfortunately this transducer would also trans-duce polotopogical into polo#top#o#gical, sincethe notion of left-right ordering is lost in this expres-sion.6The bracketing operator of Karttunen (1996), onthe other hand, does not provide for left and rightcontexts.131Proceedings ofEACL '99macro(im_concat(Ts),mark_boundaries(Domains) o ConcatTs):-domains(Ts,Domains), concatT(Ts,ConcatTs).domains(\[\],\[\]).domains(\[FIRO\],\[domain(F) IR\]):- domains(RO,R).concatT(\[\],\[\]).concatT(\[TlTs\], \[inverse(non_markers) o T,ibl x \[\]IRest\]):- concatT(Ts,Rest).%% macro(mark_boundaries(L),Exp): This is the central component of im_concat.
For our%% "toplological" example we will have:%% mark_boundaries (\[domain( \[{ \[t, o\] , \[t, o ,p\] }, \[\] : #\] ),%% domain(\[{o,\[p,o,l,o\]},\[\]: #\]),%% domain({ \[g,i, c,a, i\] , \[o^,l,o,g,i,c,a,l\] })\])%% which simplifies to:%% mark_boundaries(\[{\[t,o\],\[t,o,p\]}, {o,\[p,o,l,o\]}, {\[g,i,c,a,l\],\[o^,l,o,g,i,c,a,l\]}\]).%% Then by macro expansion, we get:%% \[{\[t,o\], \[t,o,p\]} o non_markers,\[\]x ibl,%% {o,\[p,o,l,o\]} o non_markers,\[\]x ibl,%% {\[g,i,c,a,l\],\[o',l,o,g,i,c,a,l\]} o non_markers,\[\]x ibl\]%% o%% % Filter i: {\[t,o\],\[t,o,p\]} gets longest match%% - \[ignx_l(non_markers({ \[t,o\] , \[t,o,p\] }),ibl) ,%% ign(non_markers({o, \[p,o,l,o\] }) ,ibl) ,%% ign(non_markers({ \[g,i,c,a,l\] , \[o^,l,o,g,i,c,a,l\] }) ,ibl)\]%% o%% % Filter 2: {o,\[p,o,l,o\]} gets longest match%% ~ \[non_markers ({ \[t, o\] , \[t, o, p\] }) , Ib i,%% ignx_l(non_markers ({o, \[p,o,l,o\] }) ,ibl),%% ign(non_markers({ \[g, i,c,a,l\] , \[o',l,o,g,i,c,a,l\] }) ,ibl)\]macro(mark_boundaries(L),Exp):-boundaries(L,ExpO), % guess boundary positionsgreed(L,ExpO,Exp).
% filter non-longest matchesboundaries(\[\],\[\]).boundaries(\[FIRO\],\[F o non_markers, \[\] x ibl \]R\]):- boundaries(RO,R).greed(L,ComposedO,Composed) :-aux_greed(L,\[\],Filters), compose_list(Filters,ComposedO,Composed).aux_greed(\[HIT\],Front,Filters):- aux_greed(T,H,Front,Filters,_CurrentFilter).aux_greed(\[\],F,_,\[\],\[ign(non_markers(F),Ibl)\]).aux_greed(\[HlRO\],F,Front,\[-LiIR\],\[ign(non_markers(F),ibl)IRl\]) "-append(Front,\[ignx_l(non_markers(F),Ibl)IRl\],Ll),append(Front,\[non_markers(F),ibl\],NewFront),aux_greed(RO,H,NewFront,R,Rl).%% ignore at least one instance of E2 except at endmacro(ignx_l(E1,E2), range(El o \[\[?
*,\[\] x E2\]+,?
+\])).compose_list(\[\],SoFar,SoFar).compose_list(\[FlR\],SoFar,Composed):- compose_list(R,(SoFar o F),Composed).Figure 2: Definition of lm_concat operator.132Proceedings of EACL '99parsing is robustness.
A constituent is found bot-tom up in an early level in the cascade ven ifthat constituent does not ultimately contributeto an S in a later level of the cascade.
Whilethis is undoubtedly an advantage for certain ap-plications, our approach would allow the intro-duction of some top-down filtering while main-taining the robustness of a bottom-up approach.A second advantage for robust finite state pars-ing is that bracketing could also include the no-tion of "repair" as in Abney (1990).
One might,for example, want to say something like: xy\[NP RepairDet(x) RepairN(y) \]/)~__p 7 so that anNP could be parsed as a slightly malformed Detfollowed by a slightly malformed N. RepairDetand RepairN, in this example, could be doing avariety of things such as: contextualized spellingcorrection, reordering of function words, replace-ment of phrases by acronyms, or any other oper-ation implemented asa transducer.Finally, we should mention the problem of com-plexity.
A critical reader might see the nine stepsin our algorithm and conclude that the algorithmis overly complex.
This would be a false conclu-sion.
To begin with, the problem itself is complex.It is easy to create examples where the resultingtransducer created by any algorithm would be-come unmanageably large.
But there exist strate-gies for keeping the transducers smaller.
For ex-ample, it is not necessary for all nine steps tobe composed.
They can also be cascaded.
Inthat case it will be possible to implement differentsteps by different strategies, e.g.
by determinis-tic or non-deterministic transducers orbimachines(Roche and Schabes, 1997b).
The range of possi-bilities leaves plenty of room for future research.Re ferencesSteve Abney.
1990.
Rapid incremental parsingwith repair.
In Proceedings of the 6th New OEDConference: Electronic Text Rese arch, pages1-9.Steven Abney.
1996.
Partial parsing via finite-state cascades.
In Proceedings of the ESSLLI'96 Robust Parsing Workshop..Jeffrey Friedl.
1997.
Mastering Regular Expres-sions.
O'Reilly & Associates, Inc.C.
Douglas Johnson.
1972.
Formal Aspectsof Phonological Descriptions.
Mouton, TheHague.7The syntax here has been simplified.
The ruleshould be understood as: replace(lm_concat(\[\[\]:'\[np',repair_det, repair_n, \[\]:'\]'\],lambda, rho).Ronald Kaplan and Martin Kay.
1994.
Regularmodels of phonological rule systems.
Computa-tional Linguistics, 20(3):331-379.L.
Karttunen, J-P. Chanod, G. Grefenstette, andA.
Schiller.
1996.
Regular expressions for lan-guage ngineering.
Natural Language Engineer-ing, 2(4):305-238.Lauri Karttunen.
1995.
The replace operator.In 33th Annual Meeting of the Association forComputational Linguistics, M.I.T.
CambridgeMass.Lauri Karttunen.
1996.
Directed replacement.In 34th Annual Meeting of the Association forComputational Linguistics, Santa Cruz.Lauri Karttunen.
1997.
The replace operator.In Emannual Roche and Yves Schabes, editors,Finite-State Language Processing, pages 117-147.
Bradford, MIT Press.Lauri Karttunen.
1998.
The proper treatmentof optimality theory in computational phonol-ogy.
In Finite-state Methods in Natural Lan-guage Processing, pages 1-12, Ankara, June.Nils Klarlund.
1997.
Mona & Fido: The logicautomaton connection i practice.
In CSL '97.Mehryar Mohri and Richard Sproat.
1996.
Anefficient compiler for weighted rewrite rules.In 3~th Annual Meeting of the Association forComputational Linguistics, Santa Cruz.Emmanuel Roche and Yves Schabes.
1995.
De-terministic part-of-speech tagging with finite-state transducers.
Computational Linguistics,21:227-263.
Reprinted in Roche & Schabes(1997).Emmanuel Roche and Yves Schabes, editors.1997a.
Finite-State Language Processing.
MITPress, Cambridge.Emmanuel Roche and Yves Schabes.
1997b.
In-troduction.
In Emmanuel Roche and Yves Sch-abes, editors, Finite-State Language Processing.MIT Press, Cambridge, Mass.Gertjan van Noord and Dale Gerdemann.
1999.An extendible regular expression compiler forfinite-state approaches in natural anguage pro-cessing.
In Workshop on Implementing Au-tomata 99, Potsdam Germany.Gertjan van Noord.
1997.
Fsa utilities.The FSA Utilities toolbox is available free ofcharge under Gnu General Public License athttp://www.let.rug.nl/-vannoord/Fsa/.133
