UNIF ICAT ION WITH LAZY NON-REDUNDANT COPY INGMartin C. Emele*Project PolyglossUniversity of StuttgartIMS-CL/IfLAIS, KeplerstraBe 17D 7000 Stuttgart 1, FRGemele~informatik.uni-stut tgax.deAbstractThis paper presents a unification pro-cedure which eliminates the redundantcopying of structures by using a lazy in-cremental copying appr0a~:h to achievestructure sharing.
Copying of structuresaccounts for a considerable amount ofthe total processing time.
Several meth-ods have been proposed to minimize theamount of necessary copying.
Lazy In-cremental Copying (LIC) is presented asa new solution to the copying problem.It synthesizes ideas of lazy copying withthe notion of chronological dereferencingfor achieving a high amount of structuresharing.IntroductionMany modern linguistic theories are using fea-ture structures (FS) to describe linguistic objectsrepresenting phonological, syntactic, and semanticproperties.
These feature structures are specifiedin terms of constraints which they must satisfy.It seems to be useful to maintain the distinctionbetween the constraint language in which featurestructure constraints are expressed, and the struc-tures that satisfy these constraints.
Unification isthe primary operation for determining the satisfia-bility of conjunctions of equality constraints.
Theefficiency of this operation is thus crucial for theoverall efficiency of any system that uses featurestructures.Typed Feature Structure UnificationIn unification-based grammar formalisms, unifica-tion is the meet operation on the meet semi-latticeformed by partially ordering the set of featurestructures by a subsumption relation \[Shieber 86\].Following ideas presented by \[Ait-Kaci 84\] andintroduced, for example, in the unification-basedformMism underlying HPSG \[Pollard and Sag 87\],first-order unification is extended to the sortedcase using an order-sorted signature instead of aflat one.In most existing implementations, descriptionsof feature structure constraints are not directlyused as models that satisfy these constraints; in-stead, they are represented by directed graphs(DG) serving as satisfying models.
In particular,in the case where we are dealing only with con-junctions of equality constraints, efficient graphunification algorithms exist.
The graph unifica-tion algorithm presented by Ait-Kaci is a node?
merging process using the UNION/FIND method(originMly used for testing the equivalence of fi-nite automata \[Hopcroft/Karp 71\]).
It has itsanalogue in the unification algorithm for rationalterms based on a fast procedure for congruenceclosure \[Huet 76\].Node merg ing  is a dest ruct ive  operat ionSince actual merging of nodes to build newnode equivalence classes modifies the argumentDGs, they must be copied before unification is in-voked if the argument DGs need to be preserved.For example, during parsing there are two kinds ofrepresentations that must be preserved: first, lexi-cal entries and rules must be preserved.
They needto be copied first before a destructive unificationoperation can be applied to combine categories toform new ones; and second, nondeterminism inparsing requires the preservation of intermediaterepresentations that might be used later when theparser comes back to a choice point to try someyet unexplored options.
*Research reported in this paper is partly supported by the German Ministry of Research and Technology (BMFT, Bun-desmlnister filr Forschung und Technologie), under grant No.
08 B3116 3.
The views and conclusions contained herein arethose of the authors and should not be interpreted asrepresenting official policies.323DG copying as a source of  ineff ic iencyPrevious research on unification, in partic-ular on graph unification \[Karttunen/Kay 85,Pereira 85\], and others, identified DG copying asthe main source of inefficiency.
The high cost interms of time spent for copying and in terms ofspace required for the copies themselves accountsfor a significant amount of the total processingtime.
Actually, more time is spent for copyingthan for unification itself.
Hence, it is crucial toreduce the amount of copying, both in terms ofthe number and of the size of copies, in order toimprove the efficiency of unification.A naive implementation of unification wouldcopy the arguments even before unification starts.That is what \[Wroblewski 87\] calls early copying.Early copying is wasted effort in cases of fail-ure.
He also introduced the notion of over copy-ing, which results from copying both arguments intheir entirety.
Since unification produces its resultby merging the two arguments, the result usuallycontains ignificantly fewer nodes than the sum ofthe nodes of the argument DGs.Incremental  CopyingWroblewski's nondestructive graph unificationwith incremental copying eliminates early copy-ing and avoids over copying.
His method pro-duces the resulting DG by incrementally copyingthe argument DGs.
An additional copy field inthe DG structure is used to associate temporaryforwarding relationships to copied nodes.
Onlythose copies are destructively modified.
Finally,the copy of the newly constructed root will be re-turned in case of success, and all the copy pointerswill be invalidated in constant ime by increment-ing a global generation counter without traversingthe arguments again, leaving the arguments un-changed.Redundant  Copy ingA problem arises with Wroblewski's account,because the resulting DG consists only of newlycreated structures even if parts of the input DGsthat are not changed could be shared with the re-sultant DG.
A better method would avoid (elim-inate) such redundant copying as it is called by\[Kogure 90\].Structure Shar ingThe concept of structure sharing has been intro-duced to minimize the amount of copying by allow-ing DGs to share common parts of their structure.The  Boyer  and Moore  approach  uses askeleton/environment representation for structuresharing.
The basic idea of structure sharing pre-sented by \[Pereira 85\], namely that an initial ob-ject together with a list of updates contains thesame information as the object that results fromapplying the updates destructively to the initialobject, uses a variant of Boyer and Moore's ap-proach for structure sharing of term structures\[Boyer/Moore 72\].
The method uses a skeleton forrepresenting the initial DG that will never changeand an environment for representing updates tothe skeleton.
There are two kinds of updates:reroutings that forward one DG node to another;arc bindings that add to a node a new arc.Lazy Copy ing  as another method to achievestructure sharing is based on the idea of lazyevaluation.
Copying is delayed until a destruc-tive change is about to happen.
Lazy copy-ing to achieve structure sharing has been sug-gested by \[Karttunen/Kay 85\], and lately againby \[Godden 90\] and \[Uogure 90\].Neither of these methods fully avoids redun-dant copying in cases when we have to copy anode that is not the root.
In general, all nodesalong the path leading from the root to the siteof an update need to be copied as well, even ifthey are not affected by this particular unifica-tion step, and hence could be shared with the re-sultant DG.
Such cases seem to be ubiquitous inunification-based parsing since the equality con-straints of phrase structure rules lead to the unifi-cation of substructures associated with the imme-diate daughter and mother categories.
With re-spect to the overall structure that serves as the re-sult of a parse, these unifications of substructuresare even further embedded, yielding a considerableamount of copying that should be avoided.All of these methods require the copying of arcsto a certain extent, either in the form of new arcbindings or by copying arcs for the resultant DG.Lazy  Incrementa l  Copy ingWe now present Lazy Incremental Copying (LIC)as a new approach to the copying problem.
Themethod is based on Wroblewski's idea of incremen-tally producing the resultant DG while unificationproceeds, making changes only to copies and leav-ing argument DGs untouched.
Copies are associ-ated with nodes of the argument DGs by means324s b ?
d ?
|Figure 1: Chronological dereferencing.of an additional copy field for the data structuresrepresenting nodes.
But instead of creating copiesfor all of the nodes of the resultant DG, copyingis done lazily.
Copying is required only in caseswhere an update to an initial node leads to a de-structive change.The Lazy Incremental Copying method con-stitutes a synthesis of Pereira's tructure sharingapproach and Wroblewski's incremental copyingprocedure combining the advantages and avoid-ing disadvantages of both methods.
The struc-ture sharing scheme is imported into Wroblewski'smethod eliminating redundant copying.
Instead ofusing a global branch environment as in Pereira'sapproach, each node records it's own updates bymeans of the copy field and a generation counter.The advantages are a uniform unification proce-dure which makes complex merging of environ-ments obsolete and which can be furthermore eas-ily extended to handle disjunctive constraints.Data StructuresCopyNode structuretype:arcs:copy:generation:<symbol><a list of ARCs><a pointer to a CopyNode><an integer>ARC structurelabel: <symbol>dest: <a CopyNode>DereferencingThe main difference between standard unificationalgorithms and LIC is the treatment of dereferencepointers for representing node equivalence classes.The usual dereferencing operation follows a possi-ble pointer chain until the class representative isfound, whereas in LIC dereferencing is performedaccording to the current environment.
Each copy-node carries a generation counter that indicatesto which generation it belongs.
This means thatevery node is connected with its derivational con-text.
A branch environment is represented as a se-quence of valid generation counters (which couldbe extended to trees of generations for represent-ing local disjunctions).
The current generation isdefined by the last element in this sequence.
Acopynode is said to be an active node if it wascreated within the current generation.Nondeterminism during parsing or during theprocesss of checking the satisfiability of constraintsis handled through chronological backtracking, i.e.in case of failure the latest remaining choice is re-examined first.
Whenever we encounter a choicepoint, the environment will be extended.
Thelength of the environment corresponds to the num-ber of stacked choice points.
For every choice pointwith n possible continuations, n -  1 new gener-ation counters are created.
The last alternativepops the last element from the environment, con-tinues with the old environment and produces nDG representations, one for each alternative.
Bygoing back to previous generations, already exist-ing nodes become active nodes, and are thus mod-ified destructively.
This technique resembles thelast call optimization technique of some Prolog ira-?
plementations, e.g.
for the WAM \[Warren83\].
Thehistory of making choices is reflected by the deref-erencing chain for each node which participated indifferent unifications.Figure 1 is an example which illustrates howdereferencing works with respect o the environ-ment: node b is the class representative for envi-ronment <0>, node c is the result of dereferenc-ing for environments <0 1> and <0 1 2>, and fi-nally node f corresponds to the representative forthe environment <0 I 2 3> and all further exten-sions that did not add a new forwarding pointerto newly created copynodes.325Q~I, .QCam) 1: ck~ructive mergeCmo 2: tJmvm~JJng to tho ~tJvo nodo?
-q) - -  .
.
.
.
--q)Cme S: i~wemen~ ~ i  by cn~lng anm t.:tlve mtdeFigure 2: Node merging.Advantagesa le :of this new dereferencing scheme?
It is very easy to undo the effects of uni-fication upon backtracking.
Instead of us-ing trail information which records the nodesthat must be restored in case of returning toa previous choice point, the state of com-putation at that choice point is recovered inconstant ime by activating the environmentwhich is associated with that choice point.Dereferencing with respect to the environ-ment will assure that the valid class repre-sentative will always be found.
Pointers tonodes that do not belong to the current en-vironment are ignored.?
It is no longer necessary to distinguish be-tween the forward and copy slot for repre-senting permanent and temporary relation-ships as it was needed in Wroblewski's algo-rithm.
One copy field for storing the copypointer is sufficient, thus reducing the sizeof node structures.
Whether a unificationleads to a destructive change by performinga rerouting that can not be undone, or toa nondestructive update by rerouting to acopynode that belongs to a higher genera-tion, is reexpressed by means of the environ-ment.Lazy  Non- redundant  Copy ingUnification itself proceeds roughly like a standarddestructive graph unification algorithm that hasbeen adapted to the order-sorted case.
The dis-tinction between active and non-active nodes al-lows us to perform copying lazily and to eliminateredundant copying completely.Recall that a node is an active one if it belongsto the current generation.
We distinguish betweenthree cases when we merge two nodes by unifyingthem: (i) both are active nodes, (ii) either one ofthem is active, or (iii) they are both non-active.In the first case, we yield a destructive merge ac-cording to the current generation.
No copying hasto be done.
If either one of the two nodes is ac-tive, the non-active node is forwarded to the ac-tive one.
Again, no copying is required.
When wereset computation to a previous state where thenon-active node is reactivated, this pointer is ig-nored.
In the third case, if there is no active nodeyet, we know that a destructive change to an en-vironment hat must be preserved could occur bybuilding the new equivalence class.
Instead, a newcopynode will be created under the current activegeneration and both nodes will be forwarded to thenew copy.
(For illustration cf.
Figure 2.)
Noticethat it is not necessary to copy arcs for the methodpresented here.
Instead of collecting all arcs whiledereferencing nodes, they are just carried over tonew copynodes without any modification.
That isdone as an optimization to speed up the compu-tation of arcs that occur in both argument nodesto be unified (Sharedhrcs)  and the arcs that areunique with respect o each other (Un?queArcs).326"1 v \ \- .
.
.
.0;  .
rein (lenderFigure 3: A unification example.The unification algorithm is shown in Fig-ure 4 and Figure 3 illustrates its application toa concrete xample of two successive unifications.Copying the nodes that have been created by thefirst unification do not need to be copied again forthe second unification that is applied at the nodeappearing as the value of the path pred.verb,saving five Copies in comparison to the other lazycopying methods.Another advantage of the new approach isbased on the ability to switch easily between de-structive and non-destructive unification.
Duringparsing or during the process of checking the satis-fiability of constraints via backtracking, there arein general several choice points.
For every choicepoint with n possible continuations, n - 1 lazyincremental copies of the DG are made using non-destructive unification.
The last alternative con-tinues destructively, resembling the last cMl op-timization technique of Prolog implemelitations,yielding n DG representations, one for each al-ternative.
Since each node reflects its own up-date history for each continuation path, all un-changed parts of the DG are shared.
To sumup, derived DG instances are shared with inputDG representations and updates to certain nodesby means of copy nodes are shared by differentbranches of the search space.
Each new updatecorresponds to a new choice point in chronologicalorder.
The proposed environment representationfacilitates memory management for allocating anddeallocating copy node structures which is veryimportant for the algorithm to be efficient.
Thisholds, in particular, if it takes much more time tocreate new structures than to update old reclaimedstructures.Compar i son  w i th  o ther  ApproachesKarttunen's Reversible Unification \[Karttunen 86\]does not use structure sharing at M1.
A new DG iscopied from the modified arguments after success-ful unification, and the argument DGs are thenrestored to their original state by undoing all thechanges made during unification hence requiring asecond pass through the DG to assemble the resultand adding a constant ime for the save operationbefore each modification.As it has been noticed by \[Godden 90\] and\[Kogure 90\], the key idea of avoiding "redundantcopying" is to do copying lazily.
Copying of nodeswill be delayed until a destructive change is aboutto take place.Godden uses active data structures (Lisp clo-sures) to implement lazy evaluation of copying,and Kogure uses a revised copynode procedurewhich maintains copy dependency information inorder to avoid immediate copying.327 ~.procedure  un i fy (node l ,node2 : CopyNode)nodel  *-- dere f (node l )node2 ~- deter (node2)IF  node1 = node2 THEN return(nodel)ELSEnewtype ~- nodel .
type A node2.typeI F  newtype = I THEN re turn( l )ELSE<SharedArcs l ,  SharedArcs2> ~- SharedArcs(nodel ,node2)<UniqueArcs l ,  UniqueArcs2> ~- UniqueArcs(nodel ,node2)IF  Act iveP(nodel)  THENnode ~- nodelnode.arcs  ~- node.arcs U UniqueArcs2node2.copy ~- nodeELSEI F  Act iveP(node2) THENnode ~- node2node.arcs  ~- node.arcs LJ UniqueArcs lnodel ,copy *- nodeELSEnode ~- CreateCopyNodenode l .copy *- nodenode2.copy ~- nodenode.arcs  ~- UniqueArcs l  U SharedArcsl  U UniqueArcs2ENDIFENDIFnode.
type ~- newtypeFOR EACH <SharedArcl ,  SharedArc2>IN  <SharedArcsl ,  SharedArcs2>DO un i fy (SharedArc l .des t ,SharedArc2 .dest )re turn(node)ENDIFENDIFEND unifyFigure 4: The unification procedure328approachearlycopyingovercopyingmethodsyeslazycopyingredundant incr.copying copyingyes nono noyes noyes noyes yesyes noyes nono yesstructuresharingyesnaive yes yes no noPereira 85 no no no yesKarttunen/Kay 85 no no yes yesKarttunen 86 no no no noWroblewski 87 no yes no noGodden 90 no no yes yesKogure 90 no yes yes yesLIC noFigure 5: Comparison of unification approachesyesBoth of these approaches suffer from difficul-ties of their own.
In Godden's case, part of thecopying is substituted/traded for by the creationof active data structures (Lisp closures), a poten-tially very costly operation, even where it wouldturn out that those closures remain unchanged inthe final result; hence their creation is unneces-sary.
In addition, the search for already existinginstances of active data structures in the copy en-vironment and merging of environments for suc-cessive unifications causes an additional overhead.Similarly, in Kogure's approach, not all redun-dant copying is avoided in cases where there existsa feature path (a sequence of nodes connected byarcs) to a node that needs to be copied.
All thenodes along such a path must be copied, even ifthey are not affected by the unification procedure.Furthermore, special copy dependency informa-tion has to be maintained while copying nodes inorder to trigger copying of such arc sequences lead-ing to a node where copying is needed later in theprocess of unification.
In addition to the overheadof storing copy dependency information, a secondtraversal of the set of dependent nodes is requiredfor actually performing the copying.
This copyingitself might eventually trigger further copying ofnew dependent nodes.The table of Figure 5 summarizes the differentunification approaches that have been discussedand compares them according to the concepts andmethods they use.ConclusionThe lazy-incremental copying (LIC) method usedfor the unification algorithm combines incremen-tal copying with lazy copying to achieve structuresharing.
It eliminates redundant copying in allcases even where other methods till copy over.The price to be paid is counted in terms of thetime spent for dereferencing but is licensed for bythe gain of speed we get through the reductionboth in terms of the number of copies to be madeand in terms of the space required for the copiesthemselves.The algorithm has been implemented in Com-mon Lisp and runs on various workstation ar-chitectures.
It is used as the essential oper-ation in the implementation of the interpreterfor the Typed Features Structure System (TFS\[gmele/Zajac 90a, Emele/Zajac 90b\]).
The for-malism of TFS is based on the notion of inher-itance and sets of constraints that categories ofthe sort signature must satisfy.
The formalismsupports to express directly principles and gen-eralizations of linguistic theories as they are for-mulated for example in the framework of HPSG\[Pollard and Sag 87\].
The efficiency of the LIC ap-proach has been tested and compared with Wrob-lewski's method on a sample grammar of HPSGusing a few test sentences for parsing and gener-ation.
The overall processing time is reduced by60% - 70% of the original processing time.
See\[Emele 91\] for further discussion of optimizationsavailable for specialized applications of this gen-eral unification algorithm.
This paper also pro-vides a detailed metering statistics for all of theother unification algorithms that have been com-pared.References\[A'ft-Kaci 84\] Hassan Ait-Kaci.
A Lattice Theo-retic Approach to Computation based on a Cal-culus of Partially Ordered Types Structures.Ph.D Dissertation, University of Pennsylvania,1984.\[A'/t-Kaci 86\] Hassan A'/t-Kaci.
An algebraic se-mantics approach to the effective resolution oftype equations.
Theoretical Computer Science45, pp.
293-351, 1986\[Boyer/Moore 72\] R. S. Boyer and J. S. Moore.The sharing of structures in theorem-provingprograms.
In B. Meltzer and D. Mitchie (eds.
),Machine Intelligence 7, pp.
101-116, John Wi-ley and Sons, New York, New York, 1972.\[Emele/Zajac 90a\] Martin C. Emele and R~mi Za-jac.
A fix-point semantics for feature type sys-tems.
In Proceedings of the 2 nd InternationalWorkshop on Conditional and Typed RewritingSystems, CTRS'90, Montreal, June 1990.\[Emele/Zajac 90hi Martin C. Emele and R~miZajac.
Typed unification grammars.
In Proceed-ings of 13 th International Conference on Com-putational Linguistics, COLING-90, Helsinki,August 1990.\[Emele 91\] Martin C. Emele.
Graph Unificationusing Lazy Non-Redundant Copying.
Techni-cal Report AIMS 04-91, Institut fiir maschinelleSprachverarbeitung, University of Stuttgart,1991.\[Godden 90\] Kurt Godden.
Lazy unification.
InProceedings of the 28 th, Annual Meeting ofthe Association for Computational Linguistics,ACL, pp.
180-187, Pittsburgh, PA, 1990.\[Huet 76\] G~rard Huet.
Rdsolution d'Equationsdons des Langages d'Ordre 1, 2, .
.
.
,  w. Th~sede Doctorat d'Etat, Universit~ de Paris VII,France.
1976.\[Hopcroft/Karp 71\] J. E. Hopcroft and R. M.Karl).
An Algorithm for testing the Equivalenceof Finite Automata.
Technical report TR-71-114, Dept.
of Computer Science, Corneil Uni-versity, Ithaca, NY, 1971.\[Karttunen 86\] Lauri Karttunen.
D-PATR: A De-velopment Environment for Unification-BasedGrammars.
Technical Report CSLI-86-61, Cen-ter for the Study of Language and Information,Stanford, August, 1986.\[Karttunen/Kay 85\] Lauri Karttunen and Mar-tin Kay.
Structure sharing with binary trees.In Proceedings of the 23 rd Annual Meeting ofthe Association for Computational Linguistics,ACL, pp.
133-136a, Chicago, IL, 1985.\[Kogure 90\] Kiyoshi Kogure.
Strategic lazy in-cremental copy graph unification.
In Proceed-ings of the 13 th Intl.
Conference on Compu-tational Linguistics, COLING-90, pp.
223-228,Helsinki, 1990.\[Pereira 85\] Fernando C.N.
Pereira.
A structure-sharing representation for unification-basedgrammar formalisms.
In Proceedings of the23 rd Annual Meeting of the Association forComputational Linguistics, ACL, pp.
137-144,Chicago, IL, 1985.\[Pereira/Shieber 84\] Fernando C.N.
Pereira andStuart Shieber.
The semantics of grammar for-malisms een as computer languages.
In Pro-ceedings of the lOth Intl.
Conference on Com-putational Linguistics, COLING-84, Stanford,1984.\[Pollard and Sag 87\] Carl Pollard and Ivan Sag.b~formation-Based Syntax and Semantics, Vol-ume L CSLI Lecture Notes No 13.
Chicago Uni-versity Press, Chicago, 1987.\[Rounds/Kasper 86\] Williams C. Rounds and R.Kasper.
A complete logical calculus for recordstructures representing linguistic information.In IEEE Symposium on Logic in Computer Sci-ence, 1986.\[Shieber 86\] Stuart M. Shieber.
An Introductionto Unification-based Approaches to Grammar.CSLI Lecture Notes No 4.
Chicago UniversityPress, Chicago, 1986.\[Warren 83\] David H. D. Warren.
An AbstractProlog Instruction Set.
Technical Note 309, SRIInternational, Menlo Park, CA, 1983.\[Wroblewski 87\] David A. Wroblewski.
Nonde-structive graph unification.
In Proceedings ofthe 6 th National Conference on Artificial Intel-ligence, AAAI, pp.
582-587, Seattle, WA, 1987.330
