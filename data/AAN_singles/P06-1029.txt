Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL, pages 225?232,Sydney, July 2006. c?2006 Association for Computational LinguisticsApproximation Lasso Methods for Language ModelingJianfeng GaoMicrosoft ResearchOne Microsoft WayRedmond WA 98052 USAjfgao@microsoft.comHisami SuzukiMicrosoft ResearchOne Microsoft WayRedmond WA 98052 USAhisamis@microsoft.comBin YuDepartment of StatisticsUniversity of CaliforniaBerkeley., CA 94720 U.S.A.binyu@stat.berkeley.eduAbstractLasso is a regularization method for pa-rameter estimation in linear models.
It op-timizes the model parameters with respectto a loss function subject to model com-plexities.
This paper explores the use oflasso for statistical language modeling fortext input.
Owing to the very large numberof parameters, directly optimizing the pe-nalized lasso loss function is impossible.Therefore, we investigate two approxima-tion methods, the boosted lasso (BLasso)and the forward stagewise linear regres-sion (FSLR).
Both methods, when usedwith the exponential loss function, bearstrong resemblance to the boosting algo-rithm which has been used as a discrimi-native training method for language mod-eling.
Evaluations on the task of Japanesetext input show that BLasso is able toproduce the best approximation to thelasso solution, and leads to a significantimprovement, in terms of character errorrate, over boosting and the traditionalmaximum likelihood estimation.1 IntroductionLanguage modeling (LM) is fundamental to awide range of applications.
Recently, it has beenshown that a linear model estimated using dis-criminative training methods, such as the boost-ing and perceptron algorithms, outperformssignificantly a traditional word trigram modeltrained using maximum likelihood estimation(MLE) on several tasks such as speech recogni-tion and Asian language text input (Bacchiani etal.
2004; Roark et al 2004; Gao et al 2005; Suzukiand Gao 2005).The success of discriminative training meth-ods is largely due to fact that unlike the tradi-tional approach (e.g., MLE) that maximizes thefunction (e.g., likelihood of training data) that isloosely associated with error rate, discriminativetraining methods aim to directly minimize theerror rate on training data even if they reduce thelikelihood.
However, given a finite set of trainingsamples, discriminative training methods couldlead to an arbitrary complex model for the pur-pose of achieving zero training error.
It iswell-known that complex models exhibit highvariance and perform poorly on unseen data.Therefore some regularization methods have tobe used to control the complexity of the model.Lasso is a regularization method for parame-ter estimation in linear models.
It optimizes themodel parameters with respect to a loss functionsubject to model complexities.
The basic idea oflasso is originally proposed by Tibshirani (1996).Recently, there have been several implementa-tions and experiments of lasso on multi-classclassification tasks where only a small number offeatures need to be handled and the lasso solu-tion can be directly computed via numericalmethods.
To our knowledge, this paper presentsthe first empirical study of lasso for a realistic,large scale task: LM for Asian language text in-put.
Because the task utilizes millions of featuresand training samples, directly optimizing thepenalized lasso loss function is impossible.Therefore, two approximation methods, theboosted lasso (BLasso, Zhao and Yu 2004) andthe forward stagewise linear regression (FSLR,Hastie et al 2001), are investigated.
Both meth-ods, when used with the exponential loss func-tion, bear strong resemblance to the boostingalgorithm which has been used as a discrimina-tive training method for LM.
Evaluations on thetask of Japanese text input show that BLasso isable to produce the best approximation to thelasso solution, and leads to a significant im-provement, in terms of character error rate, overthe boosting algorithm and the traditional MLE.2 LM Task and Problem DefinitionThis paper studies LM on the application ofAsian language (e.g.
Chinese or Japanese) textinput, a standard method of inputting Chinese orJapanese text by converting the input phoneticsymbols into the appropriate word string.
In thispaper we call the task IME, which stands for225input method editor, based on the name of thecommonly used Windows-based application.Performance on IME is measured in terms ofthe character error rate (CER), which is thenumber of characters wrongly converted fromthe phonetic string divided by the number ofcharacters in the correct transcript.Similar to speech recognition, IME is viewedas a Bayes decision problem.
Let A be the inputphonetic string.
An IME system?s task is tochoose the most likely word string W* amongthose candidates that could be converted from A:)|()(maxarg)|(maxarg(A))(* WAPWPAWPWWAW GENGEN ?
?==  (1)where GEN(A) denotes the candidate set given A.Unlike speech recognition, however, there is noacoustic ambiguity as the phonetic string is in-putted by users.
Moreover, we can assume aunique mapping from W and A in IME as wordshave unique readings, i.e.
P(A|W) = 1.
So thedecision of Equation (1) depends solely uponP(W), making IME an ideal evaluation test bedfor LM.In this study, the LM task for IME is formu-lated under the framework of linear models (e.g.,Duda et al 2001).
We use the following notation,adapted from Collins and Koo (2005):?
Training data is a set of example in-put/output pairs.
In LM for IME, training sam-ples are represented as {Ai, WiR}, for i = 1?M,where each Ai is an input phonetic string and WiRis the reference transcript of Ai.?
We assume some way of generating a set ofcandidate word strings given A, denoted byGEN(A).
In our experiments, GEN(A) consists oftop n word strings converted from A using abaseline IME system that uses only a word tri-gram model.?
We assume a set of D+1 features fd(W), for d= 0?D.
The features could be arbitrary functionsthat map W to real values.
Using vector notation,we have f(W)?
?D+1, where f(W) = [f0(W), f1(W),?, fD(W)]T. f0(W) is called the base feature, and isdefined in our case as the log probability that theword trigram model assigns to W. Other features(fd(W), for d = 1?D) are defined as the counts ofword n-grams (n = 1 and 2 in our experiments) inW.?
Finally, the parameters of the model form avector of D+1 dimensions, each for one featurefunction, ?
= [?0, ?1, ?, ?D].
The score of a wordstring W can be written as)(),( WWScore ?f?
= ?==Dddd Wf?0)( .
(2)The decision rule of Equation (1) is rewritten as),(maxarg),((A)* ?
?GENWScoreAWW?= .
(3)Equation (3) views IME as a ranking problem,where the model gives the ranking score, notprobabilities.
We therefore do not evaluate themodel via perplexity.Now, assume that we can measure the num-ber of conversion errors in W by comparing itwith a reference transcript WR using an errorfunction Er(WR,W), which is the string edit dis-tance function in our case.
We call the sum oferror counts over the training samples sample risk.Our goal then is to search for the best parameterset ?
which minimizes the sample risk, as inEquation (4):?==MiiiRidefMSR AWW...1* )),(,Er(minarg ???.
(4)However, (4) cannot be optimized easily sinceEr(.)
is a piecewise constant (or step) function of ?and its gradient is undefined.
Therefore, dis-criminative methods apply different approachesthat optimize it approximately.
The boostingalgorithm described below is one of such ap-proaches.3 BoostingThis section gives a brief review of the boostingalgorithm, following the description of somerecent work (e.g., Schapire and Singer 1999;Collins and Koo 2005).The boosting algorithm uses an exponentialloss function (ExpLoss) to approximate the sam-ple risk in Equation (4).
We define the margin ofthe pair (WR, W) with respect to the model ?
as),(),(),( ??
WScoreWScoreWWM RR ?=  (5)Then, ExpLoss is defined as?
?= ?
?=Mi AWiRiiiWWM...1 )()),(exp()ExpLoss(GEN?
(6)Notice that ExpLoss is convex so there is noproblem with local minima when optimizing it.
Itis shown in Freund et al (1998) and Collins andKoo (2005) that there exist gradient search pro-cedures that converge to the right solution.Figure 1 summarizes the boosting algorithmwe used.
After initialization, Steps 2 and 3 are1 Set ?0 = argmin?0ExpLoss(?
); and ?d = 0 for d=1?D2 Select a feature fk* which has largest estimatedimpact on reducing ExpLoss of Eq.
(6)3 Update ?k* ?
?k* + ?
*, and return to Step 2Figure 1: The boosting algorithm226repeated N times; at each iteration, a feature ischosen and its weight is updated as follows.First, we define Upd(?, k, ?)
as an updatedmodel, with the same parameter values as ?
withthe exception of ?k, which is incremented by ?
},...,,...,,{),,Upd( 10 Dkk ??????
+=?Then, Steps 2 and 3 in Figure 1 can be rewrittenas Equations (7) and (8), respectively.)),,d(ExpLoss(Upminarg*)*,(,??
?kkk?=  (7)*)*,,Upd( 1 ?ktt ?= ??
(8)The boosting algorithm can be too greedy:Each iteration usually reduces the ExpLoss(.)
ontraining data, so for the number of iterationslarge enough this loss can be made arbitrarilysmall.
However, fitting training data too welleventually leads to overfiting, which degradesthe performance on unseen test data (eventhough in boosting overfitting can happen veryslowly).Shrinkage is a simple approach to dealingwith the overfitting problem.
It scales the incre-mental step ?
by a small constant ?, ?
?
(0, 1).Thus, the update of Equation (8) with shrinkageis*)*,,Upd( 1 ?
?ktt ?= ??
(9)Empirically, it has been found that smaller valuesof ?
lead to smaller numbers of test errors.4 LassoLasso is a regularization method for estimation inlinear models (Tibshirani 1996).
It regularizes orshrinks a fitted model through an L1 penalty orconstraint.Let T(?)
denote the L1 penalty of the model,i.e., T(?)
= ?d = 0?D|?d|.
We then optimize themodel ?
so as to minimize a regularized lossfunction on training data, called lasso loss definedas)()ExpLoss(),LassoLoss( ???
T??
+=  (10)where T(?)
generally penalizes larger models (orcomplex models), and the parameter ?
controlsthe amount of regularization applied to the esti-mate.
Setting ?
= 0 reverses the LassoLoss to theunregularized ExpLoss; as ?
increases, the modelcoefficients all shrink, each ultimately becomingzero.
In practice, ?
should be adaptively chosento minimize an estimate of expected loss, e.g., ?decreases with the increase of the number ofiterations.Computation of the solution to the lasso prob-lem has been studied for special loss functions.For least square regression, there is a fast algo-rithm LARS to find the whole lasso path for dif-ferent ??
s (Obsborn et al 2000a; 2000b; Efron etal.
2004); for 1-norm SVM, it can be transformedinto a linear programming problem with a fastalgorithm similar to LARS (Zhu et al 2003).However, the solution to the lasso problem for ageneral convex loss function and an adaptive ?remains open.
More importantly for our pur-poses, directly minimizing lasso function ofEquation (10) with respect to ?
is not possiblewhen a very large number of model parametersare employed, as in our task of LM for IME.Therefore we investigate below two methods thatclosely approximate the effect of the lasso, andare very similar to the boosting algorithm.It is also worth noting the difference betweenL1 and L2 penalty.
The classical Ridge Regressionsetting uses an L2 penalty in Equation (10) i.e.,T(?)
= ?d = 0?D(?d)2, which is much easier tominimize (for least square loss but not for Ex-pLoss).
However, recent research (Donoho et al1995) shows that the L1 penalty is better suited forsparse situations, where there are only a smallnumber of features with nonzero weights amongall candidate features.
We find that our task isindeed a sparse situation: among 860,000 features,in the resulting linear model only around 5,000features have nonzero weights.
We then focus onthe L1 penalty.
We leave the empirical compari-son of the L1 and L2 penalty on the LM task tofuture work.4.1 Forward Stagewise LinearRegression (FSLR)The first approximation method we used is FSLR,described in (Algorithm 10.4, Hastie et al 2001),where Steps 2 and 3 in Figure 1 are performedaccording to Equations (7) and (11), respectively.)),,d(ExpLoss(Upminarg*)*,(,??
?kkk?=  (7)*))sign(*,,Upd( 1 ??
?= ?
ktt ??
(11)Notice that FSLR is very similar to the boostingalgorithm with shrinkage in that at each step, thefeature fk* that has largest estimated impact onreducing ExpLoss is selected.
The only differenceis that FSLR updates the weight of fk* by a smallfixed step size ?.
By taking such small steps, FSLRimposes some implicit regularization, and canclosely approximate the effect of the lasso in alocal sense (Hastie et al 2001).
Empirically, wefind that the performance of the boosting algo-rithm with shrinkage closely resembles that ofFSLR, with the learning rate parameter ?
corre-sponding to ?.2274.2 Boosted Lasso (BLasso)The second method we used is a modified ver-sion of the BLasso algorithm described in Zhaoand Yu (2004).
There are two major differencesbetween BLasso and FSLR.
At each iteration,BLasso can take either a forward step or a backwardstep.
Similar to the boosting algorithm and FSLR,at each forward step, a feature is selected and itsweight is updated according to Equations (12)and (13).)),,d(ExpLoss(Upminarg*)*,(,????kkk?
?==  (12)*))sign(*,,Upd( 1 ??
?= ?
ktt ??
(13)However, there is an important difference be-tween Equations (12) and (7).
In the boostingalgorithm with shrinkage and FSLR, as shown inEquation (7), a feature is selected by its impact onreducing the loss with its optimal update ?*.
Incontract, in BLasso, as shown in Equation (12),the optimization over ?
is removed, and for eachfeature, its loss is calculated with an update ofeither +?
or -?, i.e., the grid search is used forfeature selection.
We will show later that thisseemingly trivial difference brings a significantimprovement.The backward step is unique to BLasso.
Ineach iteration, a feature is selected and its weightis updated backward if and only if it leads to adecrease of the lasso loss, as shown in Equations(14) and (15):))sign(,,d(ExpLoss(Upminarg*0,?????=?kkkkk?
(14)))sign(*,,Upd( *1 ??
?
?= ?
ktt k?????
>???
),LassoLoss(),LassoLoss( if 11 tttt ??
(15)where ?
is a tolerance parameter.Figure 2 summarizes the BLasso algorithm weused.
After initialization, Steps 4 and 5 are re-peated N times; at each iteration, a feature ischosen and its weight is updated either backwardor forward by a fixed amount ?.
Notice that thevalue of ?
is adaptively chosen according to thereduction of ExpLoss during training.
The algo-rithm starts with a large initial ?, and then at eachforward step the value of ?
decreases until theExpLoss stops decreasing.
This is intuitivelydesirable: It is expected that most highly effectivefeatures are selected in early stages of training, sothe reduction of ExpLoss at each step in earlystages are more substantial than in later stages.These early steps coincide with the boosting stepsmost of the time.
In other words, the effect ofbackward steps is more visible at later stages.Our implementation of BLasso differs slightlyfrom the original algorithm described in Zhaoand Yu (2004).
Firstly, because the value of thebase feature f0 is the log probability (assigned bya word trigram model) and has a different rangefrom that of other features as in Equation (2), ?0 isset to optimize ExpLoss in the initialization step(Step 1 in Figure 2) and remains fixed duringtraining.
As suggested by Collins and Koo (2005),this ensures that the contribution of thelog-likelihood feature f0 is well-calibrated withrespect to ExpLoss.
Secondly, when updating afeature weight, if the size of the optimal updatestep (computed via Equation (7)) is smaller than?, we use the optimal step to update the feature.Therefore, in our implementation BLasso doesnot always take a fixed step; it may take stepswhose size is smaller than ?.
In our initial ex-periments we found that both changes (also usedin our implementations of boosting and FSLR)were crucial to the performance of the methods.1 Initialize ?0: set ?0 = argmin?0ExpLoss(?
), and ?d = 0for d=1?D.2 Take a forward step according to Eq.
(12) and (13),and the updated model is denoted by ?13 Initialize ?
= (ExpLoss(?0)-ExpLoss(?1))/?4 Take a backward step if and only if it leads to adecrease of LassoLoss according to Eq.
(14) and(15), where ?
= 0; otherwise5 Take a forward step according to Eq.
(12) and (13);update ?
= min(?, (ExpLoss(?t-1)-ExpLoss(?t))/?
);and return to Step 4.Figure 2: The BLasso algorithm(Zhao and Yu 2004) provides theoretical justi-fications for BLasso.
It has been proved that (1) itguarantees that it is safe for BLasso to start withan initial ?
which is the largest ?
that wouldallow an ?
step away from 0 (i.e., larger ?
?s cor-respond to T(?
)=0); (2) for each value of ?, BLassoperforms coordinate descent (i.e., reduces Ex-pLoss by updating the weight of a feature) untilthere is no descent step; and (3) for each stepwhere the value of ?
decreases, it guarantees thatthe lasso loss is reduced.
As a result, it can beproved that for a finite number of features and ?= 0, the BLasso algorithm shown in Figure 2converges to the lasso solution when ?
?
0.5 Evaluation5.1 SettingsWe evaluated the training methods describedabove in the so-called cross-domain languagemodel  adaptation paradigm, where we adapt amodel trained on one domain (which we call the228background domain) to a different domain (adap-tation domain), for which only a small amount oftraining data is available.The data sets we used in our experimentscame from five distinct sources of text.
A36-million-word Nikkei Newspaper corpus wasused as the background domain, on which theword trigram model was trained.
We used fouradaptation domains: Yomiuri (newspaper cor-pus), TuneUp (balanced corpus containingnewspapers and other sources of text), Encarta(encyclopedia) and Shincho (collection of novels).All corpora have been pre-word-segmented us-ing a lexicon containing 167,107 entries.
For eachof the four domains, we created training dataconsisting of 72K sentences (0.9M~1.7M words)and test data of 5K sentences (65K~120K words)from each adaptation domain.
The first 800 and8,000 sentences of each adaptation training datawere also used to show how different sizes oftraining data affected the performances of vari-ous adaptation methods.
Another 5K-sentencesubset was used as held-out data for each do-main.We created the training samples for discrimi-native learning as follows.
For each phoneticstring A in adaptation training data, we pro-duced a lattice of candidate word strings W usingthe baseline system described in (Gao et al 2002),which uses a word trigram model trained viaMLE on the Nikkei Newspaper corpus.
For effi-ciency, we kept only the best 20 hypotheses in itscandidate conversion set  GEN(A) for eachtraining sample for discriminative training.
Theoracle best hypothesis, which gives the minimumnumber of errors, was used as the reference tran-script of A.We used unigrams and bigrams that occurredmore than once in the training set as features inthe linear model of Equation (2).
The total num-ber of candidate features we used was around860,000.5.2 Main ResultsTable 1 summarizes the results of various modeltraining (adaptation) methods in terms of CER(%) and CER reduction (in parentheses) overcomparing models.
In the first column, thenumbers in parentheses next to the domain nameindicates the number of training sentences usedfor adaptation.Baseline, with results shown in Column 3, isthe word trigram model.
As expected, the CERcorrelates very well the similarity between thebackground domain and the adaptation domain,where domain similarity is measured in terms ofcross entropy (Yuan et al 2005) as shown in Col-umn 2.MAP (maximum a posteriori), with resultsshown in Column 4, is a traditional LM adapta-tion method where the parameters of the back-ground model are adjusted in such a way thatmaximizes the likelihood of the adaptation data.Our implementation takes the form of linearinterpolation as described in Bacchiani et al(2004): P(wi|h) = ?Pb(wi|h) + (1-?
)Pa(wi|h), wherePb is the probability of the background model, Pais the probability trained on adaptation datausing MLE and the history h corresponds to twopreceding words (i.e.
Pb and Pa are trigramprobabilities).
?
is the interpolation weight opti-mized on held-out data.Boosting, with results shown in Column 5, isthe algorithm described in Figure 1.
In our im-plementation, we use the shrinkage methodsuggested by Schapire and Singer (1999) andCollins and Koo (2005).
At each iteration, weused the following update for the kth featureZCZCkkk ???
++=+_log21  (16)where Ck+ is a value increasing exponentiallywith the sum of margins of (WR, W) pairs over theset where fk is seen in WR but not in W; Ck-  is thevalue related to the sum of margins over the setwhere fk is seen in W but not in WR.
?
is asmoothing factor (whose value is optimized onheld-out data) and Z is a normalization constant(whose value is the ExpLoss(.)
of training dataaccording to the current model).
We see that ?Z inEquation (16) plays the same role as ?
in Equation(9).BLasso, with results shown in Column 6, isthe algorithm described in Figure 2.
We find thatthe performance of BLasso is not very sensitive tothe selection of the step size ?
across training setsof different domains and sizes.
Although small ?is preferred in theory as discussed earlier, itwould lead to a very slow convergence.
There-fore, in our experiments, we always use a largestep (?
= 0.5) and use the so-called early stoppingstrategy, i.e., the number of iterations beforestopping is optimized on held-out data.In the task of LM for IME, there are millions offeatures and training samples, forming an ex-tremely large and sparse matrix.
We thereforeapplied the techniques described in Collins andKoo (2005) to speed up the training procedure.The resulting algorithms run in around 15 and 30minutes respectively for Boosting and BLasso toconverge on an XEON?
MP 1.90GHz machinewhen training on an 8K-sentnece training set.229The results in Table 1 give rise to several ob-servations.
First of all, both discriminative train-ing methods (i.e., Boosting and BLasso) outper-form MAP substantially.
The improvement mar-gins are larger when the background and adap-tation domains are more similar.
The phenome-non is attributed to the underlying differencebetween the two adaptation methods: MAP aimsto improve the likelihood of a distribution, so ifthe adaptation domain is very similar to thebackground domain, the difference between thetwo underlying distributions is so small thatMAP cannot adjust the model effectively.
Dis-criminative methods, on the other hand, do nothave this limitation for they aim to reduce errorsdirectly.
Secondly, BLasso outperforms Boostingsignificantly (p-value < 0.01) on all test sets.
Theimprovement margins vary with the training setsof different domains and sizes.
In general, incases where the adaptation domain is less similarto the background domain and larger training setis used, the improvement of BLasso is more visi-ble.Note that the CER results of FSLR are not in-cluded in Table 1 because it achieves very similarresults to the boosting algorithm with shrinkageif the controlling parameters of both algorithmsare optimized via cross-validation.
We shall dis-cuss their difference in the next section.5.3 DicussionThis section investigates what components ofBLasso bring the improvement over Boosting.Comparing the algorithms in Figures 1 and 2, wenotice three differences between BLasso andBoosting: (i) the use of backward steps in BLasso;(ii) BLasso uses the grid search (fixed step size)for feature selection in Equation (12) whileBoosting uses the continuous search (optimalstep size) in Equation (7); and (iii) BLasso uses afixed step size for feature update in Equation (13)while Boosting uses an optimal step size inEquation (8).
We then investigate these differ-ences in turn.To study the impact of backward steps, wecompared BLasso with the boosting algorithmwith a fixed step search and a fixed step update,henceforth referred to as F-Boosting.
F-Boostingwas implemented as Figure 2, by setting a largevalue to ?
in Equation (15), i.e., ?
= 103, to prohibitbackward steps.
We find that although thetraining error curves of BLasso and F-Boostingare almost identical, the T(?)
curves grow apartwith iterations, as shown in Figure 3.
The resultsshow that with backward steps, BLasso achievesa better approximation to the true lasso solution:It leads to a model with similar training errorsbut less complex (in terms of L1 penalty).
In ourexperiments we find that the benefit of usingbackward steps is only visible in later iterationswhen BLasso?s backward steps kick in.
A typicalexample is shown in Figure 4.
The early steps fitto highly effective features and in these stepsBLasso and F-Boosting agree.
For later steps,fine-tuning of features is required.
BLasso withbackward steps provides a better mechanismthan F-Boosting to revise the previously chosenfeatures to accommodate this fine level of tuning.Consequently we observe the superior perform-ance of BLasso at later stages as shown in ourexperiments.As well-known in linear regression models,when there are many strongly correlated fea-tures, model parameters can be poorly estimatedand exhibit high variance.
By imposing a modelsize constraint, as in lasso, this phenomenon isalleviated.
Therefore, we speculate that a betterapproximation to lasso, as BLasso with backwardsteps, would be superior in eliminating the nega-tive effect of strongly correlated features inmodel estimation.
To verify our speculation, weperformed the following experiments.
For eachtraining set, in addition to word unigram andbigram features, we introduced a new type offeatures called headword bigram.As described in Gao et al (2002), headwordsare defined as the content words of the sentence.Therefore, headword bigrams constitute a specialtype of skipping bigrams which can capturedependency between two words that may not beadjacent.
In reality, a large portion of headwordbigrams are identical to word bigrams, as twoheadwords can occur next to each other in text.
Inthe adaptation test data we used, we find thatheadword bigram features are for the most parteither completely overlapping with the word bi-gram features (i.e., all instances of headwordbigrams also count as word bigrams) or not over-lapping at all (i.e., a headword bigram feature isnot observed as a word bigram feature) ?
lessthan 20% of headword bigram features displayeda variable degree of overlap with word bigramfeatures.
In our data, the rate of completelyoverlapping features is 25% to 47% depending onthe adaptation domain.
From this, we can saythat the headword bigram features show moder-ate to high degree of correlation with the wordbigram features.We then used BLasso and F-Boosting to trainthe linear language models including both wordbigram and headword bigram features.
We findthat although the CER reduction by adding230headword features is overall very small, the dif-ference between the two versions of BLasso ismore visible in all four test sets.
Comparing Fig-ures 5 ?
8 with Figure 4, it can be seen that BLassowith backward steps outperforms the one with-out backward steps in much earlier stages oftraining with a larger margin.
For example, onEncarta data sets, BLasso outperforms F-Boostingafter around 18,000 iterations with headwordfeatures (Figure 7), as opposed to 25,000 itera-tions without headword features (Figure 4).
Theresults seem to corroborate our speculation thatBLasso is more robust in the presence of highlycorrelated features.To investigate the impact of using the gridsearch (fixed step size) versus the continuoussearch (optimal step size) for feature selection,we compared F-Boosting with FSLR since theydiffers only in their search methods for featureselection.
As shown in Figures 5 to 8, althoughFSLR is robust in that its test errors do not in-crease after many iterations, F-Boosting can reacha much lower error rate on three out of four testsets.
Therefore, in the task of LM for IME whereCER is the most important metric, the grid searchfor feature selection is more desirable.To investigate the impact of using a fixed ver-sus an optimal step size for feature update, wecompared FSLR with Boosting.
Although bothalgorithms achieve very similar CER results, theperformance of FSLR is much less sensitive to theselected fixed step size.
For example, we canselect any value from 0.2 to 0.8, and in most set-tings FSLR achieves the very similar lowest CERafter 20,000 iterations, and will stay there formany iterations.
In contrast, in Boosting, theoptimal value of ?
in Equation (16) varies with thesizes and domains of training data, and has to betuned carefully.
We thus conclude that in ourtask FSLR is more robust against different train-ing settings and a fixed step size for feature up-date is more preferred.6 ConclusionThis paper investigates two approximation lassomethods for LM applied to a realistic task with avery large number of features with sparse featurespace.
Our results on Japanese text input arepromising.
BLasso outperforms the boostingalgorithm significantly in terms of CER reductionon all experimental settings.We have shown that this superior perform-ance is a consequence of BLasso?s backward stepand its fixed step size in both feature selectionand feature weight update.
Our experimentalresults in Section 5 show that the use of backwardstep is vital for model fine-tuning after majorfeatures are selected and for coping with stronglycorrelated features; the fixed step size of BLassois responsible for the improvement of CER andthe robustness of the results.
Experiments onother data sets and theoretical analysis areneeded to further support our findings in thispaper.ReferencesBacchiani, M., Roark, B., and Saraclar, M. 2004.
Lan-guage model adaptation with MAP estimation andthe perceptron algorithm.
In HLT-NAACL 2004.
21-24.Collins, Michael and Terry Koo 2005.
Discriminativereranking for natural language parsing.
ComputationalLinguistics 31(1): 25-69.Duda, Richard O, Hart, Peter E. and Stork, David G.2001.
Pattern classification.
John Wiley & Sons, Inc.Donoho, D., I. Johnstone, G. Kerkyachairan, and D.Picard.
1995.
Wavelet shrinkage; asymptopia?
(withdiscussion), J. Royal.
Statist.
Soc.
57: 201-337.Efron, B., T. Hastie, I. Johnstone, and R. Tibshirani.2004.
Least angle regression.
Ann.
Statist.
32, 407-499.Freund, Y, R. Iyer, R. E. Schapire, and Y.
Singer.
1998.An efficient boosting algorithm for combining pref-erences.
In ICML?98.Hastie, T., R. Tibshirani and J. Friedman.
2001.
Theelements of statistical learning.
Springer-Verlag, NewYork.Gao, Jianfeng, Hisami Suzuki and Yang Wen.
2002.Exploiting headword dependency and predictiveclustering for language modeling.
In EMNLP 2002.Gao.
J., Yu, H., Yuan, W., and Xu, P. 2005.
Minimumsample risk methods for language modeling.
InHLT/EMNLP 2005.Osborne, M.R.
and Presnell, B. and Turlach B.A.
2000a.A new approach to variable selection in least squaresproblems.
Journal of Numerical Analysis, 20(3).Osborne, M.R.
and Presnell, B. and Turlach B.A.
2000b.On the lasso and its dual.
Journal of Computational andGraphical Statistics, 9(2): 319-337.Roark, Brian, Murat Saraclar and Michael Collins.2004.
Corrective language modeling for large vo-cabulary ASR with the perceptron algorithm.
InICASSP 2004.Schapire, Robert E. and Yoram Singer.
1999.
Improvedboosting algorithms using confidence-rated predic-tions.
Machine Learning, 37(3): 297-336.Suzuki, Hisami and Jianfeng Gao.
2005.
A comparativestudy on language model adaptation using newevaluation metrics.
In HLT/EMNLP 2005.Tibshirani, R. 1996.
Regression shrinkage and selectionvia the lasso.
J. R. Statist.
Soc.
B, 58(1): 267-288.Yuan, W., J. Gao and H. Suzuki.
2005.
An EmpiricalStudy on Language Model Adaptation Using a Met-ric of Domain Similarity.
In IJCNLP 05.Zhao, P. and B. Yu.
2004.
Boosted lasso.
Tech Report,Statistics Department, U. C. Berkeley.Zhu, J. S. Rosset, T. Hastie, and R. Tibshirani.
2003.1-norm support vector machines.
NIPS 16.
MIT Press.231Table 1.
CER (%) and CER reduction (%) (Y=Yomiuri; T=TuneUp; E=Encarta; S=-Shincho)Domain Entropy vs.Nikkei Baseline MAP (over Baseline) Boosting (over MAP) BLasso (over MAP/Boosting)Y (800) 7.69 3.70 3.70 (+0.00) 3.13 (+15.41) 3.01 (+18.65/+3.83)Y (8K) 7.69 3.70 3.69 (+0.27) 2.88 (+21.95) 2.85 (+22.76/+1.04)Y (72K) 7.69 3.70 3.69 (+0.27) 2.78 (+24.66) 2.73 (+26.02/+1.80)T (800) 7.95 5.81 5.81 (+0.00) 5.69 (+2.07) 5.63 (+3.10/+1.05)T (8K) 7.95 5.81 5.70 (+1.89) 5.48 (+5.48) 5.33 (+6.49/+2.74)T (72K) 7.95 5.81 5.47 (+5.85) 5.33 (+2.56) 5.05 (+7.68/+5.25)E (800) 9.30 10.24 9.60 (+6.25) 9.82 (-2.29) 9.18 (+4.38/+6.52)E (8K) 9.30 10.24 8.64 (+15.63) 8.54 (+1.16) 8.04 (+6.94/+5.85)E (72K) 9.30 10.24 7.98 (+22.07) 7.53 (+5.64) 7.20 (+9.77/+4.38)S (800) 9.40 12.18 11.86 (+2.63) 11.91 (-0.42) 11.79 (+0.59/+1.01)S (8K) 9.40 12.18 11.15 (+8.46) 11.09 (+0.54) 10.73 (+3.77/+3.25)S (72K) 9.40 12.18 10.76 (+11.66) 10.25 (+4.74) 9.64 (+10.41/+5.95)Figure 3.
L1 curves: models are trainedon the E(8K) dataset.Figure 4.
Test error curves: models aretrained on the E(8K) dataset.Figure 5.
Test error curves: models aretrained on the Y(8K) dataset, includingheadword bigram features.Figure 6.
Test error curves: models aretrained on the T(8K) dataset, includingheadword bigram features.Figure 7.
Test error curves: models aretrained on the E(8K) dataset, includingheadword bigram features.Figure 8.
Test error curves: models aretrained on the S(8K) dataset, includingheadword bigram features.232
