Proceedings of the IJCNLP-08 Workshop on NLP for Less Privileged Languages, pages 99?104,Hyderabad, India, January 2008. c?2008 Asian Federation of Natural Language ProcessingAcharya - A Text Editor and Framework for working with Indic ScriptsKrishnakumar VSoftware Developer,A-10/11 DMC New Colony,Salem-636012v.krishnakumar@gmail.comIndrani RoyFellow,Central Institute of Indian Languages,Manasagangotri, Mysore-570006indraniroy@gmail.comAbstractThis paper discusses an open source project1which provides a framework for workingwith Indian language scripts using a uniformsyllable based text encoding scheme.
It alsodiscusses the design and implementation ofa multi-platform text editor for 9 Indian lan-guages which was built based on this encod-ing scheme.Keywords: Syllabic Encoding, Text Editorimplementation, Transliteration1 Introduction1.1 BackgroundBack in 2004, ETV (Eenadu Television), Hyder-abad, felt a need for a text editor to prepare newsscripts for its regional news channels.
A news pro-duction environment has its unique set of require-ments including speed, efficiency, robustness etc.The software that was in use had various technicallimitations including high CPU usage, lack of porta-bility across the diverse set of platforms that were inuse in ETV.
Using UNICODE editors were unsuitableas the correctness of the output largely depended onthe quality of the shaping engine in use and backthen it produced inconsistent results.
Apart from thatETV?s real-time graphics engines had trouble shap-ing UNICODE text in Indic scripts.A multilingual editor for Indic scripts had beendeveloped at IIT Madras2.
The team at IIT Madrasfavoured further development under an open sourceproject.
As a result an Open Source Project was1http://imli.sourceforge.net2http://acharya.iitm.ac.instarted.
The immediate aim of the project was torewrite the editor, remove its limitations and re-design it for use in a News Production environmentusing modern design and development tools.1.2 Acharya Text EditorAcharya is a multi-platform text editor that supportsAsamiya, Bangla, Devanagari, Gujarati, Kannada,Malayalam, Oriya, Punjabi, Tamil and Telugu.
Inaddition to these scripts, it can also display text inBraille and RomanTrans using transliteration.
Itachieves this functionality by storing Indic text insyllabic units instead of characters as most other ed-itors do.
Although it uses a custom encoding, theeditor supports conversion of text to standard encod-ings like ISCII (ISCII, 1993) and UNICODE (UTF-8).It can export documents as RTF and PDF files.
Inthe case of PDF documents the fonts are embeddedwithin so that they can be exchanged freely with-out the need for local language fonts to be availableon the viewing system.
The editor supports editingmultiple documents through a tabbed interface.
It in-cludes standard features like clipboard support, find-ing strings and interfacing with the platform?s print-ing system.
To assist text entry, it has a word com-pletion mechanism based on a dynamic dictionary.Currently, it runs on all major platforms includingWindows, Mac OS X and various Linux distribu-tions.The editor consists of a small but extensible li-brary for processing syllables, a text editing com-ponent and the rest of the user interface.
Section 2of this paper describes the library.
The syllabic en-coding along with its features is described in section2.1.
Section 3 describes the text editing component.Conclusion is offered in section 4 along with some99information on related work-in-progress.2 Syllable LibraryThe syllable library provides an implementation ofthe syllabic encoding (described in the Section 2.1)which allows text to be represented directly as syl-lables instead of as characters.
The library imple-ments the rules of syllable composition, provides in-put methods, and routines for conversion of syllablesto/from other encodings like ISCII and UNICODE.All of this functionality is exposed through opaquedata types and a small API operating on them.2.1 EncodingAs mentioned above, text is encoded directly as syl-lables.
The encoding used is a modified versionof the syllabic encoding scheme (Kalyanakrishnan,1994) developed by Prof. R. Kalyana Krishnan atthe Systems Development Lab, IIT Madras.
Thisencoding tries to capture the syllabic nature of In-dic scripts.
In this encoding, each syllable can bespecified asCm=0..4Vn=0..1Where C is the consonant and V is the vowel.
Thismeans that each syllable can be one of V, C, CV,CCV, CCCV and CCCCV combinations.
The ini-tial C is the base consonant and the subsequent Csrepresent conjunct combinations.
The memory rep-resentation of each syllable is a 16-bit value with thefollowing bit distribution3:0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15v cnj cFigure 1: syllabic encodingWith this arrangement, it is possible to have upto64 consonants with 16 vowels each.
The bits 4-9 in-dicated by the cnj field hold the index into the baseconsonant?s conjunct table.
This table holds the val-ues of the constituent consonants OR?ed into a 32-bit integer.
For example:The syllable ndrA is stored in the following way.3shown in little-endian byte order0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 151 25 20Figure 2: ndrA syllableComparing with figure 1, the vowel code is 1which stands for the vowel aa.
Similarly, the baseconsonant code is 20 and represents the consonantna.
The conjunct code 25 is an index into the con-junct table of the consonant na.
The value that willbe stored at index 25 is shown in figure 3:0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 3118 30 0 0Figure 3: value at index 25 of the conjunct table ofnaBits 0-7 contain the consonant code of the firstlevel conjunct, bits 8-15 of the second level conjunctand bits 16-23 of the third level.
Bits 23-31 are re-served for future expansion.
In this case, there are2 consonants in addition to the base consonant na.The values 18 and 30 represent the consonants daand ra respectively.These codes are specified in the filesgeneric.vow4, generic.con, generic.spl for vowels,consonants and special characters respectively.The conjunct combinations are specified in the filegeneric.cnj in this fashion:ra: ta (ta (ya))Here ra is the base consonant and the line definesthree conjuncts namely rt(ra + ta), rtt(ra + ta + ta)and rtty(ra + ta + ta + ya).
The last conjunct is anexample of a conjunct where all the four levels areused ra + ta + ta + ya.
It occurs for example in theOriya word marttya.
Each pair of parenthesis standsfor a level of conjunct.
More complex conjunctscan be added by nesting them within parentheses.However, the current implementation supports onlyup to three levels of nesting.
The generic.cnj fileas it stands now defines 1240 conjuncts.
When the16 vowels are taken into account, we get a total of19840 syllables.
An additional set of 32 syllables for4These files are named generic because the values they de-fine are common to all scripts supported by the framework100local language numbers, punctuation and other spe-cial characters increases the total number of validsyllables to 19872.This scheme also accommodates English text inthe ASCII encoding by using a consonant code of 62and the lower eight bits representing the ASCII code.It also has a few special syllable codes for switch-ing scripts to be embedded within the data streamalthough they are not used within the editor.2.1.1 CompactnessThe 16-bit syllable value stands on its own anddoes not correspond to UNICODE or ISCII or anyother encoding for that matter.
One particular fea-ture of this scheme is the compactness and the in-herent compression.
For example,???????
?the above word ?
marttya (m + r + halant + t+ halant + t + halant + y), in UNICODE UTF-16encoding will be encoded as 8 16-bit values.
UTF-8requires 26 bytes to encode the word.
In ISCII, it canbe encoded in 8 bytes whereas in this encoding, theabove word requires just 2 syllables of 16 bits each.2.1.2 RenderingOne other aspect of this encoding is that thereis a separation of content and its visual representa-tion.
On one hand, this means that text processingapplications need not worry about dealing with dis-play related issues like glyph reordering and properplacement of glyphs using the various zero widthspace characters as is the case with character basedencoding schemes including UNICODE.
On the otherhand, this separation means that to display a syllablesome kind of map is required between the syllableand its visual representation (glyphs).
This mappingis font dependent when non standard fonts using theISO8859-1 encoding are used but UNICODE fontscan also be used.
Currently static tables are usedto provide a one to one mapping between the sylla-bles and its corresponding glyphs.
This is a trade-offwhere memory is traded for quick display of glyphs.There is no need for cluster identification as the in-formation is already there in the form of syllables.This lookup isO(1) whereas in shaping engines likePango, this operation is O(n).
These static tablescan also be useful in environments where shapingengines like Uniscribe and Pango are not availableor cannot be used.2.2 Input MethodsThe library provides routines for input methodswhich can be used in conjunction with the platformspecific keyboard processing functions to support di-rect key-in of syllables.
Currently, it includes in-put methods for INSCRIPT (ISCII, 1993) and Pho-netic keyboards.
However, the mechanism is generalenough to add additional keyboard layouts includ-ing ones that work only with specific scripts.
In thecurrent implementation, the input methods load theirrespective data and delegate the bulk of the work tothe syllable processing routine.2.3 Unicode ConversionUNICODE is the de-facto standard for storing andrendering text so conversion to/from UNICODE is es-sential for integration with other tools.
UNICODE in-tegration can be achieved either by having a staticsyllable-to-glyphs map with UNICODE fonts or aseparate text codec to do the syllable to UNICODEconversion.
In the current implementation, the textcodec strategy is used to convert the syllables to itscorresponding UTF-83 Editor Implementation3.1 Text StorageThe most important data structure in a text editor isthe one that stores text sequences.
A poor choicewill directly affect the performance of the editor asalmost all editing operations work on these text se-quences.
A survey of popular data structures for textsequences is presented in (Crowley, 1998).
The twomost popular choices are gap buffer and piece ta-ble.
A gap buffer is basically an array that has agap which is moved to the point of edit so that thetext that is entered is copied to the gap without fur-ther allocation of storage.
The gap shrinks and ex-pands on insertion and deletion of text respectively.Gap buffers have the advantages of being simple toimplement and offer direct access to the text.
Thedownside is they incur a copying overhead when thegap is not at the point of editing operations as textneeds to be copied to either side of the gap.
Also gapbuffers are not suitable if the text has attributes andruns (run is a chunk of text that belongs to the same101script) of text need to be stored.
A multilingual texteditor has both these requirements.
To implementthis in a gap buffer would require a parallel style orscript buffer (Gillam, 2002) to track and demarcatethe runs and its corresponding font changes.
When-ever the gap is moved and text added or deleted, thestyle buffer would need to be updated as well.
Thiscan quickly get cumbersome when multiple scriptsare used in the same document.A piece table is an alternative to the gap bufferthat does not suffer from these problems.
In a piecetable, the text is immutable and is always appendedto the sequence.
However, the logical order that isshown in the view is maintained by a separate list ofpiece descriptors.
A piece includes information suchas the script, the start and end positions within thesequence etc.
So, when the user copies/deletes thetext, it is the piece descriptors that are moved aroundand not the actual text.
By introducing this levelof indirection, the piece table solves the problem ofcopying overhead when text is moved around.
How-ever, the drawback is that the text is no longer ac-cessible directly.
To locate a position in the text se-quence the editor has to traverse the piece table andlocate the piece which contains the position.
Despitethis drawback, the piece table data structure offers anumber of advantages ?
it is a persistent data struc-ture and because the original text is never destroyedoperations like undo and redo lend to a straightfor-ward implementation by restoring the links betweenthe removed pieces from the undo and redo stacksrespectively.
The other advantage of piece tablesis that there is a direct mapping from script runs topieces.The piece table in this editor is implemented as apiece chain (Brown, 2006) ?
a circular linked listwith a sentinel node.
Since the piece chain is alinked list, the problem of linear addressing is pro-nounced (O(n)).
To deal with this problem, thepiece chain caches the last accessed (piece, position)pair to utilize the locality of reference (Wirth andGutknecht, 1992).
This small optimization has sofar worked out well in practice as there is a stronglocality of reference in text editing.
To store the syl-lables itself, the deque class from the standard C++ li-brary is used.
It is a scalable data structure that guar-antees efficient insertion of large amounts of text atthe tail position.
Another important issue is that ofcursor movement.
In the editor, syllables are dis-played using a variable number of glyphs.
Allowingthe cursor to be positioned in the middle of a syllablewould make it possible to delete that particular syl-lable partially which would make the data inconsis-tent.
Therefore all cursor related operations includ-ing selection should be limited to syllable bound-aries.
This is achieved by using a separate dequeobject for storing the width of each syllable wherewidth is the number of glyphs that the syllable isrepresented by visually.
This additional informationis used when mapping the syllable position in thetext storage to its corresponding glyph position inthe view and vice-versa.3.2 File FormatAs mentioned in section 2, the editor works in termsof syllables and not characters.
While syllables canbe stored to disk files directly, to retain compatibil-ity with other Indian language applications, the edi-tor stores the text to files in the 7-bit ISCII encoding.7-bit ISCII is a simple and efficient format where En-glish text in ASCII is stored as is and the text in Indicscripts are stored using code points from the upperhalf of the character set (128-255).
Like the syllabicencoding and unlike UNICODE, ISCII uses a uniformrepresentation for all the Indic scripts.
Each scriptrun starts off with a code that identifies the languageof the run.
This makes run detection very simpleto implement.
When the editor saves a document,all the syllables are broken down to their constituentISCII characters and written to disk.
Similarly, whena file is opened, the ISCII data is converted to the syl-labic representation using the ISCII codec routinesfrom the syllable library and from then on only thesyllables are used.3.3 Utilities3.3.1 TransliterationBecause of the uniformity of the encoding all thesupported scripts have a means of displaying thesame set of syllables hence transliteration in this en-coding is basically changing the script code for theuser-selected piece of text and notifying the viewthat is displaying the text to re-render the selectedtext using the font of the target script.
What thismeans is that transliteration as supported by this en-coding will survive a round-trip conversion without102any loss of data.
An example to illustrate the lastpoint:Supposing in a multilingual document, the userselects the character ?
(ga in Hindi) and translit-erates to RomanTrans, the editor will display ga.Internally, the ga syllable is stored in the followingway:0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 150 0 3Figure 4: ga syllableThe text storage tracks the script code for everysyllable.
When the above syllable is converted toRomanTrans, the text storage object does not modifythe syllable but changes only the script code to Ro-manTrans and notifies the view displaying the text.The view upon receiving the notification from thestorage object then re-renders the ga syllable usingRomanTrans?s font map.
Similarly, when the useronce again changes to Tamil, the editor correctly dis-plays ?
(ka in Tamil) this time using Tamil?s fontmap which specifies that ga should be mapped to thesame glyph as ka.
If the user once again changes thescript back to Hindi, the letter ?
(ga in Hindi) isdisplayed correctly.The above scheme is possible because the textcontent is kept separate from the actual display oftext and more importantly the text content itself isstored as syllables which are the fundamental unitsof transliteration.3.3.2 Word CompletionWord completion, also known as auto-completionunder certain applications, is a handy feature to havespecially for typing lengthy and frequently usedwords fast.
In its current implementation, this ed-itor does not automatically complete words.
Theuser needs to trigger it explicitly.
This is mainly tokeep the editor less disruptive (in terms of the typingflow) and also to keep the implementation simple.When typing long words, the user after typing thefirst few characters can trigger the pop-up with pos-sible completions by means of the designated key-board shortcut.
The list of words that appear in thecompletion box is obtained by doing a prefix search(of what the user had typed so far) on a dynamicdictionary.
This dictionary is implemented usingternary search trees (Bentley and Sedgewick, 1998).A ternary search tree (henceforth TST) is a versatiledata structure that combines the time efficiency oftries and the space efficiency of binary search trees.TSTs are generally faster than hashtables and offermuch more functionality than simple key look-upsbecause they maintain the ordering of the data storedwithin.
When augmented with additional informa-tion, TSTs can also be used for implementing spellchecking and by using a fixed edit distance, alter-native word suggestions as well.
A full descriptionis beyond the scope of this short paper.
However,(Bentley and Sedgewick, 1997) provide all the de-tails.4 Conclusion & Future WorkInside ETV, this editor has been in production usesince 2005.
It serves as the primary tool for docu-ment preparation in Indian languages.
The fact thatit is being used in a news production environment isa testament to its stability and the overall soundnessof the syllabic encoding scheme.At the time of writing, support for speech out-put of text is being worked on.
Since the text isstored in terms of syllables, speech output is ob-tained by breaking the syllables into phonemes andsending them to a concatenative speech synthesis en-gine (currently we are using Mbrola).
The editoralready has support for Braille output using translit-eration and this output can be fed to a braille printerafter minor post processing the tools for which arebeing worked on.
Work is on for incorporating toolslike morphological analyzers into this framework forbuilding advanced linguistic applications.This is an ongoing effort in the form of an opensource project.
The full source code for the entiresystem is provided on the website and help is avail-able on the mailing list.AcknowledgementsWe are grateful to Prof. R.Kalyana Krishnan, Sys-tems Development Lab, IIT Madras for guidancethroughout this project, Mr. B.Ganesh ex-CTO ofTechnical Services Department of ETV for initiat-ing this project and contributing to it, Mr. Anir-103ban Sam of ETV for coordinating the testing ofthis software and providing detailed bug reports, Mr.G.Venugopal, Systems Manager, ETV for the ad-ministrative support that facilitated distributed de-velopment.
Finally, ETV deserves a special mentionfor supporting the development of this open sourceproject.ReferencesCharles Crowley.
1998.
Data Structures forText Sequences.
http://www.cs.unm.edu/?crowley/papers/sds.pdf1993.
Indian Script Code for Information Interchange.In Bureau of Indian Standards.James Brown.
2006.
Editing Text with Piece Chains.http://catch22.net/tuts/editor17.aspJames Brown.
2006.
Unicode Text Editing.
http://catch22.net/tuts/editor18.aspJon Bentley and Robert Sedgewick.
1998.
TernarySearch Trees In Dr. Dobbs Journal.
http://www.ddj.com/windows/184410528Jon Bentley and Robert Sedgewick.
1997.
Fast Algo-rithms for Sorting and Searching Strings.
In Proceed-ings of the Eighth Annual ACM-SIAM Symposium onDiscrete Algorithms, New Orleans, USA.Niclaus Wirth and Jurg Gutknecht.
1992.
ProjectOberon - The Design of an Operating System andCompiler.
ACM Press/Addison-Wesley PublishingCo.
New York, USA.R.Kalyanakrishnan.
1994.
Syllable level coding forIndian languages.
http://acharya.iitm.ac.in/software/docs/scheme.php.Richard Gillam.
2002.
Unicode Demystified - APractical Programmer?s Guide to the Encoding Stan-dard.
Addison-Wesley Longman Publishing Co., Inc.,Boston, USA.104
