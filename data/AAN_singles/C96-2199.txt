Structured lexical data: how to make themwidely available, useful and reasonably protected?A practicalexample with a trilingual dictionaryMath ieu  La fourcade  - UTMK-USM - 11800Penang - Ma lays ia  / GETA-CL IPS- IMAG - 38041 Grenob le  - F rance  -math ieu .
la fourcade@imag.
f r  o r  la fourca@cs .usm.myAbstractWe are studying under which constraintsstructured lexical data can bemade, at the sametime, widely available to the general public(freely ornot), electronically supported, publishedand reasonably protected frompiracy?
A threefacet approach- with dictionary tools, webservers and e-mail servers -seems to be effective.We illustrate our views with Alex, agenericdictionary tool, which is used with aFrench-English-Malay dictionary.
Theverydistinction between output, logical and codingformats is made.
Storage is based onthe latter andoutput formats are dynamically generated on thefly atrequest times - making the tool usable inmany configurations.
Keeping the datastructuredis necessary to make them usable alsoby automated processes and to allowdynamicfiltering.IntroductionIn the framework of the development ofa=46rench-English-Malay Dictionary (FEM- the producing methodology ofwhich hasbeen discussed in \[2\]), we try to addressthequestion of making the produced lexicaldata widely available to thepublic.
Although,the first goal of the project is to publish apaperdictionary (due summer 96), it appearsthat some other forms ofdistribution andpresentation could be valuable.
As thedictionary contractors want to keep theirwork proprietary whileexpecting a largediffusion, we have to cope with thefollowing dilemma:how can we, at the sametime, widely distribute and reasonably pro-tectstructured lexical data?The analysis and implementation resultspresented here are twofold.
Firstly, weidentifiedthree distribution modes that couldbe implemented simultaneously ata lowcost.They take the form of a resident dictionarytool, a world-wide-web(or web for short)service and an e-mail service.
Secondly, theproblem of how to structure andrepresententries had to be tackled to keep themanipulation convenient (reduced datasize,readability, version management, etc.).
Theproposed solution isbased on a strongdistinction betweencoding, logical andformatting levels.This paper is organized as follows.
First,we present he objectives andconstraints weidentified regarding the outcome of thelinguisticproduction of the FEM project.Then, we present three distributionmodelsthat could respond to what weidentified as the needs and desires of end-users but also of thecomputationallinguistics ommunity.
Thethird and last part explains our methodologyandthe kind of format retained to make ourmodels a reality.
We actually implementedand experimented the solutions we propose.Constraints and desiresBeside its printed declination, weinvestigated some other distributionandexploitation means for the FEM.
Theadvent of the Internet seems to offersomegood opportunities for making our datawidely available, but concernshave beenexpressed on severalpoints: usefulness,protection and production cost.Making data available is meaningless ifthey are not in a useful format.Most of thetime, designing a good format and conver-ting the data to it,is an unanticipated expen-diture.
The question of copyright is also anobstacle that arises muchbefore the purelytechnical difficulties (see \[7\] for thatquestion).The visual appearance (opposed to theconveyed informative contents) of thedatamay be crucial for making them palatable tothe general public.
Thequestion isin fact notonly to make the data available but mainly tomakepeople willingly use it.
For these1106reasons, we think the data layout proposed tothe end-user is oneof the main factors ofsuccess or failure of such an enterprise.
Butit isvery difficult to forecast which kind offormatting could be 'Telt" byend-users asexploitable, lit may depend on the taskundergone, onestablished standards or toolsavailable, on the user intentions, culture, etc.A presentation close to what can befound ina paper dictionary might be desirable but itcan become intricatewith complex data.Visual clues can help locate inlormation(see\[3\]);this becomes especially criticalwith multilingual dictionaries.
Forautomated processes, anexplicit taggedtbrmat is more appropriate.In fact, we would like to freely "giveaccess" to the dictionary without"giving up"the control over its source.
The legal contextcan be coveredby copyrights, but sometechnical adjustments are still needed to giverealprotection to such a work.
The dictionaryshould not be accessible as a whole, butmerely through requcstsconcerning one (orseveral) entry.
Even if one entry has links tothenext or previous ones as parts of itsinformation, fetching the completedictionarywill definitely prove a painful task (asdifficult as to scanning apaper dictionary).This scheme is not lbolproof to hackers, butit isinconvenient enough to rebuke mostusers.In an academic ontext, making data fi'eelyavailable is viable only throughlow costsolutions.
We have to make the distinctionbetween costs forproducer (the academicsand/or the researchers and linguists) andcosts forthe end-user.
The process offormatting the data for end-users hould befast, painless and not resourcedemanding.Similarly, the user will not make use of (oreven fetch) thedata, if that gobbles up theresources of his/her own personalcomputer(disk space, memory, or networkaccess time).
While flee of charge, theacceptance of the dictionary will begreatlyimproved if it is easy to manipulate.
Themain relevant factor is agood ratio betweencompactness of the data and length of theprocessingtime.Three distribution modelsand a common toolIt is possible to distribute data in anencrypted (protected) form bydistributing afi'ee "reader".
The data are located on theuser computer anda dictionary tool (thereader) allows browsing amongdistributeddictionaries.
The user can createand modifypersonal dictionaries, handlemultiple dictionaries, copy and pastethedisplaycd information in otherapplications, etc.
We implemented suchatool - called Alex.The FEM dictionary has been madeaccessible on the Web.
The mainadvantagesover esident tools are thetransparent updates of the dictionarycontentsand the reduced resources needed ona local personal computer.
Itowever, one hasto own an lnternet connection.
Moreover,thehypertext nature of Web pages can be theoccasion to offer some extended featurescompared to paper dictionaries (which aresimilar tothe one R)und in resident dictionarytools), among which access to previousornext entries, dynamic filtering and look upby patterns.The Web approach is well adapted to end-users but (1) people having a Web access arestill a minority compared withpeople havingan e-mail account, and (2) we also wouldlike to make ourdictionary useful toautomated processes.
For example, e-mailaccess tolargc linguistic resources can allowregular update requests of small locallinguistic databases.
If the task doesnotrequire real time, communication by e-mailpresents many advantages.The mail requestformat - which should stick to one (or seve-ral)format - can define the nature of infor-mation looked for much more pmciselythanwhat an end-user would accept o specify).Alex is a simple dictionary tool with twomain features - (1) a highlevel ofscriptability (declined on MacOS withAppleScript) and (2)built-in extensionfacilities - allowing to make it the core ofWeb and e-mail servers.
As handlingseveral1107versions of the database or pre-transcribingits contents into several formats amnotviable solutions for implementation orexploitation, Alex is used as aunique ngine,which operates on a unique database (oneper dictionary) and producesmultiplerepresentations.Coding format vs. Logicalformat vs. OutputformatWe have designed a mechanism thatpermits toproduce on the fly any kind ofoutput (or external) formats from alogicalformat.
The choosen format is at thesame time compact and adequate forfastprocessing.As coding directly the logical format wastoo space costly for ourpurposes, we defineda coding (or internal) format in which thedata areactually stored.
Processing a requestfor an entry is then executed in three steps:retrieving theentry, translating the codingformat into the logical format, andtranslatingthe logical format into one output format.The logical format for one entry has beenintentionally made simple.
Anentry kindindicator (symbol), is followed by an openlist of field names(symbols) and values(strings) pairs: (hi, vi)*.
The ordering of thepairs in the list is relevant and severalpairswith the same symbol can becontiguous.
For example, the logical formatforthe entry "aimer" (love) is given below.
( : fem-entz~ ( :entry"aimer" ) ( : P ronunc ia t ion_French  "/E ME-/ " ) ( : F rench_Category  "v. tr. "
)( :Engl ish Equ iva lent  "l ike ")( : Ma lay_Equ iva lent"menyukai  ") ( :Ma lay_Equ lva lent"menyayangi"  )( :Gloss In French" (appr~cier)  ")( : Eng l i sh_Equ iva lent  "l ike" )( : Ma layEqu iva lent  "menggemar i"  )( :Ma layEqu iva lent  "menyenangi  ")( :Malay Equ iva lent"menyukai  ") (:Gloss In F rench" (d'amour) ") ( :Engl ish Equ iva lent" love" )( :Ma lay_Equ iva lent  "mencintai")  ...)Figure 1.
Part ot\]ogical format for "aimer".In fact, the choice of the exact kind of thelogical format is somewhatarbitrary as longas we keep the structure of the entry.
Thepoint to keepin mind is that the adequacy ofthe format depends on the kind ofprocessingintended.
The one we adopted fits reaso-nably well for most of the processes we aredealing with.
Butsometimes mall detailscan have a big impact on processing costs.Forexample, the fact that we do not factorizea sequence of several pairs withthe samefield name, (n, vl)(n, v2).., as a listcomposed of the field name followed bythevalues, (n, Vl, v2 .
.
.
.  )
is relevant.
The firstsolution is slightly less efficient in space,butsystematically dealing with pairs leads toa major performance gain informatting.We designed and developed a set of usefuloutput formats with theirrespective produ-cing procedures - all of them are string-based.Some are HTML strings (for Webbased requests), others are labeledformatsfor e-mail based requests.
Generally,an output format loses some of the explicitstructure of the entry.
Anexample offormatting for the entry "aimer" is givenbelow (actually it isan RTF format - but we"interpreted" it for readability).aimer/eme/, vt menyukai, menyayangi;(appr:cieljmenyenangi, menyenangi, menyukai;(d'antour) mencintai,mengasihi ; - bien sukajuga;- mieux lebih suka;j'aime mieuxlire que regarderla tdldvision, saya lebih suka membacadrpdmemoton television; ~autant suka lagi;j ' -a isque saya ingin sekiranya.Figure 2.
Formating of the entry "aimer" as it appearson the paper dictionary (French-Malay only,theEnglish information has been filtered out)When Alex is used as a standalone dictio-nary tool, the format presented to the user issimilar to the paperdictionary.
The fact thatwe have a full control over the displayingallowsus, for example, to investigate theusage of some anti-aliased fonts and softlytainted background for an increased on-linereadability.
Thefiltering functions and someaspects of the formatting are customizablebythe user.The approach we have taken for ourtrilingual dictionary for the Web is toincludevisual clues to help the user locate theinformation.
Diamondshapes of differentcolors are referring to different languages(like@ and ~), thus making an extension to1108other languages,without losin& coherence,relatively easy.
Also, the filtered outputsseem to be moreintuitive to the user.The multiple e-mail lbrmats cannot takeadvantage of styled text orpictures andthushave been made more explicit (and moreverbose) by the use of tags.
Ane-mailrequest can specify the kind of formattingdesired and generallyoffers a finer tuningthan the two solutions above mentioned.
Weconsider,however, that e-mail based requestsare primarily aimed at automated processes.The actual coding in which each dictionaryentry is stored has beendesigned to be ascompact as possible while allowing a fastdecoding(generation of the logical format).The format can be described ascontaining astructural part and a textual part.
In thestructural part, an entry iscoded as a vector.This vector does not contain any text but(I) anidentificr indicating the field kind and(2) indexes to the textual part.
The textualpart is a buffer containing the dictionarystrings.
Basically, when an entry is addedeach field valueis cut into words, which arestored in the buffer in exchange of alocation(where the strings begins in thebuffer) and a length (allowing tocomputewhere it ends).
Such collections oflocation and length constitute the indexeskept as vectors.
Nowords are stored twice,and a reverse alphanumeric sort increasestheprobability of factorization by prefix.=46or example, in a first mockup of ourFrench-English-Malay dictionarycontainingover 8000 entries (about 25% of the whole),the size of thestructural part is about 3200Ko and that of the buffer part is around450Ko.
These figures are comparable tothesize of the dictionary on a plain text fileformat.Advantages and drawbacks ofmultipleformatsThe first obvious gain of our solution isthereduction in the space needed for coding ourdictionary.
Compared toproducing inadvance several formats - a solution notonly painful and error prone but whichwould also haveclobbered the serverresources - a multi-server (Web and e-mail)reduced toone engine and one databaseper dictionary allows us to saveenoughresources to handle several dictionaries atthe same time.
Another very importantaspcctis the avoidance of the often nightmarishproblem of synchronizingseveral versions ofthe data.=46iltering is a feature that is naturallyderived flom the conversion of the structure.Especially with nmltilingualdictionaries, it isto be expected that users will want to haveaccess tomore or less information accordingto their needs.
This flexibility isimplementedthrough our dictionary tool, both on the Weband by e-mail.Generating output formats on the fly istime consuming compared toretrieving pre-formatted ata.
But, this is a marginal oss ifweconsider that the resources, effort andtime dew)ted to the implementationof a newformat can be drastically reduced.Implementation, availabilityand future workAlex has been implemented withMacintosh Common Lisp (\[1\] and \[9\]) thetopof our Dictionary Object Protocol, DOP\[5\], itself built using a persistentobject-oriented database, WOOD \[8\].
A moredetailed account on thearchitccture andimplementation of Alex and its derivationscan be found in \[411.
Prototype versions arealreadyfreely available on an experimentalbasis.We are investigating how to actually makea Malay thesaurus based on thesame criteriaavailable.
The fornmtting would includereferences andback-references.
We also arclooking for dictionaries dealing withmorethan three languages (adding Thai toour current French-English-Malay, forinstance) and some work has alreadybeenundertaken with the Arabictranscription of Malay (Jawi).ConclusionOnce a long term and costly prqjecthasproduced a large amount of lexical data,it often run into the questions of making itsresultsawulable, usable and protected.
More1109often than not, they remain unusedandforgotten.
We presented some practical solu-tions for making multilingual dictionaries (inparticular) and lexical data(in general)widely available, reasonably protected frompiracy and usefulboth to the general publicand to applications.
We have actuallyimple-mented our solutions and made several pro-totypes available through a Web serverandan e-mail server.The solution we presented here is based ona common engine - Alex -, oneunique data-base per dictionary and several formats.
Alogical format is used as"pivot" between acoding formats and several output formats.
Ithas beenkept as simple as possible to be botheasily understood and efficient foron thedynamic generation of "external represent-ations".
The coding format is usedfor theactual storage and has been designed to becompact enough for fastretrieval but also forefficient ranscription i to the logical format.We hope that the framework of this workcan inspire some other projects andhelpreducing the number of lexical treasures thatremain unknown andunreachable both to thegeneral public and the (computational)linguisticscommunity.AcknowledgmentsMy gratefulness goes to the staff oftheUTMK and USM, the Dewan Bahasa danPustaka and the French Embassy atKualaLumpur.
I do not forget he staff of theGETA-CLIPS-IMAG laboratory forsuppor-ting this project and the reviewers of thispaper, namely H. Blanchon,Ch.
Boitet,J.
Gaschler and G. Sdrasset.
Of course, allerrors remainmine.References\[1\] Digitool Inc.,A.
C. &.
(1989-1995) MacintoshCommon Lisp.
3.0.\[2\] Gasehler, J. and M.Lafoureade (1994)Manipulating human-oriented dictionarieswithvery simple tools.
Proc.
COLING-94, August5-9 1994, Makoto Nagao &ICCL, vol.
1/2, pp283-286.\[3\] Kahn, P. (1995) Visual Clues for Local andGlobal Cohrence in the WWW.
38/8, pp.
67-69.\[4\] Lafourcade, M.(1995) Alex 1.0 - A Genericand ScriptableDictionary Tool.
Rapport Final,GETA-UJF, septembre 1995, 35p\[5\] Lafourcade, M. and G.S4rasset (1993) DOP(Dictionary Object Protocol).
GETA-IMAG,Grenoble, Common Lisp Object System (MCL -CLOS), AppleMacintosh, version 2.0.\[6\] Manfred Thiiring,Jiirg Hanneman and J. M.Haake (1995) ltypermedia andCognition:Designing for Comprehension.
38/8, pp.57-66.\[7\] Samuelson, P. (1995)Copyright and DigitalLibraries.
38/4, pp.
15-21.11811 St Clair, B.
(1991)WOOD: a Persistent ObjectDatabase for MCL.
Apple,Avalaible in MCLCD-ROM & FTP (cambridge.apple.corn).\[9\] Steele, G. L., Jr. (1990)COMMON LISP.
TheLanguage.
Digital Press, 1030 p.i i i0
