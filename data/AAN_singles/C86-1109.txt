FUNCTIONAL STRUCTURES FOR PARSING DEPENDENCY CONSTRAINT5J~ippinen, H., Lehtola, A., and Valkonen K.SITRA Foundation*P.O.
Box 329, 00121Hetsinki, FinlandandHeIsinki University of TechnologyHelsinki, FinlandThis paper outlines a high-level language FUNDPL forexpressing functional structures for parsing dependencyconstraints.
The goal of the language is to allow agrammar writer to pinn down his or her grammar withminimal commitment o control.
FUNDPL interpreter hasbeen implemented on top of a lower-level language DPLwhich we have earl ier implemented,.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
* Current address of the authorsI.Jj\]troductionIn the theory of computation a new viewpoint is diggingin: to compute is to pin down the constraints that hold ina given problem domain, and a goal for computation.
It isup to an interpreter to perform search for the goal in theproblem domain.
The result of computation follows thenindirectly from the search process.Strongly pronounced and in wide use this vantagepoint becomes in Prolog.
Recently fresh views of parsingas constraint systems have also surfaced, such as FUG(Kay, 1985; Karttunen and Kay, 1985), LFG (Bresnan,1978), and PATR-II (Schieber, 1985).
In these languages,a user writes only grammatical constraints and need notimport control instructions.
The interpreter searches fora grammatical configuration that "explains" a given inputsentence without violating the constraints.These new grammars advocate yet another, moreabstract departure from procedural description.Grammars for parsing have predominantly usedgenerative rewrite rules.
The ideological underpinning ofparsing has been in the past that of the emulation ofgenerative tllstories of configurations.
The newformalisms express grammars as functional structures.We have defined a language DPL (Dependency ParsingLanguage) to meet the needs of parsing a highlyinflectional, agglutinating language (Nelimarkka et al,1984).
The language enforces dependency approach whichaccords better than phrase structure rules with theneeds of non-configurational languages.
DPL language andits compiler constitutes .just one component of alanguage-based environment we have implemented forthe development of parsers (Lehtota et al, 1985).In DPL, a grammar is comprised of functions,relations, and automata.
The automata, which control theparsing process, have compelled a person who writesgrammar to heed control unwanted extent.
This paperdescribes a high-level anguage FUNDPL (FUNctional DPL)we have designed on top of DPL.
In FUNDPL, a grammar isbuilt out of functions, relations, and functionalstructures.
FUNDPL is a constraint system whichliberates a grammar writer from control anxieties.2.
Z_yp~Type definitions in DPL as well as in FUNDPL list andclassify linguistic properties used in a grammardescription.
A user has flexible tools in hand.CONSTITUENT statement defines the constituentstructure, that is, what attributes terminal symbolshave.
The domains of names are spelled out with VALUE,FEATURE, or CATEGORY statements.
VALUE is used forunary properties, FEATURE'.
for binary features.
CATEGORYassigns names In llierachies.
Properties areautomatically inherited in hierarchies.Names can be associated together in SUBTREEstatements.
LEXICON-ENTRY statement is reserved forthe definition of the lexical entry form.
It accepts anarbitrary tree structure expressed in l ist notation.DPL (and FUNDPL) opts for reference by value.
Thispractice results in compact and convenient notation butrequires discipline from the user, e.g., all propertiesmust have unique names.
For further details about typesand reference, see Nelimar'kka et al, 1984.3.
Binary ConstraintsFUNDPL uses syntactic functions (and semanticrelations) as binary con,~;tralnts in a grammar in thefollowing sense.
In analysis two abstract levels exist(Fig.
I).
On the regent level (R-level) are thoseconstituents which lack dependants to f i l l  some required461functional roles.
On the dependant level (D- level)  arethose constituents which have become full phrases(marked by feature +Phrase) and are thereforecandidates for functional roles.
Syntactic functions (andsemantic relations)mediate between these two levels.The underlying abstract process view is this.
A wordenters the parsing process via R-level.
When alldependants of the constituent (the word) have been bound(from D-level), it descends to D-level.
There it remainsuntil it itself becomes bound as a dependant.
Then itvanishes from sight.To visualize, Fig.
I exhibits a snapshot of parsing thesentence "Nuori polka lauloi virren ellen kylQn kirkossa.
"(A/the young boy sang a hymn yeslerday in the villagechurch.
)I- - l~u lo i~e i len - - - -  R-levelllPTrAct AdvP-p O ik.a ~ vi rre rr ~-1 evelp~dniFig.
I.
A snaphot of parsing dependency constraintsFunctionsFUNCTION statements define syntactic functions whichare binary constraints of a grammar.
Each statementdeclares for the function the property combinations thatmust simultaneously hold in a regent and a dependant (cf.Nelimarkka et al, 1984 or Lehtola et al, 1985 fordetails).Function calls and function projectionsFunctions are called by name.s In numerous occasionsverbs in particular take arguments in idiosyncraticmanner.
For example, the Finnish verb "rakastaa" (tolove) is an ordinary transitive verb which has theone-who-is-loved in object position.
But semanticallyclosely related verb "pit~" (to like) takes theone-who-is-liked in adverbial position with elativesurface case.It is, therefore, necessary to be able to restrict thedomain of a general function.
Function projection is adevice for that.
Restrictions are written after names, aslash between.
For example, to restrict the adverbialfunction call to elative surface cases only, one writes:462Adverbial/\[Elat\].
Full projections need not be explicitlyshown.
Instead of writing, say: Sobject/l\], one isallowed to write simply: Subject.RelationsRelations give semantic interpretations to syntacticallyrecognized functions.
They are expressed in RELATIONstatements.
Relation calls are implicit in a grammar,4.
Structural ConstraintsFUNDPL uses functional schemas to expressinterdependent binary constraints.
All syntacticfunctions are called via such schemas.
When a wordenters R-level it is associated with a schema whichmakes the constraints explicit for the interpreter.Functional schemasA schema has four parts - pattern, structural part,control part, and assignment part - and it reads asfollows (required slots are underlined):(F_SCHEIdA: namehU~.~=\[properties\] ;patternObligatory=(funct ions)Optional=(functions) ;structureOrder =<conc.descMption>TryLeft = < func t ions>fryAight =<functions> ;controlDownUpA s .~_u~.Q=\[p rop e r t i e s\] ;assignmentLift=function(attributes))Schemas are triggered via their patterns.
Pattern hasa single slot When which indicates the requiredproperties of a matching constituent.Structural part may have up to three slots.
Oneoptional slot lists the obligatory functions if there areany, and another is for the optional ones.
One opNonalslot describes what concatenation relations theexpressed functions must fulfil on surface, if any.In a concatenation description "R" stands for theregent itself.
Two consequtive clots (..) signal positionsof possible irrelevant intervening functions.
Traillngdots may be omitted.
For example, Order=<fl f2 R>~equires that f l is the first function to the left on thesurface level (in a subtree dominated by R) and it isimmediately followed by f2 and R in that order.O~ller=<,.fl..R.f2> demands that f l is somewhere to theleft of R and f2 somewhere to the right of it.Control part has up to four slots.
Two of them arereserved for heuristic hints for the interpreter about theorder it should test functions (when Order is notpresent).
Control part can also raise or descend parsingbetween sentence levels.
Down drops control to parsesubordinate clauses, Up raises control to the next level.Operation lip is vacuous and harmless on the topmostlevel.R$Iume slot in assignment part transfers newproperties to the regent after the schema has been fullymatched and bound.
The other slot, Lift, is an optionalone for the percolation of properties from a dependantvia a named function link.
For example,\[ift=Subject(Case) has the effect of percolating thevalue of surface case to the regent from the dependantwhich has been bound through Subject function.A functional schema for ordinary Finnist) transitiveverbs which may I~ave unlimited number of adverbials oneither side reads as follows.
Notice l)ow this singleschema allows all permutations of arguments (resultingfrom topicalization), but it prefers SVO-ordering.
(E.SCHEMA : VPTrActIIllhen:\[Vet"b Act Ind ,Transitive\]Ilbligatory=(Subject Object)Optionol=(Adverbial *)TIr\[ILeft=<Subject Object Adverbial>lrrgRight=<Object Adverbial Subject>UpIlilulne=\[+Phrase +Sentence\])A simple schema suffices for relative pronouns.
Thefollowing schema just marks the constituent completeand pushes control one level down to parse a subordinaterelative clause.
Incidently, the schema VPTrAct aboveparses main clauses and subordinate relative clauses aswell.
For the latter it raises control back to the mainlevel.
(F_SCHEMA : RelPronIllhen:\[Relpron\]Down8nume=\[+Phrase +Nominal\])Up and Down commands are the only explicit piecesof control information a user has to write in FUNDPL.Implicitly he or she controls the parsing process by wayof assigning properties to constituents in I issume slots.Heuristics is used in schemas only to speed up search.When a schema has been fully matched and bound to itsdependants through function links, it becomes afunctional structure.
A functional structure is anannotated tree wl)ose branches are marked by functions.Any number of functional structures may exist duringparsing process on D-level.
Process ends succesfullywhen all words have entered the process, R-level isempty, a single functional structure appears on D-level,and its root has properties +3entente, -~Ph/YL~e.
Fig.
2shows how the process in Fig.
1 terminates.. .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
R-ieuel.
.
.
.
.
.
.
.
.
.
.
.
lauloi ................. IF-level-" .
.
.
~zv)  '-., ~r l~ .
| :  ...... ' ............... ,......f ;o ik8  'd I t-rilu-i e i len  k h-k o '.~'.~:; a:4l:\[. '
j  :YlJ:.t,i'..'" ' "6&'r 'tt ' .~| t ' f  " . "
i  ,p~ em kyl~nFig 2.
A final functional structureWe I~ave outlined a high level language for' parsingdependency constraints.
The language has beenimplemented on top of a lower-level language DPI.
whichwe have implemented earlier.
In FUNDPL parsing processis driven by an interpreter wI~ich utiIize~ blackboardcontrol strategy.Bresnan, J., A realistic transformational grammar.In Halle, Bresnan, and Miller (Eds.
),ZAegL-y~y_?,bgJgg~a\]_J?ea3JJiy, MIT Press, 1978.J~ppinen, H., and Ylilammi, M., Associative model ofmorphological analysis: an empirical inquiry.~t iona l  Linguistic& (to appear).Karttunen, L., and Kay, M., Parsing in a free word orderlanguage.
In Dowry, Karttunen, and Zwicky (Eds.
),Natural l.anguage Parsing.
Cambridge University Press,1985.Kay.
M., Parsing in functional unification grammar.In Dowty, Karttunen, and Zwicky (Eds.
), Nat~~_s J?g ,  Cambridge University Press, 1985.Lehtola, A., Jappinen, H., and Nelimarkka, E.,Language-based environment for natural languageparsing.
2nd European Conf.
of ACL, Geneve, 1985.Nelimarkka, E., J~ppinen, H., and Lehtola, A., Parsing aninflectional free word order language with two-wayfinite automata.
6th European Conf.
of AI, Plsa, 1984.Schieber, S., Using restriction to extent parsingalgorithms for complex feature-based formalisms.In Proc.
of the 22nd Annual Meeting of ACt, Chicago,1985.463
