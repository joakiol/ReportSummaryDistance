Completeness Conditions for MixedStrategy Bidirectional ParsingGraeme Ritchie*University of EdinburghIt has been suggested that, in certain circumstances, it might be useful for a grammar writerto annotate which rules are to be used bottom-up and which are to be used top-down within aparser, using a bidirectional variant of the active chart parsing technique.
The formal propertiesof such systems have not been fully explored.
One limitation of this mixed strategy technique isthat certain annotations of rules can lead to incompleteness; that is, there may be valid analyses ofthe input string that cannot be found by the parser.
We formalize a fairly natural notion of mixedstrategy bidirectional parsing for context-free grammars, in which one or more symbols within arule may be annotated as "triggers," so that the rule is either top-down (triggered from its left-hand side), or bottom-up (triggered from element(s) of its right-hand side).
We define a decidableproperty of annotated grammars, uch that any grammar with this property is provably complete.There are, however, some complete annotations of grammars that fall outside this decidable class.We show that membership ofthis wider class is undecidable.
These results uggest that the mixedstrategy approach is of rather limited usefulness, regardless of whether it is empirically efficientor not.1.
OverviewMany methods have been explored for parsing context-free grammars; some of thesemethods are loosely categorized as "top-down" (e.g., recursive descent), some as"bottom-up" (e.g., shift-reduce), and some could be seen as a mixture of these twovarieties (e.g., left-corner).
All of the well-explored methods assume that the rules inthe grammar are handled in a fairly uniform way.
In particular, it is not usual for therules to be separated into two classes--those to be used bottom-up and those to beused top-down.
Steel and de Roeck (1987) argue (giving credit to Henry Thompsonfor some of the ideas) that the performance of a parser could be improved by allowingthe grammar writer to do exactly this.
The motivation comes from linguistic phenom-ena where it is intuitively clear that one symbol (linguistic category) in the rule isnoticeably more distinctive than others, so that a parser should not waste time tryingto match the rule unless that distinctive lement is there.
For example, a rule such asNP --* NP CONJ NP (where CONJ indicates a conjunction, such as and) should not beinvoked simply because a noun phrase (NP), or the start of a noun phrase, has beenfound.
The proposal is that if the linguist is allowed to mark the CONJ element as a"trigger," and the parser introduces the rule, bottom-up, only if the trigger has beenmatched, then parsing would proceed more efficiently.Steel and de Roeck describe semi-formally a system they have implemented, whichthey claim benefits from this labeling of rules.
The current paper does not take aposition on the wisdom or effectiveness of such labeling.
Instead, we explore the* Division of Informatics, 80 South Bridge, Edinburgh EH1 1HN, Scotland.
(~) 1999 Association for Computational LinguisticsComputational Linguistics Volume 25, Number 4formal consequences of this proposal.
We show that, although the idea may seemsuperficially plausible, it still has certain formal limitations in the area of completenessand decidability.
The proofs may be of some theoretical interest from a formal anguageviewpoint.The central ideas are as follows: A conventional context-free grammar is "anno-tated" by marking at least one symbol in each rule as a trigger.
Marking the left-hand-side (LHS) symbol as a trigger indicates that the rule can be used top-down; markinga right-hand-side (RHS) symbol as a trigger means that the rule can be used bottom-up whenever a constituent labeled with that symbol is found by the parser.
1Using amethod of parsing known as active chart parsing, it is straightforward togive a precisemeaning to this labeling of rules, since a chart parser can operate ither bottom-up ortop-down.
The scheme examined here is similar to, but different in important waysfrom, head-driven parsing (see Section 7.2).It is simple to construct an annotated grammar in which there are some analysesthat are valid according to the original (unannotated) grammar but that would notbe parsed by a chart parser following the annotations.
This establishes that not allannotated grammars allow complete parsing.The main substance of this paper is as follows: A property of annotated grammars(direct analyzability) is defined, which is decidable, and it is proven that any annotatedgrammar with this property will also allow the parser to produce all the valid analyseslicensed by the original grammar.
However, some annotated grammars are not directlyanalyzable, but nevertheless lead to complete parsing.
A characteristic of (a subset of)this wider class of annotated grammars (indirect analyzability) is defined, and it isproven that any annotated grammar with this property will allow complete parsing.However, indirect analyzability can be shown to be undecidable.2.
The problems2.1 Losing CompletenessBefore presenting a formal definition of the mechanisms, and proceeding to prove theirvarious properties, it is useful to consider informally a very simple example that showshow this approach can lead to loss of analyses by the parser.
As outlined above, thecentral idea is to allow different rules to be marked as either top-down (LHS triggersymbol) or bottom-up (RHS trigger symbol(s)), or both.
Top-down means that the rulecan be invoked only if some other rule has established a need for its LHS symbol (orif the LHS symbol is the initial symbol of the grammar).
Bottom-up means that therule can be invoked only if one of the symbols marked as triggers on its RHS hasbeen completely parsed.
We shall assume that rules of the form A --* w where w is aterminal symbol are never annotated, and can be used whenever needed in the parser(all this is made precise in our formalization in Section 3.3 below).For this informal presentation, and occasionally elsewhere, we shall mark a triggersymbol A by overlining it, thus: A.
In the illustrative examples, the distinguished(initial) symbol of the grammar will always be S and terminal symbols will be inlower case.1 The term "bottom-up" isadopted here for compatibiity with some other literature on chart parsing, andfor lack of a better simple phrase.
In fact, there are various possible parsing regimes that are in somesense "bottom-up," and it is arguable that some are "more bottom-up" than those outlined here.
Whereright-hand-side triggers are restricted to the leftmost symbol (as in Section 5below), parsing is morelike "left-corner" parsing, but this would be a misleading term when triggers are allowed elsewhere.458Ritchie Completeness Conditions for Mixed Strategy Bidirectional ParsingConsider the annotated grammar (see Section 3 for a definition of grammar):S ~ NP  VPNP --* Art  NVP ~ runsArt  --* theN--*  dogIt should be intuitively clear that although this grammar generates exactly one sen-tence, that string cannot be parsed by a parser that follows the annotations as de-scribed.
The rule S ~ NP VP cannot be used until an initial NP is recognized, and therule that might do that, NP --+ Art  N,  cannot be used until an initial need for an NPis established (which could happen only using S ~ NP  VP).
There is a form of dead-lock, resulting in incompleteness.
It should also be intuitively clear that the presenceor absence of such combinations of annotations may not be as obvious as it is here.In a grammar with hundreds of rules, the presence of a combination that blocks anotherwise valid analysis could take some detailed checking.
This is a serious flaw, asthe annotation method was supposed to alter the efficiency of the parser, but not toeliminate strings from its language.It would be very easy to ensure that annotation does not lose analyses, by stipu-lating that all rules are marked as top-down, or that all rules are marked as bottom-upwith the leftmost symbol as a trigger.
The parser would then behave as a conventionaltop-down (or bottom-up) chart parser, which is known to be complete.
However, sincethe aim is to allow the grammar writer to make a nontrivial annotation of the grammar(in an attempt to allow linguistic knowledge to influence the efficiency of the parsing),we need to be able to check the completeness of arbitrarily annotated grammars.
InSection 4 below, we define formally a nontrivial characteristic of annotated grammarsthat guarantees that they do not lose analyses in this way, and show that this propertyof grammars i decidable.2.2 Completeness through InteractionsThe situation is even more complicated than Section 2.1 above indicates.
One of thecrucial aspects of chart parsing (which is central to its simplicity and its efficiency)is that any entry in a chart can be used to combine with any other compatible ntry,regardless ofwhether there is a single coherent tree that will result from it.
In particular,an entry that has been inserted in the chart as the result of some rule interaction thatdoes not itself produce acomplete sentential tree (i.e., a partial fragment of an analysis)can contribute to some other analysis that happens to require it.This is best demonstrated by a simple artificial example.
Consider the strategy-marked grammar, notation as before:-S--* E HH- - -~BF-~__, p QE --* jP---~ IQ---~mF ---~ kThe un-strategy-marked v rsion of this grammar would generate the string j lmk, with459Computational Linguistics Volume 25, Number 4a derivation as follows (see Section 3 for a definition of the relation "0"):S =~ EH ~ jH ~jBF ~jPQF ~jlQF ~j lmF =~jlmkThe tree described by this derivation cannot be found by a parser following thestrategy-marked grammar, for reasons imilar to those outlined in Section 2.1 above.Suppose we now add the following rules to the grammar:S--,C DD--,-E A-d--* B CC--+ xThis larger grammar will also generate the string xjlmx, but this is not relevant to theargument.
What is more interesting is that the extended grammar does now allow theparsing of jlmk, with an associated syntax tree that corresponds tothe derivation givenabove (i.e., a tree that makes no direct use of the rules that have been added to thegrammar).
The way in which the added rules act as a "catalyst" to allow the hithertoblocked analysis is an example of a general phenomenon.
Informally, what happens isthe following: (A chart parser is assumed here; formal details are given in Section 3.3below.)
With just the smaller grammar, the nonterminal H cannot be expanded asrequired, since it is on the LHS of a bottom-up rule, and its first symbol B cannot berecognized because it requires a top-down rule.
In both the original grammar and thelarger grammar, H is introduced only by the rule S ~ E H, i.e., with E on its immediateleft.
So the only strings where H can participate in an analysis are those where E occursat the start.
Consider the parsing, with the larger grammar, of the string jlmk (whichdoes indeed start with an E).
As E is preterminal, it can be recognized irectly (with noeffect from annotations).
In the larger grammar, the bottom-up rule D -~ E A is thenintroduced to the parsing, which creates a predictive ntry in the parser's tructuresseeking an A, after the recognized E. The top-down rule A -+ B C is then introduced,which leads to an entry, at that same point, seeking a B.
This causes the top-downrule B --* P Q (from the original grammar) to be introduced; this is a crucial step.
Thisallows the sequence Im to be parsed as a B, thereby causing the introduction of thebottom-up rule H --+ B F, and the subsequent success of the parse.2.3 What Are the Problems?The grammars discussed above (Sections 2.1 and 2.2) are examples of various aspectsof the problem.
We shall show that there is a simple, decidable property of annotatedgrammars that guarantees completeness, and that could be used to detect he sim-ple blocking illustrated in Section 2.1.
However, this property is merely a sufficientcondition for completeness, as the larger grammar of Section 2.2 above does not pos-sess it, despite being complete.
We shall show that the larger grammar of Section 2.2has a more general property, which also guarantees completeness.
However, the moregeneral property of annotated grammars i undecidable.First, we have to set up the basic formal mechanisms for our definitions.3.
Trees, Grammars, and Charts3.1 Basic Concepts and TermsWe adopt he standard concepts for syntax trees (see Aho and Ullman \[1972, Sect.
0.5\]or Partee, ter Meulen, and Wall \[1990, Chap.
16\] for possible approaches to formaliza-tion).
A syntax tree is a rooted, ordered, labeled tree.
Each node apart from the root460Ritchie Completeness Conditions for Mixed Strategy Bidirectional Parsinghas exactly one mother  node, and each nonterminal node has one or more daughternodes.
A tree is said to span the sequence of labels associated with the sequence ofits terminal nodes (in left-to-right order), and we shall also say that the root node ofa (sub)tree spans its sequence of terminal nodes.Definition 1The height of a node in a tree is defined as follows.
A terminal node has height 0; anonterminal node has height = (1 + max imum height of its daughter nodes).Definition 2The depth of a node in a tree is defined as follows.
A root node has depth 0; a nonrootnode has depth = (1 + depth of its parent node).Following the usual conventions (e.g., Aho and Ul lman 1972), we will take acontext-free grammar  (CFG) to be a quadruple (VN, VT, P, S), consisting of a set VNof nonterminal symbols, a set VT of terminal  symbols, a set P of rules (productions),and a single dist inguished symbol  S E VN.
Set theoretically, rules can be regarded asbeing ordered pairs where the first element is a nonterminal symbol and the secondis a tuple of symbols, i.e., of the form (A0, (A1 .
.
.
.
.
Ak)) where k > 0, but for ease ofexposition they will be written asA0 --+ A1 .. .
AkWe will make the following simplifying assumptions (which do not lose general-ity):..Each rule in P is either of the form Ao --+ A1A2.
.
.
Ak with k > 0, whereall the symbols Ai E VN, or  of the form A --+ w where w E VT.The grammar  has no redundant symbols, in the sense that no symbolsare "useless" or "inaccessible" as defined by Aho and Ul lman (1972,Sect.
2.4.2).Rules of the form A --* w where w E VT will be referred to as lexical rules, and otherrules as nonlexical.
A nonterminal A that appears in a lexical rule will be calledpreterminal,  or lexical.Given a CFG G, a syntax tree based on G is a rooted, ordered tree whose nonter-minal nodes are labeled with elements of VN and whose terminal nodes are labeledwith elements of VT. Those nodes immediately dominating terminal nodes will bereferred to as preterminal;  other nonterminal nodes will be referred to as nonlexical.Where a tree T spans a terminal string al .
.
.
an, and M is a node within T that spansai.
.
?
ak, the start of M is the index i - 1, and the end of M is the index k.A syntax tree based on (VN, VT, P, S) is said to be wel l - formed with respect to(VN, VT, P, S) if for every nonterminal node with label A0 and daughter nodes labeledA1 .
.
.
.
, Ak, there is a rule in P of the form Ao --+ A1 ?
.. Ak; this rule is said to licensethe node labeled A0.
For convenience, we shall distinguish between a tree that iscompatible with the rules of the grammar, and a tree that also spans a sentence.
Asyntax tree is said to be generated by a grammar  G iff:.2.The root node is labeled with S (the distinguished symbol).The tree is wel l - formed w.r.t.G.461Computational Linguistics Volume 25, Number 4We will write trees(G) for the set of all trees generated by G.The conventional "rewrite" interpretation of CFGs will also be used in some sit-uations (Section 5 below).
Given two strings w1, W2 f rom (W N \[..J VT)* , then w1 directlyderives w2, written "w1 ~ w2," if w1 = 6A% ~;2 ~- 6Ol'y and A --* c~ is a rule in G. Sim-ilarly, W 1 derives w2, written "w1 G w2," is the reflexive transitive closure of directlyderives.
A derivation is a sequence of symbol strings w1 .
.
.
.
.
wn such that wi ~ wi+lfor all 1 < i < n. A rightmost derivation is one in which each step from wi to ~i+1 ismade by replacing the furthest right nonterminal symbol in W i USing some rule (i.e.,-y in the above definition of directly derives is entirely made up of terminal symbols)(cf.
Aho and Ullman 1972).3.2 Annotated GrammarsSince we are allowing trigger elements of a rule to occur anywhere on the RHS of a rule,it is necessary to allow the parser to explore outwards in either direction (leftwardsor rightwards) from a constituent that has been parsed.
Hence the parsing schemesdefined below are referred to as bidirectional, to reflect his fact.
This does not alludeto the two "directions" of top-down or bottom-up.Definition 3Let G be a context-free grammar (VN, VT, P, S).
A bidirectional strategy marking ofG is a (total) function tr from the nonlexical rules in P to ~P(N) (the set of sets ofnonnegative integers) such that for any rule r of the form Ao --* A1 .. .
Ak:1. tr(r) # 02.
0 < i < k for every i E tr(r)Informally, tr indicates which element(s) of the rule can trigger it.
If 0 E tr(r), theLHS of the rule is a trigger; that is, it can be used top-down.
If j E tr(r), where j > 0,then element j of the RHS can act as a trigger, bottom-up.
The value of tr(r) is a set ofintegers in order to allow a rule to have more than one possible trigger; in particular,it is allowable for a rule to be used either top-down or bottom-up.Definition 4A bidirectionally strategy-marked context free-grammar (BSCFG) is a pair (G, tr)where G is a CFG and tr is a bidirectional strategy marking of G.Definition 5Let ((VN, VT, P, S), tr) be a bidirectionally strategy-marked context-free grammar.
Thena rule r E P is said to be:1. top-down, if 0 E tr(r).2. bottom-up, if there is an i > 0 such that i E tr(r).3. purely bottom-up, if 0 ~ tr(r).4. purely top-down, if tr(r) = {0}.3.3 Active ChartsThe techniques and structures known as active charts have been in use for parsing(at least in the area of natural anguage processing) since the early 1970s.
The method462Ritchie Completeness Conditions for Mixed Strategy Bidirectional Parsingis a generalization of Earley's algorithm (Earley 1970), and tutorial expositions of theideas can be found in Thompson and Ritchie (1984) or Winograd (1983).
In keepingwith more recent presentations (e.g., Shieber, Schabes, and Pereira 1995; Sikkel and opden Akker 1996) we define the parsing principles as well-formedness conditions oncomplete charts, abstracting away from the sequence of steps used to build them.Definition 6Given a CFG G of the form (VN, VT, P, S) a double-dotted rule based on G is a triple(p, l, r) where p is a rule in P of the form Ao --* A1 .. .
Ak and l, r are integers uch thatO<l<r<k.Such a rule will be written as:Ao --* A1 .
.
.
Al ?
Ai+l .
.
.
Ar ?
Ar+l .
.
.
Akfor ease of exposition and similarity to previous literature.
Where either l = 0 or r = k,the empty portions will be omitted from the expression.Definition 7Given a CFG G = (VN, VT, P, S), an edge based on G is a triple (i,j, d) where i and jare nonnegative integers with i _< j, and d is a double-dotted rule based on G.An edge is said to be lexical or nonlexical according to whether or not the rule islexical.
An edge of the form (i,j, Ao ~ A1 .
.
.
Aq -1  ?
Aq .
.. Ap ?
Ap+l .
.
.
Ak) where eitherq > 1 or p < k (i.e., with a nonempty component at either end) is referred to asan active edge, and an edge of the form (i,j, Ao --+ ?A1 .
.
.Ak  o) is an inactive edge.An active edge (i,i, Ao --* ?
,A1 .
.
.Ak)  or (i,i, Ao --* A1 .
.
.Ak  ?
?)
is referred to as anempty active edge.
(Sometimes it will be referred to as "an empty active edge forA0 --+ a l .
.
.
Ak.
")Definition 8Given a CFG G = (VN, VT, P, S) and a string al .
.
.
.
.
an from V~, a chart based ona l , .
.
.
,  an and using G is a set C of edges based on G that meets the following condi-tions:.2.for every (i,j, r) E C, i E {0 .
.
.
.
.
n} and j c {0 .
.
.
.
.
n}for ai E VT, (i -- 1, i,L ~ .ai ,)  E C iff ai C {al, a2,... ,an} and L --+ ai ff P.The terminology of the last three definitions will also be used for a BSCFG (G, tr).Definition 9Let G be a CFG, and let C be a chart based on a string ?
and using G. C is said to bebidirectionally resolved iff both the following conditions hold:.
Left Extension: For every pair of edges:(i,j, Ao --+ ,A1 .
.
.Am' )(j,k, B0 --~ B1 .
.
.Bq ?
Bq+I.. .Bp " Bp+l.
.
.Bv)where p ~ v, q > 0 and A0 = Bq, there is also an edge:(i, k, Bo ~ B1 .
.
.
Bq_I ?
Bq.
.
.
Bp ?
Bp+l .
.
.
Bv)463Computational Linguistics Volume 25, Number 42.
Right Extension: For every pair of edges:(i,j, Bo --* B1.
.
.
Bq  ?
Bq+l  .
.
.
Bp  ?
Bp+l  .
.
.
Bv)(j,k, Ao --* ?A1 .
.
.Am' )where p < v, q > 0 and Ao -- Bp+l, there is also an edge:(i, k, Bo --+ B1 .
.
.
Bq ?
Bq+l .
.
.
Bp+l ?
Bp+2... By)Lemma 1Let C be a bidirectionally resolved chart based on a string cr and using a CFG G, andsuppose that C contains an edge of the form:(i,j, Bo --~ B1.
.. Bq ?
Bq+l .. .
Bp ?
Bp+l .. .
By)(i) (Rightwards) If C contains edges of the form:(ipq-l,jp+l, Bp+l --+ ?Wp+l,)(ip+t, jp+,, Bp+t --+ ?We+t?
)where (p + t) <_ v, ik+ 1 ---- jk where (p + 1) _< k < (p + t) and ip+l = j, then Calso contains an edge of the form:(i, jp+t, Bo --~ B1.. .
Bq ?
Bq+l ...Bp+t ?
Bp+t+l .
.
.Bv)(ii) (Leftwards) If C contains edges of the form:( i(q-t), j(q-t), B(q-t) -'4 ?bd(q-t) ?
)(iq,jq, Bq --4 ?~q,)where 0 < t < q, ik+l = jk where (q - t) ( k < q and jq -~ i, then C alsocontains an edge of the form:(i(q_t),j, Bo ~ B1 ...B(q_t_l) ?
B(q_t) .
.
.
Bp ?
Bp+l.. .
By)ProofBoth the cases (i) and (ii) proceed by induction on the number of inactive edges.CorollaryIf C is as described, and it contains a full set of edges as given at both sides (i.e.,t = (q - 1), so that there are q inactive edges to the left, and (p + t) = v so that thereare (v - p) inactive edges to the right, all with labels matching the rule), then there isa complete (inactive) edge of the form (il,jv, Bo -~ .B1 .
.
.
Bv.
).A chart parser is driven by two principles: one is that of edge combination, as givenin the above definition of bidirectionally resolved, and the other is the introduction ofrules into the chart.
For a strategy-marked grammar, the rule-introduction principle issensitive to the annotation of the rules.464Ritchie Completeness Conditions for Mixed Strategy Bidirectional ParsingDefinition 10Let (G, tr) be a BSCFG, and let C be a chart based on a string c~ and using G. C is saidto be bidirectionally mixed strategy explored iff all the following conditions hold:1.
(Bottom-up activation) For every edge:( i , j ,  Ao  ~ .A1 .
.
.Am' )there is an edge in C:(i,j, Bo ~ B1 .
.
.
Bq_ l  ?
Bq ?
Bq+l .
.
.
Bv)for every rule r in G of the form Bo --* B1 .
.
.
Bv such that q C tr(r)  andBq = A0,2.
(Top-down initialization) For every rule r in G of the form S --~ B1 .
.
.
Bk,where S is the distinguished symbol of G and 0 c t r ( r ) ,  there is an edgein C of the form:(0 ,0 ,S  ~ ?
?
B1 .
.
.Bk)3.
(Top-down activation, right) For every edge:(i,j, Bo --* B1 .
.
.
Bq ?
Bq+l .
.
.
Bp ?
Bp+l .
.
.
Bv)where 0 _< p < v, and every rule r in G of the form Ao ~ A1 .
.
.
Ak  forwhich Bp+l = Ao  and 0 C t r ( r ) ,  there is also an edge in C of the form:(j,j, A0 --* " ?
A1 .
.
.Ak)4.
(Top-down activation, left) For every edge:( i, j ,  Bo ~ B1.
.
.
Bq ?
Bq+ l .
.
.
Bp ?
Bp+ l .
.
.
By)where 0 < q _< v, and every rule r in G of the form Ao --* A1 .
.
.
Ak  forwhich Bq = Ao and 0 c t r ( r ) ,  there is also an edge in C of the form:(i, i, Ao  --* A1 .
.
.
Ak  ?
?
)For brevity, the term ful ly bidirectional will be used for a chart that is bothbidirectionally resolved and bidirectionally mixed strategy explored.To explore the issue of completeness (i.e., whether a parsing mechanism finds allvalid analyses) we need to define how the edges in a chart correspond to those in asyntax tree.Definition 11A chart C based on a la2 .
.
?
an is said to contain a representation of a syntax tree T, iff:1.
T spans a substring (not necessarily proper) of a la2 .
.
,  an; and2.
for every nonterminal node N in T, spanning ai+l ?
?
?
aj, labeled Ao, withk daughters labeled A1 .
.
.
.
.
Ak in  order, C contains an edge( i , j ,  Ao  --+ ?A1 .
.
.Ak?
)(This includes the case where k = I and A1 c V~.
)465Computational Linguistics Volume 25, Number 4Notice that for any chart C based on a string or, C will contain an edge for eachpreterminal node of any tree that spans c~, by virtue of the definition of a chart being"based on" a string.
Hence later discussions of parsing and completeness can assumethe presence of these edges in the relevant charts, with only the presence of edges forother nonterminal nodes being subject o verification.Definition 12Given a CFG G, a bidirectional strategy-marking tr of G is said to be complete iff forevery tree T E trees(G) that spans a string or, any fully bidirectional chart C based oncr and using (G, tr) contains a representation f T.4.
A Decidable Class of Complete AnnotationsIn this section we define a decidable property of annotated grammars that guar-antees that a parser following the annotations will not miss analyses in the man-ner outlined in Section 2.1.
There is also a weaker (more general) sufficient con-dition for completeness, which is defined in Section 5 below, but which is unde-cidable.
The fact that the stronger condition is decidable makes it worth defining,and some of the proofs in Section 5 make use of some concepts from the currentsection.4.1 ReachabilityAnother notion that has to be formalized is the way in which a syntax tree can beparsed from a string of terminal symbols in a purely bottom-up manner.Definition 13Let (G, tr) be a BSCFG.
In a syntax tree T generated by G, a nonlexical node M0,with daughters M1 .
.
.
.
.
Mk, is said to be reachable from below iff M0 is licensed by abottom-up rule r and there is a j, 1 G j G k, such that j E tr(r) and one of the followingis true:.2.Mj is a preterminal node of T;Mj is reachable from below.Definition 14Let (G, tr) be a BSCFG.
A syntax tree T generated by G, is said to be fully reachableiff every nonlexical node M in T licensed by a purely bottom-up rule is reachable frombelow.4.2 Direct AnalyzabilityNow we need to define a property of grammars that will guarantee that generatedtrees are fully reachable in the above sense.
This can be done in three stages: first,define a property of nonterminal symbols; then, use that to define a property of gram-mars; lastly, prove that any grammar with this property generates only fully reachabletrees.A first approximation to the definition for the property of nonterminals would bethe following:466Ritchie Completeness Conditions for Mixed Strategy Bidirectional ParsingDraft Definition:Given a BSCFG (G, tr), a nonterminal symbol A0 is directly analyzable iff every ruler of the form A0 --* .. .
is either lexical, or of the form Ao --* A1 .
.
.
Ak with at least onei E tr(r), i > 0, for which Ai is directly analyzable.The subsequent definition for grammars is then:Definition 15A BSCFG (G, tr) is directly analyzable iff it meets the following condition: for everypurely bottom-up rule r of the form Ao --* A1 .
.
.
Ak, there is at least one i C tr(r), i > 0,for which Ai is directly analyzable.The draft definition captures the essential idea in a fairly natural and clear way,but it has a slight technical problem.
Consider the toy grammar given below:S~-d  BA ---~ CAC---~ xB -* yA --+ zIn this grammar, the nonterminal A is not classed as directly analyzable.
This is be-cause there is a cycle from A to itself via trigger symbols in bottom-up rules.
2 It wouldbe equally consistent with the draft definition to state that A is directly analyzable, orto stipulate that it is not directly analyzable.
There is a sense in which the draft deft-nition is underspecified, and gives only partial coverage of the items being classified(nonterminals).
To extend this definition to total coverage, a more elaborate construc-tion is needed (borrowed from theoretical computer science; cf.
Stoy \[1981, Chap.
6\]).
3First, for any BSCFG (G, tr) we define an analyzability predicate as any function gfrom nonterminal symbols to the set {true,false} that assigns true to a category A0iff every rule r of the form A0 --* .. .
is either lexical, or of the form A0 --* A1 ...Ak,with at least one i E tr(r), i > 0, for which g(Ai) = true.
Call the set of all such func-tions A73(G, tr).
For any two g,h E A79(G, tr), define the relation "u"  by h u g iffh(A) = true D g(A) = true.
This relation is easily shown to be reflexive, transitive, andantisymmetric, and hence (A~(G, tr), F) forms a partially ordered set (Maclane andBirkhoff 1967, 59; Stoy 1981, 82).
Then for any set gl .
.
.
.
.
gn of elements of A~P(G, tr),the function g' (in A3V(G, tr)) given byg'(A) = true iff either gl(A)  = true or ... gn(A) = trueis at least upper bound (Maclane and Birkhoff 1967; Stoy 1981) for gl .
.
.
.
.
gn withrespect to G. Since A3V(G, tr) is finite, the presence of a 1.u.b.
for any subset means it hasa maximum element, which we will call APMAX(G,tr).
This predicate APMAX(G,tr) willassign true to a symbol A if there is some analyzability predicate (for (G, tr)) that makesthis assignment.
4 Then define a nonterminal A (from G) to be directly analyzable iffAPMAX(G,tr)(A ) = true.
Intuitively, any nonterminal that the draft definition might2 Thanks to Alistair Willis for pointing out this problem.3 Thanks to Suresh Manandhar for suggesting this approach.4 Stoy (1981, 79-80) illustrates the use of a minimum element from an ordered set of possible functions,but here we have chosen to use the maximum.467Computational Linguistics Volume 25, Number 4leave as undefined with respect o being directly analyzable is classed by this newdefinition as being directly analyzable.
Instead of the draft definition, we can nowhave the following complete definition:Definition 16Given a BSCFG (G, tr), a nonterminal symbol A0 is directlyAPMAX(c ,  tr) (Ao) = true, where APMAX(G,tr) is as constructed above.analyzable iffNotice that it follows from the construction of APMAX(G,tr) that A0 is directly ana-lyzable iff every rule r of the form A0 --* .. .
is either lexical, or of the form Ao --* A1 .. .
Akwith at least one i E tr(r), i > 0, for which Ai is directly analyzable.
That is, the draftdefinition, which was not sufficiently self-contained to be a definition, is now deriv-able as a theorem from the more rigorous definition.
This means that we can use thelogical equivalence stated in the draft definition in subsequent proofs.Lemma 2Let (G, tr) be a BSCFG that is directly analyzable.
Let T be a tree in trees(G).
Then Tis fully reachable.ProofIt is straightforward to prove the following preliminary result, using induction on theheight of nodes and the logical equivalence stated in the draft definition above:Any node in T that has a directly analyzable label is reachable from below.It is then easy to show that any node in T that is licensed by a purely bottom-up ruleis reachable from below.
\[\]4.3 ParsingLemma 3Let (G, tr) be a BSCFG.
Let T be a fully reachable tree in trees(G), spanning the stringor.
Let C be a fully bidirectional chart based on cr and using (G, tr).
Then for any nodeM in T, labeled A:..If M is licensed by a purely bottom-up rule, then C contains arepresentation f the subtree rooted at M.If M is licensed by a top-down rule, and there is in C an active edge(t,g, B0 --~ B1 .
.
.Bp_l  ?
Bp.
.
.Bq_ l  ?
Bq.
.
.Bv)where either Bp-1 = A and t is the end of M, or Bq = A and g is the startof M, then C contains a representation f the subtree rooted at M.ProofBy induction on the height of nodes.Inductive Hypothesis: For any 0 < d ~ < d, if node M in T is of height d ~, theconditions listed in the lemma hold.Base Case: Suppose M is of height 1 (i.e., preterminal).
Then C contains a repre-sentation of the subtree rooted at M, regardless of the antecedent conditions.468Ritchie Completeness Conditions for Mixed Strategy Bidirectional ParsingInductive Step: Suppose M is of height d, where d > 1, and is labeled A.
(a) Suppose M, with daughter nodes M1 .
.
.
.
.
Mk, is licensed by a purelybottom-up rule A --* A1 ?
?
?
Ak.
Then, since T is fully reachable, there is aj, 1 ~ j ~ k such that My is reachable from below; that is, My is eitherlexical or licensed by a bottom-up rule.
Therefore, by the InductiveHypothesis, C contains a representation f the subtree rooted at Mj.
SinceC is fully bidirectional, it contains an edge spanning Mj of the form:( l ,h ,A ~ A1.
.
.Aj_I  ?
Aj ?
Aj+l .. .ak)Now consider the nodes Mi, for j + 1 K i < k. The Inductive Hypothesisapplies to each of these nodes.
Hence it can be proved by induction on ithat there is a representation in C of the subtree rooted at Mi for allj + 1 < i < k (cf.
Lemma 1).
Similarly, it can be proved that there arerepresentations in C for the subtrees rooted at M1 .
.
.
.
.
Mj_I .
By thecorollary to Lemma 1, there is a representation for the tree rooted at MinC.Suppose M is licensed by a top-down rule.
Suppose there is an edge(t,g, Bo ~ B1 .
.
.
Bp-1 ?
Bp.
.
.
Bq-1 * Bq.
.
.
Bv)where Bq = A and g is the start of M (a similar argument holds in thecase where B;_I = A and t is the end of M).
Since the chart is fullybidirectional, there must also be an empty active edge(g, g ,A  --~ ?
?
A1.
.
.Ak)By a similar argument to that in case (a) above, it follows that there arerepresentations in C for all the nodes M1 .
.
.
.
.
Mk and thence for M.This establishes the main induction.
\[\]Lemma 4Let (G, tr) be a BSCFG that is directly analyzable.
Let T be a tree in trees(G), spanningthe string ~.
Let C be a fully bidirectional chart based on o- and using (G, tr).
Then forany node M in T, labeled A:..If M is licensed by a purely bottom-up rule, then C contains arepresentation f the subtree rooted at M.If M is licensed by a top-down rule, and there is in C an active edge(t,g, Bo ~ B1.
.
.Bp_ l  e B ; .
.
.Bq_ l  o Bq.
.
.Bv)where either Bp-1 = A and t is the end of M, or Bq = A and g is the startof M, then C contains a representation f the subtree rooted at M.ProofFollows from Lemmas 2 and 3.
\[\]469Computational Linguistics Volume 25, Number 4Being reachable from below can be seen as a condition on nodes that can be builtbottom-up.
Surprisingly, we do not need a corresponding condition for nodes thatare built top-down.
It is possible to formulate the appropriate condition, but it turnsout that any tree that meets the condition of being fully reachable will also meet theappropriate condition for top-down nodes.
It is hard to give an informal, intuitiveexplanation for this, but roughly speaking, the reason is as follows.
For a top-downrule to be invoked, it must be used in a position at which some prediction of its LHSsymbol A will be introduced (by some other rule).
This can happen either as a cascadeof predictions from above, using a sequence of top-down rules, or because a rule hasbeen introduced and has caused a sequence of predictions to be made, either left-to-right or right-to-left, as its RHS symbols are parsed.
For either of these to happen,either there must be a clear path of daughter categories from some other prediction, orA must be on the RHS of a rule that is somehow introduced.
The daughter conditionof "reachable from below" simultaneously imposes these conditions on the top-downrules.4.4 CompletenessThe final step in proving completeness is now simple.Theorem 1If a BSCFG (G, tr) is directly analyzable, then tr is complete.ProofLet T be a tree in trees(G), spanning the string or, with root node M0 labeled S (thedistinguished symbol of G).
Let C be a fully bidirectional chart based on cr and using(G, tr).
(a)(b)If M0 is licensed by a bottom-up rule, then by Lemma 4, C contains arepresentation f the tree rooted at M0.If M0 is licensed by a top-down rule S --* A1 .
.
.
.
.
Ak, then C must containan empty active edge of the form:(0,0, S --~ ?
.A1.. .Ak)It follows from repeated applications of Lemma 4 and Lemma 1 (similarto part (b) of the Inductive Step of Lemma 3) that C contains arepresentation f the subtrees rooted at the daughters of M0, and thenceof the subtree rooted at M0.
\[\]Thus we have proved that all BSCFGs that meet the condition of being directlyanalyzable can be bidirectionally parsed without any valid trees being omitted.Theorem 2It is decidable whether a given BSCFG is directly analyzable.ProofThis is straightforward to verify from the definition of directly analyzable (see Ap-pendix A for an algorithm).470Ritchie Completeness Conditions for Mixed Strategy Bidirectional Parsing5.
An Undecidable Class of Complete Annotations5.1 Informal OutlineBefore proceeding to formalize the mechanisms underlying the problem presented inSection 2.2, it is useful to set out informally the relevant factors in that example.
Astrategy-marked grammar (G, tr) causes problems only if there is some purely bottom-up rule of the form Ao --* A1.
.
.
Ak such that every trigger symbol Ai requires a purelytop-down rule somewhere in its expansion (see Section 4.2 above).
Such a rule leads tothe possibility of there being a tree T E trees(G) that contains a nonterminal node thatcan only be built by a bottom-up rule, and whose trigger daughter can only be builtusing a top-down rule.
This would give rise to a tree that was not fully reachable.
Inthe example in Section 2.2 above, the rulesH---~ BFB - -~PQcreate this situation.
The "upper" symbol H cannot be parsed because the "lower"symbol B cannot be parsed.
What salvages this difficulty is the fact that the "upper"nonterminal (H in this example) always occurs in a left context, (i.e., a string of sym-bols to its left) with the following property: Every possible terminal expansion of theleft context contains a substring that will, via bottom-up rules, introduce rules that arebound to result in the introduction of an active edge, which starts at the point wherethe "upper" symbol (H) is needed and which is seeking the "lower" symbol (B).The illustrative grammars in Sections 2.1 and 2.2 are of a particular subclass ofgrammars--those where tr(r) = {0} or tr(r) = {1} for any (nonlexical) rule r. This isequivalent to partitioning the rules into two subgroups--top-down and bottom-up--where the bottom-up rules are always triggered in a left-corner manner, much as inconventional "bottom-up" chart parsers (such as those in Thompson and Ritchie \[1984\]or Winograd \[1983\]).
That is, there is a natural subclass of annotated grammars thatdo not rely on the bidirectional exploration of the chart, but allow this limited formof mixed strategy left-to-right exploration.The definitions and proofs of the earlier sections apply to this subclass.
It is alsoclear, from Section 2.2, that the issue of "completeness by interaction" can be illustratedwithin this limited subclass.
In the remainder of Section 5 below, it is proved thatdetecting the possibility of such rule interactions i  undecidable even for this limitedsubclass of grammars.
It follows that it must be undecidable for the more generalclass, where any annotation is permitted.
The advantages of focusing on this morelimited subclass are twofold: it shows that restricting the annotations in this waywould not ease the undecidability problem, and it simplifies the proofs (which arealready tediously complex).Definition 17A left-corner strategy-marked context-free grammar (LCSCFG) is a BSCFG (G, tr) suchthat tr(r) c {0,1} for every rule r in G.This definition allows a rule to be both bottom-up and top-down marked, ratherthan enforcing a strict partitioning.
In the following proofs, we will define constructsfor BSCFGs where possible, simply for generality, but where it matters we shall confineattention to LCSCFGs, thereby narrowing the range of contexts relevant to parsing aparticular symbol.471Computational Linguistics Volume 25, Number 45.2 Left ContextsFollowing from the informal discussion in Section 5.1 above, we need to define moreprecisely the notion of a left context of a symbol.
What we want is a way of charac-terizing, for a given nonterminal A, exactly those strings of symbols that must appearimmediately to the left of A in any valid derivation in which A appears.
These neednot be all that is to the left of A in a derivation, but it must be the case that A cannotappear without having one of these left context strings immediately adjacent o it.In the following definitions, the derivation relationship "G"  is the conventionalone, and is independent of any strategy marking; the relationship "~"  indicates arightmost derivation (see Section 3.1 earlier).Definition 18Suppose we have a context-free grammar (VN, VT, P, S), and a sequence of symbolsB1 .
.
.
.
,B t  in VN, where there are rules e i --+ P i - lB i - l f l i -1  for 2 < i < t (Pi,  fli C V'~l ).Suppose we have a rightmost derivation of the form:Bt ~ P t - lB t - la ; t -1RP t -  l P t -  2 Bt -  20dt-2R::~ P t - lP t -2  ?
?
.
B2?v2R=:k P t - lP t -2  ?
?
?
plBlCOl(all the ~vi E V~).
This derivation is said to be:1.2.3.4.nonrepeating if B i ~ Bj whenever i ~ j.rooted if B t = S.localized if there is a longer sequence of nonterminal symbols B1 .
.
.
.
,BmIand a rooted rightmost derivation Bm ~ Pm--1 .
.
.
plBlWl such that Bt = Bkfor some t < k < m.essential if it is nonrepeating and either rooted or localized.Also, the derivation is said to be for B1 from Bt, and the string pt-1 ?
.
.
Pl is said to bethe left context sequence of this derivation.Definition 19For any nonterminal A, the set of essential eft contexts of A is{or E V~ \[ 3 an essential rightmost derivation D for A and ~b is the leftcontext sequence of D and ~b ~ or}The following lemma proves that essential eft contexts have just the requiredproperty.Lemma 5Let G be a CFG.
Let T be a tree in trees(G).
Let M be a nonterminal node in T. Let crbe the terminal string spanned by T, and 6 the portion of cr sparmed by M. Then cr isof the form ~1~/(~(~2 for some 3, in the essential left contexts of the label of M.472Ritchie Completeness Conditions for Mixed Strategy Bidirectional Parsingpk,  ki,iPk-~ :: Pl i 8 i m,9 P 47 0 ~l9 I*Figure 1Situation described in Lemma 5.Proof(See Figure 1 for an intuitive picture.)
Since T is a tree, there is a path of nonterminalnodes (N1 .
.
.
.
,N  t) where Ni is labeled Bi, for 1 < i < t, N1 = M, Nt is the root ofT, and Ni is the mother of Ni-1 for 2 < i < t .
Since T E trees(G), there must be asequence of rules e i ---+ Pi- lBi- l f l i -1 (Pi, fli E W~l ) such that the node Ni is licensed byBi ---+ Pi-lBi-lfli-1 for 2 < i < t. Hence there is a rooted rightmost derivation for B1from Bt.
From this it is trivial to form an essential rightmost derivation for B1 fromsome symbol Bk (where k < t):Bk ~ Pk-1 ...plBlWlwhere a;1 E V~ andPk-I'''plBIOdl ~ 0where 0 is the substring of ~ spanned by Nk.This means that 0 is of the form 3"~wl where Pk-1 .. ?
Pl :~ 3" and B1 ~ 6 (since B1 isthe label of M, and 6 is the terminal string spanned by M).
Then 3' is an essential leftcontext of B1, by virtue of the way Pk-1.
.
.
Pl was constructed.
Since 0 is a substringof or, this establishes the result.
\[\]473Computational Linguistics Volume 25, Number 45.3 Bottom-up DerivationsDefinition 20In a BSCFG (G, tr), suppose A is a nonterminal symbol, and cr is a string of terminalsymbols.
Then ~ can be coherently derived from A (with tree T) iff T is a syntax treegenerated by G such that:1.
T spans cr2.
the root of T is labeled A3.
T is fully reachable.The next definition requires that the derivation can occur without need for top-down initiation.Definition 21Let (G, tr) be a BSCFG.
Suppose A is a nonterminal symbol, and ~r is a string of terminalsymbols, from G .
Then cr can be up-derived from A (written "A ~* or") using (G, tr)iff:.2.cr can be coherently derived from A with tree T;the root of T is reachable from below.It is clear that all nodes of such trees will appear  in a chart, as formalized inLemma 6.Lemma 6Let (G, tr) be a BSCFG.
If A ~* v using (G, tr), and C is a fully bidirectional chart basedon a string 3,1c~-~2, and using (G, tr), then C contains a representation of a tree T suchthat T spans e and the root of T is labeled A.ProofFollows from Lemma 3.
\[\]5.4 Left-Introducible RulesIn characterizing formally the situation outlined informally in Section 5.1 above, thefollowing definition allows a more succinct statement.Definition 22Let A, B be two nonterminal symbols from a LCSCFG.
A introduces B from above(written "A ~,- B") if either A = B, or there is a sequence of top-down rulesa ---+ ao  .
.
.Ao ~ A1 ...A t - - -+B.
.
.474Ritchie Completeness Conditions for Mixed Strategy Bidirectional ParsingZ4A .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
t iPl PiFigure 2Left-introducibility.A i+l ?Lemma 7Let A, B be two nonterminal symbols from a LCSCFG (G, tr).
If A ---* B, then inany bidirectionally mixed strategy explored chart C using (G, tr) that contains an ac-tive edge ( i , j ,A ' - -*  .
a l  .Aft1), there will also be an active edge in C of the form( I , j ,A" --* ca2 ?
Bfl2), where either l = i or l = j.ProofStraightforward.
The case l = i allows for A = B (and A'  = A") ,  and I = j is the moregeneral case where there is a sequence of top-down- invoked active edges linking Ato B.
\[\]Next we have a definition of the condition on rules that allows them to enter intothe parsing process despite the difficulties outlined in Section 2.1 above.Definition 23In a LCSCFG (G, tr), a rule B0 --+ BlC~ is said to be left-introducible iff for every "~ thatis an essential left context of B0, there is a bottom-up rule Ao -* A1 ?
?
?
Ak such that1o2.3.4.
"y = Xpl .
.
.p i  for some i < kA1 ~* Plpj can be coherently derived from Aj, for all 1 < j G iAi+l ""+ BoScrutiny of this definition should reveal its relationship to the informal outlines inSections 2.2 and 5.1 earlier (see also Figure 2).
Notice that for any nonterminal A, ifS ~ A .
.
.
then the empty string is an essential left context of A and hence any rule ofthe form A --~ .. .
cannot be left-introducible.Lemma 8Let (G, tr) be a LCSCFG.
Let T be an annotated tree generated by G, and M0 a nonlexicalnode in T whose leftmost daughter is M1, with M0 labeled B0, M1 labeled B1, and where475Computational Linguistics Volume 25, Number 4the start of both M0 and M1 is m. Suppose that the rule B0 --* B1 ?
.. licensing M0 in Tis left-introducible.
Then in any fully bidirectional chart based on the terminal stringspanned by T and using (G, tr), there is an active edge of the form(I, m, A --* ?c~ ?
Boil)(i.e., an edge at the start of M0,M1, seeking B0).ProofLet the string spanned by T be ~r, with ?
= cr16cr2, where 6 is spanned by M0.
Let C bea fully bidirectional chart based on cr and using (G, tr).
By Lemma 5, Crl is of the form~ where 3/is in the essential left contexts of B0.
Since B0 --+ B1 ... is left-introducible,every such ~ has the property that there is a bottom-up rule Ao --* A1 .
.
.
Ak such that?
"Y = XP l .
.
.P i?
A1 "~* Pl?
pj can be coherently derived from Aj,  1 < j <_ i?
A i+ l  ~ BoIt follows from Lemma 6 that, since A1 ~* Pl, there are inactive edges in C for allnodes of a tree with root label A1 spanning pl.
Since Ao --* A1 .
.
.
Ak is bottom-up, thismeans there is an active edge in C(1,j',A0 -* ?A1 ?A2 .
.
.ak )where j is the start of the inactive edge for the root of this tree (i.e., the node labeledA1), and j '  is its end.
By Lemma 1 and Lemma 4, there are inactive edges in C labeledA2 .
.
.
.
.
Ai, corresponding to nodes spanning/92 ... Pi.
By Lemma 1, there is an edge(j,m, A0 --* ?A1 .
.
.A i  ?
A i+ l .
.
.Ak)where m is the start of & Since Ai+l "~ B0, by Lemma 7 there is an active edge( l ,m,A  --* .c~ .
Bofl) \[\]5.5 Indirect AnalyzabilityIn Section 4 we defined direct analyzability as a condition on grammars that wouldlead to complete parsing.
Now we establish a more general property that also leadsto completeness.Definition 24Let (G, tr) be a LCSCFG.
A nonterminal symbol A0 in G is said to be indirectly an-alyzable iff every rule A0 --* ~; is either lexical, or top-down and left-introducible, orbottom-up of the form A0 --* A-~c~ where A1 is indirectly analyzable.
55 Like the definition of directly analyzable in Section 4, this strictly needs a more detailed definition toallow for cycles.
This is straightforward to provide, in exactly the manner used in that earlier section,and then the "definition" given here becomes a theorem about indirect analyzability.476Ritchie Completeness Conditions for Mixed Strategy Bidirectional ParsingDefinition 25A LCSCFG (G, tr) is indirectly analyzable iff for every purely bottom-up rule A0 -* Alc~,the nonterminal symbol A1 is indirectly analyzable.The next two lemmas ensure that a grammar with the property of indirect ana-lyzability leads to complete parses.
The first is just a generalization of Lemma 4.Lemma 9Let (G, tr) be a BSCFG that is indirectly analyzable.
Let T be a tree in trees(G), spanningthe string or.
Let C be a fully bidirectional chart based on cr and using (G, tr).
Then forany node M labeled A in T:..If M is licensed by a purely bottom-up rule, then C contains arepresentation f the subtree rooted at M.If M is licensed by a top-down rule, and there is in C an active edge(t,g, Bo --* B1...Bp-1 ?
Bp...Bq_l ?
Bq.
.
.An)where either Bp-1 = A and t is the end of M, or Bq = A and g is the startof M, then C contains a representation f the subtree rooted at M.ProofBy induction on the height of nodes, in a manner very similar to Lemma 3, exceptthat part (a) of the Inductive Step is as follows:Inductive Step(a): Suppose M0, with daughter nodes M1 .
.
.
.
.
Mk, islicensed by a purely bottom-up rule A0 --* A1.. .
Ak.
Then, since (G, tr) isindirectly analyzable, this means that A1 is indirectly analyzable.
Hencewhatever ule licenses M1, it must be either lexical, or top-down andleft-introducible, or bottom-up with an indirectly analyzable symbol atthe start of its RHS.
In the lexical and bottom-up cases, the Base Case andInductive Hypothesis establish that C contains a representation f thetree rooted at M1.
If the rule is top-down and left-introducible, there is anedge seeking its LHS symbol at the start of M1, and so, by the InductiveHypothesis, there is a representation f the tree rooted at M1 in C. SinceC is fully bidirectional, it contains an edge spanning M1 of the form:(I, h, A0 --~ ,A1 ?
A2.. .
Ak)Repeated applications of the Inductive Hypothesis and Lemma 1(Corollary) establish that there is a representation f the tree rooted atM0 in C (i.e., the Inductive Step).Lemma 10Suppose (G, tr) is an indirectly analyzable LCSCFG.
Suppose T C trees(G), and C isa fully bidirectional chart based on the string spanned by T and using (G, tr).
Thenfor any nonroot node M in T, if M is licensed by a top-down rule A --* w, then Ccontains an active edge at the start of M of the form (tl, t2, B0 ~ o~ ?
fl ?
A .
.
. )
(i.e.,seeking A).477Computational Linguistics Volume 25, Number 4ProofBy induction on the depth of nodes.Inductive Hypothesis: Assume that for any node M of depth d', where 0 _< d' < d,the lemma holds.Base Case: Suppose M is of depth 1 (i.e., a daughter of the root node).
Supposethe root is licensed by a rule S -~ A1 .
.
.
Ak, where Mi is the ith daughter of the root(1 < i < k) and M = My.
(a)(b)Assume this rule is purely bottom-up.
Since (G, tr) is indirectlyanalyzable, A1 is indirectly analyzable.
Consider the rule that licensesM1.
It cannot be left-introducible, asS ~ A1 ... (see earlier emark aboutempty essential left contexts); hence it must be either lexical orbottom-up.
By Lemma 9, C contains a representation f the subtreerooted at M1.
Since the rule S --+ A1 .
.
.
Ak is bottom-up, C contains anactive edge of the form (0, 0, S ~ ?A1 ?
A2 .
.
.
Ak).Assume this rule is top-down.
Then there must be an empty active edge(0,0,S --~ ?
?A1...Ak).By repeated applications of Lemma 9 and Lemma 1, there are edges of the form(0, ti, S --~ cA1 .
.
.
Ai  ?
Ai+l .
.
.
Ak)1 < i < (j - 1).
The last of these fulfils the condition.Inductive Step: Let M be a node labeled A of depth d > 1, licensed by a top-downrule r. Let its mother node be N, of depth (d - 1), and the leftmost daughter of N beM1.
Consider the rule r' (of the form A0 --+ A1 ... Ak), which licenses N.(a)1?2..Suppose r' is purely bottom-up.
Then M1 is labeled with an indirectlyanalyzable symbol, A1.
Hence for the rule licensing M1, three cases mustbe considered:It is lexical.
In this case, C contains a representation forM1.It is top-down and left-introducible.
By Lemma 8, there is anedge at the start of M1 seeking its label.
If M = M1, thisestablishes the Inductive Step in this situation.
Otherwise, byLemma 9, there is a representation in C for the subtree rooted atM1.It is bottom-up of the form A1 --~ B1 ... where B1 is indirectlyanalyzable.
By Lemma 9, there is a representation in C for thesubtree rooted at M1.Since there is a representation in C for the subtree rooted at M1, there isan (inactive) edge in C of the form (i , j ,  A1 -+ , .
.
.
. )
,  where i is the startof M1 (and hence of N).
Since r' is bottom-up and A1 is the leftmost(trigger) symbol of its RHS, this leads to an active edge of the form(i, i ,  Ao --~ ?
?
a l .
.
.Ak )  for r' at the start of M1 and N. By repeatedapplications of Lemma 1 and Lemma 9, there is an active edge seeking Aat the start of M.478Ritchie Completeness Conditions for Mixed Strategy Bidirectional Parsing(b) Suppose r' is top-down.
By the Inductive Hypothesis, there is an edge atthe start of N seeking the label of N. Since r' is top-down, there is alsoan empty active edge for r ~ at that point.
If M = M1, this establishes theInductive Step in this situation.
Otherwise, by repeated applications ofLemma 1 and Lemma 9, there is an active edge seeking A at the startof M. \[\]Theorem 3If a LCSCFG (G, tr) is indirectly analyzable, then tr is complete.ProofFollows from Lemma 9 and Lemma 10.
\[\]5.6 UndecidabilityWe have established that the condition of indirect analyzability suffices to ensure com-pleteness.
Unfortunately, indirect analyzability is not a decidable property of annotatedgrammars, as we now show.Theorem 4It is undecidable whether an arbitrary LCSCFG is indirectly analyzable.ProofSuppose that there were a decision procedure for indirect analyzability.
This couldthen be used to construct a decision procedure that determines for any two CFGs G1,G2 whether every member of L(G1) ends in a substring that is a member of L(G2).This is an undecidable problem (see Appendix B); hence, the indirect analyzabilityquestion is also undecidable.
The construction proceeds as outlined below.Suppose we have the two arbitrary CFGs G1 and G2 over the same alphabet VT, andassume that their nonterminal phabets 1 2 Vh, V Ndo not intersect.
Construct a LCSCFGas follows.
The distinguished symbol S ~ is distinct from all symbols in V 1 U V 2.
Usesymbols B1, B2 .
.
.
.
.
B6 also not in V 1 U V 2.
The purely bottom-up rules are all the rulesof G2, together withB1 ~ B2B3B6 --~ $2B2where each Si is the distinguished symbol of Gi.
The purely top-down rules are all therules of G1 together withS I ___+ S1B1B2 ~ B4B5Also we include lexical rules:B 3 ---+aB4 ---~bB5 --*cfor some terminal symbols a, b, c.This LCSCFG is indirectly analyzable iff (by definition) every purely bottom-uprule has an indirectly analyzable symbol at the start of its RHS (the trigger position).All the rules taken directly from G2 meet this condition, since all are bottom-up.
So,therefore, does the rule B 6 ---+ $2B2.
All the rules taken directly from G1, and the ruleS / --+ SIB1, do not affect the condition, since all are top-down.
Hence the grammaris indirectly analyzable iff in the rule B1 --+ B2B3, the trigger symbol B2 is indirectly479Computational Linguistics Volume 25, Number 4analyzable.
This depends on whether the only rule expanding B2, B2 ~ B4B5 is left-introducible.
The essential left contexts of B2 is the set {7 E V~ I S1 ~ 3'}.
The onlysymbol X for which X -,z B2 is B2 itself.
Hence the only rule that meets the schemafor left-introducibility is B6 ~ $2B2.
So B2 --* B4B5 is left-introducible iff every 3' suchthat $1 G 3' is of the form Cp with $2 coherently derived from p. Since all G2 rules arebottom-up, $2 is coherently derived from p iff $2 ~ p. Hence the left-introducibility ofthe rule in question is logically equivalent to L(G1) C V~ + L(G2) (where + indicatesconcatenation).
\[\]6.
Some Further ComplicationsSo far, the proofs have shown that direct analyzability is a sufficient condition for com-pleteness, and that indirect analyzability (amore general condition) is also sufficient.The question might be posed--is indirect analyzability necessary for completeness?
Infact, it is not, as there is at least one other sufficient condition for completeness, notcovered by indirect analyzability.It is not worthwhile formalizing and analyzing these possibilities in detail, but abrief informal outline of one such condition may be helpful.
This occurs where a set ofrules that is not directly analyzable, and might seem to cause "blocking" as discussedin Section 2.1 earlier, is redeemed by interaction with other rules in the grammar.
Thisis similar to the phenomenon analyzed in Section 5 above, but whereas the analysisabove dealt with a configuration of rules that can be parsed bottom-up to the left ofthe problematic rule, there is an analogous condition on subtrees to the left that canbe parsed top-down.The following grammar illustrates this phenomenon.S--+ HKS--* Z BH--+ EFE--* P RQ---~ TV-Z---~ H QK- -*Q DP - - ,pR ---+ rF--* fD ---~ dT-+ tV---+ vDHere, the grammar is not indirectly analyzable, as the purely bottom-up rule K --* Q Dhas a trigger category Q that is not indirectly analyzable.
(The rule S --* H K is alsoproblematic.)
However, the only situation in which K --+ Q D would be needed wouldbe to parse a string prftvd.
Since S --~ H, there will be an empty active edge introducedfor H --* E F at the start of the string.
This will parse prf (top-down) as an H, andthis will combine with the active edge already introduced for Z --* H Q, leading to theintroduction of an empty active edge for Q --* T V at the start of the correct substring,tvd.Intuitively, this is similar to the phenomenon defined earlier as left-introducible,but with the catalytic sequence of rules being triggered top-down from the distin-480Ritchie Completeness Conditions for Mixed Strategy Bidirectional Parsingguished symbol of the grammar.
It is likely that some generalization could be madeto cover this pattern of rules and those described in Section 5, but the undecidabilityresult in Theorem 4 suggests that this would not improve matters--the more generalproperty would also be undecidable.7.
Discussion7.1 Other Bidirectional SchemesAs mentioned in Section 1 above, the ideas here were developed from a semi-formalproposal by Steel and de Roeck (1987).
The formalization given here is a slight gen-eralization, as it allows multiple possible triggers on the RHS of a rule, which Steeland de Roeck did not consider.
Steel and de Roeck did not formalize their proposalin detail, and did not show how to check if such annotations could lead to the parsermissing possible analyses (i.e., becoming incomplete), although they concede that thisis an important issue.Satta and Stock (1989, 1991, 1994) have developed various detailed and rigoroussystems of chart-based parsing, including one (Satta and Stock 1989) that allows aform of purely bottom-up bidirectional parsing, but they do not explore the question ofmixed strategy invocation of rules.
Most of the mechanisms in their bottom-up methodare aimed at avoiding redundant edges in the chart, a problem that has been ignoredhere by working at a more abstract, set-theoretic level.
Satta and Stock provide a morealgorithmic approach in which such issues are of concern.
A practical implementationof the definitions given above might have to consider whether their system could beadopted to achieve greater efficiency.
However, Willis (1996) points out that in somesituations the scheme given in Satta and Stock (1989) can be less efficient (in terms ofedges introduced to the chart) than a fairly naive implementation f a mixed strategychart parser whose grammar is annotated to run bottom-up (essential for comparisonwith the Satta and Stock algorithm).
This seems to be because the Satta and Stockmethod involves the introduction, when a constituent is found, of an edge for everyrule with that type of constituent on its RHS.7.2 Head ParsingThere has been a growth in interest over the past decade or so in head-driven parsing(e.g., Kay 1989).
In these approaches, the parsing is guided by the fact that exactlyone item on the right-hand side of a grammar rule is the head of the construction, inthe sense that it is a linguistically important part of the rule.
Some of these proposalshave been formalized using chart parsing, and their properties explored.Although some of the head-driven strategies are said to act "top-down," this refersto the parser exploring from a prediction of a specific nonterminal symbol in someregion of the input, but not to rules being introduced because the grammar writerhas indicated that it is to be introduced top-down in the sense used here.
The headmarkings are always on the right-hand side of the rule, never the left-hand side (sincethat would not make sense for a linguistic head).
Hence, head-driven parsing is, interms of the approach defined here, a form of bottom-up arsing, and the issuesof incompleteness resulting from a mixed strategy algorithm do not arise.
The mixedstrategy approach ere (which was developed independently of the head-driven work)could be seen as a possible generalization f a very simple head-driven parser.There are similarities between the bidirectional scheme here and the head-cornerparser of Sikkel and op den Akker 1996, in which top-down predictions can ariseeither from the distinguished symbol (predicted to span the whole input) or by work-ing outwards from the specified head constituent (as in the left and right extension481Computational Linguistics Volume 25, Number 4principles of Definition 9 in Section 3.3).
They define a transitive reflexive relationship">~", which roughly means that A>~B if there is a chain of rules from A to B suchthat the left-hand side of each one is the head of the previous rule in the sequence.Sikkel and op den Akker's chart handling principles all have the precondition that theintroduction of the new edge can happen only if the region of the input in questionis spanned by a predictive dge seeking a symbol A such that A>~B, where B is thelabel of the constituent or prediction being introduced.
This is, as they make clear,comparable to using a left-corner oracle to avoid unnecessary edges in a more tradi-tional parser.
A similar optimization might be possible for a mixed strategy parser ofthe sort discussed here, by using the triggers in bottom-up rules in the same way thatheads are used by Sikkel and op den Akker.7.3 Extended Generalized Left-Corner ParsingStabler (1994) outlines a very general approach to top-down and bottom-up arsingof context-free grammars, in a somewhat different formal framework.
Although histheoretical mechanisms are in some ways a generalization of the left-corner strategy-marked grammars discussed in Section 5 above, there is one respect in which they areslightly less general, and which places the chart-based proofs given above outside thescope of his results.
Stabler defines a class of extended generalized left-corner (XGLC)parsers, by attaching an (extended) trigger function to a CFG.
This function maps eachpair consisting of a stack configuration and a rule to a prefix of the RHS of that rule.Intuitively, the rule indicates how much of the RHS of the rule has to be recognizedbefore that rule is to be introduced into the parsing process; making this dependent onthe parser's tack (which can hold both recognized symbols and predictions of symbolsneeded) allows some sensitivity to the parsing context.
Stabler cites a proof that all suchparsers are complete with respect o the original CFG.
This may seem to conflict withthe proofs offered above, but it is crucial that Stabler's trigger functions are defined tobe total functions--for any stack configuration, there must be some prefix of the rule'sRHS.
To faithfully reproduce the notion of a top-down rule used in the mixed strategychart system, the trigger function would have to be partial, indicating no prefix atall in those cases where the stack did not have the right prediction.
It is reasonableto assume that Stabler's completeness proofs rely on the total nature of the triggerfunction, and thus do not cover the notion of mixed strategy parsing defined here.7.4 Possible UsesAs mentioned in Section 1 above, the original Steel and de Roeck proposal was putforward as a way of improving the efficiency of parsers for natural anguages, suchas English.
Although they did not have any real statistical evidence that this guidanceleads to more efficient parsing, they claimed that it did appear to help, judging bythe performance of the parser they had implemented for use in an English-languagequery interface.
That approach is dependent on the grammar writer having somelinguistic intuitions about which constituents are best parsed bottom-up and whichare best parsed top-down.
Alternatively, the rule annotations could be developed fromstatistics about rule usage in parsing suitably large corpora.Some preliminary results (Willis 1996) suggest that on small grammars, gains of upto 35% can be made in efficiency (measured in terms of chart entries) by using certaincombinations of the mechanisms formalized here.
These gains are not great, and it isunclear whether similar improvements could be achieved in realistically large naturallanguage grammars.
The formal results in Sections 4 and 5 above suggest hat it maynot be worthwhile carrying out such experiments, unless grammars are restricted tothose that are directly analyzable.482Ritchie Completeness Conditions for Mixed Strategy Bidirectional ParsingContext-free grammar has been used as the basis here, both to simplify the for-malization, to achieve some degree of generality, and in order to relate the work toexisting formal language theory.
Steel and de Roeck also use a CFG base as an ex-pository device for their ideas.
However, it is extremely rare within computationallinguistics for a pure CFG to be used in actual systems that parse natural anguage.Usually, some much more complex grammatical formalizm is used, such as unificationgrammar (Shieber 1986).
Many of the methods for parsing unification grammars areclosely based on traditional CFG parsing techniques, with enhancements.
This meansthat an obvious extension of the theoretical definitions and results in this paper wouldbe the application of mixed strategy bidirectional parsing to unification grammars.Most of the framework could be retained, since the main difference between a simpleunification grammar formalism and CFG is in the way that nonterminal symbols arecompared or combined with each other.
It is highly improbable that the undecidabilityresult would be overturned, and it is even conceivable that the appropriate counterpartof direct analyzability might turn out to be less tractable.8.
ConclusionsAlthough the idea of allowing the grammar writer to specify the strategy to be usedfor each rule in a grammar may seem superficially appealing, the formal evidencepresented here is that it is severely limited.
In general, grammar annotation may leadto incompleteness.
Although there is a decidable property--direct analyzabil ity--thatguarantees completeness, it is overrestrictive, in the sense that there are completeannotations that are not directly analyzable.
There is also a wider class of completeannotations--indirectly analyzable--that cannot be decidably detected.There is also some question over the practical effectiveness of the mixed strategytechnique, although that issue has not been explored here.Appendix A: Computing Direct AnalyzabilityThe algorithm is a simple variant of the use of an AND-OR graph in problem solving,as in Nilsson (1971).
The graph will contain a node for each nonterminal symbol A inthe grammar, and an OR node for each bottom-up rule.
Each node has a label, whichis either a nonterminal symbol or OR, and may, optionally, have a marking, which iseither SOLVED or FAILED.1.
For each symbol A c VN, create a node NA, and insert arcs and markings as follows:if there is a purely TD rule of the form A --* athen mark NA as FAILEDelse if all rules of the form A --* a are lexicalthen mark NA as SOLVEDelsefor each bottom-up rule of the form A --* A1 ?
?
?
Ak:- create a node N labeled OR;- create an arc from NA to N;- create an arc from N to NAI for every i E tr(A --* A1.
.
.Ak)such that i > 0.At this point, each non-terminally abeled node has outgoing arcs for every bottom-up rulethat might expand it, and each of these arcs connects to an OR node, which in turn connects to483Computational Linguistics Volume 25, Number 4every possible trigger category for that rule.
Nodes marked FAILED correspond to categories thatare not directly analyzable; nodes marked SOLVED correspond to those that are directly analyzable.Initially, any node marked SOLVED or FAILED has no outgoing arcs.2.
Repeat until no changes occur in the graph:for each node N in the graph:if N is marked FAILEDthen delete any arc into N from a node M;if N is labeled oR, or there are no other outgoingarcs from M;then - mark M as FAILED;- remove any outgoing arcs from M;if N is marked SOLVEDthen if there is an arc into N from an oR-node Mthen - mark  M as SOLVED;- remove any outgoing arcs from M.else if there is an arc into N from a node MAthen delete this arc from MA to Nif this leaves no outgoing arcs from MAthen mark  MA as SOLVED.if N is an OR node with no incoming arcsthen delete N and all its outgoing arcs.The properties remarked above remain invariant during this iteration.
The iteration termi-nates as the graph is finite.
On termination, the only arcs left must be in cycles.
The categoriesassociated with any nodes in cycles should be taken as directly analyzable.3.
For every node NA that has an arc (incoming or outgoing) attached to it, mark  NAas  SOLVED.4.
If for every purely bottom-up rule A --* A1 ... Ak, there is an i E tr(A --* A1 .
.
.Ak)such that NAi is marked SOLVED, then the grammar  is directly analyzable.The above statement is not intended to be maximal ly efficient.
No formal proofof its correctness i given here, but there is a fairly straightforward relationship to theproperty of direct analyzability, which is stated as the draft definition in Section 4.2.Appendix B: Undecidability ProofnemmaFor any two context-free grammars  G1, G2, it is undecidable whether every memberof L(G1) ends in a substring that is a member  of L(G2).ProofLet G1 and G2 be two CFGs over the same alphabet V, with languages L(G1) and L(G2)respectively.
Let # be a symbol  that is not a member  of V. Consider the language L~given by:{#x Ix e L(G1)}484Ritchie Completeness Conditions for Mixed Strategy Bidirectional Parsingand L~ given by:{#YIY c L(G2)}i tThese are both context-free languages; assume that grammars G 1, G 2 generate them.Suppose we have a procedure that would decide, for any two context-free grammars,whether every member of the language of one ends in a substring that is a memberof the language of the other.
Consider the question whether every member of L(G'2)(i.e., L~) ends in a substring that is a member of L(G'I) (i.e., L~).
This is true iff everystring of the form #y in L~ has a final substring that is in {#x I x c L(G1)}.
Since # isnot in V, this can be true iff y c L(G1).
This will be true for every such string in L~, iffy E L(G1) for every y E L(G2); i.e., L(G2) C L(G1)That is, a decision procedure for the final substring question would allow theconstruction of a decision procedure for the subset question for the languages gener-ated by two arbitrary context-free grammars, which in turn would provide a decisionprocedure for the equivalence of the languages, and that is known to be undecidable(Aho and Ullman 1972, Sect.
2.6.3).
\[\]AcknowledgmentsI would like to thank Anne de Roeck,Alistair Willis, and Suresh Manandhar foruseful discussions, and Nicolas Nicolov forcomments on an earlier draft.
The incisiveand thorough comments of variousanonymous reviewers have greatlyimproved this paper.ReferencesAho, Alfred V. and Jeffrey D. Ullman.
1972.The Theory of Parsing, Translation, andCompiling.
Volume 1: Parsing.
Prentice-Hall,Englewood Cliffs, NJ.Earley, Jay.
1970.
An efficient context-freeparsing algorithm.
Communications of theACM, 13(2):94-102.Kay, Martin.
1989.
Head-driven parsing.
InProceedings ofthe International Workshop onParsing Technologies, pages 52-62, CarnegieMellon University, Pittsburgh, PA,August.Maclane, Saunders and Garrett Birkhoff.1967.
Algebra.
Macmillan, London.Nilsson, Nils J.
1971.
Problem-solving methodsin artificial intelligence.
McGraw-Hill, NewYork.Partee, Barbara H., Alice ter Meulen, andRobert E. Wall.
1990.
Mathematical Methodsin Linguistics.
Kluwer Academic,Dordrecht.Satta, Giorgio and Oliviero Stock.
1989.Formal properties and implementation fbidirectional charts.
In Proceedings oftheEleventh International Joint Conference onArtificial Intelligence (IJCAI-89),pages 1480-1485.Satta, Giorgio and Oliviero Stock.
1991.
Atabular method for island-drivencontext-free grammar parsing.
InProceedings ofthe Eighth National Conferenceon Artificial Intelligence (AAAI-91),pages 143-148.Satta, Giorgio and Oliviero Stock.
1994.Bidirectional context-free grammarparsing for natural anguage processing.Artificial Intelligence, 69:123-164.Shieber, Stuart.
1986.
An Introduction toUnification Approaches to Grammar.
CSLILecture Notes Number 4.
Center for theStudy of Language and Information.Shieber, Stuart M., Yves Schabes, andFemando C. N. Pereira.
1995.
Principlesand Implementation f DeductiveParsing.
Journal of Logic Programming,24(1 & 2):3-36.Sikkel, Klaas and Rieks op den Akker.
1996.Predictive head-corner chart parsing.
InHarry Bunt and Masaru Tomita, editors,Recent Advances in Parsing Technology.Kluwer Academic, Netherlands,chapter 9, pages 169-182.Stabler, Edward P. 1994.
Parsing forincremental interpretation.
Unpublishedpaper, UCLA, Los Angeles, CA.Steel, Sam and Anne de Roeck.
1987.Bidirectional chart parsing.
In J. Hallamand C. Mellish, editors, Advances inArtificial Intelligence.
John Wiley,pages 223-235.Stoy, Joseph E. 1981.
Denotational Semantics:the Scott-Strachey approach to programminglanguage theory.
MIT Press, Cambridge,485Computational Linguistics Volume 25, Number 4MA.Thompson, Henry and Graeme Ritchie.1984.
Implementing natural languageparsers.
In T. O'Shea and M. Eisenstadt,editors, Artificial Intelligence: Tools,Techniques and Applications.
Harper andRow, New York, Chapter 9, pages245-300.Willis, Alistair.
1996.
Exploring Chart ParsingMechanisms.
Master's thesis, Departmentof Artificial Intelligence, University ofEdinburgh, Edinburgh, Scotland.Winograd, Terry.
1983.
Language as aCognitive Process.
Volume I: Syntax.Addison-Wesley, Reading, MA.486
