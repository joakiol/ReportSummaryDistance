Anytime Algorithms fl)r Speech Parsing?
*Gfinl;her (\]6rz Marcus  Kessc lerUnivorsit;y of l,'zlange|>Niirnberg, IMMD V I I Igoerz@inf ormat ik.
uni-erl angen, deTOPICAI ,  PAI'\]~I/Keywords:  anyt ime Mgor i thms,  p;~rsing, speech analys isAbstractThis paper discusses to which extent the concept of"anytime algorithms" can be applied to parsing algo-rithms with feature unification.
We first try to give amore precise definition of what an anytinm algorithmis.
We arque that parsing algorithms have to be clas-sified as contract algorithms as opposed to (truly) it>terruptible algorithms.
With the restriction that thetransaction being active at the time an inl,errupt, is is-sued has to be COml)leted before the interrupt cart beexecuted, it is possible to provide a parser with linritcdanytime t)ehavior, which is in fact t)dng realized in ourre.search l)rototype.1 Introduct ionThe idea of '%nylime algorithms", which has beenaround in the tieht of plmming for some time 1, hasrecently been suggested for application in natural lan-guage and speech l)rocessing (NL/SP) 2.
An anytimealgorithm is an algorit.hm "whose quality of results(legrades graceflflly a~s computation time decreases"(\[Russell attd Zilt)erstein 1991\], p. 212).
In the follow-ing we will first give a more specilic definition of whichproperties allow an algorithm to be implemented andused as an anytime algorithm.
We then apply thisknowledge to a specitic aspect of NL/SP, namely pars-ing algorithms in a speech understanding system.
Inthe Appendix we present he A I)C protocol which sup-ports anytime computations.We will discuss these matters in the framework ofthe Verbmobil joint research project a, where we areworking on the implementation f an incremental chartparser 4.
The conception of this I)arser has been derivedfrom earlier work by the llrst author 5.lef.
e.g.
\[llussell mM Zilberstein 1991\]P'so \[Wahlster 1992\] in his invited talk at CO1,\[N(I-92a ~lThe Verbmnbi l  joint research project has been defined in thedocument  \[Verbmobil t .eport 1991\]4 the Verl)mol,i l /15 parser,  of.
\[Weber 1!)!
)'2\]Sthe GuLP  parser,  of.
\[Gi~rz 1988\].2 Ai ,yt ime Algor i thms\[1)etm and Boddy 1988\] give the fi)llowing characteri~zation of anytime algorithms:1.2.3.they lend themselves to preemptive schedulingtechniques (i.e., they cart bc suspended and re-sumed with negligible overhead),they can be terminated at any time and will returnSOl\[le answer~ andthe attswers reI, urned iml)rove in some welt-behaved maturer as a function of time.Unforl,unately this characterization does not makea clear distinction between the intplementation of analgorithm and tile algorithm as such.Point (1) is true of a great many Mgorithms imple-mented on preenq)tive operatirLg systems.Poin~ (2) can be made true for any algorithm byadding all explicit Result  slot, that is I)reset by a wdue.denoting a w)id result.
I,et us call the implementationof an anyl;inm algorithm an anytime producer.
Accord-ingly we ttanle the entity interested in the result of suchan anytime computation the anytime consumer.
Fig-urc 1 shows two such processes in a tightly coupledsynchronization loop.
Figure 2 shows the same com-municating processes decoupled by the introduction ofthe Result  slot.
Note that synrhronisation is muchcheaper in terms of perceived complexity R)r the pro-gramrne.r and runtime synehronisation overhead (justthe time to cheek and eventually traverse the mutualexclusion barrier).
In such an architecture producerand consumer work under a regime that allows theconsmner to interrupt the producer at any lime anddentand a result.
The risk that the consumer incurs bysuch flexibility is a eertMn non-zero probability thatthis result is void ~ or mtchanged since the last resultretrievah6The faihn'e to provide an answer within a given anmunt  oft ime nlay ill itself I)e an interest ing and meaningflal result for theally Linle consumet'.9979-""............. % )ResultAnytime AnytimeConsumer ProducerFigure 1: Tightly coupled processes with complex syn-chronization internals.Result Slot Mutex(preset with Barrier"VOID") ~', / \ ' \  , /& ~  .~.....~ ?
"X /+- f  t /M.
/ '7 , ;7d , -  .
.
.
.
, .
_ - /M .
/Anytime AnytimeConsumer ProducerFigure 2: Processes decoupled by using a result slotprotected by a simple mutual exclusion barrier.Point (3) is surely a much too strong restriction,since it is not always possible to define what exactlyan improvement is for any given algorithm.
In NL/SP,where we are often dealing with scored hypotheses, itis difficult, if not impossible, to devise algorithms thatsupply answers that improve monotonically as a flmc-tion of invested computational resources (time or pro-cessing units in a parallel architecture).We propose the following characterization of any-time algorithms:An algorithm is fit to be used as an anytimeproducer if its implementation yields a pro-gram that has a Result Production Granular-ity (RPG) that is cmnpatible with the timeconstraints of the consumer.The notion of RPG is based on the following obser-vation: Computations being performed on fnite statemachines do not proceed directly from goal state togoal state.
Instead they go through arbitrarily largesequences of states that yield no extractable or intelli-gible data to an outside observer.
To interrupt a pro-ducer on any of these intermediate states is fruitless,since the result obtained could at best, according tothe observation made on point (2) above, be the resultthat was available in the last goal state of the producer.From the point of view of the consumer the transitionsfrom goal state to goal state in the producer are atomictransactions.The average length of these transactions in the al-gorithm correspond to average time intervals in the im-plementation, so that we can speak of a granularitywith which results are produced.The time constraints under which the eonsumer isoperating then give the final verdict if the implemeuta-tion of an algorithm is usable as an anytime producer.Let us illustrate this by an example: In a real-timeNL/SP-system tim upper bound for the RPG will I, yp-ieally be in the range of 10 lOOms.
That is, a producerimplemented with such an RPG ofl>rs the consumerthe chance to trade a 500ms delay for 5 to 50 fllrtherpotential solutions.Note that goal states can also be associated withintermediate results in the producer algorithm.
Con-ceptually there really is not much of a difference be-tween a result and an intermediate r sult,, but in highlyoptimized implementations there might be the need toexplicitly export such intermediate r sults, due to datarepresentation i compatibilities or simply because thedata might be overwritten by other (non-result) data.Section 4 gives an example of how the RPG of an imple-mentation can be reduced by identifying intermediategoal states that yield information which is of interestto the consumer.3 Breadth and Depth of Analy-sisIn the following we will ask whether and how the ideaof anytime producers can be applied within the activechart parsing algorithm scheme with feature unifica-tion.
Although the analogy to decision making in plan-ning where the idea of anytime algorithms has beendeveloped seems to be rather shallow, we can, forthe operation of the parser, distinguish between depthand breadth of analysis 7.We define depth of analysis as the concept referingto the growing size of information content in a fea-ture structure over a given set of non-competingword hypotheses in a certain time segment dur-ing its computation.
Larger depth corresponds toa more detailed linguistic description of the sameobjects.In contrast, we understand by breadth of analy-sis the consideration of linguistic descriptions re-sulting from the analysis of growing sets of wordhypotheses, either from growing segments of theutterance to be parsed or from a larger number ofcompeting word hypotheses in a given time seg-ment.q'o regard breadth of analysis as a measure in thecontext of the anytime algorithm concept is in a senser not to |)e confused with depth- f i rst  or breadth- f i rs t  search.998trivial: Considering only one l)arse, the more process-ing time the parser is given the larger the analyzedsegment of the input utterance will be.
In general,larger breadth corresponds to more information aboutcompeting word hypotheses in an (half-) open time in-terval as opposed to more information about a givenword sequence.
So, obviously, breadth of analysis doesnot correspond to what is intended by the concel)t ofanytime algorithms, whereas depth of analysis meetsthe inliention.If an utterance is syntactically ambiguous, we (:ancompute more parses the more processing time theparser is given.
Therefore, tohis case is apart ,  icularinstance of depth of analysis, beeaase the same wordsequence is considered, and not of breadth of analysisgiven the definition above.
In this case one would liketo get the best analysis in terms of the quality scores ofits constituents first, and other readings late,', orderedby score.
If the parser works incrementally, what hap-pens to be the case for the Verbmobil/15 parser s, theintended effect car, be achieved by the adjustment of astrategy parameter namely to report the analysis ofa grammatical fragment of the input utterance as soonas it is found.At least one distinction might be useful for theVerbmobi l / \ [5 parser.
In our parser a category checkis performed on two chart edges for eIficiency reasons,and only if this check is successflfi, the unificatkm of theassociated feature structures is performed, llence, aninterrupt would be admissible after ,,he category check.In this case we emphasize a factorization of the set; ofconstraints in two distinct subsets: phrasal constraintswhich are processed by the act.iw~ chart parsing algo-r ithm schema (with l)olynomial complexity), and func-tional constraints which are solved by the unificationalgorithm (with exponential complexity).
'rhe interfacebetween both types of constraints i a crucial place forthe introduction of control in the parsing process ingeneral 9Since we use a constraint-hased grammar formal-ism, whose central operation is the unification of fea-ture structures, it does not make sense to admit interrupts at any time.
Instead, the operation of the parserconsists of a sequence of transactions.
At the mostcoarse grained level, a transaction would be an appli-cation of the flmdamental rule of active chart t)arsing,i.e.
a series of operations which ends when a new edgeis introduced into the chart, including the computationof the feature structure associated with it.
Of coursethis argument holds when an application of the fun-damental rule results in another application of it onsubunits due to the reeursive structure of the grammarruleQ ?.
Certainly one might ask whether a smallergrain size makes sense, i.e.
the construclion of a fea-ture structure should itself he interruptible.
In thiscase one could think of the possibility of au interrupt.Sand for Gul,t '  as well9 cf.
\[Maxwell and Kaplan 1994\]l?This h,'ts been implemented in the interrupt system of (lul,l)\[Ggrz 1988\].after one feature in one of the two feature structuresto be unified has been l)roeessed.
We think that thispossibility shouhl be rejected, since feature structuresusually contain eoreli'.rences.
If we consider a partialfeature structure - - as in an intermediate step in theunitication of two feature structures in the situationwhere just one feature has been processed, this struc-ture might not be a realistic partial description of thepart of speech under consideration, but simply inad-equate as long as not all embedded eoreferences havebeen established.
It seems obvious that the grain sizecannot be meaningfully decreased below the processingof one feature.
Therefore we decided that transactionsmust be defined in terms of computations of whole fea-ture structures.Nevertheless, a possibility for interrupting the com-putation of a feature structure could be considered incase the set of featnre, s is divided in ~wo classes: fea-tures which are obligatory and features which are op-tional.
Members of the last group are candidates forconstraint relaxation which seems to be relevant withrespect to robustness at least in the case of speechparsing.
We have just started to work on the constraintrelaxation problem, but there is no doubt that this isan important issue for further research.
Nevertheless,at the time being we doubt whether the above men-tione.d problem with coreferences couht be avoided inthis case.A further opportunity for interrupts comes up incases where the processing of alternatives in unifyingdisjm)ctiw~' feature structures is delayed.
In this case,unilication with one of the disjuncts can be consideredas a transaction.Another chance R)r the implementation f anytimebehavior in parsing arises if we consider the gram-mar from a linguistic perspective ~ oppose.d to thepurely formal view taken above.
Since semantic on-struction is done by our grammar as well, the func-tional constraints contain a distinct subset for the pur-pose of semantic construction.
In a separate b, vesti-gation \[Fischer 1994\] implemented a version of A-I)t{;I ~\[l)inkal 1993\] within the.
same feature unification fo>realism which buihts semantic structures within theframework of Discourse Representation Theory.
It hasbeen shown that the process of DRS construction canbe split in two types of transactions, one which can beperformed incrementally basically the constructionof event representations without temporal information- -  and another one which cannot be concluded beforethe end of an utterance has been reached - - supplyingtemporal information.
Since the first kind of transac-tions represents meaningfnl partial semantic analysesthose can be supplied immediately on demand underau anytime regime.The possibility to process interrupts with the re-striction that the currently active transaction has to becomplete.d in advance has been built into the Verhmo-bil/15 parser, using the APC protocol (of.
Appendix).It therefore xhibits a limited anytime behavior.9994 Feature Uni f icat ion as anAnyt ime A lgor i thm?Up to now, in our discussion of an appropriate grainsize for the unification of feature structures we consid:ered two cases: the unification of two whole featurestructures or the unification of parts of two featurestructures on the level of disjuncts or individual fea-tures..In all of these cases unitication is considered as asingle step, neglecting its real cost, i.e.
time constraintswould only affect the number of unification steps, butnot the execution of a particular unification operation.Alternatively, one might consider the unification algo-rithm itself as an anytime algorithm with a propertywhich one might call "shallow unification".
A shallowunification process would quickly come up with a first,incomplete and only partially correct solution whichthen, given more computation time, would have to berefined and possibly revised.
It seems that this prop-erty cannot be achieved by a modification of existingunification algorithms, but would require a radicallydifferent approach.
A prerequisite for that would bea sort of quality measure 11 tbr different partial featurestructures describing a given linguistic object which isdistinct from the subsumption relation.
To our knowl-edge, the definition of such a measure is an open re:search question.5 Conc lus ionAccording to \[Russell and Zilberst, ein 1991\] parsing al-gorithms with feature unification have to be classifiedas contract algorithms as opposed to (truly) interrupt-ible algorithms: They must be given a particular timeallocation in advance, because interrupted at any timeshorter than the contract ime they will not yield useflllresults.
At least the transaction which is active at thetime an interrupt occurs has to be completed beforethe interrupt can be executed.
With this restriction,it is possible to provide a parser with linqited anytimebehavior, which is in fact being realized in the currentversion of the Verbmobil/15 parser.Acknowledgements .
The authors would like tothank Gerhard Kraetzschmar, Herbert Stoyan, andHans Weber for w~luable comments on a previous ver.-sion of this paper.References\[Dean and Boddy 1988\]Thomas Dean and Mark Boddy: An Analysis of'I\]me-Dependent Planning.
AAAI 1988, 49--54\[Dongarra, Geist, Manchek and Sundaram 1993\] JackDongarra, G. A. Geist, Robert Manchek and V. S.Sundaram: Integrated PVM Framework Supports11 c.f.
\[Russell and  Wefa ld  1989\]Heterogeneous Network Computing.
Comlmters inPhysics, Vol.
7, No.
2, 1993, 166-175\[Fischer 1994\] Fischer, I.: Die kompositionelle Bildungyon .Diskursrepriisentationsstrtzkturen fiber einerChart.
Submitted to KONVENS 94, Vienna.\[Gfrz 1988\] G5rz, G.: Struktm'analyse natfirli&erSpra&e.
Bonn: Addison-Wesley, 1988\[Maxwell and Kaplan 1.994\] Maxwell, J.T, Kaplan, R.:The Interface between Pbr<~sal and F~metionalConstraints.
Computational l,inguistics, Vol.
19,1994, 571- 590\[Pinkal 1993\] PinkM, M.: Semantik.
In: Gfrz, G.(Ed.
): Einffihr,ng in die Kfinstliehe Intelligenz.Bonn: Addison-Wesley, 1993, 425-498\[Russell and Wefald 1989\] Rnssell, S.J.
and Wefald, E:Principles of Metareasoning.
Proc.
KR-89, 1989,400 411.\[Russell and Zilberstein 1991\] Russell, S. a., Zilber-stein, S.: Composing Real-Time Systems.
Proc.I3CAI-91, Sydney, 1991, 212-217\[Verbmobil Report 1991\] Verbmobil Konsor-titan (13?1.
): Verbmobil- Mobiles Dohnets&ge-rat.
BMFT Report, Miinchen, 1991\[Wahlster 1992\] Wahlster, W.: Complltational Modelsof Face-to-Face Dialogs: Multimodality, Negotia-tion and Translation.
Invited talk at COLING-92,Nantes, 1992.
Not contained in the proceedings;copies of slides are available from the author.\[Weber 1992\] Weber, 1I.
: Chart Parsing m ASI, ASLTecbnical Report ASL-TR-28-92/UER, Univer-sity of 1;rlaugen-Niirnberg, IMMD VIII, Erlangen,1992Append ix :  A P ro toco l  for Any-t ime Producer /Consumer  Pro-cessesIn the following we introduce the APC (Anytime Pro-ducer Consumer) protocol which allows for easy estab-lishment of anytime producer/consumer r lationshipson parallel architectures.Let Producer be the flmction that implements heproducer algorithm.
In a purely sequential proceduralcall/return implementation this function would have acontrol structure similar to:(defml Producer (...)(Initialize)(let ((Result nil))(~hile (not (GoodEnough?
Result))(ImproveResult))Result))1000The RP(\] of Producer is at least that of the func-tion ImproveResult.
It is finer if ImproveResult isitself made of loops that produce intermediate r sultsthat are ext)ortable to consumers.q'he consumer is ilnplemented as the functionConsumer, that at some point calls the l)roducer:(defun Consumer ( .
.
.
)(Producer .
.
.
)We now translate Producer and Consumer intoparallel processes ,sing the APC protocol, which isdirectly implemented by functions that act as in-terfaces to the underlying communication/synchro-nization system.
All functions implementing theprotocol have the prefix APC: (In our imphunenta-|ion all of them are in the Conmlon~l,isp ackageanyt  |me-producer -consumer) .
(defun AnytimeProducer (...)(Initialize)(let ((Result nil))(while (not (GoodEnough?
Result))(ImproveResult);; Make Result available to consumers(APC:SetResult!
Result);; Check for messages/instructions;; from Consumer(APC:CheckStatus)Result))In a paralM implements||or, it is not sullicient forthe consumer to simt)ly call the producer.
The pro?ducer has to be spawT~ed or forked as a separate process:(defun AnytimeConsumer ( .
.
.
)?
Create a new process( le t  ((P-AnytimeProducer-1(AI 'g:StartProcess (AnytimeProducer .
.
. )
) ) )( le t  ( (Resu l t(hPC:GetResult P-hnyt imeProducer-1) ) )(while (not (ConsumerGoodEnough?
Result)); I)o something else, like going to sleep; to give tile producer some more time(setf Result,(APe :GetResnlt  P-AnytimeProducer-1) )) )(APe :hbortProcess P-AnytimeProducer-:l) )The APC Pr()/;()('()lAPC:StartProcess  F starts a new process in whichthe procedure F is executed.
This function is alsoresponsibh; for tile creation of the protected Resul tslot.
APe : S tar tP rocess  returns the id of the newprocess.No~e that an arbitrm:y number of producers may bestarted by a consnlner.
A prodtlcer may o\[' coursealso start other producers.APC:AbortProcess Proc aborts the process Prec.APC:SetResult!
R sets the value of the Result  slotto R.APC:GetResu l t  P ?
retrieves the current value ofthe Resul t  slot from process P. Rememberthat APC:SetResult !
and APC:GetResult avoidread/write conflicts by a locking mechanism thatimplements mutual exclusion.APC : gesetProcess  Proc I - restarts the process Procwith new input I.APC:CheckStatus \[Proc\] check if any inessages orinstructions have arrived from Proc.
Often par-allel soft;ware nvironments offer only very crudeprocess scheduling and control primitives.
Theuser may have to implement sortie of them byhimself.
APC:ResetProeess, for example, is (lit"ticult to formulate in a general way.
Resetcan also involve, ltla.intenance or eleannp work,which is clearly beyond any process-oriented im-ph'.mentation of Reset.
'l'he idea is that theseuser implemented control procedures are hookedinto hPC:CheckStatus \[Proc\].
'lk) a|,tain a line-grained control relationship between consunter andt)roducer, the user simply inserts APC : CheckStatusat key-positions in the code.The AP(; protocol has been implemented audtested under a coarse grained paralM Commonl,ist) System running on a four processor SUN-SPARC MP-670.
UNIX IPC 1~ shared mem-ory and sen|spheres are used to implement theh)w-level communica.tion and synchronisation facil-ities.
We are currently porting the system toSolaris 2.3, with PVM (Parallel Virtual Machine,see \[l)ongarra, Geist, Manchek and Snndaram 1993\])as the basic communicatkm facility.
IWM would al-low us to mow~ our parallel system h'om tile currenthigh communication and low memory bandwidth implementation on a shared memory machine, to a lowcommunication/high memory bandwidth implementa-tion tutoring on a cluster of workstations.12 \[lit,el-pl'og(!ss ( \ ]ommunlcat ion  Faci l i t ie,  s7007
