Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 109?114,Jeju, Republic of Korea, 8-14 July 2012. c?2012 Association for Computational LinguisticsWizIE: A Best Practices Guided Development Environmentfor Information ExtractionYunyao Li Laura Chiticariu Huahai Yang Frederick R. Reiss Arnaldo Carreno-fuentesIBM Research - Almaden650 Harry RoadSan Jose, CA 95120{yunyaoli,chiti,hyang,frreiss,acarren}@us.ibm.comAbstractInformation extraction (IE) is becoming a crit-ical building block in many enterprise appli-cations.
In order to satisfy the increasing textanalytics demands of enterprise applications,it is crucial to enable developers with generalcomputer science background to develop highquality IE extractors.
In this demonstration,we present WizIE, an IE development envi-ronment intended to reduce the developmentlife cycle and enable developers with little orno linguistic background to write high qual-ity IE rules.
WizIE provides an integratedwizard-like environment that guides IE devel-opers step-by-step throughout the entire devel-opment process, based on best practices syn-thesized from the experience of expert devel-opers.
In addition, WizIE reduces the manualeffort involved in performing key IE develop-ment tasks by offering automatic result expla-nation and rule discovery functionality.
Pre-liminary results indicate that WizIE is a stepforward towards enabling extractor develop-ment for novice IE developers.1 IntroductionInformation Extraction (IE) refers to the problem ofextracting structured information from unstructuredor semi-structured text.
It has been well-studied bythe Natural Language Processing research commu-nity for a long time.
In recent years, IE has emergedas a critical building block in a wide range of enter-prise applications, including financial risk analysis,social media analytics and regulatory compliance,among many others.
An important practical chal-lenge driven by the use of IE in these applicationsis usability (Chiticariu et al, 2010c): specifically,how to enable the ease of development and mainte-nance of high-quality information extraction rules,also known as annotators, or extractors.Developing extractors is a notoriously labor-intensive and time-consuming process.
In order toensure highly accurate and reliable results, this taskis traditionally performed by trained linguists withdomain expertise.
As a result, extractor develop-ment is regarded as a major bottleneck in satisfyingthe increasing text analytics demands of enterpriseapplications.
Hence, reducing the extractor devel-opment life cycle is a critical requirement.
Towardsthis goal, we have built WizIE, an IE developmentenvironment designed primarily to (1) enable devel-opers with little or no linguistic background to writehigh quality extractors, and (2) reduce the overallmanual effort involved in extractor development.Previous work on improving the usability of IEsystems has mainly focused on reducing the manualeffort involved in extractor development (Brauer etal., 2011; Li et al, 2008; Li et al, 2011a; Soder-land, 1999; Liu et al, 2010).
In contrast, the fo-cus of WizIE is on lowering the extractor develop-ment entry barrier by means of a wizard-like en-vironment that guides extractor development basedon best practices drawn from the experience oftrained linguists and expert developers.
In doing so,WizIE also provides natural entry points for differ-ent tools focused on reducing the effort required forperforming common tasks during IE development.Underlying our WizIE are a state-of-the-artIE rule language and corresponding runtime en-gine (Chiticariu et al, 2010a; Li et al, 2011b).
Theruntime engine and WizIE are commercially avail-109Profile Extractor  Test  ExtractorDevelop  ExtractorInput Documents Label Text/CluesTask Analysis Rule Development Performance Tuning DeliveryExport ExtractorFigure 1: Best Practices for Extractor Developmentable as part of IBM InfoSphere BigInsights (IBM,2012).2 System OverviewThe development process for high-quality, high-performance extractors consists of four phases, asillustrated in Fig.
1.
First, in the Task Analysisphase, concrete extraction tasks are defined basedon high-level business requirements.
For each ex-traction task, IE rules are developed during the RuleDevelopment phase.
The rules are profiled and fur-ther fine-tuned in the Performance Tuning phase, toensure high runtime performance.
Finally, in theDe-livery phase, the rules are packaged so that they canbe easily embedded in various applications.WizIE is designed to assist and enable both noviceand experienced developers by providing an intu-itive wizard-like interface that is informed by thebest practices in extractor development throughouteach of these phases.
By doing so, WizIE seeksto provide the key missing pieces in a conventionalIE development environment (Cunningham et al,2002; Li et al, 2011b; Soundrarajan et al, 2011),based on our experience as expert IE developers, aswell as our interactions with novice developers withgeneral computer science background, but little textanalytics experience, during the development of sev-eral enterprise applications.3 The Development EnvironmentIn this section, we present the general functionalityof WizIE in the context of extraction tasks drivenby real business use cases from the media and en-tertainment domain.
We describe WizIE in detailsand show how it guides and assists IE developers ina step-by-step fashion, based on best practices.3.1 Task AnalysisThe high-level business requirement of our run-ning example is to identify intention to purchasefor movies from online forums.
Such informationis of great interest to marketers as it helps pre-dict future purchases (Howard and Sheth, 1969).During the first phrase of IE development (Fig.
2),WizIE guides the rule developer in turning such ahigh-level business requirement into concrete ex-traction tasks by explicitly asking her to select andmanually examine a small number 1 of sample doc-uments, identify and label snippets of interest in thesample documents, and capture clues that help toidentify such snippets.The definition and context of the concrete extrac-tion tasks are captured by a tree structure called theextraction plan (e.g.
right panel in Fig.
2).
Eachleaf node in an extraction plan corresponds to anatomic extraction task, while the non-leaf nodes de-note higher-level tasks based on one or more atomicextraction tasks.
For instance, in our running ex-ample, the business question of identifying intentionof purchase for movies has been converted into theextraction task of identifying MovieIntent mentions,which involves two atomic extraction tasks: identi-fying Movie mentions and Intent mentions.The extraction plan created, as we will describelater, plays a key role in the IE development processin WizIE.
Such tight coupling of task analysis withactual extractor development is a key departure fromconventional IE development environments.3.2 Rule DevelopmentOnce concrete extraction tasks are defined,WizIE guides the IE developer to write actual rulesbased on best practices.
Fig.
3(a) shows a screenshotof the second phase of building an extractor, theRule Development phase.
The Extraction Task panelon the left provides information and tips for ruledevelopment, whereas the Extraction Plan panelon the right guides the actual rule developmentfor each extraction task.
As shown in the figure,the types of rules associated with each label nodefall into three categories: Basic Features, Can-1The exact sample size varies by task type.110Figure 2: Labeling Snippets and Clues of Interestdidate Generation and Filter&Consolidate.
Thiscategorization is based on best practices for ruledevelopment (Chiticariu et al, 2010b).
As such,the extraction plan groups together the high-levelspecification of extraction tasks via examples, andthe actual implementation of those tasks via rules.The developer creates rules directly in the RuleEditor, or via the Create Statement wizard, acces-sible from the Statements node of each label in theExtraction Plan panel:The wizard allows the user to select a type forthe new rule, from predefined sets for each of thethree categories.
The types of rules exposed in eachcategory are informed by best practices.
For ex-ample, the Basic Features category includes rulesfor defining basic features using regular expressions,dictionaries or part of speech information, whereasthe Candidate Generation category includes rules forcombining basic features into candidate mentions bymeans of operations such as sequence or alternation.Once the developer provides a name for the new rule(view) and selects its type, the appropriate rule tem-plate (such as the one illustrated below) is automat-ically generated in an appropriate file on disk anddisplayed in the editor, for further editing 2.Once the developer completes an iteration of ruledevelopment, WizIE guides her in testing and refin-ing the extractor, as shown in Fig.
3(b).
The An-notation Explorer at the bottom of the screen givesa global view of the extraction results, while otherpanels highlight individual results in the context ofthe original input documents.
The Annotation Ex-plorer enables filtering and searching results, andcomparing results with those from a previous iter-ation.
WizIE also provides a facility for manuallylabeling a document collection with ?ground truth?annotations, then comparing the extraction resultswith the ground truth in order to formally evalu-ate the quality of the extractor and avoid regressionsduring the development process.An important differentiator of WizIE comparedwith conventional IE development environments isa suite of sophisticated tools for automatic result ex-planation and rule discovery.
We briefly describethem next.Provenance Viewer.
When the user clicks on an ex-tracted result, the Provenance Viewer shows a com-plete explanation of how that result has been pro-2Details on the rule syntax can be found in (IBM, )111ABFigure 3: Extractor Development: (a) Developing, and (b) Testing.duced by the extractor, in the form of a graph thatdemonstrates the sequence of rules and individualpieces of text responsible for that result.
Such expla-nations are critical to enable the developer to under-stand why a false positive is generated by the sys-tem, and identify problematic rule(s) that could berefined in order to correct the mistake.
An exampleexplanation for an incorrect MovieIntent mention ?Ijust saw Mission Impossible?
is shown below.As can be seen, the MovieIntent mention is gener-ated by combining a SelfRef (matching first personpronouns) with a MovieName mention, and in turn,the latter is obtained by combining several MovieN-ameCandidate mentions.
With this information, thedeveloper can quickly determine that the SelfRef andMovieName mentions are correct, but their combina-tion in MovieIntentCandidate is problematic.
She canthen proceed to refine the MovieIntentCandidate rule,for example, by avoiding any MovieIntentCandidatementions containing a past tense verb form such assaw, since past tense in not usually indicative of in-tent (Liu et al, 2010).Pattern Discovery.
Negative contextual clues suchas the verb ?saw?
above are useful for creating rulesthat filter out false positives.
Conversely, positiveclues such as the phrase ?will see?
are useful forcreating rules that separate ambiguous matches fromhigh-precision matches.
WizIE?s Pattern Discoverycomponent facilitates automatic discovery of suchclues by mining available sample data for commonpatterns in specific contexts (Li et al, 2011a).
Forexample, when instructed to analyze the context be-tween SelfRef and MovieName mentions, Pattern Dis-covery finds a suite of common patterns as shownin Fig.
4.
The developer can analyze these patternsand choose those suitable for refining the rules.
Forexample, patterns such as ?have to see?
can be seenas positive clues for intent, whereas phrases such as?took ... to see?
or ?went to see?
are negative clues,and can be used for filtering false positives.Regular Expression Generator.
WizIE also en-ables the discovery of regular expression patterns.The Regular Expression Generator takes as input a112Figure 4: Pattern DiscoveryFigure 5: Regular Expression Generatorset of sample mentions and suggests regular expres-sions that capture the samples, ranging from morespecific (higher accuracy) to more general expres-sions (higher coverage).
Figure 5 shows two reg-ular expressions automatically generated based onmentions of movie ratings, and how the developer issubsequently assisted in understanding and refiningthe generated expression.
In our experience, regu-lar expressions are complex concepts that are diffi-cult to develop for both expert and novice develop-ers.
Therefore, such a facility to generate expres-sions based on examples is extremely useful.3.3 Performance TuningOnce the developer is satisfied with the quality of theextractor, WizIE guides her in measuring and tuningits runtime performance, in preparation for deploy-ing the extractor in a production environment.
TheProfiler observes the execution of the extractor ona sample input collection over a period of time andrecords the percentage of time spent executing eachrule, or performing certain runtime operations.
Afterthe profiling run completes, WizIE displays the top25 most expensive rules and runtime operations, andthe overall throughput (amount of input data pro-cessed per unit of time).
Based on this information,the developer can hand-tune the critical parts of theextractor, rerun the Profiler, and validate an increasein throughput.
She would repeat this process untilsatisfied with the extractor?s runtime performance.3.4 Delivery and DeploymentOnce satisfied with both the result quality andruntime performance, the developer is guided byWizIE?s Export wizard through the process of ex-porting the extractor in a compiled executable form.The generated executable can be embedded in an ap-plication using a Java API interface.
WizIE can alsowrap the executable plan in a pre-packaged applica-tion that can be run in a map-reduce environment,then deploy this application on a Hadoop cluster.4 EvaluationA preliminary user study was conducted to evalu-ate the effectiveness of WizIE in enabling novice IEdevelopers.
The study included 14 participants, allemployed at a major technology company.
In thepre-study survey, 10 of the participants reported noprior experience with IE tasks, two of them haveseen demonstrations of IE systems, and two hadbrief involvement in IE development, but no expe-rience with WizIE.
For the question ?According toyour understanding, how easy is it to build IE appli-cations in general ?
?, the median rating was 5, on a113scale of 1 (very easy) to 7 (very difficult).The study was conducted during a 2-day trainingsession.
In Day 1, participants were given a thor-ough introduction to IE, shown example extractors,and instructed to develop extractors without WizIE.Towards the end of Day 1, participants were askedto solve an IE exercise: develop an extractor forthe high-level requirement of identifying mentionsof company revenue by division from the company?sofficial press releases.
WizIE was introduced to theparticipants in Day 2 of the training, and its fea-tures were demonstrated and explained with exam-ples.
Participants were then asked to complete thesame exercise as in Day 1.
Authors of this demon-stration were present to help participants during theexercises in both days.
At the end of each day, par-ticipants filled out a survey about their experience.In Day 1, none of the participants were able tocomplete the exercise after 90 minutes.
In the sur-vey, one participant wrote ?I am in sales so it is alldifficult?
; another participant indicated that ?I don?tthink I would be able to recreate the example on myown from scratch?.
In Day 2, most participants wereable to complete the exercise in 90 minutes or lessusingWizIE.
In fact, two participants created extrac-tors with accuracy and coverage of over 90%, whenmeasured against the ground truth.
Overall, the par-ticipants were much more confident about creatingextractors.
One participant wrote ?My first impres-sion is very good?.
On the other hand, another par-ticipant asserted that ?The nature of the task is stilldifficult?.
They also found that WizIE is useful andeasy to use, and it is easier to build extractors withthe help of WizIE.In summary, our preliminary results indicate thatWizIE is a step forward towards enabling extractordevelopment for novice IE developers.
In order toformally evaluate WizIE, we are currently conduct-ing a formal study of using WizIE to create extrac-tors for several real business applications.5 DemonstrationIn this demonstration we showcase WizIE?s step-by-step approach to guide the developer in the iterativeprocess of IE rule development, from task analysisto developing, tuning and deploying the extractorin a production environment.
Our demonstration iscentered around the high-level business requirementof identifying intent to purchase movies from blogsand forum posts as described in Section 3.
We startby demonstrating the process of developing two rel-atively simple extractors for identifying MovieIntentand MovieRating mentions.
We then showcase com-plex state-of-the-art extractors for identifying buzzand sentiment for the media and entertainment do-main, to illustrate the quality and runtime perfor-mance of extractors built with WizIE.ReferencesF.
Brauer, R. Rieger, A. Mocan, and W. M. Barczynski.2011.
Enabling information extraction by inference ofregular expressions from sample entities.
In CIKM.L.
Chiticariu, R. Krishnamurthy, Y. Li, S. Raghavan,F.
Reiss, and S. Vaithyanathan.
2010a.
SystemT: analgebraic approach to declarative information extrac-tion.
ACL.L.
Chiticariu, R. Krishnamurthy, Y. Li, F. Reiss, andS.
Vaithyanathan.
2010b.
Domain adaptation of rule-based annotators for named-entity recognition tasks.EMNLP.L.
Chiticariu, Y. Li, S. Raghavan, and F. Reiss.
2010c.Enterprise Information Extraction: Recent Develop-ments and Open Challenges.
In SIGMOD (Tutorials).H.
Cunningham, D. Maynard, K. Bontcheva, andV.
Tablan.
2002.
Gate: an architecture for develop-ment of robust hlt applications.
In ACL.J.A.
Howard and J.N.
Sheth.
1969.
The Theory of BuyerBehavior.
Wiley.IBM.
InfoSphere BigInsights - Annotation Query Lan-guage (AQL) reference.
http://ibm.co/kkzj1i.IBM.
2012.
InfoSphere BigInsights.
http://ibm.co/jjbjfa.Y.
Li, R. Krishnamurthy, S. Raghavan, S. Vaithyanathan,and H. V. Jagadish.
2008.
Regular expression learningfor information extraction.
In EMNLP.Y.
Li, V. Chu, S. Blohm, H. Zhu, and H. Ho.
2011a.
Fa-cilitating pattern discovery for relation extraction withsemantic-signature-based clustering.
In CIKM.Y.
Li, F. Reiss, and L. Chiticariu.
2011b.
SystemT: ADeclarative Information Extraction System.
In ACL(Demonstration).B.
Liu, L. Chiticariu, V. Chu, H. V. Jagadish, and F. Reiss.2010.
Automatic Rule Refinement for InformationExtraction.
PVLDB, 3(1):588?597.S.
Soderland.
1999.
Learning information extrac-tion rules for semi-structured and free text.
MachineLearning, 34(1-3):233?272, February.B.
R. Soundrarajan, T. Ginter, and S. L. DuVall.
2011.An interface for rapid natural language processing de-velopment in UIMA.
In ACL (Demonstrations).114
