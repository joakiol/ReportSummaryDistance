-EXEMPLARS:A Practical, Extensible Framework ForDynamic Text GenerationMichael White and Ted CaldwellCoGenTex, Inc.{mike ,  ted}  @cogentex .
.
comAbstractIn this paper, we present EXEMPLARS, an object-oriented, rule-based framework designed to supportpractical, dynamic text generation, emphasizing its novel features compared to .existing hybrid systemsthat mix template-style and more sophisticated techniques.
These features-.include an extensibleclassification-based text planning mechanism, a definition language that is a superset of the Javalanguage, and advanced support for HTMIdSGML templates.1 IntroductionIn "NLG vs. Templates," Reiter \[Reiter 95\] points out that while template-based text generation tools andtechniques uffer from many well-known drawbacks, they do nevertheless enjoy numerous practicaladvantages over most tools and techniques developed in the NLG community in many circumstances.These advantages include, among others, efficiency, simplified system architectures~ -full control overOutput, and much reduced emands on knowledge .acquisition and representation.
This leads Reiter tosuggest hat, from a practical perspective, one should use NLG techniques in hybrid systems that mixtemplate-style and more sophisticated techniques; moreover, to facilitate adoption, NLG technologiesshould be developed so that they Can be used without "getting in the way.
"In line with this thinking, we have.
been developing EXEMPLARS, an object-oriented, rule-basedframework for dynamic text generation, with an emphasis on ease-of-use, programmatic extensibility andrun-time fficiency.
Exemplars \[Rambow et al 98\] are schenm-like t xt planning rules that are so calledbecause they are meant o capture an exemplary way of achieving a communicative goal in a givencommunicative context, as determined by the system designer.
Each exemplar contains a specification ofthe designer' s intended method for achieving the Communicative goal.
In the general case envisioned inRainbow et al, these specifications can be given at the level of intentional-rhetorical, onceptual, lexico-syntactic, or formatting/hypertext structures.
The present framework currently supports pecificationsonly at the level of formatting/hypertext structures - -  using any SGML-based representation, such asHTML - -  or RealPro abstract syntactic structures \[Lavoie & Rambow 97\].
A more complete range ofspecifications i  instead Supported in PRESENTOR \[Lavoie & Rambow 98\], a parallel implementation fthe general approach with a complementary emphasis; while PRESENTOR emphasizes representation, we266 .
J~have instead emphasized extensibility and classification-based planning.
In future work, we plan tomerge the best of the two implementations.In comparison to existing hybrid systems (e.g.
\[Reiter et al 95\]; \[Milosavljevic et al 96\]; \[Knott et al96\]), we believe the present framework offers the following novel features:?
Extens ib le  classification-based text planning mechan ism:  The text planner's rule selectionmechanism involves a decision tree-style traversal of the exemplar specialization hierarchy,where the applicability conditions associated with each exemplar in the hierarchy are successivelyevaluated in order to find the most specific exemplar for the current context.
Viewed in this way,the rule selection mechanism naturally forms the ?basis of an efficient, deterministic approach totext planning, where communicative actions are classified in context and then recursivelyexecuted, much as in \[Reiter & Mellish 92\].
In contrast o Reiter and Mellish's approach,however, we emphasize extensibility, supporting inter alia discourse-sensitive conditions.?
Java-based definition language: Exemplars are defined using a superset o f  Java, and thencompiled own to pure Java.
This approach makes it possible to (i) reuse basic Java constructs aswell as ?Java's inheritance mechanism, exceptions, threads, etc., (ii) directly and efficientlyintegrate with other application objects, and (iii) take advantage of advanced Java-based systemarchitectures.?
Advanced HTML/SGML support: With exemplars, the designer can bootstrap the authoringprocess using existing HTML or (normalized) SGML, then annotate the specification to producedynamic ontent.
Moreover, in contrast to other HTML template approaches (e.g.
that providedwith JavaSoft's Java Web Server \[Sun 98\]), we allow the designer to generate HTML in a trulyhierarchical fashion.To date we have developed three systems 1 with the framework at CoGenTex -- ?namely the ProjectReporter \[CoGenTex 97\], CogentHelp \[Caldwell & White 97\] and EMMA systems \[McCullough et al98\] - -  and are currently engaged in using it to develop a natural anguage query tool for a large datawarehousing company.
The framework has benefited substantially from feedback received uring its usewith these projects.The rest of this paper is organized as follows.
In Section 2, we describe how the EXEMPLARS frameworkcan be used to dynamically generate HTML using objects from an application object model.
In Section 3,we focus on the role of specialization and extensibility in managing textual variation, In Section 4, wecompare our classification-based approach to text planning to that of \[Reiter & Mellish 92\], as well as tosystemic and schema-based approaches, plus HTML template approaches taken Outside the NLGcommunity.
In Section 5, we conclude with a discussion Of the types of generation systems for which weconsider the framework to be appropriate.
'Project Reporter is currently in the pre-beta release stage of development; CogentHelp and EMMA are operationalprototypes.2672 Dynamically Generating HTMLIn this section we sketch how the EXEMPLARS framework can be used to dynamically generate HTML,using Project Reporter as an example.
Project Reporter is an innovative web-based tool for monitoring thestatus of a project.
Using information obtained from a project management database, Project Reporterautomatically generates fluent natural-language reports describing task progress, staffing, laborexpenditures, and costs for a project.
It also displays project data in tables and in Gantt chart form,.
.~ , ,~ ,~ .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
~ ~.
i~ .
.
.
.
.
.
.
.
.
.
.
.
~ ........ ~ :~ i~;~:~: '~  ~~"- Detailed Design ~i  : i -  , : ProjectRepode~\]m-- Programming andTesting :i~J - i : i*----- Integration Testing =~i;  i i ~  Project Summary~---\] system Test : : i Options,-'- Derive test cases ~ ii :!
~--~:_._~:i i i Help Abouti i---.-" Prepare expected resultsi !--" \[=\]'i l i l l\[~ ~-'t~-'~ ~=~ =~m (=~ !
~-~Resize Gar~tl ChartL... Software Acceptance Revi i!il : .
~ i . "
:.~\]--Installation !~!~ !J :, iJ A : :  :S: :01  .
.
.
.
~ =~'~,,#o,.O#.~x~ts.% Conduct  sys tem tes t  :i' iiThis task was scheduled tofinish on October 10, but is i .
.
.
.
.
: : ?
St~.~t " : Friday September27 IsRU unstarted.
80 hours of work are scheduled, which :~ ~ : ~ ' " I,~su l~,  a cost o~SU20, i ~ ,h :  .
\ [~y .oc ,o~Vo- ,  ~fThis task has one predecessor; =&Prepare xpected ::Duration" i 10d I :~'~results, which is currently ate.
It has one successor, ii .
Status i\[Late lOne,,~rsO,, isass~ed to t~, t,sk: :t Co,,A~,,,e :I*u~O.O0 ?
*0.0~ ' : ~:Figure 1: Project Reporter screenshotproviding a complete multimodal v iewof  the project's tatus.
See Figure 1 for a screenshot.The main idea behind the EXEMPLARS framework is to enable the designer to determine the behavior of adynamic (hyper-) text generation system by writing a set of object-oriented text planning rules andarranging them into a specialization hierarchy, where more specialized rules can augment or override themore general ones they specialize.
?
By text planning rules, we mean rules that determine the content andform of the generated text.
Each such rule has a condition and an action: the condition defines theapplicability of the rule in terms of tests on the input application objects, the discourse context, and theuser model, whereas the action defines what text to  add to the current output and how to update thediscourse context and user model.268Ii|IiI,I|I1For purposes of exposition, we have extracted a subset of Project Reporter's exemplars and simplifiedthem to use a much-reduced application object model, part of which is shown in the UML diagram inFigure 2.
As the diagram indicates, tasks and milestones in a project are represented using Task andMilestone classes, where their common features are abstracted into the base class TaskOrMilestone.
Togenerate an HTML page for a task or milestone along the lines of the one shown in Figure 1, the generatorinvokes the top-level exemplar ShowTaskOrMilestone with the given task or milestone.
This exemplarsets up the HTML page, adds a table with basic data, and then calls ?other exemplars ?, including theDescribeTaskOrMilestoneStatus exemplar, to add appropriate t xt for the task or milestone.
The call fromShowTaskOrMilestone to DescribeTaskOrMilestoneStatus is reflected in the UML diagram in Figure 3 bythe dependency arrow between the two.
The other two dependency arrows in the diagram show thatBasellneStatus J+finishVariance : int I+isAheadOfScheduleO : bocte.an\]+isOnSchedule 0 : boolean+isBehindScheduleO : booleanJ Task II?
TaskOn~lllestone\ [+name : StdngOl+stadDate : Calendar|+firdshDate : CalendarJ+percentCornplete : intJ+getBasicOataLabelsO : String \[J+getBasicOataO : String \[ \]CompleUonStatus+islnProgress 0 ; boolean+isUnstadedO : boolean+isFinished 0 : boolean{startDale same as finishDate; |percentComplete 0 or 100} /AI -o" \[\[+getBasicDataLabelsO : String \[ \]/ " ?\[+getSasicDataO : String \[ \] |Figure 2: Simplified project model with tasks and milestonesDescribeTaskOrMilestoneStatus in turn makes use of AddBaselineStatusModifier andIdentifyDate.A call to DescribeTaskOrMilestoneStatus produces text such as This task started last Saturday, June 13,and is scheduled to finish July 9, three days ahead of the baseline schedule.
It is Currently 10% complete.Exemplar calls are mediated by the text planner component of the framework, which automatically selectsthe most specific applicable xemplar to actually apply in the current context.
For example, the abovetext would be produced by the DescribeTaskStatus exemplar, whose source is shown in Figure 4; thisexemplar is chosen when the given task or milestone is in fact a task, and is currently in progress.To find the most specific applicable xemplar, the text planner traverses the specialization hierarchy top-down and left-to-right, 2 evaluating applicability as it goes; the traversal is similar to that of a decision2 Left-to-right order is determined bythe order in which exemplar definitions appear in the source file.269tree, insofar as applicability conditions are implicitly conjoined, except hat the search may end at a non-leaf node in the hierarchy.
To determine whether a particular exemplar is applicable, the text planner firstchecks the type constraints on the exemplar's arguments, then evaluates any explicitly defined conditions.Once the most specific applicable xemplar is found, its exclusion conditions (if any) are checked, to seeif it is optional and should be skipped in the given context; if not, its action is invoked at this point.
In theCase of the exemplars?
hown in Figure 3, the exemplars under DescribeTaskOrMilestoneStatus definetheir applicability conditions using the methods of the task or milestone's associated CompletionStatusobject; the exemplar AddBaselineStatusModifier is optional, and defines its exclusion conditions usingIShowTaskOrMilestone IV \[AddBaselineStatusM odifie~- ..................... tDesc~lbeTas kOrMilestoneStatust ........................... -~IIdenUfyDate-~De scribe LateTaskS tatu-s)Figure 3: Exemplars for showing the status of a task or milestonethe methods of the task or milestone's associated BaselineStatus object.As mentioned in the introduction, exemplars are defined using a superset of Java, and then compileddown to pure Java.
A source file normally contains a set of related exemplars, each of which is compiled?
into a separate Java class files (though all in the same package).
The compilation process consists of (i)translating the signatur e into a set of constructors and methods that implement i ; (ii) translating any?
statements oadd annotated HTML, including any embedded simple substitutions or exemplar calls, suchas those shown in Figure 4; and (iii) passing through any Java code in-between.
While theDescribeTaskStatus exemplar in Figure 4 happens to not contain additional Java code, exemplars oftencontain loops, local variables, try-catch blocks, auxiliary methods, and so on.270IIIII!,iII,|IFrom the perspective of everyday object-oriented design, the way in which exemplars are treated as first-class objects is quite similar to the way methods are promoted to objects in certain design patterns, uchas the Command pattern in \[Gamma et al 95\].
While the Command pattern promotes methods to objectsso that they can be tracked and possibly undone, the primary reason for doing so with exemplars i so thatthey can become ssentially self-specializing.
Additionally, the way in which type constraints are used inspecialization resembles the Visitor pattern, whose primary purpose is to group closely related methods.for various classes in one place, rather than having them scattered over many classes.
Exemplars aremuch more flexible than visitors, however, since they support arbitrary applicability conditions plus type-* Describes the status of a task.
The* to in-progress tasks.,/exemplar Descr ibeTaskStatus(Task task)extends Descr ibeTask0rMi lestoneStatus{ tvoid apply ( ) } \[ action methoddefault descr ipt ion appliesexemplarsignature{<<+// <p>// This task started {{ Identi fyDate(task.startDate) }},and is scheduled to f inish {{ Ident i fyDate(task.f in ishDate) ))i { ( AddBasel ineStatusModi f ier  (task) } } .I +>> It is current ly { task.percentComplete }% complete.)
~ \ [  ~ annotatedsymb?l forHTMLadding a simple substitution \]\[ !Iend of annotated HTML?
a call to another exemplarFigure 4: Exemplar describing the status of a taskbased selection on multiple arguments.3 Specialization and ExtensibilityTo further illustrate the role of specialization a d extensibility in managing ?textual variation, we will nowexamine how dates are referred to in a context-sensitive way in Project Reporter.
The IdentifyDateexemplar referenced in Figure 4, along with its specializations, form a separate reusable package.
Theseexemplars are shown in the annotated UML diagram in Figure 5.The IdentifyDate exemplars yield descriptions that are sensitive both to the current date and the last ?datementioned.
If the given date is the same as the last one mentioned, the phrase the same day is used, as in271This task is scheduled tostart next Thursday, June 25, and to finish the same day.
If the givendate is notthe same as the last one mentioned, the phrase used depends on how close it is to the current date, asFigure 5 shows.The apply method calls addDescription \ [~  \[and updateDateFocus, so that the .
| \] IdentlfyDate " description can be separately augmented | |?
or overridden.
| I+apply0 .- /~ - -  j+addDescription 0'V - f----l+.updateDate Focus(~?
IldentifyOateOutOfF?cusl"today" I' "tomorrow" "yesterday""April 1"context-interface-DateContext+getDateFocus 0 : Calendar+setDateFocus(date : Calendar)+datelnFocus(date : Calendar) : boolea~"the same day"prem~+ s:~F:iday," " super+", 1999"premod = " I l premod = I "last" 1 "this" Pr"evme?~' =t premod =super  + "past"IldentifyDateEarllerThlsWeek IFigure 5: Exemplars for  contextua l ly  ident i fy ing datesSeveral aspects of the diagram merit further explanation.
First, the context object associated with eachinstance of IdentifyDate is required to implement the DateContext interface, which provides the indicatedmethods for tracking the last date mentioned.
Second, the IdentifyDate xemplar breaks down its applymethod (its action) into two methods, addDescription a d updateDateFocus, so that the description can beseparately specialized in descendant exemplars.
Third, it should be emphasized that the ability to extendthe framework in this way follows from the treatment of exemplar.s as first-class objects plus the?.
272|!definition language allowing for arbitrary Java code.
Finally, note that while some exemplars, such asIdentifyDatelnFocus and IdentifyDateWithinADay, simply override the description of their parentexemplar (a.k.a.
their 'super', in Java terminology), most of these exemplars instead augment he lessspecialized phrase with additional modifiers.1!
!II1l1!11II!4 Related WorkFollowing \[Reiter & Meilish 92\], we view the process of selecting the most specific exemplar to be one ofrule classification.
Intheir  approach, the process begins by forming a rule instance with appropriatefillers, which is then classified in the taxonomy of rules.
Once the rule instance has been classified, anyrelevant (possibly inherited) attributes are read off, and its particular action is invoked.
Our approach isvery much the same, though the terms are slightly different: first an exemplar instance is constructed andinitialized with the given arguments; this instance is then classified in the exemplar specializationhierarchy (making use of more specialized but otherwise quivalent exemplar instances); once the mostspecific applicable xemplar has been found, its particular action is likewise invoked, unless its (possiblyinherited) exclusion conditions are true.The primary way in which our approach differs from that of Reiter and Mellish is in the choice ofclassification procedure: while we employ a simple decision tree-style traversal of a tree-structuredspecialization hierarchy, they make use of a more sophisticated Classification algorithm in a potentiallymore complex taxonomy.
The particular classification algorithm they employ is the one built-in to I1, theknowledge representation system used in their IDAS system.
While this algorithm potentially offersmore in the way of automated reasoning, in our view it suffers from the inability to easily make use ofdynamically determined constraints, uch as those pertaining to the addressee or the discourse Context.As Reiter and Mellish point out, their classification-based approach to planning closely resemblessystemic approaches (e.g.
\[Vander Linden & Martin 95\]), especially insofar as both are deterministicchoice makers (in contrast o unification-based systems).
In a sense, our approach is even more closelyrelated to systemic ones, at least those that allow arbitrary Lisp code in the choosers that determine thefeatures used in systemic network traversal.
However, what Reiter and MeUish fail to point?
out is therather different flavor of classification vs. systemic network traversal: in a classification-based approach,no action is taken until the most specific rule is found; in contrast, in the systemic approach, action (in theform of executing realization statements) is performed as the network is traversed.
As we saw in thepreceding section, it is possible for a more specific rule to augment, he action of its parent in thehierarchy,?yielding much the same behavior as with systemic network traversal; nevertheless, it should beemphasized that this is not required in a classification-based approach.Turning now to schema-based approaches uch as that of \[Lester & Porter 97\], beyond the obviousdifferences of representation a d the absence of classification, one way in which our approach differs isthat we have explicitly embraced a powerful object-oriented programming language, rather than simplyembedding a handful of procedural constructs.
Since schemas are interpreted rather than reasoned about273as formal objects (as in AI planning approaches), we suggest that the added flexibility of building upon anadvanced programming language more than offsets any loss in declarativity.Beyond flexibility, the Java basis of EXEMPLARS provides numerous further practical benefits.
Perhapsforemost of these is that with just-in-time compilers, the compiled Java code supports the performancedemands of interactive web applications.
An important factor in this picture is the ability to directlYintegrate with application objects, rather than integrating indirectly via some interpretive schemei directintegration also offers better static checking than is usually possible otherwise.
Another key practicalbenefit of the approach is that it becomes possible to take advantage o f  advanced Java-based systemarchitectures, such as the Java Servlet API \[Sun 98\].3Finally, looking outside the NLG community, it is worth observing that while we have seen theemergence of numerous template-style HTML generation frameworks e.g., the page compilationfacility included with the-Java Web Server --- none include ?
anything like our extensible classification-based planning mechanism, or even the ability to generate HTML ?
in a trulY hierarchical fashion.Typically, these frameworks embed special tags and code into HTML, rather than the other way around;while limiting in many respects, note that the mainstream approach does promise a more streamlinedauthoring process.5 ConclusionIn this paper, we have presented EXEMPLARS, an object-oriented, rule-based Java framework designed tosupport practical, dynamic text generation, emphasizing its novel features compared tO existing hybrid?
, ?
.
.
.
.systems.
To date the framework has been used with success in three projects at CoGenTex and in oneoutside consulting effort.
Based on this ?experience, we suggest he framework is well suited tomonolingual generation systems of moderate to high complexity, especially those of a highly application-specific nature and with significant performance d mands.AcknowledgementsWe thank Ehud Reiter, Regina Barzilay, Tanya Korelsky, Richard Kittredge, Benoit Lavoie, DarylMcCullough, David Post, and Owen Rambow for feedback and advice.
Kudos also to the JavaCC folksfor making the exemplars compiler possible.
This work has been partially supported by Rome Laboratory -contract F30602-94,C-0124 and DARPA contract F30602-96-C-0220.3 Servlets are the server-side analogues of applets, insofar as they are specialized mini-servers that can bedynamically oaded into a web server.?
274References\[Caldwell & White 97\] Caldwell, D. E., and M. White.
1997.
CogentHelp: A tool for authoring dynamicallygenerated help for Java GUIs.
In Proceedings of the 15th Annual International Conference on ComputerDocumentation (SIGDOC '97), pp.
17-22, Salt Lake City, UT.\[CoGenTex 97\] CoGenTex, Inc. 1997.
Text Generation Technology for Advanced Software EngineeringEnvironments.
Final Report, Rome Laboratory Contract No.
F30602-92-C-0163.\[Gamma et ai.
95\] Gamma, E., R. Helm, R. Johnson, and J. Vlissides.
1995.
Design Patterns: Elements ofReusable Object-Oriented Software.
Addison-Wesley, Reading, MA.\[Knott et al 96\] Knott, A, C. Mellish, J. Oberlander, and M. O'Donnell.
1996.
Sources of Flexibility in DynamicHypertext Generation.
In Proceedings of the Eighth Interizational Natural Language Generation Workshop(INLG '96), pp.
151-160, Herstmonceux Castle, Sussex, UK.\[Lavoie & Rambow 97\] Lavoie, B., and O. Rambow.
1997.
A Fast and Portable Realizer for Text GenerationSystems.
In Proceedings of the Fifth Conference on Applied Natural Language Processing (ANLP "97), pp.265-268, Washington, D.C.\[Lavoie & Rambow 98\] Lavoie, B., and O. Rambow.
1998.
A Framework for Customizable Generation of Multi-Modal Presentations.
To appear in Proceedings of the 36th Meeting of the Association for ComputationalLinguistics (ACL '98), Montr6al, Canada.\[Lester & Porter 97\] Lester, J. C. and B. W. Porter.
19971 Developing and Empirically Evaluating RobustExplanation Generators: The KNIGHT Experiments.. Computational Lb~guistics, vol.
23, no.
1, pages 65-100.\[McCullough et al 98\] McCullough, D., T. Korelsky, and M. White.
1998.
Information Management for Release-based Software Evolution Using EMMA.
To appear in the Proceedings of the Tenth International Conferenceon Software Engineering and Knowledge Engineering (SEKE "98), San Francisco Bay, CA.\[Milosavljevic et al 96\] Milosavljevic, M., A. Tulloch, and R. Dale.
1996.
Text generation i a dynamic hypertextenvironment.
In Proceedings of the 19th Australasian Computer Science Conference, pp.
229-238, Melbourne,Australia.\[Rambow et al 98\] Rambow, O., D. E. Caldwell, B. Lavoie, D. McCullough, M. White.
1998.
Text Planning:communicative intentions and the conventionality oflinguistic ommunication.
Inpreparation.\[Reiter & Mellish 92\] Reiter, E., and C. Mellish.
1992.
Using classification to generate text.
In Proceedings of the30 xh Annual Meeting of the Association for Computational Linguistics (ACL ~93), pp: 265-272, Newark,Delaware.\[Reiter 95\] Reiter, E. 1995.
NLG vs. templates.
In Proceedings of the Fifth European Workshop on NaturalLanguage Generation (EWNLG '95), Leiden, The Netherlands.\[Sun 98\] Sun Microsystems, Inc. 1998.
Java Web Server.http://jeeves.j avasofi.com/products/webserver/index.html\[Vander Linden & Martin 95\] Vander Linden, K., and J. H. Martin.
1995.
Expressing Rhetorical Relations inInstructional Text: A Case Study of the Purpose Relation.
Computational Linguistics, vol.
2\[, no.
1, pp.
29-58.275
