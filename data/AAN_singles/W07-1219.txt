Proceedings of the 5th Workshop on Important Unresolved Matters, pages 144?151,Ann Arbor, June 2005. c?2005 Association for Computational LinguisticsLocal ambiguity packing and discontinuity in GermanBerthold CrysmannDFKI GmbH & Saarland UniversityStuhlsatzenhausweg 3D-66123 Saarbru?ckencrysmann@dfki.deAbstractWe report on recent advances in HPSG pars-ing of German with local ambiguity pack-ing (Oepen and Carroll, 2000), achieving aspeed-up factor of 2 on a balanced test-suite.In contrast to earlier studies carried out forEnglish using the same packing algorithm,we show that restricting semantic featuresonly is insufficient for achieving acceptableruntime performance with a German HPSGgrammar.
In a series of experiments relatingto the three different types of discontinuitiesin German (head movement, extraction, ex-traposition), we examine the effects of re-strictor choice, ultimately showing that ex-traction and head movement require partialrestriction of the respective features encod-ing the dependency, whereas full restrictiongives best results for extraposition.1 IntroductionIt is a well-known fact that chart parsing with-out techniques for local ambiguity packing (Earley,1970) faces a combinatorial explosion of the searchspace, owing to the (structural) ambiguity immi-nent to natural language.
Thus, identical edges withdifferent internal derivation history can be packedinto a single representative for further processing,thereby effectively solving the complexity issue.
Incontext-free grammars augmented with a unifica-tion formalism, packing based on the CF symbolequality has been complemented by subsumption- ordisjunction-based packing of the associated featurestructures (Moore and Alshawi, 1992; Maxwell andKaplan, 1995).
For parsing with constraint-basedgrammars, such as HPSG, which do not possess anexplicit context-free backbone, (Oepen and Carroll,2000) have proposed an efficient packing algorithmbased on feature structure subsumption only.In contrast to the symbols in context-free gram-mars, feature structures in unification-based gram-mars often include information encoding (part of)the derivation history, most notably semantics.
In or-der to achieve successful packing rates, feature re-striction (Shieber, 1985) is used to remove this in-formation during creation of the packed parse forest.During the unpacking phase, which operates onlyon successful parse trees, these features are unifiedback in again.For their experiments with efficient subsumption-based packing, (Oepen and Carroll, 2000) experi-mented with different settings of the packing restric-tor for the English Resource Grammar ERG (Copes-take and Flickinger, 2000): they found that goodpacking rates, and overall good performance dur-ing forest creation and unpacking were achieved, forthe ERG, with partial restriction of the semantics,e.g.
keeping index features unrestricted, since theyhave an impact on external combinatorial potential,but restricting most of the internal MRS represen-tation, including the list of elementary predicationsand scope constraints.
Restriction of syntacticallypotent features, has thus been found both unneces-sary and less efficient.First experiments in ambiguity packing with aGerman HPSG grammar (GG; http://gg.dfki.de) re-vealed that restriction of semantics only does notgive rise to any acceptible results in terms of runtimeperformance.
It became clear quite quickly that the144bulk of failing subsumptions impeding creation of asufficiently compact forest were related to two syn-tactic features, SLASH and DSL.
In German, thesefeatures contain references to non-empty valencelists, which eventually wind up encoding derivationhistory.
Using a more aggressive restrictor to elim-inate these features during forest creation did notshow the desired performance either: owing to mas-sive overgeneration, the resulting forest was eithernot compact enough, or most of the efficiency gainswere wasted on unpacking failures in the secondphase.In this paper we report on recent advances withlocal ambiguity packing for German, showing howpartial restriction can achieve good packing rates atnegligible unpacking cost, yielding an overall speed-up by a factor of 2, as compared to parsing withoutambiguity packing.
Running a series of experimentswith different restrictor setting for three differentfeatures involved with non-local dependencies weexamine in detail how the choice of restrictor affectsthe observable performance.
The paper is organisedas follows: section 2 will give an overview of the rel-evant syntactic constructions of German, and theirimplementation in GG.
Section 3 gives a descriptionof the experimental setup (3.1), followed by a dis-cussion of the main results (3.2), detailing how dif-ferent settings for feature restriction affect parsingperformance.2 Discontinuity in GermanHead movement German, in contrast to English isa verb-final language with a verb-second effect, thatis, non-finite verbs are standardly placed sentence-finally.
In clauses other than complementizer-introduced subclauses and relative clauses, the finiteverb surfaces in a clause-initial position (either firstor second).
Any major constituent may occupy thetopic position preceding the finite verb, includingsubject, complements or modifiers.Owing to the V2 effect, the parts of a verb clusterare discontinuous.
Since both the finite verb and thenon-finite verb cluster impose constraints on con-stituents in the Mittelfeld, standard approaches toGerman syntax in HPSG assume, since (Kiss andWesche, 1991), that the initial verb is related tothe final verb cluster by means of head movement:clause-finally, a trace is inserted that combines theMontagNNP-A-V-MODlasseVichNP-NOM-SGihnNP-ACC-SGdemDMannNNP-DAThelfenVEPSEPS/NP-A-V-MODEPS/NP-A-V-MODEPS/NP-A-V-MODEPS/NP-A-V-MODS/NP-A-V-MODSFigure 1: DSL: Monday let he him the man helpargument structure of the final cluster with the sub-categorisation requirements percolated down fromthe finite verb using a special feature DSL (=?dou-ble SLASH?).
Arguments in the Mittelfeld are satu-rated as complements of the clause-final trace.
Thegrammar used here assumes head movement for dis-continuous predicates (Crysmann, 2003), followingin this respect the earlier implementation by (Mu?llerand Kasper, 2000).
In order to relate the initial verbto the verb cluster and its arguments in the Mit-telfeld, like the subject and direct object in figure 2,the DSL (or V1) feature must percolate subcategori-sation requirements for subject and object, as well asfor the verb cluster.
At the gap site, the valence in-formation percolated via DSL is inserted into the ac-tual valence lists of the verb trace.
Since the require-ments are matched against actual arguments foundin the Mittelfeld, the valence lists contained in DSLget instantiated to whatever argument it satisfies,thereby creating a partial representation of deriva-tion history.
While theoretically, this is just the rightbehaviour, it has clear repercussions for parsing withambiguity packing.Partial VP fronting Another aspect, in which thesyntax of German differs from that of English isin the area of extraction: while in English onlyconstituents with a saturated COMPS list can un-dergo wh-movement, this is not the case in Ger-man: as shown in figure 2, the verb schenken?give/donate?
has been fronted, leaving its two com-plements behind.In HPSG, partial VP fronting is analysed bya combination of two mechanisms (Mu?ller, 1999;Nerbonne, 1994): first, standard argument com-position in the verb cluster, following (Hinrichsand Nakazawa, 1990), combined with a standardSLASH-based treatment of long-distance extraction.Again, since argument composition is performed145schenkenVVhatVerNP-NOM-SGihmNP-DATdasDBuchNNP-ACC-SGwollenVV/VV/VEPS/VEPS/VEPS/VEPS/VS/VSFigure 2: SLASH: give has he him the book wantedby strcuture-sharing, i.e.
reentrancy between the va-lence list of the governing predicate and the unsatu-rated valence list of the governed predicate, extrac-tion of the governed predicate by means of SLASHpercolation carries this reentrancy over into SLASH.From a general linguistic point of view, this is highlydesirable, because valence requirements of the ex-tracted verb must be matched against the argumentsthat satisfy them in the Mittelfeld.
The only draw-back is, that we are confronted, again, with a syntac-tic feature containing, among other things, recordsof derivation history.3 Evaluation3.1 Test setupIn order to systematically investigate the effect of re-striction of syntactically potent features on the pars-ing efficiency with local ambiguity packing, we cre-ated a test field consisting of 8 different parametersettings (out of 27 logically possible settings): 1 runwithout packing, 1 run with optimal settings for thethree features under consideration, and 2 runs withsuboptimal settings for each of the three features.All test runs were performed on a balanced testsuite extracted from the Verbmobil corpus, using100 items per input length, from sentence length 1to 22, thus totalling 2200 test items.
Although theVerbmobil corpus does contain test sentences of upto 70 words long, their number drops quite quicklyfrom sentence length 23 on.The parser used in the experiments is the cur-rent SVN version of Pet (Callmeier, 2000), run-ning the March 24 version of GG (http://gg.dfki.de;(Mu?ller and Kasper, 2000; Crysmann, 2003; Crys-mann, 2005)).
Tests were run on an Intel Core Duomachine using a single T2600 CPU at 2.16GHz with2 GB main memory.To ensure that we can study parser performanceon input of increasing length, we used a rather gener-ous upper limit of 150,000 passive edges.
Taking asa guideline the average space consumption per edgeof the non-packing parser, we calculated that pars-ing could still be done comfortably in main memory,i.e., without using swap space.All measurements were performed using the [incrtsdb()] profiling platform (Oepen and Flickinger,1998).
Parsing times reported are total CPU times(in seconds), including exhaustive unpacking of theparse forest, whenever applicable.3.2 ResultsThe main result of our study is that local ambiguitypacking in constraint-based parsing of German canlead to performance improvements, once feature re-striction is extended from purely semantic featuresto syntactically potent features used to model dis-continuity, such as SLASH, DSL, and ANC (see be-low).
We also found that positive performance ef-fects could only be achieved, if SLASH and DSLfeatures were partially restricted in such a way as toonly eliminate all records of derivation history (interms of instatiated subcategorisation lists), whileretaining most of the other constraints representedin these features.Compared to a non-packing baseline parser withfeature structure unfilling, we observed an overallspeed-up by a factor of 2 with local ambiguity pack-ing on a balanced test suite.
As shown by figure3.2, local ambiguity packing with optimal restrictorsettings is effective in taming the combinatorial ex-plosition of the search observed by the non-packingparser.Analogous to the reduction in search space, per-formance savings grow continuously with increas-ing input length: from sentence length 14 onwards(factor 0.84) relative processing time decreases con-tinually up to a factor of 0.27 at sentence length22.
With an average CPU time of 0.69s at sentencelength 22, performance is by far better than real-time behaviour.
Note further, that the non-packingparser benefits here from a ceiling effect: with 25 outof 2200 test items (1%), the available resources of150,000 passive chart edges were exhausted beforethe search space was fully explored.
With ambiguitypacking under an appropriate restrictor, by contrast,the search space was fully explored.1461 3 5 7 9 11 13 15 17 19 21String Length020000400006000080000100000120000140000No packing????
???
?????
???
??
??????????
??????
???????
?????????????????????????????????????????????????????
????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
?
passive edges1 3 5 7 9 11 13 15 17 19 21String Length020000400006000080000100000120000140000Packing w/ partial SLASH/DSL; no ANC??
??
??
??
??
??
??
????
??
???
????????
????
????????
?????
???
??????
??????????????
??????????????????
?
passive edgesFigure 3: Comparison of chart size relative to input length1 3 5 7 9 11 13 15 17 19 21String Length0246810121416182022No packing (unfilling)(generated by [incr tsdb()] at 25-mar-2007 (17:44 h))         ?
Total CPU time (s)1 3 5 7 9 11 13 15 17 19 21String Length0246810121416182022Packing w/ partial SLASH/DSL; no ANC           ?
Total CPU time (s)Figure 4: Comparison of processing time relative to input lengthRestricting DSL The first syntactically potentfeature investigated in these experiments is the fea-ture DSL (or V1), which serves to relate, by meansof simulated head movement, the finite verb inclause-second position to the clause-final verb clus-ter.
Essentially, this feature is used to pass downthe valence information from the initial verb to theclause-final verb trace, where this valence informa-tion is combined with that of the cluster.
In thegrammar under consideration, verb movement is re-stricted to discontinuous verb clusters (Crysmann,2003), i.e., to situations where there is either an overtverb cluster, or a stranded verb particle in the rightsentence bracket.Since actual or putative arguments of the verbtrace must be checked against the actual valence in-formation of the V2 verb, derivation history must becarried along as part of the DSL feature.Obviously, any feature that (partially) encodesderivation history is a potential threat to efficientambiguity packing.
We therefore experimented withthree different settings regarding restriction of thisfeature: full restriction, no restriction, and a par-tial restriction, where only constraints pertaining toHEAD information of the final cluster were retained,such as category, or form (most crucial for strandedparticles).Results are summarised in table 1.
Besides thefeature studied here, the restrictor includes the se-1Here, and in the following two tables ?
stands for packingunder equivalence, = for proactive packing, < for retroactivepacking, and ?
for freezing.147Edges Time (s) Unpack (s) Subsumption ?
= < ?
Factor (time) Subs.
cost Pack rateUnfill 6424 0.56 0 0 0 0 0 0 1 N/A 0Partial DSL 1494 0.28 0.01 36404.15 307.28 193.33 36.67 335.84 0.5 67.76 0.36Full DSL 1832 1.96 0.01 363840.47 186.19 111.31 42.96 251.32 3.5 1068.68 0.19No DSL 1917 0.61 0.01 106392.57 568.34 484.68 80.8 926.79 1.09 93.83 0.59Table 1: Performance of packed parsing with different restriction of DSL1mantic features like RELS and HCONS, as in(Oepen and Carroll, 2000), as well as optimal set-tings for SLASH and ANC.Leaving DSL unrestricted features the lowestnumber of packings, amongst the three settings,both in absolute terms, and in relative packings peredge (0.19).
As a consequence, average chart size isbigger than with either partially or fully restrictedDSL.
Another negative behaviour of packed pars-ing with an unrestricted DSL is the incommensu-rate number of subsumption tests carried out: at aratio of 1068.68 subsumption tests per packing, thisaccounts chiefly for the inefficiency, in particular,when compared to the much more moderate ratesof 67.76 and 93.83 achieved with partially restrictedand fully restricted DSL.
Thus, even though over-all chart size is reduced when compared to parsingwithout ambiguity packing, these savings in spaceare not sufficient enough to pay off the overhead in-curred by testing for subsumption.
As a net effect,overall parsing time is 3.5 times longer compared tothe non-packing baseline.2Fully restricting DSL by contrast yields a verygood packing rate (0.59) at moderate costs in termsof subsumption test per packing (93.83).
However,with the grammar not being restrictive enough dur-ing forest creation, overall chart size is bigger (1832passive edges) than with partially restricted DSL(1494).
Best results are obtained with partially re-stricted DSL, where derivation history in terms ofactual or putative arguments of the verb trace is re-moved, but reference to HEAD information of thefinal cluster is maintained, thereby ensuring that theinitial verb only combines with appropriate verbclusters.
This not only leads to the most compactchart, but also features the lowest number of sub-sumption tests, both absolute and relative.
In sum,2Edges in packed parsing are actually more costly than inparsing without ambiguity packing.
Since efficient subsumptionchecking and feature structure unfilling are mutually exclusive,edges in general consume much more space when parsing withambiguity packing, increasing the cost of copying in unification.partial restriction of DSL was the only setting thatactually beat the baseline defined by parsing with-out ambiguity packing.Restricting SLASH The second experiment wecarried out relates to the feature SLASH, used forlong-distance dependencies.
Owing to the V2 ef-fect in German, constituents in the clause-initial pre-verbal position are typically placed there by meansof extraction, including unmarked subjects.
This dif-fers quite clearly from English, where standard SVOorder does not involve any movement at all.
Anotherstriking difference between the two languages is thatGerman, but not English permits fronting of par-tial VPs: in complex predicates, as witnessed withmodals and control verbs, as well as in auxiliary-participle combinations, the downstairs predicatecan be fronted, leaving part (or even all) of its com-plements to be realised in the Mittelfeld.
Since Ger-man is a non-configurational language, pretty muchany combination of fronted vs. stranded comple-ments can be found, in any order.
In GG, partialVP fronting is effected by special extraction rules,which removes the valency of pertaing to the frontedverb from the subcategorisation list of the embed-ding predicate, and inserts it into SLASH.
Simulta-neously, the remaining complements of the embed-ding verb are composed with the locally underspec-ified subcategorisation list of the extracted verbalcomplement.
In order to match the subcategorisationrequirement of the extracted verb with those of itscomplements that are realised in the Mittelfeld, thesubcategorisation list must be percolated via SLASHas well.
Since elements on the subcategorisation listin SLASH are reentrant with elements on the com-posed subcategorisation list of the embedding pred-icate, the former gets specified to the complementsthat saturate the requirements in the Mittelfeld.
As aresult, we observe a massive encoding of derivationhistory in SLASH.Besides the rules for partial VP fronting, thegrammar recognises 3 more extraction rules, one for148subject, one for non-subject complements, and onefor adjuncts.
Out of these three, only adjunct ex-traction rules encode reference to their extractioncontext in SLASH: since modifiers select the headsthey adjoin to via a feature MOD, which is reentrantwith the SYNSEM of that head, they inevitably carryalong a good deal of that head?s derivation history.We tested three different configurations of the re-strictor: one with unrestricted SLASH, one wherethe entire SLASH feature was removed during for-est creation, and a partially restricted variant.
Thispartially restricted variant preserves the full SLASHrepresentation for ordinary subject and complementextraction, but uses an impoverished representationfor adjunct extraction and partial VP fronting.
Tech-nically, this was achieved by using two SLASH fea-tures in parallel: an auxiliary, impoverished SLASHto be used during forest creation, and the fullSLASH feature during unpacking.
For adjunct ex-traction and partial VP fronting, SLASH containstype restrictions on the head value of the fronted el-ement, together with restrictions on the saturation ofvalence lists, if applicable.3 For subject and comple-ment extraction SLASH contains the same infor-mation as SLASH.
In sum, partial restriction triesto maximise restrictiveness in those case, where noreference to the extraction context is encoded inSLASH, while at the same time it minimises encod-ing of derivation history in the other cases, by re-placing token identity with somewhat weaker typeconstraints.The results of this second experiment are sum-marised in table 2.
Again, we have used optimal set-tings for DSL and ANC, as established by indepen-dent experiments.Parallel to our observations regarding the restric-tion of DSL, we observe that performance is worstfor packed pasring with a completely unrestrictedSLASH feature: not only is the packing rate quitelow (0.25 packings per edge), but also the costsfor packing in terms of the number of subsumptionchecks carried out is highest amongst all the experi-ments reported on in this paper, peaking at 1355.85subsumption tests per successful packing.
The im-pact on chart size is slightly worse than what we ob-served with an unrestricted DSL feature.
In sum, the3E.g., modifiers must have saturated valence lists, whereasfronted partial VP constituents may have open valencies relatingto complements in the Mittelfeld.suboptimal packing together with the excessive sub-sumption costs account for the fact that this settingperforms more than 8 times as badly as the baseline.Although packed parsing with fully restrictedSLASH performs much better than having SLASHentirely unrestricted, it still falls short of the base-line by a factor of 1.36.
This is due to several rea-sons: first, although the packing rate is good (0.59),the chart is the biggest observed with packed pars-ing in all the experiments carried out, being morethan 2 times as big as the parse chart with optimalrestrictor settings.
This is mainly due to the fact thatthe grammar is far to unconstrained during forestcreation, allowing too many inconsistent analyses toenter the chart.
This is also corroborated by the factthat this is the only test run where we experienced anoticeable increase in unpacking time.
Another ob-servation, for which we cannot offer any explanationat present, pertains to the increased cost associatedwith retroactive packing: the amount of frezing thathas to be done for edges masked by retroactive pack-ing is far higher than any other value found in theseexperiments.In a separate test run, we used simultaneous fullrestriction for DSL and SLASH, in order to verifywhether our assumtion that the choice of one re-strictor is independent from the others.
By and large,our hypothesis was confirmed: having both DSL andSLASH fully restricted performed more than 2.5times worse than full restrcition of SLASH whithpartial restriction of DSL.Still in parallel to our findings regarding DSL,partial restriction of SLASH performs best, con-firming that the compromise between restrictivenessand eleimination of derivation history is effectiveto achieve a runtime behaviour that clearly outper-forms the baseline.
The packing rate achieved withpartial restriction of semantics, DSL and SLASH(0.36) is actually very close to the packing rates re-ported in (Oepen and Carroll, 2000) for the ERG,which figures around 0.33 for input longer than 10words.
Also, the compactness of the chart with in-put of increasing length (cf.
figure 3.2), and the lownumber (2) of performance outliers (cf.
figure 3.2)suggest that we are indeed close to optimal featurerestriction.Decisions on which features to preserve withinSLASH under partial restriction were mainly de-149Edges Time (s) Unpack (s) Subsumption ?
= < ?
Factor (time) Subs.
cost Pack rateUnfill 6424 0.56 0 0 0 0 0 0 1 N/A 0Partial SLASH 1494 0.28 0.01 36404.15 307.28 193.33 36.67 335.84 0.5 67.76 0.36Full SLASH 2187 4.72 0.01 728385.4 314.66 149.21 73.35 826.1 8.43 1355.85 0.25No SLASH 3435 0.76 0.16 97965.05 883.79 994.87 145.44 2583.51 1.36 48.4 0.59Table 2: Performance of packed parsing with different restriction of SLASHrived in a test-debug cycle.
We therefore plan toinvestigate different configurations of partially re-stricted SLASH in future work.Restricting ANC The last experiment we carriedout relates to the ANC (=ANCHOR) feature usedto percolate semantic attachment anchors for rela-tive clause extraposition in the style of (Kiss, 2005;Crysmann, 2005).
Using ANC, index and handle ofeach and every NP are collected and passed up thetree, to be bound by an extraposed relative clauseattached to the same subclause.Again, we tested three different settings: full re-striction of all 3 anchor feature (SELF, ACTIVE, IN-ERT), no restriction, and partial retsriction, wherethe elements on the lists were restricted to *top*,thereby recording only the number of percolated an-chors, but not their nature in terms of index fea-tures.
ANC features encode derivation history in twoways: first, structurally higher anchors (NPs) arerepresented at the front of the list, whereas moredeeply embedded anchors are found further downthe list.
Second, to control for spurious attachments,only anchors inherited from a left daughter are ac-cessible for binding (ACTIVE), the others remain onthe INERT list.
Both the order of indices on the lists,list length and the distribution of anchors over AC-TIVE and INERT lists partially encode constituent-internal structure.Results of this experiment are summarised in ta-ble 3.Similar to our two previous experiments, en-tirely unrestricted ANC behaves worst, but nowherenearly as bad as having SLASH or DSL unrestricted.In fact, relative packing rates achieved by all threerestrictor settings are by and large the same inthis experiment.
The main difference between un-restricted ANC concerns the overall compactness ofthe forest and the number of subsumption test per-formed.Partial restriction already performs better than un-restricted ANC: since partially restricted ANC doesnot record the nature of the anchors, at least one wayin which derivation history is recorded is effectivelymasked.Contrary to our previous experiments, however,partial restriction does not outperform full restric-tion.
Although this finding comes somewhat at asurprise, there is nevertheless a straightforward ex-planation for the difference in behaviour: while fullrestriction necessarily improves chart compactness,the adverse effects of full restriction do not cometo bear as often as in the case of fully restrictedSLASH or DSL, since attachment of extraposed rel-ative clauses presupposes the existence of an al-ready constructed chart edge for the relative clause.In contrast to extraction and head movement, whichcan be found in practically every sentence-size testitem, distribution of relative clauses is comparativelylow.
Furthermore, constituents serving as fillers forSLASH or DSL dependencies can actually be quitesmall in size and different in shape, which increasesthe potential for overgeneration with fully restrictedmovement features.
Relative clauses, on the otherhand, are always clause-sized, and their propertiesdepend on the information percolated in ANC onlyto a very little degree (namely number and genderagreement of the relative pronoun).4 ConclusionIn this paper, we have explored the effects in thechoice of restrictor for HPSG parsing of Germanwith local ambiguity packing.
Based on initial ob-servation that a semantics-only restrictor gives sub-optimal runtime performance in packed parsing, wefound that three features representing discontinuitieswere mainly responsible for inefficiency with lo-cal ambiguity packing, namely SLASH for extrac-tion, DSL for head movement, and ANC for relativeclause extraposition, all of which may encode partof the derivation history.We have shown that partial restriction of SLASHand DSL features, together with full restrictionof ANC yields satisfactory parsing performance150Edges Time (s) Unpack (s) Subsumption ?
= < ?
Factor (time) Subs.
cost Pack rateUnfill 6424 0.56 0 0 0 0 0 0 1 N/A 0Partial ANC 1586 0.37 0.01 55392.34 319.35 232.28 51.34 608.51 0.66 91.87 0.38Full ANC 1704 0.58 0.01 104699.81 346.35 257.92 64.66 758.27 1.04 156.52 0.39No ANC 1494 0.28 0.01 36404.15 307.28 193.33 36.67 335.84 0.5 67.76 0.36Table 3: Performance of packed parsing with different restriction of ANCwith ambiguity packing, outperforming the a non-packing baseline parser with feature structure unfill-ing by a factor of 2.
Even more importantly, combi-natorial explosion at increasing input length is effec-tively tamed, such that performance gains improvewith longer input sentences.AcknowledgementThe research reported on in this paper has been car-ried out as part of the DFKI project Checkpoint,funded by the Federal State of Berlin and the EFREprogramme of the European Union.
I am also grate-fully indepted to Bernd Kiefer for his support of theruntime parser and his expert advice.
Many thanksalso to Ulrich Callmeier, Dan Flickinger, StefanMu?ller, Geert-Jan van Noord, and Stephan Oepen,for their comments and suggestions.ReferencesUlrich Callmeier.
2000.
PET ?
a platform for experi-mentation with efficient HPSG processing techniques.Journal of Natural Language Engineering, 6(1):99?108.Ann Copestake and Dan Flickinger.
2000.
An open-source grammar development environment and broad-coverage English grammar using HPSG.
In Proceed-ings of the Second conference on Language Resourcesand Evaluation (LREC-2000), Athens.Berthold Crysmann.
2003.
On the efficient implemen-tation of German verb placement in HPSG.
In Pro-ceedings of RANLP 2003, pages 112?116, Borovets,Bulgaria.Berthold Crysmann.
2005.
Relative clause extrapositionin German: An efficient and portable implementation.Research on Language and Computation, 3(1):61?82.J.
Earley.
1970.
An efficient context-free parsing algo-rithm.
Communications of the ACM, 13(2):94?102.E.
Hinrichs and T. Nakazawa.
1990.
Subcategorizationand VP structure in German.
In Hughes, Shaun, andSalmons, editors, Proceedings of the Third Symposiumon Germanic Linguistics, Amsterdam.
Benjamins.Tibor Kiss and Birgit Wesche.
1991.
Verb orderand head movement.
In Otthein Herzog and Claus-Rolf Rollinger, editors, Text Understanding in LILOG,number 546 in Lecture Notes in Artificial Intelligence,pages 216?240.
Springer-Verlag, Berlin.Tibor Kiss.
2005.
Semantic constraints on relative clauseextraposition.
Natural Language and Linguistic The-ory, 23:281?334.John T. Maxwell and Ronald M. Kaplan.
1995.
Amethod for disjunctive constraint satisfaction.
In MaryDalrymple, Ronald M. Kaplan, John T. Maxwell, III,and Annie Zaenen, editors, Formal Issues in Lexical-Functional Grammar, pages 381?401, Stanford Uni-versity.
CSLI.R.
C Moore and H. Alshawi.
1992.
Syntactic and seman-tic processing.
In H. Alshawi, editor, The Core Lan-guage Engine, pages 129?148.
The MIT Press, Cam-bridge, MA.Stefan Mu?ller and Walter Kasper.
2000.
HPSG analy-sis of German.
In Wolfgang Wahlster, editor, Verb-mobil: Foundations of Speech-to-Speech Translation,pages 238?253.
Springer, Berlin.Stefan Mu?ller.
1999.
Deutsche Syntax ?
deklarativ.Linguistische Arbeiten.
Niemeyer, Tu?bingen.John Nerbonne.
1994.
Partial verb phrases and spu-rious ambiguities.
In John Nerbonne, Klaus Netter,and Carl Pollard, editors, German in Head-DrivenPhrase Structure Grammar, number 46 in LectureNotes, pages 109?150.
CSLI Publications, StanfordUniversity.Stephan Oepen and John Carroll.
2000.
Ambiguity pack-ing in constraint-based parsing - practical results.
InProceedings of the 1st Conference of the North Ameri-can Chapter of the Association for Computational Lin-guistics, pages 162?169, Seattle, WA.Stephan Oepen and Dan Flickinger.
1998.
Towards sys-tematic grammar profiling.
test suite technology tenyears after.
Journal of Computer Speech and Lan-guage, 12:411?436.Stuart Shieber.
1985.
Using restriction to extend pars-ing algorithms for complex feature-based formalisms.In Proceedings of 23rd meeting of the Association ofComputational Linguistics, pages 145?152, Chicago,IL.151
