Proceedings of the Workshop on A Broader Perspective on Multiword Expressions, pages 65?72,Prague, June 2007. c?2007 Association for Computational LinguisticsLearning Dependency Relations ofJapanese Compound Functional ExpressionsTakehito Utsuro?
and Takao Shime?
and Masatoshi Tsuchiya?
?Suguru Matsuyoshi??
and Satoshi Sato??
?Graduate School of Systems and Information Engineering, University of Tsukuba,1-1-1, Tennodai, Tsukuba, 305-8573, JAPAN?NEC Corporation?
?Computer Center, Toyohashi University of Technology,Tenpaku-cho, Toyohashi, 441?8580, JAPAN?
?Graduate School of Engineering, Nagoya University,Furo-cho, Chikusa-ku, Nagoya, 464?8603, JAPANAbstractThis paper proposes an approach of process-ing Japanese compound functional expressionsby identifying them and analyzing their depen-dency relations through a machine learning tech-nique.
First, we formalize the task of identify-ing Japanese compound functional expressionsin a text as a machine learning based chunkingproblem.
Next, against the results of identify-ing compound functional expressions, we applythe method of dependency analysis based on thecascaded chunking model.
The results of ex-perimental evaluation show that, the dependencyanalysis model achieves improvements when ap-plied after identifying compound functional ex-pressions, compared with the case where it is ap-plied without identifying compound functionalexpressions.1 IntroductionIn addition to single functional words, the Japaneselanguage has many more compound functional ex-pressions which consist of more than one word in-cluding both content words and functional words.They are very important for recognizing syntacticstructures of Japanese sentences and for understand-ing their semantic content.
Recognition and under-standing of them are also very important for vari-ous kinds of NLP applications such as dialogue sys-tems, machine translation, and question answering.However, recognition and semantic interpretation ofcompound functional expressions are especially dif-ficult because it often happens that one compoundexpression may have both a literal (i.e.
compo-sitional) content word usage and a non-literal (i.e.non-compositional) functional usage.For example, Table 1 shows two example sen-tences of a compound expression ??
(ni) ???
(tsuite)?, which consists of a post-positional particle??
(ni)?, and a conjugated form ????
(tsuite)?
ofa verb ???
(tsuku)?.
In the sentence (A), the com-pound expression functions as a case-marking parti-cle and has a non-compositional functional meaning?about?.
On the other hand, in the sentence (B), theexpression simply corresponds to a literal concate-nation of the usages of the constituents: the post-positional particle ??
(ni)?
and the verb ????
(tsuite)?, and has a content word meaning ?follow?.Therefore, when considering machine translation ofthese Japanese sentences into English, it is neces-sary to judge precisely the usage of the compoundexpression ??
(ni)???
(tsuite)?, as shown in theEnglish translation of the two sentences in Table 1.There exist widely-used Japanese text processingtools, i.e.
combinations of a morphological analy-sis tool and a subsequent parsing tool, such as JU-MAN1+ KNP2 and ChaSen3+ CaboCha4.
However,they process those compound expressions only par-tially, in that their morphological analysis dictionar-ies list only a limited number of compound expres-sions.
Furthermore, even if certain expressions arelisted in a morphological analysis dictionary, thoseexisting tools often fail in resolving the ambigui-1http://nlp.kuee.kyoto-u.ac.jp/nl-resource/juman-e.html2http://nlp.kuee.kyoto-u.ac.jp/nl-resource/knp-e.html3http://chasen.naist.jp/hiki/ChaSen/4http://chasen.org/?taku/software/cabocha/65?
(watashi) ?
(ha) ?
(kare) ?
(ni)???
(tsuite) ???
(hanashita)(A) (I) (TOP) (he) (about) (talked)(I talked about him.)?
(watashi) ?
(ha) ?
(kare) ?
(ni) ???
(tsuite) ???
(hashitta)(B) (I) (TOP) (he) (ACC) (follow) (ran)(I ran following him.
)Table 1: Translation Selection of a Japanese Compound Expression ??
(ni)???
(tsuite)?Correct English Translation:( As a means of solving the problem, USA recommended the activity of OSCE in which Russia participates.
)(1) Correct Dependency Relation by Identifying Compound Functional Expression: ?????
?with a Case Marking Particle Usage.
(2)  Incorrect Dependency Relation without Identifying Compound Functional Expression: ?????
?,which Literally Consists of a Post-positional Particle ???
(with) and a Conjugation Form ???
?of a Verb ????
(do).???
????
?
???
???
?
??
??
??
?????????
???
????
?USA-TOP as a means for solution       Russia-NOM also             participate in                                of  OSCE activity-ACC          recommended???
????
?
???
???
?
??
??
??
?????????
???
????
?USA-TOP with a means for Russia-NOM also             participate in                            of  OSCE activity-ACC       recommendedsolutionFigure 1: Example of Improving Dependency Analysis of Compound Functional Expressions by Identifyingthem before Dependency Analysisties of their usages, such as those in Table 1.
Thisis mainly because the framework of these existingtools is not designed so as to resolve such ambigu-ities of compound (possibly functional) expressionsby carefully considering the context of those expres-sions.Actually, as we introduce in the next section, as afirst step towards studying computational processingof compound functional expressions, we start with125 major functional expressions which have non-compositional usages, as well as their variants (337expressions in total).
Out of those 337 expressions,111 have both a content word usage and a functionalusage.
However, the combination of JUMAN+KNPis capable of distinguishing the two usages only for43 of the 111 expressions, and the combination ofChaSen+CaboCha only for 40 of those 111 expres-sions.
Furthermore, the failure in distinguishing thetwo usages may cause errors of syntactic analysis.For example, (1) of Figure 1 gives an example ofidentifying a correct modifiee of the second bunsetsusegment 5 ????????
(as a means for solu-tion)?
including a Japanese compound functional ex-pression ????
(as)?, by appropriately detectingthe compound functional expression before depen-dency analysis.
On the other hand, (2) of Figure 1gives an example of incorrectly indicating an erro-neous modifiee of the third bunsetsu ???
?, whichactually happens if we do not identify the compoundfunctional expression ????
(as)?
before depen-dency analysis of this sentence.Considering such a situation, it is necessary todevelop a tool which properly recognizes and se-mantically interprets Japanese compound functionalexpressions.
This paper proposes an approach ofprocessing Japanese compound functional expres-sions by identifying them and analyzing their de-pendency relations through a machine learning tech-nique.
The overall flow of processing compoundfunctional expressions in a Japanese sentence is il-5A Japanese bunsetsu segment is a phrasal unit which con-sits of at least one content word and zero or more functionalwords.66( As a means of solving theproblem, USA recommended theactivity of OSCE in which Russiaparticipates.)????????????????????????????????????????(solution)??(means)?(with)?(do)?(and)?
?
??
?
???(solution)??(means)???(as)?
?
??
?
???(solution)??(means)???(as)?
?
??
?
?morphologicalanalysisby ChaSen??(solution)??(means)?(with)?(do)?(and)?
?
??
?
?compoundfunctionalexpressionIdentifyingcompoundfunctionalexpressionchunkingbunsetsusegmentation&dependencyanalysisbunsetsusegmentdependencyrelationFigure 2: Overall Flow of Processing Compound Functional Expressions in a Japanese Sentencelustrated in Figure 2.
First of all, we assume asequence of morphemes obtained by a variant ofChaSen with all the compound functional expres-sions removed from its outputs, as an input to ourprocedure of identifying compound functional ex-pressions and analyzing their dependency relations.We formalize the task of identifying Japanese com-pound functional expressions in a text as a machinelearning based chunking problem (Tsuchiya et al,2006).
We employ the technique of Support Vec-tor Machines (SVMs) (Vapnik, 1998) as the ma-chine learning technique, which has been success-fully applied to various natural language process-ing tasks including chunking tasks such as phrasechunking and named entity chunking.
Next, againstthe results of identifying compound functional ex-pressions, we apply the method of dependency anal-ysis based on the cascaded chunking model (Kudoand Matsumoto, 2002), which is simple and efficientbecause it parses a sentence deterministically onlydeciding whether the current bunsetsu segment mod-ifies the one on its immediate right hand side.
Aswe showed in Figure 1, identifying compound func-tional expressions before analyzing dependencies ina sentence does actually help deciding dependencyrelations of compound functional expressions.In the experimental evaluation, we focus on 59expressions having balanced distribution of their us-ages in the newspaper text corpus and are among themost difficult ones in terms of their identification ina text.
We first show that the proposed method ofchunking compound functional expressions signifi-cantly outperforms existing Japanese text processingtools.
Next, we further show that the dependencyanalysis model of (Kudo and Matsumoto, 2002) ap-plied to the results of identifying compound func-tional expressions significantly outperforms the oneapplied to the results without identifying compoundfunctional expressions.2 Japanese Compound FunctionalExpressionsThere exist several collections which list Japanesefunctional expressions and examine their usages.For example, (Morita and Matsuki, 1989) exam-ine 450 functional expressions and (Group Jamashii,1998) also lists 965 expressions and their examplesentences.
Compared with those two collections,Gendaigo Hukugouji Youreishu (National LanguageResearch Institute, 2001) (henceforth, denoted asGHY) concentrates on 125 major functional expres-sions which have non-compositional usages, as wellas their variants6, and collects example sentences ofthose expressions.
As we mentioned in the previoussection, as a first step towards developing a tool foridentifying Japanese compound functional expres-sions, we start with those 125 major functional ex-pressions and their variants (337 expressions in to-6For each of those 125 major expressions, the differencesbetween it and its variants are summarized as below: i) inser-tion/deletion/alternation of certain particles, ii) alternation ofsynonymous words, iii) normal/honorific/conversational forms,iv) base/adnominal/negative forms.67(a) Classification of Compound Functional Expressions based on Grammatical FunctionGrammatical Function Type # of major expressions # of variants Examplepost-positional conjunctive particle 36 67 ???
(kuse-ni)particle type case-marking particle 45 121 ???
(to-shite)adnominal particle 2 3 ???
(to-iu)auxiliary verb type 42 146 ???
(te-ii)total 125 337 ?
(b) Examples of Classifying Functional/Content UsagesExpression Example sentence (English translation) Usage(1) ???
???????
???
????????????????
functional(kuse-ni) (To my brother, (someone) gave money, while (he/she) did noth-ing to me but just sent a letter.)(???
(kuse-ni) = while)(2) ???
????
???
???????
content(kuse-ni) (They all were surprised by his habit.)
(????
(kuse-ni)= by one?s habit(3) ???
??????????
???
???????
functional(to-shite) (He is known as an expert of the problem.)
(????
(to-shite)= as ?
)(4) ???
??????????????
???
????
content(to-shite) (Please make it clear whether this is true or not.)
(??
????
(to-shite)= make ?
?
(5) ???
???????
???
????????
functional(to-iu) (I heard that he is alive.)
(????
(to-iu) = that ?
)(6) ???
??????????
???
?????
content(to-iu) (Somebody says ?Please visit us.?.)
(????
(to-iu)= say (that) ?
)(7) ???
????????????
???
?
functional(te-ii) (You may have a break after we finish this discussion.)
(????
(te-ii) = may ?
)(8) ???
?????????
???
?
content(te-ii) (This bag is nice because it is big.)
(????
(te-ii)= nice because ?
)Table 2: Classification and Example Usages of Compound Functional Expressionstal).
In this paper, following (Sag et al, 2002), weregard each variant as a fixed expression, rather thana semi-fixed expression or a syntactically-flexibleexpression 7.
Then, we focus on evaluating theeffectiveness of straightforwardly applying a stan-dard chunking technique to the task of identifyingJapanese compound functional expressions.As in Table 2 (a), according to their grammat-ical functions, those 337 expressions in total areroughly classified into post-positional particle type,and auxiliary verb type.
Functional expressions ofpost-positional particle type are further classifiedinto three subtypes: i) conjunctive particle types,which are used for constructing subordinate clauses,ii) case-marking particle types, iii) adnominal parti-cle types, which are used for constructing adnominal7Compound functional expressions of auxiliary verb typescan be regarded as syntactically-flexible expressions.clauses.
Furthermore, for examples of compoundfunctional expressions listed in Table 2 (a), Table 2(b) gives their example sentences as well as the de-scription of their usages.3 Identifying Compound FunctionalExpressions by Chunking with SVMsThis section describes summaries of formalizing thechunking task using SVMs (Tsuchiya et al, 2006).In this paper, we use an SVMs-based chunking toolYamCha8 (Kudo and Matsumoto, 2001).
In theSVMs-based chunking framework, SVMs are usedas classifiers for assigning labels for representingchunks to each token.
In our task of chunkingJapanese compound functional expressions, each8http://chasen.org/?taku/software/yamcha/68sentence is represented as a sequence of morphemes,where a morpheme is regarded as a token.3.1 Chunk RepresentationFor representing proper chunks, we employ IOB2representation, which has been studied well in var-ious chunking tasks of natural language processing.This method uses the following set of three labelsfor representing proper chunks.I Current token is a middle or the end of achunk consisting of more than one token.O Current token is outside of any chunk.B Current token is the beginning of a chunk.Given a candidate expression, we classify the us-ages of the expression into two classes: functionaland content.
Accordingly, we distinguish the chunksof the two types: the functional type chunk and thecontent type chunk.
In total, we have the follow-ing five labels for representing those chunks: B-functional, I-functional, B-content, I-content, andO.
Finally, as for extending SVMs to multi-classclassifiers, we experimentally compare the pairwisemethod and the one vs. rest method, where the pair-wise method slightly outperformed the one vs. restmethod.
Throughout the paper, we show results withthe pairwise method.3.2 FeaturesFor the feature sets for training/testing of SVMs, weuse the information available in the surrounding con-text, such as the morphemes, their parts-of-speechtags, as well as the chunk labels.
More precisely,suppose that we identify the chunk label cifor thei-th morpheme:??
Parsing Direction ?
?Morpheme mi?2mi?1mimi+1mi+2Feature set Fi?2Fi?1FiFi+1Fi+2at a positionChunk label ci?2ci?1ciHere, miis the morpheme appearing at i-th posi-tion, Fiis the feature set at i-th position, and ciisthe chunk label for i-th morpheme.
Roughly speak-ing, when identifying the chunk label cifor the i-thmorpheme, we use the feature sets Fi?2, Fi?1, Fi,Fi+1, Fi+2at the positions i ?
2, i ?
1, i, i + 1,i+2, as well as the preceding two chunk labels ci?2and ci?1.
The detailed definition of the feature setFiat i-th position is given in (Tsuchiya et al, 2006),which mainly consists of morphemes as well as in-formation on the candidate compound functional ex-pression at i-th position.4 Learning Dependency Relations ofJapanese Compound FunctionalExpressions4.1 Japanese Dependency Analysis usingCascaded Chunking4.1.1 Cascaded Chunking ModelFirst of all, we define a Japanese sen-tence as a sequence of bunsetsu segmentsB = ?b1, b2, .
.
.
, bm?
and its syntactic struc-ture as a sequence of dependency patternsD = ?Dep(1), Dep(2), .
.
.
, Dep(m ?
1)?, whereDep(i) = j means that the bunsetsu segment bidepends on (modifies) bunsetsu segment bj.
Inthis framework, we assume that the dependencysequence D satisfies the following two constraints:1.
Japanese is a head-final language.
Thus, exceptfor the rightmost one, each bunsetsu segmentmodifies exactly one bunsetsu segment amongthose appearing to its right.2.
Dependencies do not cross one another.Unlike probabilistic dependency analysis modelsof Japanese, the cascaded chunking model of Kudoand Matsumoto (2002) does not require the proba-bilities of dependencies and parses a sentence de-terministically.
Since Japanese is a head-final lan-guage, and the chunking can be regarded as the cre-ation of a dependency between two bunsetsu seg-ments, this model simplifies the process of Japanesedependency analysis as follows: 91.
Put an O tag on all bunsetsu segments.
The Otag indicates that the dependency relation of thecurrent segment is undecided.2.
For each bunsetsu segment with an O tag, de-cide whether it modifies the bunsetsu segmenton its immediate right hand side.
If so, the Otag is replaced with a D tag.3.
Delete all bunsetsu segments with a D tag thatimmediately follows a bunsetsu segment withan O tag.9The O and D tags used in this section have no relation tothose chunk reppresentation tags introduced in section 3.1.69Initialization??
???
???
???
?????
( He was moved by her warm heart.
)He her warm heart be movedInput:Tag:??
???
???
???
????
?O O O O OInput:Tag:??
???
???
???
????
?O O D D ODeletedInput:Tag:??
???
???
????
?O D D ODeletedInput:Tag:??
???
????
?O D OInput:Tag:??
?????ODeletedInput:Tag:????
?OFinishDDeletedFigure 3: Example of the Parsing Process with Cas-caded Chunking Model4.
Terminate the algorithm if a single bunsetsusegment remains, otherwise return to the step2 and repeat.Figure 3 shows an example of the parsing processwith the cascaded chunking model.4.1.2 FeaturesAs a Japanese dependency analyzer based on thecascaded chunking model, we use the publicly avail-able version of CaboCha (Kudo and Matsumoto,2002), which is trained with the manually parsedsentences of Kyoto text corpus (Kurohashi and Na-gao, 1998), that are 38,400 sentences selected fromthe 1995 Mainichi newspaper text.The standard feature set used by CaboCha con-sists of static features and dynamic features.
Staticfeatures are those solely defined once the pairof modifier/modifiee bunsetsu segments is speci-fied.
For the pair of modifier/modifiee bunsetsusegments, the following are used as static fea-tures: head words and their parts-of-speech tags,inflection-types/forms, functional words and theirparts-of-speech tags, inflection-types/forms, inflec-tion forms of the words that appear at the endof bunsetsu segments.
As for features betweenmodifier/modifiee bunsetsu segments, the distanceof modifier/modifiee bunsetsu segments, existenceof case-particles, brackets, quotation-marks, andpunctuation-marks are used as static features.
On theother hand, dynamic features are created during theparsing process, so that, when a certain dependencyrelation is determined, it can have some influenceon other dependency relations.
Dynamic features in-clude bunsetsu segments modifying the current can-didate modifiee (see Kudo and Matsumoto (2002)for the details).4.2 Coping with Compound FunctionalExpressionsAs we show in Figure 2, a compound functional ex-pression is identified as a sequence of several mor-phemes and then chunked into one morpheme.
Theresult of this identification process is then trans-formed into the sequence of bunsetsu segments.
Fi-nally, to this modified sequence of bunsetsu seg-ments, the method of dependency analysis based onthe cascaded chunking model is applied.Here, when chunking a sequence of several mor-phemes constituting a compound functional expres-sion, the following two cases may exist:(A) As in the case of the example (A) in Table 1, thetwo morphemes constituting a compound func-tional expression ??
(ni)???
(tsuite)?
over-laps the boundary of two bunsetsu segments.In such a case, when chunking the two mor-phemes into one morpheme corresponding toa compound functional expression, those twobunsetsu segments are concatenated into onebunsetsu segment.?
?kare ni(he)???tsuite=??
???
?kare ni-tsuite(he) (about)(B) As we show below, a compound functional ex-pression ???
(koto)?
(ga)??
(aru)?
over-laps the boundary of two bunsetsu segments,though the two bunsetsu segments concatenat-ing into one bunsetsu segment does include nocontent words.
In such a case, its immedi-ate left bunsetsu segment (???(itt)?
(ta)?
inthe example below), which corresponds to thecontent word part of ???
(koto)?
(ga)??
(aru)?, has to be concatenated into the bunsetsusegment ???
(koto)?
(ga)??
(aru)?.70??
?itt ta(went)??
?koto ga??aru=???
?
????
?itt ta koto-ga-aru(have been ?
)Next, to the compound functional expression, weassign one of the four grammatical function typeslisted in Table 2 as its POS tag.
For example,the compound functional expression ??
(ni)???(tsuite)?
in (A) above is assigned the grammaticalfunction type ?case-marking particle type?, while ???
(koto) ?
(ga) ??
(aru)?
in (B) is assigned?auxiliary verb type?.These modifications cause differences in the finalfeature representations.
For example, let us comparethe feature representations of the modifier bunsetsusegments in (1) and (2) of Figure 1.
In (1), the mod-ifier bunsetsu segment is ?????????
whichhas the compound functional expression ????
?in its functional word part.
On the other hand, in(2), the modifier bunsetsu segment is ???
?, whichcorresponds to the literal verb usage of a part of thecompound functional expression ?????.
In thefinal feature representations below, this causes thefollowing differences in head words and functionalwords / POS of the modifier bunsetsu segments:(1) of Figure 1 (2) of Figure 1head word ??
(means) ??
(do)functional word ???
(as) ?
(and)POS subsequent to nominal conjunctive/ modifying predicate particle5 Experimental Evaluation5.1 Training/Test Data SetsFor the training of chunking compound functionalexpressions, we collected 2,429 example sentencesfrom the 1995 Mainichi newspaper text corpus.
Foreach of the 59 compound functional expressions forevaluation mentioned in section 1, at least 50 ex-amples are included in this training set.
For thetesting of chunking compound functional expres-sions, as well as training/testing of learning depen-dencies of compound functional expressions, weused manually-parsed sentences of Kyoto text cor-pus (Kurohashi and Nagao, 1998), that are 38,400sentences selected from the 1995 Mainichi newspa-per text (the 2,429 sentences above are selected sothat they are exclusive of the 37,400 sentences ofKyoto text corpus.).
To those data sets, we manuallyannotate usage labels of the 59 compound functionalexpressions (details in Table 3).Usages # offunctional content total sentencesfor chunkertraining 1918 1165 3083 2429Kyoto text corpus 5744 1959 7703 38400Table 3: Statistics of Data SetsIdentifyingfunctional chunksAcc.
ofclassifyingfunctional /contentPrec.
Rec.
F?=1chunksmajority ( = functional) 74.6 100 85.5 74.6Juman/KNP 85.8 40.5 55.0 58.4ChaSen/CaboCha 85.2 26.7 40.6 51.1SVM 91.4 94.6 92.9 89.3Table 4: Evaluation Results of Chunking (%)5.2 ChunkingAs we show in Table 4, performance of our SVMs-based chunkers as well as several baselines includ-ing existing Japanese text processing tools is evalu-ated in terms of precision/recall/F?=1of identifyingall the 5,744 functional chunks included in the testdata (Kyoto text corpus in Table 3).
Performance isevaluated also in terms of accuracy of classifying de-tected candidate expressions into functional/contentchunks.
Among those baselines, ?majority ( = func-tional)?
always assigns functional usage to the de-tected candidate expressions.
Performance of ourSVMs-based chunkers is measured through 10-foldcross validation.
Our SVMs-based chunker signif-icantly outperforms those baselines both in F?=1and classification accuracy.
As we mentioned insection 1, existing Japanese text processing toolsprocess compound functional expressions only par-tially, which causes damage in recall in Table 4.5.3 Analyzing Dependency RelationsWe evaluate the accuracies of judging dependencyrelations of compound functional expressions by thevariant of CaboCha trained with Kyoto text cor-pus annotated with usage labels of compound func-tional expressions.
This performance is measuredthrough 10-fold cross validation with the modifiedversion of the Kyoto text corpus.
In the evaluationphase, according to the flow of Figure 2, first we ap-ply the chunker of compound functional expressionstrained with all the 2,429 sentences in Table 3 andobtain the results of chunked compound functionalexpressions with about 90% correct rate.
Then, bun-setsu segmentation and dependency analysis are per-71modifier modifieebaselines CaboCha (w/o FE) 72.5 88.0CaboCha (public) 73.9 87.6chunker + CaboCha (proposed) 74.0 88.0reference + CaboCha (proposed) 74.4 88.1Table 5: Accuracies of Identifying Modi-fier(s)/Modifiee (%)formed by our variant of CaboCha, where accu-racies of identifying modifier(s)/modifiee of com-pound functional expressions are measured as in Ta-ble 5 (?chunker + CaboCha (proposed)?
denotes thatinputs to CaboCha (proposed) are with 90% correctrate, while ?reference + CaboCha (proposed)?
de-notes that they are with 100% correct rate).
Here,?CaboCha (w/o FE)?
denotes a baseline variant ofCaboCha, with all the compound functional expres-sions removed from its inputs (which are outputsfrom ChaSen), while ?CaoboCha (public)?
denotesthe publicly available version of CaboCha, whichhave some portion of the compound functional ex-pressions included in its inputs.For the modifier accuracy, the difference of?chunker + CaboCha (proposed)?
and ?CaboCha(w/o FE)?
is statistically significant at a level of0.05.
Identifying compound functional expressionstypically contributes to improvements when the lit-eral constituents of a compound functional expres-sion include a verb.
In such a case, for bunsetsusegments which usually modifies a verb, an incor-rect modifee candidate is removed, which results inimprovements in the modifier accuracy.
The dif-ference between ?CaoboCha (public)?
and ?chunker+ CaboCha (proposed)?
is slight because the pub-licly available version of CaboCha seems to includecompound functional expressions which are dam-aged in identifying their modifiers with ?CaboCha(w/o FE)?.
For the modifiee accuracy, the differenceof ?chunker + CaboCha (proposed)?
and ?CaboCha(w/o FE)?
is zero.
Here, more than 100 instances ofimprovements like the one in Figure 1 are observed,while almost the same number of additional fail-ures are also observed mainly because of the sparse-ness problem.
Furthermore, in the case of the modi-fiee accuracy, it is somehow difficult to expect im-provement because identifying modifiees of func-tional/content bunsetsu segments mostly depends onfeatures other than functional/content distinction.6 Concluding RemarksWe proposed an approach of processing Japanesecompound functional expressions by identifyingthem and analyzing their dependency relationsthrough a machine learning technique.
This ap-proach is novel in that it has never been appliedto any language so far.
Experimental evaluationshowed that the dependency analysis model appliedto the results of identifying compound functional ex-pressions significantly outperforms the one appliedto the results without identifying compound func-tional expressions.
The proposed framework has ad-vantages over an approach based on manually cre-ated rules such as the one in (Shudo et al, 2004), inthat it requires human cost to create manually andmaintain those rules.
Related works include Nivreand Nilsson (2004), which reports improvement ofSwedish parsing when multi word units are manu-ally annotated.ReferencesGroup Jamashii, editor.
1998.
Nihongo Bunkei Jiten.
KuroshioPublisher.
(in Japanese).T.
Kudo and Y. Matsumoto.
2001.
Chunking with support vec-tor machines.
In Proc.
2nd NAACL, pages 192?199.T.
Kudo and Y. Matsumoto.
2002.
Japanese dependency ana-lyisis using cascaded chunking.
In Proc.
6th CoNLL, pages63?69.S.
Kurohashi and M. Nagao.
1998.
Building a Japanese parsedcorpus while improving the parsing system.
In Proc.
1stLREC, pages 719?724.Y.
Morita and M. Matsuki.
1989.
Nihongo Hyougen Bunkei,volume 5 of NAFL Sensho.
ALC.
(in Japanese).National Language Research Institute.
2001.
Gendaigo Huku-gouji Youreishu.
(in Japanese).J.
Nivre and J. Nilsson.
2004.
Multiword units in syntacticparsing.
In Proc.
LRECWorkshop, Methodologies and Eval-uation of Multiword Units in Real-World Applications, pages39?46.I.
Sag, T. Baldwin, F. Bond, A. Copestake, and D. Flickinger.2002.
Multiword expressions: A pain in the neck for NLP.In Proc.
3rd CICLING, pages 1?15.K.
Shudo, T. Tanabe, M. Takahashi, and K. Yoshimura.
2004.MWEs as non-propositional content indicators.
In Proc.
2ndACL Workshop on Multiword Expressions: Integrating Pro-cessing, pages 32?39.M.
Tsuchiya, T. Shime, T. Takagi, T. Utsuro, K. Uchimoto,S.
Matsuyoshi, S. Sato, and S. Nakagawa.
2006.
Chunk-ing Japanese compound functional expressions by machinelearning.
In Proc.
Workshop on Multi-Word-Expressions ina Multilingual Context, pages 25?32.V.
N. Vapnik.
1998.
Statistical Learning Theory.
Wiley-Interscience.72
