An Indexing Scheme for Typed Feature StructuresTakashi NINOMIYA,??
Takaki MAKINO,#?
and Jun?ichi TSUJII??
?Department of Computer Science, University of Tokyo?CREST, Japan Science and Technology Corporation#Department of Complexity Science and Engineering, University of Tokyo?
?BSI, RIKENe-mail: {ninomi, mak, tsujii}@is.s.u-tokyo.ac.jpAbstractThis paper describes an indexing substrate for typedfeature structures (ISTFS), which is an efficient re-trieval engine for typed feature structures.
Given aset of typed feature structures, the ISTFS efficientlyretrieves its subset whose elements are unifiable orin a subsumption relation with a query feature struc-ture.
The efficiency of the ISTFS is achieved bycalculating a unifiability checking table prior to re-trieval and finding the best index paths dynami-cally.1 IntroductionThis paper describes an indexing substrate for typedfeature structures (ISTFS), which is an efficient re-trieval engine for typed feature structures (TFSs)(Carpenter, 1992).
Given a set of TFSs, the ISTFScan efficiently retrieve its subset whose elements areunifiable or in a subsumption relation with a queryTFS.The ultimate purpose of the substrate is aimed atthe construction of large-scale intelligent NLP sys-tems such as IR or QA systems based on unification-based grammar formalisms (Emele, 1994).
Recentstudies on QA systems (Harabagiu et al, 2001) haveshown that systems using a wide-coverage noun tax-onomy, quasi-logical form, and abductive inferenceoutperform other bag-of-words techniques in accu-racy.
Our ISTFS is an indexing substrate that en-ables such knowledge-based systems to keep andretrieve TFSs, which can represent symbolic struc-tures such as quasi-logical forms or a taxonomy andthe output of parsing of unification-based grammarsfor a very large set of documents.The algorithm for our ISTFS is concise and effi-cient.
The basic idea used in our algorithm uses anecessary condition for unification.
(Necessary condition for unification) Let PathFbe the set of all feature paths defined in?
This research is partially funded by JSPS Research Fellow-ship for Young Scientists.TFS F , and FollowedType(pi,F) be thetype assigned to the node reached by fol-lowing path pi .1 If two TFSs F and Gare unifiable, then FollowedType(pi,F) andFollowedType(pi,G) are defined and unifiablefor all pi ?
(PathF ?PathG).The Quick Check algorithm described in (Torisawaand Tsujii, 1995; Malouf et al, 2000) also usesthis condition for the efficient checking of unifia-bility between two TFSs.
Given two TFSs and stat-ically determined paths, the Quick Check algorithmcan efficiently determine whether these two TFSsare non-unifiable or there is some uncertainty abouttheir unifiability by checking the path values.
It isworth noting that this algorithm is used in manymodern unification grammar-based systems, e.g.,the LKB system (Copestake, 1999) and the PAGEsystem (Kiefer et al, 1999).Unlike the Quick Check algorithm, which checksunifiability between two TFSs, our ISTFS checksunifiability between one TFS and n TFSs.
TheISTFS checks unifiability by using dynamically de-termined paths, not statically determined paths.
Inour case, using only statically determined pathsmight extremely degrades the system performance.Suppose that any statically determined paths are notdefined in the query TFS.
Because there is no pathto be used for checking unifiability, it is required tounify a query with every element of the data set.
Itshould also be noted that using all paths defined ina query TFS severely degrades the system perfor-mance because a TFS is a huge data structure com-prised of hundreds of nodes and paths, i.e., most ofthe retrieval time will be consumed in filtering.
The1More precisely, FollowedType(pi,F) returns the type as-signed to the node reached by following pi from the root nodeof FSPAT H(pi,F), which is defined as follows.FSPAT H(pi,F) = F unionsqPV (pi)PV (pi) ={the least feature structure wherepath pi is definedThat is, FollowedType(pi,F) might be defined even if pi doesnot exist in F .ISTFS dynamically finds the index paths in order ofhighest filtering rate.
In the experiments, most ?non-unifiable?
TFSs were filtered out by using only a fewindex paths found by our optimization algorithm.2 AlgorithmBriefly, the algorithm for the ISTFS proceeds ac-cording to the following steps.1.
When a set of data TFSs is given, the ISTFSprepares a path value table and a unifiabilitychecking table in advance.2.
When a query TFS is given, the ISTFS re-trieves TFSs which are unifiable with the queryfrom the set of data TFSs by performing thefollowing steps.
(a) The ISTFS finds the index paths by usingthe unifiability checking table.
The indexpaths are the most restrictive paths in thequery in the sense that the set of the dataTFSs can be limited to the smallest one.
(b) The ISTFS filters out TFSs that are non-unifiable by referring to the values of theindex paths in the path value table.
(c) The ISTFS finds exactly unifiable TFSsby unifying the query and the remains offiltering one-by-one, in succession.This algorithm can also find the TFSs that arein the subsumption relation, i.e., more-specific ormore-general, by preparing subsumption checkingtables in the same way it prepared a unifiabilitychecking table.2.1 Preparing Path Value Table andUnifiability Checking TableLet D(= {F1,F2, .
.
.
,Fn}) be the set of data TFSs.When D is given, the ISTFS prepares two tables, apath value table Dpi,?
and a unifiability checking ta-ble Upi,?
, for all pi ?
PathD and ?
?
Type.
2 ATFS might have a cycle in its graph structure.
Inthat case, a set of paths becomes infinite.
Fortu-nately, our algorithm works correctly even if the setof paths is a subset of all existing paths.
Therefore,paths which might cause an infinite set can be re-moved from the path set.
We define the path valuetable and the unifiability checking table as follows:Dpi,?
?
{F |F ?D ?
FollowedType(pi,F) = ?}Upi,?
?
??(?
?Type ?
?unionsq?
is defined)|Dpi,?
|2Type is a finite set of types.Assuming that ?
is the type of the node reached byfollowing pi in a query TFS, we can limit D to asmaller set by filtering out ?non-unifiable?
TFSs.
Wehave the smaller set:U ?pi,?
???(?
?Type ?
?unionsq?
is defined)Dpi,?Upi,?
corresponds to the size of U ?pi,?
.
Note that theISTFS does not prepare a table of U ?pi,?
statically, butjust prepares a table of Upi,?
whose elements are in-tegers.
This is because the system?s memory wouldeasily be exhausted if we actually made a table ofU ?pi,?
.
Instead, the ISTFS finds the best paths by re-ferring to Upi,?
and calculates only U ?pi,?
where pi isthe best index path.Suppose the type hierarchy and D depicted inFigure 1 are given.
The tables in Figure 2 show Dpi,?and Upi,?
calculated from Figure 1.2.2 RetrievalIn what follows, we suppose that D was given, andwe have already calculated Dpi,?
and Upi,?
.Finding Index PathsThe best index path is the most restrictive path in thequery in the sense thatD can be limited to the small-est set by referring to the type of the node reachedby following the index path in the query.Suppose a query TFS X and a constant k, which isthe maximum number of index paths, are given.
Thebest index path in PathX is path pi such that Upi,?
isminimum where ?
is the type of the node reachedby following pi from the root node of X .
We canalso find the second best index path by finding thepath pi s.t.
Upi,?
is the second smallest.
In the sameway, we can find the i-th best index path s.t.
i ?
k.FilteringSuppose k best index paths have already been cal-culated.
Given an index path pi , let ?
be the type ofthe node reached by following pi in the query.
Anelement of D that is unifiable with the query musthave a node that can be reached by following pi andwhose type is unifiable with ?
.
Such TFSs (=U ?pi,?
)can be collected by taking the union of Dpi,?
, where?
is unifiable with ?
.
For each index path, U ?pi,?can be calculated, and the D can be limited to thesmaller one by taking their intersection.
After filter-ing, the ISTFS can find exactly unifiable TFSs byunifying the query with the remains of filtering oneby one.Suppose the type hierarchy and D in Figure 1 are?   ??????
?   :CDR:CARF1 =????
?consCAR: 1CDR:?
?consCAR: 2CDR:[ consCAR: 3CDR: nil]??????
?F2 =[ consCAR: 4CDR: nil],F3 =?
?consCAR: 5CDR:[ consCAR: 6CDR: nil]?
?D = {F1,F2,F3}Figure 1: An example of a type hierarchy and TFSsDpi,?
?pi ?
integer 1 2 3 4 5 6 list cons nil?
?
?
?
?
?
?
?
?
?
{F1,F2 ,F3} ?CAR: ?
?
{F1} ?
?
{F2} {F3} ?
?
?CDR: ?
?
?
?
?
?
?
?
?
{F1 ,F3} {F2}CDR:CAR: ?
?
?
{F1} ?
?
?
{F3} ?
?
?CDR:CDR: ?
?
?
?
?
?
?
?
?
{F1} {F3}CDR:CDR:CAR: ?
?
?
?
{F1} ?
?
?
?
?
?CDR:CDR:CDR: ?
?
?
?
?
?
?
?
?
?
{F1}?
is an empty set.Upi,?
?pi ?
integer 1 2 3 4 5 6 list cons nil?
3 0 0 0 0 0 0 0 3 *3 0CAR: 3 *3 1 0 0 1 1 0 0 0 0CDR: 3 0 0 0 0 0 0 0 3 *2 1CDR:CAR: 2 2 0 1 0 0 0 *1 0 0 0CDR:CDR: 2 0 0 0 0 0 0 0 *2 1 1CDR:CDR:CAR: 1 1 0 0 1 0 0 0 0 0 0CDR:CDR:CDR: 1 0 0 0 0 0 0 0 1 0 1Figure 2: An example of Dpi,?
and Upi,?QuerySetA QuerySetB# of the data TFSs 249,994 249,994Avg.
# of unifiables 68,331.58 1,310.70Avg.
# of more specifics 66,301.37 0.00Avg.
# of more generals 0.00 0.00Table 1: The average number of data TFSs and an-swers for QuerySetA and QuerySetBgiven, and the following query X is given:X =?
?consCAR: integerCDR:[ consCAR: 6CDR: list]?
?In Figure 2, Upi,?
where the pi and ?
pair exists inthe query is indicated with an asterisk.
The best in-dex paths are determined in ascending order of Upi,?indicated with an asterisk in the figure.
In this ex-ample, the best index path is CDR:CAR: and its corre-sponding type in the query is 6.
Therefore the unifi-able TFS can be found by referring to DCDR:CAR:,6,and this is {F3}.3 Performance EvaluationWe measured the performance of the ISTFS on aIBM xSeries 330 with a 1.26-GHz PentiumIII pro-cessor and a 4-GB memory.
The data set consist-ing of 249,994 TFSs was generated by parsing the                            	Figure 3: The size of Dpi,?
for the size of the dataset800 bracketed sentences in the Wall Street Journalcorpus (the first 800 sentences in Wall Street Jour-nal 00) in the Penn Treebank (Marcus et al, 1993)with the XHPSG grammar (Tateisi et al, 1998).
Thesize of the data set was 151 MB.
We also generatedtwo sets of query TFSs by parsing five randomlyselected sentences in the Wall Street Journal cor-pus (QuerySetA and QuerySetB).
Each set had 100query TFSs.
Each element of QuerySetA was thedaughter part of the grammar rules.
Each element ofQuerySetB was the right daughter part of the gram-mar rules whose left daughter part is instantiated.Table 1 shows the number of data TFSs and the av-erage number of unifiable, more-specific and more-general TFSs for QuerySetA and QuerySetB.
Thetotal time for generating the index tables (i.e., a setof paths, the path value table (Dpi,?
), the unifiabil-ity checking table (Upi,?
), and the two subsumptionchecking tables) was 102.59 seconds.
The size ofthe path value table was 972 MByte, and the size ofthe unifiability checking table and the two subsump-tion checking tables was 13 MByte.
The size of theunifiability and subsumption checking tables is neg-ligible in comparison with that of the path value ta-ble.
Figure 3 shows the growth of the size of thepath value table for the size of the data set.
As seenin the figure, it grows proportionally.Figures 4, 5 and 6 show the results of retrievaltime for finding unifiable TFSs, more-specific TFSsand more-general TFSs respectively.
In the figures,the X-axis shows the number of index paths thatare used for limiting the data set.
The ideal timemeans the unification time when the filtering rate is100%, i.e., our algorithm cannot achieve higher ef-ficiency than this optimum.
The overall time is thesum of the filtering time and the unification time.As illustrated in the figures, using one to ten indexpaths achieves the best performance.
The ISTFSachieved 2.84 times speed-ups in finding unifiablesfor QuerySetA, and 37.90 times speed-ups in find-ing unifiables for QuerySetB.Figure 7 plots the filtering rate.
In finding unifi-able TFSs in QuerySetA, more than 95% of non-unifiable TFSs are filtered out by using only threeindex paths.
In the case of QuerySetB, more than98% of non-unifiable TFSs are filtered out by usingonly one index path.4 DiscussionOur approach is said to be a variation of path in-dexing.
Path indexing has been extensively studiedin the field of automated reasoning, declarative pro-gramming and deductive databases for term index-ing (Sekar et al, 2001), and was also studied in thefield of XML databases (Yoshikawa et al, 2001).
Inpath indexing, all existing paths in the database arefirst enumerated, and then an index for each path isprepared.
Other existing algorithms differed fromours in i) data structures and ii) query optimization.In terms of data structures, our algorithm deals withtyped feature structures while their algorithms dealwith PROLOG terms, i.e., variables and instanti-ated terms.
Since a type matches not only the sametype or variables but unifiable types, our problem ismuch more complicated.
Yet, in our system, hierar-chical relations like a taxonomy can easily be repre-sented by types.
In terms of query optimization, ouralgorithm dynamically selects index paths to mini-mize the searching cost.
Basically, their algorithmstake an intersection of candidates for all paths in aquery, or just limiting the length of paths (McCune,2001).
Because such a set of paths often containsmany paths ineffective for limiting answers, our ap-proach should be more efficient than theirs.5 Conclusion and Future WorkWe developed an efficient retrieval engine for TFSs,ISTFS.
The efficiency of ISTFS is achieved by cal-culating a unifiability checking table prior to re-trieval and finding the best index paths dynamically.In future work, we are going to 1) minimize thesize of the index tables, 2) develop a feature struc-ture DBMS on a second storage, and 3) incorporatestructure-sharing information into the index tables.ReferencesB.
Carpenter.
1992.
The Logic of Typed Feature Struc-tures.
Cambridge University Press, Cambridge, U.K.A.
Copestake.
1999.
The (new) LKB system.
Technicalreport, CSLI, Stanford University.M.
C. Emele.
1994.
TFS ?
the typed feature struc-ture representation formalism.
In Proc.
of the Interna-tional Workshop on Sharable Natural Language Re-sources (SNLR-1994).S.
Harabagiu, D. Moldovan, M. Pas?ca, R. Mihalcea,M.
Surdeanu, R. Bunescu, R.
G?
?rju, V. Rus, andMora?rescu.
2001.
Falcon: Boosting knowledge foranswer engines.
In Proc.
of TREC 9.B.
Kiefer, H.-U.
Krieger, J. Carroll, and R. Malouf.1999.
A bag of useful techniques for efficient and ro-bust parsing.
In Proc.
of ACL-1999, pages 473?480,June.R.
Malouf, J. Carroll, and A. Copestake.
2000.
Effi-cient feature structure operations without compilation.Journal of Natural Language Engineering, 6(1):29?46.M.
Marcus, B. Santorini, and M. A. Marcinkiewicz.1993.
Building a large annotated corpus of En-glish: the Penn Treebank.
Computational Linguistics,19(2):313?330.W.
McCune.
2001.
Experiments with discrimination-tree indexing and path indexing for term retrieval.
Au-tomated Reasoning, 18(2):147?167.R.
Sekar, I. V. Ramakrishnan, and A. Voronkov.
2001.Term indexing.
In Handbook of Automated Reason-ing, pages 1853?1964.
Elsevier Science Publishers.Y.
Tateisi, K. Torisawa, Y. Miyao, and J. Tsujii.
1998.Translating the XTAG English grammar to HPSG.
InProc.
of TAG+4, pages 172?175.K.
Torisawa and J. Tsujii.
1995.
Compiling HPSG-style grammar to object-oriented language.
In Proc.of NLPRS-1995, pages 568?573.M.
Yoshikawa, T. Amagasa, T. Shimura, and S. Uemura.2001.
XRel: A path-based approach to storage and re-trieval of XML documents using relational databases.ACM Transactions on Internet Technology, 1(1):110?141.                          	     	          	               	       	                                         	     	        	            	         	  Figure 4: Average retrieval time for finding unifiable TFSs: QuerySetA (left), QuerySetB (right)                            	     	          	              	        	       	                            	   	    	             	                	           	         	    Figure 5: Average retrieval time for finding more-specific TFSs: QuerySetA (left), QuerySetB (right)                        	   	    	             	                	           	         	                                    	                                       Figure 6: Average retrieval time for finding more-general TFSs: QuerySetA (left), QuerySetB (right)      	                                                                        	                                                                  Figure 7: Filtering rate: QuerySetA (left) and QuerySetB (right)
