c?
2004 Association for Computational LinguisticsSquibs and DiscussionsComments on ?Incremental Construction andMaintenance of Minimal Finite-StateAutomata,?
by Rafael C. Carrasco and MikelL.
ForcadaJan Daciuk?Gdan?sk University of TechnologyIn a recent article, Carrasco and Forcada (June 2002) presented two algorithms: one for incrementaladdition of strings to the language of a minimal, deterministic, cyclic automaton, and one forincremental removal of strings from the automaton.
The first algorithm is a generalization of the?algorithm for unsorted data?
?the second of the two incremental algorithms for constructionof minimal, deterministic, acyclic automata presented in Daciuk et al (2000).
We show that theother algorithm in the older article?the ?algorithm for sorted data?
?can be generalized in asimilar way.
The new algorithm is faster than the algorithm for addition of strings presented inCarrasco and Forcada?s article, as it handles each state only once.1.
IntroductionCarrasco and Forcada (2002) present two algorithms: one algorithm for incrementaladdition of strings into a minimal, cyclic, deterministic, finite-state automaton, andanother for removal of strings from such an automaton.
The algorithm for addition ofstrings can be seen as an extension to cyclic automata of the algorithm for unsorteddata, the second algorithm in Daciuk et al (2000).
It turns out that not only the al-gorithm for unsorted data (the second algorithm in Daciuk et al [2000]), but also thealgorithm for sorted data (the first one in that article) can be extended in the sameway.
That extension is presented in Section 3 of this article.Carrasco and Forcada emphasize on-line maintainance of dictionaries.
Their dictio-naries are constantly updated.
In a different model, dictionaries are mostly consultedand are updated much less frequently.
In such a model, it is more convenient to re-build the dictionary off-line each time it is updated.
By taking the process off-line, onesaves much memory, as certain structures needed for construction are not needed forconsultation, and other structures can be very efficiently compressed (Kowaltowski,Lucchesi, and Stolfi 1993; Daciuk, 2000).
The data for dictionaries can be kept sorted;adding a few new (sorted) entries can be done in linear time.
Although Carrasco andForcada?s string addition algorithm can be used in this particular model, an algorithmspecialized for sorted data can perform the construction process faster than its moregeneral equivalent.The rest of the article is organized as follows.
Section 2 introduces mathematicalpreliminaries.
Section 3 presents an incremental algorithm for addition of sorted stringsto a cyclic automaton.
First, the role of a data structure called the register is explainedin detail in Section 3.1, then necessary modifications to the algorithm in Carrasco and?
Deptartment of Knowledge Engineering, Ul.
G. Narutowicza 11/12, 80-952 Gdan?sk, Poland.
E-mail:jandac@eti.pg.gda.pl.228Computational Linguistics Volume 30, Number 2Forcada (2002) are introduced in Section 3.2, and the final algorithm is presented inSection 3.3.
The algorithm is then analyzed in Section 4 and evaluated in Section 5.Section 6 gives conclusions.2.
Mathematical PreliminariesWe define a deterministic finite-state automaton as M = (Q, ?, ?, q0, F), where Q is afinite set of states, ?
is a finite set of symbols called the alphabet, q0 ?
Q is the start (orinitial) state, and F ?
Q is a set of final (accepting) states.
As in Carrasco and Forcada(2002), we define ?
: Q ??
?
Q as a total mapping.
In other words, if the automatonis not complete, that is, if ?q ?
Q ?
?a ?
?
: ?
(q, a) ?
Q, then an absorption state ?
?
Fsuch that ?a ?
?
: ?
(?, a) = ?
must be added to Q.
A complete acyclic automatonalways has an absorption state.
The extended mapping is defined as??
(q, ) = q??
(q, ax) = ??(?
(q, a), x)The right language of a state q is defined as?L (q) = {x ?
??
: ??
(q, x) ?
F}The language of the automaton L(M) =?L (q0).
The right language can be definedrecursively:?L (q) =?a??:?
(q,a) =?a?
?L (?
(q, a)) ?
{{} if q ?
F?
otherwiseEquality of right languages is an equivalence relation that partitions the set ofstates into abstraction classes (equivalence classes).
The minimal automaton is theunique automaton (up to isomorphisms) that has the minimal number of states amongautomata recognizing the same language.
It is also the automaton in which all statesare useful (i.e., they are reachable from the start state, and from them a final state canbe reached), and each equivalence class has exactly one member.The length of a string w ?
??
is denoted |w|, and the ith symbol (starting fromone) in the string w is denoted wi.3.
Incremental Addition of Sorted Strings3.1 The Role of the RegisterCarrasco and Forcada (2002) derive their algorithm for addition of strings from theunion of an automaton M = (Q, ?, ?, q0, F) with a single-string automaton Mw = (Qw, ?,?w, q0w, Fw).
In a single-string automaton, Qw = Pr(w) ?
{?w}, where Pr(w) is the setof all prefixes of w, which also serve as names of states, ?w is the absoption state,Fw = {w}, and q0w = .States in the automaton M?
= M?Mw that is the result of the union can be dividedinto four groups:?
Intact states of the form (q,?w) with q ?
Q ?
{?
}, states that are notaffected by the union.229Daciuk Comments on Carrasco and Forcada?
Cloned states of the form (q, x) with q ?
Q?{?}
and x ?
Pr(w) such that??
(q0, x) = q.
All other states in (Q ?
{?})?
Pr(x) can be safelydiscarded.
The new initial state (q0, ) is a cloned state.?
Queue states of the form (?, x), with x ?
Pr(w).?
The new absorption state ??
= (?,?w) ?
F. It is present only if M has anabsoption state.In Carrasco and Forcada, (2002), the algorithm for addition of strings proceeds byminimizing the queue states and cloned states, arriving at the minimal automaton.All states of M are put into a set called a register of states, which holds all uniquestates in the automaton.
States unreachable from the new initial state are removedfrom the automaton and from the register.
Then, starting from the states that are themost distant from the initial state, queue states and cloned states are compared againstthose in the register.
If an equivalent state is found in the register, it replaces the stateunder investigation.
If not, the state under investigation is added to the register.Before we go further, we have to look at the role of the register of states in greaterdetail.
It is explained in Daciuk et al (2000) and omitted in Carrasco and Forcada(2002).
Carrasco and Forcada do not have to examine the register closely, as theyclone all states that they call cloned states.
Incremental construction consists of twosynchronized processes: One that adds new states, and another that minimizes theautomaton.
In minimization, it is important to check whether two states are equivalent.The Myhill-Nerode theorem tells us that two states are equivalent when they have thesame right languages.
Computing right languages can take much time.
However, whatwe need to check is whether two states have the same right language, and not whatthat language actually is.
We can use the recursive definition of the right language.If the target states of all outgoing transitions are unique in the automaton, that is, ifthey are already in the register, then instead of comparing their right languages, wecan compare their identity (e.g., their addresses in memory).
The assumption in theprevious statement can be made true by enforcing a particular order in which statesare compared against those in the register.
When states are on a path representing afinite string, they should be processed from the end of the string toward the beginning.The queue states should be processed in that order.
If an equivalent state is foundin the register, it replaces the current state.
Otherwise, the current state is added tothe register.The register can be organized as a hash table.
Finality of the state, the numberof transitions, labels on transitions, and targets of transitions are treated together as akey?an argument to a hash function.
The register does not store right languages.
Itstores pointers to states.
If the right language of a state changes, the key of that statedoes not have to.
Therefore, we do not need to take a state out from the register andput it back there if the key of the state does not change.3.2 Necessary ModificationsWe divide the set of cloned states into two groups: prefix states (up to, but excludingthe first state with more than one incoming transition) and the proper cloned states.Proper cloned states are modified copies of other states.
They are new states; they werecreated by adding a new string.
In Carrasco and Forcada (2002), the prefix states arealso cloned.
However, it is usually not necessary to clone them (Carrasco and Forcadamention that on page 215).
They all change their right languages as the result of addinga new string, but only the last prefix state (the most distant from the initial state) issure to change its transitions.
Therefore, it should be removed from the register before230Computational Linguistics Volume 30, Number 2adding a new string.
Other prefix states should be removed from the register only ifthey change their key features.
This can happen only if the next prefix state in the pathis replaced by another state.
In that case, the current prefix state is removed from theregister and reevaluated.
If an equivalent state is found in the register, it replaces thecurrent state, and the previous prefix state should be considered.
Otherwise the stateis put back into the register, and no further reevaluation is necessary.If strings are added in an ordered way, the minimization process can be optimizedin the same way as in the ?sorted data algorithm,?
the first algorithm described inDaciuk et al (2000).
We introduce two changes to the string addition algorithm inCarrasco and Forcada (2002):?
Prefix states are not cloned when not necessary.?
States are never minimized (i.e., compared against the register and eitherput there or replaced by other states) more than once.The first modification is described above.
The second one requires more explanation.Let us consider an automaton in which no minimization takes place after a new stringhas been added.
That automaton has form of a trie.
If a set of strings is lexicographicallysorted, then the paths in the automaton recognizing two consecutive strings w?
andw share some prefix states (at least the initial state, the root of the trie).
We denotethe longest common prefix of w and w?
as lcp(w, w?).
If w?
is a prefix of w, then allstates in the path recognizing w?
are also in the path of w. Otherwise, there will bestates in the path recognizing w?
that are not shared with the path recognizing w. Notethat no subsequent words will have these states in the common prefix path either, asthe shared initial part of paths of w?
and subsequent words can only become shorterbecause of sorting.
Therefore, the states after lcp(w, w?)
will never change their rightlanguage, so they can be minimized without any further need of reevaluation.
As soonas we add w, we know which states in the path of w?
can be minimized.
Instead of atrie, we keep a minimal automaton except for the path of the last string added to theautomaton.If we start from scratch and add strings in the manner just described, propercloned states will never be created.
Proper cloned states are created only when thecommon prefix of two words contains states with more than one incoming transition.Additional transitions coming to states are created when the states are in the registerand they are found to be equivalent to some other states.
But the states can be putinto the register only when they are no longer in the common prefix path.In case of a cyclic automaton, we do not start from scratch.
There is an initial(minimal) automaton that contains cycles.
No new cycles are created by adding merestrings one by one (as opposed to regular expressions, infinite sets of strings, etc.
).As the automaton already contains some strings, and it can contain states with morethan one incoming transition, proper cloned states can be created.
However, no propercloned states will be created in the common prefix path, because the path recognizingthe previous string does not contain any states with more than one incoming transition.3.3 The Algorithm1: func build automaton;2: R ?
Q;3: if (fanin(q0) > 0) then4: q0 ?
clone(q0);5: fi;231Daciuk Comments on Carrasco and Forcada6: w?
?
;7: while ((w ?
nextword) = ) do8: p ?
lcp(w, w?
);9: M ?
minim path(M, w?, p);10: M ?
add suffix(M, w, p);11: w?
?
w;12: end;13: minim path(M, w?, q0);14: if ?r ?
R : equiv(r, q0) ?15: delete q0; q0 ?
r;16: fi;17: cnuf18: func lcp(M, w, w?
);19: j ?
max(i : ?k?j wk = wk?
);20: return w1 .
.
.wj;21: cnuf22: func minim path(M, w, p);23: q ?
??
(q0, p);24: i ?
|p|; j ?
i;25: while i ?
|w| do26: path[i ?
j] ?
q;27: q ?
?
(q, wi); i ?
i + 1;28: end;29: path[i ?
j] ?
q;30: while i > j do31: if ?r ?
R : equiv(r, q) then32: ?
(path[i ?
j ?
1], wi?1) ?
r;33: delete q;34: else35: R ?
R ?
{q};36: fi;37: i ?
i ?
1;38: end;39: return M;40: cnuf41: func add suffix(M, w, p);42: q ?
??
(q0, p);43: i ?
|p|+ 1;44: while i ?
|w| and ?
(q, wi) = ?
and fanin(?
(q, wi)) ?
1 do45: q ?
?
(q, wi); R ?
R ?
{q}; i ?
i + 1;46: end;47: while i ?
|w| and ?
(q, wi) = ?
do48: ?
(q, wi) ?
clone(?
(q, wi));49: q ?
?
(q, wi); i ?
i + 1;50: end;51: while i < |w| do52: ?
(q, wi) ?
newstate;53: q ?
?
(q, wi); i ?
i + 1;232Computational Linguistics Volume 30, Number 254: end;55: F ?
F ?
{q};56: return M;57: cnufFunction fanin(q) returns the number of incoming transition for a state q.
If theinitial state has more than one incoming transition, it must be cloned (lines 3?5) toprevent prepending of unwanted prefixes to words to be added.
Function nextwordsimply returns the next word in lexicographical order from the input, or  if there areno more words.
Function lcp (lines 18?21) returns the longest common prefix of twowords.
It is called with the last string added to the automaton and the string to beadded to the automaton as the arguments.
For the first string, the previous string isempty.
Function minim path (lines 22?40) minimizes that part of the path recognizingthe string previously added to the automaton that is not in the longest common prefix.This is done by going to the back of the path representing the string (lines 23?29) andchecking the states one by one starting from the last state in the path (lines 30?38).The register is represented as variable R.While function minim path is not much different from an analogical function forthe acyclic case, function add suffix (lines 41?57) does introduce some new elements.
Itresembles more closely a similar function from the algorithm for unsorted data (Daciuket al 2000).
The longest prefix common to the string to be added and the last stringadded to the automaton is not necessarily the same as the longest prefix common tothe string to be added to the automaton and all strings already in the automaton.
Thelatter can be longer, and the path recognizing it may contain states with more thanone incoming transition.
Those states have to be cloned (lines 47?50).4.
AnalysisThe algorithm correctly adds new strings to the automaton, while maintaining itsminimality.
We assume that all states in the initial automaton are in the register, thatthere are no pairs of states with the same right language, that all states are reachablefrom the initial state, and that there is a path from every state to one of the final states.The absorption state and transitions that lead to it are not explicitly represented.To prove that the algorithm is correct, we need to show that1.
the language of the automaton after the addition of the string containsthat string;2. no other strings are added to the automaton;3. no strings are removed from the automaton;4. the automaton remains minimal except for the path of the newly addedstring, that is, the states covered by the path of the newly added stringare representatives of the only equivalence classes that may have morethan one member.It is easy to show that strings are indeed added to the language of the automaton.First, transitions with subsequent symbols from the strings are followed from the initialstate.
When there are no transitions with appropriate symbols, new ones are created.The state reachable with the string is made final.
Minimization done by minim path233Daciuk Comments on Carrasco and Forcadareplaces states with other states that have the same right language.
That operationdoes not change the language of the automaton.If the initial state has any incoming transitions, it is cloned, and the clone becomesthe new initial state.
That operation does not change the language of the automaton?the right language of the new initial state is exactly the same as of the old one.
Theold initial state is still reachable, because it has incoming transitions from either thenew initial state (the old initial state had a loop) or other states that are reachable.
Thecloning creates a new state that is not in the register and that is equivalent to anotherstate in the automaton.
Lines 14?16 of the algorithm check whether after addition ofnew strings, the new initial state is equivalent to some other state in the automaton.If it is, the new initial state is replaced with the equivalent state.Since the automaton is deterministic, it cannot hold more than one copy of thesame string.
Therefore, we need only to show that no other strings are erroneouslyadded to the automaton.
Such erroneous addition could happen by creating or redi-recting transitions.
New transitions are created to store some suffixes of new stringsthat are not present in the automaton.
This could lead to addition of new, superflousstrings, provided the states that to which we add transitions are reentrant/confluence.However, the algorithm excludes such cases.
All states in the path of the previouslyadded string have only one incoming transition.
All reentrant/confluence states not inthe longest common prefix path are cloned in line 48 of function add suffix.
Functionminim path can redirect transitions only to states not in the longest common prefixpath.Since states that are deleted in line 33 in function minim path (the only place inthe algorithm where states are deleted) are always replaced as targets of transitionsby equivalent states, strings could be deleted from the automaton only by makingparts of it unreachable.
However, all targets of transitions going out from a state to bedeleted go to states that have more than one incoming transition?states that replacedprevious targets of those transitions.
This includes the case of states with no outgoingtransitions.To show that the automaton remains minimal except for the path of the newlyadded string, we first note that all existing states are in the register before we startadding new strings.
Adding a new string creates a single chain of states not in theregister.
The chain is added in its entirety with function add suffix, as the ?previous?string for the first string is assumed to be empty.
If w is the string to be added, and?i>0?q?Q ??
(q0, w1 ?
?
?wi) = ?, then non-reentrant states not following any reentrantstates in the path from q0 to q are removed from the register, and reentrant states (andstates that follow them) are cloned.
For wi+1 ?
?
?w|w|, new states and transitions arecreated.
This concludes forming a path for the first string.
That path consists entirelyof states that are not in the register and that can have an equivalent state somewherein the rest of the automaton.When next strings are added, they are divided into two parts by function lcp.It divides both the previous and the next string.
The first part (the longest commonprefix) is shared between the previous and the next string, and it remains outside theregister.
This also means that for each state in that part, there may be an equivalentstate in the remaining part of the automaton.
The second part of the next string willform the rest of the path of states outside the register.
The second part of the path of theprevious string will be subject to minimization, as no further outgoing transitions willbe added to any of its states in the future.
Minimization replaces with their equivalentstates those states in the path of the suffix of the previous string that are not unique.Since minimization is performed from the end of the string toward the longest commonprefix, we can use the register and compare the states using the recursive definition234Computational Linguistics Volume 30, Number 2of the right language, replacing right languages of target states with their addresses.At the end of the process, we have an automaton that is minimal except for the pathof the last string added to it.
We return to the start situation.The algorithm has the same asymptotic complexity as the corresponding algo-rithms in Carrasco and Forcada (2002) and Daciuk et al (2000).
However, it is fasterthan algorithms for unsorted data, because it does not have to reprocess the statesover and over again.
Each time the original algorithm clones a state, that state is re-processed.
Cloning in the new version is limited to the part of the automaton builtbefore addition of new strings.
No state created by the algorithm is cloned afterward.5.
EvaluationTwo experiments have been performed to compare the new algorithm with the algo-rithm for adding strings to a minimal, deterministic, cyclic automaton presented inCarrasco and Forcada (2002).
In both experiments, a cyclic automaton was created.
Itrecognized any sequence of words from one set and any word from another set.
Thefirst set was used to construct an initial cyclic automaton recognizing any sequence ofwords from the first set.
Then the second set was used to measure the relative speedof the algorithms being compared.
In the first experiment, the first set consisted ofGerman words beginning with Latin letters from A to M, and the second set consistedof German words beginning with letters from N to Z.
This was the ?easier?
task, sinceonly the initial state of the automaton had to be cloned.
In the second experiment,odd-numbered German words beginning with letters A to Z formed the first set, andeven-numbered ones, the second set.
In this task, many paths in the automaton wereshared between words from both sets.
A total of 69,669 German words were used inthe experiments.In the first experiment, the new algorithm was 4.96 times faster, and in the secondone, 2.53.
Most of the speedup was not the result of using an algorithm optimizedfor sorted data?an improvement to the algorithm for adding strings in Carrascoand Forcada (2002) consisting in avoiding unnecessary cloning of prefix states (asdescribed in section 3.2 and mentioned on page 215 in Carrasco and Forcada [2002] asa suggestion from one of Carrasco and Forcada?s reviewers) was 3.12 and respectively2.35 times faster than the original algorithm.
However, the new algorithm is still thefastest.6.
ConclusionsAn algorithm for adding strings to a cyclic automaton has been presented.
It is fasterthan the algorithm for adding strings presented in Carrasco and Forcada (2002), butit operates on sorted input data.
The new algorithm is a generalized version of thefirst algorithm presented in Daciuk et al (2000).
The relation between the algorithmpresented here and the first algorithm in Daciuk et al (2000) is the same as thatbetween the algorithm for adding strings in Carrasco and Forcada (2002) and thesecond algoritm in Daciuk et al (2000).AcknowledgmentsThis research was carried out within theframework of the PIONIER ProjectAlgorithms for Linguistic Processing,funded by NWO (Dutch Organization forScientific Research) and the University ofGroningen.
The author wishes to thank theanonymous reviewers for valuablesuggestions and corrections.235Daciuk Comments on Carrasco and ForcadaReferencesCarrasco, Rafael C. and Mikel L. Forcada.2002.
Incremental construction andmaintenance of minimal finite-stateautomata.
Computational Linguistics, 28(2):207?216.Daciuk, Jan. 2000.
Experiments withautomata compression.
In M. Daley, M. G.Eramian, and S. Yu, editors, Conference onImplementation and Application of Automata(CIAA?2000), pages 113?119, London,Ontario, Canada, July.Daciuk, Jan, Stoyan Mihov, Bruce Watson,and Richard Watson.
2000.
Incrementalconstruction of minimal acyclic finite stateautomata.
Computational Linguistics,26(1):3?16.Kowaltowski, Tomasz, Cla?udio L. Lucchesi,and Jorge Stolfi.
1993.
Minimization ofbinary automata.
In First South AmericanString Processing Workshop, Belo Horizonte,Brazil.
