A Quantif ier Scoping A lgor i thmwi thout  A Free Variable ConstraintI nn  L ew inDepartment o.\[ Artificial IntelligenceUniversity of Edinburgh80 South BridgeEdinburgh EH1 1HNemaih il@aipna.ed.ac.ukAbstractThree recent demands on quantifier scoping al-gorithms have been that they should be explic-itly stated, they should be sound and completewith respect o the input sentence \[Hobbs andShieber 1987\] and they should not employ a 'FreeVariable Constraint' \[Pereira 1989\].
The first de-mand is for good academic practice.
The secondis to ask for an algorithm that generates all andonly the possible scopings of a sentence.
Thethird demand is for an algorithm that avoidsappealing to the syntax of logical form in or-der to determine possible scopings.
I present amodified version of \[Hobbs and Shieber 1987\],which simplifies its operation, and can be con-sidered sound and complete, depending on whatinterpretations of English sentences are deemedpossible.
Finally, any doubts concerning the useof logical form syntax are avoided.1 Introduct ion\[Hobbs and Shieber 1987\] presented an algorithmto generate quantifier scopings from a represen-tation of "predicate-argument relations and therelations of grammatical subordination" (pg 49).This representation is successively modified bya recursive algorithm until all the quantifierspresent in the input have been dealt with andgiven scope over some part of the output.
Asample input representation is,i.
Ioves(<a x woman(x)> <every y man(y)>)where representations of quantified noun phrases,called complex terms, are left as arguments tothe verb.
A sample output is2.
(a x woman(x) (every y man(y) lovesCx,Y)))which uses a four-part quantifier notation, andin which no complex terms are present.
In con-verting 1) into 2) the recursive procedure maybe called upon representations of intermediateformat, eg(a woman( )loves(  <every y man(y)>))where a four part quantifier phrase has an em-bedded complex term.The algorithm is claimed to be more successfulthan previous accounts in dealing with complexnoun phrases uch as "every representative of acompany" and in coping with certain 'opaque'predicates such as negation.
1Two properties of an algorithm which Hobbsand Shieber (H&S) approve of are completenessand soundness.
An algorithm with these prop-erties might be used as a benchmark for otheralgorithms designed for efficiency or the use ofheuristics governing the plausibility of the vari-ous interpretations.
Unfortunately, demonstrat-ing that H&S's algorithm is sound requires asemantics for the input language and the inter-mediate forms.
That is not straightforward.I present a modified algorithm which avoids suchintermediate forms.
The input to the algorithmconsists of English syntax.
The steps of the al-gorithm retrace steps through a truth definitionfor the input language.
Clearly, the algorithm issound and complete with respect o that.
Thealgorithm is also sound and complete with re-spect to English, if you agree that the input1They acknowledge \[Keller 1986\] as a similar solution190language fairly represents the actual languageof English speakers.
Furthermore, the algorithmis somewhat simpler than H&S's algorithm andmakes no appeal to logical syntax.
There is aProlog implementation f the algorithm.2 Quantif ication in LogicSemantic theories generally recurse over the syn-tax of the object language.
For example, fol-lowing the procedure and notation of \[Tennant1978\], '~ we say thatg satisfies"(Vxf(x))"iff for every 0, g(x --+ o) satisfies "f(x)"Thus, the satisfaction of "(Y x f(x))" is given interms of the satisfaction of formulae of the form"f(x)".
Truth is defined as satisfaction by thenull assignment, N. Given the following axiomg(x -* a) satisfies "f(x)" iff f '(a)then we can produce the following proof"( V x f(x))" is trueiff N satisfies "(V x f(x))"for every o, N(x o) satisfies "fix)"iff \[or every o, f'(a)Finally~ formalising our meta.language ives"(V z f(x))" is true iff (V c~ f'(a))This idea can be extended to structurally am-biguous entences of English.
Suppose C is someenvironment containing a complex term such as"<a y woman(y)>", theng satisties C(< all y woman (y) >)if (All a g(y --~ a) satisfies "woman(y)"g(y a) satisfies c(y))Here, C(y) indicates the environment C(<a ywoman(y) >) with y replacing the complex term.The extension involves two key changes.
First,we employ a four part notation in the meta-language.
Let us say that (All x f(x) g(x)) ab-breviates the English: for every object x such~We assume g is an assignment from variables to ob-jects dealing with all variables required, g(x --~ a) is gmodified so that x is assigned to ~.
Greek letters arereserved for meta-language variables.that f(x) holds, g(x) alsoholds.
Secondly, we usea simple conditional rather than a bi-conditionalin the rule.
The reason for this is simply thatan ambiguous sentence such as 1) is true in ei-ther of two conditions.
The theory will predict"(loves <a x woman(x)> <every y man(y)>)"is true if(a a woman'(a) (every /9 man'(f/) loves'(c%fl))and also that"(loves <a x woman(x)> <every y man(y)>)"is true if(every 0 man'(a) (a fl woman'(f~) loves'(a,/9))We ensure 1) is not true in any other condi-tions by adopting a general exclusion clause thata sentence is not true except in virtue of theclauses of the given theory.3 Comparison and Il lustrationThe primitive operation of our algorithm willbe to apply a complex term to a formula con-taining it, e.g.
to apply <q x r(x)> to p(<q xr(x)>).
The result of application is a new fourpart quantifier expression whose first two partsare q and x, whose third part is the result ofrecursing on r(x) and whose fourth part is theresult of recursing on p(x) (the formula itselfwith the complex term replaced by the variableit restricts).For example, by choosing <a x woman(x)> firstin 1), the algorithm will construct a new expres-sion derived from "a", "x" and recursions on"woman(x)" and "loves(x <every  man(y)>)".The first recursion will result in woman(x).
Thesecond will build yet another term from "ev-ery", "y" and further ecursion on "man(y)" and"loves(x,y)".
The final result will be( a x woman(x) (every y man(y) loves(x,y)))Clearly, by choosing <every man(y)> first, thealternative reading of the sentence would havebeen produced.
Quantifiers chosen earlier re-ceive wider scope.
We work our way throughthe formula outside-in.
\[Woods 1968\] explainedthe advantages ofa top-down treatment of quan-tified noun phrases.191The basic operation of H&S is similar.
An ap-plication builds a four part term whose first twoparts are q and x, whose third part is r(x) andwhose fourth part is the formula with x replac-ing <q x r(x)>).
The result is then recursedupon in order to deal with other complex termsin the formula.Now consider complex noun phrases uch as "ev-ery representative of a company".
These aresuccess cases for H&S.
The new algorithm dealswith them without alteration.
For example ~3.
arrived( <every xand(rep(x) ,of(x, <a y company(y)>)>)We allow "every" to take wide scope as follows.First, we construct a new term from "every" ,"x"and recursions on "arrived(x)" and "and(rep(x),> " of(x, <a y company(y) )) .
The recursion on"arrived(x)" simply produces "arrived(x)".
Therecursion on"and(rep(x), of(x, <a y company(v)>))"will lead us to construct a new term from "a' ,"y" and the results of recursions on "company (y)"and "and(rep(x),of(x,y))".
These last two re-cursions are again simple cases, 4 resulting in(a y company(y)and(rep(x), of(x,y)))for "and(rep(z), of(x, <a y company(y)>))".With this result, we can complete our analysisof 3 itself.
(every x(a y company(y)and(rep(x), of(x,y)))arrived(x))for the whole input.In comparison, H&S use a much more complexmechanism.
They do this because otherwise deal-ing with <a y company(y)> first results in3I assume H&S's syntactic analysis4Actually, there is an issue concerning "and", forcedon us by H&S's syntactic analysis.
The issue is whetherquantifiers can be extracted across conjunctions.
Forpresent purposes, I assume they can - indeed, that therecursive rule for "and" only applies when the environ-ments C and D in "and((,D)" contain o complex terms.
(a y company(y)arrived(<every x and(rep(x), of(x,y))>)and recursion on this produces(every x and(rep(x), of(x,y))(a y company(y)arr ived(x)))which is not the required reading of the sen-tence.
It also contains a free variable.
H&Stherefore forbid the algorithm to apply complexterms which are embedded within other complexterms.
Also, the restrictions of complex termsare recursively scoped with a flag set so thatthis call of the procedure returns partial results(still containing complex terms), as well as fullresults.4 Negat ionThere are two readings of the sentence4.
Everyone isn't heredepending on whether "not" or "every" takeswider scope.
In ordinary logic we have"not(p)" is trueiff it is not the case that "p" is trueSuppose C is an environment containing an oc-currence of "not", theng satisfies C(..not..)if it is not the case that g satisfies C( .
.
.
.
)Here the formula on the right-hand-side is justthat on the left, with the occurrence of "not"removed.
The ambiguity in 4) arises in exactlythe same manner as quantifier scope ambigu-ities.
Using one rule (negation) before another(quantification) leads to wider scope for the firstapplication.In contrast, H&S analyse 4 syntactically asnot(here(<every x person(x)>))and mark "not" as being opaque in its only ar-gument.
The rule for opaque arguments allowsthem to be scoped first thus giving H&S the nar-row scope "every" reading.192This use of the terrn "opaque" is somewhat non-standard since "not" is not usually considered tobe opaque.5 PronounsIntroduchlg complex noun phrase led to increasedcomplexity in the H&S algorithm.
The intro-duction of structure such as5.
Every man saw a plcture of himselfwhere "him" is bound by "every man" leads toyet more.
Take the representation of 5. as6.
saw(<,,very x man(x)>,<a y picture(y,x)>)Applying <every x man(x)> first, via the H&Smechanism, gives(every x man(x) saw(x,<a y picture(y,z)>))Application of <a y picture(y,x)> would nowlead to "x" being free.
H&S prevent his by stip-ulating that a complex term is applicable onlyif all free variables in the term are also free inthe containing formula.
\[Pereira 1989\] calls this'The Free; Variable Constraint' and complains ofan appeal to logical syntax.Our own methodology avoids this.
First, notethat 6) is supposed l;o be a purely syntacticstructure.
The occurrence of "x" in "picture(y,x)"represents the pronoun "himself", and the factthat "x" also occurs in "<every x man(x)>"represents the grammatical relation holding be-f~ween "<every x man(x)>" and "himselP'.
Coin-dexing is used here just to indicate certain gram-matical relations.
~ Tile following notation isclearer.saw( <every x man(x)>,<a y picture(y,himself-x)>Now, we alter our quantification rule so that ifC is an environment containing <q x r(x)>, ournew term is constructed from "q", "x", and re-cursions on "r(x)" and C where <q x r(z)> andall embedded coindexed reflexives are replacedby "x".~;uppose vce choose to apply~This is one area where H&S'e analysis is d\]fflcult tofollow - wh~t is the role of variables in the input andintermediate forms ?<a y picture(y,himself-x)>first to 6).
Then we construct our result from"a' ,  "y" and recursions on both "saw(<everyx man(x)>,y)" and "picture(y,himself-x)" ; thefinal recursion cannot proceed however, for wehave no rule to interpret a reflexive in this posi-tion.
There is no appeal to logical syntax, onlyEnglish syntax.The same holds true of non-reflexives as in7.
Every man saw a friend of hiswhere "every man" and "his" are co-indexed.
66 Summary  and ConclusionA modification to the algorithm of \[Hobbs andShieber 1987\] based on a hint from standardlogical theory has led to a simpler algorithm,and one which makes no illegitimate appeal totile syntax of logical form.
The algorithm issound and complete with respect to the inputlanguage since it retraces the semantic defini-tion of that language.
The degree to which itmatches our intuitions concerning English deter-mines how good a contribution to natural lan-guage processing it is.Acknowledgement~Helpful comments on this work have been madeby Robin Cooper, Graeme Ritchie and audiencesat both the A.I.
Natural Language Group andthe Cognitive Science Formal Semantics Work-shop in Edinburgh.Tile research was supported by SERC researchstudentship no.
88304590References\[1\] Hobbs J.R., and Shieber S.M., 1987, 'AnAlgorithm for Generating Quantifier Scop-lugs' Computational Linguistics 13,num-bers 1-2, January- June 1987.6There are other uses of pronouns not treated in theversion of the algorithm glven here.
For example, therei~ a possible deictie use of "his" in 7).
Nor do we aceotmtfor "donkey" pronouns tmeh ~ts Every woman who saw aman disliked him.193\[2\]\[3\]\[4\]\[5\]Keller W., 1986, 'Nested Cooper Storage ~Natural Language Parsing and LinguisticTheory edited by U.Reyle and C.Rohrer432-447, Studies in Linguistics and Philos-ophy volume 35, Dordrecht Reidel, Dor-drecht.Pereira F.C.N., 1989 'A Calculus for Se-mantic Composition and Scoping' 27th An-nual Meeting of A CL 26-29 June 1989 Van-couver, British Columbia, 152-160.Tennant N.W., 1978, Natural Logic Edin-burgh University PressWoods W.A., 1968, Procedural Semanticsfor a Question Answering Machine AFIPSNatl.
Comput.
Conf.
Ezpo., ConferenceProceedings 33, 457-471.194
