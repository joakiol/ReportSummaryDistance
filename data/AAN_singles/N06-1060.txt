Proceedings of the Human Language Technology Conference of the North American Chapter of the ACL, pages 471?478,New York, June 2006. c?2006 Association for Computational LinguisticsCross Linguistic Name Matching in English and Arabic: A ?One toMany Mapping?
Extension of the Levenshtein Edit Distance AlgorithmDr.
Andrew T. Freeman, Dr. Sherri L. Condon andChristopher M. AckermanThe Mitre Corporation7525 Colshire DrMcLean, Va 22102-7505{afreeman, scondon, cackerman}@mitre.orgAbstractThis paper presents a solution to the prob-lem of matching personal names in Eng-lish to the same names represented inArabic script.
Standard string comparisonmeasures perform poorly on this task dueto varying transliteration conventions inboth languages and the fact that Arabicscript does not usually represent shortvowels.
Significant improvement isachieved by augmenting the classicLevenshtein edit-distance algorithm withcharacter equivalency classes.1 Introduction to the problemPersonal names are problematic for all languagetechnology that processes linguistic content, espe-cially in applications such as information retrieval,document clustering, entity extraction, and transla-tion.
Name matching is not a trivial problem evenwithin a language because names have more thanone part, including titles, nicknames, and qualifierssuch as Jr. or II.
Across documents, instances ofthe name might not include the same name parts,and within documents, the second or third mentionof a name will often have only one salient part.
Inmultilingual applications, the problem is compli-cated by the fact that when a name is representedin a script different from its native script, theremay be several alternative representations for eachphoneme, leading to large number of potentialvariants for multi-part names.A good example of the problem is the name ofthe current leader of Libya.
In Arabic, there isonly one way to write the consonants and longvowels of any person?s name, and the currentleader of Libya?s name in un-vocalized Arabic textcan only be written as ????
???????.
In English,his name has many common representations.
Ta-ble 1 documents the top five hits returned from aweb search at www.google.com, using variousEnglish spellings of the name.Version            OccurrencesMuammar Gaddafi  43,500Muammar Qaddafi  35,900Moammar Gadhafi  34,100Muammar Qadhafi  15,000Muammar al Qadhafi 11,500Table 1.
Qadhafy?s names in EnglishPart of this variation is due to the lack of anEnglish phoneme corresponding to the StandardArabic phoneme /q/.
The problem is further com-pounded by the fact that in many dialects spoken inthe Arabic-speaking world, including Libya, thisphoneme is pronounced as [g].The engineering problem is how one reliablymatches all versions of a particular name in lan-guage A to all possible versions of the same namein language B.
Most solutions employ standardstring similarity measures, which require thenames to be represented in a common characterset.
The solution presented here exploits translit-eration conventions in normalization proceduresand equivalence mappings for the standard Leven-shtein distance measure.2 Fuzzy string matchingThe term fuzzy matching is used to describemethods that match strings based on similarityrather than identity.
Common fuzzy matchingtechniques include edit distance, n-gram matching,and normalization procedures such as Soundex.471This section surveys methods and tools currentlyused for fuzzy matching.2.1 SoundexPatented in 1918 by Odell and Russell theSoundex algorithm was designed to find spellingvariations of names.
Soundex represents classes ofsounds that can be lumped together.
The preciseclasses and algorithm are shown below in figures 1and 2.Code:   0 1         2       3       4     5      6Letters: aeiouy bp    cgjkq   dt      l    mn     rhw fv     sxzFigure 1: Soundex phonetic codes1.
Replace all but the first letter of the string by itsphonetic code.2.
Eliminate any adjacent repetitions of codes.3.
Eliminate all occurrences of code 0, i.e.
eliminateall vowels.4.
Return the first four characters of the resultingstring.5.
Examples: Patrick = P362, Peter  = P36, Peterson =P3625Figure 2: The Soundex algorithmThe examples in figure 2 demonstrate thatmany different names can appear to match eachother when using the Soundex algorithm.2.2 Levenshtein  Edit DistanceThe Levenshtein algorithm is a string edit-distance algorithm.
A very comprehensive andaccessible explanation of the Levenshtein algo-rithm is available on the web athttp://www.merriampark.com/ld.htm.The Levenshtein algorithm measures the editdistance where edit distance is defined as the num-ber of insertions, deletions or substitutions requiredto make the two strings match.
A score of zerorepresents a perfect match.With two strings, string s of size m and string tof size n, the algorithm has O(nm) time and spacecomplexity.
A matrix is constructed with n rowsand m columns.
The function e(si,tj) where si is acharacter in the string s, and tj is a character instring t returns a 0 if the two characters are equaland a 1 otherwise.
The algorithm can be repre-sented compactly with the recurrence relationshown in figure 3.Figure 3.
Recurrence relation for Levenshtein edit distanceA simple ?fuzzy-match?
algorithm can be cre-ated by dividing the Levenshtein edit distancescore by the length of the shortest (or longest)string, subtracting this number from one, and set-ting a threshold score that must be achieved in or-der for the strings to be considered a match.
In thissimple approach, longer pairs of strings are morelikely to be matched than shorter pairs of stringswith the same number of different characters.2.3 EditexThe Editex algorithm is described by Zobel andDart (1996).
It combines a Soundex style algo-rithm with Levenshtein by replacing the e(si,tj)function of Levenshtein with a function r(si,tj).The function r(si,tj) returns 0 if the two letters areidentical, 1 if they belong to the same letter groupand 2 otherwise.
The full algorithm with the lettergroups is shown in figures 4 and 5.
The Editexalgorithm neutralizes the h and w.  This shows upin the algorithm description as d(si-1,si).
It is thesame as r(si,tj), with two exceptions.
It comparesletters of the same string rather than letters fromthe different strings.
The other difference is that ifsi-1 is h or w, and si-1?si, then d(si-1,si) is one.Figure 4: Recurrence relation for Editex edit distance0        1     2      3   4    5    6     7        8      9for each i from 0 to |s|for each j from 0 to |t|levenshtein(0; 0) = 0levenshtein(i; 0) = ilevenshtein(0;j) = jlevenshtein (i;j) =min[levenshtein (i ?
1; j) + 1;levenshtein(i; j ?
1) + 1;levenshtein(i ?
1; j ?
1) +e(si; tj )]for each i from 0 to |s|for each j from 0 to |t|editex(0; 0) = 0editex(i; 0) = editex(i ?
1; 0) + d(si?1; si)editex(0; j) = editex(0; j ?
1) + d(tj?1; tj )editex(i; j) = min[editex (i ?
1; j) +d(si?1; si);ediext(i; j ?
1) + d(tj?1; tj);editex(i ?
1; j ?
1) + r(si; tj )]472aeiouy   bp   ckq  dt   lr  mn  gj   fpv    sxz   cszFigure 5: Editex letter groupsZobel and Dart (1996) discuss several en-hancements to the Soundex and Levenshtein stringmatching algorithms.
One enhancement is whatthey call ?tapering.?
Tapering involves weightingmismatches at the beginning of the word with ahigher score than mismatches towards the end ofthe word.
The other enhancement is what they callphonometric methods, in which the input stringsare mapped to pronunciation based phonemic rep-resentations.
The edit distance algorithm is thenapplied to the phonemic representations of thestrings.Zobel and Dart report that the Editex algorithmperformed significantly better than alternativesthey tested, including Soundex, Levenshtein editdistance, algorithms based on counting common n-gram sequences, and about ten permutations oftapering and phoneme based enhancements to as-sorted combinations of Soundex, n-gram countingand Levenshtein.2.4 SecondStringSecondString, described by Cohen, Ravikumarand Fienberg (2003) is an open-source library ofstring-matching algorithms implemented in Java.It is freely available at the web sitehttp://secondstring.sourceforge.net.The SecondString library offers a wide assort-ment of string matching algorithms, both thosebased on the ?edit distance?
algorithm, and thosebased on other string matching algorithms.
Sec-ondString also provides tools for combiningmatching algorithms to produce hybrid-matchingalgorithms, tools for training on string matchingmetrics and tools for matching on tokens withinstrings for multi-token strings.3  Baseline taskAn initial set of identical names in English andArabic script were obtained from 106 Arabic textsand 105 English texts in a corpus of newswire arti-cles.
We extracted 408 names from the Englishlanguage articles and 255 names from the Arabiclanguage articles.
Manual cross-script matchingidentified 29 names common to both lists.For a baseline measure, we matched the entirelist of names from the Arabic language textsagainst the entire list of English language namesusing algorithms from the SecondString toolkit.The Arabic names were transliterated using thecomputer program Artrans produced by Basis(2004).For each of these string matching metrics, thematching threshold was empirically set to a valuethat would return some matches, but minimizedfalse matches.
The Levenshtein ?edit-distance?algorithm returns a simple integer indicating thenumber of edits required to make the two stringsmatch.
We normalized this number by using theformula ???????
?+?tstsnLevenshtei ),(1 , where any pairof strings with a fuzzy match score less than 0.875was not considered to be a match.
The intent ofdividing by the length of both names is to mini-mize the weight of a mismatched character inlonger strings.For the purposes of defining recall and preci-sion, we ignored all issues dealing with the factthat many English names correctly matched morethan one Arabic name, and that many Arabicnames correctly matched more than one Englishname.
The number of correct matches is the num-ber of correct matches for each Arabic name,summed across all Arabic names having one ormore matches.
Recall R is defined as the numberof correctly matched English names divided by thenumber of available correct English matches in thetest set.
Precision P is defined as the total numberof correct names returned by the algorithm dividedby the total number of names returned.
The F-score is( )RPPR+?2 .Figure 5 shows the results obtained from thefour algorithms that were tested.
Smith-Watermanis based on Levenshtein edit-distance algorithm,with some parameterization of the gap score.SLIM is an iterative statistical learning algorithmbased on a variety of estimation-maximization inwhich a Levenshtein edit-distance matrix is itera-tively processed to find the statistical probabilitiesof the overlap between two strings.
Jaro is a typen-gram algorithm which measures the number andthe order of the common characters between twostrings.
Needleman-Wunsch from Cohen et al?s(2003) SecondString Java code library is the Javaimplementation referred to as ?Levenshtein edit473distance?
in this report.
The Levenshtein algo-rithms clearly out performed the other metrics.Algorithm Recall Precision F-scoreSmith Waterman 14/29 14/18 0.5957SLIM 3/29 3/8 0.1622Jaro 8/29 8/11 0.4NeedlemanWunsch  19/29 19/23 0.7308Figure 5: Comparison of string similarity metrics4 Motivation of enhancementsOne insight is that each letter in an Arabicname has more than one possible letter in its Eng-lish representation.
For instance, the first letter offormer Egyptian president Gamal Abd Al-Nasser?sfirst name is written with the Arabic letter  ?
?,which in most other dialects of Arabic is pro-nounced either as [??]
or [?
], most closely resem-bling the English pronunciation of the letter ?j?.As previously noted, ??
has the received pronun-ciation of [q], but in many dialects it is pronouncedas [g], just like the Egyptian pronunciation of Nas-ser?s first name Gamal.
The conclusion is thatthere is no principled way to predict a single repre-sentation in English for an Arabic letter.Similarly, Arabic representations of non-nativenames are not entirely predictable.
Accented syl-lables will be given a long vowel, but in longernames, different writers will place the long vowelsshowing the accented syllables in different places.We observed six different ways to represent thename Milosevic in Arabic.The full set of insights and ?real-world?
knowl-edge of the craft for representing foreign names inArabic and English is summarized in figure 6.These rules are based on first author Dr. AndrewFreeman?s1 experience with reading and translatingArabic language texts for more than 16 years.1) The hamza (?)
and the ?ayn (?)
willoften appear in English language textsas an apostrophe or as the vowel thatfollows.2) Names not native to Arabic will have along vowel or diphthong for accentedsyllables represented by ?w,?
?y?
or ?A.3) The high front un-rounded diphthong(?i,?
?ay?, ?igh?)
found in non-Arabicnames will often be represented with analif-yaa (???)
sequence in the Arabic1 Dr. Freeman?s PhD dissertation was on Arabic dialectology.script.4) The back rounded diphthongs, (ow, au,oo) will be represented with a single?waw?
in Arabic.5) The Roman scripts letters ?p?
and ?v?are represented by ?b?
and ?f?
in Arabic.The English letter ?x?
will appear as thesequence ?ks?
in Arabic6) Silent letters, such as final ?e?
and in-ternal ?gh?
in English names will notappear in the Arabic script.7) Doubled English letters will not be rep-resented in the Arabic script.8) Many Arabic names will not have anyshort vowels represented.9) The ?ch?
in the English name ?Richard?will be represented with the two charac-ter sequence ?t?
(?)
and ?sh?
(?).
Thename ?Buchanan?
will be represented inArabic with the letter ?k?
(?
).Figure 6: Rules for Arabic and English representations5 Implementation of the enhancements5.1 Character Equivalence Classes (CEQ):The implementation of the enhancements hassix parts.
We replaced the comparison for thecharacter match in the Levenshtein algorithm witha function Ar(si, tj ) that returns zero if the charactertj from the English string is in the match set for theArabic character si;, otherwise it returns a one.Figure 7: Cross linguistic LevenshteinString similarity measures require the strings tohave the same character set, and we chose to usetransliterated Arabic so that investigators whocould not read Arabic script could still view andunderstand the results.
The full set of transliteratedArabic equivalence classes is shown in Figure 8.The set was intentionally designed to handle Ara-bic text transliterated into either the Buckwalterfor each i from 0 to |s|for each j from 0 to |t|levenshtein(0; 0) = 0levenshtein(i; 0) = ilevenshtein(0;j) = jlevenshtein (i;j) =min[levenshtein (i ?
1; j) + 1;levenshtein(i; j ?
1) + 1;levenshtein(i ?
1; j ?
1) + Ar(si; tj )]474transliteration (Buckwalter, 2002) or the defaultsetting of the transliteration software developed byBasis Technology (Basis, 2004).5.2 Normalizing the Arabic stringThe settings used with the Basis Artrans trans-literation tool transforms certain Arabic letters intoEnglish digraphs with the appropriate two charac-ters from the following set: (kh, sh, th, dh).
TheBuckwalter transliteration method requires a one-to-one and recoverable mapping from the Arabicscript to the transliterated script.
We transformedthese characters into the Basis representation withregular expressions.
These regular expressions areshown in figure 9 as perl script.Translit-erationEnglish equivalence class Arabicletter'  ',a ,A,e,E,i,I,o,O,u,U  ?| ',a ,A,e ,E,i ,I,o ,O,u ,U ?> ',a ,A,e ,E,i ,I,o ,O,u ,U ?& ',a ,A,e ,E,i ,I,o ,O,u ,U ?< ',a ,A,e ,E,i ,I,o ,O,u ,U ?}
',a ,A,e ,E,i ,I,o ,O,u ,U ?A ',a ,A,e ,E,i ,I,o ,O,u ,U ?b b ,B,p ,P,v,V ?p a ,e ?+ a ,e ?t t,T ?v t ,T ?j j,J,g,G ?
?H h, H ?
?x k, K ?
?d d, D ?
* d, D ?r r, R ?z z, Z ?s s, S,c, C ?$ s, S ?S s, S ?D d, D ?T t, T ?Z z, Z,d, D ?E ',`,c,a,A,e,E,i,I,o,O,u,U ?` ',`,c,a,A,e,E,i,I,o,O,u,U ?g g, G ?f f, F,v, V ?q q, Q, g, G,k, K ?k k, K,c, C,S, s ?l l, L ?m m, M ?n n, N ?h h, H ?
?w w, W,u, u,o, O, 0 ?y y, Y, i, I, e, E, ,j, J ?Y a, A,e, E,i, I, o,O,u, U ?a a, e ?
?i i, e ?
?u u, o ?
?Figure 8: Arabic to English character equivalence setsFigure 9.
Normalizing the Arabic5.3 Normalizing the English stringNormalization enhancements were aimed atmaking the English string more closely match thetransliterated form of the Arabic string.
These cor-respond to points 2 through 7 of the list in Figure6.
The perl code that implemented these transfor-mations is shown in figure 10.Figure 10.
Normalizing the English5.4 Normalizing the vowel representationsNormalization of the vowel representations isbased on two observations that correspond topoints 2 and 8 of Figure 6.
Figure 11 shows someEnglish names represented in Arabic transliteratedusing the Buckwalter transliteration method.Name in English Name in Arabic ArabictransliterationBill Clinton ???
???????
byl klyntwnColin Powell ?????
????
kwlyn bAwl$s2 =~ s/(a|e|i|A|E|I)(e|i|y)/y/g;# hi dipthongs go to y in Arabic$s2 =~ s/(e|a|o)(u|w|o)/w/g;# lo dipthongs go to w in Arabic$s2 =~ s/(P|p)h/f/g;  # ph -> f in Arabic$s2 =~ s/(S|s)ch/sh/g; # sch is sh$s2 =~ s/(C|c)h/tsh/g; # ch is tsh or k ,# we catch the "k" on the pass$s2 =~ s/-//g; # eliminate all hyphens$s2 =~ s/x/ks/g; # x->ks in Arabic$s2 =~ s/e( |$)/$1/g; # the silent final e$s2 =~ s/(\S)\1/$1/g; # eliminate duplicates$s2 =~ s/(\S)gh/$1/g; # eliminate silent gh$s2 =~ s/\s//g;  # eliminate white space$s2 =~ s/(\.|,|;)//g; # eliminate punctuation$s1 =~ s/\$/sh/g; #  normalize Buckwalter$s1 =~ s/v/th/g; # normalize Buckwalter$s1 =~ s/\*/dh/g; # normalize Buckwalter$s1 =~ s/x/kh/g; # normalize Buckwalter$s1 =~ s/(F|K|N|o|~)//g; #  remove case vowels,# the shadda and the sukuun$s1 =~ s/\'aa/\|/g; # normalize basis w/# Buckwalter madda$s1 =~ s/(U|W|I|A)/A/g; # normalize  hamza$s1 =~ s/_//; # eliminate underscores$s1 =~ s/\s//g; # eliminate white space475Richard Cheney ???????
?????
rytshArdtshynyFigure 11.
English names as represented in ArabicAll full, accented vowels are represented in theArabic as a long vowel or diphthong.
This vowelor diphthong will appear in the transliterated un-vocalized text as either a ?w,?
?y?
or ?A.?
Unac-cented short vowels such as the ?e?
found in thesecond syllable of ?Powell?
are not represented inArabic.
Contrast figure 11 with the data in figure12.Name inArabicArabictransliteration Name in English??????????
??
?mSTfY AlshykhdybMustafa al SheikhDeeb????
????
mHmd EATf Muhammad Atef????
?????
Hsny mbArk Hosni MubarakFigure 12.
Arabic names as represented in EnglishThe Arabic only has the lengtheners ?y?, ?w?,or ?A?
where there are lexically determined longvowels or diphthongs in Arabic.
The English rep-resentation of these names must contain a vowelfor every syllable.
The edit-distance score formatching ?Muhammad?
with ?mHmd?
will failsince only 4 out of 7 characters match.
Loweringthe match threshold will raise the recall score whilelowering the precision score.
Stripping all vowelsfrom both strings will raise the precision on thematches for Arabic names in English, but willlower the precision for English names in Arabic.Figure 13.
Algorithm for retaining matching vowelsThe algorithm presented in figure 13 retainsonly those vowels that are represented in bothstrings.
The algorithm is a variant of a sorted filemerge.5.5 Normalizing ?ch?
representations with aseparate passThis enhancement requires a separate pass.
Thename ?Buchanan?
is represented in Arabic as ?by-wkAnAn?
and ?Richard?
is ?rytshArd.?
Thus,whichever choice the software makes for the cor-rect value of the English substring ?ch,?
it willchoose incorrectly some significant number oftimes.
In one pass, every ?ch?
in the English stringgets mapped to ?tsh.?
In a separate pass, every?ch?
in the English string is transformed into a ?k.
?5.6 Light StemmingThe light stemming performed here was to re-move the first letter of the transliterated Arabicname if it matched the prefixes ?b,?
?l?
or ?w?
andrun the algorithm another time if the match scorewas below the match threshold but above anotherlower threshold.
The first two items are preposi-tions that attach to any noun.
The third is a con-junction that attaches to any word.
Full stemmingfor Arabic is a separate and non-trivial problem.6 ResultsThe algorithm with all enhancements was im-plemented in perl and in Java.
Figure 14 presentsthe results of the enhanced algorithm on the origi-nal baseline as compared with the baseline algo-rithm.
The enhancements improved the F-score by22%.Algorithm Recall Precision F-scoreBaseline  19/29 19/23 0.7308Enhancements 29/29 29/32 0.9508Figure 14.
Enhanced edit distance on original data set6.1 Results with a larger data setAfter trying the algorithm out on a couple more?toy?
data sets with similar results, we used a morerealistic data set, which I will call the TDT dataset.
This data set was composed of 577 Arabicnames and 968 English names that had been manu-ally extracted from approximately 250 Arabic andEnglish news articles on common topics in a NISTTDT corpus.
There are 272 common names.
Thenumber of strings on the English side that correctlyFor  each i from 0 to min(|Estring|, |Astring|),each j from 0 to min(|Estring|, |Astring|)if Astringi equals EstringjOutstringi = Estringi increment i and jif vowel(Astringi) and vowel(Estringj)Outstringi = Estringi increment i and jif  not vowel(Astringi) and vowel(Estringj)increment j but not iif j < |Estring|Outstringi = Estring; increment i and jotherwiseOutstringi = Estringi; increment i and jFinally if there is anything left of Estring,strip all vowels from what is leftappend Estring to end of Outstring476match an Arabic language string is 591.
The actualnumber of matches in the set is 641, since manyArabic strings match to the same set of Englishnames.
For instance, ?Edmond Pope?
has ninevariants in English and six variants in Arabic.
Thisgives 36 correct matches for the six Arabic spell-ings of Edmond Pope.We varied the match threshold for variouscombinations of the described enhancements.
Theplots of the F-score, precision and recall from theseexperiments using the TDT data set are shown infigures 15, 16, and 17.7 DiscussionFigure 15 shows that simply adding the ?char-acter equivalency classes?
(CEQ) to the baselinealgorithm boosts the F-score from around 48% toaround 72%.
Adding all other enhancements to thebaseline algorithm, without adding CEQ only im-proves the f-score marginally.
Combining thesesame enhancements with the CEQ raises the f-score by roughly 7% to almost 80%.When including CEQ, the algorithm has a peakperformance with a threshold near 85%.
WhenCEQ is not included, the algorithm has a peak per-formance when the match threshold is around 70%.The baseline algorithm will declare that the stringsmatch at a cutoff of 70%.
Because we are normal-izing by dividing by the lengths of both strings,this allows strings to match when half of their let-ters do not match.
The CEQ forces a structureonto which characters are an allowable mismatchbefore the threshold is applied.
This apparentlyleads to a reduction in the number allowable mis-matches when the match threshold is tested.The time and space complexity of the baselineLevenshtein algorithm is a function of the length ofthe two input strings, being |s| * |t|.
This makes thetime complexity (N2) where N is the size of theaverage input string.
The enhancements describedhere add to the time complexity.
The increase isan average two or three extra compares per charac-ter and thus can be factored out of any equation.The new time complexity is K(|s|*|t|) where K >=3.What we do here is the opposite of the approachtaken by the Soundex and Editex algorithms.
Theytry to reduce the complexity by collapsing groupsof characters into a single super-class of characters.The algorithm here does some of that with thesteps that normalize the strings.
However, thelargest boost in performance is with CEQ, whichexpands the number of allowable cross-languagematches for many characters.One could expect that increasing the allowablenumber of matches would over-generate, raisingthe recall while lowering the precision.Referring to Figure 8, we see that?s ome Arabicgraphemes map to overlapping sets of characters inthe English language strings.Arabic ??
can be realized, as either [j] or [g],and one of the reflexes in English for Arabic ?
canbe [g] as well.
How do we differentiate the onefrom the other?
Quite simply, the Arabic input isnot random data.
Those dialects that produce ?
asa [g] will as a rule not produce ??
as [g] and viceversa.
The Arabic pronunciation of the string de-termines the correct alternation of the two charac-ters for us as it is written in English.
On a string-by-string basis, it is very unlikely that the two rep-resentations will conflict.
The numbers show thatby adding CEQ, the baseline algorithm?s recall atthreshold of 72.5%, goes from 57% to around 67%at a threshold of 85% for Arabic to English cross-linguistic name matching.
Combining all of theenhancements raises the recall at a threshold of85%, to 82%.
As previously noted, augmentingthe baseline algorithm with all enhancements ex-cept CEQ, does improve the performance dramati-cally.
CEQ combines well with the otherenhancements.It is true that there is room for a lot improve-ment with an f-score of 80%.
However, anyonedoing cross-linguistic name matches would proba-bly benefit by implementing some form of thecharacter equivalence classes detailed here.477Figure 15: F-score by match threshold00.10.20.30.40.50.60.70.80.90.875 0.85 0.825 0.8 0.775 0.75 0.725 0.7ThresholdF-scoreF all enh F str normF vowel dance F String Norm & Vowel DanceF all No Eq Class F baselineF Eq Class only F EC StrN VowDFigure 16: Recall by threshold00.10.20.30.40.50.60.70.80.910.875 0.85 0.825 0.8 0.775 0.75 0.725 0.7ThresholdRR baseline R StrNrm & Vow elD R eq class onlyR EC StrN Vow D R allFigure 17: Precision by threshold00.10.20.30.40.50.60.70.80.910.875 0.85 0.825 0.8 0.775 0.75 0.725 0.7ThresholdPP  eq class only P all P baseline P all No Eq ClassReferencesBasis Technology.
2004.
Arabic Transliteration Mod-ule.
Artrans documentation.
(The documentation  isavailable for download athttp://www.basistech.com/arabic-editor.
)Bilenko, Mikael, Mooney, Ray, Cohen, William W.,Ravikumar, Pradeep and Fienberg, Steve.
2003.Adaptive Name-Matching.
in Information Integrationin IEEE Intelligent Systems, 18(5): 16-23.Buckwalter, Tim.
2002.
Arabic Transliteration.http://www.qamus.org/transliteration.htm.Cohen, William W., Ravikumar, Pradeep and Fienberg,Steve.
2003.
A Comparison of String Distance Met-rics for Name-Matching Tasks.
IIWeb 2003: 73-78.Jackson, Peter and Moulinier, Isabelle.
2002 .
NaturalLanguage Processing for Online Applications: TextRetrieval, Extraction, and Categorization (NaturalLanguage Processing, 5).
John Benjamins Publish-ing.Jurafsky, Daniel, and James H. Martin.
2000.
Speechand Language Processing: An Introduction to Natu-ral Language Processing, Speech Recognition, andComputational Linguistics.
Prentice-Hall.Knuth, Donald E. 1973.
The Art of Computer Pro-gramming, Volume 3: Sorting and Searching.
.
Addi-son-Wesley Publishing Company,Ukonnen, E. 1992.
Approximate string-matching withq-grams and maximal matches.
Theoretical Com-puter Science, 92: 191-211.Wright, W.  1967.
A Grammar of the Arabic Language.Cambridge.
Cambridge University Press.Zobel, Justin and Dart, Philip.
1996.
Phonetic stringmatching: Lessons from information retrieval.inProceedings of the Eighteenth ACM SIGIR Interna-tional Conference on Research and Development inInformation Retrieval, Zurich, Switzerland, August1996, pp.
166-173.478
