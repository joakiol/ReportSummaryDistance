A Generalized Greibach Normal Formfor Definite Clause GrammarsMarc DymetmanCCRIT, Communications Canada1575 boul.
ChomedeyLaval (Qutbec) H7V 2X2, Canadadymetman@ccrit.doc.caAbstractAn arbitrary definite clause grammar can be transforaledinto a so-called Generalized Greibach Normal Form(GGNF), a generalization f the classical Greibach Nor-mat Form (GNF) for context-free grammars.The normalized efinite clause grammar is declara-tively equivalent to the original definite clause grammar,that is, it assigns the same analyses to the same strings.Offline-parsability of the original grammar is reflected inan elementary textual property of the transformed gram-mar.
When this property holds, a direct (top-down) Pro-log implementation f the normalized grammar solvesthe parsing problem: all solutions are enumerated onbacktracking and execution terminates.When specialized to the simpler case of context-freegrammars, the GGNF provides a variant to file GNF,where the transformed context-free grammar not onlygenerates the same strings as the original grammar, butalso preserves their degrees of ambiguity (this last prop-erty does not hold for the GNF).The GGNF seems to be the first normal form resultfor DCGs.
It provides an explicit factorization of thepotential sources of uudeeidability for the parsing prob-lem, and offers valuable insights on the computationalstructure of unification grammars in general.1 IntroductionFrom the point of view of decidability, the parsing prob-lem with a definite clause grammar is much more com-plex than the corresponding problem with a context-freegrammar.
The parsing problem with a context-live gram-mar is decidable, i.e.
there exists an algorithm which de-termines whethex a given string is accepted or not by thegrammar; t by contrast, he parsing problem with a deft-nite clause grammar is undecidable, ven if the auxiliaryProlog predicates are restricted to be unifications.
2t For instance the standard top-down parsing algorithm usinga GNF of the grammar.2This assumption, or a similar one, is always made whenthe decidability proparfies of logical (or unification) grammarsare studied.
The reason is simple: if the auxiliary predicatesare  defined through an unrestricted Prolog program, there isno means of guaranteeing that calling some auxill~y predicatewill not result in nontexmination, forreasons quite independentfrom the structure of the grammar under consideration.
TheIn other words, there does not exist, in general, an al-gorithm for deciding whether a definil~ clause grammarDCGI accepts a string String, i.e.
whether there existssome linguistic structure S such that DCG1 "analysesString into S ' .
On the other hand, ander the condi-tion that DCCx is offline-parsable, that is, under thecondition that the context-free skeleton of DCG1 is notinfinitely ambiguous, then the parsing problem is indeeddecidable \[7\].The fact that the parsing problem with DCGt is de-cidable in theory should be carefully distinguished fromthe fact that a given algorithm for parsing is able to ex-ploit this potentiality.
A parsing algorithm for which thisis the case, that is, an algorithm which is able, for anyoffline-parsable DCGx, to decide whether a given stringis accepted or not by DCG1 is said to be strongly stable\[7\].
Most parsing algorithms are not strongly stable s, anotable xception being the "Earley deduction" algorithm\[7\], once modified according to the proposals in \[10\].
4Top-down implementations--and in particular thestandard Prolog implementation of a DCG---are espe-cially fragile in this respect, for they fail to terminate assoon as the grammar contains a left-recursive rule suchas:vp(VP2) ~ vp(VPt),pp(PP),{ combine(V P1, P P, V P2) }.In \[2\], automatic local transformations were performedon a DCG in order to eliminate some limited, but frequentin practice, types of left-recarsion i  such a way thatthe resulting rammar could be directly implemented inProlog.
This initial work led us naturally to the moregeneral question:Question: Is it possible to automatically transform anassumption that auxiliary predicates are unifications takes careof this interfering problem.aAn important cl~s of offline-parsable grammars---whichwe will call here the class of explicitly offline-parsablegrammars--is the class of DCGs whose context free skeletonis a proper context-free grammar, that is, a grammar withoutrules of the type A ~ \[ \] (empty productions) or of the typeA ~ B (chain rules) \[1\].
This subclass is much less problem-atic to parse than the full class of offline-parsuble DCGs (forinstance a left-comer parsing algorithm will work).
However,it is an easy consequence of the GGNF result that, for anyoffline-parsable DCG, there exists an explicitly offline-parsableDCG equivalent to it.4Stuart Shieber, personal communication.AcrEs DE COLIN'G-92, NANT~.s, 23-28 hOt\]T 1992 3 6 6 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992arbitrary oflliue-parsable DUG1 into an equivalentDCG2 in such a way that the standard top-down ex-ecution of DCG2 terminates (in success or failure)for any given input string?To answer this question (in the positive), we have takenan indirect route, and, adapting to the case of definiteclause grammars ome of the standard techniques usedto transform context-free grammars into GNF, s haveestablished the following results:1.
Generalized Greibach Normal Form for definiteclause grammars It is possible to translorm anydefinite clause grammar DCG1 (oflline-parsable ornot) into a definite clause grammar DUG2 equiva-lent to DCGI~at  is, assigning the same analysesto the same strings--and which is in a certain form,called the Generalized Greibach Normal Form, orGGNF, of DCG1.2.
Explicit representation of offline-parsability in theGGNF The offline-parsability of DCGI is equiva-lent to an elementary textual property of DCG2: theso-called "unit subgrammar" contains no cycle, i.e.no nonterminal calling itself directly or indirectly.
~3.
Termination condition for top-down parsing with theGGNF If DCG1 is offline-parsable, and such thatits auxiliary predicates it are unifications, then, forany input String, the standard top-down (Prulog)execution of DCG2 enumerates all solutions to theparsing problem for String and terminates.2 The Generalized Greibach NormalForm for Definite Clause Gram-mars2.1 Definite Grammar SchemesAs usually defined (see \[6\]), a definite clause grammarconsists in two separate sets of clauses:1.
Nonterminal clauses, written as:a(Tl .
.
.
.
.
7h) --, a ,where n is a nonterminal, T~ .
.
.
.
.
T .
am terms (vari-able.s, constants, or complex terms), and a is a se-quence of "terminal goals" \[term\],  of "nontenni-nal goals" b(T{,..., 7; ' ) ,  and of"auxiliary predicategoals" {p(Ti', .
.
.
.
T~')}.SSee the Appendix for some indications on the methodsused.SThus.
a side-effect of the GGNF is to provide a deci-sion procedure for the problem of knowing whether a DCG isoffline-parsable or not.
This is equivalent to deciding whether aeomext-free grammar is infinitely ambiguous or not, a problemthe decidability of which seems to be "quasi.folk-knowledge",although I was innocent of this until the fact was brought o myattention by Yves Schabes, among others: the proof is more orless implicit in the usual technique to make a CFG "cycle-free",\[1, p. 150\] .
See also \[4\] for a special case of this problem.(Caveat.
The notion of "cycle" in "cycle-free" is technicallydifferent from the notion used here, which simply means: cyclein the graph associated with the relation "callable from".
Seenote 10.)2.
Auxiliary clauses, constituting an autonomous def-inite program, defining rite auxiliary predicates ap~pcaring in the right-hand sides of nonterminal rules.These clauses am written:p(7~ .
.
.
.
.
7)) :- f~ ,where fl is some sequence of predicate goals.A definite grammar scheme DGS is syntactically iden-tical to a definite clause grammar, except for the fact that:1.
Tile '/} arguments appearing in the nonterminal ndauxiliary predicate goals ,are restricted to beiug vari-ables: no constants or complex terms are allowed;2.
Only nonterminal clauses appear in the definitegrannnar scheme, but no auxiliary clause; the auxil-iary predicates which may appear in the right-handsides of clauses do not receive a definition.A definite grammar scheme can be seen as an un-completely specified definite clause grammar, that is, adefinite clause granmtar "lacking" a definition for theauxiliary predicates {p(Xt .
.
.
.
.
X, )}  that it "uses".
Theauxiliary predicates are "free": the interpretation of p isnot fixed a priori, but can be an arbitrarily chosen n-aryrelation on a certain Herbrand universe of terms.
7Example 1 The following clauses define a definitegrammar scheme DGSI :sa l (X)- -*  a3(E),  a l(A), a2(B), {q(E,A, B, X)}a l (X)  ~ \[oh\], {pl(X)}.2 (X)  ~ \[dull, {p2(X)}a3(X) ~ \[ \], {p3(X)}In this definite grammar scheme, only variables appearas argutnents; the auxiliary predicates pl ,  p2, p3 and qdo not receive a definition.If a definite program definiug these auxiliary predicatesis added to the definite grammar scheme, one obtains afull-fledged efinite clause grammar, which can be inter-preted in the usual manner.Conversely, every definite clause grammar can be seenas the conjunction of a definite grammar scheme and ofa definite clause program.
In order to do so, a minortransforntation must be performed: each complex termT appearing as an argument in the head or body of anonterminal clause must be replaced by a variable X ,this variable being implicitly constrained to unify with Tthrough the addition of an ad-hoc unification goal in thebody of the clause (see \[3\]).rThe domain of interpretation can in fact be any set.
Takingit to be the Ilerbrand universe over a certain vocabulary offunctional symbols permits to "simulate" a DCG, by fixing theinterpretation of the free auxiliary predicates in this domain.Another linguistically relevant domain of interpretation is theset of directed acyclic graphs built over a certain vocabularyof labels and atomic symbols, which pemtits tile simulation ofunification grammars of the PATR-II type.SThe usual symbol for the initial nonterminal is s; we preferto use al for reasons of notational coherence.ACRES DE COLING-92, NAhq~S, 23-28 AO~r 1992 3 6 7 PROC, O1: COLING-92, NAh'rt:,s, AUG. 23-28, 1992Example 2 Consider the following definite clause gram-mar:al(cons(B, A)) ---, a3(E), al(A), a2(B).al (X)  - .
\[oh\], {pl(x)}.a2(f) ~ toni\].a3(X) ---* \[ \], {p3(X)}.pl(nil).p3(r).Let us define two new predicates p2 and q by the fol-lowing clauses:p2(/).q(E, A, B, cons(B, A)).then the definite clause grammar above can be rewrittenas:al(X) ---, a3(E), al(A), a2(B), {q(E, A, B, X)}.a l(X) - .
\[oh\], {pl(x)}.a2(X) ---, \[oui\], {p2(X)}.a3(X) --* \[ 1, {p3(x)}.pl(nil).p2(f).pS(r).q(E, A, B, cons(B, A)).that is, in the form of a definite grammar scheme towhich has been added a set of auxiliary clauses definingits auxiliary predicates.
This definite grammar scheme isin fact identical with DGSI (see previous example).In the sequel of this paper, we will be interested, notdirectly in transformations of definite clause grammars,but in transformations ofdefinite grammar schemes.
Thetransformation f a definite grammar scheme DGS intoDGS ~ will respect the following conditions:?
The auxiliary predicates of DGS and of DGS'  arethe same;?
For any definite clause program P which definesthe auxiliary predicates in DGS (and therefore alsothose in DGSI), the definite clause grammar DCGobtained through the adjunction of P to DGShas the same denotational semantics as the definiteclause grammar DCG' obtained through the adjunc-tion of P to DGS j.Under the preceding conditions, DGS and DGS' arestud to be equivalent definite grammar schemes.The grammar Vansformatious thus defined are, in acertain sense, universal transformations:, they are validindependently from the interpretation given to the auxil-iary predicates.2.2 GGNF for def in i te c lause grammarsStructure of the GGNF The definite grammar schemeDGS, on the terminal vocabulary V, having Q as itsset of auxiliary predicates, is said to be in GeneralizedGreibach Normal Form if:1.
The nonterminals of DGS are partitioned in threedistinct subsets: A = {al}, called the initial set; U,called the set of unit nonterminals; N, called the setof co-unit nonterminals.2.
The rules of DGS are partitioned into three groupsof rules, called the factorization group (defining theelements of A), the unit group (defining the elementsof U), and the co-unit group (defining the elementsof N), graphically presented in the following man-net:factorization rules: definition of the elements of Aunit rules: definition of the elements of Uco-unit rules: definition of the elements of N3.
Factofization rules are taken among the two follow-ing rules:al (X l  .
.
.
.
.
X . )
--, nl(X1 .
.
.
.
.
X,~) ,and/or:a l (X l , .
.
.
,Xn)  "~ u l (X l  .
.
.
.
.
Xn) ,where nl  E N and ul  E U, and where n E N isthe arity of the initial nonterminal l .4.
Unit rules are of the form:u(Xl .
.
.
.
.
X , , )  --* t l  ,where u E U is a unit nonterminal of arity m, m EN, and where H is a finite sequence of nonterminalunit goals of U, of auxiliary predicates of Q, or isthe empty string \[\].
The group of unit rules forms asubscheme of the GGNF definite grammar scheme(see below).5.
Co-unit rules are of the form:n( Xt  , .
.
.
, X~ ) --+ \[term\] Af ,where n E N is a co-unit nonterminal of arity k,k E N. where \[term\] E V and where .hi is a finitesequence of terminal goals of V, of nonterminal unitgoals of U, of auxiliary predicates of Q, or of non-terminal co-unit goals of N.6.
The context-free skeleton of DGS,  considered as acontext-free grammar, is reduced.
9?A context-free grammar is said to be reduced iff it all itsnonterminals are accessible from al and are productive (see \[5,pp.
73-78\])ACrEs DE COLING-92, Nx~rI~s.
23-28 AO~T 1992 3 6 8 P~toc.
Or COL1NG-92, NANTES, AU(~.
23-28, 1992The nonterminals of A, U, and N am defined in func-tion of one another, as well as in function of \[ \], of theterminals of V, and of the auxiliary predicates of Q, ac-cording to the definitional hierarchy illastrated below:G iv :o : :  t i :2.3 Structure of the unit subscheme andoff l ine-parsabil ityOne can remark that:?
The group of unit rules is closed: file definition ofunit nontenninals involves only unit nonterminals(but no co-unit nonterminal).
For this reason, thegroup of unit roles is called the unit subscheme (or,loosely, the unit subgrammar) of the GGNF definitegrammar scheme.?
The unit subscheme can only generate the emptystring \[ \].The unit subscheme of the GGNF is said to contain acycle iff there exists a unit nonterminal u(X1, ... .
X,,~)which "calls itself recursively", directly or indirectly, in-side this group./?
One can show that this property isequivalent to the fact that the context-free skeleton ofDGS is infinitely ambiguous, or, in other words, to thefact that DGS is not offline-parsable \[3\].2.4 ' l op -down pars ing  w i th  the GGNFLet DGS be a definite grammar scheme in GGNF, havingQ for its set of auxiliary predicates.
Assume that everyelement p of Q, of arity n, is defined tlLrough a headclause t ~, of the form:p(TI .
.
.
.
.
T,,).where 7'1, .
.
.
,Tn can be any terms; In other words, theauxiliary predicates are constrained tobe simply unifica-tions.
Let DCG be the definite clause grammar obtainedthrough adjunction of these clauses to DGS.
The gram-mar DCG has the following properties:t?For example, the scheme:t~t(X) ~ u2(g), u3(Z) .
.
.
.,,2(x) ~ udY).
m(Z) ....contains acycle in ul ?n We use the terminology 'head clause' for a clause withoutbody.
A more standard terminology would be 'unit clause',but this would conflict with our technical notion of "unit' (anonterminai generating the empty string \[ \]).I.
If tile unit subscheme does not contain a cycle, then,for arty input string Siring, the standard top-downparsing algorithm terminates, after enumerating allthe analyses for Siring;2.
If the unit subscheme contains a cycle, the top-downparsing algorithm can terminate or not, dependingon the definition given to the auxiliary predicates.We give below three exmnples of definite grammarschemes, and of the equivalent definite grammar schemesin GGNF.2.5 ExamplesExample 3 Consider the definite grammar schemeDGS1 given in Example 1, repeated below:a l (X ) -~ a3(E), al(A), a2(B), {q(E,A, B,X)}ul(X) ~ \[oh\], {pl(X)}a2(X) --, \[dull, {p2(X)}~3(x) - ,  \[ j, {p3(x))The following definite grammar scheme DGS;u is inGGNF and is equivalent to DGSI:al (X)  --~ n l (X)?n l (X)  --* \[oh\], {pl(X)}n l (X)  --* \[dill, {pl(Y)}, h(Y,X)h(Y,X) ~ \[dull, {p2(B)}, {p3(E)},{q(E, Y, I3, X)}h(Y,X)-- ,  \[oui\], {p2(B)}, {p3(E)},{q(E, 1I, B, Z)}, h(Z, X)Suppose P is any auxiliary definite program whichdefines the auxiliary predicates pl,p2,p3, q.
Then thedefinite clause grammars DCGt and DCG2, obtainedby adjunction of this program to DGSt and DGS2, re-spectively, are equivalent.The unit subscheme of DGS~ does not contain a cy-cle (it is empty12).
One can conclude that DCGI, aswell as DCG~, are offline-parsable.
If, moreover, it isassumed that P defines the auxiliary predicates as be-ing unifications, then it can be concluded that top-downparsing with DCG~ will enumerate all possible analysesfor a given string and terminate.For instance, assume that the auxiliary program con-sists in the following four clauses (see Example 2):pl(nil).p2(f).p3(r).q(E, A, fl, cons(B, A)).12See note 14.ACRES DE COLING-92, NAhn'as, 23-28 AOl)r 1992 3 6 9 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992Then, DCGt becomes:a l (X ) - *  a3(E), at(A), a2(B), {q(E,A,B,X)}.al(X)--~ \[oh\], {pl(X)}.a2(X) ---, \[oui\], {p2(X)}.a3(X)- - ,  \[1, {p3(X)}.pt(nil).p2(f).p3(r).q(E, A, B, cons(B, A)).and DCG2:at(X)  ---* n l (X)nt (X)  ---* \[ohl, {pl(X)}nl(X)---.
* \[oh\], {pt(Y)}, h(Y,X)h(Y, X )~ \[null, {p2(B)}, {p3(E)\],{q(E, Y, B, X)}h(Y, X)--~ \[null, {p2(B)}, {p3(E)},{q(E, V, B, Z)}, h(Z, X)pl(nit).p2(f).p3(r).q(E, A, B, cons(B, A)).These two definite clause grammars are declarativelyequivalent.
They both accept strings of the form:oh oui ... ouiwhere oui is repeated k times, k E N, and assign to eachof these strings the (single) analysis represented by theterm:i f k=0 : nil,i fk  > 0 : cons(f .... eons(f, nil)...)(cons repeated k times.
)On the other hand, from the operational point of view,if a top-down parsing algorithm is used, DCGt loops onany input string, ts while DCG2 enumerates all solutionson backtracking---here, z ro or one solution, dependingon whether the string is in the language generated by thegrammar--and terminates.Example 4 Consider the following definite grammarscheme DGSz:al(X)---, \[null, at(Y), {p(X,Y)}~l(X) --.
~2(Y), {~(X,Y)}a2(X) .-* \[\], {q(X)}taRemark that DCG1 is left recursive in a "vicious" (covert)way: nontexminal l calls itself, net immediately, but arc*calling a3, which does not consume anything in the input string.The GGNF of DGSs is DGS4 below:al(X) --, nt(X)al(X)  ---* ut (X)ul(X) --* u2(Y), {r(X,Y)}u2(x) ~ \[\], {q(X)\]nt(X) --* \[ouil, nl(Y), {v(x, Y)}nl(X) --, \[oui\], ulW), {p(X, Y)}From an inspection of DGS4 it can be concluded that:?
The unit subscheme does not contain a cycle} 4Therefore DGS4, and consequently DGSa, isoffline-parsable.?
If DCG3 (resp.
DCG4) is the definite clause gram-mar obtained through the adjunction to SDG3 (resp.SDG4) of clauses defining the auxiliary predicatesp, q, r, then DCG3 and DCG4 are equivalent; Fur-thermore, ff these definitions make p, q, r unificationpredicates, then top-down parsing with DCG4 ter-minates, after enumerating all solutions.Example 5 Consider the following definite grammarscheme DGS~:al (X)  --* \[oh\], {p(X)}at(X)  ---, al(Y), {q(X,Y)}The GGNF of DGS~ is DGS6 given below:al(X) ---, nt(X)u(X, X) ~ \[\]u(X,Y) --* {q(X,Z)}, u(Z,Y)nl(X) ~ \[oh\], {PW)}, u(X, Y)From an inspection of DGS6 it can be concluded that:?
The unit subscheme contains acycle.
Therefore nei-ther DGS6 nor DGS~ are oflline-parsable.?
If DCG5 (resp.
DCG6) is the definite clause gram-mar obtained through the adjunction to DGS5 (resp.DGS~) of clauses defining the auxiliary predicatesp, q, then DCG~ and DCG6 are equivalent;?
Even if p,q are defined as unifications, top-downparsing with DCG6 may not terminate.Regarding the last point, let us show that differentdefinitions for p and q result in different computationalbehaviors:a4 It can easily be shown that, iff this is the ease, then theunit nonterminals can be completely eliminated, as in the caseof example 3 above.ACn'ES DE COLING-92, NANTES, 23-28 AOUT 1992 3 7 0 PRoc.
OF COLING-92, NANTES, Auo.
23-28.
1992Situation 1 Assume that p,q  are definedthrough the following clauses:p(ni l) .q ( f (X ) ,  X ) .In such a situation, top-down parsing withDCG6 of the input string oh does notterminate: an infinite number of solutions(X  = nil,  X = f (n i l ) ,  .
.
.)
are enumeratedon backtracking and the program loops, t5Situation 2 Assume that p,q are defined bythe following clauses:p(X) :- fail.q(nil,  nil).The first clause defines p as being the'false' (omitting giving a clause for pwould have the same result).
In such asituation, top-down parsing with DCG6terminates.3 Conclusions:?
Few, if any, norn'tal form results for DCGs (and fortheir close relatives, unificatiun grammars) were previ-ously known.
The GGNF transformation can be appliedto any DCG, whether oflline-parsable or not.?
In the GGNF, the potential sources of undecidabilityof the parsing problem are factorized in the unit subgmm-mar, a grammar "over" the empty string \[ \].
The GGNFas a whole is oflline-parsable exactly when its unit sub-grammar is.
This is the case iff tile unit subgrammardoes not contain a nontenninal calling itself recursively.?
The GGNF seems to provide the closest analogue tothe GNF that one can hope to find for DCGs.
16?
If the DCG (or equivalently its GGNF) is oflline-parsable then top-down parsing with the GGNF finds allsolutions to the parsing problem and terminates.?
The transformatiou under GGNF can be specializedto the simpler case of a context-free grammar.
In thiscase, the GGNF provides a variant of the standard GNFpreserving degrees of ambiguity, t 7l~This is not the worst possible case: here, at least, a/l so~lutioos end up being enumerated on backtracking.
This wouldnot be the case with more complex definitions for p and q.leJustificatlon for this claim is given in \[3\].lrFor lack of space, this point was not discussed in the paper.Consider the context-free grammar GFG (which is the skeletonof example 5):al ~ \[oh\]a lga lThe GNF for this grantmar is fire grammar:al ~ \[oh\]The original grammar assigns an infinite degree of ambiguityto \[oh\], while its GNF does not (in fact it is easy to show thata GNF can never be infinitely ambiguous).
On the other hand,Appendix :  Some indicat ions on thetransformation methodWe can only give here some brief indications in tile hopethat rite interested reader will be motivated to look intothe full description given ill \[3\].
We start with somecomments on the GGNF in the CFG case and then moveon to the case of definite grammar schemes.CFGs, Algebraic Systems, and the GGNF.
The mostpowerful transformation methods existing for context-free grammars are "algebraic ("matrix based" \[8\]) onesrelying on the concepts of  formal  power  series and al-gebraic systems (see \[5, 91).
Using such concepts, acontext4ree grammar such as:al ~ ala2 I a2 I \ [ \ ]a~ --, \[v\]is refommlated into the algebraic system:al = a la2+a2+ la s = \[ v \]which represents a fixpoint equation in the variables (or"nontermitmls") a l ,a2  on a certain algebraic structure(a non-commutative s miring) of formal power seriesNoo<<V'~,  where Net is the set of non-negative in-tegers, extended to infinity, hfformally, an element ofN,,~<<V'>> represents a language on the vocabulary V(such that \[v\] E V), where each string in the languageis associated with a number, finite or infinite, which canbe interpreted as the degree of ambiguity of this stringrelative to the system (or, equivalently the correspondingCFG).In the example at hand, it can be easily verified that thefollowing assigments of formal power series to at,  a~:al = l+2\ [v \ ]+2\ [v \ ] ' J+2\ [v \ ]a+ ' ' "a2 ~ Colsatisfy the system, as In terms of rile corresponding CFG,this fact implies that (1) the entpty string \[ \] is recognizedexactly once by the grammar, and that each of the strings\[v\], \[v\]\[v\], \[v\]\[v\]iv\] .
.
.
.
.
is recognized exactly twice bytile gramutar.From the point of view of transformations, algebraicsystems have certain impoltallt advantages over context-free grammars: (1) they make an~biguity degrees explicit,(2) they involve equations (rather ttmn rewriting rules),tile GGNF of Ut/G is:~1 ~ nlu~unl ~ \[ohl uand it can be verified that it preserves degrees of ambiguity.This difference, which may be considered minor in tile case ofCFGS, plays an important role in the transformation of DCGs.1o Furthermore, in the case at hand, they represent file uniquesolution to this system.Adds  DE COLING-92.
NANTES.
23-28 AO~r 1992 3 7 1 PI~oc.
OF COLING-92.
NANTES, AUG. 23-28.
1992where "equals can be replaced by equals", and (3) theypossess a rich algebraic structure (addition, multiplica-tion) which endows them with mathematical perspicuityand power.There are some substantial differences between thetransformation steps used to obtain the GGNF of an al-gebraic system and the standard ones used to obtain itsGNF, the principal one lying in the necessity to preservedegrees of ambiguity at each step.
In the GNF case, theinitial step consists in first transforming the initial sys-tem into a proper system (a notion analoguous to that ofproper CFG)--an operation which does not preserve de-grees of ambiguity--and then performing the main trans-formation.
For this reason, the transformation steps in theGGNF case must be formulated in a more global way,which, among other complications, involves the use ofcertain identities on regular languages) 9 However, thereare also important similarities between the GNF and theGGNF transformations, among them the observation thatthe elementary algebraic system in the variable a on thevocabulary V = {Iv\], It\]}:a = a Iv\] + \[t \ ]has the unique solution a = \[t\] Iv\]*, an observation whichcan be much generalized, and which plays a central rolein both cases.DCGs, Mixed Systems, and the GGNF.
In ordcrto define the GGNF in the case of Definite GrammarSchemes (or, equivalently.
DCGs), we have introducedso-eallcd mixed systems, a generalization of algebraicsystems capable of representing association of structuresto strings.
Without going into details, let's consider thefollowing definite grammar scheme:ai(x ) -+ al(y)ax(z){p(z,y,z)} Ia~(y) {q(z,y)} I \[ \] {r(x)}a2(~:) -+ \ [v l{s(z)}This scheme is reformulated as the mixed system:alx = a ly  a2z IY~ z + a2y qYz + r,:a2~ = \[v\] s~In this system, the variables (or nonterminals) at,  a~ areseen as functions: /g -~ B<<V*>> (where B is the setof booleans {0, 1}),  that is, as functions mapping ele-ments of a set E (often taken to be a Herbrand universe),representing linguistic structures, into formal series ofB~V*>>, that is, into languages over V. This can beseen to correspond to the intuitive notion that a nonter-minal "associates" tructures to strings.
As for p, q, r, s,they are seen respectively as fonctions from E ~, E ~, E, Einto B C B<?
:V*>>, that is, as predicates of different ari-ties over E. The system represents a fixpoint equation onthe variables ax, a2, given the constants \[v\], p, q, r, s. 2?Although mixed systems are defined on more complexstructures than are algebraic systems, the transformationmethods for algebraic systems generalize without diffi-cuhy to their case, and these methods form the mathe-matieal basis of the results reported in this paper.l~Such as the identity (e + \])* ~ e*(ye*) ?.Z?For the interested reader, the given system expresses (us-ing "conventions of summation" familiar in tensor algebra) theAcknowledgmentsThanks to C. \]3oitet, M. Boyer, F. Guenthner, F. Perrault,Y.
Schabes, M. Simard, and G. van Noord for commentsand suggestions.References\[1\] A.V.
Aho and J.D.
Ullman.
The Theory of Pars-ing, Translation and Compiling, volume 1: Parsing.Prentice-Hall, Englewood Cliffs, NJ, 1972.\[2\] M. Dymetman and P. lsabelle.
Reversible logicgrammars for machine translation.
In Proceedingsof the Second International Conference on Theoret-ical and Methodological Issues in Machine Trans-lation of Natural Languages, Pittsburgh, PA, June1988.
Carnegie Mellon University.\[3\] M. Dymetman.
Transformations de gram-maires logiques.
Applications au probl~me de lardversibilit~ en Traduction Automatique.
ThSsed'Etat.
Universit6 de Grenoble, Grenoble, France,July 1992.\[4\] A. Haas.
A generalization of the offline-parsablegrammars.
In Proceedings of the 27th Annual Meet-ing of the ACL, 237-42, Vancouver, BC, Canada,June 1989.\[5\] Harrison, M.A.
1978.
Introduction to Formal Lan-guage Theory.
Reading, MA: Addison-Wesley.\[6\] Pereim, EC.N.
and D.H.D.
Warren.
1980.
DefiniteClause Grammars for Language Analysis.
Artificiallntelligence:13, 231-78.\[7\] Pereira, F.C.N.
and D.H.D.
Warren.
1983.
Parsingas Deduction.
In Proceedings of the 21th AnnualMeeting of the ACL, 137-44.
Cambridge, MA, June.\[8\] Rosencmntz D. J.
1967.
Matrix equations and nor-real forms for context-free grammars.
JACM 14:3,501-07.\[9\] Salomaa, A. and M. Soittola.
1978.
Automata The-oretic Aspects of Formal Power Series.
New York:Springer Verlag.\[10\] S.M.
Shieber.
1985.
Using restriction to extend al-gorithms for complex feature-based formalisms.
InProceedings of the 23rd Annual Meeting of the ACL,145-152.
Chicago, 1L, June.relations:AcrEs DE COLING-92, NANTES, 23-28 AO'O'r 1992 3 7 2 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992
