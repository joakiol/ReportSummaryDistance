Proceedings of the 12th European Workshop on Natural Language Generation, pages 34?41,Athens, Greece, 30 ?
31 March 2009. c?2009 Association for Computational LinguisticsDistinguishable Entities: Definition and PropertiesMonique RolbertLaboratoire d?InformatiqueFondamentale de Marseille,LIF, CNRS UMR 6166,Aix-Marseille Universite?,Marseille, Francemonique.rolbert@lif.univ-mrs.frPascal Pre?aLaboratoire d?InformatiqueFondamentale de Marseille,LIF, CNRS UMR 6166,E?cole Centrale Marseille,Marseille, Francepprea@ec-marseille.frAbstractMany studies in natural language process-ing are concerned with how to generatedefinite descriptions that evoke a discourseentity already introduced in the context.A solution to this problem has been ini-tially proposed by Dale (1989) in termsof distinguishing descriptions and distin-guishable entities.
In this paper, we givea formal definition of the terms ?distin-guishable entity?
in non trivial cases andwe show that its properties lead us to thedefinition of a distance between entities.Then, we give a polynomial algorithm tocompute distinguishing descriptions.1 IntroductionMany studies in natural language processing areconcerned with how to generate definite descrip-tions that evoke a discourse entity already intro-duced in the context (Dale, 1989; Dale and Had-dock, 1991; Dale and Reiter, 1995; van Deemter,2002; Krahmer et al, 2002; Gardent, 2002; Ho-racek, 2003), and more recently (Viethen andDale, 2006; Gatt and van Deemter, 2006; Croitoruand van Deemter, 2007).
Following Dale (1989),these definite descriptions are named ?distinguish-ing descriptions?.
Informally, a distinguishing de-scription is a definite description which designatesone and only one entity among others in a contextset.
Conversely, this entity is named ?distinguish-able entity?.Things are simple if all the properties of the en-tities are unary relations.
Let?s give a set of entitiesE = {e1, e2} with the following properties:e1: red, bird ; e2: red, bird, eat ;e1 is not a distinguishable entity because thereexists no distinguishing description that coulddesignate e1 and not e21.
e2 is a distinguishable1One could object that ?the red bird that is not eating?entity and could be designated by the distinguish-ing description ?the red bird that is eating?.Many of the works cited above are concernedwith how to generate the best distinguishingdescription with the best algorithm, essentiallyin the unary case, that is if entities propertiesare unary ones.
They focus on the length or therelevance of the generated expressions, or on theefficiency of the algorithm.
But none of themgive a formal definition of these ?distinguishableentities?.
They all use an intuitive definition,more or less issued from the unary case and thatcould be resumed as follow: an entity e is adistinguishable entity in E if and only if thereexists a set of properties of e that are true of e andof no other entity in E.Unfortunately, this intuitive definition does notapply as it is in non-unary cases.
The main prob-lem comes with the notion of ?set of properties ofe?
: what is the set of properties of an entity if non-unary relations occur?
Let us see this problem onan example.
Suppose that we have an entity b1 thatis a bowl and that is on an entity t1 which is a ta-ble.
The set of entities is E = {b1, t1} with:b1: bowl ; t1: table ; on(b1, t1)What is the set of properties of b1?
Daleand Haddock (1991) and, more or less, Gardent(2002), suggest that the property set for an entityincludes all the relations in which it is involved(even non unary ones), and no others.
Followingthis definition, the set of properties of b1 should be{bowl(b1), on(b1, t1)}.Now, what if there is another bowl (b2), whichis on a table (t2)?
The set of properties of b2 is{bowl(b2), on(b2, t2)}, which is different from thatis a distinguishing description for e1.
But we do not makethe Closed World Assumption (?every thing that is not said isfalse?).
So, negative properties have to appear explicitly, likepositive one, in entities description; their treatment causes noparticular problem in our model34of b1.
But does it follow that b1 is distinguish-able from b2?
If the ?intuitive definition?
is used,the answer is yes: the set of properties of b1 (andthe formula (?x bowl(x) ?
on(x, t1))) is true forb1 and for no other entity in E = {b1, b2, t1, t2}.But, one can immediately see that the ?right?
an-swer should depend on what we know about t1 andt2.
If the only thing we know is that t1 and t2are tables, then there is no definite description thatdesignates b1 and not b2, and thus b1 is not distin-guishable from b2.
So, even if the formula on(-,t1) is formally different from the formula on(-, t2)and b1 satisfies the first one and not the secondone, that does not imply that b1 is distinguishablefrom b2.So, the fact is that to determine if b1 is dis-tinguishable from b2, knowing that the set ofproperties of b1 is true for b1 and not for b2is not sufficient: we have to determine if t1 isdistinguishable from t2.
That clearly leads toa non-trivial recursive definition and non-trivialrecursive processes.Two recent works describe algorithms thatdeal with this problem (Krahmer et al, 2003;Croitoru and van Deemter, 2007).
Their works areboth based on graph theory and their algorithmsdeal well with the non-unary case, but theircomputations need exponential time.In this paper, our main goal is to give a defini-tion of a distinguishable entity which correspondsto the intuitive sense and which works well evenin non-trivial cases.
Then we study its properties,which leads us to an interesting notion of distancebetween entities.
Finally, we give a polynomial al-gorithm able to produce a distinguishing descrip-tion whenever it is possible and which is based onthis definition.2 A definition of ?distinguishable entity?Intuitively, an entity e1 is distinguishable from anentity e2 in two cases:?
e1 involves properties that are not involvedby e2 (we will say that e1 is 0-distinguishablefrom e2)?
otherwise, e1 and e2 are in relations (wewill precisely see how below) with atleast two distinguishable entities e?1 ande?2.
In this case, we will say that e1 is(k + 1)-distinguishable from e2 if e?1 is k-distinguishable from e?2.Basically, a property is an n-ary relation, togetherwith a rank (the argument?s position).
For in-stance, with the fact e1 eats e2, e1 has the propertyeat with rank 1 (noted eat1) and e2 has the prop-erty eat2.
So, e1 and e2 do not have the same setof properties.
Conversely, if e1 eats X and e2 eatsY , e1 and e2 involve the same property (eat1).For an entity e, we denote P(e) the set ofits properties.
We will say that a tuple t =(x1, .
.
.
, xp) matches a property pq with e ifp(x1, .
.
.
, xq?1, e, xq, .
.
.
, xp) is true.Definition 1 (k-distinguishability Dk):An entity e1 is 0-distinguishable from an entity e2(we denote it e1D0 e2) if P(e1) is not included inP(e2).An entity e1 is k-distinguishable (k > 0) from anentity e2 (we denote it e1Dk e2) if there exists arelationRq inP(e1) and a tuple (x1, .
.
.
, xp) suchthat:?
(x1, .
.
.
, xp) matches Rq with e1.?
For every (y1, .
.
.
, yp) that matches Rq withe2, there exists some xi and some k?
< k suchthat xi is k?-distinguishable from yi.We remark that if e1 Dk e2, then e1 Dj e2, forevery j > k. So, we can define the more generalnotion of distinguishability (without a rank).Definition 2 (distinguishability D):We say that an entity e1 is distinguishable froman entity e2 (we denote it e1De2) if it is k-distinguishable from e2, for some k ?
0.We say that e is distinguishable in a set of entitiesE if for every entity e?
6= e, e is distinguishablefrom e?.Distinguishable entities are the only one that canbe designated by a definite description.Definition 1 seems rather complicated (due tothe universal quantifier in the second part) and thusneeds some justification.
Let us see some exam-ples:An entity e which is a cat is 0-distinguishablefrom an entity e?
which is a dog becauseP(e)={cat1} is not included in P(e?
)={dog1}.An entity e which is a cat and which eats b (abird) is 1-distinguishable from an entity e?
whichis a cat and which eats m (a mouse).
Actu-ally, P(e) = {cat1, eat1} is included in P(e?)
=35{cat1, eat1}, but there exists an entity (b) withwhich e is in relation (via eat1) and which is dis-tinguishable from m, which is the only entity withwhich e?
is in relation via eat1.
So, the situationcan be resumed as in figure 1:e?
eats mme eats bl?0-distinguishablefigure 1: e is 1-distinguishable from e?If we add the information that e?
also eats f (afish), the conclusion remains true, as we can seeon figure 2.e?
eats mm e?
eats fme eats bl/SSSSSw0-distinguishablefigure 2: e is 1-distinguishable from e?But if we add the information that e?
also eatsb?, a bird not distinguishable from b, then the con-clusion is no longer true (see fig.
3).e?
eats mm e?
eats fme eats ble?
eats b?m+QQQQQQQs0-distinguishable not distinguishablefigure 3: e is not distinguishable from e?e is not distinguishable from e?, no definite de-scription can designate e and not e?.
So, we seethat, in order for e to be distinguishable from e?,b has to be distinguishable from all the entitieswhich are in relation with e?
via eat1.
That illus-trates the necessity of the universal quantifier indefinition 1.Let us see a more complicated example, wheretuples are involved.E = {e, e?, x1, y1, z1, x2, y2, z2}e, e?
: manx1, z1: ball ?
y1 : cakex2, y2: blond, child ?
z2: childe gives x1 to x2 (e gives a ball to a blond child)e?
gives y1 to y2 (e?
gives a cake to a blond child)e?
gives z1 to z2 (e?
gives a ball to a child)The question is: Is e distinguishable from e??
Theanswer is clearly yes, ?the man who gives a ball toa blond child?
is a definite description that desig-nates e and not e?.First, e is not 0-distinguishable from e?
(P(e) = {man1, give1} is included in P(e?)
={man1, give1}).So, e is 1-distinguishable from e?
if we find arelation R in P(e) and a tuple T that matches Rwith e and such that for each tuple T ?
that matchesR with e?, T ?
contains an entity e?i from which theentity ei in T is 0-distinguishable.Let us check if this is true for give1 and (x1, x2).T1 = (x1, x2) matches give1 with e (give(e, y1, z1)is true).
There are two tuples T2 = (y1, y2) andT3 = (z1, z2) that match give1 with e?.x1 is 0-distinguishable from y1.
So it is right forT2.x2 is 0-distinguishable from z2.
So it is right forT3.The situation can be resumed by the schema infigure 4:e?
gives y1 to y2m e?
gives z1 to z2me gives x1 to x2l l/ZZZZZZ~0-distinguishablefigure 4: e is 1-distinguishable from e?Let us add ?e?
gives z1 to y2?
to the above exam-ple:T4 = (z1, y2) matches give1 with e?.
But x1 isnot distinguishable from z1 and x2 is not distin-guishable from y2.
This new information preventse being distinguishable from e?.This case is represented on figure 5:e?
gives y1 to y2m e?
gives z1 to z2me gives x1 to x2l l/ZZZZZZ~0-distinguishablee?
gives z1 to y2 ffno distinguishabilityfigure 5: e is not distinguishable from e?Again, we see that it is not sufficient to check theexistence of a tuple and a relation in P(e?)
thatintroduce the distinguishability to e via give1.
Wehave to check this for each tuple that matches give1with e?.36Moreover, one can also notice in the above ex-ample that the entity which ?leads to?
the k?-distinguishability is not unique.
It may be differentupon each tuple (x1 for T2 and x2 for T3).
This isquiet different from the often used shortcut: e1 isk-distinguishable from e2 if it is in relation withone entity e?1 which is k?-distinguishable from anentity e?2 which is related to e2.So, although our definition may seem compli-cated, it cannot be simplified if we want it to seizethe notion of distinguishability.
We will now studysome of its properties.3 Some propertiesThis definition of the k-distinguishability of an en-tity leads to two interesting ideas:?
A set of entities can be organised in subsetsor classes via a related notion, confusability.Confusability is a transitive relation and thusit defines a partial order on subsets of E.?
A notion of distance can be defined from k-distinguishability.
Actually, the greatest kis, the less distinguishable the related entitiesare.
The inverse of this k defines a distancebetween entities.3.1 A partial order on the set of entitiesDefinition 3 (Confusability C):We say that e1 is k-confusable with e2 (we denoteit e1Ck e2) when not e1Dk e2.We say that an entity e1 is confusable with an-other entity e2 if e1Ck e2 for every k (we denoteit e1C e2).
It is equivalent to say that an entity e1is confusable with an entity e2 if e1 is not distin-guishable from e2.For example, e1 is 1-confusable with e2 if e1 is not1-distinguishable (nor 0-distinguishable) from e2.But, in the same time, e1 can be 2-distinguishablefrom e2 and thus, not confusable with e2.We remark that if e1Ck e2, then e1Cj e2, for everyj < k.Intuitively, one would like C to be transitive (ifan entity e1 is confusable with an entity e2 whichis confusable with an entity e3, then e1 should beconfusable with e3).Theorem 1 C is transitive.Proof: We shall prove by induction on k thatif e1C e2 and e2C e3, then e1Ck e3, for everyk ?
0.If e1C e2 and e2C e3, then P(e1) ?
P(e2) ?P(e3), and so, e1C0 e3.Let us suppose that, for every e1, e2 and e3, ife1C e2 and e2C e3, then e1Ck e3, and that thereexist three entities f , g, and h such that:f C g, g C h and f Dk+1 h.By the induction hypothesis, f Ck h, and soP(f) ?
P(h).
Thus, as f Dk+1 h, there exist(x1, .
.
.
, xn) and a relation R such that:R(f, x1, .
.
.
xn)?
(z1, .
.
.
zn) such that R(h, z1, .
.
.
, zn),?i ?
n, k?
< k such that xiDk?
zi.
(a)(We have supposed, with no loss of generality,that f has rank 1 in R)As f C g, ?
(y1, .
.
.
, yn) such that:R(g, y1, .
.
.
, yn)?i ?
n, xiC yiAs g C h, ?
(z?1, .
.
.
, z?n) such that:R(h, z?1, .
.
.
, z?n)?i ?
n, yiC z?iThus, for every i ?
n :xiC yi and yiC z?iBy the induction hypothesis, for every i ?
n,xiCk z?i, which is in contradiction with (a).2We remark that C is reflexive and not symmet-ric.
But, since C is a transitive relation, the rela-tion E defined by e1 E e2 if e1C e2 and e2C e1 isan equivalence relation (with this relation, we putin the same class entities which are confusable)and C, when restricted to the quotient set (the setof the equivalence classes) E/E , is a partial orderthat we denote <C .Since <C is an (partial) order relation on E/E ,which is a finite set, it has maximal and minimalelements.
The maximal elements can be seen asvery well defined entities (they are confusable withno other entity in other subsets) and the minimalelements as the conceptual entities (no entities inother subsets are confusable with them, but theyare confusable with many other entities).
We re-mark that two minimal entities (as two maximalones) are not confusable, since the set of the min-imal elements of an ordered set is an antichain (asthe set of the maximal elements).Thus, for example, a set of entities can be or-ganised as in figure 6:37tables T1@@I     fftables inwood T26ffblack tablesin wood T4  ffrectangulartablesT3AAAAAAAK'&$%rectangularblack tablesin woodT5Figure 6: sets of entities ordered by <CT1 <C T2 <C T4 <C T5T1 <C T3 <C T53.2 A distance between entitiesNow, let us see that the notion of k-distinguishability leads to a notion of distancebetween entities.
By now, if we take the smallestk such that e1 is k-distinguishable from e2 (wenote it ?
(e1, e2) (if e1C e2, ?
(e1, e2) = ?))
thesmaller ?
(e1, e2) is, the further e1 is from e2.For example, if e1 is 0-distinguishable from e2,e1 is very different from e2 (a cat and a dog, forinstance).
But if e1 is not 0-distinguishable frome2 but is 1-distinguishable from it, then e1 is nearerfrom e2 (two cats, one that eats a bird and the otherthat eats a mouse, for instance).So, one could expect that ?
is like the inverse ofa distance.
Let us see that point.Definition 4 Let E be a set of entities.
We defineon E/E:?
(e, e) = 0?
(e1, e2) = max{(?
(e1, e2) + 1)?1,(?
(e2, e1) + 1)?1} if e1 6= e22.Theorem 2 ?
is a distance on E/E .We recall that a distance on a set X is an applica-tion d : X ?X ?
IR+ such that:?x, y, d(x, y) = 0 ??
x = y?x, y, d(x, y) = d(y, x)?x, y, z, d(x, y) ?
d(x, z) + d(z, y).Theorem 2 follows immediately from the follow-ing:Lemma 1 If e1Dk e2, then, for every e3:e1Dk e3 or e3Dk e2.2We take 1/?
= 0Proof of Lemma 1: The proof is by induction onk.If k = 0, then P(e1) 6?
P(e2).
Thus, if P(e1) ?P(e3) (i.e.
e1C0 e3), then P(e3) 6?
P(e2), and soe3D0 e2.Let us suppose that the property is true for k ?
1and that ?
(e1, e2) = k > 0.
There exists a relationR and (x1, .
.
.
xn) with R(e1, x1, .
.
.
, xn) suchthat for every (y1, .
.
.
, yn) with R(e2, y1, .
.
.
, yn)(such a (y1, .
.
.
yn) exists, otherwise ?
(e1, e2) =0), there exists i with xiDk?1 yi.
(We have supposed, with no loss of generality, thate1 has rank 1 in R)Let (z1, .
.
.
, zn) be such that R(e3, z1, .
.
.
, zn).
Ifsuch a (z1, .
.
.
, zn) does not exist, we would havee1D0 e3, and the property would hold for k. Bythe induction hypothesis, we have:(a) xiDk?1 zi or (b) ziDk?1 yi.If there exists a (z1, .
.
.
, zn) such that, for every(y1, .
.
.
, yn), we are in case (b), then e3Dk e2.Otherwise, for every (z1, .
.
.
, zn) such thatR(e3, z1, .
.
.
, zn), there exists a (y1, .
.
.
, yn) forwhich we are in case (a).
In fact, (y1, .
.
.
, yn) doesnot matter for this case, and so, that is to say thate1Dk e3.2Actually, this lemma shows much more than the-orem 2.
It says that the entity set is structured bydistinguishability in such a way that whatever thecouple of entities we take, there is no other en-tity between them.
This lemma induces a strongerproperty for ?
:Let d be a distance on a set X .
If we have:?x, y, z,max{d(x, y), d(x, z)} ?
d(z, y)(which is equivalent to say that for any triple, thetwo greatest distances are equal3), then the dis-tance is ultrametric.Theorem 3 ?
is an ultrametric distance on E/E .Ultrametric distances have a lot of properties (See(Barthe?le?my and Gue?noche, 1991)).
In particular,they are equivalent to a hierarchical classificationof the underlying set4 (like the phylogenetic clas-sification of natural species).More precisely, given a set X with an ultra-metric distance d, the sets Cx,y = {z/d(x, z) ?3Suppose that for a triple (x, y, z), we have, forinstance, d(x, y) ?
d(x, z) ?
d(y, z).
Sincemax{d(y, z), d(x, z)} ?
d(x, y), we also have d(x, z) ?d(x, y), and thus d(x, z) = d(x, y).4The set is partioned into non-overlapping subsets, eachsubset being (eventually) divided into non overlapping sub-sets,.
.
.38d(x, y)} form a hierarchical classification of X .Conversely, given a finite set X with a hierarchi-cal classification, if, for x 6= y, we define d(x, y)as the cardinality of the smallest class containingx and y, and d(x, x) = 0 for all x in X , then d isan ultrametric distance.In addition, given a set X with an ultrametricdistance d, there exists a tree (called ultrametrictree) with labels on its internal nodes, its leavesindexed by the elements of X and such that:?
for any two leaves x and y, the label of theirlowest common ancestor is d(x, y).?
for any leaf x, the labels on the path from theroot to x form a decreasing sequence.For instance, with the example shown on figure 5,we obtain the tree on E/E which is shown on fig-ure 7 (for this example, since there is no pairwiseconfusable entities, E/E = E):e e?
y1x1 z1 z2JJJJJJy2 x2n1/2n1/3n1n1/2Figure 7: a tree on E/EOn this tree, given a couple of entities, one cansee the difficulty to distinguish them.
This in-formation has been construct in a global way (byusing all the relations between entities) and it israther different (and more accurate) from what onewould say at a first glance.
For instance, we cansee that x1 and y1 are more difficult to distinguishthan x2 and z2 or than e and e?
(the label of theirlowest common ancestor is 1/3 instead of 1/2).4 An algorithm for searchingdistinguishable entitiesThe algorithm is based on dynamic programming(Aho et al, 1974).
This is a standard techniquewhich is used, for instance, to calculate distancesin graphs.
We work on a set E = {e1, .
.
.
en}of entities.
The main structure is a n ?
n matrixM.
At each step k, the algorithm determines thecouples (ei, ej) of entities such that ?
(ei, ej) = kand loads k intoM[i, j].?
At step 0, we check for each couple (ei, ej)whether P(ei) ?
P(ej) or not.
If P(ei) 6?P(ej), we load 0 intoM[i, j].?
At step k > 0, for every couple (ei, ej) suchthat M[i, j] is not yet calculated, we deter-mine if ?
(ei, ej) = k or not, using alreadycalculated values in M to check conditionsof definition 1.
If it is the case, we load k intoM[i, j].If no value of M is updated, then the algo-rithm stops (if there are no e, e?
inE such thateDk e?, then there exist no f, f ?
in E suchthat f Dk+1 f ?
)At the end of the algorithm, if eiDej , M[i, j]contains ?
(ei, ej).
We also compute an auxiliarymatrix A in which we put the relations that havebeen used to calculate ?
(ei, ej).
The matrix Awill be used to build referring expressions.The algorithm runs in O(n2 ?
K ?
N ?
T 2),where K = max{?
(e, e?
), eD e?
}, N is the great-est property arity, and T is the cardinality of thegreatest set T (ei) of all couples (p, t), where p isa property and t a tuple that matches p with ei.N , T and K are rather small and can be assimi-lated to constants5; so, if we are only concernedwith the number of entities, our algorithm is inO(n2).Let us see how it works on an example from(Croitoru and van Deemter, 2007):floor                     yycupbowlyycuptablebowlyycupbowlFigure 8: a sceneCroitoru and van Deemter (2007) represent thescene of figure 8 by an entity set E = {v0, .
.
.
v7}with the following properties:v0, v3, v7: cupv1, v5, v6: bowlv2: table5Actually, from a theoretical point of vue, we only haveK ?
n, and no limit on T and N .
But, from a practicalpoint of vue, one can have a scene with (for instance) 10000entities, but there is no property of arity 10, no entity with100 properties and no distinguishing expression of length 50(even if such an expression would exist, it would be impossi-ble to use it); so N , T and K are small39v4: floorv0 is in v1v1 is on v2v3 is on v4v2 is on v4v5 is on v4v6 is on v4v7 is in v6Our algorithm produces the following matrix M(due to lack of space, we do not show the matrixA: its breadth would exceed the sheet):v0 v1 v2 v3 v4 v5 v6 v7M =v0v1v2v3v4v5v6v7?????????????
?/ 0 0 0 0 0 0 20 / 0 0 0 1 1 00 0 / 0 0 0 0 00 0 0 / 0 0 0 00 0 0 0 / 0 0 00 1 0 0 0 / ?
00 1 0 0 0 0 / 02 0 0 0 0 0 0 /?????????????
?With this matrix M, one can easily determinewhich entities are distinguishable: they are the onewith no +?
on their line.
Here, we can see thatv5 is not distinguishable: it is distinghishable fromall entities but v6It is also easy to construct sets of distinguish-ing properties, using matrixA.
For instance, if wewant to distinguish v0 from v7, we use the follow-ing elements of A:A[v0, v7] = {(isin1, 2, v1, v6)}A[v1, v6] = {(ison1, 2, v2, v4)}A[v2, v4] = {table1, ison1}.Since v2 is 0-distinguishable from v4, we get thefollowing distinguishing formula:?x?y ?z isin(x, y) ?
ison(y, z) ?
table(z)6from which one can easily obtain the followingexpression which distinguishes v0 from v7: ?theentity which is in an entity which is on an entitywhich is a table?.Using this method, we obtain minimal expres-sions to distinguish one entity e from anotherentity e?.
A referring expression (which dis-tinguishes one entity e from all the others) canbe obtained by computing the conjunction of allthese minimal expressions.
This conjunction con-tains many redundancies, and it can be reduced inO(n log n).
Actually, by this way, one generallyobtains an expression which is very close to the6We can obtain another distinguishing expression by tak-ing ison1 instead of table1 in A[v2, v4].
We choose table1because its arity is smaller, so we get a simpler formula.expression which distinguishishes e from the near-est other entity (i.e.
the entity e?
for which ?
(e, e?
)is maximal).
For instance, in the example above,the expression which distinguishes v0 from v7 isa referring one for v0: there is no other entity ?insomething on a table?.So, we get sets of distinguishing properties forall the distinguishable entities of a scene in poly-nomial time (and more precisely in O(n2 log n)).This is much better than the methods of Kramerand al.
(2003) and of Croitoru and van Deemter(2007), which both rely on subgraph isomor-phisms (which is a NP-complete problem).5 ConclusionThe two main results of this paper are:?
An efficient algorithm to compute distin-guishing descriptions.
Our algorithm is ef-ficient enough to be applied on complexscenes.?
An ultrametric distance which captures thedifficulty to distinguish two entities and pro-vides a phylogenic classification of the enti-ties.These two results follow from our definition of k-distinguishability.
More precisely, they are due tothe incremental nature of the k-distinguishability,which thus reveals to be a pivot for the Generationof Referring Expressions (GRE).AcknowledgmentsP.
Pre?a is supported in part by ANR grantBLAN06-1-138894 (projet OPTICOMB)ReferencesAlfred V. Aho, John E. Hopcroft, and Jeffrey D. Ull-man.
1974.
The Design and Analysis of ComputerAlgorithms.
Addison-Wesley, Reading, MA.Jean-Pierre Barthe?le?my and Alain Gue?noche.
1991.Trees and Proximity Representations.
J. Wiley &sons, New York, NY.Madalina Croitoru and Kees van Deemter.
2007.
Aconceptual graph approach to the generation of re-ferring expressions.
International Joint Conferenceon Artificial Intelligence, Hyderabad.Robert Dale.
1989.
Cooking up referring expressions.Proceedings of the Twenty-Seventh Annual Meetingof the Association for Computational Linguistics,Vancouver.40Robert Dale and Nicholas Haddock.
1991.
GeneratingReferring Expression Involving Relations.
Proceed-ings of the fifth conference of the European ACL,Berlin.Robert Dale and Ehud Reiter.
1995.
Computational In-terpretations of the Gricean Maxims in the Gener-ation of Referring Expressions.
Cognitive Science,19(2):233-263.Kees van Deemter.
2002.
Generating Referring Expres-sions: Boolean Extensions of the Incremental Algo-rithm.
Computational Linguistics, 28(1):37-52.Claire Gardent.
2002.
Generating Minimal DefiniteDescriptions.
Proceedings of the 40th Annual Meet-ing of the Association for Computational Linguis-tics, Philadelphia.Albert Gatt and Kees van Deemter.
2006.
ConceptualCoherence in the Generation of Referring Expres-sions.
Proceedings of ACL, Sydney.Helmut Horacek.
2003.
A Best-First Search Algorithmfor Generating Referring Expressions.
Proceedingsof the 11th Conference of the European Chapter ofthe Association for Computational Linguistics, Bu-dapest.Emiel Krahmer, Sebastian van Erk and Andre?
Verleg.2003.
Graph-based Generation of Referring Expres-sions.
Computational Linguistics, 29(1):53-72.Jette Viethen and Robert Dale.
2006.
Algorithms forGenerating Referring Expressions: Do They DoWhat People Do?
Proceedings of the InternationalConference on Natural Language Generation, Syd-ney.41
