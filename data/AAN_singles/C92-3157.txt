From Detection/Correction to Computer Aided WritingDamien GENTHIAL, Jacques COURTINLaboratoire de g~nie informatique - Imag Campus - BP53XF~38041 GRENOBLE CEDEX - FrancePhone: (33) 76 51 48 78FAX: (33) 76 44 66 75E-Mail: genthial@imagfrcourtin@imag frI~SUMELa plupart des textes actuels ont produits ousforme 61ectronique h l'aide de syst~mesinformatiques qui fournissent des facilit6s demanipulation de chMnes mais aussi des outilslinguistiques : correcteur d'orthographe,dictionnaire voire vErificateur grammatical.Nous pensons qu'un syst~me d'aide ~t laredaction dolt 6tre conqu comme unenvironnement complet pour la production, lamaintenance, l'Edition et la communication destextes.
Ceci suppose par exemple l'utilisationd'un gestionnaire d'idEes et de dictionnairespour la production, d'un 6diteur de textes et devErificateurs linguistiques pour la maintenance,d'un traitement de textes pour l'Edition et d'unelbrme normalisde pour la communication.A la suite de nos travaux sur la detection et lacorrection des erreurs, nous proposons unearchitecture Iogicielle capable d'intfgrer demanibre uniforme nos outils linguistiques(analyse et gEnEration morphologique,techniques de correction lexicale, analyse etverification syntaxique) ainsi que des outils detraitement de texte, d'Edition et d'exportation dedocuments.
Ces outils sont conqus comme desmodules sp~cialisEs disposes autour d'unestructure de donnEes unique qui constitue larepresentation interne du texte.
Cette structureest un treillis multi-dimensionnel qui traduit lalinEarit6 mais aussi la structure t les ambigu'ft~sdu texte.
Elle est compMtEe par un lexique ba~sur des structures de traits typEes quicontiennent les informations morphologiques,syntaxiques tsEmantiques a sociEes aux mots.La distribution de la competence globale dusyst~me dans des modules pfcialis~s facilite samaintenance et, surtout, permet le partage descompEtences locales entre les modules, ce quiest tr~s important pour les modules linguistiques(le vErificateur syntaxique, par exemple,requiert presque tous les autres moduleslinguistiques : morphologie, phon~tique,syntaxe).AcrEs DE COLING-92.
NAIqlE.S.
23-28 AOt~'r 1992 1 0 1 3 PROC.
OF COLING-92.
NANTES, AUO.
23-28, 1992ABSTRACTMost texts nowadays are produced in anelectronic form by the use of systems whichprovide text processing facilities but alsolinguistic facilities such as spelling checkers,on-line lexicons and even syntactic heckers.We think that a computer-aided writing systemmust be designed as a complete environment forthe production, maintenance, dition andcommunication of texts.
This implies forexample the use of an ideas manager and on-linelexicons for production, a text editor andlinguistic verifiers for maintenance, a textprocessor for edition and a standardized formfor communication.Following our work on detection and correctionof errors, we propose an architecture of asystem able to integrate in a uniform way ourlinguistic tools (morphological parsing andgeneration, lexical correction techniques,syntactic parser and verifier) as well as tools fortext processing and document editing andexporting.
Tools are designed as specializedmodules disposed around a unique datastructure, which is the intemal representation ofthe text.
This structure is a multi-dimensionallattice, coding the linearity but also the structureand the ambiguities of the text.
It is completedby a lexicon based on typed feature structuresencoding morphological, syntactic and semanticinformation on words.The distribution of the competence of thesystem in specialized modules permits an easiermaintenance of the system itself but, moreover,allows competence sharing among the modules,which is very important for the linguistic ones(for example the syntactic verifier needs to useahnost every linguistic module: morphology,phonetic, syntax).1, Introduct ionIn their life-cycle from creation to publishing,all texts nowadays take an electronic form.
Mostof them arc directly produced in this form andtake the paper form only for publishing.
Thus alot of services can be provided to the writer whouses a computer to produce his texts.
This ideais not new but, following our work on detectionand correction of errors, we think it must beinvestigated more deeply than it has been.We first introduce what we mean by computeraided writing.
We then propose an architecturefor a computer aided writing environment andquickly describe its modules.
We outline one ofits main characteristics (limited ata structures),and finally justify the second one (distributionof services) in the light of our work on detectionand correction of errors.2.
Computer  Aided Wri t ing (CAW)A computer system for a writer is basically apersonal computer which runs a text processor,the power increase of personal computers hasbeen followed by the growth of servicesprovided to the user.
Some of these servicesaim to increase the writers productivity but mostof them aim to obtaining a better quality ofproduced ocuments.
We will distinguish erebetween two categories of services: presentationservices and production services.
The fwst onesconcern the way the paper form of the textlooks: justification, formating, multi-column...They are very powerful in modem systems,especially if you add to your text processor agraphic processor and a page maker, but theyhave little to do with linguistics and so we willnot discuss them here.The second ones concern the text itselt, in itscontent and in its form.
The best known andmost achieved service in this category is thespelling checker, which can be found in everymodern text processor.
Recently, other serviceshave emerged:?
on-line lexicons with synonym and antonymlinks;?
idea managers which help the user to build theplan of his document;?
syntactic heckers in the spirit of the IBMsystem CRITIQUE \[6\].In most cases, these new services are add-onsto an existing text processor and CAW systemsare stacks of tools, lacking the coherence of anintegrated approach.Our idea is that CAW must be thought of as agoal in itself and our aim is to build anenvironment for the production, maintenance,edition and communication of texts.
Such asystem will be based on a coherent set ofsoftware tools reflecting the state of the art instring manipulation and linguistic treatment.
Ata first glance, the system should include classicand well-known tools such as those cited aboveand more sophisticated tools like:?
morphological nalysis and generation, whichcan for example be used for lemmatization fwords or groups of words.
The idea here is touse these lemmatized groups as keys to accessexternal knowledge bases or document bases\[91.?
syntactico-semantic analysis and generation toallow operations like: changing the tense of aparagraph, changing the modality of asentence, help in detecting ambiguous phrasesand in disambiguation by proposingparaphrases.
There is also the possibility ofgenerating a definition of a word on the basisof its formal description i the lexicon.ACRES DE COLING-92, NANTES.
23-28 AOtYr 1992 l 0 i 4 PROC.
OF COLING-92, NANTES.
AUG. 23-28, 1992?
lexical and syntactic checkers, which mustalso be able to propose corrections, by the useof all the linguistic knowledge included in thesystem.?
structural manipulations of the text in the spiritof idea managers but also some verificationson the structure by the use of  a grammar ofthe text, which depends on the type ofdocument created.
For example, a softwaredocumentation will include a user manual anda reference manual,  the user manual  willinclude an installation chapter, a tutorialintroduction chapter .....?
interface with the outside world: that includesof course the production of a paper form ofthe text but also, at least as important as theformer, the production of  the text in somestandardized form (for example the formcaracteristics are the use of a minimal number ofdata structures and a distributed architecture.We will here quickly describe the role of eachmodule, leaving for the next two sections thed i scuss ion  about  data s t ructures  andarchitectural choices.The proposed system is primarily built forFrench but every module has been designed tobe as general as possible, and is completelyconfigurable, so that it can be used for otherlanguages.Each module is viewed as a server which is ableto provide some service.
Following our workon detection and correction of  errors, manymodules are dedicated to this sort of  task.Given an incorrect word, the similarity keymodule is able to produce a list of correct wordsFi\[ure 1: Architecture of a CAW environmentrecommended by the TEl \[8\]) which cantravel on networks and be legible by mostsoftware.
This lorm can also be used to storethe text in databases or to pass it on to othersoftware.
A very interesting type of softwarecould be an automatic translator, so that a textcould be created in one language andpublished in one or more other languages.Such a system is a long term objective and wewill see in the next section an architecture whichmakes  poss ib le  a shor t  term ful limplementation, while being open for futureextensions.3.
A rch i te t~ure  o f  a CAW env i ronmentFigure 1 describes the architecture of tile CAWsystem under development in our team.
Itswhich are possible corrections of the incorrectone.
It is well-suited for typographic errors.The phonetic graphic transducer plays the samerole by using the phonetic invariant of words.
Itis well-suited for spelling errors.The morphological module can also be used forlexical correction \[3\] but its main purpose is toproduce an input for the syntactico-semanticparser, which is in charge of  bui lding adecorated structure of the sentences of  the text.The parser we use is a dependency-treetransducer designed as a robust parser \[4, 5\].The syntactic hecker is in charge of verifyingagreement rules in sentences \[7\].The multi-purpose l xicon contains all lexicalinformation and furnishes access tools (see nextsection).ACRES DE COLING-92, NAMES, 23-28 hOt~q 1992 1 0 1 5 PROC.
ov COLING-92, NAr~'rl.
;s, AUG. 23-28, 1992The text processor provides string Every module can read or write in this lattice;manipulations while the edition communication for example, the corrections prOduced by lexicalmodule gives a paper or communicable form of correctors can be added as multiplethe text.The structure manager is in charge of global interpretations of a word.manipulations on the surface structure of thetext (chapter, sections,...) and of the muchmore difficult task of verifying the internalcoherence (there is an introduction, adevelopment, a conclusion,...).Finally, the control and user interface moduleassumes the synchron isat ion  andcommunication between modules and thetransmission of user orders.The correctors, the syntactic checker, themorphological parser and generator, thesyntactico-semantic parser are all operational onmicro-computers.
At the moment, the lexicon isa roots and endings dictionary (35,000 entries,generating 250,000 forms) with onlymorphological information on words, but itsextension is under development.
Figure 2: Example of a lattice4.
Data Structures 4.2.
Lexicon4.1.
BlackboardA main caracteristic of our system is the use ofan internal representation f the text in the formof a multi-dimensional l ttice (inspired by \[2\])which play the role of a blackboard for all themodules.Each node of the lattice bears information on apiece of text, and we propose that they all havethe same structure: each node bears a tree(sometimes limited to the root) and each node ofthe tree bears a typed feature structure (a ~t'-term, see ?4.2).
We can imagine that the latticeis initiated by the flow of characters which comefrom the text processor, thus the word "Time"will become:For performance problems, it seems morereasouable to initiate the lattice with the lexicalunits resulting from the morphological parsingof the text.
With the sequence of characters"Time flies...", we will obtain the bottom fournodes of the figure 2 lattice.We can see two dimensions of the lattice on thisexample: a sequential dimension ("time" is thefirst word and is followed by the second word"l\]ies"), and an ambiguity dimension (bothwords have two possible interpretations).A third dimension appears when the syntacticparser starts its work.
It produces new latticenodes which bear dependency trees.
With thelattice above, the syntactic parser will add thetwo top nodes (figure 2).We think it is very important, for the coherenceof the knowledge mbedded in the system, thatall lexical information be contained in a uniquedictionary.
Multiple access and adaptedsoftware tools will extract and present theinformation to the user in different forms, forexample the natural language form of a formalentry may be computed by the syntacticgenerator.To represent knowledge associated with words,we have chosen typed-feature structures calledw-terms \[1\].
With these structures, basicconcepts are ordered in a hierarchy which canbe extended to whole structures.
Thus we candetermine if a 'e-term is less than another andthe unification of two hU-temls is the biggest ~t'-term which is less than both unified ones.
Inother words, the unification of two terms is themost general term which synthesizes theproperties of both unified ones.
Thiscaracteristic is very interesting for theimplementation f paradigms: a paradigm is therepresentative of a class of words and containsthe information which describes the behaviottrof a word.
We distinguish three types ofparadigms: morphological, syntactic andsemantic.Morphological paradigms bear the category ofthe word and a few linguistic variables uch asgender and number.
Syntactic paradigmscontain information about the function of theword within its context.
The aim is to code sub-categorization f words, and it is very importantfor verbs but also for nouns and someAc'r~ DE COLING-92, NANrES.
23-28 Ao(;r 1992 1 0 1 6 P}toc.
OF COLING-92.
NANTES.
AUG. 23-28.
1992adjectives.
A semantic paradigm is the semanticconcept associated with the word or the logicalstructure in the case of predicate words.Examples of paradigms:I,U stand for Lexical Unit, NP for NominalPhrase and P tar Proposition.baby: morphologicalLU(cat  -> cnoun;gender  => {masucu l in  ; femin ine \ ] ;number  > s ingular )baby: syntacticLU(syn  => NP)baby: semanticLU(sent > HUMAN)choose: morphologicalLU(cat  => verb)choose: syntacticLU(syn  :> P (sub jec t  =>NP (sere => ANIMATE)  ;ob jec t  ->NP (sere -> OBJHCT)  )choose: semanticLU (sere -> CHOOSE (agent => ANIMATE;cho ice  => OBJECT)  )For a verb like rain, we can be more precise inthe syntactic paradigm:rain: syntactichU{syn  => P(subject: ->NP (cat -> \[~ers pronoun;person  :> 3;nunJoer -> s ingu lar ;lex -> "it") )Each entry in the lexicon contains a key, whichis used to access the entry, and a reference to aparadigm of each type.
In order to allowinformation sharing between "v-terms, we addto the entry an optional list of equationalconstraints.
For example, for ehoose, we have :syn.
sub jec t ,  sere - sem.
agent: andsyn .ob jec t .
sem = sere .cho ice  sayingthatusually the subject of the verb is its agent andthe object is the choice.
The result ofmorphological parsing of a form is theunification of the three paradigms of eachlexicon entry used.
For example, for the formchooses, we use the root choose and the endings (which add the features person and number tothe paradigms of the verb) thus we obtain:LU(cat  => verb;person  -> 3;number  > s ingu lar ;syn > P(subject: ->NP (sem > @S :ANIMATE) ;object ->NP (sem => @O:OBJECT)  ;sere -> CHOOSE(agent  :=> @S;cho ice  => @O))where the notation @X is used to writereference links (equational constraints).The idea behind paradigms is to allow a greatfactorization of knowledge: it is obvious formorphological paradigms (in the actualdictionary, we have only 400 paradigms for250,000 forms) and for syntactic paradigms(the number of possible sub-categorizations forverbs is far less than the number of verbs).
It isless obvious for semantic paradigms, especiallyif you want a very f'me description of a word: inthis case, there is almost a paradigm for eachword.So the lexicon is essentially built around three,v-term bases, one for each set of paradigms.The bases are accessed by the roots and endingsdictionary used by morphological tools (parserand generator), and we can easily add synonymand antonym links to this dictionary.
The key-form correspondence table, required by thesimilarity key correction technique cannot easilybe embedded in this lexicon structure, but wepropose to append it to the lexicon so that anymodule requiring iexical information must usethe multi-purpose lexicon module.
Thisconstraint is imposed in view of coherence: achtime a root is added to the main dictionary, allkey-form pairs obtainable from this root mustbe added to the table.5.
DistributionEach module in our system must be viewed as aserver which responds to requests ent by anyother module.
Such an architecture has theclassical advantages of modular StlUctures: youcan add or remove a module very easily, youcan modify a module in a transparent manner aslong as you do not change its interface ....But this structure has another advantage whichis very important in the context of linguistictreatments: the linguistic competence of eachmodule can be exploited by the others.
We willuse two examples to illustrate our purpose.First, in detection and correction of lexicalerrors, we have implemented classical tools(similarity key and phonetic).
Then we decidedto implement syntactic hecking, so we neededthe services of a morphological parser.
Weadded to the system (a prototype calledDECOR) our morphological tools, and theavailability of these tools gave the idea of usingthem for detection and correction, so weinrplemented a third technique of correction :morphological generation.Example of correction using morphologicalg,~mmm :loots, although incorrect, may be parsed as foot+ s, and the root foot, plus the variables (plura/)associated with the s, when passed on to themorphological generator, give the correct formfeel.ACRES DE COLIN'G-92, NANTES, 23-28 AObq' 1992 l 0 I 7 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992As a second example, consider the problem ofproposing correction for agreement errors:when an error occurs, it means that at least twowords do not agree so there are at least twopossible corrections depending on which of thetwo words you choose to correct.
The solutionfor the system is to propose both corrections tothe user and let him choose one.
Even thissimple method requires linguistic service: amorphological generator is necessary to produceeach correction.But we think that in most cases the goodcorrection can be choosen automatical ly,accord ing to cr i ter ions I such as thoseconsidered by \[ 10\]:?
number of errors in a group: l ittle cat arefunny  pets must be corrected l ittle cats arefunny  pets rather than little cat is funny  pet;?
it is better to correct in a way which does notmodify the phonetic of the phrase, We givehere a French example2:  Les  ch iensdress~es .
.
,  will be corrected Les ch iensdresses..,  rather than Les chiennes dress~es.
..?
one can give priority to the head of the phrase:cat which are.., becomes cat which is...;?
writer laziness: a writer sometimes omit an swhere one is necessary, but rarely add onewhere it is not.Such criterions are sometimes contradictory andwe propose to use an evaluation method whichgives a relative weight to each criterion so thateach possible correction has a probability ofbeing correct.
The user is asked for a choiceonly in cases where both corrections haveequivalent probability.But, whatever strategy is implemented, it needsthe cooperation of various linguistic modules inorder to perform the evaluation: phonetictransducer, morphological parser and generator,and our architecture permits the use of theavailable ones.Finally, beyond linguistic justifications, one canfind computational justifications: each moduleof  the system can work in parallel with theothers and they can even work on differentcomputers, putting the distribution at a physicallevel.INote that these criterions are pertinent for French,where there are a lot of agreement rules (between oun,adjectives and detenniner, between subject and verb,...)2An similar english example might be The skis slideswich is corrected The ski slides rather than The skisslide.6.
Conc lus ionAs sophist icated l inguist ic treatments areexpenswe in time and space, we think it is veryimportant, that a CAW system should integrateall treatments and knowledge in a uniform way.It makes it easier to take advantage of the wholeknowledge in each service involved in order toprovide very powerful services.
This power ofthe services is a mean to compensate, for apotential user, the lack of  ergonomy due to poorperformance: a system which can build themulti-dimensional l ttice in real-time does notseem a realistic goal for the near future.As a typical application for our system, wethink of the production of  the technicaldocumentation f an industrial product: as thereare for example  software eng ineer ingenv i ronments ,  we propose  l ingu is t i cengineer ing ones.
In such a context it ispossible to add structure services, morepowerful services at the semantic level andinterface with other software such as anautomatic translator.References\[1\] Ait Kaci (H.), A Lattice-Theoretic Approach toComputation Based on a Calculus of Partially-OrderedType Structures.
Ph.D. Thesis - Computer andInformation Science, Univ.
of Pennsylvania,Philadelphia, USA, 1984\[2\] Boitet (C.), Representation a d computation of unitsof translation for Machine Interpretation of spokentexts.
GETA & ATR Tech.
Report TR-1-0035, August88\[3\] Cohard (B.
), Logiciel de d~tection et de correction deserreurs lexicales.
Th~se CNAM, Grenoble, Mars 88\[41 Genthial (D.), Courtin (J.
), Kowarski (I.
),Contribution of a Category Hierarchy to theRobustness of Syntactic Parsing.
13 th CoLing,Helsinki, Finland, August 1990, Vol.
2, pp 139-144\[5\] Genthial (D.), Contribution d la construction d'unsystdme robuste d'analyse du franfais.
Th~se deI'universit~ Joseph Fourier, Grenoble i, Janvier 1991\[61 Richardson (S.D.
), Enhanced Text Critiquing using aNatural Language Parser: the CRITIQUE System.IBM Research Report RC 11332, Yorktown Heights,USA, 1985\[7\] Strube de Lima (V.L.
), Contribution d 1'ttude dutraitement des erreurs au niveau lexico-symaxique donsun texte 6crit en franfais.
Th~se de l'Universitt~ JosephFourier, Grenoble I, Mars 1990\[8\] TEl (Text Encoding Initiative), Guidelines for theEncoding and lnterchange of Machine Readable Texts.Computer Center MC135, University of Illinois atChicago and Oxford University Computing Services.\[9\] Tomasino (1.
), ODILE : Un Outil d'lnt~grationExtensible de Dictionnaires et de Lemmatiseurs.CNAM.
Grenoble, l~c.
90.\[10\] V~ronis (J.
), Morphosyntactic correction in naturallanguage interfaces.
12th CoLing, Budapest, Hungary,August 1988, pp 708-713AC'TES DE COLING-92.
NANTES, 23-28 AO~q' 1992 1 0 1 8 PROC.
OF COLING-92.
NANTES, AUG. 23-28, 1992
