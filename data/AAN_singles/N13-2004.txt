Proceedings of the NAACL HLT 2013 Student Research Workshop, pages 24?31,Atlanta, Georgia, 13 June 2013. c?2013 Association for Computational LinguisticsA Rule-based Approach for Karmina GenerationFrankyShanghai Jiao Tong University800 Dongchuan Rd., Shanghai, 200240, ChinaCharles University in Prague, Faculty of Mathematics and PhysicsMalostransk?
n?m?st?
25, Prague 1, 11800, Czech Republicfranky.id@gmail.comAbstractWe present our work in generating Karmina,an old Malay poetic form for Indonesian lan-guage.
Karmina is a poem with two lines thatconsists of a hook (sampiran) on the first lineand a message on the second line.
One of theunique aspects of Karmina is in the absence ofdiscourse relation between its hook and mes-sage.
We approached the problem by generat-ing the hooks and the messages in separateprocesses using predefined schemas and amanually built knowledge base.
The Karminaswere produced by randomly pairing the mes-sages with the hooks, subject to the con-straints imposed on the rhymes and on thestructure similarity.
Syllabifications were per-formed on the cue words of the hooks andmessages to ensure the generated pairs havematching rhymes.
We were able to generate anumber of positive examples while still leav-ing room for improvement, particularly in thegeneration of the messages, which currentlyare still limited, and in filtering the negativeresults.1 IntroductionComputational creativity is an interesting area ofresearch, since it deals with how a machine canactually produce something new and creative.
Cre-ative, in the sense that it is something that usuallycomes from human?s imagination, which is quiteabstract, and unexpected from a machine.
In thiswork, we investigated the matter of creativity inlanguage.
In particular, we focused our work in thegeneration of Karmina, an old Malay poetic formfor Indonesian language.Karmina is a poem that consists of two lineswith around 8-12 syllables on each line.
The firstline is called the hook, which acts as the openingline of the poem.
The second line is called themessage, which contains the meaning of the poem.The language used in Karmina is usually less for-mal, i.e.
closer to conversational language.
Karmi-na resembles Pantun, a more well-known form ofMalay poetic form, but is different from Pantun inthe number of lines it has.
It can probably be com-pared to a couplet in English, in terms of the num-ber of lines and rhymes it must follows.
Due to itsshort presentation, Karmina is also called a quickPantun.One of the unique aspects of Karmina is in itshook and message relationship.
The hook on thefirst line has no discourse relation with the mes-sage on the second line.
Take as an example Kar-mina presented below in Indonesian:Gendang gendut tali kecapiKenyang perut senanglah hati(Fat drum string of luteFull stomach makes a happy heart)and also our attempt to make one in English:Soft meatball is easy to chewLove them all but trust a fewThe hook in Karmina acts as the entrance of thepoem and is used to engage interest or curiosity ofthe audience.
It usually talks about somethingcommon in daily life, some unusual or less mean-24ingful information, or obvious facts, e.g.
Buah pi-sang warnanya kuning (Banana is yellow).The message of Karmina contains the realmeaning that wants to be delivered by the author.
Itmight contain ideas, jokes, mockeries, or even ad-vices.
The sentence used in the message does notneed to be formal.
It creates its poetic form byomitting some function words, changing the wordorder, or by using the base form of the word in-stead of using a morphologically derived one.The rhyme scheme in Karmina is formallydeemed to be a-a.
But we found that most of theKarminas have the rhyme schemes of (a b)-(a b),with (a b) in the same line, as shown in the exam-ples above.
The position of the rhyme a in an (a b)line is usually located in the middle of the sentenceand is determined by how to read the Karmina sothat the rhymes on both lines match to each other.We chose to work with Karmina due to its sim-ple and short presentation.
It will be both challeng-ing and interesting to answer the question ofwhether we can computationally generate a simpleand short poem that contains a single idea (mean-ing), while at the same time maintain its poeticcharacteristics.
From a cultural point of view, weconsidered this as one of the ways to conserve thispoem, as well as to introduce it to others.We centered our work in generating Karminawith rhyme schemes of (a b)-(a b).
We consideredKarmina in this form to be more poetic and havemore interesting structure.
We present our work byfirst mentioning some related works in the area ofpoetry generation in Section 2.
In Section 3, wedescribe our approach for syllabification, hook andmessage generation, and the construction of thefinal Karmina.
We present the results of our exper-iments in Section 4.
The discussions of findings,issues, and future works are presented in Section 5.2 Related WorksSome recent works in poetry generation are in thearea of English Haiku generation.
In Netzer et al(2009), the authors use word association infor-mation to enrich user supplied seed words withtheir associated words.
Candidate lines are pro-duced from pre-extracted lines that match the seedwords and their associated words, as well as thechosen syntactic patterns.
The poems are generatedby random line matching processes and by filteringthe generated Haikus based on some constraintsand internal associativity scores.
The work byWong and Chun (2008) uses a different approach.They represent the extracted line as a vector ofwords.
The Haikus are produced by generatingsentence pairs based on the selected seed words.They are then ranked based on the similarity scoresof their lines.Other previous work in a more general area ofpoetry is by Manurung et al(2000).
In this work,they proposed a stochastic hill climbing searchmodel that iteratively produces set of candidatesolutions and evaluates them based on some de-fined phonetic, linguistic, and semantic measures.Gervas (2001) and D?az-agudo et al(2002) focustheir works in the area of Spanish poetry genera-tion.
They use prose description and rough specifi-cation from user as their input.
The appropriatestrophic forms are selected based on this input.
Theprocess continues using a case based reasoningapproach to produce the final poem.We consider our work to have different focusand pose different challenges.
The first thing is thatthe meaning of a Karmina can be understood di-rectly.
This property might be different from othertype of poetry which requires deeper interpretation.Hence, the problem usually lies in generating apoem with a deep embedded meaning.
The secondone is related to the property of the hook thatshould contain less important information (ignora-ble) compared to the message.
We believe that wecould fulfill these two requirements by definingproper schemas and constraints, and by controllingthe words used.
The last thing to consider is aboutthe absence of discourse relation between the hookand the message.
Our current approach to the prob-lem is by generating the hooks and the messagesseparately using different knowledge base and dif-ferent constraints.
By this treatment, we expect thegenerated hooks and messages to be independentof each other.3 Our Current ApproachIn his thesis, Manurung (2003) defines three prop-erties that a poem should fulfill: meaningfulness,grammaticality, and poeticness.
We think that the-se three are inherent properties of Karmina andunquestionably should be fulfilled by the generatedpoem.
Meaningfulness is handled by putting con-straints on the proposed schemas which restrict thewords used in the poem.
It is also supported by25ensuring the grammaticality of the poem, which ishandled by positioning the words inside the sche-ma properly.
In terms of poeticness, we considerthat Karmina obtains its poeticness through itsrhyme structure, limitation on the number of wordsor syllables, and the forms of the words used.Hence, poeticness is handled by considering thesethree aspects in the generation of the poem.We will start this section with the description ofthe schemas used in generating the hooks and themessages.
We will then continue with the explana-tion of the syllabification algorithm and the gen-eration of the Karmina.3.1 Generating the HookThe hook of Karmina can be recognized from itscharacteristic of somehow sounds like an ?unim-portant?
utterance, e.g.
kelapa diparut enakrasanya (grated coconut tastes good) or ikan lelebeli di pasar (catfish bought from the market).
Inour first attempt, we took text segments from thecollections of news, blogs, and reviews websites.The segments were produced by splitting the sen-tences using punctuations, such as comma, period,question mark, single and double quotes, and ex-clamation mark.
We were hoping to find segmentsthat could be used as hooks.
But, we found that thiskind of utterance is quite rare.We looked deeper into some of the examples ofKarmina and found something interesting.
The ma-jority of the hooks that we met have some similarsyntactic and semantic patterns.
We analyzed theexamples and came out with a set of schemas togenerate the hooks.
One property of Karmina thatwe think makes the generation of the hook possibleis that a sentence in Karmina usually consists ofonly 4-5 words.
We defined around 19 schemas forthe hook.
Some of them differ only in their wordorder, e.g.
a sentence with a word order of X Y Zand a sentence with a word order of X Z Y, whereX, Y, Z can be noun, verb, adjective, etc.
Theseschemas are not exhaustive.
They cover some ofthe hooks that we found on our small examples.Other forms of hooks may also present.The knowledge base was built manually by find-ing all suitable nouns, verbs, and other necessaryinformation.
We did some categorization on them,e.g.
as fish, flower, tree, location, and specifiedtheir relations as required in the schemas.
We de-scribe in this section the first three schemas that wedefined.
We use ?,?
(comma) to denote a conjunc-tion and ?;?
(semicolon) to denote a disjunction.Schema 1Dahulu X sekarang YConstraintsNoun(X), Noun(Y), ChangeTo(X,Y),Length(X,1), Length (Y,1)In Schema 1, the generated hook will have ameaning of before (dahulu) and after/now(sekarang).
In this case, X and Y are usually re-placed by nouns that have this kind of relationship.The replacement using other word classes is alsopossible.
We restricted X and Y to noun since it isthe most common class we saw on the examples.In order to check for this relationship, we defined apredicate ChangeTo that check for two thingsfrom the knowledge base:?
Whether X can be made from Y and vice versa,e.g.
knife is made from iron.?
Whether X is better than Y and vice versa, e.g.gold is better than silver.Predicate Length checks for how many words thenoun X and Y has, which we limit to 1, to maintainthe poeticness of the generated hook.
In our currentwork, we used the number of words instead of syl-lables to simplify the word selection process, withthe assumption that the number of syllables insidea word is around two to four syllables.Schema 2Sudah X Y pulaConstraintsNoun(X), Noun(Y), SameType(X,Y),Length(X,1), Length(Y,1), (Tree(X);Flower(X); Food(X))Schema 2 was made from one of the examplesthat we found.
The X and Y come from the samecategory, i.e.
both are the name of fish, bird, vege-table, island, tree, etc.
The meaning of the generat-ed hook will be that Y is redundant because X isalready present.
We restricted X and Y to be in thesame category to give an emphasis on this redun-dancy.
We used tree, flower, and food for the cate-gories.
This was based on our experiments that26using other categories resulted in a sentence withodd meaning.Schema 3X Propnya YConstraintsNoun(X), Adjective(Y), Has(X, Prop,Y) Length(X,2), Length(Y,1)In Schema 3, the generated hook simply meansX with a property Prop that has the value of Y.For example, X can be a banana (buah pisang) witha property of color (warna) and property?s value ofyellow (kuning).
Hence, the generated hook will beBuah pisang warnanya kuning (Banana has a yel-low color).
We found that this kind of hook is quiteoften used.3.2 Generating the MessageThe message of Karmina is more free in its mean-ing and structure.
Creating all possible schemas isnot a feasible option.
However, we managed tofind messages that follow certain schemas.
Theyhave the same structures with the Schema 1 andSchema 2.
Hence, in this work, the message wasgenerated by using these two schemas only.
Thesetwo schemas bind the hook and the message tohave the same structure, i.e.
both have the struc-tures of Dahulu X sekarang Y or Sudah X Y pula.They differ in the types and constraints of the Xand Y used.
We experimented using a list of posi-tive and negative sentiment words to replace X andY.For Schema 1, X and Y were replaced by wordsthat have different sentiment (positive-negative ornegative-positive).
These two words are antonymto each other.
The generated message will have ameaning of a change from a positive (good) tonegative (bad) condition, or vice versa, e.g.
Dahulukaya sekarang miskin (was rich but now poor).In Schema 2, X and Y were replaced by wordsthat have the same sentiment.
We expected the re-sulting sentences to contain the repetition of twogood or two bad expressions and hence, intensify-ing the positive or negative condition.
For exam-ple, Sudah busuk bau pula (rotten and stink).To our knowledge, there are no subjectivity lex-icons for Indonesian.
Hence, we produced the listby translating English subjectivity lexicon (Hu andLiu, 2004), which originally has 2006 positivewords and 4783 negative words, using GoogleTranslate.
The translation results were then filteredmanually to remove untranslated words, bad trans-lations, and words that do not contain positive ornegative sentiment.
The final lexicon contains 740positive words and 1500 negative words.3.3 SyllabificationThe syllabification is used in searching for thehooks that rhyme with the messages.
We used a setof rules to cut syllables out of the word iteratively.The syllabification starts from the front and bylooking into the pattern of the first 3-6 letters of theword.
We defined rules for the possible patternsthat determine how many letters from the front thatwill be taken as a syllable.
The syllable is cut outfrom the word and the iteration continues with thetruncated word.
The iteration stops when only twoor less letters are left.
The patterns are the combi-nations of vowel-consonant patterns and alphabetletters.
The vowel-consonant pattern is simply asequence of v (vowel) and c (consonant) marker.There are only five vowels in Indonesian(a,i,u,e,o).kecapi (cvcvcv) (take first 2)capi   (cvcv)   (take first 2)pi     (cv)     (take all)Figure 1.
Syllabification of kecapi to (ke, ca, pi)The example in Figure 1 shows the word kecapimatches the cvcv pattern, and the rule specifies totake the first two letters from the front (ke) as asyllable.
The truncated word capi also falls into thesame rule.
In the last step, only two letters are leftand we took them all as a syllable.3.4 RhymesIn our work, we used two types of rhymes, perfectand imperfect (half).
In Indonesian, the pronuncia-tion of a word can be determined from its syllablesand hence, we can check whether two wordsrhyme with each other by matching their last sylla-bles.
For perfect rhyme, we considered two wordsas having perfect rhyme if they have the same lastsyllables.
For imperfect rhyme, we divided thecase into two.
If the last letter of the last syllable isa vowel, we took this vowel to be compared.
If thelast letter is a consonant, we searched for the first27vowel from the last after the consonant and tookthe vowel together with the following consonantsto be compared.
For diphthong (ai, au, oi), we tookboth of the vowels to be compared.3.5 Constructing the KarminaThe Karmina was produced by first generating alist of hooks and a list of messages.
The generationprocesses were done separately for the hook andthe message.
We selected one of the messages andwe tried to find a proper hook for the messagefrom the list of hooks.Syllabifications were performed on the cuewords of the selected message and on the cuewords of the hooks in the list.
Cue words of hookor message are the middle word and the last wordof the sentence.
Given the schema, we can usuallydetermine the second word as the middle word.We produced a list of possible hooks for the se-lected message by selecting hooks that rhyme withthe message, producing (a b)-(a b) rhyme scheme.It was done by comparing the last syllables of thecue words of the message and the hooks.
We dif-ferentiated the hooks which have perfect rhymeswith the message and the hooks which have imper-fect rhymes.
We gave higher priority to the hooksthat rhyme perfectly with the message.
If no suchhooks exist, we took the hook from the later.Message generated using Schema 1 or Schema2 could only take the hook that has the same struc-ture.
Hence, in this work, the generated Karminacould only have the structure of Schema 1 orSchema 2 on both of its lines.The final Karmina was produced by pairing theselected message with one of the possible hookswhich was selected randomly from the list.4 ExperimentsWe implemented our work for syllabification andKarmina construction in Perl, and generation of thehooks and the messages in Prolog.
We evaluatedthe syllabification on a small list of 258 uniquewords taken from two news articles.
We found that16 words were incorrectly syllabified.
The maincauses are due to incomplete rules, foreign wordsor abbreviations, and ambiguous words.
Examplesof ambiguous words are beribu that can be read asber-ibu or be-ribu, and words that contain diph-thong-like string such as baikan and bagaikan.
Inthe first word, the ai is not a diphthong.
Both casesmight require context disambiguation and lemma-tization which are not covered in the current rule-based syllabification.For Karmina evaluation, first we generated listsof all possible hooks and messages from Schema1 and Schema 2.
Next, we generated all possibleKarminas from these lists.
However, we found thatall generated Karminas were in the form of Sche-ma 2.
We failed to generate Karmina for Schema1 since there were no hooks and messages thatrhyme with each other due to small number ofhooks and messages that we have for Schema 1.Table 1 shows the evaluation results.Table 1.
Karmina EvaluationHook Message TotalProper Proper 10Proper Not Proper 30Not Proper Proper 1Not Proper Not Proper 59100The evaluation was performed on 100 randomlyselected Karminas.
The proper and improper anno-tations were done through discussions by two na-tive speakers.
We managed to get 10 Karminaswith acceptable hooks and messages.
We foundthat the improper hook was mainly caused by theuse of uncommon names e.g.
holdi, hamboi.
Theother cause was that X and Y in Schema 2 maysometimes not be able to be placed side by side,e.g.
Sudah tomat srikaya pula (tomato and sugar-apple).
Although both of the objects are fruits, themore common perception of tomato is as vegeta-bles and hence, the sentence sounds strange.a)  Sudah leci menteng pula   (lychees and menteng)Sudah ahli tampan pula    (skilled and handsome)b)  Sudah kiwi ceri pula             (cherry and kiwi)Sudah ahli kejujuran pula    (skilled and honesty)Figure 2.
(a) Positive example (b) Negative exampleFor the message, the main cause was as shownin Figure 2 (b).
The sentence sounds unusual be-cause it combines adjective skilled with noun hon-esty.
This happened because of the incompleteconstraints on the schema, i.e.
no restriction in thepart of speech of X and Y.
Other reason was be-cause of words that do not fit to be put together,e.g.
Sudah agung bagus pula (majestic and smart).285 Discussion and Future WorksIn this section, we discuss several findings and is-sues that we found, and our future plans for thework.Incomplete Constraints.
The constraints in theschema are the most crucial parts of the generationprocess.
The grammaticality, meaning, and poet-icness of the generated sentence depend on theconstraints used.
Hence, some of the problems asthe one shown in Figure 2 were caused by incom-plete specification of the constraints.Manual Intervention.
The main issue in utiliz-ing knowledge base and schemas is in the amountof manual work that needs to be performed in cre-ating them.
One of the problems is in the infor-mation collection, such as collecting property ofnouns (e.g.
skin as property of a fish and the skinof a fish is slippery), antonyms, and what kind ofverb that can match certain noun (e.g.
coconut canbe grated).
Currently, the information was builtmanually and hence slowly.One of the options to automate the knowledgecreation such as ?what object has what kind ofproperty with what value?
is by first generating allpossible combinations of nouns and properties, andfinding a way to validate this knowledge efficient-ly.
Data that contains this information might beneeded for validation.
Another option might be toquery a search engine.
Using collocation infor-mation in the results, we may somehow validatethe knowledge.
However, the policy of automatedquery of current search engine might be a hurdle.The other issue is if we want to automate thecreation of the schema.
Using extracted sentencesand part of speech information may be useful.
Butthis approach might not be enough, since we alsoneed to capture the dependency between items.Without deeper constraints, the extracted schemawill be just a shallow representation.Filtering the Knowledge.
We found that havingtoo much knowledge about certain things can actu-ally result in a less or non-poetic sentence, e.g.
ahook kod pasifik kulitnya licin (pacific cod hasslippery skin).
Grammatically and semantically,there is nothing wrong with the sentence.
Theproblem lies in the use of kod pasifik (pacific cod)that is rarely mentioned in a normal daily life.Since the hook is usually about something com-mon to the majority of the audience, using a rareterm like this might cause it to lose its poeticness.Corpus Based Approach for Message Gener-ation.
We are considering the corpus-based ap-proach that utilizes the segments extracted fromthe corpus for message generation.
Contrary to thehook, we found that the use of segments for themessage is more promising.
We experimented withblog corpus, since we considered it as the mostproper corpus, because of its informal and conver-sational style language.
We picked segments thathave length (number of words) greater than two,and for poeticness reason, do not start with certainfunction words.
The chosen segments were furtherprocessed by normalizing slang words, e.g.
gw tosaya.
Further removal of unpoetic function words(yang, adalah, untuk) was performed.
The finalsegments that have length more than three werestored.
The Karmina generation was performedusing the same procedure.
We determined the mid-dle word of the message by taking the word wherethe fourth syllable is located.
Figure 3 shows thepositive examples that we were able to generate.One important aspect that we still need to consideris about the characteristics of the segments that canbe considered as good messages.Ikan cakalang di danau emas   (tuna in lake emas)Selamat ulang tahun ya mas     (happy birthday)Sungai bengkulu sungai bilah (bengkulu and bilah river)Aku malu kepada allah            (i am ashamed of god)Figure 3.
Positive examples of Karmina using corpusbased approach for message part6 ConclusionsWe described our work in Karmina generation thatutilized a rule-based approach in generating thehooks and the messages.
We considered the notionof grammaticality, meaningfulness, and poeticnessby defining proper schemas and constraints.
Wealso discussed some of the problems and futureimprovements in section 5.
We concluded that therule-based approach is able to produce some posi-tive examples.
Some limitations still exist, espe-cially in the message generation, and a lot ofimprovements are still needed to produce more ofproper Karmina.
We are considering the corpus-based approach in our future work for the messagegeneration and a more automated approach inknowledge collection.29ReferencesB.
D?az-agudo , P. Gerv?s, and P.A.
Gonz?lez-calero.2002.
Poetry Generation in COLIBRI.
Advances inCase-Based Reasoning (2002): 157-159.H.M.
Manurung, G. Ritchie, and H. Thompson.
2000.Towards a computational model of poetry genera-tion.In Proc.
of the AISB?00.H.M.
Manurung.
2003.
An evolutionary algorithm ap-proach to poetry generation.
Ph.D. thesis, Universityof Edinburgh.J.
M. Toivanen, H.Toivonen, A.Valitutti, and O. Gross2012.
Corpus-based generation of content and form inpoetry.
In International Conference on ComputationalCreativity, Dublin, Ireland (pp.
175-179).M.
Hu and B. Liu.
2004.
Mining and Summarizing Cus-tomer Reviews.
In Proceedings of the ACM SIGKDDInternational Conference on Knowledge Discoveryand Data Mining (KDD-2004).M.
Tsan Wong and A. Hon Wai Chun.
2008.
AutomaticHaiku generation using VSM.
In Proc.
ofACACOS?08, April.N.
Tosa, H. Obara, and M. Minoh.
2008.
Hitch haiku:An interactive supporting system for composing haikupoem.
In Proc.
of the 7th International Conference onEntertainment Computing.P.
Gervas.
2001.
An expert system for the compositionof formal Spanish poetry.
Journal of Knowledge-Based Systems, 14.P.
Gervas.
2002.
Exploring quantitative evaluations ofthe creativity of automatic poets.
In Proc.
of the 2ndWorkshop on Creative Systems, Approaches to Crea-tivity in Artificial Intelligence and Cognitive Science,the 15th European Conf.
on Artificial Intelligence(ECAI 2002).Y.
Netzer, D.Gabay, Y.Goldberg, and M.Elhadad.
2009.Gaiku: generating Haiku with word associationsnorms.
In Proceedings of the Workshop on Computa-tional Approaches to Linguistic Creativity.Appendix A.  Schemas for Hook GenerationThe rest of the schemas used for generating thehooks are provided below as references.
Some ad-ditional relations that might need to be explainedare:?
Location(X): X is a location, e.g.
name of amountain, name of a river, etc.?
LocationType(X): location type of X, e.g.
X isa river, a mountain, or other abstract typessuch as on the top of an object (on a table), in-side an object, etc.?
Has(X,Y,A,B): Y is performed on X, resultingin X with property A and property value of B,e.g.
Has(fish, fried, taste, good).We use Prolog notations such as ?,?
(comma) todenote a conjunction, ?;?
(semicolon) to denote adisjunction, and ?_?
(underscore) to denote anymatching term.Schema 4Sudah ke X ke Y pulaConstraintsLocation(X), Location(Y), Location-Type(X)==LocationType(Y),Length(X,1), Length (Y,1)Schema 5X Y PropnyaConstraintsNoun(X), Adjective(Y), Has(X,Prop,Y)Length(X,2), Length(Y,1)Schema 6X diZ Y PropnyaConstraintsNoun(X), Verb(Z), Adjective(Y),Has(X,Z,Prop,Y)Schema 7X diZ Propnya YConstraintsNoun(X), Verb(Z), Adjective(Y),Has(X,Z,Prop,Y)Schema 8X Z di YConstraintsNoun(X), Verb(Z), Location(Y),not(Location(X)), Has(X,Z,_,_),Length(X,1)Schema 9X di YConstraintsNoun(X), Location(Y),not(Location(X)), Length(X,2),Length(Y,2)30Schema 10X YConstraintsNoun(X), Noun(Y), SameType(X,Y),Length(X,2), Length(Y,2)Schema 11X X Y YConstraintsNoun(X), Noun(Y), SameType(X,Y),Length(X,1), Length(Y,1)Schema 12X Y YConstraintsNoun(X), Noun(Y), SameType(X,Y),Length(X,2), Length(Y,1)Schema 13X X YConstraintsNoun(X), Noun(Y), SameType(X,Y),Length(X,1), Length(Y,2)Schema 14X Y A AConstraintsNoun(X), Adjective(Y), Noun(A),Has(X,_,Y), SameType(X,A),Length(X,1), Length(A,1)Schema 15X Y A BConstraintsNoun(X), Adjective(Y), Noun(A), Ad-jective(B), Has(X,_,Y), Has(A,_,B),Length(X,1), Length(A,1)Schema 16X Y AConstraintsNoun(X), Adjective(Y), Noun(A),Has(X,_,Y), SameType(X,A),Length(X,1), Length(A,2)Schema 17X A BConstraintsNoun(X), Noun(A), Adjective(B),Has(A,_,B), SameType(X,A),Length(X,2), Length(A,1)Schema 18X Z Y PropnyaConstraintsNoun(X), Verb(Z), Adjective(Y),Has(X,Z,Prop,Y)Schema 19X Z Propnya YConstraintsNoun(X), Verb(Z), Adjective(Y),Has(X,Z,Prop,Y)31
