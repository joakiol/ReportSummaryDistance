Proceedings of the SIGDIAL 2013 Conference, pages 127?131,Metz, France, 22-24 August 2013. c?2013 Association for Computational LinguisticsA Prolog Datamodel for State Chart XMLStefan RadomskiTU DarmstadtTelekooperation GroupHochschulstrasse 10radomski@tk.informatik.tu-darmstadt.deDirk Schnelle-WalkaTU DarmstadtTelekooperation GroupHochschulstrasse 10dirk@tk.informatik.tu-darmstadt.deStephan Radeck-ArnethTU DarmstadtTelekooperation GroupHochschulstrasse 10arneth@rbg.informatik.tu-darmstadt.deAbstractSCXML was proposed as one descriptionlanguage for dialog control in the W3CMultimodal Architecture but lacks the fa-cilities required for grounding and rea-soning.
This prohibits the application ofmany dialog modeling techniques for mul-timodal applications following this W3Cstandard.
By extending SCXML with aProlog datamodel and scripting language,we enable those techniques to be em-ployed again.
Thereby bridging the gapbetween respective dialog modeling re-search and a standardized architecture toaccess and coordinate modalities.1 IntroductionDeploying multimodal applications has long beenan activity of custom solutions, each with theirown access to modalities, approaches to sensor fu-sion and fission and techniques for dialog mod-eling.
With the advent of the W3C MMI archi-tecture (Bondell et al 2012), the W3C proposeda standardized approach to ensure interoperabil-ity among its constituting components (Schnelle-Walka et al 2013; Dahl, 2013).The architecture proposed by the W3C decom-poses a multimodal application into a nested struc-ture of interaction managers for dialog control andmodality components for in- and output.
An ap-plication is conceived as a set of control docu-ments expressed in SCXML (Barnett et al 2012)or CCXML (Auburn et al 2011) for the interac-tion managers and a set of presentation documentswith modality-specific markup for the modalitycomponents.
A topmost root controller documentdescribes the global dialog and instantiates modal-ity components as required.
Each modality com-ponent can, in turn, again be an interaction man-ager, handling more fine granular concerns of dia-log control, such as error correction or even sensorfusion/fission.As one proposed XML dialect for control doc-uments, State Chart XML (SCXML) is given theresponsibility to model an applications dialog be-havior.
SCXML as such is a markup language toexpress Harel state charts (Harel and Politi, 1998)with nested and parallel machine configurations.The transitions between configurations are trig-gered by events delivered into the interpreter ei-ther from external components or raised by theinterpreter itself.
Whenever an event arrives, theSCXML interpreter can perform actions describedas executable content.
This includes invoking orsending events to external components, processingdata or updating the datamodel via an embeddedscripting language.SCXML has been proven to be suitable to de-couple the control flow and presentation layerin dialog management (Wilcock, 2007).
It hasbeen used in several applications to express dialogstates (Brusk et al 2007) or to easily incorporateexternal information (Sigu?enza Izquierdo et al2011).
However, SCXML seems to be suited onlyto implement finite state or frame-based/form-filling dialogue management approaches.
Appli-cations using theses dialog techniques are often-times inflexible as they lack grounding and rea-soning.
In this regard, Fodor and Huerta (2006)demand that dialog managers should feature: (i) aformal logic foundation, (ii) an interference en-gine, (iii) general purpose planners and (iv) knowl-edge representation and expressiveness.Most of these requirements are addressed byemploying Prolog.
Embedding it as a scriptinglanguage into SCXML allows multimodal applica-tions in the W3C MMI Architecture to employ themore elaborate dialog management techniques, re-sulting in more natural and flexible interaction.
Inthis paper we describe our integration of Prologas an embedded scripting language in an SCXML127datamodel.
All of the work described here is im-plemented as part of our uSCXML interpreter1 byembedding the SWI Prolog implementation.2 The Prolog DatamodelDatamodels in SCXML are more than simplerepositories for storing data.
With the exceptionof the null datamodel, they provide access toembedded scripting languages.
The datamodelsalready specified by the SCXML draft are thenull, the xpath and the ecmascript data-model.
Prolog itself is a declarative language forlogic programming in which facts and rules areused to answer queries.
The result of a query iseither a boolean value or the set of valid assign-ments for the queries variables.In the following sections, we will describe ourintegration of Prolog as a datamodel in SCXML.The structure of the description loosely follows theexisting descriptions for datamodels already foundin the SCXML draft.2.1 AssignmentsIn an SCXML document, there are two elementswhich will assign values to variables in the data-model.
These are <data> for initial assignmentsand <assign> itself.
In Prolog, variable assign-ment is only available in the scope of a query.
Torealize variable assignment nevertheless, we in-troduce the variables as predicates, with their as-signed data as facts.
Listing 1 exemplifies someassignments followed by their resulting Prologfacts.<data id="father">bob, jim.bob, john.</data>% father(bob, jim).% father(bob, john).<data id="">mother(martha, jim).mother(martha, john).</data>% mother(martha, jim).% mother(martha, john).<assign location="">retract(father(bob, jim)).assert(father(steve, jim)).</assign>% father(bob, john).% father(steve, jim).<data id="childs"><child name="john" father="bob" /><child name="jim" father="bob" /></data>% childs([% element(child,% [father=bob, name=john], []),1https://github.com/tklab-tud/uscxml% element(child,% [father=bob, name=jim], [])]).<data id="household">{name: "The Bobsons",members: [?bob?, ?martha?, ?jim?, ?john?
]}</data>% household({% name:?The Bobsons?,% members:[bob, martha, jim, john]}).Listing 1: Assignments and their results in Prolog.If given, the id or location attribute iden-tifies the predicate for which the content is to beasserted as fact, otherwise the content is assumedto be a dot-separated list of prolog queries or ex-pressions.
The content might also be loaded perURL in the element?s src attribute.
In the con-text of SCXML, it is important to support XMLand JSON data as shown in the last two examples.Not only enables this an application developer toload data from existing XML and JSON files, it isalso important to support these representations forincoming events as we will see in the next section.There is no standardized representation forXML DOMs or JSON data in Prolog.
We prag-matically settled upon the structure returned by theSWI-Prolog SGML parser and the JSON converteras de-facto standards respectively.With the Prolog datamodel, having an idor location attribute at assignment elementsseems superfluous.
We do keep them as theSCXML draft specifies these as required at-tributes.2.2 Structure of EventsWhenever an event is received by the SCXML in-terpreter, it has to be transformed into a suitablerepresentation in order to operate on its variousfields and content as defined by the SCXML draft.We choose to represent an event as the single pred-icate event/1 with its facts as compound termsreflecting the event?s fields as shown in listing 2.event(name(?foo?)).event(type(?external?)).event(sendid(?s1.bar?)).event(origin(?http://host/path/basichttp?)).event(origintype(?http://www.w3.org/TR/scxml/#BasicHTTPEventProcessor?)).event(invokeid(??)).event(data(...)).event(param(...)).event(raw(...
)).Listing 2: Example facts for event/1.This representation enables access to the eventsindividual fields by simple queries such asevent(name(X)), which will resolve X to the128event?s name foo.
Whenever the interpreter isabout to process a new event, all old facts aboutevent/1 are retracted and reasserted with regardto the new event.The event?s data field may contain a space nor-malized string as an atomic term, an XML DOMor, optionally, data from a JSON structure.
Thestructure of JSON and XML DOMs is the same aswith assignments in listing 1.2.3 ScriptingThe <script> element either contains Prologexpressions as they would be written in a Prologfile or references such a file directly via its src at-tribute.
Together with <assign> and <data>,this element is the third available to load Prologfiles into the SCXML interpreter.
This is some-what undesirable and we would propose to use(i) <data> to establish initial a-priori knowledgeas facts, (ii) <assign> for subsequent changesand additions to facts and (iii) <script> to in-troduce new rules or load Prolog files containingprimarily rules.It is important to note that we do provide a fullISO-Prolog implementation at runtime.
This en-ables an application developer to load arbitraryProlog files with all their facts and rules.2.4 System VariablesThe SCXML draft requires the datamodel to ex-pose various platform specific values to the data-model.
These are the identifier of the current ses-sion, the name of the document and the availableI/O processors to send and receive events.
Follow-ing the approach of defining predicates to provideaccess to information in the datamodel, we intro-duced predicates as given in listing 3.% name/1:name("foo").% sessionid/1:sessionid("bar").% ioprocessors/1:ioprocessors(basichttp(location(?http://host/path/basichttp?))).ioprocessors(scxml(location(?http://host/path/scxml?
))).% ioprocessors/2:ioprocessors(name(basichttp),location(?http://host/path1?)).ioprocessors(name(?http://www.w3.org/TR/scxml/#BasicHTTPEventProcessor?),location(?http://host/path1?
))....Listing 3: Predicates for system variables.Defining two predicates for ioprocessors is sim-ply a matter of convenience as their short names(e.g.
basichttp or scxml) are suited as functorsfor compound terms, where their canonic namesare not.
Therefore ioprocessors/1 will onlycontain the short names, and ioprocessors/2contains both.
This allows us to send events, e.gwith the basichttp ioprocessor via:<send type="basichttp"targetexpr="ioprocessors(basichttp(location(X)))"event="foo">Listing 4: Sending ourself an event via basichttp.2.5 Conditional ExpressionsConditional expressions in SCXML are usedto guard transitions and as part of <if> and<elseif> elements in executable content.
Theyconsist of a single, datamodel specific expressionthat ought to evaluate to a boolean value.
In thecase of our Prolog datamodel, these expressionscan take the form of an arbitrary query (see list-ing 5).
If there exists at least one solution to thequery, the conditional expression will be evaluatedto true, and false otherwise.% Is there someone who is not the father% of Jim and older than bob?<if cond="not(father(X, jim)),older(X, bob).
">% Was the current event received from an% external component?<transitiontarget="s3"cond="event(type(X)), X=?external?
"/>% Does the JSON structure in the event?s% data contain a household whose name% is ?The Bobsons?
?<transitiontarget="s5"cond="event(data(household(name:X))),X=?The Bobsons?
"/>Listing 5: Boolean expressions in cond attribute.2.6 Evaluating as StringThere are several situations in the SCXML draft,where an element from the datamodel needs tobe represented as a string.
These are usually at-tributes of elements that equal or end in expr, e.g.log.expr or send.targetexpr.In these contexts, the interpreter will allow forqueries with a single free variable that has to re-solve to an atomic term.
The actual value of theexpression is then the string representation of thevariable from the last solution to the query (seelisting 6).129% This query only has a single solution<log label="Event Name"expr="event(name(X))" />% This query has multiple solutions, only the% last is used when evaluating as string<log label="Bob?s youngest son"expr="father(bob, X)" />Listing 6: Evaluating an expression as string.2.7 ForeachThe <foreach> element in SCXML allows toiterate over values as part of executable content.Its attributes are array as an iterable expres-sion, item as the current element in the array andindex as the current iteration index.In our Prolog datamodel, this element is avail-able to iterate over all solutions of a query asshown in listing 7.<foreach array="father(bob, X)"item="child"index="index"><log label="child" expr="child(X)" /><log label="index" expr="index(X)" /></foreach>% results in the following log outputchild: jimindex: 0child: johnindex: 1child: jackindex: 2Listing 7: Foreach expressions.3 ExampleListing 8 exemplifies some of the language fea-tures of the Prolog datamodel.
We start by intro-ducing two predicates with the <data> element,the first defined as dot seperated facts, the secondone as inline Prolog expressions.
In the first states1, we iterate all children of bob and log theirnames.
Transitioning to the next state is performedif bob and martha have a common child.
In s2, wesend ourself an event containing a XML snippetusing the basichttp I/O processor.
Then we tran-sition to the final state if there is an element witha tagname of p in the received XML document.In the final state we print all facts we establishedvia Prolog?s listing/1 predicate and the inter-preter stops.<scxml datamodel="prolog"><datamodel><data id="father">bob, jim.bob, john.</data><data id="">mother(martha, jim).mother(martha, john).</data></datamodel><state id="s1"><onentry><foreach array="father(bob, X)"item="child"index="index"><log label="index" expr="index(X)" /><log label="child" expr="child(X)" /></foreach></onentry><transition target="s2"cond="mother(martha, X),father(bob, X)"/></state><state id="s2"><onentry><send type="basichttp"targetexpr="ioprocessors(basichttp(location(X)))"event="foo"><content><p>Snippet of XML</p></content></send></onentry><transitioncond="member(element(?p?,_,_), X),event(data(X))" /></state><state final="true"><log label="Listing" expr="listing."
/></state></scxml>Listing 8: Example SCXML document.4 ConclusionProviding a Prolog datamodel for SCXML enablesapplications in the W3C MMI architecture to em-ploy grounding and reasoning for facts establishedduring a prior to a dialog.
It even enables develop-ers to load complete, existing Prolog programs toto be used during event processing.
This extendsSCXML to fulfill the requirements for dialog man-agement as defined by Fodor and Huerta (2006).There are multiple variations to the integrationof Prolog and more experience is needed still todetermine whether the approach presented here isoptimal.ReferencesRJ Auburn, Paolo Baggia, and MarkScott.
2011.
Voice browser call control(CCXML).
W3C recommendation, W3C,July.
http://www.w3.org/TR/2011/REC-ccxml-20110705/.Jim Barnett, Rahul Akolkar, RJ Auburn, MichaelBodell, Daniel C. Burnett, Jerry Carter, ScottMcGlashan, Torbjo?rn Lager, Mark Helbing,Rafah Hosn, T.V.
Raman, Klaus Reifenrath,and No?am Rosenthal.
2012.
State chart XML(SCXML): State machine notation for con-trol abstraction.
W3C working draft, W3C,February.
http://www.w3.org/TR/2012/WD-scxml-20120216/.130Michale Bondell, Deborah Dahl, Ingmar Kliche, JimLarson, Brad Porter, Dave Raggett, T.V.
Raman,Bertha Helena Rodriguez, Muthuselvam Selvari,Raj Tumuluri, Andrew Wahbe, Piotr Wiechno, andMoshe Yudkowsky.
2012.
Multimodal Architectureand Interfaces.
W3C recommendation, W3C, Oc-tober.
http://www.w3.org/TR/2012/REC-mmi-arch-20121025/.Jenny Brusk, Torbjo?rn Lager, Anna Hjalmarsson, andPreben Wik.
2007.
Deal: dialogue management inscxml for believable game characters.
In Proceed-ings of the 2007 conference on Future Play, pages137?144.
ACM.Deboraha Dahl.
2013.
The w3c multimodal architec-ture and interfaces standard.
Journal on MultimodalUser Interfaces, pages 1?12.Paul Fodor and Juan M Huerta.
2006.
Planning andlogic programming for dialog management.
In Spo-ken Language Technology Workshop, 2006.
IEEE,pages 214?217.
IEEE.David Harel and Michal Politi.
1998.
Modeling Re-active Systems with Statecharts: The Statemate Ap-proach.
McGraw-Hill, Inc., August.Dirk Schnelle-Walka, Stefan Radomski, and MaxMu?hlha?user.
2013.
Jvoicexml as a modality com-ponent in the w3c multimodal architecture.
Journalon Multimodal User Interfaces, pages 1?12.A?lvaro Sigu?enza Izquierdo, Jose?
Luis Blanco Murillo,Jesu?s Bernat Vercher, and Luis AlfonsoHerna?ndez Go?mez.
2011.
Using scxml to integratesemantic sensor information into context-aware userinterfaces.Graham Wilcock.
2007.
SCXML and voice interfaces.In 3rd Baltic Conference on Human Language Tech-nologies, Kaunas, Lithuania.
Citeseer.131
