COLING 82, J. tlorecl~ (ed.
)North-HoUand Publhhtng Company?
Academ~ 1982AN EXPERIMENTAL PARSERAnna SAgvall HeinCenter for Computational LinguisticsUniversity of UppsalaSwedenOppsala Chart Processor is a linguistic processor forphonological, morphological, and syntactic analysis.I t  incorporates the basic mechanisms of the GeneralSyntactic Processor.
Linguistic rules as well as dic-tionary articles are presented to the processor in aprocedural formalism, the UCP-formelism.
The controlof the processing rests upon the grammar and thedictionaries.
Special attention has been devoted toproblems concerning the interplay between differentkinds of linguistic processes.INTRODUCTIONUppsala Chart ProcessOr (UCP) includes the basic mechanisms of a refined versionof the general syntactic processor (GSP), presented by M Kay in 1977, see / I / .
Anintegrated part of the UCP is the UCP grammar formalism.
The starting point forthe UCP formalism was the 'reversible grammar formalism', see /2/.The reversible grammar formalism includes the specification of a format for l in-guistic descriptions, - the structure - , and a set of reversible - apt for gene-ration as well as analysis - grammar operators.In the UCP we keep the idea of a procedural grammar formalism, consisting of a setof grammar operators, and also the structure for representing linguistic descrip-tions.
We don't, however, impose any requirements of 'reversibi l i ty'  upon theoperators.
UCP in its present version is designed for analysis.Our extensions and modifications were motivated bY our attempt to apply the con-ceptual and computational machinery of the GSP and the reversible grammar forma-lism to phonological and morphological analysis of Finnish and to morphologicaland syntactic analysis of Swedish.Basically, the extensions consist in creating the means for embedding variouskinds of linguistic processing - dictionary search, rewriting, phonological, mor-phological, and syntactic analysis - in the framework offered by the GSP and forarranging for some interaction between them.
Our solution to these problems isbased upon the procedural nature of the UCP formalism.
We created the means thatwere needed by defining new grammar operators.All language specific information of a UCP parser is expressed in the proceduralUCP formalism.
This is true, not only for rules but also for dictionary articles.An optional part of a UCP parser is a ' f i l te r  grammar', stating what rules shouldapply to what linguistic units.
The f i l te r  grammar i tsel f  is expressed in the UCPformalism.121122 A.S. HEININTRODUCING NON-REVERSIBLE GRAMMAR OPERATORSIn the reversible grammar formalism testing as well as the assignment of featuresis carried out as unification operations.
Using the unification operation forfeature testing results in an assignment as soon as one of the features is mis-sing.
In order to avoid such effects, one has to test for the presence of fea-tures before the unification operation is applied.
This turned out to be a seri-ous drawback in our Finnish application where an abundance of feature tests haveto be carried out to guarantee compatibility between the morphs.
In order to over.come this problem we defined an additional identity operator.Another characteristic feature of the reversible grammar formalism is the lack ofan or-operator (dependent disjunction).
The only operator available for handlingalternatives is an operator that init iates parallel processes, one for each al-ternative (independent disjunction).
This had a serious effect on processingefficiency.
The situation was substantially improved by the dependent disjunctionoperator, that we defined for the UCP formalism.LOOKING AHEAD IN THE UCPThe GSP doesn't provide any means for looking ahead.
We fe l t  a need for such apossibil ity in formulating our Finnish rules.
For instance, the Finnish string'maa' represents a ful l  word (in the nominative singular) i f  followed by a sepa-rator, a plural stem ( i f  followed by ' t ' ) ,  and a singular stem in the remainingcases.
Now, unless we have a way of inspecting the following character we wil lhave to store these three alternatives and also in i t iate further processing foreach case respectively.
- There are numerous analogues cases in the recognitionof syllables.The problem was solved in the following way.
In the reversible grammar formalismthere is only one operator available for storing an analysis - introducing an in-active edge into the chart.
This operator (DONE, in our notation STORE) has theeffect of inserting an edge spanning the sequence of vertices covered by the in-active and active edge, involved in the task at hand.
We defined an additionaloperator (MINORSTORE) which adds a new inactive edge to the chart spanning thesame sequence of vertices as the active edge only.
Disposing of this operator,we may postpone the storing of an analysis until the following edge (character,word, phrase) has been inspected.RULE INTERPRETATION AND REWRITINGCharacteristic for Finnish is the abundance of phonological and morphophonemicalternation.
For the handling of these problems we decided to formulate a newgrammar operator that would allow is to integrate rewriting operations with theinterpretation of phonological and/or morphological rules.
For instance, rewri-tings which occur in the domain of the syllable, such as e g three vowel simpli-fication should favourably be integrated with the recognition of the syllablesin the phonological processing.
A generalization of the STORE operator providedus with this fac i l i ty .
STORE without an argument has the effect outlined above.However, in our generalized version STORE may take an arbitrary number of argu-ments, each argument corresponding to a set of l inguistic features.
The inter-pretation of such an 'extended' store operation leads to the introduction of asequence of (inactive) edges into the chart; labeled with the l inguistic descrip-tions of the store arguments.RULE INTERPRETATION AND DICTIONARY SEARCHThe strategy that we wanted to adopt for the morphological analysis of Finnishinvolved an interplay between dictionary search and rule interpretation.AN EXPERIMENTAL PARSER 123The states in the morphological grammar were to correspond to two kinds of rules,i ?
'acceptance rules' an~ 'morphotactic rules'.
By an acceptance rule we under-stand a rule, where a tentatively recognized morph, typically the stem, is beinginspected, and as a result of this inspection accepted or rejected for furtherprocessing.
A reason for rejecting a stem candidate may be, that the string whichhas been found to match a stem entry in the dictionary has been rewritten in afashion that conflicts with the restrictions for alternation stated about thatstem.
Apart from these tests, an acceptance rule should also contain a predictionabout the following morph.
We wanted to express this prediction as a call to startsearching'for a certain kind of morph in the appropriate suffix dictionary (pluralsuffix dictionary, case suffix dictionary etc).
By a morphotactic rule we under-stand a rule where the compatibility between adjacent morphs is being verified.In addition, these rules should also give the appropriate predictions in the samemanner as the acceptance rules.
The entire morphological processing would start bysearching for a stem in the main dictionary, and the appropriate grammar ruleswould be invoked from the dictionary articles.
For further details, see /3/.The strategy outlined above presupposes the existence of means for in i t iat ing dic-tionary search from the grammar and invoking grammar rules from the dictionaryarticles.We solved the f i r s t  problem by defining a new operator PROCESS (dic.name) with theeffect of init iat ing dictionary search in the dictionary named dic.name.Our f i r s t  solution to the second problem was the following.
Apart from the lingui-stic description of the lexical item, a dictionary art ic le would include two re-served fields for the names of the grammar rules to be invoked, one for the accep-tance rules and one for the morphotactic rules.However, in turning our attention to grammatical analysis of Swedish, we got awarethat in order to experiment freely with different kinds of interaction between thegrammar and the dictionaries, we needed more f lex ib i l i ty .Not only would we like to be able to in i t iate dictionary search from the grammar,but also sometimes from a dictionary art icle.Furthermore, i t  was alright to be able to invoke a grammar rule from a dictionaryart ic le,  but i t  was not sufficient.
Sometimes there were alternatives; sometimesan alternative could be ruled out by a simple look-ahead.
As a matter of fact, werealized that what we actually wanted in formulating the dictionary articles wasthe richness of the grammar formalism for experimenting with the different actionsthat might be taken at the retrieval of lexical items.
In this approach, when alexical entry has been retrieved the fragment of 'grammar' associated with i t  isbeing interpreted in exactly the same way as a grammar rule.Hereby, we eliminate the formal differences between grammar rules and dictionaryarticles.
What theoretical implications this approach may have is not clear to usyet.
- On the implementational level this, of course, streamlines the processor.In the Finnish application, when a tentative stem had been found in the dictiona-ry, a grammar rule was invoked with the effect of inspecting the stem, and of gi-ving a prediction of the following morph.
This was handled by a piece of LISPcode which inserted an incomplete (active) edge from and to the last vertex ofthe stem, directed from right to left .In a syntactic application we want to have the possibil ity of invoking grammarrules from signals in the text, for instance a preposition phrase rule at therecognition of a preposition.
This situation is analogous to the Finnish stemcase.
However, in designing the operator that we wanted here, we chose to have i tworking from left  to right.
Consequently, i t  was defined in such a way that i t124 A.S. HEINwould insert an incomplete edge from and to the in i t ia l  vertex of the key word(e g Finnish stem or preposition), directed from left  to right.
The operator thatwe talk about is MAJORPROCESS (rule.name).
We may say that i t  fu l f i l s  a functionof looking ahead, since i t  gives us the possibil ity of invoking a rule f i r s t  whenwe are sure that at least the f i r s t  transition wil l  succeed.For an i l lustration of the UCP formalism we present the dictionary art ic le for theSwedish preposition 'med' (Engl.
'with')med <& lex> :=: 'med,<& morph.cat> :=: 'word.cand,<~, syn.cat> :=: 'prep,advance,<~ char :type> = 'sep,minorstore,majorprocess (indeclineable),majorprocess (prep.phrase),process (sep);Figure lThe 'rule' is a conjunction ( ' , ' )  of g operations.
I f  one of the operations fa i ls ,the whole conjunction fa i ls .
In the f i r s t  three operations features of 'med' areassigned.
Then there is an advancement in the string for an inspection of the fol -lowing character.
I f  i t  turns out to be a separator (blank or sign of punctua-tion) the result, i e a complete dge with a l inguistic description as specifiedby the assignment operations, is stored by means of MINORSTORE.
After that, theINDECLINABLE grammar rule is invoked, which builds words from word candidatesfollowed by spaces.
There is also a call to start processing the PREP.PHRASE rule,which subsequently wi l l  recognize the preposition and look for a following NP.The last operation starts search in the separator dictionary.The whole rule, apart from the f i r s t  assignment, wi l l  apply to most prepositions.Instead of having to repeat the whole rule for every preposition in the dictio-nary, we may collect the common part under its own rule name in the grammar, andhave this subrule interpreted at the retrieval of such a preposition by simplygiving its name in the dictionary art icle.Using this fac i l i ty ,  we may formulate the dictionary art ic le presented in figurel simply as shown in figure 2.med <& lex> :::  'med,preposition.action;Figure 2As mentioned above, there is a rule in the grammar for indeclineable words.
I trecognizes an indeclineable word as consisting of a word candidate followed by aspace sign.
In other words, the space is considered as a morphological consti-tuent.
Signs of punctuation, however, are regarded as syntactic constituents.According to the orthographic onvention, a sign of punctuation is attached tothe word candidate without a preceding space sign.
Here i t  fu l f i l s  two functions,i e denoting the end of the word and the end of a syntactic constituent.
We solvethis problem by making the space sign expl ic i t  by means of a rewriting operationin the dictionary articles of the signs of punctuation.
In figure 3 we presentthe dictionary art ic le of the comma sign for an i l lustrat ion.AN EXPERIMENt AL PARSER<& f i r s t  morph.cat> :=: 'space,<& second syn.cat> :=: 'sign.of.punct,<& second lex> :=: 'comma,store (<& first>,<& second>);Figure 3PARALLEL PROCESSING LEVELSMorphological analysis of Finnish requires the support of phonological analysis.For instance, in the i l l a t ive  singular we need phonological information about thestem, such as number of syllables and properties of the last syl lable, in orderto predict the correct case allomorph.Whereas the morph is the fundamental segment in the morphotactic processing, thesyllable is the fundamental segment in the phonological processing.
Consequently,they should be considered as dif ferent l inguist ic processes.
I f  we want to parsea Finnish word in one pass, these two processes have to be carried out in paral l -el.
Furthermore, there must be a means for communicating the results of the twoprocesses between them.We hypothesize that there is a superordinate 'word recognition grammar' for Fin-nish, stating the relationship between phonological and morphological processingin the following wayWORD: PROCESS(phon.rules), PROCESS(morph.rules);WORD is the name of a state (the single one) in the word recognition grammar.
I tcontains a conjunction of two operations, the order between the operations beingimmaterial.
The interpretation of this rule has the effect that the f i r s t  rule ofthe phonological grammar, phon.rules, is invoked as well as the f i r s t  rule of themorphological grammar, morph.rules.
Hereby, phonological and morphological analy-ses are being carried out in a pseudo-parallel manner, independently of eachother.
- I t  should be noted, that the PROCESS operator mentioned above which wasor ig ina l ly  defined for in i t ia t ing  dictionary search has been generalized to acc-ount for the invocation of grammars and grammar ules as well.
What is a d ict io-nary name and what is the name of a grammar or a grammar ule is part of theself-knowledge of the UCP.The only medium of communication between the two processes is the chart, beingthe 'common ote book' of the entire processing, in which al l  results are stored.In order for the morphological processing to be able to use the results of thephonological processing - e g when a stem has been found - we must provide ameans for accessing this information (number of syllables etc).Lexical information about the stem, resulting from the dictionary search process( in i t iated from morph.rules) wi l l  be stored in an edge spanning the f i r s t  andsome following vertex in the chart.
Phonological information about the stem wi l lbe stored in another edge, spanning the same vertices.
Consequently, we maysolve the problem by defining an operator with the effect of unifying the fea-tures of the lexical and the phonological edge, and assigning them to a new in-active edge of the same scope.
This was our solution.
Further details are giveni n /4/.DICTIONARY SEARCH AND REWRITINGIn Swedish morphological analysis, phonology plays a minor role.
The idea of car-rying out an independent phonological analysis to account for morphophonemic re-writ ing does not seem to be motivated.
Cases that have to be handled concern e g125126 A.S. HEIN'umlaut' (cf fot/f~tter),  and secondary vowel (cf spegel/speglar).Here, we would like to init iate the appropriate rewriting from signals inthe input in connection with the dictionary search process.
Such a strategy hasbeen implemented in the following way.Except for the ordinary entries, every dictionary contains four 'meta-entries',in which we specify how search in the dictionary should proceed.
In the f i r s tentry we give the search key (e g CHAR).
In the second entry we specify whethersearch for a longer key should be initiated when an entry has been found, or not.In the third entry we give the actions that should take place when a characterhas been found to match.
This is the place where we may specify the signal forinit iating processing in a certain grammar or grammar rule.
As a matter of fact,this meta-entry specifies a grammar state i tse l f ,  the rules of which are formula-ted in the UCP formalism.
In our Swedish parser, we use this state for init iat ingprocessing of rewriting rules, part of the general Swedish grammar.
Furth~ de-tai ls are given in /5/.CURRENT APPLICATIONThe current application of the UCP concerns the elaboration of a grammar anddictionaries for surface structure analysis of Swedish, including morphologicaland syntactic processing.IMPLEMENTATIONThe UCP is implemented in a subset of INTERLISP.
I t  is being converted to LMI-CADRLISP.
Except for the kernel system the implementation i cludes e g an editorfor grammars and dictionaries.
For details concerning the UCP formalism and theimplementation, see /6/.REFERENCES/ l /  Kay, R., Syntactic Processing and the Functional Sentence Perspective, in:Schank, R. and Nash-Webber, B.L.
(eds.
), Theoretical Issues in NaturalLanguage Processing (TINLAP-1) (Cambridge, Mass., 1975)./2/ Kay, M., Reversible Grammar, A Summary of the Formalism, Xerox PARC (\]977)./3/ SAgvall Hein, A., Finnish Morphological Analysis in the Reversible GrammarSystem, in: Proceedings from the 7th Internationa\] Conference on Computa-tional Linguistics (forthcoming)./4/ S~gvall Heln, A., An Outline of a Computer Rode\] of Finnish Word Recogni-tion, in: Fenno-Ugrica Suecana, 3/1980 (Uppsala 1980)/5/ S~gvall Hein, A., Uppsala Chart Parser Version 1 (UCP-1).
- En 5versikt,in: Lien, E.
(ed.
), De nordtske datallngvistikkdagene 198\].
Foredrag fraen konferanse p~ Universitetssenteret p~ Dragvoll 22.-23- oktober \]981(Trondheim \]98\]) (in Swedish)./6/ Carlsson, M., Uppsala Chart Processor 2, System Documentation, UppsalaUniversity, Center for Computational Linguistics, Report No.
UCDL-R-81-I(I982).
