Thistle and InterarboraJo CalderUniversity of EdinburghDivision of InformaticsLanguage Technology Group2 Buccleuch PlaceEdinburgh Scotland EH8 9LWJ.
Calder@ed.
ac.
ukAbstractWe present a system for manipulating a wide class oflinguistic diagrams, which is configurable and extensi-ble, and allows deployment as a web-delivered system.A major theme of this work is the transfer of the devicesof lbrmal grammar into the analysis and construction ofdiagrams.1 IntroductionDiagrams play a crucial role in (computational) linguis-tics, in presenting analyses and characterizing fragmentsof theories.
This role has not to date been adequatelysupported by programs for the creation, maintenance anddelivery of diagrams.
We conjecture that this has to dowith three main factors.
First, in a changing field, obso-lescence may be a concern.
Second, it may be diflicultto see how to provide a uniform interface to an appropri-ately wide range of kinds of diagrams.
Third, integrationwith delivery systems may be difficult to achieve.
We ar-gue below that the design of the Thistle diagram editorprovides mechanisms for obviating each of these prob-lems.
We start with a brief description of the design ofthe editor, stressing design decisions that avoid the prob-lems just mentioned.
We then turn briefly to some im-plementation details, before describing and exemplifyingthe classes of diagrams which have been developed sofar.
We end with a discussion el'current attd future direc-tions for this work.
All of the examples can be accessedon-line I .Some of our practical considerations are worth empha-sising.
First, we aim for typographic quality as closeas possible to standard print presentations of the dia-grams in use.
The diagrams hown in this paper are pre-sented using the PostScript generated by Thistle.
Theyhave essentially the same form as delivered by a webbrowser.
Second, the system should be lightweight inseveral senses.
It should be usable without specialistknowledge of the diagrams in question.
The user inte>\[~lce should be simple.
It should be deployable with min-imal assumptions about the hosting enviromnent.
Theseconsiderations mean that other programs for manipulat-ing diagrams, such as more general purpose graph edi-I hll P://wwwdtg'ed'ac'uk/s?flware/t hi stletot's (for example daVinci 2, DiaGen (Viehstaedt and Mi-nas 1995) or VGJ 3) are generally unsuitable, as are morecomplex tools for data annotation, such as the MATEworkbench (Dybkjzer at al 2000).
Such systems may ofcourse be able to present more complex diagrams thanThistle, or offer alternative functionality.Crucial to the simplicity of Thistle is the assumptionthat many diagram classes of interest can be character-ized using only context fi'ee methods.
As we will demon-strate below, this assumption isconsistent with a usefullywide range of classes.
We first discuss motivation for thedesign of Thistle, and describe the gramnmrs that charac-terize classes of diagram.
We then discuss briefly someexample classes and the lnterarbora service.
After giv-ing details of the current implementation a d recent en-hancemenls, we describe the settings in which these toolshave been exploited.
Finally, we describe our currentwork, and possible strategies lot" usefully broadening thekinds of diagram that Thistle can describe.2 DesignThistle is a parametcrizable diagram editor.
A class of di-agrams is selected by providing Thistle with a gramnmrwhich characterizes the diagrams of interest.
The gram-mar describes the hierarchical structure o1' diagrams, andprovides information about layout.Gramnmrs for diagram classes utilize a particular formof context free gramnmr, in which there arc two kindsof statement.
In the first, the left hand side of a rulenames a particular type of diagram, and its rewrite de-scribes the abstract structure and concrete layout of a di-agram type.
In the second, the rewrite is a set of namesof other diagram types, representing a disjunctive choicebetween the latter.
Left hand sides are required to beuniqne throughout.
(It is straightforward to show thatany context free grammar can be encoded in this term.
)Figure 1 shows a fragment of the grammar used to gen-erate the diagram in Figure 2.
This fragment can be usedto analyse that part of the diagram expressing the wdueof the feature CONTENT.2http://www.infornlatik.uni-brenlen.deldaVinci/3http://www.eng.aubur,Ledu/csse/research/research_groups/graph_drawing/graph_drawing.htnll992diagram spec(plain avm,bracket(\[delimiter(square)\],vbox(var(avpairs, \[avm line\]))))diagram union(avmline,\[avpair, path_value\])diagram_spec(avpair,array element(\[align(baseline)\],\[vat(attribute, attribute),var(value, value)\]))diagram spec(attribute,smallcaps(var(name, Text)))Figure 1: A simplified fragment from lhe grammar used to generate the diagram in Figure 2LOCALNONLOCAI~IlEAl) MOD N'  \[TO-BINDIREI~ {\[~ }\] " RESTRHJCAT rllvzl1 INDEX CONTEN~I RF, STR 1\[~ } U \] TO-BINDISLANlt {~ } IN.EIlSLASlt }Figure 2: A diagram, reproduced using Thistle, from t'ollard and Sag (1994).The lirst and third statements here express the hierar-chical structure of and layout of attribute-value matrices.One can gloss the first as: "A diagram of type plain_avmconsists of any number of diagrams o1' type awn_line.
4Tile subdiagrams are arranged vertically and enclosed bya Imir of sqtmre brackets."
In other words, var  elemenlsstand for a variable subpart of a diagram and indicate thetype o1' diag,'am that can appear at that location.
Notethat such elements also assign a label to each wu'iablesublmrt.
The second statement above indicates lhat a di-agram of type arm_line can be realized as either o1' thenamed types.
The fourth statement indicates how dia-gram types may introduce sequences of characters.This form of CFG leads directly to a user interfacebased on top-down rewriting, 5 where a rule of the firstkind is invoked, leading to choices in the diagrams intro-duced as subparts, and so on.
In practical terms, then,given a class of diagrams, a particular instance may be4The square brackets in \[avm_line\] are an ad hoc way of express-ing the Kleene slat.5Other ways of conslrucling a diagram are possible, as discussed in?5 below.consmmted by selecling a location in a diagram, andchoosing among the possible types of diagram for lhatlocation.
What the user sees on the surthce is a WYSI-WYG presentation o1' the consequences of tile parliculararrangements of diagram types.These aspects of the design address at once problemsof obsolescence and of providing a uniform user inter-face.
In order to provide a new class of diagram, onehas only to construct a grammar for tllat class, provid-ing lhe class is amenable to context free treatment (see?6 below).
We make use of existing standards in lack-ling the problem of integrating with other systems.
Anyinstance of the editor may be used via a web browser,so that local installation of software is not essential.The graphical presentation ol 'a diagram may be savedin PostScript, while the logical content of a diagram isstored as SGML.
6 The precise format of a diagram's log-ical content exploits the fact that each variable subpart ot'a diagram is assigned a unique name.In addition to the construction of static diagrams, This-6See also ?6 below.993tie may also be used to construct step-time sequences ofdiagrams.
A 'diagram player' can be used to step through(or jump between) diagrams in the sequence.
One exam-ple shows the states visited by a top-down backtrackingparser, on some input and with respect o a given gram-inar.3 Example diagram classesThere is a wide range of diagram classes currently avail-able, ranging from an essentially complete treatment ofthe diagrams in Pollard and Sag (1994) (Figure 2), andin Kamp and Reyle (1993) (Figure 3), to small but usefulclasses for diagrams from particular areas of linguistics,such as metrical trees and categoriaI derivations.
Thereare also a number of generic diagram classes such astrees with unlimited or fixed branching.xyJones ( x )Uiysses(y )x owns yx fascinates yFigure 3: A diagram based on Kamp and Reyle 19934 In terarboraInterarbotzt 7 is an internet based service allowing theconstruction and display o1' tree diagrams via Webbrowsers.
The user supplies a tree specification as a la-belled bracketted string, which is then analysed to pro-duce a specification of a Thistle diagram for a simplediagram class.
This information is then passed back tothe Web browser, which computes a Thistle diagram fordisplay.The analyser for braeketted strings attempts o be quiteliberal.
One target format that we handle successfullyis that of the Penn Treebank 8.
Figure 3 shows a sim-ple example from Interarbora.
As with the other dia-grams in this paper, this example is lbrmatted here usingPostscript generated by Interarbora.
There is no discern-able difference between this presentation and that deliv-ered by a web browser Interarbora is described in moredetail by Calder (2000).5 Current statusThe system described above is fully implemented and isavailable at no charge for non-commercial purposes.
As7 hllp://www.llg.ed.ac.uk/\]o/interarbora/8 hnp://www.cis.upenn.edu/lreebank/home.hlmlSNP VPtPN V 1 NPI I IHank chased PNIFrankComments: Hank chasing FrankFigure 4: An example tree fl'om Interarboraour implementation platform is Java, there are relativelyfew portability issues.
9 In addition to the mode of op-eration described above, where a user selects a locationin a diagram and chooses a type for that location, wehave also investigated modes which are not strictly top-down.
Such modes are essential in tasks such as annota-tion, where one has, for example, a given string or textto mark up.
In lhis case, one is interested in adding tothe (possibly minimal) existing structure, and this cannotbe straightforwardly done under a pure top-down model.Consequently, we have added a range of operations overdiagrams, including:split a sequence of characters i  replaced by two (ormore) of its subsequences with appropriate struc-tural ad, iustmentsjoin the inverse of splitdemote a diagram is adjoined into the diagram at timcurrent locationpromote the diagram at the current location replaces itsmother.There are a number of interesting points to these op-erations.
First, the possibility of such operations i  ingeneral determined through grammatical inference.
So itis not possible to split a sequence of characters in a lo-cation where only one such sequence is allowed by thegrammar.
Second, the demote operation is the exact ana-log of adjunction in Tree Adjoining Grammars (see e.g.Joshi et al 1991).
A demote operation is only allowedif the type of diagram at the current location is permit-ted within some other diagram type t and the type t isalso permissible at the current location in structure.
Ingeneral, having selected a location for a demote opera-tion, there may be several ways of executing the oper-ation.
For example, the user may be asked to choosewhich daughter in a tinite branching local tree should re-ceive the diagram at the currently selected location.
Fi-nally, these operations are not grammar specific, so that9Our implementation predates later versions of Jawt which providea tree abslraction, and so our current implementalion does not makeuse of lhis facility.994the same kinds of operations arc awtilable, whether oneis dealing with corpus annotation tools oi" all editor forHPSG diag,'ams.6 Current use and on-going and fntureworkThe system is in use in the support of teaching in a vari-ety of settings.
Cox et alresults about he effectiveness ofThistle in teaching concepts to do with phrase structureand category membership.
Understanding of these con-cepts seems to have been improved simply by viewing avideo capture ot' trees being editing, lnterarbora is usedat several institutions in junior level courses.
We haveused Thistle as a front end to a variety o1' rule formats,inch, ding those for the tokenization tool TTT (Grover eta12000).
The diagram player has been used for the visu-alization o\[' the results of corpus searches in GSI~ARCll I0and of dialogue slates, in concert with software devel-oped in the TRINI)I project If.On-going SUl)port work includes changing the per-sistence formitt of diagrams fi'om SGML to XML, andbringing diagram classes within the same format.
Therearc a large number of minor improvements we inlcnd tomake, including generalizing the Web interl:aces o tiroldiagram classes and persistence fommts may be suppliedby the user.Our current research as a number of aspects.
The lim-itation to context free diagram classes simplifies manyaspects of implementation, most notably in the area oflayout.
On the other hand, many diagram classes re-quire greater thiul context free power for their adequatedescription.
Important classes include stale transition di-agrams, systemic functional networks and autosegmentaldfitgrams.
We are looking at COml~romises which will al-low lhe construction and display of such diagrams whileavoiding diflicult layout problems.Another a,'ea in which the context free assuml)lionis being examined has to do wilh diagrams where con-straints uch as equality are required to hold wiflfin a di-agram.
An example of this is the notion of proper bind-ing in Discourse Representation Theory - -  a variable oc-curring as an argument mr,st be appropriately introduced(and vice vetwa).
A further example is the enforcement ofappropriateness conditions within a typed feature frame-work.
Strictly speaking, this case doesn't violate ourcontext flee assumption, but encoding such conditionsin a context free way is cumbersome.
In these cases,we are interested in looking at ways of further constrain-ing the content of diagrams.
One possibility, which sitshappily enough with Thistle's background of lbrmal an-gt, age theory, is to exploit he notion of path, a sequenceof variable-type pairs.
Any Thistle diagram correspondsto a set of such paths, and, because these are generatedby a context free grammar, the language of such pathsl?hllp://www.hcrc.ed.ac.uk/gsearch/11hlllxl/www.ling.gtt.selresearchlprojects/trindi/irindikil.hlm Iis regular.
We could enforce apl~ropriateness in a typedfeature setting, for example, by expressing further eg-ular constraints over paths.
Using greater than regularpower would result in diagrams whose struclt, re was nolonger context fi'ee.Other possibilities include looking at logics to expressconstraints over diagrams.
We can view the set of pathsas a model of some logical theory.
As our diagrams arenecessarily finite, this means that logical frameworks el:consklerable power could be invoked.One further clement of our work examines ways ofproviding programmatic control of diagrams, with appli-cations in interactive diagram design, where a cooperat-ing program may lill in details which are logically im-plied, and debugging o f complex represe ntation s.7 ConclusionsWe have seen above that Thistle provides a flexible,lightweight interface to a wide variety of diagram types.Furthermore, it can be used 1"o1" the delivery of diagrams(and sequences of diagrams) in a variety of settings.
TheInterarbora service provides a way of allowing visualiza-tion of tree slruclures uitable t%ra wide variety of users.ReferencesCalder, J.
(2000) Interarbora and Thistle: Delivering fin-guistic structure via the \]nternct, in Proceedings of theSecond Lcmguage Resources and Evaluation Cot!fi'r-ence, 31 May-2 June 2000, Athens, Greece.Cox, R., MeKendree, J., Tobin, R., Lee, J.
& Maycs,% (1999) Vicarious learning fi'om dialogue and dis-course: A controlled comparison.
Instructional Sci-ence 27, pp431-458.l)ybkjler, l,., MOiler, M. B., Bernsen, N. O., Grosse, M.,Olsen, M. and Schiffi'in, A.
(2000) Annotating Com-munication Problems Using the MATE Workbench, inl'roceedings of the Second Language Resources andEvaluation Cot!/'erence, 3 \[ May-2 June 2000, Athens,Greece.Grover, C., Matheson, C., Mikheev, A. and Moens, M.,(2000) LT TTT - A Flexible \]bkcnisation Tool, inProceedings of the Second Language Resources attdEvaluation Cm{/'erence, 31May-2 June 2000, Athens,Greece.Joshi, A. K., Vijay-Shanker, K. and Weir, D. J.
(1991)The convergence ofmildly context-sensitive grammat-ical formalisms, in P. Sells, S. M. Shieber and "L Wa-sow (eds.)
Fotmdational lsxues in Natural LanguageProcessing.
MIT Press: Cambridge, MA.Kamp, H & Reyle, U.
(1993).
From Discomwe to Logic,Kluwer Academic: Dordrecht and London.Pollard, C.& Sag, I.A.
(1994).
Head-Driven l'hraseStructure Granmtar.
CSLI: Stanlbrd and University ofChicago Press: Chicago and London.995Viehstaedt, G. & Minas, M. (1995).
Generating editorsfor direct manipulation ofdiagrams.
InB.
Blumenthal,J.
Gornostaev & C. Unger, editors, Proc.
5th h~ter-national Conference on Human-Computer hzteraction(EWHCI'95), Moscow, Russia, LNCS 1015, pp17-25.
Springcr-Verlag.996
