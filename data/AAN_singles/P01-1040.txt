A Common Framework for Syntactic AnnotationNancy IdeDepartment of Computer ScienceVassar CollegePoughkeepsie, NY 12604-0520 USAide@cs.vassar.eduLaurent RomaryLORIA/CNRSCampus Scientifique, B.P.
23954506 Vandoeuvre-l?s-Nancy, FRANCEromary@loria.frAbstractIt is widely recognized that theproliferation of annotation schemesruns counter to the need to re-uselanguage resources, and that standardsfor linguistic annotation are becomingincreasingly mandatory.
To answer thisneed, we have developed arepresentation framework comprised ofan abstract model for a variety ofdifferent annotation types (e.g.,morpho-syntactic tagging, syntacticannotation, co-reference annotation,etc.
), which can be instantiated indifferent ways depending on theannotator?s approach and goals.
In thispaper we provide an overview of ourrepresentation framework anddemonstrate its applicability tosyntactic annotation.
We show how theframework can contribute tocomparative evaluation and merging ofparser output and diverse syntacticannotation schemes.1 IntroductionIt is widely recognized that the proliferation ofannotation schemes runs counter to the need tore-use language resources, and that standards forlinguistic annotation are becoming increasinglymandatory.
In particular, there is a need for ageneral framework for linguistic annotation thatis flexible and extensible enough toaccommodate different annotation types anddifferent theoretical and practical approaches,while at the same time enabling theirrepresentation in a ?pivot?
format that can serveas the basis for comparative evaluation of parseroutput, such as PARSEVAL  (Harrison, et al,1991), as well as the development of reusableediting and processing tools.To answer this need, we have developed arepresentation framework comprised of anabstract model for a variety of differentannotation types (e.g., morpho-syntactictagging, syntactic annotation, co-referenceannotation, etc.
), which can be instantiated indifferent ways depending on the annotator?sapproach and goals.
We have implemented boththe abstract model and various instantiationsusing XML schemas (Thompson, et al, 2000),the Resource Definition Framework (RDF)(Lassila and Swick, 2000) and RDF schemas(Brickley and Guha, 2000), which enabledescription and definition of abstract datamodels together with means to interpret, via themodel, information encoded according todifferent conventions.
The results have beenincorporated into XCES (Ide, et al, 2000a), partof the EAGLES Guidelines developed by theExpert Advisory Group on LanguageEngineering Standards (EAGLES)1.
The XCESprovides a ready-made, standard encodingformat together with a data architecturedesigned specifically for linguistically annotatedcorpora.In this paper we provide an overview of ourrepresentation framework and demonstrate itsapplicability to syntactic annotation.
Theframework has been applied to therepresentation of terminology (TerminologicalMarkup Framework2, ISO project n.16642) andcomputational lexicons (Ide, et al, 2000b), thusdemonstrating its general applicability for avariety of linguistic annotation types.
We alsoshow how the  framework can contribute to1http://www.ilc.pi.cnr.it/EAGLES/home.html2http://www.loria.fr/projects/TMFcomparison and merging of diverse syntacticannotation schemes.2 Current PracticeAt the highest level of abstraction, syntacticannotation schemes represent the followingkinds of information:?
Category  in format ion : labeling ofcomponents based on syntactic category(e.g., noun phrase, prepositional phrase),syntactic role (subject, object), etc.;?
Dependency information: relations amongcomponents, including constituencyrelations, grammatical role relations, etc.For example, the annotation in Figure 1, drawnfrom the Penn Treebank II3 (hereafter, PTB),uses LISP-like list structures to specifyconstituency relations and provide syntacticcategory labels for constituents.
Somegrammatical roles (subject, object, etc.)
areimplicit in the structure of the encoding: forinstance, the nesting of the NP ?the front room?implies that the NP is the object of theprepositional phrase, whereas the position of theNP ?him?
following and at the same level as theVP node implies that this NP is the grammaticalobject.
Additional processing (or humanintervention) is required to render these relationsexplicit.
Note that the PTB encoding providessome explicit information about grammaticalrole, in that ?subject?
is explicitly labeled(although its relation to the verb remainsimplicit in the structure), but most relations(e.g., ?object?)
are left implicit.
Relationsamong non-contiguous elements demand aspecial numbering mechanism to enable cross-reference, as in the specification of the NP-SBJof the embedded sentence by reference to theearlier NP-SBJ-1 node.Although they differ in the labels and insome cases the function of various nodes in thetree, most annotation schemes provide a similarconstituency-based representation of relationsamong syntactic components (see Abeille,forthcoming, for a comprehensive survey ofsyntactic annotation schemes).
In contrast,dependency  schemes (e.g., Sleator andTemperley, 1993; Tapanainen and Jarvinen,1997; Carroll, et al, forthcoming) do not3http://www.cis.upenn.edu/treebankprovide a constituency analysis4 but ratherspecify grammatical relations among elementsexplicitly; for example, the sentence ?Paulintends to leave IBM?
could be represented asshown in Figure 2, where the predicate is therelation type, the first argument is the head, thesecond the dependent, and additional argumentsmay provide category-specific information (e.g.,introducer for prepositional phrases, etc.).
((S (NP-SBJ-1 Jones)(VP followed)(NP him)(PP-DIR into(NP the front room)),(S-ADV (NP-SBJ *-1)(VP closing(NP the door)(PP behind(NP him))))).
))Figure 1.
PTB annotation of ?Jones followed himinto the front room, closing the door behindhim.
?subj(intend,Paul,_)xcomp(intend,leave,to)subj(leave,Paul)dobj(leave,IBM,_)Figure 2.
Dependency annotation according toCarroll, Minnen, and Briscoe (forthcoming)3 A Model for Syntactic AnnotationThe goal in the XCES is to provide a frameworkfor annotation that is theory and tagsetindependent.
We accomplish this by treating thedescription of any specific syntactic annotationscheme as a process involving severalknowledge sources that interact at variouslevels.
The process allows one to specify, on theone hand, the informational properties of thescheme (i.e., its capacity to represent a givenpiece of information), and, on the other, the waythe scheme can be instantiated (e.g., as an XMLdocument).
Figure 3 shows the overallarchitecture of the XCES framework forsyntactic annotation.4So-called ?hybrid systems?
(e.g., Basili, et al, 199;Grefenstette, 1999) combine constituency analysis andfunctional dependencies, usually producing a shallowconstituent parse that brackets major phrase types andidentifying the dependencies between heads ofconstituents.Figure 3.
Overall architecture of the XCES annotation frameworkTwo knowledge sources are used define theabstract model:Data Category Registry: Within the frameworkof the XCES we are establishing an inventory ofdata categories for syntactic annotation, initiallybased on the EAGLES Recommendations forSyntactic Annotation of Corpora (Leech et al,1996).
Data categories are defined using RDFdescriptions that formalize the propertiesassociated with each.
The categories areorganized in a hierarchy, from general tospecific.
For example, a general dependentrelation may be defined, which may have one ofthe possible values argument or modifier;argument in turn may have the possible valuessubject, object, or complement; etc.5 Note thatRDF descriptions function much like classdefinitions in an object-oriented programminglanguage: they provide, effectively, templatesthat describe how objects may be instantiated,but do not constitute the objects themselves.Thus, in a document containing an actualannotation, several objects with the typeargument  may be instantiated, each with adifferent value.
The RDF schema ensures thateach instantiation of argument is recognized as asub-class of dependent and inherits theappropriate properties.Structural Skeleton: a domain-dependentabstract structural framework for syntactic5Cf.
the hierarchy in Figure 1.1, Caroll, Minnen, andBriscoe (forthcoming).General Markup LanguageXSLT ScriptDialectSpecificationDATACATEGORYREGISTRYVirtualAMLConcreteAMLDataCategorySpecificationSTRUCTURALSKELETONAbstractXMLencodingConcreteXMLencodingNon-XMLEncodingUniversal ResourcesProject Specific Resourcesannotations, capable of fully capturing all theinformation in a specific annotation scheme.
Thestructural skeleton for syntactic annotations isdescribed below in section 12.1.Two other knowledge sources are used todefine a project-specific format for theannotation scheme, in terms of its expressivepower and its instantiation in XML:Data Category Specification (DCS): describesthe set of data categories that can be used withina given annotation scheme, again using RDFschema.
The DCS defines constraints on eachcategory, including restrictions on the valuesthey can take (e.g., "text with markup"; a"picklist" for grammatical gender, or any of thedata types defined for XML), restrictions onwhere a particular data category can appear(level in the structural hierarchy).
The DCS mayinclude a subset of categories from the DCRtogether with application-specific categoriesadditionally defined in the DCS.
The DCS alsoindicates a level of granularity based on theDCR hierarchy.Dialect specification: defines, using XMLschemas, XSLT scripts, and XSL style sheets,the project-specific XML format for syntacticannotations.
The specifications may include:?
Data category instantiation styles:  Datacategories may be realized in a project-specific scheme in any of a variety offormats.
For example, if there exists a datacategory NounPhrase, this may be realizedas an <NounPhrase> element (possiblycontaining additional elements), a typedelement (e.g.
<cat type=NounPhrase>), tagcontent (e.g., <cat>NounPhrase</cat>), etc.?
Data category vocabulary styles: Project-specific formats can utilize names differentfrom those in the Data Category Registry;for instance, a DCR specification forNounPhrase can be expressed as ?NP?
or?SN?
(?
syntagme nominal?)
in the project-specific format, if desired.?
Expansion structures: A project-specificformat may alter the structure of theannotation as expressed using the structuralskeleton.
For example, it may be desirablefor processing or other reasons to create twosub-nodes under a given <struct> node, oneto group features and one to group relations.The combination of the structural skeletonand the DCS defines a virtual annotationmarkup language (AML).
Any informationstructure that corresponds to a virtual AML hasa canonical expression as an XML document;therefore, the inter-operability of differentAMLs is dependent only on their compatibilityat the virtual level.
As such, virtual AML is thehub of the annotation framework: it defines alingua franca for syntactic annotations that canbe used to compare and merge annotations, aswell as enable design of generic tools forvisualization, editing, extraction, etc.The combination of a virtual AML with theDialect Specification provides the informationnecessary to automatically generate a concreteAML representation of the annotation scheme,which conforms to the project-specific formatprovided in the Dialect Specification.
XSLTfilters translate between the representations ofthe annotation in concrete and virtual AML, aswell as between non-XML formats (such as theLISP-like PTB notation) and concrete AML.62.1 The Structural SkeletonFor syntactic annotation, we can identify ageneral, underlying model that informs currentpractice: specification of constituency relations(with some set of application-specific names andproperties) among syntactic or grammaticalcomponents (also with a set of application-specific names and properties), whether this ismodeled with a tree structure or the relations aregiven explicitly.Because of the common use of trees insyntactic annotation, together with the naturaltree-structure of markup in XML documents, weprovide a structural skeleton for syntacticmarkup following this model.
The mostimportant element in the skeleton is the<struct> element, which represents a node(level) in the syntax tree.
<struct> elements maybe recursively nested at any level to reflect thestructure of the corresponding tree.
The <struct>element has the following attributes:6Strictly speaking, an application-specific format could betranslated directly into the virtual AML, eliminating theneed for the intermediary concrete AML format.
However,especially for existing formats, it is typically morestraightforward to perform the two-step process.?
type : specifies the node label (e.g., ?S?,?NP?, etc.)
or points to an object in anotherdocument that provides the value.
Thisallows specifying complex data items asannotations.
It also enables generating asingle instantiation of an annotation value ina separate document that can be referenced asneeded.?
xlink : points to the data to which theannotation applies.
In the XCES, werecommend the use of s t a n d - o f fa n n o t a t i o n ?
i .e., annotation that ismaintained in a document separate from theprimary (annotated) data.7 The xlink attributeuses the XML Path Language (XPath) (Clark& DeRose, 1999) to specify the location ofthe relevant data in the primary document.?
ref : refers to a node defined elsewhere, usedinstead of xlink.?
rel?
: specifies a type of relation (e.g., ?subj?)?
head : specifies the node corresponding tothe head of the relation?
dependent : specifies the node correspondingto the dependent of the relation?
introducer : specifies the node correspondingto an introducing word or phrase?
initial : gives a thematic or semantic role of acomponent, e.g., ?subj?
for the object of aby-phrase in a passive sentence.The hierarchy of <struct> elementscorresponds to the nodes in a phrase structureanalysis; each <struct> element is typedaccordingly.
The grammar underlying theannotation  therefore specifies constraints onembedding that can be instantiated in an XMLschema, which can then be used to prevent ordetect tree structures that do not conform to thegrammar.
Conversely, the grammar rulesimplicit in annotated treebanks, which aretypically not annotated according to a formalgrammar, can be easily extracted from theabstract structural encoding.The skeleton also includes a <feat> (feature)element, which can be used to provideadditional information (e.g., gender, number)that is attached to the node in the treerepresented by the enclosing <struct> element.Like <struct>, this element can be recursivelynested or can point to a description in another7The stand-off scheme also provides means to representambiguities, since there can be multiple links between dataand alternative annotations.document, thereby providing means to associateinformation at any level of detail or complexityto the annotated structure.Figure 4 shows the annotation from the PTB(Figure 1) rendered in the abstract XML format.Note that in this example, relations are encodedonly when they appear explicitly in the originalannotation (therefore, heads of relations defaultto ?unknown?.)
An XSLT script could be usedto create a second XML document that includesthe relations implicit in the embedding (e.g., thefirst embedded <struct> with category NP hasrelation ?subject?, the first VP is the head, etc.
).A strict dependency annotation encoded in theabstract format uses a flat hierarchy andspecifies all relations explicitly with the relattribute, as shown in Figure 5.84 Using the XCES SchemeThe Virtual AML provides a pivot format thatenables comparison of annotations in differentformats ?
including not only differentconstituency-based annotations, but alsoconstituency-based and dependency annotations.For example, the PTB annotation correspondingto the dependency annotation in Figure 2 isshown in Figure 6.
Figure 7 gives thecorresponding encoding in the XCES abstractscheme.
It is relatively trivial with an XSLTscript to extract the information in thedependency annotation  (Figure 5) from the PTBencoding (Figure 7) to produce a nearly identicaldependency encoding.
The script would userules to make relations that are implicit in thestructure of the P T B encoding explicit (forexample, the ?xcomp?
relation  that is implicit inthe embedding of the ?S?
phrase).The ability to generate a commonrepresentation for different annotationsovercomes several obstacles that have hinderedevaluation exercises in the past.
For instance, theevaluation technique used in the PARSEVALexercise is applicable to phrase structureanalyses only, and cannot be applied todependency-style analyses or ?lexical?
parsingframeworks such as finite-state constraintparsers.
As the example above shows, this8For the sake of readability, this encoding assumes that thesentence ?Paul intends to leave IBM?
is marked up as<s1><w1>Paul</w1><w2>intends</w2><w3>to</w3><w4>leave</w4><w5>IBM</w5></s1>.problem can be addressed using the XCESframework.It has also been noted that that the PARSEVALbracket-precision measure penalizes parsers thatreturn more structure than exists in the relatively?flat?
treebank structures, even if they arecorrect (Srinivas, et al, 1995).
XSLT scripts canextract the appropriate information forcomparison purposes while retaining links toadditional parts of the annotation in the originaldocument, thus eliminating the need to ?dumbdown?
parser output in order to participate in theevaluation exercise.
Similarly, information lostin the transduction from phrase structure to adependency-based analysis (as in the exampleabove), which, as Atwell (1996) points out, mayeliminate grammatical information potentiallyrequired for later processing, can also beretained.
((S (NP-SBJ-1 Paul)(VP intends)(S (NP-SBJ *-1)(VP  to(VP  leave(NP IBM)))).
))Figure 6.
PTB annotation of "Paul intends toleave IBM.<struct id="s0" type="S"><struct id="s1" type="NP"xlink:href="xptr(substring(/p/s[1]/text(),1,5))"rel ="SBJ"/><struct id="s2" type="VP"xlink:href="xptr(substring(/p/s[1]/text(),7,8))"/><struct id="s3" type="NP"xlink:href="xptr(substring(/p/s[1]/text(),16,3))"/><struct id="s4" type="PP"xlink:href="xptr(substring(/p/s[1]/text(),20,4))"rel="DIR"><struct id="s5" type="NP"xlink:href="xptr(substring(/p/s[1]/text(),25,14))"/></struct><struct id="s6" type="S" rel="ADV"><struct id="s7" ref="s1" type="NP" rel="SBJ"/><struct id="s8" type="VP"xlink:href="xptr(substring(/p/s[1]/text(),41,7))"><struct id="s9" type="NP"xlink:href="xptr(substring(/p/s[1]/text(),49,8))"/><struct id="s10" type="PP" rel="DIR"xlink:href="xptr(substring(/p/s[1]/text(),57,6))"><struct id="s11" type="NP"xlink:href="xptr(substring(/p/s[1]/text(),64,3))"/></struct></struct></struct></struct>Figure 4.
The PTB example encoded according to the structural skeleton<struct rel="subj"  head="w2" dependent="w1"/><struct rel="xcomp" head="w2" dependent="w4"  introducer="w3"/><struct rel="subj"  head="w4" dependent="w1"/><struct rel="dobj"  head="w4" dependent="w5"/>Figure 5.
Abstract XML encoding for the  dependency annotation in Figure 2.<struct id="s0" type="S?><struct id="s1" type="NP?
target="w1?rel="SBJ" head="s2"/><struct id="s2" type="VP?
target="w2"/><struct id="s3" type="S?><struct id="s4" ref="s1"rel="SBJ" head="s6"/><struct id="s5" type="VP?
target="w3"><struct id="s6" type="VP?
target="w4"><struct id=?s7?
type="NP?
target="w5"/></struct></struct></struct></struct>Figure 4 : PTB encoding of "Paul intends to leave IBM.
"5 DiscussionDespite its seeming complexity, the XCESframework is designed to reduce overhead forannotators and users.
Part of the work of theXCES is to provide XML support (e.g.,development of XSLT scripts, XML schemas,etc.)
for use by the research community, thuseliminating the need for XML expertise ateach development site.
Because XML-encoded annotated corpora are increasinglyused for interchange between processing andanalytic tools, we are developing XSLTscripts for mapping, and extraction ofannotated data, import/export of (partially)annotated material, and integration of resultsof external tools into existing annotated datain XML.
Tools for editing annotations in theabstract format, which automatically generatevirtual AML from Data Category and DialectSpecifications, are already under developmentin the context of work on the TerminologicalMarkup Language, and a tool forautomatically generating RDF specificationsfor user-specified data categories has alreadybeen developed in the SALT project.9 Severalfreely distributed interpreters for XSLT havealso been developed (e.g., xt10, Xalan11).
Inpractice, annotators and users of annotatedcorpora will rarely see XML and RDFinstantiations of annotated data; rather, theywill access the data via interfaces thatautomatically generate, interpret, and displaythe data in easy-to-read formats.9http://www.loria.fr/projets/SALT10Clark, J., 1999.
XT Version 1991105.http://www.jclark.com/xml/xt.html11http://www.apache.orgThe abstract model that captures thefundamental properties of syntactic annotationschemes provides a conceptual tool forassessing the coherence and consistency ofexisting schemes and those being developed.The model enforces clear distinctions betweenimplicit and explicit information (e.g.,functional relations implied by structuralrelations in constituent analyses), and phrasaland functional relations.
It is alarminglycommon for annotation schemes to representthese different kinds of information in thesame way, rendering their distinctioncomputationally intractable (even if they areperfectly understandable by the informedhuman reader).
Hand-developed annotationschemes used in treebanks are often describedinformally in guidebooks for annotators,leaving considerable room for variation; forexample, Charniak (1996) notes that the PTBimplicitly contains more than 10,000 context-free rules, most of which are used only once.Comparison and transduction of schemesbecomes virtually impossible under suchcircumstances.
While requiring that annotatorsmake relations explicit and consider themapping to the XCES abstract formatincreases overhead, we feel that the exercisewill help avoid such problems and can onlylead to greater coherence, consistency, andinter-operability among annotation schemes.The most important contribution to inter-operability of annotation schemes is the DataCategory Registry.
By mapping site-specificcategories onto definitions in the Registry,equivalences (and non-equivalences) are madeexplicit.
Again, the provision of a ?standard?set of categories, together with therequirement that scheme-specific categoriesare mapped to them where possible, willcontribute to greater consistency andcommonality among annotation schemes.6 ConclusionThe XCES framework for linguisticannotation is built around some relativelystraightforward ideas: separation ofinformation conveyed by means of structureand information conveyed directly byspecification of content categories;development of an abstract format that puts alayer of abstraction between site-specificannotat ion schemes and standardspecifications; and creation of a DataCategory Registry to provide a reference setof annotation categories.
The emergence ofXML and related standards such as RDFprovides the enabling technology.
We are,therefore, at a point where the creation anduse of annotated data and concerns about theway it is represented can be treatedseparately?that is, researchers can focus onthe question of what to encode, independent ofthe question of how  to encode it.
The endresult should be greater coherence,consistency, and ease of use and access forannotated data.ReferencesAnne Abeill?
(ed.
), forthcoming.
Treebanks:Building and Using Syntactically AnnotatedCorpora, Kluwer Academic Publishers.Eric Atwell, 1996.
Comparative evaluation ofgrammatical annotation models.
In R. Sutcliffe,H.
Koch, A. McElligott (eds.
), IndustrialParsing of Software Manuals, 25-46.
Rodopi.Paul Biron and Ashok Malhotra, 2000.
XMLSchema Part 2: Datatypes.
W3C CandidateRecommendation.http://www.w3.org/TR/xmlschema-2/.Tim Bray, Jean Paoli and C. Michael Sperberg-McQueen (eds.
), 1998.
Extensible MarkupLanguage (XML).Dan Brickley and R.V.
Guha, 2000.
ResourceDescription Framework (RDF) SchemaSpecification 1.0. http://www.w3.org/TR/rdf-schema/.John Carroll, Guido Minnen, and Ted Briscoe,forthcoming.
Parser Evaluation Using aGrammatical Relation Annotation Scheme.
InAnne Abeill?
(ed.)
Treebanks: Building andUsing Syntactically Annotated Corpora, KluwerAcademic Publishers.Eugene Charniak, 1996.
Tree-bank grammars.Proceedings of the 13th National Conference onArtificial Intelligence, AAAI?96, 1031-36.James Clark (ed.
), 1999.
XSL Transformations(XSLT).
http://www.w3.org/TR/xslt.James Clark and Steven DeRose, 1999.
XML PathLanguage.
http://www.w3.org/TR/xpath.Philip Harrison, Steven Abney, Ezra Black, DanFlickinger, Claudia Gdaniec, Ralph Grishman,Don Hindle, Bob Ingria, Mitch Marcus,Beatrice Santorini, and Tomek Strzalkowski,1991.
Evaluating syntax performance ofparser/grammars of English.
Proceedings of theWorkshop on Evaluating Natural LanguageProcessing Systems, 71-77.Nancy Ide,  Patrice Bonhomme, and LaurentRomary, 2000.
XCES: An XML-based Standardfor Linguistic Corpora.
Proceedings of theSecond Language Resources and EvaluationConference (LREC), 825-30.Nancy Ide, Adam Kilgarriff, and Laurent Romary,2000.
A Formal Model of Dictionary Structureand Content.
In Proceedings of EURALEX?00,113-126.Ora Lassila and Ralph Swick, 1999.
ResourceDescription framework (RDF) Model andSyntax.
http://www.w3.org/TR/REC-rdf-syntax.Geoffrey Leech, R. Barnett, and P. Kahrel, 1996.EAGLES Recommendations for the SyntacticAnnotation of Corpora.Daniel Sleator and Davy Temperley, 1993.
ParsingEnglish with a link grammar.
T h i r dInternational Workshop on ParsingTechnologies.Bangalore Srinivas, Christy Doran, Beth-AnnHockey and Avarind Joshi,  1996.
An approachto robust partial parsing and evaluation metrics.Proceedings of the ESSLI?96 Workshop onRobust Parsing,  70-82.Pasi Tapanainen and Timo J?rvinen.
1997.
A non-projective dependency parser.
Proceedings ofthe 5th Conference on Applied NaturalLanguage Processing (ANLP?97), 64-71.Henry Thompson, David Beech, Murray Maloney,and Noah Mendelsohn, 2000.
XML SchemaPart 1: Structures.http://www.w3.org/TR/xmlschema-1/.
