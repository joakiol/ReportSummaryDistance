Proceedings of the Third Linguistic Annotation Workshop, ACL-IJCNLP 2009, pages 162?165,Suntec, Singapore, 6-7 August 2009. c?2009 ACL and AFNLPSimple Parser for Indian Languages in a Dependency FrameworkAkshar Bharati, Mridul Gupta, Vineet Yadav, Karthik Gali and Dipti Misra SharmaLanguage Technologies Research Center,IIIT-Hyderabad, India{mridulgupta,vineetyadav}@students.iiit.ac.in,karthikg@research.iiit.ac.in,dipti@iiit.ac.inAbstractThis paper is an attempt to show that an inter-mediary level of analysis is an effective wayfor carrying out various NLP tasks for linguis-tically similar languages.
We describe aprocess for developing a simple parser fordoing such tasks.
This parser uses a grammardriven approach to annotate dependency rela-tions (both inter and intra chunk) at an inter-mediary level.
Ease in identifying a particulardependency relation dictates the degree ofanalysis reached by the parser.
To establish ef-ficiency of the simple parser we show the im-provement in its results over previous gram-mar driven dependency parsing approaches forIndian languages like Hindi.
We also proposethe possibility of usefulness of the simpleparser for Indian languages that are similar innature.1 Introduction and Related WorkBroad coverage parsing is a challenging task.
Forlanguages such as the Indian languages, it be-comes all the more difficult as these languagesare morphologically richer and the word orderfor these languages is relatively variable and lessbound.
Although dependency grammar drivenparsing is much better suited for such type oflanguages (Hudson, 1984; Mel?Cuk, 1988), ro-bust broad coverage parsing (Bharati et.
al, 2008)still involves extensive analysis.
Achieving goodresults in parsing for these languages may re-quire large amount of linguistic resources such asannotated corpora, verb frames, lexicon etc.
Onthe other hand, pure shallow parsing techniques(PVS and Gali, 2007) are not enough for provid-ing sufficient information for applications suchas machine translation, query answering etc.It is here that the notion of a simple parser isborn where the idea is to parse a sentence at acoarser level.
One could go to a finer level ofparse depending on the ease with which such aparse can be generated.
The simple parser thatwe describe here is a grammar oriented modelthat makes use of linguistic features to identifyrelations.
We have modeled the simple parser onthe Paninian grammatical model (Begum et al,2008; Bharati et al, 1995) which provides a de-pendency grammar framework.
Paninian depen-dency grammar works well for analyzing Indianlanguages (Bharati et al, 1993).
We have fol-lowed karaka1 based approach for parsing.An effort has been previously made in gram-mar driven parsing for Hindi by us (Gupta et al,2008) where the focus was not to mark relationsin a broad coverage sense but to mark certaineasily identifiable relations using a rule base.
Inthis paper, we show improvements in results overour previous work by including some additionallinguistic features which help in identifying rela-tions better.
Our previous work focused only oninter-chunk annotation.
In this paper, however,we have worked on both inter as well as intrachunk annotation.
We later show their effective-ness and results at different levels of dependencyannotation.
We also propose how useful the sim-ple parser is for Indian languages which are simi-lar in nature.2 Paninian Dependency AnnotationScheme at Various LevelsPaninian dependency scheme is based on a mod-ifier-modified relationship (Bharati et al, 1995).The modified chunk (or group) is classified onthe basis of its part of speech category.
A hie-rarchy of dependency relations is thus estab-lished on the basis of this category.
For example,all those relations whose parent (modified group)is a verb are classified under the verb modifier(vmod) category.
Subsequent levels further clas-sify these relations (or labels).
Depth of a level inthe hierarchy reflects the fineness of the depen-dency relations/labels.
There are five labels at the1 The elements modifying the verb participate in the actionspecified by the verb.
These participant relations with theverb are called karakas.162coarsest level namely, vmod, nmod (noun mod-ifier), jjmod (adjective modifier), advmod (ad-verbial modifier) and ccof (conjunct of).Athough, ccof is not strictly a dependency rela-tion (Begum et al, 2008).
Figure 1 shows thehierarchy of relations used in the scheme.Figure 1: Hierarchy of Dependency Labels.The next level comprises of varg (verb argu-ment), vad (verb adjunct) and vmod_1 2  labelsunder vmod.
Under the nmod label, nmod_adj(adjective), r6 (genitive) are classified.
At themost fine grained level, varg and vad furtherbranch out into labels like k1, k2, k3, k5, k7 andrh, rt, rd, k1s etc.
The relations under varg are thesix karakas that are the most essential partici-pants in an action.
All the other dependency la-bels3 are non-karakas (for a more detailed expla-nation see Begum et al (2008) and Bharati et al(1995)).Languages often have constructions that areambiguous, owing to similar feature and contextdistribution.
Thus, in such cases, it is appropriateto under-specify the relations (labels) or groupsome of them together.
Also, some labels havevery less frequency of occurrence in the corpusand it is thus appropriate to leave them out formarking by the simple parser.
One can later, onthe availability of more information, try to identi-fy and mark such instances with appropriate la-bels.The dependency tagset described in this sec-tion is used to mark inter-chunk relations.
Formarking relations between words within a chunk(intra-chunk), a similar tagset has been devel-oped.2 vmod_1: A dependency relation in the vmod category, thatexists between a non-finite verb and its parent verb.
It hasbeen under-specified for simplicity.3A comprehensive list of the dependency tagset can befound at http://ltrc.iiit.ac.in/MachineTrans/research/tb/dep-tagset.pdf3 ProcedureOur approach is corpus based where rules havebeen crafted after studying the corpus.
We usedthe Hyderabad Dependency Treebank (HyDT)for development and testing our rules.
The tree-bank consists of about 2100 sentences in Hindi,of which 1800 were part of the development setand 300 were used as test data.
Each sentence isPOS tagged and chunked (Bharati et al, 2006) inSSF format (Bharati et al, 2005).3.1 ApproachThe simple parser we propose here is a languageindependent engine that takes a rule file specificfor a particular language (Gupta et.
al, 2008).Indian languages are similar in various respects(Emeneau 1956; 1980).
Hence, rules made forone language can be efficiently transferred forother similar languages.
However, there can becases where rules for one language may not workfor another.
These cases can be handled by add-ing some new rules for that particular language.The relative closeness among such languages,determines the efficiency of transference of rulesfrom one language to another.
We have takenHindi and Punjabi, as example languages to sup-port our proposal.
1(a) below is in Hindi,1(a).
raama  ko      mithaaii acchii    nahii?Ram - dat?
?sweets?
?good?
?not?lagatii.?appear?
?Ram does not like sweets.
?Its corresponding Punjabi sentence,1(b).
raama   nuu  mitthaai   changii        nii?Ram - dat?
?sweets?
?good?
?not?lagadii.?appear?
?Ram does not like sweets.
?Now, the rules for identifying k14 and k2 inHindi are similar to that of Punjabi.
For instance,in both the cases, the noun chunk possessing anominative case marker (chunks take the proper-ties of their heads) and the TAM (tense, aspectand modality of the main verb) should agree in4k1 (karta) and k2 (karma) are syntactico-semantic labelswhich have some properties of both grammatical roles andthematic roles.
k1 for example, behaves similar to subjectand agent.
Likewise, k2 behaves like object/theme (Begumet al, 2008)163GNP for the noun to be a k2.
It is easy to seehow rules made for identifying certain relationsin Hindi can be transferred to identify the samerelations in Punjabi and similarly for other lan-guages.
However, not all rules can be transferredfrom one language to another.3.2 Intra-chunk RelationsWe also mark intra-chunk dependency relations.The procedure of marking intra-chunk labels isalso rule based.
Rules have been crafted using acommon POS5 tagset for Indian languages (Bha-rati et al, 2006).
Rules can be applied to otherlanguages.
However, some rules may not work.In those cases we need to add some rules specificto the language.
The rule format is a five-tuplecontaining the following fields,1.
Modified word2.
Modified constraints3.
Modifier word4.
Modifier constraints5.
Dependency relationRules for marking intra-chunk relations havebeen marked studying the POS tagged andchunked corpus.
Commonly occurring linguisticpatterns between two or more nodes are drawnout in the form of statistics and their figures arecollected.
Such patterns are then converted intorobust rules.4 Experiments and ResultsWe conducted experiments using the simpleparser to establish its efficacy in identifying aparticular set of relations explained in section 2.Experiments were conducted on gold standardtest data derived from HyDT.
The experimentswere carried out on Hindi.4.1 Marking Relations at Various LevelsWe marked dependency labels at various levelsdescribed above using the proposed simple pars-er.
The results are shown below We report twomeasures for evaluation, labeled (L) and labeledattachment (LA).
Table 1 shows results for mark-ing relations at the top most level (cf.
Figure 1).It should be noted that we have not marked re-lations like jjmod and advmod because the fre-quency of their occurrence in the treebank isquite low.
The focus is only on those relationswhose frequency of occurrence is above a bareminimum (>15).
The frequency of labels likejjmod and advmod is not above that threshold5 POS: Part of Speechvalue (Relations like k1 and k2 occur more than1500 times in the treebank).RelationPrecisionL LARecallL     LAvmod 93.7% 83.0% 76.1% 67.4%nmod 83.6% 79.1% 77.5% 73.3%ccof 92.9% 82.9% 53.5% 50.4%Total 91.8% 82.3% 72.9% 65.4%Table 1.
Figures for relations at the highest level.Table 2 below depicts the figures obtained forthe next level.RelationPrecisionL LARecallL     LAvarg 77.7% 69.3% 77.9% 69.4%vad 75.2% 66.6% 30.3% 26.9%vmod_1 89.6% 75.8% 46.0% 38.9%r6 83.2% 78.5% 90.2% 85.2%nmod__adj 77.8% 77.8% 10.9% 10.9%Total 79.1% 71.2% 64.6% 58.2%Table 2.
Figures for level 2.In section 1, improvement in marking certainrelations over our previous attempt (Gupta et.
al,2008) was mentioned.
We provide a comparisonof the results for the simple parser as opposed tothe previous results.
Figures shown in table 3have been reproduced for comparing themagainst the results of the simple parser shown inthis paper.RelationPrecisionL LARecallL LAk1 66.0% 57.7% 65.1% 57.6%k2 31.3% 28.3% 27.8% 25.1%k7(p/t) 80.8% 77.2% 61.0% 58.4%r6 82.1% 78.7% 89.6% 85.8%nmod__adj 23.2% 21.9% 27.4% 25.8%Table 3.
Figures reproduced from our previouswork.Table 4 shows results of the simple parser.Note the improvement in precision values for allthe relations.RelationPrecisionL LARecallL LAk1 72.6% 68.0% 67.9% 63.5%k2 61.6% 54.1% 29.9% 26.2%k7(p/t) 84.6% 77.9% 73.5% 68.7%r6 83.2% 78.6% 90.2% 85.5%nmod__adj 77.8% 77.8% 10.9% 10.9%pof 89.4% 87.7% 25.7% 25.2%Table 4.
Figures for simple parser.1644.2 Intra-chunk ExperimentsWe also carried out some experiments to deter-mine the efficiency of the simple parser with re-spect to annotating intra-chunk relations for Hin-di.
Results shown below were obtained after test-ing the simple parser using gold standard testdata of about 200 sentences.
Table 5 shows fig-ures for labeled accuracy as well as labeled at-tachment accuracy.RelationPrecisionL LARecallL LAnmod 100% 89.3% 70.0% 62.5%nmod__adj 100% 92.7% 85.2% 79.0%nmod__dem 100% 100% 100% 100%nmod__qf 97.0% 92.4% 80.0% 76.2%pof 84.5% 82.1% 94.5% 92.0%ccof 91.8% 80.0% 70.9% 62.0%jjmod__intf 100% 100% 100% 100%Total 96.2% 90.4% 82.6% 77.7%Table 5.
Figures for intra-chunk annotation.5 ConclusionWe introduced the notion of a simple parser forIndian languages which follows a grammar dri-ven methodology.
We compared its performanceagainst previous similar attempts and reported itsefficiency.
We showed how by using simple yetrobust rules one can achieve high performance inthe identification of various levels of dependencyrelations.The immediate tasks for the near future wouldbe to identify relative clauses in order to reducelabeled attachment errors and hence to come upwith rules for better identification of clauses.
Wealso intend to thoroughly test our rules for Indianlanguages that are similar in nature and henceevaluate the efficiency of the simple parser.AcknowledgementsWe sincerely thank Samar Husain, for his impor-tant role in providing us with valuable linguisticinputs and ideas.
The treebank (Hyderabad de-pendency treebank, version 0.05) used, was pre-pared at LTRC, IIIT-Hyderabad.ReferencesRafiya Begum, Samar Husain, Arun Dhwaj, DiptiMisra Sharma, Lakshmi Bai, and Rajeev Sangal.2008.
Dependency annotation scheme for Indianlanguages.
In Proceedings of IJCNLP-2008.Akshar Bharati, Vineet Chaitanya and Rajeev Sangal.1995.
Natural Language Processing: A Pani-nian Perspective, Prentice-Hall of India, NewDelhi, pp.
65-106.Akshar Bharati, Samar Husain, Dipti Misra Sharma,and Rajeev Sangal.
2008.
A Two-Stage ConstraintBased Dependency Parser for Free Word OrderLanguages.
In Proc.
of the COLIPS Interna-tional Conference on Asian LanguageProcessing 2008 (IALP).
Chiang Mai, Thailand.2008.Akshar Bharati and Rajeev Sangal.
1993.
Parsing FreeWord Order Languages in the Paninian Frame-work, ACL93: Proc.
of Annual Meeting of As-sociation for Computational Linguistics.Akshar Bharati, Rajeev Sangal and Dipti M. Sharma.2005.
ShaktiAnalyser: SSF Representation.Akshar Bharati, Rajeev Sangal, Dipti Misra Sharmaand Lakshmi Bai.
2006.
AnnCorra: AnnotatingCorpora Guidelines for POS and Chunk Annota-tion for Indian Languages.
Technical Report(TR-LTRC-31), Language Technologies Re-search Centre IIIT, Hyderabadhttp://ltrc.iiit.ac.in/MachineTrans/publications/technicalReports/tr031/posguidelines.pdfMurray B. Emeneau.
1956.
India as a linguistic area.Linguistics, 32:3-16.Murray B. Emeneau.
1980.
Language and linguis-tic area.
Essays by Murray B. Emeneau.
Se-lected and introduced by Anwar S. Dil.
Stan-ford University Press.Mridul Gupta, Vineet Yadav, Samar Husain and DiptiM.
Sharma.
2008.
A Rule Based Approach for Au-tomatic Annotation of a Hindi Treebank.
In Proc.Of the 6th International Conference on Natu-ral Language Processing (ICON-08), CDACPune, India.R.
Hudson.
1984.
Word Grammar, Basil Blackwell,Oxford, OX4 1JF, England.I.
Mel'cuk .
1988.
Dependency Syntax: Theory andPractice, State University, Press of New York.Avinesh PVS and Karthik Gali.
2007.
Part-of-speechtagging and chunking using conditional randomfields and transformation based learning.
In Proc.Of IJCAI-07 Workshop on ?Shallow Parsingin South Asian Languages?, 2007.165
