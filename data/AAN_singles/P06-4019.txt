Proceedings of the COLING/ACL 2006 Interactive Presentation Sessions, pages 73?76,Sydney, July 2006. c?2006 Association for Computational LinguisticsOutilex, a Linguistic Platform for Text ProcessingOlivier BlancIGM, University of Marne-la-Valle?e5, bd Descartes - Champs/Marne77454 Marne-la-Valle?e, Franceoblanc@univ-mlv.frMatthieu ConstantIGM, University of Marne-la-Valle?e5, bd Descartes - Champs/Marne77 454 Marne-la-Valle?e, francemconstan@univ-mlv.frAbstractWe present Outilex, a generalist linguis-tic platform for text processing.
The plat-form includes several modules implement-ing the main operations for text processingand is designed to use large-coverage Lan-guage Resources.
These resources (dictio-naries, grammars, annotated texts) are for-matted into XML, in accordance with cur-rent standards.
Evaluations on efficiencyare given.1 CreditsThis project has been supported by the FrenchMinistry of Industry and the CNRS.
Thanks to Skyand Francesca Sigal for their linguistic expertise.2 IntroductionThe Outilex Project (Blanc et al, 2006) aims to de-velop an open-linguistic platform, including tools,electronic dictionaries and grammars, dedicated totext processing.
It is the result of the collaborationof ten French partners, composed of 4 universitiesand 6 industrial organizations.
The project startedin 2002 and will end in 2006.
The platform whichwill be made freely available to research, develop-ment and industry in April 2007, comprises soft-ware components implementing all the fundamen-tal operations of written text processing: text seg-mentation, morphosyntactic tagging, parsing withgrammars and language resource management.All Language Resources are structured in XMLformats, as well as binary formats more adequateto efficient processing; the required format con-verters are included in the platform.
The grammarformalism allows for the combination of statis-tical approaches with resource-based approaches.Manually constructed lexicons of substantial cov-erage for French and English, originating from theformer LADL1, will be distributed with the plat-form under LGPL-LR2 license.The platform aims to be a generalist base for di-verse processings on text corpora.
Furthermore, ituses portable formats and format converters thatwould allow for combining several software com-ponents.
There exist a lot of platforms dedicatedto NLP, but none are fully satisfactory for variousreasons.
Intex (Silberztein, 1993), FSM (Mohri etal., 1998) and Xelda3 are closed source.
Unitex(Paumier, 2003), inspired by Intex has its sourcecode under LGPL license4 but it does not supportstandard formats for Language Resources (LR).Systems like NLTK (Loper and Bird, 2002) andGate (Cunningham, 2002) do not offer functional-ity for Lexical Resource Management.All the operations described below are imple-mented in C++ independent modules which in-teract with each others through XML streams.Each functionality is accessible by programmersthrough a specified API and by end users throughbinary programs.
Programs can be invoked bya Graphical User Interface implemented in Java.This interface allows the user to define his ownprocessing flow as well as to work on severalprojects with specific texts, dictionaries and gram-mars.1French Laboratory for Linguistics and Information Re-trieval2Lesser General Public License for Language Resources,http://infolingu.univ-mlv.fr/lgpllr.html.3http://www.dcs.shef.ac.uk/ hamish/dalr/baslow/xelda.pdf.4Lesser General Public License,http://www.gnu.org/copyleft/lesser.html.733 Text segmentationThe segmentation module takes raw texts orHTML documents as input.
It outputs a textsegmented into paragraphs, sentences and tokensin an XML format.
The HTML tags are keptenclosed in XML elements, which distinguishesthem from actual textual data.
It is therefore pos-sible to rebuild at any point the original docu-ment or a modified version with its original layout.Rules of segmentation in tokens and sentences arebased on the categorization of characters definedby the Unicode norm.
Each token is associatedwith information such as its type (word, number,punctuation, ...), its alphabet (Latin, Greek), itscase (lowercase word, capitalized word, ...), andother information for the other symbols (openingor closing punctuation symbol, ...).
When appliedto a corpus of journalistic telegrams of 352,464tokens, our tokenizer processes 22,185 words persecond5.4 Morphosyntactic taggingBy using lexicons and grammars, our platform in-cludes the notion of multiword units, and allowsfor the handling of several types of morphosyntac-tic ambiguities.
Usually, stochastic morphosyn-tactic taggers (Schmid, 1994; Brill, 1995) do nothandle well such notions.
However, the use of lex-icons by companies working in the domain hasmuch developed over the past few years.
Thatis why Outilex provides a complete set of soft-ware components handling operations on lexicons.IGM also contributed to this project by freely dis-tributing a large amount of the LADL lexicons6with fine-grained tagsets7: for French, 109,912simple lemmas and 86,337 compound lemmas; forEnglish, 166,150 simple lemmas and 13,361 com-pound lemmas.
These resources are available un-der LGPL-LR license.
Outilex programs are com-patible with all European languages using inflec-tion by suffix.
Extensions will be necessary forthe other types of languages.Our morphosyntactic tagger takes a segmentedtext as an input ; each form (simple or compound)is assigned a set of possible tags, extracted from5This test and further tests have been carried out on a PCwith a 2.8 GHz Intel Pentium Processor and a 512 Mb RAM.6http://infolingu.univ-mlv.fr/english/, follow links Lin-guistic data then Dictionnaries.7For instance, for French, the tagset combines 13 part-of-speech tags, 18 morphological features and several syntacticand semantic features.indexed lexicons (cf.
section 6).
Several lexiconscan be applied at the same time.
A system of pri-ority allows for the blocking of analyses extractedfrom lexicons with low priority if the consideredform is also present in a lexicon with a higher pri-ority.
Therefore, we provide by default a generallexicon proposing a large set of analyses for stan-dard language.
The user can, for a specific appli-cation, enrich it by means of complementary lexi-cons and/or filter it with a specialized lexicon forhis/her domain.
The dictionary look-up can be pa-rameterized to ignore case and diacritics, whichcan assist the tagger to adapt to the type of pro-cessed text (academic papers, web pages, emails,...).
Applied to a corpus of AFP journalistic tele-grams with the above mentioned dictionaries, Out-ilex tags about 6,650 words per second8.The result of this operation is an acyclic au-tomaton (sometimes, called word lattice in thiscontext), that represents segmentation and tag-ging ambiguities.
This tagged text can be serial-ized in an XML format, compatible with the draftmodel MAF (Morphosyntactic Annotation Frame-work)(Cle?ment and de la Clergerie, 2005).All further processing described in the next sec-tion will be run on this automaton, possibly modi-fying it.5 Text ParsingGrammatical formalisms are very numerous inNLP.
Outilex uses a minimal formalism: Recur-sive Transition Network (RTN)(Woods, 1970) thatare represented in the form of recursive automata(automata that call other automata).
The termi-nal symbols are lexical masks (Blanc and Dister,2004), which are underspecified word tags i.e.
thatrepresent a set of tagged words matching with thespecified features (e.g.
noun in the plural).
Trans-ductions can be put in our RTNs.
This can be used,for instance, to insert tags in texts and thereforeformalize relations between identified segments.This formalism allows for the construction oflocal grammars in the sense of (Gross, 1993).It has been successfully used in different typesof applications: information extraction (Poibeau,84.7 % of the token occurrences were not found in the dic-tionary; This value falls to 0.4 % if we remove the capitalizedoccurrences.The processing time could appear rather slow; but, this taskinvolves not so trivial computations such as conversion be-tween different charsets or approximated look-up using Uni-code character properties.742001; Nakamura, 2005), named entity localization(Krstev et al, 2005), grammatical structure iden-tification (Mason, 2004; Danlos, 2005)).
All ofthese experiments resulted in recall and precisionrates equaling the state-of-the-art.This formalism has been enhanced with weightsthat are assigned to the automata transitions.
Thus,grammars can be integrated into hybrid systemsusing both statistical methods and methods basedon linguistic resources.
We call the obtained for-malism Weighted Recursive Transition Network(WRTN).
These grammars are constructed in theform of graphs with an editor and are saved in anXML format (Sastre, 2005).Each graph (or automaton) is optimized withepsilon transition removal, determinization andminimization operations.
It is also possible totransform a grammar in an equivalent or approx-imate finite state transducer, by copying the sub-graphs into the main automaton.
The result gen-erally requires more memory space but can highlyaccelerate processing.Our parser is based on Earley algorithm (Earley,1970) that has been adapted to deal with WRTN(instead of context-free grammar) and a text in theform of an acyclic finite state automaton (insteadof a word sequence).
The result of the parsingconsists of a shared forest of weighted syntactictrees for each sentence.
The nodes of the treesare decorated by the possible outputs of the gram-mar.
This shared forest can be processed to getdifferent types of results, such as a list of con-cordances, an annotated text or a modified textautomaton.
By applying a noun phrase grammar(Paumier, 2003) on a corpus of AFP journalistictelegrams, our parser processed 12,466 words persecond and found 39,468 occurrences.The platform includes a concordancer that al-lows for listing in their occurring context differ-ent occurrences of the patterns described in thegrammar.
Concordances can be sorted accordingto the text order or lexicographic order.
The con-cordancer is a valuable tool for linguists who areinterested in finding the different uses of linguis-tic forms in corpora.
It is also of great interest toimprove grammars during their construction.Also included is a module to apply a transduceron a text.
It produces a text with the outputs of thegrammar inserted in the text or with recognizedsegments replaced by the outputs.
In the case ofa weighted grammar, weights are criteria to selectbetween several concurrent analyses.
A criterionon the length of the recognized sequences can alsobe used.For more complex processes, a variant of thisfunctionality produces an automaton correspond-ing to the original text automaton with new transi-tions tagged with the grammar outputs.
This pro-cess is easily iterable and can then be used forincremental recognition and annotation of longerand longer segments.
It can also complete the mor-phosyntactic tagging for the recognition of semi-frozen lexical units, whose variations are too com-plex to be enumerated in dictionaries, but can beeasily described in local grammars.Also included is a deep syntactic parser basedon unification grammars in the decorated WRTNformalism (Blanc and Constant, 2005).
This for-malism combines WRTN formalism with func-tional equations on feature structures.
Therefore,complex syntactic phenomena, such as the extrac-tion of a grammatical element or the resolution ofsome co-references, can be formalized.
In addi-tion, the result of the parsing is also a shared for-est of syntactic trees.
Each tree is associated with afeature structure where are represented grammati-cal relations between syntactical constituents thathave been identified during parsing.6 Linguistic Resource ManagementThe reuse of LRs requires flexibility: a lexicon or agrammar is not a static resource.
The managementof lexicons and grammars implies manual con-struction and maintenance of resources in a read-able format, and compilation of these resources inan operational format.
These techniques requirestrong collaborations between computer scientistsand linguists; few systems provide such function-ality (Xelda, Intex, Unitex).
The Outilex platformprovides a complete set of management tools forLRs.
For instance, the platform offers an inflectionmodule.
This module takes a lexicon of lemmaswith syntactic tags as input associated with inflec-tion rules.
It produces a lexicon of inflected wordsassociated with morphosyntactic features.
In orderto accelerate word tagging, these lexicons are thenindexed on their inflected forms by using a mini-mal finite state automaton representation (Revuz,1991) that allows for both fast look-up procedureand dictionary compression.757 ConclusionThe Outilex platform in its current version pro-vides all fundamental operations for text pro-cessing: processing without lexicon, lexicon andgrammar exploitation and LR management.
Dataare structured both in standard XML formats andin more compact ones.
Format converters are in-cluded in the platform.
The WRTN formalism al-lows for combining statistical methods with meth-ods based on LRs.
The development of the plat-form required expertise both in computer scienceand in linguistics.
It took into account both needsin fundamental research and applications.
In thefuture, we hope the platform will be extended toother languages and will be enriched with newfunctionality.ReferencesOlivier Blanc and Matthieu Constant.
2005.
Lexi-calization of grammars with parameterized graphs.In Proc.
of RANLP 2005, pages 117?121, Borovets,Bulgarie, September.
INCOMA Ltd.Olivier Blanc and Anne Dister.
2004.
Automates lexi-caux avec structure de traits.
In Actes de RECITAL,pages 23?32.Olivier Blanc, Matthieu Constant, and ?Eric Laporte.2006.
Outilex, plate-forme logicielle de traitementsde textes e?crits.
In Ce?drick Fairon and Piet Mertens,editors, Actes de TALN 2006 (Traitement automa-tique des langues naturelles), page to appear, Leu-ven.
ATALA.Eric Brill.
1995.
Transformation-based error-drivenlearning and natural language processing: A casestudy in part-of-speech tagging.
Computational Lin-guistics, 21(4):543?565.Lionel Cle?ment and ?Eric de la Clergerie.
2005.
MAF:a morphosyntactic annotation framework.
In Proc.of the Language and Technology Conference, Poz-nan, Poland, pages 90?94.Hamish Cunningham.
2002.
GATE, a general archi-tecture for text engineering.
Computers and the Hu-manities, 36:223?254.Laurence Danlos.
2005.
Automatic recognition ofFrench expletive pronoun occurrences.
In Compan-ion Volume of the International Joint Conferenceon Natural Language Processing, Jeju, Korea, page2013.Jay Earley.
1970.
An efficient context-free parsing al-gorithm.
Comm.
ACM, 13(2):94?102.Maurice Gross.
1993.
Local grammars and their rep-resentation by finite automata.
In M. Hoey, editor,Data, Description, Discourse, Papers on the EnglishLanguage in honour of John McH Sinclair, pages26?38.
Harper-Collins, London.Cvetana Krstev, Dus?ko Vitas, Denis Maurel, andMickae?l Tran.
2005.
Multilingual ontology ofproper names.
In Proc.
of the Language and Tech-nology Conference, Poznan, Poland, pages 116?119.Edward Loper and Steven Bird.
2002.
NLTK: the nat-ural language toolkit.
In Proc.
of the ACL Workshopon Effective Tools and Methodologies for TeachingNatural Language Processing and ComputationalLinguistics, Philadelphia.Oliver Mason.
2004.
Automatic processing of lo-cal grammar patterns.
In Proc.
of the 7th AnnualCLUK (the UK special-interest group for computa-tional linguistics) Research Colloquium.Mehryar Mohri, Fernando Pereira, and Michael Riley.1998.
A rational design for a weighted finite-statetransducer library.
Lecture Notes in Computer Sci-ence, 1436.Takuya Nakamura.
2005.
Analysing texts in a specificdomain with local grammars: The case of stock ex-change market reports.
In Linguistic Informatics -State of the Art and the Future, pages 76?98.
Ben-jamins, Amsterdam/Philadelphia.Se?bastien Paumier.
2003.
De la reconnaissance deformes linguistiques a` l?analyse syntaxique.
Volume2, Manuel d?Unitex.
Ph.D. thesis, IGM, Universite?de Marne-la-Valle?e.Thierry Poibeau.
2001.
Extraction d?information dansles bases de donne?es textuelles en ge?nomique aumoyen de transducteurs a` e?tats finis.
In Denis Mau-rel, editor, Actes de TALN 2001 (Traitement automa-tique des langues naturelles), pages 295?304, Tours,July.
ATALA, Universite?
de Tours.Dominique Revuz.
1991.
Dictionnaires et lexiques:me?thodes et alorithmes.
Ph.D. thesis, Universite?Paris 7.Javier M. Sastre.
2005.
XML-based representationformats of local grammars for NLP.
In Proc.
ofthe Language and Technology Conference, Poznan,Poland, pages 314?317.Helmut Schmid.
1994.
Probabilistic part-of-speechtagging using decision trees.
Proceedings of theInternational Conference on New Methods in Lan-guage Processing.Max Silberztein.
1993.
Dictionnaires e?lectroniques etanalyse automatique de textes.
Le syste`me INTEX.Masson, Paris.
234 p.William A.
Woods.
1970.
Transition network gram-mars for natural language analysis.
Communica-tions of the ACM, 13(10):591?606.76
