Proceedings of the ACL Student Research Workshop, pages 97?102,Ann Arbor, Michigan, June 2005. c?2005 Association for Computational LinguisticsMinimalist Parsing of Subjects Displaced from Embedded Clauses in FreeWord Order LanguagesAsad B. SayeedDepartment of Computer ScienceUniversity of Maryland at College ParkA.
V. Williams BuildingMD 20742 USAasayeed@mbl.caAbstractIn Sayeed and Szpakowicz (2004), weproposed a parser inspired by some as-pects of the Minimalist Program.
Thisincremental parser was designed specifi-cally to handle discontinuous constituencyphenomena for NPs in Latin.
We take alook at the application of this parser to aspecific kind of apparent island violationin Latin involving the extraction of con-stituents, including subjects, from tensedembedded clauses.
We make use of ideasabout the left periphery from Rizzi (1997)to modify our parser in order to handle ap-parently violated subject islands and simi-lar phenomena.1 IntroductionIn Sayeed and Szpakowicz (2004), we started by de-scribing the difficulty of parsing sentences in lan-guages with discontinuous constituency in a syntac-tically robust and cognitively realistic manner.
Wemade the assumption that semantic links betweenthe words of a sentence are made as soon as theyarrive; we noted that this constrains the kinds of for-malisms and algorithms that could be used to parsehuman sentences.
In the spirit of the Minimalist Pro-gramme, we would like to produce the most eco-nomical parsing process, where, potentially contro-versially, we characterize economy as computationalcomplexity.
Discontinuity of phrases (usually nounphrases) in e.g.
Latin provides a specific set of chal-lenges in the development of a robust syntactic anal-ysis; for instance, in the process of building parsetrees, nouns must often be committed to positions inparticular structures prior to the arrival of adjectivesin an incremental parsing environment.Inspired by work such as Stabler (2001), we pro-posed a formalism and algorithm1 that used fea-ture set unification rather than feature cancellation,which Stabler uses to implement basic Minimalistoperations such as MOVE and MERGE.
We demon-strated the workings of the algorithm given sim-ple declarative sentences?in other words, withina single, simple clause.
What we wish to do nowis demonstrate that our algorithm parses Latin sen-tences with embedded clauses, and in particularthose with constituents displaced beyond the bound-aries of embedded clauses where this displacementdoes not appear to be legitimate wh-movements;these are, in a sense, another form of discontinuity.In doing this, we hope to show that our formalismworks for a wider subset of the Latin language, andthat we have reduced the problem of developing agrammar to one of choosing the correct features.2 BackgroundNoun phrases in Latin can become discontinuouswithin clauses.
For instance, it is possible to placea noun before a verb and an adjective that agreeswith the noun after the verb.
However, for the mostpart, the noun phrase components stay within CP.Nevertheless, Kessler (1995) noted several instanceswhere, possibly for intonational effect, Latin prosewriters extracted items into matrix clauses from em-bedded clauses and clauses embedded within thoseembedded clauses.
For example,(1) TametsiAlthoughtuyou-NOM-SGscioknow-IND-PRES-1SGquamhow1For the purpose of clarification, our algorithm can be foundat http://www.umiacs.umd.edu/?asayeed/discont.pdf97sisare-SUBJ-PRES-2SGcuriosusinterested-NOM-SG?Although I know how interested you are?
(Caelius at Cicero, Fam 8.1.1)In this and other cases provided by Kessler, a wordis extracted from an embedded clause and movedto the beginning of the matrix clause.
(The itali-cized words consist of the extracted element and theclause from which it was extracted.)
Note in particu-lar that 1 involves the dislocation of the subject froma tensed embedded clause, something that would or-dinarily be a well-known island violation (Haege-man, 1994).According to Kessler, this situation is rare enoughthat many contemporary accounts of Latin syntaxneglect discussion of this kind of device.
It is likelythat Cicero occasionally wrote this way for prosodicreasons; however, there is no reason why prosodyshould not have syntactic consequences, and we at-tempt to account for the parsing of such sentences inthis document.It is interesting to note how in these examples, thedisplaced element moves somewhere near to the be-ginning of the outer clause.
Rizzi (1997) suggests astructure for this ?left periphery?
based on observa-tions from Italian:(2) .
.
.
Force .
.
.
(Focus) .
.
.
(Topic) .
.
.Within Rizzi?s GB-based framework, this is sug-gested to be the internal structure of CP.
In X-barterms, it looks something like this:(3) ForcePXP Force?Force FocusPYP Focus?Focus TopicPZP Topic?Topic IPFocus and Topic in most languages have prosodiceffects, so if words displaced from embeddedclauses for prosodic reasons happen to have beenraised to the beginning, it suggests that the word hasbecome part of some form of articulated CP struc-ture.Since our parsing algorithm is inspired by mini-malism, we cannot make use of the full X-bar sys-tem.
Instead, we use Rizzi?s analysis to develop ananalysis based on features and checking.3 The Parser in Action3.1 A Run-throughOur parser (2004) is incremental, meaning that itdoes not have access to the end of the sentence atthe beginning of a derivation.
It is also ?semanti-cally greedy?, meaning that it attempts to satisfy thesemantic requirements (through checking) as soonas possible.
So each step in the derivation consistsof attempting to see whether or not checking can beaccomplished using the current items in the ?pro-cessing buffer?
and those in the ?input queue,?
andif not, shifting a word from the input queue onto theprocessing buffer.
The distinction is marked, in ournotation, by a |: the words and trees before | are inthe processing buffer, and those that are after | are inthe input queue.The algorithm also prefers move before merge.This also ensures that trees do not have multiplepending resolvable semantic dependencies, whichcan represent a state of ambiguity in determiningwhich dependency to resolve and how.We will now present an example parse of theabove sentence.
But we will first present the gen-eral outline of the parse, rather than the full detailsusing the formal representation; after that, we willdemonstrate the formalism.
We sketch the steps ofthe parse first so that we can deduce what featureswe would need to make it work with the system.We first start with everything in the input queue,after the |:(4) |tametsi tu scio quam sis curiosusNow we need to shift (hear) two words for any pars-ing operations to be performed.
So we shift tametsiand tu.
tametsi (?although?)
consists of tamen, et,and si: ?nevertheless?, ?and?, and ?if.?
These sug-gest that tametsi is part of a CP, and, most likely,Force.
Since tu has been displaced from the embed-ded clause, probably for prosodic reasons, it likelyhas features that can be gleaned from the intonationand the context, such as Focus.
Since these are partof our CP system, we merge them.
(5) tametsitametsi tuscio quam sis curiosusNow we have to shift scio.
But the verb scio does nothave a complement and cannot merge with tametsi98until it is a complete VP.
The same is true for quam(?how?)
and sis since sis (?you are?)
needs a com-plement: curiosus.
So the system waits to shift ev-erything and then merges sis and curiosus.
(6) tametsitametsi tuscio quam sissis curiosusNow we can merge sis and quam, since sis now hasa complement.
Latin is a pro-drop language, so wecan perform the merge without having an explicitsubject, which is currently part of another tree.
(7) tametsitametsi tuscio quamquam sissis curiosusquam has been given its complement.
Now as a com-plete CP, it is ready to be a complement of scio.
(8) tametsitametsi tuscioscio quamquam sissis curiosusWe have a CP (the tametsi tree) and a VP (scio), andwe need to merge them to form one CP.tametsi(9) tametsitametsi tuscioscio quamquam sissis curiosusSo this leaves us in the position of having a tu and sisin one tree.
However, we cannot bring them together.In Sayeed and Szpakowicz (2004), we required (inorder to limit tree searches) that movement duringparsing be to positions that command the trace ofmovement.
Clearly, tu does not command sis.
Weonly permitted raising, so what should we raise?
Ifwe raised the entire CP, we would get a tree in whichneither tu nor sis commands the other.
We wouldhave to make another move to get sis to commandtu.
So we take a simpler route and just move sis.tametsi(10) sisisis curiosustametsitametsitametsi tuscioscio quamquam tiNow sis commands tu.
We can now move tu.tametsisistuj(11) sisisis curiosustametsitametsitametsi tjscioscio quamquam tiNote that sis still projects after the merge, seeing thatsis holds the requirement for a subject?tu is nowin what would be known as a specifier position.
Itdoes not matter that tu does not presently commandits trace; this is something in our account of pars-ing that differs from GB and minimalist accounts ofmovement in generation.
Instead, the position withwhich it must be merged after movement can be theone that commands the original position.
This allowsthe target position to be the one that projects, as sishas.3.2 Now with FeaturesNow all dependencies are satisfied, and we have acomplete tree.
What we need to accomplish next isan account of the features required for this parse un-der the system in Sayeed and Szpakowicz (2004).We add one extra characteristic to Sayeed and Sz-pakowicz (2004) which we will explain in greaterdetail in forthcoming work: optionally-checked fea-tures; this is required primarily to avoid having toimagine empty categories when parsing such phe-nomena as dropped subjects, which exists in Latin.First of all, let us account for the lexical entries ofthe initial two words, tametsi and tu.
We need fea-tures that represent the discursive effect representedby the displacement of tu.
We shall assume that thisis Focus.
Also, however, we need a feature that willprepare tametsi to merge with scio.
So we representthese two as(12) tametsi: {UNCH?
(Disc:Focus), UNCH(Type:V)}tu: {unch(Disc:Focus) ?
unch(Case:Nom, Pers:2, Num:Sg)}Features are grouped together into feature bun-dles, which allow simultaneous checking of features.Note that the ?
in one of the feature bundles oftametsi means that it is optional; it does not have tobe checked with a focus feature on an adjacent con-stituent if such a feature does not exist, but it must ifthere is one.For tu we are using feature paths as we defined inSayeed and Szpakowicz (2004); what is to the rightof a feature path cannot be checked before what is to99the left.
In this case, we must check the focus featurebefore we can check tu as a constituent of its properVP (headed by sis).We express the trees using the same horizontal in-dented representation as in Sayeed and Szpakowicz(2004).
We use this notation because the nodes ofthis tree are too large for the ?normal?
tree represen-tation used above.
So we start with(13) | tametsi tu scio quam sis curiosusWe need to shift two words before we can do any-thing.
We thus create nodes with the above features.
(14) [tametsi {UNCH(Disc:Focus), UNCH(Type:V)}][tu {unch(Disc:Focus) ?
unch(Case:Nom, Pers:2, Num:Sg)}]| scio quam sis curiosusThe Focus features can be checked.
Using our sys-tem, unch and UNCH feature bundles are compati-ble for checking, and the node with the UNCH fea-ture projects.
This form of merge among the itemsalready shifted can only be performed with the rootsof adjacent trees.
We specified this to prevent long-distance searches of the processing buffer.
(15) [tametsi {CH(Disc:Focus, Case:Nom, Pers:2, Num:Sg),UNCH(Type:V)}]tametsi[tu {ch(Disc:Focus) ?
unch(Case:Nom, Pers:2, Num:Sg)}]| scio quam sis curiosusWhen UNCH and unch features bundles arechecked, their features are unified (and replaced withthe result of unification).
UNCH and unch becomeCH and ch.
Meanwhile, tametsi has acquired thefeatures of tu in the CH bundle.
The purpose of thismechanism is to transfer information up the tree inorder to support incremental parsing of discontinu-ous NP constituents, but we find an additional usefor this below.We make one change here to the unification offeature bundles as described by Sayeed and Sz-pakowicz (2004): when we replace feature bundleswith the result of unification, we replace them withthe features of the entire path with which we arechecking.
This ensures that in the process of check-ing, we do not ?hide?
features that are further onin the path.
So tametsi also gains the gender, per-son, and case features.
This is actually quite a log-ical extension of the idea we expressed in Sayeedand Szpakowicz (2004) that a feature being checkedwith a feature further down a path should be com-patible with all the previous features on the path.
Inboth cases, the system should reflect the idea thatfeatures further down a path are dependent on thechecking status of previous features.
As with unifi-cation in general, compatibility means lack of a con-flict in ?
: ?
pairs (i.e., no case conflicts, and so on).Now, as per 6, we need to shift all the remainingwords into the buffer before we get a compatible set.So we need to determine lexical entries for all of theremaining words.
First, scio:(16) scio: {UNCH?
(Case:Nom, Pers:1, Num:Sg),UNCH(Wh:0) ?
unch(Type:V)}We once again use a feature path.
In this case, itmeans that scio (?know?)
must have a wh-phrasecomplement2 before it is ready to be checked bysomething that takes a VP complement (such as acomplementizer).
So this leads us to an entry forquam:(17) quam: {UNCH?
(Disc:Focus), UNCH(Type:V) ?
unch(Wh:0)}For quam, we also have an optional Focus feature,because it is the head of a CP as tametsi is above.
(We might have other optional discourse featuresthere, but they would be superfluous for this discus-sion.)
And, like tametsi, it has a feature that allowsit to take a VP complement.
Checking this featurereleases the wh-feature that allows it to become thecomplement of scio.Now we only need entries for sis and curiosus(18) sis: {UNCH?
(Case:Nom, Pers:2, Num:Sg),UNCH(Case:Acc) ?
unch(Type:V)}curiosus: unch(Case:Acc, Gen:Masc, Num:Sg)We use an optional feature for the requirement ofa nominative subject on sis, subjects being optionalin Latin.
However, we do require it to take an ac-cusative object.
We are able to shift everything aswe did prior to 6.
(19) [tametsi {CH(Disc:Focus, Case:Nom, Pers:2, Num:Sg),UNCH(Type:V)}]tametsi[tu {ch(Disc:Focus) ?
unch(Case:Nom, Pers:2, Num:Sg)}][scio {UNCH?
(Case:Nom, Pers:1, Num:Sg),UNCH(Wh:0) ?
unch(Type:V)}][quam {UNCH?
(Disc:Focus), UNCH(Type:V) ?
unch(Wh:0)}][sis {UNCH?
(Case:Nom, Pers:2, Num:Sg),UNCH(Case:Acc) ?
unch(Type:V)}][curiosus unch(Case:Acc, Gen:Masc, Num:Sg)] |Now sis and curiosus can merge.
The resultingmerger between compatible unch and UNCH fea-tures, by Sayeed and Szpakowicz (2004), also causesthe contents of those feature bundles to be unified.
(20) [tametsi {CH(Disc:Focus, Case:Nom, Pers:2, Num:Sg),UNCH(Type:V)}]tametsi[tu {ch(Disc:Focus) ?
unch(Case:Nom, Pers:2, Num:Sg)}]2The 0 is just a placeholder meaning that the Wh is a single-ton, not a pair like many of the other features.100[scio {UNCH?
(Case:Nom, Pers:1, Num:Sg),UNCH(Wh:0) ?
unch(Type:V)][quam {UNCH?
(Disc:Focus), UNCH(Type:V) ?
unch(Wh:0)}][sis {UNCH?
(Case:Nom, Pers:2, Num:Sg),CH(Case:Acc, Gen:Masc, NumSg) ?
unch(Type:V)}]sis[curiosus ch(Case:Acc, Gen:Masc, Num:Sg)] |Now that the left feature on the feature path on sisis checked, the verb type feature is free.
It can checkwith the corresponding feature on quam.
(21) [tametsi {CH(Disc:Focus, Case:Nom, Pers:2, Num:Sg),UNCH(Type:V)}]tametsi[tu {ch(Disc:Focus) ?
unch(Case:Nom, Pers:2, Num:Sg)}][scio {UNCH?
(Case:Nom, Pers:1, Num:Sg),UNCH(Wh:0) ?
unch(Type:V)][quam {UNCH?
(Disc:Focus), CH(Type:V) ?
unch(Wh:0)}]quam[sis {UNCH?
(Case:Nom, Pers:2, Num:Sg),CH(Case:Acc, Gen:Masc, NumSg) ?
ch(Type:V)}]sis[curiosus ch(Case:Acc, Gen:Masc, Num:Sg)] |Feature paths allow quam to merge with scio as in 8.
(22) [tametsi {CH(Disc:Focus, Case:Nom, Pers:2, Num:Sg),UNCH(Type:V)}]tametsi[tu {ch(Disc:Focus) ?
unch(Case:Nom, Pers:2, Num:Sg)}][scio {UNCH?
(Case:Nom, Pers:1, Num:Sg),CH(Wh:0) ?
unch(Type:V)]scio[quam {UNCH?
(Disc:Focus), CH(Type:V) ?
ch(Wh:0)}]quam[sis {UNCH?
(Case:Nom, Pers:2, Num:Sg),CH(Case:Acc, Gen:Masc, NumSg) ?
ch(Type:V)}]sis[curiosus ch(Case:Acc, Gen:Masc, Num:Sg)] |And, lastly, scio merges with the CP headed bytametsi.
(23) [tametsi {CH(Disc:Focus, Case:Nom, Pers:2, Num:Sg),CH(Type:V)}]tametsitametsi[tu {ch(Disc:Focus)?
unch(Case:Nom, Pers:2, Num:Sg)}][scio {UNCH?
(Case:Nom, Pers:1, Num:Sg),CH(Wh:0) ?
ch(Type:V)]scio[quam {UNCH?
(Disc:Focus), CH(Type:V) ?
ch(Wh:0)}]quam[sis {UNCH?
(Case:Nom, Pers:2, Num:Sg),CH(Case:Acc, Gen:Masc, NumSg)?
ch(Type:V)}]sis[curiosus ch(Case:Acc, Gen:Masc, Num:Sg)] |We now have a single tree, but we are in the predica-ment of 9.
We need to be able to move sis to a posi-tion where it commands tu.
And that means movingit to join with tametsi.In Sayeed and Szpakowicz (2004), we proposeda mechanism by which adjuncts displaced from dis-continuous NPs could reunite with their NPs even ifthe NP had already been merged as a constituent ofa verb.
This was by allowing adjuncts to merge withthe verb if the verb had a compatible CH feature(without actually checking the adjunct feature bun-dle).
A CH feature advertises that the verb had pre-viously merged with a compatible noun, since uni-fication would have given the noun?s features to theCH feature bundle.In this case, tametsi does have a CH feature bun-dle that appears compatible with sis, but UNCH fea-tures are not features that cause adjunctions in oursystem.
We propose a minimal stipulation that willsolve this problem:(24) UNCH features (i.e., features that indicate arequirement for a constituent) can be movedor merged to meet compatible CH features.The main problem with 24 is the possibility thatunnecessary movements caused by UNCH featuresmay occur in such a way that the UNCH featurewould be moved out of the way of compatible unchfeatures.But this is likely not a problem.
Our systemprefers to exhaust all possible movements beforemergers in parsing.
So, if an UNCH feature had beenin the tree, and an unch feature is introduced laterat the root (as specified in Sayeed and Szpakow-icz (2004)), the constituent containing the UNCHfeature would immediately have moved to claim it.Then if a compatible CH feature arrived, it wouldnot matter, since the UNCH feature would itselfhave been checked.
But if a compatible CH featurehad been in the tree before the compatible unch fea-ture had joined, what then?
The constituent contain-ing the UNCH feature would move to join it.
Thenthe unch feature would join the tree.
It would stillcommand the UNCH feature, which would move toclaim it.There is only one unsafe case: if the CH featurearrives before the unch feature, and it is part of ahead whose constituents contain a compatible unchfeature on the wrong constituent, then the UNCHfeature would be checked with the wrong constituentaccording to the mechanism above.
After all, theUNCH feature would command the incorrect unchfeature.
This possibility, however, can only exist ifthere is another displaced item in the tree containingthe original CH that is compatible with the UNCHfeature but displaced from some other phrase.
Thisrequires further investigation into Latin grammar, asit seems unlikely that such constructions exist, giventhe rarity of displacement in the first place.101So let us implement our solution:(25) [tametsi {CH(Disc:Focus, Case:Nom, Pers:2, Num:Sg),CH(Type:V)}][sis {UNCH?
(Case:Nom, Pers:2, Num:Sg),CH(Case:Acc, Gen:Masc, NumSg) ?
ch(Type:V)}]sis[curiosus ch(Case:Acc, Gen:Masc, Num:Sg)] |tametsitametsitametsi[tu {ch(Disc:Focus)?
unch(Case:Nom, Pers:2, Num:Sg)}][scio {UNCH?
(Case:Nom, Pers:1, Num:Sg),CH(Wh:0) ?
ch(Type:V)]scio[quam {UNCH?
(Disc:Focus), CH(Type:V) ?
ch(Wh:0)}]quam<sis>Note that the maximal projections move, not theheads of constituent trees.
The maximal projectionsare the highest node containing the features, and wealways take the highest node according to Sayeedand Szpakowicz (2004).
Now sis commands tu.
Wecan move tu.
(26) [tametsi {CH(Disc:Focus, Case:Nom, Pers:2, Num:Sg),CH(Type:V)}][sis {CH(Case:Nom, Pers:2, Num:Sg),CH(Case:Acc, Gen:Masc, NumSg) ?
ch(Type:V)}][tu {ch(Disc:Focus) ?
ch(Case:Nom, Pers:2, Num:Sg)}]sissis[curiosus ch(Case:Acc, Gen:Masc, Num:Sg)] |tametsitametsitametsi<tu>[scio {UNCH?
(Case:Nom, Pers:1, Num:Sg),CH(Wh:0) ?
ch(Type:V)]scio[quam {UNCH?
(Disc:Focus), CH(Type:V)?
ch(Wh:0)}]quam<sis>All optional unchecked features have been elimi-nated, and the derivation is complete.4 Conclusions and Future WorkUsing the system of Sayeed and Szpakowicz (2004),we have demonstrated a means to parse sentenceswith constituents extracted from embedded clausesfor prosodic reasons in Latin?constituents that ap-pear to be able to escape even subject islands.
Wewere able to maintain the adjacency requirement ofour system by making use of discourse features in-spired by Rizzi?s analysis of the left periphery inItalian in a GB framework.
Thus, this highly con-strained incremental system was able to parse a sen-tence with a long-distance displacement.In order to do it, though, we had to add a stip-ulation to the system to allow the constituent thatrequired the displaced one to move to a command-ing position.
We also took no heed to cyclicity inthis system, which given the apparent island viola-tion permitted by these constructions, may not seemso bad, especially since the displaced constituentonly moves over one CP in the examples we gave.But Kessler finds that there are rare examples whereit moves over two CPs.
Of course, these cases areeven more rare than displacement over a single CP.It could be that the difficulty in violating subjacencyis what makes these cases rare, but the checking ofthe discourse feature that causes the displacement ismore important.One characteristic of our solution and, indeed,Sayeed and Szpakowicz (2004) in general is thatin order to maintain incrementality, we do not at-tempt to return items displaced during generation totheir original positions.
We still perform only rais-ing, just as in most GB and minimalist accounts ofmovement.
This means that if the constituent of aphrase is higher than its rightful parent in the tree,the lower subtree raises to claim it.
In this case, wehad to stipulate that constituent subtrees searchingfor their own constituents could move to interme-diate locations as adjuncts, something that Sayeedand Szpakowicz (2004) did not specify.
However,we still maintain an essential property of our system:movement happens as soon as possible.
This meansthat the first available compatible intermediate lo-cation is sought.
It becomes an empirical question,then, whether an intermediate position could ever bea wrong position.ReferencesLiliane Haegeman.
1994.
Introduction to Governmentand Binding Theory.
Blackwell, Oxford, 2nd edition.Brett Kessler.
1995.
Discontinuous constituents in latin.http://www.artsci.wustl.edu/?bkessler/latin-discontinuity/discontinuity.ps.Luigi Rizzi.
1997.
The fine structure of the left periph-ery.
In L. Haegeman, editor, Elements of Grammar,pages 281?337.
Kluwer, Dordrecht.Asad Sayeed and Stan Szpakowicz.
2004.
Develop-ing a minimalist parser for free word order languageswith discontinuous constituency.
In Jose?
Luis Vicedo,Patricio Mart?
?nez-Barco, Rafael Mun?oz, and Maxim-iliano Saiz, editors, EsTAL?Espan?a for Natural Lan-guage Processing.
Springer-Verlag.Edward P. Stabler.
2001.
Minimalist grammars andrecognition.
In Christian Rohrer, Antje Ro?deutscher,and Hans Kamp, editors, Linguistic Form and its Com-putation.
CSLI Publications, Stanford.102
