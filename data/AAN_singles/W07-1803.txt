Proceedings of SPEECHGRAM 2007, pages 17?24,Prague, Czech Republic, June 2007. c?2007 Association for Computational LinguisticsDialogue System Localization with the GF Resource Grammar LibraryNadine PereraDepartment of Man Machine InteractionBMW Group Research and TechnologyMunich, Germanynadine.perera@bmw.deAarne RantaDepartment of Computing ScienceChalmers University of Technologyand Go?teborg UniversityGothenburg, Swedenaarne@cs.chalmers.seAbstractWe present two experiments in the localiza-tion of spoken dialogue systems.
The do-main of the dialogue system is an MP3 ap-plication for automobiles.
In the first expe-riment, a grammar in Nuance GSL formatwas rewritten in Grammatical Framework(GF).
Within GF, the grammar was extendedfrom two to six languages, giving a baselinefor semantically complete grammars.
In thesecond experiment, the German version ofthis baseline GF grammar was extended withthe goal to restore the coverage of the origi-nal Nuance grammar.1 CreditsPart of this work was done under the TALK1 re-search project, funded by EU FP6 [ref.
507802].The Nuance grammar was written by JochenSteigner, Peter Poller, and Rosemary Stegmann.
Thefirst GF experiment was made together with Bjo?rnBringert.
The Spanish grammar was written to-gether with Libertad Tansini.2 IntroductionSpoken dialogue systems for cars emerged in the late1990s with the appearance of advanced informationand communication systems.
Driving a car is a clas-sical visual manual task, as the driver should keephis hands on the steering wheel and his glance on thesurrounding traffic and the street.
Speech interactionis very well-suited for secondary-level tasks such ashandling information and entertainment systems.The current spoken dialogue system inthe automobiles of the BMW Group is a1Tools for Ambient Linguistic Knowledge, www.talk-project.orgCommand&Control-based system (Hagen etal., 2004).
For the interaction with the entertain-ment and information functions of the iDrive system(Haller, 2003), the paradigm pursued is You-Can-Speak-What-You-See, i.e.
every menu item oroption that is shown on screen can be spoken.The localization of that spoken dialogue systemfor currently eight languages is done manually bytranslators, without advanced automation methodsor special tools.
The Command&Control-basedapproach has its disadvantages, as the system canonly handle a fix set of commands.
This makesit difficult for system novices to interact with thedialogue system because they may not know thecommands they need to say to reach their goal.Advanced conversational dialogue systems thatallow a more flexible input and let the user decideabout the form and the amount of the communi-cated information are being investigated.
In orderto implement such a flexible spoken dialogue sys-tem in the automobiles of the BMW Group, not onlyone dialogue system, but at least eight would haveto be built - one for each language.
The different,localized versions of the system would have to bedesigned in a way that allows for the generic ad-dition of use cases, i.e.
changes and additions tothe German grammar (which is viewed as the ini-tial source grammar) must be ported to the localizedversions consistently and without the need to changethe whole localized grammar.2.1 Grammar WritingLinguistic experts who write grammars for compa-nies whose focus is not in language technology usu-ally have to possess profound technical competenceand programming skills in addition to linguistic ex-pertise.
For those grammar engineers who are com-puter scientists or engineers with little university ed-17ucation in linguistics, a programming paradigm en-abling them to avoid dealing with the morphologi-cal inflection paradigms of several languages wouldcertainly be welcome.
Writing consistent grammarsfor multiple languages is quite challenging: Writingone grammar requires the grammar engineer to beat least a fluent speaker of the language the gram-mar covers.
If he also knows another language quitewell, he may be able to localize a grammar from thatlanguage to his native language.
This implies thatfor every language which requires a localized gram-mar, a person who knows the source language and isa native speaker of the target language is needed.
Atthe moment, there is no commercial tool availablethat helps grammar engineers with the localizationof spoken dialogue systems.2.2 The Nuance SAMMIE grammarWithin the TALK project, an in-car spoken dialoguesystem for the MP3 domain was created and inte-grated into a BMW 3-Series Coupe (Becker et al,2007).
For the speech understanding component,a German corpus named SAMMIE (SAarbru?ckenMulti-Modal Interface Experiment) was collectedby Saarland University and DFKI2 using a Wizardof Oz experiment.A grammar in Nuance GSL format was written tospecify well-formed sentences complying with thecorpus data.
The GSL formalism is a variant ofBNF (context-free grammar), with Extended BNFadditions such as disjunctions and Kleene closures.The grammar was structured according to syntacti-cal motivations and interaction type coherence.
Tominimize overgeneration, nonterminals were instan-tiated with usual grammatical features.
For instance,genitive definite forms of artist expressions weregenerated by the disjunctionNP_ARTIST_CASE_GEN[(DET_NUM_SING_CASE_GEN_GEND_NEUTN_ARTIST_NUM_SING_CASE_GEN_GEND_MASC)(DET_NUM_SING_CASE_GEN_GEND_FEMN_ARTIST_NUM_SING_CASE_DATIV_GEND_FEM)]For a more detailed description of the grammar, see(Becker et al, 2007).The German Sammie grammar in Nuance for-mat (NuanceGer) was checked and extended contin-uously while the dialogue system was built.
User2German Research Center for Artificial Intelligenceevaluation results were analyzed and missing utter-ances were added to the grammar.
In addition tothat, an English version of the grammar, called ?Nu-anceEng?
here, was built by a near-native speaker ofEnglish.
This grammar is the starting point for ourexperiments.
Figure 1 shows a graph of the gram-mar development for the first experiment, Figure 2for the second experiment.2.3 Outline of the paperSection 3 gives an introduction to GF and its re-source grammar library, by working through the im-plementation of a fragment of the Sammie gram-mar.
Section 4 describes the first experiment, inwhich a baseline Sammie grammar was ported to sixlanguages.
Section 5 describes the second experi-ment, in which the German grammar was extendedtowards the coverage of the original grammar.
Sec-tion 6 concludes with statistics on the experiments,related work, and some general lessons learnt.3 Multilingual grammars in GFGF (Grammatical Framework, (Ranta, 2004)) is agrammar formalism based on ideas from type the-ory and functional programming.
Originally de-signed for written technical documents, GF focuseson language-independent semantic representationsand their multilingual renderings.
These featureshave proved useful in dialogue systems as well, anda support for dialogue applications is completed bytranslators from GF to various speech recognitionformats, such as Nuance (Bringert, 2007).A grammar, in the sense of GF, has an abstractsyntax and a set of concrete syntaxes.
The abstractsyntax is a semantic description of an applicationdomain.
Each concrete syntax is a mapping of thesemantics into a language, typically a natural lan-guage.
To give an example from the GF implemen-tation of the Sammie grammar, the abstract syntaxhas objects such asidentify ( currently_playing_object )The six concrete syntaxes map the abstract objectinto the stringsvad heter den ha?r sa?ngenwie hei?t dieses liedcomment s?appelle cette chansoncomo se llama esta cancio?nmika?
on ta?ma?n laulun nimiwhat is the name of this song18of Swedish, German, French, Spanish, Finnish, andEnglish, respectively.The abstract syntax is specified by a set of cate-gories (cat) and constructor functions (fun), inthe same way as an inductive family of datatypes ina functional programming language.
Here is a frag-ment of the Sammie abstract syntax, with five cate-gories and five constructor functions:catAction ; ToIdentify ; Object ;Playlist ; Artist ;funcreate : Action ;identify : ToIdentify -> Action ;play : Object -> Action ;remove : Playlist -> Object -> Action ;currently_playing_object : ToIdentify ;The concrete syntax is specified by defining a lin-earization type (lincat) for each category, aswell as a linearization function (lin) for each con-structor.
A baseline concrete syntax can be obtainedby just assigning the type of strings to each category,and defining:lincatAction, ToIdentify,Object, Playlist, Artist = Str ;lincreate = ["create a new playlist"] ;identify x = x ;play = "play" ++ x :remove x y = "remove"++ y ++"from"++ x ;currently_playing_object =["what is the name of this song"] ;A concrete syntax like this is essentially a systemof templates with chunks of canned text.
While itis easy to produce for small applications, it doesnot scale up well, especially in languages that haverich morphology and require agreement in syntacticstructures.
Thus GF also supports user-defined pa-rameter types, which can be used to control inflec-tion and word order in linearization.
For instance,the German version of the above grammar needs atype of Case, and the linearization of Object andPlaylist depends on case:lincatObject, Playlist = Case => Str ;linremove x y = "nimm" ++ y !
Acc ++"aus" ++ x !
Dat ++ "heraus"3.1 The GF resource grammar libraryHaving to think about parameters requires linguis-tic knowledge from the grammar writer.
Moreover,accurate descriptions tend to become long and com-plex.
The GF solution to this problem is a resourcegrammar library.
Like any software library, thislibrary can be used via a high-level API (an abstractsyntax for linguistic structures) that hides the im-plementation details (the concrete syntaxes for eachlanguage).
The GF resource grammar library is cur-rently available for 10?15 languages (10 languagessupport the full API, 5 just parts of it).
Its first ap-plications were in the domain of written technicallanguage (Burke and Johannisson, 2005, Caprotti etal., 2006), but its use was extended to spoken dia-logue systems in the TALK project (Johansson 2006,Ljunglo?f & al.
2006).Let us rewrite the Sammie grammar fragment byusing the library,lincatAction = Phr ; -- phraseToIdentify = QS ; -- questionObject, Playlist,Artist = NP ; -- noun phraselincreate = imperative (mkVP create_V2(indef (mkCN new_A playlist_N))) ;identify x = mkPhr x ;play x = imperative (mkVP play_V2 x) ;remove x y =imperative (mkVP remove_V3 y x);currently_playing_object =mkQS whatSg_IP (mkNP name_N2(mkNP this_Quant song_N)) ;This grammar uses the language-independentresource grammar API with categories suchas Phr, QS, NP and constructors such asmkVP, indef, this_Quant.
The onesprovided by the resource grammar are syntacticcombination rules and structural words, which areindependent of the domain of application.In addition to the resource API ele-ments, a concrete syntax also needs a lex-icon of domain-specific words, such asnew_A, play_V2, remove_V3 above.The resource library provides for each languagea set of operations for constructing lexical entrieswith all morphosyntactic information they need.Thus the three mentioned objects are defined asfollows in English:new_A = regA "new" ;play_V2 = dirV2 (regV "play") ;remove_V3 = dirV3(regV "remove") from_Prep ;Here are the German definitions:19new_A = regA "neu" ;play_V2 = dirV2 (regV "spielen") ;remove_V3 = dirV3(prefixV "heraus" nehmen_V) aus_Prep ;The lexicon definitions are gathered into a separateinterface module, which the concrete syntax mod-ule depends on.
All that is needed to add a new lan-guage to the system is a new implementation of theinterface module, with lexical entries belonging tothat language.3.2 Beyond baseline grammarsA baseline multilingual grammar system can beobtained by defining the syntax in a language-independent way using the resource API, and onlyletting the lexical entries vary from one languageto another.
Such a system is guaranteed to begrammatically correct, as regards to word orderand agreement.
But the different languages of-ten come out unidiomatic.
For instance, theabove rule for currently_playing_objectproduces the translationsvad a?r namnet pa?
den ha?r sa?ngenwas ist der name von diesem liedquel est le nom de cette chansonmika?
on ta?ma?n laulun nimiwhat is the name of this songThese translations are OK for Finnish and English,but very clumsy for the rest of the languages, whichhave special verbs for expressing the name of a sub-ject (the proper forms were shown above; the clos-est corresponding English idiom is what is this songcalled).Fortunately, GF is a functional programming lan-guage that permits functions, instead of just words,to appear in an interface.
An improved way to im-plement the rule above islin currently_playing_object =mkQS (what_name(mkNP this_Quant song_N))where the function what_name has different im-plementations in different languages: here, for in-stance, German and English:what_name x =mkQCl how_IAdv (pred hei?en_V x)what_name x =mkQCl whatSg_IP (mkNP (regN2 "name") x)A similar refinement is needed in the GF Sam-mie grammar to express imperatives.
A baseline,language-independent definition would beimperative vp = UttImpSg vpwhich produces the second-person singular impera-tive form of a verb phrase.
In German, as shown bythe corpus collected for Sammie, both the familiarsingular and the polite imperative are appropriate,and should be accepted in user input.
GF has thevariants construct to express such free variation:imperative vp = variants {UttImpSg vp ;UttImpPol vp}When extending the different languages of the Sam-mie grammar in GF, above the baseline, adding vari-ants was the prominent method used.3.3 Using GF in dialogue systemsIn the TALK project, GF was used for building vari-ous components of dialogue systems at three differ-ent sites.
The most relevant features of GF in thiswork were the following:?
a common abstract syntax guarantees that thesame semantics is implemented for all lan-guages?
the resource grammar library makes it easier toport systems to new languages?
the GF grammar compiler supports the produc-tion of many other formats from the GF sourceThe first two features have been covered in the pre-ceding sections.
The third feature, the grammarcompiler, is what in practice can integrate GF in thework flow of different projects.
Language modelsfor speech recognition are the most crucial formatsin dialogue systems.
GF supports several such for-mats, including the GSL format used in the Nuancesystem, which in turn is used in the Sammie dia-logue system.
Porting the Sammie grammar to newlanguages with GF would thus automatically pro-duce the required speech recognition grammars.4 The first experimentThe starting point of the work was Nuance-Sammie,a pair of hand-written Nuance grammars used in theSammie system, one for English (NuanceEng) andone for German (NuanceGer).
The goal was to pro-duce GF-Sammie, a GF grammar with the same cov-erage as Nuance-Sammie, but for more languages.20This was to be produced by using the resource gram-mar library, and share as much code as possible be-tween the languages.The experiment was aimed to test the hypothesesthat a grammar for basic communication is easy toproduce using the library; adding a new languageshould be a matter of a few hours.Figure 1: First experiment: The baseline grammardevelopment.
The modules on the left are hand-written Nuance grammars used in the Sammie sys-tem.
The module in the middle is a GF abstractsyntax defining the semantics implicit in the Nuancegrammars.
The modules on the right are GF con-crete syntaxes implementing the semantics in a min-imal but complete way.4.1 The phases of the workBefore the baseline grammar, an abstract syntaxmust of course be produced.
It was written by Bjo?rnBringert on the basis of NuanceEng, which wasrichly commented with information indicating whatactions should be covered by the grammar.
The ab-stract syntax was produced in five hours, which in-cludes the work needed to write a string-based En-glish concrete syntax to test the abstract syntax.To prepare for a multilingual localization, thestring-based English concrete syntax was first glob-alized by rewriting it in terms of the recource gram-mar API and moving lexical items and some otherobviously English-dependent constructs to an inter-face.
This work took two hours.After the globalization, the grammar was local-ized by writing new instances of the interface.
Thiswas done for Swedish, Finnish, French, and Ger-man.
The work took half an hour for each language.Did we now have a satisfactory baseline gram-mar for five languages?
This was tested by gen-erating sentences in all languages, and led to somefine-tuning to get satisfactory (grammatical and id-iomatic) results.
But now we did have a grammarthat permitted user input in five languages, with thesame semantics as NuanceEng, but with more lim-ited variation in expressions.
Spanish was addedlater to the system.
Summary of the time consump-tion for this work is as follows:?
abstract syntax and string-based English: 5h?
globalized English by use of resource API: 2h?
five new languages: 5hA baseline grammar, as we have defined it, coversthe abstract syntax with a minimal, grammaticallycorrect and stylistically acceptable concrete syntax.Such a grammar can be used for communication byusers who are willing to learn to speak in a certainway.
Notice that this can still be richer than a Com-mand&Control system, because the dialogue man-ager is based on the language-independent abstractsyntax and works quite as well with a minimal con-crete syntax.The next phase was to grow the coverage of oneof the baseline grammars, SammieGer Baseline, tomatch the corpus defined by NuanceGer.
This workwas expected to take a few days, as carried out by anon-linguist programmer who first had to learn GF.5 The second experimentAs expected, the SammieGer Baseline grammarcovered less user utterances than the NuanceGergrammar.
The purpose of our experiment was to findout how much time and effort a GF-novice grammarengineer needed to extend the SammieGer Baselinegrammar to match the coverage of the NuanceGergrammar.
The top level grammars involved can beseen in Figure 2.Figure 2: Second experiment: The SammieGerBaseline was extended to SammieGer Extended, tomatch the coverage of the original NuanceGer.215.1 Experimental planFor the extension of the SammieGer Baseline gram-mar, we were in the fortunate position of alreadyhaving a grammar at hand that defined the termi-nal symbols and the grammar rules which the Sam-mieGer Extended grammar would have to include.We planned the extension experiment in the follow-ing way: Comparing the coverage of SammieGerwith the original NuanceGer grammar by generatingsentences from the Nuance grammar and checkingif they are covered by the GF grammar.
If a gener-ated sentence is grammatically correct but containswords that are missing in the lexicon, the GF lexiconhas to be extended.
If the syntactic structure is notcovered, the concrete syntax has to be extended, andif the semantic structure of the sentence is missingin the abstract grammar, it has to be added.5.2 Adding words to the lexiconBefore generating sentences from the NuanceGergrammar, we started with a simple word count.
TheNuanceGer grammar contained 463 single words,counting all inflected forms of the same stem indi-vidually.
The SammieGer Baseline grammar con-tained 100 words, so it was clear that our first actionhad to be the extension of the SammieGer lexicon.Wherever this was possible using the variants con-struct (cf.
Section 3.2), i.e.
when adding a word thatis a synonym of a word which was already modeledin the SammieGer grammar, this was most comfort-able.
46 words could be added in this fashion, thistime counting morphological infinitive forms thatadded more than one inflected form to the grammar.In fact, the 46 infinitive forms extended the wordcount to 215, so that the adding of 46 infinitives ex-tended the grammar by 115 inflected word forms.Some of these words had to be added becausethe starting point for the SammieGer Baseline gram-mar was in fact an English (NuanceEng) grammar.When translating from German to English, somewords got lost, for instance, the words ?Sa?nger?
and?Sa?ngerin?
united to the word ?singer?
in English,as there is no gender distinction in English.
Theword ?Sa?ngerin?
is missing in the SammieGer Base-line grammar, as ?Sa?nger?
only becomes translatedto ?singer?.Another source of words are verbs with their re-spective removable prefixes.
German is rich in pre-fixes that can be combined with verbs to gain newmeanings, for instance ?an-gehen?, ?auf-gehen?,?aus-gehen?
[...], which are all related verbs shar-ing word stem and inflection paradigms, but eachmean something else.
These prefixes can be severedfrom the verb in certain utterances, and fortunately,GF accounts for that.
By extending play V (cmp.above) to:play_V2 = variants {dirV2 (regV "spielen") ;dirV2 (prefixV "ab" (regV "spielen"))} ;the extended grammar is able to parse an utterancelike ?spiele einen Titel von U2 ab?
(?play a title byU2?
), as well as an utterance without the ?ab?
in theend.
The linearization rules in GF place the severedprefix in the syntactically correct position.There were also words missing from the Sam-mieGer Baseline grammar that could not be includedwith a simple variants construct.
They were added tothe lexicon under new identifiers and integrated intothe concrete grammar by writing new linearizationrules.
In order to accomodate some of the missingwords, new abstract syntax rules had to be defined.5.3 Adding rules to the concrete grammarOne example of additions to the concrete syntax arethe rules for interrogative and infinitive forms.
Ut-terances follow certain patterns which are also re-flected in the NuanceGer grammar (see Table 1 foran overview).
In the Baseline SammieGer, onlythe imperative construct was modeled.
The detourwe took in localizing the system over English ac-counts for one missing utterance type: the infinitiveand the imperative type are identical in English, butnot in German.
The interrogative forms are phrasedlike questions, but contain an implicit but politelyexpressed imperative.
We managed to include theother utterance types by adding four rules to the con-crete SammieGer grammar and renaming rule iden-tifiers in one referenced library grammar.5.4 Adding rules to the abstract grammarSome user intentions modeled in the NuanceGergrammar were missing in the abstract SammieGerBaseline grammar, for instance scrolling a list pre-sented on the screen up or down.
These additions22Table 1: Utterances Types.
The types of user utterances for German and English.
Note that the imperativeand the infitive forms in are the same in English, but not in German.Type German Example English ExampleImperative Spiele Vertigo von U2.
Play Vertigo by U2.Interrogative Kannst du Vertigo von U2 spielen?
Can you play Vertigo by U2?Indicative Ich mo?chte Vertigo von U2 ho?ren.
I want to listen to Vertigo by U2.Infinitive Vertigo von U2 spielen.
Play Vertigo by U2.took one day to accomplish.
Summary of the timeneeded for the grammar extension is as follows:?
Installing and learning GF: 4 days?
Adding words: 3 days?
Adding concrete syntax rules: 3 days?
Adding abstract syntax rules: 1 day6 ResultsIn this section, we compare the SammieGer Base-line/Extended and the NuanceGer grammar.The goal set for the first experiment to build pro-totypical grammars for six languages was fulfilledquite successfully.
However, the aim of the secondexperiment to match the coverage of the NuanceGergrammar with the SammieGer Extended grammarwas not reached as quickly as we had hoped.
Ittook a substantial time for the programmer to learnGF well, and the the development cycle was sloweddown by fairly long compilation times.
The resourcelibrary was difficult to navigate and contained somebugs that were fixed during the experiment, whichcaused waiting time.
Nevertheless, the SammieGerExtended grammar?s coverage increased consider-ably compared to SammieGer Baseline.
Moreover,most of the extensions made to the German gram-mar can be ported to the other languages with verylittle work, due to the common resource library API.6.1 StatisticsThe original German grammar NuanceGer was writ-ten in approximately 18 days.
In the GF experi-ments, 12 hours were needed to create the six base-line grammars from the NuanceEng original, andabout 7 days for the SammieGer Extended grammar(not counting the time needed for installation andlearning to use GF).
If we sum up the SammieGerBaseline and the SammieGer Extended grammarwriting time, we end up with 8 days for the Sam-mieGer combined.
This is faster than the 18 daysspent on the original NuanceGer grammar, but wehad of course the advantage of already having Nu-anceGer available: its authors had to start fromscratch and continuously add words and rules af-ter user evaluations.
Moreover, the full coverageof NuanceGer was not reached, mostly because ofcolloquial forms of speech that were not covered bythe resource library.
Statistics of the coverage of thethree grammars (SammieGer Baseline, SammieGerExtended, and NuanceGer) can be seen in Table 2.6.2 Related workThe idea of generating speech recognition gram-mars from higher-level formats was first imple-mented in the Regulus system (Rayner et al, 2006).The source format of Regulus is a unification-basedgrammar formalism, and the target is GSL (the for-mat used in Nuance); GF supports many other for-mats as well, such as the SLF format used in HTK(Young et al, 2005); see (Bringert, 2007).
Regulusalso has a resource grammar library currently cover-ing five languages.GF was previously used for dialogue system lo-calization in the TALK project, where seven lan-guages were covered (Johansson, 2006, Ljunglo?f etal., 2006).6.3 ConclusionGF provides elegant solutions for many grammarwriting challenges.
Based on the concept of one ab-stract and many concrete grammars for different lan-guages, GF is well-suited for localization tasks andfast prototyping in multiple languages.
One disad-vantage of GF is that it is quite difficult to get a grasp23Table 2: Statistics of SammieGer Baseline, SammieGer Extended, and the original Nuance.Grammar Baseline Extended Originaltop-level constructors 18 23 ?23syntactic categories 17 17 419German - specific source code 4kB 18kB 200kBGerman + generic source code 14kB 33kB 200kBNuance code 18kB 31kB 200kBdistinct words 100 325 463of the framework quickly, compared to the conceptof a context free grammar format in BNF or EBNFform which is easier to understand, for computer sci-entists as well as for linguists.
As GF is more ofa programming language than a grammar format, itimplements much more constructs than BNF, whichalso makes it more powerful.
That power can beseen in the comparison of source code size betweenNuanceGer and SammieGer Extended in Table 2.The elegance of the many resource files that hidethe complexity leads to difficulties in error detection,as there is a tree of resource grammars referencingother grammars and to the novice programmer, it isnot always transparent where an error occurred.
Thisis of course a problem with all high-level program-ming languages using libraries.
A more intuitiveIDE and faster compilation times could improve thesystem?s usability significantly.Grammatically correct utterances can be modelednicely in the GF resource grammar library, whichalso eliminated some of the grammatical errorspresent in the original hand-coded Nuance grammar.However, some spoken language oriented rules werenot covered by the library, and were implementedby brute force by using strings in GF.
In this expe-riment, the resource grammar was taken as it was(apart from bug fixes), and no new functions wereadded to it.ReferencesT.
Becker, N. Blaylock, C. Gerstenberger, A. Korthauer,N.
Perera, M. Pitz, P. Poller, J. Schehl, F. Steffens, R.Stegmann, and J. Steigner (Editor).
2007.
TALK De-liverable D5.3: In-Car Showcase Based on TALK Li-braries.B.
Bringert.
2007.
Speech Recognition GrammarCompilation in Grammatical Framework.
SPEECH-GRAM 2007, Prague, 29 June 2007.D.
Burke and K. Johannisson.
2005.
Translating For-mal Software Specifications to Natural Language / AGrammar-Based Approach.
P. Blache, E. Stabler, J.Busquets and R. Moot (eds).
Logical Aspects of Com-putational Linguistics (LACL 2005).
LNCS/LNAI3407, pages 51?66.O.
Caprotti.
2007.
WebALT!
Deliver Mathematics Ev-erywhere.
Proceedings of SITE 2006.
Orlando March20-24.E.
Hagen, T. Said, and J. Eckert.
2004.
Spracheingabeim neuen BMW 6er.
ATZ.R.
Haller.
2003.
The Display and Control ConceptiDrive - Quick Access to All Driving and ComfortFunctions.
ATZ/MTZ Extra (The New BMW 5-Series), pages 51?53.A.
Ranta.
2004.
Grammatical Framework: A type-theoretical grammar formalism.
Journal of FunctionalProgramming,14(2):145?189.M.
Johansson.
2006.
Globalization and Localization ofa Dialogue System using a Resource Grammar.
Mas-ter?s thesis, Go?teborg University.P.
Ljunglo?f, G. Amores, R. Cooper, D. Hjelm, O. Lemon,P.
Mancho?n, G. Pe?rez, and A. Ranta.
2006.
Multi-modal Grammar Library.
TALK Talk and Look: Toolsfor Ambient Linguistic Knowledge IST-507802 Deliv-erable 1.2bM.
Rayner, P. Bouillon, B.
A. Hockey, and N.Chatzichrisafis.
2006.
REGULUS: A Generic Mul-tilingual Open Source Platform for Grammar-BasedSpeech Applications.
In Proceedings of LREC, 24-26May 2006, Genoa, Italy.S.
Young, G. Evermann, M. Gales, T. Hain, D. Kershaw,G.
Moore, J.
Odell., D. Ollason, D. Povey, V. Valtchev,and P. Woodland.
2005.
The HTK Book (for HTK Ver-sion 3.3).
Cambridge University Engineering Depart-ment.24
