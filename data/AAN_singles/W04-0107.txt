Unsupervised Induction of Natural Language Morphology Inflection ClassesChristian Monson, Alon Lavie, Jaime Carbonell, Lori LevinLanguage Technologies InstituteCarnegie Mellon University5000 Forbes Ave.Pittsburgh, USA 15213{cmonson, alavie+, jgc+, lsl+}@cs.cmu.eduAbstractWe propose a novel language-independentframework for inducing a collection of mor-phological inflection classes from a monolin-gual corpus of full form words.
Our approachinvolves two main stages.
In the first stage,we generate a large data structure of candidateinflection classes and their interrelationships.In the second stage, search and filtering tech-niques are applied to this data structure, toidentify a select collection of "true" inflectionclasses of the language.
We describe the basicmethodology involved in both stages of ourapproach and present an evaluation of ourbaseline techniques applied to induction ofmajor inflection classes of Spanish.
The pre-liminary results on an initial training corpusalready surpass an F1 of 0.5 against idealSpanish inflectional morphology classes.1 IntroductionMany natural language processing tasks, such asmorphological analysis and parsing, have maturesolutions when applied to resource-rich Europeanand Asian languages.
Addressing these same tasksin less studied low-density languages, however,poses exciting challenges.These languages have limited available re-sources: with perhaps a few million speakers thereis likely no native speaker linguist and frequentlythere is little electronic text readily available.
Tocompound the difficulties, while low-density lan-guages abound, comparatively little financial re-sources are available to address their challenges.These considerations suggest developing systemsto automatically induce solutions for NLP tasks innew languages.The AVENUE project (Lavie et al 2003; Car-bonell et al, 2002; Probst et al, 2002) at CarnegieMellon University seeks to apply automatic induc-tion methods to develop rule-based machine trans-lation systems between pairs of languages whereone of the languages is low-density and the other isresource-rich.
We are currently pursuing MT sys-tems with Mapudungun, an indigenous languagespoken by 900,000 people in southern Chile andArgentina, and Aymara, spoken by 3 million peo-ple in Bolivia, Peru, and northern Chile, as low-density languages and Spanish the resource richlanguage.A vital first step in a rule-based machine transla-tion system is morphological analysis.
This paperoutlines a framework for automatic natural lan-guage morphology induction inspired by the tradi-tional and linguistic concept of inflection classes.Additional details concerning the candidate inflec-tion class framework can be found in Monson(2004).
This paper then goes on to describe oneimplemented search strategy within this frame-work, presenting both a simple summary of resultsand an in depth error analysis.While the intent of this research direction is todefine techniques applicable to low-density lan-guages, this paper employs English to illustrate themain conjectures and Spanish, a language with areasonably complex morphological system, forquantitative analysis.
All experiments detailed inthis paper are over a Spanish newswire corpus of40,011 tokens and 6,975 types.2 Previous WorkIt is possible to organize much of the recentwork on unsupervised morphology induction byconsidering the bias each approach has toward dis-covering morphologically related words that arealso orthographically similar.At one end of the spectrum is the work ofYarowsky et al (2001), who derive a morphologi-cal analyzer for a language, L, by projecting themorphological analysis of a resource-rich languageonto L through a clever application of statisticalmachine translation style word alignment prob-abilities.
The word alignments are trained over asentence aligned parallel bilingual text for the lan-guage pair.
While the probabilistic model they useto generalize their initial system contains a biastoward orthographic similarity, the unembellishedalgorithm contains no assumptions on the ortho-graphic shape of related word forms.Next along the spectrum of orthographic similar-Barcelona, July 2004Association for Computations LinguisticsACL Special Interest Group on Computational Phonology (SIGPHON)Proceedings of the Workshop of theity bias is the work of Schone and Jurafsky (2000),who first acquire a list of pairs of potential mor-phological variants (PPMV?s) using an ortho-graphic similarity technique due to Gaussier(1999), in which pairs of words from a corpus vo-cabulary with the same initial string are identified.They then apply latent semantic analysis (LSA) toscore each PPMV with a semantic distance.
Pairsmeasuring a small distance, those whose potentialvariants tend to occur where a neighborhood of thenearest hundred words contains similar counts ofindividual high-frequency forms, are then pro-posed as true morphological variants of one anther.In later work, Schone and Jurafsky (2001) extendtheir technique to identify not only suffixes butalso prefixes and circumfixes by building bothforward and backward tries over a corpus.Goldsmith (2001), by searching over a space ofmorphology models limited to substitution of suf-fixes, ties morphology yet closer to orthography.Segmenting word forms in a corpus, Goldsmithcreates an inventory of stems and suffixes.
Suf-fixes which can interchangeably concatenate ontoa set of stems form a signature.
After defining thespace of signatures, Goldsmith searches for thatchoice of word segmentations resulting in a mini-mum description length local optimum.Finally, the work of Harris (1955; 1967), andlater Hafer and Weiss (1974), has direct bearing onthe approach taken in this paper.
Couched in mod-ern terms, their work involves first building triesover a corpus vocabulary, and then selecting, asmorpheme boundaries, those character boundarieswith high branching count in the tries.The work in this paper also has a strong bias to-ward discovering morphologically related wordsthat share a similar orthography.
In particular, themorphology model we use is, akin to Goldsmith,limited to suffix substitution.
The novel proposalwe bring to the table, however, is a formalizationof the full search space of all candidate inflectionclasses.
With this bulwark in place, definingsearch strategies for morpheme discovery becomesa natural and straightforward activity.3 Inflection Classes as MotivationWhen learning the morphology of a foreign lan-guage, it is common for a student to study tables ofinflection classes.
In Spanish, for example, a regu-lar verb belongs to one of three inflectionclasses?verbs that take the -ar infinitive suffixinflect for various syntactic features with one set ofsuffixes, verbs that take the -er infinitive suffixrealize the same set of syntactic features with asecond set of suffixes, while -ir verbs take yet athird set.Carstairs-McCarthy formalizes the concept of aninflection class in chapter 16 of The Handbook ofMorphology (1998).
In his terminology, a lan-guage with inflectional morphology contains lex-emes which occur in a variety of word forms.Each word form carries two pieces of information:1) Lexical content and2) Morphosyntactic properties.For example, the English word form gave ex-presses the lexeme GIVE plus the morphosyntacticproperty Past, while gives expresses GIVE plus theproperties 3rd Person, Singular, and Non-Past.A set of morphosyntactic properties realizedwith a single word form is defined to be a cell,while a paradigm is a set of cells exactly expressedby the word forms of some lexeme.A particular natural language may have manyparadigms.
In English, a language with very littleinflectional morphology, there are at least twoparadigms, a noun paradigm consisting of twocells, Singular and Plural, and a paradigm forverbs, consisting of the five cells given (with onechoice of naming convention) as the first columnof Table 1.Lexemes that belong to the same paradigm maystill differ in their morphophonemic realizations ofvarious cells in that paradigm?each paradigmmay have several associated inflection classeswhich specify, for the lexemes belonging to thatinflection class, the surface instantiation for eachcell of the paradigm.Three of the inflection classes within the Englishverb paradigm are found in Table 1 under the col-umns labeled A through C.  Each inflection classInflection Classes VerbParadigm A B CBasicblameroamsolveshowsowsawsingring3rd PersonSingularNon-past-/z/blamesroamssolves-/z/showssowssaws-/z/singsringsPast-/d/blamedroamedsolved-/d/showedsowedsawedV?
/eI/sangrangPerfectiveor Passive-/d/blamedroamedsolved-/n/shownsownsawnV?
/?/sungrungProgressive-/i?/blamingroamingsolving-/i?/showingsowingsawing-/i?/singingringingTable 1: A few inflection classes of the Eng-lish verb paradigmcolumn consists of entries corresponding to thecells of the verb paradigm.
Each entry contains aninformal notation for the morphophonemic processwhich the inflection class applies to the basic formof a lexeme and examples of word forms filling thecorresponding paradigm cell.Inflection class A is one of the largest and mostproductive verb inflection classes in English, in-flection class B contains the Perfective/Passivesuffix -/n/, and C is a small ?irregular?
inflectionclass of strong verbs.The task our morphology induction system en-gages is exactly the discovery of the inflectionclasses of a natural language.
Unlike the analysisin Table 1, however, the rest of this paper treatsword forms as simply strings of characters as op-posed to strings of phonemes.4 Empirical Inflection ClassesThere are two stages in our approach to unsu-pervised morphology induction.
First, we define asearch space over a set of candidate inflectionclasses, and second, we search this space for thosecandidates most likely to be part of a true inflec-tion class in the language.
In both stages of ourapproach we intentionally exploit the fact that suf-fixes belonging to the same natural language in-flection class frequently occur interchangeably onthe same stems.4.1 Candidate Inflection Class Search SpaceTo define a search space wherein we hope toidentify inflection classes of a natural language,our algorithm accepts as input a monolingual cor-pus for that language and proposes candidate mor-pheme boundaries at every character boundary inevery word form in the corpus vocabulary.
Wecall each string before a candidate morphemeboundary a candidate stem or c-stem, and eachstring after a boundary a c-suffix.
We define acandidate inflection class (CIC) to be a set of c-suffixes for which there exists at least one c-stem,t, such that each c-suffix in the CIC concatenatedto t produces a word form in the vocabulary.
Forconvenience, let the set of c-stems which generatea CIC, C, be called the adherent c-stems of C; letthe number of adherent c-stems of C be C?s adher-ent size; and let the size of the set of c-suffixes inC be the level of C.  We denote a CIC in this paperby a period delimited sequence of c-suffixes.While CIC?s effectively model suffix substitu-tion on bound stems, we would also like to modelsuffix concatenation onto free stems.
To this end,the set of candidate morpheme boundaries our al-gorithm proposes include those boundaries afterthe final character in each word form.
In this paperwe assume a suffix, which we denote as ?, followsall word form final boundaries.
A CIC containsthe ?
c-suffix when each c-stem in the CIC canoccur, not only bound to other c-suffixes in theCIC, but also as a free stem.
For generality, theboundary before the first character of each wordform is also a candidate morpheme boundary.Table 2 illustrates the type of CIC?s producedby our algorithm.
The CIC?s in this table, arrangedin a systematic but arbitrary order, are each derivedVocabulary: blameblames roamsblamed roamedroaming?.s.dblame?.sblame.solve?.dblames.d s.ed.ing e.es.ingblame roam solvs.ed e.ingroam solvs s.ing es.ingblame.roam.solve roam solvd ed.ing ngblame.roame roam roami.solviing groam.solv roamin.solvinlamebsolvessolveame.ames.amedblme.mes.med e.es.edsolvingoams.oamed.oamingbla blam rme.mes e.es olve.olves.olvingame.amesame.amedbla blam.solv sblme.med e.ed...bla blamblmes.med es.edbla blamme ebla blam.solvamedbl.romes esbla blam.solvblamesmed edbla.roa blam.roam?blame.blames.blamed.roams.roamed.roaming.solve.solves.solvinglame.lames.lamedblame.lamesblame.lamedblames.lamedblamesblamedbblames.amedblameTable 2: Some of the CIC's, arranged in a systematic but arbitrary order, derived from a toy vo-cabulary.
Each entry is specified as a period delimited sequence of c-suffixes in bold above aperiod delimited sequence of adherent c-stems in italicsfrom one or more forms in a small vocabulary con-sisting of a subset of the word forms found underinflection class A from Table 1.
Proposing, as ourprocedure does, morpheme boundaries at everycharacter boundary in every word form necessarilyproduces many ridiculous CIC?s, such asame.ames.amed, from the forms blame, blames,and blamed and the c-stem bl.
Dispersed amongthe incorrect CIC?s generated by our algorithm,however, are also CIC?s that seem very reasonable,such as ?.s, from the c-stems blame and tease.Note that where Table 1 lists all the surfaceforms of the three lexemes BLAME, ROAM, andSOLVE, the vocabulary of Table 2 mimics the vo-cabulary of a text corpus from a highly inflectedlanguage where we expect few, if any, lexemes tooccur in the complete set of possible surface forms.Specifically, the vocabulary of Table 2 lacks thesurface form blaming of the lexeme BLAME, solvedof the lexeme SOLVE, and the root form roam ofthe lexeme ROAM.
Hence, while the reasonableCIC ?.s arises from the pairs of surface forms(blame, blames) and (solve, solves), there is noway for the form roams to contribute to the ?.sCIC because the surface form roam is missingfrom this vocabulary.
In other words, we lack evi-dence for a ?
suffix on the c-stem roam.
Also no-tice that, as a result of English spelling rules, theCIC s.ed generated from the pair of surface forms(roams, roamed) is separate from each of theCIC?s s.d and es.ed generated from the pair of sur-face forms (blames, blamed).Looking at Table 2, it is clear there is structureamong the CIC?s.
In particular, at least two typesof relations hold between CIC?s.
First, hierarchi-cally, the c-suffixes of one CIC may be a supersetof the c-suffixes of another CIC.
For example thec-suffixes in the CIC e.es.ed are a superset of thec-suffixes in the CIC e.ed.
Second, cutting acrossthis hierarchical structure there is structure be-tween CIC?s which propose different morphemeboundaries within the same word forms.
Comparethe CIC?s me.mes.med and e.es.ed; each is de-rived from exactly the triple of word forms blame,blames, and blamed, but differ in the placement ofthe hypothesized morpheme boundary.Taken together the hierarchical c-suffix set in-clusion relations and the morpheme boundary rela-tions impose a lattice structure on the space ofCIC?s.
Figure 1 diagrams the CIC lattice over aninteresting subset of the columns of Table 2.
Hier-archical links, represented by solid lines, connectany given CIC often to more than one parent andmore than one child.
The empty CIC (not picturedin Figure 1) can be considered the child of all levelone CIC?s (including the ?
CIC), but there is nouniversal parent of all top level CIC?s.
Moving upthe lattice always results in a monotonic decreasein adherent size because a parent CIC requireseach adherent c-stem to form a word with a super-set of the c-suffixes of each child.Horizontal morpheme boundary links, dashedlines, connect a CIC, C, with a neighbor to theright if each c-suffix in C begins with the samecharacter.
This entails that there is at most onemorpheme boundary link leading to the right ofeach CIC.
There may, however, be as many linksleading to the left as there are characters in the or-thography.
The only CIC with depicted multipleleft links in Figure 1 is ?, which has left links tothe CIC?s e, s, and d.  A number of left links ema-nating from the CIC?s in Figure 1 are not shown;among others absent from the figure is the left linkfrom the CIC e.es leading to the CIC ve.ves withthe adherent sol.
Since left links effectively dividea CIC into separate CIC?s, one for each characterin the orthography, adherent count monotonicallydecreases as left links are followed.To better visualize what a CIC lattice looks likewhen derived from real data, Figure 2 contains aportion of a hierarchical lattice automatically gen-erated from our Spanish newswire corpus.
Eachentry in Figure 2 contains the c-suffixes compris-ing the CIC, the adherent size of the CIC, and asample of adherent c-stems.
The lattice in Figure 2covers:e.esblamsolve.edblamesblamsolv?.s.dblame?.sblamesolve?blameblamesblamedroamsroamedroamingsolvesolvessolvinge.es.edblamedblamroamdblameroame?.dblames.dblamesblameroamsolvees.edblameblamsolvme.mesblame.medblamesblame.mes.medblamedblaroames.medblameblaFigure 1: Portion of a CIC lattice from thetoy vocabulary in Table 2c-suffix set inclusion linksmorpheme boundary links1) The productive Spanish inflection class foradjectives, a.as.o.os, covering the four adjec-tive paradigm cells: feminine singular, femi-nine plural, masculine singular, and mascu-line plural, respectively,2) All possible CIC subsets of the adjectiveCIC, e.g.
a.as.o, a.os, etc.
and,3) The imposter CIC a.as.o.os.tro, togetherwith its rogue descendents, a.tro, and tro.Other CIC?s that are descendents of a.as.o.os.troand that contain the c-suffix tro do not supply ad-ditional adherents and hence are not present eitherin Figure 2 or in our program?s representation ofthe CIC lattice.
The CIC?s a.as.tro and os.tro, forexample, both have only the one adherent, cas,already possessed by their common ancestora.as.o.os.tro.
Strictly speaking we have simplifiedfor exposition, as the CIC a.as.o.os.tro is not actu-ally present in the algorithm?s representation ei-ther, because the c-stem cas occurred with a num-ber of additional c-suffixes yielding the CIC:a.as.i.o.os.sandra.tanier.ter.tro.trol.4.2 SearchGiven the framework of CIC lattices, the keytask for automatic morphology induction is toautonomously separate the nonsense CIC?s fromthe useful ones, thus identifying linguisticallyplausible inflection classes.
This section treats theCIC lattices as a hypothesis space of valid inflec-tion classes and searches this space for CIC?s mostlikely to be true inflection classes in a language.There are many possible search strategies andheuristics applicable to the CIC lattice, and whilefor future work we intend to explore a variety ofsearch techniques, this paper presents a reasonableand intuitive baseline search procedure.
We haveinvestigated a series of algorithms which buildupon each other.
Each algorithm employs a num-ber of parameters which are tuned by hand.
Theseparameters are only interesting in so far as theyhelp us find true CIC?s from among the many inthe lattice.
The performance of each algorithm isdescribed in section 6.4.2.1 Vertical OnlyTo motivate the general approach we havetaken, compare the adherent sizes of the variousCIC?s in Figure 2.
The target CIC a.as.o.os, corre-sponding to the Spanish adjective inflection class,has 43 adherents.
Its various descendents mustoccur with monotonically increasing adherentsizes, but frequently a child will not more thandouble or triple its immediate parent?s adherentsize, and never is there a difference greater than afactor of ten.
Notice also the large adherent countsof the level one descendents of a.as.o.os, thesmallest is as with 404 adherents.Contrast this behavior with that of CIC?s involv-ing the spurious suffix tro.
The CIC a.as.o.os.trooccurs in the corpus with exactly one adherent,cas.
Additionally, the word forms cena, supper,and centro, center, occur yielding the CIC a.trowith two adherents.
In total tro is the final stringof only 16 individual word forms.In general, we expect that true suffixes in a lan-guage will both occur frequently and occur at-tached to a large number of stems which also ac-cept other suffixes from the same inflection class.These considerations led us to propose three pa-rameters for our basic search strategy:L1 SIZE:  A level one adherent size cutoffTOP SIZE:  An absolute adherent size cutoffRATIO:  A parent-to-child adherent sizeratio cutoffThe L1 SIZE parameter requires a c-suffix to befrequent, while the TOP SIZE and RATIO parame-ters require a suffix to be substitutable for other c-suffixes in a reasonable number of c-stems.a.as.o.os43africancasjur?dicl...a.as.o.os.tro1casa.as.os50afectadcasjur?dicl...a.as.o59cascitadjur?dicl...a.o.os105impuestindonesiitalianjur?dic...a.as199huelgincluidindustriinundad...a.os134impedidimpuestindonesiinundad...as.os68casimplicadinundadjur?dic...a.o214idindiindonesiinmediat...as.o85internjur?dicjustl...a.tro2cascena1237huelgibidiglesi...as404huelghuelguistincluidindustri...os534humor?stichumanh?gadimpedid...o1139hubhughumanhuyend...tro16catascecencua...as.o.os54casimplicadjur?dicl...Figure 2: Hierarchical CIC lattice automati-cally derived from Spanisho.os268humanimplicadindiciindocumentad...We apply these three parameters by beginningour search at the bottom of the lattice.
Each levelone CIC with an adherent count larger than L1SIZE is placed in a list of path CIC?s.
Then foreach path CIC, C, we remove C from the list ofpath CIC?s, and in turn consider each of C?s hier-archical parents, Pi.
If Pi?s adherent size is at leastTOP SIZE, and if the ratio of Pi?s adherent size toC?s adherent size is larger than RATIO, then Pi isplaced in the list of path CIC?s.
If no parent of Ccan be placed in the list of path CIC?s, and if C?slevel is greater than one, then C is placed in a listof selected CIC?s.
When there are no more CIC?sin the list of path CIC?s, the search ends and theCIC?s in the selected list are the CIC?s the algo-rithm believes are true CIC?s of the language.As an illustration suppose we explored the latticein Figure 2 with the following parameter settings:L1 SIZE:  100TOP SIZE:  2RATIO:  0.1Our search algorithm begins by comparing theadherent size of each level one CIC to L1 SIZE.The only level one CIC with an adherent count lessthan 100 is tro with 16 adherents, preventing trofrom being placed in the list of path CIC?s.Each of the surviving level one CIC?s is thenconsidered in turn.
The algorithm comes to theCIC a, where the ratios of adherent sizes betweeneach of its parents a.tro, a.as, a.o, and a.os anditself are 0.002, 0.161, 0.173, and 0.108 respec-tively.
Each of these ratios, except that between aand a.tro, at 0.002, is larger than 0.1.
And sincethe adherent sizes of a.as, a.o, and a.os are eachlarger than TOP SIZE, these three CIC?s are placedin the list of path CIC?s.From this point, every hierarchical link in Figure2 leading to the CIC a.as.o.os passes the TOP SIZEand RATIO cutoffs.
Thus the algorithm reaches astate where the only CIC in the list of path CIC?s isa.as.o.os.
When this good CIC is removed fromthe list of path CIC?s, the algorithm finds that itsonly parent is a.as.o.os.tro with its lone adherent.Since TOP SIZE requires a parent to have at leasttwo adherents, a.as.o.os.tro cannot be placed inthe list of path CIC?s.
As no parent can be placedin the list of path CIC?s, a.as.o.os is placed in thelist of selected CIC?s?which is the desired out-come.
The list of path CIC?s is now empty and thesearch ends.4.2.2 Horizontal BlockingTo improve performance over the Vertical Onlyalgorithm we next incorporated knowledge fromthe horizontal morpheme boundary links.
Monson(2004) describes how morpheme boundary links ina CIC lattice can be thought of as branchings in avocabulary trie where identical subtries are con-flated.
Harris (1955) discusses how the branchingcount in a suffix trie can be exploited to identifymorpheme boundaries.
We extend the spirit ofHarris?
work in our algorithm through the use oftwo search parameters:HORIZ RATIO: A cutoff over:sizeadherentcharacter in  ending adherents of #argmax ccHORIZ SIZE: An adherent size cutoffLeft BlockingIn the first variant of horizontal blocking we ap-ply these two horizontal parameters when consid-ering a CIC, C, removed from the list of pathCIC?s.
If the adherent size of C is larger thanHORIZ SIZE and the maximum percentage of ad-herents of C that end in any one character is largerthan HORIZ RATIO, then C is simply thrown out.For example, suppose we used the followinghorizontal parameter settings:HORIZ RATIO:  0.5HORIZ SIZE:  10The CIC da.do in our Spanish corpus has 62adherents, 46, or a fraction of 0.742, of which endin the character a (ada and ado fill the feminineand masculine past participle cells for the -ar verbinflection class).
If our Left Blocking search algo-rithm reached the CIC da.do, it would be dis-carded because while its adherent size is largerthan HORIZ SIZE more than half of its adherentsend with the same character.
Notice that this algo-rithm does not explicitly follow leftward mor-pheme boundary links.
The rationale for this be-havior is that ada.ado will likely be explored inde-pendently by a separate vertical path.
In futureexperiments we intend to investigate the effect ofensuring that the CIC to the left is explored byovertly placing the leftward CIC in the list of pathCIC?s.Right BlockingSo far we have only described an algorithm toblock paths where the correct morpheme boundaryis to the left of the current hypothesis.
There arealso CIC?s where a morpheme boundary should bemoved to the right.
The CIC cada.cado with sevenadherents is one such.Accordingly, whenever we encounter a CIC, C,all of whose c-suffixes begin with the same charac-ter (e.g.
c in cada.cado) our algorithm poses thequestion, if we were considering the CIC to theright (e.g.
ada.ado) would we have triggered LeftBlocking?
If Left Blocking would not have beentriggered then we throw C out.
In other words, weprefer the rightmost possible morpheme boundary,unless there is some reason to believe the mor-pheme boundary should be to the left.Taking a closer look at cada.cado, the CIC to itsright, ada.ado, has 46 adherents of which the char-acter c ends the most, 7 or a fraction of 0.152.
Ifwe were using a HORIZ RATIO of 0.5 as in the pre-vious section, Left Blocking would not be trig-gered from ada.ado and so Right Blocking is trig-gered, throwing out cada.cado.
On the other hand,if we were considering blocking ada.ado, whereboth c-suffixes begin with a, the HORIZ RATIO pa-rameter would need to be larger than 0.742 beforeright blocking would throw out ada.ado.Right Blocking RecursiveIn addition to standard Right Blocking we ex-plored recursively looking at the next most rightneighbor of a CIC if the immediate right neighborfalls below the HORIZ SIZE threshold.
The ration-ale behind this variant stems from CIC?s such asicada.icado with 4 adherents, crit, publ, ratif, andub.
Since icada.icado?s immediate right neighborcada.cado has only 7 adherents itself we may notwant to base our blocking decision on so little data.Instead we consider the CIC ada.ado, discussed inthe previous section, which has a large enough ad-herent size that we might feel confident in ourjudgment.Full Horizontal BlockingThe final version of the search we tried was tocombine Left Blocking and Right Blocking Recur-sive while constraining both to use the same valuesfor the HORIZ RATIO and HORIZ SIZE parameters.5 EvaluationTo evaluate the performance of the various base-line search strategies, we first decided on a stan-dard set of six inflection classes for Spanish: twofor nouns, ?.s and ?.es, one for adjectives,a.as.o.os, and three for verbs, corresponding to thetraditional -ar, -er, and -ir verb inflection classes.We call these six inflection classes our set of stan-dard IC?s.
We make no claim as to the truth orcompleteness of the set of standard inflectionclasses we used in this evaluation.
The standardIC?s we compiled were simply some of the mostcommon suffixes filling some of the most commonmorphosyntactic properties marked in Spanish.We then defined measures of recall, precision,and fragmentation over these standard IC?s (Figure3).
As defined, recall measures the fraction ofunique suffixes in the standard IC?s that are foundwithin those selected CIC?s that are subsets ofsome inflection class in the standard; precisionmeasures the fraction of unique suffixes among allthe selected CIC?s that are found within those se-lected CIC?s that are subsets of an inflection classin the standard; and fragmentation measures re-dundancy, specifically calculating the ratio of thenumber of selected CIC?s that are subsets of stan-dard IC?s to the number of inflection classes in thestandard.
High values for recall and precision aredesirable, while a fragmentation of exactly 1 im-plies that the number of usefully selected CIC?s isthe same as the number of inflection classes in thestandard.6 Results and Error AnalysisFor each of the search variants described in sec-tion 4.2 we executed a by-hand search over therelevant parameters for those settings that optimizethe F1 measure (the harmonic mean of recall andprecision).
The best performing parameter settingsare presented in Table 3 while quantitative resultsusing these settings are plotted in Figure 4.Examining the performance of each algorithm(Figure 4) reveals that the simple Vertical onlysearch achieves a high precision at the expense of alow recall measure.
The simple Vertical searchalso gives the smallest fragmentation, which, whencombined with the high precision score, indicates aconservative algorithm that selects few CIC?s.
Theparameter settings which achieve the highest F1 forLeft Block alone and Right Block alone each pro-duce much higher recall than the simple Verticalsearch.
Right Block Recursive increases precisionsignificantly over simple Right Block and achievesUUsIC' standardsIC' standardsCIC' selectedof elementsif  of elementsRecall???
?=IICIICCUUsCIC' selectedsIC' standardsCIC' selectedof elementsif  of elementsPrecision???
?=CICCICC{sIC' standardionFragmentat sIC' standardsCIC' selectedif 1if 0 ????
?=ICICICFigure 3: Three performance measures tooptimizethe highest F1 measure of any search variant.While Full Horizontal Block also performs well,sharing the values of HORIZ RATIO and HORIZSIZE forced a compromise between Left Block andRight Block Recursive that did not significantlyoutperform either algorithm alone.Of the 83 unique suffixes in the hand compiledstandard inflection classes, 21 did not share a c-stem with any other c-suffix in the Spanish news-wire corpus used for this evaluation?placing anupper limit on recall of 0.75 for the search algo-rithms presented in this paper.Examining the parameter settings that yieldedthe highest F1 measure for each search variant(Table 3) is also enlightening.
Early experimentswith Vertical only search clearly demonstrated thata TOP SIZE of two, or restricting the CIC?s permit-ted to be selected to those with at least two adher-ents, always resulted in better performance thanother possible settings.
A TOP SIZE of one placesno restriction on the adherent size of a CIC, ram-pantly selecting CIC?s, such as the level 10 CICgiven at the end of section 4.1, that consist ofmany c-suffixes that happen to validly concatenateonto a single c-stem?obliterating reasonable pre-cision.
Higher settings for TOP SIZE induce agraceful degradation in recall.
Thus all experi-ments reported here used a TOP SIZE of two.Beyond TOP SIZE the only parameters availableto the basic Vertical algorithm are L1 SIZE andRATIO, which provide only crude means to halt thesearch of bad paths.
In particular, if a level oneCIC, C, has more than L1 SIZE adherents, and hassome parent which passes the RATIO cutoff, thensome ancestor of C will be selected by the algo-rithm as a good CIC.
Hence, the Vertical only al-gorithm ensures search gets off on the right foot byusing the highest values for the L1 SIZE and RATIOparameters of any algorithm variant.
Performancefalls off quickly above L1 SIZE settings of 192,indicating that this parameter in this algorithm issensitive to the size of the training corpus.In contrast, the horizontal blocking search algo-rithms have additional parameters available to cullout bad search paths, and can hence afford to uselower (and more stable) values for L1 SIZE andRATIO.
Recall that the Left Blocking algorithmdiscards paths determined to be using a morphemeboundary too far to the right, while the RightBlocking algorithm discards paths using mor-pheme boundaries too far to the left.
Notice thatsince, as reasoned in section 4.1, adherent countmonotonically decreases as morpheme boundarylinks are followed to the left, if the L1 SIZE cutoffblocks a particular CIC, C, all CIC?s to the left ofC will also be blocked.
From these facts it followsthat a large L1 SIZE will reject some paths result-ing from morpheme boundaries chosen too far tothe left, which would otherwise have been pursuedin the Left Blocking algorithm.
The Right Block-ing algorithm, however, receives no such benefit,and achieves its best performance by maximizingrecall with a small L1 SIZE.Examining the best performing parameter valuesfor the Right Blocking Recursive algorithm revealsa curious behavior in which low values for L1 SIZEand RATIO allow a permissive vertical search whilestringent values of HORIZ RATIO and, particularly,HORIZ SIZE constrain the search.
One explanationfor these facts might be that following the mono-tonically increasing chain of CIC adherent sizesalong right horizontal links allows the algorithm toFigure 4: Recall, Precision, F1 and Fragmen-tation Results for each search algorithm:Vertical, Left Blocking, Right Blocking,Right Blocking Recursive, andFull Horizontal Blocking0.00.10.20.30.40.50.60.70.80.91.0VLBRBRBRFHBAlgorithmRecall/Precision/F-Measure0 3 6 9 12 15 18 21 24 27 30FragmentationRecall PrecisionF-Measure FragmentationTable 3: Hand tuned optimal parameter set-tings for each search algorithm:Vertical, Left Blocking, Right Blocking,Right Blocking Recursive, andFull Horizontal BlockingAlgorithm TOP SIZEL1SIZE RATIOHORIZRATIOHORIZSIZEV 2 192 0.3LB 2 64 0.1 0.3 3RB 2 27 0.2 0.5 27RBR 2 27 0.05 0.5 243FHB 2 27 0.2 0.3 3make intelligent blocking decisions backed by suf-ficient data.The best performing parameter values for theFull Horizontal Search are a compromise betweenthe well performing values for the Left Blockingand those for the Right Blocking algorithms.
Thisparameter value compromise does not draw benefitfrom the recursion in the Right Block Recursivealgorithm, but instead employs Right Block as areplacement for the relatively higher L1 SIZE pa-rameter in the Left Blocking algorithm.It is also interesting to examine CIC?s selectedby the search algorithms.
Table 4 lists all of theCIC?s selected by the conservative Vertical searchalgorithm together with a random sample of CIC?sselected by Right Blocking Recursive, the algo-rithm which reached the highest F1 measure of anyalgorithm variant.Perhaps the most striking feature of Table 4 isthe extent to which the CIC?s overlap.
Very fewindividual c-suffixes occur in only one CIC.
Of allthe CIC?s in Table 4, only ?.s and a.as.o.os, bothamong the CIC?s selected by the Vertical algo-rithm, represent complete inflection classes in thestandard IC?s.
The remaining CIC?s are propersubsets of various verbal inflection classes.
Theoverlapping nature of the selected CIC?s suggestsan additional step, which we do not investigatehere, of conflating CIC?s into a fewer number ofmeta-CIC?s.The only verbal inflection class for which sub-sets are able to pass the large L1 SIZE cutoff im-posed by the Vertical search algorithm is -ar, themost frequent of the three major inflection classesin Spanish.
The Right Blocking Recursive algo-rithm on the other hand identifies significant por-tions of all three verbal inflection classes.The c-suffixes appearing in italics in Table 4correspond to no suffix found in any standard IC.These alien c-suffixes fall into two categories.1) The c-suffixes aciones, aci?n, and adoresare noun forming derivational suffixes.2) The remaining c-suffixes were formed bychoosing a morpheme boundary too far tothe right.It is the second type of mistake that the LeftBlocking search algorithm was specifically de-signed to address.
Unfortunately na?vely combin-ing the Right Blocking Recursive with the LeftBlocking algorithm did not improve performance.We expect that by using separate horizontal pa-Verticalar er ir 23 of 23 Selected CIC's?
?.s?
a.aba.ada.adas.ado.ar.as?
a.aba.ada.ado.ando.ar?
a.aba.ada.ado.ar.ar?.en.
?a.aciones.aci?n .ada.adas.ar.aron?
a.ada.adas.ado.ar.ar??
a.ada.adas.ar.aron.??
a.ada.ado.ar.aron.ar?.??
a.ada.ado.ar.ar?.ar?n.en.??
a.ada.ado.ar.o.??
a.ada.ados.ar.aron.??
a.ado.ar.ara.aron.e.??
a.ado.ar.aron.??
a.an.ar.??
a.as.o.os?
?
?
?
a.as?
aba.ado.ando.ar.aron.ar??
aba.ado.ar.aron.ar?.en?
ada.ado.ados.ar.aron.??
ada.ado.ando.ar.aron.??
ada.ado.ar.ar?.o.??
ada.ado.ar.en.o.??
ado.ar.aron.ar?.ar?n.enN Adj VerbsTable 4: All of the CIC?s selected by the conservative Vertical search algorithm (left), and a randomsample of CIC?s selected by the algorithm with best F1 measure, Right Blocking Recursive (right).
Foreach CIC row, a dot is placed in the columns representing standard IC?s for which that CIC is a subset.The c-suffixes in italics are in no standard IC.Right Blocking Recursivear er ir 23 of 204 Selected CIC's?.ba.n.ndo?
a.aba.ado.ados.ar.ar?.ar?na.aciones.aci?n .adas.ado.ar?
a.ada.adas.ado.ar.ar??
a.adas.ado.an.ar?
a.ado.ados.ar.??
a.ado.an.arse.??
a.ado.aron.arse.??
aba.ada.ado.ar.o.osaciones.aci?n .ado.adosaciones .ado.ados.ar?aci?n .ado.an.e?
ada.adas.ado.ados.aron.??
ada.ado.ados.ar.oado.adores .o?
ado.ados.arse.e?
ado.ar.aron.arse.ar?do.dos.ndo.r.ron?
?
e.ida.ido?
emos.ido.?a.?an?
ida.ido.idos.ir.i??
ido.iendo.ir?
ido.ir.roN Adj Verbsrameters for left blocking and for right blockingwe could combine these two algorithms in a lessconstrained fashion that would result in betteroverall performance.7 Future WorkWe believe the heuristic search strategy de-scribed in this paper can be significantly improvedupon.
We plan to investigate search strategies forboth the vertical and horizontal links in our CIClattices.
We currently have plans to employ statis-tical independence and correlation tests to adjacentCIC?s as a guide to search (Monson, 2004).
Othersearch criteria we are considering are informationgain and minimum description length measures.There are also modifications to the search strat-egy that may significantly improve performance.For example, it may be advantageous to activelyfollow horizontal morpheme boundary links, in-stead of merely blocking paths, when a morphemeboundary error is discovered.
The next immediatestep we will take is to scale our implementation toinvestigate performance changes as we increasethe size of our Spanish corpus.The intention of this work is to produce a lan-guage independent morphology induction algo-rithm.
Hence, we plan to apply this work to a vari-ety of languages, both well studied resource-richlanguages as well as low-density languages of in-terest to the AVENUE project.8 AcknowledgementsThe research reported in this paper was fundedin part by NSF grant number IIS-0121631.ReferencesJaime Carbonell, Katharina Probst, Erik Peterson,Christian Monson, Alon Lavie, Ralf Brown, andLori Levin.
2002.
Automatic Rule Learning forResource-Limited MT.
In Proceedings of the 5thConference of the Association for MachineTranslation in the Americas (AMTA-02).Andrew Carstairs-McCarthy.
1998.
?ParadigmaticStructure: Inflectional Paradigms and Morpho-logical Classes.?
The Handbook of Morphology.Eds.
Andrew Spencer and Arnold M. Zwicky.Blackwell Publishers Inc., Massachusetts, USA,322-334.
?ric Gaussier.
1999.
Unsupervised learning ofderivational morphology from inflectional lexi-cons.
In Proceedings of ACL ?99 Workshop: Un-supervised Learning in Natural Language Proc-essing.John Goldsmith.
2001.
Unsupervised learning ofthe morphology of a natural language.
Computa-tional Linguistics, 27(2): 153-198.Margaret A. Hafer and Stephen F. Weiss.
1974.Word segmentation by letter successor varieties.Information Storage and Retrieval, 10:371-385.Zellig Harris.
1955.
From phoneme to morpheme.Language, 31:190-222.
Reprinted in Harris1970.Zellig Harris.
1967.
Morpheme boundaries withinwords: Report on a computer test.
Transforma-tion and Discourse Analysis Papers 73, Depart-ment of Linguistics, University of Pennsylvania.Reprinted in Harris 1970.Zellig Harris.
1970.
Papers in Structural andTransformational Linguistics.
D. Reidel,Dordrecht, Holland.Alon Lavie, Stephan Vogel, Lori Levin, Erik Pe-terson, Katharina Probst, Ariadna Font Llitj?s,Rachel Reynolds, Jaime Carbonell, and RichardCohen.
2003.
Experiments with a Hindi-to-English Transfer-based MT System under a Mis-erly Data Scenario.
ACM Transactions on AsianLanguage Information Processing (TALIP), toappear in 2(2).Christian Monson.
2004.
A Framework for Unsu-pervised Natural Language Morphology Induc-tion.
In Proceedings of the Student Workshop atACL-04.Katharina Probst, Lori Levin, Erik Peterson, AlonLavie, and Jaime Carbonell.
2002.
MT for Re-source-Poor Languages using Elicitation-basedLearning of Syntactic Transfer Rules.
MachineTranslation, Special Issue on Embedded MT,17(4): 245-270.Patrick Schone and Daniel Jurafsky.
2000.
Knowl-edge-free Induction of Morphology Using LatentSemantic Analysis.
In Proceedings of the FourthConference on Computational Natural LanguageLearning and of the Second Learning Languagein Logic Workshop, 67-72.Patrick Schone and Daniel Jurafsky.
2001.
Knowl-edge-free Induction of Inflectional Morpholo-gies.
In Proceedings of the North AmericanChapter of the Association of ComputationalLinguistics.
183-191.David Yarowsky, Grace Ngai, and Richard Wicen-towski.
2001.
Inducing multilingual text analysistools via robust projection across aligned cor-pora.
In Proceedings of the Human LanguageTechnology Conference, 161-168.
