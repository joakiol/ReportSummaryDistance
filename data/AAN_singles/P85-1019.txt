Semantic Caseframe Parsing and Syntactic GeneralityPhilip J. Hayes.
Peggy M. Andersen.
and Scott SafierCarnegie Group IncorporatedCommerce Court at Station SquarePittsburgi'~.
PA 15219 USAAbstractWe nave implemented a restricted .
:lommn parser calledPlume "M Building on previous work at Carneg=e-MellonUnfvers=ty e.g.
\[4, 5.
81.
Plume s approacn to oars=ng ~sbased on semantic caseframe mstant~a~on Th~s nas theadvantages of effic=ency on gr in  ~atical ,nput.
androbustness in the face of ungrammatmcal tnput Wh~le Plume~s well adapted to s=mpte ,:;~ectaratwe and ~mperat=veutterances, it handles 0ass=yes relatmve clauses anti=nterrogatives in an act noc manner leading to patcinysyntact=c coverage Th~s paOe, oulhnes Plume as =tCurrently exfsts and descr,Oes our detaded des=gn forextending Plume to handle passives rela|~ve clauses, and=nterrogatlves ~n a general manner1 The Plume ParserRecent work at Carnegie-Mellon Umvers=ly eg.
\[4.
51 hassinown semanttc caseframe =nstant~ation to be a n,ghly robustand efficient method of parsing restricted domain ~n0ut.
Intn~S approach ~0 parsing, a caseframe grammar contains lhedoma~n-soecific semantic informat=on, ana" the pars=ngprogram contains general syntact=c knowledge Input ,smapped onto me grammar using m=s budt-~n syntact=cknowledge We nave chosen m=s approach for Plume ":'M acommercial restricted domam parser ~ because of ~tsadvantages =n efficfency and robustnessLet us take a simple example from a natural languageinterface, called NLVMS.
thai we are developing under a1 More 0:eccselv.
Ph jme TM ,s me n4me ,)t lne  run-hl t le  ~vstemTM assoclalecl  N~m Language Craft an mlegraler J  env l ro l lmen l  for meoevetoomenl  of naluraI  language ,nteHaces "he  PlUm?
10arser Nnlchtransla{es Eng#lsl'l lil~UI qnto casetrame ,ns lances,  .s a malot  comDonei I tot tt~=s rur l - t lme system The diner  malOr -,3111OG~te~H tratis lales i recaseframe ~nslance~ into aoDIica|lofl specifIC !anguaqes.
in JlOOlhon tothe P lume run-brae system, ta .guaqe  Craft ,nc!uoes grammardeve lopment  ~OOlS ,ncludlng -.1 -;lrH,:hJreO edllOr .ln~l tracing ,1ha,~ert.3rmance rneasutemenl  rOi)~S ~r~ln P lume Ji~a ~Jltq,iaqe Craft atecrOOuctS ,It Carneg ie  Group .~.d ,Jle u, te l l t l y  i,I re'~lrlr leO r~teaseP lume .\]n~ Language CI,Ift It@ ,,,Id~,,Idr v'~ ,',t \]ot.1.+gle :3~,)HO'ncotoorafe~lcontract with Digital Equipment Corporation NLVMS ,s antnterface to Digltal's VMS ~ operating system for './AX ~computers 2 The Plume grammar for .th~s ,ntertace containsthe follow=ng semantic caseframe 3 correspond=ng ?o the copycommand of VMS:\[ *copy*:cf-type clausal:header copy:cases( f i le- to-copy:f i l ler *fi le*:posit ional  Direct-Object)( source:f i l ler *d irectory*:marker from I out of)(dest inat ion:f i l ler *f i le* I *directory*:marker to I into I in l onto)\]This defines a caseframe called "copy" w~th mree cases:file-to-copy, source, and destination The hie-to-copy case ,sfilled by an oioiect of type "file" and appears =n the inputas a direct oblect Source ,s filled 0y a "d~rectory" andshould appear in me ~nput as a preposmonal phrasepreceded or marked by the prepos,t~ons "from" or 'out of"Oestinat=on is filled by a "file" or "clirectory" and ~s markedby "to' .  "
into' .
or "onto" Finally the copy command itselfis recognized by the header word ,ndicated above (byheader) as "copy"Using mis caseframe.
Plume can parse ,n0uts like:Copy fop Oar out ot \[x/ ,nro \[y~From \[x\] to \[yJ cooy fop oartoo oar coDy /rom \[x/ ro \[y/2VMS anO VAX are ?raOemark5 of Olg=tal EQu.omen!
CorDora l lon\]Th.s is a s.npiltleO .
:e,slols ,~t rne r .L~e, ,  ~.~ e .I..'~,.IIh/ ~ fne gralnmar.153In essence.
Plume's parsing algorithm +S tO find a caseframeheader, in this case "copy"  and use the associatedcaseframe, "copy" to guide the rest of the parse.
Oncethe caseframe has been identified Plume looks for casemarkers, and then parses the associated case filler directlyfollowing the marker Plume also tnes to parse pomtionallyspecified cases, like direct ObleCt.
in the usual position inthe sentence - immediately following the header for directobject.
Any input not accounted for at the end of thisprocedure is matched against any unfilled cases, so thatcases that are supposed to be marked can be recognizedwithout their markers and pos=tionally indicated cases can berecognized out of their usual positions, This flemble.interpretive style of matching caseframes against the inputallows Plume to deal with the kind of variation in word orderillustrated in the examples above.The above examples implied there was some method torecognize files and directones They showed only atomicfile and directory descriptions, but Plume can also deal withmore complex ObleCt descnptions In fact, in Plumegrammars, obiects as well as actions can be described bycaseframes.
For instance, here =s the caseframe s used todefine a file for NLVMS\[*f~le*:.c f- type nominal:header file ':name ?
(%period ~extension): cases( name: ass ignedp t name)( extension: ass ignedp t extension:marker wr i t ten in:adject ive <language>:fi l ler <language>)(creator:f i l ler *person*:marker created by)(directory:fi l ler *directory*:marker in)\]4 n rme syntax used ,.
',,.n VMS.
chrectorles are ,ncl.calecl Dy sauareDtackefs.5~qa~,~ ~,mOl,hed~l~lUtl~e ,.\]ulOmall< allv +e,:oqn,zes " l~.te,mmer ?, 4rl,1 :lual~hl,er~; asSoclaled?
.,fn ~totnmal , a~|f'~tf~e5This caseframe allows Plume to recogn,ze file descriptionslike: 6fopfop.ParThe file created Oy JohnThe fortran file in ix/ created Oy JoanThe caseframe notation and parsing algorithm used here arevery similar to those described above for clause level input.The significant differences are additions related to the:adiective and :assignedp attributes of some of the casesabove.
While Plume normally only looks for fillers after theheader in nominal caseframes an adiective attnbute of aslot tells Plume that the SlOt f i l l e tmay appear before theheader.An :assignedp attribute allows cases to be filled throughrecognition of a header+ This is generally useful for propernames, such as fop and foo.bar.
In the example above.the second alternatwe header contmns two '.,ar~ables nameand 'extension.
that can each match any s=ngJe .vorcI.
TheClUeSt=on mark Indicates opt=onal~ty, so that me header canbe either a single word or a word followed Dv a per=pal andanother word.
The first wOrd ,s asmgned to the ~'anaOle'name.
and IRe second (if =t =s mere~ to the vanaOle!extension If 'name or 'extension are matched ,,vnderecognizing a file header, their values are placed ,n thename and extenmon cases of "hie"w,ln the above mod,ficat,ons P~ume can parse nomqna,caseframes umng the same algor~ttnm that ~t uses for clausalcaseframes that account for complete sentences.
Howeverthere are some interactions between the two levels ofparsing.
In particular, mere can be ambiguity about whereto attach marked cases?
For anstance.
In:Copy me fortran file ,n \[,:/ to \[y/"~n \[xr" could e,her fill the directory case of the hiedescribed as 'the fortran h ie  or could fill the dest+natBoncase of the whole copy command.
The secondinterpretation does not work at the global level because theonly place to put "to \[y}" ,s tn that same destination caseHowever.
at the time the file descrlpt,on ts parsed, tinsinformation is not avadable and so both possibleattachments must be considered In general, if Plume isable to fill a case of a nora,hal caseframe from a154prepositional phrase, it also splits off an alternative parse inwhich that attachment is not made.
When all input hasI~een parsed.
Plume retains only t~ose parses t~at succeedat the global level, i.e.. consume all of the input.
Othersare discarded.The current implementation of Plume is based on thenominal and clausal level caseframe instant=ation algorithmsdescnPed above.
Us=ng these algor=thms and a restr=ctedclommn grammar of caseframes like the ones ShOWn above.Plume can parse a w~de variety of ~mDerat~ve anddeclarative sentences relevant to that doma=n.
However.there remain significant gaps ,n ~ts coverage.
Interrogativesare not handled at all: + passives are covered only if meyare explicitly specified =n the grammar ancl relative clausescan only be handled by pretending they are a form ofprepos=t=onal phraseThe regular and predictable relattonsn~p between s~mplestatements.
?~uestions and relalwe clauses and betweenact=ve and passive sentences ~s ,veil known A parser wmcilpurports to tnterpret a dohlaln specific tanguage specificationusing a built-in knowledge of symax ShOuld account for tillsregularity =n a general way The current implementer=on ofPlume ilas no mecnamsm for doing tn~s.
Eacil ~ndividualpossiDdity for questions relative clauses and passives mustbe explicitly specified ,n the grammar For instance, tohandle reduced relative clauses as =n "the file created byj im .
.
.
.
created by" ~s hSted as a case marker (compoundprepositlorll tn the creator slot of file.
mark+ng a descriptionof the creator To handle full relat=ves the case markermust be specified as something hke "3(which < be >)created by".
'3 Wh=ie mis allows Plume to recognize +the filewhich was created by Jim", "the file created by J im".
oreven "the file created by Jim on Mondav  ~t breaks downon something like "the file created on Monday by Jim 'because the case marker "created by' {s no longer a unl lMoreover using the current techniques.
Plume S abdtly to?rhR Cur ren!
, rno le f t l~nt ;~ l lon  ,)1 PIII I I I@ ".
* a }s -.~ le f / l~ , )  r,~tV t'nF, i I ' l , )d OI,, ,I , .
ase f t , )me,, 1 .-.
~ .t i11 la  ii ,-~ ~1recognize the above inputs =s completely unrelated tO =tsabdity tO recognize inputs like:the fi/e Jim created on Mon(Taythe person that the file was crearect ov on Mondaythe day on which Jim created rne meIf an interface could recogmze any of these examptes +tmight seem unreasonable to a uSer that ~t could notrecognize all of the others Moreover g~ven any of theabove examples, a user might reasonaPly expect recogmt=onof related sentence level inputs hkeCreate the hie on Monday'J~m created the hie on MondayDt~ J~m create the hie on Moneay ?Was the hie create(l Ioy J~m on Monclay ~Who created the hie on Monday ?What day was the hie created on?The current ,mplememation of Plume has no means ofguaranteeing such regularity of coverage.
Of course, thisproblem of patcl~y syntactic coverage is not new forrestricted doma=n parsers.
The lack Of syntactic generalityof the original semantic grammar {3\] for the Sophie sys tem{21 led tO the concept of cascaded ATNs {10} and theRUS parser {1 I, A progress=on w=tln s=milar goals occurredfrom the LIFER system \[91 to TEAM {6\] and KLAUS \[7\].The bas=c oDstacle to ach~evmg Syntactic generality ~nthese network-based approaches was me way syntactic andsemantic information was m=xed together +n the grammarnetworks.
The sOlutions, therefore, rested on separating thesyntact=c and semanttc reformat=on.
Plume alreadyincorporates just me separation of syntax and semanticsnecessary for syntactic generahly general syntacticknowledge resides in the parser whde semantic =nformat=onresides ~n the grammar This suggests that syntacticgenerahty ~n a System like Plume can be acnreved Qv,morowng the parser s caseframe ,nstanttatJon algOrithms.vHnou{ 3n~,.
malor changes to arammar Content ,n terms ofme above examples =nvo~wng ; rea fe  =t suggests .."Je canuse a s4ngle "create" ,,:3seframe to nandte .~11 the examplesWe Simply need to prowde suHable extensions to theexisting caseframe nslantlatton algoNthms In the nextsection we present a detaded deszgn for such extensaons2.
Providing Plume wtth Syntactic GeneralityAs descr=bed above.
Plume can currently use clausal155caseframes only to recognize s,ngle clause imperative anddeclaratwe utterances in the active voice.
This sectiondescribes our design for extending Plume so that relativeand interrogative uses of clausal caseframes in passive aswell as active voice can also De recognized from the sameinformation.We will present our general design by showing how itoperates for the following "create" caseframe in the contextof NLVMS\[ *create*: c f - type c lausal:header <create>: cases(creator:f i l ler *person*:posi t ional  Subject)(createe:f i l ler *f i le*:posi t ional  Direct-Object)(creat ion-date:f i l ler *date*:marker on)\]Note tNat symbols in angle brackets represent non-terminals,n a conmxt-free grammar (recogmzed by Plume usingoattern matching techn,ques) In Ine caseframe defin,tlonabove <create> matches all morDnologlcal vat=ants of theverio 'create" ,ncluding "create ' 'creates ' 'created" and'creating" impugn not combound tenses +~ke .s :real ,ng'see below).
Using me ex,st=ng Plume :n,s .
':ouid 3olv 9.1lOWuS tO recognize simple ~mperallves and actwe ~eclarat,vesl lkeCreate ~oo Oar on Moniaav2m crealecI tot)oar on Mor~Uay2.
I PassivesPlume recogn,zes pasture sentences lhrough ~tS processingof the \]erO cluster +e the ma~n verb plus me sequence ofmodal and auxiliary .
'erD ,mmedlalely preceding it.
Onceme main verb has been located a sl0ecsal verb clusterprocessing mechanvsm reads me verb cluster and determinesfrom il whether me sentence ts acttve or passive 'j Theparser records tills =nformaticn in a special case called"%voice".If a sentence is found to be achve the standard parsingalgor,hm described above ,s used If =t is found to bepassive, the standard algorithm ~s used with the modificationthat the parser looks for the direct object or the indirectobject ~?
in the subject positron, and for the subject as anoptional marked case with the case marker "by".
Thus.given the "create" caseframe above, the follow,rig passivesentences could be handled as well as their activecounterparts.Fop oar was creamd by JimFOO oar COuto /'lave dee t~ rFateo ov j ,mFO0 oar ,s Oe,ng (reate~l ~v ~,mFop Oar was created on MGnclay22.
Relative clausesThe detailed design presented below allows Plume to usethe "create" caseframe to parse nominals hke:the tile J~m crearecl on Monclavthe person tna~ the tile was created oy on Mondaythe day on vvn~ch Jtm create(:/ tl~e hieTO do tins.
we ~ntroduce the conceDt of a relative case Arelative case is a link back from the caseframes for theobjects that fill the cases of a clausal caseframe to matclausal caseframe.
A grammar preprocessor generates arelatwe case automatically from each case of a clausalcaseframe, associating ,t 'Nlth the nominal caseframe .~atfills the case in me clausal caseframe.
Relative cases rionot need to be spemfied by the grammar writer Forinstance, a relative case ,s generaled from the createe caseof "create" and rnctuded in the "hie" caseframe.
It lOOkSlike this:\[*f i le*( : re lat ive-cf  *create*: re lat ive-case-name createe:marker <create>\]911 a l so  c le le r r r l lnes  I~le lense  ol  me sentence  and  whe lne?
,l s, J l l f ltrrtal lve or  neqa l lVeIOSn  ,I u~ere ,s a case  .~,ln a OoS lhO.a l  mq.ecbo io lec I  $1ol me,?lGitec!
.~DleCt is d l loweO lo  i Jass lv ,ze  Ne  .
:air thus  uoders lano  -;e~le,~<'es!IW~ " Ma IV  ,VaS ~ iVe l l  a boow " , iO ln  I ",~ive ' .
I se !~,3me ,-,?11 13oln af \ ] i f~, - '  ,~ lec l  ,llt(~ ,\]ii ,it(~it'ecl )l}lel,~l ' ~'~ie156Note thai :marker is the same as :header of "create"Similar relative cases are generated in the "person"caseframe for the creator case.
and in the "date"caseframe for the creation-date case.
differing only in:relative-case-nameRelative cases are used s~mdarly to the ordinary markedcases of nominal caseframes.
In essence, ff the parser ~sparsmg a non,nat  caseframe ~nd finds the marker of oneof ~ts relative cases, then it tries to instanhate the :relative-c f  It performs tms instantlatlon ~n the same way as ,f merelatwe.cf were a top-level clausal caseframe and the wordthat matched the header were ,is main verb.
An ~mportan!d=fference ~s that it never tries to fill the case ,,,,nose name~s g=ven by relative-case-name That case =s hlled by thenommal caseframe which contams the relative case Formstance, suppose the parser =s tryCng to process.7"he file J~m createcl on MonclaVAnd suppose that ~t has already located "file ' and usedthat to determine ,t ,s ~nstanhat,ng a "file" nominalcaseframe It ~s able to match {aga,nst 'created"~ me?
marker of the relative caseframe of "hie'  shown above.
Itthen ~ries to ~nstanhate me relatwe.cf "create" using ~tSstandard tecnmdues except real ~!
does not try to fillc reatee  the case of "create" specff=eo as the relallve-case-name Th~s mstanr~at~on succeeds wllh " J im '  gong =nipcreator  and "on Monday" bemg used to hll creatmn-dateThe parser then uses (a pomter to) the nommat caseframecurrently being instant~ated.
"file" to fill createe, the:relative-case-name case of "create" and the newly createdinstance of "create" is attached to this mstance of "file" asa modifierab.~t never looks any further left ,n the ~nout thanthe header of the nom=r'al caseframe or ,f ,t~as already parsed any omer Oos'.-r~ommatcases of the nommal caseframe no further leftthan the r~ght hand end ot; themit COnsumes.
but Otherwise ignores any relatwepronouns iwno .,vn~;.m ~,.,n~n rr~ar ~ that~mmediately precede the segment used toinstantiate the relatwe-cf Tnlg ~neans rna~ 3/iwords, including "thar" .~vdl ~e 3ccounrec #or ~n"t/le file ttlat J im createc .:.
)t~ ~/lonclay"it does not try to fill the case specified by therelative-case-name ~n the relative-of: =nsteadtms case is filled by (a Oomter to) the Or~g=nalnommal caseframe tnstance:d. ff the relal=ve-case.name specifies a markedcase rather than a positional one tn therelative.of then ~ts case marker can Deconsumed, but omerwtse ~gnored.
durmgmstanhataon of me relatwe.cf This 3110w3 UStO deal wlln "on  ~n me .gate Jim created ~hehie on" or "the care un whlcn j im created thefile '3 Passwe relalave clauses (e g. " Ihe file that wascreated on Monday"t  can generally be handled usingthe same mechanisms used Ior passwes at the mainclause level However  tn relative clauses, passivesmay sometimes be recIucec/ by om~thng the usualauxihary verb to be (and the relat=ve pronoun) as ~n:the file create(l on MondayTo account for such reduced relative clauses, theverb cluster processor will produce approonateadditional readings of the verio clusters ,n relahveclauses for which the relative pronoun JS m~ssmgThis may lead to multlOle oarses, mcludmg one forthe above example s~mdar to the correct one for:the file Jot~n crea\[e~ on MonclayThese amb=guaties wdl De taken care of by Plume sstandard ambiguity reduction methodsMore comotetely.
P lumes  atgor~mm for relattve clauses ~s:1.
When processing a nommal caseframe.
Plume scansfor the ;markers of lhe rela{tve cases of the nominalcaseframe at the same t~me as \[t scans for theregular case markers ol: that nominal caseframe2.
If it finds a marker  of a relatwe case.
~t rues toinst~ilntlate the relaltve.cf lust as though if were theTop-level clausal case|tame and the header were ~tsmmn '/erb.
~.xcept mat:2 \] interrogativesin addmon to handling passaves 3no -e?ahve : lauses.also wish {he =nformatlon ~n me "c 'eate  -"aseframehanclle ~nterrogatlves tnvolvlng "create '  ~cn  3s,reto~1C Jim create me hl~.
{~n MG;I,I\]V 'W,aS r/le /lie cre3teo OV J~m or} '.4L,",I.\]/~,/I/ho c.reare(~ the hie On ~f,unc,av 'What clay was the hie cre j leC ,:The prtmary diffiCulty for Plume .,.,~ln mterrogatwes ~s that  3Sthese examoles ShOw me number of variations in stanclardCOnStituent order is much greater than for tmperatives and157dectaratJves.
Interrogatives come in a w~de variety of forms.depending on whether the question is yes/no or wh: onwhich auxiliary verb ~s used: on whether the voice is activeor passive: and for wh questions, on which case is queried.On the other hand.
apart from var)ations in the order anclplacement of marked cases, there is only one standardconstituent order for =mperatives and only two fordeclaratives (corresponding to active and passive voice).
Wehave exl~lO=tecl th=s low variability by building knowledge ofthe imperative and declarative order into Plumes parsingalgorithm.
However this is impractical for the largernumber of variations associalecl with interrogatives.Accordingly, we have designed a more data,driven approachThis approach involves two Passes through the inpul: thefirst categorizes the input into one on several primary inputcategories incluOing yes-no questions, several kinds of wh-cluestions, statements, or ~mperat=ves.
The second Passperforms a detaded parse of me input based on thectassfficat=on made in the first Pass.
The rules used contambas=c syntactic ~nformat=on al3out Enghsn.
and will rema,nconstant for any of Plumes restricted domam grammars ofsemantic caseframes for EnghshThe first level of process=rig +nvolves an ordered set ofr~D-/evel patterns.
Each too.level pattern corresponds tO oneof the primary =nput categor=es ment~onecl adore Th=sclassificatory matchmg c~oes not attempt to match every+,vord +n the input sentence but only to do the ram=mumnecessary to make the classdicat=on.
Most of the relevant,nformat~on is found at the beg=nnmg of the ~nDuts.
Inioart=cular, the top-level patterns make use of the frontedaux=liary verb and wh-worcls tn questions.AS well as classffymg the input, th~s top-level match ,salso useci to determme the iclenttty of the caseframe To be=nstant=ated.
Th=s =S =moortant to dO at this stage becausethe deta,led recognmon Ln the seconcl phase ts neav=lyde~enclent on the ~clent=ty of his top-level casetrame Thespecial symbol.
SverO.
that appears exactly once =n all top-level patterns, matches a heacler of any clausal caseframeWe call trte caseframe whose heacler is matcnecl by SverOthe primary casetrame for that input.The second more detailed parsing phase is organizedrelative to the primary caseframe Associated with each top-level pattern, there is a corresponding parse femo/ate.
Aparse template specifies which parts of the primarycaseframe will' be found in unusual positions and whichparls the default parsing process (the one for declarat=vesand imperatives) can be used for.A simplified example of a top-level pattern for a yes-noquestion is: ~<aux> (- ($verD !!
<aux>)~ (&s SverOj SrestThis top.level pattern w=ll match inputs hke.
me followmg:D~ Jim create fop ~Was fop creafecl Oy J~m ?The first element of the above top-level pattern ~s anauxiliary verlo, represented Dy me non-termmal <aux> Th~sauxdiary ~s remembered and used by the veto clusterprocessor (as though ~t were the first auxd~ary ~n the cluster)to determine tense and voice.
AcCOrChng tO the next partof the pattern, some word that ts not a verb or an aux~harymust appear after the fronted auxdiary and before the mareverb ( is the negation operator, and !!
marks adislunction).
Next.
the scanmng operator &,~ tetls thehatcher to scan until it finds $vero which matches theheader of any clausal caseframe F~nally.
Srest matchesthe remaimng ~nDut.If the top-level pattern successfully matches.
Plume usesthe assoc~atecl Parse template to clirect ~ts more detadedprocessmg of the ~npul.
The goal of this second passthrough the input ~s to mstantiate the caseframecorresponding to the heacler matched by Sverlo in the top-level pattern, The concept of a kernel-casetrame isimportant to this stage of processmg.
A kemel-caseframeCorresponcls to that part of an ~nput that can be processectaccording to the algorithm already budt into Plume fordeclarative and imperative Sentences,P Ih l  fhl~ ~al lern .
.
'~nly ii1OuIS wr le fe  tl~e tronfecl aux l l larv  .
?+ ,'he firstworO ,~ rh~ sentence  are a l loweo t 'he rrl()re ",'+=nplex ~anerr;  ~a l  ,sachJally .lsecI P)v PfLIIn~ dllc)ws ofeuu~lfiol)dll.~/ i~l,|fke 0 "ases ',~ ioneari~lihaliv as ,,felt158The parse template associated with the above top-levelpattern for yes/no questions is:aux kernel-casetrame+ (:query)This template tells the parser that the input consists of theauxiliary verb matched in the first pass followed by a:kernel-caseframe.
For example.
~n:O;d J~m create fop ~the auxtliary verb.
"d id"  appears hrst followed by a kernel-caseframe.
"Jim create fop" Note ~ow the kernel-caseframe looks exactly like a declarative sentence, and socan be parsed according to the usual declarative/imperativeparsing algorithmIn addition to spec:ficatJon of where to find components ofthe primary caseframe a parse lemplate ~ncludesannotations (indicated by a plus sign) in the abovetemplate for yes/no questions, there =S lust one annotatton -~uery.
Some annotations, hke thiS one ,ndlcate what typeof input has been found, while others direct the processingof the parse template.
Annotations o!
the first type recordwhich case is being queried ~n wn questfons, mat ~s.
whichcase ,s associated w,m the wh word.
Wh questions thusinclude one of the following annotatTons SuOlect-query.Prelect-query.
and mar~ea-case-que~ Marked case queriescorrespond to examples like:On what day d~d J~m create too ?What day d~d Jim create /oo on ~in which a case marked by a preposition iS 13eing askedaPout.
AS illustrated here me case-marker in such queriescan either precede the wn word or appear somewhere .afterthe verO.
To deal w;m this, me parse template for markedcase quenes has the annotation tloa~na-case-marker.
Thisannotation ~s of the second type thai ,s =t affects the wayPlume processes the associated parse template.Some top-level patterns result ~n two poss=bdmlles for parsetemplates, For example, the follow=no top-level pattern< , ' /n .
'NorO > < at .
i x  > i ( Sv~rto  i i  .-- a t .
ix  > ~ $vf~rt~ $',f=.~tcould match an ObleCt query or a marked case query,~ncluding the following:What did Jsm create ~By whom was fop created?
szWho was fop created Oy ?These ~nputs cannot be satisfactordy discriminated Oy a top-level pattern, so the above top-level pattern has twO differentparse templates associated with it:wt~-ob/ect aux kemel-caseframe?
(oOlecr.query~wig-marked-case-tiller aux kernel-caseframe+ (roamed-case-query float~ng-case-mar~er} .When the above top-level pattern matches.
Plume tries toparse the input using both of these parse templates, ingeneral, only one wil!
succeed Ln accounting for all meinput, so the amb~gudy wdl De eliminated by the methodsalready built ~nto Plume.The method of parsing interrogatives presented aboveallows Plume to handle a wide variety of interrogatwes ~n avery general way using domain specific semantic caseframes.The writer of the caseframes does not have to worry aboutwhether they will ioe used for ~mperative.
declarative, orinterrogative sentences.
(or in relatwve clauses).
He is freeto concentrafe on the domain-specific grammar.
In addition.the concept of the kernel-caseframe allows Plume to usethe same efficient caseframe-based parsing algorithm that =tused for declarative and imperative sentences to parsemalor subparts of questions.3.
ConclusionPrey,puS work (e.g.
\[4.
5.
81 / 3no exoer,ence .,vdh ourcurrent rmolementat~on of Plume.
Carnegie 'Group s semanticcaseframe parser, has ~nown semantic caseframeinstanl=ation to be an efficient and mgnly roloust method ofparsing restnctecl dommn tnout However hke othermethods of parsing tleawly deoendent on restricted domainsemantics these ,nmal attempts at parsers based onsemantic caseframe =nslant;al~on suffer from palcny syntacticcoverage.159After first describing the current ~mplementation of Plume,this paper presented a detaded design for endowing Plumewith much broader syntact=c coverage including passives.interrogatives, and relat=ve clauses.
Relative clauses areaccommodated through some grammar preprocessing and aminor change in the processing of nominal caseframesHandling of interrogatives relies on a set of rules forclassifying inputs into one of a limited number of types.Each of these types has one or more associated parsetemplates which guide the subsequent detailed parse of thesentence, As the final version of this paper is prepared(late April, 1985).
the handling of passives and interrogativeshas already been implemented in an internal developmentversion of Plume.
and relative clauses are expected to followSOOnThough the above methods of incorporating syntacticgenerality into Plume do not Cover all of English syntax.trey show that a s=gnfficant degree of syntactic generalitycan Ioe provided straightforwardly t:)y a domain specificparser drtven from a semantic caseframe grarpmarReferences1.
Bobrow.
R J.
The RUS System 8BN Report 3878.Bolt.
Beranek.
and Newman.
19782.
Brown.
J.
S and Burton, R R MultipleRepresentations of Knowledge for Tutorial Reasomng.
InRepresentation and Understanding Bobrow.
0 G andCollins, A..
Ed., Academic Press.
New York.
1975. pp.311-349.3.
Burton, R. R. Semantic Grammar An EngineeringTechnique for Constructing Natural Language UnderstandingSystems.
BBN Report 3453.
Bolt.
8eranek, and Newman.Inc.. Cambridge.
Mass.. Oecember.
1976.4.
Carbonell.
J. G.. Boggs.
W. M.  Mauldin, M. L.. andAnick, P. G. The XCALIBUR Prolect: A Natural LanguageInterface to Expert Systems.
Proc.
Eighth Int.
Jr. Conf  onArtificial Intelligence.
Karlsruhe.
August.
1983.5.
Carbonetl.
J. G. and Hayes P J.
"Recovery Strategiesfor Parsing Extragrammatical Language"  Comoutat~ona/Lingulstscs 10 (1984).6.
Grosz, B. J.
TEAM: A Transportable Natural LanguageInterface System Proc.
Conf on Applied Natural LanguageProcessing, Santa Mon,ca.
February 19837.
Haas.
N and Hendnx.
G G. An Approach to AccluJrmgand Applying Knowledge Proc.
Nattonat Conference of theAmerican Assoc=ation for Artific=al Intelligence.
StanfordUniversity.
August.
1980. pp.
235-2398.
Hayes, P J. and Carbonetl.
J G. Multt-StrategyParsing and its Role ~n Robust Man-Machine Commun=cat=on.Carneg=e-Metlon Umvers=ty Computer Sc=ence Oepartment,May, 1981.9.
Hendnx.
G. G. Human Engineering for Applied NaturalLanguage Process=ng.
Proc Fift~ Int.
Jr. Conf on Art=fvctaiIntelligence, MIT.
1977. pp.
183-19110.
Woods.
W. A, "Cascaded ATN Grammars' Arnertc3r~Journal of Computational Linguistics 6.
1 (August 1980Y 1-t2160
