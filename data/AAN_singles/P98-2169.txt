Parametric Types for Typed Attribute-Value LogicGerald PennUniversit~t TfibingenK1.
Wilhelmstr.
11372074 TuebingenGermanygpenn@sfs.nphil.uni-tuebingen.deAbst rac tParametric polymorphism has been combinedwith inclusional polymorphism to provide nat-ural type systems for Prolog (DH88), HiLog(YFS92), and coristraint resolution languages(Smo89), and, in linguistics, by HPSG-likegrammars to classify lists and sets of linguisticobjects (PS94), and by phonologists in represen-tations of hierarchical structure (Kle91).
Thispaper summarizes the incorporation of para-metric types into the typed attribute-value logicof (Car92), thus providing a natural extensionto the type system for ALE (CP96).
Following(Car92), the concern here is not with models offeature terms themselves, but with how to com-pute with parametric types, and what differentkinds of information one can represent relativeto a signature with parametric types, than rel-ative to a signature without them.
This en-quiry has yielded a more flexible interpretationof parametric types with several specific proper-ties necessary to conform to their current usageby linguists and implementors who work withfeature-based formalisms.1 Mot ivat ionLinguists who avail themselves of attribute-value logic normally choose whether to encodeinformation with subtypes or features on theaesthetic basis of what seems intuitively tocapture their generalizations better.
Linguistsworking in LFG typically use one implicit typefor objects that bear features, and other types(atoms) for only featureless objects.
In HPSG,the situation is less clear, both historically (se-mantic relations, for example, used to be val-ues of a RELN attribute, and are now sub-types of a more general semantic type), andsynchronically (verbs, for example, are identi-fied as (un)inverted and (non-)auxiliaries by twoboolean-valued features, AUX and INV, whereastheir form, e.g., finite, infinitive, gerund, is iden-tified by a subtype of a single vform type).
Thatit makes, or at least should make, no differencefrom a formal or implementational point of viewwhich encoding is used has been argued else-where (Mos96; Pen-f).HPSG's type system also includes parametrictypes, e.g., Figure 1, from (PS94).
In contrastword ~hrase ?list ~nelist(_X~.\ 7 I / HE.~D:'2tV.
,..~\[f~ TAIL:list(X).
.
.J_Figure 1: A fragment of the HPSG type signa-ture.to the relative expressive potential of normaltyping and features, the expressive potential ofparametric types is not at all understood.
Infact, parametric types have never been formal-ized in a feature logic or in a manner generalenough to capture their use in HPSG parsing sothat a comparison could even be drawn.
Thispaper summarizes such a formalization, 1 basedon the typed attribute-value logic of (Car92).This logic is distinguished by its strong inter-pretation of appropriateness, a set of condi-tions that tell us which features an object ofa given type can have, and which types a fea-ture's value can have.
Its interpretation, totalwell-typedness, says that every feature structuremust have an appropriate value for all and onlythe appropriate features of its type.
Previousapproaches have required that every parameterof a subtype should be a parameter of all of itssupertypes, and vice versa; thus, it would not be1 The full version of this paper presents a denotationalsemantics ofthe logic described here.1027possible to encode Figure 1 because _1_ E list(X),and if ?
were parametric, then all other typeswould be.
2 The present one eliminates this re-striction (Section 2) by requiring the existenceof a simple most general type (which (Car92)'slogic requires anyway), which is then used dur-ing type-checking and inferencing to interpretnew parameters.
All previous approaches dealonly with fixed-arity terms; and none but oneuses a feature logic, with the one, CUF (Dot92),being an implementation that permits paramet-ric lists only as a special case.
The present ap-proach (Section 4) provides a generalization ofappropriateness that permits both unrestrictedparametricity and incremental feature introduc-tion.In contrast to the other encoding trade-off, the use of parametric types in HPSG lin-guistics exhibits almost no variation.
Theyare used almost exclusively for encoding lists(and, unconvincingly, sets), either with typearguments as they are posited in (PS94), orwith general description-level arguments, e.g.,list(LOCAL:CAT:HEAD:verb), the latter possiblyarising out of the erroneous belief that para-metric types are just "macro" descriptions forlists.
Even in the former case, however, para-metric types have as wide of a range of poten-tial application to HPSG as simple types andfeatures do; and there is no reason why theycannot be used as prolifically once they are un-derstood.
To use an earlier example, auxiliary,inverted, and verb_form could all be parametersof a parametric type, verb.
In fact, parametri-cally typed encodings yield more compact spec-ifications than simply typed encodings becausethey can encode products of information in theirparameters, like features.
Unlike features, how-ever, they can lend their parameters to appro-priateness restrictions, thus refining the featurestructures generated by the signature to a closerapproximation of what is actually required inthe grammar theory itself.It is possible, however, to regard paramet-ric type signatures 3 as a shorthand for non-parametric signatures.
The interpretation of2In this paper, the most general type will be called.l_.3By "signature," I refer to a partial order of types plusfeature appropriateness declarations.
The partial orderitself, I shall refer to as a "type (inheritance) hierarchy.
"parametric type hierarchies i introduced in Sec-tion 3 by way of establishing equivalent, infinitenon-parametric counterparts.
Section 5 consid-ers whether there are any finite counterparts,i.e., whether in actual practice parametric sig-natures are only as expressive as non-parametricones, and gives a qualified "yes.
"In spite of this qualification, there is an easyway to compute with parametric types directlyin an implementation, as described in Section 6.The two most common previous approacheshave been to use the most general instance of aparametric type, e.g.
nelist(J_) without its ap-propriateness, or manually to "unfold" a para-metric type into a non-parametric sub-hierarchythat suffices for a fixed grammar (e.g.
Figure 2).The former does not suffice even for fixed gram-e l ~ t _ p h o nl i s t _syn~~~el i s tlistFigure 2: A manually unfolded sub-hierarchy.mars because it simply disables type checkingon feature values.
The latter is error-prone, anuisance, and subject o change with the gram-mar.
As it happens, there is an automatic wayto perform this unfolding.2 Parametr i c  Type  H ierarch iesParametric types are not types.
They are func-tions that provide access or a means of referenceto a set of types (their image) by means of ar-gument ypes, or "parameters" (their domain).Figure 1 has only unary functions; but in gen-eral, parametric types can be n-ary functionsover n-tuples of types.
4 This means that hier-4In this paper, "parametric type" will refer to such afunction, written as the name of the function, followedby the appropriate number of "type variables," variablesthat range over some set of types, in parentheses, e.g.list(X).
"Type" will refer to both "simple types," such as_1_ or elist; and "ground instances" of parametric types,i.e.
types in the image of a parametric type function,written as the name of the function followed by the ap-propriate number of actual type parameters in paren-theses, such as list(l-), set(psoa) or list(set(l-)).
I willuse letters t, u, and v to indicate types; capital lettersto indicate type variables; capitalized words to indicatefeature names; p, q, and r for names of parametric types;and g to indicate ground instances of parametric types,1028archies that use parametric types are not "type"hierarchies, ince they express a relationship be-tween functions (we can regard simple types asnullary parametric types):Def in i t ion 1: A parametric (type) hierarchy isa finite meet semilattice, (P, EP), plus a partialargument assignment function, ap : P ?
P ?Nat -~ Nat U {0}, in which:?
P consists of (simple and) parametrictypes, (i.e.
no ground instances of para-metric types), including the simple mostgeneral type, _1_,?
For p,q E P, ap(p,q,i),  written aq(i), isdefined iff p EP q and 1 <_ i <_ arity(p),and?
0 < aq(i) <_ rn, when it exists.Meet semilatticehood, a requirement of(Car92)'s logic as well, allows us to talk aboutunification, because we have a unique most-general unifier for every unifiable pair of types.The argument assignment function encodes theidentification ofparameters between a paramet-ric type and its parametric subtype.
The num-ber, n, refers to the nth parameter of a paramet-ric type, with 0 referring to a parameter thathas been dropped.
In practice, this is normallyexpressed by the names given to type variables.In the parametric type hierarchy of Figure 1,list and nelist share the same variable, X, be-,~nelist\[l~ is 1.
If _ne l i s t t l~  = 0, then nelist cause t~list k x l Ulist k l )would use a different variable name.
As a morecomplicated example, in Figure 3, ad(1) = 1,b ( X , ~ e.1_Figure 3: A subtype that inherits type variablesfrom more than one supertype.ad(2) = 3, aed(2) = 2, ad(1) = 0, and a?
and aeare undefined (1") for any pair in P ?
Nat.3 Induced Type  H ierarch iesThe relationship expressed between two func-tions by EP, informally, is one between their im-age sets under their domains, 5 while each imagewhere the arguments do not need to be expressed.5One can restrict hese domains with "parametric re-strictions," a parallel to appropriateness restrictions onset internally preserves the subsumption order-ing of its domain.
It is, thus, possible to thinkof a parametric type hierarchy as "inducing" anon-parametric type hierarchy, populated withthe ground instances of its parametric types,that obeys both of these relationships.Def init ion 2: Given parametric type hier-archy, (P, Ep,  a) ,  the induced (type) hierarchy,( I(P),  El), is defined such that:?
I (P)  is the smallest set, I, such that, forevery parametric type, p(Xt , .
.
.
,Xn)  EP, and for every tuple, ( t t .
.
.
tn)E I  n,p( t l , .
.
.
,  tn)eI .?
p( t l , .
.
.
, tn )  EI q(ut , .
.
.
,urn) iff p EP q,and, for all l< i<n,  either at(i ) = 0 or ti Etu~(i).It can easily be shown that ( I(P),  EI) is a par-tial order with a least element, namely .L, theleast element of P. Note that I (P)  also containsall of the simple types of P. In the case where9rand92 are simple, gl EI g2 iff gl EP 92.Figure 4 shows a fragment of the type hierar-chy induced by Figure 1.
If list and nclist hadnelist(,wo d~..~eli~t(phrase) .
.
.
.
.
.'
n "" "(si n"  nelist(list(.l_)) ens (, g / .
. "
"list ( ~  (phrase) l / l ist  ~ist (_k)).
.
.t~sr( szgrv ' - - -~l is t~ )Figure 4: Fragment induced by Figure 1.not shared the same type variable ?,,nelistfl~0), then it would have induced the type hier-archy in Figure 5.
In the hierarchy inducednel is t (wor~jne l i s t (phrase} inelist (s igr~.~nel ist  (list (_l_ ) )l ist(word phrase) : cl),,flist(phrese) .list (sig ..Llist (list (-L ) )list(Z)Figure 5: Another possible induced hierarchy.feature values.
This abstract assumes that these domainsare always the set of all types in the signature.
This isthe most expressive case of parametric types, and theworst case, computationally.1029by Figure 3, b(e,e) subsumes types d(e,Y,e),for any type Y, for example d(e,c(e,e),e),or d(e,b(_L,e),e), but not d(c(_L,e),e,e), sinceeElc(_l_, e).
Also, for any types, W, X, and Z,c(W,e) subsumes d(X,e,Z).The present approach permits parametrictypes in the type signature, but only groundinstances in a grammar elative to that signa-ture.
If one must refer to "some list" or "everylist" within a grammar, for instance, one mayuse l ist( I ) ,  while still retaining roundedness.An alternative to this approach would be to at-tempt to cope with type variable parametersdirectly within descriptions.
From a process-ing perspective, this is problematic when clos-ing such descriptions under total well-typing,as observed in (Car92).
The most general sat-isfier of the description, list(X)A(HEAD:HEAD"-" TAIL:HEAD), for example, is an infinite fea-ture structure of the infinitely parametric type,nelist(nelist(.., because X must be bound tonelist(X).For which P does it make sense to talk aboutunification in I(P), that is, when is I(P) a meetsemilattice?
We can generalize the usual notionof coherence from programming languages, sothat a subtype can add, and in certain casesdrop, parameters with respect o a supertype:Def in i t ion  3: (P, EP, ap) is semi-coherent if,for a l lp,  q E P such thatp  Ep q, al l1 _< i _<arity(p), 1 <_ j <_ arity(q):?
ag( i )  = i ,?
either aq(i) = 0 or for every chain, p =Pl EP p2 EP .
.
.
EP Pn = q, aq(i) =,up._,t...aP~(i)...)), and?
Ifpllpq$, then for all i and j for which thereis a k >_ 1 such that appUpq(i) = apqUpa(j) =k, the set, {rip Up q EP r and (@(i) = 0 orarq(j) = 0)} is empty or has a least element(with respect o EP).Theorem 1: If (P, Ep, ap) is semi-coherent,then ( I (P ) ,E I )  is a meet semilattice.
Inparticular, p(t i , .
.
.
, tn)  Ut q(ui, .
.
.
,Um) =r(v i , .
.
.
,vs) ,  where p tap q = r, and, for alll<k<s ,ti Ut u#Vk = tiUj_Lif there exist i and j such that@(i) = k and arq(j) = kif such an i, but no such jif such a j ,  but no such iif no such i or j .So p(t i , .
.
.
,  tn) UI q(u i , .
.
.
,  Um)~ if p Up q\]', orthere exist i, j ,  and k > 1 such that @(i) =arq(j) = k, but ti UI ujl".
6In the induced hierarchy of Figure 3, for ex-ample, b(e, 2) Ut 5(2, e) = b(e,e); b(e,e) U1c(_L) = die , 2, e); and b(e, e) and b(c(_L), e) arenot unifiable, as e and c(_l_) are not unifiable.The first two conditions of semi-coherence en-sure that ap, taken as a relation between pairsof pairs of types and natural numbers, is an or-der induced by the order, EP, where it is not,taken as a function, zero.
The third ensures thatjoins are preserved even when a parameter isdropped (ap = 0).
Note that joins in an inducedhierarchy do not always correspond to joins ina parametric hierarchy.
In those places whereap ---- 0, types can unify without a correspond-ing unification in their parameters.
Such is thecase in Figure 5, where every instance of l ist(X)ultimately subsumes nelist(_k).
One may alsonote that induced hierarchies can have not onlydeep infinity, where there exist infinitely longsubsumption chains, but broad infinity, wherecertain types can have infinite supertype (butnever subtype) branching factors, as in the caseof nelist( I)  or, in Figure 1, elist.4 Appropr ia tenessSo far, we have formally considered only typehierarchies, and no appropriateness.
Appropri-ateness constitutes an integral part of a para-metric type signature's expressive power, be-cause the scope of its type variables extends toinclude it.Def in i t ion 4: A parametric (type) signature isa parametric hierarchy, (P, EP, ap>, along withfinite set of features, Featp, and a partial (para-metric) appropriateness function, Appropp :Featp x P --~ Q, where Q = UneNat Qn, andeach Qn is the smallest set satisfying the equa-tion, Qn = {1 , .
.
.
,n}  u {P(qi, .
.
.
,qk)lP E Par -ity k, qi E Qn}, such that:6The proofs of these theorems can be found in the fullversion of this paper.10301.
(Feature Introduction) For every featuref E Featp, there is a most generalparametric type Intro(f) E P such thatAppropp(f , Intro(f) ) is defined2.
(Upward Closure / Right Monotonicity)For any p, q E P, if Appropp(f,p) is de-fined and p EP q, then Appropp(f,q)is also defined and Appropp(f,p) EQAppropp(f,q), where EQ is defined asEI(P) with natural numbers interpretedas universally quantified variables (e.g.a(1) EQ b(1) iffVx E I(P).a(x) EI(P) b(x))3.
(Parameter Binding) For every p E P of ar-ity n, for every f E Featp, if Appropp(f ,p)is defined, then Appropp(f,p) e Qn.Appropp maps a feature and the parametrictype for which it is appropriate to its value re-striction on that parametric type.
The first twoconditions are the usual conditions on (Car92)'sappropriateness.
The third says that the nat-ural numbers in its image refer, by position,to the parametric variables of the appropriateparametric type - -  we can use one of theseparameters wherever we would normally use atype.
Notice that ground instances of para-metric types are permitted as value restrictions,as are instances of parametric types whose pa-rameters are bound to these parametric vari-ables, as are the parametric variables them-selves.
The first is used in HPSG for fea-tures such as SUBCAT, whose value must belist(synsem); whereas the second and thirdare used in the appropriateness specification fornelist(X) in Figure 1.
The use of parametersin appropriateness restrictions is what conveysthe impression that ground instances of lists orother parametric types are more related to theirparameter types than just in name.It is also what prevents us from treating in-stances of parametric types in descriptions asinstantiations of macro descriptions.
These pu-tative "macros" would be, in many cases, equiv-alent only to infinite descriptions without suchmacros, and thus would extend the power ofthe description language beyond the limits ofHPSG's own logic and model theory.
Lists inHPSG would be one such case, moreover, asthey place typing requirements onevery elementof lists of unbounded length.
Ground instancesof parametric types are also routinely used inappropriate value restrictions, whose extensionto arbitrary descriptions would substantially ex-tend the power of appropriateness as well.
Thisalternative is considered further in the full ver-sion of this paper.A parametric signature induces a type hier-archy as defined above, along with the appro-priateness conditions on its ground instances,determined by the substitution of actual param-eters for natural numbers.
Thus:Theorem 2: If Appropp satisfies properties(1)-(3) in Definition 4, then Appropi(p ) satisfiesproperties (1) and (2).5 S ignature  Subsumpt ionNow that parametric type signatures have beenformalized, one can ask whether parametrictypes really add something to the expressivepower of typed attribute-value logic.
There areat least two ways in which to formalize thatquestion:Def init ion 5: Two type signatures, P and Q,are equivalent (P ~s Q) if there exists an order-isomorphism (w.r.t.
subsumption) between theabstract otally well-typed feature structures ofP and those of Q.Abstract otally well-typed feature structuresare the "information states" generated by sig-natures.
Formally, as (Car92) shows, they caneither be thought of as equivalence classes offeature structures modulo alphabetic variants,or as pairs of a type assignment function onfeature paths and a path equivalence relation.In either case, they are effectively feature struc-tures without heir "nodes," which only bear in-formation insofar as they have a type and serveas the focus of potential instances of structuresharing among feature path, where the traversalof two different paths from the same node leadsto the same feature structure.If, for every parametric signature P, there isa finite non-parametric N such that P ~s  N,then parametric signatures add no expressivepower at all - -  their feature structures arejust those of some non-parametric signaturespainted a different color.
This is still an openquestion.
There is, however, a weaker but stillrelevant reading:Def init ion 6: Type signature, P, subsumessignature Q (P Es Q) if there exists an injec-tion, f ,  from the abstract otally well-typed fea-1031ture structures of P to those of Q, such that:?
if FI mAT(P ) F2J', then f (Ft )  UAT(Q )f(F2)J',?
otherwise, both exist and f(F1UAT(p)F2) =/(F1) Uar(Q)/(F2).If for every parametric P, there is a finitenon-parametric N such that P ___s N, then itis possible to embed problems (specifically, uni-fications) that we wish to solve from P into N,solve them, and then map the answers back toP.
In this reading, linguist users who want tothink about their grammars with P must acceptno non-parametric mitations because N maynot have exactly the same structure of informa-tion states; but an implementor of a feature-based NLP system, for example, could secretlyperform all of the work for those grammars inN, and no one would ever notice.Under this reading, many parametricallytyped encodings add no extra expressive power:Def in i t ion  7: Parametric type hierarchy,(P, EP, ap) is persistent ifap never attains zero.Theorem 3: For any persistent parametricsignature, P,  there is a finite non-parametricsignature, N, such that P Es N.If elist in Figure 1 retained list(X)'s parame-ter, then HPSG's type hierarchy (without sets)would be persistent.
This is not an unreason-able change to make.
The encoding, however,requires the use of junk slots, attributes withno empirical significance whose values serve asworkspace to store intermediate r sults.There are at least some non-persistent P, in-cluding the portion of HPSG's type hierarchyexplicitly introduced in (PS94) (without sets),that subsume a finite non-parametric N; butthe encodings are far worse.
It can be proven,for example, that for any such P, some of itsacyclic feature structures must be encoded bycyclic feature structures in N; and the encodingcannot be injective on the equivalence classesinduced by the types of P, i.e.
some type inN must encode the feature structures of morethan one type from P. While parametric typesmay not be necessary for the grammar pre-sented in (PS94) in the strict sense, their use inthat grammar does roughly correspond to casesfor which the alternative would be quite unap-pealing.
Of course, parametric types are notthe only extension that would ameliorate theseencodings.
The addition of relational expres-sions, functional uncertainty, or more power-ful appropriateness restrictions can completelychange the picture.6 F in i tenessIt would be ideal if, for the purposes of feature-based NLP, one could simply forget the encod-ings, unfold any parametric type signature intoits induced signature at compile-time and thenproceed as usual.
This is not possible for sys-tems that pre-compute all of their type opera-tions, as the induced signature of any paramet-ric signature with at least one non-simple typecontains infinitely many types.
7 On the otherhand, at least some pre-compilation of type in-formation has proven to be an empirical neces-sity for efficient processing.
8 Given that one willonly see finitely many ground instances of para-metric types in any fixed theory, however, it issufficient o perform some pre-compilation spe-cific to those instances, which will involve someamount of unfolding.
What is needed is a wayof determining, given a signature and a gram-mar, what part of the induced hierarchy couldbe needed at run-time, so that type operationscan be compiled only on that part.One way to identify this part is to identifysome set of ground instances (a generator set)that are necessary for computation, and closethat set under Ui(p):Theorem 4: If G C I(P), is finite, then thesub-algebra of I(P) generated by G, I(G), isfinite.\[I(G)\[ is exponential in \[G\[ in the worst case;but if the maximum parametric depth of G canbe bounded (thus bounding \[GD, then it is poly-nomial in \[P\[, although still exponential in themaximum arity of P:Def in i t ion  8: Given a parametric hierar-chy, P, the parametric depth of a type, t --p(tl,...,tn) e I(P), ~(t), is 0 if n = 0, and1 + maxl<i<n ~(ti) if n > O.So, for example, 6(list(list(list(.l_))))= 3.In practice, the maximum parametric depthshould be quite low, 9 as should the maximum7With parametric restrictions (fn.
5), this is not nec-essarily the case.SEven in LFG, a sensible implementation will use defacto feature co-occurrence constraints to achieve muchof the same effect.9With lists, so far as I am aware, the potential de-mand has only reached 6 -- 2 (MSI98) in the HPSG1032arity.
A standard closure algorithm can be used,although it should account for the commutativ-ity and associativity of unification.
One couldalso perform the closure lazily during process-ing to avoid a potentially exponential delay atcompile-time.
All of the work, however, can beperformed at compile-time.
One can easily con-struct a generator set: simply collect all groundinstances of types attested in the grammar, orcollect them and add all of the simple types, oradd the simple types along with some extra setof types distinguished by the user at compile-time.
The partial unfoldings like Figure 2 areessentially manual computations of I(G).Some alternatives to this approach are dis-cussed in the full version of this paper.
Thebenefit of this one is that, by definition, I(G)is always closed under Ili(p).
In fact, I(G)is the least set of types that is adequatefor unification-based processing with the givengrammar.
Clearly, this method of sub-signatureextraction can be used even in the absence ofparametric types, and is a useful, general toolfor large-scale grammar design and grammar re-use.7 Conc lus ionThis paper presents a formal definition of para-metric type hierarchies and signatures, ex-tending (Car92)'s logic to the parametric asethrough equivalent induced non-parametric sig-natures.
It also extends appropriateness to thecommon practice of giving the binding of para-metric type variables scope over appropriatevalue restrictions.Two formalizations ofthe notion of expressiveequivalence for typed feature structures are alsoprovided.
While the question of ~s-equivalenceremains to be solved, a weaker notion can beused to establish a practical result for under-standing what parametric types actually con-tribute to the case of HPSG's type signature.
Ageneral method for generating sub-signatures isoutlined, which, in the case of parametric typesignatures, can be used to process with signa-tures that even have infinite equivalent inducedsignatures, avoiding equivalent encoding prob-lems altogether.Parametric type compilation is currently be-ing implemented for ALE using the methodliterature to date.given in Section 6.References(Car92) Carpenter, B., 1992.
The Logic ofTyped Feature Structures.
Cambridge Univer-sity Press.
(CP96) Carpenter, B., and Penn, G., 1996.
Ef-ficient Parsing of Compiled Typed AttributeValue Logic Grammars.
In H. Bunt and M.Tomita, eds., Recent Advances in ParsingTechnology, pp.
145-168.
Kluwer.
(DH88) Dietrich, R. and Hagl, F., 1988.
A Poly-morphic Type System with Subtypes for Pro-log.
Proceedings of the 2nd European Sympo-sium on Programming, pp.
79-93.
SpringerLNCS 300.
(Dor92) Dorna, M., 1992.
Erweiterung derConstraint-Logiksprache CUF um ein Typsys-tern.
Diplomarbeit, Universit~it Stuttgart.
(Kle91) Klein, E., 1991.
Phonological DataTypes.
In S. Bird, ed., Declarative Perspec-tives on Phonology, pp.
127-138.
EdinburghWorking Papers in Cognitive Science, 7.
(MSI98) Manning, C., Sag, I., and Iida,M., 1998.
The Lexical Integrity of JapaneseCausatives.
To appear in G. Green and R.Levine eds., Studies in Contemporary PhraseStructure Grammar.
Cambridge.
(Mos96) Moshier, M. A., 1995.
FeaturelessHPSG.
In P. Blackburn and M. de Rijke, eds.,Specifying Syntactic Structures.
CSLI Publi-cations.
(Pen-f) Penn, G., forthcoming.
Ph.D. Disserta-tion, Carnegie Mellon University.
(PS94) Pollard, C. and Sag, I., 1994.
Head-Driven Phrase Structure Grammar.
Univer-sity of Chicago Press.
(Smo89) Smolka, G., 1989.
Logic Program-ming over Polymorphically Order-SortedTypes.
Ph.D. Dissertation, Universit~itKaiserslautern.
(YFS92) Yardeni, E., Friiwirth, T. and Shapiro,E., 1992.
Polymorphically Typed Logic Pro-grams.
In F. Pfenning, ed., Types in LogicProgramming, pp.
63-90.
MIT Press.1033
