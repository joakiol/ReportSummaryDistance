Unbounded Dependency: Tying strings to ringsJon M. SLACKe-mail: slack@irst.uucpIstituto per la Ricerca Scientifica eTecnologica (I.R.S.T.
)38050 Povo (TN)FFALYAbstract: This paper outlines a framework forconnectionist representation based on thecomposition of connectionist states undervector space operators.
The framework is usedto specify a level of connectionist structuredefined in terms of addressable superpositionspace hierarchies.
Direct and relative addresssystems (:an be defined for such structureswhich use the functional components oflinguistic structures as labels.
Unboundeddependency phenomena are shown to be relatedto the different properties of these labellingstructures.IntroductionOne of the major problems facingconnectionist approaches to NLP is how best tor~ccommodate he role of structure (Slack,\]984).
Fodor and Pylyshyn (1988) haveargued that connectionist representations lackcombinatorial syntactic and semantic structure.t::urthermore, they claim that the processes thatoperate on connectionist representational statesfunction without regard to the inherent structureof the encoded ata.
The thrust of their criticismis that mental functions, such as NLP, areappropriately described in terms of themanipulation of combinatorial structures, uchas formal languages, and that, at best,connectionisrn provides an implementationparadigm for mapping NLP structures andproceses onto their underlying neuralsubstrates.If Fodor and Pylyshyn's arguments arecorrect then there can be no connectionistprinciples which influence the nature of theoriesdeveloped at the level of symbolicrepresentation.
However, the present papershows that it is possible to define a level ofconnectionist ructure, and moreover, that thislevel is involved in the explanation of certainlinguistic phenomena, such as unboundeddependency.Connectionist StructureA theory of connectionist representationmust show how combinatorial structure can bepreserved in passing from the symbolic level ofexplanation to the connectionist level.
One wayof achieving this is by positing an intermediatelevel of description, called the level ofConnectionist Structure (CS), at whichcombinatorial structure is preserved but interms of connectionist combinatory operatorsrather than the operators of formal anguages.A framework for connectionist represent-ation is illustrated in figure 1.
In a connectionistsystem the formal medium for encoding repre-sentations i a numerical vector correspondingto a point in a Vector Space, V. Formally, allconnectionist representanons can be expressedas vectors of length k, defined over somenumerical range.alphabetI o .
.
.
.
, ,2 .
!
f2ac~naotOry _~ / implementationmappingCSConnectionistStructure(V-spacecombinatoryoperators)i -Figure lSymbolic structures comprise an alphabet of1 265atomic symbols, and a set of symboliccombinatory operators; the symbolic alphabet ismapped into V-space under the alphabetmapping, f~a.
This mapping might have one ormore desirable properties, uch as faid,fulness,orthogonaIity, etc..The other major component of theframework, f~co, maps symbolic combinatoryoperators onto corresponding vectorcombinatory operators.
The CS level is definedin terms of structured vectors which aregenerated through applying the V-spacecombinatory operators to the set of vectors inthe codomain of the alphabet mapping.
Themain reason for differentiating the CS level ofrepresentation is thatonly certain combinatoryoperators are available at this level, the mostuseful ones being associat ion andsuperposition, and this restricts the range ofsymbolic structures that can be encoded irectlyunder a connectionist representation.Essentially, the CS level preserves theconnectivity properties of the symbolicstructures.Within this framework the CS level can bedefined formally as a semiring, as followsDef in i t ion .
The CS level comprises thequintuple (V, +, **, 0, 0) 1 where1.
(V, +, 0) is a commutative monoid definingthe superposition operator;2.
(V, **, 0) is a monoid defining theassociation operator;3.
** distributes over +:The two identity elements correspond toidentity vectors, where ~ is defined for zero-centred vectors (Slack, 1984).
The vectorcombining operations of association andsuperposition are used to build connectivityconfigurations in memory.
Moreover, using anappropriate threshold function, the super-position operator can simulate a rudimentaryform of unification (Slack, I986).
The mostgeneral ciass of structures that can be defined atthe CS level using the two combinatoryoperators are addressable superposition spacehierarchies (refen'ed to as ASSHs).CS Address SystemsThe f~co mapping can be used to define acorrespondence between the symbolicoperations of union and concatenation, and theCS operations of superposition and association,respectively.
This allows the following1 Characters in bold denote lements of thevector space.homomorphism to be defined .f: S -> CS,mapping the semiring S into the CS semiring,wheref(xUy) = f(x) + f(y) and f(x.y) = f(x) ** f(y),and the semiring S comprises the quintuple(L x, U,., 0, {0}) where L x is the finite set ofstrings defined over the symbolic alphabet X,and U and.
denote the union and concatenationoperators, respectively, with their correspond-ing identities.
The existence of the homomorph-ism allows symbolic structures to address CSrepresentations.
However, the restriction onthis mapping is that CS level address ystemscannot capture the full expressive power ofregular languages.
This is because no CS leveloperator can be defined with the same closureproperties as the Kleene star operator at thesymbolic level.
The implications of this con-straint become apparent in describing howsymbolic structures can function as structuraladdresses for the CS level.The symbolic structures that function asaddresses to the CS level can be representedusing directed, acyclic graphs (DAGS), and arereferred to as address structure DAGs (AS-DAGs).
AS-DAGs codify the way in whichsymbolic labels address, or map onto, thenodes and edges of ASStts.
In general, twopossible types of address system can bedefined, direct addressing and relative address-ing.
A system of direct addressing involvesspecifying unique ASSH addresses explicitly.That is, a symbolic label functioning as anaddress, directly accesses a unique ASSH node.The alternative addressing scheme involvesspecifying nodes in the configuration i  termsof their connectivity paths from some pre-defined origin node.
This form of relativeaddressing requires, (a) a pre-specified origin,or root node, and (b) a labelling system for theconnections within the configuration.The set of symbolic labels that serve asaddresses in AS-DAGs can be partitioned intotwo classes, local and global labels, which m'edifferentiated in terms of their function withinan address structure.
Global labels map ontothe nodes of AS-DAGS providing direct address-es for the superposition spaces in ASSH config-urations.
Local labels, on the other hand, maponto AS-DAG edges and specify the relativeaddresses of ASSH spaces.
That is, they specifythe locations of superposition spaces relative tothe addresses of their dominating nodes.
Thisrelationship is illustrated in figure 2 showinghow AS-DAGs map onto ASSHs.266 2PERSUADEvcompGIRLsubjM SGL SPEC THEAS-DAG(consistency)F igure 2ASSH(coherency)The figure shows the CS level encoding of theLFG representation of the sentence The girlpersuaded John to go (see Slack, 1990).
Thesuperposition space labelled 'JOIIN' in the AS-DAG can also be located using the compoundaddress  'PERSUADE.obj'.
2 The obviousquestion that arises is what possible rationale isthere for this system of double addressing?With a system of direct addressing for ASSHs,the relative addressing scheme would appearredundant.At the symbolic level, local labels specifylocal structure, that is, how a node relates to itsimmediate descendents.
In situations in whichthe local structure is uniform and finite, the V-space encodings of local labels can be fixedunder O.a, mapping each label onto a constantvectorial encoding.
This allows AS-DAGs to beviewed as configurations of local structureswhich can be located in V-space by fixing thevectorial encodings of their root-nodes.
Thismeans that global labels must be assigneddynamically under ~a.
Putting the emphasis onlocal structure seems to make the directaddressing system redundant, but there aregood reasons for needing direct access tosuperposition spaces.Defining arbitrary structural addresses asstrings of local labels descending from a root-node can only be achieved under symbolic levelcontrol as the representational machinarynecessary for interpreting concatenated labelstrings does not exist at the CS level.
A stringof local labels can only be encoded as a singleAS-DAG edge corresponding toan uninterpretedlabel string.
That is, the CS level comprises aset of superposition spaces which supportstructured access, and only a single ASSH edgecan link two such spaces.
This means that CSlevel access through relative addressing islimited to addresses comprising a single edgeleading from an origin node.
Building upaddresses in this way necessitates an AS~DAGnode labelling scheme such that the origin nodecan be defined iteratively.
In other words,because the V-space encoding of local structureis fixed under f~a, relative addressing can onlybe specified on a local basis, with the only formof global addressing involving direct access toASSH nodes, or superposition spaces.
Thislimit on symbolic level access to connectionistrepresentational states is an important source oflocality constraints in encoding linguisticstructures at the CS level (Slack, 1990) a.2 In the figure, global labels are shown inuppercase and local \]abels in lowercase.3 The representational framework has beenimplemented on a simple associative memory3 267Unbounded Dependency: ConnectivityOne linguistic phenomenon which, rnorethan any other, focuses on the problem ofaddressing structural configurations is that ofunbounded dependency (UBD).
Typically, insentences like The boy who John gave thebook to last week was Bill, the phrase Theboy is {aken as the 'filler' for the missingargument, or 'gap', of the gave predicate, asindicated by the underline.
At the level ofconstituent s ructure there are no constraints onthe number of lexical items that can intervenebetween a filler and its corresponding gap.Such "unbounded dependencies" are typical ofa class of linguistic phenomena in which thestructural address of an element is determinedby information which is only accessible oversome arbitrary distance in the structure.
Tobuild the appropriate memory configuration, itis necessary to determine the address of the gapto which a filler belongs.
However, becausegaps and fillers can be separated by arbitrarydistance in the input string, it is not possible tospecify the set of potential predicate-argumentrelations that the filler can be involved in, andso a direct address cannot be identified.Instead, it is necessary to generate a relativeaddress through the construction of a chain ofglobal and local labels.Within the framework of Government-Binding theory, these phenomena have beenexplained through identifying conditionsdefined on constituent trees that account for thedistribution of gaps and fillers both within andsystem based on a functional partition of V-space into an Address Space and a ContentSpace (Kanerva, 1988).
An important feature ofthis architecture is that by encoding theelements ofboth spaces as k-bit vectors, they arepotentially interchangeable.
This allowselements retrieved from content space tofunction as addresses toother memorylocations, and vice versa.
Thus, the memoryconsists of a set of superposition spaces, whereeach space has a label (or address), and wherelabels can be encoded as elements of otherspaces resulting in a hierarchical structure.
Ina hybrid architecture based on a CS levelmemory, symbolic structures are encodedthrough symbolic labels addressing elementsof the homomorphic ASSH configurations inmemory.
In other words, symbolic levelactivity is implemented asthe manipulation ofaddress pace labels (see Slack, 1990).across natural languages.
One such principle isbased on the structural geomeu'y of constituenttrees, in particular, their connectivity properties(Kayne, 1983).
Kaplan and Zaenen (1988)have taken a different approach to UBDrestrictions arguing that they are best explainedat the level of predicate-argument relations,rather than in terms of constituent structure.Working within the LFG framework, theirformal system is based on the idea of functionaluncertainty expressions.
For example, fortopic-alization sentences these xpessions havethe general form (,x TOPIC)= (^ GF* GF)involving the Kleene closure operator, whereGF stands tbr the set of primitive grammaticalfunctions.
These equations express an uncertainbinding between the TOPIC function and someargument of a distant predicate.
The uncertain-ty relates to the identification of the appropriatepredicate.
To resolve the uncertainty it isnecessary to expand this expression and matchit against the functional paths of missingarguments.
Different computational strategiescan be used to optimise the resolution process(Kaplan & Maxwell, 1988).
What is commonto both approaches i  that they define a systemfor specifying the structural address of a gaprelative to its corresponding filler.The notion of functional uncertainty, incommon with other linguistic feature struct-ures, uses an address ystem based on regularlanguages (Kasper & Rounds, 1986).
It isimpossible, however, to use such addresses toaccess the CS level directly as the Kleeneclosure operator cannot be interpreted at thislevel.
In their present form, functional uncert-ainty algorithms require some kind of 'sym-bolic level' memory in which to expand uncert-ainty expressions.An alternative account of UBD phenomena,also based on predicate-argument r lations, canbe tbunded on the notion of symbolic labelsfunctioning as local and global addresses totheCS level.
The problem of UBD can be decomp-osed into two sub-problems, one relating tolocal structure, the other relating to globalindeterminacy.
Consider the sentence fragmentThe girl John saw Bill talking to ...... wherethe problem is to specify the struci-ural addressof the topicalised NP, The girl, as the missingargument of some COMP function 4.At the levelof local structure, the structural address of thefiller is minimally uncertain in that it can fulfil4 As the present discussion focuses onpredicate-argument relations, we will continueto make use of LFG notation and constructs,such as grammatical functions.268 4only a small set of local roles, for the presentcase the OBJ function.
However, the structuraladdress of the appropriate local structure ismaximally uncm~ain, as the filler item carries noinformation to constrain it.Before considering solutions to these twocrab-problems, it is necessm'y toclarify how theinformational  components of l inguisticstructures uch as f-structures function asaddresses to the CS level.
Elements of the setGF can function as both local and globaladdresses to memory configurations.
Each GF~:lement defines a component of local structure~md as such can function as a local label in the:relative address chain for an AS-DAG node.
Inaddition, GF labels can be associated with fixedmemory locations, thereby functioning as:;~lobal addresses.
For example, the symbolCOMP can be used to label an AS-DAG edgeibrming a constituent of a relative address, andat the same time provide direct access to a fixedk)cation, that is, label an AS-DAG node.
These~:wo addressing functions can be distinguished~y usm~ the labels COMP and COMP to1 P g ~ ,enote the local and global addresses, respect-ively?in encoding f--structures at the CS level,each sub-structure maps onto a separate:?uperpositon space (Slack, 1986).
This form ofdirect addressing requires a set of global~,'~ymbolic labels that uniquely identify each sub-s!:ructure.
The predicate names of f-structuresprovide such a labeling system.
In this case,each predicate name constitutes a unique originfi~r definir,,g relative local addresses?
Hence,!,:~cal abets like COMPp specify locationsrc:lative to a predicate 'p', that is, their immedi~ate dominating node in the AS.-DA(LThese labeling systems can be used to solvethe two UBD sub-problems.
On encountering afiller item in the input string, the analyser mustallocate some structural location in memory atwhich to store the infi,mnation carried by the?
.5 J~ern .
Part of that information specifies thefi/!er's local address.
For example, the inform--a i.ion carried by the phrase the girl mightinclude an encoding of the functional sub-s, ructure \[OBJ ** \[pred 'girl' + spec the + hum sg\]\] 6.At some later point in processing, thisinformation will be superposed, or unified,with stored information about the structm'e ofsome local tree.
For example, the predicate talk5 Problems of structural ambiguity are notbeing considered at this point.6 This encoding utilises the fact that memoryacldresses carl also be encoded as memorycontents, and vice versa.may encode through subcategorisation tilelocalstructure talk(subj, obj, comp).
If the OgJ func-tion remains unspecified, the filler informationwill unify at this location in memory, enablingits structural address to be specified ielative tothe address of the predicate talk.
The syntacticanalyser can solve the memory allocation prob-lem by generating the label TOPIC, enabling theencoding: TOPICg -> \[OBJ*a\[NP features\]\]Tto becreated.
This encoding solves the local depend~-ency problem.To solve the problem of global indete>minacy, the analyser must also build anencoding likeCOMPp -> TOPICgthe effect of which is to move the topicalisedinformation through connected COMP locations.in other words, it corresponds to the controlequation TOPIC = COMP* at the symboliclevel a.The principle underlying this latter encodingis that COMP labels a specific location inmemory determined relative to the locanon withthe global address 'p'.
This means that the locallabel is automatically reassigned as each newlocal structure unfolds.
The operation ofreassignment involves two concurrent actions:1) Direct labelling - the structural ocationlabelled by COMPp is reqabelled using the newpredicate name as a global label; 2) Bui ldconnection - a new location is connected intothe structm'e with the label COMPpwhere 'p' isbound to the new predicate name.
The effect ofthe last action is to pass  the topicalisedinformation onto the next connected level oflocal structure.
Obviously, if the first actionoccurs without he second, the filler label willnot be passed as the COMPp -> TOPICgencoding will become undefined.
Once thishappens the COMP~ address is no longerretrievable mr further processing.
However,the second action can only ?mcur if the buildingof a COMPp edge is licensed by the informationcarried by the predicate 'p'.
For example,consider the partial fostructure shown in figure3 and the corresponding AS-DAG configuration.A topicalised NP originating at the top-level7 This notation specifies address-contentassociations;AS-DAG address -> superposition spacecontents.8 As stated previously, the operator * cannot bemapped irectly to the CS level.5 269Partial y-structureCOMP \[- -\[ kL \ L j',5"CFigure 3node can be passed own the COMPp reassign-ment chain descending from the same node, butit cannot be passed to the COMP embedded inthe SUBJ f-structure.
The COMPp -> TOPICgencoding is undefined at the location addressedby the SUBJp label, because the COMP functioncannot be licensed by the SUBJ predicate.In brief, functional uncertainty expressionssuch as (^ TOPIC) = (^ COMP* OBJ) cannot bemapped directly to the CS level as structuraladdresses.
Instead, the uncertainty is capturedby the CS encodings COMPp-> TOPICg andTO.
PICg -> OBJ**\[NP features\].
As the connect-lvxty structure unfolds in memory, the action ofreassigning COMPp places restrictions on the setof structural addresses to which the topicalisedinformation can be passed.
Using predicate-argument structures as address ystems for theCS level leads to the conclusion thatconnectivity, defined at this level of linguisticstructure, determines the distribution of fillersand gaps within a language.ReferencesFodor, J.A., and Pylyshyn.
Z.W.
(1988)Connectionism and cognitive architecture: Acritical analysis.
Cognition, 28, 3-71.Kanerva, P. (1988) Sparse distributedmemory.
MIT Press, Cambridge, Mass..Kaplan, R.M.
& Maxwell, J.T.
(1988) Analgorithm for functional uncertainty.
COLING88, Budapest.Kaplan, R.M.
and Zaenen, A.
(1988) Long-distance dependencies, constituent s ructure,and functional uncertainty.
In M. Baltin and A.Kroch (eds.
), Alternative Conceptions ofPhrase Structure.
Chicago: Chicago UniversityPress.Kasper, R.T. and Rounds, W.C. (1986) Alogical semantics for feature structures.
In theProceedings of the 24th meeting of theAssociation of Computational Linguistics,Colombia University, New York.Kayne, R.S.
(1983) Connectedness.Linguistic Inquiry, 14, 223-249.Slack, J.M.
(1984) A parsing architecturebased on distributed memory machines.
InProceedings of COLING-84, Stanford,California.Slack, J.M.
(1986) Distributed memory: abasis for chart parsing.
In Proceedings ofCOLING-86, Bonn, West Germany.Slack, J.M.
(1990) Getting structure fromsubsymbolic nteractions.
In G. Adriaens andU.
Hahn (eds.
), Parallel Models of NaturalLanguage Computation.
New Jersey: AblexPublishing Co..270 6
