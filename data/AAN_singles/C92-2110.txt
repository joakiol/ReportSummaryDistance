Design Tool Combining Keyword Analyzer and Case-based Parser forDeveloping Natural Language Database InterfacesHideo  Sh imazu Seigo Ar i ta  Yosuke  Takash imaC&C In format ion  Techno logy  Research  Laborator iesNEC Corporat ion4-1-1 M iyazak i ,  M iyamae-ku  Kawa.sak i ,  Japan ,  216sh imazu%joke .c l .nec .co .
jp@uunet .uu .netABSTRACTWe have designed and experimentally implemented atool for developing a natural anguage systems thatcan accept extra-grammatical expressions, keywordsequences, and linguistic fragments, as well as ordinary natural anguage queries.
The key to this tool'sefficiency is its effective use of a simple keyword an-alyzer in combination with a conventional case-basedparser.
TILe keyword analyzer performs a majority ofthose queries which are simple data retrievals.
Sinceit uses only keywords in any qnery, this analyzer isrobust with regard to extra-grammatical expressions.Since little labor is required of the application de-signer in using the keyword analyzer portion of thetool, and since the case-based parser processes onlythose queries which the keyword analyzer fails to in-terpret, total labor required of the designer is lessthan that for a tool which employs a conventionalcase-based parser alone.1 In t roduct ionAs the number of commercial on-line databases in-creases, so does user need for pragmatic natural an-guage (NL) interface for communicating with tbosedatabases.
Case-based parsing is an effective ap-proach to constructing NL interfaces to databases \[1\]\[5\] \[7\] \[11\].
A standard case-based parser consists ba-sically of a pattern marcher and a case base whichstores a large number of linguistic pa~tern-conceptpairs.
In response to a new input query, the pat-tern matcher searches the case base for any matchinglinguistic patterns.
If one is found, its concept portionis output as a semantic representation f the given in-put query.
Though case-based parsing makes it easyto construct domain dependent NL interfaces, it hasseveral serious drawbacks:?
The application designer who uses it must defineall possible linguistic patterns.?
The application designer must also define a con-cept portion to correspond to each defined lin-guistic pattern.?
Since such pattern-concept definitions will behighly dependent oo tile nature of the specificapplication, they must bc newly defined for eachtarget system.In this paper, we propose a novel NL interface model,CAPIT (Cooperative Analyzer and Parser as Inter-face "Fool).
It is a self-contained NL interface build-ing tool for relational-like databases, and it integratesNL processing mechanisms with the mechanism usedfor the incremental acquisition of knowledge neededin that NL processing.
CAPIT combines a sim-ple keyword analyzer, KBP(Keyword-Based Parsingmodule), with a case-based parser, CBP(Case-BasedParsing module).
KBP extracts only keywords froman input sentence, and constructs a meaning for thesentence from them.
Since NL queries to on-linedatabases tend to be simple and straightforward,KIqP can interpret a majority of those queries.
How-ever, because it constructs the meaning only fromthe keywords, KBP sometimes fails to interpret them.The ease-based parser (CBP) is a supplemental mod-ule to KBP.
CBP is a conventional case-based parser.It consists of a pattern matcher and a case base.
Lin-guistic pattern-concept airs are stored in the casebase.
CBP must process only those queries whichKBP fails to interpret correctly.
Since an applica-tion designer do not have to define all the possiblelinguistic patterns, his/her labor required to definelinguistic pattern-concept airs is less than that for atool which employs a conventional case-based parseralone.AcrEs DE COLING-92, NAtCrES, 23-28 Aot';r 1992 7 3 5 PROC.
OF COLING-92, NAh'rEs, AUG. 23-28.
1992Input Sentence (Corpus)!Step-1 \[ Add Semantici Categery, Pattern, Case-Based and Mapping Parser Definitions(CBP)Step-2 steP-3\[ u .
.
.
.
.
he~Partially MatchedFl\]lly Matche~ \[ ApplicationKeyword DesiqnerAnalyzer( KBP )\ ]Pat te rn  Definition\]~Cor rect  ?
~ Interviewer 1- -_ ~ I (Pp~l 1Step-5 ~Figured: CAPIT FlowWe analyzed KBP's interpretation failures, and cat-egorized the types of KBP's interpretation failures.We regard defining pattern-concept airs for CBPas repairs of KBP's interpretation failures.
We de-fined four repair types which are corresponding toKBP's typical interpretation failures.
When all appli-cation designer encounters KBP's interpretation fail-ure, he/she analyzes it, then selects the best and eas-iest repair type.
Such a repair task is accomplishedinteractively between the application designer and thePattern Definition Interviewer module (PDI).2 CAP IT  F lowWe have been collecting Japanese corpora which un-trained users typed from computer terminals in orderto access on-line databases.
We found that the largepart of the corpora arc "Pass me salt" like simpledata retrievals front databases.
Many sentences havesimple grammatical or extra-grammatical structures.Complex linguistic patterns are very rare.
One ex-treme example is just a sequence of keywords like,"Dynamic Memory author", instead of asking "Whois the author of the book titled Dynamic Memory?
".We hypothesized that the processing mechanism forsuch simple expressions i different front a process-ing mechanism for grammatical expressions, The twoparsing module structure of CAPIT reflects this hy-pothesis.Figure-1 describes the flow of CAPIT.
First, the ap-plication designer who develops a NL interface us-ing CAPIT collects the corpora of users' queries inthe target domain.
A query of tile collected cor-pora is given to CAP1T one by one.
The case-basedparser (CBP) tries to interpret he sentence (Step-1).
If CBP finds a fully matched linguistic pattern inits case base, the corresponding concept is output asthe meaning for the input sentence (Step-2).
If CBPcan not find any matching pattern, ttle NL query ispassed to the keyword-bascd parsing module (KBP).If CBP finds a pattern which matches with a part oftile query in its case base, CBP replaces the matchedpart of the NL query with ttle corresponding concept,then passes the modified NL query to KBP (Step-3).KBP extracts only keywords from the query, and con-structs its meaning (Step-4).
KBP always constructsthe meaning for a given sentence.The meaning generated by CBP and/or KBP, isACRES DE COLING-92, NAhq'ES, 23-28 hOOI 1992 7 3 6 PRoc.
OF COLING-92, NANTES, AUG. 23-28, 1992h "book","title","named .
.
.
.
published"fleld-name Index field-name ir~dexTitle Author Publisher DateDynamic Memory Schank Cambridge 1983U.
PrSociety of Mind O S&S 1985I \[ield-v~lue index\["the fathe, r of AI","Minsky"\[Table-1 : A Database ExamplePrice page$15 240$20 339shown to the application designer.
Tile applicationdesigner judges whether or not the interpretation iscorrect (Step-5).
If it is correct, the examination us-ing tbis NL query finishes, mid the next NL query istaken from the corpora for the next examination.
Ifit is not correct, the Pattern Definition Interviewermodule (PI)I) is activated.
PDI asks the applica-tion designer for the correct interpretation of the NLquery.
He/she defines linguistic patterns and/or se-mantic concepts and/or the mappings between lin-guistic patterns and semantic oncepts for the NLquery (Step-6).
The new definition is stored in KBP'sknowledge base mid/or CBP's case base.
Next timeCAPIT encounters the same query or similar queriesto tile query, it succeeds in interpreting the queriescorrectly.After numbers of such examinations, CBP's case basebecomes rich, and tile NL interface application can bereleased.3 KBP  Mechan ismThis section describes the KBP mechanism, usinga simple example.
Table-1 shows a simple CAPITtarget database xample.
Linguistic patterns are at-tached as indices whicb refer to specific fields and thevalues of specific fields of records in tile table.
Forexample, the indices to the "Title" field are "book","title", "book name", "named", etc.
We call an indexto a field name field-name index.
An index attachedto the value of a field of a record is called field-valueindex.
For example, "the father of AI" is a field-valueindex to "Minsky" which is the value of tile "Au-thor" field in a specific record.
Values of each field ofeach record is itself a field-value index.
For example,"1983" is a field-value index to the value of "Date"field in a record.
Field-name indices and field-valueindices are stored in KBP's knowledge base.KBP always regards the meaning for a given NLquery a~s an imperative, "Select records in s tablewhich satisfy specific conditions, and return the valueof the requested fields from the selected records".
Tileimperative is represented in SQL:SELECT field-k, field-l, ...FROM target tableWHERE field-i = value-i,field-j = value-j ....... ;The KBP algorithm to generate the SQL expressionfrom a NL query is as follows:l. KBP extracts only field-name indices and field-value indices from a given NL query.
The rest oftile NL query arc abandoncd.2.
When a field-name index is extracted, its refer-ring field name is kept a.s a SELECT-clause ele-nlent.3.
When a field-value index is extracted, its refer-ring field value and the field name of the fieldvalue are kept as a WlIERE-clause element, intile form of (field name = field value).4.
After all extracted indices are processed, allSELECT-clause elements and WHERE-clauseelements are merged.
Then, they are assignedinto a SELECT-FROM-WlIERE structure.Next, we explain this algorithm, using a NL queryexample.AcrEs DE COLING-92, NAMES, 23-28 AoOr 1992 7 3 7 PRec.
or COL1NG-92.
NArcrEs.
And.
23-28.
1992SI: "Show me the books published by S&S".KBP extracts only "book", "published" and "S&S"from $1.
"Book" is a field-name index to tile "Title"field.
"Published" is a field-name index to the "Pub-lisher" field.
Since "S&S" is a field-value index to thevalue of the "Publisher" field, the WHERE-clause cle-ment, (Publisher = S&S) is kept.
From these indices,the following SQL command is generated:SELECT Title, PublisherFROM Table- 1WHERE Publisher = S&S;The SQL command is evaluated, and its answer is re-turned.
The answer is "Society of Mind" and "S&S".They are the reply to the above query.The actual KBP has several heuristic rules to se-lect SELECT-clause elements and WHERE-clause l-ements.
For example, the right answer to $1 is just"Society of Mind".
"S&S" must not be produced.With the actual KBP, a heuristic rule suppresses theproduction of "S&S" in the above example.Though the actual KBP is more complex than thissimple explanation, it is still very simple \[2\].
SinceKBP constructs a query meaning from only keywordsin a NL query, it can treat extra-grammatical expres-sions, keyword sequences and linguistic fragments, inthe same way as treating ordinary natural languagequeries.
For example, even the following strangequeries on Tabled are acceptable by KBP; "Publish-ers?
", "Dynamic Memory author",  "When the booknamed Society of Mind appear?
", "Society of Mind,how much", etc.4 The  Ro le  o f  CBP4.1 The Situations KBP Fails to In-terpretKBP can perform a majority of those queries whichare simple data retrievals.
So, in what kind of situa-tions does KBP fail to interpret?
CBP processes onlythose queries which KBP fails to interpret.
The ap-plication designer must define pattern-concept airswhich CBP uses to interpret such queries.
Therefore,we have to know the limitations of KBP's interpre-tation capability.
The followings are KBP's typicalfailure cases.Fa i lure-1 Cases an application designer forgot todefine necessary pattcrns as indices:If a necessary linguistic pattern is not defined as ei-ther field-name index or field-value index, KBP cannot interpret concerning NL queries correctly.Fa i lure-2 Cases a NL query includes idiomatic ex-pressions or spatial expressions:KBP can not generate correct meanings, if idiomaticexpressions like "greater than 10ft', or spatial expres-sions like "the switch between A and B" are includedin a NL query.Fa i lure-3 Cases the meaning for a NL query is notrepresented in tile form of SELECT-FROM-WHERE:KBP assumes that any NL query is translated into aSELECT-FROM-WHERE structure.
If a NL queryhas a different SQL structure, like SELECT-FROM-GROUP BY-tIAVING, KBP can not generate a cor-rect meaning.
For example, a NL query like "Selectauthor and its amount which is bigger than 1000" arerepresented with the SELECT-FROM-GROUP BY-I1AVING structure.Fa i lure-4 Cases the meaning for a NL query cannot be represented in SQL language:If a NL query is a meta-level question for the targetdatabase, like "What kind of information can I getfrom this?
", KBP can not interpret it.Fa i lure-5 Cases KBP generates many candidate in-terpretations of a NL query:Since KBP generates tile meaning for a NL query us-ing onty keywords in the query, it sometimes gener-ates not only a correct meaning but also wrong mean-ings.
\['or examptc, KBP generates several differentmeanings from the following query; "Show me thepublisher of the book titled L.A.".In order to avoid these KBP's failures, when KBP en-counters these failures, the application designer mustrepair the failures, by enriching and modifying eitherKBP's knowledge base and/or  CBP's case base.
Sucha failure-repair mechanism is analogous to those ofcase-based reasoning \[6\] \[8\].4.2 Repairs of KBP's  FailuresThere are four repair types of the KBP's failures.Three of the four are realized by defining a newlinguistic pattern-concept airs in CBP's case base.Failure-5 is solved by either of the four types.Repair -1 To define a linguistic pattern as either afield-name index or a field-value index:Ac'I'~ DE COLING-92, NANTEs, 23-28 AoIYr 1992 7 3 8 Prtoc.
OF COLING-92, NANTES, AUG. 23-28, 1992Figure-2: I,inguistic Pattern-SQL Pair in CBP forRepair-3This is corresponding to Failure-l, and is the easiestof the four repmr types.Repa i r -2  To define a pattern-concept air, wherethe concept part is represented as SELECT-clause el-ements and/or WHEH.E-clause lements:This is corresponding to Fuihtre-2.
This is usefill todefine idiomatic expressions or spatial expressions.Suppose that KBP could not interpret a NL querywhich included an expression, "price is more than$100, and less than $200".
The aPl)lieation designerjudges that the part of the query mnst be defined asa pattern-concept air.
Then, he/she defines a newpattern-concept air:\ [Def init ion- 1\]If a pattern sequence is:\[ "fiekl-nanm(Field), 1 {Field i~typc-of numerical}, ~more than, number(N1), le~s thmt, number(N2)" 1,do the followings:(1) to kee l) a field name, "Field", ,as a SELECT-clause element, and(2) to keep an expression, " Fiekl > N1, Field < N2",as a WHERE-clause lement.This definition means electing records whose "Field"has the value more than N1 and less than N2, andreturning the value of "Field" of the .selected records.Repa i r -3  '1"o define a pattern-concept air, wherethe concept part is represented as an SQL expressionwhich is not SELECT-FROM-WHERE:This is corresponding to Failure-3.
The applicationIA terliu start ing with a capital  letter  is a variable.2An expression tlurrounded by a pair of brace ({ ta*d )) is aconstraint to be satisfied.
It ia a meta~level description, al~d isnot regalx|ed as a Imrt of  pattern aequellce.17::::27:Figure 3: Linguistic Pattern-Semantic Concept Pairin CBI' for \]b~pair-4designer nmst enumeratively detine a new SQL struc-ture corresponding to a given linguistic pattern (SeeFigure-2).Repa i r -4  'fb define a pattern-concept air, wherethe concept is represented im u senlantic conceptwhich is a recta-level expression for the targetdatabase and can not be detined as an SQI, form:This is corresponding to Failure-4.
CAPIT provides aframe-like tanguage to deline semantic oncepts.
Theapplication designer detincs a new scm~mtic eonccl)tusing the language, l ie/she also defines a reply gemeration procedure.
The procedure is called when thecorresponding linguistic pattern is matched with aninput qucry (See Figure-3).Repair-4 is tile most dilficult of all repair types foran apl)tieation designer.
In Repair-d, he/she mustdctine not only a new semantic concept, but al.qothe definitions of slots in the semantic nncept, theprocedures which fill the slots, the relations betweenthe new semantic oncept with existing other sentan-tic coucepts~ various constraiuts anlong concepts, etc.lIowever, relnember that he/she must carry out sucheoml)licated tasks to al l  possible linguistic patterns inhis/her target domain, if he/she uses the case-basedparsing approach alone.5 Dia logue Example  betweenPDI  and an Appl icat ion De-signerPDI (Pattern Definition interviewer) is CAPIT'sinterface to all application designer.
A dialogue be-tween PDI and an application designer progresses asfollows:1.
PDI shows the application designer a NL querywhich both KBP and CBP have failed to inter-ACRES DE COLING-92, NAbrI'ES, 23-28 AO(.rr 1992 7 3 9 PROC.
OF COL1NG-92, NAN'rES, AUG. 23-28, 1992Lir~uistic PatternI why omissible (does) * exist Ifield-name indexname functionvcr-function-tableFigure 4: The Repair in the Sample Dialoguepret.
And, it asks him/her to define the correctinterpretation to process the input NL query.2.
The application designer analyzes tile reasonwhy KBP failed to interpret he NL query.3.
Tile application designer selects a repair typeof the failure, and performs the repair.
Thedefinition is stored in either KBP's knowledgebase or CBP's case base.
Here, he/she can gen-eralize/modify the linguistic pattern, using lin-guistic pattern generalization/modification oper-ators \[10\].4.
PDI retries interpreting the NL query again, andasks the application designer whether or not thenew interpretation is correct.
If it is correct, thedefinition process of the NL query ends.
If it isnot correct, go back to 1.Next, we show a typical sample dialogue betweenPD1 and an application designer.
The situation isthat the application designer is developing a guid-ance system which can understand various naturallanguage queries on a specific commercial VCR.
Theguidance system has an internal database containingdata about the functions and the elements of tile spe-cific VCR.
Each of them is represented its featuresin a record of the vet-function-table (Figure-4).
Thedialogue is an example of Failure-2 and Repair-2.
Inthis example, KBP and CBP are cooperatively gen-erating the meaning for a given sentence.Suppose, CAPIT is trying to interpret a new inputsentence,$2: "Why does PAUSE exist?
"Since CBP finds no matching pattern, $2 is sentto KBP.
KBP extracts keywords from the sentence.Then, KBP generates its meaning.
The KBP's inter-pretation and its generating meaning is shown to theapplication designer.
He/she rejects them.
He/shedefines a new linguistic pattern which matches withthe part of $2,"why omissible(does) * exist?
"as a field-name index to the "function" field of thetarget database (See Figure 4).
Here, "omissible" isa linguistic pattern modification operator \[10\], andthe special symbol, "*", ill a linguistic pattern, isa CAPIT's pattern definition notation, which meansthat it matches with any sequence of words.
Thisdefinition means that the reason why a specific el-ement exists is described in the "function" field ofits corresponding record.
Aftcr tire designer definestile repair of KBP's failure, PDI tries to interpret hesame sentence again.
This time, since CHP matches"why omissible(does) * exist" with a part of the $2sentence, CBP replaces tile matched part of tile $2sentence with its corresponding concept, that is the"function" field.
As a result, the input sentence istransformed into,$2': "field-name(function) PAUSE ?
".The transformed input sentence is passed to KBP.KBP extracts keywords from the input sentence.The extracted keywords are field-name(fimetion) andfield-value(PAUSE).
KBP generates a new SQL ex-pression, which is different from the previous one.The application designer judges if the new interpre-tation is right.\[PDI\] Next Sentence is: "Why does PAUSE exist?
"\[CBP\]: Unmatched!\[KBP\]: Extract Keywords:"PAUSE" is field-value index of "name".\[KBP\]: Meaning:(SELECT * FROM vcr-function-table WHERE name =PAUSE)\[PDI\]: ANSWER:Its NAME is PAUSE.
Its TYPE is SWITCII, ...\[PDI\]: CORRECT?
- > no.\[PDI\]: Please define the correct interpretation.
- >define-field-name-index (\[why, omissible(does), *, exist\],field-name(function)).\[PD1\] Retry Sentence: "Wily does PAUSE exist?
"\[CBP\]: Replaced to :\[field-name(function), PAUSE\]\[KBP\]: Extract Keywords:"PAUSE" is field-value index of "name".ACRES DE COLING-92, NANTES, 23-28 Ao(rr 1992 7 4 0 PROC.
OF COLING-92, NANTES, AUO.
23-28, 1992\[KBP\]: Meaning:(SELECT flmction FROM vcr-function-table WIIEREname = PAUSE)\[PDI\]: ANSWER:Its FUNCTION is ...\[PDI\]: CORRE(?YF?
- > yes.6 In Conc lus ionThe proliferation of commercial on-line databases basincreased to demand for natural anguage interfacesthat can be used by untrained people.
Real worldqueries include not only fully grammatical expres-sions but also such abbreviated expressions as a se-quence of keywords, etc \[9\] \[3\].
U .
.
.
.
will not use aNL interface unless it can also interpret such queries,and CAPIT has that capabilitySpeed is another important issue.
Telephone chargeand database access charge are based on time of use,and users require speed.
Users will not use a NL in-terface unless its response time is fast enough.
NI,interfaces designed with CAPIT are extremely fast.Users' queries are responded within a second.Ease of development and maintenance is also important.
CAPIT is a eombiuation of a keyword analyzerand a case-based parser.
Since little labor is requiredof the application designer in using the keyword an-alyzer portion of the tool, and since the case-basedparser processes only those queries whicb the keywordanalyzer fails to interpret, total labor required of thedesigner is less than that for a tool which employs aconventional case-based parser alone.
With CAPIT,it is possible to design an entirely new NL interfacewithin a matter of weeks.guage", Technical Report CMU-CS-84-107,Dept.
of Computer Science, CMU, 1984.\[4\] Cox, C.A., "ALANA Augmentable LANguageAnalyzer", l~ep.
UCB/CSD 86/283, 1986.\[5\] Hendrix, G.G., Saeerdoti, E.D., Sagalowicz, D.,anti Slocum, J., "Developing a Natural LanguageInterface to Complex Data", In ACM Trans.
onDatabase Systems, 1978.\[6\] Kolodner, J., "Retrieval and organizationalstrategies in conceptual memory: A computermodel", ltillsdale, NJ.
: Lawrence Erlbanm As-sociates, 1984.\[7\] Martin, C.E., "Cease-based Parsing", In 1n-side Case-based Reasoning edited by R. Schankand C. Riesbeck, Lawrence Erlbaum Associates,Ilillsdale, N J, 1989.\[8\] 1)~iesbeck, C.K., Schank, R.C., "Inside Case-based f~easoning", Lawrence Erlbaum Asso-ciates, |tillsdale, N J, 1989.\[9\] Sbneiderman, B., "Designing the User Inter-face", Addison-Wesley Pub., 1987.\[10\] Sbimazu, H. and Takashilna, Y., "AcquiringKnowledge for Natural Language InterpretationBased On Corpus Analysis", Proc.
of IJCAI'91Natural Language Learning Workshop, 1991.\[11\] Wilensky, IL et.
al., "UC - A Progress Report",Rep. UCB/CSD 87/303, 1986.References\[1\] Arens, Y., "CLUSTERS: An Approach toContextual Language Understanding', Rep.UCB/CSD 86/293, Ph.D. Thesis, 1986.\[2\] Arita, S., Shimazu, \]\[1., Takashima, Y., "Sim-ple + Robust -- Pragmatic: A Natural Lan-guage Query Processing Model for Card-typeDatabases", Proc.
of the 13th Annual Confer-ence of the Cognitive Science Society, 1992.\[3\] Carbonell, J.G., and Hayes, P.J., "Recov-ery strategies for parsing extragrammtical l n-AcrEs DE COLING-92, NANTES, 23-28 AOt~7' 1992 7 4 1 PROC.
OF COLING-92, NANTES, AUG. 23-28, 1992
