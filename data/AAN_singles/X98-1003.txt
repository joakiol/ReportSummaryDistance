TIPSTER LESSONS LEARNED: THE SE/CM PERSPECTIVEHarold Corbin and Aaron TeminLitton PRC1500 PRC Dr iveMcLean,  VA  22102{ corbin_hal ,  temin_aaron } @prc .comINTRODUCTIONThe TIPSTER architecture is a domain-specificsoftware architecture (DSSA) for the textprocessing domain.
The primary goal of thearchitecture was to allow the use of standardizetext processing components, enabling "plug andplay" capabilities of the various tools beingdeveloped.
This would permit the sharing ofsoftware among the various research efforts andoperational prototype applications.PRC, Inc., was the systems engineering andconfiguration management (SE/CM) contractor forthe TIPSTER program, phases II and III (1994-1998).
During this time we had close associationwith all the TIPSTER participants: Government,research contractors, and project contractors.
Ourprimary role was to support the TIPSTERArchitecture Committee and its co-chairpersons.We were able to observe the entire process ofcreating the TIPSTER architecture and applying itto research, projects, and the ArchitectureCapabilities Platform (ACP).The architecture was successful in many ways,though it also fell short of expectations in mostareas.
This paper describes our perspective on thearchitecture, to help subsequent efforts understandhow to benefit from, and efficiently extend, thearchitecture.BACKGROUNDIt will be helpful, in understanding the lessonslearned, to bear in mind some background of theTIPSTER program, the intended uses of thearchitecture, and the process used to develop thearchitecture.2.1 Relevant ProgrammaticsTIPSTER was a DARPA program, with fundingprovided primarily by DARPA, CIA, and NSA.Coordination among these agencies was formallyaccomplished by a Memorandum of Understanding(MOU).
The MOU specified overall fundingcontributions, and set the administrative guidelinesfor the three sponsoring agencies.
The TIPSTERResearch and Evaluation Committee (REC) wascharged with oversight responsibility of the 15research efforts and the Architecture Committeehad oversight of the architecture development andthe Architecture Capability Platform effort.
Eacheffort was managed independently by agovernment Contracting Officer's TechnicalRepresentative (COTR) and the goal was to havethe COTRs report o the appropriate committee.Phase III of the TIPSTER Text Programinitially was designed for three years.
The thirdyear, however, was eliminated ue to fundingshortfalls experienced by the government sponsors.2.2 Intended Uses of the ArchitectureThe architecture was intended to have twodirect applications:1.
Provide researchers with guidelines onbuilding their components o that theycould easily be used by other researcherswithin the program.
This would also meanthat duplication of effort could also bereduced when researchers shared commonpre-processing eeds, or when the output ofone research project could serve as theinput to another.2.
Provide developers with guidelines onbuilding entire applications, includinginterface specifications that would allowthe projects to incorporate advances madeby the researchers as those results becameavailable.There were also other intended effects, such asproviding guidance to those writing requirementsfor acquiring text processing systems, and helpingshape and publicize the TIPSTER program.172.3 The Development and Maintenanceof the ArchitectureThe basic development of the architecture wasdone over nearly two years (April 1994 - January1996) by the Contractors Architecture WorkingGroup (CAWG) with three-day technical meetingsabout once a month.
The CAWG was composed ofone or two people from each of the Phase IIcontractors.
These meetings were essentiallydiscussion and negotiation sessions among theparticipants.
E-mail discussions and additionalwork was conducted when the members returnedhome.
Later, after a baseline architecture wasestablished, procedures were established to modifyand improve the architecture through aRequest ForChange (RFC) process.
Near the end of Phase IIseveral RFCs were submitted and carried over intoPhase III, and several more RFCs were submittedduring Phase III.
RFCs were voted on by theArchitecture Committee, and revisions to thedesign document were made as RFCs wereapproved.TIPSTER included a mechanism called theEngineering Review Board, chaired by the SE/CM,which held reviews on TIPSTER projects andreported on differences between the architectureused by the project developers and the documentedTIPSTER architecture.
This was the major sourceof RFCs (though RFCs could be submitted atanytime).3 LESSON LEARNEDThis section describes several lessons webelieve have been learned as a result of havingpursued the development of the architecture.3.1 Architectures Are "Good Things toHave"Whatever the specific achievements or failingsof the current TIPSTER architecture, the consensusof the program is that having an architecture was agood idea.
It provided a central focus to anotherwise somewhat loosely-coupled set ofcontracts and it provided a forum for theresearchers to share concerns and make progresson areas of mutual interest.
It made it much easierto describe the program and its goals, both toparticipants and to outside interested parties.There was always a lot of great hope expressedin the architecture and a stated desire by allparticipants that its goals were important toachieve.
Though it may be judged that the finalTIPSTER architecture did not achieve all thesegoals, we should be encouraged by theachievements and use the lessons learned for animproved architecture in the future.
We shouldconsider architectures as a good idea for textprocessing systems.3.2 Programmatic Incentives May BeNecessary To Get The ArchitectureUsedUsually, an architecture is a model of standardsand interfaces used to development common,reusable components or modules in support ofvarious domain operational pplications.
Applyingthis concept o the research environment was newand unusual.
Normally, researchers are concernedwith new algorithms and concepts and are notinvolved in the bigger application or systempicture.
They must be properly indoctrinated in theneeds for an architecture, provided adequatesupport ools and directed to use the architecture.It can not be an optional consideration exceptwhere their work has no bigger contribution to anapplication.3.3 Direction and SupportIn Phase II, the Government and COTRs, wouldmeet once a month for architecture discussions.This provided common grounds to supportarchitecture development.
In Phase III, thesemeetings did not occur, with the result thatarchitecture development slowed because of lackof common guidance to the researchers as to theimportance of the architecture.
Also, the workstatements and funding for some of the researchersmay not have supported their needed contributionsto the architecture through the Technical WorkingGroups.The message here is that when there are somany contracts, a high level of coordination andcooperation is necessary.3.4 The Architecture Should BeAvailable At The BeginningSince the architecture was designed in parallelwith the researchers' main tasks it could not serveas a framework on which they could do their worksince it changed frequently.
Thus, there wasuncertainty as to the environment and structure intowhich their work should fit and how theircomponents would work with other components.18The architecture development process shouldhave proceeded quite differently.
The architectureshould have been essentially complete after two orthree months o the researchers would know aboutthe framework in which they were expected towork.
This improved schedule could have beenachieved by having an Architecture Design Team(ADT) consisting of no more than five peopleworking together continuously, at one location, fortwo or three months.
The ADT should becomprised of domain specialists AND systemspecialists.
A suggested composition would be:?
Two expert Document Detection computerlinguists?
Two expert Extraction computer linguists?
System Engineer and Chief Architect(knowledge of, and experience in, buildingreal applications i important)The major focus of the architecture for Phase IIIwas the development of a COmmon RequestBroker Architecture (CORBA) compliantArchitecture Capabilities Platform (ACP) to hostTIPSTER-compliant software components andmodules.
The ACP provides a software platform totest individual TIPSTER tools and capabilities.Developers will be able to demonstrate to theGovernment the modularity of their text handlingsystems by plugging components and modules intothe ACP and interacting with the other TIPSTERcomponents on the platform.
In addition, the ACPwill demonstrate the capability to interact withsystems based on Z39.50 standards.
The ACP willalso have various supporting components such asdocument collections, standard detection needs,lexicons, a document manager and a defaultgraphical user interface (GUI).The unavailability of the ACP in Phase III isvery similar to the unavailability of the architecturein Phase II.
Both were needed early so theresearchers could properly design and test theirproducts during development.
Even though therewas a limited budget for the ACP it probablywould have been more effective if most of themoney was loaded to the beginning of the projectso it could "get on the air" sooner.3.5 Architectures Can Promote Sharingand Increase EfficiencyText processing systems are complicatedsystems composed of many components.
Broadlyspeaking, these components are arranged in a serial3.6pipeline, each component building on the output ofthe preceding component.
While researchersconcentrated on developing individualcomponents, they all had need for input data.
Inthe extreme case shown in Figure 1, a version ofeach component m in an N-stage pipeline gets builtN-m+l times (by that many researchers).
Ideally,each component could be built once and thenshared (Figure 2).TIPSTER demonstrated this sharing withseveral components.
The most highly sharedcomponent was the Document Manager.
Severalversions (but far fewer than the number of researchefforts) were built and shared throughout Phases IIand III.
Lexicons, semantic nets, and some part-of-speech tagging components were also shared.There was also a great deal of discussion ofsharing that we feel would have materialized hadthere been more time (even simply the third year ofPhase III).
This component sharing was primarilyhampered by the delay of fielding the ACP.Architecture Design andApplication DevelopmentExperience Are CriticalThe CAWG approach could have been moretightly controlled, directed, and limited in duration.The contributors were experts in their particulardomain, but the group as a whole would havebenefited from additional expertise in systemarchitecture design.Early on it was apparent that the CAWG couldnot agree on the scope, selection, design or utilityof numerous mall modules.
This resulted in anarchitecture of large components (the equivalent ofa Computer Software Component in lifecycleterminology).
The issues the CAWG faced withsmall modules were ownership of algorithms andsoftware, module interfaces, which modules wouldbe designed and whether small modules weretechnically feasible.
There also appeared to besome resistance to the concept of a larger,generalized systems approach for TIPSTER.
Thisis somewhat understandable since many of theresearchers were used to working independently onsmall algorithmic pieces of code.The end result was that the architecture wasmade of three large components.
DocumentManager, Document Detection and InformationExtraction.
Since all of the researchers could use aDocument Manager, it became the center-piece of19Research proiect 1.................................. i i ................................. .t IResearch proiect 2Research project 3Research project 4Module 1 Module 2 Module 3 Module 4Figure 1: Each project builds its own copy of each module.Research proiect 1Research proiect 2Research proiect 3Research proiect 4Module 1 Module 2 Module 3 Module 4Figure 2: Each project reuses modules from other projects.204the architecture and controlled much of theremaining work of Phase II.
In our opinion, thissignificantly weakened the concept of anarchitecture that could be used to build a variety ofdomain applications.
If the document managerfunctions were smaller and more flexible, theywould likely have been able to support a broaderset of needs (e.g., detection researchers wereunable to develop a compliant document managerthat was also fast enough for their needs).
Theprogram also would have benefited from greaterfocus on the detection and extraction components.UNFINISHED WORKThe architecture currently is a work-in-progress.
Some things that might be considered fora future program are:The existing architecture is a mixture ofstandards, interfaces and implementationapproaches.
This causes confusion as towhat parts are really architecture and whichparts are module and component code.
Anoverhaul of the architecture is needed toseparate these things into a documentwhich provides organization and structurethrough standards augmented withcompliant modules which are built to thearchitecture standard as components in atoolbox.
The ACP is a partial step towardthe toolbox; however, more tools areneeded.The interfaces need clarification so thatthey specify only what is needed forcompatible interfaces, allowing fordifferent implementations that allowsystems to optimize for differentconstraints.
Many of the current interfacesare overly constrained.A standardized storage method fordocuments hould be established.
Thiswould allow different and possibly moreefficient Document Manager componentsto be used in the architecture on aninterchangeable basis.
If an architecture isas general, flexible and open-ended as theTIPSTER architecture, it becomes nearlyimpossible to have a application builtwhich can have interchangeablecomponents.?
Code should be provided which supportsthe Detection Need and Queries function.Since this is a generic function, a tool tosupport it is appropriate.The Pattern Specification Languagecapability should be completed and tested.This could be a critical area instandardizing rules to bring InformationExtraction technology up the level ofDocument Detection technology.5 DOCUMENTSFour basic TIPSTER document were preparedduring Phase II and updated during Phase III.These documents established the baselines forTIPSTER and were placed under configurationmanagement control.
The current versions of thedocuments are:TIPSTER Text Architecture Concept, Version 1.12TIPSTER Text Architecture Requirements, Version2.01TIPSTER Text Architecture Design, Version 3.1TIPSTER Text Configuration Management Plan,Version 1.36 CONCLUSIONIn presenting a brief history of the developmentof the TIPSTER architecture and an assessment ofits use and value, we hope to encourage futureprograms to undertake the development of adomain specific architecture and to enable thoseprograms to capitalize on the TIPSTER experienceso that a working-level architecture may bedeveloped.21
