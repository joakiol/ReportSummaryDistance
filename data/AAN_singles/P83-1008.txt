USING %-CALCULUS TO REPRESENT MF~kNINGS IN LOGIC GRAMMARS*David Scott WarrenComputer Science DepartmentSUNY at Stony BrookStony Brook, NY 11794ABSTRACTThis paper descrlbes how meanings are repre-sented in a semantic grammar for a fragment ofEnglish in the logic programming language Prolog.The conventions of Definite Clause Grammars areused.
Previous work on DCGs with a semantic com-ponent has used essentially first-order formulasfor representing meanings.
The system describedhere uses formulas of the typed ~-calculus.
Thefirst section discusses general issues concerningthe use of first-order logic or the h-calculus torepresent meanings, The second section describeshow h-calculus meaning representations can be con-structed and manipulated directly in Prolog.
This'programmed' representation motivates a suggestion,discussed in the third section, for an extensionto Prolog so that the language itself would includea mechanism for handling the ~-formulas directly.I h-CALCULUS AND FOL AS MEANINGREPRESENTATION LANGUAGESThe initial phase of most computer programsfor processing natural language is a translationsystem.
This phase takes the English text inputand transforms it into structures in some internalmeaning-representation language.
Most of thesesystems fall into one of two groups: those thatuse a variant of first-order logic (FOL) as theirrepresentation language, and those that use thetyped h-calculus (LC) for their representationlanguage.
(Systems based'on semantic nets or con-ceptual dependency structures would generally becalsslfied as using variants of FOL, but see\[Jones and Warren, 1982\] for an approach that viewsthem as LC-based.
)The system considered here are several highlyformalized grammar systems that concentrate on thetranslation of sentences of logical form.
Thefirst-order logic systems are exemplified by thosesystems that have developed around (or gravitatedto) logic programming, and the Prolog language inparticular.
These include the systems describedill \[Colmerauer 1982\], \[Warren 1981\], \[Dahl 1981\],\[Simmons and Chester 1982\], and \[McCord 1982\].The systems using the ~- calculus are those that* This material is based upon work supported by theNational Science Foundation under grant ~IST-80-10834developed out of the work of Richard Montague.They include the systems described in \[Montague1973\], \[Gawron et al 1982\], \[Rosenschein andSheiber 1982\], \[Schubert and Pelletier 1982\], and\[Warren and Friedman 1981\].
For the purposes ofthis paper, no distinction is made between theintensional logic of Montague grammar and thetyped h-calculus.
There is a mapping from inten-sional logic to a subset of a typed h-calculus\[Gallin 1975\], \[Clifford 1981\] that shows they areessentially equivalent in expressive power.All these grammar systems construct a formulato represent the meaning of a sentence composi-tionally over the syntax tree for  the sentence.They all use syntax directed translation.
This isdone by first associating a meaning structure witheach word.
Then phrases are constructed by syntac-tically combining smaller phrases together usingsyntactic rules.
Corresponding to each syntacticrule is a semantic rule, that forms the meaningstructure for a compound phrase by combinging themeanin~ structures of the component phrases.
Thisis clearly and explicitly the program used inMontague grammar.
It is also the program used inProlog-based natural language grammars with asemantic component; the Prolog language itselfessentially forces this methodology.Let us consider more carefully the meaningstructures for the two classes of systems of inter-est here: those based on FOL and those based onLC.Each of the FOL systems, given a declarativesentence as input, produces a well-formed formulain a first-order logic to represent the meaning ofthe sentence.
This meaning representation lo~icwill be called the MRFOL.
The MILFOL has anintended interpretation based on the real world.For example, individual variables range over ob-jects in the world and unary predicate symbols areinterpreted as properties holding of those realworld objects.As a particular recent example, considerDahl's system \[1981\].
Essentially the sameapproach was used in the Lunar System \[Woods, etal.
1972\].
For the sentence 'Every man walks',Dahl's system would produce the expression:for(X,and(man(X),not walk(X)),equal(card(X),0))where X is a variable that ranges over real-world51individuals.
This is a formula in Dahl's MRFOL,and illustrates her meaning representation lang-uage.
The formula can be paraphrased as "the X'swhich man is true of and walk is not true of have?ardinality zero."
It is essentially first-orderbecause the variables range over individuals.
(There would need to be some translation for thecard function to work correctly.)
This examplealso shows how Dahl uses a formula in her MRFOL asthe meaning structure for a declarative sentence.The meaning of the English sentence is identifiedwith the meaning that the formula has in the in-tended interpretations for the MRFOL.Consider mow the meaning structure Dahl usesfor phrases of a category other than sentence, anoun phrase, for example.
For the meaning of anoun phrase, Dahl uses a structure consisting ofthree components: a variable, and two 'formulas'.As an example, the noun phrase 'every man' has thefollowing triple for its meaning structure:\[X1,X/,for(Xl,and(man(Xl),not(X2)),eqnal(card(Xl),0))\].We can understand this structure informally bythinking of the third component as representingthe meaning of 'every man'.
It is an object thatneeds a verb phrase meaning in order to becomea sentence.
The X2 stands for that verb-phrasemeaning.
For example, during constz~ction of themeaning of a sentence containing this noun phraseas the subject, the meaning of the verb-phrase ofthe sentence will be bound to X2.
Notice that thecomponents of this meaning structure are not them-selves formulas in the MRFOL.
They look very muchlike FOL formulas that represent meanings, but oncloser inspection of the variables, we find thatthey cannot be.
X2 in the third component is inthe position of a formula, not a term; 'not'applies to truth values, not to individuals.
ThusX2 cannot be a variable in the M1%FOL, because X2would have to vary over truth values, and all FOLvariables vary over individuals.
So the thirdComponent is not itself a MIRFOL formula that (inconjunction with the first two components) repre-sents the meaning of the noun phrase, 'every man'.The intuitive meaning here is clear.
Thethird compdnent is a formula fragment that partici-pates in the final formula ultimately representingthe meaning of the entire sentence of which thisphrase is a subpart.
The way this fragment Dartic-ipates is indicated in part by the variable X2.It is important to notice that X2 is, in fact, asyntactic variable that varies over formulas, i,e.,it varies over certain terms in the MRFOL.
X2 willhave as its value a formula with a free variable init: a verb-phrase waiting for a subject.
The X1in the first component indicates what the freevariable must become to match this noun phrasecorrectly.
Consider the operation of putting XIinto the verb-phrase formula and this into thenoun-phrase formula when a final sentence meaningis constructed.
In whatever order this is done,there must be an operation of substitution a for-mula with a free variable (XI) in it, into thescope of a quantifier ('for') that captures it.Semantically this is certainly a dubious operation.The point here is not that this system iswrong or necessarily deficient.
Rather the repre-sentation language used to represent meanings forsubsentential components is not precisely theMRFOL.
Meaning structures built fo~ subcomponentsare, in general, fra~rments of first-order formulaswith some extra notation to be used in furtherformula construction.
This means, in general, thatthe meanings of subsentential phrases are not givena semantles by first-order model theory; themeanings of intermediate phrases are (as far astraditional first-order logic is concerned) merelyuninterpreted data structures.The point is that the system is building terms,syntactic objects, that will eventually be put to-gether to represent meanings of sentences.
Thisworks because these terms, the ones ultimatelyassociated with sentences, always turn out to beformulas in the MRFOL in just the right way.
How-ever, some of the terms it builds on the way to asentence, terms that correspond to subcomponents ofthe sentence, are not in the MRFOL, and so do nothave a interpretation in its real world model.Next let us move to a consideration of thosesystems which use the typed l-calculus (LC) astheir meaning representation language.
Consideragain the simple sentence 'Every man walks'.
Thegrammar of \[Montague 1973\] associates with thissentence the meaning:forail(X,implies(man(X),waik(X)))(We use an extensional fragment here for simplic-ity.)
This formula looks very much like the first-order formula given above by the Dahl system forthe same sentence.
This formula, also, is a for-mula of the typed X-calculus (FOL is a subset ofLC).
Now consider a noun phrase and its associatedmeaning structure in the LC framework.
For 'everyman' the meanin~ structure is:X(P,forall(X,implies(man(X),P(X))))This meaning structure is a formula in the k-calculus.
As such it has an interpretation in theintended model for the LC, just as any other for-mula in the language has.
This interpretation isa function from properties to truth-values; ittakes properties that hold of every man to 'true'and all other properties to 'false'.
This showsthat in the LC framework, sentences and subsenten-tial phrases are given meanings in the same way,whereas in FOL systems only the sentences havemeanings.
Meaning structures for sentences arewell-formed LC formulas of type truth-value; thosefor other phrases are well-formed LC terms ofother types.Consider this k-formula for 'every man' andcompare it with the three-tuple meaning structurebuilt for it in the Dahl system.
The ~-variableP plays a corresponding role to the X2 variable ofthe triple; its ultimate value comes from a verb-phrase meaning encountered elsewhere in thesentence.First-order logic is not quite expressive52enough to represent directly the meanings of thecategories of phrases that can be subcomponents ofsentences.
In systems based on first-order logic,this l imitation is handled by explicit ly construc-ting fragments of formulas, with extra notation toindicate how they must later combine with otherfragments to form a true first-order formula thatcorrectly represents the meaning of the entiresentence.
In some sense the construction of thesemantic representation is entirely syntactic untilthe full sentence meaning structure is constructed,at which point it comes to a form that does have asemantic interpretation.
In contrast, in systemsthat use the typed l-calculus, actual formulas ofthe formal language are used at each step, thelanguage of the l-calculus is never left, and thebuilding of the semantic representation can actu-ally be understood as operations on semanticobjects.The general idea of how to handle the examplesentence 'Every man walks' in the two systems isessentially the same.
The major difference is howthis idea is expressed in the available languages.The LC system can express the entire idea in itsmeaning representation language, because the typedl-calculus is a more expressive language.The obvious question to ask is whether thereis any need for semantically interpretable meaningrepresentations at the subsentential level.
Oneimportant reason is that to do formal deduction onsubsentential components, their meanings must berepresented in a formal meaning representationlanguage.
LC provides such a language and FOLdoes not.
And one thing the field seems to havelearned from experience in natural language proc-essing is that inferencing is useful at all levelsof processing, from words to entire texts.
Thispoints us toward something like the LC.
Theproblem, of course, is that because the LC is soexpressive, deduction in the full LC is extremelydifficult.
Some problems which are decidable inFOL become undecidable in the l-calculus; someproblems that are semi-decidable in FOL do noteven have partial decision procedures in the LC.It is certainly clear that each language has limi-tations; the FOL is not quite expressive enough,and the LC is much too powerful.
With this inmind, we next look at some of the implications oftrying to use the LC as the meanin~ representationlanguage in a Proiog system.II LC IN PROLOGPROLO~ is extremely attractive as a lan~uaFefor expressinE grammars.
~tamorphos is  ~rammars\[Colmerauer 197g\] and Definite Clause Grammars(DCGs) \[Pereira and ICarren 1980\] are essentiallyconventions for representing grammars as logicprograms.
DCGs can perhaps most easily be under-stood as an improved cersion of the AugmentedTransition Network language \[Woods 1970\].
Otherwork on natural language in the PROLOG frameworkhas used firs$-order meaning representation lang-uages.
The rest of this paper explores the impli-cations of using the l-calculus as the meaningrepresentation language for a system written inPROLOG using the DCG conventions.The followin~ paragraphs describe a systemthat includes a very small grammar.
The point ofthis system is to investigate the use of PROLOG toconstruct meanings with the %-calculus as themeaning representation language, and not toexplore questions of l inRulstic coverage.
Thegrammar is based on the grammar of \[Montague 1973\],but is entirely extensional.
Including inten-sionality would present no new problems inprinciple.The idea is very simple.
Each nonterminalin the grammar becomes a three-place predicate inthe Prolog program.
The second and third placesindicate locations in the input string, and arenormally suppressed when DCGs are displayed.
Thefirst piece is the LC formula representing themeaning of the spanned syntactic component.Lambda-formulas are represented by Prolo~terms.
The crucial decision is how to representvariables in the h-formulas.
One 'pure' way is touse a Prolog function symbol, say ivar, of oneargument, an integer.
Then Ivar(37) would repre-sent a l-variable.
For our purposes, we need notexplicit ly encode the type of %-terms, since aiithe formulas that are constructed are correctlytyped.
For other purposes it might be desirableto encode explicit ly the type in a second argumentof ivar.
Constants could easily be representedusing another function symbol, icon.
Its firstargument would identify the constant.
A secondargument could encode its type, if desired.
Appli-cation of a l-term to another is represented usingthe Prolog function symbol lapply, which has twoargument places, the first for the function term,the second for the argument term.
Lambda abstrac-tion is represented using a function symbol ~ withtwo arguments: the ~-variable, and the functionbody.
Other commonly used connectives, such as'and' and 'or', are represented by similarly namedfunction symbols with the appropriate number ofargument places.
With this encoding scheme, theh-term:%P(3x(man(x)  & P(x))would be represented by the (perhaDs somewhatawkward-looking) Prolo~ term:lambda(Ivar(3),Ithereis(ivar(1), land(lapply( icon(man), l~r(1))lapply(ivar(3),ivar(1)))))~-reduction would be coded as a predicate ireduce(Form, Reduced), whose first argument is an arbi-trary %-formula, and second is its ~-reduced form.This encoding requires one to generate newvariables to create variants of terms in order toavoid collisions of %-variables.
The normal wayto avoid collisions is with a global 'gensym'counter, to insure the same variable is never usedtwice.
One way to do this in Prolog is to include53a place for the counter in each grarmnar predicate.This can be done by including a parameter whichwill always be of the form gensym(Left,Right),where Left is the value of the gensym counter atthe left end of the phrase spanned by the predicateand Right is the value at the right end.
Any useof a k-variable in building a l-formula uses thecounter and bumps it.An alternative and more efficient way to en-code k-terms as Prolog terms involves using Prologvariables for l-variables.
This makes the substi-tution trival, essentially using Prolog's built-lnfacility for manipulating variables.
It does, how-ever, require the use of Prolog's meta-logicalpredicate var to test whether a Prolog variable iscurrently instantiated to a variable.
This isnecessary to prevent the k-varlables from beingused by Prolog as Prolog variables, In the examplebelow, we use Prolog variables for X-varlables andalso modify the Icon function encoding of con-s=ants, and let constants stand for themselves.This results in a need to use the meta-logicalpredicate atom.
This encodin E scheme might bestbe considered as an efficiency hack to use Prolog'sbuilt-in variable-handllng facilities to speed theA-reduction.We give below the Prolog program that repre-sents a small example grammar with a few rules.This shows how meaning structures can be repre-sented as l-formulas and manipulated in Prolog.Notice the simple, regular structure of the rules.Each consists of a sequence of grammar predicatesthat constructs the meanings of the subcomponents,followed by an instance of the ireduce predicatethat constructs the compound meaning from the com-ponent meanings and l-reduces the result.
Thesyntactic manipulation of the formulas, which re-sults for example in the relatively simple formulafor the sentence 'Every man walks' shown above, isdone in the h-reductlon performed by the ireducepredicate./**/tS(M,X,Y) :-te(Ml,X,Z).iv(M2,Z,Y),ireduce(lapply(Mi,M2),M).te(M,X,Y) :-det(Mi,X,Z),cn(M2,Z,Y),lreduce(lapply(}~,M2),M).te(lambda(P,lapply(P,j)),\[johnIX\],X).cn(man,\[manlX\],X).cn(woman,\[womanIX\],X).det(lambda(P,lambda(Q,iforall(Z,limplies(lapply(P,Z),lapply(Q,Z))))),\[everyIX\],X)iv(M,X,Y) :-tv(MI,X,Z),te(M2,Z,Y),ireduce(lapply(Mi,M2),M).
*/iv(walk,\[walkslX\],X).tv(lambda(P,lambda(Q,lapply(P,lambda(Y,lapply(lapply(love,Y),Q))))),\[loves\[X\],X)./*III I-CAT.CULUS IN THE PROLOG INTERPRETERThere are several deficiencies in this Prologimplementation of grammars using the X-calculus asa meaning representation language.First, neither of the suggested implementa-tions of X-reduction in Prolog are particularlyattractive.
The first, which uses first-orderconstants to represent variables, requires theaddition of a messy gensym argument place to everypredicate to simulate the global counter, Thisseems both inelegant and a duplication of effort,since the Prolog interpreter has a similar kind ofvariable-handling mechanism built into it.
Thesecond approach takes advantage of Prolog's built-in variable facilities, but requires the use ofProlog's meta-logical facilities to do so.
Thisis because Prolog variables are serving two func-tions, as Prolog varlabies and as h-variables.The two kinds of variables function differentlyand must be differentiated.Second, there is a problem with invertibility.Many Prolog programs are invertible and may be run'backwards'.
We should be able, for example, toevaluate the sentence grammar predicate giving themeaning of a sentence and have the system producethe sentence itself.
This ability to go from ameaning formula back to an English phrase thatwould produce it is one of the attractive proper-ties of logic grammars.
The grammar presentedhere can also be run this way.
However, a carefullook at this computation process reveals that withthis implementation the Prolog interpreter performsessentially an exhaustive search.
It generatesevery subphrase, h-reduces it and checks to see ifit has the desired meaning.
Aside from being theo-retically unsatisfactory, for a grammar much largerthan a trivially-small one, this approach would notbe computationally feasible.So the question arises as to whether theProlog interpreter might be enhanced to know aboutl-formulas andmanipulate them directly.
Then theProlog interpreter itself would handle the X-reduc-tion and would be responsible for avoiding variablecollisions.
The logic grammars would look evensimpler because the ireduce predicate would notneed to be explicitly included in each grammarrule.
For example, the ts clause in the grammar inthe figure above would become:ts(lapply(MI,M2),X,Y)te(MI,X,Z),iv(M2,Z,Y).54Declarations to the Prolog interpreter couldbe included to indicate the predicate argumentplaces that contain l-terms.
Consider what wouldbe involved in this modification to the Prolog sys-tem.
It might seem that all that is required isjust the addition of a l-reduction operatorapplied to l-arguments.
And indeed when executingin the forward direction, this is essentially allthat is involved.Consider what happens, however, if we wishto execute the grammar in the reverse direction,i.e., give a l-term that is a meaning, and havethe Prolog system find the English phrase that hasthat meaning.
Now we find the need for a 'l-expan-sion' ability.Consider the situation in which we presentProlog with the following goal:ts(forall(X,implies(man(X),walk(X))),S,\[\]).Prolog would first try to match it with $he headof the ts clause given above.
This would requirematching the first terms, i.e.,forall(X,implies(lapply(man,X),lapply(walk,X)))andlapply(Mi,M2)(using our encoding of l-terms as Prolog terms.
)The marcher would have available the types of thevariables and terms.
We would like it to be ableto discover that by substituting the right termsfor the variables, in particular substitutinglambda(P,forall(X,implies(lapply(man,X),lapply(P,X))))andwalk for M2for M1in the second term, it becomes the same as thefirst term (after reduction).
These MI and M2values would then be passed on to the te and ivpredicates.
The iv predicate, for example, caneasily find in the facts the word to express themeaning of the term, walk; it is the work 'walks'and is expressed by the fact iv(walk,\[walksIX\],X),shown above.
For the predicate re, given the valueof MI, the system would have to match it againstthe head of the te clause and then do furthercomputation to eventually construct the sentence.~at  we require is a general algorithm formatching l-terms.
Just as Prolog uses unificationof first-order terms for its parameter mechanism,to enhance Prolog to include l-terms, we needgeneral unification of l-~erms.
The problem isthat l-unlficatlon is much more complicated thanfirst-order unification.
For a unifiable pair offirst-order terms, there exists a unique (up tochange of bo~md variable) most general unifier(mgu) for them.
In the case of l-terms, this isnot true; there may be many unifiers, which arenot generalizations of one another.
Furthermoreunification of l-terms is, in general, undecidable.These facts in themselves, while perhaps dis-couraging, need not force us to abandon hope.
Thefact that there is no unique mgu just contributesanother place for nondeterminism to the Prologinterpreter.
And all interpreters which have thepower of a universal Turing machine have undecid-able properties.
Perhaps another source of unde-cidability can be accommodated.
Huet \[197~\] ',-sgiven a semi-decision procedure for unification inthe typed l-calculus.
The question of whether thisapproach is feasible really comes down to the finerproperties of the unification procedure.
It seemsnot unreasonable to hope that in the relativelysimple cases we seem to have in our grammars, thisprocedure can be made to perform adequately.Notice that, for parsing in the forward direction,the system will always be unifying a l-term with avariable, in which case the unification problem istrivial.
We are in the process of programmingHuet's algorithm to include it in a simple Prolog-like interpreter.
We intend to experiment with itto see how it performs on the l-terms used torepresent meanings of natural language expressions.Warren \[1982\] points out how some suggestionsfor incorporating l-calculus into Prolog are moti-vated by needs that can easily and naturally bemet in Prolog itself, unextended.
Following hissuggestions for how to represent l-expressions inin Prolo~ directly, we would represent the meaningof a sentence by a set of asserted Prolog clausesand an encoding atomic name, which would have tobe generated.
While this might be an interestingalternate approach to meaning representations, itis quite different from the ones discussed here.IV CONCLUSIONSWe have discussed two alternatives for meaningrepresentation languages for use in the context oflo~ic grammars.
We pointed out how one advantageof the typed l-calculus over first-order logic isits ability to represent directly meanings ofphrases of all syntactic cateBories.
We thenshowed how we could implement in Prolog a logicgrammar using the l-calculus as the meaning repre-sentation languaEe.
Finally we discussed thepossibility and some of the implications of tryingto include part of the l-calculus in the logic pro-gramming system itself.
We suggested how such anintegration might allow grammars to be executedbackwards, generating English sentences from inputlogical forms.
~ intend to explore this furtherin future work.
If the l-calculus can be smoothlyincorporated in the way suggested, then naturallanguage grammar writers will find themselves'programming' in two languages, the first-orderlanguage (e.g.
Prolog) for syntax, and the typedl-calculus (e.g.
typed LISP) for semantics.As a final note regarding meaning representa-tion languages: we are still left with the feelingthat the first-order languages are too weak toexpress the meanings of phrases of all categories,and that the l-calculus is too expressive to be55computatlonally tractable.
There is a third classof languages that holds promise of solving boththese difficulties, the function-level languagesthat have recently been developed in the area ofprogranm~ing languages \[Backus 1978\] \[$hultis 1982\].These languages represent functions of varioustypes and thus can be used to represent the mean-ings of subsentential phrases in a way similar tothe l-calculus.
Deduction in these languages iscurrently an active area of research and much isbeginning to be known about their algebraic prop-erties.
Term rewriting systems seem to be apowerful tool for reasoning in these languages.I would not be surprised if these functlon-levellanguages were to strongly influence the formalmeaning representation languages of the future.V REFERENCESBackus, J.
\[1978\] Can Programming Be liberatedfrom the yon Neumann Style?
A Functional Styleand Its Algebra of Programs, Co~unicatlons ofthe ACM, Vol 21, No 8, (Aug 1978), 613-641.Clark, K.L and S.-A.
T~rnlund (eds.)
\[1982\] LogicProgramming, Academic Press, New York, 366 pp.Clifford, J.
\[1981\] ILs: A formulation ofMontague's intenslonal logic that includesvariables and constants over indices.
TR#81-029,Department of Computer Science, SUNY, StonyBrook, New York.Colmerauer, A.
\[1978\] Metamorphosis Grammars, inNatural Language Conm~unication with Computers,Vol i, Sprlnger Verlag, 1978, 133-189.Colmerauer, A.
\[1982\] An Interesting Subset ofNatural Language, in Logic Pro~rarming, Clark,K.L and 3.-A T~rnlund (eds.
), 45-66.Dahl, Veronica \[1981\] Translating Spanish intoLogic through Logic, American Journal ofComputational Linguistics, Vol 7, No 3, (Jul-Sep 1981), 149-164.Gallln, D. \[1975\] Intensional and Higher-orderModal Logic , North-Holland Pubilshing Company,Amsterdam.Gawron, J.M., et.al.
\[1982\] The GPSG LinguisticSystem, Proceedings 20th Annual Meetin~ of theAssociation for Computational Linguistics, 74-81.Huet, G.P.
\[1975\] A Unification Algorithm for Typedl-Calculus, Theoretical Computer Science, Vol i,No i, 22-57.Jones, M.A., and Warren, D.S.
\[1982\] ConceptualDependency and Montague Grammar: A step towardconciliation, Proceedings of the NationalConference #nn A~tificial Intelli~ence, AAAI-82,79-83.McCord, M. \[1982\] Using Slots and Modifiers inLogic Grammars for Natural Language, ArtificalIntelligence, Vol 18, 327-367.Montague, Richard \[1973\] The proper treatment ofquantification in ordinary English, (PTQ),reprinted in Montague \[1974\], 246-270.Montague, Richard \[1974\] Formal Philosophy:Selected Paper of Richard Montague, edited andwith an introduction by R. Thomason, YaleUniversity Press, New Haven.Pereira, F.C.N.
and Warren, D.H.D.
\[1980\] DefiniteClause Grammars for Language Analysis - A surveyof the formalism and a Comparison with AugmentedTransition Networks.
Artificial Intelligence13,3 (May 1980) 231-278.Rosenschein, S.J.
and Shieber, S.M.
\[1982\]Translating English into Logical Form,Proceedings of the 20th Annual Meeting of theAssociation for Comp-~ational Linguistics,June 1982, Toronto, 1-8.Schubert L.K.
and Pelletier F.J. \[1982\] FromEnglish to Logic: Context-free Computation of'Conventional' Logical Translation, AmericanJournal of Computational Linguistics, Vol 8,NO 1, (Jan-Mar 1982), 27-44.Shultls, J.
\[1982\] Hierarchical Semantics,Reasoning, and Translation, Ph.D. Thesis,Department of Computer Science, SUNY, StonyBrook, New York.Simmons, R.F.
and Chester, D. \[1982\] RelatingSentences and Semantic Networks with ProceduralLogic, Communications of the ACM, Vol 25, Num 8,(August, 1982), 527-546.Warren, D.H.D.
\[1981\] Efficient processing ofinteractive relational database queriesexpressed in logic, Proceedings of the 7thConference on Very Large Data Bases, Cannes,~72-281,Warren, D.H.D.
\[1982\] Higher-order extensions toPROLOG: are they needed?
Machine Intelligence i~Ilayes, Michie, Pao, eds.
Ellis Horwood Ltd.Chlchester.Warren, D.S.
and Friedman, J.
\[1981\] UsingSemantics in Noncontext-free Parsing of MontagueGrammar, TR#81-027, Department of ComputerScience, SUNY, Stony Brook, New York, (toappear).Woods, W.A.
\[1970\] Transition Network Grammars forNatural Language Analysis, Communications of theACM, Vol i, No I0, (Oct 1970).Woods, W.A., Kaplan, R.M., and Nash-Webber, B.\[19721 The Lunar Science Natural LanguageInformation System: Final Report, BBN ReportNo.
2378, Bolt Baranek and Newman, Cambridge,56
