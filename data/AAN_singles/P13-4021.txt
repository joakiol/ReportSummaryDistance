Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 121?126,Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational LinguisticsDKPro Similarity: An Open Source Framework for Text SimilarityDaniel Ba?r?, Torsten Zesch?
?, and Iryna Gurevych??
?Ubiquitous Knowledge Processing Lab (UKP-TUDA)Department of Computer Science, Technische Universita?t Darmstadt?Ubiquitous Knowledge Processing Lab (UKP-DIPF)German Institute for Educational Research and Educational Informationwww.ukp.tu-darmstadt.deAbstractWe present DKPro Similarity, an opensource framework for text similarity.
Ourgoal is to provide a comprehensive repos-itory of text similarity measures whichare implemented using standardized inter-faces.
DKPro Similarity comprises a widevariety of measures ranging from onesbased on simple n-grams and commonsubsequences to high-dimensional vectorcomparisons and structural, stylistic, andphonetic measures.
In order to promotethe reproducibility of experimental resultsand to provide reliable, permanent ex-perimental conditions for future studies,DKPro Similarity additionally comes witha set of full-featured experimental setupswhich can be run out-of-the-box and beused for future systems to built upon.1 IntroductionComputing text similarity is key to several natu-ral language processing applications such as au-tomatic essay grading, paraphrase recognition, orplagiarism detection.
However, only a few textsimilarity measures proposed in the literature arereleased publicly, and those then typically do notcomply with any standardization.
We are currentlynot aware of any designated text similarity frame-work which goes beyond simple lexical similarityor contains more than a small number of measures,even though related frameworks exist, which wediscuss in Section 6.
This fact was also realizedby the organizers of the pilot Semantic TextualSimilarity Task at SemEval-2012 (see Section 5),as they argue for the creation of an open sourceframework for text similarity (Agirre et al 2012).In order to fill this gap, we present DKPro Sim-ilarity, an open source framework for text simi-larity.
DKPro Similarity is designed to comple-ment DKPro Core1, a collection of software com-ponents for natural language processing based onthe Apache UIMA framework (Ferrucci and Lally,2004).
Our goal is to provide a comprehensiverepository of text similarity measures which areimplemented in a common framework using stan-dardized interfaces.
Besides the already availablemeasures, DKPro Similarity is easily extensibleand intended to allow for custom implementations,for which it offers various templates and exam-ples.
The Java implementation is publicly avail-able at Google Code2 under the Apache SoftwareLicense v2 and partly under GNU GPL v3.2 ArchitectureDKPro Similarity is designed to operate in ei-ther of two modes: The stand-alone mode al-lows to use text similarity measures as indepen-dent components in any experimental setup, butdoes not offer means for further language process-ing, e.g.
lemmatization.
The UIMA-coupled modetightly integrates similarity computation with full-fledged Apache UIMA-based language processingpipelines.
That way, it allows to perform any num-ber of languge processing steps, e.g.
coreferenceor named-entitiy resolution, along with the textsimilarity computation.Stand-alone Mode In this mode, text similaritymeasures can be used independently of any lan-guage processing pipeline just by passing them apair of texts as (i) two strings, or (ii) two lists ofstrings (e.g.
already lemmatized texts).
We there-fore provide an API module, which contains Javainterfaces and abstract base classes for the mea-sures.
That way, DKPro Similarity allows for amaximum flexibility in experimental design, as thetext similarity measures can easily be integratedwith any existing experimental setup:1code.google.com/p/dkpro-core-asl2code.google.com/p/dkpro-similarity-asl1211 TextSimilarityMeasure m =new GreedyStringTiling();2 double similarity =m.getSimilarity(text1, text2);The above code snippet instantiates the GreedyString Tiling measure (Wise, 1996) and then com-putes the text similarity between the given pair oftexts.
The resulting similarity score is normal-ized into [0, 1] where 0 means not similar at all,and 1 corresponds to perfectly similar.3 By us-ing the common TextSimilarityMeasureinterface, it is easy to replace Greedy String Tilingwith any measure of choice, such as Latent Se-mantic Analysis (Landauer et al 1998) or ExplicitSemantic Analysis (Gabrilovich and Markovitch,2007).
We give an overview of measures availablein DKPro Similarity in Section 3.UIMA-coupled Mode In this mode, DKProSimilarity allows text similarity computation tobe directly integrated with any UIMA-based lan-guage processing pipeline.
That way, it is easy touse text similarity components in addition to otherUIMA-based components in the same pipeline.For example, an experimental setup may require tofirst compute text similarity scores and then to runa classification algorithm on the resulting scores.In Figure 1, we show a graphical overview ofthe integration of text similarity measures (right)with a UIMA-based pipeline (left).
The pipelinestarts by reading a given dataset, then performsany number of pre-processing steps such as to-kenization, sentence splitting, lemmatization, orstopword filtering, then runs the text similar-ity computation, before executing any subsequentpost-processing steps and finally returning the pro-cessed texts in a suitable format for evaluation ormanual inspection.
As all text similarity measuresin DKPro Similarity conform to standardized in-terfaces, they can be easily exchanged in the textsimilarity computation step.With DKPro Similarity, we offer various sub-classes of the generic UIMA components whichare specifically tailored towards text similarity ex-periments, e.g.
corpus readers for standard eval-uation datasets as well as evaluation componentsfor running typical evaluation metrics.
By lever-aging UIMA?s architecture, we also define an3Some string distance measures such as the Levenshteindistance (Levenshtein, 1966) return a raw distance scorewhere less distance corresponds to higher similarity.
How-ever, the score can easily be normalized, e.g.
by text length.UIMA-based PipelineCorpus ReaderPre-processingText SimilarityComputationPost-processingEvaluationSimilarityScorerText Similarity MeasuresGreedy String TilingDouble Metaphone...Explicit Sem.
AnalysisFigure 1: DKPro Similarity allows to integrate anytext similarity measure (right) which conforms tostandardized interfaces into a UIMA-based lan-guage processing pipeline (left) by means of adedicated Similarity Scorer component (middle).additional interface to text similarity measures:The JCasTextSimilarityMeasure inheritsfrom TextSimilarityMeasure, and adds amethod for two JCas text representations:4double getSimilarity(JCas text1, JCas text2);The additional interface allows to implement mea-sures which have full access to UIMA?s documentstructure.
That way, it is possible to create textsimilarity measures which can use any piece of in-formation that has been annotated in the processeddocuments, such as dependency trees or morpho-logical information.
We detail the new set of com-ponents offered by DKPro Similarity in Section 4.3 Text Similarity MeasuresIn this section, we give an overview of the textsimilarity measures which are already available inDKPro Similarity.
While we provide new imple-mentations for a multitude of measures, we rely onspecialized libraries such as the S-Space Package(see Section 6) if available.
Due to space limi-tations and due to the fact that the framework isactively under development, we do not provide anexhaustive list here, but rather mention the mostinteresting and most popular measures.3.1 Simple String-based MeasuresDKPro Similarity includes text similarity mea-sures which operate on string sequences anddetermine, for example, the longest common4The JCas is an object-oriented Java interface to theCommon Analysis Structure (Ferrucci and Lally, 2004),Apache UIMA?s internal document representation format.122(non-)contiguous sequence of characters.
It alsocontains Greedy String Tiling (Wise, 1996), a mea-sure which allows to compare strings if parts havebeen reordered.
The framework also offers mea-sures which compute sets of character and wordn-grams and compare them using different overlapcoefficients, e.g.
the Jaccard index.
It further in-cludes popular string distance metrics such as theJaro-Winkler (Winkler, 1990), Monge and Elkan(1997) and Levenshtein (1966) distance measures.3.2 Semantic Similarity MeasuresDKPro Similarity also contains several measureswhich go beyond simple character sequences andcompute text similarity on a semantic level.Pairwise Word Similarity These measures arebased on pairwise word similarity computationswhich are then aggregated for the complete texts.The measures typically operate on a graph-basedrepresentation of words and the semantic relationsamong them within a lexical-semantic resource.DKPro Similarity therefore contains adapters forWordNet, Wiktionary5, and Wikipedia, while theframework can easily be extended to other datasources that conform to a common interface(Garoufi et al 2008).
Pairwise similarity mea-sures in DKPro Similarity include Jiang and Con-rath (1997) or Resnik (1995).
The aggregation forthe complete texts can for example be done usingthe strategy by Mihalcea et al(2006).Vector Space Models These text similaritymeasures project texts onto high-dimensional vec-tors which are then compared.
Cosine similar-ity, a basic measure often used in information re-trieval, weights words according to their term fre-quencies or tf-idf scores, and computes the co-sine between two text vectors.
Latent Seman-tic Analysis (Landauer et al 1998) alleviates theinherent sparseness of a high-dimensional term-document matrix by reducing it to one of reducedrank.
Explicit Semantic Analysis (Gabrilovich andMarkovitch, 2007) constructs the vector space oncorpora where the documents are assumed to de-scribe natural concepts such as cat or dog.
Orig-inally, Wikipedia was proposed as the documentcollection of choice.DKPro Similarity goes beyond a single im-plementation of these measures and comes withhighly customizable code which allows to set var-5http://www.wiktionary.orgious parameters for the construction of the vectorspace and the comparison of the document vectors,and further allows to construct the vector space forarbitrary collections, e.g.
domain-specific corpora.3.3 Further MeasuresPrevious research (Ba?r et al 2012b) has shownpromising results for the inclusion of measureswhich go beyond textual content and computesimilarity along other text characteristics.
Thus,DKPro Similarity also includes measures forstructural, stylistic, and phonetic similarity.Structural Similarity Structural similarity be-tween texts can be computed, for example, bycomparing sets of stopword n-grams (Stamatatos,2011).
The idea here is that similar texts may pre-serve syntactic similarity while exchanging onlycontent words.
Other measures in DKPro Simi-larity allow to compare texts by part-of-speech n-grams, and order and distance features for pairs ofwords (Hatzivassiloglou et al 1999).Stylistic Similarity DKPro Similarity includes,for example, a measure which compares functionword frequencies (Dinu and Popescu, 2009) be-tween two texts.
The framework also includes aset of measures which capture statistical propertiesof texts such as the type-token ratio (TTR) and thesequential TTR (McCarthy and Jarvis, 2010).Phonetic Similarity DKPro Similarity also al-lows to compute text similarity based on pair-wise phonetic comparisons of words.
It thereforecontains implementations of well-known phoneticalgorithms such as Double Metaphone (Philips,2000) and Soundex (Knuth, 1973), which also con-form to the common text similarity interface.4 UIMA ComponentsIn addition to a rich set of text similarity mea-sures as partly described above, DKPro Similar-ity includes components which allow to integratetext similarity measures with any UIMA-basedpipeline, as outlined in Figure 1.
In the following,we introduce these components along with theirresources.Readers & Datasets DKPro Similarity includescorpus readers specifically tailored towards com-bining the input texts in a number of ways, e.g.all possible combinations, or each text paired withn others by random.
Standard datasets for which123readers come pre-packaged include, among oth-ers, the SemEval-2012 STS data (Agirre et al2012), the METER corpus (Clough et al 2002),or the RTE 1?5 data (Dagan et al 2006).
As faras license terms allow redistribution, the datasetsthemselves are integrated into the framework.Similarity Scorer The Similarity Scorer allowsto integrate any text similarity measure (which isdecoupled from UIMA by default) into a UIMA-based pipeline.
It builds upon the standardized textsimilarity interfaces and thus allows to easily ex-change the text similarity measure as well as tospecify the data types the measure should operateon, e.g.
tokens or lemmas.Machine Learning Previous research (Agirre etal., 2012) has shown that different text similaritymeasures can be combined using machine learningclassifiers.
Such a combination shows improve-ments over single measures due to the fact that dif-ferent measures capture different text characteris-tics.
DKPro Similarity thus provides adapters forthe Weka framework (Hall et al 2009) and allowsto first pre-compute sets of text similarity scoreswhich can then be used as features for various ma-chine learning classifiers.Evaluation Metrics In the final step of a UIMApipeline, the processed data is read by a dedicatedevaluation component.
DKPro Similarity shipswith a set of components which for example com-pute Pearson or Spearman correlation with humanjudgments, or apply task-specific metrics such asaverage precision as used in the RTE challenges.5 Experimental SetupsDKPro Similarity further encourages the creationand publication of complete experimental setups.That way, we promote the reproducibility of ex-perimental results, and provide reliable, perma-nent experimental conditions which can benefit fu-ture studies and help to stimulate the reuse of par-ticular experimental steps and software modules.The experimental setups are instantiations ofthe generic UIMA-based language processingpipeline depicted in Figure 1 and are designed toprecisely match the particular task at hand.
Theythus come pre-configured with corpus readers forthe relevant input data, with a set of pre- and post-processing as well as evaluation components, andwith a set of text similarity measures which arewell-suited for the particular task.
The experimen-tal setups are self-contained systems and can berun out-of-the-box without further configuration.6DKPro Similarity contains two major types ofexperimental setups: (i) those for an intrinsic eval-uation allow to evaluate the system performance inan isolated setting by comparing the system resultswith a human gold standard, and (ii) those for anextrinsic evaluation allow to evaluate the systemwith respect to a particular task at hand, where textsimilarity is a means for solving a concrete prob-lem, e.g.
recognizing textual entailment.Intrinsic Evaluation DKPro Similarity con-tains the setup (Ba?r et al 2012a) which partic-ipated in the Semantic Textual Similarity (STS)Task at SemEval-2012 (Agirre et al 2012) andwhich has become one of the recommended base-line systems for the second task of this series.7The system combines a multitude of text similar-ity measures of varying complexity using a simplelog-linear regression model.
The provided setupallows to evaluate how well the system output re-sembles human similarity judgments on short textswhich are taken from five different sources, e.g.paraphrases of news texts or video descriptions.Extrinsic Evaluation Our framework includestwo setups for an extrinsic evaluation: detectingtext reuse, and recognizing textual entailment.For detecting text reuse (Clough et al 2002),the setup we provide (Ba?r et al 2012b) combinesa multitude of text similarity measures along dif-ferent text characteristics.
Thereby, it not onlycombines simple string-based and semantic sim-ilarity measures (see Sections 3.1 and 3.2), butmakes extensive use of measures along structuraland stylistic text characteristics (see Section 3.3).Across three standard evaluation datasets, the sys-tem consistently outperforms all previous work.For recognizing textual entailment, we providea setup which is similar in configuration to the onedescribed above, but contains corpus readers andevaluation components precisely tailored towardsthe RTE challenge series (Dagan et al 2006).
Webelieve that our setup can be used for filteringthose text pairs which need further analysis by adedicated textual entailment system.6A one-time setup of local lexical-semantic resourcessuch as WordNet may be necessary, though.7In 2013, the STS Task is a shared task of the SecondJoint Conference on Lexical and Computational Semantics,http://ixa2.si.ehu.es/sts1246 Related FrameworksTo the best of our knowledge, only a few general-ized similarity frameworks exist at all.
In the fol-lowing, we discuss them and give insights whereDKPro Similarity uses implementations of theseexisting libraries.
That way, DKPro Similaritybrings together the scattered efforts by offering ac-cess to all measures through common interfaces.
Itgoes far beyond the functionality of the original li-braries as it generalizes the resources used, allowsa tight integration with any UIMA-based pipeline,and comes with full-featured experimental setupswhich are pre-configured stand-alone text similar-ity systems that can be run out-of-the-box.S-Space Package Even though no designatedtext similarity library, the S-Space Package (Jur-gens and Stevens, 2010)8 contains some text sim-ilarity measures such as Latent Semantic Analysis(LSA) and Explicit Semantic Analysis (see Sec-tion 3.2).
However, it is primarily focused onword space models which operate on word distri-butions in text.
Besides such algorithms, it offersa variety of interfaces, data structures, evaluationdatasets and metrics, and global operation utili-ties e.g.
for dimension reduction using SingularValue Decomposition or randomized projections,which are particularly useful with such distribu-tional word space models.
DKPro Similarity inte-grates LSA based on the S-Space Package.Semantic Vectors The Semantic Vectors pack-age is a package for distributional semantics (Wid-dows and Cohen, 2010)9 that contains measuressuch as LSA and allows for comparing documentswithin a given vector space.
The main focus lieson word space models with a number of dimensionreduction techniques, and applications on wordspaces such as automatic thesaurus generation.WordNet::Similarity The open source packageby Pedersen et al(2004)10 is a popular Perl li-brary for the similarity computation on WordNet.It comprises six word similarity measures that op-erate on WordNet, e.g.
Jiang and Conrath (1997)or Resnik (1995).
Unfortunately, no strategieshave been added to the package yet which aggre-gate the word similarity scores for complete textsin a similar manner as described in Section 3.2.8code.google.com/p/airhead-research9code.google.com/p/semanticvectors10sourceforge.net/projects/wn-similarityIn DKPro Similarity, we offer native Java imple-mentations of all measures contained in Word-Net::Similarity, and allow to go beyond WordNetand use the measures with any lexical-semantic re-source of choice, e.g.
Wiktionary or Wikipedia.SimMetrics Library The Java library by Chap-man et al(2005)11 exclusively comprises text sim-ilarity measures which compute lexical similar-ity on string sequences and compare texts with-out any semantic processing.
It contains mea-sures such as the Levenshtein (1966) or Monge andElkan (1997) distance metrics.
In DKPro Similar-ity, some string-based measures (see Section 3.1)are based on implementations from this library.SecondString Toolkit The freely available li-brary by Cohen et al(2003)12 is similar to Sim-Metrics, and also implemented in Java.
It also con-tains several well-known text similarity measureson string sequences, and includes many of themeasures which are also part of the SimMetricsLibrary.
Some string-based measures in DKProSimilarity are based on the SecondString Toolkit.7 ConclusionsWe presented DKPro Similarity, an open sourceframework designed to streamline the develop-ment of text similarity measures.
All measuresconform to standardized interfaces and can eitherbe used as stand-alone components in any ex-perimental setup (e.g.
an already existing systemwhich is not based on Apache UIMA), or can betightly coupled with a full-featured UIMA-basedlanguage processing pipeline in order to allow foradvanced processing capabilities.We would like to encourage other researchersto participate in our efforts and invite them to ex-plore our existing experimental setups as outlinedin Section 5, run modified versions of our setups,and contribute own text similarity measures tothe framework.
For that, DKPro Similarity alsocomes with an example module for getting started,which guides first-time users through both thestand-alone and the UIMA-coupled modes.Acknowledgements This work has been supported by theVolkswagen Foundation as part of the Lichtenberg Profes-sorship Program under grant No.
I/82806, and by the KlausTschira Foundation under project No.
00.133.2008.
We thankRichard Eckart de Castilho and all other contributors.11sourceforge.net/projects/simmetrics12sourceforge.net/projects/secondstring125ReferencesEneko Agirre, Daniel Cer, Mona Diab, and AitorGonzalez-Agirre.
2012.
SemEval-2012 Task 6: APilot on Semantic Textual Similarity.
In Proc.
of the6th Int?l Works.
on Semantic Eval., pages 385?393.Daniel Ba?r, Chris Biemann, Iryna Gurevych, andTorsten Zesch.
2012a.
UKP: Computing SemanticTextual Similarity by Combining Multiple ContentSimilarity Measures.
In Proc.
of the 6th Int?l Work-shop on Semantic Evaluation, pages 435?440.Daniel Ba?r, Torsten Zesch, and Iryna Gurevych.
2012b.Text Reuse Detection Using a Composition of TextSimilarity Measures.
In Proc.
of the 24th Int?l Conf.on Computational Linguistics, pages 167?184.Sam Chapman, Barry Norton, and Fabio Ciravegna.2005.
Armadillo: Integrating Knowledge for the Se-mantic Web.
In Proceedings of the Dagstuhl Semi-nar in Machine Learning for the Semantic Web.Paul Clough, Robert Gaizauskas, Scott S.L.
Piao, andYorick Wilks.
2002.
METER: MEasuring TExtReuse.
In Proceedings of ACL, pages 152?159.William W. Cohen, Pradeep Ravikumar, and StephenFienberg.
2003.
A Comparison of String Metricsfor Matching Names and Records.
In Proc.
of KDDWorks.
on Data Cleaning and Object Consolidation.Ido Dagan, Oren Glickman, and Bernardo Magnini.2006.
The PASCAL Recognising Textual Entail-ment Challenge.
In Machine Learning Challenges,Lecture Notes in Computer Science, pages 177?190.Liviu P. Dinu and Marius Popescu.
2009.
Ordinal mea-sures in authorship identification.
In Proceedings ofthe 3rd PAN Workshop.
Uncovering Plagiarism, Au-thorship and Social Software Misuse, pages 62?66.David Ferrucci and Adam Lally.
2004.
UIMA: AnArchitectural Approach to Unstructured InformationProcessing in the Corporate Research Environment.Natural Language Engineering, 10(3-4):327?348.Evgeniy Gabrilovich and Shaul Markovitch.
2007.Computing Semantic Relatedness using Wikipedia-based Explicit Semantic Analysis.
In Proceedingsof IJCAI, pages 1606?1611, Hyderabad, India.Konstantina Garoufi, Torsten Zesch, and IrynaGurevych.
2008.
Representational Interoperabilityof Linguistic and Collaborative Knowledge Bases.In Proceedings of the KONVENS Workshop onLexical-Semantic and Ontological Resources.Mark Hall, Eibe Frank, Geoffrey Holmes, BernhardPfahringer, Peter Reutemann, and Ian H. Witten.2009.
The WEKA Data Mining Software: An Up-date.
SIGKDD Explorations, 11(1):10?18.Vasileios Hatzivassiloglou, Judith L. Klavans, andEleazar Eskin.
1999.
Detecting text similarity overshort passages: Exploring linguistic feature com-binations via machine learning.
In Proceedings ofEMNLP/VLC, pages 203?212.Jay J. Jiang and David W. Conrath.
1997.
Semanticsimilarity based on corpus statistics and lexical tax-onomy.
In Proceedings of ROCLING, pages 19?33.David Jurgens and Keith Stevens.
2010.
The S-SpacePackage: An Open Source Package for Word SpaceModels.
In Proceedings of the ACL 2010 SystemDemonstrations, pages 30?35, Uppsala, Sweden.Donald E. Knuth.
1973.
The Art of ComputerProgramming: Volume 3, Sorting and Searching.Addison-Wesley.Thomas K. Landauer, Peter W. Foltz, and Darrell La-ham.
1998.
An Introduction to Latent SemanticAnalysis.
Discourse Processes, 25(2):259?284.Vladimir I. Levenshtein.
1966.
Binary codes capa-ble of correcting deletions, insertions, and reversals.Soviet Physics Doklady, 10(8):707?710.Philip M. McCarthy and Scott Jarvis.
2010.
MTLD,vocd-D, and HD-D: A validation study of sophis-ticated approaches to lexical diversity assessment.Behavior research methods, 42(2):381?392.Rada Mihalcea, Courtney Corley, and Carlo Strappa-rava.
2006.
Corpus-based and Knowledge-basedMeasures of Text Semantic Similarity.
In Proceed-ings of AAAI-06, pages 775?780, Boston, MA, USA.Alvaro Monge and Charles Elkan.
1997.
An ef-ficient domain-independent algorithm for detectingapproximately duplicate database records.
In Pro-ceedings of the SIGMOD Workshop on Data Miningand Knowledge Discovery, pages 23?29.Ted Pedersen, Siddharth Patwardhan, and Jason Miche-lizzi.
2004.
WordNet::Similarity - Measuring theRelatedness of Concepts.
In Proceedings of theHLT-NAACL: Demonstration Papers, pages 38?41.Lawrence Philips.
2000.
The double metaphonesearch algorithm.
C/C++ Users Jour., 18(6):38?43.Philip Resnik.
1995.
Using Information Content toEvaluate Semantic Similarity in a Taxonomy.
InProceedings of the IJCAI, pages 448?453.Efstathios Stamatatos.
2011.
Plagiarism detectionusing stopword n-grams.
Journal of the Ameri-can Society for Information Science and Technology,62(12):2512?2527.Dominic Widdows and Trevor Cohen.
2010.
The Se-mantic Vectors Package: New Algorithms and Pub-lic Tools for Distributional Semantics.
In Proceed-ings of IEEE-ICSC, pages 9?15.William E. Winkler.
1990.
String Comparator Metricsand Enhanced Decision Rules in the Fellegi-SunterModel of Record Linkage.
In Proceedings of theSurvey Research Methods Section, pages 354?359.Michael J.
Wise.
1996.
YAP3: Improved detection ofsimilarities in computer program and other texts.
InProc.
of the 27th SIGCSE Technical Symposium onComputer Science Education, pages 130?134.126
