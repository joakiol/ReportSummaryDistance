Proceedings of the COLING/ACL 2006 Student Research Workshop, pages 79?84,Sydney, July 2006. c?2006 Association for Computational LinguisticsParsing and Subcategorization DataJianguo LiDepartment of LinguisticsThe Ohio State UniversityColumbus, OH, USAjianguo@ling.ohio-state.eduAbstractIn this paper, we compare the per-formance of a state-of-the-art statisticalparser (Bikel, 2004) in parsing written andspoken language and in generating sub-categorization cues from written and spo-ken language.
Although Bikel?s parserachieves a higher accuracy for parsingwritten language, it achieves a higher ac-curacy when extracting subcategorizationcues from spoken language.
Additionally,we explore the utility of punctuation inhelping parsing and extraction of subcat-egorization cues.
Our experiments showthat punctuation is of little help in pars-ing spoken language and extracting sub-categorization cues from spoken language.This indicates that there is no need to addpunctuation in transcribing spoken cor-pora simply in order to help parsers.1 IntroductionRobust statistical syntactic parsers, made possi-ble by new statistical techniques (Collins, 1999;Charniak, 2000; Bikel, 2004) and by the avail-ability of large, hand-annotated training corporasuch as WSJ (Marcus et al, 1993) and Switch-board (Godefrey et al, 1992), have had a majorimpact on the field of natural language process-ing.
There are many ways to make use of parsers?output.
One particular form of data that can be ex-tracted from parses is information about subcate-gorization.
Subcategorization data comes in twoforms: subcategorization frame (SCF) and sub-categorization cue (SCC).
SCFs differ from SCCsin that SCFs contain only arguments while SCCscontain both arguments and adjuncts.
Both SCFsand SCCs have been crucial to NLP tasks.
For ex-ample, SCFs have been used for verb disambigua-tion and classification (Schulte im Walde, 2000;Merlo and Stevenson, 2001; Lapata and Brew,2004; Merlo et al, 2005) and SCCs for semanticrole labeling (Xue and Palmer, 2004; Punyakanoket al, 2005).Current technology for automatically acquiringsubcategorization data from corpora usually relieson statistical parsers to generate SCCs.
Whilegreat efforts have been made in parsing writtentexts and extracting subcategorization data fromwritten texts, spoken corpora have received littleattention.
This is understandable given that spokenlanguage poses several challenges that are absentin written texts, including disfluency, uncertaintyabout utterance segmentation and lack of punctu-ation.
Roland and Jurafsky (1998) have suggestedthat there are substantial subcategorization differ-ences between written corpora and spoken cor-pora.
For example, while written corpora show amuch higher percentage of passive structures, spo-ken corpora usually have a higher percentage ofzero-anaphora constructions.
We believe that sub-categorization data derived from spoken language,if of acceptable quality, would be of more value toNLP tasks involving a syntactic analysis of spokenlanguage, but we do not pursue it here.The goals of this study are as follows:1.
Test the performance of Bikel?s parser inparsing written and spoken language.2.
Compare the accuracy level of SCCs gen-erated from parsed written and spoken lan-guage.
We hope that such a comparison willshed some light on the feasibility of acquiringSCFs from spoken language using the cur-79rent SCF acquisition technology initially de-signed for written language.3.
Explore the utility of punctuation1 in pars-ing and extraction of SCCs.
It is gen-erally recognized that punctuation helps inparsing written texts.
For example, Roark(2001) finds that removing punctuation fromboth training and test data (WSJ) decreaseshis parser?s accuracy from 86.4%/86.8%(LR/LP) to 83.4%/84.1%.
However, spo-ken language does not come with punctua-tion.
Even when punctuation is added in theprocess of transcription, its utility in help-ing parsing is slight.
Both Roark (2001)and Engel et al (2002) report that removingpunctuation from both training and test data(Switchboard) results in only 1% decrease intheir parser?s accuracy.2 Experiment DesignThree models will be investigated for parsing andextracting SCCs from the parser?s output:1. punc: leaving punctuation in both trainingand test data.2.
no-punc: removing punctuation from bothtraining and test data.3.
punc-no-punc: removing punctuation fromonly test data.Following the convention in the parsing com-munity, for written language, we selected sections02-21 of WSJ as training data and section 23 astest data (Collins, 1999).
For spoken language, wedesignated section 2 and 3 of Switchboard as train-ing data and files of sw4004 to sw4135 of section 4as test data (Roark, 2001).
Since we are also inter-ested in extracting SCCs from the parser?s output,we eliminated from the two test corpora all sen-tences that do not contain verbs.
Our experimentsproceed in the following three steps:1.
Tag test data using the POS-tagger describedin Ratnaparkhi (1996).2.
Parse the POS-tagged data using Bikel?sparser.1We use punctuation to refer to sentence-internal punctu-ation unless otherwise specified.label clause type desired SCCsgerundive (NP)-GERUNDS small clause NP-NP, (NP)-ADJPcontrol (NP)-INF-tocontrol (NP)-INF-wh-toSBAR with a complementizer (NP)-S-wh, (NP)-S-thatwithout a complementizer (NP)-S-thatTable 1: SCCs for different clauses3.
Extract SCCs from the parser?s output.
Theextractor we built first locates each verb in theparser?s output and then identifies the syntac-tic categories of all its sisters and combinesthem into an SCC.
However, there are caseswhere the extractor has more work to do.?
Finite and Infinite Clauses: In the PennTreebank, S and SBAR are used to labeldifferent types of clauses, obscuring toomuch detail about the internal structureof each clause.
Our extractor is designedto identify the internal structure of dif-ferent types of clause, as shown in Table1.?
Passive Structures: As noted above,Roland and Jurafsky (Roland and Juraf-sky, 1998) have noticed that written lan-guage tends to have a much higher per-centage of passive structures than spo-ken language.
Our extractor is alsodesigned to identify passive structuresfrom the parser?s output.3 Experiment Results3.1 Parsing and SCCsWe used EVALB measures Labeled Recall (LR)and Labeled Precision (LP) to compare the pars-ing performance of different models.
To comparethe accuracy of SCCs proposed from the parser?soutput, we calculated SCC Recall (SR) and SCCPrecision (SP).
SR and SP are defined as follows:SR = number of correct cues from the parser?s outputnumber of cues from treebank parse (1)SP = number of correct cues from the parser?s outputnumber of cues from the parser?s output (2)SCC Balanced F-measure = 2 ?
SR ?
SPSR+ SP (3)The results for parsing WSJ and Switchboardand extracting SCCs are summarized in Table 2.The LR/LP figures show the following trends:80WSJmodel LR/LP SR/SPpunc 87.92%/88.29% 76.93%/77.70%no-punc 86.25%/86.91% 76.96%/76.47%punc-no-punc 82.31%/83.70% 74.62%/74.88%Switchboardmodel LR/LP SR/SPpunc 83.14%/83.80% 79.04%/78.62%no-punc 82.42%/83.74% 78.81%/78.37%punc-no-punc 78.62%/80.68% 75.51%/75.02%Table 2: Results of parsing and extraction of SCCs1.
Roark (2001) showed LR/LP of86.4%/86.8% for punctuated writtenlanguage, 83.4%/84.1% for unpunctuatedwritten language.
We achieve a higheraccuracy in both punctuated and unpunctu-ated written language, and the decrease ifpunctuation is removed is less2.
For spoken language, Roark (2001) showedLR/LP of 85.2%/85.6% for punctuated spo-ken language, 84.0%/84.6% for unpunctu-ated spoken language.
We achieve a loweraccuracy in both punctuated and unpunctu-ated spoken language, and the decrease ifpunctuation is removed is less.
The trends in(1) and (2) may be due to parser differences,or to the removal of sentences lacking verbs.3.
Unsurprisingly, if the test data is unpunctu-ated, but the models have been trained onpunctuated language, performance decreasessharply.In terms of the accuracy of extraction of SCCs,the results follow a similar pattern.
However, theutility of punctuation turns out to be even smaller.Removing punctuation from both training and testdata results in a less than 0.3% drop in the accu-racy of SCC extraction.Figure 1 exhibits the relation between the ac-curacy of parsing and that of extracting SCCs.If we consider WSJ and Switchboard individu-ally, there seems to exist a positive correlationbetween the accuracy of parsing and that of ex-tracting SCCs.
In other words, higher LR/LPindicates higher SR/SP.
However, Figure 1 alsoshows that although the parser achieves a higherF-measure value for paring WSJ, it achieves ahigher F-measure value when generating SCCsfrom Switchboard.The fact that the parser achieves a higher accu-racy for extracting SCCs from Switchboard thanWSJ merits further discussion.
Intuitively, itpunc no?punc punc?no?punc747678808284868890ModelsF?measure(%)WSJ parsingSwitchboard parsingWSJ SCCSwitchboard SCCFigure 1: F-measure for parsing and extraction ofSCCsseems to be true that the shorter an SCC is, themore likely that the parser is to get it right.
Thisintuition is confirmed by the data shown in Fig-ure 2.
Figure 2 plots the accuracy level of extract-ing SCCs by SCC?s length.
It is clear from Fig-ure 2 that as SCCs get longer, the F-measure valuedrops progressively for both WSJ and Switch-board.
Again, Roland and Jurafsky (1998) havesuggested that one major subcategorization differ-ence between written and spoken corpora is thatspoken corpora have a much higher percentage ofthe zero-anaphora construction.
We then exam-ined the distribution of SCCs of different length inWSJ and Switchboard.
Figure 3 shows that SCCsof length 02 account for a much higher percentagein Switchboard than WSJ, but it is always the otherway around for SCCs of non-zero length.
Thisobservation led us to believe that the better per-formance that Bikel?s parser achieves in extractingSCCs from Switchboard may be attributed to thefollowing two factors:1.
Switchboard has a much higher percentage ofSCCs of length 0.2.
The parser is very accurate in extractingshorter SCCs.3.2 Extraction of DependentsIn order to estimate the effects of SCCs of length0, we examined the parser?s performance in re-trieving dependents of verbs.
Every constituent(whether an argument or adjunct) in an SCC gen-erated by the parser is considered a dependent of2Verbs have a length-0 SCC if they are intransitive andhave no modifiers.810 1 2 3 4102030405060708090Length of SCCF?measure(%)WSJSwitchboardFigure 2: F-measure for SCCs of different length0 1 2 3 40102030405060Length of SCCsPercentage(%)WSJSwitchboardFigure 3: Distribution of SCCs by lengththat verb.
SCCs of length 0 will be discounted be-cause verbs that do not take any arguments or ad-juncts have no dependents3 .
In addition, this wayof evaluating the extraction of SCCs also matchesthe practice in some NLP tasks such as semanticrole labeling (Xue and Palmer, 2004).
For the taskof semantic role labeling, the total number of de-pendents correctly retrieved from the parser?s out-put affects the accuracy level of the task.To do this, we calculated the number of depen-dents shared by between each SCC proposed fromthe parser?s output and its corresponding SCC pro-posed from Penn Treebank.
We based our cal-culation on a modified version of Minimum EditDistance Algorithm.
Our algorithm works by cre-ating a shared-dependents matrix with one col-umn for each constituent in the target sequence(SCCs proposed from Penn Treebank) and one3We are aware that subjects are typically also consid-ered dependents, but we did not include subjects in ourexperimentsshared-dependents[i.j] = MAX(shared-dependents[i-1,j],shared-dependents[i-1,j-1]+1 if target[i] = source[j],shared-dependents[i-1,j-1] if target[i] != source[j],shared-dependents[i,j-1])Table 3: The algorithm for computing shared de-pendentsINF #5 1 1 2 3ADVP #4 1 1 2 2PP-in #3 1 1 2 2NP #2 1 1 1 1NP #1 1 1 1 1#0 #1 #2 #3 #4NP S-that PP-in INFTable 4: An example of computing the number ofshared dependentsrow for each constituent in the source sequence(SCCs proposed from the parser?s output).
Eachcell shared-dependent[i,j] contains the number ofconstituents shared between the first i constituentsof the target sequence and the first j constituents ofthe source sequence.
Each cell can then be com-puted as a simple function of the three possiblepaths through the matrix that arrive there.
The al-gorithm is illustrated in Table 3.Table 4 shows an example of how the algo-rithm works with NP-S-that-PP-in-INF as the tar-get sequence and NP-NP-PP-in-ADVP-INF as thesource sequence.
The algorithm returns 3 as thenumber of dependents shared by two SCCs.We compared the performance of Bikel?s parserin retrieving dependents from written and spo-ken language over all three models using De-pendency Recall (DR) and Dependency Precision(DP).
These metrics are defined as follows:DR = number of correct dependents from parser?s outputnumber of dependents from treebank parse(4)DP = number of correct dependents from parser?s outputnumber of dependents from parser?s output(5)Dependency F-measure = 2 ?DR ?DPDR+DP (6)The results of Bikel?s parser in retrieving depen-dents are summarized in Figure 4.
Overall, theparser achieves a better performance for WSJ overall three models, just the opposite of what havebeen observed for SCC extraction.
Interestingly,removing punctuation from both the training andtest data actually slightly improves the F-measure.82This holds true for both WSJ and Switchboard.This Dependency F-measure differs in detail fromsimilar measures in (Xue and Palmer, 2004).
Forpresent purposes all that matters is the relativevalue for WSJ and Switchboard.punc no?punc punc?no?punc7880828486ModelsF?measure(%)WSJSwitchboardFigure 4: F-measure for extracting dependents4 Conclusions and Future Work4.1 Use of Parser?s OutputIn this paper, we have shown that it is not nec-essarily true that statistical parsers always per-form worse when dealing with spoken language.The conventional accuracy metrics for parsing(LR/LP) should not be taken as the only metricsin determining the feasibility of applying statisti-cal parsers to spoken language.
It is necessary toconsider what information we want to extract outof parsers?
output and make use of.1.
Extraction of SCFs from Corpora: This taskusually proceeds in two stages: (i) Use sta-tistical parsers to generate SCCs.
(ii) Ap-ply some statistical tests such as the Bino-mial Hypothesis Test (Brent, 1993) and log-likelihood ratio score (Dunning, 1993) toSCCs to filter out false SCCs on the basis oftheir reliability and likelihood.
Our experi-ments show that the SCCs generated for spo-ken language are as accurate as those gen-erated for written language, which suggeststhat it is feasible to apply the current technol-ogy for automatically extracting SCFs fromcorpora to spoken language.2.
Semantic Role Labeling: This task usuallyoperates on parsers?
output and the numberof dependents of each verb that are correctlyretrieved by the parser clearly affects the ac-curacy of the task.
Our experiments showthat the parser achieves a much lower accu-racy in retrieving dependents from the spokenlanguage than written language.
This seemsto suggest that a lower accuracy is likely tobe achieved for a semantic role labeling taskperformed on spoken language.
We are notaware that this has yet been tried.4.2 Punctuation and Speech TranscriptionPracticeBoth our experiments and Roark?s experimentsshow that parsing accuracy measured by LR/LPexperiences a sharper decrease for WSJ thanSwitchboard after we removed punctuation fromtraining and test data.
In spoken language, com-mas are largely used to delimit disfluency ele-ments.
As noted in Engel et al (2002), statis-tical parsers usually condition the probability ofa constituent on the types of its neighboring con-stituents.
The way that commas are used in speechtranscription seems to have the effect of increasingthe range of neighboring constituents, thus frag-menting the data and making it less reliable.
Onthe other hand, in written texts, commas serve asmore reliable cues for parsers to identify phrasaland clausal boundaries.In addition, our experiment demonstrates thatpunctuation does not help much with extraction ofSCCs from spoken language.
Removing punctua-tion from both the training and test data results in aless than 0.3% decrease in SR/SP.
Furthermore, re-moving punctuation from both the training and testdata actually slightly improves the performanceof Bikel?s parser in retrieving dependents fromspoken language.
All these results seem to sug-gest that adding punctuation in speech transcrip-tion is of little help to statistical parsers includ-ing at least three state-of-the-art statistical parsers(Collins, 1999; Charniak, 2000; Bikel, 2004).
As aresult, there may be other good reasons why some-one who wants to build a Switchboard-like corpusshould choose to provide punctuation, but there isno need to do so simply in order to help parsers.However, segmenting utterances into individualunits is necessary because statistical parsers re-quire sentence boundaries to be clearly delimited.Current statistical parsers are unable to handle aninput string consisting of two sentences.
For ex-ample, when presented with an input string as in(1) and (2), if the two sentences are separated by aperiod (1), Bikel?s parser wrongly treats the sec-ond sentence as a sentential complement of the83main verb like in the first sentence.
As a result, theextractor generates an SCC NP-S for like, which isincorrect.
The parser returns the same parse afterwe removed the period (2) and let the parser parseit again.
(1) I like the long hair.
It was back in highschool.
(2) I like the long hair It was back in high school.Hence, while adding punctuation in transcribinga Switchboard-like corpus is not of much help tostatistical parsers, segmenting utterances into in-dividual units is crucial for statistical parsers.
Infuture work, we plan to develop a system capa-ble of automatically segmenting speech utterancesinto individual units.5 AcknowledgmentsThis study was supported by NSF grant 0347799.Our thanks go to Chris Brew, Eric Fosler-Lussier,Mike White and three anonymous reviewers fortheir valuable comments.ReferencesD.
Bikel.
2004.
Intricacies of Collin?s parsing models.Computational Linguistics, 30(2):479?511.M.
Brent.
1993.
From grammar to lexicon: Unsu-pervised learning of lexical syntax.
ComputationalLinguistics, 19(3):243?262.E.
Charniak.
2000.
A maximum-entropy-inspiredparser.
In Proceedings of the 2000 Conference ofthe North American Chapter of the Association forComputation Linguistics, pages 132?139.M.
Collins.
1999.
Head-driven statistical models fornatural language parsing.
Ph.D. thesis, Universityof Pennsylvania.T.
Dunning.
1993.
Accurate methods for the statisticsof surprise and coincidence.
Computational Lin-guistics, 19(1):61?74.D.
Engel, E. Charniak, and M. Johnson.
2002.
Parsingand disfluency placement.
In Proceedings of 2002Conference on Empirical Methods of Natural Lan-guage Processing, pages 49?54.J.
Godefrey, E. Holliman, and J. McDaniel.
1992.SWITCHBOARD: Telephone speech corpus forresearch and development.
In Proceedings ofICASSP-92, pages 517?520.M.
Lapata and C. Brew.
2004.
Verb class disambigua-tion using informative priors.
Computational Lin-guistics, 30(1):45?73.M.
Marcus, G. Kim, and M. Marcinkiewicz.
1993.Building a large annotated corpus of English:the Penn Treebank.
Computational Linguistics,19(2):313?330.P.
Merlo and S. Stevenson.
2001.
Automaticverb classification based on statistical distributionof argument structure.
Computational Linguistics,27(3):373?408.P.
Merlo, E. Joanis, and J. Henderson.
2005.
Unsuper-vised verb class disambiguation based on diathesisalternations.
manuscripts.V.
Punyakanok, D. Roth, and W. Yih.
2005.
The neces-sity of syntactic parsing for semantic role labeling.In Proceedings of the 2nd Midwest ComputationalLinguistics Colloquium, pages 15?22.A.
Ratnaparkhi.
1996.
A maximum entropy model forpart-of-speech tagging.
In Proceedings of the Con-ference on Empirical Methods of Natural LanguageProcessing, pages 133?142.B.
Roark.
2001.
Robust Probabilistic PredictiveProcessing: Motivation, Models, and Applications.Ph.D.
thesis, Brown University.D.
Roland and D. Jurafsky.
1998.
How verb sub-categorization frequency is affected by the corpuschoice.
In Proceedings of the 17th InternationalConference on Computational Linguistics, pages1122?1128.S.
Schulte im Walde.
2000.
Clustering verbs semanti-cally according to alternation behavior.
In Proceed-ings of the 18th International Conference on Com-putational Linguistics, pages 747?753.N.
Xue and M. Palmer.
2004.
Calibrating features forsemantic role labeling.
In Proceedings of 2004 Con-ference on Empirical Methods in Natural LanguageProcessing, pages 88?94.84
