An Ef f i c ient  Execut ion  Methodfor Ru le -Based  Mach ine  Trans la t ionHi royuki  KAJ ISystems Deve lopment  Laboratory~ Hi tach i  Ltdo1099 Ohzenj i ,  Asao, Kawasaki ,  215~ JapanABS'I~IACTA rule based system is an effective way to impl~nenta machine translation syste/~ because of itsextensibility and maintainability?
However, it isdisadvantageous in processing effici~\]Cyo In a rulebased machine translation system b the gran~ik~rconsists of a lot of rewriting rules?
While -thetranslation is carried out by repeating patternmatching and ~ansformation of graph structures,nDst rifles fail in pattenl matching.
It is to bedesired that pattern matching of the unfruitfulrules should be avoided.
This paper proposes amethod to restrict the rule application byactivating rules dynamically.
?
The logicalrelationship among rules are pre-mmlyzed and a setof antecede/lt actions, which are prerequisite forthe condition o f  9/\]e rule being satisfied~ isdetermined for each ruleo In execution time, a ruleis activated only when one of the antecedent actionsare carried out.
The probability of a rule beingactivated is reduced to near the occurrenceprobability of its relevant linguistic phenc~nonoAs most rules relate to linguistic phenc~msa thatrarely occur, the processing efficiency isdrastically inrproved.I.
IntroductionA practical machine translation system needs to dealwith a wide variety of linguistic phencm~J%a.
Alarge and sophisticated grammar will be developedover a long period~ Accordingly, it is necessary toadopt an implementation method which ir~0r~;es theextensibility and maintainability of the system?.The rule based approach \[i\] is a prc*nising one fromthis viewpoint.However, a rule based systes~ is generallydisadvantageous in processing efficiency.
In rulebased machine translation, a gr~,mar is comprisedwith a lot of rewriting rules \[ 2 \] \[ 3 \] \[ 4 \].Translation is carried out by repeating patternmatching and transformation of tree or graphstructures that represent the syntax or s~mt ics  ofa sentence.
A great part of the processing time isspent in pattern n~%tching~ which mostly results infailure.
The key to improve the processingefficiency is how to avoid the pattern matching thatresults in failure?A number of methods such.
as the Rete pattern matchalgorithm \[5\] have been devel~ped to ini0rove theprocessing efficiency of rule based systems.However, peculiarities in machine 'translationsystems make it difficult to apply the whole of anexisting method?
The general idea of existingmethods is to restructure the set of rules in anetwork such as a cause-effect graph~ or adescriminant network, and maintain the state of theobject in the network.
The following aredistinguishing features of a machine translationsystem?
First, the object data is a graph824structttre, and tile st~rt~ of 19~e object must ~.mhandle~\] as a collection of slates of respectivesub4\]raphs~ which are created dynamically by applyingrules o Therefore, maintaining the state of theobject in a network causes a large amount ofoverhead.
Seoondly~ ~ules are a~plied in ac~ntrolled m~mer  ~ so tI~t a linguisticallyinsignificant result J.s prevented o \[\[%~ecomputational control of rules to ~rove  theprocessing efficiency must ~x~ super\[nkoosed on theling~dstic control of ~mles.
'l%,js paper proposes a nu~ 1~..thod to ~?fove iJ~eprocessing efficiency of rule based syst~t~ havingt/le above mentioned featumeso S~t ion 2 describes agran~ar description language which was developsd fo~7a Japanese-English machine translation systexn o'l~ough the proposed method is described on tJ~e basisof this grars~ar description 16mguage~ it is generalenough to apply to other systems~ Section 3exp\] ains the prob l~ of processing efficienoy.Then, Section 4 outlines the proposed metb0d bywhich essence is in dynastic rule activation~ basedon the logical relationship ar~)ng rules?
A methodto pre-analyze the logic~l relationship anong zlllesis described?
The Jmproved grar~ executor is alsodescribed.
Lastly, the effectiveness of %/leproposed ~thod  is discussed in Section 5~2.
Grammar D e s c r ~for Rule Based Machine Translation2 o i ~ect  data structureA machine translation syst~n deals with the syntaxand semantics of a natural l~guage sentenc~ whichis represented by tree or graph structures~ Theobject data in our machine translation syst~n is adirected graph.
A directed graph consists of a setof nodes and arcs connecting a pair of nodes.
~chnode has a number of attributes and each arc has alabel.
~e  label of an arc can be regarded as akind of attribute in the tail node of the arc~ Theattributes are divided into sca~pe attxibntesand set-type attribetes.
A scalar-type attribute ise~le in which only ~ne value is given to a node?
Aset-type attribute is one Jm whic~h ~ than ~value nmy be given to a node~In Japanese-~glish machine translations a ~ecorresponds to a bumm~tsu in a Japanese ~t~Oeo A.b~nsetsu is o~r i sed  witkt a co~itent ~rd  and %k~succeeding fnnction words o The follo~r'?ng a~etreated as attributes of nodes; parts of speech,.s~mm%tie features, function words~ dependent, types~governor typese surface case markers~ se~mmtic roles(case), and others.2.2 Gramn~tical rulesA granm~tical rule is written in the form of agraph-to-g, raph rewriting ruleo T\]~t is8 a xu\]econsists of a condition part and an action part oThe condition part.
specifies the pattern of acond i t ion* @X ~ T :~ \[ t ,  t '  \](a  : @Y)  ;@Y ~ U = u !
u'(a  : @z ) ;@Z ~ V ~ @X.V  ;act ion@X ( + a : @z \] ;@Y ( --  a : @Z ) ;(a) Cod ing  fo rmEli)(b )  I l l us t ra t ive  fo rmF:i.go l An  _exf?~J3\]e of a ~ranm\]at ica l  ru lesubgrapb, and tile action part does a transformationto I~ per formed on subgraphs that **retch the patLemls\[~.oified .in the condition par t : .
Fig.
1. shows anemtmple of rule.
In Fig?
i~ (a) is the c~DdJ.ng forintand (b) J.s an illustrative form~ As nodes arerepresents3 by variables (character strings headedby @ ), rules should be applicable to any subgraph inthe object data?
A rule has a key node variable,which is indicated by *o The key node plays a rolein specifying exactly the \]ocmtion where the rule isapplied in the object ?ata~The (~nd~ tion part of a rule is a logicalcx\]mbination of primitive conditions?
A prlndtivecx\]ndition is related to either a node co~mection oran attribute.
~ la l i ty  Js specified fox" as(mlar-ty~.
~ attribute~ and an inclusion relat.~onshipis specified for a set-ty\[~ attribute o '\[heprimitive conditions are also divided intointra-node conditions and inter-node conditions.- An intra-node condition is one relating to onlyone node?e.g.~ @X : T :~ \[ t~ t ' \] ;'l~le set-type attribute ?
of node @X includes thevalues t and t'.?
- ~ inten---node condition is one relating to a pairof nodes.eogo, @X : T = @Yo~' ;?\['he attribute T of node @X has t/he same ~alue as%trot ol ncx~e @YoThe action pa~t of a rule is a sequ~ce of.- primitiveactions.
A prJ~dtive action is related to eithe\[ anode eonnection or an attribute?
Cx)nneetion anddisconnection are s~eeifi6~ for a pair of nodes.Substitution of  a value is specific~ for ascalar-type attribute~ and addition and deletion ofa value ar_e specified for a set-type attribute?
Y%~eactions are' also divided into intra-node actions andinter-node actions.- 2~% intra--nede action is one relating to only onenodeeogo; @X : T = T + \[ t \] ;Add a value t to the set-type attribute q' ofnede @X.- ~n inter-.node action is one relating to a \[~ir ofnc~\]es.eogo~ @X : T = @YoT ;Substitute the value of attribute T of node @Yfor tile attribute T of node @X0A gra\[m~ar ~.~msists of a lot of ru\]es, which playtheir own roles in -t~e translation process?
'\]heymust be applie~\] in a controlled ,intoner, so thatlinguistically insignificant results are prevented?The c3~'atl~sr description language provides a facilityto n~x\]u\].ar:i.ze a gralrwmu~ and specify sophJstJ.catc~dcontrol i n  ru\]e applicatJOnoA gra~t~,~r is deo~m~posed into a lot of subgr~m~mrs~~hich are applied J.n a prescribed order?
~brex~m~ple, 'the analysis g ra~ar  for Japanese sentencesJ.s deo~nposed into such snbgramtmrs as6{J s~lnbiguation of multiple ~r'ts of s~eeh,detel~niuation of governor types, detezminat~ on ofdependent types, dependency structure analysis, deepcase analysis, tense/aspect analysis, and ol.hers.
As'ttb9 ran.
m~r amy 1"~9 dec~m%oo sed into furthersubgr6m~ars.A number of control ?mrameters for ru\]e applicationare speeific~d for each subgra~nar?
The followingare  examples  ?
7- Mutual relationship ~m~ong rules ( Exc\] usiw~,Conctrcrent, Dependent or Unrelated): For instance,when ~c lus ive  is selected, rule application iscmntrolled so that successfu\] application of a ru\].eshould prevent the renmining rules frd~l beingapplied.- ~\[~averse mode in the object data (Pre-order orPost-order): '\].~e object data is traverse~\] in thespecified mode, and rules are applJ(~\] at eachIcxzation :in the object data structure.- Priority between ru\]e selection }n~d \]ocationselection: When rule selection is selecte(I~ Yuleapplication is (x\]ntro\]led so that the next ruleshould be selected after applying a rule at everylocation?3.
Probl~n of Processing Efficienc ZA naive Jmplersantation of grar~nar executor for sucha gra~r  description language as describe<\] inSection 2 is illustrated in Fig.
2. q~e translationis carried out by applying granmmtica\] rules to theobject data in the working memory.
The granmarexecutor consists of the inJ tializer, thecontroller, t/~e pattern nntcher and t~e transformer.
'l~e initializer creates all initial state of theobject data ill the working nm_r,~)ry, based on theresult of morphological analysis?
It defines a nodefor each bunsetsu and assigns it some attributevalues o 'fhe attribute values c~me from thedictionary and 'the result of morphological\]analysis o'l~ne controller 'is initiated after the initial objec~data is created.
The controller determines both therule to be app\].iefl and the current node at which therule is to be applied, according to rule app\]ic~tionc~ontrol parameters and the application result of theprevious ruleoThe pattern nmtd~er judges whether the conditionpart of a rule is satisfied or not.
%~e rule andthe current node is designated by the controller?825Working Memory ~ r  I--nitia li z-e rqI Cont ro l le r - \ ]~~--- - - - - ' - -~I" MatcherPattern " \ ] ~I J IFig.
2 Grammar executorGrammarControll ParameterRuleI ConditionAction!The pattern marcher first binds the key nodevariable in the rule with the current node.
Then,it binds the other node variables with nodes in theobject data one after another, searching for a nodewhich satisfies the conditions relevant to each nodevariable.
If all the node Variables in the rule arebound with nodes, the pattern matcher judges thatthe condition part o f  the rule is satisfied at %/~ecurrent node.
I f  there exists a node variable thatcaD/lot be bound with a node, the pattern marcherjudges t/\]at the condition is not satisfied at thecurrent node.The transformer performs the action part of a rule.It is called only when the pattern matcher judgesthat the condition part of the rule issatisfied.As the pattern matcher has bound each node variablewith a node in the object data, the appropriateportion of the object data structure undergoes thetransformation.The grammar executor described above leaves room forimproven~nt in efficiency.
The behavior of rules inthe naive grammar executor shows the followingcharacteristics.- The proportion of rules that succeed in patternmatching is very small.
It is less than one percentin the case of our Japanese sentence analysisgrammar which is ecmprised of several thousand rules.- The probability that a rule succeeds in patternmatching varies widely with rules.
While some rulessucceed fairly frequently, most other rules rarelysucceed.In the naive implementation of grammar executor, allthe rules are treated equally.
As a result, a greatpart of ~ the processing t ime is spent in patternmatching of unfruitful rules.
If application of' ?
unfruitful rules can be avoided, the processingefficiency will be drastically improved.
Same rulescan be directly linked to specific words.Application of such word specific rules can beeasily restricted by linking them with thedictionary.
Our concern here is how to restrictapplication of general rules that cannot be linkeddirectly to specific words.4.
Dynamic Rule Activation4.1 Basic idea~ether the condition part of a rule is satisfied or826not ge~nerally depends on the results of precedingrules, q~e logical relationship an~0ng rules can beextracted by static analysis of the grammar?
Aconsiderable application of unfruitful rules will beprevented by using the logical relationship amongrules.First, we define an ~tecedent set for a condition.The anteoedent set for a condition is such a set ofactions as:(i) carrying Out a member action causes thepossibility that the condition is satisfied, and(ii) the condition is never satisfied if no men~xe.raction is carried out.Then, we define the inverse action for a/l antecedentset.
The inverse action for an antecedent set is anaction that cancels the effect of any me~ber actionof the antecedent set?
An antecedent set and itsinverse action can be used to dynamically change thestatus of a rule as follows.
A rule is  activatedwhen a member action of the antecedent set for thecondition of the rule is carried out.
A rule isdeactivated when the inverse action is carried out?It is obviously assured that a rule is activewhenever its condition may ~e satisfied.
Thus~ theapplication of inactive rt116s can be skipped.More than one antecedeat set can usually be obtainedfor a oondition.
The optimal antecedent set is onethat minimizes the probability of activating arule~ The optimal antecedent set is one of min~nalantecedent, sets.
The minimal anteoedent set is suchan antecede/It set as any subset is not an anteoedentset for the same condition.
In order to choose theoptimal antecedent set among ,~inimal anteoedentsets, occurrence statistics of actions should begathered using a corpus of texT.4.2 ~ s  o f~ammar4.2.1 Amtecedent set for 10rimitive oonditionWe are not interested in all the antecedent sets butthe optimal one for the condition of each ruleoq~erefore, we turn our attention to intra-nodecenditions.
Intra-node conditions usually give usan effective anteoedent set ,  while inter--nodeconditions do not.%~le minimal antecedent sets for an intra-nodecondition are as follow.
Here, antecedent sets aredefined separately for each node (indicated by ibelow), as the truth value of a oondition varieswith nodes.
It is necessary to consider two cases.One is that the attribute in the condition is notrelated to any inter-node action.
~ne other is thatthe attribute in the condition is related to sQme/ nter-node actions.
(I) When the attribute is not related to anyinter-node action, the truth value of a condition ata node i is effected only by actions at the samenode i.
"therefore, only the actions at the samenode i are included in the antecedent set.e.g., The minimal antecedent sets for a conditionTi p \[ t, t' \] are \[ T i = T i + It\] \] and T i=T i+\ [ t ' \ ]  \] .A comment should be given on cfm~posite actions.
Forinstance, T i = T i + \[ t, t', t" \] is also anantecedent action.
However, it is decomposed into%'i = Ti + \[ t \], T i = T i + \[ t' \] andT i = T i + \[ t" \].
Therefore, we exclude it fromantecedent sets.e.g., The minimal antecedent set for a conditionT in  \[ t, t' \] % ~ is\[ T i = T i + \[t\] , T i = T i + \[t'\] \] .
(2) When the attribute is related to same inter-nodeactions, the truth value of a condition at a node imay be effected by actions at another node v ia  aninter-node action (See Fig.
3).
Therefore, 'theantecedent sets need to include the actions at allthe nodes.e.g., The minimal antecedent sets for a conditionT iP  \[ t, t' \] are\[ Tj = ~i + \[t\] , j=l,..,N \] and\[ Tj = T~ + It'\] I j=l,",N \] .e.g?, -The ~tinimal antecedent set for a conditionTin \[ L,t' \ ]?
@ is\[ Tj = Tj + \[t\] , Tj -- Tj + It'\] !j=I,..,N \] .In this case, obviously the antecedent sets for arule are camDn to all the nodes.On the other, hand, we cannot obta in  effectiveantecedent sets from an inter-node condition.
Forinstance, the minimal antecedent set for anJmter-node condition T i = Tj must  includeactions Tj = T i + \[ t \] (for any t), as T i =T i + \[ t "\] make true the condition together withTj = Tj + \[ t \].
Accordingly, the minimalantecedent set includes a large number of actionsand has a rather large occurrence probability.4.2.2 Antecedent set for ruleA minimal antecedent set for a condition or a ruleis synthesized by those for the  constituentprimitive conditions.
For this purpose, 1"/~ecendition )~rt of a rule is transforme~ intocon jtu~ctive canonical  form.
The conjunctive'canonical form is a logical AkD of terms, each termbeing a logical OR of one or more primitives.
InFig.
4r the condition part of the rule in Fig.
1 isshown in conjunctive canonical form.In the oonj\[mctive canonical form, a term is true ifanyone of t/~ primitives is trHe, and it is false ifall the pr~nitives are false.
Therefore, the unionof the minimal antecedent sets of the primitives isthat for the term.
Here, the detailed procedure isseparated J~to two cases.
In the case of the termbeing re lat~ to the key node variable in the rule,t/~e minimal antecedent sets for the node concernedshould be t~ited.
On the contrary, in case the termis related to a node variable other than the keynode variable, the minimal antecedent sets for allthe nodes should be united, because any node may, asa result of structural change, occupy the locationthat oorresixgnds to the node variable the term isrelated to (See Fig.
5).The condition, a logical A~) of terms, is totallytrue if and only if all the terms are true.Accordingly, each minimal antecedent set for one ofFig.
3i li n t ra -node  I, Jact ion  a~j  JT j=t j+\[ t \ ]  .
.
.
.
~ J  D \[t\]~~ter 'nod~act ion  ITi=Tj )condi t ion  at ii l~Ti D \[t\]|----~ T iD  \[ t, t' \]k , \ ]?Antecedent  ac t ion  v ia  in ter -node  act ionFig.
4 ~os i t ion  of a cond i t ionl \[?Act ion  at\[Uj=u, U j=u ' \ ] - - -~\ [Fig.
53pt uctura \]~Change J~>cond i t ion  at ii * X. .
.
.
9~x=\ [ t , t  "T\] IY T a " ,.
.
.
.
.
~Uy=u or Uy=u'\]Iv, = vx \]Antecedent  set v ia  s t ructura l  chan~e827the terms is that for the condition.
As thecondition part of a rule usually includes one ormore terms comprised of intra-node conditions, itdoes not matter tlmt effective antecedent setscannot be obtained from inter-node condJtions~As an example of the nlinJ/~al antec6~\]ent set for arule~ those for the rule .in Fig.
1 are given below.\[ T i = T i + \[ t \] \] ,\[ Ti = Ti + \[ t' \] \]\[ L j  = a ' j=I, - .
,N \]\[ Uj  U , Uj  = u !
j= I , "~N \] .4.2.3 Inverse actionThe inverse of an action can be easily defined?e.g., The inverse action of Tj = T i + \[ t \]is T i = T i - \[ t \] .The inverse action for an antecedent set is obtainedby connecting all the inverse actions in the set?The following are the inverse actions correspondingto the antecedent sets shown in 4.2.2.T i = T i - \[t\] ,T i = T i - \[t'\] ,( L\]n--- a ) & -.
& ( LN~= a ) ,( U l~= u ) & ( U l~= u' ) & .
?
&( I ,N~= u' ) .4.3 Modification of .granmmrAmong tile minJlnal antecedent sets for each rule, theoptimal one is selected statistically using a corpusof text.
Then, t/he grammatical rules are modifiedas follow.
When the action part of a rule R'includes a member action of the antecedent set for arule R, the action to activate R is added to theaction part of R'.
Likewise, when the action part'of a ~ule R" includes the inverse action of theantecedent set for a rule R, the action todeactivate R is added to the action part of R".We should add a comment on the s?atus of a ruleo Inprinciple, a status is defined for ead\] node.However, when the antecedent set is related to ancde variable other than the key node variable, oran attribute relating to scme inter-node actions, astatus cfmm~n to all the nodes is defined.4.4 Improved 9rammar executorAn .improved grm~m~- executor whid~ exec\[~tes thel~odifJ.ed gran~k~r is il\].ustrate<\] in Fig?
6.
A statustable indicating the status of rules is introduced?It is updated by both the initializer and thetrensformer, and looked up by the contro\]ler~ 'l~neinitializer ac.~ivates the rules in whJ ch theantecedent set includes an action in the process tocreate the initial object data?
The transformerperforms rule activating/deactivating actionsinclude~\] in the m<x\]ified grammar.
The controllerlooks up the status table whea it selec~.s the ruleto apply.
While the control is transferred to thepattern matcher if the rule is actJ ve ~ thecontroller irm~diately selects the next rule toal~ply if the rule is inactive?5o EffectivenessThe ~0roveanent of processing efficiency by ~leproposed ~thcx\] is disc~assed frc~t two points ofvi?~: ~he probability that rnles are active and theoverhead cmused by dynamic ru\]e activation?
(i} Probability that rules are active?The probability t\]mt a rule succeeds in patter~\]matching is a lower lJn/t for the probability thatthe rule is activated~ However, the \]?~er limit(~nnot be realized~ because a rule is activated withprerequisite actions for its c~ondition beingsatisfied~ q~e state ~active' implies just thepossibility t/\]at the rule will be appliedsuccessfully.
The gap between the probabilities of'active' and ' success' varies with rules.
Fig~ 7illustrates two extreme cases.
Fig.
7(a) is a casein which there is a minimal en~tecedent set for whichoccurrence probability is near the probability oft/~e condition being satisfied.
Fig.
7(b) is a casein w~dch there is no such ndnimal antecedent set.As a matter of fact~ (a) is a usual case and (b) iss rare case.
A rule usually has a key conditionfeaturing its relevant \]ing\[d.stic phenomenon, fromwhich an effective antecedent set can be obtained?~herefore~ the probability of 'active' is reduced tothe same order as the probability of 'success'.
(2) Overhead of dynamic rule activation.No additional conditXons are introduced to thecondition parts of rules to judge if an acTXon toactivate/deactivate a mile should be performed?828or ingMemory \]O (% (%1  C--  tter.
.
.
.
.
t<==R.lestotuYq lTab le  \] <~=======~~Status  U ~  ~-~%Fig.
6 Im~edJ__q_rammar  executorGranm~arContro lFarameterModi f ied  RuleCond i t ionAct ionRule Act ivat ionRule Deact ivat ionsuccess  successact iveve(a) Usual  case (b) Rare caseA, BF C : min ima l  antecedent  setFlu.
7 P robab i l i t~  of 'act ive ~ vs.P robab i l i t~  of 'success'Although rather a large number of actions toactivate/deactivate a rule are added to action partsof rule~'~, the action parts are infrequentlyperformed.
Moreover, although looking up the statusof rules occurs frequently, its load is far smallert/~1 that of pattern matching, which would berepeated if the dynamic rule activation were notused.
~erefore, the overhead caused by dynamicrule activation can be neglected.Another effect of the proposed method is that it canbe applied to on -d~d loading of rules when the|1~anory a~pacity for a grammar is limited.
That is,while rules with a large probability of 'active' aremade resident on the main memory, the other rulesare loaded when they are to ~ applied.
Thus thefrequency of loading rules is minimized.6.
ConclusionAn efficient execution method for rule based machinetranslation systems has been developed.
~e  essenceof the met21od is as follows.
Firs t, a grammar ispre-analyzed to determine an antecedent set for eachrule.
The ~tecedent set for a rule is a set ofactions such that perfo~r?ing an action in it causesthe possibility of the condition of the rule beingsatisfied, and the condition of the rule isunsatisfied if any action in it is not performed.At execution time, a rule is activated only when anaction in Ule antecedent set for the rule isperfol~=d?
qhe rule application is restricted toactive rules.
The probability of a rule beingactive is reduced to near the occurrence probabilityof its relevant linguistic phenomenon.
Thus mostpattern l,~tching of unfruitful rules is avoided.Acknowledgement: I would like to acknowledge Dr.Jun Kawasaki, Mr .
Nobuyoshi Dc~en, Mr. KoichiroIshihara and Dr. ~n  Watanabe for their valuableadvice and constant encouragement.ReferencesNewell A.
(1973).
Production Syst~ns: Models ofControl Structures, in Visual Information Processing(ed.
W. C~ase; Academic Press).\[2\] Boitet C., et al (1982).
Imp l~tat ion  andConversational ~vironment of ARIANE 78.4, Proc.O01~NG82.\[3\] Nakamura J., et al (1984).
Grarsnar WritingSystesl (GRADE) of Mu-Machine Translation Project andits Characteristics, Proc.
OOLING84.\[ 4 \] Eaji H. ( 1987 ).
HICATS/JE : AJapanese-to-English Machine Translation System Basedon Se~ntics, Mac/line Translation SLmmdt.\[5\] Forgy C.L.
(1982).
Rete : A Fast Algoritl~n forthe Many Pattern / Many Object Pattern MatchProblems Artificial Intelligence0 Vol.
19.~129
