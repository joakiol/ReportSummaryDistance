XML and Multilingual Document Authoring: Convergent TrendsMarc l )ymctman Veronika LuxXerox  Research  Centre Europe6, chemin  de Maupertu is38240 Meylan,  France{ dymetman, lux  } @xrce .xerox .comAarne RantaDepar tment  of  Comput ing  ScienceChahners  Univers i ty  of  Techno logyand GOteborg Univers i tyS-412 96 GOteborg,  Swedenaarne @ cs.chahners,  eAbstractTypical al)proaches to XML authoring view a XML doc-urnent as a mixture of structure (the tags) and surlhce(texl between the tags).
We advoeale a radical approachwhere the surface disappears from lhe XML documenlaltogether to be handled exclusively by rendering mech-anisms.
This move is based on the view that the author'schoices when authoring XML docutnciHs are best seenas language-i~eutral semantic decisions, that lhe SlftlC-lure can then be viewed as inlerlingual content, and thatthe textual oulpul  should be derived from this co)lien\[ bylanguage-sl~ecific realization mechanisms, lhus assimi-lating XML aufllol'ing lo Mullilingual Document Amhofing.
However, slandard XMI, tools have imporlant lhni-tations when used for such a ptu'pose: (1) they are weakat propagating semanlic dependencies belween dil'ferenlparts of the st,'ucture, and, (2) current XMI.
renderingtools are ill-suited for handling the grammatical combi-nation of lextual units.
We present two relalcd proposalsfor overcoming these limitalions: one (GI:) origitmtingin the Iradilion of malhemalical proof edilors and con-slruct ivc type lhcery,  the other  (IG), a special i?at ion o fl)elinite Clause (_\]ranllllars strongly inspired by (iF.1 IntroductionThe typical al3pl'oacll to XML authoring views an XMLdoctmlcnt as a mixture of wee-like strttctttre, expressedthrougll balanced labelled parentheses (tim lags), andof sul:face, expressed llu'ough free lexi interspersed be-tween lhe tags (PCI)ATA).
A l)octunent Type l)elini-lion (DTD) is roughly similar to a coiitext-free gram-mar j with exactly one predelined terminal.
It delines aset o1' well-formed structures, (hat is, a la,guage overtrees, where each nonterminal node can dominate itherthe empty string, or a sequence of occurrences of nonter-minal nodes and of 111o terminal node pcdata.
The ter-minal pcdata  has a specM status: it can in turn dominateany characler string (subjecl to certain reslrictions on thecharacters allowed).
Authoring is typically seen as a top-down interactive process of step-wise refinement of theroot nonterminal (corresponding to the whole document)where the aulhor  ileratively chooses arule for expandingIBu( see (l'rescod, 1998) lbr an inleresfing discussion oflhe differ-enccs.a nonlerminal aheady present in the tree, 2 and where inaddition the author can choose an arbitrary sequence ofcharacters (roughly) for expanding lhe pcdata  node.One can observe the following trends in the XMLworld:A move towards more typing of the surface:Schemas (W3C, 1999a), which are an inlluemialproposal for the ieplacenlent of I)TD's, provide fortypes such as f loat ,  boolean, uri, etc., instead o\["the single type pcdata;A move, aheady constitulive of the main lmlposeof XMl, its opposed l(1 HTML for instance, towardsclearer separation between content and form, wherethe original XML document is responsible for con-lent, and powerful styling lnechanisms (e.g.
XSI.T(W3C, 1999b)) are available for rendering 111o doc-tlll/en\[ \[o lhe end-user .We advocate an approach in which these two movesare radicali?cd in tile folk)wing ways:Strongly typed, surface-free XML documents.
Thewhole content of the document is a trcc whore each nodeis labelled and typed.
For inlernal nodes, lhe lype is justthe usual nonierminal name (or category), and Ille labelis a name for the expansion chosen for this nonlernfinal,lhat is, an identifier of which rule was chosen to expandibis nonterminal.
For leaves, lhe type is a semanlicallyspecilic category such as Integer, Animal, etc., and lhelabel is a specilic concept of this type, such as three ordog)Styling responsible for producing tim text itself.The styling mechanisnl is not only responsible for ren-dering the layout of the lext (typography, order and pre-sentation of lhe elements), but also for producing the textitse!ffrom 111o document content.What are (he motiw~tions behind this proposal?Autlmring choices carry language-independentmeaning.
First, let us note that lhe expansion choices2We arc ignoring here tl~e aspecls of lhis process relating to lheregular ,mlure of Ihe righ(-halld sides of rules, but Ihese parliculars areuncssenlial lo the nlaill g:lfgtllllOnl.3Note Ihat lnlcgcr is of"logical type" e, whereas Animal is of log-ical lype (c, t): lhe,'c is no reslriction on lhe denotalional s alus ofleaves.243<!ELEMENT R isk  (Caut ion  I Warn ing)  > r i sk - ru le l :  R i sk  --> Caut ionr i sk - ru le2 :  R i sk  --> Warn ing<!ELEMENT Caut ion  ( .
.
.
I .
.
.
I .
.
.  )
> caut ion - ru le l :caut ion - ru le2 :caut ion - ru le3 :Caut ion  --> ..,Caut ion  --> ...Caut ion  --> ...Figure 1 : Context-flee rules (shown on the right) corresponding to the aircraft DTD (shown on the left); for illustrationpurposes, we have assumed that there are in turn three semantic varieties of cautious.
The rule identitier on the leftcan be seen as a semantic label for each expansion choice (in practice, the rule identifiers are given mnemonic namesdirectly related to their meauing).made during the authoring of an XML document gener-ally carry language-independent meaning.
For instance,the DTD for an aircraft maintenance manual might belegally required to distinguish between risk instructionsof two kinds: caut  ion (risk related to material damages)and warn ing (risk to the operator).
Or a D~'I) describinga personal list of contacts might provide a choice of gen-der (male, female) ,  title (dr, p ro f ,  de fau l t ) ,  country(ger, fra,...), etc.
Each such authoring choice, whichformally consists in selecting among different rules forexpanding the same nonterminal (see Figure 1), corre-sponds to a semantic decision which is independent ofthe language chosen for expressing the document.
Agiven DTD has an associated expressive space of treestructures which fall under its explicit control, and theauthor is situating herself in this space through top-downexpansion choices.
There is then a tension between onthe one hand these cxplicitely controlled choices, whichshould be rendered differently in different languages(thus ger  as Germany, Allemagne, Deutschland .... andWarning by a paragraph starting with Warnillg!
...; At-tention, Danger!
...; Achtung, Lebensgefahr!
...), andon the other hand the uncontrolled inclusion in the XMLdocument of free PCDATA strings, which are written ina specific language.Surface-fi'ce XML documents.
We propose to com-pletely remove these surface strings from the XML doc-ument, and replace them with explicit meaning labels.
4The tree structure of the document then becomes the solerepository of content, and can be viewed as a kind of in-terlingua for describing a point in the expressive spaceof tile DTD (a strongly domain-dependent space); it isthen the responsability of the language-specific renderingmechanisms to "display" such content in each individuallanguage where the document is needed.XML and Multil ingual Document Authoring.
Inthis conception, XML authoring has a strong connectionto the enterprise of Multilingual Document Authoring inwhich the author is guided in the specilication of thedocument content, and where the system is responsible4There are autlmring situations in which it may be necessary forthe user to introduce new selllalllic labels eorleSl)onding lo expres-sive needs not foreseen by lhe creator of the original I)TD.
To handlesuch situations, it is useflfl to view the l)TI)'s as open-ended objecls 1owhich new semantic labels and types can be added at authoring time.for generating from this content extual output in severallanguages imultaneously (see (Power and Scott, 1998;Hartley and Paris, 1997; Coch, 1996)).Now there are some obvious problems with this view,due to the current limitations of XML tools.Limitations of XML for multilingual document au-thoring.
The first, possibly most serious, limitationoriginates in the fact that a standard DTD is severely re-stricted in the semantic dependencies it can express be-tween two subtrces in the document structure.
Thus, ifin the description of a contact, a city of residence is in-cluded, one may want to constrain such an informationdepending on the country of residence; or, in the air-craft maintenance manual example, one might want toautomatically include some warning in case a dangerouschemical is mentioned somewhere lse in the document.Because DTD's are essentially ofcontcxt-fi'ce expressivepower, the only communication between a subtree and itsenvironment has to be mediated through the name of thenonterminal rooting this subtree (for instance the nonter-minal Country) ,  which presents a bottleneck to informa-tion ilow.The second limitation comes fi'om the fact that the cur-rent styling tools for rendering an XML document, suchas CSS (Cascading Style Sheets), which arc a strictlylayout-oriented language, or XSLT (XSL transformationlanguage), which is a more generic tool for transformingan XML document into another one (such as a display-oriented HTML file) are poorly adapted to linguistic pro-cessing.
In particulm, it seems difficult in such for-malisms to express uch basic grammatical facts as ntun-ber or gender agreement.
But such problems becomecentral as soon as semantic elements corresponding totextual units below the sentence level have to be com-bined and rendered linguistically.We will present two related proposals for overcom-ing these limitations.
The first, the Grammatical Frame-work (GF)(Ranta, 2000), originates in constructive type-theory (Martin-L6f, 1984; Ranta, 1994) and in mathe-matical proof editors (Magnusson and Nordstr6m, 1994).The second, h~teraction Grammars (IG), is a specializa-tion of Definite Clause Grammars trongly inspired byGF.
The two approaches present certain lk)rmal differ-ences that will not be examined in detail in this papeh244but they share a number of important assumptions:?
The semantic representations are strrmgly O'pedtrees, and rich dependencies between subtrees canbe specilied;?
The abstract tree is independe,lt of tile different ex-tual realization hmguages;?
Tim surface realization in each language is obtainedby a semalltics-driven compositional process; thatis, the surface realizations are constructed by abottom-up recursive process which associates ur-face realizations to abstract ree nodes by recur-sively combining the realizations of daugthcr nodesto obtain the realization of the mother node.?
The grammars are revelwible, that is, can be usedboth for generation and for parsing;?
The authoring process is an interactive processof repeatedly asking the author to further specifynodes in the absmlct ree of which only the type isknown at the 1)oint of interacti(m (tyFe re/itlemeHt).This process is mediated througll text in the lan-guage of the author, showing the types t(5 be relinedas specially highlighted textual units.2 GF  ~ the  Grammat ica l  F rameworkThe Grammatical Framework (GF; (Ranta, 2000)) is aspecial-purpose programming hmguage combining co~z-strttctive type thee O, with an annotation hmguage forconcrete syntax.
A grammar, in the sense of GF, delines,on one hand, an abstract s3,1ttax (a system of types andtyped syntax trees), and on the other hand, a mapping {51tile abstract syntax into a co,icicle sy, tta.v.
The abstractsyntax has cotCtlot 3, declarations, uch ascat  Count ry  ; ca t  C i ty  ;and combinator (orfttnctiolO dechuations, uch asfun Get : Country ; fun Fra : Country ;fun Ham : C i ty  ; fun Par : C i ty  ;fun cap : Country -> C i ty  ;The type of a combinator can be either a basic type, suchas the type C i ty  of the combinator Ham, or a functiontype, such as the type of the combinator cap.
Syntaxtrees formed by combinators of functioll types are con>plex functional terlns, such ascap Fraof type City.
"file concrete syntax part of a GF grammar gives lit~-earization rules, which assign strings (or, in general,more complex linguistic objects) to syntax trees.
For theabstract syntax above, we may lmvefin Ger = "Germany" ; f in Fra = "France" ;l in Ham = "Hamburg" ; l in Par : "Paris" ;lin cap Co = "the capita l  of" ++ Co ;Thus tile linearization of cap Fra isthe capital  of France2.1 GF inXMI ,Functional terms have a straightforward encoding inXML, l'el~resenting a term of tile forna.\[ (11  .
.
.
( I ,~by the XML object<J'> ct', .
.
.
a',, < / f>where each e~ is tile encoding of a i.
In this encoding,cap Fra is<cap><Fra></Fra></cap>Tile simple encoding does not pay attention to thetypes (51' the objects, and has no interesting DTI).
Toexpress type distinctions, we will hence use a slightlymore complicated representation, i  which the categoryand combinator declarations of GF are represented asDTDs in XML, so that GF type dlecking becomes equiv-alent ,a, itll XML validatiom The represelm~tion f the GFgrallllllaf o1' tile previous ection is tile DTI)<!ELEMENT Country (Ger \[ Fra)  ><!ELEMENT Get EMPTY ><!ELEMENT Fra EMPTY ><!ELEMENT City (Ham I Par I (cap,Country))><!ELEMENT Ham EMPTY ><!ELEMENT Par EMPTY ><!ELEMENT cap EMPTY >In this DTD, each category is represented as an EI,E-MENT dclinition, listing all combinators producing treesof that category.
The combinators themselves are repre-sented as EMPTY elements.
The XML representation fthe capital (51' France is<City><cap /><Country><Fra /></Country></City>which is a wdid XML object w.r.t, tile given DTD.The latter encoding of GF in XML enjoys two impor-tant properties:?
All well-typed GF trees are represented by validXML objects.?
An XML represents a unique GF tree.The tirst property guarantees that type checking in thesense of GF (and type theory) can be used for validationof XML objects.
The second property guarantees that GFobjects can be stored in tim XML format.
(The secondproperty is already gt, aranteed by tile simpler encoding,which ignores types.
)()ther prope,'ties one would desire are the followillg:245?
All valid XML objects represent well-typed GFtrees.?
A DTD represents a unique GF abstract grammar.These properties cannot be satislied, in general.
The rea-son is that GF grammars may contain dependent types,i.e.
types depending on objects.
We will retnrn to thisnotion shortly.
But let us first consider the use of GF fornmltilingual generation.2.2 Multilingualgeneration i GFMultilingual generation i  GF is based on parallel gram-mars': two (or more) GF grammars are parallel, if theyhave the same abstract syntax.
They may differ in con-crete syntax.
A grammar parallel to the one above is de-fined by the concrete syntaxparam Case = hem \[ gen ;oper noml : Str -> Case => Str =ks -> tbl {{nom} => s, {gen} -> s+"n"} ;oper nom2 :S t r  -> Case => Strks -> tbl{{nom} => s+"ki", {gen} -> s+"gin"} ;l incat Country = Case => Str ;l incat City = Case => St r ;lin Ger = noml "Saksa" ;lin Fra = noml "Ranska" ;lin Ham = noml "Hampuri" ;l in Par = noml "Pari isi" ;l in cap Co =tbl {c => Co!gen ++nora2 "p~iikaupun" !
c} ;This grammar renders GF objects in Finnish.
In additionto linearization rules, it has rules introducing parametersand operations, and rules detining the linearization O,pes"corresponding to basic types: the linearization type el'Country, for instance is not just string (Str), but a func-tion fl'om cases to strings.Not only the linearization rules proper, but also param-eters and linearization types wwy a lot fl'om one hmguageto another.
In our example, we have the paralnetre of easewith two values (in larger granunars for Finnish, as manyas 16 may be required!
), and two patterns for inflectingFinnish nouns.
The syntax tree cap Fra produces thestringsRanskan p~fikaupunkiRanskan p~kaupung inwhich are the nominative and the genitive form, respec-tively.2.3 Del)endent typesDTDs in XML are capable of representing simple types,i.e.
types without dependencies.
Even a simple type sys-tem can contribute a lot to the semantic ontrol of doc-uments.
For instance, the above grammar permits theformation of the English noun phrasethe capital  of Francebut not ofthe capital  of ParisBoth of these expressions would be well-formed w.r.t.an "ordinary" granunar, in which both France and Pariswould be classitied simply as noun phrases.Dependent types are types depending on objects ofother types.
An example is the following alternative dec-laration of Country and City:cat Country ; cat City (Co:Country) ;Under tiffs definition, there are no objects of type City(which is no longer a well-formed type), but of typesCity Ger and City Fra.
Tlms we define e.g.fun Ham : City Ger ; fun Par : City Fra ;fun cap : (Co:Country) -> City Co ;Observe the use of the variable Co in the type of the com-binator capital: the variable is bound to the argumenttype and then used in the value type.
The capital of acountry is by definition a city of the same country.
Thisinvolves a generalization o1' function types with depen-dent types.Now consider a simplified format ()f postal addresses:an address is a pair of a country and a city.
The GF ruleis eitherfun addr : Country  -> C i ty  -> Address ;i i n  addr  Co C = C ++ " , "  ++ Co ;using simple types orfun addr :(Co:Country)  -> C?ty Co -> Address ;&in addr  Co C = C ++ " , "  ++ Co ;using dependent types.
The invalid addressHamburg, Franceis well-typed by the former definition but not by the lat-ter.
Using the laUer delinition gives a simple mechanismof semantic ontrol ot' addresses.
The same idea can ob-viously be exlended to full addresses with street namesand numbers.
Such dependencies cannot, however, beexpressed in DTDs: both of the address rules above cor-respond to one and the same ELEMENT definition,<!ELEMENT Address (addr, Country, City) >This exampleenoughlbr GF<Address><addr /><Country><Fra /></Country><City><Ham /></City></Address>also shows Illat XML validity is notwell-formedness: the object246is valid w.r.t, the DTD, but the corresponding Ot-; objectaddr  Fra  ttamis not well-typed.2.4 Computation rulesIn addition to categories and cornbinators, GF grammarsmay contain definitions, uch asdef  cap Fra  = Par ;Definitions belong to the abstract syntax.
They definea normal form for syntax trees (recursively replace de-fienda by definientes), as well as a paraphrase relation(sameness of normal tbrm).
These notions are, of coursereflected in the concrete syntax: the addressesthe capital of France, FrancePar i s ,  F ranceare paraphrases, and the latter is the normal form of theformer.= .
.
.
.
- - , -  , - - -  1\[U"e m IE'~i ml~w ml?pu?i's ~lum= ~J IINllI\[ "''~ ~ ~ ~ I / l lI I ~h~1- ~ul~f  ~ / / 1 1I I  lt'~eore~.
Fc?
aH numbers ?, there e?ists a rtlOcer u ' such I / /11I I  ~hat ~.L~ ~,~n~ U~ ,,'.
~-o~f.
C~-.id~.
~,~'bitr ,  a~u I / /11 nuliJer x.
'?z3re<~?
.
Ik.nce, "for' a l l  r i J~2rs ~, there ex is ts  a I l l  IIl i  ~-,4,c,r'e~.
Pot  tous lore rBc~hoes ;4. i l  e~i~te ~.~mbre  ~: ' .~ \ [ / I1j \ [  x ,  ~ r~.
,  ~.111~\] (~  t~.
: n~',-~, ~- ~ ~-ooql II//1/I\[ m~oon L~,u:~oUil l  " " t~- (~-  n~, u =(~.
'ql II j i l lI I  e t~oH lukux~ik4} l  .
.
.
.
.
.
I .
.
.
.
.
.
.
.
.
v .
I I I l l / I tI \[ <Text > crh,ua~w,-o411 ~,~.
(, ,:- \[~, r,, q I I I l l / I /I I <Pr*~> <E--:ist/> <0c~ll E~t , / i ' .
~ -_ ~ , ,  ~-_ (~ =11 I I IM II</Prop> <~r'oo> </ @tEll _ .
.I .
.
.
.
ta ~ ~_l~m H, .................................... Ill.,,,  411Lt?~a ~ Proof (Exist  !lat (','..'>:' q l l?l .
l  0:~s~ r,, s: ~" ~ ' ,~  tl I i i-\]1t-- ~iI1_:_'.
~ ,_ t%: t~:F?
?~) \ ] l l l~Figure 2: GF session for editing a mathematical prooftext.2.5 GF editing toolsAn editing tool has been implemented for GF, usingmetavariables to represent yet undefined parts of expres-sions.
The user can work on any metavariable, in variousdifferent ways, e.g.?
by choosing a combinator f om a menu,?
by entering a string that is parsed,?
by reading a previously defined object from a file,?
by using an automatic search of suitable instantia-tions.These functionalities and their metatheory have beenused for about a decade in a number of syntax edi-tors for constructive type theory, usually known as proofeditors (Magnusson and NordstrOm, 1994).
From thispoint of view, the GF editor is essentially a proof edi-tor together with supplementary views, provided by theconcrete syntax.
The current implementation of GFis a plugin module of the proof editor Alfa (Hallgren,2000).
The window dump in Figure 2 shows a GF ses-sion editing a mathematical proof.
Five views are pro-vided: abstract syntax in type-theoretical notation, En-glish, French, Finnish, and XML.
One metavariable isseen, expecting the user to find a Proof  of the proposi-tion that there exists a number .r' such that a', is smallerthan x', where x is an arbitrary number given in the con-text (for the sake of Universal Introduction).3 IG : Interaction GrammarsWe have just described an approach to solving the limita-tions of usual XML tools for multilingual document au-thoring which originates in the tradition of constructivetype-theory and mathematical proof editors.
We will nowsketch an approach strongly inspired by GF but whichformally is more in the tradition of logic-programmingbased unification grammars, and which is currently un-.der development at Xerox Research Centre Europe (see(Brun et al, 2000) for a more extended escription ofthis project).Definite Clause Grammars, or DCG's, (Pereira andWarren, 1980), are possibly the simplest unification-based extension of context-free grammars, and havegood reversibility properties which make them adaptedboth to parsing and to generation.
A typical view of whata DCG rule looks like is the following: 5a(a l (B ,C  .
.
.
.  ))
---><text l> ,b(B),<text2>,e(c ) ,<text3>,{constraints (B,C,...)}.This rule expresses the fact that (1) some abstractstructure a l  (B, C .
.
.
.  )
is in category a if the structureB is in category b, the structure C in category c..... andfurthermore a certain number of constraints are satisfiedby the structures B, C .... ; (2) if the structures B, C .... canbe "rendered" by character strings St r ingB,  Str ingC,.... then the structure a l (B ,C .
.
.
.  )
can be rendered bythe string obtained by concatenating the text <text:t>(that is, a certain constant sequence of terminals), thenSt r ingB,  then <text2>, then Str ingC,  etc.In this formalism, a grammar for generating Englishaddresses (see preceding section) might look like:SReminder: according to the usual ogic programming conventions,lowercase letters denote predicates and functors, whereas uppercaseletters denote metavariables that will be instantiated with terms.247address(addr(Co,C)) --> city(C), ",",country(Co).country(fra) --> "France".country(get) --> "Germany".city(par) --> "Paris"city(cap(Co)) --> "the capital of",country(Co).The analogies with the GF grammars of the previoussection arc clear.
What is traditionally called a cate-gory (or nonterminal, or predicate) in the logic program-ruing terminology, can also be seen as a type (address,country ,  c i ty )  and functors uch as get,  par,  addr,cap can be seen as combinators.If, in this DCG, we "forget" all the constant stringsby replacing them with the empty string, we obtain thefollowing "abstract grammar":address(addr(Co,C)) --> city(C), country(Co).country(fra) --> \[\].country(ger) --> \[\].city(par) --> \[\].city(cap(Co)) --> country(Co).which is in fact equivalent to the definite clause pro-gram: 6address (addr (Co ,C) )  : -  c i ty (C) ,  count ry (Co) .count ry ( f ra ) .country(ger) .city(par) .city(cap(Co)) :- country(Co).This program is language-independent andrecursivelydclines a set el' well-formed trees to which it assignstypes (thus cap( f ra )  is a well-formed tree o1' typecity).As they stand, such definite clause grammars and pro-grams, although suitable Ibr simple generation tasks, arenot directly adapted for the process of interactive multi-lingual document authoring.
In order to make them moreappropriate for that task, we need to specialize and adaptDCGs in the way that we now describe.Parallel grammars.
The tirst move is to allow forparallel English, French ..... grammars, which all havethe same underlying abstract gralnmar (program).
So inaddition to the Englisb grammar given above, we havetim French grammar:address(addr(Co,C)) --> city(C), ",",country(Co).country(fra) --> "la France".country(get) --> "l'Allemagne".city(par) --> "Paris".city(cap(Co)) --> "la capitale de",country(Co) .6hl the sense that rewriling the llOntCI'nlilull goaladdress  (addr (Co ,C) ) to the empty siring in lhe I)CG is equivalent|o proving the goal address  (addr (Co, C) ) in the program (l)cransartand Maluszynski, 1993).Dependent  Categor ies .
The grammars we have givenarc delicient in one importaut respect: there is no de-pendency between the city and the country in the salneaddress.
In order to remedy this problem, a stan-dard logic programming move would he to reformulatethe abstract grammar (and similarly for the language-dependent ones) as:address (addr (Co ,C) )  - -> c i ty (C ,Co) ,count ry (Co) .count ry ( f ra )  - -> \ [ \ ] .count ry (ger )  - -> \ [ \ ] .c i ty (par , f ra )  - -> \ [ \ ] .c i ty (cap(Co) ,Co)  - -> count ry (Co) .The expression c i ty (C ,  Co) is usually read as the re-lation "C is a city of Co", which is line for computationalpurposes, but this reading obscures the notion that theobject C is being typed as a c i ty ;  more precisely, it isbeing typed as a c i ty  of Co.
In order to make this read-ing more apparent, we will write the grammar as:address(addr(Co,C)) --> cityc0(C),country(Co).country(fra) --> \[\].country(ger) --> \[\].cityf~(par) --> \[\].cityco(cap(Co)) --> country(Co).That is, we allow the categories to be indexed by terms(a move which is a kind of "currying" ot' a relation intoa type for its first argument).
Dependent categories aresimilar to the dependent types of constructive type the-ory.Heterogeneous trees.
Natural language authoring isdifferent from natural language generation in one cru-cial respect.
Whenever the abstract ree to be generatedis incomplete (for instance the tree cap(Co)),  that is,has some leaves which are yet uninstantiated variables,the generation process should not proceed with noude-terministically enumerating texts for all the possible in-stantiations of the initial incomplete structure.
Instead itshould display to the author as much of the text as it canin its present "knowledge state", and enter into an inter-action with the author to allow her to further refine theincomplete structure, that is, to further instantiate someof the uninstantiated leaves.
To this purpose, it is use-ful to introduce along with the usual combinators (addr,f ra ,  cap, etc.)
new combinators of arity 0 called type-names, which are notated type, and are of type type.These combiuators are allowed to stand as leaves (e.g.
inthe tree cap(country) )  and the trees thus obtained aresaid to be heterogeneous.
The typenames are treated bythe text generation process as if they were standard se-mantic units, that is, they are associated with text trailswhich arc generated "at their proper place" in the gen-erated output.
These text units are specially phrased andhighlighted to indicate to the author that some choice hasto be made to reline the underlying type (e.g.
obtaining248the text "la capimle de PAYS").
This choice has the efl'ectof further instantiating the incomplete tree with "true"combinators, and the gmmration process is iterated.Extended senmntics-driven eompositionality.
Thesimple DCG view presented at the beginning of this sec-tion sees the process of generating text from an abstractstructure as basically a compositional process on strings,that is, a process where strings are recursively associatedwith subtrees and concatenated to l~roduce strings at thenext subtree level.
But such a direct process of construct-ing strings Ires well-known limitations when the seman-tic and syntactic levels do not have such a direct corre-spondence (simple example: ordering a list of modifiersaround a noun).
We are currently experimenting with apowerful extension of string compositionality where theobjects compositionally associated with abstract subtreesare not strings, but syntactic representations with rich in-ternal structure.
The text itself is obtained fiom the syn-tactic representation associated with the total tree by Siln-ply enumerating its leaves.The picture we get of an IG grammar is tinally thefollowing:aD,.
.
(al(B,C .
.
.
.  )
) -Syn  - ->bE,...(B)-SynB,CF,...(C)-SynC,{const ra in ts (B ,C , .
.
.
,D ,E ,F , .
.
. )}
,{compose_engl ish(SynB,  SynC, Syn)}.The rule shown is a rule for English: the syntacticrepresentations are hmguage dependent; Parallel rulesfor tim other hmguages are obtained by replacing thecompose eng l ' i sh  constraint (which is tmique to thisrule) by constraints appropriate to the other hmguagesunder consideration.4 ConclusionXML-based authoring tools are more and more widelyused in the business community for supporting the pro-duction of technical documentation, controlling theirquality and improving their reusability.
In this paper,we have stressed the connections between these practicesand current research in natural anguage genenttion andauthoring.
We have described two related fornmlismswhich are proposals for removing some of the limitationsof XML DTD's when used for tim production of multi-lingual texts.From a compt, tational inguist's point of view, theremight be little which seems novel or exciting in XMLrepresentations.
Still XML has a great potential as a lin-gua.franca and in driving a large community of userstowards authoring practices where content is becomingmore and more explicit.
There may be a great opportu-nity here for researchers in natural hmguage generationto connect o a growing sot, rce of applications.AcknowledgementsThanks for contributions, discussions and comments toKen Beesley, Caroline Brtm, Jean-Pierre Chanod, Marie-Hdl8ne Corrdard, Pierre Isabelle, Bengt Nordstr6m, Syl-vain Pogodalla nd Annie Zaenen.ReferencesC.
Brun, M. l)ymetman, and V. Lux.
2000. l)ocumentstructure and multilinguat authoring.
In Proceedings ofFirst h~telwatiomd Natural lzmguage Generation Confer-ence (INLG '2000), Mitzpe P, amon, Israel, June.J.
Coch.
1996.
Evahmting and comparing three text productiontech,fiqucs.
In Proceedhtgs ofthe 16th huernational Confe.r-ettce on Conqmtational Linguistics.1: l)eransart and J. Maluszynski.
1993.
A Gramntatical Viewof Logic Programming.
MIT Press.Thonms llallgren.
2000.
Alfa Home Page.
Awfilable fi'omhttp ://wm~.
cs.
chalmers, se/~hallgren/Alfa/A.
ltartley and C. Paris.
1997.
Multilingual document produc-tion: fiom support for translating to support for authoring.In Machine Translation, Special Issue on New 7bols.for Htt-man 7)'anslators, pages 109-128.L.
Magnusson and B. NordslrOm.
1994.
The ALF proof editorand its proof engine.
In Lecture Notes in Conqmler Science806.
SpringeLP.
Martin-L6f.
1984. hmdlionistic 7\]ype 7heoo,.
Bibliopolis,Naples.W.
Pardi.
1999.
XML in Action.
Microsoft Press.Femando C. N. Pereira and David II.
D. Warren.
1980.
Deft-nite clause grammars for language analysis.
Artificial huel-ligence, 13:231-278.P,.
Power and D. Scott.
1998.
Multilingual authoring usingfeedback texts.
In ProceedhTgs of the 17th h~ternationalConfelwnce on Comlmtatiom~l linguistics and 36th AnnualMeeting of the Association for Computational Lhlguislics,pages 1053-1059.P.
Prescod.
1998.
Fornmlizing SGMI, and XML In-stances and Schemata with Forest Automata Theory.http : //m~w.
prescod, net/f orest/shorttut/.A.
Ranta.
1994.
7~vpe-Theorelical Grammar.
Oxford Univer-sity Press.Aarne Ranm.
2000.
GF Work Page.
Awfilablc fi'omh'c t;p://m,m, cs.
chalmers, se/~aarne/(IF/pub/work- index/W3C, 1998.
Exlensible Marktq~ Language (XML) 1.0, Febru-ary.
W3C recommendation.W3C, 1999a.
XML Schema - l'art h Strltctttres, Part 2 :Datatypes -, l)ecembe,.
W3C Working draft.W3C, 1999b.
XSL Transformations (XSLT), Novcmbe,; W3Crecommendation.249
