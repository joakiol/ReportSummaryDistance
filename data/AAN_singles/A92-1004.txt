A PARSER FOR REAL-TIME SPEECH SYNTHESIS OFCONVERSATIONAL TEXTSJ oan  BachenkoJe f f rey  Daugher ty  tE i leen F i t zpat r i ckAT&T Bel l  Laborator iesMurray  Hill, NJ  07974ABSTRACTIn this paper, we concern ourselves with an applica-tion of text-to-speech for speech-impaired, deaf, andhard of hearing people.
The application is unusualbecause it requires real-time synthesis of unedited,spontaneously generated conversational textstransmitted via a Telecommunications Device for theDeaf (TDD).
We describe a parser that we haveimplemented as a front end for a version of the BellLaboratories text-to-speech synthesizer (Olive andLiberman 1985).
The parser prepares TDD texts forsynthesis by (a) performing lexical regularization ofabbreviations and some non-standard forms, and (b)identifying prosodic phrase boundaries.
Rules foridentifying phrase boundaries are derived from theprosodic phrase grammar described in Bachenko andFitzpatrick (1990).
Following the parent analysis,these rules use a mix of syntactic and phonologicalfactors to identify phrase boundaries but, unlike theparent system, they forgo building any hierarchicalstructure in order to bypass the need for a stackingmechanism; this permits the system to operate innear real time.
As a component of the text-to-speechsystem, the parser has undergone rigorous testingduring a successful three-month field trial at anAT&T telecommunications center in California.
Inaddition, laboratory evaluations indicate that theparser's performance compares favorably withhuman judgments about phrasing.1.
INTRODUCTIONText-to-speech researchers and developers tend to assumethat applications of their technology will focus on editedtext, either "canned" material such as name and addresslists, or free text like the AP newswire.
There has beenmuch effort aimed at preparing text-to-speech for appli-cations such as caller identification and newsreadingservices, in which texts are generally proofed and the pri-mary challenges come from issues of name pronuncia-tion, intonation contouring, etc.
In this paper, we con-cern ourselves with an application of text-to-speech forspeech-impaired, deaf, ~md hard of hearing people.
Theapplication is unusual because it requires text-to-speechsynthesis of unedited, spontaneously generated conversa-tional text.
Moreover the synthesis must occur in nearreal time as the user is typing.We will describe a parser that prepares conversationaltexts for synthesis by first performing lexical regulariza-tion of nonstandard forms and then identifying prosodicphrase boundaries.
The parser is derived from the pro-sodic phrase system presented in Bachenko and Fitzpa-trick (1990) and has been implemented as the front endof a version of the Bell Laboratories text-to-speech syn-thesizer (Olive and Liberman 1985).
As a component ofthe text-to-speech system, the parser has undergonerigorous testing during a successful three-month fieldtrial at an AT&T telecommunications center in Califor-nia.
In addition, laboratory evaluations indicate that theparser's performance compares favorably with humanjudgments about phrasing.
In Section 2 of the paper wedescribe the application and the texts.
Section 3 providesa technical description of the parser and Section 4discusses evaluation of the parser's performance.2.
THE APPLICATIONUsers of Telecommunications Devices for the Deaf(TDD's) can communicate with voice telephone users viaservices uch as AT&T's Telecommunications Relay Ser-vice (TRS).
During a TRS call, special operators readincoming TDD text to the voice telephone user and thentype that person's spoken responses back to the TDDuser, this makes for a three-way interaction i  which thespecial operator is performing both text-to-speech andspeech-to-text conversion.
Text-to-speech synthesisI.
AT&T Bell Laboratories, Naperville, Illinois.25Expected texts(e.g.
AP newswire)TDD textsSpelling Punctuation Case Syntax.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.1% errors standard upper and lower st. Englishcase conventions dialect5% errors little or single case only writtennone language ofthe deafFigure I: TDD vs. Expected Text Inputmakes it possible to automate part of this arrangement byreading the TDD text over the telephone to the voiceuser.
The synthesizer thus replaces an operator on theTDD half of the conversation, providing increasedprivacy and control to the TDD user and, presumably,cost savings to the provider of the service.TDD texts present unusual challenges for text-to-speech.
Except in laboratory experiments, large scaleapplications of text-to-speech have tended to focus onname pronunciation and "canned text" such as catalogueorders.
To the best of our knowledge, the TRS text-to-speech field trial in California represents the first largescale attempt o use speech synthesis on spontaneouslygenerated conversational texts, and also the first to usethis technology on texts that are orthographically andlinguistically non-standard.
Unlike the written materialthat most text-to-speech systems are tested on, e.g.
theAP newswire, TDD texts observe few of the writing con-ventions of English.
All text is in upper case, and punc-tuation, even at major sentence boundaries, rarely occurs;spelling and typographical errors complicate the pictureeven further (Tsao 1990; Kukich, 1992).
In addition,nearly all texts employ special abbreviations and lingo,e.g., CU stands for see you, GA is the message termina-tor go ahead.
The following example illustrates a typicalTDD text:OH SURE PLS CAIJ.
ME ANYTI/V\[E AFTER SATMORNING AND I WILL GIVE U THE NAMESAND PHONE NOS OK QGA(Oh sure, please call me anytime after Saturdaymorning and I will give you the names and phonenumbers.
OK?
Go ahead.
)Finally, many texts are written in a variety of Englishthat departs from expected lexical and syntactic patternsof the standard dialect (Charrow 1974).
For example,WHEN DO I WIIJ.
CAIJ.
BACK U Q GA is a shortTDD text that we believe most native speakers ofEnglish would recognize as When should I call youback?
Go ahead.
The (attested) example below is lessclear, but interpretable:I WISH THAT DAY I COULD LIKE TOMEETING DIFFERENT PEOPLE WHO DOESTHIS JOB AND THE WAY I WANT TO SEEHOW THEY DO IT LIKE THAT BUT THISPLACES WAS FROM SAN FRANCISCO I GUESSSyntactic variation in such texts is systematic and con-sistent (Bacbenko 1989, Charrow 1974).
Although acomplete account has yet to be formulated, Suri (1991)reports that aspects of the variation may be explained bythe influence of a native language--ASL--on a secondlanguage--English.Figure 1 above summarizes the points about TDDtexts.
Spelling error estimates come from Kukich (1992)and Tsao (1990).Timing creates an additional obstacle since we expectTRS text-to-speech to synthesize the text while it isbeing typed, much as an operator would read it at theTRS center.
How to chunk the incoming text nowbecomes a critical question.
Word by word synthesis,where the listener hears a pause after each word, is theeasiest approach but one that many people find nerve-wracking.
N-word synthesis, where the listener hears apause after some arbitrary number of words, is nearly assimple but runs the risk of creating unacceptably highlevels of ambiguity and, for long texts, may be as irritat-ing as single-word synthesis.
Our solution was to build aTDD parser that uses linguistic roles to break up thespeech into short, natural-sounding phrases.
With partialbuffering of incoming text, the parser is able to work innear real time as well as to perform lexical regularizationof abbreviations and a small number of non-standardforms.3.
A TEXT-TO-SPEECH PARSER3.1.
PARSER STRUCTURE AND RULESIn constructing the parser, our goal was to come up witha system that (a) substitutes non-standard and abbreviateditems with standard, pronounceable words, and (b) pro-duces the most plausible phrasing with the simplest pos-sible mechanism.
Extensive data collection has been thekey to success in regularizing lexical material, e.g.
theconversion of fwy (pronounced "f-wee") to freeway.Phrasing is accomplished by a collection of rules derived26from the prosodic phrase grammar of Bacbenko andFitzpatrick (1990), with some important modifications.The most radical of these is that the TDD phrasing rulesbuild no hierarchical structure.
Instead they rely onstring adjacency, part of speech, word subclass andlength to make inferences about possible syntactic onsti-tuency and to create enough prosodic cohesion to deter-mine the location of phrase boundaries.The parser works deterministicaUy (Marcus 1980,Hindle 1983).
It uses a small three element buffer thatcan contain either words or structures; once a lexical orprosodic structure is built it cannot be undone.
As TDDtext is typed, incoming words are collected in the bufferwhere they are formed into structures by rules describedbelow.
Phrasing rules then scan buffer structures.
If aphrasing rule applies, all text up to the element hat trig-gered the rule is sent to the synthesizer while, duringsynthesis, the buffer is reset and the roles restart anew.Once a structure has moved out of the buffer it cannot berecovered for exatnination by later phrasing rules.Our approach differs from other recent efforts tobuild small parsers for text-to-speech, e.g.O'Shaughnessy (1988) and Emorine and Martin (1988),where savings are sought in the lexicon rather than inprocessing.
O'Shaughnessy (1988) (henceforth O.
)describes a non-deterministic parser that builds sentence-level structure using a dictionary of 300 entries and amedium sized grammar, which we guess to be slightlyunder 100 rules.
The lexicon is augmented by a morpho-logical component of 60 word suffixes used principallyto derive part of speech; for example, .ship and -hess areconsidered good indicators that a word of two or moresyllables has the category 'noun'.
O. gives a thoroughaccount o f  his parser.
Much of his exposition focusseson technical details of the syntactic analysis, and support-ing linguistic data are plentiful.
However, evaluation ofO.
's proposals for speech synthesis is difficult since hegives us only a vague indication of how the parsed sen-tences would be prosodically phrased in a text-to-speechsystem.
Without an explicit description of thesyntax/prosody relation, we cannot be sure how to assessthe suitability of O.
's analysis for speech applications.The system described by Emorine and Martin (1988)(henceforth E&M) incorporates a 300-entry dictionaryand approximately 50 rules for identifying syntactic on-stituents and marking prosodic phrase boundaries.
Therules in this system build sentence-level structures thatare syntactically simpler than those given in O. but moregeared to the requirements of phrasing in that prosodicevents (e.g.
pause) are explicitly mentioned in the rules.Unfortunately, E&M share few technical details abouttheir system and, like O., provide no examples of theprosodic phrasing produced by their system, makingevaluation an elusive task.Applications uch as TRS, which requires near realtime processing, make systems based on sentence-levelanalyses infeasible.
In our parser, decisions about phras-ing are necessarily local--they depend on lexical informa-tion and word adjacency but not upon relations amongnon-contiguous elements.
This combined with the needfor lexical regularization i TDD texts motivates a muchstronger lexicon than that of O. or E&M.
In addition,our parser incorporates a small number of part-of-speechdisambiguation rules to make additional lexical informa-tion available to the phrasing rules.
Let us brieflydescribe each of the three components that make up thegrammar: lexicon, disambiguation rules, and phrasingrules.3.1.1.
The lexicon contains 1029 entries consisting ofwords, abbreviations, and two- to three-word phrases.Each entry has four fields: the input word (e.g.
u), theoutput orthography (you), lexical category (Noun), and alist of word subclasses (destress_pronoun short_subject).Word subclasses reflect co-occurrence patterns and mayor may not have any relationship to lexical categories.For example, Interjectionl includes the phrase byebyefor now, the adverb however, the noun phrase my good-ness, and the verb smile, as in I APPRECIATE THEI-lFff.p SMILE THANK YOU SO MUCH.
Both the lexi-cal category and subclass fields are optional--either maybe marked as NIL.
Abbreviations and acronyms are usu-ally nouns and make up 20% of the lexical entries.Nouns and verbs together make up about 50%.
Weexpect hat additions to the lexicon will consist mostly ofnew abbreviations and short phrases.3.1.2.
Lexical disambiguation rules identify part-of-speech and expand ambiguous abbreviations.
Currently,part-of-speech disambiguation is performed by ten rules.Most apply to words lexically marked for both noun andverb, e.g.
act, call, need, assigning a single category,either noun or verb, when a rule's contextual tests aresatisfied.
For example, if the third term of the buffercontains a word that is lexically marked as 'noun+verb',the word will be assigned the category 'verb' when thesecond buffer element is the word to and the first bufferelement is either a verb or adverb.
When applied to theword string expect to call, tiffs rule correctly analyzescall as a verb.
Other part-of-speech rules distinguish thepreposition to from the use of to as an infinitive marker,and distinguish the preposition vs. verb uses of like.Ambiguous abbreviations are items such as no, whichmay signify either number or the negative particle.
SinceTDD texts lack punctuation, the only clue to usage insuch cases is local context, e.g.
the presence of the wordsthe or phone before no are used as disambiguating con-text to identify no as number.3.1.3.
Phrasing rules consider part-of-speech, wordsubclass and length (as measured by word count) to27TDD ~ ModemUserTDDParser :>Figure 2: Block Diagram of TDD/TTS SystemT/'S VoiceUseridentify phrase boundary locations.
These rules arestrictly ordered.
In general, they instruct he synthesizerto set off interjections (e.g.
wow, oh ok, etc.
), and toinsert a phrase boundary before non-lexical coordinateconjunctions (e.g.
and in I don't recall that and am notsure, see Bachenko and Fitzpatrick (1990:163)), beforesentences, and before subordinate conjunctions (after,during, etc.).
Boundaries are also inserted at noun-verbjunctures unless the noun is short, and at prepositionalphrase boundaries unless the prepositional phrase isshort.
A short noun is a single word noun phrase suchas a pronoun or demonstrative (this, that); a short prepo-sitional phrase is one with a pronominal object (with me,about it, etc.).
Hence the noun-verb rule will producethe phrasings below, where double bars mark phraseboundaries (this and the prepositional phrase rule areadaptations of the verb and length rules, respectively,given in Bachenko and Fitzpatrick (1990)).MY CAR \[\[ IS HAVING A TRANSMISSIONPROBLEMIT IS HAVING I\[ A TRANSMISSION PROBLEMOur formulation of the phrasing rules assumes that, inthe absence of syntactic structure, the subclass member-ship, part-of-speech and string position can providesufficient information to infer structure in many cases.For example, we are assuming that the subclass'nominative_pronoun', which includes he, she, we, etc.,acts consistently as the leading edge of a sentence, sothat the parser can compensate somewhat for the lack ofpunctuation by identifying and setting off some top-levelsentential constituents.
Similarly, prepositions areassumed to act consistently as the leading edge of aprepositional phrase; the parser guesses about preposi-tional phrase length by checking the word class of theelement following the preposition to see if the object ispronominal.The phrase rules thus attempt o seek out major syn-tactic constituents.
If there is evidence of constituency,the parser may look for a short constituent or it will sim-ply insert a prosodic boundary at a presumed syntacticboundary (e.g.
a verb phrase, sentence or subordinateconjunction).3.2.
PARSER IMPLEMENTATION3.2.1.
SYSTEM ARCHITECTUREThe quickest way to incorporate a TDD parser into a service using text-to-speech (TrS) synthesis is to implementhe parser in a separate front-end module to the text-tospeech system.
The parser filters the input stream fromTDD modem and sends the processed text to the text-tospeech system where it is synthesized for the voice telephone user, as shown in the block diagram in figure 2This architecture minimizes the need to modify an~existing equipment or system.
Also, it allows us umaintain and change the parser module without introducing substantial, or unpredictable, changes elsewhere iithe system.3.2.2.
IMPLEMENTATIONIntegrating the TDD parser into a near real time systenarchitecture is a difficult task.
To achieve it, the parsemust (a) filter the TDD input stream in real-time in ordeto identify tokens, i.e.
words, abbreviations, and expressions, that are suitable for processing by parser ules, an~(b) group these tokens into natural sounding phrases thacan be sent to the text-to-speech system as soon as the,.are formed.In an ideal situation, it is desirable to parse the entirTDD input before sending the processed text to the textto-speech synthesizer.
But the practical situatio~demands that the voice user hear TDD text synthesizeqas soon as it is reasonably possible so that long periodof silence can be prevented.
Figure 3 below shows th,basic architecture chosen to implement the parsedescribed in this paper.3.2.2.1.
The canonical input filter process has to de.~with the TDD input characters as they are being typedThe output of the canonical filters consists of TDD wor,tokens i.e.
groups of characters eparated by whitspaces.
Input characters arrive at irregular speeds witnondeterministic periods of pauses due to uneven typinby the TDD user.
Also incidences of spelling erro~typographical mistakes, and attempts to amend previousltyped text occur at very irregular ates.
Even the TDImodem can contribute text to the input stream that i28seen by the canonical input filter.
For instance, the TDDmodem might periodically insert a carriage-return charac-ter to prevent ext wraparounds on tim special operator'sterminal.
Unfommately, these carriage-return characterscould split words typed by tim TDD user into incoherentparts, e.g., advantage might become adva<CR>ntage.Since the voice telephone user needs to hear TDDtext synthesized after some, hopefully short, interval oftime, the input filter cannot wait indefinitely for TDDcharacters that are delayed in arriving, as might occurwhen the TDD user pauses to consider what to type next.Hence, the filter includes an input character timeoutmechanism.
The timeout interval is set to an appropri-ately short duration to ensure the timely synthesis ofavailable TDD text, but still long enough to prevent heexclusion of forthcoming input characters.3.22.2.
Lexigraphical analysis examines the TDDword tokens to identify contiguous words that should begrouped together as individual units.
The multi-wordexpressions include contractions (e.g.
"it .
.
.
.
s" whichbecomes "it's'3 and commonly used short phrases thatcan be viewed as sIngle lexical units (e.g.
"ray goodness","as long as", and "mother in law").
A simple stackingmechanism is used to save tokens that are identified aspotential elements of multi-word expressions.
Thetokens are stacked until the longest potential multi-wordexpression has been identified, with three words beingthe maximum.
After which the stack is popped and thecorresponding structures (described below) are con-structed.3.223.
The lexical lookup process builds a tdd-term structure (record) from these tokenized words andmulti-word expressions in preparation for invoking thephrasal segmentation rules.
Fields in the structureinclude the tokenized input text (the original orthographicrepresentation), the output orthography, lexical category(Noun, Verb, Adverb, NIL, etc.
), word subclass, andother fields used internally by the phrasal segmentationprocess.
At this point in the processing only the inputtext field has any non-nnll information.
The outputorthography, lexical category, and word subclass fieldsare filled via lexical lookup.The lexicon is organized into the four fields men-tioned above.
The tdd-term input text field is comparedwith the corresponding fieM in the lexicon until a matchis found and the three remaining fields in the matchedentry am then copied into the tdd-term structure.
If nomatch is found, then the input text field is copied into theoutput ext field and the other two lexicon fields are setto NIL.As an illustration, ff the single letter u is identified asour TDD token, the lexical lookup process might returnwith a tdd-term stmcnne that looks like:input text: "u"output ext: "you"lexical category: NOUNsubclasses: (DESTRESS_PRONOUNSHORT_SUBJECT)other fields: NIL.For tim input text oic, the structure might look like:input text: "oic"output ext: "oh, I see"lexical category: INTJsubclasses: INTERJECTION 1other fields: NIL.32.2.4.
The phrasal segmentation process applies amodest set of disambiguation and phrasing roles to asliding window containing three contiguous tdd-termstructures.
In the start condition the sliding window wiLlnot have any tdd-term structures within it.
Each newtdd-term structure generated by lexical lookup enters thefirst term position in tim window, bumping existing termsforward one position with the last (third term) discardedafter its output orthography is copied into a text bufferawaiting transmission to the text-to-speech synthesizer.The various rules described in Section 3.1 above are thenapplied to the available tdd-term structures.
After a pro-nounceable phrase is identified, the output orthography ofall active tdd-terms i  then copied to the TTS text bufferwhich is subsequently sent to the synthesizer for play-back to the voice telephone user.
Also, the invocation ofa timeout alarm due to tardy TDD input text causesflushing of the sliding window and text buffer into timsynthesizer.
The sliding window and Trs  text buffer axecleared and the roles restarted anew.TDD Text InputCanonical Input FilterLexigraphical AnalysisLexica!
LookupPhrasal SegmentationFigure 3: TDD Parser Architecture29Listed below are a few examples of TDD text pro-cessed by the parser.TDD: I DONT THINK SO I WILL THINKABOUT IT GAT/S:I don't think soI will think about it.Go ahead.TDD: HELLO HOW ARE U Q GATTS:hellohow are you?Go ahead.TDD: OK YES I AM WILLING TO GIVEINFO GATTS:okayyesI am willingto give information.Go ahead.TDD: MY GOODNESS UR MOTHER INLAW IS HERE GAITS:my goodnessyour mother in lawis here.Go ahead.4.
EVALUATION OF PERFORMANCEEvaluation of the parser has involved two quite differentforms of testing: a field trial and laboratory evaluation.First, the parser was implemented as a component in aversion of the Bell Labs text-to-speech synthesizer (Oliveand Liberman 1985).
The synthesizer forms the core ofa telecommunications sy tem that ran for three months asa feature of TRS in California.
Several thousand TDDtexts were processed by the system.
Although restric-tions on confidentiality prevented us from collectingactual TDD text data, results of the field trial far sur-passed expectations: disconnect rates for text-to-speechcalls averaged less than 20% and follow-up surveys indi-cated a high degree of interest in and acceptance of thetechnology.A second type of testing that has enabled us to focuson the parser involves the collection of data from a ques-tionnaire given to TDD users.
Phrasing for these datawas assigned manually by a linguist unfamiliar with therules of the parser to allow for comparison with theparser's output.Several issues arise in the comparison of humanjudgements of phrasing with those of a phrase parser'soutput.
One of the more ubiquitous is that of phrasalbalancing.
Apparently acting under rhythmic coastraint.~speakers tend to aim for equivalent numbers of stresse~syllables on either side of a break.
However, the incotpotation of rhythm into phrasing varies from speaker t,speaker, as well as being partially dependent on semantiintent.
For example, the sentence so I feel there shoul,be a better system to say bye, taken from our data, coul,be phrased either as (a), (b), or (c):(a) so I feel there should be \[I a better system tosay bye(b) so I feel I\] there should be II a better system tosay bye(c) so I feel II there should be a better system I I tosay byeIf the parser assigns, for example, the phrasing in (~while the human judge assigns (b) it must be counted aqualitatively different from the parser's assignment ofmisleading boundary, where the bearer's understandinof the import of the utterance is altered because of therroneous boundary placement.
An example of misleading boundary placement as assigned by the parser igiven below, where the bearer is incorrectly led to intelpret well as a modification of see, rather than asdiscourse comment.oh i see well I \[ so i call my bossIn a similar vein, giving equal weight in an evalu~tion to the locations where pauses do and do not occur imisleading.
The absence of a phrasal boundary betweetwo words is much more common than the presence ofboundary, so that predicting the absence of a boundary ialways safer and leads to inflated evaluation scores th~make comparison of systems difficult.
For example, ithe (a) sentence above there are 12 potential prosodievents, one after each word.
If a given system assigrno breaks in this sentence, and if non-events are giveequal weight with events, then the system will getscore for this sentence of 91.6 percent since it gets l 1 cthe 12 judgments right.
Also, if a system assigns o~break in this utterance, but puts it in a clearly inapproprate place, say before the word bye, it will get a score c83 percent since it gets 10 of the 12 judgements righWhile 83 percent sounds like a decent score for a systexthat must capture some subjective performance, titmethod of evaluation has completely failed to capture ttfact that assigning an inappropriate prosodic break in thinstance has completely misled the listener.
Thereforwe need to evaluate a phrasing system on the basis cpositive occurrences of phrase boundaries only.Assigning phrases to TDD output is not a clear-c1task.
The output is not intended to be spoken anqbecause of the device, it has telegraphic haracteristicIn addition, many TDD users do not have standard sp,ken English at their command.
Nevertheless, an effort30CATEGORY ERROR EXAMPLEAdverbial modification 75 why not * surely 11 i think need interviewAmbiguous pronoun 59 who i long \] I to talk to * it will be greatAmbiguous Interjection(sorry, no) 53 no * other than that I \[Verbal Complement 44 let me * I I hear IIRelative Clause 43 give your calling number * and number * \[ I you wantNon-Standard Syntax 39 there a pauseConjunction 36 that's all * and just once \[ I did we getCopular verb i'm * I I a nice personSubordinate clause3120 as i said before * l feel that way 11 becauseIdioms 19 i think the survey interview I I is all * I I right with meNominal modification 18 i f  i use I I pay * II phoneAppositive NP 13 i think *\[ l they *11 the crs 11Figure 4: Distribution of TDD Production Errorswas made to approximate the performance of TRS opera-tors who speak the TDD output o voice users.
Care wasalso taken to mark as parser errors those prosodic eventsthat would mislead the listener.
This is a task that, initself, is problematic because of the human error involvedin the judgments.
We regard the field trial as theappropriate method of evaluation here, and we use theresults of the laboratory test to help us characterize theparser's failures rather than to evaluate the parser.After the phrasing was assigned manually, the TDDdata were run through the parser, and the parser's phras-ing was compared with the human judgments.
Approxi-mately 20% of the corpus had been used to extrapolaterules for the parser, while the remainder of the corpuswas saved for testing only; there was no appreciable per-formance difference between the two data subsets.
Thecorpus contained 8788 words and, according to thehuman judgement, 2922 phrases.
Since punctuation inthese data is sparse, very few of the actual phrase boun-daries come "for free."
Even so, the parser performedwell: in the 2922 phrases it produced 573 misleadingerrors, rendering 80.4% of the phrases acceptably.
(There were 896 sites where the parser produced a phras-ing different from that of the human judge, but which wejudged to be not misleading.
)The parser's error rate reflects the constraints of itsconstruction as a real-time system, in particular, its threeterm buffer size, its lack of hierarchical structure buildingrules and its pared down lexicon.
Figure 4 gives a char-acterization of the most frequently encountered parsingerrors, along with their frequency of occurrence, and anexample for each characterization.
In the examples, ' \ [ l 'represents a prosodic pause and "*' indicates that theparser performed incorrectly at this site.Most of the parsing errors given in Figure 4 wouldbe resolvable if the parser were to incorporate non-localstructural information.
For example, the pronouns it andyou function as both subject and object.
In a three ele-ment buffer, then, the status of it in to it wil l  is undecid-able, since it can be the object of to or the subject ofwill.
In the context of the sentence i have fr iends who ilong to talk to it wil l  be great, where an elementcorresponding to who functions as the object of to, thefunction of it as subject of will  be great, and the con-comitant prosodic break before it, are apparent, but onlywhen the structure of the who relative clause is available.The errors involving non-standard syntax wouldrequire sublanguage roles that indicate the possibility ofnon-overt subjects (oh i see understand) and copulas(there a pause)  among other things, but again, given thelimitation to local information and the lack of punctua-tion, this is not straightforward.
For example, oh i seeunderstand could continue as that i don't  speak well.A smaller set of errors is undecidable ven givennon-local structural information, and require further prag-matic knowledge of the discourse.
For example, thedecision as to which clause the adverb occasionallymodifies in other than that the services is great occa-sionally some operators are pretty slow depends onknowing that one does not give expansive praise tosomething that happens only occasionally.In general, it appears that the parser's accuracy inphrasing the incoming messages cannot he improvedwithout a severe loss in real time efficiency that thestorage of hierarchical structure would involve.
Giventhis situation, it is worthwhile to consider that.
despitewhat is probably about a 20% error rate in the system,31consumers used it successfully and willingly.
It may bethat the system did no worse than the trs operators who,unlike our laboratory linguist, do not have the luxury ofstopping to consider the felicity of a particular phrasing.This may be compounded with the possibility that usersmay be able to compensate more easily for machinedegradation of an utterance than for an operator's error,since their expectations of the latter's performance aregreater.5.
CONCLUSIONWe have described a text-to-speech parser for conver-sational texts generated by users of TDD's.
The parser'smain ta-ck.~ are to provide some regularization of non-standard items and to determine prosodic phrasing of thetext.
Phrasing allows processing to take place in nearreal time because the synthesizer can generate speechwhile the TDD message is being typed instead of waitingfor the finished text.
FinaUy, although incorporating arelatively small vocabulary and rule set, the parser hasproven unexpectedly successful in both laboratory andfield tests,REFERENCESBachenko, J.
A Taxonomy of Syntactic Variation inWritten Language of the Deaf.
Unpublished ata, 1990.Bacheako, J. and E. Fitzpatrick.
A Computational Gram-mar of Discourse-Neutral Prosodic Phrasing in EnglishComputational Linguistics, 16:155-17, 1990.Charrow, V. Deaf English.
Technical Report 236, Insti-tute for Mathematical Studies in the Social Sciences,Stanford University, 1974.Emorine, O. M. and P. M. Martin.
The Multivoc Text-to-Speech System.
Proceedings of the Second Confer-ence on Applied Natural Language Processing (ACL):115-120, 1988.Hindle, D. User Manual for Fidditch, a DeterministicParser.
NRL Technical Memorandum#7590-142.
1983.Kukich, K. Spelling Correction for the Telecommunica-tions Network for the Deaf.
Communications of theACM, 1992.Marcus, M. A Theory of Syntactic Recognition forNatural Language.
Cambridge, MA: MIT Press, 1980.Olive, J. P. and Liberman, M. Y. Text-to-Speech--AnOverview.
Journal of the Acoustic Society of America,Supplement 1:78, $6, 1985.O'Shaughnessy, D. D. Parsing with a Small Dictionaryfor Applications uch as Text-to-Speech ComputationalLinguistics, 15:97-108, 1988.Suri, L. Language Transfer: A Foundation for Correctingthe Written English of ASL Signers.
University ofDelaware Technical Report #91-19, 1991.Tsao, Y.-C. A Lexical Study of Sentences Typed byHearing-Impaired TDD Users.
Proceedings of 13thInternational Symposium, Human Factors in Telecom-munications, Torino, Italy, 19%201, 1990.32
