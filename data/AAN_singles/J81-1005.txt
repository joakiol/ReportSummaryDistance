Technical Correspondence On the Utility of Computing Inferences in Data Base Query Systemsthese implementations were significantly more effi-cient, but checked a somewhat narrower class of pre-sumptions than CO-OP.6.
Damerau mentions that queries with non-emptyresponses can also make presumptions.
This is cer-tainly true, even in more subtle ways than noted.
(Forexample, "What is the youngest assistant professorssalary?"
presumes that there is more than one assistantprofessor.)
Issues such as these are indeed currentlyunder investigation.Overall, we are pleased to see that Damerau hasraised some very important issues and we hope thatthis exchange will be helpful to the natural languageprocessing community.Aravind K. JoshiDept.
of Computer andInformation ScienceUniversity of PennsylvaniaPhiladelphia, Pennsylvania 19104S.
Jerrold KaplanComputer Science DepartmentStanford UniversityStanford, California 94305Reply to Joshi and KaplanIn general, there is little to disagree with in Joshiand Kaplan's comments,  but perhaps a couple ofpoints could be clarified.As Joshi and Kaplan suspected (point 3), the usersof this system did indeed thoroughly understand thedata base.
This makes quite a difference in thinkingabout the relative importance of facilities in a naturallanguage query system.
In particular, such users tendto check strange answers, so that a reply of "no",  asin their point 4, would probably result in an additionalquestion of "How many parcels ... "With regard to their remarks on implementationsthat incur no additional cost (points 2 and 5), I wouldbe interested in seeing how presupposition analysis canbe done without extra data base retrievals.
It wouldseem that the system would either have to make spe-cial retrievals at marked times, as in CO-OP,  or wouldhave to make the relevant retrievals for every questionso as to have the results available when needed.
How-ever, even if the execution time increase were to bezero, we still have a great many other things which wewould like to add to our system before we add infer-ence checking.Fred J. DamerauBook ReviewsLog ic  For  P rob lem So lv ingRobert Kowalsk iElsevier North Holland, New York, 1979,287 pp., Paperback, $9.95, ISBN 0-444-00365-7.This is a textbook introduction to logic program-ming.
Logic programming is based on the premise thatprogramming a task on a computer should begin with aprecise formulation of what is wanted.
This formula-tion defines the task clearly; it serves as a theory ofthe task which can be studied for its implications andlimitations.
Usually this formulation is computational-ly inefficient if implemented straightforwardly, but itcan be reformulated so that it becomes an efficientprogram when interpreted by a theorem prover.
Inthis form the logic program is closer to the theory thana PASCAL or LISP program would be, making it easi-er to verify its correctness and also easier to under-stand directly.Logic programming has been applied mostly toformal software specifications, data base systems andproblem solving, but it is being applied increasingly tonatural language understanding systems \[1,2,4,5,6\].
Inthese systems axioms specify the relationship betweenthe input text and whatever epresentation it is to beparsed into, and between this and whatever the outputis to be (e.g., an updated database or the answer to aquestion).
Since these axioms specify the relationbetween the text and its representation, they form agrammar for the text language, and, as such, are com-parable to the rules in a linguist's grammar.
Wheninterpreted by a suitable theorem prover, such as aversion of PROLOG,  they can transform a text into itsrepresentation (and often a representation i to a text)with practical efficiency.With logic programming the computational linguistmay be able to develop theories of language that areboth conceptually well-organized and practical to com-pute, but this book includes only the most elementaryintroduction to natural language processing.
It usesparsing as an example to show that problems can besolved in ways that correspond to top-down parsing,bottom-up parsing, or an arbitrary mixture of the two,all depending on how the theorem prover decides toAmerican Journal of Computational Linguistics, Volume 7, Number 1, January-March 1981 45Book Reviews Logic for Problem Solvingapply the axioms.
But Kowalski's examples do notshow how to build up a representation structure for asentence; to learn how to do that it is necessary toconsult the natural language papers cited above.This book is organized into three parts.
The firstpart introduces logic syntax and semantics.
The nota-tion is the clausal form of logic, in which all axiomslook like implications.
This form allows the elimina-tion of 'not '  as an explicit logical operator,  whichmakes the form psychologically easier to understand; itis in fact a disguised form of the clauses used in reso-lution theorem proving.
This introduction to logicincludes a discussion about clauses and semantic net-works.
Clauses can be embedded in networks if thearcs corresponding to the atomic formulas are groupedtogether in a set, and the arcs are further groupedaccording to their roles.
By restricting all atomic for-mulas to be binary relations, clauses become a linearrepresentat ion of a simple network structure.
Thisembedding of clauses is thus a practical way to buildlogical inference into semantic network-based knowl-edge systems.
(cf.
\[3\].
)The second part of the book explores various infer-ence procedures and heuristics for logic programmingand applications of logic programming to problemsolving.
Most of the procedures are seen to be appli-cations to the clausal formalism of well-known heuris-tics and search procedures, such as pre-processing theproblem-independent parts of the computation, usingevaluation functions, indicating when an axiom is to beapplied in a forward manner and when in a backwardmanner, choosing the path that branches the least, etc.This part of the book is thus an introduction to theheuristic search methods often covered in introductorycourses on artificial intelligence.
Most of this sectionlimits the clauses to those having only one conclusion;these are called Horn clauses and have direct interpre-tations as programs and as rules for problem reduc-tion.
Several chapters discuss the problems and tech-niques for processing axioms in full clausal form, how-ever, which shows that this book presents logic pro-gramming as a concept that is independent of anyparticular PROLOG implementation.The last part of the book introduces more advancedtopics.
These include extensions of logic programmingto the standard form of logic, addition and deletion ofredundant goals, traps to prevent useless looping, al-lowing the provabil ity of some formulas to depend onthe unprovabil ity of others, and the combining of ob-ject language with meta-language.
The final chapteraxiomatizes the four ways that an information systemor belief system might change when a new fact is add-ed to it.
Only the top level axioms are given, howev-er; many of the relations named in the axioms need tobe further defined before there is a full theory of ra-tional belief maintenance.This book is intended to be a textbook that intro-duces the undergraduate to logic, problem solving andcomputer programming.
Except for one chapter thatcompares Horn clauses to conventional programminglanguages, it assumes the student has no backgroundin any of these areas.
It covers many topics, but cov-ers most of them briefly, so that one has to look upsome of the many references if one wants more thanan elementary treatment.Daniel Chester, University of DelawareReferences\[1\] Colmerauer, A. Metamorphosis Grammars.
in L. Bolc, ed.,Natural Language Communication with Computers, Springer-Verlag, Berlin, 1978, 133-189.\[2\] Dahl, Veronica.
Quantification in a Three-valued Logic forNatural Language Question-answering Systems.
Proceedings ofthe Sixth International Joint Conference on Artificial Intelligence,Tokyo, August 1979, 182-187.\[3\] Deliyanni, Amaryllis, and Kowalski, Robert A.
Logic andSemantic Networks.
Comm.
ACM 22, 3, (March 1979), 184-192.\[4\] LeVine, Sharon H. Questioning English Text with ClausalLogic.
M.A.
Thesis, University of Texas at Austin, December1980.\[5\] Pereira, F.C.N., and Warren, D.H.D.
Definite Clause Gram-mars for Language Analysis - A Survey of the Formalism and aComparison with Augmented Transition Networks.
ArtificialIntelligence 13, 3, (May 1980), 231-278.\[6\] Silva, Georgette, and Dwiggins, Don.
Toward a PROLOG TextGrammar.
ACM Sigart Newsletter 73, (October 1980), 20-25.46 American Journal of Computat ional  Linguistics, Volume 7, Number 1, January-March 1981
