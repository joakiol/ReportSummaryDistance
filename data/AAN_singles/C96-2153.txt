Semant ic  Const ruct ion  f rom Parse  Fores tsMichael Schiehlen*Institute for Computational Linguistics, University of Stuttgart,Azenbergstr.
12, 70174 Stuttgartmike?adler, ims.
uni :stuttgart ,  deAbstractThe paper describes a system which usespacked parser output directly to buildsemantic representations.
More specifi-cally, the system takes as input PackedShared Forests in the sense of Tomita(l_bmita, 1985) and produces packedUnderspeeified Discourse RepresentationStructures.
The algorithm visits everynode in the Parse Forest only a boundednumber of times, so that a significant in-crease in efficiency is registered for am-biguous sentences.1 IntroductionOne of the most inl;eresting problems comes aboutby the tendency of natural language discourse tobe ambiguous and open to a wide variety of in-terpretations.
Generating representations for allthe interpretations is nol, feasible in view of thestrict computa|,ional bounds imposed on NLP sys-tems.
Instead, two other routes have been tmr-sued: (1) the integration of further disambiguat-ing knowledge and heuristics into the system or(2) the general;ion of a single semantic represent, a-lion that summarizes all the interI>retations i  thehope that the application task will force a distin<:-lion between the int;erpretations only in few cases.Such a summary repre.sentation is called under-specified if a procedure is given with it to <terivea set of real semantic representations fl'om it.
Bynow~ several techniques are kIlown to underspec-ify quantifier scope ambiguities (Alshawi, 1992),(Reyle, 1993).
In this paper Discourse Repre-sentation Structures (Kamp mM Reyle, 1993) areemployed as underlying semantic ret)resentations.For underspecification with respect o s<:ope atnbi-gullies the present approach makes use of Under-*This work was funded by the Germ;m FederalMinistry of Edu(:ation, Science, Research and Te(:h-nology (BMBF) in the flamework of the VerbmobilProject under Grant 01.
IV 1.01 U.
Many thanks aredue to M. Dorna, J. DSrre, M. Einele, E. KSnig-Bamner, C. Rohrer, C.J.
Rupp, attd C. Vogel.speeilied Discourse Representation Theory (Reyle,1993).
Another strand of research as looked al;compact representations for parse outputs (Ear-Icy, 1970), (Tomita, 1985) and etticienI, parsingalgorithms 1,o deliver such ret>resentalions.
Un-fortunately, advances made in this area (lid not;have impact on semantic onstruction.
It; was stillnecessary to first unpack the compacl; parsing ret)-resentation and derive the individual parse treesfrom it before going about generating semant;icrepresentations.
So in this area another applica-lion for semantic underspecitieation is lurking.Several approaches to underspecifica|,ion axeconceival)le.
(1) OperationM Underspecilical,ion:Construction operations that; involve art)itrarychoices are delayed and carried out only on de-mand (Alshawi, 1992), (Pinkal, 1995).
(2) I{ep-resentational Underspeeification: The ambiguil;iesare represented (explicitly or implicitly) in a for-realism.
A resolution procedure derives the hill-fledged semantic representations.
This t)aper optsfor the second approach (for motivation see chap-ter 7).
hel,ween the t)arser and the semantic (:on-sl;rllc|;ion colnponen|,~ (;oo.?
Parse forests/charts (Alshawi, 1992).?
Underspecified "trees" with abstract donfi-nanee information (Pinlml, 1.995).?
Fully specified parse trees (Egg and Lebet;h,1995).
The syntactic ambiguities are ol)-rained by re-ambiguat;ion i the semanl;iceoHlponent.Our choice are parse forests since there are well-known methods of construction for t, hem and itis guarant;eed that every syntactic ambiguit;y canbe represented in this way.
ISu'thermore a widerange of existing parsing systems, e.g.
(Block andSchachtl, 1992), produce packed representationsof this kind.2 Outline of the SystemLet us begin wil;h a rough sketch of the arctfitec-lure of the systmn.
The semantic cons|;rllcl;ionmodule works on parse forests and presut)t)oses907a semantic grammar of a certain kind (see chap-ter 6).
The semantic grammar must be correlatedwith the syntactic grammar so that there is a one-to-one mapping between lexical entries and rules.input stringI Parserusing: Syntactic Grammar4,parse forestI emantic Construction Moduleusing: Semantic Grammar$packed UDRSInside the semantic onstruction module threeprocesses are distinguished.
They are described inturn (see chapter 4 and 6).parse forest4\[' Tree namingdisambiguated parse forestI Semantic oiastruction properusing: Semantic Grammar$packed UDRS$F Determining unambiguous arguments \]packed UDRS3 Packed  Shared  ForestsIn this section a formal description of packedshared forests in the sense of Tomita (Tomita,1985) is given.Let a context - f ree  grammar  G be a quadru-ple < N, T, R, S > where N and T are finite dis-joint sets of nontermina l  symbols and termina lsymbols, respectively, R is a set of ru les of theform A -+ a (A is a nonterminal and a a possiblyempty string of nonterminal or terminal symbols),S is a speciM nontermin~l, called s tar t  symbol .An ordered  d i rec ted  graph  marked accordingto grammar ~ is a triple < V ,E ,m > so thatV is a finite set of vert ices  or nodes,  E a fi-nite set of edges e of the form (vl, (v2,... ,vn))(vi C V,n > 2, e starts at vl, vl is the prede-cessor of v2, .
.
.
,  vn), m is the mark ing  funct ionwhich associates with each vertex a terrainai ornonterminai symbol or the special symbol e. mis restricted so that the vertices on each edge aremarked with the,symbols of a rule in 6, the emptystring being represented by the additional sym-bol ~.
A parse  t ree  is an ordered irected acyclicgraph (DAG) satisfying the following constraints.1.
There is exactly one vertex without predeces-sors, called the top vertex or root .
The rootis marked with the start symbol.2.
For every vertex there is at most one edgestarting at the vette?.
Vertices that do notbegin edges are called leaves, such that doare called inner  nodes.3.
Every vertex except he root has exactly onepredecessor.A DAG satisfying the constraints (1-2) is calledShared  Forest ,  a DAG only satisfying (1) is aPacked Shared  Forest  or parse forest (see fig-ure 1).
A packed shared forest for an input stringa obeys the further constraint that, there must beat most one vertex for each grammar symbol andsubstring of a.
Thus, if a consists of n words,there will be at most k * n 2 vertices in the parseforest for it (k being constant).
Parse forests canbe efficiently constructed using conventional pars-ing algorithms (Tomita, 1985), (Earley, 1970).4 Determin ing  Tree  Read ings  f roma Fores tA tree reading of forest F is a tree in F that; con-tains the root and all leaves.
Tree readings aretreated as objects.
An edge is used in a tree read-ing if it is one of the tree's edges.
Let us now definea disambiguated parse forest (DPF for short).
ADPF 79 is a quadruple < V,D,E',m > such that?
V and D are finite disjoint sets.
V is the setof vertices and D is the set of tree readings.?
E' is a finite set of edges of the form(vl, {v2,...,  vn), {d l , .
.
.
,  d,~}).
The third el-ement is a set of tree readings (C D) andencodes the tree readings in which the edgeis used.?
m is a marking function from vertices togrammar symbols.To derive a DPF from a parse forest every edgemust be assigned a set of tree readings.
There isno simple way to determine from a parse forest henumber of its tree readings.
So instead of postu-lating a fixed set of readings the present approachuses pointers (implemented as Prolog variables) torefer to sets of tree readings.
Two operations dis-joint union and multiplication are defined for thesesct pointers.
Both operations are monotonic in thesense that the pointers are not altered, their valueis only specified.
Let si be a set of tree readings.?
81 0 82The operator tJ differs from the set-theoreticnotion of disjoint union in that it is neithercommutative nor associative.
This is so be-cause on the implementational level commu-tativity and associativity would necessitatean abstract data type, thus a costly overhead.?
81 X 82In general, sl and s2 correspond to formulaeinvo!ving atomic sets and 0 operators\[ Sl =S l l  U .
.
.
U 81m and s2 = s21 U ...  U 82n.908Z ,,'np v d n p d n p d nI saw a man in the apt  w i th  a telFigure 1: a parse forest with a tree reading all: edges used in dl are shown as broken linesThe operation x introduces m* n new atomicsets s~j and splits the former atomic sets suchthat  V i :  1 < i  < m : Sli = s~l 0 .
.
.
0 s~,,and V j  : 1 <<_ j < n : s2 j  = s~j  0 " ' .
.
.
U Smj .The sets Sl and s2 are now equal modulo as-sociativity and commutativity.
Consider thefollowing example:(81 0 82 0 83) X (8a 0 8b) --}(.~, 0 s~ 0 ~)=(4o 0 d~) 0 (A,, 0 ,~,,)' 0 (s~o' 0 .~,,)'(,.
0 *b)=(.% 0 4.
0 4.)
0 (4b 0,5~ 0 ,'~)We begin by associating a particular set pointer slwith the root vertex.
Sl refers to the, total set oftree readings of the forest; since the root vertex fig-ures in all trees derivable from the forest.
We thentraverse the graph in top-down fashion applyingto each new vertex v the following procedure:Let ei be the set of tree readings at edgei ending in v, and b# the set of tree read-ings at edge j starting in v. Then thefollowing actions must be performed.?
Apply the procedure to all succes-sors of v. This step yields for eachedge j starting in v and for each ver-tex u at the end of j a set of treereadings b~,,.?
bj = b;1 X .
.
.
X b},, for each edge jstart ing in v?
(bl 0 .
.
.
0 bn) x (el 0 .
.
.
0 era)If a vertex v h~s already been encountered the onlyaction required is to connect he edge informationon v's predecessor w with the edge informationalready present on vertex v. In particular, thesuccessors of v need not be checked again.Let k be the edge ()vet' which the vertex vwas reached from another vertex w in thetop-down traversal.
Let C'k,t, be the setof tree readings determined for edge k atvertex w and ek,, the set of tree readingsdetermined for the edge at vertex v.?
('~kv X Ckw5 Packed Underspecif ied DiscourseRepresentat ion StructuresIn this section an extension to UDRSs (Reyle,1993) to express referentially underspecified se-mantic representations is presented.First a detinition of UDRSs is given.
A UDRS/ Jis a quadruple < L ,R ,C ,  <_> where L and R aredisjoint finite sets of labels and discourse refer-ents, respectively.
The order relation < forms asemilattice ow, r L with one-element lq.
C is a setof conditions of the following form?
1 : x, where l C 12,x E :R..* 1 : p (x l , .
.
.
, x , , ) ,  where I E 12,x i , .
.
.
, : r ,~ C Tt,and p is an n-place predicate?
I : 11 => 12, where l, ll,12 C 12?
l : -~ll, where 1,11 ~ ?
* 1 : ll V 12, where l , l l , l .~ C ?
* ll ~ 12, where ll,l.~ E 12In UDRSs 12 = L and "~ = R.To get packed UDRSs the UDRS language is ex-tended by adding reified contexts (semantic read-ings) to it.
The idea of using context variat)lesto represent ambiguous tructures originally stemsfl'om the literature on constraint-based formalisms(DSrre and Eisele, 1990).
A packed UDRS is aquintuple < L ,R ,D ,C ' ,5> where L, R, < arethe same as in UDRSs, D is a finite set of con-texts which is disjoint from L and R. C '  is definedas in UDRSs except that  (1) any condition may909also be prefixed by a context set, and (2) labelarguments may~ not, only be labels but also func-tions from contexts to labels (?
= L U (D --~ L)),and the same holds for discourse referents (7?
=RtA (D ~ R)).
If a function {A ~ Xl ,B  ~ x2}replaces a discourse referent in a packed UDRS,this intuitively means that the argument slot isfilled by xt in reading A and by x2 in reading B.As an example for a packed UDRS consider thefollowing representation for I saw every man witha telescope.Ii : ianchor ( i, .speaker)t2 : sce(el , i ,  xl)12 _< 1T13 _< lT12 _< 1413 : every(x1,15, 14)15 :man(x1){A -+/2 ,B  -+ 15} : w i th ({A -~ t t l ,g  --~ ~1},X2){ A -~ 12 , B "~ /5 } _< 1~16 _< 1T16 : x216 :telescope(x2)In the implementation contexts are represented byProlog variables.
In this way disambiguation isensured to be monotonic1: A context d can becancelled by grounding the Prolog variable repre-senting d to a specific atom "no".
The formalismalso allows any kind of partially disambiguatedstructures ince thc variables for the readings donot interact.In the above version of UDRS packing, disjunctsare re\[fled.
Another way to represent referentialambiguities is to retry argument slots using addi-tional variable names (L and X below, not to bemistaken as discourse referents).
Disjunctions arethen represented directly.1T: ianchor(i ,  speaker)12 : see(el ,  i, x l )l.~ < IT13 <~ ll12 ~ 14/3 : every (x l ,15 , /4 )/5 :man(x1)L : w i th (X ,  x.2)L <16la < 1716 : x2/6 : telescope(x2)(L -~/2 A X ~- el) V (L = 15 A X = Xl)1Another way to see that the resolution procedure~s monotonic is to assume a semi-lattice over contextsets with respect o the subset relation.
Cancelling acontext from a set makes it more specific in the semi-lattice.6 Bu i ld ing  Semant icRepresentat ionsUDRS construction (Frank and Reyle, 1992),(Bos, 1995) is different from conventional seman-tic construction in that embedding is not rep-resented directly but by means of labels.
Tileonly semantic composition operation is concate-nation.
In addition labels and discourse referentsare matched as specified in the semantic part; ofthe grammar ules (the "semantic grammm'").
Inthe semantic grmnnmr every nonterminal is as-signed a list of arguments.
For every operator(e.g.
an NP) a lower label and a series of upperlabels must be given.
The lower label points tomaterial which must be in the scope of the op-erator (e.g.
tile verb).
The upper labels refer tothc minimal scope domain tile operator must oc-cur in.
This domain differs for indefinite NPs andquantifier NPs since these types of NPs are sub-ject to different island constraints (only indefinitescan be raised over clause boundaries).
Further-more, the semantic grammar specifies the UDRSconditions introduced by lexical items and rulesand determines the arguments to be matched inrules and lexical items.
It also gives the direc-tion of this matching by fixing in which lexicalitem an argument originates (see last slot of lcxi-cal entries).
If an argument originates in an item(becmlsc it is e.g.
its instance discourse referentor label) then the value of this argument is un-ambigous for the item 2.
In adjunct\[on structures,the modified constituent assigns and the modifierreceives the shared discourse referent.
Considerthe following example grammar 3.start symbol (s/\[_Event, _VerbL ,Top ,Top\] ,\[Top\] ).
Z originating arguments / \[Event, VerbL, DotaL, TopL\] --->np/\[X,VerbL,DomL ,TopL\] ,vp/\[Event, X, VerbL, DomL, TopL\] .vp/\[Event,X,VerbL,DomL,TopL\] --->vt/\[Event,X,Y,VerbL,Domi\],np/\[Y,VerbL,DomL,TopL\].np/\[X,VerbL,DomL,TopL\] --->det/\[X,NounL,VerbL,DomL,TopL\],n/\[X,NounL,DomL,TopL\].l ex(a ,  det/\[X,Lab,VerbL,_DomL,TopL\],\[ leq(VerbL,Lab),leq(Lab,TopL),Lab:X\], \[X\] ).
~ originating argumenteA similar train of thought lies behind the notionof "focus" proposed by Tomita (Tomita, 1985).
A "fo-cus" in a rule is the constituent which gets assignedall argument fi'om the "ba(:kground" constituents ofthe rule.
Ill general this notion of focus must be fein-t\[vised to individual argmnents.
Constituent 1can befocus with respect o argument i while constituent 2is focus for argument j in a rule.aThc Prolog symbol eq represents he UDRS sub-ordination relation <.910l ex  (every ,  de\]  / \[X, ResL, VerbL ,DomL, _TopL\] ,\[ l eq  (+Lab, Dotal ) ,l eq  (VerbL, S (opeL) ,Lab : every (X, ResL, Sc opeL)1,\[X, Lab, ScopeL\] ).l ex  (man, n/ IX,  Lab, _DomL, _TopL\] ,\[ Lab:man(X)\] ,\[Lab\] ).l ex (saw,  v t / \ ]Event  ,X,Y ,Lab,DotaL\] ,\[ Lab:see (Event ,X,Y) ,l eq  (Lab ,DotaL)\ ] ,\ ]Lab,Event\]  ) .Let us  turn now t;o tim semanl;ie construction com-ponent;.
The tree readings of the DPF correspondto  the contexts of tim packed UDRS.
The motiva-tion behind this layout is that; in most eases syn-taclic ambiguity has  some impact on the semanticreadings 4.
The construction algorithm traversesthe DPF and assigns to each vertex the argumentlist associated with its category in the semanticgrammar.
The arguments on this list are not argu-ments proper as they would be if only pm'se treeswere considered, but f l ,  nc t ions  fl'om contexts toarguments proper.
These flmctions at'(.'
total onlytbr the root and the leaves, for inner nodes v theyare restricted to the union D1 of the.
context setsat \];he dges st;arl,ing at v. A predicate match1matches arguments proper as given in the lexicale.ntries and the starl;symbol de(:laratkm onto tim(-lions as used in the rules.Let D1 be a context set {d l , .
.
.
,dn},  letLexArg be an argument as provided l)y alexicM item or startsymbol declaration i,let Ar t  be mt argument as occurring at-tached to a nonterminal on the right-hand side of a grammar ule.Then the predicate match1  unifiesLexArg with Ar t  if LexArg does notoriginate in I.
If LexArg does, Argis unified with the fimction {dl -9LexArg ,  .
.
.
, dn -+ LcxAr .q} .Let us assume a boi,toln-ut) traversal of the parseforest and let e be the edge fi'om v to one of il;s suc-cessors w. Then the arguments already presenl; aat; w must be matched with the arguments pre-dicted for w by the semantic rule correspondingto e (predicate match2) .
Let D2 be the contextset, assigned to e. Then only the argunmnt val-ues of the contexl, s in D2 are unified.
In \],his wayit is guaranteed l;hat argument matching is done4If several tree readings correspond to a single con-text (semantic reading) this is reeognised in the la.ststep (determining unambiguous arguments) where thetree readings are merged.
'~The boLl;ore-up ;kssuml)tion makes sure that ver-tex w has t)een treated.as it would be done in the underlying trees: Tilecontexts clearly separate the information flow.Let D2 be the context set {dl,.
.
.
,d,~}at e, let UpperArg be an argument asprovided by the semantic rule corre-sponding to edge e, let LowerArg be anargument as attached to the vertex w.Then the predicate match2  unifiesUpperArg with the restriction of theflmction LowerArg to the context;sin D2 {dl -~ vl, .
.
.
,d, ~ v,} (a subsetof LowerArg).In the linM step the packed UDRS is traversedatt(t flmetions whet'(; all eontexl;s point to a singlevalue are replaced by this vahm.7 Comparison with  OtherApproachesThis seel;ion discusses two evaluation criteria forapproaches to semantic underspecification.
Thepresent, proposal is measured against the criteria,and so are the Minimal I/,eeursion Semantics ap-proach (Egg and Lebelh, 1995), the Radical Un-derspeeifieation approach (Pinkal, 1995), and theCore Language Engine approach (Alshawi, 1992).The first criterion is coverage.
Several types ofsyntactic ambiguities can be distinguished.?
adjunct\]on ambiguities (arising from attach-men\] of P Ps, adjectives, adverbial sllb clauses,and other modifiers)?
coordinatkm ambiguities?
0-role assignment ambiguities (arising fi'omscrambling)?
arnhiguities arising from multi-part-of-speechwords (A subcase of this type of ambiguity istit(; treatment of mlknown input words.
)The MRS approach is restricted to adjunct\]on am-biguities, while the othex approaches are applica-ble to all the kinds of ambiguities mentioned.
Adrawback of the MRS approach might be that itgenerates semantic readings which are not licensedby the syntactic structure.
To give an exampleconsider the sentence l saw a 'man in the apart-mer i t  wi th a telescope.
MRS produces a spuriousreading in which the PP with a telescope adjoinsto the NP a man while the PP in the apar tmentmodifies the hill sentence.
Remember that MRSdoes not use.
a parse forest as input structure butan arbitrary parse tree, i.e.
one speeitic syntac-tic reading.
MRS re-ambiguates the parse treeonly afi;erwards within semantic onstrn~:tion.
Atthis point information about positions in the input;string is lost.Another test is the uschtlness of the represen-tation for fllrther processing.
Such processes at'(.'?
disambiguation by sort; hierarchies?
theorem proving911--PPsn=ln=2n=3n=4n=5n=6n=7n=8Readings25144213242914304862U-Nodes U-Time (per reading)75 msec (37.5 msec)180 msec (36.0 msec)430 msec (30.7 msec)1115 msec (26.5 msec)3145 msee (23.8 msec)10505 msec (24.5 msee)32195 msee (22.5 msec)131125 mscc (27.0 msec)1628436182106133163S-Time (per reading )15 msec (7.5 msec)70 msec (14.0 msec)355 msec (25.4 msec)2225 msec (53.0 msec)16895 msec (128.0 msec)176930 msec (412.4 msec)441630 msee (308.8 reset)4331120 msee (890.8 msee)Table 1: Result of Experiment?
transfer and generationAll these processes can successfully handle sco-pally underspecified structures (for sortal disam-biguation and transfer see the Core Language En-gine (Alshawi, 1992), for theorem proving see theUnderspecified DRS formalism (Reyle, 1993)).
Inthe Core Language Engine approach to syntacticunderspecification the representation must be un-packed to perform disambiguation by sorts.
Thisseems to be true for any approach relying on de-lay of semantic onstruction operations: In orderto apply the sortal restrictions of, e.g., a verb toone of its argument discourse referents it mustbe known which discourse referents could possi-bly fill the argument slot.
Moore and Alshawi (AI-shawl, 1992) explain their reluctance to apply sortrestrictions already in the packed structure withthe maintenance overhead in associating semanticrecords with vertices of the forest.
In the packedUDRS approach the problem is handled by ex-plicitly enumerating all possible readings.
Then,the maintenance effort is reduced to the effort ofextrapolating the tree readings from the parse for-est.
None of the compared approaches makes anyclaims about theorem proving and transfer.
Inthe packed UDRS approach it is conceivable todelay actual disambiguation as long as possible:Apart from the potential representation f referen-tim ambiguities by functions packed UDRSs lookexactly like UDRSs.
So if only referentially unam-biguous conditions must be consulted in a proof,a UDRS theorem prover may be used.8 EfficiencyThis section reports on an experiment in whichthe efficiency of the proposed underspecified con-struction mechanism was measured against thecost of generating all UDRSs separately.
Table1 compares the time behaviour of constructingone underspccified structure (U-Time) with thetime needed for constructing of the whole bunchof specified structures (S-Time).
The experimentwas conducted on a SPARCstation 20 using in-put sentences of the form I saw a man (with atelescope f f  .Visibly the time needed per reading remains ap-proximately constant in the construction of theunderspecified representation whereas it growssharply when the ambiguities are enumerated.ReferencesHiyan Alshawi, ed.
1992.
The Core Language Engine.MIT Press, Cambridge, Massachusetts.Hans Ulrich Block and Stefanie Schachtl.
1992.
Traceand Unification Grammar.
In Proceedings of the f i ftecnth International Conference on ComputationalLinguistics, pages 87--94, Nantes, France, August.Johan Bos.
1995.
Predicate Logic Unplugged.
InProceedings of the Tenth Amsterdam Colloquium,ILLC/Department ofPhilosophy, University of Am-sterdam, Amsterdam, Holland, December.Jochen D5rrc and Anch'eas Eisele.
1990.
FeatureLogic with Disiunctive Unification.
In Proceedingsof the 13th International Conference on Computa-tional Linguistics, Helsinki, Finland.Jay Earley.
1970.
An Efficient Context-lh'ee P~rsingAlgorithm.
In Communications of the ACM, 13(2),pages 94-102, February.Markus Egg and Kai Lcbcth.
1995.
Semantic un-derspecification a d modifier attachment ambigui-ties.
In James Kilbury, Richard Wiese (ed.
), Inte-grative Ans\[itze in der Compulerlinguistik.
Beitrilgezur 5.
Faehtagung der Sektion Computerlinguistikder Deutschcn Gesellschaft iir SprachuJissenschaft(DGfS), pages 19--24, Diisseldorf, Germany.Anette Frank aud Uwe Reyle.
1992.
IIow to Copewith Scrambling and Scope.
In GSrz, G.
(ed.
)KONVENS '92.
Reihe Informatik aktuell, SpringerBerlin, pages 121-130, N/irnberg, Germany.ttans Kamp and Uwe Reyle.
1993.
From Discourse toLogic.
Kluwer, Dordrecht, tolland.Manfred Pinkal.
1995.
Radical Underspecification.In Procc~lings of the Tenth Amsterdam Colloquium,ILLC/Department ofPhilosophy, University of Am-sterdazn, Amsterdam, IIolland, December.Uwe Reyle.
1993.
Dealing with Ambiguities by Un-derspecification: Construction, Representation a dDeduction.
In Journal of Semantics, 10, 2, pages123-179.Masaru Tomita.
1985.
Efficient Parsing for NaturalLanguage.
Kluwer, Dordrecht, Holland.912
