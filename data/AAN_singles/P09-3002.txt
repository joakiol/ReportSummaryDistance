Proceedings of the ACL-IJCNLP 2009 Student Research Workshop, pages 10?17,Suntec, Singapore, 4 August 2009.c?2009 ACL and AFNLPInsights into Non-projectivity in HindiPrashanth Mannem, Himani Chaudhry, Akshar BharatiLanguage Technologies Research Center,International Institute of Information Technology,Gachibowli, Hyderabad, India - 500032{prashanth,himani}@research.iiit.ac.inAbstractLarge scale efforts are underway to cre-ate dependency treebanks and parsersfor Hindi and other Indian languages.Hindi, being a morphologically rich, flex-ible word order language, brings chal-lenges such as handling non-projectivityin parsing.
In this work, we lookat non-projectivity in Hyderabad De-pendency Treebank (HyDT) for Hindi.Non-projectivity has been analysed fromtwo perspectives: graph properties thatrestrict non-projectivity and linguisticphenomenon behind non-projectivity inHyDT.
Since Hindi has ample instancesof non-projectivity (14% of all structuresin HyDT are non-projective), it presentsa case for an in depth study of this phe-nomenon for a better insight, from both ofthese perspectives.We have looked at graph constriants likeplanarity, gap degree, edge degree andwell-nestedness on structures in HyDT.We also analyse non-projectivity in Hindiin terms of various linguistic parameterssuch as the causes of non-projectivity,its rigidity (possibility of reordering) andwhether the reordered construction is thenatural one.1 IntroductionNon-projectivity occurs when dependents do noteither immediately follow or precede their headsin a sentence (Tesnire, 1959).
These dependentsmay be spread out over a discontinuous region ofthe sentence.
It is well known that this poses prob-lems for both theoretical grammar formalisms aswell as parsing systems.
(Kuhlmann and M?ohl,2007; McDonald and Nivre, 2007; Nivre et al,2007)Hindi is a verb final, flexible word order lan-guage and therefore, has frequent occurrencesof non-projectivity in its dependency structures.Bharati et al (2008a) showed that a major chunkof errors in their parser is due to non-projectivity.So, there is a need to analyse non-projectivity inHindi for a better insight into such constructions.We would like to say here, that as far as we areaware, there hasn?t been any attempt to study non-projectivity in Hindi before this work.
Our workis a step forward in this direction.Non-projectivity can be analysed from two as-pects.
a) In terms of graph properties which re-strict non-projectivity and b) in terms of linguis-tic phenomenon giving rise to non-projectivity.While a) gives an idea of the kind of grammar for-malisms and parsing algorithms required to handlenon-projective cases in a language, b) gives an in-sight into the linguistic cues necessary to identifynon-projective sentences in a language.Parsing systems can explore algorithms andmake approximations based on the coverage ofthese graph properties on the treebank and lin-guistic cues can be used as features to restrict thegeneration of non-projective constructions (Shenand Joshi, 2008).
Similarly, the analyses based onthese aspects can also be used to come up withbroad coverage grammar formalisms for the lan-guage.Graph constraints such as projectivity, pla-narity, gap degree, edge degree and well-nestedness have been used in previous works tolook at non-projective constructions in treebankslike PDT and DDT (Kuhlmann and Nivre, 2006;Nivre, 2006).
We employ these constraints in ourwork too.
Apart from these graph constraints, wealso look at non-projective constructions in termsof various parameters like factors leading to non-projectivity, its rigidity (see Section 4), its approx-imate projective construction and whether its thenatural one.10In this paper, we analyse dependency structuresin Hyderabad Dependency Treebank (HyDT).HyDT is a pilot treebank containing dependencyannotations for 1865 Hindi sentences.
It usesthe annotation scheme proposed by Begum et al(2008), based on the Paninian grammar formal-ism.This paper is organised as follows: In section2, we give an overview of HyDT and the annota-tion scheme used.
Section 3 discusses the graphproperties that are used in our analysis and section4 reports the experimental results on the coverageof these properties on HyDT.
The linguistic anal-ysis of non-projective constructions is discussedcase by case in Section 5.
The conclusions of thiswork are presented in section 6.
Section 7 givesdirections for future works on non-projectivity forHindi.2 Hyderabad Dependency Treebank(HyDT)HyDT is a dependency annotated treebank forHindi.
The annotation scheme used for HyDT isbased on the Paninian framework (Begum et al,2008).
The dependency relations in the treebankare syntactico-semantic in nature where the mainverb is the central binding element of the sentence.The arguments including the adjuncts are anno-tated taking the meaning of the verb into consid-eration.
The participants in an action are labeledwith karaka relations (Bharati et al, 1995).
Syn-tactic cues like case-endings and markers such aspost-positions and verbal inflections, help in iden-tifying appropriate karakas.The dependency tagset in the annotationscheme has 28 relations in it.
These includesix basic karaka relations (adhikarana [location],apaadaan [source], sampradaan [recipient], karana[instrument], karma [theme] and karta [agent] ).The rest of the labels are non-karaka labels likevmod, adv, nmod, rbmod, jjmod etc...1Thetagset alo includes special labels like pof andccof, which are not dependency relations in thestrict sense.
They are used to handle specialconstructions like conjunct verbs (ex:- prashnakiyaa (question did)), coordinating conjunc-tions and ellipses.In the annotation scheme used for HyDT, re-lations are marked between chunks instead of1The entire dependency tagset can be found athttp://ltrc.deptagset.googlepages.com/k1.htmwords.
A chunk (with boundaries marked) inHyDT, by definition, represents a set of adjacentwords which are in dependency relation with eachother, and are connected to the rest of the wordsby a single incoming dependency arc.
The rela-tions among the words in a chunk are not marked.Thus, in a dependency tree in HyDT, each node isa chunk and the edge represents the relations be-tween the connected nodes labeled with the karakaor other relations.
All the modifier-modified rela-tions between the heads of the chunks (inter-chunkrelations) are marked in this manner.
The annota-tion is done using Sanchay2mark up tool in ShaktiStandard Format (SSF) (Bharati et al, 2005).
Forthe work in this paper, to get the complete depen-dency tree, we used an automatic rule based intra-chunk relation identifier.
The rules mark theseintra-chunk relations with an accuracy of 99.5%,when evaluated on a test set.The treebank has 1865 sentences with a total of16620 chunks and 35787 words.
Among these,14% of the sentences have non-projective struc-tures and 1.87% of the inter-chunk relations arenon-projective.
This figure drops to 0.87% if weconsider the intra-chunk relations too (as all intra-chunk relations are projective).
In comparison,treebanks of other flexible word order languageslike Czech and Danish have non-projectivity in23% (out of 73088 sentences) and 15% (outof 4393 sentences) respectively (Kuhlmann andNivre, 2006; Nivre et al, 2007).3 Non projectivity and graph propertiesIn this section, we define dependency graph for-mally and discuss standard propertiess uch as sin-gle headedness, acyclicity and projectivity.
Wethen look at complex graph constraints like gap de-gree, edge degree, planarity and well-nestednesswhich can be used to restrict non-projectivity ingraphs.In what follows, a dependency graph for an in-put sequence of words x1?
?
?xnis an unlabeleddirected graph D = (X,Y ) where X is a set ofnodes and Y is a set of directed edges on thesenodes.
xi?
xjdenotes an edge from xito xj,(xi, xj) ?
Y .
?
?is used to denote the reflexiveand transitive closure of the relation.
xi?
?xjmeans that the node xidominates the node xj,i.e., there is a (possibly empty) path from xitoxj.
xi?
xjdenotes an edge from xito xjor vice2http://sourceforge.net/projects/nlp-sanchay11versa.
For a given node xi, the set of nodes domi-nated by xiis the projection of xi.
We use pi(xi) torefer to the projection of xiarranged in ascendingorder.Every dependency graph satisfies two con-straints: acyclicity and single head.
Acyclicityrefers to there being no cycles in the graph.
Sin-gle head refers to each node in the graphD havingexactly one incoming edge (except the one whichis at the root).
While acyclicity and single headconstraints are satisfied by dependency graphs inalmost all dependency theories.
Projectivity is astricter constraint used and helps in reducing pars-ing complexities.Projectivity: If node xkdepends on node xi,then all nodes between xiand xkare also subordi-nate to xi(i.e dominated by xi) (Nivre, 2006).xi?
xk?
xi??xj?xj?
X : (xi< xj< xk?
xi> xj> xk)Any graph which doesn?t satisfy this constraintis non-projective.
Unlike acyclicity and the sin-gle head constraints, which impose restrictionson the dependency relation as such, projectivityconstrains the interaction between the dependencyrelations and the order of the nodes in the sen-tence (Kuhlmann and Nivre, 2006)..Graph properties like planarity, gap degree,edge degree and well-nestedness have been pro-posed in the literature to constrain grammar for-malisms and parsing algorithms from looking atunrestricted non-projectivity.
We define theseproperties formally here.Planarity: A dependency graph is planar ifedges do not cross when drawn above the sentence(Sleator and Temperley, 1993).
It is similar to pro-jectivity except that the arc from dummy node atthe beginning (or the end) to the root node is notconsidered.?
(xi, xj, xk, xl) ?
X,?((xi?
xk?
xj?
xl) ?
(xi< xj< xk< xl))Gap degree: The gap degree of a node is thenumber of gaps in the projection of a node.
A gapis a pair of nodes (pi(xi)k, pi(xi)k+1) adjacent inpi(xi) but not adjacent in sentence.
The gap de-gree of node Gd(xi) is the number of such gapsin its projection.
The gap degree of a sentenceis the maximum among gap degrees of nodes inD(X,Y ) (Kuhlmann, 2007).Edge degree: The number of connected com-ponents in the span of an edge which are notdominated by the outgoing node in the edge.Span span(xi?
xj) = (min(i, j),max(i, j)).Ed(xi?
xj) is the number of connected com-ponenets in the span span(xi?
xj) whose parentis not in the projection of xi.
The edge degree ofa sentence is the maximum among edge degreesof edges in D(X,Y ).
(Nivre, 2006) defines it asdegree of non-projectivity.
Following (Kuhlmannand Nivre, 2006), we call this edge degree to avoidconfusion.Well-nested: A dependency graph is well-nested if no two disjoint subgraphs interleave(Bodirsky et al, 2005).
Two subgraphs are dis-joint if neither of their roots dominates the other.Two subtrees Si,Sjinterleave if there are nodesxl, xm?
Siand xn, xo?
Sjsuch that l < m <n < o (Kuhlmann and Nivre, 2006).The gap degree and the edge degree providea quantitative measure for the non-projectivity ofdependency structures.
Well-nestedness is a qual-itative property: it constrains the relative positionsof disjoint subtrees.4 Experiments on HyDTProperty Count PercentageAll structures 1865Gap degreeGd(0) 1603 85.9%Gd(1) 259 13.89%Gd(2) 0 0%Gd(3) 3 0.0016%Edge degreeEd(0) 1603 85.9%Ed(1) 254 13.6%Ed(2) 6 0.0032%Ed(3) 1 0.0005%Ed(4) 1 0.0005%Projective 1603 85.9%Planar 1639 87.9%Non-projective 36 1.93%& planarWell-nested 1865 100%Table 1: Results on HyDTIn this section, we present an experimental eval-uation of the graph constraints mentioned in theprevious section on the dependency structures in12_ROOT_ tab     raat  lagabhag   chauthaaii   Dhal__chukii__thii     jab     unheM    behoshii__sii  aaiiithen   night  about      one?fourth    over    be.PastPerf.
when   him   unconsciouness  PART.
cameAbout one?fourth of the night was over when he started becoming unconscious_ROOT_   hamaaraa   maargadarshak__aur__saathii     saty__hai  ,   jo   iishvar__haiTruth, which is God, is our guide and companionour             guide  and  companion             truth  is     , which God   isa)b)Figure 1: a) Relative co-relative construction, b) Extraposed relative clause constructionHyDT.
Since HyDT is a small corpus and is stillunder construction, these results might not be theexact reflection of naturally occurring sentences inreal-world.
Nevertheless, we hope these resultswill give an idea of the kind of structures one canexpect in Hindi.We report the percentage of structures thatsatisfy various graph properties in table 1.
InHyDT, we see that 14% of all structures are non-projective.
The highest gap degree for structuresin HyDT is 3 and in case of edge degree, it is 4.Only 3 structures (1.5% approx.)
have gap de-gree of more than 1 in a total of 262 non-projectivesentences.
When it comes to edge degree, only 8structures (3%) have edge degree more than 1.The difference in the coverage of gap degree1 & 2 (and the fact that gap degree 1 accountsfor 13.9% of the structures) shows that a parsershould handle non-projective constructions at leasttill gap degree 1 for good coverage.
The same canbe said about edge degree.5 Cases of non-projectivity in HyDTWe have carried out a study of the instances ofnon-projectivity that HyDT brought forth.
Inthis section, we classify these instances based onfactors leading to non-projectivity and presentour analysis of them.
For each of these classes,we look at the rigidity of these non-projectiveconstructions and their best projective approxi-mation possible by reordering.
Rigidity here isthe reorderability of the constructions retainingthe gross meaning.
Gross meaning refers to themeaning of the sentence not taking the discourseand topic-focus into consideration, which is howparsing is typically done.e.g., the non-projective construction in figure 1b,yadi rupayoM kii zaruurat thii tomujh ko bataanaa chaahiye thaa3can be reordered to form a projective constructionmujh ko bataanaa chaahiye thaayadi rupayoM kii zaruurat thiito.
Therefore, this sentence is not rigid.Study of rigidity is important from natural lan-guage generation perspective.
Sentence genera-tion from projective structures is easier and moreefficient than from non-projective ones.
Non-projectivity in constructions that are non-rigid canbe effectively dealt with through projectivisation.Further, we see if these approximations aremore natural compared to the non-projective onesas this impacts sentence generation quality.
A nat-ural construction is the one most preferred by na-tive speakers of that language.
Also, it more or lessabides by the well established rules and patterns ofthe language.We observed that non-projectivity is caused inHindi, due to various linguistic phenomena mani-fested in the language, such as relative co-relativeconstructions, paired connectives, complex co-ordinating structures, interventions in verbal argu-ments by non-verbal modifiers, shared argumentsin non-finite clauses, movement of modifiers, el-lipsis etc.
Also, non-projectivity in Hindi can oc-cur within a clause (intra-clausal) as well as be-tween elements across clauses (inter-clausal).We now discuss some of these linguistic phe-nomena causing non-projectivity.3The glosses for the sentences in this section are listed inthe corresponding figures and are not repeated to save space.13Gorki       if       this   new   literature  of       creator           was   then        socialism         its         solid         base        wasIf Gorki was the creator of this new literature, then socialism was its solid baseb)_ROOT_      gorkii    yadi    is__naye__saahity__ke__srishtikartaa         the    to       samaajavaad     isakaa     Thos    aadhaar    thaaa)_ROOT_     yadi       rupayoM   kii   zaruurat   thii       to       mujh     ko   bataanaa__chahiye__thaaif              rupees     of      need      was    then      me      Dat.
told             should    be(past)If [you] needed rupees then [you] should have told meFigure 2: a) Paired connectives construction, b) Construction with non-projectivity within a clause5.1 Relative co-relative constructionsThe pattern in co-relatives is that a demonstra-tive pronoun, which also functions as deter-miner in Hindi, such as vo (that), always oc-curs in correlation with a relative pronoun, jo(which).
In fact, the language employs a se-ries of such pronouns : e.g., jis-us ?which-that?, jahaaM-vahaaM ?where-there?, jidhar-udhar ?where-there?, jab-tab ?when-then?,aise-jaise (Butt et al, 2007).Non-projectivity is seen to occur in relative co-relative constructions with pairs such as jab-tab,if the clause beginning with the tab precedes thejab clause as seen in figure 1a.
If the clause withthe relative pronoun comes before the clause withthe demonstrative pronoun, non-projectivity canbe ruled out.
So, this class of non-projective con-structions is not rigid since projective structurescan be obtained by reordering without any loss ofmeaning.
The projective case is relatively morenatural than the non-projective one.
This is reaf-firmed in the corpus where the projective relativeco-relative structures are more frequent than thenon-projective sentences.In the example in figure 1a, the sentence can bereordered by moving the tab clause to the rightof the jab clause, to remove non-projectivity.jab unheM behoshii sii aaii tabraat lagabhag chauthaaii Dhalchukii thii ?
when he started becomingunconscious, about one-fourth of the night wasover5.2 Extraposed relative clause constructionsIf the relative clause modifying a noun phrase(NP) occurs after the verb group (VP), it leads tonon-projectivity.In the sentence in figure 1b, non-projectivityoccurs because jo iishvar hai, the rel-ative clause modifying the NP hamaaraamaargadarshak aur saathii is extra-posed after the VP saty hai.This class of constructions is not rigid as theextraposed relative clause can be moved next tothe noun phrase, making it projective.
However,the resulting projective construction is less naturalthan the original non-projective one.The reordered projective constructionfor the example sentence is hamaaraamaargadarshak aur saathii, joiishvar hai, saty hai ?
Our guide andcompanion which is God is truthThis class of non-projective constructions ac-counts for approximately half of the total non-projective sentences in the treebank.5.3 Intra-clausal non-projectivityIn this case, the modifier of the NP is a non-relativeclause and is different from the class 5.2.In the example in figure 2b, the NPgorkii and the phrase modifying it isnaye saahity ke srishtikartaa areseparated by yadi, a modifier of to clause.Intra-clausal non-projectivity here is within theclause gorkii yadi is naye saahityke srishtikartaa the.14He had such [a] liking for sniff that he was not able to give it upa)_ROOT_     naas     kaa    unheM       aisaa     shauk_thaa       ki       usako    tyaag    na        paate__thesniff      of       him            such    liking   was      that       it        give?up not   able?to  was_ROOT_   usakaa    is__hiire__ke__liye    lagaava    svata:    siddh__haihis     this  diamond  for            love   by?itself  evident  ishis love for this diamond is evident by itselfb)Figure 3: a) ki complement clause, b) Genetive relation split by a verb modifierTo remove non-projectivity, reordering of suchsentences is possible by moving the non-modifier,so that it no more separates them.
Here, movingyadi to the left of gorkii takes care of non-projectivity thus making this class not rigid.
Thereordered projective construction is more natural.yadi gorkii is naye saahity kesrishtikartaa the to samaajavaadisakaa Thos aadhaar thaa5.4 Paired connectivesPaired connectives (such as agar-to ?if -then?,yadi-to ?if -then?)
give rise to non-projectivity inHyDT on account of the annotation scheme used.As shown in figure 2a, the to clause is modifiedby the yadi clause in such constructions.
Most ofthese sentences can be reordered while still retain-ing the meaning of the sentence: the phrase thatcomes after to, followed by yadi clause, andthen to.
Here mentioning to is optional.This sentence can be reordered and is not rigid.However, the resulting projective constructionis not a natural one.
mujh ko bataanaachaahiye thaa yadi rupayoM kiizaruurat thii [to] ?
(you) should havetold me if (you) needed rupeesConnectives like yadi can also give rise tointra-clausal non-projectivity apart from inter-clausal non-projectivity as discussed.
This hap-pens when the connective moves away from thebeginning of the sentence (see figure 2b).5.5 ki complement clauseA phrase (including a VP in it) appears betweenthe ki (that) clause and the word it modifies(such as yaha (this), asiaa (such), is tarah(such), itana (this much) ), resulting in non-projectivity in the ki complement constructions.The verb in this verb group is generally copular.Since Hindi is a verb final language, the comple-mentiser clause (ki clause) occurs after the verbof the main clause, while its referent lies beforethe verb in the main clause.
This leads to non-projectivity in such constructions.
The yaha-kiconstructions follow the pattern: yaha-its prop-erty-VP-ki clause.E.g.
yaha-rahasya-hai-ki shukljii pratham shreNii ke kavi kyoMthe.This class of constructions are rigid and non-projectivity can?t be removed from such sen-tences.
In cases where the VP has a transitiveverb, the ki clause and its referent, both mod-ify the verb, making the construction projective.For ex.
In usane yaha kahaa ki vahanahin aayegaa, yaha and the ki clause bothmodify the verb kahaa.In figure 3a, the phrase shauk thaa sepa-rates aisaa and the ki clause, resulting in non-projectivity.5.6 A genetive relation split by a verbmodifierThis is also a case of intra-clausal non-projectivity.In such constructions, the verb has its modifier em-bedded within the genetive construction.In the example in figure 3b, the components ofthe genetive relation, usakaa and lagaav areseparated by the phrase is hiire ke liye.15that    writers?
identity   Acc  we    proudly    publisher           before         put.non?fin    talk        do      be.PastThe writers?
identity that we proudly put before the publisher and talked [to him]_ROOT_      us__lekhakiiy__asmitaa__ko      ham  sagarv   prakaashak__ke?saamane       rakhakar         baat__karate__theb)a)_ROOT_    isake__baad     vah    jamaan__shaah   aur?phir    1795__meM    shaah__shujaa   ko   milaathis      after      it       Jaman     Shah  and?then   1795      in        Shah     Shuja    to     gotAfter this Jaman Shah [got it] and then, in 1795 Shah Shuja got itFigure 4: a) A phrase splitting a co-ordinating structure, b) Shared argument splitting the non finiteclauseThe sentence is not rigid and can be reordered toa projective construction by moving the phrase ishiire ke liye to the left of usakaa.
It re-tains the meaning of the original construction andis also, a more natural one.is hiire ke liye usakaa lagaavsvata: siddh hai ?
his love for thisdiamond is evident by itself5.7 A phrase splitting a co-ordinatingstructureAs seen in figure 4a, non-projectivity is causedin the sentence because, embedding of thephrase 1795 meM splits the co-ordinatingstructure jamaan shaah aur-phir shaahshujaa.
These kinds of constructions can be re-ordered.
So, they are not rigid.
The projectiveconstructions are more natural.isake baad vah jamaan shaah koaur-phir shaah shujaa ko 1795 meMmilaaNon-projective Class Count %Relative co-relatives constructions 18 6.8 %Extraposed realtive clause constructions 101 38.0 %Intra-clausal non-projectivity 12 4.5 %Paired connectives 33 12.4 %ki complement clauses 52 19.5 %Genetive relation split by a verb modifier 10 3.8 %Phrase splitting a co-ordinating structure 4 1.5 %Shared argument splits the non-finite clause 10 3.8 %Others 26 9.8 %Table 2: Non-projectivity class distribution in HyDT5.8 Shared argument splits the non finiteclauseIn the example in 4b, hama is annotated as the ar-gument of the main verb baawa karate the.It also is the shared argument of the non finiteverb rakhakara (but isn?t marked explicitly inthe treebank).
It splits the non finite clause uslekhakiiya asmitaa ko ham sagarvprakaashak ke saamane rakhakaraThrough reordering, this sentence can easily bemade into a projective construction, which is alsothe more natural construction for it.ham us lekhakiiy asmitaa kosagarv prakaashak ke-saamanerakhakar baat karate the5.9 OthersThere are a few non-projective constructions inHyDTwhich haven?t been classified and discussedin the eight categories above.
This is because theyare single occurences in HyDT and seem to be rarephenomenon.
There are also a few instances of in-consistent NULL placement and errors in chunkboundary marking or annotation.6 ConclusionOur study of HyDT shows that non-projectivity inHindi is more or less confined to the classes dis-cussed in this paper.
There might be more types ofnon-projective structures in Hindi which may nothave occurred in the treebank.Recent experiments on Hindi dependency pars-ing have shown that non-projective structures forma major chunk of parsing errors (Bharati et al,162008a).
In spite of using state-of-art parsers whichhandle non-projectivity, experiments show that thetypes of non-projectivity discussed in this paperare not handled effectively.The knowledge of such non-projective classescould possibly be used to enhance the perfor-mance of a parser.
This work further corrobo-rates Kuhlmann?s work on Czech (PDT) for Hindi(Kuhlmann and Nivre, 2006).
Specifically, as dis-cussed in section 4, the non-projective structuresin HyDT satisfy the constraints (gap degree ?
2and well-nestedness) to be called as mildly non-projective.7 Future WorkWe propose to use the analysis in this paper tocome up with non-projective parsers for Hindi.This can be done in more than one ways, such as:The constraint based dependency parser forHindi proposed in (Bharati et al, 2008b) can beextended to incorporate graph properties discussedin section 3 as constraints.Further, linguistic insights into non-projectivitycan be used in parsing to identify when to generatethe non-projective arcs.
The parser can have spe-cialised machinery to handle non-projectivity onlywhen linguistic cues belonging to these classes areactive.
The advantage of this is that one need notcome up with formal complex parsing algorithmswhich give unrestricted non-projective structures.As the HyDT grows, we are bound to comeacross more instances as well as more types ofnon-projective constructions that could bring forthinteresting phenomenon.
We propose to look intothese for further insights.ReferencesR.
Begum, S. Husain, A. Dhwaj, D. Sharma, L. Bai, andR.
Sangal.
2008.
Dependency annotation scheme for in-dian languages.
In In Proceedings of The Third Interna-tional Joint Conference on Natural Language Processing(IJCNLP), Hyderabad, India.Akshar Bharati, Vineet Chaitanya, and Rajeev Sangal.
1995.Natural Language Processing: A Paninian Perspective.Prentice-Hall of India.Akshar Bharati, Rajeev Sangal, and Dipti Sharma.
2005.Shakti analyser: Ssf representation.
Technical report, In-ternational Institute of Information Technology, Hyder-abad, India.Akshar Bharati, Samar Husain, Bharat Ambati, SambhavJain, Dipti Sharma, and Rajeev Sangal.
2008a.
Two se-mantic features make all the difference in parsing accu-racy.
In Proceedings of the 6th International Conferenceon Natural Language Processing (ICON-08), Pune, India.Akshar Bharati, Samar Husain, Dipti Sharma, and RajeevSangal.
2008b.
A two-stage constraint based dependencyparser for free word order languages.
In Proceedings ofthe COLIPS International Conference on Asian LanguageProcessing 2008 (IALP), Chiang Mai, Thailand.Manuel Bodirsky, Marco Kuhlmann, andMathiasMhl.
2005.Well-nested drawings as models of syntactic structure.
InIn Tenth Conference on Formal Grammar and Ninth Meet-ing on Mathematics of Language, pages 88?1.
UniversityPress.M.
Butt, T. H. King, and S. Roth.
2007.
Urdu correlatives:Theoretical and implementational issues.
In Online Pro-ceedings of the LFG07 Conference, pages 87?106.
CSLIPublications.Marco Kuhlmann and Mathias M?ohl.
2007.
Mildly context-sensitive dependency languages.
In Proceedings of the45th Annual Meeting of the Association of Computa-tional Linguistics, pages 160?167, Prague, Czech Repub-lic, June.
Association for Computational Linguistics.Marco Kuhlmann and Joakim Nivre.
2006.
Mildly non-projective dependency structures.
In Proceedings of theCOLING/ACL 2006 Main Conference Poster Sessions,pages 507?514, Sydney, Australia, July.
Association forComputational Linguistics.Marco Kuhlmann.
2007.
Dependency Structures and Lexi-calized Grammars.
Ph.D. thesis, Saarland University.Ryan McDonald and Joakim Nivre.
2007.
Characterizingthe errors of data-driven dependency parsing models.
InProceedings of the 2007 Joint Conference on EmpiricalMethods in Natural Language Processing and Compu-tational Natural Language Learning (EMNLP-CoNLL),pages 122?131, Prague, Czech Republic, June.
Associa-tion for Computational Linguistics.Joakim Nivre, Johan Hall, Sandra K?ubler, Ryan McDon-ald, Jens Nilsson, Sebastian Riedel, and Deniz Yuret.2007.
The CoNLL 2007 shared task on dependency pars-ing.
In Proceedings of the CoNLL Shared Task Session ofEMNLP-CoNLL 2007, pages 915?932, Prague, Czech Re-public, June.
Association for Computational Linguistics.Joakim Nivre.
2006.
Constraints on non-projective depen-dency parsing.
In In Proceedings of European Associationof Computational Linguistics (EACL), pages 73?80.Libin Shen and Aravind Joshi.
2008.
LTAG dependencyparsing with bidirectional incremental construction.
InProceedings of the 2008 Conference on Empirical Meth-ods in Natural Language Processing, pages 495?504,Honolulu, Hawaii, October.
Association for Computa-tional Linguistics.Daniel Sleator and Davy Temperley.
1993.
Parsing englishwith a link grammar.
In In Third International Workshopon Parsing Technologies.L.
Tesnire.
1959. lments de Syntaxe Structurale.
Libraire C.Klincksieck, Paris.17
