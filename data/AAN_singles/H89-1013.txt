PORTABILITY IN THE JANUS NATURAL LANGUAGE INTERFACE 1Ralph M. Weischedel, Robert J. Bobrow, Damaris Ayuso, Lance RamshawBBN Systems and Technologies Corporation10 Moulton StreetCambridge, MA 02138ABSTRACTAlthough natural language technology has achieved a high degree of domain independence through separatingdomain-independent modules from domain-dependent k owledge bases, portability, as measured by effort o movefrom one application to another, is still a problem.
Here we describe aknowledge acquisition tool (KNACQ) thathas sharply decreased our effort in building knowledge bases.
The knowledge bases acquired with KNACQ are usedby both the understanding components and the generation components ofJanus.INTRODUCTION: MOTIVATIONPortability is measurable by the person-effort expended to achieve a pre-specified egree of coverage, given anapplication program.
Factoring an NL system into domain-dependent a d domain-independent modules is now partof the state of the art; therefore, the challenge in portability is reducing the effort needed to create domain-dependentmodules.
For us, those are the domain-dependent k owledge bases, e.g., lexical syntax, lexical semantics, domainmodels, and transformations specific to the target application system.Our experience in installing our natural language interface as part of DARPA's Fleet Command Center BattleManagement Program (FCCBMP) iUustrates the kind of portability needed if NL applications (or products) are tobecome widespread.
We demonstrated broad linguistic coverage across 40 fields of a large Oracle database, theIntegrated Data Base (IDB), in August 1986.
A conclusion was that the state of the art in understanding wasadequate.
However, the time and cost needed to cover all 400 fields of the IDB in 1986 and the more than 850 fieldstoday would have been prohibitive without abreakthrough in knowledge acquisition and maintenance tools.We have developed a suite of tools to greatly increase our productivity in porting BBN's Janus NL understanding andgeneration system to new domains.
KREME \[Abrett, 1987\] enables creating, browsing, and maintaining oftaxonomic knowledge bases.
IRACQ \[Ayuso, 1987\] supports learning lexical semantics from examples with onlyone unknown word.
Both of those tools were used in preparing the FCCBMP demonstratior~ in 1986.
What wasmissing was a way to rapidly infer the knowledge bases for the overwhelming majority of words used in accessingfields.
Then one could bootstrap using IRACQ to acquire more complex lexical items.We have developed and used such a tool called KNACQ (for KNowledge ACQuisition).
The efficiency we haveexperienced results from (1) identifying regularities in expression corresponding to domain model structures and (2)requiring little information from the user to identi~ expressions corresponding to those regularities.1 This research was supported bythe Advanced Research Projects Agency of the Department of Defense and was monitored byONR under Contracts N00014-85-C-0079 and N00014-85-C-0016.
The views and conclusions contained in this document arethose of the authors and should not be interpreted as necessarily representing the official policies, either expressed or implied, of theDefense Advanced Research Projects Agency or the U.S. Government.112WHAT KNACQ DOESKNACQ assumes that a taxonomic model of the domain exists, such as that typical in many expert systems, andassumes that it is encoded in an axiomatizable subset of KREME \[Brachman, 1985\].
At this point we have builttranslators for transforming KEE taxonomies and PCL hierarchies into KREME structures.
2 The browsingfacilities, graphical views, and consistency checker of KREME are therefore at the disposal of the knowledge baseadministrator knowledge ngineer when using KNACQ.KEE PCL Class KB ADMINISTRATOR orTaxonomy Hierarchy KNOWLEDGE ENGINEERKREME L I-- '~  KNACQ ILaxlcal Lax,ca, kC msnt,cs) C Domain Syntax j ModelBBN's ~ ApplicationEND JANUS System 1USER----I, SystemFigure 1: Role of KNACQAyplicatlon stem NUsing KREME, users may select any concept or role for processing.
KNACQ presents the user with a fewquestions and menus to elicit the English expressions used to refer to that concept or role.
From the user's answers,KNACQ creates imple structures which together with powerful general rules allow understanding of a wide range ofexpressions.To illustrate the kinds of information that must be acquired consider the examples in Figure 2.
To handle these onewould have to acquire information on lexical syntax, lexical semantics, and mapping to expert system structure forall words not in the domain-independent dictionary.
For purposes of this exposition, assume that the followingwords, vessel, speed, Vinson, CROVL, C3, and deploy are to be defined.
A vessel has a speed of 20 knots or avessel's peed is 20 knots would be understood from domain-independent semantic rules regarding have and be, oncelexical information for vessel and speed is acquired.
In acquiring the definitions of vessel and speed, the systemshould infer interpretations for phrases uch as the speed of a vessel, the vessel's peed, and the vessel speed.The vessel speed of VinsonThe vessels peed is 5 knotsIts speedWhich vessels are deployed C37The vessels with speed above 20 knotsVinson has speed less than 20 knotsWhich vessels have a CROVL of C37Figure 22 Of course, it is not the case that every piece of knowledge statable in KEE taxonomies and PCL hierarchies has a correlate in theaxiomatizable subset of KREME.
We do not guarantee that he NL interface will understand English expressions corresponding toanything falling outside of the axiomatizable subset113Given the current implementation, the required knowledge for the words vessel, speed, and CROVL is mostefficiently acquired using KNACQ; names of instances of classes, such as Vinson and C3 are automatically inferredfrom instances in the expert system taxonomy; and knowledge about deploy and its derivatives would be acquired viaIRACQ.
That is, we recommend using IRACQ for the diverse, complex patterns of syntax and semantics arisingfrom verbs by providing examples of the verbs' usage, while using KNACQ for efficient acquisition of the moreregular noun phrase information (excluding verb-based constructions).KNACQ FUNCTIONALITYFive cases are currently handled: one associated with concepts (or frames), two associated with binary relations (orslots), and two for adjectives.
In each case, one selects a concept or binary relation (e.g., using the KREMEbrowser) to provide lexicalizations for that domain entity.CONCEPTS OR CLASSESThe association of English descriptions with concepts is the simplest case.
It is fundamental knowledge aboutunmodified head nouns or frozen nominal compounds from which we can build more powerful examples.
KNACQmust acquire one or more phrases for a given class, and their declension, if irregular.
For the concept CARRIER ofFigure 3, we provide KNACQ with the phrases carrier and aircr~t carrier, which can be treated as a frozen nominalcompound.
Since both are declined regularly, no further information is required.
One can provide surface vessel forSURFACE-VESSEL in Figure 3, but that would not allow compositions, such as Count the surface and subsurfacevessels.
Rather, one should define surface and subsurface as non-comparative adjectives (Section 3.4) modifyingphrases corresponding to VESSEL in order to define phrases for the concepts SURFACE-VESSEL andSUBSURFACE-VESSEL.Figure 3: Simple Class HierarchyATTRIBUTESAttributes are binary relations on classes that can be phrased as the <relation> of a <class>.
For instance, supposeCURRENT-SPEED is a binary relation relating VESSEL to SPEED, a subclass of ONE-D-MEASUREMENT.
Anattribute treatment is the most appropriate, for the speed of a vessel makes perfect sense.
KNACQ asks the user forone or more English phrases associated with this functional role; the user response in this case is speed.
That114answer is sufficient o enable the system to understand the kernel noun-phrases li ted in Figure 4.
Since ONE-D-MEASUREMENT is the range of the relation, the software knows that statistical operations such as average andmaximum apply to speed.
The lexical information i ferred is used compositionally with the syntactic rules, domainindependent semantic rules, and other lexical semantic rules.
Therefore, the generative capacity of the lexicalsemantic and syntactic information is linguistically very great, as one would require.
A small subset of theexamples illustrating this without introducing new domain-specific lexical items appears in Figure 4.
It is thiscompositionality and the domain independent rules that provide the utility of KNACQ.the speed of a vesselKERNEL NOUN PHRASESthe vessel's speedCOMPOSITIONALLY WITH OTHER LEXICAL SEMANTICS,SYNTACTIC RULES, AND SEMANTIC RULESthe vessel speedWhich vessels have speed above 20 knotsThe carriers with speed above 20 knotsThe vessels with a speed of 20 knotsVinson has speed less than 20 knotsEisenhower has Vinson' s speedCarriers with speed 20 knotsThe vessel's speed is 5 knotsVinson has speed 20 knotsWhich vessels have speedsThe vessel speed of VinsonFigure 4Their average speedsTheir greatest peedVinson has speed IItsspeedCASEFRAME RULESSome lexicalizations of roles do not fall within the attribute category.
For these, a more general class of regularitiesis captured by the notion of caseframe rules.
Suppose we have a role UNIT-OF, relating CASUALTY-REPORT(casrep) and MILITARY-UNIT.
Besides asking about he unit of a casrep (the attribute use), a user will want to askabout he casreps on a unit (the inverse direction)--this is one case where caseframe rules are needed.
KNACQ asksthe user which subset of the following six patterns in Figure 5 are appropriate plus the prepositions appropriate.1.
<CASUALTY-REPORT> is <PREP> <MILITARY-UNIT>2.
<CASUALTY-REPORT> <PREP> <MILITARY-UNIT>3.
<MILITARY-UNIT> <CASUALTY-REPORT>4.
<MILITARY-UNIT> is <PREP> <CASUALTY-REPORT>5.
<MILITARY-UNIT> <PREP> <CASUALTY-REPORT>6.
<CASUALTY-REPORT> <MIIJTARY-UNIT>Figure 5: Patterns for the Caseframe RulesFor this example, the user would select patterns (1), (2), and (3) and select for, on, and of as prepositions.Normally, if pattern (1) is valid, pattern (2) will be as well and vice versa.
Similarly, if pattern (4) is valid, pattern(5) will normally be also.
As a result, the menu items are coupled by default (selecting (1) automatically selects (2)and vice versa), but this default may be simply overridden by selecting either and then deselecting the other.
Themost frequent examples where one does not have ~e coupling of those patterns i  the preposition of.GRADABLE ADJECTIVESCertain auribute roles have ranges that may be compared, e.g., numbers or measurements.
Adjectives can be givenfor these roles; assume fast is given by the user for the CURRENT-SPEED role or VESSEL discussed earlier.KNACQ can correctly predict he comparative and superlative forms of fast.
Suppose x and y are instances of115VESSEL.
The next information eeded is whether x is faster than y means x% speed is greater than y's speed or x%speed is less than y's speed.
Optionally, a threshold t can be given such that x's speed is greater than t means x isfast (for a vessel).
Additionally, one can specify antonyms for fast, such as slow.
The information above wouldenable understanding the expressions inFigure 6.Is Frederick fast~ than every carrier?How fast are the carriers?Is Vinson fast ?How fast is the fastest carrier?Which vessels are slower than 20 knots?Show the fastest vessel.Is Vinson as fast as Frederick?Figure 6: Examples after defining fastNON-GRADABLE ADJECTIVESOf the remaining types of adjectives, some correspond to refining a concept o another named concept in thehierarchy.
For instance, surface and subsurface have that property given the network in Figure 3..
In such a case,one must indicate at the general concept, he adjective, any synonyms, and the refined concept.Others correspond to an arbitrary restriction on a concept having no explicit refined concept in the domain model.Though one could add such a refined concept to the hierarchy, we allow the user to state a logical form to define theadjective as a predicate of one argument.A case not yet covered in KNACQ is non-gradable adjectives that are predicates of more than one argument.
Anexample in the FCCBMP domain is mission readiness ratings, M1, M2, M3, M4, and M5.
An example isEnterprise is M2 on anti-air warfare, where both the vessel and the type of mission are arguments.EXPERIENCE THUS FARThere are several things we have learned even in the early stages of KNACQ's development based on porting Janus toCASES, an expert system in DARPA's Fleet Command Center Battle Management Program (FCCBMP).
In thisuse of KNACQ, the original domain model pertinent to the portion requiring anatural language interface consistedof 189 concepts and 398 roles.First, no restructuring of that domain model was necessary, nor was any deletion required.
Second, we found ituseful to define some additional concepts and roles.
Certain subclasses not critical to the expert system werenevertheless lexically significant.
In total, only 123 concepts were added: 53 for classes that were treated as stringsin the expert system and 70 domain-independent concepts pertaining to time, space, events, commands, etc.Similarly, 28 roles were added."
24 domain-independent roles and 4 domain-specific roles.
In addition, some roleswere added to represent role chains that are lexically significant directly.
For instance, the DISPLACEMENT of theVESSEL-CLASS of a VESSEL is lexicalizable as the vessel's displacement.
Starting from a given concept, aprocedure xists to run through a subhierarchy checking for role chains of length two to ask the user if any of thoseare significant enough to have lexical forms.
For the example network we needed to add only 5 roles for thispurpose.
Third, 1093 proper nouns (e.g., ship and port names) were inferred automatically from instances.As a result, the time required to supply lexical syntax and semantics was much less than we had experienced beforedeveloping KNACQ.
In two days we were able to provide 563 lexical entries (root forms not countingmorphological variants) for 103 concepts and 353 roles.
Together with the automatically inferred proper nouns, thiswas approximately 91% of the domain-dependent vocabulary used for the demonstration.
That is about 5-10 dmesmore productivity than we had experienced before with manual means.116RELATED WORKTEAM \[Grosz, 1987\] is most directly related, having many similar goals, though focussed on data bases rather thanexpert systems or knowledge bases.
The novel aspects of KNACQ by contrast with TEAM are (1) accepting anexpert system domain model as input (KNACQ) contrasted with the mathematically precise semantics of a relationaldata base (TEAM), and (2) how little information is required of the KNACQ user.A complementary facility is provided in TELI \[Ballard, 1986\] and in LIFER \[Hendrix, 1978\].
KNACQ is meant obe used by the (expert system's) knowledge ngineer, who understands the expert system domain model, to define alarge portion of the vocabulary, that portion corresponding to simple noun phrase constructions for each concept androle; one uses KNACQ to bootstrap the initially empty domain-dependent lexicon.
TELI and LIFER, on the otherhand, are meant o let the end user define additional vocabulary in terms of previously defined vocabulary, e.g., Aship is a vessel; therefore, those systems assume an extensive vocabulary provided by the system builder.Obviously, providing both kinds of capabilities is highly desirable.CONCLUSIONSKNACQ is based on the goal of allowing very rapid, inexpensive deFmition of a large percentage of the vocabularynecessary in a natural anguage interface to an expert system.
It provides the knowledge ngineer with the facilitiesto browse his/her taxonomic knowledge base, and to state head nouns, nominal compounds, and their non-clausalmodifiers for referring to the concepts and roles in the knowledge base.
Given that, KNACQ infers the necessarylexical syntactic and lexical semantic knowledge.
Furthermore, if appropriate instances in the expert systemknowledge base already have names, KNACQ will add proper nouns for those instances to the lexicon.KNACQ does not cover the inference of complex constructions typical of verbs and their nominalizations.
IRACQ\[Ayuso, 1987\] allows a user to enter examples of usage for acquiring lexical syntax and semantics for complexconstructions.Our experience thds far is that KNACQ has achieved our goals of dramatically reducing the time it takes to define thevocabulary for an expert system interface.
It appears to have increased our own productivity several fold.
(However,KNACQ has not yet been provided to a knowledge engineer with no knowledge of computational linguistics.
)We believe that the problem of linguistic knowledge acquisition is critical not just as a practical issue regardingwidespread availability of natural anguage interfaces.
As our science, technology, and systems become more andmore mature, the ante to show progress could involve more and more effort in filling domain-specific knowledgebases.
The less effort spent on such knowledge bases, the more effort can be devoted to unsolved problems.ReferencesAbrett, G. and Burstein, M. The KREME knowledge diting environment.
Int.
J. Man-Machine Studies 27:103-126, 1987.Ayuso, D.M., Shaked, V., and Weischedel, R.M.
An Environment for Acquiring Semantic Information.
InProceedings of the 25th Annual Meeting of the Association for Computational Linguistics, pages 32--40.ACL, 1987.Ballard, B. and Stumberger, D. Semantic Acquisition in TELI: A Transportable, User-Customized NaturalLanguage Processor.
In Proceedings of the 24th Annual Meeting of the Association for ComputationalLinguistics, pages 20-29.
ACL, June, 1986.Brachman, R.J. and Schmolze, J.G.
An Overview of the KL-ONE Knowledge Representation System.
CognitiveScience 9(2), April, 1985.Grosz, B., Appelt, D.E., Martin, P., and Pereira, F.
TEAM."
An Experiment in the Design of TransportableNatural-Language Interfaces.
Artificial Intelligence, Vol.
32, No.
2, May 1987.Hendrix, G., et.
al.
Developing aNatural Language Interface to Complex Data.
ACM Transactions on DatabaseSystems 3(2): 105-147, 1978.117
