Generating Event Descriptionswith SAGE: a Simulation and Generation EnvironmentMarie MeteerBBN Systems and TechnologiesCambridge, MA 02138MMETEER@BBN.COMFAX: (617) 648-1735ABSTRACTThe SAGE system (Simulation and GenerationEnvironment) was developed to address issues at theinterface between conceptual modelling and naturallanguage generation.
In this paper, I describe SAGE andits components in the context of event descriptions.
Ishow how kinds of information, such as theReichenbachian temporal points and event structure, whichare usually treated as unified systems, are often bestrepresented at multiple levels in the overall system.
SAGEis composed of a knowledge representation language andsimulator, which form the underlying model and constitutethe "speaker"; a graphics component, which displays theactions of the simulator and provides an anchor for locativeand deictic relations; and the generator SPOKESMAN, whichproduces a textual narration of events.1.
INTRODUCTIONIn Text Generation, some of the most interesting issueslie at the interface between the conceptual model (theunderlying program) and the generator.
It is wellrecognized that one cannot produce sophisticated text froman impoverished underlying model (McKeown & Swartout1988).
McDonald (1993) makes an even stronger claim:Nevertheless, the influence it \[the application program\]wields in defining the situation and the semantic modelfrom which the generator works is so strong that itmust be designed in concert with the generator if highquality results are to be achieved.In fact, some of the best results in text generation havecome from efforts where the model and the generator weredeveloped in tandem, from Davey's early work on describingtic-tac-toe games (Davey 1974) to Dale's recent work ongenerating recipes (Dale 1990).
Dale found that in order togenerate referring expressions in recipes, he had to work onthe representation f the underlying objects and their statechanges in order to be able to correctly generate the numberof the noun phrases in examples such as "Grate onecarrot...Add the carrots to the stew".
The most impressiveresults to date in event generation is the NAOS system(Novak 1987, Neumann 1989), which produces naturallanguage descriptions of object movements in a streetscene.
It is designed to take is input from a vision systemobserving traffic, which captures both temporal and spatialrelationships among the objects in the scene.
The focus ofthe work has been on representing events and the relationsamong them and then connecting those events to caseframes for expressing them in natural language.In narration, temporal and aspectual information mustbe available in the underlying model in order to describeevents.
For example, using the well recognizedReichenbachian model, three different emporal points,point of event (E), point of speech (S), and point ofreference (R), are needed in order to adequately account forthe English tense system, as shown in the followingexamples:1.
Peter drove to work.
(E = R < S)2.
Peter had driven to work.
(E < R < S)Such problems are generally treated as unified systemsin linguistics within studies of semantics or the lexicon.However, in generation research, the issue is not just whatdistinctions there are, but at what level (model, textplanner, syntactic component) should the informationneeded to make these distinctions be represented.
Takingthe temporal points in the Reichenbachian model as anexample, two of the points, E and S, are facts of themodel, when the event ook place and the time the speakeris producing the utterance.
However, the third point, thereference time, is a fact of the discourse, a choice to bemade by the speaker.
(1) and (2) above are distinguished bythe reference time, but otherwise could describe the sameevent and be spoken at the same time.While most studies of events are done within the realmof linguistics, where the focus in on the expression ofevent descriptions, it is clear that the way events aremodelled is also an essential element.
Bach (1988)describes "how certain metaphysical assumptions areessential to an understanding of English tenses and aspects.These assumptions have to do with the way reality---or ourexperience--is structured.
"From a generation perspective, there are two basicquestions to be answered.
First, what information isneeded in order to produce the distinctions available inlanguage, and secondly, what distinctions are facts oflanguage (and thus should be in the generator) and whichare better represented at the model evel?99?
.
7th International Generation Workshop ?
Kennebunkport, Maine ?
June 21-24, 1994The problem of finding a general way to research suchquestions has led to the development of SAGE, a"Simulation and Generation Environment", which providescomponents for both conceptual modelling and textproduction.
In SAGE, a frame-based knowledgerepresentation component models objects and theirproperties, an event-based simulator models the actions ofmultiple agents, and a graphics component provides modelsof the physical geography in the virtual world, in additionto providing a visual interface to the objects, agents, andactions.
Text generation is provided by the SPOKESMANsystem.
SPOKESMAN is data directed in that it links to theother components both through mappings from concepts inthe knowledge representation and through instances ofobjects and events created by the simulator.In this paper, I describe the components of SAGE andhow they are integrated, focusing on the generation ofevent descriptions.
In Section Two, I look at whatinformation is needed to generate vents through analysisof events and a review of the linguistic literature.
InSection Three, I describe the architecture of SAGE and itsrepresentational levels, including where in the overallsystem event information is represented and in SectionFour I illustrate these issues using paragraphs generated inSAGE, such as the following:Fluffy wants to catch a mouse.
He is looking for her.The mouse wants to get cheese.
She is leaving a mouse-house.She is going toward it.Fluffy is chasing the mouse.
He is going toward her.
He caughther.The mouse didn't get the cheese.The overall methodology applied in this researchtooapproach t e problem from two directions, as depictedin Figure 1.
One direction is that from a situationmodelled in some application program to the expression ofsome set of goals from that program in a natural anguage(in this case, English).
The second direction is the use oftext analysis to work backwards from the way something issaid to what decision points led to that text, whatalternative choices were not made, which decisions wereconstrained by the syntax or lexicon of the language, andwhat information is needed in the application program inorder to make these decisions.Underlying Programin a particular situation with a set ofgoals to accomplishHow to realize those goalsthrough languageExpressibilityExpressivenessHow to account for the competencepeople demonstrate hrough theiruse of languageFigure 1:An appropriateTEXTBi-directional approachresearchto generationThis methodology is exemplified in the work presentedhere in the first direction by the use of SAGE to modelsituations and generate text (described in Section 3 andexemplified in Section 4) and in the second direction,through the analysis of events and projection of thatanalysis onto the decisions of the generator (described inSection 2).2.
EVENTSIn this section, we address the problem of representingand describing events.
The goal is to identify theinformation that needs to be represented in order to takeadvantage of all the resources a language provides fordescribing events (which involves determining whichdistinctions language supports) and determining at whatlevel the information should be represented and thedecisions made to make those distinctions.We first outline six different kinds of informationneeded for the expression of events: linear time, eventtype, temporal modifiers, event structure, argumentstructure, and agency.
In section three, we describe thearchitecture of SAGE and show where the decisionssupporting the distinctions in the expression of events aremade.2.1 Information for EventsFirst, in order to generate vents, there needs to be amodel of linear time.
Most of the current work on tensesis based on a Reichenbachian-style analysis, whichinvolves three temporal notions: point of speech, point ofthe event, and point of reference, as we showed above inexamples (I) and (2).Another well recognized istinction is that of eventtypes, such as state, process, transition, exemplified by thefollowing examples:3.
The mouse is under the table.
(state)4.
Fluffy ran.
(process)5.
Peter found his keys.
(transition----achievement)6.
Helga wrote a letter.
(transition--accomplishment)While verbs have an intrinsic type (e.g.
wait is a processand catch is a transition), these types also apply to wholephrases, since tense, aspect, adjuncts and arguments cancompose with the type of the lexical head to form a newtype:7.
Fluffy ran into the kitchen.
(process --> transition)8.
Helga is writing a letter.
(transition --> process)9.
The mouse is caught.
(transition --> state)10.
Roscoe builds houses.
(transition --> iteration)Four kinds of temporal adverbials can be distinguished andare linked to the event ypes.
Duration modifies processes,as in example ( l la),  but not transitions ( l lb) ;  f rameadverbials modify accomplishments, as in (12a), but notprocesses (12b); point adverbials modify achievements, asin (13); and frequency adverbials modify iterative vents, asin (14).1007th International Generation Workshop ?
Kennebunkport, Maine ?
June 21-24, 199411. a) Peter waited in the lobby for an hour.b) * Helga wrote the letter for an hour.12 a) Helga wrote the letter in an hour.b) * Peter waited in the lobby in an hour13.
Hank found the pen at four o'clocl~14.
Martha writes letters frequently.It is also clear that events are not undifferentiatedmasses, but rather have subparts that can be picked out bythe choice of phrase type or the addition of adverbialphrases.
Moens & Steedman (1988) identify threeconstituents to an event nucleus, a preparatory process,culmination, and consequent s ate, whereas Nakhimovsky(1988) identifies five: preparatory, initial, body, final,result, exemplified by the following: 115.
When the children crossed the road,a) they waited for the teacher to give a signalb) they stepped onto its concrete surface as if it wereabout to swallow them up.c) they were nearly hit by a card) they reached the other side stricken with fear.e) they found themselves surrounded by strangers.Pustejovsky (1991) offers a much more compositionalnotion of event structure, where a transition is thecomposition of a process and a state.
This analysis is moreclosely tied to the lexicon than Moens and Steedman's orNakhimovsky's (and is offered in the context of a generativetheory of lexical semantics).
It not only accounts for thesemantics of verbs, but also their compositions withadjuncts to form new types, as in (7) above.The participants of an event are those entities that act inor are acted upon in the event.
The argument structure isthe set of participants in the event hat are grammaticizedwith respect to a particular lexicalization of the event, suchas the agent, theme, source, and goal.
For some eventtypes (especially those that appear as examples inlinguistics papers), the distinction between what is anargument and what is an adjunct is clear.
For example, in"Fluffy ate a bone in the dining room yesterday", Fluffy"(the agent) and "a bone" (the theme) are arguments, whereasthe location and time are adjuncts.
For other verbs,however, the distinction is not so clear, as in "Mickey slidin to  home plate", where the location is a necessaryparticipant to the meaning, yet as a location it would betreated as an adjunct in most analyses.Agency in an event is an aslSect of the argumentstructure, but since there are some importantgeneralizations over this participant hat is not true ofothers, we treat it separately.
One of the most widelydiscussed syntactic variations is the active/passive, whichvary on the placement/inclusion of the agent.
Asdiscussed in Meteer (1991) there are really many differentmotivations for what is often characterized as a single"switch" in generators.
The degree of explicitness of theagent in different syntactic onstructions can be seen in thefollowing set of examples, from the explicit inclusion of1 Nakhimovsky, 1988, p.31.the agent in the subject position in (a), to the movement ofthe agent to the by-phrase in (b), to the deletion of theagent in (c), to an adjectival construction i  (d) using thepast participle form of the verb, to a result construction i(e) that includes no indication of agency.
Notice that theexplicitness of the event's tense diminishes along with theagency.18.
a)b)c)d)e)Peter tore the shirt.The shirt was torn by Peter.The shirt was torn yesterday.Peter wore the torn shirt yesterday.No one noticed the tear in the shirt.
(cf No onenoticed the missing button.
)Another argument that agency should be treatedspecially is made by Pustejovsky (1991) in his work ingenerative lexical semantics and event structure.Pustejovsky argues that some distinctions usuallycharacterized by event type or argument structure areactually rooted in agency, such as the difference betweenverbs that are lexically transitions but have unaccusativeand causative variants ("The door closed" vs. "Thelmaclosed the door").
Furthermore, the difference between thetwo types of transitions, accompl ishments vs.achievements, is based on an agentive/non-agentivedistinction.
According to Pustejovsky, accomplishments(such as build, draw, and leave) include both the act and thecausation in their semantics, whereas in accomplishments(such as win, find, and arrive) agency is not an intrinsicpart of the semantics of the verb, but is rather based onsomething else, such as the configuration of elements(someone wins when they are at the front in somecompetition at a particular moment, given some particularevaluation function).
This is substantiated by theinteraction with "deliberately" and these verbs, shown inthe examples below:19. a. Helga deliberately drew a pictureb.
*Helga deliberately found the pen.20.
a. Peter deliberately left the party.b.
*Peter deliberately arrived at the party.Having identified the information necessary for thedescription of events, the next step in the research is todetermine which levels should be responsible for therepresentation of the information.
In particular, whataspects of the event description are?
dependent on the event itself (a fact of the world/model);?
dependent on the discourse context;?
dependent on what linguistic resources are available (e.g.lexicon and syntax) and constraints on theircomposition.SAGE allows us to approach these questionsexperimentally, using SAGE to provide a context in whichto make the decision about where the information is bestrepresented and the decisions best made.
In the nextsection, I describe SAGE, its components, and how theyinteract.
I also include where in that architecture theinformation for event descriptions is represented.
In1017th International Generation Workshop ?
Kennebunkport, Maine ?
June 21-24, 1994Section Four I look at these issues more concretely usingan example narration from SAGE.3.
THE COMPONENTS OF SAGESAGE is a package of integrated tools to aid inexploring the relationship between simulated events in amulti-agent environment, the narration of those events by atext generator, and the animation of the events with simplegraphics.
There are three main components oSAGE:?
The.
speaker's intensional world is modelled in an"underlying program" built using the knowledgerepresentation language VSFL and the event basedsimulator SCORE; 2?
The text generator is SPOKESMAN, with the linguisticcomponent MUMBLE-86 and the text planner Ravel;?
The graphics component is built with the graphicspackage in Macintosh Common Lisp and MacQuickdraw.3.1 The Modell ing Component  of SAGEThe underlying program of SAGE, that is, the part inwhich objects and events are modelled, is a knowledgebased simulation system with two parts: the knowledgerepresentation language and the simulator.
The objects andevents are modelled primarily in VSFL (the Very SimpleFrame Language), which is an amalgamation of aknowledge representation language and an object orientedprogramming language.
As a descendent of KL-ONE(Brachman & Schmolze 1985), it provides concept and rolehierarchies and multiple inheritance of roles (including rolerestrictions and defaults) 3.The knowledge base in SAGE is what ties together themain components.
It acts as a central resource, providingdefinitional information for types and relations.
The typeof an object controls its actions in the simulation, the wayit is expressed by the generator, and how it is displayed bythe graphics component.
For example, if the generator isreferring to the object #<fluffy>, which is of type dog, ituses the mapping of concept dog to the class of alternativeexpressions for named individual (such as using the name,2 VSFL ("Very Simple Frame Language") and SCORE CSproketCore") were developed at BBN Systems and Technologies byGlenn Abrett and Jeff Palmucci, with assistance from MarkBurstien, and Stephen Deutsch.
VSFL is a reimplementation ofSFL, which is a descendent of KL-One.
SCORE is areimplementation f the SPROKET simulator.
See Abrett, et al1989 for a more detailed description of these systems.3 VSFL is "very simple" in that it does not support automaticclassification and does not have a graphical editor (though itdoes have a graphical viewer).
Its integration with CLOS(Common Lisp Object System) supports the creation ofinstances and the ability to associate methods with concepts.The integration with CLOS also provides more efficient slotaccessors and other optimizations.a pronoun, "I" if fluffy is the speaker, ageneric reference "adog" if he is being introduced and not known, etc.).
Thegraphics component uses the fact that the type "dog"inherits from "agent" and agents are drawn using trianglespointing in the direction the agent is facing.
There is acore knowledge base which contains the set of conceptsthat are used by all domains, such as ACTION, OBJECT,LOCATION.
This is similar to the upper model used inPenman (Bateman 1989).
4Events are represented as goals and procedures in thesimulator and are also linked to the knowledge basethrough their types, which are concepts in the knowledgebase.
This provides a classification of events into the threemain event types: state, process, and transition.
Theparameters to those goals/procedures are the roles on theconcept, defining the participants in the event, as well asassociated information, such as location.The simulator SCORE is an event-based simulator thatsupports multiple agents executing parallel goals andactions.
SCORE provides a language for declarativelyrepresenting the plans of agents, where a plan is a partialordering of procedures and subgoals for accomplishinggoals and handling contingencies.
Goals define theintentions of agents (goals succeed or fail) and proceduresdefine a sequence of actions and decision points (procedurescomplete or are interrupted).
The primitives in this systemare actions, which are simply lisp functions.The hierarchical structure of the plans, with proceduresdefined in terms of subprocedures and actions, defines thestructure of events, in the sense of Nakhimovsky, describedabove.
The procedure for cross-the-road, for example,would be defined in terms of prepare-to-cross (look bothways, wait for traffic, wait for teacher's ignal, etc,) steponto the road, walk across, step on to the other side, with aconsequent change in that agent's tate (more specifically,his location) from one side of the street o another.
Notethat in these terms, the constituents of an event is a fact ofthe model and the level of granularity that is represented,and not a linguistic issue.
We can describe the event as asingle action "cross the road", but with an animationcomponent, each of the steps must be modelled as well(depending, of course, on the granularity of the animation,since if the "road" is a single line, then a single actionmight be adequate to move the agent across it).When a goal/procedure is run, an instance of the eventconcept is created and the parameters are filled withinstances of objects and other events.
The start and endtime and instances of subprocedures are filled in as theprocedure runs, providing the event ime necessary for thegeneration of tense.
The simulator passes instances ofactions to both the generator and graphics component,4 As yet we make not theoretical claim to the significance ofour choice of which concepts live in the core.
This is part ofour ongoing research.1027th International Generation Workshop ?
Kennebunkport, Maine ?
June 21-24, 1994which use the type hierarchy to know how to describe theaction or how to update the display.3.2 The Generat ion  Component  of  SAGESPOKESMAN is composed of two major components:the text planner and the linguistic realization component.The text planner selects the information to becommunicated xplicitly, determines what perspectives theinformation should be given (e.g.
whether something isviewed as an event, "Peter waited for a long time", or as anobject, "the long wait"), determines the organization of theinformation, and chooses a mapping for the informationonto the linguistic resources that the language provides.The linguistic realization component is MUMBLE-86(McDonald 1984; Meteer, et al 1987).
It carries out theplanner's specifications to produce an actual text.
Itensures that the text is grammatical nd handles all of thesyntactic and morphological decision making.Both components use multiple levels of representation,beginning with objects from the application programthrough progressively more linguistic representations tothe final text, as shown in Figure 4.Application Program Objects~ Composin~ the utteranceText Structure TEXT PLANNER ~ Mapping tolinguistic resourcesLinguisticSp~cation Choosing phrasesand attaching themMUMBLE-86 Surface StructureMo~hologyWord StreamFigure 4: SPOKESMANEach representational level is a complete description ofthe utterance and provides constraints and context for thefurther decisions that go into its construction.
This is anessential part of planning by progressive refinement,because the representation must constrain the planner sothat it is not allowed to make decisions it will later have toretract.
The representational levels also control the order ofthe decisions.The Text Structure, which is the central representationlevel of the text planner, provides a vocabulary formapping from the terms of the model level to thelinguistic terms of the generator.
It is at this level that thecontent lexical items are selected and the semantic ategoryof the constituents i  determined.
Events and theircomposition are handled in the style of Pustejovsky(described above).
For example, a RUN-TO-LOCATIONprocedure in the simulator (which has a type of transition)is mapped to the composition of the lexical head "run"(with the agent from the WHO role of the procedure), whichis lexically a process, with a goal locative adjunct (e.g.
"tothe kitchen"), which produces a transition as shown in theText Structure tree in Figure 5.
Constraints on thetransition type indicate that only a frame adverbial (e.g.
"intwo minutes"), can be added, and not a duration (e.g.
"fortwo minutes").i MATRIX \[ #<COMPOSITE-EVENTtype: bansttion>#<EVENT: run I #<RELATION: goaldoca~ontype: process> I Object: #<kitchen>>i I #<RELATION: agent #<Jake> )Figure 5: Text Structure TreeThe speaker could also choose not to express the entiretransition as a kernel unit, but rather pick out only theprocess portion, as in "Jake ran", in which case thecomposition would also be of type process, whichconstrains the temporal adjuncts to be of type duration,rather than frame.
(See Meteer, 1992, for a more completedescription of the vocabulary of terms in the text structureand its role in the incremental composition of the textplan .
)Another role of the Text Structure is to keep track ofdiscourse level information, such as focus and what entitieshave been referenced and in what context.
As Webber(1988) points out, tense can be used anaphorically, just asdefinite nps and pronouns can, and the speaker must keeptrack of the changing temporal focus.
It is thecombination of the discourse specific information and theevent time and speech time as defined by the simulator 5that are needed to correctly generate English tense, asdescribed above.4.
EXAMPLEIn this section, we look at the underlying structures fora narration of a simulation in the SAGE system.
We focuson those elements at the interface between the underlyingprogram and the generator.
The simulation begins witheach of the agents located at a position on the map (Figure6).
Fluffy the dog is assigned a goal of catching a mouseand Jake the mouse is assigned the goal of getting somecheese, which is located in the kitchen.
The followingsimple paragraph, generated by Spokesman, describes eachof their goals and actions and is produced incrementally asthey are executed by the simulator:5 The simulator is the "speaker" in SAGE, since it is thecomponent that has goals to express information and themodel defined by the knowledge base is the intensional modelof that speaker.
The generator defines the possibilities forexpression and executes the speaker's goals.1037th International Generation Workshop ?
Kennebunkport, Maine ?
June 21-24, 1994Fluffy wants to catch a mouse.
He is looking for her.The mouse wants to get cheese.
She is leaving a mouse-house.She is going toward it.Fluffy is chasing the mouse.
He is going toward her.
He caughther.The mouse didn't get the cheese.Example paragraphFluffQ's WorldiiL IU I~'-ROOM ~-L~I K Ires CHEESEDFigure 6: Map of Fluffy's houseAs described in Section 2 above, there are severaldifferent kinds of information eeded to generate ventdescriptions.
Since the underlying program in this case isan ongoing simulation, the linear time is easily availablein the system.
Figure 7 shows a graph of the events asthey are created in the system, marked by their time.
Sincethe generation is a "play-by-play" narration, the event ime,reference time, and speaker time are usually the same, as isreflected in the use of the present ense in the text.
Anexception to this can be seen at the end of the aboveparagraph.
Since the actions underlying these sentences aremarked as completed by the simulator, the event time isbefore the speaker time, and thus the past tense is used.Another kind of information eeded for generation is theevent ype.
Note that in SAGE there is not a single notionof "event type", but rather two: one for the underlyingknowledge base and the other in Ravel, the text planner.This reflects the difference between:?
a concept's intrinsic type in the domain, which includeswhat objects it is related to (e.g.
its parents, what slotsit has), and how it functions in the underlying program(e.g.
what methods it has or inherits), and?
a concept's "expression type" in the text planner, whichreflects the fact that the speaker can alter an object'sexpression type through lexical choice (e.g.nominalization) and the choice of tense, aspect andadjuncts.Portions of these two types of classification hierarchiesare shown in Figure 8.
They are mediated by the mappingsin Ravel, which we describe below.Another kind ofinformation that is represented in the underlying programand used by the generator is the difference between a goal,which represents an agent's intentions, and a procedure,which represents an agent's actions.
In the exampleparagraph, this is reflected by the use of the matrix verb"want to" in the first and third sentences in the case wherethe "action" field of the goal event is "start", and by the useof the past tense in the sentence "He caught her", when theaction field is "succeed" and by the past and negation in thesentence "The mouse didn't get the cheese" when the actionfield is "fail".
Instances of goals and procedures are shownin Figure 9.
Each simulation event object has two parts:(1) the goal or event wrapper, which indicates thegoal/procedure status, the relationship of this event o otherevents (is a super or sub event), and the time stamp; and(2) the action instance, which is an instance of an actiontype from the domain model with the fields filled in,indicating the various actors and objects acted on and otherrelated information (note that this information is often butnot always expressed as verb arguments).\[PE FLUFFY-NEY NIL-NIL IIGE CATCH-GOAL 7-2\[GE GEI"-FOOD 6-2  I~1!
i l l  ii !iiiiiiiiiii ii!iiii!iii@ii!i!iiiiiiiiiiiii iil iiiiiiiiil iii iii iii iiiiiiiiii!iiii!iiiiiiiiilili{iiiiiiiiii iiiiiiiiiiiiiiiiii!iiiiiiiiiMiiiiiiiiiiiiiiiiiiiiiil?
~Figure 7: Graph of events in executed simulation1047th International Generation Workshop ?
Kermeburtkport, Maine ?
June 21-24, 1994Figure 8: Event types in the Domain Model and Text Planner#<GOAL-EVENT #x3B89F9>Class : #<STANDARD-CLASS GOAL-EVENT>Instance slotsACTION:  STARTACTION- INSTANCE:  #<CATCH-GOAL #x3B8699>SUBS: (#<PROCEDURE-EV~T #x3BgCBI>#<PROCEDURE-EVENT #x3BD431>)SUPER: (#<PROCEDURE-EV~2~T #x3B8741>)START-TIME:  0SUB-TICK-START:  5#<CATCH-GOAL #x3B8699>Class : #<STANDARD-CLASS CATCH-GOAL>Instance slotsWHAT: #<Agent: JAKE>WHO: #<Agent : FLUFFY>>#<PROCEDURE-EVENT #x3B9CBI>Class : #<STANDARD-CLASS PROCEDURE-EVENT>Instance slotsPROCEDURE - SUB - EV~IqTS :(#<SPROKET-EVEIqT #x3BA509>#<SPROKET-EV~T #x3BD049>)~D-T IME : 1ACTION- INSTANCE:  #<WATCH-FOR #x3B9BD9>SUPER: (#<GOAL-EVENT #x3B89F9>)START-TIME: 0SUB-TICK-START:  6#<WATCH-FOR #x3B9BD9>Class : #<STANDARD-CLASS WATCH-FOR>Instance slotsWHAT: #<Agent: JAY.E>WHO : #<Agent : FLUFFY>Figure 9: Instances of goals and procedures in thes imulatorthe action field is "start" and just uses the mapping for theaction instance in other cases.
The procedure event alsoadds nothing to the mapping, but just uses the mapping forthe instance class ("watch-for" in the example above).
(mapping-tables (find-class 'spr: :goal-event)class-to-text-structure:condit ion (eq (spr: :act ion self) 'spr: :start): real izat ion-c lass state-to-activity-class:arguments ( :agent (spr: :who (core-event-object self) ):event self:theme (core-event-object self):time (determine-tense self) ) ): condi t ion  (default):mapping- funct ion remap-with-same- sel f:arguments ( (core-event-object self) ) ) )obj ec t- to- tree - family( :argument-structure-c lass s ta te -w i th -propos i t iona l -complem~ent:arg~uuents (" (mumble: :verb "want" ) ) ) )(mapping-tables (find-class ' spr : :procedure-event)class-to-text-structure( :mapping-function rEmaap-with-same-self:arguments ( (core-event-object self) ) ) )Figure 10: Mapping tables for goals andprocedures in the text plannerMapping tables for the action types catch and look-for 6are shown below in Figure 11.
Each has two mappings,one which offers alternatives at the Text Structure level andThe connection from the underlying program to the textgenerator is made through the mapping tables.
Mappingtables provide an association between a concept in thedomain hierarchy and the set of linguistic resources that canbe used to express instances of that concept.
For example,the mapping tables shown in Figure 10 connect the goaland procedure events shown above to choices in thegenerator.
Note that the mapping is conditional, so thegoal event is mapped to a set of  alternatives for expressinga state with an activity argument at the level of  the TextStructure and to a tree family with the verb "want" when6 I realize there is a confusion here between "look-for" and"watch-for".
"Watch-for" is a child of "look-for" in thehierarchy (see Figure 8), and was probably introducedautomatically by the system as the name of a procedure of type"look-for".
While confusing, this exemplifies the kind ofnaming problems that come up in real systems, and since all ofthese examples are directly from running code, I hesitate towhite them out.
In fact, it is the relations among the conceptsand their fields that distinguish them, not their symbol names,and it is the mappings that determine what lexical items areused to express them (though some mappings use the conceptname as a default lexical item when none is specified.
)1057th International Generation Workshop ?
Kennebunkport, Maine ?
June 21-24, 1994GRRPH?R: TOP MONOLOGUEC: ST*r t  \] \[ .
.
.
.
~I IT:  "G0dilL-i~T ox4lt~fCOII) ~ "J .
.
.
.
.
.
.
.
.
.
.
I I .
.
.
.
.
.
.
.
.
\]~\]~mmT XHmt C: "mJats r rm-~t~r  \] ?
I .
*~tx  \ [v tsx :  "'CATCH-aO~.
"x4~7~"~ocmm~-~mT x4sm9 .
.
.
.
.
.
.
I t .
.
.
.
.
.
.
.qAR~qI~RT THEME C: TRAmSrFmW-EVENT ~MATR.
EVENT: "cGET-4~D: LEmrr ~L?AW--14OtmmmL?Figure 12: Text Structurea second which offers choices at the linguistic specificationlevel.
Specifically, each realization class that is mapped toat the CLASS-TO-TEXT-STRUCTURE-MAPPING offersalternatives of different semantic expression categories (forexample xpressing the transition "catch" as a process byusing the progressive aspect) and the opportunity to leaveout optional arguments (even though they are available inthe underlying structure, the speaker can choose to leavethem out).
The argument structure class inspects thechoices that have been made in semantic ategory andarguments and-selects the appropriate tree family.
Thespecific elementary tree will not be selected until the levelof the surface structure in Mumble-86, when syntacticcontext is available.
(mapping-tables (spr: :concept 'spr: :catch)class-to-text-structure( :realization-class transition-event-class:arguments ( :agent (spr: :who (core-event-object self) ):event (core-event-object self):theme (spr: :what (core-event-object self):time (determine-tense self) ) )object-to-tree-family( :argument-structure-class transitive-event:arguments (" (mumble: :verb "catch" ) ) ) )(mapping-tables (spr: :concept 'spr: :look-for)class-to-text-structure( :realization-class process-event-class:arguments (:agent (spr::who (core-event-object self)):event (core-event-object self):theme (spr::what (core-event-object self)):time (determine-tense self) ) )obj ect-to-tree- family( :argument-structure-class transitive-prepcomp:arguments (" (mumble: :verb "look" )?
(mumble: :prep "for" ))))Figure 11: Mapping tables CATCHThe choices described above result in the Text Structurerepresentation, as shown in Figure 12:5.
CONCLUSIONWe have seen that what are generally treated as a singlephenomenon stretch across multiple levels in SAGE:?
Event time and speech time are facts of the underlyingprogram, whereas reference time is part of the discoursemodel in the generator.?
Events have an intrinsic type in the model, but thespeaker can make explicit only a portion of the event orcompose it with other information and express it as adifferent event ype.
What subconstituents of an eventare available to be made explicit are defined by theprocedures of the underlying program (in this case, thesimulator), but the ways they can be made explicit areconstrained by the resources of language.?
whether an action is caused by an agent is part of thedefinition of the action, but whether that agent isexpressed is a choice by the speaker.In all of these cases, the information must be represented atboth the model evel and in the generator in order to capturethe full expressiveness of event descriptions in English.Using SAGE as an environment in which to model bothconceptual and linguistic information lets us experimentwith the best division of the information across itscomponents.ReferencesAbrett, G., Deutsch, S. and Downes-Martin, S. (1989),"AI Languages for Simulation", BBN Technical Report,BBN Systems and Technologies,  Cambridge,Massachusetts.Abrett, G., Burstein, M., & Deutsch, S. (1989), "TarhTactical Action Representation Language, anenvironment for building goal directed knowledge basedsimulation", BBN Technical Report No.
7062, BBNSystems and Technologies, Cambridge, Massachusetts.Bach, Emmon (1981) "On Time, Tense, and Aspect: AnEssay in English Metaphysics" in , Academic Press.Bateman, J., Kasper, R., Moore, L, & Whitney, R. (1989)"A General Organization of Knowledge for NaturalLanguage Processing: The Penman Upper Model"USC/Information Sciences Institute Technical Report.Brachman, Ronald, & James Schmolze (1985) AnOverview of the KL-ONE Knowledge RepresentationSystem.
Cognitive Science, 9:197-216, 1985.Dale, Robert (1990) "Generating Recipes: An Overview ofEpicure" in Dale, Mellish, & Zock (eds) CurrentResearch in Natural Language Generation, AcademicPress, London, p.229-255.1067th International Generation Workshop ?
Kennebunkport, Maine ?
June 21-24, 1994Davey, A.
(1974), Discourse Production, EdinburghUniversity Press.
Edinburgh.McDonald, David D. (1984) Description Directed Control.Computers and Mathematics 9(1) Reprinted in Grosz, etal.
(eds.)
Readings in Natural Language Processing,Morgan KaufmanPublishers, California, 1986, pp.519-538.McDonald, David D. (1993) "Natural LanguageGeneration" to appear in the Encyclopedia of Languageand Linguistic, Computational Linguistics Section, C.Mellish (ed), Pergamon Press.McDonald, David D. (1991) "On the Place of Words in theGeneration Process" in Natural Language Generation inArtificial Intelligence and Computational Linguistics.Eds.
Cecile Paris, William Swartout and William Mann,p.229-247.McKeown & Swartout (1988) "Language Generation andExplanation" in Z0ck & Sabeh (eds.
), Advances inNatural Language Generation, Pinter Publishers, London,p.l-51.Meteer, Marie W. (1992) Expressibility and the Problemof Efficient Text Planning.
Pinter Publishers, London,England.Meteer, Marie-W. (1992) "Portable Natural LanguageGeneration using SPOKESMAN" Proceedings of the 3rdConference on Applications in Natural LanguageProcessing, Trento, Italy, April, 4-6.Meteer, Marie W. (1991) "SPOKESMAN: Data Driven,Object Oriented Natural Language Generation",Proceedings of the Seventh IEEE Conference on ArtificialIntelligence Applications, Miami Beach, Florida,February 26-28.Meteer, Marie W. (1991) "Decision Making in Generation:A Multi-leveled Approach", IJCAI-91 Workshop onDecision Making throughout the Generation Process,Sydney, Australia, August, 1991.Meteer, Marie W., David D. McDonald, Scott Anderson,David Forster, Linda Gay, Alison Huettner, PenelopeSibun (1987) Mumble-86: Design and Implementation,UMass Technical Report 87-87, 173 pgs.Moens, Marc & Steedman, Mark (1988) "TemporalOntology and Temporal Reference" ComputationalLinguistics, Vol.14, No.
2, p.15-28.Nakhimovsky, Alexander (1988) "Aspect, Aspectual Class,and the Temporal Structure of Narrative" ComputationalLinguistics, Vol.14, No.
2, p.29-43.Neumann, Bernd (1989) "Natural Language Description ofTime-Varying Scenes" in Semantic Structures, D.
Waltz(Ed.)
Laurence Erlbaum Associates, New Jersey.
p. 167-206.Novak, Hans-Joachim (1987) "Strategies for generatingcoherent descriptions of object movements in streetscenes" in Natural Langauage Generation, G.
Kempen(Ed.)
Marinus Nijoff Press.
p. 117-132.Pustejovsky, James (1992) "The Syntax of EventStructure" Cognition, Vol.
41, 47-81.Webber, Bonnie (1988) "Tense as Discourse Anaphor"Computational Linguistics, Vol.14, No.
2, p.61-73.107
