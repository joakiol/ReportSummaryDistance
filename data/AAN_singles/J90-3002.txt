AN EDITOR FOR THE EXPLANATORY AND COMBINATORYDICTIONARY OF CONTEMPORARY FRENCH (DECFC)Michel  D~caryGuy LapalmeD~partement d'Informatique t Recherche Op~rationnelleUniversit~ de MontrealC.P.
6128, Succursale AMontreal, Quebec H3C 3J7CanadaThis paper presents a specialized editor for a highly structured dictionary.
The basic goal in building thateditor was to provide an adequate tool to help lexicologists produce a valid and coherent dictionary on thebasis of a linguistic theory.
If we want valuable lexicons and grammars to achieve complex natural languageprocessing, we must provide very powerful tools to help create and ensure the validity of such complexlinguistic databases.
Our most important ask in building the editor was to define a set of coherence rules thatcould be computationaily applied to ensure the validity of lexical entries.
A customized interface forbrowsing and editing was also designed and implemented.1 INTRODUCTION (WHAT IS THE DECFC?
)The Dictionnaire Explicatif et Combinatoire du Fran~aisContemporain (DECFC) is an attempt o provide a for-mally complete and adequate description of the Frenchlexicon.
It is based on the "Meaning-Text" heory (Mel~uk1973), which was the source of several projects in naturallanguage processing and especially in automatic transla-tion.
One of the most important principles of the DECFC isthat the greater part of the information eeded to describea natural anguage should be compiled within the diction-ary.
This is in contrast with the current practice of givingpreference togrammars.Far from being a modest and secondary appendix to agood grammar, the dictionary becomes the main (ineffect, only) basis of all grammars and, in general, of alllinguistic descriptions (Mel~uk 1973).As the dictionary isused as the basis of linguistic descrip-tion, it becomes a very complex database for different typesof information with many links and constraints.
A well-defined methodology is needed to build such a dictionary;adequate computerized tools are also needed, otherwise thetask becomes almost impossible.
Our editor is an attempt toprovide such a tool.1.1 OVERVIEW OF THE MEANING-TEXT THEORYTo really understand the goal of the DECFC, it is impor-tant to put it in the perspective of the Meaning-TextTheory (MTT) for which it is the foundation.
We nowbriefly sketch the MTT and show its implications for thedictionary.
A comprehensive presentation can be found inMel6uk (1973); a more computer science-oriented view isBoyer and Lapalme (1984), where it is used as the basis ofa system for generating paraphrases.
Mel~uk and Polgu6re(1987) describe the formal approach that underlies theconstruction of the DECFC.As stated by Mel~uk, the purpose of the MTT "consistsin establishing correspondences between any given mean-ing and (ideally) all synonymous texts having this meaning.
"The MTT is essentially descriptive and is not concernedwith procedures for moving from meanings to texts and viceversa.
In MTT, an utterance u is represented at sevenlevels:?
the Sem(antic)R(epresentation), which is a linguisticobject, an utterance in a pictorial anguage.
Its role is torepresent a class of synonymous sentences, weeding themout of all their syntactic information.
A semantic graphis a connected irected graph with labeled nodes andarcs.
The node labels are either predicates or names ofobjects.
The arc labels are integers; the arc labeled by ileads to the ith argument of the predicate.?
the D(eep-)Synt(actic)Representation is a tree whosenodes are labeled with "meaningful lexemes" of u.?
the S(urface-)Synt(actic)R(epresentation) is alsoa tree,but its nodes are labeled with all actual exemes of u.?
MTT also introduces the Deep and Surface representa-tions for morphology and phonology.Computational Linguistics Volume 16, Number 3, September 1990 145Michel D6cary and Guy Lapalme An Editor for the DECFCFor example, consider the following simple network,manychange1 -- sale y z 20which represents he sentence "The sales have increased by20 units."
This network is incomplete because there is noindication about the time of the action and about thedetermination of the sales (do we know exactly what saleswe are talking about?).
To transform a SemR to a DSyntR ,we have to cover all the nodes of the SemR with "networkschemata" found in the DECFC and merge the correspond-ing trees also given by the DECFC.Suppose now that our dictionary contains only of threedefinitions composed of the "network schema," the corre-sponding tree and the conditions under which the definitioncan apply to a network.NETWORK1 ) changex y z w2) many 1 ~ x3) saleTREE<inc rease_by , ve,a >X' WCONDITIONSfree(z)free(z)integer(w)>Ox' (plur) name(x' )<sale,name,<fem,n> > noneThe first rule indicates that if the y and z arguments arefree variables and that w is a positive integer, then thechange(x ,y ,z ,w)  predicate can be transformed to thetree corresponding to x'  inc rease_by  w. x '  correspondshere to the x node obtained by using the dictionary defini-tions.
In this case, the sa le  node gives the node( sa le ,name, ( fem,n) ) .
So applying rules 1), 2), and 3) weobtain the three following trees:<increase,ve,a>x' 20rule 1(x' =) <sale,name,<fem,n> > rule 3(x' =) < .
.
.
.
< _, plur> > rule 2Boyer and Lapalme (1984) describe a variant of the classi-cal unification algorithm for merging these trees (whereunderlines indicate free variables); we get the followingDSy nt R :<increase,ve,a> / i<sale,name,<fem,plur> > 20We could continue by applying similar rules to trans-form between the different levels of representation.
Thetransformation rules have to be very precise, and thus thedictionary becomes a complex database involving manyrelations between words.
A formal approach to the diction-ary building is needed because the transformations areessentially automatic and data-driven (in our case diction-ary-d.riven).
Building the DECFC is an enormous taskbecause it has to deal not only with the lexemes but alsowith their intricate relations.
The appendix gives the fullent:ry for the lexeme respect  where it can be appreciatedthat a tool to help in writing and checking entries andrelations would be very useful.However, the basic goal of the DECFC project is not tocreate a version of the dictionary that could be used by acomputer program (for text analysis or generation, forinstance) but rather to edit a printable version for humanreaders.
This means that the way information is presentedand\[ edited is not always as formal as could be expectedfrom the theory.
For instance, definitions of lexemes, whichare represented by semantic networks in the theory, arerepresented in the DECFC by French sentences derivedfrom the network by following a set of principles (but noformal rules).
Despite this, the DECFC is built applying asystematic methodology that could in principle be pro-grammed, the main difference being that the information isnot always as explicit as it could be.
A lexicologist could,for instance, retrieve the exact semantic network from aDECFC definition, but a computer could not.
Further-more, the DECFC includes ome redundancies that wouldnot be needed from a theoretical point of view.
Even if thereare a few differences between the DECFC and the formallexicon of the MTT, there is a clear and direct correspon-dence between the two.Our discussion emphasizes the validations the system hasto ensure and the way to implement them.
We first give adescription of the DECFC structure.
We then concentrateon specific problems of coherence and verification throughthe dictionary.
We finally discuss the way lexicographerscan interact with the system through aspecialized interfaceto the editor.
Mel6uk and Polgu6re (1987) give moredetails about he structure of this explanatory and combina-torial dictionary.
We only give here what is relevant for oursystem.2 CONTENTS OF THE DECFCEach, lexical entry of the DECFC gives two basic kinds ofinformation: semantic information, a systematic and rigor-146 Computational Linguistics Volume 16, Number 3, September 1990Michel D~cary and Guy Lapalme An Editor for the DECFCous description of the meanings of words and phrases, andcombinatorial information, a description of the way individ-ual words can combine syntactically and lexically.
TheDECFC is thus an "explanatory" and "combinatorial"dictionary.2.1 UNITS OF LEXICOGRAPHIC DESCRIPTIONThe basic unit of description is the lexeme.
An entrycorresponds to only one lexeme, and a lexeme is describedin only one entry.
A lexeme is a single word taken in onlyone precise meaning, which is a practice that differs fromthe traditional dictionaries.
Each exception of a word which,in a traditional dictionary, would be described within thesame article is given a separate description because achlexeme has its own semantics and combinatorics.But obviously, certain lexemes have similar meaningsand behavior; to take this into account, the DECFC usesthe concept vocable.
A vocable is the set of all lexemes thathave the same form (they are written the same way) andshare a nontrivial meaning component.
Within a vocable,each lexeme is numbered according to its meaning proxim-ity with the other lexemes.
The DECFC uses three levels ofnumbering, corresponding to three levels of semantic dis-tances.
Because lexemes have different meanings and dif-ferent syntax, distinguishing lexemes from each other isessential for the theory.
However, the fact that thosenumbers also represent a certain measure of meaningproximity is a redundancy introduced only for humanreaders of the dictionary, as this is a current practice ofmost printed dictionaries.
Nevertheless, there is a well-defined methodology for attributing those numbers.
~For example, the vocable RESPECT contains four lex-emes numbered as follows: 2respect I: attitude 6motionelle favorablee.g., le respect pour les parentsrespect II.
1: fait de tenir compte des prescriptionse.g., le respect des loisrespect II.2a: fait de tenir compte de quelque chose enne lui portant pas atteintee.g., le respect de la propri6t6 des parcsrespect II.2b: fait de ne pas porter atteinte ~ quelquechosee.g., le temps n'a pas de respect pourquiconque2.2 SEMANTIC INFORMATIONSemantic information contained in a DECFC entry opensthe possibility of building a global semantic network corre-sponding to the meaning of a sentence according to MTT.Lexemes can have semantic arguments, expressing thevarious actants involved in the meaning defined by thelexeme, and syntactic arguments realizing the semanticarguments in a text.
In the DECFC semantic argumentsare represented by capital etters, and syntactic argumentsare represented by numbers.
When the meaning is repre-sented by a network, arguments are explicitly representedin the network.
However, in the "text" version of defini-tions, we must first specify the number and name of seman-tic arguments and then use those arguments in the defini-tion.
The first part is called the definiendum and the secondthe definiens.
For example, the definition of respect I looksas follows:Respect de X envers Y =attitude bmotionelle favorable de X h l'bgard de Y .
.
.The expression to the left of the equality sign(definiendum) expresses the fact that respect I uses twosemantic actants.
Theoretically, it would have been enoughto express it as respect(X,Y) ;  however, as it is intended forhuman readers, the DECFC prefers to include the argu-ment's name into an expression closer to the normal syntaxof language.
The semantic informations must also take intoaccount he following:?
Definitions must never use ambiguous words: each lex-eme appearing in a definition is distinguished by itsnumber.
But during the writing of the dictionary, it is notalways possible to know these numbers before the corre-sponding lexemes have been defined.
So our editor willhave to deal with these "vague" references that later canbe made more precise when more information becomesavailable.?
Definitions must not create "vicious circles."
In otherwords, a systematic replacement of lexemes by theirdefinition, and this recursively at all levels, must neveruse the initial lexeme.
This implies that there are lex-emes that we will not be able to define; these lexemeswould then be identified as semantic primitives.
One ofthe goals of the work on the DECFC is to find theseprimitives.2.3 THE GOVERNMENT PATTERNThe government pattern describes the way semantic act-ants can be syntactically manifested in a correct sentence.It is a table where each column corresponds to a semanticactant and specifies for it the corresponding syntactic act-ant and the different ways it can be expressed.
Take forexample the lexeme respect I, whose government pattern isgiven in Figure 1.For example, the expression "X = 1" in column 1 meansthat the semantic actant referred to as "X" in the definitioncan be expressed syntactically by a dependency relationX=I  Y=2 Z=31.
de N 1. de N 1. pour N2.
Aposs 2. pour N3.
A 3. envers NFigure I Government Pattern for the Lexemerespect LComputational Linguistics Volume 16, Number 3, September 1990 147Michel l~cary and Guy Lapalme An Editor for the DECFCnumbered "1 ."
This relation can have the form de N, whichmeans de (of)  followed by a noun.
Row 2 of column 1expresses the fact that X can be expressed by a possessivepronoun (as in his respect).In the following sentence:Le peuple respecte l  pr6sident pour son courage,X = "le peuple,"Y = "le pr6sident,"Z = "le courage du pr6sident.
"Looking at the government pattern, we can deduce that it iscorrect o say:for the first actant:le respect du peuple .
.
.
.son respect .
.
.
,le respect populaire .
.
.
.for the second actant:son respect du prbsident,le respect pour le prbsident,le respect envers le prbsident,for the third actant:le respect du peuple envers le pr6sident pour soncourage.The government pattern is supplied with so-called restric-tions; these are constraints on the combination of formsoccurring in different columns.For respect I, the restrictions are1) CI.1 + C2.1C2.2 + C3.1 are impossibleC3 without C22) C1.3 + C2.1: is not desirable.The symbol "C" followed by a number efers to a columnin the government pattern; if followed by a dot and anumber, it refers to a row in that column.
The symbol "+"means "together with."
The first expression i  the examplecould thus be read "to have the first realization of the firstsyntactic actant together with the first realization of thesecond actant is impossible" (ie: the sentence *Le respectdu peuple du prbsident is not possible).
Other examplesare:*Le respect au peuple du pr6sident 3*Le respect du peuple pour le pr6sident pour son courageare impossible, while?Le respect populaire au pr6sidentis not desirable.2.4 LEXICAL COMBINATORICUsually, the meaning of a group of lexemes is the combina-tion of the meanings of the original exemes.
For example,the meaning of respect du peuple is the combination of themeanings of respect and peuple.
But it often happens thatthe resulting meaning is not this combination, for examplepomme de terre is not the combination of the meanings ofpomme and terre.The lexical combinatoric of the DECFC describes thesyntax and meaning of those idiomatic or semi-idiomaticexp:ressions containing the lexeme.
The authors of theDECFC have isolated about 50 elementary meanings (withspecific syntactic roles) the terms of which, taken eitheralone or in combination, can express the meanings of manysemi-idiomatic expressions.
These elementary meaningsand their legitimate combinations are called lexicalfunc-tions.
Lexical functions also include a set of "substitutionfunctions," which express emantic or syntactic relationsbetween lexemes.
Examples of lexical functions are:Magn, meaning very intense when applied to app~tit,defines the expressions \[appbtit \]de loup and \[appbtit \]gargantuesque.Oper 1 represents a semantically empty verb taking thefirst actant of the head lexeme as its grammatical sub-ject and the lexeme itself as its direct object.
WhenOper n is applied to respect it defines avoir \[du respect \]or bprouver \[ du respect\].Func 0 represents a semantically empty verb taking thelexeme as its subject.
When applied tofeu, for instance,it yields \[faire rage\].Sya represents synonyms of the lexeme.Anti represents antonyms of the lexeme.Each lexical function along with its results is expressedin the DECFC following a specific syntax.
Furthermore,there are semantic onstraints on the results, and our editorhas to enforce them.2.5 OTHER INFORMATIONThe dictionary also gives other morphologic information,such as syntactic ategory, gender, etc.
It also describes afew syntactic peculiarities, uch as the position of an adjec-tive around a noun.
And finally, a list of examples of use ofthe lexeme is given with other textual information (like theone 'usually found in traditional dictionaries but of notspecial interest for the formal part).
This information is notof any real use for the automatic processing of naturallanguage, but it helps the human reader.3 THE NEED FOR AN EDITORLe,dcographers working on the DECFC were faced veryearly with the problem of verifying the correctness oflexical entries.
Because of the very complex structure oflexical information and the many links between variouspieces of information, manual verification becomes nearlyimpossible as soon as the number of lexemes in the diction-ary reaches a few hundred.
In many cases, a small modifi-cation in the description of one lexeme may require check-ing many others to ensure its validity.
These verificationsare of two kinds: a syntax verification that ensures thateach piece of information respects the formal language of148 Computational Linguistics Volume 16, Number 3, September 1990Michel D6cary and Guy Lapalme An Editor for the DECFCrepresentation used in the DECFC, and a coherenceverification that makes sure that no piece of information isin contradiction with another and that some general rulesof construction (e.g., the avoiding of circular definition) arerespected.3.1 SYNTACTIC VERIFICATIONSyntactic verification is actually not a very difficult prob-lem as it only has to deal with local rules that bear norelation outside the point of verification.
These verificationsare also the easiest ones to do by computer.
A large part ofensuring the syntactic orrectness i done simply by theway the editing process is constrained within the system.The user often has to select keywords in a menu or fill apredefined template.
Less constrained sections of informa-tion are checked using an appropriate grammar of represen-tation for this kind of information.
Nevertheless, yntacticcorrectness is essential, as a formal and structured represen-tation of information is a prerequisite for defining andapplying more complex coherence rules.3.2 COHERENCE VERIFICATIONThe problem of ensuring coherence in the DECFC is a verycomplex one.
It is not limited to the simple problem ofconflict or contradiction between pairs of information, butit leads to a broader ange of difficulties.
Among them is thefact that much information in the dictionary is expressedwith words, the same words being described in the diction-ary.
This means that a complete verification of coherencewould have to ensure that each word in the dictionary isused in accordance with its own description.Furthermore, overall coherence is only verifiable whenthe whole dictionary is completed.
Before that point we arealways dealing with incomplete information.
For example,very often a word inside a definition is not described in thedictionary when it is first mentioned.
But the sole fact thata word is used somewhere in the dictionary already givesinformation about this word.
In this sense, to check coher-ence implies having to know what is correct and incorrectabout actual information and also an ability to constructdeductions about words that are not actually in the diction-ary but that will eventually be.Before building our intelligent editor for the DECFC, wefirst identified and formalized coherence rules and thendefined how they could be implemented.
We show only thestudy of two coherence problems: synonymic relations andcircularity of definitions.3.2.1 COHERENCE OF SYNONYMIC RELATIONSSynonymic relations are used to name different kinds oflexical relations where lexemes hare the same (or approxi-mately the same) meaning.
This includes the following (thesymbol used by the DECFC is shown inside parentheses):?
synonyms (SYN): same meaning and same syntacticcategory?
antonyms (ANTI): same meaning except hat the defini-tion of one of the two lexemes includes a negation?
syntactic derivates: same meaning but different syntac-tic categories such as: Nominalization (So), Verbaliza-tion (Vo), Adverbialization (Advo), Adjectivization(Adjo)?
Converses (CONV): same meaning and same syntacticcategory, but the order of syntactic actants with respectto semantic actants is different.Furthermore, the DECFC distinguishes four differentdegrees in which those relations can occur:?
Exact (=) :  same meaning?
Larger (>): the meaning of the first lexeme includes thesecond?
Smaller (<): the meaning of the first lexeme is includedin the second?
Intersection (<>): the meanings of the two lexemesintersectThe degree of synonymic relations is defined manuallyon the base of the comparison of two semantic networks.This information is thus redundant and could be computedautomatically if the networks were available.
It is mostlyintended for human readers.
However, as synonyms ex-press a direct relation between definitions of lexemes, theycan be used by our editor to check overall coherence ofdefinitions without having to rely much on the definitionsthemselves.Synonymic relations are subject to numerous rules ofcoherence.
Apart from the more general rule of coherencebetween relations themselves, which we will look at moreclosely here, some others were studied.
For instance:?
Synonymy and definition: depending on the kind ofrelation, a lexeme in a synonymic relation with anothermust, can, or must not appear in its definition.
Thisproblem is simpler when dealing with semantic net-works.
For example, the semantic network for a largersynonym of a word A must be included in the semanticnetwork of A (this is the definition of larger synonyms!
).When the definition is expressed in terms of a sentencerepresenting the network, the rules are a little trickier.For example, if a word A has exact or larger synonyms,one of the synonyms will have to appear in the definitionof A.
Exact synonyms will be preferred to larger ones;derivates will be preferred to converses, e tc .
.
.Synonymy and numbering: both numbering of lexemesand synonymous relations between lexemes are measuresof semantic proximity and thus must comply with someidentified rules.
For example, if two lexemes differ onlyby the third level of numbering, they must be synonyms.These rules are derived from the methodology used todefine numbering and the methodology used to identifysynonyms (both methodologies being based on an analy-sis of the semantic network).Synonymy and government: here is a relation betweensharing meaning and sharing government.
Among otherComputational Linguistics Volume 16, Number 3, September 1990 149Michel D6cary and Guy Lapalme An Editor for the DECFCthings, the number of syntactic actants of each lexememust be the same (exact synonyms have the same num-ber of semantic arguments).The reason that synonymic relations are so present in theproblem of verifying coherence is they express adirect andexplicit link between units of description i side the diction-ary.
Furthermore, these relations possess two importantproperties:?
each relation has an opposite;?
with some limitations, relations can be composed to formnew relations (i.e., If .4 is in relation with B and B is inrelation with C, in most cases there is a relation between.4 and C).The most important consequence of those properties ithat from a set of correct relations it is possible to validateany new relation given by the user or even to propose a listof new relations.
Of course, we have to define clearly whatis the opposite of each relation and how relations combineto form new ones.
For instance, if we have the relationsSYN>(huge) = big and ANTI(big) = small, those rules ofderivation will be able to verify that ,4NTI<(small) =huge.The problem is easy when we deal with exact synonyms,but it becomes fuzzy when meanings only intersect.
Forexample, if we haveSrN>(huge) = bigSYN>(gigantic) = big(i.e., the meaning of huge contains the meaning of big, andthe meaning of gigantic also contains the meaning of big),then what is the relation between ,4 and C?
Is it possiblethat no relation exists?
Is SYN>(huge) = gigantic moreprobable than SYN<>(huge) = gigantic?
To answer thosetypes of questions, each case (relations and degree) hasbeen studied and the results are shown in Figures 2 and 3.What appears clearly is that the type and degree of syn-onymic relations are independent in regard to the result ofrelation composition.
Figure 2 shows how types of relationare composed.
This always gives a unique result (except inthe case of CONV and CONV, where the result could beSYN in the trivial case where the second converse relationput,; the syntactic arguments back in place).Not all compositions give an existing relation as theirresult.
We have used the symbol Comp in that case (e.g., ifANTI (A)=B and CONV(B)=C, then the relation result-ing from the composition is simply ANTI(CONV(A))----C).These compound relations are not indicated in the diction-ary.But even then, it is important to consider them becausewhen composed with another elation they can eventuallysimplify and return a single relation.
For example, if wehave the following relations: CONV213(buy) = sell,So(sell) = sale, CONV213(sale) = purchase, no com-positions can be made according to Figure 2.
However,combining the three relat ions would lead toCONV213(So(Conv213)buy))) = purchase.
This larger ex-pression can be reduced to So(buy) = purchase if somerules of simplification are used (commutativity, elimina-tion, simplification of derivates, etc.).
A set of rules forsimplifying composition of synonymic relation was found,and some mathematical proofs of those rules are given byD6cary (1986).
Those rules when applied, for example, to alarge compound like:CONV213(Vo(So(,4NTI(CONV213(.4))))) = Dwould simply give,4NTI(,4) = Dwhe, nsimplified (If.4 is a noun).Simplifying these synonymic relations is important, be-cause it helps validate any new relations and it gives thesystem the capacity to generate hypotheses about semanticlinks between lexemes.
These hypotheses could then beused by lexicographs to build new entries or to correctexisting ones.
According to MTT, the meanings of lexemesare bailt upon the meaning of other lexemes, and there is aR2Syn Ant i  Conv ~ Vo Ao AdvoSyn Syn Anti Conv Vo Ao AdvoAnti  Anti Syn Comp omp Comp Comp CompConv Conv Comp Conv?
omp Comp Comp CompR1 So So Comp Comp a So So SoVo Vo Comp Vo o Vo Vo VoAo Ao Comp Comp o Ao Ao AoAdvo Advo Comp Comp dvo Advo Advo AdvoFigure 2 Composition fSynonymic Relations.150 Computational Linguistics Volume 16, Number 3, September 1990Michel D~cary and Guy Lapaime An Editor for the DECFCR2exact(=) smaller(<) larger(>) intersection(<>)= = < > ~>R1 < < < =,<,>,<>,* <,<>,*> > =,<,>,~ > >,<><> <,~ >,<~,*  =,<,>,~,*Figure 3 Composition of Degrees in Synonymic Relations.set of semantic primitives that cannot be defined.
TheDECFC lexicologists think that the surest way to find thoseprimitives is to start by defining complex words and work-ing their way down to simpler lexemes.
In doing so, lexicol-ogists try to use a clear methodology, but they also have torely on intuition.
Identification of definition as well as ofsynonymic relations relies on intuition at some point inprocess.
So, when a lexicologist enters a new synonymicrelation, he or she expresses by a different mean, the sameintuitions about equivalence and hierarchy of meaning as indefinitions.
The composition of synonymic relations done inour editor has to generate all possible consequences fromsuch choices.
For instance, if a lexeme uses a word in itsdefinition, our editor could find out that this word has to bea near synonym and, by that, generates a list of relationsthat would have to be true.
Lexicologists could then seeclearly the scope and consequences of their intuition, whichwould result eventually in a better structuring and integra-tion of those intuitions.As synonymic relations also have degrees, those must becombined as well.
Figure 3 expresses the way relationdegrees are combined.
This is clearly different from rela-tion composition, because in many cases more than oneresult is possible (the symbol * indicates the possibility ofhaving no relation).
It is important o note here that theinclusion of meanings does not follow the same rules as theinclusion of sets.
For example, if A contains B and Bcontains C, then A contains C if A,B,C are sets, but it is notalways true for synonymic relations.
This is due to the factthat a synonymic relation exists only if the meaning sharedis important enough (i.e., both definitions hare a nontrivial 4part).
Thus, it is possible that C is too different from A tolead to a synonymic relation.This shows that when near-synonymic relations are com-bined, we do not always get a single result but often a set ofpossibilities.
This is sufficient for the purpose of ensuringthe coherence of new information entered in the system.
Tobe more precise would involve comparing the definitions ofboth lexemes, considering the numbering of the lexemeswithin their vocable and using statistical data.We have now defined some properties of synonymicrelations that are helpful in checking if relations in a givenstate of the dictionary are coherent.
We still have to knowhow this verification takes place.If  we take all synonymic relations in the dictionary andrepresent them as two nodes linked by an arrow, we obtaina set of networks like the one in Figure 4.
From there, wecan check any new relations entered in the system byconsidering the network in which the new relation appears(this could imply the merging of two networks).
We look atrespectueux  I .
IJ Syn<respect  I ~ v6nerat ionrespecter  I cons id6rat ion  mepr i s  Iv6n6rer  m6pr i ser  I m6pr i sant  IFigure 4 Network of Synonymic Relations for respect I.Computational Linguistics Volume 16, Number 3, September 1990 151Michel D~cary and Guy Lapalme An Editor for the DECFCall the paths linking the two nodes in the new relations(even the paths going in the reverse direction of an arrow aswe can define an inverse for all relations).
We then combinethe relation on each of these paths using the rules wedefined.
The relation is coherent if no contradiction occursbetween the new relation and what is obtained on any of thepaths.
5Using this method, our editor ensures that an overallcoherence is maintained between those relations, which isclose to impossible to do manually.
Now we look at anotherkind of coherence verification: circular definition.3.2.2 AVOIDING CIRCULAR DEFINITIONSWhen the meaning of any word in a dictionary is expressedin terms of other words in the same language, circulardefinitions become unavoidable.
This means that if we takea definition and replace each word by its definition and soon, either the first word (the one we started up with) isfound somewhere in the process (we call this strong circu-larity) or we have to use a word that has a strong circulardefinition (we call this weak circularity).
This is due to thefact that the process of replacing words by their definition isinfinite but the lexicon is not.
In fact these conditions implythat each definition in the dictionary is circular.To avoid that situation we accept hat some words maynot have a definition.
They are the semantic primitives onwhich more complex meanings are built.
One of the objec-tives of the DECFC is to find those primitives.
The authorsof the theory believe that the identification of semanticprimitives can only be done by experimentation through thebuilding of an actual dictionary.
In respect o that goal, itbecomes essential that each case of circularity be detected.Once again, this task is nearly impossible to realize withoutthe help of an automatic tool.As we have seen, there are two kinds of circularity.
But,as weak circularity presupposes the existence of strongcircularity in the dictionary, only the latter must be lookedfor.
There are two ways to analyze a definition for thatpurpose: top-down or bottom-up.
The top-down approachconsists of trying to find the word being defined in its owndefinition, and then in the definition of the words used todefine it, and so on.
The bottom-up method tries to find allthe words that are not allowed and then to coznpare this listwith the definition.
For example, let's say we want to checkif the definition of eye is circular.
We first build a list of allthe words in whose definitions eye appears.
We then add tothis list by doing the same thing for all the words in the listand so on.
These two methods give the same result, but thelatter has the advantage of generating a list of forbiddenwords that can be of some use to the lexicographers whenwriting definitions.Unfortunately, these simple mechanisms are not enoughto get rid of circular definitions.
This is because circulardefinitions are not created when the word being defined isrepeated, but more precisely when its meaning is used todefine it.
This means that using an exact synonym in adefinition also causes a definition to be circular.
This is truefor exact synonyms, but we need some precisions for imper-fect ones.
Let's look at the four possible cases given that B isSYN(A) =, using B to define A is forbidden;SYN(A)>, using B to define A is perfectly acceptablebecause B has a more simple meaning than A (i.e.
then~teaning of A is B plus something else);SYN(A)<, using B to define A is forbidden because B ismore complex than A;SYN(A)<>, using B to define A is forbidden because Bhas a part of meaning that A does not have.
On theother hand, it would not create a circular definition butan incoherent one;Thus, to detect circular definitions, we have to take thesynonymic relations into account.
For example, in thetop-down method we check not only for the word beingdeft:ned but also for exact, larger, and intersection syn-onyms (and of course antonyms, converse and derivates).As a list of other relations can be deduced from a single setof synonymic relations, many "deductions" are only a listof po,;sibilities.
To ensure maximum validation, those rela-tions have to be taken into account so that the systemindicates potential circular definitions and explains whatare the assumptions.
But more important is that a circlecan be introduced in a definition simply by adding a newsynon, ymic relation, and this implies watching for circulardefinition each time a synonymic relation is added ormodified.C.ircular definition and synonymous relations are amongstthe major coherence problems of DECFC we have workedon.
Many others have been studied, and still more needs tobe diefined and analyzed.4 IMPLEMENTATIONA prototype of the DECFC editor has been implemented ona Xerox 1108 Lisp Machine.
We now only present he datastructure, the definition of algorithms for verification, andthe user interface.We implemented our editor on a Xerox Lisp Machinebecause it provides a multi-windowing environment thatenables different processes to be going on at the same timeon different parts of the screen.
For our editor, this isespecially important since the validity of information isalways related to other pieces of information elsewhere inthe dictionary and it is essential for the user to be able toview, on a single screen, different parts of the dictionary.This becomes even more important when the system re-ports a coherence rror: at this point, the user can see thetwo (or more) chunks of information that are in conflict andcan browse elsewhere in the dictionary to really understandwhat the problem is.
Furthermore, users often need tocompare different entries or to use older entries as a modelfor new ones.
For those reasons, we need much more thanthe u:mal single context view.152 Computational Linguistics Volume 16, Number 3, September 1990Michel D6cary and Guy Lapalme An Editor for the DECFCWe also defined a data structure that reflects the realstructure of the dictionary and eases the application ofcoherence rules to information.
The general mechanismused for syntactic verification is a BNF grammar inter-preter.
When analyzing a section of information, the sys-tem applies an appropriate BNF grammar to the data.
Insome cases, context-free rules are not powerful enough andspecific functions are used for verifying contextual rules offormation.The implementation of coherence rule verification posestwo problems.
First, the algorithms for our theoreticallydefined coherence rules, and second, the order of applica-tion of the verification rules.
In particular, we had to definewhat actions to take when a piece of information is added,modified, or deleted.
For example when a synonymic rela-tion is modified, many things would have to be checked (Isthe syntax ok?
Did the change remove some incoherencespresent in the system?
Is the relation incoherent?
Could therelation be incoherent if some hypothesis were true?
Doesthe relation introduce a vicious circle?).
A general flow ofcontrol for applying rules was designed but not imple-mented.Finally, we designed an interface that allows a useful andefficient use of the system.
The interface has the followingfacilities:?
Browsing is simple and flexible because it follows thestructure of the DECFC.?
Information is presented similarly as to what lexicogra-phers are used to seeing (in the actual printed version ofthe DECFC, for instance).?
The system shows different parts of the dictionary at thesame time with few or no constraints.?
The system communicates efficiently with the user bypresenting and explaining incoherences and errors, byguiding the user for correction, and by showing generalinformation about the actual state of the dictionary.?
Editing is customized for each section of information(e.g.
a definition is not edited like a lexical function).We defined a model of structured editing in which astructure editor is viewed as a set of specialized editors anda set of specialized selectors.
Each node in the structure ofthe dictionary is then assigned either an editor (when it isan editable information) or a selector (when it is seen as astructure itself).
For instance, as lexemes are simply lists ofLE$ REFERENCES DE AIDE i .
b  80NT:DEFIN{IION DE ASSISTANCE I I ,3ADMIRAT ION 1,ADMIRAT ION 2,DIGTIONNAIFIEVOCABLES MENIlONNESCFIEEFI UN NOUVEAU VOCABIETAT DU DICTIONNAIBEIMPRESSION DE VOCABLESTEFIMINEB LA SESSIONAumLKAIIUN UE X DEVANT Y POUR Z: ATTITUDE EMOTIONNELLEFAVORABLE DE X POUR Z OAUSEE PAR LE FAIT SUIVANT.X OROIT QUE LE$ AOTIONS~ L'ETAT OU LE8 PROPRIETE~ ZDE Y 80NT ABSOLUMENT EXTRAOROINAIRES,1/  DE N 1.
DE NA P08S 2.
POUR NA , DEVANT N, ENVER8 N1, POUR N~ EN MEME TEt4PO, IL NE POUVAIT 8E RETENIR D'EPROUVER UNE SECRETE ADM,IRATION POUR OE BITURBIE QUI ALLI~II LAFIERTE ET L'ADRESOEFigure 5 State of the Screen at One Point during the Editing Process.Computational Linguistics Volume 16, Number 3, September 1990 153Michel D~eary and Guy Lapalme An Editor for the DECFCfields of information, the specialized selector is a menu forselecting or deleting a field.
In the case of definition, it is atext editor based on a general template for definition withsome specific validation functions.In our model, a specialized editor is made out of fourelements: an interface (a text editor for instance), anoutput filter (a function that maps the internal representa-tion of the information into the editable form), an inputfilter (the opposite), and a validation filter (a function thatapplies coherence and syntactic rules).
This reflects the factthat complex structures are often made out of very differentsubstructures.
Each of those substructures must then beviewed and edited in a different way.The actual prototype contains an implementation f thisspecialized interface.
Browsing and editing through thewhole dictionary is possible, but only syntactic hecking ofinformation and some simple coherence rules checkinghave actually been implemented.
Figure 5 shows a copy ofthe screen at one point during the editing process.5 CONCLUSIONWe have described some problems and solutions related tothe building of a specialized ictionary editor.
Two taskswere identified:?
defining and implementing a set of validation proceduresto ensure an overall coherence and well-formednessthroughout the dictionary;?
defining and implementing a customized interface for anefficient interaction between lexicographs and the editor.We have implemented a prototype of the interface thatwill evolve as lexicographers express new or more specificneeds.
The team of lexicologists working on the DECFCshowed a great interest for the project and the prototype.We are presently discussing with them the possibility ofcreating a fully functional system for their use.Some of the validation rules and procedures imple-mented in our project were discussed in this paper and somenot, but these are few compared to the large quantity ofcoherence rules that are still to be found.
Building acomplete formal description of something as complex as anatural language has never been done thoroughly.
Webelieve that one of the main reasons for this is the lack ofefficient and powerful tools.
The DECFC editor is anattempt to provide such a tool for a specific linguistictheory.
In other words, our efforts were not directed towardthe creation of a linguistic database for natural anguageprocessing, but mainly toward providing efficient ools tohelp linguists achieve good and complete descriptions ofnatural languages.
Those descriptions could then be used asthe base of NLP  systems.ACKNOWLEDGMENTSWe would like to thank M. Igor Mel~uk for his continued interest in ourwork and his patience ingoing through previous versions ofthis report.
Wethank also Lise Cinq-Mars, who did some very useful programming.Finally, we are grateful to an anonymous referee who helped us very muchby pointing out important issues that were not so clearly addressed inapreviov:s version of this paper.REFERENCESAlterman R. 1985 A Dictionary Based on Concept Coherence.
ArtificialIntelligence 25: 153-186.Boyer, M. and Lapalme, G. 1985 Generating Paraphrases from Meaning-Text Semantic Networks.
Computational Intelligence 1(3-4): 103-117.D6cary, M. 1986 Un bditeur sp~cialis~ pour le dictionnaire explicatif etcombinatoire du Franeais contemporain.
Document de travail #181,Dept.
Informatique et recherche op6rationnelle, Universit6 de Mon-tr6al.Mel~iuk, I.
1973 Towards aLinguistic "Meaning <=> Text" Model.
In:Trends in Soviet Theoretical Linguistics.
F. Kiefer, ed., Reidel Publish-ing Co., Dordrecht, The Netherlands.Mel~!u'x, 3.and Polgu6re, A.
1987 A Formal Lexicon in the Meaning-TextTheory (or How to Do Lexica with Words).
Computational Linguistics13: 261-274.MeR!uk, I., A. Clas et al 1984-1988 Dictionnaire explicatifet combina-toire du Fran#ais contemporain, Vol.
11, Les Presses de l'Universit6 deMontr6al.NOTES1.
'rile finest level of numbering (letters) indicates a lexical transfer (likemetonymy) that is productive in the language.
The second level(numbers) hows alexical transfer that is not generally productive inthe language.
The first level (roman umbers) indicates any kind ofsemantic proximity.2.
We use examples in French because our work dealt with Frenchwords.
Of course, the same principles would apply to another lan-guage, and we do not dare invent equivalent examples inEnglish.3.
Sentences preceded by an asterisk are "impossible," while thosepreceded by a question mark are "not desirable."4.
They share apart hat is at least 50% of the whole definition.
This partis in the head position and is not a semantic primitive.5.
In doing this we used two assumptions (which we proved in D6cary\[1986\]):?
paths passing more than one time by the same arrow should notbe considered;?
if the network is coherent before the adding of the new relationno contradiction can appear between two paths but only betweena path and the new relation.154 Comp~tational Linguistics Volume 16, Number 3, September 1990
