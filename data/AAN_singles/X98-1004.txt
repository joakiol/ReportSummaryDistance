THE COMMON PATTERN SPECIFICATION LANGUAGEDouglas E. AppeltArtificial Intelligence CenterSRI International333 Ravenswood Ave, Menlo Park, CABoyan OnyshkevychR525Department of DefenseFt.
Meade MDABSTRACTThis paper describes the Common Pattern Specification Language (CPSL) that was developed during the TIPSTER program by acommittee of researchers from the TIPSTER research sites.
Many information extraction systems work by matching regularexpressions over the lexical features of input symbols.
CPSL was designed as a language for specifying such finite-state grammarsfor the purpose of specifying information extraction rules in a relatively system-independent way.
The adoption of such a commonlanguage would enable the creation of shareable r sources for the development of rule-based information extraction systems.1.
THE NEED FOR CPSLAs researchers have gained experience with informationextraction systems, there has been some convergence ofsystem architecture among those systems based on theknowledge ngineering approach of developing sets ofrules more or less by hand, targeted toward specific sub-jects.
Some rule-based systems have achieved very highperformance on such tasks as name identification.
Ide-ally, developers of information extraction systemsshould be able to take advantage of the considerableeffort that has gone into the development of such high-performance xtraction system components.
Unfortu-nately, this is usually impossible, in part because achsystem has a native formalism for rule specification, andthe translation of rules from one native formalism toanother is usually a slow, difficult, and error-prone pro-cess that ultimately discourages the sharing of systemcomponents orrule sets.Over the course of the TIPSTER program and otherinformation extraction efforts, many systems have con-verged on an architecture based on matching regularexpression patterns over the lexical features of words inthe input texts.
The Common Pattern Specification Lan-guage (CPSL) was designed to take advantage of thisconvergence in architecture by providing acommon for-malism in which finite-state patterns could be repre-sented.
This would then enable the development ofshareable libraries of finite-state patterns directedtoward specific extraction tasks, and hopefully removeone of the primary barriers to the fast development ofhigh-performance information extraction systems.Together with common lexicon standards and annota-tion standards, a developer can exploit previous domainor scenario customization efforts and make use of theinsights and the hard work of others in the extractioncommunity.
The CPSL was designed by a committeeconsisting of a number of researchers from the Govern-ment and all of the TIPSTER research sites involved inInformation Extraction that are represented in this vol-ume.2.
INTERPRETER ASSUMPTIONSA pattern language is intended to be interpreted.
Indeed,the interpreter is what gives the syntax of the languageits meaning.
Therefore, CPSL was designed with aloosely specified reference interpreter in mind.
It wasrealized that extraction systems may not work exactlylike the reference interpreter, and it was certainly not thegoal of the designers to stifle creativity in system design.However, it was hoped that any system that imple-mented at least the functionality of the reference inter-preter would, given appropriate l xicons, be able to usedpublished sharable resources.23The functionality assumed to be implemented by thereference interpreter is as follows:The interpreter implements cascaded finite-state trans-ducers.Each transducer accepts as input a sequence of annota-tions conforming to the Annotation object spec-ification of the TIPSTER Architecture\[Grishman, this volume\].
The fundamentaloperation performed by the interpreter is to testwhether the next annotation i  sequence has anattribute with a value specified by the grammarbeing interpreted.Each transducer produces as output a sequence ofannotations conforming to the Annotationobject specification of the TIPSTER Architec-ture.The interpreter maintains a "cursor" marking the cur-rent position in the text.
All possible rules arematched at each point.
One of the matchingrules is selected as a "best match" and isapplied.
The application of a rule results in thecreation of new annotations, and in moving the"cursor" to a new position.The interpreter does an initial tokenization and lexicallookup on the input.
Each lexical input item ismarked with a Word annotation, and attributesfrom the lexicon are associated with each anno-tation.The interpreter provides an interface to any externalfunctions to extend the functionality of the basicinterpreter.
Such functions hould be used spar-ingly and be carefully documented.
One exam-ple of a legitimate use would be to constructtables of information useful to subsequentcoreference r solution.To date, one interpreter has been developed that closelyconforms to the specifications of the reference inter-preter, namely the TextPro system, implemented byAppelt.
The object code, together with a fairly compre-hensive English lexicon and gazetteer, and a samplegrammar for doing name recognition on Wall StreetJournal texts is freely downloadable over the web at thefollowing URL:http://www.ai.sri.com/-appelt/TextPro/.3.
A DESCRIPT ION OF  CPSLA CPSL grammar consists of three parts: a macro defini-tion part, a declarations part, and a rule definition part.The declaration section allows the user to declare thename of the grammar, since most extraction systemswill employ multiple grammars to operate on the inputin sequential phases.
The grammar name is declaredwith the statementPhase: <grammar_name>The Input declaration follows the Phase declaration, andtells the interpreter which annotations are relevant forconsideration by this phase.
For example, aname recog-nizer will probably operate on Word annotations, whilea parser may operate on Word and NamedEntity annota-tions.
If there are multiple annotation types declared inthe Input declaration, the first annotation in the list isconsidered the "default" annotation type.
The impor-tance of the default annotation will be explained underthe discussion of quoted strings.
Any other annotationsare invisible to the interpreter, as well as any text thatmight be annotated exclusively by annotations ofignored types.
A typical Input declaration would be:Input: Word, NamedEntityFinally, the language supports an Options declaration,where the user can specify implementation-dependentinterpreter options to be used when interpreting thegrammar.3.1 The Rules SectionThe rules section is the core of the grammar.
It consistsof a sequence of rules, each with a name and an optionalpriority.
The general syntax of a rule definition isRule: <rule_name>Priority: <integer><rule_pattern part> --><rule_action_part>Rules have names primarily for the implementationdependent convenience of error printing and tracingmodules.
Priority values can be any integer, and indicateto the interpreter whether this rule is to take precedenceover other rules.
The implementation f priority in thereference interpreter is that the rule matching the mostannotations in the input stream is preferred over any rulematching fewer annotations, and if two rules match thesame number of annotations, the rule with the highestpriority is preferred.
If several rules match that have the24same priority, then the rule declared earlier in the file ispreferred.
Interpreters should adopt his priority seman-tics by default.
If another priority semantics is imple-mented, the grammar writer can select it in the Optionsdeclaration.The reference interpreter is assumed to maintain a "cur-sor" pointer marking its position in the chunk of inputcurrently being processed.
The interpreter matches eachrule pattern part against he sequence of annotations ofthe declared input type.
If no rules match, then the cur-sor is moved past one input annotation.
If one or morerule pattern parts match at the current cursor position,the interpreter selects the "best" match according to thepriority criteria discussed above, and executes the ruleaction part for that rule.
Finally, the interpreter movesthe cursor past the text matched by the main body partof the rule pattern part.
This process is repeated until thecursor is finally moved to the end of the current inputchunk.The Rule Pattern Part.The pattern part of the rules consists of a prefix pattern,a body pattern, and a postfix pattern.
The prefix andpostfix patterns are both optional, but the body is man-datory.
The syntax is as follows:< pre f ix_pat tern  > body_pat tern< post f ix_pat tern  >When pattern matching begins, the reference interpreterassumes that the initial cursor position is between theprefix pattern and the body pattern.
If the annotations tothe immediate l ft of the cursor match the prefix pattern,then the body pattern is matched.
If that match is suc-cessful, then the postfix pattern is matched.
If all threematches are successful, then the pattern is deemed a suc-cessful match.
Following success and execution of therule's action part, the cursor is moved to the point in thetext after which the body pattern matched, but before thepostfix pattern, if any.Each of the constituents in the above rule is defined thesame way.
They are grouped (and optionally labeled)sequences of pattern elements.
Labels are only useful inthe central body pattern, because the annotationsmatched in the body pattern can be operated on by theaction part of the rule.
When a new annotation is createdfrom a label in the body pattern, the new annotationreceives a span consisting of the first through last char-acters covered by the spans of the matched annotations.Groups of pattern elements are enclosed with parenthe-ses, and are optionally followed by a label.
There aretwo types of label expressions, indicated by ":" and "+:"characters, respectively.
When used in the pattern part ofa rule, the ":" label references the last-matched annota-tion within its scope.
The "+:" annotation, on the otherhand, refers to the entire set of annotations matchedwithin its scope.
Here is an example of labels used in apattern:( (~doug las" ) : f i r s tName ~appelt")+:who leNameIn this example, the label " f i rs tName" refers to theannotation spanning "doug las" ,  and the label"wholeName" refers to the set of annotations { "dou-g las"  "appelt"  }.Pattern elements are constraints on the type, selectedattributes and values of the next annotations in the inputstream.
The basic form of an attribute constraint isAnnotat ion_ type .
a t t r ibute  <re l><va lue>The annotation_type must be one of the types listed onthe Input declaration for this grammar.
The attributemust be one of the attributes defined for that annotationtype.
The <re l> element is one of the relations appro-priate for the attribute type.
Possible relations are equal(==), not equal (!=), greater than (>), less than (<),greater than or equal to (>=), less than or equal to (<=).The <value> element can be a constant of any typeknown to the interpreter, or it can refer to an annotationmatched in the pattern part.
The data types supported bythe reference interpreter a e integer, floating point num-ber, Boolean, string, symbol, a reference to anotherannotation, or sets of any of those types.
The referenceinterpreter does not treat symbols and strings differently,except hat if a symbol contains any non-alphanumericcharacters, it must be enclosed in string quotes in orderto be parsed correctly by the grammar compiler.A pattern element consists of constraints in the aboveform, enclosed in brace characters.
For example:{Word .N  == true,Word .number  == s ingular}would match an annotation that has a Boolean "N"attribute with value true, and a character "number"attribute whose value is "s ingu lar .
"The reference interpreter assumes that if an attribute isnot present on an annotation, it will be treated as though25it were a Boolean attribute with value false.
Reasonabletype coercion is done when comparing values of differ-ent types.An abbreviation allows an entire pattern element o bereplaced by a quoted string.
This is shorthand for con-straining the lemma attribute of the default input annota-tion for this grammar to be the specified string.
Forexample, if annotation type Word were declared to bethe default input type for the current grammar then thepattern element"howdy"would be exactly equivalent to typing{Word .
lemma == ~howdy"}.The reference interpreter assumes that the value of thelemma attribute is the character sequence that is used tolook the word up in the lexicon to obtain its other lexicalattributes.In addition to being sequenced in groups, pattern ele-ments can be combined with one of several regularexpression operators.
Possible operations includeAlternation: (argl I arg2 I "" I arg n)Iteration: (argl arg2 ... argn) * or (arglarg2 ... argn) +Optionality: (argl arg2 ... argn)?As you would expect, * matches zero or more occur-rences of its argument, + matches one or more occur-rences, and ?
matches zero or one occurrences.Finally, a pattern element can be a call to an externalfunction.
An external function call is simply the name ofthe function followed by parameters enclosed in squarebrackets.
The function must be defined to return a Bool-ean value, and it can take any number of arguments,which can be references to annotations and attributesbound by labels defined to the left of where the externalfunction call appears in the pattern.
If the functionreturns true, the pattern matching continues, and it failsif the function returns false.The Rule Action PartThe rule action part tells the interpreter what to do whenthe rule pattern part matches the input at the currentposition, and consists of a comma-separated list ofaction specifications.
The basic form of an action speci-fication isannotat ion /a t t r ibute<ass ignment_operator> <va lue>The annotation/attribute sp cification is an instruction tothe interpreter to build a new annotation.
The annota-tion/attribute specification has the following syntax::< labe l>.<annotat ion_ type>.<at t r ibute>The label must be one of the labels defined in the patternpart of the rule.
Also, the label must have been boundduring the pattern-matching phase.
For example, a labelin an optional element hat was not matched would beunbound, and generate a runtime error.
The annotationtype of the newly created annotation can be any annota-tion type.
The attribute is optional.
If present, it meansto assign the value on the right hand of the assignmentoperator to the indicated attribute on the newly createdannotation.
If the attribute is not present, then the onlylegal value on the right hand of the assignment operatoris "@", which tells the interpreter to create an annota-tion spanning the specified label, but which has noattributes.The binding and the type of the label determine the spanset of the newly created annotation.
If the label wasdefined with ":", the annotation has a single span, whichis the first through the last character of the annotationsin the group to which the label is attached.
If the labelwas defined with "+:", the new annotation has a set ofspans, where each span in the set is obtained from one ofthe annotations in the group to which the label isattached.When the reference interpreter is evaluating an assign-ment statement, it looks for an annotation of the typespecified on the left -hand side that has the exact spanspecified by the label.
If one exists, then that one is usedto complete the assignment operation.
Otherwise, a newannotation is created.
This functionality allows one toassign values to multiple attributes on a single annota-tion by using a sequence of assignment actions with thesame label and annotation type.CPSL includes two assignment operators: "=" and "+=".The former operator is the basic assignment operator.The latter operator assumes that the left hand operandrepresents a set, and the right hand element is added tothe set by the assignment.In addition to assignment s atements, the action part of arule can contain simple conditional expressions.
Theconditional expression can refer to the attributes of26annotations bound during the pattern match.
Simpleconjunction and disjunction operators (& and D are pro-vided for multiple conditional clauses, however, the lan-guage does not define a full Boolean expression syntaxwith parentheses and operator precedence.
The clausesare simply evaluated left to fight.
The THEN and ELSEclauses of the conditional consist of a Here is an exam-ple of a conditional expression:(IF : l .Word .
lemma != fa lseTHEN: rhs .DateT ime.
lemma = : l .Word.
lemma)Action specifications can also be calls to external func-tions, invoked as before, by the name of the function fol-lowed by a list of parameters enclosed in squarebrackets.
External functions can return a value or bedefined as void.
If the function returns a value, it canappear on the right-hand side of an assignment state-ment.
Otherwise, the external function call appears as anentire action specification.CPSL does not specify how the interface between theinterpreter and the external function should be imple-mented.
Each implementation is free to define its ownAPI.3.2 The Macro Definition SectionThe grammar writer can optionally define macros at thebeginning of a grammar definition file.
CPSL macrosare pure text substitution macros with the followingtwist: each macro consists of a pattern part and an actionpart, just like a CPSL rule.
The macro is invoked bywriting its name followed by an argument list delimitedby double angle brackets omewhere in the pattern partof a rule.
When the compiler encounters a macro call inthe pattern part of the rule, it binds the parameters in thecall to the variables in the macro definition prototype.The parameter bindings are substituted for occurrencesof the parameters in the macro's pattern part, and theexpanded pattern part is then inserted into the rule's pat-tern part in place of the macro call.
Then, parametersubstitution is performed on the macro's action part, andthe resulting action specification is then added to thebeginning of the rule's action part.
It is permitted for thepattern part of a macro definition to contain referencesto other macros, so this macro substitution process isiterated until no more macro substitutions are possible.Here is an example of a macro definition:Shor t_and_s tup id \ [X , lb l \ ]  ==>{Word.X == true, Word .ADJ  == false}:ibl.
I tem.X  = true, ;;An invocation of the above macro:Rule: foo(Shor t_and_s tup id<<N,myLabe l>>):myLabel:myLabel.
I tem.
type  = s tup idwould result in the following rule being compiled:Rule: foo({Word.N == true,Word .ADJ  == fa l se}) :myLabe l:myLabel.
I tem.N = true,:myLabel.
I tem.
type  = s tup idMacros can be used to automatically generate some verycomplicated rules, and when used judiciously can con-siderably improve their readability and comprehensibil-ity.4.
A FORMAL DESCRIPTION OF CPSLThe following is a BNF description of the common pattern specification language:<GRAMMAR> ::= <MACROS> <DECLARATIONS> <RULES>... .
Dec la ra t ions<DECLARATIONS> ::= <DECL> (<DECLARATIONS>)<DECL> ::= <DECL_TYPE> : <SYMBOL_L IST><DECL_TYPE> ::= Phase \[ Input  I Opt ions27<SYMBOL_L IST> ::= <SYMBOL> (, <SYMBOL_L IST>)- Macros<MACROS> ::= <MACRO> (<MACROS>)<MACRO> ::= <MACRO_HEADER> ==><PAT_PART> --> <ACT_PART> ;;<MACRO_HEADER> ::= <SYMBOL> [ <PARAMLIST> ]<PAT_PART> ::= any  characters  except  - -> and  ;;<ACT_PART> ::= any  characters  except  - -> and  ;;<PARAMLIST> ::= <SYMBOL> ( , <PARAM_L IST> )<MACRO_ INVOCATION> ::= <SYMBOL> << <ARG_L IST> >><ARG_L IST> ::= <ARG> (, <ARG_L IST>)<ARG> ::= any  characters  except  ; and  >>Ru les<RULES> ::= <RULE> ( <RULES> )<RULE> ::= <NAME DECL> (<PRIORITY_DECL>)  <BODY><NAME_DECL> ::= Ru le  : <SYMBOL><PRIORITY  DECL> ::= Pr io r i ty  : <NUMBER><BODY> ::= <CONSTRAINTS> - -> <ACTIONS><CONSTRAINTS> ::= ( < <CONSTRAINT_GROUP> > )<CONSTRAINT_GROUP>( < <CONSTRAINT_GROUP> > )<CONSTRAINT_GROUP> ::= <PATTERN_ELEMENTS>( I CONSTRAINT  GROUP)<PATTER~LELEMENTS> ::= <PATTER~EMEMENT>(<PATTER~LELEMENTS>)<PATTERN_ELEMENT> ::= <BASIC_PATTERN_ELEMENT> I~(~ <CONSTRAINT_GROUP> ~)" <KEENE_OP> <BINDING> I"(~ <CONSTRAINT_GROUP> ")" I~(~ CONSTRAINT_GROUP ~)" <KLEENE_OP> I~(~ <CONSTRAINT_GROUP> ~)" <BINDING>28<KLEENE_OP> ::= * I + I ?<BINDING> ::= <INDEX_OP> : <LABEL><INDEX_OP> ::= : I +:<LABEL> ::= <SYMBOL> I <NUMBER><BASIC_PATTER~ELEMENT> ::= { <C_EXPRESSION> } i<QUOTED_STRING> I<SYMBOL> i<FUNCTION_CALL><FUNCTION_CALL> ::= <SYMBOL> "[" <FARG_L IST> "]"<FARG_L IST> ::= ni l  I <FARG> ("," <FARG_L IST> )<FARG> ::= <VALUE> I (^) < INDEX_EXPRESSION><C_EXPRESSION> ::= <CONSTRAINT>( ", " <C_EXPRESSION> )<CONSTRAINT> ::= <ATTRSPEC> <TEST_OP> <VALUE> I<ANNOT_TYPE><ATTRSPEC> ::= <ANNOT_TYPE> <SYMBOL><ANNOT_TYPE> ::= <SYMBOL> I <ANY>TEST_OP ::= == I ~= I >= I <= I < I ><VALUE> ::= <NUMBER> I <QUOTED_STRING> I <SYMBOL>I t rue I fa lse<ACTIONS> ::= <ACTION_EXP)  ( , <ACTIONS>)<ACTION_EXP> ::= <IF_EXP> ] <S IMPLE_ACT ION><IF_EXP> ::= "(" IF <A C EXPRESSION>THEN <ACTIONS> ")" I"(" IF <A_C_EXPRESSION> THEN <ACTIONS>ELSE <ACTIONS> ")"<A_C_EXPRESSION> ::= <A_CONSTRAINT>(<BOOLEAI~OP> <A C EXPRESSION>)<BOOLEA~OP> ::= & I "J"<A_CONSTRANT> ::= <INDEX_EXPRESSION>29<TEST OP> <VALUE><SIMPLE_ACT ION> ::= <ASSIGNMENT> I<FUNCTION_CALL><ASSIGNMENT> ::= <INDEX_EXPRESS ION> = @ I< INDEX_EXPRESS ION> < ASS IGN_OP >(<VALUE> I < INDEX_EXPRESS ION> I<FUNCTION_CALL> )<ASS IGN_OP> : : - -  I +=<INDEX_EXPRESS ION> : := : < INDEX> <F IELD><F IELD> ::= <ANNOT_TYPE> ( <SYMBOL> )REFERENCES1.
Gfishman, Ralph et al The TIPSTER Architecture (this volume)30
