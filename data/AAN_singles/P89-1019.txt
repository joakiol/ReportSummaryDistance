A Calculus for Semantic Composition and ScopingFernando C.N.
PereiraArtificial Intelligence Center, SRI International333 R.avenswood Ave., Menlo Park, CA 94025, USAAbstractCertain restrictions on possible scopings of quan-tified noun phrases in natural language are usuallyexpressed in terms of formal constraints on bind-ing at a level of logical form.
Such reliance on theform rather than the content of semantic inter-pretations goes against the spirit of composition-ality.
I will show that those scoping restrictionsfollow from simple and fundamental facts aboutfunctional application and abstraction, and can beexpressed as constraints on the derivation of possi-ble meanings for sentences rather than constraintsof the alleged forms of those meanings.1 An  Obv ious  Const ra in t?Treatments ofquantifier scope in Montague gram-mar (Montague, 1973; Dowty et al, 1981; Cooper,1983), transformational grammar (Reinhart, 1983;May, 1985; Helm, 1982; Roberts, 1987) and com-putational linguistics (Hobbs and Shieber, 1987;Moran, 1988) have depended implicitly or explic-itly on a constraint on possible logical forms toexplain why examples 1 such as(1) * A woman who saw every man dislikedhimare ungrammatical, nd why in examples such as(2) Every man saw a friend of his(3) Every admirer of a picture of himself isvainthe every.., noun phrase must have wider scopethan the a... noun phrase if the pronoun in eachexample is assumed to be bound by its antecedent.What exactly counts as bound anaphora varies be-tween different accounts of the phenomena, butthe rough intuition is that semantically a boundpronoun plays the role of a variable bound by thelogical form (a quantifier) of its antecedent.
Ex-ample (1) above is then "explained" by noting thatl In  all the examples that follow, the pronoun and itsintended antecedent are italicized.
As usual, starred exam-pies are supposed to be ungrmt icaLits logical form would be something like3W.WOMAN(W)~(Vm.MAN(rn) ::~ SAW(W, rn))~DISLIKED(W, m)but this is "ill-formed" because variable m occursas an argument of DISLIKED outside the scope ofits binder Vm.
2 As for Examples (2) and (3),the argument is similar: wide scope for the log-ical form of the a... noun phrase would leave anoccurrence of the variable that the logical form ofevery.., binds outside the scope of this quantifier.For lack of an official name in the literature forthis constraint, I will call it here the free-variableconstraint.In accounts of scoping possibilities based onquantifier raising or storage (Cooper, 1983; van Ei-jck, 1985; May, 1985; Hobbs and Shieber, 1987),the free-variable constraint is enforced either bykeeping track of the set of free variables FREE(q)in each ralsable (storable) term q and when z EFREE(q) blocking the raising of q from any contextBz.t in which z is bound by some binder B, or bychecking after all applications of raising (unstor-ing) that no variable occurs outside the scope ofits binder.The argument above is often taken to be so ob-vions and uncontroversial that it warrants only aremark in passing, if any (Cooper, 1983; Rein-hart, 1983; Partee and Bach, 1984; May, 1985; vanRiernsdijk and Williams, 1986; Williams, 1986;Roberts, 1987), even though it depends on non-trivial assumptions on the role of logical form inlinguistic theory and semantics.First of all, and most immediately, there is therequirement for a logical-form level of representa-tion, either in the predicate-logic format exempli-fied above or in some tree format as is usual intransformational grammar (Helm, 1982; Cooper,1983; May, 1985; van Riemsdijk and Williams,1986; Williams, 1986; Roberts, 1987).2In fact, this is & perfectly good ope~t well-formed for~nmla and therefore the precise formulation of the constraintis more delicate than seems to be realized in the literature.152Second, and most relevant o Montague gram-mar and related approaches, the constraint is for-mulated in terms of restrictions on formal ob-jects (logical forms) which in turn are related tomeanings through a denotation relation.
How-ever, compositionaiity as it is commonly under-stood requires meanings of phrases to be func-tions of the meanings rather than the forms oftheir constituents.
This is a problem even in ac-counts based on quantifier storage (Cooper, 1983;van Eijck, 1985), which are precisely designed, asvan Eijck puts it, to "avoid all unnecessary ref-erence to properties of ... formulas" (van Eijck,1985, p. 214).
In fact, van gijck proposes an inter-eating modification of Cooper storage that avoidsCooper's reliance on forbidding vacuous abstrac-tion to block out cases in which a noun phrase isunstored while a noun phrase contained in it isstill in store.
However, this restriction does notdeal with the case I have been discussing.It is also interesting to observe that a wider classof examples of forbidden scopings would have tobe considered if raising out of relative clauses wereallowed, for example in(4) An author who John has read every bookby arrivedIn this example, if we did not assume the re-striction against raising from relative clauses, theevery.., noun phrase could in principle be as-signed widest scope, but this would be blocked bythe free-variable constraint as shown by the occur-rence of b free as an argument of BOOK-BY inVb.BOOK-BY(b, a) :~(~a.AUTHOR(a)&HAS-READ(JOHN, b)&ARRIVED(a))That is, the alleged constraint against raising fromrelatives, for which many counterexamples xist(Vanlehn, 1978), blocks some derivations in whichotherwise the free-variable constraint would be in-volved, specifically those associated to syntacticconfigurations of the form\[Np," ?
.N\[s-- ?
?
\[Np?- ?
.X, ?
?
.\] ?
?
.\] ?
?
?
\]where Xi is a pronoun or trace coindexed withNPI and NPj is a quantified noun phrase.
Sincesome of the most extensive Montague grammarfragments in the literature (Dowry et al, 1981;Cooper, 1983) do not cover the other major sourceof the problem, PP complements of noun phrases(replace S by PP in the configuration above), thequestion is effectively avoided in those treatments.153The main goal of this paper is to argue that thefree-variable constraint is actually a consequenceof basic semantic properties that hold in a seman-tic domain allowing functional application and ab-straction, and are thus independent ofa particular10gical-form representation.
As a corollary, I willalso show that the constraint is better expressedas a restriction on the derivations of meanings ofsentences from the meanings of their parts ratherthan a restriction on logical forms.
The result-ing system is related to the earlier system of con-ditional interpretation rules developed by Pollackand Pereira (1988), but avoids that system's useof formal conditions on the order of assumptiondischarge.2 Curry's Calculus of Func-t ionalityWork in combinatory logic and the A-calculus isconcerned with the elucidation of the basic notionof functionality: how to construct functions, andhow to apply functions to their arguments.
Thereis a very large body of results in this area, of whichI will need only a very small part.?
One of the simplest and most elegant accountsof functionality, originally introduced by Curryand Feys (1968) and further elaborated by otherauthors (Stenlund, 1972; Lambek, 1980; Howard,1980) involves the use of a logical calculus to de-scribe the types of valid functional objects.
In anatural deduction format (Prawitz, 1965), the cal-culns can be simply given by the two rules in Fig-ure 1.
The first rule states that the result of ap-plying a function from objects of type A to objectsof type B (a function of type A --* B) to an ob-ject of type A is an object of type B.
The secondrule states that if from an arbitrary object of typeA it is possible to construct an object of type B,then one has a function from objects of type Ato objects of type B.
In this rule and all that fol-low, the parenthesized formula t the top indicatesthe discharge of an assumption introduced in thederivation of the formula below it.
Precise defini-tions of assumption and assumption discharge aregiven below.The typing rules can be directly connected tothe use of the A-calculus to represent functions byrestating the rules as shown in Figure 2.
That is,if u has type A and v has type A ~ B then v(u)has type B, and if by assuming that z has typeA we can show that u (possibly containing z) hastype B, then the function represented by Ax.u hastype A ~ B.A A- - *B(A)BB A....*BFigure 1: Curry Rules(x : A)\[app\] :u :  A v :  A--* B \[abs\]: u :  Bv(u) : B Az,u : A - -  BFigure 2: Curry Rules for Type CheckingTo understand what inferences are possible withrules such as the ones in Figure 2, we need a precisenotion of derivation, which is here adapted fromthe one given by Prawitz (1965).
A derivationis a tree with each node n labeled by a formula?
(n) (the conclusion of the node) and by a setr(n) of formulas giving the =ss.mpiions of $(n).In addition, a derivation D satisfies the followingconditions:i.
For each leaf node n E D, either ~b(n) is anaxiom, which in our case is a formula giving thetype and interpretation of a lexical item, andthen r(n) is empty, or @(n) is an assumption,in which case r(.)
= {, ( .
)}ii.
Each nonleaf node n corresponds either to anapplication of lapp\], in which case it has twodaughters m and m' with ?
(m) - u : A,, (m' )  - - .
: A - .
B .
?
( , )  = v(u) : B andr ( . )
= r(m) u r(m'),  or to an application of\[abs\], in which case n has a single daughter m,and , (m)  =- u : B.
~( , )  = Ax.u : A - .
B.  andr ( . )
= rcm) -  {~: A}If n is the root node of a derivation D, we say thatD is a derivation of ?
(n) from the assumptionsr(~).Notice that condition (ii) above allows emptyabstraction, that is, the application of rule labs\]to some formula u : B even if z : A is notone of the assumptions of u : B.
This is neces-sary for the Curry calculus, which describes alltyped A-terms, including those with vacuous ab-straction, such as the polymorphic K combinatorAz.Ay.z : A ~ (B ~ A).
However, in the presentwork, every abstraction needs to correspond toan actual functional dependency of the interpre-tation of a phrase on the interpretation of one of154its constituents.
Condition (ii) can be easily modi-fied to block vacuous abstraction by requiring thatz : A e r(m) for the application of the labs\] ruleto a derivation node m. 3The definition of derivation above can be gener-alized to arbitrary rules with n premises and oneconclusion by defining a rule of inference as a n+l-place relation on pairs of formulas and assumptionsets.
For example, elements of the \[app\] relationwould have the general form ((u : A, r l ) ,  (v : AB, r~), {v(u) : B, r, v r~)), while elements of the\[abs\] rule without vacuous abstraction would havethe form ({u: B, r), (Ax.u : A - -  B, r - {x: A}))whenever z : A E r .
This definition should bekept in mind when reading the derived rules ofinference presented informally in the rest of thepaper.3 Semantic Combinat ionsand the Curry  CalculusIn one approach to the definition of allowable se-mantic combinations, the possible meanings of aphrase are exactly those whose type can be de-rived by the rules of a semantic calculus from ax-ioms giving the types of the lexical items in thephrase.
However, this is far too liberal in that3Without this restriction to the abstraction rule, thetypes derivable using the rules in Figure 2 are exactly theconsequences of the three axioms A -+ A, A --* (B --~ A)and (A -* (S -.
C)) -* ((A -* S) -* (A -* C)), w~chare the polymorphic types of the three combinators I, Kand S that generate all the dosed typed A-calculus terms.Furthermore, if we interpret -* as implication, these theo-rems are exactly those of the pure implicational fragmentof intuitlonlstic propositional logic (Curry and Feys, 1968;Stenlund, 1972; Anderson and Be\]nap, 1975).
In contrast,with the restriction we have the weaker system of pure rel-evant implication R -  (Prawitz, 1965; Anderson and Bel-nap, 1975).the possible meanings of English phrases do notdepend only on the types involved but also onthe syntactic structure of the phrases.
A possibleway out is to encode the relevant syntactic on-straints in a more elaborate and restrictive systemof types and rules of inference.
The prime exam-ple of a more constrained system is the Lambekcalculus (Lambek, 1958) and its more recent elab-orations within categorial grammar and semantics(van Benthem, 1986a; van Benthem, 1986b; Hen-driks, 1987; Moortgat, 1988).
In particular, Hen-driks (1987) proposes a system for quantifier ais-ing, which however is too restrictive in its coverageto account for the phenomena of interest here.Instead of trying to construct a type systemand type rules such that free application of therules starting from appropriate l xical axioms willgenerate all and only the possible meanings of aphrase, I will instead take a more conservativeroute related to Montague grammar and early ver-sions of GPSG (Gazdar, 1982) and use syntacticanalyses to control semantic derivations.First, a set of derived rules will be used in addi-tion to the basic rules of application and abstrac-tion.
Semantically, the derived rules will add nonew inferences, ince they will merely codify infer-ences already allowed by the basic rules of the cal-culus of functionality.
However, they provide thesemantic ounterparts of certain syntactic rules.Second, the use of some semantic rules mustbe l icensed by a particular syntactic rule and thepremises in the antecedent of the semantic rulemust correspond in a rule-given way to the mean-ings of the constituents combined by the syntacticrule.
As a simple example using a context-freesyntax, the syntactic rule S - ,  NP VP might li-cense the function application rule \[app\] with Athe type of the meaning of the NP and A --* Bthe type of the meaning of the VP.Third, the domain of types will be enriched witha few new type constructors, in addition to thefunction type constructor --*.
From a purely se-mantic point of view, these type constructors addno new types, but allow a convenient encoding ofrule applicability constraints motivated by syntac-tic considerations.
This enrichment of the formaluniverse of types for syntactic purposes is famil-iar from Montague grammar (Montague, 1973),where it is used to distinguish different syntac-tic realizations of the same semantic type, andfrom categorial grammar (Lambek, 1958; Steed-man, 1987), where it is used to capture syntacticword-order constraints.Together, the above refinements allow the syn-x : trace)\[trace+\].
z -  t race  \[trace-\]" r:  I;z :e  ,~z.r : e --* I;Figure 3: Rules for Relative Clauses\[pron+\] :(X : pron)Z : pron \ [pron- \ ]  : s : A y : Bz :e  (Ax.s)(y)  : AFigure 4: Bound Anaphora Rulestax of language to restrict what potential semanticcombinations are actually realized.
Any deriva-tions will be sound with respect to \[app\] and \[abs\],but many derivations allowed by these rules willbe blocked.4 Der ived  Ru lesIn the rules below, we will use the two basictypes ?
for individuals and t for propositions,the function type constructor --* associating tothe right, the formal type constructor qua,at(q),where q is a quantifier, that is, a value of type(e --~ t)  -* t ,  and the two formal types pron forpronoun assumptions and t race  for traces in rel-ative clauses.
For simplicity in examples, I willadopt a "reverse Curried" notation for the mean-ings of verbs, prepositions and relational nouns.For example, the meaning of the verb ~o love willbe LOVe.
: ?
~ ?
~ t ,  with z the lover and y theloved one in LOVE(y)(z).
The assumptions corre-sponding to lexical items in a derivation will beappropriately abeled.4.1 T race  In t roduct ion  and  Ab-s t rac t ionThe two derived rules in Figure 3 deal with tracesand the meaning of relative clauses.
Rule \[trace+\]is licensed by the the occurrence of a trace in thesyntax, and rule \[trace-\] by the construction of arelative clause from a sentence containing a trace.Clearly, if n : ?
--* t can be derived from some as-sumptions using these rules, then it can be derivedusing rule labs\] instead.For an example of use of \[trace+\] and \[trace-\],assume that the meaning of relative pronoun thatis THAT ~ Ar .An .Az .n (x )&r (z )  : (e --* t )  --* (e--*155\[trace\] y : 1;raceI\ [ t race+\ ]  Z/" e \ [ lex ica l \ ]  OWN : ?
- -*  e ~ 1:l app \ ]  OWN(y) : e - -*  1; \ [ \ [ex ica \ [ \ ]  JOHN : e\[app\] OWN(y) ( JOHN) :  ~,/\ [trace--\]  ) ty .OWN(y)( JOHS)  I e --+ l; \[\[exical\] THAT:  (e --+ 1;) --+ (e --+ 1;) ---+ (e ---+ t )\[app\] An.,,\z.n(z)~OWN(z)(JOHN): (e -'+ 1;) -'* (e ---* I;) \[lexlcal\] CAR:  e ~ 1;\[app\] ~kz.CAR(Z)~OWN(z)( JOHN) " e -'~ 1;Figure 5: Using Derived Rulesz) ~ (e --* t).
Given appropriate syntactic licens-ing, Figure 5 shows the derivation of a meaningfor car tha~ John o~#ns.
Each nonleaf node in thederivation is labeled with the rule that was usedto derive it, and leaf nodes are labeled accord-ing to their origin (lexical entries for words in thephrase or syntactic traces).
The assumptions ateach node are not given explicitly, but can be eas-ily computed by looking in the subtree rooted atthe node for undischarged assumptions.4 .2 Bound Anaphora  In t roduct ionand  E l iminat ionAnother pair of rules, shown in Figure 4, is re-sponsible for introducing a pronoun and resolvingit as bound anaphora.
The pronoun resolution rule\[pron-\] applies only when B is t race  or quant(q)for some quantifier q.
Furthermore, the premisey : B does not belong to an immediate constituentof the phrase licensing the rule, but rather to someundischarged assumption of s : A, which will re-main undischarged.These rules deal only with the constructionof the meaning of phrases containing boundanaphora.
In a more detailed granunar, the li-censing of both rules would be further restrictedby linguistic constraints on coreference - - for in-stance, those usually associated with c-command(Reinhart, 1983), which seem to need access tosyntactic information (Williams, 1986).
In partic-ular, the rules as given do not by themselves en-force any constraints on the possible antecedentsof reflexives.The soundness of the rules can be seen by notingthat the schematic derivation(z : pron)z .
'es :A  y :B: Ato a special case of the schematic correspondsderivation2 : e)s :Ay :e  Az.s : e ---.
A(Ax.s)Cy)  : AThe example derivation in Figure 7, which will beexplianed in more detail later, shows the applica-tion of the anaphora rules in deriving an interpre-tation for example sentence (2).156\[quant+\] : q: (e --* 10 --* t z :  quant(q)~g:e\[quant--\] :(=:  quant (~) )s : tq(A=.s) : tFigure 6: Quantifier Rules4 .3  Quant i f ie r  Ra is ingThe rules discussed earlier provide some of theauxiliary machinery required to illustrate the free-variable constraint.
However, the main burden ofenforcing the constraint falls on the rules responsi-ble for quantifier raising, and therefore I will coverin somewhat greater detail the derivation of thoserules from the basic rules of functionality.I will follow here the standard view (Montague,1973; Barwise and Cooper, 1981) that natural-language determiners have meanings of type (e --*t) --* (e --* 10 ---+ ?.
For example, the mean-ing of every might be Ar.As.Vz.r(z) ~ s(z), andthe meaning of the noun phrase every man will beAs.Vz.MAN(z) =~ s(z).
To interpret the combina-tion of a quantified noun phrase with the phrasecontaining it that forms its scope, we apply themeaning of the noun phrase to a property s de-rived from the meaning of the scope.
The pur-pose of devices uch as quantifying-in Montaguegrammar, Cooper storage or quantifier aising intransformational grammar is to determine a scopefor each noun phrase in a sentence.
From a se-mantic point of view, the combination of a nounphrase with its scope, most directly expressed byMontague's quantifying-in rules, 4 corresponds tothe following schematic derivation in the basic cal-culus (rules lapp\] and labs\] only):(=:  e)#:'GAz.s : e ---, l; q : (e ---, l:) ---, tq( t=.s )  : ~ ?where the assumption z : ?
is introduced in thederivation at a position corresponding to the oc-currence of the noun phrase with meaning q inthe sentence.
In Montague grammar, this corre-spondence is enforced by using a notion of syn-tactic combination that does not respect the syn-4I!1 gmaered, quantifyilMg-in has to apply not only toproposition-type scopes but ahto to property-type scopes(meAnings of common-noun phrases and verb-phrases).
Ex-tending the argument that foUows to those cases offers nodifficulties.157tactic structure of sentences with quantified nounphrases.
Cooper storage was in part developedto cure this deficiency, and the derived rules pre-sented below address the same problem.Now, the free-variable constraint is involved insituations in which the quantifier q itself dependson assumptions that must be discharged.
The rel-evant incomplete schematic derivation (again interms of \[app\] and labs\] only) is(a)  (z : e) (b)  Y:  ?s : t q : (e  --,  t )  --+ t (5)~x.s  : e-.-+ t ?q(Az .s )  : t?Given that the assumption y : ?
has not been dis-charged in the derivation of q : (e ---, ~) ---, t,that is, y : ?
is an undischarged assumption ofq : (e ---, t) -* t, the question is how to com-plete the whole derivation.
If the assumption weredischarged before q had been combined with itsscope, the result would be the semantic objectAy.q : ?
--, (e --, t) ---, t ,  which is of the wrongtype to be combined by lapp\] with the scope Az.s.Therefore, there is no choice but to discharge (b)after q is combined with its scope.
Put in an-other way, q cannot be raised outside the scopeof abstraction for the variable y occurring free inq," which is exactly what is going on in Example(4) ('An author who John has read every book byarrived').
A correct schematic derivation is then(a)  (= : 0): (b) (V: 0)8: tAz., : ?
- .
t ~ : (e ~ t )  ----+ tq(~z .s )  : ?u:AAy.u : e--+ AIn the schematic derivations above, nothing en-sures the association between the syntactic posi-EVERY MANEVERY(MAN) (a) ~n: quant(EVERY(MAN)) (b) h :pron\[quant-I-\] rrt : e FRIEND-OF \[pron-I-\] h : eSAw(1)( )I\[quant--\] A(FRIEND-OF(h))(Af.SAW(f)(m))\[pron--\] A(FRIEND-OF (Ira)) (~f.SAW (f)(rn))I \[quant--\] EVERY(MAN)(Am.A (FRIEND-OF(m))(Af.SAW (f)(m)))Most interpretation types and the inference rule label on uses of \[app\] have been omitted for simplicity.Figure 7: Derivation Involving Anaphora nd Quantificationtion of the quantified noun phrase and the intro-duction of assumption (a).
To do this, we needthe the derived rules in Figure 6.
Rule \[qusnt-t-\]is licensed by a quantified noun phrase.
Rule\[qusnt-\] is not keyed to any particular syntacticconstruction, but instead may be applied when-ever its premises are satisfied.
It is clear that anyuse of \[quant+\] and \[quant--\] in a derivationz :es : tq(Ax.s) :can be justified by translating it into an instanceof the schematic derivation (5).The situation relevant o the free-variable con-straint arises when q in \[quant+\] depends on as-sumptions.
It is straightforward to see that the158constraint on a sound derivation according to thebasic rules discussed earlier in this section turnsnow into the constraint that an assumption of theform z : quant(q) must be discharged before anyof the assumptions on which q depends.
Thus, thefree-variable constraint is reduced to a constrainton derivations imposed by the basic theory of func-tionality, dispensing with a logical-form represen-tation of the constraint.
Figure 7 shows a deriva-tion for the only possible scoping of sentence (2)when erery man is selected as the antecedent ofhis.
To allow for the selected coreference, the pro-noun assumption must be discharged before thequantifier assumption (a) for every man.
Further-more, the constraint on dependent assumptionsrequires that the quantifier assumption (c) for afriend of his be discharged before the pronoun as-sumption (b) on which it depends.
It then followsthat assumption (c) will be discharged before as-sumption (a), forcing wide scope for every man.5 DiscussionThe approach to semantic interpretation outlinedabove avoids the need for manipulations of log-ical forms in deriving the possible meanings ofquantified sentences.
It also avoids the need forsuch devices as distinguished variables (Gazdar,1982; Cooper, 1983) to deal with trace abstrac-tion.
Instead, specialized versions of the basic ruleof functional abstraction are used.
To my knowl-edge, the only other approaches to these problemsthat do not depend on formal operations on log-ical forms are those based on specialized logicsof type change, usually restrictions of the Curryor Lambek systems (van Benthem, 1986a; Hen-driks, 1987; Moortgat, 1988).
In those accounts,a phrase P with meaning p of type T is consid-ered to have also alternative meaning t?
of typeT', with the corresponding combination possibil-ities, if p' : T' follows from p : T in the chosenlogic.
The central problem in this approach is todesign a calculus that will cover all the actual se-mantic alternatives (for instance, all the possiblequantifier scopings) without introducing spuriousinterpretations.
For quantifier aising, the systemof Hendriks (1987) seems the most promising sofar, but it is at present too restrictive to supportraising from noun-phrase complements.An important question I have finessed here isthat of the compositionality of the proposed se-mantic calculus.
It is clear that the application ofsemantic rules is governed only by the existence ofappropriate syntactic licensing and by the avail-ability of premises of the appropriate types.
Inother words, no rule is sensitive to the form of anyof the meanings appearing in its premises.
How-ever, there may be some doubt as to the statusof the basic abstraction rule and those derivedfrom it.
After all, the use of A-abstraction in theconsequent of those rules seems to imply the con-straint that the abstracted object should formallybe a variable.
However, this is only superficiallythe case.
I have used the formal operation of A-abstraction to represent functional abstraction inthis paper, but functional abstraction itself is in-dependent of its formal representation in the A-calculus.
This can be shown either by using othernotations for functions and abstraction, such asthat of de Bruijn's (Barendregt, 1984; Huet, 1986),or by expressing the semantic derivation rules in A-Prolog (Miller and Nadathur, 1986) following ex-isting presentations of natural deduction systems(Felty and Miller, 1988).AcknowledgmentsThis research was supported by a contract withthe Nippon Telephone and Telegraph Corp. andby a gift from the Systems Development Founda-tion as part of a coordinated research effort withthe Center for the Study of Language and Informa-tion, Stanford University.
I thank Mary Dalrym-pie and Stuart Shieber for their helpful discussionsregarding this work.BibliographyAlan Ross Anderson and Nuel D. Belnap, Jr.1975.
Entailment: the Logic of Relevanceand Necessity, Volume L Princeton UniversityPress, Princeton, New Jersey.Hank P. Barendregt.
1984.
The Lambda Calcu-lus: its Syntaz and Semantics.
North-Holland,Amsterdam, Holland..Ion Barwise and Robin Cooper.
1981.
General-ized quantifiers and natural anguage.
Linguis-tics and Philosophy, 4:159-219.Robin Cooper.
1983.
Quantification and Syntac-tic Theory.
D. Reidel, Dordrecht, Netherlands.Haskell B. Curry and Robert Feys.
1968.
Com-binatory Logic, Volume L Studies in Logicand the Foundations of Mathematics.
North-Holland, Amsterdam, Holland.
Second print-ing.David R. Dowty, Robert E. Wall, and Stanley Pe-ters.
1981.
Introduction to Montague Seman-tics, Volume 11 of Synthese Language Library.D.
Reidel, Dordrecht, Holland.Amy Felty and Dale Miller.
1988.
Specifying theo-rem provers in a higher-order logic programminglanguage.
Technical Report MS-CIS-88-12, De-partment of Computer and Information Science,University of Pennsylvania, Philadelphia, Penn-sylvania.Gerald Gazdar.
1982.
Phrase structure grammar.In P. Jacobson and G.K. Pullum, editors, TheNature of Syntactic Representation, pages 131-186.
D. Reidel, Dordrecht, Holland.Irene R. Heim.
1982.
The Semantics of Defi-nite and Indefinite Noun Phrases.
Ph.D. thesis,Department of Linguistics, University of Mas-sachusetts, Amherst, Massachusetts (Septem-ber).Herman Hendriks.
1987.
Type change in seman-tics: the scope of quantification and coordina-tion.
In Ewan Klein and Johan van Benthem,159editors, Catego.mes, Polymorphism and Unifica-tion, pages 95-120.
Centre for Cognitive Sci-ence, University of Edinburgh, Edinburgh, Scot-land.Jerry R. Hobbs and Stuart M. Shieber.
1987.An algorithm for generating quantifier scopings.Computational Linguistics, 13:47-63.W.A.
Howard.
1980.
The formulae-as-types no-tion of construction.
In J.P. Seldin and J.R.Hindley, editors, To H.B.
Curry: Essays onCombinatory Logic, Lambda Calculus and For-malism, pages 479-490.
Academic Press, Lon-don, England.Gdrard Huet.
1986.
Formal structures for compu-tation and deduction.
First edition of the lec-ture notes of a course given in the Computer Sci-ence Department of Carnegie-Mellon Universityduring the Spring of 1986 (May).Joachim Lambek.
1958.
The mathematics ofsentence structure.
American MathematicalMonthly, 65:154-170.Joachim Lambek.
1980.
From A-calculus to carte-sian closed categories.
In J.P. Seldin and J.R.Hindley, editors, To H.B.
Curry: Essays onCombinatory Logic, Lambda Calculus and For-realism, pages 375-402.
Academic Press, Lon-don, England.Robert May.
1985.
Logical Form: its Struc.ture and Derivation, Volume 12 of LinguisticInquiry Monographs.
MIT Press, Cambridge,Massachusetts.Dale A. Miller and Gopalan Nadathur.
1986.Higher-order logic programming.
In EhudShapiro, editor, Third International Confer-ence on Logic Programming, Berlin, Germany.Springer-Verlag.Richard Montague.
1973.
The proper treatmentof quantification in ordinary English.
In Rich-mond H. Thomason, editor, Formal  Philosphy.Yale University Press.Michael Moortgat.
1988.
Categorial Investiga-tions: Logical and Linguistic Aspects of theLambek Calculus.
Ph.D. thesis, University ofAmsterdam, Amsterdam, Holland (October).Douglas B. Moran.
1988.
Quantifier scoping inthe SRI Core Language Engine.
In $6th Annual?
Meeting of the Association for ComputationalLinguistics, pages 33-47, Morristown, New Jer-sey.
Association for Computational Linguistics.Barbara Partee and Emmon Bach.
1984.
Quan-tification, pronouns and VP anaphora.
In160J.A.G.
Groenendijk, T.M.V.
Janssen, andM.B.J.
Stokhof, editors, Truth, Interpretationand Information, pages 99-130.
Forts, Dor-drecht, Holland.Martha E. Pollack and Fernando C.N.
Pereira.1988.
An integrated framework for semanticand pragmatic interpretation.
In P6th AnnualMeeting of the Association for ComputationalLinguistics, pages 75-86, Morristown, New Jer-sey.
Association for Computational Linguistics.Dug Prawitz.
1965.
Natural Deduction: A Proof-Theoretical Study.
Almqvist and Wiksell, Upp-sala, Sweden.Tanya Reinhart.
1983.
Anaphora and SemanticInterpretation.
Croom Helm, London, England,corrected and revised printing, 1987 edition.Craige Roberts.
1987.
Modal Subordination,Anaphora and Distributivity.
Ph.D. thesis, De-partment of Linguistics, University of Mas-sachusetts, Amherst, Massachusetts (February).Mark Steedman.
1987.
Combinatory grammarsand parasitic gaps.
Natural Language and Lin-guistic Theory, 5(3):403-439.SSren Stenlund.
1972.
Combinators, A-Terms andProof Theory.
D. Reidel, Dordrecht, Holland.Johan van Benthem.
1986a.
Categorial grammarand lambda calculus.
In D. Skordev, editor,Mathematical Logic and its Application, pages39-60: Plenum Press, New York, New York.Johan van Benthem.
1986b.
Essays in LogicalSemantics, Volume 29 of Studies in Linguisticsand Philosophy.
D. Reidel, Dordreeht, Holland.Jan van Eijek.
1985.
Aspects of Quantification inNatural Language.
Ph.D. thesis, University ofGroningen, Groningen, Holland (February).Henk van Riemedijk and Edwin Williams.
1986.Introduction to the Theory of Grammar, Vol-ume 12 of Current Studies in Linguistics.
MITPress, Cambridge, Massachusetts.Kurt A. Vanlehn.
1978.
Determining the scopeof English quantifiers.
Master's thesis, M.I.T.
(June).Edwin Williams.
1986.
A reassignment of thefunctions of LF.
Linguistic Inquiry, 17(2):265-299.
