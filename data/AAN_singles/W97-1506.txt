The ConTrol l  System as Large Grammar Deve lopment  P lat formTh i lo  GStz  and Wal t  Detmar  Meurers*SFB 340, Univers i t / i t  T / ib ingenK le ine  Wi lhe lmst ra f le  11372074 T / ib ingenGermany{tg, dm}@sf s. nphil, uni-t uebingen, deAbst ractConTroll is a grammar development sys-tem which supports the implementationof current constraint-based theories.
Ituses strongly typed feature structures as itsprincipal data structure and offers definiterelations, universal constraints, and lexicalrules to express grammar constraints.
Theaspects of ConTroll of relevance to the de-velopment of large grammars are discussedin detail.
The system is fully implementedand has been used as workbench to developand test a large HPSG grammar.1 IntroductionConTroll 1 developed out of the Troll system (Gerde-mann et al, 1995).
Troll is a phrase structure back-bone system very similar to ALE (Carpenter andPenn, 1994), but it differs from that system in thatit is based on the set theoretic logic: of (King, 1989,1994) rather than the information theoretic one of(Carpenter, 1992).
The practical effect of this isthat Troll implements an exhaustive typing strategywhich provides the stronger kind of inferencing overdescriptions (Gerdemann and King, 1993, 1994) re-quired by standard HPSG theories.We begin with a brief overview of the ConTrollarchitecture as shown in Fig.
1 before focusing onthe aspects relevant o large scale grammar develop-ment.
ConTroll supports two basic kinds of gram-mar constraints: universal implicational constraints*The authors are listed alphabetically.1ConTroll was developed in the B4 project of the SFB340, funded by the Deutsche Forschungsgemeinschaft(DFG).
The following people contributed to the develop-ment of the system: Dale Gerdemann and Erhard Hin-richs (project leaders), Bj6rn Airing, Natali Alt, CarstenHess, John Griffith, Stephan Kepser, Guido Minnen,Gerald Penn, Oliver Suhre and Andreas Zahnert.with complex antecedents, and definite relations.
Asan example of the first kind of constraint, considerthe Head Feature Principle of HPSG (Pollard andSag, 1994).
This universal constraint can be directlyencoded in ConTroll as follows:phrase, dtrs :headed_struc ==>synsem: loc: cat :head: X,head_dtr : synsem : loc : cat :head: X.The ConTroll system allows a direct implementa-tion of HPSG grammars without forcing the grammarwriter to introduce a phrase structure backbone orrecode the theories as logic programs.
In addition,the availability of universal constraints in ConTrollalso allows for a more modular encoding of tradi-tional grammars using a relational backbone.
Thisis so since in a relational encoding all subcases needto be covered.
The universal constraints with com-plex antecedents, on the other hand, generalize overall occurrences of some data structure and can at-tach the constraint to the relevant subset.
Universalconstraints are thus constraint-based in the intuitivesense: each structure which is not explicitly excludedis well-formed.
Internally, the complex antecedentsof such universal constraints and the occurrences ofnegation are eliminated, which is possible due to theexhaustive typing we assume.
The resulting typeconstraints are then compiled into definite clausesusing the method described in (GStz and Meurers,1995).The second kind of grammar constraints are ordi-nary definite clauses with feature term arguments.The compiler detects places in which constrainedtypes can occur and integrates the type constraintsinto the code by adding calls to the relational en-coding of the universal constraints.
As described in(GStz and Meurers, 1996), the universal constraintsare integrated in a lazy fashion, i.e.
only in case theargument of a relation is specific enough to causea conflict with a universal constraint does the com-piler attach a call to the universal constraint.
Such38~ 1 Constraints/Complex Antecedentend Negation Elimination \[Compilation into Definite Clauses \]CGrammar RuI~LcxicalDefinite Chases\] uAndidvlenlgsCleIcl::s~reint" \]I Lexical Rule Compiler I/Definite Clause ProgramProgram Transformation and Code Optimization- inlining of deterministic goals- conetrelnt propagation- indexingSpecific Interpretation- lazy interpretation- Earley deductionCoroutinlngFigure 1: Overview of the ConTroll systemlazy interpretation has a significant efficiency pay-off, especially for large grammars, since it results inpreferred processing of those constraints in the largeconstraint pool which are specific enough to fail.Special mechanisms are included to allow thegrammar writer to specify how the universal con-straints and definite clauses are intended to inter-leave in processing (GStz and Meurers, 1997).
Mostimportantly, the delay mechanism of ConTroll sup-ports coroutining of both universal constraints anddefinite clauses, and it offers a variety of controlstatements to fine tune the execution strategy.
Thisis a prerequisite to efficient processing with con-straint grammars.For the rest of the paper, we will focus on those as-pects of ConTroll, which directly address large scalegrammar development:?
A graphical user interface:- data structure visualization- debugging and tracing tool?
Grammar organization issues:- supporting a modular file organization- automatic macro detection- automatic macro generation?
Compilation techniques:- special compilation of lexica with lexicalrules for a compact and efficient lexicon- incremental compilation and global gram-mar optimization- arbitrary multiple indexing of constraints39ConTroll is the only system combining all of thesefeatures in one architecture.
TFS (Emele and Zajac,1990) also offered type constraints and relations andto our knowledge was the first working typed featuresystems.
However, it had some serious drawbacks.TFS did not allow universal constraints with com-plex antecedents, but only type constraints.
Andthe system did not include a delay mechanism, sothat it was often impossible to ensure terminationor efficient processing.ALE (Carpenter and Penn, 1994) provides rela-tions and type constraints (i.e., only types as an-tecedents), but their unfolding is neither lazy, norcan it be controlled by the user in any way.
Thiscan lead to severe termination problems with recur-sive constraints.
However, the ALE type constraintswere designed to enhance the typing system, and notfor recursive computation.The definite clause part of our system is very simi-lar to the one of cvF (DSrre and Dorna, 1993): bothuse delay statements and preferred execution of de-terministic goals.
CUF, however, does not offer uni-versal constraints.2 A graph ica l  user  i n te r faceTwo practical problems arise once one tries to im-plement larger grammars.
On the one hand, thecomplex data structures of such grammars containan overwhelming number of specifications which aredifficult to present o the user.
On the other hand,the interaction of grammar constraints tends to getvery complex for realistic linguistic theories.2.1 Data Structure VisualizationIn ConTroll, the powerful graphical user interfaceXtroll addresses the presentation problem.
TheXtroll GUI programmed by Carsten Hess allows theuser to interactively view AVMs, search attributesor values in those representations, compare two rep-resentations (e.g.
multiple results to a query) andhighlight the differences, etc.
Fonts and Colors canbe freely assigned to the attributes and types.
Thedisplayed structures (or any part of it) can be can beprinted or saved as postscript file.
The GUI comeswith a clean backend interface and has already beenused as frontend for other natural language applica-tions, e.g., in the VER.BMOBIL project.A special feature of Xtroll is that it offers a mech-anism for displaying feature structures as trees ac-cording to user specified patterns.
Note that dis-playing trees is not an obvious display routine inConTroll, since the system does not impose a phrasestructure backbone but rather allows a direct imple-mentation of HPSG grammars whic:h usually encodethe constituent structure under DTRS or some similarattribute.
Since trees are a very compact representa-tion allowing a good overview of the structure, Xtrollallows the user to specify that certain paths undera type are supposed to be displayed in a tree struc-ture.
As labels for the tree nodes, Xtroll can displaya user definable selection of the following: the fea-ture path to the node, the type of the structure,the phonology, and finally an abbreviation resultingfrom matching user specified feature structure pat-terns.
An example for such a tree output is shownin Fig.
2.
In this tree, the abbreviations were usedto display category information in an X-bar fashion.Clicking on the labels displays the AVM associatedwith this node.
In the example, we did open threeof the nodes to show the modification going on be-tween the adjective sehnelles (fast) and the nounfahrrad (bike).
Note that those attributes which areirrelevant o this matter were hidden by clicking onthose attributes.The use of the fully user definable, sophisticateddisplay possibilities of Xtroll in our experience haveturned out to be indispensable for developing largetyped feature based grammars.2.2 A graphical debuggerThe second problem is addressed with a sophisti-cated tracing and debugging tool which was devel-oped to allow stepwise inspection of the complexconstraint resolution process.The debugger displays the feature structure(s) tobe checked for grammatical ity and marks the nodeson which constraints till have to be checked.
As aresult of the determinacy check, each such node canalso be marked as failed, delayed or deterministic.Similar to standard Prolog debuggers, the user canstep, skip, or fail a constraint on a node, or requestall deterministic processing to be undertaken.
An in-teresting additional possibility for non-deterministicgoals is that the user can inspect he matching defin-ing clauses and chose which one the system shouldtry.For example, in Fig.
3, the selected goal withtag \ [ \ ]  is listed as delayed and is displayed at thebottom to have two matching defining clauses out ofseven possible ones.
Using the mouse, the user canchose to display the matching or all defining clausesin separate windows.We believe that the availability of a sophisticateddebugger like the one implemented for the ConTrollsystem is an important prerequisite for large scalegrammar development.m\[\]mmmmmmmmm\[\]mmmmmmmmmmmmmmmmmmm40.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
n l  ~"  i,i iii iiiiiii!
!i!ii,i  ,iiii  l i iii ' i i',i ,ii  i\[n~el~ple..v~rd ~'1 \ [h :h~.~r~c }~" <ndmelle~,fd'rracD)\[ \[ \[?
'*\[ o'head \[\]\[r,*siwpleo.~'d A\] \[h*,ei~q~lc.~'d U\]head ,~.~  " head ~\ ] r~.~?I I I l ~'e~d \[\] ~"::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ~: : :~.~.
ili .!
:)  "?
:!
: )))))~)~:::~:~:~:~:!::):::?
:Figure 2: Screen shot of a window showing user configured tree output3 Grammar  Organ izat ion  I ssues3.1 A modu lar  g rammar  file o rgan izat ionTo organize grammars in a modular fashion, it isimportant o be able to distribute the grammar intoseveral files to permit modification, loading, andtesting of the different parts of a grammar sepa-rately.
Also, only a modular file organization allowsfor distributed grammar development since such anorganization makes it possible to coordinate thework on the individual files with software engineer-ing tools such as a revision control system.ConTroll supports the use of a grammar configu-ration file which can contain basic directory and filespecifications, as well as a more sophisticated systemallowing the linguist to specify the dependencies be-tween signature, theory and lexicon files.To find out which signature, theory, and lexiconis supposed to be used and in which directories thefiles are supposed to be found, the system looks fora grammar configuration file.
If such a file is notfound, default names for the signature and the the-ory file are used.
If there is a configuration file, it canspecify the theory, signature, and lexicon files to beused, as well as the relevant directories.
The down-side of this explicit mode of specification is that eachtime one wants to load a part of the grammar, e.g.for testing, one needs to realize which files neededare needed to test this part of the grammar in or-der to be able to list them explicitly.
While thismight seem like a trivial task, our experience hasshown that in a distributed grammar developmentenvironment such a complete specification requiressignificant insight into the entire grammar.ConTroll therefore provides a more intelligent wayof specifying the files needed for a module by al-lowing statements which make the dependencies be-tween the different theory, signature, and lexiconfiles explicit.
These specifications were modeled af-ter the makefiles used in some programming environ-ments.
Once the dependencies are provided in theconfiguration file, selecting the parts of the grammarto be loaded can be done without having to beingaware of the whole grammar organization by speci-fying one file for each module of the grammar needsto be included.
The signature, theory, and lexiconfiles which are needed for the selected files are thenautomatically loaded according to the dependencyspecifications.3.2 Automat ic  macro  detect ionWhen writing a typed feature structure based gram-mar one usually wants to abbreviate often used fea-ture paths or complex specifications.
In ConTroll41this can be done using the definite clause mecha-nism.
However, from a processing point of view, itis inefficient o treat macros in the same way as or-dinary relations.
We thus implement a fast, purelysyntactic preprocessing step that finds the relationsthat can be treated as macros, i.e., unfolded at com-pile time.
These macro relations are then compiledinto an internal representation during a second pre-processing step.
When the rest of the grammar isparsed, any macro goal will simply be replaced byits internal representation.After the actual compilation, ConTroll closes thegrammar under deterministic omputation.
Thisstep must be carefully distinguished from the macrodetection described above.
A goal is determinis-tic in case it matches at most one defining clause,but a relation is a macro by virtue of its definition,irrespective of the instantiation of the actual call-ing goals.
Of course, the macro detection step canbe eliminated, since the deterministic losure willalso unfold all macros.
However, for our referencegrammar, adding the macro detection step reducedcompile times by a factor of 20.
Thus, for largegrammars, compilation without macros is simply notpractical.Obviously, making automatic macro detection aproperty of the compiler relieves the grammar de-veloper from the burden of distinguishing betweenmacros and relations, thereby eliminating a poten-tial source of errors.3.3  Automat ic  macro  generat ionSince HPSG theories usually formulate constraintsabout different kind of objects, the grammar writerusually has to write a large number of macros to ac-cess the same attribute, or to make the same specifi-cation, namely one for each type of object which thismacro is to apply to.
For example, when formulatingimmediate dominance schemata, one wants to accessthe VFORM specification of a sign.
When specify-ing the valence information one wants to access theVFORM specification of a synsem object.
And whenspecifying something about non-local dependencies,one may want to refer to VFOI~M specifications oflocal objects.ConTroll provides a mechanism which automati-cally derives definitions of relations describing onetype of object on the basis of relations describinganother type of object - as long as the linguist tellsthe system which path of attributes leads from thefirst type of object to the second.Say we want to have abbreviations to accessthe VFOR.M of a sign, a synsem, local, cat, and ahead object.
Then we need to define a relationaccessing the most basic object having a VFORM,namely head: vform_h(X-vforra) :== vforra:X.Second, (once per grammar) access_su f f ix  andaccess_ ru le  declarations for the grammar need tobe provided.
The former define a naming conventionfor the generated relations by pairing types with re-lation name suffixes.
The latter define the rules tobe used by the mechanism by specifying the rele-vant paths from one type of object to another.
Forour example the grammar should include the recipesshown in Fig.
4.
This results in the macros shownin Fig.
5 to be generated.access_su f  f ix (head, "_h" ) .access_su f  ix (cat,  "_c" ) .access_su f  f ix ( loc, "_l" ) .accessnsuf   ix (synsem, ".s" ) .access .su f  f ix (sign, "someSuff ix" ) .acce  ss_ ru le  (cat,  head,  head) .access .
ru le  ( loc ,  ca t  ,cat) .access_ ru le  ( synsem,  loc, loc).access_ ru le  (s ign, synsem,  synsem) .Figure 4: Macro generation specificationvform_h(X) :-- v form:X.vform_c (X) :-- head:  vform_h (X) .v f  orm_l (X) : -- ca t  : v f  orm_c (X) .vf  orm_y (X) : -- l oc  : v f  orm_l (X) .vform_s (X) :-- synsem: vform_y (X) .Figure 5: Example result of macro generationFor a large grammar, which usually specifies hun-dreds of macros, this mechanism can save a signifi-cant amount of work.
It also provides a systematicrather than eclectic way of specifying abbreviationsin a grammar, which is vital if several people areinvolved in grammar development.4 Compilation techniques for largescale grammars4.1 Lexica l  ru les  fo r  a compact  andef f i c ient  lex icon  encod ingLexical rules receive a special treatment in ConTroll.The lexical rule compiler implements the covaria-tion approach to lexical rules (Meurers and Minnen,1995).
It translates a set of HPSG lexical rules andtheir interaction into definite relations used to con-strain lexical entries.
In HPSG, lexical rules are in-tended to "preserve all properties of the input notmentioned in the rule."
(Pollard and Sag, 1987,p.
314).
The lexical rule compiler of the ConTrollsystem to our knowledge is the only system whichprovides a computational mechanism for such lexi-cal rules by automatically computing the necessary42Bframe predicates accounting for the intended preser-vation of properties.
Since the lexical rules do notneed to be expanded at compile time, ConTroll isable to handle the infinite lexica which have beenproposed in a number of HPSG theories.Constraint propagation is used as program trans-formation techniques on the definite clause encodingresulting from the lexical rule compiler (Meurers andMinnen, 1996).
The relation between parsing timeswith the expanded (EXP), the covariation (cov) andthe constraint propagated covariation (OPT) lexiconfor a German HPSG grammar (Hinrichs, Meurers,and Nakazawa, 1994) can be represented as OPT :EXP : COV = 0.75 : 1 : 18.
Thus, the lexical rulecompiler results not only in a compact representa-tion but also in more efficient processing of a lexiconincluding lexical rules.4.2 Incrementa l  compi la t ion  and globalg rammar  optimizationTo keep development cycles short, a fast compileris essential.
Particularly when developing a largegrammar, small changes hould not necessitate therecompilation of the whole grammar - an incremen-tal compiler is called for.
This is relatively easy forsystems where the compilation of individual piecesof code does not depend on the rest of the program.In ConTroll, this task is complicated for two reasons.1.
In teract ion  of  un iversa l  constra ints .
If sev-eral different universal constraints apply to ob-jects of the same type, the compiler will mergethem together.
Changing a single high-levelconstraint may thus necessitate the recompila-tion of large parts of the grammar.2.
Off- l ine determin is t i c  c losure.
Since thegrammar is closed under deterministic compu-tation at compile time, a change in some re-lation entails recompilation of all clauses thathave inlined a call to that relation, which inturn may lead to changes in yet other relations,and so on.
Nothing less than the maintenanceof a complete call graph for the whole grammarwould enable the compiler to know which partsof the grammar need to be recompiled.We decided on a compromise for incremental com-pilation and made our compiler aware of the firstsort of dependency, but not the second.
This meansthat incremental recompilation is always done onthe basis of the grammar before deterministic clo-sure.
Therefore, after incremental recompilation de-terministic losure needs to be done for the wholegrammar.4.3 Arb i t ra ry  mul t ip le  index ing  ofg rammar  constraintsConTroll allows the specification of indexing infor-mation for predicates individually.
This is compara-ble to the indexing of terms in relational databases,e.g., the SICStus Prolog external database (Nilsson,1995).
Figure 6 shows the definition of a two-placer ( t )  **> t .r(a) := b. index(r ,arg0:t ) .r(a) := c. index(r ,arg l : t ) .r(b) := c.Figure 6: Indexing specification for rrelation r including a typing declaration and two in-dexing instructions.
Given a fully instantiated goalfor the relation r, the run-time nvironment of Con-Troll can deterministically pick the right clause with-out leaving behind a choice-point.The indexing mechanism not only works for rela-tions, but also implicational constraints.
Figure 7shows possible indexing instructions for the lexicalindex(word,phon:hd:string).index(word,synsem:loc:cat:head:head).Figure 7: Indexing for the type wordtype word, namely for the phonological form, andthe syntactic ategory.5 Experience using the SystemOur implementation has been tested with severalsmaller and one large (> 5000 lines) grammar, alinearization-based grammar of a sizeable fragmentof German.
The grammar was developed in a dis-tributed fashion by eight people and consist of 57files.
It provides an analysis for simple and complexverb-second, verb-first and verb-last sentences withscrambling in the Mittelfeld, extraposition phenom-ena, wh-movement and topicalization, integratedverb-first parentheticals, and an interface to an il-locution theory, as well as the three kinds of in-finitive constructions (coherent, incoherent, third-construction), nominal phrases, and adverbials (Hin-richs et al, 1997).With grammars this size, it is necessary to paycareful attention to control to achieve acceptableparsing times.
With our Prolog based interpreter,parse times were around 1-5 sec.
for 5 word sen-tences and 10-60 sec.
for 12 word sentences.
Weare currently experimenting with a C based com-piler (Zahnert, 1997) using an abstract machine witha specialized set of instructions based on the WAM43(Warren, 1983; Ai-Kaci, 1991).
This compiler is stillunder development, but it is reasonable to expectspeed improvements of an order of magnitude.6 Summing UpWe characterized ConTroll as a system supportinggrammars expressed with definite :relations, impli-cational constraints with complex antecedents, andlexical rules.
To achieve an efficient interpreta-tion, implicational constraints are applied in a lazyfashion, and interleaving of execution of the differ-ent constraints can be determined by the grammarwriter using delays and other directives.We focussed on those properties of ConTroll whichwe take to be indispensable for large scale gram-mar development: a graphical user interface for datastructure visualization, a sophisticated debuggingand tracing tool, support for a modular file organi-zation, a special macro treatment, and finally a setof special compilation techniques such as an incre-mental compiler, a mechanism dealing with lexicalrules in an efficient way, and a way to use multipleindexing of grammar constraints for efficient accessto large constraint pools.Re ferencesAi-Kaci, Hassan.
1991.
Warren's Abstract Machine.MIT Press.Carpenter, Bob.
1992.
The logic of typed featurestructures, volume 32 of Cambri~Te Tracts in The-oretical Computer Science.
Cambridge UniversityPress.Carpenter, Bob and Gerald Penn.
1994.
ALE - TheAttribute Logic Engine, User's Guide, Version2.0.1, December 1994.
Technical report, CarnegieMellon University.DSrre, Jochen and Michael Dorna.
1993.
CUPa formalism for linguistic knowledge repre-sentation.
In Jochen DSrre, editor, Computa-tional aspects of constraint based linguistic de-scriptions I. DYANA-2 Deliverable R1.2.A, Uni-versit~t Stuttgart, August, pages 1-22.Emele, Martin C. and R~mi Zajac.
1990.
Typedunification grammars.
In Proceedings of the 13 thInternational Conference on Computational Lin-guistics.Gerdemann, Dale, Thilo GStz, John Griffith,Stephan Kepser, and Frank Morawietz, 1995.Troll manual.
Seminar fiir Sprachwissenschaft,Universit~t Tiibingen, draft edition, October.Gerdemann, Dale and Paul John King.
1993.
Typedfeature structures for expressing and computa-tionally implementing feature cooccurence r stric-tions.
In Proceedings of 4.
Fachtagung der SektionComputerlinguistik der Deutschen Gesellschaftfiir Sprachwissenschaft, pages 33-39.Gerdemann, Dale and Paul John King.
1994.
Thecorrect and efficient implementation f appropri-ateness pecifications for typed feature structures.In Proceedings of COLING-94, Kyoto, Japan.GStz, Thilo and Walt Detmar Meurers.
1995.
Com-piling HPSG type constraints into definite clauseprograms.
In Proceedings of the Thrirty-ThirdAnnual Meeting of the ACL, Boston.
Associationfor Computational Linguistics.GStz, Thilo and Watt Detmar Meurers.
1996.
Theimportance of being lazy - using lazy evaluationto process queries to HPSG grammars.
In PhilipeBlache, editor, Actes de la troisi~me confdreneeanuelle sur le traitment automatique du langagenaturel.GStz, Thilo and Walt Detmar Meurers.
1997.
In-terleaving universal principles and relational con-straints over typed feature logic.
In Proceedingsof the 35th Annual Meeting of the ACL and the8th Conference of the EACL, Madrid, Spain.Hinrichs, Erhard, Detmar Meurers, and TsunekoNakazawa.
1994.
Partial-VP and Split-NP top-icalization in German - -  An HPSG analysis andits implementation.
Arbeitspapiere des SFB 340Nr.
58, Universit~t Tiibingen.Hinrichs, Erhard, Detmar Meurers, Frank Richter,Manfred Sailer, and Heike Winhart.
1997.
EinHPSG-Fragment des Deutschen, Teil 1: Theorie.Arbeitspapiere des SFB 340 Nr.
95, Universit~tTiibingen.King, Paul John.
1989.
A logical formalism forhead-driven phrase structure grammar.
Ph.D. the-sis, University of Manchester.King, Paul John.
1994.
An expanded logical for-malism for head-driven phrase structure grammar.Arbeitspapiere des SFB 340 Nr.
59, Universit~tTiibingen.Meurers, Walt Detmar and Guido Minnen.
1995.A computational treatment of HPSG lexical rulesas covariation in lexical entries.
In Proceedingsof the Fifth International Workshop on NaturalLanguage Understanding and Logic Programming,Lisbon, Portugal.Meurers, Walt Detmar and Guido Minnen.
1996.Off-line constraint propagation for efficient HPSGprocessing.
In HPSG/TALN Proceedings, Mar-seille, France.44Nilsson, Hans.
1995.
The external storage facility inSICStus Prolog.
Technical report R91:13, SwedishInstitute of Computer Science?Pollard, Carl and Ivan A.
Sag.
1987.
Information-based Syntax and Semantics, Vol.
I.
Number 13in Lecture Notes.
CSLI Publications, StanfordUniversity.
Distributed by University of ChicagoPress.Pollard, Carl and Ivan A.
Sag.
1994.
Head-Driven Phrase Structure Grammar?
University ofChicago Press, Chicago.Warren, David H. D. 1983.
An abstract Prologinstruction set.
Technical note 309, SRI Interna-tional.Zahnert, Andreas.
1997. fl2c - ein Compiler fiirCLP(TFS).
Diplomarbeit, Fakult?t fiir Infor-matik, Universit?t Tfibingen.~, ,~s~, .~ ?-j-~--S?S=~~\]2~-~-ji--_S .
.
.
.
_ _  ---_j----___- .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
\ ] _~_i iiiii!~iiii!iiiiiiii!~iiiii!ili!i!i~i!iiiiiiiii!i~i!~iliiiiiiiiiiiiil iii!!ii!ii!i!i!ii!ii!iiiiiiiiiii!ii!i!iiii!ii!iilli!i!iii!i!iiiiiiiiiiiiii!!i!iii!!!!i!!!iii!iiii!iiiiiiiiiiiiiii!iiiii!!ii!ii!!!!i!!!!!!iiiiiiiiiiiiiiiiiii!!i!
!i!iii! 'i ilo&tf ronted  \ [ \ ]?onst l -~  ?
.~ .~@~.
,~,z'a"pho,', \ [ \ ]  "~: .
,u~i~ >/ /?
'~'\["*~iii!~ii iii i iiiiiiiiiiiiiiiiiiiiiii iiii~!i::~ ?o~P, < I > :::::::: ::::::::iiTiiiiii!i::ii \[!
i f i  s ~.at~s ?
; '~ ,p l~.
"?~ i ::~ !~::~i~i~i L L ' " JJ ~i~ ::iiiiiiiiiiiiiiiiiiiiili~\[!
!ii!i 100 .~ '~ ~!~ ::::::.:.:.:::.
::: ::::::::::::::::::::::::::::::::i iiiii\]\]\] hea~.
\ [ \ ]  !!
i !
i i i i i !
!
!!!!
i i :~.
.  "
>~i i\]i~ ~ \] !\]ii~iiii\]\]\]i~ii ~i i ~..\]\]\]::\]\]~::ii:::::::::ji:: ?pp_ac~.~lp < \ [ \ ] ,  ~ ,  \ [ \ ]  \ [ \ ] ,  ~r~.
.~,o~ 1~ <> > ' :' i\]i ii\]\]i\]i\]i\]i\]i\]i\]!~\]i\]i\]i\]ii~ ~ i i i ii\[iil\]ii I ~'o~' ~ / \]\] !\]iiiiiiiiii::i\]::iii ~ i \ ] !iiiiiiiiiii l oo  I-8\] iii ~i!~!~F~ii iiiiiii !
i ~ii i\]i i i i i i~i\[ L i  ',',' i!iiiiiiiiiiiill::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ~,~ i~,',i~,i~,~,~,ii!
'~'?,',',i',',',~,',',',~?,iii~i~i i :  '' !'~'~!
''/~:: ii.
!
'~'~'~',@~,~,i~,~/,~,i '/~',',!'
!!!
!~i',ii',ii',i ,i', /,',',','~i~i';/,'/~i', i',iiiii ,ii~!i!ii~',',iii i ',i ;,';,','~i~i~i~,',~,',~,';, i!
'~Fi iii ii',iiii~,~,~,~,',~,',',',',',',~,'~iiiii!
!i',i i',!if, i ~,'~ ~,',i',',',','@~i'/i~,ii'~ii',iiii','~i'~i!i'~iii'~!ii i i~@~!ii~iii~i i~i~i~i~iiiiiiii~iii~!~;~i~i~iii~iiii~!iii!~i~i~iiii~i~i~i~!~!~iii~ii~iii!~iii!ii i ~~ii',' ,',~,',',iiii', iii'~i'~ili!Figure 3: Screen shot of the graphical debugger in action45
