261965 International Conference on Computational LinguisticsSPECIF ICAT IONS FOR A TREE PROCESSING LANGUAGEbyR.
Tabory, F. L. ZarnfallerInternational Business Machines CorporationThomas Jo Watson Research CenterYorktown Heights, New York"% ~ y /  ,~ ..,.
!?
-~, , , ,<;o?
/SPECIF ICAT IONS FOR A TREE PROCESSING LANGUAGEF.byR.
TaboryL0 ZarnfallerInternational Business Machines CorporationThomas  J. Watson Research CenterYorktown Heights~ New YorkABSTRACT:  Descr ip t ion  of t rees  and s t r ings  - both composed oflex ica l  va lues  - match ing  of t rees  and s t r ings  aga ins t  par t ia l l y  o rto ta l ly  de f ined  pat tern  and  operat ions  on t rees  and s t r ings  fo rm theessent ia l  par t  of the Processor?
The  not ion  of s t r ing  has  been ex -tended to s t r ings  embedded in or  ext racted  f rom t rees ,  and a mod i -f ied  version of the COMIT  rewriting rule applied to these strings.Variables ranging over lexical values, strings and trees can be intro-duced and operated on according to a "pushdown" principle.
Besides,variables can be operated either ir~ the "connected" or "autonomous t'mode, depending whether their connections with some parent struc-ture are remembered  or not.
Variable value structures can bematched against patterns or compared  among themselves.
Trans-formations on trees and strings are defined, allowing for the devel-opment  of a given data structure into a new one.
All these featuresand devices were  defined by extracting the elementary steps withwhich linguists compose  their operations and by generalizing thesesteps reasonably.
The resulting language specifications are pro-posed for discussing the solution of a class of non-numerical  pro-g ramming problems.IntroductionRecent developments in computational linguistics have shown theneed for a convenient p rogramming formal ism enabling linguists tohandle data processing problems of natural languages.
Especiallytree and an extended kind of string processing have to be made con-ceptually easy for the linguistically oriented computer  user.
Thispaper proposes specifications for such a language; it should be thoughtof - theoretically only, since its implementation is not planned presently-as a procedure package attached to NPL  (New Programming Language).The reason for this is the desire to take full advantage of thehighlights of a modern  higher level p rogramming language as well asof the devices any general purpose programming system is in pos-session of.
Consequently, the operations described in this papershould be thought of as being complemented by the full power of NPL ,the most  interesting features of which - f rom the viewpoint of non-numerical processing - are: recursive procedure calls, dynamicstorage a11ocation; numeric, character string and bit string dataarranged in structures and multi-dimensional arrays, etc.Description of trees and strings, both composed of lexical values,and operations on them form the essential part of the Processor?
Theword  "processor" covers both a programming language, and a dataorganizing system in the computer memory?
As far as string descrip-tions and string processing is concerned, the influence of COMIT  wasdominant in elaborating the relevant part of the Processor, but thenotion of string has been extended to strings embedded in or extractedf rom trees.
Other existing programming languages and linguisticp rogramming systems were  also taken into consideration, they areal l  ment ioned  in the Reference  List ,The def in i t ion of the features  of the P rocessor  has been  accom-p l i shed by ext ract ing  the e lementary  steps with which  l inguists  composethe i r  h igher  leve l  syntact ic  operat ions  and by a reasonab le  genera l i za -t ion of these steps.
Some of these devices are, however, fairly gen-eral and any kind of tree processing, not only a syntactically orientedone, would introduce them.Data and VariablesThere  are three basic kinds of data the Processor  can handle:lexical values, strings and trees.
A lexical value is a characterstring; a string (somet imes  referred to as "lexical" string, asopposed to a character string) is an ordered sequence of lexicalvalues separated by some conventionally chosen delimiter; a tree isa partially ordered set of lexical values, where  each e lement has oneand only one ancestor, except the "root" of the tree which  has noancestor at allo Besides, elements sharing the same ancestor arecalled siblings and such a sibling set is totally ordered?
Thus, eache lement of the tree has at most  one "left" and at most  one "right"sibling?Lexical values can be numerical ly or logically tagged.
In orderto avoid multiple tagging a tag is a fixed length dec imal  integer,each digit of which can be processed separately.
Besides a digit canbe logically interpreted as True  or False, according to whether  itis non-zero or zero.Variables of the fo rm Ln, Sn and Tn  - where  n is an integerfreely chosen by the user - take, respectively, lexical values, stringsand trees as values.
We shall see that these variables have valuelists somet imes,  instead of a single value.It results f rom the above described data definitions that datacan be embedded in other data: a lexical value can be a string con-stituent or a tree element, a string can be a portion of a broaderstring or extracted f rom a tree, a tree can be a subtree of a largertree?
In order to handle this property of the data, a variable can beoperated in two modes :  the autonomous  or the connected mode?
At4each  ins tant  a l l  var iab les  in t roduced have  a we l l  de f ined  "autonomys ta tus"  determin ing  the mode in wh ich  each  var iab le  is operated  on.Th is  s ta tus  is the same for  a l l  va lues  of a var iab le .
The mean ingof the two modes  is the fo l lowing:In the connected  mode al l  va lues  of a var iab le  mainta in  the i rconnect ions  wi th  the la rger  data  s t ructure  to wh ich  they  be long .
Ino ther  words  a connected  var iab le  " remembers"  its connect ions  w i thsome parent  s t ructure  and  th is  feature  can  be used  for  fu r ther  pro -cess ing  of that  parent  s t ructure .
Moreover ,  these  connect ions  areautomat ica l ly  updated  when the parent  s t ructure  undergoes  a mod i -f i ca t ion .
The k ind  of updat ing  depends  on the way  the par t i cu la rva lue  was  ass igned to the var iab le  and on the mod i f i ca t ion  occur r ingin the parent  s t ructure .In the autonomous  mode var iab les  don ' t  have  connect ions  at a l l .They  re fer  to data  that  a re  independent  of o ther  data ,  except  dataembedded in the autonomous  s t ructures  in quest ion .
Var iab lescar ry ing  input  data  into the computer  a re  made autonomous  by theProcessor .
Var iab les  in t roduced in var ious  s ta tements  (except  in -put s ta tements )  a re  set  to the connected  mode;  the s ta tementCREATE var iab lec reates  an autonomous  var iab le  w i th  an empty  va lue  l i s t .
In o rderto change the s ta tus  of a var iab le  the s ta tementAUTONOMY var iab lecan  be used .
Upon execut ion  of this s ta tement  data  re fer red  to bythe var iab le  a re  cop ied  down in some par t  of the s torage  and thevar iab le  is made autonomous .
To change the s ta tus  in the o therd i rec t ion ,  f rom autonomous  to connected ,  some la ter  descr ibed5t rans format ion  s ta tements  have  to be used .
Genera l ly ,  some s ta te -ments  may change the autonomy s ta tus  of a var iab le .
These  changesw i l l  be descr ibed  w i th  these  commands ,It is poss ib le  to check  the  autonomy s ta tus  of a var iab le .
Thepred icateB AUTONOMY var iab leper fo rms th i s  funct ion .
B s tands  for  a log ica l  var iab le  (var iab lerang ing  over  b i t  s t r ings  of  length  one) .
B is se t  to T rue  if  the  argu-ment  var iab le  is autonomoas ,  to Fa lse  o therwise .Va lue  Ass ignment  S ta tementsIn the  fo r thcoming  chapters  s ta tements  w i l l  be  descr ibed  wh ichass ign  va lues  to var iab les .
If the  var iab le  to wh ich  va lues  a re  ass ignedhas  a l ready  a non-empty  va lue  l i s t  the  new va lues  ass igned  to th isvar iab le  w i l l  be added to the  l i s t ,  at  the beg inn ing  of it, in a "push-down"  manner ,Va lue  ass ignment  s ta tements  use  a l so  var iab les  somet imes ,  asarguments of the statement.
In such a case the first item on thevalue list of the argument  variable is taken into consideration, andreferred to hereafter as "the value" of the variable, though othervalues may follow it on the list.
If the value list is empty) thevalue assignment statement amounts to a non-operation.Parent referencing is another prob lem that arises naturally invalue assignment statements, that is to say the prob lem of namingthe data where f rom the variable will get values assigned, accordingto the specifications of the statement.
Two cases exist:(a) The parent reference is mandatory in the value assignmentcommand.
Th is  is  the  case  when the  s ta tement  has  no sense  at  a l lw i thout  a parent  re ference .
(b) The  parent  re ference  is opt iona l .
In  th i s  case  the  fo l low ingru les  preva i l :  i f  i t  is  ment ioned ,  the  va lue  ass igned  is ent i re ly  con-ta ined  in the  spec i f ied  parent  re ference ,  or  e l se  (if no su i tab le  va luesa re  found w i th in  the  re ference)  the  ass ignment  s ta tement  is  a non-operat ion .
If i t  is not  ment ioned ,  va lues  w i l l  be co l lec ted  f rom thela rgest  autonomous  data  to wh ich  the  argument  var iab le  va lue  of theva lue  ass ignment  s ta tement  is connected .Parent  References  are  of  the  fo rm (in Vn}, where  Vn is a var iab lename (Tree  or  S t r ing) .
In the fo r thcoming  chapters  they  w i l l  bement ioned ,  in s ta tement  descr ip t ions ,  as  "Opt iona l  Parent  Reference"or  "Mandatory  Parent  Reference" .
The  word  "parent"  might  be re -p laced  by  "s t r ing" ,  o r  " t ree" ,  e tc .
when a res t r i c t ive  cond i t ion  ofth i s  nature  preva i l s ,  accord ing  to the  nature  of  the  s ta tement .Va lue  Ass ignment  to Lex ica l  Var iab lesAss ign ing  a va lue  to a lex ica l  var iab le  can  take  p lace ,  in  p r inc ip le ,in th ree  poss ib le  ways :(1) Abso lu te  Ass ignment  - The  lex ica l  va lue  co l lec ted  f rom at ree  or  a s t r ing  is des ignated  by  i ts  "abso lu te  locat ion"  in  theparent  s t ruc ture ,  i .e .
,  i ts  I verson 's  index  vector  in the  t reecase ,  o r  i ts  const i tuent  ser ia l  number  in the  s t r ing  case .
(Seebe low for  deta i led  exp lanat ion .
)(Z) Assoc ia t ive  Ass ignment  - Th is  k ind  of va lue  ass ignmenttakes  p lace  by  naming  that  lex ica l  va lue  in the  parent  t ree  or  s t r ing ,wh ich  the user  des i res  to ass ign  as  var iab le  va lue .
In  th i s  casethe var iab le  may be supp l ied  with a va lue l ist ,  ins tead  of as ingle va lue.
This  happens  when the spec i f ied  lex ica l  va lueoccurs more  than once in the parent structure?
The value listwill then contain entries h~.ving identical lexical values but eachof these entries having different connections with the parentstructure.
(3) Relative Ass ignment  - This type of ass ignment  uses anothervariable, as argument,  and determines the value to be assignedin function of the value of the argument  variable.We are going now into the details of value ass ignment  to lexicalvariables.
F rom the autonomy status point of v iew the following rulesprevail (also valid for value ass ignment  to string and tree variables):if the variable to which value is assigned is currently operated in theconnected mode,  connections with the parent structure will be con-served in the usual way.
If the variable is autonomous,  these con-nections are -lost and only lexical values (without their "positioninformation") and possible tags are transmitted.In order to enable the user to assign an arbitrary lexical value toa cariable (not necessari ly collected f rom a tree or a string), thefollowing statement is permissible:Ln  = LEX ICAL  lexical/ mThe  lexical value "lexical" is assigned to Ln.
m is an optional integerrepresenting a tag.
Words  written in upper case letters represent -throughout this paper - statement keywords.Absolute value ass ignments to lexical variables are of the form:8(I) Ln  = (m I, mz,(~) Ln  = LEFT  k(3) Ln  = R IGHT k "In the tree case, (m I, m Z, .vector; each m. is an integer, m 11?
.
?
rnk) Mandatory  Tree  ReferenceMandatory  S t r ing  Reference!
I  !1mk) denotes  an Iverson 's  index  O @= 1 and it denotes  the root  of themean ing  any  in teger  in that  pos i t ionII f!
I!
ff !1 I fexcept  the enumerated  ones (eachk.
is an in teger )1the s igns :(I) *($ - k I, k Z, .
.
k  ) ITlt ree ,  m Z se lec ts  the m E - th  s ib l ing  among the immediate  successorsof the root ,  m 3 se lec ts  the m 3 - th  s ib l ing  among the immediate  suc -cessors  of the t ree  e lement  se lec ted  by the prev ious  por t ion  of theindex  vector ,  and so on, unt i l  m k se lec ts  a f ina l  t ree  e lement  thatwi l l  become the va lue  to be ass igned to Ln?In the s t r ing  case ,  k is an in teger  and LEFT  k of  R IGHT k ass igns ,respect ive ly ,  the k - th  const i tuent  f rom the le f t  or  f rom the r ight  endof the s t r ing ,  as va lue  to Ln?Assoc ia t ive  va lue  ass ignments  to lex ica l  var iab les  a re  of the fo rm:Lm = lex ica l / tag  Mandatory  Parent  ReferenceIn the r ight  s ide  of the s ta tement  " lex ica l "  denotes  a lex ica l  va lueand "tag" the description of a tag?
One of the two descriptions "lexical"and "tag" might be omitted.
The parent structure is searched for alle lements or constituents that match  the specified lexical value and/orthe specified tag.
The selected elements are added to the value list ofLno A tag specification is of the form: a, az, o .
an where  n is thenumber  of digits in the tag; each a. is either an integer or an integer1variable specifying the required digit in the i-th position, or one of(k 1 / k 2 / .
.
.
/ km)  mean ing  one of the  enumeratedin tegers .Re la t ive  va lue  ass ignments  to lex ica l  var iab les  a re  of the  fo rm:Ln  = NE IGHBOR Lm Opt iona l  Parent  Referencewhere  NE IGHBOR s tands  for  one of the  fo l low ing  keywords :ANCESTOR,  L -S IBL ING,  R -S IBL ING,  L -SUCCESSOR,  R -SUCCESSOR.The  in terpreta t ion  of  these  keywords  depends  on the Parent  Reference ,whether  it is exp l i c i t l y  s ta ted  or  not .
If the  Parent  S t ruc ture  is at ree ,  the  in terpreta t ion  is the  fo l low ing :(1) ANCESTOR:  the  neares t  t ree  e lement  to wh ich  theva lue  of Lm is connected  in the  d i rec t ionof  the  root  of  the t ree .
(2) L -S IBL ING:  the element preceding the value of Lm.in its sibling set.
(3) R-S IBL ING:  the  e lement  fo l low ing  the  va lue  of Lmin the  s ib l ing  s eto(4) L -SUCCESSOR:  the first element in the sibling set whoseancestor is the value of Lm.
(5) R -SUCCESSOR:  the last element in the sibling set whoseancestor is the value of Lm.If the  Parent  S t ruc ture  is a s t r ing ,  L -S IBL ING and  L -SUCCESSORboth  denote  the  const i tuent  to the le f t  of  the  va lue  of Lm,  wh i le  R-S IBL ING and  R-SUCCESSOR denote  the  s t r ing  const i tuent  to i ts  r ight .ANCESTOR denotes  the  le f tmost  const i tuent  in  the s t r ing .In a l l  these  s ta tements  the  argument  var iab le  Lm has  to becur rent ly  operated  in the  connected  mode.
The  se lec ted  va lue ,  de -pend ing  on wh ich  keyword  is used  and  what  the  parent  s t ruc ture  is ,  isi0assigned to the value list of Ln.In obvious cases the "empty"  value might be assigned to Ln.Value Ass ignment  to String VariablesString value ass ignments  are also absolute, associative or re-lative.
The autonomy rules are analogous to the ones used in valueassignments to lexical variables, except if stated otherwise.
In orderto enable the user to assign an arbitrary value to a string variable -not necessarily collected f rom a parent structure - the followingstatement is permissible:Sn = CONCATENATE AAA o o .
AAwhere  each A stands for one of the following possibilities:(1) A lex ica l  va lue with an opt ional  tag (of the fo rm lex ica l /  tag)(Z) a lexical variable(3) a string variable.The statement per fo rms the concatenation in the order shown inthe statement body, by taking the first items on the value lists of thevariables involved.
Parent  connections of these values are not takeninto consideration and Sn is made automatically autonomous  (if itwasn't already), its value is the concatenated set of lexical values,with possible tags?Absolute value ass ignment  to string variables is of the form:Sn = LEVEL  k Mandatory  Tree  Referencek is an integer selecting the k-th level of the tree referred to?
Thek- th  level of a tree is the string whose  constituents are at distance kf rom the root, the distance being measured  in number  of subsequentancestors up to the root.11Lm be ing  a connected  var iab le ,  re la t ive  ass ignment  to s t r ingvar iab les  takes  p lace  w i th  the  he lp  of  a s ta tement  of  the  fo rm:Sn = WORD Lm Opt iona l  Parent  ReferenceWORD s tands  for  one of the  keywords  enumerated  be low;  the in terpre -ta t ion  of these  keywords  depends  on the Parent  S t ruc ture  (exp l i c i teor  imp l ied)  be ing  a t ree  or  a s t r ing .
The  tab le  be low enumerates  a l lthe  cases :Keyword  Tree  Case  St r ing  CaseANCEST ORSUCCESSORL -SUCCESSORR-SUCCESSORS IB  L INGL -S IBL INGThe ancestor  s t r ing  of the argu-ment  e lement  is the  one thatconnects  it to the  root  of  thet ree .The  successor  s t r ing  of theargument  e lement  is the s ib -l ing  set  hav ing  the argumentancestor  e lement .asThe L -successor  s t r ing  is theone composed of the  sequenceof subsequent  L -SUCCESSORe lements  in the  downwardd i rec t ion .Same def in i t ion  as above ,tak ing  the  subsequent  R-SUCCESSOR e lements .butThe s ib l ing  s t r ing  of the argu-ment  is the  successor  s t r ingof  i ts  ancestor  e lement .The  par t  o f  the  s ib l ing  s t r ingpreced ing  the  argument?The  longest  s t r ingin wh ich  the argu-ment  is a con-s t i tuent .Same as ANCESTORThe left portion ofthe string upto theargument  constituent.The right portion c~the string f rom theargument  constituent.same as ANCESTORSame as L -SUCCESSORlZK eywor  d T ree  Case  St r ing  CaseR-S IBL ING The part of the sibling stringfollowing the argument.Same as R -SUCCESSORTERMINAL  The  te rmina l  s t r ing  of the argu-  Same as  ANCESTORment  element is composed ofelements having empty succes-sor strings and on whose  an-cestor strings the argumentelement is a constituent.All these statements assign the selected string as value to SnoAssociative assignment to string variables takes place with astatement of the form Sn = STRING (kl, k z string structure specifi-cation) Mandatory  String Reference.
String structure specificationis a string over the alphabet of lexical values and a few special signs;- we are going to call it a metastring0 It describes the internal com-position of the Parent Reference.
k I and k 2 stand for integers or in-teger variables denoting the k I -th and the k 2 -th constituent of themetastring0 The portion of the metastring falling between these con-stituents delimits a portion of the parent string.
Upon execution ofthe statement this portion of the Parent String is attributed as valueto Sno In case of more  than one portion referred to in the parentstring, the leftmost one is taken into consideration.
In case of "no-match" Sn gets the empty value.The  metastring's internal composition is very close to the oneused by the programming language COMIT .
If AAAAA .
.
o AAAA isthe form of such a metastring~ where  A stands for one of its con-stituents, the following context-free grammar  (or Backus NormalForm)  would generate it:13A--gb/b/.
./bA---95 - b.b .
.b .b$nb "--9b--~ Ln or Sn(meaning an arbitrary choice among theenumerated b's )(meaning any string except the onesdescribed by the b's.
)(meaning n arbitrary consecutive con-stituents in the parent string; n standsfor an integer.
$0 denotes the emptystring.
)meaning an arbitrary string within theparent string, the empty string in-cluded.
)any lexical value/ tag description com-bination as described in a previouschapter .
(mean ing  the first va lue  of the var iab leinvolved,  tag inc luded,  and  the position,if the var iab le  is connectedo)Value Ass isnment to Tree VariablesIn order to enable the user to assign an arbitrary value to a treevariable, the following statement is permissible (the equivalent ofthe LEX ICAL  and CONCATENATE statements in the previous cases):Tn  = STRUCTURE k I A k Z A .
.
.
.
knAwhere  each k. is a level number  (see COBOL,  INrPL) and each A standsfor one of the following possibilities:(I) A lexical value with an optional tag(Z) A lexical variable(3) A tree variable14If A is a t ree  var iab le  the subsequent  leve l  number  should not besuper io r  to the preced ing  one?
The s ta tement  bui lds  a t ree  accord -ing to the s t ruc ture  shown by the leve l  numbers ,  by taking the f i r s ti tems on the va lue l i s ts  of the var iab les  involved,  wi thout  pos i t ionin fo rmat ion .
This t ree  is ass igned as va lue to Tn~ by mak ing  Tnautomat ica l ly  autonomous .Abso lute ,  assoc ia t ive  and re la t ive  value ass ignments  to t reevar iab les  cannot  be so c lear ly  separated  as in the prev ious  cases .The fo l lowing s ta tement  amalgamates  var ious  k inds of ass ignments :Tn = TREE Lm,  A Opt ional  T ree  Referencewhere  Lm is a connected  var iab le  and A is an opt ional  l i s t  of con-s t i tuents  of the fo rm (a l ,  azPthe fo l lowing poss ib i l i t i es :(1) A lex ica l  var iab le(z)ak)o_ Each  a.1 stands for one of $A lex ica l  value and/or  a tag descr ip t ion  (see a prev iouschapter on the specifications)The  effect of the statement is the following: a subtree is selectedwhose  root is the value of Lm.
If the A-list is empty, this entiresubtree is assigned, as value, to Tn.
If the A-list is not empty, allthe subtree elements matched by the A-list are considered terminal(i.e.
their successors are neglected) and the assigned tree valuestops - at its bottom - with these matched elements.
In case ofconflict the e lement closer to the root is considered terminal.
Theautonomy rules are like in the previous cases.The following statement provides for obtaining the parent treeof a string or lexical variable:Tn = PARENT Lm or Sn~15The  broadest  autonomous  t ree  conta in ing  the  argument  is ass igned ,as va lue ,  to  Tn ,Movement  of VariablesVariable values have to be moved,  erased, :ransmitted, etc0 Thefollowing statements provide for these operations:Vn  = PUSHDOWN Vm,  kwhere Vn  and Vm are variables of the same type and k is an unsignedinteger.
The first k values on the value list of Vm are added to thevalue list of Vn, by "pushing down" the previous values on the list ofVn.
The value list of Vm remains unchanged.The statementPUSHUP Vn.. kerases the first k values on the list of Vno In both cases, if k issuperior to the number  of values on the list, the operation stopsafter the exhaustion of values.Structure QuestionsThe user can question the structure of a variable value by com-paring it to a given or partially specified pattern.
The general formof such a question is:B Ass ignment  Statementwhere  B is a logical variable (bit string of length one) and Ass ignmentStatement stands for any of the assignment statements described inthe previous chapters?
The interpretation of an assignment statementin a structure question is different, however, f rom its original inter-pretatiOno An  assignment statement is of the form:16Vn = spec i f i ca t ionand the = s ign ass igns  a va lue to Vn, accord ing  to the spec i f i ca t ion .When an ass ignment  s ta tement  enters  a s t ruc ture  quest ion  no va lueass ignment  akes p lace ,  the = sign means  equa l i ty  between the var iab levalue and the spec i f i ca t ion .
In case  of equa l i ty  B is set  to T rue ,  toFa lse  o therwise .Below we l i s t  these  s t ruc ture  quest ions  with the i r  in terpretat ion .
(In the l i s t  the var ious  types of parent  re ferences  are  abbrev ia ted .
)Ass ignment  S ta tement  S t ructure  Quest ion  In terpretat ionLn = LEX ICAL  l ex ica l /  tagLn  = (ml, m2.. , ink) MTRLn  = LEFT  or R IGHT k MSRLn = lex ica l /  tag MPRLn  = NE IGHBOR Lm OPRSn = CONCATENATE AAA.
, ,ASn = LEVEL  k MTRIs the value of Ln  equal to "lexical"and to the tag?Does Ln occupy the pos i t ion  spec i -f ied by the index vector  in thespec i f ied  parent  t ree?Does Ln occupy the k - th  const i tuentpos i t ion  in the spec i f ied  parents t r ing?Does Ln match  lex ica l / tag  and isit in the spec i f ied  parent  s t ruc ture?Is the pos i t ion  of Ln in agreementwith the spec i f i ca t ion?Is Sn composed of the const i tuentsspec i f ied ,  pos i t ion  in fo rmat ionbeing d i s regarded?Does Sn correspond to the k- thlevel string in the specified parenttree?Sn = STRING (kl, k2, specif? )
MSR Does Sn match  the specification?17As s ignment  S ta te  ment  S t ruc ture  Quest ion  In terpreta t ionSn = WORD Lm OPRTn= STRUCTURE k lAK2A.
.
.
knATn= TREE Lm,  A OTRIs the  pos i t ion  of  Sn in agreementw i th  the  spec i f i ca t ion?Is the  t ree  va lue  Tn  composed asind icated  by the  s t ruc ture  descr ip -t ion,  pos i t ion  in fo rmat ion  d i s re -garded?Is Tn  the  subt ree  extend ing  asind icated?Tn  = PARENT Lm or  Sm Are  Lm or  Sm located  in Tn?Al l  these  s t ruc ture  quest ions  compare  the f i r s t  i tem on the  va luel i s t  of  the  var iab le  invo lved  w i th  the pat tern  spec i f i ca t ion .
If the userdes i res  to search  through the  who le  va lue  l i s t  he  can  fo rmulate  h iss t ruc ture  quest ion  as:B EXTRACT Ass ignment  S ta tementIn th i s  case  the  who le  va lue  l i s t  is searched  through and  the f i r s ti tem encountered  sat i s fy ing  the  pat tern  spec i f i ca t ion  is ext rac ted  andput  at  the top  of the  va lue  l i s t ,  wh i le  B is se t  to T rue .
If no i temsat i s fy ing  the  pat tern  spec i f i ca t ion  is encountered  B is  se t  to Fa lseand  the  va lue  l i s t  remains  unchanged.In  a prev ious  chapter  the  CREATE s ta tement  was  descr ibed  thatc reates  an  autonomous  var iab le  w i th  an empty  va lue  l i s t .
The  quest ionB CREATE var iab lesets  B to T rue ,  i f  the  var iab le ' s  va lue  l i s t  is empty ,  to Fa lse ,o therwise .The  s ta tementB AUTONOMY var iab le-bu i l t  in an  ana logous  way  - has  been  descr ibed  ear l ie r .18Equa l i ty  TestsG iven  two var iab les  Vn and  Vm of the same type  (both lex ica l ,or  both s t r ing  or  both  t ree)  the fo l low ing  s ta tement  tes ts  the  equa l i tyof the var iab le  va lues :B Vm - VnwhereB is a bit string of length three.
The setting to True or Falseof th is  bit  s t r ing  is as  fo l lows:F i r s t  bit  T rue  is  the  lex ica l  compos i t ion  of Vm is ident ica l  to theone of Vn, tags  and  autonomy s ta tus  be ing  d is regarded.Second bit  T rue  i f  the  la rgest  parent  s t ructures  are  ident ica l  o r  ifboth var iab les  a re  autonomous .Th i rd  bit  T rue  i f  the two index  vectors  a re  ident ica l ?
The  indexvector  of a lex ica l  va lue  has  been def ined  ear l ie r ,  fo r  s t r ing  andt rees  it is - respect ive ly  - the index  vector  of the le f tmost  const i tuentand of the root .
The  parent  s t ructures  may be d i f fe rent  and  yet  theth i rd  bit  se t  to T rue .
If  both  var iab les  a re  autonomous  the bit  is se tto T rue .Numerica l  properties of.
Data and VariablesThe following statements establish connections between variablesand their numerical  properties:X being a numer ic  (decimal) variable the statementX= NUMBER Vnassigns to X, as value, the number  of items on the value list of Vn.The statementX = WEIGHT Vnassigns to X, as value, the number  one if Vn  is a lexical variable, the19number  of  const i tuents  or  t ree  e lements  of  the va lue  of Vn, i f  th isla t te r  is a s t r ing  or  t ree  var iab le .
The s ta tements  imp lement ingtag hand l ing  are :X = TAG Lnwh ich  sets  X to the tag va lue  of Ln,  andLn  = TAG Xwh ich  ass igns  X, as  tag,  to the va lue  of Ln.TransformationsTransformation statements change strings and tree:~ into newstrings and trees.
During the processing of a transformation datamay move, or get deleted.
This raises the following problem:variable values are affected by these movements  and they must  becorrespondingly modified, updated, deleted, etc.
The relevant con-ventions are as follows:Whenever  a piece of data moves  all variable values equal to orentirely contained in that piece of data, have their connections up-dated, in function of the new position the piece of data movedoccupies.
If, instead of being moved,  the piece of data is deleted,all variable values equal to or entirely contained in the piece of datadeleted are deleted.Variable values overlapping with data moved or deleted are eithermodified or deleted.
They  are deleted in the following cases:(I) The argument  of the assignment statement which defined thevalue gets deleted.
(Ec.
Sn - ANCESTOR Ln  and Lm getsdeleted by a t ransformation; then the corresponding value ofSn is deleted.
)Z0(2) All string variables defined by a STR ING Statement.In all other cases updating and due modification takes place.String TransformationsThe string transformation statement of the Processor  is stronglyinspired by the "Rewriting rule" of the COMIT  programming language,but it is adapted to strings embedded in trees too.In the case of an autonomous string the transformation statementis a straightforward adaptation of the COMIT  rule.
Its fo rm is:string structure specification = REWRITE  rewrite indicationMandatory String Reference.The "string structure specification" is identical to the one used in thedescription of the STR ING statement, in the chapter on value assign-ments to string variables.
The "rewrite indication" is a sequencecomposed of:(I) Integers sequentially number ing the constituents of the"string structure specification" and showing the new position(or deletion, if an integer is omitted in the "rewrite indication")of these constituents after transformation of the string.
(2) Lexical values and string and lexical variables introducingnew constituents into the string to be transformed.The statement verifies if the "string structure specification"matches the Parent Reference.
In case of no match, no transformationtakes place.
In case of match the string is rewritten in the order ofthe constituents indicated by the "rewrite indication".In the case of strings connected to trees two classes of stringshave to be distinguished: vertical and horizontal strings.
A stringZ1embedded in a t ree  is hor i zonta l  i f  no const i tuent  of  the s t r ing  is thet ree -ancestor  e lement  of  another  const i tuent .
I t  is ver t i ca l  in  theoppos i te  case .For  ver t i ca l  s t r ings  the  fo rm of  the  REWRITE  s ta tement  isident ica l  w i th  the one fo r  autonomous  s t r ings ,  i ts  in terpreta t ion  is ,however ,  d i f fe rent :  in  case  of match ,  i f  a const i tuent  is  moved orde le ted ,  the  ent i re  subt ree  whose  root  is  the  const i tuent  in  quest ion ,is  a l so  moved or  de le ted ,  except  that  b ranch  of  the  subt ree  wh ich  hasan  e lement  in the s t r ing  to be t rans formed?
Moreover ,  in  the  newpos i t ion ,  the  fo rmer  o rder  of  the  e lements  of  the  moved const i tuent ' ssuccessor  s t r ing  is ma inta ined;  i f  an  e lement  of  th i s  successors t r ing  d idn ' t  par t i c ipate  in the  move - because  of the  above  ment ionedres t r i c t ion  - it is  rep laced  by  the  new le f t  ne ighbor  of  the  movedconst i tuent  in  the  s t r ing .For  hor i zonta l  s t r ings  the  fo rm of the  REWRITE  s ta tement  iss l ight ly  d i f fe rent : in  the  " rewr i te  ind icat ion"  each  const i tuent  musthave  a le f t  parenthes is  somewhere  to i ts  le f t  and  a r ight  parenthes issomewhere  to i ts  r ight  and  no o ther  parenthes is  can  appear  betweenthe  const i tuent  and  these  parentheses .
In o ther  words  the who le" rewr i te  ind icat ion"  is  s imp ly  bracketed .
A le f t  parenthes is  mightbe fo l lowed by  a r ight  parenthes is ,  w i th  no const i tuent  in  between,th i s  coup le  be ing  p laced  in the  " rewr i te  ind icat ion" .
A f te r  t rans -fo rmat ion  in case  of match ,  const i tuents  between the  same coup leof  parentheses  w i l l  have  the  same ancestor  e lement  in the  t ree ,  inle f t - to - r ight  o rder  of  the  parenthes is  coup les  and  of the  poss ib leancestor  e lements  of  the  s t r ing?A coup le  of  parentheses  w i th  no const i tuent  in between at t r ibutesno const i tuent  of the  s t r ing  to the ancestor  e lement  in that  pos i t ion .ZZTree  Trans format ionsThree  s ta tements  ATTACH,  DELETE and  DETACH prov ide  fo rthe  t rans format ion  of t rees .
Var iab les  V re fer red  to be low in thedescr ip t ion  of  these  s ta tements  must  be s ing le  va lued ,  because  ofautomat ic  changes  in the i r  autonomy s ta tus :(1) ATTACH Th is  s ta tement  inser ts  data  in a t ree .
I ts  genera lfo rm isATTACH V, P, Lnwhere  V is an autonomous  variable, the value of Ln  is a tree e lement(Ln must  be connected) and P stands for one of the words  LEFT ,R IGHT or UNDER.
V is attached to the parent tree of Ln  and becomesautomatically connected after the attachment.
The place of attach-ment  depends on P:If P is LEFT  or R IGHT,  V is attached to the left or to the rightof the value of Ln, in the sibling string of Ln.
In this case Ln  cannotbe the root of an autonomous  tree.
If V is a tree, the root is insertedin  the  s ib l ing  s t r ing  and  the  remainder  of  the  t ree  w i l l  cont inue  to bea t tached to the  root .
A l l  the  inser ted  e lements  a re ,  of  course ,  con-nected  to the  ancestor  e lement  of  Ln .If P is UNDER, the  spec i f ied  data  w i l l  be a t tached in  the  successors t r ing  of  Ln ,  as  i ts  le f tmost  par t ,  accord ing  to the  same pr inc ip lesas  above .
(Z) DELETEthe  computer .Th is  s ta tement  de le tes  data  and  f rees  memory  inI ts  genera l  fo rm isDELETE Vwhere  V is a var iab le .
If V is autonomous ,  the  cor respond ing  dataw i l l  ent i re ly  van ish .
If V is  connected ,  it  must  be connected  to a23tree and the following cases prevail:(a) V is a lexical value.
(In this case it cannot be the rootof an autonomous  tree. )
It is deleted and its descendanttree is attached to the ancestor e lement of V, in the samesibling position as the one that was  occupied by V. Practically,this means  that the successor  string of V gets inserted at V'splace in the sibling string of V, with the remainder  of thetree descending f rom this successor  string.
(b) V is a string.
All its constituents are deleted exceptthe one that might be the root of an autonomous  tree.
Thedescendant trees of the constituents are also deleted.
(c) V is a tree.
It is deleted entirely.
If the terminalelements (elements with no successors) are not terminalin a larger tree in which the tree to be deleted is embedded,the whole remaining descendant structures of these localterminal elements are deleted.
(3) DETACH This statement detaches data f rom a tree andholds it in memory .
Its general fo rm isDETACH Vwhere  V is a connected lexical or tree variable.
After detachment  Vbecomes  automatically autonomous.
The detachment of a string canbe accompl ished with the help of (elementary) statements.
Theeffect of the statement on the parent tree whereupon the detachmenttakes place is the same as in the DELETE case.
Data, however,are not deleted, but separated f rom their parent tree.Z4References:ARMENTI,  A. W. et al  A Data Process ing  Formal i sm(Tech.
Report  283, Lincoln Lab.
,MIT, 1 962)BERKELEY,  E. et alThe Programming Language LISP( In format ion Internat ional  Inc. ,  1964)CHOMSKY, N. On the Notion of "Rule of Grammars"(Proc.
of Symp.
in Appl.
Math.,Vol.
IZ, Am.
Math.
Soc., 1961)GENUYS, F. Commenta i res  ur le language ALGOL(AFCALTI  Seminar  on P rogrammingLanguages, Paris, 1962)IVERSON, K. A Programming Language (John Wileyand Sons, Inc. )MATTHEWS, G. H. Analysis  by Synthesis in the Light ofRecent Developments in the Theory ofGrammar  (Department of ModernLanguages,  MIT, 1964)MOYNE, J.
A.
Restrictive Language Defining System(IBM Data Systems Division, AdvancedComputer Utilization, ACU-011, 1963)NEWELL ,  A. et al IPL-5 Manual (Prentice Hall, Inc., 1961)OETT INGER,  A.G. -KUNO, S. Multiple-path Syntactic Analysis(Proceedings IFIPS 196Z)RADIN,  A.
-ROGOWAY,  H. P. NPL, Highlights of a New ProgrammingLanguage (Comm.
ACM,  Vol.
8, No.
I,1965)YNGVE,  E. et alCOMIT Programmer 's  Reference Manual(MIT-RLE Publ icat ion)
