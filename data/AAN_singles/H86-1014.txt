David D. McDonaldThis is a description of Mumble's approach to natural language generation, excerpted froma technical survey of generation entitled "Natural Language Generation: complezities andtechniques."
which vi i i  appear in Nirenburg (ed.)
Theoret i ca l  and Methodo lo l i ca ll i nes  in  Machine Trans lat ion,  Cambridge University Press, to appear 1986.8.
MULTI-LEVEL.
DESCltiPTIOII DIRECTED GEllERATIOIIThe principal deficit of the direct replacement approach is its difficulties with8ramatar, i.e.
the awkwardness of maintaining an adequate representation of thegrnmm~tical context, or of carrying out grammatically mediated text-level actions uch asproducing the correct syntactic form for an embedded clause.
In other respects, however.the message-directed control flow that drives direct replacement has a great deal torecommend it.
Compared with grammar-directed control schemes, message-directedcontrol is more efficient, since every action will contribute to the eventual production ofthe text.
Message-directed control also gives a pt*nner a very clear semantic basis for itscommunication to the resfization component, since the message can be viewed simply as aset of instructions to accomplish specific goals.
The question then becomes: is there a wayoff elaborating the basic, message-directed framework so as to overcome the deficits thatplague direct replacement approaches while still keeping the computational propertiesthat have made it attractive?A number of generation researchers have independently choosen the same solution:to interpose a level of expficitly linguistic representation between the message and thewords off the text (McDonald 1973.
1984; Kempen and Hoenkamp 1982; Jacobs 1985; Svartout1984).
They befieve that employing a synt~tctic description of the text under constructionis the most effective means of introducing rammatical information and constraints intothe realization process, in particular, that it is a better locus for grammatical processingthan a separately stated, active grammar.The specifics of their individual treatments differ, but a common thread is clearlyidentifiable: Realization is organized as choices made by specialists, where the form of thechoice--the output of the specialist--is a linguistic representation f what is to be said.
i.e.
astructural annotation of the syntactic relations that govern the words (and embeddedconceptual elements) to be said, rather than just a fist of words.
These representations arephrase structures of one or another sort--hierarchies of nodes and constituents--ofessentially the same kind that a theoretical linguist would use.
They employ functionalterms like "subject" and "focus'.
and are most aptly characterized as a kind of "surfacestructure" in the generative Unf~uist's sense, e.g.
they undergo no derivation, and are aproper and complete description of the syntactic properties of the text that is produced.It will be convenient to restrict the present discussion to only one exemplar" of thisapproach: taking advantage of an author's prerogative, I will describe my own (c.f.McDonald 1984: McDonald & Pustejovsky 1985: McDonald, Pustejovsky & Vaughan 1985).
Asit is the historical outgrowth of s direct replacement system.
I it will be useful to organizethe discussion in terms of how it extends that approach and addresses its deficits.
This willI This author's interest in natural laf lguqe Beneration began in 1971 while he wasworking on extentions tothe 8rsmmar and parser in Vinograd's SHItDLU program.
Asalready discussed.
SHN)LU employed a classic direct replacement technique for itsgeneration.
It was observations of the shortcomings of that design that were the originalmotivation for the research.
The influences of systemic gr~mat*e sad data-directedprogrRmmi, gstyle also stem from that time.137be folded into the standard description of how it deals with the three general concerns oneshould have in examining 4t generation system: how it organizes its knowledge ofgfqtmmne; what its control structure is; and what its appreach to realization is.Referring to our appreach as "multi-level, description-directed generation"emphasizes specific features of its architecture and control protocols that ve considerimportant: it is.
however, too large a phrase to use conveniently.
The name of thecomputer program that implements the design.
MUMBLE (McDonald 1977, 1983), will serveas a compact, agentive reference.
Characterizing MUMBLE as multi-level draws attention tothe fact that it carries out operations over three explicitly represented levels ofrepresentation simultaneously: message, surface structure, and word stream.
Description-directed is the name we have given to its control protocol, which is a specialization of thecommon programming technique known as data-directed control.
Under this protocol, thedata in the representations at the three levels is interpreted irectly as instructions to thevirtual machine that constitutes the generator proper.
Since each of theserepresentational structures is also a wtlid description of the text at its own level ofabstraction sad theoretical vocabulary, this characterization f the protocol emphasizesthe fact that the particulars of how the person developing messages or syntactic structureschooses to design them has immediate consequences for the generator's performance(McDonald 1984).
The feedback that this gives a developer has proven to be invaluable inrefining the notations and their computational interpretations in all parts of the system.MUMBL?
's virtual machine is the embedyment of our computational theory ofgeneration.
It consists of three interleaved processes that manage and carry out thetransitions between the representational l yers.
(1) Phrase structure xecution interpretsthe surface structure, maintaining an environment hat defines the grammaticalconstr~iflts active at any moment, and producing the word stream as its incrementaloutput.
(2) Attachment interprets the message, transferring its component units topositions within the surface structure according to the functional relationships betweenthem and their role in the message.
(3) Ren!iT.ation takes the individual elements of themessage into surface structure phrases by selecting from linguistically motivated classesof parameterized alternative forms.
A minor fourth process, operating over the wordstream, morphologically specalizes individual words to suit their syntactic andorthographic ontexts (e.g.
the article"a" going to "an" before vowels); later versions ofMUMBLE that produce speech should be much more active at this level.Thus, as seen by the developer of a text planner that would pass messages to MUMBLEfor it to produce texts from, the virtual machine appears as a very high level, task-specificlanguage, with its OWn operators and intermediate r presentations.
Toa lesser extent hisis true also for the linguist writing generation-oriented grJtmmJteS for MUMBLE to execute,since the virtual machine includes no presumptions as to what specific syntacticcategories, functional relations, or syntactic onstructions the natural anguage includes.Instead it supplies anotation for deVming them in terms of primitive notions including thedominates and proceeds relations of phrase structure, bound thematic relations, configuralregularities such as head or complement from X-bar theory; and the tree combination rulesof Tree Adjoining Grammars (Yrech & Joshi, 1985).As a message-directed design, MUMBLE is best discussed by reference to a concreteexample message, situation, and resulting output text.
To miminize the distraction thstintroducing an actual underlying program from one of our generation projects wouldentail, a relatively obvious excerpt from a message will have to suffice.
The figure shows agenerstod output peragraph describing a legal case from the UMass Counselor Project(McDonald & Pustejovsky 1986).
The structure below it is the message responsible for itssecond sentence, which details the events that were relevant to the court's decision.
Usingthis example, we will look st MUMBLE's knowledge of grammar: how it is numifest, and howit has its effects, interleaving discussion of realization and control at convenient places.138"In the Telex case, Telex was sued by IBM for misappropriating trade secretsabout its product M~rlin.
One of the mnnagers of the Merlin developmentproject, Clemens, left IBM to work for Telex, where he helped to developTelex's competing product, the 6830.
The key fact in the case was that Clemensbrought a copy of the source code with him when he switched jobs.
The courtheld for IBM.
"(temporal-sequence(left=to-work-for (#<role #<project-nmnager Merlin>> #<Clemens>)(named=company #<IBM>)(named=company W<Telex>))(helped-to-develop (nAmed-porsen Z<Clements>)(# <kind product> # <competition-by # <Telex>>#<name "6530">) ))As previously discussed, one of the concomitant features of a message-directedapproach is that items 2 directly from the underlying program are part of the messages.
(These are indicated here by enclosing angle brackets, #<...>.)
Once in a message, suchitems become instructions to the generator, sad as such need interpretations, i.e.
ssseciatedfunctions from the item, and the linguistic and pragmatic environment, to the surfacespecification of some text or text fragment.
However.
considered in terms of the space oftexts that might reA.Te them.
real program objects are large and vague as present dayprogrnmmers tend to use them: they stand in many different relationships to other objectsand to the underlying program's state, and consequently can have many differentinterpretations depending on the context and the speaker's intent.We take it to be pert of the job of a text planner to choose among these relationshipsand to indicate in the message the perspective from which an object is to be viewed.
(Theperspective on the first occuranco f Clemens, for example, is indicated to be his role as(former) manager of the Merlin project.)
Adopting a specific perspective often amountsto selecting a specific wording (often just of the lexical head, e.g.
"manager"; but alsoentire conventional phrases uch as "leave <employerl> to work for <employer2>").
Theseexamples indicate that runny of the terms in a message are surface lexical relations (e.g.
"helped to develop") rather than a more abstract conceptual vocabulary; this has thedeliberate corolhu'y that syntsctic realization will usually occur after key words have beenchosen.
The text planner must therefore understand a good deal about how alternativeword choices cover the semantic fields of the situation it is trying to communicate, sadwhat emphasis and what presupposed inferencing by the audience a given choice ofwording will convey.
This appears to us to be a choice that is best made at a conceptuallevel (i.e.
during message construction), since it does not depend in any crutial way on thedetails of the grammatical environment, the arguments of Dsnlos (1984) notwithstanding(cf.
McDonald et al 1986).Even though the key lexical choices for an item will have occurred before it has beensyntactically realized, these massage-level lexical decisions can drew on the grammaticalcontext in which the text for it is going to occur.
In particular, grammatical constraintsimposed by the syntactic relations in which the text will stand will filter out grammatically2 The word "item".
and at other times the word "object", is intended as a general term thatdenotes representational data structures in an underlying program without regard to thekind of real world entity that they model: individuals, kinds, relations, constraints,attributes, tates, actions, events, etc.139inconsistent possibilities from the planner's choice set.3 This is possible because therealization of messe4es is hierarchical, following the message's compositional structure topdown.
i.e.
the .message is interl~reted much as a conventional9roaram would be.
Thesurface syntactic reafizafion of the higher, dominating conceptual elements of the messageis thus available to define and constrain the interpretations (i.e.
linguistic reafizatioas) ofthe lower, more embedded elements.
This protocol for "evaluation" of arguments i knownas normal order, and is in direct contrast with the previously discussed applicative orderprotocol used in most direct rephtcement designs.The perspective that the text planner chooses to impose on an item from theunderlying program is represented st the messsge-level by designating the ~sfizationclass to be used for it.
Realization classes are MUMBLE's equivalent of the "speciafistprograms" in direct replacement.
They are linguistic entities rather than conceptual, andare developed by the designer of the grammar using control end dats structures defined inthe virtual m~chine.
New underlying programs are interfaced to MUMBLE by developing s(possibly very minimal) text planner eJ1d assi~nin~ program items (or item types) to ore-defined reaiizstion classes.
A relatively seE-contained example of s class, "locative-relation", developed originally for use with Jeff Conklin's program for describing picturesof house scenes (see Conklin, 1984) is shown below:(defiae=retlizatioa=chtss LOCATIVE-RElATION:parameters  ( re la t ion  ar l l l  arlg2):choices( (At g l - is-Relation-Ars2)"The driveway is next to the house"clause focus(argl)  )(Arg2-has- -Arg l -Relst ion-Arg2)"The house has a driveway in front of it"clause focus( i tS2)  )(There- i s -a -Arg  l -Re lat ioa-Arg2 )"There is s driveway next to the house"root-c lause shifts-focus-to(grgl  ) )( (Re la t ion -Ar l l2 - i s -Arg l )"Next o the house is s driveway"root-clause shi f ts - focus-to(srgl )f ina l -pos i t ioa(a tg l  ) )( (with-Ar'g l -Relation-At-g2)"...with a driveway next to it"prepp mod i f ie r - to (arg l )  ))3 This filtering is automatic ff the relevant parts of the text planner are implementedusing the same abstract control device as MUMBLE uses for its own decisions, i.e.parameterized, pre-computed annotated choice sets of the sort employed for realizationclasses (see text).
The descriptions of the fingustic haracter and potential of the choicesthat the annotation provides are the basis for filtering out incompatible choices ongrammatical grounds, just as occurs at the syntactic level in selections within a realizationclass.This technique is proving convenient in our own work with some simple textplanners; however we can see a point where the requirement that the full set ofalternatives be pre-computed may be unnecessarily limiting or possibly psychologicallyunreafistic, in which case an alternative design, presumably involving dynamicconstruction of the choices, will be needed and an alternative means of imposing thegrammatical constraints will have to be found.
For a discussion of another planning-levelcontrol paradigm that has been used with Mumble.
see Conklin (1984) or McDonald &Conklin (1983).140The choices grouped together in a realization class will all be effective incommunicating the conceptual item assigned to the class, but each vi i i  be appropriate for adifferent context.
This context-sensitivity is indicated in the annotation accompanying thechoice, for example "focus', which vi i i  dictate the grammatical cases and surface ordergiven to the arguments, or the functional role "modifier-to'.
which will lead to realizationas a post.nominal prepositional phrase.
These annotating characteristif~ indicate thecontexts in which a choice can be used.
They act both as passive descriptions of the choicethat are enmined by other routines, and as active test predicates that sample and definethe pragmatic situation in the text planner or underlying program.
Such terms are thebasis of MUMBLE's model of language use--the effects that can be achieved by using aparticular linguistic form; as such they play the same kind of role as the "choosers" or thecontrolling functional features in a systemic grammar like l~lA.n's NIGEI...The surface structure level, the source of grammatical constraints on realization, isassembled top down as the consequence of the interpretation and realization of the items inthe message.
In the example message (repeated below), the topmost i em is a "sequence" oftwo steps, each of which is a lexicalized relation over several program objects on which aparticular perspective has been imposed.
(temporel-soquence(left-to-work-for ( # <role # <project-ramMer Merlin,> # <name "Clemens" >)(named-company # <IBM,)(named-company # <Telex>))(helped-to-develop (named-person ~ ~lements>)(#<kind product> #<competition-by #<Telex>># ms,he "6830">) )One of the goals of a multi-level approach is to distribute the text construction effortand knowledge throughout the system so that no level is forced to do more of the work thanit has the natural capacity for.
Thus for example in the interpretation of the first item themessage, temporal sequence.
MUMBLE is careful to avoid taking steps that would exceed theintent of the planner's instruction by being overly specific linguistically: As a messene-level instruction, temporal-sequence says nothing about whether the items it dominatesshould appear as two sentences or one: it says simply that they occured after one anotherin time and that their realizations should indicate this.
Since there is no special emphasismarked, this can be done by having them appear in the text in the order that they have inthe message.
The decision about their seateatial texture is postponed until a linguisticcontext is available and the decision can be made on an informed basis.This delay is achieved by having the Attachment process, which moves item from themessMe to the surface structure according to their functional roles, wait to position thesecond item of the sequence until the first has been realized.
Only the first item will bemoved into the surface structure initially, and it will appear as the contents of the secondsentence as shown below.
Note that a message item is not realized until it has a position.and then not until all of the items above it and to its left have been realized and the itemhas been reached by the Phrase Structure Execution process that is traversing the surfacestructure tree and coordinating all of these activities.
By enforcing this discipline one issere that all the grammatical constraints that could affect an item's realization will havebeen determined before the realization occurs, and consequently the virtual machine doesnot need to make provisions for changing an item's realization after it is finished (seefigure one).Considered as a function, a realization class such as "Left-to-work-for" specifies thesurface form of a grammatically coherent text fragment, which is instsntiated when the?
class is executed and a specific version of that phrase selected.
Given its lexical specificity.such a class is obviously not primitive.
It is derived by sucessive specializations of two.linguistically primitive subcstegorization frames: one built around the verb class that141includes "leave" (shown below) and the other around the class containing "work for".
Thespecialization is done by a definition-time currying operation wherein arguments to thesubcategorization frames are bound to constants (e.g.
the verb "leave"), producing newrealization classes of reduced arity.
On its face, a class built sreund variants on the phrase"<employee> leaves <companyl, to work for <company2>" is more appropriate to s semanticgrammar (cf.
Burton & Brown 1977) than to a conventional syntactic phrase structuregrammar.
This choice of linguistic modularity does however eflect the actual conceptualmodularity of the underlying program that drives the example.
4 and we believe this is animportant benefit methodologically.
(define-phrase subject-verb-locative (subj vb loc):specification (clausesubject subjpredicate (vpverb vblocative-complement loc )) )Comparing MUMBLE's organization of grammatical knowledge with that of the twogrammtr-directed approaches that have been discussed, we see that it resembles an ATNsomewhat and a NIGEL-style systemic grammar hardly at all.
ATN designs are based onprocedurally encoded surface structures, which are executed irectly; MUMBLE representssurface structure xplicitly and has it interpreted.
ATNs select he surface form to be usedvia a recursive, phrase by phrase, topdown and left to r ight consideration of the total set offorms the grammar makes available (i.e.
alternative arc sequences), and queries the stateof the underlying program to see which form is most appropriate.
MUMBLE also preceedsrecursively, topdown and left to right, but the recursion is on the structure of an explicitlyrepresented message.
Conceptual items or item Wpes.
through the the realization classesthat the planner associates with them.
control the selection and instantiation of theappropriate surface forms directly.MUMBLE "packages" linguistic relations into constituent phrases: it does not provide anunbundled, feature-based representation f them as a systemic grammar does.
It cannot.for example, reason about tense or thematic focus apart from a surface structureconfiguration that exhibits them.
This design choice is deliberate, and reflects what wetake to be a strong hypothesis about the character of linguistic knowledge.
Thishypothesis roughly that the space of vafid feature configurations (to use systemic terms)is smaller, less arbitrary, and more structured than a feature-heap notation can express(see McDonald et al 1986 for details).
Sitxce our notation for surface structure incorporatesfunctional annotations as well as categorical, and especially since it is only one of threerepresentational levels operated over in coordination, we believe that organizinglinguistic reasoning in terms of packaged, natural sets of relations will provide a great dealof leverage in research on text planning sad computational theories of language use andcommunicative intention.Nowhere in MUMBLE is there a distinct grammar in the sense of a set of rules forderiving linguistic forms from primitive features.
Rather it manipulates a collection of4 As it hippens, Leave-to-work-at is a primitive conceptual relation in the legal reasoningsystem that serves here as the underlying program (Rissland & Ashley, submitted).
Thecausal model that the phrase evokes in a person, i.e.
that working for the new company isthe reason why the employee is leaving (cf.
"John washed his car to impress hisgirlfriend") is encapsulated in this relation, and suppresses the causal model fromconsideration by the legal reasoner's rules.
This encapsulation is defiberate.
Reasoningsystems should function at the conceptual level best suited to the task.
This does howeverimply that some component of the natural language interface must now bridge theconceptual ground between the internal model and the lexical options of the language; seePustejovsky (this volume) for a discussion of how this may be done.142predefined linguistic objects-the minimal surfsce phrases of the language and thecomposite phrases derived from them.
The phrases are grouped into the reatization classes.the projected linguistic images of different conceptual typos and perspectives.
Whenselected and instsatiated to form the surface structure they take on an active role (throughinterpretation by the three processes), defining the order of further actions by thegenerator, defining the contraints on the realization of the embedded items from themessage now at some of its leaf positions, and defining the points whore it my be extendedthrough further attachments from the message level.
The figure below shows a snapshotof the surface structure for the first part of the text in the example, and can illustrate thesepoints.
At the moment of this snapshot, the Phrase Structure Execution process hastraversed the structure up to the item #<telex> and produced the text shown; its next actionwill be to have that item realized, whereupon the realizing phrase (an NP like the one for#<IBM>) will replace #~telex> in the surface structure and the process will traverse it andmove on (see figure two).The first thing to consider is the differences in the details of this surface structurerepresentation compared with the more conventional trees used by generativegrammarians.
Two of these are significant in this discussion.
The first is the presence offunctional annotations over each of the constituents (indicated by labels inside squarebrackets).
Terms like "subject" or "prep-complement" are used principally to summarizethe grammatical relations that the constituents are in by warrant of their configurationalpositions, which makes these labels the source of most of the grammatical constraints onmessage item realizations.
The functional annotations also play a role in the dynamicproduction of the word stream: Here this includes providing access to the subject when themorphological process needs to determine the person/number agreement for tensed verbs.and supplying rammatical function words like "of" or the infinitive marker "to" directlyinto the word stream.5Formally the representation is not a tree but a sequential stream (as indicated by thearrows): a stream of annotated positions that are interpreted, in order, as instructions tothe Phra~ Structure Execution process.
The grammar writer defines the interpretation anannotating label is to have.
e.g.
specifying control of morphological effects or functionwords, constraints obe imposed on realizations, or establishing salient reference positions(like the subject).
Various useful technical details are expedited by defining the surfacestructure as a stream rather than s tree (see McDonald & Pustejovsky 1985b).
The streamdesign provides  clean technical basis for the work of the Attachment process, whichextends the surface structure through the addition of successive items from the message.The extensions are integrated into the active grammatical environment by breaking inter-position links in the stream and kniting in the new items along with any additionalcovering syntactic nodes or functional constituent positions needed to correctlycharacterize the linguistic relationship of the new material to the old.In the present example, the second item of the message's temporal sequence item.
thelexicalized relation "helpedoto-develop ".
remains unattached-qts position in the surface5 Introducing the closed class words that indicate syntactic function into the text as anactive consequence of traversing the corresponding part of the surface structure tree.rather than having them first appear in constituent positions at the tree's leaves, is anexperimentally motivated esign decision.
It is intended to explore the consequences ofemploying computational grammars that distinquish the sources of closed and open classwords: positing that the open class words have a conceptual source and the closed class"function" words a purely syntactic source.
The two word classes are distinguishedpsycholinguistically, e.g.
they have very different behaviors in exchange rrors (seeGarrett 1975); if  this empirical difference can be given a successful computationalaccount, then that account can serve to anchor other aspects of the grammar's design andeventually lead to psycholinguistic predictions derived from the consequences of thecomputational design (McDonald 1984).143structure unestablished--until enough linguistic context has been established that areasonable decision can be made about stylistic matters, e.g.
whether the item shouldappear ss an extension of the first item's entence or start its own.
Since the functionalconstraints on a temporal sequence's realization prohibit embedding the second itemanywhere within the first, the only legal "attachment points" for it (i.e.
links it could beknit in st) are on the trailing edge of the first item's entence or as a following sentence.In terms of our theory of generation, attachment points are grAMmAtical properties ofphrasaJ configurations: places where the existing surface structure my be extended bysplicing in "auxiliary" phrases (i.e.
realizations of message items), for exsJnple adding aninitial adjunct phrase to s clause or embedding the NP headed by "mana41er" inside theselector "one of".
Every phrasal pattern (as indicated by the annotating Isbeis) hssspecific places where it can be extended and still be a grammatically valid surfacestructure; the gr~unmstical theory of such extensions is developed in studies of TreeAdjoining Grammars (Kroch & Joshi 1985).What attachment points exist is a matter determined by the grammatical facts of thelanguege; which points are actually used in s given situation is s matter of stylisticconvention (see McDonald & Pustejovsky 1985a).
In this case there is a very natural.compactly realized relationship between the first and second events: the final item in therealization of the first event, the Telex company, happens to be where the second eventoccurred.
As neither clause is particularly complex syntactically, the attachment pointthat extends the final NP of the first event with a relative clause is taken and the secondevent knit into the surface structure there, to be realized when that position is reached inthe stream.144.
.
.
.
.
.
."
!
sentence  \] ~-- .
.
.
.
.
.
( l e f t - to -work - fo r  .
.
.
)The first item of the message in a top level position of thesurface structure annotated as a "sentence"FIGURE ONE> \[ sentence 1 ~j clause ~-\[ subject \]\[head \] )\[partitive \]one .
/NP  <spe .)
\\[head \]-----Y\[partitive \]manaqer ~,~NP (indiv.
)\[classif ying-name \]Merlin~- \[ apposative \]\[propername-head \]Clemens\[classifier \] \[head \]development project~- \[ins/modal \] ;\[predicate \]\[verb \] \[location \] \[reason-inf\]l e ~  NP~,,..,.
g/PP\[propername-head \] \[prep Hp-ob j  \]IBM for #<telex,Sa id  =o fax- :"... One of the managers of the Merlin development project, Clemens left IBM for 11"FIGURE TWO145
