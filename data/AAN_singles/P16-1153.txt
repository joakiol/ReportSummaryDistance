Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 1621?1630,Berlin, Germany, August 7-12, 2016.c?2016 Association for Computational LinguisticsDeep Reinforcement Learning with a Natural Language Action SpaceJi He?, Jianshu Chen?, Xiaodong He?, Jianfeng Gao?, Lihong Li?Li Deng?and Mari Ostendorf?
?Department of Electrical Engineering, University of Washington, Seattle, WA 98195, USA{jvking, ostendor}@uw.edu?Microsoft Research, Redmond, WA 98052, USA{jianshuc, xiaohe, jfgao, lihongli, deng}@microsoft.comAbstractThis paper introduces a novel architec-ture for reinforcement learning with deepneural networks designed to handle stateand action spaces characterized by naturallanguage, as found in text-based games.Termed a deep reinforcement relevancenetwork (DRRN), the architecture repre-sents action and state spaces with sepa-rate embedding vectors, which are com-bined with an interaction function to ap-proximate the Q-function in reinforce-ment learning.
We evaluate the DRRNon two popular text games, showing su-perior performance over other deep Q-learning architectures.
Experiments withparaphrased action descriptions show thatthe model is extracting meaning ratherthan simply memorizing strings of text.1 IntroductionThis work is concerned with learning strategiesfor sequential decision-making tasks, where a sys-tem takes actions at a particular state with the goalof maximizing a long-term reward.
More specifi-cally, we consider tasks where both the states andthe actions are characterized by natural language,such as in human-computer dialog systems, tutor-ing systems, or text-based games.
In a text-basedgame, for example, the player (or system, in thiscase) is given a text string that describes the cur-rent state of the game and several text strings thatdescribe possible actions one could take.
After se-lecting one of the actions, the environment state isupdated and revealed in a new textual description.A reward is given either at each transition or in theend.
The objective is to understand, at each step,the state text and all the action texts to pick themost relevant action, navigating through the se-quence of texts so as to obtain the highest long-term reward.
Here the notion of relevance is basedon the joint state/action impact on the reward: anaction text string is said to be ?more relevant?
(toa state text string) than the other action texts iftaking that action would lead to a higher long-term reward.
Because a player?s action changesthe environment, reinforcement learning (Suttonand Barto, 1998) is appropriate for modeling long-term dependency in text games.There is a large body of work on reinforcementlearning.
Of most interest here are approachesleveraging neural networks because of their suc-cess in handling a large state space.
Early work ?TD-gammon ?
used a neural network to approxi-mate the state value function (Tesauro, 1995).
Re-cently, inspired by advances in deep learning (Le-Cun et al, 2015; Hinton et al, 2012; Krizhevskyet al, 2012; Dahl et al, 2012), significant progresshas been made by combining deep learning withreinforcement learning.
Building on the approachof Q-learning (Watkins and Dayan, 1992), the?Deep Q-Network?
(DQN) was developed and ap-plied to Atari games (Mnih et al, 2013; Mnih etal., 2015) and shown to achieve human level per-formance by applying convolutional neural net-works to the raw image pixels.
Narasimhan etal.
(2015) applied a Long Short-Term Memorynetwork to characterize the state space in a DQNframework for learning control policies for parser-based text games.
More recently, Nogueira andCho (2016) have also proposed a goal-driven webnavigation task for language based sequential de-cision making study.
Another stream of work fo-cuses on continuous control with deep reinforce-ment learning (Lillicrap et al, 2016), where anactor-critic algorithm operates over a known con-tinuous action space.Inspired by these successes and recent work us-ing neural networks to learn phrase- or sentence-1621level embeddings (Collobert and Weston, 2008;Huang et al, 2013; Le and Mikolov, 2014;Sutskever et al, 2014; Kiros et al, 2015), wepropose a novel deep architecture for text under-standing, which we call a deep reinforcement rele-vance network (DRRN).
The DRRN uses separatedeep neural networks to map state and action textstrings into embedding vectors, from which ?rel-evance?
is measured numerically by a general in-teraction function, such as their inner product.
Theoutput of this interaction function defines the valueof the Q-function for the current state-action pair,which characterizes the optimal long-term rewardfor pairing these two text strings.
The Q-functionapproximation is learned in an end-to-end mannerby Q-learning.The DRRN differs from prior work in that ear-lier studies mostly considered action spaces thatare bounded and known.
For actions described bynatural language text strings, the action space isinherently discrete and potentially unbounded dueto the exponential complexity of language with re-spect to sentence length.
A distinguishing aspectof the DRRN architecture ?
compared to sim-ple DQN extensions ?
is that two different typesof meaning representations are learned, reflectingthe tendency for state texts to describe scenes andaction texts to describe potential actions from theuser.
We show that the DRRN learns a continuousspace representation of actions that successfullygeneralize to paraphrased descriptions of actionsunseen in training.2 Deep Reinforcement RelevanceNetwork2.1 Text Games and Q-learningWe consider the sequential decision making prob-lem for text understanding.
At each time stept, the agent will receive a string of text that de-scribes the state st(i.e., ?state-text?)
and severalstrings of text that describe all the potential ac-tions at(i.e., ?action-text?).
The agent attempts tounderstand the texts from both the state side andthe action side, measuring their relevance to thecurrent context stfor the purpose of maximizingthe long-term reward, and then picking the bestaction.
Then, the environment state is updatedst+1= s?according to the probability p(s?|s, a),and the agent receives a reward rtfor that partic-ular transition.
The policy of the agent is definedto be the probability pi(at|st) of taking action atat state st.
Define the Q-function Qpi(s, a) as theexpected return starting from s, taking the actiona, and thereafter following policy pi(a|s) to be:Qpi(s, a) = E{+??k=0?krt+k???
?st= s, at= a}where ?
denotes a discount factor.
The optimalpolicy and Q-function can be found by using theQ-learning algorithm (Watkins and Dayan, 1992):Q(st, at)?
Q(st, at)+ (1)?t?
(rt+ ?
?maxaQ(st+1, a)?Q(st, at))where ?tis the learning rate of the algorithm.
Inthis paper, we use a softmax selection strategy asthe exploration policy during the learning stage,which chooses the action atat state staccordingto the following probability:pi(at= ait|st) =exp(?
?Q(st, ait))?|At|j=1exp(?
?Q(st, ajt)), (2)where Atis the set of feasible actions at state st,aitis the i-th feasible action in At, | ?
| denotes thecardinality of the set, and ?
is the scaling factor inthe softmax operation.
?
is kept constant through-out the learning period.
All methods are initializedwith small random weights, so initial Q-value dif-ferences will be small, thus making the Q-learningalgorithm more explorative initially.
As Q-valuesbetter approximate the true values, a reasonable ?will make action selection put high probability onthe optimal action (exploitation), but still maintaina small exploration probability.2.2 Natural language action spaceLet S denote the state space, and let A denote theentire action space that includes all the unique ac-tions over time.
A vanilla Q-learning recursion (1)needs to maintain a table of size |S| ?
|A|, whichis problematic for a large state/action space.
Priorwork using a DNN in Q-function approximationhas shown high capacity and scalability for han-dling a large state space, but most studies haveused a network that generates |A| outputs, eachof which represents the value of Q(s, a) for a par-ticular action a.
It is not practical to have a DQNarchitecture of a size that is explicitly dependenceon the large number of natural language actions.Further, in many text games, the feasible actionset Atat each time t is an unknown subset of theunbounded action space A that varies over time.1622For the case where the maximum number ofpossible actions at any point in time (maxt|At|)is known, the DQN can be modified to simply usethat number of outputs (?Max-action DQN?
), asillustrated in Figure 1(a), where the state and ac-tion vectors are concatenated (i.e., as an extendedstate vector) as its input.
The network computesthe Q-function values for the actions in the currentfeasible set as its outputs.
For a complex game,maxt|At| may be difficult to obtain, because Atis usually unknown beforehand.
Nevertheless, wewill use this modified DQN as a baseline.An alternative approach is to use a function ap-proximation using a neural network that takes astate-action pair as input, and outputs a single Q-value for each possible action (?Per-action DQN?in Figure 1(b)).
This architecture easily handles avarying number of actions and represents a secondbaseline.We propose an alternative architecture for han-dling a natural language action space in sequentialtext understanding: the deep reinforcement rele-vance network (DRRN).
As shown in Figure 1(c),the DRRN consists of a pair of DNNs, one forthe state text embedding and the other for actiontext embeddings, which are combined using a pair-wise interaction function.
The texts used to de-scribe states and actions could be very differentin nature, e.g., a state text could be long, contain-ing sentences with complex linguistic structure,whereas an action text could be very concise orjust a verb phrase.
Therefore, it is desirable to usetwo networks with different structures to handlestate/action texts, respectively.
As we will see inthe experimental sections, by using two separatedeep neural networks for state and action sides, weobtain much better results.2.3 DRRN architecture: Forward activationGiven any state/action text pair (st, ait), the DRRNestimates the Q-function Q(st, ait) in two steps.First, map both stand aitto their embedding vec-tors using the corresponding DNNs, respectively.Second, approximate Q(st, ait) using an interac-tion function such as the inner product of the em-bedding vectors.
Then, given a particular state st,we can select the optimal action atamong the setof actions via at= arg maxaitQ(st, ait).More formally, let hl,sand hl,adenote the l-thhidden layer for state and action side neural net-works, respectively.
For the state side, Wl,sandbl,sdenote the linear transformation weight ma-trix and bias vector between the (l?
1)-th and l-thhidden layers.
Wl,aand bl,adenote the equivalentparameters for the action side.
In this study, theDRRN has L hidden layers on each side.h1,s= f(W1,sst+ b1,s) (3)hi1,a= f(W1,aait+ b1,a) (4)hl,s= f(Wl?1,shl?1,s+ bl?1,s) (5)hil,a= f(Wl?1,ahil?1,a+ bl?1,a) (6)where f(?)
is the nonlinear activation function atthe hidden layers, which, for example, could bechosen as tanh (x), and i = 1, 2, 3, ..., |At| isthe action index.
A general interaction functiong(?)
is used to approximate the Q-function values,Q(s, a), in the following parametric form:Q(s, ai; ?)
= g(hL,s, hiL,a)(7)where ?
denotes all the model parameters.
The in-teraction function could be an inner product, a bi-linear operation, or a nonlinear function such as adeep neural network.
In our experiments, the innerproduct and bilinear operation gave similar results.For simplicity, we present our experiments mostlyusing the inner product interaction function.The success of the DRRN in handling a natu-ral language action space A lies in the fact thatthe state-text and the action-texts are mapped intoseparate finite-dimensional embedding spaces.The end-to-end learning process (discussed next)makes the embedding vectors in the two spacesmore aligned for ?good?
(or relevant) action textscompared to ?bad?
(or irrelevant) choices, result-ing in a higher interaction function output (Q-function value).2.4 Learning the DRRN: Back propagationTo learn the DRRN, we use the ?experience-replay?
strategy (Lin, 1993), which uses a fixedexploration policy to interact with the environmentto obtain a sample trajectory.
Then, we randomlysample a transition tuple (sk, ak, rk, sk+1), com-pute the temporal difference error for sample k:dk= rk+?maxaQ(sk+1, a; ?k?1)?Q(sk, ak; ?k?1),and update the model according to the recursions:Wv,k= Wv,k?1+ ?kdk?
?Q(sk, ak; ?k?1)?Wv(8)bv,k= bv,k?1+ ?kdk?
?Q(sk, ak; ?k?1)?bv(9)1623??
?????????
?????????
(?, ??)?????
(?, ??)??
(?, ??
)(a) Max-action DQN??
?????????
?????????
(?, ??)?????
(?, ??)??
(?, ??
)(b) Per-action DQN?
?pairwise interaction function (e.g.
inner product)?????,???,???
(?, ??)??,????,??
(c) DRRNFigure 1: Different deep Q-learning architectures: Max-action DQN and Per-action DQN both treatinput text as concantenated vectors and compute output Q-values with a single NN.
DRRN models textembeddings from state/action sides separately, and use an interaction function to compute Q-values.Figure 2: PCA projections of text embedding vectors for state and associated action vectors after 200,400 and 600 training episodes.
The state is ?As you move forward, the people surrounding you suddenlylook up with terror in their faces, and flee the street.?
Action 1 (good choice) is ?Look up?, and action 2(poor choice) is ?Ignore the alarm of others and continue moving forward.
?for v ?
{s, a}.
Expressions for?Q?Wv,?Q?bvandother algorithm details are given in supplementarymaterials.
Random sampling essentially scram-bles the trajectory from experience-replay into a?bag-of-transitions?, which has been shown toavoid oscillations or divergence and achieve fasterconvergence in Q-learning (Mnih et al, 2015).Since the models on the action side share the sameparameters, models associated with all actions areeffectively updated even though the back propaga-tion is only over one action.
We apply back prop-agation to learn how to pair the text strings fromthe reward signals in an end-to-end manner.
Therepresentation vectors for the state-text and theaction-text are automatically learned to be alignedwith each other in the text embedding space fromthe reward signals.
A summary of the full learningalgorithm is given in Algorithm 1.Figure 2 illustrates learning with an innerproduct interaction function.
We used PrincipalComponent Analysis (PCA) to project the 100-dimension last hidden layer representation (beforethe inner product) to a 2-D plane.
The vector em-beddings start with small values, and after 600episodes of experience-replay training, the embed-dings are very close to the converged embedding(4000 episodes).
The embedding vector of the op-timal action (Action 1) converges to a positive in-ner product with the state embedding vector, whileAction 2 converges to a negative inner product.3 Experimental Results3.1 Text gamesText games, although simple compared to videogames, still enjoy high popularity in online com-munities, with annual competitions held online1624Algorithm 1 Learning algorithm for DRRN1: Initialize replay memory D to capacity N .2: Initialize DRRN with small random weights.3: Initialize game simulator and load dictionary.4: for episode = 1, .
.
.
,M do5: Restart game simulator.6: Read raw state text and a list of action text from the simulator, and convert them to representations1and a11, a21, .
.
.
, a|A1|1.7: for t = 1, .
.
.
, T do8: Compute Q(st, ait; ?)
for the list of actions using DRRN forward activation (Section 2.3).9: Select an action atbased on probability distribution pi(at= ait|st) (Equation 2)10: Execute action atin simulator11: Observe reward rt.
Read the next state text and the next list of action texts, and convert them torepresentation st+1and a1t+1, a2t+1, .
.
.
, a|At+1|t+1.12: Store transition (st, at, rt, st+1, At+1) in D.13: Sample random mini batch of transitions (sk, ak, rk, sk+1, Ak+1) from D.14: Set yk={rkif sk+1is terminalrk+ ?maxa?
?Ak+1Q(sk+1, a?
; ?))
otherwise15: Perform a gradient descent step on (yk?Q(sk, ak; ?
))2with respect to the network parameters?
(Section 2.4).
Back-propagation is performed only for akeven though there are |Ak| actionsat time k.16: end for17: end forsince 1995.
Text games communicate to playersin the form of a text display, which players haveto understand and respond to by typing or click-ing text (Adams, 2014).
There are three typesof text games: parser-based (Figure 3(a)), choice-based (Figure 3(b)), and hypertext-based (Figure3(c)).
Parser-based games accept typed-in com-mands from the player, usually in the form ofverb phrases, such as ?eat apple?, ?get key?, or?go east?.
They involve the least complex ac-tion language.
Choice-based and hypertext-basedgames present actions after or embedded withinthe state text.
The player chooses an action, andthe story continues based on the action taken atthis particular state.
With the development of webbrowsing and richer HTML display, choice-basedand hypertext-based text games have become morepopular, increasing in percentage from 8% in 2010to 62% in 2014.1For parser-based text games, Narasimhan etal.
(2015) have defined a fixed set of 222 actions,which is the total number of possible phrases theparser accepts.
Thus the parser-based text game isreduced to a problem that is well suited to a fixed-1Statistics obtained from http://www.ifarchive.orgGame Saving John Machine ofDeathText game type Choice Choice &HypertextVocab size 1762 2258Action vocab size 171 419Avg.
words/description 76.67 67.80State transitions Deterministic Stochastic# of states (underlying) ?
70 ?
200Table 1: Statistics for the games ?Saving John?and and ?Machine of Death?.action-set DQN.
However, for choice-based andhypertext-based text games, the size of the actionspace could be exponential with the length of theaction sentences, which is handled here by using acontinuous representation of the action space.In this study, we evaluate the DRRN with twogames: a deterministic text game task called ?Sav-ing John?
and a larger-scale stochastic text gamecalled ?Machine of Death?
from a public archive.2The basic text statistics of these tasks are shown inTable 1.
The maximum value of feasible actions(i.e., maxt|At|) is four in ?Saving John?, and ninein ?Machine of Death?.
We manually annotate fi-2Simulators are available at https://github.com/jvking/text-games1625(a) Parser-based (b) Choiced-based (c) Hypertext-basedFigure 3: Different types of text gamesnal rewards for all distinct endings in both games(as shown in supplementary materials).
The mag-nitude of reward scores are given to describe sen-timent polarity of good/bad endings.
On the otherhand, each non-terminating step we assign with asmall negative reward, to encourage the learner tofinish the game as soon as possible.
For the textgame ?Machine of Death?, we restrict an episodeto be no longer than 500 steps.In ?Saving John?
all actions are choice-based,for which the mapping from text strings to atareclear.
In ?Machine of Death?, when actions arehypertext, the actions are substrings of the state.In this case stis associated with the full state de-scription, and atare given by the substrings with-out any surrounding context.
For text input, weuse raw bag-of-words as features, with differentvocabularies for the state side and action side.3.2 Experiment setupWe apply DRRNs with both 1 and 2 hidden layerstructures.
In most experiments, we use dot-product as the interaction function and set thehidden dimension to be the same for each hid-den layer.
We use DRRNs with 20, 50 and100-dimension hidden layer(s) and build learn-ing curves during experience-replay training.
Thelearning rate is constant: ?t= 0.001.
In testing, asin training, we apply softmax selection.
We recordaverage final rewards as performance of the model.The DRRN is compared to multiple baselines:a linear model, two max-action DQNs (MA DQN)(L = 1 or 2 hidden layers), and two per-actionDQNs (PA DQN) (again, L = 1, 2).
All base-lines use the same Q-learning framework with dif-ferent function approximators to predict Q(st, at)given the current state and actions.
For the lin-ear and MA DQN baselines, the input is the text-based state and action descriptions, each as a bagof words, with the number of outputs equal tothe maximum number of actions.
When there arefewer actions than the maximum, the highest scor-ing available action is used.
The PA DQN baselineEval metric Average rewardhidden dimension 20 50 100Linear 4.4 (0.4)PA DQN (L = 1) 2.0 (1.5) 4.0 (1.4) 4.4 (2.0)PA DQN (L = 2) 1.5 (3.0) 4.5 (2.5) 7.9 (3.0)MA DQN (L = 1) 2.9 (3.1) 4.0 (4.2) 5.9 (2.5)MA DQN (L = 2) 4.9 (3.2) 9.0 (3.2) 7.1 (3.1)DRRN (L = 1) 17.1 (0.6) 18.3 (0.2) 18.2 (0.2)DRRN (L = 2) 18.4 (0.1) 18.5 (0.3) 18.7 (0.4)Table 2: The final average rewards and standarddeviations on ?Saving John?.takes each pair of state-action texts as input, andgenerates a corresponding Q-value.We use softmax selection, which is widelyapplied in practice, to trade-off exploration vs.exploitation.
Specifically, for each experience-replay, we first generate 200 episodes of data(about 3K tuples in ?Saving John?
and 16K tuplesin ?Machine of Death?)
using the softmax selec-tion rule in (2), where we set ?
= 0.2 for the firstgame and ?
= 1.0 for the second game.
The ?
ispicked according to an estimation of range of theoptimal Q-values.
We then shuffle the generateddata tuples (st, at, rt, st+1) update the model asdescribed in Section 2.4.
The model is trained withmultiple epochs for all configurations, and is eval-uated after each experience-replay.
The discountfactor ?
is set to 0.9.
For DRRN and all baselines,network weights are initialized with small randomvalues.
To prevent algorithms from ?remember-ing?
state-action ordering and make choices basedon action wording, each time the algorithm/playerreads text from the simulator, we randomly shufflethe list of actions.3This will encourage the algo-rithms to make decisions based on the understand-ing of the texts that describe the states and actions.3.3 PerformanceIn Figure 4, we show the learning curves of dif-ferent models, where the dimension of the hid-3When in a specific state, the simulator presents the pos-sible set of actions in random order, i.e.
they may appear in adifferent order the next time a player is in this same state.16260 500 1000 1500 2000 2500 3000 3500Number of episodes-10-505101520AveragerewardDRRN (2-hidden)DRRN (1-hidden)PA DQN (2-hidden)MA DQN (2-hidden)(a) Game 1: ?Saving John?0 500 1000 1500 2000 2500 3000 3500 4000Number of episodes-15-10-5051015AveragerewardDRRN (2-hidden)DRRN (1-hidden)PA DQN (2-hidden)MA DQN (2-hidden)(b) Game 2: ?Machine of Death?Figure 4: Learning curves of the two text games.Eval metric Average rewardhidden dimension 20 50 100Linear 3.3 (1.0)PA DQN (L = 1) 0.9 (2.4) 2.3 (0.9) 3.1 (1.3)PA DQN (L = 2) 1.3 (1.2) 2.3 (1.6) 3.4 (1.7)MA DQN (L = 1) 2.0 (1.2) 3.7 (1.6) 4.8 (2.9)MA DQN (L = 2) 2.8 (0.9) 4.3 (0.9) 5.2 (1.2)DRRN (L = 1) 7.2 (1.5) 8.4 (1.3) 8.7 (0.9)DRRN (L = 2) 9.2 (2.1) 10.7 (2.7) 11.2 (0.6)Table 3: The final average rewards and standarddeviations on ?Machine of Death?.den layers in the DQNs and DRRN are all setto 100.
The error bars are obtained by running5 independent experiments.
The proposed meth-ods and baselines all start at about the same per-formance (roughly -7 average rewards for Game1, and roughly -8 average rewards for Game 2),which is the random guess policy.
After around4000 episodes of experience-replay training, allmethods converge.
The DRRN converges muchfaster than the other three baselines and achieves ahigher average reward.
We hypothesize this is be-cause the DRRN architecture is better at capturingrelevance between state text and action text.
Thefaster convergence for ?Saving John?
may be dueto the smaller observation space and/or the deter-ministic nature of its state transitions (in contrastto the stochastic transitions in the other game).The final performance (at convergence) for bothbaselines and proposed methods are shown in Ta-bles 2 and 3.
We test for different model sizes with20, 50, and 100 dimensions in the hidden layers.The DRRN performs consistently better than allbaselines, and often with a lower variance.
ForGame 2, due to the complexity of the underly-ing state transition function, we cannot computethe exact optimal policy score.
To provide moreinsight into the performance, we averaged scoresof 8 human players for initial trials (novice) andafter gaining experience, yielding scores of ?5.5and 16.0, respectively.
The experienced playersdo outperform our algorithm.
The converged per-formance is higher with two hidden layers for allmodels.
However, deep models also convergemore slowly than their 1 hidden layer versions, asshown for the DRRN in Figure 4.Besides an inner-product, we also experimentedwith more complex interaction functions: a) a bi-linear operation with different action side dimen-sions; and b) a non-linear deep neural network us-ing the concatenated state and action space embed-dings as input and trained in an end-to-end fash-ion to predict Q values.
For different configura-tions, we fix the state side embedding to be 100dimensions and vary the action side embeddingdimensions.
The bilinear operation gave similarresults, but the concatenation input to a DNN de-graded performance.
Similar behaviors have beenobserved on a different task (Luong et al, 2015).3.4 Actions with paraphrased descriptionsTo investigate how our models handle actionswith ?unseen?
natural language descriptions, wehad two people paraphrase all actions in thegame ?Machine of Death?
(used in testing phase),except a few single-word actions whose syn-onyms are out-of-vocabulary (OOV).
The word-level OOV rate of paraphrased actions is 18.6%,1627Figure 5: Scatterplot and strong correlation be-tween Q-values of paraphrased actions versusoriginal actionsand standard 4-gram BLEU score between theparaphrased and original actions is 0.325.
The re-sulting 153 paraphrased action descriptions are as-sociated with 532 unique state-action pairs.We apply a well-trained 2-layer DRRN model(with hidden dimension 100), and predict Q-values for each state-action pair with fixed modelparameters.
Figure 5 shows the correlation be-tween Q-values associated with paraphrased ac-tions versus original actions.
The predictive R-squared is 0.95, showing a strong positive corre-lation.
We also run Q-value correlation for theNN interaction and pR2= 0.90.
For baselineMA-DQN and PA-DQN, their corresponding pR2is 0.84 and 0.97, indicating they also have somegeneralization ability.
This is confirmed in theparaphrasing-based experiments too, where thetest reward on the paraphrased setup is close tothe original setup.
This supports the claim thatdeep learning is useful in general for this languageunderstanding task, and our findings show that adecoupled architecture most effectively leveragesthat approach.In Table 4 we provide examples with predictedQ-values of original descriptions and paraphraseddescriptions.
We also include alternative actiondescriptions with in-vocabulary words that willlead to positive / negative / irrelevant game devel-opment at that particular state.
Table 4 shows ac-tions that are more likely to result in good endingsare predicted with high Q-values.
This indicatesthat the DRRN has some generalization ability andgains a useful level of language understanding inthe game scenario.We use the baseline models and proposedDRRN model trained with the original action de-scriptions for ?Machine of Death?, and test onparaphrased action descriptions.
For this game,the underlying state transition mechanism has notchanged.
The only change to the game interface isthat during testing, every time the player reads theactions from the game simulator, it reads the para-phrased descriptions and performs selection basedon these paraphrases.
Since the texts in test timeare ?unseen?
to the player, a good model needs tohave some level of language understanding, whilea naive model that memorizes all unique actiontexts in the original game will do poorly.
The re-sults for these models are shown in Table 5.
Allmethods have a slightly lower average reward inthis setting (10.5 vs. 11.2 for the original actions),but the DRRN still gives a high reward and sig-nificantly outperforms other methods.
This showsthat the DRRN can generalize well to ?unseen?natural language descriptions of actions.4 Related WorkThere has been increasing interest in applyingdeep reinforcement learning to a variety problems,but only a few studies address problems with nat-ural language state or action spaces.
In languageprocessing, reinforcement learning has been ap-plied to a dialogue management system that con-verses with a human user by taking actions thatgenerate natural language (Scheffler and Young,2002; Young et al, 2013).
There has also been in-terest in extracting textual knowledge to improvegame control performance (Branavan et al, 2011),and mapping text instructions to sequences of ex-ecutable actions (Branavan et al, 2009).
In someapplications, it is possible to manually design fea-tures for state-action pairs, which are then usedin reinforcement learning to learn a near-optimalpolicy (Li et al, 2009).
Designing such features,however, require substantial domain knowledge.The work most closely related to our study in-olves application of deep reinforcement to learn-ing decision policies for parser-based text games.Narasimhan et al (2015) applied a Long Short-Term Memory DQN framework, which achieveshigher average reward than the random and Bag-of-Words DQN baselines.
In this work, actionsare constrained to a set of known fixed commandstructures (one action and one argument object),1628Text (with predicted Q-values)State As you move forward, the people surrounding you suddenly look up with terrorin their faces, and flee the street.Actions in the original game Ignore the alarm of others and continue moving forward.
(-21.5) Look up.
(16.6)Paraphrased actions (not original) Disregard the caution of others and keep pushing ahead.
(-11.9) Turn up andlook.
(17.5)Positive actions (not original) Stay there.
(2.8) Stay calmly.
(2.0)Negative actions (not original) Screw it.
I?m going carefully.
(-17.4) Yell at everyone.
(-13.5)Irrelevant actions (not original) Insert a coin.
(-1.4) Throw a coin to the ground.
(-3.6)Table 4: Predicted Q-value examplesEval metric Average rewardhidden dimension 20 50 100PA DQN (L = 2) 0.2 (1.2) 2.6 (1.0) 3.6 (0.3)MA DQN (L=2) 2.5 (1.3) 4.0 (0.9) 5.1 (1.1)DRRN (L = 2) 7.3 (0.7) 8.3 (0.7) 10.5 (0.9)Table 5: The final average rewards and stan-dard deviations on paraphrased game ?Machine ofDeath?.based on a limited action-side vocabulary size.The overall action space is defined by the action-argument product space.
This pre-specified prod-uct space is not feasible for the more complex textstrings in other forms of text-based games.
Ourproposed DRRN, on the other hand, can handlethe more complex text strings, as well as parser-based games.
In preliminary experiments with theparser-based game from (Narasimhan et al, 2015),we find that the DRRN using a bag-of-words(BOW) input achieves results on par with theirBOW DQN.
The main advantage of the DRRN isthat it can also handle actions described with morecomplex language.The DRRN experiments described here lever-age only a simple bag-of-words representa-tion of phrases and sentences.
As observedin (Narasimhan et al, 2015), more complexsentence-based models can give further improve-ments.
In preliminary experiments with ?Machineof Death?, we did not find LSTMs to give im-proved performance, but we conjecture that theywould be useful in larger-scale tasks, or when theword embeddings are initialized by training onlarge data sets.As mentioned earlier, other work has applieddeep reinforcement learning to a problem with acontinuous action space (Lillicrap et al, 2016).
Inthe DRRN, the action space is inherently discrete,but we learn a continuous representation of it.
Asindicated by the paraphrasing experiment, the con-tinuous space representation seems to generalizereasonably well.5 ConclusionIn this paper we develop a deep reinforcementrelevance network, a novel DNN architecture forhandling actions described by natural language indecision-making tasks such as text games.
Weshow that the DRRN converges faster and to abetter solution for Q-learning than alternative ar-chitectures that do not use separate embeddingsfor the state and action spaces.
Future work in-cludes: (i) adding an attention model to robustlyanalyze which part of state/actions text correspondto strategic planning, and (ii) applying the pro-posed methods to more complex text games orother tasks with actions defined through naturallanguage.AcknowledgmentsWe thank Karthik Narasimhan and Tejas Kulka-rni for providing instructions on setting up theirparser-based games.ReferencesE.
Adams.
2014.
Fundamentals of game design.
Pear-son Education.S.R.K.
Branavan, H. Chen, L. Zettlemoyer, andR.
Barzilay.
2009.
Reinforcement learning for map-ping instructions to actions.
In Proc.
of the JointConference of the 47th Annual Meeting of the ACLand the 4th IJCNLP, pages 82?90, August.S.R.K.
Branavan, D. Silver, and R. Barzilay.
2011.Learning to win by reading manuals in a monte-carloframework.
In Proc.
of the Annual Meeting of theAssociation for Computational Linguistics: HumanLanguage Technologies-Volume 1, pages 268?277.Association for Computational Linguistics.R.
Collobert and J. Weston.
2008.
A unified archi-tecture for natural language processing: Deep neu-ral networks with multitask learning.
In Proc.
of the25th International Conference on Machine learning,pages 160?167.
ACM.1629G.
E Dahl, D. Yu, L. Deng, and A. Acero.
2012.Context-dependent pre-trained deep neural networksfor large-vocabulary speech recognition.
Audio,Speech, and Language Processing, IEEE Transac-tions on, 20(1):30?42.G.
Hinton, L. Deng, D. Yu, G. E. Dahl, A. Mohamed,N.
Jaitly, A.
Senior, V. Vanhoucke, P. Nguyen, T. N.Sainath, and B. Kingsbury.
2012.
Deep neural net-works for acoustic modeling in speech recognition:The shared views of four research groups.
IEEE Sig-nal Process.
Mag., 29(6):82?97.P-S. Huang, X.
He, J. Gao, L. Deng, A. Acero, andL.
Heck.
2013.
Learning deep structured semanticmodels for web search using clickthrough data.
InProc.
of the ACM International Conference on In-formation & Knowledge Management, pages 2333?2338.
ACM.R.
Kiros, Y. Zhu, R. R Salakhutdinov, R. Zemel, R. Ur-tasun, A. Torralba, and S. Fidler.
2015.
Skip-thought vectors.
In Advances in Neural InformationProcessing Systems, pages 3276?3284.A.
Krizhevsky, I. Sutskever, and G. E Hinton.
2012.Imagenet classification with deep convolutional neu-ral networks.
In Advances in neural informationprocessing systems, pages 1097?1105.Q.
V Le and T. Mikolov.
2014.
Distributed representa-tions of sentences and documents.
In InternationalConference on Machine Learning.Y.
LeCun, Y. Bengio, and G. Hinton.
2015.
Deeplearning.
Nature, 521(7553):436?444.L.
Li, J. D. Williams, and S. Balakrishnan.
2009.
Re-inforcement learning for spoken dialog managementusing least-squares policy iteration and fast featureselection.
In Proceedings of the Tenth Annual Con-ference of the International Speech CommunicationAssociation (INTERSPEECH-09), page 24752478.T.
P Lillicrap, J. J Hunt, A. Pritzel, N. Heess, T. Erez,Y.
Tassa, D. Silver, and D. Wierstra.
2016.
Contin-uous control with deep reinforcement learning.
InInternational Conference on Learning Representa-tions.L-J.
Lin.
1993.
Reinforcement learning for robots us-ing neural networks.
Technical report, DTIC Docu-ment.M-T. Luong, H. Pham, and C. D. Manning.
2015.Effective approaches to attention-based neural ma-chine translation.
In Proc.
of the 2015 Conferenceon Empirical Methods in Natural Language Pro-cessing, pages 1412?1421, September.V.
Mnih, K. Kavukcuoglu, D. Silver, A. Graves,I.
Antonoglou, D. Wierstra, and M. Riedmiller.2013.
Playing Atari with Deep ReinforcementLearning.
NIPS Deep Learning Workshop, Decem-ber.V.
Mnih, K. Kavukcuoglu, D. Silver, A.
A Rusu, J. Ve-ness, M. G Bellemare, A. Graves, M. Riedmiller,A.
K Fidjeland, G. Ostrovski, et al 2015.
Human-level control through deep reinforcement learning.Nature, 518(7540):529?533.K.
Narasimhan, T. Kulkarni, and R. Barzilay.
2015.Language understanding for text-based games usingdeep reinforcement learning.
In Proc.
of the 2015Conference on Empirical Methods in Natural Lan-guage Processing, pages 1?11, September.R.
Nogueira and K. Cho.
2016.
Webnav: A new large-scale task for natural language based sequential de-cision making.
arXiv preprint arXiv:1602.02261.K.
Scheffler and S. Young.
2002.
Automatic learningof dialogue strategy using dialogue simulation andreinforcement learning.
In Proc.
of the second In-ternational Conference on Human Language Tech-nology Research, pages 12?19.I.
Sutskever, O. Vinyals, and Q. V Le.
2014.
Sequenceto sequence learning with neural networks.
In Ad-vances in Neural Information Processing Systems,pages 3104?3112.R.
S Sutton and A. G Barto.
1998.
Reinforcementlearning: An introduction, volume 1.
MIT pressCambridge.G.
Tesauro.
1995.
Temporal difference learningand td-gammon.
Communications of the ACM,38(3):58?68.C.
JCH Watkins and P. Dayan.
1992.
Q-learning.
Ma-chine learning, 8(3-4):279?292.S.
Young, M. Gasic, B. Thomson, and J.
D Williams.2013.
Pomdp-based statistical spoken dialog sys-tems: A review.
Proceedings of the IEEE,101(5):1160?1179.1630
