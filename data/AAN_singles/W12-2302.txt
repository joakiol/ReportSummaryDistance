Proceedings of the Twelfth Meeting of the Special Interest Group on Computational Morphology and Phonology (SIGMORPHON2012), pages 10?16,Montre?al, Canada, June 7, 2012. c?2012 Association for Computational LinguisticsHindi Derivational Morphological AnalyzerNikhil KanuparthiLTRCIIIT-HyderabadIndia{nikhil.kvs,abhilashi}Abhilash InumellaLTRCIIIT-HyderabadIndia@research.iiit.ac.inDipti Misra SharmaLTRCIIIT-HyderabadIndiadipti@iiit.ac.inAbstractHindi is an Indian language which is rela-tively rich in morphology.
A few morpholog-ical analyzers of this language have been de-veloped.
However, they give only inflectionalanalysis of the language.
In this paper, wepresent our Hindi derivational morphologicalanalyzer.
Our algorithm upgrades an existinginflectional analyzer to a derivational analyzerand primarily achieves two goals.
First, it suc-cessfully incorporates derivational analysis inthe inflectional analyzer.
Second, it also in-creases the coverage of the inflectional analy-sis of the existing inflectional analyzer.1 IntroductionMorphology is the study of processes of word for-mation and also the linguistic units such as mor-phemes, affixes in a given language.
It consistsof two branches: derivational morphology and in-flectional morphology.
Derivational morphologyis the study of those processes of word formationwhere new words are formed from the existing stemsthrough the addition of morphemes.
The meaning ofthe resultant new word is different from the originalword and it often belongs to a different syntactic cat-egory.
Example: happiness (noun) = happy (adjec-tive) + ness.
Inflectional morphology is the study ofthose processes of word formation where various in-flectional forms are formed from the existing stems.Number is an example of inflectional morphology.Example: cars = car + plural affix ?s?.The main objective of our work is to develop atool which executes the derivational morphologicalanalysis of Hindi.
Morphological analysis is an im-portant step for any linguistically informed naturallanguage processing task.
Most morphological ana-lyzers perform only inflectional analysis.
However,derivational analysis is also crucial for better perfor-mance of several systems.
They are used to improvethe efficiency of machine translators (C Gdaniec etal., 2001).
They are also used in search enginesto improve the information extraction (J Vilares etal., 2001).
Since derivational processes can often beproductive in a language, the development of an ef-fective derivational analyzer will prove beneficial inseveral aspects.We developed a derivational analyzer for Hindiover an already existing inflectional analyzer devel-oped at IIIT Hyderabad.
In this approach, first, thederived words in Hindi were studied to obtain thederivational suffixes of the language.
Then the ruleswere designed by understanding the properties of thesuffixes.
The Hindi Wikipedia was also utilized tocollect the required background data.
Finally, an al-gorithm was developed based on the above findings.This algorithm has been used to upgrade the inflec-tional analyzer to a derivational analyzer.In the sections that follow, we describe the ap-proach we followed to develop our derivational an-alyzer and the experiments that we conducted usingour system.2 Related WorkThere is no derivational morphological analyzer forHindi to the best of our knowledge.
However,a few inflectional morphological analyzers (IIIT;Vishal and G. Singh, 2008; Niraj and Robert, 2010)10of this language have been developed.
There arederivational analyzers for other Indian languageslike Marathi (Ashwini Vaidya, 2009) and Kannada(Bhuvaneshwari C Melinamath et al, 2011).
TheMarathi morphological analyzer was built using aParadigm based approach whereas the Kannada ana-lyzer was built using an FST based approach.
As faras English is concerned, there are some importantworks (Woods, 2000; Hoeppner, 1982) pertainingto the area of derivational morphological analysis.However, both of these are lexicon based works.For our work, we employed a set of suffix replace-ment rules and a dictionary in our derivational ana-lyzer, having taken insights from the Porter?s stem-mer (Porter, 1980) and the K-stemmer (R. Krovetz.1993).
They are amongst the most cited stemmersin the literature.
The primary goal of Porter?s stem-mer is suffix stripping.
So when a word is given asinput, the stemmer strips all the suffixes in the wordto produce a stem.
It achieves the task in five stepsapplying rules at each step.
Given a word as input,the Krovetz stemmer removes inflectional suffixespresent in the word in three steps.
First it convertsthe plural form of the word into a singular form,then it converts past tense to present tense, and fi-nally removes -ing.
As the last step, the stemmerchecks the dictionary for any recoding and returnsthe stem.
Our algorithm uses the main principles ofboth the Porters stemmer and Krovetz stemmer.
Thesuffix replacement rules of our algorithm resemblethat of the Porters and a segment of the algorithmis analogous to the dictionary based approach of theKrovetzs stemmer.3 Existing Inflectional HindiMorphological AnalyzersA derivational morph analyzer can be developedfrom an existing morph analyzer instead of build-ing one from scratch.
So three inflectional analyzerswere considered for the purpose.
The morphologicalanalyzer developed by Vishal and Gurpreet stores allthe commonly used word forms for all Hindi rootwords in its database.
Thus, space is a constraint forthis analyzer but the search time is quite low.
Themorph analyzer developed by Niraj and Robert ex-tracts a set of suffix replacement rules from a corpusand a dictionary.
The rules are applied to an inflectedword to obtain the root word.
They show that theprocess of developing such rulessets is simple and itcan be applied to develop morphological analyzersof other Indian languages.However, our derivational analyzer is an exten-sion of an existing inflectional morphological ana-lyzer developed at IIIT Hyderabad (Bharati Aksharet al 1995).
The inflectional analyzer is based onthe paradigm model.
It uses the combination ofparadigms and a root word dictionary to provide in-flectional analysis.
Given an inflected Hindi word,this inflectional analyzer returns its root form andother grammatical features such as gender, num-ber, person, etc.
For example: if the input wordto the morphological analyzer is bAgabAnoM1 (gar-deners), the output will be bAgabAna (gardener),noun, m, pl, etc.
Here the word bAgabAna is theroot word of the input word.
?Noun?
is the cate-gory of the input word, ?m?
means masculine and?pl?
means that the input word is plural in number.The analyzer uses a root word dictionary for thepurpose.
If a word is present in the root word dic-tionary, the analyzer handles all the inflections per-taining to that word.
For example: xe (give) is a rootword present in the dictionary of the analyzer.
xewA(gives), xenA (to give), xiyA (gave) and other inflec-tional forms of the root word xe are handled by theanalyzer.
There are 34407 words in the root worddictionary.The analyzer handles inflected words using theparadigm tables.
Every entry (word) in the dic-tionary has values like lexical category, paradigmclass, etc.
For example: there is a word pulisavAlA(policeman) in the dictionary.
Its paradigm classis ladakA.
Table 1 shows the paradigm forms ofladakA.
Since the paradigm value of pulisavAlA isladakA, its four inflections will be similar to the fourparadigms of ladakA (root paradigm).
The four in-flections of pulisavAlA are pulisavAlA, pulisavAle,pulisavAle, pulisavAloM.
Only the root form (word)pulisavAlA is present in the dictionary.
In this wayevery root word present in the dictionary belongs toa paradigm class and this paradigm class has a struc-tured paradigm table containing all the inflections ofthe main paradigm.
This paradigm table is used by1The Hindi words are in wx-format (san-skrit.inria.fr/DATA/wx.html) followed by IIIT-Hyderabad.11Table 1: Paradigm table of ladakACase Singular form Plural formDirect ladakA (boy) ladake (boys)Oblique ladake (boy) ladakoM (boys)the analyzer to reconstruct all the inflections of theroot words belonging to this paradigm class.
There-fore the analyzer can analyze a word only if its rootword is present in the dictionary.This inflectional morphological analyzer works asa platform for our derivational morphological ana-lyzer.
So our tool gives derivational analysis of allthe words whose root forms are present in the rootword dictionary.
Our tool also tackles certain wordswhose root forms are not present in the root worddictionary of the IIIT morphological analyzer.4 ApproachWe pursued the following five step approach forbuilding our derivational analyzer.4.1 Studying Hindi DerivationsTo build the derivational morphological analyzer, wefirst conducted a study to identify the derivationalsuffixes and the related morphological changes.
Af-ter identifying the suffixes, the rules pertaining tothese suffixes were obtained.First, the nouns present in the Hindi vocabularywere studied.
The study of nouns helped us in iden-tifying some of the most productive derivational suf-fixes present in the language.
For example, let usconsider the word maxaxagAra (helper).
This wordis derived from the word maxaxa (maxaxagAra =maxaxa (help) + gAra).
But gAra cannot be con-firmed as a suffix because of just one instance.
Inorder to confirm gAra as a suffix, even other wordsending with gAra must be examined.
The more thenumber of words we find, the greater is the pro-ductivity of the suffix.
Words like yAxagAra (de-rived from yAxa) and gunAhagAra (criminal) (de-rived from gunAha (crime)) prove that gAra is aderivational suffix.
However, every word endingwith gAra need not be a derived word.
For exam-ple: the word aMgAra is not a derived word.
There-fore only relevant words were studied and the suf-fixes were obtained only from them.Table 2: Example derivations of some suffixesSuffix Root DerivationAna laganA lagAnabAna bAga bAgabAnagAra yAxa yAxagAraxAra xukAna xukAnaxAraika aXikAra aXikArikaI KuSa KuSIAI acCA acCAITable 3: Rules of few suffixesSuffix First set rulesbAna noun = noun/adj + bAnagAra noun = noun/adj + gAraxAra noun = noun/adj + xAraika adj = noun - a + ikaThe entire process of obtaining the derivationalsuffixes was done manually and was a time consum-ing process.
This process was repeated for adjec-tives as well.
Only those suffixes that participate inthe formation of nouns and adjectives were found.A total of 22 productive derivational suffixes wereprocured.
Table 2 shows a few suffixes and theirderivations.4.2 Derivational RulesAfter finding the derivational suffixes, two sets ofderivational rules were developed for each suffix.The first set explains the formation of the derivedwords from their root words.
Let us consider thesuffix gAra.
This suffix generates nouns from nounsand adjectives.
The rule of this suffix explains theformation of derivations like yAxagAra (yAxagAra= yAxa (noun) + gAra) and maxaxagAra (maxaxa-gAra = maxaxa + gAra).
The second set consists ofreverse rules of the first set.
The reverse rule for theprevious example is noun/adj = noun - suffix.
In thisway, rules were developed for all the 22 derivationalsuffixes.
These rules form a vital component of ouralgorithm.
Table 3 contains the derivational rules ofa few suffixes.4.3 Finding Majority PropertiesThe majority properties (of derived words of a suf-fix) are the properties which most of the words ex-12hibit.
Example: let us consider the derived wordsof the suffix vAlA.
There are 36 derived words ofthe vAlA suffix in the root word dictionary.
Someof these words are adjectives but the majority arenouns.
Hence noun is fixed as the category (major-ity category) for derived words of this class.
Simi-larly the majority paradigm class of these words isladakA.
The majority properties of derived wordspertaining to all the 22 suffixes were acquired.The majority properties of a suffix help us in thederivational analysis of the unknown derived wordsof that suffix.
For example: consider the word Gar-avAlA (housekeeper).
Let us assume that it is notpresent in the root word dictionary.
Therefore thelexical category, paradigm value and other importantfeatures of this word are not known.
But let us as-sume that this word is a genuine derived word of thesuffix vAlA.
So the tool must handle this case.
Themajority properties of the vAlA suffix are assigned tothis word.
So noun and ladakA are fixed as the cat-egory and paradigm of this word.
Thus the genuinederived words which are unknown to the analyzerwill be analyzed using the majority properties.The majority properties of derived words were ob-tained in two main steps.
First, a suffix was consid-ered.
Then all the derived words pertaining to thatsuffix were acquired.
Only genuine derived wordswere taken into consideration.
Genuine derivationswere found out using the suffix derivational rules.Example: let us take the word maxaxagAra (endingwith gAra).
First, the root word of this word is re-trieved using the gAra derivational rule.
The rootword according to the rule is maxaxa.
This word ispresent in the dictionary and it also satisfies the cat-egory condition of the rule.
The word maxaxa is anoun.
Hence the word maxaxagAra is accepted as aderived word.
If the word maxaxa is not found in thedictionary or if its category is not a noun/adjective,the word maxaxagAra will be rejected.
In this wayall the valid derivations of the suffix were acquired.This process was repeated for other suffixes as well.In the second step, the majority properties of the de-rived words were directly retrieved.Finally, a suffix table was built using the major-ity properties of the derived words.
The suffix tablecontains all the suffixes and their inflectional forms.Table 4 contains few suffixes and their inflectionalforms.
For example: the majority paradigm of de-Table 4: Few suffixes and their formsSuffix Suffix-formsAna AnabAna bAna, bAnoMgAra gAra, gAroMxAra xAra, xAroMika ikaI IAI AIanI anI, aniyAz, aniyoMrived words of vAlA suffix is ladakA.
This impliesthat the derived words of this suffix end with vAlA,vAle and vAloM.
Thus the possible inflections of asuffix can be derived from its majority properties.This information was stored in a table.
The majorityproperties and the suffix table play an important rolein the analysis of the unknown words.
Their usage inour algorithm will be described in the later sections.4.4 Using Wikipedia Data for ConfirmingGenuinenessIf an invalid word is not analyzed by the inflec-tional analyzer, there is no need for proceeding tothe derivational analysis of that word.
Therefore thegenuineness of a word must be tested before goingfor the derivational analysis.
The Hindi Wikipediawas chosen as a resource that enables us to test thegenuineness of a word.A total of 400k words were extracted from theHindi Wikipedia.
This data contains many wordswhich do not exist in Hindi vocabulary.
So 220kproper Hindi words were selected (on the basis offrequency) from the data and a list containing those220k words was created.
A word will be treated asa genuine word only when it is present in that list.This assumption is used by our algorithm.
The Wikidata is used as a standard corpus.4.5 Algorithm for Derivational AnalysisAn algorithm was developed to make use of theexisting inflectional morphological analyzer forderivational analysis.
This algorithm enabled us tobypass the construction of a derivational analyzerfrom the scratch.
The majority properties of thederivations, the Wikipedia data and the suffix-tableare also employed by the algorithm for analyzing un-13known derivations.Figure 1: AlgorithmThe input to the algorithm is a word.
The out-put is a combination of the inflectional analysis andthe derivational analysis of the input word.
For ex-ample: if the input word is bAgabAnoM (garden-ers).
First, the algorithm gives the inflectional anal-ysis of the input word.
In this case the word bAga-bAnoM is a noun, plural in number, etc.
Then itgives the information (category, gender) of the rootword (bAga (garden)) from which the input word isderived (derivational analysis).
So a dual analysis ofthe input word is provided.4.6 ExamplesThe following 4 examples explain the working ofthe algorithm in 4 different cases.
These examplesare provided to give a clear picture of the completealgorithm.a) Example 1Input word: pulisavAle (Policemen)In the step-2, the word is analyzed by the IIITinflectional analyzer.
In the step 3a.1, the wordpulisavAlA (Policeman) is the normal-form of theinput word.
The normal-form is ending (vAlA)with one of our 22 suffixes.
The rule of the suffixis noun = noun/verb + vAlA.
So the root word ispulisa because pulisavAlA = pulisa + vAlA.
Theword pulisa should be a noun or a verb in orderto satisfy the rule.
All the conditions are met andthe step 3a.5 becomes the vital final step.
Thisstep gives the information that the final root wordpulisa is a masculine noun and the input word isalso a masculine noun and it is plural in number.Here the information about the final root word andthe input word is again given using the inflectionalmorphological analyzer.b) Example 2Input word: kirAexAroM (Tenants)The IIIT inflectional analyzer cannot analyze thisword.
The word kirAexAroM is ending with oneof the forms (xAroM) present in the suffix table.The normal-form of the input word is obtained byreplacing the suffix form in the input word withthe suffix.
Hence the normal-form of the inputword kirAexAroM is kirAexAra.
In this way, thenormal-form of the input word is acquired withoutthe inflectional analyzer.
The word kirAexAra ispresent in Wiki data and it is ending with one ofthe 22 suffixes.
The rule of the suffix is noun =noun/adj + xAra.
So the root word is kirAe becausekirAexAra = kirAe + xAra.c) Example 3Input word: ladake (Boys)In the step-2, the word is analyzed by the IIITinflectional analyzer.
The normal form of the wordis ladakA (boy).
The normal-form of the word is notending with any of our 22 suffixes.
So there is noderivational analysis of this particular case.d) Example 4Input word: ppppwA (invalid word)The IIIT inflectional analyzer cannot analyze thisword.
The word ppppwA is ending with one ofthe forms (wA) present in the suffix table.
But the14normal-form (ppppwA) is not present in Wikipedia.So there is no derivational analysis for this particularcase.4.7 Expanding Inflectional AnalysisThe algorithm for derivational analysis was alsoused for expanding the inflectional analysis of theanalyzer.
Consider the second example in the pre-vious section.
The word kirAexAroM is analyzedby the derivational analyzer even though its rootform (kirAexAra) is not present in the root word dic-tionary.
Words like kirAexAra are genuine deriva-tions and can be added to the root word dictio-nary.
The addition of such kind of words will extendthe inflectional analysis of the analyzer.
For exam-ple.
if the word kirAexAra is added, its forms ki-rAexAroM and kirAexAra will be automatically ana-lyzed.
This is because the word kirAexAra would beadded along with its features/values like category,paradigm class, etc.Therefore all the words which fall into theexample-2 category of the previous section can beadded to the dictionary.
All such words must be ob-tained in order to expand our dictionary.
For thispurpose, a Wiki data consisting of 220k Wiki wordswas extracted from Wikipedia.
Out of these 220kwords, 40k words are ending with our 22 suffixesand their forms.
So the derived words which can beanalyzed by our system are part of this sub-dataset.Out of 40k words, the derivational analyzer analyzed5579 words.
The inflectional analyzer analyzed only2362 words out of 40000.
So the derivational an-alyzer analyzed 3217 derived words more than theinflectional analyzer.
So these words were added tothe root word dictionary for expanding the inflec-tional analysis of the analyzer.
The algorithm whichwas designed to perform derivational analysis alsoinflated the inflectional analysis of the analyzer.5 Experiments and ResultsThe performance of our derivational analyzer mustbe compared with an existing derivational analyzer.Since there is no such derivational analyzer, wecompared the performance of our tool with the ex-isting IIIT inflectional analyzer (or the old morpho-logical analyzer).
The two tools must be tested ona gold-data (data that does not contain any errors).For example: let us assume that we have a data of100 words and their morphological analysis.
Theanalysis of these 100 words does not contain anyerrors and it is a gold-data.
Now we must get theanalysis of these 100 words from both the deriva-tional analyzer and the old morphological analyzer.Then their analyses must be compared against thegold-data.
This is nothing but directly comparingthe outputs of the derivational analyzer and the oldmorphological analyzer.
This will help in evaluatingthe derivational analyzer.
This method of evaluationwill also tell the improvement the derivational ana-lyzer achieved.Figure 2: Evaluation Methodology for Morph AnalyzersThe figure 2 (Amba P Kulkarni, 2010) explainsour evaluation methodology for morphological ana-lyzers.
Let us continue with the example mentionedin the previous paragraph.
First, we find the anal-ysis of the 100 words by the old morph analyzer.We compare its output with the gold output/analysis.Let there be 50 words which belong to Type-1.
Itmeans the gold analysis and morphological analysis(by old morph) of 50 words is perfectly equal.
Letthere be 10 words which belong to Type-6.
It means15Table 5: Output analysis of old morph analyzerType Number of instances % of TypeType1 2361 47.2Type2 763 15.2Type3 419 8.4Type4 575 11.5Type5 599 11.9Type6 288 5.8Table 6: Output analysis of derivational analyzerType Number of instances % of TypeType1 2600 51.9Type2 771 15.4Type3 418 8.4Type4 576 11.5Type5 609 12.2Type6 31 0.6that the old morphological analyzer could not an-alyze 10 words but there is gold analysis of thosewords.
In this way, each type forms an importantpart of the evaluation process.
Similarly we evalu-ate the analysis of the 100 words by the derivationalanalyzer.
Finally we compare the evaluations of theold morphological analyzer and our derivational an-alyzer.
This is our evaluation methodology.So a gold-data consisting of the analysis of 5000words was taken.
The linguistic experts of IIIT Hy-derabad have built this data and it was acquired fromthat institution.
The 5000 words were tested on boththe derivational analyzer and the inflectional ana-lyzer.Both the analyzers were tested on the gold-datacontaining 5000 words.
The table 6 proves thatthe performance of the new derivational analyzeris better than the old morphological analyzer.
Theold analyzer could not provide any output of 288words (Type-6) whereas that number is only 31 in-case of the derivational analyzer.
As a result ofthis improvement, the overall Type-1 (Perfect outputwhich is completely matching with the gold output)of derivational analyzer is nearly 5% more than thatof the old morphological analyzer.
The data size issmall (only 5000).
A testing on a larger gold-datawill show an even better picture of the improvementthat can be achieved by the derivational analyzer.6 ConclusionsWe presented an algorithm which uses an exist-ing inflectional analyzer for performing derivationalanalysis.
The algorithm uses the main principles ofboth the Porters stemmer and Krovetz stemmer forachieving the task.
The algorithm achieves decentprecision and recall.
It also expands the coverageof the inflectional analyzer.
But it must be incorpo-rated in applications like machine translators whichuse derivational analysis for understanding its realstrengths and limitations.ReferencesClaudia Gdaniec, Esm Manandise, Michael C. McCord.2001.
Derivational morphology to the rescue: how itcan help resolve unfound words in MT, pp.129?131.Summit VIII: Machine Translation in the InformationAge, Proceedings, Santiago de Compostela, Spain.Jesus Vilares, David Cabrero and Miguel A. Alonso.2001.
Applying Productive Derivational Morphologyto Term Indexing of Spanish Texts.
In Proceedings ofCICLing.Vishal Goyal, Gurpreet Singh Lehal.
2008.
Hindi Mor-phological Analyzer and Generator, pp.
1156?1159.IEEE Computer Society Press, California, USA.Niraj Aswani, Robert Gaizauskas.
2010.
Develop-ing Morphological Analysers for South Asian Lan-guages: Experimenting with the Hindi and GujaratiLanguages.
In Proceedings of LREC.Ashwini Vaidya.
2009.
Using paradigms for certainmorphological phenomena in Marathi.
In Proceedingsof ICON.Bhuvaneshwari C Melinamath, Shubhagini D. 2011.
Arobust Morphological analyzer to capture Kannadanoun Morphology, VOL 13.
IPCSIT.William A.
Woods.
2000.
Aggressive Morphology forRobust Lexical Coverage.
In Proceedings of ANLC.Wolfgang Hoeppner.
1982.
A multilayered approach tothe handling of word formation.
In Proceedings ofCOLING.R.
Krovetz.
1993.
Viewing morphology as an inferenceprocess.
In Proceedings of COLING.M.
F. Porter.
1980.
An algorithm for suffix stripping.Originally published in Program, 14 no.
3, pp 130-137.Bharati Akshar, Vineet Chaitanya, Rajeev Sangal.
1995.Natural Language Processing: A Paninian Perspec-tive.
Prentice-Hall of India.Amba P Kulkarni.
2010.
A Report on Evaluation of San-skrit Tools.16
