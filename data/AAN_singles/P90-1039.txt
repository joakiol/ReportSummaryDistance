A HARDWARE ALGORITHMFOR HIGH SPEED MORPHEME EXTRACTIONAND ITS IMPLEMENTATIONToshikazu Fukushima, Yutaka Ohyama nd Hitoshi MiyaiC&C Systems Research Laboratories, NEC Corporation1-1, Miyazaki 4-chome, Miyamae-ku, Kawasaki City, Kanagawa 213, Japan(fuku@tsl.cl.nec.co.jp, ohyama~tsl.cl.nec.co.jp, miya@tsl.cl.nec.co.jp)ABSTRACTThis paper describes a new hardware algorithmfor morpheme extraction and its implementationon a specific machine (MEX-I), as the first steptoward achieving natural anguage parsing accel-erators.
It also shows the machine's performance,100-1,000 times faster than a personal computer.This machine can extract morphemes from 10,000character Japanese text by searching an 80,000morpheme dictionary in I second.
It can treatmultiple text streams, which are composed of char-acter candidates, as well as one text stream.
Thealgorithm is implemented on the machine in lineartime for the number of candidates, while conven-tional sequential algorithms are implemented incombinational time.1 INTRODUCTIONRecent advancement in natural language pars-ing technology has especially extended the wordprocessor market and the machine translation sys-tem market.
For further market extension or newmarket creation for natural language applications,parsing speed-up as well as improving parmng ac-curacy is required.
First, the parsing speed-updirectly reduces system response time required insuch interactive natural language application sys-tems as those using natural language interface,speech recognition, Kana-to-Kanjl i conversion,which is the most popular Japanese text inputmethod, and so on.
Second, it also increases theadvantage of such applications as machine transla-tion, document proofreading, automatic indexing,and so on, which are used to treat a large amountof documents.
Third, it realizes parsing meth-ods based on larger scale dictionary or knowledgedatabase, which are necessary to improve parsingaccuracy.Until now, in the natural language processingfield, the speed-up has depended mainly on perfor-mance improvements achieved in sequential pro-cesslng computers and the development of sequen-tial algorithms.
Recently, because of the furtherIKan~ characters are combined consonant and vowelsymbols used in written Japanese.
Kanjl characters ~reChinese ideographs.speeded-up requirement, parallel processing com-puters have been designed and parallel parsing al-gorithms (Matsumoto, 1986) (Haas, 1987) (Ryt-ter, 1987) -(Fukushima, 1990b) have been pro-posed.
However, there are many difficult problemsblocking efficient practical use of parallel process-ing computers.
One of the problems is that ac-cess confiicts occur when several processors reador write a common memory simultaneously.
An-other is the bottle-neck problem, wherein commt-nication between any two processors is restricted,because of hardware scale limitation.On the other hand, in the pattern processingfield, various kinds of accelerator hardware havebeen developed.
They are designed for a specialpurpose, not for general purposes.
A hardwareapproach hasn't been tried in the natural languageprocessing field yet.The authors propose developing natural lan-guage parsing accelerators, a hardware approachto the parsing speed-up (Fukushima, 1989b)-(Fukushima, 1990a).
This paper describes a newhardware algorithm for high speed morpheme ex-traction and its implementation on a specific ma-chine.
This morpheme extraction machine is de-signed as the first step toward achieving the nat-ura\] language parsing accelerators.2 MACHINE DES IGNSTRATEGY2.1 MORPHEME EXTRACTIONMorphological analysis methods are generallycomposed of two processes: (1) a morpheme x-traction process and (2) a morpheme determina-tion process.
In process (1), all morphemes, whichare considered as probably being use<\] to constructinput text, are extracted by searching a morphemedictionary.
These morphemes are extracted ascandidates.
Therefore, they are selected mainlyby morpheme conjunction constraint.
Morphemeswhich actually construct the text are determinedin process (2).The authors selected morpheme xtraction asthe first process to be implemented on specifichardware, for the following three reasons.
Firstis that the speed-up requirement for the morpho-logical analysis process is very strong in Japanese307Input Text .
.
.
.
.
.
.
.~.p) i~  C. ...... ~ Iverb!
!
i ' ' i I noun; I i ,1", ; ~ '~,~:  I noun~MorphemeExtraction~l f i~ inoun~.~ Process ..,) , t i~  inou n~ i Morpheme Dictionary!~;  postpositioni .
.
.
.
.
su,,x!~, :verbI II I : , ~ ,~ nouni .
.
.
.
.
.
.
.
.
.
d' "  .
.
.
.
.
.
.
.
"1  i ~)f :suffix Extracted= ' Morphemes i i~#~.
:noun= , .
.
.
.
.
.
.
.
.
/I I. .
.
.
.
!vo,~)f  !
no,,n; .
.
.
.
.
.
.
.
.
IFigure h Morpheme Extraction Process forJapanese Text2.2 STRATEGY D ISCUSSIONIn conventional morpheme xtraction methods,which are the software methods used on sequentialprocessing computers, the comparison operationbetween one key string in the morpheme dictio-nary and one sub-string of input text is repeated.This is one to one comparison.
On the other hand,many to one comparison or one to many compar-ison is practicable in parallel computing.Content- addressable mem-ories (.CAMs) (Chlsvln, 1989) (Yamada, 1987) re-allze the many to one comparison.
One sub-stringof input text is simultaneously compared with allkey strings stored in a CAM.
However, presentlyavailable CAMs have only a several tens of kilo-bit memory, which is too small to store data for amore than 50,000 morpheme dictionary.The above mentioned parallel processing com-puters realize the one to many comparison.
Onthe parallel processing computers, one processorsearches the dictionary at one text position, whileanother processor searches the same dictionary atthe next position at the same time (Nakamura,1988).
However, there is an access conflict prob-lem involved, as already mentioned.The above discussion has led the authors to thefollowing strategy to design the morpheme extrac-tion machine (Fukushima, 1989a).
This strategy isto shorten the one to one comparison cycle.
Simplearchitecture, which will be described in the nextsection, can realize this strategy.text parsing systems.
This process is necessary fornatural anguage parsing, because it is the firststep in the parsing.
However, it is more labo-rious for Japanese and several other languages,which have no explicit word boundaries, than forEngllsh and many European languages (Miyazald,1983) (Ohyama, 1986) (Abe, 1986).
English textreading has the advantage of including blanks be-tween words.
Figure 1 shows an example of themorpheme xtraction process for Japanese text.Because of the disadvantage inherent in readingdifficulty involved in all symbols being strung to-gether without any logical break between words,the morpheme dictionary, including more than50,000 morphemes in Japanese, is searched at al-most all positions of Japanese text to extract mor-phemes.
The authors' investigation results, indi-cating that the morpheme xtraction process re-quires using more than 70 % of the morphologi-cal analysis process time in conventional Japaneseparsing systems, proves the strong requirement forthe speed-up.The second reason is that the morpheme x-traction process is suitable for being implementedon specific hardware, because simple charactercomparison operation has the heaviest percentageweight in this process.
The third reason is thatthis speed-up will be effective to evade the com-mon memory access conflict problem mentioned inSection 1.3083 A HARDWARE ALGO-R ITHM FOR MOR-PHEME EXTRACTION3.1 FUNDAMENTALARCHITECTUREA new hardware algorithm for the morphemeextraction, which was designed with the strategymentioned in the previous ection, is described inthis section.The fundamental rchitecture, used to imple-ment the algorithm, is shown in Fig.
2.
The maincomponents of this architecture are a dictionaryblock, a shift register block, an index memory, anaddress generator and comparators.The dictionary block consists of character mem-ories (i.e.
1st character memory, 2nd charactermemory, .
.
.
,  N-th character memory).
The n-thcharacter memory (1 < n < N) stores n-th charac-ters of all key strings \]-n th~ morpheme dictionary,as shown in Fig.
3.
In Fig.
3, " i I~" ,  "~f", "@1:~", "~" ,  "~" ,  and so on are Japanese mor-phemes.
As regarding morphemes shorter thanthe key length N, pre-deflned remainder symbols/ill in their key areas.
In Fig.
3, ' * '  indicates theremainder symbol.The shift register block consists of character reg-isters (i.e.
1st character register, 2nd character reg-ister,... ,  N-th character register).
These registersAddress~'~._____J Index J , ,~enerator~/'--"--\] MemorycM ~*(~,comlpStrator~*~ lstCRliiiiiiiiiiii i iii i!ii; !
!ili!
i;iII' ,i TI N-th CM mparator~ , .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
..--.-.-~.-~ Mazcn ~lg Dictionary BlockCM --- Character Memory.... tN-th CR,IText RegisterBlockCR = Character RegisterFigure 2: Fundamental Architecture.
jIndex MemoryIi l :IIm~ ~=\ [ in  *I1:I1~I1~ *I1:I1 2| ?!!
*"3(" "X'li.
.
.
.
.
.
.
l "X"?
!, * I i  .
.
.
.
.
.
~, *i il i .3 4 N-thCharacter MemoryFigure 3: Relation between Character Memoriesand Index Memory23 ~:4 J~ Shift Shift7,8 Ul I~1 L~(a) (b) (cggg gg(d) (e)Figure 4: Movement in Shift Register Blockstore the sub-string of input text, which can beshifted, as shown in Fig.
4.
The index memory re-ceives a character from the 1st character register.Then, it outputs the top address and the numberof morphemes in the dictionary, whose 1st char-acter corresponds to the input character.
Becausemorphemes are arranged in the incremental orderof their key string in the dictionary, the pair for thetop address and the number expresses the addressrange in the dictionary.
Figure 3 shows the rela-tion between the index memory and the charactermemories.
For example, when the shift registerblock content is as shown in Fig.
4(a), where '~ 'is stored in the 1st character egister, the indexmemory's output expresses the address range forthe morpheme set {"~",  "~" ,  "~\ ]~" ,  "~\]~~\[~", ~\ ]~" ,  .
.
.
,  "~ J "}  in Fig.
3.The address generator sets the same address toall the character memories, and changes their ad-dresses imultaneously within the address rangewhich the index memory expresses.
Then, the dic-tionary block outputs an characters constructingone morpheme (key string with length N ) simul-taneously at one address.
The comparators areN in number (i.e.
1st comparator, 2nd compara-,or, .
.
.
,  N-th comparator).
The n-th comparatorcompares the character in the n-th character reg-ister with the one from the -th character mem-ory.
When there is correspondence b tween thetwo characters, a match signal is output.
In thiscomparison, the remainder symbol operates as awild card.
This means that the comparator alsooutputs a match signal when the ~-th charactermemory outputs the remainder symbol.
Other-wise, it outputs a no match signal.The algorithm, implemented on the above de-scribed fundamental rchitecture, is as follows.?
Main procedureStep 1: Load the top N characters from theinput text into the character registers inthe shift register block.309Step 2: While the text end mark has not ar-rived at the 1st character egister, im-plement Procedure 1.?
Procedure 1Step I: Obtain the address range for themorphemes in the dictionary, whose istcharacter corresponds to the character inthe 1st character register.
Then, set thetop address for this range to the currentaddress for the character memories.Step 2: While the current address is in thisrange, implement Procedure 2.Step 3: Accomplish a shift operation to theshift register block.?
Procedure 2Step 1: Judge the result of the simultane-ous comparisons at the current address.When all the comparators output matchsignals, detection of one morpheme is in-dicated.
When at least one comparatoroutputs the no match  signal, there is nodetection.Step 2: Increase the current address.For example, Fig.
4(a) shows the sub-string inthe shift register block immediately after Step1 for Main procedure, when the input text is" ~ J ~ } ~ L ~  bfc .
.
. "
.
Step 3 forProcedure  I causes such movement as (a)-*(b),(b)--*(c), (c)---*(d), (d)--*(e), and so on.
Step 1and Step 2 for Procedure  1 are implemented ineach state for (a), (b), (c), (d), (e), and so on.In state (a) for Fig.
4, the index memory's out-put expresses the address range for the morphemeset {"~", "~"~", "~ '~" ,  "~;" ,  "~:~\]~", ...,"~ J "}  if the dictionary is as shown in Fig.
3.Then, Step 1 for Procedure 2 is repeated ateach address for the morpheme set {"~:", "~" ,,,~f~f,,, ,,~:~,,, , ,~ f , , ,  ..., , ,~,,}.Figure 5 shows two examples of Step 1 for Pro-cedure 2.
In Fig.
5(a), the current address forthe dictionary is at the morpheme "~" .
InFig.
5(b), the address is at the morpheme "~$;\]~".
In Fig.
5(a), all of the eight comparatorsoutput match signals as the result of the simul-taneous comparisons.
This means that the mor-pheme " ~ "  has been detected at the top po-sition of the sub-string "~~j~:~ ~ L".
Onthe other hand, in Fig.
5(b), seven comparatorsoutput match signals, but one comparator, at 2ndposition, outputs a no match  slgual, due to thediscord between the two characters, '~' and '~\[~'.This means that the morpheme "~\ ]~"  hasn'tbeen detected at this position.Key String Text Sub-stringfrom Dictionary Block in Shift Register Block/Comparators ~ comParators\2 2 , .
*X~ 23 3 ~ 34 .~C~ 4 , , , (~.
4$ $"~-~)~" is detected. "
~ "  is NOT detected.
(a) (b)0 shows match in a comparator.X shows no match in a comparator.Figure 5: Simultaneous Comparison i  Fundamen-tal Architecture3.2 EXTENDEDARCHITECTUREThe architecture described in the previous ec-tion treats one stream of text string.
In this sec-tion, the architecture is extended to treat multi-ple text streams, and the algorithm for extract-ing morphemes from multiple text streams is pro-posed.Generally, in character ecognition results orspeech recognition results, there is a certainamount of ambignJty, in that a character or a syl-lable has multiple candidates.
Such multiple can-didates form the multiple text streams.
Figure6(a) shows an example of multiple text streams,expressed by a two dimensional matrix.
One di-mension corresponds to the position in the text.The other dimension corresponds to the candi-date level.
Candidates on the same level form onestream.
For example, in Fig.
6(a), the characterat the 3rd position has three candidates: the 1stcandidate is '~' ,  the 2nd one is '~ '  and the 3rdone is '\]~'.
The 1st level stream is "~\] :~: .~.
.
. "
.The 2nd level stream is "~R.
.
. "
.
The 3rdlevel stream is "~R ~.
.
.
".Figure 6(b) shows an example of the morphemesextracted from the multiple text streams hown inFig.
6(a)..In the morpheme xtraction process forthe multiple text streams, the key strings in themorpheme dictionary are compared with the com-binations of various candidates.
For example, "~~" ,  one of the extracted morphemes, is com-posed of the 2nd candidate at the 1st position,the 1st candidate at the 2nd position and the 3rdcandidate at the 3rd position.
The architecturedescribed in the previous ection can be easily ex-tended to treat multiple text streams.
Figure 7310(a) Multiple Text Streams*-Position in Text--*1234Candidate Level 2 ;1~ ~ ~~verb!.~ inoun\[\] inouni~ I~ i noun(b) Extracted \[p) i suffixMorphemes \[~\]i .,~ !nounnounnounI verb~ :  i nou.?
'~ iverbi .
.
.
.
.
.
.
.
.
?Figure 6: Morpheme Extraction from MultipleText StreamsAddress~.
\] Index ' 1~ enerator  Memory .
.
.
.
.. .
I  , ? "
'1Ib\ [  1st CM ~'( comlpSt ra tor}*~l i  '1I ======================= I!
I , 2nd , I~';, I 2ndCM I'~(Comparator)' ~.
.
.
.
.
.
.
.
.
.
.
.
.
.
.Shift Register ._.....~ Block"':'.
"'11" .....li; .
.
.
.
.
.
.
.
.
I;: .
.
.
.
.
!l N-th CM \[k.C~C?m;arat?r~ 2-N CR .... ~ .. bl~?E~i,;h-~:: D,cttonary Block 'g 1st Le~el 2ndlLevel M~h LevelStream St\[earn Stream CM = Character Memorym-n CR = m-th Level n-th Character RegisterFigure 7: Extended Architecture311shows the extended architecture.
This extendedarchitecture is different from the fundamental r-chitecture, in regard to the following three points.First, there are M sets of character registers inthe shift register block.
Each set is composed ofN character registers, which store and shift thesub-string for one text strearn.
Here, M is thenumber of text streams.
N has already been in-troduced in Section 3.1.
The text streams movesimultaneously in all the register sets.Second, the n-th comparator compares the char-a~'ter f om the n-th character memory with the Mcharacters at the n-th position in the shift regis-ter block.
A match signal is output, when thereis correspondence b tween the character f om thememory and either of the M characters in the reg-isters.Third, a selector is a new component.
It changesthe index memory's input.
It connects one of theregisters at the 1st position to sequential indexmemory inputs in turn.
This changeover occursM times in one state of the shift register block.Regarding the algorithm described in Section3.1, the following modification enables treatingmultiple text streams.
Procedure 1 and Pro-cedure 1.5, shown below, replace the previousProcedure 1.?
Procedure 1Step 1: Set the highest stream to the currentlevel.Step 2: While the current level has not ex-ceeded the lowest stream, implementProcedure 1.5.Step 3: Accomplish a shift operation to theshift register block.?
Procedure 1.5Step 1: Obtain the address range for themorphemes in the dictionary, whose 1stcharacter corresponds tothe character inthe register at the 1st position with thecurrent level.
Then, set the top addressfor this range to the current address forthe character memories.Step 2: While the current address is in thisrange, implement Procedure 2.Step 3: Lower the current level.Figure 8 shows an example of Step 1 for Proce-dure 2.
In this example, all of the eight compara-tors output he match signal as a result of simulta-neous comparisons, when the morpheme from thedictionary is "~:" .
Characters marked witha circle match the characters from the dictionary.This means that the morpheme "~:"  has beendetected.When each character has M candidates, theworst case time complexity for sequential mor-pheme extraction algorithms is O(MN).
Onthe other hand, the above proposed algorithm(Fukushima's algorithm) has the advantage thatthe time complexity is O(M).Sub-StringsKey String for Multiple Text Streamsfrom Dictionary Block in Shift Regoster BlockComparators , ,~"o  l?lL4 ~ ,=*(~ i i !
!
!~.
1 2 3"~/ i "  is detected.Figure 8: Simultaneous Comparison in ExtendedArchitecture,-- MEX- IPC-9801VXHamaguchi's hardware algorithm (Ham~guchi,1988), proposed for speech recognition systems, issimilax to Fukushima's algorithm.
In Hamaguchi'salgorithm, S bit memory space expresses a set ofsyllables, when there are S different kinds of syl-lables ( S = 101 in Japanese).
The syllable candi-dates at the saxne position in input phonetic textare located in one S bit space.
Therefore, H~n-aguchi's algorithm shows more advantages, as thefull set size of syllables is sm~ller s~nd the num-ber of syllable candidates is larger.
On the otherha~d, Fukushima's ~Igorithm is very suitable fortext with a large character set, such as Japanese(more than 5,000 different chaxacters are com-puter re~able in Japanese).
This algorithm ~Isohas the advantage of high speed text stream shift,compared with conventions/algorithms, includingHamaguchi's.4 A MORPHEME EX-TRACT ION MACHINE4.1 A MACHINE OUTL INEThis section describes a morpheme xtractionmachine, called MEX-I.
It is specific hardwarewhich realizes extended architecture and algo-rithm proposed in the previous section.It works as a 5ackend machine for NEC Per-sons/Computer PC-9801VX (CPU: 80286 or V30,clock: 8MHz or 10MHz).
It receives Japanese textfrom the host persona/computer, m~d returns mor-phemes extracted from the text after a bit of time.312Figure 9: System Overall ViewFigure 9 shows an overall view of the system, in-cluding MEX-I and its host persona/ computer.MEX-Iis composed of 12 boards.
Approximately80 memory IC chips (whose total memory storagecapacity is approximately 2MB) and 500 logic ICchips are on the boards.The algorithm parameters in MEX-I axe as fol-low.
The key length (the maximum morphemelength) in the dictionary is 8 (i.e.
N = 8 ).The max imum number of text streams is 3 (i.e.M = 1, 2, 3).
The dictionary includes approxi-mately 80,000 Japanese morphemes.
This dictio-nary size is popular in Japanese word processors.The data length for the memories a~d the registersis 16 bits, corresponding to the character code inJapanese text.4.2 EVALUATIONMEX-I works with 10MHz clock (i.e.
the clockcycle is lOOns).
Procedure 2, described in Sec-tion 3.1, including the simultaneous comparisons,is implemented for three clock cycles (i.e.
300ns).Then, the entire implementation time for mor-pheme xtraction approximates A x D x L x M x300n8.
Here, D is the number of all morphemes inthe dictionary, L is the length of input text, M isthe number of text streams, and A is the index-ing coef~dent.
This coei~cient means the aver-age rate for the number of compared morphemes,compared to the number of all morphemes in thedictionary.31ementation Time \[sec\] Im A=O.O056 ?
Newspapers .
,"  l ir o ?
Technical Reports /5 ?
Novels ,'",," ?
A=0.003o"4 / ??
? "
so3 / ??
s~ ao ~?2 / ?
.
I  A=0.001j /  o.?
so ?
?
.
.
.
.
.
.
- - ' ' ' ' ' "1 o ?
o o .
_ .
.
- ' "ss o ?
~ .
.
.
- - - ".
.
.
.
I ' "  I I 1 I I )O 10,000 20,000 30,000 40,000 50,000 60,000Number of Candidates in Text Streams (=LXM)Figure 10: Implementation Time MeasurementResultsThe implementation time measurement results,obtained for various kinds of Japanese text, areplotted in Fig.
10.
The horizontal scale in Fig.
10is the L x M value, which corresponds to the num-ber of characters in all the text streams.
The ver-tical scale is the measured implementation time.The above mentioned 80,000 morpheme dictio-nary was used in this measurement.
These re-sults show performance wherein MEX-I can ex-tract morphemes from 10,000 character Japanesetext by searching an 80,000 morpheme dictionaryin 1 second.Figure 11 shows implementation time compari-son with four conventional sequential algorithms.The conventional lgorithms were carried out onNEC Personal Computer PC-98XL 2 (CPU: 80386,clock: 16MHz).
Then, the 80,000 morpheme dic-tionary was on a memory board.
Implementationtime was measured for four diferent Japanese textsamplings.
Each of them forms one text stream,which includes 5,000 characters.
In these measure-ment results, MEX-I runs approximately 1,000times as fast as the morpheme xtraction pro-gram, using the simple binary search algorithm.It runs approximately 100 times as fast as a pro-gram using the digital search algorithm, which hasthe highest speed among the four algorithms.Morpheme Extraction Methods Text1 Text2 Text3 Text4Programs Based on Sequential Algorithms \[sec\]?
Binary Search Method (Knuth, 197S) 564 642 615 673?
Binary Search Method 133 153 147 155Checking Top Character Index?
Ordered Hash Method (~e.
1074) 406 440 435 416?
Digital Search Method (Knuth, 1973) 52 56 54 54with Tree Structure IndexMEX-I 0.56 0.50 0.51 0.44Figure lh  Implementation Time Comparison for5,000 Character Japanese Texttoward achieving natural anguage parsing accel-erators, which is a new approach to speeding upthe parsing.The implementation time measurement resultsshow performance wherein MEX-I can extractmorphemes from 10,000 character Japanese textby searching an 80,000 morpheme dictionary in 1second.
When input is one stream of text, it runs100-1,000 times faster than morpheme xtractionprograms on personal computers.It can treat multiple text streams, which arecomposed of character candidates, as well as onestream of text.
The proposed algorithm is imple-mented on it in linear time for the number of can-didates, while conventional sequential algorithmsare implemented in combinational time.
This isadvantageous for character recognition or speechrecognition.Its architecture is so simple that the authors be-lieve it is suitable for VLSI implementation.
Ac-tually, its VLSI implementation is in progress.
Ahigh speed morpheme xtraction VLSI will im-prove the performance ofsuch text processing ap-plications in practical use as Kana-to-Kanji con-version Japanese text input methods and spellingcheckers on word processors, machine translation,automatic indexing for text database, text-to-speech conversion, and so on, because the mor-pheme extraction process is necessary for theseapplications.The development of various kinds of accelera-tor hardware for the other processes in parsingis work for the future.
The authors believe thatthe hardware approach not only improves conven-tional parsing methods, but also enables new pars-ing methods to be designed.5 CONCLUSIONThis paper proposes a new hardware algorithmfor high speed morpheme xtraction, and also de-scribes its implementation on a specific machine.This machine, MEX.I, is designed as the first step313REFERENCESAbe, M., Ooskima, Y., Yuura~ K. mad Takeichl,N.
(1986).
"A Kana-Kanji Translation System forNon-segmented Input Sentences Based on Syntac-tic and Semantic Analysis", Proc.
11th Interna-tional Conference on Computational Linguistics:280-285.Amble, O. and Knuth, D. E. (1974).
"OrderedHash Tables", The Computer Journal, 17(~):135-142.Bear, J.
(1986).
"A Morphological r.e, ognizerwith Syntactic and Phonological Rules, Proe.llth International Conference on ComputationalLinguistics: 272-276.Chisvin, L. and Duckworth, R. J.
(1989).
"Content-Addressable and Associative Memory:Alternatives to the Ubiquitous RAM", Computer.51-64.Fukushlma, T., Kikuchi, Y., Ohya~a~ Y. andMiy~i, H. (1989a).
"A Study of the MorphemeExtraction Methods with Multi-matching Tech-nique" (in Japanese), Proc.
3gth National Conven-tion of Information Processing Society of Japan:591-592.Fukuskima, T., Ohyam% Y. and Miy~i, H.(1989b).
"Natural Language Parsing Accelera-tors (1): An Experimental Machine for MorphemeExtraction" (in Japanese), Proc.
3gth NationalConvention o.f Inlormation Processing Society oJJapan: 600--601.Fukushima, T., Ohyama, Y. and Miy~i, H.1990a).
"Natural Language Parsing AcceleratorsI): An Experimental Machine for Morpheme Ex-traction" (in Japanese), SIC, Reports of Informa-tion Processing Society of Japan, NL75(9).Fukushima, T. (19901)).
"A Parallel Recogni-tion Algorithm of Context-free Language by Ar-ray Processors"(in Japanese), Proc.
40t1~ NationalConvention oJ Information Processing Society ofJapan: 462-463.Haas, A.
(1987).
"Parallel Parsing for Unifi-cation Grammar", Proc.
l Oth International JointConference on Artificial Intelligence: 615-618.Hamaguehl,S.
mad Suzuki, Y.
(1988).
"Haxdwaxe-matchlngAlgorithm for High Speed Linguistic Processing inContinuous Speech-recognitlon Systems", $~stemsand Computers in Japan, 19(_7~.
72-81.Knuth, D. E. (1973).
Sorting and Search-ing, The Art of Computer Programming, Vol.3.Addlson-Wesley.Koskenniemi, K. (1983).
"Two-level Model forMorphological Analysis", Proe.
8th InternationalJoint Conference on Artificial Intelligence: 683--685.Matsumoto, Y.
(1986).
"A Parallel Parsing Sys-tem for Natural Language Analysis", Proc.
3rdInternational Conference of Logic Programming,Lecture Notes in Computer Science: 396-409.Miyazakl, M., Goto, S., Ooyaxna, Y. and ShiraJ,S.
(1983).
"Linguistic Processing in a Japanese-text-to-speech-system", International Conferenceon Text Processing with a Large Character Set:315-320.Nak~mura, O., Tanaka, A. and Kikuchi, H.(1988).
"High-Speed Processing Method for the314Morpheme Extraction Algorithm" (in Japanese),Proc.
37th National Convention oJ InformationProcessing Society of Japan: 1002-1003.Ohyama, Y., Fukushim~, T., Shutoh, 2".
andShutoh, M. (1986).
"A Sentence Analysis Methodfor a Japanese Book Reading Machine for theBlind", Proc.
~4th Annual Meeting of Associationfor Computational Linguistics: 165--172.Russell, G. J., Ritchie, G. D., Pulmaa, S. G. andBlack, A. W. (1986).
"A Dictionary and Morpho-logical Analyser for English", Proc.
llth Interna-tional Conference on Computational Linguistics:277-279.Rytter, W. (1987).
"Parallel Time O(log n)Recognition of Unambiguous Context-free Lan-guages", Information and Computation, 75: 75--86.Yamad~, H., Hirata, M., Nag~i, H. and Tal~-h~hi, K. (1987).
"A High-speed String-search En-gine", IEEE Journal of Solid-state Circuits, SC-~(5): 829-834.
