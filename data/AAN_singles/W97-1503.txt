Participatory Design for Linguistic Engineering:the Case of the GEPPETTO Development EnvironmentFab io  C i ravegna,  A lber to  Lave l l i ,  Dan ie la  Pet re l l i ,  Fab io  P ianes iIst i tuto :per la Ricerca Scientifica e TecnologicaLoc.
Pant~ di Povo1-38050 Trento, I talye-maih {ciravellavell i lpetrell i\[pianesi}Qirst.itc.itAbst rac tCurrent tools for Linguistic Engineering(LE) do not completely fit the requirementsfor scale development and deployment ofreal applications.
What seems to lack inthe available tools is a comprehensive studyof user needs.
This is a real limitation in afield where people with very different back-grounds (from computer scientists to lin-guists) are involved.
To avoid such a short-coming we adopted the Participatory De-sign (PD) methodology, i.e.
a User Cen-tered approach that favors the definition oftools suited to the real user needs.
In thispaper we show how such methodology wasused in the design and implementation f adevelopment environment for LE applica-tions.1 In t roduct ionThe growing number of applications exploiting NLPtechniques i bringing about a shift from an arti-san attitude with respect o NLP towards the needfor more sophisticated solutions and tools (Linguis-tic Engineering, LE).
Consequently, interest has in-creased in the study and implementation f environ-ments capable of supporting the users in the devel-opment, testing and debugging of Linguistic Engi-neering Applications (LEAs).
In this respect, a ma-jor feature of a Linguistic Engineering ApplicationDevelopment System (LEADS) is to provide facil-ities for the development, reuse and integration oflinguistic processors and data.Despite the remarkable results that have beenachieved (too many to be listed here), the generalimpression is that these systems do not completelyfit the requirements for scale development and de-ployment of real applications.
In this connection,one major point is the concern about human fac-tors.
In general, studies have conclusively shownthat even small differences in the characteristics ofthe end users (e.g., computer experience, knowledgeabout the domain, use of the system) can heavilyaffect he suitability of the tools developed (Nielsen,1993).
The development of a LEA is a task involvingdifferent kinds of skills and expertise.
For instance,it is conceivable that the development and mainte-nance of the needed linguistic resources (grammarsand lexica) require different skills (and be thereforepursed by different people) than those involved inthe construction and validation of the architecture ofthe final application.
The involvement ofusers sincethe very beginning of the system design (i.e.
theadoption of a User Centered approach) can greatlyenhance the effectiveness of a LEADS: user needscan pervade the design and implementation f allthe basic functionalities of the tool.
Such an in-volvement has an impact on the design of the sys-tem: each typology of user should have available allthe relevant tools for their work.
Moreover, it is im-portant hat the system is friendly, and easy to getaccustomed with.
Since situations can be envisagedin which the user is not a full-time LEA developer,the system must also be perspicuous and intuitiveenough to support her/him on a time-to-time basis.These results depend on the availability of a carefulanalysis of the development cycle of LEAs; only suchan analysis permits to single out basic (even if ab-stract) typologies of users defined in terms of theirskills, the tasks they accomplish, and the like.Important support o these considerations comesfrom the field of human-computer interaction(Carmel et al, 1993).
As a matter of fact, it isgenerally acknowledged that approximately 60-to-80% of all problems of information systems can betraced to poor or inadequate r quirement specifica-tions, including both lack of facilities and usabilityproblems.
What is needed is to involve day-to-daywork experience arly in the project, when the ba-sic design choices are made.
Positive effects of UserCentered approaches for the design of informationsystems are not limited to usability: benefits werediscovered (Nielsen, 1993; Carmel et al, 1993) to beconnected to time and cost saving during develop-ment, completeness of system functionalities, repaireffort savings as well as to user satisfaction.The purpose of this paper is to describe a LEADS,16called GEPPETTO, which has been developed withthe aim of addressing these issues by adopting a UserCentered design approach (Norman and Draper,1986).
Such a move resulted in an environment that:(A) supports the whole process of designing and de-veloping LEAs; (B) provides the different ypologiesof users with dedicated facilities which are suited totheir skills and backgrounds; (C) improves on thetraining phase.2 Methodo logyA User Centered (UC) approach was adopted for thedesign of GEPPETTO.
Indeed, UC approach takesuser needs into account from the very beginning ofthe design phase till the final evaluation of the sys-tem.
This way, system design is changed from amere technical and individual activity into an inter-disciplinary and group activity.
Importantly, UC ap-proach secures the attainment of such goals as: ap-propriateness with respect o user needs and desider-ata; flexibility with respect o different skills and dif-ferent user typologies; and overall usability.The engagement of users in the system designcan occur at different levels: consultative l vel whenusers are considered as sources of information or asparticipants to final evaluations; representative l velwhen they participate in structured esign meetings;consensus level when users are part of the designteam.For GEPPETTO we chose the Participatory Designmethodology (henceforth PD, (of the ACM, 1993))which falls in the third class.
In PD, users actas fully empowered participants to the design pro-cess, sharing decisions together with system design-ers.
Such a working style promotes mutual learn-ing between users and designers, and facilitates theidentification of user needs and of possible misun-derstandings.
Hence PD is particularly suitable forcomplex domains where it might be difficult for de-signers alone to get a knowledge sufficient for propos-ing meaningful solutions.
This is certainly true ofLE, because of the complexity of the domain andof the different skills involved in the developmentof a LEA.
Moreover, certain peculiar techniques ofPD, such as participatory prototyping, offer a nat-ural way to reduce errors otherwise not detectableuntil the final system is put to use.PD employs a wide range of techniques (Muller etal., 1993) whose applicability depends on such fac-tors as design goals, group size, availability of usersfor long periods, and the like.Concerning GEPPETTO design, PD was imple-mented by establishing a working group (WG) of fivepeople consisting of system developers (2), users (2),and an interface design expert (1).
Different tech-niques were applied at different stages of the designprocess:?
Env is ion ing fu ture  solut ions:  in the earlyphases, informal discussions for clarifying lobalstatements and stimulating the users' creativethinking took place.
Outcomes of these meet-ings concerned the awareness of the differentroles, skills and knowledge involved in the de-velopment of LEAs, and the identification of anumber of basic user typologies.
Moreover, itseemed unlikely to the WG that a single per-son could cover the whole process alone.
Thatis, the development of a LEA is a multidisci-plinary work which can benefit from some kindof support in its cooperative volution.?
Par t i c ipatory  requ i rement  specif icat ions:the discussion focussed on users desiderata ndsystem capabilities and resulted in a list of therequired functionalities.
Such a list was thendivided into subsets, each one corresponding toone of the user typologies.
The discussion thencentered on how each typology acts in isolation,and how it interacts with the others, during thedevelopment of a LEA.
Thus, different levels forsingle and cooperative work were identified.
1?
Co l laborat ive  low-fi p ro to typ ing :  dur-ing collaborative prototyping workshops, papermock-ups (also called low-fi prototypes) weredesigned and evaluated by the WG.
This activ-ity was extremely useful to move from ideas toconcrete interface design, to detect and correctmisunderstandings, and to elicit original solu-tions to unforeseen problems.
The outcome wasthe complete definition of the system.?
Cooperat ive  valuat ions:  cooperative evalu-ations of the first implementation supported thefinal refinements of the implemented environ-ment.
At this stage, feedbacks from the userswere discussed and taken into account for fur-ther improvements.?
Exper imenta l  sessions: even if not requiredby PD, empirical evaluations with users not in-volved in PD have been conducted to verify theeffectiveness of the design.
Method and resultsare discussed in Section 7.In the next section we will focus on the results ofthe first two steps of the PD methodology, as appliedto GEPPETTO design.3 Users ,  Tasks  and  LE  SystemsThe discussion inside working group was organizedaround three main (sequential) topics:?
the construction process of LEAs: developmentcycle, involved skills and tasks, etc.;?
user desiderata: rapid prototyping, graphicalinterfaces, openness of the architecture, deliv-1The present version of GEPPETTO does not providefeatures for advanced cooperative work.17_Applicative Raw Cons~a/n~ Corporaof Rc m~ntatiwTest Corpus\[ Defimti?n f lArcMtectulalRequtrementsAmhiteeturalRequt:emenCa\] DefiMtiot~ Mign I \[ LinguiJtic & Specification f I Proce~ors Data Develolnnent1 1Ptoc~ots Lingtustie ResourcesRdiner~enttFigure 1: Development cycle of LE applicationsery systems, modular approach to linguistic de-velopment, etc.;?
specifications of system facilities: tools forbrowsing and editing linguistic data, API forintegrating external resources, etc.3.1 Building LE ApplicationsThe working group focused on the abstract defini-tion of the development cycle of LEAs and of thetypologies of the involved users.
As a matter of factthis is a requirement of an LE approach to NLP sys-tems.The development cycle of LEAs was defined as infigure 1.As a first step, applicative constraints must be con-sidered.
In fact, the working context of a LEA de-termines not only the global behavior of the LEA,but also the way the different modules interact toproduce the desired behavior.
Another preliminarystep is the collection of raw corpora.After such a preparatory work, the following de-velopment cycle typically takes place:?
identification of representative corpora.
In thisstep the aforementioned raw corpora are classi-fied and filtered to find a set of examples that isrepresentative of the characteristics of the wholecorpus.
The resulting corpus is then split in twoparts: one to be used during the system devel-opment (training corpus), the other during thetesting phase (test corpus);?
definition of the architectural requirements.Given the applicative constraints and the char-acteristics of the corpus, the specific require-ments of the LEA are defined;?
definition, design and implementation of theprocessors, according to the requirements of theprevious point;?
development of the linguistic resources, accord-ing to the requirements arising from the previ-ous analysis;?
testing and refinement of both the processorsand the data collection.Once all these steps have been gone through, theresulting architecture is delivered (delivery system)and customization can start.The working group singled out three different usertypologies which can play a role in the tasks above.Each of them corresponds to different backgrounds,knowledge and skills: 2?
Linguistic Engineer (LER): expert on architec-tures for LE.
Background: computer science;knowledge of computational linguistics;?
Computational Linguist (CL): expert on lin-guistic data development.
Background: com-putational linguistics; little knowledge of com-puter science;?
Processor Manager (PM): expert on processorsfor language processing.
Background: com-puter science; knowledge of computational lin-guistics.Accordingly, the development cycle has been re-fined as follows:?
identification of representative corpora: LERinteracts with CL to provide a representativecorpus for the application;?
definition of architectural requirements: giventhe corpus and the requirements for processorsand linguistic data, LER interacts with PM andCL to define the correct architecture;?
definition, design and implementation of theprocessors: PM chooses (or designs and imple-ments) them;?
development of linguistic resources: CL chooses(or designs and implements) them;2Actually the working group added also an Applica-tion Manager, i.e.
an expert of the domains and of theusers of the LEA.
Such a profile is not discussed in thispaper.18?
test and refinement: LER checks the correspon-dence between the current implementation andthe architectural requirements; the processorsare tested by PM and the data collection byCL.In the end, the working group had effectively spec-ified the actions, the tasks, and the skills required tocreate LEAs.
The following step was the identifica-tion of the user needs.3.2 User  Needs  and  Des iderataThe working group discussed some of the desirablefeatures of a LEADS, from the point of view of theusers.
Results can be summarized as follows:?
facilities for the rapid prototyping of LEAs viagraphical interfaces;?
facilities for choosing among resources (e.g.
lex-ica and grammars) provided by libraries of lin-guistic data;?
specialized graphical browsers and editors forlinguistic data;?
facilities for interactively testing and debuggingprocessors and data;?
facilities for testing and debugging the wholearchitecture against est suites;?
aids for providing the delivery system;?
facilities for integrating processors and data dif-ferent from those already provided by the envi-ronment;?
facilities for integrating knowledge stored in ex-ternal modules (e.g.
Knowledge Bases).One of the main outcomes of PD discussions wasthat the different users would benefit from a sin-gle, common tool capable of facilitating and support-ing their mutual interactions (even when performingtheir tasks independently) as well as the integrationof resources developed independently.
3On the other hand, given the different profilesand skills involved, each of the three user typolo-gies needs different facilities and might prefer differ-ent interaction modalities.
For example CLs tend tofavor graphical interfaces that hide as much as pos-sible low-level details (e.g.
internal data representa-tion).
On the other hand, PMs have to cope withlow level details.
As it turns out, the ideal environ-ment should both address the differing interactionstyles of each user, and, at the same time, provide a3In this paper we focus on the interactions amongusers belonging to the different typologies and on theintegration of their work.
We will not address the im-portant question of how to support he interactions andintegration involving users of the same typology.
Forinstance, we will not discuss here the issue of how thedevelopment of large grammars by different CLs can beproperly supported by a LEADS.uniform environment where their contributions canbe easily integrated.
These results can be obtainedif, at any time, the user can select all and only thefunctionalities he/she actually needs.A similar tension involves also linguistic data andprocessors.
LERs want to see them as units that canbe assembled to build the final architecture.
PMs areinclined to consider the linguistic data as a unit, butsee the processors as complex modules to manipu-late.
Finally, CLs obviously must be able to singleout pieces of linguistic data and organize them in asignificant way, while using the processors as blackboxes.Before discussing how user needs have been im-plemented in GEPPETTO, we briefly introduce theformalism for linguistic data as it was developed bythe CLs of the working group.4 The Formalism for Linguistic DataCLs participating in the working group suggesteda Typed Feature Logic oriented (Carpenter, 1992)formalism.
The reasons were as follows:?
TFL formalisms provide a way for breakingdown the structure of linguistic data, allowingfor a clear separation between the description ofabstract linguistic types and that of grammat-ical rules and lexical entries.
4 This facilitatesknowledge ncapsulation as well as a modulararchitecture of linguistic data.
Such a modular-ity can play an important role in the reuse ofexisting data;?
typing secures to a high degree the consistencyof the linguistic data.
This speeds up the pro-cess of data editing and debugging;?
the formalism is well known and many basic uni-fication algorithms are available;?
it meets the demands of many current linguistictheories, e.g.
LFG, GPSG, HPSG, etc.TFL specifications are compiled into a graph for-mat, where each node represents a Typed FeatureStructure (TFS).
Types and the type hierarchy havebeen implemented by adapting the encoding schemaproposed by (Ait-Kaci et al, 1989) to the TFL for-mat.
This permits to efficiently handle very largetype hierarchies as well as to account in a straight-forward way for type disjunction.
The standard TFLformalism has been modified to accommodate:?
Dec larat ion s ta tements  pecifying, for instance,that a certain object is not an ordinary TFS.
Incase its properties must be assessed by other,4In this respect, CLs strongly suggested that somephrase-structure-like s leton should be provided.
Thisseems to better address their expectations and ways ofthinking than a system in which grammar ules are ab-sent, as it is normally possible in type-oriented linguisticformalism (e.g.
HPSG).19possibly external, modules; such a fact can bespecified by means of external constraints;?
External constraints providing ,explicit links toexternal modules, e.g.
morphological proces-sors, independent KBs, etc.;?
Directives for the unifier.
For instance, it ispossible to force the unifier to consider in thefirst place the paths that have been observed tocause more frequent failures (Uszkoreit, 1991).?
Macros.Declaration statements and external constraintsgreatly enhance the modularity and portability ofthe LEAs developed by means of GEPPETTO, by al-lowing the reuse of existing processors and/or data.5 The  GEPPETTO Env i ronmentIn this section some of the characteristics of GEP-PETTO are outlined, focusing on those aspects thatspecifically meet user needs.
A more detailed de-scription of GEPPETTO is contained in (Ciravegnaet al, 1996).In GEPPETTO an application consists of two mainparts: a (set of) processor(s) and a Linguistic Sys-tem.
The latter is the collection of all the sets oflinguistic descriptions relevant for the characteriza-tion of a given corpus.
Given the kind of formal-ism adopted, namely TFL, a Linguistic System con-sists of: a type hierarchy, a grammar, a lexicon, anda set of macros.
The concept of linguistic systemis not simply conceived as a set of the four com-ponents just mentioned but it is a complex objectwith a central role in GEPPETTO: much of the de-velopment of LEAs is centered around linguistic sys-tems.
CLs edit, browse, and update linguistic sys-tems.
They can reuse existing linguistic systems, orparts thereof, to produce new ones.GEPPETTO maintains a conceptual distinction be-tween browsing/editing and testing/debugging.
Ac-tually, browsing/editing can be performed indepen-dently by different users, whereas testing/debuggingcan require a strict cooperation between different y-pology of users.
This is so whenever an error is dueto unexpected interactions between data and proces-sors.
These observations emphasize the advantage ofa single environment for the whole development cy-cle: different users have dedicated facilities for devel-opment, but a common environment for integratingand testing.We now turn to a discussion of the facilities andtools provided to the different users.5.1 Suppor t ing  the  L inguist ic  Eng ineerLER main task is the study of architectural require-ments (together with PM).
He/she also controls thecompliance of the LEA with the initial requirements.To this end, GEPPETTO provides support for: (a)the rapid prototyping of architectures by assemblingalready existing processors and linguistic systems,and (b) tests against a test corpus.
Both data andprocessors are seen by the LER as black boxes thatcan be combined by means of a graphical interface.When the architecture meets the requirements, adelivery system can be produced.
It contains theselected linguistic system and processor(s), and ex-cludes the GEPPETTO development environment.5.2 Suppor t ing  the  Processor  ManagerPM task is to identify the processors that can satisfythe architectural requirements.
She/he can chooseamong the processors made available by GEPPETTO 5or link external ones to the environment.
In the lat-ter case, an API is provided to connect the exter-nal processor to the GEPPETTO world.
Once a newprocessor has been properly linked, it is completelyidentical to the other default processors: it can beselected via the graphical interface, it can take ad-vantage of the debugging/testing facilities, and soon.Via API, it is also possible to interface LEAs withother kinds of external modules, e.g.
modules whichmake available functionalities not provided by theenvironment (e.g.
Knowledge Bases or morphologi-cal analyzers).PM can also choose among different unificationalgorithms that have been designed to:* carefully control and minimize the amount ofcopying needed with non-deterministic parsingschemata (Wroblewski, 1987) (Kogure, 1990);?
provide a better match between the character-istics of the unifiers and those of the linguis-tic processors.
Indeed, different linguistic pro-cessors may profit of different unification algo-rithms.
The availability of different unificationalgorithms allows the user to choose the onewhich best fits the needs of the particular lin-guistic processor at hand.5.3 Suppor t ing  the  Computat iona l  L ingu is tA considerable amount of effort has been devotedto create suitable (specialized) graphical tools forCL.
Recall that CL main task is to build a linguisticsystem satisfying the application requirements.
Thegraphical environment must allow CL to ignore low-level details as much as possible, and concentrate onthe linguistic aspects of data description.CLs can build a linguistic system both by pastingalready existing components (and modifying them5At present, GEPPETTO features two chart-basedparsers (a bidirectional Head-Driven Bottom-Up (Sattaand Stock, 1989) and a CYK-like) and a Head-DrivenBottom-Up non-deterministic generator (Pianesi, 1993).We plan to make available a wider array of processors inthe near future.20Figure 2: GEPPETTO during a debugging session.when necessary) and by building it from scratch.
6As the data forming the parts of a linguistic sys-tem differ in attributes, global organization andfunctions, specialized graphical tools have been de-signed for browsing/editing the type hierarchy, thegrammar, the lexicon and the macros.The main tools for the CL are:?
a grapher for browsing and editing the type in-heritance hierarchy.
It displays mouse sensiblenodes and allows to add/delete/modify nodes,as well as to modify the hierarchy itself;?
browsers for data sets such as lexicon,grammar and macros.
They allow toadd/delete/modify/copy elements in the datasets, as well as to undertake actions on the dataset as a whole (e.g.
compiling it);?
editors for editing and modifying properties ofsingle lexical entries, grammar rules, macrosand type hierarchy nodes.
They include edi-tors for TFL descriptions, feature appropriate-ness statements, etc.
TFL-syntax error check-ing, TFL description compilation and TFS vi-sualization are supported.
Documentation andSCurrently GEPPETTO provides some standard re-sources for Italian: a type hierarchy, two lexica and twogrammars.comment notes can be attached to each item;* interactive and post processing debugging tools(at now mainly a sophisticated chart browser).Facilities are also supplied for computing statisticsabout performances on test suites.
In particular, itis possible to detect points where unification failuresarise.
Such results can be exploited either to hand-tune the linguistic systems to the corpus needs, or byfeeding them into a module which forces unificationalgorithms to consider unification failure hypothesisfirst, this way speeding up the whole processing.6 PD at Work: the Debugging ToolsThe PD working group suggested to divide the toolsfor testing and debugging into interactive facilities(such as tracers and steppers to follow the applica-tion of grammar rules during processing), and "post-processing" facilities.
In the working group it wasagreed that naive interactive tools can be quite diffi-cult to be fully exploited given the great numberof rule applications and unifications that happenduring parsing.
In order to reduce the number ofrule applications and unifications traced, it is neces-sary to have a very powerful (and complex) languagewhich makes the user able to program the tracer; butusually tracer's expressive power is quite difficult to21be fully taken advantage of.
Moreover, it is impor-tant that the tools are (relatively) easy to use, sothat they can be usefully exploit also by users notnecessarily expert of that particular tool or by time-to-time users.
Given these considerations and alsothe fact that all the processors currently availableare chart-based (and hence all the results producedduring processing are still available at the end ofthe processing itself), the discussion focused on thepost-processing tools.Within such tools, the chart browser plays a cen-tral role.
To better discuss its characteristics, papermockups were jointly created and ,evaluated.
Suchan effort produced a highly detailed description ofthe tool functionalities and of its layout; in partic-ular, the kind of information and actions (showingparse/generation trees, TFS descriptions associatedwith edges) to be made available to the user, thedifferent viewpoints on edges and vertices, etc.As it turned out, the chart browser window is thestarting point for the exploration of the structuresproduced during processing.
The tool (cf.
figure 2)allows the user?
to see the edges either in a strictly sequentialway or as organized around the objects con-necting them (i.e.
vertices for the parser andconstraints for the generator);?
to filter edges according to their type (ac-tive/inactive dges), to their categories, etc.;?
to browse through the wide and complex datastructures produced;* to activate auxiliary tools.The chart browser is a fairly standard debuggingtool; in GEPPETTO the adoption of a User Cen-tered approach permitted to design a flexible andextendible tool, which is the central structure forbrowsing through the elements built during process-ing.Besides the chart browser facilities describedabove (and already implemented), the workinggroup faced the problem of how to single out thefailures happened uring parsing and to understandtheir causes.
Browsing edges in the chart it is pos-sible to identify (guess) possible error points and toconcentrate the focus on them: it was envisaged thepossibility of selecting some edges in the chart andrun the parser on them in a special mode.
Duringthis special running mode G~.PPETTO reports diag-nostic messages on the causes of the failure: missinggrammar ules/lexical items, failure during unifica-tion, etc.
If the failure is due to unification, theinvolved paths are reported.7 Eva luat ions  w i th  UsersThe implemented system was assessed by means ofa formative evaluation (Nielsen, 1993), to test itsgeneral usability and the quality of the proposed so-lutions.Par t i c ipants  The testing group consisted of eightpeople from our department.
Participants had dif-ferent degrees of expertise in NLP, though none ofthem had ever used GEPPETTO before, nor had par-ticipated in the PD process.
Participants were notrequired to have any previous knowledge of the TFSformalism.P rocedure  Users were given the manual in ad-vance but they were not required to read it beforethe test, nor any training occurred before the testingphase.
During the experiment, users were allowedto freely consult the manual.
Each participant wasasked to perform 4 tasks:1. architecture definition and composition: theparticipant was required to create her/his per-sonal LEA by composing existing linguistic re-sources and processors to form a new architec-ture;2. lexicon update: the participant had to insertlexical entries in the lexicon, and to run theparser over a sentence containing the new terms;3. hierarchy manipulation and grammar update:the participant was asked to modify the typehierarchy by acting on its graph.
Furthermore,she/he had to modify the grammar.
Finally,by browsing the resulting parse tree, the sub-ject was asked to verify the correctness of thechanges;4. test suite run: lastly users had to load an exist-ing test suite (a file), to add the sentence of task2 and to run their architecture over it; resultsof the running had to be saved in a log file.During the experiment, participants were re-quested to verbalize their thoughts.
This method,known as thinking-aloud, permits an easy detectionof the problematic parts of the human-computer in-teraction as well as to understand how users perceivethe system (Nielsen, 1993).
An experimenter satnear the participant, aking notes on occurring prob-lems and stimulating the subject to express her/histhoughts.
After the test phase, the experimenter in-terviewed each participant, discussing the problemsshe/he run into, gathering suggestions on possibleimprovements, and investigating user satisfaction.All performances were videotaped to allow succes-sive analysis.Resu l ts  The choices done and implemented intoGEPPETTO supported naive users in moving aroundand acting in a complex and unfamiliar environment.Even participants who had not read the manual andhad only a little experience in NLP were able tocomplete the tasks in less then one hour.
7 Through7This time is definitely low considering that userswere required to comment heir actions, were allowed22observations and interviews it could be verified thatparticipants reached a good understanding of thesystem and judged it positively.Some weaknesses inthe interface design were iden-tified: problems mainly limited to common graphi-cal user interfaces mistakes, e.g.
lack of feedbackin resource status, and to the understanding of theterminology developed uring PD (naming problem)emerged.
Identified problems may be solved with alimited revision of the graphical interface.Experiments demonstrated that the adoption ofPD can bring intuitiveness also in the design of acomplex LEADS: even users without any experiencewith GEPPETTO and limited knowledge in NLP wereable to easily understand the system organizationand to effectively use its tools to accomplish nontrivial tasks.8 Conc lus ions  and  Future  WorkIn this paper we have discussed the importance ofuser involvement in the design of a LEADS and ex-emplified it by discussing our experience with GEP-PETTO.The PD methodology enabled users to expresstheir desires and needs while participating tothe de-sign phase.
This permitted to create an environmentwhose facilities are suited for each of the users/tasksinvolved in the development of a LEA.
The designwork started from very general issues (e.g.
the defi-nition of the development cycle) and went into veryspecific details (e.g.
the functionalities associatedwith the buttons of each window).It must be stressed that a crucial role was playedby the interface design expert, who organized themany different ideas in a concrete and coherent in-terface layout, provided the necessary insights toanalyze user-machine interactions, and continuouslystimulated the active cooperation within the work-ing group.GEPPETTO has been implemented under AllegroCommon Lisp and runs on SUN SPARCstations.The graphical facilities have been implemented bymeans of CLIM and Grasper.GEPPETTO has been used in the development ofa number of applicative projects, in different ap-plication domains, including multi-lingual text gen-eration (LRE-GIST), information extraction fromagency news (LE-FACILE), and Natural Languageinformation query (LE-TAMIC-P); all these projectshave been funded by the European Union.Future work on GEPPETTO will address a num-ber of important pending issues.
Among them itis worth mentioning: the full implementation f thedebugging tools suggested by the user group and theimplementation f a number of facilities to improveto consult he manual and were stimulated in exploringGEPPETTO.GEPPETTO's capability of supporting the design ofLEA architectures.Re ferencesHassan Ait-Kaci, Robert Boyer, Patrick Lincoln,and Roger Nasr.
1989.
Efficient implementationof lattice operations.
ACM Transactions on Pro-gramming Languages and Systems, 11(1):115-146.Erran Carmel, Randall Whitaker, and Joey George.1993.
PD and Joint Application Design: Atransatlantic comparison.
Communication of theACM, 36(4):40-48, June.B.
Carpenter.
1992.
The Logic of Typed FeatureStructures.
Cambridge University Press, Cam-bridge, Massachusetts.Fabio Ciravegna, Alberto Lavelli, Daniela Petrelli,and Fabio Pianesi.
1996.
The Geppetto Develop-ment Environment.
Version 2.0.b.
User Manual.Technical Report 9608-10, IRST, August.Kiyoshi Kogure.
1990.
Strategic lazy incremen-tal copy graph unification.
In Proceedings of theInternational Conference on Computational Lin-guistics, pages 223-228, Helsinki, Finland.Michael Muller, Daniel Wildman, and Ellen White.1993.
Taxonomy of PD practices: A brief prac-titioner's guide.
Communications of the ACM,36(4):26-28, June.Jakob Nielsen.
1993.
Usability Engineering.
Aca-demic Press.Donald A. Norman and Stephen W. Draper.
1986.User Centered System Design: new Perspectiveson Human-Computer Interaction.
Lawrance Erl-baum Associates.Communications of the ACM.
1993.
Special Issueon Participatory Design, June.Fabio Pianesi.
1993.
Head-driven bottom-up gener-ation and Government and Binding: a unified per-spective.
In Helmut Horacek and Michael Zock,editors, New Concepts in Natural Language Gen-eration: Planning, Realization and Systems, pages187 - 214.
Pinter Publishers, London.Giorgio Satta and Oliviero Stock.
1989.
Formalproperties and implementation of bidirectionalcharts.
In proceedings of the Eleventh Interna-tional Joint Conference on Artificial Intelligence,Detroit, MI.Hans Uszkoreit.
1991.
Strategies for adding controlinformation to declarative grammars.
In Proceed-ings of the Annual Meeting of the Association forComputational Linguistics, pages 237-245, Berke-ley, California, USA.David A. Wroblewski.
1987.
Nondestructive graphunification.
In Proceedings of AAAI-87, pages582-587, Seattle, WA.23
