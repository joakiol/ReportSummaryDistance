A Debug Tool for Practical Grammar DevelopmentAkane Yakushiji?
Yuka Tateisi??
Yusuke Miyao?
?Department of Computer Science, University of TokyoHongo 7-3-1, Bunkyo-ku, Tokyo 113-0033 JAPAN?CREST, JST (Japan Science and Technology Corporation)Honcho 4-1-8, Kawaguchi-shi, Saitama 332-0012 JAPAN{akane,yucca,yusuke,yoshinag,tsujii}@is.s.u-tokyo.ac.jpNaoki Yoshinaga?
Jun?ichi Tsujii?
?AbstractWe have developed willex, a tool thathelps grammar developers to work effi-ciently by using annotated corpora andrecording parsing errors.
Willex has twomajor new functions.
First, it decreasesambiguity of the parsing results by com-paring them to an annotated corpus andremoving wrong partial results both au-tomatically and manually.
Second, willexaccumulates parsing errors as data for thedevelopers to clarify the defects of thegrammar statistically.
We applied willexto a large-scale HPSG-style grammar asan example.1 IntroductionThere is an increasing need for syntactical parsersfor practical usages, such as information extrac-tion.
For example, Yakushiji et al (2001) extractedargument structures from biomedical papers usinga parser based on XHPSG (Tateisi et al, 1998),which is a large-scale HPSG.
Although large-scaleand general-purpose grammars have been devel-oped, they have a problem of limited coverage.The limits are derived from deficiencies of gram-mars themselves.
For example, XHPSG cannot treatcoordinations of verbs (ex.
?Molybdate slowed butdid not prevent the conversion.?)
nor reduced rel-atives (ex.
?Rb mutants derived from patients withretinoblastoma.?).
Finding these grammar defectsand modifying them require tremendous human ef-fort.Hence, we have developed willex that helps to im-prove the general-purpose grammars.
Willex has twomajor functions.
First, it reduces a human workloadto improve the general-purpose grammar throughusing language intuition encoded in syntacticallytagged corpora in XML format.
Second, it recordsdata of grammar defects to allow developers to havea whole picture of parsing errors found in the targetcorpora to save debugging time and effort by priori-tizing them.2 What Is the Ideal Grammar Debugging?There are already other grammar developing tools,such as a grammar writer of XTAG (Paroubek et al,1992), ALEP (Schmidt et al, 1996), ConTroll (Go?tzand Meurers, 1997), a tool by Nara Institute of Sci-ence and Technology (Miyata et al, 1999), and [incrtsdb()] (Oepen et al, 2002).
But these tools havefollowing problems; they largely depend on humandebuggers?
language intuition, they do not help usersto handle large amount of parsing results effectively,and they let human debuggers correct the bugs oneafter another manually and locally.To cope with these shortcomings, willex proposesan alternative method for more efficient debuggingprocess.The workflow of the conventional grammar devel-oping tools and willex are different in the followingways.
With the conventional tools, human debug-gers must check each sentence to find out grammardefects and modify them one by one.
On the otherhand, with willex human debuggers check sentencesthat are tagged with syntactical structure, one byone, find grammar defects, and record them, whilewillex collects the whole grammar defect records.Then human debuggers modify the found grammardefects.
This process allows human debuggers tomake priority over defects that appear more fre-quently in the corpora, or defects that are more crit-ical for purposes of syntactical parsing.
Indeed, itis possible for human debuggers using the conven-tional tools to collect and modify the defects butwillex saves the trouble of human debuggers to col-lect defects to modify them more efficiently.3 Functions of willexTo create the new debugging tool, we have extendedwill (Imai et al, 1998).
Will is a browser of parsingresults of grammars based on feature structures.
Willand willex are implemented in JAVA.3.1 Using XML Tagged CorporaWillex uses sentence boundaries, word chunking,and POSs/labels encoded in XML tagged corpora.First, with the information of sentence boundariesand word chunking, ambiguity of sentences is re-duced, and ambiguity at parsing phase is also re-duced.
A parser connected to willex is assumed toproduce only results consistent with the information.An example is shown in Figure 1 (<su> is a senten-tial tag and <np> is a tag for noun phrases).I  saw  a girl  with a telescopeI  saw  a girl  with a telescope<su> I saw <np> a girl with a telescope </np></su>Figure 1: An example of pa sing results along withword chunkingNext, willex compares POSs/labels encoded inXML tags and parsing results, and deletes improperparsing trees.
Therefore, it reduces numbers of par-tial parsing trees, which appear in the way of parsingand should be checked by human debuggers.
In ad-dition, human debuggers can delete partial parsingtrees manually later.
Figure 2 shows a concrete ex-ample.
(NP and S are labels for noun and sententialphrases respectively.
)POS/label from Tagged CorpusPOSs/labels from Partial Results<NP> A cat </NP> knows everythingA      catD      N N       VA      catNP S  Figure 2: An example of deletion by usingPOSs/labels3.2 Output of Grammar DefectsWillex has a function to output information of gram-mar defects into a file in order to collect the de-fects data and treat them statistically.
In addition,we can save a log of debugging experiences whichshow what grammar defects are found.An example of an output file is shown in Table1.
It includes sentence numbers, word ranges inwhich parsing failed, and comments input by a hu-man debugger.
For example, the first row of the ta-ble means that the sentence #0 has coordinations ofverb phrases at position #3?#12, which cannot beparsed.
?OK?
in the second row means the sen-tence is parsed correctly (i.e., no grammar defectsare found in the sentence).
The third row means thatthe word #4 of the sentence #2 has no proper lexicalentry.The word ranges are specified by human debug-gers using a GUI, which shows parsing results inCKY tables and parse trees.
The comments are inputby human debuggers in a natural language or chosenfrom the list of previous comments.
A postprocess-ing module of willex sorts the error data by the com-ments to help statistical analysis.Table 1: An example of file outputSentence # Word # comment0 3?12 V-V coordination1 ?
OK2 4 no lexical entry4 Experiments and DiscussionWe have applied willex to rental-XTAG, an HPSG-style grammar converted from the XTAG Englishgrammar (The XTAG Research Group, 2001) by agrammar conversion (Yoshinaga and Miyao, 2001).1The corpus used is MEDLINE abstracts with tagsbased on a slightly modified version of GDA-DTD2 (Hasida, 2003).
The corpus is ?partiallyparsed?
; the attachments of prepositional phrases areannotated manually.The tags do not always specify the correct struc-tures based on rental-XTAG (i.e., the grammar as-sumed by tags is different from rental-XTAG), so weprepared a POS/label conversion table.
We can usetagged corpora based on various grammars differentfrom the grammar that the parser is assuming by us-ing POS/label conversion tables.We investigated 208 sentences (average 24.2words) from 26 abstracts.
73 sentences were parsedsuccessfully and got correct results.
Thus the cover-age was 35.1%.4.1 Qualitative EvaluationWillex received three major positive feedbacks froma user; first, the function of restricting partial resultswas helpful, as it allows human debuggers to checkfewer results, second, the function to delete incorrectpartial results manually was useful, because thereare some cases that tags do not specify POSs/labels,and third, human debuggers could use the record-ing function to make notes to analyze them carefullylater.However, willex also received some negative eval-uations; the process of locating the cause of pars-ing failure in a sentence was found to be a bit trou-blesome.
Also, willex loses its accuracy if the hu-man debuggers themselves have trouble understand-ing the correct syntactical structure of a sentence.31Since XTAG and rental-XTAG generate equivalent parseresults for the same input, debugging rental-XTAG means de-bugging XTAG itself.2GDA has no tags which specify prepositional phrases, sowe add <prep> and <prepp>.3Thus, we divided the process of identifying grammar de-fects to two steps.
First, a non-expert roughly classifies pars-ing errors and records temporary memorandums.
Then, thenon-expert shows typical examples of sentences in each classto experts and identifies grammar defects based on experts?
in-ference.
Here, we can make use of the recording function ofWe found from these evaluations that the func-tions of willex can be used effectively, though moreautomation is needed.4.2 Quantitative EvaluationFigure 3 shows the decrease in partial parsing treescaused by using the tagged corpus.
(Data of 10 sen-tences among the 208 sentences are shown.)
Thegraph shows that human workload was reduced byusing the tagged corpus.0500010000150002000025000300003500010 15 20 25 30 35 40numberofpartialresultslength of a sentence (number of words)without any info.with chunk info.with chunk and POS/label info.Figure 3: Examples of numbers of partial results4.3 Defects of rental-XTAGTable 2 shows the defects of rental-XTAG which arefound by using willex.Table 2: The defects of rental-XTAGthe defects of rental-XTAG #no lexical entry 62cannot handle reduced relative 35cannot handle V-V coordination 22Adjective does not post-modify NP 9cannot parse ?, but not?
4cannot handle objective to-infinitive 3?, which ...?
does not post-modify NP 3cannot handle reduced as-relative clause 2cannot parse ?greater than?(?>?)
2misc.
17From this table, it is inferred that (1) lack of lexi-cal entries, (2) inability to parse reduced relative andwillex.
(3) inability to parse coordinations of verbs are seri-ous problems of rental-XTAG.4.4 Conflicts Between the Modified GDA andrental-XTAGConflicts between rental-XTAG and the grammar onwhich the modified GDA based cause parsing fail-ures.
Statistics of the conflicts is shown in Table 3.Table 3: Conflicts between the modified GDA andrental-XTAGmodified GDA rental-XTAG #adjectival phrase verbal phrase 36bracketing except ?,?
10bracketing of ?,?
8treatment of omitted words 2misc.
5These conflicts cannot be resolved by a simplePOS/label conversion table.
One resolution is insert-ing a preprocess module that deletes and moves tagswhich cause conflicts.We do not consider these conflicts as grammar de-fects but the difference of grammars to be absorbedin the conversion phase.5 Conclusion and Future WorkWe developed a debug tool, willex, which uses XMLtagged corpora and outputs information of grammardefects.
By using tagged corpora, willex succeededto reduce human workload.
And by recording gram-mar defects, it provides debugging environment witha bigger perspective.
But there remains a prob-lem that a simple POS/label conversion table is notenough to resolve conflicts of a debugged grammarand a grammar assumed by tags.
The tool shouldsupport to handle the complicated conflicts.In the future, we will try to modify willex to infercauses of parsing errors (semi-)automatically.
It isdifficult to find a point of parsing failure automati-cally, because subsentences that have no correspon-dent partial results are not always the failed point.Hence, we will expand willex to find the longestsubsentences that are parsed successfully.
Words,POS/labels and features of the subsentences can beclues to infer the causes of parsing errors.ReferencesThilo Go?tz and Walt Detmar Meurers.
1997.
The Con-Troll system as large grammar development platform.In Proc.
of Workshop on Computational Environmentsfor Grammar Development and Linguistic Engineer-ing, pages 38?45.Koiti Hasida.
2003.
Global docu-ment annotation (GDA).
available inhttp://www.i-content.org/GDA/.Hisao Imai, Yusuke Miyao, and Jun?ichi Tsujii.
1998.GUI for an HPSG parser.
In Information ProcessingSociety of Japan SIG Notes NL-127, pages 173?178,September.
In Japanese.Takashi Miyata, Kazuma Takaoka, and Yuji Mat-sumoto.
1999.
Implementation of GUI debugger forunification-based grammar.
In Information Process-ing Society of Japan SIG Notes NL-129, pages 87?94,January.
In Japanese.Stephan Oepen, Emily M. Bender, Uli Callmeier, DanFlickinger, and Melanie Siegel.
2002.
Parallel dis-tributed grammar engineering for practical applica-tions.
In Proc.
of the Workshop on Grammar Engi-neering and Evaluation, pages 15?21.Patrick Paroubek, Yves Schabes, and Aravind K. Joshi.1992.
XTAG ?
a graphical workbench for developingTree-Adjoining grammars.
In Proc.
of the 3rd Confer-ence on Applied Natural Language Processing, pages216?223.Paul Schmidt, Axel Theofilidis, Sibylle Rieder, andThierry Declerck.
1996.
Lean formalisms, linguis-tic theory, and applications.
Grammar development inALEP.
In Proc.
of COLING ?96, volume 1, pages286?291.Yuka Tateisi, Kentaro Torisawa, Yusuke Miyao, andJun?ichi Tsujii.
1998.
Translating the XTAG englishgrammar to HPSG.
In Proc.
of TAG+4 workshop,pages 172?175.The XTAG Research Group.
2001.
A Lex-icalized Tree Adjoining Grammar for English.Technical Report IRCS Research Report 01-03,IRCS, University of Pennsylvania.
available inhttp://www.cis.upenn.edu/?xtag/.Akane Yakushiji, Yuka Tateisi, Yusuke Miyao, andJun?ichi Tsujii.
2001.
Event extraction from biomedi-cal papers using a full parser.
In Pacific Symposium onBiocomputing 2001, pages 408?419, January.Naoki Yoshinaga and Yusuke Miyao.
2001.
Grammarconversion from LTAG to HPSG.
In Proc.
of the sixthESSLLI Student Session, pages 309?324.
