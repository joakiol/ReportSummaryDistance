Online Generic Editing of Heterogeneous Dictionary Entries inPapillon ProjectMathieu MANGEOTUnit Terjemahan Melalui KomputerUniversiti Sains Malaysia,11800, Pulau PinangMalaysiamathieu@mangeot.orgDavid THEVENINNational Institute of InformaticsHitotsubashi 2-1-2-1913 Chiyoda-kuJP-101-8430 TokyoJapanthevenin@nii.ac.jpAbstractThe Papillon project is a collaborativeproject to establish a multilingual dictio-nary on the Web.
This project started 4years ago with French and Japanese.
Thepartners are now also working on English,Chinese, Lao, Malay, Thai and Vietnamese.It aims to apply the LINUX cooperativeconstruction paradigm to establish a broad-coverage multilingual dictionary.
Users cancontribute directly on the server by addingnew data or correcting existing errors.
Theircontributions are stored in the user spaceuntil checked by a specialist before beingfully integrated into the database.
The re-sulting data is then publicly available andfreely distributable.
An essential conditionfor the success of the project is to find ahandy solution for all the participants to beable to contribute online by editing dictio-nary entries.In this paper, we describe oursolution for an online generic editor of dic-tionary entries based on the description oftheir structure.1 IntroductionThe Papillon Project (Se?rasset and Mangeot,2001) is a cooperative project for a multilin-gual dictionary on the Web with the followinglanguages: English, Chinese, French, Japanese,Lao, Malay, Thai and Vietnamese.
The dic-tionary structure makes it very simple to adda new language at any time.
It aims to ap-ply the LINUX construction paradigm to estab-lish a multilingual usage dictionary with broad-coverage.This project is based on the participation ofvoluntary contributors.
In order to be reallyattractive, this project must imperatively finda convenient solution so that contributors caneasily edit the dictionary entries.
Since Papillondictionary is available on a web server and thecontributors are located all around the world,the obvious solution is to implement an editoravailable online.
Unfortunately, the existing so-lutions (HTML forms, java applets) have impor-tant limitations.
Thus, we propose an entirelygeneric solution that can adapt very easily notonly the interfaces to the various entry struc-tures needing to be edited but also to the userneeds and competences.Firstly, we outline the issue addressed in thispaper; and draw up an overview of the existingmethods for dictionary entry edition.
A presen-tation of the chosen method follows detailingits integration in the Papillon server.
Finally,we show an example of the online edition of adictionary entry.2 Addressed Issue and RequirementsIn this paper, the addressed issue is how toedit online dictionary entries with heteroge-neous structures.2.1 Online EditionIn order to build a multilingual dictionary thatcovers a lot of languages, we need large compe-tences in those languages.
It may be possibleto find an expert with enough knowledge of 3or 4 languages but when that number reaches10 languages (like now), it is almost impossi-ble.
Thus, we need contributors from all overthe world.Furthermore, in order to avoid pollution ofthe database, we plan a two-step integration ofthe contributions in the database.
When a con-tributor finishes a new contribution, it is storedinto his/her private user space until it is revisedby a specialist and integrated into the database.Then, each data needs to be revised althoughthe revisers may not work in the same place ofthe initial contributors.Thus, the first requirement for the editor isto work online on the Web.2.2 Heterogeneous Entry StructuresThe Papillon platform is built for generic pur-poses.
Thus, it can manipulate not only thePapillon dictionary but also any kind of dictio-nary encoded in XML (Mangeot, 2002).
Thelexical data is organized in 3 layers:?
Limbo contains dictionaries in their origi-nal format and structure;?
Purgatory contains dictionaries in theiroriginal format but encoded in XML;?
Paradise contains the target dictionary, inour case Papillon dictionary.The Purgatory data can be reused for buildingthe Paradise dictionary.We would like then to be able to edit differentdictionaries structures from Paradise but alsofrom Purgatory.
Furthermore, being Papillona research project, entry structures may evolveduring the life of the project, since they are notfixed from the beginning.Hence, the second requirement is that the ed-itor must deal with heterogeneous and evolvingentry structures.2.3 Extra RequirementsPrevious requirements must be fulfilled, whilstthe following ones are optional.The contributors will have various compe-tences and use the editor for different purposes(a specialist in speech may add the pronuncia-tion, a linguist may enter grammatical informa-tion, a translator would like to add interlinguallinks, and a reviewer will check the existing con-tributions, etc.
).The second optional requirement concernsthe adaptation to the user platform.
Theincreasing number of smart mobile phonesand PDAs makes real the following scenarios:adding an interlingual link with a mobile phone,adding small parts of information with a PDAand revising the whole entry with a workstation.It would then be very convenient if the editorcould adapt itself both to the user and to theplatform.2.4 Final AimGuided by these requirements, our final aim isto generate, as much automatically as possible,online interfaces for editing dictionary entries.It has to be taken into account the fact that en-try structures are heterogeneous and may varyand to try to adapt as much as possible these in-terfaces to the different kinds of users and plat-forms.3 Overview of Existing EditingMethods3.1 Local and Ad HocThe best way to implement a most comfort-able editor for the users is to implement an ad-hoc application like the one developed for theNADIA-DEC project: DECID (Se?rasset, 1997).It was conceived to edit entries for the ECD(Mel?c?uk et al, 1984889296).
The Papillon mi-crostructure is based on a simplification of thisstructure.
We were indeed very interested bysuch software.
It is very convenient - for exam-ple - for editing complex lexical functions.But several drawbacks made it impossible touse in our project.
First, the editor was de-veloped ad hoc for a particular entry structure.If we want to change that structure, we mustreimplement changes in the editor.Second, the editor is platform-dependent(here written and compiled for MacOs).
Theusers have to work locally and cannot contributeonline.3.2 Distributed and DemocraticThis solution implemented for the construc-tion of the French-UNL dictionary (Se?rasset andMangeot, 1998) project is called ?democratic?because it uses common and widespread appli-cations (works on Windows and MacOs) suchas Microsoft Word.The first step is to prepare pre-existing dataon the server (implemented here in MacintoshCommon Lisp).
Then, the data is convertedinto rtf by using a different Word style for eachpart of information (the style ?headword?
forthe headword, the style ?pos?
for the part-of-speech, etc.)
and exported.
The clients canopen the resulting rtf files locally with theirWord and edit the entries.
Finally, the Wordrtf files are reintegrated into the database via areverse conversion program.This solution leads to the construction of20,000 entries with 50,000 word senses.
It wasconsidered as a very convenient method, never-theless, two important drawbacks prevented usto reuse this solution.
The first is that in or-der to convert easily from the database to rtfand vice-versa, the dictionary entry structurecannot be too complex.
Furthermore, when theuser edits the entry with Word, it is very dif-ficult to control the syntax of the entry, evenif some Word macros can partially remedy thisproblem.The second is the communication between theusers and the database.
The Word files haveto be sent to the users, for example via email.It introduces inevitably some delay.
Further-more, during the time when the file is storedon the user machine, no other user can edit thecontents of the file.
It was also observed thatsometimes, users abandon their job and forgetto send their files back to the server.3.3 Online and HTML FormsIn order to work online, we should then use ei-ther HTML forms, or a Java applet.
The use ofHTML forms is interesting at a first glance, be-cause the implementation is fast and all HTMLbrowsers can use HTML forms.On the other hand, the simplicity of the formsleads to important limitations.
The only exist-ing interactors are: buttons, textboxes, pop-upmenus, and checkboxes.JavaScripts offer the possibility to enrich theinteractors by verifying for example the contentof a textbox, etc.
However, very often they raisecompatibility problems and only some browserscan interpret them correctly.
Thus, we willavoid them as much as possible.One of the major drawbacks of this solutionis our need to modify the source code of theHTML form each time we want to modify theentry structure.
We also need to write as manyHTML forms as there are different entry struc-tures.3.4 Online and Java AppletsIn order to remedy the limitations of the HTMLforms and to continue to work online, there isthe possibility to use a java applet that will beexecuted on the client side.
Theoretically, itis possible to develop an ad hoc editor for anycomplicated structure, like the 3.1 solution.Nevertheless, the problems linked to the useof a java applet are numerous: the client ma-chine must have java installed, and it must bethe same java version of the applet.
Further-more, the execution is made on the client ma-chine, which can be problematic for not verypowerful machines.
Moreover, nowadays thereis a strong decrease of java applets usage on theWeb mainly due to the previous compatibilityproblems.3.5 ConclusionAs a result, none of these existing solutions canfully fulfil our requirements: online edition andheterogeneous entry structures.
We might thenuse other approaches that are more generic likethe ones used in interface conception in orderto build our editor.
In the remainder of thispaper, we will detail how we used an interfacegeneration module in Papillon server in order togenerate semi-automatically editing interfaces.4 Using an Interface GenerationModuleThis Papillon module has to generate graphicuser interfaces for consulting and editing dic-tionary entries.
We base our approach onthe work done on Plasticity of User interfaces(Thevenin and Coutaz, 1999) and the tool ART-Studio (Calvary et al, 2001).
They proposeframeworks and mechanisms to generate semi-automatically graphic user interfaces for differ-ent targets.
Below we present the design frame-work and models used.4.1 Framework for the UI generationOur approach (Calvary et al, 2002) is basedon four-generation steps (Figure 1).
The firstis a manual design for producing initial mod-els.
It includes the application description withthe data, tasks and instances models, and thedescription of the context of use.
This lattergenerally includes the platform where the inter-action is done, the user who interacts and theenvironment where the user is.
In our case wedo not describe the environment, since it is toodifficult and not really pertinent for Papillon.From there, we are able to generate the AbstractUser Interface (AUI).
This is a platform inde-pendent UI.
It represents the basic structure ofthe dialogue between a user and a computer.
Inthe third step, we generate the Concrete UserInterface (CUI) based on the Abstract User In-terface (AUI).
It is an instantiation of the AUIfor a given platform.
Once the interactor (wid-get) and the navigation in UI have been chosen,it is a prototype of the executable UI.
The laststage is the generation of Final User Interface(FUI).
This is the same as concrete user inter-face (CUI) but it can be executed.We will now focus on some models that de-scribe the application.4.2 Application Models: Data & TaskThe Data model describes the concepts that theuser manipulates in any context of use.
Whenconsidering plasticity issues, the data modelshould cover all usage contexts, envisioned forthe interactive system.
By doing so, designersobtain a global reusable reference model thatcan be specialized according to user needs orTask ConceptInstanceAbstract UIConcreteUIConcreteUIFinalUIFinalUIPlatformUserEnvironmentPlatformUserEnvironmentInitial descriptionTransit descriptionFinal descriptionFigure 1: Multitarget Generation FrameworkC_entryC_headwordC_posC_listexamplesC_exampleI_headwordPopUp MenuI_posexample1example2example3List?I_listexamplesI_entryTextBoxI_examplesLegend:ConceptInstanceLink to the interactor used by the conceptLink to a child conceptLink to the instanceTextBoxFigure 2: Data Model Structuremore generally to context of use.
A similar de-sign rationale holds for tasks modeling.
For thePapillon project, the description of data modelcorresponds to the XML Schema descriptionof dictionary and request manipulation.
Thetasks?
model is the set of all tasks that will beimplemented independently of the type of user.It includes modification of the lexical databaseand visualization of dictionaries.As showed on Figure 2, the model of conceptswill drive the choice of interactors and the struc-ture of the interface.4.3 Instance ModelIt describes instances of the concepts manipu-lated by the user interface and the dependencegraph between them.
For example there is theconcept ?Entry?
and one of its instances ?sci-entifique?.
(cf.
Figure 3).I_headwordI_posI_exampleslistI_entryI_example I_examplescientifique adjjourn?esscientifiquesjournalscientifique<entry><hv>scientifique</hv><pos>adj</pos><ex>journ?es scientifiques</ex><ex>journal scientifique</ex></entry><ex>journ?es scientifiques</ex><ex>journal scientifique</ex>Legend:InstanceLink to the instance valueLink to a child instanceFigure 3: Relation Between the XML Entry andits Corresponding InstanceThis model is described at design time, be-fore generation, and linked with the task model(a task uses a set of instances).
Each instancewill be effectively created at run-time with datacoming from the Papillon database.4.4 Platform and Interactors ModelsA platform is described by interaction capacity(for example, screen size, mouse or pen, key-board, speech recognition, etc.).
These capaci-ties will influence the choice of interactors, pre-sentation layouts or the navigation in the userinterface.Associated to the platform there are the inter-actors (widgets) proposed by the graphic tools-box of the targeted language (for example Swingor AWT for Java).
In this project interac-tors are coming from HMTL Forms (textBox,comboBox, popup menu, button, checkBox, ra-dioButton) and HTML tags.
We also had tobuild more complex interactors by a combina-tion of HTML Forms and HTML Tags.4.5 User ModelPrevious research has shown the difficulty to de-scribe the cognitive aspects of user behavior.Therefore, we will simplify by defining differ-ent user classes (tourist, student, business man,etc.).
Each class will be consisting of a set of de-sign preferences.
Depending on the target class,the generator will use appropriate design rules.The model is not yet implemented; it is im-plicitly used in the data & task models.
Wedefined different views of data according to thetarget:?
all data is rendered for the workstationediting interface for lexicographers,?
only headword and grammatical class arerendered and examples are browsable onthe mobile phone interface for a ?normal?dictionary user.4.6 Concrete User Interface ModelThis model, based on an independent user in-terface language, describes the graphic user in-terface, as the final device will render it.
It istarget-dependent.4.7 Final User InterfaceFrom the CUI model, the generator producesa final interface that will be executed by thetargeted device, and links it with the Papillondatabase.
In our case we produce:?
HTML code for the workstation,Figure 4: Generated GUI?
Tiny XHTML code for AU mobile phones,?
and CGI links for the communication withthe database.Figure 4 shows a simple example of a finalgenerated UI.5 Integrating the Module inPapillon Server5.1 ImplementationThe Papillon server is based on Enhydra, a webserver of Java dynamic objects.
The data isstored as XML objects into an SQL database:PostgresQL.ARTStudio tool is entirely written in Java.For its integration into the Papillon/Enhydraserver, we created a java archive for the codesto stay independent.The Papillon/Enhydra server can store javaobjects during a user session.
When the userconnects to the Papillon server with a browser,a session is created and the user is identifiedthanks to a cookie.
When the user opens thedictionary entry editor, the java objects neededfor the editor will be kept until the end of thesession.5.2 A Working SessionWhen the editor is launched, the models cor-responding to the entry structure are loaded.Then, if an entry is given as a parameter (edit-ing an existing entry), the entry template is in-stantiated with the data contained in that entry.If no entry is given, the template is instantiatedwith an empty entry.
Finally, the instantiatedmodels and entry templates are stored into thesession data and the result is displayed embed-ded in an HTML form, through a Web page(Figure 4).Then, after a user modification (e.g.
addingan item to the examples list), the HTML formentryheadwordpos example examplescientifique adj journ?esscientifiquesjournalscientifiqueLegend:XMLElementLink to a child elementLink to the element valuetextual contentFigure 5: Abstract View of an Entrysends the data to the server via a CGI mecha-nism.
The server updates the models and tem-plate stored in the session data and sends backthe modified result in the HTML page.At the end of the session, the modified entry isextracted from the session data and then storedas a contribution in the database.6 An Editing Example6.1 A Dictionary EntryFigure 5 shows an abstract view of a simple dic-tionary entry.
It is the entry ?scientifique?
(sci-entific) of a French monolingual dictionary.
Theentry has been simplified on purpose.
The en-tries are stored as XML text into the database.6.2 Entry StructureThe generation of the graphic interface is mostlybased on the dictionary microstructure.
In thePapillon project, we describe them with XMLschemata.
We chose XML schemata instead ofDTDs because they allow for a more precisedescription of the data structure and handledtypes.
For example, it is possible to describe thetextual content of an XML element as a closedvalue list.
In this example, the French part-of-speech type is a closed list of ?nom?, ?verb?,and ?adj?.Figure 6 is an abstract view of the structurecorresponding to the previous French monolin-gual dictionary entry.6.3 Entry Displayed in the EditorThe dictionary entry of Figure 5 is displayed inthe HTML editor as in Figure 4.
In the follow-ing one (Figure 7), an example has been addedin the list by pushing the + button.6.4 A More Complex EntryIn the following figure (Figure 8), we show theentry ?y?
(taberu, to eat) of the PapillonJapanese monolingual volume.
The entry struc-ture comes from the DiCo structure (Polgue`re,entryheadwordpos exampleOccurences: 0 to ?Occurence: 1Occurence: 1Legend:XMLElementTypeLink to a child elementLink to the element typetextlist:nomverbeadjtextFigure 6: Structure of an EntryFigure 7: Entry Displayed in the Editor2000), a light simplification of the ECD byMel?c?uk & al.Two interesting points may be highlighted.You can note that not only the content of theentry is in Japanese, but also the text labelsof the information.
For example, the first one,??W?
(midashigo) means headword.
Theinterface generator is multitarget: it generatesthe whole HTML content.
It is then possible toredefine the labels for each language.The second point is the complexity of the en-try structure.
There is a list of lexical functions.Each lexical function consists of a name and alist of valgroups (group of values), and in turn,each valgroup consists of a list of values.
Finally,each value is a textbox.
The lists are nested theone in the other one and it is possible to use thelists + and - operators at any level.7 Evaluation7.1 PreambleThis paper focuses on one particular function-ality of the Papillon platform: the generic edi-tor.
Its purpose is not to present the building ofPapillon dictionary or the progress of PapillonProject as a whole.
The evaluation will thenfocus on the editor.Figure 8: Papillon Entry Displayed in the Edi-torThe contribution phase on Papillon projecthas not begun yet.
Thus, for the moment, veryfew users tested the editor.
We have not yetenough data to evaluate seriously the usabilityof the interface.
Then, the evaluation will bedriven on the technical aspects of the editor.In order to evaluate the genericity and theusability of the editor, we generated interfacesfor two other dictionary structures: the GDEFEstonian-French dictionary and the WaDoku-JiTen Japanese-German dictionary.7.2 Edition of the GDEF dictionaryThe GDEF project (Big Estonian-French Dic-tionary) is managed by Antoine Chalvin fromINALCO, Paris.
The dictionary microstructureis radically different from the Papillon dictio-nary as you will see in Figure 9 compared tofigure 8.
You may notice the 6 levels of recur-sion embedded in the entry structure.It took about one week to write the interfacedescription files for the new dictionary structurein order to generate properly a complete inter-face for the GDEF dictionary.7.3 Edition of the WaDokuJiTenThe WaDokuJiTen project is managed by Ul-rich Apel, now invited researcher at NII, Tokyo.The dictionary is originally stored in a File-Maker database.
It has more than 200,000 en-tries.
It took four days to export integrate thedictionary in Papillon platform and to write theFigure 9: GDEF Entry Displayed in the EditorFigure 10: WaDokuJiTen Entry Displayed inthe Editorfiles needed for the generation of the editor in-terface.
The integration was done in 4 steps:export the dictionary from FileMaker into anXML file, tag the implicit structure with a perlscript, write the metadata files and upload thedictionary on the Papillon server.The dictionary microstructure is simpler thanthe previous one (see figure 10).
It took only twodays to write the files needed for the generationof the editor interface.8 ConclusionThe implementation of ARTStudio and Papil-lon plateform started separately four years ago.The development of the HTML generation mod-ule in ARTStudio and its integration into Papil-lon platform took about a year from the firstspecifications and the installation of a com-plete and functional version on the Papillonserver.
The collaboration between a specialist ofcomputational lexicography and a specialist ofthe adaptability of interfaces has produced veryoriginal and interesting work.
Furthermore, theevaluation and the feedback received from theusers is very positive.
Now, we want to furtherpursue this work following several paths.First of all, only a specialist can use the ex-isting interface for Papillon entry since it is toocomplex for a beginner.
We plan to generate dif-ferent interface types adapted to the varied userneeds and competences.
Thanks to the modu-larity of the editor, we need only to describe thetasks and instance models corresponding to thedesired interface.For the moment, the interface generation isnot fully automatic; some of the model descrip-tions used by the editor have to be written ?byhand?.
This is why we are working now onautomating the whole generation process andthe implementation of graphical editors allow-ing users to post-edit or modify a generated in-terface description.ReferencesGae?lle Calvary, Joe?lle Coutaz, and David Thevenin.
2001.Unifying reference framework for the development of plas-tic user interfaces.
In EHCI?01, IFIP WG2.7 (13.2) Work-ing Conference, pages 173?192, Toronto, Canada.Gae?lle Calvary, Joe?lle Coutaz, David Thevenin, Quentin Lim-bourg, Nathalie Souchon, Laurent Bouillon, and JeanVanderdonckt.
2002.
Plasticity of user interfaces: A re-vised reference framework.
In Proc.
TAMODIA 2002,pages 127?134, Bucharest, Romania.
INFOREC Publish-ing House.Mathieu Mangeot.
2002.
An xml markup language frame-work for lexical databases environments: the dictionarymarkup language.
In International Standards of Termi-nology and Language Resources Management, pages 37?44, Las Palmas, Spain, May.Igor Mel?c?uk, Nadia Arbatchewsky-Jumarie, Le?o Eltnisky,Lidija Iordanskaja, Ade`le Lessard, Suzanne Mantha, andAlain Polgue`re.
1984,88,92,96.
DEC : Dictionnaire expli-catif et combinatoire du franc?ais contemporain, rechercheslexico-se?mantiques I,II,III et IV.
Presses de l?universite?
deMontre?al, Canada.Alain Polgue`re.
2000.
Towards a theoretically-motivated gen-eral public dictionary of semantic derivations and col-locations for french.
In Proceeding of EURALEX?2000,Stuttgart, pages 517?527.Gilles Se?rasset and Mathieu Mangeot.
1998.
L?e?dition lexi-cographique dans un syste`me ge?ne?rique de gestion de baseslexicales multilingues.
In NLP-IA, volume 1, pages 110?116, Moncton, Canada.Gilles Se?rasset and Mathieu Mangeot.
2001.
Papillon lexicaldatabase project: Monolingual dictionaries and interlin-gual links.
In NLPRS-2001, pages 119?125, Tokyo, 27-30November.Gilles Se?rasset.
1997.
Le projet nadia-dec : vers un diction-naire explicatif et combinatoire informatise?
?
In LTT?97,volume 1, pages 149?160, Tunis, Septembre.
Actualite?
sci-entifique, AUPELF-UREF.David Thevenin and Joe?lle Coutaz.
1999.
Plasticity of userinterfaces: Framework and research agenda.
In Interact?99Seventh IFIP Conference on Human-Computer Interac-tion, volume 1, pages 110?117, Edinburgh, Scotland.
