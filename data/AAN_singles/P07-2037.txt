Proceedings of the ACL 2007 Demo and Poster Sessions, pages 145?148,Prague, June 2007. c?2007 Association for Computational LinguisticsA Linguistic Service Ontology for Language InfrastructuresYoshihiko HayashiGraduate School of Language and Culture, Osaka University1-8 Machikaneyama-cho, Toyonaka, 560-0043 Japanhayashi@lang.osaka-u.ac.jpAbstractThis paper introduces conceptual frame-work of an ontology for describing linguis-tic services on network-based language in-frastructures.
The ontology defines a tax-onomy of processing resources and the as-sociated static language resources.
It alsodevelops a sub-ontology for abstract lin-guistic objects such as expression, meaning,and description; these help define function-alities of a linguistic service.
The proposedontology is expected to serve as a solid ba-sis for the interoperability of technical ele-ments in language infrastructures.1 IntroductionSeveral types of linguistic services are currentlyavailable on the Web, including text translationand dictionary access.
A variety of NLP tools isalso available and public.
In addition to these, anumber of community-based language resourcestargeting particular domains of application havebeen developed, and some of them are ready fordissemination.
A composite linguistic service tai-lored to a particular user's requirements would becomposable, if there were a language infrastructureon which elemental linguistic services, such asNLP tools, and associated language resourcescould be efficiently combined.
Such an infrastruc-ture should provide an efficient mechanism forcreating workflows of composite services bymeans of authoring tools for the moment, andthrough an automated planning in the future.To this end, technical components in an infra-structure must be properly described, and the se-mantics of the descriptions should be definedbased on a shared ontology.2 Architecture of a Language Infrastruc-tureThe linguistic service ontology described in thispaper has not been intended for a particular lan-guage infrastructure.
However we expect that theontology should be first introduced in an infra-structure like the Language Grid 1 , because it,unlike other research-oriented infrastructures, triesto incorporate a wide range of NLP tools andcommunity-based language resources (Ishida,2006) in order to be useful for a range of intercul-tural collaboration activities.The fundamental technical components in theLanguage Grid could be: (a) external web-basedservices, (b) on-site NLP core functions, (c) staticlanguage resources, and (d) wrapper programs.Figure 1 depicts the general architecture of theinfrastructure.
The technical components listedabove are deployed as shown in the figure.Computational nodes in the language grid areclassified into the following two types as describedin (Murakami et al, 2006).z A service node accommodates atomic linguisticservices that provide functionalities of the NLPtool/system running on a node, or they can sim-ply have a wrapper program that consults an ex-ternal web-based linguistic service.z A core node maintains a repository of the knownatomic linguistic services, and provides servicediscovery functionality to the possible us-ers/applications.
It also maintains a workflow re-1 Language Grid: http://langrid.nict.go.jp/145pository for composite linguistic services, and isequipped with a workflow engine.Figure 1.
Architecture of a Language Infrastructure.Given a technical architecture like this, the lin-guistic service ontology will serve as a basis forcomposition of composite linguistic services, andefficient wrapper generation.
The wrapper genera-tion processes are unavoidable during incorpora-tion of existing general linguistic services or dis-semination of newly created community-basedlanguage resources.
Tthe most important desidera-tum for the ontology, therefore, is that it be able tospecify the input/output constraints of a linguisticservice properly.
Such input/output specificationsenable us to derive a taxonomy of linguistic serviceand the associated language resources.3 The Upper Ontology3.1 The top levelWe have developed the upper part of the serviceontology so far, and have been working on detail-ing some of its core parts.
Figure 2 shows the toplevel of the proposed linguistic service ontology.Figure 2.
The Top Level of the Ontology.The topmost class is NL_Resource, which ispartitioned into ProcessingResource, andLanguageResource.
Here, as in GATE (Cun-ningham, 2002), processing resource refers to pro-grammatic or algorithmic resources, while lan-guage resource refers to data-only static resourcessuch as lexicons or corpora.
The innate relationbetween these two classes is: a processing resourcecan use language resources.
This relationship isspecifically introduced to properly define linguisticservices that are intended to provide access func-tions to language resources.As shown in the figure, LinguisticSer-vice is provided by a processing resource, stress-ing that any linguistic service is realized by a proc-essing resource, even if its prominent functionalityis accessing language resources in response to auser?s query.
It also has the meta-information foradvertising its non-functional descriptions.The fundamental classes for abstract linguisticobjects, Expression, Meaning, and De-scription and the innate relations among themare illustrated in Figure 3.
These play roles in de-fining functionalities of some types of processingresources and associated language resources.
Asshown in Fig.
3, an expression may denote a mean-ing, and the meaning can be further described by adescription, especially for human uses.Figure 3.
Classes for Abstract Linguistic Objects.In addition to these, NLProcessedStatusand LinguisticAnnotation are important inthe sense that NLP status represents the so-calledIOPE (Input-Output-Precondition-Effect) parame-ters of a linguistic processor, which is a subclass ofthe processing resource, and the data schema forthe results of a linguistic analysis is defined by us-ing the linguistic annotation class.3.2 Taxonomy of language resourcesThe language resource class currently is partitionedinto subclasses for Corpus and Dictionary.The immediate subclasses of the dictionary classare: (1) MonolingualDictionary, (2) Bi-hasNLProcessedStatus*NLPToolLinguisticServiceExternalLinguisticServiceLanguageResourceAccessMechanismLanguageResourcemaintains-profiles registry-workflowsCore NodeService NodeApplicationProgramwrapper146lingualDictionary, (3) Multilingual-Terminology, and (4) ConceptLexicon.The major instances of (1) and (2) are so-calledmachine-readable dictionaries (MRDs).
Many ofthe community-based special language resourcesshould fall into (3), including multilingual termi-nology lists specialized for some application do-mains.
For subclass (4), we consider the computa-tional concept lexicons, which can be modeled bya WordNet-like encoding framework (Hayashi andIshida, 2006).3.3 Taxonomy of processing resourcesThe top level of the processing resource class con-sists of the following four subclasses, which takeinto account the input/output constraints of proc-essing resources, as well as the language resourcesthey utilize.z AbstractReader, AbstractWriter:These classes are introduced to describe compu-tational processes that convert to-and-from non-textual representation (e.g.
speech) and textualrepresentation (character strings).z LR_Accessor: This class is introduced to de-scribe language resource access functionalities.
Itis first partitioned into CorpusAccessor andDictionaryAccessor, depending on thetype of language resource it accesses.
The inputto a language resource accessor is a query(LR_AccessQuery, sub-class of Expres-sion), and the output is a kind of ?dictionarymeaning?
(DictionaryMeaning), which is asub-class of meaning class.
The dictionary mean-ing class is further divided into sub-classes by re-ferring to the taxonomy of dictionary.z LinguisticProcessor: This class is furtherdiscussed in the next subsection.3.4 Linguistic processorsThe linguistic processor class is introduced to rep-resent NLP tools/systems.
Currently and tenta-tively, the linguistic processor class is first parti-tioned into Transformer and Analyzer.The transformer class is introduced to representParaphrasor and Translator; both rewritethe input linguistic expression into another expres-sion while maintaining the original meaning.
Theonly difference is the sameness of the input/outputlanguages.
We explicitly express the input/outputlanguage constraints in each class definition.Figure 4.
Taxonomy of Linguistic Analyzer.Figure 4 shows the working taxonomy of theanalyzer class.
While it is not depicted in the figure,the input/output constraints of a linguistic analyzerare specified by the Expression class, while itsprecondition/effect parameters are defined byNLProcessedStatus class.
The details arealso not shown in this figure, these constraints arefurther restricted with respect to the taxonomy ofthe processing resource.We also assume that any linguistic analyzer ad-ditively annotates some linguistic information tothe input, as proposed by (Cunningham, 2002),(Klein and Potter, 2004).
That is, an analyzerworking at a certain linguistic level (or ?depth?
)adds the corresponding level of annotations to theinput.
In this sense, any natural language expres-sion can have a layered/multiple linguistic annota-tion.
To make this happen, a linguistic service on-tology has to appropriately define a sub-ontologyfor the linguistic annotations by itself or by incor-porating some external standard, such as LAF (Ideand Romary, 2004).3.5 NLP status and the associated issuesFigure 5 illustrates our working taxonomy of NLPprocessed status.
Note that, in this figure, only theportion related to linguistic analyzer is detailed.Benefits from the NLP status class will be twofold:(1) as a part of the description of a linguistic ana-lyzer, we assign corresponding instances of thisclass as its precondition/effect parameters, (2) anyinstance of the expression class can be concisely147?tagged?
by instances of the NLP status class, ac-cording to how ?deeply?
the expression has beenlinguistically analyzed so far.
Essentially, such in-formation can be retrieved from the attached lin-guistic annotations.
In this sense, the NLP statusclass might be redundant.
Tagging an instance ofexpression in that way, however, can be reason-able: we can define the input/output constraints ofa linguistic analyzer concisely with this device.Figure 5.
Taxonomy of NLP Status.Each subclass in the taxonomy represents thetype or level of a linguistic analysis, and the hier-archy depicts the processing constraints amongthem.
For example, if an expression has beenparsed, it would already have been morphologi-cally analyzed, because parsing usually requiresthe input to be morphologically analyzed before-hand.
The subsumption relations encoded in thetaxonomy allow simple reasoning in possible com-posite service composition processes.
Howevernote that the taxonomy is only preliminary.
Thearrangement of the subclasses within the hierarchymay end up being far different, depending on thelanguages considered, and the actual NLP tools,these are essentially idiosyncratic, that are at hand.For example, the notion of ?chunk?
may be differ-ent from language to language.
Despite of these, ifwe go too far in this direction, constructing a tax-onomy would be meaningless, and we would for-feit reasonable generalities.4 Related WorksKlein and Potter (2004) have once proposed anontology for NLP services with OWL-S definitions.Their proposal however has not included detailedtaxonomies either for language resources, or forabstract linguistic objects, as shown in this paper.Gra?a, et al (2006) introduced a framework forintegrating NLP tools with a client-server architec-ture having a multi-layered repository.
They alsoproposed a data model for encoding various typesof linguistic information.
However the model itselfis not ontologized as proposed in this paper.5 Concluding RemarksAlthough the proposed ontology successfully de-fined a number of first class objects and the innaterelations among them, it must be further refined bylooking at specific NLP tools/systems and the as-sociated language resources.
Furthermore, its ef-fectiveness in composition of composite linguisticservices or wrapper generation should be demon-strated on a specific language infrastructure suchas the Language Grid.AcknowledgmentsThe presented work has been partly supported byNICT international joint research grant.
The authorwould like to thank to Thierry Declerck and PaulBuitelaar (DFKI GmbH, Germany) for their help-ful discussions.ReferencesH.
Cunningham, et al 2002.
GATE: A Framework andGraphical Development Environment for RobustNLP Tools and Applications.
Proc.
of ACL 2002,pp.168-175.J.
Gra?a , et al 2006.
NLP Tools Integration Using aMulti-Layered Repository.
Proc.
of LREC 2006Workshop on Merging and Layering Linguistic In-formation.Y.
Hayashi and T. Ishida.
2006.
A Dictionary Model forUnifying Machine Readable Dictionaries and Com-putational Concept Lexicons.
Proc.
of LREC 2006,pp.1-6.N.
Ide and L. Romary.
2004. International Standard fora Linguistic Annotation Framework.
Journal of Natu-ral Language Engineering, Vol.10:3-4, pp.211-225.T.
Ishida.
2006.
Language Grid: An Infrastructure forIntercultural Collaboration.
Proc.
of SAINT-06, pp.96-100, keynote address.E.
Klein and S. Potter.
2004.
An Ontology for NLP Ser-vices.
Proc.
of LREC 2004 Workshop on Registry ofLinguistic Data Categories.Y.
Murakami, et al 2006.
Infrastructure for LanguageService Composition.
Proc.
of Second InternationalConference on Semantics, Knowledge, Grid.148
