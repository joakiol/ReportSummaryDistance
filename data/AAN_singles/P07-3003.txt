Proceedings of the ACL 2007 Student Research Workshop, pages 13?18,Prague, June 2007. c?2007 Association for Computational LinguisticsAn Implementation of Combined Partial Parserand Morphosyntactic DisambiguatorAleksander Buczyn?skiInstitute of Computer SciencePolish Academy of SciencesOrdona 21, 01-237 Warszawa, Polandolekb@ipipan.waw.plAbstractThe aim of this paper is to present a simpleyet efficient implementation of a tool for si-multaneous rule-based morphosyntactic tag-ging and partial parsing formalism.
Theparser is currently used for creating a tree-bank of partial parses in a valency acquisi-tion project over the IPI PAN Corpus of Pol-ish.1 Introduction1.1 MotivationUsually tagging and partial parsing are done sep-arately, with the input to a parser assumed tobe a morphosyntactically fully disambiguated text.Some approaches (Karlsson et al, 1995; Schiehlen,2002; M?ller, 2006) interweave tagging and parsing.
(Karlsson et al, 1995) is actually using the same for-malism for both tasks ?
it is possible, because allwords in this dependency-based approach come withall possible syntactic tags, so partial parsing is re-duced to rejecting wrong hypotheses, just as in caseof morphosyntactic tagging.Rules used in rule-based tagging often implicitlyidentify syntactic constructs, but do not mark suchconstructs in texts.
A typical such rule may say thatwhen an unambiguous dative-taking preposition isfollowed by a number of possibly dative adjectivesand a noun ambiguous between dative and someother case, then the noun should be disambiguatedto dative.
Obviously, such a rule actually identifiesa PP and some of its structure.Following the observation that both tasks, mor-phosyntactic tagging and partial constituency pars-ing, involve similar linguistic knowledge, a for-malism for simultaneous tagging and parsing wasproposed in (Przepi?rkowski, 2007).
This paperpresents a revised version of the formalism anda simple implementation of a parser understandingrules written according to it.
The input to the rulesis a tokenised and morphosyntactically annotatedXML text.
The output contains disambiguation an-notation and two new levels of constructions: syn-tactic words and syntactic groups.2 The Formalism2.1 TerminologyIn the remainder of this paper we call the smallest in-terpreted unit, i.e., a sequence of characters togetherwith their morphosyntactic interpretations (lemma,grammatical class, grammatical categories) a seg-ment.
A syntactic word is a non-empty sequence ofsegments and/or syntactic words.
Syntactic wordsare named entities, analytical forms, or any other se-quences of tokens which, from the syntactic point ofview, behave as single words.
Just as basic words,they may have a number of morphosyntactic inter-pretations.
By a token we will understand a segmentor a syntactic word.
A syntactic group (in short:group) is a non-empty sequence of tokens and/orsyntactic groups.
Each group is identified by its syn-tactic head and semantic head, which have to be to-kens.
Finally, a syntactic entity is a token or a syn-tactic group; it follows that syntactic groups may bedefined as a non-empty sequence of entities.132.2 The Basic FormatEach rule consists of up to 4 parts: Match describesthe sequence of syntactic entities to find; Left andRight ?
restrictions on the context; Actions ?a sequence of morphological and syntactic actionsto be taken on the matching entities.For example:Left:Match: [pos~~"prep"][base~"co|kto"]Right:Actions: unify(case,1,2);group(PG,1,2)means:?
find a sequence of two tokens such thatthe first token is an unambiguous preposition([pos~~"prep"]), and the second token isa possible form of the lexeme CO ?what?
or KTO?who?
([base~"co|kto"]),?
if there exist interpretations of these two tokenswith the same value of case, reject all interpre-tations of these two tokens which do not agreein case (cf.
unify(case,1,2));?
if the above unification did not fail, markthus identified sequence as a syntactic group(group) of type PG (prepositional group),whose syntactic head is the first token (1) andwhose semantic head is the second token (2;cf.
group(PG,1,2));Left and Right parts of a rule may be empty;in such a case the part may be omitted.2.3 Left, Match and RightThe contents of parts Left, Match and Righthave the same syntax and semantics.
Each of themmay contain a sequence of the following specifica-tions:?
token specification, e.g., [pos~~"prep"] or[base~"co|kto"]; these specifications ad-here to segment specifications of the Poliqarp(Janus and Przepi?rkowski, 2006) corpussearch engine; in particular there is a distinc-tion between certain and uncertain information?
a specification like [pos~~"subst"]says that all morphosyntactic interpretationsof a given token are nominal (substantive),while [pos~"subst"] means that there ex-ists a nominal interpretation of a given token;?
group specification, extending the Poliqarpquery as proposed in (Przepi?rkowski, 2007),e.g., [semh=[pos~~"subst"]] specifies asyntactic group whose semantic head is a tokenwhose all interpretations are nominal;?
one of the following specifications:?
ns: no space,?
sb: sentence beginning,?
se: sentence end;?
an alternative of such sequences in parentheses.Additionally, each such specification may be modi-fied with one of the three standard regular expressionquantifiers: ?, * and +.An example of a possible value of Left, Matchor Right might be:[pos~"adv"] ([pos~~"prep"][pos~"subst"] ns?
[pos~"interp"]?se | [synh=[pos~~"prep"]])2.4 ActionsThe Actions part contains a sequence of mor-phological and syntactic actions to be taken whena matching sequence of syntactic entities is found.While morphological actions delete some interpre-tations of specified tokens, syntactic actions groupentities into syntactic words or syntactic groups.
Theactions may also include conditions that must be sat-isfied in order for other actions to take place, for ex-ample case or gender agreement between tokens.The actions may refer to entities matched bythe specifications in Left, Match and Right bynumbers.
These specifications are numbered from1, counting from the first specification in Leftto the last specification in Right.
For example,in the following rule, there should be case agree-ment between the adjective specified in the leftcontext and the adjective and the noun specifiedin the right context (cf.
unify(case,1,4,5)),as well as case agreement (possibly of a differentcase) between the adjective and noun in the match(cf.
unify(case,2,3)).Left: [pos~~"adj"]Match: [pos~~"adj"][pos~~"subst"]14Right: [pos~~"adj"][pos~~"subst"]Actions: unify(case,2,3);unify(case,1,4,5)The exact repertoire of actions still evolves, butthe most frequent are:?
agree(<cat>,...,<tok>,...) - checkif the grammatical categories (<cat>,...)of entities specified by subsequent numbers(<tok>,...) agree;?
unify(<cat>,...,<tok>,...) - asabove, plus delete interpretations that do notagree;?
delete(<cond>,<tok>,...) - delete allinterpretations of specified tokens match-ing the specified condition (for examplecase~"gen|acc")?
leave(<cond>,<tok>,...) - leave onlythe interpretations matching the specified con-dition;?
nword(<tag>,<base>) - create a newsyntactic word with given tag and base form;?
mword(<tag>,<tok>) - create a new syn-tactic word by copying and appropriately mod-ifying all interpretations of the token specifiedby number;?
group(<type>,<synh>,<semh>) - cre-ate a new syntactic group with syntactic headand semantic head specified by numbers.The actions agree and unify take a vari-able number of arguments: the initial argu-ments, such as case or gender, specifythe grammatical categories that should simulta-neously agree, so the condition agree(casegender,1,2) is properly stronger than thesequence of conditions: agree(case,1,2),agree(gender,1,2).
Subsequent arguments ofagree are natural numbers referring to entity spec-ifications that should be taken into account whenchecking agreement.A reference to entity specification refers to allentities matched by that specification, so, e.g.,in case 1 refers to specification [pos~adj]*,unify(case,1) means that all adjectivesmatched by that specification must be rid of allinterpretations whose case is not shared by all theseadjectives.When a reference refers to a syntactic group, theaction is performed on the syntactic head of thatgroup.
For example, assuming that the followingrule finds a sequence of a nominal segment, a multi-segment syntactic word and a nominal group, theaction unify(case,1) will result in the unifica-tion of case values of the first segment, the syntacticword as a whole and the syntactic head of the group.Match: ([pos~~"subst"] |[synh=[pos~~"subst"]])+Action: unify(case,1)The only exception to this rule is the semantic headparameter in the group action; when it referencesa syntactic group, the semantic, not syntactic, headis inherited.For mword and nword actions we assume thatthe orthographic form of the created syntactic wordis always a simple concatenation of all orthographicforms of all tokens immediately contained in thatsyntactic word, taking into account informationabout space or its lack between consecutive tokens.The mword action is used to copy and possiblymodify all interpretations of the specified token.
Forexample, a rule identifying negated verbs, such asthe rule below, may require that the interpretationsof the whole syntactic word be the same as the in-terpretations of the verbal segment, but with negadded to each interpretation.Left: ([pos!~"prep"]|[case!~"acc"])Match: [orth~"[Nn]ie"][pos~~"verb"](ns [orth~"by[ms?]?"])?
(ns [pos~~"aglt"])?Actions: leave(pos~"qub", 2);mword(neg,3)The nword action creates a syntactic word witha new interpretation and a new base form (lemma).For example, the rule below will create, for a se-quence like mimo tego, z?e or Mimo z?e ?in spite of,despite?, a syntactic word with the base form MIMOZ?E and the conjunctive interpretation.Match: [orth~"[Mm]imo"][orth~"to|tego"]?
(ns [orth~","])?
[orth~"z?e"]Actions: leave(pos~"prep",1);15leave(pos~"subst",2);nword(conj, mimo z?e)The group(<type>,<synh>,<semh>) ac-tion creates a new syntactic group, where <type>is the categorial type of the group (e.g., PG), while<synh> and <semh> are references to appropriatetoken specifications in the Match part.
For exam-ple, the following rule may be used to create a nu-meral group, syntactically headed by the numeraland semantically headed by the noun:Left: [pos~~"prep"]Match: [pos~"num"][pos~"adj"]*[pos~"subst"]Actions: group(NumG,2,4)Of course, the rules should be constructed insuch a way that references <synh> and <semh>refer to specifications of single entities, e.g.,([pos~"subst"]|[synh=[pos~"subst"]])but not [case~"nom"]+3 The Implementation3.1 ObjectivesThe goal of the implementation was a combined par-tial parser and tagger that would be reasonably fast,but at the same time easy to modify and maintain.
Atthe time of designing and implementing the parser,neither the set of rules, nor the specific repertoire ofpossible actions within rules was known, hence, theflexibility and modifiability of the design was a keyissue.3.2 Input and OutputThe parser currently takes as input the version ofthe XML Corpus Encoding Standard (Ide et al,2000) assumed in the IPI PAN Corpus of Polish(korpus.pl).
The tagset is configurable, there-fore the tool can be possibly used for other lan-guages as well.Rules may modify the input in one of two ways.Morphological actions may delete certain interpre-tations of certain tokens; this fact is marked bythe attribute disamb="0" added to <lex> ele-ments representing these interpretations.
On theother hand, syntactic actions modify the input byadding <syntok> and <group> elements, mark-ing syntactic words and groups.3.3 Algorithm OverviewDuring the initialisation phase, the parser loads theexternal tagset specification and the ruleset, and con-verts the latter to a set of compiled regular expres-sions and actions.
Then input files are parsed oneby one (for each input file a corresponding outputfile containing parsing results is created).
To reducememory usage, the parsing is done by chunks de-fined in the input files, such as sentences or para-graphs.
In the remainder of the paper we assume thechunks are sentences.During the parsing, a sentence has dual represen-tation:1. object-oriented syntactic entity tree, used foreasy manipulation of entities (for example dis-abling certain interpretations or creating newsyntactic words) and preserving all necessaryinformation to generate the final output;2. compact string for quick regexp matching, con-taining only the informations important forthese rules which have not been applied yet.The entity tree is initialised as a flat (one leveldeep) tree with all leaves (segments and possiblyspecial entities, like no space, sentence beginning,sentence end) connected directly to the root.
Appli-cation of a syntactic action means inserting a newnode (syntacting word or group) to the tree, betweenthe root and a few of the existing nodes.
As the pars-ing processes, the tree changes its shape: it becomesdeeper and narrower.The string representations is consistently updatedto always represent the top level of the tree (the chil-dren of the root).
Therefore, the searched string?slength tends to decrease with every action applied(as opposed to increasing in a na?ve implementa-tion, with single representation and syntactic / dis-ambiguation markup added).
This is not a strictlymonotonous process, as creating new syntactic en-tities containing only one segment may temporarilyincrease the length, but the increase is offset withthe next rule applied to this entity (and generally thepoint of parsing is to eventually find groups longerthan one segment).Morphological actions do not change the shapeof the tree, but also reduce the string representation16length by deleting from the string certain interpreta-tions.
The interpretations are preserved in the tree toproduce the final output, but are not interesting forfurther stages of parsing.3.4 Representation of SentenceThe string representation is a compromise betweenXML and binary representation, designed for easy,fast and precise matching, with the use of existingregular expression libraries.The representation describes the top level of thecurrent state of the sentence tree, including only theinformations that may be used by rule matching.
Foreach child of the tree root, the following informa-tions are preserved in the string: type (token / group/ special) and identifier (allowing to find the entityin the tree in case an action should be applied to it).The further part of the string depends on the type ?for token it is orthografic forms and a list of interpre-tations; for group ?
number of heads of the groupand lists of interpretations of syntactic and semantichead.Every interpretation consists of a base form anda morphosyntactic tag (part of speech, case, gender,numer, degree, etc.).
Because the tagset used in theIPI PAN Corpus is intended to be human readable,the morphosyntactic tag is fairly descriptive (longvalues) and, on the other hand, compact (may havemany parts ommited, for example when the categoryis not applicable to the given part of speech).
Tomake pattern matching easier, the tag is converted toa string of fixed width.
In the string, each charac-ter corresponds to one morphological category fromthe tagset (first part of speech, then number, case,gender etc.)
as for example in the Czech positionaltag system (Hajic?
and Hladk?, 1997).
The charac-ters ?
upper- and lowercase letters, or 0 (zero) forcategories non-applicable for a given part of speech?
are assigned automatically, on the basis of the ex-ternal tagset definition read at initialisation.
A fewexamples are presented in table 1.3.5 Rule MatchingThe conversion from the Left, Match and Rightparts of the rule to a regular expression over thestring representation is fairly straightforward.
Twoexceptions ?
regular expressions as morphosyntac-tic category values and the distinction between ex-IPI PAN tag fixed length tagadj:pl:acc:f:sup UBDD0C0000000conj B000000000000fin:pl:sec:imperf bB00B0A000000Table 1: Examples of tag conversion between humanreadable and inner positional tagset.istential and universal quantification over interpreta-tions ?
will be described in more detail below.First, the rule might be looking for a tokenwhose grammatical category is described by a reg-ular expresion.
For example, [gender~"m."]should match human masculine (m1), animate mas-culine (m2), and inanimate masculine (m3) to-kens; [pos~"ppron[123]+|siebie"] shouldmatch various pronouns; [pos!~"num.
*"]should match all segments except for main and col-lective numerals; etc.
Because morphosyntactic tagsare converted to fixed length representations, theregular expressions also have to be converted beforecompilation.To this end, the regular expression is matchedagainst all possible values of the given category.Since, after conversion, every value is representedas a single character, the resulting regexp can usesquare brackets to represent the range of possiblevalues.The conversion can be done only for attributeswith values from a well-defined, finite set.
Sincewe do not want to assume that we know all the textto parse before compiling rules, we assume that thedictionary is infinite (this is different from Poliqarp,where dictionary is calculated during compilation ofcorpus to binary form).
The assumption makes itdifficult to convert requirements with negated orthor base (for example [orth!~"[Nn]ie"]).
Asfor now, such requirements are not included in thecompiled regular expression, but instead handled asan extra condition in the Action part.Another issue that has to be taken into carefulconsideration is the distinction between certain anduncertain information.
A segment may have manyinterpretations and sometimes a rule may apply onlywhen all the interpretations meet the specified con-dition (for example [pos~~"subst"]), while inother cases one matching interpretation should be17enough to trigger the rule ([pos~"subst"]).
Theaforementioned requirements translate respectivelyto the following regular expressions:1?
(<N[^<>]+)+?
(<[^<>]+)*(<N[^<>]+)(<[^<>]+)*Of course, a combination of existential and universalrequirements is a valid requirement as well, for ex-ample: [pos~~"subst" case~"gen|acc"](all interpretations noun, at least one of them in gen-itive or accusative case) should translate to:(<N[^<>]+)*(<N.
[BD][^<>]+)(<N[^<>]+)*3.6 ActionsWhen a match is found, the parser runs a sequenceof actions connected with the given rule, describedin 2.4.
Each action may be condition, morphologi-cal action, syntactic action or a combination of theabove (for example unify is both a condition and amorphological action).
The parser executes the se-quence until it encounters an action which evaluatesto false (for example, unification of cases fails).The actions affect both the tree and the string rep-resentation of the parsed sentence.
The tree is up-dated instantly (cost of update is constant or linearto match lenght), but the string update (cost linear tosentence length) is delayed until it is really needed(at most once per rule).4 Conclusion and Future WorkAlthought morphosyntactic disambiguation rulesand partial parsing rules often encode the same lin-guistic knowledge, we are not aware of any partial(or shallow) parsing systems accepting morphosyn-tactically ambiguous input and disambiguating itwith the same rules that are used for parsing.
Thispaper presents a formalism and a working prototypeof a tool implementing simultaneous rule-based dis-ambiguation and partial parsing.Unlike other partial parsers, the tool does not ex-pect a fully disambiguated input.
The simplicityof the formalism and its implementation makes itpossible to integrate a morphological analyser into1< and > were chosen as convenient separators of interpre-tations and entities, because they should not happen in the inputdata (they have to be escaped in XML).parser and allow a greater flexibility in input for-mats.On the other hand, the rule syntax can be extendedto take advantage of the metadata present in the cor-pus (for example: style, media, or date of publish-ing).
Many rules, both morphological and syntactic,may be applicable only to specific kinds of texts ?for example archaic or modern, official or common.ReferencesJan Hajic?
and Barbara Hladk?.
1997.
Tagging of inflec-tive languages: a comparison.
In Proceedings of theANLP?9y, pages 136?143, Washington, DC.Nancy Ide, Patrice Bonhomme, and Laurent Romary.2000.
XCES: An XML-based standard for linguisticcorpora.
In Proceedings of the Linguistic Resourcesand Evaluation Conference, pages 825?830, Athens,Greece.Daniel Janus and Adam Przepi?rkowski.
2006.
Poliqarp1.0: Some technical aspects of a linguistic search en-gine for large corpora.
In Jacek Walin?ski, KrzysztofKredens, and Stanis?aw Goz?dz?-Roszkowski, editors,The proceedings of Practical Applications of Linguis-tic Corpora 2005, Frankfurt am Main.
Peter Lang.F.
Karlsson, A. Voutilainen, J.
Heikkil?, and A. Anttila,editors.
1995.
Constraint Grammar: A Language-Independent System for Parsing Unrestricted Text.Mouton de Gruyter, Berlin.Frank Henrik M?ller.
2006.
A Finite State Approach toShallow Parsing and Grammatical Functions Annota-tion of German.
Ph.
D. dissertation, Universit?t T?bin-gen. Pre-final Version of March 11, 2006.Adam Przepi?rkowski.
2007.
A preliminary formal-ism for simultaneous rule-based tagging and partialparsing.
In Georg Rehm, Andreas Witt, and LotharLemnitzer, editors, Datenstrukturen f?r linguistischeRessourcen und ihre Anwendungen ?
Proceedingsder GLDV-Jahrestagung 2007, T?bingen.
Gunter NarrVerlag.Adam Przepi?rkowski.
2007.
On heads and coordina-tion in valence acquisition.
In Alexander Gelbukh,editor, Computational Linguistics and Intelligent TextProcessing (CICLing 2007), Lecture Notes in Com-puter Science, Berlin.
Springer-Verlag.Michael Schiehlen.
2002.
Experiments in Germannoun chunking.
In Proceedings of the 19th In-ternational Conference on Computational Linguistics(COLING2002), Taipei.18
