Proceedings of the NAACL HLT 2010 Young Investigators Workshop on Computational Approaches to Languages of the Americas,pages 125?131, Los Angeles, California, June 2010. c?2010 Association for Computational LinguisticsText Generation for Brazilian Portuguese:the Surface Realization TaskEder Miranda de Novais Thiago Dias Tadeu Ivandr?
ParaboniUniversity of S?o Paulo - School of Arts, Sciences and Humanities (USP-EACH)Av.
Arlindo Bettio, 1000, Ermelino MatarazzoS?o Paulo, Brazil - 03828-000eder.novais@usp.br tdtadeu@gmail.com ivandre@usp.brAbstractDespite the growing interest in NLP focusedon the Brazilian Portuguese language in recentyears, its obvious counterpart ?
Natural Lan-guage Generation (NLG) ?
remains in thatcase a little-explored research field.
In thispaper we describe preliminary results of a firstproject of this kind, addressing the issue ofsurface realization for Brazilian Portuguese.Our approach, which may be particularly suit-able to simpler NLG applications in which adomain corpus of the most likely output sen-tences happens to be available, is in principleadaptable to many closely-related languages,and paves the way to further NLG researchfocused on Romance languages in general.1 IntroductionData-to-Text Natural Language Generation (NLG)systems produce text or speech from a given non-linguistic input.
Systems of this kind usually fol-low a pipelined architecture (Reiter, 2007) com-prising data interpretation, document planning,sentence planning and surface realization tasks.
Inthis work we discuss the latter, that is, the task ofproducing surface word strings from a non-linguistic input specification.Existing approaches to surface realization mayvary greatly in their input requirements and, con-sequently, in the level of control over the outputtext.
On the one hand, more sophisticated, gram-mar-based surface realization systems such asKPML (Bateman, 1997) allow maximum flexibili-ty and productive coverage.
These advantages,however, are only useful if the underlying applica-tion is capable of providing a detailed semanticspecification as an input to the surface realizationmodule in the first place.As an alternative to surface realization gram-mars, NLG systems may also rely on template-based surface realization, that is, the use of prede-fined structures with a number of variable fields(or slots) to be filled in with values provided by theapplication.
For a comparison between templatesand other approaches to NLG, see for instance vanDeemter et.
al.
(2005).Adapting an existing application to a template-based realization system  is usually much simplerthan in a grammar-based approach.
Yet, in order totake full advantage of template definitions and toobtain a degree of control over the output text thatis comparable to what a grammar-based systemwould allow, it is still necessary to master the useof templates and their rules to fill in each slot ade-quately.The problem of input specification to surfacerealization has been discussed at length in the lite-rature in the field - see for example Langkilde(2000) ?
and we of course do not dispute that moresophisticated NLG systems will require a detailedinput specification.
However, given that the avail-able semantics may not be provide in this level ofdetail, in this paper we discuss an alternative that125may be suitable to simpler applications, namely,those cases in which it is known in advance whatthe most likely output sentence structures are, forexample, because a corpus on that particular do-main happens to be available.
In these cases, wewill argue that it may be possible to take advantageof the available knowledge to quickly deploy asurface realization component based on existingcorpora.The underlying assumption in our work is thatthere are simpler NLG applications for which itmay be sufficient to select a sentence that resem-bles the desired output, and then modify some orall of its constituents as needed to achieve the de-sired output.
For instance, an application that is notlinguistically-oriented may produce its output re-sults as natural language text by selecting a stan-dard imperative sentence as in ?Please reply to thismessage?
and, leaving all other sentence constitu-ents unchanged, specify that the action to be rea-lized in the output is ?delete?, and that its patientobject is ?file?.
This will have the effect of produc-ing the output sentence ?Please delete this file?.In this introductory work we intend to outlineour ongoing efforts to develop one such approachto surface realization for the Brazilian Portugueselanguage.
In doing so, we shall focus on the gener-al principles that guide our research, leaving muchof the theoretical details to be discussed elsewhere.The present work has been developed within thecontext of a query-and-answer application underinvestigation, in which questions sent by undergra-duate students enrolled in a particular course willbe matched to existing entries in a large databaseof standard replies written by the professors incharge to the most frequently asked questionsmade by the students, and tailored to each particu-lar context accordingly.
Details of this particularapplication will not be dealt with in this paper ei-ther.The reminder of this paper is structured as fol-lows.
Section 2 briefly discusses related work onsurface realization; Section 3 provides an overviewof our system?s architecture; Sections 4 describesthe extraction of syntactically-structured templatesfrom a target corpus and Section 5 presents thecurrent features of our template-based surface rea-lization engine.
Finally, Section 6 draws prelimi-nary conclusions and describes ongoing work, andSection 7 hints at possible collaboration with thewider NLP research community in Latin Americaand elsewhere.2 Related workMapping an application semantics to surfacestrings usually involves the use of surface realiza-tion grammars or similar resources, which can beeither built manually (e.g., Bateman, 1997) or ac-quired automatically from a corpus (Ratnaparkhi,2000; Zhong & Stent, 2005; DeVault et.
al., 2008).The surface realization task proper can be di-vided into two relatively independent procedures: adomain-dependant mapping from the applicationsemantics onto linguistic structures (including,e.g., lexical choice), and a language-oriented taskof linearization.
As pointed out in Gatt & Reiter(2009), most of the existing systems tend to per-form both tasks, but in some cases they focus onthe latter, assuming that all lexical choices andother domain-dependent decisions have alreadybeen made.
This is the case for example of Sim-pleNLG (Gatt & Reiter, 2009), a surface realiza-tion engine implemented as a Java library forsentence linearization.Central to the development and use of a surfacerealization system is the kind of input specificationthat will be expected from the application.
In orderto take full advantage of grammar-based surfacerealization, it is usually necessary to provided de-tailed linguistic knowledge as an input.
This is thecase, for example, of a number of corpus-basedapproaches to grammar acquisition, which maytake logical forms as an input (e.g., Smets et.
al.,2003; Zhong & Stent, 2005; Marciniak & Strube,2005).
The Amalgam system, for instance (Smetset.
al., 2003), takes as an input a graph conveyingfixed content words (lemmas) and detailed linguis-tic information such as verb tense and mode, gend-er, number and definiteness of all its constituents,and additional semantic features (e.g., ?human?,?animated?
etc.
)Detailed input specification as required ingrammar-based surface realization is however of-ten unavailable from the semantics of the applica-tion.
As an alternative, template-based surfacerealization makes use of predefined structures(e.g., syntactically-structured sentence templates)with slots to be filled in with values provided bythe application.
A prominent example of template-based surface realization system is YAG (McRoy126et.
al., 2003), which may accept both feature struc-tures and propositional semantics as an input.
Thefollowing is an example of input feature structurein YAG, taken from McRoy et.
al.
(2003).
In thisexample, the structure represents the fact that adiscourse subject (George) performs an act (under-stand) on a particular object (a book), in whichboth subject and object happened to be realized aspronouns as ?He understands it?.
((template clause(process ?understand?
)(agent   ((template noun-phrase)(np-type PROPER)(head ?George?
)(gender MASCULINE)(pronominal YES)))(object ((template noun-phrase)(head ?book?
)(pronominal YES))) )Input feature structure in YAG.The input requirements of a template-based sur-face realization system are obviously much simpler?
and more likely to be available from the applica-tion ?
than a full set of linguistic instructions onhow to generate the desired output.
Still, in thiswork we would like to produce surface strings us-ing even less knowledge, namely, by using sen-tence-level templates extracted from a domaincorpus as a basis to generate original and modifiedversions of the corpus sentences.We will refer to this as an example-based ap-proach to surface realization1, although this is notto be mistaken for example-based learning tech-niques to perform automatic grammar induction asin DeVault et.
al., (2008), or other forms of gram-mar acquisition as in Zhong & Stent (2005).
Ourwork is more related to Ratnaparkhi (2000) in thesense that we also use a large collection of genera-tion templates for surface realization, but still dis-tinct in that we intend to generate text fromminimal input.3 Project OverviewTemplate-based surface realization systems such asYAG (McRoy et.
al., 2003) make use of a relative-ly small number of template definitions and somekind of descriptive language to provide fine-grained input sentence specification with flexibility1 Perhaps ?select-and-modify?
would be closer to our currentpurposes.and wide coverage.
However, if a corpus on theapplication domain happens to be available, andassuming that the corpus sentences resemble thosethat we intend to generate, then it may be conve-nient (at least for applications that are not linguisti-cally-motivated in the first place) to simply use thecorpus sentences as examples, and allow an inputspecification that makes explicit only the changesthat need to take place to convert the selected ex-ample into the desired output.For example, in order to produce the sentence?He understands it?
we may select an examplesuch as ?People will understand it?
from the cor-pus, and then redefine its agent head type as a pro-noun, and its action tense as present.
Thedifference may not seem so dramatic if comparedto, e.g., an input specification to YAG, but it willobviously grow as more complex sentence struc-tures are considered.If the selected example differs greatly from thetarget sentence, then a large number of modifica-tions will have to take place, and in that case ourexample-based approach may not seem very use-ful.
On the other hand, if the corpus is representa-tive of the sentences that are likely to be generated,then little or no additional modifications will berequired, in which case new sentences may be gen-erated indeed from a minimally specified input.
Ineither case, we notice that since the examples arerepresented directly in natural language in the cor-pus, new instances can be easily added to expandthe system coverage.In our present approach to the surface realizationtask, syntactically-structured templates are selectedfrom a target corpus on the application domain andused as a basis to produce original and modifiedversions of the corpus sentences by a combinationof canned text and basic dependency-tree opera-tions.
Each sentence in the target corpus makes asentence template in which the agent, patient andaction constituents may be modified or replaced bythe application by combining lower-order tem-plates (e.g., for NPs and VPs), and new sentencesmay be supported by adding the correspondingexamples directly to the corpus.Our current work can be divided into two maintasks: the extraction of syntactically-structuredtemplates from corpora and the actual developmentof the surface realization engine.
The followingsections 4 and 5 discuss each of these tasks in turn.1274 Template ExtractionUsing a collection of emails sent to undergraduatestudents by their professors in reply to their mostfrequent questions regarding a particular project,we developed a database conveying 597 instancesof surface realization templates for Brazilian Por-tuguese NLG as follows.After sentence segmentation, the corpus wastagged and parsed using PALAVRAS (Bick,2000).
A number of critical parsing errors wereremoved, and thus we arrived at a set of 578 sen-tence-level templates represented in XML format.In our example-based approach to surface reali-zation we consider two kinds of structure: sentenceand constituent templates.
Sentence templates arehigh-level representations of the sample sentencestaken from our target corpus, and they contain anumber of variable fields (the constituents) to befilled in with application data (in most cases hav-ing an agent, action and patient fields.
)Everything else within the sentence is simplycanned text as seen in the corpus, and cannot bemodified by the application.
In other words, if theapplication needs to generate a sentence that dif-fers from the template in any constituent other thanits NPs and VPs, it is necessary to define a newtemplate by adding a new example to the corpus.Sentence templates are highly redundant in thesense that many of them keep a similar syntacticstructure in which only the surrounding text mightchange significantly.
For example, many sentencetemplates in our domain represent a simple pieceof advice in the form agent + action followed bysome canned text, as in ?You should enroll by Fri-day?
and ?All smokers are supposed to quit by theend of the month?.Although we could have defined a smaller (andmore flexible) set of templates by generalizingover these structures, in practice this would in-crease the complexity of the required input (e.g.,with the addition of a ?time?
field to a commontemplate to be shared by both examples above.)
Asmentioned in the previous section, we intend tokeep input specification as simple as possible (i.e.,in natural language format) by allowing the targetsentences to be specified directly in the corpus.The contents of the variable fields in a sentencetemplate act as default values for the surface reali-zation algorithm, and they may be changed indivi-dually (e.g., by setting a different tense or gendervalue for a particular field) or replaced by anotherconstituent template entirely.
We notice that de-fault values are acquired automatically from corpo-ra, i.e., they do not need to be hard-coded as inMcRoy et.
al., (2003).Unlike sentence templates, constituent templatesare not extracted from corpora.
Instead, constitu-ents are dependency-trees generated by a small setof grammar rules that covers the instances of VPsand NPs found in our corpus, including support torelative clauses and the most common forms of PPattachment.
The choice for a grammar representa-tion for the more fine-grained constituents wasmainly motivated by the need to achieve widercoverage and to support linguistic variation beyondwhat the actual phrases found in the corpus wouldallow.
In doing so we are able to fill in sentencetemplates with phrases of arbitrary complexity, asin the NP ?You should enroll by the end of themonth in which you are expected to complete yourcurrent assignment?, and not simply using thoseNPs found in the target corpus.The set of mappings from domain concepts totheir dependency-trees (i.e., constituent templates)makes a dictionary of realizations in the applica-tion domain.
As in related work in the field (e.g.,Gatt & Reiter, 2009), we presently assume that theactual mappings are to be provided by the applica-tion.Concept-to-strings mappings are usuallyhandcrafted, but may also be acquired automatical-ly from corpora, as in Bangalore & Rambow(2000).
For testing purposes, we have extracted1,548 instances of concept-to-string mappingsfrom the target corpus, being 1,298 mappings fromagent/patient entities to descriptions, pronouns andproper  names, and 250 mappings from actions toVPs, even though many of them will not be ofpractical use from the point of view of our in-tended application.5 Surface RealizationUsing the template definitions from the previoussection, we designed a simple corpus-based surfacerealization component for our ongoing project.Our surface realization module is currently ableto accept as an input a template id (to be taken as asample structure with inherited default values forthe output sentence) and, optionally, parametersrepresenting the alternative semantics of its agent,128patient and action constituents.
Alternatively, it isalso possible to specify a sentence from scratch(that is, without using any existing template as abasis) in a standard NP VP NP format.
The latterchoice was added to the system as we noticed thatsimpler sentence structures may be specified moreconveniently in this way, as opposed to looking upan example in the corpus.
In our project, this is thecase of short reply sentences as in ?Yes, ofcourse?, ?Thank you?
and others, in which there ishardly any point in selecting a template from thecorpus and then commanding the required changes.The underlying application selects a target tem-plate and provides a set of values to fill in the tem-plate variable fields.
These input values overwritethe default values provided by the template (that is,those values that were inherited from the corpusdata) and adjusted by basic agreement rules toreestablish grammaticality if necessary, as we willdiscuss later.The currently supported variable fields for NPsare determiner type, gender, number, person, de-terminer lemma, pre and post modifiers, the NPhead, an attached pp-list and relative clause (whichmay recursively convey NPs within themselves.
)As for VPs, the variable fields are VP type (finitevs.
infinite etc.
), person, mode, verb type, verbtense and adverbial modifiers.
Verbal gender andnumber are not specified directly but simply inhe-rited from the subject?s own data to avoid a possi-bly conflicting input specification.The most obvious limitation to this kind of ap-proach is the case in which there is a need to gen-erate a sentence that does not resemble anyexample in the corpus at all.
Yet again, we noticethat this difficulty may be overcome by simplyadding a natural language example directly to thecorpus, a method that is arguably simpler than pro-viding detailed instructions on how to select andcombine template structures in a traditional tem-plate-based approach, and even simpler than pro-viding a full sentence specification in grammar-based surface realization.The following is a complete example of how theexample-based approach is expected to work.
In itssimplest form, the application may select the re-quired template to produce the desired output ver-batim as in (a); with some extra knowledgeavailable, the application may also change some ofthe values of the variable template fields as in (b);finally, with even more complete linguistic know-ledge available, the original structure may bechanged even further as in (c), in which case onlythe original sentence structure remained (besidesthe canned text component ?on Friday?
).Input Expected output(a) template #17[You]agent[should deliver]action[your results]patienton Friday.
(b) template #17,patient=essay,action=not_complete[You]agent[did not complete]action[your essay]patienton Friday.
(c) template #17,agent=teacher,determiner=possess,action=give,tense=future,patient=talk,determiner=indefinite[Our teacher]agent[will give]action[a talk]patienton Friday.Table 1.
Examples of (semantic) input and expected(surface text) output.Depending on the changes in the constituentvalues requested by the application, a number ofagreement rules may be invoked to re-establishfluency and grammaticality.
In our work this isaided by a Brazilian Portuguese lexicon presentedin Muniz et.
al.
(2005) and a thesaurus.
For exam-ple, if a sentence template as (d) below is selected,and then the value of the agent head field ischanged to represent a singular concept as in (e),agreement rules are required to modify the verbnumber as in (f).
(d) [All students]agent [have submitted]action[their papers]patient(e) [Your teacher] agent [#have submitted]action[their papers]patient(f) [Your teacher] agent [has submitted]action[their papers]patientTable 2.
An original example (d) reused with a newagent head value (e) and agreement (f).More complex or fine-grained dependencies(e.g., the anaphoric reference ?their?
in Table 2129above) are not currently implemented.
One possi-ble approach to this is a standard generate-and-select approach to NLG as in Langkilde (2000), Oh& Rudnicky (2000) and others.
More specifically,we may over-generate all possible realization al-ternatives and then use a statistical language modelto select the most likely output.
In our work weintend to apply a similar approach also to handlethe lexical choice task, i.e., by selecting the mostlikely wording for each concept based on a lan-guage model.6 DiscussionIn this paper we have described a simple approachto surface realization based on the reuse of syntac-tically-structured templates acquired from corpora.Although not nearly as flexible as a full NLG ap-proach, our system may represent a straightforwardsolution to the problem of input specification,which in our case is simply based on natural lan-guage.
Our corpus-based approach is able to gen-erate single sentences from an input conveyingvarious degrees of semantic knowledge, whichmay be suitable to a wide range of NLG applica-tions that are able to support only less detailed in-put specification.Much of the present work is however to be re-garded as tentative.
One major issue that is yet tobe discussed is how far we can go with an exam-ple-based approach to surface realization withoutcompromising the quality of the output text.
Forinstance, it is not clear what it means for the NLGsystem if the application selects a sentence tem-plate that (in Portuguese) does not have a subjectfield (e.g., ?Please send it now?)
and then attemptsto specify a subject.
A similar conflict arises, forexample,  if the application specifies an action thatis semantically incompatible with the selectedtemplate, in which case the output sentence couldbecome ungrammatical.
In both cases, we believethat more research is still needed.Being currently functional at a prototype levelonly, our system is undergoing a number of im-provements.
First, we are expanding the possiblelexical choices by making use of a thesaurus, andthen we intend to use a language model to handlesynonymy.Second, the mappings from semantic conceptsto surface strings still need to be revised andadapted to the domain (questions and answersabout students?
undergraduate projects) in order todeploy a fully functional application.Finally, template selection needs improvementto allow for a truly minimal input specification inan application-friendly fashion.With these tasks accomplished, we will be ableto attach a surface realization component to ourongoing Q&A project and generate context-sensitive replies to students?
most frequent ques-tions.7 Final RemarksIn the context of  the NAACL-HLT Young Inves-tigators Workshop on Computational Approachesto Languages of the Americas, there are a numberof ways in which our work could benefit from co-operation with researchers in Latin America, andalso help the development of NLP research in thesecountries.At the current stage, our work still relies heavilyon a Portuguese parsed corpus and grammar,which may be seen being of limited interest outsidethe Brazilian NLP research community.
However,given the close relation between Portuguese andother languages spoken in the region (e.g., Spanishand its variations), we believe that it would be arewarding experience to adapt similar languageresources (e.g., sentence templates, phrase gram-mars etc.)
that have been developed elsewhere, anduse these resources to deploy a multilingual NLGapplication to validate our current approach.Beyond the usefulness to the research communi-ties involved, we would expect that this kind of co-operation would be an effective means of sharingcosts and spreading the interest in NLG researchacross the region, and a much-needed motivationfor young researchers to join the field.AcknowledgmentsThe authors acknowledge support by FAPESP andCNPq.
We are also thankful to the anonymous re-viewers of the original submission, and to the or-ganizers of the NAACL-HLT Young InvestigatorsWorkshop on Computational Approaches to Lan-guages of the Americas for the travel award givenfor this presentation.130ReferencesBangalore, S. and O. Rambow (2000) Corpus-basedlexical choice in natural language generation.
Pro-ceedings of the 38th Meeting of the ACL, HongKong, pp.
464-471.Bateman, J.A.
(1997) Enabling technology for multilin-gual natural language generation: the KPML devel-opment environment.
Natural Language Engineering,3(1):15?55.Bick, E. (2000) The parsing system PALAVRAS: au-tomatic grammatical analysis of Portuguese in a con-straint grammar framework.
PhD Thesis, AarhusUniversity.DeVault, David, David Traum and Ron Arstein (2008)Practical Grammar-Based NLG from Examples.
Pro-ceedings of the 5th International Natural LanguageGeneration Conference (INLG-2008) Columbus,USA.Gatt, Albert and Ehud Reiter (2009) SimpleNLG: Arealization engine for practical applications.
Proceed-ings of the European Natural Language Generationworkshop (ENLG-2009.
)Langkilde, Irene (2000) Forest-based statistical sentencegeneration.
Proceedings of the 6th Applied NaturalLanguage Processing Conference and 1st Meeting ofthe North American Chapter of the Association ofComputational Linguistics (ANLP-NAACL?00), pp.170?177.Marciniak, T. and M. Strube (2005) Using an AnnotatedCorpus As a Knowledge Source For Language Gen-eration.
Proceedings of the Corpus Linguistics?05Workshop Using Corpora for NLG (UNNLG-2005),pp.
19-24.McRoy, Susan, Songsak Channarukul and Syed S. Ali(2003) An augmented template-based approach totext realization.
Natural Language Engineering 9 (4)pp.
381?420.
Cambridge University Press.Muniz, M. C., Laporte, E., Nunes, M.G.V (2005)UNITEX-PB, a set of flexible language resources forBrazilian Portuguese.
Proceedings of the III Informa-tion and Language Technology Workshop(TIL-2005).Oh, A. and A. Rudnicky (2000) Stochastic languagegeneration for spoken dialogue systems.
Proceedingsof the ANLP-NAACL 2000 Workshop on Conversa-tional Systems, pp.
27?32.Ratnaparkhi, A.
(2000) Trainable methods for surfacenatural language generation.
Proceedings of ANLP-NAACL 2000, pp.194?201.Reiter, E. (2007) An Architecture for Data-to-Text Sys-tems.
Proceedings of the European Natural LanguageGeneration workshop (ENLG-2007), pp.
97-104.Smets, M., M.Gamon, S.Corston-Oliver and E. Ringger(2003) French Amalgam: A machine-learned sen-tence realization system.
Proceedings of the TALN-2003 Conference, Batz sur-Mer,van Deemter, K., Emiel Krahmer and Mari?t Theune(2005) Real versus template-based NLG: a false op-position?
Computational Linguistics 31(1).Zhong, Huayan and A. J. Stent (2005) Building SurfaceRealizers Automatically from Corpora.
Proceedingsof the Corpus Linguistics?05 Workshop Using Cor-pora for NLG, pp.
49-54.131
