Proceedings of SIGDIAL 2010: the 11th Annual Meeting of the Special Interest Group on Discourse and Dialogue, pages 87?90,The University of Tokyo, September 24-25, 2010. c?2010 Association for Computational LinguisticsDialogue Management Based on Entities and ConstraintsYushi Xu  Stephanie SeneffSpoken Language Systems GroupMIT Computer Science and Artificial Intelligence LaboratoryUnited States{yushixu, seneff}@csail.mit.eduAbstractThis paper introduces a new dialogue man-agement framework for goal-directed conver-sations.
A declarative specification defines thedomain-specific elements and guides the di-alogue manager, which communicates with theknowledge sources to complete the specifiedgoal.
The user is viewed as another knowledgesource.
The dialogue manager finds the nextaction by a mixture of rule-based reasoningand a simple statistical model.
Implementationin the flight-reservation domain demonstratesthat the framework enables the developer toeasily build a conversational dialogue system.1 IntroductionConversational systems can be classified intotwo distinct classes: goal-directed and casualchatting.
For goal-directed systems, the system isusually more ?knowledgeable?
than the user, andit attempts to satisfy user-specified goals.
Thesystem?s conversational strategies seek the mostefficient path to reach closure and end the con-versation (Smith, Hipp, & Biermann, 1995).An essential commonality among differentgoal-directed applications is that, at the end of asuccessful conversation, the system presents theuser with a ?goal?
entity, be it a flight itinerary, aroute path, or a shopping order.
Different con-versations result from different properties of thegoal entities and different constraints set by theknowledge sources.
The properties define thenecessary and/or relevant information, such asflight numbers in the flight itinerary.
Constraintsspecify the means to obtain such information.For examples fields ?source?, ?destination?
and?date?
are required to search for a flight.
Oncethe properties and constraints are known, dialo-gue rules can easily map to dialogue actions.This paper introduces a dialogue managementframework for goal-directed conversation basedon entity and knowledge source specification.The user is viewed as a collaborator with the di-alogue manager, instead of a problem-raiser.
Thedialogue manager follows a set of definitions andconstraints, and eventually realizes the goal enti-ty.
It also incorporates a simple statistical engineto handle certain decisions.2 Related WorkIn recent years, statistical methods have gainedpopularity in dialogue system research.
PartiallyObservable Markov decision processes havebeen the focus of a number of papers (Levin,Pieraccini, & Eckert, 1997; Scheffler & Young,2001; Frampton & Lemon, 2006; Williams &Young, 2007).
These approaches turn the dialo-gue interaction strategy into an optimizationproblem.
The dialogue manager selects actionsprescribed by the policy that maximizes the re-ward function (Lemon & Pietquin, 2007).
Thismachine learning formulation of the problemautomates system development, thus freeing thedevelopers from hand-coded rules.Other researchers have continued research onrule-based frameworks, in part because they areeasier to control and maintain.
One common ap-proach is to allow developers to specify the tasks,either using a conditioned sequential script (Zue,et al, 2000; Seneff, 2002), or using a task hie-rarchy (Hochberg, Kambhatla, & Roukos, 2002).In (Bohus & Rudnicky, 2003)?s work, a tree ofdialogue agents, each of which handles differentdialogue actions, is specified to control the di-alogue progress.
The knowledge has also beenspecified either by first order logic (B?hler &Minker, 2005) or ontology information (Milward& Beveridge, 2004).3 Dialogue ManagerFigure 1 illustrates the architecture of the pro-posed dialogue management framework.
Com-87munication with the dialogue manager (DM) isvia ?E-forms?
(Electronic forms), which consistof language-independent key-value pairs.
Thelanguage understanding and language generationcomponents mediate between the DM and vari-ous knowledge sources (KS), including the user,to interpret the output from the KS and generateinput that the KS can understand.
Each KS han-dles one or more sub-domains.
For example, adate/time KS can resolve a date expression suchas ?next Tuesday?
to a unique date; a flight data-base can provide flight information.
The KSesare provided by the developer.
They can be local(a library) or external (a separate executable).Within this architecture, the user is viewed asa special KS, who understands and speaks a nat-ural language, so that the whole architecture iscompletely DM-centered, as shown in Figure 1.An external language understanding systemparses the original input into an E-form, and anexternal language generation component con-verts the output E-form into the desired naturallanguage.
Each particular communication withthe user is analogous to other communicationswith the various KSes.
The user is alwaysranked the lowest in the priority list of the KSes,i.e., only when other knowledge sources cannotprovide the desired information does the DM tryto ask the user.Figure 1.
System Framework.For example, in the flight reservation system,suppose the DM first tries to determine thesource airport.
If there exists a KS that containsthis user?s home airport information, the DM willadopt it.
If no other KS can provide the informa-tion, the DM asks the user for the departure city.3.1 Entity-Based SpecificationOur framework uses an entity-based declarativedomain specification.
Instead of providing theaction sequence in the domain, the developerprovides the desired form of the goal entity, andthe relationships among all relevant entities.The specification is decomposed into two parts.The first part is the declaration of the knowledgesources.
Each KS may contain one or more sub-domains, and an associated ?nation?
defines thelanguage processing parameters.The second part is the entity type definition.For a particular domain, there is one goal entitytype, and an arbitrary number of other entitytypes, e.g., two entity types are defined in theflight reservation system: ?itinerary?
and ?flight.
?The definition of an entity type consists of a setof members, including their names, types andknowledge domain.
A logical expression statesthe conditions under which the entity can be re-garded as completed; e.g., a completed itinerarymust contain one or more flights.
The entity de-finition can also include optional elements suchas comparative/superlative modifiers or custo-mized command-action and task-action map-pings, described in more detail later.The entity-based specification has an advan-tage over an action-based specification in twoaspects.
First, it is easier to define all the entitiesin a dialogue domain than to list all the possibleactions, so the specification is more compact andreadable.
Secondly, the completion condition andthe KS?s constraints capture the underlying mo-tivation of the dialogue actions.Figure 2.
The Main Loop of the DM.3.2 Dialogue ExecutionSimilar to the Information-State-Update (Larsson& Traum, 2000) idea, the DM maintains an in-ternal state space with all up-to-date informationabout the entities.
It also keeps a task list treewith a root task ?complete goal.?
In task execu-tion, subtasks (child node) and/or subsequent(right sibling node) tasks are issued.
Each timethe left-most leaf task is executed, and when atask is completed, the DM checks all tasks andremoves those that have been rendered obsolete.Ten basic tasks are pre-defined in the DM,including complete_entity, inquire_ks, and someother tasks related to entity manipulation.
Acomplete_entity task evaluates the completionDialogueManagerLanguageGenerationLanguageUnderstandingExternal KS Local KS UserDomain SpecificationE-form inExtractInformationIssue NewTasksRetrieve Left-Most TaskExecute TaskRemoveObsolete TasksPause?E-form outUser Command?YNYN88conditions and issues appropriate tasks if theyare unmet.
An inquire_ks task handles communi-cation with the KSes, and issues subtasks if thequery does not satisfy the constraints.
A defaultaction associated with each task can be replacedby customized task-action mappings if needed.Figure 2 shows the main loop of the DM.
Theprocess loops until a ?pause?
is signaled, whichindicates to await the user?s spoken response.
Anexample will be given in Section 4.3.3 Statistical InferenceTo cope with situations that rules cannot handleeasily, the framework incorporates a simple sta-tistical engine using a Space Vector Model.
It isdesigned only to support inference on specificsmall problems, for example, to decide when toask the user for confirmation of a task.
Modelsare built for each of the inference problems.
Theoutput label of a new data point is computed byweighting the labels of all existing data by theirinverse distances to the new data point.Equations (1) to (3) show the detailed math ofthe computation, where x is the new data pointand dj is the j-th existing data point.
?
is a fadingcoefficient which ranges from 0 and 1.
?, a cor-rection weight, has a higher value for data pointsresulting from manual correction.
?(?)
is 1 whenthe two inputs are equal and 0 otherwise.
sim(x,d) defines the similarity between the new datapoint and the existing data point.
Function dis(?
)indicates the distance for a particular dimension,which is specified by the developer.
The weightfor each dimension wi is proportional to thecount of distinct values of the particular dimen-sion c(Di) and the mutual information betweenthe dimension and the output label.
 = argmax,  ?
,  (1),  = !
"#?
% ?
&,         ?                          )
=  * (2) + ?
-./., . (3)4 Implementation in Flight DomainThe framework has been implemented in theflight reservation domain.
A grammar was usedto parse the user?s input, and a set of generationrules was used to convert the DM?s output E-form into natural language (Seneff, 2002).
Twolocal KSes are utilized: one resolves complexdate and time expressions, and one looks up air-port/city codes.
A local simulated flight DB willbe replaced by a real external one in the future.Figure 3 illustrates the logic of the flight res-ervation domain.
The database has two alterna-tive sets of conjunctive constraints ?destination& source & date?
and ?flight# & date?.
Twoentity types are defined.
The itinerary entity typecontains a list of flights, a number of expectedflights and a price, with completion condition?#flights > 0?.
The flight entity type containsmembers: flight number, date, source, destination,etc., with completion condition ?flight# & date?.Table 1 illustrates dialogue planning.
In theexecution of flight.complete_entity(), the DMdetermines that it needs a flight number accord-ing to the entity?s completion condition.
Howev-er, a destination is required to search the flightDB.
No other KS offers this information, so thesystem turns to the user to ask for the destination.The statistical engine currently supports infe-rence for two problems: whether the execution ofa task requires the user?s confirmation, andwhether the pending list is in focus.Several customized task actions were definedfor the domain.
For example, after adding thefirst flight, a customized task action will auto-matically create a return flight with appropriatesource and destination, unless a one-way trip hasbeen indicated.
The implementation of the cus-tomized task actions required only about 550lines of code.User: I want a flight to Chicagocreate itineraryitinerary.complete_entity()itinerary.add_entity(:flights)create flightflight.complete_entity()flight.fill_attribute(flight#)inquire_ks(flight_db, flight#)flight.fill_attribute(destination)inquire_ks(user, destination)System: What city does the flight leave from?Table 1.
An example of the system's reasoningprocess.
Shaded lines denote statistical decisions.5.
Preliminary EvaluationWe conducted a preliminary evaluation with asimulated flight database and a simulated usermodel.
The statistical inference model wastrained with 210 turns from 18 conversations.
Apersonality-based user simulator creates randomscenarios and simulates user utterances using aprobabilistic template-based method.
In 50 con-versations between the simulated user and theDM, the average number of turns was 14.58,with a high standard deviation of 8.2, due to thevariety of the scenario complexity and personali-ties of the simulator users.
Some simulated users89Figure 3.
Dialogue Logic for the Flight Booking Domain.were intentionally designed to be very uncooper-ative.
The DM was able to handle these situa-tions most of the time.We examined all the simulated dialogues turnby turn.
For a total of 729 turns, the DM re-sponded appropriately 92.2% of the time.
Onethird of the failed turns were due to parse failures.Another third resulted from insufficient tutoring.These situations were not well covered in thetutoring phase, but can be easily fixed through afew more manual corrections.
The rest of theerrors came from various causes.
Some were dueto defects in the simulator.6 Conclusions and Future WorkWe have introduced a framework for goal-baseddialogue planning.
It treats the user as a know-ledge source, so that the entire framework isDM-centered.
A declarative entity-based specifi-cation encodes the domain logic simply andclearly.
Customized task actions handle any do-main-dependent computations, which are kept ata minimum.
A simple statistical engine built intothe framework offers more flexibility.In the future, we will integrate the dialoguemanager into a speech-enabled framework, andbuild spoken dialogue systems for flight reserva-tions and other domains of interest.AcknowledgmentsThis research is funded by Quanta Computers,Inc., through the T-Party project.ReferencesBohus, D., & Rudnicky, A. I.
(2003).
RavenClaw: DialogManagement Using Hierarchical Task Decompositionand an Expectation Agenda.
Proc.
Eurospeech.
Geneva,Switzerland.B?hler, D., & Minker, W. (2005).
A REASONINGCOMPONENT FOR INFORMATION-SEEKING ANDPLANNING DIALOGUES.
Spoken MultimodalHuman-Computer Dialogue in Mobile Environments ,28, 77-91.Frampton, M., & Lemon, O.
(2006).
Learning moreeffective dialogue strategies using limited dialoguemove features.
Proc.
ACL, (pp.
185 - 192 ).
Sidney,Australia.Hochberg, J., Kambhatla, N., & Roukos, S. (2002).
Aflexible framework for developing mixed-initiativedialog systems.
Proc.
the 3rd SIGdial workshop onDiscourse and dialogue , (pp.
60-63).
Philadelphia,Pennsylvania .Larsson, S., & Traum, D. (2000).
Information state anddialogue management in the TRINDI dialogue moveengine toolkit.
Natural Language Engineering , 6 (3-4),323-340.Lemon, O., & Pietquin, O.
(2007).
Machine learning forspoken dialog systems.
Proc.
INTERSPEECH 2007,(pp.
2685?2688 ).
Antwerp, Belgium.Levin, E., Pieraccini, R., & Eckert, W. (1997).
LearningDialogue Strategies within the Markov Decision ProcessFramework.
Proc.
ASRU 1997.
Santa Barbara, USA.Milward, D., & Beveridge, M. (2004).
Ontologies and theStructure of Dialogue.
Proc.
of the Eighth Workshop onthe Semantics and Pragmatics of Dialogue, (pp.
69-76).Barcelona, Spain.Scheffler, K., & Young, S. (2001).
Corpus-based dialoguesimulation for automatic strategy learning andevaluation.
Proc.
NAACL Workshop on Adaptation inDialogue.
Pittsburgh, USA.Seneff, S. (2002).
Response Planning and Generation in theMercury Flight Reservation System.
Computer Speechand Language , 16, 283-312.Smith, R. W., Hipp, D. R., & Biermann, A. W. (1995).
Anarchitecture for voice dialog systems based on prolog-style theorem proving.
Computational Linguistics , 21(3), 281-320.Williams, J. D., & Young, S. (2007).
Partially observableMarkov decision processes for spoken dialog systems.Computer Speech & Language , 21 (2), 393-422.Zue, V., Seneff, S., Glass, J., Polifroni, J., Pao, C., Hazen,T.
J., et al (2000).
JUPITER: a telephone-basedconversational interface for weather information.
IEEETransactions on Speech and Audio Processing , 8 (1),85-96.90
