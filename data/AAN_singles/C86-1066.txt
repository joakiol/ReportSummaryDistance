A Dictionary and Morphological Analyser for EnglishG.J.
RussellS.G.
PuhnanComputer Laboratory,University of Cambridge1.
Int roduct ion and Overv iewThis paper describes the current state of a three-yearproject aimed at the development of software for use inhandling large quantities of dictionary information withinnatural language processing systems.
1 The project wasaccepted for funding by SERC/Alvey commencing illJune 1984, and is being carried out by Graeme Ritchieand Alan Black at the University of Edinburgh andSteve Puhnan and Graham Russell at the University ofCambridge.
It is one of three closely related projectsfunded under the Alvey IKBS Programme (NaturalLanguage Tlleme); a parser is under development atEdinburgh by Henry Thompson and John Phillips, and asentence grammar is being devised by Ted Briscoe andClare Grover at Lancaster and Bran Boguraev and JohnCarroll at Cambridge.
It is intended that the softwareand rules produced by all three projects will be directlycompatible and capable of functioning in an integratedsystem.Realistic and useful natural  language processing sys-tems such as database front-ends require large numbersof words, together with associated syntactic and semanticInformation, to be efficiently stored in machine-readableform.
Our system is Intended to provide the necessaryfacilities, being designed to store a large number (at least10,000) of words and to perform morphological analysison them, covering both Inflectional and derlvatlonal mor-phology.
In pursuit of these objectives, the dictionaryassociates with each word information concerning itsmorphosyntactlc properties.
Users are free to modify thesystem In a number of ways; they may add to the lexi-cal entries Lisp functions that perform semantic manipu-latlons, and tailor the dictionary to the particular subjectmatter they are interested in (different databases, forexample).
It Is also hoped that the system is generalenough to be of use to linguists wishing to Investigatethe morphology of English and other languages.
Con-tents of the basle data files may be altered or replaced:1.
A 'Word Grammar' file contains rules assigning inter-nal structure to complex words,2.
A 'Lexicon' file holds the morpheme entries whichinclude syntactic and other Information associatedwith stems and affixes.3.
A 'Spelling Rules' file contains rules governing permis-sible correspondences between the form of morphemeslisted in the lextcon and complex words consisting ofsequences of these morphemes.Once these data flies have been prepared, they are com-piled using a number of pre-processtng functions thatoperate to produce a set of output files.
Theseconstitute a ful ly  expanded and cross-Indexed ictionarywhich can then be accessed from within LISP.The process of morphological analysis consists of pars-lng a sequence of Input morphemes with respect to theword grammar, It Is Implemented as an active chartparser (Thompson & Rltchle (1984)), and builds a struc-ture in the form of a tree in which each node has two1 This work is supported by SERC/AIvey grant numberGR/C/79114.G.D.
RttchleA.W.
BlackDepartment ofArtificial Intelligence,University of Edinburghassociated values, a morphosyntactlc category, and a ruleIdentifier.The system is written in FRANZ LISP (opus 42.15)running under Berkeley 4.2 Unix.
Future developmentswill concentrate on improving its efficiency, in particularby restructuring the code.
We also hope to produce animplementation in C, which should offer a fasterresponse time.2.
L inguist ic AssumptionsThe grammatical framework underlying the linguisticaspects of the system is that of Generalized PhraseStructure Grammar, as set out in Gazdar et al (1985).Morphological categories employed here correspond to thesyntactic categories in that work, and the type of syn-tactic information present in dictionary entries isintended to facilitate the use of the system as part of amore general GPSG-based program.
In developing ourprototype, we have adopted many of the proposals madein that work.
To that extent, certain assumptions abouta correct analysis of English sentence syntax are built into the lexlcal entries, but this should not preclude adap-tation by users to suit different analyses.Following what has become a general assumption insyntactic theory, we take the major lexlcal categories tobe partitioned into four classes by the two binary-valuedfeatures \ [+ N\] and \[:k V\].
The major lexlcat categorieshave phrasal projections; these are distinguished fromtheir lexlcal counterparts by their value for the featureBAR.
Lexlcal categories have the value 0, and phrasalcategories (including sentences) have the value 1 or 2.Thus, a Noun Phrase is of the category:((V -) (N +) (BAR 2))In our analysis, 'bound morphemes', that is to sayprefxes and suffixes, are distinguished from others bytheir BAR specification; tile suffix ing is the sole memberof the category:((V 4-) (N -) (VFORM ING) (BAR -1))As in other GPSG-based work, our analysis encodes thesubcategorlzational prbpertles of lexlcal Items in the valueof a feature SUBCAT.
Transitive verbs such as devourare specified as (SUBCAT NP), and Intransitives uch aselapse as (SUBCAT NULL).As an example from the current analysis of how thesystem can operate to produce well-formed words, con-sider the familiar fact of English morphology that noword may contain more than one imqection.
The wordgrammar must permit both walked and walking, but notwalkinged.
This is achiev~xi by restricting the distribu-tion of inflectional suffixes so that they attach to non-Inflected stems only.
A general statement of this typeof restriction is made in terms of a feature INFL: stemsspecified as (INFL +) may take an lnflecUonal sulfix,while those specified as (INFL ~) may not.
The STEMfeature described in section 4 provides one means ofenforcing correct stem-affix combinations; if the suffixesed and ing are specified with (STEM ((INFL +))), they277will attach only to categories which Include thespecification (INFL +).
Walk, as a regular verb, is sospecified; wallced and waltcing are therefore accepted.
Ed,ing, other tnfectlonal suffixes, and irregular (i.e.unlnflectable) words, however, are specified as (INFL -).Our grammar assigns a binary structure to the words inquestion.
In order for this method to prevent e.g.
walk-inged, the stem walking must also bear the (INFL -)specification.
This it does, since we regard sutfixes asbeing the head of a word, and as contributing to thecategorial content of the word as a whole.
If the INFLspecification of the suf~x is copied into the mothercategory, the STEM specification of a further suffix willnot be satisfied.
See section 4 for more discussion ofthese matters.3.
The LexiconThe lexicon itself consists of a sequence of entries, eachin the form of a Lisp s-expression.
An entry has fiveelements: (1) and (ii) the head word, in its written formand in a phonological transcription, (ill) a 'syntacticfield', (iv) a 'semantic field', and (v) a 'user field'.
Thesemantic field has been provided as a facility for users,and any Lisp s-expression can be inserted here.
Nosignificant semantic information is present in our entries,beyond the fact that e.g.
better and best are related inmeaning to good.Similarly, the user feld Is unexploited, being occupiedin all cases by the atom 'nil'.
It serves primarily as aplace-holder, in that, while it is desirable to maintainthe possibility for users to include in an entry whateveradditional information they desire, the form which thatInformation might take in practice is clearly not predict-able.The syntax field consists of a syntactic category, asdefined by Gazdar et al (1985), i.e.
a set of feature-value pairs.
Some of these are relevant only to theworkings of the word grammar, and may thus beIgnored by other components In an integrated naturallanguage processing system.
Their purpose is to controlthe distribution of morphemes in complex words, asdescribed in the following section.The content of a syntax field is often at least par-tlally predictable.
This fact allows us to employ as anaid to users wishing to write their own dictionary ruleswhich add information to the lexicon during the compi-lation process.
Recall that, in our analysis of English,the lnflectablllty of a word is governed by the value inthat word's category for INFL.
Completion Rules (CRs)can be written that will add the specification ( INFL- )to any entry already Including (PLU +) (for e.g.
men),(AFORM ER) (for e.g.
worse), (VFORM ING), etc,, thusremoving the need to state Individually that a givenword cannot be inflected.A second means of reducing the amount of prepara-tory work is provided in the form of MultiplicationRules (MRs).
Whereas CRs add further specifications toa single entry, MRs have the effect of Increasing thenumber of entries In some principled way.
One applica-tion of MRs Is to express the fact that nouns and adjec-tlves do not subcategorize for obligatory complements.A MR can be written which, for each entry containingthe specification (N +) and some non-NULL value forSUBCAT, produces a copy of that entry where the SUB-CAT specification is replaced by (SUBCAT NULL).The lexicon complies Into two files, one holding mor-phemes stored in a tree-shaped structure (cf.
Thorne et278al.
(1968)), and the other holding the expanded entriesrelating to them.
The comptlatlon of a lexicon can takea considerable amount of time; our prototype incorporatesa lexicon with approximately 3500 entries, which com-plies In approximately ninety minutes.4.
The Word GrammarThe internal structure of words is handled by aunification feature grammar with rules of the form:mother -~ daughter 1 daughter 2 ...where 'mother', 'daughtcrl', etc.
are categories.
A rulewhich adds the plural morpheme to a noun might begiven as shown below:((BAR 0) (V -) (N +) (PLU +) (INFL -)) =>((BAR 0) (V -) (N +) (INFL +))((BAR -1) (V -) (N 4-) (PLU 4-) (INFL -))The system provides two methods of writing rules in amore general form; variables and feature-passing conven-tions.In our grammar, the category and inflectabllity of asuffixed word are determined by the category andlnflectablllty of the suffix; in the rule below, ALPHA,BETA, and GAMMA are variables ranging over the setof values {+, -}:((V ALPHA)(N BETA)(INFL GAMMA)(BAR 0)) =>((BAR 0))((V ALPHA)(N BETA)(INFL GAMMA)(BAR -1))Since variables are interpreted consistently throughout arule, the mother category and suffix will be identical Intheir specifications for N, V and INFL.As an alternative to variables, feature passing conven-tions are also available.
These relate categories in whatGazdar et al (1.985) term 'local trees', i.e.
sections ofmorphological structure consisting of a mother categoryand all of Its immediate daughters.
The conventionsrefer to 'pre-lnstantlatlon' features; these are featurespresent in the categories mentioned In the relevant rule.
'Extension' and 'unification' are meant In the sense ofGazdar et al (1985), q.v.The Word-Head Convention:After lnstantlatlon, the set of WHead features in themother is the unification of the pre-lnstantlatlonWHead features of the Mother with the pre-lnstantlatlon WHead features of the Rlghtdaughter.This convention is analogous to the simplest case of theHead Feature Convention in Gazdar et at.
(1985).Although there is no formal notion of 'head' in the sys-tem, this convention embodies the Implicit claim that thehead in a local tree is always the right daughter.
If thedaughters are a prefix and a stem (as in e.g.
re-apply),the WHead features of the stem are passed up to themother.
Features encoding morphosyntactic category canbe declared as members of the WHead set, and re-applyis then of the same category as, and shares varioussentence-level syntactic properties with, apply.
If thedaughters are a stem and a suffix, the category of themother Is determined not by the stem, but rather by thesuffix.
For example, possible and ity may be combined toform possibility, whose 'nountness' is due to the categoryof the suffix.The Word-Daughter Convention:(a) If any WDaughter features exist on the Right-daughter then the WDaughter features on theMother are the unification of the pre-lnstantlaUonWDaughter features on the Mother with the pre-lnstantlatlon WDaughter featm-es on the Right-.daughter.
(b) If no WDaughter features exist on the Right-daughter then the WDaughter features on theMother are the unification of the pre-lnstantiatlonWDaughter features on the Mother with the pre-lnstantlation WDaughter features on the Left-daughter.The subcategorlzation class of a word remains constantunder Inflection, but is likely to be changed by theattachment of a derlvatlonal suffix.
Moreover, the sub-categorization of a prefixed word is the same as that ofits stem.
The WDaughter convention is designed toreflect these facts by enforcing a feature correspondencebetween one of the daughters and the mother.
Whenthe feature set WDaughter is defined as including thesubcategorlzation feature SUBCAT, the convention resultsin configuratkms such as:((SUBCAT NP)) ((SUBCAT NP))((V +)(N +\]) ((SUBCAT NP))((SUBCAT NP)) ((VFORM ING))which show the relevant feature specifications in localtrees arising from suffixatton of an adjective with +ize toproduce a transitive verb and suffixatlon of a transitiveverb with +ing to produce a present participle.The Word-Sister Convention:When one daughter is specified for STEM, thecategory of the other daughter must be an extensionof the value of STEM.The purpose of this third convention is to allow thesubcategorization f affixes with respect to the type ofstem they may attach to.
The behavlour of affixes thatattach to more than one category can be handled natur-ally by giving them a suitable specification for STEM.If it is desired to have anti- attached to both nouns andadjectives, for example, the specification (STEM ((N +)))will have that effect, since both adjectives and nouns areextensions of the category ((N +)1.The user can define the sets WHead and WDaughteras he wishes, or, by leaving them undefined, avoid theireffects altogether.
The feature STEM is built in, andneed not be defined.
The effects of the Word-SisterConvention can be modified by changing the STEMspecifications ill the lexlcal entries, and avoided byomitting them.5.
The Spell ing RulesThe rules are based on the work of Koskennlemt (1983a,1983b, Karttunen 1983), though their application here issolely to the question of 'morphographemlcs'; the moregeneral morphological effects of Koskenniemi's rules areproduced dlffenmtly.
The current version of the systemcontains a compiler allowing the rules to be written in ahigh level notation based on KoskennIemi (1985).
Anynumber of spelling rules can be employed, though oursystem has fifleen.
They are compiled during the gen-eral dictionary pre-processlng stage into deterministicfinite state transducers, of which one tape represents thelexlcal form and the other the surface form.The following rule describes the process by which anadditional e is Inserted when some nouns are suffixedwith the plural morpheme +s:Epenthesls+:e <=~> { < s:s h:h > s:s x:x z:z } ---  s:sor < c:c h:h2> .... s:sThe epenthests rule states that e must be inserted at amorpheme boundary if an(:\[ only if the boundary has toits left sh, s, x, z or eh and to Its right s. TheInterpretation of the rule Is simple; the character pair('lexical character:surface haracter') to the left of thearrow specifies the change that takes place between thecontexts (again stated in character pairs) given to theright of the arrow.
Braces ('{','}') Indicate disjunctionand angled brackets Indicate a sequence, Alternativecontexts may be specified using the word 'or'.
IJexlcaland surface strings of unequal length can be matched byusing the null character '0', and special characters maybe defined and used in rules, for example to cover theset of alphabetic haracters representing vowels.The spelling rules are able to match any pair of char-acter strings.
It would for example be possible toanalyse the suppletlve went as a surface formcorresponding to the lexlcal form go+ed.
In this case,four rules would be needed to effect the change, and abetter solution is to list went separately In the lexicon.in practice, the choice between treating this type ofalternation dynamically, with morphological and spellingrules, and statically, by exploiting the lexicon directly,depends on the user's Idea of which is the more elegantsolution.
While elegance may be in the eye of thebeholder, computational efficiency is mffortunately not.I\[ will generally be more efficient to list a word In thelexicon titan to add spelling or morphological rulesspecific to small number of cases.Rel'el'ellCCSGazdar, G., E. Klein, G.K. Pullmn, and I.A.
Sag (1985)Generalized Phrase Structure Grammar.
Oxford:Blackwells.Karttunen, L. (1983) "KIM:MO - A General Morphologi-cal Processor", in Texas Linguistic Forum 22, 165 -186.
Department of Linguistics, University of Texas,Austin, Texas.Koskennieml, K. (1983a) "Two-level model for morpho-logical analysis", in Proceedings of the Eighth Interna-tiona2 Joint Conference on AzTificial Intelligence,Karlsruhe, 683 - 685.Koskennleml, K. (1983b) Two-level Morphology: a generalcomputational model for word-form recognition and pro-duction, Publication No.
11, University of tIelslnkl,Finland.Koskennteml, K. (1985) "Compilation of Automata fromTwo-level Rules", talk given at the Workshop onFinite-State Morphoiogy, CSLI, Stanford, July, 1985.Thompson, IL and G.D. Rltchte (19841 "ImplementingNatural Language Parsers", in T. O'Shea and M. Elsen+stadt (eds.)
Az~tificial Intelligence: Tools, Techniquesand Applications.
New York: Harper and Row.Thorne, J.P., P. Bratley, and, It.
Dewar (1968) "The syn-tactic analysis of English by machine", in D.
Mlchie(ed.)
Machine Intelligence 3.
Edinburgh: EdinburghUniversity Press.279
