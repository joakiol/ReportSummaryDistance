Proceedings of the 47th Annual Meeting of the ACL and the 4th IJCNLP of the AFNLP, pages 28?36,Suntec, Singapore, 2-7 August 2009. c?2009 ACL and AFNLPUnsupervised Argument Identification for Semantic Role LabelingOmri Abend1 Roi Reichart2 Ari Rappoport11Institute of Computer Science , 2ICNCHebrew University of Jerusalem{omria01|roiri|arir}@cs.huji.ac.ilAbstractThe task of Semantic Role Labeling(SRL) is often divided into two sub-tasks:verb argument identification, and argu-ment classification.
Current SRL algo-rithms show lower results on the identifi-cation sub-task.
Moreover, most SRL al-gorithms are supervised, relying on largeamounts of manually created data.
Inthis paper we present an unsupervised al-gorithm for identifying verb arguments,where the only type of annotation requiredis POS tagging.
The algorithm makes useof a fully unsupervised syntactic parser,using its output in order to detect clausesand gather candidate argument colloca-tion statistics.
We evaluate our algorithmon PropBank10, achieving a precision of56%, as opposed to 47% of a strong base-line.
We also obtain an 8% increase inprecision for a Spanish corpus.
This isthe first paper that tackles unsupervisedverb argument identification without usingmanually encoded rules or extensive lexi-cal or syntactic resources.1 IntroductionSemantic Role Labeling (SRL) is a major NLPtask, providing a shallow sentence-level semanticanalysis.
SRL aims at identifying the relations be-tween the predicates (usually, verbs) in the sen-tence and their associated arguments.The SRL task is often viewed as consisting oftwo parts: argument identification (ARGID) and ar-gument classification.
The former aims at identi-fying the arguments of a given predicate presentin the sentence, while the latter determines thetype of relation that holds between the identi-fied arguments and their corresponding predicates.The division into two sub-tasks is justified bythe fact that they are best addressed using differ-ent feature sets (Pradhan et al, 2005).
Perfor-mance in the ARGID stage is a serious bottleneckfor general SRL performance, since only about81% of the arguments are identified, while about95% of the identified arguments are labeled cor-rectly (Ma`rquez et al, 2008).SRL is a complex task, which is reflected by thealgorithms used to address it.
A standard SRL al-gorithm requires thousands to dozens of thousandssentences annotated with POS tags, syntactic an-notation and SRL annotation.
Current algorithmsshow impressive results but only for languages anddomains where plenty of annotated data is avail-able, e.g., English newspaper texts (see Section 2).Results are markedly lower when testing is on adomain wider than the training one, even in En-glish (see the WSJ-Brown results in (Pradhan etal., 2008)).Only a small number of works that do not re-quire manually labeled SRL training data havebeen done (Swier and Stevenson, 2004; Swier andStevenson, 2005; Grenager and Manning, 2006).These papers have replaced this data with theVerbNet (Kipper et al, 2000) lexical resource ora set of manually written rules and supervisedparsers.A potential answer to the SRL training data bot-tleneck are unsupervised SRL models that requirelittle to no manual effort for their training.
Theiroutput can be used either by itself, or as trainingmaterial for modern supervised SRL algorithms.In this paper we present an algorithm for unsu-pervised argument identification.
The only type ofannotation required by our algorithm is POS tag-28ging, which needs relatively little manual effort.The algorithm consists of two stages.
As pre-processing, we use a fully unsupervised parser toparse each sentence.
Initially, the set of possi-ble arguments for a given verb consists of all theconstituents in the parse tree that do not containthat predicate.
The first stage of the algorithmattempts to detect the minimal clause in the sen-tence that contains the predicate in question.
Us-ing this information, it further reduces the possiblearguments only to those contained in the minimalclause, and further prunes them according to theirposition in the parse tree.
In the second stage weuse pointwise mutual information to estimate thecollocation strength between the arguments andthe predicate, and use it to filter out instances ofweakly collocating predicate argument pairs.We use two measures to evaluate the perfor-mance of our algorithm, precision and F-score.Precision reflects the algorithm?s applicability forcreating training data to be used by supervisedSRL models, while the standard SRL F-score mea-sures the model?s performance when used by it-self.
The first stage of our algorithm is shown tooutperform a strong baseline both in terms of F-score and of precision.
The second stage is shownto increase precision while maintaining a reason-able recall.We evaluated our model on sections 2-21 ofPropbank.
As is customary in unsupervised pars-ing work (e.g.
(Seginer, 2007)), we bounded sen-tence length by 10 (excluding punctuation).
Ourfirst stage obtained a precision of 52.8%, which ismore than 6% improvement over the baseline.
Oursecond stage improved precision to nearly 56%, a9.3% improvement over the baseline.
In addition,we carried out experiments on Spanish (on sen-tences of length bounded by 15, excluding punctu-ation), achieving an increase of over 7.5% in pre-cision over the baseline.
Our algorithm increasesF?score as well, showing an 1.8% improvementover the baseline in English and a 2.2% improve-ment in Spanish.Section 2 reviews related work.
In Section 3 wedetail our algorithm.
Sections 4 and 5 describe theexperimental setup and results.2 Related WorkThe advance of machine learning based ap-proaches in this field owes to the usage of largescale annotated corpora.
English is the most stud-ied language, using the FrameNet (FN) (Baker etal., 1998) and PropBank (PB) (Palmer et al, 2005)resources.
PB is a corpus well suited for evalu-ation, since it annotates every non-auxiliary verbin a real corpus (the WSJ sections of the PennTreebank).
PB is a standard corpus for SRL eval-uation and was used in the CoNLL SRL sharedtasks of 2004 (Carreras and Ma`rquez, 2004) and2005 (Carreras and Ma`rquez, 2005).Most work on SRL has been supervised, requir-ing dozens of thousands of SRL annotated train-ing sentences.
In addition, most models assumethat a syntactic representation of the sentence isgiven, commonly in the form of a parse tree, a de-pendency structure or a shallow parse.
Obtainingthese is quite costly in terms of required humanannotation.The first work to tackle SRL as an indepen-dent task is (Gildea and Jurafsky, 2002), whichpresented a supervised model trained and evalu-ated on FrameNet.
The CoNLL shared tasks of2004 and 2005 were devoted to SRL, and stud-ied the influence of different syntactic annotationsand domain changes on SRL results.
Computa-tional Linguistics has recently published a specialissue on the task (Ma`rquez et al, 2008), whichpresents state-of-the-art results and surveys the lat-est achievements and challenges in the field.Most approaches to the task use a multi-levelapproach, separating the task to an ARGID and anargument classification sub-tasks.
They then usethe unlabeled argument structure (without the se-mantic roles) as training data for the ARGID stageand the entire data (perhaps with other features)for the classification stage.
Better performanceis achieved on the classification, where state-of-the-art supervised approaches achieve about81% F-score on the in-domain identification task,of which about 95% are later labeled correctly(Ma`rquez et al, 2008).There have been several exceptions to the stan-dard architecture described in the last paragraph.One suggestion poses the problem of SRL as a se-quential tagging of words, training an SVM clas-sifier to determine for each word whether it is in-side, outside or in the beginning of an argument(Hacioglu and Ward, 2003).
Other works have in-tegrated argument classification and identificationinto one step (Collobert and Weston, 2007), whileothers went further and combined the former twoalong with parsing into a single model (Musillo29and Merlo, 2006).Work on less supervised methods has beenscarce.
Swier and Stevenson (2004) and Swierand Stevenson (2005) presented the first modelthat does not use an SRL annotated corpus.
How-ever, they utilize the extensive verb lexicon Verb-Net, which lists the possible argument structuresallowable for each verb, and supervised syntac-tic tools.
Using VerbNet alng with the output ofa rule-based chunker (in 2004) and a supervisedsyntactic parser (in 2005), they spot instances inthe corpus that are very similar to the syntacticpatterns listed in VerbNet.
They then use these asseed for a bootstrapping algorithm, which conse-quently identifies the verb arguments in the corpusand assigns their semantic roles.Another less supervised work is thatof (Grenager and Manning, 2006), which presentsa Bayesian network model for the argumentstructure of a sentence.
They use EM to learnthe model?s parameters from unannotated data,and use this model to tag a test corpus.
However,ARGID was not the task of that work, which dealtsolely with argument classification.
ARGID wasperformed by manually-created rules, requiring asupervised or manual syntactic annotation of thecorpus to be annotated.The three works above are relevant but incom-parable to our work, due to the extensive amountof supervision (namely, VerbNet and a rule-basedor supervised syntactic system) they used, both indetecting the syntactic structure and in detectingthe arguments.Work has been carried out in a few other lan-guages besides English.
Chinese has been studiedin (Xue, 2008).
Experiments on Catalan and Span-ish were done in SemEval 2007 (Ma`rquez et al,2007) with two participating systems.
Attemptsto compile corpora for German (Burdchardt et al,2006) and Arabic (Diab et al, 2008) are also un-derway.
The small number of languages for whichextensive SRL annotated data exists reflects theconsiderable human effort required for such en-deavors.Some SRL works have tried to use unannotateddata to improve the performance of a base su-pervised model.
Methods used include bootstrap-ping approaches (Gildea and Jurafsky, 2002; Kateand Mooney, 2007), where large unannotated cor-pora were tagged with SRL annotation, later tobe used to retrain the SRL model.
Another ap-proach used similarity measures either betweenverbs (Gordon and Swanson, 2007) or betweennouns (Gildea and Jurafsky, 2002) to overcomelexical sparsity.
These measures were estimatedusing statistics gathered from corpora augmentingthe model?s training data, and were then utilizedto generalize across similar verbs or similar argu-ments.Attempts to substitute full constituency pars-ing by other sources of syntactic information havebeen carried out in the SRL community.
Sugges-tions include posing SRL as a sequence labelingproblem (Ma`rquez et al, 2005) or as an edge tag-ging problem in a dependency representation (Ha-cioglu, 2004).
Punyakanok et al (2008) providea detailed comparison between the impact of us-ing shallow vs. full constituency syntactic infor-mation in an English SRL system.
Their resultsclearly demonstrate the advantage of using full an-notation.The identification of arguments has also beencarried out in the context of automatic subcatego-rization frame acquisition.
Notable examples in-clude (Manning, 1993; Briscoe and Carroll, 1997;Korhonen, 2002) who all used statistical hypothe-sis testing to filter a parser?s output for arguments,with the goal of compiling verb subcategorizationlexicons.
However, these works differ from oursas they attempt to characterize the behavior of averb type, by collecting statistics from various in-stances of that verb, and not to determine whichare the arguments of specific verb instances.The algorithm presented in this paper performsunsupervised clause detection as an intermedi-ate step towards argument identification.
Super-vised clause detection was also tackled as a sepa-rate task, notably in the CoNLL 2001 shared task(Tjong Kim Sang and De`jean, 2001).
Clause in-formation has been applied to accelerating a syn-tactic parser (Glaysher and Moldovan, 2006).3 AlgorithmIn this section we describe our algorithm.
It con-sists of two stages, each of which reduces the setof argument candidates, which a-priori contains allconsecutive sequences of words that do not con-tain the predicate in question.3.1 Algorithm overviewAs pre-processing, we use an unsupervised parserthat generates an unlabeled parse tree for each sen-30tence (Seginer, 2007).
This parser is unique in thatit is able to induce a bracketing (unlabeled pars-ing) from raw text (without even using POS tags)achieving state-of-the-art results.
Since our algo-rithm uses millions to tens of millions sentences,we must use very fast tools.
The parser?s highspeed (thousands of words per second) enables usto process these large amounts of data.The only type of supervised annotation weuse is POS tagging.
We use the taggers MX-POST (Ratnaparkhi, 1996) for English and Tree-Tagger (Schmid, 1994) for Spanish, to obtain POStags for our model.The first stage of our algorithm uses linguisti-cally motivated considerations to reduce the set ofpossible arguments.
It does so by confining the setof argument candidates only to those constituentswhich obey the following two restrictions.
First,they should be contained in the minimal clausecontaining the predicate.
Second, they should bek-th degree cousins of the predicate in the parsetree.
We propose a novel algorithm for clause de-tection and use its output to determine which ofthe constituents obey these two restrictions.The second stage of the algorithm uses point-wise mutual information to rule out constituentsthat appear to be weakly collocating with the pred-icate in question.
Since a predicate greatly re-stricts the type of arguments with which it mayappear (this is often referred to as ?selectional re-strictions?
), we expect it to have certain character-istic arguments with which it is likely to collocate.3.2 Clause detection stageThe main idea behind this stage is the observationthat most of the arguments of a predicate are con-tained within the minimal clause that contains thepredicate.
We tested this on our development data?
section 24 of the WSJ PTB, where we saw that86% of the arguments that are also constituents(in the gold standard parse) were indeed containedin that minimal clause (as defined by the tree la-bel types in the gold standard parse that denotea clause, e.g., S, SBAR).
Since we are not pro-vided with clause annotation (or any label), we at-tempted to detect them in an unsupervised manner.Our algorithm attempts to find sub-trees within theparse tree, whose structure resembles the structureof a full sentence.
This approximates the notion ofa clause.LLDTTheNNSmaterialsLLINinLDTeachNNsetLVBPreachLLINaboutCD90NNSstudentsLL LL LVBP LLVBP LFigure 1: An example of an unlabeled POS taggedparse tree.
The middle tree is the ST of ?reach?with the root as the encoded ancestor.
The bot-tom one is the ST with its parent as the encodedancestor.Statistics gathering.
In order to detect whichof the verb?s ancestors is the minimal clause, wescore each of the ancestors and select the one thatmaximizes the score.
We represent each ancestorusing its Spinal Tree (ST ).
The ST of a givenverb?s ancestor is obtained by replacing all theconstituents that do not contain the verb by a leafhaving a label.
This effectively encodes all the k-th degree cousins of the verb (for every k).
Theleaf labels are either the word?s POS in case theconstituent is a leaf, or the generic label ?L?
de-noting a non-leaf.
See Figure 1 for an example.In this stage we collect statistics of the occur-rences of ST s in a large corpus.
For every ST inthe corpus, we count the number of times it oc-curs in a form we consider to be a clause (positiveexamples), and the number of times it appears inother forms (negative examples).Positive examples are divided into two maintypes.
First, when the ST encodes the root an-cestor (as in the middle tree of Figure 1); second,when the ancestor complies to a clause lexico-syntactic pattern.
In many languages there is asmall set of lexico-syntactic patterns that mark aclause, e.g.
the English ?that?, the German ?dass?and the Spanish ?que?.
The patterns which wereused in our experiments are shown in Figure 2.For each verb instance, we traverse over its an-31EnglishTO + VB.
The constituent starts with ?to?
followed bya verb in infinitive form.WP.
The constituent is preceded by a Wh-pronoun.That.
The constituent is preceded by a ?that?
markedby an ?IN?
POS tag indicating that it is a subordinatingconjunction.SpanishCQUE.
The constituent is preceded by a word with thePOS ?CQUE?
which denotes the word ?que?
as a con-junction.INT.
The constituent is preceded by a word with thePOS ?INT?
which denotes an interrogative pronoun.CSUB.
The constituent is preceded by a word with oneof the POSs ?CSUBF?, ?CSUBI?
or ?CSUBX?, whichdenote a subordinating conjunction.Figure 2: The set of lexico-syntactic patterns thatmark clauses which were used by our model.cestors from top to bottom.
For each of them weupdate the following counters: sentence(ST ) forthe root ancestor?s ST , patterni(ST ) for the onescomplying to the i-th lexico-syntactic pattern andnegative(ST ) for the other ancestors1.Clause detection.
At test time, when detectingthe minimal clause of a verb instance, we usethe statistics collected in the previous stage.
De-note the ancestors of the verb with A1 .
.
.
Am.For each of them, we calculate clause(STAj )and total(STAj ).
clause(STAj ) is the sumof sentence(STAj ) and patterni(STAj ) if thisancestor complies to the i-th pattern (if thereis no such pattern, clause(STAj ) is equal tosentence(STAj )).
total(STAj ) is the sum ofclause(STAj ) and negative(STAj ).The selected ancestor is given by:(1) Amax = argmaxAjclause(STAj )total(STAj )An ST whose total(ST ) is less than a smallthreshold2 is not considered a candidate to be theminimal clause, since its statistics may be un-reliable.
In case of a tie, we choose the low-est constituent that obtained the maximal score.1If while traversing the tree, we encounter an ancestorwhose first word is preceded by a coordinating conjunction(marked by the POS tag ?CC?
), we refrain from performingany additional counter updates.
Structures containing coor-dinating conjunctions tend not to obey our lexico-syntacticrules.2We used 4 per million sentences, derived from develop-ment data.If there is only one verb in the sentence3 or ifclause(STAj ) = 0 for every 1 ?
j ?
m, wechoose the top level constituent by default to bethe minimal clause containing the verb.
Other-wise, the minimal clause is defined to be the yieldof the selected ancestor.Argument identification.
For each predicate inthe corpus, its argument candidates are now de-fined to be the constituents contained in the min-imal clause containing the predicate.
However,these constituents may be (and are) nested withineach other, violating a major restriction on SRLarguments.
Hence we now prune our set, by keep-ing only the siblings of all of the verb?s ancestors,as is common in supervised SRL (Xue and Palmer,2004).3.3 Using collocationsWe use the following observation to filter out somesuperfluous argument candidates: since the argu-ments of a predicate many times bear a semanticconnection with that predicate, they consequentlytend to collocate with it.We collect collocation statistics from a largecorpus, which we annotate with parse trees andPOS tags.
We mark arguments using the argu-ment detection algorithm described in the previoustwo sections, and extract all (predicate, argument)pairs appearing in the corpus.
Recall that for eachsentence, the arguments are a subset of the con-stituents in the parse tree.We use two representations of an argument: oneis the POS tag sequence of the terminals containedin the argument, the other is its head word4.
Thepredicate is represented as the conjunction of itslemma with its POS tag.Denote the number of times a predicate xappeared with an argument y by nxy.
Denotethe total number of (predicate, argument) pairsby N .
Using these notations, we define thefollowing quantities: nx = ?ynxy, ny = ?xnxy,p(x) = nxN , p(y) =nyN and p(x, y) =nxyN .
Thepointwise mutual information of x and y is thengiven by:3In this case, every argument in the sentence must be re-lated to that verb.4Since we do not have syntactic labels, we use an approx-imate notion.
For English we use the Bikel parser defaulthead word rules (Bikel, 2004).
For Spanish, we use the left-most word.32(2) PMI(x, y) = log p(x,y)p(x)?p(y) = lognxy(nx?ny)/NPMI effectively measures the ratio betweenthe number of times x and y appeared together andthe number of times they were expected to appear,had they been independent.At test time, when an (x, y) pair is observed, wecheck if PMI(x, y), computed on the large cor-pus, is lower than a threshold ?
for either of x?srepresentations.
If this holds, for at least one rep-resentation, we prune all instances of that (x, y)pair.
The parameter ?
may be selected differentlyfor each of the argument representations.In order to avoid using unreliable statistics,we apply this for a given pair only if nx?nyN >r, for some parameter r. That is, we considerPMI(x, y) to be reliable, only if the denomina-tor in equation (2) is sufficiently large.4 Experimental SetupCorpora.
We used the PropBank corpus for de-velopment and for evaluation on English.
Section24 was used for the development of our model,and sections 2 to 21 were used as our test data.The free parameters of the collocation extractionphase were tuned on the development data.
Fol-lowing the unsupervised parsing literature, multi-ple brackets and brackets covering a single wordare omitted.
We exclude punctuation accordingto the scheme of (Klein, 2005).
As is customaryin unsupervised parsing (e.g.
(Seginer, 2007)), webounded the lengths of the sentences in the cor-pus to be at most 10 (excluding punctuation).
Thisresults in 207 sentences in the development data,containing a total of 132 different verbs and 173verb instances (of the non-auxiliary verbs in theSRL task, see ?evaluation?
below) having 403 ar-guments.
The test data has 6007 sentences con-taining 1008 different verbs and 5130 verb in-stances (as above) having 12436 arguments.Our algorithm requires large amounts of datato gather argument structure and collocation pat-terns.
For the statistics gathering phase of theclause detection algorithm, we used 4.5M sen-tences of the NANC (Graff, 1995) corpus, bound-ing their length in the same manner.
In orderto extract collocations, we used 2M sentencesfrom the British National Corpus (Burnard, 2000)and about 29M sentences from the Dmoz cor-pus (Gabrilovich and Markovitch, 2005).
Dmozis a web corpus obtained by crawling and clean-ing the URLs in the Open Directory Project(dmoz.org).
All of the above corpora were parsedusing Seginer?s parser and POS-tagged by MX-POST (Ratnaparkhi, 1996).For our experiments on Spanish, we used 3.3Msentences of length at most 15 (excluding punctua-tion) extracted from the Spanish Wikipedia.
Herewe chose to bound the length by 15 due to thesmaller size of the available test corpus.
Thesame data was used both for the first and the sec-ond stages.
Our development and test data weretaken from the training data released for the Se-mEval 2007 task on semantic annotation of Span-ish (Ma`rquez et al, 2007).
This data consistedof 1048 sentences of length up to 15, from which200 were randomly selected as our developmentdata and 848 as our test data.
The developmentdata included 313 verb instances while the testdata included 1279.
All corpora were parsed us-ing the Seginer parser and tagged by the ?Tree-Tagger?
(Schmid, 1994).Baselines.
Since this is the first paper, to ourknowledge, which addresses the problem of unsu-pervised argument identification, we do not haveany previous results to compare to.
We insteadcompare to a baseline which marks all k-th degreecousins of the predicate (for every k) as arguments(this is the second pruning we use in the clausedetection stage).
We name this baseline the ALLCOUSINS baseline.
We note that a random base-line would score very poorly since any sequence ofterminals which does not contain the predicate isa possible candidate.
Therefore, beating this ran-dom baseline is trivial.Evaluation.
Evaluation is carried out usingstandard SRL evaluation software5.
The algorithmis provided with a list of predicates, whose argu-ments it needs to annotate.
For the task addressedin this paper, non-consecutive parts of argumentsare treated as full arguments.
A match is consid-ered each time an argument in the gold standarddata matches a marked argument in our model?soutput.
An unmatched argument is an argumentwhich appears in the gold standard data, and failsto appear in our model?s output, and an exces-sive argument is an argument which appears inour model?s output but does not appear in the goldstandard.
Precision and recall are defined accord-ingly.
We report an F-score as well (the harmonicmean of precision and recall).
We do not attempt5http://www.lsi.upc.edu/?srlconll/soft.html#software.33to identify multi-word verbs, and therefore do notreport the model?s performance in identifying verbboundaries.Since our model detects clauses as an interme-diate product, we provide a separate evaluationof this task for the English corpus.
We show re-sults on our development data.
We use the stan-dard parsing F-score evaluation measure.
As agold standard in this evaluation, we mark for eachof the verbs in our development data the minimalclause containing it.
A minimal clause is the low-est ancestor of the verb in the parse tree that hasa syntactic label of a clause according to the goldstandard parse of the PTB.
A verb is any terminalmarked by one of the POS tags of type verb ac-cording to the gold standard POS tags of the PTB.5 ResultsOur results are shown in Table 1.
The left sectionpresents results on English and the right sectionpresents results on Spanish.
The top line lists re-sults of the clause detection stage alone.
The nexttwo lines list results of the full algorithm (clausedetection + collocations) in two different settingsof the collocation stage.
The bottom line presentsthe performance of the ALL COUSINS baseline.In the ?Collocation Maximum Precision?
set-ting the parameters of the collocation stage (?
andr) were generally tuned such that maximal preci-sion is achieved while preserving a minimal recalllevel (40% for English, 20% for Spanish on the de-velopment data).
In the ?Collocation Maximum F-score?
the collocation parameters were generallytuned such that the maximum possible F-score forthe collocation algorithm is achieved.The best or close to best F-score is achievedwhen using the clause detection algorithm alone(59.14% for English, 23.34% for Spanish).
Notethat for both English and Spanish F-score im-provements are achieved via a precision improve-ment that is more significant than the recall degra-dation.
F-score maximization would be the aim ofa system that uses the output of our unsupervisedARGID by itself.The ?Collocation Maximum Precision?achieves the best precision level (55.97% forEnglish, 21.8% for Spanish) but at the expenseof the largest recall loss.
Still, it maintains areasonable level of recall.
The ?CollocationMaximum F-score?
is an example of a model thatprovides a precision improvement (over both thebaseline and the clause detection stage) with arelatively small recall degradation.
In the Spanishexperiments its F-score (23.87%) is even a bithigher than that of the clause detection stage(23.34%).The full two?stage algorithm (clause detection+ collocations) should thus be used when we in-tend to use the model?s output as training data forsupervised SRL engines or supervised ARGID al-gorithms.In our algorithm, the initial set of potential ar-guments consists of constituents in the Seginerparser?s parse tree.
Consequently the fractionof arguments that are also constituents (81.87%for English and 51.83% for Spanish) poses anupper bound on our algorithm?s recall.
Notethat the recall of the ALL COUSINS baseline is74.27% (45.75%) for English (Spanish).
Thisscore emphasizes the baseline?s strength, and jus-tifies the restriction that the arguments should bek-th cousins of the predicate.
The difference be-tween these bounds for the two languages providesa partial explanation for the corresponding gap inthe algorithm?s performance.Figure 3 shows the precision of the collocationmodel (on development data) as a function of theamount of data it was given.
We can see thatthe algorithm reaches saturation at about 5M sen-tences.
It achieves this precision while maintain-ing a reasonable recall (an average recall of 43.1%after saturation).
The parameters of the colloca-tion model were separately tuned for each corpussize, and the graph displays the maximum whichwas obtained for each of the corpus sizes.To better understand our model?s performance,we performed experiments on the English cor-pus to test how well its first stage detects clauses.Clause detection is used by our algorithm as a steptowards argument identification, but it can be ofpotential benefit for other purposes as well (seeSection 2).
The results are 23.88% recall and 40%precision.
As in the ARGID task, a random se-lection of arguments would have yielded an ex-tremely poor result.6 ConclusionIn this work we presented the first algorithm for ar-gument identification that uses neither supervisedsyntactic annotation nor SRL tagged data.
Wehave experimented on two languages: English andSpanish.
The straightforward adaptability of un-34English (Test Data) Spanish (Test Data)Precision Recall F1 Precision Recall F1Clause Detection 52.84 67.14 59.14 18.00 33.19 23.34Collocation Maximum F?score 54.11 63.53 58.44 20.22 29.13 23.87Collocation Maximum Precision 55.97 40.02 46.67 21.80 18.47 20.00ALL COUSINS baseline 46.71 74.27 57.35 14.16 45.75 21.62Table 1: Precision, Recall and F1 score for the different stages of our algorithm.
Results are given for English (PTB, sentenceslength bounded by 10, left part of the table) and Spanish (SemEval 2007 Spanish SRL task, right part of the table).
The resultsof the collocation (second) stage are given in two configurations, Collocation Maximum F-score and Collocation MaximumPrecision (see text).
The upper bounds on Recall, obtained by taking all arguments output by our unsupervised parser, are81.87% for English and 51.83% for Spanish.0 2 4 6 8 10424446485052Number of Sentences (Millions)PrecisionSecond StageFirst StageBaselineFigure 3: The performance of the second stage on English(squares) vs. corpus size.
The precision of the baseline (trian-gles) and of the first stage (circles) is displayed for reference.The graph indicates the maximum precision obtained for eachcorpus size.
The graph reaches saturation at about 5M sen-tences.
The average recall of the sampled points from thereon is 43.1%.
Experiments were performed on the Englishdevelopment data.supervised models to different languages is oneof their most appealing characteristics.
The re-cent availability of unsupervised syntactic parsershas offered an opportunity to conduct research onSRL, without reliance on supervised syntactic an-notation.
This work is the first to address the ap-plication of unsupervised parses to an SRL relatedtask.Our model displayed an increase in precision of9% in English and 8% in Spanish over a strongbaseline.
Precision is of particular interest in thiscontext, as instances tagged by high quality an-notation could be later used as training data forsupervised SRL algorithms.
In terms of F?score,our model showed an increase of 1.8% in Englishand of 2.2% in Spanish over the baseline.Although the quality of unsupervised parses iscurrently low (compared to that of supervised ap-proaches), using great amounts of data in identi-fying recurring structures may reduce noise andin addition address sparsity.
The techniques pre-sented in this paper are based on this observation,using around 35M sentences in total for Englishand 3.3M sentences for Spanish.As this is the first work which addressed un-supervised ARGID, many questions remain to beexplored.
Interesting issues to address include as-sessing the utility of the proposed methods whensupervised parses are given, comparing our modelto systems with no access to unsupervised parsesand conducting evaluation using more relaxedmeasures.Unsupervised methods for syntactic tasks havematured substantially in the last few years.
No-table examples are (Clark, 2003) for unsupervisedPOS tagging and (Smith and Eisner, 2006) for un-supervised dependency parsing.
Adapting our al-gorithm to use the output of these models, either toreduce the little supervision our algorithm requires(POS tagging) or to provide complementary syn-tactic information, is an interesting challenge forfuture work.ReferencesCollin F. Baker, Charles J. Fillmore and John B. Lowe,1998.
The Berkeley FrameNet Project.
ACL-COLING ?98.Daniel M. Bikel, 2004.
Intricacies of Collins?
ParsingModel.
Computational Linguistics, 30(4):479?511.Ted Briscoe, John Carroll, 1997.
Automatic Extractionof Subcategorization from Corpora.
Applied NLP1997.Aljoscha Burchardt, Katrin Erk, Anette Frank, AndreaKowalski, Sebastian Pad and Manfred Pinkal, 2006The SALSA Corpus: a German Corpus Resource forLexical Semantics.
LREC ?06.Lou Burnard, 2000.
User Reference Guide for theBritish National Corpus.
Technical report, OxfordUniversity.Xavier Carreras and Llu?`s Ma`rquez, 2004.
Intro-duction to the CoNLL?2004 Shared Task: SemanticRole Labeling.
CoNLL ?04.35Xavier Carreras and Llu?`s Ma`rquez, 2005.
Intro-duction to the CoNLL?2005 Shared Task: SemanticRole Labeling.
CoNLL ?05.Alexander Clark, 2003.
Combining Distributional andMorphological Information for Part of Speech In-duction.
EACL ?03.Ronan Collobert and Jason Weston, 2007.
Fast Se-mantic Extraction Using a Novel Neural NetworkArchitecture.
ACL ?07.Mona Diab, Aous Mansouri, Martha Palmer, OlgaBabko-Malaya, Wajdi Zaghouani, Ann Bies andMohammed Maamouri, 2008.
A pilot Arabic Prop-Bank.
LREC ?08.Evgeniy Gabrilovich and Shaul Markovitch, 2005.Feature Generation for Text Categorization usingWorld Knowledge.
IJCAI ?05.Daniel Gildea and Daniel Jurafsky, 2002.
AutomaticLabeling of Semantic Roles.
Computational Lin-guistics, 28(3):245?288.Elliot Glaysher and Dan Moldovan, 2006.
Speed-ing Up Full Syntactic Parsing by Leveraging PartialParsing Decisions.
COLING/ACL ?06 poster ses-sion.Andrew Gordon and Reid Swanson, 2007.
Generaliz-ing Semantic Role Annotations across SyntacticallySimilar Verbs.
ACL ?07.David Graff, 1995.
North American News Text Cor-pus.
Linguistic Data Consortium.
LDC95T21.Trond Grenager and Christopher D. Manning, 2006.Unsupervised Discovery of a Statistical Verb Lexi-con.
EMNLP ?06.Kadri Hacioglu, 2004.
Semantic Role Labeling usingDependency Trees.
COLING ?04.Kadri Hacioglu and Wayne Ward, 2003.
Target WordDetection and Semantic Role Chunking using Sup-port Vector Machines.
HLT-NAACL ?03.Rohit J. Kate and Raymond J. Mooney, 2007.
Semi-Supervised Learning for Semantic Parsing usingSupport Vector Machines.
HLT?NAACL ?07.Karin Kipper, Hoa Trang Dang and Martha Palmer,2000.
Class-Based Construction of a Verb Lexicon.AAAI ?00.Dan Klein, 2005.
The Unsupervised Learning of Natu-ral Language Structure.
Ph.D. thesis, Stanford Uni-versity.Anna Korhonen, 2002.
Subcategorization Acquisition.Ph.D.
thesis, University of Cambridge.Christopher D. Manning, 1993.
Automatic Acquisitionof a Large Subcategorization Dictionary.
ACL ?93.Llu?`s Ma`rquez, Xavier Carreras, Kenneth C. Lit-tkowski and Suzanne Stevenson, 2008.
SemanticRole Labeling: An introdution to the Special Issue.Computational Linguistics, 34(2):145?159Llu?`s Ma`rquez, Jesus Gime`nez Pere Comas and NeusCatala`, 2005.
Semantic Role Labeling as SequentialTagging.
CoNLL ?05.Llu?`s Ma`rquez, Lluis Villarejo, M. A.
Mart?` and Mar-iona Taule`, 2007.
SemEval?2007 Task 09: Multi-level Semantic Annotation of Catalan and Spanish.The 4th international workshop on Semantic Evalu-ations (SemEval ?07).Gabriele Musillo and Paula Merlo, 2006.
AccurateParsing of the proposition bank.
HLT-NAACL ?06.Martha Palmer, Daniel Gildea and Paul Kingsbury,2005.
The Proposition Bank: A Corpus Annotatedwith Semantic Roles.
Computational Linguistics,31(1):71?106.Sameer Pradhan, Kadri Hacioglu, Valerie Krugler,Wayne Ward, James H. Martin and Daniel Jurafsky,2005.
Support Vector Learning for Semantic Argu-ment Classification.
Machine Learning, 60(1):11?39.Sameer Pradhan, Wayne Ward, James H. Martin, 2008.Towards Robust Semantic Role Labeling.
Computa-tional Linguistics, 34(2):289?310.Adwait Ratnaparkhi, 1996.
Maximum Entropy Part-Of-Speech Tagger.
EMNLP ?96.Helmut Schmid, 1994.
Probabilistic Part-of-SpeechTagging Using Decision Trees International Confer-ence on New Methods in Language Processing.Yoav Seginer, 2007.
Fast Unsupervised IncrementalParsing.
ACL ?07.Noah A. Smith and Jason Eisner, 2006.
AnnealingStructural Bias in Multilingual Weighted GrammarInduction.
ACL ?06.Robert S. Swier and Suzanne Stevenson, 2004.
Unsu-pervised Semantic Role Labeling.
EMNLP ?04.Robert S. Swier and Suzanne Stevenson, 2005.
Ex-ploiting a Verb Lexicon in Automatic Semantic RoleLabelling.
EMNLP ?05.Erik F. Tjong Kim Sang and Herve?
De?jean, 2001.
In-troduction to the CoNLL-2001 Shared Task: ClauseIdentification.
CoNLL ?01.Nianwen Xue and Martha Palmer, 2004.
CalibratingFeatures for Semantic Role Labeling.
EMNLP ?04.Nianwen Xue, 2008.
Labeling Chinese Predicateswith Semantic Roles.
Computational Linguistics,34(2):225?255.36
