Proceedings of the Ninth International Workshop on Parsing Technologies (IWPT), pages 190?191,Vancouver, October 2005. c?2005 Association for Computational LinguisticsFrom Metagrammars to Factorized TAG/TIG Parsers?ric Villemonte de la ClergerieINRIA - Rocquencourt - B.P.
10578153 Le Chesnay Cedex, FRANCEEric.De_La_Clergerie@inria.frAbstractThis document shows how the factorizedsyntactic descriptions provided by Meta-Grammars coupled with factorization op-erators may be used to derive compactlarge coverage tree adjoining grammars.1 IntroductionLarge coverage Tree Adjoining Grammars (TAGs)tend to be very large, with several thousands oftree schemata, i.e., trees with at least one anchornode.
Such large grammars are difficult to developand maintain.
Of course, their sizes have also astrong impact on parsing efficiency.
The size of suchTAGs mostly arises from redundancies, due to theextended domain of locality provided by trees.Recently, Meta-Grammars (Candito, 1999) havebeen introduced to factorize linguistic informationthrough a multiple inheritance hierarchy of smallclasses, each of them grouping elementary con-straints on nodes.
A MG compiler exploits these bitsof information to generate a set of trees.
While MGshelp reducing redundancies at a descriptive level, theresulting grammars remain very large.We propose to exploit the fact that MGs are al-ready factorized to get compact grammars throughthe use of factorized trees, as provided by systemDYALOG (Thomasset and Villemonte de la Clerg-erie, 2005).This proposal has been validated by quickly de-veloping and testing a large coverage French MG.2 Generic factorization operatorsThe first factorization operators provided by DYA-LOG are the disjunction, Kleene star, and optional-ity operators.
A finer control of optionality is pro-vided through the notion of guards, used to stateconditions on the presence or absence of a node (orof a node sequence).
An expression (G+, x;G?
)means that the guard G+ (resp.
G?)
should be sat-isfied for x to be present (resp.
absent).
A guardG is a boolean expression on equations between FSpaths and is equivalent to a finite set of substitu-tions ?G.
Used to handle local free-word order-ings, the interleaving (or shuffling) of two sequences(ai)i=1???n##(bj)j=1??
?m returns all sequences con-taining all ai and bj in any order that preserves theoriginal orderings (i.e., ai < ai+1 and bj < bj+1).These operators do not increase the expressivepower or the worst-case complexity of TAGs.
Theyare implemented without expansion, ensuring goodperformances and more natural parsing output (withno added non-terminals).3 Meta-GrammarsMGs allow modular descriptions of syntactic phe-nomena, using elementary constraints grouped intoclasses.
A class may inherit constraints from sev-eral parent classes and can also provide a resourceor require a resource.
Constraints on nodes includeequality, precedence, immediate and indirect dom-inances.
The constraints may also be on node andclass decorations, expressed with Feature Structures.The objective of our MG compiler, also devel-oped with DYALOG, is to cross the terminal classes(i.e.
any class without descendants) in order to ob-tain neutral classes where each provided resource190has been consumed and conversely.
Constraints areaccumulated during crossing and are only kept theneutral classes whose accumulated constraints aresatisfiable, taking into account their logical conse-quence.
Minimal trees satisfying the constraints ofthe neutral classes are then produced.Getting factorized trees results from severalmechanisms.
A node may group alternatives, andmay be made optional or repeatable (for Kleenestars).
When generating trees, underspecified prece-dences between sibling nodes are handled by the in-terleaving operator.Positive and negative guards may be attached tonodes and are accumulated in a conjunctive way dur-ing the crossing phase, i.e.
N ?
G1 and N ?
G2 isequivalent to N ?
(G1, G2).
The compiler checksthe satisfiability of the guards, removing the alter-natives leading to failures and equations in guardswhich become trivially true.
The remaining guardsare emitted as DYALOG guards in the trees.4 Grammar anatomyIn just a few months, we have developed, for French,a MG with 191 classes, used to generate a verycompact TAG of only 126 trees.
Only 27 trees areanchored by verbs and they are sufficient to covercanonical, passive and extracted verbal construc-tions with at most 2 arguments (including objects,attributes, completives, infinitives, prepositional ar-guments, wh-completives).
These trees would cor-respond to several thousand trees, if the factoriza-tion operators were expanded.
This strong com-paction rate stems from the presence of 820 guards,92 disjunctions (to handle choices in realizations),26 interleavings (to handle verb argument positions)and 13 Kleene stars (to handle coordinations).
Thegrammar is mostly formed of simple trees (with lessthan 17 nodes), and a few complex trees (26 treesbetween 30 and 46 nodes), essentially anchored byverbs.For instance, tree #1111, used for canonical verbconstructions, results from the crossing of 25 ter-minal classes, and has 43 nodes, plus 3 disjunctionnodes (for the different realizations of the subjectand other verb arguments) and 1 interleaving node1browsable online at http://atoll.inria.fr/perl/frmg/tree.pl.
(between the verb arguments and a possible post-verbal subject).
The tree is controlled by 35 guards,governing, for instance, the presence and position ofa subject and of clitics.Such a tree covers much more verb sub-categorization frames than the number of framesusually attached to a given verb.
The anchoring of atree ?
by a word w is done by unifying two featurestructures H?
and Hw, called hypertags (Kinyon,2000), that list the syntactic properties covered by?
and allowed by w. The link between H?
and theallowed syntactic constructions is done through thevariables occurring inH?
and in the guards and nodedecorations.5 EvaluationThe resulting French grammar has been compiled,with DYALOG, into an hybrid TAG/TIG parser,by identifying the left and right auxiliary insertiontrees.
Following a left-to-right top-down tabularparsing strategy, the parser may be used to get ei-ther full or partial parses.2 Coverage rate for fullparsing is around 95% for two test suites (EURO-TRA and TSNLP) and around 42% on various cor-pora (including more than 300K sentences of a rawjournalistic corpus).Our MG is still very young and needs to be im-proved to ensure a better coverage.
However, we canalready conclude that coupling MGs with factorizedtrees is a generic and powerful approach to controlthe size of grammars and to get efficient parsers.The various tools and linguistic resources men-tioned in this abstract are freely available at http://atoll.inria.fr/.ReferencesM.-H. Candito.
1999.
Organisation modulaire etparam?trable de grammaires ?lectroniques lexical-is?es.
Ph.D. thesis, Universit?
Paris 7.A.
Kinyon.
2000.
Hypertags.
In Proc.
of COLING,pages 446?452.F.
Thomasset and ?.
Villemonte de la Clergerie.
2005.Comment obtenir plus des m?ta-grammaires.
In Pro-ceedings of TALN?05, volume 1, pages 3?12, Dourdan,France, June.
ATALA.2The parser may be tried online at http://atoll.inria.fr/parserdemo.191
