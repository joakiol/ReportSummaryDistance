Polarity sensitivity and evaluation order in type-logical grammarChung-chieh ShanDivision of Engineering and Applied SciencesHarvard UniversityCambridge, MA 02138ccshan@post.harvard.eduAbstractWe present a novel, type-logical analysis of po-larity sensitivity: how negative polarity items(like any and ever) or positive ones (like some)are licensed or prohibited.
It takes not justscopal relations but also linear order into ac-count, using the programming-language no-tions of delimited continuations and evaluationorder, respectively.
It thus achieves greater em-pirical coverage than previous proposals.1 IntroductionPolarity sensitivity (Ladusaw, 1979) has been a popu-lar linguistic phenomenon to analyze in the categorial(Dowty, 1994), lexical-functional (Fry, 1997, 1999), andtype-logical (Bernardi, 2002; Bernardi and Moot, 2001)approaches to grammar.
The multitude of these analy-ses is in part due to the more explicit emphasis that thesetraditions place on the syntax-semantics interface?be itin the form of Montague-style semantic rules, the Curry-Howard isomorphism, or linear logic as glue?and thefact that polarity sensitivity is a phenomenon that spanssyntax and semantics.On one hand, which polarity items are licensed or pro-hibited in a given linguistic environment depends, by andlarge, on semantic properties of that environment (Ladu-saw, 1979; Krifka, 1995, inter alia).
For example, toa first approximation, negative polarity items can occuronly in downward-entailing contexts, such as under thescope of a monotonically decreasing quantifier.
A quan-tifier q, of type (e ?
t) ?
t where e is the type of indi-viduals and t is the type of truth values, is monotonicallydecreasing just in case(1) ?s1.?s2.(?x.
s2(x) ?
s1(x))?
q(s1) ?
q(s2).Thus (2a) is acceptable because the scope of nobody isdownward-entailing, whereas (2b?c) are unacceptable.
(2) a.
Nobody saw anybody.b.
*Everybody saw anybody.c.
*Alice saw anybody.On the other hand, a restriction on surface syntacticform, such as that imposed by polarity sensitivity, is bydefinition a matter of syntax.
Besides, there are syntac-tic restrictions on the configuration relating the licensorto the licensee.
For example, (2a) above is acceptable?nobody manages to license anybody?but (3) below isnot.
As the contrast in (4) further illustrates, the licen-sor usually needs to precede the licensee.
(3) *Anybody saw nobody.
(4) a.
Nobody?s mother saw anybody?s father.b.
*Anybody?s mother saw nobody?s father.The syntactic relations allowed between licensor and li-censee for polarity sensitivity purposes are similar tothose allowed between antecedent and pronoun for vari-able binding purposes.
To take one example, just as anantecedent?s ability to bind a (c-commanded) pronounpercolates up to a containing phrase (such as in (5), whatBu?ring (2001) calls ?binding out of DP?
), a licensor?sability to license a (c-commanded) polarity item perco-lates up to a containing phrase (such as in (4a)).
(5) [Every boyi?s mother] saw hisi father.Moreover, just as a bindee can precede a binder in a sen-tence when the bindee sits in a clause that excludes thebinder (as in (6); see Williams, 1997, ?2.1), a licenseecan precede a licensor in a sentence when the licenseesits in a clause that excludes the licensor (as in (7); seeLadusaw, 1979, page 112).
(6) That hei would be arrested for speeding came as asurprise to everyi motorist.
(7) That anybody would be arrested for speeding cameas a surprise to the district attorney.This paper presents a new, type-logical account of po-larity sensitivity that encompasses the semantic proper-ties exemplified in (2) and the syntactic properties exem-plified in (3?4).
Taking advantage of the Curry-Howardisomorphism, it is the first account of polarity sensitivityin the grammatical frameworks mentioned above to cor-rectly fault (3) for the failure of nobody to appear beforeAxiomA ` AFor each unary mode ?
(blank, u, or p in this paper):^??
` A??I?
` ??A?
` ?
?A ??E^??
` A?
` A^?I^??
` ^?A?
` ^?A ?
[^?A] ` B^?E?[?]
` BFor each binary mode ?
(blank or c in this paper):?
` B ?
` C??I?
??
?
` B ??
C?
` B ?C ?
[B ??
C] ` A ??E?[?]
` A?
??
B ` C/?I?
` C/?B?
` B/?A ?
` A/?E?
??
?
` BB ??
?
` C \?I?
` B\?C?
` A ?
` A\?B \?E?
??
?
` BFigure 1: Natural deduction rules for multimodal cate-gorial grammar (Bernardi, 2002, pages 9 and 50).
Toreduce notation, we do not distinguish structural punc-tuation from logical connectives.A a` A ?c 1(Root)(B ?C) ?c K a` B ?c (C ?
K)(Left)(^B ?C) ?c K a` C ?c (K ?
^B)(Right)A ` ^A(T)^A ?
^B ` ^(A ?
B)(K?
)^^uA ` ^uA(Unquote)Figure 2: Structural postulatesanybody.
The analysis makes further correct predictions,as we will see at the end of ?3.The analysis here borrows the concepts of delim-ited continuations (Felleisen, 1988; Danvy and Filinski,1990) and evaluation order from the study of program-ming languages.
Thus this paper is about computationallinguistics, in the sense of applying insights from com-puter science to linguistics.
The basic idea transfers toother formalisms, but type-logical grammar?more pre-cisely, multimodal categorial grammar?offers a frag-ment NL^R?
whose parsing problem is decidable usingproof-net technology (Moot, 2002, ?9.2), which is ofgreat help while developing and testing the theory.2 Delimited continuationsFigure 1 shows natural deduction rules for multimodalcategorial grammar, a member of the type-logical fam-ily of grammar formalisms (Moortgat, 1996a; Bernardi,2002).
Figure 2 lists our structural postulates.
These twofigures form the logic underlying our account.We use two binary modes: the default mode (blank)for surface syntactic composition, and the continuationmode c. As usual, a formula of the form A ?
B can beread as ?A followed by B?.
By contrast, a formula ofthe form A ?c B can be read as ?A in the context B?.
Inprogramming-language terms, the formula A ?c B plugsa subexpression A into a delimited continuation B. TheRoot rule creates a trivial continuation: it says that 1 isa right identity for the c mode, where 1 can be thoughtof as a nullary connective, effectively enabling empty an-tecedents for the c mode.
The binary modes, along withthe first three postulates in Figure 2, provide a new wayto encode Moortgat?s ternary connective q (1996b) for in-situ quantification.
For intuition, it may help to draw log-ical formulas as binary trees, distinguishing graphicallybetween the two modes.To further capture the interaction between scope inver-sion and polarity sensitivity exemplified in (3?4), we usethree unary modes: the value mode (blank), the unquota-tion mode u, and the polarity mode p. The value modemarks when an expression is devoid of in-situ quantifi-cation, or, in programming-language terms, when it is apure value rather than a computation with control effects.As a special case, any formula can be turned pure by em-bedding it under a diamond using the T postulate, analo-gous to quotation or staging in programming languages.Quotations can be concatenated using the K?
postulate.The unquotation mode u marks when a diamond can becanceled using the Unquote postulate.
Unquotation isalso known as eval or run in programming languages.The polarity mode p, and the empirical utility of theseunary modes, are explained in ?3.A derivation is considered complete if it culminates ina sequent whose antecedent is built using the default bi-nary mode ?
only, and whose conclusion is a type of theform ^uA.
Below is a derivation of Alice saw Bob.
(8) Alice ` npsaw ` (np\^us)/np Bob ` np/Esaw ?
Bob ` np\^us \EAlice ?
(saw ?
Bob) ` ^usNote that clauses take the type^us rather than the usual s,so the Unquote rule can operate on clauses.
We abbrevi-ate ^us to s?
below.To illustrate in-situ quantification, Figure 3 on the fol-lowing page shows a derivation of Alice saw a man?smother.
For brevity, we treat a man as a single lexicalitem.
It is a quantificational noun phrase whose polarityis neutral in a sense that contrasts with other quantifiersconsidered below.
The crucial part of this derivation isthe use of the structural postulates Root, Left, and Rightto divide the sentence into two parts: the subexpressiona man and its context Alice saw ?s mother.
The type ofa man, s?/c(np\cs?
), can be read as ?a subexpression thatproduces a clause when placed in a context that can en-close an np to make a clause?.a man ` s?/c(np\cs?
)Alice ` npsaw ` (np\s?
)/npAxiomnp ` np ?s mother ` np\np\Enp ?
?s mother ` np/Esaw ?
(np ?
?s mother) ` np\s?\EAlice ?
(saw ?
(np ?
?s mother)) ` s?^I^(Alice ?
(saw ?
(np ?
?s mother)))` ^s?Unquote^(Alice ?
(saw ?
(np ?
?s mother)))` s?K?
thrice^Alice ?
(^saw ?
(^np ?
^?s mother)) ` s?T^Alice ?
(^saw ?
(np ?
^?s mother)) ` s?Root(^Alice ?
(^saw ?
(np ?
^?s mother)))?c 1 ` s?
Right(^saw ?
(np ?
^?s mother))?c (1 ?
^Alice) ` s?
Right(np ?
^?s mother) ?c((1 ?
^Alice) ?
^saw)` s?Leftnp ?c(^?s mother ?
((1 ?
^Alice) ?
^saw))` s?\cI^?s mother ?
((1 ?
^Alice) ?
^saw) ` np\cs?/cEa man ?
(^?s mother ?
((1 ?
^Alice) ?
^saw))` s?Left(a man ?
^?s mother) ?c((1 ?
^Alice) ?
^saw)` s?Right(^saw ?
(a man ?
^?s mother))?c (1 ?
^Alice) ` s?
Right(^Alice ?
(^saw ?
(a man ?
^?s mother)))?c 1 ` s?
Root^Alice ?
(^saw ?
(a man ?
^?s mother)) ` s?T thriceAlice ?
(saw ?
(a man ?
?s mother)) ` s?Figure 3: In-situ quantification: deriving Alice saw a man?s motherQuantifier Typea man s?/c(np\cs?
)nobody s?/c(np\cs?
)anybody s?/c(np\cs?
)somebody s+/c(np\cs+)everybody s?/c(np\cs+)GFED@ABCs+??????????
?somebody// GFED@ABCs??anybodyONMLHIJKGFED@ABCs?
nobodyNNa man__everybodynn//Figure 4: Quantifier type assign-ments, and a corresponding finite-state machine3 Polarity sensitivity and evaluation orderThe pmode mediates polarity sensitivity.
For every unarymode ?, we can derive A ` ?
?^?A from the rules in Fig-ure 1.
This fact is particularly useful when ?
= p, be-cause we assign the types ^u?p^ps and ?p^p^us to pos-itive and negative clauses, respectively, and can derives?
` ^u?p^ps, s?
` ?p^p^us.
(9)In words, a neutral clause can be silently converted into apositive or negative one.
We henceforth write s+ and s?for ^u?p^ps and ?p^p^us.
By (9), both types are ?sub-types?
of s?
(that is to say, entailed by s?
).The p mode is used in Figure 5 on the next page toderive Nobody saw anybody.
Unlike a man, the quan-tifier anybody has the type s?/c(np\cs?
), showing that ittakes scope over a negative clause to make another neg-ative clause.
Meanwhile, the quantifier nobody has thetype s?/c(np\cs?
), showing that it takes scope over a neg-ative clause to make a neutral clause.
Thus nobody cantake scope over the negative clause returned by anybodyto make a neutral clause, which is complete.The contrast between (2a) and (3) boils down to theRight (but not Left) postulate?s requirement that the left-most constituent be of the form ^B.
(In programming-language terms, a subexpression can be evaluated only ifall other subexpressions to its left are pure.)
For nobodyto take scope over (and license) anybody in (3) requiresthe context *Anybody saw .
In other words, the sequent(10) np ?c((1 ?
^anybody) ?
^saw)` s?must be derived, in which the Right rule forces the con-stituents anybody and saw to be embedded under dia-monds.
Figure 6 shows an attempt at deriving (10), whichfails because the type s?
for negative clauses cannot beUnquoted (shown with question marks).
The sequentin (10) cannot be derived, and the sentence *Anybody sawnobody is not admitted.
Nevertheless, Somebody saw ev-erybody is correctly predicted to have ambiguous scope,because neutral and positive clauses can be Unquoted.The quantifiers a man, nobody, and anybody in Figures3 and 5 exemplify a general pattern of analysis: everypolarity-sensitive item, be it traditionally considered a li-censor or a licensee, specifies in its type an input polarity(of the clause it takes scope over) and an output polarity(of the clause it produces).
Figure 4 lists more quantifiersand their input and output polarities.
As shown there,these type assignments can be visualized as a finite-statemachine.
The states are the three clause types.
The ?-transitions are the two derivability relations in (9).
Thenon-?
transitions are the quantifiers.
The start states arethe clausal types that can be Unquoted.
The final state isthe clausal type returned by verbs, namely neutral.The precise pattern of predictions made by this the-ory can be stated in two parts.
First, due to the lexicaltypes in Figure 4 and the ?subtyping?
relations in (9), thequantifiers in a sentence must form a valid transition se-quence, from widest to narrowest scope.
This constraintis standard in type-logical accounts of polarity sensitiv-ity.
Second, thanks to the unary modes in the structuralnobody ` s?/c(np\cs?
)anybody ` s?/c(np\cs?)??
?^np ?
(^saw ?
np) ` s?Root,Right,Rightnp ?c((1 ?
^np) ?
^saw)` s?^pI^p(np ?c ((1 ?
^np) ?
^saw))` ^ps??pInp ?c((1 ?
^np) ?
^saw)` s?\cI(1 ?
^np) ?
^saw ` np\cs?/cEanybody ?c((1 ?
^np) ?
^saw)` s?Right,Right,Left^np ?c((^saw ?
anybody) ?
1)` s?T twicenp ?c((saw ?
anybody) ?
1)` s?\cI(saw ?
anybody) ?
1 ` np\cs?/cEnobody ?c((saw ?
anybody) ?
1)` s?Left,Rootnobody ?
(saw ?
anybody) ` s?Figure 5: Polarity licensing: deriving Nobody saw anybody??
?anybody ?
(saw ?
np) ` s?^I^(anybody ?
(saw ?
np))` ^s????
??
?^(anybody ?
(saw ?
np))` s?K?
twice^anybody ?
(^saw ?
^np) ` s?T^anybody ?
(^saw ?
np) ` s?Root(^anybody ?
(^saw ?
np))?c 1 ` s?
Right(^saw ?
np) ?c (1 ?
^anybody) ` s?
Rightnp ?c((1 ?
^anybody) ?
^saw)` s?Figure 6: Linear order in polarity licensing: rulingout Anybody saw nobody using left-to-right eval-uation orderpostulates in Figure 2, whenever two quantifiers take in-verse rather than linear scope with respect to each other,the transitions must pass through a start state (that is, aclause type that can be Unquoted) in between.
This con-straint is an empirical advance over previous accounts,which are oblivious to linear order.The input and output polarities of quantifiers are highlymutually constrained.
Take everybody for example.
Ifwe hold the polarity assignments of the other quantifiersfixed, then the existence of a linear-scope reading forA man introduced everybody to somebody forces every-body to be input-positive and output-neutral.
But thenour account predicts thatNobody introduced everybody tosomebody has a linear-scope reading, unlike the simplersentenceNobody introduced Alice to somebody.
This pre-diction is borne out, as observed by Kroch (1974, pages121?122) and discussed by Szabolcsi (2004).AcknowledgmentsThanks to Chris Barker, Raffaella Bernardi, WilliamLadusaw, Richard Moot, Chris Potts, Stuart Shieber, Dy-lan Thurston, and three anonymous referees.
This workis supported by the United States National Science Foun-dation Grant BCS-0236592.ReferencesRaffaella Bernardi and Richard Moot.
2001.
Generalized quan-tifiers in declarative and interrogative sentences.
Journal ofLanguage and Computation, 1(3):1?19.Raffaella Bernardi.
2002.
Reasoning with Polarity in Catego-rial Type Logic.
Ph.D. thesis, Utrecht Institute of Linguistics(OTS), Utrecht University.Daniel Bu?ring.
2001.
A situation semantics for binding out ofDP.
In Rachel Hastings, Brendan Jackson, and Zsofia Zv-olensky, editors, SALT XI: Semantics and Linguistic Theory,pages 56?75, Ithaca.
Cornell University Press.Olivier Danvy and Andrzej Filinski.
1990.
Abstracting con-trol.
In Proceedings of the 1990 ACM Conference on Lispand Functional Programming, pages 151?160, New York,March.
ACM Press.David R. Dowty.
1994.
The role of negative polarity and con-cord marking in natural language reasoning.
In Mandy Har-vey and Lynn Santelmann, editors, SALT IV: Semantics andLinguistic Theory, Ithaca.
Cornell University Press.Matthias Felleisen.
1988.
The theory and practice of first-classprompts.
In POPL ?88: Conference Record of the AnnualACM Symposium on Principles of Programming Languages,pages 180?190, New York.
ACM Press.John Fry.
1997.
Negative polarity licensing at the syntax-semantics interface.
In Philip R. Cohen and WolfgangWahlster, editors, Proceedings of the 35th Annual Meeting ofthe Association for Computational Linguistics and 8th Con-ference of the European Chapter of the Association for Com-putational Linguistics, pages 144?150, San Francisco.
Mor-gan Kaufmann.John Fry.
1999.
Proof nets and negative polarity licensing.In Mary Dalrymple, editor, Semantics and Syntax in LexicalFunctional Grammar: The Resource Logic Approach, chap-ter 3, pages 91?116.
MIT Press, Cambridge.Manfred Krifka.
1995.
The semantics and pragmatics of polar-ity items.
Linguistic Analysis, 25:209?257.Anthony S. Kroch.
1974.
The Semantics of Scope in En-glish.
Ph.D. thesis, Massachusetts Institute of Technology.Reprinted by New York: Garland, 1979.William A. Ladusaw.
1979.
Polarity Sensitivity as InherentScope Relations.
Ph.D. thesis, Department of Linguistics,University of Massachusetts, August.
Reprinted by NewYork: Garland, 1980.Michael Moortgat.
1996a.
Categorial type logics.
In Johan vanBenthem and Alice ter Meulen, editors, Handbook of Logicand Language, chapter 2.
Elsevier Science, Amsterdam.Michael Moortgat.
1996b.
Generalized quantification and dis-continuous type constructors.
In Harry C. Bunt and Arthurvan Horck, editors, Discontinuous Constituency, pages 181?207.
de Gruyter, Berlin.Richard Moot.
2002.
Proof Nets for Linguistic Analysis.
Ph.D.thesis, Utrecht Institute of Linguistics (OTS), Utrecht Uni-versity.Anna Szabolcsi.
2004.
Positive polarity?negative polarity.Natural Language and Linguistic Theory, 22(2):409?452,May.Edwin Williams.
1997.
Blocking and anaphora.
LinguisticInquiry, 28(4):577?628.
