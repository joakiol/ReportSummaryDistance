~Bno.-N- ~( 0 2 LCo1965 In ternat iona l  Conference  on Computat iona l  L ingu is t i csAUTOMATIC  DEEP STRUCTURE ANALYS ISUSING AN APPROXIMATE FORMALISM?
Do Lieberman, Ochel D. Lochak and K.IBM Research  CenterP.
O.
Box 218Yorktown Heights,  New YorkU.S.A.I -~ , .
: .v:"" '"~,~,, .
,'*f~ , : .
.
.
, , ,  .
.
.
.
.
: ..... .
, .~, .~,, , \ABSTRACTThe aut~nat ic  sentence  s t ruc ture  ana lys i s  p rocedure  descr ibedearl ier~'----has been programmed.
The fo rmal i sm is not t rans -fo rmat iona l ,  but is suf f i c ient ly  genera l  to permi t  the express ionof a wide var ie ty  of s t ruc tura l  mode ls .
It is now being used toobtain automat ic  s t ruc tura l  descr ip t ions  wh ich  are  very  c lose  tothe "deep s t ructure"  s t ruc tura l  descr ip t ions  of t rans format iona ltheory .The formalism will be described, and its use for various structuralmodels will be illustrated.
A detailed description of the reformula-tion of a transformational g rammar  of English in terms of theapproximate formalism will be given.The salient features of the computer program which operates onthe formalism will be described, and samples of output will bepresented.
(I) D@ Lieberman, "A Procedure for Automatic Sentence StructureAnalysis".
Paper presented at the 1963 Annual Meeting of theAMTCL,  Denver, Colorado, August 25-27, 1963.Lieberman,  Lochak and OchelThe ob ject ive  of the work  descr ibed  here in  is the deve lopmentof a computer i zed  l ingu is t ic  bas is  for appl icat ion to pract i ca l  andtheoret i ca l  p rob lems in automat ic  language process ing ,  The threemain  par ts  of work  are:  1) a fo rmal i sm for express ing  grammat ica lin format ion ,  2) a sentence  ana lys is  p rocedure  based on the fo rmal i sm,and 3) a g rammar  of Eng l i sh  expressed  in te rms of the fo rmal i sm,but mot ivated  by t rans format iona l  theory ,The Formal i smThe formal i sm is not intended to represent any particular lin-guistic theory or model, but rather, as the name implies, is simplya vehicle for expressing various models?
It is designed to be suf-ficiently restrictive to permit the development of an associatedsentence analysis procedure, and at the same time, to be suffi-ciently flexible to permit the relatively straightforward representa-tion of most  current linguistic models and variants, such as ICanalysis, dependency theory, context-free and context-sensitivephrase structure grammars ,  etc.
The formal ism is not well adaptedto the direct representation of transformational g rammars ,  but, asdescribed below, can be used to obtain structural descriptions veryclose to the "deep structure" of a transformational description.In the present system, a structural description is a singlelabeled tree, with no further inherent restrictions (a sentence withmultiple syntactic readings will have multiple trees, but each readingis represented by a single tree)?
Further restrictions, such asprojectivity for example, can be imposed by appropriate use of"condition statements" described below.Lieberman, Lochak and 0chei- 3 -The grammat ica l  information is expressed through theformation of a set of category or node types.
This collection isEach  node type in the node dictionary has called a node dictionary.the following format:Field A -Field Bi -Field Ci -Field Cij -Field D -F ie ld  E -node typelist of possible immediate ancestors(order irrelevant)list of possible immediate descendents(order irrelevant)lists of conditions associated with selectionof the items in the corresponding Ci-fieldoEach  condition statement consists of acondition type and an appropriate numberof tree addresses.
Conditions are used toexpress restrictions such as word  order~government, agreemeut, etc.
The typesof conditions presently in the program aredescribed below.continuity (do all the lexical items dominatedby this node type (Field A) occupy a con-tinuous segment  of the input string).blockage (list of node types blocked by thecurrent node type).
Each of the node typesin the list may  be accompanied by a TreeAddress, with the interpretation that nodesof the given type are blocked by the currentnode only if they are dominated by the nodeat the Tree Address.L ieberman,  Lochak  and Ochel- 4 -gram:F ie lds  Gi - subcategor i za t ion  features ,The fol lowing types of condi t ions  a re  now inc luded in the pro -Type A Format  A +- (Tree Address)Interpretation: The current branch (the Ci under whichthe condition occurs) requires either the presence (if +is used) or the absence (if - is used) of the node at theTree Address.Type  B Format  i: BInterpretation: The current branch is optionalType B Format  2: B + (Tree Address)Interpretation: The current branch is optional only if thenode at the Tree Address  is present (if + is used) orabsent (if - is used)?Type DB Format  I: DBInterpretation: The current branch is optionally deletable@Type DB Format  2: DB + (Tree Address)Interpretation: The current branch is optionally deletableonly if the node at the Tree Address  is present (if + isused) or absent (if - is used)Type DD Format  i: DDInterpretation: The current branch is obligatorilyde le tab le .Type DD Format  2: DD +- (T ree  Address}In terpretat ion :  The cur rent  b ranch  is ob l igator i l yde le tab le  only if the node at the Tree  Address  is p resent(if + is used) or absent (if - is used).L ieberman,  Lochak  and  0che l- 5 -Type G Format :  G i / j  (T ree  Address ) (T ree  Address )In terpreta t ion :  The  presence  of the cur rent  b ranch  re -qu i res  ident i ty  of  the features  at  subf ie ld  i of  the  G- f ie ldof  the  node  at  the f i r s t  T ree  Address  and  subf ie ld  j of theG f ie ld  of  the node  at the  second Tree  Address .Type  H Format :  H (T ree  Address )  (T ree  Address )In terpreta t ion :  The  lex ica l  i tem at the f i r s t  T ree  Addressmust  p recede  the lex ica l  i tem at  the  second Tree  Address .If e i ther  of  the Tree  Addresses  does  not  po in t  to a lex ica li tem,  the cond i t ion  s ta tement  is in  e r ror .Type  S Format :  SIn terpreta t ion :  The  cur rent  b ranch  is se l f  sa t i s fy ing ,  i .e .it is not  a lex ica l  i tem but  has  no descendents .
Th is  con-d i t ion  is used ,  fo r  example ,  w i th  sentence  boundarybranches .In add i t ion  to the above  cond i t ion  types ,  a spec ia l  dev ice  isused  to ind icate  that  a group  of poss ib le  descendents  of  a g iven  nodeare  mutua l ly  exc lus ive .
When on ly  two branches  are  invo lved ,  aType  A - cond i t ion  can  be used ,  but  when more  than  two branchesare  invo lved ,  the  use  of Type  A - cond i t ions  becomes  awkward .The  Sentence  Ana lys i s  ' P rocedureA cent ra l  feature  of  any  automat ic  sentence  s t ruc ture  ana lys i sp rocedure  is the  manner  in wh ich  syntact i c  ambigu i ty  is hand leddur ing  the process ing .
Even  syntact i ca l ly  un ique  sentences  wi l l ,dur ing  the  process ing ,  exh ib i t  mu l t ip le  potent ia l i t ies .
The  fo r -ma l i sm fo r  hand l ing  such  in termed ia te  representat ions  is a very  im-por tant  par t  of  the heur i s t i c  capac i ty  of  the program.
In the  presentL ieberman,  Lochak and Ochei- 6 -system,  a compact graph- l ike  s t ructure  is used for in termediaterepresentat ion .
At the end of the ana lys is ,  al l  syntact ic  readings ofthe sentence are represented  by a single graph with appropr ia te lymarked condit ions on its ver t ices  and edges.
A specia l  output a lgor i thmis requ i red  to extract  the syntact ica l ly  permi t ted  t rees  f rom the compactgraph representation.The scanning sequence (single-pass, iterative, multipass,left-to-rlght, right-to-left, chunk and process, etc? )
has been madea semi-independent component of the procedure in order to permitflexibility in the future application of theoretically or heuristicallymotivated approaches to search strategy?
In the present version ofthe system, a left-to-right single-pass search strategy is used.This very simple search strategy was chosen as a start in order topermit concentration on the complexities in the other parts of theprocedure.The sentence is analyzed one item at a time f rom left to right.The items on which the analysis procedure operates are not theorthographic words, but rather, the result of a dictionary lookupstep which includes some morphophonemic  analysis.
Thus, wentwould be analyzed into go + ~ painted would be analyzed intopaint +past  or e n, etc.
The dictionary lookup step would alsoyield, for each item, the node type or types (A-field) of which theitem is a descendent, and subcategorization features to be placedin the corresponding G-fields.
Thus, after dictionary lookup, theinput sentence would be replaced by a string of nodes?
These nodes arethe items which are processed one at a time, left-to-right.The following sketch of the analysis procedure is intended toindicate current status; numerous  details are omitted?Lieberman, Lochak and Ochel- 7 -Suppose  d ic t ionary  lookup y ie lded  the  fo l low ing  s t r ing  of  nodes :A l l  poss ib le  immediate  ancestors  of  X ( l i s ted  in i ts  B - f ie ld )  a re  bu i l tup.
Thus ,  i f  the  B - f ie ld  of  node  X conta inedB1 PB2 QB3 Rthe  fo l low ing  s t ruc ture  wou ld  resu l tand branches PX, QX and RX would be marked as mutually exclusivein any  one read ing  of  the  sentence .
Then ,  in the  same manner ,  a l lposs ib le  ancestors  of  node  P wou ld  be fo rmed,  and  the  bu i ld ing  upwardprocess  wou ld  cont inue  unt i l  a spec ia l  node  type  w i thout  ancestors( the root  of  the  t ree)  was  reached.
If the  grammar  permi ts  recurs ion ,some method  fo r  p revent ing  in f in i te  depth  must  be in t roduced .
Atp resent ,  we use  an  input  parameter  n wh ich  l im i ts  the  number  of  newnodes  of  any  one  type  on a s ing le  ancestor  s t r ing  to no As w i l l  be -come c learer  b~=low, th i s  does  not  l im i t  the to ta l  recurs ion  in asentence  to noAt  th i s  po in t ,  we have  a s t ruc ture  of  the  fo rm:L ieberman,  Lochak  and  0che l- 8 -~-~OOT !?
/I I\ /where  the nodes  have  been  ass igned  numbers  fo r  conven ience  ofre fe rence  here in .
In the  ac tua l  p rocess ,  they  wou ld ,  of  course ,  bespec i f i c  node  types .Next ,  the new nodes  w i thout  ancestors  a re  bu i l t  upward  sys -temat ica l lyo  The  end  resu l t  ( syntact i c  read ings  of  the  sentence)shou ld  not  depend on the  sequence  used .
The  sequence  we are  nowus ing  was  chosen  fo r  p rogramming conven ience .
It is not  per fec t lyc lear  that  the end  resu l t  is in  fac t  independent  of  the  sequence ,  butthere  are ,  as yet ,  no ind icat ions  to the  cont rary .
In the  sequence  weare  now us ing ,  node  2 wou ld  be bu i l t  upward  next .
If new nodesw i thout  ancestors  were  fo rmed,  they  wou ld  be processed  next .
Whenprocess ing  of node  2 and  i ts  ancestors  is completed ,  node  5 is bu i l tupward  s imi la r ly ,  then  node  7, 8, Q and  R in that  o rder .L ieber rnan ,  Lochak  and  Oche l- 9 "Dur ing  the  bu i ld ing  upward  of  the very  f i r s t  ancestor  s t r ingX -P -6 -4 -3 -1 -ROOT,  there  was  no cho ice  but  to cont inua l ly  c reatenew nodes  to serve  as  the  requ i red  ancestors .
However ,  in sub-sequent  bu i ld -ups ,  a requ i red  ancestor  node  type  may a l ready  ex is t ,in wh ich  case  it  is  used ,  p rov id ing  that  it  doesn ' t  resu l t  in a node  dom-inat ing  i t se l f .
If two or  more  nodes  share  a common ancestor ,  thecor respond ing  branches  are  marked  as  mutua l ly  exc lus ive  even  if thedescendent  node  types  are  d i f fe rent  and  compat ib le  f rom the  po in t  o fv iew of the ancestor  node  (i. e. they  a t tach  to d i f fe rent  par ts  of  theancestor ' s  C - f ie ld ) ,  because  we are  s t i l l  cons ider ing  the  bu i ldup  ofa s ing le  i tem,  node  X, wh ich  cou ld  not  serve  as two const i tuentss imu l taneous ly  in  any  g iven  syntact i c  read ing  of the  sentence .Fo l low ing  complet ion  of  the bu i ld ing  up of  node  X, the re -su l tant  s t ruc ture  is scanned fo r  c losed  branches .
A branch  is ca l ledc losed  i f  a l l  read ings  of  a sentence  requ i re  the  presence  of  that  b ranch .The  tes t  fo r  whether  a branch  is c losed  is whether  remova l  of thebranch  wou ld  complete ly  d i sconnect  node  X f rom the  root?
Forexample ,  in  the  ?o l lowlng  s t ruc ture :L ieberman,  Lochak  and Ochel-10 -b ranches  U-T  and P -X  are  c losed .
C losed  branches  are  markedaccord ing ly .A node with a c losed  branch  is ca l led  def in i te .
If a node isnot def in i te,  it is ca l led  potent ia l .
This nomenc la ture  wi l l  be usedbelow.The next step is the tes t ing  of the condi t ions assoc ia ted  withthe var ious  branches  es tab l i shed  ur ing  the bui ldup.
The condit ionsto be tes ted  for  a g iven branch  are  l i s ted  in the cor respond ing  par t  ofthe C- f ie ld  of the node f rom which  the branch  descends .
Since theresu l t s  of condi t ion  test ing  depend on b lockage,  wh ich  has not yetbeen d iscussed ,  a deta i led  descr ip t ion  of condi t ion tes t ing  wi l l  bepostponed unti l  p rocess ing  of the next ~em (one which  is not thele f tmost  i tem) is cons idered .After  condi t ion  test ing,  b lockages  are  appl ied.
There  are  twotypes of b lockage - permanent  and temporary ,  and each  type can bedef in i te or potent ia l .
The in fo rmat ion  caus ing b lockage is in theD- f ie ld  and the E - f ie ld  of each  node type.
The D- f ie ld  is used  to in-dicate whether or not the node is continuous, i.e.
whether the lexlcalitems dominated by the node occupy a continuous segment of the inputstring.
Each of the continuous nodes created during the building upprocess causes temporary  blockage to be applied to every node whichit does not dominate.
If the node causing blockage is definite, theblockage is definite; if the node causing blockage is potential, theblockage is potential.
When a node causes temporary  definite blockagea list is kept, at the node causing blockage, of all the temporaryblockages caused by that node.
Later, when the node causing blockagehas been filled with the required constituents, the blockage it causedLieberman, Lochak and Ochei-11  -is removed.
In the case of temporary  potential blockage, a similarlist is created and, in addition (for reasons described below), arecord of the node causing blockage is made at each blocked node.The next blockage action involves permanent  blockage (bothdefinite and potential) and is guided by information in the E-fields ofthe various nodes created during the building up process?
However,we  are still discussing the processing of the very first (leftmost)item in the input string, and in this case, permanent  blockage doesnot apply.
Permanent  blockage action will be described below whenprocessing of the next input item is considered.This completes processing of the first item, and we proceedto the next input item.
The same building up process is carried out,except that now, a node (other than the root of the tree) required asan ancestor may already exist?
In this case, the existing node isused as the ancestor, providing that: I) it is not definitely blocked,and 2) the required branch is not closed?
If the existing node ispotentially blocked, a connection is made, but the connection and thenode which caused the potential blockage are marked  as mutuallyexclusive in any one reading of the sentence.
This is why  (asdescribed above) a record of the node causing potential blockage iskept at the potentially blocked node.
If a connection is made to apotentially blocked node, alternative ancestors are also createdsince (as described below) the potential blockage may later bechanged, retroactively, to definite blockage and the previously madeconnection would be erased.It can now be seen why  (as mentioned above) the recursionparameter  n does not limit the total recursion in a sentence to n?Lieberman, Lochak and Ochel-12 -The recursion parameter  limits the number  of ne___w nodes of a giventype which can be created along an ancestor string during the buildingup of a given input item.
Thus, in the building up of item 2, forexample, n nodes of a given type mat  be created along an ancestorstring and the string may then be connected to an already existingnode which in turn may have had n nodes of the given type createdalong its ancestor string.Af ter  the  bu i ld ing  up of  i tem 2 is completed ,  c losed  branchesare  marked  on the  newly  c reated  s t ruc ture  as  was  done  in the  process -ing of  i tem 1.
However ,  in the  case  of i tem 2 and  subsequent  i tems,fu r ther  ac t ion  is taken .
If a b ranch  marked  c losed  had  a l so  beenprev ious ly  (dur ing  the bu i ld ing  up) marked  as mutua l ly  exc lus ivew i th  some other  b ranch ,  the o ther  b ranch  is e rased .Whenever  a branch  is e rased ,  a rout ine  ca l led  CLEANUP isb rought  in to  ac t ion .
Th is  rout ine  fo l lows  up  a l l  the  consequences  ofe ras ing  a branch ,  and  c leans  up the  s t ruc ture  accord ing ly .
Forexample ,  i f  the  branch  be ing  erased  is marked  as  a necessary  co -occur rence  of some other  b ranch ,  the  o ther  b ranch  is a l so  e rased .If the branch  be ing  erased  is the  so le  ancestor  of  some node ,  thatnode  is e rased ,  i .e .
a l lo f  i ts  b ranches  are  e rased .
If a b ranchbe ing  erased  is an  ob l igatory  const i tuent  of  some permanent lyde f in i te ly  b locked  node ,  and  there  are  no compet ing  branchesrepresent ing  that  const i tuent ,  the  node  is e rased .
Dur ing  c leanup,a b ranch  wh ich  was  not  p rev ious ly  c losed  may become c losed ,  thusmak ing  some prev ious ly  potent ia l  node  de f in i te .
If the  node  in quest ioncaused  b lockage  at the  t ime it  was  c reated ,  the  b lockage  wou ld  havebeen  potent ia l .
The  b lockage  is now m~de def in i te  re t roact ive ly .L ieberman,  Lochak  and Ochel-13  -This is the purpose  of the bookkeeping descr ibed  above regard ingconnect ions  made into potent ia l ly  b locked nodes.
A record  was keptof al l  b ranches  connected  into potent ia l ly  b locked nodes .
When a par t i c -u lar  potent ia l  b lockage becomes  def in i te,  the cor respond ing  markedbranches  are  e rased .
Or, c leanup may operate  in the reversedirection.
If a branch which had been connected into a potentiallyblocked node becomes  closed during cleanup, the node which causedthe blockage is erased.The above account of cleanup is not meant  to be exhaustive,but s imply to describe the main  features of the CLEANUP routine.The cleanup routine may run into a contradiction.
Forexample, a definite node or a closed branch might be marked  forerasure.
When this happens, the analysis is terminated, and thesentence is labeled "non-grammat ica l"oReturning to the main  routine (CLEANUP is a subroutineused repeatedly during the main  routine), the next step is conditiontesting.
Each  of the conditions listed in the various newly creatednode Ci-fields which received candidates are tested.
The  result ofa condition test is YES ,  NO, or UNTESTABLE.
YES  means  thecondition is satisfied, NO means  the condition is violated, andUNTESTABLE means  that the condition was  untestable because oneor more  of the nodes involved in the condition did not exist at thetime the condition was  tested.If the result of a condition test is YES ,  no further action istaken.
If the result is NO~ the subsequent action depends on thestatus of the various branches involved in the test.
If none of thebranches (including the one under which the test is listed) areL ieberman,  Lochak  and  0che l14 -c losed ,  they  are  marked  as mutua l ly  exc lus ive .
If the branch  underwh ich  the tes t  is  l i s ted  is c losed  and  the  o ther  b ranches  invo lved  inthe tes t  a re  not ,  the  la t te r  a re  e rased .
If both  are  c losed ,the ana lys i s  is te rminated  and  the sentence  is labe led  "non-gram-mat ica l " .
The  erasures  a re  car r ied  out  by  the  CLEANUP rout ineand  a l l  consequences  of  each  erasure  are  fo l lowed up as  descr ibedabove .A few UNTESTABLE resu l t s  can  be ac ted  upon.
For  example ,i f  a cond i t ion  on X is that  it  fo l low Y, and  Y does  not  ex is t ,  the re -su l t  is equ iva lent  to a NO resu l t .
However ,  w i th  most  cond i t ion  tes tsresu l t ing  in UNTESTABLE,  no immediate  ac t ion  is taken .
A l i s t  ofsuch  events  is kept  and  the tes ts  a re  reapp l ied  a f te r  the  las t  i tem inthe sentence  is p rocessed .
It is ,  of course ,  h igh ly  des i rab le  toreapp ly  prev ious ly  untes tab le  cond i t ions  the moment  they  becometes tab le .
Methods  fo r  accompl i sh ing  th i s ,  w i thout  pay ing  so h igh  apr i ce  in mach ine  t ime and/or  space  that  the advantages  are  nu l l i f i ed ,a re  be ing  cons idered ,  but  at th i s  po in t  in the  work  a re  not  of  theh ighest  p r io r i ty ,  because  the end  resu l t  ( the s t ruc tura l  descr ip t ion)shou ld  depend on ly  on the co l lec t ion  of cond i t ions  and  not  on the orderin wh ich  they  are  app l ied .
Th is  and  o ther  p rob lems concernedpr imar i l y  w i th  mach ine  runn ing  t ime w i l l  rece ive  inc reasedemphas is  in the fu ture .Cont inu ing  w i th  the  main  cyc le ,  the  next  s tep  is app l i ca t ionof  b lockage .
F i r s t ,  temporary  b lockage ,  as  ind icated  by the  D- f ie ldsof  the  newly  c reated  nodes ,  is app l ied  to a l l  re levant  nodes ,  bothnewly  c reated  and  prev ious ly  ex is t ing .
The  procedure  is the same asin the case  of  the  f i r s t  input  i tem.Lieberman, Lochak and Ochel-15 -Next, permanent  blockage, as indicated by the E- f ie lds  of thenewly created nodes, is applied.
The procedure is similar to thatused for applying temporary  blockage, the essential difference beingthat blockage is applied only to previously existing nodes, and not tonewly created nodes.
This explains why  permanent  blockage did notapply during the processing of the first item -- there were no pre-viously existing nodes, only newly created nodes?
In the actualprogram, it was convenient to allow permanent blockage to be appliedduring the processing of the first item, but the result is, of course,VACUOUS.Application of permanent  blockage provides possibilities forcleanup which do not occur in the case of temporary blockage.
If anode is marked  permanently definitely blocked, it is checked to seewhether it contains all of its non-deletable obligatory branches.
Ifit does not, it is m~rked  for erasure and the CLEANUP subroutinegoes into action.This completes the processing of item 2.
The next and sub-sequent input items are processed similarly, until the final item,representing end of sentence, is reached.
This item has only onepossible ancestor (the special node at the root of the tree) and itsE-field lists all node types.
Thus, it permanently and definitelyblocks all nodes?
When all of these blockages have been applied andthe resulting cleanups have been carried out, the analysis is com-pleted, and we proceed to the output routine.The purpose of the output routine is to print out, explicitly,each of the possible syntactic readings of the sentence assigned bythe analysis procedure?
The individual readings are not explicit atL ieberman,  Lochak  and Ochei-16 -the end of the ana lys i s  rout ine  because  they are  al l  represented  by as ingle  compact  graph- l i ke  s t ruc ture  with dependenc ies  ( requ i red  co-occur rence  and mutua l  exc lus ion)  marked  on var ious  branches .
Theoutput rout ine  scans  the graph- l i ke  s t ruc ture  sys temat ica l ly  andpr in ts  out al l  t rees  wh ich  sat i s fy  the marked  dependenc ies ,  have thespec ia l  root  node as the i r  root,  and in which  each  input i tem appearsonce and only once as a leaf .The resu l t s  a re  pr in ted  out in a t ree  fo rmat .
As a compromisebetween readab i l i ty  and mach ine  conven ience ,  the t ree  is ro ta tedcounterc lockwise  through 90 ?
, and the const i tuents  of each  node arejus t i f ied  upwards  (af ter  rotat ion)  to the leve l  of that node.
Thus,  theusua l  fo rm of a t ree ,  such asABE F /,,,G HC DI J K PL MINwould appear  in the fo l lowing output format :A D PKC 3"IB FEMLHGNL ieberman,  Lochak  and Oche l-17-The prob lem of l in ing symbols  up proper ly  is s imp l i f ied  by our  re -qu i rement  that  al l  symbo ls  be f ive or  less  characters  long.As ind icated  above  in the descr ip t ion  of the types  of cond i t ionscur rent ly  used ,  a d i s t inc t ion  is made between opt iona l  and de le tab leconst i tuents .
The essent ia l  d i f fe rence  is that  a de le ted  const i tuentshou ld  be f i l led  in if the s t ructura l  descr ip t ion  is to be a reasonab leapprox imat ion  to deep s t ructure .
For  example ,  the sub jec t  or  ob jec tin a re la t ive  c lause  is de le ted  in the sur face  s t ructure ,  but can  bef i l led  in in the deep s t ructure  by copy ing  the noun in the noun phrasewhose  determiner  conta ins  the sentence  wh ich  is re la t iv i zed .
Or,  ifthe agent  in a pass ive  sentence  is de le ted  in the sur face  s t ructure ,  itcan  be f i l led  in at leas t  by an indef in i te  such  as someone or  some-th ing in the deep s t ructure .
At p resent ,  our  output  only  ind icatesthat  a de le ted  const i tuent  ex is ts  in the deep s t ructure ,  but we havenot yet  fo rmulated  and programmed the ru les  for  f i l l ing in suchconst i tuents .
These  ru les  a re  a l so  needed dur ing  the ana lys i s  topermi t  cond i t ion  tes t ing  where  de le ted  i tems are  invo lved .
Atp resent ,  if a cond i t ion  tes t  tu rns  out to invo lve  a de le ted  i tem,  thetes t  is ignored .The GrammarAn overview of the grammatical categories (node types) andthe i r  re la t ions  in s t ructura l  descr ip t ions  is g iven  in F igure  1.
Mostof the under l ined  symbols  a re  pre - lex ica l  i tems,  but some ( thosebeg inn ing  wi th  S) wi l l  be expanded la ter .
The over l ine  on some ofthe symbols  is used  to ind icate  that  they  are  expanded e lsewhere  inthe d iagram.
An example  of a node type and its assoc ia ted  fi 'eldsLieberman, Lochak and Ochel-18 -is given in Figure Z in the fo rm in which we work  with the grammar .Each  line is on a separate punched card.The collection of categories was taken, for the most  part, f romthe phrase structure portion of a transformational g rammar  of Englishbeing developed at IBM.
Some additional categories such as SREL ,SMNL,  SFT,  SPT  and SCOND were introduced to simplify conditionstatements using the current set of condition types.
As more  conditiontypes are formulated and incorporated into the program, theseadditional and essentially redundant categories may be eliminated.Symbols  beginning with X have no descriptive significance.
Theywere  also introduced as a temporary  expedient to overcome certaindefects in the present formalism, and will be eliminated when theformal ism is appropriately modified.
If these structurally super-fluous nodes cause too much clutter in the output, they can beeliminated by simply erasing each one and connecting its immediatedescendents to its ancestor as each tree is printed out.The present grammar  is very far f rom complete, in any senseof the word.
The category types are reasonably extensive, but onlya smattering of conditions are present, and these were  selectedmainly to test various portions of the program as they werecompleted.
However,  problems encountered thus far in using theformal ism to express grammatica l  information have been solvedwithout undue difficulty.Some samples of output, and details regarding the programmingwill be presented during one of the informal afternoon group meetings.Lieberman, Lochak and Ochel-19-x~J,0.NI~  r.Jc("-~,jLieberman, Lochak and Ochel- ZO -SRELXSRELPRE-SNPAUXVPPOSTSSRELBA -(CICI)DD +(C~C2C3C2C1CIIH C2C2i (C3CI IH C2C21(C&C2CIIBIB IB331C2) (C2H C3C!
)1C4C2}3~E-SR?L.~RELS~E~~R-LS~ELSRELS~:LSRELSRmZL3,~riLSRELSREL$RELSRELSRELFigure 2f
