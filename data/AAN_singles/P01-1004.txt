Low-cost, High-performance Translation Retrieval:Dumber is BetterTimothy BaldwinDepartment of Computer ScienceTokyo Institute of Technology2-12-1 O-okayama, Meguro-ku, Tokyo 152-8552 JAPANtim@cl.cs.titech.ac.jpAbstractIn this paper, we compare the rela-tive effects of segment order, segmen-tation and segment contiguity on theretrieval performance of a translationmemory system.
We take a selec-tion of both bag-of-words and segmentorder-sensitive string comparison meth-ods, and run each over both character-and word-segmented data, in combina-tion with a range of local segment con-tiguity models (in the form of N-grams).Over two distinct datasets, we find thatindexing according to simple characterbigrams produces a retrieval accuracysuperior to any of the tested word N-gram models.
Further, in their optimumconfiguration, bag-of-words methods areshown to be equivalent to segment order-sensitive methods in terms of retrievalaccuracy, but much faster.
We also pro-vide evidence that our findings are scal-able.1 IntroductionTranslation memories (TMs) are a list oftranslation records (source language stringspaired with a unique target language translation),which the TM system accesses in suggesting alist of target language (L2) translation candi-dates for a given source language (L1) input (Tru-jillo, 1999; Planas, 1998).
Translation retrieval(TR) is a description of this process of selectingfrom the TM a set of translation records (TRecs)of maximum L1 similarity to a given input.
Typi-cally in example-based machine translation, eithera single TRec is retrieved from the TM based ona match with the overall L1 input, or the inputis partitioned into coherent segments, and indi-vidual translations retrieved for each (Sato andNagao, 1990; Nirenburg et al, 1993); this is thefirst step toward generating a customised transla-tion for the input.
With stand-alone TM systems,on the other hand, the system selects an arbitrarynumber of translation candidates falling within acertain empirical corridor of similarity with theoverall input string, and simply outputs these formanual manipulation by the user in fashioning thefinal translation.A key assumption surrounding the bulk of pastTR research has been that the greater the matchstringency/linguistic awareness of the retrievalmechanism, the greater the final retrieval accu-racy will become.
Naturally, any appreciation inretrieval complexity comes at a price in terms ofcomputational overhead.
We thus follow the leadof Baldwin and Tanaka (2000) in asking the ques-tion: what is the empirical effect on retrieval per-formance of different match approaches?
Here,retrieval performance is defined as the combina-tion of retrieval speed and accuracy, with the idealmethod offering fast response times at high accu-racy.In this paper, we choose to focus on retrievalperformance within a Japanese?English TR con-text.
One key area of interest with Japaneseis the effect that segmentation has on retrievalperformance.
As Japanese is a non-segmentinglanguage (does not explicitly delimit words or-thographically), we can take the brute-force ap-proach in treating each string as a sequence ofcharacters (character-based indexing), or al-ternatively call upon segmentation technology inpartitioning each string into words (word-basedindexing).
Orthogonal to this is the question ofsensitivity to segment order.
That is, should ourmatch mechanism treat each string as an unor-ganised multiset of terms (the bag-of-words ap-proach), or attempt to find the match that bestpreserves the original segment order in the in-put (the segment order-sensitive approach)?We tackle this issue by implementing a sampleof representative bag-of-words and segment order-sensitive methods and testing the retrieval per-formance of each.
As a third orthogonal param-eter, we consider the effects of segment contigu-ity.
That is, do matches over contiguous segmentsprovide closer overall translation correspondencethan matches over displaced segments?
Segmentcontiguity is either explicitly modelled within thestring match mechanism, or provided as an add-inin the form of segment N-grams.To preempt the major findings of this pa-per, over a series of experiments we find thatcharacter-based indexing is consistently superiorto word-based indexing.
Furthermore, the bag-of-words methods we test are equivalent in re-trieval accuracy to the more expensive segmentorder-sensitive methods, but superior in retrievalspeed.
Finally, segment contiguity models providebenefits in terms of both retrieval accuracy andretrieval speed, particularly when coupled withcharacter-based indexing.
We thus provide clearevidence that high-performance TR is achievablewith naive methods, and moreso that such meth-ods outperform more intricate, expensive meth-ods.
That is, the dumber the retrieval mechanism,the better.Below, we review the orthogonal parameters ofsegmentation, segment order and segment conti-guity (?
2).
We then present a range of both bag-of-words and segment order-sensitive string com-parison methods (?
3) and detail the evaluationmethodology (?
4).
Finally, we evaluate the dif-ferent methods in a Japanese?English TR context(?
5), before concluding the paper (?
6).2 Basic ParametersIn this section, we review three parameter typesthat we suggest impinge on TR performance,namely segmentation, segment order, and segmentcontiguity.2.1 SegmentationDespite non-segmenting languages such asJapanese not making use of segment delimiters,it is possible to artificially partition off a givenstring into constituent morphemes through theprocess of segmentation.
We will collectivelyterm the resultant segments as words for theremainder of this paper.Looking to past research on string compari-son methods for TM systems, almost all sys-tems involving Japanese as the source lan-guage rely on segmentation (Nakamura, 1989;Sumita and Tsutsumi, 1991; Kitamura and Ya-mamoto, 1996; Tanaka, 1997), with Sato (1992)and Sato and Kawase (1994) providing rare in-stances of character-based systems.
Thisis despite Fujii and Croft (1993) providing evi-dence from Japanese information retrieval thatcharacter-based indexing performs comparably toword-based indexing.
In analogous research,Baldwin and Tanaka (2000) compared character-and word-based indexing within a Japanese?English TR context and found character-based in-dexing to hold a slight empirical advantage.The most obvious advantage of character-basedindexing over word-based indexing is that thereis no pre-processing overhead.
Other argumentsfor character-based indexing over word-based in-dexing are that we: (a) avoid the need to com-mit ourselves to a particular analysis type in thecase of ambiguity or unknown words; (b) avoidthe need for stemming/lemmatisation; and (c) toa large extent get around problems related to thenormalisation of lexical alternation.Note that all methods described below are ap-plicable to both word- and character-based index-ing.
To avoid confusion between the two lexemetypes, we will collectively refer to the elements ofindexing as segments.2.2 Segment OrderOur expectation is that TRecs that preserve thesegment order observed in the input string willprovide closer-matching translations than TRecscontaining those same segments in a different or-der.As far as we are aware, there is no TM sys-tem operating from Japanese that does not relyon word/segment/character order to some degree.Tanaka (1997) uses pivotal content words identi-fied by the user to search through the TM andlocate TRecs which contain those same contentwords in the same order and preferably the samesegment distance apart.
Nakamura (1989) simi-larly gives preference to TRecs in which the con-tent words contained in the original input occur inthe same linear order, although there is the scopeto back off to TRecs which do not preserve theoriginal word order.
Sumita and Tsutsumi (1991)take the opposite tack in iteratively filteringout NPs and adverbs to leave only functionalwords and matrix-level predicates, and find TRecswhich contain those same key words in thesame ordering, preferably with the same seg-ment types between them in the same num-bers.
Sato and Kawase (1994) employ a more lo-cal model of character order in modelling similar-ity according to N-grams fashioned from the orig-inal string.2.3 Segment contiguityGiven the input ?1?2?3?4 , we would expect thatof ?1?1?2?2?3?3?4 and ?1?2?3?4?1?2?3 , thelatter would provide a translation more reflectiveof the translation for the input.
This intuitionis captured either by embedding some contiguityweighting facility within the string match mecha-nism (in the case of weighted sequential correspon-dence ?
see below), or providing an independentmodel of segment contiguity in the form of seg-ment N-grams.The particular N-gram orders we test are simpleunigrams (1-grams), pure bigrams (2-grams), andmixed unigrams/bigrams.
These N-gram modelsare implemented as a pre-processing stage, fol-lowing segmentation (where applicable).
All thisinvolves is mutating the original strings into N-grams of the desired order, while preserving theoriginal segment order and segmentation schema.From the Japanese string?
??
??
[natu?no?ame]?summer rain?,1 for example, we would generatethe following variants (common to both character-and word-based indexing):1-gram: ?
??
?
?2-gram: ??
??
?Mixed 1/2-gram: ?
???
??
???
?
?3 String Comparison MethodsAs the starting point for evaluation of thethree parameter types targeted in this re-search, we take two bag-of-words (segment order-oblivious) and three segment order-sensitive meth-ods, thereby modelling the effects of segment or-der (un)awareness.
We then run each method overboth segmented and unsegmented data in combi-nation with the various N-gram models proposedabove, to capture the full range of parameter set-tings.The particular bag-of-word approaches we tar-get are the vector space model (Manning andSchu?tze, 1999, p300) and ?token intersection?.For segment order-sensitive approaches, we test3-operation edit distance and similarity, and also?weighted sequential correspondence?.All methods are formulated to operate over anarbitrary wt schemata, although in L1 string com-parison throughout this paper, we assume thatany segment made up entirely of punctuation isgiven a wt of 0, and any other segment a wt of 1.1 Character boundaries (which double as wordboundaries in this case) indicated by ??
?.All methods are subject to a threshold ontranslation utility, and in the case that thethreshold is not achieved, the null string is re-turned.
The various thresholds are as follows:Comparison method ThresholdVector space model 0.5Token intersection 0.43-operation edit distance len(IN)3-operation edit similarity 0.4Weighted seq.
correspondence 0.2where IN is the input string, and len is the con-ventional segment length operator.Various optimisations were made to each stringcomparison method to reduce retrieval time, of thetype described by Baldwin and Tanaka (2000).While the details are beyond the scope of this pa-per, suffice to say that the segment order-sensitivemethods benefited from the greatest optimisation,and that little was done to accelerate the alreadyquick bag-of-words methods.3.1 Bag-of-Words MethodsVector Space ModelWithin our implementation of the vectorspace model (VSM), the segment content of eachstring is described as a vector, made up of a singledimension for each segment type occurring withinS or T .
The value of each vector component isgiven as the weighted frequency of that type ac-cording to its wt value.
The string similarity of Sand T is then defined as the cosine of the anglebetween vectors S and T , respectively, calculatedas:cos(S, T ) =S ?
T|S||T |=?jsjtj??js2j?
?jt2jToken IntersectionThe token intersection of S and T is de-fined as the cumulative intersecting frequency ofsegment types appearing in each of the strings,normalised according to the combined segmentlengths of S and T using Dice?s coefficient.
For-mally, this equates to:tint(S,T ) =2 ?
?e?S,Tmin(freqS(e), freqT (e))len(S) + len(T )where each e is a segment occurring in either S orT , freqS(e) is defined as the wt-based frequency ofsegment type e occurring in string S, and len(S)is the segment length of string S, that is the wt-based count of segments contained in S (similarlyfor T ).3.2 Segment Order-sensitive Methods3-op Edit Distance and SimilarityEssentially, the segment-based 3-operationedit distance between strings S and T is the min-imum number of primitive edit operations on sin-gle segments required to transform S into T (andvice versa).
The three edit operations are seg-ment equality (segments si and tj are identical),segment deletion (delete segment si) and segmentinsertion (insert segment a into a given positionin string S).
The cost associated with each opera-tion is determined by the wt values of the operandsegments, with the exception of segment equalitywhich is defined to have a fixed cost of 0.Dynamic programming (DP) techniques areused to determine the minimum edit distancebetween a given string pair, following the clas-sic 4-operation edit distance formulation ofWagner and Fisher (1974).2 For 3-operation editdistance, the edit distance between strings S =s1s2...sm and T = t1t2...tn is defined asD3op(S, T ):D3op(S,T ) = d3(m,n)d3(i, j) =?????
?0 if i = 0 ?
j = 0d3(0, j ?
1) + wt(tj) if i = 0 ?
j = 0d3(i ?
1, 0) + wt(si) if i = 0 ?
j = 0min(d3(i ?
1, j) + wt(si),d3(i, j ?
1) + wt(tj),m3(i, j))otherwisem3(i, j) ={d3(i ?
1, j ?
1) if si = sj?
otherwiseIt is possible to normalise operation edit dis-tance D3op into 3-operation edit similarityS3op by way of:S3op(S, T ) = 1 ?D3op(S, T )len(S) + len(T )Weighted Sequential CorrespondenceWeighted sequential correspondence (originallyproposed in Baldwin and Tanaka (2000)) goes onestep further than edit distance in analysing notonly segment sequentiality, but also the contiguityof matching segments.Weighted sequential correspondence associatesan incremental weight (orthogonal to our wtweights) with each matching segment assessing thecontiguity of left-neighbouring segments, in themanner described by Sato (1992) for character-based matching.
Namely, the kth segment ofa matched substring is given the multiplicativeweight min(k,Max ), where Max is a positive in-teger.
This weighting up of contiguous matchesis facilitated through the DP algorithm given be-low:Sw(S, T ) = s(m,n)s(i, j) ={0 if i = 0 ?
j = 0max(s(i ?
1, j),s(i, j ?
1),s(i ?
1, j ?
1) + mw(i, j))otherwisemw(i, j) ={cm(i, j) ?
wt(i) if si = sj0 otherwisecm(i, j) ={0 if i = 0 ?
j = 0 ?
si = tjmin(Max , cm(i?
1, j ?
1) + 1) otherwise2 The fourth operator in 4-operation edit distanceis segment substitution.The final similarity is determined as:WSC (S,T ) =2 ?
Sw(S,T )lenWSC (S) + lenWSC (T )where lenWSC (S) is the weighted length of S, de-fined as:lenWSC (S) =?mi=1wt(si) ?
min(Max , i)4 Evaluation Specifications4.1 Details of the DatasetAs our main dataset, we used 3033 uniqueJapanese?English TRecs extracted from construc-tion machinery field reports for the purposes ofthis research.
Most TRecs comprise a single sen-tence, with an average Japanese character lengthof 27.7 and English word length of 13.3.
Impor-tantly, our dataset constitutes a controlled lan-guage, that is, a given word will tend to be trans-lated identically across all usages, and only a lim-ited range of syntactic constructions are employed.In secondary evaluation of retrieval performanceover differing data sizes, we extracted 61,236Japanese?English TRecs from the JEIDA parallelcorpus (Isahara, 1998), which is made up of gov-ernment white papers.
The alignment granular-ity of this second corpus is much coarser than forthe first corpus, with a single TRec often extend-ing over multiple sentences.
The average Japanesecharacter length of each TRec is 76.3, and the av-erage English word length is 35.7.
The languageused in the JEIDA corpus is highly constrained,although not as controlled as that in the first cor-pus.The construction of TRecs from both corporawas based on existing alignment data, and no fur-ther effort was made to subdivide partitions.For Japanese word-based indexing, segmenta-tion was carried out primarily with ChaSen v2.0(Matsumoto et al, 1999), and where specificallymentioned, JUMAN v3.5 (Kurohashi and Nagao,1998) and ALTJAWS3 were also used.4.2 Semi-stratified Cross ValidationRetrieval accuracy was determined by way of10-fold semi-stratified cross validation over thedataset.
As part of this, all Japanese strings oflength 5 characters or less were extracted fromthe dataset, and cross validation was performedover the residue, including the shorter strings inthe training data (i.e.
TM) on each iteration.In N-fold stratified cross validation, the datasetis divided into N equally-sized partitions of uni-form class distribution.
Evaluation is then carriedout N times, taking each partition as the held-out test data, and the remaining partitions as thetraining data on each iteration; the overall accu-racy is averaged over the N data configurations.As our dataset is not pre-classified according to adiscrete class description, we are not able to per-form true data stratification over the class distri-bution.
Instead, we carry out ?semi-stratification?over the L1 segment lengths of the TRecs.3http://www.kecl.ntt.co.jp/icl/mtg/resources/altjaws.html4.3 Evaluation of the OutputEvaluation of retrieval accuracy is carried out ac-cording to a modified version of the method pro-posed by Baldwin and Tanaka (2000).
The firststep in this process is to determine the set of ?op-timal?
translations by way of the same basic TRprocedure as described above, except that we usethe held-out translation for each input to searchthrough the L2 component of the TM.
As for L1TR, a threshold on translation utility is then ap-plied to ascertain whether the optimal translationsare similar enough to the model translation to beof use, and in the case that this threshold is notachieved, the empty string is returned as the soleoptimal translation.Next, we proceed to ascertain whether the ac-tual system output coincides with one of the opti-mal translations, and rate the accuracy of eachmethod according to the proportion of optimaloutputs.
If multiple outputs are produced, we se-lect from among them randomly.
This guaran-tees a unique translation output and differs fromthe methodology of Baldwin and Tanaka (2000),who judged the system output to be ?correct?
ifthe potentially multiple set of top-ranking outputscontained an optimal translation, placing methodswith greater fan-out of outputs at an advantage.So as to filter out any bias towards a given stringcomparison method in TR, we determine transla-tion optimality based on both 3-operation edit dis-tance (operating over English word bigrams) andalso weighted sequential correspondence (operat-ing over English word unigrams).
We then de-rive the final translation accuracy as the averageof the accuracies from the respective evaluationsets.
Here again, our approach differs from thatof Baldwin and Tanaka (2000), who based deter-mination of translation optimality exclusively on3-operation edit distance (operating over word un-igrams), a method which we found to produce astrong bias toward 3-operation edit distance in L1TR.In determining translation optimality, all punc-tuation and stop words were first filtered out ofeach L2 (English) string, and all remaining seg-ments scored at a wt of 1.
Stop words are definedas those contained within the SMART (Salton,1971) stop word list.4Perhaps the main drawback of our approachto evaluation is that we assume a unique modeltranslation for each input, where in fact, multipletranslations of equivalent quality could reasonablybe expected to exist.
In our case, however, bothcorpora represent relatively controlled languagesand language use is hence highly predictable.
Theproposed evaluation methodology is thus justified.5 Results and Supporting Evidence5.1 Basic evaluationIn this section, we test our five string comparisonmethods over the construction machinery corpus,under both character- and word-based indexing,and with each of unigrams, bigrams and mixedunigrams/bigrams.
The retrieval accuracies andtimes for the different string comparison meth-ods are presented in Figs.
1 and 2, respectively.4ftp://ftp.cornell.cs.edu/pub/smart/english.stop50525456586062VSMTINT3opD3opSWSCVSMTINT3opD3opSVSMTINT3opD3opSRetrievalaccuracy(%)String comparison methodWord-based indexingChar-based indexing** ****1-gram 2-gram 1/2-gramFigure 1: Basic retrieval accuraciesHere and in subsequent graphs, ?VSM?
refers tothe vector space model, ?TINT?
to token inter-section, ?3opD?
to 3-op edit distance, ?3opS?
to3-op edit similarity, and ?WSC?
to weighted se-quential correspondence; the bag-of-words meth-ods are labelled in italics and the segment order-sensitive methods in bold.
In Figs.
1 and 2, resultsfor the three N-gram models are presented sepa-rately, within each of which, the data is sectionedoff into the different string comparison methods.Weighted sequential correspondence was testedwith a unigram model only, due to its inbuilt mod-elling of segment contiguity.
Bars marked with anasterisk indicate a statistically significant5 gainover the corresponding indexing paradigm (i.e.character-based indexing vs. word-based indexingfor a given string comparison method and N-gramorder).
Times in Fig.
2 are calibrated relative to3-operation edit distance with word unigrams, andplotted against a logarithmic time axis.Results to come from these figures can be sum-marised as follows:?
Character-based indexing is consistently su-perior to word-based indexing, particularlywhen combined with bigrams or mixed uni-grams/bigrams.?
In terms of raw translation accuracy, there isvery little to separate the best of the bag-of-words methods from the best of the segmentorder-sensitive methods.?
With character-based indexing, bigrams offertangible gains in translation accuracy at thesame time as greatly accelerating the retrievalprocess.
With word-based indexing, mixedunigrams/bigrams offer the best balance oftranslation accuracy and computational cost.?
Weighted sequential correspondence is mod-erately successful in terms of accuracy, butgrossly expensive.Based on the above results, we judge bi-grams to be the best segment contiguity modelfor character-based indexing, and mixed uni-grams/bigrams to be the best segment contiguity5 As determined by the paired t test (p < 0.05).110100VSMTINT3opD3opSWSCVSMTINT3opD3opSVSMTINT3opD3opSRelativeretrievaltimeString comparison methodWord-based indexingChar-based indexing1-gram2-gram 1/2-gramFigure 2: Basic unit retrieval timesmodel for word-based indexing, and for the re-mainder of this paper, present only these two setsof results.While we have been able to confirm the find-ing of Baldwin and Tanaka (2000) that character-based indexing is superior to word-based indexing,we are no closer to determining why this should bethe case.
In the following sections we look to shedsome light on this issue by considering each of: (i)the retrieval accuracy for other segmentation sys-tems, (ii) the effects of lexical normalisation, and(iii) the scalability and reproducibility of the givenresults over different datasets.
Finally, we presenta brief qualitative explanation for the overall re-sults.5.2 The effects of segmentation andlexical normalisationAbove, we observed that segmentation consis-tently brought about a degradation in translationretrieval for the given dataset.
Automated seg-mentation inevitably leads to errors, which couldpossibly impinge on the accuracy of word-basedindexing.
Alternatively, the performance dropcould simply be caused somehow by our particularchoice of segmentation module, that is ChaSen.First, we used JUMAN to segment the con-struction machinery corpus, and evaluated the re-sultant dataset in the exact same manner as forthe ChaSen output.
Similarly, we ran a devel-opment version of ALTJAWS over the same cor-pus to produce two datasets, the first simply seg-mented and the second both segmented and lex-ically normalised.
By lexical normalisation, wemean that each word is converted to its canonicalform.
The main segment types that normalisationhas an effect on are verbs and adjectives (conju-gating words), and also loan-word nouns with anoptional long final vowel (e.g.monita?
?monitor?
?monita) and words with multiple inter-replaceablekanji realisations (e.g.
??
[zyu?buN] ?sufficient??
??
).The retrieval accuracies for JUMAN, and ALT-JAWS with and without lexical normalisationare presented in Fig.
3, juxtaposed againstthe retrieval accuracies for character-based in-dexing (bigrams) and also ChaSen (mixed uni-grams/bigrams) from Section 5.1.
Asterisked bars50525456586062VSM TINT 3opD 3opS WSCRetrievalaccuracy(%)String comparison methodChaSenChar-based JUMANALTJAWS (?norm)ALTJAWS (+norm)**** ***** **Figure 3: Results using different segmentationmodulesindicate a statistically significant gain in accuracyover ChaSen.Looking first to the results for JUMAN, there isa gain in accuracy over ChaSen for all string com-parison methods.
With ALTJAWS, also, a con-sistent gain in performance is evident with simplesegmentation, the degree of which is significantlyhigher than for JUMAN.
The addition of lexi-cal normalisation enhances this effect marginally.Notice that character-based indexing (based oncharacter bigrams) holds a clear advantage overthe best of the word-based indexing results for allstring comparison methods.Based on the above, we can state that the choiceof segmentation system does have a modest im-pact on retrieval accuracy, but that the effects oflexical normalisation are highly localised.
In thefollowing, we look to quantify the relationship be-tween retrieval and segmentation accuracy.In the next step of evaluation, we took a randomsample of 200 TRecs from the original dataset, andran each of ChaSen, JUMAN and ALTJAWS overthe Japanese component of each.
We then man-ually evaluated the output in terms of segmentprecision and recall, defined respectively as:Segment precision =# correct segs in outputTotal # segs in outputSegment recall =# correct segs in outputTotal # segs in model dataOne slight complication in evaluating the out-put of the three systems is that they adopt in-congruent models of conjugation.
We thus madeallowance for variation in the analysis of verb andadjective complexes, and focused on the segmen-tation of noun complexes.A performance breakdown for ChaSen (CS),JUMAN (JM) and ALTJAWS (AJ) is presented inTab.
1.
ALTJAWS was found to outperform theremaining two systems in terms of segment pre-cision, while ChaSen and JUMAN performed atthe exact same level of segment precision.
Look-ing next to segment recall, ChaSen significantlyoutperformed both ALTJAWS and JUMAN.
Thesource of almost all errors in recall, and roughlyhalf of errors in precision for both ChaSen andCS JM AJAve.
segs/TRec 13.0 12.0 11.7Segment precision 98.3% 98.3% 98.6%Segment recall 98.1% 96.2% 97.7%Sentence accuracy 70.5% 59.0% 72.0%Total segment types 650 656 634Table 1: Segmentation performanceJUMAN was katakana sequences such as ge?to-rokku-barubu ?gate-lock valve?, transcribed fromEnglish.
ALTJAWS, on the other hand, was re-markably successful at segmenting katakana wordsequences, achieving a segment precision of 100%and segment recall approaching 99%.
This isthought to have been the main cause for the dis-parity in retrieval accuracy for the three systems,aggravated by the fact that most katakana se-quences were key technical terms.To gain an insight into consistency in the caseof error, we further calculated the total numberof segment types in the output, expecting to finda core set of correctly-analysed segments, of rel-atively constant size across the different systems,plus an unpredictable component of segment er-rors, of variable size.
The system generating thefewest segment types can thus be said to be themost consistent.Based on the segment type counts in Tab.
1,ALTJAWS errs more consistently than the re-maining two systems, and there is very little toseparate ChaSen and JUMAN.
This is thought tohave had some impact on the inflated retrieval ac-curacy for ALTJAWS.To summarise, there would seem to be a di-rect correlation between segmentation accuracyand retrieval performance, with segmentation ac-curacy on key terms (katakana sequences) havinga particularly keen effect on translation retrieval.In this respect, ALTJAWS is superior to bothChaSen and JUMAN for the target domain.
Ad-ditionally, complementing segmentation with lex-ical normalisation would seem to produce meagerperformance gains.
Lastly, despite the slight gainsto word-based indexing with the different segmen-tation systems, it is still significantly inferior tocharacter-based indexing.5.3 Scalability of performanceAll results to date have arisen from evaluation overa single dataset of fixed size.
In order to validatethe basic findings from above and observe howincreases in the data size affect retrieval perfor-mance, we next ran the string comparison meth-ods over differing-sized subsets of the JEIDA cor-pus.We simulate TMs of differing size by randomlysplitting the JEIDA corpus into ten partitions,and running the various methods first over par-tition 1, then over the combined partitions 1 and2, and so on until all ten partitions are combinedtogether into the full corpus.
We tested all stringcomparison methods other than weighted sequen-tial correspondence over the ten subsets of theJEIDA corpus.
Weighted sequential correspon-dence was excluded from evaluation due to itsoverall sub-standard retrieval performance.
Thetranslation accuracies for the different methods4050607080905976 11952 17937 23922 29898 35874 41859 47835 53820 61236Accuracy(%)Dataset size (# translation records)1/2-gram 3opS +seg2-gram 3opS ?seg1/2-gram 3opD +seg2-gram 3opD ?seg1/2-gram VSM +seg2-gram VSM ?segFigure 4: Retrieval accuracies over datasets of in-creasing sizeover the ten datasets of varying size, are indicatedin Fig.
4, with each string comparison methodtested under character bigrams (?2-gram ?seg?
)and mixed word unigrams/bigrams (?1/2-gram+seg?)
as above.
The results for token intersec-tion have been omitted from the graph due to theirbeing almost identical to those for VSM.A striking feature of the graph is that it is right-decreasing, which is essentially an artifact of theinflated length of each TRec (see Section 4.1) andresultant data sparseness.
That is, for smallerdatasets, in the bulk of cases, no TRec in the TMis similar enough to the input to warrant consid-eration as a translation candidate (i.e.
the trans-lation utility threshold is generally not achieved).For larger datasets, on the other hand, we are hav-ing to make more subtle choices as to the finaltranslation candidate.One key trend in Fig.
4 is the superiority ofcharacter- over word-based indexing for each ofthe three string comparison methods, at a rela-tively constant level as the TM size grows.
Alsoof interest is the finding that there is very littleto distinguish bag-of-words from segment order-sensitive methods in terms of retrieval accuracyin their respective best configurations.As with the original dataset from above, 3-operation edit similarity was the strongest per-former just nosing out (character bigram-based)VSM for line honours, with 3-operation edit dis-tance lagging well behind.Next, we turn to consider the mean unit re-trieval times for each method, under the two in-dexing paradigms.
Times are presented in Fig.
5,plotted once again on a logarithmic scale in orderto fit the full fan-out of retrieval times onto a singlegraph.
VSM and 3-operation edit distance werethe most consistent performers, both maintainingretrieval speeds in line with those for the originaldataset at around or under 1.0 (i.e.
the same re-trieval time per input as 3-operation edit distancerun over word unigrams for the construction ma-chinery dataset).
Most importantly, only minorincreases in retrieval speed were evident as theTM size increased, which were then reversed forthe larger datasets.
All three string comparisonmethods displayed this convex shape, althoughthe final running time for 3-operation edit simi-larity under character- and word-based indexing1101005976 11952 17937 23922 29898 35874 41859 47835 53820 61236RelativeretrievaltimeDataset size (# translation records)2-gram VSM ?seg1/2-gram VSM +seg2-gram 3opD ?seg1/2-gram 3opD +seg1/2-gram 3opD +seg2-gram 3opD ?segFigure 5: Relative unit retrieval times overdatasets of increasing sizewas, respectively, around 10 and 100 times slowerthan that for VSM or 3-operation edit distanceover the same dataset.To combine the findings for accuracy and speed,VSM under character-based indexing suggests it-self as the pick of the different system configura-tions, combining both speed and consistent accu-racy.
That is, it offers the best overall retrievalperformance.5.4 Qualitative evaluationAbove, we established that character-based index-ing is superior to word-based indexing for distinctdatasets and a range of segmentation modules,even when segmentation is coupled with lexicalnormalisation.
Additionally, we provided evidenceto the effect that bag-of-words methods offer supe-rior translation retrieval performance to segmentorder-sensitive methods.
We are still no closer,however, to determining why this should be thecase.
Here, we seek to provide an explanation forthese intriguing results.First comparing character- and word-based in-dexing, we found that the disparity in retrievalaccuracy was largely related to the scoring ofkatakana words, which are significantly longer incharacter length than native Japanese words.
Forthe construction machinery dataset as analysedwith ChaSen, for example, the average charac-ter length of katakana words is 3.62, as com-pared to 2.05 overall.
Under word-based index-ing, all words are treated equally and characterlength does not enter into calculations.
Thusa katakana word is treated identically to anyother word type.
Under character-based index-ing, on the other hand, the longer the word, themore segments it generates, and a single matchingkatakana sequence thus tends to contribute moreheavily to the final score than other words.
Ef-fectively, therefore, katakana sequences receive ahigher score than kanji and other sequences, pro-ducing a preference for TRecs which incorporatethe same katakana sequences as the input.
Asnoted above, katakana sequences generally repre-sent key technical terms, and such weighting thustends to be beneficial to retrieval accuracy.We next examine the reason for the high corre-lation in retrieval accuracy between bag-of-wordsand segment order-sensitive methods in their op-timum configurations (i.e.
when coupled withcharacter bigrams).
Essentially, the probabil-ity of a given segment set permuting in differ-ent string contexts diminishes as the number ofco-occurring segments decreases.
That is, for agiven string pair, the greater the segment over-lap between them (relative to the overall stringlengths), the lower the probability that those seg-ments are going to occur in different orderings.This is particularly the case when local segmentcontiguity is modelled within the segment de-scription, as occurs for the character bigram andmixed word uni/bigram models.
For high-scoringmatches, therefore, segment order sensitivity be-comes largely superfluous, and the slight edgein retrieval accuracy for segment order-sensitivemethods tends to come for mid-scoring matches,in the vicinity of the translation utility threshold.6 ConclusionThis research has been concerned with the rela-tive import of segmentation, segment order andsegment contiguity on translation retrieval per-formance.
We simulated the effects of word or-der sensitivity vs. bag-of-words word order insen-sitivity by implementing a total of five compar-ison methods: two bag-of-words approaches andthree word order-sensitive approaches.
Each ofthese methods was then tested under character-based and word-based indexing and in combina-tion with a range of N-gram models, and the rel-ative performance of each such system configu-ration evaluated.
Character-based indexing wasfound to be superior to word-based indexing, par-ticularly when supplemented with a character bi-gram model.We went on to discover a strong correlation be-tween retrieval accuracy and segmentation accu-racy/consistency, and that lexical normalisationproduces marginal gains in retrieval performance.We further tested the effects of incremental in-creases in data on retrieval performance, and con-firmed our earlier finding that character-based in-dexing is superior to word-based indexing.
At thesame time, we discovered that in their best con-figurations, the retrieval accuracies of our bag-of-words and segment order sensitive string compar-ison methods are roughly equivalent, but that thecomputational overhead for bag-of-words methodsto achieve that accuracy is considerably lower thanthat for segment order sensitive methods.ReferencesT.
Baldwin and H. Tanaka.
2000.
The effects ofword order and segmentation on translation re-trieval performance.
In Proc.
of the 18th Inter-national Conference on Computational Linguistics(COLING 2000), pages 35?41.H.
Fujii andW.B.
Croft.
1993.
A comparison of index-ing techniques for Japanese text retrieval.
In Proc.of 16th International ACM-SIGIR Conference onResearch and Development in Information Retrieval(SIGIR?93), pages 237?46.H.
Isahara.
1998.
JEIDA?s English?Japanese bilin-gual corpus project.
In Proc.
of the 1st Interna-tional Conference on Language Resources and Eval-uation (LREC?98), pages 471?81.E.
Kitamura and H. Yamamoto.
1996.
Translationretrieval system using alignment data from paralleltexts.
In Proc.
of the 53rd Annual Meeting of theIPSJ, volume 2, pages 385?6.
(In Japanese).S.
Kurohashi and M. Nagao.
1998.
Nihongo keitai-kaiseki sisutemu JUMAN [Japanese morphologicalanalysis system JUMAN] version 3.5.
Technical re-port, Kyoto University.
(In Japanese).C.
Manning and H. Schu?tze.
1999.
Foundationsof Statistical Natural Language Processing.
MITPress.Y.
Matsumoto, A. Kitauchi, T. Yamashita, and Y. Hi-rano.
1999.
Japanese Morphological Analysis Sys-tem ChaSen Version 2.0 Manual.
Technical ReportNAIST-IS-TR99009, NAIST.N.
Nakamura.
1989.
Translation support by retrievingbilingual texts.
In Proc.
of the 38th Annual Meetingof the IPSJ, volume 1, pages 357?8.
(In Japanese).S.
Nirenburg, C. Domashnev, and D.J.
Grannes.
1993.Two approaches to matching in example-based ma-chine translation.
In Proc.
of the 5th InternationalConference on Theoretical and Methodological Is-sues in Machine Translation (TMI-93), pages 47?57.E.
Planas.
1998.
A Case Study on Memory BasedMachine Translation Tools.
PhD Fellow WorkingPaper, United Nations University.G.
Salton.
1971.
The SMART Retrieval System:Experiments in Automatic Document Processing.Prentice-Hall.S.
Sato and T. Kawase.
1994.
A High-Speed BestMatch Retrieval Method for Japanese Text.
Techni-cal Report IS-RR-94-9I, JAIST.S.
Sato and M. Nagao.
1990.
Toward memory-based translation.
In Proc.
of the 13th InternationalConference on Computational Linguistics (COL-ING ?90), pages 247?52.S.
Sato.
1992.
CTM: An example-based transla-tion aid system.
In Proc.
of the 14th InternationalConference on Computational Linguistics (COL-ING ?92), pages 1259?63.E.
Sumita and Y. Tsutsumi.
1991.
A practical methodof retrieving similar examples for translation aid.Transactions of the IEICE, J74-D-II(10):1437?47.
(In Japanese).H.
Tanaka.
1997.
An efficient way of gauging similar-ity between long Japanese expressions.
In Informa-tion Processing Society of Japan SIG Notes, volume97, no.
85, pages 69?74.
(In Japanese).A.
Trujillo.
1999.
Translation Engines: Techniquesfor Machine Translation.
Springer Verlag.A.
Wagner and M. Fisher.
1974.
The string-to-string correction problem.
Journal of the ACM,21(1):168?73.
