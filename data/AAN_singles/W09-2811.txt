Proceedings of the 2009 Workshop on Language Generation and Summarisation, ACL-IJCNLP 2009, pages 59?62,Suntec, Singapore, 6 August 2009. c?2009 ACL and AFNLPVisual Development Process forAutomatic Generation of Digital Games Narrative ContentMaria Fernanda Caropreso1 Diana Inkpen1 Shahzad Khan2 Fazel Keshtkar11University of Ottawa{caropres,diana}@site.uottawa.caakesh081@uottawa.ca2DISTIL Interactives.khan2@distilinteractive.comAbstractUsers of Natural Language Generationsystems are required to have sophisti-cated linguistic and sometimes even pro-gramming knowledge, which has hin-dered the adoption of this technology byindividuals outside the computationallinguistics research community.
We havedesigned and implemented a visual envi-ronment for creating and modifying NLGtemplates which requires no program-ming ability and minimum linguisticknowledge.
It allows specifying tem-plates with any number of variables anddependencies between them.
Internally, ituses SimpleNLG to provide the linguisticbackground knowledge.
We tested theperformance of our system in the contextof an interactive simulation game.
Wedescribe the templates used for testingand show examples of sentences that oursystem generates from these templates.1 IntroductionNatural Language Generation (NLG) is the proc-ess of constructing outputs from non-linguisticinputs (Bateman, 2002) (Dalianis, 1996) (Reiterand Dale, 2000).NLG systems are useful in systems in whichverbal or textual interaction with the users is re-quired, as for example Gaming, Robotics, andAutomatic Help Desks.
Using NLG systems in-stead of manually authored sentences would en-able the software to adapt the expressed mes-sages to the context of the conversation, and ex-press past and future actions that may form thisinteraction.However, the use of the available NLG sys-tems is far from simple.
The most complete sys-tems often require extensive linguistic knowl-edge.
Some systems also require programmingknowledge.
This knowledge cannot be assumedfor the content and subject matter experts whoare members of a development team.
However,these individuals do need to interact with theNLG system in order to make use of the messagegeneration capability to support their productdevelopment efforts.
It is then necessary to pro-vide them with an environment that will allowthem to have access in a simpler way to the fea-tures they need of a specific NLG system.There are two widely adopted approaches toNLG, the ?deep-linguistic?
and the ?template-based?
(van Deemter et al, 2005).
The deep-linguistic approach attempts to build the sen-tences up from a wholly logical representation.The template-based NLG systems provide scaf-folding in the form of templates that contain apredefined structure and perhaps some of thefinal text.SimpleNLG is an NLG system that allows theuser to specify a sentence by giving its contentwords and its grammatical roles (such as subjector verb).
SimpleNLG also permits the user tospecify several features for the main verb, suchas: tense (present, past or future); whether or notit is subjective, progressive, passive or perfect;whether or not it is in interrogative form; wheth-er or not it is negated; and which, if any, modalto use (i.e.
could, must).While some of these fea-tures affect only the verb, others affect the struc-ture of the whole sentence, as for example whenit has to be expressed in the passive voice.SimpleNLG is implemented as a java libraryand it requires java programming knowledge tobe used.
Because of the programming nature ofSimpleNLG, it allows the user to define flexibletemplates by using programming variables in thesentence specification.
The variable parts of thetemplates could be filled with different values.When templates are defined using SimpleNLGthey keep all the functionality of the NLG system(for example, being able to modify the verb fea-59tures or the output format, and making use of thegrammatical knowledge), while also allowing forthe variable values to change.We have designed an environment that pro-vides simple access to the use of the SimpleNLGsystem in order to generate sentences with vari-able parts or templates.
We developed this NLGTemplate Authoring Environment guided by theneed of templates required for generating contentfor digital-based training games at DISTIL Inter-active1.
An early prototype of the tool, with atext-only interface, is presented in (Caropreso etal., 2009).In training games the player is typically pre-sented with challenging situations and is encour-aged to practice different strategies at dealingwith them, in a safe, virtual environment.Through tips and feedback, the player developsan understanding of the problem and what are thesuccessful ways of confronting it (French et al,1999).In training games there is usually an explosionof possible scenarios and situations.
The narra-tive should ideally reflect the past events anddecisions taken.
The considerable amount of tex-tual information required in order to keep thefeedback consistent with the updated narrativecan be a burden on the game designers.
It is thennecessary to include templates that staticallyprovide the basic information, combined withvariable parts that adapt the narrative to the cir-cumstances.The goal of the NLG Template Authoring En-vironment was to provide the game content de-signers with an accessible tool they could use tocreate and manipulate the NLG templates, andthus generate sentences that would support thenarrative progression of the game.In the rest of this paper we describe our NLGTemplate Authoring Environment, its design,implementation and capabilities.
We describe thetemplates that we used to test the system and weexplain the user?s knowledge required in order tocreate them.
We finish the paper presenting ourconclusions and future work.2 Template Authoring EnvironmentThe NLG Template Authoring Environmentasks for a model sentence and allows the user tomark the sections that are variable.
For each va-riable indicated, the user has to specify its type(i.e., personal pronoun, possessive pronoun, Em-1http://www.distilinteractive.com/ployee_type) and which values of that type areallowed (i.e., all personal pronouns, or only?she?
and ?he?).
Additionally, the user can alsoindicate dependencies between variable elementsand information for the verb (i.e., tense, form,modals).
The system then shows the user all thepossible sentences that could be generated fromthe given template by calculating all the possiblecombinations of variable values that respect thespecified dependencies and follow the verb se-lections.
The user can then refine the template bychanging the given example or the specified va-riables, dependencies or verb options, in order toadjust the generated sentences to the needs of thegame.The NLG Template Authoring Environmenthas been implemented in Java.
The SimpleNLGlibrary was used to automatically generate cor-rect sentences and provide the user with the pos-sibility of exploring different attributes to theverb.
It has a user-friendly intuitive graphicalinterface, part of which is shown in Figure 1.Figure 1: Graphical InterfaceAfter entering an example sentence and click-ing on Analyze, the user indicates that a sectionis variable by giving a type or semantic class tothe word in that section.
The values of a semanticclass are stored in a text file, which allows theuser to create new semantic classes as needed.These files contain all the possible values andtheir respective syntactic information (person,number and gender) which will be used foragreement with the verb and for dependency be-tween variables purposes.
Restrictions to the val-ues that a variable can take are also indicated60through the graphical interface.
Dependenciescan be indicated only between already declaredvariables.
The main verb and all its options areindicated in the section at the bottom of thegraphical interface.In the template shown in Figure 1, the exam-ple sentence is ?I walk my dog?, ?I?
is a variableof type personal pronoun, ?walk?
is the mainverb, ?my?
is a variable of type possessive pro-noun, ?dog?
is a variable of type animal andthere is a dependency between ?I?
and ?my?
(which will allow to make their values agree inperson, number and gender when generating allpossible combinations).In Figure 1 we also see that the user has se-lected the values ?present and past?
for the verbtense and ?normal?
and ?imperative?
for the verbform.
Therefore, four sentences will be generatedfor each combination of the variables?
values(one sentence for each combination of the tenseand form selections).
All these sentences willhave the verb negated and will use the perfecttenses (as indicated by the extra verb options).3 Testing the NLG Template AuthoringEnvironmentIn order to verify the correct functioning of theNLG Template Authoring Environment, we se-lected a set of sentence templates from the game?Business in Balance: Implementing an Envi-ronmental Management System?
from DISTILInteractive.
The templates were selected manu-ally, while keeping in mind the need to coverdifferent aspects, as for example the number andtype of the variables and dependencies.
The test-ing of these examples covers for many moretemplates of the same type.
The five selectedsentence templates that form our testing set aredisplayed in Table 1 and are identified in the restof this section by their reference number or orderin the table.Table 1.
Testing examplesRef.numberTemplate1 The ACTORS (ME/US) could helpDEPARTMENTS.2 The ACTORS IS/ARE now avail-able to help.3 I/WE struggled because ofMY/OUR lack of knowledge.4 I/WE AM/ARE pleased to reportthat I/WE completed the taskTASKS.5 I/WE WAS/WERE not the great-est choice for keeping thingsmoving along quickly.In these template examples, we show in capi-tals the variable parts of the templates.
ACTORS,DEPARTMENTS and TASKS refer to one of severalpossible nouns previously defined for each of theclasses with those names.
The terms in capitalsseparated by a ?/?
already display all the ac-cepted values for that variable (for exampleI/WE represent a variable of type personal pro-noun which could take only the selected values?I?
or ?we?
and the rest are filtered out).The first template example has two variablesof predefined closed class nouns, ACTORS andDEPARTMENTS.
The latter is independent, whilethe former has a dependency with a variable oftype personal pronoun (in objective case form)that could only take the values ?me?
or ?us?.This template is used in the game when the ac-tor/character available to help is the same ac-tor/character that is providing the information.This template can be successfully generated withour system by declaring the variables, restrictingthe values of the pronoun variable, and establish-ing the dependency.
When filtering non-validsentences, the system will eliminate those caseswhere the value?s number of the variable ACTORand the personal pronoun do not agree (i.e., itwill only allow sentences that use ?me?
if theactor is singular, and sentences that use ?us?, ifthe actor is plural).
When creating this template,the user will have to be aware that the main verbis ?to help?
and indicate ?could?
as a modal to beused.
This is important as otherwise SimpleNLGwill modify the main verb in order to agree withthe number of the subject.
It is also necessary incase some of the options to change the main verbare specified.Two examples of the generated sentences us-ing the first template are shown below.?
The HR Training Manager (me) couldhelp the Design Department.?
The Implementation Team (us) couldhelp the Deputy Management Represen-tative.The second template is one that found a prob-lem with our system and provided us with a rea-son and an opportunity to improve it.
This exam-ple template also uses a variable of the closedclass noun ACTOR together with the verb ?to be?in the present tense, agreeing in number with theactor.
It might seem trivial to indicate this de-pendency between the actor variable and theverb.
But in our system the verbs are not treatedas a regular variable (even when their values canbe variable), but they are left for SimpleNLG tofind the correct verb form.
We needed then to61inform SimpleNLG the number to which theverb should agree (by default it would assumesingular).
In this case we needed to inform Sim-pleNLG that the number to agree with would bethe number of the variable ACTOR.
We also haveto consider the case when the subject numberdoes not depend on a variable and is plural, asfor example in a template where the subject is?The members of DEPARTMENT?.
To accom-modate for these cases, we improved our systemby asking the user to indicate in a pull downmenu whether the template?s verb should agreewith a variable value or it should be always usedin plural or in singular.
(This option is displayedin the bottom right corner of the interface and notshown in the partial screen shot on Figure 1.
)The third template presents a dependency be-tween a variable of type personal pronoun in thesubjective case form, and a variable of type pos-sessive pronoun in the complement.
Both vari-ables accept only a pair of their possible values,and the dependency between them establishesthat they have to agree in person, number andgender.
That is not a problem for our system.With respect to the verb, the user has to indicatethe past tense as the only option.In the fourth and fifth template, there is a per-sonal pronoun variable taking the place of thesubject, which should agree in person and num-ber with the verb.
This is, as mentioned before,left to SimpleNLG to solve.
As the subject inthese cases consists of only a personal pronounand SimpleNLG can detect this fact, no extrainformation is required.
In the fourth template,there is also a dependency between the personalpronoun variable in the subject role and the per-sonal pronoun variable in the complement.
Onceagain the person and number of these two vari-ables have to agree, and the sentences not satis-fying this restriction are filtered out by our sys-tem.
Finally, for the fifth template the user isforced to specify that the verb ?to be?
has to beused in its past tense.4 Conclusions and Future WorkWe have identified the need for an NLG Tem-plate Authoring Environment that allows gamecontent designers without linguistic and pro-gramming background to experiment with andfinally create language templates.We have designed and implemented a systemthat allows the user to specify an example sen-tence together with variables, its dependencies,and verb options that complete the template.
Thissystem shows the user all the possible sentencesthat could be generated with the specified tem-plate.
It can be used to refine the template until itsatisfies the user?s needs.The system makes use of the SimpleNLG javalibrary which provides us with correct sentencesand the possibility of including many verb varia-tions, such as tense, form and modals.We have evaluated our NLG Template Au-thoring Environment in a set of sentence tem-plates from a digital-based interactive simulationgame that covered different characteristics.We have implemented a user-friendly intuitivegraphical interface for the system.
The conven-ience of use of this interface will be evaluated inthe context of the development of a new game.AcknowledgementsThis work is supported by the Ontario Centres ofExcellence (OCE) and Precarn Incorporated.ReferencesJ.
A. Bateman.
2002.
Natural Language Generation:an introduction and open-ended review of the stateof the art.M.
F. Caropreso, D. Inkpen, S. Khan and F. Keshtkar.2009.
Novice Friendly Natural Language Genera-tion Template Authoring Environment.
Proceedingof the Canadian Artificial Intelligence Conference2009, Kelowna, BC, pp.195-198.H.
Dalianis.
1996.
Concise Natural Language Genera-tion from Formal Specifications, Ph.D. Thesis,(Teknologie Doktorsavhandling), Department ofComputer and Systems Sciences, Royal Institute ofTechnology/ Stockholm University.
Report SeriesNo.
96-008, ISSN 1101-8526, SRN SU-KTH/DSV/R 96/8 SE.K.
van Deemter, E. Krahmer and M. Theune.
2005.Real versus Template-Based Natural LanguageGeneration: A False Opposition?
In ComputationalLinguistics, 31(1): 15-24.D.
French, C. Hale, C. Johnson and G. Farr.
1999.Internet Based Learning: An introduction andframework for higher education and business.
Lon-don, UK: Kogan Page.E.
Reiter and R. Dale.
2000.
Building Natural Lan-guage Generation Systems (Studies in NaturalLanguage Processing), Cambridge UniversityPress.E.
Reiter.
2007.
SimpleNlg package:http://www.csd.abdn.ac.uk/ereiter/simplnlg62
