eBonsai: An integrated environment for annotating treebanksIchikawa Hiroshi, Noguchi Masaki, Hashimoto Taiichi, Tokunaga Takenobu, Tanaka HozumiDepartment of Computer Science, Tokyo Institute of TechnologyTokyo Meguro ?Ookayama 2-12-1, Japanichikawa@cl.cs.titech.ac.jpAbstractSyntactically annotated corpora (tree-banks) play an important role in re-cent statistical natural language pro-cessing.
However, building a large tree-bank is labor intensive and time con-suming work.
To remedy this prob-lem, there have been many attempts todevelop software tools for annotatingtreebanks.This paper presents an integrated en-vironment for annotating a treebank,called eBonsai.
eBonsai helps annota-tors to choose a correct syntactic struc-ture of a sentence from outputs of aparser, allowing the annotators to re-trieve similar sentences in the treebankfor referring to their structures.1 IntroductionStatistical approach has been a main stream ofnatural language processing research for the lastdecade.
Particularly, syntactically annotated cor-pora (treebanks), such as Penn Treebank (Marcuset al, 1993), Negra Corpus (Skut et al, 1997)and EDR Corpus (Jap, 1994), contribute to im-prove the performance of morpho-syntactic anal-ysis systems.
It is notorious, however, that build-ing a large treebank is labor intensive and timeconsuming work.
In addition, it is quite difficultto keep quality and consistency of a large tree-bank.
To remedy this problem, there have beenmany attempts to develop software tools for anno-tating treebanks (Plaehn and Brants, 2000; Bird etal., 2002).This paper presents an integrated environmentfor annotating treebanks, called eBonsai.
Fig-ure 1 shows a snapshot of eBonsai.
eBonsaifirst performs syntactic analysis of a sentence us-ing a parser based on GLR algorithm (MSLRparser) (Tanaka et al, 1993), and provides can-didates of its syntactic structure.
An annotatorchooses a correct structure from these candidates.When choosing a correct structure, the annotatorcan consult the system to retrieve already anno-tated similar sentences to make the current deci-sion.
Integration of annotation and retrieval is asignificant feature of eBonsai.To realize the tight coupling of annotation andretrieval, eBonsai has been implemented as thefollowing two plug-in modules of an universaltool platform: Eclipse (The Eclipse Foundation,2001).?
Annotation plug-in module: This modulehelps to choose a correct syntactic structurefrom candidate structures.?
Retrieval plug-in module: This module re-trieves similar sentences to a sentence inquestion from already annotated sentences inthe treebank.These two plug-in modules work cooperativelyin the Eclipse framework.
For example, infor-mation can be transferred easily between thesetwo modules in a copy-and-past manner.
Further-more, since they are implemented as Eclipse plug-in modules, these functionalities can also inter-act with other plug-in modules and Eclipse nativefeatures such as CVS.108Figure 1: A snapshot of eBonsai			       	                                  	                          	           	    	 Figure 2: A workflow of annotation using eBonsai1092 Annotating treebanksFigure 2 shows a workflow of annotating a tree-bank using eBonsai.1.
An annotator picks a sentence to annotatefrom plain-text corpora.2.
The MSLR parser (Tanaka et al, 1993) per-forms syntactic analysis of the sentence.3.
The annotator chooses a correct syntacticstructure from the output of the parser.
Ifnecessary, retrieval of structures in the tree-bank is available in this step.4.
The annotator adds the chosen syntacticstructure to the treebank.The coverage of Japanese grammar used in theMSLR parser is fairly wide.
The number of gram-mar rules of the current system is almost 3,000.That means we have a lot of outputs as a resultof syntactic analysis in step 2.
These structuresare represented in terms of a special data struc-ture called packed shared forest (PSF) (Tomita,1986).
The main role of eBonsai is supportingannotators to choose a correct one from a lot ofcandidate structures in step 3.3 Annotation plug-in module3.1 OverviewThe annotation plug-in module helps to choose acorrect syntactic structure from a set of structuresrepresented by a packed shared forest which is anoutput of the MSLR parser.Since there are generally so many syntacticstructures given by the parser, it is impractical tofind a correct one by checking all of them.
The an-notation plug-in module shows a single structureat a time as shown in figure 1, and asks annotatorsto specify a constraint.
The system reflects theconstraint immediately by filtering out the struc-tures violating it.
This process is repeated untila single correct structure is identified.
The con-straints which can be specified by annotators arefollowing two:1.
Annotators can specify a destination con-stituent of a dependent constituent.2.
Annotators can specify a correct label of anode.This plug-in module is a reimplementation of anannotation tools developed by Okazaki (Okazakiet al, 2001) in an Eclipse framework.3.2 Example of annotationTake the following Japanese sentence for an ex-ample to explain the usage of the annotation plug-in module.?????????
(yellow paper forwarning-ACC) ?????
(mailbox-DAT)???????
(put, but)???????????
(not being paid yet).
(I put a yellow paper for warning in themailbox, but it is not paid yet.)1.
An annotator double-clicks a PSF file namein Eclipse ?Navigator?
(a left window) topick up a sentence to annotate.2.
A new window opens and one of the struc-tures is shown in terms of a syntactic tree (aright window).This window is called ?Annotation editor?.The notation ?1/9?
in the left-top part of thewindow indicates that the presented struc-ture is the first one out of nine.3.
A red node (e.g.
?<???-?-?
>?
(verbphrase)) indicates that this node has otherpossible label names.4.
Clicking a right button on the red nodemakes a list of possible label names pop upas shown below.1105.
Annotators can choose a correct label nameof the node in the list.
In this case, label ?<???-??-?>?
will be selected.6.
Then label ?< ???-?-?
>?
(verbphrase) changes to ?< ???-??-?
>?
(noun phrase) in the tree and its color be-comes black at the same time.
Black labelnames indicate that there is no other possi-ble label for this node.Now, the number of structures shown in theleft-top part of Annotation editor decreasesto 3.7.
A green node (e.g.
?< ???-?-?-?>?)
indicates the constituent governed bythat node can depend on more than one con-stituent.8.
Clicking a right button on node ?<???-?-?-?
>?
makes a list of destinations ofdependency pop up as shown below.9.
Annotators can choose a correct destinationin the list.
In this case, ????????????
(put (a yellow paper) in the mailbox)?will be selected.10.
At this moment, all nodes have turned intoblack and the number of structure becomes1.
That means the annotation of this sentencehas been finished.Figure 3: A popup menu of Annotation editor3.3 Other featuresThe following features are also implemented.?
Unlimitedly repeatable Undo/Redo.
It ispossible to undo/redo after saving results byusing the popup menu.
(figure 3).?
Viewing other structures.
Items [Previoustree] and [Next tree] in the popup menushows different structures.?
Folding constituents.
Clicking a right but-ton on a node and selecting item [Switchfolding] makes the structure under the nodefolded.
Selecting the same item again un-folds the structure.?
Copying a part of a structure to the retrievalplug-in module.
Item [Copy to search] inthe popup menu copies a selected structureto the query input window.
This feature willbe described in detail in the later section.4 Retrieval plug-in module4.1 OverviewDuring the course of annotation, annotators usu-ally put constraints to narrow down to a correctstructure considering the meaning of a sentence.However, there are cases in which it is difficult topin down a correct one by referring to only thatsentence.
Annotators can consult the system toretrieve the similar structure of sentences in thetreebank.
The retrieval plug-in module providesannotators such functionality.
The retrieval plug-in module receives a syntactic structure as a queryand provides a list of sentences which include thegiven structure.The retrieval plug-in module has been realizedwith the method proposed by Yoshida (Yoshida etal., 2004).
The method is based on Yoshikawa?s111method (Yoshikawa et al, 2001) which was orig-inally proposed for handling XML documents ef-fectively by using relational database (RDB) sys-tems.
Yoshida adopted Yoshikawa?s method todeal with syntactic structures in the database.Since an XML document can be represented asa tree, Yoshikawa?s method is also applicable todeal with syntactic structures.Figure 4: An input query for retrievalAn input query is given as a tree as shown inFigure 4.
The structure is then translated into aSQL query and the retrieval is performed.A query involving a large number of nodes gen-erates a longer SQL query, thus degrades retrievalspeed significantly.
Yoshida proposed to decom-pose an input query into a set of subtrees, and totranslate each subtree into a SQL query.4.2 Example of structure retrieval1.
An annotator puts a query tree in the queryinput window (upper-left window of Fig-ure 5).
The query can be modified by thefollowing way.?
A node label can be changed by click-ing a left button on the node and puttinga new label in the input area.
A labelcan contain a wild card character ?%?.?
A child node can be added by clickinga right button on a node and selectingmenu item [Add child].2.
Clicking a right button in the query inputwindow and selecting a menu item starts re-trieval.
There are four types of search.?
Menu item [Search] retrieves sentencescontaining a structure which is exactlythe same as the query.?
Menu item [Partial search] retrievessentences with less rigid condition thanitem [Search].
It allows some childnodes missing from the query.Figure 5: An example of structure retrieval?
Menu item [Narrow search] searches inthe previously retrieved sentences in-stead of in the entire treebank.?
Menu item [Partial narrow search] isthe combination of [Partial search] and[Narrow search].3.
Retrieval results are shown in the retrievalresult list window (a left-bottom window inFigure 5).4.
Clicking a sentence in the list shows the de-tailed structure of the sentence in the detailwindow (a right window of Figure 5).
A partof the structure matching with the query iscolored with blue.5.
If there is more than one substructure match-ing with the query in a sentence, the sys-tem shows the total number of matchingparts, and the identifier of the currently col-ored part by number.
Menu items [Previousmatch] and [Next match] allows annotatorsto move the other matching parts.5 Interplay between annotation andretrievalSince both the annotation plug-in module andthe retrieval plug-in module are implemented as112Eclipse plug-ins, they can easily exchange infor-mation each other.
Thanks for this feature, an-notators can copy a part of syntactic structuresshown in Annotation editor and submit it to theretrieval module as a query.
This can be done bythe following procedure.1.
Dragging a mouse pointer over the area cov-ering a target syntactic structure selects thestructure, of which color changes to blue.2.
Clicking a right button in Annotation editormakes a command list pop up, and select-ing item [Copy to search] copies the selectedstructure to the query input window.3.
The annotator can modify the query ifneeded.4.
Clicking a right button in the query inputwindow makes a command list pop up andselecting one of search commands performsa search.6 Conclusion and Future WorkThis paper introduced eBonsai, an integrated en-vironment for annotating treebanks.
eBonsai wasimplemented as two plug-in modules of Eclipse:the annotation plug-in module for choosing a cor-rect syntactic structure from outputs of a parser,and the retrieval plug-in module for retrievingsentences including similar structure to a query inthe treebank.
These two modules are tightly cou-pled, thus during the course of annotation, anno-tators can refer to already annotated sentences inthe treebank by using the retrieval module.
Thishelps to annotate difficult cases.The future work includes the following issues.?
Introduction of a project management func-tionality by coupling with such as the CVSsystem.?
Further improvement of the interface.?
Automatic presentation of reference sen-tences with their structure without annota-tors?
explicit retrieval.?
Functionality to share know-how among an-notators.ReferencesS.
Bird, X. Maeda, K. Ma, H. Lee, B. Randall, and S. Za-yat.
2002.
TableTrans, MultiTrans, InterTrans and Tree-Trans: Diverse tools built on the annotation graph toolkit.In Proceedings of the Third International Conference onLanguage Resources and Evaluation (LREC 2002), pages364?370.Japan Electronic Dictionary Research Institute, 1994.?Electronic Dictionary User?s Manual 2.1?.M.
P. Marcus, B. Santorini, and M. A. Marcinkiewicz.
1993.Building a large annotated corpus of english: The PennTreebank.
Computational Linguistics, 19(2):313?330.A.
Okazaki, K. Shirai, T. Tokunaga, and H. Tanaka.
2001.A syntactic annotation tool with user navigation.
In Pro-ceedings of the 15th Annual Conference of Japanese So-ciety for Artificial Intelligence.O.
Plaehn and T. Brants.
2000.
Annotate ?
An effi-cient interactive annotation tool.
In Proceedings of theSixth Conference on Applied Natural Language Process-ing ANLP-2000.W.
Skut, B. Krenn, T. Brants, and H. Uszkoreit.
1997.
Anannotation scheme for free word order languages.
In Pro-ceedings of the 5th Conference on Applied Natural Lan-guage Processing, pages 88?95.H.
Tanaka, T. Tokunaga, and M. Aizawa.
1993.
Integra-tion of morphological and syntactic analysis aased on LRparsing algorithm.
In Proceedings of International Work-shop on Parsing Technologies, pages 101?109.The Eclipse Foundation.
2001.
Eclipse official site.http://www.eclipse.org/.M.
Tomita.
1986.
Efficient Parsing for Natural Language.Kluwer Academic Publisher.K.
Yoshida, T. Hashimoto, T. Tokunaga, and H. Tanaka.2004.
Retrieving annotated corpora for corpus annota-tion.
In Proceedings of the Fourth International Con-ference on Language Resources and Evaluation (LREC2004), pages 1775?1778.M.
Yoshikawa, T. Amagasa, T. Shimura, and S. Uemura.2001.
Xrel: A pathbased approach to storage and re-trieval of xml documents using relational database.
ACMTransactions on Internet Technology, 1(1).113
