Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1067?1076,Uppsala, Sweden, 11-16 July 2010. c?2010 Association for Computational LinguisticsA Tree Transducer Model for Synchronous Tree-Adjoining GrammarsAndreas MalettiUniversitat Rovira i VirgiliAvinguda de Catalunya 25, 43002 Tarragona, Spain.andreas.maletti@urv.catAbstractA characterization of the expressive powerof synchronous tree-adjoining grammars(STAGs) in terms of tree transducers (orequivalently, synchronous tree substitutiongrammars) is developed.
Essentially, aSTAG corresponds to an extended treetransducer that uses explicit substitution inboth the input and output.
This characteri-zation allows the easy integration of STAGinto toolkits for extended tree transducers.Moreover, the applicability of the charac-terization to several representational andalgorithmic problems is demonstrated.1 IntroductionMachine translation has seen a multitude of for-mal translation models.
Here we focus on syntax-based (or tree-based) models.
One of the old-est models is the synchronous context-free gram-mar (Aho and Ullman, 1972).
It is clearly tooweak as a syntax-based model, but found use inthe string-based setting.
Top-down tree transduc-ers (Rounds, 1970; Thatcher, 1970) have beenheavily investigated in the formal language com-munity (Ge?cseg and Steinby, 1984; Ge?cseg andSteinby, 1997), but as argued by Shieber (2004)they are still too weak for syntax-based machinetranslation.
Instead Shieber (2004) proposes syn-chronous tree substitution grammars (STSGs) anddevelops an equivalent bimorphism (Arnold andDauchet, 1982) characterization.
This character-ization eventually led to the rediscovery of ex-tended tree transducers (Graehl and Knight, 2004;Knight and Graehl, 2005; Graehl et al, 2008),which are essentially as powerful as STSG.
Theyhad been studied already by Arnold and Dauchet(1982) in the form of bimorphisms, but receivedlittle attention until rediscovered.Shieber (2007) claims that even STSGs mightbe too simple to capture naturally occuring transla-tion phenomena.
Instead Shieber (2007) suggestsa yet more powerful mechanism, synchronoustree-adjoining grammars (STAGs) as introducedby Shieber and Schabes (1990), that can capturecertain (mildly) context-sensitive features of natu-ral language.
In the tradition of Shieber (2004), acharacterization of the power of STAGs in termsof bimorphims was developed by Shieber (2006).The bimorphisms used are rather unconventionalbecause they consist of a regular tree language andtwo embedded tree transducers (instead of two treehomomorphisms).
Such embedded tree transduc-ers (Shieber, 2006) are particular macro tree trans-ducers (Courcelle and Franchi-Zannettacci, 1982;Engelfriet and Vogler, 1985).In this contribution, we try to unify the pic-ture even further.
We will develop a tree trans-ducer model that can simulate STAGs.
It turns outthat the adjunction operation of an STAG can beexplained easily by explicit substitution.
In thissense, the slogan that an STAG is an STSG withadjunction, which refers to the syntax, also trans-lates to the semantics.
We prove that any treetransformation computed by an STAG can also becomputed by an STSG using explicit substitution.Thus, a simple evaluation procedure that performsthe explicit substitution is all that is needed to sim-ulate an STAG in a toolkit for STSGs or extendedtree transducers like TIBURON by May and Knight(2006).We show that some standard algorithms onSTAG can actually be run on the constructedSTSG, which often is simpler and better under-stood.
Further, it might be easier to develop newalgorithms with the alternative characterization,which we demonstrate with a product construc-tion for input restriction in the spirit of Neder-hof (2009).
Finally, we also present a completetree transducer model that is as powerful as STAG,which is an extension of the embedded tree trans-ducers of Shieber (2006).10672 NotationWe quickly recall some central notions about trees,tree languages, and tree transformations.
For amore in-depth discussion we refer to Ge?cseg andSteinby (1984) and Ge?cseg and Steinby (1997).
Afinite set ?
of labels is an alphabet.
The set of allstrings over that alphabet is ??
where ?
denotesthe empty string.
To simplify the presentation, weassume an infinite set X = {x1, x2, .
.
. }
of vari-ables.
Those variables are syntactic and representonly themselves.
In particular, they are all differ-ent.
For each k ?
0, we let Xk = {x1, .
.
.
, xk}.We can also form trees over the alphabet ?.
Toallow some more flexibility, we will also allowleaves from a special set V .
Formally, a ?-treeover V is either:?
a leaf labeled with an element of v ?
?
?
V ,or?
a node that is labeled with an element of ?with k ?
1 children such that each child is a?-tree over V itself.1The set of all ?-trees over V is denoted by T?
(V ).We just write T?
for T?(?).
The trees in Figure 1are, for example, elements of T?
(Y ) where?
= {S,NP,VP,V,DT,N}Y = {saw, the} .We often present trees as terms.
A leaf labeled vis simply written as v. The tree with a root nodelabeled ?
is written ?
(t1, .
.
.
, tk) where t1, .
.
.
, tkare the term representations of its k children.A tree language is any subset of T?
(V ) forsome alphabet ?
and set V .
Given another al-phabet ?
and a set Y , a tree transformation is arelation ?
?
T?
(V ) ?
T?
(Y ).
In many of ourexamples we have V = ?
= Y .
Occasionally,we also speak about the translation of a tree trans-formation ?
?
T?
?
T?.
The translation of ?
isthe relation {(yd(t), yd(u)) | (t, u) ?
?}
whereyd(t), the yield of t, is the sequence of leaf labelsin a left-to-right tree traversal of t. The yield of thethird tree in Figure 1 is ?the N saw the N?.
Notethat the translation is a relation ?
?
?
??
??
?.3 SubstitutionA standard operation on (labeled) trees is substitu-tion, which replaces leaves with a specified labelin one tree by another tree.
We write t[u]A for (the1Note that we do not require the symbols to have a fixedrank; i.e., a symbol does not determine its number of children.SNP VPVsawNPNPDTtheNSNPDTtheNVPVsawNPDTtheNt u t[u]NPFigure 1: A substitution.result of) the substitution that replaces all leaveslabeled A in the tree t by the tree u.
If t ?
T?
(V )and u ?
T?
(Y ), then t[u]A ?
T???
(V ?
Y ).
Weoften use the variables of X = {x1, x2, .
.
. }
assubstitution points and write t[u1, .
.
.
, uk] insteadof (?
?
?
(t[u1]x1) .
.
.
)[uk]xk .An example substitution is shown in Figure 1.The figure also illustrates a common problem withsubstitution.
Occasionally, it is not desirable to re-place all leaves with a certain label by the sametree.
In the depicted example, we might wantto replace one ?NP?
by a different tree, whichcannot be achieved with substitution.
Clearly,this problem is avoided if the source tree t con-tains only one leaf labeled A.
We call a tree A-proper if it contains exactly one leaf with labelA.2The subset C?
(Xk) ?
T?
(Xk) contains exactlythose trees of T?
(Xk) that are xi-proper for every1 ?
i ?
k. For example, the tree t of Figure 1 is?saw?-proper, and the tree u of Figure 1 is ?the?-and ?N?-proper.In this contribution, we will also use substitu-tion as an explicit operator.
The tree t[u]NP inFigure 1 only shows the result of the substitution.It cannot be infered from the tree alone, how itwas obtained (if we do not know t and u).3 Tomake substitution explicit, we use the special bi-nary symbols ?[?
]A where A is a label.
Those sym-bols will always be used with exactly two chil-dren (i.e., as binary symbols).
Since this prop-erty can easily be checked by all considered de-vices, we ignore trees that use those symbols in anon-binary manner.
For every set ?
of labels, welet ?
= ?
?
{?[?
]A | A ?
?}
be the extendedset of labels containing also the substition sym-bols.
The substitution of Figure 1 can then be ex-2A-proper trees are sometimes also called A-context inthe literature.3This remains true even if we know that the participatingtrees t and u are A-proper and the substitution t[u]A replac-ing leaves labeled A was used.
This is due to the fact that, ingeneral, the root label of u need not coincide with A.1068pressed as the tree ?[?
]NP(t, u).
To obtain t[u]NP(the right-most tree in Figure 1), we have to evalu-ate ?[?
]NP(t, u).
However, we want to replace onlyone leaf at a time.
Consequently, we restrict theevaluation of ?[?
]A(t, u) such that it applies only totrees t whose evaluation is A-proper.
To enforcethis restriction, we introduce an error signal ?,which we assume not to occur in any set of la-bels.
Let ?
be the set of labels.
Then we definethe function ?E : T?
?
T?
?
{?}
by4?
(t1, .
.
.
, tk)E = ?
(tE1 , .
.
.
, tEk )?[?
]A(t, u)E ={tE[uE]A if tE is A-proper?
otherwisefor every k ?
0, ?
?
?, and t, t1, .
.
.
, tk, u ?
T?.5We generally discard all trees that contain the er-ror signal ?.
Since the devices that we will studylater can also check the required A-properness us-ing their state behavior, we generally do not dis-cuss trees with error symbols explicitly.4 Extended tree transducerAn extended tree transducer is a theoretical modelthat computes a tree transformation.
Such trans-ducers have been studied first by Arnold andDauchet (1982) in a purely theoretic setting, butwere later applied in, for example, machine trans-lation (Knight and Graehl, 2005; Knight, 2007;Graehl et al, 2008; Graehl et al, 2009).
Theirpopularity in machine translation is due to Shieber(2004), in which it is shown that extended treetransducers are essentially (up to a relabeling) asexpressive as synchronous tree substitution gram-mars (STSG).
We refer to Chiang (2006) for anintroduction to synchronous devices.Let us recall the formal definition.
An ex-tended tree transducer (for short: XTT)6 is a sys-tem M = (Q,?,?, I, R) where?
Q is a finite set of states,?
?
and ?
are alphabets of input and outputsymbols, respectively,?
I ?
Q is a set of initial states, and?
R is a finite set of rules of the form(q, l)?
(q1 ?
?
?
qk, r)4Formally, we should introduce an evaluation function foreach alphabet ?, but we assume that the alphabet can be in-fered.5This evaluation is a special case of a yield-mapping (En-gelfriet and Vogler, 1985).6Using the notions of Graehl et al (2009) our extendedtree transducers are linear, nondeleting extended top-downtree transducers.qSSx1 VPx2 x3?S?qVx2qNPx1qNPx3qNPNPDTtheNboy?NPNateflFigure 2: Example rules taken from Graehl et al(2009).
The term representation of the first ruleis (qS,S(x1,VP(x2, x3))) ?
(w,S?
(x2, x1, x3))where w = qNPqVqNP.where k ?
0, l ?
C?
(Xk), and r ?
C?
(Xk).Recall that any tree of C?
(Xk) contains eachvariable of Xk = {x1, .
.
.
, xk} exactly once.
Ingraphical representations of a rule(q, l)?
(q1 ?
?
?
qk, r) ?
R ,we usually?
add the state q as root node of the left-handside7, and?
add the states q1, .
.
.
, qk on top of the nodeslabeled x1, .
.
.
, xk, respectively, in the right-hand side of the rule.Some example rules are displayed in Figure 2.The rules are applied in the expected way (as ina term-rewrite system).
The only additional fea-ture are the states of Q, which can be used to con-trol the derivation.
A sentential form is a tree thatcontains exclusively output symbols towards theroot and remaining parts of the input headed by astate as leaves.
A derivation step starting from ?then consists in?
selecting a leaf of ?
with remaining inputsymbols,?
matching the state q and the left-hand side lof a rule (q, l) ?
(q1 ?
?
?
qk, r) ?
R to thestate and input tree stored in the leaf, thusmatching input subtrees t1, .
.
.
, tk to the vari-ables x1, .
.
.
, xk,?
replacing all the variables x1, .
.
.
, xk in theright-hand side r by the matched input sub-trees q1(t1), .
.
.
, qk(tk) headed by the corre-sponding state, respectively, and?
replacing the selected leaf in ?
by the treeconstructed in the previous item.The process is illustrated in Figure 3.Formally, a sentential form of the XTT M is atree of SF = T?(Q(T?))
whereQ(T?)
= {q(t) | q ?
Q, t ?
T?}
.7States are thus also special symbols that are exclusivelyused as unary symbols.1069CqSSt1VPt2 t3?CS?qVt2qNPt1qNPt3Figure 3: Illustration of a derivation step of anXTT using the left rule of Figure 2.Given ?, ?
?
SF, we write ?
?
?
if there ex-ist C ?
C?
(X1), t1, .
.
.
, tk ?
T?, and a rule(q, l)?
(q1 ?
?
?
qk, r) ?
R such that?
?
= C[q(l[t1, .
.
.
, tk])] and?
?
= C[r[q1(t1), .
.
.
, qk(tk)]].The tree transformation computed by M is the re-lation?M = {(t, u) ?
T?
?
T?
| ?q ?
I : q(t)??
u}where??
is the reflexive, transitive closure of?.In other words, the tree t can be transformed into uif there exists an initial state q such that we canderive u from q(t) in several derivation steps.We refer to Arnold and Dauchet (1982), Graehlet al (2008), and Graehl et al (2009) for a moredetailed exposition to XTT.5 Synchronous tree-adjoining grammarXTT are a simple, natural model for tree trans-formations, however they are not suitably ex-pressive for all applications in machine transla-tion (Shieber, 2007).
In particular, all tree trans-formations of XTT have a certain locality condi-tion, which yields that the input tree and its corre-sponding translation cannot be separated by an un-bounded distance.
To overcome this problem andcertain dependency problems, Shieber and Sch-abes (1990) and Shieber (2007) suggest a strongermodel called synchronous tree-adjoining gram-mar (STAG), which in addition to the substitutionoperation of STSG (Chiang, 2005) also has an ad-joining operation.Let us recall the model in some detail.
A tree-adjoining grammar essentially is a regular treegrammar (Ge?cseg and Steinby, 1984; Ge?cseg andNPDTlesNbonbonsNN?
ADJrougesNPDTlesNNbonbonsADJrougesderivedtreeauxiliarytreeadjunctionFigure 4: Illustration of an adjunction taken fromNesson et al (2008).NPDTles?[?]N?NN?
ADJrougesNbonbonsFigure 5: Illustration of the adjunction of Figure 4using explicit substitution.Steinby, 1997) enhanced with an adjunction oper-ation.
Roughly speaking, an adjunction replaces anode (not necessarily a leaf) by an auxiliary tree,which has exactly one distinguished foot node.The original children of the replaced node will be-come the children of the foot node after adjunc-tion.
Traditionally, the root label and the label ofthe foot node coincide in an auxiliary tree asidefrom a star index that marks the foot node.
Forexample, if the root node of an auxiliary tree islabeled A, then the foot node is traditionally la-beled A?.
The star index is not reproduced onceadjoined.
Formally, the adjunction of the auxil-iary tree u with root label A (and foot node la-bel A?)
into a tree t = C[A(t1, .
.
.
, tk)] withC ?
C?
(X1) and t1, .
.
.
, tk ?
T?
isC[u[A(t1, .
.
.
, tk)]A? ]
.Adjunction is illustrated in Figure 4.We note that adjunction can easily be expressedusing explicit substitution.
Essentially, only an ad-ditional node with the adjoined subtree is added.The result of the adjunction of Figure 4 using ex-plicit substitution is displayed in Figure 5.To simplify the development, we will makesome assumptions on all tree-adjoining grammars(and synchronous tree-adjoining grammars).
Atree-adjoining grammar (TAG) is a finite set ofinitial trees and a finite set of auxiliary trees.
Our1070STcSa SS?
aSb SS?
bSS?initialtreeauxiliarytreeauxiliarytreeauxiliarytreeFigure 6: A TAG for the copy string language{wcw | w ?
{a, b}?}
taken from Shieber (2006).TAG do not use substitution, but only adjunction.A derivation is a chain of trees that starts with aninitial tree and each derived tree is obtained fromthe previous one in the chain by adjunction of anauxiliary tree.
As in Shieber (2006) we assumethat all adjunctions are mandatory; i.e., if an aux-iliary tree can be adjoined, then we need to makean adjunction.
Thus, a derivation starting from aninitial tree to a derived tree is complete if no ad-junction is possible in the derived tree.
Moreover,we assume that to each node only one adjunctioncan be applied.
This is easily achieved by label-ing the root of each adjoined auxiliary tree by aspecial marker.
Traditionally, the root label A ofan auxiliary tree is replaced by A?
once adjoined.Since we assume that there are no auxiliary treeswith such a root label, no further adjunction is pos-sible at such nodes.
Another effect of this restric-tion is that the number of operable nodes (i.e., thenodes to which an adjunction must still be applied)is known at any given time.8 A full TAG with ourrestrictions is shown in Figure 6.Intuitively, a synchronous tree-adjoining gram-mar (STAG) is essentially a pair of TAGs.
Thesynchronization is achieved by pairing the initialtrees and the auxiliary trees.
In addition, for eachsuch pair (t, u) of trees, there exists a bijection be-tween the operable nodes of t and u.
Such nodes inbijection are linked and the links are preserved inderivations, in which we now use pairs of trees assentential forms.
In graphical representations weoften indicate this bijection with integers; i.e., twonodes marked with the same integer are linked.
Apair of auxiliary trees is then adjoined to linkednodes (one in each tree of the sentential form) inthe expected manner.
We will avoid a formal def-inition here, but rather present an example STAGand a derivation with it in Figures 7 and 8.
For a8Without the given restrictions, this number cannot be de-termined easily because no or several adjunctions can takeplace at a certain node.S1Tc?S1TcSS1a S?
a?Sa S1S?
aSS?
?SS?SS1b S?
b?Sb S1S?
bFigure 7: STAG that computes the translation{(wcwR, wcw) | w ?
{a, b}?}
where wR is thereverse of w.STAG G we write ?G for the tree transformationcomputed by G.6 Main resultIn this section, we will present our main result.
Es-sentially, it states that a STAG is as powerful as aSTSG using explicit substitution.
Thus, for everytree transformation computed by a STAG, there isan extended tree transducer that computes a repre-sentation of the tree transformation using explicitsubstitution.
The converse is also true.
For everyextended tree transducer M that uses explicit sub-stitution, we can construct a STAG that computesthe tree transformation represented by ?M up toa relabeling (a mapping that consistently replacesnode labels throughout the tree).
The additionalrelabeling is required because STAGs do not havestates.
If we replace the extended tree transducerby a STSG, then the result holds even without therelabeling.Theorem 1 For every STAGG, there exists an ex-tended tree transducerM such that?G = {(tE, uE) | (t, u) ?
?M} .Conversely, for every extended tree transducerM ,there exists a STAGG such that the above relationholds up to a relabeling.6.1 Proof sketchThe following proof sketch is intended for readersthat are familiar with the literature on embeddedtree transducers, macro tree transducers, and bi-morphisms.
It can safely be skipped because wewill illustrate the relevant construction on our ex-ample after the proof sketch, which contains theoutline for the correctness.1071S1Tc?S1TcSS1a STca ?Sa S1STcaSSS1b Sa STcab ?Sa Sb S1SSTcabSSSS1a Sb Sa STcaba ?Sa Sb Sa S1SSSTcabaFigure 8: An incomplete derivation using the STAG of Figure 7.Let ?
?
T?
?
T?
be a tree transformationcomputed by a STAG.
By Shieber (2006) thereexists a regular tree language L ?
T?
and twofunctions e1 : T?
?
T?
and e2 : T?
?
T?
suchthat ?
= {(e1(t), e2(t)) | t ?
L}.
Moreover,e1 and e2 can be computed by embedded treetransducers (Shieber, 2006), which are particu-lar 1-state, deterministic, total, 1-parameter, lin-ear, and nondeleting macro tree transducers (Cour-celle and Franchi-Zannettacci, 1982; Engelfrietand Vogler, 1985).
In fact, the converse is also trueup to a relabeling, which is also shown in Shieber(2006).
The outer part of Figure 9 illustrates theserelations.
Finally, we remark that all involved con-structions are effective.Using a result of Engelfriet and Vogler (1985),each embedded tree transducer can be decom-posed into a top-down tree transducer (Ge?csegand Steinby, 1984; Ge?cseg and Steinby, 1997)and a yield-mapping.
In our particular case, thetop-down tree transducers are linear and nondelet-ing homomorphisms h1 and h2.
Linearity andnondeletion are inherited from the correspondingproperties of the macro tree transducer.
The prop-erties ?1-state?, ?deterministic?, and ?total?
of themacro tree transducer ensure that the obtained top-down tree transducer is also 1-state, determinis-tic, and total, which means that it is a homomor-phism.
Finally, the 1-parameter property yieldsthat the used substitution symbols are binary (asour substitution symbols ?[?]A).
Consequently, theyield-mapping actually coincides with our evalua-tion.
Again, this decomposition actually is a char-acterization of embedded tree transducers.
Nowthe set {(h1(t), h2(t)) | t ?
L} can be computedh1 h2?E ?E?M?e1 e2Figure 9: Illustration of the proof sketch.by an extended tree transducer M due to resultsof Shieber (2004) and Maletti (2008).
More pre-cisely, every extended tree transducer computessuch a set, so that also this step is a characteri-zation.
Thus we obtain that ?
is an evaluation of atree transformation computed by an extended treetransducer, and moreover, for each extended treetransducer, the evaluation can be computed (up toa relabeling) by a STAG.
The overall proof struc-ture is illustrated in Figure 9.6.2 ExampleLet us illustrate one direction (the constructionof the extended tree transducer) on our exampleSTAG of Figure 7.
Essentially, we just prepare alloperable nodes by inserting an explicit substitu-tion just on top of them.
The first subtree of thatsubstitution will either be a variable (in the left-hand side of a rule) or a variable headed by a state(in the right-hand side of a rule).
The numbers ofthe variables encode the links of the STAG.
Twoexample rules obtained from the STAG of Figure 7are presented in Figure 10.
Using all XTT rulesconstructed for the STAG of Figure 7, we present1072qS?[?
]S?x1 STc??[?]S?qSx1STcqSS?[?
]S?x1 Sa S?
a?Sa ?[?]S?qSx1SS?
aFigure 10: Two constructed XTT rules.a complete derivation of the XTT in Figure 11 that(up to the final step) matches the derivation of theSTAG in Figure 8.
The matching is achieved bythe evaluation ?E introduced in Section 3 (i.e., ap-plying the evaluation to the derived trees of Fig-ure 11 yields the corresponding derived trees ofFigure 8.7 ApplicationsIn this section, we will discuss a few applicationsof our main result.
Those range from representa-tional issues to algorithmic problems.
Finally, wealso present a tree transducer model that includesexplicit substitution.
Such a model might help toaddress algorithmic problems because derivationand evaluation are intertwined in the model andnot separate as in our main result.7.1 ToolkitsObviously, our characterization can be applied ina toolkit for extended tree transducers (or STSG)such as TIBURON by May and Knight (2006) tosimulate STAG.
The existing infrastructure (input-output, derivation mechanism, etc) for extendedtree transducers can be re-used to run XTTs en-coding STAGs.
The only additional overhead isthe implementation of the evaluation, which is astraightforward recursive function (as defined inSection 3).
After that any STAG can be simulatedin the existing framework, which allows experi-ments with STAG and an evaluation of their ex-pressive power without the need to develop a newtoolkit.
It should be remarked that some essentialalgorithms that are very sensitive to the input andoutput behavior (such as parsing) cannot be sim-ulated by the corresponding algorithms for STSG.It remains an open problem whether the close rela-tionship can also be exploited for such algorithms.7.2 AlgorithmsWe already mentioned in the previous sectionthat some algorithms do not easily translate fromSTAG to STSG (or vice versa) with the help ofour characterization.
However, many standard al-gorithms for STAG can easily be derived fromthe corresponding algorithms for STSG.
The sim-plest example is the union of two STAG.
Insteadof taking the union of two STAG using the clas-sical construction, we can take the union of thecorresponding XTT (or STSG) that simulate theSTAGs.
Their union will simulate the union of theSTAGs.
Such properties are especially valuablewhen we simulate STAG in toolkits for XTT.A second standard algorithm that easily trans-lates is the algorithm computing the n-best deriva-tions (Huang and Chiang, 2005).
Clearly, the n-best derivation algorithm does not consider a par-ticular input or output tree.
Since the derivationsof the XTT match the derivations of the STAG(in the former the input and output are encodedusing explicit substitution), the n-best derivationswill coincide.
If we are additionally interested inthe input and output trees for those n-best deriva-tions, then we can simply evaluate the coded inputand output trees returned by n-best derivation al-gorithm.Finally, let us consider an algorithm that can beobtained for STAG by developing it for XTT us-ing explicit substitution.
We will develop a BAR-HILLEL (Bar-Hillel et al, 1964) construction forSTAG.
Thus, given a STAG G and a recognizabletree language L, we want to construct a STAG G?such that?G?
= {(t, u) | (t, u) ?
?G, t ?
L} .In other words, we take the tree transformation ?Gbut additionally require the input tree to be in L.Consequently, this operation is also called inputrestriction.
Since STAG are symmetric, the corre-sponding output restriction can be obtained in thesame manner.
Note that a classical BAR-HILLELconstruction restricting to a regular set of yieldscan be obtained easily as a particular input restric-tion.
As in Nederhof (2009) a change of modelis beneficial for the development of such an algo-rithm, so we will develop an input restriction forXTT using explicit substitution.Let M = (Q,?,?, I, R) be an XTT (using ex-plicit substitution) and G = (N,?, I ?, P ) be atree substitution grammar (regular tree grammar)in normal form that recognizesL (i.e.,L(G) = L).Let S = {A ?
?
| ?[?
]A ?
?}.
A context is a map-ping c : S ?
N , which remembers a nontermi-nal of G for each substitution point.
Given a rule1073qS?[?]S?S?[?]S?S?[?]S?S?[?
]S?SS?Sa S?
aSb S?
bSa S?
aSTc??[?]S?qSS?[?]S?S?[?]S?S?[?
]S?SS?Sa S?
aSb S?
bSa S?
aSTc??[?
]S?Sa ?[?]S?qSS?[?]S?S?[?
]S?SS?Sa S?
aSb S?
bSS?
aSTc??[?
]S?Sa ?[?
]S?Sb ?[?]S?qSS?[?
]S?SS?Sa S?
aSS?
bSS?
aSTc??[?
]S?Sa ?[?
]S?Sb ?[?
]S?Sa ?[?]S?qSSS?SS?
aSS?
bSS?
aSTc??[?
]S?Sa ?[?
]S?Sb ?[?
]S?Sa ?[?]S?SS?SS?
aSS?
bSS?
aSTcFigure 11: Complete derivation using the constructed XTT rules.
(q, l) ?
(q1 ?
?
?
qk, r) ?
R, a nonterminal p ?
N ,and a context c ?
S, we construct new rules cor-responding to successful parses of l subject to thefollowing restrictions:?
If l = ?[?
]A(l1, l2) for some A ?
?, then se-lect p?
?
N , parse l1 in p with context c?where c?
= c[A 7?
p?
]9, and parse l2 in p?with context c.?
If l = A?
with A ?
?, then p = c(A).?
Finally, if l = ?
(l1, .
.
.
, lk) for some ?
?
?,then select p ?
?
(p1, .
.
.
, pk) ?
P is a pro-duction of G and we parse li with nontermi-nal pi and context c for each 1 ?
i ?
k.7.3 A complete tree transducer modelSo far, we have specified a tree transducer modelthat requires some additional parsing before it canbe applied.
This parsing step has to annotate (andcorrespondingly restructure) the input tree by theadjunction points.
This is best illustrated by theleft tree in the last pair of trees in Figure 8.
To runour constructed XTT on the trivially completedversion of this input tree, it has to be transformedinto the first tree of Figure 11, where the adjunc-tions are now visible.
In fact, a second un-parsingstep is required to evaluate the output.To avoid the first additional parsing step, wewill now modify our tree transducer model suchthat this parsing step is part of its semantics.
Thisshows that it can also be done locally (instead ofglobally parsing the whole input tree).
In addition,we arrive at a tree transducer model that exactly(up to a relabeling) matches the power of STAG,which can be useful for certain constructions.
It isknown that an embedded tree transducer (Shieber,2006) can handle the mentioned un-parsing step.An extended embedded tree transducer with9c?
is the same as c except that it maps A to p?.substitution M = (Q,?,?, I, R) is simply anembedded tree transducer with extended left-handsides (i.e., any number of input symbols is allowedin the left-hand side) that uses the special sym-bols ?[?
]A in the input.
Formally, let?
Q = Q0 ?
Q1 be finite where Q0 and Q1are the set of states that do not and do have acontext parameter, respectively,?
?
and ?
be ranked alphabets such that if?[?
]A ?
?, then A,A?
?
?,?
Q?U?
be such thatQ?U?
= {q?u?
| q ?
Q1, u ?
U} ??
{q??
| q ?
Q0} ,?
I ?
Q?T?
?, and?
R is a finite set of rules l?
r such that thereexists k ?
0 with l ?
Q?{y}?(C?
(Xk)) andr ?
Rhsk whereRhsk := ?
(Rhsk, .
.
.
,Rhsk) || q1?Rhsk?
(x) | q0??
(x)with ?
?
?k, q1 ?
Q1, q0 ?
Q0, and x ?
Xk.Moreover, each variable of l (including y) issupposed to occur exactly once in r.We refer to Shieber (2006) for a full descriptionof embedded tree transducers.
As seen from thesyntax, we write the context parameter y of astate q ?
Q1 as q?y?.
If q ?
Q0, then we alsowrite q??
or q???.
In each right-hand side, sucha context parameter u can contain output symbolsand further calls to input subtrees.
The semanticsof extended embedded tree transducers with sub-stitution deviates slightly from the embedded treetransducer semantics.
Roughly speaking, not itsrules as such, but rather their evaluation are nowapplied in a term-rewrite fashion.
LetSF?
:= ?
(SF?, .
.
.
,SF?)
|| q1?SF??
(t) | q0??(t)1074qS???[?
]S?x1 STc?q???STcx1qS??SSTc?q??
?STcSS?Figure 12: Rule and derivation step using the rulein an extended embedded tree transducer with sub-stitution where the context parameter (if present)is displayed as first child.where ?
?
?k, q1 ?
Q1, q0 ?
Q0, and t ?
T?.Given ?, ?
?
SF?, we write ?
?
?
if there existC ?
C?
(X1), t1, .
.
.
, tk ?
T?, u ?
T??{?
}, anda rule q?u?
(l) ?
r ?
R10 with l ?
C?
(Xk) suchthat?
?
= C[q?u?
(l[t1, .
.
.
, tk]E)] and?
?
= C[(r[t1, .
.
.
, tk])[u]y].Note that the essential difference to the ?stan-dard?
semantics of embedded tree transducers isthe evaluation in the first item.
The tree transfor-mation computed by M is defined as usual.
Weillustrate a derivation step in Figure 12, where thematch ?[?]S?
(x1, S(T (c)))E = S(S(T (c))) is suc-cessful for x1 = S(S?
).Theorem 2 Every STAG can be simulated by anextended embedded tree transducer with substi-tution.
Moreover, every extended embedded treetransducer computes a tree transformation thatcan be computed by a STAG up to a relabeling.8 ConclusionsWe presented an alternative view on STAG us-ing tree transducers (or equivalently, STSG).
Ourmain result shows that the syntactic characteri-zation of STAG as STSG plus adjunction rulesalso carries over to the semantic side.
A STAGtree transformation can also be computed by anSTSG using explicit substitution.
In the lightof this result, some standard problems for STAGcan be reduced to the corresponding problemsfor STSG.
This allows us to re-use existing algo-rithms for STSG also for STAG.
Moreover, exist-ing STAG algorithms can be related to the corre-sponding STSG algorithms, which provides fur-ther evidence of the close relationship between thetwo models.
We used this relationship to develop a10Note that u is ?
if q ?
Q0.BAR-HILLEL construction for STAG.
Finally, wehope that the alternative characterization is easierto handle and might provide further insight intogeneral properties of STAG such as compositionsand preservation of regularity.AcknowledgementsANDREAS MALETTI was financially supportedby the Ministerio de Educacio?n y Ciencia (MEC)grant JDCI-2007-760.ReferencesAlfred V. Aho and Jeffrey D. Ullman.
1972.
The The-ory of Parsing, Translation, and Compiling.
Pren-tice Hall.Andre?
Arnold and Max Dauchet.
1982.
Morphismeset bimorphismes d?arbres.
Theoret.
Comput.
Sci.,20(1):33?93.Yehoshua Bar-Hillel, Micha Perles, and EliyahuShamir.
1964.
On formal properties of simplephrase structure grammars.
In Yehoshua Bar-Hillel,editor, Language and Information: Selected Essayson their Theory and Application, chapter 9, pages116?150.
Addison Wesley.David Chiang.
2005.
A hierarchical phrase-basedmodel for statistical machine translation.
In Proc.ACL, pages 263?270.
Association for Computa-tional Linguistics.David Chiang.
2006.
An introduction to synchronousgrammars.
In Proc.
ACL.
Association for Computa-tional Linguistics.
Part of a tutorial given with KevinKnight.Bruno Courcelle and Paul Franchi-Zannettacci.
1982.Attribute grammars and recursive program schemes.Theoret.
Comput.
Sci., 17:163?191, 235?257.Joost Engelfriet and Heiko Vogler.
1985.
Macro treetransducers.
J. Comput.
System Sci., 31(1):71?146.Ferenc Ge?cseg and Magnus Steinby.
1984.
Tree Au-tomata.
Akade?miai Kiado?, Budapest.Ferenc Ge?cseg and Magnus Steinby.
1997.
Tree lan-guages.
In Handbook of Formal Languages, vol-ume 3, chapter 1, pages 1?68.
Springer.Jonathan Graehl and Kevin Knight.
2004.
Trainingtree transducers.
In HLT-NAACL, pages 105?112.Association for Computational Linguistics.
Seealso (Graehl et al, 2008).Jonathan Graehl, Kevin Knight, and Jonathan May.2008.
Training tree transducers.
ComputationalLinguistics, 34(3):391?427.1075Jonathan Graehl, Mark Hopkins, Kevin Knight, andAndreas Maletti.
2009.
The power of extended top-down tree transducers.
SIAM Journal on Comput-ing, 39(2):410?430.Liang Huang and David Chiang.
2005.
Better k-bestparsing.
In Proc.
IWPT, pages 53?64.
Associationfor Computational Linguistics.Kevin Knight and Jonathan Graehl.
2005.
An over-view of probabilistic tree transducers for natural lan-guage processing.
In Proc.
CICLing, volume 3406of LNCS, pages 1?24.
Springer.Kevin Knight.
2007.
Capturing practical naturallanguage transformations.
Machine Translation,21(2):121?133.Andreas Maletti.
2008.
Compositions of extended top-down tree transducers.
Inform.
and Comput., 206(9?10):1187?1196.Jonathan May and Kevin Knight.
2006.
TIBURON:A weighted tree automata toolkit.
In Proc.
CIAA,volume 4094 of LNCS, pages 102?113.
Springer.Mark-Jan Nederhof.
2009.
Weighted parsing of trees.In Proc.
IWPT, pages 13?24.
Association for Com-putational Linguistics.Rebecca Nesson, Giorgio Satta, and Stuart M. Shieber.2008.
Optimal k-arization of synchronous tree-adjoining grammar.
In Proc.
ACL, pages 604?612.Association for Computational Linguistics.William C. Rounds.
1970.
Mappings and grammarson trees.
Math.
Systems Theory, 4(3):257?287.Stuart M. Shieber and Yves Schabes.
1990.
Syn-chronous tree-adjoining grammars.
In Proc.
Com-putational Linguistics, volume 3, pages 253?258.Stuart M. Shieber.
2004.
Synchronous grammars astree transducers.
In Proc.
TAG+7, pages 88?95.Stuart M. Shieber.
2006.
Unifying synchronous treeadjoining grammars and tree transducers via bimor-phisms.
In Proc.
EACL, pages 377?384.
Associationfor Computational Linguistics.Stuart M. Shieber.
2007.
Probabilistic synchronoustree-adjoining grammars for machine translation:The argument from bilingual dictionaries.
In Proc.Workshop on Syntax and Structure in StatisticalTranslation, pages 88?95.
Association for Compu-tational Linguistics.James W. Thatcher.
1970.
Generalized2 sequentialmachine maps.
J. Comput.
System Sci., 4(4):339?367.1076
