A UNIF ICAT ION-BASED SEMANTIC  INTERPRETAT IONFOR COORDINATE CONSTRUCTSJong C. ParkUniversity of PennsylvaniaComputer and Information Science200 South 33rd StreetPhiladephia, PA 19104-6389 USAInternet: park@line, cis.
upenn, eduAbst ractThis paper shows that a first-order unification-based semantic interpretation for various coordi-nate constructs i possible without an explicit useof lambda expressions if we slightly modify thestandard Montagovian semantics of coordination.This modification, along with partial execution,completely eliminates the lambda reduction stepsduring semantic interpretation.1 In t roduct ionCombinatory Categorial Grammar (CCG) hasbeen offered as a theory of coordination in nat-ural language (Steedman \[1990\]).
It has usuallybeen implemented in languages based on first or-der unification.
Moore \[1989\] however has pointedout that coordination presents problems for first-order unification-based semantic interpretation.We show that it is possible to get over the problemby compiling the lambda reduction steps that areassociated with coordination i  the lexicon.
Weshow how our first-order unification handles thefollowing examples of coordinate constructs.
(1.1) Harry walks and every farmer walks.
(1.2) A farmer walks and talks.
(1.3) A farmer and every senator talk.
(1.4) Harry finds and a woman cooks a mushroom.
(1.5) Mary gives every dog a bone and somepoliceman a flower.We will first start with an illustration of whystandard Montagovian semantics of coordinationcannot be immediately rendered into a first-order209unification strategy.
The lexicon must containmultiple entries for the single lexical item "and",since only like categories are supposed to conjoin.For example, the lexical entry for "and" in (1.1)specifies the constraint that the lexical item shouldexpect on both sides sentences to give a sentence.Moore \[1989\] predicts that a unification-basedsemantic interpretation for sentences which in-volve for example noun phrase coordination won'tbe possible without an explicit use of lambdaexpressions, though there are cases where somelambda expressions can be eliminated by di-rectly assigning values to variables embedded ina logical-form expression.
The problematic exam-ple is shown in (1.6), where proper noun subjectsare conjoined.
(1.6) john and bill walk.The argument is that if we do not change the se-mantics of "john" from j to AP.P(j), where P is asecond order variable for property in the Montago-vian sense 1, then the single predicate AX.
walk(X)should accommodate two different constants j andb in a single variable X at the same time.
Sincethe unification simply blocks in this case, the ar-gument goes, we need to use higher order lambdaexpressions such as AP.P(j) or AP.P(b), whichwhen conjoined together, will yield semantics fore.g.
"john and bill" as,~P.
(P(j) ~ P(b)) .Combined finally with the predicate, this will re-sult in the semantics (1.7), after lambda reduction.
(1.7) walk(j) & walk(b)1Montague \[1974\].
)~pVp(j) to be exact, taking in-tensionality into account.
The semantics of the predi-cate "walks" will then be (^AX.walk(X)).Although Moore did not use quantified nounphrases to illustrate the point, his observation gen-eralizes traightforwardly to the sentence (1.3).
Inthis case, the semantics of "and", "every" and"some" (or "a") will be (1.8) a, b, and c, respec-tively.
(1.8) (a) AO.AR.AP.
(Q(P) ?
R(P))(b) AS.
AP'.
forall(X, S (X) =>P' (X))(c) AS.AP".
exists(X,S(X)~P' ' (X))Thus, after four lambda reduction steps, one foreach of Q, R, P' and P' ', the semantics of "a farmerand every senator" will beAP.
(exists(X,faxmer(X)RP(X))forall(X,senator(X)=>P(X))),as desired.Moore's paper showed how lambda reductioncould be avoided by performing lambda reductionsteps at compile time, by utilizing the lexicon, in-stead of doing them at run time.
Consider again(1.8a).
The reason why this formulation requiresfoursubsequent lambda reduction steps, not three,is that the property P should be applied to eachof the conjuncts, requiring two separate lambdareduction steps.
Suppose that we try to eliminatethese two lambda reduction steps at compile timeby making the argument of the property P explicitin the lexicon, following the semantics (1.9).
(1.9) AQ.AR.AP.
(Q(AX.P(X)) ?
R(AX.P(X)))The first-order variable X ranges over the set ofindividuals, and the hope is that after lambda re-duction it will be bound by the quantifiers, uchas fo ra l l ,  embedded in the expressions denotedby the variables Q and R. Since the same variableis used for both constructs, however, (1.9) worksonly for pairs of quantified noun phrases, whichdon't provide constants, but not for pairs involv-ing proper nouns, which do provide constants.
In-cidentally, this problem is particular to a unifica-tion approach, and there is nothing wrong with thesemantics (1.9), which is equivalent to (1.8a).
Thisunification problem cannot be avoided by havingtwo distinct variables Y and Z as in (1.10) either,since there is only one source for the predicateproperty for the coordinate noun phrases, thusthere is no way to isolate the argument of the pred-icate and assign distinct variables for it at compiletime.
(1.10) AQ.AR.AP.
(Q(XY.P(Y)) ~ R(XZ.P(Z)))210The way we propose to eliminate the gap be-tween (1.9) and (1.10) is to introduce some spuri-ous binding which can always be removed subse-quently.
The suggestion then is to use (1.11) forthe semantics of "and" for noun phrase conjunc-tion.
(1.11) Semantics o f"and"for  NP Conjunction:AQ.AR.AP.
(Q(AY.oxists(X,X=Y~P(X)))R(AZ.exists(X,X=Z~P(X))))This satisfies, we believe, the two requirements,one that the predicate have the same form, theother that the variables for each conjunct be keptdistinct, at the same time.
The rest of the lambdaexpressions can be eliminated by using the notionof partial execution (Pereira & Shieber \[1987\]).Details will be shown in Section 3, along with some"more immediate but faulty" solutions.
It is sur-prising that the same idea can be applied to somefairly complicated examples as (1.5), and we be-lieve that the solution proposed is quite general.In order to show how the idea works, we use afirst-order Montagovian I tensional Logic (Jowsey\[1987\]; Jowsey \[1990\]) for a semantics.
We applythe proposal to CCG, but it could equally wellbe applied to any lexicon based grammar formal-ism.
We explain briefly how a CCG works in thefirst part of Section 2.
As for the semantics, noth-ing hinges on a particular choice, and in fact thecode we show is devoid of some crucial featuresof Jowsey's semantics, such as indices for situ-ations or sortal constraints for variable binding.We present the version of Jowsey's emantics thatwe adopt for our purposes in the second part ofSection 2, mainly for completeness.
In Section 3,each of the cases in (1.1) through (1.5), or varia-tions thereof, is accounted for by encoding lexicalentries of "and", although only (1.3) and (1.5) de-pend crucially on the technique.We have a few words for the organization ofa semantic interpretation system we are assum-ing in this paper.
We imagine that it consists oftwo levels, where the second level takes a scope-neutral logical form to produce very possible, gen-uinely ambiguous, scoping possibilities in paral-lel and the first level produces this scope-neutrallogical form from the source sentence.
We as-sume that our second level, which we leave forfuture research, will not be very different fromthe one in Hobbs & Shieber \[1987\] or Pereira&: Shieber \[1987\].
The goal of this paper is toshow how the scope-neutral logical forms are de-rived from natural language sentences with co-ordinate constructs.
Our "scope-neutral" ogicalform, which we call "canonical" logical form (CLF),syntactically reflects derivation-dependent order ofquantifiers ince they are derived by a derivation-dependent sequence of combination.
We empha-size that this derivation-dependence is an artifactof our illustrative xample, and that it is not aninherent consequence of our technique.2 Background FormalismsA Combinatory  Categor ia l  GrammarThe minimal version of CCG we need to processour examples contains four reduction rules, (2.1)through (2.4), and two type raising rules, (2.5)and (2.6), along with a lexicon where each lexicalitem is assigned one or more categories.
For thereasons why we need these, the reader is referredto Steedman \[1990\].
(2.1) Function Application (>): X/Y ?
=> X(2.2) Function Application (<): Y X\Y => X(2.3) Function Composition (>B): X/Y Y/Z => X/Z 2(2.4) Function Composition (<B): Y\Z X\Y => XXZ(2.5) Type Raising, Subject (>T): np => s / (sknp)(2.6) Type Raising, Backward (<T): np => X\(X/np)The present fragment is restricted to the basiccategories n, np and s. 3 Derived categories, orcategories, are recursively defined to be basic cat-egories combined by directional symbols ( /o r  \) .Given a category X/Y or X\Y, we call X the rangecategory and Y the domain category.
Parenthesesmay be used to change the left-associative d fault.The semantics part to be explained shortly, (2.7a)through (2.7e) show examples of a common noun,a proper noun, a quantifier, an intransitive verb,a sentential conjunction, respectively.
(2.7) Sample Lexicon(a) cat ( fa rmer ,  n :X ' fa rmer (X) ) .
(b) cat (har ry ,  np :A I ' (h 'B ) 'B ) .
(c) cat (every ,  np: (X'A)'(X'B)'forall(X,A=>B)/n:X'A).2In Steedman \[1990\], this rule is conditioned by Zs\np in order to prevent such constructs as "*\[Harry\]but \[I doubt whether Fred\] went home" or "*\[I thinkthat Fred\] and \[Harry\] went home.
"3For simplicity, we do not show variables for gen-der, case, tense, and number.
Larger fragment wouldinclude pp, etc.211(d) cat (walks, s : S\np: (X'A)" (X'walk(X)) "S).
(e) cat (and,  (s: (St ~ S2) \s :S1) /s :S2) ,4A F i r s t -Order  Montague Semant icsIn this section, we will focus on describing howJowsey has arrived at the first-order formalismthat we adopt for our purposes, and for furtherdetails, the reader is referred to Jowsey \[1987\] andJowsey \[1990\].
The reader can safely skip this sec-tion on a first reading since the semantics we usefor presentation i Section 3 lacks many of the newfeatures in this section.Montague's PTQ analysis (Dowty, Wall & Pe-ters \[1981\]) defines an intensional logic with thebasic types e, t and s, where e is the type of en-tities, t the type of truth values and s the typeof indices.
Derived types <a,b> and <s,a> are re-cursively defined over the basic types.
A name,which is of type e, denotes an individual; individ-ual concepts are names relativized over indices, orfunctions from indices to the set of individuals.
In-dividual concepts are of type <s, e>.
A predicatedenotes a set of individuals, or a (characteristic)function from the set of individuals to truth val-ues.
Properties are intensional predicates, or func-tions from indices to the characteristic functions.Properties are of type <s,<e,t>>,  or <e,<s, t>>.A formula denotes a truth value, and propositionsare intensional formulas, thus of type <s,t>.By excluding individual concepts, we can en-sure that only truth values are relativized over in-dices, and thus a modal (omega-order) logic willsuffice to capture the semantics.
For this purpose,Jowsey defines two basic types e and o, where ocorresponds to the type <s,t>,  and then he de-fines derived types <a,b>, where a and b rangeover basic types and derived types.
The logic isthen made into first-order by relying on a fixednumber of sorts and eliminating recursively de-fined types.
These sorts include e, s, o, p andq, which correspond to the types e, s, <s,t>,<e,<s, t>> and <<e,<s , t>>,<s , t>> respectivelyin an omega-order logic.For a full exposition of the logic, the reader isreferred to Jowsey \[1990\].
For our presentation, we4The category (s \ s ) / s  has the potential dangerof allowing the following construct, if combined withthe rule <B: "*Mary finds a man who \[walks\]s\n p\[and he taIks\]s\s."
The suggestion i Steedman \[1990\]is to add a new pair of reduction rules, X \[X\]~ ffi> X andconj X => \[X\]~, together with the category of "and"as conj.
Thus, the category of "and harry talks" isnow \[s\]t~, blocking the unwanted combination.will simplify the semantics and drop intensional-ity altogether.
We also drop the sortal constraint,since our examples do not include belief operatorsand hence the only variables left are of sort e.3 A F i rs t -Order  Uni f icat ionWe will follow the standard technique of combin-ing the syntactic information and the semanticinformation as in (3.1), where up-arrow symbols(,-,)5 are used to give structures to the seman-tic information for partial execution (Pereira &Shieber \[1987\]), which has the effect of perform-ing some lambda reduction steps at compile time.
(3.1) Basic Categories(a) n: (de'do)(b) rip: (de'do)" (de'ro) "So(c)The term do in (3.1a) and (3.1b) encodes domainconstraint for the variable de.
Likewise, the termro in (3.1b) specifies range constraint for de.
Theterm So in (3.1b) and (3.1c) encodes the sententialconstraint associated with a sentence.
In order toavoid possible confusion, we shall henceforth callcategories without ~emantic information "syntac-tic" categories.In this section, we will develop lexical entries forthose coordinate constructs in (1.1) through (1.5),or variations thereof.
For each case, we will startwith "more immediate but faulty" solutions andpresent what we believe to be the correct solutionin the last.
(For those who want to skip to thecorrect lexical entries for each of the cases, theyare the ones not commented out with %.)
We haveseen the lexical entry for sentential conjunction in(2.7d).
The lexical entry for predicate conjunctioncan be similarly encoded, as in (3.2).
(3.2) Lexical Entry for Predicate Co~unct~ncat (and ,  ( (s :S\np:A'(X*(B1 ~ B2)) 'S)\(s:Slknp:A'(X'BI)'SI))/(s:S2knp:A'(X'B2)'S2)).When the conjoined predicates are combined withthe subject noun phrase, the subject NP providesonly the domain constraint, through A in the firstline.
The range constraints in the last two NPcategories guarantee that B1 and B2 will bear thesame variable X in them, so that they can be safelySNot to be confused with Montague's ha~ek sym-bol, '^'212put as the range constraint of the first NP cate-gory.
The CLF for (1.2) from (3.2) is shown in(3.3).
(3.3) exists(Xl, farmer(Xl)~(walk(Xl)~ta lk (X l ) ) )Let us turn to noun phrase coordination, e.g.,(1.3).
The first try, on the model of predicate con-junction, would be:(3.4) Lexical Entry for NP Conjunction:%cat(and,  (np:A'(X'D)'(B & C)% \rip :AI" (Y'D) "B)% /rip: A2" (Z'D) "C).The intention is to collect the two domain con-straints via A1 and A2, to get the range constraintfrom D in the first line, and then to combine themby joining the two sentential constraints B and Cof the domain categories.
This idea however doesnot work, since the variables ?
and Z do not ap-pear in the range constraint D. As a result, (3.4)will give the following ill-formed CLF for (1.3).ex is ts  (Xl, farmer (X i) &talk (X3))Rforall (X2, senator (X2) =>talk (X3))We therefore need to use distinct variables in placeof D for the two range constraints which will havethe same predicate symbol for their range cate-gories.
Using the Prolog predicate univ ( '=..  '),we can correct (3.4) as follows: 6(3.5) Lexical Entry for NP Conjunction:%cat(and, (np:A'(X'D)'(B & C)% \np : AI" (Y'B1) -B)/rip: A2" (Z'C1)'C) :-D =.. \[Pred, X\],% B1 =.. \[Pred, Y\],C1 =.. \[Pred, Z\].This is an explicit case of a first-order simulationof second order variables.
Unfortunately, this doesnot work, for several reasons7 First, this handlespredicates of arity 1 only, and we need to knowthe type of each argument if we want to providea different category for each predicate of differentarity.
Second, this can not be combined with pred-icate coordination, for example, such as "john and6D .. \[P,X\] succeeds if D is unifiable with P(X).7One implementation-dependent reason is that theProlog requires at least one of the two variables V andFred to be already instantiated for the univ to work.This can not be expected when the noun phrase con-junction is being processed, since we don't yet knowwhat predicate(s) will follow.a woman walk and talk," or some complex verbsthat may require several predicates, such as "be-lieves", since it assumes only one predicate for therange constraint.The solution we propose is to use the revisedsemantics of "and" in (1.11) instead.
That is, weexpect (3.6) from (1.3):(3.6) Proposed Semantics of (1.3):exists (Xl, farmer(Xl)~(exists (X2, (X2=Xl)&talk (X2)) ) )&f orall(X3, senat or (X3)=>(exists (X2, (X2=X3) ~tt a\]k (X2)) ) )We need to distinguish the variable X2 in thesecond line from the variable X2 in the fourthline, via something like c~ conversion, since in thepresent form, the Prolog will consider them as thesame, while they are under distinct quantifiers.In fact, since we are separating the semantic in-terpretation into two levels, we can further pro-cess the CLF at the second semantic interpretationlevel to eliminate those spurious bindings such asexists(X,  (X=u)~tu) along with variable renamingto derive the logical form (3.7) from (3.6):(3.7) exists (Xl, farmer(Xl ) &talk(Xl) )aforall (X3, senator (X3) =>talk (X3))(3.8) produces the CLF  (3.6) for (1.3).
(3.8) Lexical Entry for NP  Conjunction:cat (and,(np:A'(X'D)'(B ~t C)\np: A1" (Y" (exists (X, (X=Y) &D) ) ) "B)/np : A2" (Z" (exists (X, (X=Z) ~tD) ) ) "C).The reason why we are able to maintain in thetwo domain categories two different forms of rangecontraints is that the only place that will unifywith the actual range constraint, i.e., the predi-cate, is the range constraint part of the range cat-egory only.
We note in passing that Jowsey pro-vided yet another approach to noun phrase coordi-nation, a generalized version of his idea as shownbelow.
(3.8a) Lexical Entry for NP Conjunction:cat(and,(np:(X*A)'(X'D)'B\np:(Y'A1)*(Y'C)'B)/np:(Z'A2)'(Z'forall(X,(X=Y v X=Z)=>D))'C).For example,(3.8a) will give the following seman-tics for (1.3).exists(Xl,farmer(Xl)&forall(X2,senator(X2)=>forall(X3,(X3=Xl v X3=X2)=>talk(X3))))213This approach as its limits, however, as indicatedin the footnote 8.We now turn to some of the non-standard con-stituent coordination.
First, consider (1.4), whichis an instance of Right Node Raising (RNR).
TheCCG syntactic ategory of the conjunction "and"in this case is (C\C)/C, where C is s/np.
(3.9)shows one derivation, among others, for (1.4).
Thesyntactic ategory of "finds" is (sknp)/np.
(3.9) One derivation for (1.4).harry finds and a woman cooks a musMroom..... >T ....... >T -s / ( s \np)  .
.
.
.
s / ( s \np)  .
.
.
.
.
np.
.
.
.
.
.
.
.
.
.
.
.
.
>B >Bs /np  s /np(s /np)k (s /np)<s/rip.
.
.
.
.
.
.
.
.
.
.
>sAssuming that the category of "finds" is as follows,(3.10) Lexical Entry for '~nds":cat(finds.
((s:S\np:AI'(X'A)'S)/np:A2"(Y'find(X,Y))'A)).here is the first try for the RNR "and.
"(3.11) Lexical Entry for RNR Conjunction:%cat(and, ( (s:S/np:A'CX'(Bl~B2)) 'S1)% \(s:S/np:A'(X'B1)'Si)% /(s:S3/np:A'(X'B2)'S2).For example, (3.11) will produce the CLF (3.12)for the sentence "harry finds and mary cooks amushroom.
"(3.12) exists(Xl,musbxoom(Xl)~find(h,Xl)&cook(m,Xl))However, this works only for pairs of proper nouns.For example, for the sentence "every man findsand a woman cooks a mushroom," it will give theill-formed CLF (3.13) where the domain constraintfor the noun phrase "a woman" is gone and X3is therefore unbound.
This happens because thesentential constraint S2 is not utilized for the finalsentential constraint.
(3.13)%forall(Xl,man(X1)=>exists(X2,%mushroom(X2)&find(XI,X2)%&cook(X3,X2)))Putting the two sentential constraints Sl and s2together as follows does not work at all, since therelation between S and SO is completely undefined,unlike the ones between S1 and B1 and between S2and B2.%cat (and,%%((s:S/np:A'(X'(SIaS2))'SO)\(s:SI/np:AI'(X'BI)'BI))/(s:S2/np:A2"(X'B2)'B2)).This problem is corrected in (3.14), which will pro-duce the eLF (3.15) for (1.4):(3.14) Lexical Entry for RNR Co~unctmn.catCand, ((s:S/np:A'CX'CSl&S2))'S)\(s:SI/np:AI"(X'BI)'BI))I(s:S2/np:A2"(X'B2)*B2)).
(3.15) Semantics of (1.4) from (3.14):exists(Xl,mushroom(Xl)kfind(h,Xl))kexists(X2,.oman(X2)kcook(X2,Xl)))(1.5) shows another case of non-standard con-stituent coordination, which we will call an in-stance of Left Node Raising (LNR).
The syntacticcategory of "and" for LNR is (C\C)/C where Cis ( sknp) \ ( ( (sknp) /np) /np) .
(3.16) shows onesyntactic derivation for (1.5).
The syntactic ate-gory of "gives" is ( (sknp)/np)/np.
(3.16) One derivation for (1.5), fragment.every dog a bone<T ...... <T((sXnp)/np) \ ( ( (sknp)/np) /np)(sknp) \ ((sknp)/np)<B(s \np)k(( (sMap)/np) /np)Again, we assume that the category of "gives" is:(3.17) LexicM Entry for "gives":ca t (g ives ,  ( (s :S lknp:AI ' (X*S2) 'S1)/np:A2"(Y'give(X,Z,Y))'B)/np:A3"(Z'B)'S2).
(3.18) shows the first try for the lexical entry, s(3.18) Lexical Entry for LNR Conjunction.%cat(and,% ( ( (s : _ \np :_ )% \(((s:S\np:(X'A)-(X'(S4 ~ S6))'S)/np:AI'(Y-B)'SI)/np:A2"(Z'SI)-S2))Sin this case, we can no longer use the disjunctivetechnique such as foral l(Xl,  (Xl= v Xl= )=>give(,X1, )) for the CLF, since Xl is now a pair.
The prob-lem gets worse when the conjoined pairs do not havethe same type of quantifiers, as in (1.5).214% \((s:_\np:_)\(C(s:_knp:_)% Inp:A3"(Y'B)'S3)% /np:A4"(Z'S3) 'S4)) )% / ( ( s : _ \np :_ )k ( ( ( s : _knp:_ )% /np:AS"(Y'B)'SS)% /np:A6"(Z'SS)'S6))).It gives the eLF (3.19) for (1.5):(3.19) Semantics of (1.5) from (3.18):forall (Xl, dog (X 1 ) =>exist s (X2, bone (X2)~give (m, Xl ,X2) ) ) ~exist s (Xl, policeman(Xl)?
exist s (X2, flo.er (X2) ~give (m, X I, X2) ) )Unfortunately, (3.18) favors quantified nouns toomuch, so that when any proper noun is involved inthe conjunction the constant for the proper nounwill appear incorrectly in the two sentential con-straints at the same time.
It seems that the onlyway to resolve this problem is to create four vari-ables, Y1, Y2, 7.1 and Z2, at the semantics level,similar to idea in (1.11).
(3.20) implements thisproposal.
(3.20) Lexical Entry for LNR Conjunction.cat(and,(((s:_\np:_)\(((s:Sknp:(X'A)'(X'(S4 ~ Se))'S)/np: At" (Y'B)'SI)/np:A2" (Z'S1) "$2))\((s :_\np:_)\(((s :_knp:_)/np : A3" (Y 1"(ex is ts  (Y, (Y=Y1)~B))  "$3)/np:A4" (Zl" (exists (Z, (Z=Z I) ~$3) ) ) "S4) ) )/((s :_\np:_)\(((s:_\np:_)/rip:A5" (Y2" (exists (Y, (Y=Y2) kB) ) ) "$5)/np:AS" (Z2" ex is ts  (Z, (Z=Z2) &SS) ) ) "S6) ) ).
(3.20) will give the eLF (3.21) for (1.5).
(3.21) Semantics of (1.5) from (3.20):f orall (Xl, dog(Xl) =>exist s (X2, X2=Xl&exist s (X3, bone (X3) ~exist s (X4, X4=X3\g ive  (m,X2, X4) ) ) ) )\exist s (Xl, policeman(Xl) ~exist s (X2, X2=XlRexist s (X3, flower (X3)~exist s (X4, X4=X3agive (m, X2, X4) ) ) ) )Using the technique of eliminating spurious bind-ings, (3.21) may be replaced by a logical form(3.22):(3.22) fora l l (X l  ,dog(Xl)=>exists (X3 ,bone (X3) ~give (m, Xl, X3) ) )~exists (Xl, policeman(Xl)&exists (X3, flo.er (X3)~give (m, Xl, X3) ) )In addition to this, (3.20) gives the CLF (3.23) for(3.24),(3.23) exists (Xl, Xl=j~exist s (X2, bone (X2)?
exist s (X3, X3=X2 &give (m, X 1, X3) ) ) )?
exists (X 1, Xl=b~exist s (X2.
flo.er (X2)Rexist s (X3, X3=X2 ~give (m, X1, X3) ) ) )(3.24) mary gives john a bone and bill a flower.for which no CLF could be derived if we were using(3.18).
This completes our demonstration for thetechnique.The natural question at this point is how manylexical entries we need for the conjunct "and".
Ifnatural language makes every possible categoryconjoinable, the number of entries should be in-finite, since function composition can grow cate-gories unboundedly, if it can grow them at all.
Wepredict hat in natural anguage we can limit theconjunction arity to n, where n is the maximumarity in the lexicon.4 Conclus ionThe system described in this paper is implementedin Quintus Prolog.
We expect hat the approachcan be extended to any lexicon-based grammar ofthe same power as CCG if it provides means forterm unification.The reason we choose to eliminate all thelambda expressions i  that it allows uniform treat-ment within first-order unification, since Jowsey'sresults uggest that in other respects natural lan-guage semantics can be characterized in a first-order logic.
As an alternative, we could chooseto enforce uniform treatment within second-orderunification, using the idea for example in Na-dathur & Miller \[1988\].
Although we leave thispossibility for future research, we believe that thisoption might turn out to be more appropriate interms of elegance of the approach.
And the result-ing conceptual c arity might be exploited to designa schema for generating these entries for "and".the content.
I am also very grateful to Dr. MarkJohnson, who suggested, and took pains of goingover in detail, another way of presenting the thesis,that resulted in the material in the introductionsection.
All errors are however entirely mine.
Theauthor was supported by the ARO grant DAAL03-89-C-0031PRI.ReferencesDavid R. Dowty, Robert E. Wall & Stanley Peters\[1981\], Introduction to Montague Seman-tics, D. Reidel Publishing Company.Jerry R. Hobbs ~ Stuart M. Shieber\[January-June 1987\], "An Algorithm for Generat-ing Quantifier Scopings," ComputationalLinguistics 13, 47-63.Einar Jowsey\[1987\], "Montague Grammar andFirst Order Logic," Edinburgh Work-ing Papers in Cognitive Science: Catego-rim Grammar, Unification Grammar andParsing 1, 143-194.Einar Jowsey\[1990\], Constraining Montague Grammarfor Computational Applications, DoctoralDissertation, Department of AI, Univer-sity of Edinburgh.Richard Montague \[1974\], in Forma/ Philosophy,Richmond H. Thomason, ed., Yale Uni-versity Press.Robert C. Moore\[1989\], "Unification-Based Se-mantic Interpretation," Proceedings ofthe ACL.Gopalan Nadathur & Dale Miller\[1988\], "AnOverview of A-Prolog," Proceedings oftheFifth International Logic ProgrammingConference.Fernando C.N.
Pereira & Stuart M. Shieber \[1987\],Prolog and NaturM-Language Ananlysis,CSLI Lecture Notes Number 10.Mark J. Steedman \[April 1990\], "Gapping as Con-stituent Coordination," Linguistics andPhilosophy 13, 207-263.5 AcknowledgementsMany thanks are due to Dr. Mark Steedman,whose guidance immensely helped to improve thequality of presentation, as well as the quality of215
