American Journal of Computational LinguisticsH.
William ButtelmannOhio S t a t e  universityMicrof iche 7C o g y r i g h t  1974 by the A s s o c i a t i o n  for Computational LinguisticsABSTRACTA formal d e f i n i t i o n  fo r  t h e  semantics of a context  free language,ca l l ed  a phrase-structure semantics., i s  given.
The d e f i n i t i o n  is  a modelof t h e  not ion  t h a t  i t  i s  phrases which have meaning and t h a t  the  meaningof a  phrase is a funct ion of i t s  s y n t a c t i c  s t r u c t u r e  and of the meaningsof i ts  cons t i tuents .
Next w e  give a d e f i n i t i m  f o r  t r a n s l a t i o n  on contextf r e e  languages.
We then study a c e r t a i n  kind of t r a n s l a t i o n  on cf 1's.which proceeds by t r a n s l a t i n g  on the  phrase t r e e s  of  the  languages, and isspec i f i ed  by a  f i n i t e  set of tree-replacement r u l e s .
We present  a pro-cedure which, given a  cfg and phrase-s t ructure  semantics f o r  a sourcelanguage and a cfg and phrase-structure semantics f o r  a  t a r g e t  language,w i l l  (usual ly)  produce the  f i n i t e  set of ttee-replacement rules for tnet r a n s l a t i o n ,  i f  the t r a n s l a t i o n  e x i s t s .
The procedure may be viewed as acomputer program which i s  a t r a n s l a t o r  generator ,  and which producesanother program t h a t  i s  a t r a n s l a t o r .TABLE OF CONTENTSAbstract .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
2T a b l e o f  Contents .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
3. .
.
.
.
.
.
.
.
.
.
.
1 .
Phrase Structure Syntax and Semantics 5. .
.
.
.
.
.
.
.
Def in i t ion  1 (phrase-structure semantics) 6. .
.
.
.
.
.
Example 1 (cfg and phrase-s t r u c t u r e  semantics) 7Def in i t ion  of semantic func t ions  4: T(G) -+ CP .
a .
a .
.
.
.
8U Def ink t ionof  meaning function;: L(G) + 2  .
.
.
.
.
.
.
.
92 .
Trans la t ions  as Tree Mappings ................ 12Dgfinition of general translation r: L(G1) + 2 L(G.2) .
.
.
.
12D e f i n i t i o n o f g e n C T )  .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
13Example2 (gen(T)) .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
13Defin i t ion  of translatioh r: T(G ) -t 2 T (G2) .
.
.
.
.
.
.
.
14LCG2) Definition of t r ans la t ion  7: L(G1) + 2 .
.
.
.
.
.
.
.
15Example 3 ( f i n i t e l y  s p e c i f i e d  translation) .
.
.
.
.
.
.
.
.
163 .
A Procedure f o r  Finding Translations (Usually) .
.
.
a .
a .
.
17PROCEDURE .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
19Proof tha t  the function defined by PROCEDURE is a .
.
.
22translatiotl.
.
.
.
.
Figure 1 Translator Generator and Translator 25.
4 Sample Translations .
.
.
.
.
a .
a .
.
.
.
.
.
.
.
.
.
.
.
.
27TRANSLATION I (Postfix t o  Precedence Infix)  ........ 27TRANSLATION XI (Cxpliclt * t o  I m p l i c i t  *) .
.
.
.
a .
m .
.
31T R A N S L A T I O N I I I ( 2 .
+ t o 1 .
+) .
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
32TRANSLATIONIV(1.
+ t 0 2 .
+ )  .
?
4 .
335 .
Conclusion and Further Research .
.
.
.
.
.
.
.
.
.
.
.
.
33Selected Btbliographya m a .
.
.
a - .
.
.
a m .
o * * .
* .
~ .
36SEMANTIC DIRECTED TRANSLATION tOF CONTEXT FREE LANGUAGESH.
William ButtelmamDepartment of Computer and Information ScienceOhio S t a t e  Univers i tyColumbus, Ohio 432100.
Introduct ion.This paper p re sen t s  a formal model of t he  t r a n s l a t i o n  of contextf r e e  languages.
The model i s  admit tedly inadequate t o  provide f o r  a l lthe i n t r i c a c i e s  and complexities of the  problem o f  language t r a n s l a t i o n .Nevertheless ,  I hope t h a t  p r a c t i c i n g  apfll ied and computational.
l i n g u i s t sw i l l  find i t  i n t u i t i v e l y  s a t i s f y i n g  i n  i t s  s i m p l i c i t y .
A t  the same time,the  model should give u s  a b a s i s  f o r  proving some t h e o r e t i c a l  resultsabout the  na tu re  o f  language t r a n s l a t i o n .Trans la t ion  i s  neces sa r i l y  concerned wi th  both  syntax and semantics,so we begin with a formal d e f i n i t i o n  of semantics f o r  context f r e e  grammars.I n  Sect ion 2 ,  a simple algori thm f o r  t r a n s l a t i n g  from one context  freelanguage t o  another is  given.
The algorithm is  "control led" by a f i n i t eset of r u l e s  which spec i fy  how t o  rep lace  phrases i n  t h e  source languagewith semantical ly equivalent  phrases i n  the t a r g e t  language.
The trans-l a t i o n  algorithm, i t  t u r n s  o u t ,  i s  s t t a igh t fo rward .
The key p r o b l e ~  is in"finding" the  f i n i t e  se t  of r u l e s  which c a r r e c t l y  spec i fy  the t rans ' la t ion  .The main p a r t  of t h i s  paper,  Sect ion  3, is concerned wi th  t h a t  problem.Throughout t& paper,  w e  assume t h a t  grammars and semantics a r e  given.There is  nothing i n  this paper t h a t  te l ls  you.
how t o  go about wr i t i ng  the"r ight"  grammar and semantics f o r  a given cf 1.t An e a r l i e r  ve rs ion  of t h i s  paper was presented t o  the  Eleventh AnnualMeeting of the  Association f o r  Computational L ingu i s t i c s  a t  Ann Arbor,Michigan, August, 1973.This research was supported i n  p a r t  by NSF g ran t  GN-534.1.Much of the presentation is formal.
Some readers may find i t  helpfult o  read only through Example 1, and then t o  peruse Section 4 (SampleTranslat ions)  t o  pick up some i n t u i t i o n ,  before proceeding with the  restof the paper.1.
Phrase Structure  Syntax and Semantics.I assume the reader i s  fami l i a r  w i t h  the notions of "derivation" andI1 syntax tree1'  (a l ias  "derivation tree", a l i a s  "phrase marker") f o r  cf g ' s .Several good texts on these  subjec ts  a r e  l i s t e d  i n  the bibliography.The def in i t ion  of semantics which I am about t o  give i s  based oathe following two simple notions:  1) it i s  phrases which have m e w g(paragraphs, sentences, clauses, and morphs a re  s p e c i a l  cases of' phrases)  ,and 2) the meaning of a phrase i s  a function of i t s  s y n t a c t i c  s t r u c t u r eand of t h e  meanings of i ts  c o n s t i t u m t s .
Keeping i n  mind t h a t  a functionis nothing but aq assignment of elements i n  i t s  csdemain t o  elements i nits domain, t h i s  d e f i n i t i o n  wi l l  provide for idiomatic and emotive meaning,as well as denotative or referential meaning, provided such meanings arespec i f i ed  i n  the  universe of di,scourse.
I wish t o  add before giving thedef ins t ion  tha t ,  although I have never seen i t  i n  t h i s  form before, I donot be l ieve  t h i s  d e f i n i t i o n  of semantics i s  o r i g i n a l  wi th  me.
I believeit  incorporates the notions of semantics i n  Benson (1970), Knuth (1968,1971), some statements attributed t o  Thompson (cf Benson, 1970), and in*Tarski  (1936).
Now the  de f in i t ion :Def in i t i on  1.Let.
G = (V, z, P,  S)  b e  a con tex t  f r e e  grammar where:V is the  f i n i t e  nonempty vocabulary,C c - V is  t h e  t e rmina l  a lphabe t ,S ?
(V - C) i s  the  axiom, andP is the finite nonempty set of grammar r u l e s ,  having the form+ A -t B ,  f o r  A ?
(V - C) and B 6 V .A phrase -s t ruc ture  semantics  f o r  G is a 7b tup led = (u, M, u, X, A ,  F, R), where:U i s  a se t ,  t h e  un iverse  of d i scourse ,T TM - c 2" is a f i n i t e  set of atomic morphemes,M p:  V + 2 is the vocabulary meaning function,X = , 1, ,, xl, X29 .. .
, X I  ) f o r  some i n t e g e r  n ,  RA is a f i n i t e  set of n b e s  of p a r t i a l  r ecu r s ive  func t ions ,F is  a f i n i t e  s e t  of d e f i n i t i o n s  f o r  t h e  p a r t i a l  r ecu r s ivefunc t ions  named i n  A ,R is a finite set of semantic r u l e s ,  with the proper ty  thatt o  each grammar r u l e  A -t B .
.
.B t h e r e  i s  assigned one 1 nsemantic  r u l e ,  having the  form r A + B1.
.
.B (xl,*..,X ~l = P ,n+where p ?
(M U X U A) , and r A + B1.
.B ( x ~ , ~ ~ ~ , x  n 1 = Pns p e c i f i e s  a p a r t i a l  r ecu r s ive  funct ion:We a l s o  r e q u i r e  that X fI (M u A) = 0.There is  an example on t h e  next page.Example 1.Coxfsider a cfg and phrase-structure semantics f o r  well-formed additionexpressions over t h e  alphabet Z = {I, +).
L(G) = {I, I+I, I+I+I, .
.
.
I .G = (V, Z, P, S), and d = (U, M, , X, 4, F, R ) ,  where:semanticsv = {S, I, +) + U = N U {f } U {I} ,  where:c = {I, +) N i s  t h e  set of non-aegatiue i n t ege r s ,3-and f and I a r e  recurs ive  functionsdefined i n  F below,+ t  M = {N, 1, f 1F contains just the following de f in i t i ons :1 ( i d e n t i t y  function on N + N):1 (x) = x+ f (integer addi t ion  on N x N + N) :1 )  f+(x ,Y) = ( f+(X,Y))  (' is  the successor fn.
)Note t h a t  rS4+S (x1,x2,x3) = x (X ,X ) does indeed speci fy  a  recurs ive  2 1 3function on v ( S )  xu(+) xv(S) -+ v ( S ) ,  s ince  i f  x, and x, are i n  p(S) = N and if+ + .I.
J +X2 is i n  v(+) = {f 1, then x2(x1,x3) = f (X x ) i s  i n  N and f is  defined 1' 3primitive recursive,Before explaining the example, let's f i r s t  consider what the  semanticsi s  used f o r .
We will need t h e  following no ta t i on  for t r ee s :0) a i s  a tree, f o r  all a f C.1) a c t  ... t > is a t r e e ,  f o r  a l l  a c Z and trees tl, ..., t .
1 n nt For r eadab i l i t y ,  we w r i t e  the members of M without unnecessary braces --i .
e .
,  "1" i n s t ead  of "{l)".The above induct ive  d e f i n i t i o n  gives a "standard" parenthebized n o t a t i o nfor trees.
Let us denote t he  r o o t  of a tree t ,  r t ( t )  and the  frontier,f r ( t ) .
We s h a l l  a l s o  need the  fol lowing non-standard nota t ion:t I t  ... t ] i s  a tree i f  t 0 1 n 0' n .
.
.
, t are trees and i fInformally,  t o [  tl.
.
.
t ] is  the tree formed by "graf t i ag l '  each ti a t  t he+I.
ni"' node of the f r o n t i e r  of  to, which can be done s i n c e  t h i s  node has thesame label as the root of ti.
For example, t h e  tree-Ais denoted a<b<de>c>, and i t  has  a l l  t h e  fol lowing non-standard representa-t i ons :  a<bc> [b<de>c], a<b<de> c> [dec] , and a[a<bc>] [b<de>cL  A s  t h e  readercan see, the  "box no ta t ion"  i s  u s e f u l  f o r  i s o l a t i n g  any rooted sub t ree .
I np a r t i c u l a r ,  no t e  t h a t  S<S+S> [s<I>+s<I>] i s  the  syntax tree S<S<I>+S<I>> ofthe  grammar of Example 1, with its dominating s u h t r e e  S<S+S> i s o l a t e d .Now back t o  t h e  semantics.
The semantic rules R are used t o  define afunc t ion  4 on the  trees of the  grammar which ass igns  t o  each syntax tree ta semantic funct ion 4(t).
Then 4 and the  meaning funct ion p a r e  used t odef ine  a meaning func t ion  p on the  sentences of  G. F i r s t ,  w e  de f ine  4 ,then u.To def ine  $, w e  must first def ine  the codomain of @, @.
Informally,U u + is  the  set of a l l  n-ary func t ions  on 2 X * * * X Z ~  + 2 , f o r  arbitrary n.U Formally, l e t  +n = {f:2 x * a * ~ 2 ~  + 2 U f i s  a function of n arguments).Then @ = Un=1,2, ..
.
@n .tThe funct ion @:T(G) + @ as s igns  t o  each t i n  T(G) a semantic f u ~ c t i o n$ ( t )  on IJ(B~)x*.~x~(B ) + p ( r t ( t ) ) ,  where B1...B = f r ( t ) .
To spec i fy  an nsemantic funct ion w e  w i l l  use t h e  n o t a t h n  f(x **8,\) :D + C, where f is 1'the  name of the  func t ion ,  (xl,.
.
.
,x ) is the vec to r  o f  arguments, D is thendomain, and C is t h e  codomain.
$ i s  defined by t h e  following induc t ived e f i n i t i o n :tT(G) is the  s e t  of  syntax t r e e s  ( p a r t i a l  and complete) of G.= r (xl, ..., x ) : p ( ~  )x***xp(B ) + p(A) ,  where A+B1.. .B n 1 anA .+ B1...B i s  a grammar ru le .n1) Let t tO[t t 1 T(G),nand l e t  Bi +l...Bi = f r ( t  ) f o r  j = 1, ..., n ,  where i = 0.j j 0 j -1Then @(t0Itl .
.
.
t  ])(x1, ..., x ) : .
~ I ( B ~ ) x " * x ~ ( B ~  ) + v ( r t ( t O ) )n in nIn tu i t i v&ly ,  t he  semantic funct ion assigned t o  each t r e e  t is t h e  composi-t ion  of the  semantic funct ions assigned t o  the  subtrees  of which t iscomposed.
We leave i t  to  the  reader  t o  v e r i f y  t h a t  $ is well-defined.The meaning function p on sentences is a s p e c i a l  case of the  meaningfunct ion v on a l a r g e r  domain -- t h e  s e t  of phrase forms of the  grammar.A phrase form i s  s i m i l a r  t o  a s e n t e n t i a l  form, except t h a t  i t  need not bederived from the  axiom.
Formally, the  set o f  phrase.
forms of G is the  set* *P(G) = I w I v C V and A a w  f o r  some A 6 v).The funct ion $ i s  used t o  def ine  t he  meaning function as follows.
Theu funct ion p:P(G) + 2  is  defined by t he  following rule: Let w = w .
.
O W  be 1 na phrase form i n  P (G) and le t  w have syntax trees tl, .
.
.
, t .
Then themset of tueanings of w is the  setL(G) , the  language of G, i s  a subset  of P(G) , so the  meaning funct ion on.usentences, p:L(G) + 2 , i s  j u s t  the r e s t r i c t i o n  of p t o  L(G) .ASince the  three  functions v ,  y, and II have d i s j o i n t  domains, they cannever be confused, so  w e  s h a l l  wr i te  v f o r  all three .
).I i s  the meaningfunction, which assigns t o  each sentence, phrase form, and symbol, one o rmore meanings according t o  the semantics d .
Thus, we are assigningmeaning to  a sentence by assigning t o  i t  the  meanbgs which a r e  computed bythe semantic functions specified by i t s  phrase s t ruc tu res ,  taking a s  a r g u ~ments the  meanings of t h e  const i tuents  of the  sentence.
T h e  most elementaryconst i tuents  of a sentence a r e  the members of C which cons t i tu t e  i t .
One.may think of these as the l e x i c a l  items of the language.
Their meanings,wMch a r e  the  arguments of t h e  semantic function, a re  among the morphemesof the  language -- those morphemes which cannot be furthe-r separated i n t omorphemes ( t h i s  is  the s e t  of "atomic morphemes", M) .
Thus, the meaningof a sentence i s  a function of i t s  morphemes.
l h i c h  function t o  use tqdetermined by i t s  s y n t a c t i c  s t r u c t u r e .
A sen tence  can be semantically am-biguous i f  it has more than one syntax t r e e  o r  if a t  l e a s t  one of i ts  con-s t i t u e n t s  is semantically ambiguous.We retyrn t o  Example 1 on the  next  page.Now consider Example 1.
L e t  w b e  the sentence "L + I' + I".
It hasthe syntax treeOne meaning oE w is  4 (t) (P (I), P (+I, P (I), IJ (+.I, P (I)).
For  notationalpurposes, le t  tl, tq, 3, and t4 be the subtrees  of t c i r c l ed  i n  thep i c t u r e .
Now compute this member o f  P (w) :Note that "I + I + I" a l s o  has t h e  syntax treebut  the  sentenge is  n o t  semant ica l ly  ambiguous since2 .
Translat ion9 A s  Tree Mappings.Consider now any two c fg ' s  and t h e i r  a ssoc ia ted  semantics,  9, d land G2, J2.
A t r a n s l a t i o n  of L(G1) tjo L(G ) is a function 2T: L(G,) + 2 L (G*) defined a s  f o l l e w :The codomain of a t r a n s l a t f o n  must be the  power set of the  t a r g e t  language,s i nce  every sentence i n  L(G ) may have many semantical ly equivalent  sen- 1tences i n  L(G2).
I n  t h i s  paper wel focus on b a n s l a t i o n s  which a r e  speci-fied by a f i n i t e  set of r u l e s .
For these t r a n s l a t i o n s ,  the re  i s  a simplealgori thm f o r  computing the  trans lati011 of any sentence.
This s e c t i o npresen t s  th2 bethod f o r  giving the f i n i t e  s p e c i f i c a t i o n  of T and thealgori thm f o r  computing the  t r a n s l a t i o n .In  f a c t ,  i n s t ead  of spec i fy ing  a t r a n s l a t i o n  on the languages, wespec i fy  a t r a n s l a t i o n  on the  t r e e s  of the  syntaxes.To make p rec i se  what i s  meant by " t r ans lq t ions  which a r e  spec i f i ed  bya f i n i t e  set of r u l e s "  we Snt roduce  t h e  concept of a generat ing set f o rtrees.
Let T and T2 be two sets bf trees with l a b e l s  from some alphabet 10 C. Define the set T t o  be the  s e t  of all t r e e s  wi th  single nodes and Cl a b e l s  from g, i .
e .
,  = { a I a E E}.
Informally,  T is a generating.
set 10 f o r  T j u s t  i n  case every tree i n  T7 i s  e i t h e r  i n  T o r  i s  constructed of a 2 - Cf i n i t e  number of trees of T and j u s t  i n  case every t r e e  s o  constructed is 1'in T t .
Formally, le t  T be a s e t  of trees wi th  l a b p l s  from Z.
The setgen(T) of trees generated by T is defined inductively %as fol'lows:0 0) TI: - C gen(7) and T - c gen(T),1) tO[tl.. .
t ] E gen(T) if i t  i s  defined, nfor a l l  pos i t ive  integer$.
n,and for all trees to, , ..., t ?
gen(T).nT i s  a generating se t  for gen(T).
We leave i t  to the reader to  verify thatevery tree i n  gen(T) can be written in the f orin to [ tl.
.
.
t ] , wheren nt?
(T U T;) and each ti ?
gen(T), for  i = 1, .
.
.
.
st. 0Example 2.The s e t  of production.trees of a cfg i s  a generating set for the setof all the syntax trees of the grammar.
L e t  G = (V, C, P, S ) ,  le t  P- (i) , Bcontain k rules, and let  P = { A ( i )  ( i )  ( i )  1 *2 ...B n4 1 i E 1 , 2 ,  m .
a , k l .Then the set of production trees  of G i s  the .setThe set T(G) of a l l  syntax trees  of G is  the s e t  gen(T,).A s  a more concrete example, consider the cfg G given by the followingTp i s  the se t  { S<OS>, S<B2, B<O>, Bcl> 1 ,  or written p ic tor ia l ly :T(G) = gen(Tp) contains all trees of the following forms::s (COS)" (>p n > 0 ,  -The tree t = S<OS<OS<B>>> i s  111 T(G) = gm(Tp) s ince  t = S ~ O S ~ [ O S ~ O S ~ B ~ ~ }and S<OS> ?
Tp; 0 ?
gen(Tp), and ScOS<B>> ?
ges(Tp).
Note t h a t  t can a lsobe written as t = s<OS<OS>> [OOS<B>], and again,  S<OScOS>> ?
gen mp),0 f gen(Tp) , and S<B> ?
g e n ( ~ ~ ) .To spec i fy  a t r a n s l a t i o n  from T(G ) t o  T ( G ~ )  w e  proceed as fallows: 1L e t  r be any p a r t i a l  funct ion on VN -+ V , and l e t  T be a generat ing set N,I Lfor T(GI).
L e t  ; be a funct ion on T + T(Gp) x N + + 0 which s a t i s f i e s  thefollowing p rope r t i e s  :i f  ; ( t )  = (t', xl...x ) thenni )  r t { t ' )  = ; ( r t  (t)), andi i )  n = 1 f r ( t t )  1 ,  andi i i )  0 < - x .
< I f r ( t ) I ,  f o r  i = 1, ..., n, and1 -i v )  xi # 0 * f r ( t r ) i  = r ( f r ( t )  ), f o r  i = 1, ..., n.X iT(Gg)Then we def ine  the funktion r: T(G1) + 2 by t he  following induct ivede f in i t i on :0) t ?
T - r ( t )  = t , where ; ( t )  = (t', x) .where i) ;( to) = (T ( t o ) ,  XI- ) 9 andnii)any member ofNote t h a t  the  codomain of T i s  the power set of T(G2) because t he re  may bet r ee s  i n  T(G ) whose non- t r i v i a l  f ac to r ings  into t [ t .
.
.
t ] a re  n o t  unique.
1 0 1 mFor these  t r e e s ,  ~ ( t )  = { +(t 0 [ t  1 .
.
.
tm]) 1 tO[ t l .
.
.
t  1 is a r e p r e ~ e n t a t i mmof t ).
A s  with languages, w e  w i l l  c a l l  a t r a n s l a t i o n  only i f  i t  pre-T(G2)serves semantics, t h a t  i s ,  T: T(G1) + 2 is a t ransPat ion i f f  f o r  everyt r e e  t 6 T ( G ~ )  and f o r  every t r e e  t '  E T ( G ~ ) ,  i f  f r ( t )  = wl...w andmf r ( t t )  = w; ... w' ,  thennt N i s  the  set of non-negative i n t ege r s .
0We will c a l l  r f i h i t e l y  s p e c i f i e d  ( spec i f i ed  by a f i n i t e  set of r u l e s )  i f fthe genera t ing  set T is f i n i t e .F ina l ly ,  r is used t o  de f ine  a t r d n s l a t i o n  r: L(G1) -+ 2 L(%) as follows:L e t  w ?
L(Gl) have syntax trees tl, .... \.
Then-r(w) = { w' 1 3 t '  i n  T(G2) and 3 t i n  T(G1) such thatt' is a syntax tree of w' andt i s  a syntax tree of w andt t  ?
~ ( t )  I .It follows from the  d e f i n i t i o n s  t h a t  7 is  a t r a n s l a t i o n  i f  r i s .
To seethtis, let w = wl.. .w and w' = wim.
.
.w' and le t  w' E T(w).
Then there existnsy&tax trees t of w and t '  of w' such t h a t  t '  C df).
Let= @(t)(ul(wl)9".9u 1 (w m )) and E 2 = ( t f ) ( 2 , .
.
, 2 ( w ) .
Then fromthe  d e f i n i t i o n  of 11, c1 1 ) = ( w )  I?
r is a G II (w) and c2 - -- -t r a n s l a t i o n ,  then fl E2 # 0, so <(w) f l  V ~ ( T ( W ) )  0, and s o r i s  at r ans l a t i on .The funct ions  ; and i a r e  t h e  method f o r  speci fv ing t h e  funct ion r.The speci f  icati.cn is f i n i t e  j u s t  i n  case t h e  generat ing set T is  f i n i t e .The induct ive  d e f i n i t i o n  f o r  T gives the algori thm f o r  computing the  tpans-l a t i o n  of any tree in T(G ) ,  and the definition of y, t oge the r  wi th  t h i s  1algorithm and a genera l  context  f r e e  pa r se r  such as Floyd's o r  Ear ly ' salgorithm, g ives  the algorithm f o r  computing the  t r a n s l a t i o n  of any sen-tence in L(G ).
The next example illustrates.
1(In t h e  following and i n  a l l  subsequent examples, w e  s h a l l  give ex-p l i c i t l y  only the grammar r u l e s ,  t h e  right-hand s i d e  of t he  semantic r u l e s ,the universes of  discourse,  the meaning function, and those d e f i n i t i o n s  ofp a r t i a l  recursive funct ions  t h a t  are necessary.
The reader  can e a s i l ydetermine the  rest of the  s p e c i f i c a t i o n s  f o r  t he  grammars and semantics, i fhe wishes.
For cfg ' s  we sha l l  fol low the  usua l  convention t h a t  a l l  symbolswhich do n o t  appear on the  left-hand side of  some grammar r u l e  are termi-nal symbols, and t h a t  the  axiom i s  the f i r s t  symbol appearing in the  f i r s trule.
)Example 3.We present two cfg's  and their semantics, and a finitely specifiedtranslation T on T(G ) + 2 1T(G2) .
To help  the intuit ion,  consider thatG , 1 describes well-parenthesized subtract ion expressions, and G2, d 1 1  2descrfbes subtraction expressions in Polish postfix notation.E + E-E x2(x1,x3)U1 = U2 = N U {f-1, whereN i s  the set of  integers andf-: N x b + N i s  ordinary subtracfionThe translation i s  specif ied by:?
(E) = SThe sentence 1-2-3 i s  semantically ambiguous (its meanings are O and -4).and its two translations are given by:AE - E1 ' O EI I1 2contains 12-39i .
e .
, T 1 2 3 )  contains 1239-the other hand the sentence 1- (2-3) d s  and is translated:-i .e.
,  ~(1-(2-3)) contains 123--3.
A Pr-ocedure for Finding .
.
Trznslations (Usually).Suppose  an oracle presents us with two cfg's G and G and their  1 2r e s p e c t i v e  semantics and d2.
Suppose also that a f i n i t e l y  spec i f ied  1translation froq T(G1) t o  T(G2) e x i s t s .
Can w e  find i t?
That i s ,  can weproduce t h e  f l n i t e  se t  ofr r u l e s  ae f in ing  the  func t ions  ?
and ;?Xn this s ec t ion  we consider  a procedure which accep ts  two a r b i t r a r yc fg ' s  and t h e i r  phrase s t r u c t u r e  semantics and tries t o  f i ~ d  a descrip-t i o n  of such a t r a n s l a t i o n .
The procedure may n o t  always work, i n  thatai t  may n o t  h a l t  o r  the  Function T i t  descr ibes  may.be only p a r t i a l .
KtT i s  guaranteed t o  be c o r r e c t ;  t h a t  is ,  the  d e f i n i t i o n s  of i and ; pro--duced spec i fy  a p a r t i a l  func t ion  r: T(G,.)
+ 2 T(G2) which i s  a t r a n s l a t i o nAin t h e  sense t h a t ,  f o r  any t ?
T(G ), i f  ~ ( t )  i s  defined then ~ ( t )  i s  a 1t r a n s l a t i o n  of t. F i r s t ,  t h e  procedure i s  presented;  then we give  t hearguments t h a t  t i s  3 ( p a r t i a l )  t r a n s l a t i o n .I n t u i t i v e l y ,  the  procedure works as follows: We t r y  t o  f i n d  a f i n i t egenerat iog set T f o r  T(G1) and a p a i r  of funct ions  i: V N q + V  andN..A t I LT: T + T(G2) x N which have the proper ty  that f o r  every t r e e  t E T, i f  0 0Ar( tO) = ( t ,  x , then t and t '  represen t  t h e  same semantic funct ion.
What 0 0I I i s  meant by to and t; represen t  t he  same semantic function" is i u s t  t h i s :-I f  ;(to) = C t &  5 ... x ) then 4 ( t O ) ( ~ 1 , e a m s ~ m )  = 4 ( t b ) ( ~ i , a a a ~ ' ) ,n nprovided y '  = iI n  genera l ,  t o  g e t  semantic equivalence,  one has t o  be c a r e f u l  how thes y n t a c t i c  va r i ab l e s  on t h e  f r o n t i e r  of t a r e  assoc ia ted  by the  s t r i n g  x 0with t he  s y n t a c t i c  v a r i a b l e s  on the  f r o n t i e r  of t;), s i n c e  these represen tpos s ib l e  t r e e s  with mceming, and hence the  domains of the  semantic f w c -t i o n s  f o r  t and t' 0 0 ' I f  such a genera t ing  set T and funct ions  i and ; canbe found, t he  job is  f i n i s h e d ,  s i n c e  i t  can then be shown t h a t  t he  func t ionT defined by i and ; i s  a t r a n s l a t i o n .The procedure begins with t he  set Tp of production t r e e s  o f  G which 1'is indeed a f i n i t e  generat ing s e t  f o r  T(G1) a I f  t h e  procedure can f i n d  a??
t r a n s l a t i o n "  for each t i n  T i t  w i l l  be successful, and w i l l  h a l t  and P ,output T,  , and ;.
The procedure sys temat ica l ly  p icks  successive t r e e s  t 0i n  T and searches T(G ) f o r  a semantical ly equivalent  tree t;) whose fron- P 2t i e r  i t  can roatch up by some r u l e  x.
If i t  f inds  one, i t  outputs  the@ad e f i n i t i o n  ; ( to)  = ( t b ,  x ) ,  d e l e t e s  t from T and tries one of t he  remain- 0 Ping  trees.
If i t  succeeds in exhausting T i t  i s  success fu l .
P'Suppose, however, t h a t  f o r  some to i n  Tp, t he  procedure can't find a" t rans la t ion"  in T(G2).
Then i f  w e  assume t h a t  7 does exist, it  must bethe  case t h a t  t is  par t  of a l a r g e r  t r e e  ( o r  of each of a set of larger 0trees) which can be " t rans la ted" .
Furthermore, i f  w e  a l s o  assume tha tr i s  f i n i t e l y  s p e c i f i e d ,  this s e t  is  f i n i t e .
Thus, the procedure triest o  cons t ruc t  a new set of trees, T1 , n o t  conta in ing t which is a f i n i t e  O Sgenerat ing set f o r  T(G ) - {to}.
It cannot be the  case t h a t  t he  f r o n t i e r  1of to is a sentence  i f  we a l s o  assume t h a t  t h e  e x i s t i n g  '; i s  t o t a l  onil So, l o s i n g  to from T(G ) cannot delete any sen tences  from the 1lang,uage represented  by T(G1).
The procedure takes the  set T as a new 1genera t ing  se t  t o  work wi th  and begins  again .It turns o u t  t h a t  f i n d i n g  T depends heavily an the  sequence i n  whichsuccess ive  trees a r e  chosen f o r  t r a n s l a t i o n  a t tempts .
Therefore, t oguarantee t h a t  T will be found if i t  e x i s t s ,  the procedure tries all poss-i b l e  sequences af t r e e s .
The procedure has t he  genera l  s t euc tuxe  of aI1 t r e e  search",  and is  represented  by the s ea rch  t r e e  p i c t u r e d .
below.
Eachnode i n  t he  t r e e  r ep re sen t s  a subprocedure which i s  descr ibed below thetree.-F Given two reduced c f g ' s  G and G and t h e i r  r e spec t ive  phrase- 1 2s t r u c t u r e  semantics  J1 and J2,, execute the  sea rch  tree below f a r  a14i n t e g e r p a i r s  ( m a x i , m a x s ) =  (1, 11, (1, 21, (2, 11, (2, 2), ... .
I f f o rI t  any p a i r  s t e p  1 halts and ou tpu t s  success", then ha l t .t Reduced in the  sense t h a t  each nonterminal  symbol i s  de r ivab le  from theaxiom an'd derives t emina l .
s t r i n g s .
I t  is well-known t h t  every cfg rlfmbe p u t  i n t o  t h i s  form.step 1: Se t  i t Ci.Define the ( f i n i t e )  set of treesDefine t h e  ( f i n i t e )  set of a l l  possible p a r t i a l  - functions.I ,  i,, ..., ; k } such t h a t  f o r  each j = 1, 2, ..., k,v + VN, and ;.
(S1) = S .
a n d  f o r  all A ?
VN3 N, J 2 1 plExecute s t e p  2 f o r  each f u n c t i o n  ; J( i .
e .
,  f o r  each j = 1, 2, .
.
.
, k).
If f o r  some j the execution11 11 of s t ep  2 r e t u r n s  success",  then  h a l t  and ou tpu t  success".
Ifs t e p  2 r e t u r n s  " f a i l " ,  i n c r e a s e  j and cont inue .
I f  s t e p  2 r e t u r n s"fail" f o r  a .
( i e ,  f o r  a l l  j ) ,  then  h a l t  and output " fa i l " .Jstep 2: (Nab.. T ,  is a  f i n i t e  set)I t. If T = (8 then r e t u r n  success".
iIf i > maki t h e n  return " f a i l t t .O t h e w i s e  execu te  step 3 f o r  each t ?
T i ' I f  t h e  execut ion of11step 3 returns success", then r e t u r n  "success".
I f  s t e p  3r e t u r n s  " f a i l " ,  then  pick t he  next  t i n  Ti and execute step 3againr If step - 3 returns "fai l"  for all t in Ti, then return"fail".step 3: Execute search.If search returns "fail" then execute expand.If expand returns "fail" then return "fail" to step 2.I I If either search or expand returns success" then return11 success" to s t ep  2.search: Generate the first (maxs) trees of T(G2) :T~ = {ti, ti, m e  a ,  t' I *  maxsTest each tree t '  i n  T t  t o  see  i f  i t  s a t i s f i e s  each of thefollowing properties :i) ;(rt (t)) = rt(tl)if) There is a string of non-negative integers x = x x .
.
.x a, 1 2  nsuch that each of the following i s  true:b) xi # O = , f r ( t t ) i  = ;(fr(t)  ) for i =  1, 2 ,  .
.
.
,  nX 4for i = 1, 2 ,  ..., nprovidedr1 If no such tree  t '  exists i n  T', then return fail" to  step 3.If such a tree t t  does exist  i n  T' thendefine ;(t) = ( t t ,  x)s e t  J .
+  i+ldefine the set T i = (Ti-l - it))execute a new version o f  step 2.I I I1 If step 2 returns success" return success" to  step 3.1 I If s t e p  2 returns fail" return "fail" to  step 3.expand: rn Let Dam(;) denote the domain of t h e  cu r r en t  ve r s ion  of thefunct ioh ?, i .e.
,  ~orn(?)
= { t  I ?
i t )  has been defined by-some execution of search i n  the  cu r r en t  p a t h  of t h e  searchtree).
L e t  T$' denote t h e  ( f i n i t e )  set  (T. U ~ o m ( i ) ) .
Define i 1t h e  set T t o  be t h e  sma l l e s t  s e t  of trees which is a genera t ing  ts e t  f o r  (gen(~;) - I t ) ) ,  and which conta ins  t h e  set (TI - I t} ) .
i(Note t h a t  Tt does n o t  con ta in  t.)I I I f  T is  n o t  f i n i t e ,  r e t u r n  f a i l "  t o  s t e p  3 .tS e t  i + i+l.S e t  T + Tto- iExecute a  new vers ion  of s t e p  2.11 11 I f  s t e p  2 r e t u r n s  success" r e t u r n  success" t o  s t e p  3.1 I I f  s t e p  2 r e t u m s  " f a i l "  r e t u r n  f a i l "  t o  s t e p  3.END OF PROCEDURENow we  want t o  exp la in  how the  PROCEDURI$ de f ines  f u n c t i o n s  (poss ib lyp a r t i a l  func t ions )  on T(G1) -+ 2 T(G2) and on L(G6 ) + 2 1 L(G2' , and prove thatt h e  func t ions  a r e  t r a n s l a t i o n s .
We s h a l l  a l s o  show t h a t  i f  the  PR0CEDZl.Gh a l t s ,  t h e  t r a n s l a t i o n  i t  t o t a l ,  except  under c e r t a i n  e a s i l y  i d e n t i f i a b l econdi t ions .Consider any pa th  i n  t h e  search tree.
It looks l i k e  t h i s :s t e p  1=?s t e p  3 Fs t e p  2 0(; i s  defined he re  .
)(To = Tp i s  def ined here.
)(; ( t )  = (t' , x) i s  d e f i n e d  he re  i ft h e  node i s  search .
)(T1 i s  defined here .
)(T is  defined here .
)nWe need t o  i d e n t i f y  two p a r t i c u l a r  s e t s  of trees assoc ia ted  wi th  t h i s  path.Both are f i n i t e .
The f i r s t  i s  t h e  domain of t h e  funct ion i, and t h e  secondis  the  set of  trees "excluded" by the success ive  executions of  expand.Note that each execution of t h e  subrout ine  - sea rch  adds one i t e m  t o  thed e f i n i t i o n  of t h e  function, ?, and the  e n t i r e  d e f i n i t i o n  of ; is  given byt h e  s e t  of a l l  t h e s e  items def ined by execut ions  of search i n  t h e  path .The domain of ?, then, i s  t h e  set~orn(;) = {k I ; ( t )  is  defined by some execution o f  t h esubrout ine  search i n  t h e  path}.S imi la r ly ,  each execut ion of t h e  subrout ine  expand, i n  i t s  f i r s t  s t e p ,de f ines  a  new set, Tts which daes no t  contain t h e  t r e e  t .
This  s t e p  hast h e  e f f e c t  of excluding the  tree t from any f u r t h e r  cons idera t ion  i n  t h et r a n s l a t i o n  process .
The se t  of a l l  such trees i s  t h e  setExcl = { t  I T is  def ined by some execut ion of t h etsubrout ine  exclude i n  the path}.Wow, the  s e t   om(;) U T ) is  a  f i n i t e  genera t ing  set f o r  t h e  s e tn(T(G1) - Excl) ,  s o  t h e  func t ions  i and ?
de f ine  a p a r t i a l  funct ionT : - T ( G ~ )  + 2 T(GZ) according t o  t h e  d e f i n i t i o n  i n  Section 2 .
Furthermore,if T = b then ; is t o t a l  on .the genera t ing  se t ,  and s o  T i s  t o t a l  onn(T (GI) - Excl) , and t h i s  i s  j us t t h e  case when t h e  PROCEDURE h a l t s .
SinceExcl i s  a f i n i t e  se t ,  we have the  r e s u l t  that T i s  defined on a l l  bu t  afinite number of elements i n  T ( G ~ ) ,  when t h e  PROCEDURE ha l t s .Since T is.
a p a r t i a l  func t ion  on T(G ) -+ 2 T(G2) 1 , i t  fo l lows from t h ep (G2)d e f i n i t i o n  of 7 i n  Sect ion 2 t h a t  ?
i s  a p a r t i a l  funct ion on P(G ) + 2 1and the re fo re  on L(G1) + 2 L(G*) .
Lett P(Excl) denote t h e  s e t  of f r o n t i e r sof the  t r e e s  of Excl.
Note t h a t  each member of P(Exc1) i s  a  phrase form.Then when the  PROCEDURE h a l t s ,  s i n c e  T i s  t o t a l  on (T(G,) - E x c ~ )  , i tAfollows t h a t  i s  t o t a l  on (P ( G ~ )  - P (Excl) ) and on (L(G1) - P (Excl) ) .-Thus, is  t o t a l  on L(G1) i f  PROCEDURE halts and i f  none of t h e  treesexcluded by exclude are complete syntax trees.
I f  complete syntax treesare excluded, then t h e i r  sentences  are the  only ones f o r  which 7 is no tde f ined .-We have l e f t  only t o  show t h a t  T i s  a  t r a n s l a t i o n .
The reader  mayr e c a l l  t h a t  t h e r e  may be s e v e r a l  n o n t r i v i a l  f ac to r ings  of trees i n t o  aform f o r  which T i s  defined, and t h a t  t h i s  may lead to  non-unique trans-l a t i o n s .
Furthermore, t h e  languages may be semantical ly ambiguous.
Thesecondi.tions make the  proof t h a t  r i s  a  t r a n s l a t i o n  l e s s  l u c i d ,  so  w e  s h a l lgive here  t h e  proof f o r  t h e  case where r i s  defined f o r  only one f ac to r ingof each tree and t h e r e  i s  no ambiguity.
It w i l l  be h e l p f u l  i n  t h e  prooft o  have the  following no ta t ion :  Let t ?
T(G1) have f r ( t )  = wl.
.
.w and l e tmt '  C T(G2) have f r ( t l )  = w i  ... w ' .
Then by a ( t )  : $ ( t l )  w e  meannNow t o  t he  proof.
L e t  ~ ( t )  = t ' .
We wish t o  show t h a t  $ ( t )  r $(tl).Since t ?
gen  om(;)), t can be w r i t t e n  a s  t [ t  .
.
.
t ]  where to C  om(;) 0 1 mand each of the t r e e s  t .
.
, , t C g e n ( ~ o m ( i ) ) .
Let ; ( to )  = (tb, xl.
.
.X ) .
1' m nThen fram the  d e f i n i t i o n  of T ,  ~ ( t )  = t '  [ t ' .
.
.
t ' ] ,  where f o r  each 0 1 nFor induct ive  hypothesis ,  assume t h a t  f o r  each j = 1,. .
.
,m,t ( t .
Then w e  have:JFor r E 1, ..., m le t  y  = $(t j ( v  (W r r 1 jrm1+l * l j  r 1 , andf o r  i = 1, ..., n l e t  y' = $ (y ! )
(y  (v' i ), .
.
.
, u  (w' ) Then, if w e  1 2 kiWl+l kidefine j = kg 0 = 0, t h e  r e s u l t  above demonstrates t h a tThus, by the  def i l i ig ion  of in s e a r c h ,= $(t')(p2(~i),...,~2(~A)), o r  +(t) E $ ( t ' ) .
Thus r is  a t r a n s l a t i o x .F i n a l l y ,  as w e  showed in Sec t ion  2 ,  s i n c e  T i s  a t r a n s l a t i o n  (on the.-syntax trees), r is a t r a n s l a t i o n  (on the  languages).I n  programming terminology a genera to r  i s  a  program whose inpu t  is aset  of parameters and whose ou tpu t  is  a s p e c i a l i z e d  program (cf Brooks andI I Iverson (1969), p .
365).
Then PROCEDURE c o n s t i t u t e s  a t r a n s l a t o rgenerator": i ts  inpu t  i s  two c f g ' s  and t h e i r  a s s o c i a t e d  phrase  s t r u c t u r esemantics, and i ts  output  i s  a t a b l e  of tree t ransformat ions  which "drives"a s&andard tree-mapping program.
The t r e e  mapping program is  designed t obe p a r t  of a  t r a n s l a t o r  system composed of a p a r s e r ,  t h e  tree mapper, anda f r o n t i e r  s t r i p p e r  (see F igure  1 )  .
T r a n s l a t i o n  proceeds as follows: LetG and a1 b e  the  cfg and semantics  f o r  t h e  source  language, L1, and G2 a d  1d the c fg  an& semantics f o r  t h e  t a r g e t  language L3.
The t r ~ n s l a t o r  isL.given a sentence  w i n 7 L  1' The p a r s e r  produces a p a r s e  tree t < w )  f o r  w. ( I fw i s  s y n t a c t i c a l l y  ambiguous, t h e  p a r s e r  may produce all t he  p a r s e  t r e e s  ofw.)
I f  t(w) is i n  t h e  domain of tihe func t ion  T def ined  by t h e  tree mapper,t h e  tree mapper w i l l  produce ~ ( t ( w ) )  whose f r o n t i e r  is a sen tence  u i n  L 2 'r --- - -  1t ransformat ion  TRANSLATOR It a b l e(; and i)II9- I* T&K FRONTIERMPSPER--------------Figure  1.
T r a n s l a t o r  genera to r  and t r a n s l a t o r .The importance of t h e  argument t h a t  the func t ion  def ined  By t h e  PROCEDUREis a t r a n s l a t i o n ,  is  just that  w and u are guaranteed t o  have the  sgnemeaning.
i f  they are unambiguous, and i f  thev are ambiguous, w and u areguaranteed t o  have meanings i n  common -- i .
e .
, t h a t  u is,  a bona f i'de--t r a n s l a t i o n  of  w, i n  t he  o rd inary  sense  of t h e  wordThe usefu lness  of such a method of t r a h s l a t i n g  is  t h a t  the generator,which has t o  cons ide t  a l l  i s s u e s  of syntax and semantics, and t h e r e f o r eruns very s lowly,  need on ly  run once.
The t r a n s l a t o r  which it producesshould run very f a s t ,  s i n c e ,  o t h e r  than pa r s ing ,  i t  bhly has  t o  t ransformtrees according t o  t he  f i n i t e  set of rules i n  t h e  t ree  t ransformat iont a b l e  ( t he  funct"ion ;).
No seman&c computing i s  requ i red  a t  t r a n s l o t otime.This saction presents some examples of translations on context freelanguages.
The tree search procedure outlined i n  Section 3 i s  programmedi n  CPS and runs on the IBM ~/370/165 a t  Ohio State.
A l l  of these trans-lat ions were "found" by the program.TRANSLATION I (Postfix t o  Precedence Infix)Postfix: Infix:Grammar Rules Semantic Rules Grammar Rules Semantic RulesS -, sso x3 (*l,x2) E + EOTUniverse of discourseR = real numbers = I R ~ ,  R2,  Rg, ... 1F = ~ f + ~  f-, f * ,  ?
'IMeaning function assigning atomic morphemes t o  lexicaL items ands v n t a c t i c  variables:A1 = A2 = {I}, and F1 = F contains j u s t  the  def ini t ion:  I :  N + N: ~ ( x )  = x.
2The reader should be able  to f i g u r e  ou t ,  a f t e r  reading t h e  def in i t ion  i n+ * /  Section 1, that  M l a H 2 =  {R, R1, %I R3, F, f , f , f , f 1 andA number of finite spec i f ica t ions  f a r  t r ans la t ions  are possible.
One is:A T A  s s o  J=( E o T  A , , 91002) ;(AJ=(?!
s s o  yl~~]9 E O T+ FA( EAEIt is  i n t e r e s t i n g  t o  note  t h a t  the PROCEDURE does not  have t o  know how+ * 1t o  corppute t h e  funct ions  f , , f , and f i n  order  t o  discover  t h i st r a n s l a t i o n .
A l l  t h a t  is needed is  t o  assume t h a t  i f  a symbol appearsi n  both semantics, i t  represen ts  the  same semantic e n t i t y  i n  each,whatever that e n t i t y  is.
For example, consider  t h e  two t r e e s  i n  thet r a n s l a t i o n  involving "+".
Let t = S<S%O<+>>, and t '  = E<EO<+>T<F<(E)>>>.A l l  we need t o  know i s  t h a t  @(t) : (g(tl>, and i t  t u r n s  out  we can f i n d+t h a t  out without computing f :that ,  (g(t) : + ( t l ) .Consider now the translation of ABC+*.
The following shows that 3 0-T(ABc+*) = A*(w(c)):F T C FI I  IA F1(El 1TRANSLATION I1 (Expl ic i t  * to i m p l i c i t  *)This translation i s  interest ing because i t  shows t h e  procedure hasthe a b i l i t y  t o  "iiiscover" that a word (*) i n  L(C1) has no translation.But ,it can findsa phrase form involving that word which can be  translatedto a phrase f o m  in L(G2).Explicit *:E -t EOE x2(xI,5Lj)~ ~ ( 0 )  = f*The translation i s  given by:A (+)= (i+ 13)E O E*A A I- A ;.PAE r i  m 1 1  R sA * A *  S O S1 1 1  1 1 1  A * I f AB * A  B * A  B A I B n ATRANSLATION 111 (2, + t o  1, +)L(G ) is the language of all addition expressions with 2, i.e., the 1set  of a l l  strings of the  form 2 + 2 + .
.
.
+ 2 .
L(GZ) i s  the s e t  of a l ls t r ings of the form 1 + 1 + ... + 1.
Under a s t a n d a r d  semantics, L(G ) 1expresses the  even in t ege r s  and L(G ) the integers.
The procedure11  I!2"discovers" tha t  the  -word 2 in L(G ) must be translated as t h e  phrase 1X = positive integers = 11, 2, .
.
.
)F1 = F2, which coptains the  following d e f i n i t i o n+1) f+(x' ,y) = (f (x, Y)) ' ( '  is the  suc-cessor fn+>I :N + N ( i d e n t i t y )  : I (x) = xThe translation is specif ied by:Note t h a t  t o  "discover1' t h i s  t r a n s l a t i o n ,  the  procedure must' b e  able  t o+compute the  funct ion f , s ince  i t  needs t o  know t h a t  2 = 1+1.
Consider,fat example, @(S<2>) ( ~ ~ ( 2 ) )  = rS+2(p1(2)) = I (2) = 2 ,  but+ +'S+I+S ( l ) , ( f  ) I ( )  = f ( 1 ,  = 2 To g e t  t h e  l a s t  s t e p  i n  t h eeva lua t ion  of the  second semantic funct ion,  the  procedure must b e  a b l e  t o+compute f ( 1 , l ) .TRANSLATION IV (1 ,+ t o  2 ,+)Suppose the  procedure were asked t o  t r a n s l a t e  from L(G ) t o  L(G ) in  2 1t h e  previous example - i .e .
,  from the  i n t ege r s  t o  the even in t ege r s .
Itwould never h a l t ,  but  i t  would "discover" t h a t  t h e  phrase "1 + 1" is t o  bet r a n s l a t e d  a s  the  word "2", "1 + 1 + 1 + I" a s  "2 + 2", e t c .
I t  wotilddef ine  a t r a n s l a t i o n  which i s  t o t a l  on t h e  s t r i n g s  in L(G ) whose values  2a r e  even, and i t  would continue t o  look f0reve.r f o r  pos s ib l e  t r a n s l a t i o n sf o r  the  odd-valued s t r i n g s .
We leave  i t  a s  an exe rc i s e  f o r  t h e  reader  t ogive the func t ions  ; and ; which def ine  t h i s  p a r t i a l  t r a n s l a t i o n .5.
Conclusion and Further  Research.A t  the  p resen t  time what i s  needed more than anything else i n  t h e  a r eaof language t r a n s l a t i o n  i s  an understanding of t he  fonnal n a t u r e  ofsemantics,  i ts r e l a t i o n  t o  syntax i n  language desc r ip t i on ,  and i ts  r o l ei n  t r a n s l a t i o n .
I be l ieve  t h i s  paper provides some of the  b a s i s  f o r  t h a tunderstanding.
Inc iden ta l l y ,  the reader  might have observed t h a t  t h ed e f i n i t i o n  of phrase-s t r u c t u r e  semantics in  Sect ion 1 provides f o rso lu t ions  t o  t h e  semantic p r o j e c t i o n  problem (cf Katz and Fodor (1964), andLangendoen (1969)) .The reqder is  c e r t a i n l y  aware by now, i f  no t  before ,  t h a t  t h e w  aremany grammars and semantics f o r  a given language.
Af ter  having playedwith wr i t i ng  grammars and semantics f o r  simple languages f o r  q u i t e  a whilenov, I be l ieve  t h a t ,  f o r  most languages a t  l e a s t ,  the re  a r e  "bet ter"11 grammars and semantics and worse" ones.
Some j u s t  seem t o  be  more11 e l egsn t  or  simple,  o r  na tu ra l "  than o thers ,  f o r  a given language.
But Ican ' t  say much of a s p e c i f i c  n a t u r e  about what i t  means f o r  a grammar andIt  semantics t o  be "elegant", "simple", o r  na tu ra l " .
It seems t h a t  somestudy ih t h i s  a r e a  might g ive  us  i n s i g h t  i n t o  c e r t a i n  s k i l l s  f o r  maklng ite a s i e r  t o  w r i t e  l i n g u i s t i c  desc r ip t i ons  s u i t a b l e  for.
t r a n s l a t i o n .One phenomenon t h i s  model explains is why i t  i s  s o  d i f f i c u l t  t ocompute an inve r se  t r a n s l a t i o n  and g e t  anything l i k e  the  original.
Thati s ,  if one $tar ts  with sentence w i n  L and t r a n s l a t e s  t o  w i n  L2, then 1t r a n s l a t e s  w '  t o  w" back in L one would l i k e  f o r - w  and w" t o  have the 1'same meaning.
But the scut t1ebut .
t  says i t  i s n ' t  so ,  and t h i s  model showswhy.
Note t h a t  all t h a t  is requifed  f o r  T: L2 Ll + 2  t o  B e  a  t r a n s l a t i o nis t h a t  i f  w' is a  tran&@ion of w, then pl(w) f l  v 2 ( w t )  # fl, i .e .
,  t h a tthe  source sentence and i ts  t r a n s l a t i o n  have some commo'n meaning.
Now--rLsuppose T': L -+ 2 1 i s  a l s o  a t r a n s l a t i o n  and t h a t  w" E r'(wl).
Then we 2have pl(w) n y ( w f )  # 0 and -y (wi!)
n u (w") # 0, but  3t does no t  fol low2 2 1 ----that u1(w) n b1(w1') @.
In  ~ d e r  t o  g e t  back t o  the o r i g i n a l  meaning,each t r a n s l a t o r  must produce the e n t i r e  set ~ ( w ) ,  r a t h e r  than j u s t  somesentence i n  T (w) ,  and then a l l  of these must be r e t r a n s l a t e d  i n  e n t i r e t y .Trans la t ion  programs don' t usua l ly  do t h a t .
Neither do human t r a n s l a t o r s ,f o r  t h a t  matter!
A l t e rna t ive ly ,  the  t r a n s l a t o r  should be a b l e  t o  give withthe t r a n s l a t i o n ,  its parse  and t h e  atomic morphemes assoc ia ted  wi th  t h esentence.
The 7rocedure i n  t h i s  paper provides f o r  doing t h a t .The same d e f i n i t i o n  of t r a n s l a t i o n ,  i f  i t  i s  accurz te ,  a l s o  explainsanother phenomenon of language t r ans l a t - i on  -- haw i t  is  t h a t  two veryd i f f e r e n t  t r a n s l a t i ~ n s  can corn from the  same source.
If wt and w" aret r a n s l a t i o n s  o r  w, then we have ul(w) n p2(wt)  f (b and ul(w) fl u2Cwff) C fi,but i t  doe; not follaw t h a t  p 2 ( ~ ' )  fl v2(wvt) # 8 -For n a t u r a l  language, one would l i k e  t,opexte i t h e  theory in t h i spaper t o  a r b i t r a r y  phrase s t r u c t u r e  grammars and t o  t ransformat ionalgrammars.
The ewlarlsion t o  transformational gramanrs r equ i r e s  only3- The " lore"  has i t  t h a t  someone fed .
t h e  fol lowing sentence t o  at r a n s l a t o r  from L t o  Lp: 1"The s p i r i t  indeed is  wil l - ing,  but t he  f l e s h  i s  weak.
"Then lie took the  t r a n s l a t i o n  and fed it  i n t o  a  t r a n s l a t o r  froui L, t oLLI, and got :"The l i q u o r  i s  a l l  r i g h t ,  but  t h e  meat i s  spoi led .
"formal iz ing the  n o t i o n  of t he  t ransform p f  a semantic  func t ion  t o  bea s soc i a t ed  wi th  each syntax t ransformation.
(For t rans format iona l  semantict h e o r i e s  which do no t  allow semantic change i n  t h e  t ransformat ions ,  theextens ion t o  a r b i t r a r y  phrase s t r u c t u r e  grammars i s  s u f f i c i e n t ,  of course.
)The extension t o  a r b i t r a r y  phrase s t r u c t u r e  grammars r equ i r e s  f i rs t  aformal statement o.f the "phrase s t r u c t u r e s "  of u n r e s t r i c t e d  grammars,s i n c e  these s t r u c t u r e s  are no t  t r e e s .
The au thor ' s  forthcoming paper,l i s t e d  i n  t h e  b ib l iography,  covers t h e  s u b j e c t  of t he  s y n t a c t i c  s t r u c t u r e sf o r  u n r e s t r i c t e d  languages in d e t a i l .There are, of course,  schemes f o r  t r a n s l a t i o n  other than: t h e  onei n  t h i s  paper.
One might t h i n k  of computing t h e  meaning of asource sentence,  and then having some e f f e c t i v e  way of genera t ing  thetarget sentence  d i r e c t l y  from the meaning.
The scheme i n  t h i s  paper,however, i s  more a t t r a c t i v e  a t  present than such a "di rec t"  scheme, fort h r e e  reasons: 1 )  It is i n t u i t i v e l y  s a t i s f y i n g .
I be l i eve  I t r a n s l a t eby f i r s t  t r a n s l a t i n g  simple phrases  and then p u t t i n g  their s e p a r a t et r a n s l a t i o n s  together according t o  some r e s t r u c t u r i n g  r u l e s  t h a t  areguaranteed t o  p rese rve  seaantics .
Thus, one "builds up" t h e  t r a n s l a t i o nof a sentence r ecu r s ive ly .
I a m  more l i k e l y  t o  c a l l  t h e  r e su l t  which Ig e t  by f i r s t  computing the  whole meaning and then producing a sentence(often it is  a sequence of sentences)  with t he  same meaning, a "paraphrase"l I o r  an i n t e rp re t a t i on" ,  r a t h e r  than a t f t ~ a n s l a t i o n " .
2)  I f  used much,thss scheme i s  l i k e l y  t o  be more e f f i c i e n t  than t h e  "di rec t"  scheme, sinceno-semant ic  computation i s  required  a t  t r a n s l a t e  t - i m e .
AJl  the semanticproblems are examined once and for a l l  i n  t h e  t r a n s l a t o r  genera to r ;  a tt r a n s l a t i o n  t i m e ,  only a sequence of t r e e  mappings i s  performed - simplya s t r u c t u r e  matching and rep lac ing  technique.
3) The "d i rec t "  schemer equ i r e s  knowing how to specify l inkui s t i c  d e s c r i p t i o n s  i n  such a way that,given a meaning i n  semantic n o t a t i o n ,  one can produce a sentence havingt h a t  meaning.
This  problem Ts a d i f f i c k l t  one not y e t  w e l l  understood.Presumably, the research cu r r en t ly  under way i n  t h e  f i z l d  of genera t ivesemantics w i l l  e x p l i c a t e  the i s s u e s  involved.Selected Bibliography.Bbnson, D. B.
(1970).
Syntax and semantics: a categorial view.
InInformation - and Control, - 16, ~ p .
738-773.Benson, D. B.
(forthcoming) Semantic ,preserving translations.Brooks, F. P., Jr., and Iverson, K. E. (1969').
Automatic - Data Processing.New ~drk: Wiley.Buttelmann, H. W. (forthcoming).
On the syntactic structures of Unre-stricted gramark In Information - and Control.Katz, 30, and Fodor, 3.
A.
(1964).
The structure of a semantic theory.In Language, - 39, pp.
170-210.
Reprinted in Fodor and Katz(eds.)
- The Structure of Language.
Englewood Cliffs, NewJersey:  renti ice-  all^^^.
479-518.KBtz, J., and Postal, P. (1964).
An Integrated TKeory - of ~inguisticDescriptions.
cambridge?
MIT Press.Hopcroft, J. and Ullmann, J.
(1967).
Formal Language-s - and their Relatiohto AutomaIt;,a.
Reading, Mass: Addison-Wesley.-Ginsburg, S .
(1963) .
- The Mathematical Theory - of c o i t e x t  -- Free Languages.New York: McGrw-Hill.Knuth, D. E. (19.68).
Semantics bf  context-free languages.
- In Mathe-mattea1 Sys-terns Theory, 2_, pp.
127-146., .
(1971).
Examples of formal semantics.
Symposium onSemantics of Algorithmic Languages.
Engelor, ed.
Lecture Notesi< Math #188.
New York: Springer-'Jarlag, pp.
212-235Langendoen, D. T. (1969).
- The Study - of Syntax.
New york: Holt, Rine-hart and ::lington.Tarski, A.
(1936).
Der Wwheitsbergriff in den f~rmalasierten Sprachen.I n  Squdia Philosophica, I, pp.
261-304.
Originally publishedin 1933.
