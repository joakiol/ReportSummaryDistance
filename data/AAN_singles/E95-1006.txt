A Specif icat ion Language forLexical Funct ional  GrammarsPatrick Blackburn and Claire GardentComputerlinguistikUniversit?t des SaarlandesPostfach 1150, D-66041 SaarbrfickenGermany{patrick, claire)?coli, uni-sb, deAbstractThis paper defines a language Z~ for spe-cifying LFG grammars.
This enablesconstraints on LFG's composite onto-logy (c-structures ynchronised with f-structures) to be stated directly; no ap-peal to the LFG construction algorithmis needed.
We use f to specify schemataannotated rules and the LFG uniquen-ess, completeness and coherence princip-les.
Broader issues raised by this workare noted and discussed.1 IntroductionUnlike most linguistic theories, LFG (see Kaplanand Bresnan (1982)) treats grammatical relationsas first class citizens.
Accordingly, it casts its lin-guistic analyses in terms of a composite ontology:two independent domains - -  a domain of consti-tuency information (c-structure), and a domain ofgrammatical function information (f-structure) - -linked together in a mutually constraining man-ner.
As has been amply demonstrated over thelast fifteen years, this view permits perspicuousanalyses of a wide variety of linguistic data.However standard formalisations of LFG do notcapture its strikingly simple underlying intuitions.Instead, they make a detour via the LFG con-struct ion algorithm, which explains how equatio-nal constraints linking subtrees and feature str.uc-tures are to be resolved.
The main point of thepresent paper is to show that such detours areunnecessary.
We define a specification language?
in which (most of) the interactions between c-and f-structure typical of LFG grammars can bestated directly.The key idea underlying our approach is tothink about LFG model theoretically.
That is,our first task will be to give a precise - -  and trans-parent - -  mathematical picture of the LFG onto-logy.
As has already been noted, the basic enti-ties underlying the LFG analyses are compositestructures consisting of a finite tree, a finite fea-ture structure, and a function that links the two.Such structures can straightforwardly be thoughtof as models, in the usual sense of first order modeltheory (see Hodges (1993)).
Viewing the LFG on-tology in such terms does no violence to intuition:indeed, as we shall see, a more direct mathemati-cal embodiment of the LFG universe can hardlybe imagined.Once the ontological issues have been settled weturn to our ultimate goal: providing a specifica-tion language for LFG grammars.
Actually, withthe ontological issues settled it is a relatively sim-ple task to devise suitable specification languages:we simply consider how LFG linguists talk aboutsuch structures when they write grammars.
Thatis, we ask ourselves what kind of constraints thelinguist wishes to impose, and then devise a lan-guage in which they can be stated.Thus we shall proceed as follows.
After a briefintroduction to LFG, 1 we isolate a class of modelswhich obviously mirrors the composite nature ofthe LFG ontology, and then turn to the task of de-vising a language for talking about them.
We optfor a particularly simple specification language: apropositional language nriched with operators fortalking about c- and f-structures, together with apath equality construct for enforcing synchronisa-tion between the two domains.
We illustrate itsuse by showing how to capture the effect of sche-mata annotated rules, and the LFG uniqueness,completeness and coherence principles.Before proceeding, a word of motivation is inorder.
Firstly, we believe that there are practicalreasons for interest in grammatical specificationlanguages: formal specification seems important(perhaps essential) if robust large scale grammarsare to be defined and maintained.
Moreover, theessentially model theoretic slant on specificationwe propose here seems particularly well suited tothis aim.
Models do not in any sense "code" theLFG ontology: they take it pretty much at face va-lue.
In our view this is crucial.
Formal approaches1This paper is based upon the originM formula-tion of LFG, that of Kaplan and Bresnan (1982), andwill not discuss such later innovations as functionaluncertainty.39to grammatical  theorising should reflect linguisticintuitions as directly as possible, otherwise theyrun the risk of being an obstacle, not an aid, togrammar development.The approach also raises theoretical issues.
Themodel theoretic approach to specification langua-ges forces one to think about linguistic ontologiesin a systematic way, and to locate them in a wellunderstood mathematical  space.
This has at leasttwo advantages.
Firstly, it offers the prospect ofmeaningful comparison of linguistic frameworks.Secondly, it can highlight anomalous aspects ofa given system.
For example, as we shall latersee, there seems to be no reasonable way to dealwith LFG's --c definitions using the simple modelsof the present paper.
There is a plausible modeltheoretic strategy strategy for extending our ac-count to cover =c; but the nature of the requiredextension clearly shows that =c is of a quite diffe-rent character to the bulk of LFG.
We discuss thematter in the paper's concluding section.2 Lex ica l  Funct iona l  GrammarA lexical functional grammar consists of threemain components: a set of context free rules anno-tated with schemata, a set of well formedness con-ditions on feature structures, and a lexicon.
Therole of these components i  to assign two interrela-ted structures to any linguistic entity licensed bythe grammar: a tree (the c-structure) and a fea-ture structure (the f-structure).
Briefly, the con-text free skeleton of the grammar ules describesthe c-structure, the well-formedness conditions re-strict f-structure admissibility, and the schematasynchronise the information contained in the c-and f-structures.
(1) S , NP VP(T soB J )= l  T=(2) NP , Det N(3) VP , VagirlwalksDet, (T SPEC) ---- a, (T NUM) ---- singN, (~ PRED) ~- girl, (1" NUM) "-" singV, (1" PRED) = walk( (subj) ),(~ TENSE) ---- pstFigure 1: An LFG grammar fragmentTo see how this works, let's run through a sim-ple example.
Consider the grammar given in Fi-gure 1.
Briefly, the up- and down-arrows in theschemata can be read as follows: T Feature denotesthe value of Feature in the f-structure associatedwith the tree node immediately dominating thecurrent tree node, whereas ~ Feature denotes thevalue of Feature in the f-structure associated withthe current tree node.
For instance, in rule (1) theNP schema indicates that the f-structure associa-ted with the NP node is the value of the SUBJfeature in the f-structure associated with the mo-ther node.
As for the VP schema, it requires thatthe f-structure associated with the mother node isidentical with the f-structure associated with theVP node.Given the above lexical entries, it is possibleto assign a correctly interrelated c-structure andf-structure to the sentence A girl walks.
Moreo-ver, the resulting f-structure respects the LFGwell formedness conditions, namely the uniquen-ess, completeness and coherence principles discus-sed in section 5.
Thus A girl walks is accepted bythis grammar.3 Modeling the LFG ontologyThe ontology underlying LFG is a composite one,consisting of trees, feature structures and linksbetween the two.
Our first task is to mathemati -cally model this ontology, and to do so as trans-parently as possible.
That  is, the mathematicalentities we introduce should clearly reflect the in-tuitions important o LFG theorising - -  "No co-ding!
", should be our slogan.
In this section, weintroduce such a representation of LFG ontology.In the following section, we shall present a formallanguage L: for talking about this representation;that is, a language for specifying LFG grammars.We work with the following objects.
A mo-del M is a tripartite structure (7.,zoomin,J:),where 7- is our mathematical  picture of c- struc-ture, 9 r our picture of f-structure, and zoominour picture of the link between the two.
Wenow define each of these components.
Our de-finitions are given with respect to a signature ofthe form (Cat, Atom, Feat), where Cat, Atom andFeat are non-empty, finite or denumerably infinitesets.
The intuition is that these sets denote thesyntactic categories, the atomic values, and thefeatures that the linguist has chosen for some lan-guage.
For instance, Cat could be {S, NP, VP, V},Atom might be {sg,pl, third, fem, masc} andFeat might be { subj, obj, pred, nb, case, gd}.Firstly we define 7".
As this is our mathema-tical embodiment of c-structure (that is, a cate-gory labeled tree) we take it to be a pair (T, Vt),where T is a finite ordered tree and Vt is a functionfrom the set of tree nodes to Cat.
We will freelyuse the usual tree terminology such as mother-of,daughter-of, dominates, and so on.Second, we take jr  to be a tuple of the form(W, {fa}c, EFeat, initial, Final, VI) , where W is aft-nite, non-empty set of nodes; f~ is a partial func-tion from W to W, for all a E Feat; initial is aunique node in W such that any other node w'of W can be reached by applying a finite number40of fa to initial; Final is a non-empty set of no-des such that for all fa and all w E Final, f~(w)is undefined; and V!
is a function from Final toAtom.
This is a standard way of viewing featurestructures, and is appropriate for LFG.Finally, we take zoomin, the link between c-structure and f-structure information, to be a par-tial function from T to W. This completes ourmathematical picture of LFG ontology.
It is cer-tainly a precise picture (all three components, andhow they are related are well defined), but, justas importantly, it is also a faithful picture; modelscapture the LFG ontology perspicuously.4 A Specification LanguageAlthough models pin down the essence of the LFGuniverse, our work has only just begun.
For astart, not all models are created equal.
Whichof them correspond to grammatical utterances ofEnglish?
Of Dutch?
Moreover, there is a practicalissue to be addressed: how should we go aboutsaying which models we deem 'good'?
To put inanother way, in what medium should we specifygrammars?Now, it is certainly possible to talk about mo-dels using natural anguage (as readers of this pa-per will already be aware) and for many purposes(such as discussion with other linguists) naturallanguage is undoubtedly the best medium.
Ho-wever, if our goal is to specify large scale gram-mars in a clear, unambiguous manner, and to doso in such a way that our grammatical analysesare machine verifiable, then the use of formal spe-cification languages has obvious advantages.
Butwhich formal specification language?
There is nosingle best answer: it depends on one's goals.
Ho-wever there are some important rules of thumb:one should carefully consider the expressive capa-bilities required; and a judicious commitment tosimplicity and elegance will probably pay off inthe long run.
Bearing this advice in mind, let usconsider the nature of LFG grammars.Firstly, LFG grammars impose constraints on7".
Context free rules are typically used for thispurpose - -  which means, in effect, that constraintsare being imposed on the 'daughter of' and 'sisterof' relations of the tree.
Secondly, LFG grammarsimpose general constraints on various features in2-.
Such constraints (for example the completen-ess constraint) are usually expressed in Englishand make reference to specific features (notablypred).
Thirdly, LFG grammars impose constraintson zoomin.
As we have already seen, this is doneby annotating the context free rules with equati-ons.
These constraints regulate the interaction ofthe 'mother of' relation on 7", zoomin, and specificfeatures in 2-.Thus a specification language adequate for LFGmust be capable of talking about the usual tree re-lations, the various features, and zoomin; it mustalso be powerful enough to permit the statementof generalisations; and it must have some mecha-nism for regulating the interaction between 7" and2-.
These desiderata can be met by making useof a propositional language augmented with (1)modal operators for talking about trees (2) modaloperators for talking about feature structures, and(3) a modal operator for talking about zoomin,together with a path equality construct for syn-chronising the information flow between the twodomains.
Let us build such a language.Our language is called Z: and its primi-tive symbols (with respect to a given signature(Cat, Atom, Feat)) consists of (1) all items in Catand Atom (2) two constants, c-struct and f-struct,(3) the Boolean connectives (true, false, -~, A, ~ ,etc.
), (4) three tree modalities (up), (down) and,,, (5) a modality (a), for each feature a E Feat,(6) a synchronisation modality (zoomin), (7) apath equality constructor ~, together with (8) thebrackets ) and (.The basic well formed formulas (basic wits) of ?are: {true, false, c-struct, f-struct}UCatUAtomUPatheq, where Patheq is defined as follows.
Let t,t I be finite (possibly null) sequences of the moda-lities (up) and (down), and let f ,  f '  be finite (pos-sibly null) sequences of feature modalities.
Thent(zoomin)f ~ t'(zoomin)f' is in Patheq, and no-thing else is.Tim wffs of/:: are defined as follows: (1) all basicwffs are wffs, (2) all Boolean combinations of wffsare wffs, (3) if ?
is a wff then so is Me,  whereM E {(a) : a E Feat} U {(up}, (down), (zoomin)}and (4) if n > 0, and ?1 , .
.
.
,?n  are wffs, then sois *(?1, .
.
.
,?n)-  Nothing else is a wff.Now for the satisfaction definition.
We induc-tively define a three place relation ~ which holdsbetween models M, nodes n and wffs ?.
Intui-tively, M, n ~ ?
means that the constraint ?
holdsat (is true at, is satisfied at) the node n in modelM.
The required inductive definition is as follows:M, n ~ true alwaysM, n ~ false neverM, n ~ c-struct iffn is a tree nodeM, n ~ f-struct iffn is a feature structure nodeM,n  ~ c iffVt(n) = c, (for all e E Cat)M,n  ~ a iffVf(n) = a, (for al ia ~ Atom)M, n ~ -,?
iffnot M,n~?M,n~fA?
i fM,n~f f  and M,n~fM, n ~ (a)?
ifff~(n) exists and M, f~(n) ~ ?
(for all a E Feat)41M, n ~ (down)?
iffn is a tree node withat least one daughter n' such thatM,n '~?M, n ~ (up)?
ign is a tree node witha mother node m andM,m~?M, n ~ (zoomin)?
iffn is a tree node,zoomin(n) is defined, andM, zoomin(n) ~ ?M,n  ~ * (?x , .
.
.
,?k )  ign is a tree node withexactly k daughters nl ... nk andM, n I ~ ~1,... ,M, nk ~ ?kM, n ~ t(zoomin)f ~, t'(zoomin)f' iffn is a tree node, and there is afeature structure node w such thatn(St; zoomin; Sl )w andn( S,, ; zoomin; S 1, )wFor the most part the import of these clausesshould be clear.
The constants true and false playtheir usual role, c-struct and f-struct give us 'la-bels' for our two domains, while the elements ofCat and Atom enable us to talk about syntacticcategories and atomic f-structure information re-spectively.
The clauses for --, and A are the usualdefinitions of classical ogic, thus we have all pro-positional calculus at our disposal; as we shallsee, this gives us the flexibility required to for-mulate non-trivial general constraints.
More in-teresting are the clauses for the modalities.
Theunary modalities (a), (up), (down), and (zoomin)and the variable arity modality * give us accessto the binary relations important in formulatingLFG grammars.
Incidentally, ?
is essentially apiece of syntactic sugar; it could be replaced by acollection of unary modalities (see Blackburn andMeyer-Viol (1994)).
However, as the * operatoris quite a convenient piece of syntax for captu-ring the effect of phrase structure rules, we haveincluded it as a primitive in/3.In fact, the only clause in the satisfaction "de-finition which is at all complex is that for ~.It can be glossed as follows.
Let St and St, bethe path sequences through the tree correspon-ding to t and t ~ respectively, and let S I and Sf,he the path sequences through the feature struc-ture corresponding to f and f '  respectively.
Thent(zoomin)f ~ t'(zoomin)f' is satisfied at a treenode t i f f  there is a feature structure node w thatcan be reached from t by making both the tran-sition sequence St;zoornin; S!
and the transitionsequence S,,;zoomin; S!,.
Clearly, this constructis closely related to the Kasper Rounds path equa-lity (see gasper and Rounds (1990)); the princi-ple difference is that whereas the Kasper Roundsenforces path equalities within the domain of fea-ture structures, the LFG path equality enforcesequalities between the tree domain and the fea-ture structure domain.If M, n ~ ?
then we say that ?
is satisfied in Mat n. If M, n ~ ?
for all nodes n in M then we saythat ?
is valid in M and write M ~ ?.
Intuitively,to say that ?
is valid in M is to say that theconstraint ?
holds universally; it is a completelygeneral fact about M. As we shall see in the nextsection, the notion of validity has an importantrole to play in grammar specification.5 Specifying GrammarsWe will now illustrate how/3 can be used to spe-cify grammars.
The basic idea is as follows.
Wewrite down a wff ?
a which expresses all our desi-red grammatical  constraints.
That  is, we state in/3 which trees and feature structures are admissi-ble, and how tree and feature based information isto be synchronised; examples will be given shortly.Now, a model is simply a mathematical  embodi-ment of LFG sentence structure, thus those mo-dels M in which ?
a is valid are precisely the sent-ence structures which embody all our grammatical .principles.Now for some examples.
Let's first consider howto write specifications which capture the effect ofschemata nnotated grammar ules.
Suppose wewant to capture the meaning of rule (1) of Figure1, repeated here for convenience:S , NP VP(IsuBJ) =l T=~Recall that this annotated rule licenses tructuresconsisting of a binary tree whose mother node mis labeled S and whose daughter nodes nl and n2are labeled NP and VP respectively; and where,furthermore, the S and VP nodes (that is, m andn2) are related to the same f-structure node w;while the NP node (that is, nl)  is related to thenode w ~ in the f-structure that is reached by ma-king a SUBJ transition from w.This is precisely the kind of structural cons-traint that /3 is designed to specify.
We do soas follows:S --* *(NP A (up)(zoomin)(subj) ~ (zoomin),VP A (up)(zoomin) ,~ (zoomin))This formula is satisfied in a model M at any nodem iff m is labeled with the category S, has exactlytwo daughters nx and n2 labeled with categoryNP and VP respectively.
Moreover, nl must beassociated with an f-structure node w ~ which canalso be reached by making a (sub j) transition fromthe f-structure node w associated with the mothernode of m. (In other words, that part of the f-structure that is associated with the NP node isre-entrant with the value of the subj feature in42the f-structure associated with the S node.)
Andfinally, n2 must be associated with that f-structurenode w which m. (In other words, the part of thef-structure that is associated with the VP node isre-entrant with that part of the f-structure whichis associated with the S node.
)In short, we have captured the effect of an an-notated rule purely declaratively.
There is no ap-peal to any construction algorithm; we have sim-ply stated how we want the different pieces to fittogether.
Note that .
specifies local tree admissi-bility (thus obviating the need for rewrite rules),and (zoomin), (up) and ~ work together to cap-ture the effect of ~ and T-In any realistic LFG grammar there will be se-veral - -  often many - -  such annotated rules, andacceptable c-structures are those in which eachnon-terminal node is licensed by one of them.
Wespecify this as follows.
For each such rule we formthe analogous ?
wff Cr (just as we did in the pre-vious example) and then we form the disjunctionV Cr of all such wffs.
Now, any non-terminal nodein the c-structure should satisfy one of these dis-junctions (that is, each sub-tree of c-struct mustbe licensed by one of these conditions); moreoverthe disjunction is irrelevant o the terminal nodesof c-struct and all the nodes in f-struct.
Thus wedemand that the following conditional statementbe valid:(e-struct A (down)true) --~ V ?~"This says that if we are at a c-struct node whichhas at least one daughter (that is, a non-terminalnode) then one of the subtree licensing disjuncts(or 'rules') must be satisfied there.
This picks pre-cisely those models in which all the tree nodes areappropriately licensed.
Note that the statementis indeed valid in such models: it is true at all thenon-terminal nodes, and is vacuously satisfied atterminal tree nodes and nodes of f-struct.We now turn to the second main componentof LFG, the well formedness conditions on f-structures.Consider first the uniqueness principle.
In es-sence, this principle states that in a given f-structure, a particular attribute may have at mostone value.
In ?
this restriction is 'built in': it fol-lows from the choices made concerning the ma-thematical objects composing models.
Essenti-ally, the uniqueness principle is enforced by twochoices.
First, V!
associates atoms only with fi-nal nodes of f-structures; and as V/ is a func-tion, the atom so associated is unique.
In ef-fect, this hard-wires prohibitions against constant-compound and constant-constant clashes into thesemantics of ?.
Second, we have modeled featu-res as partial functions on the f-structure nodes- this ensures that any complex valued attributeis either undefined, or is associated with a uni-que sub-part of the current f-structure.
In short,as required, any attribute will have at most onevalue.We turn to the completeness principle.
In LFG,this applies to a (small) finite number of attributes(that is, transitions in the feature structure).
Thiscollection includes the grammatical  functions (e.g.subj, obj, iobj) together with some longer transiti-ons such as obl; obj and to; obj.
Let GF be a meta-variable over the modalities corresponding to theelements of this set, thus GF contains such itemsas (subj), (obj), (iobj), (obl)(obj) and (to)(obj).Now, the completeness principle requires that anyof these features appearing as an attribute in thevalue of the PRED attribute must also appear asan attribute of the f-structure immediately con-taining this PRED attribute, and this recursively.The following wff is valid on precisely those mo-dels satisfying the completeness principle:(wed) GF true --* GF true.Finally, consider the counterpart of the com-pleteness principle, the coherence principle.
Thisapplies to the same attributes as the completen-ess principle and requires that whenever they oc-cur in an f-structure they must also occur in thef-structure associated with its PRED attribute.This is tantamount to demanding the validity ofthe following formula:( GF true A (pred)true) ~ (pred) GF true6 Conc lus ionThe discussion so far should have given the readersome idea of how to specify LFG grammars using?.
To conclude we would like to discuss =c defi-nitions.
This topic bears on an important generalissue: how are the 'dynamic'  (or 'generative', or'procedural') aspects of grammar to be reconciledwith the 'static', (or 'declarative') model theoreticworld view.The point is this.
Although the LFG equationsdiscussed so far were defining equations, LFG alsoallows so-called constraining equations (written=e).
Kaplan and Bresnan explain the difference asfollows.
Defining equations allow a feature-valuepair to be inserted into an f-structure providingno conflicting information is present.
That  is,they add a feature value pair to any consistent f-structure.
In contrast, constraining equations areintended to constrain the value of an already exi-sting feature-value pair.
The essential differenceis that constraining equations require that the fea-ture under consideration already has a value, whe-reas defining equations apply independently of thefeature value instantiation level.In short, constraining equations are essentiallya global check on completed structures which re-quire the presence of certain feature values.
Theyhave an eminently procedural character, and there43is no obvious way to handle this idea in the pre-sent set up.
The bulk of LFG involves statingconstraints about a single model, and /: is wellequipped for this task, but constraining equationsinvolve looking at the structure of other possibleparse trees.
(In this respect hey are reminiscentof the feature specification defaults of GPSG.)
Theapproach of the present paper has been driven bythe view that (a) models capture the essence ofLFG ontology, and, (b) the task of the linguist isto explain, in terms of the relations that exist wi-thin a single model, what grammatical structureis.
Most of the discussion in Kaplan and Bres-nan (1982) is conducted in such terms.
Howeverconstraining equations broaden the scope of thepermitted iscourse; basically, they allow implicitappeal to possible derivational structure.
In short,in.
common with most of the grammatical forma-lisms with which we are familiar, LFG seems tohave a dynamic residue that resists a purely de-clarative analysis.
What should be done?We see three possible responses.
Firstly, wenote that the model theoretic approach can al-most certainly be extended to cover constrainingequations.
The move involved is analogous to theway first order logic (a so-called 'extensional' lo-gic) can be extended to cope with intensional no-tions such as belief and necessity.
The basic idea- -  it's the key idea underlying first order Kripkesemantics - -  is to move from dealing with a sin-gle model to dealing with a collection of modelslinked by an accessibility relation.
Just as quan-tification over possible states of affairs yields ana-lyses of intensional phenomena, so quantificationover related models could provide a 'denotationalsemantics' for =~.
Preliminary work suggests thatthe required structures have formal similarities tothe structures used in preferential semantics fordefault and non-monotonic reasoning.
This firstresponse seems to be a very promising line of work:the requisite tools are there, and the approachwould tackle a full blooded version of LFG headon.
The drawback is the complexity it introducesinto an (up till now) quite simple story.
Is suchadditional complexity reMly needed?A second response is to admit that there is adynamic residue, but to deal with it in overtlycomputational terms.
In particular, it may bepossible to augment our approach with an ex-plicit operational semantics, perhaps the evolvingalgebra approach adopted by Moss and Johnson(1994).
Their approach is attractive, because itpermits a computational treatment of dynamismthat abstracts from low level algorithmic details.In short, the second strategy is a 'divide and con-quer' strategy: treat structural issues using modeltheoretic tools, and procedural issues with (reve-aling) computational tools.
It's worth remarkingthat this second response is not incompatible withthe first; it is common to provide programminglanguages with both a denotational nd an opera-tional semantics.The third strategy is both simpler and morespeculative.
While it certainly seems to be thecase that LFG (and other 'declarative' forma-lisms) have procedural residues, it is far from clearthat these residues are necessary.
One of the moststriking features of LFG (and indeed, GPSG) isthe way that purely structural (that is, modeltheoretic) argumentation dominates.
Perhaps theprocedural aspects are there more or less by ac-cident?
After all, both LFG and GPSG drew on(and developed) a heterogeneous collection of tra-ditional grammar specification tools, such as con-text free rules, equations, and features.
It couldbe the case such procedural residues as --?
aresimply an artifact of using the wrong tools for tal-king about models.
If this is the case, it might behighly misguided to attempt o capture =?
usinga logical specification language.
Better, perhaps,would be to draw on what is good in LFG andto explore the logical options that arise naturallywhen the model theoretic view is taken as pri-mary.
Needless to say, the most important askthat faces this third response is to get on with thebusiness of writing grammars; that, and nothingelse, is the acid test.It is perhaps worth adding that at present heauthors simply do not know what the best re-sponse is.
If nothing else, the present work hasmade very clear to us that the interplay of sta-tic and dynamic ideas in generative grammar isa delicate and complex matter which only furtherwork can resolve.ReferencesPatrick Blackburn and Wilfried Meyer-Viol.
1994.Linguistics, Logic and Finite Trees.
Bulletinof the 1GPL, 2, pp.
3-29.
Available by an-onymous ftp from theory.doc.ic.ac.uk, directorytheory/forum/igpl/Bulletin.Wilfrid Hodges.
1993.
Model Theory.
CambridgeUniversity Press.Ron Kaplan and Joan Bresnan.
1982.
Lexical-Functional Grammar: A formal system forgrammatical representation.
In The Mental Re-presentation of Grammatical Relations, pp.
173- 280, MIT Press.R.
Kasper and W. Rounds.
1990.
The Logic ofUnification in Grammar.
Linguistics and Phi-losophy, 13, pp.
33-58.Lawrence Moss and David Johnson.
1994.
Dyna-mic Interpretations of Constraint-Based Gram-mar Formalisms.
To appear in Journal of Logic,Language and Information.44
