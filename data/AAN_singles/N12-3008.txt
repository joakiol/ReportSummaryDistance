Proceedings of the NAACL-HLT 2012: Demonstration Session, pages 29?32,Montre?al, Canada, June 3-8, 2012. c?2012 Association for Computational LinguisticsA Robust Shallow Temporal Reasoning SystemRan Zhao Quang Xuan Do Dan RothComputer Science DepartmentUniversity of Illinois at Urbana-ChampaignUrbana, IL 61801, USA{ranzhao1,quangdo2,danr}@illinois.eduAbstractThis paper presents a demonstration of a tem-poral reasoning system that addresses threefundamental tasks related to temporal expres-sions in text: extraction, normalization to timeintervals and comparison.
Our system makesuse of an existing state-of-the-art temporal ex-traction system, on top of which we add sev-eral important novel contributions.
In addi-tion, we demonstrate that our system can per-form temporal reasoning by comparing nor-malized temporal expressions with respectto several temporal relations.
Experimentalstudy shows that the system achieves excellentperformance on all the tasks we address.1 IntroductionPerforming temporal reasoning with respect to tem-poral expressions is important in many NLP taskssuch as text summarization, information extraction,discourse understanding and information retrieval.Recently, the Knowledge Base Population track (Jiet al, 2011) introduced the temporal slot filling taskthat requires identifying and extracting temporal in-formation for a limited set of binary relations such as(person, employee of), (person, spouse).
In the workof (Wang et al, 2010), the authors presented theTimely Yago ontology, which extracted and incorpo-rated temporal information as part of the descriptionof the events and relations in the ontology.
Temporalreasoning is also essential in supporting the emerg-ing temporal information retrieval research direction(Alonso et al, 2011).In this paper, we present a system that addressesthree fundamental tasks in temporal reasoning:?
Extraction: Capturing the extent of time expres-sions in a given text.
This task is based on task A inthe TempEval-2 challenge (Verhagen et al, 2010).Consider the following sentence:Seventy-five million copies of the rifle have beenbuilt since it entered production in February 1947.In this sentence, February 1947 is a basic temporalexpression that should be extracted by the extractionmodule.
More importantly, we further extend thetask to support also the extraction of complex tem-poral expressions that are not addressed by existingsystems.
In the example above, it is important to rec-ognize and capture the phrase since it entered pro-duction in February 1947 as another temporal ex-pression that expresses the time period of the manu-facturing event (triggered by built.)
For the best ofour knowledge, this extension is novel.?
Normalization: Normalizing temporal expres-sions, which are extracted by the extraction module,to a canonical form.
Our system normalizes tem-poral expressions (including complex ones) to timeintervals of the form [start point, end point].
Theendpoints follow a standard date and time format:YYYY-MM-DD hh:mm:ss.
Our system accounts foran input reference date when performing the normal-ization.
For example, given March 20th, 1947 as areference date, our system normalizes the temporalexpressions extracted in the example above as fol-lows: [1947-02-01 00:00:00, 1947-02-28 23:59:59]and [1947-02-01 00:00:00, 1947-03-20 23:59:59],respectively.?
Comparison: Comparing two time intervals(i.e.
normalized temporal expressions).
This mod-ule identifies the temporal relation that holds be-29tween intervals, including the before, before-and-overlap, containing, equal, inside , after and after-and-overlap relations.
For example, when compar-ing the two normalized time intervals above, we getthe following result: [1947-02-01 00:00:00, 1947-02-28 23:59:59] is inside [1947-02-01 00:00:00,1947-03-20 23:59:59].There has been much work addressing the prob-lems of temporal expression extraction and normal-ization, i.e.
the systems developed in TempEval-2challenge (Verhagen et al, 2010).
However, our sys-tem is different from them in several aspects.
First,we extend the extraction task to capture complextemporal expressions.
Second, our system normal-izes temporal expressions (including complex ones)to time intervals instead of time points.
Finally, oursystem performs temporal comparison of time inter-vals with respect to multiple relations.
We believethat with the rapid progress in NLP and IR, moretasks will require temporal information and reason-ing, and a system that addresses these three funda-mental tasks well will be able to support and facili-tate temporal reasoning systems efficiently.2 The System2.1 Temporal Expression ExtractionWe built the temporal expression extraction moduleon top of the Heideltime system (Stro?tgen and Gertz,2010) to take advantage of a state-of-the-art tempo-ral extraction system in capturing basic expressions.We use the Illinois POS tagger1 (Roth and Zelenko,1998) to provide part-of-speech tags for the inputtext before passing it to HeidelTime.
Below is anexample of the HeidelTime output of the example inthe previous section:Seventy-five million copies of the rifle have beenbuilt since it entered production in <TIMEX3tid=?t2?
type=?DATE?
value=?1947-02?>February1947</TIMEX3>In this example, HeidelTime captures a basic tem-poral expression: February 1947.
However, Heidel-Time cannot capture the complex temporal expres-sion since it entered production in February 1947,which expresses a period of time from February1947 until the document creation time.
This is ac-tually the time period of the manufacturing event1http://cogcomp.cs.illinois.edu/page/software view/POSNPPPVPSBARSeventy-five million copies of the rifle have been built   since it entered production in Feburary 1947VPNPSFigure 1: The SBAR constituent in the parse tree de-termines an extended temporal expression given that inFebruary 1947 is already captured by HeidelTime.
(triggered by built).
To capture complex phrases, wemake use of a syntactic parse tree2 as illustrated inFigure 1.
A complex temporal expression is recog-nized if it satisfies the following conditions:?
It is covered by a PP or SBAR constituentin the parse tree.?
The constituent starts with a temporal con-nective.
In this work, we focus on an impor-tant subset of temporal connectives, consist-ing of since, between, from, before and after.?
It contains at least one basic temporal ex-pression extracted by HeidelTime.In addition, our extraction module also handlesholidays in several countries.
For example, inthe sentence ?The gas price increased rapidly afterChristmas.
?, we are able to extract two temporal ex-pressions Christmas and after Christmas, which re-fer to different time intervals.2.2 Normalization to Time IntervalsOur system normalizes a temporal expression to atime interval of the form [start point, end point],where start point?
end point.
Each time endpoint ofan interval follows a standard date and time format:YYYY-MM-DD hh:mm:ss.
It is worth noting that thisformat augments the date format in TimeML, usedby HeidelTime and other existing systems.
Our dateand time format of each time endpoint refer to anabsolute time point on a universal timeline, makingour time intervals absolute as well.
Furthermore, wetake advantage of the predicted temporal value ofeach temporal expression from the HeidelTime out-put.
For instance, in the HeidelTime output exampleabove, we extract 1947-02 as the normalized dateof February 1947 and then convert it to the inter-val [1947-02-01 00:00:00, 1947-02-28 23:59:59].
IfHeidelTime cannot identify an exact date, month oryear, we then resort to our own temporal normalizer,2We use nlparser (Charniak and Johnson, 2005)30which consists of a set of conversion rules, regard-ing to the document creation time of the input text.An interval endpoint can get infinity value if its tem-poral boundary cannot be specified.2.3 ComparisonTo compare two time intervals (i.e.
normalizedtemporal expressions), we define six temporal rela-tions: before, before-and-overlap, contains, equals,inside, after and after-and-overlap.
The temporalrelation between two normalized intervals is deter-mined by a set of comparison rules that take the fourinterval endpoints into consideration.
For example,A = [sA, eA] contains B = [sB, eB] if and only if(sA < sB)?
(eA > eB), where s and e are intervalsstart and end points, respectively.3 Experimental StudyIn this section, we present an evaluation of our ex-tended temporal extractor, the normalizer and thecomparator.
We do not evaluate the HeidelTimetemporal extractor again because its performancewas reported in the TempEval-2 challenge (Verha-gen et al, 2010), where it achieved 0.86 F1 score onthe TimeBank data sets (Pustejovsky et al, 2003).3.1 Data PreparationWe focus on scaling up temporal systems to dealwith complex expressions.
Therefore, we preparedan evaluation data set that consists of a list of sen-tences containing at least one of the five temporalconnectives since, betwen, from, before and after.To do this, we extract all sentences that satisfy thecondition from 183 articles in the TimeBank 1.2corpus3.
This results in a total of 486 sentences.Each sentence in the data set comes with the doc-ument creation time (DCT) of its corresponding ar-ticle.
The second and the third columns of Table1 summarize the number of sentences and appear-ances of each temporal connective.We use this data set to evaluate the extended tem-poral extractor, the normalizer and also the com-parator of our system.
We note that although thisdata set is driven by our focused temporal connec-tives, it does not lose the generality of evaluating3http://www.ldc.upenn.edu/Catalog/catalogEntry.jsp?catalogId=LDC2006T08Connective # sent.
# appear.
Prec Rec F1since 31 31 1.0 1.0 1.0between 32 33 1.0 1.0 1.0from 340 366 0.8 1.0 0.89before 33 33 0.8 1.0 0.89after 78 81 0.72 1.0 0.84Avg.
0.86 1.0 0.92Table 1: The performance of our extended temporal ex-tractor on complex expressions which contain at least oneof the connectives shown in the first column.
These ex-pressions cannot be identified by existing systems.Module Correct Incorrect AccNormalizer 191 16 0.92Comparator 191 0 1.0Table 2: The performance of the normalization and com-parison modules.
We only compare the 191 correctlyidentified time intervals with their corresponding docu-ment creation time.the normalization and comparison modules becausethe sentences in this data set alo contain many ba-sic temporal expressions.
Moreover, there are manycases where the connectives in our data are not actu-ally temporal connectives.
Our system is supposedto not capture them as temporal expressions.
This isalso reflected in the experimental results.3.2 Experimental ResultsWe report the performance of our extended tem-poral extraction module using precision, recall andF1 score as shown in the last three columns of Ta-ble 1.
We evaluate the normalization module onthe correctly extracted temporal expressions, includ-ing basic expressions captured by HeidelTime andthe extended expressions identified by our extrac-tor.
A normalization is correct if and only if bothtime interval endpoints are correctly identified.
Westudy the comparison module by evaluating it onthe comparisons of the correctly normalized expres-sions against the corresponding DCT of the sen-tences from which they are extracted.
Because thenormalization and comparison outputs are judged ascorrect or incorrect, we report the performance ofthese modules in accuracy (Acc) as shown in Ta-ble 2.
Overall, the experimental study shows thatall modules in our system are robust and achieve ex-cellent performance.31Figure 2: A screenshot of the input panel.Figure 3: A screenshot of the output panel.4 The Demonstration4.1 VisualizationWe have implemented our system in a web-baseddemo4.
Figure 2 shows a screenshot of the inputpanel of the system.
The input panel includes a maintext box that allows users to input the text, and someother input fields that allow users to customize thesystem?s outputs.
Among the fields, the referencedate serves as the document creation time (DCT) ofthe input text.
All temporal expressions capturedfrom the text will be normalized based on the ref-erence date and compared also to the reference dateas illustrated in Figure 3.4.2 Script OutlineFirst, we will give an overview of existing temporalreasoning systems.
Then we will introduce the novelcontributions of our system.
After that, we will goover our web-based demonstration, including (i) theinput panel: reference date and the text to be ana-lyzed, and (ii) the output panel: the extracted basicand extended temporal expressions, the normalizedintervals, and the comparison results.5 ConclusionsIn this demonstration paper, we introduced a tempo-ral reasoning system that addresses three fundamen-tal problems related to temporal expressions in text,4http://cogcomp.cs.illinois.edu/page/demo view/TempSysincluding extraction, normalization and comparison.Our system consists of a temporal expression ex-tractor capable of dealing with complex temporalphrases, a time interval normalizer and a time inter-val comparator.
The experimental study shows thatour system achieves a high level of performance,which will allow it to support other systems that re-quire complicated temporal reasoning.AcknowledgementThis research is supported by the Army Research Laboratory(ARL) under agreement W911NF-09-2-0053 and the DefenseAdvanced Research Projects Agency (DARPA) Machine Read-ing Program under Air Force Research Laboratory (AFRL)prime contract no.
FA8750-09-C-0181.
The second author alsothanks the Vietnam Education Foundation (VEF) for its spon-sorship.
Any opinions, findings, and conclusion or recommen-dations expressed in this material are those of the authors anddo not necessarily reflect the view of the VEF, ARL, DARPA,AFRL, or the US government.ReferencesOmar Alonso, Jannik Stro?tgen, Ricardo Baeza-Yates, andMichael Gertz.
2011.
Temporal information retrieval:Challenges and opportunities.
In TWAW.Eugene Charniak and Mark Johnson.
2005.
Coarse-to-fine n-best parsing and maxent discriminative rerank-ing.
In ACL.Heng Ji, Ralph Grishman, and Hoa Trang Dang.
2011.Overview of the tac2011 knowledge base populationtrack.
In TAC.James Pustejovsky, Jose Castano, Robert Ingria, RoserSauri, Robert Gaizauskas, Andrea Setzer, and GrahamKatz.
2003.
Timeml: Robust specification of eventand temporal expressions in text.
In IWCS-5.D.
Roth and D. Zelenko.
1998.
Part of speech tagging us-ing a network of linear separators.
In COLING-ACL,The 17th International Conference on ComputationalLinguistics.Jannik Stro?tgen and Michael Gertz.
2010.
Heideltime:High quality rule-based extraction and normalizationof temporal expressions.
In Proceedings of the 5thInternational Workshop on Semantic Evaluation, Se-mEval ?10.Marc Verhagen, Roser Sauri, Tommaso Caselli, andJames Pustejovsky.
2010.
Semeval-2010 task 13:Tempeval-2.
In Proceedings of the 5th InternationalWorkshop on Semantic Evaluation.Yafang Wang, Mingjie Zhu, Lizhen Qu, Marc Spaniol,and Gerhard Weikum.
2010.
Timely yago: harvesting,querying, and visualizing temporal knowledge fromwikipedia.
In EDBT.32
