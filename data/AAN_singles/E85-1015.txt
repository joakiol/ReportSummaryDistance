LANGUAGE-BASED ENVIRONMENT FOR NATURAL LANGUAGE PARSINGLehtola, A., J~ppinen, H., Nelimarkka, E.sirra Foundation (*) andHelsinki University of TechnologyHelsinki, FinlandABSTRACTThis paper introduces a specialprogramming environment for the definit ionof grammars and for the implementation ofcorresponding parsers.
In naturallanguage processing systems it isadvantageous to have l inguistic knowledgeand processing mechanisms separated.
Ourenvironment accepts grammars consist ing ofbinary dependency relations andgrammatical  functions.
Well - formedexpressions of functions and relationsprovide constituent surroundings forsyntactic categories in the form oftwo-way automata.
These relations,functions, and automata are described in aspecial definit ion language.In focusing on high level descr ipt ions al inguist may ignore computational  detai lsof the parsing process.
He writes thegrammar into a DPL-descr ipt ion and acompiler translates it into eff ic ientLISP-code.
The environment has also atracing facil ity for the parsing process,grammar-sensit ive lexical maintenanceprograms, and routines for the interactivegraphic display of parse trees and grammardefinitions.
Translator routines are alsoavailable for the transport of compiledcode between various LISP-dialects.
Theenvironment itself exists currently inINTERLISP and FRANZLISP.
This paperfocuses on knowledge engineering issuesand does not enter l inguisticargumentation.INTRODUCTIONOur objective has been to build a parserfor Finnish to work as a practical tool inreal production applications.
In thebeginning of our work we were faced withtwo major problems.
First, so far therewas no formal descript ion of the Finnishgrammar.
Second dif f iculty was thatFinnish differs by its structure greatlyfrom the Indoeuropean languages.
Finnishhas relatively free word order andsyntact ico-semantic knowledge in asentence is often expressed in theinflections of the words.
Thereforeexist ing parsing methods for Indoeuropeanlanguages (eg.
ATN, DCG, LFG etc.)
didnot seem to grasp the idiosyncracies ofFinnish.The parser system we have developed isbased on functional dependency.
Grammaris specified by a family of two-way finiteautomata and by dependency function andrelat ion definit ions.
Each automatonexpresses the valid dependency context ofone const ituent type.
In abstract sensethe working storage of the parser consistsof two const ituent stacks and of aregister which holds the currentconst ituent (Figure I).The register ofthe currentconstituentLIL2L3RIR2R3The left The righconstituent constituentstack stackFigure I.
The working storageof DPL-parsers(*) SITRA FoundationP.O.
Box 329, SF-00121 Helsinki,Finland98<-Phrase Adverbial )<+Phrase AdverbialIILD PHRASEON RIGHT~*Phrase Subject~ ~ophrasePhrase \] IL Adverbial!
*PhraseIAdverbialIILO PHRASEON RIGHT~PhrasePhraseSublet1ILO PHRASEON RIGHT?
- -Nominaempty le f t -hand sideBUILD PXRA:ON RIGHT= ,Nominal- +Nominal~nd of inpul @FIND REGENTON RIGHTNotations:On the left  is I On the left  is a state transit ionthe state node ?X  with priority, conditions forof the automaton {cond$ .
.
.
.
the dependent candidate (if notToncllon) otherwised stated) and k The question mark Iindicates the direction 4, connection function indicated.Double circles are usedto denote entrees andexits of an automaton?Inside is expressed themanner  of operation.Figure 2.
A two-way automaton for Finnish verbsThe two stacks hold the right and leftcontexts of the current constituent.
Theparsing process is always directed by theexpectations of the current constituent.Dynamic local control is realized bypermitt ing the automata to activate oneanother.
The basic decision for theautomaton associated with the currentconstituent is to accept or reject aneighbor via a valid syntact ico-semanticsubordinate relation.
Acceptancesubordinates the neighbor, and itdisappears from the stack.
The structurean input sentence receives is an annotatedtree of such binary relations.An automaton for verbs is described inFigure 2.
When a verb becomes the currentconstituent for the first time it willenter the automaton through the STARTnode.
The automaton expects to find adependent from the left (?V).
If the leftneighbor has the constituent feature+Phrase, it wil l  be tested first forSubject and then for Object.
When afunction test succeeds, the neighbor willbe subord inated  and the verb advances tothe state indicated by arcs.
The doublecircle states denote entry and exit pointsof the automaton.~f completed const ituents do not exist asneighbors, an automaton may deferdecision.
In the Figure 2 states labelled"BUILD PHRASE ON RIGHT" and "FIND REGENTON RIGHT" push the verb to the left stackand pop the right stack for the currentconstituent.
When the verb is activatedlater on, the control flow will continuefrom the state expressed in thedeact ivat ion command.There are two dist inct search strategiesinvolved.
If a single parse issufficient, the graphs (i.e.
theautomata) are searched depth firstfol lowing the priority numbering.
A fullsearch is also possible.99The functions, relations and automata areexpressed in a special conditionalexpression formalism DPL (for DependencyParser Language).
We believe that DPLmight find applications in otherinflectional languages as well.DPL-DESCRIPTIONSThe main object in DPL is a constituent.A grammar specification opens with thestructural descriptions of constituentsand the allowed property names andproperty values.
User may specify simpleproperties, features or categories.
Thestructures of the lexical entries are alsodefined at the beginning.
The syntax ofthese declarations can be seen in Figure3.All properties of constituents may bereferred in a uniform manner using theirvalues straight.
The system automaticallytakes into account the computationaldetails associated to property types.
Forexample, the system is automatically tunedto notice the inheritance of properties intheir hierarchies.
Extensive support tomultidimensional analysis has been one ofthe central objectives in the design ofthe DPL-formalism.
Patterning can be donein multiple dimensions and the propertyset associated to constituents can easilybe extended.An example of a constituent structure andits property definitions is given inFigure 4.
The description states firstthat each constituent contains Function,Role, ConstFeat, PropOfLexeme andMorphChar.
The next two followingdefinitions further specify ConstFeat andPropOfLexeme.
In the last part thedefinition of a category tree SemCat isgiven.
This tree has sets of propertyvalues associated with nodes.
TheDPL-system automatically takes care oftheir inheritances.
Thus for aconstituent that belongs to the semanticcategory Human the system automaticallyassociates feature values +Hum, +Anim,+Countable, and +Concr.The binary grammatical functions andrelations are defined using the syntax inFigure 5.
A DPL-function returns as itsvalue the binary construct built from the~urrent constituent (C) and its dependentcandidate (D), or it returns NIL.DPL-relations return as their values thepairs of C and D constituents that havepassed the associated predicate filter.By choosing operators a user may vary apredication between simple equality (=)and equality with ambiguity elimination(=:=).
Operators := and :- denotereplacement and insertion, respectively.In predicate expressions angle bracketssignal the scope of an implicitOR-operator and parentheses that of an<const i tuent  s t ruc ture> : :=  ( CONSTITUENT:<subtree o~ const i tuent>: := ( SUBTREE:< l i s t  of  p roper t ies><proper ty  name><type name><glue node name><glue node><l i s t  of  p roper t ies>.
.
)<glue node><l i s t  of  p roper t ies> ) :( LEXICON-ENTRY: <glue node><l i s t  of  p roper t ies> ): :=  ( < l i s t  of p roper t ies>.
.
)( <proper ty  name>.. ): :=  <type name> : <glue node name>: :=  <unique l i sp  atom>: :=  <unique l i sp  atom>: :=  <glue node name in  upper level-><proper ty  dec la ra t ion><poss ib le  values><defau l t  va lue  ><node de f in i t ion><node name><feature  set><father  node><empty>: :=  ( PROPERTY: <type name> <poss ib le  values> ) :( FEATURE: <type name> <poss ib le  values> )( CATEGORY: <type name> < <node de f in i t ion>.
.
> ): :=  < <defau l t  va lue> <unique l i sp  atom>.. >: :=  NoDefault  : <unique l i sp  atom>: :=  ( <node name> <feature  set> <father  node> ): :=  <unique l i sp  atom>: :=  ( <feature  va lue> ) : <empty>: :=  / <name of an a l ready  de f ined  node> : <empty>: :=Figure 3.
The syntax of constituent structureand property definitions100(CONSTITUENT:(LEXICON-ENTRY:(SUBTREE:(CATEGORY:(Funct ion  Ro le  ConstFeat  PropOgLexeme Morphchar ) )PropOfLexeme( (SyntCat  SyntFeat )(SemCat SemFeat)(FrameCat LexFrame)AKO ))MorphChar( Po la r  Vo ice  Modal Tense ComparisonNumber Case PersonN PersonP C l i t l  C l i t2 ) )SemCat< ( Ent i ty  )( Concrete  ( +Concr ) / Ent i ty  )( Animate ( +Anim +Countab le  ) / Concrete  )( Human ( +Hum ) / Animate )( An imals  / Animate )( NonAnim / Concrete  )( Mat ter  ( -Countab le  ) / NonAnim )( Th ing ( +Countab le  ) / NonAnim ) >Figure 4.
An example of a const i tuent  s t ructure  spec i f i ca t ionand the def in i t ion  of an category  treeimpl ic i t  AND-operator .
An arrow tr iggersdefau l ts  on: the e lements  of express ionsto the r ight of an arrow are in theOR- re la t ion  and those to the left of itare in the AND-re lat ion.
Two kinds ofarrows are in use.
A s imple arrow (->)per forms all operat ions  on the right and adouble arrow (=>) terminates  the execut ionat the first successfu l  operat ion.In F igure 6 is an example of how one maydef ine Subject.
If the re lat ion RecSubjholds between the regent and the dependentcand idate  the latter wi l l  be label ledSubject  and subord inated to the former.The re lat iona l  express ion  RecSubj def inesthe proper ty  pat terns  the const i tuentsshould match.A grammar def in i t ion  ends with the contextspec i f i ca t ions  of const i tuents  expressedas two-way automata.
The automata aredescr ibed  using the notat ion shown insomewhat  s impl i f ied form in Figure 7.
Anautomaton  can refer up to threeconst i tuents  to the r ight or left usingindexed names: LI, L2, L3, RI, R2 or R3.<~unct ion> : :=  ( FUNCTION: <~unct ion  name> <operat ion  expr> )<re la t ion> : :=  ( RELATION: <re la t ion  name> <operat ion  expr> )<operat ion  expr> : :=  ( <pred icate  e~pr>.
.
< imply  <operat ion  e?pr>.
.
)<pred icate  expr><re la t ion  name> :( DEL <const i tuent  labe l> )<pred icate  expr> : :=  < <pred icate  expr> > I( <pred icate  expr> )( <const i tuent  po in ter> <operator> <va lue  expr>)<impl> : :=  -> I =><const i tuent  labe l>: := C I D<operator> ::= = I := I :-- I =:=<value expr> ::= < <va lue  expr>.. > :( <value expr>.. ) :<va lue  o~ some proper ty> I'<lexeme> I( <proper ty  name> <const i tuent  label> )F igure 5.
The syntax of DPL- funct ions  and DPL- re la t ions101(FUNCTION:)(RELATION:Sub jec t( RecSubj ->  (D := Sub jec t ) )RecSubj((C = Act  < Ind Cond Pot Imper >) (D = -Sentence  +Nominal)->  ((D = Nom)-> (D = PersPron (PersonP C) (PersonN C))((D = Noun) (C = 3P) -> ((C = S) (D = SG))( (C  = P )  (D  = PL) ) ) )( (D  = Par t )  (C  = S 3P)->  ( (C  = "OLLA)=> (C : -  +Ex is tence) )((C = -T rans i t i ve  +Ex is tence) ) ) )Figure 6.
A realisation of Subject<state  in  autom.>: := ( STATE: <state  name> <di rec t ion> <state  expr>.
.
)<d i rec t ion> : :=  LEFT | RIGHT<state  expr> : :=  ( < lhs  o f  s.  expr> <impl> <state  expr>.
.
)( < lhs  o f  s.  expr> <impl> <state  change> )< lhs  o f  s.  expr> : :=  <funct ion  name> ~ <pred icate  expr>.
.<state  change> : :=  ( C := <name o f  next  s ta te> ) :( FIND-REG-ON <d i rec t ion> <sstate  oh .> )( BUILD-PHRASE-ON <d i rec t ion> <sstate  oh .> )( PARSED )<state  change> : :=  <work sp.
manip?> <state  change><sstate  ch .> : :=  ( C := <name o f  re turn  s ta te> )<work sp.
man ip?>: := ( DEL <const i tuent  labe l> )( TRANSPOSE <const i tuent  labe l><const i tuent  labe l> )Figure 7.
Simplified syntax of state specifications( STATE: V?
RIGHT((D = +Phrase) ->  (Sub jec t  ->  (C := VS?
))(Ob jec t  -> (C := VO?
))(Adverb ia l  -> (C := V?
))(T => (C := ?VF ina l ) ) )((D = -Phrase)  -> (BUILD-PHRASE-ON RIGHT (C :=  V?)
) )Figure 8.
The expression of V?
in Figure 2.102The direction of a state (see Figure 2.
)selects the dependent candidate normallyas L1 or R1.
A switch of state takesplace by an assignment in the same way asl inguistic properties are assigned.
As anexample the node V?
of Figure 2 isdefined formally in Figure 8.More l inguist ical ly orientedargumentation of the DPL-formal ism appearselsewhere (Nelimarkka, 1984a, andNelimarkka, 1984b).THE ARCHITECTURE OF THE DPL-ENVIRONMENTThe architecture of the DPL-environment isdescribed schematical ly in Figure 9.
Themain parts are highlighted by heavy lines.Single arrows represent data transfer;double arrows indicate the production ofdata structures.
All modules have beenimplemented in LISP.
The realisations donot rely on specifics of underlyingLISP-environments.The DPL-compilerA compilat ion results in executable codeof a parser.
The compiler produces highlyoptimized code (Lehtola, 1984).Internal ly data structures are only partlydynamic for the reason of fast informationfetch.
Ambiguit ies are expressed locallyto minimize redundant search.
Theprinciple of structure sharing is followedwhenever new data structures are built.In the manipulat ion of const ituentstructures there exists a special serviceroutine for each combination of propertyand predicat ion types.
These routinestake special care of time and memoryconsumption.
For instance with regardreplacements and insertions the copyingincludes physical ly only the path from theroot of the list structure to the changedsublist.
The logically shared parts will?
be shared also physically.
Thisst ipulation minimizes memory usage.In the state transit ion network level thesearch is done depth first.
To handleambiquit ies DPL-funct ions and -relationsprocess all alternative interpretations inparallel.
In fact the alternatives arestored in the stacks and in the C-registeras trees of alternants.In the first version of the DPL-compilerthe generation rules were intermixed withthe compiler code.
The maintenance of thecompiler grew harder when we experimentedwith new computational  features.
Weparser  facilitylexiconmaintenanceinformationextraction systemwithgraphic outputFigure 9.
The architecture of the DPL-environment103therefore started to develop ametacompi ler  in which compi lat ion isdefined by rules.
At moment we aretesting it and soon it will be in everydayuse.
The amount of LISP-code has greatlyreduced with the rule based approach, andwe are now planning to install theDPL-environment into IBM PC.Our parsers were aimed to be practicaltools in real product ion applications.
Itwas hence important to make the producedprograms transferable.
As of now we havea rule-based translator which convertsparsers between LISP dialects.
Thetranslator accepts currently INTERLISP,FranzLISP and Common Lisp.Lexicon and its MaintenanceThe environment has a special maintenanceprogram for lexicons.
The program usesvideo graphics to ease updating and itperforms various checks to guarantee theconsistency of the lexical entries.
Italso co-operates with the informationextract ion system to help the user in theselect ion of properties.The Tracing Faci l i tyThe tracing faci l ity is a convenient toolfor grammar debugging.
For example, inFigure I0 appears the trace of the parsingof the sentence "Poikani tuli i l lal lakent~it~ heitt~m~st~ kiekkoa."
(= "My son(T  POIKANI TULI ILLALLA KENT~LT~ HEITT~M~ST~ KIEKKOA .
)~8~ ?c~ses?
03 seconds0 .0  seconds, garbage co l lec t ion  t imePARSED_PRTH ( )=> (POIKA)  (TULJ.A) ( I LTA)  (KENTT~) (HE ITT~)  (KIE\]<KO) ?N(POIKA)  <= (TULLA)  ( I LTA)  (KENTT~) (HE ITT~)  (K IEKKO)  N?=> (POIKA)  (TULLA)  ( I LTA)  (KENTT~) (HE ITT~)  (K IEKKO)  ?NF ina l(##)  (POIKA)  (TULLA)  ( I LTA)  (KENTT~) (HE ITT~)  (K IEKKO)  NIL(POIKA)  => (TULLA) (ILTA) (KENTT~) (HE ITT~)  (K IEKKO)  ?V.,=> ( (POIKA)  TULLA) (ILTA) (KENTT~) (HEITT~) (KIEKKO) ?VS((POIKA) TULLA) <= (~LTA) (KENTT~) (HEITT~&) (KIEKKO) VS?
((POIKA) TULLA) => (ILTA) (KENTT~) (HEITT~&~) (KIEKKO) ?N( (POIKA)  TULLA) ( I LTA)  <= (KENTT~) (HE ITT~)  (K IEKKO) N?
((POIKA) TULLA) => "(ILTA) (KENTT~) (HEITT~) (KIEKKO) ?NFinal((POIKA) TULLA) <= (ILTA) (KENTT~) (HEITT~) (KIEKKO) VS?
((POIKA) TULLA (ILTA)) <= (KENTT~) (HEITTYdl) (KIEKKO) VS?
((POIKA) TULLA (ILTA)) => (KENTT&) (HEITT~) (KIEKKO) ?N((POIKA) TULLA (ILTA)) (KENTT~) <= (HEITT~) (KIEKKO) N?
((POIKA) TULLA (ILTA)) => (KENTT~) (HEITT~) (KIEKKO) ?NFinal((POIKA) TULLA (ILTA)) <= (KENTT&) (HEITT~) (KIEKKO) VS?
( (POLKA)  TULLA ( I LTA)  (KENTT~))  <= (HE ITT~)  (K IEKKO) VS?
((POIKA) TULLA (ILTA) (KENTT~)) => (HEITT~i) (KIEKKO) .9%/((POIKA) TULLA (ILTA) (KENTT~)) (HEITT~) <= (KIEKKO) V?
((POIKA) TULLA (ILTA) (KENTT~)) (HEITT~dl) => (KIEKKO) ?N((POIKA) TULLA (ILTA) (KENTT~)) (HEITT~) (KIEKKO) <= N?
((POIKA) TULLA (ILTA) (KENTT~)) (HEITT&~) => (KIEKKO) ?NFinal((POIKA) TULLA (ILTA) (KENTT~)) (HEITT~) <= (KIEKKO) V?
((POIKA) TULLA (ILTA) (KENTT&)) (HEITT~ (KIEKKO)) <= VO?
((POIKA) TULLA (ILTA) (KENTT~)) => (HEITT~ (KIEKKO)) ?VFinal((POIKA) TULLA (ILTA) (KENTT~)) <= (HEITT&~ (KIEKKO)) VS?
((POIKA) TULLA (ILTA) (KENTT~) (HEITT~ (KIEKKO))) <= VS?=> ((POIKA) TULLA (ILTA) (KENTT~) (HEITT~ (KIEKKO))) ?VFinal((POIKA) TULLA (ILTA) (KENTT~) (HEITT~ (KIEKKO))) <= MainSent?
((POIKA) TULLA (ILTA) (KENTT~) (HEITT&& (KIEKKO))) <= MainSent?
OKDONEFigure I0.
A trace of parsing process104came back in the evening from the stadiumwhere he had been throwing the discus.
").Each row represents a state of the parserbefore the control enters the statementioned on the right-hand column.
Thethus-far found constituents are shown bythe parenthesis.
An arrow head pointsfrom a dependent candidate (one which issubjected to dependency tests) towards thecurrent constituent.The tracing facil ity gives also theconsumed CPU-time and two qual ityindicators: search eff ic iency andconnection efficiency.
Search eff iciencyis 100%, if no useless state transit ionstook place in the search.
This figure ismeaningless when the system isparameterized to full search because thenall transit ions are tried.Connection eff ic iency is the ratio of thenumber of connections remaining in aresult to the total number of connectionsattempted for it during the search.
Weare currently developing other measuringtools to extract statist ical information,eg.
about the frequency distr ibut ion ofdi f ferent constructs.
Under developmentis also automatic book-keeping of allsentence~ input to the system.
These willbe divided into two groups: parsed andnot parsed.
The first group const i tutesgrowing test material  to ensure monotonicimprovement of grammars: after a nontrivial change is done in the grammar, anew compiled parser runs all testsentences and the results are compared tothe previous ones.Information Extraction SystemIn an actual working situation there maybe thousands of l inguistic symbols in thework space.
To make such a complexmanageable, we have implemented aninformation system that for a given symbolpretty-pr ints all information associatedwith it.The environment has routines for thegraphic display of parsing results.
Auser can select information by pointingwith the cursor.
The example in Figure Iidemonstrates the use of this facility.The command SHOW() inquires the results of_SHOW ( )(PO IKANI )  (TUL I )  ( IL J .RLLR)  (K I~&I .T&)  ( HE I TT31 I ' I~X ) (K IEK~)  STRRT( (P I \ ] IKA)  TULLA ( I LTA\ ]~KENTT~)  (HE ITT  xx  (K IEKKO)) )  !TULLAII!iSubJect' oa t ive  Neutra l ), i!
!ILTA KENTTXAdverb ia l  Adverb ia lTiaeIPred Ab la t iveFunct ion Sub Jec tRole (Ergat ive  Neutra l  )FrameFeat  (N IL )Po la r  (Pos )IVo ice  (N IL )!Modal (N IL )Tense (N IL )Comparison (N i lCo lpar )Number (SG)Case  (Nee)PersonN (S)P~sonP  ( IP )Cl i t l  (N IL )Cl i t2  (N IL ), eHEITT~U~AdverbialS!KIEKKOOb jec tNeutra lConstFeat i s  a l ingu is t i c  feature  type.Defau l t  valuen -PhraseAssociated va lues :  (+Dec larat ive  -Dec larat ive  +Main -Main +Nominal-Nominal +Phrase -Phrase +Pred icat ive  -P red icat ive  +Re la t ive  -Re la t ive+Sentence -Sentence)Associated ~unct i  onsl(C~nstFeat / INIT  ConstFeat/FN CenstFeat l= ConstFeat /=:= ConstFeat / : -ConstFeat / , - /C  CanstFeat / := ConstFeat/:=/C)Figure ii.
An example of information extraction uti l it ies105the parsing process described in Figure i0.The system replies by first printing thestart state and then the found result(s)in compressed Eorm.
The cursor has beenmoved on top of this parse and CTRL-G hasbeen typed.
The system now draws thepicture of the tree structure.Subsequently one of the nodes has beenopened.
The properties of the node POIKAappear pretty-printed.
The user hasfurthermore asked information about theproperty type ConstFeat.
All theseoperations are general; they do not usethe special features of any part icularterminal.CONCLUSIONThe parsing strategy applied for theDPL-formal ism was original ly viewed as acognit ive model.
It has proved to resultpractical  and eff icient parsers as well.Experiments with a non-tr ivial  set ofFinnish sentence structures have beenperformed both on DEC-2060 and onVAX-I I /780 systems.
The analysis of aneight word sentence, for instance, takesbetween 20 and 600 ms of DEC CPU-time inthe INTERLISP-version depending on whetherone wants only the first or, throughcomplete search, all parses forstructural ly ambiguous sentences.
TheMacLISP-vers ion of the parser runs  about20 % faster on the same computer.
TheNIL-version (Common Lisp compatible) isabout 5 times slower on VAX.
The wholeenvironment has been transferred also toFranzLISP on VAX.
We have not yet focusedon optimality issues in grammardescriptions.
We believe that byrearranging the orderings of expectationsin the automata improvement in eff ic iencyensues.REFERENCESi.
Lehtola, A., Compilat ion andImplementat ion of 2-way Tree Automata forthe Parsing of Finnish.
M.So Thesis,~elsinki University of Technology,Department of Physics, 1984, 120 p. (inFinnish)2?
Nelimarkka, E?, J~ppinen, H. andLehtola A., Two-way Finite Automata andDependency Theory: A Parsing Method forInf lectional Free Word Order Languages.Proc.
COLING84/ACL, Stanford, 1984a, pp.389-392.3?
Nelimarkka, E., J~ppinen, H. andLehtola A., Parsing an Inf lectional FreeWord Order Language with Two-way FiniteAutomata?
Proc.
of the 6th EuropeanConference on Art i f ic ial  Intel l igence,Pisa, 1984b, pp.
167-176.4.
Winograd, To, Language as a Cognit iveProcess.
Volume I: Syntax,Addison-Wesley Publishing Company,Reading, 1983, 640 p.106
