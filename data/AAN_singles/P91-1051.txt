Conceptual Revision for Natural Language GenerationBen E. ClineDepartment of Computer ScienceBlacksburg, VA 24061benjy@vtvml.cc.vt.eduTraditional natural anguage generation systems arebased on a pipelined architecture.
A conceptual compo-nent selects items from a knowledge base and orders theminto a message to address ome discourse goal.
This mes-sage is passed to the stylistic omponent that makes lex-ical and syntactic hoices to produce a natural anguagesurface text.
By contrast, humans producing formal texttypically create drafts which they polish through revision\[Hayes and Flower 1980\].
One proposal for improving thequality of computer-generated multisentential text is toincorporate a draft-and-revision paradigm.Some researchers have suggested that revision in gener-ation systems hould only affect stylistic elements of thetext \[Vaughan and McDonald 1986\].
But human writersalso engage in conceptual revision, and there is reason tobelieve that techniques for conceptual revision should alsobe useful for a generation system producing formal text.Yazdani \[1987\] argues that both stylistic and conceptualrevisions are useful.
This paper extends those argumentsand provides further evidence for the usefulness of con-ceptual as well as stylistic revision.
We present strategiesfor identifying situations applicable to conceptual revisionand techniques for effecting the revision.Why is revision important for a natural language gener-ation system?
First, Hayes and Flower suggest that revi-sion reduces the cognitive strain of an author by postpon-ing the need to make some decisions while concentratingon others.
A generation system can reduce complexity inthe same way.
By using revision, generation modules canbe simpler.
Second, inspection of surface text is necessaryto determine whether the generated text is ambiguous.Ambiguities result not only from the words used at thesurface level but from their relationships to other wordsin the text.
To detect ambiguities, the surface text mustbe read.
If that process reveals ambiguity, the text can beregenerated using different words or syntax.
A revisioncomponent is the ideal ocation for reading enerated textand identifying ambiguities.The Kalos system being developed by the author is de-signed to perform both stylistic and conceptual revision.Kalos will generate portions of a draft user's guide fora microprocessor from an abstract architectural descrip-tion of the microprocessor.
The system achieves concep-tual generation using a discourse schema system \[McK-ewon 1985, Paris 1985\]; stylistic generation will be rule-based.
The revision component will review the generatedtext and produce recommendations to the conceptual ndstylistic omponents a  to how to improve the text.Kalos takes a knowledge intensive approach.
Each com-ponent of the system, including conceptual generation,stylistic generation, and revision, has access to the fullknowledge of the system, and they use the same infer-ence system.
This use of a unified knowledge base letsthe revision component identify easily both the conceptsand schema slots from which the surface string was gen-erated.
This type of association is crucial for a revisionsystem.
In systems where knowledge is localized, it is dif-ficult or impossible to determine the deep level knowledgeresponsible for a particular subtext.In Kalos, conceptual revision will he applied to at leastthree situations.
First, the Kalos revision module willdetect situations where a preferred word or phrase willimprove the text.
Second, it will detect he need for anexample to produce clearer text.
Third, it will attemptto identify paragraphs that are too short or too long.Kalos generates text aimed at engineers and othersexperienced with microprocessors, using preferred wordsand phrases common to user's guides covering various mi-croprocessors.
The revision module will manage use ofpreferred words for two reasons.
First, performing pre-ferred word processing in the revision component reducesthe complexity of the generation components.
Second,using preferred phraseology can affect both the concep-tual and the stylistic components, o placing the logicfor handling preferred words and phrases in the revisioncomponent localizes the necessary knowledge structuresfor easier maintenance and expansion.For example, consider a description of the address busof the Zilog Z-80 microprocessor: "The address bus of theZilog Z-80 microprocessor is sixteen bits wide."
Usingthe preferred phrase "address pace", the same fact canbe restated as follows: "The Zilog Z-80 has a sixty-fourkilobyte address pace.
"347The first sentence relates an attribute of the addressbus, while the second sentence makes a statement di-rectly about the processor.
The second sentence bothuses a preferred way of describing the processor's maxi-mum memory size and gives an important feature of themicroprocessor.
It is thus desirable to include it in anoverview paragraph of the microprocessor rather than ina following paragraph describing its buses.Kalos will contain rules indicating preferred phrases forthe discourse goal of describing a microprocessor.
In thisexample, the relevant rule states that if the size of theaddress bus is described, replace the sentence with a de-scription of the address pace of the microprocessor.
Asnoted above, Kalos will have a representation f the sur-face sentence which includes the surface representationand associations tothe concepts and schemata from whichthe sentence was generated.
By inspecting the underly-ing concept, Kalos can determine that the rule should beapplied.
It can then locate the schemata responsible forthe text and make the revision.The revision component of Kalos will be used to sug-gest at which points in the text an example isappropriate.This processing is placed in the revision module to re-duce the complexity of the conceptual generation module.Examples will sometimes be included in the text in thedescription of individual instructions.
Instructions thatare straightforward do not require an example.
Considerthe add instruction of typical microprocessor.
A typicalreader of a microprocessor user's guide will gain little orno information from an example of the add instructionafter reading the description of the register transfers in-volved.
This is not the case, however, with more compli-cated instructions involving several registers and registertransfers.In Kalos, the process schema selects the knowledgestructures needed to describe the actions of an instruc-tion.
This schema has an optional example slot which willinitially be left empty by the conceptual generation mod-ule.
The Kalos revision module inspects the underlyingconceptual structures of instruction descriptions to deter-mine if an instruction is complicated, based on the num-ber of register transfers and the number of registers in-volved.
When a complicated instruction is identified, therevision module will suggest hat the generation moduleexpand the text by filling the example slot of the processschema.
It is then the task of the conceptual generationcomponent to construct an example.Kalos's third type of conceptual revision relates to thesize of generated paragraphs.
Extremely short or longparagraphs are sometimes appropriate, but they are sus-pect and will be examined by the revision component forpossible restructuring.Kalos will attempt to expand small paragraphs by sug-gesting revisions that fill optional schema slots when thetext is regenerated.
In Kalos, text can be expanded byadding an example or comparing and contrasting the ob-ject being described to another object.
The suggestions toadd text will be inspected by the generation module andimplemented if they meet two criteria.
First, the knowl-edge base must contain the information ecessary to fillthe optional schema slot.
Second, the inclusion of the ad-ditional knowledge must pass a test for salience.
Saliencewill be based in part on deviation from typicality \[Clineand Nutter, 1989\].The revision module will also try to restructure longparagraphs.
It will look at both the surface text andthe underlying concepts from which the text was gener-ated in order to produce suggestions for the revision.
Toreduce the amount of text, the revision component willsuggest hat the generation component either remove anoptional schema slot or take a different choice point ina schema.
Targets for removal include embedded com-pare and contrast schemata nd example slots in processschemata.
The revision module may also select a differentchoice point in the constituency schema to list part cat-egories rather than parts.
For example, an overview of atypical microprocessor would do better to list instructioncategories than to list over a hundred instructions.
Inreducing long paragraphs, the revision module will havesome simple characterizations as to how important heremoved information is.
Based on these measures, the re-vision component may decide to retain the lengthy para-graph.Cline, B. E. & Nutter, 5.
T. (1989) Implications of naturalcategories for natural anguage generation.
In: Proceed-ings of the First Annual SNePS Workshop.Gregg, L. W. & Steinberg, E. R.
(Eds.)
(1980) CognitiveProcesses in Writing.
Hillsdale, N J: Erlbaum.Hayes, J. R.  Flower, L. S. (1980) Identifying the Orga-nization of Writing Processes.
In: Gregg & Steinberg.Kempen, G.
(Ed.)
(1987) Natural Language Generation.Dordrecht: Martinus Nijhoff Publishers.McKeown, K. R. (1985) Text Generation: Using Dis-course Strategies and Focus Constraints to Generate Nat-ural Language Text.
Cambridge: Cambridge UniversityPress.Paris, C. L. (1985) Description Strategies for Naiveand Expert Users.
In: Proceedings of the 23rd AnnualMeeting of the Association of Computational Linguistics.Chicago, I11.Vaughan, M. M. & McDonald, D. D. (1986) A Model ofRevision in Natural Language Generation.
In: Proceed-ings of the 24th Annual Meeting of the Association forComputational Linguistics.
New York.Yazdani, M. (1987) Reviewing as a Component of theText Generation Process.
In: Kempen348
