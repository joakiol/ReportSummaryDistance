Software Engineering, Testing, and Quality Assurance for Natural Language Processing, pages 3?4,Columbus, Ohio, USA, June 2008. c?2008 Association for Computational LinguisticsType-checking in Formally non-typed SystemsDick CrouchPowerset, Inc.San Francisco, USAcrouch@powerset.comTracy Holloway KingPalo Alto Research CenterPalo Alto, USAthking@parc.comAbstractType checking defines and constrains systemoutput and intermediate representations.
Wereport on the advantages of introducing multi-ple levels of type checking in deep parsing sys-tems, even with untyped formalisms.1 IntroductionSome formalisms have type checking as an inherentpart of their theory (Copestake (2002)).
However,many formalisms do not require type checking.
Wereport on our experiences with a broad-coverage sys-tem for mapping English text into semantic repre-sentations for search applications.
This system usesthe XLE LFG parser for converting from text to syn-tactic structures and the XLE ordered-rewriting sys-tem to convert from syntax to semantic structures.Neither component formally requires type checking.However, type checking was introduced into the syn-tactic parser and at multiple levels in the semantics inresponse to the engineering requirements on a large-scale, multi-developer, multi-site system.2 Syntactic TypingThe syntactic parser outputs a tree and an attributevalue matrix (f(unctional)-structure).
Meaning-sensitive applications use the f-structure whichcontains predicate argument relations and othersemantically relevant dependencies.A feature declaration (FD) requires every f-structure attribute to be declared with its possiblevalues.
These values are typed as to whether theyare atomic or are embedded f-structures.
(1) showsthe FD for NUM(ber) and SPEC(ifier).
NUM takesan atomic value, while SPEC takes an f-structurecontaining the features ADJUNCT, AQUANT, etc.
(1) a. NUM: - $ pl sg .b.
SPEC: - [ADJUNCT AQUANT DETNUMBER POSS QUANT SPEC-TYPE].XLE supports overlay grammars where a gram-mar for an application uses another grammar as itsbase.
The FDs form part of the overlay system.
Forexample, there is an FD used by the Parallel Gram-mar project (Butt et al (2003)); the standard EnglishFD adds and modifies features; then domain specificFDs overlay this.
(2) gives the number of features inthe ParGram FD and the standard English overlay.
(2) atomic f-structureEnglish 76 33ParGram 34 11The grammar cannot be loaded if there is a featureor value that is not licensed by the FD (to type checkthe lexicon, the generator is loaded).
The commandprint-unused-feature-declarationscan be used after a large parse run to determinewhich features never surfaced in the analysis of thecorpus and hence might be candidates to be removedfrom the grammar.As LFG does not have type checking as part of itstheory (Dalrymple et al (2004)), XLE originally didnot implement it.
However, in grammar engineering,type checking over features speeds up the develop-ment process and informs later processes and appli-cations what features to expect since the FD servesas an overview of the output of the grammar.33 Semantic TypingThe syntactic output is the input to several sets ofordered rewriting rules that produce semantic struc-tures (Crouch and King (2006)).
The nature of or-dered rewriting systems, which consume input factsto create novel output facts, makes type checking ex-tremely important for determining well formedness.When these representations are used in applications,type declarations can document changes so that thesubsequent processing can take them into account.The semantic typing is done by declaring ev-ery fact that can appear in the structure, its arity,and the type of its arguments.
A field is availablefor comments and examples.
(3) shows the licens-ing of nominal modifiers in noun-noun compounds(nn element), where skolem and integer are argu-ment types.
(3) - type(proposition,nn element(%%Element:skolem,%%Head:skolem,%%Nth:integer),comment([ %%Element is the %%Nthterm in the compound noun %%HeadExample NP: the hinge oil bottlein context(t,nn element(hinge:10,bottle:1,2)) ])).The xfr semantics is developed by multiple users.By breaking the rules into modules, type checkingcan occur at several stages in the processing pipeline.The current system provides for type checking atword-prime semantics, the final semantics, and ab-stract knowledge representation.
(4) shows the num-ber of (sub)features licensed at each level.1(4) word prime 91lexical semantics 102akr 45In addition to aiding the developers of the seman-tics rules, the type declarations serve as documenta-tion for the next steps in the process, e.g.
creating thesemantic search index and query reformulation.4 Additional Engineering SupportThe semantic type checking is a set of orderedrewrite rules, using the same mechanism as the se-1A stripped-down XML version of the semantics uses anxschema which checks that only the reduced feature set is usedand that the XML is well-formed.mantics rules.
As such, the notation and applica-tion are familiar to the grammar engineers and hencemore accessible.
Since the type checking involvesadditional processing time, it is not part of run-timeprocessing.
Instead, it is run within a larger regres-sion testing regime (Chatzichrisafis et al (2007)).Grammar engineers run a core set of regression testsbefore checking in any changes to the svn repository.Larger nightly runs check performance as well astyping at all levels of analysis and help ensure com-patibility of changes from multiple developers.The syntactic grammar cannot be loaded with fea-ture type violations.
However, the nature of an or-dered rewriting system makes it so that loading therules does not give the full feature type space ofthe resulting output.
To force compliance with typechecking requirements, check-ins require regressiontests before committing changes.
The output of thesetests is type checked and, if unlicensed features arefound, the commit is blocked.
The grammar engi-neer can then update the type checking rules or mod-ify the semantic rules to produce only licensed fea-tures.
The regression testing is then rerun and, if thetype checking passes, the commit proceeds.In sum, introducing type checking at multiple lev-els provides a better development environment forgrammar engineers as well as documentation for thedevelopers and for applications.ReferencesButt, M., Forst, M., King, T.H.
and Kuhn, J.
2003.The Feature Space in Parallel Grammar Writing.In ESSLLI Workshop on Ideas and Strategies forMultilingual Grammar Development.Chatzichrisafis, N., Crouch, D., King, T.H., Nairn,R., Rayner, M. and Santaholma, M. 2007.
Re-gression Testing for Grammar-based Systems.
InGrammar Engineering Across Frameworks.Copestake, A.
2002.
Implementing Typed FeatureStructure Grammars.
CSLI.Crouch, D. and King, T.H.
2006.
Semantics via F-Structure Rewriting.
In Proceedings of LFG06.Dalrymple, M., Kaplan, R. and King, T.H.
2004.Linguistic Generalizations over Descriptions.
InProceedings of LFG04.4
