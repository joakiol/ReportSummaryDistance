An Open Distributed Architecture for Reuse and Integration ofHeterogeneous NLP ComponentsR4mi  Za jac ,  Mark  Casper  and  N ige l  SharpiesComput ing  Research LaboratoryNew-Mexico State University{za j  ac ,  mc asper ,  n ige  1}?cr l .
nmsu.
eduAbst rac tThe shift from Computational Linguisticsto Language Engineering is indicative ofnew trends in NLP.
This paper reviewstwo NLP engineering problems: reuse andintegration, while relating these concernsto the larger context of applied NLP.
Itpresents a software architecture which isgeared to support he development of a va-riety of large-scale NLP applications: In-formation Retrieval, Corpus Processing,Multilingual MT, and integration ofSpeechComponents.1 IntroductionThe shift from Computational Linguistics to Lan-guage Engineering 1 is indicative of new trends inNLP.
We believe that it is not simply a new fash-ion but that it is indicative of the growing matura-tion of the field, as also suggested by an emphasis onbuilding large-scale systems, away from toy researchsystems.
There is also an increasing awareness thatreal-size systems are not mere scaled-up toy systemsbut that they present an altogether qualitatively dif-ferent set of problems that require new tools and newideas, as clearly exemplified by recent projects andprograms uch as Pangloss (Frederking et al 94),Tipster (ARPA 94), and Verbmobil (GSrz et al 96).Natural anguage ngineering addresses some tra-ditional issues in software ngineering: robustness,testing and evaluation, reuse, and development oflarge-scale applications (see e.g., (Sommerville 96)for an overview).
These issues have been and arethe topic of a number of NLP projects and pro-grams: TSNLP, DECIDE, Tipster, MUC, TREC,Multext, Multilex, Genelex, Eagles, etc.
This paperreviews two domains of problems in natural language1To use the name of two well-known NLP journals.engineering: reuse and integration in the contextof software architectures for Natural Language Pro-cessing.
The emphasis i put on reuse of NLP soft-ware, components and their integration i  order tobuild large-scale applications.
Also relevant o thispresentation are topics such as integration of hetero-geneous components for building hybrid systems orfor integrating speech and other "higher-level" NLPcomponents ( ection 2).Section 3 presents the Corelli Document Process-ing Architecture, a new software architecture forNLP which is designed to support he developmentof a variety of large- scale NLP applications: Infor-mation Retrieval, Corpus Processing, MultilingualMT, and integration ofSpeech with other NLP com-ponents.2 Reuse  in NLPThere is an increasing amount of shared corpora ndlexical resources that are being made available forNLP researchers through managed ata repositoriessuch as LDC, CLR, ELRA, etc.
(see e.g., (Wilkset al 92) for an overview of these repositories).These resources constitute the basic raw materialsfor building NLP software but not all of these re-sources can be readily used: they might be availablein formats that require extensive pre-processing totransform them into resources that are tractable byNLP software.
This pre-processing cannot usuallybe fully automated and is therefore costly.Some projects have concentrated on developinglexical resources directly in a format suitable forfurther use in NLP software (e.g., Genelex, Mul-tilex).
These projects go beyond the definition ofinterchange formats to define a "neutral" linguisticrepresentation in which all lexical knowledge is en-coded and from which, by means of specialized com-pilers, application-specific dictionaries can be ex-tracted.
The lexical knowledge ncoded in thesesystems can truly be called reusable since neither245the format nor the content is application-dependent.The result of these projects is however not availableto the research community.Reuse of NLP software components remains muchmore limited (Cunningham et al 96) since prob-lems are compounded: the software components ofan NLP system need not only to be able to exchangedata using the same format (e.g., feature structures)and to share the same interpretation of the infor-mation they exchange (same linguistic theory, e.g.,LFG), but they also need to communicate at theprocess level, either through direct API calls if theyare written in the same programming language orthrough other means if, for example, they have torun on different platforms--a classical software inte-gration problem.
Thus, reuse of NLP software com-ponents can be defined as an integration problem.It is not of course the only approach to reuse inNLP (see for example (Biggerstaff & Perlis 89) for anoverview of alternative approaches tosoftware reuse)and some previous efforts have, for example, beendirected at building Integrated Development Envi-ronments ((Boitet et al 82; Simkins 94; Alshawi 92;Grover et al 93) to mention but a few).
AlthoughIntegrated Development Environments address omeof the problems, they do not give a complete solu-tion since one still has to develop rules and lexicalentries using these systems.Direct reuse of NLP software components, e.g.,using an existing morphological nalyzer as a com-ponent of a larger system, is still very limited butis nevertheless increasingly attractive since the de-velopment of large-scale NLP applications, a focusof current NLP research, is prohibitive for manyresearch groups.
The Tipster architecture for ex-ample is directed towards the development of infor-mation retrieval and extraction systems (ARPA 94;Grishman 95) and provides a modular approach tocomponent integration.
The GATES architecturebuilds upon the Tipster architecture and providesa graphical development environment to test inte-grated applications (Cunningham etal.
96).
Speechmachine-translation architectures need also to solvedifficult integration problems and original solutionshave been developed in the Verbmobil project (GSrzet al 96), and by researchers at ATR (e.g., (Boitet& Seligman 94)) for example.
A generic NLP archi-tecture needs to address component communicationand integration at three distinct levels:1.
The process or communication layer involves,for example, communication between differentcomponents hat could be written in differentprogramming languages and could be runningas different processes on a distributed network.2.
The data layer involves exchange and transla-tion of data structures between components.. At the linguistic level, components need toshare the same interpretation f the data theyexchange.A particular NLP architecture embodies designchoices related to how components can talk to eachother.
A variety of solutions are possible as illus-trated below.?
Each component can talk directly to each otherand thus all components need to incorporatesome knowledge about each other at all threelevels mentioned above.
This is the solutionadopted in the Verbmobil architecture whichmakes use of a special communication softwarepackage (written in C and imposing the use of Cand Unix) at the process level and uses a chartannotated with feature structures at the data-structure l vel.
At the linguistic level, a variantof HPSG is used (Kesseler 94; Amtrup 95; Turk& Geibler 95; GSrz et al 96).?
A central coordinator can incorporate knowl-edge about each component but the componentthemselves don't have any knowledge abouteach other, or even about the coordinator.
Fil-ters are needed to transform data back and forthbetween the central data-structure managed bythe coordinator (a lattice would be appropri-ate) and the data processed by each compo-nent.
Communication between the coordinatorand the components can be asynchronous andthe coordinator needs then to serialize the ac-tions of each component.
This solution, a vari-ant of the blackboard architecture (Erman &Lesser 80) is used in the Kasuga speech transla-tion prototype described in (Boitet & Seligman94).
This architecture imposes no constraintson the components (programming language orsoftware architecture) since communication isbased on the SMTP protocol.?
The Tipster Document Architecture makes noassumption about the solution used either atthe process level or at the linguistic level.
Atthe data structure level, NLP components ex-change data by reading and writing "annota-tions" associated with some segment of a docu-ment (Grishman 95).
This solution also formsthe basis of the GATES system (Cunninghamet al 96).
Various versions of this architecture246have been developed (in C, C++ and Lisp) butno support is defined for integration of hetero-geneous components.
However, in the TipsterPhase III program, a CORBA version of theTipster architecture will be developed to sup-port distributed processing.3 The  Core l l i  Document  Process ingArch i tec tureThe Corelli Document Processing Architecture is anattempt to address the various problems mentionedabove and also some other software-level ngineer-ing issues such as robustness, portability, scalabilityand inter-language communication (for integratingcomponents written in Lisp, C or other languages).Also of interest are some ergonomic issues such astractability, understandability and ease of use of thearchitecture (the programmer being the user in thiscase).
The architecture provides upport for com-ponent communication a d for data exchange.
Noconstraint is placed on the type of linguistic pro-cessing but a small library of data-structures forNLP is provided to ease data-conversion problems.The data layer implements the Tipster DocumentArchitecture and enables the integration of Tipster-compliant components.
This architecture is gearedto support he development of large-scale NLP appli-cations uch as Information Retrieval systems, mul-tilingual MT systems (Vanni & Zajac 96), hybridor multi-engine MT systems (Wilks et al 92; Fred-erking et al 94; Sumita & Iida 95), speech-basedsystems (Boitet & Seligman 94; G5rz et al 96) andalso systems for the exploration and exploitation oflarge corpora (Ballim 95; Thompson 95).Basic software engineering requirements?
A modular and scalable architecture nablesthe development of small and simple applica-tions using a file-based implementation suchas a grammar checker, as well as large andresource-intensive applications (information re-trieval, machine translation) using a databaseback-end (with two levels of functionality al-lowing for a single-user persistent store and afull-size commercial database).?
A portable implementation allows the devel-opment of small stand-alone PC applicationsas well as large distributed Unix applications.Portability is ensured through the use of theJava programming language.?
A simple and small API which can be easilylearned and does not make any presuppositionabout the type of application.
The AP!
is de-fined using the IDL language and structured ac-cording to CORBA standards and the CORBAservices architecture (OMG 95).A dynamic Plug'n Play architecture nablingeasier integration of components written in dif-ferent programming languages (C, C++, Lisp,Java, etc), where components are "wrapped" astools supporting a common interface.3.1 Data Layer: Document ServicesThe data layer of the Corelli Architecture is de-rived from the Tipster Architecture and implementsthe requirements li ted above.
In this architecture,components do not talk directly to each other butcommunicate hrough information (so-called 'anno-tations') attached to a document.
This model re-duces inter-dependencies b tween components, pro-moting the design of modular applications (Figure1) and enabling the development of blackboard-typeapplications such as the one described in (Boitet &Seligman 94).
The architecture provides olutionsfor* Representing information about a document,?
Storing and retrieving this information i an ef-ficient way,?
Exchanging this information among all compo-nents of an application.It does not however provide asolution for translat-ing linguistic structures (e.g., mapping adependencytree to a constituent s ructure).
These problems areapplication-dependent a dneed to be resolved ona case-by-case basis; such integration is feasible, asdemonstrated bythe various Tipster demonstrationsystems, and use of the architecture duces ignifi-cantly the load of integrating a component into theapplication.Documents, Annotations and AttributesThe data layer of the Corelli Document ProcessingArchitecture follows the Tipster Architecture.
Thebasic data object is the document.
Documents canhave attributes and annotations, and can be groupedinto collections.
Annotations are used to store infor-mation about a particular segment of the document(identified by a span, i.e., start-end byte offsets inthe document content) while the document i self re-mains unchanged.
This contrasts with the SGMLsolution used in the Multext project where infor-mation about a piece of text is stored as additionalSGML mark-up in the document i self (Ballim 95;247Thompson 95).
This architecture supports read-onlydata (e.g., data stored in a CD-ROM) as well aswritable data.
Annotations are attributed objectsthat contain application objects.
They can be used,for example, to store morphological tags producedby some tagger, to represent the HTML structure ofan HTML document or to store partial results of achart-parser.Figure 1: Document annotations as a centralizeddata-structure enable modular architectures and re-duce the number of interfaces from the order of n 2to the order of n.Document AnnotationsCorelli document annotations axe essentially thesame as Tipster document annotations and a similargeneric interface is provided.
However, consideringthe requirements of NLP applications such as parsersor documents browsers, two additional interfaces areprovided:?
Since a set of annotations can be quite natu-rally interpreted as a chart, a chart interfaceprovides efficient access to annotations viewedas a directed graph following the classical modelof the chart first presented in (Kay 73).?
An interv~-tree interface provides efficient ac-cess for efficient implementation f display func-tionalities.Application ObjectsAn application manipulating only basic data types(strings, numbers,...) need not define application ob-jects.
However, some applications may want to storecomplex data structures as document annotations,for example, trees, graphs, feature structures, etc.The architecture provides a top application-objectclass that can be sub-classed to define specific ap-plication objects.
To support persistency in the file:based version, an application object needs to imple-ment he read-persistent and write-persistentinterfaces (this is provided transparently b the per-sistent versions).
A small library of application ob-jects is provided with the architecture.Accessing DocumentsDocuments are accessible via a Document Serverwhich maintains persistent collections, documentsand their attributes and annotations.
An applica-tion can define its own classes for documents andcollections.
In the basic document class providedin the architecture, a document is identified by itsname (URL to the location of the document's con-tent).
In this distributed ata model, accessing adocument via a Document Server gives access to adocument's contents and to attributes and annota-tions of a document.Java Door Orb ~\]Figure 2: NLP components access Document Ser-vices and other facilities (e.g., codeset converters)through JavaSoft's Java Door Orb.ServicesThe Corelli Architecture incorporates standardssuch as CORBA for defining inter-operable inter-faces, and HTTP for data transport.
Following theCORBA model, the Architecture is structured as aset of services with well- defined interfaces:?
A Document Management Service (DMS) pro-vides functions for manipulating collections,documents, annotations and attributes.
* A Life-Cycle Service provides creation, copying,moving and deletion of objects.
* A Naming Service provides access to documentsand collections via their names.
Named collec-tions and documents are persistent.Figure 2 gives an overview of the Corelli Doc-ument Architecture: an NLP component accessesa Document Service provided by a DocumentServer using the Corelli Document ArchitectureAPI.
Client-side application component API calls onremote object references (requested from the Orb).248are transparently 'transferred' by the Orb to a Docu-ment Services implementation bject for invocation.Figure 3 describes the Java IDL compiler and JavaDoor Orb interaction.
The Corelli Document Archi-tecture API is specified using the Interface DefinitionLanguage (IDL), a standard efined by the ObjectManagement Group (OMG 95).
The IDL-to-Javacompiler essentially produces three significant files:one containing a Java interface corresponding to theIDL operational interface itself, a second containingclient-side 'stub' methods to invoke on remote objectreferences (along with code to handle Orb communi-cation overhead), and a third containing server-side'skeleton' methods to handle implementation bjectreferences.
What remains is for the server code, im-plementing the IDL operational interface to be de-veloped.When the server implementing the IDL specifi-cation is launched, it creates skeleton object ref-erences for implemented services/objects and pub-lishes them on the Orb.
A client wishing to invokemethods on those remote objects creates stub ob-ject references and accesses the orb to resolve themwith the implementation references on the serverside.
Any client API call made on a resolved ob-ject reference is then transparently (to the client)invoked on the corresponding server-side object.The Document Management Service, the Life-Cycle Service and the Naming Service are includedin the three versions of the architecture which imple-ment increasingly sophisticated support of databasefunctionalities:.
The basic file-based version of the architectureuses the local file system to store persistent data(collections, attributes and annotations); thecontents of a document can however be locatedanywhere on the Internet.. A persistent store version uses a persistent-storeback-end for storing and retrieving collections,attributes and annotations: this version sup-ports the Persistent Object Service which pro-vides greater efficiency for storing and accessingpersistent objects as well as enhanced supportfor defining persistent application objects.. A database version uses a commercial databasemanagement system to store and retrieve collec-tions, attributes and annotations and also docu-ments (through an import/export mechanism).This version provides a Concurrency ControlService and a Transaction Service.Communication LayerTo support integration and communication at theprocess level, the current version of the Corelli Ar-chitecture provides component inter-communicationvia the Corelli Plug'n Play architecture (see below)and the Java Door Orb.Corelli DocumentArc2dtectare4.
/  \Stab lr~al.
~ l  Java Orb ~p,  Skeleton Impl.NLP I Coml\]iC oraloonmt Doctmae.ntArchi~catmImplc~'n~t~ onFigure 3: Java IDL Compiler Java Door Orb Inter-action.3.2 Plug'n Play ArchitectureThe data layer of the Corelli Document Architec-ture, as described above, provides a static modelfor component integration through a common dataframework.
This data model does not provide anysupport for communication between components,i.e., for executing and controlling the interaction ofa set of components, nor for rapid tool integration.The Corelli Plug'n Play layer aims at filling this gapby providing a dynamic model for component in-tegration: this framework provides a high-level ofplug-and-play, allowing for component interchange-ability without modification of the application code,thus facilitating the evolution and upgrade of indi-vidual components.In the preliminary version of the Corelli Plug'nPlay layer, the choice was made to develop the mostgeneral version of the architecture to ensure that anytool can be integrated using this framework.
In thismodel, all components run as servers and the appli-cation code which implements the logic of the appli-cation runs as a client of the component servers.
Tobe integrated, a component needs to support syn-chronous or asynchronous versions of one or severalof four basic operations: execute,  query, convertand exchange (in addition to standard initializationad termination operations).
Client-server communi-cation is supported by the Java Door Orb.The rationale for this architecture is that manyNLP tools are themselves rather large software corn-249ponents, and embedding them in servers helps to re-duce the computation load.
For example, some mor-phological analyzers load their dictionary in the pro-cess memory, and on small documents, imply start-ing the process could take more time than actual ex-ecution.
In such cases, it is more efficient o run themorphological nalyzer as a server that can be ac-cessed by various client processes.
This architecturealso allows the processing load of an application tobe distributed by running the components on sev-eral machines accessible over the Internet, therebyenabling the integration of components running onwidely different architectures.
This model also pro-vides adequate support for the integration of staticknowledge sources (such as dictionaries) and of an-cillary tools (such as codeset converters).Figure 4 gives a picture of one possible integra-tion solution.
In this example, each component ofthe application is embedded in a server which is ac-cessed through the Corelli Component IntegrationAPI as described above.
A component server trans-lates an incoming request into a component action.The server also acts as a filter by translating thedocument data structures tored in the DocumentServer in a format appropriate as input for the com-ponent and conversely for the component output.Each component server acts as a wrapper and sev-eral solutions are possible:.
If the component has a Java API, it can be en-capsulated irectly in the server.?
If the component has an API written in oneof the languages upported by the Java NativeInterface (currently C and C++),  it can be dy-namically loaded into the server at runtime andaccessed via a Java front end.?
If the component is an executable, the servermust issue a system call for running the pro-gram and data communication usually occursthrough files.F" ICP 7 ~q~TP\[ KrmIF=x l l $?~?x~ HTTP \[~TCP.qP S?=wx} I~ \]v~ S?w?x , IFigure 4: Some possible integration paths for het-erogeneous components.4 Implementat ion4.1 Document Server ImplementationThe Document Server consists of three major mod-ules: Document Management Service, Naming Ser-vice, and Life-Cycle Service.
The modules are de-fined in IDL, and implemented in Java.
The SunJava IDL system, with its Door Orb implementation,is used to interface client programs to the DocumentServer implementation.The Document Management Service module pro-vides methods to access and manipulate the com-ponents of objects (e.g., attributes, annotations andcontent of a document object).The Life-Cycle Service is responsible for creatingand copying objects.The Naming Service binds a name to an object.The Naming Service supports a limited form of per-sistency for storing bindings.For example, to create a new document, he clientprogram creates it through the Life-Cycle Service,bind a name to it using the Naming Service, and addattributes and annotations to it through the Docu-ment Management Service.The Document Server itself is accessed via its APIand is running as a Java Door Orb supporting re-quests from the component's servers.This framework does not provide a model for con-trolling the interaction between the components ofan application : the designer of an NLP applicationcan use a simple sequential model or more sophis-ticated blackboard models : since this distributedmodel supports both the synchronous and the asyn-chronous types of communication between compo-nents, it supports a large variety of control models.4.2 Porting of the Temple MachineTranslation SystemTo bootstrap the CoreUi Machine Translation Sys-tem and test the implementation f the architecture,we are currently porting the CRL's Temple machine-translation system prototype (Vanni & Zajac 96) tothe Corelli architecture.
This task will be aided bytwo features: first, the Temple system already uti-lizes the Tipster Document Architecture for data ex-change between components, and second, the Tem-ple system has a pipelined architecture which will250allow modular encapsulation of translation stages(e.g., dictionary lookup) as Corelli Plug'n Play tools.The Temple morphological nalyzers and the En-glish morphological generator all function as stand-alone executables and will be easily converted toCorelli Plug'n Play tools.
Lexical resources (e.g.,dictionaries and glossaries), on the other hand, arecurrently maintained in a database and are accessedvia calls to a C library API.
Each lexical resourceis wrapped as a Plug'n Play tool implementingthe query interface: in order to interface with thedatabases, the Java Native Interface is used to wrapthe C database library.
Finally, we will have to re-engineer a portion of the top-level application con-trol code (in C) in Java.5 Conc lus ionThe Corelli Document Architecture is currently usedas  the integration layer for the Corelli Machine-Translation System.
This multilingual machine-translation system is built out of heterogeneous com-ponents, such as an English generator written inLisp, a Spanish morphological nalyzer written inProlog, a Glossary-Based Machine-Translation e -gine written in C, etc.
This architecture will also beused to support integration ofvarious machine trans-lation systems in a multi-engine machine translationproject (building on ideas first developed in the Pan-gloss project, see (Frederking et al 94)).The Corelli project has started collaborating withthe University of Sheffield with the aim to mergethe Corelli Document Architecture and the GATEarchitecture.
2 More specifically, the current GATEdocument manager will be replaced with the Corellidocument manager and the Plug'n Play layer will beadded to support distributed processing.The file-based version of the Corelli DocumentProcessing Architecture will be made freely avail-able for research purposes.
It will also be availableas part of the GATE system distribution.Acknowledgments.
An initial version of this ar-chitecture has been developed by Vani Mahesh.Research reported in this paper is supported bythe DoD, contract MDA904-96-C-1040.Re ferencesHiyan Alshawi.
1992.
The Core Language Engine.MIT Press.~The GATE system already uses a previous version(written in C) of a Tipster document manager developedat CRL.ARPA - Advanced Research Projects Agency.
1993.Proceedings of the TIPSTER Text Program -Phase 1.
Morgan-Kaufmann.Jan W. Amtrup.
1995.
"Chart-based IncrementalTransfer in Machine Translation".
Proceedings ofthe 6th International Conference on Theoreticaland Methodological Issues in Machine Translation- TIM'g5, 5-7 July 1995, Leuven, Belgium.
pp188-195.A.
Ballim.
1995.
"Abstract Data Types for MultextTool I/O".
LRE 62-05 Deliverable 1.2.1.Ted J. Biggerstaff, Alan J. Perlis, eds.
1989.
SoftwareReusability, 2 volumes.
ACM Press, Addison-Wesley.Christian Boitet, Pierre Guillaume, Maurice Qu6zel-Ambrunaz.
1982.
"Implementation f the conver-sational environment of ARIANE 78.4, an inte-grated system for automated translation and hu-man revision".
Proceedings of the 9th Interna-tional Conference on Computational Linguistics -COLING '82.Christian Boitet and Mark Seligman.
1994.
"TheWhiteboard Architecture: a Way to IntegrateHeterogeneous Components of NLP Systems".Proceedings of the 15th International Conferenceon Computational Linguist ics- COLING'94, Au-gust 5-9 1994, Kyoto, Japan.
pp426-430.H.
Cunningham, M. Freeman, W.J.
Black.
1994.
"Software Reuse, Object-Oriented Frameworksand Natural Language Processing".
Proceedingsof the 1st Conference on New Methods in NaturalLanguage Processing - NEMLAP-1, Manchester.H.
Cunningharn, Y. Wilks, R. Gaizauskas.
1996.
"New Methods, Current Trends and Software In-frastructure for NLP'.
Proceedings of the 2ndConference on New Methods in Natural LanguageProcessing - NEMLAP-2,  Ankara, Turkey.L.D.
Erman, V.R.
Lesser.
1980.
"The Hearsay-II speech understanding system".
In W.A.
Lea(ed.
), Trends in Speech Recognition, Prentice-Hall.
pp361-381.Robert Frederking, Sergei Nirenburg, David Farwell,Stephen Helmreich, Eduard Hovy, Kevin Knight,Stephen Beale, Constantine Domashnev, DonaleeAttardo, Dean Grannes, Ralf Brown.
1994.
"Inte-grating Translations from Multiple Sources withinthe Pangloss Mark III Machine Translation Sys-tem".
Proceedings ofthe 1st Conference of the As-sociation for Machine Translation in the Americas- AMTA '9,~, 5-8 October 1994, Columbia, Mary-land.
pp73- 80.251Giinther GSrz, Marcus Kesseler, JSrg Spilker, HansWeber.
1996.
"Research on Architectures for In-tegrated Speech/ Language Systems in Verbmo-bil".
Verbmobil Report 126, Universit~it Erlangen-Nfirnberg, May 1996.Claire Grover, John Caroll and Ted Briscoe.
1992.The Alvey Natural Language Tools.
ComputerLaboratory, University of Cambridge, UK.Ralph Grishman, editor.
1995.
"Tipster Phase II Ar-chitecture Design Document".
New-York Univer-sity, NY, July 1995.Bill Janssen, Mike Spreitzer.
1996.
"ILU 2.0 Refer-ence Manual".
Xerox PARC.Martin Kay.
1973.
"The MIND system".
In R.Rustin (ed.
), Courant Computer Science Sympo-sium 8: Natural Language Processing.
Algorith-mics Press, New-York, NY.
pp155-188.Martin Kay.
1996.
"Chart Generation".
Proceedingsof the 34th Meeting of the Association for Com-putational Linguistics ACL'96.
pp200-204.M.
Kesseler.
1994.
"Distributed Control in Verbmo-bil'.
Verbmobil Report 24, Universit~it Erlangen-Niirnberg, August 1994.Sergei Nirenburg.
1994.
"The Workstation Substrateof the Pangloss Project".
Proceedings ofthe Con-ference on Future Generation of Natural LanguageProcessing Systems - FGNLP-2.Sergei Nirenburg and Robert Frederking.
1994.
"To-wards Multi-Engine Machine Translation".
Pro-ceedings of the ARPA Human Language Technol-ogy Workshop, March 8-11 1994, Plainsboro, NJ.pp147-151.Sergei Nirenburg, David FarweU, Robert F~ederking,Yorick Wilks.
1994.
"Two types of adaptative MTenvironments".
Proceedings of the 15th Interna-tional Conference on Computational Linguistics- COLING'94, August 5-9 1994, Kyoto, Japan.pp125-128.OMG.
1995.
"The Common Object Request Bro-ker: Architecture and Specification, Version 2.0".OMG Technical Document PTC/96-03-0.N.K.
Simkins.
1994.
"An Open Architecture for Lan-guage Engineering".
Proceedings of the 1st Lan-guage Engineering Convention, Paris.Ian Sommerville.
1996.
Software Engineering (5t hEdition).
Addison-Wesley.Eiichiro Sumita and Hitoshi \[ida.
1995.
"Hetero-geneous Computing for Example-based Transla-tion of Spoken Language".
Proceedings of the6th International Conference on Theoretical andMethodological Issues in Machine Translation -TIM'95, 5-7 July 1995, Leuven, Belgium.
pp273-286.Henry Thompson and Graeme Ritchie.
1984.
"Im-plementing Natural Language Parsers".
In T.O'Shea and E. Eisenstadt (eds.
), Artificial Intel-ligence.
Harper & Row, New-York.
pp245-300.Henry Thompson.
1995.
"Multext Workpackage 2,Milestone B, Deliverable Overview".
LRE 62-050Deliverable 2.Andrea Turk and Stefan Geibler.
1995.
"Integra-tion alternativer Komponenten fiir die Sparchver-arbeitung im Verbmobil Demonstrator".
Verbmo-bil Report 67, IBM Informationssysteme GmBH,April 1995.Michelle Vanni and R6mi Zajac.
1996.
"Glossary-Based MT Engines in a Multilingual Analyst'sWorkstation for Information Processing".
To ap-pear in Machine Translation, Special Issue on NewTools for Human Translators.Yorick Wilks, Louise Guthrie, Joe Guthrie andJim Cowie.
1992.
"Combining Weak Methods inLarge-Scale Text Processing".
In Paul S. Jacob(ed.
), Text-Based Intelligent Systems, LawrenceErlbaum Associates, pp35-58.R6mi Zajac.
1992.
"Towards Computer-Aided Lin-guistic Engineering".
Proc.
of the 14th Interna-tional Conference on Computational Linguistics -COLING'92, 23-28 August 1992, Nantes, France.pp827-834.R6mi Zajac.
1996.
"A Multilingual Translator'sWorkstation for Information Access", Proceed-ings of the International Conference on NaturalLanguage Processing and Industrial Applications -NLP+IA 96, Moncton, New-Brunswick, Canada,June 4-6, 1996.R6mi Zajac.
1996.
"Towards a Multilingual An-alyst's Workstation: Temple".
In ExpandingMT Horizons - Proceedings of the 2nd Confer-ence of the Association for Machine Translationin the Americas, AMTA-96.
2-5 October 1996,Montr6al, Canada.
pp280-284.R6mi Zajac and Mark Casper.
"The Temple WebTranslator".
Proc.
of the 1997 AAAI  Spring Sym-posium on Natural Language Processing for theWorld Wide Web, March 24-26, 1997, StanfordUniversity.252
