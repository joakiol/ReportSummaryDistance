Using answer set programming to answer complex queriesChitta BaralDept.
of Computer Sc.
& Eng.Arizona State UniversityTempe, AZ 85287chitta@asu.eduMichael GelfondDept.
of Computer Sc.Texas Tech UniversityLubbock, TX 79409mgelfond@cs.ttu.eduRichard ScherlComputer Science Dept.Monmouth UniversityWest Long Branch, NJ 07764rscherl@monmouth.eduAbstractIn this paper we discuss the applicability of theknowledge representation and reasoning lan-guage AnsProlog for the design and implemen-tation of query answering systems.
We con-sider a motivating example, and illustrate howAnsProlog can be used to represent defaults,causal relations, and other types of common-sense knowledge needed to properly answernon-trivial questions about the example?s do-main.1 Introduction and MotivationLet us envision a query answering system (QAS) con-sisting of a search engine which searches diverse sourcesfor information relevant to the given query, Q; a naturallanguage processing module (NLPM), which translatesthis information (including the query) into a theory, F ,of some knowledge representation language L; a gen-eral knowledge base, KB, containing common-sensesand expert knowledge about various domains; and an in-ference engine which takes F and KB as an input andreturns an answer to Q.
Even though the choice of theKR language L is irrelevant for the first component ofthe system it plays an increasingly important role in thedesign of its other components.
In this paper we hypothe-size that AnsProlog - a language of logic programs underthe answer set semantics (Gelfond and Lifschitz, 1988;Gelfond and Lifschitz, 1991) - is a good candidate for theKR language of QAS.
This is especially true if answer-ing a query Q requires sophisticated kinds of reasoningincluding default, causal, and counterfactual reasoning,reasoning about narratives, etc.The list of attractive properties of AnsProlog includeits simplicity and expressive power, ability to reasonwith incomplete information, existence of a well devel-oped mathematical theory and programming methodol-ogy (Baral, 2003), and the availability of rather efficientreasoning systems such as SMODELS(Niemela and Si-mons, 1997) and others as well(Eiter et al, 1997; Yu andMaratea, 2004).
AnsProlog allows its users to encode de-faults, causal relations, inheritance hierarchies, and othertypes of knowledge not readily available in other KR lan-guages.
In addition it supports construction of elabora-tion tolerant knowledge bases, i.e., ability to accommo-date new knowledge without doing large scale surgery.The main drawback of the language is the inability of itscurrent inference engines to effectively deal with num-bers and numerical computations1.In this paper we illustrate the use of AnsProlog for queryanswering via a simple example.
Of course substantiallymore work is needed to to prove (or disprove) our mainhypothesis.Consider an analyst who would like to use his QAS toanswer simple queries Q1 and Q2 about two people, Johnand Bob:?
Q1 ?
Was John in the Middle East in mid-December??
Q2 ?
If so, did he meet Bob in the Middle East inmid-December?Let us assume that the search engine of QAS extractedthe following simple text relevant to Q1 and Q2:1The current answer set solvers start their computation withgrounding the program, i.e.
replacing its variables by possibleground instantiations.
The grounding algorithms are smart andcapable of eliminating many useless rules; answer sets can beeffectively computed even if the resulting program consists ofhundreds of thousands of rules.
However, if several integer vari-ables are used by the program rules, the size of the groundedprogram becomes unmanageable.
We hope however that thisproblem will be remedied by the development of new reasoningalgorithms and systems.John spent Dec 10 in Paris and took a plane toBaghdad the next morning.
He was planning tomeet Bob who was waiting for him there.We will also assume that the NLP module of the QAS re-alizes that to answer our queries it needs general knowl-edge of geography, calendar, and human activities in-cluding travel, meetings, and plans.
In the next sectionwe outline how such knowledge can be represented inAnsProlog.2 Representing general knowledge2.1 The ?geography?
module M1The geography module M1 will contain a listis(baghdad,city).is(iraq,country)....of places and the definition of relationin(P1, P2) - ?P1 is located in P2?The definition is given by a collection of facts:in(baghdad, iraq).in(iraq,middle_east).in(paris,france).in(france,western_europe).in(western_europe,europe)....and the rulein(P1,P3) :- in(P1,P2),in(P2,P3).For simplicity we assume that our information about re-lation in is complete, i.e., if in(p1, p2) is not known to betrue then it is false.
This statement can be expressed bythe rule-in(P1,P2) :- not in(P1,P2)often referred to as the CWA- Closed World Assumption(Reiter, 1978) (for in).
Here ?p stands for ?p is false?while not p says that ?there is no reason to belief p?.Similar assumption can be written for is.
The programhas unique answer set containing in(iraq,middle east),-in(iraq, europe), etc.
This answer set, (or its relevantparts) can be computed by answer set solvers.
Some-times this will require small additions to the program.
Forinstance SMODELS, which require typing of variables,will not be able to compile this program.
This problemcan be remedied by adding a ruleposition(P) :- is(P,C).defining the type position and a statement#domain position(P;P1;P2;P3)declaring the type of the corresponding variables.
NowSMODELS will be able complete the computation.2.2 The ?travelling?
module M2This module describes the effects of a person travellingfrom one place to another.
We are mainly interested inlocations of people and in various travelling events whichchange these locations.
Construction of M2 is based onthe theory of dynamic systems () which views the worldas a transition diagram whose states are labelled by flu-ents (propositions whose values depend on time) and arcsare labelled by actions.
For instance, states of the di-agram, D, can contain locations of different people; atransition ?
?0, {a1, a2}, ?1?
?
D iff ?1 is a possible stateof the domain after the concurrent execution of actionsa1 and a2 in ?0.
There is a well developed methodol-ogy of representing dynamic domain in AnsProlog (Baraland Gelfond, 2000; Turner, 1997) which, in its simplifiedform, will be used in the construction of M2.The language of M2 will contain time-steps from [0, n],fluent loc(P,X, T ) - ?place P is a location of person Xat step T ?.
Various types of travelling events - fly, drive,etc., will be recorded by the list:instance_of(fly,travel).instance_of(drive,travel)....Description of an event type will contain the event?s nameand attributes.
The following is a generic description ofJohn flying to Baghdad.event(a1).type(a1,fly).actor(a1,john).destination(a1,baghdad).An actual event of this type will be recorded by a state-mentoccurs(a1, i).
(where i is a time-step in the history of the world) pos-sibly accompanied by the actual time of i.
In addition,M2 will import relation in(P1, P2) from the geographymodule M1.The transition diagram, D, of M2 will be described by ?
?groups of axioms.?.
The first group consists of state constraints establish-ing the relationship between the domain fluents.
In ourcase it is sufficient to have the rules:loc(P2,X,T) :- loc(P1,X,T),in(P2,P1).disjoint(P1,P2) :- -in(P1,P2),-in(P2,P1),neq(P1,P2).-loc(P2,X,T) :- loc(P1,X,T),disjoint(P1,P2).Here neq stands for the inequality.
The first rule allowsus to conclude that if at step T of the domain history Xis in Iraq then he is also in the Middle East.
The secondtwo rules guarantee that X is not in Europe.?.
The second group contains causal laws describing di-rect effects of actions.
For our example it suffices to havethe rulesloc(P,X,T+1) :- occurs(E,T),type(E,travel),actor(E,X),destination(E,P),-interference(E,T).-interference(E,T) :-not interference(E,T).The first rule says that, in the absence of interference, atraveller will arrive at his destination.
The second - theCWA for interference - states that the interference isan unusual event which normally does not happen.?.
The third group consists of executability conditions foractions, which have the form-occurs(E,T) :- cond(T).which says that it is impossible for an event E occur attime step T if at that time step the domain is in a statesatisfying condition cond.Causal laws and state constraints determine changescaused by execution of an action.
To complete the def-inition of the transition diagram of the domain we needto specify what fluents do not change as the results of ac-tions.
This is a famous Frame Problem from (McCarthyand Hayes, 1969) where the authors suggested to solve itby formalizing the Inertia Axiom which says that ?thingstend to stay as they are?.
This is a typical default whichcan be easily represented in AnsProlog.
In our particularcase it will have a form:loc(P,X,T+1) :- loc(P,X,T),not -loc(P,X,T+1).-loc(P,X,T+1) :- -loc(P,X,T),not loc(P,X,T+1).The above representation is a slightly simplified versionof AnsProlog theory of dynamic domains which gives no-tation for causal relations of the domain, includes general(fluent independent) formulation of the inertia, explainshow the set of causal relations define the correspondingtransition diagram, etc.
We used this version to simplesave space.
Given the following history of the domainloc(paris,john,0).loc(baghdad,bob,0).occurs(a1,0).information contained in M1 and M2 is sufficient toconclude loc(baghdad, john, 1), loc(baghdad, bob, 1),loc(middle east, john, 1), -loc(paris, john, 1), etc.
Toanswer the original queries we now need to deal with tim-ing our actions.
Let us assume, for instance, that the tim-ing of John?s departure from Paris is recorded by state-ments:time(0,day,11).time(0,month,12).time(0,year,03).Here day, month, and year are the basic time measuringunits.Finally we may need to specify typical durations of ac-tions, e.g.time(T+1,day,D) :- occurs(E,T),type(E,fly),time(T,day,D),not -time(T+1,day,D).where 1 ?
D ?
31.To reason about the time relation we need to include anew module, M3, which will allow us to change granu-larity of our time measure.2.3 M3 - measuring timeThe module contains types for basic measuring units, e.g.day(1..31).month(1..12).part(start).part(end).part(middle)....and rules translating from one granularity measure to an-other, e.g.time(T,part,middle) :- time(T,d,D),10 < D < 20.time(T,season,summer):- time(T,month,M),5 < M < 9....M3 presented in this paper is deliberately short.
Itincludes very little knowledge beyond that needed toanswer our query.
Ideally it should be much biggerand include a formalization of the calendar.
Amongother things the module should allow us to prove state-ments like next(date(10, 12, 03), date(11, 12, 03) andnext(date(31, 12, 03), date(1, 1, 04).Now let us assume that NLP module of our QAS trans-lated(a) information about John?s flight to Baghdad by a his-toryloc(paris,john,0).loc(baghdad,bob,0).occurs(a1,0).time(0,day,11).time(0,month,12).
(b) the query Q1 by?
loc(middle_east,john,T),time(T,month,12),time(T,part,middle).Modules M1, M2 and M3 have enough information tocorrectly answer Q1.2.4 Planning the meeting - M4To answer the second question we need an additionalmodule about the event meet.
The event type for meetwill be similar to the previously discussed flying eventa1.
It may look like:event(a2).type(a2,meet).actor(a2,john).actor(a2,bob).place(a2,baghdad).Notice however that the story contains no informationabout actual occurrence of this event.
All we know isthat a2 is planned to occur at time step one.
We encodethis by simply stating:planned(a2,1).Note that to give a positive answer to the questionQ2 ?
?Did John meet Bob in the Middle East in mid-December?
?
we need to reason about planned events.
Itseems that our positive answer to this question is obtainby using a default: ?people normally follow their plans?.Again this is a typical default statement which, accordingto the general knowledge representation methodology ofAnsProlog could be expressed by the rule:occurs(E,T) :- planned(E,T),not -occurs(E).In a slightly more complex situation we may need to as-sume that people take their plans seriously ?
they persistwith their plans until the planned event actually happen.This is encoded as follows:planned(E,T+1) :- planned(E,T),-occurs(E,T).Unlike traveling, the meeting event does not seem to haveany obvious causal effects.
It, however, has the followingexecutability condition relevant to our story.-occurs(E,T) :- type(E,meet),actor(E,X),place(E,P),-loc(P,X,T).Now we have enough information to answer our secondquery, which can be encoded as?
occurs(E,T),type(E,meet),actor(E,john),actor(E,bob),loc(middle_east,john,T),time(T,month,12),time(T,part,middle).As expected the answer will be positive.
There are sev-eral ways to obtain this answer.
It can of course be ex-tracted from the unique answer set of our program.
Withsmall additions of types and declaration of variables sim-ilar to that we used to define position in M1 this answerset can be found by SMODELS or any other answer setsolver.
This method however may not scale.
The problemis caused the calendar.
Its integer variables for months,days, etc, in conjunction with a longer history (and there-fore a larger number of time steps) may cause an unman-ageable increase in the number of ground rules of the pro-gram.
It seems however that in many interesting cases(including ours), the computation can be made substan-tially more efficient by properly combining answer setfinding algorithms with the traditional resolution of Pro-log.
The way of doing this will be illustrated in the fullpaper.
We also plan to expand our modules especiallythose dealing with time and reasoning about plans.3 FrameNet and EventsOur vision of the NLPM is that it will translate both ourshort text and also the queries into AnsProlog sentences.There is a body of literature on translating or parsingEnglish sentences into a semantic representation such asFirst Order Logic.
See (Blackburn and Bos, 2003) for arecent survey of such techniques.
The semantic represen-tation makes use of symbols based upon the lexicon ofEnglish.The success of our endeavor requires that there be anaxiomatization of the relationship between the symbolsrepresenting functions and predicate symbols in our vari-ous AnsProlog theories (e.g., M1 ?
M4) and the symbols(based upon the lexicon of English) used in the seman-tic representation of the English queries and the narrativetexts.
The online lexical database, FrameNet(Baker et al,1998) provides such a connection, especially for events.This is done through the notion of frame semantics thatunderlies FrameNet.Frame semantics assumes that lexical items draw theirmeaning from conceptual structures or frames that pro-vide an abstract or scematic description of particulartypes of events.
The frames are structured into an inheri-tance hierarchy.
Each frame includes a number of frameelements (FEs) or roles that make up the conceptual struc-ture.For example, our ?travelling?
module M2 closely corre-sponds to the related FrameNet frames Travel, Move,and Ride Vehicle.
The frames relate the various frameelements of Area (where the travelling takes place), Goal(where the travellers end up), Path (route of the travel),Source (starting point of the trip), and the Traveller (theliving being which travels).Consider the phrase took a plane used to express the trav-elling activity.
The verb take is associated with the frameRide Vehicle.
This information allows the connectionwith the axiomatization of flying events in M2.
On theother hand FrameNet does not have entries for the verbspend as in spent Dec 10.
But WordNet(Fellbaum, 1998)has 3 senses for the verb spend.
Sense 1 is ?pass ?
(pass(time) in a specific way.
?How are you spending yoursummer vacation??).
?
Unfortunately, neither pass nortime allows us to index a useful frame for just being in aplace.
The coverage of FrameNet is not sufficient.
It willbe necessary to augment our use of FrameNet with otheronline sources such as WordNet and to also increase thenumber of frames within FrameNet.There has been some related work on using the frame ofFrameNet for reasoning (Chang et al, 2002) and also onthe automatic annotation of English texts with regard tothe relevant frames (Gildea and Jurafsky, 2000) and frameelements.4 Syntax and Semantics of AnsPrologAn AnsProlog knowledge base consists of rules of theform:l0 ?
l1, .
.
.
, lm, not lm+1, .
.
.
, not ln (4.1)where each of the lis is a literal, i.e.
an atom, a, or its clas-sical negation, -a and not is a logical connective callednegation as failure or default negation.
While -a statesthat a is false, an expression not l says that there is noreason to believe in l.The answer set semantics of a logic program ?
assigns to?
a collection of answer sets ?
consistent sets of groundliterals corresponding to beliefs which can be built by arational reasoner on the basis of rules of ?.
In the con-struction of these beliefs the reasoner is guided by thefollowing informal principles:?
He should satisfy the rules of ?, understood as con-straints of the form: If one believes in the body of arule one must belief in its head.?
He should adhere to the rationality principle whichsays that one shall not believe anything he is notforced to believe.The precise definition of answer sets is first given for pro-grams whose rules do not contain default negation.
Let ?be such a program and X a consistent set of ground liter-als.
Set X is closed under ?
if, for every rule (4.1) of ?,l0 ?
X whenever for every 1 ?
i ?
m, li ?
X and forevery m+ 1 ?
j ?
n, lj 6?
X .Definition 1 (Answer set ?
part one)A state X of ?(?)
is an answer set for ?
if X is minimal(in the sense of set-theoretic inclusion) among the setsclosed under ?.To extend this definition to arbitrary programs, take anyprogram ?, and consistent set X of ground literals.
Thereduct, ?X , of ?
relative to X is the set of rulesl0 ?
l1, .
.
.
, lmfor all rules (4.1) in ?
such that lm+1, .
.
.
, ln 6?
X .
Thus?X is a program without default negation.Definition 2 (Answer set ?
part two)X is an answer set for ?
if X is an answer set for ?X .Definition 3 (Entailment)A program ?
entails a literal l (?
|= l) if l belongs to allanswer sets of ?.The ?
?s answer to a query l is yes if ?
|= l, no if ?
|= l,and unknown otherwise.5 SummaryIn conclusion, we feel that the features of AnsProlog arewell suited to form the foundations for an inference en-gine supporting a QAS.
Our future work will develop thesupport tools and implementation needed to demonstratethis hypothesis.ReferencesC.
Baker, C. Fillmore, and J. Lowe.
The BerkeleyFrameNet project.
In Proceedings of the COLING-ACL, Montreal, Canada, 1998.C.
Baral.
Knowledge representation, reasoning anddeclarative problem solving.
Cambridge UniversityPress, 2003.C.
Baral and M. Gelfond.
Reasoning agents in dynamicdomains.
In J Minker, editor, Logic Based AI.
pp.
257?279, Kluwer, 2000.P.
Blackburn and J. Bos.
Computational Semantics.Theoria, 18(1), pages 365?387, 2003.N.
Chang, S. Narayanan, R. Miriam, and L. Petruck.From frames to inference.
In Proceedings of the FirstInternational Workshop on Scalable Natural LanguageUnderstanding, Heidelberg, Germany, 2002.C.
Fellbaum (ed).
WordNet: An Electronic LexicalDatabase.
MIT Press, 1998.M.
Gelfond and V. Lifschitz.
The stable model semanticsfor logic programming.
In R. Kowalski and K. Bowen,editors, Logic Programming: Proc.
of the Fifth Int?lConf.
and Symp., pages 1070?1080.
MIT Press, 1988.M.
Gelfond and V. Lifschitz.
Classical negation in logicprograms and disjunctive databases.
New GenerationComputing, pages 365?387, 1991.D.
Gildea and D. Jurafsky.
Automatic Labeling of Se-mantic Roles.
In Proceedings of ACL 2000, HongKong, China, 2000.Lierler Yu., and Maratea M. Cmodels-2: SAT-based An-swer Sets Solver Enhanced to Non-tight Programs, InProc.
of LPNMR-7, pp.
346, 2004.J.
McCarthy and P. Hayes.
Some philosophical prob-lems from the standpoint of artificial intelligence.
InB.
Meltzer and D. Michie, editors, Machine Intelli-gence, volume 4, pages 463?502.
Edinburgh Univer-sity Press, Edinburgh, 1969.T.
Eiter, N. Leone, C.
Mateis., G. Pfeifer and F. Scar-cello.
A deductive system for nonmonotonic rea-soning, Proceedings of the 4rd Logic Programmingand Non-Monotonic Reasoning Conference ?
LPNMR?97, LNAI 1265, Springer-Verlag, Dagstuhl, Germa-nia, Luglio 1997, pp.
363?374.I.
Niemela and P. Simons.
Smodels ?
an implementa-tion of the stable model and well-founded semanticsfor normal logic programs.
In Proc.
4th internationalconference on Logic programming and non-monotonicreasoning, pages 420?429, 1997.R.
Reiter.
On closed world data bases.
In H. Gallaireand J. Minker, editors, Logic and Data Bases, pages119?140.
Plenum Press, New York, 1978.H.
Turner.
Representing actions in logic programs anddefault theories.
Journal of Logic Programming, 31(1-3):245?298, May 1997.
