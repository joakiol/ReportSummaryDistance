PHRED: A GENERATOR FOR NATURAL LANGUAGE INTERFACES 1Paul S. Jacobs 2Berkeley Artificial Intelligence ResearchDivision of Computer ScienceDepartment of EECSUniversity of CaliforniaBerkeley, CA, USAPHRED (PHRasal English Diction is a natural anguage generator designed for use in a variety ofdomains.
It was constructed to share a knowledge base with PHRAN (PHRasal ANalyzer) as part of areal-time user-friendly interface.
The knowledge base consists of pattern-concept pairs, i.e., associ-ations between linguistic structures and conceptual templates.
Using this knowledge base, PHREDproduces appropriate and grammatical natural language output from a conceptual representation.PHRED and PHRAN are currently used as central components of the user interface to the UNIXConsultant System (UC).
This system answers questions and solves problems related to the UNIX 3operating system.
UC passes the conceptual form of its responses, usually either questions or answersto questions, to the PHRED generator, which expresses them in the user's language.
Currently theconsultant can answer questions and produce its responses in either English or Spanish.There are a number of practical advantages to PHRED as the generation component of a naturallanguage system.
Having a knowledge base shared between analyzer and generator eliminates theredundancy of having separate grammars and lexicons for input and output.
It avoids possibly awkwardinconsistencies caused by such a separation, and allows for interchangeable interfaces, such as theEnglish and Spanish versions of the UC interface.The phrasal approach to language processing realized in PHRED has proven helpful in generation asin analysis.
PHRED commands the use of idioms, grammatical constructions, and canned phrases with-out a specialized mechanism or data structure.
This is accomplished without restricting the ability ofthe generator to utilize more general linguistic knowledge.As the generation component of a natural anguage interface, PHRED affords extensibility, simplici-ty, and processing speed.
Its design incorporates a cognitive motivation as well.
It diverges from thetraditional computational approach by focusing on the use of specialized phrasal knowledge.
This phra-sal approach minimizes the autonomy of the individual word, the bane of some earlier approaches tolanguage processing.
The two-stage process used by PHRED to select appropriate linguistic structuresalso fits well with cognitive theories of language and memory.1 INTRODUCTIONThe PHRED (PHRasal English Diction) system is alanguage generation module for natural language inter-faces.
The generator operates from a declarative know-ledge base of linguistic knowledge, common to that usedby PHRAN (PHRasal ANalyzer; Wilensky and Arens,1980).
PHRED and PHRAN together form an interfacefor analyzing natural language and producing naturallanguage responses.
This interface serves as the linguisticcomponent to the UNIX Consultant system (UC) (Wilen-sky, Arens, and Chin 1984), a program for responding toinquiries about the UNIX operating system.
As the entireUC system operates in several seconds of CPU time, it isan important feature of PHRED that it requires no morethan two or three seconds to produce a completesentence.The principal knowledge structure used by PHRANand PHRED is the pattern-concept air, which links aphrasal pattern to a conceptual template.
This structurehas proven particularly effective in the encoding ofspecialized linguistic knowledge, i.e., knowledge aboutCopyright1985 by the Association for Computational Linguistics.
Permission to copy without fee all or part of this material is granted provided thatthe copies are not made for direct commercial advantage and the CL reference and this copyright notice are included on the first page.
To copyotherwise, or to republish, requires a fee and/or  specific permission.0362-613X/85/040219-242503.00Computational Linguistics, Volume 11, Number 4, October-December 1985 219Paul S. Jacobs PHRED: A Generator for Natural Language Interfacesparticular phrases and their specialized meanings.
Part ofthe theoretical basis of PHRED is the notion that suchspecialized constructs are an essential component oflanguage use.
This idea has among its advocates Chafe(1968), Harris (1968), and Kittredge and Lehrberger(1983), and is behind other generation systems uch asKukich's Ana (1983).The shared linguistic knowledge base is an unusualfeature of PHRED and PHRAN.
Computer programs thatcan effectively communicate in natural anguage must becapable both of analyzing a range of utterances to derivetheir meaning or intent, and of producing appropriateand intelligible responses.
Historically these two taskshave been treated independently, principally becausesome of the hard problems in language production differfrom those of language analysis.
In the MARGIE system,for example, the BABEL generator (Goldman 1975)employed a discrimination et as its principal data struc-ture to facilitate the selection of an appropriate verb andan ATN grammar to apply syntactic onstraints, while theELI analyzer (Riesbeck 1975) in the same systemattached routines to individual words to control the inter-pretations considered uring the parsing process.Throughout the short history of natural languagegeneration systems, programs that produce language havetreated generation as a process of decision making(McDonald 1980), choice (Mann and Matthiessen 1983),or planning (Appelt 1982).
These systems haveemployed knowledge structures specifically geared, tovarying degrees, to the task of constraining the selectionof lexical and grammatical elements.
The design ofanalyzers, on the other hand, focuses on the problem ofambiguity in natural language and makes use of know-ledge structures designed to constrain the considerationof alternative interpretations.
While the tasks of analysisand generation are thus inescapably different, much ofthe same knowledge can be used in performing bothtasks.Even in systems with both analysis and generationcomponents, the knowledge used to derive meaning fromlanguage is not used to produce language from meaning.Such systems may be able to use a word or grammaticalstructure without being able to recognize the same struc-ture, or vice versa, and must duplicate a great deal ofinformation if the generator uses language similar to thatunderstood by the analyzer.
Intuitively, it seems that theknowledge used to constrain the interpretation oflanguage can be used to constrain the choice of language.A natural language system with a parsimonious know-ledge representation could encompass an interface capa-ble of both analysis and production without excessiveduplication, with knowledge about language as well asmechanisms for its analysis and generation.PHRED was conceived as the generation component ofsuch an interface.
PHRED, along with its companionanalysis program PHRAN, embodies an approach tonatural anguage processing founded on the principle thatknowledge about language is in essence declarative,consisting of associations between linguistic and concep-tual structures of varying degrees of specificity (Wilensky1981).
Such declarative knowledge should be used forboth analysis and generation, and the form of the know-ledge should be independent of the particular language.From its initial conception the "English" part ofPHRED's acronym was anomalous, as both the analyzerand generator were envisioned as being able to utilizeknowledge bases of multiple languages.The UNIX Consultant, designed to aid novice users ofthe UNIX operating system by conversing in naturallanguage, is one application of the PHRED generator.The PHRAN analyzer eceives the user's input and passesa conceptual interpretation to UC, which then passes itsresponse in conceptual form to PHRED to be Convertedinto natural anguage output.
Below are some examplesof questions to UC, with the responses generated byPHRED:User: How do I delete a file?UC: Typing 'rm filename' causes the file filename to beremoved from the current directory.User: C6mo se borra un archivo?UC: Para borrar el archivo de hombre filename del espa-cio de trabajo, se escribe 'rm filename'.User: How do I delete all the files from a directory?UC: Typing 'rm *' will remove all files within the currentdirectory from the current directory.Typing 'rm -r directoryname' will cause all files anddirectories recursively inside of directoryname to bedeleted from directoryname and removes the direc-tory directoryname from the working directory.The Spanish example above, a rough paraphrase of thefirst English question, illustrates the ability of UC toanswer questions posed in either language, using thesame knowledge about UNIX.
The PHRAN/PHREDknowledge base includes the information that borrar andescribe used with certain objects refer to specific conceptsin the UNIX world, the same concepts as deleting andtyping, respectively.
Also in the phrasal knowledge baseis knowledge that espacio de trabajo and working directoryhave a specialized enotation in the UNIX world.
Suchspecialized linguistic knowledge is common in thisdomain.While PHRAN and PHRED were originally tested usingan English vocabulary used for various stories and newsarticles, it was a relatively easy task to accommodatelinguistic knowledge bases for English and Spanish inorder for the same programs to operate in the UCdomain.
Adding a new vocabulary or language capabilityto the UC system has required no modification to theprogram, although the system has not had extensive test-ing with many languages.PHRED is implemented in Franz LISP and runscompiled on a VAX 11/780.
The English linguistic know-ledge base of UC contains about 150 patterns, in additionto knowledge of the morphological characteristics of 30220 Computational Linguistics, Volume 11, Number 4, October-December 1985Paul S. Jacobs PHRED: A Generator for Natural Language Interfacesverbs and 50 nouns commonly used in communicatingUNIX information.
The compiled program occupies about100K bytes of memory, of which about 20K is code usedalso by PHRAN.
Output from PHRED in the UC systemrequires 1-3 seconds of CPU time, roughly a third of thetotal time used by the system.
For sentences of thelength typically produced by the generator, the amountof time used is roughly proportional to the length ofoutput.
Experiments with larger knowledge bases havesuggested that the time used by the generator is notheavily dependent on the size of the knowledge base.The next section describes the PHRED knowledgebase and outlines its role in the generation process.Section 3 covers this process in more detail, and Section4 traces a complete xample of generation using PHRED.Section 5 compares the PHRED approach with otherresearch.
Section 6 discusses ome current and futureresearch directions.2 THE PHRED KNOWLEDGE BASEThe knowledge base shared by the phrasal analyzer(PHRAN) and phrasal generator (PHRED) consists ofpattern-concept pairs, where the pattern contains alinguistic structure and the concept its internal represen-tation.
While this representation may be classified aswithin the systemic/functional tradition (cf.
Halliday1968, Kay 1979) the implementation of the PHREDknowledge base differs in certain important details.
Theuse of the PC pair in PHRED may be distinguished fromsome other language production mechanisms (McDonald1980, Mann and Matthiessen 1983, McKeown 1982) inwhich grammatical information and conceptual informa-tion are separated: The "pattern" component of each PCpair may include conceptual information, and the proper-ties associated with each PC pair may combine linguisticand conceptual attributes.
Like the systems describedabove, however, PHRED uses these properties for index-ing and applying each pattern, particularly using informa-tion about agreement among constituents of the patternand relationships between properties of constituents andproperties of the entire pattern.The following is a simple example of a pattern-conceptpair, representing some of the knowledge about the useof the verb remove:PATTERN:<agent> <root = remove> <physob><<word = from> <container>>CONCEPT:(state-change (object ?rem-object)(state-name location)(from (inside-of (object ?cont)))(to (not (concept (inside-of(object ?cont))))))PROPERTIES:tense = (value 2 tense)rem-object = (value 3)cont = (value 5)forms = (active-s passive-s)Specifications of components of the pattern in anglebrackets (< >) include linguistic information (root =remove) or conceptual categories (agent, container) or acombination of linguistic and conceptual specifications.Additional information associated with each PC pairdetermines the correspondences between elements of theconceptual structure and constituents of the linguisticstructure: The special "value" indicator designates theassociation of a property of the PC pair with a propertyof one of its constituents, specified by number.
Thus"tense = (value 2 tense)" implies that the tense of thepattern is the tense of the second constituent, the verb.
"cont = (value 5)" indicates that the token unified withthe variable "?cont" in the conceptual template corre-sponds to the fifth constituent, the object of from.
Theabove PC pair can be used by PHRED, depending on theconcept being expressed, to produce the sentence YoushouM remove the files from your directory, or the infini-tive phrase to remove a fi le from the top level directory.The final output is determined by the combination of thisPC pair with the input attributes and one or more order-ing patterns, which embody general inguistic constraintsand constraints on surface order.In addition to the linguistic patterns and associatedconceptual representation, PC pairs contain a set of prop-erties, or attributes, and other information that guidestheir use.
Some of this information, such as "tense =(value 2 tense)" above, is used to determine correspond-ences between a pattern and its constituents.
Otherproperties are used for indexing purposes.
There is also afacility for "escapes,,  or the ability to call a specialprocedure from within the declarative knowledge repre-sentation.
While this facility was often exploited in earlyversions of PHRAN, it is problematic for knowledge basesshared with PHRED.
Procedures called during analysisare seldom useful to the generator or vice versa.
There-fore such procedure calls have seldom been used inPHRED, and an attempt has been made to encode allknowledge in a declarative form that can be used by boththe generator and the analyzer.The "pattern" part of the PC pairs is a list of constitu-ents, where each constituent in a pattern is generallydescribed either as a pattern of speech (p-o-s) or as amember of a descriptive category (e.g., person, physicalobject).
Patterns may also be formed by conjunction anddisjunction of other patterns and may contain specifica-tions of constraints.
For example, the constituent<and root = remove voice = active form = infinitive>is a single-constituent pattern that would generate theinfinitive verb to remove, while<and p-o-s = noun-phrase> <or person physob>>Computational Linguistics, Volume 11, Number 4, October-December 1985 221Paul S. Jacobs PHRED: A Generator for Natural Language Interfacesrepresents a noun-phrase that refers to a person or phys-ical object.Patterns are used to represent lexical entries, deter-miners and particles which refer to nothing, as well asvery specific phrases which refer to particular objects.The pattern<word = the> <word = big> <word = apple>represents the phrase the big apple used to refer to NewYork City.
This phrase can also be produced by thegeneral pattern<p-o-s = article> <p-o-s = np2>when used to refer to an apple.Specialized linguistic constructs are often partiallyfrozen patterns that behave as a particular grammaticalunit.
The phrase kick the bucket behaves as a verb thatconjugates but does not passivize.
It corresponds to thepattern<and p-o-s = verb root = kick><word = the> <word = bucket>which functions as an intransitive verb.Part of the knowledge associated with a pattern-con-cept pair is the correspondence b tween the properties ofthe pattern's constituents and the properties of the entirepattern.
Associated with the kick the bucket patternabove is the knowledge that the person, number, andtense of the pattern correspond to the person, numberand tense of the first constituent, he form of the verbkick.
In generation, this results in the recursive applica-tion of constraints from a pattern to its components: Togenerate a past-tense verb meaning died, the system willoperate recursively on the pattern above to generate apast-tense form of kick.Patterns do not necessarily represent a fixed wordorder.
For example, in<person> <root = tell> <person><word = to> <word = get> <word = lost>the pattern retains its meaning when used in a passiveform or infinitive phrase.
Such patterns are used incombination with ordering patterns, which control thevarious ways in which a pattern may be linguisticallyrealized.
An example of an ordering pattern that could beused in conjunction with the get lost pattern above is thepassive infinitive ordering, used to produce, for example,the man to be told to get lost or the file to be removed fromthe current directory:PATTERN:<and #3 p-o-s = noun-phrase case = objective><and #2 p-o-s = verb form = infinitive voice = passive><<word = by><and #1 p-o-s = noun-phrase case = objective>><<#rest> >PROPERTIES:p-o-s = inf-phrasevoice = passiveforms = (passive-s)The "#2" and "#3" within the ordering pattern indicatethat the constraints on the second and third constituentsof the coordinated pattern are conjoined with the firstand second constituents of the ordering pattern, respec-tively.
The "#rest" indicates where additional constitu-ents are generally inserted.
This information guides thecombination of the ordering pattern with other PC pairs.An extra set of angle brackets is used to mark a constitu-ent that is optional to the pattern, such as the by phrase.The "p-o-s = inf-phrase" property specifies that thepattern produces an infinitive phrase, and the "forms =(passive-s)" property restricts the use of this ordering topatterns which have "passive-s" among their forms.Patterns that have an unspecified word order do nothave a "p-o-s" attribute, and thus do not produce aparticular pattern of speech independently.
These arecombined by PHRED with ordering patterns to allow foridioms or expressions which may appear in various forms,such as bury the hatchet in The hatchet was buried at Appo-mattox.
The same effect could be accomplished withoutordering rules by increasing the number of fixed-word-order patterns combinatorially.
The use of the orderingpatterns, however, has a certain elegance as well as apractical value: it allows the specification of certainspecialized constructs as relations among particularconstituents, regardless of where the constituents appearin the actual output.
In this case, the specialized meaningof telling someone to get lost is effectively represented bythe relationship between the verb tell and its complementto get lost.
This meaning may be realized in a variety offorms; for example, the combination of the get lostpattern with a passive ordering may produce the sentenceJohn was told by Bill to get lost.?
While there are similarities between the ordering rulesused by PHRED and transformational grammar rules,there are some important differences: PHRED assumesno syntactic derivation; rather, the final ordering of apattern of speech is produced by combining a set oflinguistic patterns.
Furthermore, there is no strictsequence in which the patterns must be applied: A givenordering pattern may be chosen either before or after apattern with which it is to be combined.
The combina-222 Computational Linguistics, Volume 11, Number 4, October-December 1985Paul S. Jacobs PHRED: A Generator for Natural Language Interfacestion of ordering patterns is constrained by the inter-actions among the properties of the patterns, instead ofby controlling the order in which they are used.
In thisway PHRED is more flexible than other systems thathandle word order as a final phase of the generationprocess (cf.
Goldman 1975).The pattern-concept air representation falls into aclass of linguistic representations known as featuresystems, including lexical functional grammar (Bresnan1982), functional grammar (Kay 1979) and functionalunification grammar (Kay 1984).
These systems, whichdeveloped in parallel, may be described using a commonnotation, and vary mostly in the way in which they aretypically applied.
Pattern-concept pairs have beenapplied primarily to the problem of representing thespecialized linguistic knowledge that seems necessary touse language as a communicative tool.
This emphasiscauses minor variations to seem important.
For example,most unification grammar implementations require that asyntactic category be among the features, or attributes,of every linguistic pattern.
The omission of this require-ment for pattern-concept airs facilitates the represen-tation of patterns that have a specialized meaning but donot have rigid surface structures.
This is illustrated bythe get lost pattern and by the specialized knowledgeabout borrar and escribe in the UNIX domain.The next section describes how the knowledge basedescribed here is utilized as part of a real-time generationsystem.3 THE GENERATION PROCESSThe production of an utterance in PHRED is a recursiveprocess which can be divided into three phases:?
Fetching is the retrieval of pattern-concept airs fromthe knowledge base.?
Restriction consists of validating a potential pattern-concept pair to confirm that it fulfills a given set ofconstraints and adding new constraints to the pattern.?
I n terpretat ion  is the generation of lexical items thatmatch the constraints of the restricted pattern.The generation algorithm implemented in PHRED is simi-lar to those used in other unification-based systems (cf.McKeown 1982, Appelt 1983).
Because of the expecta-tion that PHRED would serve as part of a real-time inter-face, however, the system was designed to avoid theexpensive unification process.
Thus the fetching phase ofPHRED accomplishes much of the task of checking theconstraints of a pattern against the constraints to besatisfied, a function that could be performed by unifica-tion.
The more time-consuming unification process isapplied only after the fetching phase has produced acandidate pattern.A second important aspect of the PHRED algorithm,also addressed to the problem of avoiding unnecessarycomputation, is the overall strategy for handling alterna-tive patterns.
Once the fetching mechanism has retrieveda pattern, PHRED uses this pattern unless it is found toviolate a constraint.
This is similar to the strategy imple-mented in MUMBLE (McDonald 1980), which alsoavoids comparisons of linguistic structures of comparablevalidity.
Unlike MUMBLE, PHRED does limited back-tracking under some circumstances.
The backtrackingmechanism, however, relies on the fact that the fetchingmechanism generally produces ome useful patterns andthat most constraint violations are due to incorrectselections among ordering patterns.Each of these phases and its role in the generationprocess will now be discussed in further detail.3.1 FETCHINGWhile PHRAN and PHRED use the same knowledgestructures, the way in which these structures are accessedfor the purpose of generation aturally differs from theiraccess by the analyzer.
PHRAN must recognize a set oflexemes as possibly corresponding to a pattern and there-by retrieve an appropriate pattern-concept air from theknowledge base.
PHRED, on the other hand, accessesthe knowledge base by fetching pattern-concept airswhose template fits the concept and constraints to beexpressed.Because fetching can be a time-consuming part of thegeneration process, it is important for the fetching mech-anism to operate efficiently, but also to produce onlythose PC pairs likely to be useful.
For this purpose,PHRED uses a hashing scheme designed to produce anordering, or stream, of candidate patterns with a mini-mum of computation.
Specifically, it performs somequick computation to select a sequence of PC pairs thatmight be of help in constructing a particular utterance.These pairs are then considered as PHRED continues itswork.
As the generator uses the first available appropri-ate utterance rather than evaluate all potential candi-dates, the ordering of this stream influences the choiceprocess as well as the number of patterns ultimatelyconsidered.The implementation of PHRED permits conceptualattributes to influence the search of linguistic alterna-tives, but separates this process from other aspects oflanguage planning.
High-level text goals are not includedin the knowledge structures that influence the fetchingprocess.
In this regard, the system within which PHREDoperates does not promote the desirable interactionamong text planning and structural choices, as suggestedby Appelt (1982) and Danlos (1984).
Higher-level plan-ning in the UNIX Consultant, for modularity, isperformed by a separable planning component.The role of fetching in PHRED is to provide access tothe pattern-concept airs in the knowledge base.
Theinput to the fetching mechanism is a set of constraintsand conceptual attributes.
Using this input as a guide,the fetching mechanism chooses PC pairs that serve asbuilding blocks for the language produced.
The patterncomponents of these PC pairs may include generalComputational Linguistics, Volume 1 I, Number 4, October-December 1985 223Paul S. Jacobs PHRED: A Generator for Natural Language Interfacespatterns and ordering patterns as well as specializedphrases and lexical choices.In producing the phrase the fi le f i lename to be removedfrom the current directory, the fetching stage is given thefollowing input:p-o-s = inf-phrasevoice = passiveconcept = (state-change (object filet)(state-name location)(from (inside-of (object current-directory)))(to (not (concept (inside-of (object current-directory))))))From this input, the fetching mechanism ust retrievethe remove pattern shown earlier as well as the orderingpatterns necessary to produce a passive infinitive phrase.The design of the hashing scheme that accomplishesthis retrieval is based on the following reasoning: Theinput to the fetching mechanism may be described atleast in part by a set of conceptual and linguistic proper-ties, as may the pattern-concept airs in the data base.The process of restriction, described in section 3.2, reliesheavily on matching these two sets of properties.
Thisprocess may therefore be expedited by computing anaddress in memory that "points" to PC pairs with aparticular set of attributes.
Since there are combina-torially many such sets, there must be (1) a large numberof addresses, or "buckets", and (2) an effective means ofselecting which sets of " important" properties to use incomputing each address.The selection of " important" properties is determinedas follows: All conceptual attributes, including thoseincluded within the concept part of the input, are consid-ered important, and the linguistic attributes used for eachp-o-s type are specified in the knowledge base.
Thefetching mechanism first searches buckets found throughlarge sets of attributes, then buckets that correspond tosmaller sets of attributes.
The idea of this process is toconsider first the PC pairs that most closely fit the inputto the fetching mechanism.
Since a hash into an emptybucket takes very little time, there is no great loss of timeefficiency in using a fairly large number of hashes.Although the access to a PC pair through multiple buck-ets requires ome additional space, this space is negligiblecompared to the size of the knowledge structures them-selves.The fetching component of PHRED, like the otherparts of the system, is geared towards simplicity anduniformity.
In spite of some of the differences among,for example, the selection of a verb, the choice of a refer-ring expression and the selection of an article that agreeswith its head noun, the same method is used for fetchingin all three cases.
The same hashing scheme is employedalso to retrieve ordering patterns from the knowledgebase.
Such orderings can be effectively retrieved fromtheir attributes in the same manner that any other PCpair is fetched.
Thus, while the nature of the knowledgecontained in the attributes of a lexical structure is argu-ably different from the knowledge within an ordering PCpair, these different ypes of knowledge may be accessedthrough the same mechanism.
The principle behind thisuniformity is that the level of specificity of the knowledgerequired to realize particular concepts and constraintcannot be predetermined; thus general and specificknowledge should be accessed in the same fashion.The main loop of PHRED passes to the fetchingcomponent the set of constraints a PC pair must satisfy.Typically, if there is a specific phrase, structural formulaor other pattern that directly satisfies these constraints, itwill appear in the stream before more general patterns.A pattern of unfixed word order will generally appear inthe stream before an ordering pattern, because the order-ing patterns tend to have few or no conceptual attributes.Most often, the unfixed pattern is chosen based on theconcept passed to the fetching mechanism, while theordering pattern is chosen to select an ordering thatproduces the appropriate pattern-of-speech.
The mannerin which these patterns are combined is discussed insection 3.2.
The fetching mechanism is repeatedly calledto return patterns from the stream until all possibleconstraints are satisfied.
For example, to produce thephrase ... not to remove the file, a negative ordering,infinitive, and remove pattern must all be fetched beforethe phrase can be restricted.The construction of hash keys based on successivelysmaller sets of attributes assures that the PC pairs whoseconcept most closely matches the input concept will beconsidered first.
The fetching mechanism produces astream of pattern-concept airs which are returned oneat a time as they are requested by the generator.
Therest of the program is insulated from the retrieval proc-ess.
This way, some of the hashing computation can bepostponed until it is required.In the case of the remove xample given above, the PCpair is indexed according to a combination of the seman-tic attributes "state-change", "location", "inside-of", and"not-inside-of".
This combination is used at the time thePC pair is read in to determine which buckets shouldinclude the PC pair.
The indexing mechanism ignoresvariables (e.g., "?actor").
During generation, a bucketindicating this PC pair will be found, based on the samesemantic attributes.
Some empty buckets, based ondifferent combinations of attributes, will be searchedalso.
A bucket including the passive infinitive orderingpattern is found by using the p-o-s and voice attributes.224 Computational Linguistics, Volume l 1, Number 4, October-December 1985Paul S. Jacobs PHRED: A Generator for Natural Language InterfacesBuckets that correspond to more complete sets ofattributes are searched first.
For example, if the "delete"pattern were constrained to be used only for the deletionof files, it would be retrieved before the remove PC pairbecause the bucket identified by the conjunction of the"file" attribute of filel with the other semantic attributesof the concept is searched first.A simple pattern, such as the word the ,  does not reallyhave a concept associated with it, and thus is indexedaccording to sets of its linguistic attributes only: A searchfor a definite article would find a bucket based on theproperties "p-o-s = article" and "ref = def" and wouldthereby ield the pattern for "the".The fetching component of PHRED constitutes about10K bytes of object code, one tenth of the total program.A profile of PHRED shows that more than half of theCPU time consumed by the generator is spent in thefetching process.
Earlier versions of the program, whichdid no ordering of candidate patterns in the fetchingphases, spent less time fetching but more time overall.When the fetching mechanism retrieves a patternwhich has the appropriate "p-o-s" attribute, control ispassed to the restriction phase.
This phase is consideredbelow.3.2 RESTRICTIONEach time a candidate pattern is returned from thestream by the fetching mechanism, it is passed to therestriction phase, along with any other unfixed-orderpatterns which have been retrieved.
The restrictionmechanism creates an instance of the pattern, addingnew constraints to the pattern constituents while verify-ing that the PC pair meets the constraints given.
Thereare three main aspects of this process:?
unification of the variables within the PC pair's concep-tual template and its associated properties with thetarget concept and properties,?
elaboration of the pattern constituents to include prop-erties from corresponding properties in the pattern indi-cated by the "value" marker, and?
combination of the properties of constituents among thepattern and ordering patterns.The following is an example of an instance of theremove PC pair given earlier, after restriction:PATTERN:<and object concept = filel p-o-s = noun-phrase case = objective><and root = remove form :- infinitive voice = passive><<word = by><and agent concept = userl case = objective>><<word = from><and container concept = directoryl case = objective>>CONCEPT:( s ta te -change  (object  f i le l )(state-name location)(from (inside-of (object directory 1 )))(to (not (concept (inside-of (object directoryl))))))PROPERTIES:p-o-s = inf-phrasetense = (value 2 tense)rein-object = fileleont = directorylforms = (passive-s)This PC pair is the product of applying the restrictionprocess twice in succession, once to the passive infinitiveordering and once to the remove pattern.
Unification hasoccurred to bind the variables "?cont" and "?rem-object".
Elaboration has added the tokens bound tothese variables to the individual constituents.
Combina-tion of the remove pattern with the passive infinitiveordering has produced a pattern whose constituents arespecified by the conglomeration f constraints of the PCpairs used.Any of these three aspects of the restriction phasemay result in failure.
In the above example, unificationwould fail in an attempt o bind the multiple occurrencesof "?cont" to different okens, or if some variable bind-ing violated an input constraint.
Elaboration results infailure if a property to be added to a constituent does notfit the other properties.
For example, if "directoryl" inthe example is not a container, the pattern would bejudged inappropriate.
Combination could likewise resultin failure if the constraints from the ordering rule wereincompatible with those from the remove pattern, forexample, if it had no passive form.Properties marked by "value" in the PC pair are treat-ed as variables and unified along with the other proper-ties.
If these variables remain unbound throughout therestriction process, however, the pattern retains the prop-erty with its "value" marker.
This is necessary for futurestages of the production process to obtain the propertyon demand.
For example, a noun-phrase pattern inSpanish, where there is gender agreement between thesubject of a passive infinitive phrase and the past partici-ple, maintains the "gender = (value 2)" property toComputational Linguistics, Volume 1 I, Number 4, October-December 1985 225Paul S. Jacobs PHRED: A Generator for Natural Language Interfacesreflect that the gender of the NP is the gender of its NP2This property is not determined until the head noun ischosen, after which it can be retrieved through the NP ifnecessary.Restriction uses about 60% of the code of the genera-tor and most of the CPU time not consumed by fetching.The bulk of this time is spent doing repeated unificationwhen a large number of patterns are required.
Becausethe nature of the knowledge structures in the systemseems to require such unification, the fetching mech-anism, as described in section 3.1, is designed to preventthe consideration of patterns which might lead to failureduring unification.The next step in the generation process, afterrestriction, is to go through each constituent of therestricted pattern and invoke the generation process onthe individual constituents, if necessary.
This phase isdescribed in the next section.3.3 INTERPRETATIONThe third major phase in PHRED is interpretation, theapplication of constraints to a restricted pattern toproduce a surface structure suitable for output.The process of interpreting a given constituent mayhave three possible results:1) the successful completion of an element of surfacestructure,2) the recursive application of the fetch-restrict-inter-pret sequence on the given constituent, or3) failure, if the generator is unable to produce a speci-fied pattern of speech.The first result occurs when the pattern provides acomplete specification of a word or words for output,such as the big apple, which is specified by the pattern<word = the> <word = big> <word = apple>The second case occurs if a constituent contains a moregeneral set of constraints, for example,<and p-o-s = verb root = remove tense = past>which requires another recurrence of the fetch-restrict-interpret sequence.In the third result, where no output produces thedesired pattern of speech subject o the constraints givenby the uninterpreted pattern, the system must back up toselect an alternate pattern.
To be efficient, the systemmust utilize as much as possible the patterns alreadyselected.
If the constituent that fails in the interpretationphase is optional to the pattern to which it belongs, it isdeleted.
Otherwise, failure results in backing up to thelevel where the failed patter~ was fetched, getting anoth-er pattern from the stream, and attempting restriction ofthe new pattern.
Most often this new pattern will be anordering rule, and most of the failed pattern will be usedin the restriction of the ordering pattern.
A simple caseof this is where the generator fails to produce a patternof speech for the subject of a sentence and instead gener-ates a passive sentence.
In this case the restricted versionof the PC pair as it was before the combination with theactive ordering pattern is backed up on a stack so thatthe passive ordering can be tried.Failure during interpretation is rare, and generallyresults from an insufficiency of the knowledge base inproducing a reference.
While a better model of thegeneration process might allow for the anticipation ofsuch failures, such anticipation would in general requiredecisions considerably more complex than those made byPHRED.
This complexity would be underutilized in lightof the infrequency with which back-up is necessary.Although the back-up algorithm employed in these fail-ures is time-consuming, it increases the likelihood thatsome successful utterance will be produced.The agreement of constituents within a pattern isassured during the interpretation phase.
A constituentthat must agree with another has a form such as thefollowing:<and p-o-s = verb root = remove tense = pastnumber = (matches 1) person = (matches 1)>This specifies a past tense form of remove that matchesits subject in person and number.
Interpretation resultsin the substitution of properties from the matchedconstituent to produce, for example,<and p-o-s = verb root = remove tense = pastnumber = singular person = third>In English there are only limited forms of agreement.There are few examples where it passes from right to left,such as in subject-aux inversion where the verb agreeswith a subject hat follows it.
In other languages agree-ment within a pattern may be much more complex.
Inthe Spanish exampleJuan les habld a sus amigos('John spoke to his friends'), the indirect pronoun les,which precedes the verb, agrees with the indirect object,which follows the verb.In all cases PHRED can ensure proper agreement ifsome order of interpreting the constituents allows thecorrect application of constraints.
The surface order ofthe constituents i the default order for their interpreta-tion, but interpretation of a constituent where necessaryis done only after that of constituents with which it mustagree.
In English, nouns within noun phrases are inter-preted before their attached determiners, because thedeterminer must sometime agree in number with the headnoun.
In more inflected languages verbs must generallybe produced last.Anaphora are handled specially during interpretation.In the case of constituents for which PHRED has alreadyproduced references, the generator applies a set ofheuristics that will remove the constituent entirely if it isnot necessary to the utterance, pronominalize, or regen-erate the entire constituent.
The principal heuristics are226 Computational Linguistics, Volume 11, Number 4, October-December 1985Paul S. Jacobs PHRED: A Generator for Natural Language Interfaces1) If the anaphoric constituent is optional, remove itfrom the current pattern, and2) pronominalize other anaphoric onstituents whereverpossible.There are of course many cases in which an alternativereference would be preferable, but the method used byPHRED is generally effective in producing coherent refer-ences.
The heuristics lead, for example, to theproduction of Mary was tom by John that he wanted thebook to be given to him rather than Mary was tom by Johnthat John wanted the book to be given to John by Mary.
Itis apparent that these heuristics would break down in thegeneration of longer texts, a task for which neitherPHRED nor the PHRAN/PHRED knowledge base wasdesigned.The interpretation mechanism occupies about 20% ofthe code of the generator, and requires a small amount oftime relative to the rest of the program.This discussion has described the overall design ofPHRED and presented some details of its implementation.The next section traces an example of the generationprocess and discusses the role of each of the three phasesconsidered here.4 A DETAILED EXAMPLEBelow is a trace of PHRED while generating the sentence,Typing "'rm filename" causes the file filename to beremoved from the current directory.
This is a fairly simpleexample, but demonstrates well the process used byPHRED to produce an output.
At each step in the trace,the generator prints out which phase it is going through,and what the input to that phase is.
Ellipses (...) areused to indicate information that has been omittedbecause it reduplicates other material.
As earlier in thetext, symbols preceded by a question mark indicate vari-ables, such as "?actor".
Symbols surrounded by aster-isks, e.g., "*user*", are tokens that have specialprocessing implications in the UNIX Consultant.
Otherspecial tokens are indicated by atoms followed by numer-als, such as "f i lel".The input to the generator is the conceptwhich the UNIX consultant has chosen toexpress, in response to a question aboutremoving files in UNIX.
The conceptrepresents UC's knowledge that using the'rm' command is an established plan (here"planfor") for deleting a file (here"filel"):***FETCHING***concept =(planfor(result(state-change (object filel)(state-name location)(from (inside-of (object current-directory)))(to (not (concept (inside-of (object current-directory)))))))(method(mtrans (actor *user*)(object(command (name rm)(args (filename))))(from *user*)(to *UNIX*))))Computational Linguistics, Volume 11, Number 4, October-December 1985 227Paul S. Jacobs PHRED: A Generator for Natural Language InterfacesThere are a number of patterns that couldpotentially be used to express the conceptthat an action is a plan for something.Two of the possible constructs in thePHRED knowledge base are an imperative,e.g., Use "rm" to delete a fi le, and a futureor present ense declarative, e.g., "Rm" willdelete a file.
In this case, PHRED selectsanother pattern with the verb cause.
Thestream of candidate patterns includes firstthe constructs found in a bucket reachedthrough the "planfor" concept, followedby other sentence-level PC pairs.
In exam-ples such as this one, where PHRED'sfetching mechanism reaches severalconstructs through the same bucket, thegenerator selects a random order in thestream for the alternatives.
For this exam-ple, therefore, a random selection ultimate-ly determines the form of the output.After the selection is made, the restrictionprocess is applied to the first pattern.
***RESTRICTING***PATTERN:<p-o-s = act-phrase><and p-o-s = verb root = cause><and p-o-s = inf-phrase voice = passive>CONCEPT:(planfor (result ?result) (method ?method))PROPERTIES:method = (value 1)result = (value 3)p-o-s = sentenceform = (declarative active)tense = (value 2)The restriction process here results in theaddition of the appropriate conceptualcomponents to the constituents of therestricted pattern.
The conceptual contentof the first and third constituents, whichwill produce a gerund phrase and passiveinfinitive phrase, respectively, have beenadded.
This results from the unification ofthe variables "method" and "result" in thelist of properties above and the elaborationof the constituents pecified by the terms"(value 1)" and "(value 3)" attached tothese variables.
Combination with anactive sentence pattern adds the subject-verb agreement, and the restricted patternenters the interpretation phase:***INTERPRETING***PATTERN:<and p-o-s = act-phraseconcept =(mtrans (actor *user*)(object(command (name rm) (args (fitename))))(from *user*)(to *UNIX*))><and p-o-s = verb root = causeperson = (matches 1) number = (matches 1)><and p-o-s = inf-phrasevoice = passiveconcept = (state-change (object f i lel)(state-name location)(from (inside-of (object current-directory)))(to (not (concept (inside-of (object current-directory))))))>PROPERTIES:tense = value 2form = (declarative active)p-o-s = sentenceresult = value 3method = value 1concept = ...method .
.
.
.result = ...At this point the generator has successfullyapplied the input concept to restrict thesurface structure chosen, and recursivelyinterprets this structure, starting with thegerund phrase:***INTERPRETING***PATTERN:<and p-o-s = act-phraseconcept = (mtrans (actor *user*)(object(command (name rm) (args (filename))))(from *user*)(to *UNIX*))>228 Computational Linguistics, Volume 11, Number 4, October-December 1985Paul S. Jacobs PHRED: A Generator for Natural Language InterfacesInterpreting a simple constituent results ina reinvocation of the fetch-restrict-inter-pret sequence on that constituent:***FETCHING***concept = (mtrans (actor*user*)(object(command (name rm) (args (filename))))(from *user*)(to *UNIX*)))p-o-s = act-phraseSince there is no pattern that directlygenerates a gerund phrase (here "p-o-s =act-phrase") with the given concept, thefetch above yields an ordering patternwhich can be used for combination withother patterns to produce the final phrase.Thus another fetch is performed beforeany restriction is done, this time withoutthe "p-o-s" attribute.
***FETCHING***concept = (mtrans ... )PHRED searches for a way of expressingthe "mtrans", or communicative transfer,of the 'rm' command to the operatingsystem.
The hashing mechanism givespreference to the terms for technical trans-mission of commands, because theconcepts associated with these terms matchthe input concept more closely, but a prob-lematic pattern still results:***RESTRICTING***PATTERN:<person> <root do> <command>CONCEPT:(mtrans (actor ?actor)(object ?command)(from 7actor)(to *UNIX*))PROPERTIES:command = (command (name ?name) (args nil))name = (value 3 command-name)This pattern fails during unificationbecause it requires that the command nothave arguments, something which thefetching mechanism failed to detectbecause the bucket that includes thepattern is found by considering less specif-ic attributes.
This failure is illustrative of aclass of examples where PHRED's hashingmechanism, in short-cutting the complexityof unification, picks the wrong pattern.With the gerund ordering pattern stillbeing saved, the fetching mechanism iscalled again for another candidate.
Thepattern returned here by the fetchingmechanism is the next one in the streamafter the failed "do" pattern.
This newpattern, with the verb type, is then passedthrough restriction:***RESTRICTING***PATFERN:<person> <root = type> <command-spec>CONCEPT:(mtrans (actor ?actor)(object ?command)(from ?actor)(to *UNIX*))PROPERTIES:command = (value 3)Unification of the variables in the abovePC-pair with those in the input concept isfollowed by elaboration of the constituentsand combination with the gerund orderingpattern.
This yields the following result:***RESTRICTING***PATTERN:<and root = type form = progressive><and command-specconcept = (command (name rm) (args (filename)))>PROPERTIES:p-o-s = act-phraseComputational Linguistics, Volume 11, Number 4, October-December 1985 229Paul S. Jacobs PHRED: A Generator for Natural Language InterfacesThe combination of the "type" patternwith the gerund ordering satisfies thenecessary constraints, producing a two-constituent pattern which then proceeds tothe interpretation phase:***INTERPRETING***PATTERN:<and p-o-s = verb root = type form = progressive><and command-specconcept = (command (name rm) (args ( f i lename)))>PHRED recursively invokes the interpreta-tion procedure on each of the two constitu-ents, starting with the progressive verb:***INTERPRETING***PATTERN:<and p-o-s = verb root = type form = progressive>***FETCHING***p-o-s = verb form = progressive root = typeThis fetch uses a hash on the root andform of the verb given to retrieve theprogressive form typing, whose propertiesunify trivially with the given constraints:***RESTRICTING***PATTERN:<word  = typing>PROPERTIES:form = progressive p-o-s ---- verb***INTERPRETING***PA'I~ERN:<word = typing>PROPERTIES:root = type p-o-s = verbroot = typeform = progressiveThe word typing and its properties are nowcompletely specified, so no furtherrestriction is needed.
The next constituentin the gerund phrase, the noun phrase thatdescribes the command 'rm', is thus passedto the interpretation mechanism:***INTERPRETING***PATTERN:<p-o-s  = noun-phrase command-specconcept = (command (name rm) (args ( f i lename)))>As usual, interpretation first results in afetch:***FETCHING***concept = (command (name rm) (args (f i lename)))p-o-s = noun-phraseThe pattern selected for the command is aspecific formula for expressing commandsto UNIX, the command name following byits arguments, in quotes:***RESTRICTING***PATTERN:<word  = I ' \ ]  > <command> <p-o-s  = args> <word = I ' l  >PROPERTIES:p-o-s = noun-phraseconcept = (command (name ?command) (args ?args))args -- (value 3 name)command = (value 2 command-name))The formula for producing 'rm fi lename' isstraightforward, and results in very littleadditional work by the generator:***INTERPRETING***PATI'ERN:<word  = I ' l  ><and command command-name = rm><and p-o-s = args name -- f i lename><word= I ' \ [>PROPERTIES:p-o-s = noun-phrase230 Computational Linguistics, Volume 11, Number 4, October-December 1985Paul S. Jacobs PHRED: A Generator for Natural Language Interfaces***INTERPRETING***PAT'FERN:<word  = I'1 >***INTERPRETING***PA'ITERN:<command command-name = rm>***FETCHING***command-name = rm***RESTRICTING***PATTERN:<word  = rm>***INTERPRETING***PATTERN:<word  = rm>***INTERPRETING***PATTERN:<and p-o -s  = args name = ( f i l ename)>***INTERPRETING***PATTERN:<word  = I'1 >Hav ing  completed  the c lause Typing "rmfilename" the generator  now returns  to theh ighest  level of  the sur face st ructure tof inish the sentence.
The  next  const i tuentin this sur face structure is the con jugatedform of the verb cause:***INTERPRETING***PATYERN:<p-o -s  = verb root = cause person  = (matches  1) number  = (matches  1 )>The interpretat ion mechan ism f inds theperson and number  of  the first const i tuentof the sur face structure.
Since this is as ingular gerund phrase,  it has  the thirdperson and singular propert ies.
These  arethen  used in fetch ing the appropr iate  verbform:***FETCHING***p -o -s  = verb root = cause fo rm = basic person  = third number  = s ingularAs with typing, hash ing  results in theretrieval of  the correct verb,  and  restr ict ionis a s imple process:***RESTRICTING***PATYERN:<word  = causes>PROPERTIES:tense = present  root = cause***INTERPRETING***PATTERN:<word  = causes>PROPERTIES:person  = third number  = s ingular  fo rm = basicComputational Linguistics, Volume 11, Number 4, October-December 1985 231Paul S. Jacobs PHRED: A Generator for Natural Language InterfacesHaving completed the specification of theverb causes, PHRED continues its depth-first interpretation with the third and finaltop-level constituent, he infinitive phrase:***INTERPRETING***PATTERN:<and p-o-s = inf-phraseconcept =(state-change***FETCHING***concept = (state-change ... )p-o-s = inf-phrasevoice = passive***FETCHING***voice = passive(object f i led(state-name location)(from (inside-of (object current-directory)))(to (not (concept (inside-of (object current-d i rectory)) ) ) ) )>The first fetch in this case again brings theordering pattern, the second the "remove"pattern.
The restriction process is appliedfirst to the " remove"  pattern:***RESTRICTING***PATTERN:<person> <root  = remove> <physob> <<word  = f rom> <conta iner>>CONCEPT:(state-change (object ?rem-object))(state-name location)(from (inside-of (object ?container)))(to (not (concept (inside-of (object ?container)))) ) )PROPERTIES:rem-object = (value 3)At this point, the generator is producing anexpression for the passive infinitive phrasefollowing the verb causes.
After unifica-tion and elaboration of the pattern above,the pattern is then combined with theordering pattern for the passive infinitivephrase, a somewhat more specializedpattern than is necessary for theconstruction of such phrases.
Therestriction process results in the determi-nation of the final ordering of the constitu-ents, and another ound of restriction:***RESTRICTING***PATTERN:<and physob concept = f i le l><and p-o-s = verb root = be form = infinit ive><and p-o-s = verb root = remove form = perfeet ive><<word  = f rom><and container concept = current -d i rectory>>PROPERTIES:subject = ?inf-phrase-subjectvoice = passiveobject -- ?inf-phrase-objectp-o-s = inf-phraseform = (passive)Having completed the restriction of theinfinitive, PHRED passes control to theinterpretation mechanism, which thenproceeds to generate ach part of the infin-itive phrase pattern:***INTERPRETING***PATTERN:<and physob concept=f i le l><and p-o-s = verb root = be form = infinit ive><and p-o-s = verb root = remove form = perfect ive><<word  = f rom><and container concept = current -d i rectory>>PROPERTIES:p-o-s = inf-phraseconcept = ...232 Computational Linguistics, Volume 11, Number 4, October-December 1985Paul S. Jacobs PHRED: A Generator for Natural Language InterfacesAs the interpretat ion starts with the firstconst i tuent of the infinitive phrase, PHREDnow must produce a reference to the speci-f ied file.
To do this, it expands the token" f i l e l "  to get the necessary informat ionfrom its attributes.
***INTERPRETING***PATTERN:<and physob concept  = (file (name (f i lename)))PROPERTIES:concept  = ...p-o-s  = noun-phrase***FETCHING***p-o-s  = noun-phraseconcept  = ...PHRED uses a structural formula, directlyassociated by a PC pair with the concept  ofa file, to refer to the hypothet ical  file:***RESTRICTING***PATTERN:<word  = the> <word  = f i le> <name>CONCEPT:(file (name (f i lename)))PROPERTIES:ref = defp-o-s  = noun-phraseperson = thirdnumber  = singularname = (value 3 name)This pattern is the default  reference forfiles, which is superseded when more infor-mat ion about a given file must beconveyed.
The noun phrase now reachesthe interpretat ion phase, resulting in thesimple verif ication that its const i tuents arecomplete:***INTERPRETING***PATTERN:<word  = the> <word  = f i le> <and p-o-s  = args name = ( f i lename)>PROPERTIES:concept  .
.
.
.
p -o-s  = noun-phrase ref = defHaving completed the reference,  thesystem now continues with the infinitivephrase.
The second const i tuent of  theinfinitive phrase is the infinitive of the verbbe:***INTERPRETING***PATTERN:<and p-o-s  = verb root = be form = inf init ive>As with the other verbs, fetching yields theappropriate form:***FETCHING***p-o-s  = verb root = be form = infinitive***RESTRICTING***PATTERN:<word  = to> <word  = be>PROPERTIES:p-o-s  = verb root = be form = infinitive***INTERPRETING***PATTERN:<word  = to> <word  = be>PROPERTIES:voice = activeComputational Linguistics, Volume 11, Number 4, October-December 1985 233Paul S. Jacobs PHRED: A Generator for Natural Language InterfacesThe third constituent of the passive infini-tive phrase is the past participle of the verbremove, which is interpreted next.
Thisprocess similarly results in the completedverb form:***INTERPRETING***PATTERN:<p-o-s  = verb root = remove form = perfective>***FETCHING***p-o-s = verbroot = removeform = perfective***INTERPRETING***PATTERN:<removed>PROPERTIES:o o .The final constituent of the infinitivephrase and of the sentence is the optionalprepositional phrase specifying from wherethe file is being deleted.
The extra anglebrackets in the pattern below indicate tothe interpretation mechanism that if it failsto produce a reference or if the referencein the prepositional phrase is anaphoric,the entire constituent may be omitted:***INTERPRETING***PATTERN:<<word  = from> <and container concept = current-directory>>The first constituent of the prepositionalphrase, the word from, is alreadycomplete:***INTERPRETING***PATTERN:<word = f rom>The second constituent, the referent forthe current -d i rectory ,  is interpreted next:***INTERPRETING***PATTERN:<and p-o-s = noun-phrase container concept = current-directory>***FETCHING***p-o-s = noun-phrase concept = current-directory ref = defUnlike the previous noun phrase, there isno specific structural formula for referringto the current directory.
PHRED thus usesa general noun phrase pattern:***RESTRICTING***PATTERN:<and p-o-s = article<and p-o-s = nounPROPERTIES:p-o-s = noun-phraseperson = thirdnumber = singularconcept = (value 2)number = (value 2 number)person = (value 2 person)consonance = (matches 2) number = (matches 2)>number = singular>234 Computational Linguistics, Volume 1 I, Number 4, October-December 1985Paul S. Jacobs PHRED: A Generator for Natural Language Interfaces"Consonance" here is the property used tohandle the distinction between a and an,which depends on the choice of noun.
"Hard" consonance is used for nouns oradjectives beginning with a consonantsound, and "soft" for those beginning witha vowel sound.
For definite articles, theproperty is not used.Elaboration of the pattern above resultsin a two-constituent pattern to be inter-preted, the second constituent of whichmust refer to the current-directoryconcept.
***INTERPRETING***PATTERN:<and p-o-s = article consonance = (matches 2)number = (matches 2) ref = def><and p-o-s = noun concept = current-directorynumber = singular>PROPERTIES:Properties:While there is no special noun phrase forreferring to the current-directory con- cept,there are special noun constructs.
PHREDselects randomly between two ways ofreferring to this concept, current directoryand working directory.
***INTERPRETING***PATTERN:<and p-o-s = noun concept = current-directory number = singular>***FETCHING***p-o-s = noun number = singular person = third concept = current-directoryThe reference selected for the directory isthe compound noun current directory.This is interpreted before the article withinthe noun phrase, since articles areproduced after head nouns to ensureagreement:***RESTRICTING***PATTERN:<word = current> <word = directory>PROPERTIES:~oncept .
.
.
.
consonance = hard person = third***INTERPRETING***PATTERN:<word = current> <word = directory>PROPERTIES:Properties:number = singular p-o-s = nounThe interpretation mechanism judges thenoun compound to be completed, and thefinal determiner is then interpreted:***INTERPRETING***PA'ITERN:<and p-o-s = article ref =def  number = singular***INTERPRETING***PATTERN:<word = the>PROPERTIES:consonance = hard>After the final part of the surface structureis complete, a walk through the surfacestructure tree is used to produce the finaloutput:Typing 'rm filename' causes the file filename to be removed from the current directory.5 COMPARISON WITH OTHER RESEARCHPHRED differs in design f rom most  other  naturallanguage generat ion systems because of  its concept ion  asa generator  to accompany PHRAN as part of  a languageinterface.
The appl icat ion of special ized phrasal  know-ledge seems to be an ef fect ive means  of  satisfying thedemands  on a generator  in a domain  such as that of theUNIX Consul tant .
The use of  a declarat ive knowledgebase shared between analyzer  and generator  has helpedto make the system pract ical  and easily extensible.PHRED's  simplicity and the speed with which it appliesthis knowledge  have made it wel l -sui ted for use in real-t ime natural  language interfaces.Pr imari ly for  histor ical  reasons,  most  research incomputat iona l  l inguistics has focused on rules govern ingsyntax.
In language analysis, it is o f ten pract ical  todesign systems whose  pr incipal  funct ion  is to apply andComputational Linguistics, Volume I I, Number 4, October-December 1985 235Paul S. Jacobs PHRED: A Generator for Natural Language Interfacestest such rules by determining the grammaticality of theinput.
Such systems generally use compositional rules, ifany, for determining the semantic ontent of the input.The task of language generation, however, is inextricablytied to the appropriateness of the linguistic output as wellas to its grammaticality.
Because of this, work in gener-ation focuses not on the representation of core syntacticrules but on the means by which a choice is made amongsyntactic and lexical constructs.
Compositional rulesgenerally fail to constrain this choice adequately.
Forthis reason systems which are designed for languagegeneration have often employed either special choicesystems of the type found in systemic grammar (Halliday1968), or have had pattern-based grammars of the typefound in PHRAN/PHRED and in unification grammar(Kay 1984), which require a sophisticated mechanism fordealing with the interaction of the patterns.
ThusPHRAN/PHRED is the first interface in a naturallanguage-based artificial intelligence system to use anentirely common representation and knowledge base forlinguistic knowledge employed in both analysis andproduction.The declarative pattern-concept air representation,its theory, and its role in PHRED, are considered in thediscussion that follows.5.1 THE PC PAIRThe pattern-concept air representation differs on thesurface from traditional grammars because the grammaris embedded implicitly in the knowledge structures.These knowledge structures often require the combina-tion of a number of patterns to produce an utterance.
Inthis way the representation is comparable to unificationgrammar, which contains patterns associated with func-tional descriptions.
The restriction process described inthis paper is similar to the unification procedure in TELE-GRAM (Appelt 1983), which employs a unification gram-mar.One difference between PHRED's knowledge struc-tures and those in unification grammar is that conceptualattributes of the PC pairs, as well as functional attributes,or properties, are used to constrain a pattern.
Unifica-tion grammar, like most feature systems, generally fostersthe separation of conceptual and functional components.Another distinction is that, in unification grammar, thesyntactic ategory is given special status; in pattern-con-cept pairs it is treated as an attribute, and does notnecessarily have to be specified for every pattern.
This isimportant for patterns that can be used in conjunctionwith many different orderings to produce a variety ofsyntactic structures.A general difference between the PC pair and otherrepresentations lies in the level of specificity of thepatterns.
The PC pair makes it easy to encode special-ized phrases and constructs to be used by the generator.It allows the generator to apply the same mechanisms toboth general and specific constructions, and to choose PCpairs based on their conceptual attributes.
This is,naturally, a distinction based on how the pattern-conceptpairs are used rather than on their basic structure.
Thesame result might well be achieved within the basicframework of lexical functional grammar or unificationgrammar.Semantic grammar (Burton 1976) is another epresen-tation scheme which, like that of PHRED, facilitates theuse of semantic attributes in language processing.
Thereare versions of such grammars that allow for varyingdegrees of interaction between syntax, semantics, andpragmatics.
PHRED differs from true semantic grammarsprimarily in that it facilitates the interaction of the moregeneral patterns with the more specialized.
Semanticgrammars are often too constrained to be adapted to anew domain.
Many of the knowledge structures inPHRED, by comparison, are general enough so that muchof the linguistic knowledge used within the UNIX domainexisted in the PHRAN/PHRED knowledge base beforeUC was even conceived.The pattern-concept air representation has developedin parallel with research on idiomatic and specialized useof language, done primarily by cognitive linguists.
Simi-lar ideas may be found in a variety of grammatical theo-ries emphasizing the study of levels of linguistic andconceptual knowledge and the relations between them(cf.
Lockwood 1972, Makkai 1972).
The concept ofunits of meaning linked to lexical units is described, forexample, by Pike (1962) and Lamb (1973).Much of the work on specialized language questionsthe cognitive validity of traditional generative theories ofgrammar.
Chafe (1968) identifies certain idioms, such asby and large and all of a sudden, which would be ungram-matical were they not given special status as idiomaticconstructions.
Other expressions, uch as kick the buck-et, are grammatical, but have a meaning that is not deter-mined by any compositional relationship among theircomponents.
Chafe argues that these idiomaticconstructs sufficiently pervade everyday language towarrant an approach to language that handles theseconstructs not as special cases or exceptions but as anintegral part of a language.Becker (1975) presents the idea of the phrasal exiconas a means of handling canned and idiomatic phrases.Becker identifies in particular a range of phrases whichare grammatical and even comprehensible via composi-tional rules, yet which suggest specialized contextualknowledge.
The expression It only hurts when I laughcan theoretically be handled using traditional theories ofgrammar, but treating it as such would be ignoring animportant component of the expression's meaning.
Theexistence of such expressions, which involve eitherpartially or entirely specialized knowledge, has generallybeen treated as of minor importance in computationaltheories of language.
However, a cognitively realisticrepresentation must take into account the role of bothgeneral syntactic knowledge and specialized knowledgeabout particular phrases.236 Computational Linguistics, Volume 11, Number 4, October-December 1985Paul S. Jacobs PHRED: A Generator for Natural Language InterfacesWhile these arguments are directed at developingcognitively valid theories of linguistic representation, thehandling of idiomatic onstructs and of specialized phras-al knowledge has a substantial influence on the robust-ness and efficiency of a system.
If specialized linguisticknowledge is indeed as pervasive as Chafe argues, asystem that deals only with "core" grammatical andproductive constructs will handle but a small portion of alanguage.
A generator working within such a systemwould be severely limited in the range of utterances itcould produce and in its ability to produce an outputappropriate to a given context.
On the other hand, fail-ing to take advantage of linguistic generalizations canintroduce redundancy and possibly inefficiency into theknowledge base.
Robust and efficient language process-ing therefore demands a representation that takes advan-tage of both specialized idiomatic and general syntacticknowledge.
Experience with the UNIX Consultant hassuggested that the interaction of specialized and generallinguistic knowledge is important for a natural anguageinterface.
This interaction is accomplished in PHRED byallowing the generator to combine ordering patterns withpatterns used to relate linguistic constructs to theirparticular meanings.Fillmore (1979) gives arguments for the idea of thestructural formula, a phrase or construction that cannotbe described strictly as the composition of its compo-nents but may still have a certain degree of structuralfreedom.
Fillmore presents "<Time unit> in and <Timeunit> out" as an example of such a formula, manifest inexpressions such as day in and day out and week in andweek out.
More recently, Fillmore and others extend thisidea to a theory of grammatical constructions (cf.
Fill-more, Kay, and O'Connor 1984; Lakoff 1984), focusingon expressions that exhibit certain regularities and obeysome grammatical constraints but whose behavior cannotbe determined by "core" grammar.
Examples of suchexpressions are let alne as in He didn't make first lieuten-ant, let alne general, and the deictic there, as in Theregoes Harry, shootin.g his mouth of f  again Fillmore, Kay,and O'Connor point out the difference between attempt-ing to develop a minimal base of knowledge from which alinguistic competence can be computed, and attempting todevelop a knowledge base that represents how humanlinguistic knowledge is in fact stored.As an example of this distinction, consider the divisiondrawn by Fillmore, Kay, and O'Connor between idiomsof decoding, such as kick the bucket, and spill the beans,and idioms of encoding only, such as answer the door, andwide awake.
All of these are grammatical idioms; that is,they have a syntactic structure and word order compat-ible with core grammatical constructs.
The idioms ofdecoding, however, require specialized knowledge bothfor the comprehension f their meaning and their appro-priate use.
The idioms of encoding could possibly becomprehended using knowledge about their componentsonly, but specialized knowledge is required to predicttheir use.
Whether this specialized knowledge is to bestored in a given representational model thereforedepends on what problem the model is addressing:competence, comprehension, or production.
We havethus distinguished three potential classes of linguisticknowledge:1) the knowledge required to determine the membershipof a given phrase or sentence in a language,2) the knowledge necessary to determine the meaning ofa phrase, and3) the knowledge that determines appropriate use of thephrase.Computational linguistics has emphasized the first class,and thus many systems have attempted to define thesecond and third knowledge classes by adding auxiliaryknowledge to a grammar for a linguistic competence.The PHRAN/PHRED pattern-concept pair represen-tation, on the other hand, attempts to subsume the threeclasses into a single framework.
Since the goal ofPHRAN and PHRED is proficient analysis and use oflanguage, the distinction between grammatical nd extra-grammatical idioms becomes of minor importance.
Itseems counterintuitive to treat phrases such as all of  asudden as of a different nature from kick the bucketsimply because the former is extragrammatical.
Further,the emphasis on the ability to compute a linguisticcompetence using a small set of rules is diminished.
Ifspecialized knowledge about a given phrase is requiredfor its appropriate use, there is no reason why this know-ledge cannot also be used for its syntactic analysis, evenif, in a system that performs analysis alone, such know-ledge would be redundant.Consider the phrase answer the door.
A pure syntacticanalyzer would require no special knowledge to recog-nize the construct as a valid verb phrase.
It is possible aswell that the meaning of the phrase could be determinedbased on the structure of the verb phrase and its constit-uents.
However, in order for PHRED to give the phraseits deserved istinction from respond to the door or otherless appropriate utterances, special knowledge, thatanswer the door means to open a door in response to aknock or doorbell, is required.
Since this knowledge isencoded into the common knowledge base, it may also beused by PHRAN to determine the meaning of the phrase.The development of a knowledge base for thepurposes of both language analysis and languageproduction therefore changes the nature of the linguisticknowledge base and its use.
Information that is redun-dant when considered from a formal linguistic standpointmay be important for a particular aspect of languageprocessing.
Such specialized knowledge may then beused by other components of the system.
Thus theemphasis in the PHRAN/PHRED representation is on thestorage of such redundant information rather than on itscomputation.Specialized knowledge about phrases andconstructions i an integral part of the knowledge baseand is used preferentially to general knowledge whichComputational Linguistics, Volume 11, Number 4, October-December 1985 237Paul S. Jacobs PHRED: A Generator for Natural Language Interfacesrequires more computation, both for analysis andproduction.Of course, fundamental differences between analysisand generation still exist in PHRAN and PHRED.
Whilethe two programs have a shared knowledge base, theyhave entirely independent methods of accessing andapplying their linguistic knowledge.
PHRAN accessespatterns by recognizing sequences of constituents;PHRED must select a pattern based on the concept it is toexpress and the constraints which the pattern must satis-fy.
The PHRED approach to language generation iscommitted to the representation of linguistic knowledgein a declarative form which can be shared by the analyz-er.
The knowledge structures used by the generator arethe same as those used by the analyzer, but the processthat makes use of this knowledge to produce an utterancestill reflects the basic choice problem.The appropriateness of natural anguage output seemsenhanced by the pattern-concept pair representation.Much of the knowledge used to produce language, partic-ularly in specialized domains, is specialized knowledge.A natural language program that treats grammaticalconstructions and canned or idiomatic phrases independ-ently of "core" grammar requires pecial rules and proce-dures to make use of such phrases.
In PHREDspecialized constructs are selected and produced usingthe same mechanism as the more productive constructs,facilitating the interaction of linguistic knowledge ofvarying levels of generality.
In this way a wider range ofappropriate utterances may be produced from a givenconceptual form.This discussion has focussed on the general represen-tational aspects of PHRED.
The next section concen-trates on the details which relate specifically to othergeneration systems.5.2.
PHRED AND OTHER GENERATION SYSTEMSPHRED differs from other generation systems primarilyin the way it applies its knowledge to the generation task.Many language generation systems used in conjunctionwith large programs separate the linguistic knowledgebase and lexicon from the conceptual knowledge base ofthe system (McDonald 1980, Mann and Matthiessen1983, McKeown 1982).
This has a variety of advan-tages, particularly the ability to develop and modify onemodule without affecting another.
It also has the disad-vantage of inhibiting the use of conceptual informationby the generator, or of requiring redundant represen-tation of such information, unless the modules are specif-ically designed to utilize common knowledge.
In PHRED,linguistic knowledge, e.g., pattern concept pairs, is main-tained separately from world knowledge, e.g., knowledgeabout the UNIX domain, to permit such advantages as theinterchangeability of English and Spanish knowledgebases in UC.
However, the generator may access theconceptual knowledge base of the system and suchknowledge may interact with the syntactic knowledge.For example, the verbs remove and delete are synonymouswhen used to refer to actions on files, but delete may notgenerally be used with physical objects.
PHRED restrictsthe use of delete during elaboration by examining thesemantic nature of its object.
If the object is not a file,the use of delete to refer to the action of removing it isprohibited.Certain other complete natural language systems, likePHRAN/PHRED, exploit knowledge shared betweenanalyzer and generator.
The HAM-ANS question-an-swerer (Wahlster et al 1983, Busemann 1984) makesuse of a shared lexicon.
The VIE-LANG system (Stein-acker and Buchberger 1983) shares a "syntactico-semantic" lexicon, but the generator accesses this lexiconusing a discrimination et with specialized choice know-ledge.A notable difference in implementation betweenPHRED and other generators is in the fetching mech-anism.
The division of the choice problem into an initialbiasing and an evaluation component allows PHRED tobias its construction of utterances using a specializedhashing scheme.
This has proven a boon for bothsimplicity and efficiency, as some of the rules whichgovern choice are carried out by a simple hashing processand thus fewer patterns reach the restriction phase.
Thebasic choice mechanism as implemented in PHRED there-fore encompasses two different phenomena, which maybe viewed as predisposition and selection.Predisposition is the process by which access to aknowledge base is influenced by various factors - such asthe context, the concept to be expressed, or specificconstraints on the desired output - to influence the orderor priority in which elements of the knowledge base areconsidered.
Selection is the evaluation of an elementfrom the knowledge base.
Intuitively, predisposition isthe underlying access process that influences the likeli-hood of considering a particular word or phrase;selection is the judgement process which determineswhether the word or phrase is appropriate.
This resem-bles the notion of "register" in the systemic tradition (cf.Halliday 1978), but the biasing is not limited to situation-al influences.There are three motivations for a design that providesfor both a predisposition and a selection phase of thechoice process.
First, a system that employs as its princi-pal choice mechanism, for example, a discrimination etsuch as Goldman's (Goldman 1975) or a unificationscheme such as McKeown's (McKeown 1982) may applyits choice algorithm to many unlikely candidates, some-times causing inefficiency.
For example, the systemmight consider the verbs smoke and inhale every time itchooses the verb breathe.
A fast indexing mechanism thatquickly selects candidates trims the time spent evaluatinginappropriate choices.The second motivating force lies in the distinctionbetween utterances that are technically correct inexpressing a given concept and those that are generallyappropriate to a given context.
John inhaled air is techni-238 Computational Linguistics, Volume 11, Number 4, October-December 1985Paul S. Jacobs PHRED: A Generator for Natural Language Interfacescally correct but generally inappropriate in place of Johnbreathed.
This type of distinction can be embedded in achoice mechanism by attempting to axiomatize the rulesthat determine appropriateness, or it can be embedded ina predisposition mechanism which happens to order thechoices according to the context.
Predisposition thusprovides a means for biasing choice without blurring thedistinction between correctness and appropriateness.The third motivation is cognitive validity.
The predis-position-selection distinction fits the intuition that peoplehave when they hear an unusual sentence: It's okay but Iwouldn't say it.
In the example of breathe and inhale airboth utterances may fit the input conceptualization, butfluent speakers tend to choose the former.
Fluent speak-ers also bias their predisposition mechanisms accordingto the nature and formality of the context.
Pawley andSyder (1980) find that one of the differences betweennative and non-native speakers of a language is thatnon-native speakers take a long time to develop thepredisposition component necessary for fluency.
Chafe(1984) has pointed out some of the influential factors inthe variations between spoken and written, or informaland formal, language.
While some of this work is still inits early stages, the evidence strongly suggests a contex-tual biasing component distinct from the selection orevaluation phase of production.The goal behind the PHRED indexing scheme is toincorporate as much of the choice problem as possibleinto the fetching, or predisposition, phase.
Somelanguage generators (Goldman 1975, McDonald 1980)use indexing tools that model choice as a multistage val-uation or decision-making process.
The division of thisprocess in PHRED into an "automatic" biasing compo-nent and a judgment component has some practicaladvantages.
The hashing algorithm which drives thefetching mechanism orders the stream of patternsretrieved before any of them is actually evaluated, andthus the more time-consuming restriction process isspared having to apply heuristics to make certain choices.For example, a general heuristic used by a number oflanguage generators can be expressed as "Choose themost specific pattern which matches the inputconstraints".
In PHRED, this heuristic is realized by thehashing mechanism, which orders candidate patterns interms of the number of buckets that yield them.
In thisway the sentence John asked Bill to leave is generallyproduced without considering the alternative Johninformed Bill that he wanted him to leave.Appelt (1982) has presented language generation asthe multi-level process of planning utterances to satisfymultiple goals.
A division in this multi-stage process canbe made between the task domain and the linguisticdomain, i.e., between the system level and the interfacelevel.
PHRED operates at the interface level.
User inputto the UNIX consultant system is first analyzed byPHRAN, producing a conceptual knowledge structurewhich motivates the system's response (Wilensky, Arens,and Chin 1984).
The planning component of the systemexists entirely within the task domain of UC.
Independ-ent of the language being used, the UC planner makes thechoice of illocutionary act, speech act, and the messageto be conveyed.
PHRED expresses the message in naturallanguage.While the ability to handle complex problems inlanguage planning, such as the generation of referencesrequiring knowledge about the hearer's knowledge, mightbe desirable even at the PHRED level, it is difficult toperform such planning within a real-time system.
It isboth counter-intuitive and inefficient to treat languageproduction as primarily a reasoning process involvingcomplex inference mechanisms.
In fact, the need forsuch reasoning in language production seems rare.
Thusthe UC system draws a convenient, if arbitrary, divisionbetween the choices of responses and speech acts madeby the UC planner and the lexical and structural choicesmade by PHRED.Other systems such as Penman (Mann 1983), andTEXT (McKeown 1982) attack the problem of generat-ing coherent multisentential text.
This involves the influ-ence of linguistic rules governing reference and focus onthe process of deciding what to say.
PHRED is not wellequipped for this problem.
While PHRED producesmultisentential text when UC passes it successiveconcepts to express, it has no knowledge of coherence.Nor is there substantial communication between thePHRED level of production and the higher levels oflanguage planning.
Such communication, asdescribed byAppelt (1982), would allow the generator to subsumemultiple UC goals.
In PHRED and UC much of the proc-ess of producing utterances i not considered as planningper se, but as the application of prestored knowledgeabout how language is used.
The distinction between thisprestored knowledge and general planning is analogousto the difference between compiled and interpreted codein programs.
More research is required on how know-ledge is compiled and on how the use of prestored know-ledge about patterns of speech can be used inconjunction with general knowledge about planning.This discussion has described some of the advantagesof the PHRED approach to language generation, as wellas some of the areas not really addressed in PHRED.
Thenext section considers some of the promising ways inwhich the research described here can be extended.6 FUTURE DIRECTIONSPHRED is a successful implementation of a real-timegeneration system covering a range of linguistic phenom-ena, and has served also to open up new ground forfurther work.
This work involves aspects of languageprocessing not directly involved in PHRED as well asproblems with the PHRED approach and implementation.Computational Linguistics, Volume I I, Number 4, October-December 1985 239Paul S. Jacobs PHRED: A Generator for Natural Language Interfaces6.1 STRUCTURED ASSOCIATIONSMuch of the work on specialized language discussedearlier, as well as research on metaphor by Lakoff andothers (Lakoff 1977, Lakoff and Johnson 1980) hassuggested that there exist a range of underlying moti-vations 4 for many idioms and grammatical constructions,knowledge of which can help govern the use of language.For example, PHRED in its current form has the know-ledge that the phrase kick the bucket does not passivizebut bury the hatchet does, without any attempt o repre-sent the motivation for the latter phrase.
Knowing thatbury the hatchet is motivated, i.e., that bury refers toterminating and hatchet o war, helps to explain the gram-matical properties of the phrase.
Ross (1981) hassuggested that in many cases the variety of forms inwhich idioms of this type can appear depends on the abil-ity of the noun component of the idiom to function inde-pendently as a noun.
Passivization, however, seemssubject o a more specific constraint; that is, the ability ofthe noun component of the idiom to refer.To take advantage of this knowledge, a representationof the bury the hatchet idiom must encode the informationnot only that the expression refers to making peace, butthat the hatchet part of the idiom refers to war or to thetools of war.As another example where motivation might be useful,PHRED now generates John took a punch from Mary andMary gave John a punch without representing thecommon metaphorical derivation of the two sentences.For example, PHRED might have a pattern<person> <root = give> <person> <striking-action>to produce the sentence Ali gave Frazier a punch.
This isthus specialized knowledge about giving and a potentialobject.
There might also be a pattern<person> <root --- take> <striking-action> <<word =from> <person>>used to produce Frazier took a punch from Ali.
Similarpatterns might exist for getting a punch and receiving apunch.
Treating these patterns independently seemscognitively unrealistic, because motivated phrases are ingeneral easier to use and remember, and inefficient, sincea more general representation of the striking as transfermetaphor might eliminate the need for some of thespecialized knowledge about each of the patterns.
Whileknowing the motivation does not obviate entirely theneed for specialized knowledge, it can lead to a moreparsimonious encoding of the specialized knowledge.A potential improvement o the PHRAN/PHREDrepresentation is the treatment of knowledge used toassociate language and meaning as structuredassociations.
5 The structured association is an explicitrelation between two knowledge structures that alsoassociates their corresponding "components".
Thesecomponents may be aspectuals, or attributes, of the twostructures or other arbitrarily related structures.
A struc-tured association may be used to relate the concept of astriking action to the concept of a transfer, with thepatient of the action corresponding to the recipient of thetransfer and the actor of the striking action correspond-ing to the source of the transfer.
A structured associ-ation might also relate linguistic structures to associatedconcepts.
The bury the hatchet expression may be relatedto a concept by a structured association, with the hatchetpart corresponding to the war part of the concept andbury corresponding to the action of terminating the war.Metaphors and pattern-concept airs alike may thus berepresented as types of structured associations (cf.Jacobs 1985).The structured association derives from the idea of a"view" (cf.
Moore and Newell 1973, Bobrow and Wino-grad 1977, Wilensky 1984, Jacobs and Rau 1984), but ismore general.
The term view is used principally todescribe relationships used to understand analogousconcepts, while the structured association relates arbi-trary knowledge structures.
Also, the structured associ-ation is not a primitive relation, as structured associationsthemselves are a conceptual hierarchy.Gentner's structure-mapping theory (Gentner 1983)addresses problems in understanding analogy that arecomparable to some of the metaphorical issues discussedabove.
Gentner focuses on the process by which struc-ture-mappings are synthesized rather than on the explicitrepresentation of associations that may be used for suchmappings.Incorporating structured associations into a hierarchi-cal knowledge base could further facilitate the interactionof general and specialized linguistic knowledge.
ThusPHRED, and PHRAN as well, could gain efficiency inrepresentation from the generalizations which applywithout losing the advantages of having specializedpatterns.6.2 CONTEXT AND MEMORY MODELSAnother major area for future work is in the developmentof models of memory that help account for the role ofcontext in language processing.
A kind of spreading acti-vation model (Arens 1982) was used in UC to helpresolve references and to activate particular goals, plansand speech acts.
The idea behind an activation-basedmodel is that subtle changes in context can influencelanguage processing without requiring the addition oflarge amounts of conceptual information to all of thelinguistic knowledge structures.A spreading-activation model has the potential ofbeing especially useful in the predisposition, or fetchingphase, of generation.
Information about objects andevents that have been explicitly referred to or activatedin the current context, as well as about the topic ofconversation and the participants in the conversation, caninfluence the language considered.
There are, however,three major practical difficulties with using spreadingactivation as a means of controlling the effect of contexton language production.
First, the spreading activation240 Computational Linguistics, Volume 1 I, Number 4, October-December 1985Paul S. Jacobs PHRED: A Generator for Natural Language Interfacesmodel is a parallel one which tends to produce slow,awkward simulations.
Second, the encoding of know-ledge into a network suitable for such a memory modelmust involve either a complex method of acquiring theknowledge from data or a contrived set of associativestrengths based on introspection.
Finally, while spread-ing activation is often effective in describing subcon-scious effects such as associative priming, it is difficult toaccount for the interaction of such effects with consciousor planned behavior.
Most likely, a memory model willprove useful as a means of modeling the predispositionprocess and will simplify, but not replace, language plan-ning and language selection.7 CONCLUSIONPHRED is a practical language generator for use innatural language interfaces.
The phrasal approach tolanguage processing allows the generator to serve as aneffective communicative tool within specialized domainswithout sacrificing the ability to adapt the system to newfunctions.
The simple and efficient design of theprogram, particularly the process by which PHREDavoids expensive unification, allows it to serve as; part ofa real-time user interface.
The use of a knowledge baseshared with the PHRAN analyzer makes it easy to adaptthe interface to a variety of domains in which under-standing and production of fairly robust language isrequired.In addition to its value as a useful language processingmechanism, PHRED has paved for the way for bettermodels of language generation and linguistic represen-tation.
The PHRED approach supports a view of gener-ation as a knowledge-intensive process in which theknowledge structures that relate language to meaningplay a key role.
The way in which these knowledgestructures are accessed and applied emerges as thecentral issue in this model.
The construction of robust,efficient and extensible natural language interfacesdemands continued work at refining the means by whichthis "knowledge about language" is captured.REFERENCESAppelt, D. 1982 Planning Natural Language Utterances to SatisfyMultiple Goals.
SRI International A1 Center Technical Note 259.Appelt, D. 1983 Telegram: A Grammar Formalism for LanguagePlanning.
In Proceedings of the 21st Annual Meeting of the Associ-ation for Computational Linguistics, Cambridge, Massachusetts.Arens, Y.
1982 The context model: language and understanding incontext.
In Proceedings of the Fourth Annual Conference of the Cogni-tive Science Society, Ann Arbor, Michigan.Becker, .I.D.
1975 The Phrasal Lexicon.
In Schank, R. and Webber,B.L., Eds., Theoretical Issues in Natural Language Processing.(publisher?
): Cambridge, Massachusetts.Bobrow, D. and Winograd, T. 1977 An Overview of KRL, a Know-ledge Representation Language.
Cognitive Science 1 (1).Bresnan, J., Ed.
1983 The Mental Representation of GrammaticalRelations.
MIT Press, Cambridge.Burton, R. 1976 Semantic Grammar: an Engineering Technique forConstructing Natural Language Understanding Systems.
Bolt Bera-nek and Newman Report No.
3453.Busemann, S. 1984 Topicalization and Pronominalization.
Extendinga Natural Language Generation System.
In Proceedings of the SixthEuropean Conference on Artificial Intelligence, Pisa, Italy.Chafe, W.L.
1968 Idiomaticity as an Anomaly in the Chomskyan Para-digm.
Foundations of Language 6( 1 ).Chafe, W. L. 1984 Integration and Involvement in Speaking, Writing,and Oral Literature.
In Tannen, D., Ed., Oral and Written Language.Ablex, Norwood, New Jersey.Danlos, L. 1984 Conceptual nd Linguistic Decisions in Generation.In Proceedings of the Tenth International Conference on ComputationalLinguistics, Stanford, California.Fillmore, C.,I.
1968 The Case for Case.
In Bach, E. and Harms, R.,Eds., Universals in Linguistic Theory.
Holt, Rinehart and Winston,New York.Fillmore, C.J.
1979 Innocence: a Second Idealization for Linguistics.In Proceedings of the Fifth Berkeley Linguistics Symposium, Berkeley,California.Fillmore, C.J.
; Kay, P.; and O' Connor, M.C.
1984 Regularity andIdiomaticity in Grammar: The Case of Let Alone.
University ofCalifornia, Cognitive Science Working Paper.Gentner, D. 1983 Structure-Mapping: A Theoretical Framework forAnalogy.
Cognitive Science 7:155-170.Goldman, N. 1975 Conceptual Generation.
In Schank, R.C., Ed.,Conceptual Information Processing.
American Elsevier PublishingCompany, Inc., New York.Halliday, M.A.K.
1968 Notes on Transitivity and Theme in English.Journal of Linguistics 4.Halliday, M.A.K.
1978 Language as Social Semiotic.
University ParkPress, Baltimore.Harris, Z.
1968 Mathematical Structures of Language.
John Wiley andSons, New York.Hudson, R. 1976 Arguments for a Non-Transformational Grammar.University of Chicago Press, Chicago.,iacobs, P. 1983 Generation in a Natural Language Interface.
InProceedings of the Eighth International Joint Conference on ArtificialIntelligence, Karlsruhe, Germany.Jacobs, P. and Rau, L. 1984 Ace: Associating Language with Mean-ing.
In Proceedings of the Sixth European Conference on ArtificialIntelligence, Pisa, Italy.Jacobs, P. 1985 A Knowledge-Based Approach to LanguageProduction.
University of California at Berkeley, Computer ScienceDivision Report #UCB/CSD 86/254.Kay, M. 1979 Functional Grammar.
In Proceedings of the Fifth AnnualMeeting of the Berkeley Linguistic Society.Kay, M. 1984 Functional Unification Grammar: A formalism forMachine Translation.
In Proceedings of the Tenth InternationalConference on Computational Linguistics, Stanford, California.Kempen, G. and Hoenkamp, E. 1982 An Incremental ProceduralGrammar for Sentence Formulation.
University of Nijmegen (theNetherlands) Department of Psychology, Internal Report 82-FU-14.Kittredge, R. and Lehrberger, J.
1983 Sublanguages: Studies ofLanguage in Restricted Domains.
Walter DeGruyter, New York.Lakoff, G. 1977 Linguistic Gestalts.
In Proceedings of the ThirteenthRegional Meeting of the Chicago Linguistics Society.Lakoff, G. and Johnson, D. 1980 Metaphors We Live By.
University ofChicago Press, Chicago.Lakoff, G. 1984 There-constructions: A Case Study in GrammaticalConstruction Theory.
University of California, Linguistics WorkingPaper.Lamb, S. The Crooked Path of Progress in Cognitive Linguistics.
InMakkai, A. and Lockwood, D., Eds., Readings in StratificationalLinguistics.
University of Alabama Press, University, Alabama.Lockwood, D. 1972 Introduction to Stratiftcational Linguistics.
Harc-ourt Brace and Jovanovich, New York.Makkai, A.
1972 Idiom Structure in English.
Mouton, The Hague.Makkai, A., Ed.
1975 ,4 Dictionary of American ldioms.
Barron'sEducational Series, New York.Mann, W. 1983 An Overview of the Penman Text Generation System.In Proceedings of the National Conference on Artificial Intelligence,Washington, D. C.Computational Linguistics, Volume 11, Number 4, October-December 1985 241Paul S. Jacobs PHRED: A Generator for Natural Language InterfacesMann, W. and Matthiessen, C. 1983 Nigel: A Systemic Grammar forText Generation.
University of Southern California, ISI TechnicalReport #1SI/RR-83-105.McDonald, D.D.
1980 Language Production as a Process of Decision-making Under Constraints.
Ph.D. dissertation, MIT.McKeown, K. 1982 Generating Natural Language Text in Responseto Questions about Database Structure.
Ph.D. thesis, University ofPennsylvania.Moore, J. and Newell, A.
1974 How can MERLIN Understand?
InGregg, L., Ed., Knowledge and Cognition.
Erlbaum Associates, Inc.Pawley, A. and Syder, F.H.
1980 Two Puzzles for Linguistic Theory:Nativelike Selection and Nativelike Fluency.
Unpublished manu-script.Pike, K. 1962 Dimensions of Grammatical Constructions.
In Brand,R., Ed., Kenneth L. Pike: Selected Writings.
Mouton, The Hague.Riesbeck, C. 1975 Conceptual Analysis.
In Schank, R.C., Ed., Concep-tual Information Processing.
American Elsevier Publishing Company,Inc., New York.Rosch, E. 1977 Human Categorization.
In Warren, N., Ed., Studies inCross-Cultural Psychology (Vol.
I).
London, Academic Press.Ross, John Robert 1973 Nouniness.
In Fujimura, Osamu, Ed., ThreeDimensions of Linguistic Theory.
TECCorporation, Tokyo.Ross, John Robert 1981 Nominal Decay.
Unpublished manuscript.Schank, R.C., Ed.
1975 Conceptual Information Processing.
AmericanElsevier Publishing Company, Inc., New York.Steinacker, I. and Buchberger, E. 1983 Relating Syntax and Seman-tics: The Syntactico-semantic Lexicon of the System VIE-LANG.
InProceedings of the First European Meeting of the ACL, Pisa, Italy.Wahlster, W.; Marburger, H.; Jameson, A.; and Busemann, S. 1983Overanswering Yes-No Questions: Extended Responses in aNatural Language Interface to a Vision System.
In Proceedings ofthe Eighth International Joint Conference on Artificial Intelligence,Karlsruhe, W. Germany.Wilensky, R. and Arens, Y.
1980 PHRAN - A Knowledge-BasedApproach to Natural Language Analysis.
University of California tBerkeley, Electronics Research Laboratory Memorandum#UCB/ERL M80/34.Wilensky, R. 1981 A Knowledge-Based Approach to NaturalLanguage Processing: A Progress Report.
In Proceedings of theSeventh International Joint Conference on Artificial Intelligence,Vancouver, British Columbia.Wilensky, R. 1984 KODIAK - A Knowledge Representation Language.In Proceedings of the Sixth Annual Conference of the Cognitive ScienceSociety, Boulder, Colorado.Wilensky, R.; Arens, Y.; and Chin, D. 1984 Talking to UNIX inEnglish: An Overview of UC.
Communications of the Association forComputing Machinery 27(6).NOTES1.
This research was sponsored in part by the Office of NavalResearch under contract 00014-80-C-0732, the NationalScience Foundat ion under grants IST-8007045 andIST-8208602, and the Defense Advanced Research ProjectsAgency (DOD), ARPA Order No.
3041, Monitored by theNaval Electronic Systems Command under contractN00039-82-C-0235.I am grateful to Robert  Wilensky for his guidance andfor his important comments on numerous drafts of thispaper, and to Lisa Rau for many helpful suggestions.2.
Author 's  current address: Knowledge-Based SystemsBranch, General  Electric Corporate Research and Develop-ment, Schenectady, NY 12301.3.
UNIX is a trademark of AT&T Bell Laboratories.4.
The term motivation, as employed here, is due to CharlesFil lmore and George Lakoff, personal communication.5.
The term structured association and the use of structuredassociations in language processing were suggested byRobert  Wilensky, personal communication.242 Computational Linguistics, Volume 1 I, Number 4, October-December 1985
