Construct Algebra: Analytical Dialog ManagementAlicia Abella and Allen L. GorinAT cT Labs Research180 Park Ave. Bldg 103 Florham Park, NJ 07932AbstractIn this paper we describe a systematicapproach for creating a dialog managementsystem based on a Construct Algebra, acollection of relations and operations ona task representation.
These relationsand operations are analytical componentsfor building higher level abstractions calleddialog motivators.
The dialog manager, con-sisting of a collection of dialog motivators,is entirely built using the Construct Algebra.1 INTRODUCTIONThe dialog manager described in this paperimplements a novel approach to the problemof dialog management.
There are three ma-jor contributions: the task knowledge repre-sentation, a Construct Algebra and a collec-tion of dialog motivators.
The task knowl-edge representation exploits object-orientedparadigms.
The dialog motivators providethe dialog manager with the dialog strate-gies that govern its behavior.
The ConstructAlgebra provides the building blocks neededto create new dialog motivators and analyzethem.The first main component of this dialogmanager is the task knowledge representa-tion.
The task knowledge is encoded in ob-jects.
These objects form an inheritance hi-erarchy that defines the relationships thatexists among these objects.
The dialog man-ager exploits this inheritance hierarchy in de-termining what queries to pose to the user.No explicit states and transitions need to bedefined using this framework (Bennacef etal., 1996; Meng and et.
al., 1996; Sadek etal., 1996).
A change to the dialog does notrequire a change to the dialog manager, butmore simply, a change to the inheritance hi-erarchy.The second main component of this dia-log manager is the collection of dialog mo-tivators.
The dialog motivators determinewhat actions need to be taken (e.g.
ask aconfirmation question).
The dialog motiva-tors are founded on a theoretical frameworkcalled a Construct Algebra.
The ConstructAlgebra allows a designer to add new moti-vators in a principled way.
Creating a newapplication requires defining the inheritancehierarchy and perhaps additional dialog mo-tivators not encompassed in the existing col-lection.This dialog manager has been used for twoapplications.
The first is a spoken dialog sys-tem that enables a user to respond to theopen-ended prompt How may I help you?
(HMIHY) (Gorin et al, 1997).
The sys-tem recognizes the words the customer hassaid (Riccardi and Bangalore, 1998) and ex-tracts the meaning of these words (Wrightet al, 1998) to determine what servicethey want, conducting a dialog (Abella andGorin, 1997; Abella et al, 1996) to effec-tively engage the customer in a conversa-tion that will result in providing the servicethey requested.
The second application isto Voice Post Query (VPQ) (Buntschuh etal., 1998) which provides spoken access tothe information in large personnel database(> 120,000 entries).
A user can ask for em-ployee information such as phone number,fax number, work location, or ask to callan employee.
These applications are signifi-191cantly different but they both use the samedialog manager.2 Task Representat ionInformation about the task is defined us-ing an object inheritance hierarchy.
The in-heritance hierarchy defines the relationshipsthat exist amongst he task knowledge.
Ob-jects are defined to encode the hierarchy.This representation adheres to the princi-ples of object-oriented design as describedin (Booch, 1994).
Each of the objects hasthree partitions.
The first partition containsthe name of the object, the second containsa list of variables with associated values thatare specific to the object, and the third par-tition contains any methods associated withthe object.
For simplicity of illustration wewill not include any of the methods.
Eachof the objects inherits its methods from ahigher level object called the Construct.
TheConstruct's methods are the relations andoperations that will be described in section 4.The result of the speech recognizer issent to the spoken language understanding(SLU) module.
The SLU module extractsthe meaning of the user's utterance and pro-duces a list of possible objects with asso-ciated confidence scores that is interpretedby the dialog manager.
The dialog managerthen uses the inheritance hierarchy and analgorithm 1 fully described in (Abella andGorin, 1997) to produce a set of semanti-cally consistent inputs to be used by the di-alog manager.
The input is represented asa boolean expression of constructs extractedfrom the utterance.
This input is then ma-nipulated by the dialog motivators to pro-duce an appropriate action, which most of-ten consists of playing a prompt to the useror generating a query to a database.3 The  Const ructA construct is the dialogknowledge representationmanager's generalvehicle.
The task1An understanding of this algorithm is not nec-essary for the understanding of the work describedin this paper.DIAL FOR ME:ORWARD NUMBER555-1234IBILLINGNULLFigure 1: A construct example for HMIHYknowledge is encoded as a hierarchy of con-structs.
The construct itself is represented asa tree structure which allows for the build-ing of a containment hierarchy.
It consistsof two parts, a head and a body.
Figure 1illustrates a construct example for HMIHY.The DIAL_FOR_ME construct is the headand it has two constructs for its body, FOR-WARD_NUMBER and BILLING.
These twoconstructs represent he two pieces of in-formation necessary to complete a call.
Ifa user calls requesting to place a call it isthe DIAL_FOR_ME construct that is createdwith the generic BILLING construct andthe FORWARD_NUMBER construct withits value set to empty.
The dialog managerwill then ask for the forward number and forthe type of billing method.
In figure 1 thedialog manager has received a response tothe forward number equest.4 Const ruct  A lgebraThe construct algebra defines a collection ofelementary relations and operations on a setof constructs.
These relations and opera-tions are then used to build the larger pro-cessing units that we call the dialog moti-vators.
The set of dialog motivators definesthe application.
In this section we formallydefine these relations and operations.4.1 The  Const ructDef in i t ion  1 HeadA head is an ordered pair <name, value>,where name belongs to some set of prede-192fined names, N, and value belongs to someset of predefined values, V. A value may beNULL (not assigned a value).Def in i t ion 2 ConstructA construct is defined recursively as an or-dered pair <head, body> where body is a (pos-sibly empty) set of constructs.4.2 Re la t ionsThe Construct Algebra defines ix relationsin the set of constructs.
In each of thedefinitions, Cl and c2 are constructs.
Notethat the symbols C and C, introduced here,should not be understood in their usual"subset" and "proper subset" interpretationbut will be described in definitions 4 and 5.Def in i t ion 3 EqualityTwo constructs are equal, denoted cl = c2whenhead(c1) = head(c2) andbody(c1) = body(c2)Definition 3 requires that the heads of c1and c2 be equal.
Recall that the head of aconstruct is an ordered pair <name, value>which means that their names and valuesmust be equal.
A value may be empty(NULL) and by definition be equal to anyother value.
The equality of bodies meansthat a bijective mapping exists from thebody of cl into the body of c2 such thatelements associated with this mapping areequal.Def in i t ion 4 RestrictionCl is a restriction of c2, denoted cl C c~,whenhead(c1) = head(c2) and(3f : body(c1) --+ body(c2))(fis 1 to 1 A(Vbl ?
body(cl))(bl C_ f(bl))Intuitively, cl can be obtained by "pruning"elements of c2.
The second part of the def-inition, (3f  : ...) is what differentiates Cfrom =.
It is required that a mapping f be-tween the bodies of Cl and c2 exist with thefollowing properties:\[ ~RSONClC<\ PERSON"",,,.
........... ,ADD ~ES sSTREET............................ .
.
-3H(}NE NUMBEIc2Figure 2: STREET and PHONE_NUMBERare "pruned" from c2 to obtain Cl.?
f is 1 to 1.
In other words, differentelements of the body of O, call them hi,are associated with different elements ofthe body of c2, call them b2?
The elements of the body of c1 are re-strictions of the elements of the body ofc2.
In other words, bl C_ b2, where bl areelements from the body of Cl and b2 areelements from the body of c2.Figure 2 illustrates an example.Def init ion 5 Containmentcl is contained in c2, denoted Cl C c2, whenCl C_ c2 or (3b2 ?
body(c2))(Cl C 52)We assume that c1 C c2 either if Cl is arestriction of c2 or if Cl is contained in anyelement of the body of c2.
Figure 3 givesan example.
The AMBIGUITY constructrepresents the fact that the system is notsure whether the user has requested aCOLLECT call or a CALLING_CARD call.This would trigger a clarifying questionfrom the dialog manager.193?elCAMBIGUIT I'k .
.
.
.
.
.
.
.
.
.
.
.
.
""?2~'ALLING_CARDCARD NUMBEI~8485417ClBILLINGC2Figure 4: cj ?--->c2Figure 3: cl C c2Def in i t ion  6 Generalizationc2 is a generalization of el, denoted c1~__.~c2,whenCALLING_CARD DIALFOR_MEhead(cl)c--+head(c2) and(3f :  body(c2) ~ body(c1))(fis 1 to 1 A (Vba ?
body(c2)))(f(b2)~___b2)The generalization of heads means thatthe name of c2 is on the inheritance pathof cl and their values are equal.
Intuitively,c2 is an ancestor of Cl or in object-orientedC ~.
terms ~C 1 is-a, 2 Note the similarity ofthis relation to C. Figure 4 illustrates anexample.
BILLING is a generalization ofCALLING_CARD, or in other words CALL-ING_CARD is-a BILLING.Def in i t ion  7 Symmetric GeneralizationCl is a symmetric generalization of c2, de-noted cl ~ c2, whenC1?--->C2 or c2?---~ClThis definition simply removes the direction-ality of __?---~.
In other words, either 'tE 1 iS-a C2"194?CARD_NUMBER8485417BILLINGCl c2Figure 5: cl ?--> c2or ;;c2 is-a c1"Def in i t ion  8 Containment GeneralizationCl is a containment generalization of c2, de-noted ci ?---> c2, whenb2 is contained in c2 and cl is a symmet-ric generalization of b2.
An example is illus-trated in figure 5.
BILLING is contained inDIAL_FOR_ME and is a symmetric general-ization of CALLING_CARD.4.3 Operat ionsThe Construct Algebra consists of twooperations union, U and projection, \.Def in i t ion 9 Union (U)We will define this operation in severalsteps.
Each step is a progression towards amore general definition.Def in i t ion 9.1 Union of values (vl U v2)V 1 U V 2 =Vl, Vl = v2 and vl # NULLv2, Vl = v2 and Vl = NULLnot defined, Vl # v2Recall that by definition, NULL is equal toany other value.Def in i t ion 9.2 Union of headsWe define head(c1) U head(c2) only in thecase c\] ?-~c2, which is all that is needed for adefinition of U.head(c I ) U head(c2) :value(el) U vatue(  ))Def in i t ion 9.3 (c, U c2)If c1~_~_c2,C 1 U C 2 =( head( c1 ) U head(c2),u ?
body(  )} u{b l lb l  ?
body(c 1) A(Vb2 ?
body(c2))(bl #/(b2))})In this definition the head of the resultingconstruct is the union of the heads ofthe operands.
The body of the resultingconstruct consists of two parts.
The firstpart is a set of unions (denoted f(b2) U b2in the definition above) where b2 spans thebody of the second operand c2 and f isa mapping from Definition 6.
Recall thatthe mapping f associates elements of thebody(c1) with elements of the body(c2) suchthat f(b2)~-+b2 for b2 ?
body(c2) so theunion f (b j  U b2 is (recursively) defined inDefinition 9.3.
The second part of the bodyof the resulting construct consists of thoseelements bl of the body(c1) that no elementfrom the body(c2)maps into through themapping f.  In other words, the second partof the body consists of those elements "leftCALLIN?CARD-NUMB 1NULL uEXP|RATIO~__  299 /Cl_CARD :ALLI~1 CARD NlYMB~,1239834 =c2Figure 6: cl U c2 if c1?-.-~c2LINO_CARD~ A R D _ N U M B E R  1239834EXPIRATIO1 ~299behind" in the body(cl) after the mappingf.
Figure 6 illustrates an example.
Theunion operations results in a constructwith the head CALLING_CARD and abody that contains both CARD_NUMBERand EXPIRATION.
The CARD_NUMBERconstruct from Cl and c2 can be combinedbecause the value of CARD__NUMBER fromcl is NULL.
The construct EXPIRATIONis added because it does not exist on thebody of c2.Def in i t ion 9.4 Cl U c2If C 1 ,-v C2,ciUc2, ci ~-+c2C 1 U ?2 = C 2 U e l ,  C2 ~ C1Def in i t ion  9 .5  cl U c2If cl ~-+ c2,C 1 U c 2 =C 1 U c2 ,(head(c2),{el U b~lb~ ?
body(c2) A cl ~ b2}U{b2152 ?
body(c2) ^ Cl b?
),C1 ,"-' C2C1 ~ C2Figure 7 illustrates this union.
The headof the resulting construct is the head ofc2 which is DIAL_FOR_ME.
The resultingconstruct no longer has BILLING but195:ALLING CARDEXPIRATIONAL~ORWARD~NUMB FZ~BILLING \[Cl C2DIAL_FOR_ME~LLING_CARDARD_NUMBEIEXPIRATION !Figure 7: Cl I.J C2 if cl ~ c2rather CALLING_CARD since BILLING isa generalization of CALLING_CARD.
Inaddition the resulting construct contains theconstruct FORWARD_NUMBER because itremains from DIAL_FOR_ME.Def in i t ion 9.6 Cl U e2In the general case,C1 ~ C2 -~-el  \[,-J e2,c2 \[..J Cl,((REP, NULL), {cl, c2}),C1 ~ C2e2 ~ elCl ~ C2 andC2 ~ ClIn this definition REP is a construct used torepresent the union of those constructs thatdo not satisfy any of the aforementionedconditions.
By definition REP has a valueof NULL and the body consists of theconstructs Cl and e2.Def in i t ion 10 Projection (\)CI\C 2 ~-.
((AMBIGUITY, NULL),{hi U c2161 C c1 A bl ~- c2}) e2 ?-+ clCl C2 ~ elFigure 8 illustrates an example of an am-biguous construct and the result of theFIRST NA\]C2 C1\C2Figure 8: Projection operation exampleprojection operation.
The construct isAMBIGUITY because all the elements ofits body have the value of 6151 for DEPT.In this example, c2 contains the constructLAST_NAME with the value of Smith.There are 2 constructs on the body of Clthat are in the relation b2 C Cl, in otherwords have value for LAST_NAME of Smith.Therefore the result is an AMBIGUITYconstruct with two elements on its body,both with the LAST_NAME value of Smith.5 Dialog MotivatorsA dialog motivator determines what actionthe dialog manager needs to take in con-ducting its dialog with a user.
The di-alog manager for HMIHY currently con-sists of 5 dialog motivators.
They are dis-ambiguation , confirmation, error handling(recovery from misrecognition or misunder-standing and silence), missing informationand context switching.
VPQ uses two addi-tional motivators, they are continuation and196co: Construct used for disambiguation,cQ EcCA: User responseDk(c, cigK) =c, c ~ AMBIGUITYDk+l (c, CIDK), CA ~__~_ERRORDk+l  (C, CID g (.J CQ), c A  IDKC\CA,  C A ?-----} CC A C A ~ CFigure 9: Disambiguation Motivatordatabase querying.The disambiguation motivator determineswhen there is ambiguous emantic informa-tion, like conflicting billing methods.
Con-firmation is used when the SLU returns aresult with low confidence.
Error handlingtakes on three forms.
There is error recoverywhen the speech recognizer has likely misrec-ognized what the user has said (low confi-dence scores associated with the recognitionresults), when the user falls silent, and whenthe user says something the SLU does notexpect or does not handle.
Missing infor-mation determines what information to askabout in order to complete a transaction.Context switching is the ability of the sys-tem to realize when the user has changedhis/her mind or realizes that it has mis-understood and allows the user to correctit.
The continuation motivator determineswhen it is valid to offer the user the choice toquery the system for additional information.Database querying decides when the systemhas acquired enough information to query adatabase for the requested information.5.1 D isambiguat ion  Mot ivatorFigure 9 illustrate how the disambiguationmotivator is created using the ConstructAlgebra.
The disambiguation motivator iscalled with the current construct c and aset of constructs called CID g that representsinformation that the user does not know(IDK - "I Don't Know"), in other words,the user explicitly responds to a prompt withthe phrase "I don't know" or its equivalent s.2The phrases chosen are based on trialsInput: A sequence of semantic input fromthe SLU module in response to a promptOutput: Complete construct c (no need forfurther dialog)RepeatFor all dialog motivators DMIif DMi applies to cPerform action(DMi,c)Apply Dialog Manager to get CAUsing Construct Algebra,combine c and CA into cUnti l  no motivator appliesReturn cFigure 10: Dialog Manager algorithmThe motivator uns through several checkson the construct c. The first is to check to seeif in fact the motivator applies, or in otherwords if c is a restriction of AMBIGUITY.If it is not then the motivator simply returnc without changing it.
The second step isto check to see if the ERROR construct is ageneralization f CA where CA represents heuser's response.
The ERROR construct rep-resents an error condition like silence or mis-recognition.
If it is, then it goes on to nextmotivator because this motivator does notapply to error conditions.
If CA equals theIDK construct then this means that the userdid not know the answer to our query and weadd the construct used for disambiguation,cQ to the set of constructs ?IDK.
If however,CA is in the containment generalization rela-tion with c then the projection operation isapplied and the result is returned.
If CA isnot in this relation then this indicates a con-text switch on the part of the user and thedisambiguation motivator eturns CA as theresult.All other motivators are constructed in asimilar fashion.
An application can use thesemotivators or create new ones that are ap-plication specific using the operations andrelations of the Construct Algebra.197System" VPQ.
What can I do for you?User: I need the phone number for Klein.System- I have more than 20 listings forKlein.
Can you please say the first name?User: William.System" I have 2 listings for William Klein.Can you tell me the person's work location?User: BedminsterSystem" The phone number for WilliamKlein is 973 345 5432.
Would you like moreinformation?User: No.System" Thank you for using VPQ.Figure 11: A sample dialog for VPQ6 Dialog ManagerThe input to the dialog manager is a collec-tion of semantic input generated by the SLU.Figure 10 illustrates the algorithm used bythe dialog manager.
The output is the com-plete construct c which no longer requiresfurther dialog.
The algorithm loops throughall the dialog motivators determining whichone needs to be applied to c. If it finds a mo-tivator that applies then it will perform thenecessary action (e.g.
play a prompt or doa database lookup).
The algorithm repeatsitself to obtain CA (the construct answer).
Inother words, the construct hat results fromthe action is subject to the dialog motiva-tors starting from the beginning.
Once CAhas been found to be complete it is combinedwith c using Construct Algebra to producea new construct.
This new construct c alsogoes through the loop of dialog motivatorsand the procedure continues until no moti-vator applies and the algorithm returns thefinal construct c.6.1 ExampleTo illustrate how the dialog manager func-tions we will use an example from VPQ.Figure 11 illustrates a sample dialog withthe system.
The sequence of motivators forVPQ is error handling, confirmation, miss-ing information, database querying and dis-ambiguation.
The construct hat is createdas a result of the user's initial utteranceis shown in figure 12.
All the informationneeded to do a database lookup is found inthe user's utterance, namely the piece of in-formation the user is seeking and the nameof the person.
Therefore the first motivatorthat applies is database querying.
This moti-vator creates the database query and basedon the result creates the construct CA.
Theconstruct CA is then searched by each of themotivators beginning again with error han-dling.
The motivator that applies to CA isthe disambiguation motivator because thereare more than 20 people in the databasewhose last name is pronounced Klein, in-cluding Klein, Cline and Kline.
The dis-ambiguation motivator searches through CAto determine, based on preset parameters,which piece of information is most useful forthe disambiguation process as well as whichpiece of information the user is likely toknow, which is selected when the inheritancehierarchy is designed.
For VPQ this includesasking about the first name and work loca-tion.
In this example the dialog managersearches the database ntries and determinesthat the most discriminating piece of infor-mation is the first name.
Once the user re-sponds with the first name there are still 2possible candidates and it asks for the nextpiece of information which is work location.Had the user not known the work locationthe system would have read out the phonenumber of both people since the total num-ber of matches is less than 3.
If the num-ber of entries after disambiguation remainsgreater than 3 the system refers the user toa live operator during work hours.7 ConclusionIn this paper we have described a novel ap-proach to dialog management.
The taskknowledge representation defined intuitivelyand without the need to define call flows inthe traditional finite-state approach.
TheConstruct Algebra serves as the buildingblocks from which the dialog motivatorsthat drive the dialog system are comprised.Building a new application will only requirethe designer to define the objects (e.g.
COL-198Figure 12: Sample construct for VPQ.LECT, CREDIT etc.)
and the inheritancehierarchy.
The Construct Algebra serves asan analytical tool that allows the dialog mo-tivators to be formally defined and analyzedand provides an abstraction hierarchy thathides the low-level details of the implemen-tation and pieces together the dialog motiva-tors.
This same dialog manager is currentlybeing used by two very different applications(HMIHY and VPQ).A.L.
Gorin, G. Riccardi, and J.H.
Wright.1997.
How May I Help You?
Speech Com-munciation.Helen Meng and Senis Busayapongchai et.al.
1996.
Wheels: A conversational sys-tem in the automobile classifieds domain.International Conference on Spoken Lan-guage Processing.G.
Riccardi and S. Bangalore.
1998.
Au-tomatic acquisision of phrase grammarsfor stochastic language modeling.
In Proc.ACL Workshop on Very Large Corpora,Montreal.M.D.
Sadek, A. Ferrieux, A. Cozannet,P.
Bretier, F. Panaget, and J. Simonin.1996.
Effective Human-Computer Co-operative Spoken Dialogue: the AGSDemonstrator.
International Conferenceon Spoken Language Processing.Jerry Wright, Allen L. Gorin, and AliciaAbella.
1998.
Spoken language under-standing within dialogs using a graphicalmodel of task structure.
In Proc.
ICSLPSydney.References/Alicia Abella and Allen L. Gorin.
1997.Generating semantically consistent inputsto a dialog manager.
In Proc.
EuroSpeechRhodes, Greece.A.
Abella, M. K. Brown, and B. Buntschuh.1996.
Development principles for dialog-based interfaces.
European Conference onArtificial Intelligence.S.
Bennacef, L. Devillers, S. Rosset, andL.
Lamel.
1996.
Dialog in the rail-tel telephone-based system.
InternationalConference on Spoken Language Process-ing.Grady Booch.
1994.
Object-Oriented Anal-ysis and Design with Applications.
Ben-jamin Cummings.B.
Buntschuh, C. Kamm, G. DiFabbrizio,A.
Abella, M. Mohri, S. Narayan, I. Zelj-vokic, R.D.
Sharp, J. Wright, S. Marcus,J.
Shaffer, R. Duncan, and J.G.
Wilpon.1998.
VPQ: A spoken language interfaceto large scale directory information.
InProc.
ICSLP Sydney.199
