ON DETERMINING THE CONSISTENCY OF PARTIALDESCRIPTIONS OF TREESThomas L. CornellCognitive Science ProgramUniversity of ArizonaTucson, AZ 85721cornell@ccit.arizona.eduAbstract 1We examine the consistency problem fordescriptions of trees based on remote dominance,and present a consistency-checking algorithmwhich is polynomial in the number of nodes inthe description, despite disjunctions inherent inthe theory of trees.
The resulting algorithmallows for descriptions which go beyond sets ofatomic formulas to allow certain types ofdisjunction and negation.INTRODUCTIONIn Marcus, Hindle & Fleck (1983), the authorsproposed an approach to syntactic tree structureswhich took the primary structural relation to beremote dominance rather than immediatedominance.
Recently, researchers have shown arevived interest in variants of Marcus et al's D-Theory, most likely due to the availability ofapproaches and techniques developed in thestudy of feature structures and their underlyinglogics.
For example, both Rogers & Vijay-Shanker (1992) and Cornell (1992) presentformal treatments of many notions which Marcuset al (1983) treated only informally andincompletely.
Furthermore,  work on thepsycholinguistic implications of this approachhas continued apace (Weinberg 1988; Gorrell1991; Marcus & Hindle 1990), making all themore necessary sustained foundational work inthe theory of description-based tree-buildingapplications (parsers, generators, etc.
)This paper addresses one particular problemthat arises in this approach to tree building.
Aswith feature-structures, the essential operationhere is the combination of two collections ofpartial information about the syntactic structureof an expression.
It may happen that the two1 Many thanks to Dick Oehrle, Ed Stabler, DrewMoshier and Mark 3ohnson for comments, discussionand encouragement.
Theirs the gratitude, mine thefault.collections to be combined contain contradictoryinformation.
For example one might contain theassertion that "node 7 dominates node 12" whilethe other claims that "node 12 precedes node 7".No tree structure can satisfy both theseconstraints.
The operation of descriptioncombination is thus not simple set union, but,like unification, involves taking a least upperbound in a semi-lattice where lub's are noteverywhere defined.Both Rogers & Vijay-Shanker (1992) andCornell (1992) propose to solve the D-Theoreticconsistency problem by using essential lyTableau-based approaches.
This can lead tocombinator ia l  explosion in the face ofdisjunctions inherent in the theory of trees.
Butas it happens, proof techniques designed tohandle general disjunctions are more powerfulthan we need; the disjunctions that arise fromthe theory of trees are of a restricted kind whichcan be handled by strictly polynomial means.
Wewill see that we can efficiently handle richernotions of description than those in the"classical" D-Theory of Marcus, et al (1983).D-THEORYANDTREETHEORYDESCRIPTION LANGUAGEWe will make use of the following descriptionlanguage ,,~.
Define the set of basic relationnames, R, as:b - - "be low"  (i.e., dominated-by)d - -  "dominates"e - -  "equals"f --"follows" (i.e., preceded-by)p - -  "precedes"We define an algebra on relation names asfollows.
($1 V $2)(x,y) =def the collection of relationnames in either $1 or S2.
(S1 A $2)(x,y) =def the collection of relationnames in both $1 and $2.S'(xoI) --def the collection of relation names163not in S.We then define the full set of compound relationname expressions R* as the closure of the basicrelation names under A, V and '.
A formula ofis then an element of R* applied to a pair ofnode names.
We will often refer to thecompound relation name expression in a formulaS(x,31 ) as a constraint on the pair x, 31.Semantically, we treat S(x,31 ) as satisfiable if wecan assign the denotata of the pair x, 31 to atleast one of the relations denoted by members ofS.
On this semantics, if S(x,31 ) is satisfiable andS ~< T, then T(x,31 ) is satisfiable as well.
Clearlythe empty constraint (x,31) is never satisfiable.
(Atoms of the form e(x,31 ) are satisfiable if andonly if x and 31 denote identical members of thedomain of discourse.
Atoms of the form b(x,31)and f(x,31) are to be considered equivalent tod(31,x ) and p(31,x), respectively.
)A description is a finite set of formulas.
If adescription contains only formulas with a basicrelation name, we will call it classical, since thisis the type of description considered in Marcuset al (1983).AXIOMSNote that such structures are not guaranteed tobe trees.
Therefore we make use of the followingfragment of an axiomatization of tree structures,which we will assume in the background of allthat follows, and formalize in the next section.Strictness.
Dominance and precedence are strictpartial orders, i.e., transitive and irreflexiverelations.Equality.
We assume that equality is reflexive,and that we can freely substitute equals forequals.Exhaustiveness.
Every pair of nodes in a treestand in at least one of the five possiblerelations.
I.e.
R(x,31 ) for all x and 31.Inheritance.
All nodes inherit the precedenceproperties of their ancestors.
So if p(x,31 ) andd(31,z), then p(x,z) as well.A number of familiar properties of trees followfrom the above system.
Inheritance assures boththe non-tangl ing of tree branches and theimpossibility of upward branching ('V-shaped')conf igurat ions .
Inher i tance ,  T rans i t iv i ty ,Substitution of equals and Exhaustiveness jointlyderive the property of Exclusiueness, which statesthat every pair of nodes is related in at most oneway.
(Note that it is Exclusiveness which assuresthe soundess of our use of A.)
A less familiarproperty, which we will make some use of, isroughly parallel to Inher i tance;  UpwardsInheritance states that if x dominates 31 and 31precedes (follows) z, then x dominates orprecedes (follows) z.Note that this system is not meant to be anaxiomatic definition of trees; it lacks aRootedness condition, and it allows infinite anddensely ordered structures.
It is specificallyadapted to the satisfiabilit31 problem, rather thanthe oalidit31 prob lem.
It is re la t ive lystraightforward to show that, from any finiteatomic dE-description satisfying these conditions,we can construct a finite tree or a precedenceordered finite forest of finite trees (which can beextended to a finite tree by the addition of aroot node).
So this system is complete as far assatisfiability is concerned.
Briefly, if a set offormulas satisfies all of the above constraints,then we can (1) construct a new description overthe quotient node-space modulo e; (2) list thedominance chains; (3) add a root if necessary;(4) noting that the dominance maximal elementsunder the root must be totally precedenceordered (they must be ordered and they cannotbe dominance ordered or they would not bemaximal),  we number them accordingly; (5)apply the same procedure to the dominanceideals generated by each of the root's daughters.From the resulting numbering we can construct a"tree domain" straightforwardly.
The Inheritanceproperty assures us that dominance chains arenon-tangled, so that the ideal generatred by anynode will be disjoint from the ideal generated byany node precedence-ordered with respect to thefirst.
Therefore no node will receive twonumbers, and, by Exhaustiveness, every nodewill receive a number.DEDUCTION WITH DESCRIPTIONSThere is a strong formal parallel among theaxioms of Transitivity, Substitution of Equals,and Inheritance: each allows us to reason from apair of atomic formulas to a single atomicformula.
Thus they allow us to reason fromclassical descriptions to (slightly larger) classicaldescriptions.
Let us refer to these axioms as9enerators.
The reason for adopting dE as adescription language, rather than the simplerlanguage of Marcus et al (1983), is that we cannow treat the No Upward Branching property ("ifx and z both dominate 31 then x dominates z orz dominates x or they are equal,") and theUpwards Inheritance property as generators.They allow us to reason from pairs of atomicformulas (e.g., d(x,31 ) and P(31,z)) to compoundformulas (e.g., dp(x,z)).
This means that we canexpress the consequences of any pair of atomic164b(x,y) b(x,z)d(x,y) bde(x,z)e(x,y) b(x,z)f(x,y) bf(x,z)p(x,y) bp(x,z)R(x,z)\]f(x,z)p(x,z)b(x,z) fix,z) p(x,z)d(x,z) df(x,z) ' dp(x,z)~(x,z) fix,z) i p(x,z)f(x,z) f(x,z) R(x,z)p(x,z) R(x,z)Figure 1.
Generator Table.formulas as a formula of d~, though possibly acompound formula.
They are exhibited in Figure1.
Cells corresponding to axioms in the theoryare boxed.For doing formal deductions we will employa sequent calculus adapted to our descriptionlanguage ~.
We assume that sequents are pairsof finite sets of formulas, and we can make thefurther restriction that formulas on the right ofthe sequent arrow ("succedents") contain at mosta single member.
The axioms of the calculus weemploy are exhibited in Figure 2, and theconnective rules in Figure 3.Structural Axioms: F,A --.
AGenerator Axioms: F, Sl(x,y),S2(y,z) --- S3(x,z)for all instances of the generatorsExhaustiveness: --.
R(x,y) for all x, yFigure 2.
D-The0ry Axioms.A sequent \[F --, A\] is interpreted as animplication from conjunctions to disjunctions: ifeverything in F is true, then something in Amust be true.
It follows that \[--*A\] is invariablytrue, and \[F--,\] is invariably false.
A sequentcalculus proof is a tree (written right side up,with its root on the bottom) labeled withsequents.
The theorem to be proved labels itsroot, the leaves are labeled with axioms, and allthe local subtrees must be accepted by someinference rule.
A proof that a description F0 isinconsistent is a proof of the sequent \[F0--*\].Note thatr-- ,  (x,~)F--,is a valid inference, essentially since (x,y) andthe empty succedent both express the emptydisjunction.RALVr ,  Sl(x,y) -.
ALA ($2 ~< S1)F, S2(x,y) --, AF --* Sl(x,y) r --* S2(x,y)F --* (S IA  S2)(x,y)F, Sl(x,y) -,  A r ,  SZ(x.y) --, Ar , ( sa  v se)(x,y)  --, z~r -.
Sa(x,y)Rv ($2 <<.
S1 )r - .
S2(x,y)F --* S(x,y)L'r , s '~ ,y )~r , s (x ,y )  -~R'F -, S'(x,y)Figure 3.
D-Theory Inference Rules.TWO ALGORITHMSSuppose we are given an input description F0 tocheck for satisfiability.
If it is unsatisfiable, thenit contradicts one of the axioms of the treetheory: Exhaustiveness, Reflexivity of Equals,lrreflexivity of Dominance and Precedence, andthe Generators.
A complete consistency checkermust be able to exhaust the consequences ofthese axioms for F0, monitoring for the falseformula (x,~/).Both algorithms take as input a descriptionand an integer indicating the number of node-names constrained by the description.
In theProlog implementat ions that fol low, thedescription is expected to be a list of constraintsin normal order, that is, with the first argumentlexicographically less than or equal to thesecond.
Thus, assuming we are using integers asnode names, the normal order form of d(2,1)will be b(1,2) .
Furthermore, the description isassumed to be sorted by its node-pairs.
This willal low us to use ef f ic ient  o rdered-setmanipulations.For any given set of nodes of size N, we canconstruct a description which is a filter forviolations of Reflexivity, lrreflexivity andExhaustiveness.
We construct F N to contain forevery pair of nodes x,, xj, i,j <~ N, e(x,,xj) if i =j,and e'(x,xi)  (i.e., bdfp(x ,x i ) )  if i# j .
We can165e(1,3),d(1,2),p(2,3)--,dp(l,3) d(l,2),p(2,3),e(1,3)~e(l,3)RAe(1,3), d(1,2),p(2,3) ~ (1,3)e(1,3), d(l,2), p(2,3) ---,VLVFigure 4.
{d(1,3), e(1,3), p(2,3)} is Inconsistent.Ae(1,3), d(1,2),p(2,3) --.
e(1,3), p(1,2),p(2,3) --.e(1,3), dp(1,2), p(2,3)LVf(1,3),d(1,2),p(2,3)~ f(1,3),p(1,2),p(2,3)~Lvf(1,3), dp(1,2), p(2,3) --,el(l,3), dp(1,2), p(2,3) --,Figure 5.
{ef(1,3),dp(1,2), p(2,3)} is Inconsistent (A RA-LV Proof).determine that a description F0 violates eitherReflexivity, lrreflexivity or Exhaustiveness implyby taking its pointwise meet F0 I"1 FN .2 If adescription is in violation of the Exhaustivenesscondition, then it contains some formula S(x,21)with some part of S not given in R*.
In thatcase, taking its meet with anything ~< R(x,21) willprune away the offending part.
Similarly, if aconstraint on a reflexive pair of nodes S(x,x)fails to have eE S, then taking its meet withe(x,x) will yield (x,x).
Finally, taking the meetof S(x,y), x # 2t, with e'(x,21) will yield (x,21) ifS = e; in arty case it will have the useful effect ofpruning e out of S. Therefore both algorithmsbegin by constructing F N and then taking itsmeet with the input description.
This has theextra side effect that any pair of nodes x and 21not explicitly constrained in the input will nowbe explicitly constrained.EXTEND : TOP-DOWN BACKTRACKINGSEARCH FOR CONSISTENT MAXIMALEXTENSIONSGiven that we have begun by taking F0 I-I F N, wehave only the generators left to check F0 against.We can think of the generator table as defininga function from pairs of atomic formulas toconsequences.
To use it we must first haveatomic formulas.Def'n: A description r '  is a maximal extension ofa description F if, for every formula S(x,y) in2 We can assume that any pair of nodes x, y notexplicitly constrained in the input is implicitlyconstrained by R(x,y).
Of course, (RAe')= e', so thisassumption just amounts to setting unmentioned pairsof (distinct) nodes to e'(x,y).FRFN, r '  contains (x,y) for some sES.An obvious solution is to enumerate the maximalextensions of F0 F'I F N and feed them to thegenerators.
If any such extension passes thegenerators, then it is satisfiable, and therefore itis a witness to the satisfiability of F0.
If theextension is unsatisfiable, then it must violate atleast one of the generators.
Because a maximalextension is a total assignment of node-pairs torelations, a single application of a well-chosengenerator will suffice to derive a contradiction.And so a single pass through the complete set ofapplicable generators should be sufficient todecide if a given maximal extension isconsistent.Thus, if the input descript ion F0 isinconsistent, then there is a proof of F0--, inwhich every branch of the proof ends in a sub-proof like that in Figure 4.
There we have thesimple description {d(1,2),e(1,3),p(2,3)}, whichgives us dp(1 ,3 ) ,  by a generator (UpwardsInheritance, in this case), and e (1 ,3 ) ,  by astructural axiom.
Combining these by aninvocation of RA we get the false formula (1,3).The roots of these sub-proofs can be combinedusing LV until we eventually build up the inputdescription on the left, proving F0- ' ,  as inFigure 5.The fol lowing fragment of a Prologimplementation of max_extension/3 can be seenas implementing a backwards chaining search forsuch a "RA-LV" proof.
The input to both extendand to close (see below, next section) is assumedto be an ~-description together with an integergiving the number of node-names ubject to thedescription.
The node-count is used to constructthe appropriate FN for this description.
Note166that, aside from implementing pointwise /-1,merge descs/3 checks for the derivation of anempty constraint, and fails if that happens.
Thereal work is then done by extend/3, which is arecursion on an Agenda.
The agenda isinitialized to the input description.
As individualconstraints are narrowed, they are added to theagenda so as to implement constraintpropagation.max_axtension( DO, N, Extension ) :-it reflexive_rule( N, Filter_N ),merge._descs( DO, Filter_N, D1 ),Agenda = D1,extend( Agenda, D1, Extension ).extend( \[\], X, X ).extend( \[COICs\], D0, X ) :-consequences( CO, D0, Conseqs ),meet_rule( Conseqs, DO, D1, NewCons ),merge_descs( NewCons, Cs, Agenda1 ),extend( Agenda1, D1, X ).Meet_rule/4, in the second clause of extend~3,differs from merge_descs/3 only in (a) sorting itsfirst argument and (b) deriving both the mergeddescription (D1) and a list of those consequenceswhich actually had some effect on DO.
Bothmerge_descs/3 and meet_rule/'\[ are based onroutines for ordered set union from O'Keefe(1990).
The main difference is that ordering isdefined on the node-pairs of the constraint,rather than on the term expressing the constraintas a whole; equality is defined so that twoconstraints are equal if they constrain the samenode pair, and if two formulas are 'equal' in thissense, then the output contains the meet of theirrespective relation names expressions.
The trulynew consequences derived by meet_rule/4 arethen added to the remaining agenda (Cs) withanother call to merge_descs/3.
(If NewCons weremerely appended to Cs, we could have twoconstraints on the same pair of nodes in theagenda at once, either of which may be lesstightly constrained than the result of merging thetwo instances.
)Extend/3 thus both consumes items off theagenda (CO) and adds new items (NewCons).However, each new consequence, if it is trulynovel, represents the narrowing of a constraint;since each pair starts with a maximum of fouroptions, clearly we will eventually run out ofoptions to remove; NewCons will be empty, theremaining agenda will eventually be consumed,and the program will halt.The core of extend/3 is consequences/3,which determines for any given constraint whatconsequences it has when paired with each of theconstraints in the description.
Consequences/3has two clauses; the first handles compoundformulas, while the second handles atomicformulas.
The second clause of consequences/3invokes the Splitting Rule, which implementsLV.Note that, instead of exhausting theconsequences of the Splitting Rule and thenapplying the Generator Rule, we apply theGenerator Rule whenever we can.
This isbecause it can act to prune away options fromits consequents ,  thus min imiz ing  thecombinatorial explosion lurking behind theSplitting Rule.
Furthermore, if an application ofthe Generator Rule does lead to the discovery ofan inconsistency, then the program backtracks toits last application of the Splitting Rule, ineffect pruning away from its search tree allfurther consequences of its inconsistent choice.consequences( C. _D, Consequences ) :-compound_formula( C ),splittingrule( C, Consequences ).consequences( C, D, Consequences ) :-atomic_formula( C ),generator_rule( D, C, Consequences ).atomic_formula(\[_\]:(_~_) ).compound_formula(L,_L.\]:(_,_) ).splitting_rule( C, \[Assumption\] ) :-C = Rels:Nodes,member( R, Rels ),Assumption = \[R\]:Nodes.The heart of consequences/3 is the GeneratorRule, implemented as generator_rule/3.
It scansthe current description for formulas which forma connected pair with its second argument.
Notethat in all our examples, we have carefullypresented inputs to the generators as Sx(x,3),Sz(y,z).
Such a combination can be looked updirectly in the generator table.
However, notethat St(x,y), S2(z,y) is no less a connected pair.In order to match it to the generator table,though, we need to invert the second member,giving Sz' l (y,z) .
Th is  is done byconnected order/4, which succeeds, returning theconnected form of  the formulas, if they have aconnected form, and fails otherwise.
If itsucceeds, then there is art entry in the generatortable which gives the consequence of thatconnected pair.
This consequence (XZ) is thenplaced in normal order (C3), and added to theoutput list of consequences.If C2 is an unconnected atom, or acompound formula, it is skipped.
Note thatskipping compound formulas does not affect the167completeness of the algorithm.
Every agendaitem leads a dual life: as an agenda item, and asa member of the current description.
Theignored compound formula will eventually besubjected to the Splitting Rule, the result beingplaced on the agenda.
It will then eventually bepaired with C2's entry in the description by theGenerator Rule.
The only difference will be inwhich formula is the left antecedent and whichthe right; but that doesn't matter, since they'll beconverted to connected form in any case, andtheir result will be converted to normal order.
3generator_rule( ~, _C, \[1 ).generator_rule( \[C21Rest\], C1, \[C3lConseqs\] ) :-atomic._formula( C2 ),connected_order( C1, C2, XY, YZ ),gen( XY, YZ, XZ ),normal_order( XZ, C3 ),generator_rule( Rest, C1, Conseqs ).generator_rule( \[C21Rest\], C1, Conseqs ) :-atomic_formula( C2 ),\+ connected_order( C1, C2 .
.
.
.
),generator_rule( Rest, C1, Conseqs ).generator__rule( \[C2JRest\], C1, Conseqs ) :-compound_formula( C2 ),generator_rule( Rest, C1, Conseqs ).Every rule applied in this procedure is based ona rule in the associated sequent calculus.
TheSplitting Rule is just LV; the Meet Rule is RA;and the Generator Rule is just the application ofan axiom.
So there can be little doubt that thealgorithm is a sound implementation of a searchfor a LV-RA proof of F0 --,.
That it is completefollows from the fact that consistent maximalextensions are Hintikka sets.
In particular, everygenerator F ,A ,B - - *  C has the same truthcond i t ions  as the set of fo rmulasF U {',AV'~BVC}.
So a maximal extension is aHintikka set if it contains either -,A or "~B or Cfor every generator.
The exhaustiveness of oursearch assures this: every pair of constraints ischecked at least once to see if it matches a3 In fact, every connected pair has two connectedforms: Sl(x,y), S2(y,z) and T~(z,y), Tl(y,z).Unsurprisingly, in this case the output of thegenerator table for T2 and T: will be the inverse ofwhat it is for S~ and $2.
In either case, the output willbe placed in normal order before being entered intothe description, so we have the requiredcommutativity,generator.
If it does not then the extension mustcontain either ",A or -~B.
If it does, then theextension contains A and B, and so it must alsocontain C, or be found inconsistent by the MeetRule/RA.However, completeness i purchased at thecost of the complexities of exhaustive search.Note that the Splitting Rule is the only source ofnon-determinism in the program.
All of theroutines whose definitions were left out aredeterministic.
The ordered set manipulations arelinear in the size of the combined input lists; thesort called by the Meet Rule is just a variant ofmerge-sort, and so of N logN complexity; themany inversions which may have to be done arelinear in the length of the constraint list, whichis bounded from above by 4, so they can betreated as constant ime operations.
It is only theSplitting Rule that causes us trouble.
The secondalgorithm attempts to address this problem.CLOSE : POLYNOMIAL  SEARCH FOR ALv -RA PROOFThe basic design problem to  be solved is thatthe generator table accepts only atomic formulasas inputs,  while the descr ipt ion whoseconsistency is at issue may contain any numberof compound formulas.
Extend solved thisproblem by 'bringing the description to thegenerators, '  Close solves this problem by'bringing the generators to the description.
'F igure 6 represents  a proof  that{dp(1,2) ,bf(1,B),dp(2,3)} is inconsistent.
Herethe leaves are almost entirely drawn from thegenerator axioms.
Only the r ightmost leafinvokes a structural axiom.
The initial stages ofthe proof involve combining generators by meansof RV and LV until the two antecedent atomsmatch a pair of compound atoms found in theinput description (in this case dp(1,2) anddp(2,3)).
Then this 'compound generator' is fedinto the RA rule together with the correspondingstructural axiom, generating our inconsistency.Close, like extend, implements a backwardschaining search for a proof of the relevant sort.The code for the two algorithms has been madealmost identical, for the purposes of this paper.The sole essential difference is that nowconsequences/3 has only one clause, whichinvokes the New Generator Rule.
The input tonew_generator_rule/3 is the same as the input togenerator_rule/3: the current description, aconstraint looking to be the left antecedent of agenerator, and the output consequences.
Like theold rule, the new rule searches the currentdescription for a connected formula (now not168RV bf(l ,3),d(l,2),d(2,3) --, d(l,3) bf(1,3),p(l,2),d(2,3) --* p(l,3) RVLV bf(1,3),d(1,2),d(2,3) --.
dp(1,3) bf(1,3),p(1,2),d(2,3) --.
dp(1,3)bf(l,a),dp(l,2),d(2,3) --.
dp(l,3)Vbf(1,3),p(1,2),p(2,3) ---, p(1,3)Lv bf(1,3),d(1,2),p(2,3) -.
@(1,3) bf(1,3),p(1,2),p(2,3) -, @(1,3)bf(1,3),dp(1,2),p(2,3) -, dp(1,3)VA ALv bf(1,3),dp(1,2),d(Z,3) -, @(1,3) bf(1,3),dp(1,Z),p(2,3) --, @(1,3)RA bf(1,3),dp(1,Z),dp(2,3) ~ dp(1,3) dp(1,2),dp(2,3),bf(1,3) -.
bf(1,3)dp(l,2),bf(l,3),dp(2,3) ---.
(1,3)RvFigure 6.
A LV-RA Proof that {dp(1,2), bf(1,3), dp(2,3)} is Inconsistent.necessarily atomic).
From the resulting connectedpair it constructs a compound generator bytaking the cross product of the atomic relationsin the compound formulas (in a double loopimplemented in distribute/4 and distrib_l/4),feeding the atomic pairs so constructed to thegenerator table (in distrib 1/4), and joining eachsuccessive generator output.
The result is acompound generator whose consequent representsthe join of all the atomic generators that wentinto its construction.newgeneratorrule( U, _C, fl )-new generator_rule( \[C21Rest\], C1, \[C31Cons\] ) :-connected_order( C1, C2, $1 :(X,Y), S2:(Y,Z) ),distribute( $1 :(X,Y), S2:(Y,Z), \[\]:(X,Z), S3:(X,Z) ),normal_order(S3:(X,Z), C3 ),new_generator_rule( Rest, C1, Cons ).new_generator_rule( \[C21Rest\], C1, Cons ) :-\+ connected order( C1, C2 .
.
.
.
),new_generator_rule( Rest, C1, Cons ).distribute( ~:_, _C2, Cons, Cons ).distribute( \[RIlS1\]:XY, S2:YZ, S3a:XZ, S3:XZ ) :-distrib_J (S2:YZ, \[RlJ:XY, S3a:XZ, S3b:XZ ),distribute( $1 :XY, S2:YZ, S3b:XZ, S3:XZ ).distdb_l( \[\].
'.._, _C1, Cons, Cons ).dislrib_l( \[R21S2\]:YZ, $1 :XY, S3a:XZ, S3:XZ ) :-gen( $1 :XY.
\[R2\]:YZ, S3b:XZ ),ord_union( S3a, S3b, $3c ),distrib 1 ( S2:YZ, $1 :XY, S3c:XZ, S3:XZ ).On completion of the double loop, control worksits way back to consequences/3 and thence to theMeet Rule, as usual.Unlike extend, close is deterministic.
Eachagenda item is compared to each item in thecurrent descr ipt ion,  and that is that.Furthermore,  the complexity of the NewGenerator Rule is not much greater than before:the double loop we have added can only beexecuted a maximum of 4 x 4 -- 16 times, so wehave increased the complexity of the algorithm,considered apart from the Splitting Rule, by atmost a constant factor.
The question is: at whatcost?Before we turn to the analysis of close,however, note that its output is different fromthat of extend.
Extend returns a maximalextension, selected non-deterministically.
Closereturns the input description, but with valuesthat could not be part of any solution removed.Essentially, close returns the pointwise join of allof F0's consistent maximal extensions.This action, of joining all the atomicconsequences of a pair of constraints, does notpreserve all of the information present in theatomic consequences.
Consider the followingdescription.F0 : {d(1,2), dp(1,3), dp(2,3)}F0 is its own closure, and is consistent.
However,if we examine its maximal extensions, we notethat one of themr3 : {d(1,2), p(1,3), d(2,3)}is inconsistent.
There is nothing in F0 to tell usthat one combination of the values it presents isimpossible.
Note that this may not be essentialto proving inconsistency: for F0 to beinconsistent, it would have to be the case thatall values in some constraint were ruled out inall maximal extensions.169ANALYSIS OF CLOSEWe first argue that close is indeed finding a LV-RA proof of F0 --,.
Note that in our toy exampleof Figure 6 only a single 'compound generator'was required to derive the empty solution.
Ingeneral it may take several compound generatorsto build a proof of F0--*.
Each one functions toremove some of the possibilities from aconstraint, until eventually no possibilities areleft.
Thus we have a LV-RA proof of F0-, ifand only if we have a proof of FQ --, (x,y), forsome x and y.
Let us call such a (not necessarilyunique) pair a critical pair in the proof of F0---,,and its associated constraint in F0 a criticalconstraint.It is not at all obvious how to choose acritical constraint beforehand, so close mustsearch for it.
Every time it calls the NewGenerator Rule and then calls the Meet Rule tomerge in its consequence, it constructs afragment of a LV-RA proof.
We could then takethe constraint which it finally succeeds inemptying out as the critical constraint, collectthe proof fragments having that constraint astheir succedent, and plug them together in theorder they were generated to supply us with aLV-RA proof of F0 --*.So close will find a LV-RA proof of F0-,, ifone exists.
It is not clear, however, that such aproof always exists when F0 is unsatisfiable.Close is essentially a variant of the path-consistency algorithms frequently discussed inthe Constraint  Satisfact ion l i terature(IVlackworth, 1977; Allen, 1983).
It is known thatpath-consistency is not in general a strongenough condition to ensure completeness.
Thereare, however, special cases where path-consistency techniques are complete (Montanari,1974).So far, close appears to be complete, (twoyears of work have failed to turn up acounterexample) but it is unlikely to yield aneasy completeness proof.
The algorithmpresented here is strongly reminiscent of thealgorithm in Allen (1983), which is demonstrablyincomplete for the temporal reasoning problemsto which he applied it.
Therefore, if close iscomplete for D-theory, it can only be due to aproperty of the generator axioms, that is, toproperties of trees, as contrasted with propertiesof temporal intervals.
Standard approaches ofany generality will almost certainly generalize tothe temporal reasoning case.REFERENCESAllen, 2ames F. 1983.
Maintaining Knowledgeabout Temporal Intervals.
Communications fthe ACM 26(11): 832-843.Cornell, Thomas L. 1992.
Description Theory,Licensing Theory and Principle-Based Grammarsand Parsers.
UCLA Ph.D. thesis.Gorrell, P. 1991.
Subcategorization a d SentenceProcessing.
In Berwick, R., S. Abney & C.Tenney, eds.
Principle-Based Parsing:Computation and Psycholinguistics.
Kluwer,Dordrecht.Mackworth, Alan K. 1977.
Consistency inNetworks of Relations.
Artificial Intelligence 8:99-118.Marcus, Mitchell P., & Donald Hindle.
(1990).Description Theory and IntonationBoundaries.
In G. T. M. Ahman (Ed.
),Cognitioe Models of Speech Processing (pp.
483-512).
Cambridge, MA: MIT Press.Marcus, Mitchell P., Donald Hindle & MargaretM.
Fleck.
1983.
D-Theory: Talking aboutTalking about Trees.
Proceedings of the 21stMtg.
of the A CL.Montanari, Ugo.
1974.
Networks of Constraints:Fundamental Properties and Applications toPicture Processing.
Information Sciences 7:95-132.O'Keefe, Richard A.
1990.
The Craft of Prolog.Cambridge, MA: MIT Press.Rogers, 3ames & K. Vijay-Shanker.
1992.Reasoning with Descriptions of Trees.Proceedings ofthe 30th Mtg.
of the ACL.Weinberg, A.
1988.
Locality Principles in Syntaxand in Parsing.
MIT Ph.D. dissertation.170
