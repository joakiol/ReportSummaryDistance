AN OPT IMAL  TABULAR PARSING ALGORITHMMark- Jan  Nederhof  *University of Nijmegen, Department ofComputer ScienceToernooiveld, 6525 ED Nijmegen, The Netherlandsmarkj an~cs, kun.
nlAbst ractIn this paper we relate a number of parsing algorithmswhich have been developed in very different areas ofparsing theory, and which include deterministic algo-rithms, tabular algorithms, and a parallel algorithm.We show that these algorithms are based on the sameunderlying ideas.By relating existing ideas, we hope to provide an op-portunity to improve some algorithms based on featuresof others.
A second purpose of this paper is to answer aquestion which has come up in the area of tabular pars-ing, namely how to obtain a parsing algorithm with theproperty that the table will contain as little entries aspossible, but without the possibility that two entriesrepresent the same subderivation.In t roduct ionLeft-corner (LC) parsing is a parsing strategy whichhas been used in different guises in various areas of com-puter science.
Deterministic LC parsing with k symbolsof lookahead can handle the class of LC(k) grammars.Since LC parsing is a very simple parsing technique andat the same time is able to deal with left recursion, it isoften used as an alternative to top-down (TD) parsing,which cannot handle left recursion and is generally lessefficient.Nondeterministic LC parsing is the foundation of avery efficient parsing algorithm \[7\], related to Tomita'salgorithm and Earley's algorithm.
It has one disad-vantage however, which becomes noticeable when thegrammar contains many rules whose right-hand sidesbegin with the same few grammars ymbols, e.g.A ~ c~f~l I ~f~2 I ...where ~ is not the empty string.
After an LC parserhas recognized the first symbol X of such an c~, it willas next step predict all aforementioned rules.
Thisamounts to much nondeterminism, which is detrimentalboth to the time-complexity and the space-complexity.
*Supported by the Dutch Organisation for Scientific Re-search (NWO), under grant 00-62-518A first attempt o solve this problem is to use predic-tive LR (PLR) parsing.
PLR parsing allows simulta-neous processing of a common prefix c~, provided thatthe left-hand sides of the rules are the same.
However,in case we have e.g.
the rules A --* c~t31 and B --~ ~/32,where again ~ is not the empty string but now A ~ B,then PLR parsing will not improve the efficiency.
Wetherefore go one step further and discuss extended LR(ELR) and common-prefix (CP) parsing, which are al-gorithms capable of simultaneous processing of all com-mon prefixes.
ELR and CP parsing are the foundationof tabular parsing algorithms and a parallel parsing al-gorithm from the existing literature, but they have notbeen described in their own right.To the best of the author's knowledge, the variousparsing algorithms mentioned above have not been dis-cussed together in the existing literature.
The mainpurpose of this paper is to make explicit the connec-tions between these algorithms.A second purpose of this paper is to show that CPand ELR parsing are obvious solutions to a problem oftabular parsing which can be described as follows.
Foreach parsing algorithm working on a stack there is arealisation using a parse table, where the parse tableallows sharing of computation between different searchpaths.
For example, Tomita's algorithm \[18\] can be seenas a tabular realisation of nondeterministic LR parsing.At this point we use the term state to indicate thesymbols occurring on the stack of the original algo-rithm, which also occur as entries in the parse tableof its tabular realisation.In general, powerful algorithms working on a stacklead to efficient tabular parsing algorithms, providedthe grammar can be handled almost deterministically.In case the stack algorithm is very nondeterministic fora certain grammar however, sophistication which in-creases the number of states may lead to an increasingnumber of entries in the parse table of the tabular re-alization.
This can be informally explained by the factthat each state represents the computation of a numberof subderivations.
If the number of states is increasedthen it is inevitable that at some point some statesrepresent an overlapping collection of subderivations,117which may lead to work being repeated uring parsing.Furthermore, the parse forest (a compact representa-tion of all parse trees) which is output by a tabularalgorithm may in this case not be optimally dense.We conclude that we have a tradeoff between the casethat the grammar allows almost deterministic parsingand the case that the stack algorithm is very nondeter-ministic for a certain grammar.
In the former case, so-phistication leads to less entries in the table, and in thelatter case, sophistication leads to more entries, pro-vided this sophistication is realised by an increase inthe number of states.
This is corroborated by empiricaldata from \[1, 4\], which deal with tabular LR parsing.As we will explain, CP and ELR parsing are moredeterministic than most other parsing algorithms formany grammars, but their tabular realizations cannever compute the same subderivation twice.
This rep-resents an optimum in a range of possible parsing algo-rithms.This paper is organized as follows.
First we discussnondeterministic left-corner parsing, and demonstratehow common prefixes in a grammar may be a source ofbad performance for this technique.Then, a multitude of parsing techniques which ex-hibit better treatment of common prefixes is dis-cussed.
These techniques, including nondeterministicPLR, ELR, and CP parsing, have their origins in theoryof deterministic, parallel, and tabular parsing.
Subse-quently, the application to parallel and tabular parsingis investigated more closely.Further, we briefly describe how rules with emptyright-hand sides complicate the parsing process.The ideas described in this paper can be generalizedto head-driven parsing, as argued in \[9\].We will take some liberty in describing algorithmsfrom the existing literature, since using the original de-scriptions would blur the similarities of the algorithmsto one another.
In particular, we will not treat the useof lookahead, and we will consider all algorithms work-ing on a stack to be nondeterministic.
We will onlydescribe recognition algorithms.
Each of the algorithmscan however be easily extended to yield parse trees asa side-effect of recognition.The notation used in the sequel is for the most partstandard and is summarised below.A context-free grammar G = (T, N, P, S) consists oftwo finite disjoint sets N and T of nonterminals andterminals, respectively, a start symbol S E N, and afinite set of rules P. Every rule has the form A --* c~,where the left-hand side (lhs) A is an element from Nand the right-hand side (rhs) a is an element from V*,where V denotes (NUT) .
P can also be seen as arelation on N ?
V*.We use symbols A, B, C , .
.
.
to range over N, symbolsa, b, c , .
.
.
to range over T, symbols X, \]I, Z to range overV, symbols c~, \[3, 7 , - .
.
to range over V*, and v, w, x , .
.
.to range over T*.
We let e denote the empty string.
Thenotation of rules A --* a l ,  A --* a2 , .
.
,  with the samelhs is often simplified to A ~ c~1\]a21...A rule of the form A --~ e is called an epsilon rule.We assume grammars do not have epsilon rules unlessstated otherwise.The relation P is extended to a relation ~ on V* ?
V*as usual.
The reflexive and transitive closure of ~ isdenoted by --**.We define: B L A if and only if A --* Be  for some a.The reflexive and transitive closure of / is denoted by/*, and is called the left-corner elation.We say two rules A --* a l  and B --* a2 have a com-mon prefix \[3 if c~1 = \[3"/1 and a2 = \[3'/2, for some '/1and '/2, where \[3 ?
e.A recognition algorithm can be specified by meansof a push-down automaton A = (T, Alph, Init, ~-, Fin),which manipulates configurations of the form (F,v),where F E Alph* is the stack, constructed from leftto right, and v ?
T* is the remaining input.The initial configuration is (Init, w), where Init EAlph is a distinguished stack symbol, and w is the input.The steps of an automaton are specified by means of therelation ~-.
Thus, (F,v) ~- (F ' ,v ' )  denotes that (F ' ,v ' )is obtainable from (F, v) by one step of the automaton.The reflexive and transitive closure of ~- is denoted byF-*.
The input w is accepted if (Init, w) F-* (Fin, e),where Fin E Alph is a distinguished stack symbol.LC pars ingFor the definition of left-corner (LC) recognition \[7\] weneed stack symbols (items) of the form \[A --~ a ?
\[3\],where A --~ c~\[3 is a rule, and a ?
e. (Remember thatwe do not allow epsilon rules.)
The informal meaningof an item is "The part before the dot has just beenrecognized, the first symbol after the dot is to be rec-ognized next".
For technical reasons we also need theitems \[S' ~ .
.S\]  and \[S' --~ S .\], where S' is a freshsymbol.
Formally:I LC = {\[A --* a ?
f \ ] l  A --* a f  ?
Pt  A(c~ ?
eVA -- S')}where p t  represents the augmented set of rules, consist-ing of the rules in P plus the extra rule S t --~ S.A lgor i thm 1 (Le f t -corner )ALe= (T , I  Lc, Init,~-, Fin), Init = IS' ---* ?
S\], Fin =\[S t --* S .\].
Transitions are allowed according to thefollowing clauses.1.
(FIB --* f ?
C'/\], av) ~-(F\[B --~/3 ?
CT\]\[A ~ a ?
~\], v)where there is A --* ac~ ?
P~ such that A \[* C2.
(F\[A --~ a ?
aft\], av) ~- (F\[A --* c~a ?/3\], v)3.
(FIB ~ \[3 ?
C'/ \ ] \ [d ~ ~ .\], v)( r ib  ~ f ?
C'/\]\[D ---, A ?
6\], v)where there is D ~ A5 ?
p t  such that D L* C4.
(FIB --* \[3 ?
A'/\]\[A ---* a .\], v) ~- (FIB ~ fA  ?
'/\], v)The conditions using the left-corner relation Z* in thefirst and third clauses together form a feature which is118called top-down (TD) filtering.
TD filtering makes surethat subderivations that are being computed bottom-up may eventually grow into subderivations with the re-quired root.
TD filtering is not necessary for a correctalgorithm, but it reduces nondeterminism, and guar-antees the correct-prefix property, which means that incase of incorrect input the parser does not read past thefirst incorrect character.Example  1 Consider the grammar with the followingrules:E ---* E+T\ [TTE\ [TT ~ T*F IT**F  IFF ---* aIt is easy to see that E / E ,T  Z E ,T  L T, F / T.The relation L* contains g but from the reflexive closureit also contains F L* F and from the transitive closureit also contains F L* E.The recognition of a * a is realised by:\ [E '  --* ?
E-I- a ,a1 \[E'--~ ?E \ ] \ [F - - *a ?
\ ]  *a2 \ [E ' - - * ?E \ ] \ [T~F ?
\ ]  *a3 \ [E ' - -~QE\ ] \ [T - - *T .
*F \ ]  *a4 \ [E '~ ?E \ ] \ [T~T.
?F \ ]  a5 \ [E '~.E I \ [T - - *T .
?
F \ ] \ [F - - - *ae \ ]6 \[E' ---* ?
E\]\[T ---* T * F ?\]7 \ [E '~ ?E \ ] \ [E~T ?
\ ]8 \ [E '~E ?
\ ]Note that since the automaton does not use any looka-head, Step 3 may also have replaced \[T ---* F ?\] byany other item besides \[T --* T ?
?
F\] whose rhs startswith T and whose lhs satisfies the condition of top-down filtering with regard to E, i.e.
by \[T --~ T ?
**F\] ,\[E ~ T .
T El, or \[E ~ T ?\].
\[\]LC parsing with k symbols of lookahead can handledeterministically the so called LC(k) grammars.
Thisclass of grammars is formalized in \[13\].
1 How LC pars-ing can be improved to handle common su~xes effi-ciently is discussed in \[6\]; in this paper we restrict ourattention to common prefixes.PLR, ELR, and CP parsingIn this section we investigate a number of algorithmswhich exhibit a better treatment of common prefixes.Pred ic t ive  LR  pars ingPredictive LR (PLR) parsing with k symbols of looka-head was introduced in \[17\] as an algorithm which yieldsefficient parsers for a subset of the LR(k) grammars \[16\]and a superset of the LC(k) grammars.
How determin-istic PLR parsing succeeds in handling a larger classof grammars (the PLR(k) grammars) than the LC(k)grammars can be explained by identifying PLR parsing1In \[17\] a different definition of the LC(k) grammars maybe found, which is not completely equivalent.for some grammar G with LC parsing for some gram-mar G t which results after applying a transformationcalled left-factoring.Left-factoring consists of replacing two or more rulesA ~ a/31 \[a/32\[... with a common prefix a by the rulesA ~ hA' and A' --* ~311f~2\[..., where A' is a fresh non-terminal.
The effect on LC parsing is that a choicebetween rules is postponed until after all symbols of aare completely recognized.
Investigation of the next ksymbols of the remaining input may then allow a choicebetween the rules to be made deterministically.The PLR algorithm is formalised in \[17\] by trans-forming a PLR(k) grammar into an LL(k) grammarand then assuming the standard realisation of LL(k)parsing.
When we consider nondeterministic top-downparsing instead of LL(k) parsing, then we obtain thenew formulation of nondeterministic PLR(0) parsingbelow.We first need to define another kind of item, viz.
ofthe form \[A --* ~\] such that there is at least one rule ofthe form A --* a/3 for some ft.
Formally:I PLR = {\[A ---* ~\] \[ A --* a/3 ?
p t  A (a # e V A = S')}Informally, an item \[A --* ~ I PLa a ?
represents one ormore items \[A --~ cr ?/3\] ?
I e.Algorithm 2 (Predictive LR)A PLR = (T, I PLR, Init, F-, Fin), Init = \[S' --~ \], Fin =\[S t --~ S\], and F- defined by:1.
(F\[B --~/3\], av) F- (rib -~/3\]\[A -~ ~\], ,)where there are A --~ as, B ---* tiC7 ?
p t  such thatAL*C2.
(F\[A --* a\], av) F- (r\[A --, ~a\], v)where there is A ~ haft ?
P+3.
(FIB--*/3\]\[A -* a\], v) b (rOB--,/3\]\[0--, A\], v)where A --* cr ?
P tand  where there are DA~f, B --~ f?C7 ?
p t  such that D /*  C4.
(F\[B --*/3\]\[A --, a\],v) ~- (F\[B --*/~A\], v)where A --~ a ?
pT and where there is B --~/3A7 ?p tExample  2 Consider the grammar from Example 1.Using Predictive LR, recognition of a * a is realised by:\[E' ~ \] a * a\[E' \]\[F a\] ?
a\[E' --~ \]\[T ---* F\] * a\[E' --* \]\[T --* T\] * a\[E' --* \]\[T ~ T .\] a:\[E' E\]Comparing these configurations with those reached bythe LC recognizer, we see that here after Step 3 thestack element IT --~ T\] represents both \[T ~ T ?
* F\]and \[T --* T ?
**F\], so that nondeterminism is reduced.Still some nondeterminism remains, since Step 3 couldalso have replaced \[T --* F\] by \[Z --* T\], which repre-sents both \[E --* T -  T E\] and \[E --~ T ?\].
\[\]119Extended L i t  pars ingAn extended context-free grammar has right-hand sidesconsisting of arbitrary regular expressions over V. Thisrequires an LR parser for an extended grammar (anELR parser) to behave differently from normal LRparsers.The behaviour of a normal LR parser upon a reduc-tion with some rule A --* a is very simple: it pops la\[states from the stack, revealing, say, state Q; it thenpushes state goto(Q, A).
(We identify a state with itscorresponding set of items.
)For extended grammars the behaviour upon a reduc-tion cannot be realised in this way since the regularexpression of which the rhs is composed may describestrings of various lengths, so that it is unknown howmany states need to be popped.In \[11\] this problem is solved by forcing the parser todecide at each call goto(Q, X)  whethera) X is one more symbol of an item in Q of which somesymbols have already been recognized, or whetherb) X is the first symbol of an item which has beenintroduced in Q by means of the closure function.In the second case, a state which is a variant ofgoto(Q,X) is pushed on top of state Q as usual.
Inthe first case, however, state Q on top of the stack isreplaced by a variant of goto(Q, X).
This is safe sincewe will never need to return to Q if after some moresteps we succeed in recognizing some rule correspond-ing with one of the items in Q.
A consequence of theaction in the first case is that upon reduction we needto pop only one state off the stack.Further work in this area is reported in \[5\], whichtreats nondeterministic ELR parsing and therefore doesnot regard it as an obstacle if a choice between cases a)and b) cannot be uniquely made.We are not concerned with extended context-freegrammars in this paper.
However, a very interestingalgorithm results from ELR parsing if we restrict its ap-plication to ordinary context-free grammars.
(We willmaintain the name "extended LR" to stress the originof the algorithm.)
This results in the new nondetermin-istic ELR(0) algorithm that we describe below, derivedfrom the formulation of ELK parsing in \[5\].First, we define a set of items asI = {\[A --* c~ ?/3\] I A --* 4/3 E p t}Note that I LC C I.
If we define for each Q G I:closure(Q) -=QU{\ [A - - * .a \ ] I \ [B - - * /3 .CT \ ]EQAAZ*C}then the goto function for LR(0) parsing is defined bygoto(q ,x )  =closure({\[A ---* aX  ?/3\] I \[A ~ a ?
X/3\] E Q})For ELR parsing however, we need two goto func-tions, goto I and goto2, one for kernel items (i.e.
thosein I LC) and one for nonkernel items (the others).
Theseare defined bygoto l (Q ,X)  =closure({\[A --* aX  ?
fl\] I \[A ---* (~ ?
X/3\] E Q A(a # e VA = S')})goto2(Q,X ) =closure({\[A ~ X ?/3\] I \[A --* ?
X/3\] 6 Q A A # S'})At each shift (where X is some terminal) and each re-duce with some rule A --* a (where X is A) we may non-deterministically apply gotol, which corresponds withcase a), or goto2, which corresponds with case b).
Ofcourse, one or both may not be defined on Q and X,because gotoi(Q, X)  may be @, for i E {1, 2}.Now remark that when using goto I and goto2, eachreachable set of items contains only items of the formA --* a ?/3, for some fixed string a, plus some nonkernelitems.
We will ignore the nonkernel items since theycan be derived from the kernel items by means of theclosure function.This suggests representing each set of items by a newkind of item of the form \[{Az, A2, .
.
.
,  A,~} --* a\], whichrepresents all items A --* a ?
/3 for some /3 and A E{A1, A2, .
.
.
,  An}.
Formally:I ELR .~ {\[A ---+ a\] \] 0 C A G {A I A --* aft E pt}  A(4 # E v a = {s '} )}where we use the symbol A to range over sets of non-terminals.A lgor i thm 3 (Extended LR)A ELR = (T, I ELR, Init, t-, Fin), Init = \[{S'} --* \], Fin =\[{S'} --* S\], and t- defined by:1.
( r id  -./31, ( r id  -.
/3\]\[a' - .
a\],v)where A' = {A I 3A ~ aa, S --~ flC'y 6 pt\[B EA A A Z* C\]} is non-empty2.
( r id  a\], ( r id 'where A' = { A E A \[ A ---* daft E pt } is non-empty3.
(F\[A --* fl\]\[A' --.
a\],v) t- (F\[A --*/3\]\[A" --.
A\],v)where there is A --* a E p t  with A E A', and A" -~{D 130 ---* A6, B --*/3C7 E Pt\[B 6 A A D Z* C\]}isnon-empty4.
(F\[A --.
fl\]\[A' ---, a\] ,v) }- (F\[A" --* flA\],v)where there is A --* a E p t  with A E A', and A" ={B E A I B --*/3A',/E pt}  is non-emptyNote that Clauses 1 and 3 correspond with goto 2 andthat Clauses 2 and 4 correspond with goto 1.Example  3 Consider again the grammar from Exam-ple 1.
Using the ELR algorithm, recognition of a * a isrealised by:\[{E'} -* \] a a\[{E'} \]\[{F} 6\] a\[{E'} --* \]\[{T} --* F\] a\[{E'} --* \]\[{T, E} --* T\] a\[{E'} --* \]\[{T} --* T *\] a\[{E'} ---* E\]120Comparing these configurations with those reached bythe PLR recognizer, we see that here after Step 3 thestack element \[{T, E} ~ T\] represents both \[T ---* T ??
F\] and \[T --, T ?
* * F\], but also \[E --* T .\] and\[E -~ T ?
T E\], so that nondeterminism is even furtherreduced.
\[\]A simplified ELR algorithm, which we call the pseudoELR algorithm, results from avoiding reference to A inClauses 1 and 3.
In Clause 1 we then have a simplifieddefinition of A ~, viz.
A ~ = {A \[ 3A --* as, B ---* tiC'7 EPt\[a l* C\]}, and in the same way we have in Clause 3the new definition A" = {D \[ 3D ~ AS, B --~ ~C~( EPt\[D \[* C\]}.
Pseudo ELR parsing can be more easilyrealised than full ELR parsing, but the correct-prefixproperty can no longer be guaranteed.
Pseudo ELRparsing is the foundation of a tabular algorithm in \[20\].Common-pre f ix  pars ingOne of the more complicated aspects of the ELR algo-rithm is the treatment of the sets of nonterminals inthe left-hand sides of items.
A drastically simplifiedalgorithm is the basis of a tabular algorithm in \[21\].Since in \[21\] the algorithm itself is not described butonly its tabular realisation, 2 we take the liberty of giv-ing this algorithm our own name: common-prefix (CP)parsing, since it treats all rules with a common prefixsimultaneously, aThe simplification consists of omitting the sets ofnonterminals in the left-hand sides of items:I Cp = {\[--* s\] \[ A ~ s/3 e pt}A lgor i thm 4 (Common-pre f ix )A t;r = (T, I cP, Init, ~-, Fin), Init = \[--*\], Fin = \[---+ S\],and I- defined by:i.
(F\[---* /3\], av) ~ (F\[---* /3\]\[4_.
a\], v)where there are A --~ as, B --~/3C'7 E pt  such thatAL*C2.
(r\[-~ a\], av) ~ (r\[-~ sa\], v)where there is A --~ sa~3 E p t3.
(F\[--~/3\]\[4_.
s\], v) F- (F\[--~ fl\]\[--.
A\], v)where there are A --* a, D -* A6, B --* /3C'7 E ptsuch that D /*  C4.
(V\[-~/3\]\[4_, s\], v) F- (V\[--*/3A\], v)where there are A --* s, B --~/3A'7 E p tThe simplification which leads to the CP algorithminevitably causes the correct-prefix property to be lost.Example  4 Consider again the grammar from Exam-ple 1.
It is clear that a?a T a i s  not acorrect  stringaccording to this grammar.
The CP algorithm may gothrough the following sequence of configurations:2An attempt has been made in \[19\] but this paper doesnot describe the algorithm in its full generality.3The original algorithm in \[21\] applies an optimizationconcerning unit rules, irrelevant to our discussion.12 F\]3 \[--*\]\[-* T\]4 \[--*\]\[-* E\]5 E6 E7 E0 ?+\]?\]\[--, F\]T\]T T\]a?aTa?aTa?aT a?aTa?aTaaTaTaTa~aa10 E r a\]We see that in Step 9 the first incorrect symbol T is read,but recognition then continues.
Eventually, the recog-nition process is blocked in some unsuccessful configu-ration, which is guaranteed to happen for any incorrectinput 4.
In general however, after reading the first incor-rect symbol, the algorithm may perform an unboundednumber of steps before it halts.
(Imagine what happensfor input of the fo rma+aTa?a+a+.
.
.+a . )
\[\]Tabular parsingNondeterministic push-down automata can be realisedefficiently using parse tables \[1\].
A parse table consistsof sets Ti,j of items, for 0 < i < j _~ n, where al .
.
.anrepresents the input.
The idea is that an item is onlystored in a set Ti,j if the item represents recognition ofthe part of the input ai+l ?
?
?
aj.We will first discuss a tabular form of CP parsing,since this is the most simple parsing technique discussedabove.
We will then move on to the more difficult ELRtechnique.
Tabular PLR parsing is fairly straightfor-ward and will not be discussed in this paper.Tabu lar  CP  pars ingCP parsing has the following tabular realization:A lgor i thm 5 (Tabu lar  common-pre f ix )  Pc Sets Ti j  of the table are to be subsets of I .
Startwith an empty table.
Add \[-*\] to T0,0.
Perform one ofthe following steps until no more items can be added.1.
Add \[--~ a\] to T~-i,i for a = al and \[--*/3\] E Tj,i-iwhere there are A --* an, B --* /3C'7 E P?
such thatA/*C2.
Add \[-~ sa\] to Tj,i for a = ai and \[--* a\] E Tj,l-iwhere there is A --* an/3 E p t3.
Add \[--* A\] to Tj# for \[--* a\] e Tj,i and \[-*/3\] E Th,jwhere there are A --~ s, D --* AS, B --* /3C'7 E ptsuch that D /*  C4.
Add \[--~/3A\] to Th,i for \[--* s\] E Tj,i and \[---~/3\] E Th,jwhere there are A --* s, B --*/3A 7 E ptReport recognition of the input if \[--~ S\] E T0,n.For an example, see Figure 1.Tabular CP parsing is related to a variant of CYKparsing with TD filtering in \[5\].
A form of tabular4unless the grammar is cyclic, in which case the parsermay not terminate, both on correct and on incorrect input1210 1 2\[--.\] (0) \[-*\[-*\[--*\[--* T\]E\]F\]a\] (4)(3)(2)(1) \[--.
E +\](5)1 03\[--* E + T\]E\]\[4 a\] (6)\[--* F\] (7)\[--* T\] (s)Figure 1: Tabular0\[--* T T\] (9)CP parsing without top-down filtering (i.e.
without thechecks concerning the left-corner elation /*) is themain algorithm in \[21\].Without the use of top-down filtering, the referencesto \[---~/9\] in Clauses 1 and 3 are clearly not of much useany more.
When we also remove the use of these items,then these clauses become:\[--* T T E\]Consider again the grammar fromExample 1 and the (incorrect) in-put a + a T a.
After executionof the tabular common-prefix al-gorithm, the table is as given here.The sets Tj,i are given at the j - throw and i-th column.The items which correspond withthose from Example 4 are labelledwith (0), (1), .
.
.
These labels alsoindicate the order in which theseitems are added to the table.1.
Add \[--+ a\] to Tc-I,C for a = aiwhere there is A --* ac~ ?
pt3.
Add \[--* A\] to Tj,i for \[--+ o~\] ?
Tj,iwhere there are A ---* a, D --* A6 ?
pt\[--* a\] (Io)T\]\[--, E\]CP parsingHowever, for certain i there may be many \[A ~ /9\] ?Tj,c-1, for some j, and each may give rise to a differentA' which is non-empty.
In this way, Clause 1 may addseveral items \[A' --~ a\] to Tc-I,C, some possibly withoverlapping sets A'.
Since items represent computationof subderivations, the algorithm may therefore computethe same subderivation several times.In the resulting algorithm, no set Tc,j depends on anyset Tg,h with g < i.
In \[15\] this fact is used to constructa parallel parser with n processors Po, .
.
.
,  Pn-1, witheach Pi processing the sets Ti,j for all j > i.
The flowof data is strictly from right to left, i.e.
items computedby Pc are only passed on to P0, .
.
.
,  Pc-1.Tabu lar  ELR pars ingThe tabular form of ELR parsing allows an optimiza-tion which constitutes an interesting example of how atabular algorithm can have a property not shared by itsnondeterministic origin.
5First note that we can compute the columns of aparse table strictly from left to right, that is, for fixed iwe can compute all sets Tj,c before we compute the setsTj,C-F1 ?If we formulate a tabular ELR algorithm in a naiveway analogously to Algorithm 5, as is done in \[5\], thenfor example the first clause is given by:1.
Add \[A' --.
a\] to Tc-1,c for a = ac and\[A ~/9\ ]  ?
Tj,c-1where A'  -- {A \] 3A --~ a(~,B --+ /9C~ ?
P t \ [B  ?A A A Z* C\]} is non-empty5This is reminiscent of the admissibility tests \[3\], whichare applicable to tabular realisations of logical push-downautomata, but not to these automata themselves.We propose an optimization which makes use of thefact that all possible items \[A --+/9\] ?
Tj,i-1 are alreadypresent when we compute items in Ti-l, i: we computeone single item \[A' -+ hi, where A' is a large set com-puted using all \[A --+ /9\] ?
Tj,i-1, for any j.
A similarto  Tj, i ?\[A ---* c~\] ?
Tj,i-1?
A i A -~ c~a/9 ?
p t  } is non-emptyoptimization can be made for the third clause.A lgor i thm 6 (Tabu lar  extended LR)Sets T/j of the table are to be subsets of I ELR.
Startwith an empty table.
Add \[{S'} ~ \] to T0,0.
Fori ---- 1 , .
.
.
,  n, in this order, perform one of the followingsteps until no more items can be added.1.
Add \[A' --.
a\] to Ti- l# for a = aiwhere A' = {A I 3j3\[A --*/9\] ?
Tj, i -13A ----, ha, B ---*/9C0' ?
p t \ [B  ?
A A A Z* C\]} is non-empty2.
Add \[A' --* aa\] for a = ai andwhere A' = {A3.
Add \[A" --.
A\] to Tj,i for \[A' --* a \ ]E  Tj,iwhere there is A --+ a E pt  with A E A', and A" ={D \[ 3h3\[A --* /9\] E TtL,j3D ----, A6, B ----, /9C',/ Ept \ [B  E A A D Z* C\]} is non-empty4.
Add \[A" --./gA\] to Th,i for \[A' --* a\] E Tj,/ and\[A --,/9\] ?
Th,jwhere there is A --* a ?
p t  with A ?
A', and A" ={B ?
A \] B --~/9A7 ?
pt}  is non-emptyReport recognition of the input if \[{S'} --* S\] ?
T0,,~.Informally, the top-down filtering in the first andthird clauses is realised by investigating all left cornersD of nonterminals C (i.e.
D Z* C) which are expected122from a certain input position.
For input position i thesenonterminals D are given bySi = {D \] 3j3\[A ~ fl\] E Td,i3B --, tiC"/e Pt\[B E A A D Z* C\]}Provided each set Si is computed just after comple-tion of the i-th column of the table, the first and thirdclauses can be simplified to:1.
Add \[A' ~ a\] to  T i - l , i  for a = a iwhere A' = {A \[ A --~ aa  E pt}  M Si-1 is non-empty3.
Add \[A" ---, A\] to Tj,i for \[A' --, ~\] E Tj,iwhere there is A --, a E p t  with A E A', and A" ={D \[ D ~ A5 E p t}  N Sj is non-emptywhich may lead to more practical implementations.Note that we may have that the tabular ELR algo-rithm manipulates items of the form \[A --~ a\] whichwould not occur in any search path of the nondeter-ministic ELR algorithm, because in general such a Ais the union of many sets A' of items \[A ~ --~ a\] whichwould be manipulated at the same input position by thenondeterministic algorithm in different search paths.With minor differences, the above tabular ELR algo-rithm is described in \[21\].
A tabular version of pseudoELR parsing is presented in \[20\].
Some useful datastructures for practical implementation of tabular andnon-tabular PLR, ELR and CP parsing are describedin \[S\],F ind ing  an  opt ima l  tabu lar  a lgor i thmIn \[14\] Schabes derives the LC algorithm from LR pars-ing similar to the way that ELR parsing can be derivedfrom LR parsing.
The LC algorithm is obtained by notonly splitting up the goto function into goto 1 and goto 2but also splitting up goto~ even further, so that it non-deterministically yields the closure of one single kernelitem.
(This idea was described earlier in \[5\], and morerecently in \[10\].
)Schabes then argues that the LC algorithm can bedeterminized (i.e.
made more deterministic) by manip-ulating the goto functions.
One application of this ideais to take a fixed grammar and choose different gotofunctions for different parts of the grammar, in orderto tune the parser to the grammar.In this section we discuss a different application ofthis idea: we consider various goto functions which areglobal, i.e.
which are the same for all parts of a grammar.One example is ELR parsing, as its goto~ function canbe seen as a determinized version of the goto 2 functionof LC parsing.
In a similar way we obtain PLR parsing.Traditional LR parsing is obtained by taking the fulldeterminization, i.e.
by taking the normal goto functionwhich is not split up.
66Schabes more or less also argues that LC itself can beobtained by determinizing TD parsing.
(In lieu of TD pars-ing he mentions Earley's algorithm, which is its tabularrealisation.
)We conclude that we have a family consisting of LC,PLR, ELR, and LR parsing, which are increasingly de-terministic.
In general, the more deterministic an algo-rithm is, the more parser states it requires.
For exam-ple, the LC algorithm requires a number of states (theitems in I Lc) which is linear in the size of the gram-mar.
By contrast, the LR algorithm requires a numberof states (the sets of items) which is exponential in thesize of the grammar \[2\].The differences in the number of states complicatesthe choice of a tabular algorithm as the one giving op-timal behaviour for all grammars.
If a grammar is verysimple, then a sophisticated algorithm such as LR mayallow completely deterministic parsing, which requires alinear number of entries to be added to the parse table,measured in the size of the grammar.If, on the other hand, the grammar is very ambigu-ous such that even LR parsing is very nondeterministic,then the tabular ealisation may at worst add each stateto each set T i j ,  so that the more states there are, themore work the parser needs to do.
This favours sim-ple algorithms uch as LC over more sophisticated onessuch as LR.
Furthermore, if more than one state repre-sents the same subderivation, then computation of thatsubderivation may be done more than once, which leadsto parse forests (compact representations of collectionsof parse trees) which are not optimally dense \[1, 12, 7\].Schabes proposes to tune a parser to a grammar, orin other words, to use a combination of parsing tech-niques in order to find an optimal parser for a certaingrammar.
7 This idea has until now not been realised.However, when we try to find a single parsing algorithmwhich performs well for all grammars, then the tabu-lar ELR algorithm we have presented may be a seriouscandidate, for the following reasons:?
For M1 i, j ,  and a at most one item of the form\[A --, ct\] is added to Tij.
Therefore, identical sub-derivations are not computed more than once.
(Thisis a consequence of our optimization in Algorithm 6.
)Note that this also holds for the tabular CP algo-rithm.?
ELR parsing guarantees the correct-prefix property,contrary to the CP algorithm.
This prevents com-putation of all subderivations which are useless withregard to the already processed input.?
ELR parsing is more deterministic than LC and PLRparsing, because it allows shared processing of allcommon prefixes.
It is hard to imagine a practicalparsing technique more deterministic than ELR pars-ing which also satisfies the previous two properties.In particular, we argue in \[8\] that refinement of theLR technique in such a way that the first propertyabove holds whould require an impractically largenumber of LR states.7This is reminiscent of the idea of "optimal cover" \[5\].123Epsilon rulesEpsilon rules cause two problems for bottom-up ars-ing.
The first is non-termination for simple realisationsof nondeterminism (such as backtrack parsing) causedby hidden left recursion \[7\].
The second problem occurswhen we optimize TD filtering e.g.
using the sets Si: itis no longer possible to completely construct a set Si be-fore it is used, because the computation of a derivationderiving the empty string requires Si for TD filteringbut at the same time its result causes new elements tobe added to S~.
Both problems can be overcome \[8\].ConclusionsWe have discussed a range of different parsing algo-rithms, which have their roots in compiler construction,expression parsing, and natural language processing.We have shown that these algorithms can be describedin a common framework.We further discussed tabular realisations of these al-gorithms, and concluded that we have found an opti-mal algorithm, which in most cases leads to parse tablescontaining fewer entries than for other algorithms, butwhich avoids computing identical subderivations morethan once.AcknowledgementsThe author acknowledges valuable correspondence withKlaas Sikkel, Ran6 Leermakers, Franqois Barth61emy,Giorgio Satta, Yves Schabes, and Fr6d@ric Voisin.References\[1\] S. Billot and B. Lang.
The structure of sharedforests in ambiguous parsing.
In 27th Annual Meet-ing of the ACL, 143-151, 1989.\[2\] M. Johnson.
The computational complexity ofGLR parsing.
In M. Tomita, editor, GeneralizedLR Parsing, chapter 3, 35-42.
Kluwer AcademicPublishers, 1991.\[3\] B. Lang.
Complete evaluation of Horn clauses:An automata theoretic approach.
Rapport deRecherche 913, Institut National de Recherche nInformatique t en Automatique, Rocquencourt,France, November 1988.\[4\] M. Lankhorst.
An empirical comparison of gener-alized LR tables.
In R. Heemels, A. Nijholt, andK.
Sikkel, editors, Tomita's Algorithm: Extensionsand Applications, Proc.
of the first Twente Work-shop on Language Technology, 87-93.
University ofTwente, September 1991.
Memoranda Informatica91-68.\[5\] R. Leermakers.
How to cover a grammar.
In 27thAnnual Meeting of the ACL, 135-142, 1989.\[6\] R. Leermakers.
A recursive ascent Earleyparser.
Information Processing Letters, 41(2):87-91, February 1992.\[7\] M.J. Nederhof.
Generalized left-corner parsing.
InSixth Conference of the European Chapter of theACL, 305-314, 1993.\[8\] M.J. Nederhof.
A multidisciplinary approach toa parsing algorithm.
In K. Sikkel and A. Ni-jholt, editors, Natural Language Parsing: Methodsand Formalisms, Proc.
of the sixth Twente Work-shop on Language Technology, 85-98.
Universityof Twente, 1993.\[9\] M.J. Nederhof and G. Satta.
An extended theoryof head-driven parsing.
In this proceedings.\[10\] P. Oude Luttighuis and K. Sikkel.
Generalized LRparsing and attribute evaluation.
In Third Inter-national Workshop on Parsing Technologies, 219-233, Tilburg (The Netherlands) and Durbuy (Bel-gium), August 1993.\[11\] P.W.
Purdom, Jr. and C.A.
Brown.
Parsingextended LR(k) grammars.
Acta Informatica,15:115-127, 1981.\[12\] J. Rekers.
Parser Generation for Interactive Envi-ronments.
PhD thesis, University of Amsterdam,1992.\[13\] D.J.
Rosenkrantz and P.M. Lewis II.
Deterministicleft corner parsing.
In IEEE Conference Recordof the 11th Annual Symposium on Switching andAutomata Theory, 139-152, 1970.\[14\] Y. Schabes.
Polynomial time and space shift-reduce parsing of arbitrary context-free grammars.In 29th Annual Meeting of the ACL, 106-113, 1991.\[15\] K. Sikkel and M. Lankhorst.
A parallel bottom-up Tomita parser.
In 1.
Konferenz "VerarbeitungNatiirlicher Sprache", 238-247, Nfirnberg, October1992.
Springer-Verlag.\[16\] S. Sippu and E. Soisalon-Soininen.
Parsing The-ory, Vol.
H: LR(k) and LL(k) Parsing, EATCSMonographs on Theoretical Computer Science,volume 20.
Springer-Verlag, 1990.\[17\] E. Soisalon-Soininen and E. Ukkonen.
A methodfor transforming rammars into LL(k) form.
ActaInformatica, 12:339-369, 1979.\[18\] M. Tomita.
Efficient Parsing for Natural Lan-guage.
Kluwer Academic Publishers, 1986.\[19\] F. Voisin.
CIGALE: A tool for interactive grammarconstruction and expression parsing.
Science ofComputer Programming, 7:61-86, 1986.\[20\] F. Voisin.
A bottom-up adaptation of Earley'sparsing algorithm.
In Programming LanguagesImplementation and Logic Programming, Interna-tional Workshop, LNCS 348, 146-160, Orl@ans,France, May 1988.
Springer-Verlag.\[21\] F. Voisin and J.-C. Raoult.
A new, bottom-up,general parsing algorithm.
BIGRE, 70:221-235,September 1990.124
