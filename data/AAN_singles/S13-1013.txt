Second Joint Conference on Lexical and Computational Semantics (*SEM), Volume 1: Proceedings of the Main Conferenceand the Shared Task, pages 96?102, Atlanta, Georgia, June 13-14, 2013. c?2013 Association for Computational LinguisticsHENRY-CORE: Domain Adaptation and Stacking for Text Similarity?Michael Heilman and Nitin MadnaniEducational Testing Service660 Rosedale RoadPrinceton, NJ 08541, USA{mheilman,nmadnani}@ets.orgAbstractThis paper describes a system for automat-ically measuring the semantic similarity be-tween two texts, which was the aim of the2013 Semantic Textual Similarity (STS) task(Agirre et al 2013).
For the 2012 STS task,Heilman and Madnani (2012) submitted thePERP system, which performed competitivelyin relation to other submissions.
However,approaches including word and n-gram fea-tures also performed well (Ba?r et al 2012;S?aric?
et al 2012), and the 2013 STS task fo-cused more on predicting similarity for textpairs from new domains.
Therefore, for thethree variations of our system that we were al-lowed to submit, we used stacking (Wolpert,1992) to combine PERP with word and n-gram features and applied the domain adapta-tion approach outlined by Daume III (2007)to facilitate generalization to new domains.Our submissions performed well at most sub-tasks, particularly at measuring the similarityof news headlines, where one of our submis-sions ranked 2nd among 89 from 34 teams, butthere is still room for improvement.1 IntroductionWe aim to develop an automatic measure of the se-mantic similarity between two short texts (e.g., sen-tences).
Such a measure could be useful for vari-ous applications, including automated short answerscoring (Leacock and Chodorow, 2003; Nielsen etal., 2008), question answering (Wang et al 2007),?
System description papers for this task were required tohave a team ID and task ID (e.g., ?HENRY-CORE?)
as a prefix.and machine translation evaluation (Przybocki et al2009).In this paper, we describe our submissions to the2013 Semantic Textual Similarity (STS) task (Agirreet al 2013), which evaluated implementations oftext-to-text similarity measures.
Submissions wereevaluated according to Pearson correlations betweengold standard similarity values acquired from hu-man raters and machine-produced similarity val-ues.
Teams were allowed to submit up to threesubmissions.
For each submission, correlationswere calculated separately for four subtasks: mea-suring similarity between news headlines (?head-lines?
), between machine translation outputs and hu-man reference translations (?SMT?
), between wordglosses from OntoNotes (Pradhan and Xue, 2009)and WordNet (Fellbaum, 1998) (?OnWN?
), and be-tween frame descriptions from FrameNet (Fillmoreet al 2003) and glosses from WordNet (?FNWN?
).A weighted mean of the correlations was also com-puted as an overall evaluation metric (the OnWn andFNWN datasets were smaller than the headlines andSMT datasets).The suggested training data for the 2013 STStask was the data from the 2012 STS task (Agirreet al 2012), including both the training and testsets for that year.
The 2012 task was similar ex-cept that the data were from a different set of sub-tasks: measuring similarity between sentences fromthe Microsoft Research Paraphrase corpus (Dolanet al 2004) (?MSRpar?
), between sentences fromthe Microsoft Research Video Description corpus(Chen and Dolan, 2011) (?MSRvid?
), and betweenhuman and machine translations of parliamentary96proceedings (?SMTeuroparl?).
The 2012 task pro-vided training and test sets for those three subtasksand also included two additional tasks with just testsets: a similar OnWN task, and measuring similar-ity between human and machine translations of newsbroadcasts (?SMTnews?
).Heilman and Madnani (2012) described the PERPsystem and submitted it to the 2012 STS task.
PERPmeasures the similarity of a sentence pair by find-ing a sequence of edit operations (e.g., insertions,deletions, substitutions, and shifts) that converts onesentence to the other.
It then uses various featuresof the edits, with weights learned from labeled sen-tence pairs, to assign a similarity score.
PERP per-formed well, ranking 7th out of 88 submissions from35 teams according to the weighted mean correla-tion.
However, PERP lacked some of the usefulword and n-gram overlap features included in someof the other top-performing submissions.
In addi-tion, domain adaptation seemed more relevant forthe STS 2013 task since in-domain data was avail-able only for one (OnWN) of the four subtasks.Therefore, in this work, we combine the PERPsystem with various word and n-gram features.We also apply the domain adaptation technique ofDaume III (2007) to support generalization beyondthe domains in the training data.2 System DetailsIn this section, we describe the system we devel-oped, and the variations of it that comprise our sub-missions to the 2013 STS task.Our system is a linear model estimated usingridge regression, as implemented in the scikit-learntoolkit (Pedregosa et al 2011).
The system usesa 5-fold cross-validation grid search to tune the ?penalty for ridge regression (with ?
?
2{?5,?4,...,4}).During development, we evaluated its performanceon the full STS 2012 data (training and test) us-ing 10-fold cross-validation, with the 5-fold cross-validation being used to tune within each trainingpartition.2.1 FeaturesOur full system uses the following features com-puted from an input sentence pair (s1, s2).The system standardizes feature values to zeromean and unit variance by subtracting the feature?smean and dividing by its standard deviation.
Themeans and standard deviations are estimated fromthe training set, or from each training partition dur-ing cross-validation.2.1.1 n-gram Overlap FeaturesThe system computes Jaccard similarity (i.e., theratio of the sizes of the set intersection to the setunion) for the following overlap features:?
character n-gram overlap (n = 1 .
.
.
12).
Notethat this is computed from the entire originaltexts for a pair, including punctuation, whites-pace, etc.?
word n-gram overlap (n = 2 .
.
.
8).
We do notinclude n = 1 here because it would be identi-cal to the n = 1 version for the unordered wordn-gram feature described next.?
unordered word n-gram overlap features (n =1 .
.
.
3).
By unordered, we mean combina-tions (in the mathematical sense of ?combi-nations?)
of word tokens, regardless of order.Note that these features are similar to the wordn-gram overlap features except that the wordsneed not be contiguous to match.
For example,the text ?John saw Mary?
would result in thefollowing unordered word n-grams: {john},{mary}, {saw}, {john, saw}, {mary, saw},{john, mary}, and {john, mary, saw}.For the word and unordered n-gram overlap fea-tures, we computed two variants: one based on alltokens and one based on just content words, whichwe define as words that are not punctuation and donot appear in the NLTK (Bird et al 2009) Englishstopword list.
We lowercase everything for the wordoverlap measures but not for character overlap.2.1.2 Length FeaturesThe system includes various length-related fea-tures, where Lmax = max(length(s1), length(s2)),Lmin = min(length(s1), length(s2)), and length(x)denotes the number of tokens in x. log denotes thenatural logarithm.?
log(LmaxLmin )?
Lmax?LminLmax97?
log(Lmin)?
log(Lmax)?
log(|Lmax ?
Lmin|+ 1)2.1.3 Sentiment FeaturesThe system includes various features based on theproprietary sentiment lexicon described by BeigmanKlebanov et al(2012).
Each word in this lexiconis associated with a 3-tuple specifying a distributionover three classes: positive, negative, and neutral.These distributions were estimated via crowdsourc-ing.
If a word is not in the lexicon, we assume itspositivity and negativity are zero.We define the set of sentiment words in a sen-tence s as ?
(s) = {w : positivity(w) > 0.5 ?negativity(w) > 0.5}.
We also define the pos-itivity, negativity, and neutrality of a sentence asthe sum over the corresponding values of indi-vidual words w. For example, positivity(s) =?w?s positivity(w).The system includes the following features:?
?(s1)??(s2)?(s1)??
(s2) (i.e., the Jaccard similarity of thesentiment words)?
The cosine distance between(positivity(s1), negativity(s1)) and(positivity(s2), negativity(s2))?
|positivity(s1)?
positivity(s2)|?
|negativity(s1)?
negativity(s2)|?
|neutrality(s1)?
neutrality(s2)|2.1.4 PERP with StackingThe system also incorporates the PERP system(Heilman and Madnani, 2012) (as briefly describedin ?1) as a feature in its model by using 10-foldstacking (Wolpert, 1992).
Stacking is a proceduresimilar to k-fold cross-validation that allows one touse the output of one model as the input to anothermodel, without requiring multiple training sets.
APERP model is iteratively trained on nine folds andthen the PERP feature is computed for the tenth,producing PERP features for the whole training set,which are then used in the final regression model.We trained PERP in a general manner using datafrom all the STS 2012 subtasks rather than trainingsubtask-specific models.
PERP was trained for 100iterations.We refer readers to Heilman and Madnani (2012)for a full description of PERP.
Next, we provide de-tails about modifications made to PERP since STS2012.
Although these details are not necessary tounderstand how the system works in general, we in-clude them here for completeness.?
We extended PERP to model abbreviations aszero cost edits, using a list of common abbrevi-ations extracted from Wikipedia.1?
In a similar vein, we also extended PERPto model multiword sequences with differingpunctuation (e.g., ?Built-In Test?
?
?Built InTest?)
as zero cost edits.?
We changed the stemming and synonymy editsin the original PERP (Heilman and Madnani,2012) to be substitution edits that activate addi-tional stemming and synonymy indicator fea-tures.?
We added an incentive to TERp?s (Snover etal., 2009) original inference algorithm to pre-fer matching words when searching for a goodedit sequence.
We added this to avoid rarecases where other edits would have a negativecosts, and then the same word in a sentencepair would be, for example inserted and deletedrather than matched.?
We fixed a minor bug in the inference algo-rithm, which appeared to only affect results onthe MSRvid subtask in the STS 2012 task.?
We tweaked the learning algorithm by increas-ing the learning rate and not performing weightaveraging.2.2 Domain AdaptationThe system also uses the domain adaptation tech-nique described by Daume III (2007) to facilitategeneralization to new domains.
Instead of havinga single weight for each of the features describedabove, the system maintains a generic and a subtask-specific copy.
For example, the content bigram over-lap feature had six copies: a generic copy and onefor each of the five subtasks in the training data from1http://en.wikipedia.org/wiki/List_of_acronyms_and_initialisms, downloaded April 27,201298STS 2012 (i.e., OnWN, MSRpar, MSRvid, SMTeu-roparl, SMTnews).
And then for an instance fromMSRpar, only the generic and MSRpar-specific ver-sions of the feature will be active.
For an instancefrom a new subtask (e.g., a test set instance), onlythe generic feature will be active.We also included a generic intercept feature andintercept features for each subtask (these always hada value of 1).
These help the model capture, forexample, whether high or low similarities are morefrequent in general, without having to use the otherfeature weights to do so.2.3 SubmissionsWe submitted three variations of the system.?
Run 1: This run used all the features describedabove.
In addition, we mapped the test subtasksto the training subtasks as follows so that thespecific features would be active for test datafrom previously unseen but related subtasks:headlines to MSRpar, SMT to SMTnews, andFNWN to OnWN.?
Run 2: As in Run 1, this run used all the fea-tures described above.
However, we did notmap the STS 2013 subtasks to STS 2012 sub-tasks.
Thus, the specific copies of features wereonly active for OnWN test set examples.?
Run 3: This run used all the features except forthe PERP and sentiment features.
Like Run 2,this run did not map subtasks.3 ResultsThis section presents results on the STS 2012 data(our development set) and results for our submis-sions to STS 2013.3.1 STS 2012 (development set)Although we used cross-validation on the entire STS2012 dataset during preliminary experiments (?2),in this section, we train the system on the originalSTS 2012 training set and report performance on theoriginal STS 2012 test set, in order to facilitate com-parison to submissions to that task.
It is important tonote that our system?s results here may be somewhatoptimistic since we had access to the STS 2012 testdata and were using it for development, whereas theparticipants in the 2012 task only had access to thetraining data.Table 1 presents the results.
We include the resultsfor our three submissions, the results for the top-ranked submission according to the weighted mean(?UKP?
), the results for the best submission fromHeilman and Madnani (2012) (?PERPphrases?
), andthe mean across all submissions.
Note that while wecompare to the PERP submission from Heilman andMadnani (2012), the results are not directly compa-rable since the version of PERP is not the same andsince PERP was trained differently.For Run 1 on the STS 2012 data, we mappedOnWN to MSRpar, and SMTnews to SMTeuroparl,similar to Heilman and Madnani (2012).3.2 STS 2013 (unseen test set)Table 2 presents results for our submissions to the2013 STS task.
We include results for our three sub-missions, results for the top-ranked submission ac-cording to the weighted mean, results for the base-line provided by the task organizers, and the meanacross all submissions and the baseline from the or-ganizers.2Note that while our Run 2 submission outper-formed the top-ranked UMBC submission on theheadlines subtask, as shown in 2, there was anotherUMBC submission that performed better than Run 2for the headlines subtask.4 DiscussionThe weighted mean correlation across tasks for oursubmissions was relatively poor compared to thetop-ranked systems for STS 2013: our Run 1, Run 2,and Run 3 submissions beat the baseline and ranked41st, 26th, and 48th, respectively, out of 89 submis-sions.The primary reason for this result is that perfor-mance of our submissions was poor for the OnWNsubtask, where, e.g., our Run 2 submission?s corre-lation was r = .4631, compared to r = .8431 forthe top-ranked submission for that subtask (?deft-baseline?).
Upon investigation, we found thatOnWN training and test data were very different interms of their score distributions.
The mean gold2The STS 2013 results are from http://ixa2.si.ehu.es/sts/.99Submission MSRpar MSRvid SMTeuroparl OnWN SMTnews W. MeanRun 1 .6461 .8060 .5014 .7073 .4876 .6577Run 2 .6461 .8060 .5014 .7274 .4744 .6609Run 3 .6369 .7904 .5101 .7010 .4985 .6529UKP (top-ranked) .6830 .8739 .5280 .6641 .4937 .6773PERPphrases .6397 .7200 .4850 .7124 .5312 .6399mean-2012 .4894 .7049 .3958 .5557 .3731 .5286Table 1: Pearson correlations for STS 2012 data for each subtask and then the weighted mean across subtasks.
?UKP?was submitted by Ba?r et al(2012), ?PERPphrases?
was submitted by Heilman and Madnani (2012), and ?mean-2012?is the mean of all submissions to STS 2012.Submission headlines OnWN FNWN SMT W. MeanRun 1 .7601 .4631 .3516 .2801 .4917Run 2 .7645 .4631 .3905 .3593 .5229Run 3 .7103 .3934 .3364 .3308 .4734UMBC (top-ranked) .7642 .7529 .5818 .3804 .6181baseline .5399 .2828 .2146 .2861 .3639mean-2013 .6022 .5042 .2887 .2989 .4503Table 2: Pearson correlations for STS 2013 data for each subtask and then the weighted mean across subtasks.?UMBC?
= ?UMBC EBIQUITY-ParingWords?, and ?mean-2013?
is the mean of the submissions to STS 2013 andthe baseline.standard similarity value for the STS 2012 OnWNdata was 3.87 (with a standard deviation of 1.02),while the mean for the 2013 OnWN data was 2.31(with a standard deviation of 1.76).
We speculatethat our system performed relatively poorly becauseit was expecting the OnWN data to include manyhighly similar sentences (as in the 2012 data).
Wehypothesize that incorporating more detailed Word-Net information (only the PERP feature used Word-Net, and only in a limited fashion, to check syn-onymy) and task-specific features for comparingdefinitions might have helped performance for theOnWN subtask.If we ignore the definition comparison subtasks,and consider performance on just the headlines andSMT subtasks, the system performed quite well.Our Run 2 submission had a mean correlation ofr = .5619 for those two subtasks, which would rank5th among all submissions.We have not fully explored the effects on perfor-mance of the domain adaptation approach used inthe system, but our approach of mapping tasks usedfor our Run 1 submission did not seem to help.
Itseems better to keep a general model, as in Runs 2and 3.Additionally, we observe that the performance ofRun 3, which did not use the PERP and sentimentfeatures, was relatively good compared to Runs 1and 2, which used all the features.
This indicatesthat if speed and implementation simplicity are im-portant concerns for an application, it may suffice touse relatively simple overlap and length features tomeasure semantic similarity.The contribution of domain adaptation is notclear.
Mapping novel subtasks to tasks for whichtraining data is available (?2.3), in combination withthe domain adaptation technique we used, did notgenerally improve performance.
However, we leaveto future work a detailed analysis of whether thedomain adaptation approach (without mapping) isbetter than simply training a separate system foreach subtask and using out-of-domain data when in-domain data is unavailable.5 ConclusionIn this paper, we described a system for predictingthe semantic similarity of two short texts.
The sys-tem uses stacking to combine a trained edit-basedsimilarity model (Heilman and Madnani, 2012) with100simple features such as word and n-gram overlap,and it uses the technique described by Daume III(2007) to support generalization to domains not rep-resented in the training data.
We also presented eval-uation results, using data from the STS 2012 andSTS 2013 shared tasks, that indicate that the systemperforms competitively relative to other approachesfor many tasks.
In particular, we observed verygood performance on the news headline similarityand MT evaluation subtasks of the STS 2013 sharedtask.AcknowledgmentsWe would like to thank the STS 2013 task organizersfor facilitating this research and Dan Blanchard forhelping with scikit-learn.ReferencesEneko Agirre, Daniel Cer, Mona Diab, and AitorGonzalez-Agirre.
2012.
Semeval-2012 task 6: Apilot on semantic textual similarity.
In *SEM 2012:The First Joint Conference on Lexical and Computa-tional Semantics ?
Volume 1: Proceedings of the mainconference and the shared task, and Volume 2: Pro-ceedings of the Sixth International Workshop on Se-mantic Evaluation (SemEval 2012), pages 385?393,Montre?al, Canada, 7-8 June.
Association for Compu-tational Linguistics.Eneko Agirre, Daniel Cer, Mona Diab, Aitor Gonzalez-Agirre, and Weiwei Guo.
2013.
*sem 2013 sharedtask: Semantic textual similarity, including a pilot ontyped-similarity.
In *SEM 2013: The Second JointConference on Lexical and Computational Semantics.Association for Computational Linguistics.Daniel Ba?r, Chris Biemann, Iryna Gurevych, and TorstenZesch.
2012.
UKP: Computing semantic textual simi-larity by combining multiple content similarity mea-sures.
In *SEM 2012: The First Joint Conferenceon Lexical and Computational Semantics ?
Volume 1:Proceedings of the main conference and the sharedtask, and Volume 2: Proceedings of the Sixth Inter-national Workshop on Semantic Evaluation (SemEval2012), pages 435?440, Montre?al, Canada, 7-8 June.Association for Computational Linguistics.Beata Beigman Klebanov, Jill Burstein, Nitin Madnani,Adam Faulkner, and Joel Tetreault.
2012.
Build-ing sentiment lexicon(s) from scratch for essay data.In Proceedings of the 13th International Conferenceon Intelligent Text Processing and Computational Lin-guistics (CICLing), New Delhi, India, March.S.
Bird, E. Klein, and E. Loper.
2009.
Natural LanguageProcessing with Python.
O?Reilly Media.David Chen and William Dolan.
2011.
Collectinghighly parallel data for paraphrase evaluation.
In Pro-ceedings of the 49th Annual Meeting of the Associa-tion for Computational Linguistics: Human LanguageTechnologies, pages 190?200, Portland, Oregon, USA,June.
Association for Computational Linguistics.Hal Daume III.
2007.
Frustratingly easy domain adapta-tion.
In Proceedings of the 45th Annual Meeting ofthe Association of Computational Linguistics, pages256?263, Prague, Czech Republic, June.
Associationfor Computational Linguistics.Bill Dolan, Chris Quirk, and Chris Brockett.
2004.
Un-supervised construction of large paraphrase corpora:Exploiting massively parallel news sources.
In Pro-ceedings of Coling 2004, pages 350?356, Geneva,Switzerland, Aug 23?Aug 27.
COLING.C.
Fellbaum.
1998.
WordNet: An Electronic LexicalDatabase.
Bradford Books.Charles J. Fillmore, Christopher R. Johnson, andMiriam R.L.
Petruck.
2003.
Background to Framenet.International Journal of Lexicography, 16(3):235?250.Michael Heilman and Nitin Madnani.
2012.
ETS: Dis-criminative edit models for paraphrase scoring.
In*SEM 2012: The First Joint Conference on Lexi-cal and Computational Semantics ?
Volume 1: Pro-ceedings of the main conference and the shared task,and Volume 2: Proceedings of the Sixth InternationalWorkshop on Semantic Evaluation (SemEval 2012),pages 529?535, Montre?al, Canada, 7-8 June.
Associa-tion for Computational Linguistics.C.
Leacock and M. Chodorow.
2003. c-rater: Scoring ofshort-answer questions.
Computers and the Humani-ties, 37.Rodney D. Nielsen, Wayne Ward, and James H. Martin.2008.
Classification errors in a domain-independentassessment system.
In Proceedings of the Third Work-shop on Innovative Use of NLP for Building Educa-tional Applications, pages 10?18, Columbus, Ohio,June.
Association for Computational Linguistics.F.
Pedregosa, G. Varoquaux, A. Gramfort, V. Michel,B.
Thirion, O. Grisel, M. Blondel, P. Prettenhofer,R.
Weiss, V. Dubourg, J. Vanderplas, A. Passos,D.
Cournapeau, M. Brucher, M. Perrot, and E. Duches-nay.
2011.
Scikit-learn: Machine learning in Python.Journal of Machine Learning Research, 12:2825?2830.S.
S. Pradhan and N. Xue.
2009.
OntoNotes: The 90%solution.
In Proceedings of Human Language Tech-nologies: The 2009 Annual Conference of the North101American Chapter of the Association for Computa-tional Linguistics, Companion Volume: Tutorial Ab-stracts, pages 11?12.M.
A. Przybocki, K. Peterson, S. Bronsart, and G. A.Sanders.
2009.
The NIST 2008 metrics for machinetranslation challenge - overview, methodology, met-rics, and results.
Machine Translation, 23(2-3):71?103.Matthew G. Snover, Nitin Madnani, Bonnie Dorr, andRichard Schwartz.
2009.
TER-Plus: Paraphrase,semantic, and alignment enhancements to translationedit rate.
Machine Translation, 23(2-3):117?127,September.Frane S?aric?, Goran Glavas?, Mladen Karan, Jan S?najder,and Bojana Dalbelo Bas?ic?.
2012.
TakeLab: Systemsfor measuring semantic text similarity.
In *SEM 2012:The First Joint Conference on Lexical and Computa-tional Semantics ?
Volume 1: Proceedings of the mainconference and the shared task, and Volume 2: Pro-ceedings of the Sixth International Workshop on Se-mantic Evaluation (SemEval 2012), pages 441?448,Montre?al, Canada, 7-8 June.
Association for Compu-tational Linguistics.Mengqiu Wang, Noah A. Smith, and Teruko Mita-mura.
2007.
What is the Jeopardy model?
a quasi-synchronous grammar for QA.
In Proceedings of the2007 Joint Conference on Empirical Methods in Natu-ral Language Processing and Computational NaturalLanguage Learning (EMNLP-CoNLL), pages 22?32,Prague, Czech Republic, June.
Association for Com-putational Linguistics.David H. Wolpert.
1992.
Stacked generalization.
NeuralNetworks, 5:241?259.102
