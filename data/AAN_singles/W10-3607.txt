Proceedings of the 1st Workshop on South and Southeast Asian Natural Language Processing (WSSANLP), pages 51?55,the 23rd International Conference on Computational Linguistics (COLING), Beijing, August 2010Hybrid Stemmer for GujaratiPratikkumar Patel     Kashyap PopatDepartment of Computer EngineeringDharmsinh Desai Universitypratikpat88@gmail.comkan.pop@gmail.comPushpak BhattacharyyaDepartment of Computer Science andEngineeringIndian Institute of Technology Bombaypb@cse.iitb.ac.inAbstractIn this paper we present a lightweightstemmer for Gujarati using a hybrid ap-proach.
Instead of using a completelyunsupervised approach, we have har-nessed linguistic knowledge in the formof a hand-crafted Gujarati suffix list inorder to improve the quality of the stemsand suffixes learnt during the trainingphase.
We used the EMILLE corpus fortraining and evaluating the stemmer?sperformance.
The use of hand-craftedsuffixes boosted the accuracy of ourstemmer by about 17% and helped usachieve an accuracy of 67.86 %.1 IntroductionStemming is the process of conflating relatedwords to a common stem by chopping off theinflectional and derivational endings.
Stemmingplays an important role in Information Retrieval(IR) systems by reducing the index size and in-creasing the recall by retrieving results contain-ing any of the various possible forms of a wordpresent in the query.
This is especially true incase of a morphologically rich language likeGujarati, where a single word may take manyforms.
The aim is to ensure that related wordsmap to common stem, irrespective of whether ornot the stem is a meaningful word in the voca-bulary of the language.Current state of the art approaches to stem-ming can be classified into three categories, viz.,rule based, unsupervised and hybrid.
Building arule based stemmer for a morphologically richlanguage is an uphill task considering the dif-ferent inflectional and morphological variationspossible.
Purely unsupervised approaches on theother hand fail to take advantage of some lan-guage phenomenon which can be easily ex-pressed by simple rules.
We thus follow a hybr-id approach by enhancing an unsupervised sys-tem with a list of hand-crafted Gujarati suffixes.The remainder of this paper is organized asfollows.
We describe related work in section 2.Section 3 explains the morphological structureof Gujarati.
We describe our approach in section4.
The experiments and results are described insection 5.
Section 6 concludes the paper hig-hlighting the future work.2 Background and Related WorkThe earliest English stemmer was developed byJulie Beth Lovins in 1968.
The Porter stemmingalgorithm (Martin Porter, 1980), which waspublished later, is perhaps the most widely usedalgorithm for English stemming.
Both of thesestemmers are rule based and are best suited forless inflectional languages like English.A lot of work has been done in the field ofunsupervised learning of morphology.Goldsmith (2001, 2006) proposed an unsuper-vised algorithm for learning the morphology ofa language based on the minimum descriptionlength (MDL) framework which focuses onrepresenting the data in as compact manner aspossible.
Creutz (2005, 2007) uses probabilisticmaximum a posteriori (MAP) formulation forunsupervised morpheme segmentation.Not much work has been reported for stem-ming for Indian languages compared to Englishand other European languages.
The earliestwork reported by Ramanathan and Rao (2003)used a hand crafted suffix list and performedlongest match stripping for building a Hindistemmer.
Majumder et al (2007) developedYASS: Yet Another Suffix Stripper which usesa clustering based approach based on string dis-51tance measures and requires no linguistic know-ledge.
They concluded that stemming improvesrecall of IR systems for Indian languages likeBengali.
Dasgupta and Ng (2007) worked onunsupervised morphological parsing for Benga-li.
Pandey and Siddiqui (2008) proposed an un-supervised stemming algorithm for Hindi basedon Goldsmith's (2001) approach.Unlike previous approaches for Indian lan-guages which are either rule based or complete-ly unsupervised, we propose a hybrid approachwhich harnesses linguistic knowledge in theform of a hand-crafted suffix list.3 Gujarati MorphologyGujarati has three genders (masculine, neuterand feminine), two numbers (singular and plur-al) and three cases (nominative, obli-que/vocative and locative) for nouns.
The gend-er of a noun is determined either by its meaningor by its termination.
The nouns get inflected onthe basis of the word ending, number and case.The Gujarati adjectives are of two types ?
dec-linable and indeclinable.
The declinable adjec-tives have the termination -?
(????)
in neuter ab-solute.
The masculine absolute of these adjec-tives ends in -o (??)
and the feminine absolute in-?
(??).
For example, the adjective ????
(s?r?
-good) takes the form ????
(s?r?
), ????
(s?ro) and????
(s?r?)
when used for a neuter, masculineand feminine object respectively.
These adjec-tives agree with the noun they qualify in gender,number and case.
The adjectives that do not endin -?
in neuter absolute singular are classified asindeclinable and remain unaltered when affixedto a noun.The Gujarati verbs are inflected based upon acombination of gender, number, person, aspect,tense and mood.There are several postpositions in Gujaratiwhich get bound to the nouns or verbs whichthey postposition.
e.g.
-n?
(???
: genitive marker),-m??
(???
: in), -e (??
: ergative marker), etc.
Thesepostpositions get agglutinated to the nouns orverbs and not merely follow them.We created a list of hand crafted Gujarati suf-fixes which contains the postpositions and theinflectional suffixes for nouns, adjectives andverbs for use in our approach.4 Our ApproachOur approach is based on Goldsmith's (2001)take-all-splits method.
Goldsmith's method waspurely unsupervised, but we have used a list ofhand crafted Gujarati suffixes in our approachto learn a better set of stems and suffixes duringthe training phase.
In our approach, we makeuse of a list of Gujarati words extracted fromEMILLE corpus for the purpose of learning theprobable stems and suffixes for Gujarati duringthe training phase.
This set of stems and suffix-es will be used for stemming any word providedto the stemmer.
We have described the detailsof our approach below.4.1 Training PhaseDuring the training phase, we try to obtain theoptimal split position for each word present inthe Gujarati word list provided for training.
Weobtain the optimal split for any word by takingall possible splits of the word (see Figure 1) andchoosing the split which maximizes the functiongiven in Eqn 1 as the optimal split position.
Thesuffix corresponding to the optimal splitposition is verified against the list of 59 Gujaratisuffixes created by us.
If it cannot be generatedby agglutination of the hand crafted suffixes,then the length of the word is chosen as theoptimal split position.
i.e.
the entire word istreated as a stem with no suffix.The function used for finding the optimalsplit position reflects the probability of a partic-ular split since the probability of any split isdetermined by the frequencies of the stem andsuffix generated by that split.
The frequency ofshorter stems and suffixes is very high whencompared to the slightly longer ones.
Thus themultipliers i (length of stemi) and L-i (length ofsuffixi) have been introduced in the function inorder to compensate for this disparity.f(i) = i*log(freq(stemi)) + (L-i)*log(freq(suffixi))(Eqn 1)i: split position (varies from 1 to L)L: Length of the wordFigure 1.
All Possible Word Segmentations{stem1+suffix1,stem2+suffix2, ...
,stemL+suffixL}???
?= {?
+ ??
?, ??
+ ?
?, ???
+ ??,????
+ NULL}52Once we obtain the optimal split of any word,we update the frequencies of the stem and suffixgenerated by that split.
We iterate over the wordlist and re-compute the optimal split positionuntil the optimal split positions of all the wordsremain unchanged.
The training phase was ob-served to take three iterations typically.4.2 SignaturesAfter the training phase, we have a list of stemsand suffixes along with their frequencies.
Weuse this list to create signatures.
As shown inFigure 2, each signature contains a list of stemsand a list of suffixes appearing with these stems.The signatures which contain very few stemsor very few suffixes may not be useful in stem-ming of unknown words, thus we eliminate thesignatures containing at most one stem or atmost one suffix.
The stems and suffixes in theremaining signatures will be used to stem newwords.
An overview of the training algorithm isshown in Figure 3.4.3 Stemming of any unknown wordFor stemming of any word given to the stemmer,we evaluate the function in Eqn 1 for each poss-ible split using the frequencies of stems and suf-fixes obtained from the training process.
Theword is stemmed at the position for which thevalue of the function is maximum.5 Experiments and ResultWe performed various experiments to evaluatethe performance of the stemmer using EMILLECorpus for Gujarati.
We extracted around tenmillion words from the corpus.
These wordsalso contained Gujarati transliterations of Eng-lish words.
We tried to filter out these words byusing a Gujarati to English transliteration engineand an English dictionary.
We obtained8,525,649 words after this filtering process.We have used five-fold cross validation forevaluating the performance.
We divided the ex-tracted words into five equal parts of which fourwere used for training and one for testing.
Inorder to create gold standard data, we extractedthousand words from the corpus randomly andtagged the ideal stem for these words manually.For each of the five test sets, we measuredthe accuracy of stemming the words which arepresent in the test set as well as gold standarddata.
Accuracy is defined as the percentage ofwords stemmed correctly.The experiments were aimed at studying theimpact of (i) using a hand-crafted suffix list, (ii)fixing the minimum permissible stem size and(iii) provide unequal weightage to the stem andsuffix for deciding the optimal split position.Various results based on these experiments aredescribed in the following subsections.5.1 Varying Minimum Stem SizeWe varied the minimum stem size from one tosix and observed its impact on the system per-formance.
We performed the experiment withand without using the hand-crafted suffix list.The results of this experiment are shown in Ta-ble 1 and Figure 4.The results of this experiment clearly indicatethat there is a large improvement in the perfor-mance of the stemmer with the use of hand-crafted suffixes and the performance degrades ifwe keep a restriction on the minimum stem size.For higher values of minimum stem size, all thevalid stems which are shorter than the minimumstem size do not get generated leading to a de-cline in accuracy.Stems Suffixes??
?
(pashu - animal) ??
(n?)???
(jang - war) ??
(no)??
(ne)???
(n?)??
(n?
)Figure 2.
Sample SignatureStep 1: Obtain the optimal split position for  eachword in the word list provided for trainingusing Eqn 1 and the list of hand crafted suf-fixesStep 2: Repeat Step 1 until the optimal split  posi-tions of all the words remain unchangedStep 3: Generate signatures using the stems  andsuffixes generated from the training phaseStep 4: Discard the signatures which contain eitheronly one stem or only one suffixFigure 3.
Overview of training algorithm53Min StemSizeAccuracyWith hand-crafted suffixesWithout hand-crafted suffix-es1 67.86 % 50.04 %2 67.70 % 49.80 %3 66.43 % 49.60 %4 59.46 % 46.35 %5 51.65 % 41.22 %6 43.81 % 36.89 %Table 1.
Effect of use of hand-crafted suffixes andfixing min.
stem size on stemmer?s performanceFigure 4.
Variation stemmer?s accuracy with the var-iation in min.
stem sizeThere are several spurious suffixes which getgenerated during the training phase and degradethe performance of the stemmer when we don?tuse the hand-crafted suffix list.
e.g.
???
is not avalid inflectional Gujarati suffix but it does getgenerated if we don?t use the hand-crafted suf-fix list due to words such as ??????
(anek - many)and ?????
(ane - and).
A simple validation of thesuffixes generated during training against thehand-crafted suffix list leads to learning of bet-ter suffixes and in turn better stems during thetraining phase thereby improving the system?sperformance.Thus we decided to make use of the hand-crafted suffix list during training phase and notto put any restriction on the minimum stem size.5.2 Providing unequal weightage to stemand suffixWe have provided equal weightage to stem andsuffix in Eqn 1 which is responsible for deter-mining the optimal split position of any word.We obtained Eqn 2 from Eqn 1 by introducing aparameter ???
in order to provide unequalweightage to the stem and suffix and observe itseffect on system performance.
We used Eqn 2instead of Eqn 1 and varied ?
from 0.1 to 0.9 inthis experiment.
The results of this experimentare shown in Table 2.?
Accuracy0.1 53.52 %0.2 61.71 %0.3 65.43 %0.4 67.30 %0.5 67.86 %0.6 67.48 %0.7 67.49 %0.8 67.72 %0.9 66.45 %Table 2.
Effect of ?
on the stemmer?s performanceThe accuracy was found to be maximumwhen value of ?
was fixed to 0.5 i.e.
stem andsuffix were given equal weightage for determin-ing the optimal split of any word.6 Conclusion and Future WorkWe developed a lightweight stemmer for Guja-rati using a hybrid approach which has an accu-racy of 67.86 %.
We observed that use of ahand-crafted Gujarati suffix list boosts the accu-racy by about 17 %.
We also found that fixingthe minimum stem size and providing unequalweightage to stem and suffix degrades the per-formance of the system.Our stemmer is lightweight and removes onlythe inflectional endings as we have developed itfor use in IR system.
The list of hand-craftedsuffixes can be extended to include derivationalsuffixes for performing full fledged stemmingwhich may be required in applications such asdisplaying words in a user interface.We have measured the performance of thestemmer in terms of accuracy as of now.
Weplan to evaluate the stemmer in terms of the in-dex compression achieved and the impact onprecision and recall of Gujarati IR system.f(i)  =  ?
* i * log(freq(stemi)) +(1-?)
* (L-i) * log(freq(suffixi))(Eqn 2)54ReferencesCreutz, Mathis, and Krista Lagus.
2005.
Unsuper-vised morpheme segmentation and morphologyinduction from text corpora using Morfessor 1.0.Technical Report A81, Publications in Computerand Information Science, Helsinki University ofTechnology.Creutz, Mathis, and Krista Lagus.
2007.
Unsuper-vised models for morpheme segmentation andmorphology learning.
Association for ComputingMachinery Transactions on Speech and LanguageProcessing, 4(1):1-34.Dasgupta, Sajib, and Vincent Ng.
2006.
Unsuper-vised Morphological Parsing of Bengali.
Lan-guage Resources and Evaluation, 40(3-4):311-330.Goldsmith, John A.
2001.
Unsupervised learning ofthe morphology of a natural language.
Computa-tional Linguistics, 27(2):153-198Goldsmith, John A.
2006.
An algorithm for the un-supervised learning of morphology.
Natural Lan-guage Engineering, 12(4):353-371Jurafsky, Daniel, and James H. Martin.
2009.
Speechand Language Processing: An Introduction toNatural Language Processing, Speech Recogni-tion, and Computational Linguistics.
2nd edition.Prentice-Hall, Englewood Cliffs, NJ.Lovins, Julie B.
1968.
Development of a stemmingalgorithm.
Mechanical Translation and Computa-tional Linguistics, 11:22-31Majumder, Prasenjit, Mandar Mitra, Swapan K. Pa-rui, Gobinda Kole, Pabitra Mitra, and Kalyanku-mar Datta.
2007.
YASS: Yet another suffix strip-per.
Association for Computing Machinery Trans-actions on Information Systems, 25(4):18-38.Pandey, Amaresh K., and Tanveer J. Siddiqui.
2008.An unsupervised Hindi stemmer with heuristicimprovements.
In Proceedings of the SecondWorkshop on Analytics For Noisy UnstructuredText Data, 303:99-105.Porter, Martin F. 1980.
An algorithm for suffix strip-ping.
Program, 14(3):130-137.Ramanathan, Ananthakrishnan, and Durgesh D. Rao,A Lightweight Stemmer for Hindi, Workshop onComputational Linguistics for South-Asian Lan-guages, EACL, 2003.Tisdall, William St. Clair.
1892.
A simplified gram-mar of the Gujarati language : together with Ashort reading book and vocabulary.
D. B. Tarapo-revala Sons & Company, Bombay.The EMILLE Corpus,http://www.lancs.ac.uk/fass/projects/corpus/emille/55
