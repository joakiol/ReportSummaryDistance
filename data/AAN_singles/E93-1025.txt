A Discourse Copying Algor i thm for Ellipsis and AnaphoraResolut ionAndrew KehlerHarvard UniversityAiken Computation Laboratory33 Oxford StreetCambridge, MA 02138kehler@das.harvard.eduAbstractWe give an analysis of ellipsis resolutionin terms of a straightforward iscoursecopying algorithm that correctly predictsa wide range of phenomena.
The treat-ment does not suffer from problems inher-ent in identity-of-relations analyses.
Fur-thermore, in contrast o the approach ofDalrymple t al.
\[1991\], the treatment di-rectly encodes the intuitive distinction be-tween full NPs and the referential elementsthat corefer with them through what weterm role linking.
The correct predictionsfor several problematic examples of ellip-sis naturally result.
Finally, the analysisextends directly to other discourse copyingphenomena.1 IntroductionA simple example of verb phrase (VP) ellipsis is givenin sentence (1):(1) John likes his mother, and Bill does too.The stranded auxiliary in the second clause indi-cates the deletion of a verb phrase, the meaning ofwhich is to be determined from another clause, inthis case, the first clause.
Following Dalrymple, etal.
\[1991\], we term the clause that the VP is copiedfrom the source clause, and the clause which containsthe elided VP the target clause.
As is well establishedin the literature, referential elements 1 in the sourceclause VP may give rise to strict/sloppy ambiguities1 For present purposes, we will use the term referentialelements as synonymous with pronouns.
In Section 5 wediscuss how this class may be extended to include implicitarguments as well.in the target clause; for example in sentence (1) thetarget clause may receive one of two readings, namelyone in which Bill likes John's mother (the strict read-ing), and one in which Bill likes his own mother (thesloppy reading).In this paper we address the distribution ofstrict and sloppy readings in VP-ellipsis and otheranaphoric phenomena.
In Section 2 we discuss prob-lems with past approaches, as well as support ourdecision to treat ellipsis resolution as a primarily se-mantic process.
In Section 3 we give a representationfor events that exhibits what we term role linkingbetween referential elements and their referents, anddescribe an algorithm for ellipsis resolution that usesthis representation.
Section 4 demonstrates how useof this representation and algorithm results in thecorrect analysis of several problematic cases of ellip-sis without appeal to additional constraints.
In Sec-tion 5 we argue that the strict/sloppy distinction isnot a property of ellipsis alone, but is instead inher-ent in what we term the discourse copying process.Several discourse copying phenomena t the eventand NP level are shown to be accounted for by ouralgorithm.
We conclude in Section 6.2 Past ApproachesMuch attention has been paid to the ellipsis prob-lem in linguistics (e.g., \[Dahl, 1972; Dahl, 1974;Fiengo and May, 1990; Gawron and Peters, 1990;Ha'lk, 1987; Hellan, 1988; Klein, 1987; Lappin, 1992;Sag, 1976; Williams, 1977\]), as well as in naturallanguage processing (e.g., \[Dalrymple t al., 1991;Hardt, 1992; Lappin and McCord, 1990; Priist etal., 1991\]).
We begin by briefly pointing out severalproblems with some of these approaches..Syntactic accounts of ellipsis (e.g., \[Fiengo andMay, 1990; Ha'/k, 1987; Hellan, 1988; Lappin, 1992;203Lappin and McCord, 1990\]) posit the copying of syn-tactic structure from the source clause representationto the target clause representation.
2 Such accountsfail to explain certain empirical facts.
First, an ac-tive voice target clause can obtain its representationfrom a passive voice source clause (and vice versa),but in these cases there is no surface syntactic VPconstituent to copy:(2) A lot of this material can be presentedin a fairly informal fashion, and often Ido.
(from text of \[Chomsky, 1982\])(3) This problem was to have been lookedinto, but obviously nobody did.
(Vincent Della Pietra, in conversation)Second, an elliptical clause can obtain its referentfrom an event representation evoked into the dis-course world by a nominalization:(4) Meanwhile, they sense a drop in visitorsto the city.
Those who do, they say, axenot taking cabs.
(Chicago Tribune,courtesy Gregory Ward)Third, an elliptical clause may have multiple an-tecedents:(5) Mary wants to go to Spain and Fredwants to go to Peru, but because of limitedresources, only one of them can.
(\[Webber, 1978\])Several semantic accounts of ellipsis utilizing log-ical forms have been proposed.
Following Dalrym-ple et at.
\[1991\], we distinguish between identity-of-relations analyses (e.g., \[Gawron and Peters, 1990;Klein, 1987; Sag, 1976; Williams, 1977\]) and non-identity analyses \[Dalrymple t al., 1991\].
Identity-of-relations analyses treat source clauses as havingambiguous derivations, with target clauses receivingone such derivation.
For example, the source clausein example (1) would have derivations that (at somelevel) lead to the following two interpretations:John has the property P where:(6) P = likes John's mother(7) P = likes his own motherThese two properties lead to the same reading forthe source clause.
However, under an identity-of-relations analysis, if the target receives a strict inter-pretation, then necessarily (6) is the correct interpre-tation for the source, whereas if the target receivesa sloppy reading, then (7) is necessarily the correctinterpretation.The following example, from Dalai \[1972\], istermed as n case of cascaded ellipsis in Dalrymple, etal.
\[1991\], and is problematic for identity-of-relationsanalyses:2Fiengo and May \[Fiengo and May, 1990\] actuallyposit copying of LF representations, but their analysisshares the problems of the syntactic accounts.
(8) John realizes that he is a fool, but Billidoes not, even though hisi wife does.An acceptable, and perhaps preferred, reading for (8)is:(9) John realizes that John is a fool, butBill does not realize that Bill is a fool,even though Bill's wife realizes Bill is a fool.Example (8) contains two cases of ellipsis; thereading in (9) results from the second clause receiv-ing a sloppy interpretation from the first and thethird clause receiving a strict interpretation fromthe second.
An identity-of-relations analysis, how-ever, specifically predicts that the reading given in(9) does not exist.
Because the second clause willhave the sloppy derivation received from the first,the strict derivation that the third clause requiresfrom the second will not be present.Dalrymple, et at.
\[1991\] (henceforth DSP) give anaccount of ellipsis resolution based on an equationalanalysis utilizing higher-order unification.
Unlikeidentity-of-relations accounts, no unmotivated am-biguity is predicated to exist for VPs with pronouns,instead the ambiguity exists in the resolution process.As a result, reading (9) for sentence (8) is correctlypredicted to exist.We step through DSP's analysis of example (1) toacquaint he reader with their system.
The repre-sentation of the source clause in this example is:(10) likes(John, mother_of(John))The ellipsis is resolved by deriving a property P suchthat xepresentation (10) results from applying it toJohn:(11) P( John) = likes(John, mother_of(John))This derivation yields two solutions: 3(12) P = Az.likes(z, mother_of(John))(13) P = Az.likes(z, mother_of(x))To generate a reading for the target clause, eitherone of these representations may he applied to theelement in the target clause that is parallel to John,in this case Bill.
4.
Applying relation (12) to Billyields the strict reading in (14); applying relation(13) yields the sloppy reading given in (15):(14) P( Bill) = likes(Bill, mother_of(John))(15) P( Bili) = likes(Bill, mother_of(Bill))While the DSP account is comprehensive, someflaws remain.
First, they claim that their analysiscovers cases of stripping as well as ellipsis.
Considerthe case of stripping in example (16):3Strictly speaking, there are four solutions to equation(11).
DSP employ a notion of primary occurrence toconstrain property derivation to only these two solutions.This point is tangential to our purposes; the interestedreader should consult Daltymple et at.
\[1991\].4The DSP analysis separates the processes of paral-lel element determination and ellipsis resolution.
Theiralgorithm models the latter process.204(16) John likes his mother, and Mary's too.This sentence has only the following reading:(17) John likes John's mother, and Johnlikes Mary's mother.The representation for the source clause in DSP'ssystem is given by:(lS) likes(John, mother_of(John))After deriving two possible properties P, either of thetwo readings given in (19) and (20) may be derived:(19) P = 2z.likes(John, mother_of(x))P( M ary) = likes(John, mother_of(Mary))Reading: John likes Mary's mother(20) P = ~x.likes(z, mother_of(z))P(Mary) = likes(Mary, mother_of(Mary))Reading: Mary likes Mary's motherHowever, only reading (19) actually exists for sen-tence (16), so DSP's system overgenerates in thiscase.
We return to this example in Section 4.3.Second, to account for missing reading exam-ples and the 5-reading sentence, DSP postulate anunspecified "suitable definition of generalized an-tecedent linking", and need to impose an addi-tional constraint on property derivation requiringthat when an element is abstracted over, so mustits generalized antecedent.
These examples are dis-cussed in Sections 4.4 and 4.5.
Third, their accountdoes not extend cleanly to similar phenomena at thenoun phrase level, a topic we return to in Section 5.3 An  Event  Representat ion  andA lgor i thmWe seek an analysis of ellipsis that preserves the ad-vantages of the DSP analysis but remedies the prob-lems we have noted.
The following sections describethe event representation a d the resolution algorithmthat embody our analysis.3.1 Event  Representat ionTo highlight he general mechanism of our approachwe will utilize a simple, Davidsonian-style data struc-ture where events are reified as variables \[Davidson,1967\].
For example, sentence (21) will be representedby the feature-based vent structure in (23); this cor-responds to the more standard logical form given in(22)5:(21) John sees Mary(22) el: see(et), agent(el, John),theme(el, Mary)5We use semantic role names llke agent and themesomewhat loosely.
(23) el: \[ predicate: seeagent: Johntheme: Mary \]An additional requirement that we impose on therepresentation is what we term role linking.
In orderto link referential elements to their referents, func-tions are used to retrieve the value of roles in eventstructures.
For example, the function agent(el)would be used to link a referential element to John inthe representation of el in (23), likewise theme(et)would be used to link to Mary.
Consider sentence(24) and its event structure (25):(24) Johni likes hisi mother(25) e2: \[predicate: likesagent: Johntheme: \[obj: motherpo : agent(e ) \] \]The representation of his is a function bearing therole of the entity it refers to in the sentence.
Incontrast o the DSP approach, the representation fora full NP will appear in an event structure only whenit is explicitly mentioned in the discourse, e.g., Johnwould have appeared twice in (25) only if sentence(24) were John likes John's mother.When there are several referential elements in aclause that are coreferential, each has several poten-tial antecedents with which role linking may be es-tablished.
The following rule governs role linking inthis case:(26) A referential element is linked to themost immediate coreferential e ementthat c-commands it in the syntax.Because we encode the distinction between fullNPs and the referential elements that refer to them,we naturally account for the stripping example, asdiscussed in Section 5.3.
The fact that we link refer-ential elements through the role that their referentshave in their events, in conjunction with rule (26), al-lows us to account for the missing readings examplesdiscussed in Section 5.4 and the 5.reading examplediscussed in Section 5.5 without appeal to any ad-ditional constraints on the algorithm.
We describethis algorithm in the next section.3.2 Resolut ion Algor i thmThe discourse copying algorithm utilized by ellipsisresolution is summarized as follows:1.
Identify the source clause representation andformulate a parallel structure with unfilled rolesand modifiers for the target.2.
Fill roles with entities given in the target clause.3.
Copy remaining empty role fillers from thesource:(a) Identify parallel elements, i.e., the objectsin the source representation corresponding205to the empty roles in the target, s(b) All role fillers may be (i) referred to, wherethe appropriate function is used to link therole filler to the corresponding object inthe source representation.
In the case thatthe role filler is a function with a link tothe source event, it may also be (ii) copied,where a new instantiation of the functionis created and the source event variable isreplaced with its corresponding parallel tar-get event variable.As with the DSP analysis, this discourse copyingmethod oes not assume any ambiguity in the sourceclause.
Ambiguities are generated by the choicegiven in Step 3b; referring will result in a strict read-ing and copying will result in a sloppy reading.4 T reatment  o f  PhenomenaWe show how our algorithm accounts for a varietyof ellipsis phenomena.
Section 4:1 illustrates thata basic case of strict and sloppy ambiguity is cor-rectly analyzed.
Section 4.2 shows that the algo-rithm accounts for the cascaded ellipsis case, therebyretaining the advantages of the DSP approach overidentity-of-relations anMyses.
The remaining subsec-tions show how our algorithm accounts for the casescited as problematic for DSP in Section 2.
Section5 will then move beyond VP-ellipsis to discuss howrelated non-elliptical phenomena are accounted for.4.1 El l ipsisWe consider example (1) again, renumbered as (27):(27) John likes his mother and Bill does too.The representation for the source clause in (27) is:(28) el: \[ predicate: likeagent: Johntheme: \[obj: motherposs: agent(el) \]\]The parallel event for the target is constructed(Step 1), and Bill is added as the agent (Step 2):(29) e2: \[ predicate:agent: Billtheme:\]Step 3b can only refer to the value of the predi-cate role.
7 Since the theme of the source event con-tains a referential link to the source event itself, StepeWe follow the DSP analysis in distinguishing the pro-cess of determining paxallel elements from the process ofperforming resolution.
For all of the examples consideredin this paper, one can assume that parallel elements sharethe same thematic role in their respective vents.
Thereader is advised to consult Dalrymple t al.
\[1991\] forarguments on why this constraint should be broadened.7Step 3a of the algorithm as stated requires thata function be used when referring, i.e., technically weshould fill the predicate role of e2 with the functionpredicate(el).
To improve readability, when the object3b allows the theme to either be referred to with afunction or copied by creating a new instantiation ofthe function occupying thetheme and replacing theevent variable el with its parallel event variable e2.Referring to the theme role of el yields the strictreading in (30):(30) e2: \[predicate: likeagent: Billtheme: theme(el) \]Reading: Bill likes John's motherConversely, copying the theme role of el yields thesloppy reading in (31):(31) eu: \[ predicate: likeagent: Billtheme: \[obj: motherposs: agent(e2) \] \]Reading: Bill likes Bill's motherNote that if the his in sentence (27) refers tothe mother of someone in external discourse, sayagent(co), then Step 3b must leave this intact sincethe link is not to the source event.
This correctlyyields the only available reading for the target clausein this case.4.2  Cascaded Ell ipsisWe show how our analysis accounts for the cascadedellipsis case discussed in Section 2, repeated below:(32) John realizes that he is a fool, but Billidoes not, even though hisi wife does.In particular, we work though the derivation ofexample (32) that leads to reading (33), the readingthat is problematic for identity-of-relations analyses:(33) John realizes that John is a fool, butBill does not realize that Bill is a fool,even though Bill's wife realizes Bill is a fool.The representation for the first clause in (32) isgiven in (34):(34) el: \[ predicate: realizeagent: Johntheme: e2: \[ predicate: beagent: agent(el)be_pred: fool \] \]The clause represented by (34) is the source for theelided second clause.
To obtain the desired reading,Step 3b chooses the copy option to yield the sloppyreading.
A new function is instantiated from thefunction in the agent role of e2, and the event variableel is replaced with its parallel event variable ca:being referred to contains no links to any event, we willopt to reproduce the value in the role of the target rep-resentation rather than use a function.206(35) es: \[predicate: realizepolarity: negativeagent: Billtheme: e4: \[predicate: beagent: agent(el)be_pred: fool \] \]Reading: Bill does not realize that Bill is a foolThe clause represented by (35) is the source forthe elided third clause.
In this case Step 3b choosesto refer to the agent of e4 using a function, derivingthe strict reading: s(36) e~: \[predicate: realizeagent: \[ obj: wifeposs: agent(ea) \]theme: e6: \[predicate: beagent: agent(e4)be_pred: fool \] \]Reading: Bill's wife realizes that Bill is a foolThus, the reading not derivable by identity-of-relations analyses is derivable by our algorithm.4.3 Str ippingWe now show how our analysis accounts for the strip-ping example discussed in Section 2, repeated below:(37) John likes his mother, and Mary's too.In the DSP analysis it is possible to derive thefollowing non-existent reading:(38) John likes John's mother, and Marylikes Mary's mother.Our algorithm generates only the correct readingfor sentence (37).
The representation for the sourceclause in example (37) is:(39) el: \[predicate: likeagent: Johntheme: \[obj: motherposs: agent(el)\]\]To derive a representation for the target clause,we create a parallel event structure (Step 1) and fillin the parallel element representation for Mary (Step2).
The remaining empty role fillers are that for thepredicate and agent roles.
Since neither contains alink to the source event, Step 3b only has the optionof referring to it:(40) e2: \[predicate: likeagent: Johntheme: \[obj: motherposs: Mary \] \]Reading: John likes Mary's motherSWe omit the feature for polarity when it is positive,as in representation (36).This yields the correct interpretation for the targetclause.
Because Mary is parallel to the only elementin the source clause that contains a role link in exam-ple (37), Step 3b(ii) of the algorithm is never entered.As a result, no ambiguity exists and therefore (40) isthe only derivable reading.4.4 Missing ReadingsOne might expect hat for source VPs which containN referring elements, 2N readings would be possi-ble.
However, Dahl \[1974\] noticed that the followingexample has only three readings, not four:(41) Bill believed that he loved his wife, andHarry did too.Out of the expected readings (42a)-(42d), reading(42d) is missing:(42a) Harry believed that Bill loved Bill's wife.
(42b) Harry believed that Harry loved Harry'swife.
(42c) Harry believed that Harry loved Bill's wife.
(42d) # Harry believed that Bill loved Harry'swife.Because he c-commands his in sentence (41), byrule (26) the pronoun his is linked to the pronoun heinstead of directly to Bill.
The event structure forthe source clause in (41) is therefore:(43) el: \[ predicate: believeagent: Billtheme: e2: \[ predicate: loveagent: agent(el)theme: \[obj: wifeposs: agent(e2)\]\]\]We show that the reading in (42d) is correctly pre-dicted not to exist by applying the algorithm to de-rive all possible readings for the target clause.
Step3b will have two options for each of the role linksoccupying the agent role of e~ and the poss role ofthe theme role of e2, resulting in a total of four pos-sibilities.
In the first case both objects are referredto, yielding the all-strict reading given in (42a):(44) el: \[predicate: believeagent: Harrytheme: el: \[predicate: loveagent: agent(e2)theme: theme(e~) \] \]Reading: Harry believed that Bill loved Bill's wifeIn the second case both functions are copied, yieldingthe all-sloppy reading given in (42b):(45) e3: \[ predicate: believeagent: Harrytheme: e4: \[predicate: loveagent: agent(e3)theme: \[obj: wifepo : agent(e4)\]\]\]207Reading: Harry believed that Harry lovedHarry's wifeIn the third case the function occupying the agentrole of e2 is copied and the structure occupying thetheme role of eg.
is referred to, yielding reading (42c):(46) ca: \[predicate: believeagent: Harrytheme: e4: \[predicate: loveagent: agent(ca)theme: theme(e~) \]Reading: Harry believed that Harry lovedBill's wifeThese three readings are the acceptable ones for thetarget clause in (41).
The algorithm also allows fora fourth possibility in which the function occupyingthe agent role of eg.
is referred to, and the functionoccupying the theme role of e2 is copied:(47) ca: \[predicate: believeagent: Harrytheme: e4: \[ predicate: loveagent: agent(e2)theme: \[obj: wifeposs: agent(e4)\]\]\]Reading: Harry believed that Bill loved Bill'swifeIn this case the function agent(e4) returns the valueof agent(e2), namely Bill, which again yields the all-strict reading in (42a).
Thus, the non-existent read-ing given in (42d) is not derivable by the algorithm.This behavior is a result of our choosing to linkreferential elements to their referents via their rolesin the event structures.
During the derivation of therepresentation given in (47), we chose the sloppy op-tion for the second referential element.
Instead ofreplacing the element itself with its parallel elementin the event structure as other accounts do, we re-placed it with a link to its parallel role in its parallelevent.
This process was "sloppy" in th~ the result-ing link is to the agent of e4 instead of to the agentof ez; however, the resulting effect is "strict" becausethe agent of e4 is the same as e2 in this case.The use of c-command as the linking criterion ex-plains why m~ny speakers get al four expected read-ings in (48) and (49), which ~re otherwise very sim-ilar to (41):(48) Bill believed that his wife loved him,and Harry did too.
(49) Bill believed that his wife loved hisbrother, and Harry did too.Since neither pronoun c-commands the other in thesecases, the event structure for the source clause wouldhave both directly linked to Bill, and the algorithmwould derive all four readings for the target clause.Sag \[1976\] however notes that example (50) only hasthree readings:(50) Edith said that finding her husbandnude had upset her, and Martha did too.Out of the four possibilities for the target, reading(51) is missing:(51) # Martha said that finding Martha'shusband nude had upset Edith.The algorithm derives only the three correct read-ings if the first instance of her in sentence (50)is linked to the second.
Since neither pronoun c-commands the other, this violates the linking rule.However, as noted by Reinhart \[1983\] (pp.
179-180), "experiencing" verbs such as upset often poseproblems for linguistic analyses utilizing c-command.What is required for the linking rule is a notion of areflexive context that applies to pronouns of all cases(for which c-command is an imperfect approxima-tion).
For instance, the NP her husband in sentence(50) is in a reflexive context, i.e., replacing 'her hus-band' with an accusative pronoun referring to Edithrequires the reflexive form:(52) ... finding herselfi/*heri nude had upset her/.Because the her in her husband in sentence (50) isin the reflexive context of the second her, the cor-responding role link is required in the event struc-ture.
Thus, the algorithm works correctly for exam-ple (50); the flaw arises from using c-command in thelinking rule to model reflexive contexts.
In the fu-ture we expect o revise the linking rule by adoptingrules superseding c-command for predicting reflex-ivization.
The question of whether our analysis canbe considered purely semantic rests on the questionof whether eflexivization is syntactically or seman-tically controlled.4.5 5-Reading ExampleDSP discuss the following example (from Gawronand Peters \[1990\]) as a point of departure amongprevious analyses:(53) John revised his paper before the teacherdid, and Bill did too.DSP claim that this sentence has five readings; weagree.
The DSP analysis as presented erives sixreadings.
To obtain only the correct five readings,they appeal to the constraint on abstracting overgeneralized antecedents mentioned in Section 2; how-ever, a precise method for linking elements to gener-alized antecedents i  not given.
Our algorithm gen-erates only the correct five readings without appealto any additional constraints or processes.The notably absent reading for the third clause inthis case is given in (54):(54) Bill revised John's paper before theteacher evised Bill's paper.We step through the derivation of some of thereadings to show that no representation for reading208?
?
.
(54) is derived.
9 We first derive the possible read-ings for the first ellipsis.
The representation for thesource clause is:(55) el: \[predicate: reviseagent: Johntheme: \[ obj: paperposs: agent(el) \] \]We add the temporal modifier, parallel eventstructure, and role fillers for the representation ofthe first elided clause:(56) ex: \[predicate: reviseagent: Johntheme: \[obj: paperposs: agent(el) \]time: \[relation: beforeobj: e2: \[predicate: reviseagent: teachertheme:\]  \ \]The filler of the theme role in the representationfor the source event contains a link to that, so thereare two options.
First, the theme may be referred to,yielding the strict reading:(57) el: \[ predicate: reviseagent: Johntheme: \[obj: paperposs: agent(el) \]time: \[ relation: beforeobj: e2: \[predicate: reviseagent: teachertheme: theme(et)\]\]\]Reading: The teacher evised John's paperAlternatively, the theme may be copied, yieldingthe sloppy reading:(58) el: \[predicate: reviseagent: Johntheme: \[obj: paperposs: agent(el) \]time: \[relation: beforeobj: e2:\[ predicate: reviseagent: teachertheme: \[ obj: paperposs: agent(e2)\]\]\]Reading: The teacher evised the teacher's paperWe now consider the readings for the second el-lipsis.
Unlike the case of cascaded ellipsis, in thisexample the second ellipsis has the entire conjoinedclause as its source.
We first consider the readingsderived from the strict reading represented in (5?
).9We thank an anonymous reviewer for pointing out aflaw with a slightly different manifestation f this accountin predicting the correct readings for this example.In each of the following derivations event ea is par-allel to event el, and event e4 is parallel to e2.
Af-ter the event and non-referential role information iscopied, there are four options.
Referring to both ofthe roles containing links to a source event results inthe all-strict reading:(59) ca: \[ predicate: reviseagent: Billtheme: theme(et)time: \[relation: beforeobj: e4: \[predicate: reviseagent: teachertheme: theme(e~)\]\]\]Reading: Bill revised John's paper before theteacher evised John's paperIn the second possibility, both roles can be copied,resulting in the all-sloppy reading:(60) ca: \[ predicate: reviseagent: Billtheme: \[ obj: paperposs: agent(ca) \]time: \[ relation: beforeobj: e4: \[ predicate: reviseagent: teachertheme: theme(ca) \]\]\]Reading: Bill revised Bill's paper before theteacher evised Bill's paperThird, the poss role of the theme role of el may becopied and the theme role of e2 may be referred to:(61) ca: \[ predicate: reviseagent: Billtheme: \[obj: paperposs: agent(ez) \]time: \[ relation: beforeobj: e4: \[ predicate: reviseagent: teachertheme: theme(e2) \]\]\]Reading: Bill revised Bill's paper before theteacher evised John's paperFinally, the poss role of the theme role of el maybe referred to and the theme role of e2 may be copied:(62) ca: \[ predicate: reviseagent: Billtheme: theme(el)time: \[ relation: beforeobj: e4: \[predicate: reviseagent: teachertheme: theme(ea) \]\]\]Reading: Bill revised John's paper before theteacher evised John's paperNote that the reading (62) is the same as thestrict/strict reading in (59).
Thus, the algorithm so209far has generated three readings and has not gener-ated the non-existent reading (54).
We leave it to thereader to determine that when using representation(58) as the source for the final ellipsis, the followingtwo readings are generated:(63) Bill revised John's paper beforethe teacher evised the teacher's paper(64) Bill revised Bill's paper beforethe teacher evised the teacher's paperThe algorithm therefore derives all and only thecorrect five readings for example (53).
Recall thatthe algorithm's ability to avoid the non-existentreading in the missing reading cases in Section 4.4was due to our choosing to link referential elementsto their referents through their roles in the eventstructures.
In that case, the critical point that im-plicitly eliminated the missing reading occurred ur-ing a derivation where the sloppy option was chosen.The ability of the algorithm to avoid generating themissing reading given in sentence (54) is also due toour role linking scheme, but in this case the crucialstep was in choosing the strict option in the deriva-tion of the first ellipsis (which resulted in represen-tation (57)).
Because the algorithm referred to thetheme of el through its role instead of replicating it,the representation for the non-existent reading couldnot be derived during the resolution of the secondellipsis.
In either case, accounts that rely on paral-lel elements cannot avoid these readings without ap-peal to additional constraints.
Our analysis requiresno such constraints; the correct readings naturallyresult from the mechanism itself.5 Beyond EllipsisThe hallmark of the discourse copying process is theneed not only to refer to a previously mentioned en-tity or event, but to create a new instantiation of it.VP-ellipsis is one such process; the meaning of thesource clause serves as both the referent and the ob-ject from which a new, more general instantiation iscreated.
Here we claim that the strict/sloppy distinc-tion is an inherent property of the discourse copyingprocess, and therefore not of VP-ellipsis resolutionalone.
Our algorithm is directly applicable to a widevariety of discourse copying phenomena at both theVP and NP levels.All of the following reference phenomena re-quire discourse copying, and therefore exhibitstrict/sloppy ambiguities:?
VP-ellipsis: John likes his mother, and Bill doestoo.?
Pronominal Event Anaphora: John got shot byhis father.
That happened to Bob too.?
Definite Event Anaphora: John kissed his wife,and Bill followed his example.
(\[Dalai, 1972\])?
'Only': Only John loves his mother.s 'One' Anaphora: Although John bought a pictureof his son, Bill snapped one himself.Definite NPs and pronouns referring to NPs may alsorequire discourse copying in certain restricted con-texts.
In these cases, strict/sloppy ambiguities arepresent:?
De f in i te  NPs :  John actually remembered hiswife's birthday.
Most men forget this importantdate.?
'Lazy' Pronouns: The man who gives his pay-check to his wife is wiser than the man whospends it.
(\[Karttunen, 1969\])We make a distinction between the processes ofdetermining when discourse copying applies and per-forming the resolution.
We show how the represen-tations of some of these examples are resolved by ouralgorithm.The pronouns it and that can be used to refer toevents.
Usage such as that in example (65) requiresdiscourse copying since a new instantiation of an ex-isting event needs to be applied to the target repre-sentation:(65) John got shot by his father.That happened to Bill too.That is, both (66) and (67) are possible readings for(65):(66) Bill was shot by John's father.
(67) Bill was shot by Bill's father.These readings are generated by the algorithm inanalogous fashion to the ellipsis cases.
The represen-tation for the source clause is:(68) el: \[ predicate: shotagent: \[ obj: fatherposs: theme(el) \]theme: John \]Assuming that Bill is the theme of the target event,referring to the agent role yields the representationfor the strict reading in (69), and copying it yieldsthe representation for the sloppy reading in (70):(69) e2: \[ predicate: shotagent: agent(el)theme: Bill \]Reading: Bill was shot by John's father(70) e2: \[ predicate: shotagent: \[ obj: fatherposs: theme(e~) \]theme: Bill \]Reading: Bill was shot by Bill's fatherDalai \[1972\] gives similar examples involving a formof definite event reference:210(71) John thinks he is smart, and Billsuffers from the same delusion.
(72) John kissed his wife.
Bill followed hisexample.Once the VP in the targets are recognized as eventreferential, the algorithm readily applies to thesecases (with parallel elements being John and BilO,as it does not require any degree of syntactic or logi-cal form parallelism between the referring expressionand the referent.
'One' anaphora lso requires a form of discoursecopying, although for discourse entities instead ofevents:(73) John bought a picture of his son, whileBill snapped one himself.Most speakers find sentence (73) to be ambiguousbetween strict and sloppy readings, i.e., one couldrefer to a picture of John's son or of Bill's son.
1?By applying our analysis to the discourse copying ofobjects, these readings naturally result.
The sourcerepresentation for sentence (73) is given in (74):(74) el: \[ predicate: boughtagent: Johntheme: \[ obj: picturearg: \[ obj: sonpo : agent(el) \] \]\]We construct a representation for the informa-tion given in the target sentence without the 'one'-anaphoric NP:(75) e2: \[predicate: snapagent: Billtheme:\]Step 3b of the algorithm operates in the same wayas it does for ellipsis; the two choices yield the strictreading in (76) and the sloppy reading in (77):(76) e2: \[predicate: snapagent: Billtheme: theme(et) \](77) e2: \[predicate: snapagent: Billtheme: \[obj: picturearg: \[ obj: sonposs: agent(e2) \]\]\]As our analysis predicts, no sloppy reading exists ifhis refers to an intersentential discourse object (e.g.,Fred).The cases involving definite NPs and lazy pro-nouns can be handled in an analogous fashion to'one'-anaphora.
However, whereas 'one'-anaphora byits nature involves discourse copying, the contexts inwhich definite NPs and pronouns can copy as well1?Obtaining the sloppy reading may be aided by con-sidering a relevant context, such as one where John's andBill's families are on vacation together.as refer are more limited.
Therefore, the challengein handling these latter cases is in determining whendiscourse copying is licensed.As a final note, we point out that the class ofwhat we have termed referential elements can beextended to include implicit arguments as well aspronouns.
For instance, consider examples (78) and(79), adapted from Partee \[1989\]:(78) John went to a local bar to watchthe Superbowl, and Bob did too.
(79) George drove to the nearest hospital,and Fred did too.In sentence (78), local has an implicit argumentthat is linked to John, likewise for nearest and Georgein sentence (79).
In each case there are strict andsloppy readings for the target clause; e.g., the targetin example (78) can mean that Bob went to the barlocal to John, or a bar local to himself.
As is the casewith pronouns, if the implicit argument is insteadlinked to external discourse (e.g., "local" interpretedas being to the speaker instead of to John in sentence(78)), then there is only one reading for the target;no sloppy reading exists.Nominalizations can also contain implicit argu-ments that give rise to strict and sloppy readings,as in example (80):(80) The CS500 final exam is tomorrow.John fears failure and his brother does too.Assuming that John fears his own failure, thenJohn's brother may either fear John's failure or hisown failure.
Our algorithm readily handles thesecases with the appropriate role linking of implicitarguments.Not included in the class of referential elementsare empty pronouns within infinitival clauses; thesedo not give rise to strict readings.
For example, in(81)(81) John wants to leave, and Bill does too.there is only a sloppy reading for the target; it can-not be taken to mean that Bill wants John to leave.In our algorithm, the representation for empty pro-nouns will always have to be copied.6 SummaryWe have given an analysis of ellipsis resolution interms of a straightforward iscourse copying algo-rithm that correctly predicts a wide range of phe-nomena.
The treatment does not suffer from prob-lems inherent in identity-of-relations analyses.
Fur-thermore, in contrast o the approach of Dalrympleet al \[1991\], the treatment directly encodes the in-tuitive distinction between full NPs and the referen-tial elements that eorefer with them, thus allowingthe correct analysis of the stripping example.
Fur-thermore, we establish this distinction via the rolelinking scheme we have defined, which also allows211the correct predictions in the missing readings and5-readings cases to come as a natural result.
Finally,the analysis extends directly to other discourse copy-ing phenomena.
Future work includes extending theanalysis to interact with quantificational phenomena.AcknowledgmentsThis work was supported in part by National Sci-ence Foundation Grant IRI-9009018, National Sci-ence Foundation Grant IRI-9157996, and a match-ing grant for the latter from the Xerox Corpora-tion.
I would like to thank Mary Dalrymple, Bar-bara Grosz, Gal Kaplan, Shalom Lappin, KarenLochbanm, Christine Nakatani, Stuart Shieber, andtwo anonymous reviewers for valuable comments onearlier drafts.Re ferences\[Chomsky, 1982\] Noam Chomsky.
Noam Chomskyon the Generative Enterprise.
Forts, Dordrecht,1982.\[Dalai, 1972\] Osten Dahl.
On so-called "sloppy"identity.
Gothenburg Papers in Theoretical Lin-guistics, 11, 1972.
University of GSteborg.\[Dahl, 1974\] Osten Dalai.
How to open a sen-tence: Abstraction in natural anguage.
In Log-ical Grammar Reports, No.
12, 1974.
Universityof G/Steborg.\[Dalrymple et al, 1991\] Mary Dalrymple, Stuart M.Shieber, and Fernando Pereira.
Ellipsis andhigher-order unification.
Linguistics and Philos-ophy, 14:399-452, 1991.\[Davidson, 1967\] Donald Davidson.
The logical formof action sentences.
In N. Rescher, editor, TheLogic of Decision and Action.
University of Pitts-burgh Press, Pittsburgh, 1967.\[Fiengo and May, 1990\] Robert Fiengo and RobertMay.
Anaphora nd ellipsis, ms., City Universityof New York and University of California t Irvine,1990.\[Gawron and Peters, 1990\] Mark Gawron and Stan-ley Peters.
Anaphora and Quantification in Sit-nation Semantics.
CSLI/University of ChicagoPress, Stanford University, 1990.
CSLI LectureNotes, Number 19.\[Ha'l~, 1987\] Isabelle Hai~.
Bound variables thatneed to be.
Linguistics and Philosophy, 11:503-530, 1987.\[Hardt, 1992\] Daniel Hardt.
VP ellipsis and contex-tual interpretation.
In COLING 9~, 1992.IHellan, 1988\] Lars Hellan.
Anaphora in Norwegianand the Theory of Grammar.
Studies in Genera-tive Grammar 32.
Foris, Dordrecht, 1988.\[Karttunen, 1969\] Lauri Karttunen.
Pronouns andvariables.
In Papers from the Fifth Regional Meet-ing of the Chicago Linguistics Society, 1969.\[Klein, 1987\] Ewan Klein.
VP-Ellipsis in DR the-ory.
In Groenindijk and Stokhof, editors, Studiesin Discourse Representation Theory and the The-ory of Generalized Quantifiers.
Foris, 1987.\[Lappin and McCord, 1990\] ShalomLappin and Michael McCord.
Anaphora resolu-tion in slot grammar.
Computational Linguistics,16:197-212, 1990.\[Lappin, 1992\] Shalom Lappin.
The syntactic basisof ellipsis resolution, ms., IBM T.J. Watson Re-search Center, 1992.\[Partee, 1989\] Barbara Partee.
Deictic and ana-phoric pieces of meaning.
LSA Conference onLogic and Linguistics, Santa Cruz, 1989.
July 19-21.\[Priist et al, 1991\] Hub Priist, Remko Scha, andMartin van den Berg.
A formal discourse gram-mar tackling verb phrase anaphora.
Ms., 1991.\[Reinhart, 1983\] Tanya Reinhart.
Anaphora andSemantic Interpretation.
University of ChicagoPress, Chicago, 1983.\[Sag, 1976\] Ivan Sag.
Deletion and Logical Form.PhD thesis, MIT, 1976.\[Webber, 1978\] Bonnie Lynn Webber.
A Formal Ap-proach to Discourse Anaphora.
PhD thesis, Har-vard University, 1978.\[Williams, 1977\] Edwin Williams.
Discourse andlogical form.
Linguistic Inquiry, 8(1), 1977.212
