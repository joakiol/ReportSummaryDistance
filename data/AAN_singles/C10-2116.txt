Coling 2010: Poster Volume, pages 1006?1013,Beijing, August 2010Expressing OWL axioms by English sentences: dubious in theory,feasible in practiceRichard PowerDepartment of ComputingOpen Universityr.power@open.ac.ukAllan ThirdDepartment of ComputingOpen Universitya.third@open.ac.ukAbstractWith OWL (Web Ontology Language) es-tablished as a standard for encoding on-tologies on the Semantic Web, interesthas begun to focus on the task of ver-balising OWL code in controlled English(or other natural language).
Current ap-proaches to this task assume that axiomsin OWL can be mapped to sentences inEnglish.
We examine three potential prob-lems with this approach (concerning log-ical sophistication, information structure,and size), and show that although thesecould in theory lead to insuperable diffi-culties, in practice they seldom arise, be-cause ontology developers use OWL inways that favour a transparent mapping.This result is evidenced by an analysis ofpatterns from a corpus of over 600,000 ax-ioms in about 200 ontologies.1 IntroductionSince the adoption of OWL (Web Ontology Lan-guage) as a standard in 2004, several researchgroups have explored ways of mapping betweenOWL and controlled English, with the aim ofpresenting ontologies (both for viewing and edit-ing) in natural language (Schwitter and Tilbrook,2004; Kaljurand and Fuchs, 2007; Funk et al,2007; Hart et al, 2008); this task has been calledontology ?verbalisation?
(Smart, 2008).
To de-velop generic methods for ontology verbalisation,some kind of structural mapping is needed be-tween the formal and natural languages, and theassumption generally adopted has been a three-tier model in which identifiers for atomic terms(e.g., individuals, classes, properties) map to lexi-cal entries, single axioms map to sentences, andgroups of related axioms map to higher textualunits such as paragraphs and sections.
The pur-pose of this paper is to look in detail at one level ofthis model, the realisation of axioms by sentences,and to check its feasibility through an analysis ofa large corpus of ontologies.The input to a verbaliser is a file in oneof the standard formats such as OWL/RDF orOWL/XML, containing axioms along with sup-porting statements such as annotations.
As ex-amples of the nature of the input, table 1 showsthree axioms in OWL/XML format; without anyattempt at aggregation or pronominalisation, theycould be realised by the following sentences1:Horatio Nelson is an admiral.Horatio Nelson is the victor of the Battle ofTrafalgar.Every admiral is commander of a fleet.Without attempting anything like a full descrip-tion of OWL, it will be useful to look more closelyat the structure of these expressions.
Note first thatthey are essentially in functor-argument form2.
Inthe first axiom, for example, there is a functorcalled ClassAssertion with two arguments, onea class and the other an individual; the mean-ing of the axiom is that the individual belongsto the class.
The second functor (ObjectProp-ertyAssertion) requires instead three arguments,1Note that one limitation of OWL is that at present it con-tains no treatment of time; we therefore have to fall back onthe historical present.2In fact, there is an alternative format called OWLFunctional Syntax in which, for example, the first ax-iom would be represented by a predication of the formClassAssertion(X,Y).1006<ClassAssertion><Class IRI="http://www.example.org#admiral"/><NamedIndividual IRI="www.example.org#HoratioNelson"/></ClassAssertion><ObjectPropertyAssertion><ObjectProperty IRI="http://www.example.org#victorOf"/><NamedIndividual IRI="http://www.example.org#HoratioNelson"/><NamedIndividual IRI="http://www.example.org#BattleOfTrafalgar"/></ObjectPropertyAssertion><SubClassOf><Class IRI="http://www.example.org#admiral"/><ObjectSomeValuesFrom><ObjectProperty IRI="http://www.example.org#commanderOf"/><Class IRI="http://www.example.org#fleet"/></ObjectSomeValuesFrom></SubClassOf>Table 1: Examples of axioms in OWL/XMLand describes a relation (in OWL these are called?properties?)
holding between two individuals; thethird (SubClassOf) requires two arguments, bothclasses, and asserts that the first class is a subclassof the second.Turning to the structure of the arguments, thereare two possibilities: either the argument isatomic, in which case it will be represented byan identifier (or a literal if it is a data value), orit is complex, in which case it will be representedby an OWL functor with arguments of its own.Most of the arguments in table 1 are atomic, thesole exception being the second argument of Sub-ClassOf, which denotes a complex class meaning?someone that is commander of a fleet?3.
In gen-eral, then, the OWL functors denote logical con-cepts such as class membership and class inclu-sion, while atomic terms denote domain-specificconcepts such as Nelson and admiral.
A funda-mental design decision of the Semantic Web isthat logical concepts are standardised, while do-main concepts are left open: ontology developersare free to name the class admiral in any way theyplease, provided that the identifier takes the formof an IRI (Internationalized Resource Identifier).Given this distinction, the obvious strategy tofollow in developing a verbaliser is to divide lin-guistic resources into two parts: (a) a generic set3To be more precise we should say ?someone that is com-mander of one or more fleets?
; this kind of trade-off betweenelegance and precision often arises in systems that verbaliseformal languages.of rules for realising logical expressions (basedon standardised OWL functors); (b) a domain-specific lexicon for realising atomic individuals,classes and properties.
This obviously raises theproblem of how to acquire the specialised lexiconsneeded for each ontology.
All else failing, thesewould have to be crafted by hand, but providedthat we are not too concerned about text quality, aprovisional lexicon can often be derived automat-ically from internal evidence within the ontology(i.e., either from identifier names or annotation la-bels)4.Assuming that a lexicon for atomic terms canbe obtained (by fair means or foul), there remainsa question of whether we can find sentence pat-terns which provide understandable realisationsof the logical patterns determined by (possiblynested) OWL functors.
In section 2 we show thatthis is not guaranteed, for three reasons.
First,there may be OWL functors that represent logi-cally sophisticated concepts which cannot be ex-pressed in non-technical English.
Secondly, anOWL axiom may be hard to verbalise becauseit lacks the right kind of information structure(i.e., because it fails to make a statement about arecognisable topic such as an individual or atomicclass).
Finally, since arguments can be nested in-definitely, an axiom might contain so much se-4We have discussed elsewhere whether phrases derived inthis way provide suitable lexicalisations (Power, 2010), butthis topic lies outside the scope of the present paper.1007mantic complexity that it cannot be compressedclearly into a single sentence.
We then describe(section 3) an empirical analysis of axiom pat-terns from about 200 ontologies, which investi-gates whether these potential problems are com-mon in practice.
Section 4 discusses the results,and section 5 concludes.2 Potential problems in verbalisingaxioms2.1 Logical sophisticationWe show in table 2 the 16 most commonly usedOWL functors for expressing axioms, each ac-companied by a simple English sentence illustrat-ing what the functor means.
As will be seen, thefunctors divide into two groups.
For those in theupper segment, it is relatively easy to find En-glish constructions that realise the logical contentof the axiom ?
assuming we have suitable lexi-calisations of the atomic terms.
For those in thelower segment, finding a good English realisationis harder, since statements describing propertiesare normally found only in the rarified worlds ofmathematics and logic, not in everyday discourse.Our attempts to verbalise these axioms are accord-ingly clumsy (e.g., through resorting to variableslike X and Y), and not even entirely precise (e.g.,the sentence for FunctionalObjectProperty shouldreally specify ?For any X. .
.
?
); perhaps the readercan do better.Does this mean that our aim of realising OWLaxioms in non-technical English is doomed?
Wewould argue that this depends on how the axiomsdescribing properties are used in practice.
First,for any difficult axiom functor, it is important toconsider its frequency.
If it turns out that a func-tor accounts for (say) only one axiom in everythousand, then it will give rise only to the occa-sional clumsy sentence, not a text that is clumsythrough and through.
Second, it is important totake account of argument complexity.
If a func-tor is used invariably with atomic terms as argu-ments, then the sentence expressing it will containonly one source of complexity ?
logical sophisti-cation; if instead the functor has non-atomic argu-ments, this additional strain might push it over athreshold from difficult to incomprehensible.
For-tunately, OWL syntax requires that all property ar-guments for the difficult functors are atomic ?
forFunctionalObjectProperty, for instance, the argu-ment cannot be a complex property expression.For statements about domains and ranges, how-ever, class arguments can be non-atomic, so herea complexity issue might arise.2.2 Information structureWe learn at school that sentences have a sub-ject (preferably simple) and predicate (relativelycomplex), the purpose of the predicate being tosay something about the subject.
This rathersimplified idea is developed technically in workon information structure (Kruijff-Korbayova?
andSteedman, 2003) and centering theory (Walker etal., 1998).
Is there any equivalent to this topic-comment distinction in OWL?
Formally speak-ing, one would have to answer in the negative.The two-argument functor SubClassOf, for exam-ple, can have class expressions of any complex-ity in either argument position, and there is nological reason to claim that it is ?about?
one ofthese classes rather than the other.
This is stillclearer in the case of EquivalentClasses, wherethe functor is commutative (so that switching thearguments leaves the meaning unchanged).
Againthere seems to be a difficulty here ?
and againwe argue that this difficulty might disappear, or atleast diminish, if we consider how OWL is usedin practice.Suppose, for instance, that although OWL syn-tax allows indefinitely complex arguments in ei-ther position for the SubClassOf functor, in prac-tice users invariably construct axioms in which thefirst argument is an atomic term, with complexexpressions occurring (if at all) only in second-argument position.
This would strongly suggest,in our view, that developers are assigning a topic-comment structure to the two arguments, with thefirst expressing the topic and the second express-ing the comment.
As we will show later in thepaper, this pattern is found overwhelmingly ?
somuch so that in a sample of nearly half a millionSubClassOf axioms, fewer than 1000 instances(0.2%) were found of non-atomic first arguments.1008Functor ExampleSubClassOf Every admiral is a sailorEquivalentClasses An admiral is defined as a person that commands a fleetDisjointClasses No sailor is a landlubberClassAssertion Nelson is an admiralObjectPropertyAssertion Nelson is victor of the Battle of TrafalgarDataPropertyAssertion The Battle of Trafalgar is dated 1805ObjectPropertyDomain If X commands Y, X must be a personObjectPropertyRange If X commands Y, Y must be a fleetSubObjectPropertyOf If X is a child of Y, X must be related to YInverseObjectProperties If X is a child of Y, Y must be a parent of XTransitiveObjectProperty If X contains Y and Y contains Z, X must contain ZFunctionalObjectProperty There can be only one Y such that X has as father YDataPropertyDomain If X is dated Y, X must be an eventDataPropertyRange If X is dated Y, Y must be an integerSubDataPropertyOf If X occurs during Y, X must be dated YFunctionalDataProperty There can be only one Y such that X is dated YTable 2: Meanings of OWL functors2.3 Semantic complexityWhen encoding knowledge in description logic,developers have considerable freedom in dis-tributing content among axioms, so that axiomsize is partly a matter of style ?
rather like sen-tence length in composing a text.
Developmenttools like Prote?ge?
(Rector et al, 2004) supportrefactoring of axioms, so that for example any ax-iom of the form CA v CS u CL (e.g., ?Every ad-miral is a sailor and a leader?)
can be split intotwo axioms CA v CS and CA v CL (?Everyadmiral is a sailor.
Every admiral is a leader.?
),or vice-versa5.
Indeed, it can be shown that anyset of SubClassOf axioms can be amalgamatedinto a single axiom (Horrocks, 1997) of the form> v M , where > is the class containing all indi-viduals in the domain, and M is a class to whichany individual respecting the axiom set must be-long6.
Applying this transformation to just twoaxioms already yields an amalgam that will per-plex most readers:Every admiral is a sailorEvery admiral commands a fleet.Everything is (a) either a non-admiral or a sailor,and (b) either a non-admiral or something thatcommands a fleet.There is thus no guarantee that an axiom in OWLcan be verbalised transparently by a single sen-5The symbols v and u in logical notation correspond tothe OWL functors SubClassOf and ObjectIntersectionOf.6This all-embracing axiom or ?meta-constraint?
is com-puted by the standard description logic reasoning algorithmswhen determining the consistency of a knowledge base.tence; in theory it could contain as much knowl-edge as a textbook.
As before, we have to appealto practice.
Do ontology developers distributecontent among knowledge units (axioms) equiv-alent in size to sentences?
If they (almost always)do, then our approach is worth pursuing; if not,we have to reconsider.3 MethodTo investigate the issues of usage just described,we have analysed axiom patterns in a large cor-pus of ontologies of varying subject-matter andprovenance.
The corpus was based on the TONESOntology Repository (TONES, 2010), which isa searchable database of RDF/XML ontologiesfrom a range of sources.
The repository is in-tended to be useful to developers of tools to workwith ontologies, and as such represents a widerange of ontology kinds and features.
It also clas-sifies ontologies by ?expressivity?
?
the weak-est description logic necessary to express everyaxiom.
While the TONES site itself acknowl-edges that the expressivity categorisation is onlya guideline, it can serve as a rough guide for com-parison with the pattern frequency analysis carriedout here.The whole repository was downloaded, com-prising 214 files each containing between 0 and100726 logical axioms7.
(Note that an OWL7A few of the ontologies in the TONES repository wereexcluded, either because of syntax errors in the original files(2-3 files), or because they exceeded our processing limits ?1009file may contain no logical axioms and stillbe non-empty.)
To develop quickly a programthat could cope with the larger ontologies with-out memory problems, we used the Java-basedOWL API (Horridge and Bechhofer, 2010) asmuch as possible, in conjunction with standardUnix text-processing tools (?grep?, ?sed?
and?awk?
(Dougherty and Robbins, 1997)) for patternrecognition8.Each ontology was converted into OWL Func-tional Syntax (Motik et al, 2010) and lists wereautomatically generated of the identifiers it con-tains ?
classes, named individuals, properties,and so on.
The Unix tools were scripted to re-place every occurrence of such an identifier witha string representing its type.
This process gen-erated a new file in which every axiom of theoriginal ontology had been replaced with a stringrepresenting its logical structure: thus SubClas-sOf(Admiral, Sailor) and SubClassOf(Sailor, Per-son) would each have been replaced with Sub-ClassOf(Class, Class).
The number of occur-rences of each unique pattern was then countedand the results converted into a set of Prologfacts for further analysis.
Some manual tidying-up of the data was necessary in order to correctsome complex cases such as quoted string liter-als which themselves contained (escaped) quotedstrings; however, these cases were so rare that anyremaining errors should not adversely affect out-put quality.4 ResultsTo address the issue of logical sophistication, wefirst calculated frequencies for each axiom func-tor, using two measures: (a) the number of ontolo-gies in which the functor was used at least once,and (b) the number of axioms using the functoroverall.
The former measure (which we will call?ontology frequency?)
is a useful corrective sincea simple axiom count can be misleading when ae.g., the Foundational Model of Anatomy (Rosse and Mejino,2003).8A pure Java solution was not practical in the time avail-able since the OWL API was designed to support reasoningand evaluation of OWL ontologies rather than syntactic anal-ysis of their axioms.
We hope to produce an extension of theOWL API to support straightforward and portable analysisof ontologies in the future.functor is used profusely in a few very large on-tologies, but rarely elsewhere.
The results are pre-sented in table 3, ordered by ontology frequencyrather than overall axiom frequency9.
As can beseen, the ten functors classified as logically so-phisticated in table 2 are relatively rare, by bothmeasures, accounting overall for just 2.2% of theaxioms in the corpus, with none of them having afrequency reaching even 5 in 1000.Next, to address information structure, welooked at the argument patterns for each ax-iom functor, distinguishing three cases: (a) allarguments simple (i.e., atomic); (b) all argu-ments complex (non-atomic); (c) mixed argu-ments (some atomic, some non-atomic).
Thiscomparison is relevant only for the functors Sub-ClassOf, EquivalentClasses and DisjointClasses,for which OWL syntax allows multiple non-atomic arguments.
The results (table 4) show aclear preference for patterns in which at least oneargument is simple.
Thus for SubClassOf, giventhe overall frequencies of simple and complex ar-guments for this functor, the expected frequencyfor the combination Complex-Complex would be12606 (2.7%), whereas the observed frequencywas only 978 (0.2%) (?2 = 16296 with df=2,p < 0.0001)10.
The corresponding result forEquivalentClasses is even clearer, with not a sin-gle instance of an axiom in which all argumentsare complex, against an expected frequency of 973(16.0%) (?2 = 2692 with df=2, p < 0.0001)11.For DisjointClasses no complex arguments wereobtained, so the only possible combination was?All Simple?.
Overall, 99.8% of axioms for thesethree functors contained at least one atomic term,suggesting that the arguments were interpreted ac-cording to intuitions of information structure, withone atomic argument serving as the topic.
Thispoint is reinforced by our next analysis, whichconsiders detailed argument patterns.9Note that the total in the first column of table 3 is sim-ple the number of ontologies in our sample; the sum of thefrequencies in the column is of no interest at all.10The data for this test, with expected values in brack-ets, are SS = 297293 (312138), CC = 978 (12606), and SC= 170541 (144068), where S means ?Simple?
and C means?Complex?.11The data for this test, with expected values in brackets,are SS = 1222 (2190), CC = 0 (973), and SC = 4860 (2919),where again S means ?Simple?
and C means ?Complex?.1010Functor Ontology Frequency Percent Axiom Frequency PercentSubClassOf 190 94% 468812 74.0%EquivalentClasses 94 46% 6082 1.0%ObjectPropertyRange 92 45% 2275 0.4%ObjectPropertyDomain 91 45% 2176 0.3%DisjointClasses 88 43% 94390 14.9%SubObjectPropertyOf 75 37% 2511 0.4%InverseObjectProperties 63 31% 1330 0.2%TransitiveObjectProperty 59 29% 221 0.0%FunctionalObjectProperty 56 28% 1129 0.2%DataPropertyRange 52 26% 2067 0.3%ClassAssertion 49 24% 12798 2.0%DataPropertyDomain 47 23% 2019 0.3%FunctionalDataProperty 37 18% 931 0.1%ObjectPropertyAssertion 22 11% 19524 3.1%DataPropertyAssertion 14 7% 17488 2.8%SubDataPropertyOf 6 3% 12 0.0%TOTAL 203 100% 633791 100%Table 3: Frequencies for OWL functorsFunctor All Simple Percent All Complex Mixed PercentSubClassOf 297293 63% 978 (0.2%) 170541 37%EquivalentClasses 1222 20% 0 4860 80%DisjointClasses 94390 100% 0 0 0%TOTAL 392905 69% 978 (0.2%) 175401 31%Table 4: Simple and complex arguments of OWL functorsOWL Pattern Frequency PercentSubClassOf(Class,Class) 297293 46.9%SubClassOf(Class,ObjectSomeValuesFrom(ObjectProperty,Class)) 158519 25.0%DisjointClasses(Class,Class) 94358 14.9%ObjectPropertyAssertion(ObjectProperty,NamedIndividual,NamedIndividual) 18552 3.0%DataPropertyAssertion(DataProperty,NamedIndividual,Literal) 17433 2.7%ClassAssertion(Class,NamedIndividual) 12767 2.0%SubClassOf(Class,ObjectAllValuesFrom(ObjectProperty,Class)) 4990 0.8%SubObjectPropertyOf(ObjectProperty,ObjectProperty) 2453 0.4%EquivalentClasses(Class,ObjectIntersectionOf(Class,ObjectSomeValuesFrom(ObjectProperty,Class))) 2217 0.3%ObjectPropertyRange(ObjectProperty,Class) 2025 0.3%ObjectPropertyDomain(ObjectProperty,Class) 1835 0.3%DataPropertyDomain(DataProperty,Class) 1703 0.3%SubClassOf(Class,ObjectHasValue(ObjectProperty,NamedIndividual)) 1525 0.2%SubClassOf(Class,DataHasValue(DataProperty,Literal)) 1473 0.2%InverseObjectProperties(ObjectProperty,ObjectProperty) 1318 0.2%DataPropertyRange(DataProperty,Datatype) 1308 0.2%EquivalentClasses(Class,Class) 1222 0.2%FunctionalObjectProperty(ObjectProperty) 1121 0.2%Other pattern.
.
.
11469 1.8%TOTAL 633791 100%Table 5: Frequencies for OWL Functor-Argument patterns1011Finally, to address semantic complexity (i.e.,axiom size), we counted the frequencies of de-tailed argument patterns, abstracting from atomicterms as explained in section 3.
The results (or-dered by pattern frequency) are presented in table5, which reveals several clear trends:?
A small number of patterns covers most ofthe axioms in the corpus.
Thus the top fivepatterns cover 91.9% of the axioms, the top10 cover 95.8%, and the top 20 cover 97.2%.?
All of the frequent patterns (i.e., the top 20)can be expressed by a single sentence with-out problems of semantic complexity arisingfrom size.
The most complex is the Equiv-alentClasses pattern (number 10 in the list),but this can be realised comfortably by a sen-tence following the classical Aristotelian pat-tern for a definition ?
e.g., ?An admiral isdefined as a person that commands a fleet?.?
None of the first ten patterns employs theaxiom functors previously classified as log-ically sophisticated (bottom half of table 2).?
In the patterns where one argument is sim-ple and the other is complex (i.e., SubClas-sOf and EquivalentClasses), the simple ar-gument invariably comes first, supporting theintuition that developers conceptualise thesestatements in subject-predicate form, with(simple) topic preceding (possibly complex)comment.?
Among the frequent patterns, different func-tors have distinctive argument preferences.For instance, for SubClassOf most axiomshave atomic arguments, presumably becauseit is through this functor that the class hierar-chy is specified.
For EquivalentClasses, in-stead, the Aristotelean definition pattern is byfar the most frequent, although all-atomic ar-guments are occasionally employed (0.2% ofaxioms) to show that two class terms are syn-onymous.5 ConclusionOur analysis of over 600,000 axioms from 203ontologies provides empirical support for the as-sumption that in practice OWL axioms can betransparently expressed by English sentences.
Inprinciple, as we have seen, OWL syntax grantsusers the freedom to construct axioms that woulddefeat this assumption entirely, either by concen-trating too much semantic content into a single ax-iom, or by filling all argument positions by com-plex expressions that are unsuited to fulfilling therole of topic; it also allows logically sophisticatedstatements about properties, which would lead toimpossibly clumsy texts if they occurred too of-ten, or were exacerbated by complex arguments.In practice, if our sample is typical, none of theseproblems seems to arise, and we think it wouldbe a fair summary of our results to say that on-tology developers treat OWL axioms by analogywith sentences, by assigning a clear informationstructure (so that one atomic argument is identi-fied with the topic) and including only an appro-priate amount of content.Having identified a relatively small set of com-mon axiom patterns, it is obviously interesting toconsider how each pattern can best be expressedin a given natural language.
Considering the pat-tern SubClassOf(Class,Class) for instance (47%of all axioms), one could weigh the relative mer-its of ?Every admiral is a sailor?, ?All admirals aresailors?, ?Admirals are sailors?, ?If X is an admiral,then X must be a sailor?, and so forth.
To addressthis issue we are planning a quite different kind ofempirical study on how various sentence patternsare interpreted by human readers; by highlightingthe logical patterns that occur most often in prac-tice, the results reported here will help set the pa-rameters for such an investigation.AcknowledgmentsThe research described in this paper was un-dertaken as part of the SWAT project (Seman-tic Web Authoring Tool), which is supported bythe UK Engineering and Physical Sciences Re-search Council (EPSRC) grants G033579/1 (OpenUniversity) and G032459/1 (University of Manch-ester).
We thank the anonymous reviewers andour colleagues on the SWAT project for their com-ments.1012ReferencesDougherty, Dale and Arnold Robbins.
1997. sed andawk.
UNIX Power Tools.
O?Reilly Media, 2nd edi-tion.Funk, Adam, Valentin Tablan, Kalina Bontcheva,Hamish Cunningham, Brian Davis, and SiegfriedHandschuh.
2007.
CLOnE: Controlled Lan-guage for Ontology Editing.
In 6th Interna-tional and 2nd Asian Semantic Web Conference(ISWC2007+ASWC2007), pages 141?154, Novem-ber.Hart, Glen, Martina Johnson, and Catherine Dolbear.2008.
Rabbit: Developing a control natural lan-guage for authoring ontologies.
In ESWC, pages348?360.Horridge, Matthew and Sean Bechhofer.
2010.
TheOWL API.
http://owlapi.sourceforge.net.
Last ac-cessed: 21st April 2010.Horrocks, Ian.
1997.
Optimising Tableaux DecisionProcedures for Description Logics.
Ph.D. thesis,University of Manchester.Kaljurand, K. and N. Fuchs.
2007.
Verbalizing OWLin Attempto Controlled English.
In Proceedings ofOWL: Experiences and Directions, Innsbruck, Aus-tria.Kruijff-Korbayova?, Ivana and Mark Steedman.
2003.Discourse and information structure.
Journal ofLogic, Language and Information, 12(3):249?259.Motik, Boris, Peter F. Patel-Schneider, and BijanParsia.
2010.
OWL 2 web ontology language:Structural specification and functional-style syn-tax.
http://www.w3.org/TR/owl2-syntax/.
21stApril 2010.Power, Richard.
2010.
Complexity assumptions in on-tology verbalisation.
In 48th Annual Meeting of theAssociation for Computational Linguistics.Rector, Alan, Nick Drummond, Matthew Horridge,Jeremy Rogers, Holger Knublauch, Robert Stevens,Hai Wang, and Chris Wroe.
2004.
OWL Pizzas:Practical Experience of Teaching OWL-DL: Com-mon Errors and Common Patterns.
In 14th Interna-tional Conference on Knowledge Engineering andKnowledge Management, pages 63?81.Rosse, Cornelius and Jose?
L. V. Mejino.
2003.A reference ontology for biomedical informatics:the Foundational Model of Anatomy.
Journal ofBiomedical Informatics, 36(6):478?500.Schwitter, R. and M. Tilbrook.
2004.
Controllednatural language meets the semantic web.
In Pro-ceedings of the Australasian Language TechnologyWorkshop, pages 55?62, Macquarie University.Smart, Paul.
2008.
Controlled Natural Languages andthe Semantic Web.
Technical Report Technical Re-port ITA/P12/SemWebCNL, School of Electronicsand Computer Science, University of Southampton.TONES.
2010.
The TONES ontology repository.http://owl.cs.manchester.ac.uk/repository/browser.Last accessed: 21st April 2010.Walker, M., A. Joshi, and E. Prince.
1998.
Centeringtheory in discourse.
Clarendon Press, Oxford.1013
