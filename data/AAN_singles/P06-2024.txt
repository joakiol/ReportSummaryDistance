Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 183?190,Sydney, July 2006. c?2006 Association for Computational LinguisticsTowards A Modular Data Model For Multi-Layer Annotated CorporaRichard EckartDepartment of English LinguisticsDarmstadt University of Technology64289 Darmstadt, Germanyeckart@linglit.tu-darmstadt.deAbstractIn this paper we discuss the current meth-ods in the representation of corpora anno-tated at multiple levels of linguistic organi-zation (so-called multi-level or multi-layercorpora).
Taking five approaches whichare representative of the current practicein this area, we discuss the commonalitiesand differences between them focusing onthe underlying data models.
The goal ofthe paper is to identify the common con-cerns in multi-layer corpus representationand processing so as to lay a foundationfor a unifying, modular data model.1 IntroductionFive approaches to representing multi-layer anno-tated corpora are reviewed in this paper.
These re-flect the current practice in the field and show therequirements typically posed on multi-layer cor-pus applications.
Multi-layer annotated corporakeep annotations at different levels of linguisticorganization separate from each other.
Figure 1illustrates two annotation layers on a transcrip-tion of an audio/video signal.
One layer containsa functional annotation of a sentence in the tran-scription.
The other contains a phrase structureannotation and Part-of-Speech tags for each word.Layers and signals are coordinated by a commontimeline.The motivation for this research is rootedin finding a proper data model for PACE-Ling(Sec.
2.2).
The ultimate goal of our research is tocreate a modular extensible data model for multi-layer annotated corpora.
To achieve this, we aimto create a data model based on the current state-of-the-art that covers all current requirements andFigure 1: Multi-layer annotation on multi-modalbase datathen decompose it into exchangeable components.We identify and discuss objects contained in fourtiers commonly playing an important role in multi-layer corpus scenarios (see Fig.
2): medial, loca-tional, structural and featural tiers.
These are gen-eralized categories that are in principle present inany multi-layer context, but come in different in-carnations.
Since query language and data modelare closely related, common query requirementsare also surveyed and examined for modular de-composition.
While parts of the suggested datamodel and query operators are implemented by theprojects discussed here, so far no comprehensiveimplementation exists.2 Data modelsThere are three purposes data models can serve.The first purpose is context suitability.
A datamodel used for this purpose must reflect as wellas possible the data the user wants to query.
Thesecond purpose is storage.
The data model usedin the database backend can be very different from183the one exposed to the user, e.g.
hierarchical struc-tures may be stored in tables, indices might bekept to speed up queries, etc.
The third purposeis exchange and archival.
Here the data model, orrather the serialization of the data model, has to beeasily parsable and follow a widely used standard.Our review focuses on the suitability of datamodels for the first purpose.
As extensions ofthe XML data model are used in most of the ap-proaches reviewed here, a short introduction tothis data model will be given first.Figure 2: Tiers and objects2.1 XMLToday XML has become the de-facto standardrepresentation format for annotated text corpora.While the XML standard specifies a data modeland serialization format for XML, a semanticsis largely left to be defined for a particular ap-plication.
Many data models can be mapped tothe XML data model and serialized to XML (cf.Sec.
2.5).The XML data model describes an ordered treeand defines several types of nodes.
We examinea simplification of this data model here, limitedto elements, attributes and text nodes.
An ele-ment (parent) can contain children: elements andtext nodes.
Elements are named and can carry at-tributes, which are identified by a name and bear avalue.This data model is immediately suitable for sim-ple text annotations.
For example in a positionalannotation, name-value pairs (features) can be as-signed to tokens, which are obtained via tokeniza-tion of a text.
These features and tokens canbe represented by attributes and text nodes.
TheXML data model requires that both share a parentelement which binds them together.
Because theXML data model defines a tree, an additional rootelement is required to govern all positional anno-tation elements.If the tree is constructed in such a way thatone particular traversal strategy yields all tokensin their original order, then the data model is ca-pable of covering all tiers: medial tier (textualbase data), locational tier (sequential token order),structural tier (tokens) and featural tier (linguis-tic feature annotations).
The structural tier can beexpanded by adding additional elements en-routefrom the root element to the text nodes (leaves).In this way hierarchical structures can be modeled,for instance constituency structures.
However, theXML data model covers these tiers only in a lim-ited way.
For example, tokens can not overlapeach other without destroying the linear token or-der and thus sacrificing the temporal tier, a prob-lem commonly known as overlapping hierarchies.2.2 PACE-LingPACE-Ling (Bartsch et al, 05) aims at develop-ing register profiles of texts from mechanical engi-neering (domain: data processing in construction)based on the multi-dimensional model of SystemicFunctional Linguistics (SFL) (Halliday, 04).The XML data model is a good foundation forthis project as only written texts are analyzed, butSFL annotation requires multiple annotation lay-ers with overlapping hierarchies.
To solve thisproblem, the project applies a strategy known asstand-off annotation, first discussed in the contextof SFL in (Teich et al, 05) and based on previouswork by (Teich et al, 01).
This strategy separatesthe annotation data from the base data and intro-duces references from the annotations to the basedata, thus allowing to keep multiple layers of an-notations on the same base data separate.The tools developed in the project treat anno-tation data in XML from any source as separateannotation layers, provided the text nodes in eachlayer contain the same base data.
The base data isextracted and kept in a text file and the annotationlayers each in an XML file.
The PACE-Ling datamodel substitutes text nodes from the XML datamodel by segments.
Segments carry start and endattributes which specify the location of the text inthe text file.An important aspect of the PACE-Ling ap-proach is minimal invasiveness.
The minimallyinvasive change of only substituting text nodes bysegments and leaving the rest of the original an-notation file as it is, makes conversion betweenthe original format and the format needed by thePACE-Ling tools very easy.1842.3 NITE XML ToolkitThe NITE XML toolkit (NXT) (Carletta et al, 04)was created with the intention to provide a frame-work for building applications working with anno-tated multi-modal data.
NXT is based on the NITEObject Model (NOM) which is an extension of theXML data model.
NOM features a similar separa-tion of tiers as the PACE-Ling data model, but ismore general.NOM uses a continuous timeline to coordinateannotations.
Instead of having dedicated segmentelements, any annotation element can have specialstart and end attributes that anchor it to the time-line.
This makes the data model less modular, be-cause support for handling other locational strate-gies than a timeline can not be added by changingthe semantics of segments (cf.
Sec.
3.2).NXT can deal with audio, video and textualbase data, but due to being limited to the conceptof a single common timeline, it is not possible toannotate a specific region in one video frame.NOM introduces a new structural relation be-tween annotation elements.
Arbitrary links can becreated by adding a pointer to an annotation ele-ment bearing a reference to another annotation ele-ment which designates the first annotation elementto be a parent of the latter.
Each pointer carries arole attribute describing its use.Using pointers, arbitrary directed graphs can beoverlaid on annotation layers and annotation el-ements can have multiple parents, one from thelayer structure and any number of parents indi-cated by pointer references.
This facilitates thereuse of annotations, e.g.
when a number of an-notations are kept that apply to words, the bound-aries of words can be defined in one annotationlayer and the other annotations can refer to thatvia pointers instead of defining the word bound-aries explicitly in each layer.
Using these pointersin queries is cumbersome, because they have to beprocessed one at a time (Evert et al, 03).2.4 Deutsch Diachron DigitalThe goal of Deutsch Diachron Digital (DDD)(Faulstich et al, 05) is the creation of a diachroniccorpus, ranging from the earliest Old High Ger-man or Old Saxon texts from the 9th century up toModern German at the end of the 19th century.DDD requires each text to be available in sev-eral versions, ranging from the original facsimileover several transcription versions to translationsinto a modern language stage.
This calls for ahigh degree of alignment between those versionsas well as the annotations on those texts.
Due tothe vast amount of data involved in the project, thedata model is not mapped to XML files, but to aSQL database for a better query performance.The DDD data model can be seen as an exten-sion of NOM.
Because the corpus contains mul-tiple versions of documents, coordination of an-notations and base data along a single timeline isnot sufficient.
Therefore DDD segments refer to aspecific version of a document.DDD defines how alignments are modeled, thuselevating them from the level of structural anno-tation to an independent object in the structuraltier: an alignment as a set of elements or segments,each of which is associated with a role.Treating alignments as an independent object isreasonable because they are conceptually differentfrom pointers and it facilitates providing an effi-cient storage for alignments.2.5 ATLASThe ATLAS project (Laprun et al, 02) imple-ments a three tier data model model, resemblingthe separation of medial, locational and annota-tion tiers.
This approach features two character-istic traits setting it apart from the others.
Firstthe data model is not inspired by XML, but byAnnotation Graphs (AGs) (Bird & Liberman, 01).Second, it does not put any restriction on the kindof base data by leaving the semantics of segmentsand anchors undefined.The ATLAS data model defines signals, ele-ments, attributes, pointers, segments and anchors.Signals are base data objects (text, audio, etc.).
El-ements are related to each other only using point-ers.
While elements and pointers can be used toform trees, the ATLAS data model does not en-force this.
As a result, the problem of overlappinghierarchies does not apply to the model.
Elementsare not contained within layers, instead they carrya type.
However all elements of the same type canbe interpreted as belonging to one layer.
Segmentsdo not carry start and end attributes, they carry anumber of anchors.
How exactly anchors are real-ized depends on the signals and is not specified inthe data model.The serialization format of ATLAS (AIF) is anXML dialect, but does not use the provisions formodeling trees present in the XML data model to185represent structural annotations as e.g.
NXT does.The annotation data is stored as a flat set of ele-ments, pointers, etc., which precludes the efficientuse of existing tools like XPath to do structuralqueries.
This is especially inconvenient as the AT-LAS project does not provide a query languageand query engine yet.2.6 ISO 24610-1 - Feature StructuresThe philosophy behind (ISO-24610-1, 06) is dif-ferent from that of the four previous approaches.Here the base data is an XML document con-forming to the TEI standard (Sperberg-McQueen& Burnard, 02).
XML elements in the TEI basedata can reference feature stuctures.
A featurestructure is a single-rooted graph, not necessarilya tree.
The inner nodes of the graph are typed ele-ments, the leaves are values, which can be sharedamongst elements using pointers or can be ob-tained functionally from other values.While in the four previously discussed ap-proaches the annotations contain references to thebase data in the leaves of the annotation structure,here the base data contains references to the rootof the annotation structures.
This is a powerfulapproach to identifying features of base data seg-ments, but it is not very well suited for represent-ing constituent hierarchies.Feature structures put a layer of abstraction ontop of the facilities provided by XML.
XML val-idation schemes are used only to check the well-formedness of the serialization but not to validatethe features structures.
For this purpose featurestructure declarations (FSD) have been defined.3 A comprehensive data modelThis section suggests a data model covering theobjects that have been discussed in the context ofthe approaches presented in Sections 2.1-2.6.
SeeFigure 3 for an overview.3.1 Objects of the medial tierWe use the term base data for any data we wantto annotate.
A single instance of base data iscalled signal.
Signals can be of many differentkinds such as images (e.g.
scans of facsimiles) orstreams of text, audio or video data.Figure 3: Comprehensive data model3.2 Objects of the locational tierSignals live in a virtual multi-dimensional signalspace1.
Each point of a signal is mapped to aunique point in signal space and vice versa.
Asegment identifies an area of signal space using anumber of anchors, which uniquely identify pointsin signal space.Depending on the kind of signal the dimen-sions of signal space have to be interpreted dif-ferently.
For instance streams have a single di-mension: time.
At each point along the time axis,we may find a character or sound sample.
Otherkinds of signals can however have more dimen-sions: height, width, depth, etc.
which can be con-tinuous or discrete, bounded or open.
For instance,a sheet of paper has two bounded and continuousdimensions: height and width.
Thus a segment tocapture a paragraph may have to describe a poly-gon.
A single sheet of paper does not have a timedimension, however when multiple sheets are ob-served, these can be interpreted as a third dimen-sion of discrete time.3.3 Objects of the annotational tiersAn annotation element has a name and can havefeatures, pointers and segments.
A pointer is atyped directed reference to one or more elements.Elements relate to each other in different ways: di-rectly by structural relations of the layer, pointersand alignments and indirectly by locational andmedial relations (cf.
Fig.
4).An annotation layer contains elements and de-fines structural relations between them, e.g.
domi-nance or neighborhood relations.1(Laprun et al, 02) calls this feature space.
This label isnot used here to avoid suggesting a connection to the featuraltier.186An alignment defines an equivalence class of el-ements, to each of which a role can be assigned.Pointers can be used for structural relations thatcross-cut the structural model of a layer or tocreate a relation across layer boundaries.
Eachpointer carries a role that specifies the kind of re-lation it models.
Pointers allow an element to havemultiple parents and to refer to other elementsacross annotation layers.Features have a name and a value.
They are al-ways bound to an annotation element and cannotexist on their own.
For the time being we use thissimple definition of a feature, as it mirrors the con-cept of XML attributes.
However, future work hasto analyze if the ISO 24610 feature structures canand should be modelled as a part of the structuraltier or if the featural tier should be extended.4 QueryTo make use of annotated corpora, query methodsneed to be defined.
Depending on the data storagemodel that is used, different query languages arepossible, e.g.
XQuery for XML or SQL for rela-tional databases.
But these complicate query for-mulating because they are tailored to query a lowlevel data storage model rather than a high levelannotation data model.A high level query language is necessary to get agood user acceptance and to achieve independencefrom lower level data models used to represent an-notation data in an efficient way.
NXT comes withNQL (Evert et al, 03), a sophisticated declarativehigh level query language.
NQL is implementedin a completely new query engine instead of us-ing XPath, XQuery or SQL.
LPath, another recentdevelopment (Bird et al, 06), is a path-like querylanguage.
It is a linguistically motivated extensionof XPath with additional axes and operators thatallow additional queries and simplify others.In some cases XML or SQL databases are sim-ply not suited for a specific query.
While we mightbe able to do regular expression matches on textualbase data in a SQL or XML environment, doinga similar operation on video base data is beyondtheir scope.The NXT project plans a translation of NQL toXQuery in order to use existing XQuery engines.LPath and DDD map high level query languagesto SQL.
(Grust et al, 04) are working on translat-ing XQuery to SQL.
The possibility of translatinghigh level query languages into lower level querylanguages seems a good point for modularization.4.1 Structural queriesStructural query operators are strongly tied to thestructure of annotation layers, because they reflectthe structural relations inside a layer.
However, wealso define structural relations such as alignmentsand pointers that exist independently of layers (cf.Sec.
3.3).
The separation between pointers, align-ments and different kinds of layers offers potentialfor modularizationLayers allowing only for positional annotationsknow only one structural relation: the neigh-borhood relation between two adjacent positions.Layers following the XML data model knowparent-child relations and neighborhood relations.Layers with different internal structures may offerother relations.
A number of possible relations isshown in Figure 4.Figure 4: Structural relations and crossing to othertiersWhile the implementation of query operatorsdepends on the internal layer structure, the syn-tax does not necessarily have to be different.
Forinstance a following(a) operator of a positionallayer will yield all elements following elementa.
A hierarchical layer can have two kinds offollowing operators, one that only yields siblingsfollowing a and one yielding all elements follow-ing a.
Here a choice has to be made if one of theseoperators is similar enough to the following(a)to share that name without confusing the user.Operators to follow pointers or alignments canbe implemented independently of the layer struc-ture.XPath or LPath (Bird et al, 06) are path-likequery languages specifically suited to access hier-archically structured data, but neither directly sup-ports alignments, pointers or the locational tier.In the context of XQuery, XPath can be extendedwith user-defined functions that could be used toprovide this access, but using such functions inpath statements can become awkward.
It may be abetter idea to extend the path language instead.187Structural queries could look like this:?
Which noun phrases are inside verb phrases?//VP//NPResult: a set of annotation elements.?
Anaphora are annotated using a pointer withthe role ?anaphor?.
What do determiners inthe corpus refer to?//DET/=>anaphorResult: a set of annotation elements.?
Translated elements are aligned in an align-ment called ?translation?.
What are the trans-lations of the current element?self/#translationResult: a set of annotation elements.4.2 Featural queriesIf we use the simple definition of features fromSection 3.3, there is only one operator native tothe featural tier that can be used to access the an-notation element associated with a feature.
If weuse the complex definition from ISO 24610, theoperators of the featural tier are largely the sameas in hierarchically structured annotation layers.Operators to test the value of a feature can notstrictly be assigned to the featural tier.
Using thesimple definition, the value of a feature is sometyped atomic value.
The query language has toprovide generic operators to compare atomic val-ues like strings or numbers with each other.
E.g.XPath provides a weakly typed system that pro-vides such operators.Queries involving features could look like this:?
What is the value of the ?PoS?
feature of thecurrent annotation element?self/@PoSResult: a string value.?
What elements have a feature called ?PoS?with the value ?N??//*[@PoS=?N?
]Result: a set of annotation elements.4.3 Locational queriesLocational queries operate on segment data.
Theinner structure of segments reflects the structureof signal space and different kinds of signals re-quire different operators.
Most of the time opera-tors working on single continuous dimensions, e.g.a timeline, will be used.
An operator working onhigher dimensions could be an intersection opera-tor of two dimensional signal space areas (scan ofa newspaper page, video frames, etc.
).Queries involving locations could look like this:?
What parts of segments a and b overlap?overlap($a,$b)Result: the empty set or a segment definingthe overlapping part.?
Merge segments a and b.merge($a, $b)Result: if a and b overlap, the result is a newsegment that covers both, otherwise the re-sults is a set consisting of a and b.?
Is segment a following segment b?is-following($a, $b)Result: true or false.Locational operators are probably best bundledinto modules by the kind of locational structurethey support: a module for sequential data such astext or audio, one for two-dimensional data suchas pictures, and so on.4.4 Medial queriesMedial query operators access base data, but oftenthey take locational arguments or return locationalinformation.
When a medial operator is used toaccess textual base data, the result is a string.
Aswith feature values, such a string could be evalu-ated by a query language that supports some prim-itive data types.Assume there is a textual signal named ?plain-text?.
Queries on base data could look like this:?
Where does the string ?rapid?
occur?signal(?plaintext?
)/?rapid?Result: a set of segments.?
Where does the string ?prototyping?
occur tothe right of the location of ?rapid??signal(?plaintext?
)/?rapid?>>?prototyping?Result: a set of segments.?
What is the base data between offset 5 and 9of the signal ?plaintext??signal(?plaintext?
)/<{5,9}>Result: a portion of base data (e.g.
a string).If the base data is an audio or video stream, thetype system of most query languages is likely to188be insufficient.
In such a case a module provid-ing support for audio or video storage should alsoprovide necessary query operators and data typeextensions to the query engine.4.5 Projection between annotational andmedial tiersSo far we have considered crossing the borders be-tween the structural and featural tiers and betweenthe locational and medial tiers.
Now we examinethe border between the locational and structuraltier.
An operator can be used to collect all loca-tional data associated with an annotation elementand its children:seg(//S/VP/)The result would be a set of potentially overlap-ping segments.
Depending on the query, it willbe necessary to merge overlapping segments to geta list of non-overlappping segments.
Assume wehave a recorded interview annotated for speakersand at some point speaker A and B speak at thesame time.
We want to listen to all parts of theinterview in which speakers A or B speak.
If wequery without merging overlapping segments, wewill hear the part in which both speak at the sametime twice.Similar decisions have to be made when pro-jecting up from a segment into the structural layer.Figure 5 shows a hierarchical annotation struc-ture.
Only the elements W1, W2 and W3 bearsegments that anchor them to the base data at thepoints A-D.Figure 5: Example structureWhen projecting up from the segment {B,D}there are a number of potentially desirable results.Some are given here:1. no result: because there is no annotation ele-ment that is anchored to {B,D}.2.
W2 and W3: because both are anchored toan area inside {B,D}.3.
Phrase 2, W2 and W3: because applying theseg operator to either element yields seg-ments inside {B,D}.4.
Phrase 2 only: because applying the seg op-erator to this element yields an area that cov-ers exactly {B,D}.5.
Phrase 1, Phrase 2: because applying theseg operator to either element yields seg-ments containing {B,D}.The query language has to provide operatorsthat enable the user to choose the desired result.Queries that yield the desired results could looklike in Figure 6.
Here the same-extent operatortakes two sets of segments and returns those seg-ments that are present in both lists and have thesame start and end positions.
The anchored oper-ator takes an annotation element and returns trueif the element is anchored.
The contains operatortakes two sets of segments a and b and returns allsegments from set b that are contained in an areacovered by any segment in set a.
The grow opera-tor takes a set of segments and returns a segment,which starts at the smallest offset and ends at thelargest offset present in any segment of the inputlist.
In the tests an empty set is interpreted as falseand a non-empty set as true.1.
//*[same-extent(seg(.),<{B,D}>)]2.
//*[anchored(.)
andcontains(<{B,D}>, seg(.))]3.
//*[contains(<{B,D}>, seg(.))]4.
//*[same-extent(grow(seg(.)),<{B,D}>)]5.
//*[contains(seg(.
)), <{B,D}>]Figure 6: Projection examples5 ConclusionCorpus-based research projects often choose toimplement custom tools and encoding formats.Small projects do not want to lose valuable timelearning complex frameworks and adapting themto their needs.
They often employ a custom XMLformat to be able to use existing XML processingtools like XQuery or XSLT processors.189ATLAS or NXT are very powerful, yet theysuffer from lack of accessibility to programmerswho have to adapt them to project-specific needs.Most specialized annotation editors do not buildupon these frameworks and neither offer conver-sion tools between their data formats.Projects such as DDD do not make use of theframeworks, because they are not easily extensi-ble, e.g.
with a SQL backend instead of an XMLstorage.
Instead, again a high level query languageis developed and a completely new framework iscreated which works with a SQL backend.In the previous sections, objects from selectedapproaches with different foci in their work withannotated corpora have been collected and forgedinto a comprehensive data model.
The potentialfor modularization of corpus annotation frame-works has been shown with respect to data modelsand query languages.
As a next step, an existingframework should be taken and refactored into anextensible modular architecture.
From a practicalpoint of view reusing existing technology as muchas possible is a desirable goal.
This means reusingexisting facilities provided for XML data, such asXPath, XQuery and XSchema and where neces-sary trying to extend them, instead of creating anew data model from scratch.
For the annotationaltiers, as LPath has shown, a good starting point todo so is to extend existing languages like XPath.Locational and medial operators seem to be bestimplemented as XQuery functions.
The possibil-ity to map between SQL and XML provides ac-cess to additional efficient resources for storingand querying annotation data.
Support for variouskinds of base data or locational information can beencapsulated in modules.
Which modules exactlyshould be created and what they should cover indetail has to be further examined.AcknowledgementsMany thanks go to Elke Teich and PeterFankhauser for their support.
Part of this researchwas financially supported by Hessischer Innova-tionsfonds and PACE (Partners for the Advance-ment of Collaborative Engineering Education).ReferencesS.
Bartsch, R. Eckart, M. Holtz & E. Teich 2005.Corpus-based register profiling of texts form me-chanical engineering In Proceedings of Corpus Lin-guistics, Birmingham, UK, July 2005.S.
Bird & M. Liberman 2001.
A Formal Frameworkfor Linguistic Annotation In Speech Communica-tion 33(1,2), pp 23-60S.
Bird, Y. Chen, S. B. Davidson, H. Lee and Y.Zheng.
2006.
Designing and Evaluating an XPathDialect for Linguistic Queries.
In Proceedings of the22nd International Conference on Data Engineer-ing, ICDE 2006, 3-8 April 2006, Atlanta, GA, USAJ.
Carletta, D. McKelvie, A. Isard, A. Mengel, M. Klein& M.B.
M?ller 2004 A generic approach to soft-ware support for linguistic annotation using XMLIn G. Sampson and D. McCarthy (eds.
), Corpus Lin-guistics: Readings in a Widening Discipline.
Lon-don and NY: Continuum International.S.
Evert, J. Carletta, T. J. O?Donnell, J. Kilgour, A.Vo?gele & H. Voormann 2003.
The NITE ObjectModel v2.1 http://www.ltg.ed.ac.uk/NITE/documents/NiteObjectModel.v2.1.pdfL.
C. Faulstich, U. Leser & A. Lu?deling 2005.
Storingand querying historical texts in a relational databaseIn Informatik-Bericht 176, Institut fu?r Informatik,Humboldt-Universita?t zu Berlin, 2005.T.
Grust and S. Sakr and J. Teubner 2002.
XQueryon SQL Hosts In Proceedings of the 30th Int?l Con-ference on Very Large Data Bases (VLDB) Toronto,Canada, Aug. 2004.M.A.K.
Halliday.
2004.
Introduction to FunctionalGrammar.
Arnold, London.
Revised by CMIMMatthiessenC.
Laprun, J.G.
Fiscus, J. Garofolo, S. Pa-jot 2002.
A practical introduction to AT-LAS In Proceedings LREC 2002 Las Palmashttp://www.nist.gov/speech/atlas/download/lrec2002-atlas.pdfM.
Laurent Romary (chair) and TC 37/SC 4/WG 22006.
Language resource management - Featurestructures - Part 1: Feature structure representation.In ISO 24610-1.C.
M. Sperberg-McQueen & L. Burnard, (eds.)
2002.TEI P4: Guidelines for Electronic Text Encodingand Interchange.
Text Encoding Initiative Con-sortium.
XML Version: Oxford, Providence, Char-lottesville, BergenE.
Teich, P. Fankhauser, R. Eckart, S. Bartsch, M.Holtz.
2005.
Representing SFL-annotated corpora.In Proceedings of the First Computational SystemicFunctional Grammar Workshop (CSFG), Sydney,Australia.E.
Teich, S. Hansen, and P. Fankhauser.
2001.
Rep-resenting and querying multi-layer corpora.
InProceedings of the IRCS Workshop on LinguisticDatabases, pages 228-237, University of Pennsyl-vania, Philadelphia, 11-13 December.190
