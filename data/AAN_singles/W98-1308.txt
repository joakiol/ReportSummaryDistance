A Multilingual Natural-Language Interface to RegularExpressionsAarne RantaXerox Research Centre Europe (Grenoble Laboratory) and Academy of Finland.XRCE, 6 chemin de Maupertuis, 38240 Meylan, France.Abst rac t .
This report explains a natural-language interface to the formalism of XFST(Xerox Finite State Tool), which is a rich language used for specifying finite state au-tomata nd transducers.
By using the interface, it is possible to give input to XFST inEnglish and French, as well as to translate formal XFST code into these languages.
Itis also possible to edit XFST source files and their natural-language equivalents interac-tively, in parallel.The interface is based on an abstract syntax of the regular expression language andof a corresponding fragment of natural anguage.
The relations between the differentcomponents are defined by compositional interpretation a d generation functions, and bycorresponding combinatory parsers.
This design has been inspired by the logical grammarof Montague.
The grammar-driven design makes it easy to extend and to modify theinterface, and also to link it with other functionalities such as compiling and semanticreasoning.
It is also easy to add new languages to the interface.Both the grammatical theory and the interface facilities based on it have been imple-mented in the functional programming language Haskell, which supports a declarativeand modular style of programming.
Some of the modules developed for the interfacehave other uses as well: there is a type system of regular expressions, preventing somecompiler errors, a denotational semantics in terms of lazy lists, and an extensio~ of theXFST script language by definitions of functions.1 IntroductionRegular expressions are a mathematical formalism widely used for many computational tasks,ranging from simple search-and-replace procedures to full-scale implementations of grammarsof natural languages.
While the basic system of regular expressions i  simple and widely known,there are lots of variants designed for specific purposes.
In this report, we shall consider oneparticular system of regural expressions, the formalism of XFST (Xerox Finite State Tool).
Itis a system mainly used for various tasks of linguistic processing.
We shall use XFST as theobject of a case study of programming and program documentation in natural anguage.
XFSTis simple enough to make a fairly complete interface asily manageable.
At the same time, itis a system that has lots of occasional and non-programmer users, who might profit from anatural-language interface.The users of XFST typically write scripts, which are programs consisting of regular expres-sions mixed with some instructions about what to do with them.
In some cases, an XFST scriptis accompanied by some informal description of its content.
For instance, the XFST program-mer first writes an English text consisting of a sequence of grammatical rules, and then encodesthis text rule by rule into the XFST formalism.
The text then remains as a perspicuous and re-liable document of the script, particularly useful for those who have not themselves written theprogram but just use it or want to modify it.
It is partly in the very purpose of making variousintuitive ways of expression possible that the rich formalism of XFST has been developed.79However, there is no systematic guarantee of the script's being accompanied bya correspond-ing informal text.
Scripts are often created from scratch, without providing afull document evenafterwards.
And even if a document were written in parallel with the script, the two can differbecause of human error.
They can, of course, also be intentionally different, because the authorwants to hide some details of the script.But let us take it for granted that it is interesting to have natural language texts exactlycorresponding to XFST  scripts.
This is at least an interesting theoretical problem, since itrequires a very precise grammar of natural languagc zo precise that it would be possible touse natural language as a programming language instead of the formalism of XFST.
Once sucha grammar has been given to one language (to a small but sufficient fragment of it, of course),it is relatively easy to do it for other languages as well.
This will immediately lead to thesimultaneous multilin~al documentation of XFST  scripts.Thus we are going to build up a system with the following functionalities:translating of English and French texts into XFST  scripts,translating of XFST  scripts into English and French texts,translating between English and French texts (via XFST)  so that equivalence of meaningis guaranteed,stepwise editing of XFST  scripts, of corresponding English and French texts, and ofspecialized technical lexica.We shall argue that the last functionality, stepwise editing, is the most useful one.
It producesmore comprehensible results than direct translation, and it encourages a structured style ofprogramming.
Translating from English and French to XFST  is probably not useful as such,because it is difficult for a human writer to stay within the recognized fragment.
But it can beused for checking that a text once produced is unambiguous.2 Background and  re la ted  workThis study is an instance of the more general idea of an editor of multilingual semantically precisedocuments.
This idea has its origin in some linguistic investigations based on the constructivetype theory of Martin-L6f \[8\], extending the logical grammar of Montague \[9\] with some newlogical and g~ammatical structures (see Rnnta \[11\]).
Constructive type theory provides ageneralframework for mathematics and programming, which has been implemented in various ystemscalled proof editors, such as ALF from Gothenburg, LEGO from Edinburgh, and Coq fromINI~IA (see e.g.
the volumes 860,996, and 1158 of Springer Lecture Notes in Computer Science).Proof editors are used not only for editing proofs in pure mathematics, but also to constructcomputer programs and verify their validity with respect o given specifications,One application of type-theoretical Montague grammar has been to build a natural languageinterface to a proof 'editor; making it possible to edit natural anguage texts in parallel withformalized mathematics, perhaps even without knowledge of the type-theoretical formalism.We did this first for English \[12\] and then separately for French \[13\], until it turned out that asuitable kind of abstract syntax could be easily made to support several languages in parallel.
Sothere now exists an experimental proof text editor for six languages--English, Finnish, French,German, Italian, and Swedish--partly integrated in the new version of ALF.The purpose of the present work on the regular expression formalism of XFST is to test theideas of the proof text editor in a widely used programming environment, which is relativelysimple and therefore asily permits a complete and efficient natural-language interface.
This80mmiimmnmBniinmimRUinmmminnmmmmmmminnjminterface to XFST should be easy to integrate with the generic proof text editor so that, forinstance, one could prove properties of regular expressions and edit XFST code by starting frommathematical specifications:A natural language interface also exists for the proof editor Coq (see \[1\]).
It is a documen-tation tool, translating formal proofs into English and French texts, and it is already apart ofthe official release of Coq.
The very idea of using natural language as an interface to formal lan-guages i  certainly wide-spread, and extensively used, for instance, in database query dialogues.For regular expressions, there is an experimental translator f om English into the formalism ofPerl by Kinnunen \[7\].Both the grammatical theory and the interface facilities have been implemented in Haskell,which is a purely functional programming language.
Haskell code consists of definitions of datatypes and of functions between data types---one can think of it as LISP with types.
(See \[10\]for the standard report and reference manual of Haskell.)
A denotational semantics analogousto ours, for a standard system of regular language xpressions, is presented in Thompson \[14\],using the language Miranda very similar to Haskell.
He also defines a compiler, a determinizer,and an optimizer.
As regular expressions themselves do not form a regular language, the taskat hand could not be performed just by an application of finite-state methods.
(For the wholetask, we used ca.
3000 lines of Haskell code, of which 800 lines for a user interface and 350 linesfor denotational semantics not used by the natural language interface.
)3 The regular expressions of XFSTThe standard set of regular expressions, originally introduced by Kleene, has just six syntacticforms: the one-symbol expression c, the empty string expression 0,the empty language expres-sion e, the concatenation A B, the union A I B, and the Kleene closure A*.
These forms havestraightforward interpretations a  regular languages, which are sets of strings, and they can becompiled into finite state automata, which are programs that decide whether agiven string is anexpression of a given regular language.
The interpretation asregular languages could be calledthe denotational semantics of regular expressions, and the compilation their operational seman-tics.
(See \[2\], chapters 2 and 3, for standard efinitions, methods, and theorems concerningregular expressions.
)The formalism of XFST not only introduces a couple of dozens of new forms of expressionsfor regular languages, but also expressions for regular relations, which are sets not of stringsbut of pairs of strings.
These expressions are compiled into finite state transducers, whichnot only accept and reject input strings, but transform them into other strings.
(There is nocomplete specification of the XFST formalism available, but the tutorial report \[5\] gives enoughbackground to the present report.
Kaplan & Kay \[3\] and Karttunen \[4\] are the sources of manyfundamental ideas in the use of regular elations.
)The simplest example of a relation expression is the symbol pair a:b, where a and b aresymbols.
It denotes, the singleton relation \[(a, b)\].
Regular elations are closed under concate-nation, union, and Kleene closure.
So one can write, for instance,\['a:b a:b\]* J \[b:a b:a\]*which denotes the relation containing all pairs of strings consisting of equal even numbers of a'sand b's.
Seen as an operation, this relation transforms any such sequence of a's into a sequenceof b's and vice versa.81IIIIIIIThe notation of XFST is systematically ambiguous between language and relation expres-sions, exploiting the fact that a regular language can be presented by its identity relation, thatis, as the relation in which every expression of the language is paired with itself and with noth-ing else.
For instance, the expression a* is ambiguous between the set \ [ " " , "a" ,  "aa" , .
.
.
\] andthe relation \[( .... , .... ), ( "a" , "a" ) ,  ("aa",  "aa") .
.
.
.
\].The ambiguity is often resolved by the context in which an expression is used.
For instance,the crossproduct expression A ?
x. I3 can only denote a relation, and its arguments A and I3 canonly denote languages.
(It also follows that it is not possible to iterate the crossproduct.
)In general, it can always be decided whether an expression is ambiguous.
And whenever itis, the ambiguity is between a language and its identity relation.
But there must be a level ofsyntactic description on which language and relation expressions axe kept apart, so that onecan say, for instance, that the arguments of the crossproduct are languages and the result isa relation, and see that A .
x.
\[B .
x. C\] is not a well-formed expression.
(What XFST givesat present is not a syntax error but the message "cannot compile the product" and, in spiteof that, a result, which is a transducer consisting of one non-final state.
This problem couldobviously be avoided by means of a type system such as presented in Section 5 below.
A typesystem prevents ill-typed expressions from being sent to the compiler.
)To define denotational semantics, a disambiguating syntax is needed.
It will also be neededto produce natural anguage: we shall use common nouns to express regular languages butinstruction sentences to express regular elations.
Thus the expression a* is read in English asoptional sequence of 'a"swhen conceived as a language butrepeatedly accept 'a' as such, as long as applicablewhen conceived as a relation.I II II II IIiIIiIIIIi4 Abst rac t  syntax  and  operat ions  on  i tThe central role is played by an abstract syntax.
It is a system of syntax trees, whose relation tothe concrete syntaz--that is, the notation visible to the user of XFST or of natural language---islinearization, that is, the flattening of tree structure into the linear structure of a string.
Theinverse operation of linearization is parsing.In the theory of programming languages, it is customary to think of compiling as an opera-tion that is not applied to the visible code as such, but only after parsing.
Generally speaking,it is the syntax tree and not the string that is interpreted in the denotational semantics of thelanguage and compiled (in our case, into a transducer or an automaton).The structure of the grammar of XFST notation is shown in Figure 1.
The system of syntaxtrees is designed in such a way that they contain all information that is needed for linearization,interpretation, and compilation.
Mathematically, each of these operations i a function from onesystem into another.
As they usually suppress ome of the information present in syntax trees,their inverses are not functions but search procedures.
In the diagram of Figure 1, as well asin all diagrams to be displayed later, functions are represented by straight arrows and searchprocedures by bent arrows.To give an example, the XFST syntax tree82languages concrete notation automatarelations transducersabstract syntaxFigure 1.
Grammar of XFST notationRLEkleenestar (RLEsymbol (RSEonesymb "a"))gets the following values under the main operations:linearization: the concrete XFST  expression a*,interpretatio/l: the regular set \["", "a", "aa",..\] (a lazy list of Haskell),compilation: the automaton (\[sb "a"\], \[0\], \[0\],0, \[(0, sb "a ?
?, 0)\]) (written inthe notation of Haskell).Search procedures can be formalized as functions yielding lists as values, following a tech-nique explained in \[15\].
For instance, the result of parsing is a list of syntax trees, which canbe empty or have several distinct elements.
Parsing the concrete regular expression a* gives, inaddition to the syntax tree just mentioned, the treeRREkleenestar (RREsymbol (RSEonesymb "a"))that represents a relation expression and is compiled to a transducer.
Parsing the ill-formedexpression A .
x.
\[B .x.
C\] gives an empty list.The core of the natural-language interface consists of two abstract syntaxes, one for theXFST  notation and another for natural language.
The communication between the formalismand natural language takes place between the abstract syntaxes, so that all relevant informationis preserved.
However, natural language is richer than XFST  in the sense that it may containmany different expressions for one and the same automaton or transducer (and we intendour fragment of natural language to be much richer in the future than it is now).
Thus theoperation of phrasing that takes an XFST  expression into a natural-language expression is asearch procudere, while the interpretation of XFST  in natural language is a function.Figure 2 shows the communication between XFST  and natural languages.
The user of theinterface, who does not care about why it works, will only see the concrete notations on thetop and on the bottom, and the translations between them, which are both search procedures,since at least one component in both of them is a search procedure~5 Syntact i c  ca tegor iesThe systematic ambiguity of XFST notation is resolved by introducing two distinct categoriesof regular expressions, which are the categories83EmBXFST concretelinearizationXFSTinterpretation lNaturalparsing (EnglishFrench~ pal~ingabstract~ phrasingabstractXFST concretef ~formalizationlinearizationconcrete English concreteconcrete French concretegenerationFigure 2.
Connections between XFST and natural language (left), the system visible to user (right)ELE of regular language xpressions,ERE of regular elation expressions.In addition, there are some categories not directly visible to the user: l~E of regular matchconstraint expressions, RCR of regular context expressions, ROE of regular operation expressions,and RSE of regular symbol expressions.
Expressions of these categories occur as parts of languageand relation expressions.
For instance, match constraint expressions include the arrows -> and-> denoting the "all matches" constraint and the "left to right longest match" constraint,respectively.
What is important in recognizing these categories i that they can be given denc*tational semantics that works compositionally asa part of the semantics of larger expressions.Thus, for instance, match constraints can be interpreted as functions of pairs of lists of integersencoding segment lengths.One level higher up than language and relation expressions, we have the categoryRDE of regular definition expressions.This category includes expressions of the formdef ine  A B ;used in XFST scripts.
There are two syntactic structures of this category: definitions of regularlanguages and definitions of regular elations.
Thus, as will he shown later, the categories RLEand RRE are' open to the introduction of new expressions by the user of the interface.In order to define a compositional interpretation f natural language in the XFST formalism,there must be at least one syntactic ategory of natural anguage for each category of XFST.We will have, in particular, the categoriesELECN of regular language common ouns,RREI of regular elation instructions,EDE$ of regular definition sentences.I II IiiI Il iI IIIIiIIIInii lImII ImIi84It could be possible to have more categories than these so that, for instance regular languagescould also be expressed by adjectives and not only by common nouns.
But we shall here confineourselves to this minimal system.6 Trans la t ions  between XFST  and  natura l  languagesRather than showing the syntax trees, their interpretations, and their linearizations in formaldetail, we shall just list the XFST  operators and some ways of expressing them in English andin French.
The list is shown in Table 1.
The  table presents the expressions grouped into thecategories RLg, Rl~, RI~, RCE, and RDE.
The category RCE is included in RLE, and the categoryR0~.
in RRE.The table shows just one natural-language structure for each XFST form of expression.
Afew more are already implemented in the interface, and anyone who plays with it will almostimmediately suggest some new ones.
But there are some requirements hat any new syntacticstructure must fulfill--if some of the expressions included in the table looks more complicatedthan one would expect, this is usually explained by some of the following three principles:Expressions belonging to the same category must have the same syntactic behaviour.
(This rules out having, say, adjectives in the same category as common nouns.
)The constructions must be arbitrarily iterable.
(Just as the operators of XFST  are.
Theresult is often hard to read but it should always be grammatical.
)No expression should be ambiguous.
(This is not necessary for an interface, but itmakes it simpler.
The language gets more complicated, though, because special wordsare needed to function as parentheses.
)In Section 9, we will explain an extension of the XFST  script language that makes it possibleto introduce new ways of expressing regular expression operators.The presentation of natural language expressions in the table is schematic and does not makeexplicit the way in which various morphological features, such as those imposed by agreement,are controlled.
There is a detailed discussion of this topic in \[13\].
All morphological featuresare introduced in linearization, and so is the order of words: they do not belong to the abstractsyntax.All of the structure captured by the abstract syntax is common to the different languages.Notice that there is more in common than just the semantical content, since the same contentcan be expressed in different ways.
The tiny fragment presented here does not yet give a verygood illustration of this phenomenon.
But a little example can already be given.
The regularlanguagea lb lcis expressed, according to the table, by the English and French common nounsstring equal either to 'a' or to 'b' or to 'c',chaine ~gale soit d 'a' soit d 'b' soit ~ 'c'.But the grammar also includes the more concise structure usable for a union all of whosemembers are single symbols:85mmmXFSTc (symbol){abc).
(word)0.~.
?\AI tB.. .
CIt I B .
.
.
cIt*It+SItI t -BAIt& BA'n(It)tB=> 0It (ident.
tel.
)c:dQ .
.
.P)rt I q. .
.pIt*'it+It*n(It)A.x .
BR .
o .q .
.
.pAx->BI t  x-> L... It->@->Ldefine It Bdefine R QEnglish French' c '"abc"empty stringword boundarysymbol!symbol other than an A!string beginning with an g andcontinuing by a B ...followed by a Ct c '"abc"chalne videlimite de rootssymbolesymbole autre qu 'un Itchaise commenfant par un A etcontinuant par un B :.. suivi d'un Cstring equal either to an Itor to a B .
.
.o r  to a Coptional sequence of A 'snonempty sequence of I t 'sstring containing an Aother A than a Bchaise 6gale soitd un Asoit dun  B .
.
.
soit dun Cs~quence optionnelle de It'ss~quence non vide de A 's!chalne contenant un Aautre A qu'un Bstring equal both to an A and to a Bstring other than an Asequence of n A'soptional Astring resulting from an Aby inserting B'sstring containing an A only Gaccept A as suchchange c into din the beginning R then Q .. .
then Pnot only It but also qrepeatedly R as longas applicable)repeatedly R as longas applicable but at least oncerepeatedly It n timesoptionally Rreplace an A by a Bfirst R and, in what results, Q,.
.
.
and, in what results, Preplace every t by a B, x->mark the beginning of every A byan L and the end by an It, x->choosing all possible matcheschoosing the longest matchesfrom left to rightif it is preceded by an Lif it is followed by an RAnA is aB.To R is to Q.cha?ne ~gale et d un A et dun Bchaise autre qu'un Asdquence de n A'sA optionnelchafne r~sultant d'un Apar l'insertion de B'schafne ne contenant de A que Gaccepter A tel quelchanger c pour dau ddbut R, ensuite q. .
.
.
ensuite Pnon seulement R mais aussi.
Qfaisant rdpdtition, R aussi longtempsqu 'applicablefaisant r~pdtition, It aussi longtempequ'applicable mais au rosins use ~sisfaisant r~p~tition, R n ~sisoptionnellement, gremplacer un A par un Bd'abord It et, dans ce qui en r~sulte, Q. .
.
et, dans ce qui en rdsulte, Premplacer tout A par un B, x->marquez le commencement de tout Apar un Let  la fin par un R, x->choisissant routes les apparitionspossibleschoisissant les apparitions ies pluslongues de gauche d droites'il est prdc~d~ par un Ls'il est suivi d'un ItUsA est un B.R, c'est q.Table 1.
Regular expressions in XFST, English, and French.\[\]mmmmmmmmmmmm86symbol from the list 'a', 'b ', 'c'symbole de la liste 'a" 'b', 'c'.The distinction between these two grammatical structures is similar in English and French, butit is not reflected by any distinction on the semantic level, that is, in the XFST formalism.7 Translating regular expressionsGiven the theoretical framework of Figure 2 (left), it is possible to build several functionalitiesof translating between XFST, English, and French and of editing XFST scripts and English andFrench text files.
For instance, if we have an interface implementing translation from XFST tonatural anguage, we can type in the string\[a J b\]+and get the following output (actually as ~ code, here typeset):English expressions for language :nonempty sequence of symbols from the list 'a', 'b'French expressions for language :sgquence non vide de symboles de la liste 'a', 'b'English expressions for relation :accept a nonempty sequence of symbols from the list 'a" 'b' as such~vpeatedly accept a symbol from the list 'a ', 'b' as such, as long as applicable but at leastoncel~epeatedly not only accept 'a' as such but also accept 'b' as such, as long as applicablebut at least onceFrench expressions for relation :accepter une sgquence non vide de symboles de la liste 'a" 'b' telle quelle\[aisant rgpgtition, accepter un symbole de la liste 'a', 'b ' tel quel aussi longtemps qu'ap-plicable mais au moins une loisfaisant rdp~tition, non seulement accepter 'a' tel quel mais aussi accepter 'b' tel quelaussi longtemps qu 'applicable mais au moins une loisBecause the input expression is ambiguous between a language and a relation, it can be ex-pressed both as a common noun and as an instruction.
The instruction, in turn, is either basedon the identity relation of \[a I b\]+ (the first sentence), on the Kleene closure of the identityrelation of \[a I b\] (the second sentence), or on the disjunction of the identity relations of aand b (the third sentence).
For the practical purpose of documentation, it seems that it is theuser who knows best which alternative to choose.Translation from English or French to XFST is unambiguous because our English and Frenchfragments distinguish between language and relation expressions.
The parser allows quite a lotof errors in natural language input: since morphology and orthography have been preciselydefined in linearization, it is only easier, as well as more useful, to make the parser tolerant.Thus the French inputaccepter un sequence optionnel de chaines vide tel quelsboth yields the result O* and the corrected translation back to French,accepter une sgquence optionnelle de chaines rides telle quelle878 Ed i t ing  sc r ip ts  and  text  f i lesWhile many grammatical constructions of formal and natural languages can be arbitrarilyiterated, even without ambiguities, the results can get hard to read.
Thus the definition of asimplified Finnish hyphenation program reads in the XFST notationdef ine  hyphenate\ [~ lg lh l j  I k i lamln ip J r l sS t  I~*\[a I ?
i i I o I u I y\]+~ i g i h I j f k i 1 I m I n J p \] r I s I t I v \ ] *e -> .
.
.
~-  \[I  _ \ [d  i g i h i j i k i 1 I m i n I p \[ r\[a i ?
I i I o I u I y\]+\] ;I s l t l v \ ] *which is already hard to read, but probably easier than the English version produced by ourinterface (the French version is no better):To hyphenate is to mark the end of every string that begins with an optional sequenceof symbols from the list 'd', 'g', 'h', 'j', 'k', T, 'm', 'n', 'p', 'r', 's', 't', 'v' and continuesby a nonempty sequence of symbols from the list 'a', 'e', 'i', 'o', 'u', 'y' followed byan optional sequence of symbols from the list 'd', 'g', 'h', 'j', 'k', '1', 'm', 'n', 'p', 'r','s', 't', 'v' by '-' if it is followed by a string that begins with an optional sequence ofsymbols from the list 'd', 'g', 'h', 'j', 'k', T, 'm', 'n', 'p', 'r', 's', 't', 'v' and continuesby a nonempty sequence of symbols from the list 'a', 'e', 'i', 'o', 'u', 'y', choosing thelongest matches from left to right.Both the formal code and the corresponding English and French texts are easier to under-stand if organized in sequences of shorter definitions:def ine  vowe l  a f e J i J o J u I y ;de f ine  consonant  d J g I h I j I k I 1 J m I n I p I r I s I 1; I v ;de f ine  sy l lab le  consonant*  voee l+ consonant*  ;de f ine  hyphenate  sy l lab le  @-> .
.
.
~,- I I _ consonant  vowe l  ;A vowel is a symbol from the list %', 'e', 'i', 'o', 'u', 'y'.A consonant is a symbol from the list 'd', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'r', 's', 't', 'v'.A syllable is a string that begins with an optional sequence of consonants and continuesby a nonempty sequence of vowels followed by an optional sequence of consonants.To hyphenate is to mark the end of every syllable by '-' if it is followed by a string thatbegins with a consonant and continues by a vowel, choosing the longest matches fromleft to right.Une voyelle est un symbole de la liste 'a', 'e', 'i', 'o', 'u', 'y'.Une consonne st un symbole de la liste 'd', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'r', 's', 't','v'.Un syllabe est une chaine qui commence par une sdquence optionnelle de consonnes etcontinue par une sdquence non vide de voyelles uivie d'une sdquence optionnelle deconsonnes.Marquer les syllabes, c'est marquer la fin de tout s~llabe par '-' s'il est suivi d'une cha/nequi commence par une consonne t continue par une voyelle, choisissant les apparitionsles plus longues de gauche/L droite.88mmmn\[\]\[\]\[\]NilUnmmn\[\]Unm\[\]\[\]\[\]n(The example is from \[6\], structured in a slightly different way.
)When editing a natural anguage text in parallel with an XFST script, some lexical infor-mation has to be given: the word or words used for each new defined concept, the plural form(if irregular), and the gender (in'French).
The meaning of each lexical entry is given by thedefinition itself.
Thus the words that are introduced are used in very precise technical meanings.9 Function definitionsStandard XFST scripts have a format for defining macros for constant regular expressions, butwe can get much more structure by defining functions.
For function definitions, we use theformatdef ine  F(.X .
.
.
.
.
Y.)
C,where C is an already defined regular expression possibly containing the variable symbols X,..., Y (these symbols of course cannot be used as names of these letters in C--but we neednot reserve a special class of variable symbols).
A file containing function definitions can betranslated into a file without hem by replacing all applications of functions by their definienda.Those functions that are not used in definitions of constants are then simply ignored.Function definitions can be used for introducing new operators.
For example, the task ofshallow parsing uses the same kind of mark up operation over and over again: a segment of astring is put between parentheses and the closing parenthesis marked by a category label.Using a function definition, we can writedef ine  labe lWi th ( .C ,c . )
C @-> ~( .
.
.
~) c ;def ine  markNP labelWith(.NP,~+np.)
;def ine  markVP labelWith(.VP,~+vp.)
;def ine  marks labelWi~h(.S, ~+s .)
;where Np, Vp, and S are some previously defined sets of noun phrases, verb phrases, and sen-tences, respectively.
Now, the natural-language structure corresponding to functions is an ex-pression with complements, and it is easy to include user-defined information on the comple-ments in the grammar.
This information includes the prepositions (possibly none) required byeach argument place, as well as the question whether the complement takes the plural or thesingular form.
The English text corresponding to the above piece of script looks as follows:To label C's with a c is to mark the beginning of every C by '(' and the end by a stringthat begins with ')' and continues by a c, choosing the longest matches from left toright.To mark noun phrases is to label noun pl~rases with '+np'.To mark verb phrases is to label verb phrases with '+vp'.To mark sentences i to label sentences with '+s'.Without the initial function definition, we would need three sentences of the same length andcomplexity as the function definition.89m10 The importance of structured writing IOrganizing a program into a sequence of definitions is an example of structured programming,whose benefits are well known among programmers, but which is even more important if pro-grams are systematically translated into texts.
The impact of structuration on readability is,so to say, magnified when formal code is translated into the less perspicuous syntax of naturallanguage.
In natural anguage, syntactically complex expressions must be avoided by carefulplanning of the text.An obvious question arises whether it is possible to take a messy text and make it morereadable by some automatic structuration software.
The answer suggested by the analogy be-tween text-production a d programming is negative: as there is no algorithm that turns messyprograms into structured ones, there is no algorithm that turns messy texts into readable ones.But programmers and writers can be encouraged to structured thinking.Readability is not so much a function of the language that is chosen but of the way in whichthe chosen language is used.
There may be programming languages in which it is impossible toproduce readable code, but unreadable code can be produced in any language, be it formal ornatural.
Thus any natural-language interface should be judged, not by the worst expressionsit includes (because very language includes bad expressions), nor by its coverage of naturallanguage (which is surely limited), but by its ability to provide clear and natural ways ofexpression whenever properly used.References1.
Yann Coscoy, Gilles Kahn, and Laurent Th~ry, 1995.
"Extracting text from proofs".
In TypedLambda Calculus and Applications, Lecture Notes in Computer Science 902, Springer, Heidelberg.2.
John E. Hopcroft & Jeffrey D. Ullman, 1979.
Introduction to Automata Theory, Languages, andComputation.
Addison-Wesley, Reading (Ma.).3.
Ronald M. Kaplan ~ Martin Kay, 1994.
"Regular Models of Phonological Rule Systems ~, Compu-tational Linguistics 20, pp.
331-380.4.
Lanri Karttunen, 1996.
"Directed Replacement", In Proceedings ofACL.96, Santa Cruz, California.5.
Lanri Karttunen, 1997.
"Syntax and Semantics of Regular Expressions", Web documentation,Xerox Corporation.6.
Lanri Karttunen, 1997b.
"Examples of Networks and Regular Expressions".
Web documentation,Xerox Corporation.7.
Matti Kinnunen, 1997.
"A natural-language interface to regular expressions".
Talk given at theSecond Conference on Logical Aspects of Computational Linguistics in Nancy.8.
Per Martin-LSf, 1984.
Intuitionistic Type Theory, Bibliopolis, Naples.9.
Richard Montague, 1974.
Formal Philosophy, Yale U.P., New Haven.10.
John Peterson & Kevin Hammond eds., 1997.
Report on the Programming Language Haskell.
ANon,strict, Purely Functional Language, Yale University.
Available through t tp: / /haskel l ,  org/.11.
Aarne Ranta, 1994.
Type Theoretical Grammar, Oxford University Press, Oxford, 1994.12.
Aarne Ranta, 1996.
"Context-relative syntactic ategories and the formalization of mathematicaltext".
In S. Beraxdi and M. Coppo, eds., Types/or Proofs and Programs, pp.
231-248, Lecture Notesin Computer Science 1158.
Springer, Heidelberg.13.
Aaxne Ranta, 1997.
"Structures grammaticales dans le fran~aJs math~matique".
In Math6ma-tiques, informatique etSciences Humaines., vol.
138 pp.
5-56 & vol.
139 pp.
5-36.14.
Simon Thompson, 1995.
"Regular Expressions and Automata using Miranda".
University of Kent.Article available in http://www.cs.ukc.ac.uk/pubs/1995/212/index.html.15.
Philip Waziler, 1985.
"How to replace failure by a list of successes".
In Proceedings ofConferenceon Functional Programming Languages and Computer Architecture, pp.
113-128, Lecture Notes inComputer Science 201.
Springer, Heidelberg.90
