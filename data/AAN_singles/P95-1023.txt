TAL Recognition in O(M(n2)) TimeSanguthevar RajasekaranDept.
of CISE, Univ.
of Floridaraj~cis.ufl.eduShibu YoosephDept.
of CIS, Univ.
of Pennsylvaniayooseph@gradient .c is .upenn.eduAbstractWe propose an O(M(n2)) time algorithmfor the recognition of Tree Adjoining Lan-guages (TALs), where n is the size of theinput string and M(k) is the time neededto multiply two k x k boolean matrices.Tree Adjoining Grammars (TAGs) are for-malisms uitable for natural language pro-cessing and have received enormous atten-tion in the past among not only naturallanguage processing researchers but also al-gorithms designers.
The first polynomialtime algorithm for TAL parsing was pro-posed in 1986 and had a run time of O(n6).Quite recently, an O(n 3 M(n)) algorithmhas been proposed.
The algorithm pre-sented in this paper improves the run timeof the recent result using an entirely differ-ent approach.1 IntroductionThe Tree Adjoining Grammar (TAG) formalism wasintroduced by :loshi, Levy and Takahashi (1975).TAGs are tree generating systems, and are strictlymore powerful than context-free grammars.
Theybelong to the class of mildly context sensitive gram-mars (:loshi, et al, 1991).
They have been foundto be good grammatical systems for natural lan-guages (Kroch, Joshi, 1985).
The first polynomialtime parsing algorithm for TALs was given by Vi-jayashanker and :loshi (1986), which had a run timeof O(n6), for an input of size n. Their algorithmhad a flavor similar to the Cocke-Younger-Kasami(CYK) algorithm for context-free grammars.
AnEarley-type parsing algorithm has been given bySchabes and Joshi (1988).
An optimal inear timeparallel parsing algorithm for TALs was given byPalls, Shende and Wei (1990).
In a recent paper,Rajasekaran (1995) shows how TALs can be parsedin time O(n3M(n)).In this paper, we propose an O(M(n2)) timerecognition algorithm for TALs, where M(k) is thetime needed to multiply two k x k boolean matri-ces.
The best known value for M(k) is O(n 2"3vs)(Coppersmith, Winograd, 1990).
Though our algo-rithm is similar in flavor to those of Graham, Har-rison, & Ruzzo (1976), and Valiant (1975) (whichwere Mgorithms proposed for recognition of Con-text Pree Languages (CFLs)), there are crucial dif-ferences.
As such, the techniques of (Graham, et al,1976) and (Valiant, 1975) do not seem to extend toTALs (Satta, 1993).2 T ree  Ad jo in ing  GrammarsA Tree Adjoining Grammar (TAG) consists of aquintuple (N, ~ U {~}, I, A, S), whereN is a finite set of nonterminal symbols,is a finite set of terminal symbols disjoint fromN,is the empty terminal string not in ~,I is a finite set of labelled initial trees,A is a finite set of auxiliary trees,S E N is the distinguished start symbolThe trees in I U A are called elementary trees.
Allinternal nodes of elementary trees are labelled withnonterminal symbols.
Also, every initial tree is la-belled at the root by the start symbol S and hasleaf nodes labelled with symbols from ~3 U {E}.
Anauxiliary tree has both its root and exactly one leaf(called the foot node ) labelled with the same non-terminal symbol.
All other leaf nodes are labelledwith symbols in E U {~}, at least one of which has alabel strictly in E. An example of a TAG is given infigure 1.A tree built from an operation involving two othertrees is called a derived tree.
The operation involvedis called adjunction.
Formally, adjunction is an op-eration which builds a new tree 7, from an auxiliarytree fl and another tree ~ (a is any tree - initial, aux-iliary or derived).
Let c~ contain an internal node mlabelled X and let fl be the auxiliary tree with rootnode also labelled X.
The resulting tree 7, obtainedby adjoining fl onto c~ at node m is built as follows(figure 2):166Initial treeO~SIEG = {{S},{a,b,c,e }, { or}, { ~}, S}SSb S*Figure 1: Example of a TAGAuxiliary tree1.
The subtree of a rooted at m, call it t, is excised,leaving a copy of m behind.2.
The auxiliary tree fl is attached at the copy ofm and its root node is identifed with the copyof m.3.
The subtree t is attached to the foot node of fland the root node of t (i.e.
m) is identified withthe foot node of ft.This definition can be extended to include adjunc-tion constraints at nodes in a tree.
The constraintsinclude Selective, Null and Obligatory adjunctionconstraints.
The algorithm we present here can hemodified to include constraints.For our purpose, we will assume that every inter-nal node in an elementary tree has exactly 2 children.Each node in a tree is represented by a tuple <tree, node index, label >.
(For brevity, we will referto a node with a single variable m whereever thereis no confusion)A good introduction to TAGs can be found in(Partee, et al, 1990).3 Context  Free recognit ion inO( M(n)) TimeThe CFG G = (N,~,P, A1), whereN is a set of Nonterminals {A1, A2, .., Ak},is a finite set of terminals,P is a finite set of productions,A1 is the start symbolis assumed to be in the Chomsky Normal Form.Valiant (1975) shows how the recognition problemcan be reduced to the problem of finding TransitiveClosure and how Transitive Closure can be reducedto Matrix Multiplication.Given an input string aza2 .... an E ~*, the recur-sive algorithm makes use of an (n+l)?
(n+l)  uppertriangular matr ix b defined byhi,i+1 = {Ak I(Ak --* a,) E P},bi,j = ?, for j  i + 1and proceeds to find the transitive closure b + of thismatrix.
(If b + is the transitive closure, then Ak Eb.
+.
?
:~ Ak-~ ai .... aj-1) $,JInstead of finding the transitive closure by the cus-tomary method based on recursively splitting intodisjoint parts, a more complex procedure based on'splitting with overlaps' is used.
The extra cost in-volved in such a strategy can be made almost negligi-ble.
The algorithm is based on the following lemmaLemma : Let b be an n x n upper triangular ma-trix, and suppose that for any r > n/e, the tran-sitive closure of the partitions \[1 < i , j  < r\] and\ [n -  r < i , j  < n\] are known.
Then the closure of bcan be computed byI.
performing a single matrix multiplication, and2.
finding the closure of a 2(n - r) ?
2(n - r) up-per triangular matrix of which the closure of thepartitions\[1 < i , j  < n -  r\] and \ [n -  r < i , j  <2(n - r)\] are known.Proof: See (Valiant, 1975)for detailsThe idea behind (Valiant, 1975) is based on visu-alizing Ak E b+j as spanning a tree rooted at thenode Ak with l~aves ai through aj -1 and internalnodes as nonterminals generated from Ak accordingto the productions in P. Having done this, the fol-lowing observation is made :Given an input string a l .
.
.a ,  and 2 distinct sym-bol positions, i and j, and a nonterminal Ak suchthat Ak E b + ., where i' < i , j '  > j,  then 3 a non-I P3terminal A k, which is a descendent of Ak in theb + .
where tree rooted at Ak, such that A k, E i d'i" < i, j"  > j and A k, has two children Ak~ and Ak2such thatAk~ Eb +, andAk2 Eb  +.
.w i th i<s<j .A k, can be thought of as a minimal node in thissense.
(The descendent relation is both reflexive andtransitive)Thus, given a string a l .
.
.a ,  of length n, (say r =2/3), the following steps are done :167tFigure 2: Adjunction Operationkt1.
Find the closure of the first 2/3 ,i.e.
all nodesspanning trees which are within the first 2/3 .2.
Find the closure of the last 2/3 , i.e.
all nodesspanning trees which are within the last 2/3.3.
Do a composition operation (i.e.
matrix multi-plication) on the nodes got as a result of S tep1 with nodes got as a result of S tep  2.4.
Reduce problem size to az...an/zal+2n/3...anand find closure of this input.The point to note is that in step 3, we can get ridof the mid 1/3 and focus on the remaining problemsize.This approach does not work for TALs because ofthe presence of the adjunction operation.Firstly, the data structure used, i.e.
the 2-dimensional matr ix with the given representation,is not sufficient as adjunction does not operate oncontiguous trings.
Suppose a node in a tree domi-nates a frontier which has the substring aiaj to theleft of the foot node and akat to the right of thefootnode.
These substrings need not be a contigu-ous part of the input; in fact, when this tree is usedfor adjunction then a string is inserted between thesetwo suhstrings.
Thus in order to represent a node,we need to use a matr ix of higher dimension, namelydimension 4, to characterize the substring that ap-pears to the left of the footnode and the substringthat appears to the right of the footnode.Secondly, the observation we made about an entryE b + is no longer quite true because of the presenceof adjunction.Thirdly, the technique of getting rid of the mid1/3 and focusing on the reduced problem size alone,does not work as shown in figure 3:Suppose 3' is a derived tree in which 3 a node rnon which adjunction was done by an auxiliary treeft.
Even if we are able to identify the derived tree71 rooted at m, we have to first identify fl before wecan check for adjunction, fl need not be realised asa result of the composition operation involving thenodes from the first and last 2/3's ,(say r =2/3).Thus, if we discard the mid 1/3, we will not be ableto infer that the adjunction had indeed taken placeat node m.4 Notat ionsBefore we introduce the algorithm, we state the no-tations that will be used.We will be making use of a 4-dimensional matr ixA of size (n + 1) x (n + 1) x (n + 1) x (n + 1), wheren is the size of the input string.
(Vijayashanker, Joshi, 1986) Given a TAG G andan input string aza2..an, n > 1, the entries in A willbe nodes of the trees of G. We say, that a node m(= < 0, node index, label >) E A( i , j ,  k, l) iff m is anode in a derived tree 7 and the subtree of 7 rootedat m has a yield given by either ai+l...ajXak+l...al(where X is the footnode of r/, j < k) or ai+l .... az(when j = k).I f  a node m E A(i,j,k,l}, we will refer to m asspanning a tree (i,j,k,l).When we refer to a node m being realised as aresult of composition of two nodes ml and rnP, wemean that 3 an elementary tree in which m is theparent of ml and m2.A Grown Auxiliary Tree is defined to be eithera tree resulting from an adjunction involving twoauxiliary trees or a tree resulting from an adjunctioninvolving an auxiliary tree and a grown auxiliarytree.Given a node m spanning a tree (i,j,k,l), we definethe last operation to create this tree as follows :if the tree (i,j,k,l) was created in a series of op-erations, which also involved an adjunction by anauxiliary tree (or a grown auxiliary tree) (i, J l ,  kz, l)onto the node m, then we say that the last opera-tion to create this tree is an adjunction operation;else the last operation to create the tree (i,j,k,l) is acomposition.The concept of last operation is useful in modellingthe steps required, in a bottom-up fashion, to create168n .
.
x71Node m has label X/,'3 'Derived tree71Figure 3: Situation where we cannot infer the adjunction if we simply get rid of the mid 1/3a tree.5 A lgor i thmGiven that the set of initial and auxiliary trees canhave leaf nodes labelled with e, we do some prepro-cessing on the TAG G to obtain an Association List(ASSOC LIST) for each node.
ASSOC LIST (m),where m is a node, will be useful in obtaining chainsof nodes in elementary trees which have children la-belled ~.Initialize ASSOC LIST (m) = ?, V m, and thencall procedure MAKELIST on each elementary tree,in a top down fashion starting with the root node.Procedure MAKELIST (m)Begin1.
If m is a leaf then quit2.
If m has children ml and me both yielding theempty string at their frontiers (i.e.
m spans asubtree yielding e) thenASSOC LIST (ml) = ASSOCLIST (m) u {m)ASSOC LIST (m2) = ASSOCLIST (m) U (m}3.
If m has children m1 and me, with only meyielding the empty string at its frontier, thenASSOC LIST (ml)  = ASSOCLIST (m) u {m)EndWe initially fill A(i , i+l , i+l, i+l)  with all nodesfrom Smt,Vml, where S,~1 = {ml} O AS-SOC LIST (ml), ml being a node with the samelabel as the input hi+l, for 0 < i < n-1.
We also fillA(i,i,j,j), i < j, with nodes from S,~2, Vm2, whereSin2 = {me) tJ ASSOC LIST (me), me being a footnode.
All entries A(i,i,i,i), 0 < i < n, are filled withnodes from Sraa,Vm3, where S,n3 = { m3} U AS-SOC LIST (mS), m3 having label ?.Following is the main procedure, Compute Nodes,which takes as input a sequence rlr2 ..... rp of symbolpositions (not necessarily contiguous).
The proce-dure outputs all nodes spanning trees (i,j,k,O, with{i, 1} E {r l , r2  ..... ~'ip } and {j,k} E {r l , r  I Jr Z,.. .
,rp}.The procedure is initially called with the sequence012..n corresponding to the input string aa ..... an.The matrix A is updated with every call to this pro-cedure and it is updated with the nodes just realisedand also with the nodes in the ASSOC LISTs of thenodes just realised.Procedure Compute Nodes ( rl r2 ..... rp )Begin1.
I fp  = 2, thena.
Compose all nodes E A(r l , j ,  k, re) with allnodes E A(re,re, re, re), rt < j < k < re.Update A .b.
Compose all nodes E A( r l , r l , r l , rx )  withall nodes E A(rt,  j, k, r2), rt < j < k < re.Update A .e.
Check for adjunctions involving nodes re-alised from steps a and b. Update A .d.
Return2.
Compute Nodes ( rlr2 ..... rep/a ).3.
Compute Nodes ( rl+p/z ..... rp ).4. a. Compose nodes realised from step 2 withnodes realised from step 3.b.
Update A.5.
a.
Check for all possible adjunctions involvingthe nodes realised as a result of step 4.b.
Update A.6.
Compute Nodes ( rlre...rp/arl+2p/a...r p )169EndSteps  la , lb  and  4a can be carried out in the fol-lowing manner :Consider the composition of node ml with nodeme.
For step 4a, there are two cases to take care of.Case 1If node ml in a derived tree is the ancestor of thefoot node, and node me is its right sibling, such thatml 6 A(i, j, k, l) and m2 E A(l, r, r, s), then theirparent, say node m should belong to A( i , j ,k ,s ) .This composition of ml with me can be reduced to aboolean matrix multiplication i  the following way:(We use a technique similar to the one used in (Ra-jasekaran, 1995)) Construct wo boolean matricesB1, of size ((n 4- 1)2p/3) ?
(p/3) and Be, of size(p/3) x (p/3).Bl(ijk, l) = 1 iff ml  E A( i , j , k , I )and i E {rl, .., rv/3}and 1 E {rl+p/3, ..r2p/3}= 0 otherwiseNote that in B1 0 < j < k < n.BeEs  ) = 1 iff me e A(I ,r ,  r ,s)and 1 E {r1+;13, ..rep/3}and s E {r l+ep/3 ,  .., rp}-- 0 otherwiseClearly the dot product of the i jk th row of B1with the s th column of Be is a 1 iff m E A(i, j, k, s).Thus, update A( i , j ,k ,  s) with {m} U ASSOC L IST(m).Case 2If node me in a derived tree is the ancestor of thefoot node, and node ml is its left sibling, such thatml E A( i , j , j , l )  and m2 E A(l,p, q, r), then theirparent, say node m should belong to A(i ,p,q,s) .This can also be handled similar to the manner de-scribed for case 1.
Update A(i ,p,q,s)  with {m} UASSOC L IST  (m).Notice that Case 1 also covers step la  and Case 2also covers step lb .S tep  5a and Step  l c  can be carried out in thefollowing manner :We know that if a node m E A( i , j ,k , i ) ,  and theroot ml of an auxiliary tree E A(r, i, i, s), then ad-joining the tree 7/, rooted at ml, onto the node m,results in the node m spanning a tree (rj,k,s), i.e.
mE A(r, j, k, s).We can essentially use the previous technique ofreducing to boolean matrix multiplication.
Con-struct two matrices C1 and Ce of sizes (p2/9) x (n +1) 2 and (n + 1) 2 x (n + 1) 2, respectively, as follows :Cl(ii, jk) = 1 iff 3ml,  root of an auxiliarytree E A(i, j, k, l), with same label as m andCl(il, jk) = 0 otherwiseNote that in CI i E {rl , .
.
,rpls}, i E{r l+2p/3  , .., rp},  and 0 _< j < k < n.Ce(qt, rs) = 1 iff m E A(q, r, s, t)-- 0 otherwiseNote that inC2 0<q<r<s<t<n.Clearly the dot product of the ii th row of C1 withthe rs th column of Ce is a 1 iff m E A( i , r ,s , l ) .Thus, update A(i, r, s, l) with {m} U ASSOC L IST(m).The input string ala2...an is in the language gener-ated by the TAG G iff 3 a node labelled S in someA(O, j , j ,n) ,  0 <_ j < n.6 Complex i tySteps la ,  lb  and 4a can be computed inO(neM(p)).Steps 5a and le  can be computed inO((ne/pe)eM(pg)).If T(p) is the time taken by the procedure ComputeNodes, for an input of size p, thenT(p) = 3T(2p/3)4-O(n2M(p))4-O( ( ne /pe)e M (pe) )where n is the initial size of the input string.Solving the recurrence relation, we get T(n) -O(M(ne)).7 Proo f  o f  Cor rectnessWe will show the proof of correctness of the algo-rithm by induction on the length of the sequence ofsymbol positions.But first, we make an observation, given any twosymbol positions (r~, rt), rt > r~ 4-1 , and a node mspanning a tree ( i , j ,  k, l) such that i < rs and i _> rtwith j and k in any of the possible combinations asshown in figure 4.3 a node m' which is a descendent of thenode m in the tree (i,j,k,l) and which eitherE ASSOC L IST(ml )  or is the same as ml, withml having one of the two properties mentioned be-low :1. ml  spans a tree ( i l , j l ,  kl, 11) such that the lastoperation to create this tree was a compositionoperation involving two nodes me and m3 withme spanning (ix, J2, k2, 12) and m3 spanning(12,j3, ks, ix).
(with ( r ,  < l~.
< rt), 01 <- r,),(rt < !1) and either (j2 = kz,j3 = j l ,k3 = kl)or (j2 = j l ,k2 = kl , j3 = k3) )2. ml  spans a tree ( i l , j l ,  kl, l l) such that the lastoperation to create this tree was an adjunctionby an auxiliary tree (or a grown auxiliary tree)(il, j2, ke, Ix), rooted at node me, onto the nodeml spanning the tree ( je , j l ,  kl, k2) such thatnode me has either the property mentioned in(1) or belongs to the ASSOC L IST  of a node170I Irs rtj k234 j5Figure 4: Combinationsj kj kkj kof j and k being consideredwhich has the property mentioned in (1).
(Thelabels of ml  and me being the same)Any node satisfying the above observation will becalled a minimal node w.r.t, the symbol positions(r,, r0.The minimM nodes can be identified in the follow-ing manner.
If the node m spans (i , j ,  k, l) such thatthe last operation to create this tree is a compositionof the form in figure ha, then m tO ASSOC L IST(m)is minimal.
Else, if it is as shown in figure 5b, wecan concentrate on the tree spanned by node ml andrepeat he process.
But, if the last operation to cre-ate (i, j, k, 1) was an adjunction as shown in figure5c, we can concentrate on the tree (il, j, k, 11) ini-tially spanned by node m. If the only adjunctionwas by an auxiliary tree, on node m spanning tree(Q, j ,k ,  lx) as shown in figure 5d, then the set ofminimal nodes will include both m and the root mlof the auxiliary, tree and the nodes in their respec-tive ASSOC LISTs.
But if the adjunction was by agrown auxiliary tree as shown in figure he, then theminimal nodes include the roots of/31,/32, ..,/3s, 7and the node m.Given a sequence < r l , r2, .
.
, rp >, we call(rq,r~+l) a gap, iff rq+l ?
rq + 1.
Identifying min-imal nodes w.r.t, every new gap created, will serveour purpose in determining all the nodes spanningtrees (i, j, k, 1), with {i, l} e {rl, r2, .., rp}.Theorem : Given an increasing sequence <rl ,  r2, .., rp > of symbol positions and givena.
V gaps (rq, rq+l), all nodes spanning trees (i,j,k,l}with rq < i < j < k < l < rq+lb.
V gaps (rq, rq+l), all nodes spanning trees (i,j,k,l)such that either rq < i < rq+l or rq < l < rq+lc.
V gaps (rq,rq+l) , all the minimal nodes for thegap such that these nodes span trees (i,j,k,l) with{i,l} E { r l ,r2,.
.
,rp } and i <_ 1in addition to the initialization information, thealgorithm computes all the nodes spanning trees(i,i,k,O with ( i , l}  ~ { r~,r~,..,rp } and i _< i <k<l .mProof  :Base Cases :For length = 1, it is trivial as this information isalready known as a result of initialization.For length = 2, there are two cases to consider :1. r2 = rl + 1, in which case a composition in-volving nodes from A(rl ,  rl, rl, r l)  with nodesfrom A(rl ,  r2, r2, r2) and a composition involv-ing nodes from A(r l ,  r2, r2, r2) with nodes fromA(r2, r2, r2, r2), followed by a check for adjunc-tion involving nodes realised from the previoustwo compositions, will be sufficient.
Note thatsince there is only one symbol from the input(namely, ar~), and because an auxiliary tree hasat least one label from ~, thus, checking for oneadjunction is sufficient as there can be at mostone adjunction.2.
r2 ~ rl + 1, implies that (rl,r2) is a gap.Thus, in addition to the information givenas per the theorem, a composition involv-ing nodes from A(rl ,  j, k, r2) with nodes fromA(r2,r2, r2,r2) and a composition involvingnodes from A(r l , r l , r l , r l )  with nodes fromA(rl,  j, k, r2), (rl < j < k < r2), followed by anadjunction involving nodes realised as a result ofthe previous two compositions will be sufficientas the only adjunction to take care of involvesthe adjunction of some auxiliary tree onto anode m which yields e, and m E A(rl,  r l ,  r l ,  r l)or m E A(r2,r2,r2, r2).I nduct ion  hypothes is  : V increasing sequence< r l ,r2,  ..,r~ > of symbol positions of length < p,(i.e q < p), the algorithm, given the information as171(5a)mr rs t(ab)m(5c)mauxiliary A?
tree o~, .~/ / / / / /2Xgrow.tree ///// ~k//~i il ' j k ' ll !
(Se)i zI(M)root of auxiliaryra tree has propertytree ~/ / / J / /~i -'i 1 ' l1 1Grown aux tree formed by adjoiningPs " P2 Plonto root  of  grown aux tree 7Root of ~1 has property shown in (Sa)Figure 5: Identifying minimal nodesrequired by the theorem, computes all nodes span-ning trees (i,j,k,l) such that {i, l} e { rl, r2, .., rq }and i < j < k < I. Induct ion  : Given an increasingsequence < rl,  r~, .., rp, rp+l > of symbol positionstogether with the information required as per partsa,b,c  of the theorem, the algorithm proceeds as fol-lows:1.
By the induction hypothesis, the algorithmcorrectly computes all nodes spanning trees(i,j,k,i) within the first 2/3, i.e, {i, l} E {rt, r2, .., r2(p+D/3 } and i < l .
By the hypothe-sis, it also computes all nodes ( i ' , j ,k ' , l ' )withinthe last 2/3, i.e, { i ~, !
~ } E {rl+(p+l)/3, .., rp+z}and i' < i'.2.
The composition step involving the nodesfrom the first and last 2/3 of the sequence< rl ,  r2, .., rp, rp+i >, followed by the adjunc-tion step captures all nodes m such that eithera.
m spans a tree (i, j ,k,l)such that the last op-eration to create this tree was a composi-tion operation on two nodes ml and m2with ml spanning ( i , j ' ,k; l '} and me span-ning(i;j",k",l).
(with i E { rl,  r2, .., r(p+l)/3 },i E { rl+(p+l)/3,..,r2(p+D/3 } and I E !ri+2(p+z)/3, .. rp+z }, and either (j' = k ,j" = j ,  k" = k) or (j' = j ,  k '=  k , j "  = k ' )).b.
m spans a tree O,J, k,l) such that the last op-eration to create this tree was an adjunc-tion by an auxiliary or grown auxiliary tree(i,j',k',l), rooted at node mI, onto the nodem spanning the tree (j', j,k,k') such thatnode ml has either the property mentionedin (1) or it belongs to the ASSOC L IST  ofa node which has the property mentionedin (1).
(The labels of m and ml  being thesame)Note that, in addition to the nodes m capturedfrom a or b, we will also be realising nodes EASSOC L IST  (m).The nodes captured as a result of 2 arethe minimal nodes with respect to the gap(r(p+l)/a, rl+2(p+l)/3) with the additional propertythat the trees (i,j,k,l) they span are such that i E {r l ,  r2 ,  .., r (p+l ) \ ]3  } and l E { r l+2(p+l ) \ ]3 ,  .., rp+l  }.Before we can apply the hypothesis on the se-quence < rx, r2, .., r(p+t)/3, rl+2(p+l)\[3, ..rp+l >, wehave to make sure that the conditions in par tsa,b,c of the theorem are met for the new gap(r(p+1)/3, rl+2(p+l)/3).
It is easy to see that con-ditions for parts a and b are met for this gap.
Wehave also seen that as a result of step 2, all the mini-mal nodes w.r.t the gap (r(p+x)/3 , rl+2(p+l)/3), with172the desired property as required in part c have beencomputed.
Thus applying the hypothesis on thesequence < r l ,  r2, .., r(p+l)\[3, r l+2(p+l) /3,  ..rp+l >,the algorithm in the end correctly computes allthe nodes spanning trees (ij,k,1) with {i,l} E{rl,r2,..,rp+x } and i< j<k<l .
D8 Imp lementat ionThe TAL recognizer given in this paper was im-plemented in Scheme on a SPARC station-10/30.Theoretical results in this paper and those in (Ra-jasekaran, 1995) clearly demonstrate that asymp-totically fast algorithms can be obtained for TALparsing with the help of matrix multiplication al-gorithms.
The main objective of the implementa-tion was to check if matrix multiplication techniqueshelp in practice also to obtain efficient parsing algo-rithms.The recognizer implemented two different algo-rithms for matrix multiplication, namely the triv-ial cubic time algorithm and an algorithm that ex-ploits the sparsity of the matrices.
The TAL recog-nizer that uses the cubic time algorithm has a runtime comparable to that of Vijayashanker-\]oshi's al-gorithm.Below is given a sample of a grammar tested andalso the speed up using the sparse version over theordinary version.
The grammar used, generated theTAL anbnc n. This grammar is shown in figure 1.Interestingly, the sparse version is an order ofmagnitude faster than the ordinary version forstrings of length greater than 7.i\[ Str ingabeaabbccAnswerYesYesSpeedup \[13.16.1aabcabe No 8.0abacabac No 11.7aaabbbccc Yes 11.4The above implementation results suggest hateven in practice better parsing algorithms can beobtained through the use of matrix multiplicationtechniques.9 Conc lus ionsIn this paper we have presented an O(M(n2)) timealgorithm for parsing TALs, n being the length ofthe input string.
We have also demonstrated withour implementation work that matrix multiplicationtechniques can help us obtain efficient parsing algo-rithms.AcknowledgementsThis research was supported in part by an NSF Re-search Initiation Award CCR-92-09260 and an AROgrant DAAL03-89-C-0031.ReferencesD.
Coppersmith and S. Winograd, Matrix Multi-plication Via Arithmetic Progressions, in Proc.19th Annual ACM Symposium on Theory of Com-puting, 1987,pp.
1-6.
Also in Journal of SymbolicComputation, Vol.
9, 1990, pp.
251-280.S.L.
Graham, M.A.
Harrison, and W.L.
Ruzzo, OnLine Context Free Language Recognition in Lessthan Cubic Time, Proc.
A CM Symposium on The-ory of Computing, 1976, pp.
112-120.A.K.
Joshi, L.S.
Levy, and M. Takahashi, Tree Ad-junct Grammars, Journal of Computer and Sys-tem Sciences, 10(1), 1975.A.K.
Joshi, K. Vijayashanker and D. Weir, The Con-vergence of Mildly Context-Sensitive GrammarFormalisms, Foundational Issues of Natural Lan-guage Processing, MIT Press, Cambridge, MA,1991,pp.
31-81.A.
Kroch and A.K.
Joshi, Linguistic Relevance ofTree Adjoining Grammars, Technical Report MS-CS-85-18, Department of Computer and Informa-tion Science, University of Pennsylvania, 1985.M.
Palis, S. Shende, and D.S.L.
Wet, An OptimalLinear Time Parallel Parser for Tree AdjoiningLanguages, SIAM Journal on Computin#,1990.B.H.
Partee, A. Ter Meulen, and R.E.
Wall, Stud-ies in Linguistics and Philosophy, Vol.
30, KluwerAcademic Publishers, 1990.S.
Rajasekaran, TAL Parsing in o(n 6) Time, to ap-pear in SIAM Journal on Computing, 1995.G.
Satta, Tree Adjoining Grammar Parsing andBoolean Matrix Multiplication, to be presented inthe 31st Meeting of the Association for Computa-tional Linguistics, 1993.G.
Satta, Personal Communication, September1993.Y.
Schabes and A.K.
Joshi, An Earley-Type ParsingAlgorithm for Tree Adjoining Grammars, Proc.26th Meeting of the Association for Computa-tional Linguistics, 1988.L.G.
Valiant, General Context-Free Recognition inLess than Cubic Time, Journal of Computer andSystem Sciences, 10,1975, pp.
308-315.K.
Vijayashanker and A.K.
Joshi, Some Computa-tional Properties of Tree Adjoining Grammars,Proc.
2~th Meeting of the Association for Com-putational Linguistics, 1986.173
