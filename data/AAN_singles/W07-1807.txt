Proceedings of SPEECHGRAM 2007, pages 49?52,Prague, Czech Republic, June 2007. c?2007 Association for Computational LinguisticsA Development Environmentfor Building Grammar-Based Speech-Enabled ApplicationsElisabeth Kron1, Manny Rayner1,2, Marianne Santaholma1, Pierrette Bouillon11 University of Geneva, TIM/ISSCO40 bvd du Pont-d?ArveCH-1211 Geneva 4, Switzerlandelisabethkron@yahoo.co.ukMarianne.Santaholma@eti.unige.chPierrette.Bouillon@issco.unige.ch2 Powerset, Inc.475 Brannan StreetSan Francisco, CA 94107manny@powerset.comAbstractWe present a development environment forRegulus, a toolkit for building unificationgrammar-based speech-enabled systems, fo-cussing on new functionality added over thelast year.
In particular, we will show aninitial version of a GUI-based top-level forthe development environment, a tool thatsupports graphical debugging of unificationgrammars by cutting and pasting of deriva-tion trees, and various functionalities thatsupport systematic development of speechtranslation and spoken dialogue applicationsbuilt using Regulus.1 The Regulus platformThe Regulus platform is a comprehensive toolkitfor developing grammar-based speech-enabled sys-tems that can be run on the commercially avail-able Nuance recognition environment.
The plat-form has been developed by an Open Source con-sortium, the main partners of which have beenNASA Ames Research Center and Geneva Uni-versity, and is freely available for download fromthe SourceForge website1.
Regulus has been usedto build several large systems, including GenevaUniversity?s MedSLT medical speech translator(Bouillon et al, 2005) and NASA?s Clarissa proce-dure browser (Rayner et al, 2005b)2.Regulus is described at length in(Rayner et al, 2006), the first half of which consistsof an extended tutorial introduction.
The release1http://sourceforge.net/projects/regulus/2http://ic.arc.nasa.gov/projects/clarissa/also includes extensive online documentation,including several example applications.The core functionality offered by Regulus is com-pilation of typed unification grammars into parsers,generators, and Nuance-formatted CFG languagemodels, and hence also into Nuance recognitionpackages.
Small unification grammars can be com-piled directly into executable forms.
The centralidea of Regulus, however, is to base as much ofthe development work as possible on large, domain-independent resource grammars.
A resource gram-mar for English is available from the Regulus web-site; similar grammars for several other languageshave been developed under the MedSLT project atGeneva University, and can be downloaded from theMedSLT SourceForge website3.Large resource grammars of this kind are over-general as they stand, and it is not possible to com-pile them directly into efficient recognisers or gener-ators.
The platform, however, provides tools, drivenby small corpora of examples, that can be used tocreate specialised versions of these general gram-mars using the Explanation Based Learning (EBL)algorithm.
We have shown in a series of exper-iments that suitably specialised grammars can becompiled into efficient executable forms.
In particu-lar, recognisers built in this way are very competitivewith ones created using statistical training methods(Rayner et al, 2005a).The Regulus platform also supplies a frameworkfor using the compiled resources ?
parsers, gen-erators and recognisers ?
to build speech transla-tion and spoken dialogue applications.
The envi-ronment currently supports 75 different commands,3http://sourceforge.net/projects/medslt49which can be used to carry out a range of func-tions including compilation of grammars into var-ious forms, debugging of grammars and compiledresources, and testing of applications.
The environ-ment exists in two forms.
The simpler one, whichhas been available from the start of the project, is acommand-line interface embedded within the SICS-tus Prolog top-level.
The focus will however be ona new GUI-based environment, which has been un-der development since late 2006, and which offersa more user-friendly graphical/menu-based view ofthe underlying functionality.In the rest of the paper, we outline how Regulussupports development both at the level of grammars(Section 2), and at the level of the applications thatcan be built using the executable forms derived fromthem (Section 3).2 Developing unification grammarsThe Regulus grammar development toolset borrowsideas from several other systems, in particular theSRI Core Language Engine (CLE) and the XeroxLanguage Engine (XLE).
The basic functionalitiesrequired are uncontroversial.
As usual, the Regulusenvironment lets the user parse example sentencesto create derivation trees and logical forms; in theother direction, if the grammar has also been com-piled into a generator, the user can take a logicalform and use it to generate a surface string and an-other derivation tree.
Once a derivation tree has beencreated, either through parsing or through genera-tion, it is possible to examine individual nodes toview the information associated with each one.
Cur-rently, this information consists of the syntactic fea-tures, the piece of logical form built up at the node,and the grammar rule or lexical entry used to createit.The Regulus environment also provides a moreelaborate debugging tool, which extends the ear-lier ?grammar stepper?
implemented under the CLEproject.
Typically, a grammar development problemhas the following form.
The user finds a bad sen-tence B which fails to get a correct parse; however,there are several apparently similar or related sen-tences G1...Gn which do get correct parses.
In mostcases, the explanation is that some rule which wouldappear in the intended parse for B has an incorrectfeature-assignment.A simple strategy for investigating problems ofthis kind is just to examine the structures of B andG1...Gn by eye, and attempt to determine what thecrucial difference is.
An experienced developer,who is closely familiar with the structure of thegrammar, will quite often be able to solve the prob-lem in this way, at least in simple cases.
?Solvingby inspection?
is not, however, very systematic, andwith complex rule bugs it can be hard even for ex-perts to find the offending feature assignment.
Thelarger the grammar becomes, especially in terms ofthe average number of features per category, themore challenging the ad hoc debugging approachbecomes.A more systematic strategy was pioneered in theCLE grammar stepper.
The developer begins bylooking at the working examples G1...Gn, to de-termine what the intended correct structure wouldbe for B.
They then build up the correspondingstructure for the bad example, starting at the bot-tom with the lexical items and manually selectingthe rules used to combine them.
At some point, aunification will fail, and this will normally reveal thebad feature assignment.
The problem is that manualbottom-up construction of the derivation tree is verytime-consuming, since even quite simple trees willusually have at least a dozen nodes.The improved strategy used in the Regulus gram-mar stepper relies on the fact that the G1...Gn canusually be constructed to include all the individualpieces of the intended derivation tree for B, since inmost cases the feature mis-match arises when com-bining two subtrees which are each internally con-sistent.
We exploit this fact by allowing the devel-oper to build up the tree for B by cutting up the treesfor G1...Gn into smaller pieces, and then attemptingto recombine them.
Most often, it is enough to taketwo of the Gi, cut an appropriate subtree out of eachone, and try to unify them together; this means thatthe developer can construct the tree for B with onlyfive operations (two parses, two cuts, and a join),rather than requiring one operation for each node inB, as in the bottom-up approach.A common pattern is that B and G1 are identical,except for one noun-phrase constituent NP , and G2consists of NP on its own.
To take an example fromthe MedSLT domain, B could be ?does the morning50Figure 1: Example of using the grammar stepper to discover a feature mismatch.
The window on theright headed ?Stepper?
presents the list of available trees, together with the controls.
The windows headed?Tree 1?
and ?Tree 4?
present the trees for item 1 (?does red wine give you headaches?)
and item 4 (?themorning?).
The popup window on the lower right presents the feature mismatch information.give you headaches?
?, G1 the similar sentence ?doesred wine give you headaches??
and G2 the singleNP ?the morning?.
We cut out the first NP subtreefrom G1 to produce what is in effect a tree with anNP ?slash category?, that can be rendered as ?doesNP give you headaches??
; call this G?1.
We then cutout the single NP subtree (this accounts for most,but not all, of the derivation) from G2, to produceG?2.
By attempting to unify G?2 with the NP ?hole?left in G?1, we can determine the exact nature of thefeature mismatch.
We discover that the problem isin the sortal features: the value of the sortal featureon G?2 is time, but the corresponding feature-valuein the NP ?hole?
is action\/cause.Figure 1 contains a screenshot of the developmentenvironment in the example above, showing the statewhen the feature mismatch is revealed.
A detailedexample, including screenshots for each step, is in-cluded in the online Regulus GUI tutorial4.4Available in the file doc/RegulusGUITutorial.pdf from theSourceForge Regulus website3 Developing applicationsThe Regulus platform contains support for bothspeech translation and spoken dialogue applications.In each case, it is possible to run the developmenttop-loop in a mode appropriate to the type of appli-cation, including carrying out systematic regressiontesting using both text and speech input.
For bothtypes of application, the platform assumes a uniformarchitecture with pre-specified levels of representa-tion.Due to shortage of space, and because it is thebetter-developed of the two, we focus on speechtranslation.
The framework is interlingua-based,and also permits simple context-based translationinvolving resolution of ellipsis5.
Processing goesthrough the following sequence of representations:1.
Spoken utterance in source language.2.
Recognised words in source language.5Although it is often possible to translate ellipsis as ellipsisin closely related language pairs, this is usually not correct inmore widely separated ones.513.
Source logical form.
Source logical form andall other levels of representation are (almost)flat lists of attribute/value pairs.4.
?Source discourse representation?.
A regu-larised version of the source logical form, suit-able for carrying out ellipsis resolution.5.
?Resolved source discourse representation?.The output resulting from carrying out any nec-essary ellipsis processing on the source dis-course representation.
Typically this will addmaterial from the preceding context represen-tation to create a representation of a completeclause.6.
Interlingua.
A language-independent versionof the representation.7.
Target logical form.8.
Surface words in target language.The transformations from source logical formto source discourse representation, from resolvedsource discourse representation to interlingua, andfrom interlinga to target logical form are definedusing translation rules which map lists of at-tribute/value pairs to lists of attribute/value pairs.The translation trace includes all the levels of rep-resentation listed above, the translation rules used ateach stage, and other information omitted here.
The?translation mode?
window provided by the devel-opment environment makes all these fields availablein a structured form which allows the user to selectfor display only those that are currently of interest.The framework for spoken dialogue systems is simi-lar, except that in the last three steps ?Interlingua?
isreplaced by ?Dialogue move?, ?Target logical form?by ?Abstract response?, and ?Surface words in targetlanguage?
by ?Concrete response?.The platform contains tools for performing sys-tematic regression testing of both speech translationand spoken dialogue applications, using both textand speech input.
Input in the required modality istaken from a specified file and passed through allstages of processing, with the output being writtento another file.
The user is able to annotate the re-sults with respect to correctness (the GUI presentsa simple menu-based interface for doing this) andsave the judgements permanently, so that they canbe reused for future runs.The most interesting aspects of the frameworkinvolve development of spoken dialogue systems.With many other spoken dialogue systems, the ef-fect of a dialogue move is distributed throughout theprogram state, and true regression testing is very dif-ficult.
Here, our side-effect free approach to dia-logue management means that the DM can be testedstraightforwardly as an isolated component, sincethe context is fully encapsulated as an object.
Thetheoretical issues involved are explored further in(Rayner and Hockey, 2004).References[Bouillon et al2005] P. Bouillon, M. Rayner,N.
Chatzichrisafis, B.A.
Hockey, M. Santaholma,M.
Starlander, Y. Nakao, K. Kanzaki, and H. Isahara.2005.
A generic multi-lingual open source platformfor limited-domain medical speech translation.
InProceedings of the 10th Conference of the EuropeanAssociation for Machine Translation (EAMT), pages50?58, Budapest, Hungary.
[Rayner and Hockey2004] M. Rayner and B.A.
Hockey.2004.
Side effect free dialogue management in a voiceenabled procedure browser.
In Proceedings of the 8thInternational Conference on Spoken Language Pro-cessing (ICSLP), Jeju Island, Korea.
[Rayner et al2005a] M. Rayner, P. Bouillon,N.
Chatzichrisafis, B.A.
Hockey, M. Santaholma,M.
Starlander, H. Isahara, K. Kanzaki, and Y. Nakao.2005a.
Methodology for comparing grammar-basedand robust approaches to speech understanding.
InProceedings of the 9th International Conferenceon Spoken Language Processing (ICSLP), pages1103?1107, Lisboa, Portugal.
[Rayner et al2005b] M. Rayner, B.A.
Hockey, J.M.
Ren-ders, N. Chatzichrisafis, and K. Farrell.
2005b.
Avoice enabled procedure browser for the internationalspace station.
In Proceedings of the 43rd AnnualMeeting of the Association for Computational Linguis-tics (interactive poster and demo track), Ann Arbor,MI.
[Rayner et al2006] M. Rayner, B.A.
Hockey, andP.
Bouillon.
2006.
Putting Linguistics into SpeechRecognition: The Regulus Grammar Compiler.
CSLIPress, Chicago.52
