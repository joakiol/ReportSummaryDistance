A Minimal ist  Head-Corner  ParserMett ina  Veenst ravakgroep Alfa- informatica, University of GroningenPostbus 716NL-9700 AS GroningenMett ina@let.rug.nlAbst rac tIn the Minimalist Program (Chomsky,1992) it is assumed that there are differenttypes of projections (lexical and functional)and therefore different types of heads.
Thispaper explains why functional heads arenot treated as head-corners by the mini-realist head-corner parser described here.1 In t roduct ionIn the Minimalist Program (Chomsky, 1992) 'sur-face' word order is determined ina very indirect way.Word order is no longer a property of phrase struc-ture, because phrase structure is universal.
Fur-thermore movements are universal.
This impliesin principle that when we parse comparable sen-tences in different languages, we always build thesame tree.
Word order differences are distinguishedby the choice of the moment of Spell Out (SO).SO is the point in the derivation where instructionsare given to an interface level called PF (PhoneticForm).
Thus SO yields what was formerly calledsurface structure.
SO determines in which positionin the tree a certain constituent becomes visible andconsequently it determines the relative order of theconstituents of a sentence.
This is illustrated in thesimplified tree in figure 1.
Note that each cluster ofco-indexed positions (i.e.
a chain) in the figure hasonly one visible constituent.
This is the position inwhich the constituent is represented at the momentof SO.
This moment is not universal.
The verb chainof our English example gives instructions to the in-terface level PF when the verb is adjoined to AgrS(head of the agreement phrase of the subject).
Theverb chain of a comparable sentence in Dutch 'spellsout' when the verb is in V. Thus in Dutch subor-dinate clauses the movement of the verb to AgrO(head of the agreement phrase of the object) andCPI u/ \C AgrSPI / \that~ DP AgrSI / \she~ AgrS  AgrOP/ \V AgrS ej AorOI / \likesk AgrO VPo(; V AgrOI / \ek V DP\[ Lek cats jF igure  1: A s impl i f ied  t ree for a t rans i t i ve  subord inatec lause in Eng l i shsubsequently AgrS happens 'covertly'.
The motiva-tion for covert movement can be found in (Chomsky,1992, pages 38-40).In the following sections we will show that thestructure building operations of the Minimalist Pro-gram are bidirectional operations.
Because head-corner parsing is a bidirectional strategy, this typeof parser seems more favorable for minimalist pars-ing, than the usual eft to right parsing algorithms.2 GT  and  Move-c~The central operations of the Minimalist Programare Generalized Transformation (GT) and Move-~.
GT is a structure-building operation that buildstrees in a bottom-up way as is illustrated in figure 2.338wV V / \  / \V e V DPYY l  I I~e her ~e see herF igure  2: GT app l ied  to  V and  DP y ie ld ing ~'.Two phrase markers (V and DP) are combined intoone.
One of these two is called the target (V).
A pro-jection of the target (V) is added to the target.
Theprojection of the target has two daughters: the tar-get itself and an empty position.
The empty posi-tion is substituted for by the second phrase marker(DP).
This second phrase marker is itself built up inother applications of GT and/or  Move-a.Move-(~ is a special kind of GT.
It is an opera-tion that combines a target with a moved phrasemarker.
It is assumed that movement is always left-ward (Kayne, 1994) and that in the universal trees ofthe Minimalist Program heads and specifiers, whichare the only positions to move to, are always to theleft of the projection line.
These two assumptions incombination with the fact that GT and Move-a arebottom-up operations, effect that the moved phrasemarker has to be contained in the tree that was builtso far 1The tree in figure 1 illustrates different kinds ofmovement.
In the Minimalist Program movementoccurs to check features.
Elements move from thelexical domain (VP) to the functional domain (e.g.AgrOP, AgrSP) to compare their features with thefeatures that are present in the functional domain.3 Head-corner  pars ingThe main idea behind head-driven parsing (Kay,1989) is that the lexical entries functioning as headscontain valuable information for the parsing process.For example, if a verb is intransitive it will not re-quire a complement, if it is transitive it will require acomplement.
Therefore the head is parsed before itssisters in a head-driven parser.
A head-corner parser(Kay, 1989; Bouma and van Noord, 1993) is a spe-cial type of head-driven parser.
Its main character-istic is that it does not work from left to right but in-stead works bidirectionally.
That is, first a poten-tial head of a phrase is located and next the sistersof the head are parsed.
The head can be in any po-sition in the string and its sisters can either be tothe right or to the left.A head-corner parser starts the parsing processwith a prediction step.
This step is completed wheniSee (Veenstra, 1994) for further details.a lexical head is found that is the head-corner of thegoal (i.e.
the type of constituent that is parsed).
Thehead-corner relation is the reflexive and transitiveclosure of the head relation.
A is the head of B ifthere is a rule with B as left hand side (LHS) and Aas the head daughter on the right hand side (RHS).When a (lexical) head-corner is found an X rule isselected in which the (lexical) head is on the RHS.The sisters of the head are parsed recursively.
TheLHS of the rule contains the mother of the head.If this mother is a head-corner of the goal, and themother and the goal are not equal the whole processis repeated by selecting a rule with the new head-corner (i.e.
the mother of the first head-corner) onits RHS.In section 2 it is assumed that movement is invari-ably leftward and that GT and Move-a are bottom-up mechanisms.
GT builds the VP before other pro-jections.
Constituents of VP are moved to higherprojections by Move-a, which is a special kind ofGT.
Suppose that the parser should consider AgrSas the head-corner of AgrSP, which accords with X-Theory.
Then the head (AgrS) that should be filledwith an adjoined verb by movement from AgrO (ina transitive sentence) or V (in an intransitive sen-tence) is created before AgrO and V. To avoid mov-ing constituents from a part of the tree that has notbeen built yet, the head-corner table for the min-imalist head-corner parser is not constructed com-pletely according to X-Theory (see (1)).
(1) hc(AgrS,AgrSP), hc(V,VP).hc(AgrOP, AgrS).
hc(V,V).hc(AgrO,AgrOP), hc(N,NP).hc(VP, AgrO).
hc(N,~).For example, instead of AgrO, VP is the head-corner of AgrO.
This solution is compatible withthe Minimalist Program in the sense that in thisway the tree is built up in an absolute bottom-upway (i.e.
starting from V) so that a position thatshould be filled by movement is always created afterthe position from which the moved element comes.The head-corner table in (1) illustrates that func-tional heads like AgrO and AgrS are not processedas heads.
Lexical proj_.ections like VP and NP aretreated according to X-Theory.
If we follow (1) incombination with the tree in figure 1 we establishthe fact that the parser searches its way down to theverb as soon as possible.
The top-down predictionstep moves from thegoal  AgrSP to AgrS to AgrOPto AgrO to VP to V and finally to the lexical head-corner V where the bottom-up rocess tarts as theMinimalist Program requires.The head-corner parsing algorithm and the339structure-building operations of the Minimalist Pro-gram (GT and Move-a) have much in common.
Inboth cases a tree is built up in a bottom-up way bystarting with a head (lexical head-corner in the pars-ing algorithm, target in the structure building op-erations) and creating the sister of the head recur-sively, etc.
2 By treating only lexical heads as head-corners we achieved that our parsing algorithm com-pletely represents GT.
Only for Move-a we need anextra predicate to accomplish a movement if there isa possible movement to the node that has just beencreated.4 Parsing vs. GenerationIn section 3 we chose not to consider functional headsas head-corners.
This choice was made because itallows GT  and Move-a to start constructing a VPbefore the projections to which constituents from VPare moved are constructed.
Another motivation tostart with VP is that V contains information thatis useful for the remainder of the structure buildingprocess.
For example, if the verb is intransitive weknow that V does not require a complement sister,and we know that we do not need an AgrOP on topof VP.
The fact that V contains lexical informationand functional heads like AgrO and AgrS do not,could be used as a justification for the fact that thelatter are not head-corners.
The main idea of head-driven parsing is, as was stated before, that headscontain relevant information for the parsing process,and that they therefore should be parsed before theirsisters.
Functional heads obtain their contents viamovement of elements from positions lower in thetree.
This special status makes them less useful forthe parsing process.The Minimalist Program is a generation-orientedframework.
Because we are dealing with parsing (asopposed to generation) in this paper there are cer-tain discrepancies between the parser and the frame-work it is based on.
In the minimalist framework,lexical information belonging to a chain is availablefrom the moment hat the first position of the chainis created, because that is the moment when the lex-icon is consulted.
When parsing a sentence the lexi-con is not by definition consulted at the beginning ofthe chain.
Figure 1 shows a tree that contains tracesand visible constituents.
The position containing avisible constituent is the SO position of that chain.The parser consults the lexicon at the moment inwhich the SO position of a chain is reached.
Conse-Sin the minimalist head-corner parser that is de-scribed here a head always has only one sister becauseminimalist rees are at most binary branching.quently, when a trace is created before SO, the fea-tures belonging to that trace are unknown.
The fea-tures of the traces of a certain chain are known assoon as the SO position is reached, because all posi-tions in a chain are linked.It can be concluded that the absolute bottom-upapproach for the building of trees is more useful forgeneration than for parsing.
In generation, lexicalinformation can be used as soon as a position thatis the beginning of a chain is created.
In parsing wewill have to wait until the SO position is reached.In spite of this, we chose not to consider functionalheads as heads in order to accomplish an absolutebottom-up rocess.
The reason for this is that, aswas mentioned before, otherwise we would be rea-soning backwards with relation to movement.
Thiscould be inefficient and it is too far removed fromthe ideas of the minimalist framework.5 Future  P lansThe parser described here can judge the grammat-icality of simple declarative transitive and intransi-tive sentences, and of subordinate clauses.
We willextend the parser in such a way that it will covermore advanced linguistic phenomena like anaphorsand wh-questions.
Furthermore other types ofparsers will be built to determine if this 'lexical'head-corner parser is indeed more efficient.6 AcknowledgementsI would like to thank Gosse Bouma, John Nerbonne,Gertjan van Noord and Jan-Wouter Zwart for theirhelpful comments on earlier versions of this paper.Re ferencesGosse Bouma and Gertjan van Noord.
1993.
Head-driven parsing for lexicalist grammars: Experi-mental results.
In 6th Meeting of the Europeanchapter of the Association for Computational Lin-guistics, Utrecht.Noam Chomsky.
1992.
A minimalist program forlinguistic theory.
MIT Occasional Papers in Lin-guistics.Martin Kay.
1989.
Head driven parsing.
In Proceed-ings of Workshop on Parsing Technologies, Pitts-burg.Richard S. Kayne.
1994.
The antisymmetry of syn-tax.
MIT Press, Cambridge.Mettina J.A.
Veenstra.
1994.
Towards a formaliza-tion of generalized transformation.
In H. de HoopA.
de Boer and Henriette de Swart, editors, Lan-guage and Cognition ~, Groningen.340
