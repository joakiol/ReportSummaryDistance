Vi-xfst: A Visual Regular Expression Development Environment for XeroxFinite State ToolKemal Oflazer and Yasin Y?lmazHuman Language and Speech Technology LaboratorySabanc UniversityIstanbul, Turkeyoflazer@sabanciuniv.edu, yyilmaz@su.sabanciuniv.eduAbstractThis paper describes Vi-xfst, a visual interface anda development environment, for developing finitestate language processing applications using the Xe-rox Finite State Tool, xfst.
Vi-xfst lets a user con-struct complex regular expressions via a drag-and-drop visual interface, treating simpler regular ex-pressions as ?Lego Blocks.?
It also enables the vi-sualization of the structure of the regular expres-sion components, providing a bird?s eye view ofthe overall system, enabling a user to easily under-stand and track the structural and functional rela-tionships among the components involved.
Sincethe structure of a large regular expression (built interms of other regular expressions) is now transpar-ent, users can also interact with regular expressionsat any level of detail, easily navigating among themfor testing.
Vi-xfst also keeps track of dependen-cies among the regular expressions at a very fine-grained level.
So when a certain regular expressionis modified as a result of testing, only the depen-dent regular expressions are recompiled resulting inan improvement in development process time, byavoiding file level recompiles which usually causesredundant regular expression compilations.1 IntroductionFinite state machines are widely used in many lan-guage processing applications to implement com-ponents such as tokenizers, morphological analyz-ers/generators, shallow parsers, etc.
Large scale fi-nite state language processing systems built usingtools such as the Xerox Finite State Tool (Kart-tunen et al, 1996; Karttunen et al, 1997; Beesleyand Karttunen, 2003), van Noord?s Prolog-basedtool (van Noord, 1997), the AT&T weighted finitestate machine suite (Mohri et al, 1998) or the IN-TEX System (Silberztein, 2000), involve tens orhundreds of regular expressions which are compiledinto finite state transducers that are interpreted bythe underlying run-time engines of the (respective)tools.Developing such large scale finite state systems iscurrently done without much of a support for the?software engineering?
aspects.
Regular expres-sions are constructed manually by the developerwith a text-editor and then compiled, and the result-ing transducers are tested.
Any modifications haveto be done afterwards on the same text file(s) and thewhole project has to be recompiled many times in adevelopment cycle.
Visualization, an important aidin understanding and managing the complexity ofany large scale system, is limited to displaying thefinite state machine graph (e.g., Gansner and North(1999), or the visualization functionality in INTEX(Silberztein, 2000)).
However, such visualization(sort of akin to visualizing the machine code of aprogram written in a high-level language) may notbe very helpful, as developers rarely, and possiblynever, think of such large systems in terms of statesand transitions.
The relationship between the reg-ular expressions and the finite state machines theyare compiled into are opaque except for the simplestof regular expressions.
Further, the size of the re-sulting machines, in terms of states and transitions,is very large, usually in the thousands to hundredsof thousands states, if not more, making such visu-alization meaningless.
On the other hand, it mayprove quite useful to visualize the structural compo-nents of a set of regular expressions and how theyare put together, much in the spirit of visualizing therelationships amongst the data objects and/or mod-ules in a large program.
However such visualiza-tion and other maintenance operations for large fi-nite state projects spanning over many files, dependon tracking the structural relationships and depen-dencies among the regular expressions, which mayprove hard or inconvenient when text-editors are theonly development tool.This paper presents a visual interface and develop-ment environment, Vi-xfst (Y?lmaz, 2003), for theXerox Finite State Tool, xfst, one of the most sophis-ticated tools for constructing finite state languageprocessing applications (Karttunen et al, 1997).Barcelona, July 2004Association for Computations LinguisticsACL Special Interest Group on Computational Phonology (SIGPHON)Proceedings of the Workshop of theVi-xfst enables incremental construction of com-plex regular expressions via a drag-and-drop inter-face, treating simpler regular expressions as ?LegoBlocks?.
Vi-xfst also enables the visualization of thestructure of the regular expression components, sothat the developer can have a bird?s eye view of theoverall system, easily understanding and trackingthe relationships among the components involved.Since the structure of a large regular expression(built in terms of other regular expressions) is nowtransparent, the developer can interact with regularexpressions at any level of detail, easily navigatingamong them for testing and debugging.
Vi-xfst alsokeeps track of the dependencies among the regularexpressions at a very fine-grained level.
So, whena certain regular expression is modified as a resultof testing or debugging, only the dependent regu-lar expressions are recompiled.
This results is animprovement in development time, by avoiding filelevel recompiles which usually causes substantialredundant regular expression compilations.In the following sections, after a short overview ofthe Xerox xfst finite state machine development en-vironment, we describe salient features of Vi-xfstthrough some simple examples.2 Overview of xfstxfst is a sophisticated command-line-oriented inter-face developed by Xerox Research Centre Europe,for building large finite state transducers for lan-guage processing applications.
Users of xfst employa high-level regular expression language which pro-vides an extensive palette of high-level operators.1Such regular expressions are then compiled into fi-nite state transducers and interpreted by a run-timeengine built into the tool.
xfst also provides a furtherset of commands for combining, testing and inspect-ing the finite state transducers produced by the regu-lar expression compiler.
Transducers may be loadedonto a stack maintained by the system, and the top-most transducer on the stack is available for testingor any further operations.
Transducers can also besaved to files which can later be reused or used byother programs in the Xerox finite state suite.Although xfst provides quite useful debugging facil-ities for testing finite state networks, it does not pro-vide additional functionality beyond the command-1Details of the operators are available at http://www.xrce.xerox.com/competencies/content-analysis/fsCompiler/fssyntax.html and http://www.xrce.xerox.com/competencies/content-analysis/fsCompiler/fssyntax-explicit.html.line interface to alleviate the complexity of develop-ing large scale projects.
Building a large scale finitestate transducer-based application such as a mor-phological analyzer or a shallow finite state parser,consisting of tens to hundreds of regular expres-sions, is also a large software engineering undertak-ing.
Large finite state projects can utilize the makefunctionality in Linux/Unix/cygwin environments,by manually entering (file level) dependencies be-tween regular expressions tered into a makele.
Themake program then invokes the compiler at the shelllevel on the relevant files by tracking the modifica-tion times of files.
Since whole files are recompiledat a time even when a very small change is made,there may be redundant recompilations that may in-crease the development time.3 Vi-xfst ?
a visual interface to xfstAs a development environment, Vi-xfst has two im-portant features that improve the development pro-cess of complex large scale finite state projects withxfst.1.
It enables the construction of regular expres-sions by combining previously defined regularexpressions via a drag-and-drop interface.2.
As regular expressions are built by combiningother regular expressions, Vi-xfst keeps track ofthe topological structure of the regular expres-sion ?
how component regular expressions re-late to each other.
It derives and maintains thedependency relationships of a regular expres-sion to its components, and via transitive clo-sure, to the components they depend on.
Thisstructure and dependency relations can then beused to visualize a regular expression at vari-ous levels of detail, and also be used in veryfine-grained recompilations when some regu-lar expressions are modified.3.1 Using Vi-xfstIn this section, we describe important features Vi-xfst through some examples.2 The first example isfor a simple date parser described in Karttunen etal.
(1996).
This date parser is implemented in xfstusing the following regular expressions:32The examples we provide are rather simple ones, as lengthrestrictions do not allow us to include large figures to visualizecomplex finite state projects.3The define command defines a named regular expres-sion which can then be subsequently referred to in later regularexpressions.
| denotes the union operator.
0 (without quotes)denotes the empty string traditionally represented by  in the lit-erature.
The quotes " are used to literalize sequence of symbolswhich have special roles in the regular expression language.define 1to9 [1|2|3|4|5|6|7|8|9];define Day [Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday];define Month [January|February|March|April|May|June|July|August|September|October|November|December];define def2 [1|2];define def4 [3];define def5 ["0"|1];define Empty [ 0 ]define def16 [ (Day ", ")];define SPACE [" "];define 0To9 ["0" | 1To9];define Date [1to9|[def2 0To9]|[def4 def5]];define Year [1to9 [[0To9 [[[0To9[0To9|Empty]]|Empty]|Empty]]|Empty]];define DateYear [(", " Year)];define LeftBracket [ "[" ];define RightBracket [ "]" ];define AllDates [Day|[def16 MonthSPACE Date DateYear]];define AllDatesParser[AllDates @->LeftBracket ... RightBracket];read regex AllDatesParser;The most important regular expression above isAllDates, a pattern that describes a set ofcalendar dates.
It matches date expressionssuch as Sunday, January 23, 2004 or justMonday.
The subsequent regular expressionAllDatesParser uses the longest match down-ward bracket operator (the combination of @-> and...) to define a transducer that puts [ and ]around the longest matching patterns in the inputside of the transducer.Figure 1 shows the state of the screen of Vi-xfst justafter the AllDatesParser regular expression isconstructed.
In this figure, the left side windowshows, under the Definitions tab, the regularexpressions defined.
The top right window showsthe template for the longest match regular expres-sion slots filled by drag and drop from the list on theleft.
The AllDatesParser regular expression isentered by selecting the longest-match downwardbracket operator (depicted with the icon @-> with... underneath) from the palette above, which theninserts a template that has empty slots ?
three in thiscase.
The user then ?picks up?
regular expressionsfrom the left and drops them into the appropriateslots.
When the regular expression is completed, itcan be sent to the xfst process for compilation.
Thebottom right window, under the Messages tab,shows the messages received from the xfst processrunning in the background during the compilationof this and the previous regular expressions.Figure 2 shows the user testing a regular expressionloaded on to the stack of the xfst.
The left win-dow under the Networks tab, shows the networkspushed on to the xfst stack.
The bottom right win-dow under Test tab lists a series of input, one ofwhich can be selected as the input string and thenapplied up or down to the topmost network on thestack.4 The result of application appears on thebottom pane on the right.
In this case, we see theinput with the brackets inserted around the longestmatching date pattern, Sunday, January 23,2004 in this case.3.2 Visualizing regular expression structureWhen developing or testing a large finite state trans-ducer compiled from a regular expression built as ahierarchy of smaller regular expressions, it is veryhelpful, especially during development, to visualizethe overall structure of the regular expression to eas-ily see how components relate to each other.Vi-xfst provides a facility for viewing the structureof a regular expression at various levels of detail.To illustrate this, we use a simple cascade of trans-ducers simulating a coke machine dispensing cansof soft drink when the right amount of coins aredropped in.5 The regular expressions for this ex-ample are:6define N [ n ];define D [ d ];define Q [ q ];define DefPLONK [ PLONK ];define CENT [ c ];define SixtyFiveCents [ [ [ CENT ]^65 ].x.DefPLONK ];define CENTS [[N .x.
[[ CENT ]^5 ]|[D .x.
[[ CENT ]^10 ]]]|[Q .x.
[[ CENT ]^25 ]]];define BuyCoke [ [ [ CENTS ]* ].o.SixtyFiveCents ];4xfst only allows the application of inputs to the topmostnetwork on the stack.5See http://www.xrce.xerox.com/competencies/content-analysis/fsCompiler/fsexamples.html forthis example.6The additional operators in this example are: .x.
repre-senting the cross-product and .o.
representing the composi-tion of transducers, and caret operator ( ?
)denoting the repeatedconcatenation of its left argument as many times as indicated byits right argument.Figure 1: Constructing a regular expression via the drag-and-drop interfaceThe last regular expression here BuyCoke definesa transducer that consist of the composition of twoother transducers.
The transducer [ CENTS ]*maps any sequence of symbols n, d, and q repre-senting, nickels, dimes and quarters, into the appro-priate number of cents, represented as a sequenceof c symbols.
The transducer SixtyFiveCentsmaps a sequence of 65 c symbols to the symbolPLONK representing a can of soft drink (falling).Figure 3 shows the simplest visualization of theBuyCoke transducer in which only the top levelcomponents of the compose operator (.o.)
are dis-played.
The user can navigate among the visibleregular expressions and ?zoom?
into any regular ex-pressions further, if necessary.
For instance, Figure4 shows the rendering of the same transducer af-ter the top transducer is expanded where we see theunion of three cross-product operators, while Figure5 shows the rendering after both components are ex-panded.
When a regular expression laid out, the usercan select any of the regular expressions displayedand make that the active transducer for testing (thatis, push it onto the top of the xfst transducer stack)Figure 3: Simplest view of a regular expressionand rapidly navigate among the regular expressionswithout having to remember their names and loca-tions in the files.As we re-render the layout of a regular expression,we place the components of the compose and cross-product operators in a vertical layout, and others inFigure 2: Testing a regular expression.Figure 4: View after the top regular expression isexpanded.a horizontal layout and determine the best layoutof the components to be displayed in a rectangularbounding box.
It is also possible to render the up-ward and downward replace operators in a verticallayout, but we have opted to render them in a hori-zontal layout (as in Figure 1).
The main reason forthis is that although the components of the replacepart of such an expression can be placed vertically,the contexts need to be placed in a horizontal layout.A visualization of a complex network employing adifferent layout of the replace rules is shown in Fig-ure 6 with the Windows version of Vi-xfst.
Here wesee a portion of a Number-to-English mapping net-work7 where different components are visualized atdifferent structural resolutions.3.3 Interaction of Vi-xfst with xfstVi-xfst interacts with xfst via inter-process commu-nication.
User actions on the Vi-xfst side get trans-lated to xfst commands and get sent to xfst whichmaintains the overall state of the system in its ownuniverse.
Messages and outputs produced by xfstare piped back to Vi-xfst, which are then parsed7Due to Lauri Karttunen; see http://www.cis.upenn.edu/~cis639/assign/assign8.html for thexfst script for this transducer.
It maps numbers like 1234 intoEnglish strings like One thousand two hundred and thirty four.Figure 6: Mixed visualization of a complex networkFigure 5: View after both regular expressions areexpanded.and presented back to the user.
If a direct API isavailable to xfst, it would certainly be possible toimplement tighter interface that would provide bet-ter error-handling and slightly improved interactionwith the xfst functionality.All the files that Vi-xfst produces for a project aredirectly compatible with and usable by xfst; that is,as far as xfst is concerned, those files are valid reg-ular expression script files.
Vi-xfst maintains all theadditional bookkeeping as comments in these filesand such information is meaningful only to Vi-xfstand used when a project is re-loaded to recover alldependency and debugging information originallycomputed or entered.
Currently, Vi-xfst has someprimitive facilities for directly importing hand gen-erated files for xfst to enable manipulation of al-ready existing projects.4 Selective regular expression compilationSelective compilation is one of the simple facili-ties available in many software development envi-ronments.
A software development project uses se-lective compilation to compile modules that havebeen modified and those that depend (transitively) insome way (via say header file inclusion) to the mod-ified modules.
This selective compilation scheme,typically known as the make operation, depends ona manually or automatically generated makele cap-turing dependencies.
It can save time during devel-opment as only the relevant files are recompiled af-ter a set of modifications.In the context of developing large scale finite statelanguage processing application, we encounter thesame issue.
During testing, we recognize that a cer-tain regular expression is buggy, fix it, and then haveto recompile all others that use that regular expres-sion as a component.
It is certainly possible to usemake and recompile the appropriate regular expres-sion files.
But, this has two major disadvantages:?
The user has to manually maintain the make-le that captures the dependencies and invokesthe necessary compilation steps.
This may bea non-trivial task for a large project.?
When even a singular regular expression ismodified, the file the regular expression residesin, and all the other files containing regular ex-pressions that (transitively) depend on that file,have to be recompiled.
This may waste a con-siderable amount of time as many other regu-lar expressions that do not need to be recom-piled, are compiled just because they happento reside in the same file with some other reg-ular expression.
Since some regular expres-sions may take a considerable amount of timeto compile, this unnecessarily slows down thedevelopment process.Vi-xfst provides a selective compilation functional-ity to address this problem by automatically keepingtrack of the regular expression level dependencies asthey are built via the drag-and-drop interface.
Thisdependency can then be exploited by Vi-xfst when arecompile needs to be done.Figure 7 shows the directed acyclic dependencygraph of the regular expressions in Section 3.1, ex-tracted as the regular expressions are being defined.A node in this graph represents a regular expressionthat has been defined, and when there is an arc froma node to another node, it indicates that the regu-lar expression at the source of the arc directly de-pends on the regular expression at the target of thearc.
For instance, in Figure 7, the regular expres-sion AllDates directly depends on the regular ex-pressions Date, DateYear, Month, SPACE, anddef16.Figure 7: The dependency graph for the regular ex-pressions of the DateParser.After one or more regular expressions are modified,we first recompile (by sending a dene command toxfst) those regular expressions, and then recompileall regular expressions starting with immediate de-pendents and traversing systematically upwards tothe regular expressions of all ?top?
nodes on whichno other regular expressions depend, making surethat?
all regular expressions that a regular expres-sion depends on and have to be recompiled, arerecompiled before that regular expression is re-compiled, and?
every regular expression that needs to be re-compiled is recompiled only once.To achieve these, we compute the subgraph of thedependency graph that has all the nodes correspond-ing to the modified regular expressions and anyother regular expressions that transitively dependson these regular expressions.
Then, a topologicalsort of the resulting subgraph gives a possible linearordering of the regular expression compilations.For instance for the dependency subgraph in Fig-ure 7, if the user modifies the definition ofthe network 1to9, the dependency subgraphof the regular expressions that have to be re-compiled would be the one shown in Figure8.
A (reverse) topological sort of this depen-Figure 8: The dependency subgraph graph inducedby the regular expression 1to9.dency subgraph gives us one of the possible or-ders for recompiling only the relevant regularexpressions as: 1to9, 0To9, Date, Year,DateYear, AllDates, AllDatesParser5 Conclusions and future workWe have described Vi-xfst, a visual interface and adevelopment environment for the development oflarge finite state language processing applicationcomponents, using the Xerox Finite State Tool xfst.In addition to a drag-and-drop user interface forconstructing regular expressions in a hierarchicalmanner, Vi-xfst can visualize the structure of a reg-ular expression at different levels of detail.
It alsokeeps track of how regular expressions depend oneach other and uses this dependency information forselective compilation of regular expressions whenone or more regular expressions are modified dur-ing development.The current version of Vi-xfst lacks certain featuresthat we plan to add in the future versions.
One im-portant functionality that we plan to add is user cus-tomizable operator definitions so that new regularexpression operators can be added by the user as op-posed to being fixed at compile-time.
The user candefine the relevant aspects (slots, layout) of an oper-ator in a configuration file which can be read at theprogram start-up time.
Another important featureis the importing of libraries of regular expressionsmuch like symbol libraries in drawing programs andthe like.The interface of Vi-xfst to the xfst itself is localizedto a few modules.
It is possible to interface withother finite state tools by rewriting these modulesand providing user-definable operators.6 AcknowledgmentsWe thank XRCE for providing us with the xfst andother related programs in the finite state suite.ReferencesKenneth R. Beesley and Lauri Karttunen.
2003.
Fi-nite State Morphology.
CSLI Publications, Stan-ford University.Emden R. Gansner and Stephen C. North.
1999.
Anopen graph visualization system and its applicationsto software engineering.
Software ?
Practice andExperience.Lauri Karttunen, Jean-Pierre Chanod, GregoryGrefenstette, and Anne Schiller.
1996.
Regular ex-pressions for language engineering.
Natural Lan-guage Engineering, 2(4):305?328.Lauri Karttunen, Tamas Gaal, and Andre Kempe.1997.
Xerox Finite-State Tool.
Technical report,Xerox Research Centre Europe.Mehryar Mohri, Fernando Pereira, and Michael Ri-ley.
1998.
A rational design for a weighted finite?state transducer library.
In Lecture Notes in Com-puter Science, 1436.
Springer Verlag.Max Silberztein.
2000.
Intex: An fst toolbox.
The-oretical Computer Science, 231(1):33?46, January.Gertjan van Noord.
1997.
FSA utilities: A toolboxto manipulate finite state automata.
In D. Raymond,D.
Wood, and S. Yu, editors, Automata Implemen-tation, number 1260 in Lecture Notes in ComputerScience.
Springer Verlag.Yasin Y?lmaz.
2003.
Vi-XFST: A visual interfacefor Xerox Finite State Toolkit.
Master?s thesis, Sa-banc?
University, July.
