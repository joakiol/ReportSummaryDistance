A complete integrated NLG system using AI and NLU toolsLaurence DanlosLatticeU.
Paris 7, Case 70032, place Jussieu75251 Paris Cedex 05Francedanlos@linguist.jussieu.frAdil El GhaliLatticeU.
Paris 7, Case 70032, place Jussieu75251 Paris Cedex 05Franceadil@linguist.jussieu.frAbstractA standard architecture for an NLG system hasbeen defined in (Reiter and Dale, 2000).
Theirwork describes the modularization of an NLGsystem and the tasks of each module.
How-ever, they do not indicate what kind of tools canbe used by each module.
Nevertheless, we be-lieve that certain tools widely used by the AI orNLU community are appropriate for NLG tasks.This paper presents a complete integrated NLGsystem which uses a Description logic for thecontent determination module, Segmented Dis-course Representation Theory for the documentstructuring module and a lexicalized formalismfor the tactical component.
The NLG system,which takes into account a user model, is illus-trated with a generator which produces textsexplaining the steps taken by a proof assistant.1 IntroductionThe standard architecture of an NLG systemproposed in (Reiter and Dale, 2000) is repre-sented schematically in Figure 1.1.
The toolused by a module and the data structure ofits output are not precisely defined.
Accordingto Reiter and Dale, they vary from one authorto the other.
However, we believe that certaintools widely used by the AI or NLU communityare appropriate for NLG tasks.
Therefore, wereformulate in more specific terms Figure 1.1 asFigure 1.2.The paper describes the modules of Fig-ure 1.2: Section 3 justifies the use of a descrip-tion logic for the content determination task andits ouput, a ?message?
; Section 4 specifies theuse of sdrt for the document structuring taskDocumentstructuring?
la SDRTCommunicative goalsContentDeterminationDocumentStructuringdescription logicwith aDetermination ContentCommunicative goalsLexicalizedMicro?plannerSurfaceLexicalizedSemanticDependency treerealizerMicro?plannerrepresentation    SemanticDocument PlannerFigure 1.1Standard architecture of an NLG systemTactical componentSDRSFigure 1.2Architecture of an NLG systemDocument planmessage logical formwith data structuresTextTextSurfacerealizerand its output, a ?document plan?
; Section 5exposes briefly the use of a lexicalized formal-ism in the tactical component.
Each section isillustrated with GePhoX, a generator that pro-duces texts which explain the steps taken byPhoX , a proof assistant (Raffalli and Roziere,2002).
GePhoX is presented in Section 2.As this paper intends to present a completeNLG system, there is no room for explainingeach module in detail.
We refer the reader to (ElGhali, 2001) for the content determination mod-ule, to (Danlos et al, 2001) for the documentstructuring module and to Danlos (1998; 2000)for the lexicalized tactical component.
Thesegoal ?p, d : N(d 6= N0 ?
?q, r : N(r < d ?
p = q ?
d + r))1. intros.2.
elim ?4 H well founded.N.3.
intros.4.
elim ?1 d ?3 a lesseq.case1.N.5.
next.6.
intros ?
?.7.
next ?3.8.
instance ?1 N0.9.
instance ?2 a.10.
intro.11.
trivial.12.
local a?
= a - d.13.
elim ?1 a?
H3.14.
trivial.15.
elim lesseq.S rsub.N.16.
elim ?1 [case] H0.17.
trivial =H1 H5.18.
trivial.19.
lefts H5 ?
?.20.
intros ?
?.21.
next ?3.22.
instance ?4 r.23.
instance ?3 S q.24.
rewrite mul.lS.N ?r add.associative.N ?r H8.25.
intro.26.
trivial.27.
save euclide exists.Table 1: Proof script for Euclidian divisionmodules have been built more or less indepen-dently from each other, but with the same un-derlying idea: adaptation of NLU/AI theoriesand tools to NLG.
They are now integrated in acomplete model, which is presented here and il-lustrated with GePhoX, a generator whose im-plementation is in progress.2 GePhoXPhoX is an extensible proof assistant based onhigher order logic, which has been developped tohelp mathematicians building proofs and teach-ing mathematics.
Like other proof assistants,PhoX works interactively.
The user (a mathe-matician) first gives the theorem to be proven(a goal).
PhoX returns a list of subgoals whichshould be easier to prove than the initial goal.The user enters a command to guide PhoXin choosing or achieving a subgoal.
The proofis thus computed top-down from goals to ev-idences.
The user?s commands form a Proofscript.
PhoX?s output is a list of successivegoals equivalent to a Proof tree.Both the Proof script and PhoX?s output aredifficult to read (even for a mathematician), asthe reader can see for himself in Table 1 andTable 2.
Hence, the need of an NLG system inorder to obtain an easy-to-read version of theproof.GePhoX is given as input both the Proofscript and the Proof tree.
It is one of theHere is the goal:goal 1/1|- /\p,d:N (d != N0 ->\/q,r:N (r < d & p = q * d + r))End of goals.%PhoX% intros.1 goal created.New goal is:goal 1/1H := N pH0 := N dH1 := d != N0|- \/q,r:N (r < d & p = q * d + r)End of goals.. .
.Table 2: Proof tree for Euclidian divisionmain original proposals in our generator (simi-lar generators, such as PROVERB (Huang andFiedler, 1997), take as input only the Prooftree).
It makes it possible for GePhoX to startfrom an incomplete proof and produce textsduring the interactive session.
These texts helpthe mathematician user: before entering a newcommand in the Proof script, he can read a textreminding himself what he has been doing sofar.
The Proof script is also useful for identify-ing the reasoning strategies that have been used(reasoning by contradiction or induction), whileit is very hard (if not impossible) to retrieve thisinformation from a Proof tree with its numerousdeduction steps.Another originality of GePhoX is that ittakes into account the knowledge of the userwho can be either a mathematician using PhoXor a person more or less novice in mathematics.For the same proof, GePhoX can generate sev-eral texts according to the user model.3 Using a descrition logic (DL)The knowledge representation system Kl-One(Branchman et al, 1979) was the first DL.
Itwas created to formalize semantic networks andframes (Minsky, 1974).
It introduces the no-tions of TBoxes and ABoxes respectively forterminological and assertional knowledge.
Kl-One has been widely used in the NLG commu-nity to formalize the domain model.
On theother hand, this is not the case for the morerecent DLs.
Nevertheless, they present at leasttwo advantages compared to Kl-One : 1) for alarge variety of DLs, sound and complete algo-rithms have been developped for main inferenceproblems such as subsumption, concepts satis-fiability and consistency (Donini et al, 1996);2) the relations between instances and classesare well defined for all the constructors, andtheir mathematical and computational proper-ties have been studied in detail (Horrocks et al,2000).
So we believe that DLs are appropriatefor the content determination task as shown in3.3.
Let us first briefly present DLs.3.1 A brief introduction to DLThe three fundamental notions of DLs are in-dividuals (representing objects in the domain),concepts (describing sets of individuals), androles (representing binary relations betweenindividuals or concepts).
A DL is characterizedby a set of constructors that allow us to buildcomplex concepts/roles from atomic ones.The set of constructors which seem useful forGePhoX and their syntax are shown in Table3; examples of concepts and roles with theirsemantic are shown underneath Table 3.Constructor (abbreviation) Syntaxatomic concept Atop >bottom ?conjonction C ?
Ddisjonction (U) C ?
Dcomplement (C) qCuniv.
quant.
?R.Cexist.
quant.
(E) ?R.Cnumeral restrictions (N ) >n R.C?n R.Ccollection of individuals (O) {a1,.
.
.,an}atomic role Proles conjonction (R) Q ?Rinverse role R?1role composition Q ?
RTable 3: Syntax of standard constructorsExamples of concepts with their semanticTheorem, Variable, {H1}, ?CHOOSE.User{ x / Theorem(x) } : Theorem concept{ x / Variable(x) } : Variable concept{ H1} : concept constructed by the O construc-tor on individual H1{ x / ?
u : User, CHOOSE(u,x) }Examples of roles with their semanticIMPLIES, PROVES{ x,y / IMPLIES(x,y) } : x implies y{ x,y / PROVES(x,y) } : x proves yThe choice of constructors is domain depen-dent.
Constructors other than those used inGePhoX (e.g.
temporal extension) can be usedfor other domains (e.g.
domains with non triv-ial temporal information), without altering themathematical and computational properties.3.2 Domain and user models in DLThe Domain model is the set of concepts androles necessary to express the input of the gen-erator.
More formally, let TD be a TBox, suchthat each input I can be described by means ofan ABox AD corresponding to TD.
The knowl-edge base ?D = (TD,AD) is called knowledgebase for the domain and noted dkb.
The Usermodel is a knowledge base ?U = (TU ,AU ) suchthat TU and AU are respectivly subsets of TDand AD.
?U is noted ukb.
Table 4 shows apart of the dkb for GePhoX.Goal MathObjSubgoal AxiomHypothese TheoremRules well_foundedIntro lesseq.case1Elim add.associativeRewrite OperatorTrivial LogicalOperLeft ExistReasonningStrategy ForallByInduction LAndByContradiction ArithOper.
.
.
Add.
.
.
MultiTable 4: GePhoX Domain model3.3 Content determination tasksThe content determination module performsfour tasks, as shown in Figure 2.Translation: The input of the generator (as-sertional information) is first translated intoconcepts of the TBox.
For that purpose, acorrespondence is established between the ele-ments of the input and concepts and roles inthe dkb.
The O constructor is used to keepinformation about the individuals occurring inthe input.
For example, command 2 in Table 1with individual H is translated into the conceptC0.= ?EliminationWell founded.Hypothese{H}, and commands 8 to 11 are translated intoC1.= ?ByInduction {p}.Selection: The selection task consists ofchoosing the relevant concepts among thoseconstructed in the translation phase with regardto the ukb.
For example, if C0 is an unknownconcept for the user, a concept C must be lookedup in the ukb such as C approximates1 C0.TBoxConceptsConceptsTranslationSelectionVerificationInstanciationTerminological AssertionalLogical FormABoxInputFigure 2: Content Determination TasksVerification: At this point, the coherence ofall the concepts of the selection is verified.
Forexample, if the user tries to reason by inductionon a real number, GePhoX tells him that it isnot possible.Instanciation: With the information aboutindividuals, which have been kept in the transla-tion phase (with the use of the O constructor),the instanciation task is straightforward.
Ta-ble 5 shows some instanciated concepts for theEuclidian division.As is well known, designing knowledge bases(dkb and ukb) and translating the input of thegenerator into concepts and roles of the DL isa difficult task which has to be fulfilled for ev-ery generator.
However, with a DL, the selec-tion, verification and instanciation tasks are do-main independent: algorithms and their imple-mentation are reusable.
Moreover, when usinga DL for the content determination task, the?message?
is a first order logic formula (a stan-dard representation shared by a large commu-1Given two TBoxes T and T ?
with T ?
T ?
and aconcept C ?
T ?
T ?, C?
?
T ?
approximates C if Cminimally subsumes C?
or C?
minimally subsumes C.. ?p1 ?
Entiernamed(p1,p)choose(user, p1).
?d1 ?
EntierNonNulnamed(d1,d)choose(user, d1).
?f1 ?
Formulaconstant(f1,?q,r: N (r < d ?
p = q.d + r)).
prove(user, f1)induction(f1, p1).
.
.Table 5: DL-Message for Euclidian divisionnity) which takes into account the user knowl-edge and whose coherence has been checked.4 Using SDRT for documentstructuringIn (Danlos et al, 2001) we advocate using sdrt(Segmented Discourse Representation Theory(Asher, 1993; Asher and Lascarides, 1998)) asa discourse framework, since sdrt and drt(Discourse Representation Theory, (Kamp andReyle, 1993)) are the most popular frameworksfor formal and computational semantics.
Let usbriefly present sdrt.4.1 A brief introduction to SDRTsdrt, designed first for text understanding, wasintroduced as an extension of drt in order to ac-count for specific properties of discourse struc-ture.
sdrt can be viewed as a super-layer ondrt whose expressiveness is enhanced by theuse of discourse relations.
Thus the drt struc-tures (Discourse Representation Structures ordrs) are handled as basic discourse units insdrt.drss are ?boxed?
first order logic formulae.Formally, a drs is a couple of sets ?U,Con?.
U(the universe) is the set of discourse referents.Con contains the truth conditions representingthe meaning of the discourse.A sdrs is a pair ?U,Con?, see Figure 3.
Uis a set of labels of drs or sdrs which canbe viewed as ?speech act discourse referents?
(Asher and Lascarides, 1998).
Con is a set ofconditions on labels of the form:?
pi : K, where pi is a label from U and K isa (s)drs?
R(pii, pij), where pii and pij are labels andR a discourse relation.
Discourse relationsare inferred non-monotonically by means ofa defeasible glue logic exploiting lexical andworld knowledge.SDRSlabels   Maxfall     	 Johnpush    Explanation        discourse referentsDRS (basic discourseconstituents)conditions(content/meaning)discourse relationFigure 3: sdrs for Max fell.
John pushed him.4.2 Building a SDRSStarting from a ?message?
encoded into a log-ical form, the document structuring modulebuilds a sdrs.
On a first step, the logical formis translated into a drs.
In the case of a purelyexistential formula2, this amounts to putting allthe variables into the universe of the drs andsplitting the formula into elementary conjoinedconditions.After this first step, the document structuringtask amounts to building a sdrs from a drs andto go on recursively on each embedded (s)drs.This process is schematized below.universecondition1condition2condition3condition4condition5condition6condition7?
?pi1 pi2 pi3pi1 :universe1condition1condition7pi2 :universe2condition2condition5pi3 :universe3condition4R1(pi1, pi2) ?
condition3R2(pi2, pi3) ?
condition6Let us first examine the principles governingthe splitting of the conditions.
All the condi-tions in the drs have to be expressed in thesdrs.
Two cases arise:?
either a condition in the drs appears as acondition in one of the sub-drs; that is thecase for condition1 which appears in thesub-drs labelled pi1;2More complex formulas are not considered here.?
or it is expressed through a discourse re-lation; that is the case for condition3 withR1(pi1, pi2) ?
condition3, which means thatR1(pi1, pi2) must have condition3 among itsconsequences: no other element is in chargeof expressing condition3.To establish discourse relations, the sdrtconditions are reversed.
As an illustration, insdrt for text understanding, there is the Ax-iom (1) for Narration.
This axiom states that ifNarration holds between two sdrss pi1 and pi2,then the main event (me) of pi1 happens beforethe main event of pi2.
(1) 2(Narration(pi1, pi2) ?
me(pi1) < me(pi2))For text generation, this axiom is reversed asshown below (Roussarie, 2000, p. 154):?
If k1 and k2 are drss whose main eventu-alities are not states,?
and if the main event of k1 occurs beforethe main event of k2,?
then Narration(pi1, pi2) is valid when pi1 andpi2 respectively label k1 and k2.As another example, the conditioncause(e1, e2) can be expressed through Re-sult(pi1, pi2) or Explanation(pi2, pi1) when pi1and pi2 label the sub-drss that contain thedescriptions of e1 and e2 respectively.Let us now examine how we determine theuniverses of sub-drss, i.e.
discourse refer-ents, while observing two technical constraints,namely:?
the arguments of any condition in a sub-drs must appear in the universe of thisdrs;?
the universes of all the sub-drss have to bedisjoint.
This constraint is the counterpartof the following constraint in understand-ing: ?partial drss introduce new discoursereferents?
(Asher, 1993, p. 71).These two constraints are not independent.Assuming that the first constraint is respected,the second one can be respected with the fol-lowing mechanism: if a variable x already ap-pears in a preceding sub-drs labelled pix, thena new variable y is created in the universe ofthe current sub-drs labelled piy and the con-dition y = x is added to the conditions of piy.The discourse referent y will be generated as ananaphora if pix is available to piy (Asher, 1993),otherwise it will be generated as a definite ordemonstrative NP.A document structuring module la sdrtbased on the principles we have just exposedcan be used for any generator (whose ?message?is first order logic formula).
The algorithm andthe rules establish discourse relations (obtainedby reversing the rules in NLU) are generic.
Seebelow an example of sdrs in GePhoX, thesdrs built from Table 5.pi3pi4pi3 :pi1pi2pi1 :x u e1user(u)entier(x)named(x,p)choose(e1,u,x)pi2 :y v e2entier-non-nul(y)named(y, d)choose(e2,v,y)v = uParallel(pi1,pi2)pi4 :x1 f w e3formula(f)constant(f,?q,r:N .
.
.
)prove(e3,w,f)induction(e3,x1)w = ux1 = xNarration(pi3,pi4)Table 6: sdrs for Euclidian division5 Using a lexicalized grammar forthe tactical componentLexicalized grammars are commonly used inNLU and also in NLG (Stede, 1996).
In Dan-los (1998; 2000) we propose a lexicalized formal-ism, called g-tag, for the tactical component ofan NLG system.
It is modularized into a micro-planner which produces a semantic dependencytree and a surface realizer which produces thetext (see Figure 1.2).The surface realizer is designed to use the syn-tactic and lexical information of a lexicalizedtag grammar.
The tag grammar is extendedto handle multi-sentential texts and not onlyisolated sentences.The microplanner is based on a lexicalizedconceptual-semantic interface.
This interface ismade up of concepts; each concept is associatedwith a lexical database.
In our model, a con-cept is either a term in the TBox or a discourserelation.
A lexical database for a given conceptrecords the lexemes lexicalizing it with their ar-gument structure, and the mappings betweenthe conceptual and semantic arguments.
Theprocess of generating a semantic dependencytree from a sdrs ?U,Con?
is recursive:- An element pii in U is generated as a clauseif pii labels a drs and recursively as a text(possibly a complex sentence) if pii labels asdrs.- A condition R(pii, pij) in Con is generated as atext ?Si.
Cue Sj .?
or as a complex sentence?Si Cue Sj .
?, where Si generates pii, Sj pij ,and Cue is a cue phrase which is encodedin the lexical database associated with R(Cue may be empty).- A condition pi : K in Con where K is a drs?U,Con?
is generated as a clause accordingto the following constraints (which are thecounterparts of constraints in understand-ing):?
A discourse referent in U is generated as anNP or a tensed verb.?
Conditions guide lexical choices.
Condi-tions such as x = John correspond toproper nouns.
Equality conditions betweendiscourse referents (e.g.
x = y) give riseto (pronominal or nominal) anaphora.
Theother conditions, e.g.
prove(e1, x, y), arelexicalized through the lexical data base as-sociated with the concept (prove).The surface realizer, based on a tag gram-mar, is a set of lexical data bases.
A data basefor a given lexical entry encodes the syntacticstructures realizing it with their syntactic argu-ments.
With such a tag grammar and a mor-phological module, the text is computed in a de-terministic way from the semantic dependencytree.6 ConclusionSince NLG is a subfield of NLP, which is itselfa subfield of AI, it seems to be a good idea toreuse tools developped by the NLP or AI com-munity.
We have shown in this paper how tointegrate DL, sdrt, and a lexicalized grammarinto an NLG system, while following the stan-dard pipelined architecture3.3Some authors (de Smedt et al, 1996) have made jus-tified criticisms of the pipelined architecture.
However,we decided to keep it for the time being.Theorem.
?p,d:IN (d 6= 0 ?
?q,r:IN (r < d ?
p = q.d + r))Proof.
Let us choose p, d two natural numberswith d 6= 0.
By induction on p we prove?q,r:IN (r < d ?
p = q.d + r).
Let take a a strictlypositive natural.
We assume?b:IN (b < a ?
?q,r:IN (r < d ?
b = q.d + r))and we must prove ?q,r:IN (r < d ?
a = q.d + r).We distinguish two cases: a < d and d ?
a.
In thefirst case, we choose q = 0 and r = a.
In the secondcase, we take a?
= a ?
d. Using the induction hy-pothesis on a?, we find two naturals q, r such thatr < d and a?
= q.d + r. We take S q and r as quo-tient and remaining for the division of a.
We mustprove a = S q.d + r which is immediate.Table 7: A Text of proof for Euclidian divisionGePhoX illustrates the applicabilty of oursystem.
It is currently being implemented inJava.
The development of the document plan-ner of GePhoX is work in progress.
The goalis to interface this module with CLEF (Meunierand Reyes, 1999), an implementation of g-tag.We intend to produce a text as shown in Ta-ble 7.ReferencesN.
Asher and A. Lascarides.
1998.
The seman-tics and pragmatics of presupposition.
Jour-nal of Semantics, 15(3):239?300.N.
Asher.
1993.
Reference to Abstract Objectsin Discourse.
Kluwer, Dordrecht.R.
Branchman, R. Bobrow, P. Cohen, J. Klovs-tad, B. Webber, and W. Woods.
1979.
Re-search in natural language understanding.Technical Report 4274, Bolt.
Beranek andNewman, Cambridge MA.L.
Danlos, B. Gaiffe, and L. Roussarie.
2001.Document structring a` la sdrt.
In ACL?2001Toulouse Proceeding.L.
Danlos.
1998.
G-TAG : un formalisme lexi-calise?
pour la ge?ne?ration de textes inspire?
detag.
Revue T.A.L., 39(2):7?33.L.
Danlos.
2000.
G-TAG: A lexicalized formal-ism for text generation inspired by Tree Ad-joining Grammar.
In A. Abeille?
and O. Ram-bow, editors, Tree Adjoining Grammars: for-malisms, linguistics analysis and processing,pages 343?370.
CSLI Publications, Stanford.K.
de Smedt, H. Horacek, and M. Zock.1996.
Architectures for natural languagegeneration: Problems and perspectives.
InG.
Adorni and M. Zock, editors, Trends inNLG.
Proceedings of the 4th European Work-shop, EWNLG?93, Pisa.
Springer-Verlag.F.
Donini, M. Lenzerini, D. Nardi, andA.
Schaerf.
1996.
Reasoning in descrip-tion logics.
In G. Brewka, editor, Principlesof Knowledge Representation and Reasoning,Studies in Logic, Language and Information.CLSI Publications.A.
El Ghali.
2001.
Une logique de descriptionpour le module quoi-dire-?
DEA de linguis-tique informatique, Universite?
Paris 7.I.
Horrocks, U. Sattler, and S. Tobies.
2000.Practical reasoning for very expressive de-scription logics.
Logic Journal of the IGPL,8(3):239?264.X.
Huang and A. Fiedler.
1997.
Proof verbal-ization as an application of NLG.
In IJCAI(2), pages 965?972.H.
Kamp and U. Reyle.
1993.
From Discourseto Logic.
Kluwer Academic Publishers, Dor-drecht, The Netherlands.F.
Meunier and R. Reyes.
1999.
La plateforme de dveloppement de gnrateurs de textesCLEF.
In Actes du 2e Colloque Franco-phone sur la Gnation Automatique de Textes,GAT?99, Grenoble.M.
Minsky.
1974.
A framework for representingknowledge.
MIT-AI Laboratory Memo 306.C.
Raffalli and P. Roziere, 2002.
The PhoXProof checker documentation.
LAMA, Uni-versite?
de Savoie / Universite?
Paris 7.E.
Reiter and R. Dale.
2000.
Building NaturalLanguage Generation Systems.
CambridgeUniversity Press.L.
Roussarie.
2000.
Un mode`le the?oriqued?infe?rences de structures se?mantiques et dis-cursives dans le cadre de la ge?ne?ration au-tomatique de textes.
The`se de doctorat en lin-guistique, Universite?
Paris 7.M.
Stede.
1996.
Lexical paraphrases in multi-lingual sentences generation.
Machine Trans-lation, 11.
