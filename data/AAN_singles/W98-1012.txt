Generating Determiners and Quantifiers in HebrewYael Dahan Netzer and Michael E lhadadBen Gurion UniversityDepartment  of Mathemat ics  and Computer  Science, Beer Sheva, 84105, Israel(yaeln \[ elhadad) ~cs.
bgu.
ac.
ilAbst ractThis paper presents a specific part of HUGG, a generation grammar for Hebrew.
This partdeals with determiners and quantifiers.
Our main goal is to determine which set of featuresmust be present in the input to the generation grammar to control the generation of complexdeterminers and quantifiers.Hebrew determiners are characterized bytwo properties: (1) definiteness is marked in severalplaces in the NP and it interacts with compound constructs; (2) the order of appearance ofdeterminers and quantifiers within a complex NP is flexible but still restricted.HUGG is developed with the goal to design an input specification language for syntacticrealization as close as possible for English and Hebrew, to allow easy development of bilingualgeneration applications.
We show in this paper how the original set of features controlling thegeneration ofdeterminers in SURGE, a large generation grammar for English, has been enrichedto account for the specificities of Hebrew determiners and how, in the process, SURGE has beenmodified and improved.We present aset of functional features - organized around the categories ofamount, partitiveand identity - and show how these features determine a variety of syntactic onstructs.1 In t roduct ionA text generation system generally includes two main components: content determination (thatdecides what to say) and surface realization (that decides how to say it).
Recent research as ledto the development of reusable surface realization systems which encapsulate knowledge of syntaxfor specific languages.
Most of this research as been conducted for English, and large generationgrammars for English are now available \[4\], \[9\].Multi-lingual generation ow appears as the "next frontier" in generation research: it is ofteneasier to develop applications to generate text in different languages than it is to translate text.When developing a multi-lingual application, the engineering strategy is to develop a single contentdetermination module and to plug it - more or less unchanged - into several surface realizationmodules for different languages - each encapsulating knowledge of a different language.The main problem to address in this context is to determine which interface is appropriatebetween the content determination module and the linguistic modules.
We are investigating thisproblem for the case of bilingual generation English-Hebrew.
We start from an existing surfacerealization system for English, SURGE, and have developed a generation grammar for Hebrewcalled HUGG with the goal that the input specification language for both grammars be as close aspossible.This paper illustrates the general issue of designing a bilingual generation system by focusingon the specific part of HUGG that deals with determiners and quantifiers.
Our main goal is to89determine which set of features must be present in the input to the generation grammar to controlthe generation of complex determiners and quantifiers.
Because the syntactic structure of Englishand Hebrew determiners i very different, we use functional-semantic features in the input (asopposed to syntactic features).
We present a set of such features and evaluate (1) how the featurescan account for specific syntactic onstructs in Hebrew and (2) how the same features can be usedin English.Syntactically, Hebrew determiners are characterized by two properties: (1) definiteness imarked in several places in the NP and it interacts with compound constructs; (2) the orderof appearance of determiners and quantifiers within a complex NP is flexible but still restricted.The demands that Hebrew syntax puts on the generation system are, therefore, quite different fromthose put by the English syntax.In the rest of the paper, we first present previous work in the description of Hebrew determiners,and present he treatment of the determiner sequence in English for generation as implemented inSURGE.
We then focus on the two issues of definiteness and order of constituents and present ourtreatment of the Hebrew determiner construction using a set of functional features.We derive from this analysis an input specification for noun phrases for a generation grammar.This input specification extends the set of features used in SURGE and remains compatible withthe English grammar, while providing a wide coverage of the Hebrew constructions.
This casestudy of the determiner system illustrates how a single set of functional features can drive boththe English and Hebrew generation systems despite their syntactic differences.
More generally, itdemonstrates the methodology followed to develop a sound bilingual generation system.1.1 Def in i tenessAs a polydefinite language, Hebrew marks definiteness in several places in the NP, unlike Englishwhich only marks it in the definite/indefinite articles.
Because of the complex nature of definitenessmarking in Hebrew, we have found that the marking of definiteness as realized in SURGE had tobe extended.Non-Def in i te(dl) sefer meyuHadbook speciala special bookDefinite(d2) ha-sefer ha-meyuHadthe-book the-specialthe special bookDefinite wi th  smixut(d3) sefer ha-madaw ha-meyuHadbook the-science the-specialthe special science bookExamples d l /d2 show how the definiteness marking (ha-) appears on both the head and themodifier.
Example d3 shows that when a noun-compound construction (called smixut) is used,then the definiteness marking disappears on the head.
The head, however, remains emanticallydefinite.
Hebrew demonstratives can also be marked with the definiteness ha-:Unmarked  sfarym eleh books thoseMarked ha-sfarym ha-eleh the-books the-thoseThe two forms are definite in their meaning (demonstrative implies definite), but the additionaldefinite marking is still possible in Hebrew.
The two forms differ in their pragmatic usage (theunmarked form tends to refer to previous text and the marked form to deixis proper \[11\] p.l17)The distinction between semantic definiteness and marked definiteness i reflected as well forthe indefinite, as shown in the following examples:Non-Def in i te  - unmarked  Non-Def in i te  - marked  Non-def in i te  selectivesefer eyzeh sefer sefer eHadbook which book book onea book a book (undetermined) a book, some book9OFrom these examples, it appears that a single binary feature de f in i te ,  as used in SURGE,cannot account for the syntactic omplexity of the definiteness.
We had, therefore, to extend theinput specification for definiteness.1.2 Order  of  const i tuentsUnlike the "determiner sequence" defined in \[8\] Hebrew determiners and quantifiers can be posi-tioned before and after the head of the NpI:(ol) col ha-yeladym (03) harbe yeladym (05) * harbe ha-yeladymall the-children many children * many the-childrenAll the children Many children(02) ha-yeladym cuIam (04) yeladym rabym (06) ha-yeladym ha-rabymthe-children all-them children numerous the-children the-numerousAll the children Many children The many childrenDeterminers and quantifiers positioned after the head behave more like adjectives: they agreein number, gender and definiteness with the head.
Determiners with the same meaning can appearbefore or after the head, as shown in examples ol/o2 and o3/o4 above.
In some cases, only oneof the two options is available, as shown in examples o5/o6: because the determiner for manyappearing before the head is lexically marked as indefinite, it cannot be used for the NP the manychildren.In addition to the choice before/after head, when several determiners and quantifiers co-occur,they must be ordered in the right sequence.
The distinction between determiners (D) and quantifiers(Q) has been proposed \[3\] to explain, among other facts, the order generally used:col me'or ha-mafginym * me'or col ha-mafginymall hundreds the-demonstrators * hundreds all the-demonstratorsAll of the hundreds of demonstrators ~ Hundreds of all o/the demonstrators"Determiners" (like col / all) generally appear before "quantifiers" (like me'ot / hundreds).By this definition, determiners are those words which, among other characteristics, can enter inrecursive constructs.
According to this model, there are no restrictions on the order of occurrenceof the D determiners:col S'ar ha-mafginym S'ar col ha-mafginymall the-rest-of the-demonstrators the-rest-of all the-demonstratorsAll the rest of the demonstrators The rest of all the demonstratorsThe different orders, naturally, have different meanings.We have found, however, that there are cases where the order between D determiners can leadto syntactically unacceptable NPs:col or-am ha-yeladym * or-am col ha-yeladymall those-them the-children * those-them all childrenall those children ~ those all childrenThe structural distinction Determiner/Quantifier proposed in \[3\] does not help to explain thisrestriction.
The problem with the last example is related to the functional incompatibility of thetwo determiners.
We instead present a functional account of these restrictions, based on a set offeatures derived from those used in SURGE.IDeterminers in English can occur after the head in the very restricted cases where a pronoun is modified by a"total" meaning- e.g., we both, them all.912 Prev ious  WorkDescriptive studies of the syntax of the Hebrew noun phrase do not generally distinguish betweendifferent functions of determiners but focus rather on the syntactic structure of the NP.Glinert \[7\] adopts a functional perspective, more appropriate to the needs of a generation sys-tem, and identifies a general pattern of the NP  that we use as a basis:\[partitive determiner amount head classifiers describers post-det/quant qualifiers\]In this pattern, the slots can be filled by any word that fits the function: partitive xpressions iden-tify a subset of the set referred to by the rest of the NP; amount expressions identify the quantity ornumber, exact or inexact, of the thing referred to; determiners identify the thing referred to moreor less precisely or specifically.
The general picture of the input specification is that of a referenceset from which a subset is identified by different complementary means.
The function of each wordrealizing this input specification determines where it appears in the syntactic structure.Yizhar and Doron \[3\] \[12\] distinguish between two sets of determiners, that they call D and Qquantifiers.
The distinction is based on syntactic features, such as location, ability to be modified,ability to participate in partitive structures, requirement to agree in number and gender with thehead.
This distinction is used to explain cooccurrence restrictions, the order of appearance of D vsQ quantifiers and the recursive structure of D determiners: D determiners can be layered on top ofother D determiners.
A single Q quantifier can occur in an NP  and it remains attached closest tothe head.As discussed in the introduction, the distinction D/Q is not sufficient to explain some restrictionson the cooccurrence of several Ds in the same NP, and does not help to predict the restrictions onoccurrence of determiners in different definiteness and partitive contexts.In \[i\] we have, therefore, refined the D/Q classification using functional criteria: we map theQ quantifiers to the "amount" category defined by Glinert, and the D set is split into the partitiveand determiner categories - each with a different function.
Of these, only partitive are recursive.Another controversial issue within Hebrew studies is whether determiners are types of nouns \[2\]\[6\].
This is an important issue to explain in a uniform manner why constructs like smixut (nouncompounding) are used for certain determiners and why certain determiners determine the numberand gender of the whole NP.
We have implemented some of these constraints by defining lexicalfeatures for determiners which determine this behavior.2.1 Determiner  Sequence in Generat ionOur goal is to define a set of functional features to include in the input to a generator.
Thesefeatures must provide enough information to construct a wide variety of determiner constructionsboth in Hebrew and in English.
For the comparison with English, we based our work on the SURGEgeneration grammar \[5\].The determiner sequence in SURGE is based on \[8\] and has the following pattern:\[pre-det (of) deZ deictic2 ordinal cardinal quantifier (describer classifier head)\].Where pre-det can be any one of all, both, half, multipliers and fractions, det is a deictic deter-miner, deicticg is an adjective from a restricted class that expresses the anaphoric status of thething referred to (e.g., above, same, different); and quantifier expresses the amount or quantity ofthe thing referred to.In \[4\], we gathered a minimal set of 24 features to define the determiner sequence of the NP inEnglish.
Complex systems in SURGE implement the cooccurence r strictions among these features,defniteness and partitive constructs.92Feature  ExampleDefinite yes/noDis tance  far/near/noneSelective yes/noThe/a bookThis/That/The bookSome/~ childrenA l i /None/$  of  the childrenCardinal The three childrenFract ion  One-third o/  the childrenMultiplier Tudce his weightFeature  Exampledegree  + The many carsdegree-  A little butterdegree  none Some buttercomparat ive  yes More carssuper la t ive  yes The most carseva luat ive  yes Too many carsor ientat ion  - Few carsTable 1: Features  used by  the  determiner  sys tem o f  the  SURGE Eng l i sh  GeneratorWhen studying the Hebrew determiner system, we found that this set of features had to beextended and refined.
As a consequence, both the implementations of SURGE and of HUGG havebeen made compatible with the same set of features, which we motivate in the rest of the paper.3 Def in i tenessDefiniteness in NP has two aspects: it corresponds to a complex semantic property of the thingreferred to by the phrase and it is syntactically marked in different ways.
We will not discusshow a noun phrase is defined as semantically definite (a development on this issue is provided in\[1\] Chap.5), and we assume that the decision that a referent is definite is taken by the contentdetermination module and that the semantic definite feature is given in the input to the generationgrammar.
We keep the feature de f in i te  yes for this purpose.In a Hebrew definite NP, the definite marker (ha-) is agglutinated to the head and to mostmodifiers (adjectives and quantifiers).
Not all subconstituents of the NP are marked, however: in anoun-compound construction the head loses the marking and the compounded noun keeps it.
Whendemonstratives are used, a marked and an unmarked form can be used.
In addition, pronouns andproper nouns are intrinsically definite and do not receive the ha- marking.To explain the distribution of the ha- marker, we have added the feature mark -de f in i te  whichdetermines whether an article (definite or indefinite) is to be used for each subconstituent of theNP.By default, the mark-definite of a subconstituent is equal to the definite of its mother con-stituent.
However, certain constructions and certain lexical items block this propagation and canforce a mark -de f in i te  no (for example, proper nouns have a lexical feature of mark -de f in i te  noand the noun-compounding construction enforces a mark -de f in i te  no on the head).The following example illustrates how the feature mark-definite contrasts among the two distinctphrases:Mark-definite no: (anaphoric)nawar c/ar Toy lev zeboy village good heart thisThis good-hearted country boyMark-definite yes: (deictic)nawar ha-cfar Toy ha-lev ha-zeboy the-village good the-heart he-thiscat common\]ex Unawar"definite yesdistance near"Toy"describer L cla.~ifier \[ catlexmark-definite yes nocommon \] \]"lev"In this example, nawar/boy is not marked with ha- because it enters in a compound constructionwith cfar.
Similarly Toy/good is not marked because it is an adjective compound of Icy/heart.93While there is agreement as to the behavior of the marking of definiteness, the marking ofindefinite nouns is quite controversial.
Some researchers claim that definite is not a binary but thatan additional unmarked value is necessary (cf \[2\] for a review).
We mainly adopt Ornan's view \[10\].In this view, an indefinite NP is marked with a null article by default, but the indefinite canalso be marked.
In this case, we use the feature (mark-def in i te  indef) .
This feature explainsthe contrast between:eyze delet some door mark-definite indefdelet door mark-definite nodelet aHat door one selective yesWe treat delet aHat as marked functionally as a selective phrase, following Halliday's featureas used in SURGE.
In our analysis, se lec t ive  yes implies mark -def in i te  indef.
Of the twomarked indefinite articles, eyze is non selective while eHad is.The following example, taken from an example by Winograd, illustrates the behavior of these lec t ive  yes feature:Examining the cabinet, we noticed that a door was marredThe Hebrew for it will be:?
cSe-badaknu et ha-aron, ra'ynu S-delet Svurawhile-checked-us OM the-closet, saw-us that-door brokencSebadaknu et ha-aron, ra'ynu S-delet aHat Svurawhile-checked-us OM the-closet, saw-us that-door one brokenIn this context, the existence of a set of 2 or 4 doors is known pragmatically (from worldknowledge about closets).
The function of the indefinite article is then to select one door out ofthis known set.
In that case, the unmarked indefinite is quite inappropriate, because it would referto a door that cannot be related to the closet.In summary, the complex marking of definiteness in Hebrew has led us to extend the singlesemantic feature de f in i te  yes/no used in SURGE, with the additional featuremark-definite yes/no/indef.4 Determining the OrderWe have mostly investigated the order of determiners and quantifiers in Hebrew that appear beforethe head of the NP.
We have found that semantics plays a main role in determining the relativeorder of determiners.
This follows Glinert (\[7\] Chap.8 and 9), who distinguishes among the differentfunctions fulfilled by determiners, and predicts the ordering accordingly, as discussed in Sect.2.The primary functional distinction is between quantifiers - that express amount or portion -and determiners - that express identity.
Accordingly, the word col/all for example, has two senses:one as a quantifier (with the all or collective meaning) and one as a determiner (with the every ordistributive meaning).Quantifiers are classified along two main dimensions: exact/inexact (e.g., three vs. many) andportion/amount.
The portion/amount system has the most effect on the structure of the NP, asit can be realized either lexically by certain quantifiers, or by using an explicit partitive syntacticstructure X m-Y/X  of Y.We define amount quantlfiers (cardinals, quantifiers like harbeh/many, yoter/more) as quan-tifiers that express quantity without explicit relation to the "total" cardinality of the referenceset 2~Although amount quantifiers are always semantically related to some reference set, this relation is presented94In contrast, partitive quantifiers express a quantity that gets its meaning only in relation tothe cardinality of a reference set.
For example, roy/most refers to at least half of the reference set.Similarly, col/all refers to all of the reference set, and is also partitive.The distinction among partitive quantifiers, amount quantifiers and determiners i  importantas it predicts the order of the words in the NP.
The standard order is:\[partitive deZerminer amount head\]We also note that only partitives can enter into recursive structures.Accordingly, our input specification language nforces the constraint that only a single amountand a single identification feature can be present simultaneously.
The realization grammar also usesthe knowledge of which word realizes which function to determine the ordering.
This is illustratedin the following example, where the standard order is obtained for the combination partitive amounthead:cat nptotal +ref-set definite yescardinal \[ value 10 \]col waseret ha-mafginymall ten the-demonstratorsAll the ten demonstratorsNote that whenever a partitive quantifier is desired, the input specification must include a ref-set construct.
This enforces the constraint hat partitives yield recursive constructs, as shown inthe following example:cat npwasarah me-col ha-mafginym cardinal value 10 \]ten of-all the-demonstrators total -t- 1\ [ lex "rnafgyn" \] Ten of all the demonstrators ref-set ref-set definite yes JThe decision to build an explicitly partitive construction X m- Y/X of Y is left to the realizationgrammar and can be quite complex.
If a quantifier can be found that has the lexical property ofbeing marked as partitive, then a non-explicitly partitive construction can be used, as in the firstexample above all the ten demonstrators.
Note that in this case, in contrast o English, in Hebrew.the explicitly partitive construction is not possible * col me-waseret ha-mafginym.
In contrast.if a feature modifying the ref-set is to be realized by a non-lexically partitive quantifier, then anexplicitly partitive construction must be used.When the "portion" part is modified with adjectives, then an explicitly partitive constructionmust be used:ha-roy ha-gadol mi-beyn ha-yeladymthe-most the-big of-from the-childrenThe vast majority of the childrenIn that case, the portion functions as the logical head of the NP with the realization of thereference set as a PP - which affects agreement with the verb.In summary, we propose a refined classification of the determiners/quantifiers n Hebrew intoamount, partitive and determiner.
This functional classification determines the relative order ofthe determiners within the NP and also determines which recursive structures can be constructed.Finally, it is important o take into account he lexical properties of specific determiners whichcan require or forbid the use of explicitly partitive constructions.
Our input specification languageencompasses all of the features found in SURGE but organizes them into a new framework whichenforces these constraints (with the explicit specification of the ref-set in the input).implicitly for amounts: 3 children refers to 3 children out of some reference set, but the reference set is deliberatelyleft implicit.
955 Conclus ionWe have presented in this paper observations on the syntax of the Hebrew NP and deduced fromits properties an input specification language for complexNPs to a generation grammar.
The casestudy of the determiner system illustrates the general methodology we apply to develop a multi?lingual generator.
The key point is to encapsulate knowledge ofsyntax in separate modules drivenby a common set of functional features.The input specification language extends the one used in SURGE for English to provide noughinformation to enforce the constraints observed in Hebrew.
We have specifically extended thetreatment of definiteness (and indefiniteness) with the additional feature mark-definite and thetreatment of partitives with a systematic classification of quantifiers as partitives, amounts anddeterminers.The resulting formalism provides a good basis for a bilingual generation grammar, and is beingused to that end in practical projects.References\[1\] Yael Dahan-Netzer.
Hugg - unification-based grammar for the generation of hebrew nounphrases.
Master's thesis, Ben Gurion University, Beer Sheva Israel, 1997.
(In Hebrew).\[2\] G. Danon.
The syntax of determiners in hebrew.
Master's thesis, Tel Aviv University, May1996.\[3\]\[4\]\[5\]E.Doron.
The np structure.
In U.Ornan E.Doron A.Ariely, editor, Hebrew ComputationalLinguistics.
Ministery of Science, 1991.
In Hebrew.Michael Elhadad.
Using argumentation to control lezical choice: a unification-based imple-mentation.
PhD thesis, Computer Science Department, Columbia University, 1992.Michael Elhadad.
Lexical choice for complex noun phrases: Structure, modifiers and deter-miners.
Machine T~ansIation, 11:159-184, 1996.\[6\] L. Glinert.
Shadow noun phrases in spoken hebrew.
Hebrew Computational Linguistics, (13),1978.
In Hebrew.\[8\]\[9\]\[10\]\[11\]\[12\]L. Glinert.
The Grammar of Modern Hebrew.
Cambridge University, 1989.Michael A. K. Halliday.
An Introduction to Functional Grammar.
Edward Arnold, London,second edition, 1994.William C. Mann.
An overview of the Penman text generation system.
In Proceedings of theThird National Conference on Artificial Intelligence (AAAI-83), pages 261-265, Washington,DC, August 22-26, 1983.
Also appears as USC/Information Sciences Institute Tech ReportRR-83-114.Uzi Ornan.
The Nominal Phrase in Modern Hebrew.
PhD thesis, Hebrew University, Jerusalem,1964.
(in Hebrew).H.
Rosen.
Contemporary Hebrew.
Mouton, 1977.D.
Yzhar.
Computational grammar for noun phrases in hebrew.
Master's thesis, HebrewUniversity, Jerusalem, 1993.
In Hebrew.96
