PARSING AS NATURAL DEDUCTIONEsther KSnigUnivers i tg t  S tut tgar tIns t i tu t  f i ir  Masch ine l le  Sprachverarbe i tung ,Kep lers t rasse  17, D-7000 Stut tgar t  1, FRGAbstractThe logic behind parsers for categorial grammarscan be formalized in several different ways.
Lam-bek Calculus (LC) constitutes an example for a na-tural deduction 1 style parsing method.In natural language processing, the task of aparser usually consists in finding derivations for alldifferent readings of a sentence.
The original Lam-bek Calculus, when it is used as a parser/theoremprover, has the undesirable property of allowing forthe derivation of more than one proof for a readingof a sentence, in the general case.In order to overcome this inconvenience and toturn Lambek Calculus into a reasonable parsingmethod, we show the existence of "relative" normalform proof trees and make use of their properties toconstrain the proof procedure in the desired way.1 IntroductionSophisticated techniques have been developed forthe implementation f parsers for (augmented) con-text-free grammars.
\[Pereira/Warren 1983\] gave acharacterization of these parsers as being resolu-tion based theorem provers.
Resolution might betaken as an instance of Hilbert-style theorem pro-ving, where there is one inference rule (e.g.
ModusPonens or some other kind of Cul Rule) which al-lows for deriving theorems from a set of axioms.In the case of parsing, the grammar ules and thelexicon would be the axioms.When categorial grammars were discovered forcomputational linguistics, the most obvious wayto design parsers for categorial grammars eemed1 "natural deduction" is used here in its broad sense, i.e.natural deduction as opposed to Hilbert-style deductionto apply the existing methods: The few combi-nation rules and the lexicon constitute the set ofaxioms, from which theorems are derived by aresolution rule.
However, this strategy leads tounsatisfactory results, in so far as extended ca-tegorial grammars, which make use of combina-tion rules like functional composition and typeraising, provide for a proliferation of derivationsfor the same reading of a sentence.
This pheno-menon has been dubbed the spurious ambiguityproblem \[Pareschi/Steedman 1987\].
One solutionto this problem is to describe normal forms forequivalent derivations and to use this knowledgeto prune the search space of the parsing process\[Hepple/Morrill 1989\].Other approaches to cope with the problem ofspurious ambiguity take into account he peculari-ties of categorial grammars compared to grammarsWith "context-free skeleton".
One characteristic ofcategorial grammars i the shift of information fromthe grammar rules into the lexicon: grammar rulesare mere combination schemata whereas yntacticcategories do not have to be atomic items as in the"context-free" formalisms, but can also be structu-red objects as well.The inference rule of a Hilbert-style deductionsystem does not refer to the internal structure ofthe propositions which it deals with.
The alterna-tive to Hilbert-style deduction is natural deduction(in the broad sense of the word) which is "natural"in so far as at least some of the inference rules ofa natural deduction system describe xplicitly howlogical operators have to be treated.
Therefore na-tural deduction style proof systems are in principlegood candidates to function as a framework for ca-tegorial grammar parsers.
If one considers catego-ries as formulae, then a proof system would haveto refer to the operators which are used in thoseformulae.272The natural deduction approach to parsing withcategorial grammars plits up into two generalmainstreams both of which use the Gentzen se-quent representation to state the correspondingcalculi.
The first alternative is to take a generalpurpose calculus and propose an adequate transla-tion of categories into formulae of this logic.
Anexample for this approach has been carried outby Pareschi \[Pareschi 1988\], \[Pareschi 1989\].
Onthe other hand, one might use a specialized cal-culus.
Lambek proposed such a calculus for ca-tegorial grammar more than three decades ago\[Lambek 1958\].The aim of this paper is to describe how Lam-bek Calculus can be implemented in such a waythat it serves as an efficient parsing mechanism.
Toachieve this goal, the main drawback of the originalLambek Calculus, which consists of a version of the"spurious ambiguity problem", has to be overcome.In Lambek Calculus, this overgeneration f deriva-tions is due to the fact that the calculus itself doesnot giye enough constraints on the order in whichthe inference rules have to be applied.In section 2 of the paper, we present LambekCalculus in more detail.
Section 3 consists of theproof for the existence of normal form proof treesrelative to the readings of a sentence.
Based onthis result, the parsing mechanism is described insection 4.head of a complex category is the head of its valuecategory.
The category in the succedens of a se-quent is called goal category.
The category whichis "decomposed" by an inference rule application iscalled current functor.Basic Category:a constantRightward Looking Category:if value and argument are categories,then (value/argument) is a categoryLeftward Looking Category:if value and argument are categories,then (value\argument) is a categoryFigure h Definition of categoriesaxiom scheme(axiom) x --* xlogical rules(/:left) r -- ~t U, ~, v --U, (z\]y), T, V --* z(/:right) T, y - -  T-- (~ly)(\:left) T --,' y U, z, V .--., z U, T, (~\v), v -.
(\:right) v, T - T -- (=\v)T non-empty sequence of categories;U, V sequences; x, y, z categories.Figure 2: Cut-free and product-free LCthe president of Icelandnp/n, n, (n\n)/np, np --* npn, (n\n)/np, np --.
n np --* np2 Lambek Ca lcu lusIn the following, we restrain ourselves to cut-free and product-free Lambek Calculus, a calculuswhich still allows us to infer infinitely many  deri-ved rules such as Geach-rule, functional composi-tion etc.
\[Zielonka 1981\].
The cut-free and product-free Lambek Calculus is given in figures 1 and 2.Be aware of the fact that we did not adopt Lam-bek's representation of complex categories.
Proofsin Lambek  Calculus can be represented as treeswhose nodes are annotated with sequents.
An  ex-ample is given in figure 3.
A lexical lookup stepwhich replaces lexemes by their corresponding ca-tegories has to precede the actual theorem provingprocess.
For this reason, the categories in the an-tecedens of the input sequent will also be called le-zical categories.
We introduce the notions of head,goal category, and current fanctor: The head ofa category is its "innermost" value category: Thehead of a basic category is the category itself.
Thenp ~ np n, n\n -.
* nn ---* n n ---* nFigure 3: Sample proof tree2.1  Un i f i ca t ion  Lambek Ca lcu lusLambek Calculus, as such, is a propositional cal-culus.
There is no room to express additional con-straints concerning the combination of categories.Clearly, some kind of feature handling mechanismis needed to enable the grammar writer to state e.g.conditions on the agreement of morpho-syntacticfeatures or to describe control phenomena.
Forthe reason of linguistic expressiveness and to facili-tate the description of the parsing algorithm below,273we extend Lambek Calculus to Unification LambekCalculus (ULC).First, the definition of basic category must beadapted: a basic category consists of an atomiccategory name and feature description.
(For thedefinition of feature descriptions or feature termssee \[Smolka 1988\].)
For complex categories, thesame recursive definition applies as before.
Thesyntax for categories in ULC is given informally infigure 4 which shows the category of a control verblike "persuade".
We assume that variable namesfor feature descriptions are local to each categoryin a sequent.
The (/:left)- and (\:left)-inferencerules have to take care of the substitutions whichare involved in handling the variables in the exten-ded categories (figure 5).
Heed that the substitu-tion function o" has scope over a whole sequent, andtherefore, over a complete subproof, and not onlyover a single category.
In this way, correct varia-ble bindings for hypothetic ategories, which areintroduced by "right"-rules, are guaranteed.
((s(\[<pred>:persuade\])<subj>:Subj<obj>:Obj<vcomp>:VComp\])\np(Subj))/(s(VComp)\np(Obj)))/np(Obj)Figure 4: Sample categoryI T --* Y2 a(U v z~ V ~ z)~J, (=Iv,).
T, V --,, a(yl ) = a(y2)Figure 5: (/:lefl)-rule in ffLCnp/n, n, (n\n)/np, np -- npnp ---* np np/n, n, n\n ~ npn ---* n np/n ,  n --, npn ----* n np  ~ npnp/n, n, (n\n)/np, np ---, np.np - - ,np  np/n, n, n\n ---* npn, n \n  ~ n np --~ npn- - -~ n n----~ nFigure 6: Extra proofs3 Normal  P roo f  TreesThe sentence in figure 3 has two other proofs, whichare listed in figure 6, although one would like tocontribute only one syntactic or semantic readingto it.
In this section, we show that such a set of apossibly abundant number of proofs for the samereading of a sequent possesses one distinguishedmember which can be regarded as the represen-tative or the normal form proof tree for this set.In order to be able to use the notion of a "rea-ding" more precisely, we undertake the followingdefinition of structures which determine readingsfor our purposes.
Because of their similarity to syn-tax trees as used with context-free grammars, wealso call them "syntax trees" for the sake of sim-plicity.
Since, on the semantic level, the use of a"left'-rule in Lambek Calculus corresponds to thefunctional application of a functor term to someargument and the "right"-rules are equivalent ofunctional abstraction \[van Benthem 1986\], it is es-sential that in a syntax tree, a trace for each ofthese steps in a derivation be represented.
Then itis guaranteed that the semantic representation ofa sentence can be constructed from a syntax treewhich is annotated by the appropriate partial se-mantic expressions of whatever semantic represen-tation language one chooses.
Structurally distinctsyntax trees amount o different semantic expres-sions.A syntax tree t condenses the information of aproof for a sequent s in the following way:1.
Labels of single.node trees, are either lexicalcategories or arguments of lexical categories.2.
The root of a non.trivial tree has either(a) one daughter tree whose root is labelledwith the value category of the root's la-bel.
This case catches the application ofa "right'-inference rule; or(b) two daughter trees.
The label of the rootnode is the value category, the label of theroot of one daughter is the functor, andthe label of the root of the other daugh-ter is the argument category of an appli-cation of a "left"-inference rule.Since the size of a proof for a sequent is cor-related linearily to the number of operators whichoccur in the sequent, different proof trees for thesame sequent do not differ in terms of size - theyare merely structurally distinct.
The task of deft-274ning those relative normal forms of proofs, whichwe are aiming at, amounts to describing proof treesof a certain structure which can be more easily cor-related with syntax trees as would possibly be thecase for other proofs of the same set of proofs.The outline of the proof for the existence of nor-mal form proof trees in Lambek Calculus is the fol-lowing: Each proof tree of the set of proof trees forone reading of a sentence, i.e.
a sequent, is map-ped onto the syntax tree which represents this rea-ding.
By a proof reconstruction procedure (PR),this syntax tree can be mapped onto exactly oneof the initial proof trees which will be identified asbeing the normal form proof tree for that set ofproof trees.It is obvious that the mapping from proof treesonto syntax trees (Syntax Tree Construction - SC)partitions the set of proof trees for all readings ofa sentence into a finite number of disjoint subsets,i.e.
equivalence classes of proof trees.
Proof treesof one of these subsets share the property of ha-ving the same syntax tree, i.e.
reading.
Hence, thesingle proof tree which is reconstructed from such asyntax tree can be safely taken as a representativefor the subset which it belongs to.
In figure 7, thisargument is restated more formally.proof syntax normaltrees trees proofsPn }: N t, N PnPlmPnl }Pn*Figure 7: Outline of the proof or normal formsWe want to prove the following theorem:Theorem 1 The set of proofs for a sequent canbe partitioned into equivalence classes according totheir corresponding syntax trees.
There is exactlyone proof per equivalence class which can be iden-tified as its normal proof.This theorem splits up into two lemmata, the firstof which is:Lemma 1 For every proof tree, there exists exactlyone syntax tree.The proof for lemma 1 consists of constructing therequired syntax tree for a given proof tree.The preparative step of the syntax tree con-struction procedure SC consists of augmenting le-xical categories with (partial) syntax trees.
Partialsyntax trees are represented by A-expressions to in-dicate which subtrees have to be found in order tomake the tree complete.
The notation for a cate-gory c paired with its (partial) syntax tree t is c : t.A basic category is associated with the tree con-sisting of one node labelled with the name of thecategory.Complex categories are mapped onto partialbinary syntax trees represented by A-expressions.We omit the detailed construction procedure forpartial syntax trees on the lexical level, and givean example (see fig.
8) and an intuitive characte-rization instead.
Such a partial tree has to be builtup in such a way that it is a "nesting" of functionalapplications, i.e.
one distinguished leaf is labelledwith the functor category which this tree is associa-ted with, all other leaves are labelled with variablesbound by A-operators.
The list of node labels alongthe path from the distinguished node to the rootnode must show the "unfolding" of the functor ca-tegory towards its head category.
Such a path isdubbed projection line.
(s\np)/np :Az,Az2s )'s\np'z2 /' (s \np) /np'  zlFigure 8: Category and its partial syntax treeOn the basis of these augmented categories, theoverall syntax tree can be built up together withthe proof for a sequent.
As it has already beendiscussed above, a "left"-rule performs a functio-nal application of a function t/ to an argumentexpression to, which we will abbreviate by tf\[t~ \].
"right"-rules turn an expression tv into a function(i.e.
partial syntax tree) t/ = Atatv by means ofA-abstraction over to.
However, in order to retainthe information on the category of the argumentand on the direction, we use the functor categoryitself as the root node label instead of the aforementioned A-expression.275The steps for the construction of a syntax treealong with a proof are encoded as annotations ofthe categories in Lambek Calculus (see figure 9).An example for a result of Syntax Tree Construc-tion is shown in figure 10 where "input" syntaxtrees are listed below the corresponding sequent,and "output" syntax trees are displayed above theirsequents, if shown at all.Since there is a one-to-one correspondence b t-ween proof steps and syntax tree constructionsteps, exactly one syntax tree is constructed persuccessful proof for a sequent.
This leads us to thenext step of the proof for the existence of normalforms, which is paraphrased by lemma 2.Lemma 2 From every syntax tree, a unique prooftree can be reconstructed.The proof for this lemma is again a constructiveone: By a recursive traversal of a syntax tree, weobtain the normal form proof tree.
(The formula-tion of the algorithm does not always properly di-stinguish between the nodes of a tree and the nodelabels.
)(axiom)(/:left)(/:right)(\:left)(\:right)z : t  - - *  x : tT - *  V:~.
~', z : t t \ [ t .
\], V --.
z : tU, (z /y) : t  1, T, V - -  z:tT~ ~ ...* x : tT--  (=/y):'(x/y)'(t)T - -  ~:t. ~,  =:~/\[t.\], v - -  z : tU,T,  (~\y ) : t  s ,  V - .
z:tT -- (=\~):'(=\v)'(OT non-empty sequence of categories;U, V sequences; x, y, z categories;t, ta, t I partial syntax trees.Figure 9: Syntax Tree Construction in LCProof Reconstruction (P R)Input: A syntax tree t with root node label g.Output: A proof tree p whose root sequent s withantecedens A and goal category g, and whose idaughter proofs pi (i = 0, 1, 2) are determined bythe following method:Method:?
I f  t consists of the single node g, p consistsof an s which is an instantiation of the axiomscheme with g --~ g. s has no daughters.?
I f  g is a complex category z /y  reap.
z \y  andhas one daughter tree tl, the antecedens A isthe list of all leaves of t without the leftmostresp.
the rightmost leaf., s has one daughterproof which is determined by applying ProofReconstruction to the daughter tree of g.?
I f  g is a basic category and has two daughtertrees tt and t~_, then A is the list of all leavesof t. s has two daughter proof trees Pt andP2- C is the label of the leaf whose projectionline ends at the root g. tl is the sister treeof this leaf.
Pl is obtained by applying PR totl.
P2 is the result of applying PR to t2 whichremains after cutting off the two subtrees Cand tt from t.Thus, all proofs of an equivalence class are map-ped onto one single proof by a composition of thetwo functions Syntax Tree Construction and ProofReconstruction.
\[:\]4 The  ParserWe showed the existence of relative normal formproof trees by the detour on syntax trees, assu-ming that all possible proof trees have been gene-rated beforehand.
This is obviously not the wayone wants to take when parsing a sentence.
Thegoal is to construct he normal form proof directly.For this purpose, a description of the propertieswhich distinguish normal form proofs from non-normal form proofs is required.The essence of a proof tree is its nesting of cur-rent functors which can be regarded as a partial or-der on the set of current functors occuring in thisspecific proof tree.
Since the current functors oftwo different rule applications might, coincidently,be the same form of category, obviously some kindof information is missing which would make all cur-rent functors of a proof tree (and hence of a syntaxtree) pairwise distinct.
This happens by statingwhich subsequence the head of the current functorspans over.
As for information on a subsequence,it is sufficient o know where it starts and where itends.Here is the point where we make use of the ex-pressiveness of ULC.
We do not only add the startand end position information to the head of a com-plex category but also to its other basic subcate-gories, since this information will be used e.g.
formaking up subgoals.
We make use of obvious con-straints among the positional indices of subcatego-ries of the same category.
The category in figure 11spans from position 2 to 3, its head spans from 1to 3 if its argument category spans from 1 to 2.276whom mary loves 'tel'( 'rel/(s/np)',  's/n/( ' s ' ( 'n / ,  's\np'( ' (s\np)lnp',  'np' ))))rel/(s/np), np, (s\np)/np ---, relAz 'tel'( x ), 'np', AzlAz2 's ' (  z2, 's\np'( '(s\np)/np',  z l  ))'s/n/( 's'( 'rip', ' s\np'( '(s\np)/np', 'rip' )))np,  (s\np)/np ---* slnP'.p', ~1~2 's'( x2, 's\np'('(s\np)/np', xl ))np, (s\np)/np, np --* s'np', AxQ~z2 's'( x2, 's\np'( '(s\np)/np', X 1 )), tllp!np ~ np'np'np, s\np --* s'rip',  x2's'(x2,' s\np'('(s\.p)/.p', '.p'))np~np s---*s'nit/ ' s ' ( 'n / / ,  's\np'( '(s\np)/np',  'np' )) "rel --*relFigure 10: Sample syntax tree constructionThe augmentation of categories by their positionalindices is done most efficiently during the lexicallookup step.s(\[<start> : 1, <end> : 3 \])\np( \ [<start> : 1, <end> : 2 \])Figure 11: Category with position featuresWe can now formulate what we have learnedfrom the Proof Reconstruction (PR) procedure.Since it works top-down on a syntax tree, the cha-racteristics of the partial order on current functorsgiven by their nesting in a proof tree are the follo-wingNesting Constraints:1.
Right.Rule Preference: Complex categories onth.e righthand side of the arrow become cur-rent functors before complex categories on thelefthand side.2.
Current Functor Unfolding: Once a lefthandside category is chosen for current functor ithas to be "unfolded" completely, i.e.
in thenext inference step, its value category has tobecome current functor unless it is a basic ca-tegory.3.
Goal Criter~um: A lefthand side functor ca-tegory can only become current functor if itshead category is unifiable with the goal cate-gory of the sequent where it occurs.Condition 3 is too weak if it is stated on thebackground of propositional Lambek Calculus only.It would allow for proof trees whose nesting of cur-rent functors does not coincide with the nesting ofcurrent functors in the corresponding syntax tree(see figure 12).S/S, S /S ,  S, S\S, S\S -"* SS "-* S S /8 ,  S~ S\S, S\S ""+ Ss ---, s s, s\s, s\s --* sS "+ S S, $\8  -'* SS "-*S S ' "*  SSsis / \S S\8Figure 12: Non.normal form proofThe outline of the parsing/theorem proving al-gorithm P is:?
A" sequent is proved if it is an instance of theaxiom scheme.?
Otherwise, choose an inference rule by obey-ing the nesting constraints and try to provethe premises of the rule.Algorithm P is sound with respect to LC be-cause it has been derived from LC by adding re-strictions, and not by relaxing original constraints.It is also complete with regard to LC, because therestrictions are just as many as needed to rule outproof trees of the "spurious ambiguity" kind accor-ding to theorem 1.2774.1 Fur ther  ImprovementsThe performance of the parser/theorem prover canbe improved further by adding at least the two fol-lowing ingredients:The positional indices can help to decide wheresequences in the "left"-rules have to be split up toform the appropriate subsequences of the premises.In \[van Benthem 1986\], it was observed thattheorems in LC possess aso-called count invariant,which can be used to filter out unpromising sugge-stions for (sub-)proofs during the inference process.5 ConclusionThe cut-free and product-free part of Lambek Cal-culus has been augmented by certain constraints inorder to yield only normal form proofs, i.e.
only oneproof per "reading" of a sentence.
Thus, theoremprovers for Larnbek Calculus become realistic toolsto be employed as parsers for categorial grammar.General efficiency considerations would be of in-terest.
Unconstrained Lambek Calculus seems tobe absolutely inefficient, i.e.
exponential.
So far, noresults are known as to how the use of the nestingconstraints and the count invariant filter systema-tically affect the complexity.
At least intuitively,it seems clear that their effects are drastic, becausedue to the former, considerably fewer proofs are ge-nerated at all, and due to the latter, substantiallyfewer irrelevant sub-proofs are pursued.From a linguistic standpoint, for example, thefollowing questions have to be discussed: How doesLambek Calculus interact with a sophisticated le-xicon containing e.g.
lexical rules?
Which wouldbe linguistically desirable xtensions of the infe-rence rule system that would not throw over theproperties (e.g.
normal form proof) of the originalLambek Calculus?An implementation f the normal form theoremprover is currently being used for experimentationconcerning these questions.6 AcknowledgementsThe research reported in this paper is supportedby the LILOG project, and a doctoral fellowship,both from IBM Deutschland GmbH, and by theEsprit Basic Research Action Project 3175 (DY-ANA).
I thank Jochen D6rre, Glyn Morrill, RemoPareschi, and Henk Zeevat for discussion and criti-cism, and Fiona McKinnon for proof-reading.
Allerrors are my own.References\[Calder/Klein/Zeevat 1988\] Calder, J.; E. Kleinand H. Zeevat(1988): Unification CategorialGrammar: A Concise, Extendable Grammar forNatural Language Processing.
In: Proceedingsof the 12th International Conference Computa-tional Linguistics, Budapest.\[Gallier 1986\] Gallier, J.H.
(1986): Logic for Com-puter Science.
Foundations of Automatic Theo-rem Proving.
Harper and Row, New York.\[Hepple/Morrill 1989\] Hepple, M. and G. Morrill(1989): Parsing and derivational equivalence.
In:Proceedings of the Association for Computatio-nal Linguistics, European Chapter, Manchester,UK.\[Lambek 1958\] Lambek, J.
(1958): The mathe-matics of sentence structure.
In: Amer.
Math.Monthly 65, 154-170.\[Moortgat 1988\] Moortgat, M. (1988): CategorialInvestigations.
Logical and Linguistic Aspects ofthe Lambek Calculus.
Forts Publications.\[Pareschi 1988\] Pareschi, R. (1988): A DefiniteClause Version of Categorial Grammar.
In: Proc.of the 26th Annual Meeting of the Associationfor Computational Linguistics.
Buffalo, N.Y.\[Pareschi 1989\] Pareschi, R. (1989): Type-DrivenNatural Language Analysis.
Dissertation, Uni-versity of Edinburgh.\[Pareschi/Steedman 1987\] Pareschi, R. and M.Steedman (1987): A Lazy Way to Chart-Parsewith Categorial Grammars.
In: Proc.
25th An-nual Meeting of the Association for Computatio-nal Linguistics, Stanford; 81-88.\[Pereira/Warren 1983\] Pereira, F.C.N and D.H.D.Warren (1983): Parsing as Deduction.
In: Pro-ceedings of the 21st Annual Meeting of the As-sociation of Computational Linguistics, Boston;137-144.\[Smolka 1988\] Smolka, G. (1988): A Feature Logicwith Subsorts.
Lilog-Report 33, IBM Deutsch-land GmbH, Stuttgart.278\[Uszkoreit 1986\] Uszkoreit, H. (1986): CategorialUnification Grammar.
In: Proceedings of the1 lth International Conference on ComputationalLinguistics, Bonn.\[van Benthem 19861 Benthem, 3. v. (1986): EssaysIn Logical Semantics.
Reidel, Dordrecht.\[Zielonka 1981\] Zielonka, W. (1981): Axiomatiza-bility of Ajdukiewicz-Lambek Calculus by Me-ans of Cancellation Schemes.
In: Zeitschrift ffirmathematische Logik und Grundlagen der Ma-thematik, 27, 215-224.279
