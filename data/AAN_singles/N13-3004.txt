Proceedings of the NAACL HLT 2013 Demonstration Session, pages 14?19,Atlanta, Georgia, 10-12 June 2013. c?2013 Association for Computational LinguisticsAnafora: A Web-based General Purpose Annotation ToolWei-Te ChenDepartment of Computer ScienceUniversity of Colorado at Boulderweite.chen@colorado.eduWill StylerDepartment of LinguisticsUniversity of Colorado at Boulderwilliam.styler@colorado.eduAbstractAnafora is a newly-developed open sourceweb-based text annotation tool built to belightweight, flexible, easy to use and capa-ble of annotating with a variety of schemas,simple and complex.
Anafora allows se-cure web-based annotation of any plaintextfile with both spanned (e.g.
named entity ormarkable) and relation annotations, as wellas adjudication for both types of annota-tion.
Anafora offers automatic set assignmentand progress-tracking, centralized and human-editable XML annotation schemas, and file-based storage and organization of data in ahuman-readable single-file XML format.1 IntroductionAnafora1 is a new annotation tool designed to bea lightweight, flexible annotation solution which iseasy to deploy for large and small projects.
Previ-ous tools (such as Protege/Knowtator (Ogren, 2006)or eHost) have been written primarily with local an-notation in mind, running as native, local applica-tions and reading complex file or folder structures.This limits cross-platform deployment and requiresthe annotated data to be stored locally on machinesor run in X-Windows, complicating data-use agree-ments and increasing data fragmentation.Anafora was designed as a web-based tool toavoid this issue, allowing multiple anntators to ac-cess data remotely from a single instance running1Anafora is free and open-source, and is available (alongwith documentation and sample projects) for public use onhttps://github.com/weitechen/anaforaon a remote server.
Designed for WebKit-basedbrowsers, annotators can work from nearly any mod-ern OS, and no installation, local storage, or SSHlogins are required.
All data is regularly autosaved,and annotations are saved to cache for restoration inthe event of a connectivity interruption.In addition, avoiding the complex schemas andfiletypes associated with many current solutions,Anafora was built to maintain simple, organized rep-resentations of the data it generates.
Annotationschemas and stored data are both saved as human-readable XML, and these are stored alongside plain-text annotated files in a simple, database-free, staticfilesystem.
This allows easy automated assignmentand organization of sets and offers ease of adminis-tration and oversight unmatched by other tools.Most importantly, though, Anafora has been de-signed to offer an efficient and learnable meansfor annotation and adjudication using even com-plex schemas and multi-step workflows (such asUMLS (medical named entity tags), Coreference,and THYME Temporal Relations annotation, de-scribed in (Albright et al 2013)).
This allowsAnafora to a single-source solution for whole-textannotation across all of your projects.2 Comparisons with existing toolsAnafora has been designed from the ground up withsome key advantages over existing whole-text an-notation solutions such as eHost/Chartreader (Southet al 2012), Protege/Knowtator (Ogren, 2006), andBRAT (Stenetorp et al 2012).Both Protege and eHost are locally-run Java soft-ware (although eHost also relies on a remote in-14stall of Chartreader).
Although they are availablefor all major platforms, they require annotators toinstall the applications locally and upgrade the in-stallations as major issues come up.
More impor-tantly, both store the texts being annotated locallyon the machine used for annotation, which is prob-lematic under many data-use agreements for medicalor otherwise sensitive data.
Anafora addresses thisshortcoming by its web-based design, allowing easysoftware update and eliminating local data storage,while also enabling automatic and centralized set as-signment.Another of Anafora?s strengths over existing toolsis flexibility and complex schema support.
At lastreview, eHost/Chartreader offered only rudimen-tary between-annotation relations (primarily for co-reference), lacking the flexibility needed for morecomplex relation sets.
BRAT does offer an effec-tive relation annotation tool, but doesn?t supportthe more complex schemas and property types thatAnafora does (e.g.
multi-slot relations, relationproperties, pointers as properties of entities, etc).
So,although both BRAT and eHost/Chartreader are ex-cellent solutions for simple annotation schemas, forcomplex schemas and workflows, Anafora is a moreflexible and capable choice.Finally, Anafora?s biggest strength is itslightweight implementation.
Unlike Pro-tege/Knowator?s folder model where each assignedannotation task contains a separate copy of theschema, document, and project, Anafora?s folders-containing-XML model of document and schemastorage means that each document and schema isstored only once in one easily accessible place,and unlike eHost/Chartreader, administration canbe done by changing and moving files from SFTPor a command line, rather than by logging in to aseparate program.
This central storage means thatschema modification is as easy as changing oneXML file, which will be used for all subsequentannotations, and the file-based model eliminates theneed to back up large databases.In short, although many annotation tools exist,Anafora?s combination of light weight, web-basedUI, centralized file storage and complex schema sup-port make Anafora unique and an excellent choicefor any annotation project.Figure 1: Anafora Schema Example3 Schema and Data FormatIn Anafora, annotations are divided into two types:Entity and Relation.
An Entity annotation associatesa certain span in the text with a type and list of prop-erties.
Relation annotations specify a relationshipbetween multiple Entities.
The nature of these En-tity and Relation annotations (as well as their prop-erties) are stored in an XML Schema file, while datafiles store the Entities and Relations specified by an-notators for each file.3.1 SchemaThe schema file defines the data type and attributesof the annotations.
Our schema format is defined inXML form, which is a simple and human-readablemarkup file.
A Temporal schema is shown in Fig.
1.The first part of the schema file is ?defaultat-tribute?
element in which the schema?s overall at-tributes are defined.
Another part is the ?definition?element which defines the hierarchy of the schematree, the annotation types, and the associated proper-ties for each type.
The schema is in the form of a treestructure.
The ?entities?
and ?relations?
tags rep-resent subgroupings of annotation types, while the?entity?
and ?relation?
tags each define a differentEntity or Relation annotation.
The ?type?
attributedefines the name of the annotation type, the ?color?attribute defines the displayed color of this annota-tion in the Anafora interface, and the ?hotkey?
at-tribute is the key which triggers creation of that an-15Figure 2: Anafora Data File Examplenotation in Anafora.For each type, the properties to be annotated arelisted under ?Property?, where the ?type?
attributeindicates the name of the property, while the ?input?attribute specifies the manner of attribute selectionor entry.
The value of the ?Property?
is a list of ac-cepted choices.
For example, the ?Type?
propertyin the ?Event?
entity limits the value to ?N/A?
or?ASPECTUAL?, where ?N/A?
is the default.
Pleaserefer to the Guidelines for further detail.One great advantage of this XML-based schemaformat is greater flexibility than existing tools bothin schema and modification.
To make any modi-fication to the schema, one simply edits the XMLand the revised schema will apply to any new datafiles.
Another advantage is human-readability, al-lowing schemas to be easily understood and portedfrom other tools.3.2 Data FileThe Anafora data file (see Fig.
2) stores the anno-tation instances for each annotated file.
It, like theSchema file, uses an XML format.The ?info?
section provides the basic informationfor the file, such as the save time and annotationcompletion status.
The ?schema?
tag specifies thepath to the schema file used for annotation.
Fol-lowing is the ?annotation.?
Each ?entity?
and ?re-lation?
element represents an annotation instance.Every annotation has a unique ?id?, and the anno-tation ?type?
and ?parentType?.
For Entity annota-tions, the text?s span is given using character offsetsin the source file.
For all annotations, the ?property?section specifies the values for properties listed inthe schema, and, for Relations, properties are used(?Source?
and ?Target?
above) to point to the uniqueIDs of the annotations being linked.4 System OverviewAnafora is a web-based tool, developed usingDjango (a Python framework on server side) andjQuery (a JavaScript library on client side).
On theserver side, our system manages file storage and useraccess control.
By avoiding the use of any database,Anafora is very agile and flexible, and most of thecomputing work is executed by the user?s browser.And, because modern browsers have done an ex-cellent job tuning JavaScript execution, Anafora islightweight on the user?s machine as well.
Anafora?sbrowser-based design also allows the tool to run wellon any OS with a web browser, alleviating the cross-platform issues common with other tools.Anafora allows both keyboard- and mouse-basedannotation, improving both efficiency and imme-diate familiarity, rather than relying primarily onmouse-clicks.Anafora also assists project supervisors in severalways.
First, all data management is file-based, andthe project hierarchy is reflected in the OS level filesystem?s directory structure.
Secondly, Anafora as-signs tasks to annotators automatically, saving su-pervisors the time and hassle of task assignment.
Fi-nally, Anafora makes pre-annotation extremely easy.By running the document text through a shallowparser and generating a file which marks all nounphrases (for example), annotators could start theirwork on a named entity task with this informationready at hand.Anafora allows users to customize their own userinterface by overriding the CSS file on the clientside.
By changing the CSS file, users can modifythe apperance, e.g., color, font, and page layout.5 Project Creation and AdministrationAdministering and creating new projects is straight-forward, and primarily file based.
To create a newproject, one first uses our schema markup to writean XML schema designating the entities, relations,16and annotation properties needed in the schema (seeSection 3).
Then, a folder is created for the project,containing folders for any subcorpora, and then fi-nally each document is placed into its own folder asa plaintext file.
At this point, annotators with thenecessary permissions may select the new schemaand documents and begin annotating.A given document?s assignments and completionstatus is read entirely from the filenames generatedby the program.
To re-assign a set manually, sim-ply change the annotator?s name in the existing an-notation file?s name, or delete the previous annota-tion file, allowing Anafora to reassign it automati-cally.
Administrators can view any annotator?s workthrough the tool?s interface, and can edit the XML atany time.
When a document is fully annotated or ad-judicated, preparing for release is as easy as copyingthe .gold.
file and source text into the final destina-tion.6 Annotation using AnaforaWhen an annotator opens Anafora in any webkit-based browser and logs in, they are greeted with afile-choosing interface which allows them to pickwhich corpus, annotation schema and annotationtype (Entity or Relation) they?d like to work on forthe session (allowing one annotator to easily workwith more than one project or schema).
Previouslycompleted and in-progress sets are shown in sepa-rate columns for easy access, and only documentswhich have fewer than the maximum number of an-notators are displayed.
Annotators are not able toopen or view any annotations other than their own.Once a document is opened, the annotator is pre-sented with Anafora?s 3-pane view (in Fig.
3): onthe left, the annotation schema, in the center, thesource text, and on the right, annotation details.
Toproceed with an Entity annotation, the annotator se-lects a word or portion of text and hits a pre-definedhotkey, triggering the creation of a new annotationof a specified type, using the selected span.The properties of the annotation are then automat-ically filled in with the default values specified in theschema files, and the annotator can then go back into modify these properties (by drop-down menu, ra-dio buttons, relation or free-text entry) as needed.The annotator can also use the span editing tools toeither modify the span character-by-character, or toadd a second, disjoint span by selecting more textand using the ?+?
button.For Relation annotation, the annotator will enablethe Relation grid, displaying a list of relations in or-der of occurrence in the text.
To create a new re-lation, the annotator strikes the proper hotkey, andthen Anafora hides all entities which are not allowedto fill slots in this relation.
Clicking an entity afterpressing ?1?
fills the first slot, and pressing ?2?
be-fore a click fills the second slot.
As with Entity anno-tations, properties are filled in according to defaultvalues in the schema and can be edited as needed.Annotators can choose to manually save and logout at any point, and when an annotator has com-pleted a document, he or she selects ?Mark as Com-pleted?, which changes the file?s status and queues itup for adjudication.6.1 AdjudicationWhen a designated adjudicator logs into Anafora,they?re presented with the ?Adjudication?
annota-tion type option in the initial document selectionscreen.
When this is selected, only documents withtwo completed annotator-copies are displayed asavailable for adjudication.Once an available document is opened, Anaforawill automatically merge the two annotators?
workinto a new, adjudication datafile (preserving the sep-arate annotations), and then mark as gold any an-notations matching for both span and properties.
Inaddition, Anafora will mark as conflicting any anno-tation pairs with either 1) matching properties andoverlapping spans or 2) identical spans and differentproperties.
Anafora then displays the schema andsource documents as before along with two anno-tation detail panes, one for each annotator in a con-flicting annotation.
A progress bar displays the num-ber of gold annotations out of the total number inthe document, and again, progress is automaticallysaved.The adjudicator can then use the keyboard tomove through the unadjudicated (non-Gold) anno-tations.
When an annotation with a conflict isfound, details about both annotations will show upon the right, highlighting in red any areas whichdiffer (span, a property, etc).
The adjudicator canthen use the arrow keys to select either the left17Figure 3: Anafora Annotation Windowor right annotation as Gold, which will delete theother.
For single-annotator annotations, the adjudi-cator can choose to simply delete or mark as Gold.Once no unadjudicated annotations remain in thedocument and any necessary edits or additions aremade, the adjudicator can mark the document ascompleted, which changes all annotations?
status to?Gold?
and, where required, makes the documentavailable to the next round of annotation.7 Conclusion and Future WorkAnafora can be extended readily to offer other clas-sification tasks such as part-of-speech tags or sensetags.
However, there are a couple of limitations.First, tree-based annotation, much like constituent-based semantic role labeling, is not currently sup-ported in Anafora.
Additional text information (e.g.Frame files and WordNet ontologies) is difficult todisplay in the same page as the annotations, as thetool was designed for whole-text annotation.
Somecomplicated schema definitions, such as relations (orrelation properties) linking to relations, are also notprovided.We are continuing active development (focusingon annotation efficiency and UX design) as moreprojects with varied needs use Anafora.
Perfor-mance studies and comparisons are currently inprogress.
Furthermore, an administrator interface,including annotator management, task status man-agement, and schema editor, will be supplied.
Inaddition, automated pre-annotation is being incor-porated into Anafora-based workflows.
We will alsoallow comparison of annotators?
work to extractedannotation characteristics from gold data and fromeach annotator?s prior work.
We would also liketo include active learning and allow annotators tocompare their completed annotations to gold stan-dard data.
These features should help to improve thelearning and annotation efficiency of the annotators.Anafora is a lightweight and efficient tool fortext annotation, easily adaptable to fit even themost complex of annotation tasks and schemas.Source code is available at our GitHub page,https://github.com/weitechen/anafora.AcknowledgmentsThe development of this annotation tool wassupported by award numbers NLM R0110090(THYME) and 90TR002 (SHARP), as well asDARPA FA8750-09-C-0179 (via BBN) MachineReading.
The content is solely the responsibility ofthe authors and does not necessarily represent the of-ficial views of the NLM/NIH or DARPA.
We wouldalso like to especially thank Jinho Choi for his inputon the data format, schemas, and UI/UX.18ReferencesDaniel Albright, Arrick Lanfranchi, Anwen Fredrik-sen, William Styler, Collin Warner, Jena Hwang,Jinho Choi, Dmitriy Dligach, Rodney Nielsen, JamesMartin, Wayne Ward, Martha Palmer, and GuerganaSavova.
2013.
Towards comprehensive syntactic andsemantic annotations of the clinical narrative.
Jour-nal of the American Medical Informatics Association.2013;0:1-9. doi: 10.1136/amiajnl-2012-001317.Philip V. Ogren.
2006.
Knowtator: A prote?ge?
plug-in for annotated corpus construction.
In Proceedingsof the NAACL-HLT, Companion Volume: Demonstra-tions, pages 273?275, New York City, USA, June.
As-sociation for Computational Linguistics.Brett R. South, Shuying Shen, Jianwei Leng, Tyler B.Forbush, Scott L. DuVall, and Wendy W. Chapman.2012.
A prototype tool set to support machine-assistedannotation.
In Proceedings of the 2012 Workshopon Biomedical Natural Language Processing, BioNLP?12, pages 130?139, Stroudsburg, PA, USA.
Associa-tion for Computational Linguistics.Pontus Stenetorp, Sampo Pyysalo, Goran Topic?, TomokoOhta, Sophia Ananiadou, and Jun?ichi Tsujii.
2012.Brat: a web-based tool for nlp-assisted text annotation.In Proceedings of the Demonstrations at EACL-2012,pages 102?107, Avignon, France, April.
Associationfor Computational Linguistics.19
