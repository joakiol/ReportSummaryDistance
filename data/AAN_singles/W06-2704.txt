Towards an Alternative Implementation of NXT?s Query Language viaXQueryNeil Mayo, Jonathan Kilgour, and Jean CarlettaUniversity of EdinburghAbstractThe NITE Query Language (NQL) hasbeen used successfully for analysis of anumber of heavily cross-annotated datasets, and users especially value its ele-gance and flexibility.
However, when us-ing the current implementation, many ofthe more complicated queries that usershave formulated must be run in batchmode.
For a re-implementation, we re-quire the query processor to be capableof handling large amounts of data at once,and work quickly enough for on-line dataanalysis even when used on complete cor-pora.
Early results suggest that the mostpromising implementation strategy is onethat involves the use of XQuery on a mul-tiple file data representation that uses thestructure of individual XML files to mirrortree structures in the data, with redundancywhere a data node has multiple parents inthe underlying data object model.1 IntroductionComputational linguistics increasingly requiresdata sets which have been annotated for many dif-ferent phenomena which relate independently tothe base text or set of signals, segmenting the datain different, conflicting ways.
The NITE XMLToolkit, or NXT (Carletta et al, 2003), has beenused successfully on a range of text, spoken lan-guage, and multimodal corpora to provide andwork with data of this character.
Because the orig-inal motivation behind it was to make up for adearth of tools that could be used to hand-annotateand display such data, the initial implementationof data search was required to work well on onedata observation at a time ?
that is, one text, dia-logue, or other language event ?
and to be usablebut slow on multiple observations.
However, theclear and flexible design of NXT?s query language,NQL (Heid et al, 2004; Carletta et al, in press),makes it attractive for larger-scale data analysis,and a number of users have up-translated exist-ing data for the express purpose of improving theirsearch options.We are now in the process of devising a strategyfor re-implementing the NQL processor to servethe needs of this class of user better.
In this paper,we describe our requirements for the new imple-mentation, outline the various implementation op-tions that we have, and give early results suggest-ing how well they meet our requirements.
NQLis arguably the most mature of the current special-purpose facilities for searching data sets where thedata is not structured as a single tree, and there-fore experiences with implementing it are likelyto provide lessons for search facilities that are stillto come.2 NXT and the NITE Query LanguageNXT is designed specifically for data sets withmultiple kinds of annotation.
It requires data to berepresented as a set of XML files related to eachother using stand-off links, with a ?metadata?
filethat provides two things: a catalogue of files con-taining the audio or video signals used to capturean observation together with the annotations thatdescribe them, and a specification of the corpusdesign that describes the annotations and how theyrelate to each other and to signal.
Text corporaare treated as signal-less, with the text as a baselevel of ?annotation?
to which other annotationscan point.
Given data of this type, NXT providesJava libraries for data modelling and search as well27as for building graphical user interfaces that can beused to display annotations in synchrony with thesignals.
NXT also comes with a number of fin-ished GUIs for common tasks, some of which arespecific to existing data sets and some of whichare configurable to new corpus designs.
NXT sup-ports data exploration using a search GUI, callablefrom any tool, that will run an NQL query andhighlight results on the tool?s display.
Data searchis then usually done using one of a battery of com-mand line utilities, that, for instance, count resultsmatching a given query or provide tab-delimitedoutput describing the query matches.Because the data model and query language fora tool are critical to our implementation choices,we briefly describe them, as well as the currentNQL implementation.2.1 NXT?s data handlingIn NXT, annotations are described by types andattribute value pairs, and can relate to a synchro-nized set of signals via start and end times, torepresentations of the external environment, andto each other.
Annotations can describe the be-haviour of a single ?agent?, if more than one par-ticipant is involved for the genre being coded, orthey can describe the entire language event; thelatter possibility is used for annotating written textas well as for interaction within a pair or groupof agents.
The data model ties the annotationstogether into a multi-rooted tree structure that ischaracterized by both temporal and structural or-derings.
Additional relationships can be overlaidon this structure using pointers that carry no order-ing implications.
The same basic data objects thatare used for annotations are also used to build setsof objects that represent referents from the realworld, to structure type ontologies, and to provideaccess to other external resources stored in XML,resulting in a rich and flexible system.Data is stored in a ?stand-off?
XML representa-tion that uses the XML structure of individual filesto mirror the most prominent trees in the data it-self, forming ?codings?
of related annotations, andpointers between files (represented by XLinks)for other relationships.
For example, the markup<nt nite:start="1.8" nite:end="2.3"cat="NP" nite:id="s1 506" wc="2"><nite:child href="a1.words.xml#id(s1 6)"/><nite:child href="a1.words.xml#id(s1 7)"/></nt>represents a noun phrase in a syntactic tree,pointing to two words in a different file which con-stitute the content of that syntactic structure.This has the useful properties of allowing cor-pus subsets to be assembled as needed; making iteasy to import annotations without perturbing therest of the data set; and keeping each individualfile simple to use in external processing.
For in-stance, the words for a single speaker can be storedin a single file that contains no other data, mak-ing it easy to pass through to a part-of-speech tag-ger.
NXT itself provides transparent corpus-wideaccess to the data, and so tool users need not un-derstand how the data is stored.
A ?metadata?
filedefines the structures of the individual files andthe relationships among them, as well as detail-ing where to find the data and signals on the filesystem.2.2 NXT?s query languageSearch is conducted in NXT by means of a dedi-cated query language, NQL.
A simple query findsn-tuples of data objects (annotations and objects)that satisfy certain conditions.
The query expres-sion consists of two parts, separated by a colon (:).In the first part, variables representing the data ob-jects are declared.
These either match all data ob-jects (e.g.
?($x)?
for a variable named ?$x?)
or areconstrained to draw matches from a designated setof simple types (e.g.
?
($w word ?
sil)?, matchingdata objects of the simple types ?word?
or ?sil?
).The second part of the query expression specifiesa set of conditions that are required to hold for amatch, which are combined using negation (logi-cal not, ?!?
), conjunction (logical and, ?&&?
), anddisjunction (logical or, ???).
Queries return a struc-ture that for each match lists the variables and ref-erences the data objects they matched.NQL has operators that allow match conditionsto be expressed for each of the essential propertiesof a data object such as its identity, its attribute-value pairs, its textual content, its timing, and itsrelationships via the two types of structural links(child and pointer).
The attribute and textual con-tent tests include the ability to match against eitherthe existence or the value of the attribute.Attribute values or textual content can be testedagainst explicit values or values of other attributes,using equality, inequality, and the usual orderingtests (conventionally represented as <, <=, >=,and >).
String values can also be tested against28regular expressions.The temporal operators include the ability totest whether a data object has timing information,and to compare the start or end time with a givenpoint in time.
The query language also has opera-tors to test for some common timing relationshipsbetween two data objects, such as overlap.The structural operators test for dominance,precedence, and pointer relationships.
Precedencecan be tested against all of the orderings in theoverlapping annotations.In addition, identity tests can be used to avoidmatches where different variables point to thesame data object.
It is also possible in NQL to?bind?
variables within the query using existential(?exists?)
and universal (?forall?)
quantifiers in thevariable declarations (which have the same mean-ing as in first-order logic).
Such bound variablesare not returned in the query result.NXT also supports the sequencing of queriesinto a ?complex?
query using a double colon (::)operator.
The results for a complex query are re-turned not as a flat list but as a tree structure.
Forexample, in a corpus of timed words from twospeakers, A and B,($wa word):($wa@agent = "A")::($wb word):($wb@agent="B") && ($waoverlaps.with $wb)will return a tree showing word overlaps; under-neath each top level node, representing an overlap-ping word from speaker A, will be a set of nodesrepresenting the words from speaker B that over-lap that word of speaker A.2.3 Comparison to other search facilitiiesThe kinds of properties that linguists wish to usein searching language data are cumbersome to ex-press in general-purpose query languages.
Forthis reason, there are a number of other querylanguages designed specifically for language cor-pora, some of which are supported by implemen-tation.
LPath (Bird et al, 2006) and tgrep2 (Ro-hde, nd) assume the data forms one ordered tree.TigerSearch (Tiger Project, nd) is primarily forsingle trees, but does allow some out-of-tree re-lationships; the data model includes ?secondaryedges?
that link a node to an additional parent andthat can be labelled, with query language opera-tors that will test for the presence or absence ofsuch an edge, with or without a specific label.
AT-LAS (National Institute of Standards and Technol-ogy, 2000) intends a query language over richerstructures, but the structures and query languageare still under development.3 RequirementsWe already have a successful NQL implementa-tion as part of NXT, NXT Search.
However, asalways, there are a number of things that couldbe improved about it.
We are considering a re-implementation with the following aims in mind:Faster query execution.
Although many queriesrun quite quickly in NXT Search, more com-plicated queries can take long enough to ex-ecute on a large corpus that they have to bescheduled overnight.
This is partially dueto the approach of checking every possiblecombination of the variables declared in thequery, resulting in a large search space forsome queries.
Our aim is to have the vastmajority of queries that exploit NXT?s multi-rooted tree structure run quickly enough onsingle observations that users will be happyto run them in an interactive GUI environ-ment.The ability to load more data.
NXT loads datainto a structure that is 5-7 times the size ofthe data on disk.
A smaller memory repre-sentation would allow larger data sets to beloaded for querying.
Because it has a ?lazy?implementation that only loads annotationswhen they are required, the current perfor-mance is sufficient for many purposes, as thisallows all of the annotations relating a singleobservation to be loaded unless the observa-tion is both long and very heavily annotated.It is too limited (a) when the user requires aquery to relate annotations drawn from dif-ferent observations, for instance, as a conve-nience when working on sparse phenomena,or when working on multiple-document ap-plications such as the extraction of named en-tities from newspaper articles; (b) for queriesthat draw on very many kinds of annotationall at the same time on longer observations;and (c) when the user is in an interactive en-vironment such as a GUI using a wide rangeof queries on different phenomena.
In the lastcase, our goal could be achieved by memorymanagement that throws loaded data away in-stead of increasing the loading capacity.294 XQuery as a Basis forRe-implementationXQuery (Boag et al, 2005), currently a W3CCandidate Recommendation, is a Turing-completefunctional query/programming language designedfor querying (sets of) XML documents.
It sub-sumes XPath, which is ?a language for addressingparts of an XML document?
(Clark and DeRose,1999).
XPath supports the navigation, selectionand extraction of fragments of XML documents,by the specification of ?paths?
through the XMLhierarchy.
XQuery queries can include a mixtureof XML, XPath expressions, and function calls;and also FLWOR expressions, which provide var-ious programmatical constructs such as for, let,where, orderby and return keywords for loop-ing and variable assignment.
XQuery is designedto make efficient use of the inherent structure ofXML to calculate the results of a query.XQuery thus appears a natural choice for query-ing XML of the sort over which NQL oper-ates.
Although the axes exposed in XPath al-low comprehensive navigation around tree struc-tures, NXT?s object model allows individual nodesto draw multiple parents from different trees thatmake up the data; expressing navigation over thismulti-tree structure can be cumbersome in XPathalone.
XQuery allows us to combine fragments ofXML, selected by XPath, in meaningful ways toconstruct the results of a given query.There are other possible implementation op-tions that would not use XQuery.
The first of thesewould use extensions to the standard XPath axesto query concurrent markup, as has been demon-strated by (Iacob and Dekhtyar, 2005).
We havenot yet investigated this option.The second is to come up with an indexingscheme that allows us to recast the data as a rela-tional database, the approach taken in LPath (Birdet al, 2006).
We chose not to explore this option.It is not difficult to design a relational database tomatch a particular NXT corpus as long as editingis not enabled.
However, a key part of NXT?s datamodel permits annotations to descend recursivelythrough different layers of the same set of datatypes, in order to make it easy to represent thingslike syntax trees.
This makes it difficult to build ageneric transform to a relational database - such atransform would need to inspect the entire data setto see what the largest depth is.
It also makes it im-possible to allow editing, at least without placingsome hard limit on the recursion.
It is admittedlytrue that any strategy based on XQuery will alsobe limited to static data sets for the present, butupdate mechanisms for XQuery are already begin-ning to appear and are likely to become part ofsome future standard.5 Implementation StrategyIn our investigation, we compare two possible im-plementation strategies to NXT Search, our exist-ing implementation.5.1 Using NXT?s stand-off formatThe first strategy is to use XQuery directly onNXT?s stand-off data storage format.
The bulk ofthe work here is in writing libraries of XQueryfunctions that correctly interpret NXT?s stand-off child links in order to allow navigation overthe same primary axes as are used in XPath,but with multiple parenthood, and operating overNXT?s multiple files.
The libraries can resolve theXLinks NXT uses both forwards and backwards.Backwards resolution requires functions that ac-cess the corpus metadata to find out which filescould contain annotations that could stand in thecorrect relationship to the starting node.
Built ontop of this infrastructure would be functions whichimplement the NQL operators.Resolving ancestors is a rather expensive opera-tion which involves searching an entire coding filefor links to a node with a specified identity.
Ad-ditionally, if a query includes variables which arenot bound to a particular type, this precludes thepossibility of reducing the search space to particu-lar coding files.A drawback to using XPath to query a hierar-chy which is serialised to multiple annotation files,is that much of the efficiency of XPath expres-sions can be lost through the necessity of resolvingXLinks at every child or parent step of the expres-sion.
This means that even the descendant and an-cestor axes of XPath may not be used directly butmust be broken down into their constituent single-step axes.In addition to providing a transparent interfacefor navigating the data, it may be necessary to pro-vide additional indexing of the data, to increase ef-ficiency and avoid the duplication of calculations.An alternative is to overcome the standoff natureof the data by resolving links explicitly, as de-scribed in the following section.305.2 Using a redundant data representationThe second strategy makes use of the classic trade-off between memory and speed by employing aredundant data representation that is both easy tocalculate from NXT?s data storage format and en-sures that most of the navigation required exer-cises common parts of XPath, since these are theoperations upon which XQuery implementationswill have concentrated their resources.The particular redundancy we have in mind re-lies on NXT?s concept of ?knitting?
data.
InNXT?s data model, every node may have multi-ple parents, but only one set of children.
Wheremultiple parents exist, at most one will be in thesame file as the child node, with the rest connectedby XLinks.
?Knitting?
is the process of startingwith one XML file and recursively following chil-dren and child links, storing the expanded resultas an XML file.
The redundant representation weused is then the smallest set of expanded files thatcontains within it every child link from the origi-nal data as an XML child.
.Although this approach has the advantage of us-ing XPath more heavily than our first approach,it has the added costs of generating the knitteddata and handling the redundancy.
The knittingstylesheet that currently ships with NXT is veryslow, but a very fast implementation of the knit-ting process that works with NXT format data hasbeen developed and is expected as part of an up-coming LTXML release (University of EdinburghLanguage Technology Group, nd).
The cost ofdealing with redundancy depends on the branch-ing structure of the corpus.
To date, most corporawith multiple parenthood have a number of quiteshallow trees that do not branch themselves but allpoint to the same few base levels (e.g.
orthogra-phy), suggesting we can at least avoid exponentialexpansion.6 TestsFor initial testing, we chose a small set of querieswhich would allow us to judge potential imple-mentations in terms of whether they could do ev-erything we need to do, whether they would givethe correct results, and how they would performagainst our stated requirements.
This allows us toform an opinion whilst only writing portions of thecode required for a complete NQL implementa-tion.
Our set of queries is therefore designed to in-volve all of the basic operations required to exploitNXT?s ability to represent multi-rooted trees andto traverse a large amount of data, so that they arecomputationally expensive and could return manyresults.
In the tests, we ran the queries over theNXT translation for the Penn Treebank syntax an-notated version of one Switchboard dialogue (Car-letta et al, 2004), sw4114.
The full dialogue is ap-proximately 426Kb in physical size, and containsover 1101 word elements.6.1 Test queriesOur test queries were as follows.?
Query 1 (Dominance):(exists $e nt)($w word):$e@cat="NP" && $e?$w(words dominated by an NP-category nt)?
Query 2 (Complex query with precedenceand dominance):($w1 word)($w2 word):TEXT($w1)="the" && $w1<>$w2::(exists $p nt): $p@cat="NP"&& $p?$w1 && $p?$w2(word pairs where the word ?the?
precedesthe second word with respect to a commonNP dominator)?
Query 3 (Eliminative):($a word)(forall $bturn):!
($b?$a)(words not dominated by any turn)In the data, the category ?nt?
represents syntac-tic non-terminals.
The third query was chosen be-cause it is particularly slow in the current NQL im-plementation, but is easily expressed as a path andtherefore is likely to execute efficiently in XPathimplementations.Although NXT?s object model also allows forarbitrary relationships between nodes using point-ers with named roles, increasing speed for queriesover them is only a secondary concern, and weknow that implementing operators over them ispossible in XQuery because it is very similar to re-solving stand-off child links.
For this reason, noneof our test queries involve pointers.6.2 Test environmentFor processing XQuery, we used Saxon(www.saxonica.com), which provides an APIso that it can be called from Java.
There are31several available XQuery interpreters, and theywill differ in their implementation details.
Wechose Saxon because it appears to be mostcomplete and is well-supported.
Alternativeinterpreters, Galax (www.galaxquery.org) andQexo (www.gnu.org/software/qexo/), providedonly incomplete implementations at the time ofwriting.6.3 Comparability of resultsIt is not possible in a test like this to produce com-pletely comparable results because the differentimplementation strategies are doing very differentthings to arrive at their results.
For example, con-sider our second query.
Apart from some primitiveoptimizations, on this and all queries, NXT Searchdoes an exhaustive search of all possible k-tuplesthat match the types given in the query, varyingthe rightmost variable fastest.
Our XQuery imple-mentation on stand-off data first finds matches to$w1, $w2, and $np; then calls a function that cal-culates the ancestries for matches to $w1 and $w2;for each ($w1, $w2) pair, computes the intersec-tion of the two ancestries; and finally filters thisintersection against the list of $np matches.On the other hand, the implementation on theknitted data is shown in figure 1.
It first sets vari-ables representing the XML document containingour knitted data and all distinct nt elements withinthat document which both have a category at-tribute ?NP?
and have further word descendants.It then sets a variable to represent the sequence ofresults.
The results are calculated by taking eachNP-type element and checking its word descen-dants for those pairs where a word ?the?
precedesanother word.
The implementation also appliesthe condition that the NP-type element must nothave another NP element as an ancestor ?
thisis to remove duplicates introduced by the way wefind the initial set of NPs.In addition to the execution strategies, the meth-ods used to start off processing were quite differ-ent.
For each of the implementations, we did what-ever gave the best performance.
For the XQuery-based implementations, this meant writing a Javaclass to start up a static context for the executionof the query and reusing it to run the query repeat-edly.
For NXT, it meant using a shell script to runthe command-line utility SaveQueryResultsrepeatedly on a set of observations, exiting eachtime.Figure 1: An XQuery rewritten for knitted data;containing more direct XPath expressions.let $doc := doc(?data/knitted/swbd/sw4114.syntax.xml?
),$nps := $doc//nt[@cat=?NP?
][descendant::word] union (),$result := (for $np in $nps return (let $w2 := $np//word, $w1 := $w2[text()=?the?
]for $a in $w1, $b in $w2where (struct:node-precedes($a, $b)and not($np/ancestor::nt[@cat=?NP?
]))(: only return for the uppermost common NP ancestor :)return (element match {$a, $b}))) union ()return element result {attribute count count($result), $result}Our aim in performing the comparison is to as-sess what is possible in each approach rather thanto do the same thing in each, and this is whywe have attempted to achieve best possible per-formance in each context rather than making theconditions as similar as possible.
In all cases, thefigures we report are the mean timings over fiveruns of what the Linux time command reports as?real?
time.7 Speed ResultsThe results of our trial are shown in the follow-ing table.
Timings which are purely in secondsare given to 2 decimal places; those which extendinto the minutes are given to the nearest second.?NXT?
means NXT Search; ?XQ?
is the condi-tion with XQuery using stand-off data; and ?XQ-K?
is the condition with XQuery using the redun-dant knitted data.QueryImplQ1 Q2 Q3NXT 3.38s 1m24 18.25sXQ 10.21s 3m24 14.42sXQ-K 2.03s 2.17s 2.47sAlthough it would be wrong to read too muchinto our simple testing, these results do suggestsome tentative conclusions.
The first is that us-ing XQuery on NXT?s stand-off data format isunlikely to increase execution speed except forqueries that are computationally very expensivefor NXT, and may decrease performance for otherqueries.
If users show any tolerance for delays,it is more likely to be for the delays to the for-mer, and therefore this does not seem a winning32strategy.
On the other hand, using XQuery on theknitted data provides useful (and sometimes im-pressive) gains across the board.It should be noted that our results are basedupon a single XQuery implementation and areinevitably implementation-specific.
Future workwill also attempt to make comparisons with al-ternatives, including those provided by XMLdatabases.7.1 Memory resultsTo explore our second requirement, the ability toload more data, we generated a series of corporawhich double in size from an initial set of 4 chil-dren with 2 parents.We ran both NXT Search and XQuery in Saxonon these corpora, with the Java Virtual Machineinitialised with increasing amounts of memory,and recorded the maximum corpus size each wasable to handle.
Both query languages were exer-cised on NXT stand-off data, with the simple taskof calculating parent/child relationships.
Resultsare shown in the following table.Max corpus size(nodes, disk space)Mem Mb NXT XQuery/Saxon500 3 ?
217, 28Mb 3 ?
219, 111Mb800 3 ?
218, 56Mb 3 ?
220, 224Mb1000 3 ?
218, 56Mb 3 ?
220, 224MbThese initial tests suggest that at its best, theXQuery implementation in Saxon can managearound 4 times as much data as NXT Search.
Itis interesting to note that the full set of tests tookabout 19 minutes for XQuery, but 18 hours forNXT Search.
That is, Saxon appears to be farmore efficient at managing large data sets.
Wealso discovered that the NXT results were differ-ent when a different query was used; we hope toelaborate these results more accurately in the fu-ture.We did not specifically run this test on the im-plementation that uses XQuery on knitted data be-cause the basic characteristics would be the sameas for the XQuery implementation with stand-offdata.
The size of a knitted data version will de-pend on the amount of redundancy that knittingcreates.
Knitting has the potential to increase theamount of memory required greatly, but it is worthnoting that it does not always do so.
The knit-ted version of the Switchboard dialogue used forthese tests is actually smaller than the stand-offversion, because the original stand-off stores ter-minals (words) in a separate file from syntax treeseven though the terminals are defined to have onlyone parent.
That is, there can be good reasons forusing stand-off annotation, but it does have its owncosts, as XLinks take space.7.2 Query rewritingIn the testing described far, we used the existingversion of NXT Search.
Rather than writing a newquery language implementation, we could just in-vest our resources in improvement of NXT Searchitself.
It is possible that we could change the un-derlying XML handling to use libraries that aremore memory-efficient, but this is unlikely to givereal scalability.
The biggest speed improvementscould probably be made by re-ordering terms be-fore query execution.
Experienced query authorscan often speed up a query if they rewrite the termsto minimize the size of the search space, assumingthey know the shape of the underlying data set.Although we do not yet have an algorithm for thisrewriting, it roughly involves ignoring the ?exists?quantifier, splitting the query into a complex onewith one variable binding per subquery, sequenc-ing the component queries by increasing order ofmatch set size, and evaluating tests on the earli-est subquery possible.
For example, consider thequery($w1 word):text($w1)="the" ::($p nt):$p@cat eq "NP" && $p?$w1 ::($w2 word): $p?$w2 && $w1<>$w2This query, which bears a family resemblanceto query 2, takes 4.31s, which is a considerableimprovement.
Of course, the result tree is a dif-ferent shape from the one specified in the origi-nal query, and so this strategy for gaining speedimprovements would incur the additional cost ofrewriting the result tree after execution.7.2.1 DiscussionOur testing suggests that if we want to makespeed improvements, creating a new NQL imple-mentation that uses XQuery on a redundant datarepresentation is a good option.
Although notthe result we initially expected, it is perhaps un-surprising.
This XQuery implementation strat-egy draws more heavily on XPath than the stand-off strategy, and XPath is the most well-exercisedportion of XQuery.
The advantages do not justcome from recasting our computations as opera-tions over trees.
XPath allows us, for instance, to33write a single expression that both binds a vari-able and performs condition tests on it, rather thanrequiring us to first bind the variable and thenloop through each combination of nodes to deter-mine which satisfy the constraints.
Using a re-dundant data representation increases memory re-quirements, but the XQuery-based strategies useenough less memory that the redundancy in itselfwill perhaps not be an issue.
In order to settle thisquestion, we must think more carefully about thesize and shape of current and potential NXT cor-pora.Our other option for making speed improve-ments is to augment NXT Search with a queryrewriting strategy.
This needs further evalua-tion because the improvements will vary widelywith the query being rewritten, but our initial testworked surprisingly well.
However, augmentingthe current NXT Search in this way will not reduceits memory use, and it is not clear whether this im-provement can readily be made by other means.AcknowledgmentsThis work has been funded by a grant from Scot-tish Enterprise via the Edinburgh-Stanford Link.We are grateful to Stefan Evert for designing NQLand for discussing its specification with us, andto Jan-Torsten Milde and Felix Sasaki for mak-ing available to us their own initial experimentssuggesting that this re-implementation would beworth attempting.References[Bird et al2006] Steven Bird, Yi Chen, Susan David-son, Haejoong Lee, and Yifeng Zheng.
2006.
De-signing and evaluating an XPath dialect for linguis-tic queries.
In 22nd International Conference onData Engineering, Atlanta, USA.
[Boag et al2005] Scott Boag, Don Chamberlin,Mary F. Fernandez, Daniela Florescu, JonathanRobie, Jrme Simon, and Mugur Stefanescu.
2005.Xquery 1.0: An XML Query Language, November.http://www.w3.org/TR/xquery/; accessed 18 Jan 06.
[Carletta et al2003] J. Carletta, Stefan Evert, UlrichHeid, Jonathan Kilgour, Judy Robertson, and HolgerVoormann.
2003.
The NITE XML Toolkit: flexibleannotation for multi-modal language data.
Behav-ior Research Methods, Instruments, and Computers,35(3):353?363.
[Carletta et al2004] Jean Carletta, Shipra Dingare,Malvina Nissim, and Tatiana Nikitina.
2004.
Us-ing the NITE XML Toolkit on the Switchboard Cor-pus to study syntactic choice: a case study.
InFourth Language Resources and Evaluation Confer-ence, Lisbon, Portugal.
[Carletta et alin press] J. Carletta, S. Evert, U. Heid,and J. Kilgour.
in press.
The NITE XML Toolkit:data model and query language.
Language Re-sources and Evaluation Journal.
[Clark and DeRose1999] James Clark and SteveDeRose.
1999.
Xml path language (xpath) version1.0, 16 November.
http://www.w3.org/TR/xpath;accessed 18 Jan 06.
[Heid et al2004] Ulrich Heid, Holger Voormann, Jan-Torsten Milde, Ulrike Gut, Katrin Erk, and SebastianPad.
2004.
Querying both time-aligned and hierar-chical corpora with NXT Search.
In Fourth Lan-guage Resources and Evaluation Conference, Lis-bon, Portugal.
[Iacob and Dekhtyar2005] Ionut E. Iacob and AlexDekhtyar.
2005.
Towards a query language formultihierarchical xml: Revisiting xpath.
In EighthInternational Workshop on the Web and Databases(WebDB 2005), Baltimore, Maryland, USA, 16-17June.
[National Institute of Standards and Technology2000]National Institute of Standards andTechnology.
2000.
ATLAS Project.http://www.nist.gov/speech/atlas/; last update 6Feb 2003; accessed 18 Jan 06.
[Rohdend] Doug Rohde.
n.d. Tgrep2.http://tedlab.mit.edu/ dr/Tgrep2/; accessed 18Jan 06.
[Tiger Projectnd] Tiger Project.
n.d. Linguistic inter-pretation of a German corpus.
http://www.ims.uni-stuttgart.de/projekte/TIGER/; last update 17 Nov2003; accessed 1 Mar 2004.
[University of Edinburgh Language Technology Groupnd]University of Edinburgh Language Tech-nology Group.
n.d. LTG Software.http://www.ltg.ed.ac.uk/software/; accessed 18Jan 2006.34
