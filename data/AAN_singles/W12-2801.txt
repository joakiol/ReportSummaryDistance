Workshop on Semantic Interpretation in an Actionable Context, NAACL-HLT 2012, pages 1?6,Montre?al, Canada, June 3-8, 2012. c?2012 Association for Computational LinguisticsLearning to Interpret Natural Language InstructionsMonica Babes?-Vroman+, James MacGlashan?, Ruoyuan Gao+, Kevin Winner?Richard Adjogah?, Marie desJardins?, Michael Littman+ and Smaranda Muresan++?
Department of Computer Science and Electrical EngineeringUniversity of Maryland, Baltimore County+ Computer Science Department, Rutgers University++ School of Communication and Information, Rutgers UniversityAbstractThis paper addresses the problem of trainingan artificial agent to follow verbal instructionsrepresenting high-level tasks using a set of in-structions paired with demonstration traces ofappropriate behavior.
From this data, a map-ping from instructions to tasks is learned, en-abling the agent to carry out new instructionsin novel environments.1 IntroductionLearning to interpret language from a situated con-text has become a topic of much interest in recentyears (Branavan et al, 2009; Branavan et al, 2010;Branavan et al, 2011; Clarke et al, 2010; Chenand Mooney, 2011; Vogel and Jurafsky, 2010; Gold-wasser and Roth, 2011; Liang et al, 2011; Atrzi andZettlemoyer, 2011; Tellex et al, 2011).
Instead ofusing annotated training data consisting of sentencesand their corresponding logical forms (Zettlemoyerand Collins, 2005; Kate and Mooney, 2006; Wongand Mooney, 2007; Zettlemoyer and Collins, 2009;Lu et al, 2008), most of these approaches leveragenon-linguistic information from a situated contextas their primary source of supervision.
These ap-proaches have been applied to various tasks such asfollowing navigational instructions (Vogel and Ju-rafsky, 2010; Chen and Mooney, 2011; Tellex etal., 2011), software control (Branavan et al, 2009;Branavan et al, 2010), semantic parsing (Clarke etal., 2010; Liang et al, 2011) and learning to playgames based on text (Branavan et al, 2011; Gold-wasser and Roth, 2011).In this paper, we present an approach to inter-preting language instructions that describe complexmultipart tasks by learning from pairs of instruc-tions and behavioral traces containing a sequenceof primitive actions that result in these instructionsbeing properly followed.
We do not assume a one-to-one mapping between instructions and primitiveactions.
Our approach uses three main subcom-ponents: (1) recognizing intentions from observedbehavior using variations of Inverse ReinforcementLearning (IRL) methods; (2) translating instructionsto task specifications using Semantic Parsing (SP)techniques; and (3) creating generalized task speci-fications to match user intentions using probabilis-tic Task Abstraction (TA) methods.
We describeour system architecture and a learning scenario.
Wepresent preliminary results for a simplified versionof our system that uses a unigram language model,minimal abstraction, and simple inverse reinforce-ment learning.Early work on grounded language learning usedfeatures based on n-grams to represent the naturallanguage input (Branavan et al, 2009; Vogel andJurafsky, 2010).
More recent methods have reliedon a richer representation of linguistic data, such assyntactic dependency trees (Branavan et al, 2011;Goldwasser and Roth, 2011) and semantic templates(Tellex et al, 2011) to address the complexity of thenatural language input.
Our approach uses a flexi-ble framework that allows us to incorporate variousdegrees of linguistic knowledge available at differ-ent stages in the learning process (e.g., from depen-dency relations to a full-fledged semantic model ofthe domain learned during training).12 System ArchitectureWe represent tasks using the Object-orientedMarkov Decision Process (OO-MDP) formal-ism (Diuk et al, 2008), an extension of Markov De-cision Processes (MDPs) to explicitly capture rela-tionships between objects.
Specifically, OO-MDPsadd a set of classes C, each with a set of attributesTC .
Each OO-MDP state is defined by an unorderedset of instantiated objects.
In addition to these ob-ject definitions, an OO-MDP also defines a set ofpropositional functions that operate on objects.
Forinstance, we might have a propositional functiontoyIn(toy, room) that operates on an objectbelonging to class ?toy?
and an object belonging toclass ?room,?
returning true if the specified ?toy?object is in the specific ?room?
object.
We extendOO-MDPs to include a set of propositional functionclasses (F) associating propositional functions thatdescribe similar properties.
In the context of defin-ing a task corresponding to a particular goal, an OO-MDP defines a subset of states ?
?
S called ter-mination states that end an action sequence and thatneed to be favored by the task?s reward function.Example Domain.
To illustrate our approach, wepresent a simple domain called Cleanup World, a 2Dgrid world defined by various rooms that are con-nected by open doorways and can contain variousobjects (toys) that the agent can push around to dif-ferent positions in the world.
The Cleanup Worlddomain can be represented as an OO-MDP with fourobject classes: agent, room, doorway, and toy, and aset of propositional functions that specify whethera toy is a specific shape (such as isStar(toy)),the color of a room (such as isGreen(room)),whether a toy is in a specific room (toyIn(toy,room)), and whether an agent is in a specific room(agentIn(room)).
These functions belong toshape, color, toy position or agent position classes.2.1 Interaction among IRL, SP and TAThe training data for the overall system is a set ofpairs of verbal instructions and behavior.
For exam-ple, one of these pairs could be the instruction Pushthe star to the green room with a demonstration ofthe task being accomplished in a specific environ-ment containing various toys and rooms of differentcolors.
We assume the availability of a set of fea-tures for each state represented using the OO-MDPpropositional functions descibed previously.
Thesefeatures play an important role in defining the tasksto be learned.
For example, a robot being taughtto move furniture around would have informationabout whether or not it is currently carrying a pieceof furniture, what piece of furniture it needs to bemoving, which room it is currently in, which roomcontains each piece of furniture, etc.
We presentbriefly the three components of our system (IRL, SPand TA) and how they interact with each other dur-ing learning.Inverse Reinforcement Learning.
Inverse Re-inforcement Learning (Abbeel and Ng, 2004) ad-dresses the task of learning a reward function fromdemonstrations of expert behavior and informationabout the state-transition function.
Recently, moredata-efficient IRL methods have been proposed,including the Maximum Likelihood Inverse Rein-forcement Learning (Babes?-Vroman et al, 2011)or MLIRL approach, which our system builds on.Given even a small number of trajectories, MLIRLfinds a weighting of the state features that (locally)maximizes the probability of these trajectories.
Inour system, these state features consist of one of thesets of propositional functions provided by the TAcomponent.
For a given task and a set of sets ofstate features, MLIRL evaluates the feature sets andreturns to the TA component its assessment of theprobabilities of the various sets.Semantic Parsing.
To address the problem ofmapping instructions to semantic parses, we usea constraint-based grammar formalism, Lexical-ized Well-Founded Grammar (LWFG), which hasbeen shown to balance expressiveness with practicallearnability results (Muresan and Rambow, 2007;Muresan, 2011).
In LWFG, each string is associ-ated with a syntactic-semantic representation, andthe grammar rules have two types of constraints: onefor semantic composition (?c) and one for seman-tic interpretation (?i).
The semantic interpretationconstraints, ?i, provide access to a semantic model(domain knowledge) during parsing.
In the absenceof a semantic model, however, the LWFG learnabil-ity result still holds.
This fact is important if ouragent is assumed to start with no knowledge of thetask and domain.
LWFG uses an ontology-based se-mantic representation, which is a logical form repre-2sented as a conjunction of atomic predicates.
For ex-ample, the representation of the phrase green roomis ?X1.is=green, X.P1 = X1, X.isa=room?.
Thesemantic representation specifies two concepts?green and room?connected through a propertythat can be uninstantiated in the absence of a seman-tic model, or instantiated via the ?i constraints tothe property name (e.g, color) if such a model ispresent.During the learning phase, the SP component, us-ing an LWFG grammar that is learned offline, pro-vides to TA the logical forms (i.e., the semanticparses, or the unlabeled dependency parses if no se-mantic model is given) for each verbal instruction.For example, for the instruction Move the chair intothe green room, the semantic parser knows initiallythat move is a verb, chair and room are nouns, andgreen is an adjective.
It also has grammar rules ofthe form S ?
Verb NP PP: ?c1,?i1,1 but it hasno knowledge of what these words mean (that is, towhich concepts they map in the domain model).
Forthis instruction, the LWFG parser returns the logicalform:?
(X1.isa=move, X1.Arg1= X2)move,(X2.det=the)the, (X2.isa=chair)chair,(X1.P1 = X3, P2.isa=into)into, (X3.det=the)the,(X4.isa=green, X3.P2 = X2)green,(X3.isa=room)room?.The subscripts for each atomic predicate in-dicate the word to which that predicate corre-sponds.
This logical form corresponds to thesimplified logical form move(chair1,room1),P1(room1,green), where predicate P1 is unin-stantiated.
A key advantage of this framework is thatthe LWFG parser has access to the domain (seman-tic) model via ?i constraints.
As a result, when TAprovides feedback about domain-specific meanings(i.e., groundings), the parser can incorporate thosemappings via the ?i constraints (e.g., move mightmap to the predicate blockToRoom with a certainprobability).Task Abstraction.
The termination conditionsfor an OO-MDP task can be defined in terms of thepropositional functions.
For example, the Cleanup1For readability, we show here just the context-free back-bone, without the augmented nonterminals or constraints.World domain might include a task that requires theagent to put a specific toy (t1) in a specific room(r1).
In this case, the termination states would bedefined by states that satisfy toyIn(t1, r1) and thereward function would be defined as Ra(s, s?)
={1 : toyIn(ts?1 , rs?1 );?1 : otherwise}.
However,such a task definition is overly specific and cannotbe evaluated in a new environment that contains dif-ferent objects.
To remove this limitation, we defineabstract task descriptions using parametric lifted re-ward and termination functions.
A parametric liftedreward function is a first-order logic expression inwhich the propositional functions defining the re-ward can be selected as parameters.
This repre-sentation allows much more general tasks to be de-fined; these tasks can be evaluated in any environ-ment that contains the necessary object classes.
Forinstance, the reward function for an abstract taskthat encourages an agent to take a toy of a certainshape to a room of a certain color (resulting in a re-ward of 1) would be represented as Ra(s, s?)
= {1 :?ts??toy?rs?
?roomP1(t) ?
P2(r) ?
toyIn(t, r);?1 :otherwise}, where P1 is a propositional functionthat operates on toy objects and P2 is a propositionalfunction that operates on room objects.
An analo-gous definition can be made for termination condi-tions.
Given the logical forms provided by SP, TAfinds candidate tasks that might match each logi-cal form, along with a set of possible groundingsof those tasks.
A grounding of an abstract task isthe set of propositional functions to be applied tothe specific objects in a given training instance.
TAthen passes these grounded propositional functionsas the features to use in IRL.
(If there are no can-didate tasks, then it will pass all grounded proposi-tional functions of the OO-MDP to IRL.)
When IRLreturns a reward function for these possible ground-ings and their likelihoods of representing the true re-ward function, TA determines whether any abstracttasks it has defined might match.
If not, TA willeither create a new abstract task that is consistentwith the received reward functions or it will modifyone of its existing definitions if doing so does notrequire significant changes.
With IRL indicating theintended goal of a trace and with the abstract task in-dicating relevant parameters, TA can then inform SPof the task/domain specific meanings for the logicalforms.3A Learning from Scratch Scenario.
Our sys-tem is trained using a set of sentence?trajectorypairs ((S1, T1), ..., (SN , TN )).
Initially, the sys-tem does not know what any of the words meanand there are no pre-existing abstract tasks.
Let?sassume that S1 is Push the star into the greenroom.This sentence is first processed by the SP com-ponent, yielding the following logical forms: L1is push(star1, room1), amod(room1, green) andL2 is push(star1), amod(room1, green),into(star1, room1).
These logical forms andtheir likelihoods are passed to the TA compo-nent, and TA induces incomplete abstract tasks,which define only the number and kinds of ob-jects that are relevant to the corresponding re-ward function.
TA can send to IRL a set offeatures involving these objects, together with T1,the demonstration attached to S1.
This set offeatures might include: agentTouchToy(t1),toyIn(t1, r1), toyIn(t1, r2), agentIn(r1).
IRLsends back a weighting of the features, and TAcan select the subset of features that have thehighest weights (e.g, (1.91, toyIn(t1, r1)), (1.12,agentTouchToy(t1)), (0.80, agentIn(r1)).
Us-ing information from SP and IRL, TA can now createa new abstract task, perhaps called blockToRoom,adjust the probabilities of the logical forms based onthe relevant features obtained from IRL, and sendthese probabilities back to SP, enabling it to adjustits semantic model.The entire system proceeds iteratively.
While it isdesigned, not all features are fully implemented tobe able to report experimental results.
In the nextsection, we present a simplified version of our sys-tem and show preliminary results.3 A Simplified Model and ExperimentsIn this section, we present a simplified version of oursystem with a unigram language model, inverse rein-forcement learning and minimal abstraction.
We callthis version Model 0.
The input to Model 0 is a setof verbal instructions paired with demonstrations ofappropriate behavior.
It uses an EM-style algorithm(Dempster et al, 1977) to estimate the probabilitydistribution of words conditioned on reward func-tions (the parameters).
With this information, whenthe system receives a new command, it can behavein a way that maximizes its reward given the pos-terior probabilities of the possible reward functionsgiven the words.Algorithm 1 shows our EM-style Model 0.
Forall possible reward?demonstration pairs, the E-stepof EM estimates zji = Pr(Rj |(Si, Ti)), the prob-ability that reward function Rj produced sentence-trajectory pair (Si, Ti), This estimate is given by theequation below:zji = Pr(Rj |(Si, Ti)) =Pr(Rj)Pr(Si, Ti)Pr((Si, Ti)|Rj)=Pr(Rj)Pr(Si, Ti)Pr(Ti|Rj)?wk?SiPr(wk|Rj)where Si is the ith sentence, Ti is the trajectorydemonstrated for verbal command Si, and wk is anelement in the set of all possible words (vocabulary).If the reward functions Rj are known ahead of time,Pr(Ti|Rj) can be obtained directly by solving theMDP and estimating the probability of trajectory Tiunder a Boltzmann policy with respect to Rj .
If theRjs are not known, EM can estimate them by run-ning IRL during the M-step (Babes?-Vroman et al,2011).The M-step in Algorithm 1 uses the current esti-mates of zji to further refine the probabilities xkj =Pr(wk|Rj):xkj = Pr(wk|Rj) =1X?wk?Si Pr(Rj |Si) + ?iN(Si)zji + where  is a smoothing parameter, X is a normalizingfactor andN(Si) is the number of words in sentenceSi.To illustrate our Model 0 performance, we se-lected as training data six sentences for two tasks(three sentences for each task) from a dataset wehave collected using Amazon Mechanical Turk forthe Cleanup Domain.
We show the training datain Figure 1.
We obtained the reward function foreach task using MLIRL, computed the Pr(Ti|Rj),then ran Algorithm 1 and obtained the parametersPr(wk|Rj).
After this training process, we pre-sented the agent with a new task.
She is given theinstruction SN : Go to green room.
and a startingstate, somewhere in the same grid.
Using parame-ters Pr(wk|Rj), the agent can estimate:4Algorithm 1 EM-style Model 0Input: Demonstrations {(S1, T1), ..., (SN , TN )},number of reward functions J , size of vocabularyK.Initialize: x11, .
.
.
, xJK , randomly.repeatE Step: Computezji =Pr(Rj)Pr(Si,Ti)Pr(Ti|Rj)?wk?Si xkj .M step: Computexkj = 1X?wk?Si Pr(Rj |Si)+?iN(Si)zji+.until target number of iterations completed.Pr(SN |R1) =?wk?SN Pr(wk|R1) = 8.6 ?
10?7,Pr(SN |R2) =?wk?SN Pr(wk|R2) = 4.1 ?
10?4,and choose the optimal policy corresponding to re-ward R2, thus successfully carrying out the task.Note that R1 and R2 corresponded to the two tar-get tasks, but this mapping was determined by EM.We illustrate the limitation of the unigram model bytelling the trained agent to Go with the star to green,(we label this sentence S?N ).
Using the learnedparameters, the agent computes the following esti-mates:Pr(S?N |R1) =?wk?S?NPr(wk|R1) = 8.25?
10?7,Pr(S?N |R2) =?wk?S?NPr(wk|R2) = 2.10?
10?5.The agent wrongly chooses reward R2 and goes tothe green room instead of taking the star to the greenroom.
The problem with the unigram model in thiscase is that it gives too much weight to word fre-quencies (in this case go) without taking into ac-count what the words mean or how they are usedin the context of the sentence.
Using the system de-scribed in Section 2, we can address these problemsand also move towards more complex scenarios.4 Conclusions and Future WorkWe have presented a three-component architecturefor interpreting natural language instructions, wherethe learner has access to natural language input anddemonstrations of appropriate behavior.
Our futurework includes fully implementing the system to beable to build abstract tasks from language informa-tion and feature relevance.Figure 1: Training data for 2 tasks: Taking the star to thegreen room (left) and Going to the green room (right).AcknowledgmentsThe authors acknowledge the support of the Na-tional Science Foundation (collaborative grant IIS-00006577 and IIS-1065195).
The authors thank theanonymous reviewers for their feedback.
Any opin-ions, findings, conclusions, or recommendations ex-pressed in this paper are those of the authors, anddo not necessarily reflect the views of the fundingorganization.ReferencesPieter Abbeel and Andrew Ng.
2004.
Apprenticeshiplearning via inverse reinforcement learning.
In Pro-ceedings of the Twenty-First International Conferencein Machine Learning (ICML 2004).Yoav Atrzi and Luke Zettlemoyer.
2011.
Bootstrappingsemantic parsers for conversations.
In Proceedings ofthe 2011 Conference on Empirical Methods in NaturalLanguage Processing.Monica Babes?-Vroman, Vukosi Marivate, Kaushik Sub-ramanian, and Michael Littman.
2011.
Apprentice-ship learning about multiple intentions.
In Proceed-ings of the Twenty Eighth International Conference onMachine Learning (ICML 2011).S.
R. K. Branavan, Harr Chen, Luke S. Zettlemoyer, andRegina Barzilay.
2009.
Reinforcement learning formapping instructions to actions.
In Proceedings ofthe Joint Conference of the 47th Annual Meeting ofthe ACL and the 4th International Joint Conference on5Natural Language Processing of the AFNLP: Volume1 - Volume 1, ACL ?09.S.
R. K. Branavan, Luke S. Zettlemoyer, and ReginaBarzilay.
2010.
Reading between the lines: Learningto map high-level instructions to commands.
In Asso-ciation for Computational Linguistics (ACL 2010).S.R.K.
Branavan, David Silver, and Regina Barzilay.2011.
Learning to win by reading manuals in a monte-carlo framework.
In Association for ComputationalLinguistics (ACL 2011).David L. Chen and Raymond J. Mooney.
2011.
Learningto interpret natural language navigation instructionsfrom observations.
In Proceedings of the 25th AAAIConference on Artificial Intelligence (AAAI-2011).,pages 859?865.James Clarke, Dan Goldwasser, Ming-Wei Chang, andDan Roth.
2010.
Driving semantic parsing from theworld?s response.
In Proceedings of the Associationfor Computational Linguistics (ACL 2010).A.
P. Dempster, N. M. Laird, and D. B. Rubin.
1977.Maximum likelihood from incomplete data via the EMalgorithm.
Journal of the Royal Statistical Society,39(1):1?38.Carlos Diuk, Andre Cohen, and Michael Littman.
2008.An object-oriented representation for efficient rein-forcement learning.
In Proceedings of the Twenty-Fifth International Conference on Machine Learning(ICML-08).Dan Goldwasser and Dan Roth.
2011.
Learning fromnatural instructions.
In Proceedings of the Twenty-Second International Joint Conference on Artificial In-telligence.Rohit J. Kate and Raymond J. Mooney.
2006.
Usingstring-kernels for learning semantic parsers.
In Pro-ceedings of the 21st International Conference on Com-putational Linguistics and the 44th annual meeting ofthe Association for Computational Linguistics, ACL-44.Percy Liang, Michael Jordan, and Dan Klein.
2011.Learning dependency-based compositional semantics.In Association for Computational Linguistics (ACL2011).Wei Lu, Hwee Tou Ng, Wee Sun Lee, and Luke S. Zettle-moyer.
2008.
A generative model for parsing naturallanguage to meaning representations.
In Proceedingsof the Conference on Empirical Methods in NaturalLanguage Processing, EMNLP ?08.Smaranda Muresan and Owen Rambow.
2007.
Grammarapproximation by representative sublanguage: A newmodel for language learning.
In Proceedings of ACL.Smaranda Muresan.
2011.
Learning for deep languageunderstanding.
In Proceedings of IJCAI-11.Stefanie Tellex, Thomas Kollar, Steven Dickerson,Matthew Walter, Ashis Gopal Banerjee, Seth Teller,and Nicholas Roy.
2011.
Understanding naturallanguage commands for robotic navigation and mo-bile manipulation.
In Proceedings of the Twenty-FifthAAAI Conference on Articifical Intelligence.Adam Vogel and Dan Jurafsky.
2010.
Learning to follownavigational directions.
In Association for Computa-tional Linguistics (ACL 2010).Yuk Wah Wong and Raymond Mooney.
2007.
Learn-ing synchronous grammars for semantic parsing withlambda calculus.
In Proceedings of the 45th AnnualMeeting of the Association for Computational Linguis-tics (ACL-2007).Luke S. Zettlemoyer and Michael Collins.
2005.
Learn-ing to map sentences to logical form: Structured clas-sification with probabilistic categorial grammars.
InProceedings of UAI-05.Luke Zettlemoyer and Michael Collins.
2009.
Learningcontext-dependent mappings from sentences to logicalform.
In Proceedings of the Association for Computa-tional Linguistics (ACL?09).6
